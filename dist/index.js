!function(e){var n={};function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(i,r,function(n){return e[n]}.bind(null,r));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=84)}([function(e,n,t){"use strict";e.exports=t(62)},function(e,n){e.exports=require("util")},function(e,n,t){"use strict";e.exports.EOL="\n",e.exports.SUPPRESS="==SUPPRESS==",e.exports.OPTIONAL="?",e.exports.ZERO_OR_MORE="*",e.exports.ONE_OR_MORE="+",e.exports.PARSER="A...",e.exports.REMAINDER="...",e.exports._UNRECOGNIZED_ARGS_ATTR="_unrecognized_args"},function(e,n,t){try{var i=t(1);if("function"!=typeof i.inherits)throw"";e.exports=i.inherits}catch(n){e.exports=t(71)}},function(e,n,t){"use strict";t.d(n,"a",(function(){return m}));var i=function(e){for(var n,t=0,i=0,r=e.length;r>=4;++i,r-=4)n=1540483477*(65535&(n=255&e.charCodeAt(i)|(255&e.charCodeAt(++i))<<8|(255&e.charCodeAt(++i))<<16|(255&e.charCodeAt(++i))<<24))+(59797*(n>>>16)<<16),t=1540483477*(65535&(n^=n>>>24))+(59797*(n>>>16)<<16)^1540483477*(65535&t)+(59797*(t>>>16)<<16);switch(r){case 3:t^=(255&e.charCodeAt(i+2))<<16;case 2:t^=(255&e.charCodeAt(i+1))<<8;case 1:t=1540483477*(65535&(t^=255&e.charCodeAt(i)))+(59797*(t>>>16)<<16)}return(((t=1540483477*(65535&(t^=t>>>13))+(59797*(t>>>16)<<16))^t>>>15)>>>0).toString(36)},r={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var a=/[A-Z]|^ms/g,o=/_EMO_([^_]+?)_([^]*?)_EMO_/g,s=function(e){return 45===e.charCodeAt(1)},c=function(e){return null!=e&&"boolean"!=typeof e},u=function(e){var n={};return function(t){return void 0===n[t]&&(n[t]=e(t)),n[t]}}((function(e){return s(e)?e:e.replace(a,"-$&").toLowerCase()})),p=function(e,n){switch(e){case"animation":case"animationName":if("string"==typeof n)return n.replace(o,(function(e,n,t){return f={name:n,styles:t,next:f},n}))}return 1===r[e]||s(e)||"number"!=typeof n||0===n?n:n+"px"};function l(e,n,t,i){if(null==t)return"";if(void 0!==t.__emotion_styles)return t;switch(typeof t){case"boolean":return"";case"object":if(1===t.anim)return f={name:t.name,styles:t.styles,next:f},t.name;if(void 0!==t.styles){var r=t.next;if(void 0!==r)for(;void 0!==r;)f={name:r.name,styles:r.styles,next:f},r=r.next;return t.styles+";"}return function(e,n,t){var i="";if(Array.isArray(t))for(var r=0;r<t.length;r++)i+=l(e,n,t[r],!1);else for(var a in t){var o=t[a];if("object"!=typeof o)null!=n&&void 0!==n[o]?i+=a+"{"+n[o]+"}":c(o)&&(i+=u(a)+":"+p(a,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=n&&void 0!==n[o[0]]){var s=l(e,n,o,!1);switch(a){case"animation":case"animationName":i+=u(a)+":"+s+";";break;default:i+=a+"{"+s+"}"}}else for(var f=0;f<o.length;f++)c(o[f])&&(i+=u(a)+":"+p(a,o[f])+";")}return i}(e,n,t);case"function":if(void 0!==e){var a=f,o=t(e);return f=a,l(e,n,o,i)}break;case"string":}if(null==n)return t;var s=n[t];return void 0===s||i?t:s}var f,d=/label:\s*([^\s;\n{]+)\s*;/g;var m=function(e,n,t){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,a="";f=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,a+=l(t,n,o,!1)):a+=o[0];for(var s=1;s<e.length;s++)a+=l(t,n,e[s],46===a.charCodeAt(a.length-1)),r&&(a+=o[s]);d.lastIndex=0;for(var c,u="";null!==(c=d.exec(a));)u+="-"+c[1];return{name:i(a)+u,styles:a,next:f}}},function(e,n,t){"use strict";t.d(n,"a",(function(){return r})),t.d(n,"b",(function(){return a}));var i="undefined"!=typeof document;function r(e,n,t){var i="";return t.split(" ").forEach((function(t){void 0!==e[t]?n.push(e[t]):i+=t+" "})),i}var a=function(e,n,t){var r=e.key+"-"+n.name;if((!1===t||!1===i&&void 0!==e.compat)&&void 0===e.registered[r]&&(e.registered[r]=n.styles),void 0===e.inserted[n.name]){var a="",o=n;do{var s=e.insert("."+r,o,e.sheet,!0);i||void 0===s||(a+=s),o=o.next}while(void 0!==o);if(!i&&0!==a.length)return a}}},function(e,n){e.exports=require("stream")},function(e,n){function t(e){return Object.prototype.toString.call(e)}n.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===t(e)},n.isBoolean=function(e){return"boolean"==typeof e},n.isNull=function(e){return null===e},n.isNullOrUndefined=function(e){return null==e},n.isNumber=function(e){return"number"==typeof e},n.isString=function(e){return"string"==typeof e},n.isSymbol=function(e){return"symbol"==typeof e},n.isUndefined=function(e){return void 0===e},n.isRegExp=function(e){return"[object RegExp]"===t(e)},n.isObject=function(e){return"object"==typeof e&&null!==e},n.isDate=function(e){return"[object Date]"===t(e)},n.isError=function(e){return"[object Error]"===t(e)||e instanceof Error},n.isFunction=function(e){return"function"==typeof e},n.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},n.isBuffer=Buffer.isBuffer},function(e,n,t){"use strict";var i=t(2),r=e.exports=function(e){if(e=e||{},this.optionStrings=e.optionStrings||[],this.dest=e.dest,this.nargs=void 0!==e.nargs?e.nargs:null,this.constant=void 0!==e.constant?e.constant:null,this.defaultValue=e.defaultValue,this.type=void 0!==e.type?e.type:null,this.choices=void 0!==e.choices?e.choices:null,this.required=void 0!==e.required&&e.required,this.help=void 0!==e.help?e.help:null,this.metavar=void 0!==e.metavar?e.metavar:null,!(this.optionStrings instanceof Array))throw new Error("optionStrings should be an array");if(void 0!==this.required&&"boolean"!=typeof this.required)throw new Error("required should be a boolean")};r.prototype.getName=function(){return this.optionStrings.length>0?this.optionStrings.join("/"):null!==this.metavar&&this.metavar!==i.SUPPRESS?this.metavar:void 0!==this.dest&&this.dest!==i.SUPPRESS?this.dest:null},r.prototype.isOptional=function(){return!this.isPositional()},r.prototype.isPositional=function(){return 0===this.optionStrings.length},r.prototype.call=function(){throw new Error(".call() not defined")}},function(e,n){e.exports=require("fs")},function(e,n,t){"use strict";t.r(n),t.d(n,"cache",(function(){return b})),t.d(n,"css",(function(){return g})),t.d(n,"cx",(function(){return f})),t.d(n,"flush",(function(){return p})),t.d(n,"getRegisteredStyles",(function(){return m})),t.d(n,"hydrate",(function(){return l})),t.d(n,"injectGlobal",(function(){return h})),t.d(n,"keyframes",(function(){return v})),t.d(n,"merge",(function(){return d})),t.d(n,"sheet",(function(){return x}));var i=t(14),r=t(4),a=t(5);function o(e,n){if(void 0===e.inserted[n.name])return e.insert("",n,e.sheet,!0)}function s(e,n,t){var i=[],r=Object(a.a)(e,i,t);return i.length<2?t:r+n(i)}var c=function e(n){for(var t="",i=0;i<n.length;i++){var r=n[i];if(null!=r){var a=void 0;switch(typeof r){case"boolean":break;case"object":if(Array.isArray(r))a=e(r);else for(var o in a="",r)r[o]&&o&&(a&&(a+=" "),a+=o);break;default:a=r}a&&(t&&(t+=" "),t+=a)}}return t},u=function(e){var n=Object(i.a)(e);n.sheet.speedy=function(e){this.isSpeedy=e},n.compat=!0;var t=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var o=Object(r.a)(t,n.registered,void 0);return Object(a.b)(n,o,!1),n.key+"-"+o.name};return{css:t,cx:function(){for(var e=arguments.length,i=new Array(e),r=0;r<e;r++)i[r]=arguments[r];return s(n.registered,t,c(i))},injectGlobal:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var a=Object(r.a)(t,n.registered);o(n,a)},keyframes:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var a=Object(r.a)(t,n.registered),s="animation-"+a.name;return o(n,{name:a.name,styles:"@keyframes "+s+"{"+a.styles+"}"}),s},hydrate:function(e){e.forEach((function(e){n.inserted[e]=!0}))},flush:function(){n.registered={},n.inserted={},n.sheet.flush()},sheet:n.sheet,cache:n,getRegisteredStyles:a.a.bind(null,n.registered),merge:s.bind(null,n.registered,t)}}(),p=u.flush,l=u.hydrate,f=u.cx,d=u.merge,m=u.getRegisteredStyles,h=u.injectGlobal,v=u.keyframes,g=u.css,x=u.sheet,b=u.cache},function(e,n,t){"use strict";var i=t(16),r=Object.keys||function(e){var n=[];for(var t in e)n.push(t);return n};e.exports=l;var a=Object.create(t(7));a.inherits=t(3);var o=t(35),s=t(38);a.inherits(l,o);for(var c=r(s.prototype),u=0;u<c.length;u++){var p=c[u];l.prototype[p]||(l.prototype[p]=s.prototype[p])}function l(e){if(!(this instanceof l))return new l(e);o.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",f)}function f(){this.allowHalfOpen||this._writableState.ended||i.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),l.prototype._destroy=function(e,n){this.push(null),this.end(),i.nextTick(n,e)}},function(e,n){e.exports=require("path")},function(e,n,t){"use strict";function i(e,n){return Object.prototype.hasOwnProperty.call(e,n)}n.repeat=function(e,n){for(var t="",i=0;i<n;i++)t+=e;return t},n.arrayEqual=function(e,n){if(e.length!==n.length)return!1;for(var t=0;t<e.length;t++)if(e[t]!==n[t])return!1;return!0},n.trimChars=function(e,n){for(var t=0,i=e.length-1;n.indexOf(e.charAt(t))>=0;)t++;for(;n.indexOf(e.charAt(i))>=0;)i--;return e.slice(t,i+1)},n.capitalize=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},n.arrayUnion=function(){for(var e=[],n=0,t={};n<arguments.length;n++)for(var i=arguments[n],r=0;r<i.length;r++)t[i[r]]||(t[i[r]]=!0,e.push(i[r]));return e},n.has=i,n.extend=function(e,n){for(var t in n)i(n,t)&&(e[t]=n[t])},n.trimEnd=function(e){return e.replace(/\s+$/g,"")}},function(e,n,t){"use strict";var i=t(18);var r=function(e){function n(e,n,i){var r=n.trim().split(m);n=r;var a=r.length,o=e.length;switch(o){case 0:case 1:var s=0;for(e=0===o?"":e[0]+" ";s<a;++s)n[s]=t(e,n[s],i).trim();break;default:var c=s=0;for(n=[];s<a;++s)for(var u=0;u<o;++u)n[c++]=t(e[u]+" ",r[s],i).trim()}return n}function t(e,n,t){var i=n.charCodeAt(0);switch(33>i&&(i=(n=n.trim()).charCodeAt(0)),i){case 38:return n.replace(h,"$1"+e.trim());case 58:return e.trim()+n.replace(h,"$1"+e.trim());default:if(0<1*t&&0<n.indexOf("\f"))return n.replace(h,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+n}function i(e,n,t,a){var o=e+";",s=2*n+3*t+4*a;if(944===s){e=o.indexOf(":",9)+1;var c=o.substring(e,o.length-1).trim();return c=o.substring(0,e).trim()+c+";",1===F||2===F&&r(c,1)?"-webkit-"+c+c:c}if(0===F||2===F&&!r(o,1))return o;switch(s){case 1015:return 97===o.charCodeAt(10)?"-webkit-"+o+o:o;case 951:return 116===o.charCodeAt(3)?"-webkit-"+o+o:o;case 963:return 110===o.charCodeAt(5)?"-webkit-"+o+o:o;case 1009:if(100!==o.charCodeAt(4))break;case 969:case 942:return"-webkit-"+o+o;case 978:return"-webkit-"+o+"-moz-"+o+o;case 1019:case 983:return"-webkit-"+o+"-moz-"+o+"-ms-"+o+o;case 883:if(45===o.charCodeAt(8))return"-webkit-"+o+o;if(0<o.indexOf("image-set(",11))return o.replace(E,"$1-webkit-$2")+o;break;case 932:if(45===o.charCodeAt(4))switch(o.charCodeAt(5)){case 103:return"-webkit-box-"+o.replace("-grow","")+"-webkit-"+o+"-ms-"+o.replace("grow","positive")+o;case 115:return"-webkit-"+o+"-ms-"+o.replace("shrink","negative")+o;case 98:return"-webkit-"+o+"-ms-"+o.replace("basis","preferred-size")+o}return"-webkit-"+o+"-ms-"+o+o;case 964:return"-webkit-"+o+"-ms-flex-"+o+o;case 1023:if(99!==o.charCodeAt(8))break;return"-webkit-box-pack"+(c=o.substring(o.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+o+"-ms-flex-pack"+c+o;case 1005:return f.test(o)?o.replace(l,":-webkit-")+o.replace(l,":-moz-")+o:o;case 1e3:switch(n=(c=o.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(n)){case 226:c=o.replace(b,"tb");break;case 232:c=o.replace(b,"tb-rl");break;case 220:c=o.replace(b,"lr");break;default:return o}return"-webkit-"+o+"-ms-"+c+o;case 1017:if(-1===o.indexOf("sticky",9))break;case 975:switch(n=(o=e).length-10,s=(c=(33===o.charCodeAt(n)?o.substring(0,n):o).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(111>c.charCodeAt(8))break;case 115:o=o.replace(c,"-webkit-"+c)+";"+o;break;case 207:case 102:o=o.replace(c,"-webkit-"+(102<s?"inline-":"")+"box")+";"+o.replace(c,"-webkit-"+c)+";"+o.replace(c,"-ms-"+c+"box")+";"+o}return o+";";case 938:if(45===o.charCodeAt(5))switch(o.charCodeAt(6)){case 105:return c=o.replace("-items",""),"-webkit-"+o+"-webkit-box-"+c+"-ms-flex-"+c+o;case 115:return"-webkit-"+o+"-ms-flex-item-"+o.replace(_,"")+o;default:return"-webkit-"+o+"-ms-flex-line-pack"+o.replace("align-content","").replace(_,"")+o}break;case 973:case 989:if(45!==o.charCodeAt(3)||122===o.charCodeAt(4))break;case 931:case 953:if(!0===$.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?i(e.replace("stretch","fill-available"),n,t,a).replace(":fill-available",":stretch"):o.replace(c,"-webkit-"+c)+o.replace(c,"-moz-"+c.replace("fill-",""))+o;break;case 962:if(o="-webkit-"+o+(102===o.charCodeAt(5)?"-ms-"+o:"")+o,211===t+a&&105===o.charCodeAt(13)&&0<o.indexOf("transform",10))return o.substring(0,o.indexOf(";",27)+1).replace(d,"$1-webkit-$2")+o}return o}function r(e,n){var t=e.indexOf(1===n?":":"{"),i=e.substring(0,3!==n?t:10);return t=e.substring(t+1,e.length-1),q(2!==n?i:i.replace(k,"$1"),t,n)}function a(e,n){var t=i(n,n.charCodeAt(0),n.charCodeAt(1),n.charCodeAt(2));return t!==n+";"?t.replace(w," or ($1)").substring(4):"("+n+")"}function o(e,n,t,i,r,a,o,s,u,p){for(var l,f=0,d=n;f<M;++f)switch(l=C[f].call(c,e,d,t,i,r,a,o,s,u,p)){case void 0:case!1:case!0:case null:break;default:d=l}if(d!==n)return d}function s(e){return void 0!==(e=e.prefix)&&(q=null,e?"function"!=typeof e?F=1:(F=2,q=e):F=0),s}function c(e,t){var s=e;if(33>s.charCodeAt(0)&&(s=s.trim()),s=[s],0<M){var c=o(-1,t,s,s,A,S,0,0,0,0);void 0!==c&&"string"==typeof c&&(t=c)}var l=function e(t,s,c,l,f){for(var d,m,h,b,w,_=0,k=0,$=0,E=0,C=0,q=0,T=h=d=0,z=0,B=0,L=0,P=0,I=c.length,D=I-1,N="",U="",W="",H="";z<I;){if(m=c.charCodeAt(z),z===D&&0!==k+E+$+_&&(0!==k&&(m=47===k?10:47),E=$=_=0,I++,D++),0===k+E+$+_){if(z===D&&(0<B&&(N=N.replace(p,"")),0<N.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:N+=c.charAt(z)}m=59}switch(m){case 123:for(d=(N=N.trim()).charCodeAt(0),h=1,P=++z;z<I;){switch(m=c.charCodeAt(z)){case 123:h++;break;case 125:h--;break;case 47:switch(m=c.charCodeAt(z+1)){case 42:case 47:e:{for(T=z+1;T<D;++T)switch(c.charCodeAt(T)){case 47:if(42===m&&42===c.charCodeAt(T-1)&&z+2!==T){z=T+1;break e}break;case 10:if(47===m){z=T+1;break e}}z=T}}break;case 91:m++;case 40:m++;case 34:case 39:for(;z++<D&&c.charCodeAt(z)!==m;);}if(0===h)break;z++}switch(h=c.substring(P,z),0===d&&(d=(N=N.replace(u,"").trim()).charCodeAt(0)),d){case 64:switch(0<B&&(N=N.replace(p,"")),m=N.charCodeAt(1)){case 100:case 109:case 115:case 45:B=s;break;default:B=O}if(P=(h=e(s,B,h,m,f+1)).length,0<M&&(w=o(3,h,B=n(O,N,L),s,A,S,P,m,f,l),N=B.join(""),void 0!==w&&0===(P=(h=w.trim()).length)&&(m=0,h="")),0<P)switch(m){case 115:N=N.replace(y,a);case 100:case 109:case 45:h=N+"{"+h+"}";break;case 107:h=(N=N.replace(v,"$1 $2"))+"{"+h+"}",h=1===F||2===F&&r("@"+h,3)?"@-webkit-"+h+"@"+h:"@"+h;break;default:h=N+h,112===l&&(U+=h,h="")}else h="";break;default:h=e(s,n(s,N,L),h,l,f+1)}W+=h,h=L=B=T=d=0,N="",m=c.charCodeAt(++z);break;case 125:case 59:if(1<(P=(N=(0<B?N.replace(p,""):N).trim()).length))switch(0===T&&(d=N.charCodeAt(0),45===d||96<d&&123>d)&&(P=(N=N.replace(" ",":")).length),0<M&&void 0!==(w=o(1,N,s,t,A,S,U.length,l,f,l))&&0===(P=(N=w.trim()).length)&&(N="\0\0"),d=N.charCodeAt(0),m=N.charCodeAt(1),d){case 0:break;case 64:if(105===m||99===m){H+=N+c.charAt(z);break}default:58!==N.charCodeAt(P-1)&&(U+=i(N,d,m,N.charCodeAt(2)))}L=B=T=d=0,N="",m=c.charCodeAt(++z)}}switch(m){case 13:case 10:47===k?k=0:0===1+d&&107!==l&&0<N.length&&(B=1,N+="\0"),0<M*R&&o(0,N,s,t,A,S,U.length,l,f,l),S=1,A++;break;case 59:case 125:if(0===k+E+$+_){S++;break}default:switch(S++,b=c.charAt(z),m){case 9:case 32:if(0===E+_+k)switch(C){case 44:case 58:case 9:case 32:b="";break;default:32!==m&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===E+k+_&&(B=L=1,b="\f"+b);break;case 108:if(0===E+k+_+j&&0<T)switch(z-T){case 2:112===C&&58===c.charCodeAt(z-3)&&(j=C);case 8:111===q&&(j=q)}break;case 58:0===E+k+_&&(T=z);break;case 44:0===k+$+E+_&&(B=1,b+="\r");break;case 34:case 39:0===k&&(E=E===m?0:0===E?m:E);break;case 91:0===E+k+$&&_++;break;case 93:0===E+k+$&&_--;break;case 41:0===E+k+_&&$--;break;case 40:if(0===E+k+_){if(0===d)switch(2*C+3*q){case 533:break;default:d=1}$++}break;case 64:0===k+$+E+_+T+h&&(h=1);break;case 42:case 47:if(!(0<E+_+$))switch(k){case 0:switch(2*m+3*c.charCodeAt(z+1)){case 235:k=47;break;case 220:P=z,k=42}break;case 42:47===m&&42===C&&P+2!==z&&(33===c.charCodeAt(P+2)&&(U+=c.substring(P,z+1)),b="",k=0)}}0===k&&(N+=b)}q=C,C=m,z++}if(0<(P=U.length)){if(B=s,0<M&&(void 0!==(w=o(2,U,B,t,A,S,P,l,f,l))&&0===(U=w).length))return H+U+W;if(U=B.join(",")+"{"+U+"}",0!=F*j){switch(2!==F||r(U,2)||(j=0),j){case 111:U=U.replace(x,":-moz-$1")+U;break;case 112:U=U.replace(g,"::-webkit-input-$1")+U.replace(g,"::-moz-$1")+U.replace(g,":-ms-input-$1")+U}j=0}}return H+U+W}(O,s,t,0,0);return 0<M&&(void 0!==(c=o(-2,l,s,s,A,S,l.length,0,0,0))&&(l=c)),"",j=0,S=A=1,l}var u=/^\0+/g,p=/[\0\r\f]/g,l=/: */g,f=/zoo|gra/,d=/([,: ])(transform)/g,m=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,v=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,x=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,y=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,_=/-self|flex-/g,k=/[^]*?(:[rp][el]a[\w-]+)[^]*/,$=/stretch|:\s*\w+\-(?:conte|avail)/,E=/([^-])(image-set\()/,S=1,A=1,j=0,F=1,O=[],C=[],M=0,q=null,R=0;return c.use=function e(n){switch(n){case void 0:case null:M=C.length=0;break;default:if("function"==typeof n)C[M++]=n;else if("object"==typeof n)for(var t=0,i=n.length;t<i;++t)e(n[t]);else R=0|!!n}return e},c.set=s,void 0!==e&&s(e),c},a=function(e){var n=new WeakMap;return function(t){if(n.has(t))return n.get(t);var i=e(t);return n.set(t,i),i}};function o(e){e&&s.current.insert(e+"}")}var s={current:null},c=function(e,n,t,i,r,a,c,u,p,l){switch(e){case 1:switch(n.charCodeAt(0)){case 64:return s.current.insert(n+";"),"";case 108:if(98===n.charCodeAt(2))return""}break;case 2:if(0===u)return n+"/*|*/";break;case 3:switch(u){case 102:case 112:return s.current.insert(t[0]+n),"";default:return n+(0===l?"/*|*/":"")}case-2:n.split("/*|*/}").forEach(o)}},u=function(e,n){if(1===e&&108===n.charCodeAt(0)&&98===n.charCodeAt(2))return""},p="undefined"!=typeof document,l={},f=p?void 0:a((function(){var e=a((function(){return{}})),n={},t={};return function(i){return void 0===i||!0===i?n:!1===i?t:e(i)}}));n.a=function(e){void 0===e&&(e={});var n,t=e.key||"css";void 0!==e.prefix&&(n={prefix:e.prefix});var a=new r(n);var o,d,m={};if(p){o=e.container||document.head;var h=document.querySelectorAll("style[data-emotion-"+t+"]");Array.prototype.forEach.call(h,(function(e){e.getAttribute("data-emotion-"+t).split(" ").forEach((function(e){m[e]=!0})),e.parentNode!==o&&o.appendChild(e)}))}if(p)a.use(e.stylisPlugins)(c),d=function(e,n,t,i){var r=n.name;s.current=t,a(e,n.styles),i&&(g.inserted[r]=!0)};else{a.use(u);var v=l;(e.stylisPlugins||void 0!==e.prefix)&&(a.use(e.stylisPlugins),v=f(e.stylisPlugins||l)(e.prefix));d=function(e,n,t,i){var r=n.name,o=function(e,n){var t=n.name;return void 0===v[t]&&(v[t]=a(e,n.styles)),v[t]}(e,n);return void 0===g.compat?(i&&(g.inserted[r]=!0),o):i?void(g.inserted[r]=o):o}}var g={key:t,sheet:new i.a({key:t,container:o,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:m,registered:{},insert:d};return g}},function(e,n){e.exports=require("buffer")},function(e,n,t){"use strict";"undefined"==typeof process||!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,t,i){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var r,a,o=arguments.length;switch(o){case 0:case 1:return process.nextTick(e);case 2:return process.nextTick((function(){e.call(null,n)}));case 3:return process.nextTick((function(){e.call(null,n,t)}));case 4:return process.nextTick((function(){e.call(null,n,t,i)}));default:for(r=new Array(o-1),a=0;a<r.length;)r[a++]=arguments[a];return process.nextTick((function(){e.apply(null,r)}))}}}:e.exports=process},function(e,n,t){var i=t(15),r=i.Buffer;function a(e,n){for(var t in e)n[t]=e[t]}function o(e,n,t){return r(e,n,t)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=i:(a(i,n),n.Buffer=o),a(r,o),o.from=function(e,n,t){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,n,t)},o.alloc=function(e,n,t){if("number"!=typeof e)throw new TypeError("Argument must be a number");var i=r(e);return void 0!==n?"string"==typeof t?i.fill(n,t):i.fill(n):i.fill(0),i},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i.SlowBuffer(e)}},function(e,n,t){"use strict";t.d(n,"a",(function(){return i}));var i=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var n=e.prototype;return n.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var n,t=function(e){var n=document.createElement("style");return n.setAttribute("data-emotion",e.key),void 0!==e.nonce&&n.setAttribute("nonce",e.nonce),n.appendChild(document.createTextNode("")),n}(this);n=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(t,n),this.tags.push(t)}var i=this.tags[this.tags.length-1];if(this.isSpeedy){var r=function(e){if(e.sheet)return e.sheet;for(var n=0;n<document.styleSheets.length;n++)if(document.styleSheets[n].ownerNode===e)return document.styleSheets[n]}(i);try{var a=105===e.charCodeAt(1)&&64===e.charCodeAt(0);r.insertRule(e,a?0:r.cssRules.length)}catch(e){0}}else i.appendChild(document.createTextNode(e));this.ctr++},n.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}()},function(e,n,t){"use strict";var i=t(1),r=t(8),a=e.exports=function(e){if((e=e||{}).nargs=0,void 0===e.constant)throw new Error("constant option is required for storeAction");r.call(this,e)};i.inherits(a,r),a.prototype.call=function(e,n){n.set(this.dest,this.constant)}},function(e,n,t){"use strict";var i=t(1).format;e.exports=function(e,n){var t,r,a=null;return t=(a=e.getName?e.getName():""+e)?i('argument "%s": %s',a,n):n,(r=new TypeError(t)).code="ARGError",r}},function(e,n,t){"use strict";var i=t(26).sprintf,r=t(2),a=t(13);function o(e,n){this._parent=e,this._heading=n,this._items=[]}o.prototype.addItem=function(e){this._items.push(e)},o.prototype.formatHelp=function(e){var n,t;if(this._parent&&e._indent(),n=this._items.map((function(n){var t,i,r;return t=e,i=n[0],r=n[1],i.apply(t,r)})),n=e._joinParts(n),this._parent&&e._dedent(),!n)return"";if(t="",this._heading&&this._heading!==r.SUPPRESS){var i=e.currentIndent;t=a.repeat(" ",i)+this._heading+":"+r.EOL}return e._joinParts([r.EOL,t,n,r.EOL])};var s=e.exports=function(e){e=e||{},this._prog=e.prog,this._maxHelpPosition=e.maxHelpPosition||24,this._width=e.width||(process.env.COLUMNS||80)-2,this._currentIndent=0,this._indentIncriment=e.indentIncriment||2,this._level=0,this._actionMaxLength=0,this._rootSection=new o(null),this._currentSection=this._rootSection,this._whitespaceMatcher=new RegExp("\\s+","g"),this._longBreakMatcher=new RegExp(r.EOL+r.EOL+r.EOL+"+","g")};s.prototype._indent=function(){this._currentIndent+=this._indentIncriment,this._level+=1},s.prototype._dedent=function(){if(this._currentIndent-=this._indentIncriment,this._level-=1,this._currentIndent<0)throw new Error("Indent decreased below 0.")},s.prototype._addItem=function(e,n){this._currentSection.addItem([e,n])},s.prototype.startSection=function(e){this._indent();var n=new o(this._currentSection,e),t=n.formatHelp.bind(n);this._addItem(t,[this]),this._currentSection=n},s.prototype.endSection=function(){this._currentSection=this._currentSection._parent,this._dedent()},s.prototype.addText=function(e){e&&e!==r.SUPPRESS&&this._addItem(this._formatText,[e])},s.prototype.addUsage=function(e,n,t,i){e!==r.SUPPRESS&&this._addItem(this._formatUsage,[e,n,t,i])},s.prototype.addArgument=function(e){if(e.help!==r.SUPPRESS){var n,t=this,i=[this._formatActionInvocation(e)],a=i[0].length;e._getSubactions&&(this._indent(),e._getSubactions().forEach((function(e){var n=t._formatActionInvocation(e);i.push(n),a=Math.max(a,n.length)})),this._dedent()),n=a+this._currentIndent,this._actionMaxLength=Math.max(this._actionMaxLength,n),this._addItem(this._formatAction,[e])}},s.prototype.addArguments=function(e){var n=this;e.forEach((function(e){n.addArgument(e)}))},s.prototype.formatHelp=function(){var e=this._rootSection.formatHelp(this);return e&&(e=e.replace(this._longBreakMatcher,r.EOL+r.EOL),e=a.trimChars(e,r.EOL)+r.EOL),e},s.prototype._joinParts=function(e){return e.filter((function(e){return e&&e!==r.SUPPRESS})).join("")},s.prototype._formatUsage=function(e,n,t,o){if(o||"string"==typeof o||(o="usage: "),n=n||[],t=t||[],e)e=i(e,{prog:this._prog});else if(e||0!==n.length){if(!e){var s,c=this._prog,u=[],p=[];if(n.forEach((function(e){e.isOptional()?u.push(e):p.push(e)})),e=[c,this._formatActionsUsage([].concat(u,p),t)].join(" "),s=this._width-this._currentIndent,o.length+e.length>s){var l=new RegExp("\\(.*?\\)+|\\[.*?\\]+|\\S+","g"),f=this._formatActionsUsage(u,t),d=this._formatActionsUsage(p,t),m=f.match(l),h=d.match(l)||[];if(m.join(" ")!==f)throw new Error("assert \"optionalParts.join(' ') === optionalUsage\"");if(h.join(" ")!==d)throw new Error("assert \"positionalParts.join(' ') === positionalUsage\"");var v,g,x=function(e,n,t){var i=[],r=[],a=t?t.length-1:n.length-1;return e.forEach((function(e){a+1+e.length>s&&(i.push(n+r.join(" ")),r=[],a=n.length-1),r.push(e),a+=e.length+1})),r&&i.push(n+r.join(" ")),t&&(i[0]=i[0].substr(n.length)),i};o.length+c.length<=.75*s?(g=a.repeat(" ",o.length+c.length+1),v=m?[].concat(x([c].concat(m),g,o),x(h,g)):h?x([c].concat(h),g,o):[c]):(g=a.repeat(" ",o.length),(v=x(m.concat(h),g)).length>1&&(v=[].concat(x(m,g),x(h,g))),v=[c].concat(v)),e=v.join(r.EOL)}}}else e=this._prog;return o+e+r.EOL+r.EOL},s.prototype._formatActionsUsage=function(e,n){var t=[],i=[],o=this;n.forEach((function(n){var r,o,s=e.indexOf(n._groupActions[0]);if(s>=0&&(r=s+n._groupActions.length,a.arrayEqual(e.slice(s,r),n._groupActions)))for(n._groupActions.forEach((function(e){t.push(e)})),n.required?(i[s]?i[s]+=" (":i[s]="(",i[r]=")"):(i[s]?i[s]+=" [":i[s]="[",i[r]="]"),o=s+1;o<r;o+=1)i[o]="|"}));var s=[];e.forEach((function(e,n){var a,c,u;e.help===r.SUPPRESS?(s.push(null),"|"===i[n]?i.splice(n,n):"|"===i[n+1]&&i.splice(n+1,n+1)):e.isOptional()?(c=e.optionStrings[0],0===e.nargs?a=""+c:(u=e.dest.toUpperCase(),a=c+" "+o._formatArgs(e,u)),!e.required&&t.indexOf(e)<0&&(a="["+a+"]"),s.push(a)):(a=o._formatArgs(e,e.dest),t.indexOf(e)>=0&&"["===a[0]&&"]"===a[a.length-1]&&(a=a.slice(1,-1)),s.push(a))}));for(var c=i.length-1;c>=0;--c)null!==i[c]&&s.splice(c,0,i[c]);var u=s.filter((function(e){return!!e})).join(" ");return u=(u=(u=(u=(u=(u=u.replace(/([\[(]) /g,"$1")).replace(/ ([\])])/g,"$1")).replace(/\[ *\]/g,"")).replace(/\( *\)/g,"")).replace(/\(([^|]*)\)/g,"$1")).trim()},s.prototype._formatText=function(e){e=i(e,{prog:this._prog});var n=this._width-this._currentIndent,t=a.repeat(" ",this._currentIndent);return this._fillText(e,n,t)+r.EOL+r.EOL},s.prototype._formatAction=function(e){var n,t,i,o,s=this,c=Math.min(this._actionMaxLength+2,this._maxHelpPosition),u=this._width-c,p=c-this._currentIndent-2,l=this._formatActionInvocation(e);return e.help?l.length<=p?(l=a.repeat(" ",this._currentIndent)+l+"  "+a.repeat(" ",p-l.length),o=0):(l=a.repeat(" ",this._currentIndent)+l+r.EOL,o=c):l=a.repeat(" ",this._currentIndent)+l+r.EOL,i=[l],e.help?(n=this._expandHelp(e),t=this._splitLines(n,u),i.push(a.repeat(" ",o)+t[0]+r.EOL),t.slice(1).forEach((function(e){i.push(a.repeat(" ",c)+e+r.EOL)}))):l.charAt(l.length-1)!==r.EOL&&i.push(r.EOL),e._getSubactions&&(this._indent(),e._getSubactions().forEach((function(e){i.push(s._formatAction(e))})),this._dedent()),this._joinParts(i)},s.prototype._formatActionInvocation=function(e){if(!e.isOptional())return this._metavarFormatter(e,e.dest)(1)[0];var n,t,i=[];return 0===e.nargs?i=i.concat(e.optionStrings):(n=e.dest.toUpperCase(),t=this._formatArgs(e,n),e.optionStrings.forEach((function(e){i.push(e+" "+t)}))),i.join(", ")},s.prototype._metavarFormatter=function(e,n){var t;if(e.metavar||""===e.metavar)t=e.metavar;else if(e.choices){var i=e.choices;i="string"==typeof i?i.split("").join(", "):Array.isArray(i)?i.join(","):Object.keys(i).join(","),t="{"+i+"}"}else t=n;return function(e){if(Array.isArray(t))return t;for(var n=[],i=0;i<e;i+=1)n.push(t);return n}},s.prototype._formatArgs=function(e,n){var t,i,a=this._metavarFormatter(e,n);switch(e.nargs){case void 0:case null:t=""+(i=a(1))[0];break;case r.OPTIONAL:t="["+(i=a(1))[0]+"]";break;case r.ZERO_OR_MORE:t="["+(i=a(2))[0]+" ["+i[1]+" ...]]";break;case r.ONE_OR_MORE:t=(i=a(2))[0]+" ["+i[1]+" ...]";break;case r.REMAINDER:t="...";break;case r.PARSER:t=(i=a(1))[0]+" ...";break;default:t=(i=a(e.nargs)).join(" ")}return t},s.prototype._expandHelp=function(e){var n={prog:this._prog};return Object.keys(e).forEach((function(t){var i=e[t];i!==r.SUPPRESS&&(n[t]=i)})),n.choices&&("string"==typeof n.choices?n.choices=n.choices.split("").join(", "):Array.isArray(n.choices)?n.choices=n.choices.join(", "):n.choices=Object.keys(n.choices).join(", ")),i(this._getHelpString(e),n)},s.prototype._splitLines=function(e,n){var t=[],i=[" ",".",",","!","?"],a=new RegExp("["+i.join("")+"][^"+i.join("")+"]*$");return(e=(e=(e=e.replace(/[\n\|\t]/g," ")).trim()).replace(this._whitespaceMatcher," ")).split(r.EOL).forEach((function(e){if(n>=e.length)t.push(e);else{for(var r=0,o=n;o<=e.length;)o!==e.length&&i.indexOf(e[o]<-1)&&(o=r+(a.exec(e.substring(r,o))||{}).index+1),t.push(e.substring(r,o)),r=o,o+=n;r<e.length&&t.push(e.substring(r,o))}})),t},s.prototype._fillText=function(e,n,t){var i=this._splitLines(e,n);return(i=i.map((function(e){return t+e}))).join(r.EOL)},s.prototype._getHelpString=function(e){return e.help}},function(e,n,t){"use strict";var i=t(1),r=t(2),a=t(13),o=t(21);function s(e){o.call(this,e)}function c(e){o.call(this,e)}function u(e){c.call(this,e)}i.inherits(s,o),s.prototype._getHelpString=function(e){var n=e.help;if(-1===e.help.indexOf("%(defaultValue)s")&&e.defaultValue!==r.SUPPRESS){var t=[r.OPTIONAL,r.ZERO_OR_MORE];(e.isOptional()||t.indexOf(e.nargs)>=0)&&(n+=" (default: %(defaultValue)s)")}return n},e.exports.ArgumentDefaultsHelpFormatter=s,i.inherits(c,o),c.prototype._fillText=function(e,n,t){var i=e.split("\n");return(i=i.map((function(e){return a.trimEnd(t+e)}))).join("\n")},e.exports.RawDescriptionHelpFormatter=c,i.inherits(u,c),u.prototype._splitLines=function(e){return e.split("\n")},e.exports.RawTextHelpFormatter=u},function(e,n,t){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var i=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(e){i[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(e){return!1}}()?Object.assign:function(e,n){for(var t,s,c=o(e),u=1;u<arguments.length;u++){for(var p in t=Object(arguments[u]))r.call(t,p)&&(c[p]=t[p]);if(i){s=i(t);for(var l=0;l<s.length;l++)a.call(t,s[l])&&(c[s[l]]=t[s[l]])}}return c}},function(e,n,t){e.exports=s;var i=Object.keys||function(e){var n=[];for(var t in e)n.push(t);return n},r=t(7);r.inherits=t(3);var a=t(30),o=t(33);function s(e){if(!(this instanceof s))return new s(e);a.call(this,e),o.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",c)}function c(){this.allowHalfOpen||this._writableState.ended||process.nextTick(this.end.bind(this))}r.inherits(s,a),function(e,n){for(var t=0,i=e.length;t<i;t++)n(e[t],t)}(i(o.prototype),(function(e){s.prototype[e]||(s.prototype[e]=o.prototype[e])}))},function(e,n){e.exports=function(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}},function(e,n,t){!function(e){var t={not_string:/[^s]/,number:/[diefg]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[\+\-]/};function i(){var e=arguments[0],n=i.cache;return n[e]&&n.hasOwnProperty(e)||(n[e]=i.parse(e)),i.format.call(null,n[e],arguments)}i.format=function(e,n){var a,o,s,c,u,p,l,f,d=1,m=e.length,h="",v=[],g=!0,x="";for(o=0;o<m;o++)if("string"===(h=r(e[o])))v[v.length]=e[o];else if("array"===h){if((c=e[o])[2])for(a=n[d],s=0;s<c[2].length;s++){if(!a.hasOwnProperty(c[2][s]))throw new Error(i("[sprintf] property '%s' does not exist",c[2][s]));a=a[c[2][s]]}else a=c[1]?n[c[1]]:n[d++];if("function"==r(a)&&(a=a()),t.not_string.test(c[8])&&t.not_json.test(c[8])&&"number"!=r(a)&&isNaN(a))throw new TypeError(i("[sprintf] expecting number but found %s",r(a)));switch(t.number.test(c[8])&&(g=a>=0),c[8]){case"b":a=a.toString(2);break;case"c":a=String.fromCharCode(a);break;case"d":case"i":a=parseInt(a,10);break;case"j":a=JSON.stringify(a,null,c[6]?parseInt(c[6]):0);break;case"e":a=c[7]?a.toExponential(c[7]):a.toExponential();break;case"f":a=c[7]?parseFloat(a).toFixed(c[7]):parseFloat(a);break;case"g":a=c[7]?parseFloat(a).toPrecision(c[7]):parseFloat(a);break;case"o":a=a.toString(8);break;case"s":a=(a=String(a))&&c[7]?a.substring(0,c[7]):a;break;case"u":a>>>=0;break;case"x":a=a.toString(16);break;case"X":a=a.toString(16).toUpperCase()}t.json.test(c[8])?v[v.length]=a:(!t.number.test(c[8])||g&&!c[3]?x="":(x=g?"+":"-",a=a.toString().replace(t.sign,"")),p=c[4]?"0"===c[4]?"0":c[4].charAt(1):" ",l=c[6]-(x+a).length,u=c[6]&&l>0?(f=p,Array(l+1).join(f)):"",v[v.length]=c[5]?x+a+u:"0"===p?x+u+a:u+x+a)}return v.join("")},i.cache={},i.parse=function(e){for(var n=e,i=[],r=[],a=0;n;){if(null!==(i=t.text.exec(n)))r[r.length]=i[0];else if(null!==(i=t.modulo.exec(n)))r[r.length]="%";else{if(null===(i=t.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(i[2]){a|=1;var o=[],s=i[2],c=[];if(null===(c=t.key.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(o[o.length]=c[1];""!==(s=s.substring(c[0].length));)if(null!==(c=t.key_access.exec(s)))o[o.length]=c[1];else{if(null===(c=t.index_access.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");o[o.length]=c[1]}i[2]=o}else a|=2;if(3===a)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");r[r.length]=i}n=n.substring(i[0].length)}return r};function r(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}n.sprintf=i,n.vsprintf=function(e,n,t){return(t=(n||[]).slice(0)).splice(0,0,e),i.apply(null,t)}}("undefined"==typeof window||window)},function(e,n,t){"use strict";var i=t(1).format,r=t(2),a=t(13),o=t(52),s=t(53),c=t(54),u=t(55),p=t(56),l=t(19),f=t(57),d=t(58),m=t(59),h=t(60),v=t(20),g=e.exports=function(e){e=e||{},this.description=e.description,this.argumentDefault=e.argumentDefault,this.prefixChars=e.prefixChars||"",this.conflictHandler=e.conflictHandler,this._registries={},this.register("action",null,p),this.register("action","store",p),this.register("action","storeConst",l),this.register("action","storeTrue",f),this.register("action","storeFalse",d),this.register("action","append",s),this.register("action","appendConst",c),this.register("action","count",u),this.register("action","help",o),this.register("action","version",m),this.register("action","parsers",h),this._getHandler(),this._actions=[],this._optionStringActions={},this._actionGroups=[],this._mutuallyExclusiveGroups=[],this._defaults={},this._regexpNegativeNumber=new RegExp("^[-]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$"),this._hasNegativeNumberOptionals=[]},x=t(28),b=t(61);g.prototype.register=function(e,n,t){this._registries[e]=this._registries[e]||{},this._registries[e][n]=t},g.prototype._registryGet=function(e,n,t){return arguments.length<3&&(t=null),this._registries[e][n]||t},g.prototype.setDefaults=function(e){for(var n in e=e||{})a.has(e,n)&&(this._defaults[n]=e[n]);this._actions.forEach((function(n){a.has(e,n.dest)&&(n.defaultValue=e[n.dest])}))},g.prototype.getDefault=function(e){var n=a.has(this._defaults,e)?this._defaults[e]:null;return this._actions.forEach((function(t){t.dest===e&&a.has(t,"defaultValue")&&(n=t.defaultValue)})),n},g.prototype.addArgument=function(e,n){if(n=n||{},"string"==typeof(e=e)&&(e=[e]),!Array.isArray(e))throw new TypeError("addArgument first argument should be a string or an array");if("object"!=typeof n||Array.isArray(n))throw new TypeError("addArgument second argument should be a hash");if(!e||1===e.length&&this.prefixChars.indexOf(e[0][0])<0){if(e&&n.dest)throw new Error("dest supplied twice for positional argument");n=this._getPositional(e,n)}else n=this._getOptional(e,n);if(void 0===n.defaultValue){var t=n.dest;a.has(this._defaults,t)?n.defaultValue=this._defaults[t]:void 0!==this.argumentDefault&&(n.defaultValue=this.argumentDefault)}var r=this._popActionClass(n);if("function"!=typeof r)throw new Error(i('Unknown action "%s".',r));var o=new r(n),s=this._registryGet("type",o.type,o.type);if("function"!=typeof s)throw new Error(i('"%s" is not callable',s));return this._addAction(o)},g.prototype.addArgumentGroup=function(e){var n=new x(this,e);return this._actionGroups.push(n),n},g.prototype.addMutuallyExclusiveGroup=function(e){var n=new b(this,e);return this._mutuallyExclusiveGroups.push(n),n},g.prototype._addAction=function(e){var n=this;return this._checkConflict(e),this._actions.push(e),e.container=this,e.optionStrings.forEach((function(t){n._optionStringActions[t]=e})),e.optionStrings.forEach((function(e){e.match(n._regexpNegativeNumber)&&(n._hasNegativeNumberOptionals.some(Boolean)||n._hasNegativeNumberOptionals.push(!0))})),e},g.prototype._removeAction=function(e){var n=this._actions.indexOf(e);n>=0&&this._actions.splice(n,1)},g.prototype._addContainerActions=function(e){var n={};this._actionGroups.forEach((function(e){if(n[e.title])throw new Error(i('Cannot merge actions - two groups are named "%s".',e.title));n[e.title]=e}));var t,r={};function a(e){return e.getName()}e._actionGroups.forEach((function(e){n[e.title]||(n[e.title]=this.addArgumentGroup({title:e.title,description:e.description})),e._groupActions.forEach((function(t){r[a(t)]=n[e.title]}))}),this),e._mutuallyExclusiveGroups.forEach((function(e){t=this.addMutuallyExclusiveGroup({required:e.required}),e._groupActions.forEach((function(e){r[a(e)]=t}))}),this),e._actions.forEach((function(e){var n=a(e);r[n]?r[n]._addAction(e):this._addAction(e)}))},g.prototype._getPositional=function(e,n){if(Array.isArray(e)&&(e=e[0]),n.required)throw new Error('"required" is an invalid argument for positionals.');return n.nargs!==r.OPTIONAL&&n.nargs!==r.ZERO_OR_MORE&&(n.required=!0),n.nargs===r.ZERO_OR_MORE&&void 0===n.defaultValue&&(n.required=!0),n.dest=e,n.optionStrings=[],n},g.prototype._getOptional=function(e,n){var t=this.prefixChars,r=[],o=[];e.forEach((function(e){if(t.indexOf(e[0])<0)throw new Error(i('Invalid option string "%s": must start with a "%s".',e,t));r.push(e),e.length>1&&t.indexOf(e[1])>=0&&o.push(e)}));var s=n.dest||null;if(delete n.dest,!s){var c=o.length?o[0]:r[0];if(0===(s=a.trimChars(c,this.prefixChars)).length)throw new Error(i('dest= is required for options like "%s"',r.join(", ")));s=s.replace(/-/g,"_")}return n.dest=s,n.optionStrings=r,n},g.prototype._popActionClass=function(e,n){n=n||null;var t=e.action||n;return delete e.action,this._registryGet("action",t,t)},g.prototype._getHandler=function(){var e=this.conflictHandler,n=this["_handleConflict"+a.capitalize(e)];if(void 0===n)throw new Error("invalid conflict resolution value: "+e);return n},g.prototype._checkConflict=function(e){var n=this._optionStringActions,t=[];(e.optionStrings.forEach((function(e){var i=n[e];void 0!==i&&t.push([e,i])})),t.length>0)&&this._getHandler().call(this,e,t)},g.prototype._handleConflictError=function(e,n){var t=n.map((function(e){return e[0]}));throw t=t.join(", "),v(e,i("Conflicting option string(s): %s",t))},g.prototype._handleConflictResolve=function(e,n){var t=this;n.forEach((function(e){var n=e[0],i=e[1],r=i.optionStrings.indexOf(n);r>=0&&i.optionStrings.splice(r,1),delete t._optionStringActions[n],0===i.optionStrings.length&&i.container._removeAction(i)}))}},function(e,n,t){"use strict";var i=t(1),r=t(27),a=e.exports=function(e,n){(n=n||{}).conflictHandler=n.conflictHandler||e.conflictHandler,n.prefixChars=n.prefixChars||e.prefixChars,n.argumentDefault=n.argumentDefault||e.argumentDefault,r.call(this,n),this.title=n.title,this._groupActions=[],this._container=e,this._registries=e._registries,this._actions=e._actions,this._optionStringActions=e._optionStringActions,this._defaults=e._defaults,this._hasNegativeNumberOptionals=e._hasNegativeNumberOptionals,this._mutuallyExclusiveGroups=e._mutuallyExclusiveGroups};i.inherits(a,r),a.prototype._addAction=function(e){return e=r.prototype._addAction.call(this,e),this._groupActions.push(e),e},a.prototype._removeAction=function(e){r.prototype._removeAction.call(this,e);var n=this._groupActions.indexOf(e);n>=0&&this._groupActions.splice(n,1)}},function(e,n,t){"use strict";var i=t(13),r=e.exports=function(e){i.extend(this,e)};r.prototype.isset=function(e){return i.has(this,e)},r.prototype.set=function(e,n){return"object"==typeof e?i.extend(this,e):this[e]=n,this},r.prototype.get=function(e,n){return this[e]?this[e]:n},r.prototype.unset=function(e,n){var t=this[e];return null!==t?(delete this[e],t):n}},function(e,n,t){e.exports=p;var i=t(70),r=t(15).Buffer;p.ReadableState=u;var a=t(31).EventEmitter;a.listenerCount||(a.listenerCount=function(e,n){return e.listeners(n).length});var o,s=t(6),c=t(7);function u(e,n){var i=(e=e||{}).highWaterMark;this.highWaterMark=i||0===i?i:16384,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=!1,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.calledRead=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.objectMode=!!e.objectMode,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(o||(o=t(32).StringDecoder),this.decoder=new o(e.encoding),this.encoding=e.encoding)}function p(e){if(!(this instanceof p))return new p(e);this._readableState=new u(e,this),this.readable=!0,s.call(this)}function l(e,n,t,i,a){var o=function(e,n){var t=null;r.isBuffer(n)||"string"==typeof n||null==n||e.objectMode||(t=new TypeError("Invalid non-string/buffer chunk"));return t}(n,t);if(o)e.emit("error",o);else if(null==t)n.reading=!1,n.ended||function(e,n){if(n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&(n.buffer.push(t),n.length+=n.objectMode?1:t.length)}n.ended=!0,n.length>0?d(e):b(e)}(e,n);else if(n.objectMode||t&&t.length>0)if(n.ended&&!a){var s=new Error("stream.push() after EOF");e.emit("error",s)}else if(n.endEmitted&&a){s=new Error("stream.unshift() after end event");e.emit("error",s)}else!n.decoder||a||i||(t=n.decoder.write(t)),n.length+=n.objectMode?1:t.length,a?n.buffer.unshift(t):(n.reading=!1,n.buffer.push(t)),n.needReadable&&d(e),function(e,n){n.readingMore||(n.readingMore=!0,process.nextTick((function(){!function(e,n){var t=n.length;for(;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(e.read(0),t!==n.length);)t=n.length;n.readingMore=!1}(e,n)})))}(e,n);else a||(n.reading=!1);return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(n)}c.inherits=t(3),c.inherits(p,s),p.prototype.push=function(e,n){var t=this._readableState;return"string"!=typeof e||t.objectMode||(n=n||t.defaultEncoding)!==t.encoding&&(e=new r(e,n),n=""),l(this,t,e,n,!1)},p.prototype.unshift=function(e){return l(this,this._readableState,e,"",!0)},p.prototype.setEncoding=function(e){o||(o=t(32).StringDecoder),this._readableState.decoder=new o(e),this._readableState.encoding=e};function f(e,n){return 0===n.length&&n.ended?0:n.objectMode?0===e?0:1:null===e||isNaN(e)?n.flowing&&n.buffer.length?n.buffer[0].length:n.length:e<=0?0:(e>n.highWaterMark&&(n.highWaterMark=function(e){if(e>=8388608)e=8388608;else{e--;for(var n=1;n<32;n<<=1)e|=e>>n;e++}return e}(e)),e>n.length?n.ended?n.length:(n.needReadable=!0,0):e)}function d(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(n.emittedReadable=!0,n.sync?process.nextTick((function(){m(e)})):m(e))}function m(e){e.emit("readable")}function h(e){var n,t=e._readableState;function i(e,i,r){!1===e.write(n)&&t.awaitDrain++}for(t.awaitDrain=0;t.pipesCount&&null!==(n=e.read());)if(1===t.pipesCount?i(t.pipes):y(t.pipes,i),e.emit("data",n),t.awaitDrain>0)return;if(0===t.pipesCount)return t.flowing=!1,void(a.listenerCount(e,"data")>0&&g(e));t.ranOut=!0}function v(){this._readableState.ranOut&&(this._readableState.ranOut=!1,h(this))}function g(e,n){if(e._readableState.flowing)throw new Error("Cannot switch to old mode now.");var t=n||!1,i=!1;e.readable=!0,e.pipe=s.prototype.pipe,e.on=e.addListener=s.prototype.on,e.on("readable",(function(){var n;for(i=!0;!t&&null!==(n=e.read());)e.emit("data",n);null===n&&(i=!1,e._readableState.needReadable=!0)})),e.pause=function(){t=!0,this.emit("pause")},e.resume=function(){t=!1,i?process.nextTick((function(){e.emit("readable")})):this.read(0),this.emit("resume")},e.emit("readable")}function x(e,n){var t,i=n.buffer,a=n.length,o=!!n.decoder,s=!!n.objectMode;if(0===i.length)return null;if(0===a)t=null;else if(s)t=i.shift();else if(!e||e>=a)t=o?i.join(""):r.concat(i,a),i.length=0;else{if(e<i[0].length)t=(l=i[0]).slice(0,e),i[0]=l.slice(e);else if(e===i[0].length)t=i.shift();else{t=o?"":new r(e);for(var c=0,u=0,p=i.length;u<p&&c<e;u++){var l=i[0],f=Math.min(e-c,l.length);o?t+=l.slice(0,f):l.copy(t,c,0,f),f<l.length?i[0]=l.slice(f):i.shift(),c+=f}}}return t}function b(e){var n=e._readableState;if(n.length>0)throw new Error("endReadable called on non-empty stream");!n.endEmitted&&n.calledRead&&(n.ended=!0,process.nextTick((function(){n.endEmitted||0!==n.length||(n.endEmitted=!0,e.readable=!1,e.emit("end"))})))}function y(e,n){for(var t=0,i=e.length;t<i;t++)n(e[t],t)}p.prototype.read=function(e){var n=this._readableState;n.calledRead=!0;var t,i=e;if(("number"!=typeof e||e>0)&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return d(this),null;if(0===(e=f(e,n))&&n.ended)return t=null,n.length>0&&n.decoder&&(t=x(e,n),n.length-=t.length),0===n.length&&b(this),t;var r=n.needReadable;return n.length-e<=n.highWaterMark&&(r=!0),(n.ended||n.reading)&&(r=!1),r&&(n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1),r&&!n.reading&&(e=f(i,n)),null===(t=e>0?x(e,n):null)&&(n.needReadable=!0,e=0),n.length-=e,0!==n.length||n.ended||(n.needReadable=!0),n.ended&&!n.endEmitted&&0===n.length&&b(this),t},p.prototype._read=function(e){this.emit("error",new Error("not implemented"))},p.prototype.pipe=function(e,n){var t=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=e;break;case 1:r.pipes=[r.pipes,e];break;default:r.pipes.push(e)}r.pipesCount+=1;var o=(!n||!1!==n.end)&&e!==process.stdout&&e!==process.stderr?c:p;function s(e){e===t&&p()}function c(){e.end()}r.endEmitted?process.nextTick(o):t.once("end",o),e.on("unpipe",s);var u=function(e){return function(){var n=e._readableState;n.awaitDrain--,0===n.awaitDrain&&h(e)}}(t);function p(){e.removeListener("close",f),e.removeListener("finish",d),e.removeListener("drain",u),e.removeListener("error",l),e.removeListener("unpipe",s),t.removeListener("end",c),t.removeListener("end",p),e._writableState&&!e._writableState.needDrain||u()}function l(n){m(),e.removeListener("error",l),0===a.listenerCount(e,"error")&&e.emit("error",n)}function f(){e.removeListener("finish",d),m()}function d(){e.removeListener("close",f),m()}function m(){t.unpipe(e)}return e.on("drain",u),e._events&&e._events.error?i(e._events.error)?e._events.error.unshift(l):e._events.error=[l,e._events.error]:e.on("error",l),e.once("close",f),e.once("finish",d),e.emit("pipe",t),r.flowing||(this.on("readable",v),r.flowing=!0,process.nextTick((function(){h(t)}))),e},p.prototype.unpipe=function(e){var n=this._readableState;if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,this.removeListener("readable",v),n.flowing=!1,e&&e.emit("unpipe",this)),this;if(!e){var t=n.pipes,i=n.pipesCount;n.pipes=null,n.pipesCount=0,this.removeListener("readable",v),n.flowing=!1;for(var r=0;r<i;r++)t[r].emit("unpipe",this);return this}return-1===(r=function(e,n){for(var t=0,i=e.length;t<i;t++)if(e[t]===n)return t;return-1}(n.pipes,e))||(n.pipes.splice(r,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this)),this},p.prototype.on=function(e,n){var t=s.prototype.on.call(this,e,n);if("data"!==e||this._readableState.flowing||g(this),"readable"===e&&this.readable){var i=this._readableState;i.readableListening||(i.readableListening=!0,i.emittedReadable=!1,i.needReadable=!0,i.reading?i.length&&d(this):this.read(0))}return t},p.prototype.addListener=p.prototype.on,p.prototype.resume=function(){g(this),this.read(0),this.emit("resume")},p.prototype.pause=function(){g(this,!0),this.emit("pause")},p.prototype.wrap=function(e){var n=this._readableState,t=!1,i=this;for(var r in e.on("end",(function(){if(n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&i.push(e)}i.push(null)})),e.on("data",(function(r){(n.decoder&&(r=n.decoder.write(r)),n.objectMode&&null==r)||(n.objectMode||r&&r.length)&&(i.push(r)||(t=!0,e.pause()))})),e)"function"==typeof e[r]&&void 0===this[r]&&(this[r]=function(n){return function(){return e[n].apply(e,arguments)}}(r));return y(["error","close","destroy","pause","resume"],(function(n){e.on(n,i.emit.bind(i,n))})),i._read=function(n){t&&(t=!1,e.resume())},i},p._fromList=x},function(e,n){e.exports=require("events")},function(e,n,t){var i=t(15).Buffer,r=i.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};var a=n.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),function(e){if(e&&!r(e))throw new Error("Unknown encoding: "+e)}(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=s;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=c;break;default:return void(this.write=o)}this.charBuffer=new i(6),this.charReceived=0,this.charLength=0};function o(e){return e.toString(this.encoding)}function s(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function c(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}a.prototype.write=function(e){for(var n="";this.charLength;){var t=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,t),this.charReceived+=t,this.charReceived<this.charLength)return"";if(e=e.slice(t,e.length),!((r=(n=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(n.length-1))>=55296&&r<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return n;break}this.charLength+=this.surrogateSize,n=""}this.detectIncompleteChar(e);var i=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,i),i-=this.charReceived);var r;i=(n+=e.toString(this.encoding,0,i)).length-1;if((r=n.charCodeAt(i))>=55296&&r<=56319){var a=this.surrogateSize;return this.charLength+=a,this.charReceived+=a,this.charBuffer.copy(this.charBuffer,a,0,a),e.copy(this.charBuffer,0,0,a),n.substring(0,i)}return n},a.prototype.detectIncompleteChar=function(e){for(var n=e.length>=3?3:e.length;n>0;n--){var t=e[e.length-n];if(1==n&&t>>5==6){this.charLength=2;break}if(n<=2&&t>>4==14){this.charLength=3;break}if(n<=3&&t>>3==30){this.charLength=4;break}}this.charReceived=n},a.prototype.end=function(e){var n="";if(e&&e.length&&(n=this.write(e)),this.charReceived){var t=this.charReceived,i=this.charBuffer,r=this.encoding;n+=i.slice(0,t).toString(r)}return n}},function(e,n,t){e.exports=c;var i=t(15).Buffer;c.WritableState=s;var r=t(7);r.inherits=t(3);var a=t(6);function o(e,n,t){this.chunk=e,this.encoding=n,this.callback=t}function s(e,n){var t=(e=e||{}).highWaterMark;this.highWaterMark=t||0===t?t:16384,this.objectMode=!!e.objectMode,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var i=!1===e.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var t=e._writableState,i=t.sync,r=t.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(t),n)!function(e,n,t,i,r){t?process.nextTick((function(){r(i)})):r(i);e._writableState.errorEmitted=!0,e.emit("error",i)}(e,0,i,n,r);else{var a=l(e,t);a||t.bufferProcessing||!t.buffer.length||function(e,n){n.bufferProcessing=!0;for(var t=0;t<n.buffer.length;t++){var i=n.buffer[t],r=i.chunk,a=i.encoding,o=i.callback,s=n.objectMode?1:r.length;if(u(e,n,s,r,a,o),n.writing){t++;break}}n.bufferProcessing=!1,t<n.buffer.length?n.buffer=n.buffer.slice(t):n.buffer.length=0}(e,t),i?process.nextTick((function(){p(e,t,a,r)})):p(e,t,a,r)}}(n,e)},this.writecb=null,this.writelen=0,this.buffer=[],this.errorEmitted=!1}function c(e){var n=t(24);if(!(this instanceof c||this instanceof n))return new c(e);this._writableState=new s(e,this),this.writable=!0,a.call(this)}function u(e,n,t,i,r,a){n.writelen=t,n.writecb=a,n.writing=!0,n.sync=!0,e._write(i,r,n.onwrite),n.sync=!1}function p(e,n,t,i){t||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),i(),t&&f(e,n)}function l(e,n){return n.ending&&0===n.length&&!n.finished&&!n.writing}function f(e,n){var t=l(0,n);return t&&(n.finished=!0,e.emit("finish")),t}r.inherits(c,a),c.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},c.prototype.write=function(e,n,t){var r=this._writableState,a=!1;return"function"==typeof n&&(t=n,n=null),i.isBuffer(e)?n="buffer":n||(n=r.defaultEncoding),"function"!=typeof t&&(t=function(){}),r.ended?function(e,n,t){var i=new Error("write after end");e.emit("error",i),process.nextTick((function(){t(i)}))}(this,0,t):function(e,n,t,r){var a=!0;if(!i.isBuffer(t)&&"string"!=typeof t&&null!=t&&!n.objectMode){var o=new TypeError("Invalid non-string/buffer chunk");e.emit("error",o),process.nextTick((function(){r(o)})),a=!1}return a}(this,r,e,t)&&(a=function(e,n,t,r,a){t=function(e,n,t){e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=new i(n,t));return n}(n,t,r),i.isBuffer(t)&&(r="buffer");var s=n.objectMode?1:t.length;n.length+=s;var c=n.length<n.highWaterMark;c||(n.needDrain=!0);n.writing?n.buffer.push(new o(t,r,a)):u(e,n,s,t,r,a);return c}(this,r,e,n,t)),a},c.prototype._write=function(e,n,t){t(new Error("not implemented"))},c.prototype.end=function(e,n,t){var i=this._writableState;"function"==typeof e?(t=e,e=null,n=null):"function"==typeof n&&(t=n,n=null),null!=e&&this.write(e,n),i.ending||i.finished||function(e,n,t){n.ending=!0,f(e,n),t&&(n.finished?process.nextTick(t):e.once("finish",t));n.ended=!0}(this,i,t)}},function(e,n,t){e.exports=o;var i=t(24),r=t(7);function a(e,n){this.afterTransform=function(e,t){return function(e,n,t){var i=e._transformState;i.transforming=!1;var r=i.writecb;if(!r)return e.emit("error",new Error("no writecb in Transform class"));i.writechunk=null,i.writecb=null,null!=t&&e.push(t);r&&r(n);var a=e._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&e._read(a.highWaterMark)}(n,e,t)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function o(e){if(!(this instanceof o))return new o(e);i.call(this,e);this._transformState=new a(e,this);var n=this;this._readableState.needReadable=!0,this._readableState.sync=!1,this.once("finish",(function(){"function"==typeof this._flush?this._flush((function(e){s(n,e)})):s(n)}))}function s(e,n){if(n)return e.emit("error",n);var t=e._writableState,i=(e._readableState,e._transformState);if(t.length)throw new Error("calling transform done when ws.length != 0");if(i.transforming)throw new Error("calling transform done when still transforming");return e.push(null)}r.inherits=t(3),r.inherits(o,i),o.prototype.push=function(e,n){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,n)},o.prototype._transform=function(e,n,t){throw new Error("not implemented")},o.prototype._write=function(e,n,t){var i=this._transformState;if(i.writecb=t,i.writechunk=e,i.writeencoding=n,!i.transforming){var r=this._readableState;(i.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},o.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0}},function(e,n,t){"use strict";var i=t(16);e.exports=x;var r,a=t(76);x.ReadableState=g;t(31).EventEmitter;var o=function(e,n){return e.listeners(n).length},s=t(36),c=t(17).Buffer,u=global.Uint8Array||function(){};var p=Object.create(t(7));p.inherits=t(3);var l=t(1),f=void 0;f=l&&l.debuglog?l.debuglog("stream"):function(){};var d,m=t(77),h=t(37);p.inherits(x,s);var v=["error","close","destroy","pause","resume"];function g(e,n){e=e||{};var i=n instanceof(r=r||t(11));this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var a=e.highWaterMark,o=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:i&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(d||(d=t(39).StringDecoder),this.decoder=new d(e.encoding),this.encoding=e.encoding)}function x(e){if(r=r||t(11),!(this instanceof x))return new x(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function b(e,n,t,i,r){var a,o=e._readableState;null===n?(o.reading=!1,function(e,n){if(n.ended)return;if(n.decoder){var t=n.decoder.end();t&&t.length&&(n.buffer.push(t),n.length+=n.objectMode?1:t.length)}n.ended=!0,_(e)}(e,o)):(r||(a=function(e,n){var t;i=n,c.isBuffer(i)||i instanceof u||"string"==typeof n||void 0===n||e.objectMode||(t=new TypeError("Invalid non-string/buffer chunk"));var i;return t}(o,n)),a?e.emit("error",a):o.objectMode||n&&n.length>0?("string"==typeof n||o.objectMode||Object.getPrototypeOf(n)===c.prototype||(n=function(e){return c.from(e)}(n)),i?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):y(e,o,n,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!t?(n=o.decoder.write(n),o.objectMode||0!==n.length?y(e,o,n,!1):$(e,o)):y(e,o,n,!1))):i||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function y(e,n,t,i){n.flowing&&0===n.length&&!n.sync?(e.emit("data",t),e.read(0)):(n.length+=n.objectMode?1:t.length,i?n.buffer.unshift(t):n.buffer.push(t),n.needReadable&&_(e)),$(e,n)}Object.defineProperty(x.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),x.prototype.destroy=h.destroy,x.prototype._undestroy=h.undestroy,x.prototype._destroy=function(e,n){this.push(null),n(e)},x.prototype.push=function(e,n){var t,i=this._readableState;return i.objectMode?t=!0:"string"==typeof e&&((n=n||i.defaultEncoding)!==i.encoding&&(e=c.from(e,n),n=""),t=!0),b(this,e,n,!1,t)},x.prototype.unshift=function(e){return b(this,e,null,!0,!1)},x.prototype.isPaused=function(){return!1===this._readableState.flowing},x.prototype.setEncoding=function(e){return d||(d=t(39).StringDecoder),this._readableState.decoder=new d(e),this._readableState.encoding=e,this};function w(e,n){return e<=0||0===n.length&&n.ended?0:n.objectMode?1:e!=e?n.flowing&&n.length?n.buffer.head.data.length:n.length:(e>n.highWaterMark&&(n.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=n.length?e:n.ended?n.length:(n.needReadable=!0,0))}function _(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(f("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?i.nextTick(k,e):k(e))}function k(e){f("emit readable"),e.emit("readable"),j(e)}function $(e,n){n.readingMore||(n.readingMore=!0,i.nextTick(E,e,n))}function E(e,n){for(var t=n.length;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(f("maybeReadMore read 0"),e.read(0),t!==n.length);)t=n.length;n.readingMore=!1}function S(e){f("readable nexttick read 0"),e.read(0)}function A(e,n){n.reading||(f("resume read 0"),e.read(0)),n.resumeScheduled=!1,n.awaitDrain=0,e.emit("resume"),j(e),n.flowing&&!n.reading&&e.read(0)}function j(e){var n=e._readableState;for(f("flow",n.flowing);n.flowing&&null!==e.read(););}function F(e,n){return 0===n.length?null:(n.objectMode?t=n.buffer.shift():!e||e>=n.length?(t=n.decoder?n.buffer.join(""):1===n.buffer.length?n.buffer.head.data:n.buffer.concat(n.length),n.buffer.clear()):t=function(e,n,t){var i;e<n.head.data.length?(i=n.head.data.slice(0,e),n.head.data=n.head.data.slice(e)):i=e===n.head.data.length?n.shift():t?function(e,n){var t=n.head,i=1,r=t.data;e-=r.length;for(;t=t.next;){var a=t.data,o=e>a.length?a.length:e;if(o===a.length?r+=a:r+=a.slice(0,e),0===(e-=o)){o===a.length?(++i,t.next?n.head=t.next:n.head=n.tail=null):(n.head=t,t.data=a.slice(o));break}++i}return n.length-=i,r}(e,n):function(e,n){var t=c.allocUnsafe(e),i=n.head,r=1;i.data.copy(t),e-=i.data.length;for(;i=i.next;){var a=i.data,o=e>a.length?a.length:e;if(a.copy(t,t.length-e,0,o),0===(e-=o)){o===a.length?(++r,i.next?n.head=i.next:n.head=n.tail=null):(n.head=i,i.data=a.slice(o));break}++r}return n.length-=r,t}(e,n);return i}(e,n.buffer,n.decoder),t);var t}function O(e){var n=e._readableState;if(n.length>0)throw new Error('"endReadable()" called on non-empty stream');n.endEmitted||(n.ended=!0,i.nextTick(C,n,e))}function C(e,n){e.endEmitted||0!==e.length||(e.endEmitted=!0,n.readable=!1,n.emit("end"))}function M(e,n){for(var t=0,i=e.length;t<i;t++)if(e[t]===n)return t;return-1}x.prototype.read=function(e){f("read",e),e=parseInt(e,10);var n=this._readableState,t=e;if(0!==e&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return f("read: emitReadable",n.length,n.ended),0===n.length&&n.ended?O(this):_(this),null;if(0===(e=w(e,n))&&n.ended)return 0===n.length&&O(this),null;var i,r=n.needReadable;return f("need readable",r),(0===n.length||n.length-e<n.highWaterMark)&&f("length less than watermark",r=!0),n.ended||n.reading?f("reading or ended",r=!1):r&&(f("do read"),n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1,n.reading||(e=w(t,n))),null===(i=e>0?F(e,n):null)?(n.needReadable=!0,e=0):n.length-=e,0===n.length&&(n.ended||(n.needReadable=!0),t!==e&&n.ended&&O(this)),null!==i&&this.emit("data",i),i},x.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},x.prototype.pipe=function(e,n){var t=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=e;break;case 1:r.pipes=[r.pipes,e];break;default:r.pipes.push(e)}r.pipesCount+=1,f("pipe count=%d opts=%j",r.pipesCount,n);var s=(!n||!1!==n.end)&&e!==process.stdout&&e!==process.stderr?u:x;function c(n,i){f("onunpipe"),n===t&&i&&!1===i.hasUnpiped&&(i.hasUnpiped=!0,f("cleanup"),e.removeListener("close",v),e.removeListener("finish",g),e.removeListener("drain",p),e.removeListener("error",h),e.removeListener("unpipe",c),t.removeListener("end",u),t.removeListener("end",x),t.removeListener("data",m),l=!0,!r.awaitDrain||e._writableState&&!e._writableState.needDrain||p())}function u(){f("onend"),e.end()}r.endEmitted?i.nextTick(s):t.once("end",s),e.on("unpipe",c);var p=function(e){return function(){var n=e._readableState;f("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&o(e,"data")&&(n.flowing=!0,j(e))}}(t);e.on("drain",p);var l=!1;var d=!1;function m(n){f("ondata"),d=!1,!1!==e.write(n)||d||((1===r.pipesCount&&r.pipes===e||r.pipesCount>1&&-1!==M(r.pipes,e))&&!l&&(f("false write response, pause",t._readableState.awaitDrain),t._readableState.awaitDrain++,d=!0),t.pause())}function h(n){f("onerror",n),x(),e.removeListener("error",h),0===o(e,"error")&&e.emit("error",n)}function v(){e.removeListener("finish",g),x()}function g(){f("onfinish"),e.removeListener("close",v),x()}function x(){f("unpipe"),t.unpipe(e)}return t.on("data",m),function(e,n,t){if("function"==typeof e.prependListener)return e.prependListener(n,t);e._events&&e._events[n]?a(e._events[n])?e._events[n].unshift(t):e._events[n]=[t,e._events[n]]:e.on(n,t)}(e,"error",h),e.once("close",v),e.once("finish",g),e.emit("pipe",t),r.flowing||(f("pipe resume"),t.resume()),e},x.prototype.unpipe=function(e){var n=this._readableState,t={hasUnpiped:!1};if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,n.flowing=!1,e&&e.emit("unpipe",this,t)),this;if(!e){var i=n.pipes,r=n.pipesCount;n.pipes=null,n.pipesCount=0,n.flowing=!1;for(var a=0;a<r;a++)i[a].emit("unpipe",this,t);return this}var o=M(n.pipes,e);return-1===o||(n.pipes.splice(o,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this,t)),this},x.prototype.on=function(e,n){var t=s.prototype.on.call(this,e,n);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&_(this):i.nextTick(S,this))}return t},x.prototype.addListener=x.prototype.on,x.prototype.resume=function(){var e=this._readableState;return e.flowing||(f("resume"),e.flowing=!0,function(e,n){n.resumeScheduled||(n.resumeScheduled=!0,i.nextTick(A,e,n))}(this,e)),this},x.prototype.pause=function(){return f("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(f("pause"),this._readableState.flowing=!1,this.emit("pause")),this},x.prototype.wrap=function(e){var n=this,t=this._readableState,i=!1;for(var r in e.on("end",(function(){if(f("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)})),e.on("data",(function(r){(f("wrapped data"),t.decoder&&(r=t.decoder.write(r)),t.objectMode&&null==r)||(t.objectMode||r&&r.length)&&(n.push(r)||(i=!0,e.pause()))})),e)void 0===this[r]&&"function"==typeof e[r]&&(this[r]=function(n){return function(){return e[n].apply(e,arguments)}}(r));for(var a=0;a<v.length;a++)e.on(v[a],this.emit.bind(this,v[a]));return this._read=function(n){f("wrapped _read",n),i&&(i=!1,e.resume())},this},Object.defineProperty(x.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),x._fromList=F},function(e,n,t){e.exports=t(6)},function(e,n,t){"use strict";var i=t(16);function r(e,n){e.emit("error",n)}e.exports={destroy:function(e,n){var t=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(n?n(e):!e||this._writableState&&this._writableState.errorEmitted||i.nextTick(r,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!n&&e?(i.nextTick(r,t,e),t._writableState&&(t._writableState.errorEmitted=!0)):n&&n(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,n,t){"use strict";var i=t(16);function r(e){var n=this;this.next=null,this.entry=null,this.finish=function(){!function(e,n,t){var i=e.entry;e.entry=null;for(;i;){var r=i.callback;n.pendingcb--,r(t),i=i.next}n.corkedRequestsFree?n.corkedRequestsFree.next=e:n.corkedRequestsFree=e}(n,e)}}e.exports=v;var a,o=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:i.nextTick;v.WritableState=h;var s=Object.create(t(7));s.inherits=t(3);var c={deprecate:t(78)},u=t(36),p=t(17).Buffer,l=global.Uint8Array||function(){};var f,d=t(37);function m(){}function h(e,n){a=a||t(11),e=e||{};var s=n instanceof a;this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var c=e.highWaterMark,u=e.writableHighWaterMark,p=this.objectMode?16:16384;this.highWaterMark=c||0===c?c:s&&(u||0===u)?u:p,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var l=!1===e.decodeStrings;this.decodeStrings=!l,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var t=e._writableState,r=t.sync,a=t.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(t),n)!function(e,n,t,r,a){--n.pendingcb,t?(i.nextTick(a,r),i.nextTick(_,e,n),e._writableState.errorEmitted=!0,e.emit("error",r)):(a(r),e._writableState.errorEmitted=!0,e.emit("error",r),_(e,n))}(e,t,r,n,a);else{var s=y(t);s||t.corked||t.bufferProcessing||!t.bufferedRequest||b(e,t),r?o(x,e,t,s,a):x(e,t,s,a)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new r(this)}function v(e){if(a=a||t(11),!(f.call(v,this)||this instanceof a))return new v(e);this._writableState=new h(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),u.call(this)}function g(e,n,t,i,r,a,o){n.writelen=i,n.writecb=o,n.writing=!0,n.sync=!0,t?e._writev(r,n.onwrite):e._write(r,a,n.onwrite),n.sync=!1}function x(e,n,t,i){t||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),n.pendingcb--,i(),_(e,n)}function b(e,n){n.bufferProcessing=!0;var t=n.bufferedRequest;if(e._writev&&t&&t.next){var i=n.bufferedRequestCount,a=new Array(i),o=n.corkedRequestsFree;o.entry=t;for(var s=0,c=!0;t;)a[s]=t,t.isBuf||(c=!1),t=t.next,s+=1;a.allBuffers=c,g(e,n,!0,n.length,a,"",o.finish),n.pendingcb++,n.lastBufferedRequest=null,o.next?(n.corkedRequestsFree=o.next,o.next=null):n.corkedRequestsFree=new r(n),n.bufferedRequestCount=0}else{for(;t;){var u=t.chunk,p=t.encoding,l=t.callback;if(g(e,n,!1,n.objectMode?1:u.length,u,p,l),t=t.next,n.bufferedRequestCount--,n.writing)break}null===t&&(n.lastBufferedRequest=null)}n.bufferedRequest=t,n.bufferProcessing=!1}function y(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function w(e,n){e._final((function(t){n.pendingcb--,t&&e.emit("error",t),n.prefinished=!0,e.emit("prefinish"),_(e,n)}))}function _(e,n){var t=y(n);return t&&(!function(e,n){n.prefinished||n.finalCalled||("function"==typeof e._final?(n.pendingcb++,n.finalCalled=!0,i.nextTick(w,e,n)):(n.prefinished=!0,e.emit("prefinish")))}(e,n),0===n.pendingcb&&(n.finished=!0,e.emit("finish"))),t}s.inherits(v,u),h.prototype.getBuffer=function(){for(var e=this.bufferedRequest,n=[];e;)n.push(e),e=e.next;return n},function(){try{Object.defineProperty(h.prototype,"buffer",{get:c.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(f=Function.prototype[Symbol.hasInstance],Object.defineProperty(v,Symbol.hasInstance,{value:function(e){return!!f.call(this,e)||this===v&&(e&&e._writableState instanceof h)}})):f=function(e){return e instanceof this},v.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},v.prototype.write=function(e,n,t){var r,a=this._writableState,o=!1,s=!a.objectMode&&(r=e,p.isBuffer(r)||r instanceof l);return s&&!p.isBuffer(e)&&(e=function(e){return p.from(e)}(e)),"function"==typeof n&&(t=n,n=null),s?n="buffer":n||(n=a.defaultEncoding),"function"!=typeof t&&(t=m),a.ended?function(e,n){var t=new Error("write after end");e.emit("error",t),i.nextTick(n,t)}(this,t):(s||function(e,n,t,r){var a=!0,o=!1;return null===t?o=new TypeError("May not write null values to stream"):"string"==typeof t||void 0===t||n.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),i.nextTick(r,o),a=!1),a}(this,a,e,t))&&(a.pendingcb++,o=function(e,n,t,i,r,a){if(!t){var o=function(e,n,t){e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=p.from(n,t));return n}(n,i,r);i!==o&&(t=!0,r="buffer",i=o)}var s=n.objectMode?1:i.length;n.length+=s;var c=n.length<n.highWaterMark;c||(n.needDrain=!0);if(n.writing||n.corked){var u=n.lastBufferedRequest;n.lastBufferedRequest={chunk:i,encoding:r,isBuf:t,callback:a,next:null},u?u.next=n.lastBufferedRequest:n.bufferedRequest=n.lastBufferedRequest,n.bufferedRequestCount+=1}else g(e,n,!1,s,i,r,a);return c}(this,a,s,e,n,t)),o},v.prototype.cork=function(){this._writableState.corked++},v.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||b(this,e))},v.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(v.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),v.prototype._write=function(e,n,t){t(new Error("_write() is not implemented"))},v.prototype._writev=null,v.prototype.end=function(e,n,t){var r=this._writableState;"function"==typeof e?(t=e,e=null,n=null):"function"==typeof n&&(t=n,n=null),null!=e&&this.write(e,n),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(e,n,t){n.ending=!0,_(e,n),t&&(n.finished?i.nextTick(t):e.once("finish",t));n.ended=!0,e.writable=!1}(this,r,t)},Object.defineProperty(v.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),v.prototype.destroy=d.destroy,v.prototype._undestroy=d.undestroy,v.prototype._destroy=function(e,n){this.end(),n(e)}},function(e,n,t){"use strict";var i=t(17).Buffer,r=i.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var n;switch(this.encoding=function(e){var n=function(e){if(!e)return"utf8";for(var n;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(n)return;e=(""+e).toLowerCase(),n=!0}}(e);if("string"!=typeof n&&(i.isEncoding===r||!r(e)))throw new Error("Unknown encoding: "+e);return n||e}(e),this.encoding){case"utf16le":this.text=c,this.end=u,n=4;break;case"utf8":this.fillLast=s,n=4;break;case"base64":this.text=p,this.end=l,n=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=i.allocUnsafe(n)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var n=this.lastTotal-this.lastNeed,t=function(e,n,t){if(128!=(192&n[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&n.length>1){if(128!=(192&n[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&n.length>2&&128!=(192&n[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==t?t:this.lastNeed<=e.length?(e.copy(this.lastChar,n,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,n,0,e.length),void(this.lastNeed-=e.length))}function c(e,n){if((e.length-n)%2==0){var t=e.toString("utf16le",n);if(t){var i=t.charCodeAt(t.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],t.slice(0,-1)}return t}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",n,e.length-1)}function u(e){var n=e&&e.length?this.write(e):"";if(this.lastNeed){var t=this.lastTotal-this.lastNeed;return n+this.lastChar.toString("utf16le",0,t)}return n}function p(e,n){var t=(e.length-n)%3;return 0===t?e.toString("base64",n):(this.lastNeed=3-t,this.lastTotal=3,1===t?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",n,e.length-t))}function l(e){var n=e&&e.length?this.write(e):"";return this.lastNeed?n+this.lastChar.toString("base64",0,3-this.lastNeed):n}function f(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}n.StringDecoder=a,a.prototype.write=function(e){if(0===e.length)return"";var n,t;if(this.lastNeed){if(void 0===(n=this.fillLast(e)))return"";t=this.lastNeed,this.lastNeed=0}else t=0;return t<e.length?n?n+this.text(e,t):this.text(e,t):n||""},a.prototype.end=function(e){var n=e&&e.length?this.write(e):"";return this.lastNeed?n+"�":n},a.prototype.text=function(e,n){var t=function(e,n,t){var i=n.length-1;if(i<t)return 0;var r=o(n[i]);if(r>=0)return r>0&&(e.lastNeed=r-1),r;if(--i<t||-2===r)return 0;if((r=o(n[i]))>=0)return r>0&&(e.lastNeed=r-2),r;if(--i<t||-2===r)return 0;if((r=o(n[i]))>=0)return r>0&&(2===r?r=0:e.lastNeed=r-3),r;return 0}(this,e,n);if(!this.lastNeed)return e.toString("utf8",n);this.lastTotal=t;var i=e.length-(t-this.lastNeed);return e.copy(this.lastChar,0,i),e.toString("utf8",n,i)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,n,t){"use strict";e.exports=o;var i=t(11),r=Object.create(t(7));function a(e,n){var t=this._transformState;t.transforming=!1;var i=t.writecb;if(!i)return this.emit("error",new Error("write callback called multiple times"));t.writechunk=null,t.writecb=null,null!=n&&this.push(n),i(e);var r=this._readableState;r.reading=!1,(r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}function o(e){if(!(this instanceof o))return new o(e);i.call(this,e),this._transformState={afterTransform:a.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(n,t){c(e,n,t)})):c(this,null,null)}function c(e,n,t){if(n)return e.emit("error",n);if(null!=t&&e.push(t),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}r.inherits=t(3),r.inherits(o,i),o.prototype.push=function(e,n){return this._transformState.needTransform=!1,i.prototype.push.call(this,e,n)},o.prototype._transform=function(e,n,t){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,n,t){var i=this._transformState;if(i.writecb=t,i.writechunk=e,i.writeencoding=n,!i.transforming){var r=this._readableState;(i.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},o.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0},o.prototype._destroy=function(e,n){var t=this;i.prototype._destroy.call(this,e,(function(e){n(e),t.emit("close")}))}},function(e){e.exports=JSON.parse('{"name":"muhblog-reason","version":"0.1.0","main":"dist/index.js","license":"MIT","repository":{"type":"git","url":"https://github.com/elcr/muhblog-reason.git"},"author":"elcr","scripts":{"build":"bsb -make-world -clean-world"},"dependencies":{"@emotion/core":"^10.0.28","argparse":"^1.0.10","bootstrap":"^4.5.0","bs-bastet":"ssh://git@github.com:elcr/bs-bastet-without-bisect.git","bs-css-emotion":"^1.2.0","bs-platform":"^7.3.2","emotion":"^10.0.27","emotion-server":"^10.0.27","markdown-metadata-bs":"ssh://git@github.com:elcr/markdown-metadata-bs.git","mime-types":"^2.1.27","node-fs-bs":"ssh://git@github.com:elcr/node-fs-bs.git","node-stream-bs":"ssh://git@github.com:elcr/node-stream-bs.git","react":"^16.13.1","react-dom":"^16.13.1","react-markdown":"^4.3.1","react-syntax-highlighter":"^12.2.1","reason-react":"^0.8.0","relude":"ssh://git@github.com:elcr/relude-without-bisect.git","slugify-bs":"ssh://git@github.com:elcr/slugify-bs.git","squel":"^5.13.0"},"devDependencies":{"autoprefixer":"^9.8.0","node-sass":"^4.14.1","postcss-loader":"^3.0.0","precss":"^4.0.0","raw-loader":"^4.0.1","sass-loader":"^8.0.2","source-map-loader":"^0.2.4","webpack":"^4.43.0","webpack-cli":"^3.3.11"}}')},function(e,n,t){"use strict";e.exports=t(50)},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.metadataRegex=/^([a-z_]+): (.+)/i,n.parseMetadata=function(e){var t=e.trim(),i=t.split(/\r?\n/),r={};if(0===i.length||!n.metadataRegex.test(i[0]))return[r,t];for(var a=null,o=0;o<i.length;o++){var s=i[o];if(/^\s*$/.test(s))break;var c=n.metadataRegex.exec(s);if(null===c){if(null===a)break;r[a].push(s.trim())}else r[a=c[1]]=[c[2].trim()]}return[r,i.slice(o+1).join("\n")]}},function(e,n){e.exports=require("http")},function(e,n,t){"use strict";e.exports=t(63)},function(e,n){e.exports='/*!\n * Bootstrap Reboot v4.5.0 (https://getbootstrap.com/)\n * Copyright 2011-2020 The Bootstrap Authors\n * Copyright 2011-2020 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * Forked from Normalize.css, licensed MIT (https://github.com/necolas/normalize.css/blob/master/LICENSE.md)\n */*,*::before,*::after{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex="-1"]:focus:not(.focus-visible){outline:0 !important}[tabindex="-1"]:focus:not(:focus-visible){outline:0 !important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[title],abbr[data-original-title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul,dl{margin-top:0;margin-bottom:1rem}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent}a:hover{color:#0056b3;text-decoration:underline}a:not([href]){color:inherit;text-decoration:none}a:not([href]):hover{color:inherit;text-decoration:none}pre,code,kbd,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg{overflow:hidden;vertical-align:middle}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[role="button"]{cursor:pointer}select{word-wrap:normal}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button:not(:disabled),[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled){cursor:pointer}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{padding:0;border-style:none}input[type="radio"],input[type="checkbox"]{box-sizing:border-box;padding:0}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{outline-offset:-2px;-webkit-appearance:none}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none !important}\n'},function(e,n,t){"use strict";e.exports=t(80)},function(e,n,t){var i;i=function(){var e=JSON.parse('{"$":"dollar","%":"percent","&":"and","<":"less",">":"greater","|":"or","¢":"cent","£":"pound","¤":"currency","¥":"yen","©":"(c)","ª":"a","®":"(r)","º":"o","À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","Æ":"AE","Ç":"C","È":"E","É":"E","Ê":"E","Ë":"E","Ì":"I","Í":"I","Î":"I","Ï":"I","Ð":"D","Ñ":"N","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","Ù":"U","Ú":"U","Û":"U","Ü":"U","Ý":"Y","Þ":"TH","ß":"ss","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","æ":"ae","ç":"c","è":"e","é":"e","ê":"e","ë":"e","ì":"i","í":"i","î":"i","ï":"i","ð":"d","ñ":"n","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","ù":"u","ú":"u","û":"u","ü":"u","ý":"y","þ":"th","ÿ":"y","Ā":"A","ā":"a","Ă":"A","ă":"a","Ą":"A","ą":"a","Ć":"C","ć":"c","Č":"C","č":"c","Ď":"D","ď":"d","Đ":"DJ","đ":"dj","Ē":"E","ē":"e","Ė":"E","ė":"e","Ę":"e","ę":"e","Ě":"E","ě":"e","Ğ":"G","ğ":"g","Ģ":"G","ģ":"g","Ĩ":"I","ĩ":"i","Ī":"i","ī":"i","Į":"I","į":"i","İ":"I","ı":"i","Ķ":"k","ķ":"k","Ļ":"L","ļ":"l","Ľ":"L","ľ":"l","Ł":"L","ł":"l","Ń":"N","ń":"n","Ņ":"N","ņ":"n","Ň":"N","ň":"n","Ő":"O","ő":"o","Œ":"OE","œ":"oe","Ŕ":"R","ŕ":"r","Ř":"R","ř":"r","Ś":"S","ś":"s","Ş":"S","ş":"s","Š":"S","š":"s","Ţ":"T","ţ":"t","Ť":"T","ť":"t","Ũ":"U","ũ":"u","Ū":"u","ū":"u","Ů":"U","ů":"u","Ű":"U","ű":"u","Ų":"U","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","ź":"z","Ż":"Z","ż":"z","Ž":"Z","ž":"z","ƒ":"f","Ơ":"O","ơ":"o","Ư":"U","ư":"u","ǈ":"LJ","ǉ":"lj","ǋ":"NJ","ǌ":"nj","Ș":"S","ș":"s","Ț":"T","ț":"t","˚":"o","Ά":"A","Έ":"E","Ή":"H","Ί":"I","Ό":"O","Ύ":"Y","Ώ":"W","ΐ":"i","Α":"A","Β":"B","Γ":"G","Δ":"D","Ε":"E","Ζ":"Z","Η":"H","Θ":"8","Ι":"I","Κ":"K","Λ":"L","Μ":"M","Ν":"N","Ξ":"3","Ο":"O","Π":"P","Ρ":"R","Σ":"S","Τ":"T","Υ":"Y","Φ":"F","Χ":"X","Ψ":"PS","Ω":"W","Ϊ":"I","Ϋ":"Y","ά":"a","έ":"e","ή":"h","ί":"i","ΰ":"y","α":"a","β":"b","γ":"g","δ":"d","ε":"e","ζ":"z","η":"h","θ":"8","ι":"i","κ":"k","λ":"l","μ":"m","ν":"n","ξ":"3","ο":"o","π":"p","ρ":"r","ς":"s","σ":"s","τ":"t","υ":"y","φ":"f","χ":"x","ψ":"ps","ω":"w","ϊ":"i","ϋ":"y","ό":"o","ύ":"y","ώ":"w","Ё":"Yo","Ђ":"DJ","Є":"Ye","І":"I","Ї":"Yi","Ј":"J","Љ":"LJ","Њ":"NJ","Ћ":"C","Џ":"DZ","А":"A","Б":"B","В":"V","Г":"G","Д":"D","Е":"E","Ж":"Zh","З":"Z","И":"I","Й":"J","К":"K","Л":"L","М":"M","Н":"N","О":"O","П":"P","Р":"R","С":"S","Т":"T","У":"U","Ф":"F","Х":"H","Ц":"C","Ч":"Ch","Ш":"Sh","Щ":"Sh","Ъ":"U","Ы":"Y","Ь":"","Э":"E","Ю":"Yu","Я":"Ya","а":"a","б":"b","в":"v","г":"g","д":"d","е":"e","ж":"zh","з":"z","и":"i","й":"j","к":"k","л":"l","м":"m","н":"n","о":"o","п":"p","р":"r","с":"s","т":"t","у":"u","ф":"f","х":"h","ц":"c","ч":"ch","ш":"sh","щ":"sh","ъ":"u","ы":"y","ь":"","э":"e","ю":"yu","я":"ya","ё":"yo","ђ":"dj","є":"ye","і":"i","ї":"yi","ј":"j","љ":"lj","њ":"nj","ћ":"c","ѝ":"u","џ":"dz","Ґ":"G","ґ":"g","Ғ":"GH","ғ":"gh","Қ":"KH","қ":"kh","Ң":"NG","ң":"ng","Ү":"UE","ү":"ue","Ұ":"U","ұ":"u","Һ":"H","һ":"h","Ә":"AE","ә":"ae","Ө":"OE","ө":"oe","฿":"baht","ა":"a","ბ":"b","გ":"g","დ":"d","ე":"e","ვ":"v","ზ":"z","თ":"t","ი":"i","კ":"k","ლ":"l","მ":"m","ნ":"n","ო":"o","პ":"p","ჟ":"zh","რ":"r","ს":"s","ტ":"t","უ":"u","ფ":"f","ქ":"k","ღ":"gh","ყ":"q","შ":"sh","ჩ":"ch","ც":"ts","ძ":"dz","წ":"ts","ჭ":"ch","ხ":"kh","ჯ":"j","ჰ":"h","Ẁ":"W","ẁ":"w","Ẃ":"W","ẃ":"w","Ẅ":"W","ẅ":"w","ẞ":"SS","Ạ":"A","ạ":"a","Ả":"A","ả":"a","Ấ":"A","ấ":"a","Ầ":"A","ầ":"a","Ẩ":"A","ẩ":"a","Ẫ":"A","ẫ":"a","Ậ":"A","ậ":"a","Ắ":"A","ắ":"a","Ằ":"A","ằ":"a","Ẳ":"A","ẳ":"a","Ẵ":"A","ẵ":"a","Ặ":"A","ặ":"a","Ẹ":"E","ẹ":"e","Ẻ":"E","ẻ":"e","Ẽ":"E","ẽ":"e","Ế":"E","ế":"e","Ề":"E","ề":"e","Ể":"E","ể":"e","Ễ":"E","ễ":"e","Ệ":"E","ệ":"e","Ỉ":"I","ỉ":"i","Ị":"I","ị":"i","Ọ":"O","ọ":"o","Ỏ":"O","ỏ":"o","Ố":"O","ố":"o","Ồ":"O","ồ":"o","Ổ":"O","ổ":"o","Ỗ":"O","ỗ":"o","Ộ":"O","ộ":"o","Ớ":"O","ớ":"o","Ờ":"O","ờ":"o","Ở":"O","ở":"o","Ỡ":"O","ỡ":"o","Ợ":"O","ợ":"o","Ụ":"U","ụ":"u","Ủ":"U","ủ":"u","Ứ":"U","ứ":"u","Ừ":"U","ừ":"u","Ử":"U","ử":"u","Ữ":"U","ữ":"u","Ự":"U","ự":"u","Ỳ":"Y","ỳ":"y","Ỵ":"Y","ỵ":"y","Ỷ":"Y","ỷ":"y","Ỹ":"Y","ỹ":"y","‘":"\'","’":"\'","“":"\\"","”":"\\"","†":"+","•":"*","…":"...","₠":"ecu","₢":"cruzeiro","₣":"french franc","₤":"lira","₥":"mill","₦":"naira","₧":"peseta","₨":"rupee","₩":"won","₪":"new shequel","₫":"dong","€":"euro","₭":"kip","₮":"tugrik","₯":"drachma","₰":"penny","₱":"peso","₲":"guarani","₳":"austral","₴":"hryvnia","₵":"cedi","₸":"kazakhstani tenge","₹":"indian rupee","₽":"russian ruble","₿":"bitcoin","℠":"sm","™":"tm","∂":"d","∆":"delta","∑":"sum","∞":"infinity","♥":"love","元":"yuan","円":"yen","﷼":"rial"}'),n=JSON.parse('{"vi":{"Đ":"D","đ":"d"}}');function t(t,i){if("string"!=typeof t)throw new Error("slugify: string argument expected");var r=n[(i="string"==typeof i?{replacement:i}:i||{}).locale]||{},a=i.replacement||"-",o=t.split("").reduce((function(n,t){return n+(r[t]||e[t]||t)}),"").replace(i.remove||/[^\w\s$*_+~.()'"!\-:@]+/g,"").trim().replace(new RegExp("[\\s"+a+"]+","g"),a);return i.lower&&(o=o.toLowerCase()),i.strict&&(o=o.replace(new RegExp("[^a-zA-Z0-9"+a+"]","g"),"")),o}return t.extend=function(n){for(var t in n)e[t]=n[t]},t},e.exports=i(),e.exports.default=i()},function(e,n,t){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var i,r,a,o=t(82),s=t(12).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,u=/^text\//i;function p(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),t=n&&o[n[1].toLowerCase()];return t&&t.charset?t.charset:!(!n||!u.test(n[1]))&&"UTF-8"}n.charset=p,n.charsets={lookup:p},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var t=-1===e.indexOf("/")?n.lookup(e):e;if(!t)return!1;if(-1===t.indexOf("charset")){var i=n.charset(t);i&&(t+="; charset="+i.toLowerCase())}return t},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),i=t&&n.extensions[t[1].toLowerCase()];if(!i||!i.length)return!1;return i[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var t=s("x."+e).toLowerCase().substr(1);if(!t)return!1;return n.types[t]||!1},n.types=Object.create(null),i=n.extensions,r=n.types,a=["nginx","apache",void 0,"iana"],Object.keys(o).forEach((function(e){var n=o[e],t=n.extensions;if(t&&t.length){i[e]=t;for(var s=0;s<t.length;s++){var c=t[s];if(r[c]){var u=a.indexOf(o[r[c]].source),p=a.indexOf(n.source);if("application/octet-stream"!==r[c]&&(u>p||u===p&&"application/"===r[c].substr(0,12)))continue}r[c]=e}}}))},function(e,n,t){"use strict";e.exports.ArgumentParser=t(51),e.exports.Namespace=t(29),e.exports.Action=t(8),e.exports.HelpFormatter=t(21),e.exports.Const=t(2),e.exports.ArgumentDefaultsHelpFormatter=t(22).ArgumentDefaultsHelpFormatter,e.exports.RawDescriptionHelpFormatter=t(22).RawDescriptionHelpFormatter,e.exports.RawTextHelpFormatter=t(22).RawTextHelpFormatter},function(e,n,t){"use strict";var i=t(1),r=t(1).format,a=t(12),o=t(26).sprintf,s=t(2),c=t(13),u=t(27),p=t(20),l=t(21),f=t(29);function d(e){if(!(this instanceof d))return new d(e);var n=this;function t(e){return e}(e=e||{}).description=e.description||null,e.argumentDefault=e.argumentDefault||null,e.prefixChars=e.prefixChars||"-",e.conflictHandler=e.conflictHandler||"error",u.call(this,e),e.addHelp=void 0===e.addHelp||!!e.addHelp,e.parents=e.parents||[],e.prog=e.prog||a.basename(process.argv[1]),this.prog=e.prog,this.usage=e.usage,this.epilog=e.epilog,this.version=e.version,this.debug=!0===e.debug,this.formatterClass=e.formatterClass||l,this.fromfilePrefixChars=e.fromfilePrefixChars||null,this._positionals=this.addArgumentGroup({title:"Positional arguments"}),this._optionals=this.addArgumentGroup({title:"Optional arguments"}),this._subparsers=null,this.register("type","auto",t),this.register("type",null,t),this.register("type","int",(function(e){var n=parseInt(e,10);if(isNaN(n))throw new Error(e+" is not a valid integer.");return n})),this.register("type","float",(function(e){var n=parseFloat(e);if(isNaN(n))throw new Error(e+" is not a valid float.");return n})),this.register("type","string",(function(e){return""+e}));var i=this.prefixChars.indexOf("-")>-1?"-":this.prefixChars[0];e.addHelp&&this.addArgument([i+"h",i+i+"help"],{action:"help",defaultValue:s.SUPPRESS,help:"Show this help message and exit."}),void 0!==this.version&&this.addArgument([i+"v",i+i+"version"],{action:"version",version:this.version,defaultValue:s.SUPPRESS,help:"Show program's version number and exit."}),e.parents.forEach((function(e){if(n._addContainerActions(e),void 0!==e._defaults)for(var t in e._defaults)e._defaults.hasOwnProperty(t)&&(n._defaults[t]=e._defaults[t])}))}i.inherits(d,u),d.prototype.addSubparsers=function(e){if(this._subparsers&&this.error("Cannot have multiple subparser arguments."),(e=e||{}).debug=!0===this.debug,e.optionStrings=[],e.parserClass=e.parserClass||d,e.title||e.description?(this._subparsers=this.addArgumentGroup({title:e.title||"subcommands",description:e.description}),delete e.title,delete e.description):this._subparsers=this._positionals,!e.prog){var n=this._getFormatter(),t=this._getPositionalActions(),i=this._mutuallyExclusiveGroups;n.addUsage(this.usage,t,i,""),e.prog=n.formatHelp().trim()}var r=new(this._popActionClass(e,"parsers"))(e);return this._subparsers._addAction(r),r},d.prototype._addAction=function(e){return e.isOptional()?this._optionals._addAction(e):this._positionals._addAction(e),e},d.prototype._getOptionalActions=function(){return this._actions.filter((function(e){return e.isOptional()}))},d.prototype._getPositionalActions=function(){return this._actions.filter((function(e){return e.isPositional()}))},d.prototype.parseArgs=function(e,n){var t,i=this.parseKnownArgs(e,n);return e=i[0],(t=i[1])&&t.length>0&&this.error(r("Unrecognized arguments: %s.",t.join(" "))),e},d.prototype.parseKnownArgs=function(e,n){var t=this;e=e||process.argv.slice(2),n=n||new f,t._actions.forEach((function(e){if(e.dest!==s.SUPPRESS&&!c.has(n,e.dest)&&e.defaultValue!==s.SUPPRESS){var i=e.defaultValue;"string"==typeof e.defaultValue&&(i=t._getValue(e,i)),n[e.dest]=i}})),Object.keys(t._defaults).forEach((function(e){n[e]=t._defaults[e]}));try{var i=this._parseKnownArgs(e,n);return n=i[0],e=i[1],c.has(n,s._UNRECOGNIZED_ARGS_ATTR)&&(e=c.arrayUnion(e,n[s._UNRECOGNIZED_ARGS_ATTR]),delete n[s._UNRECOGNIZED_ARGS_ATTR]),[n,e]}catch(e){this.error(e)}},d.prototype._parseKnownArgs=function(e,n){var t,i,a=this,u=[];function l(e){return e.getName()}null!==this.fromfilePrefixChars&&(e=this._readArgsFromFiles(e));var f={};this._mutuallyExclusiveGroups.forEach((function(e){e._groupActions.forEach((function(e,n,r){i=l(e),c.has(f,i)||(f[i]=[]),(t=f[i]).push.apply(t,r.slice(0,n)),t.push.apply(t,r.slice(n+1))}))}));var d={},m=[];e.forEach((function(n,t){if("--"===n)for(m.push("-");t<e.length;)m.push("A"),t++;else{var i,r=a._parseOptional(n);r?(d[t]=r,i="O"):i="A",m.push(i)}}));var h=m.join(""),v=[],g=[];function x(e,t,i){v.push(e);var o=a._getValues(e,t);o!==e.defaultValue&&(g.push(e),f[l(e)]&&f[l(e)].forEach((function(n){if(g.indexOf(n)>=0)throw p(e,r('Not allowed with argument "%s".',n.getName()))}))),o!==s.SUPPRESS&&e.call(a,n,o,i)}function b(n){for(var t,i,r,s,c=d[n],l=c[0],f=c[1],m=c[2],v=[];;){if(!l)return u.push(e[n]),n+1;if(!m){r=n+1;var g=h.substr(r);s=r+(i=a._matchArgument(l,g)),t=e.slice(r,s),v.push([l,t,f]);break}i=a._matchArgument(l,"A");var b=a.prefixChars;if(!(0===i&&b.indexOf(f[1])<0)){if(1===i){s=n+1,t=[m],v.push([l,t,f]);break}throw p(l,o("ignored explicit argument %r",m))}v.push([l,[],f]),f=f[0]+m[0];var y=m.slice(1)||null,w=a._optionStringActions;if(!(Object.keys(w).indexOf(f)>=0))throw p(l,o("ignored explicit argument %r",m));l=w[f],m=y}if(v.length<1)throw new Error("length should be > 0");for(var _=0;_<v.length;_++)x.apply(a,v[_]);return s}var y=a._getPositionalActions();function w(n){for(var t=h.substr(n),i=a._matchArgumentsPartial(y,t),r=0;r<y.length;r++){var o=y[r],s=i[r];if(void 0!==s){var c=e.slice(n,n+s);n+=s,x(o,c)}}return y=y.slice(i.length),n}var _,k,$,E=0,S=-1;for(Object.keys(d).forEach((function(e){S=Math.max(S,parseInt(e,10))}));E<=S;){for(_ in $=null,d)d.hasOwnProperty(_)&&(_=parseInt(_,10))>=E&&($=null!==$?Math.min($,_):_);if(E!==$){if((k=w(E))>E){E=k;continue}E=k}if(!d[E]){var A=e.slice(E,$);u=u.concat(A),E=$}E=b(E)}var j=w(E);u=u.concat(e.slice(j)),y.length>0&&a.error("too few arguments"),a._actions.forEach((function(e){e.required&&v.indexOf(e)<0&&a.error(r('Argument "%s" is required',e.getName()))}));return a._mutuallyExclusiveGroups.forEach((function(e){if(e.required&&!e._groupActions.some((function(e){return-1!==g.indexOf(e)}))){var n=[];e._groupActions.forEach((function(e){e.help!==s.SUPPRESS&&n.push(e.getName())}));var t="one of the arguments "+(n=n.join(" "))+" is required";a.error(t)}})),[n,u]},d.prototype._readArgsFromFiles=function(e){var n=this,i=t(9),r=[];return e.forEach((function(e){if(n.fromfilePrefixChars.indexOf(e[0])<0)r.push(e);else try{var t=[],a=e.slice(1),o=i.readFileSync(a,"utf8");(o=o.trim().split("\n")).forEach((function(e){n.convertArgLineToArgs(e).forEach((function(e){t.push(e)})),t=n._readArgsFromFiles(t)})),r.push.apply(r,t)}catch(e){return n.error(e.message)}})),r},d.prototype.convertArgLineToArgs=function(e){return[e]},d.prototype._matchArgument=function(e,n){var t,i=new RegExp("^"+this._getNargsPattern(e)),a=n.match(i);if(!a){switch(e.nargs){case void 0:case null:t="Expected one argument.";break;case s.OPTIONAL:t="Expected at most one argument.";break;case s.ONE_OR_MORE:t="Expected at least one argument.";break;default:t="Expected %s argument(s)"}throw p(e,r(t,e.nargs))}return a[1].length},d.prototype._matchArgumentsPartial=function(e,n){var t,i,r,a,o,s=[];function c(e){return e.length}for(a=e.length;a>0;a--){for(i="",t=e.slice(0,a),o=0;o<t.length;o++)i+=this._getNargsPattern(t[o]);if(i=new RegExp("^"+i),(r=n.match(i))&&r.length>0){r=r.splice(1),s=s.concat(r.map(c));break}}return s},d.prototype._parseOptional=function(e){var n,t,i;if(!e)return null;if(this.prefixChars.indexOf(e[0])<0)return null;if(this._optionStringActions[e])return[this._optionStringActions[e],e,null];if(1===e.length)return null;if(e.indexOf("=")>=0&&(n=e.split("=",1)[0],t=e.slice(n.length+1),this._optionStringActions[n]))return[this._optionStringActions[n],n,t];if((i=this._getOptionTuples(e)).length>1){var a=i.map((function(e){return e[1]}));this.error(r('Ambiguous option: "%s" could match %s.',e,a.join(", ")))}else if(1===i.length)return i[0];return e.match(this._regexpNegativeNumber)&&!this._hasNegativeNumberOptionals.some(Boolean)||e.search(" ")>=0?null:[null,e,null]},d.prototype._getOptionTuples=function(e){var n,t,i,a,o=[],s=this.prefixChars;if(s.indexOf(e[0])>=0&&s.indexOf(e[1])>=0){if(e.indexOf("=")>=0){var u=e.split("=",1);n=u[0],t=u[1]}else n=e,t=null;for(a in this._optionStringActions)a.substr(0,n.length)===n&&(i=this._optionStringActions[a],o.push([i,a,t]))}else{if(!(s.indexOf(e[0])>=0&&s.indexOf(e[1])<0))throw new Error(r("Unexpected option string: %s.",e));n=e,t=null;var p=e.substr(0,2),l=e.substr(2);for(a in this._optionStringActions)c.has(this._optionStringActions,a)&&(i=this._optionStringActions[a],a===p?o.push([i,a,l]):a.substr(0,n.length)===n&&o.push([i,a,t]))}return o},d.prototype._getNargsPattern=function(e){var n;switch(e.nargs){case void 0:case null:n="(-*A-*)";break;case s.OPTIONAL:n="(-*A?-*)";break;case s.ZERO_OR_MORE:n="(-*[A-]*)";break;case s.ONE_OR_MORE:n="(-*A[A-]*)";break;case s.REMAINDER:n="([-AO]*)";break;case s.PARSER:n="(-*A[-AO]*)";break;default:n="(-*"+c.repeat("-*A",e.nargs)+"-*)"}return e.isOptional()&&(n=(n=n.replace(/-\*/g,"")).replace(/-/g,"")),n},d.prototype._getValues=function(e,n){var t,i,r=this;return e.nargs!==s.PARSER&&e.nargs!==s.REMAINDER&&(n=n.filter((function(e){return"--"!==e}))),0===n.length&&e.nargs===s.OPTIONAL?"string"==typeof(t=e.isOptional()?e.constant:e.defaultValue)&&(t=this._getValue(e,t),this._checkValue(e,t)):0===n.length&&e.nargs===s.ZERO_OR_MORE&&0===e.optionStrings.length?(t=e.defaultValue||n,this._checkValue(e,t)):1!==n.length||e.nargs&&e.nargs!==s.OPTIONAL?e.nargs===s.REMAINDER?t=n.map((function(n){return r._getValue(e,n)})):e.nargs===s.PARSER?(t=n.map((function(n){return r._getValue(e,n)})),this._checkValue(e,t[0])):(t=n.map((function(n){return r._getValue(e,n)}))).forEach((function(n){r._checkValue(e,n)})):(i=n[0],t=this._getValue(e,i),this._checkValue(e,t)),t},d.prototype._getValue=function(e,n){var t,i=this._registryGet("type",e.type,e.type);if("function"!=typeof i){var a=r("%s is not callable",i);throw p(e,a)}try{t=i(n)}catch(t){var o=null;o="string"==typeof e.type?e.type:e.type.name||e.type.displayName||"<function>";var s=r("Invalid %s value: %s",o,n);throw"<function>"===o&&(s+="\n"+t.message),p(e,s)}return t},d.prototype._checkValue=function(e,n){var t=e.choices;if(t){if(("string"==typeof t||Array.isArray(t))&&-1!==t.indexOf(n))return;if("object"==typeof t&&!Array.isArray(t)&&t[n])return;t="string"==typeof t?t.split("").join(", "):Array.isArray(t)?t.join(", "):Object.keys(t).join(", ");var i=r("Invalid choice: %s (choose from [%s])",n,t);throw p(e,i)}},d.prototype.formatUsage=function(){var e=this._getFormatter();return e.addUsage(this.usage,this._actions,this._mutuallyExclusiveGroups),e.formatHelp()},d.prototype.formatHelp=function(){var e=this._getFormatter();return e.addUsage(this.usage,this._actions,this._mutuallyExclusiveGroups),e.addText(this.description),this._actionGroups.forEach((function(n){e.startSection(n.title),e.addText(n.description),e.addArguments(n._groupActions),e.endSection()})),e.addText(this.epilog),e.formatHelp()},d.prototype._getFormatter=function(){return new(0,this.formatterClass)({prog:this.prog})},d.prototype.printUsage=function(){this._printMessage(this.formatUsage())},d.prototype.printHelp=function(){this._printMessage(this.formatHelp())},d.prototype._printMessage=function(e,n){n||(n=process.stdout),e&&n.write(""+e)},d.prototype.exit=function(e,n){n&&(0===e?this._printMessage(n):this._printMessage(n,process.stderr)),process.exit(e)},d.prototype.error=function(e){var n;if(e instanceof Error){if(!0===this.debug)throw e;n=e.message}else n=e;var t=r("%s: error: %s",this.prog,n)+s.EOL;if(!0===this.debug)throw new Error(t);return this.printUsage(process.stderr),this.exit(2,t)},e.exports=d},function(e,n,t){"use strict";var i=t(1),r=t(8),a=t(2),o=e.exports=function(e){null!==(e=e||{}).defaultValue?e.defaultValue=e.defaultValue:e.defaultValue=a.SUPPRESS,e.dest=null!==e.dest?e.dest:a.SUPPRESS,e.nargs=0,r.call(this,e)};i.inherits(o,r),o.prototype.call=function(e){e.printHelp(),e.exit()}},function(e,n,t){"use strict";var i=t(1),r=t(8),a=t(2),o=e.exports=function(e){if(e=e||{},this.nargs<=0)throw new Error("nargs for append actions must be > 0; if arg strings are not supplying the value to append, the append const action may be more appropriate");if(this.constant&&this.nargs!==a.OPTIONAL)throw new Error("nargs must be OPTIONAL to supply const");r.call(this,e)};i.inherits(o,r),o.prototype.call=function(e,n,t){var i=(n[this.dest]||[]).slice();i.push(t),n.set(this.dest,i)}},function(e,n,t){"use strict";var i=t(1),r=t(8),a=e.exports=function(e){if((e=e||{}).nargs=0,void 0===e.constant)throw new Error("constant option is required for appendAction");r.call(this,e)};i.inherits(a,r),a.prototype.call=function(e,n){var t=[].concat(n[this.dest]||[]);t.push(this.constant),n.set(this.dest,t)}},function(e,n,t){"use strict";var i=t(1),r=t(8),a=e.exports=function(e){(e=e||{}).nargs=0,r.call(this,e)};i.inherits(a,r),a.prototype.call=function(e,n){n.set(this.dest,(n[this.dest]||0)+1)}},function(e,n,t){"use strict";var i=t(1),r=t(8),a=t(2),o=e.exports=function(e){if(e=e||{},this.nargs<=0)throw new Error("nargs for store actions must be > 0; if you have nothing to store, actions such as store true or store const may be more appropriate");if(void 0!==this.constant&&this.nargs!==a.OPTIONAL)throw new Error("nargs must be OPTIONAL to supply const");r.call(this,e)};i.inherits(o,r),o.prototype.call=function(e,n,t){n.set(this.dest,t)}},function(e,n,t){"use strict";var i=t(1),r=t(19),a=e.exports=function(e){(e=e||{}).constant=!0,e.defaultValue=null!==e.defaultValue&&e.defaultValue,r.call(this,e)};i.inherits(a,r)},function(e,n,t){"use strict";var i=t(1),r=t(19),a=e.exports=function(e){(e=e||{}).constant=!1,e.defaultValue=null===e.defaultValue||e.defaultValue,r.call(this,e)};i.inherits(a,r)},function(e,n,t){"use strict";var i=t(1),r=t(8),a=t(2),o=e.exports=function(e){(e=e||{}).defaultValue=e.defaultValue?e.defaultValue:a.SUPPRESS,e.dest=e.dest||a.SUPPRESS,e.nargs=0,this.version=e.version,r.call(this,e)};i.inherits(o,r),o.prototype.call=function(e){var n=this.version||e.version,t=e._getFormatter();t.addText(n),e.exit(0,t.formatHelp())}},function(e,n,t){"use strict";var i=t(1),r=t(1).format,a=t(8),o=t(2),s=t(20);function c(e,n){var t={optionStrings:[],dest:e,help:n};a.call(this,t)}function u(e){(e=e||{}).dest=e.dest||o.SUPPRESS,e.nargs=o.PARSER,this.debug=!0===e.debug,this._progPrefix=e.prog,this._parserClass=e.parserClass,this._nameParserMap={},this._choicesActions=[],e.choices=this._nameParserMap,a.call(this,e)}i.inherits(c,a),i.inherits(u,a),u.prototype.addParser=function(e,n){var t,i=this;(n=n||{}).debug=!0===this.debug,n.prog||(n.prog=this._progPrefix+" "+e);var r=n.aliases||[];if(n.help||"string"==typeof n.help){var a=n.help;delete n.help;var o=new c(e,a);this._choicesActions.push(o)}return t=new this._parserClass(n),this._nameParserMap[e]=t,r.forEach((function(e){i._nameParserMap[e]=t})),t},u.prototype._getSubactions=function(){return this._choicesActions},u.prototype.call=function(e,n,t){var i=t[0],a=t.slice(1);if(this.dest!==o.SUPPRESS&&(n[this.dest]=i),!this._nameParserMap[i])throw s(r('Unknown parser "%s" (choices: [%s]).',i,Object.keys(this._nameParserMap).join(", ")));this._nameParserMap[i].parseArgs(a,n)},e.exports=u},function(e,n,t){"use strict";var i=t(1),r=t(28),a=e.exports=function(e,n){var t;t=(n=n||{}).required||!1,r.call(this,e),this.required=t};i.inherits(a,r),a.prototype._addAction=function(e){if(e.required)throw"mutually exclusive arguments must be optional",new Error("mutually exclusive arguments must be optional");return e=this._container._addAction(e),this._groupActions.push(e),e},a.prototype._removeAction=function(e){this._container._removeAction(e),this._groupActions.remove(e)}},function(e,n,t){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=t(23),r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,s=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,p=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.memo"):60115,h=r?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var x={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function y(e,n,t){this.props=e,this.context=n,this.refs=b,this.updater=t||x}function w(){}function _(e,n,t){this.props=e,this.context=n,this.refs=b,this.updater=t||x}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=y.prototype;var k=_.prototype=new w;k.constructor=_,i(k,y.prototype),k.isPureReactComponent=!0;var $={current:null},E=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function A(e,n,t){var i,r={},o=null,s=null;if(null!=n)for(i in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(o=""+n.key),n)E.call(n,i)&&!S.hasOwnProperty(i)&&(r[i]=n[i]);var c=arguments.length-2;if(1===c)r.children=t;else if(1<c){for(var u=Array(c),p=0;p<c;p++)u[p]=arguments[p+2];r.children=u}if(e&&e.defaultProps)for(i in c=e.defaultProps)void 0===r[i]&&(r[i]=c[i]);return{$$typeof:a,type:e,key:o,ref:s,props:r,_owner:$.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var F=/\/+/g,O=[];function C(e,n,t,i){if(O.length){var r=O.pop();return r.result=e,r.keyPrefix=n,r.func=t,r.context=i,r.count=0,r}return{result:e,keyPrefix:n,func:t,context:i,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function q(e,n,t){return null==e?0:function e(n,t,i,r){var s=typeof n;"undefined"!==s&&"boolean"!==s||(n=null);var c=!1;if(null===n)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(n.$$typeof){case a:case o:c=!0}}if(c)return i(r,n,""===t?"."+R(n,0):t),1;if(c=0,t=""===t?".":t+":",Array.isArray(n))for(var u=0;u<n.length;u++){var p=t+R(s=n[u],u);c+=e(s,p,i,r)}else if(null===n||"object"!=typeof n?p=null:p="function"==typeof(p=v&&n[v]||n["@@iterator"])?p:null,"function"==typeof p)for(n=p.call(n),u=0;!(s=n.next()).done;)c+=e(s=s.value,p=t+R(s,u++),i,r);else if("object"===s)throw i=""+n,Error(g(31,"[object Object]"===i?"object with keys {"+Object.keys(n).join(", ")+"}":i,""));return c}(e,"",n,t)}function R(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return n[e]}))}(e.key):n.toString(36)}function T(e,n){e.func.call(e.context,n,e.count++)}function z(e,n,t){var i=e.result,r=e.keyPrefix;e=e.func.call(e.context,n,e.count++),Array.isArray(e)?B(e,i,t,(function(e){return e})):null!=e&&(j(e)&&(e=function(e,n){return{$$typeof:a,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||n&&n.key===e.key?"":(""+e.key).replace(F,"$&/")+"/")+t)),i.push(e))}function B(e,n,t,i,r){var a="";null!=t&&(a=(""+t).replace(F,"$&/")+"/"),q(e,z,n=C(n,a,i,r)),M(n)}var L={current:null};function P(){var e=L.current;if(null===e)throw Error(g(321));return e}var I={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:$,IsSomeRendererActing:{current:!1},assign:i};n.Children={map:function(e,n,t){if(null==e)return e;var i=[];return B(e,i,null,n,t),i},forEach:function(e,n,t){if(null==e)return e;q(e,T,n=C(null,null,n,t)),M(n)},count:function(e){return q(e,(function(){return null}),null)},toArray:function(e){var n=[];return B(e,n,null,(function(e){return e})),n},only:function(e){if(!j(e))throw Error(g(143));return e}},n.Component=y,n.Fragment=s,n.Profiler=u,n.PureComponent=_,n.StrictMode=c,n.Suspense=d,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,n.cloneElement=function(e,n,t){if(null==e)throw Error(g(267,e));var r=i({},e.props),o=e.key,s=e.ref,c=e._owner;if(null!=n){if(void 0!==n.ref&&(s=n.ref,c=$.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(p in n)E.call(n,p)&&!S.hasOwnProperty(p)&&(r[p]=void 0===n[p]&&void 0!==u?u[p]:n[p])}var p=arguments.length-2;if(1===p)r.children=t;else if(1<p){u=Array(p);for(var l=0;l<p;l++)u[l]=arguments[l+2];r.children=u}return{$$typeof:a,type:e.type,key:o,ref:s,props:r,_owner:c}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:l,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:p,_context:e},e.Consumer=e},n.createElement=A,n.createFactory=function(e){var n=A.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:f,render:e}},n.isValidElement=j,n.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},n.memo=function(e,n){return{$$typeof:m,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return P().useCallback(e,n)},n.useContext=function(e,n){return P().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return P().useEffect(e,n)},n.useImperativeHandle=function(e,n,t){return P().useImperativeHandle(e,n,t)},n.useLayoutEffect=function(e,n){return P().useLayoutEffect(e,n)},n.useMemo=function(e,n){return P().useMemo(e,n)},n.useReducer=function(e,n,t){return P().useReducer(e,n,t)},n.useRef=function(e){return P().useRef(e)},n.useState=function(e){return P().useState(e)},n.version="16.13.1"},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i,r=((i=t(64))&&"object"==typeof i&&"default"in i?i.default:i)(t(10).cache),a=r.extractCritical,o=r.renderStylesToString,s=r.renderStylesToNodeStream;n.extractCritical=a,n.renderStylesToNodeStream=s,n.renderStylesToString=o},function(e,n,t){"use strict";e.exports=t(65)},function(e,n,t){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(n,"__esModule",{value:!0});var r=i(t(66)),a=i(t(67)),o=i(t(73)),s=function(e){return function(n){for(var t,i=new RegExp(e.key+"-([a-zA-Z0-9-_]+)","gm"),r={html:n,ids:[],css:""},a={};null!==(t=i.exec(n));)void 0===a[t[1]]&&(a[t[1]]=!0);return r.ids=Object.keys(e.inserted).filter((function(n){if((void 0!==a[n]||void 0===e.registered[e.key+"-"+n])&&!0!==e.inserted[n])return r.css+=e.inserted[n],!0})),r}};function c(e,n,t,i){return"<style data-emotion-"+e+'="'+n.substring(1)+'"'+i+">"+t+"</style>"}var u=function(e,n){return function(t){var i=e.inserted,r=e.key,a=e.registered,o=new RegExp("<|"+r+"-([a-zA-Z0-9-_]+)","gm"),s={},u="",p="",l="";for(var f in i)if(i.hasOwnProperty(f)){var d=i[f];!0!==d&&void 0===a[r+"-"+f]&&(l+=d,p+=" "+f)}""!==l&&(u=c(r,p,l,n));for(var m,h="",v="",g=0;null!==(m=o.exec(t));)if("<"!==m[0]){var x=m[1],b=i[x];!0===b||void 0===b||s[x]||(s[x]=!0,v+=b,h+=" "+x)}else""!==h&&(u+=c(r,h,v,n),h="",v=""),u+=t.substring(g,m.index),g=m.index;return u+t.substring(g)}},p=function(e,n){return function(){var t={},i=a(),s=r((function(i){var r=i[0],a=i[1];if("open"===r){for(var o,s="",c={},u=a.toString(),p=new RegExp(e.key+"-([a-zA-Z0-9-_]+)","gm");null!==(o=p.exec(u));)null!==o&&void 0===t[o[1]]&&(c[o[1]]=!0);Object.keys(e.inserted).forEach((function(n){!0!==e.inserted[n]&&void 0===t[n]&&(!0===c[n]||void 0===e.registered[e.key+"-"+n]&&(c[n]=!0))&&(t[n]=!0,s+=e.inserted[n])})),""!==s&&this.queue("<style data-emotion-"+e.key+'="'+Object.keys(c).join(" ")+'"'+n+">"+s+"</style>")}this.queue(a)}),(function(){this.queue(null)}));return o(i,s)}};n.default=function(e){!0!==e.compat&&(e.compat=!0);var n=void 0!==e.nonce?' nonce="'+e.nonce+'"':"";return{extractCritical:s(e),renderStylesToString:u(e,n),renderStylesToNodeStream:p(e,n)}}},function(e,n,t){var i=t(6);function r(e,n,t){e=e||function(e){this.queue(e)},n=n||function(){this.queue(null)};var r=!1,a=!1,o=[],s=!1,c=new i;function u(){for(;o.length&&!c.paused;){var e=o.shift();if(null===e)return c.emit("end");c.emit("data",e)}}function p(){c.writable=!1,n.call(c),!c.readable&&c.autoDestroy&&c.destroy()}return c.readable=c.writable=!0,c.paused=!1,c.autoDestroy=!(t&&!1===t.autoDestroy),c.write=function(n){return e.call(this,n),!c.paused},c.queue=c.push=function(e){return s||(null===e&&(s=!0),o.push(e),u()),c},c.on("end",(function(){c.readable=!1,!c.writable&&c.autoDestroy&&process.nextTick((function(){c.destroy()}))})),c.end=function(e){if(!r)return r=!0,arguments.length&&c.write(e),p(),c},c.destroy=function(){if(!a)return a=!0,r=!0,o.length=0,c.writable=c.readable=!1,c.emit("close"),c},c.pause=function(){if(!c.paused)return c.paused=!0,c},c.resume=function(){return c.paused&&(c.paused=!1,c.emit("resume")),u(),c.paused||c.emit("drain"),c},c}e.exports=r,r.through=r},function(e,n,t){var i=t(68),r=t(69).Transform;t(3)(v,r),e.exports=v;var a="<".charCodeAt(0),o=">".charCodeAt(0),s="/".charCodeAt(0),c='"'.charCodeAt(0),u="'".charCodeAt(0),p="=".charCodeAt(0),l={endScript:i("</script"),endStyle:i("</style"),endTitle:i("</title"),comment:i("\x3c!--"),endComment:i("--\x3e"),cdata:i("<![CDATA["),endCdata:i("]]>")},f=1,d=2,m=3,h=4;function v(){if(!(this instanceof v))return new v;r.call(this),this._readableState.objectMode=!0,this.state="text",this.tagState=null,this.quoteState=null,this.raw=null,this.buffers=[],this._last=[]}function g(e,n){if(e.length<n.length)return!1;for(var t=e.length-1,i=n.length-1;t>=0&&i>=0;t--,i--)if(x(e[t])!==x(n[i]))return!1;return!0}function x(e){return e>=65&&e<=90?e+32:e}function b(e){return 32===e||9===e||10===e||12===e||13===e}v.prototype._transform=function(e,n,t){var i=0,r=0;for(this._prev&&(e=Buffer.concat([this._prev,e]),i=this._prev.length-1,r=this._offset,this._prev=null,this._offset=0);i<e.length;i++){var v=e[i];if(this._last.push(v),this._last.length>9&&this._last.shift(),this.raw){var x=this._testRaw(e,r,i);x&&(this.push(["text",x[0]]),this.raw===l.endComment||this.raw===l.endCdata?(this.state="text",this.buffers=[],this.push(["close",x[1]])):(this.state="open",this.buffers=[x[1]]),this.raw=null,r=i+1)}else{if("text"===this.state&&v===a&&i===e.length-1)return this._prev=e,this._offset=r,t();if("text"!==this.state||v!==a||b(e[i+1]))if(this.tagState===f&&b(v))this.tagState=d;else if(this.tagState===d&&v===p)this.tagState=m;else if(this.tagState===m&&b(v));else if(this.tagState===m&&v!==o)this.tagState=h,this.quoteState=v===c?"double":v===u?"single":null;else if(this.tagState===h&&!this.quoteState&&b(v))this.tagState=d;else if(this.tagState===h&&"double"===this.quoteState&&v===c)this.quoteState=null,this.tagState=d;else if(this.tagState===h&&"single"===this.quoteState&&v===u)this.quoteState=null,this.tagState=d;else if("open"!==this.state||v!==o||this.quoteState)"open"===this.state&&g(this._last,l.comment)?(this.buffers.push(e.slice(r,i+1)),r=i+1,this.state="text",this.raw=l.endComment,this._pushState("open")):"open"===this.state&&g(this._last,l.cdata)&&(this.buffers.push(e.slice(r,i+1)),r=i+1,this.state="text",this.raw=l.endCdata,this._pushState("open"));else if(this.buffers.push(e.slice(r,i+1)),r=i+1,this.state="text",this.tagState=null,this._getChar(1)===s)this._pushState("close");else{var y=this._getTag();"script"===y&&(this.raw=l.endScript),"style"===y&&(this.raw=l.endStyle),"title"===y&&(this.raw=l.endTitle),this._pushState("open")}else i>0&&i-r>0&&this.buffers.push(e.slice(r,i)),r=i,this.state="open",this.tagState=f,this._pushState("text")}}r<e.length&&this.buffers.push(e.slice(r)),t()},v.prototype._flush=function(e){"text"===this.state&&this._pushState("text"),this.push(null),e()},v.prototype._pushState=function(e){if(0!==this.buffers.length){var n=Buffer.concat(this.buffers);this.buffers=[],this.push([e,n])}},v.prototype._getChar=function(e){for(var n=0,t=0;t<this.buffers.length;t++){var i=this.buffers[t];if(n+i.length>e)return i[e-n];n+=i}},v.prototype._getTag=function(){for(var e=0,n="",t=0;t<this.buffers.length;t++){for(var i=this.buffers[t],r=0;r<i.length;r++)if(0!==e||0!==r){var a=String.fromCharCode(i[r]);if(/[^\w-!\[\]]/.test(a))return n.toLowerCase();n+=a}e+=i.length}},v.prototype._testRaw=function(e,n,t){var i=this.raw;if(g(this._last,i)){this.buffers.push(e.slice(n,t+1));var r=(e=Buffer.concat(this.buffers)).length-i.length;return[e.slice(0,r),e.slice(r)]}}},function(e,n){var t=Object.prototype.toString,i="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;e.exports=function(e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return a=e,"ArrayBuffer"===t.call(a).slice(8,-1)?function(e,n,t){n>>>=0;var r=e.byteLength-n;if(r<0)throw new RangeError("'offset' is out of bounds");if(void 0===t)t=r;else if((t>>>=0)>r)throw new RangeError("'length' is out of bounds");return i?Buffer.from(e.slice(n,n+t)):new Buffer(new Uint8Array(e.slice(n,n+t)))}(e,n,r):"string"==typeof e?function(e,n){if("string"==typeof n&&""!==n||(n="utf8"),!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');return i?Buffer.from(e,n):new Buffer(e,n)}(e,n):i?Buffer.from(e):new Buffer(e);var a}},function(e,n,t){var i=t(6);(n=e.exports=t(30)).Stream=i,n.Readable=n,n.Writable=t(33),n.Duplex=t(24),n.Transform=t(34),n.PassThrough=t(72),process.browser||"disable"!==process.env.READABLE_STREAM||(e.exports=t(6))},function(e,n){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,n){"function"==typeof Object.create?e.exports=function(e,n){n&&(e.super_=n,e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,n){if(n){e.super_=n;var t=function(){};t.prototype=n.prototype,e.prototype=new t,e.prototype.constructor=e}}},function(e,n,t){e.exports=a;var i=t(34),r=t(7);function a(e){if(!(this instanceof a))return new a(e);i.call(this,e)}r.inherits=t(3),r.inherits(a,i),a.prototype._transform=function(e,n,t){t(null,e)}},function(e,n,t){var i=t(74),r=t(6).PassThrough,a=t(6).PassThrough,o=t(23),s=[].slice,c={bubbleErrors:!1,objectMode:!0};e.exports=function(e,n,t){Array.isArray(e)||(e=s.call(arguments),n=null,t=null);var u=e[e.length-1];"function"==typeof u&&(t=e.splice(-1)[0],u=e[e.length-1]);"object"==typeof u&&"function"!=typeof u.pipe&&(n=e.splice(-1)[0]);var p,l=e[0],f=e[e.length-1];if(n=o({},c,n),!l)return t&&process.nextTick(t),new r(n);p=l.writable&&f.readable?i(n,l,f):1==e.length?new a(n).wrap(e[0]):l.writable?l:f.readable?f:new r(n);if(e.forEach((function(n,t){var i=e[t+1];i&&n.pipe(i),n!=p&&n.on("error",p.emit.bind(p,"error"))})),t){var d=!1;function m(e){d||(d=!0,t(e))}p.on("error",m),f.on("finish",(function(){m()})),f.on("close",(function(){m()}))}return p}},function(e,n,t){"use strict";var i=t(75);function r(e,n,t){void 0===t&&(t=n,n=e,e=null),i.Duplex.call(this,e),"function"!=typeof t.read&&(t=new i.Readable(e).wrap(t)),this._writable=n,this._readable=t,this._waiting=!1;var r=this;n.once("finish",(function(){r.end()})),this.once("finish",(function(){n.end()})),t.on("readable",(function(){r._waiting&&(r._waiting=!1,r._read())})),t.once("end",(function(){r.push(null)})),e&&void 0!==e.bubbleErrors&&!e.bubbleErrors||(n.on("error",(function(e){r.emit("error",e)})),t.on("error",(function(e){r.emit("error",e)})))}r.prototype=Object.create(i.Duplex.prototype,{constructor:{value:r}}),r.prototype._write=function(e,n,t){this._writable.write(e,n,t)},r.prototype._read=function(){for(var e,n=0;null!==(e=this._readable.read());)this.push(e),n++;0===n&&(this._waiting=!0)},e.exports=function(e,n,t){return new r(e,n,t)},e.exports.DuplexWrapper=r},function(e,n,t){var i=t(6);"disable"===process.env.READABLE_STREAM&&i?(e.exports=i,(n=e.exports=i.Readable).Readable=i.Readable,n.Writable=i.Writable,n.Duplex=i.Duplex,n.Transform=i.Transform,n.PassThrough=i.PassThrough,n.Stream=i):((n=e.exports=t(35)).Stream=i||n,n.Readable=n,n.Writable=t(38),n.Duplex=t(11),n.Transform=t(40),n.PassThrough=t(79))},function(e,n){var t={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==t.call(e)}},function(e,n,t){"use strict";var i=t(17).Buffer,r=t(1);e.exports=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var n={data:e,next:null};this.length>0?this.tail.next=n:this.head=n,this.tail=n,++this.length},e.prototype.unshift=function(e){var n={data:e,next:this.head};0===this.length&&(this.tail=n),this.head=n,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var n=this.head,t=""+n.data;n=n.next;)t+=e+n.data;return t},e.prototype.concat=function(e){if(0===this.length)return i.alloc(0);if(1===this.length)return this.head.data;for(var n,t,r,a=i.allocUnsafe(e>>>0),o=this.head,s=0;o;)n=o.data,t=a,r=s,n.copy(t,r),s+=o.data.length,o=o.next;return a},e}(),r&&r.inspect&&r.inspect.custom&&(e.exports.prototype[r.inspect.custom]=function(){var e=r.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,n,t){e.exports=t(1).deprecate},function(e,n,t){"use strict";e.exports=a;var i=t(40),r=Object.create(t(7));function a(e){if(!(this instanceof a))return new a(e);i.call(this,e)}r.inherits=t(3),r.inherits(a,i),a.prototype._transform=function(e,n,t){t(null,e)}},function(e,n,t){"use strict";e.exports=t(81)},function(e,n,t){"use strict";
/** @license React v16.13.1
 * react-dom-server.node.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var i=t(23),r=t(0),a=t(6);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s="function"==typeof Symbol&&Symbol.for,c=s?Symbol.for("react.portal"):60106,u=s?Symbol.for("react.fragment"):60107,p=s?Symbol.for("react.strict_mode"):60108,l=s?Symbol.for("react.profiler"):60114,f=s?Symbol.for("react.provider"):60109,d=s?Symbol.for("react.context"):60110,m=s?Symbol.for("react.concurrent_mode"):60111,h=s?Symbol.for("react.forward_ref"):60112,v=s?Symbol.for("react.suspense"):60113,g=s?Symbol.for("react.suspense_list"):60120,x=s?Symbol.for("react.memo"):60115,b=s?Symbol.for("react.lazy"):60116,y=s?Symbol.for("react.block"):60121,w=s?Symbol.for("react.fundamental"):60117,_=s?Symbol.for("react.scope"):60119;function k(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case u:return"Fragment";case c:return"Portal";case l:return"Profiler";case p:return"StrictMode";case v:return"Suspense";case g:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case d:return"Context.Consumer";case f:return"Context.Provider";case h:var n=e.render;return n=n.displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case x:return k(e.type);case y:return k(e.render);case b:if(e=1===e._status?e._result:null)return k(e)}return null}var $=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;$.hasOwnProperty("ReactCurrentDispatcher")||($.ReactCurrentDispatcher={current:null}),$.hasOwnProperty("ReactCurrentBatchConfig")||($.ReactCurrentBatchConfig={suspense:null});var E={};function S(e,n){for(var t=0|e._threadCount;t<=n;t++)e[t]=e._currentValue2,e._threadCount=t+1}for(var A=new Uint16Array(16),j=0;15>j;j++)A[j]=j+1;A[15]=0;var F=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,O=Object.prototype.hasOwnProperty,C={},M={};function q(e){return!!O.call(M,e)||!O.call(C,e)&&(F.test(e)?M[e]=!0:(C[e]=!0,!1))}function R(e,n,t,i,r,a){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a}var T={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){T[e]=new R(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];T[n]=new R(n,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){T[e]=new R(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){T[e]=new R(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){T[e]=new R(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){T[e]=new R(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){T[e]=new R(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){T[e]=new R(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){T[e]=new R(e,5,!1,e.toLowerCase(),null,!1)}));var z=/[\-:]([a-z])/g;function B(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(z,B);T[n]=new R(n,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(z,B);T[n]=new R(n,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(z,B);T[n]=new R(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){T[e]=new R(e,1,!1,e.toLowerCase(),null,!1)})),T.xlinkHref=new R("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){T[e]=new R(e,1,!1,e.toLowerCase(),null,!0)}));var L=/["'&<>]/;function P(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var n=L.exec(e);if(n){var t,i="",r=0;for(t=n.index;t<e.length;t++){switch(e.charCodeAt(t)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#x27;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}r!==t&&(i+=e.substring(r,t)),r=t+1,i+=n}e=r!==t?i+e.substring(r,t):i}return e}function I(e,n){var t,i=T.hasOwnProperty(e)?T[e]:null;return(t="style"!==e)&&(t=null!==i?0===i.type:2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])),t||function(e,n,t,i){if(null==n||function(e,n,t,i){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,i))return!0;if(i)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(e,n,i,!1)?"":null!==i?(e=i.attributeName,3===(t=i.type)||4===t&&!0===n?e+'=""':(i.sanitizeURL&&(n=""+n),e+'="'+P(n)+'"')):q(e)?e+'="'+P(n)+'"':""}var D="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n},N=null,U=null,W=null,H=!1,V=!1,G=null,Z=0;function K(){if(null===N)throw Error(o(321));return N}function Y(){if(0<Z)throw Error(o(312));return{memoizedState:null,queue:null,next:null}}function X(){return null===W?null===U?(H=!1,U=W=Y()):(H=!0,W=U):null===W.next?(H=!1,W=W.next=Y()):(H=!0,W=W.next),W}function J(e,n,t,i){for(;V;)V=!1,Z+=1,W=null,t=e(n,i);return U=N=null,Z=0,W=G=null,t}function Q(e,n){return"function"==typeof n?n(e):n}function ee(e,n,t){if(N=K(),W=X(),H){var i=W.queue;if(n=i.dispatch,null!==G&&void 0!==(t=G.get(i))){G.delete(i),i=W.memoizedState;do{i=e(i,t.action),t=t.next}while(null!==t);return W.memoizedState=i,[i,n]}return[W.memoizedState,n]}return e=e===Q?"function"==typeof n?n():n:void 0!==t?t(n):n,W.memoizedState=e,e=(e=W.queue={last:null,dispatch:null}).dispatch=ne.bind(null,N,e),[W.memoizedState,e]}function ne(e,n,t){if(!(25>Z))throw Error(o(301));if(e===N)if(V=!0,e={action:t,next:null},null===G&&(G=new Map),void 0===(t=G.get(n)))G.set(n,e);else{for(n=t;null!==n.next;)n=n.next;n.next=e}}function te(){}var ie=0,re={readContext:function(e){var n=ie;return S(e,n),e[n]},useContext:function(e){K();var n=ie;return S(e,n),e[n]},useMemo:function(e,n){if(N=K(),n=void 0===n?null:n,null!==(W=X())){var t=W.memoizedState;if(null!==t&&null!==n){e:{var i=t[1];if(null===i)i=!1;else{for(var r=0;r<i.length&&r<n.length;r++)if(!D(n[r],i[r])){i=!1;break e}i=!0}}if(i)return t[0]}}return e=e(),W.memoizedState=[e,n],e},useReducer:ee,useRef:function(e){N=K();var n=(W=X()).memoizedState;return null===n?(e={current:e},W.memoizedState=e):n},useState:function(e){return ee(Q,e)},useLayoutEffect:function(){},useCallback:function(e){return e},useImperativeHandle:te,useEffect:te,useDebugValue:te,useResponder:function(e,n){return{props:n,responder:e}},useDeferredValue:function(e){return K(),e},useTransition:function(){return K(),[function(e){e()},!1]}},ae="http://www.w3.org/1999/xhtml";function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}var se={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},ce=i({menuitem:!0},se),ue={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];Object.keys(ue).forEach((function(e){pe.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),ue[n]=ue[e]}))}));var le=/([A-Z])/g,fe=/^ms-/,de=r.Children.toArray,me=$.ReactCurrentDispatcher,he={listing:!0,pre:!0,textarea:!0},ve=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,ge={},xe={};var be=Object.prototype.hasOwnProperty,ye={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null,suppressHydrationWarning:null};function we(e,n){if(void 0===e)throw Error(o(152,k(n)||"Component"))}function _e(e,n,t){function a(r,a){var s=a.prototype&&a.prototype.isReactComponent,c=function(e,n,t,i){if(i&&("object"==typeof(i=e.contextType)&&null!==i))return S(i,t),i[t];if(e=e.contextTypes){for(var r in t={},e)t[r]=n[r];n=t}else n=E;return n}(a,n,t,s),u=[],p=!1,l={isMounted:function(){return!1},enqueueForceUpdate:function(){if(null===u)return null},enqueueReplaceState:function(e,n){p=!0,u=[n]},enqueueSetState:function(e,n){if(null===u)return null;u.push(n)}};if(s){if(s=new a(r.props,c,l),"function"==typeof a.getDerivedStateFromProps){var f=a.getDerivedStateFromProps.call(null,r.props,s.state);null!=f&&(s.state=i({},s.state,f))}}else if(N={},s=a(r.props,c,l),null==(s=J(a,r.props,s,c))||null==s.render)return void we(e=s,a);if(s.props=r.props,s.context=c,s.updater=l,void 0===(l=s.state)&&(s.state=l=null),"function"==typeof s.UNSAFE_componentWillMount||"function"==typeof s.componentWillMount)if("function"==typeof s.componentWillMount&&"function"!=typeof a.getDerivedStateFromProps&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&"function"!=typeof a.getDerivedStateFromProps&&s.UNSAFE_componentWillMount(),u.length){l=u;var d=p;if(u=null,p=!1,d&&1===l.length)s.state=l[0];else{f=d?l[0]:s.state;var m=!0;for(d=d?1:0;d<l.length;d++){var h=l[d];null!=(h="function"==typeof h?h.call(s,f,r.props,c):h)&&(m?(m=!1,f=i({},f,h)):i(f,h))}s.state=f}}else u=null;if(we(e=s.render(),a),"function"==typeof s.getChildContext&&"object"==typeof(r=a.childContextTypes)){var v=s.getChildContext();for(var g in v)if(!(g in r))throw Error(o(108,k(a)||"Unknown",g))}v&&(n=i({},n,v))}for(;r.isValidElement(e);){var s=e,c=s.type;if("function"!=typeof c)break;a(s,c)}return{child:e,context:n}}var ke=function(){function e(e,n){r.isValidElement(e)?e.type!==u?e=[e]:(e=e.props.children,e=r.isValidElement(e)?[e]:de(e)):e=de(e),e={type:null,domNamespace:ae,children:e,childIndex:0,context:E,footer:""};var t=A[0];if(0===t){var i=A,a=2*(t=i.length);if(!(65536>=a))throw Error(o(304));var s=new Uint16Array(a);for(s.set(i),(A=s)[0]=t+1,i=t;i<a-1;i++)A[i]=i+1;A[a-1]=0}else A[0]=A[t];this.threadID=t,this.stack=[e],this.exhausted=!1,this.currentSelectValue=null,this.previousWasTextNode=!1,this.makeStaticMarkup=n,this.suspenseDepth=0,this.contextIndex=-1,this.contextStack=[],this.contextValueStack=[]}var n=e.prototype;return n.destroy=function(){if(!this.exhausted){this.exhausted=!0,this.clearProviders();var e=this.threadID;A[e]=A[0],A[0]=e}},n.pushProvider=function(e){var n=++this.contextIndex,t=e.type._context,i=this.threadID;S(t,i);var r=t[i];this.contextStack[n]=t,this.contextValueStack[n]=r,t[i]=e.props.value},n.popProvider=function(){var e=this.contextIndex,n=this.contextStack[e],t=this.contextValueStack[e];this.contextStack[e]=null,this.contextValueStack[e]=null,this.contextIndex--,n[this.threadID]=t},n.clearProviders=function(){for(var e=this.contextIndex;0<=e;e--)this.contextStack[e][this.threadID]=this.contextValueStack[e]},n.read=function(e){if(this.exhausted)return null;var n=ie;ie=this.threadID;var t=me.current;me.current=re;try{for(var i=[""],r=!1;i[0].length<e;){if(0===this.stack.length){this.exhausted=!0;var a=this.threadID;A[a]=A[0],A[0]=a;break}var s=this.stack[this.stack.length-1];if(r||s.childIndex>=s.children.length){var c=s.footer;if(""!==c&&(this.previousWasTextNode=!1),this.stack.pop(),"select"===s.type)this.currentSelectValue=null;else if(null!=s.type&&null!=s.type.type&&s.type.type.$$typeof===f)this.popProvider(s.type);else if(s.type===v){this.suspenseDepth--;var u=i.pop();if(r){r=!1;var p=s.fallbackFrame;if(!p)throw Error(o(303));this.stack.push(p),i[this.suspenseDepth]+="\x3c!--$!--\x3e";continue}i[this.suspenseDepth]+=u}i[this.suspenseDepth]+=c}else{var l=s.children[s.childIndex++],d="";try{d+=this.render(l,s.context,s.domNamespace)}catch(e){if(null!=e&&"function"==typeof e.then)throw Error(o(294));throw e}i.length<=this.suspenseDepth&&i.push(""),i[this.suspenseDepth]+=d}}return i[0]}finally{me.current=t,ie=n}},n.render=function(e,n,t){if("string"==typeof e||"number"==typeof e)return""===(t=""+e)?"":this.makeStaticMarkup?P(t):this.previousWasTextNode?"\x3c!-- --\x3e"+P(t):(this.previousWasTextNode=!0,P(t));if(e=(n=_e(e,n,this.threadID)).child,n=n.context,null===e||!1===e)return"";if(!r.isValidElement(e)){if(null!=e&&null!=e.$$typeof){if((t=e.$$typeof)===c)throw Error(o(257));throw Error(o(258,t.toString()))}return e=de(e),this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),""}var a=e.type;if("string"==typeof a)return this.renderDOM(e,n,t);switch(a){case p:case m:case l:case g:case u:return e=de(e.props.children),this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),"";case v:throw Error(o(294))}if("object"==typeof a&&null!==a)switch(a.$$typeof){case h:N={};var s=a.render(e.props,e.ref);return s=J(a.render,e.props,s,e.ref),s=de(s),this.stack.push({type:null,domNamespace:t,children:s,childIndex:0,context:n,footer:""}),"";case x:return e=[r.createElement(a.type,i({ref:e.ref},e.props))],this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),"";case f:return t={type:e,domNamespace:t,children:a=de(e.props.children),childIndex:0,context:n,footer:""},this.pushProvider(e),this.stack.push(t),"";case d:a=e.type,s=e.props;var y=this.threadID;return S(a,y),a=de(s.children(a[y])),this.stack.push({type:e,domNamespace:t,children:a,childIndex:0,context:n,footer:""}),"";case w:throw Error(o(338));case b:switch(function(e){if(-1===e._status){e._status=0;var n=e._ctor;n=n(),e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}}(a=e.type),a._status){case 1:return e=[r.createElement(a._result,i({ref:e.ref},e.props))],this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),"";case 2:throw a._result;default:throw Error(o(295))}case _:throw Error(o(343))}throw Error(o(130,null==a?a:typeof a,""))},n.renderDOM=function(e,n,t){var a=e.type.toLowerCase();if(t===ae&&oe(a),!ge.hasOwnProperty(a)){if(!ve.test(a))throw Error(o(65,a));ge[a]=!0}var s=e.props;if("input"===a)s=i({type:void 0},s,{defaultChecked:void 0,defaultValue:void 0,value:null!=s.value?s.value:s.defaultValue,checked:null!=s.checked?s.checked:s.defaultChecked});else if("textarea"===a){var c=s.value;if(null==c){c=s.defaultValue;var u=s.children;if(null!=u){if(null!=c)throw Error(o(92));if(Array.isArray(u)){if(!(1>=u.length))throw Error(o(93));u=u[0]}c=""+u}null==c&&(c="")}s=i({},s,{value:void 0,children:""+c})}else if("select"===a)this.currentSelectValue=null!=s.value?s.value:s.defaultValue,s=i({},s,{value:void 0});else if("option"===a){u=this.currentSelectValue;var p=function(e){if(null==e)return e;var n="";return r.Children.forEach(e,(function(e){null!=e&&(n+=e)})),n}(s.children);if(null!=u){var l=null!=s.value?s.value+"":p;if(c=!1,Array.isArray(u)){for(var f=0;f<u.length;f++)if(""+u[f]===l){c=!0;break}}else c=""+u===l;s=i({selected:void 0,children:void 0},s,{selected:c,children:p})}}if(c=s){if(ce[a]&&(null!=c.children||null!=c.dangerouslySetInnerHTML))throw Error(o(137,a,""));if(null!=c.dangerouslySetInnerHTML){if(null!=c.children)throw Error(o(60));if("object"!=typeof c.dangerouslySetInnerHTML||!("__html"in c.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=c.style&&"object"!=typeof c.style)throw Error(o(62,""))}for(y in c=s,u=this.makeStaticMarkup,p=1===this.stack.length,l="<"+e.type,c)if(be.call(c,y)){var d=c[y];if(null!=d){if("style"===y){f=void 0;var m="",h="";for(f in d)if(d.hasOwnProperty(f)){var v=0===f.indexOf("--"),g=d[f];if(null!=g){if(v)var x=f;else if(x=f,xe.hasOwnProperty(x))x=xe[x];else{var b=x.replace(le,"-$1").toLowerCase().replace(fe,"-ms-");x=xe[x]=b}m+=h+x+":",h=f,m+=v=null==g||"boolean"==typeof g||""===g?"":v||"number"!=typeof g||0===g||ue.hasOwnProperty(h)&&ue[h]?(""+g).trim():g+"px",h=";"}}d=m||null}f=null;e:if(v=a,g=c,-1===v.indexOf("-"))v="string"==typeof g.is;else switch(v){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":v=!1;break e;default:v=!0}v?ye.hasOwnProperty(y)||(f=q(f=y)&&null!=d?f+'="'+P(d)+'"':""):f=I(y,d),f&&(l+=" "+f)}}u||p&&(l+=' data-reactroot=""');var y=l;c="",se.hasOwnProperty(a)?y+="/>":(y+=">",c="</"+e.type+">");e:{if(null!=(u=s.dangerouslySetInnerHTML)){if(null!=u.__html){u=u.__html;break e}}else if("string"==typeof(u=s.children)||"number"==typeof u){u=P(u);break e}u=null}return null!=u?(s=[],he.hasOwnProperty(a)&&"\n"===u.charAt(0)&&(y+="\n"),y+=u):s=de(s.children),e=e.type,t=null==t||"http://www.w3.org/1999/xhtml"===t?oe(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t,this.stack.push({domNamespace:t,type:a,children:s,childIndex:0,context:n,footer:c}),this.previousWasTextNode=!1,y},e}();var $e=function(e){function n(n,t){var i=e.call(this,{})||this;return i.partialRenderer=new ke(n,t),i}!function(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}(n,e);var t=n.prototype;return t._destroy=function(e,n){this.partialRenderer.destroy(),n(e)},t._read=function(e){try{this.push(this.partialRenderer.read(e))}catch(e){this.destroy(e)}},n}(a.Readable),Ee={renderToString:function(e){e=new ke(e,!1);try{return e.read(1/0)}finally{e.destroy()}},renderToStaticMarkup:function(e){e=new ke(e,!0);try{return e.read(1/0)}finally{e.destroy()}},renderToNodeStream:function(e){return new $e(e,!1)},renderToStaticNodeStream:function(e){return new $e(e,!0)},version:"16.13.1"};e.exports=Ee.default||Ee},function(e,n,t){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=t(83)},function(e){e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma","es"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/mrb-publish+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["keynote"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana"},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},function(e,n,t){"use strict";t.r(n),t.d(n,"printError",(function(){return Ag})),t.d(n,"main",(function(){return jg}));var i=t(41),r=t.t(i,2),a=t(42);function o(e,n,t,i,r,a){a.addArgument([e,n],{dest:t,metavar:r,required:i})}function s(e){var n,t,i=(n=r.version,t=r.name,new a.ArgumentParser({version:n,prog:t}));return o("-s","--site-name","siteName",!0,"STRING",i),o("-e","--entries-directory","entriesDirectory",!0,"PATH",i),o("-a","--about-path","aboutPath",!0,"PATH",i),i.parseArgs()}function c(e,n,t,i,r,a){return new Date(e,n-1|0,t,void 0!==i?i:0,void 0!==r?r:0)}var u=t(12);function p(e,n){return n.tag=e,n}var l=["Sys_error",-1],f=["Failure",-2],d=["Invalid_argument",-3],m=["End_of_file",-4],h=["Division_by_zero",-5],v=["Not_found",-6],g=["Assert_failure",-10];function x(e,n,t){for(var i=new Array(t),r=0,a=n;r<t;)i[r]=e[a],r=r+1|0,a=a+1|0;return i}function b(e,n,t){if(n<0||n>=e.length)throw[d,"index out of bounds"];e[n]=t}function y(e,n){if(n<0||n>=e.length)throw[d,"index out of bounds"];return e[n]}function w(e,n){for(var t=new Array(e),i=0;i<e;++i)t[i]=n;return t}function _(e,n){for(;;){var t=n,i=e,r=i.length,a=0===r?1:r,o=a-t.length|0;if(0===o)return i.apply(null,t);if(o>=0)return function(e,n){return function(t){return _(e,n.concat([t]))}}(i,t);n=x(t,a,0|-o),e=i.apply(null,x(t,0,a))}}function k(e,n){var t=e.length;if(1===t)return e(n);switch(t){case 1:return e(n);case 2:return function(t){return e(n,t)};case 3:return function(t,i){return e(n,t,i)};case 4:return function(t,i,r){return e(n,t,i,r)};case 5:return function(t,i,r,a){return e(n,t,i,r,a)};case 6:return function(t,i,r,a,o){return e(n,t,i,r,a,o)};case 7:return function(t,i,r,a,o,s){return e(n,t,i,r,a,o,s)};default:return _(e,[n])}}function $(e){return 1===e.length?e:function(n){return k(e,n)}}function E(e,n,t){var i=e.length;if(2===i)return e(n,t);switch(i){case 1:return _(e(n),[t]);case 2:return e(n,t);case 3:return function(i){return e(n,t,i)};case 4:return function(i,r){return e(n,t,i,r)};case 5:return function(i,r,a){return e(n,t,i,r,a)};case 6:return function(i,r,a,o){return e(n,t,i,r,a,o)};case 7:return function(i,r,a,o,s){return e(n,t,i,r,a,o,s)};default:return _(e,[n,t])}}function S(e){return 2===e.length?e:function(n,t){return E(e,n,t)}}function A(e,n,t,i){var r=e.length;if(3===r)return e(n,t,i);switch(r){case 1:return _(e(n),[t,i]);case 2:return _(e(n,t),[i]);case 3:return e(n,t,i);case 4:return function(r){return e(n,t,i,r)};case 5:return function(r,a){return e(n,t,i,r,a)};case 6:return function(r,a,o){return e(n,t,i,r,a,o)};case 7:return function(r,a,o,s){return e(n,t,i,r,a,o,s)};default:return _(e,[n,t,i])}}function j(e){return 3===e.length?e:function(n,t,i){return A(e,n,t,i)}}function F(e,n,t,i,r){var a=e.length;if(4===a)return e(n,t,i,r);switch(a){case 1:return _(e(n),[t,i,r]);case 2:return _(e(n,t),[i,r]);case 3:return _(e(n,t,i),[r]);case 4:return e(n,t,i,r);case 5:return function(a){return e(n,t,i,r,a)};case 6:return function(a,o){return e(n,t,i,r,a,o)};case 7:return function(a,o,s){return e(n,t,i,r,a,o,s)};default:return _(e,[n,t,i,r])}}function O(e,n,t,i,r,a){var o=e.length;if(5===o)return e(n,t,i,r,a);switch(o){case 1:return _(e(n),[t,i,r,a]);case 2:return _(e(n,t),[i,r,a]);case 3:return _(e(n,t,i),[r,a]);case 4:return _(e(n,t,i,r),[a]);case 5:return e(n,t,i,r,a);case 6:return function(o){return e(n,t,i,r,a,o)};case 7:return function(o,s){return e(n,t,i,r,a,o,s)};default:return _(e,[n,t,i,r,a])}}function C(e,n,t,i,r,a,o){var s=e.length;if(6===s)return e(n,t,i,r,a,o);switch(s){case 1:return _(e(n),[t,i,r,a,o]);case 2:return _(e(n,t),[i,r,a,o]);case 3:return _(e(n,t,i),[r,a,o]);case 4:return _(e(n,t,i,r),[a,o]);case 5:return _(e(n,t,i,r,a),[o]);case 6:return e(n,t,i,r,a,o);case 7:return function(s){return e(n,t,i,r,a,o,s)};default:return _(e,[n,t,i,r,a,o])}}l.tag=248,f.tag=248,d.tag=248,m.tag=248,h.tag=248,v.tag=248,g.tag=248;var M=[];function q(e){if(void 0===e){var n=[M,0];return n.tag=256,n}if(null===e||e[0]!==M)return e;var t=e[1]+1|0,i=[M,t];return i.tag=256,i}function R(e){return null==e?void 0:q(e)}function T(e){if(null===e||e[0]!==M)return e;var n=e[1];return 0===n?void 0:[M,n-1|0]}function z(e,n){if(n in e)return q(e[n])}var B={contents:0};function L(e){var n=[e,(B.contents=B.contents+1,B.contents)];return n.tag=248,n}L("Caml_js_exceptions.Error");function P(e,n){return e<n?-1:e===n?0:1}function I(e,n){return e===n?0:e<n?-1:1}function D(e,n){return e<n?e:n}function N(e,n){return e>n?e:n}function U(e,n){if(n>=0&&n<e.length)return q(e[n])}function W(e,n){if(!(n>=0&&n<e.length))throw new Error('File "belt_Array.ml", line 25, characters 6-12');return e[n]}function H(e,n){for(var t=e.length,i=n.length,r=t<i?t:i,a=new Array(r),o=0;o<r;++o)a[o]=[e[o],n[o]];return a}function V(e,n,t){return function(e,n,t){for(var i=e.length,r=n.length,a=i<r?i:r,o=new Array(a),s=0;s<a;++s)o[s]=t(e[s],n[s]);return o}(e,n,S(t))}function G(e,n){for(var t=e.length,i=n.length,r=new Array(t+i|0),a=0;a<t;++a)r[a]=e[a];for(var o=0;o<i;++o)r[t+o|0]=n[o];return r}function Z(e,n){for(var t=e.length,i=n<0?N(t+n|0,0):n,r=t-i|0,a=new Array(r),o=0;o<r;++o)a[o]=e[i+o|0];return a}function K(e,n,t,i,r){if(i<=n)for(var a=0;a<r;++a)t[a+i|0]=e[a+n|0];else for(var o=r-1|0;o>=0;--o)t[o+i|0]=e[o+n|0]}function Y(e,n){var t=e.length;if(0===t||1===t)return t;var i=e[0],r=e[1];if(!n(i,r))return n(r,i)?0|-function(e,n,t,i,r){for(;;){var a=t,o=n;if(a>=i)return a;var s=e[a];if(!r(s,o))return a;t=a+1|0,n=s}}(e,r,2,t,n):1;for(var a=r,o=2;;){var s=o,c=a;if(s>=t)return s;var u=e[s];if(!n(c,u))return s;o=s+1|0,a=u}}function X(e,n,t,i,r,a,o,s,c){for(var u=n+t|0,p=r+a|0,l=n,f=e[n],d=r,m=i[r],h=s;;){var v=h,g=m,x=d,b=f,y=l;if(c(b,g)<=0){o[v]=b;var w=y+1|0;if(w>=u)return K(i,x,o,v+1|0,p-x|0);h=v+1|0,f=e[w],l=w}else{o[v]=g;var _=x+1|0;if(_>=p)return K(e,y,o,v+1|0,u-y|0);h=v+1|0,m=i[_],d=_}}}function J(e,n,t,i,r,a){for(var o=0;o<r;++o){for(var s=e[n+o|0],c=(i+o|0)-1|0;c>=i&&a(t[c],s)>0;)t[c+1|0]=t[c],c=c-1|0;t[c+1|0]=s}}function Q(e,n,t,i,r,a){if(r<=5)return J(e,n,t,i,r,a);var o=r/2|0,s=r-o|0;return Q(e,n+o|0,t,i+o|0,s,a),Q(e,n,e,n+s|0,o,a),X(e,n+s|0,o,t,i+o|0,s,t,i,a)}function ee(e,n){var t=e.length;if(t<=5)return J(e,0,e,0,t,n);var i=t/2|0,r=t-i|0,a=new Array(r);return Q(e,i,a,0,r,n),Q(e,0,e,r,i,n),X(e,r,i,a,0,r,e,0,n)}function ne(e,n){return function(e,n){var t=e.slice(0);return ee(t,n),t}(e,S(n))}function te(e){return void 0!==e?e.height:0}function ie(e,n,t,i){var r=te(e),a=te(i);return{key:n,value:t,height:r>=a?r+1|0:a+1|0,left:e,right:i}}function re(e,n){return{key:e,value:n,height:1,left:void 0,right:void 0}}function ae(e,n){return void 0===n||void 0!==e&&e.height>=n.height}function oe(e,n){return e.value===n?e:{key:e.key,value:n,height:e.height,left:e.left,right:e.right}}function se(e,n,t,i){var r=void 0!==e?e.height:0,a=void 0!==i?i.height:0;if(r>(a+2|0)){var o=e.key,s=e.value,c=e.left,u=e.right;return te(c)>=te(u)?ie(c,o,s,ie(u,n,t,i)):ie(ie(c,o,s,u.left),u.key,u.value,ie(u.right,n,t,i))}if(a<=(r+2|0))return{key:n,value:t,height:r>=a?r+1|0:a+1|0,left:e,right:i};var p=i.key,l=i.value,f=i.left,d=i.right;return te(d)>=te(f)?ie(ie(e,n,t,f),p,l,d):ie(ie(e,n,t,f.left),f.key,f.value,ie(f.right,p,l,d))}function ce(e){for(;;){var n=e,t=n.left;if(void 0===t)return n.key;e=t}}function ue(e){if(void 0!==e)return q(ce(e))}function pe(e){for(;;){var n=e,t=n.right;if(void 0===t)return n.key;e=t}}function le(e){if(void 0!==e)return q(pe(e))}function fe(e){for(;;){var n=e,t=n.left;if(void 0===t)return[n.key,n.value];e=t}}function de(e){if(void 0!==e)return fe(e)}function me(e){for(;;){var n=e,t=n.right;if(void 0===t)return[n.key,n.value];e=t}}function he(e){if(void 0!==e)return me(e)}function ve(e,n,t){var i=e.left,r=e.right,a=e.key,o=e.value;return void 0!==i?se(ve(i,n,t),a,o,r):(n.contents=a,t.contents=o,r)}function ge(e){return void 0===e}function xe(e,n){for(;;){if(void 0===e)return n;n=[e,n],e=e.left}}function be(e,n){if(void 0!==e){var t=be(e.left,n);if(void 0!==t)return t;var i=e.key,r=e.value;if(n(i,r))return[i,r];var a=be(e.right,n);return void 0!==a?a:void 0}}function ye(e,n){for(;;){var t=e;if(void 0===t)return;ye(t.left,n),n(t.key,t.value),e=t.right}}function we(e,n){if(void 0!==e){var t=we(e.left,n),i=n(e.value),r=we(e.right,n);return{key:e.key,value:i,height:e.height,left:t,right:r}}}function _e(e,n){if(void 0!==e){var t=e.key,i=_e(e.left,n),r=n(t,e.value),a=_e(e.right,n);return{key:t,value:r,height:e.height,left:i,right:a}}}function ke(e,n,t){for(;;){var i=n,r=e;if(void 0===r)return i;var a=r.key,o=r.value,s=r.left,c=r.right;n=t(ke(s,i,t),a,o),e=c}}function $e(e,n){for(;;){var t=e;if(void 0===t)return!0;if(!n(t.key,t.value))return!1;if(!$e(t.left,n))return!1;e=t.right}}function Ee(e,n){for(;;){var t=e;if(void 0===t)return!1;if(n(t.key,t.value))return!0;if(Ee(t.left,n))return!0;e=t.right}}function Se(e,n,t,i){if(void 0===e)return function e(n,t,i){return void 0!==n?se(e(n.left,t,i),n.key,n.value,n.right):re(t,i)}(i,n,t);if(void 0===i)return function e(n,t,i){return void 0!==n?se(n.left,n.key,n.value,e(n.right,t,i)):re(t,i)}(e,n,t);var r=e.key,a=e.value,o=e.height,s=e.left,c=e.right,u=i.key,p=i.value,l=i.height,f=i.left,d=i.right;return o>(l+2|0)?se(s,r,a,Se(c,n,t,i)):l>(o+2|0)?se(Se(e,n,t,f),u,p,d):ie(e,n,t,i)}function Ae(e,n){if(void 0===e)return n;if(void 0===n)return e;var t={contents:n.key},i={contents:n.value},r=ve(n,t,i);return Se(e,t.contents,i.contents,r)}function je(e,n,t,i){return void 0!==t?Se(e,n,T(t),i):Ae(e,i)}function Fe(e,n){if(void 0!==e){var t=e.key,i=e.value,r=Fe(e.left,n),a=n(t,i),o=Fe(e.right,n);return a?Se(r,t,i,o):Ae(r,o)}}function Oe(e,n){if(void 0!==e){var t=e.key,i=e.value,r=Oe(e.left,n),a=n(t,i),o=Oe(e.right,n);return void 0!==a?Se(r,t,T(a),o):Ae(r,o)}}function Ce(e,n){if(void 0===e)return[void 0,void 0];var t=e.key,i=e.value,r=Ce(e.left,n),a=r[1],o=r[0],s=n(t,i),c=Ce(e.right,n),u=c[1],p=c[0];return s?[Se(o,t,i,p),Ae(a,u)]:[Ae(o,p),Se(a,t,i,u)]}function Me(e){var n=e.left,t=e.right;return(1+(void 0!==n?Me(n):0)|0)+(void 0!==t?Me(t):0)|0}function qe(e){return void 0!==e?Me(e):0}function Re(e){return function e(n,t){for(;;){var i=t,r=n;if(void 0===r)return i;var a=r.key,o=r.value,s=r.left;t=[[a,o],e(r.right,i)],n=s}}(e,0)}function Te(e){if(void 0===e)return[];var n=Me(e),t=new Array(n);return function e(n,t,i){for(;;){var r=t,a=n,o=a.left,s=a.key,c=a.right,u=void 0!==o?e(o,r,i):r;i[u]=[s,a.value];var p=u+1|0;if(void 0===c)return p;t=p,n=c}}(e,0,t),t}function ze(e){if(void 0===e)return[];var n=Me(e),t=new Array(n);return function e(n,t,i){for(;;){var r=t,a=n,o=a.key,s=a.left,c=a.right,u=void 0!==s?e(s,r,i):r;i[u]=o;var p=u+1|0;if(void 0===c)return p;t=p,n=c}}(e,0,t),t}function Be(e){if(void 0===e)return[];var n=Me(e),t=new Array(n);return function e(n,t,i){for(;;){var r=t,a=n,o=a.left,s=a.right,c=void 0!==o?e(o,r,i):r;i[c]=a.value;var u=c+1|0;if(void 0===s)return u;t=u,n=s}}(e,0,t),t}function Le(e,n,t){switch(t){case 0:return;case 1:var i=e[n];return re(i[0],i[1]);case 2:var r=e[n],a=e[n-1|0],o=r;return{key:a[0],value:a[1],height:2,left:re(o[0],o[1]),right:void 0};case 3:var s=e[n],c=e[n-1|0],u=e[n-2|0],p=c,l=s;return{key:p[0],value:p[1],height:2,left:re(l[0],l[1]),right:re(u[0],u[1])};default:var f=t/2|0,d=Le(e,n,f),m=e[n-f|0],h=Le(e,(n-f|0)-1|0,(t-f|0)-1|0);return ie(d,m[0],m[1],h)}}function Pe(e,n,t){switch(t){case 0:return;case 1:var i=e[n];return re(i[0],i[1]);case 2:var r=e[n],a=e[n+1|0],o=r;return{key:a[0],value:a[1],height:2,left:re(o[0],o[1]),right:void 0};case 3:var s=e[n],c=e[n+1|0],u=e[n+2|0],p=c,l=s;return{key:p[0],value:p[1],height:2,left:re(l[0],l[1]),right:re(u[0],u[1])};default:var f=t/2|0,d=Pe(e,n,f),m=e[n+f|0],h=Pe(e,1+(n+f|0)|0,(t-f|0)-1|0);return ie(d,m[0],m[1],h)}}function Ie(e,n,t,i){var r=qe(e),a=qe(n);if(r!==a)return r<a?-1:1;for(var o=xe(e,0),s=xe(n,0);;){var c=s,u=o;if(!u)return 0;if(!c)return 0;var p=c[0],l=u[0],f=t(l.key,p.key);if(0!==f)return f;var d=i(l.value,p.value);if(0!==d)return d;s=xe(p.right,c[1]),o=xe(l.right,u[1])}}function De(e,n,t,i){if(qe(e)!==qe(n))return!1;for(var r=xe(e,0),a=xe(n,0);;){var o=a,s=r;if(!s)return!0;if(!o)return!0;var c=o[0],u=s[0];if(0!==t(u.key,c.key)||!i(u.value,c.value))return!1;a=xe(c.right,o[1]),r=xe(u.right,s[1])}}function Ne(e){var n=e.left;e.left=n.right,n.right=e;var t=te(e.left),i=te(e.right);e.height=(t>i?t:i)+1|0;var r=te(n.left),a=e.height;return n.height=(r>a?r:a)+1|0,n}function Ue(e){var n=e.right;e.right=n.left,n.left=e;var t=te(e.left),i=te(e.right);e.height=(t>i?t:i)+1|0;var r=te(n.right),a=e.height;return n.height=(r>a?r:a)+1|0,n}function We(e){var n=te(e.left),t=te(e.right);return e.height=(n>t?n:t)+1|0,e}function He(e){var n,t,i=e.left,r=e.right,a=te(i),o=te(r);if(a>(2+o|0))return ae(i.left,i.right)?We(Ne(e)):We((t=Ue((n=e).left),n.left=t,Ne(n)));if(o>(2+a|0)){var s=r.left;return ae(r.right,s)?We(Ue(e)):We(function(e){var n=Ne(e.right);return e.right=n,Ue(e)}(e))}return e.height=(a>o?a:o)+1|0,e}function Ve(e,n,t,i){if(void 0===e)return re(n,t);var r=i(n,e.key);if(0===r)return e.value=t,e;var a=e.left,o=e.right;if(r<0){var s=Ve(a,n,t,i);e.left=s}else e.right=Ve(o,n,t,i);return He(e)}var Ge=function(e,n){for(var t in e)n(t)};function Ze(e,n){for(;;){var t=n,i=e;if(i===t)return 0;var r=typeof i,a=typeof t;switch(r){case"boolean":if("boolean"===a)return A=t,i?A?0:1:A?-1:0;break;case"function":if("function"===a)throw[d,"compare: functional value"];break;case"number":if("number"===a)return P(i,t);break;case"string":return"string"===a?I(i,t):1;case"undefined":return-1}switch(a){case"string":return-1;case"undefined":return 1;default:if("boolean"===r)return 1;if("boolean"===a)return-1;if("function"===r)return 1;if("function"===a)return-1;if("number"===r)return null===t||256===t.tag?1:-1;if("number"===a)return null===i||256===i.tag?-1:1;if(null===i)return 256===t.tag?1:-1;if(null===t)return 256===i.tag?-1:1;var o=0|i.tag,s=0|t.tag;if(250===o){e=i[0];continue}if(250===s){n=t[0];continue}if(256===o)return 256===s?P(i[1],t[1]):-1;if(248===o)return P(i[1],t[1]);if(251===o)throw[d,"equal: abstract value"];if(o!==s)return o<s?-1:1;var c=0|i.length,u=0|t.length;if(c===u){if(!Array.isArray(i)){if(i instanceof Date&&t instanceof Date)return i-t;var p={contents:void 0},l={contents:void 0},f=function(e,n){var t=e[2],i=e[1];if(!i.hasOwnProperty(n)||Ze(e[0][n],i[n])>0){var r=t.contents;return void 0!==r&&n>=r?void 0:void(t.contents=n)}},m=function(e){return function(n){return f(e,n)}}([i,t,l]),h=function(e){return function(n){return f(e,n)}}([t,i,p]);Ge(i,m),Ge(t,h);var v=p.contents,g=l.contents;return void 0!==v?void 0!==g?I(v,g):-1:void 0!==g?1:0}for(var x=0;;){var b=x;if(b===c)return 0;var y=Ze(i[b],t[b]);if(0!==y)return y;x=b+1|0}}else if(c<u)for(var w=0;;){var _=w;if(_===c)return-1;var k=Ze(i[_],t[_]);if(0!==k)return k;w=_+1|0}else for(var $=0;;){var E=$;if(E===u)return 1;var S=Ze(i[E],t[E]);if(0!==S)return S;$=E+1|0}}}var A}function Ke(e,n){for(;;){var t=n,i=e;if(i===t)return!0;var r=typeof i;if("string"===r||"number"===r||"boolean"===r||"undefined"===r||null===i)return!1;var a=typeof t;if("function"===r||"function"===a)throw[d,"equal: functional value"];if("number"===a||"undefined"===a||null===t)return!1;var o=0|i.tag,s=0|t.tag;if(250!==o)if(250!==s){if(248===o)return i[1]===t[1];if(251===o)throw[d,"equal: abstract value"];if(o!==s)return!1;if(256===o)return i[1]===t[1];var c=0|i.length;if(c!==(0|t.length))return!1;if(!Array.isArray(i)){if(i instanceof Date&&t instanceof Date)return!(i>t||i<t);var u={contents:!0},p=function(e,n){return function(t){e.hasOwnProperty(t)||(n.contents=!1)}}(t,u),l=function(e,n,t){return function(i){e.hasOwnProperty(i)&&Ke(n[i],e[i])||(t.contents=!1)}}(i,t,u);return Ge(i,p),u.contents&&Ge(t,l),u.contents}for(var f=0;;){var m=f;if(m===c)return!0;if(!Ke(i[m],t[m]))return!1;f=m+1|0}}else n=t[0];else e=i[0]}}function Ye(e,n){return function(e,n){return Ze(e,n)<0}(e,n)?939214151:Ke(e,n)?-718572442:159039494}function Xe(e){return{$less$colon$great:e.append}}function Je(e){return{$less$colon$great:e.append}}function Qe(e){return{$less$$great:e.map,$less$hash$great:function(n,t){return E(e.map,t,n)},$less$star$great:e.apply}}function en(e){var n=e.flat_map;return{$less$$great:e.map,$less$hash$great:function(n,t){return E(e.map,t,n)},$less$star$great:e.apply,$great$great$eq:n,$eq$less$less:function(n,t){return E(e.flat_map,t,n)},$great$eq$great:function(e,t,i){return E(n,k(e,i),t)},$less$eq$less:function(n,t,i){var r=k(t,i);return E(e.flat_map,r,n)}}}function nn(e){return{$less$pipe$great:e.alt,$less$$great:e.map,$less$hash$great:function(n,t){return E(e.map,t,n)},$less$star$great:e.apply}}function tn(e){return{$less$dot:e.compose,$great$dot:function(n,t){return E(e.compose,t,n)}}}function rn(e){return{$eq$pipe$eq:e.eq}}function an(e){var n=function(e){return{less_than:function(n,t){return 939214151===E(e.compare,n,t)},greater_than:function(n,t){return 159039494===E(e.compare,n,t)},less_than_or_equal:function(n,t){return 159039494!==E(e.compare,n,t)},greater_than_or_equal:function(n,t){return 939214151!==E(e.compare,n,t)}}}(e);return{$less$pipe$pipe:n.less_than,$pipe$pipe$great:n.greater_than,$less$pipe$eq:n.less_than_or_equal,$great$pipe$eq:n.greater_than_or_equal}}function on(e){return{$pipe$plus$pipe:e.add,$pipe$star$pipe:e.multiply,$pipe$neg$pipe:e.subtract,$pipe$slash$pipe:e.divide,$pipe$percent$pipe:e.modulo}}function sn(e,n,t){return E(e,t,n)}function cn(e,n){return e}function un(e,n,t){return k(e,k(n,t))}var pn={compose:un};var ln=function(e){return e};tn(pn).$great$dot;var fn=tn(pn),dn=ln,mn=fn.$less$dot;function hn(e,n){return[E(mn,e[0],n[0])]}var vn={append:hn,empty:[dn]},gn=(Je({append:hn}),ln),xn=fn.$less$dot;function bn(e){return{$$void:function(n){return E(e.map,(function(e){return cn(void 0)}),n)},void_right:function(n,t){return E(e.map,(function(e){return cn(n)}),t)},void_left:function(n,t){return E(e.map,(function(e){return cn(t)}),n)},flap:function(n,t){return E(e.map,(function(e){return k(e,t)}),n)}}}function yn(e){var n=Qe(e),t=function(e,t){return E(n.$less$star$great,E(n.$less$$great,cn,e),t)},i=function(e,t){return E(n.$less$star$great,E(n.$less$$great,(function(e){return cn(gn)}),e),t)};return{I:n,apply_first:t,apply_second:i,apply_both:function(e,t){return E(n.$less$star$great,E(n.$less$$great,(function(e,n){return[e,n]}),e),t)},lift2:function(e,t,i){return E(n.$less$star$great,E(n.$less$$great,e,t),i)},lift3:function(e,t,i,r){return E(n.$less$star$great,E(n.$less$star$great,E(n.$less$$great,e,t),i),r)},lift4:function(e,t,i,r,a){return E(n.$less$star$great,E(n.$less$star$great,E(n.$less$star$great,E(n.$less$$great,e,t),i),r),a)},lift5:function(e,t,i,r,a,o){return E(n.$less$star$great,E(n.$less$star$great,E(n.$less$star$great,E(n.$less$star$great,E(n.$less$$great,e,t),i),r),a),o)},Infix:{$less$star:t,$star$great:i}}}function wn(e){var n=en(e),t=Qe(e),i=function(n,t){return n?t:k(e.pure,void 0)},r=function(n,t){return n?k(e.pure,void 0):t};return{I:n,A:{I:t,liftA1:function(n,i){return E(t.$less$star$great,k(e.pure,n),i)},when_:i,unless:r},flatten:function(e){return E(n.$great$great$eq,e,gn)},compose_kliesli:function(e,t,i){return E(n.$great$great$eq,k(e,i),t)},compose_kliesli_flipped:function(e,t,i){return E(n.$eq$less$less,e,k(t,i))},if_m:function(e,t,i){return E(n.$great$great$eq,e,(function(e){return e?t:i}))},liftM1:function(t,i){return E(n.$great$great$eq,i,(function(n){return k(e.pure,k(t,n))}))},ap:function(t,i){return E(n.$great$great$eq,t,(function(t){return E(n.$great$great$eq,i,(function(n){return k(e.pure,k(t,n))}))}))},when_:function(e,t){return E(n.$great$great$eq,e,(function(e){return i(e,t)}))},unless:function(e,t){return E(n.$great$great$eq,e,(function(e){return r(e,t)}))}}}function _n(e){return{Semigroup:function(n){var t=k(e.Fold_Map_Any,vn),i=Xe(n),r=function(e,n,r){var a=E(t.fold_map,(function(t){return[function(r){return E(i.$less$colon$great,E(i.$less$colon$great,e,k(n,t)),r)}]}),r);return k(a[0],e)};return{FM:t,I:i,surround_map:r,surround:function(e,n){return r(e,gn,n)}}},Monoid:function(n){var t=k(e.Fold_Map,n),i=Xe(n),r=k(t.fold_map,gn);return{FM:t,I:i,fold:r,intercalate:function(t,r){return A(e.fold_left,(function(e,n){return e.init?{init:!1,acc:n}:{init:!1,acc:E(i.$less$colon$great,E(i.$less$colon$great,e.acc,t),n)}}),{init:!0,acc:n.empty},r).acc}}},Applicative:function(n){var t=Qe(n),i=function(e,n){return E(t.$less$star$great,E(t.$less$$great,cn,e),n)},r=function(e,n){return E(t.$less$star$great,E(t.$less$$great,(function(e){return cn(gn)}),e),n)},a=function(t,i){return A(e.fold_right,E(xn,r,t),k(n.pure,void 0),i)};return{Fn:{I:t,apply_first:i,apply_second:r,apply_both:function(e,n){return E(t.$less$star$great,E(t.$less$$great,(function(e,n){return[e,n]}),e),n)},lift2:function(e,n,i){return E(t.$less$star$great,E(t.$less$$great,e,n),i)},lift3:function(e,n,i,r){return E(t.$less$star$great,E(t.$less$star$great,E(t.$less$$great,e,n),i),r)},lift4:function(e,n,i,r,a){return E(t.$less$star$great,E(t.$less$star$great,E(t.$less$star$great,E(t.$less$$great,e,n),i),r),a)},lift5:function(e,n,i,r,a,o){return E(t.$less$star$great,E(t.$less$star$great,E(t.$less$star$great,E(t.$less$star$great,E(t.$less$$great,e,n),i),r),a),o)},Infix:{$less$star:i,$star$great:r}},traverse$prime:a,sequence$prime:function(e){return a(gn,e)}}},Plus:function(n){return{one_of:function(t){return A(e.fold_right,n.alt,n.empty,t)}}},Monad:function(n){var t=en(n);return{I:t,fold_monad:function(i,r,a){return A(e.fold_left,(function(e,n){return E(t.$great$great$eq,e,(function(e){return sn(i,n,e)}))}),k(n.pure,r),a)}}}}}function kn(e){var n=yn(e),t=n.lift2,i=n.lift3,r=n.lift4,a=n.lift5;return{BsApplyExtensions:n,applyFirst:n.apply_first,applySecond:n.apply_second,map2:t,map3:i,map4:r,map5:a,tuple2:n.apply_both,tuple3:function(e,n,t){return F(i,(function(e,n,t){return[e,n,t]}),e,n,t)},tuple4:function(e,n,t,i){return O(r,(function(e,n,t,i){return[e,n,t,i]}),e,n,t,i)},tuple5:function(e,n,t,i,r){return C(a,(function(e,n,t,i,r){return[e,n,t,i,r]}),e,n,t,i,r)},mapTuple2:function(e,n){return A(t,e,n[0],n[1])},mapTuple3:function(e,n){return F(i,e,n[0],n[1],n[2])},mapTuple4:function(e,n){return O(r,e,n[0],n[1],n[2],n[3])},mapTuple5:function(e,n){return C(a,e,n[0],n[1],n[2],n[3],n[4])}}}function $n(e){var n=yn(e),t=n.apply_first,i=n.apply_second,r=n.lift2,a=n.lift3,o=n.lift4,s=n.lift5,c=n.apply_both;return{ApplyExtensions:{BsApplyExtensions:n,applyFirst:t,applySecond:i,map2:r,map3:a,map4:o,map5:s,tuple2:c,tuple3:function(e,n,t){return F(a,(function(e,n,t){return[e,n,t]}),e,n,t)},tuple4:function(e,n,t,i){return O(o,(function(e,n,t,i){return[e,n,t,i]}),e,n,t,i)},tuple5:function(e,n,t,i,r){return C(s,(function(e,n,t,i,r){return[e,n,t,i,r]}),e,n,t,i,r)},mapTuple2:function(e,n){return A(r,e,n[0],n[1])},mapTuple3:function(e,n){return F(a,e,n[0],n[1],n[2])},mapTuple4:function(e,n){return O(o,e,n[0],n[1],n[2],n[3])},mapTuple5:function(e,n){return C(s,e,n[0],n[1],n[2],n[3],n[4])}},$less$star$great:e.apply,$less$star:t,$star$great:i}}function En(e){var n=wn(e);return{BsMonadExtensions:n,flatMap:function(n,t){return E(e.flat_map,t,n)},flatten:function(n){return E(e.flat_map,n,(function(e){return e}))},composeKleisli:n.compose_kliesli,flipComposeKleisli:n.compose_kliesli_flipped,liftM1:n.liftM1,when_:n.when_,unless:n.unless}}function Sn(e){var n=wn(e),t=function(n,t){return E(e.flat_map,t,n)},i=n.compose_kliesli,r=n.compose_kliesli_flipped;return{MonadExtensions:{BsMonadExtensions:n,flatMap:t,flatten:function(n){return E(e.flat_map,n,(function(e){return e}))},composeKleisli:i,flipComposeKleisli:r,liftM1:n.liftM1,when_:n.when_,unless:n.unless},$great$great$eq:e.flat_map,$eq$less$less:t,$great$eq$great:i,$less$eq$less:r}}function An(e){var n=bn(e);return{BsFunctorExtensions:n,flipMap:function(n,t){return E(e.map,t,n)},$$void:n.$$void,voidRight:n.void_right,voidLeft:n.void_left,flap:n.flap}}function jn(e){var n=bn(e),t=function(n,t){return E(e.map,t,n)},i=n.void_right,r=n.void_left,a=n.flap;return{FunctorExtensions:{BsFunctorExtensions:n,flipMap:t,$$void:n.$$void,voidRight:i,voidLeft:r,flap:a},$less$$great:e.map,$less$hash$great:t,$less$:i,$$great:r,$less$at$great:a}}function Fn(e){var n=function(e){var n=Qe(e);return{I:n,liftA1:function(t,i){return E(n.$less$star$great,k(e.pure,t),i)},when_:function(n,t){return n?t:k(e.pure,void 0)},unless:function(n,t){return n?k(e.pure,void 0):t}}}(e),t=function(n){return n?E(e.apply,E(e.map,(function(e,n){return[e,n]}),n[0]),t(n[1])):k(e.pure,0)};return{BsApplicativeExtensions:n,liftA1:n.liftA1,when_:n.when_,unless:n.unless,all:t}}function On(e,n,t){return k(e,k(n,t))}function Cn(e,n,t){return k(n,k(e,t))}var Mn={$less$less:On,$great$great:Cn};function qn(e,n){for(;;){var t=n,i=e;if(!i)return t;var r=[i[0],0];t[1]=r,n=r,e=i[1]}}function Rn(e,n){if(!(n<0)){if(0===n)return[0,e];if(e){var t=[e[0],0],i=function(e,n,t){for(;;){var i=t,r=n,a=e;if(0===a)return r;if(!r)return;var o=[r[0],0];i[1]=o,t=o,n=r[1],e=a-1|0}}(n-1|0,e[1],t);return void 0!==i?[t,i]:void 0}}}function Tn(e,n){if(!e)return n;var t=[e[0],0];return qn(e[1],t)[1]=n,t}function zn(e,n){return function(e,n){if(!e)return 0;var t=[n(e[0]),0];return function(e,n,t){for(;;){var i=n,r=e;if(!r)return;var a=[t(r[0]),0];i[1]=a,n=a,e=r[1]}}(e[1],t,n),t}(e,$(n))}function Bn(e){for(var n=e,t=0;;){if(!n)return t;t=t+1|0,n=n[1]}}function Ln(e){for(var n=e.length-1|0,t=0;;){var i=t,r=n;if(r<0)return i;t=[e[r],i],n=r-1|0}}function Pn(e){var n=Bn(e),t=new Array(n);return function(e,n,t){for(;;){var i=t,r=n;if(!i)return;e[r]=i[0],t=i[1],n=r+1|0}}(t,0,e),t}function In(e){return function(e,n){for(;;){var t=n,i=e;if(!i)return t;n=[i[0],t],e=i[1]}}(e,0)}function Dn(e,n,t){return function(e,n,t){for(;;){var i=e;if(!i)return n;n=t(n,i[0]),e=i[1]}}(e,n,S(t))}function Nn(e,n){return function(e,n){var t=Pn(e);return ee(t,n),Ln(t)}(e,S(n))}function Un(e,n){return function(e,n){if(void 0!==e)return q(n(T(e)))}(e,$(n))}function Wn(e){var n=e.length;return 0===n?[]:x(e,0,n)}function Hn(e){if(!e)return[];for(var n=w(function(e,n){for(;;){var t=e;if(!n)return t;n=n[1],e=t+1|0}}(0,e),e[0]),t=1,i=e[1];;){var r=i,a=t;if(!r)return n;n[a]=r[0],i=r[1],t=a+1|0}}function Vn(e,n,t){for(var i=t,r=n.length-1|0;r>=0;--r)i=E(e,n[r],i);return i}L("Array.Bottom");var Gn=function(e,n){var t=e.length;return 0===t?Wn(n):0===n.length?x(e,0,t):e.concat(n)},Zn=function(e,n,t){if(n<0||t<0||n>(e.length-t|0))throw[d,"Array.sub"];return x(e,n,t)},Kn=function(e,n){var t=n.length;if(0===t)return[];for(var i=w(t,k(e,n[0])),r=1;r<t;++r)i[r]=k(e,n[r]);return i},Yn=function(e,n){var t=n.length;if(0===t)return[];for(var i=w(t,E(e,0,n[0])),r=1;r<t;++r)i[r]=E(e,r,n[r]);return i},Xn=function(e,n,t){for(var i=n,r=0,a=t.length;r<a;++r)i=E(e,i,t[r]);return i},Jn=Vn,Qn=function(e,n){for(var t=n.length,i=0;;){var r=i;if(r===t)return!0;if(!k(e,n[r]))return!1;i=r+1|0}};function et(e,n){return e+n}var nt={append:et,empty:""},tt={eq:Ke},it={eq:Ke,compare:Ye},rt=Xe({append:et}),at=rn(tt),ot=an(it);rt.$less$colon$great,at.$eq$pipe$eq,ot.$less$pipe$pipe,ot.$pipe$pipe$great,ot.$less$pipe$eq,ot.$great$pipe$eq;function st(e,n){return[k(e,n[0])]}function ct(e,n){return[k(e[0],n[0])]}function ut(e){return[e]}en({map:st,apply:ct,pure:ut,flat_map:function(e,n){return k(n,e[0])}}),fn.$less$dot;function pt(e,n){var t=Xe(e);return{I:t,fold_map_default_left:function(i,r){return A(n.fold_left,(function(e,n){return E(t.$less$colon$great,e,k(i,n))}),e.empty,r)},fold_map_default_right:function(i,r){return A(n.fold_right,(function(e,n){return E(t.$less$colon$great,k(i,e),n)}),e.empty,r)}}}function lt(e,n){var t=Je(e);return{I:t,fold_map_default_left:function(i,r){return A(n.fold_left,(function(e,n){return E(t.$less$colon$great,e,k(i,n))}),e.empty,r)},fold_map_default_right:function(i,r){return A(n.fold_right,(function(e,n){return E(t.$less$colon$great,k(i,e),n)}),e.empty,r)}}}function ft(e,n){var t,i={$less$$great:(t=e).map,$less$hash$great:function(e,n){return E(t.map,n,e)},$less$pipe$great:t.alt};return{I:i,fold_map_default_left:function(t,r){return A(n.fold_left,(function(e,n){return E(i.$less$pipe$great,e,k(t,n))}),e.empty,r)},fold_map_default_right:function(t,r){return A(n.fold_right,(function(e,n){return E(i.$less$pipe$great,k(t,e),n)}),e.empty,r)}}}function dt(e){return{sequence_default:function(n){return E(e.traverse,ln,n)}}}var mt,ht,vt,gt,xt,bt,yt,wt,_t,kt,$t,Et,St,At,jt,Ft,Ot,Ct,Mt,qt,Rt,Tt,zt,Bt,Lt,Pt,It,Dt,Nt,Ut,Wt,Ht,Vt=(vt=function(e,n,t){for(var i,r=k(mt.length,n)<k(mt.length,t)?k(mt.length,n):k(mt.length,t),a=0,o=0;o<r;++o){var s=E(e,y(n,o),y(t,o));void 0!==i?b(i,a,s):i=E(mt.make,r,s),a=a+1|0}return void 0!==i?i:[]},gt=function(e,n){return vt((function(e,n){return[e,n]}),e,n)},xt=(mt={length:function(e){return e.length},make:w,append:Gn,map:Kn,mapi:function(e,n){return Yn((function(n,t){return E(e,t,n)}),n)},fold_left:Xn,every:Qn,slice:function(e,n,t){return Zn(t,e,n-e|0)}}).map,bt={map:xt},yt=mt.append,wt={map:xt,alt:yt},kt={map:xt,apply:_t=function(e,n){return A(mt.fold_left,(function(e,t){return E(yt,e,E(xt,t,n))}),[],e)}},Et={map:xt,apply:_t,pure:$t=function(e){return[e]}},St={map:xt,apply:_t,pure:$t,flat_map:function(e,n){return A(mt.fold_left,(function(e,t){return E(yt,e,k(n,t))}),[],e)}},At=mt.fold_left,Mt={fold_left:At,fold_right:jt=function(e,n){return function(t){return Jn(e,t,n)}},Fold_Map:Ft=function(e){return{fold_map:pt(e,{fold_left:At,fold_right:jt}).fold_map_default_left}},Fold_Map_Any:Ot=function(e){return{fold_map:lt(e,{fold_left:At,fold_right:jt}).fold_map_default_left}},Fold_Map_Plus:Ct=function(e){return{fold_map:ft(e,{fold_left:At,fold_right:jt}).fold_map_default_left}}},Rt={unfold:qt=function(e,n){var t=k(e,n);return void 0!==t?E(yt,[t[0]],qt(e,t[1])):[]}},Tt={imap:function(e,n){return k(xt,e)}},zt={map:xt,extend:function(e,n){return E(mt.mapi,(function(t,i){return k(e,A(mt.slice,i,k(mt.length,n),n))}),n)}},Bt=en(St),Lt={$less$less$eq:(ht=zt).extend,$eq$great$great:function(e,n){return E(ht.extend,n,e)}},Pt=Bt.$less$$great,It=Bt.$less$hash$great,Dt=Bt.$less$star$great,Nt=Bt.$great$great$eq,Ut=Bt.$eq$less$less,Wt=Bt.$great$eq$great,Ht=Bt.$less$eq$less,{zip_with:vt,zip:gt,Functor:bt,Alt:wt,Apply:kt,Applicative:Et,Monad:St,Foldable:Mt,Unfoldable:Rt,Traversable:function(e){var n=Qe(e),t=function(t){var i=k(e.pure,[]);return function(r){return Jn((function(i,r){return E(n.$less$star$great,E(n.$less$star$great,k(e.pure,(function(e,n){return E(yt,[e],n)})),k(t,i)),r)}),r,i)}},i=dt({traverse:t});return{map:xt,fold_left:At,fold_right:jt,Fold_Map:Ft,Fold_Map_Any:Ot,Fold_Map_Plus:Ct,traverse:t,sequence:i.sequence_default}},Eq:function(e){return{eq:function(n,t){return k(mt.length,n)===k(mt.length,t)&&E(mt.every,(function(n){return E(e.eq,n[0],n[1])}),gt(n,t))}}},Ord:function(e){return{eq:function(n,t){return k(mt.length,n)===k(mt.length,t)&&E(mt.every,(function(n){return E(e.eq,n[0],n[1])}),gt(n,t))},compare:function(n,t){if(k(mt.length,n)!==k(mt.length,t))return k(mt.length,n)<k(mt.length,t)?939214151:159039494;var i={contents:0};return A(mt.fold_left,(function(n,r){var a=-718572442!==n?n:E(e.compare,r,y(t,i.contents));return i.contents=i.contents+1|0,a}),-718572442,n)}}},Show:function(e){var n=k(_n(Mt).Monoid,nt);return{show:function(t){return"["+E(n.intercalate,", ",E(xt,e.show,t))+"]"}}},Invariant:Tt,Extend:zt,Infix:{$less$$great:Pt,$less$hash$great:It,$less$star$great:Dt,$great$great$eq:Nt,$eq$less$less:Ut,$great$eq$great:Wt,$less$eq$less:Ht,$less$less$eq:Lt.$less$less$eq,$eq$great$great:Lt.$eq$great$great}}),Gt=Vt.Functor,Zt=Vt.Alt,Kt=Vt.Apply,Yt=Vt.Monad,Xt=Vt.Foldable,Jt=Vt.Traversable,Qt=Vt.Invariant,ei=Vt.Extend;function ni(e,n,t,i){return E(n,k(e,t),k(e,i))}function ti(e,n,t){return!E(e,n,t)}function ii(e){var n=function(n,t){return ti(e.eq,n,t)};return{eqWithConversion:function(n){return function(t,i){return ni(n,e.eq,t,i)}},notEq:n,eqInverted:n,EqInverted:{eq:n},EqBy:function(n){return{eq:function(t,i){return E(e.eq,k(n.f,t),k(n.f,i))}}}}}function ri(e,n,t,i){return E(n,k(e,t),k(e,i))}function ai(e,n,t){var i=E(e,n,t);return 159039494!==i?i>=939214151?159039494:-718572442:939214151}function oi(e,n,t){var i=E(e,n,t);return 159039494!==i?i>=939214151?-1:0:1}function si(e,n,t){return 159039494!==E(e,n,t)?n:t}function ci(e,n,t){return E(e,n,t)>=939214151?t:n}function ui(e,n,t){return 939214151===E(e,n,t)}function pi(e,n,t){return 159039494!==E(e,n,t)}function li(e,n,t){return 159039494===E(e,n,t)}function fi(e,n,t){return 939214151!==E(e,n,t)}function di(e,n,t){return fi(e.compare,n,t)}function mi(e,n,t,i){return si(e,t,ci(e,n,i))}function hi(e,n,t,i){return!!fi(e,i,n)&&pi(e,i,t)}function vi(e,n,t){return di(e,t,n.zero)?t:E(n.subtract,n.zero,t)}function gi(e,n,t){return di(e,t,n.zero)?n.one:E(n.subtract,n.zero,n.one)}function xi(e){var n=function(n,t){return ai(e.compare,n,t)},t=function(n,t){return ui(e.compare,n,t)},i=function(n,t){return pi(e.compare,n,t)},r=function(n,t){return li(e.compare,n,t)},a=function(n,t){return fi(e.compare,n,t)},o=function(n,t){return ui(e.compare,t,n)},s=function(n,t){return pi(e.compare,t,n)},c=function(n,t){return li(e.compare,t,n)},u=function(n,t){return fi(e.compare,t,n)};return{compareWithConversion:function(n){return function(t,i){return ri(n,e.compare,t,i)}},compareReversed:n,OrdReversed:{eq:e.eq,compare:n},compareAsInt:function(n,t){return oi(e.compare,n,t)},min:function(n,t){return si(e.compare,n,t)},max:function(n,t){return ci(e.compare,n,t)},lessThan:t,lt:t,lessThanOrEq:i,lte:i,greaterThan:r,gt:r,greaterThanOrEq:a,gte:a,clamp:function(n,t,i){return mi(e.compare,n,t,i)},between:function(n,t,i){return hi(e.compare,n,t,i)},OrdRingExtensions:function(n){return{abs:function(t){return vi(e,n,t)},signum:function(t){return gi(e,n,t)}}},OrdNamed:{lessThan:o,lessThanOrEq:s,greaterThan:c,greaterThanOrEq:u,lt:o,lte:s,gt:c,gte:u},OrdBy:function(n){return{eq:k(ii(e).EqBy,n).eq,compare:function(t,i){return E(e.compare,k(n.f,t),k(n.f,i))}}}}}function bi(e){if(e<0)throw[d,"String.create"];for(var n=new Array(e),t=0;t<e;++t)n[t]=0;return n}function yi(e,n,t,i,r){if(!(r<=0))if(e!==t){var a=e.length-n|0;if(r<=a)for(var o=0;o<r;++o)t[i+o|0]=e[n+o|0];else{for(var s=0;s<a;++s)t[i+s|0]=e[n+s|0];for(var c=a;c<r;++c)t[i+c|0]=0}}else{if(n<i){for(var u=(e.length-i|0)-1|0,p=r-1|0,l=u>p?p:u;l>=0;--l)e[i+l|0]=e[n+l|0];return}if(n<=i)return;for(var f=(e.length-n|0)-1|0,d=r-1|0,m=f>d?d:f,h=0;h<=m;++h)e[i+h|0]=e[n+h|0]}}function wi(e){var n=e.length,t="",i=n;if(n<=4096&&n===e.length)return String.fromCharCode.apply(null,e);for(var r=0;i>0;){var a=i<1024?i:1024,o=new Array(a);yi(e,r,o,0,a),t+=String.fromCharCode.apply(null,o),i=i-a|0,r=r+a|0}return t}function _i(e){for(var n=e.length,t=new Array(n),i=0;i<n;++i)t[i]=e.charCodeAt(i);return t}function ki(e,n){if(0===n)throw h;return e/n|0}function $i(e,n){if(0===n)throw h;return e%n}var Ei=Math.imul||function(e,n){return((e>>16)*(n|=0)<<16)+(65535&e)*n|0};function Si(e){return e>=65?e>=97?e>=123?-1:e-87|0:e>=91?-1:e-55|0:e>57||e<48?-1:e-48|0}function Ai(e){switch(e){case 0:return 8;case 1:return 16;case 2:return 10;case 3:return 2}}function ji(e){var n=1,t=2,i=0;switch(e.charCodeAt(i)){case 43:i=i+1|0;break;case 44:break;case 45:n=-1,i=i+1|0}if("0"===e[i]){var r=e.charCodeAt(i+1|0);if(r>=89)if(r>=111){if(r<121)switch(r-111|0){case 0:t=0,i=i+2|0;break;case 6:i=i+2|0;break;case 1:case 2:case 3:case 4:case 5:case 7:case 8:break;case 9:t=1,i=i+2|0}}else 98===r&&(t=3,i=i+2|0);else if(66!==r){if(r>=79)switch(r-79|0){case 0:t=0,i=i+2|0;break;case 6:i=i+2|0;break;case 1:case 2:case 3:case 4:case 5:case 7:case 8:break;case 9:t=1,i=i+2|0}}else t=3,i=i+2|0}return[i,n,t]}function Fi(e){var n=ji(e),t=n[0],i=Ai(n[2]),r=e.length,a=Si(t<r?e.charCodeAt(t):0);if(a<0||a>=i)throw[f,"int_of_string"];var o=n[1]*function(n,t){for(;;){var a=t,o=n;if(a===r)return o;var s=e.charCodeAt(a);if(95!==s){var c=Si(s);if(c<0||c>=i)throw[f,"int_of_string"];var u=i*o+c;if(u>4294967295)throw[f,"int_of_string"];t=a+1|0,n=u}else t=a+1|0}}(a,t+1|0),s=0|o;if(10===i&&o!==s)throw[f,"int_of_string"];return s}L("Pervasives.Exit");function Oi(e,n){return e?[e[0],Oi(e[1],n)]:n}function Ci(e){return e?Oi(e[0],Ci(e[1])):0}function Mi(e,n){return n?[k(e,n[0]),Mi(e,n[1])]:0}function qi(e,n,t){for(;;){var i=t,r=n;if(!i)return r;t=i[1],n=E(e,r,i[0])}}var Ri=Oi,Ti=Ci;function zi(e,n){return Ti([n,[[e,0],0]])}function Bi(e){return{fromToAsList:function(n,t){for(var i=0,r=n;;){var a=r,o=i,s=E(e.compare,a,t);if(159039494===s){var c=k(e.pred,a);if(void 0===c)return zi(a,o);r=T(c),i=zi(a,o)}else{if(s<939214151)return zi(a,o);var u=k(e.succ,a);if(void 0===u)return zi(a,o);r=T(u),i=zi(a,o)}}},upFromAsList:function(n){var t=k(e.succ,n);if(void 0===t)return 0;for(var i=0,r=T(t);;){var a=r,o=i,s=k(e.succ,a);if(void 0===s)return zi(a,o);r=T(s),i=zi(a,o)}},upFromIncludingAsList:function(n){for(var t=0,i=n;;){var r=i,a=t,o=k(e.succ,r);if(void 0===o)return zi(r,a);i=T(o),t=zi(r,a)}},downFromAsList:function(n){var t=k(e.pred,n);if(void 0===t)return 0;for(var i=0,r=T(t);;){var a=r,o=i,s=k(e.pred,a);if(void 0===s)return zi(a,o);r=T(s),i=zi(a,o)}},downFromIncludingAsList:function(n){for(var t=0,i=n;;){var r=i,a=t,o=k(e.pred,r);if(void 0===o)return zi(r,a);i=T(o),t=zi(r,a)}}}}function Li(e,n){return Ti([n,[[e,0],0]])}function Pi(e){return e<0?939214151:0===e?-718572442:159039494}function Ii(e){return 159039494!==e?e>=939214151?-1:0:1}function Di(e,n){return e===n}var Ni=ii({eq:Di});function Ui(e,n){return 159039494!==e?e>=939214151?n>=939214151?-718572442:939214151:159039494!==n?n>=939214151?159039494:-718572442:939214151:159039494!==n?159039494:-718572442}var Wi=xi({eq:Di,compare:Ui});function Hi(e){return 159039494!==e?e>=939214151?void 0:939214151:-718572442}function Vi(e){if(159039494!==e)return e>=939214151?-718572442:159039494}var Gi=Bi({eq:Di,compare:Ui,succ:Vi,pred:Hi});var Zi=function(e){return{fromThenToAsList:function(n,t,i){for(var r=k(e.fromEnum,n),a=k(e.fromEnum,t)-r|0,o=0,s=n,c=r;;){var u=c,p=s,l=o;if(E(e.compare,p,i)<159039494)return Li(p,l);var f=u+a|0,d=k(e.toEnum,f);if(void 0===d)return Li(p,l);c=f,s=T(d),o=Li(p,l)}}}}({top:159039494,bottom:939214151,eq:Di,compare:Ui,succ:Vi,pred:Hi,cardinality:3,fromEnum:Ii,toEnum:function(e){return Pi(e)}});Ni.eqWithConversion,Ni.notEq,Ni.eqInverted,Ni.EqInverted,Ni.EqBy,Wi.compareWithConversion,Wi.compareReversed,Wi.OrdReversed,Wi.compareAsInt,Wi.min,Wi.max,Wi.lessThan,Wi.lt,Wi.lessThanOrEq,Wi.lte,Wi.greaterThan,Wi.gt,Wi.greaterThanOrEq,Wi.gte,Wi.clamp,Wi.between,Wi.OrdRingExtensions,Wi.OrdNamed,Wi.OrdBy,Gi.fromToAsList,Gi.upFromAsList,Gi.upFromIncludingAsList,Gi.downFromAsList,Gi.downFromIncludingAsList,Zi.fromThenToAsList,fn.$less$dot;function Ki(e,n,t){return void 0!==t?k(e,T(t)):n}function Yi(e,n){if(void 0!==n)return q(k(e,T(n)))}function Xi(e,n){if(void 0!==e)return Yi(e,n)}var Ji=Xi;function Qi(e){return q(e)}function er(e,n){return void 0!==e?q(T(e)):n}var nr={map:Yi,alt:er},tr={apply:Xi,pure:Qi,map:Yi,alt:er,empty:void 0};function ir(e,n,t){return Ki(k(e,n),n,t)}function rr(e,n,t){return Ki((function(t){return E(e,t,n)}),n,t)}function ar(e){return{fold_map:function(n,t){return Ki(n,e.empty,t)}}}function or(e){return{fold_map:function(n,t){return Ki(n,e.empty,t)}}}function sr(e){return{fold_map:function(n,t){return Ki(n,e.empty,t)}}}var cr={fold_left:ir,fold_right:rr,Fold_Map:ar,Fold_Map_Any:or,Fold_Map_Plus:sr};var ur=en({map:Yi,apply:Xi,pure:Qi,flat_map:function(e,n){if(void 0!==e)return k(n,T(e))}}),pr=nn(tr);ur.$great$great$eq,ur.$eq$less$less,ur.$great$eq$great,ur.$less$eq$less,pr.$less$pipe$great,pr.$less$$great,pr.$less$hash$great,pr.$less$star$great;function lr(e){return{orElse:function(n,t){return E(e.alt,t,n)}}}function fr(e){return{$less$pipe$great:e.alt}}function dr(e){var n=function(e){var n=Xe(e);return{I:n,power:function(t,i){var r=function(i){if(i<=0)return e.empty;if(1===i)return t;if(i%2==0){var a=r(i/2|0);return E(n.$less$colon$great,a,a)}var o=r(i/2|0);return E(n.$less$colon$great,E(n.$less$colon$great,o,o),t)};return r(i)},guard:function(n,t){return n?t:e.empty}}}(e);return{BsMonoidExtensions:n,guard:n.guard,power:n.power}}function mr(e,n){return void 0!==e?e:n}function hr(e){var n=_n(e),t=function(n,t){return A(e.fold_left,(function(e,t){return!!e||k(n,t)}),!1,t)},i=function(n,t,i){return A(e.fold_left,(function(e,i){var r=e[0];return[r+1|0,mr(e[1],E(n,t,i)?r:void 0)]}),[0,void 0],i)[1]},r=function(n,t){return A(e.fold_left,(function(e,t){return q(void 0!==e?si(n,t,T(e)):t)}),void 0,t)},a=function(n,t){return A(e.fold_left,(function(e,t){if(void 0===e)return q(t);var i=T(e);return 159039494===E(n,t,i)?q(t):q(i)}),void 0,t)},o=function(n,t){return A(e.fold_left,(function(e,t){return k(n,t)?e+1|0:e}),0,t)},s=function(e){return o((function(e){return!0}),e)};return{BsFoldableExtensions:n,any:t,all:function(n,t){return A(e.fold_left,(function(e,t){return!!e&&k(n,t)}),!0,t)},containsBy:function(e,n,i){return t(k(e,n),i)},contains:function(e,n,i){return t(k(e.eq,n),i)},indexOfBy:i,indexOf:function(e,n,t){return i(e.eq,n,t)},minBy:r,min:function(e,n){return r(e.compare,n)},maxBy:a,max:function(e,n){return a(e.compare,n)},countBy:o,length:s,size:s,count:s,forEach:function(n,t){return A(e.fold_left,(function(e,t){return k(n,t)}),void 0,t)},forEachWithIndex:function(n,t){A(e.fold_left,(function(e,t){return E(n,t,e),e+1|0}),0,t)},find:function(n){return E(e.fold_left,(function(e,t){return mr(e,k(n,t)?q(t):void 0)}),void 0)},findWithIndex:function(n,t){return A(e.fold_left,(function(e,t){var i=e[0];return[i+1|0,mr(e[1],E(n,t,i)?q(t):void 0)]}),[0,void 0],t)[1]},toList:function(n){return A(e.fold_right,(function(e,n){return[e,n]}),0,n)},toArray:function(n){return A(e.fold_left,(function(e,n){return G(e,[n])}),[],n)},FoldableSemigroupExtensions:function(e){var t=k(n.Semigroup,e);return{BsFoldableSemigroupExtensions:t,surroundMap:t.surround_map,surround:t.surround}},FoldableMonoidExtensions:function(t){var i=k(n.Monoid,t);return{BsFoldableMonoidExtensions:i,foldMap:i.FM.fold_map,foldWithMonoid:i.fold,intercalate:function(n,i){return A(e.fold_left,(function(e,i){return e[0]?[!1,i]:[!1,E(t.append,e[1],E(t.append,n,i))]}),[!0,t.empty],i)[1]}}},foldMap:function(e,t,i){return E(k(n.Monoid,e).FM.fold_map,t,i)},foldWithMonoid:function(e,t){var i=k(n.Monoid,e);return k(i.fold,t)},intercalate:function(t,i,r){return k(n.Monoid,t),A(e.fold_left,(function(e,n){return e[0]?[!1,n]:[!1,E(t.append,e[1],E(t.append,i,n))]}),[!0,t.empty],r)[1]},FoldableApplicativeExtensions:function(e){var t=k(n.Applicative,e);return{BsFoldableApplicativeExtensions:t,traverse_:t.traverse$prime,sequence_:t.sequence$prime}},FoldableMonadExtensions:function(e){var t=k(n.Monad,e);return{BsFoldableMonadExtensions:t,foldWithMonad:t.fold_monad}},FoldableEqExtensions:function(e){return{contains:function(n,i){return t(k(e.eq,n),i)},indexOf:function(n,t){return i(e.eq,n,t)}}},FoldableOrdExtensions:function(e){return{min:function(n){return r(e.compare,n)},max:function(n){return a(e.compare,n)}}}}}function vr(e){return{concatNamed:function(n,t){return E(e.append,n,t)}}}function gr(e){return{andThen:function(n,t){return E(e.compose,t,n)}}}function xr(e){var n=function(n,t){return E(e.compose,t,n)};return{SE:{andThen:n},$less$less$less:e.compose,$great$great$great:n}}function br(e,n){if(void 0!==n&&void 0!==e)return function(t){return Mn.$great$great(n,e,t)}}var yr={compose:br},wr=gr(yr);function _r(e,n){if(void 0!==n)return q(k(e,T(n)))}var kr={map:_r},$r=An(kr),Er=Ji,Sr={map:_r,apply:Er},Ar=kn(Sr);function jr(e){return q(e)}var Fr={map:_r,apply:Er,pure:jr},Or=Fn(Fr);function Cr(e,n){if(void 0!==e)return k(n,T(e))}var Mr={map:_r,apply:Er,pure:jr,flat_map:Cr},qr=En(Mr);function Rr(e,n){return function(t){return cr.fold_left(e,n,t)}}var Tr=hr(cr);var zr=lr(nr);function Br(e,n,t){return void 0!==n?void 0!==t&&E(e,T(n),T(t)):void 0===t}wr.andThen,$r.BsFunctorExtensions,$r.flipMap,$r.$$void,$r.voidRight,$r.voidLeft,$r.flap,Ar.BsApplyExtensions,Ar.applyFirst,Ar.applySecond,Ar.map2,Ar.map3,Ar.map4,Ar.map5,Ar.tuple2,Ar.tuple3,Ar.tuple4,Ar.tuple5,Ar.mapTuple2,Ar.mapTuple3,Ar.mapTuple4,Ar.mapTuple5,Or.BsApplicativeExtensions,Or.liftA1,qr.BsMonadExtensions;var Lr=qr.flatMap,Pr=(qr.flatten,qr.composeKleisli,qr.flipComposeKleisli,qr.liftM1,qr.when_,qr.unless,Tr.BsFoldableExtensions,Tr.any,Tr.all,Tr.containsBy,Tr.contains,Tr.indexOfBy,Tr.indexOf,Tr.minBy,Tr.min,Tr.maxBy,Tr.max,Tr.countBy,Tr.length,Tr.size,Tr.count,Tr.forEach,Tr.forEachWithIndex,Tr.find,Tr.findWithIndex,Tr.toList,Tr.toArray,Tr.FoldableSemigroupExtensions,Tr.FoldableMonoidExtensions,Tr.foldMap,Tr.foldWithMonoid,Tr.intercalate,Tr.FoldableApplicativeExtensions,Tr.FoldableMonadExtensions,Tr.FoldableEqExtensions,Tr.FoldableOrdExtensions,zr.orElse,function(e){return{eq:function(n,t){return void 0!==n?void 0!==t&&E(e.eq,T(n),T(t)):void 0===t},compare:function(n,t){return void 0!==n?void 0!==t?E(e.compare,T(n),T(t)):159039494:void 0!==t?939214151:-718572442}}});function Ir(e,n,t){return void 0!==t?k(n,T(t)):k(e,void 0)}function Dr(e,n){return void 0!==n?T(n):e}function Nr(e,n){return void 0!==n?T(n):k(e,void 0)}function Ur(e){return Rr((function(n,t){return k(e,t)?q(t):n}),void 0)}var Wr=Ri,Hr=Mi,Vr=qi,Gr=function e(n,t,i){return t?E(n,t[0],e(n,t[1],i)):i};function Zr(e){return function(n){return Hr(e,n)}}var Kr=Zr,Yr={map:Zr,alt:Wr};function Xr(e,n){return Vr((function(e,t){return Wr(e,Hr(t,n))}),0,e)}var Jr=Xr;function Qr(e){return[e,0]}var ea=Qr;var na={map:Zr,apply:Xr,pure:Qr,flat_map:function(e,n){return Vr((function(e,t){return Wr(e,k(n,t))}),0,e)}},ta={apply:Xr,pure:Qr,map:Zr,alt:Wr,empty:0};function ia(e,n){return function(t){return Vr(e,n,t)}}function ra(e,n){return function(t){return Gr(e,t,n)}}function aa(e){return{fold_map:pt(e,{fold_left:ia,fold_right:ra}).fold_map_default_left}}function oa(e){return{fold_map:lt(e,{fold_left:ia,fold_right:ra}).fold_map_default_left}}function sa(e){return{fold_map:ft(e,{fold_left:ia,fold_right:ra}).fold_map_default_left}}var ca={fold_left:ia,fold_right:ra,Fold_Map:aa,Fold_Map_Any:oa,Fold_Map_Plus:sa};function ua(e){var n=Qe(e),t=function(t){var i=k(e.pure,0);return function(r){return Gr((function(i,r){return E(n.$less$star$great,E(n.$less$star$great,k(e.pure,(function(e,n){return[e,n]})),k(t,i)),r)}),r,i)}};return{map:Zr,fold_left:ia,fold_right:ra,Fold_Map:aa,Fold_Map_Any:oa,Fold_Map_Plus:sa,traverse:t,sequence:dt({traverse:t}).sequence_default}}var pa=en(na),la=nn(ta);pa.$great$great$eq,pa.$eq$less$less,pa.$great$eq$great,pa.$less$eq$less,la.$less$pipe$great,la.$less$$great,la.$less$hash$great,la.$less$star$great;function fa(e){return{concatNamed:function(n,t){return E(e.append,n,t)}}}var da,ma=Tn,ha={append:ma},va=fa(ha),ga={append:ma,empty:0},xa=(da=ga,Kr),ba={map:xa},ya=An(ba),wa=Jr,_a={map:xa,apply:wa},ka=kn(_a),$a=ea,Ea={map:xa,apply:wa,pure:$a},Sa=Fn(Ea),Aa=na.flat_map,ja={map:xa,apply:wa,pure:$a,flat_map:Aa},Fa=En(ja),Oa=Yr.alt,Ca={map:xa,alt:Oa},Ma=lr(Ca),qa=ca.fold_left,Ra=ca.fold_right,Ta={fold_left:qa,fold_right:Ra,Fold_Map:ca.Fold_Map,Fold_Map_Any:ca.Fold_Map_Any,Fold_Map_Plus:ca.Fold_Map_Plus},za=hr(Ta),Ba=za.intercalate;function La(e,n,t){for(;;){var i=t,r=n;if(!r)return!i;if(!i)return!1;if(!E(e,r[0],i[0]))return!1;t=i[1],n=r[1]}}function Pa(e){return{eq:function(n,t){return La(e.eq,n,t)}}}function Ia(e,n){return"["+E(k(Ba,nt),", ",xa(e)(n))+"]"}function Da(e){return{show:function(n){return Ia(e.show,n)}}}va.concatNamed,ya.BsFunctorExtensions,ya.flipMap,ya.$$void,ya.voidRight,ya.voidLeft,ya.flap,ka.BsApplyExtensions,ka.applyFirst,ka.applySecond,ka.map2,ka.map3,ka.map4,ka.map5,ka.tuple2,ka.tuple3,ka.tuple4,ka.tuple5,ka.mapTuple2,ka.mapTuple3,ka.mapTuple4,ka.mapTuple5,Sa.BsApplicativeExtensions,Sa.liftA1,Fa.BsMonadExtensions,Fa.flatMap,Fa.flatten,Fa.composeKleisli,Fa.flipComposeKleisli,Fa.liftM1,Fa.when_,Fa.unless,Ma.orElse,za.BsFoldableExtensions,za.any,za.all;var Na=za.containsBy,Ua=(za.contains,za.indexOfBy,za.indexOf,za.minBy,za.min,za.maxBy,za.max,za.countBy,za.length),Wa=(za.size,za.count,za.forEach,za.forEachWithIndex,za.find),Ha=(za.findWithIndex,za.toList,za.FoldableSemigroupExtensions,za.FoldableMonoidExtensions),Va=(za.foldMap,za.foldWithMonoid),Ga=(za.FoldableApplicativeExtensions,za.FoldableMonadExtensions,za.FoldableEqExtensions),Za=za.FoldableOrdExtensions,Ka=ua,Ya=Ln,Xa=Pn;function Ja(e,n){return[e,n]}function Qa(e){if(e)return[e[0],e[1]]}function eo(e,n){return ha.append(n,[e,0])}function no(e){return!e}function to(e){return!!e}function io(e){if(e)return q(e[0])}function ro(e){if(e)return e[1]}function ao(e){return Dr(0,ro(e))}function oo(e,n){return In(function(e,n,t){for(;;){var i=t,r=n,a=e;if(r<=0)return a;if(!i)return a;t=i[1],n=r-1|0,e=[i[0],a]}}(0,e,n))}function so(e,n,t){return function(e,n,t){return function(e,n,t){if(!e)return 0;if(!n)return 0;var i=[t(e[0],n[0]),0];return function(e,n,t,i){for(;;){var r=i,a=t,o=n;if(!o)return;if(!a)return;var s=[e(o[0],a[0]),0];r[1]=s,i=s,t=a[1],n=o[1]}}(t,e[1],n[1],i),i}(e,n,S(t))}(n,t,e)}function co(e,n){return Nn(n,(function(n,t){return Ii(E(e,n,t))}))}function uo(e,n){return In(qa((function(n,t){return A(Na,e,t,n)?n:[t,n]}),0)(n))}function po(e,n,t){return In(qa((function(t,i){var r=t[1];return t[0]?[!0,[i,r]]:E(e,n,i)?[!0,r]:[!1,[i,r]]}),[!1,0])(t)[1])}function lo(e,n,t){return In(qa((function(t,i){return E(e,n,i)?t:[i,t]}),0)(t))}var fo=Ja,mo=In,ho=function(e,n){if(!e)return 0;if(!n)return 0;var t=[[e[0],n[0]],0];return function(e,n,t){for(;;){var i=t,r=n,a=e;if(!a)return;if(!r)return;var o=[[a[0],r[0]],0];i[1]=o,t=o,n=r[1],e=a[1]}}(e[1],n[1],t),t};function vo(e){return{cmp:S(e.cmp)}}function go(e,n,t,i){if(void 0===e)return re(n,t);var r=e.key,a=i(n,r);if(0===a)return oe(e,t);var o=e.left,s=e.right,c=e.value;return a<0?se(go(o,n,t,i),r,c,s):se(o,r,c,go(s,n,t,i))}function xo(e,n,t,i){if(void 0!==e){var r=e.key,a=i(n,r);if(0===a){var o=t(q(e.value));if(void 0!==o)return oe(e,T(o));var s=e.left,c=e.right;if(void 0===s)return c;if(void 0===c)return s;var u={contents:c.key},p={contents:c.value},l=ve(c,u,p);return se(s,u.contents,p.contents,l)}var f=e.left,d=e.right,m=e.value;if(a<0){var h=xo(f,n,t,i);return f===h?e:se(h,r,m,d)}var v=xo(d,n,t,i);return d===v?e:se(f,r,m,v)}var g=t(void 0);return void 0!==g?re(n,T(g)):e}function bo(e,n,t){var i=e.key,r=e.left,a=e.right,o=t(n,i);if(0===o){if(void 0===r)return a;if(void 0===a)return r;var s={contents:a.key},c={contents:a.value},u=ve(a,s,c);return se(r,s.contents,c.contents,u)}if(o<0){if(void 0===r)return e;var p=bo(r,n,t);return p===r?e:se(p,i,e.value,a)}if(void 0===a)return e;var l=bo(a,n,t);return l===a?e:se(r,i,e.value,l)}function yo(e,n,t){for(var i=n.length,r=e,a=0;a<i;++a){var o=n[a];r=go(r,o[0],o[1],t)}return r}function wo(e,n,t,i){var r=e.key,a=e.value,o=e.left,s=e.right,c=i(n,r);if(0===c)return t.contents=q(a),[o,s];if(c<0){if(void 0===o)return[void 0,e];var u=wo(o,n,t,i);return[u[0],Se(u[1],r,a,s)]}if(void 0===s)return[e,void 0];var p=wo(s,n,t,i);return[Se(o,r,a,p[0]),p[1]]}function _o(e,n,t,i){if(void 0===e)return void 0!==n?Oe(n,(function(e,n){return t(e,void 0,q(n))})):void 0;if(void 0===n)return Oe(e,(function(e,n){return t(e,q(n),void 0)}));if(e.height>=n.height){var r=e.key,a=e.value,o=e.left,s=e.right,c={contents:void 0},u=wo(n,r,c,i),p=c.contents;return je(_o(o,u[0],t,i),r,t(r,q(a),p),_o(s,u[1],t,i))}var l=n.key,f=n.value,d=n.left,m=n.right,h={contents:void 0},v=wo(e,l,h,i),g=h.contents;return je(_o(v[0],d,t,i),l,t(l,g,q(f)),_o(v[1],m,t,i))}var ko=ge,$o=function(e,n,t){for(;;){var i=e;if(void 0===i)return!1;var r=t(n,i.key);if(0===r)return!0;e=r<0?i.left:i.right}},Eo=Ie,So=De,Ao=be,jo=ye,Fo=ke,Oo=$e,Co=Ee,Mo=qe,qo=Re,Ro=Te,To=function(e,n){var t=e.length;if(0!==t){var i,r=Y(e,(function(e,t){return n(e[0],t[0])<0}));i=r>=0?Pe(e,0,r):Le(e,(r=0|-r)-1|0,r);for(var a=r;a<t;++a){var o=e[a];i=Ve(i,o[0],o[1],n)}return i}},zo=ze,Bo=Be,Lo=ue,Po=le,Io=de,Do=he,No=function(e,n,t){for(;;){var i=e;if(void 0===i)return;var r=t(n,i.key);if(0===r)return q(i.value);e=r<0?i.left:i.right}},Uo=function(e,n,t,i){for(;;){var r=e;if(void 0===r)return t;var a=i(n,r.key);if(0===a)return r.value;e=a<0?r.left:r.right}},Wo=Fe,Ho=Ce,Vo=we,Go=_e;function Zo(e,n){var t=n.cmp;return{cmp:t,data:To(e,t)}}function Ko(e,n){var t=e.data,i=e.cmp,r=function(e,n,t){if(void 0!==e)return bo(e,n,t)}(t,n,i);return r===t?e:{cmp:i,data:r}}function Yo(e,n){var t=e.cmp;return{cmp:t,data:function(e,n,t){var i=n.length;if(void 0!==e)for(var r=e,a=0;;){var o=a;if(o>=i)return r;var s=bo(r,n[o],t);if(void 0===s)return s;a=o+1|0,r=s}}(e.data,n,t)}}function Xo(e,n,t){var i=e.cmp;return{cmp:i,data:go(e.data,n,t,i)}}function Jo(e,n,t){return function(e,n,t){var i=e.cmp;return{cmp:i,data:xo(e.data,n,t,i)}}(e,n,$(t))}function Qo(e,n,t){return function(e,n,t){var i=e.cmp;return{cmp:i,data:_o(e.data,n.data,t,i)}}(e,n,j(t))}function es(e){return{cmp:e.cmp,data:void 0}}function ns(e){return ko(e.data)}function ts(e,n,t){return function(e,n,t){return Fo(e.data,n,t)}(e,n,j(t))}function is(e,n){return function(e,n){return{cmp:e.cmp,data:Wo(e.data,n)}}(e,S(n))}function rs(e,n){return function(e,n){var t=e.cmp,i=Ho(e.data,n);return[{cmp:t,data:i[0]},{cmp:t,data:i[1]}]}(e,S(n))}function as(e,n){return function(e,n){return{cmp:e.cmp,data:Vo(e.data,n)}}(e,$(n))}function os(e,n){return function(e,n){return{cmp:e.cmp,data:Go(e.data,n)}}(e,S(n))}function ss(e){return Mo(e.data)}function cs(e){return qo(e.data)}function us(e){return Ro(e.data)}function ps(e){return zo(e.data)}function ls(e){return Bo(e.data)}function fs(e){return Lo(e.data)}function ds(e){return Po(e.data)}function ms(e){return Io(e.data)}function hs(e){return Do(e.data)}function vs(e,n,t){return Uo(e.data,n,t,e.cmp)}function gs(e,n,t){return function(e,n,t){return So(e.data,n.data,e.cmp,t)}(e,n,S(t))}function xs(e,n,t){return function(e,n,t){return Eo(e.data,n.data,e.cmp,t)}(e,n,S(t))}var bs={append:G},ys=fa(bs),ws=Gt.map,_s={map:ws},ks=An(_s),$s=Kt.apply,Es={map:ws,apply:$s},Ss=kn(Es);function As(e){return[e]}var js={map:ws,apply:$s,pure:As},Fs=Fn(js),Os=Yt.flat_map,Cs={map:ws,apply:$s,pure:As,flat_map:Os},Ms=En(Cs),qs=Zt.alt,Rs={map:ws,alt:qs},Ts=lr(Rs),zs=(Qt.imap,ei.extend,Xt.fold_left),Bs=Xt.fold_right,Ls=Xt.Fold_Map,Ps=Xt.Fold_Map_Any,Is=Xt.Fold_Map_Plus,Ds={fold_left:zs,fold_right:Bs,Fold_Map:Ls,Fold_Map_Any:Ps,Fold_Map_Plus:Is},Ns=hr(Ds),Us=Ns.intercalate;function Ws(e,n,t){for(;;){var i=t,r=n,a=U(r,0),o=U(i,0);if(void 0===a)return void 0===o;if(void 0===o)return!1;if(!E(e,T(a),T(o)))return!1;t=Z(i,1),n=Z(r,1)}}function Hs(e){return{eq:function(n,t){return Ws(e.eq,n,t)}}}function Vs(e,n){return"["+E(k(Us,nt),", ",E(ws,e,n))+"]"}function Gs(e){return{show:function(n){return Vs(e.show,n)}}}var Zs=G,Ks=(ys.concatNamed,ks.BsFunctorExtensions,ks.flipMap,ks.$$void,ks.voidRight,ks.voidLeft,ks.flap,Ss.BsApplyExtensions,Ss.applyFirst,Ss.applySecond,Ss.map2,Ss.map3,Ss.map4,Ss.map5,Ss.tuple2,Ss.tuple3,Ss.tuple4,Ss.tuple5,Ss.mapTuple2,Ss.mapTuple3,Ss.mapTuple4,Ss.mapTuple5,Fs.BsApplicativeExtensions,Fs.liftA1,Ms.BsMonadExtensions,Ms.flatMap,Ms.flatten,Ms.composeKleisli,Ms.flipComposeKleisli,Ms.liftM1,Ms.when_,Ms.unless,Ts.orElse,Ns.BsFoldableExtensions,Ns.any,Ns.all,Ns.containsBy),Ys=(Ns.contains,Ns.indexOfBy,Ns.indexOf,Ns.minBy,Ns.min,Ns.maxBy,Ns.max,Ns.countBy,Ns.length,Ns.size,Ns.count,Ns.forEach,Ns.forEachWithIndex,Ns.find,Ns.findWithIndex,Ns.toArray,Ns.FoldableSemigroupExtensions,Ns.FoldableMonoidExtensions),Xs=(Ns.foldMap,Ns.foldWithMonoid),Js=(Ns.FoldableApplicativeExtensions,Ns.FoldableMonadExtensions,Ns.FoldableEqExtensions),Qs=Ns.FoldableOrdExtensions,ec=Pn,nc=Ln;function tc(e,n,t){return Xo(t,e,n)}function ic(e,n){return function(e,n){return $o(e.data,n,e.cmp)}(n,e)}function rc(e,n,t){return xs(n,t,e)}function ac(e,n,t){return Pi(xs(n,t,(function(n,t){return Ii(E(e,n,t))})))}function oc(e,n,t){return gs(n,t,e)}function sc(e,n){return t=e,Ao(n.data,S(t));var t}function cc(e,n){return t=e,jo(n.data,S(t));var t}function uc(e,n,t){return ts(t,n,e)}function pc(e,n){return t=e,Oo(n.data,S(t));var t}function lc(e,n){return t=e,Co(n.data,S(t));var t}function fc(e){return Ln(ps(e))}function dc(e){return Ln(ls(e))}function mc(e,n){return function(e,n){return No(e.data,n,e.cmp)}(n,e)}function hc(e,n,t){return vs(t,e,n)}function vc(e,n){return Ko(n,e)}function gc(e,n){return Yo(n,e)}function xc(e,n,t){return Jo(t,e,n)}function bc(e,n,t){return Qo(n,t,e)}function yc(e,n){return i=e,{cmp:r=(t=n).cmp,data:yo(t.data,i,r)};var t,i,r}function wc(e,n){return is(n,e)}function _c(e,n){return is(n,(function(n,t){return!E(e,n,t)}))}function kc(e,n){return rs(n,e)}function $c(e,n){return as(n,e)}function Ec(e,n){return os(n,e)}function Sc(e,n){var t=function(e,t){return Xo(e,k(n,t),function(e){var t=k(n,e),i=function(e){return vs(e,t,0)};return function(n){return Mn.$great$great(i,(function(n){return[e,n]}),n)}}(t)(e))};return function(n){return Mn.$great$great((function(n){return Dn(n,es(e),t)}),(function(e){return as(e,In)}),n)}}function Ac(e,n){var t=function(e,t){return Xo(e,k(n,t),function(e){var t=[],i=k(n,e),r=function(e){return vs(e,i,t)};return function(n){return Mn.$great$great(r,(function(n){return G(n,[e])}),n)}}(t)(e))};return function(n){return i=n,r=es(e),function(e,n,t){for(var i=n,r=0,a=e.length;r<a;++r)i=t(i,e[r]);return i}(i,r,S(t));var i,r}}function jc(e){var n=vo({cmp:function(n,t){return Ii(E(e.compare,n,t))}});return An({map:$c}),{Comparable:{},make:function(e){return es(n)},set:tc,singleton:function(e,t){return Xo(es(n),e,t)},isEmpty:ns,contains:ic,compareInt:rc,compareBy:ac,eqBy:oc,find:sc,forEach:cc,foldLeft:uc,all:pc,any:lc,length:ss,toArray:us,fromArray:function(e){return Zo(e,n)},fromValueArray:function(e,t){return k(function(e,n){return E(zs,(function(e,t){return Xo(e,k(n,t),t)}),es(e))}(n,e),t)},toList:cs,fromList:function(e){return Zo(Pn(e),n)},fromValueList:function(e,t){return function(e,n){return qa((function(e,t){return Xo(e,k(n,t),t)}),es(e))}(n,e)(t)},keys:fc,keyArray:ps,values:dc,valueArray:ls,minKey:fs,maxKey:ds,min:ms,max:hs,get:mc,getOrElse:hc,remove:vc,removeMany:gc,update:xc,merge:bc,mergeMany:yc,filter:wc,keep:wc,filterNot:_c,reject:_c,partition:kc,map:$c,mapWithKey:Ec,groupListBy:function(e,t){return Sc(n,e)(t)},groupArrayBy:function(e,t){return Ac(n,e)(t)}}}function Fc(e){return void 0!==e?e.height:0}function Oc(e,n,t){var i=void 0!==e?e.height:0,r=void 0!==t?t.height:0;return{value:n,height:i>=r?i+1|0:r+1|0,left:e,right:t}}function Cc(e){return{value:e,height:1,left:void 0,right:void 0}}function Mc(e,n){return void 0===n||void 0!==e&&e.height>=n.height}function qc(e,n,t){var i=void 0!==e?e.height:0,r=void 0!==t?t.height:0;if(i>(r+2|0)){var a=e.value,o=e.left,s=e.right;return Mc(o,s)?Oc(o,a,Oc(s,n,t)):Oc(Oc(o,a,s.left),s.value,Oc(s.right,n,t))}if(r<=(i+2|0))return{value:n,height:i>=r?i+1|0:r+1|0,left:e,right:t};var c=t.value,u=t.left,p=t.right;return Mc(p,u)?Oc(Oc(e,n,u),c,p):Oc(Oc(e,n,u.left),u.value,Oc(u.right,c,p))}function Rc(e){for(;;){var n=e,t=n.left;if(void 0===t)return n.value;e=t}}function Tc(e){for(;;){var n=e,t=n.right;if(void 0===t)return n.value;e=t}}function zc(e,n){var t=e.value,i=e.left,r=e.right;return void 0!==i?qc(zc(i,n),t,r):(n.contents=t,r)}function Bc(e,n){for(;;){if(void 0===e)return n;n=[e,n],e=e.left}}function Lc(e,n){for(;;){var t=e;if(void 0===t)return;Lc(t.left,n),n(t.value),e=t.right}}function Pc(e,n,t){for(;;){var i=n,r=e;if(void 0===r)return i;var a=r.value,o=r.left,s=r.right;n=t(Pc(o,i,t),a),e=s}}function Ic(e,n){for(;;){var t=e;if(void 0===t)return!0;if(!n(t.value))return!1;if(!Ic(t.left,n))return!1;e=t.right}}function Dc(e,n){for(;;){var t=e;if(void 0===t)return!1;if(n(t.value))return!0;if(Dc(t.left,n))return!0;e=t.right}}function Nc(e,n,t){if(void 0===e)return function e(n,t){return void 0!==n?qc(e(n.left,t),n.value,n.right):Cc(t)}(t,n);if(void 0===t)return function e(n,t){return void 0!==n?qc(n.left,n.value,e(n.right,t)):Cc(t)}(e,n);var i=e.height,r=t.height;return i>(r+2|0)?qc(e.left,e.value,Nc(e.right,n,t)):r>(i+2|0)?qc(Nc(e,n,t.left),t.value,t.right):Oc(e,n,t)}function Uc(e,n){if(void 0===e)return n;if(void 0===n)return e;var t={contents:n.value},i=zc(n,t);return Nc(e,t.contents,i)}function Wc(e,n){if(void 0===e)return[void 0,void 0];var t=e.value,i=Wc(e.left,n),r=i[1],a=i[0],o=n(t),s=Wc(e.right,n),c=s[1],u=s[0];return o?[Nc(a,t,u),Uc(r,c)]:[Uc(a,u),Nc(r,t,c)]}function Hc(e){var n=e.left,t=e.right;return(1+(void 0!==n?Hc(n):0)|0)+(void 0!==t?Hc(t):0)|0}function Vc(e){return void 0!==e?Hc(e):0}function Gc(e,n,t){switch(t){case 0:return;case 1:return Cc(e[n]);case 2:var i=e[n];return{value:e[n-1|0],height:2,left:Cc(i),right:void 0};case 3:var r=e[n],a=e[n-1|0],o=e[n-2|0];return{value:a,height:2,left:Cc(r),right:Cc(o)};default:var s=t/2|0;return Oc(Gc(e,n,s),e[n-s|0],Gc(e,(n-s|0)-1|0,(t-s|0)-1|0))}}function Zc(e,n,t){switch(t){case 0:return;case 1:return Cc(e[n]);case 2:var i=e[n];return{value:e[n+1|0],height:2,left:Cc(i),right:void 0};case 3:var r=e[n],a=e[n+1|0],o=e[n+2|0];return{value:a,height:2,left:Cc(r),right:Cc(o)};default:var s=t/2|0;return Oc(Zc(e,n,s),e[n+s|0],Zc(e,1+(n+s|0)|0,(t-s|0)-1|0))}}function Kc(e,n){if(void 0!==e){var t=e.value,i=e.left,r=e.right,a=Kc(i,n),o=n(t),s=Kc(r,n);return o?i===a&&r===s?e:Nc(a,t,s):Uc(a,s)}}function Yc(e,n,t){var i=Vc(e),r=Vc(n);if(i!==r)return i<r?-1:1;for(var a=Bc(e,0),o=Bc(n,0);;){var s=o,c=a;if(!c)return 0;if(!s)return 0;var u=s[0],p=c[0],l=t(p.value,u.value);if(0!==l)return l;o=Bc(u.right,s[1]),a=Bc(p.right,c[1])}}function Xc(e){var n=e.left;e.left=n.right,n.right=e;var t=Fc(e.left),i=Fc(e.right);e.height=(t>i?t:i)+1|0;var r=Fc(n.left),a=e.height;return n.height=(r>a?r:a)+1|0,n}function Jc(e){var n=e.right;e.right=n.left,n.left=e;var t=Fc(e.left),i=Fc(e.right);e.height=(t>i?t:i)+1|0;var r=Fc(n.right),a=e.height;return n.height=(r>a?r:a)+1|0,n}function Qc(e){var n=Fc(e.left),t=Fc(e.right);return e.height=(n>t?n:t)+1|0,e}function eu(e){var n,t,i=e.left,r=e.right,a=Fc(i),o=Fc(r);if(a>(2+o|0))return Mc(i.left,i.right)?Qc(Xc(e)):Qc((t=Jc((n=e).left),n.left=t,Xc(n)));if(o>(2+a|0)){var s=r.left;return Mc(r.right,s)?Qc(Jc(e)):Qc(function(e){var n=Xc(e.right);return e.right=n,Jc(e)}(e))}return e.height=(a>o?a:o)+1|0,e}function nu(e,n,t){if(void 0===n)return Cc(t);var i=e(t,n.value);if(0===i)return n;var r=n.left,a=n.right;if(i<0){var o=nu(e,r,t);n.left=o}else n.right=nu(e,a,t);return eu(n)}function tu(e,n,t){if(void 0===e)return Cc(n);var i=e.value,r=t(n,i);if(0===r)return e;var a=e.left,o=e.right;if(r<0){var s=tu(a,n,t);return s===a?e:qc(s,i,o)}var c=tu(o,n,t);return c===o?e:qc(a,i,c)}function iu(e,n,t){if(void 0===e)return e;var i=e.value,r=e.left,a=e.right,o=t(n,i);if(0===o){if(void 0===r)return a;if(void 0===a)return r;var s={contents:a.value},c=zc(a,s);return qc(r,s.contents,c)}if(o<0){var u=iu(r,n,t);return u===r?e:qc(u,i,a)}var p=iu(a,n,t);return p===a?e:qc(r,i,p)}function ru(e,n,t){for(var i=n.length,r=e,a=0;a<i;++a){r=tu(r,n[a],t)}return r}function au(e,n,t){for(var i=n.length,r=e,a=0;a<i;++a){r=iu(r,n[a],t)}return r}function ou(e,n,t){var i=n.value,r=n.left,a=n.right,o=e(t,i);if(0===o)return[r,a];if(o<0){if(void 0===r)return[void 0,n];var s=ou(e,r,t);return[s[0],Nc(s[1],i,a)]}if(void 0===a)return[n,void 0];var c=ou(e,a,t);return[Nc(r,i,c[0]),c[1]]}function su(e,n,t,i){var r=n.value,a=n.left,o=n.right,s=e(t,r);if(0===s)return i.contents=!0,[a,o];if(s<0){if(void 0===a)return[void 0,n];var c=su(e,a,t,i);return[c[0],Nc(c[1],r,o)]}if(void 0===o)return[n,void 0];var u=su(e,o,t,i);return[Nc(a,r,u[0]),u[1]]}function cu(e,n,t){if(void 0===e)return n;if(void 0===n)return e;var i=e.height,r=n.height;if(i>=r){if(1===r)return tu(e,n.value,t);var a=e.value,o=e.left,s=e.right,c=ou(t,n,a);return Nc(cu(o,c[0],t),a,cu(s,c[1],t))}if(1===i)return tu(n,e.value,t);var u=n.value,p=n.left,l=n.right,f=ou(t,e,u);return Nc(cu(f[0],p,t),u,cu(f[1],l,t))}function uu(e,n,t){if(void 0!==e&&void 0!==n){var i=e.value,r=e.left,a=e.right,o={contents:!1},s=su(t,n,i,o),c=uu(r,s[0],t),u=uu(a,s[1],t);return o.contents?Nc(c,i,u):Uc(c,u)}}function pu(e,n,t){if(void 0===e)return e;if(void 0===n)return e;var i=e.value,r=e.left,a=e.right,o={contents:!1},s=su(t,n,i,o),c=pu(r,s[0],t),u=pu(a,s[1],t);return o.contents?Uc(c,u):Nc(c,i,u)}var lu=function(e,n){var t=e.length;if(0!==t){var i,r=Y(e,(function(e,t){return n(e,t)<0}));i=r>=0?Zc(e,0,r):Gc(e,(r=0|-r)-1|0,r);for(var a=r;a<t;++a)i=nu(n,i,e[a]);return i}},fu=function(e){return void 0===e},du=function(e,n,t){for(;;){var i=e;if(void 0===i)return!1;var r=t(n,i.value);if(0===r)return!0;e=r<0?i.left:i.right}},mu=function e(n,t,i){for(;;){var r=t,a=n;if(void 0===a)return!0;if(void 0===r)return!1;var o=a.value,s=a.left,c=a.right,u=r.value,p=r.left,l=r.right,f=i(o,u);if(0!==f)if(f<0){if(!e(Oc(s,o,void 0),p,i))return!1;n=c}else{if(!e(Oc(void 0,o,c),l,i))return!1;n=s}else{if(!e(s,p,i))return!1;t=l,n=c}}},hu=Yc,vu=function(e,n,t){return 0===Yc(e,n,t)},gu=Lc,xu=Pc,bu=Ic,yu=Dc,wu=Kc,_u=Wc,ku=Vc,$u=function(e){return function e(n,t){for(;;){var i=t,r=n;if(void 0===r)return i;t=[r.value,e(r.right,i)],n=r.left}}(e,0)},Eu=function(e){if(void 0===e)return[];var n=Hc(e),t=new Array(n);return function e(n,t,i){for(;;){var r=t,a=n,o=a.value,s=a.left,c=a.right,u=void 0!==s?e(s,r,i):r;i[u]=o;var p=u+1|0;if(void 0===c)return p;t=p,n=c}}(e,0,t),t},Su=function(e){if(void 0!==e)return q(Rc(e))},Au=function(e){if(void 0!==e)return q(Tc(e))},ju=function(e,n,t){for(;;){var i=e;if(void 0===i)return;var r=i.value,a=t(n,r);if(0===a)return q(r);e=a<0?i.left:i.right}};function Fu(e,n){var t=n.cmp;return{cmp:t,data:lu(e,t)}}function Ou(e,n){var t=e.data,i=e.cmp,r=iu(t,n,i);return r===t?e:{cmp:i,data:r}}function Cu(e,n){var t=e.data,i=e.cmp,r=tu(t,n,i);return r===t?e:{cmp:i,data:r}}function Mu(e,n){var t=e.cmp;return{cmp:t,data:cu(e.data,n.data,t)}}function qu(e,n){var t=e.cmp;return{cmp:t,data:uu(e.data,n.data,t)}}function Ru(e,n){var t=e.cmp;return{cmp:t,data:pu(e.data,n.data,t)}}function Tu(e,n){var t=e.cmp;return mu(e.data,n.data,t)}function zu(e,n){var t=e.cmp,i=function(e,n,t){if(void 0===e)return[[void 0,void 0],!1];var i={contents:!1};return[su(t,e,n,i),i.contents]}(e.data,n,t),r=i[0];return[[{cmp:t,data:r[0]},{cmp:t,data:r[1]}],i[1]]}function Bu(e){return{cmp:e.cmp,data:void 0}}function Lu(e){return fu(e.data)}function Pu(e,n){var t=e.cmp;return hu(e.data,n.data,t)}function Iu(e,n){return vu(e.data,n.data,e.cmp)}function Du(e,n,t){return function(e,n,t){return xu(e.data,n,t)}(e,n,S(t))}function Nu(e,n){return function(e,n){return{cmp:e.cmp,data:wu(e.data,n)}}(e,$(n))}function Uu(e,n){return function(e,n){var t=_u(e.data,n),i=e.cmp;return[{cmp:i,data:t[0]},{cmp:i,data:t[1]}]}(e,$(n))}function Wu(e){return ku(e.data)}function Hu(e){return $u(e.data)}function Vu(e){return Eu(e.data)}function Gu(e){return Su(e.data)}function Zu(e){return Au(e.data)}function Ku(e,n){return ju(e.data,n,e.cmp)}function Yu(e,n){return du(e.data,n,e.cmp)}function Xu(e,n){return Yu(n,e)}function Ju(e,n){return Cu(n,e)}function Qu(e,n){return i=e,{cmp:r=(t=n).cmp,data:ru(t.data,i,r)};var t,i,r}function ep(e,n){return Ou(n,e)}function np(e,n){return i=e,{cmp:r=(t=n).cmp,data:au(t.data,i,r)};var t,i,r}function tp(e,n){return Cu(Ou(n,e),e)}function ip(e,n){return Yu(n,e)?Ou(n,e):Cu(n,e)}function rp(e,n){return t=e,gu(n.data,$(t));var t}function ap(e,n,t){return Du(t,n,e)}function op(e,n,t){return Vn(e,Vu(t),n)}function sp(e,n){return t=e,bu(n.data,$(t));var t}function cp(e,n){return t=e,yu(n.data,$(t));var t}function up(e,n){return Nu(n,e)}function pp(e,n){return Nu(n,(function(n){return!k(e,n)}))}function lp(e,n){return Uu(n,e)}function fp(e,n){return Ku(n,e)}function dp(e,n,t){return Dr(n,Ku(t,e))}function mp(e,n){return zu(n,e)}function hp(e){var n=vo({cmp:function(n,t){return Ii(E(e.compare,n,t))}});return{Comparable:{},empty:Bu(n),fromArray:function(e){return Fu(e,n)},fromList:function(e){return Fu(Pn(e),n)},isEmpty:Lu,contains:Xu,add:Ju,mergeMany:Qu,remove:ep,removeMany:np,update:tp,toggle:ip,union:Mu,intersect:qu,diff:Ru,subset:Tu,compare:Pu,eq:Iu,forEach:rp,foldLeft:ap,foldRight:op,all:sp,any:cp,filter:up,keep:up,filterNot:pp,reject:pp,partition:lp,length:Wu,toArray:Vu,toList:Hu,minimum:Gu,maximum:Zu,get:fp,getOrElse:dp,split:mp}}function vp(e,n){return e+n|0}var gp={append:vp};function xp(e){return Ei(-1,e)}var bp={Magma:gp,Medial_Magma:gp,Semigroup:{append:vp},Monoid:{append:vp,empty:0},Quasigroup:{append:vp},Medial_Quasigroup:{append:vp},Loop:{append:vp,empty:0},Group:{append:vp,empty:0,inverse:xp},Abelian_Group:{append:vp,empty:0,inverse:xp}},yp={append:Ei},wp={Magma:yp,Medial_Magma:yp,Semigroup:{append:Ei},Monoid:{append:Ei,empty:1},Quasigroup:{append:Ei},Loop:{append:Ei,empty:1}};var _p={eq:Ke},kp={eq:Ke,compare:Ye};function $p(e,n){return e+n|0}function Ep(e,n){return e-n|0}var Sp={add:$p,zero:0,multiply:Ei,one:1,subtract:Ep,degree:function(e){return D((n=e)>=0?n:0|-n,2147483647);var n},divide:ki,modulo:$i},Ap=Xe(gp),jp=Xe(yp),Fp=rn(_p),Op=an(kp),Cp=on(Sp);Fp.$eq$pipe$eq,Op.$less$pipe$pipe,Op.$pipe$pipe$great,Op.$less$pipe$eq,Op.$great$pipe$eq,Cp.$pipe$plus$pipe,Cp.$pipe$star$pipe,Cp.$pipe$neg$pipe,Cp.$pipe$slash$pipe,Cp.$pipe$percent$pipe;function Mp(e){var n=e.subtract;return{$neg:n,negate:function(t){return E(n,e.zero,t)}}}function qp(e,n){return e+n|0}function Rp(e,n){return e-n|0}var Tp=Ei;var zp=_p.eq,Bp={eq:zp},Lp=ii(Bp),Pp=kp.compare,Ip={eq:zp,compare:Pp},Dp=xi(Ip),Np=Dp.OrdRingExtensions;var Up=Bi({eq:zp,compare:Pp,succ:function(e){if(e<2147483647)return e+1|0},pred:function(e){if(e>-2147483648)return e-1|0}}),Wp={add:qp,zero:0,multiply:Tp,one:1,subtract:Rp},Hp=Mp(Wp),Vp=k(Np,Wp);jc(Ip),hp(Ip);function Gp(e){try{return Fi(e)}catch(e){return}}var Zp,Kp,Yp,Xp,Jp,Qp,el,nl,tl,il,rl,al;Kp=function(e,n){return ti(Zp.eq,e,n)},Zp=Bp,Jp=function(e,n){return ui(Yp.compare,e,n)},Qp=function(e,n){return pi(Yp.compare,e,n)},el=function(e,n){return li(Yp.compare,e,n)},nl=function(e,n){return fi(Yp.compare,e,n)},tl=function(e,n){return ui(Yp.compare,n,e)},il=function(e,n){return pi(Yp.compare,n,e)},rl=function(e,n){return li(Yp.compare,n,e)},al=function(e,n){return fi(Yp.compare,n,e)},Xp=function(e,n){return ai(Yp.compare,e,n)},Yp=Ip,Lp.eqWithConversion,Lp.notEq,Lp.eqInverted,Lp.EqInverted,Lp.EqBy,Dp.compareWithConversion,Dp.compareReversed,Dp.OrdReversed,Dp.compareAsInt,Dp.min,Dp.max,Dp.lessThan,Dp.lt,Dp.lessThanOrEq,Dp.lte,Dp.greaterThan,Dp.gt,Dp.greaterThanOrEq,Dp.gte,Dp.clamp,Dp.between,Dp.OrdNamed,Dp.OrdBy,Up.fromToAsList,Up.upFromAsList,Up.upFromIncludingAsList,Up.downFromAsList,Up.downFromIncludingAsList,Hp.$neg,Hp.negate,Vp.abs,Vp.signum;function ol(e,n){return Zs([e],n)}function sl(e){if(0!==e.length)return[W(e,0),Z(e,1)]}function cl(e,n){return Zs(n,[e])}function ul(e){return e.length}function pl(e){return 0===e.length}function ll(e){return 0!==e.length}function fl(e){return U(e,0)}function dl(e){var n=e.length;if(0!==n){if(1===n)return[];var t=Z(e,1);return 0!==t.length?t:void 0}}function ml(e){var n=dl(e);return void 0!==n?n:[]}function hl(e,n,t){return V(n,t,e)}function vl(e,n){return ne(n,(function(n,t){return Ii(E(e,n,t))}))}function gl(e,n){return A(zs,(function(n,t){return A(Ks,e,t,n)?n:Zs(n,[t])}),[],n)}function xl(e,n,t){return A(zs,(function(t,i){var r=t[1];return t[0]?[!0,Zs(r,[i])]:E(e,n,i)?[!0,r]:[!1,Zs(r,[i])]}),[!1,[]],t)[1]}function bl(e,n,t){return A(zs,(function(t,i){return E(e,n,i)?t:Zs(t,[i])}),[],t)}var yl=ol,wl=function(e){for(var n=e.length,t=new Array(n),i=0;i<n;++i)t[i]=e[(n-1|0)-i|0];return t},_l=H;var kl=k(Ba,nt),$l={emptyLazy:function(e){return 0},length:Ua,isEmpty:no,isNotEmpty:to,head:io,tail:ro,tailOrEmpty:ao,uncons:Qa,prepend:fo,append:eo,concat:ma,reverse:mo,mkString:kl,zip:ho,zipWith:so,fromArray:Ya,fromList:function(e){return e},toArray:Xa,toList:function(e){return e},eqBy:La,showBy:Ia,Functor:ba,Apply:_a,Applicative:Ea,Monad:ja,Foldable:Ta,Traversable:Ka,Eq:Pa,Show:Da};var El=k(Us,nt),Sl={emptyLazy:function(e){return[]},length:ul,isEmpty:pl,isNotEmpty:ll,head:fl,tail:dl,tailOrEmpty:ml,uncons:sl,prepend:yl,append:cl,concat:Zs,reverse:wl,mkString:El,zip:_l,zipWith:hl,fromArray:function(e){return e},fromList:ec,toArray:function(e){return e},toList:nc,eqBy:Ws,showBy:Vs,Functor:_s,Apply:Es,Applicative:js,Monad:Cs,Foldable:Ds,Traversable:Jt,Eq:Hs,Show:Gs};function Al(e){return[e,k($l.emptyLazy,void 0)]}function jl(e,n){return[e,n]}function Fl(e){return E($l.concat,k($l.Monad.pure,e[0]),e[1])}function Ol(e){return e[0]}function Cl(e){return e[1]}function Ml(e,n){return[Ol(e),E($l.concat,Cl(e),Fl(n))]}var ql={append:Ml},Rl=fa(ql),Tl={append:Ml};function zl(e,n){return A($l.Foldable.fold_left,e,n[0],n[1])}function Bl(e,n,t){return A($l.Foldable.fold_left,e,E(e,n,t[0]),t[1])}function Ll(e,n,t){return E(e,t[0],A($l.Foldable.fold_right,e,n,t[1]))}function Pl(e){var n=k($l.Foldable.Fold_Map,e);return{fold_map:function(t,i){return E(e.append,k(t,i[0]),E(n.fold_map,t,i[1]))}}}function Il(e){var n=k($l.Foldable.Fold_Map_Any,e);return{fold_map:function(t,i){return E(e.append,k(t,i[0]),E(n.fold_map,t,i[1]))}}}function Dl(e){var n=k($l.Foldable.Fold_Map_Plus,e);return{fold_map:function(t,i){return E(e.alt,k(t,i[0]),E(n.fold_map,t,i[1]))}}}var Nl={fold_left:Bl,fold_right:Ll,Fold_Map:Pl,Fold_Map_Any:Il,Fold_Map_Plus:Dl},Ul=hr(Nl);function Wl(e,n){return[k(e,n[0]),E($l.Monad.map,e,n[1])]}var Hl={map:Wl},Vl=An(Hl);function Gl(e,n){return zl(Ml,Wl((function(e){return Wl(e,n)}),e))}var Zl={map:Wl,apply:Gl},Kl=kn(Zl),Yl={map:Wl,apply:Gl,pure:Al},Xl=Fn(Yl);function Jl(e,n){return zl(Ml,Wl(n,e))}var Ql={map:Wl,apply:Gl,pure:Al,flat_map:Jl},ef=En(Ql);function nf(e,n){return n[0]+(e+E($l.mkString,e,n[1]))}function tf(e,n,t){return!!E(e,n[0],t[0])&&A($l.eqBy,e,n[1],t[1])}function rf(e,n){return"[!"+nf(", ",Wl(e,n))+"!]"}var af={one:Al,make:jl,fromSequence:function(e){return Un(k($l.head,e),(function(n){return[n,k($l.tailOrEmpty,e)]}))},toSequence:Fl,fromList:function(e){if(e)return[e[0],k($l.fromList,e[1])]},fromArray:function(e){return _r((function(e){return[e[0],k($l.fromArray,e[1])]}),sl(e))},cons:function(e,n){return[e,Fl(n)]},uncons:function(e){return[e[0],e[1]]},head:Ol,tail:Cl,concat:Ml,SemigroupAny:ql,concatNamed:Rl.concatNamed,MagmaAny:Tl,reduceLeft:zl,foldLeft:Bl,foldRight:Ll,Foldable:Nl,BsFoldableExtensions:Ul.BsFoldableExtensions,any:Ul.any,containsBy:Ul.containsBy,contains:Ul.contains,indexOfBy:Ul.indexOfBy,indexOf:Ul.indexOf,minBy:Ul.minBy,min:Ul.min,maxBy:Ul.maxBy,max:Ul.max,countBy:Ul.countBy,length:Ul.length,size:Ul.size,count:Ul.count,forEach:Ul.forEach,forEachWithIndex:Ul.forEachWithIndex,find:Ul.find,findWithIndex:Ul.findWithIndex,toList:Ul.toList,toArray:Ul.toArray,FoldableSemigroupExtensions:Ul.FoldableSemigroupExtensions,FoldableMonoidExtensions:Ul.FoldableMonoidExtensions,foldMap:Ul.foldMap,foldWithMonoid:Ul.foldWithMonoid,intercalate:Ul.intercalate,FoldableApplicativeExtensions:Ul.FoldableApplicativeExtensions,FoldableMonadExtensions:Ul.FoldableMonadExtensions,FoldableEqExtensions:Ul.FoldableEqExtensions,FoldableOrdExtensions:Ul.FoldableOrdExtensions,map:Wl,Functor:Hl,BsFunctorExtensions:Vl.BsFunctorExtensions,flipMap:Vl.flipMap,$$void:Vl.$$void,voidRight:Vl.voidRight,voidLeft:Vl.voidLeft,flap:Vl.flap,apply:Gl,Apply:Zl,BsApplyExtensions:Kl.BsApplyExtensions,applyFirst:Kl.applyFirst,applySecond:Kl.applySecond,map2:Kl.map2,map3:Kl.map3,map4:Kl.map4,map5:Kl.map5,tuple2:Kl.tuple2,tuple3:Kl.tuple3,tuple4:Kl.tuple4,tuple5:Kl.tuple5,mapTuple2:Kl.mapTuple2,mapTuple3:Kl.mapTuple3,mapTuple4:Kl.mapTuple4,mapTuple5:Kl.mapTuple5,pure:Al,Applicative:Yl,BsApplicativeExtensions:Xl.BsApplicativeExtensions,liftA1:Xl.liftA1,all:Xl.all,bind:Jl,Monad:Ql,BsMonadExtensions:ef.BsMonadExtensions,flatMap:ef.flatMap,flatten:ef.flatten,composeKleisli:ef.composeKleisli,flipComposeKleisli:ef.flipComposeKleisli,liftM1:ef.liftM1,when_:ef.when_,unless:ef.unless,mkString:nf,reverse:function(e){var n=e[0];return Nr((function(e){return[n,k($l.emptyLazy,void 0)]}),_r((function(e){return[e[0],E($l.append,n,e[1])]}),k($l.uncons,k($l.reverse,e[1]))))},eqBy:tf,eq:function(e,n,t){return tf(e.eq,n,t)},Eq:function(e){return{eq:function(n,t){return tf(e.eq,n,t)}}},showBy:rf,show:function(e,n){return rf(e.show,n)},Show:function(e){return{show:function(n){return rf(e.show,n)}}},WithApplicative:function(e){var n=k($l.Traversable,e),t=function(t,i){return E(e.apply,E(e.map,jl,k(t,i[0])),E(n.traverse,t,i[1]))},i=function(e){return t((function(e){return e}),e)},r={map:Wl,fold_left:Bl,fold_right:Ll,Fold_Map:Pl,Fold_Map_Any:Il,Fold_Map_Plus:Dl,traverse:t,sequence:i};return{Traversable:r,traverse:t,sequence:i}}};function of(e){return[e,k(Sl.emptyLazy,void 0)]}function sf(e,n){return[e,n]}function cf(e){return E(Sl.concat,k(Sl.Monad.pure,e[0]),e[1])}function uf(e){return e[0]}function pf(e){return e[1]}function lf(e,n){return[uf(e),E(Sl.concat,pf(e),cf(n))]}var ff={append:lf},df=fa(ff),mf={append:lf};function hf(e,n){return A(Sl.Foldable.fold_left,e,n[0],n[1])}function vf(e,n,t){return A(Sl.Foldable.fold_left,e,E(e,n,t[0]),t[1])}function gf(e,n,t){return E(e,t[0],A(Sl.Foldable.fold_right,e,n,t[1]))}function xf(e){var n=k(Sl.Foldable.Fold_Map,e);return{fold_map:function(t,i){return E(e.append,k(t,i[0]),E(n.fold_map,t,i[1]))}}}function bf(e){var n=k(Sl.Foldable.Fold_Map_Any,e);return{fold_map:function(t,i){return E(e.append,k(t,i[0]),E(n.fold_map,t,i[1]))}}}function yf(e){var n=k(Sl.Foldable.Fold_Map_Plus,e);return{fold_map:function(t,i){return E(e.alt,k(t,i[0]),E(n.fold_map,t,i[1]))}}}var wf={fold_left:vf,fold_right:gf,Fold_Map:xf,Fold_Map_Any:bf,Fold_Map_Plus:yf},_f=hr(wf);function kf(e,n){return[k(e,n[0]),E(Sl.Monad.map,e,n[1])]}var $f={map:kf},Ef=An($f);function Sf(e,n){return hf(lf,kf((function(e){return kf(e,n)}),e))}var Af={map:kf,apply:Sf},jf=kn(Af),Ff={map:kf,apply:Sf,pure:of},Of=Fn(Ff);function Cf(e,n){return hf(lf,kf(n,e))}var Mf={map:kf,apply:Sf,pure:of,flat_map:Cf},qf=En(Mf);function Rf(e,n){return n[0]+(e+E(Sl.mkString,e,n[1]))}function Tf(e,n,t){return!!E(e,n[0],t[0])&&A(Sl.eqBy,e,n[1],t[1])}function zf(e,n){return"[!"+Rf(", ",kf(e,n))+"!]"}var Bf={one:of,make:sf,fromSequence:function(e){return Un(k(Sl.head,e),(function(n){return[n,k(Sl.tailOrEmpty,e)]}))},toSequence:cf,fromList:function(e){if(e)return[e[0],k(Sl.fromList,e[1])]},fromArray:function(e){return _r((function(e){return[e[0],k(Sl.fromArray,e[1])]}),sl(e))},cons:function(e,n){return[e,cf(n)]},uncons:function(e){return[e[0],e[1]]},head:uf,tail:pf,concat:lf,SemigroupAny:ff,concatNamed:df.concatNamed,MagmaAny:mf,reduceLeft:hf,foldLeft:vf,foldRight:gf,Foldable:wf,BsFoldableExtensions:_f.BsFoldableExtensions,any:_f.any,containsBy:_f.containsBy,contains:_f.contains,indexOfBy:_f.indexOfBy,indexOf:_f.indexOf,minBy:_f.minBy,min:_f.min,maxBy:_f.maxBy,max:_f.max,countBy:_f.countBy,length:_f.length,size:_f.size,count:_f.count,forEach:_f.forEach,forEachWithIndex:_f.forEachWithIndex,find:_f.find,findWithIndex:_f.findWithIndex,toList:_f.toList,toArray:_f.toArray,FoldableSemigroupExtensions:_f.FoldableSemigroupExtensions,FoldableMonoidExtensions:_f.FoldableMonoidExtensions,foldMap:_f.foldMap,foldWithMonoid:_f.foldWithMonoid,intercalate:_f.intercalate,FoldableApplicativeExtensions:_f.FoldableApplicativeExtensions,FoldableMonadExtensions:_f.FoldableMonadExtensions,FoldableEqExtensions:_f.FoldableEqExtensions,FoldableOrdExtensions:_f.FoldableOrdExtensions,map:kf,Functor:$f,BsFunctorExtensions:Ef.BsFunctorExtensions,flipMap:Ef.flipMap,$$void:Ef.$$void,voidRight:Ef.voidRight,voidLeft:Ef.voidLeft,flap:Ef.flap,apply:Sf,Apply:Af,BsApplyExtensions:jf.BsApplyExtensions,applyFirst:jf.applyFirst,applySecond:jf.applySecond,map2:jf.map2,map3:jf.map3,map4:jf.map4,map5:jf.map5,tuple2:jf.tuple2,tuple3:jf.tuple3,tuple4:jf.tuple4,tuple5:jf.tuple5,mapTuple2:jf.mapTuple2,mapTuple3:jf.mapTuple3,mapTuple4:jf.mapTuple4,mapTuple5:jf.mapTuple5,pure:of,Applicative:Ff,BsApplicativeExtensions:Of.BsApplicativeExtensions,liftA1:Of.liftA1,all:Of.all,bind:Cf,Monad:Mf,BsMonadExtensions:qf.BsMonadExtensions,flatMap:qf.flatMap,flatten:qf.flatten,composeKleisli:qf.composeKleisli,flipComposeKleisli:qf.flipComposeKleisli,liftM1:qf.liftM1,when_:qf.when_,unless:qf.unless,mkString:Rf,reverse:function(e){var n=e[0];return Nr((function(e){return[n,k(Sl.emptyLazy,void 0)]}),_r((function(e){return[e[0],E(Sl.append,n,e[1])]}),k(Sl.uncons,k(Sl.reverse,e[1]))))},eqBy:Tf,eq:function(e,n,t){return Tf(e.eq,n,t)},Eq:function(e){return{eq:function(n,t){return Tf(e.eq,n,t)}}},showBy:zf,show:function(e,n){return zf(e.show,n)},Show:function(e){return{show:function(n){return zf(e.show,n)}}},WithApplicative:function(e){var n=k(Sl.Traversable,e),t=function(t,i){return E(e.apply,E(e.map,sf,k(t,i[0])),E(n.traverse,t,i[1]))},i=function(e){return t((function(e){return e}),e)},r={map:kf,fold_left:vf,fold_right:gf,Fold_Map:xf,Fold_Map_Any:bf,Fold_Map_Plus:yf,traverse:t,sequence:i};return{Traversable:r,traverse:t,sequence:i}},toNonEmptyList:function(e){return[e[0],Ln(e[1])]},fromNonEmptyList:function(e){return[e[0],Pn(e[1])]}};function Lf(e,n,t){return t.tag?p(1,[k(n,t[0])]):p(0,[k(e,t[0])])}function Pf(e,n){return n.tag?n:p(0,[k(e,n[0])])}function If(e,n,t){if(!n.tag)return t.tag?p(1,[t[0]]):p(0,[k(n[0],t[0])]);var i=n[0];return t.tag?p(1,[E(e,i,t[0])]):p(1,[i])}function Df(e,n,t){if(n.tag)return t.tag?p(1,[E(e,n[0],t[0])]):p(0,[p(1,[t[0]])]);var i=n[0];return t.tag?p(0,[p(0,[i])]):p(0,[p(2,[i,t[0]])])}function Nf(e){return p(0,[e])}function Uf(e,n){return e.tag?p(1,[e[0]]):k(n,e[0])}function Wf(e,n){var t={map:Pf},i=An(t),r=function(n,t){return If(e.append,n,t)},a={map:Pf,apply:r},o=kn(a),s={map:Pf,apply:r,pure:Nf},c=Fn(s),u={map:Pf,align:function(n,t){return Df(e.append,n,t)},alignWith:function(n,t,i){return function(e,n,t,i){return Pf(n,Df(e,t,i))}(e.append,n,t,i)}},p={map:Pf,apply:r,pure:Nf,flat_map:Uf},l=En(p),f=jn(t),d=$n(a),m=Sn(p),h={FunctorExtensions:f.FunctorExtensions,$less$$great:f.$less$$great,$less$hash$great:f.$less$hash$great,$less$:f.$less$,$$great:f.$$great,$less$at$great:f.$less$at$great,ApplyExtensions:d.ApplyExtensions,$less$star$great:d.$less$star$great,$less$star:d.$less$star,$star$great:d.$star$great,MonadExtensions:m.MonadExtensions,$great$great$eq:m.$great$great$eq,$eq$less$less:m.$eq$less$less,$great$eq$great:m.$great$eq$great,$less$eq$less:m.$less$eq$less};return{Functor:t,map:Pf,BsFunctorExtensions:i.BsFunctorExtensions,flipMap:i.flipMap,$$void:i.$$void,voidRight:i.voidRight,voidLeft:i.voidLeft,flap:i.flap,Apply:a,apply:r,BsApplyExtensions:o.BsApplyExtensions,applyFirst:o.applyFirst,applySecond:o.applySecond,map2:o.map2,map3:o.map3,map4:o.map4,map5:o.map5,tuple2:o.tuple2,tuple3:o.tuple3,tuple4:o.tuple4,tuple5:o.tuple5,mapTuple2:o.mapTuple2,mapTuple3:o.mapTuple3,mapTuple4:o.mapTuple4,mapTuple5:o.mapTuple5,Applicative:s,pure:Nf,BsApplicativeExtensions:c.BsApplicativeExtensions,liftA1:c.liftA1,all:c.all,Semialign:u,Monad:p,bind:Uf,BsMonadExtensions:l.BsMonadExtensions,flatMap:l.flatMap,flatten:l.flatten,composeKleisli:l.composeKleisli,flipComposeKleisli:l.flipComposeKleisli,liftM1:l.liftM1,when_:l.when_,unless:l.unless,Infix:h}}function Hf(e){var n=function(n,t){return A(e.bimap,(function(e){return e}),n,t)};return{mapLeft:function(n,t){return A(e.bimap,n,(function(e){return e}),t)},mapRight:n,mapError:n}}function Vf(e,n,t){return t.tag?k(e,t[0]):k(n,t[0])}function Gf(e){return e.tag?p(0,[e[0]]):p(1,[e[0]])}function Zf(e,n){return e.tag?n.tag?p(1,[n[0]]):p(1,[e[0]]):n.tag?p(1,[n[0]]):p(0,[k(e[0],n[0])])}function Kf(e,n){return e.tag?e:k(n,e[0])}function Yf(e,n){return Kf(n,e)}function Xf(e,n){return void 0!==n?p(0,[T(n)]):p(1,[e])}var Jf={bimap:function(e,n,t){return t.tag?p(1,[k(n,t[0])]):p(0,[k(e,t[0])])}},Qf=Hf(Jf);p(0,[void 0]),Qf.mapLeft,Qf.mapRight;var ed=Qf.mapError;function nd(e){return p(0,[e])}function td(e){return p(1,[e])}function id(e){return p(4,[e])}function rd(e,n){return Ir((function(n){return p(1,[k(e,void 0)])}),nd,n)}function ad(e,n){return p(5,[e,n])}function od(e,n){return p(7,[e,n])}function sd(e,n){for(;;){var t=n,i=e;switch(0|t.tag){case 0:return k(i,p(0,[t[0]]));case 1:return k(i,p(1,[t[0]]));case 2:return k(i,p(0,[k(t[0],void 0)]));case 3:n=k(t[0],void 0);continue;case 4:return k(t[0],i);case 5:var r=t[0];n=t[1],e=function(e,n){return function(t){return t.tag?k(e,t):k(e,p(0,[k(n,t[0])]))}}(i,r);continue;case 6:return cd(function(e){return function(n,t){return k(e,Zf(n,t))}}(i),t[0],t[1]);case 7:var a=t[0];n=t[1],e=function(e,n){return function(t){return t.tag?k(e,t):sd((function(n){return n.tag?k(e,n):k(e,p(0,[n[0]]))}),k(n,t[0]))}}(i,a);continue}}}function cd(e,n,t){var i={contents:void 0},r={contents:void 0};return sd((function(n){var t=r.contents;return void 0!==t?E(e,n,t):void(i.contents=n)}),n),sd((function(n){var t=i.contents;return void 0!==t?E(e,t,n):void(r.contents=n)}),t)}function ud(e,n){switch(0|n.tag){case 0:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return p(0,[function(n){return Mn.$great$great(e,t,n)}]);case 1:return n;case 2:var i=n[0];return p(2,[function(n){var t=k(i,void 0);return function(n){return Mn.$great$great(e,t,n)}}]);case 3:var r=n[0];return p(3,[function(n){return p(5,[function(n){return function(t){return Mn.$great$great(e,n,t)}},k(r,void 0)])}]);case 4:var a=n[0];return p(4,[function(n){return k(a,(function(t){if(t.tag)return k(n,t);var i=t[0];return k(n,p(0,[function(n){return Mn.$great$great(e,i,n)}]))}))}]);case 5:var o=n[0];return p(5,[function(n){var t=k(o,n);return function(n){return Mn.$great$great(e,t,n)}},n[1]]);case 6:return p(6,[p(5,[function(n,t){var i=k(n,t);return function(n){return Mn.$great$great(e,i,n)}},n[0]]),n[1]]);case 7:var s=n[0];return p(7,[function(n){return p(5,[function(n){return function(t){return Mn.$great$great(e,n,t)}},k(s,n)])},n[1]])}}(n[0],e);case 1:return p(1,[n[0]]);case 2:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return p(2,[function(n){var i=k(e,void 0);return function(e){return Mn.$great$great(i,t,e)}}]);case 1:return n;case 2:var i=n[0];return p(2,[function(n){var t=k(i,void 0),r=k(e,void 0);return function(e){return Mn.$great$great(r,t,e)}}]);case 3:var r=n[0];return p(3,[function(n){return p(5,[function(n){var t=k(e,void 0);return function(e){return Mn.$great$great(t,n,e)}},k(r,void 0)])}]);case 4:var a=n[0];return p(4,[function(n){return k(a,(function(t){if(t.tag)return k(n,t);var i=t[0],r=k(e,void 0);return k(n,p(0,[function(e){return Mn.$great$great(r,i,e)}]))}))}]);case 5:var o=n[0];return p(5,[function(n){var t=k(o,n),i=k(e,void 0);return function(e){return Mn.$great$great(i,t,e)}},n[1]]);case 6:return p(6,[p(5,[function(n,t){var i=k(n,t),r=k(e,void 0);return function(e){return Mn.$great$great(r,i,e)}},n[0]]),n[1]]);case 7:var s=n[0];return p(7,[function(n){return p(5,[function(n){var t=k(e,void 0);return function(e){return Mn.$great$great(t,n,e)}},k(s,n)])},n[1]])}}(n[0],e);case 3:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return p(3,[function(n){return p(5,[function(e){return function(n){return Mn.$great$great(e,t,n)}},k(e,void 0)])}]);case 1:return n;case 2:var i=n[0];return p(3,[function(n){return p(5,[function(e){var n=k(i,void 0);return function(t){return Mn.$great$great(e,n,t)}},k(e,void 0)])}]);case 3:var r=n[0];return p(3,[function(n){return p(7,[function(e){return p(5,[function(n){return function(t){return Mn.$great$great(e,n,t)}},k(r,void 0)])},k(e,void 0)])}]);case 4:var a=n[0];return p(4,[function(n){return sd((function(e){if(e.tag)return k(n,e);var t=e[0];return k(a,(function(e){if(e.tag)return k(n,e);var i=e[0];return k(n,p(0,[function(e){return Mn.$great$great(t,i,e)}]))}))}),k(e,void 0))}]);case 5:var o=n[1],s=n[0];return p(3,[function(n){return p(7,[function(e){return p(5,[function(n){var t=k(s,n);return function(n){return Mn.$great$great(e,t,n)}},o])},k(e,void 0)])}]);case 6:var c=n[1],u=n[0];return p(3,[function(n){return p(7,[function(e){return p(7,[function(n){return p(5,[function(t){var i=k(n,t);return function(n){return Mn.$great$great(e,i,n)}},c])},u])},k(e,void 0)])}]);case 7:var l=n[1],f=n[0];return p(3,[function(n){return p(7,[function(e){return p(7,[function(n){return p(5,[function(n){return function(t){return Mn.$great$great(e,n,t)}},k(f,n)])},l])},k(e,void 0)])}])}}(n[0],e);case 4:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var i=e[0];return k(n,p(0,[function(e){return Mn.$great$great(i,t,e)}]))}))}]);case 1:return n;case 2:var i=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var t=e[0],r=k(i,void 0);return k(n,p(0,[function(e){return Mn.$great$great(t,r,e)}]))}))}]);case 3:var r=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var t=e[0];return sd((function(e){if(e.tag)return k(n,e);var i=e[0];return k(n,p(0,[function(e){return Mn.$great$great(t,i,e)}]))}),k(r,void 0))}))}]);case 4:var a=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var t=e[0];return k(a,(function(e){if(e.tag)return k(n,e);var i=e[0];return k(n,p(0,[function(e){return Mn.$great$great(t,i,e)}]))}))}))}]);case 5:var o=n[1],s=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var t=e[0];return sd(n,p(5,[function(e){var n=k(s,e);return function(e){return Mn.$great$great(t,n,e)}},o]))}))}]);case 6:var c=n[1],u=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var t=e[0];return sd(n,p(7,[function(e){return p(5,[function(n){var i=k(e,n);return function(e){return Mn.$great$great(t,i,e)}},c])},u]))}))}]);case 7:var l=n[1],f=n[0];return p(4,[function(n){return k(e,(function(e){if(e.tag)return k(n,e);var t=e[0];return sd(n,p(7,[function(e){return p(5,[function(e){return function(n){return Mn.$great$great(t,e,n)}},k(f,e)])},l]))}))}])}}(n[0],e);case 5:return function(e,n,t){return p(7,[function(n){return p(5,[function(t){var i=k(e,n);return function(e){return Mn.$great$great(i,t,e)}},t])},n])}(n[0],n[1],e);case 6:return function(e,n,t){return p(7,[function(e){return p(7,[function(n){return p(5,[function(t){var i=k(e,n);return function(e){return Mn.$great$great(i,t,e)}},t])},n])},e])}(n[0],n[1],e);case 7:return function(e,n,t){return p(7,[function(n){return p(7,[function(e){return p(5,[function(n){return function(t){return Mn.$great$great(e,n,t)}},t])},k(e,n)])},n])}(n[0],n[1],e)}}function pd(e,n){switch(0|n.tag){case 0:return p(0,[n[0]]);case 1:return p(1,[k(e,n[0])]);case 2:return p(2,[n[0]]);case 3:var t=n[0];return p(3,[function(n){return pd(e,k(t,void 0))}]);case 4:var i=n[0];return p(4,[function(n){return k(i,(function(t){return k(n,E(ed,e,t))}))}]);case 5:return p(5,[n[0],pd(e,n[1])]);case 6:return p(6,[pd(e,n[0]),pd(e,n[1])]);case 7:var r=n[0];return p(7,[function(n){return pd(e,k(r,n))},pd(e,n[1])])}}function ld(e,n){switch(0|n.tag){case 0:return p(0,[n[0]]);case 1:return k(e,n[0]);case 2:return p(2,[n[0]]);case 3:var t=n[0];return p(3,[function(n){return ld(e,k(t,void 0))}]);case 4:var i=n[0];return p(4,[function(n){return k(i,(function(t){return t.tag?sd(n,k(e,t[0])):k(n,p(0,[t[0]]))}))}]);case 5:return function(e,n,t){switch(0|t.tag){case 0:return ld(e,p(0,[k(n,t[0])]));case 1:return k(e,t[0]);case 2:var i=t[0];return ld(e,p(2,[function(e){return k(n,k(i,void 0))}]));case 3:var r=t[0];return ld(e,p(3,[function(e){return p(5,[n,k(r,void 0)])}]));case 4:var a=t[0];return p(4,[function(t){return k(a,(function(i){return i.tag?sd(t,k(e,i[0])):k(t,p(0,[k(n,i[0])]))}))}]);case 5:var o=t[0];return ld(e,p(5,[function(e){return Mn.$great$great(o,n,e)},t[1]]));case 6:return ld(e,p(6,[ud(p(0,[n]),t[0]),t[1]]));case 7:var s=t[0];return ld(e,p(7,[function(e){return Mn.$great$great(s,(function(e){return p(5,[n,e])}),e)},t[1]]))}}(e,n[0],n[1]);case 6:return function(e,n,t){switch(0|t.tag){case 0:var i=t[0];return ld(e,p(5,[function(e){return k(e,i)},n]));case 1:return k(e,t[0]);case 2:var r=t[0];return ld(e,p(5,[function(e){return k(e,k(r,void 0))},n]));case 3:var a=t[0];return ld(e,p(3,[function(e){return p(6,[n,k(a,void 0)])}]));case 4:var o=t[0];return p(4,[function(t){return k(o,(function(i){return i.tag?sd(t,k(e,i[0])):sd(t,ld(e,p(6,[n,p(0,[i[0]])])))}))}]);case 5:return ld(e,p(6,[ud(n,p(0,[t[0]])),t[1]]));case 6:return ld(e,p(6,[ud(n,t[0]),t[1]]));case 7:var s=t[1],c=t[0];return ld(e,p(7,[function(e){return p(7,[function(n){return p(5,[$(e),k(c,n)])},s])},n]))}}(e,n[0],n[1]);case 7:return function(e,n,t){switch(0|t.tag){case 0:return ld(e,k(n,t[0]));case 1:return k(e,t[0]);case 2:var i=t[0];return ld(e,p(3,[function(e){return k(n,k(i,void 0))}]));case 3:var r=t[0];return ld(e,p(3,[function(e){return p(7,[n,k(r,void 0)])}]));case 4:var a=t[0];return p(4,[function(t){return k(a,(function(i){return i.tag?sd(t,k(e,i[0])):sd(t,ld(e,k(n,i[0])))}))}]);case 5:var o=t[0];return ld(e,p(7,[function(e){return Mn.$great$great(o,n,e)},t[1]]));case 6:var s=t[0];return ld(e,p(7,[function(e){return p(7,[function(t){return k(n,k(t,e))},s])},t[1]]));case 7:var c=t[0];return ld(e,p(7,[function(e){return p(7,[n,k(c,e)])},t[1]]))}}(e,n[0],n[1])}}function fd(e,n){return ld((function(n){return p(0,[k(e,n)])}),n)}function dd(e,n,t){return pd(n,p(5,[e,t]))}var md={bimap:dd},hd=Hf(md),vd=hd.mapError;p(0,[void 0]),p(0,[void 0]),hd.mapLeft,hd.mapRight;function gd(e,n){return e+n}var xd={append:gd};function bd(e){return-1*e}var yd={Magma:xd,Medial_Magma:xd,Semigroup:{append:gd},Monoid:{append:gd,empty:0},Quasigroup:{append:gd},Medial_Quasigroup:{append:gd},Loop:{append:gd,empty:0},Group:{append:gd,empty:0,inverse:bd},Abelian_Group:{append:gd,empty:0,inverse:bd}};function wd(e,n){return e*n}var _d={append:wd},kd={Magma:_d,Medial_Magma:_d,Semigroup:{append:wd},Monoid:{append:wd,empty:1},Quasigroup:{append:wd},Medial_Quasigroup:{append:wd},Loop:{append:wd,empty:1}};var $d={eq:Ke},Ed={eq:Ke,compare:Ye};function Sd(e,n){return e+n}function Ad(e,n){return e*n}function jd(e,n){return e-n}function Fd(e){return 1}function Od(e,n){return e/n}function Cd(e,n){return 0}var Md={add:Sd,zero:0,multiply:Ad,one:1,subtract:jd,degree:Fd,divide:Od,modulo:Cd},qd=Xe(xd),Rd=Xe(_d),Td=rn($d),zd=an(Ed),Bd=on(Md);Td.$eq$pipe$eq,zd.$less$pipe$pipe,zd.$pipe$pipe$great,zd.$less$pipe$eq,zd.$great$pipe$eq,Bd.$pipe$plus$pipe,Bd.$pipe$star$pipe,Bd.$pipe$neg$pipe,Bd.$pipe$slash$pipe,Bd.$pipe$percent$pipe;function Ld(e,n){return e===n}var Pd=Ld;Number.NaN;function Id(e,n){return e+n}function Dd(e,n){return e*n}var Nd={eq:Ld,compare:Ed.compare},Ud=xi(Nd),Wd=Ud.OrdRingExtensions;function Hd(e,n){return e-n}var Vd={add:Id,zero:0,multiply:Dd,one:1,subtract:Hd},Gd=Mp(Vd),Zd=k(Wd,Vd);Zd.abs;Ud.compareWithConversion,Ud.compareReversed,Ud.OrdReversed,Ud.compareAsInt,Ud.min,Ud.max,Ud.lessThan,Ud.lt,Ud.lessThanOrEq,Ud.lte,Ud.greaterThan,Ud.gt,Ud.greaterThanOrEq,Ud.gte,Ud.clamp,Ud.between,Ud.OrdNamed,Ud.OrdBy,Gd.$neg,Gd.negate,Zd.signum;var Kd=[];function Yd(e,n,t){if(n<0||t<0||n>(e.length-t|0))throw[d,"String.sub / Bytes.sub"];var i=bi(t);return yi(e,n,i,0,t),i}function Xd(e){var n=e-9|0;return n>4||n<0?23===n:2!==n}function Jd(e){var n=e-9|0;return n>4||n<0?23===n:2!==n}function Qd(e){return""===e||!Jd(e.charCodeAt(0))&&!Jd(e.charCodeAt(e.length-1|0))?e:wi(function(e){for(var n=e.length,t=0;t<n&&Xd(e[t]);)t=t+1|0;for(var i=n-1|0;i>=t&&Xd(e[i]);)i=i-1|0;return i>=t?Yd(e,t,1+(i-t|0)|0):Kd}(_i(e)))}function em(e,n){return e+n}var nm=vr({append:em}),tm={append:em,empty:""},im=dr(tm);function rm(e,n){return e===n}var am={eq:rm},om=ii(am),sm={eq:rm,compare:it.compare},cm=xi(sm);jc(sm),hp(sm);nm.concatNamed,im.BsMonoidExtensions,im.guard,im.power,om.eqWithConversion,om.notEq,om.eqInverted,om.EqInverted,om.EqBy,cm.compareWithConversion,cm.compareReversed,cm.OrdReversed,cm.compareAsInt,cm.min,cm.max,cm.lessThan,cm.lt,cm.lessThanOrEq,cm.lte,cm.greaterThan,cm.gt,cm.greaterThanOrEq,cm.gte,cm.clamp,cm.between,cm.OrdRingExtensions,cm.OrdNamed,cm.OrdBy;var um=k(Ga,sm);var pm=k(Za,sm);var lm=k(Ha,tm),fm=lm.foldWithMonoid,dm=lm.intercalate;um.contains,um.indexOf,pm.min,pm.max,lm.BsFoldableMonoidExtensions,lm.foldMap;var mm=k(Ga,Ip);var hm=k(Za,Ip);var vm=k(Va,bp.Monoid),gm=k(Va,wp.Monoid),xm=(mm.contains,mm.indexOf,hm.min,hm.max,k(Ga,Nd));var bm=k(Za,Nd);var ym=k(Va,yd.Monoid),wm=k(Va,kd.Monoid);xm.contains,xm.indexOf,bm.min,bm.max,Ka(Fr);var _m=Wf(ha),km=ua(_m.Applicative);km.map,km.fold_left,km.fold_right,km.Fold_Map,km.Fold_Map_Any,km.Fold_Map_Plus,km.traverse,km.sequence;var $m=jn(ba),Em=fr(Ca),Sm=$n(_a),Am=Sn(ja),jm=($m.FunctorExtensions,$m.$less$$great,$m.$less$hash$great,$m.$less$,$m.$$great,$m.$less$at$great,Em.$less$pipe$great,Sm.ApplyExtensions,Sm.$less$star$great,Sm.$less$star,Sm.$star$great,Am.MonadExtensions,Am.$great$great$eq,Am.$eq$less$less,Am.$great$eq$great,Am.$less$eq$less,xa),Fm=qa,Om=Ua,Cm=Wa,Mm=Ya,qm=Xa,Rm=oo,Tm=function(e,n){return Rn(n,e)},zm=co;var Bm=k(Js,sm);var Lm=k(Qs,sm);var Pm=k(Ys,tm),Im=Pm.foldWithMonoid,Dm=Pm.intercalate;Bm.contains,Bm.indexOf,Lm.min,Lm.max,Pm.BsFoldableMonoidExtensions,Pm.foldMap;var Nm=k(Js,Ip);var Um=k(Qs,Ip);var Wm=k(Xs,bp.Monoid),Hm=k(Xs,wp.Monoid),Vm=(Nm.contains,Nm.indexOf,Um.min,Um.max,k(Js,Nd));var Gm=k(Qs,Nd);var Zm=k(Xs,yd.Monoid),Km=k(Xs,kd.Monoid);Vm.contains,Vm.indexOf,Gm.min,Gm.max,k(Jt,Fr);var Ym=Wf(bs);k(Jt,Ym.Applicative);var Xm=jn(_s),Jm=fr(Rs),Qm=$n(Es),eh=Sn(Cs),nh=(Xm.FunctorExtensions,Xm.$less$$great,Xm.$less$hash$great,Xm.$less$,Xm.$$great,Xm.$less$at$great,Jm.$less$pipe$great,Qm.ApplyExtensions,Qm.$less$star$great,Qm.$less$star,Qm.$star$great,eh.MonadExtensions,eh.$great$great$eq,eh.$eq$less$less,eh.$great$eq$great,eh.$less$eq$less,function(e,n){return U(n,e)});var th=Pr(sm);th.compare;var ih=Pr(Ip);ih.compare;var rh=Pr(Nd);rh.compare;var ah=xr(yr),oh=jn(kr),sh=fr(nr),ch=$n(Sr),uh=Sn(Mr);ah.SE,ah.$less$less$less,ah.$great$great$great,oh.FunctorExtensions,oh.$less$$great,oh.$less$hash$great,oh.$less$,oh.$$great,oh.$less$at$great,sh.$less$pipe$great,ch.ApplyExtensions,ch.$less$star$great,ch.$less$star,ch.$star$great,uh.MonadExtensions,uh.$great$great$eq,uh.$eq$less$less,uh.$great$eq$great,uh.$less$eq$less;var ph=_r,lh=Lr,fh=Dr,dh=Ur,mh=t(9);function hh(e){return{address:R(e.address),code:e.code,dest:R(e.dest),errno:e.errno,info:R(e.info),message:e.message,path:R(e.path),port:R(e.port),syscall:e.syscall}}function vh(e){var n=hh(e);switch(n.code){case"EACCES":return p(0,[n]);case"EADDRINUSE":return p(1,[n]);case"ECONNREFUSED":return p(2,[n]);case"ECONNRESET":return p(3,[n]);case"EEXIST":return p(4,[n]);case"EISDIR":return p(5,[n]);case"EMFILE":return p(6,[n]);case"ENOENT":return p(7,[n]);case"ENOTDIR":return p(8,[n]);case"ENOTEMPTY":return p(9,[n]);case"ENOTFOUND":return p(10,[n]);case"EPERM":return p(11,[n]);case"EPIPE":return p(12,[n]);case"ETIMEDOUT":return p(13,[n]);default:return p(14,[n])}}function gh(e){return p(15,[e])}function xh(e){return function(e,n,t){return void 0===t.syscall?n(t):e(t)}(vh,gh,e)}function bh(e,n){var t=void 0!==e?e:"utf-8";return id((function(e){mh.readFile(n,{encoding:t},(function(n,t){return k(e,E(ed,xh,Gf(Xf(t,null===n?void 0:q(n)))))}))}))}var yh=t(43);var wh=/^([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2})$/;function _h(e){return null===(n=wh.exec(e))?void 0:q(n);var n}function kh(e){var n=yh.parseMetadata(e),t=n[0],i=function(e){return E(lh,(function(e){return nh(0,e)}),z(e,"title"))}(t),r=function(e){return Yf((function(e){var n=e.slice(1).map((function(e){return E(lh,Gp,null==e?void 0:q(e))}));if(5!==n.length)return p(1,[1]);var t=n[0];if(void 0===t)return p(1,[1]);var i=n[1];if(void 0===i)return p(1,[1]);var r=n[2];if(void 0===r)return p(1,[1]);var a=n[3];if(void 0===a)return p(1,[1]);var o=n[4];return void 0!==o?p(0,[c(t,i,r,a,o)]):p(1,[1])}),Yf((function(e){return Xf(1,_h(e))}),Xf(0,E(lh,(function(e){return nh(0,e)}),z(e,"date")))))}(t),a=function(e){return ph(Mm,dh((function(e){return e.length>0}))(z(e,"tags")))}(t);return void 0!==i?r.tag?p(1,void 0!==a?[[r[0]]]:[2]):void 0!==a?p(0,[{title:i,date:r[0],tags:a,text:n[1]}]):p(1,[1]):r.tag||void 0===a?p(1,[2]):p(1,[0])}function $h(e){return od((function(n){return n.filter((function(e){return!!e.name.toLowerCase().endsWith(".md")&&!e.isDirectory()})).map((function(n){var t=n.name,i=u.join(e,t);return od((function(e){return Vf(td,nd,E(ed,(function(e){return p(2,[t,e])}),kh(e)))}),E(vd,(function(e){return p(1,[t,e])}),od((function(e){return bh(void 0,i)}),p(2,[function(e){console.log('Reading entry from "'+String(i)+'"')}]))))})).reduce((function(e,n){return od((function(e){return ad((function(n){return[n,e]}),n)}),e)}),p(0,[0]))}),E(vd,(function(e){return p(0,[e])}),od((function(n){return i=e,r=void 0!==(t=void 0)?t:"utf-8",id((function(e){mh.readdir(i,{withFileTypes:!0,encoding:r},(function(n,t){return k(e,E(ed,xh,Gf(Xf(t,null===n?void 0:q(n)))))}))}));var t,i,r}),p(2,[function(n){console.log('Reading from entries directory "'+String(e)+'"')}]))))}function Eh(e,n){return od((function(n){return dd((function(e){return{about:e,entries:n}}),(function(e){return p(0,[e])}),(t=e,od((function(e){return bh(void 0,t)}),p(2,[function(e){console.log('Reading about text from "'+String(t)+'"')}]))));var t}),E(vd,(function(e){return p(1,[e])}),$h(n)))}var Sh={setStatusCode:function(e,n){n.statusCode=e},setContentType:function(e){return function(n){n.setHeader("Content-Type",e)}},setContentLength:function(e){var n=String(e);return function(e){e.setHeader("Content-Length",n)}},setLastModified:function(e){var n=e.toUTCString();return function(e){e.setHeader("Last-Modified",n)}}},Ah=t(44);var jh=p(0,[void 0,400]),Fh=t(10);var Oh={initial:-878767996,inherit_:-601204732,unset:653193961,toString:function(e){return-601204732!==e?e>=653193961?"unset":"initial":"inherit"}};var Ch={pct:function(e){return[-119887163,e]},toString:function(e){return e[1].toString()+"%"}};function Mh(e){if("number"==typeof e)return"0";var n=e[0];if(n>=22632)return n>=25092?25096!==n?n>=26433?n>=5691738?e[1].toString()+"rem":e[1].toString()+"vw":n>=26418?e[1].toString()+"vh":e[1].toString()+"pt":e[1].toString()+"px":n>=24416?n>=25075?e[1].toString()+"pc":e[1].toString()+"mm":n>=22643?e[1].toString()+"ex":e[1].toString()+"em";if(n>=-833470756)return n>=22181?n>=22186?e[1].toString()+"cm":e[1].toString()+"ch":n>=-119887163?e[1].toString()+"%":e[1].toString()+"vmin";if(n>=-977586742)return n>=-833472530?e[1].toString()+"vmax":e[1].toString()+"in";if(n>=-1040484748)return e[1].toString()+"px";var t=e[1];return t[0]>=5745024?"calc("+Mh(t[1])+" - "+Mh(t[2])+")":"calc("+Mh(t[1])+" + "+Mh(t[2])+")"}var qh={ch:function(e){return[22181,e]},em:function(e){return[22632,e]},ex:function(e){return[22643,e]},rem:function(e){return[5691738,e]},vh:function(e){return[26418,e]},vw:function(e){return[26433,e]},vmin:function(e){return[-833470756,e]},vmax:function(e){return[-833472530,e]},px:function(e){return[25096,e]},pxFloat:function(e){return[-1040484748,e]},cm:function(e){return[22186,e]},mm:function(e){return[24416,e]},inch:function(e){return[-977586742,e]},pc:function(e){return[25075,e]},pt:function(e){return[25092,e]},zero:-789508312,toString:Mh};function Rh(e){var n=e[0];return n>=4995526?n>=5690837?e[1].toString()+"rad":e[1].toString()+"deg":n>=-855250051?e[1].toString()+"turn":e[1].toString()+"grad"}var Th={deg:function(e){return[4995526,e]},rad:function(e){return[5690837,e]},grad:function(e){return[-999567410,e]},turn:function(e){return[-855250051,e]},toString:Rh};var zh={ltr:5396714,rtl:5695082,toString:function(e){return e>=5695082?"rtl":"ltr"}};var Bh={absolute:-1013592457,relative:903134412,$$static:100392110,fixed:10615156,sticky:188263721,toString:function(e){return 10615156!==e?e>=188263721?e>=903134412?"relative":"sticky":e>=100392110?"static":"absolute":"fixed"}};var Lh={none:-922086728,both:-1055160191,horizontal:365165796,vertical:-367674250,block:888960333,inline:423610969,toString:function(e){return e>=-367674250?e>=423610969?e>=888960333?"block":"inline":e>=365165796?"horizontal":"vertical":e>=-922086728?"none":"both"}};var Ph={normal:812216871,smallCaps:-386684792,toString:function(e){return e>=812216871?"normal":"smallCaps"}};var Ih={normal:812216871,italic:107228912,oblique:734792881,toString:function(e){return 734792881!==e?e>=812216871?"normal":"italic":"oblique"}};var Dh={hidden:-862584982,visible:589592690,scroll:-949692403,auto:-1065951377,toString:function(e){return e>=-862584982?e>=589592690?"visible":"hidden":e>=-949692403?"scroll":"auto"}};var Nh={thin:-855898535,extraLight:-21160922,light:-184774442,medium:-20425611,semiBold:-812709613,bold:-1055161979,extraBold:-81801163,lighter:434326211,bolder:-534575822,toString:function(e){return"number"==typeof e?e>=-81801163?e>=-20425611?e>=812216871?e>=888264127?"900":"400":e>=434326211?"lighter":"500":e>=-21160922?"200":"800":-855898535!==e?e>=-534575822?e>=-184774442?"300":"bolder":e>=-812709613?"600":"700":"100":e[1].toString()}};var Uh={auto:-1065951377,$$default:465819841,none:-922086728,contextMenu:626862894,help:-989121855,pointer:-786317123,progress:103479213,wait:-822977931,cell:-1044569694,crosshair:180897442,text:-856044371,verticalText:381626435,alias:563171728,copy:-1044071499,move:-933174511,noDrop:302348560,notAllowed:939907157,grab:-999567412,grabbing:-19620980,allScroll:365450254,colResize:676920916,rowResize:-840286290,nResize:457757954,eResize:621258809,sResize:-348903737,wResize:294257099,neResize:951366027,nwResize:624364317,seResize:-693048282,swResize:-1020049992,ewResize:577832966,nsResize:-18796519,neswResize:477181167,nwseResize:82328943,zoomIn:-88732200,zoomOut:-459627717,toString:function(e){return e>=82328943?e>=477181167?e>=624364317?626862894!==e?e>=939907157?e>=951366027?"ne-resize":"not-allowed":e>=676920916?"col-resize":"nw-resize":"context-menu":e>=577832966?e>=621258809?"e-resize":"ew-resize":e>=563171728?"alias":"nesw-resize":e>=302348560?365450254!==e?e>=457757954?e>=465819841?"default":"n-resize":e>=381626435?"vertical-text":"no-drop":"all-scroll":e>=180897442?e>=294257099?"w-resize":"crosshair":e>=103479213?"progress":"nwse-resize":e>=-840286290?e>=-459627717?-348903737!==e?e>=-19620980?e>=-18796519?"ns-resize":"grabbing":e>=-88732200?"zoom-in":"zoom-out":"s-resize":e>=-786317123?e>=-693048282?"se-resize":"pointer":e>=-822977931?"wait":"row-resize":e>=-999567412?-989121855!==e?e>=-922086728?e>=-856044371?"text":"none":e>=-933174511?"move":"grab":"help":e>=-1044071499?e>=-1020049992?"sw-resize":"copy":e>=-1044569694?"cell":"auto"}};function Wh(e){return e[1].toString()+"%"}function Hh(e){if("number"==typeof e)return e>=582626130?"transparent":"currentColor";var n=e[0];if(-878128972!==n){if(n>=5197569){if(n>=5692173){var t=e[1];return"rgb("+t[0].toString()+", "+t[1].toString()+", "+t[2].toString()+")"}var i=e[1];return"hsl("+Rh(i[0])+", "+Wh(i[1])+", "+Wh(i[2])+")"}if(n>=5194459)return"#"+e[1];var r=e[1];return"hsla("+Rh(r[0])+", "+Wh(r[1])+", "+Wh(r[2])+", "+function(e){return e[0]>=5496390?e[1].toString():e[1].toString()+"%"}(r[3])+")"}var a=e[1];return"rgba("+a[0].toString()+", "+a[1].toString()+", "+a[2].toString()+", "+a[3].toString()+")"}var Vh={toString:function(e){return 423610969!==e?e>=888960333?"block":"run-in":"inline"}};var Gh={toString:function(e){return-999565626!==e?e>=182695950?"table":"flex":"grid"}};var Zh={toString:function(e){return"list-item"}};var Kh={toString:function(e){return e>=606419204?e>=850209563?e>=1054826616?"table-caption":"table-column-group":e>=793912528?"table-cell":"table-header-group":e>=-836725517?e>=97122692?"table-column":"table-row-group":e>=-843129172?"table-row":"table-footer-group"}};var Yh={toString:function(e){return e>=790889754?"contents":"none"}};var Xh={toString:function(e){return e>=53323314?e>=64712127?"inline-grid":"inline-flex":e>=-147785676?"inline-block":"inline-table"}};var Jh={toString:function(e){return e>=135477484?e>=378951208?"row-reverse":"column-reverse":e>=5693978?"row":"column"}};var Qh={areas:function(e){return[629510214,e]},toString:function(e){return"number"==typeof e?"none":Qd(qi((function(e,n){return e+"'"+n+"' "}),"",e[1]))}};var ev={auto:-1065951377,ident:function(e){return[930693872,e]},num:function(e){return[5496390,e]},numIdent:function(e,n){return[-192325942,[e,n]]},span:function(e){return[-866592054,e]},toString:function(e){if("number"==typeof e)return"auto";var n=e[0];if(n>=5496390)return n>=930693872?e[1]:String(e[1]);if(n>=-192325942){var t=e[1];return String(t[0])+" "+t[1]}var i=e[1];return"span "+(i[0]>=930693872?i[1]:String(i[1]))}};var nv={toString:function(e){return e>=-195805336?"fit-content":"auto"}};var tv={toString:function(e){return"auto"}};function iv(e){for(var n=zn(e,(function(e){return Hh(e[1])+" "+Mh(e[0])})),t="";;){var i=t,r=n;if(!r)return i;var a=r[1],o=r[0];if(!a)return i+o;t=i+(o+", "),n=a}}var rv={marginBox:-298658179,borderBox:9307263,paddingBox:972575930,contentBox:-1008848302,fillBox:65166152,strokeBox:-229710541,viewBox:481366182,toString:function(e){return e>=9307263?e>=481366182?e>=972575930?"padding-box":"view-box":e>=65166152?"fill-box":"border-box":-298658179!==e?e>=-229710541?"stroke-box":"content-box":"margin-box"}};var av={linear:-325037595,ease:-1022587922,easeIn:138027891,easeOut:715748672,easeInOut:-960651557,stepStart:-193525386,stepEnd:20933615,steps:function(e,n){return[68058023,[e,n]]},cubicBezier:function(e,n,t,i){return[-554785527,[e,n,t,i]]},toString:function(e){if("number"==typeof e)return e>=-193525386?e>=138027891?e>=715748672?"ease-out":"ease-in":e>=20933615?"step-end":"step-start":-960651557!==e?e>=-325037595?"linear":"ease":"ease-in-out";if(e[0]>=68058023){var n=e[1],t=n[0];return n[1]>=67859554?"steps("+t.toString()+", start)":"steps("+t.toString()+", end)"}var i=e[1];return"cubic-bezier("+i[0].toString()+", "+i[1].toString()+", "+i[2].toString()+", "+i[3].toString()+")"}},ov={translate:function(e,n){return[-914368690,[e,n]]},translate3d:function(e,n,t){return[178189215,[e,n,t]]},translateX:function(e){return[106728778,e]},translateY:function(e){return[106728779,e]},translateZ:function(e){return[106728780,e]},scale:function(e,n){return[-120664438,[e,n]]},scale3d:function(e,n,t){return[-452513317,[e,n,t]]},scaleX:function(e){return[1009117838,e]},scaleY:function(e){return[1009117839,e]},scaleZ:function(e){return[1009117840,e]},rotate:function(e){return[-887077285,e]},rotate3d:function(e,n,t,i){return[142802924,[e,n,t,i]]},rotateX:function(e){return[-249738851,e]},rotateY:function(e){return[-249738850,e]},rotateZ:function(e){return[-249738849,e]},skew:function(e,n){return[-866839798,[e,n]]},skewX:function(e){return[-31746546,e]},skewY:function(e){return[-31746545,e]},toString:function(e){var n=e[0];if(n>=-120664438){if(!(n>=106728778)){if(-31746546===n)return"skewX("+Rh(e[1])+")";if(n>=-31746545)return"skewY("+Rh(e[1])+")";var t=e[1],i=t[0],r=t[1];return"scale("+i.toString()+", "+r.toString()+")"}if(n>=178189215){if(!(n>=1009117838)){var a=e[1],o=a[0],s=a[1],c=a[2];return"translate3d("+Mh(o)+", "+Mh(s)+", "+Mh(c)+")"}switch(n-1009117838|0){case 0:return"scaleX("+e[1].toString()+")";case 1:return"scaleY("+e[1].toString()+")";case 2:return"scaleZ("+e[1].toString()+")"}}else{if(n>=142802924){var u=e[1];return"rotate3d("+u[0].toString()+", "+u[1].toString()+", "+u[2].toString()+", "+Rh(u[3])+")"}switch(n-106728778|0){case 0:return"translateX("+Mh(e[1])+")";case 1:return"translateY("+Mh(e[1])+")";case 2:return"translateZ("+Mh(e[1])+")"}}}else{if(!(n>=-887077285)){if(n<-914368690)return"perspective("+e[1].toString()+")";var p=e[1];return"translate("+Mh(p[0])+", "+Mh(p[1])+")"}if(!(n>=-452513317)){if(n<-866839798)return"rotate("+Rh(e[1])+")";var l=e[1];return"skew("+Rh(l[0])+", "+Rh(l[1])+")"}if(!(n>=-249738851)){var f=e[1];return"scale3d("+f[0].toString()+", "+f[1].toString()+", "+f[2].toString()+")"}switch(n+249738851|0){case 0:return"rotateX("+Rh(e[1])+")";case 1:return"rotateY("+Rh(e[1])+")";case 2:return"rotateZ("+Rh(e[1])+")"}}}},sv={rgb:function(e,n,t){return[5692173,[e,n,t]]},rgba:function(e,n,t,i){return[-878128972,[e,n,t,i]]},hsl:function(e,n,t){return[5197569,[e,[-119887163,n],[-119887163,t]]]},hsla:function(e,n,t,i){return[-988425664,[e,[-119887163,n],[-119887163,t],i]]},hex:function(e){return[5194459,e]},transparent:582626130,currentColor:292050538,toString:Hh},cv={linearGradient:function(e,n){return[616379637,[e,n]]},radialGradient:function(e){return[119548911,e]},repeatingLinearGradient:function(e,n){return[-160280644,[e,n]]},repeatingRadialGradient:function(e){return[-657111370,e]},toString:function(e){var n=e[0];if(n>=119548911){if(n<616379637)return"radial-gradient("+iv(e[1])+")";var t=e[1];return"linear-gradient("+Rh(t[0])+", "+iv(t[1])+")"}if(n<-160280644)return"repeating-radial-gradient("+iv(e[1])+")";var i=e[1];return"repeating-linear-gradient("+Rh(i[0])+", "+iv(i[1])+")"}},uv={toString:function(e){return"number"==typeof e?e>=-504775901?-270962810!==e?e>=-46800986?e>=563809289?"fangsong":"fantasy":e>=-97640579?"serif":"system-ui":"emoji":e>=-718373334?e>=-555363901?"monospace":"sans-serif":e>=-862985531?"cursive":"math":e[1]}};sv.hex("F0F8FF"),sv.hex("FAEBD7"),sv.hex("00FFFF"),sv.hex("7FFFD4"),sv.hex("F0FFFF"),sv.hex("F5F5DC"),sv.hex("FFE4C4"),sv.hex("000000"),sv.hex("FFEBCD"),sv.hex("0000FF"),sv.hex("8A2BE2"),sv.hex("A52A2A"),sv.hex("DEB887"),sv.hex("5F9EA0"),sv.hex("7FFF00"),sv.hex("D2691E"),sv.hex("FF7F50"),sv.hex("6495ED"),sv.hex("FFF8DC"),sv.hex("DC143C"),sv.hex("00FFFF"),sv.hex("00008B"),sv.hex("008B8B"),sv.hex("B8860B"),sv.hex("A9A9A9"),sv.hex("006400"),sv.hex("A9A9A9"),sv.hex("BDB76B"),sv.hex("8B008B"),sv.hex("556B2F"),sv.hex("FF8C00"),sv.hex("9932CC"),sv.hex("8B0000"),sv.hex("E9967A"),sv.hex("8FBC8F"),sv.hex("483D8B"),sv.hex("2F4F4F"),sv.hex("2F4F4F"),sv.hex("00CED1"),sv.hex("9400D3"),sv.hex("FF1493"),sv.hex("00BFFF"),sv.hex("696969"),sv.hex("696969"),sv.hex("1E90FF"),sv.hex("B22222"),sv.hex("FFFAF0"),sv.hex("228B22"),sv.hex("FF00FF"),sv.hex("DCDCDC"),sv.hex("F8F8FF"),sv.hex("FFD700"),sv.hex("DAA520"),sv.hex("808080"),sv.hex("008000"),sv.hex("ADFF2F"),sv.hex("808080"),sv.hex("F0FFF0"),sv.hex("FF69B4"),sv.hex("CD5C5C"),sv.hex("4B0082"),sv.hex("FFFFF0"),sv.hex("F0E68C"),sv.hex("E6E6FA"),sv.hex("FFF0F5"),sv.hex("7CFC00"),sv.hex("FFFACD"),sv.hex("ADD8E6"),sv.hex("F08080"),sv.hex("E0FFFF"),sv.hex("FAFAD2"),sv.hex("D3D3D3"),sv.hex("90EE90"),sv.hex("D3D3D3"),sv.hex("FFB6C1"),sv.hex("FFA07A"),sv.hex("20B2AA"),sv.hex("87CEFA"),sv.hex("778899"),sv.hex("778899"),sv.hex("B0C4DE"),sv.hex("FFFFE0"),sv.hex("00FF00"),sv.hex("32CD32"),sv.hex("FAF0E6"),sv.hex("FF00FF"),sv.hex("800000"),sv.hex("66CDAA"),sv.hex("0000CD"),sv.hex("BA55D3"),sv.hex("9370DB"),sv.hex("3CB371"),sv.hex("7B68EE"),sv.hex("00FA9A"),sv.hex("48D1CC"),sv.hex("C71585"),sv.hex("191970"),sv.hex("F5FFFA"),sv.hex("FFE4E1"),sv.hex("FFE4B5"),sv.hex("FFDEAD"),sv.hex("000080"),sv.hex("FDF5E6"),sv.hex("808000"),sv.hex("6B8E23"),sv.hex("FFA500"),sv.hex("FF4500"),sv.hex("DA70D6"),sv.hex("EEE8AA"),sv.hex("98FB98"),sv.hex("AFEEEE"),sv.hex("DB7093"),sv.hex("FFEFD5"),sv.hex("FFDAB9"),sv.hex("CD853F"),sv.hex("FFC0CB"),sv.hex("DDA0DD"),sv.hex("B0E0E6"),sv.hex("800080"),sv.hex("663399"),sv.hex("FF0000"),sv.hex("BC8F8F"),sv.hex("4169E1"),sv.hex("8B4513"),sv.hex("FA8072"),sv.hex("F4A460"),sv.hex("2E8B57"),sv.hex("FFF5EE"),sv.hex("A0522D"),sv.hex("C0C0C0"),sv.hex("87CEEB"),sv.hex("6A5ACD"),sv.hex("708090"),sv.hex("708090"),sv.hex("FFFAFA"),sv.hex("00FF7F"),sv.hex("4682B4"),sv.hex("D2B48C"),sv.hex("008080"),sv.hex("D8BFD8"),sv.hex("FF6347"),sv.hex("40E0D0"),sv.hex("EE82EE"),sv.hex("F5DEB3"),sv.hex("FFFFFF"),sv.hex("F5F5F5"),sv.hex("FFFF00"),sv.hex("9ACD3"),sv.transparent;function pv(e,n){switch(0|n.tag){case 0:var t=n[1],i=n[0];e[i]="content"===i&&""===t?'""':t;break;case 1:e[n[0]]=lv(n[1]);break;case 2:e[":"+n[0]]=lv(n[1]);break;case 3:e[":"+n[0]+"("+n[1]+")"]=lv(n[2])}return e}function lv(e){return Dn(e,{},pv)}function fv(e,n){return e[n[0].toString()+"%"]=lv(n[1]),e}Oh.initial;var dv=Oh.inherit_,mv=(Oh.unset,Ch.pct,qh.ch,qh.cm,qh.em,qh.ex,qh.mm,qh.pt,qh.px,qh.pxFloat,qh.rem),hv=qh.vh,vv=(qh.vmin,qh.vmax,qh.zero,Th.deg,Th.rad,Th.grad,Th.turn,zh.ltr,zh.rtl,Bh.absolute,Bh.relative,Bh.$$static,Bh.sticky,Lh.horizontal,Lh.vertical,Ph.smallCaps,Ih.italic,Ih.oblique,sv.rgb);sv.rgba,sv.hsl,sv.hsla,sv.hex,sv.currentColor,sv.transparent,av.linear,av.ease,av.easeIn,av.easeInOut,av.easeOut,av.stepStart,av.stepEnd,av.steps,av.cubicBezier,rv.marginBox,rv.fillBox,rv.strokeBox,rv.viewBox,ov.translate,ov.translate3d,ov.translateX,ov.translateY,ov.translateZ,ov.scaleX,ov.scaleY,ov.scaleZ,ov.rotateX,ov.rotateY,ov.rotateZ,ov.scale,ov.scale3d,ov.skew,ov.skewX,ov.skewY,Nh.thin,Nh.extraLight,Nh.light,Nh.medium,Nh.semiBold,Nh.bold,Nh.extraBold,Nh.lighter,Nh.bolder,cv.linearGradient,cv.repeatingLinearGradient,cv.radialGradient,cv.repeatingRadialGradient,Qh.areas,ev.ident,ev.numIdent,Uh.contextMenu,Uh.help,Uh.pointer,Uh.progress,Uh.wait,Uh.cell,Uh.crosshair,Uh.verticalText,Uh.alias,Uh.copy,Uh.move,Uh.noDrop,Uh.notAllowed,Uh.grab,Uh.grabbing,Uh.allScroll,Uh.colResize,Uh.rowResize,Uh.nResize,Uh.eResize,Uh.sResize,Uh.wResize,Uh.neResize,Uh.nwResize,Uh.seResize,Uh.swResize,Uh.ewResize,Uh.nsResize,Uh.neswResize,Uh.nwseResize,Uh.zoomIn,Uh.zoomOut;function gv(e){return{$$global:function(n,t){return e.injectRule(function(e){for(var n={},t=e;;){var i=t;if(!i)return n;var r=i[0];n[r[0]]=r[1],t=i[1]}}([[n,lv(t)],0]))},insertRule:function(n){return e.injectRaw(n)},merge:function(n){return e.mergeStyles(Hn(n))},style:function(n){return e.make(lv(n))},keyframes:function(n){return e.makeKeyFrames(qi(fv,{},n))}}}var xv=gv({mergeStyles:Fh.cx,injectRule:Fh.injectGlobal,injectRaw:Fh.injectGlobal,make:Fh.css,makeKeyFrames:Fh.keyframes});xv.insertRule;var bv=function(e){return p(0,["backgroundColor",sv.toString(e)])},yv=function(e){return p(0,["color",sv.toString(e)])},wv=function(e){return p(0,["display",e>=97122692?e<653193961?182695950!==e?423610969!==e?e>=632591505?Zh.toString(e):Kh.toString(e):Vh.toString(e):Gh.toString(e):e>=793912528?888960333!==e?Kh.toString(e):Vh.toString(e):e>=790889754?Yh.toString(e):Oh.toString(e):e>=-854050059?-601204732!==e?e>=-245903344?e>=-147785676?Xh.toString(e):Vh.toString(e):e>=-843129172?Kh.toString(e):Xh.toString(e):Oh.toString(e):e>=-922086728?e>=-878767996?Oh.toString(e):Yh.toString(e):e>=-1010954439?Gh.toString(e):Kh.toString(e)])},_v=function(e){return p(0,["flexDirection",e>=5693978?e>=653193961?Oh.toString(e):Jh.toString(e):e>=-878767996?Oh.toString(e):Jh.toString(e)])},kv=function(e){return p(0,["fontFamily","number"!=typeof e||-878767996!==e&&-601204732!==e&&e<653193961?uv.toString(e):Oh.toString(e)])},$v=function(e){return p(0,["fontSize","number"==typeof e&&-789508312!==e?Oh.toString(e):qh.toString(e)])},Ev=function(e){return p(0,["minHeight","number"==typeof e?-789508312!==e?e>=-1065951376?Oh.toString(e):tv.toString(e):qh.toString(e):-119887163!==e[0]?qh.toString(e):Ch.toString(e)])},Sv=function(e){return p(0,["overflow",Dh.toString(e)])},Av=function(e){return p(0,["padding",qh.toString(e)])},jv=function(e){return p(0,["width","number"==typeof e?-789508312!==e?-195805336!==e&&e>=-1065951376?Oh.toString(e):nv.toString(e):qh.toString(e):-119887163!==e[0]?qh.toString(e):Ch.toString(e)])},Fv=dv,Ov=mv,Cv=hv,Mv=vv,qv=function(e){return p(0,["textDecoration",e>=-601204732?e>=412155569?e>=653193961?"unset":"line-through":e>=131142924?"underline":"inherit":-922086728!==e?e>=-878767996?"initial":"overline":"none"])},Rv=xv.$$global,Tv=(xv.merge,xv.style),zv=(xv.keyframes,Mv(25,116,195)),Bv=(Mv(249,249,250),Mv(233,236,239));Mv(222,226,230),Mv(206,212,218),Mv(173,181,189),Mv(108,117,125),Mv(73,80,87),Mv(52,58,64),Mv(33,37,41),jv(Ov(37.5)),String(37.5);var Lv=t(0),Pv=t(45),Iv=t(25),Dv=t.n(Iv),Nv=t(14),Uv=t(5),Wv=t(4),Hv=t(18);var Vv="undefined"!=typeof document,Gv=Object(Lv.createContext)("undefined"!=typeof HTMLElement?Object(Nv.a)():null),Zv=Object(Lv.createContext)({}),Kv=Gv.Provider,Yv=function(e){return Object(Lv.forwardRef)((function(n,t){return Object(Lv.createElement)(Gv.Consumer,null,(function(i){return e(n,i,t)}))}))};if(!Vv){var Xv=function(e){function n(n,t,i){var r;return(r=e.call(this,n,t,i)||this).state={value:Object(Nv.a)()},r}return Dv()(n,e),n.prototype.render=function(){return Object(Lv.createElement)(Gv.Provider,this.state,this.props.children(this.state.value))},n}(Lv.Component);Yv=function(e){return function(n){return Object(Lv.createElement)(Gv.Consumer,null,(function(t){return null===t?Object(Lv.createElement)(Xv,null,(function(t){return e(n,t)})):e(n,t)}))}}}Object.prototype.hasOwnProperty;Lv.Component;var Jv=function e(n){for(var t=n.length,i=0,r="";i<t;i++){var a=n[i];if(null!=a){var o=void 0;switch(typeof a){case"boolean":break;case"object":if(Array.isArray(a))o=e(a);else for(var s in o="",a)a[s]&&s&&(o&&(o+=" "),o+=s);break;default:o=a}o&&(r&&(r+=" "),r+=o)}}return r};function Qv(e,n,t){var i=[],r=Object(Uv.a)(e,i,t);return i.length<2?t:r+n(i)}Yv((function(e,n){return Object(Lv.createElement)(Zv.Consumer,null,(function(t){var i,r="",a="",o=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var o=Object(Wv.a)(t,n.registered);if(Vv)Object(Uv.b)(n,o,!1);else{var s=Object(Uv.b)(n,o,!1);void 0!==s&&(r+=s)}return Vv||(a+=" "+o.name),n.key+"-"+o.name},s={css:o,cx:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return Qv(n.registered,o,Jv(t))},theme:t},c=e.children(s);return!0,Vv||0===r.length?c:Object(Lv.createElement)(Lv.Fragment,null,Object(Lv.createElement)("style",((i={})["data-emotion-"+n.key]=a.substring(1),i.dangerouslySetInnerHTML={__html:r},i.nonce=n.sheet.nonce,i)),c)}))}));var eg=function(e){var n=e.children;return Lv.createElement(Kv,{value:Fh.cache,children:n})};var ng=function(e){var n=e.data;return Lv.createElement("div",void 0,Lv.createElement("div",void 0,"about"),Lv.createElement("div",void 0,n.text))};var tg=function(e){var n=e.data;return Lv.createElement("div",void 0,Lv.createElement("div",void 0,n.title),Lv.createElement("div",void 0,n.text))};var ig=function(e){var n=e.data,t=qm(jm((function(e){return Lv.createElement("div",{key:e.title},e.title)}))(n.entries));return Lv.createElement("div",void 0,Lv.createElement("div",void 0,"page "+String(n.page)),Lv.createElement("div",void 0,"total "+String(n.total)),Lv.createElement("div",void 0,t))};var rg=function(e){return Lv.createElement("div",void 0,"not found")};var ag=function(e){var n=e.data,t=qm(jm((function(e){return Lv.createElement("div",{key:e.title},e.title)}))(n.entries));return Lv.createElement("div",void 0,Lv.createElement("div",void 0,"tag "+String(n.tag)),Lv.createElement("div",void 0,"page "+String(n.page)),Lv.createElement("div",void 0,t))},og=t(46);var sg=k(Tv,[wv(-1010954439),[_v(-963948842),[Ev(Cv(100)),0]]]);function cg(e){var n=e.children;return Lv.createElement("div",{className:sg},n)}var ug=function(e){var n,t=e.siteName,i=e.pageData,r=function(e,n){if(void 0===n)return"Not found | "+String(e);switch(0|n.tag){case 0:return e;case 1:return String(n[0].tag)+" | "+String(e);case 2:return"About | "+String(e);case 3:return String(n[0].title)+" | "+String(e)}}(t,i);if(void 0!==i)switch(0|i.tag){case 0:n=Lv.createElement(ig,{data:i[0]});break;case 1:n=Lv.createElement(ag,{data:i[0]});break;case 2:n=Lv.createElement(ng,{data:i[0]});break;case 3:n=Lv.createElement(tg,{data:i[0]})}else n=Lv.createElement(rg,{});return Lv.createElement(eg,{children:Lv.createElement("html",{lang:"en"},Lv.createElement("head",void 0,Lv.createElement("meta",{charSet:"utf-8"}),Lv.createElement("meta",{content:"width=device-width, initial-scale=1, shrink-to-fit=no",name:"viewport"}),Lv.createElement("title",void 0,r),Lv.createElement("style",void 0,og)),Lv.createElement("body",void 0,Lv.createElement(cg,{children:n})))})},pg=t(47);function lg(e,n){return function(e){E(Rv,"a",[qv(-922086728),[yv(zv),0]]);var n=[$v(Ov(.875)),[kv(-555363901),[bv(Bv),0]]];E(Rv,"code",n),E(Rv,"pre",[Av(Ov(.625)),[Sv(-1065951377),n]]),E(Rv,"h1 code, h2 code, h3 code",[$v(Fv),0])}(),"<!DOCTYPE html>"+Pv.renderStylesToString(pg.renderToString(Lv.createElement(ug,{siteName:e,pageData:n})))}var fg=t(48),dg=[];function mg(e){if(null!==e&&e[0]===dg){var n=e[1];return 0===n?void 0:[dg,n-1|0]}return e}function hg(e){if(void 0!==e)return mg(e)}function vg(e,n,t,i){return fg(i,{replacement:hg(e),remove:hg(n),lower:hg(t)})}function gg(e){return A(vg,"-",e,!0)}function xg(e){return c(e.getFullYear(),function(e){return e.getMonth()+1|0}(e),e.getDate(),void 0,void 0).getTime()}var bg=t(49);function yg(e){return function(e,n){switch(n){case 0:return void 0===e;case 1:return null===e;case 2:return"boolean"==typeof e;case 3:return"number"==typeof e;case 4:return"string"==typeof e;case 5:return"function"==typeof e;case 6:return"object"==typeof e;case 7:return"symbol"==typeof e}}(e,4)?p(0,[e]):p(1,[e])}function wg(e){var n=yg(bg.contentType(e));return n.tag?void 0:n[0]}function _g(e){return E(vd,xh,(n=function(n){return new Promise((function(n,t){var i=mh.createReadStream(e);i.on("error",t),i.on("ready",(function(e){return k(n,i)}))}))},id((function(e){k(n,void 0).then((function(n){return Promise.resolve(k(e,p(0,[n])))})).catch((function(n){return Promise.resolve(k(e,p(1,[n])))}))}))));var n}function kg(e,n){var t=u.join(__dirname,e,n);return E(vd,(function(e){}),od((function(e){var i=e.mtime,r=e.size;return ad((function(e){return p(1,[e,wg(n),r,i])}),_g(t))}),function(e){return id((function(n){mh.stat(e,(function(e,t){return k(n,E(ed,xh,Gf(Xf(t,null===e?void 0:q(e)))))}))}))}(t)))}function $g(e,n){var t=e.entries;if("number"==typeof n)return p(0,[p(0,[p(2,[{text:e.about}]),200])]);switch(0|n.tag){case 0:return function(e,n){return rd((function(e){}),E(lh,(function(t){return ph((function(t){return p(0,[p(0,[{page:n,total:k(Om,e),entries:jm((function(e){return{title:e.title,date:e.date,text:e.text}}))(t)}]),200])}),dh((function(e){return 0!==k(Om,e)}))(Rm(10,t[1])))}),Tm(Ei(n-1|0,10),zm((function(e,n){return E(Pp,n.date.getTime(),e.date.getTime())}),e))))}(t,n[0]);case 1:return function(e,n,t){return rd((function(e){}),E(lh,(function(e){var n=e[2],i=e[0];return ph((function(e){return p(0,[p(1,[{tag:n,page:t,total:k(Om,i),entries:jm((function(e){return{title:e.title,date:e.date,text:e.text}}))(e)}]),200])}),dh((function(e){return 0!==k(Om,e)}))(Rm(10,e[1])))}),E(lh,(function(e){var n=e[1],i=e[0];return ph((function(e){return[i,e[1],n]}),Tm(Ei(t-1|0,10),zm((function(e,n){return E(Pp,n.date.getTime(),e.date.getTime())}),i)))}),Fm((function(e,t){var i=E(Cm,(function(e){return k(gg(void 0),e)===n}),t.tags);return void 0!==i?void 0!==e?[[t,e[0]],i]:[[t,0],i]:e}),void 0)(e))))}(t,n[0],n[1]);case 2:return function(e,n,t,i,r){var a=c(n,t,i,void 0,void 0).getTime();return ad((function(n){return p(0,[p(3,[{title:n.title,date:n.date,text:n.text,tags:n.tags,previous:ph((function(e){return e.title}),E(Cm,(function(e){return xg(e.date)<a}),zm((function(e,n){return E(Pp,n.date.getTime(),e.date.getTime())}),e))),next:ph((function(e){return e.title}),E(Cm,(function(e){return xg(e.date)>a}),zm((function(e,n){return E(Pp,e.date.getTime(),n.date.getTime())}),e)))}]),200])}),rd((function(e){}),E(Cm,(function(e){return xg(e.date)===a&&k(gg(void 0),e.title)===r}),e)))}(t,n[0],n[1],n[2],n[3]);case 3:return kg(n[0],n[1])}}function Eg(e,n){return Ah.createServer((function(t,i){var r,a,o=fh("/",void 0===(r=t.url)?void 0:q(r));return sd((function(e){}),(a=function(n){var t=Date.now();if(i.on("close",(function(e){var n=i.statusCode,r=Date.now()-t|0;console.log(String(n)+" "+String(o)+" "+String(r)+"ms")})),n.tag)return Sh.setStatusCode(200,i),Sh.setContentType(fh("application/octet-stream",n[1]))(i),Sh.setContentLength(n[2])(i),Sh.setLastModified(n[3])(i),void n[0].pipe(i);var r=lg(e,n[0]),a=Buffer.byteLength(r);Sh.setStatusCode(n[1],i),Sh.setContentType("text/html; charset=utf-8")(i),Sh.setContentLength(a)(i),i.end(r,"utf-8")},function(e){return p(5,[function(e){return k(a,e),e},e])})(fd((function(e){return jh}),od((function(e){return $g(n,e)}),rd((function(e){}),function(e){var n=e.length;if(!(n>=5))switch(n){case 0:return p(0,[1]);case 1:var t=e[0];return"about"===t?0:ph((function(e){return p(0,[e])}),dh((function(e){return e>=1}))(Gp(t)));case 2:var i=e[0];switch(i){case"tag":return p(1,[e[1],1]);case"static":case"uploads":break;default:return}return p(3,[i,e[1]]);case 3:if("tag"!==e[0])return;var r=e[1],a=e[2];return ph((function(e){return p(1,[r,e])}),dh((function(e){return e>=1}))(Gp(a)));case 4:var o=e[0],s=e[1],c=e[2],u=e[3];return ph((function(e){return p(2,[e[0],e[1],e[2],u])}),E(lh,(function(e){var n=e[1],t=e[0];return ph((function(e){return[t,n,e]}),dh((function(e){return e>=1&&e<=31}))(Gp(c)))}),E(lh,(function(e){return ph((function(n){return[e,n]}),dh((function(e){return e>=1&&e<=12}))(Gp(s)))}),Gp(o))))}}(function(e){return e.slice(1).split("/").map((function(e){return decodeURIComponent(e).trim()})).filter((function(e){return e.length>=1}))}(o)))))))}))}function Sg(e){e.listen(5e3,"127.0.0.1",(function(e){console.log("Listening")}))}function Ag(e){var n;if(e.tag){var t=e[0];switch(0|t.tag){case 0:switch(0|t[0].tag){case 7:n="Entries path does not exist";break;case 8:n="Entries path is not a directory";break;default:n="Error reading entries directory"}break;case 1:n="Error reading entry: "+t[0];break;case 2:n="Error parsing entry: "+t[0]}}else switch(0|e[0].tag){case 5:n="About path is a directory";break;case 7:n="About file does not exist";break;default:n="Error reading about file"}console.error(n)}function jg(e){var n,t,i=s(),r=i.siteName;return sd((function(e){}),(n=Sg,t=Ag,dd((function(e){return k(n,e),e}),(function(e){return k(t,e),e}),ad((function(e){return Eg(r,e)}),Eh(i.aboutPath,i.entriesDirectory)))))}jg()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInV0aWxcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2NvbnN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaGFzaC9kaXN0L2hhc2guZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91bml0bGVzcy9kaXN0L3VuaXRsZXNzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L21lbW9pemUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zZXJpYWxpemUvZGlzdC9zZXJpYWxpemUuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi91dGlscy9kaXN0L3V0aWxzLmVzbS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdHJlYW1cIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS11dGlsLWlzL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImZzXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1lbW90aW9uL2Rpc3QvY3JlYXRlLWVtb3Rpb24uZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uL2Rpc3QvZW1vdGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicGF0aFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3N0eWxpcy9kaXN0L3N0eWxpcy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3dlYWstbWVtb2l6ZS9kaXN0L3dlYWstbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2NhY2hlL2Rpc3QvY2FjaGUuZXNtLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImJ1ZmZlclwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2hlZXQvZGlzdC9zaGVldC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vc3RvcmUvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hcmd1bWVudC9lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2hlbHAvZm9ybWF0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvaGVscC9hZGRlZF9mb3JtYXR0ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NwcmludGYtanMvc3JjL3NwcmludGYuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb25fY29udGFpbmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYXJndW1lbnQvZ3JvdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJldmVudHNcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2xpYi9zdHJpbmdfZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLW1ldGFkYXRhL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Vtb3Rpb24tc2VydmVyL2Rpc3QvZW1vdGlvbi1zZXJ2ZXIuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvc2Nzcy9ib290c3RyYXAtcmVib290LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NsdWdpZnkvc2x1Z2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWltZS10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FyZ3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYXJndW1lbnRfcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uL2hlbHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uL2FwcGVuZC9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi9jb3VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi9zdG9yZS90cnVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uL3N0b3JlL2ZhbHNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vc3VicGFyc2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FyZ3VtZW50L2V4Y2x1c2l2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uLXNlcnZlci9kaXN0L2Vtb3Rpb24tc2VydmVyLmNqcy5wcm9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZW1vdGlvbi1zZXJ2ZXIvZGlzdC9jcmVhdGUtZW1vdGlvbi1zZXJ2ZXIuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jcmVhdGUtZW1vdGlvbi1zZXJ2ZXIvZGlzdC9jcmVhdGUtZW1vdGlvbi1zZXJ2ZXIuY2pzLnByb2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rocm91Z2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL2J1ZmZlci1mcm9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbXVsdGlwaXBlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kdXBsZXhlcjIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V0aWwtZGVwcmVjYXRlL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL3NlcnZlci5ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS1zZXJ2ZXIubm9kZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWltZS1kYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmluZGluZ3MvUGFja2FnZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmluZGluZ3MvQXJnUGFyc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NMSS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmluZGluZ3MvRGF0ZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2pzX2RpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9leGNlcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfanNfZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX3ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfU29ydEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfaW50ZXJuYWxBVkx0cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTWFwU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb2JqLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9JbnRlcmZhY2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0luZml4LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9GdW5jdGlvbi5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvRW5kby5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvRnVuY3Rpb25zLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfRnVuY3Rpb24uYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9MaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfT3B0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5TGFiZWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9TdHJpbmcuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0R1YWwuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0RlZmF1bHQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0FycmF5LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9BcnJheUYuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0VxLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRXEuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX09yZC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX09yZC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2J5dGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfaW50MzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9mb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvcGVydmFzaXZlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWRFbnVtLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9PcmRlcmluZy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvT3B0aW9uLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXAuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvb3B0aW9uL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvbGlzdExhYmVscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvTGlzdC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cEFueS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9saXN0L1JlbHVkZV9MaXN0X0luc3RhbmNlcy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbm9pZEFueS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9saXN0L1JlbHVkZV9MaXN0X0Jhc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9JZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X01hcERpY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvYXJyYXkvUmVsdWRlX0FycmF5X0luc3RhbmNlcy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfTWFwLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfaW50ZXJuYWxBVkxzZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9TZXREaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9TZXQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0ludC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1JpbmcuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0ludC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9qc19pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvYXJyYXkvUmVsdWRlX0FycmF5X0Jhc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX1NlcXVlbmNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9Ob25FbXB0eS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvUmVzdWx0LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9WYWxpZGF0aW9uLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQmlmdW5jdG9yLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9SZXN1bHQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9GbG9hdC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfRmxvYXQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9TdHJpbmcuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvbGlzdC9SZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvYXJyYXkvUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfQXJyYXkuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvb3B0aW9uL1JlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtZnMtYnMvc3JjL05vZGVGU19fRXJyb3IuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtZnMtYnMvc3JjL05vZGVGU19fUmVhZEZpbGUuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1BhcnNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub2RlLWZzLWJzL3NyYy9Ob2RlRlNfX1JlYWREaXIuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JpbmRpbmdzL0hUVFAuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc3BvbnNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1jc3Mvc3JjL0Nzc19BdG9taWNUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtY3NzL3NyYy9Dc3NfQ29sb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1jc3Mvc3JjL0Nzc19Db3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9TdHlsZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY3NzL2Rpc3QvY3NzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY29yZS9kaXN0L2NvcmUuZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kaW5ncy9FbW90aW9uLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9wYWdlcy9BYm91dFBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3BhZ2VzL0VudHJ5UGFnZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvcGFnZXMvSW5kZXhQYWdlLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9wYWdlcy9Ob3RGb3VuZFBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3BhZ2VzL1RhZ1NlYXJjaFBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL1BhZ2VfX0NvbXBvbmVudC5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvUGFnZV9fUmVuZGVyLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbHVnaWZ5LWJzL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbHVnaWZ5LWJzL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2pzX251bGxfdW5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbHVnaWZ5LWJzL3NyYy9TbHVnaWZ5LmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlscy5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvRW50cnlDb250cm9sbGVyLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kaW5ncy9NaW1lVHlwZXMuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvanNfdHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtZnMtYnMvc3JjL05vZGVGU19fUmVhZFN0cmVhbS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9qcy9SZWx1ZGVfSnNfUHJvbWlzZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvU3RhdGljQ29udHJvbGxlci5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1mcy1icy9zcmMvTm9kZUZTX19TdGF0LmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9TZXJ2ZXIuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL0Fib3V0Q29udHJvbGxlci5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvSW5kZXhDb250cm9sbGVyLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db25zdGFudHMuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL1RhZ1NlYXJjaENvbnRyb2xsZXIuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JvdXRlci5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSW5kZXguYnMuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyZXF1aXJlIiwiRU9MIiwiU1VQUFJFU1MiLCJPUFRJT05BTCIsIlpFUk9fT1JfTU9SRSIsIk9ORV9PUl9NT1JFIiwiUEFSU0VSIiwiUkVNQUlOREVSIiwiX1VOUkVDT0dOSVpFRF9BUkdTX0FUVFIiLCJ1dGlsIiwiaW5oZXJpdHMiLCJlIiwic3RyIiwiayIsImgiLCJsZW4iLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsImZuIiwiY2FjaGUiLCJhcmciLCJ1bmRlZmluZWQiLCJzdHlsZU5hbWUiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJtYXRjaCIsInAxIiwicDIiLCJjdXJzb3IiLCJzdHlsZXMiLCJuZXh0IiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwicmVnaXN0ZXJlZCIsImludGVycG9sYXRpb24iLCJjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uIiwiX19lbW90aW9uX3N0eWxlcyIsImFuaW0iLCJvYmoiLCJzdHJpbmciLCJBcnJheSIsImlzQXJyYXkiLCJfa2V5IiwiaW50ZXJwb2xhdGVkIiwiX2kiLCJjcmVhdGVTdHJpbmdGcm9tT2JqZWN0IiwicHJldmlvdXNDdXJzb3IiLCJyZXN1bHQiLCJjYWNoZWQiLCJsYWJlbFBhdHRlcm4iLCJhcmdzIiwic3RyaW5nTW9kZSIsInN0cmluZ3MiLCJyYXciLCJsYXN0SW5kZXgiLCJpZGVudGlmaWVyTmFtZSIsImV4ZWMiLCJpc0Jyb3dzZXIiLCJkb2N1bWVudCIsImdldFJlZ2lzdGVyZWRTdHlsZXMiLCJyZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJhd0NsYXNzTmFtZSIsInNwbGl0IiwiZm9yRWFjaCIsImNsYXNzTmFtZSIsInB1c2giLCJpbnNlcnRTdHlsZXMiLCJzZXJpYWxpemVkIiwiaXNTdHJpbmdUYWciLCJjb21wYXQiLCJpbnNlcnRlZCIsInN0eWxlc0ZvclNTUiIsImN1cnJlbnQiLCJtYXliZVN0eWxlcyIsImluc2VydCIsInNoZWV0Iiwib2JqZWN0VG9TdHJpbmciLCJpc0Jvb2xlYW4iLCJpc051bGwiLCJpc051bGxPclVuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsImlzVW5kZWZpbmVkIiwiaXNSZWdFeHAiLCJyZSIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNFcnJvciIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiaXNCdWZmZXIiLCJCdWZmZXIiLCJBY3Rpb24iLCJvcHRpb25zIiwidGhpcyIsIm9wdGlvblN0cmluZ3MiLCJkZXN0IiwibmFyZ3MiLCJjb25zdGFudCIsImRlZmF1bHRWYWx1ZSIsInR5cGUiLCJjaG9pY2VzIiwicmVxdWlyZWQiLCJoZWxwIiwibWV0YXZhciIsImdldE5hbWUiLCJqb2luIiwiaXNPcHRpb25hbCIsImlzUG9zaXRpb25hbCIsImluc2VydFdpdGhvdXRTY29waW5nIiwibWVyZ2UiLCJjc3MiLCJjbGFzc25hbWVzIiwiY2xzIiwidG9BZGQiLCJfY3JlYXRlRW1vdGlvbiIsInNwZWVkeSIsImlzU3BlZWR5IiwiX2xlbiIsImFyZ3VtZW50cyIsImN4IiwiX2xlbjQiLCJfa2V5NCIsImluamVjdEdsb2JhbCIsIl9sZW4zIiwiX2tleTMiLCJrZXlmcmFtZXMiLCJfbGVuMiIsIl9rZXkyIiwiYW5pbWF0aW9uIiwiaHlkcmF0ZSIsImlkcyIsImZsdXNoIiwicG5hIiwib2JqZWN0S2V5cyIsImtleXMiLCJEdXBsZXgiLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwidiIsIm1ldGhvZCIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJhbGxvd0hhbGZPcGVuIiwib25jZSIsIm9uZW5kIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRlZCIsIm5leHRUaWNrIiwib25FbmROVCIsInNlbGYiLCJlbmQiLCJoaWdoV2F0ZXJNYXJrIiwiX3JlYWRhYmxlU3RhdGUiLCJkZXN0cm95ZWQiLCJzZXQiLCJfZGVzdHJveSIsImVyciIsImNiIiwiaGFzIiwicmVwZWF0IiwibnVtIiwiYXJyYXlFcXVhbCIsImEiLCJiIiwidHJpbUNoYXJzIiwiY2hhcnMiLCJzdGFydCIsImluZGV4T2YiLCJjaGFyQXQiLCJzbGljZSIsImNhcGl0YWxpemUiLCJ0b1VwcGVyQ2FzZSIsImFycmF5VW5pb24iLCJ2YWx1ZXMiLCJhcnIiLCJqIiwiZXh0ZW5kIiwic3JjIiwidHJpbUVuZCIsIlciLCJYIiwidHJpbSIsImlhIiwiWiIsIkYiLCJQIiwic3Vic3RyaW5nIiwidyIsIkwiLCJqYSIsImthIiwidGVzdCIsImFhIiwiRyIsImJhIiwibGEiLCJtYSIsIlIiLCJuYSIsImVhIiwib2EiLCJIIiwicSIsImciLCJ4IiwiQSIsIlMiLCJCIiwiVSIsInByZWZpeCIsIkQiLCJ6IiwiTSIsInkiLCJDIiwiSyIsInUiLCJJIiwiSiIsImYiLCJOIiwiY2EiLCJPIiwiZGEiLCJmYSIsIlkiLCJFIiwiaGEiLCJRIiwidXNlIiwiVCIsImZ1bmMiLCJXZWFrTWFwIiwicmV0IiwidG9TaGVldCIsImJsb2NrIiwiU2hlZXQiLCJydWxlU2hlZXQiLCJjb250ZXh0IiwiY29udGVudCIsInNlbGVjdG9ycyIsInBhcmVudHMiLCJsaW5lIiwiY29sdW1uIiwiZGVwdGgiLCJhdCIsImRlbGltaXRlciIsInJlbW92ZUxhYmVsIiwicm9vdFNlcnZlclN0eWxpc0NhY2hlIiwiZ2V0U2VydmVyU3R5bGlzQ2FjaGUiLCJnZXRDYWNoZSIsInByZWZpeFRydWVDYWNoZSIsInByZWZpeEZhbHNlQ2FjaGUiLCJzdHlsaXNPcHRpb25zIiwic3R5bGlzIiwiY29udGFpbmVyIiwiX2luc2VydCIsImhlYWQiLCJub2RlcyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJub2RlIiwiZ2V0QXR0cmlidXRlIiwiaWQiLCJwYXJlbnROb2RlIiwiYXBwZW5kQ2hpbGQiLCJzdHlsaXNQbHVnaW5zIiwic2VsZWN0b3IiLCJzaG91bGRDYWNoZSIsInNlcnZlclN0eWxpc0NhY2hlIiwicnVsZXMiLCJnZXRSdWxlcyIsIm5vbmNlIiwicHJvY2VzcyIsInZlcnNpb24iLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJUeXBlRXJyb3IiLCJhcHBseSIsImJ1ZmZlciIsImNvcHlQcm9wcyIsImRzdCIsIlNhZmVCdWZmZXIiLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwiU2xvd0J1ZmZlciIsIlN0eWxlU2hlZXQiLCJ0YWdzIiwiY3RyIiwiYmVmb3JlIiwiX3Byb3RvIiwicnVsZSIsIl90YWciLCJ0YWciLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY3JlYXRlVGV4dE5vZGUiLCJjcmVhdGVTdHlsZUVsZW1lbnQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwic2hlZXRGb3JUYWciLCJpc0ltcG9ydFJ1bGUiLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJyZW1vdmVDaGlsZCIsIkFjdGlvblN0b3JlQ29uc3RhbnQiLCJwYXJzZXIiLCJuYW1lc3BhY2UiLCJmb3JtYXQiLCJhcmd1bWVudCIsIm1lc3NhZ2UiLCJlcnJNZXNzYWdlIiwiYXJndW1lbnROYW1lIiwiY29kZSIsInNwcmludGYiLCIkJCIsIlNlY3Rpb24iLCJwYXJlbnQiLCJoZWFkaW5nIiwiX3BhcmVudCIsIl9oZWFkaW5nIiwiX2l0ZW1zIiwiYWRkSXRlbSIsImNhbGxiYWNrIiwiZm9ybWF0SGVscCIsImZvcm1hdHRlciIsIml0ZW1IZWxwIiwiX2luZGVudCIsIm1hcCIsIml0ZW0iLCJfam9pblBhcnRzIiwiX2RlZGVudCIsImN1cnJlbnRJbmRlbnQiLCJIZWxwRm9ybWF0dGVyIiwiX3Byb2ciLCJwcm9nIiwiX21heEhlbHBQb3NpdGlvbiIsIm1heEhlbHBQb3NpdGlvbiIsIl93aWR0aCIsIndpZHRoIiwiZW52IiwiQ09MVU1OUyIsIl9jdXJyZW50SW5kZW50IiwiX2luZGVudEluY3JpbWVudCIsImluZGVudEluY3JpbWVudCIsIl9sZXZlbCIsIl9hY3Rpb25NYXhMZW5ndGgiLCJfcm9vdFNlY3Rpb24iLCJfY3VycmVudFNlY3Rpb24iLCJfd2hpdGVzcGFjZU1hdGNoZXIiLCJSZWdFeHAiLCJfbG9uZ0JyZWFrTWF0Y2hlciIsIl9hZGRJdGVtIiwic3RhcnRTZWN0aW9uIiwic2VjdGlvbiIsImVuZFNlY3Rpb24iLCJhZGRUZXh0IiwidGV4dCIsIl9mb3JtYXRUZXh0IiwiYWRkVXNhZ2UiLCJ1c2FnZSIsImFjdGlvbnMiLCJncm91cHMiLCJfZm9ybWF0VXNhZ2UiLCJhZGRBcmd1bWVudCIsImFjdGlvbiIsImFjdGlvbkxlbmd0aCIsImludm9jYXRpb25zIiwiX2Zvcm1hdEFjdGlvbkludm9jYXRpb24iLCJpbnZvY2F0aW9uTGVuZ3RoIiwiX2dldFN1YmFjdGlvbnMiLCJzdWJhY3Rpb24iLCJpbnZvY2F0aW9uTmV3IiwiTWF0aCIsIm1heCIsIl9mb3JtYXRBY3Rpb24iLCJhZGRBcmd1bWVudHMiLCJwYXJ0U3RyaW5ncyIsImZpbHRlciIsInBhcnQiLCJ0ZXh0V2lkdGgiLCJvcHRpb25hbHMiLCJwb3NpdGlvbmFscyIsIl9mb3JtYXRBY3Rpb25zVXNhZ2UiLCJjb25jYXQiLCJyZWdleHBQYXJ0Iiwib3B0aW9uYWxVc2FnZSIsInBvc2l0aW9uYWxVc2FnZSIsIm9wdGlvbmFsUGFydHMiLCJwb3NpdGlvbmFsUGFydHMiLCJsaW5lcyIsImluZGVudCIsIl9nZXRMaW5lcyIsInBhcnRzIiwibGluZUxlbmd0aCIsInN1YnN0ciIsImdyb3VwQWN0aW9ucyIsImluc2VydHMiLCJncm91cCIsIl9ncm91cEFjdGlvbnMiLCJhY3Rpb25JbmRleCIsIm9wdGlvblN0cmluZyIsImFyZ3NEZWZhdWx0Iiwic3BsaWNlIiwiX2Zvcm1hdEFyZ3MiLCJfZmlsbFRleHQiLCJoZWxwVGV4dCIsImhlbHBMaW5lcyIsImluZGVudEZpcnN0IiwiaGVscFBvc2l0aW9uIiwibWluIiwiaGVscFdpZHRoIiwiYWN0aW9uV2lkdGgiLCJhY3Rpb25IZWFkZXIiLCJfZXhwYW5kSGVscCIsIl9zcGxpdExpbmVzIiwiX21ldGF2YXJGb3JtYXR0ZXIiLCJmb3JtYXRfZnVuYyIsImFyZ3NTdHJpbmciLCJtZXRhdmFyRGVmYXVsdCIsIm1ldGF2YXJzIiwiYnVpbGRNZXRhdmFyIiwicGFyYW1zIiwiYWN0aW9uUHJvcGVydHkiLCJhY3Rpb25WYWx1ZSIsIl9nZXRIZWxwU3RyaW5nIiwiZGVsaW1pdGVycyIsIndyYXBTdGFydCIsIndyYXBFbmQiLCJpbmRleCIsIkFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyIiwiUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyIiwiUmF3VGV4dEhlbHBGb3JtYXR0ZXIiLCJkZWZhdWx0aW5nX25hcmdzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0Iiwic291cmNlIiwic3ltYm9scyIsInRvIiwieHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIndpbmRvdyIsIm5vdF9zdHJpbmciLCJudW1iZXIiLCJqc29uIiwibm90X2pzb24iLCJtb2R1bG8iLCJwbGFjZWhvbGRlciIsImtleV9hY2Nlc3MiLCJpbmRleF9hY2Nlc3MiLCJzaWduIiwicGFyc2UiLCJwYXJzZV90cmVlIiwiYXJndiIsInBhZCIsInBhZF9jaGFyYWN0ZXIiLCJwYWRfbGVuZ3RoIiwiaW5wdXQiLCJ0cmVlX2xlbmd0aCIsIm5vZGVfdHlwZSIsIm91dHB1dCIsImlzX3Bvc2l0aXZlIiwiZ2V0X3R5cGUiLCJpc05hTiIsInBhcnNlSW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvRXhwb25lbnRpYWwiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiZm10IiwiX2ZtdCIsImFyZ19uYW1lcyIsIlN5bnRheEVycm9yIiwiZmllbGRfbGlzdCIsInJlcGxhY2VtZW50X2ZpZWxkIiwiZmllbGRfbWF0Y2giLCJ2YXJpYWJsZSIsInZzcHJpbnRmIiwiX2FyZ3YiLCJBY3Rpb25IZWxwIiwiQWN0aW9uQXBwZW5kIiwiQWN0aW9uQXBwZW5kQ29uc3RhbnQiLCJBY3Rpb25Db3VudCIsIkFjdGlvblN0b3JlIiwiQWN0aW9uU3RvcmVUcnVlIiwiQWN0aW9uU3RvcmVGYWxzZSIsIkFjdGlvblZlcnNpb24iLCJBY3Rpb25TdWJwYXJzZXJzIiwiYXJndW1lbnRFcnJvckhlbHBlciIsIkFjdGlvbkNvbnRhaW5lciIsImRlc2NyaXB0aW9uIiwiYXJndW1lbnREZWZhdWx0IiwicHJlZml4Q2hhcnMiLCJjb25mbGljdEhhbmRsZXIiLCJfcmVnaXN0cmllcyIsInJlZ2lzdGVyIiwiX2dldEhhbmRsZXIiLCJfYWN0aW9ucyIsIl9vcHRpb25TdHJpbmdBY3Rpb25zIiwiX2FjdGlvbkdyb3VwcyIsIl9tdXR1YWxseUV4Y2x1c2l2ZUdyb3VwcyIsIl9kZWZhdWx0cyIsIl9yZWdleHBOZWdhdGl2ZU51bWJlciIsIl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscyIsIkFyZ3VtZW50R3JvdXAiLCJNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwIiwicmVnaXN0cnlOYW1lIiwiX3JlZ2lzdHJ5R2V0Iiwic2V0RGVmYXVsdHMiLCJnZXREZWZhdWx0IiwiX2dldFBvc2l0aW9uYWwiLCJfZ2V0T3B0aW9uYWwiLCJBY3Rpb25DbGFzcyIsIl9wb3BBY3Rpb25DbGFzcyIsInR5cGVGdW5jdGlvbiIsIl9hZGRBY3Rpb24iLCJhZGRBcmd1bWVudEdyb3VwIiwiYWRkTXV0dWFsbHlFeGNsdXNpdmVHcm91cCIsIl9jaGVja0NvbmZsaWN0Iiwic29tZSIsIkJvb2xlYW4iLCJfcmVtb3ZlQWN0aW9uIiwiX2FkZENvbnRhaW5lckFjdGlvbnMiLCJ0aXRsZUdyb3VwTWFwIiwidGl0bGUiLCJtdXRleEdyb3VwIiwiZ3JvdXBNYXAiLCJhY3Rpb25IYXNoIiwib3B0aW9uU3RyaW5nc0xvbmciLCJvcHRpb25TdHJpbmdEZXN0IiwiaGFuZGxlclN0cmluZyIsIm9wdGlvblN0cmluZ0FjdGlvbnMiLCJjb25mbGljdE9wdGlvbmFscyIsImNvbmZsT3B0aW9uYWwiLCJfaGFuZGxlQ29uZmxpY3RFcnJvciIsImNvbmZsT3B0aW9uYWxzIiwiY29uZmxpY3RzIiwicGFpciIsIl9oYW5kbGVDb25mbGljdFJlc29sdmUiLCJjb25mbGljdGluZ0FjdGlvbiIsIl9jb250YWluZXIiLCJOYW1lc3BhY2UiLCJpc3NldCIsInVuc2V0IiwiUmVhZGFibGVTdGF0ZSIsIkVFIiwiRXZlbnRFbWl0dGVyIiwibGlzdGVuZXJDb3VudCIsImVtaXR0ZXIiLCJsaXN0ZW5lcnMiLCJTdHJpbmdEZWNvZGVyIiwiU3RyZWFtIiwic3RyZWFtIiwiaHdtIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwiY2FsbGVkUmVhZCIsInN5bmMiLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsIm9iamVjdE1vZGUiLCJkZWZhdWx0RW5jb2RpbmciLCJyYW5PdXQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwicmVhZGFibGVBZGRDaHVuayIsInN0YXRlIiwiY2h1bmsiLCJhZGRUb0Zyb250IiwiZXIiLCJjaHVua0ludmFsaWQiLCJlbWl0IiwiZW1pdFJlYWRhYmxlIiwiZW5kUmVhZGFibGUiLCJvbkVvZkNodW5rIiwid3JpdGUiLCJ1bnNoaWZ0IiwicmVhZCIsIm1heWJlUmVhZE1vcmVfIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsInNldEVuY29kaW5nIiwiZW5jIiwiaG93TXVjaFRvUmVhZCIsInJvdW5kVXBUb05leHRQb3dlck9mMiIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwibGlzdCIsImVtaXREYXRhRXZlbnRzIiwicGlwZU9uUmVhZGFibGUiLCJzdGFydFBhdXNlZCIsInBhdXNlZCIsInBpcGUiLCJvbiIsImFkZExpc3RlbmVyIiwicGF1c2UiLCJyZXN1bWUiLCJmcm9tTGlzdCIsInNoaWZ0IiwiY3B5IiwiY29weSIsIm5PcmlnIiwiZG9SZWFkIiwiX3JlYWQiLCJwaXBlT3B0cyIsImVuZEZuIiwic3Rkb3V0Iiwic3RkZXJyIiwiY2xlYW51cCIsIm9udW5waXBlIiwib25kcmFpbiIsInBpcGVPbkRyYWluIiwicmVtb3ZlTGlzdGVuZXIiLCJvbmNsb3NlIiwib25maW5pc2giLCJvbmVycm9yIiwibmVlZERyYWluIiwidW5waXBlIiwiX2V2ZW50cyIsImVycm9yIiwiZGVzdHMiLCJldiIsInJlcyIsIndyYXAiLCJfZnJvbUxpc3QiLCJpc0J1ZmZlckVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFzc2VydEVuY29kaW5nIiwic3Vycm9nYXRlU2l6ZSIsImRldGVjdEluY29tcGxldGVDaGFyIiwidXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhciIsImJhc2U2NERldGVjdEluY29tcGxldGVDaGFyIiwicGFzc1Rocm91Z2hXcml0ZSIsImNoYXJCdWZmZXIiLCJjaGFyUmVjZWl2ZWQiLCJjaGFyTGVuZ3RoIiwiY2hhclN0ciIsImF2YWlsYWJsZSIsImNoYXJDb2RlIiwiY3IiLCJXcml0YWJsZVN0YXRlIiwiV3JpdGVSZXEiLCJlbmRpbmciLCJmaW5pc2hlZCIsIm5vRGVjb2RlIiwiZGVjb2RlU3RyaW5ncyIsIndyaXRpbmciLCJidWZmZXJQcm9jZXNzaW5nIiwib253cml0ZSIsIndyaXRlY2IiLCJ3cml0ZWxlbiIsIm9ud3JpdGVTdGF0ZVVwZGF0ZSIsImVycm9yRW1pdHRlZCIsIm9ud3JpdGVFcnJvciIsIm5lZWRGaW5pc2giLCJlbnRyeSIsImRvV3JpdGUiLCJjbGVhckJ1ZmZlciIsImFmdGVyV3JpdGUiLCJfd3JpdGUiLCJvbndyaXRlRHJhaW4iLCJmaW5pc2hNYXliZSIsIm5lZWQiLCJ3cml0ZUFmdGVyRW5kIiwidmFsaWQiLCJ2YWxpZENodW5rIiwiZGVjb2RlQ2h1bmsiLCJ3cml0ZU9yQnVmZmVyIiwiZW5kV3JpdGFibGUiLCJUcmFuc2Zvcm0iLCJUcmFuc2Zvcm1TdGF0ZSIsImFmdGVyVHJhbnNmb3JtIiwiZGF0YSIsInRzIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIl9mbHVzaCIsImRvbmUiLCJ3cyIsIl90cmFuc2Zvcm0iLCJ3cml0ZWVuY29kaW5nIiwiRUVsaXN0ZW5lckNvdW50IiwiT3VyVWludDhBcnJheSIsImdsb2JhbCIsIlVpbnQ4QXJyYXkiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiQnVmZmVyTGlzdCIsImRlc3Ryb3lJbXBsIiwia1Byb3h5RXZlbnRzIiwiaXNEdXBsZXgiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJmbG9vciIsInJlc3VtZVNjaGVkdWxlZCIsImRlc3Ryb3kiLCJza2lwQ2h1bmtDaGVjayIsImdldFByb3RvdHlwZU9mIiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsImFkZENodW5rIiwiX3VuZGVzdHJveSIsInVuZGVzdHJveSIsImlzUGF1c2VkIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJuUmVhZGluZ05leHRUaWNrIiwicmVzdW1lXyIsImNsZWFyIiwiaGFzU3RyaW5ncyIsIm5iIiwidGFpbCIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJmcm9tTGlzdFBhcnRpYWwiLCJlbmRSZWFkYWJsZU5UIiwidW5waXBlSW5mbyIsImhhc1VucGlwZWQiLCJvbmRhdGEiLCJjbGVhbmVkVXAiLCJpbmNyZWFzZWRBd2FpdERyYWluIiwiZXZlbnQiLCJwcmVwZW5kTGlzdGVuZXIiLCJfdGhpcyIsImVtaXRFcnJvck5UIiwicmVhZGFibGVEZXN0cm95ZWQiLCJ3cml0YWJsZURlc3Ryb3llZCIsIkNvcmtlZFJlcXVlc3QiLCJmaW5pc2giLCJjb3JrUmVxIiwicGVuZGluZ2NiIiwiY29ya2VkUmVxdWVzdHNGcmVlIiwib25Db3JrZWRGaW5pc2giLCJhc3luY1dyaXRlIiwiYnJvd3NlciIsInNldEltbWVkaWF0ZSIsImludGVybmFsVXRpbCIsImRlcHJlY2F0ZSIsInJlYWxIYXNJbnN0YW5jZSIsIm5vcCIsIndyaXRhYmxlT2JqZWN0TW9kZSIsIndyaXRhYmxlSHdtIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiZmluYWxDYWxsZWQiLCJjb3JrZWQiLCJidWZmZXJlZFJlcXVlc3QiLCJsYXN0QnVmZmVyZWRSZXF1ZXN0IiwicHJlZmluaXNoZWQiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsIndyaXRldiIsIl93cml0ZXYiLCJmaW5hbCIsIl9maW5hbCIsImhvbGRlciIsImNvdW50IiwiYWxsQnVmZmVycyIsImlzQnVmIiwiY2FsbEZpbmFsIiwicHJlZmluaXNoIiwiZ2V0QnVmZmVyIiwib3V0IiwiXyIsImhhc0luc3RhbmNlIiwiRnVuY3Rpb24iLCJuZXdDaHVuayIsImxhc3QiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwidHJhbnNmb3JtIiwiX3RoaXMyIiwiZXJyMiIsIm1ldGFkYXRhUmVnZXgiLCJtYXJrZG93biIsInRyaW1tZWQiLCJtZXRhZGF0YSIsImxhc3RLZXkiLCJmYWN0b3J5IiwiY2hhck1hcCIsImxvY2FsZXMiLCJsb2NhbGUiLCJyZXBsYWNlbWVudCIsInNsdWciLCJyZWR1Y2UiLCJjaCIsInJlbW92ZSIsImxvd2VyIiwic3RyaWN0IiwiY3VzdG9tTWFwIiwiZXh0ZW5zaW9ucyIsInR5cGVzIiwicHJlZmVyZW5jZSIsImRiIiwiZXh0bmFtZSIsIkVYVFJBQ1RfVFlQRV9SRUdFWFAiLCJURVhUX1RZUEVfUkVHRVhQIiwiY2hhcnNldCIsIm1pbWUiLCJjaGFyc2V0cyIsImxvb2t1cCIsImNvbnRlbnRUeXBlIiwiZXh0ZW5zaW9uIiwiZXh0cyIsInBhdGgiLCJBcmd1bWVudFBhcnNlciIsIkNvbnN0IiwiUGF0aCIsIkZVTkNUSU9OX0lERU5USVRZIiwiYWRkSGVscCIsImJhc2VuYW1lIiwiZXBpbG9nIiwiZm9ybWF0dGVyQ2xhc3MiLCJmcm9tZmlsZVByZWZpeENoYXJzIiwiX3Bvc2l0aW9uYWxzIiwiX29wdGlvbmFscyIsIl9zdWJwYXJzZXJzIiwiZGVmYXVsdFByZWZpeCIsImRlZmF1bHRLZXkiLCJhZGRTdWJwYXJzZXJzIiwicGFyc2VyQ2xhc3MiLCJfZ2V0Rm9ybWF0dGVyIiwiX2dldFBvc2l0aW9uYWxBY3Rpb25zIiwiX2dldE9wdGlvbmFsQWN0aW9ucyIsInBhcnNlQXJncyIsInBhcnNlS25vd25BcmdzIiwiX2dldFZhbHVlIiwiX3BhcnNlS25vd25BcmdzIiwiYXJnU3RyaW5ncyIsImV4dHJhcyIsIl9yZWFkQXJnc0Zyb21GaWxlcyIsImFjdGlvbkNvbmZsaWN0cyIsIm11dGV4QWN0aW9uIiwib3B0aW9uU3RyaW5nSW5kaWNlcyIsImFyZ1N0cmluZ1BhdHRlcm5QYXJ0cyIsImFyZ1N0cmluZyIsImFyZ1N0cmluZ0luZGV4IiwicGF0dGVybiIsIm9wdGlvblR1cGxlIiwiX3BhcnNlT3B0aW9uYWwiLCJhcmdTdHJpbmdzUGF0dGVybiIsInNlZW5BY3Rpb25zIiwic2Vlbk5vbkRlZmF1bHRBY3Rpb25zIiwidGFrZUFjdGlvbiIsImFyZ3VtZW50U3RyaW5ncyIsImFyZ3VtZW50VmFsdWVzIiwiX2dldFZhbHVlcyIsImFjdGlvbkNvbmZsaWN0IiwiY29uc3VtZU9wdGlvbmFsIiwic3RhcnRJbmRleCIsImFyZ0NvdW50Iiwic3RvcCIsImV4cGxpY2l0QXJnIiwiYWN0aW9uVHVwbGVzIiwic2VsZWN0ZWRQYXR0ZXJucyIsIl9tYXRjaEFyZ3VtZW50IiwibmV3RXhwbGljaXRBcmciLCJvcHRpb25hbHNNYXAiLCJjb25zdW1lUG9zaXRpb25hbHMiLCJzZWxlY3RlZFBhdHRlcm4iLCJhcmdDb3VudHMiLCJfbWF0Y2hBcmd1bWVudHNQYXJ0aWFsIiwicG9zaXRpb24iLCJwb3NpdGlvbmFsc0VuZEluZGV4IiwibmV4dE9wdGlvblN0cmluZ0luZGV4IiwibWF4T3B0aW9uU3RyaW5nSW5kZXgiLCJzdG9wSW5kZXgiLCJuYW1lcyIsIm1zZyIsImZzIiwibmV3QXJnU3RyaW5ncyIsImFyZ3N0cnMiLCJmaWxlbmFtZSIsInJlYWRGaWxlU3luYyIsImFyZ0xpbmUiLCJjb252ZXJ0QXJnTGluZVRvQXJncyIsInJlZ2V4cEFyZ1N0cmluZ3MiLCJyZWdleHBOYXJncyIsIl9nZXROYXJnc1BhdHRlcm4iLCJtYXRjaGVzIiwiYWN0aW9uU2xpY2UiLCJnZXRMZW5ndGgiLCJhcmdFeHBsaWNpdCIsIm9wdGlvblR1cGxlcyIsIl9nZXRPcHRpb25UdXBsZXMiLCJzZWFyY2giLCJvcHRpb25QcmVmaXgiLCJhY3Rpb25PcHRpb25TdHJpbmciLCJvcHRpb25TdHJpbmdTcGxpdCIsIm9wdGlvblByZWZpeFNob3J0IiwiYXJnRXhwbGljaXRTaG9ydCIsImFycmF5RWxlbWVudCIsIl9jaGVja1ZhbHVlIiwiZGlzcGxheU5hbWUiLCJmb3JtYXRVc2FnZSIsImFjdGlvbkdyb3VwIiwiRm9ybWF0dGVyQ2xhc3MiLCJwcmludFVzYWdlIiwiX3ByaW50TWVzc2FnZSIsInByaW50SGVscCIsImV4aXQiLCJzdGF0dXMiLCJpdGVtcyIsIkNob2ljZXNQc2V1ZG9BY3Rpb24iLCJfcHJvZ1ByZWZpeCIsIl9wYXJzZXJDbGFzcyIsIl9uYW1lUGFyc2VyTWFwIiwiX2Nob2ljZXNBY3Rpb25zIiwiYWRkUGFyc2VyIiwiYWxpYXNlcyIsImNob2ljZUFjdGlvbiIsImFsaWFzIiwicGFyc2VyTmFtZSIsImZvciIsIml0ZXJhdG9yIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInByb3BzIiwicmVmcyIsInVwZGF0ZXIiLCJpc1JlYWN0Q29tcG9uZW50Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJjaGlsZHJlbiIsImRlZmF1bHRQcm9wcyIsIiQkdHlwZW9mIiwiX293bmVyIiwicG9wIiwia2V5UHJlZml4IiwiViIsImVzY2FwZSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJDb21wb25lbnQiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwicmVuZGVyIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJjb21wYXJlIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwiZXgiLCJfY3JlYXRlRW1vdGlvblNlcnZlciIsImRlZmF1bHQiLCJleHRyYWN0Q3JpdGljYWwiLCJyZW5kZXJTdHlsZXNUb1N0cmluZyIsInJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbSIsIl9pbnRlcm9wRGVmYXVsdCIsInRocm91Z2giLCJ0b2tlbml6ZSIsImNyZWF0ZUV4dHJhY3RDcml0aWNhbCIsImh0bWwiLCJSR1giLCJnZW5lcmF0ZVN0eWxlVGFnIiwiY3NzS2V5Iiwibm9uY2VTdHJpbmciLCJjcmVhdGVSZW5kZXJTdHlsZXNUb1N0cmluZyIsInJlZ2V4Iiwic2VlbiIsImdsb2JhbElkcyIsImdsb2JhbFN0eWxlcyIsInN0eWxlIiwibGFzdEluc2VydGlvblBvaW50IiwiX2lkIiwiX3N0eWxlIiwiY3JlYXRlUmVuZGVyU3R5bGVzVG9Ob2RlU3RyZWFtIiwiaW5zZWQiLCJ0b2tlblN0cmVhbSIsImlubGluZVN0cmVhbSIsInRoaW5nIiwiZnJhZ21lbnQiLCJxdWV1ZSIsIm9wdHMiLCJfZW5kZWQiLCJkcmFpbiIsIl9lbmQiLCJhdXRvRGVzdHJveSIsImJ1ZmZlckZyb20iLCJUb2tlbml6ZSIsImNvZGVzIiwiZW5kU2NyaXB0IiwiZW5kU3R5bGUiLCJlbmRUaXRsZSIsImNvbW1lbnQiLCJlbmRDb21tZW50IiwiY2RhdGEiLCJlbmRDZGF0YSIsInN0YXRlcyIsInRhZ1N0YXRlIiwicXVvdGVTdGF0ZSIsImJ1ZmZlcnMiLCJfbGFzdCIsImlzV2hpdGVTcGFjZSIsIm9mZnNldCIsIl9wcmV2IiwiX29mZnNldCIsIl90ZXN0UmF3IiwiX3B1c2hTdGF0ZSIsIl9nZXRDaGFyIiwiX2dldFRhZyIsImlzTW9kZXJuIiwiYnl0ZU9mZnNldCIsIm1heExlbmd0aCIsImJ5dGVMZW5ndGgiLCJSYW5nZUVycm9yIiwiZnJvbUFycmF5QnVmZmVyIiwiZnJvbVN0cmluZyIsIlBhc3NUaHJvdWdoIiwiUkVBREFCTEVfU1RSRUFNIiwiY3RvciIsInN1cGVyQ3RvciIsInN1cGVyXyIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIiwiZHVwbGV4ZXIiLCJvYmplY3RBc3NpZ24iLCJkZWZhdWx0T3B0cyIsImJ1YmJsZUVycm9ycyIsInN0cmVhbXMiLCJsYXN0QXJnIiwiZmlyc3QiLCJEdXBsZXhXcmFwcGVyIiwiX3dyaXRhYmxlIiwiX3JlYWRhYmxlIiwiX3dhaXRpbmciLCJyZWFkcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnNwZWN0IiwiY3VzdG9tIiwicGEiLCJVaW50MTZBcnJheSIsInJhIiwic2EiLCJ0YSIsInVhIiwidmEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJ4bGlua0hyZWYiLCJ5YSIsInphIiwid2EiLCJ4YSIsIkJhIiwiaXMiLCJDYSIsIm1lbW9pemVkU3RhdGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsImRpc3BhdGNoIiwiZGVsZXRlIiwiSGEiLCJNYXAiLCJJYSIsIkphIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJyZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIkthIiwiTGEiLCJNYSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiTmEiLCJtZW51aXRlbSIsImdyaWRBcmVhIiwibGluZUNsYW1wIiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsImxpc3RpbmciLCJwcmUiLCJ0ZXh0YXJlYSIsIlRhIiwiVWEiLCJWYSIsIlhhIiwiWWEiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIlphIiwiJGEiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsInFhIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImdldENoaWxkQ29udGV4dCIsImNoaWxkQ29udGV4dFR5cGVzIiwiY2hpbGQiLCJhYiIsImRvbU5hbWVzcGFjZSIsImNoaWxkSW5kZXgiLCJmb290ZXIiLCJ0aHJlYWRJRCIsInN0YWNrIiwiZXhoYXVzdGVkIiwiY3VycmVudFNlbGVjdFZhbHVlIiwicHJldmlvdXNXYXNUZXh0Tm9kZSIsIm1ha2VTdGF0aWNNYXJrdXAiLCJzdXNwZW5zZURlcHRoIiwiY29udGV4dEluZGV4IiwiY29udGV4dFN0YWNrIiwiY29udGV4dFZhbHVlU3RhY2siLCJjbGVhclByb3ZpZGVycyIsInB1c2hQcm92aWRlciIsInBvcFByb3ZpZGVyIiwiZmFsbGJhY2tGcmFtZSIsInRoZW4iLCJyZW5kZXJET00iLCJkZWZhdWx0Q2hlY2tlZCIsImNoZWNrZWQiLCJXYSIsInNlbGVjdGVkIiwiX19odG1sIiwicGFydGlhbFJlbmRlcmVyIiwiYmIiLCJyZW5kZXJUb1N0cmluZyIsIkluZmluaXR5IiwicmVuZGVyVG9TdGF0aWNNYXJrdXAiLCJyZW5kZXJUb05vZGVTdHJlYW0iLCJyZW5kZXJUb1N0YXRpY05vZGVTdHJlYW0iLCJzaG9ydE5hbWUiLCJsb25nTmFtZSIsInBhcnNlQXJndW1lbnRzIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ck9wdCIsIm1pbnV0ZU9wdCIsIkRhdGUiLCJfXyIsInN5c19lcnJvciIsImZhaWx1cmUiLCJpbnZhbGlkX2FyZ3VtZW50IiwiZW5kX29mX2ZpbGUiLCJkaXZpc2lvbl9ieV96ZXJvIiwibm90X2ZvdW5kIiwiYXNzZXJ0X2ZhaWx1cmUiLCJjYW1sX2FycmF5X3N1YiIsImNhbWxfYXJyYXlfc2V0IiwibmV3dmFsIiwiY2FtbF9hcnJheV9nZXQiLCJjYW1sX21ha2VfdmVjdCIsImluaXQiLCJhcHAiLCJfZiIsIl9hcmdzIiwiaW5pdF9hcml0eSIsImFyaXR5IiwiXzEiLCJhMCIsInBhcmFtJDEiLCJwYXJhbSQyIiwicGFyYW0kMyIsInBhcmFtJDQiLCJwYXJhbSQ1IiwiX18xIiwiXzIiLCJhMSIsIl9fMiIsIl8zIiwiYTIiLCJfXzMiLCJfNCIsImEzIiwiXzUiLCJhNCIsIl82IiwiYTUiLCJ1bmRlZmluZWRIZWFkZXIiLCJuaWQiLCJibG9jayQxIiwibnVsbGFibGVfdG9fb3B0IiwidmFsRnJvbU9wdGlvbiIsImRpY3QiLCJjb250ZW50cyIsImNhbWxfaW50X2NvbXBhcmUiLCJjYW1sX3N0cmluZ19jb21wYXJlIiwiczEiLCJzMiIsImNhbWxfaW50X21pbiIsImNhbWxfaW50X21heCIsImdldEV4biIsInlzIiwibGVueCIsImxlbnkiLCJ6aXBCeSIsInppcEJ5VSIsImwxIiwibDIiLCJhMWEyIiwiaSQxIiwic2xpY2VUb0VuZCIsImxlbmEiLCJvZnMiLCJibGl0VW5zYWZlIiwic3Jjb2ZzMSIsInNyY29mczIiLCJibGl0TGVuZ3RoIiwiaiQxIiwic3RyaWN0bHlTb3J0ZWRMZW5ndGhVIiwibHQiLCJ4MCIsIngxIiwiX3ByZWMiLCJfYWNjIiwiYWNjIiwicHJlYyIsInNvcnRlZExlbmd0aEF1eE1vcmUiLCJzcmMxb2ZzIiwic3JjMWxlbiIsInNyYzIiLCJzcmMyb2ZzIiwic3JjMmxlbiIsImRzdG9mcyIsImNtcCIsInNyYzFyIiwic3JjMnIiLCJfaTEiLCJfczEiLCJfaTIiLCJfczIiLCJfZCIsImkyIiwiaTEiLCJpMSQxIiwiaTIkMSIsImluc2VydGlvblNvcnQiLCJzcmNvZnMiLCJzb3J0VG8iLCJzdGFibGVTb3J0SW5QbGFjZUJ5VSIsInN0YWJsZVNvcnRCeSIsInN0YWJsZVNvcnRCeVUiLCJ0cmVlSGVpZ2h0IiwiaGVpZ2h0IiwiaGwiLCJsZWZ0IiwicmlnaHQiLCJoZWlnaHRHZSIsInVwZGF0ZVZhbHVlIiwibmV3VmFsdWUiLCJiYWwiLCJsdiIsImxkIiwibGwiLCJsciIsInJ2IiwicmQiLCJybCIsInJyIiwibWluS2V5MEF1eCIsIl9uIiwibiQxIiwibWluS2V5IiwibWF4S2V5MEF1eCIsIm1heEtleSIsIm1pbktWMEF1eCIsIm1pbmltdW0iLCJtYXhLVjBBdXgiLCJtYXhpbXVtIiwicmVtb3ZlTWluQXV4V2l0aFJlZiIsImtyIiwidnIiLCJsbiIsInJuIiwia24iLCJ2biIsImlzRW1wdHkiLCJzdGFja0FsbExlZnQiLCJfdiIsIl9zIiwiZmluZEZpcnN0QnlVIiwibmV3TGVmdCIsIm5ld0QiLCJuZXdSaWdodCIsIm1hcFdpdGhLZXlVIiwiX20iLCJfYWNjdSIsImFjY3UiLCJhZGRNaW5FbGVtZW50IiwiYWRkTWF4RWxlbWVudCIsImxoIiwicmgiLCJ0MSIsInQyIiwidDJyIiwiY29uY2F0T3JKb2luIiwia2VlcFNoYXJlZFUiLCJwdmQiLCJwYXJ0aXRpb25TaGFyZWRVIiwibGYiLCJtYXRjaCQxIiwicmYiLCJydCIsImxlbmd0aE5vZGUiLCJ0b0xpc3RBdXgiLCJmaWxsQXJyYXkiLCJybmV4dCIsImtleXNUb0FycmF5IiwiZmlsbEFycmF5S2V5IiwidmFsdWVzVG9BcnJheSIsImZpbGxBcnJheVZhbHVlIiwiZnJvbVNvcnRlZEFycmF5UmV2QXV4Iiwib2ZmIiwibWF0Y2hfMDAwIiwibWF0Y2gkMiIsIm1hdGNoXzAwMCQxIiwibWF0Y2hfMDAxJDEiLCJtYXRjaCQzIiwibWF0Y2gkNCIsIm1hdGNoJDUiLCJubCIsIm1hdGNoJDYiLCJmcm9tU29ydGVkQXJyYXlBdXgiLCJrY21wIiwidmNtcCIsImxlbjEiLCJsZW4yIiwiX2UxIiwiX2UyIiwiZTIiLCJlMSIsImgyIiwiaDEiLCJ2ZXEiLCJyb3RhdGVXaXRoTGVmdENoaWxkIiwiazIiLCJrMSIsImhsazIiLCJocmsyIiwiaGxrMSIsImhrMiIsInJvdGF0ZVdpdGhSaWdodENoaWxkIiwiaHJrMSIsImhrMSIsImhlaWdodFVwZGF0ZU11dGF0ZSIsImhsdCIsImhydCIsImJhbE11dGF0ZSIsIm50IiwiazMiLCJkb3VibGVXaXRoUmlnaHRDaGlsZCIsInVwZGF0ZU11dGF0ZSIsImZvcl9pbiIsImZvbyIsImNhbWxfY29tcGFyZSIsIl9hIiwiX2IiLCJhX3R5cGUiLCJiX3R5cGUiLCJ0YWdfYSIsInRhZ19iIiwibGVuX2EiLCJsZW5fYiIsIm1pbl9rZXlfbGhzIiwibWluX2tleV9yaHMiLCJkb19rZXkiLCJtaW5fa2V5IiwibWsiLCJkb19rZXlfYSIsInBhcnRpYWxfYXJnIiwiZG9fa2V5X2IiLCJwYXJ0aWFsX2FyZyQxIiwiX2kkMSIsInJlcyQxIiwiX2kkMiIsImkkMiIsInJlcyQyIiwiY2FtbF9lcXVhbCIsInVuc2FmZV9jb21wYXJlIiwiTWFnbWEiLCIkbGVzcyRjb2xvbiRncmVhdCIsImFwcGVuZCIsIk1hZ21hX0FueSIsIiRsZXNzJCRncmVhdCIsIiRsZXNzJGhhc2gkZ3JlYXQiLCIkbGVzcyRzdGFyJGdyZWF0IiwiJGdyZWF0JGdyZWF0JGVxIiwiZmxhdF9tYXAiLCIkZXEkbGVzcyRsZXNzIiwiJGdyZWF0JGVxJGdyZWF0IiwiJGxlc3MkZXEkbGVzcyIsImYkMSIsIkFsdGVybmF0aXZlIiwiJGxlc3MkcGlwZSRncmVhdCIsImFsdCIsIiRsZXNzJGRvdCIsImNvbXBvc2UiLCIkZ3JlYXQkZG90IiwiJGVxJHBpcGUkZXEiLCJlcSIsIkZuIiwibGVzc190aGFuIiwiZ3JlYXRlcl90aGFuIiwibGVzc190aGFuX29yX2VxdWFsIiwiZ3JlYXRlcl90aGFuX29yX2VxdWFsIiwiJGxlc3MkcGlwZSRwaXBlIiwiJHBpcGUkcGlwZSRncmVhdCIsIiRsZXNzJHBpcGUkZXEiLCIkZ3JlYXQkcGlwZSRlcSIsIkV1Y2xpZGVhbl9SaW5nIiwiJHBpcGUkcGx1cyRwaXBlIiwiYWRkIiwiJHBpcGUkc3RhciRwaXBlIiwibXVsdGlwbHkiLCIkcGlwZSRuZWckcGlwZSIsInN1YnRyYWN0IiwiJHBpcGUkc2xhc2gkcGlwZSIsImRpdmlkZSIsIiRwaXBlJHBlcmNlbnQkcGlwZSIsImZsaXAiLCIkJGNvbnN0IiwiQ2F0ZWdvcnkiLCJlbXB0eSIsIiQkdm9pZCIsInZvaWRfcmlnaHQiLCJmYiIsInZvaWRfbGVmdCIsImZsYXAiLCJhcHBseV9maXJzdCIsImFwcGx5X3NlY29uZCIsImFwcGx5X2JvdGgiLCJhJHByaW1lIiwiYiRwcmltZSIsImxpZnQyIiwibGlmdDMiLCJsaWZ0NCIsImxpZnQ1IiwiSW5maXgiLCIkbGVzcyRzdGFyIiwiJHN0YXIkZ3JlYXQiLCJJJDEiLCJ3aGVuXyIsInB1cmUiLCJ1bmxlc3MiLCJsaWZ0QTEiLCJmbGF0dGVuIiwiY29tcG9zZV9rbGllc2xpIiwiY29tcG9zZV9rbGllc2xpX2ZsaXBwZWQiLCJpZl9tIiwicCRwcmltZSIsImxpZnRNMSIsImZhJHByaW1lIiwiYXAiLCJmJHByaW1lIiwiU2VtaWdyb3VwIiwiRk0iLCJGb2xkX01hcF9BbnkiLCJzdXJyb3VuZF9tYXAiLCJmb2xkX21hcCIsInN1cnJvdW5kIiwiTW9ub2lkIiwiRm9sZF9NYXAiLCJmb2xkIiwiaW50ZXJjYWxhdGUiLCJzZXBhcmF0b3IiLCJmb2xkX2xlZnQiLCJBcHBsaWNhdGl2ZSIsInRyYXZlcnNlJHByaW1lIiwiZm9sZF9yaWdodCIsInNlcXVlbmNlJHByaW1lIiwiUGx1cyIsIm9uZV9vZiIsIk1vbmFkIiwiZm9sZF9tb25hZCIsIkJzQXBwbHlFeHRlbnNpb25zIiwibWFwMiIsIm1hcDMiLCJtYXA0IiwibWFwNSIsImFwcGx5Rmlyc3QiLCJhcHBseVNlY29uZCIsInR1cGxlMiIsInR1cGxlMyIsImZjIiwidHVwbGU0IiwiZmQiLCJ0dXBsZTUiLCJmZSIsIm1hcFR1cGxlMiIsIm1hcFR1cGxlMyIsIm1hcFR1cGxlNCIsIm1hcFR1cGxlNSIsIkFwcGx5SW5maXgiLCJBcHBseUV4dGVuc2lvbnNfdHVwbGUyIiwiQXBwbHlFeHRlbnNpb25zIiwiQnNNb25hZEV4dGVuc2lvbnMiLCJmbGF0TWFwIiwibW1hIiwiY29tcG9zZUtsZWlzbGkiLCJmbGlwQ29tcG9zZUtsZWlzbGkiLCJNb25hZEluZml4IiwiTW9uYWRFeHRlbnNpb25zIiwiQnNGdW5jdG9yRXh0ZW5zaW9ucyIsImZsaXBNYXAiLCJ2b2lkUmlnaHQiLCJ2b2lkTGVmdCIsIkZ1bmN0b3JJbmZpeCIsIkZ1bmN0b3JFeHRlbnNpb25zIiwiJGxlc3MkIiwiJCRncmVhdCIsIiRsZXNzJGF0JGdyZWF0IiwiQXBwbGljYXRpdmVFeHRlbnNpb25zIiwiQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMiLCJhbGwiLCJyZXN0IiwiZmxpcENvbXBvc2UiLCIkbGVzcyRsZXNzIiwiJGdyZWF0JGdyZWF0IiwiY29weUF1eENvbnQiLCJfY2VsbFgiLCJjZWxsWCIsInNwbGl0QXQiLCJsc3QiLCJjZWxsIiwiX2NlbGwiLCJjZWxsJDEiLCJzcGxpdEF0QXV4IiwiY29weUF1eFdpdGhNYXAiLCJfeCIsIl9yZXMiLCJmaWxsQXV4IiwiX2wxIiwiX2wyIiwicmV2ZXJzZUNvbmNhdCIsIl9sIiwic29ydFUiLCJvcHQiLCJvZl9saXN0IiwiX3BhcmFtIiwibGlzdF9sZW5ndGgiLCJpX2ZpbmlzaCIsInByaW0iLCJwcmltJDEiLCJmb2xkX21hcF9kZWZhdWx0X2xlZnQiLCJmb2xkX21hcF9kZWZhdWx0X3JpZ2h0IiwiU2VxdWVuY2UiLCJzZXF1ZW5jZV9kZWZhdWx0IiwidHJhdmVyc2UiLCJ6aXBfd2l0aCIsInppcCIsIkZ1bmN0b3IiLCJBbHQiLCJBcHBseSIsIkZvbGRhYmxlX0ZvbGRfTWFwIiwiRm9sZGFibGVfRm9sZF9NYXBfQW55IiwiRm9sZGFibGVfRm9sZF9NYXBfUGx1cyIsIkZvbGRhYmxlIiwidW5mb2xkIiwiVW5mb2xkYWJsZSIsIkludmFyaWFudCIsIkV4dGVuZCIsImluY2x1ZGUiLCJpbmNsdWRlJDEiLCJJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQiLCJJbmZpeF8kbGVzcyRoYXNoJGdyZWF0IiwiSW5maXhfJGxlc3Mkc3RhciRncmVhdCIsIkluZml4XyRncmVhdCRncmVhdCRlcSIsIkluZml4XyRlcSRsZXNzJGxlc3MiLCJJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQiLCJJbmZpeF8kbGVzcyRlcSRsZXNzIiwibWFrZSIsIm1hcGkiLCJldmVyeSIsImVuZF8iLCJmbl9hcnJheSIsImZ1bmFyZyIsIkZvbGRfTWFwX1BsdXMiLCJpbWFwIiwiJGxlc3MkbGVzcyRlcSIsIiRlcSRncmVhdCRncmVhdCIsIlRyYXZlcnNhYmxlIiwic2VxdWVuY2UiLCJFcSIsIk9yZCIsIlNob3ciLCJzaG93IiwiYlRvQSIsImVxQSIsImIxIiwiYjIiLCJub3RFcSIsImVxV2l0aENvbnZlcnNpb24iLCJlcUludmVydGVkIiwiRXFJbnZlcnRlZCIsIkVxQnkiLCJjb21wYXJlQSIsImNvbXBhcmVBc0ludEJ5IiwibGVzc1RoYW5CeSIsImxlc3NUaGFuT3JFcUJ5IiwiZ3JlYXRlclRoYW5CeSIsImdyZWF0ZXJUaGFuT3JFcUJ5Iiwib3JkIiwiY2xhbXBCeSIsImJldHdlZW5CeSIsInJpbmciLCJ6ZXJvIiwib25lIiwiY29tcGFyZVJldmVyc2VkIiwibGVzc1RoYW4iLCJsZXNzVGhhbk9yRXEiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuT3JFcSIsImxlc3NUaGFuJDEiLCJjb21wYXJlVG8iLCJsZXNzVGhhbk9yRXEkMSIsImdyZWF0ZXJUaGFuJDEiLCJncmVhdGVyVGhhbk9yRXEkMSIsImNvbXBhcmVXaXRoQ29udmVyc2lvbiIsIk9yZFJldmVyc2VkIiwiY29tcGFyZUFzSW50IiwibHRlIiwiZ3QiLCJndGUiLCJjbGFtcCIsImJldHdlZW4iLCJPcmRSaW5nRXh0ZW5zaW9ucyIsImFicyIsInNpZ251bSIsIk9yZE5hbWVkIiwiT3JkQnkiLCJjYW1sX2NyZWF0ZV9ieXRlcyIsImNhbWxfYmxpdF9ieXRlcyIsIm9mZjEiLCJyYW5nZV9hIiwicmFuZ2VfYiIsInJhbmdlX2EkMSIsInJhbmdlX2IkMSIsInJhbmdlJDEiLCJieXRlc190b19zdHJpbmciLCJzX2xlbiIsInRtcF9ieXRlcyIsImJ5dGVzX29mX3N0cmluZyIsImRpdiIsIm1vZF8iLCJpbXVsIiwicGFyc2VfZGlnaXQiLCJpbnRfb2Zfc3RyaW5nX2Jhc2UiLCJwYXJzZV9zaWduX2FuZF9iYXNlIiwiY2FtbF9pbnRfb2Zfc3RyaW5nIiwiX2siLCJhY2MkMSIsImF1eCIsIm9yX3JlcyIsIiRhdCIsImxpc3RBcHBlbmQiLCJFbnVtRXh0ZW5zaW9ucyIsImZyb21Ub0FzTGlzdCIsIl9jdXJyZW50IiwicHJldiIsInByZWQiLCJzdWNjIiwidXBGcm9tQXNMaXN0IiwibmV4dCQxIiwidXBGcm9tSW5jbHVkaW5nQXNMaXN0IiwiZG93bkZyb21Bc0xpc3QiLCJkb3duRnJvbUluY2x1ZGluZ0FzTGlzdCIsImZyb21JbnQiLCJ0b0ludCIsIm8xIiwibzIiLCJmcm9tVGhlblRvQXNMaXN0Iiwic3RhcnRJbnQiLCJmcm9tRW51bSIsInN0ZXBJbnQiLCJfY3VycmVudEludCIsImN1cnJlbnRJbnQiLCJuZXh0SW50JDEiLCJ0b0VudW0iLCJ0b3AiLCJib3R0b20iLCJjYXJkaW5hbGl0eSIsIm1heWJlIiwiJCRkZWZhdWx0IiwiZm5fb3B0IiwieCRwcmltZSIsIkFsdEV4dGVuc2lvbnMiLCJvckVsc2UiLCJmYWxsYmFjayIsIkFsdEluZml4IiwiTW9ub2lkRXh0ZW5zaW9ucyIsIkJzTW9ub2lkRXh0ZW5zaW9ucyIsInBvd2VyIiwiZ28iLCJ4JHByaW1lJDEiLCJndWFyZCIsIm9wdGlvbkFsdCIsIkZvbGRhYmxlRXh0ZW5zaW9ucyIsIkJzRm9sZGFibGVFeHRlbnNpb25zIiwiYW55IiwiaW5kZXhPZkJ5IiwibWluQnkiLCJtYXhCeSIsImNvdW50QnkiLCJjb250YWluc0J5IiwiY29udGFpbnMiLCJvcmRBIiwiZm9yRWFjaFdpdGhJbmRleCIsImZpbmQiLCJmaW5kV2l0aEluZGV4IiwidG9MaXN0IiwiRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zIiwiQnNGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMiLCJzdXJyb3VuZE1hcCIsIkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyIsIkJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zIiwiZm9sZE1hcCIsImZvbGRXaXRoTW9ub2lkIiwic2VwIiwibW9ub2lkQSIsIkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zIiwiQnNGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyIsInRyYXZlcnNlXyIsInNlcXVlbmNlXyIsIkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zIiwiQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyIsImZvbGRXaXRoTW9uYWQiLCJGb2xkYWJsZUVxRXh0ZW5zaW9ucyIsIkZvbGRhYmxlT3JkRXh0ZW5zaW9ucyIsIlNlbWlncm91cEV4dGVuc2lvbnMiLCJjb25jYXROYW1lZCIsInN1ZmZpeCIsIlNlbWlncm91cG9pZEV4dGVuc2lvbnMiLCJhbmRUaGVuIiwiYVRvQiIsImJUb0MiLCJTZW1pZ3JvdXBvaWRJbmZpeCIsIlNFIiwiJGxlc3MkbGVzcyRsZXNzIiwiJGdyZWF0JGdyZWF0JGdyZWF0Iiwib3B0aW9uQlRvQyIsIm9wdGlvbkFUb0IiLCJpbm5lckVxIiwiZm9sZExhenkiLCJnZXRPckVsc2UiLCJnZXRPckVsc2VMYXp5IiwiU2VtaWdyb3VwQW55RXh0ZW5zaW9ucyIsIk1vbm9pZEFueSIsIkVxQSIsImlubmVyU2hvdyIsIlNob3dBIiwiaXNOb3RFbXB0eSIsInRhaWxPckVtcHR5IiwiX2NvdW50IiwiX3Jlc3QiLCJ6aXBXaXRoIiwiX2NlbGxZIiwiY2VsbFkiLCJjb3B5QXV4V2l0aE1hcDIiLCJzb3J0QnkiLCJkaXN0aW5jdEJ5IiwicmVtb3ZlRmlyc3RCeSIsInJlbW92ZUVhY2hCeSIsInByZXBlbmQiLCJ6aXBBdXgiLCJNYWtlQ29tcGFyYWJsZSIsIm5ld0siLCJyJDEiLCJsJDEiLCJyJDIiLCJuZXdEJDEiLCJyZW1vdmVBdXgwIiwic3BsaXRBdXhQaXZvdCIsInByZXMiLCJ2MSIsImQxIiwicjEiLCJkMiIsImQyJDEiLCJ2MiIsImQyJDIiLCJyMiIsImQxJDEiLCJkMSQyIiwiZGVmIiwib2RhdGEiLCJuZXdEYXRhIiwiX3QiLCJtMSIsIm0yIiwiX3hzIiwiX3lzIiwiX194IiwiY29tcGFyZUludCIsImNvbXBhcmF0b3IiLCJjb21wYXJlQnkiLCJieSIsImNvbmQiLCJ1cGRhdGVGbiIsIm1lcmdlRm4iLCJncm91cExpc3RCeSIsImNvbXBhcmFibGUiLCJncm91cEJ5IiwiYWRkSXRlbVRvTWFwIiwiYWRkSXRlbVRvR3JvdXAiLCJncm91cEFycmF5QnkiLCJwYXJ0aWFsX2FyZyQyIiwicmVkdWNlVSIsIldpdGhPcmQiLCJDb21wYXJhYmxlIiwic2luZ2xldG9uIiwiZXFCeSIsImZvbGRMZWZ0IiwiZnJvbUFycmF5IiwiZnJvbVZhbHVlQXJyYXkiLCJ0b0tleSIsImZyb21WYWx1ZUxpc3QiLCJrZXlBcnJheSIsInZhbHVlQXJyYXkiLCJyZW1vdmVNYW55IiwidXBkYXRlIiwibWVyZ2VNYW55Iiwia2VlcCIsImZpbHRlck5vdCIsInJlamVjdCIsInBhcnRpdGlvbiIsIm1hcFdpdGhLZXkiLCJtaW4wQXV4IiwibWF4MEF1eCIsImpvaW5TaGFyZWQiLCJjb25jYXRTaGFyZWQiLCJwdiIsIngwJDEiLCJ4MSQxIiwieDIiLCJuZXdMIiwibmV3UiIsImNtcCQxIiwidiQxIiwic3BsaXRBdXhOb1Bpdm90Iiwic3Vic2V0IiwidG9nZ2xlIiwicHJlZGljYXRlIiwidW5pb24iLCJpbnRlcnNlY3QiLCJkaWZmIiwiZm9sZFJpZ2h0IiwiaW52ZXJzZSIsIkFkZGl0aXZlIiwiTWVkaWFsX01hZ21hIiwiUXVhc2lncm91cCIsIk1lZGlhbF9RdWFzaWdyb3VwIiwiTG9vcCIsIkdyb3VwIiwiQWJlbGlhbl9Hcm91cCIsIk1hZ21hJDEiLCJNdWx0aXBsaWNhdGl2ZSIsImRlZ3JlZSIsIkFkZGl0aXZlJDEiLCJNdWx0aXBsaWNhdGl2ZSQxIiwiUmluZ0V4dGVuc2lvbnMiLCIkbmVnIiwibmVnYXRlIiwiZXhuIiwiY3VyciIsIkxpc3QiLCJlbXB0eUxhenkiLCJ1bmNvbnMiLCJyZXZlcnNlIiwibWtTdHJpbmciLCJzaG93QnkiLCJta1N0cmluZyQxIiwiJCRBcnJheSIsInRhaWxTZXF1ZW5jZSIsIm5vbkVtcHR5MSIsIm5vbkVtcHR5MiIsIlRhaWxGb2xkTWFwIiwiU2VxdWVuY2VGb2xkTWFwQW55IiwiVGFpbEZvbGRNYXBQbHVzIiwiZmYiLCJub25FbXB0eSIsImRlbGltIiwic2hvd1giLCJmcm9tU2VxdWVuY2UiLCJ0b1NlcXVlbmNlIiwiYXJyYXkiLCJjb25zIiwidGFpbE5vbkVtcHR5IiwiU2VtaWdyb3VwQW55IiwiTWFnbWFBbnkiLCJyZWR1Y2VMZWZ0Iiwic2hvd0EiLCJXaXRoQXBwbGljYXRpdmUiLCJUYWlsVHJhdmVyc2FibGUiLCJvbmUkMSIsIm1ha2UkMSIsInRvU2VxdWVuY2UkMSIsImhlYWQkMSIsInRhaWwkMSIsImNvbmNhdCQxIiwiU2VtaWdyb3VwQW55JDEiLCJNYWdtYUFueSQxIiwicmVkdWNlTGVmdCQxIiwiZm9sZExlZnQkMSIsImZvbGRSaWdodCQxIiwiRm9sZGFibGVfRm9sZF9NYXAkMSIsIkZvbGRhYmxlX0ZvbGRfTWFwX0FueSQxIiwiRm9sZGFibGVfRm9sZF9NYXBfUGx1cyQxIiwiRm9sZGFibGUkMSIsImJpbmQkMSIsImVxQnkkMSIsInNob3dCeSQxIiwidG9Ob25FbXB0eUxpc3QiLCJmcm9tTm9uRW1wdHlMaXN0IiwiYmltYXAiLCJhcHBseVdpdGhBcHBlbmRFcnJvcnMiLCJhcHBlbmRFcnJvcnMiLCJmdiIsImFsaWduV2l0aEFwcGVuZEVycm9ycyIsIldpdGhFcnJvcnMiLCJFcnJvcnMiLCIkJEVycm9yIiwiaW5jbHVkZSQyIiwiU2VtaWFsaWduIiwiYWxpZ24iLCJhbGlnbldpdGgiLCJhbGlnbldpdGhXaXRoQXBwZW5kRXJyb3JzIiwiaW5jbHVkZSQzIiwiaW5jbHVkZSQ0IiwiaW5jbHVkZSQ1IiwiaW5jbHVkZSQ2IiwiQmlmdW5jdG9yRXh0ZW5zaW9ucyIsIm1hcFJpZ2h0IiwiYlRvRCIsImZhYiIsIm1hcExlZnQiLCJhVG9DIiwibWFwRXJyb3IiLCJlYyIsImFjIiwiZGVmYXVsdEVycm9yIiwibWFwQSIsIm1hcEUiLCJvbkRvbmUiLCJnZXRFcnJvciIsIm9wdGlvbiIsImlvIiwiclRvSU9BIiwiaW9SIiwidW5zYWZlUnVuQXN5bmMiLCJfb25Eb25lIiwiX2lvQSIsImlvQSIsInIwVG9BIiwicmVzdWx0RSIsInVuc2FmZVJ1bkFzeW5jUGFyMiIsInJlc3VsdFIwVG9BIiwicmVzdWx0UjAiLCJyMFRvSU9BIiwiaW9CIiwicmVmQSIsInJlZkIiLCJyZXN1bHRBIiwicmVzdWx0QiIsImlvQlRvQyIsImlvQVRvQiIsImdldEJUb0MiLCJnZXRJT0JUb0MiLCJvbkRvbmVCVG9DIiwicjBUb0JUb0MiLCJyMCIsInIwVG9JT0JUb0MiLCJjb21wb3NlUHVyZSIsImdldEFUb0IiLCJjb21wb3NlU3VzcGVuZCIsImdldElPQVRvQiIsImlvUjAiLCJpb1IwJDEiLCJpb1IwVG9CVG9DIiwiaW9SMCQyIiwiY29tcG9zZVN1c3BlbmRJTyIsIm9uRG9uZUFUb0IiLCJjb21wb3NlQXN5bmMiLCJyMFRvQVRvQiIsImNvbXBvc2VNYXAiLCJpb1IwVG9BVG9CIiwiY29tcG9zZUFwcGx5IiwicjBUb0lPQVRvQiIsImNvbXBvc2VGbGF0TWFwIiwiZTFUb0UyIiwiZ2V0SU9BIiwib25Eb25lQSIsImVUb0lPQSIsImdldFIwIiwiZ2V0SU9SMCIsIm9uRG9uZVIwIiwicjFUb1IwIiwicjFUb0lPUjAiLCJjYXRjaEVycm9yTWFwIiwiaW9SMFRvQSIsImlvUjEiLCJjYXRjaEVycm9yQXBwbHkiLCJpb1IxVG9SMCIsImNhdGNoRXJyb3JGbGF0TWFwIiwiZVRvQSIsIm1hcEVycm9yJDEiLCJOdW1iZXIiLCJOYU4iLCJzdWJ0cmFjdCQxIiwiaXNfc3BhY2UiLCJzd2l0Y2hlciIsInN1bSIsInByb2R1Y3QiLCJzdW0kMSIsInByb2R1Y3QkMSIsIk9wdGlvbk9yZCQxIiwiT3B0aW9uT3JkJDIiLCJmcm9tSnMiLCJhZGRyZXNzIiwiZXJybm8iLCJpbmZvIiwicG9ydCIsInN5c2NhbGwiLCJfbWFrZVN5c3RlbUVycm9yIiwiZXhjIiwiX21ha2VVbmtub3duRXJyb3IiLCJmcm9tRXhjZXB0aW9uIiwibWFrZVN5c3RlbUVycm9yIiwibWFrZVVua25vd25FcnJvciIsIl9tYWtlRXJyb3IiLCJyZWFkRmlsZSIsImVuY29kaW5nT3B0IiwicmVzb2x2ZSIsIm1hdGNoRGF0ZSIsInBhcnNlRW50cnkiLCJwYXJzZVRpdGxlIiwibWF0Y2hfIiwiY2FwdHVyZXMiLCJjYXB0dXJlIiwiaG91ciIsIm1pbnV0ZSIsImRhdGUiLCJwYXJzZVRpbWVzdGFtcCIsInBhcnNlVGFncyIsInJlYWRBbmRQYXJzZUVudHJpZXNEaXJlY3RvcnkiLCJkaXJlY3RvcnkiLCJlbnRyaWVzIiwiZW5kc1dpdGgiLCJpc0RpcmVjdG9yeSIsImNvbnNvbGUiLCJsb2ciLCJhY2N1bXVsYXRvciIsIndpdGhGaWxlVHlwZXMiLCJmaWxlcyIsInJlYWRBbmRQYXJzZUFsbCIsImFib3V0UGF0aCIsImVudHJpZXNEaXJlY3RvcnkiLCJhYm91dCIsIiQkUmVzcG9uc2UiLCJzZXRTdGF0dXNDb2RlIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwic2V0Q29udGVudFR5cGUiLCJzZXRIZWFkZXIiLCJzZXRDb250ZW50TGVuZ3RoIiwic2V0TGFzdE1vZGlmaWVkIiwidG9VVENTdHJpbmciLCJub3RGb3VuZCIsIkNhc2NhZGluZyIsImluaXRpYWwiLCJpbmhlcml0XyIsIlBlcmNlbnRhZ2UiLCJwY3QiLCJ0b1N0cmluZyQ0IiwidmFyaWFudCIsIkxlbmd0aCIsImVtIiwicmVtIiwidmgiLCJ2dyIsInZtaW4iLCJ2bWF4IiwicHgiLCJweEZsb2F0IiwiY20iLCJtbSIsImluY2giLCJwYyIsInB0IiwidG9TdHJpbmckNSIsIkFuZ2xlIiwiZGVnIiwicmFkIiwiZ3JhZCIsInR1cm4iLCJEaXJlY3Rpb24iLCJsdHIiLCJydGwiLCJQb3NpdGlvbiIsImFic29sdXRlIiwicmVsYXRpdmUiLCIkJHN0YXRpYyIsImZpeGVkIiwic3RpY2t5IiwiUmVzaXplIiwibm9uZSIsImJvdGgiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJpbmxpbmUiLCJGb250VmFyaWFudCIsIm5vcm1hbCIsInNtYWxsQ2FwcyIsIkZvbnRTdHlsZSIsIml0YWxpYyIsIm9ibGlxdWUiLCJPdmVyZmxvdyIsImhpZGRlbiIsInZpc2libGUiLCJzY3JvbGwiLCJhdXRvIiwiRm9udFdlaWdodCIsInRoaW4iLCJleHRyYUxpZ2h0IiwibGlnaHQiLCJtZWRpdW0iLCJzZW1pQm9sZCIsImJvbGQiLCJleHRyYUJvbGQiLCJsaWdodGVyIiwiYm9sZGVyIiwiQ3Vyc29yIiwiY29udGV4dE1lbnUiLCJwb2ludGVyIiwicHJvZ3Jlc3MiLCJ3YWl0IiwiY3Jvc3NoYWlyIiwidmVydGljYWxUZXh0IiwibW92ZSIsIm5vRHJvcCIsIm5vdEFsbG93ZWQiLCJncmFiIiwiZ3JhYmJpbmciLCJhbGxTY3JvbGwiLCJjb2xSZXNpemUiLCJyb3dSZXNpemUiLCJuUmVzaXplIiwiZVJlc2l6ZSIsInNSZXNpemUiLCJ3UmVzaXplIiwibmVSZXNpemUiLCJud1Jlc2l6ZSIsInNlUmVzaXplIiwic3dSZXNpemUiLCJld1Jlc2l6ZSIsIm5zUmVzaXplIiwibmVzd1Jlc2l6ZSIsIm53c2VSZXNpemUiLCJ6b29tSW4iLCJ6b29tT3V0Iiwic3RyaW5nX29mX3BlcmNlbnQiLCJ0b1N0cmluZyQyOSIsInN0cmluZ19vZl9hbHBoYSIsIkRpc3BsYXlPdXRzaWRlIiwiRGlzcGxheUluc2lkZSIsIkRpc3BsYXlMaXN0SXRlbSIsIkRpc3BsYXlJbnRlcm5hbCIsIkRpc3BsYXlCb3giLCJEaXNwbGF5TGVnYWN5IiwiRmxleERpcmVjdGlvbiIsIkdyaWRUZW1wbGF0ZUFyZWFzIiwiYXJlYXMiLCJjYXJyeSIsImVsZW0iLCJHcmlkQXJlYSIsImlkZW50IiwibnVtSWRlbnQiLCJzcGFuIiwiV2lkdGgiLCJIZWlnaHQiLCJzdHJpbmdfb2Zfc3RvcHMiLCJzdG9wcyIsIl9zdHJpbmdzIiwic3RyaW5ncyQxIiwiR2VvbWV0eUJveCIsIm1hcmdpbkJveCIsImJvcmRlckJveCIsInBhZGRpbmdCb3giLCJjb250ZW50Qm94IiwiZmlsbEJveCIsInN0cm9rZUJveCIsInZpZXdCb3giLCJUaW1pbmdGdW5jdGlvbiIsImxpbmVhciIsImVhc2UiLCJlYXNlSW4iLCJlYXNlT3V0IiwiZWFzZUluT3V0Iiwic3RlcFN0YXJ0Iiwic3RlcEVuZCIsInN0ZXBzIiwiZGlyIiwiY3ViaWNCZXppZXIiLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGUzZCIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwidHJhbnNsYXRlWiIsInNjYWxlIiwic2NhbGUzZCIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWiIsInJvdGF0ZSIsInJvdGF0ZTNkIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2tldyIsInNrZXdYIiwic2tld1kiLCJ4JDEiLCJ5JDEiLCJDb2xvciIsInJnYiIsInJnYmEiLCJoc2wiLCJoc2xhIiwiaGV4IiwidHJhbnNwYXJlbnQiLCJjdXJyZW50Q29sb3IiLCJHcmFkaWVudCIsImxpbmVhckdyYWRpZW50IiwiYW5nbGUiLCJyYWRpYWxHcmFkaWVudCIsInJlcGVhdGluZ0xpbmVhckdyYWRpZW50IiwicmVwZWF0aW5nUmFkaWFsR3JhZGllbnQiLCJGb250RmFtaWx5TmFtZSIsInJ1bGVUb0RpY3QiLCJ0b0pzb24iLCJhZGRTdG9wIiwiJCRnbG9iYWwiLCJpbmplY3RSdWxlIiwiaW5qZWN0UmF3Iiwic3R5bGVuYW1lcyIsIm1lcmdlU3R5bGVzIiwiZnJhbWVzIiwibWFrZUtleUZyYW1lcyIsImdyZXkyIiwiRW1vdGlvbkNhY2hlQ29udGV4dCIsIkhUTUxFbGVtZW50IiwiVGhlbWVDb250ZXh0IiwiQ2FjaGVQcm92aWRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJCYXNpY1Byb3ZpZGVyIiwibmV3Q29udGV4dCIsInRoZW1lIiwiX3JlZiIsInNlcmlhbGl6ZWRIYXNoZXMiLCJlbGUiLCJQcm92aWRlciQxIiwiUHJvcHMiLCJwYWdlIiwiUGFnZV9fQ29tcG9uZW50JFJvb3QiLCJzaXRlTmFtZSIsInBhZ2VEYXRhIiwiZm9ybWF0VGl0bGUiLCJsYW5nIiwiY2hhclNldCIsImNvZGVTdHlsZSIsImRheVRpbWVzdGFtcCIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0VGltZSIsImNvbnRlbnRUeXBlJDEiLCJydW5Qcm9taXNlIiwiUHJvbWlzZSIsImNhdGNoIiwiX19kaXJuYW1lIiwibXRpbWUiLCJyb3V0ZSIsInBhZ2VFbnRyaWVzIiwiZmlsdGVyZWRFbnRyaWVzIiwidGltZXN0YW1wIiwicHJldmlvdXMiLCJyZXF1ZXN0IiwidXJsIiwic3RhcnRUaW1lIiwibm93IiwibXMiLCJib2R5Iiwic2VnbWVudHMiLCJzbHVnJDEiLCJwYWdlJDEiLCJzbHVnJDIiLCJzZWdtZW50IiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3BsaXRVUkxTZWdtZW50cyIsImxpc3RlbiIsInByaW50RXJyb3IiLCJtYWluIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFT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QUVBQSxJQUFVLFVBQ1osVUFFQSxPQUdGQSxFQUFNLEtDOTdFRCxHQUFzQjJvQyxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRWxDLEdBQXNCQSxJQUFJLFVBRXBCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRWpCLEdBQXNCQSxJQUFJLFVBRXBDLEdBQXNCQSxJQUFJLFVBRXBCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRXRCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRWpCLEdBQXNCQSxJQUFJLFVBRWhDLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRXRCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXJCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRTVCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRWhDLEdBQXNCQSxJQUFJLFVBRXJCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRXBCLEdBQXNCQSxJQUFJLFVBRWpDLEdBQXNCQSxJQUFJLFVBRXRCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRXJCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRWYsR0FBc0JBLElBQUksVUFFckMsR0FBc0JBLElBQUksVUFFekIsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFakMsR0FBc0JBLElBQUksVUFFckIsR0FBc0JBLElBQUksVUFFOUIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFaEIsR0FBc0JBLElBQUksVUFFaEMsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFekIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFNUIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFdkIsR0FBc0JBLElBQUksVUFFakMsR0FBc0JBLElBQUksVUFFdkIsR0FBc0JBLElBQUksVUFFNUIsR0FBc0JBLElBQUksVUFFdEIsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFdkIsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFbkIsR0FBc0JBLElBQUksVUFFOUIsR0FBc0JBLElBQUksVUFFdEIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFL0IsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFcEIsR0FBc0JBLElBQUksVUFFOUIsR0FBc0JBLElBQUksVUFFbkIsR0FBc0JBLElBQUksVUFFcEMsR0FBc0JBLElBQUksVUFFcEIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFL0IsR0FBc0JBLElBQUksVUFFdEIsR0FBc0JBLElBQUksVUFFNUIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFNUIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFekIsR0FBc0JBLElBQUksVUFFeEIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFL0IsR0FBc0JBLElBQUksVUFFbkIsR0FBc0JBLElBQUksVUFFNUIsR0FBc0JBLElBQUksVUFFaEMsR0FBc0JBLElBQUksVUFFekIsR0FBc0JBLElBQUksVUFFdkIsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFdkIsR0FBc0JBLElBQUksVUFFN0IsR0FBc0JBLElBQUksVUFFM0IsR0FBc0JBLElBQUksVUFFMUIsR0FBc0JBLElBQUksVUFFckIsR0FBc0JBLElBQUksVUFFOUIsR0FBc0JBLElBQUksVUFFckIsR0FBc0JBLElBQUksU0FF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Q0osS0FBeUIsRUFDckJBLEVBQVUsd0JBQTBCMVMsRUFBZ0IsR0FDcEQsTUFDSixLQUFxQixFQUNqQjBTLEVBQVUsd0JBQTBCMVMsRUFBZ0IsU0FLMUQsT0FBdUIsRUFBZnNuQixFQUFNLEdBQUcvVixLQUNmLEtBQXVCLEVBQ25CbUIsRUFBVSw0QkFDVixNQUNKLEtBQWdDLEVBQzVCQSxFQUFVLDRCQUNWLE1BQ0osUUFDRUEsRUFBVSwyQkFHaEJtekQsUUFBUXYrQyxNQUFNNVUsR0FJaEIsU0FBUytpRSxHQUFLcHRDLEdBQ1osSWxEK2lDYS83QixFQUFHaEIsRWtEL2lDWnRMLEVBQVEsSUFDUm96RSxFQUFXcHpFLEVBQU1vekUsU0FDckIsT0FBTyxJQUF5QixTQUFXbHRCLE9sRDZpQzlCNTVDLEVrRDNpQ21CLEdsRDJpQ2hCaEIsRWtEM2lDK0JrcUUsR2xENGlDeEMsSUFBTSxTQUFXM3NFLEdBRVYsT0FEQSxFQUFTeUQsRUFBR3pELEdBQ0xBLEtBQ0wsU0FBVzlNLEdBRWIsT0FEQSxFQUFTdVAsRUFBR3ZQLEdBQ0xBLElrRGpqQ3NDLElBQWMsU0FBVzR1QixHQUM5RCxPQUFPLEdBQVl5b0QsRUFBVXpvRCxLQUMzQixHQUFzQjNxQixFQUFNbW1FLFVBQVdubUUsRUFBTW9tRSxzQkFHdkVxUCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA4NCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7IiwiLy9cbi8vIENvbnN0YW50c1xuLy9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cy5FT0wgPSAnXFxuJztcblxubW9kdWxlLmV4cG9ydHMuU1VQUFJFU1MgPSAnPT1TVVBQUkVTUz09JztcblxubW9kdWxlLmV4cG9ydHMuT1BUSU9OQUwgPSAnPyc7XG5cbm1vZHVsZS5leHBvcnRzLlpFUk9fT1JfTU9SRSA9ICcqJztcblxubW9kdWxlLmV4cG9ydHMuT05FX09SX01PUkUgPSAnKyc7XG5cbm1vZHVsZS5leHBvcnRzLlBBUlNFUiA9ICdBLi4uJztcblxubW9kdWxlLmV4cG9ydHMuUkVNQUlOREVSID0gJy4uLic7XG5cbm1vZHVsZS5leHBvcnRzLl9VTlJFQ09HTklaRURfQVJHU19BVFRSID0gJ191bnJlY29nbml6ZWRfYXJncyc7XG4iLCJ0cnkge1xuICB2YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKHR5cGVvZiB1dGlsLmluaGVyaXRzICE9PSAnZnVuY3Rpb24nKSB0aHJvdyAnJztcbiAgbW9kdWxlLmV4cG9ydHMgPSB1dGlsLmluaGVyaXRzO1xufSBjYXRjaCAoZSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaW5oZXJpdHNfYnJvd3Nlci5qcycpO1xufVxuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyhhdHRyfGNhbGN8Y291bnRlcnM/fHVybClcXCgvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnY291bnRlcicsICdvcGVuLXF1b3RlJywgJ2Nsb3NlLXF1b3RlJywgJ25vLW9wZW4tcXVvdGUnLCAnbm8tY2xvc2UtcXVvdGUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxudmFyIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzID0gdHJ1ZTtcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbiwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQsIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uICYmIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzICYmIGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcignSW50ZXJwb2xhdGluZyBhIGNsYXNzTmFtZSBmcm9tIGNzc2BgIGlzIG5vdCByZWNvbW1lbmRlZCBhbmQgd2lsbCBjYXVzZSBwcm9ibGVtcyB3aXRoIGNvbXBvc2l0aW9uLlxcbicgKyAnSW50ZXJwb2xhdGluZyBhIGNsYXNzTmFtZSBmcm9tIGNzc2BgIHdpbGwgYmUgY29tcGxldGVseSB1bnN1cHBvcnRlZCBpbiBhIGZ1dHVyZSBtYWpvciB2ZXJzaW9uIG9mIEVtb3Rpb24nKTtcbiAgICBzaG91bGRXYXJuQWJvdXRJbnRlcnBvbGF0aW5nQ2xhc3NOYW1lRnJvbUNzcyA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkICYmICFjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGJhYmVsLXBsdWdpbi1lbW90aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUsIGZhbHNlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqOy9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0sIHN0eWxlcy5jaGFyQ29kZUF0KHN0eWxlcy5sZW5ndGggLSAxKSA9PT0gNDYpO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJ2YXIgaXNCcm93c2VyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgJiYgY2FjaGUuY29tcGF0ICE9PSB1bmRlZmluZWQpICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHN0eWxlc0ZvclNTUiA9ICcnO1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChcIi5cIiArIGNsYXNzTmFtZSwgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBpZiAoIWlzQnJvd3NlciAmJiBtYXliZVN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlc0ZvclNTUiArPSBtYXliZVN0eWxlcztcbiAgICAgIH1cblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuXG4gICAgaWYgKCFpc0Jyb3dzZXIgJiYgc3R5bGVzRm9yU1NSLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHN0eWxlc0ZvclNTUjtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwic3RyZWFtXCIpOyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuXG5mdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICBpZiAoQXJyYXkuaXNBcnJheSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFyZyk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5leHBvcnRzLmlzQXJyYXkgPSBpc0FycmF5O1xuXG5mdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7XG59XG5leHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcblxuZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGwgPSBpc051bGw7XG5cbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5leHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7XG5cbmZ1bmN0aW9uIGlzU3RyaW5nKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzU3ltYm9sKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCc7XG59XG5leHBvcnRzLmlzU3ltYm9sID0gaXNTeW1ib2w7XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5leHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKHJlKSB7XG4gIHJldHVybiBvYmplY3RUb1N0cmluZyhyZSkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuZXhwb3J0cy5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuXG5mdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNPYmplY3QgPSBpc09iamVjdDtcblxuZnVuY3Rpb24gaXNEYXRlKGQpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTtcblxuZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXI7XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cbiIsIi8qKlxuICogY2xhc3MgQWN0aW9uXG4gKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGFjdGlvbnNcbiAqIERvIG5vdCBjYWxsIGluIHlvdXIgY29kZSwgdXNlIHRoaXMgY2xhc3Mgb25seSBmb3IgaW5oZXJpdHMgeW91ciBvd24gYWN0aW9uXG4gKlxuICogSW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIGNvbnZlcnQgY29tbWFuZCBsaW5lIHN0cmluZ3MgdG8gSmF2YXNjcmlwdCBvYmplY3RzLlxuICogQWN0aW9uIG9iamVjdHMgYXJlIHVzZWQgYnkgYW4gQXJndW1lbnRQYXJzZXIgdG8gcmVwcmVzZW50IHRoZSBpbmZvcm1hdGlvblxuICogbmVlZGVkIHRvIHBhcnNlIGEgc2luZ2xlIGFyZ3VtZW50IGZyb20gb25lIG9yIG1vcmUgc3RyaW5ncyBmcm9tIHRoZSBjb21tYW5kXG4gKiBsaW5lLiBUaGUga2V5d29yZCBhcmd1bWVudHMgdG8gdGhlIEFjdGlvbiBjb25zdHJ1Y3RvciBhcmUgYWxzbyBhbGwgYXR0cmlidXRlc1xuICogb2YgQWN0aW9uIGluc3RhbmNlcy5cbiAqXG4gKiAjIyMjIyBBbGxvd2VkIGtleXdvcmRzOlxuICpcbiAqIC0gYHN0b3JlYFxuICogLSBgc3RvcmVDb25zdGFudGBcbiAqIC0gYHN0b3JlVHJ1ZWBcbiAqIC0gYHN0b3JlRmFsc2VgXG4gKiAtIGBhcHBlbmRgXG4gKiAtIGBhcHBlbmRDb25zdGFudGBcbiAqIC0gYGNvdW50YFxuICogLSBgaGVscGBcbiAqIC0gYHZlcnNpb25gXG4gKlxuICogSW5mb3JtYXRpb24gYWJvdXQgYWN0aW9uIG9wdGlvbnMgc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXShodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjYWN0aW9uKVxuICpcbiAqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbi8vIENvbnN0YW50c1xudmFyIGMgPSByZXF1aXJlKCcuL2NvbnN0Jyk7XG5cblxuLyoqXG4gKiBuZXcgQWN0aW9uKG9wdGlvbnMpXG4gKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGFjdGlvbnMuIFVzZWQgb25seSBmb3IgaW5oZXJpdHNcbiAqXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIGBvcHRpb25TdHJpbmdzYCAgQSBsaXN0IG9mIGNvbW1hbmQtbGluZSBvcHRpb24gc3RyaW5ncyBmb3IgdGhlIGFjdGlvbi5cbiAqIC0gYGRlc3RgICBBdHRyaWJ1dGUgdG8gaG9sZCB0aGUgY3JlYXRlZCBvYmplY3QocylcbiAqIC0gYG5hcmdzYCAgVGhlIG51bWJlciBvZiBjb21tYW5kLWxpbmUgYXJndW1lbnRzIHRoYXQgc2hvdWxkIGJlIGNvbnN1bWVkLlxuICogQnkgZGVmYXVsdCwgb25lIGFyZ3VtZW50IHdpbGwgYmUgY29uc3VtZWQgYW5kIGEgc2luZ2xlIHZhbHVlIHdpbGwgYmVcbiAqIHByb2R1Y2VkLlxuICogLSBgY29uc3RhbnRgICBEZWZhdWx0IHZhbHVlIGZvciBhbiBhY3Rpb24gd2l0aCBubyB2YWx1ZS5cbiAqIC0gYGRlZmF1bHRWYWx1ZWAgIFRoZSB2YWx1ZSB0byBiZSBwcm9kdWNlZCBpZiB0aGUgb3B0aW9uIGlzIG5vdCBzcGVjaWZpZWQuXG4gKiAtIGB0eXBlYCAgQ2FzdCB0byAnc3RyaW5nJ3wnaW50J3wnZmxvYXQnfCdjb21wbGV4J3xmdW5jdGlvbiAoc3RyaW5nKS4gSWZcbiAqIE5vbmUsICdzdHJpbmcnLlxuICogLSBgY2hvaWNlc2AgIFRoZSBjaG9pY2VzIGF2YWlsYWJsZS5cbiAqIC0gYHJlcXVpcmVkYCAgVHJ1ZSBpZiB0aGUgYWN0aW9uIG11c3QgYWx3YXlzIGJlIHNwZWNpZmllZCBhdCB0aGUgY29tbWFuZFxuICogbGluZS5cbiAqIC0gYGhlbHBgICBUaGUgaGVscCBkZXNjcmliaW5nIHRoZSBhcmd1bWVudC5cbiAqIC0gYG1ldGF2YXJgICBUaGUgbmFtZSB0byBiZSB1c2VkIGZvciB0aGUgb3B0aW9uJ3MgYXJndW1lbnQgd2l0aCB0aGUgaGVscFxuICogc3RyaW5nLiBJZiBOb25lLCB0aGUgJ2Rlc3QnIHZhbHVlIHdpbGwgYmUgdXNlZCBhcyB0aGUgbmFtZS5cbiAqXG4gKiAjIyMjIyBuYXJncyBzdXBwb3J0ZWQgdmFsdWVzOlxuICpcbiAqIC0gYE5gIChhbiBpbnRlZ2VyKSBjb25zdW1lcyBOIGFyZ3VtZW50cyAoYW5kIHByb2R1Y2VzIGEgbGlzdClcbiAqIC0gYD9gICBjb25zdW1lcyB6ZXJvIG9yIG9uZSBhcmd1bWVudHNcbiAqIC0gYCpgIGNvbnN1bWVzIHplcm8gb3IgbW9yZSBhcmd1bWVudHMgKGFuZCBwcm9kdWNlcyBhIGxpc3QpXG4gKiAtIGArYCBjb25zdW1lcyBvbmUgb3IgbW9yZSBhcmd1bWVudHMgKGFuZCBwcm9kdWNlcyBhIGxpc3QpXG4gKlxuICogTm90ZTogdGhhdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBkZWZhdWx0IGFuZCBuYXJncz0xIGlzIHRoYXQgd2l0aCB0aGVcbiAqIGRlZmF1bHQsIGEgc2luZ2xlIHZhbHVlIHdpbGwgYmUgcHJvZHVjZWQsIHdoaWxlIHdpdGggbmFyZ3M9MSwgYSBsaXN0XG4gKiBjb250YWluaW5nIGEgc2luZ2xlIHZhbHVlIHdpbGwgYmUgcHJvZHVjZWQuXG4gKiovXG52YXIgQWN0aW9uID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb24ob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5vcHRpb25TdHJpbmdzID0gb3B0aW9ucy5vcHRpb25TdHJpbmdzIHx8IFtdO1xuICB0aGlzLmRlc3QgPSBvcHRpb25zLmRlc3Q7XG4gIHRoaXMubmFyZ3MgPSB0eXBlb2Ygb3B0aW9ucy5uYXJncyAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLm5hcmdzIDogbnVsbDtcbiAgdGhpcy5jb25zdGFudCA9IHR5cGVvZiBvcHRpb25zLmNvbnN0YW50ICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuY29uc3RhbnQgOiBudWxsO1xuICB0aGlzLmRlZmF1bHRWYWx1ZSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICB0aGlzLnR5cGUgPSB0eXBlb2Ygb3B0aW9ucy50eXBlICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMudHlwZSA6IG51bGw7XG4gIHRoaXMuY2hvaWNlcyA9IHR5cGVvZiBvcHRpb25zLmNob2ljZXMgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5jaG9pY2VzIDogbnVsbDtcbiAgdGhpcy5yZXF1aXJlZCA9IHR5cGVvZiBvcHRpb25zLnJlcXVpcmVkICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMucmVxdWlyZWQgOiBmYWxzZTtcbiAgdGhpcy5oZWxwID0gdHlwZW9mIG9wdGlvbnMuaGVscCAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmhlbHAgOiBudWxsO1xuICB0aGlzLm1ldGF2YXIgPSB0eXBlb2Ygb3B0aW9ucy5tZXRhdmFyICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMubWV0YXZhciA6IG51bGw7XG5cbiAgaWYgKCEodGhpcy5vcHRpb25TdHJpbmdzIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25TdHJpbmdzIHNob3VsZCBiZSBhbiBhcnJheScpO1xuICB9XG4gIGlmICh0eXBlb2YgdGhpcy5yZXF1aXJlZCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXMucmVxdWlyZWQgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBFcnJvcigncmVxdWlyZWQgc2hvdWxkIGJlIGEgYm9vbGVhbicpO1xuICB9XG59O1xuXG4vKipcbiAqIEFjdGlvbiNnZXROYW1lIC0+IFN0cmluZ1xuICpcbiAqIFRlbGxzIGFjdGlvbiBuYW1lXG4gKiovXG5BY3Rpb24ucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLm9wdGlvblN0cmluZ3MubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvblN0cmluZ3Muam9pbignLycpO1xuICB9IGVsc2UgaWYgKHRoaXMubWV0YXZhciAhPT0gbnVsbCAmJiB0aGlzLm1ldGF2YXIgIT09IGMuU1VQUFJFU1MpIHtcbiAgICByZXR1cm4gdGhpcy5tZXRhdmFyO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLmRlc3QgIT09ICd1bmRlZmluZWQnICYmIHRoaXMuZGVzdCAhPT0gYy5TVVBQUkVTUykge1xuICAgIHJldHVybiB0aGlzLmRlc3Q7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIEFjdGlvbiNpc09wdGlvbmFsIC0+IEJvb2xlYW5cbiAqXG4gKiBSZXR1cm4gdHJ1ZSBpZiBvcHRpb25hbFxuICoqL1xuQWN0aW9uLnByb3RvdHlwZS5pc09wdGlvbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIXRoaXMuaXNQb3NpdGlvbmFsKCk7XG59O1xuXG4vKipcbiAqIEFjdGlvbiNpc1Bvc2l0aW9uYWwgLT4gQm9vbGVhblxuICpcbiAqIFJldHVybiB0cnVlIGlmIHBvc2l0aW9uYWxcbiAqKi9cbkFjdGlvbi5wcm90b3R5cGUuaXNQb3NpdGlvbmFsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gKHRoaXMub3B0aW9uU3RyaW5ncy5sZW5ndGggPT09IDApO1xufTtcblxuLyoqXG4gKiBBY3Rpb24jY2FsbChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzLCBvcHRpb25TdHJpbmcpIC0+IFZvaWRcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIENhbGwgdGhlIGFjdGlvbi4gU2hvdWxkIGJlIGltcGxlbWVudGVkIGluIGluaGVyaXRlZCBjbGFzc2VzXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqICAgICAgQWN0aW9uQ291bnQucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcywgb3B0aW9uU3RyaW5nKSB7XG4gKiAgICAgICAgbmFtZXNwYWNlLnNldCh0aGlzLmRlc3QsIChuYW1lc3BhY2VbdGhpcy5kZXN0XSB8fCAwKSArIDEpO1xuICogICAgICB9O1xuICpcbiAqKi9cbkFjdGlvbi5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCcuY2FsbCgpIG5vdCBkZWZpbmVkJyk7Ly8gTm90IEltcGxlbWVudGVkIGVycm9yXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7IiwiaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5cbmZ1bmN0aW9uIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCBzZXJpYWxpemVkKSB7XG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2FjaGUuaW5zZXJ0KCcnLCBzZXJpYWxpemVkLCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBjcmVhdGVFbW90aW9uID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvbihvcHRpb25zKSB7XG4gIHZhciBjYWNoZSA9IGNyZWF0ZUNhY2hlKG9wdGlvbnMpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgY2FjaGUuc2hlZXQuc3BlZWR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5jdHIgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3BlZWR5IG11c3QgYmUgY2hhbmdlZCBiZWZvcmUgYW55IHJ1bGVzIGFyZSBpbnNlcnRlZCcpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTcGVlZHkgPSB2YWx1ZTtcbiAgfTtcblxuICBjYWNoZS5jb21wYXQgPSB0cnVlO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQsIHVuZGVmaW5lZCk7XG4gICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IFwiYW5pbWF0aW9uLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICAgIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkLm5hbWUsXG4gICAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIGFuaW1hdGlvbiArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIlxuICAgIH0pO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH07XG5cbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBpbnNlcnRXaXRob3V0U2NvcGluZyhjYWNoZSwgc2VyaWFsaXplZCk7XG4gIH07XG5cbiAgdmFyIGN4ID0gZnVuY3Rpb24gY3goKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNhY2hlLnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgaW5qZWN0R2xvYmFsOiBpbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzOiBrZXlmcmFtZXMsXG4gICAgaHlkcmF0ZTogZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgICAgIGlkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRba2V5XSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIGNhY2hlLnJlZ2lzdGVyZWQgPSB7fTtcbiAgICAgIGNhY2hlLmluc2VydGVkID0ge307XG4gICAgICBjYWNoZS5zaGVldC5mbHVzaCgpO1xuICAgIH0sXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHNoZWV0OiBjYWNoZS5zaGVldCxcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgZ2V0UmVnaXN0ZXJlZFN0eWxlczogZ2V0UmVnaXN0ZXJlZFN0eWxlcy5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQpLFxuICAgIG1lcmdlOiBtZXJnZS5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQsIGNzcylcbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVtb3Rpb247XG4iLCJpbXBvcnQgY3JlYXRlRW1vdGlvbiBmcm9tICdjcmVhdGUtZW1vdGlvbic7XG5cbnZhciBfY3JlYXRlRW1vdGlvbiA9IGNyZWF0ZUVtb3Rpb24oKSxcbiAgICBmbHVzaCA9IF9jcmVhdGVFbW90aW9uLmZsdXNoLFxuICAgIGh5ZHJhdGUgPSBfY3JlYXRlRW1vdGlvbi5oeWRyYXRlLFxuICAgIGN4ID0gX2NyZWF0ZUVtb3Rpb24uY3gsXG4gICAgbWVyZ2UgPSBfY3JlYXRlRW1vdGlvbi5tZXJnZSxcbiAgICBnZXRSZWdpc3RlcmVkU3R5bGVzID0gX2NyZWF0ZUVtb3Rpb24uZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWwgPSBfY3JlYXRlRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzID0gX2NyZWF0ZUVtb3Rpb24ua2V5ZnJhbWVzLFxuICAgIGNzcyA9IF9jcmVhdGVFbW90aW9uLmNzcyxcbiAgICBzaGVldCA9IF9jcmVhdGVFbW90aW9uLnNoZWV0LFxuICAgIGNhY2hlID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGU7XG5cbmV4cG9ydCB7IGNhY2hlLCBjc3MsIGN4LCBmbHVzaCwgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaHlkcmF0ZSwgaW5qZWN0R2xvYmFsLCBrZXlmcmFtZXMsIG1lcmdlLCBzaGVldCB9O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMucmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbnVtKSB7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW07IGkrKykgeyByZXN1bHQgKz0gc3RyOyB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnRzLmFycmF5RXF1YWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7IHJldHVybiBmYWxzZTsgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4cG9ydHMudHJpbUNoYXJzID0gZnVuY3Rpb24gKHN0ciwgY2hhcnMpIHtcbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGVuZCA9IHN0ci5sZW5ndGggLSAxO1xuICB3aGlsZSAoY2hhcnMuaW5kZXhPZihzdHIuY2hhckF0KHN0YXJ0KSkgPj0gMCkgeyBzdGFydCsrOyB9XG4gIHdoaWxlIChjaGFycy5pbmRleE9mKHN0ci5jaGFyQXQoZW5kKSkgPj0gMCkgeyBlbmQtLTsgfVxuICByZXR1cm4gc3RyLnNsaWNlKHN0YXJ0LCBlbmQgKyAxKTtcbn07XG5cbmV4cG9ydHMuY2FwaXRhbGl6ZSA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn07XG5cbmV4cG9ydHMuYXJyYXlVbmlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgdmFsdWVzID0ge307IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXJyID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgYXJyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAoIXZhbHVlc1thcnJbal1dKSB7XG4gICAgICAgIHZhbHVlc1thcnJbal1dID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0LnB1c2goYXJyW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmZ1bmN0aW9uIGhhcyhvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cblxuZXhwb3J0cy5oYXMgPSBoYXM7XG5cbmV4cG9ydHMuZXh0ZW5kID0gZnVuY3Rpb24gKGRlc3QsIHNyYykge1xuICBmb3IgKHZhciBpIGluIHNyYykge1xuICAgIGlmIChoYXMoc3JjLCBpKSkgeyBkZXN0W2ldID0gc3JjW2ldOyB9XG4gIH1cbn07XG5cbmV4cG9ydHMudHJpbUVuZCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHMrJC9nLCAnJyk7XG59O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwidmFyIHdlYWtNZW1vaXplID0gZnVuY3Rpb24gd2Vha01lbW9pemUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lIGZsb3cgZG9lc24ndCBpbmNsdWRlIGFsbCBub24tcHJpbWl0aXZlIHR5cGVzIGFzIGFsbG93ZWQgZm9yIHdlYWttYXBzXG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlLmhhcyhhcmcpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHJldCA9IGZ1bmMoYXJnKTtcbiAgICBjYWNoZS5zZXQoYXJnLCByZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3ZWFrTWVtb2l6ZTtcbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgU3R5bGlzIGZyb20gJ0BlbW90aW9uL3N0eWxpcyc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvdHJlZS9tYXN0ZXIvcGx1Z2lucy9ydWxlLXNoZWV0XG4vLyBpbmxpbmVkIHRvIGF2b2lkIHVtZCB3cmFwcGVyIGFuZCBwZWVyRGVwIHdhcm5pbmdzL2luc3RhbGxpbmcgc3R5bGlzXG4vLyBzaW5jZSB3ZSB1c2Ugc3R5bGlzIGFmdGVyIGNsb3N1cmUgY29tcGlsZXJcbnZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nO1xudmFyIG5lZWRsZSA9IGRlbGltaXRlciArICd9JztcblxuZnVuY3Rpb24gdG9TaGVldChibG9jaykge1xuICBpZiAoYmxvY2spIHtcbiAgICBTaGVldC5jdXJyZW50Lmluc2VydChibG9jayArICd9Jyk7XG4gIH1cbn1cblxudmFyIFNoZWV0ID0ge1xuICBjdXJyZW50OiBudWxsXG59O1xudmFyIHJ1bGVTaGVldCA9IGZ1bmN0aW9uIHJ1bGVTaGVldChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG4gIHN3aXRjaCAoY29udGV4dCkge1xuICAgIC8vIHByb3BlcnR5XG4gICAgY2FzZSAxOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIEBpbXBvcnRcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoY29udGVudCArICc7Jyk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGFyY29kZSBmb3IgbFxuXG4gICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgICAgICAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgICAgICAgICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gc2VsZWN0b3JcblxuICAgIGNhc2UgMjpcbiAgICAgIHtcbiAgICAgICAgaWYgKG5zID09PSAwKSByZXR1cm4gY29udGVudCArIGRlbGltaXRlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gYXQtcnVsZVxuXG4gICAgY2FzZSAzOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKG5zKSB7XG4gICAgICAgICAgLy8gQGZvbnQtZmFjZSwgQHBhZ2VcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoc2VsZWN0b3JzWzBdICsgY29udGVudCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBjYXNlIC0yOlxuICAgICAge1xuICAgICAgICBjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KTtcbiAgICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGNvbnRleHQsIGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRleHQgPT09IDEgJiYgLy8gY2hhcmNvZGUgZm9yIGxcbiAgY29udGVudC5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgY29udGVudC5jaGFyQ29kZUF0KDIpID09PSA5OCAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgcm9vdFNlcnZlclN0eWxpc0NhY2hlID0ge307XG52YXIgZ2V0U2VydmVyU3R5bGlzQ2FjaGUgPSBpc0Jyb3dzZXIgPyB1bmRlZmluZWQgOiB3ZWFrTWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBnZXRDYWNoZSA9IHdlYWtNZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pO1xuICB2YXIgcHJlZml4VHJ1ZUNhY2hlID0ge307XG4gIHZhciBwcmVmaXhGYWxzZUNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkIHx8IHByZWZpeCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHByZWZpeFRydWVDYWNoZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4ID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHByZWZpeEZhbHNlQ2FjaGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldENhY2hlKHByZWZpeCk7XG4gIH07XG59KTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSB8fCAnY3NzJztcbiAgdmFyIHN0eWxpc09wdGlvbnM7XG5cbiAgaWYgKG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXNPcHRpb25zID0ge1xuICAgICAgcHJlZml4OiBvcHRpb25zLnByZWZpeFxuICAgIH07XG4gIH1cblxuICB2YXIgc3R5bGlzID0gbmV3IFN0eWxpcyhzdHlsaXNPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307IC8vICRGbG93Rml4TWVcblxuICB2YXIgY29udGFpbmVyO1xuXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyBrZXkgKyBcIl1cIik7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvbi1cIiArIGtleSk7IC8vICRGbG93Rml4TWVcblxuICAgICAgYXR0cmliLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKShydWxlU2hlZXQpO1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICB2YXIgbmFtZSA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICAgIFNoZWV0LmN1cnJlbnQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbWFwID0gc2VyaWFsaXplZC5tYXA7XG4gICAgICAgIFNoZWV0LmN1cnJlbnQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBtYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yLCBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtuYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsaXMudXNlKHJlbW92ZUxhYmVsKTtcbiAgICB2YXIgc2VydmVyU3R5bGlzQ2FjaGUgPSByb290U2VydmVyU3R5bGlzQ2FjaGU7XG5cbiAgICBpZiAob3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBzZXJ2ZXJTdHlsaXNDYWNoZSA9IGdldFNlcnZlclN0eWxpc0NhY2hlKG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCByb290U2VydmVyU3R5bGlzQ2FjaGUpKG9wdGlvbnMucHJlZml4KTtcbiAgICB9XG5cbiAgICB2YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyhzZWxlY3Rvciwgc2VyaWFsaXplZCkge1xuICAgICAgdmFyIG5hbWUgPSBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmIChzZXJ2ZXJTdHlsaXNDYWNoZVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlcnZlclN0eWxpc0NhY2hlW25hbWVdID0gc3R5bGlzKHNlbGVjdG9yLCBzZXJpYWxpemVkLnN0eWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2ZXJTdHlsaXNDYWNoZVtuYW1lXTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIF9pbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgdmFyIG5hbWUgPSBzZXJpYWxpemVkLm5hbWU7XG4gICAgICB2YXIgcnVsZXMgPSBnZXRSdWxlcyhzZWxlY3Rvciwgc2VyaWFsaXplZCk7XG5cbiAgICAgIGlmIChjYWNoZS5jb21wYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBpbiByZWd1bGFyIG1vZGUsIHdlIGRvbid0IHNldCB0aGUgc3R5bGVzIG9uIHRoZSBpbnNlcnRlZCBjYWNoZVxuICAgICAgICAvLyBzaW5jZSB3ZSBkb24ndCBuZWVkIHRvIGFuZCB0aGF0IHdvdWxkIGJlIHdhc3RpbmcgbWVtb3J5XG4gICAgICAgIC8vIHdlIHJldHVybiB0aGVtIHNvIHRoYXQgdGhleSBhcmUgcmVuZGVyZWQgaW4gYSBzdHlsZSB0YWdcbiAgICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAvLyB1c2luZyA9PT0gZGV2ZWxvcG1lbnQgaW5zdGVhZCBvZiAhPT0gcHJvZHVjdGlvblxuICAgICAgICAvLyBiZWNhdXNlIGlmIHBlb3BsZSBkbyBzc3IgaW4gdGVzdHMsIHRoZSBzb3VyY2UgbWFwcyBzaG93aW5nIHVwIHdvdWxkIGJlIGFubm95aW5nXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gcnVsZXMgKyBzZXJpYWxpemVkLm1hcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluIGNvbXBhdCBtb2RlLCB3ZSBwdXQgdGhlIHN0eWxlcyBvbiB0aGUgaW5zZXJ0ZWQgY2FjaGUgc29cbiAgICAgICAgLy8gdGhhdCBlbW90aW9uLXNlcnZlciBjYW4gcHVsbCBvdXQgdGhlIHN0eWxlc1xuICAgICAgICAvLyBleGNlcHQgd2hlbiB3ZSBkb24ndCB3YW50IHRvIGNhY2hlIGl0IHdoaWNoIHdhcyBpbiBHbG9iYWwgYnV0IG5vd1xuICAgICAgICAvLyBpcyBub3doZXJlIGJ1dCB3ZSBkb24ndCB3YW50IHRvIGRvIGEgbWFqb3IgcmlnaHQgbm93XG4gICAgICAgIC8vIGFuZCBqdXN0IGluIGNhc2Ugd2UncmUgZ29pbmcgdG8gbGVhdmUgdGhlIGNhc2UgaGVyZVxuICAgICAgICAvLyBpdCdzIGFsc28gbm90IGFmZmVjdGluZyBjbGllbnQgc2lkZSBidW5kbGUgc2l6ZVxuICAgICAgICAvLyBzbyBpdCdzIHJlYWxseSBub3QgYSBiaWcgZGVhbFxuICAgICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgICBjYWNoZS5pbnNlcnRlZFtuYW1lXSA9IHJ1bGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBydWxlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmNzM3MWE0Y2Q3ZTYwMDllZjYxZDBhXG4gICAgdmFyIGNvbW1lbnRTdGFydCA9IC9cXC9cXCovZztcbiAgICB2YXIgY29tbWVudEVuZCA9IC9cXCpcXC8vZztcbiAgICBzdHlsaXMudXNlKGZ1bmN0aW9uIChjb250ZXh0LCBjb250ZW50KSB7XG4gICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB3aGlsZSAoY29tbWVudFN0YXJ0LnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgY29tbWVudEVuZC5sYXN0SW5kZXggPSBjb21tZW50U3RhcnQubGFzdEluZGV4O1xuXG4gICAgICAgICAgICAgIGlmIChjb21tZW50RW5kLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50U3RhcnQubGFzdEluZGV4ID0gY29tbWVudEVuZC5sYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgc3R5bGVzIGhhdmUgYW4gdW50ZXJtaW5hdGVkIGNvbW1lbnQgKFwiLypcIiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgXCIqL1wiKS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tbWVudFN0YXJ0Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3R5bGlzLnVzZShmdW5jdGlvbiAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzKSB7XG4gICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuICAgICAgICAgICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBjb250ZW50Lm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgICAgICAgICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMgJiYgY2FjaGUuY29tcGF0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlUmVnRXhwID0gbmV3IFJlZ0V4cCh1bnNhZmVQc2V1ZG9DbGFzcyArIFwiLipcXFxcL1xcXFwqIFwiICsgZmxhZyArIFwiIFxcXFwqXFxcXC9cIik7XG4gICAgICAgICAgICAgICAgdmFyIGlnbm9yZSA9IGlnbm9yZVJlZ0V4cC50ZXN0KGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzICYmICFpZ25vcmUpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHNldWRvIGNsYXNzIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzICsgXCJcXFwiIGlzIHBvdGVudGlhbGx5IHVuc2FmZSB3aGVuIGRvaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVHJ5IGNoYW5naW5nIGl0IHRvIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzLnNwbGl0KCctY2hpbGQnKVswXSArIFwiLW9mLXR5cGVcXFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHlcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhY2hlO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYnVmZmVyXCIpOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fFxuICAgICFwcm9jZXNzLnZlcnNpb24gfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjAuJykgPT09IDAgfHxcbiAgICBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuJykgPT09IDAgJiYgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLjguJykgIT09IDApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7IG5leHRUaWNrOiBuZXh0VGljayB9O1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzXG59XG5cbmZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImNhbGxiYWNrXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBhcmdzLCBpO1xuICBzd2l0Y2ggKGxlbikge1xuICBjYXNlIDA6XG4gIGNhc2UgMTpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmbik7XG4gIGNhc2UgMjpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tPbmUoKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIGFyZzEpO1xuICAgIH0pO1xuICBjYXNlIDM6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrVHdvKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyKTtcbiAgICB9KTtcbiAgY2FzZSA0OlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1RocmVlKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICB9KTtcbiAgZGVmYXVsdDpcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiAtIDEpO1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgYXJncy5sZW5ndGgpIHtcbiAgICAgIGFyZ3NbaSsrXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrKCkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSk7XG4gIH1cbn1cblxuIiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG4vLyBDb3B5IHN0YXRpYyBtZXRob2RzIGZyb20gQnVmZmVyXG5jb3B5UHJvcHMoQnVmZmVyLCBTYWZlQnVmZmVyKVxuXG5TYWZlQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cblNhZmVCdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYnVmLmZpbGwoMClcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihzaXplKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gYnVmZmVyLlNsb3dCdWZmZXIoc2l6ZSlcbn1cbiIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIDogb3B0aW9ucy5zcGVlZHk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMubm9uY2UgPSBvcHRpb25zLm5vbmNlOyAvLyBrZXkgaXMgdGhlIHZhbHVlIG9mIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlLCBpdCdzIHVzZWQgdG8gaWRlbnRpZnkgZGlmZmVyZW50IHNoZWV0c1xuXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB2YXIgX3RhZyA9IGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKHRoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYmVmb3JlID0gdGhpcy5iZWZvcmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoX3RhZywgYmVmb3JlKTtcbiAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSByZWFsbHkgaG90IHBhdGhcbiAgICAgICAgLy8gd2UgY2hlY2sgdGhlIHNlY29uZCBjaGFyYWN0ZXIgZmlyc3QgYmVjYXVzZSBoYXZpbmcgXCJpXCJcbiAgICAgICAgLy8gYXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgd2lsbCBoYXBwZW4gbGVzcyBvZnRlbiB0aGFuXG4gICAgICAgIC8vIGhhdmluZyBcIkBcIiBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgICAgIHZhciBpc0ltcG9ydFJ1bGUgPSBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBydWxlLmNoYXJDb2RlQXQoMCkgPT09IDY0OyAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG5cbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCAvLyB3ZSBuZWVkIHRvIGluc2VydCBAaW1wb3J0IHJ1bGVzIGJlZm9yZSBhbnl0aGluZyBlbHNlXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIGFuIGVycm9yXG4gICAgICAgIC8vIHRlY2huaWNhbGx5IHRoaXMgbWVhbnMgdGhhdCB0aGUgQGltcG9ydCBydWxlcyB3aWxsXG4gICAgICAgIC8vIF91c3VhbGx5Xyhub3QgYWx3YXlzIHNpbmNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIHN0eWxlIHRhZ3MpXG4gICAgICAgIC8vIGJlIHRoZSBmaXJzdCBvbmVzIGluIHByb2QgYW5kIGdlbmVyYWxseSBsYXRlciBpbiBkZXZcbiAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgcmVhbGx5IG1hdHRlciBpbiB0aGUgcmVhbCB3b3JsZCB0aG91Z2hcbiAgICAgICAgLy8gQGltcG9ydCBpcyBnZW5lcmFsbHkgb25seSB1c2VkIGZvciBmb250IGZhY2VzIGZyb20gZ29vZ2xlIGZvbnRzIGFuZCBldGMuXG4gICAgICAgIC8vIHNvIHdoaWxlIHRoaXMgY291bGQgYmUgdGVjaG5pY2FsbHkgY29ycmVjdCB0aGVuIGl0IHdvdWxkIGJlIHNsb3dlciBhbmQgbGFyZ2VyXG4gICAgICAgIC8vIGZvciBhIHRpbnkgYml0IG9mIGNvcnJlY3RuZXNzIHRoYXQgd29uJ3QgbWF0dGVyIGluIHRoZSByZWFsIHdvcmxkXG4gICAgICAgIGlzSW1wb3J0UnVsZSA/IDAgOiBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwiLyo6bm9kb2M6KlxuICogY2xhc3MgQWN0aW9uU3RvcmVDb25zdGFudFxuICpcbiAqIFRoaXMgYWN0aW9uIHN0b3JlcyB0aGUgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjb25zdCBrZXl3b3JkIGFyZ3VtZW50LlxuICogKE5vdGUgdGhhdCB0aGUgY29uc3Qga2V5d29yZCBhcmd1bWVudCBkZWZhdWx0cyB0byB0aGUgcmF0aGVyIHVuaGVscGZ1bCBudWxsLilcbiAqIFRoZSAnc3RvcmVfY29uc3QnIGFjdGlvbiBpcyBtb3N0IGNvbW1vbmx5IHVzZWQgd2l0aCBvcHRpb25hbFxuICogYXJndW1lbnRzIHRoYXQgc3BlY2lmeSBzb21lIHNvcnQgb2YgZmxhZy5cbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaXRlZCBmcm9tIFtbQWN0aW9uXV1cbiAqKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9hY3Rpb24nKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvblN0b3JlQ29uc3RhbnQob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogb3B0aW9ucyBoYXNoIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqKi9cbnZhciBBY3Rpb25TdG9yZUNvbnN0YW50ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25TdG9yZUNvbnN0YW50KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMubmFyZ3MgPSAwO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuY29uc3RhbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb25zdGFudCBvcHRpb24gaXMgcmVxdWlyZWQgZm9yIHN0b3JlQWN0aW9uJyk7XG4gIH1cbiAgQWN0aW9uLmNhbGwodGhpcywgb3B0aW9ucyk7XG59O1xudXRpbC5pbmhlcml0cyhBY3Rpb25TdG9yZUNvbnN0YW50LCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25TdG9yZUNvbnN0YW50I2NhbGwocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcywgb3B0aW9uU3RyaW5nKSAtPiBWb2lkXG4gKiAtIHBhcnNlciAoQXJndW1lbnRQYXJzZXIpOiBjdXJyZW50IHBhcnNlclxuICogLSBuYW1lc3BhY2UgKE5hbWVzcGFjZSk6IG5hbWVzcGFjZSBmb3Igb3V0cHV0IGRhdGFcbiAqIC0gdmFsdWVzIChBcnJheSk6IHBhcnNlZCB2YWx1ZXNcbiAqIC0gb3B0aW9uU3RyaW5nIChBcnJheSk6IGlucHV0IG9wdGlvbiBzdHJpbmcobm90IHBhcnNlZClcbiAqXG4gKiBDYWxsIHRoZSBhY3Rpb24uIFNhdmUgcmVzdWx0IGluIG5hbWVzcGFjZSBvYmplY3RcbiAqKi9cbkFjdGlvblN0b3JlQ29uc3RhbnQucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyLCBuYW1lc3BhY2UpIHtcbiAgbmFtZXNwYWNlLnNldCh0aGlzLmRlc3QsIHRoaXMuY29uc3RhbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuXG52YXIgZm9ybWF0ICA9IHJlcXVpcmUoJ3V0aWwnKS5mb3JtYXQ7XG5cblxudmFyIEVSUl9DT0RFID0gJ0FSR0Vycm9yJztcblxuLyo6bm9kb2M6KlxuICogYXJndW1lbnRFcnJvcihhcmd1bWVudCwgbWVzc2FnZSkgLT4gVHlwZUVycm9yXG4gKiAtIGFyZ3VtZW50IChPYmplY3QpOiBhY3Rpb24gd2l0aCBicm9rZW4gYXJndW1lbnRcbiAqIC0gbWVzc2FnZSAoU3RyaW5nKTogZXJyb3IgbWVzc2FnZVxuICpcbiAqIEVycm9yIGZvcm1hdCBoZWxwZXIuIEFuIGVycm9yIGZyb20gY3JlYXRpbmcgb3IgdXNpbmcgYW4gYXJndW1lbnRcbiAqIChvcHRpb25hbCBvciBwb3NpdGlvbmFsKS4gVGhlIHN0cmluZyB2YWx1ZSBvZiB0aGlzIGV4Y2VwdGlvblxuICogaXMgdGhlIG1lc3NhZ2UsIGF1Z21lbnRlZCB3aXRoIGluZm9ybWF0aW9uXG4gKiBhYm91dCB0aGUgYXJndW1lbnQgdGhhdCBjYXVzZWQgaXQuXG4gKlxuICogIyMjIyNFeGFtcGxlXG4gKlxuICogICAgICB2YXIgYXJndW1lbnRFcnJvckhlbHBlciA9IHJlcXVpcmUoJy4vYXJndW1lbnQvZXJyb3InKTtcbiAqICAgICAgaWYgKGNvbmZsaWN0T3B0aW9uYWxzLmxlbmd0aCA+IDApIHtcbiAqICAgICAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKFxuICogICAgICAgICAgYWN0aW9uLFxuICogICAgICAgICAgZm9ybWF0KCdDb25mbGljdGluZyBvcHRpb24gc3RyaW5nKHMpOiAlcycsIGNvbmZsaWN0T3B0aW9uYWxzLmpvaW4oJywgJykpXG4gKiAgICAgICAgKTtcbiAqICAgICAgfVxuICpcbiAqKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCBtZXNzYWdlKSB7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBudWxsO1xuICB2YXIgZXJyTWVzc2FnZTtcbiAgdmFyIGVycjtcblxuICBpZiAoYXJndW1lbnQuZ2V0TmFtZSkge1xuICAgIGFyZ3VtZW50TmFtZSA9IGFyZ3VtZW50LmdldE5hbWUoKTtcbiAgfSBlbHNlIHtcbiAgICBhcmd1bWVudE5hbWUgPSAnJyArIGFyZ3VtZW50O1xuICB9XG5cbiAgaWYgKCFhcmd1bWVudE5hbWUpIHtcbiAgICBlcnJNZXNzYWdlID0gbWVzc2FnZTtcbiAgfSBlbHNlIHtcbiAgICBlcnJNZXNzYWdlID0gZm9ybWF0KCdhcmd1bWVudCBcIiVzXCI6ICVzJywgYXJndW1lbnROYW1lLCBtZXNzYWdlKTtcbiAgfVxuXG4gIGVyciA9IG5ldyBUeXBlRXJyb3IoZXJyTWVzc2FnZSk7XG4gIGVyci5jb2RlID0gRVJSX0NPREU7XG4gIHJldHVybiBlcnI7XG59O1xuIiwiLyoqXG4gKiBjbGFzcyBIZWxwRm9ybWF0dGVyXG4gKlxuICogRm9ybWF0dGVyIGZvciBnZW5lcmF0aW5nIHVzYWdlIG1lc3NhZ2VzIGFuZCBhcmd1bWVudCBoZWxwIHN0cmluZ3MuIE9ubHkgdGhlXG4gKiBuYW1lIG9mIHRoaXMgY2xhc3MgaXMgY29uc2lkZXJlZCBhIHB1YmxpYyBBUEkuIEFsbCB0aGUgbWV0aG9kcyBwcm92aWRlZCBieVxuICogdGhlIGNsYXNzIGFyZSBjb25zaWRlcmVkIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC5cbiAqXG4gKiBEbyBub3QgY2FsbCBpbiB5b3VyIGNvZGUsIHVzZSB0aGlzIGNsYXNzIG9ubHkgZm9yIGluaGVyaXRzIHlvdXIgb3duIGZvcnZhdHRlclxuICpcbiAqIFRvRG8gYWRkIFthZGRpdG9uYWwgZm9ybWF0dGVyc11bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI2Zvcm1hdHRlci1jbGFzc1xuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3ByaW50ZiA9IHJlcXVpcmUoJ3NwcmludGYtanMnKS5zcHJpbnRmO1xuXG4vLyBDb25zdGFudHNcbnZhciBjID0gcmVxdWlyZSgnLi4vY29uc3QnKTtcblxudmFyICQkID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuXG4vKjpub2RvYzoqIGludGVybmFsXG4gKiBuZXcgU3VwcG9ydChwYXJlbnQsIGhlZGluZylcbiAqIC0gcGFyZW50IChvYmplY3QpOiBwYXJlbnQgc2VjdGlvblxuICogLSBoZWFkaW5nIChzdHJpbmcpOiBoZWFkZXIgc3RyaW5nXG4gKlxuICoqL1xuZnVuY3Rpb24gU2VjdGlvbihwYXJlbnQsIGhlYWRpbmcpIHtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9oZWFkaW5nID0gaGVhZGluZztcbiAgdGhpcy5faXRlbXMgPSBbXTtcbn1cblxuLyo6bm9kb2M6KiBpbnRlcm5hbFxuICogU2VjdGlvbiNhZGRJdGVtKGNhbGxiYWNrKSAtPiBWb2lkXG4gKiAtIGNhbGxiYWNrIChhcnJheSk6IHR1cGxlIHdpdGggZnVuY3Rpb24gYW5kIGFyZ3NcbiAqXG4gKiBBZGQgZnVuY3Rpb24gZm9yIHNpbmdsZSBlbGVtZW50XG4gKiovXG5TZWN0aW9uLnByb3RvdHlwZS5hZGRJdGVtID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHRoaXMuX2l0ZW1zLnB1c2goY2FsbGJhY2spO1xufTtcblxuLyo6bm9kb2M6KiBpbnRlcm5hbFxuICogU2VjdGlvbiNmb3JtYXRIZWxwKGZvcm1hdHRlcikgLT4gc3RyaW5nXG4gKiAtIGZvcm1hdHRlciAoSGVscEZvcm1hdHRlcik6IGN1cnJlbnQgZm9ybWF0dGVyXG4gKlxuICogRm9ybSBoZWxwIHNlY3Rpb24gc3RyaW5nXG4gKlxuICoqL1xuU2VjdGlvbi5wcm90b3R5cGUuZm9ybWF0SGVscCA9IGZ1bmN0aW9uIChmb3JtYXR0ZXIpIHtcbiAgdmFyIGl0ZW1IZWxwLCBoZWFkaW5nO1xuXG4gIC8vIGZvcm1hdCB0aGUgaW5kZW50ZWQgc2VjdGlvblxuICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgZm9ybWF0dGVyLl9pbmRlbnQoKTtcbiAgfVxuXG4gIGl0ZW1IZWxwID0gdGhpcy5faXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIG9iaiwgZnVuYywgYXJncztcblxuICAgIG9iaiA9IGZvcm1hdHRlcjtcbiAgICBmdW5jID0gaXRlbVswXTtcbiAgICBhcmdzID0gaXRlbVsxXTtcbiAgICByZXR1cm4gZnVuYy5hcHBseShvYmosIGFyZ3MpO1xuICB9KTtcbiAgaXRlbUhlbHAgPSBmb3JtYXR0ZXIuX2pvaW5QYXJ0cyhpdGVtSGVscCk7XG5cbiAgaWYgKHRoaXMuX3BhcmVudCkge1xuICAgIGZvcm1hdHRlci5fZGVkZW50KCk7XG4gIH1cblxuICAvLyByZXR1cm4gbm90aGluZyBpZiB0aGUgc2VjdGlvbiB3YXMgZW1wdHlcbiAgaWYgKCFpdGVtSGVscCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8vIGFkZCB0aGUgaGVhZGluZyBpZiB0aGUgc2VjdGlvbiB3YXMgbm9uLWVtcHR5XG4gIGhlYWRpbmcgPSAnJztcbiAgaWYgKHRoaXMuX2hlYWRpbmcgJiYgdGhpcy5faGVhZGluZyAhPT0gYy5TVVBQUkVTUykge1xuICAgIHZhciBjdXJyZW50SW5kZW50ID0gZm9ybWF0dGVyLmN1cnJlbnRJbmRlbnQ7XG4gICAgaGVhZGluZyA9ICQkLnJlcGVhdCgnICcsIGN1cnJlbnRJbmRlbnQpICsgdGhpcy5faGVhZGluZyArICc6JyArIGMuRU9MO1xuICB9XG5cbiAgLy8gam9pbiB0aGUgc2VjdGlvbi1pbml0aWFsaXplIG5ld2xpbmUsIHRoZSBoZWFkaW5nIGFuZCB0aGUgaGVscFxuICByZXR1cm4gZm9ybWF0dGVyLl9qb2luUGFydHMoWyBjLkVPTCwgaGVhZGluZywgaXRlbUhlbHAsIGMuRU9MIF0pO1xufTtcblxuLyoqXG4gKiBuZXcgSGVscEZvcm1hdHRlcihvcHRpb25zKVxuICpcbiAqICMjIyMgT3B0aW9uczpcbiAqIC0gYHByb2dgOiBwcm9ncmFtIG5hbWVcbiAqIC0gYGluZGVudEluY3JpbWVudGA6IGluZGVudCBzdGVwLCBkZWZhdWx0IHZhbHVlIDJcbiAqIC0gYG1heEhlbHBQb3NpdGlvbmA6IG1heCBoZWxwIHBvc2l0aW9uLCBkZWZhdWx0IHZhbHVlID0gMjRcbiAqIC0gYHdpZHRoYDogbGluZSB3aWR0aFxuICpcbiAqKi9cbnZhciBIZWxwRm9ybWF0dGVyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBIZWxwRm9ybWF0dGVyKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdGhpcy5fcHJvZyA9IG9wdGlvbnMucHJvZztcblxuICB0aGlzLl9tYXhIZWxwUG9zaXRpb24gPSBvcHRpb25zLm1heEhlbHBQb3NpdGlvbiB8fCAyNDtcbiAgdGhpcy5fd2lkdGggPSAob3B0aW9ucy53aWR0aCB8fCAoKHByb2Nlc3MuZW52LkNPTFVNTlMgfHwgODApIC0gMikpO1xuXG4gIHRoaXMuX2N1cnJlbnRJbmRlbnQgPSAwO1xuICB0aGlzLl9pbmRlbnRJbmNyaW1lbnQgPSBvcHRpb25zLmluZGVudEluY3JpbWVudCB8fCAyO1xuICB0aGlzLl9sZXZlbCA9IDA7XG4gIHRoaXMuX2FjdGlvbk1heExlbmd0aCA9IDA7XG5cbiAgdGhpcy5fcm9vdFNlY3Rpb24gPSBuZXcgU2VjdGlvbihudWxsKTtcbiAgdGhpcy5fY3VycmVudFNlY3Rpb24gPSB0aGlzLl9yb290U2VjdGlvbjtcblxuICB0aGlzLl93aGl0ZXNwYWNlTWF0Y2hlciA9IG5ldyBSZWdFeHAoJ1xcXFxzKycsICdnJyk7XG4gIHRoaXMuX2xvbmdCcmVha01hdGNoZXIgPSBuZXcgUmVnRXhwKGMuRU9MICsgYy5FT0wgKyBjLkVPTCArICcrJywgJ2cnKTtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9pbmRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2N1cnJlbnRJbmRlbnQgKz0gdGhpcy5faW5kZW50SW5jcmltZW50O1xuICB0aGlzLl9sZXZlbCArPSAxO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2RlZGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY3VycmVudEluZGVudCAtPSB0aGlzLl9pbmRlbnRJbmNyaW1lbnQ7XG4gIHRoaXMuX2xldmVsIC09IDE7XG4gIGlmICh0aGlzLl9jdXJyZW50SW5kZW50IDwgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5kZW50IGRlY3JlYXNlZCBiZWxvdyAwLicpO1xuICB9XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fYWRkSXRlbSA9IGZ1bmN0aW9uIChmdW5jLCBhcmdzKSB7XG4gIHRoaXMuX2N1cnJlbnRTZWN0aW9uLmFkZEl0ZW0oWyBmdW5jLCBhcmdzIF0pO1xufTtcblxuLy9cbi8vIE1lc3NhZ2UgYnVpbGRpbmcgbWV0aG9kc1xuLy9cblxuLyoqXG4gKiBIZWxwRm9ybWF0dGVyI3N0YXJ0U2VjdGlvbihoZWFkaW5nKSAtPiBWb2lkXG4gKiAtIGhlYWRpbmcgKHN0cmluZyk6IGhlYWRlciBzdHJpbmdcbiAqXG4gKiBTdGFydCBuZXcgaGVscCBzZWN0aW9uXG4gKlxuICogU2VlIGFsc2UgW2NvZGUgZXhhbXBsZV1bMV1cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogICAgICBmb3JtYXR0ZXIuc3RhcnRTZWN0aW9uKGFjdGlvbkdyb3VwLnRpdGxlKTtcbiAqICAgICAgZm9ybWF0dGVyLmFkZFRleHQoYWN0aW9uR3JvdXAuZGVzY3JpcHRpb24pO1xuICogICAgICBmb3JtYXR0ZXIuYWRkQXJndW1lbnRzKGFjdGlvbkdyb3VwLl9ncm91cEFjdGlvbnMpO1xuICogICAgICBmb3JtYXR0ZXIuZW5kU2VjdGlvbigpO1xuICpcbiAqKi9cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLnN0YXJ0U2VjdGlvbiA9IGZ1bmN0aW9uIChoZWFkaW5nKSB7XG4gIHRoaXMuX2luZGVudCgpO1xuICB2YXIgc2VjdGlvbiA9IG5ldyBTZWN0aW9uKHRoaXMuX2N1cnJlbnRTZWN0aW9uLCBoZWFkaW5nKTtcbiAgdmFyIGZ1bmMgPSBzZWN0aW9uLmZvcm1hdEhlbHAuYmluZChzZWN0aW9uKTtcbiAgdGhpcy5fYWRkSXRlbShmdW5jLCBbIHRoaXMgXSk7XG4gIHRoaXMuX2N1cnJlbnRTZWN0aW9uID0gc2VjdGlvbjtcbn07XG5cbi8qKlxuICogSGVscEZvcm1hdHRlciNlbmRTZWN0aW9uIC0+IFZvaWRcbiAqXG4gKiBFbmQgaGVscCBzZWN0aW9uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqICAgICAgZm9ybWF0dGVyLnN0YXJ0U2VjdGlvbihhY3Rpb25Hcm91cC50aXRsZSk7XG4gKiAgICAgIGZvcm1hdHRlci5hZGRUZXh0KGFjdGlvbkdyb3VwLmRlc2NyaXB0aW9uKTtcbiAqICAgICAgZm9ybWF0dGVyLmFkZEFyZ3VtZW50cyhhY3Rpb25Hcm91cC5fZ3JvdXBBY3Rpb25zKTtcbiAqICAgICAgZm9ybWF0dGVyLmVuZFNlY3Rpb24oKTtcbiAqKi9cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLmVuZFNlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuX2N1cnJlbnRTZWN0aW9uID0gdGhpcy5fY3VycmVudFNlY3Rpb24uX3BhcmVudDtcbiAgdGhpcy5fZGVkZW50KCk7XG59O1xuXG4vKipcbiAqIEhlbHBGb3JtYXR0ZXIjYWRkVGV4dCh0ZXh0KSAtPiBWb2lkXG4gKiAtIHRleHQgKHN0cmluZyk6IHBsYWluIHRleHRcbiAqXG4gKiBBZGQgcGxhaW4gdGV4dCBpbnRvIGN1cnJlbnQgc2VjdGlvblxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiAgICAgIGZvcm1hdHRlci5zdGFydFNlY3Rpb24oYWN0aW9uR3JvdXAudGl0bGUpO1xuICogICAgICBmb3JtYXR0ZXIuYWRkVGV4dChhY3Rpb25Hcm91cC5kZXNjcmlwdGlvbik7XG4gKiAgICAgIGZvcm1hdHRlci5hZGRBcmd1bWVudHMoYWN0aW9uR3JvdXAuX2dyb3VwQWN0aW9ucyk7XG4gKiAgICAgIGZvcm1hdHRlci5lbmRTZWN0aW9uKCk7XG4gKlxuICoqL1xuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuYWRkVGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICh0ZXh0ICYmIHRleHQgIT09IGMuU1VQUFJFU1MpIHtcbiAgICB0aGlzLl9hZGRJdGVtKHRoaXMuX2Zvcm1hdFRleHQsIFsgdGV4dCBdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBIZWxwRm9ybWF0dGVyI2FkZFVzYWdlKHVzYWdlLCBhY3Rpb25zLCBncm91cHMsIHByZWZpeCkgLT4gVm9pZFxuICogLSB1c2FnZSAoc3RyaW5nKTogdXNhZ2UgdGV4dFxuICogLSBhY3Rpb25zIChhcnJheSk6IGFjdGlvbnMgbGlzdFxuICogLSBncm91cHMgKGFycmF5KTogZ3JvdXBzIGxpc3RcbiAqIC0gcHJlZml4IChzdHJpbmcpOiB1c2FnZSBwcmVmaXhcbiAqXG4gKiBBZGQgdXNhZ2UgZGF0YSBpbnRvIGN1cnJlbnQgc2VjdGlvblxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiAgICAgIGZvcm1hdHRlci5hZGRVc2FnZSh0aGlzLnVzYWdlLCB0aGlzLl9hY3Rpb25zLCBbXSk7XG4gKiAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0SGVscCgpO1xuICpcbiAqKi9cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLmFkZFVzYWdlID0gZnVuY3Rpb24gKHVzYWdlLCBhY3Rpb25zLCBncm91cHMsIHByZWZpeCkge1xuICBpZiAodXNhZ2UgIT09IGMuU1VQUFJFU1MpIHtcbiAgICB0aGlzLl9hZGRJdGVtKHRoaXMuX2Zvcm1hdFVzYWdlLCBbIHVzYWdlLCBhY3Rpb25zLCBncm91cHMsIHByZWZpeCBdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBIZWxwRm9ybWF0dGVyI2FkZEFyZ3VtZW50KGFjdGlvbikgLT4gVm9pZFxuICogLSBhY3Rpb24gKG9iamVjdCk6IGFjdGlvblxuICpcbiAqIEFkZCBhcmd1bWVudCBpbnRvIGN1cnJlbnQgc2VjdGlvblxuICpcbiAqIFNpbmdsZSB2YXJpYW50IG9mIFtbSGVscEZvcm1hdHRlciNhZGRBcmd1bWVudHNdXVxuICoqL1xuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuYWRkQXJndW1lbnQgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24uaGVscCAhPT0gYy5TVVBQUkVTUykge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIC8vIGZpbmQgYWxsIGludm9jYXRpb25zXG4gICAgdmFyIGludm9jYXRpb25zID0gWyB0aGlzLl9mb3JtYXRBY3Rpb25JbnZvY2F0aW9uKGFjdGlvbikgXTtcbiAgICB2YXIgaW52b2NhdGlvbkxlbmd0aCA9IGludm9jYXRpb25zWzBdLmxlbmd0aDtcblxuICAgIHZhciBhY3Rpb25MZW5ndGg7XG5cbiAgICBpZiAoYWN0aW9uLl9nZXRTdWJhY3Rpb25zKSB7XG4gICAgICB0aGlzLl9pbmRlbnQoKTtcbiAgICAgIGFjdGlvbi5fZ2V0U3ViYWN0aW9ucygpLmZvckVhY2goZnVuY3Rpb24gKHN1YmFjdGlvbikge1xuXG4gICAgICAgIHZhciBpbnZvY2F0aW9uTmV3ID0gc2VsZi5fZm9ybWF0QWN0aW9uSW52b2NhdGlvbihzdWJhY3Rpb24pO1xuICAgICAgICBpbnZvY2F0aW9ucy5wdXNoKGludm9jYXRpb25OZXcpO1xuICAgICAgICBpbnZvY2F0aW9uTGVuZ3RoID0gTWF0aC5tYXgoaW52b2NhdGlvbkxlbmd0aCwgaW52b2NhdGlvbk5ldy5sZW5ndGgpO1xuXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2RlZGVudCgpO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSB0aGUgbWF4aW11bSBpdGVtIGxlbmd0aFxuICAgIGFjdGlvbkxlbmd0aCA9IGludm9jYXRpb25MZW5ndGggKyB0aGlzLl9jdXJyZW50SW5kZW50O1xuICAgIHRoaXMuX2FjdGlvbk1heExlbmd0aCA9IE1hdGgubWF4KHRoaXMuX2FjdGlvbk1heExlbmd0aCwgYWN0aW9uTGVuZ3RoKTtcblxuICAgIC8vIGFkZCB0aGUgaXRlbSB0byB0aGUgbGlzdFxuICAgIHRoaXMuX2FkZEl0ZW0odGhpcy5fZm9ybWF0QWN0aW9uLCBbIGFjdGlvbiBdKTtcbiAgfVxufTtcblxuLyoqXG4gKiBIZWxwRm9ybWF0dGVyI2FkZEFyZ3VtZW50cyhhY3Rpb25zKSAtPiBWb2lkXG4gKiAtIGFjdGlvbnMgKGFycmF5KTogYWN0aW9ucyBsaXN0XG4gKlxuICogTWFzcyBhZGQgYXJndW1lbnRzIGludG8gY3VycmVudCBzZWN0aW9uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqICAgICAgZm9ybWF0dGVyLnN0YXJ0U2VjdGlvbihhY3Rpb25Hcm91cC50aXRsZSk7XG4gKiAgICAgIGZvcm1hdHRlci5hZGRUZXh0KGFjdGlvbkdyb3VwLmRlc2NyaXB0aW9uKTtcbiAqICAgICAgZm9ybWF0dGVyLmFkZEFyZ3VtZW50cyhhY3Rpb25Hcm91cC5fZ3JvdXBBY3Rpb25zKTtcbiAqICAgICAgZm9ybWF0dGVyLmVuZFNlY3Rpb24oKTtcbiAqXG4gKiovXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5hZGRBcmd1bWVudHMgPSBmdW5jdGlvbiAoYWN0aW9ucykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgc2VsZi5hZGRBcmd1bWVudChhY3Rpb24pO1xuICB9KTtcbn07XG5cbi8vXG4vLyBIZWxwLWZvcm1hdHRpbmcgbWV0aG9kc1xuLy9cblxuLyoqXG4gKiBIZWxwRm9ybWF0dGVyI2Zvcm1hdEhlbHAgLT4gc3RyaW5nXG4gKlxuICogRm9ybWF0IGhlbHBcbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogICAgICBmb3JtYXR0ZXIuYWRkVGV4dCh0aGlzLmVwaWxvZyk7XG4gKiAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0SGVscCgpO1xuICpcbiAqKi9cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdEhlbHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWxwID0gdGhpcy5fcm9vdFNlY3Rpb24uZm9ybWF0SGVscCh0aGlzKTtcbiAgaWYgKGhlbHApIHtcbiAgICBoZWxwID0gaGVscC5yZXBsYWNlKHRoaXMuX2xvbmdCcmVha01hdGNoZXIsIGMuRU9MICsgYy5FT0wpO1xuICAgIGhlbHAgPSAkJC50cmltQ2hhcnMoaGVscCwgYy5FT0wpICsgYy5FT0w7XG4gIH1cbiAgcmV0dXJuIGhlbHA7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fam9pblBhcnRzID0gZnVuY3Rpb24gKHBhcnRTdHJpbmdzKSB7XG4gIHJldHVybiBwYXJ0U3RyaW5ncy5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gKHBhcnQgJiYgcGFydCAhPT0gYy5TVVBQUkVTUyk7XG4gIH0pLmpvaW4oJycpO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2Zvcm1hdFVzYWdlID0gZnVuY3Rpb24gKHVzYWdlLCBhY3Rpb25zLCBncm91cHMsIHByZWZpeCkge1xuICBpZiAoIXByZWZpeCAmJiB0eXBlb2YgcHJlZml4ICE9PSAnc3RyaW5nJykge1xuICAgIHByZWZpeCA9ICd1c2FnZTogJztcbiAgfVxuXG4gIGFjdGlvbnMgPSBhY3Rpb25zIHx8IFtdO1xuICBncm91cHMgPSBncm91cHMgfHwgW107XG5cblxuICAvLyBpZiB1c2FnZSBpcyBzcGVjaWZpZWQsIHVzZSB0aGF0XG4gIGlmICh1c2FnZSkge1xuICAgIHVzYWdlID0gc3ByaW50Zih1c2FnZSwgeyBwcm9nOiB0aGlzLl9wcm9nIH0pO1xuXG4gICAgLy8gaWYgbm8gb3B0aW9uYWxzIG9yIHBvc2l0aW9uYWxzIGFyZSBhdmFpbGFibGUsIHVzYWdlIGlzIGp1c3QgcHJvZ1xuICB9IGVsc2UgaWYgKCF1c2FnZSAmJiBhY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIHVzYWdlID0gdGhpcy5fcHJvZztcblxuICAgIC8vIGlmIG9wdGlvbmFscyBhbmQgcG9zaXRpb25hbHMgYXJlIGF2YWlsYWJsZSwgY2FsY3VsYXRlIHVzYWdlXG4gIH0gZWxzZSBpZiAoIXVzYWdlKSB7XG4gICAgdmFyIHByb2cgPSB0aGlzLl9wcm9nO1xuICAgIHZhciBvcHRpb25hbHMgPSBbXTtcbiAgICB2YXIgcG9zaXRpb25hbHMgPSBbXTtcbiAgICB2YXIgYWN0aW9uVXNhZ2U7XG4gICAgdmFyIHRleHRXaWR0aDtcblxuICAgIC8vIHNwbGl0IG9wdGlvbmFscyBmcm9tIHBvc2l0aW9uYWxzXG4gICAgYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGlmIChhY3Rpb24uaXNPcHRpb25hbCgpKSB7XG4gICAgICAgIG9wdGlvbmFscy5wdXNoKGFjdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3NpdGlvbmFscy5wdXNoKGFjdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBidWlsZCBmdWxsIHVzYWdlIHN0cmluZ1xuICAgIGFjdGlvblVzYWdlID0gdGhpcy5fZm9ybWF0QWN0aW9uc1VzYWdlKFtdLmNvbmNhdChvcHRpb25hbHMsIHBvc2l0aW9uYWxzKSwgZ3JvdXBzKTtcbiAgICB1c2FnZSA9IFsgcHJvZywgYWN0aW9uVXNhZ2UgXS5qb2luKCcgJyk7XG5cbiAgICAvLyB3cmFwIHRoZSB1c2FnZSBwYXJ0cyBpZiBpdCdzIHRvbyBsb25nXG4gICAgdGV4dFdpZHRoID0gdGhpcy5fd2lkdGggLSB0aGlzLl9jdXJyZW50SW5kZW50O1xuICAgIGlmICgocHJlZml4Lmxlbmd0aCArIHVzYWdlLmxlbmd0aCkgPiB0ZXh0V2lkdGgpIHtcblxuICAgICAgLy8gYnJlYWsgdXNhZ2UgaW50byB3cmFwcGFibGUgcGFydHNcbiAgICAgIHZhciByZWdleHBQYXJ0ID0gbmV3IFJlZ0V4cCgnXFxcXCguKj9cXFxcKSt8XFxcXFsuKj9cXFxcXSt8XFxcXFMrJywgJ2cnKTtcbiAgICAgIHZhciBvcHRpb25hbFVzYWdlID0gdGhpcy5fZm9ybWF0QWN0aW9uc1VzYWdlKG9wdGlvbmFscywgZ3JvdXBzKTtcbiAgICAgIHZhciBwb3NpdGlvbmFsVXNhZ2UgPSB0aGlzLl9mb3JtYXRBY3Rpb25zVXNhZ2UocG9zaXRpb25hbHMsIGdyb3Vwcyk7XG5cblxuICAgICAgdmFyIG9wdGlvbmFsUGFydHMgPSBvcHRpb25hbFVzYWdlLm1hdGNoKHJlZ2V4cFBhcnQpO1xuICAgICAgdmFyIHBvc2l0aW9uYWxQYXJ0cyA9IHBvc2l0aW9uYWxVc2FnZS5tYXRjaChyZWdleHBQYXJ0KSB8fCBbXTtcblxuICAgICAgaWYgKG9wdGlvbmFsUGFydHMuam9pbignICcpICE9PSBvcHRpb25hbFVzYWdlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYXNzZXJ0IFwib3B0aW9uYWxQYXJ0cy5qb2luKFxcJyBcXCcpID09PSBvcHRpb25hbFVzYWdlXCInKTtcbiAgICAgIH1cbiAgICAgIGlmIChwb3NpdGlvbmFsUGFydHMuam9pbignICcpICE9PSBwb3NpdGlvbmFsVXNhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NlcnQgXCJwb3NpdGlvbmFsUGFydHMuam9pbihcXCcgXFwnKSA9PT0gcG9zaXRpb25hbFVzYWdlXCInKTtcbiAgICAgIH1cblxuICAgICAgLy8gaGVscGVyIGZvciB3cmFwcGluZyBsaW5lc1xuICAgICAgLyplc2xpbnQtZGlzYWJsZSBmdW5jLXN0eWxlKi8gLy8gbm9kZSAwLjEwIGNvbXBhdFxuICAgICAgdmFyIF9nZXRMaW5lcyA9IGZ1bmN0aW9uIChwYXJ0cywgaW5kZW50LCBwcmVmaXgpIHtcbiAgICAgICAgdmFyIGxpbmVzID0gW107XG4gICAgICAgIHZhciBsaW5lID0gW107XG5cbiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBwcmVmaXggPyBwcmVmaXgubGVuZ3RoIC0gMSA6IGluZGVudC5sZW5ndGggLSAxO1xuXG4gICAgICAgIHBhcnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICBpZiAobGluZUxlbmd0aCArIDEgKyBwYXJ0Lmxlbmd0aCA+IHRleHRXaWR0aCkge1xuICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnQgKyBsaW5lLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICBsaW5lID0gW107XG4gICAgICAgICAgICBsaW5lTGVuZ3RoID0gaW5kZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmUucHVzaChwYXJ0KTtcbiAgICAgICAgICBsaW5lTGVuZ3RoICs9IHBhcnQubGVuZ3RoICsgMTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGxpbmUpIHtcbiAgICAgICAgICBsaW5lcy5wdXNoKGluZGVudCArIGxpbmUuam9pbignICcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgbGluZXNbMF0gPSBsaW5lc1swXS5zdWJzdHIoaW5kZW50Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgICAgfTtcblxuICAgICAgdmFyIGxpbmVzLCBpbmRlbnQsIHBhcnRzO1xuICAgICAgLy8gaWYgcHJvZyBpcyBzaG9ydCwgZm9sbG93IGl0IHdpdGggb3B0aW9uYWxzIG9yIHBvc2l0aW9uYWxzXG4gICAgICBpZiAocHJlZml4Lmxlbmd0aCArIHByb2cubGVuZ3RoIDw9IDAuNzUgKiB0ZXh0V2lkdGgpIHtcbiAgICAgICAgaW5kZW50ID0gJCQucmVwZWF0KCcgJywgKHByZWZpeC5sZW5ndGggKyBwcm9nLmxlbmd0aCArIDEpKTtcbiAgICAgICAgaWYgKG9wdGlvbmFsUGFydHMpIHtcbiAgICAgICAgICBsaW5lcyA9IFtdLmNvbmNhdChcbiAgICAgICAgICAgIF9nZXRMaW5lcyhbIHByb2cgXS5jb25jYXQob3B0aW9uYWxQYXJ0cyksIGluZGVudCwgcHJlZml4KSxcbiAgICAgICAgICAgIF9nZXRMaW5lcyhwb3NpdGlvbmFsUGFydHMsIGluZGVudClcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uYWxQYXJ0cykge1xuICAgICAgICAgIGxpbmVzID0gX2dldExpbmVzKFsgcHJvZyBdLmNvbmNhdChwb3NpdGlvbmFsUGFydHMpLCBpbmRlbnQsIHByZWZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGluZXMgPSBbIHByb2cgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHByb2cgaXMgbG9uZywgcHV0IGl0IG9uIGl0cyBvd24gbGluZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZW50ID0gJCQucmVwZWF0KCcgJywgcHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIHBhcnRzID0gb3B0aW9uYWxQYXJ0cy5jb25jYXQocG9zaXRpb25hbFBhcnRzKTtcbiAgICAgICAgbGluZXMgPSBfZ2V0TGluZXMocGFydHMsIGluZGVudCk7XG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgbGluZXMgPSBbXS5jb25jYXQoXG4gICAgICAgICAgICBfZ2V0TGluZXMob3B0aW9uYWxQYXJ0cywgaW5kZW50KSxcbiAgICAgICAgICAgIF9nZXRMaW5lcyhwb3NpdGlvbmFsUGFydHMsIGluZGVudClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVzID0gWyBwcm9nIF0uY29uY2F0KGxpbmVzKTtcbiAgICAgIH1cbiAgICAgIC8vIGpvaW4gbGluZXMgaW50byB1c2FnZVxuICAgICAgdXNhZ2UgPSBsaW5lcy5qb2luKGMuRU9MKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcmVmaXggd2l0aCAndXNhZ2U6J1xuICByZXR1cm4gcHJlZml4ICsgdXNhZ2UgKyBjLkVPTCArIGMuRU9MO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2Zvcm1hdEFjdGlvbnNVc2FnZSA9IGZ1bmN0aW9uIChhY3Rpb25zLCBncm91cHMpIHtcbiAgLy8gZmluZCBncm91cCBpbmRpY2VzIGFuZCBpZGVudGlmeSBhY3Rpb25zIGluIGdyb3Vwc1xuICB2YXIgZ3JvdXBBY3Rpb25zID0gW107XG4gIHZhciBpbnNlcnRzID0gW107XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICB2YXIgZW5kO1xuICAgIHZhciBpO1xuXG4gICAgdmFyIHN0YXJ0ID0gYWN0aW9ucy5pbmRleE9mKGdyb3VwLl9ncm91cEFjdGlvbnNbMF0pO1xuICAgIGlmIChzdGFydCA+PSAwKSB7XG4gICAgICBlbmQgPSBzdGFydCArIGdyb3VwLl9ncm91cEFjdGlvbnMubGVuZ3RoO1xuXG4gICAgICAvL2lmIChhY3Rpb25zLnNsaWNlKHN0YXJ0LCBlbmQpID09PSBncm91cC5fZ3JvdXBBY3Rpb25zKSB7XG4gICAgICBpZiAoJCQuYXJyYXlFcXVhbChhY3Rpb25zLnNsaWNlKHN0YXJ0LCBlbmQpLCBncm91cC5fZ3JvdXBBY3Rpb25zKSkge1xuICAgICAgICBncm91cC5fZ3JvdXBBY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgIGdyb3VwQWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICghZ3JvdXAucmVxdWlyZWQpIHtcbiAgICAgICAgICBpZiAoaW5zZXJ0c1tzdGFydF0pIHtcbiAgICAgICAgICAgIGluc2VydHNbc3RhcnRdICs9ICcgWyc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc2VydHNbc3RhcnRdID0gJ1snO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnNlcnRzW2VuZF0gPSAnXSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGluc2VydHNbc3RhcnRdKSB7XG4gICAgICAgICAgICBpbnNlcnRzW3N0YXJ0XSArPSAnICgnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnNlcnRzW3N0YXJ0XSA9ICcoJztcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5zZXJ0c1tlbmRdID0gJyknO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IHN0YXJ0ICsgMTsgaSA8IGVuZDsgaSArPSAxKSB7XG4gICAgICAgICAgaW5zZXJ0c1tpXSA9ICd8JztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gY29sbGVjdCBhbGwgYWN0aW9ucyBmb3JtYXQgc3RyaW5nc1xuICB2YXIgcGFydHMgPSBbXTtcblxuICBhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbiwgYWN0aW9uSW5kZXgpIHtcbiAgICB2YXIgcGFydDtcbiAgICB2YXIgb3B0aW9uU3RyaW5nO1xuICAgIHZhciBhcmdzRGVmYXVsdDtcbiAgICB2YXIgYXJnc1N0cmluZztcblxuICAgIC8vIHN1cHByZXNzZWQgYXJndW1lbnRzIGFyZSBtYXJrZWQgd2l0aCBOb25lXG4gICAgLy8gcmVtb3ZlIHwgc2VwYXJhdG9ycyBmb3Igc3VwcHJlc3NlZCBhcmd1bWVudHNcbiAgICBpZiAoYWN0aW9uLmhlbHAgPT09IGMuU1VQUFJFU1MpIHtcbiAgICAgIHBhcnRzLnB1c2gobnVsbCk7XG4gICAgICBpZiAoaW5zZXJ0c1thY3Rpb25JbmRleF0gPT09ICd8Jykge1xuICAgICAgICBpbnNlcnRzLnNwbGljZShhY3Rpb25JbmRleCwgYWN0aW9uSW5kZXgpO1xuICAgICAgfSBlbHNlIGlmIChpbnNlcnRzW2FjdGlvbkluZGV4ICsgMV0gPT09ICd8Jykge1xuICAgICAgICBpbnNlcnRzLnNwbGljZShhY3Rpb25JbmRleCArIDEsIGFjdGlvbkluZGV4ICsgMSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHByb2R1Y2UgYWxsIGFyZyBzdHJpbmdzXG4gICAgfSBlbHNlIGlmICghYWN0aW9uLmlzT3B0aW9uYWwoKSkge1xuICAgICAgcGFydCA9IHNlbGYuX2Zvcm1hdEFyZ3MoYWN0aW9uLCBhY3Rpb24uZGVzdCk7XG5cbiAgICAgIC8vIGlmIGl0J3MgaW4gYSBncm91cCwgc3RyaXAgdGhlIG91dGVyIFtdXG4gICAgICBpZiAoZ3JvdXBBY3Rpb25zLmluZGV4T2YoYWN0aW9uKSA+PSAwKSB7XG4gICAgICAgIGlmIChwYXJ0WzBdID09PSAnWycgJiYgcGFydFtwYXJ0Lmxlbmd0aCAtIDFdID09PSAnXScpIHtcbiAgICAgICAgICBwYXJ0ID0gcGFydC5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIGFkZCB0aGUgYWN0aW9uIHN0cmluZyB0byB0aGUgbGlzdFxuICAgICAgcGFydHMucHVzaChwYXJ0KTtcblxuICAgIC8vIHByb2R1Y2UgdGhlIGZpcnN0IHdheSB0byBpbnZva2UgdGhlIG9wdGlvbiBpbiBicmFja2V0c1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25TdHJpbmcgPSBhY3Rpb24ub3B0aW9uU3RyaW5nc1swXTtcblxuICAgICAgLy8gaWYgdGhlIE9wdGlvbmFsIGRvZXNuJ3QgdGFrZSBhIHZhbHVlLCBmb3JtYXQgaXM6IC1zIG9yIC0tbG9uZ1xuICAgICAgaWYgKGFjdGlvbi5uYXJncyA9PT0gMCkge1xuICAgICAgICBwYXJ0ID0gJycgKyBvcHRpb25TdHJpbmc7XG5cbiAgICAgIC8vIGlmIHRoZSBPcHRpb25hbCB0YWtlcyBhIHZhbHVlLCBmb3JtYXQgaXM6IC1zIEFSR1Mgb3IgLS1sb25nIEFSR1NcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3NEZWZhdWx0ID0gYWN0aW9uLmRlc3QudG9VcHBlckNhc2UoKTtcbiAgICAgICAgYXJnc1N0cmluZyA9IHNlbGYuX2Zvcm1hdEFyZ3MoYWN0aW9uLCBhcmdzRGVmYXVsdCk7XG4gICAgICAgIHBhcnQgPSBvcHRpb25TdHJpbmcgKyAnICcgKyBhcmdzU3RyaW5nO1xuICAgICAgfVxuICAgICAgLy8gbWFrZSBpdCBsb29rIG9wdGlvbmFsIGlmIGl0J3Mgbm90IHJlcXVpcmVkIG9yIGluIGEgZ3JvdXBcbiAgICAgIGlmICghYWN0aW9uLnJlcXVpcmVkICYmIGdyb3VwQWN0aW9ucy5pbmRleE9mKGFjdGlvbikgPCAwKSB7XG4gICAgICAgIHBhcnQgPSAnWycgKyBwYXJ0ICsgJ10nO1xuICAgICAgfVxuICAgICAgLy8gYWRkIHRoZSBhY3Rpb24gc3RyaW5nIHRvIHRoZSBsaXN0XG4gICAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaW5zZXJ0IHRoaW5ncyBhdCB0aGUgbmVjZXNzYXJ5IGluZGljZXNcbiAgZm9yICh2YXIgaSA9IGluc2VydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICBpZiAoaW5zZXJ0c1tpXSAhPT0gbnVsbCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDAsIGluc2VydHNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGpvaW4gYWxsIHRoZSBhY3Rpb24gaXRlbXMgd2l0aCBzcGFjZXNcbiAgdmFyIHRleHQgPSBwYXJ0cy5maWx0ZXIoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gISFwYXJ0O1xuICB9KS5qb2luKCcgJyk7XG5cbiAgLy8gY2xlYW4gdXAgc2VwYXJhdG9ycyBmb3IgbXV0dWFsbHkgZXhjbHVzaXZlIGdyb3Vwc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8oW1xcWyhdKSAvZywgJyQxJyk7IC8vIHJlbW92ZSBzcGFjZXNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvIChbXFxdKV0pL2csICckMScpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXFsgKlxcXS9nLCAnJyk7IC8vIHJlbW92ZSBlbXB0eSBncm91cHNcbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvXFwoICpcXCkvZywgJycpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCgoW158XSopXFwpL2csICckMScpOyAvLyByZW1vdmUgKCkgZnJvbSBzaW5nbGUgYWN0aW9uIGdyb3Vwc1xuXG4gIHRleHQgPSB0ZXh0LnRyaW0oKTtcblxuICAvLyByZXR1cm4gdGhlIHRleHRcbiAgcmV0dXJuIHRleHQ7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZm9ybWF0VGV4dCA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIHRleHQgPSBzcHJpbnRmKHRleHQsIHsgcHJvZzogdGhpcy5fcHJvZyB9KTtcbiAgdmFyIHRleHRXaWR0aCA9IHRoaXMuX3dpZHRoIC0gdGhpcy5fY3VycmVudEluZGVudDtcbiAgdmFyIGluZGVudEluY3JpbWVudCA9ICQkLnJlcGVhdCgnICcsIHRoaXMuX2N1cnJlbnRJbmRlbnQpO1xuICByZXR1cm4gdGhpcy5fZmlsbFRleHQodGV4dCwgdGV4dFdpZHRoLCBpbmRlbnRJbmNyaW1lbnQpICsgYy5FT0wgKyBjLkVPTDtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9mb3JtYXRBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgaGVscFRleHQ7XG4gIHZhciBoZWxwTGluZXM7XG4gIHZhciBwYXJ0cztcbiAgdmFyIGluZGVudEZpcnN0O1xuXG4gIC8vIGRldGVybWluZSB0aGUgcmVxdWlyZWQgd2lkdGggYW5kIHRoZSBlbnRyeSBsYWJlbFxuICB2YXIgaGVscFBvc2l0aW9uID0gTWF0aC5taW4odGhpcy5fYWN0aW9uTWF4TGVuZ3RoICsgMiwgdGhpcy5fbWF4SGVscFBvc2l0aW9uKTtcbiAgdmFyIGhlbHBXaWR0aCA9IHRoaXMuX3dpZHRoIC0gaGVscFBvc2l0aW9uO1xuICB2YXIgYWN0aW9uV2lkdGggPSBoZWxwUG9zaXRpb24gLSB0aGlzLl9jdXJyZW50SW5kZW50IC0gMjtcbiAgdmFyIGFjdGlvbkhlYWRlciA9IHRoaXMuX2Zvcm1hdEFjdGlvbkludm9jYXRpb24oYWN0aW9uKTtcblxuICAvLyBubyBoZWxwOyBzdGFydCBvbiBzYW1lIGxpbmUgYW5kIGFkZCBhIGZpbmFsIG5ld2xpbmVcbiAgaWYgKCFhY3Rpb24uaGVscCkge1xuICAgIGFjdGlvbkhlYWRlciA9ICQkLnJlcGVhdCgnICcsIHRoaXMuX2N1cnJlbnRJbmRlbnQpICsgYWN0aW9uSGVhZGVyICsgYy5FT0w7XG5cbiAgLy8gc2hvcnQgYWN0aW9uIG5hbWU7IHN0YXJ0IG9uIHRoZSBzYW1lIGxpbmUgYW5kIHBhZCB0d28gc3BhY2VzXG4gIH0gZWxzZSBpZiAoYWN0aW9uSGVhZGVyLmxlbmd0aCA8PSBhY3Rpb25XaWR0aCkge1xuICAgIGFjdGlvbkhlYWRlciA9ICQkLnJlcGVhdCgnICcsIHRoaXMuX2N1cnJlbnRJbmRlbnQpICtcbiAgICAgICAgYWN0aW9uSGVhZGVyICtcbiAgICAgICAgJyAgJyArXG4gICAgICAgICQkLnJlcGVhdCgnICcsIGFjdGlvbldpZHRoIC0gYWN0aW9uSGVhZGVyLmxlbmd0aCk7XG4gICAgaW5kZW50Rmlyc3QgPSAwO1xuXG4gIC8vIGxvbmcgYWN0aW9uIG5hbWU7IHN0YXJ0IG9uIHRoZSBuZXh0IGxpbmVcbiAgfSBlbHNlIHtcbiAgICBhY3Rpb25IZWFkZXIgPSAkJC5yZXBlYXQoJyAnLCB0aGlzLl9jdXJyZW50SW5kZW50KSArIGFjdGlvbkhlYWRlciArIGMuRU9MO1xuICAgIGluZGVudEZpcnN0ID0gaGVscFBvc2l0aW9uO1xuICB9XG5cbiAgLy8gY29sbGVjdCB0aGUgcGllY2VzIG9mIHRoZSBhY3Rpb24gaGVscFxuICBwYXJ0cyA9IFsgYWN0aW9uSGVhZGVyIF07XG5cbiAgLy8gaWYgdGhlcmUgd2FzIGhlbHAgZm9yIHRoZSBhY3Rpb24sIGFkZCBsaW5lcyBvZiBoZWxwIHRleHRcbiAgaWYgKGFjdGlvbi5oZWxwKSB7XG4gICAgaGVscFRleHQgPSB0aGlzLl9leHBhbmRIZWxwKGFjdGlvbik7XG4gICAgaGVscExpbmVzID0gdGhpcy5fc3BsaXRMaW5lcyhoZWxwVGV4dCwgaGVscFdpZHRoKTtcbiAgICBwYXJ0cy5wdXNoKCQkLnJlcGVhdCgnICcsIGluZGVudEZpcnN0KSArIGhlbHBMaW5lc1swXSArIGMuRU9MKTtcbiAgICBoZWxwTGluZXMuc2xpY2UoMSkuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgcGFydHMucHVzaCgkJC5yZXBlYXQoJyAnLCBoZWxwUG9zaXRpb24pICsgbGluZSArIGMuRU9MKTtcbiAgICB9KTtcblxuICAvLyBvciBhZGQgYSBuZXdsaW5lIGlmIHRoZSBkZXNjcmlwdGlvbiBkb2Vzbid0IGVuZCB3aXRoIG9uZVxuICB9IGVsc2UgaWYgKGFjdGlvbkhlYWRlci5jaGFyQXQoYWN0aW9uSGVhZGVyLmxlbmd0aCAtIDEpICE9PSBjLkVPTCkge1xuICAgIHBhcnRzLnB1c2goYy5FT0wpO1xuICB9XG4gIC8vIGlmIHRoZXJlIGFyZSBhbnkgc3ViLWFjdGlvbnMsIGFkZCB0aGVpciBoZWxwIGFzIHdlbGxcbiAgaWYgKGFjdGlvbi5fZ2V0U3ViYWN0aW9ucykge1xuICAgIHRoaXMuX2luZGVudCgpO1xuICAgIGFjdGlvbi5fZ2V0U3ViYWN0aW9ucygpLmZvckVhY2goZnVuY3Rpb24gKHN1YmFjdGlvbikge1xuICAgICAgcGFydHMucHVzaChzZWxmLl9mb3JtYXRBY3Rpb24oc3ViYWN0aW9uKSk7XG4gICAgfSk7XG4gICAgdGhpcy5fZGVkZW50KCk7XG4gIH1cbiAgLy8gcmV0dXJuIGEgc2luZ2xlIHN0cmluZ1xuICByZXR1cm4gdGhpcy5fam9pblBhcnRzKHBhcnRzKTtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9mb3JtYXRBY3Rpb25JbnZvY2F0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICBpZiAoIWFjdGlvbi5pc09wdGlvbmFsKCkpIHtcbiAgICB2YXIgZm9ybWF0X2Z1bmMgPSB0aGlzLl9tZXRhdmFyRm9ybWF0dGVyKGFjdGlvbiwgYWN0aW9uLmRlc3QpO1xuICAgIHZhciBtZXRhdmFycyA9IGZvcm1hdF9mdW5jKDEpO1xuICAgIHJldHVybiBtZXRhdmFyc1swXTtcbiAgfVxuXG4gIHZhciBwYXJ0cyA9IFtdO1xuICB2YXIgYXJnc0RlZmF1bHQ7XG4gIHZhciBhcmdzU3RyaW5nO1xuXG4gIC8vIGlmIHRoZSBPcHRpb25hbCBkb2Vzbid0IHRha2UgYSB2YWx1ZSwgZm9ybWF0IGlzOiAtcywgLS1sb25nXG4gIGlmIChhY3Rpb24ubmFyZ3MgPT09IDApIHtcbiAgICBwYXJ0cyA9IHBhcnRzLmNvbmNhdChhY3Rpb24ub3B0aW9uU3RyaW5ncyk7XG5cbiAgLy8gaWYgdGhlIE9wdGlvbmFsIHRha2VzIGEgdmFsdWUsIGZvcm1hdCBpczogLXMgQVJHUywgLS1sb25nIEFSR1NcbiAgfSBlbHNlIHtcbiAgICBhcmdzRGVmYXVsdCA9IGFjdGlvbi5kZXN0LnRvVXBwZXJDYXNlKCk7XG4gICAgYXJnc1N0cmluZyA9IHRoaXMuX2Zvcm1hdEFyZ3MoYWN0aW9uLCBhcmdzRGVmYXVsdCk7XG4gICAgYWN0aW9uLm9wdGlvblN0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uU3RyaW5nKSB7XG4gICAgICBwYXJ0cy5wdXNoKG9wdGlvblN0cmluZyArICcgJyArIGFyZ3NTdHJpbmcpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBwYXJ0cy5qb2luKCcsICcpO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX21ldGF2YXJGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoYWN0aW9uLCBtZXRhdmFyRGVmYXVsdCkge1xuICB2YXIgcmVzdWx0O1xuXG4gIGlmIChhY3Rpb24ubWV0YXZhciB8fCBhY3Rpb24ubWV0YXZhciA9PT0gJycpIHtcbiAgICByZXN1bHQgPSBhY3Rpb24ubWV0YXZhcjtcbiAgfSBlbHNlIGlmIChhY3Rpb24uY2hvaWNlcykge1xuICAgIHZhciBjaG9pY2VzID0gYWN0aW9uLmNob2ljZXM7XG5cbiAgICBpZiAodHlwZW9mIGNob2ljZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjaG9pY2VzID0gY2hvaWNlcy5zcGxpdCgnJykuam9pbignLCAnKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2hvaWNlcykpIHtcbiAgICAgIGNob2ljZXMgPSBjaG9pY2VzLmpvaW4oJywnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hvaWNlcyA9IE9iamVjdC5rZXlzKGNob2ljZXMpLmpvaW4oJywnKTtcbiAgICB9XG4gICAgcmVzdWx0ID0gJ3snICsgY2hvaWNlcyArICd9JztcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBtZXRhdmFyRGVmYXVsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIG1ldGF2YXJzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpICs9IDEpIHtcbiAgICAgIG1ldGF2YXJzLnB1c2gocmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGF2YXJzO1xuICB9O1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2Zvcm1hdEFyZ3MgPSBmdW5jdGlvbiAoYWN0aW9uLCBtZXRhdmFyRGVmYXVsdCkge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgbWV0YXZhcnM7XG5cbiAgdmFyIGJ1aWxkTWV0YXZhciA9IHRoaXMuX21ldGF2YXJGb3JtYXR0ZXIoYWN0aW9uLCBtZXRhdmFyRGVmYXVsdCk7XG5cbiAgc3dpdGNoIChhY3Rpb24ubmFyZ3MpIHtcbiAgICAvKmVzbGludC1kaXNhYmxlIG5vLXVuZGVmaW5lZCovXG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgY2FzZSBudWxsOlxuICAgICAgbWV0YXZhcnMgPSBidWlsZE1ldGF2YXIoMSk7XG4gICAgICByZXN1bHQgPSAnJyArIG1ldGF2YXJzWzBdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBjLk9QVElPTkFMOlxuICAgICAgbWV0YXZhcnMgPSBidWlsZE1ldGF2YXIoMSk7XG4gICAgICByZXN1bHQgPSAnWycgKyBtZXRhdmFyc1swXSArICddJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgYy5aRVJPX09SX01PUkU6XG4gICAgICBtZXRhdmFycyA9IGJ1aWxkTWV0YXZhcigyKTtcbiAgICAgIHJlc3VsdCA9ICdbJyArIG1ldGF2YXJzWzBdICsgJyBbJyArIG1ldGF2YXJzWzFdICsgJyAuLi5dXSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGMuT05FX09SX01PUkU6XG4gICAgICBtZXRhdmFycyA9IGJ1aWxkTWV0YXZhcigyKTtcbiAgICAgIHJlc3VsdCA9ICcnICsgbWV0YXZhcnNbMF0gKyAnIFsnICsgbWV0YXZhcnNbMV0gKyAnIC4uLl0nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBjLlJFTUFJTkRFUjpcbiAgICAgIHJlc3VsdCA9ICcuLi4nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBjLlBBUlNFUjpcbiAgICAgIG1ldGF2YXJzID0gYnVpbGRNZXRhdmFyKDEpO1xuICAgICAgcmVzdWx0ID0gbWV0YXZhcnNbMF0gKyAnIC4uLic7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgbWV0YXZhcnMgPSBidWlsZE1ldGF2YXIoYWN0aW9uLm5hcmdzKTtcbiAgICAgIHJlc3VsdCA9IG1ldGF2YXJzLmpvaW4oJyAnKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2V4cGFuZEhlbHAgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHZhciBwYXJhbXMgPSB7IHByb2c6IHRoaXMuX3Byb2cgfTtcblxuICBPYmplY3Qua2V5cyhhY3Rpb24pLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvblByb3BlcnR5KSB7XG4gICAgdmFyIGFjdGlvblZhbHVlID0gYWN0aW9uW2FjdGlvblByb3BlcnR5XTtcblxuICAgIGlmIChhY3Rpb25WYWx1ZSAhPT0gYy5TVVBQUkVTUykge1xuICAgICAgcGFyYW1zW2FjdGlvblByb3BlcnR5XSA9IGFjdGlvblZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKHBhcmFtcy5jaG9pY2VzKSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuY2hvaWNlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHBhcmFtcy5jaG9pY2VzID0gcGFyYW1zLmNob2ljZXMuc3BsaXQoJycpLmpvaW4oJywgJyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHBhcmFtcy5jaG9pY2VzKSkge1xuICAgICAgcGFyYW1zLmNob2ljZXMgPSBwYXJhbXMuY2hvaWNlcy5qb2luKCcsICcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJhbXMuY2hvaWNlcyA9IE9iamVjdC5rZXlzKHBhcmFtcy5jaG9pY2VzKS5qb2luKCcsICcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzcHJpbnRmKHRoaXMuX2dldEhlbHBTdHJpbmcoYWN0aW9uKSwgcGFyYW1zKTtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9zcGxpdExpbmVzID0gZnVuY3Rpb24gKHRleHQsIHdpZHRoKSB7XG4gIHZhciBsaW5lcyA9IFtdO1xuICB2YXIgZGVsaW1pdGVycyA9IFsgJyAnLCAnLicsICcsJywgJyEnLCAnPycgXTtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cCgnWycgKyBkZWxpbWl0ZXJzLmpvaW4oJycpICsgJ11bXicgKyBkZWxpbWl0ZXJzLmpvaW4oJycpICsgJ10qJCcpO1xuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1tcXG5cXHxcXHRdL2csICcgJyk7XG5cbiAgdGV4dCA9IHRleHQudHJpbSgpO1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKHRoaXMuX3doaXRlc3BhY2VNYXRjaGVyLCAnICcpO1xuXG4gIC8vIFdyYXBzIHRoZSBzaW5nbGUgcGFyYWdyYXBoIGluIHRleHQgKGEgc3RyaW5nKSBzbyBldmVyeSBsaW5lXG4gIC8vIGlzIGF0IG1vc3Qgd2lkdGggY2hhcmFjdGVycyBsb25nLlxuICB0ZXh0LnNwbGl0KGMuRU9MKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgaWYgKHdpZHRoID49IGxpbmUubGVuZ3RoKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB3cmFwU3RhcnQgPSAwO1xuICAgIHZhciB3cmFwRW5kID0gd2lkdGg7XG4gICAgdmFyIGRlbGltaXRlckluZGV4ID0gMDtcbiAgICB3aGlsZSAod3JhcEVuZCA8PSBsaW5lLmxlbmd0aCkge1xuICAgICAgaWYgKHdyYXBFbmQgIT09IGxpbmUubGVuZ3RoICYmIGRlbGltaXRlcnMuaW5kZXhPZihsaW5lW3dyYXBFbmRdIDwgLTEpKSB7XG4gICAgICAgIGRlbGltaXRlckluZGV4ID0gKHJlLmV4ZWMobGluZS5zdWJzdHJpbmcod3JhcFN0YXJ0LCB3cmFwRW5kKSkgfHwge30pLmluZGV4O1xuICAgICAgICB3cmFwRW5kID0gd3JhcFN0YXJ0ICsgZGVsaW1pdGVySW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgbGluZXMucHVzaChsaW5lLnN1YnN0cmluZyh3cmFwU3RhcnQsIHdyYXBFbmQpKTtcbiAgICAgIHdyYXBTdGFydCA9IHdyYXBFbmQ7XG4gICAgICB3cmFwRW5kICs9IHdpZHRoO1xuICAgIH1cbiAgICBpZiAod3JhcFN0YXJ0IDwgbGluZS5sZW5ndGgpIHtcbiAgICAgIGxpbmVzLnB1c2gobGluZS5zdWJzdHJpbmcod3JhcFN0YXJ0LCB3cmFwRW5kKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbGluZXM7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZmlsbFRleHQgPSBmdW5jdGlvbiAodGV4dCwgd2lkdGgsIGluZGVudCkge1xuICB2YXIgbGluZXMgPSB0aGlzLl9zcGxpdExpbmVzKHRleHQsIHdpZHRoKTtcbiAgbGluZXMgPSBsaW5lcy5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICByZXR1cm4gaW5kZW50ICsgbGluZTtcbiAgfSk7XG4gIHJldHVybiBsaW5lcy5qb2luKGMuRU9MKTtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9nZXRIZWxwU3RyaW5nID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICByZXR1cm4gYWN0aW9uLmhlbHA7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCAgICA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLy8gQ29uc3RhbnRzXG52YXIgYyA9IHJlcXVpcmUoJy4uL2NvbnN0Jyk7XG5cbnZhciAkJCA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgSGVscEZvcm1hdHRlciA9IHJlcXVpcmUoJy4vZm9ybWF0dGVyLmpzJyk7XG5cbi8qKlxuICogbmV3IFJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlcihvcHRpb25zKVxuICogbmV3IEFyZ3VtZW50UGFyc2VyKHtmb3JtYXR0ZXJDbGFzczogYXJncGFyc2UuUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyLCAuLi59KVxuICpcbiAqIEhlbHAgbWVzc2FnZSBmb3JtYXR0ZXIgd2hpY2ggYWRkcyBkZWZhdWx0IHZhbHVlcyB0byBhcmd1bWVudCBoZWxwLlxuICpcbiAqIE9ubHkgdGhlIG5hbWUgb2YgdGhpcyBjbGFzcyBpcyBjb25zaWRlcmVkIGEgcHVibGljIEFQSS4gQWxsIHRoZSBtZXRob2RzXG4gKiBwcm92aWRlZCBieSB0aGUgY2xhc3MgYXJlIGNvbnNpZGVyZWQgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLlxuICoqL1xuXG5mdW5jdGlvbiBBcmd1bWVudERlZmF1bHRzSGVscEZvcm1hdHRlcihvcHRpb25zKSB7XG4gIEhlbHBGb3JtYXR0ZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxudXRpbC5pbmhlcml0cyhBcmd1bWVudERlZmF1bHRzSGVscEZvcm1hdHRlciwgSGVscEZvcm1hdHRlcik7XG5cbkFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZ2V0SGVscFN0cmluZyA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgdmFyIGhlbHAgPSBhY3Rpb24uaGVscDtcbiAgaWYgKGFjdGlvbi5oZWxwLmluZGV4T2YoJyUoZGVmYXVsdFZhbHVlKXMnKSA9PT0gLTEpIHtcbiAgICBpZiAoYWN0aW9uLmRlZmF1bHRWYWx1ZSAhPT0gYy5TVVBQUkVTUykge1xuICAgICAgdmFyIGRlZmF1bHRpbmdfbmFyZ3MgPSBbIGMuT1BUSU9OQUwsIGMuWkVST19PUl9NT1JFIF07XG4gICAgICBpZiAoYWN0aW9uLmlzT3B0aW9uYWwoKSB8fCAoZGVmYXVsdGluZ19uYXJncy5pbmRleE9mKGFjdGlvbi5uYXJncykgPj0gMCkpIHtcbiAgICAgICAgaGVscCArPSAnIChkZWZhdWx0OiAlKGRlZmF1bHRWYWx1ZSlzKSc7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBoZWxwO1xufTtcblxubW9kdWxlLmV4cG9ydHMuQXJndW1lbnREZWZhdWx0c0hlbHBGb3JtYXR0ZXIgPSBBcmd1bWVudERlZmF1bHRzSGVscEZvcm1hdHRlcjtcblxuLyoqXG4gKiBuZXcgUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyKG9wdGlvbnMpXG4gKiBuZXcgQXJndW1lbnRQYXJzZXIoe2Zvcm1hdHRlckNsYXNzOiBhcmdwYXJzZS5SYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIsIC4uLn0pXG4gKlxuICogSGVscCBtZXNzYWdlIGZvcm1hdHRlciB3aGljaCByZXRhaW5zIGFueSBmb3JtYXR0aW5nIGluIGRlc2NyaXB0aW9ucy5cbiAqXG4gKiBPbmx5IHRoZSBuYW1lIG9mIHRoaXMgY2xhc3MgaXMgY29uc2lkZXJlZCBhIHB1YmxpYyBBUEkuIEFsbCB0aGUgbWV0aG9kc1xuICogcHJvdmlkZWQgYnkgdGhlIGNsYXNzIGFyZSBjb25zaWRlcmVkIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC5cbiAqKi9cblxuZnVuY3Rpb24gUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyKG9wdGlvbnMpIHtcbiAgSGVscEZvcm1hdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG51dGlsLmluaGVyaXRzKFJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlciwgSGVscEZvcm1hdHRlcik7XG5cblJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2ZpbGxUZXh0ID0gZnVuY3Rpb24gKHRleHQsIHdpZHRoLCBpbmRlbnQpIHtcbiAgdmFyIGxpbmVzID0gdGV4dC5zcGxpdCgnXFxuJyk7XG4gIGxpbmVzID0gbGluZXMubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgcmV0dXJuICQkLnRyaW1FbmQoaW5kZW50ICsgbGluZSk7XG4gIH0pO1xuICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59O1xubW9kdWxlLmV4cG9ydHMuUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyID0gUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyO1xuXG4vKipcbiAqIG5ldyBSYXdUZXh0SGVscEZvcm1hdHRlcihvcHRpb25zKVxuICogbmV3IEFyZ3VtZW50UGFyc2VyKHtmb3JtYXR0ZXJDbGFzczogYXJncGFyc2UuUmF3VGV4dEhlbHBGb3JtYXR0ZXIsIC4uLn0pXG4gKlxuICogSGVscCBtZXNzYWdlIGZvcm1hdHRlciB3aGljaCByZXRhaW5zIGZvcm1hdHRpbmcgb2YgYWxsIGhlbHAgdGV4dC5cbiAqXG4gKiBPbmx5IHRoZSBuYW1lIG9mIHRoaXMgY2xhc3MgaXMgY29uc2lkZXJlZCBhIHB1YmxpYyBBUEkuIEFsbCB0aGUgbWV0aG9kc1xuICogcHJvdmlkZWQgYnkgdGhlIGNsYXNzIGFyZSBjb25zaWRlcmVkIGFuIGltcGxlbWVudGF0aW9uIGRldGFpbC5cbiAqKi9cblxuZnVuY3Rpb24gUmF3VGV4dEhlbHBGb3JtYXR0ZXIob3B0aW9ucykge1xuICBSYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxudXRpbC5pbmhlcml0cyhSYXdUZXh0SGVscEZvcm1hdHRlciwgUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyKTtcblxuUmF3VGV4dEhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9zcGxpdExpbmVzID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgcmV0dXJuIHRleHQuc3BsaXQoJ1xcbicpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuUmF3VGV4dEhlbHBGb3JtYXR0ZXIgPSBSYXdUZXh0SGVscEZvcm1hdHRlcjtcbiIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG5mb3JFYWNoKG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKVxuICAgIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xufSk7XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuICAgIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpXG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKVxuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKVxuICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKVxuICAgIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwcm9jZXNzLm5leHRUaWNrKHRoaXMuZW5kLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoICh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59XG4iLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzTG9vc2U7IiwiKGZ1bmN0aW9uKHdpbmRvdykge1xuICAgIHZhciByZSA9IHtcbiAgICAgICAgbm90X3N0cmluZzogL1tec10vLFxuICAgICAgICBudW1iZXI6IC9bZGllZmddLyxcbiAgICAgICAganNvbjogL1tqXS8sXG4gICAgICAgIG5vdF9qc29uOiAvW15qXS8sXG4gICAgICAgIHRleHQ6IC9eW15cXHgyNV0rLyxcbiAgICAgICAgbW9kdWxvOiAvXlxceDI1ezJ9LyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IC9eXFx4MjUoPzooWzEtOV1cXGQqKVxcJHxcXCgoW15cXCldKylcXCkpPyhcXCspPygwfCdbXiRdKT8oLSk/KFxcZCspPyg/OlxcLihcXGQrKSk/KFtiLWdpam9zdXhYXSkvLFxuICAgICAgICBrZXk6IC9eKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGtleV9hY2Nlc3M6IC9eXFwuKFthLXpfXVthLXpfXFxkXSopL2ksXG4gICAgICAgIGluZGV4X2FjY2VzczogL15cXFsoXFxkKylcXF0vLFxuICAgICAgICBzaWduOiAvXltcXCtcXC1dL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNwcmludGYoKSB7XG4gICAgICAgIHZhciBrZXkgPSBhcmd1bWVudHNbMF0sIGNhY2hlID0gc3ByaW50Zi5jYWNoZVxuICAgICAgICBpZiAoIShjYWNoZVtrZXldICYmIGNhY2hlLmhhc093blByb3BlcnR5KGtleSkpKSB7XG4gICAgICAgICAgICBjYWNoZVtrZXldID0gc3ByaW50Zi5wYXJzZShrZXkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNwcmludGYuZm9ybWF0LmNhbGwobnVsbCwgY2FjaGVba2V5XSwgYXJndW1lbnRzKVxuICAgIH1cblxuICAgIHNwcmludGYuZm9ybWF0ID0gZnVuY3Rpb24ocGFyc2VfdHJlZSwgYXJndikge1xuICAgICAgICB2YXIgY3Vyc29yID0gMSwgdHJlZV9sZW5ndGggPSBwYXJzZV90cmVlLmxlbmd0aCwgbm9kZV90eXBlID0gXCJcIiwgYXJnLCBvdXRwdXQgPSBbXSwgaSwgaywgbWF0Y2gsIHBhZCwgcGFkX2NoYXJhY3RlciwgcGFkX2xlbmd0aCwgaXNfcG9zaXRpdmUgPSB0cnVlLCBzaWduID0gXCJcIlxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdHJlZV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbm9kZV90eXBlID0gZ2V0X3R5cGUocGFyc2VfdHJlZVtpXSlcbiAgICAgICAgICAgIGlmIChub2RlX3R5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbb3V0cHV0Lmxlbmd0aF0gPSBwYXJzZV90cmVlW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlX3R5cGUgPT09IFwiYXJyYXlcIikge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gcGFyc2VfdHJlZVtpXSAvLyBjb252ZW5pZW5jZSBwdXJwb3NlcyBvbmx5XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoWzJdKSB7IC8vIGtleXdvcmQgYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3JdXG4gICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBtYXRjaFsyXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhcmcuaGFzT3duUHJvcGVydHkobWF0Y2hbMl1ba10pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHNwcmludGYoXCJbc3ByaW50Zl0gcHJvcGVydHkgJyVzJyBkb2VzIG5vdCBleGlzdFwiLCBtYXRjaFsyXVtrXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmdbbWF0Y2hbMl1ba11dXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWF0Y2hbMV0pIHsgLy8gcG9zaXRpb25hbCBhcmd1bWVudCAoZXhwbGljaXQpXG4gICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ3ZbbWF0Y2hbMV1dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChpbXBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndltjdXJzb3IrK11cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoZ2V0X3R5cGUoYXJnKSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubm90X3N0cmluZy50ZXN0KG1hdGNoWzhdKSAmJiByZS5ub3RfanNvbi50ZXN0KG1hdGNoWzhdKSAmJiAoZ2V0X3R5cGUoYXJnKSAhPSBcIm51bWJlclwiICYmIGlzTmFOKGFyZykpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3Ioc3ByaW50ZihcIltzcHJpbnRmXSBleHBlY3RpbmcgbnVtYmVyIGJ1dCBmb3VuZCAlc1wiLCBnZXRfdHlwZShhcmcpKSlcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocmUubnVtYmVyLnRlc3QobWF0Y2hbOF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX3Bvc2l0aXZlID0gYXJnID49IDBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1hdGNoWzhdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJiXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudG9TdHJpbmcoMilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYXJnKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gcGFyc2VJbnQoYXJnLCAxMClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImpcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IEpTT04uc3RyaW5naWZ5KGFyZywgbnVsbCwgbWF0Y2hbNl0gPyBwYXJzZUludChtYXRjaFs2XSkgOiAwKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gbWF0Y2hbN10gPyBhcmcudG9FeHBvbmVudGlhbChtYXRjaFs3XSkgOiBhcmcudG9FeHBvbmVudGlhbCgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBtYXRjaFs3XSA/IHBhcnNlRmxvYXQoYXJnKS50b0ZpeGVkKG1hdGNoWzddKSA6IHBhcnNlRmxvYXQoYXJnKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZ1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gbWF0Y2hbN10gPyBwYXJzZUZsb2F0KGFyZykudG9QcmVjaXNpb24obWF0Y2hbN10pIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcudG9TdHJpbmcoOClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9ICgoYXJnID0gU3RyaW5nKGFyZykpICYmIG1hdGNoWzddID8gYXJnLnN1YnN0cmluZygwLCBtYXRjaFs3XSkgOiBhcmcpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcgPj4+IDBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygxNilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmUuanNvbi50ZXN0KG1hdGNoWzhdKSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbb3V0cHV0Lmxlbmd0aF0gPSBhcmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChtYXRjaFs4XSkgJiYgKCFpc19wb3NpdGl2ZSB8fCBtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSBpc19wb3NpdGl2ZSA/IFwiK1wiIDogXCItXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygpLnJlcGxhY2UocmUuc2lnbiwgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ24gPSBcIlwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcGFkX2NoYXJhY3RlciA9IG1hdGNoWzRdID8gbWF0Y2hbNF0gPT09IFwiMFwiID8gXCIwXCIgOiBtYXRjaFs0XS5jaGFyQXQoMSkgOiBcIiBcIlxuICAgICAgICAgICAgICAgICAgICBwYWRfbGVuZ3RoID0gbWF0Y2hbNl0gLSAoc2lnbiArIGFyZykubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIHBhZCA9IG1hdGNoWzZdID8gKHBhZF9sZW5ndGggPiAwID8gc3RyX3JlcGVhdChwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoKSA6IFwiXCIpIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICBvdXRwdXRbb3V0cHV0Lmxlbmd0aF0gPSBtYXRjaFs1XSA/IHNpZ24gKyBhcmcgKyBwYWQgOiAocGFkX2NoYXJhY3RlciA9PT0gXCIwXCIgPyBzaWduICsgcGFkICsgYXJnIDogcGFkICsgc2lnbiArIGFyZylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKFwiXCIpXG4gICAgfVxuXG4gICAgc3ByaW50Zi5jYWNoZSA9IHt9XG5cbiAgICBzcHJpbnRmLnBhcnNlID0gZnVuY3Rpb24oZm10KSB7XG4gICAgICAgIHZhciBfZm10ID0gZm10LCBtYXRjaCA9IFtdLCBwYXJzZV90cmVlID0gW10sIGFyZ19uYW1lcyA9IDBcbiAgICAgICAgd2hpbGUgKF9mbXQpIHtcbiAgICAgICAgICAgIGlmICgobWF0Y2ggPSByZS50ZXh0LmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZVtwYXJzZV90cmVlLmxlbmd0aF0gPSBtYXRjaFswXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUubW9kdWxvLmV4ZWMoX2ZtdCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZVtwYXJzZV90cmVlLmxlbmd0aF0gPSBcIiVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKG1hdGNoID0gcmUucGxhY2Vob2xkZXIuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDFcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkX2xpc3QgPSBbXSwgcmVwbGFjZW1lbnRfZmllbGQgPSBtYXRjaFsyXSwgZmllbGRfbWF0Y2ggPSBbXVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGZpZWxkX21hdGNoID0gcmUua2V5LmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdFtmaWVsZF9saXN0Lmxlbmd0aF0gPSBmaWVsZF9tYXRjaFsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChyZXBsYWNlbWVudF9maWVsZCA9IHJlcGxhY2VtZW50X2ZpZWxkLnN1YnN0cmluZyhmaWVsZF9tYXRjaFswXS5sZW5ndGgpKSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXlfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0W2ZpZWxkX2xpc3QubGVuZ3RoXSA9IGZpZWxkX21hdGNoWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmluZGV4X2FjY2Vzcy5leGVjKHJlcGxhY2VtZW50X2ZpZWxkKSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRfbGlzdFtmaWVsZF9saXN0Lmxlbmd0aF0gPSBmaWVsZF9tYXRjaFsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW3NwcmludGZdIGZhaWxlZCB0byBwYXJzZSBuYW1lZCBhcmd1bWVudCBrZXlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleVwiKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoWzJdID0gZmllbGRfbGlzdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnX25hbWVzIHw9IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFyZ19uYW1lcyA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJbc3ByaW50Zl0gbWl4aW5nIHBvc2l0aW9uYWwgYW5kIG5hbWVkIHBsYWNlaG9sZGVycyBpcyBub3QgKHlldCkgc3VwcG9ydGVkXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcnNlX3RyZWVbcGFyc2VfdHJlZS5sZW5ndGhdID0gbWF0Y2hcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIltzcHJpbnRmXSB1bmV4cGVjdGVkIHBsYWNlaG9sZGVyXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfZm10ID0gX2ZtdC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZV90cmVlXG4gICAgfVxuXG4gICAgdmFyIHZzcHJpbnRmID0gZnVuY3Rpb24oZm10LCBhcmd2LCBfYXJndikge1xuICAgICAgICBfYXJndiA9IChhcmd2IHx8IFtdKS5zbGljZSgwKVxuICAgICAgICBfYXJndi5zcGxpY2UoMCwgMCwgZm10KVxuICAgICAgICByZXR1cm4gc3ByaW50Zi5hcHBseShudWxsLCBfYXJndilcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoZWxwZXJzXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0X3R5cGUodmFyaWFibGUpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YXJpYWJsZSkuc2xpY2UoOCwgLTEpLnRvTG93ZXJDYXNlKClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJfcmVwZWF0KGlucHV0LCBtdWx0aXBsaWVyKSB7XG4gICAgICAgIHJldHVybiBBcnJheShtdWx0aXBsaWVyICsgMSkuam9pbihpbnB1dClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBleHBvcnQgdG8gZWl0aGVyIGJyb3dzZXIgb3Igbm9kZS5qc1xuICAgICAqL1xuICAgIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBleHBvcnRzLnNwcmludGYgPSBzcHJpbnRmXG4gICAgICAgIGV4cG9ydHMudnNwcmludGYgPSB2c3ByaW50ZlxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgd2luZG93LnNwcmludGYgPSBzcHJpbnRmXG4gICAgICAgIHdpbmRvdy52c3ByaW50ZiA9IHZzcHJpbnRmXG5cbiAgICAgICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3ByaW50Zjogc3ByaW50ZixcbiAgICAgICAgICAgICAgICAgICAgdnNwcmludGY6IHZzcHJpbnRmXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cbn0pKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogd2luZG93KTtcbiIsIi8qKiBpbnRlcm5hbFxuICogY2xhc3MgQWN0aW9uQ29udGFpbmVyXG4gKlxuICogQWN0aW9uIGNvbnRhaW5lci4gUGFyZW50IGZvciBbW0FyZ3VtZW50UGFyc2VyXV0gYW5kIFtbQXJndW1lbnRHcm91cF1dXG4gKiovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGZvcm1hdCA9IHJlcXVpcmUoJ3V0aWwnKS5mb3JtYXQ7XG5cbi8vIENvbnN0YW50c1xudmFyIGMgPSByZXF1aXJlKCcuL2NvbnN0Jyk7XG5cbnZhciAkJCA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLy9BY3Rpb25zXG52YXIgQWN0aW9uSGVscCA9IHJlcXVpcmUoJy4vYWN0aW9uL2hlbHAnKTtcbnZhciBBY3Rpb25BcHBlbmQgPSByZXF1aXJlKCcuL2FjdGlvbi9hcHBlbmQnKTtcbnZhciBBY3Rpb25BcHBlbmRDb25zdGFudCA9IHJlcXVpcmUoJy4vYWN0aW9uL2FwcGVuZC9jb25zdGFudCcpO1xudmFyIEFjdGlvbkNvdW50ID0gcmVxdWlyZSgnLi9hY3Rpb24vY291bnQnKTtcbnZhciBBY3Rpb25TdG9yZSA9IHJlcXVpcmUoJy4vYWN0aW9uL3N0b3JlJyk7XG52YXIgQWN0aW9uU3RvcmVDb25zdGFudCA9IHJlcXVpcmUoJy4vYWN0aW9uL3N0b3JlL2NvbnN0YW50Jyk7XG52YXIgQWN0aW9uU3RvcmVUcnVlID0gcmVxdWlyZSgnLi9hY3Rpb24vc3RvcmUvdHJ1ZScpO1xudmFyIEFjdGlvblN0b3JlRmFsc2UgPSByZXF1aXJlKCcuL2FjdGlvbi9zdG9yZS9mYWxzZScpO1xudmFyIEFjdGlvblZlcnNpb24gPSByZXF1aXJlKCcuL2FjdGlvbi92ZXJzaW9uJyk7XG52YXIgQWN0aW9uU3VicGFyc2VycyA9IHJlcXVpcmUoJy4vYWN0aW9uL3N1YnBhcnNlcnMnKTtcblxuLy8gRXJyb3JzXG52YXIgYXJndW1lbnRFcnJvckhlbHBlciA9IHJlcXVpcmUoJy4vYXJndW1lbnQvZXJyb3InKTtcblxuLyoqXG4gKiBuZXcgQWN0aW9uQ29udGFpbmVyKG9wdGlvbnMpXG4gKlxuICogQWN0aW9uIGNvbnRhaW5lci4gUGFyZW50IGZvciBbW0FyZ3VtZW50UGFyc2VyXV0gYW5kIFtbQXJndW1lbnRHcm91cF1dXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqXG4gKiAtIGBkZXNjcmlwdGlvbmAgLS0gQSBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoZSBwcm9ncmFtIGRvZXNcbiAqIC0gYHByZWZpeENoYXJzYCAgLS0gQ2hhcmFjdGVycyB0aGF0IHByZWZpeCBvcHRpb25hbCBhcmd1bWVudHNcbiAqIC0gYGFyZ3VtZW50RGVmYXVsdGAgIC0tIFRoZSBkZWZhdWx0IHZhbHVlIGZvciBhbGwgYXJndW1lbnRzXG4gKiAtIGBjb25mbGljdEhhbmRsZXJgIC0tIFRoZSBjb25mbGljdCBoYW5kbGVyIHRvIHVzZSBmb3IgZHVwbGljYXRlIGFyZ3VtZW50c1xuICoqL1xudmFyIEFjdGlvbkNvbnRhaW5lciA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uQ29udGFpbmVyKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdGhpcy5kZXNjcmlwdGlvbiA9IG9wdGlvbnMuZGVzY3JpcHRpb247XG4gIHRoaXMuYXJndW1lbnREZWZhdWx0ID0gb3B0aW9ucy5hcmd1bWVudERlZmF1bHQ7XG4gIHRoaXMucHJlZml4Q2hhcnMgPSBvcHRpb25zLnByZWZpeENoYXJzIHx8ICcnO1xuICB0aGlzLmNvbmZsaWN0SGFuZGxlciA9IG9wdGlvbnMuY29uZmxpY3RIYW5kbGVyO1xuXG4gIC8vIHNldCB1cCByZWdpc3RyaWVzXG4gIHRoaXMuX3JlZ2lzdHJpZXMgPSB7fTtcblxuICAvLyByZWdpc3RlciBhY3Rpb25zXG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsIG51bGwsIEFjdGlvblN0b3JlKTtcbiAgdGhpcy5yZWdpc3RlcignYWN0aW9uJywgJ3N0b3JlJywgQWN0aW9uU3RvcmUpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnc3RvcmVDb25zdCcsIEFjdGlvblN0b3JlQ29uc3RhbnQpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnc3RvcmVUcnVlJywgQWN0aW9uU3RvcmVUcnVlKTtcbiAgdGhpcy5yZWdpc3RlcignYWN0aW9uJywgJ3N0b3JlRmFsc2UnLCBBY3Rpb25TdG9yZUZhbHNlKTtcbiAgdGhpcy5yZWdpc3RlcignYWN0aW9uJywgJ2FwcGVuZCcsIEFjdGlvbkFwcGVuZCk7XG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsICdhcHBlbmRDb25zdCcsIEFjdGlvbkFwcGVuZENvbnN0YW50KTtcbiAgdGhpcy5yZWdpc3RlcignYWN0aW9uJywgJ2NvdW50JywgQWN0aW9uQ291bnQpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnaGVscCcsIEFjdGlvbkhlbHApO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAndmVyc2lvbicsIEFjdGlvblZlcnNpb24pO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAncGFyc2VycycsIEFjdGlvblN1YnBhcnNlcnMpO1xuXG4gIC8vIHJhaXNlIGFuIGV4Y2VwdGlvbiBpZiB0aGUgY29uZmxpY3QgaGFuZGxlciBpcyBpbnZhbGlkXG4gIHRoaXMuX2dldEhhbmRsZXIoKTtcblxuICAvLyBhY3Rpb24gc3RvcmFnZVxuICB0aGlzLl9hY3Rpb25zID0gW107XG4gIHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnMgPSB7fTtcblxuICAvLyBncm91cHNcbiAgdGhpcy5fYWN0aW9uR3JvdXBzID0gW107XG4gIHRoaXMuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzID0gW107XG5cbiAgLy8gZGVmYXVsdHMgc3RvcmFnZVxuICB0aGlzLl9kZWZhdWx0cyA9IHt9O1xuXG4gIC8vIGRldGVybWluZXMgd2hldGhlciBhbiBcIm9wdGlvblwiIGxvb2tzIGxpa2UgYSBuZWdhdGl2ZSBudW1iZXJcbiAgLy8gLTEsIC0xLjUgLTVlKzRcbiAgdGhpcy5fcmVnZXhwTmVnYXRpdmVOdW1iZXIgPSBuZXcgUmVnRXhwKCdeWy1dP1swLTldKlxcXFwuP1swLTldKyhbZUVdWy0rXT9bMC05XSspPyQnKTtcblxuICAvLyB3aGV0aGVyIG9yIG5vdCB0aGVyZSBhcmUgYW55IG9wdGlvbmFscyB0aGF0IGxvb2sgbGlrZSBuZWdhdGl2ZVxuICAvLyBudW1iZXJzIC0tIHVzZXMgYSBsaXN0IHNvIGl0IGNhbiBiZSBzaGFyZWQgYW5kIGVkaXRlZFxuICB0aGlzLl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscyA9IFtdO1xufTtcblxuLy8gR3JvdXBzIG11c3QgYmUgcmVxdWlyZWQsIHRoZW4gQWN0aW9uQ29udGFpbmVyIGFscmVhZHkgZGVmaW5lZFxudmFyIEFyZ3VtZW50R3JvdXAgPSByZXF1aXJlKCcuL2FyZ3VtZW50L2dyb3VwJyk7XG52YXIgTXV0dWFsbHlFeGNsdXNpdmVHcm91cCA9IHJlcXVpcmUoJy4vYXJndW1lbnQvZXhjbHVzaXZlJyk7XG5cbi8vXG4vLyBSZWdpc3RyYXRpb24gbWV0aG9kc1xuLy9cblxuLyoqXG4gKiBBY3Rpb25Db250YWluZXIjcmVnaXN0ZXIocmVnaXN0cnlOYW1lLCB2YWx1ZSwgb2JqZWN0KSAtPiBWb2lkXG4gKiAtIHJlZ2lzdHJ5TmFtZSAoU3RyaW5nKSA6IG9iamVjdCB0eXBlIGFjdGlvbnx0eXBlXG4gKiAtIHZhbHVlIChzdHJpbmcpIDoga2V5d29yZFxuICogLSBvYmplY3QgKE9iamVjdHxGdW5jdGlvbikgOiBoYW5kbGVyXG4gKlxuICogIFJlZ2lzdGVyIGhhbmRsZXJzXG4gKiovXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHJlZ2lzdHJ5TmFtZSwgdmFsdWUsIG9iamVjdCkge1xuICB0aGlzLl9yZWdpc3RyaWVzW3JlZ2lzdHJ5TmFtZV0gPSB0aGlzLl9yZWdpc3RyaWVzW3JlZ2lzdHJ5TmFtZV0gfHwge307XG4gIHRoaXMuX3JlZ2lzdHJpZXNbcmVnaXN0cnlOYW1lXVt2YWx1ZV0gPSBvYmplY3Q7XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9yZWdpc3RyeUdldCA9IGZ1bmN0aW9uIChyZWdpc3RyeU5hbWUsIHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgZGVmYXVsdFZhbHVlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gdGhpcy5fcmVnaXN0cmllc1tyZWdpc3RyeU5hbWVdW3ZhbHVlXSB8fCBkZWZhdWx0VmFsdWU7XG59O1xuXG4vL1xuLy8gTmFtZXNwYWNlIGRlZmF1bHQgYWNjZXNzb3IgbWV0aG9kc1xuLy9cblxuLyoqXG4gKiBBY3Rpb25Db250YWluZXIjc2V0RGVmYXVsdHMob3B0aW9ucykgLT4gVm9pZFxuICogLSBvcHRpb25zIChvYmplY3QpOmhhc2ggb2Ygb3B0aW9ucyBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiBTZXQgZGVmYXVsdHNcbiAqKi9cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgZm9yICh2YXIgcHJvcGVydHkgaW4gb3B0aW9ucykge1xuICAgIGlmICgkJC5oYXMob3B0aW9ucywgcHJvcGVydHkpKSB7XG4gICAgICB0aGlzLl9kZWZhdWx0c1twcm9wZXJ0eV0gPSBvcHRpb25zW3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGVzZSBkZWZhdWx0cyBtYXRjaCBhbnkgZXhpc3RpbmcgYXJndW1lbnRzLCByZXBsYWNlIHRoZSBwcmV2aW91c1xuICAvLyBkZWZhdWx0IG9uIHRoZSBvYmplY3Qgd2l0aCB0aGUgbmV3IG9uZVxuICB0aGlzLl9hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGlmICgkJC5oYXMob3B0aW9ucywgYWN0aW9uLmRlc3QpKSB7XG4gICAgICBhY3Rpb24uZGVmYXVsdFZhbHVlID0gb3B0aW9uc1thY3Rpb24uZGVzdF07XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxuICogQWN0aW9uQ29udGFpbmVyI2dldERlZmF1bHQoZGVzdCkgLT4gTWl4ZWRcbiAqIC0gZGVzdCAoc3RyaW5nKTogYWN0aW9uIGRlc3RpbmF0aW9uXG4gKlxuICogUmV0dXJuIGFjdGlvbiBkZWZhdWx0IHZhbHVlXG4gKiovXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLmdldERlZmF1bHQgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgcmVzdWx0ID0gJCQuaGFzKHRoaXMuX2RlZmF1bHRzLCBkZXN0KSA/IHRoaXMuX2RlZmF1bHRzW2Rlc3RdIDogbnVsbDtcblxuICB0aGlzLl9hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGlmIChhY3Rpb24uZGVzdCA9PT0gZGVzdCAmJiAkJC5oYXMoYWN0aW9uLCAnZGVmYXVsdFZhbHVlJykpIHtcbiAgICAgIHJlc3VsdCA9IGFjdGlvbi5kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcbi8vXG4vLyBBZGRpbmcgYXJndW1lbnQgYWN0aW9uc1xuLy9cblxuLyoqXG4gKiBBY3Rpb25Db250YWluZXIjYWRkQXJndW1lbnQoYXJncywgb3B0aW9ucykgLT4gT2JqZWN0XG4gKiAtIGFyZ3MgKFN0cmluZ3xBcnJheSk6IGFyZ3VtZW50IGtleSwgb3IgYXJyYXkgb2YgYXJndW1lbnQga2V5c1xuICogLSBvcHRpb25zIChPYmplY3QpOiBhY3Rpb24gb2JqZWN0cyBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiAjIyMjIEV4YW1wbGVzXG4gKiAtIGFkZEFyZ3VtZW50KFsgJy1mJywgJy0tZm9vJyBdLCB7IGFjdGlvbjogJ3N0b3JlJywgZGVmYXVsdFZhbHVlOiAxLCAuLi4gfSlcbiAqIC0gYWRkQXJndW1lbnQoWyAnYmFyJyBdLCB7IGFjdGlvbjogJ3N0b3JlJywgbmFyZ3M6IDEsIC4uLiB9KVxuICogLSBhZGRBcmd1bWVudCgnLS1iYXonLCB7IGFjdGlvbjogJ3N0b3JlJywgbmFyZ3M6IDEsIC4uLiB9KVxuICoqL1xuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5hZGRBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmdzLCBvcHRpb25zKSB7XG4gIGFyZ3MgPSBhcmdzO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJncyA9IFsgYXJncyBdO1xuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FkZEFyZ3VtZW50IGZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhIHN0cmluZyBvciBhbiBhcnJheScpO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FkZEFyZ3VtZW50IHNlY29uZCBhcmd1bWVudCBzaG91bGQgYmUgYSBoYXNoJyk7XG4gIH1cblxuICAvLyBpZiBubyBwb3NpdGlvbmFsIGFyZ3MgYXJlIHN1cHBsaWVkIG9yIG9ubHkgb25lIGlzIHN1cHBsaWVkIGFuZFxuICAvLyBpdCBkb2Vzbid0IGxvb2sgbGlrZSBhbiBvcHRpb24gc3RyaW5nLCBwYXJzZSBhIHBvc2l0aW9uYWwgYXJndW1lbnRcbiAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoID09PSAxICYmIHRoaXMucHJlZml4Q2hhcnMuaW5kZXhPZihhcmdzWzBdWzBdKSA8IDApIHtcbiAgICBpZiAoYXJncyAmJiAhIW9wdGlvbnMuZGVzdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZXN0IHN1cHBsaWVkIHR3aWNlIGZvciBwb3NpdGlvbmFsIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSB0aGlzLl9nZXRQb3NpdGlvbmFsKGFyZ3MsIG9wdGlvbnMpO1xuXG4gICAgLy8gb3RoZXJ3aXNlLCB3ZSdyZSBhZGRpbmcgYW4gb3B0aW9uYWwgYXJndW1lbnRcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gdGhpcy5fZ2V0T3B0aW9uYWwoYXJncywgb3B0aW9ucyk7XG4gIH1cblxuICAvLyBpZiBubyBkZWZhdWx0IHdhcyBzdXBwbGllZCwgdXNlIHRoZSBwYXJzZXItbGV2ZWwgZGVmYXVsdFxuICBpZiAodHlwZW9mIG9wdGlvbnMuZGVmYXVsdFZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBkZXN0ID0gb3B0aW9ucy5kZXN0O1xuICAgIGlmICgkJC5oYXModGhpcy5fZGVmYXVsdHMsIGRlc3QpKSB7XG4gICAgICBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IHRoaXMuX2RlZmF1bHRzW2Rlc3RdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuYXJndW1lbnREZWZhdWx0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgb3B0aW9ucy5kZWZhdWx0VmFsdWUgPSB0aGlzLmFyZ3VtZW50RGVmYXVsdDtcbiAgICB9XG4gIH1cblxuICAvLyBjcmVhdGUgdGhlIGFjdGlvbiBvYmplY3QsIGFuZCBhZGQgaXQgdG8gdGhlIHBhcnNlclxuICB2YXIgQWN0aW9uQ2xhc3MgPSB0aGlzLl9wb3BBY3Rpb25DbGFzcyhvcHRpb25zKTtcbiAgaWYgKHR5cGVvZiBBY3Rpb25DbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ1Vua25vd24gYWN0aW9uIFwiJXNcIi4nLCBBY3Rpb25DbGFzcykpO1xuICB9XG4gIHZhciBhY3Rpb24gPSBuZXcgQWN0aW9uQ2xhc3Mob3B0aW9ucyk7XG5cbiAgLy8gdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGFjdGlvbiB0eXBlIGlzIG5vdCBjYWxsYWJsZVxuICB2YXIgdHlwZUZ1bmN0aW9uID0gdGhpcy5fcmVnaXN0cnlHZXQoJ3R5cGUnLCBhY3Rpb24udHlwZSwgYWN0aW9uLnR5cGUpO1xuICBpZiAodHlwZW9mIHR5cGVGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ1wiJXNcIiBpcyBub3QgY2FsbGFibGUnLCB0eXBlRnVuY3Rpb24pKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLl9hZGRBY3Rpb24oYWN0aW9uKTtcbn07XG5cbi8qKlxuICogQWN0aW9uQ29udGFpbmVyI2FkZEFyZ3VtZW50R3JvdXAob3B0aW9ucykgLT4gQXJndW1lbnRHcm91cFxuICogLSBvcHRpb25zIChPYmplY3QpOiBoYXNoIG9mIG9wdGlvbnMgc2VlIFtbQXJndW1lbnRHcm91cC5uZXddXVxuICpcbiAqIENyZWF0ZSBuZXcgYXJndW1lbnRzIGdyb3Vwc1xuICoqL1xuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5hZGRBcmd1bWVudEdyb3VwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGdyb3VwID0gbmV3IEFyZ3VtZW50R3JvdXAodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX2FjdGlvbkdyb3Vwcy5wdXNoKGdyb3VwKTtcbiAgcmV0dXJuIGdyb3VwO1xufTtcblxuLyoqXG4gKiBBY3Rpb25Db250YWluZXIjYWRkTXV0dWFsbHlFeGNsdXNpdmVHcm91cChvcHRpb25zKSAtPiBBcmd1bWVudEdyb3VwXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHtyZXF1aXJlZDogZmFsc2V9XG4gKlxuICogQ3JlYXRlIG5ldyBtdXR1YWwgZXhjbHVzaXZlIGdyb3Vwc1xuICoqL1xuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5hZGRNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgdmFyIGdyb3VwID0gbmV3IE11dHVhbGx5RXhjbHVzaXZlR3JvdXAodGhpcywgb3B0aW9ucyk7XG4gIHRoaXMuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzLnB1c2goZ3JvdXApO1xuICByZXR1cm4gZ3JvdXA7XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9hZGRBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICAvLyByZXNvbHZlIGFueSBjb25mbGljdHNcbiAgdGhpcy5fY2hlY2tDb25mbGljdChhY3Rpb24pO1xuXG4gIC8vIGFkZCB0byBhY3Rpb25zIGxpc3RcbiAgdGhpcy5fYWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gIGFjdGlvbi5jb250YWluZXIgPSB0aGlzO1xuXG4gIC8vIGluZGV4IHRoZSBhY3Rpb24gYnkgYW55IG9wdGlvbiBzdHJpbmdzIGl0IGhhc1xuICBhY3Rpb24ub3B0aW9uU3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25TdHJpbmcpIHtcbiAgICBzZWxmLl9vcHRpb25TdHJpbmdBY3Rpb25zW29wdGlvblN0cmluZ10gPSBhY3Rpb247XG4gIH0pO1xuXG4gIC8vIHNldCB0aGUgZmxhZyBpZiBhbnkgb3B0aW9uIHN0cmluZ3MgbG9vayBsaWtlIG5lZ2F0aXZlIG51bWJlcnNcbiAgYWN0aW9uLm9wdGlvblN0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uU3RyaW5nKSB7XG4gICAgaWYgKG9wdGlvblN0cmluZy5tYXRjaChzZWxmLl9yZWdleHBOZWdhdGl2ZU51bWJlcikpIHtcbiAgICAgIGlmICghc2VsZi5faGFzTmVnYXRpdmVOdW1iZXJPcHRpb25hbHMuc29tZShCb29sZWFuKSkge1xuICAgICAgICBzZWxmLl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscy5wdXNoKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gcmV0dXJuIHRoZSBjcmVhdGVkIGFjdGlvblxuICByZXR1cm4gYWN0aW9uO1xufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fcmVtb3ZlQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICB2YXIgYWN0aW9uSW5kZXggPSB0aGlzLl9hY3Rpb25zLmluZGV4T2YoYWN0aW9uKTtcbiAgaWYgKGFjdGlvbkluZGV4ID49IDApIHtcbiAgICB0aGlzLl9hY3Rpb25zLnNwbGljZShhY3Rpb25JbmRleCwgMSk7XG4gIH1cbn07XG5cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuX2FkZENvbnRhaW5lckFjdGlvbnMgPSBmdW5jdGlvbiAoY29udGFpbmVyKSB7XG4gIC8vIGNvbGxlY3QgZ3JvdXBzIGJ5IHRpdGxlc1xuICB2YXIgdGl0bGVHcm91cE1hcCA9IHt9O1xuICB0aGlzLl9hY3Rpb25Hcm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICBpZiAodGl0bGVHcm91cE1hcFtncm91cC50aXRsZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ0Nhbm5vdCBtZXJnZSBhY3Rpb25zIC0gdHdvIGdyb3VwcyBhcmUgbmFtZWQgXCIlc1wiLicsIGdyb3VwLnRpdGxlKSk7XG4gICAgfVxuICAgIHRpdGxlR3JvdXBNYXBbZ3JvdXAudGl0bGVdID0gZ3JvdXA7XG4gIH0pO1xuXG4gIC8vIG1hcCBlYWNoIGFjdGlvbiB0byBpdHMgZ3JvdXBcbiAgdmFyIGdyb3VwTWFwID0ge307XG4gIGZ1bmN0aW9uIGFjdGlvbkhhc2goYWN0aW9uKSB7XG4gICAgLy8gdW5pcXVlIChob3BlZnVsbHk/KSBzdHJpbmcgc3VpdGFibGUgYXMgZGljdGlvbmFyeSBrZXlcbiAgICByZXR1cm4gYWN0aW9uLmdldE5hbWUoKTtcbiAgfVxuICBjb250YWluZXIuX2FjdGlvbkdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xuICAgIC8vIGlmIGEgZ3JvdXAgd2l0aCB0aGUgdGl0bGUgZXhpc3RzLCB1c2UgdGhhdCwgb3RoZXJ3aXNlXG4gICAgLy8gY3JlYXRlIGEgbmV3IGdyb3VwIG1hdGNoaW5nIHRoZSBjb250YWluZXIncyBncm91cFxuICAgIGlmICghdGl0bGVHcm91cE1hcFtncm91cC50aXRsZV0pIHtcbiAgICAgIHRpdGxlR3JvdXBNYXBbZ3JvdXAudGl0bGVdID0gdGhpcy5hZGRBcmd1bWVudEdyb3VwKHtcbiAgICAgICAgdGl0bGU6IGdyb3VwLnRpdGxlLFxuICAgICAgICBkZXNjcmlwdGlvbjogZ3JvdXAuZGVzY3JpcHRpb25cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIG1hcCB0aGUgYWN0aW9ucyB0byB0aGVpciBuZXcgZ3JvdXBcbiAgICBncm91cC5fZ3JvdXBBY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgZ3JvdXBNYXBbYWN0aW9uSGFzaChhY3Rpb24pXSA9IHRpdGxlR3JvdXBNYXBbZ3JvdXAudGl0bGVdO1xuICAgIH0pO1xuICB9LCB0aGlzKTtcblxuICAvLyBhZGQgY29udGFpbmVyJ3MgbXV0dWFsbHkgZXhjbHVzaXZlIGdyb3Vwc1xuICAvLyBOT1RFOiBpZiBhZGRfbXV0dWFsbHlfZXhjbHVzaXZlX2dyb3VwIGV2ZXIgZ2FpbnMgdGl0bGU9IGFuZFxuICAvLyBkZXNjcmlwdGlvbj0gdGhlbiB0aGlzIGNvZGUgd2lsbCBuZWVkIHRvIGJlIGV4cGFuZGVkIGFzIGFib3ZlXG4gIHZhciBtdXRleEdyb3VwO1xuICBjb250YWluZXIuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgbXV0ZXhHcm91cCA9IHRoaXMuYWRkTXV0dWFsbHlFeGNsdXNpdmVHcm91cCh7XG4gICAgICByZXF1aXJlZDogZ3JvdXAucmVxdWlyZWRcbiAgICB9KTtcbiAgICAvLyBtYXAgdGhlIGFjdGlvbnMgdG8gdGhlaXIgbmV3IG11dGV4IGdyb3VwXG4gICAgZ3JvdXAuX2dyb3VwQWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgIGdyb3VwTWFwW2FjdGlvbkhhc2goYWN0aW9uKV0gPSBtdXRleEdyb3VwO1xuICAgIH0pO1xuICB9LCB0aGlzKTsgIC8vIGZvckVhY2ggdGFrZXMgYSAndGhpcycgYXJndW1lbnRcblxuICAvLyBhZGQgYWxsIGFjdGlvbnMgdG8gdGhpcyBjb250YWluZXIgb3IgdGhlaXIgZ3JvdXBcbiAgY29udGFpbmVyLl9hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHZhciBrZXkgPSBhY3Rpb25IYXNoKGFjdGlvbik7XG4gICAgaWYgKGdyb3VwTWFwW2tleV0pIHtcbiAgICAgIGdyb3VwTWFwW2tleV0uX2FkZEFjdGlvbihhY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9hZGRBY3Rpb24oYWN0aW9uKTtcbiAgICB9XG4gIH0pO1xufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0UG9zaXRpb25hbCA9IGZ1bmN0aW9uIChkZXN0LCBvcHRpb25zKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGRlc3QpKSB7XG4gICAgZGVzdCA9IGRlc3RbMF07XG4gIH1cbiAgLy8gbWFrZSBzdXJlIHJlcXVpcmVkIGlzIG5vdCBzcGVjaWZpZWRcbiAgaWYgKG9wdGlvbnMucmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVxdWlyZWRcIiBpcyBhbiBpbnZhbGlkIGFyZ3VtZW50IGZvciBwb3NpdGlvbmFscy4nKTtcbiAgfVxuXG4gIC8vIG1hcmsgcG9zaXRpb25hbCBhcmd1bWVudHMgYXMgcmVxdWlyZWQgaWYgYXQgbGVhc3Qgb25lIGlzXG4gIC8vIGFsd2F5cyByZXF1aXJlZFxuICBpZiAob3B0aW9ucy5uYXJncyAhPT0gYy5PUFRJT05BTCAmJiBvcHRpb25zLm5hcmdzICE9PSBjLlpFUk9fT1JfTU9SRSkge1xuICAgIG9wdGlvbnMucmVxdWlyZWQgPSB0cnVlO1xuICB9XG4gIGlmIChvcHRpb25zLm5hcmdzID09PSBjLlpFUk9fT1JfTU9SRSAmJiB0eXBlb2Ygb3B0aW9ucy5kZWZhdWx0VmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgb3B0aW9ucy5yZXF1aXJlZCA9IHRydWU7XG4gIH1cblxuICAvLyByZXR1cm4gdGhlIGtleXdvcmQgYXJndW1lbnRzIHdpdGggbm8gb3B0aW9uIHN0cmluZ3NcbiAgb3B0aW9ucy5kZXN0ID0gZGVzdDtcbiAgb3B0aW9ucy5vcHRpb25TdHJpbmdzID0gW107XG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0T3B0aW9uYWwgPSBmdW5jdGlvbiAoYXJncywgb3B0aW9ucykge1xuICB2YXIgcHJlZml4Q2hhcnMgPSB0aGlzLnByZWZpeENoYXJzO1xuICB2YXIgb3B0aW9uU3RyaW5ncyA9IFtdO1xuICB2YXIgb3B0aW9uU3RyaW5nc0xvbmcgPSBbXTtcblxuICAvLyBkZXRlcm1pbmUgc2hvcnQgYW5kIGxvbmcgb3B0aW9uIHN0cmluZ3NcbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25TdHJpbmcpIHtcbiAgICAvLyBlcnJvciBvbiBzdHJpbmdzIHRoYXQgZG9uJ3Qgc3RhcnQgd2l0aCBhbiBhcHByb3ByaWF0ZSBwcmVmaXhcbiAgICBpZiAocHJlZml4Q2hhcnMuaW5kZXhPZihvcHRpb25TdHJpbmdbMF0pIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnSW52YWxpZCBvcHRpb24gc3RyaW5nIFwiJXNcIjogbXVzdCBzdGFydCB3aXRoIGEgXCIlc1wiLicsXG4gICAgICAgIG9wdGlvblN0cmluZyxcbiAgICAgICAgcHJlZml4Q2hhcnNcbiAgICAgICkpO1xuICAgIH1cblxuICAgIC8vIHN0cmluZ3Mgc3RhcnRpbmcgd2l0aCB0d28gcHJlZml4IGNoYXJhY3RlcnMgYXJlIGxvbmcgb3B0aW9uc1xuICAgIG9wdGlvblN0cmluZ3MucHVzaChvcHRpb25TdHJpbmcpO1xuICAgIGlmIChvcHRpb25TdHJpbmcubGVuZ3RoID4gMSAmJiBwcmVmaXhDaGFycy5pbmRleE9mKG9wdGlvblN0cmluZ1sxXSkgPj0gMCkge1xuICAgICAgb3B0aW9uU3RyaW5nc0xvbmcucHVzaChvcHRpb25TdHJpbmcpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaW5mZXIgZGVzdCwgJy0tZm9vLWJhcicgLT4gJ2Zvb19iYXInIGFuZCAnLXgnIC0+ICd4J1xuICB2YXIgZGVzdCA9IG9wdGlvbnMuZGVzdCB8fCBudWxsO1xuICBkZWxldGUgb3B0aW9ucy5kZXN0O1xuXG4gIGlmICghZGVzdCkge1xuICAgIHZhciBvcHRpb25TdHJpbmdEZXN0ID0gb3B0aW9uU3RyaW5nc0xvbmcubGVuZ3RoID8gb3B0aW9uU3RyaW5nc0xvbmdbMF0gOiBvcHRpb25TdHJpbmdzWzBdO1xuICAgIGRlc3QgPSAkJC50cmltQ2hhcnMob3B0aW9uU3RyaW5nRGVzdCwgdGhpcy5wcmVmaXhDaGFycyk7XG5cbiAgICBpZiAoZGVzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgZm9ybWF0KCdkZXN0PSBpcyByZXF1aXJlZCBmb3Igb3B0aW9ucyBsaWtlIFwiJXNcIicsIG9wdGlvblN0cmluZ3Muam9pbignLCAnKSlcbiAgICAgICk7XG4gICAgfVxuICAgIGRlc3QgPSBkZXN0LnJlcGxhY2UoLy0vZywgJ18nKTtcbiAgfVxuXG4gIC8vIHJldHVybiB0aGUgdXBkYXRlZCBrZXl3b3JkIGFyZ3VtZW50c1xuICBvcHRpb25zLmRlc3QgPSBkZXN0O1xuICBvcHRpb25zLm9wdGlvblN0cmluZ3MgPSBvcHRpb25TdHJpbmdzO1xuXG4gIHJldHVybiBvcHRpb25zO1xufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fcG9wQWN0aW9uQ2xhc3MgPSBmdW5jdGlvbiAob3B0aW9ucywgZGVmYXVsdFZhbHVlKSB7XG4gIGRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZSB8fCBudWxsO1xuXG4gIHZhciBhY3Rpb24gPSAob3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdFZhbHVlKTtcbiAgZGVsZXRlIG9wdGlvbnMuYWN0aW9uO1xuXG4gIHZhciBhY3Rpb25DbGFzcyA9IHRoaXMuX3JlZ2lzdHJ5R2V0KCdhY3Rpb24nLCBhY3Rpb24sIGFjdGlvbik7XG4gIHJldHVybiBhY3Rpb25DbGFzcztcbn07XG5cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuX2dldEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoYW5kbGVyU3RyaW5nID0gdGhpcy5jb25mbGljdEhhbmRsZXI7XG4gIHZhciBoYW5kbGVyRnVuY05hbWUgPSAnX2hhbmRsZUNvbmZsaWN0JyArICQkLmNhcGl0YWxpemUoaGFuZGxlclN0cmluZyk7XG4gIHZhciBmdW5jID0gdGhpc1toYW5kbGVyRnVuY05hbWVdO1xuICBpZiAodHlwZW9mIGZ1bmMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG1zZyA9ICdpbnZhbGlkIGNvbmZsaWN0IHJlc29sdXRpb24gdmFsdWU6ICcgKyBoYW5kbGVyU3RyaW5nO1xuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jO1xuICB9XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9jaGVja0NvbmZsaWN0ID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICB2YXIgb3B0aW9uU3RyaW5nQWN0aW9ucyA9IHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnM7XG4gIHZhciBjb25mbGljdE9wdGlvbmFscyA9IFtdO1xuXG4gIC8vIGZpbmQgYWxsIG9wdGlvbnMgdGhhdCBjb25mbGljdCB3aXRoIHRoaXMgb3B0aW9uXG4gIC8vIGNvbGxlY3QgcGFpcnMsIHRoZSBzdHJpbmcsIGFuZCBhbiBleGlzdGluZyBhY3Rpb24gdGhhdCBpdCBjb25mbGljdHMgd2l0aFxuICBhY3Rpb24ub3B0aW9uU3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25TdHJpbmcpIHtcbiAgICB2YXIgY29uZmxPcHRpb25hbCA9IG9wdGlvblN0cmluZ0FjdGlvbnNbb3B0aW9uU3RyaW5nXTtcbiAgICBpZiAodHlwZW9mIGNvbmZsT3B0aW9uYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25mbGljdE9wdGlvbmFscy5wdXNoKFsgb3B0aW9uU3RyaW5nLCBjb25mbE9wdGlvbmFsIF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGNvbmZsaWN0T3B0aW9uYWxzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgY29uZmxpY3RIYW5kbGVyID0gdGhpcy5fZ2V0SGFuZGxlcigpO1xuICAgIGNvbmZsaWN0SGFuZGxlci5jYWxsKHRoaXMsIGFjdGlvbiwgY29uZmxpY3RPcHRpb25hbHMpO1xuICB9XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9oYW5kbGVDb25mbGljdEVycm9yID0gZnVuY3Rpb24gKGFjdGlvbiwgY29uZmxPcHRpb25hbHMpIHtcbiAgdmFyIGNvbmZsaWN0cyA9IGNvbmZsT3B0aW9uYWxzLm1hcChmdW5jdGlvbiAocGFpcikgeyByZXR1cm4gcGFpclswXTsgfSk7XG4gIGNvbmZsaWN0cyA9IGNvbmZsaWN0cy5qb2luKCcsICcpO1xuICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKFxuICAgIGFjdGlvbixcbiAgICBmb3JtYXQoJ0NvbmZsaWN0aW5nIG9wdGlvbiBzdHJpbmcocyk6ICVzJywgY29uZmxpY3RzKVxuICApO1xufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5faGFuZGxlQ29uZmxpY3RSZXNvbHZlID0gZnVuY3Rpb24gKGFjdGlvbiwgY29uZmxPcHRpb25hbHMpIHtcbiAgLy8gcmVtb3ZlIGFsbCBjb25mbGljdGluZyBvcHRpb25zXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY29uZmxPcHRpb25hbHMuZm9yRWFjaChmdW5jdGlvbiAocGFpcikge1xuICAgIHZhciBvcHRpb25TdHJpbmcgPSBwYWlyWzBdO1xuICAgIHZhciBjb25mbGljdGluZ0FjdGlvbiA9IHBhaXJbMV07XG4gICAgLy8gcmVtb3ZlIHRoZSBjb25mbGljdGluZyBvcHRpb24gc3RyaW5nXG4gICAgdmFyIGkgPSBjb25mbGljdGluZ0FjdGlvbi5vcHRpb25TdHJpbmdzLmluZGV4T2Yob3B0aW9uU3RyaW5nKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICBjb25mbGljdGluZ0FjdGlvbi5vcHRpb25TdHJpbmdzLnNwbGljZShpLCAxKTtcbiAgICB9XG4gICAgZGVsZXRlIHNlbGYuX29wdGlvblN0cmluZ0FjdGlvbnNbb3B0aW9uU3RyaW5nXTtcbiAgICAvLyBpZiB0aGUgb3B0aW9uIG5vdyBoYXMgbm8gb3B0aW9uIHN0cmluZywgcmVtb3ZlIGl0IGZyb20gdGhlXG4gICAgLy8gY29udGFpbmVyIGhvbGRpbmcgaXRcbiAgICBpZiAoY29uZmxpY3RpbmdBY3Rpb24ub3B0aW9uU3RyaW5ncy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbmZsaWN0aW5nQWN0aW9uLmNvbnRhaW5lci5fcmVtb3ZlQWN0aW9uKGNvbmZsaWN0aW5nQWN0aW9uKTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIi8qKiBpbnRlcm5hbFxuICogY2xhc3MgQXJndW1lbnRHcm91cFxuICpcbiAqIEdyb3VwIGFyZ3VtZW50cy5cbiAqIEJ5IGRlZmF1bHQsIEFyZ3VtZW50UGFyc2VyIGdyb3VwcyBjb21tYW5kLWxpbmUgYXJndW1lbnRzXG4gKiBpbnRvIOKAnHBvc2l0aW9uYWwgYXJndW1lbnRz4oCdIGFuZCDigJxvcHRpb25hbCBhcmd1bWVudHPigJ1cbiAqIHdoZW4gZGlzcGxheWluZyBoZWxwIG1lc3NhZ2VzLiBXaGVuIHRoZXJlIGlzIGEgYmV0dGVyXG4gKiBjb25jZXB0dWFsIGdyb3VwaW5nIG9mIGFyZ3VtZW50cyB0aGFuIHRoaXMgZGVmYXVsdCBvbmUsXG4gKiBhcHByb3ByaWF0ZSBncm91cHMgY2FuIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGFkZEFyZ3VtZW50R3JvdXAoKSBtZXRob2RcbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaXRlZCBmcm9tIFtbQXJndW1lbnRDb250YWluZXJdXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFjdGlvbkNvbnRhaW5lciA9IHJlcXVpcmUoJy4uL2FjdGlvbl9jb250YWluZXInKTtcblxuXG4vKipcbiAqIG5ldyBBcmd1bWVudEdyb3VwKGNvbnRhaW5lciwgb3B0aW9ucylcbiAqIC0gY29udGFpbmVyIChvYmplY3QpOiBtYWluIGNvbnRhaW5lclxuICogLSBvcHRpb25zIChvYmplY3QpOiBoYXNoIG9mIGdyb3VwIG9wdGlvbnNcbiAqXG4gKiAjIyMjIG9wdGlvbnNcbiAqIC0gKipwcmVmaXhDaGFycyoqICBncm91cCBuYW1lIHByZWZpeFxuICogLSAqKmFyZ3VtZW50RGVmYXVsdCoqICBkZWZhdWx0IGFyZ3VtZW50IHZhbHVlXG4gKiAtICoqdGl0bGUqKiAgZ3JvdXAgdGl0bGVcbiAqIC0gKipkZXNjcmlwdGlvbioqIGdyb3VwIGRlc2NyaXB0aW9uXG4gKlxuICoqL1xudmFyIEFyZ3VtZW50R3JvdXAgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFyZ3VtZW50R3JvdXAoY29udGFpbmVyLCBvcHRpb25zKSB7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gYWRkIGFueSBtaXNzaW5nIGtleXdvcmQgYXJndW1lbnRzIGJ5IGNoZWNraW5nIHRoZSBjb250YWluZXJcbiAgb3B0aW9ucy5jb25mbGljdEhhbmRsZXIgPSAob3B0aW9ucy5jb25mbGljdEhhbmRsZXIgfHwgY29udGFpbmVyLmNvbmZsaWN0SGFuZGxlcik7XG4gIG9wdGlvbnMucHJlZml4Q2hhcnMgPSAob3B0aW9ucy5wcmVmaXhDaGFycyB8fCBjb250YWluZXIucHJlZml4Q2hhcnMpO1xuICBvcHRpb25zLmFyZ3VtZW50RGVmYXVsdCA9IChvcHRpb25zLmFyZ3VtZW50RGVmYXVsdCB8fCBjb250YWluZXIuYXJndW1lbnREZWZhdWx0KTtcblxuICBBY3Rpb25Db250YWluZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICAvLyBncm91cCBhdHRyaWJ1dGVzXG4gIHRoaXMudGl0bGUgPSBvcHRpb25zLnRpdGxlO1xuICB0aGlzLl9ncm91cEFjdGlvbnMgPSBbXTtcblxuICAvLyBzaGFyZSBtb3N0IGF0dHJpYnV0ZXMgd2l0aCB0aGUgY29udGFpbmVyXG4gIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgdGhpcy5fcmVnaXN0cmllcyA9IGNvbnRhaW5lci5fcmVnaXN0cmllcztcbiAgdGhpcy5fYWN0aW9ucyA9IGNvbnRhaW5lci5fYWN0aW9ucztcbiAgdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9ucyA9IGNvbnRhaW5lci5fb3B0aW9uU3RyaW5nQWN0aW9ucztcbiAgdGhpcy5fZGVmYXVsdHMgPSBjb250YWluZXIuX2RlZmF1bHRzO1xuICB0aGlzLl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscyA9IGNvbnRhaW5lci5faGFzTmVnYXRpdmVOdW1iZXJPcHRpb25hbHM7XG4gIHRoaXMuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzID0gY29udGFpbmVyLl9tdXR1YWxseUV4Y2x1c2l2ZUdyb3Vwcztcbn07XG51dGlsLmluaGVyaXRzKEFyZ3VtZW50R3JvdXAsIEFjdGlvbkNvbnRhaW5lcik7XG5cblxuQXJndW1lbnRHcm91cC5wcm90b3R5cGUuX2FkZEFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgLy8gUGFyZW50IGFkZCBhY3Rpb25cbiAgYWN0aW9uID0gQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fYWRkQWN0aW9uLmNhbGwodGhpcywgYWN0aW9uKTtcbiAgdGhpcy5fZ3JvdXBBY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgcmV0dXJuIGFjdGlvbjtcbn07XG5cblxuQXJndW1lbnRHcm91cC5wcm90b3R5cGUuX3JlbW92ZUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgLy8gUGFyZW50IHJlbW92ZSBhY3Rpb25cbiAgQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fcmVtb3ZlQWN0aW9uLmNhbGwodGhpcywgYWN0aW9uKTtcbiAgdmFyIGFjdGlvbkluZGV4ID0gdGhpcy5fZ3JvdXBBY3Rpb25zLmluZGV4T2YoYWN0aW9uKTtcbiAgaWYgKGFjdGlvbkluZGV4ID49IDApIHtcbiAgICB0aGlzLl9ncm91cEFjdGlvbnMuc3BsaWNlKGFjdGlvbkluZGV4LCAxKTtcbiAgfVxufTtcblxuIiwiLyoqXG4gKiBjbGFzcyBOYW1lc3BhY2VcbiAqXG4gKiBTaW1wbGUgb2JqZWN0IGZvciBzdG9yaW5nIGF0dHJpYnV0ZXMuIEltcGxlbWVudHMgZXF1YWxpdHkgYnkgYXR0cmlidXRlIG5hbWVzXG4gKiBhbmQgdmFsdWVzLCBhbmQgcHJvdmlkZXMgYSBzaW1wbGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV1bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI3RoZS1uYW1lc3BhY2Utb2JqZWN0XG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciAkJCA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuLyoqXG4gKiBuZXcgTmFtZXNwYWNlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMob2JqZWN0KTogcHJlZGVmaW5lZCBwcm9wZXJ0aXMgZm9yIHJlc3VsdCBvYmplY3RcbiAqXG4gKiovXG52YXIgTmFtZXNwYWNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBOYW1lc3BhY2Uob3B0aW9ucykge1xuICAkJC5leHRlbmQodGhpcywgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIE5hbWVzcGFjZSNpc3NldChrZXkpIC0+IEJvb2xlYW5cbiAqIC0ga2V5IChzdHJpbmd8bnVtYmVyKTogcHJvcGVydHkgbmFtZVxuICpcbiAqIFRlbGxzIHdoZW5ldmVyIGBuYW1lc3BhY2VgIGNvbnRhaW5zIGdpdmVuIGBrZXlgIG9yIG5vdC5cbiAqKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuaXNzZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAkJC5oYXModGhpcywga2V5KTtcbn07XG5cbi8qKlxuICogTmFtZXNwYWNlI3NldChrZXksIHZhbHVlKSAtPiBzZWxmXG4gKiAta2V5IChzdHJpbmd8bnVtYmVyfG9iamVjdCk6IHByb3BlcnkgbmFtZVxuICogLXZhbHVlIChtaXhlZCk6IG5ldyBwcm9wZXJ0eSB2YWx1ZVxuICpcbiAqIFNldCB0aGUgcHJvcGVydHkgbmFtZWQga2V5IHdpdGggdmFsdWUuXG4gKiBJZiBrZXkgb2JqZWN0IHRoZW4gc2V0IGFsbCBrZXkgcHJvcGVydGllcyB0byBuYW1lc3BhY2Ugb2JqZWN0XG4gKiovXG5OYW1lc3BhY2UucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgKGtleSkgPT09ICdvYmplY3QnKSB7XG4gICAgJCQuZXh0ZW5kKHRoaXMsIGtleSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpc1trZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE5hbWVzcGFjZSNnZXQoa2V5LCBkZWZhdWx0VmFsdWUpIC0+IG1peGVkXG4gKiAtIGtleSAoc3RyaW5nfG51bWJlcik6IHByb3BlcnR5IG5hbWVcbiAqIC0gZGVmYXVsdFZhbHVlIChtaXhlZCk6IGRlZmF1bHQgdmFsdWVcbiAqXG4gKiBSZXR1cm4gdGhlIHByb3BlcnR5IGtleSBvciBkZWZhdWxWYWx1ZSBpZiBub3Qgc2V0XG4gKiovXG5OYW1lc3BhY2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gIXRoaXNba2V5XSA/IGRlZmF1bHRWYWx1ZSA6IHRoaXNba2V5XTtcbn07XG5cbi8qKlxuICogTmFtZXNwYWNlI3Vuc2V0KGtleSwgZGVmYXVsdFZhbHVlKSAtPiBtaXhlZFxuICogLSBrZXkgKHN0cmluZ3xudW1iZXIpOiBwcm9wZXJ0eSBuYW1lXG4gKiAtIGRlZmF1bHRWYWx1ZSAobWl4ZWQpOiBkZWZhdWx0IHZhbHVlXG4gKlxuICogUmV0dXJuIGRhdGFba2V5XShhbmQgZGVsZXRlIGl0KSBvciBkZWZhdWx0VmFsdWVcbiAqKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbiAoa2V5LCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHZhbHVlID0gdGhpc1trZXldO1xuICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICBkZWxldGUgdGhpc1trZXldO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gZGVmYXVsdFZhbHVlO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuaWYgKCFFRS5saXN0ZW5lckNvdW50KSBFRS5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmluZ0RlY29kZXI7XG5cbnV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCBpdCBzdG9wcyBjYWxsaW5nIF9yZWFkKCkgdG8gZmlsbCB0aGUgYnVmZmVyXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgXCJkb24ndCBjYWxsIF9yZWFkIHByZWVtcHRpdmVseSBldmVyXCJcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gKGh3bSB8fCBod20gPT09IDApID8gaHdtIDogMTYgKiAxMDI0O1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfn50aGlzLmhpZ2hXYXRlck1hcms7XG5cbiAgdGhpcy5idWZmZXIgPSBbXTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gZmFsc2U7XG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgdGhpcy5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIHRoaXMucmVhZGluZyA9IGZhbHNlO1xuXG4gIC8vIEluIHN0cmVhbXMgdGhhdCBuZXZlciBoYXZlIGFueSBkYXRhLCBhbmQgZG8gcHVzaChudWxsKSByaWdodCBhd2F5LFxuICAvLyB0aGUgY29uc3VtZXIgY2FuIG1pc3MgdGhlICdlbmQnIGV2ZW50IGlmIHRoZXkgZG8gc29tZSBJL08gYmVmb3JlXG4gIC8vIGNvbnN1bWluZyB0aGUgc3RyZWFtLiAgU28sIHdlIGRvbid0IGVtaXQoJ2VuZCcpIHVudGlsIHNvbWUgcmVhZGluZ1xuICAvLyBoYXBwZW5zLlxuICB0aGlzLmNhbGxlZFJlYWQgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjdWFzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuXG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gd2hlbiBwaXBpbmcsIHdlIG9ubHkgY2FyZSBhYm91dCAncmVhZGFibGUnIGV2ZW50cyB0aGF0IGhhcHBlblxuICAvLyBhZnRlciByZWFkKClpbmcgYWxsIHRoZSBieXRlcyBhbmQgbm90IGdldHRpbmcgYW55IHB1c2hiYWNrLlxuICB0aGlzLnJhbk91dCA9IGZhbHNlO1xuXG4gIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzXG4gIHRoaXMuYXdhaXREcmFpbiA9IDA7XG5cbiAgLy8gaWYgdHJ1ZSwgYSBtYXliZVJlYWRNb3JlIGhhcyBiZWVuIHNjaGVkdWxlZFxuICB0aGlzLnJlYWRpbmdNb3JlID0gZmFsc2U7XG5cbiAgdGhpcy5kZWNvZGVyID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IG51bGw7XG4gIGlmIChvcHRpb25zLmVuY29kaW5nKSB7XG4gICAgaWYgKCFTdHJpbmdEZWNvZGVyKVxuICAgICAgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKVxuICAgIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nO1xuICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgIGNodW5rID0gbmV3IEJ1ZmZlcihjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBmYWxzZSk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbihjaHVuaykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssICcnLCB0cnVlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250KSB7XG4gIHZhciBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSBpZiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBpZiAoIXN0YXRlLmVuZGVkKVxuICAgICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTtcbiAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc3RhdGUuZW5kZWQgJiYgIWFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRFbWl0dGVkICYmIGFkZFRvRnJvbnQpIHtcbiAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZylcbiAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUubmVlZFJlYWRhYmxlKVxuICAgICAgICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcblxuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuXG5cbi8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuXG4vLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZVxuLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsXG4vLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYVxuLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0XG4vLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlclxuLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC5cbmZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkge1xuICByZXR1cm4gIXN0YXRlLmVuZGVkICYmXG4gICAgICAgICAoc3RhdGUubmVlZFJlYWRhYmxlIHx8XG4gICAgICAgICAgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fFxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24oZW5jKSB7XG4gIGlmICghU3RyaW5nRGVjb2RlcilcbiAgICBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiAxMjhNQlxudmFyIE1BWF9IV00gPSAweDgwMDAwMDtcbmZ1bmN0aW9uIHJvdW5kVXBUb05leHRQb3dlck9mMihuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyXG4gICAgbi0tO1xuICAgIGZvciAodmFyIHAgPSAxOyBwIDwgMzI7IHAgPDw9IDEpIG4gfD0gbiA+PiBwO1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKVxuICAgIHJldHVybiAwO1xuXG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKVxuICAgIHJldHVybiBuID09PSAwID8gMCA6IDE7XG5cbiAgaWYgKG4gPT09IG51bGwgfHwgaXNOYU4obikpIHtcbiAgICAvLyBvbmx5IGZsb3cgb25lIGJ1ZmZlciBhdCBhIHRpbWVcbiAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5idWZmZXIubGVuZ3RoKVxuICAgICAgcmV0dXJuIHN0YXRlLmJ1ZmZlclswXS5sZW5ndGg7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuXG4gIGlmIChuIDw9IDApXG4gICAgcmV0dXJuIDA7XG5cbiAgLy8gSWYgd2UncmUgYXNraW5nIGZvciBtb3JlIHRoYW4gdGhlIHRhcmdldCBidWZmZXIgbGV2ZWwsXG4gIC8vIHRoZW4gcmFpc2UgdGhlIHdhdGVyIG1hcmsuICBCdW1wIHVwIHRvIHRoZSBuZXh0IGhpZ2hlc3RcbiAgLy8gcG93ZXIgb2YgMiwgdG8gcHJldmVudCBpbmNyZWFzaW5nIGl0IGV4Y2Vzc2l2ZWx5IGluIHRpbnlcbiAgLy8gYW1vdW50cy5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKVxuICAgIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSByb3VuZFVwVG9OZXh0UG93ZXJPZjIobik7XG5cbiAgLy8gZG9uJ3QgaGF2ZSB0aGF0IG11Y2guICByZXR1cm4gbnVsbCwgdW5sZXNzIHdlJ3ZlIGVuZGVkLlxuICBpZiAobiA+IHN0YXRlLmxlbmd0aCkge1xuICAgIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2VcbiAgICAgIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gbjtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24obikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5jYWxsZWRSZWFkID0gdHJ1ZTtcbiAgdmFyIG5PcmlnID0gbjtcbiAgdmFyIHJldDtcblxuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPiAwKVxuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiZcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSAmJlxuICAgICAgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgcmV0ID0gbnVsbDtcblxuICAgIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBkZWNvZGVyIGRpZCBub3QgcmVjZWl2ZSBlbm91Z2ggZGF0YVxuICAgIC8vIHRvIHByb2R1Y2UgYSBmdWxsIGNodW5rLCB0aGVuIGltbWVkaWF0ZWx5IHJlY2VpdmVkIGFuXG4gICAgLy8gRU9GLCBzdGF0ZS5idWZmZXIgd2lsbCBjb250YWluIFs8QnVmZmVyID4sIDxCdWZmZXIgMDAgLi4uPl0uXG4gICAgLy8gaG93TXVjaFRvUmVhZCB3aWxsIHNlZSB0aGlzIGFuZCBjb2VyY2UgdGhlIGFtb3VudCB0b1xuICAgIC8vIHJlYWQgdG8gemVybyAoYmVjYXVzZSBpdCdzIGxvb2tpbmcgYXQgdGhlIGxlbmd0aCBvZiB0aGVcbiAgICAvLyBmaXJzdCA8QnVmZmVyID4gaW4gc3RhdGUuYnVmZmVyKSwgYW5kIHdlJ2xsIGVuZCB1cCBoZXJlLlxuICAgIC8vXG4gICAgLy8gVGhpcyBjYW4gb25seSBoYXBwZW4gdmlhIHN0YXRlLmRlY29kZXIgLS0gbm8gb3RoZXIgdmVudWVcbiAgICAvLyBleGlzdHMgZm9yIHB1c2hpbmcgYSB6ZXJvLWxlbmd0aCBjaHVuayBpbnRvIHN0YXRlLmJ1ZmZlclxuICAgIC8vIGFuZCB0cmlnZ2VyaW5nIHRoaXMgYmVoYXZpb3IuIEluIHRoaXMgY2FzZSwgd2UgcmV0dXJuIG91clxuICAgIC8vIHJlbWFpbmluZyBkYXRhIGFuZCBlbmQgdGhlIHN0cmVhbSwgaWYgYXBwcm9wcmlhdGUuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA+IDAgJiYgc3RhdGUuZGVjb2Rlcikge1xuICAgICAgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO1xuICAgICAgc3RhdGUubGVuZ3RoIC09IHJldC5sZW5ndGg7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMClcbiAgICAgIGVuZFJlYWRhYmxlKHRoaXMpO1xuXG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIC8vIEFsbCB0aGUgYWN0dWFsIGNodW5rIGdlbmVyYXRpb24gbG9naWMgbmVlZHMgdG8gYmVcbiAgLy8gKmJlbG93KiB0aGUgY2FsbCB0byBfcmVhZC4gIFRoZSByZWFzb24gaXMgdGhhdCBpbiBjZXJ0YWluXG4gIC8vIHN5bnRoZXRpYyBzdHJlYW0gY2FzZXMsIHN1Y2ggYXMgcGFzc3Rocm91Z2ggc3RyZWFtcywgX3JlYWRcbiAgLy8gbWF5IGJlIGEgY29tcGxldGVseSBzeW5jaHJvbm91cyBvcGVyYXRpb24gd2hpY2ggbWF5IGNoYW5nZVxuICAvLyB0aGUgc3RhdGUgb2YgdGhlIHJlYWQgYnVmZmVyLCBwcm92aWRpbmcgZW5vdWdoIGRhdGEgd2hlblxuICAvLyBiZWZvcmUgdGhlcmUgd2FzICpub3QqIGVub3VnaC5cbiAgLy9cbiAgLy8gU28sIHRoZSBzdGVwcyBhcmU6XG4gIC8vIDEuIEZpZ3VyZSBvdXQgd2hhdCB0aGUgc3RhdGUgb2YgdGhpbmdzIHdpbGwgYmUgYWZ0ZXIgd2UgZG9cbiAgLy8gYSByZWFkIGZyb20gdGhlIGJ1ZmZlci5cbiAgLy9cbiAgLy8gMi4gSWYgdGhhdCByZXN1bHRpbmcgc3RhdGUgd2lsbCB0cmlnZ2VyIGEgX3JlYWQsIHRoZW4gY2FsbCBfcmVhZC5cbiAgLy8gTm90ZSB0aGF0IHRoaXMgbWF5IGJlIGFzeW5jaHJvbm91cywgb3Igc3luY2hyb25vdXMuICBZZXMsIGl0IGlzXG4gIC8vIGRlZXBseSB1Z2x5IHRvIHdyaXRlIEFQSXMgdGhpcyB3YXksIGJ1dCB0aGF0IHN0aWxsIGRvZXNuJ3QgbWVhblxuICAvLyB0aGF0IHRoZSBSZWFkYWJsZSBjbGFzcyBzaG91bGQgYmVoYXZlIGltcHJvcGVybHksIGFzIHN0cmVhbXMgYXJlXG4gIC8vIGRlc2lnbmVkIHRvIGJlIHN5bmMvYXN5bmMgYWdub3N0aWMuXG4gIC8vIFRha2Ugbm90ZSBpZiB0aGUgX3JlYWQgY2FsbCBpcyBzeW5jIG9yIGFzeW5jIChpZSwgaWYgdGhlIHJlYWQgY2FsbFxuICAvLyBoYXMgcmV0dXJuZWQgeWV0KSwgc28gdGhhdCB3ZSBrbm93IHdoZXRoZXIgb3Igbm90IGl0J3Mgc2FmZSB0byBlbWl0XG4gIC8vICdyZWFkYWJsZScgZXRjLlxuICAvL1xuICAvLyAzLiBBY3R1YWxseSBwdWxsIHRoZSByZXF1ZXN0ZWQgY2h1bmtzIG91dCBvZiB0aGUgYnVmZmVyIGFuZCByZXR1cm4uXG5cbiAgLy8gaWYgd2UgbmVlZCBhIHJlYWRhYmxlIGV2ZW50LCB0aGVuIHdlIG5lZWQgdG8gZG8gc29tZSByZWFkaW5nLlxuICB2YXIgZG9SZWFkID0gc3RhdGUubmVlZFJlYWRhYmxlO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoIC0gbiA8PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrKVxuICAgIGRvUmVhZCA9IHRydWU7XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZylcbiAgICBkb1JlYWQgPSBmYWxzZTtcblxuICBpZiAoZG9SZWFkKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IHRydWU7XG4gICAgc3RhdGUuc3luYyA9IHRydWU7XG4gICAgLy8gaWYgdGhlIGxlbmd0aCBpcyBjdXJyZW50bHkgemVybywgdGhlbiB3ZSAqbmVlZCogYSByZWFkYWJsZSBldmVudC5cbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKVxuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gIH1cblxuICAvLyBJZiBfcmVhZCBjYWxsZWQgaXRzIGNhbGxiYWNrIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgXG4gIC8vIHdpbGwgYmUgZmFsc2UsIGFuZCB3ZSBuZWVkIHRvIHJlLWV2YWx1YXRlIGhvdyBtdWNoIGRhdGEgd2VcbiAgLy8gY2FuIHJldHVybiB0byB0aGUgdXNlci5cbiAgaWYgKGRvUmVhZCAmJiAhc3RhdGUucmVhZGluZylcbiAgICBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuXG4gIGlmIChuID4gMClcbiAgICByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7XG4gIGVsc2VcbiAgICByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9XG5cbiAgc3RhdGUubGVuZ3RoIC09IG47XG5cbiAgLy8gSWYgd2UgaGF2ZSBub3RoaW5nIGluIHRoZSBidWZmZXIsIHRoZW4gd2Ugd2FudCB0byBrbm93XG4gIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuZW5kZWQpXG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyBJZiB3ZSBoYXBwZW5lZCB0byByZWFkKCkgZXhhY3RseSB0aGUgcmVtYWluaW5nIGFtb3VudCBpbiB0aGVcbiAgLy8gYnVmZmVyLCBhbmQgdGhlIEVPRiBoYXMgYmVlbiBzZWVuIGF0IHRoaXMgcG9pbnQsIHRoZW4gbWFrZSBzdXJlXG4gIC8vIHRoYXQgd2UgZW1pdCAnZW5kJyBvbiB0aGUgdmVyeSBuZXh0IHRpY2suXG4gIGlmIChzdGF0ZS5lbmRlZCAmJiAhc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApXG4gICAgZW5kUmVhZGFibGUodGhpcyk7XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyID0gbnVsbDtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspICYmXG4gICAgICAnc3RyaW5nJyAhPT0gdHlwZW9mIGNodW5rICYmXG4gICAgICBjaHVuayAhPT0gbnVsbCAmJlxuICAgICAgY2h1bmsgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQgYW5kIHdlIGhhdmUgc29tZSBkYXRhIGxlZnQsIHRoZW4gZW1pdFxuICAvLyAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKVxuICAgIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICBlbHNlXG4gICAgZW5kUmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSlcbiAgICByZXR1cm47XG5cbiAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgaWYgKHN0YXRlLnN5bmMpXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgICB9KTtcbiAgZWxzZVxuICAgIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbn1cblxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlXyhzdHJlYW0pIHtcbiAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG59XG5cblxuLy8gYXQgdGhpcyBwb2ludCwgdGhlIHVzZXIgaGFzIHByZXN1bWFibHkgc2VlbiB0aGUgJ3JlYWRhYmxlJyBldmVudCxcbi8vIGFuZCBjYWxsZWQgcmVhZCgpIHRvIGNvbnN1bWUgc29tZSBkYXRhLiAgdGhhdCBtYXkgaGF2ZSB0cmlnZ2VyZWRcbi8vIGluIHR1cm4gYW5vdGhlciBfcmVhZChuKSBjYWxsLCBpbiB3aGljaCBjYXNlIHJlYWRpbmcgPSB0cnVlIGlmXG4vLyBpdCdzIGluIHByb2dyZXNzLlxuLy8gSG93ZXZlciwgaWYgd2UncmUgbm90IGVuZGVkLCBvciByZWFkaW5nLCBhbmQgdGhlIGxlbmd0aCA8IGh3bSxcbi8vIHRoZW4gZ28gYWhlYWQgYW5kIHRyeSB0byByZWFkIHNvbWUgbW9yZSBwcmVlbXB0aXZlbHkuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nTW9yZSkge1xuICAgIHN0YXRlLnJlYWRpbmdNb3JlID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmXG4gICAgICAgICBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKVxuICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy5cbiAgICAgIGJyZWFrO1xuICAgIGVsc2VcbiAgICAgIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbihkZXN0LCBwaXBlT3B0cykge1xuICB2YXIgc3JjID0gdGhpcztcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICBzd2l0Y2ggKHN0YXRlLnBpcGVzQ291bnQpIHtcbiAgICBjYXNlIDA6XG4gICAgICBzdGF0ZS5waXBlcyA9IGRlc3Q7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBzdGF0ZS5waXBlcyA9IFtzdGF0ZS5waXBlcywgZGVzdF07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhdGUucGlwZXMucHVzaChkZXN0KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHN0YXRlLnBpcGVzQ291bnQgKz0gMTtcblxuICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmXG4gICAgICAgICAgICAgIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmXG4gICAgICAgICAgICAgIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyO1xuXG4gIHZhciBlbmRGbiA9IGRvRW5kID8gb25lbmQgOiBjbGVhbnVwO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZClcbiAgICBwcm9jZXNzLm5leHRUaWNrKGVuZEZuKTtcbiAgZWxzZVxuICAgIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSkge1xuICAgIGlmIChyZWFkYWJsZSAhPT0gc3JjKSByZXR1cm47XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pXG4gICAgICBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMClcbiAgICAgIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7XG4gIH1cbiAgLy8gVGhpcyBpcyBhIGJydXRhbGx5IHVnbHkgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlclxuICAvLyBpcyBhdHRhY2hlZCBiZWZvcmUgYW55IHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLlxuICBpZiAoIWRlc3QuX2V2ZW50cyB8fCAhZGVzdC5fZXZlbnRzLmVycm9yKVxuICAgIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7XG4gIGVsc2UgaWYgKGlzQXJyYXkoZGVzdC5fZXZlbnRzLmVycm9yKSlcbiAgICBkZXN0Ll9ldmVudHMuZXJyb3IudW5zaGlmdChvbmVycm9yKTtcbiAgZWxzZVxuICAgIGRlc3QuX2V2ZW50cy5lcnJvciA9IFtvbmVycm9yLCBkZXN0Ll9ldmVudHMuZXJyb3JdO1xuXG5cblxuICAvLyBCb3RoIGNsb3NlIGFuZCBmaW5pc2ggc2hvdWxkIHRyaWdnZXIgdW5waXBlLCBidXQgb25seSBvbmNlLlxuICBmdW5jdGlvbiBvbmNsb3NlKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7XG4gIGZ1bmN0aW9uIG9uZmluaXNoKCkge1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG5cbiAgZnVuY3Rpb24gdW5waXBlKCkge1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgLy8gdGhlIGhhbmRsZXIgdGhhdCB3YWl0cyBmb3IgcmVhZGFibGUgZXZlbnRzIGFmdGVyIGFsbFxuICAgIC8vIHRoZSBkYXRhIGdldHMgc3Vja2VkIG91dCBpbiBmbG93LlxuICAgIC8vIFRoaXMgd291bGQgYmUgZWFzaWVyIHRvIGZvbGxvdyB3aXRoIGEgLm9uY2UoKSBoYW5kbGVyXG4gICAgLy8gaW4gZmxvdygpLCBidXQgdGhhdCBpcyB0b28gc2xvdy5cbiAgICB0aGlzLm9uKCdyZWFkYWJsZScsIHBpcGVPblJlYWRhYmxlKTtcblxuICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBmbG93KHNyYyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlc3QgPSB0aGlzO1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBzdGF0ZS5hd2FpdERyYWluLS07XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPT09IDApXG4gICAgICBmbG93KHNyYyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZsb3coc3JjKSB7XG4gIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIGNodW5rO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcblxuICBmdW5jdGlvbiB3cml0ZShkZXN0LCBpLCBsaXN0KSB7XG4gICAgdmFyIHdyaXR0ZW4gPSBkZXN0LndyaXRlKGNodW5rKTtcbiAgICBpZiAoZmFsc2UgPT09IHdyaXR0ZW4pIHtcbiAgICAgIHN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoc3RhdGUucGlwZXNDb3VudCAmJiBudWxsICE9PSAoY2h1bmsgPSBzcmMucmVhZCgpKSkge1xuXG4gICAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpXG4gICAgICB3cml0ZShzdGF0ZS5waXBlcywgMCwgbnVsbCk7XG4gICAgZWxzZVxuICAgICAgZm9yRWFjaChzdGF0ZS5waXBlcywgd3JpdGUpO1xuXG4gICAgc3JjLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG5cbiAgICAvLyBpZiBhbnlvbmUgbmVlZHMgYSBkcmFpbiwgdGhlbiB3ZSBoYXZlIHRvIHdhaXQgZm9yIHRoYXQuXG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4gPiAwKVxuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWYgZXZlcnkgZGVzdGluYXRpb24gd2FzIHVucGlwZWQsIGVpdGhlciBiZWZvcmUgZW50ZXJpbmcgdGhpc1xuICAvLyBmdW5jdGlvbiwgb3IgaW4gdGhlIHdoaWxlIGxvb3AsIHRoZW4gc3RvcCBmbG93aW5nLlxuICAvL1xuICAvLyBOQjogVGhpcyBpcyBhIHByZXR0eSByYXJlIGVkZ2UgY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICAvLyBpZiB0aGVyZSB3ZXJlIGRhdGEgZXZlbnQgbGlzdGVuZXJzIGFkZGVkLCB0aGVuIHN3aXRjaCB0byBvbGQgbW9kZS5cbiAgICBpZiAoRUUubGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykgPiAwKVxuICAgICAgZW1pdERhdGFFdmVudHMoc3JjKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBhdCB0aGlzIHBvaW50LCBubyBvbmUgbmVlZGVkIGEgZHJhaW4sIHNvIHdlIGp1c3QgcmFuIG91dCBvZiBkYXRhXG4gIC8vIG9uIHRoZSBuZXh0IHJlYWRhYmxlIGV2ZW50LCBzdGFydCBpdCBvdmVyIGFnYWluLlxuICBzdGF0ZS5yYW5PdXQgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBwaXBlT25SZWFkYWJsZSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUucmFuT3V0KSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5yYW5PdXQgPSBmYWxzZTtcbiAgICBmbG93KHRoaXMpO1xuICB9XG59XG5cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uKGRlc3QpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcylcbiAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KVxuICAgICAgZGVzdCA9IHN0YXRlLnBpcGVzO1xuXG4gICAgLy8gZ290IGEgbWF0Y2guXG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgcGlwZU9uUmVhZGFibGUpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICBpZiAoZGVzdClcbiAgICAgIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ3JlYWRhYmxlJywgcGlwZU9uUmVhZGFibGUpO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpID0gaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCk7XG4gIGlmIChpID09PSAtMSlcbiAgICByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaSwgMSk7XG4gIHN0YXRlLnBpcGVzQ291bnQgLT0gMTtcbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpXG4gICAgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScgJiYgIXRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZylcbiAgICBlbWl0RGF0YUV2ZW50cyh0aGlzKTtcblxuICBpZiAoZXYgPT09ICdyZWFkYWJsZScgJiYgdGhpcy5yZWFkYWJsZSkge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHRoaXMucmVhZCgwKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzLCBzdGF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5SZWFkYWJsZS5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBSZWFkYWJsZS5wcm90b3R5cGUub247XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgZW1pdERhdGFFdmVudHModGhpcyk7XG4gIHRoaXMucmVhZCgwKTtcbiAgdGhpcy5lbWl0KCdyZXN1bWUnKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICBlbWl0RGF0YUV2ZW50cyh0aGlzLCB0cnVlKTtcbiAgdGhpcy5lbWl0KCdwYXVzZScpO1xufTtcblxuZnVuY3Rpb24gZW1pdERhdGFFdmVudHMoc3RyZWFtLCBzdGFydFBhdXNlZCkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKHN0YXRlLmZsb3dpbmcpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vaXNhYWNzL3JlYWRhYmxlLXN0cmVhbS9pc3N1ZXMvMTZcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzd2l0Y2ggdG8gb2xkIG1vZGUgbm93LicpO1xuICB9XG5cbiAgdmFyIHBhdXNlZCA9IHN0YXJ0UGF1c2VkIHx8IGZhbHNlO1xuICB2YXIgcmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBjb252ZXJ0IHRvIGFuIG9sZC1zdHlsZSBzdHJlYW0uXG4gIHN0cmVhbS5yZWFkYWJsZSA9IHRydWU7XG4gIHN0cmVhbS5waXBlID0gU3RyZWFtLnByb3RvdHlwZS5waXBlO1xuICBzdHJlYW0ub24gPSBzdHJlYW0uYWRkTGlzdGVuZXIgPSBTdHJlYW0ucHJvdG90eXBlLm9uO1xuXG4gIHN0cmVhbS5vbigncmVhZGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICByZWFkYWJsZSA9IHRydWU7XG5cbiAgICB2YXIgYztcbiAgICB3aGlsZSAoIXBhdXNlZCAmJiAobnVsbCAhPT0gKGMgPSBzdHJlYW0ucmVhZCgpKSkpXG4gICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGMpO1xuXG4gICAgaWYgKGMgPT09IG51bGwpIHtcbiAgICAgIHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBzdHJlYW0uX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHN0cmVhbS5wYXVzZSA9IGZ1bmN0aW9uKCkge1xuICAgIHBhdXNlZCA9IHRydWU7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9O1xuXG4gIHN0cmVhbS5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICBpZiAocmVhZGFibGUpXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgICAgIH0pO1xuICAgIGVsc2VcbiAgICAgIHRoaXMucmVhZCgwKTtcbiAgICB0aGlzLmVtaXQoJ3Jlc3VtZScpO1xuICB9O1xuXG4gIC8vIG5vdyBtYWtlIGl0IHN0YXJ0LCBqdXN0IGluIGNhc2UgaXQgaGFkbid0IGFscmVhZHkuXG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFzdGF0ZS5lbmRlZCkge1xuICAgICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpXG4gICAgICAgIHNlbGYucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgc2VsZi5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbihjaHVuaykge1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKVxuICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTtcblxuICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZVxuICAgIC8vaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgdXRpbC5pc051bGxPclVuZGVmaW5lZChjaHVuaykpXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKVxuICAgICAgcmV0dXJuO1xuICAgIGVsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpXG4gICAgICByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gc2VsZi5wdXNoKGNodW5rKTtcbiAgICBpZiAoIXJldCkge1xuICAgICAgcGF1c2VkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5wYXVzZSgpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLlxuICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy5cbiAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgdGhpc1tpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbihtZXRob2QpIHsgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgfX0oaSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcHJveHkgY2VydGFpbiBpbXBvcnRhbnQgZXZlbnRzLlxuICB2YXIgZXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuICBmb3JFYWNoKGV2ZW50cywgZnVuY3Rpb24oZXYpIHtcbiAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7XG4gIH0pO1xuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHNlbGYuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzZWxmO1xufTtcblxuXG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgdmFyIGxpc3QgPSBzdGF0ZS5idWZmZXI7XG4gIHZhciBsZW5ndGggPSBzdGF0ZS5sZW5ndGg7XG4gIHZhciBzdHJpbmdNb2RlID0gISFzdGF0ZS5kZWNvZGVyO1xuICB2YXIgb2JqZWN0TW9kZSA9ICEhc3RhdGUub2JqZWN0TW9kZTtcbiAgdmFyIHJldDtcblxuICAvLyBub3RoaW5nIGluIHRoZSBsaXN0LCBkZWZpbml0ZWx5IGVtcHR5LlxuICBpZiAobGlzdC5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgaWYgKGxlbmd0aCA9PT0gMClcbiAgICByZXQgPSBudWxsO1xuICBlbHNlIGlmIChvYmplY3RNb2RlKVxuICAgIHJldCA9IGxpc3Quc2hpZnQoKTtcbiAgZWxzZSBpZiAoIW4gfHwgbiA+PSBsZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGFycmF5LlxuICAgIGlmIChzdHJpbmdNb2RlKVxuICAgICAgcmV0ID0gbGlzdC5qb2luKCcnKTtcbiAgICBlbHNlXG4gICAgICByZXQgPSBCdWZmZXIuY29uY2F0KGxpc3QsIGxlbmd0aCk7XG4gICAgbGlzdC5sZW5ndGggPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlYWQganVzdCBzb21lIG9mIGl0LlxuICAgIGlmIChuIDwgbGlzdFswXS5sZW5ndGgpIHtcbiAgICAgIC8vIGp1c3QgdGFrZSBhIHBhcnQgb2YgdGhlIGZpcnN0IGxpc3QgaXRlbS5cbiAgICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzLlxuICAgICAgdmFyIGJ1ZiA9IGxpc3RbMF07XG4gICAgICByZXQgPSBidWYuc2xpY2UoMCwgbik7XG4gICAgICBsaXN0WzBdID0gYnVmLnNsaWNlKG4pO1xuICAgIH0gZWxzZSBpZiAobiA9PT0gbGlzdFswXS5sZW5ndGgpIHtcbiAgICAgIC8vIGZpcnN0IGxpc3QgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbXBsZXggY2FzZS5cbiAgICAgIC8vIHdlIGhhdmUgZW5vdWdoIHRvIGNvdmVyIGl0LCBidXQgaXQgc3BhbnMgcGFzdCB0aGUgZmlyc3QgYnVmZmVyLlxuICAgICAgaWYgKHN0cmluZ01vZGUpXG4gICAgICAgIHJldCA9ICcnO1xuICAgICAgZWxzZVxuICAgICAgICByZXQgPSBuZXcgQnVmZmVyKG4pO1xuXG4gICAgICB2YXIgYyA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbCAmJiBjIDwgbjsgaSsrKSB7XG4gICAgICAgIHZhciBidWYgPSBsaXN0WzBdO1xuICAgICAgICB2YXIgY3B5ID0gTWF0aC5taW4obiAtIGMsIGJ1Zi5sZW5ndGgpO1xuXG4gICAgICAgIGlmIChzdHJpbmdNb2RlKVxuICAgICAgICAgIHJldCArPSBidWYuc2xpY2UoMCwgY3B5KTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGJ1Zi5jb3B5KHJldCwgYywgMCwgY3B5KTtcblxuICAgICAgICBpZiAoY3B5IDwgYnVmLmxlbmd0aClcbiAgICAgICAgICBsaXN0WzBdID0gYnVmLnNsaWNlKGNweSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG5cbiAgICAgICAgYyArPSBjcHk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApXG4gICAgdGhyb3cgbmV3IEVycm9yKCdlbmRSZWFkYWJsZSBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5jYWxsZWRSZWFkKSB7XG4gICAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiBzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yRWFjaCAoeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mICh4cywgeCkge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXZlbnRzXCIpOyIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJykuQnVmZmVyO1xuXG52YXIgaXNCdWZmZXJFbmNvZGluZyA9IEJ1ZmZlci5pc0VuY29kaW5nXG4gIHx8IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gICAgICAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICBjYXNlICdoZXgnOiBjYXNlICd1dGY4JzogY2FzZSAndXRmLTgnOiBjYXNlICdhc2NpaSc6IGNhc2UgJ2JpbmFyeSc6IGNhc2UgJ2Jhc2U2NCc6IGNhc2UgJ3VjczInOiBjYXNlICd1Y3MtMic6IGNhc2UgJ3V0ZjE2bGUnOiBjYXNlICd1dGYtMTZsZSc6IGNhc2UgJ3Jhdyc6IHJldHVybiB0cnVlO1xuICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGZhbHNlO1xuICAgICAgIH1cbiAgICAgfVxuXG5cbmZ1bmN0aW9uIGFzc2VydEVuY29kaW5nKGVuY29kaW5nKSB7XG4gIGlmIChlbmNvZGluZyAmJiAhaXNCdWZmZXJFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIH1cbn1cblxuLy8gU3RyaW5nRGVjb2RlciBwcm92aWRlcyBhbiBpbnRlcmZhY2UgZm9yIGVmZmljaWVudGx5IHNwbGl0dGluZyBhIHNlcmllcyBvZlxuLy8gYnVmZmVycyBpbnRvIGEgc2VyaWVzIG9mIEpTIHN0cmluZ3Mgd2l0aG91dCBicmVha2luZyBhcGFydCBtdWx0aS1ieXRlXG4vLyBjaGFyYWN0ZXJzLiBDRVNVLTggaXMgaGFuZGxlZCBhcyBwYXJ0IG9mIHRoZSBVVEYtOCBlbmNvZGluZy5cbi8vXG4vLyBAVE9ETyBIYW5kbGluZyBhbGwgZW5jb2RpbmdzIGluc2lkZSBhIHNpbmdsZSBvYmplY3QgbWFrZXMgaXQgdmVyeSBkaWZmaWN1bHRcbi8vIHRvIHJlYXNvbiBhYm91dCB0aGlzIGNvZGUsIHNvIGl0IHNob3VsZCBiZSBzcGxpdCB1cCBpbiB0aGUgZnV0dXJlLlxuLy8gQFRPRE8gVGhlcmUgc2hvdWxkIGJlIGEgdXRmOC1zdHJpY3QgZW5jb2RpbmcgdGhhdCByZWplY3RzIGludmFsaWQgVVRGLTggY29kZVxuLy8gcG9pbnRzIGFzIHVzZWQgYnkgQ0VTVS04LlxudmFyIFN0cmluZ0RlY29kZXIgPSBleHBvcnRzLlN0cmluZ0RlY29kZXIgPSBmdW5jdGlvbihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9dLywgJycpO1xuICBhc3NlcnRFbmNvZGluZyhlbmNvZGluZyk7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgLy8gQ0VTVS04IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAzLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICAvLyBVVEYtMTYgcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDItYnl0ZXNcbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDI7XG4gICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAvLyBCYXNlLTY0IHN0b3JlcyAzIGJ5dGVzIGluIDQgY2hhcnMsIGFuZCBwYWRzIHRoZSByZW1haW5kZXIuXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBwYXNzVGhyb3VnaFdyaXRlO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5vdWdoIHNwYWNlIHRvIHN0b3JlIGFsbCBieXRlcyBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuIFVURi04IG5lZWRzIDRcbiAgLy8gYnl0ZXMsIGJ1dCBDRVNVLTggbWF5IHJlcXVpcmUgdXAgdG8gNiAoMyBieXRlcyBwZXIgc3Vycm9nYXRlKS5cbiAgdGhpcy5jaGFyQnVmZmVyID0gbmV3IEJ1ZmZlcig2KTtcbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHJlY2VpdmVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLlxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IDA7XG4gIC8vIE51bWJlciBvZiBieXRlcyBleHBlY3RlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyTGVuZ3RoID0gMDtcbn07XG5cblxuLy8gd3JpdGUgZGVjb2RlcyB0aGUgZ2l2ZW4gYnVmZmVyIGFuZCByZXR1cm5zIGl0IGFzIEpTIHN0cmluZyB0aGF0IGlzXG4vLyBndWFyYW50ZWVkIHRvIG5vdCBjb250YWluIGFueSBwYXJ0aWFsIG11bHRpLWJ5dGUgY2hhcmFjdGVycy4gQW55IHBhcnRpYWxcbi8vIGNoYXJhY3RlciBmb3VuZCBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXIgaXMgYnVmZmVyZWQgdXAsIGFuZCB3aWxsIGJlXG4vLyByZXR1cm5lZCB3aGVuIGNhbGxpbmcgd3JpdGUgYWdhaW4gd2l0aCB0aGUgcmVtYWluaW5nIGJ5dGVzLlxuLy9cbi8vIE5vdGU6IENvbnZlcnRpbmcgYSBCdWZmZXIgY29udGFpbmluZyBhbiBvcnBoYW4gc3Vycm9nYXRlIHRvIGEgU3RyaW5nXG4vLyBjdXJyZW50bHkgd29ya3MsIGJ1dCBjb252ZXJ0aW5nIGEgU3RyaW5nIHRvIGEgQnVmZmVyICh2aWEgYG5ldyBCdWZmZXJgLCBvclxuLy8gQnVmZmVyI3dyaXRlKSB3aWxsIHJlcGxhY2UgaW5jb21wbGV0ZSBzdXJyb2dhdGVzIHdpdGggdGhlIHVuaWNvZGVcbi8vIHJlcGxhY2VtZW50IGNoYXJhY3Rlci4gU2VlIGh0dHBzOi8vY29kZXJldmlldy5jaHJvbWl1bS5vcmcvMTIxMTczMDA5LyAuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgY2hhclN0ciA9ICcnO1xuICAvLyBpZiBvdXIgbGFzdCB3cml0ZSBlbmRlZCB3aXRoIGFuIGluY29tcGxldGUgbXVsdGlieXRlIGNoYXJhY3RlclxuICB3aGlsZSAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IHJlbWFpbmluZyBieXRlcyB0aGlzIGJ1ZmZlciBoYXMgdG8gb2ZmZXIgZm9yIHRoaXMgY2hhclxuICAgIHZhciBhdmFpbGFibGUgPSAoYnVmZmVyLmxlbmd0aCA+PSB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCkgP1xuICAgICAgICB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCA6XG4gICAgICAgIGJ1ZmZlci5sZW5ndGg7XG5cbiAgICAvLyBhZGQgdGhlIG5ldyBieXRlcyB0byB0aGUgY2hhciBidWZmZXJcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHRoaXMuY2hhclJlY2VpdmVkLCAwLCBhdmFpbGFibGUpO1xuICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IGF2YWlsYWJsZTtcblxuICAgIGlmICh0aGlzLmNoYXJSZWNlaXZlZCA8IHRoaXMuY2hhckxlbmd0aCkge1xuICAgICAgLy8gc3RpbGwgbm90IGVub3VnaCBjaGFycyBpbiB0aGlzIGJ1ZmZlcj8gd2FpdCBmb3IgbW9yZSAuLi5cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgYnl0ZXMgYmVsb25naW5nIHRvIHRoZSBjdXJyZW50IGNoYXJhY3RlciBmcm9tIHRoZSBidWZmZXJcbiAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoYXZhaWxhYmxlLCBidWZmZXIubGVuZ3RoKTtcblxuICAgIC8vIGdldCB0aGUgY2hhcmFjdGVyIHRoYXQgd2FzIHNwbGl0XG4gICAgY2hhclN0ciA9IHRoaXMuY2hhckJ1ZmZlci5zbGljZSgwLCB0aGlzLmNoYXJMZW5ndGgpLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xuXG4gICAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlclxuICAgIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChjaGFyU3RyLmxlbmd0aCAtIDEpO1xuICAgIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggKz0gdGhpcy5zdXJyb2dhdGVTaXplO1xuICAgICAgY2hhclN0ciA9ICcnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHRoaXMuY2hhclJlY2VpdmVkID0gdGhpcy5jaGFyTGVuZ3RoID0gMDtcblxuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIGJ5dGVzIGluIHRoaXMgYnVmZmVyLCBqdXN0IGVtaXQgb3VyIGNoYXJcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNoYXJTdHI7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIGFuZCBzZXQgY2hhckxlbmd0aCAvIGNoYXJSZWNlaXZlZFxuICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcik7XG5cbiAgdmFyIGVuZCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGlmICh0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAvLyBidWZmZXIgdGhlIGluY29tcGxldGUgY2hhcmFjdGVyIGJ5dGVzIHdlIGdvdFxuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkLCBlbmQpO1xuICAgIGVuZCAtPSB0aGlzLmNoYXJSZWNlaXZlZDtcbiAgfVxuXG4gIGNoYXJTdHIgKz0gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIGVuZCk7XG5cbiAgdmFyIGVuZCA9IGNoYXJTdHIubGVuZ3RoIC0gMTtcbiAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGVuZCk7XG4gIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICB0aGlzLmNoYXJMZW5ndGggKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBzaXplO1xuICAgIHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgc2l6ZSwgMCwgc2l6ZSk7XG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCAwLCBzaXplKTtcbiAgICByZXR1cm4gY2hhclN0ci5zdWJzdHJpbmcoMCwgZW5kKTtcbiAgfVxuXG4gIC8vIG9yIGp1c3QgZW1pdCB0aGUgY2hhclN0clxuICByZXR1cm4gY2hhclN0cjtcbn07XG5cbi8vIGRldGVjdEluY29tcGxldGVDaGFyIGRldGVybWluZXMgaWYgdGhlcmUgaXMgYW4gaW5jb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXIgYXRcbi8vIHRoZSBlbmQgb2YgdGhlIGdpdmVuIGJ1ZmZlci4gSWYgc28sIGl0IHNldHMgdGhpcy5jaGFyTGVuZ3RoIHRvIHRoZSBieXRlXG4vLyBsZW5ndGggdGhhdCBjaGFyYWN0ZXIsIGFuZCBzZXRzIHRoaXMuY2hhclJlY2VpdmVkIHRvIHRoZSBudW1iZXIgb2YgYnl0ZXNcbi8vIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3IgdGhpcyBjaGFyYWN0ZXIuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAvLyBkZXRlcm1pbmUgaG93IG1hbnkgYnl0ZXMgd2UgaGF2ZSB0byBjaGVjayBhdCB0aGUgZW5kIG9mIHRoaXMgYnVmZmVyXG4gIHZhciBpID0gKGJ1ZmZlci5sZW5ndGggPj0gMykgPyAzIDogYnVmZmVyLmxlbmd0aDtcblxuICAvLyBGaWd1cmUgb3V0IGlmIG9uZSBvZiB0aGUgbGFzdCBpIGJ5dGVzIG9mIG91ciBidWZmZXIgYW5ub3VuY2VzIGFuXG4gIC8vIGluY29tcGxldGUgY2hhci5cbiAgZm9yICg7IGkgPiAwOyBpLS0pIHtcbiAgICB2YXIgYyA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gaV07XG5cbiAgICAvLyBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtOCNEZXNjcmlwdGlvblxuXG4gICAgLy8gMTEwWFhYWFhcbiAgICBpZiAoaSA9PSAxICYmIGMgPj4gNSA9PSAweDA2KSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gMTExMFhYWFhcbiAgICBpZiAoaSA8PSAyICYmIGMgPj4gNCA9PSAweDBFKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSAzO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gMTExMTBYWFhcbiAgICBpZiAoaSA8PSAzICYmIGMgPj4gMyA9PSAweDFFKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSA0O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gaTtcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gJyc7XG4gIGlmIChidWZmZXIgJiYgYnVmZmVyLmxlbmd0aClcbiAgICByZXMgPSB0aGlzLndyaXRlKGJ1ZmZlcik7XG5cbiAgaWYgKHRoaXMuY2hhclJlY2VpdmVkKSB7XG4gICAgdmFyIGNyID0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gICAgdmFyIGJ1ZiA9IHRoaXMuY2hhckJ1ZmZlcjtcbiAgICB2YXIgZW5jID0gdGhpcy5lbmNvZGluZztcbiAgICByZXMgKz0gYnVmLnNsaWNlKDAsIGNyKS50b1N0cmluZyhlbmMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIHBhc3NUaHJvdWdoV3JpdGUoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDI7XG4gIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMiA6IDA7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAzO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDMgOiAwO1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB0aGlzLmNodW5rID0gY2h1bms7XG4gIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgdGhpcy5jYWxsYmFjayA9IGNiO1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gKGh3bSB8fCBod20gPT09IDApID8gaHdtIDogMTYgKiAxMDI0O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfn50aGlzLmhpZ2hXYXRlck1hcms7XG5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWN1YXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24oZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXIgPSBbXTtcblxuICAvLyBUcnVlIGlmIHRoZSBlcnJvciB3YXMgYWxyZWFkeSBlbWl0dGVkIGFuZCBzaG91bGQgbm90IGJlIHRocm93biBhZ2FpblxuICB0aGlzLmVycm9yRW1pdHRlZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIHZhciBEdXBsZXggPSByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0aG91Z2ggdGhleSdyZSBub3RcbiAgLy8gaW5zdGFuY2VvZiBXcml0YWJsZSwgdGhleSdyZSBpbnN0YW5jZW9mIFJlYWRhYmxlLlxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgV3JpdGFibGUpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpXG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUuIE5vdCByZWFkYWJsZS4nKSk7XG59O1xuXG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgIGNiKGVyKTtcbiAgfSk7XG59XG5cbi8vIElmIHdlIGdldCBzb21ldGhpbmcgdGhhdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgbnVsbCwgb3IgdW5kZWZpbmVkLFxuLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci5cbi8vIE90aGVyd2lzZSBzdHJlYW0gY2h1bmtzIGFyZSBhbGwgY29uc2lkZXJlZCB0byBiZSBvZiBsZW5ndGg9MSwgYW5kIHRoZVxuLy8gd2F0ZXJtYXJrcyBkZXRlcm1pbmUgaG93IG1hbnkgb2JqZWN0cyB0byBrZWVwIGluIHRoZSBidWZmZXIsIHJhdGhlciB0aGFuXG4vLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspICYmXG4gICAgICAnc3RyaW5nJyAhPT0gdHlwZW9mIGNodW5rICYmXG4gICAgICBjaHVuayAhPT0gbnVsbCAmJlxuICAgICAgY2h1bmsgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICB2YXIgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBjYihlcik7XG4gICAgfSk7XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsaWQ7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKVxuICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gIGVsc2UgaWYgKCFlbmNvZGluZylcbiAgICBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKVxuICAgIGNiID0gZnVuY3Rpb24oKSB7fTtcblxuICBpZiAoc3RhdGUuZW5kZWQpXG4gICAgd3JpdGVBZnRlckVuZCh0aGlzLCBzdGF0ZSwgY2IpO1xuICBlbHNlIGlmICh2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKVxuICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJlxuICAgICAgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICBjaHVuayA9IG5ldyBCdWZmZXIoY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpXG4gICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldClcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nKVxuICAgIHN0YXRlLmJ1ZmZlci5wdXNoKG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSk7XG4gIGVsc2VcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgc3RhdGUud3JpdGVsZW4gPSBsZW47XG4gIHN0YXRlLndyaXRlY2IgPSBjYjtcbiAgc3RhdGUud3JpdGluZyA9IHRydWU7XG4gIHN0YXRlLnN5bmMgPSB0cnVlO1xuICBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7XG4gIHN0YXRlLnN5bmMgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb253cml0ZUVycm9yKHN0cmVhbSwgc3RhdGUsIHN5bmMsIGVyLCBjYikge1xuICBpZiAoc3luYylcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IoZXIpO1xuICAgIH0pO1xuICBlbHNlXG4gICAgY2IoZXIpO1xuXG4gIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKVxuICAgIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO1xuICBlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcblxuICAgIGlmIChzeW5jKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKVxuICAgIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgY2IoKTtcbiAgaWYgKGZpbmlzaGVkKVxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcblxuICBmb3IgKHZhciBjID0gMDsgYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGg7IGMrKykge1xuICAgIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcltjXTtcbiAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG5cbiAgICAvLyBpZiB3ZSBkaWRuJ3QgY2FsbCB0aGUgb253cml0ZSBpbW1lZGlhdGVseSwgdGhlblxuICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgIC8vIGJlaW5nIHByb2Nlc3NlZCwgc28gbW92ZSB0aGUgYnVmZmVyIGNvdW50ZXIgcGFzdCB0aGVtLlxuICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICBjKys7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG4gIGlmIChjIDwgc3RhdGUuYnVmZmVyLmxlbmd0aClcbiAgICBzdGF0ZS5idWZmZXIgPSBzdGF0ZS5idWZmZXIuc2xpY2UoYyk7XG4gIGVsc2VcbiAgICBzdGF0ZS5idWZmZXIubGVuZ3RoID0gMDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIGNodW5rICE9PSAndW5kZWZpbmVkJyAmJiBjaHVuayAhPT0gbnVsbClcbiAgICB0aGlzLndyaXRlKGNodW5rLCBlbmNvZGluZyk7XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpXG4gICAgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cblxuZnVuY3Rpb24gbmVlZEZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIHJldHVybiAoc3RhdGUuZW5kaW5nICYmXG4gICAgICAgICAgc3RhdGUubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgIXN0YXRlLmZpbmlzaGVkICYmXG4gICAgICAgICAgIXN0YXRlLndyaXRpbmcpO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjYik7XG4gICAgZWxzZVxuICAgICAgc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICB0aGlzLmFmdGVyVHJhbnNmb3JtID0gZnVuY3Rpb24oZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vIHdyaXRlY2IgaW4gVHJhbnNmb3JtIGNsYXNzJykpO1xuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB1bmRlZmluZWQpXG4gICAgc3RyZWFtLnB1c2goZGF0YSk7XG5cbiAgaWYgKGNiKVxuICAgIGNiKGVyKTtcblxuICB2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgc3RyZWFtLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59XG5cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpXG4gICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gd2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB2YXIgc3RyZWFtID0gdGhpcztcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIHRoaXMuX2ZsdXNoKVxuICAgICAgdGhpcy5fZmx1c2goZnVuY3Rpb24oZXIpIHtcbiAgICAgICAgZG9uZShzdHJlYW0sIGVyKTtcbiAgICAgIH0pO1xuICAgIGVsc2VcbiAgICAgIGRvbmUoc3RyZWFtKTtcbiAgfSk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8XG4gICAgICAgIHJzLm5lZWRSZWFkYWJsZSB8fFxuICAgICAgICBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKVxuICAgICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIpIHtcbiAgaWYgKGVyKVxuICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcnMgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB0cyA9IHN0cmVhbS5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHdzLmxlbmd0aClcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmICh0cy50cmFuc2Zvcm1pbmcpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIEVFID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG52YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGRlYnVnVXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBkZWJ1ZyA9IHZvaWQgMDtcbmlmIChkZWJ1Z1V0aWwgJiYgZGVidWdVdGlsLmRlYnVnbG9nKSB7XG4gIGRlYnVnID0gZGVidWdVdGlsLmRlYnVnbG9nKCdzdHJlYW0nKTtcbn0gZWxzZSB7XG4gIGRlYnVnID0gZnVuY3Rpb24gKCkge307XG59XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlckxpc3QgPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvQnVmZmVyTGlzdCcpO1xudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG52YXIga1Byb3h5RXZlbnRzID0gWydlcnJvcicsICdjbG9zZScsICdkZXN0cm95JywgJ3BhdXNlJywgJ3Jlc3VtZSddO1xuXG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcblxuICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gIC8vIHVzZXJsYW5kIG9uZXMuICBORVZFUiBETyBUSElTLiBUaGlzIGlzIGhlcmUgb25seSBiZWNhdXNlIHRoaXMgY29kZSBuZWVkc1xuICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlXG4gIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgaWYgKCFlbWl0dGVyLl9ldmVudHMgfHwgIWVtaXR0ZXIuX2V2ZW50c1tldmVudF0pIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtlbHNlIGlmIChpc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKSBlbWl0dGVyLl9ldmVudHNbZXZlbnRdLnVuc2hpZnQoZm4pO2Vsc2UgZW1pdHRlci5fZXZlbnRzW2V2ZW50XSA9IFtmbiwgZW1pdHRlci5fZXZlbnRzW2V2ZW50XV07XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnLiBVc2VkIHRvIG1ha2UgcmVhZChuKSBpZ25vcmUgbiBhbmQgdG9cbiAgLy8gbWFrZSBhbGwgdGhlIGJ1ZmZlciBtZXJnaW5nIGFuZCBsZW5ndGggY2hlY2tzIGdvIGF3YXlcbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciByZWFkYWJsZUh3bSA9IG9wdGlvbnMucmVhZGFibGVIaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuXG4gIGlmIChod20gfHwgaHdtID09PSAwKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod207ZWxzZSBpZiAoaXNEdXBsZXggJiYgKHJlYWRhYmxlSHdtIHx8IHJlYWRhYmxlSHdtID09PSAwKSkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVId207ZWxzZSB0aGlzLmhpZ2hXYXRlck1hcmsgPSBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gTWF0aC5mbG9vcih0aGlzLmhpZ2hXYXRlck1hcmspO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBldmVudCAncmVhZGFibGUnLydkYXRhJyBpcyBlbWl0dGVkXG4gIC8vIGltbWVkaWF0ZWx5LCBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlXG4gIC8vIGFueSBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCByZWFkIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcbiAgdGhpcy5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7XG4gICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVhZGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZSA9IG5ldyBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeVxuICB0aGlzLnJlYWRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuUmVhZGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5SZWFkYWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLnB1c2gobnVsbCk7XG4gIGNiKGVycik7XG59O1xuXG4vLyBNYW51YWxseSBzaG92ZSBzb21ldGhpbmcgaW50byB0aGUgcmVhZCgpIGJ1ZmZlci5cbi8vIFRoaXMgcmV0dXJucyB0cnVlIGlmIHRoZSBoaWdoV2F0ZXJNYXJrIGhhcyBub3QgYmVlbiBoaXQgeWV0LFxuLy8gc2ltaWxhciB0byBob3cgV3JpdGFibGUud3JpdGUoKSByZXR1cm5zIHRydWUgaWYgeW91IHNob3VsZFxuLy8gd3JpdGUoKSBzb21lIG1vcmUuXG5SZWFkYWJsZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHNraXBDaHVua0NoZWNrO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGlmICh0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHtcbiAgICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgICBlbmNvZGluZyA9ICcnO1xuICAgICAgfVxuICAgICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBza2lwQ2h1bmtDaGVjayA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBjaHVuaywgZW5jb2RpbmcsIGZhbHNlLCBza2lwQ2h1bmtDaGVjayk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIG51bGwsIHRydWUsIGZhbHNlKTtcbn07XG5cbmZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQsIHNraXBDaHVua0NoZWNrKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVyO1xuICAgIGlmICghc2tpcENodW5rQ2hlY2spIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gICAgaWYgKGVyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmICFzdGF0ZS5vYmplY3RNb2RlICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihjaHVuaykgIT09IEJ1ZmZlci5wcm90b3R5cGUpIHtcbiAgICAgICAgY2h1bmsgPSBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFkZFRvRnJvbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKSk7ZWxzZSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZGVkKSB7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFlbmNvZGluZykge1xuICAgICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG4gICAgICAgICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsubGVuZ3RoICE9PSAwKSBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO2Vsc2UgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYWRkVG9Gcm9udCkge1xuICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpO1xufVxuXG5mdW5jdGlvbiBhZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgYWRkVG9Gcm9udCkge1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfSBlbHNlIHtcbiAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gIH1cbiAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuaykge1xuICB2YXIgZXI7XG4gIGlmICghX2lzVWludDhBcnJheShjaHVuaykgJiYgdHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJiAoc3RhdGUubmVlZFJlYWRhYmxlIHx8IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHwgc3RhdGUubGVuZ3RoID09PSAwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID09PSBmYWxzZTtcbn07XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmVuZGVkKSByZXR1cm47XG4gIGlmIChzdGF0ZS5kZWNvZGVyKSB7XG4gICAgdmFyIGNodW5rID0gc3RhdGUuZGVjb2Rlci5lbmQoKTtcbiAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7XG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgfVxuICB9XG4gIHN0YXRlLmVuZGVkID0gdHJ1ZTtcblxuICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC5cbiAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmICghc3RhdGUuZW1pdHRlZFJlYWRhYmxlKSB7XG4gICAgZGVidWcoJ2VtaXRSZWFkYWJsZScsIHN0YXRlLmZsb3dpbmcpO1xuICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnN5bmMpIHBuYS5uZXh0VGljayhlbWl0UmVhZGFibGVfLCBzdHJlYW0pO2Vsc2UgZW1pdFJlYWRhYmxlXyhzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIGRlYnVnKCdlbWl0IHJlYWRhYmxlJyk7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xuICBmbG93KHN0cmVhbSk7XG59XG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ19yZWFkKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuUmVhZGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG4gIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJiBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogdW5waXBlO1xuICBpZiAoc3RhdGUuZW5kRW1pdHRlZCkgcG5hLm5leHRUaWNrKGVuZEZuKTtlbHNlIHNyYy5vbmNlKCdlbmQnLCBlbmRGbik7XG5cbiAgZGVzdC5vbigndW5waXBlJywgb251bnBpcGUpO1xuICBmdW5jdGlvbiBvbnVucGlwZShyZWFkYWJsZSwgdW5waXBlSW5mbykge1xuICAgIGRlYnVnKCdvbnVucGlwZScpO1xuICAgIGlmIChyZWFkYWJsZSA9PT0gc3JjKSB7XG4gICAgICBpZiAodW5waXBlSW5mbyAmJiB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHVucGlwZUluZm8uaGFzVW5waXBlZCA9IHRydWU7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICBkZWJ1Zygnb25lbmQnKTtcbiAgICBkZXN0LmVuZCgpO1xuICB9XG5cbiAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlclxuICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKClcbiAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXNcbiAgLy8gdG9vIHNsb3cuXG4gIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTtcbiAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTtcblxuICB2YXIgY2xlYW5lZFVwID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgZGVidWcoJ2NsZWFudXAnKTtcbiAgICAvLyBjbGVhbnVwIGV2ZW50IGhhbmRsZXJzIG9uY2UgdGhlIHBpcGUgaXMgYnJva2VuXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZScsIG9udW5waXBlKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICBzcmMucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIHVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAoRUVsaXN0ZW5lckNvdW50KGRlc3QsICdlcnJvcicpID09PSAwKSBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSB1c2VybGFuZCBvbmVzLlxuICBwcmVwZW5kTGlzdGVuZXIoZGVzdCwgJ2Vycm9yJywgb25lcnJvcik7XG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZWJ1Zygnb25maW5pc2gnKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBkZWJ1ZygndW5waXBlJyk7XG4gICAgc3JjLnVucGlwZShkZXN0KTtcbiAgfVxuXG4gIC8vIHRlbGwgdGhlIGRlc3QgdGhhdCBpdCdzIGJlaW5nIHBpcGVkIHRvXG4gIGRlc3QuZW1pdCgncGlwZScsIHNyYyk7XG5cbiAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LlxuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTtcbiAgICBzcmMucmVzdW1lKCk7XG4gIH1cblxuICByZXR1cm4gZGVzdDtcbn07XG5cbmZ1bmN0aW9uIHBpcGVPbkRyYWluKHNyYykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGF0ZSA9IHNyYy5fcmVhZGFibGVTdGF0ZTtcbiAgICBkZWJ1ZygncGlwZU9uRHJhaW4nLCBzdGF0ZS5hd2FpdERyYWluKTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbikgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwICYmIEVFbGlzdGVuZXJDb3VudChzcmMsICdkYXRhJykpIHtcbiAgICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlO1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH1cbiAgfTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciB1bnBpcGVJbmZvID0geyBoYXNVbnBpcGVkOiBmYWxzZSB9O1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGRlc3RzW2ldLmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIH1yZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuXG4gIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpcztcblxuICBzdGF0ZS5waXBlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSBzdGF0ZS5waXBlcyA9IHN0YXRlLnBpcGVzWzBdO1xuXG4gIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcywgdW5waXBlSW5mbyk7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBzZXQgdXAgZGF0YSBldmVudHMgaWYgdGhleSBhcmUgYXNrZWQgZm9yXG4vLyBFbnN1cmUgcmVhZGFibGUgbGlzdGVuZXJzIGV2ZW50dWFsbHkgZ2V0IHNvbWV0aGluZ1xuUmVhZGFibGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKGV2LCBmbikge1xuICB2YXIgcmVzID0gU3RyZWFtLnByb3RvdHlwZS5vbi5jYWxsKHRoaXMsIGV2LCBmbik7XG5cbiAgaWYgKGV2ID09PSAnZGF0YScpIHtcbiAgICAvLyBTdGFydCBmbG93aW5nIG9uIG5leHQgdGljayBpZiBzdHJlYW0gaXNuJ3QgZXhwbGljaXRseSBwYXVzZWRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nICE9PSBmYWxzZSkgdGhpcy5yZXN1bWUoKTtcbiAgfSBlbHNlIGlmIChldiA9PT0gJ3JlYWRhYmxlJykge1xuICAgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmICFzdGF0ZS5yZWFkYWJsZUxpc3RlbmluZykge1xuICAgICAgc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcgPSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoIXN0YXRlLnJlYWRpbmcpIHtcbiAgICAgICAgcG5hLm5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG5mdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHtcbiAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpO1xuICBzZWxmLnJlYWQoMCk7XG59XG5cbi8vIHBhdXNlKCkgYW5kIHJlc3VtZSgpIGFyZSByZW1uYW50cyBvZiB0aGUgbGVnYWN5IHJlYWRhYmxlIHN0cmVhbSBBUElcbi8vIElmIHRoZSB1c2VyIHVzZXMgdGhlbSwgdGhlbiBzd2l0Y2ggaW50byBvbGQgbW9kZS5cblJlYWRhYmxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIGRlYnVnKCdyZXN1bWUnKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICByZXN1bWUodGhpcywgc3RhdGUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gcmVzdW1lKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZXN1bWVTY2hlZHVsZWQpIHtcbiAgICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBwYXVzZWQgPSBmYWxzZTtcblxuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBfdGhpcy5wdXNoKGNodW5rKTtcbiAgICB9XG5cbiAgICBfdGhpcy5wdXNoKG51bGwpO1xuICB9KTtcblxuICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICBpZiAoc3RhdGUub2JqZWN0TW9kZSAmJiAoY2h1bmsgPT09IG51bGwgfHwgY2h1bmsgPT09IHVuZGVmaW5lZCkpIHJldHVybjtlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKSByZXR1cm47XG5cbiAgICB2YXIgcmV0ID0gX3RoaXMucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgZm9yICh2YXIgbiA9IDA7IG4gPCBrUHJveHlFdmVudHMubGVuZ3RoOyBuKyspIHtcbiAgICBzdHJlYW0ub24oa1Byb3h5RXZlbnRzW25dLCB0aGlzLmVtaXQuYmluZCh0aGlzLCBrUHJveHlFdmVudHNbbl0pKTtcbiAgfVxuXG4gIC8vIHdoZW4gd2UgdHJ5IHRvIGNvbnN1bWUgc29tZSBtb3JlIGJ5dGVzLCBzaW1wbHkgdW5wYXVzZSB0aGVcbiAgLy8gdW5kZXJseWluZyBzdHJlYW0uXG4gIHRoaXMuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICAgIGRlYnVnKCd3cmFwcGVkIF9yZWFkJywgbik7XG4gICAgaWYgKHBhdXNlZCkge1xuICAgICAgcGF1c2VkID0gZmFsc2U7XG4gICAgICBzdHJlYW0ucmVzdW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlLnByb3RvdHlwZSwgJ3JlYWRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGV4cG9zZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMgb25seS5cblJlYWRhYmxlLl9mcm9tTGlzdCA9IGZyb21MaXN0O1xuXG4vLyBQbHVjayBvZmYgbiBieXRlcyBmcm9tIGFuIGFycmF5IG9mIGJ1ZmZlcnMuXG4vLyBMZW5ndGggaXMgdGhlIGNvbWJpbmVkIGxlbmd0aHMgb2YgYWxsIHRoZSBidWZmZXJzIGluIHRoZSBsaXN0LlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdChuLCBzdGF0ZSkge1xuICAvLyBub3RoaW5nIGJ1ZmZlcmVkXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuXG4gIHZhciByZXQ7XG4gIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkge1xuICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdFxuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTtcbiAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIHBhcnQgb2YgbGlzdFxuICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gRXh0cmFjdHMgb25seSBlbm91Z2ggYnVmZmVyZWQgZGF0YSB0byBzYXRpc2Z5IHRoZSBhbW91bnQgcmVxdWVzdGVkLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBmcm9tTGlzdFBhcnRpYWwobiwgbGlzdCwgaGFzU3RyaW5ncykge1xuICB2YXIgcmV0O1xuICBpZiAobiA8IGxpc3QuaGVhZC5kYXRhLmxlbmd0aCkge1xuICAgIC8vIHNsaWNlIGlzIHRoZSBzYW1lIGZvciBidWZmZXJzIGFuZCBzdHJpbmdzXG4gICAgcmV0ID0gbGlzdC5oZWFkLmRhdGEuc2xpY2UoMCwgbik7XG4gICAgbGlzdC5oZWFkLmRhdGEgPSBsaXN0LmhlYWQuZGF0YS5zbGljZShuKTtcbiAgfSBlbHNlIGlmIChuID09PSBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBmaXJzdCBjaHVuayBpcyBhIHBlcmZlY3QgbWF0Y2hcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVzdWx0IHNwYW5zIG1vcmUgdGhhbiBvbmUgYnVmZmVyXG4gICAgcmV0ID0gaGFzU3RyaW5ncyA/IGNvcHlGcm9tQnVmZmVyU3RyaW5nKG4sIGxpc3QpIDogY29weUZyb21CdWZmZXIobiwgbGlzdCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YVxuLy8gY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHZhciByZXQgPSBwLmRhdGE7XG4gIG4gLT0gcmV0Lmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgc3RyID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47XG4gICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBieXRlcyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGEgY2h1bmtzLlxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlcihuLCBsaXN0KSB7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobik7XG4gIHZhciBwID0gbGlzdC5oZWFkO1xuICB2YXIgYyA9IDE7XG4gIHAuZGF0YS5jb3B5KHJldCk7XG4gIG4gLT0gcC5kYXRhLmxlbmd0aDtcbiAgd2hpbGUgKHAgPSBwLm5leHQpIHtcbiAgICB2YXIgYnVmID0gcC5kYXRhO1xuICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47XG4gICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpO1xuICAgIG4gLT0gbmI7XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkge1xuICAgICAgICArK2M7XG4gICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LmhlYWQgPSBwO1xuICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgfVxuICBsaXN0Lmxlbmd0aCAtPSBjO1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBlbmRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIGJlZm9yZSBjb25zdW1pbmcgYWxsIHRoZSBieXRlcywgdGhlbiB0aGF0IGlzIGFcbiAgLy8gYnVnIGluIG5vZGUuICBTaG91bGQgbmV2ZXIgaGFwcGVuLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCdcImVuZFJlYWRhYmxlKClcIiBjYWxsZWQgb24gbm9uLWVtcHR5IHN0cmVhbScpO1xuXG4gIGlmICghc3RhdGUuZW5kRW1pdHRlZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vLyB1bmRvY3VtZW50ZWQgY2IoKSBBUEksIG5lZWRlZCBmb3IgY29yZSwgbm90IGZvciBwdWJsaWMgQVBJXG5mdW5jdGlvbiBkZXN0cm95KGVyciwgY2IpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgcmVhZGFibGVEZXN0cm95ZWQgPSB0aGlzLl9yZWFkYWJsZVN0YXRlICYmIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB2YXIgd3JpdGFibGVEZXN0cm95ZWQgPSB0aGlzLl93cml0YWJsZVN0YXRlICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuXG4gIGlmIChyZWFkYWJsZURlc3Ryb3llZCB8fCB3cml0YWJsZURlc3Ryb3llZCkge1xuICAgIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9IGVsc2UgaWYgKGVyciAmJiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUgfHwgIXRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkKSkge1xuICAgICAgcG5hLm5leHRUaWNrKGVtaXRFcnJvck5ULCB0aGlzLCBlcnIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHdlIHNldCBkZXN0cm95ZWQgdG8gdHJ1ZSBiZWZvcmUgZmlyaW5nIGVycm9yIGNhbGxiYWNrcyBpbiBvcmRlclxuICAvLyB0byBtYWtlIGl0IHJlLWVudHJhbmNlIHNhZmUgaW4gY2FzZSBkZXN0cm95KCkgaXMgY2FsbGVkIHdpdGhpbiBjYWxsYmFja3NcblxuICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYSBkdXBsZXggc3RyZWFtIG1hcmsgdGhlIHdyaXRhYmxlIHBhcnQgYXMgZGVzdHJveWVkIGFzIHdlbGxcbiAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICB0aGlzLl9kZXN0cm95KGVyciB8fCBudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCFjYiAmJiBlcnIpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgX3RoaXMsIGVycik7XG4gICAgICBpZiAoX3RoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgICAgX3RoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNiKSB7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHVuZGVzdHJveSgpIHtcbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0RXJyb3JOVChzZWxmLCBlcnIpIHtcbiAgc2VsZi5lbWl0KCdlcnJvcicsIGVycik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBkZXN0cm95OiBkZXN0cm95LFxuICB1bmRlc3Ryb3k6IHVuZGVzdHJveVxufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gQSBiaXQgc2ltcGxlciB0aGFuIHJlYWRhYmxlIHN0cmVhbXMuXG4vLyBJbXBsZW1lbnQgYW4gYXN5bmMgLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNiKSwgYW5kIGl0J2xsIGhhbmRsZSBhbGxcbi8vIHRoZSBkcmFpbiBldmVudCBlbWlzc2lvbiBhbmQgYnVmZmVyaW5nLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7XG5cbi8qIDxyZXBsYWNlbWVudD4gKi9cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbn1cblxuLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90XG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW1cbmZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5leHQgPSBudWxsO1xuICB0aGlzLmVudHJ5ID0gbnVsbDtcbiAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgb25Db3JrZWRGaW5pc2goX3RoaXMsIHN0YXRlKTtcbiAgfTtcbn1cbi8qIDwvcmVwbGFjZW1lbnQ+ICovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcG5hLm5leHRUaWNrO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgRHVwbGV4O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbldyaXRhYmxlLldyaXRhYmxlU3RhdGUgPSBXcml0YWJsZVN0YXRlO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaW50ZXJuYWxVdGlsID0ge1xuICBkZXByZWNhdGU6IHJlcXVpcmUoJ3V0aWwtZGVwcmVjYXRlJylcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBTdHJlYW0gPSByZXF1aXJlKCcuL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xudmFyIE91clVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheSB8fCBmdW5jdGlvbiAoKSB7fTtcbmZ1bmN0aW9uIF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNodW5rKTtcbn1cbmZ1bmN0aW9uIF9pc1VpbnQ4QXJyYXkob2JqKSB7XG4gIHJldHVybiBCdWZmZXIuaXNCdWZmZXIob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBPdXJVaW50OEFycmF5O1xufVxuXG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGRlc3Ryb3lJbXBsID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL2Rlc3Ryb3knKTtcblxudXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTtcblxuZnVuY3Rpb24gbm9wKCkge31cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBEdXBsZXggc3RyZWFtcyBhcmUgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUsIGJ1dCBzaGFyZVxuICAvLyB0aGUgc2FtZSBvcHRpb25zIG9iamVjdC5cbiAgLy8gSG93ZXZlciwgc29tZSBjYXNlcyByZXF1aXJlIHNldHRpbmcgb3B0aW9ucyB0byBkaWZmZXJlbnRcbiAgLy8gdmFsdWVzIGZvciB0aGUgcmVhZGFibGUgYW5kIHRoZSB3cml0YWJsZSBzaWRlcyBvZiB0aGUgZHVwbGV4IHN0cmVhbS5cbiAgLy8gVGhlc2Ugb3B0aW9ucyBjYW4gYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBhcyByZWFkYWJsZVhYWCBhbmQgd3JpdGFibGVYWFguXG4gIHZhciBpc0R1cGxleCA9IHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoaXNEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgd3JpdGFibGVId20gPSBvcHRpb25zLndyaXRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmICh3cml0YWJsZUh3bSB8fCB3cml0YWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBpZiBfZmluYWwgaGFzIGJlZW4gY2FsbGVkXG4gIHRoaXMuZmluYWxDYWxsZWQgPSBmYWxzZTtcblxuICAvLyBkcmFpbiBldmVudCBmbGFnLlxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBoYXMgaXQgYmVlbiBkZXN0cm95ZWRcbiAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gZ2V0QnVmZmVyKCkge1xuICB2YXIgY3VycmVudCA9IHRoaXMuYnVmZmVyZWRSZXF1ZXN0O1xuICB2YXIgb3V0ID0gW107XG4gIHdoaWxlIChjdXJyZW50KSB7XG4gICAgb3V0LnB1c2goY3VycmVudCk7XG4gICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7XG4gICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTtcbiAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJywgJ0RFUDAwMDMnKVxuICAgIH0pO1xuICB9IGNhdGNoIChfKSB7fVxufSkoKTtcblxuLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsXG4vLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuXG52YXIgcmVhbEhhc0luc3RhbmNlO1xuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykge1xuICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHRoaXMgIT09IFdyaXRhYmxlKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBXcml0YWJsZShvcHRpb25zKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uXG4gIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYFxuICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuXG5cbiAgLy8gVHJ5aW5nIHRvIHVzZSB0aGUgY3VzdG9tIGBpbnN0YW5jZW9mYCBmb3IgV3JpdGFibGUgaGVyZSB3aWxsIGFsc28gYnJlYWsgdGhlXG4gIC8vIE5vZGUuanMgTGF6eVRyYW5zZm9ybSBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaGFzIGEgbm9uLXRyaXZpYWwgZ2V0dGVyIGZvclxuICAvLyBgX3dyaXRhYmxlU3RhdGVgIHRoYXQgd291bGQgbGVhZCB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gIGlmICghcmVhbEhhc0luc3RhbmNlLmNhbGwoV3JpdGFibGUsIHRoaXMpICYmICEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHtcbiAgICByZXR1cm4gbmV3IFdyaXRhYmxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGUgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRlID0gb3B0aW9ucy53cml0ZTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZXYgPT09ICdmdW5jdGlvbicpIHRoaXMuX3dyaXRldiA9IG9wdGlvbnMud3JpdGV2O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHRoaXMuX2Rlc3Ryb3kgPSBvcHRpb25zLmRlc3Ryb3k7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmluYWwgPT09ICdmdW5jdGlvbicpIHRoaXMuX2ZpbmFsID0gb3B0aW9ucy5maW5hbDtcbiAgfVxuXG4gIFN0cmVhbS5jYWxsKHRoaXMpO1xufVxuXG4vLyBPdGhlcndpc2UgcGVvcGxlIGNhbiBwaXBlIFdyaXRhYmxlIHN0cmVhbXMsIHdoaWNoIGlzIGp1c3Qgd3JvbmcuXG5Xcml0YWJsZS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignQ2Fubm90IHBpcGUsIG5vdCByZWFkYWJsZScpKTtcbn07XG5cbmZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikge1xuICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpO1xuICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYlxuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIHBuYS5uZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBDaGVja3MgdGhhdCBhIHVzZXItc3VwcGxpZWQgY2h1bmsgaXMgdmFsaWQsIGVzcGVjaWFsbHkgZm9yIHRoZSBwYXJ0aWN1bGFyXG4vLyBtb2RlIHRoZSBzdHJlYW0gaXMgaW4uIEN1cnJlbnRseSB0aGlzIG1lYW5zIHRoYXQgYG51bGxgIGlzIG5ldmVyIGFjY2VwdGVkXG4vLyBhbmQgdW5kZWZpbmVkL25vbi1zdHJpbmcgdmFsdWVzIGFyZSBvbmx5IGFsbG93ZWQgaW4gb2JqZWN0IG1vZGUuXG5mdW5jdGlvbiB2YWxpZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBjYikge1xuICB2YXIgdmFsaWQgPSB0cnVlO1xuICB2YXIgZXIgPSBmYWxzZTtcblxuICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ01heSBub3Qgd3JpdGUgbnVsbCB2YWx1ZXMgdG8gc3RyZWFtJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiBjaHVuayAhPT0gdW5kZWZpbmVkICYmICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIHBuYS5uZXh0VGljayhjYiwgZXIpO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuICB2YXIgcmV0ID0gZmFsc2U7XG4gIHZhciBpc0J1ZiA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIF9pc1VpbnQ4QXJyYXkoY2h1bmspO1xuXG4gIGlmIChpc0J1ZiAmJiAhQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkge1xuICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoaXNCdWYpIGVuY29kaW5nID0gJ2J1ZmZlcic7ZWxzZSBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcblxuICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDtcblxuICBpZiAoc3RhdGUuZW5kZWQpIHdyaXRlQWZ0ZXJFbmQodGhpcywgY2IpO2Vsc2UgaWYgKGlzQnVmIHx8IHZhbGlkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBjYikpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIGlmIHdlJ3JlIGFscmVhZHkgd3JpdGluZyBzb21ldGhpbmcsIHRoZW4ganVzdCBwdXQgdGhpc1xuLy8gaW4gdGhlIHF1ZXVlLCBhbmQgd2FpdCBvdXIgdHVybi4gIE90aGVyd2lzZSwgY2FsbCBfd3JpdGVcbi8vIElmIHdlIHJldHVybiBmYWxzZSwgdGhlbiB3ZSBuZWVkIGEgZHJhaW4gZXZlbnQsIHNvIHNldCB0aGF0IGZsYWcuXG5mdW5jdGlvbiB3cml0ZU9yQnVmZmVyKHN0cmVhbSwgc3RhdGUsIGlzQnVmLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGlmICghaXNCdWYpIHtcbiAgICB2YXIgbmV3Q2h1bmsgPSBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKTtcbiAgICBpZiAoY2h1bmsgIT09IG5ld0NodW5rKSB7XG4gICAgICBpc0J1ZiA9IHRydWU7XG4gICAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICAgICAgY2h1bmsgPSBuZXdDaHVuaztcbiAgICB9XG4gIH1cbiAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gIHN0YXRlLmxlbmd0aCArPSBsZW47XG5cbiAgdmFyIHJldCA9IHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIC8vIHdlIG11c3QgZW5zdXJlIHRoYXQgcHJldmlvdXMgbmVlZERyYWluIHdpbGwgbm90IGJlIHJlc2V0IHRvIGZhbHNlLlxuICBpZiAoIXJldCkgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHtcbiAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IHtcbiAgICAgIGNodW5rOiBjaHVuayxcbiAgICAgIGVuY29kaW5nOiBlbmNvZGluZyxcbiAgICAgIGlzQnVmOiBpc0J1ZixcbiAgICAgIGNhbGxiYWNrOiBjYixcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG5cbiAgaWYgKHN5bmMpIHtcbiAgICAvLyBkZWZlciB0aGUgY2FsbGJhY2sgaWYgd2UgYXJlIGJlaW5nIGNhbGxlZCBzeW5jaHJvbm91c2x5XG4gICAgLy8gdG8gYXZvaWQgcGlsaW5nIHVwIHRoaW5ncyBvbiB0aGUgc3RhY2tcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYW5kIGl0IHdpbGwgYWx3YXlzIGhhcHBlblxuICAgIC8vIGFmdGVyIGVycm9yXG4gICAgcG5hLm5leHRUaWNrKGZpbmlzaE1heWJlLCBzdHJlYW0sIHN0YXRlKTtcbiAgICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNhbGxlciBleHBlY3QgdGhpcyB0byBoYXBwZW4gYmVmb3JlIGlmXG4gICAgLy8gaXQgaXMgYXN5bmNcbiAgICBjYihlcik7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIC8vIHRoaXMgY2FuIGVtaXQgZmluaXNoLCBidXQgZmluaXNoIG11c3RcbiAgICAvLyBhbHdheXMgZm9sbG93IGVycm9yXG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKSB7XG4gIHN0YXRlLndyaXRpbmcgPSBmYWxzZTtcbiAgc3RhdGUud3JpdGVjYiA9IG51bGw7XG4gIHN0YXRlLmxlbmd0aCAtPSBzdGF0ZS53cml0ZWxlbjtcbiAgc3RhdGUud3JpdGVsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7XG4gIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7XG5cbiAgb253cml0ZVN0YXRlVXBkYXRlKHN0YXRlKTtcblxuICBpZiAoZXIpIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpO2Vsc2Uge1xuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGFjdHVhbGx5IHJlYWR5IHRvIGZpbmlzaCwgYnV0IGRvbid0IGVtaXQgeWV0XG4gICAgdmFyIGZpbmlzaGVkID0gbmVlZEZpbmlzaChzdGF0ZSk7XG5cbiAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7XG4gICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgLyo8cmVwbGFjZW1lbnQ+Ki9cbiAgICAgIGFzeW5jV3JpdGUoYWZ0ZXJXcml0ZSwgc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICAgIC8qPC9yZXBsYWNlbWVudD4qL1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKSB7XG4gIGlmICghZmluaXNoZWQpIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKTtcbiAgc3RhdGUucGVuZGluZ2NiLS07XG4gIGNiKCk7XG4gIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xufVxuXG4vLyBNdXN0IGZvcmNlIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBuZXh0VGljaywgc28gdGhhdCB3ZSBkb24ndFxuLy8gZW1pdCAnZHJhaW4nIGJlZm9yZSB0aGUgd3JpdGUoKSBjb25zdW1lciBnZXRzIHRoZSAnZmFsc2UnIHJldHVyblxuLy8gdmFsdWUsIGFuZCBoYXMgYSBjaGFuY2UgdG8gYXR0YWNoIGEgJ2RyYWluJyBsaXN0ZW5lci5cbmZ1bmN0aW9uIG9ud3JpdGVEcmFpbihzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUubmVlZERyYWluKSB7XG4gICAgc3RhdGUubmVlZERyYWluID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2RyYWluJyk7XG4gIH1cbn1cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG4gIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDtcblxuICBpZiAoc3RyZWFtLl93cml0ZXYgJiYgZW50cnkgJiYgZW50cnkubmV4dCkge1xuICAgIC8vIEZhc3QgY2FzZSwgd3JpdGUgZXZlcnl0aGluZyB1c2luZyBfd3JpdGV2KClcbiAgICB2YXIgbCA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50O1xuICAgIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobCk7XG4gICAgdmFyIGhvbGRlciA9IHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZTtcbiAgICBob2xkZXIuZW50cnkgPSBlbnRyeTtcblxuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIGFsbEJ1ZmZlcnMgPSB0cnVlO1xuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5O1xuICAgICAgaWYgKCFlbnRyeS5pc0J1ZikgYWxsQnVmZmVycyA9IGZhbHNlO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgY291bnQgKz0gMTtcbiAgICB9XG4gICAgYnVmZmVyLmFsbEJ1ZmZlcnMgPSBhbGxCdWZmZXJzO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyBTbG93IGNhc2UsIHdyaXRlIGNodW5rcyBvbmUtYnktb25lXG4gICAgd2hpbGUgKGVudHJ5KSB7XG4gICAgICB2YXIgY2h1bmsgPSBlbnRyeS5jaHVuaztcbiAgICAgIHZhciBlbmNvZGluZyA9IGVudHJ5LmVuY29kaW5nO1xuICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudC0tO1xuICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuXG4gICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5XG4gICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlbnRyeSA9PT0gbnVsbCkgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gIH1cblxuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdfd3JpdGUoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cbmZ1bmN0aW9uIGNhbGxGaW5hbChzdHJlYW0sIHN0YXRlKSB7XG4gIHN0cmVhbS5fZmluYWwoZnVuY3Rpb24gKGVycikge1xuICAgIHN0YXRlLnBlbmRpbmdjYi0tO1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCAmJiAhc3RhdGUuZmluYWxDYWxsZWQpIHtcbiAgICBpZiAodHlwZW9mIHN0cmVhbS5fZmluYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHN0YXRlLnBlbmRpbmdjYisrO1xuICAgICAgc3RhdGUuZmluYWxDYWxsZWQgPSB0cnVlO1xuICAgICAgcG5hLm5leHRUaWNrKGNhbGxGaW5hbCwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdwcmVmaW5pc2gnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICBpZiAoc3RhdGUucGVuZGluZ2NiID09PSAwKSB7XG4gICAgICBzdGF0ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgnZmluaXNoJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZWVkO1xufVxuXG5mdW5jdGlvbiBlbmRXcml0YWJsZShzdHJlYW0sIHN0YXRlLCBjYikge1xuICBzdGF0ZS5lbmRpbmcgPSB0cnVlO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbiAgaWYgKGNiKSB7XG4gICAgaWYgKHN0YXRlLmZpbmlzaGVkKSBwbmEubmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbkNvcmtlZEZpbmlzaChjb3JrUmVxLCBzdGF0ZSwgZXJyKSB7XG4gIHZhciBlbnRyeSA9IGNvcmtSZXEuZW50cnk7XG4gIGNvcmtSZXEuZW50cnkgPSBudWxsO1xuICB3aGlsZSAoZW50cnkpIHtcbiAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBjYihlcnIpO1xuICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgfVxuICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlLm5leHQgPSBjb3JrUmVxO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGNvcmtSZXE7XG4gIH1cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQ7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gd2UgaWdub3JlIHRoZSB2YWx1ZSBpZiB0aGUgc3RyZWFtXG4gICAgLy8gaGFzIG5vdCBiZWVuIGluaXRpYWxpemVkIHlldFxuICAgIGlmICghdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICB9XG59KTtcblxuV3JpdGFibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBkZXN0cm95SW1wbC5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl91bmRlc3Ryb3kgPSBkZXN0cm95SW1wbC51bmRlc3Ryb3k7XG5Xcml0YWJsZS5wcm90b3R5cGUuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoZXJyLCBjYikge1xuICB0aGlzLmVuZCgpO1xuICBjYihlcnIpO1xufTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIGlzRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZyB8fCBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgZW5jb2RpbmcgPSAnJyArIGVuY29kaW5nO1xuICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOmNhc2UgJ3V0ZjgnOmNhc2UgJ3V0Zi04JzpjYXNlICdhc2NpaSc6Y2FzZSAnYmluYXJ5JzpjYXNlICdiYXNlNjQnOmNhc2UgJ3VjczInOmNhc2UgJ3Vjcy0yJzpjYXNlICd1dGYxNmxlJzpjYXNlICd1dGYtMTZsZSc6Y2FzZSAncmF3JzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9ub3JtYWxpemVFbmNvZGluZyhlbmMpIHtcbiAgaWYgKCFlbmMpIHJldHVybiAndXRmOCc7XG4gIHZhciByZXRyaWVkO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jKSB7XG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuICd1dGY4JztcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiAndXRmMTZsZSc7XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuICdsYXRpbjEnO1xuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBlbmM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAocmV0cmllZCkgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgICAgICAgZW5jID0gKCcnICsgZW5jKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXRyaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8vIERvIG5vdCBjYWNoZSBgQnVmZmVyLmlzRW5jb2RpbmdgIHdoZW4gY2hlY2tpbmcgZW5jb2RpbmcgbmFtZXMgYXMgc29tZVxuLy8gbW9kdWxlcyBtb25rZXktcGF0Y2ggaXQgdG8gc3VwcG9ydCBhZGRpdGlvbmFsIGVuY29kaW5nc1xuZnVuY3Rpb24gbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIHZhciBuZW5jID0gX25vcm1hbGl6ZUVuY29kaW5nKGVuYyk7XG4gIGlmICh0eXBlb2YgbmVuYyAhPT0gJ3N0cmluZycgJiYgKEJ1ZmZlci5pc0VuY29kaW5nID09PSBpc0VuY29kaW5nIHx8ICFpc0VuY29kaW5nKGVuYykpKSB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmMpO1xuICByZXR1cm4gbmVuYyB8fCBlbmM7XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy5cbmV4cG9ydHMuU3RyaW5nRGVjb2RlciA9IFN0cmluZ0RlY29kZXI7XG5mdW5jdGlvbiBTdHJpbmdEZWNvZGVyKGVuY29kaW5nKSB7XG4gIHRoaXMuZW5jb2RpbmcgPSBub3JtYWxpemVFbmNvZGluZyhlbmNvZGluZyk7XG4gIHZhciBuYjtcbiAgc3dpdGNoICh0aGlzLmVuY29kaW5nKSB7XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICB0aGlzLnRleHQgPSB1dGYxNlRleHQ7XG4gICAgICB0aGlzLmVuZCA9IHV0ZjE2RW5kO1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndXRmOCc6XG4gICAgICB0aGlzLmZpbGxMYXN0ID0gdXRmOEZpbGxMYXN0O1xuICAgICAgbmIgPSA0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgIHRoaXMudGV4dCA9IGJhc2U2NFRleHQ7XG4gICAgICB0aGlzLmVuZCA9IGJhc2U2NEVuZDtcbiAgICAgIG5iID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gc2ltcGxlV3JpdGU7XG4gICAgICB0aGlzLmVuZCA9IHNpbXBsZUVuZDtcbiAgICAgIHJldHVybjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgdGhpcy5sYXN0VG90YWwgPSAwO1xuICB0aGlzLmxhc3RDaGFyID0gQnVmZmVyLmFsbG9jVW5zYWZlKG5iKTtcbn1cblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmIChidWYubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gIHZhciByO1xuICB2YXIgaTtcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICByID0gdGhpcy5maWxsTGFzdChidWYpO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcbiAgICBpID0gdGhpcy5sYXN0TmVlZDtcbiAgICB0aGlzLmxhc3ROZWVkID0gMDtcbiAgfSBlbHNlIHtcbiAgICBpID0gMDtcbiAgfVxuICBpZiAoaSA8IGJ1Zi5sZW5ndGgpIHJldHVybiByID8gciArIHRoaXMudGV4dChidWYsIGkpIDogdGhpcy50ZXh0KGJ1ZiwgaSk7XG4gIHJldHVybiByIHx8ICcnO1xufTtcblxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZW5kID0gdXRmOEVuZDtcblxuLy8gUmV0dXJucyBvbmx5IGNvbXBsZXRlIGNoYXJhY3RlcnMgaW4gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLnRleHQgPSB1dGY4VGV4dDtcblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBwYXJ0aWFsIG5vbi1VVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlclxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZmlsbExhc3QgPSBmdW5jdGlvbiAoYnVmKSB7XG4gIGlmICh0aGlzLmxhc3ROZWVkIDw9IGJ1Zi5sZW5ndGgpIHtcbiAgICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59O1xuXG4vLyBDaGVja3MgdGhlIHR5cGUgb2YgYSBVVEYtOCBieXRlLCB3aGV0aGVyIGl0J3MgQVNDSUksIGEgbGVhZGluZyBieXRlLCBvciBhXG4vLyBjb250aW51YXRpb24gYnl0ZS4gSWYgYW4gaW52YWxpZCBieXRlIGlzIGRldGVjdGVkLCAtMiBpcyByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0J5dGUoYnl0ZSkge1xuICBpZiAoYnl0ZSA8PSAweDdGKSByZXR1cm4gMDtlbHNlIGlmIChieXRlID4+IDUgPT09IDB4MDYpIHJldHVybiAyO2Vsc2UgaWYgKGJ5dGUgPj4gNCA9PT0gMHgwRSkgcmV0dXJuIDM7ZWxzZSBpZiAoYnl0ZSA+PiAzID09PSAweDFFKSByZXR1cm4gNDtcbiAgcmV0dXJuIGJ5dGUgPj4gNiA9PT0gMHgwMiA/IC0xIDogLTI7XG59XG5cbi8vIENoZWNrcyBhdCBtb3N0IDMgYnl0ZXMgYXQgdGhlIGVuZCBvZiBhIEJ1ZmZlciBpbiBvcmRlciB0byBkZXRlY3QgYW5cbi8vIGluY29tcGxldGUgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIuIFRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgKDIsIDMsIG9yIDQpXG4vLyBuZWVkZWQgdG8gY29tcGxldGUgdGhlIFVURi04IGNoYXJhY3RlciAoaWYgYXBwbGljYWJsZSkgYXJlIHJldHVybmVkLlxuZnVuY3Rpb24gdXRmOENoZWNrSW5jb21wbGV0ZShzZWxmLCBidWYsIGkpIHtcbiAgdmFyIGogPSBidWYubGVuZ3RoIC0gMTtcbiAgaWYgKGogPCBpKSByZXR1cm4gMDtcbiAgdmFyIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDE7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHNlbGYubGFzdE5lZWQgPSBuYiAtIDI7XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIGlmICgtLWogPCBpIHx8IG5iID09PSAtMikgcmV0dXJuIDA7XG4gIG5iID0gdXRmOENoZWNrQnl0ZShidWZbal0pO1xuICBpZiAobmIgPj0gMCkge1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGlmIChuYiA9PT0gMikgbmIgPSAwO2Vsc2Ugc2VsZi5sYXN0TmVlZCA9IG5iIC0gMztcbiAgICB9XG4gICAgcmV0dXJuIG5iO1xuICB9XG4gIHJldHVybiAwO1xufVxuXG4vLyBWYWxpZGF0ZXMgYXMgbWFueSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgYXNcbi8vIG5lZWRlZCBvciBhcmUgYXZhaWxhYmxlLiBJZiB3ZSBzZWUgYSBub24tY29udGludWF0aW9uIGJ5dGUgd2hlcmUgd2UgZXhwZWN0XG4vLyBvbmUsIHdlIFwicmVwbGFjZVwiIHRoZSB2YWxpZGF0ZWQgY29udGludWF0aW9uIGJ5dGVzIHdlJ3ZlIHNlZW4gc28gZmFyIHdpdGhcbi8vIGEgc2luZ2xlIFVURi04IHJlcGxhY2VtZW50IGNoYXJhY3RlciAoJ1xcdWZmZmQnKSwgdG8gbWF0Y2ggdjgncyBVVEYtOCBkZWNvZGluZ1xuLy8gYmVoYXZpb3IuIFRoZSBjb250aW51YXRpb24gYnl0ZSBjaGVjayBpcyBpbmNsdWRlZCB0aHJlZSB0aW1lcyBpbiB0aGUgY2FzZVxuLy8gd2hlcmUgYWxsIG9mIHRoZSBjb250aW51YXRpb24gYnl0ZXMgZm9yIGEgY2hhcmFjdGVyIGV4aXN0IGluIHRoZSBzYW1lIGJ1ZmZlci5cbi8vIEl0IGlzIGFsc28gZG9uZSB0aGlzIHdheSBhcyBhIHNsaWdodCBwZXJmb3JtYW5jZSBpbmNyZWFzZSBpbnN0ZWFkIG9mIHVzaW5nIGFcbi8vIGxvb3AuXG5mdW5jdGlvbiB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHNlbGYsIGJ1ZiwgcCkge1xuICBpZiAoKGJ1ZlswXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgc2VsZi5sYXN0TmVlZCA9IDA7XG4gICAgcmV0dXJuICdcXHVmZmZkJztcbiAgfVxuICBpZiAoc2VsZi5sYXN0TmVlZCA+IDEgJiYgYnVmLmxlbmd0aCA+IDEpIHtcbiAgICBpZiAoKGJ1ZlsxXSAmIDB4QzApICE9PSAweDgwKSB7XG4gICAgICBzZWxmLmxhc3ROZWVkID0gMTtcbiAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgfVxuICAgIGlmIChzZWxmLmxhc3ROZWVkID4gMiAmJiBidWYubGVuZ3RoID4gMikge1xuICAgICAgaWYgKChidWZbMl0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgICBzZWxmLmxhc3ROZWVkID0gMjtcbiAgICAgICAgcmV0dXJuICdcXHVmZmZkJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQXR0ZW1wdHMgdG8gY29tcGxldGUgYSBtdWx0aS1ieXRlIFVURi04IGNoYXJhY3RlciB1c2luZyBieXRlcyBmcm9tIGEgQnVmZmVyLlxuZnVuY3Rpb24gdXRmOEZpbGxMYXN0KGJ1Zikge1xuICB2YXIgcCA9IHRoaXMubGFzdFRvdGFsIC0gdGhpcy5sYXN0TmVlZDtcbiAgdmFyIHIgPSB1dGY4Q2hlY2tFeHRyYUJ5dGVzKHRoaXMsIGJ1ZiwgcCk7XG4gIGlmIChyICE9PSB1bmRlZmluZWQpIHJldHVybiByO1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgcCwgMCwgdGhpcy5sYXN0TmVlZCk7XG4gICAgcmV0dXJuIHRoaXMubGFzdENoYXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgMCwgdGhpcy5sYXN0VG90YWwpO1xuICB9XG4gIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIGJ1Zi5sZW5ndGgpO1xuICB0aGlzLmxhc3ROZWVkIC09IGJ1Zi5sZW5ndGg7XG59XG5cbi8vIFJldHVybnMgYWxsIGNvbXBsZXRlIFVURi04IGNoYXJhY3RlcnMgaW4gYSBCdWZmZXIuIElmIHRoZSBCdWZmZXIgZW5kZWQgb24gYVxuLy8gcGFydGlhbCBjaGFyYWN0ZXIsIHRoZSBjaGFyYWN0ZXIncyBieXRlcyBhcmUgYnVmZmVyZWQgdW50aWwgdGhlIHJlcXVpcmVkXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXJlIGF2YWlsYWJsZS5cbmZ1bmN0aW9uIHV0ZjhUZXh0KGJ1ZiwgaSkge1xuICB2YXIgdG90YWwgPSB1dGY4Q2hlY2tJbmNvbXBsZXRlKHRoaXMsIGJ1ZiwgaSk7XG4gIGlmICghdGhpcy5sYXN0TmVlZCkgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGkpO1xuICB0aGlzLmxhc3RUb3RhbCA9IHRvdGFsO1xuICB2YXIgZW5kID0gYnVmLmxlbmd0aCAtICh0b3RhbCAtIHRoaXMubGFzdE5lZWQpO1xuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCAwLCBlbmQpO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGY4JywgaSwgZW5kKTtcbn1cblxuLy8gRm9yIFVURi04LCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpcyBhZGRlZCB3aGVuIGVuZGluZyBvbiBhIHBhcnRpYWxcbi8vIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHV0ZjhFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgJ1xcdWZmZmQnO1xuICByZXR1cm4gcjtcbn1cblxuLy8gVVRGLTE2TEUgdHlwaWNhbGx5IG5lZWRzIHR3byBieXRlcyBwZXIgY2hhcmFjdGVyLCBidXQgZXZlbiBpZiB3ZSBoYXZlIGFuIGV2ZW5cbi8vIG51bWJlciBvZiBieXRlcyBhdmFpbGFibGUsIHdlIG5lZWQgdG8gY2hlY2sgaWYgd2UgZW5kIG9uIGEgbGVhZGluZy9oaWdoXG4vLyBzdXJyb2dhdGUuIEluIHRoYXQgY2FzZSwgd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgbmV4dCB0d28gYnl0ZXMgaW4gb3JkZXIgdG9cbi8vIGRlY29kZSB0aGUgbGFzdCBjaGFyYWN0ZXIgcHJvcGVybHkuXG5mdW5jdGlvbiB1dGYxNlRleHQoYnVmLCBpKSB7XG4gIGlmICgoYnVmLmxlbmd0aCAtIGkpICUgMiA9PT0gMCkge1xuICAgIHZhciByID0gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHZhciBjID0gci5jaGFyQ29kZUF0KHIubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAoYyA+PSAweEQ4MDAgJiYgYyA8PSAweERCRkYpIHtcbiAgICAgICAgdGhpcy5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHRoaXMubGFzdFRvdGFsID0gNDtcbiAgICAgICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgICAgIHRoaXMubGFzdENoYXJbMV0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICAgICAgICByZXR1cm4gci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG4gIHRoaXMubGFzdE5lZWQgPSAxO1xuICB0aGlzLmxhc3RUb3RhbCA9IDI7XG4gIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gYnVmLnRvU3RyaW5nKCd1dGYxNmxlJywgaSwgYnVmLmxlbmd0aCAtIDEpO1xufVxuXG4vLyBGb3IgVVRGLTE2TEUgd2UgZG8gbm90IGV4cGxpY2l0bHkgYXBwZW5kIHNwZWNpYWwgcmVwbGFjZW1lbnQgY2hhcmFjdGVycyBpZiB3ZVxuLy8gZW5kIG9uIGEgcGFydGlhbCBjaGFyYWN0ZXIsIHdlIHNpbXBseSBsZXQgdjggaGFuZGxlIHRoYXQuXG5mdW5jdGlvbiB1dGYxNkVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkge1xuICAgIHZhciBlbmQgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gICAgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCd1dGYxNmxlJywgMCwgZW5kKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gYmFzZTY0VGV4dChidWYsIGkpIHtcbiAgdmFyIG4gPSAoYnVmLmxlbmd0aCAtIGkpICUgMztcbiAgaWYgKG4gPT09IDApIHJldHVybiBidWYudG9TdHJpbmcoJ2Jhc2U2NCcsIGkpO1xuICB0aGlzLmxhc3ROZWVkID0gMyAtIG47XG4gIHRoaXMubGFzdFRvdGFsID0gMztcbiAgaWYgKG4gPT09IDEpIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAyXTtcbiAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgfVxuICByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpLCBidWYubGVuZ3RoIC0gbik7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NEVuZChidWYpIHtcbiAgdmFyIHIgPSBidWYgJiYgYnVmLmxlbmd0aCA/IHRoaXMud3JpdGUoYnVmKSA6ICcnO1xuICBpZiAodGhpcy5sYXN0TmVlZCkgcmV0dXJuIHIgKyB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKCdiYXNlNjQnLCAwLCAzIC0gdGhpcy5sYXN0TmVlZCk7XG4gIHJldHVybiByO1xufVxuXG4vLyBQYXNzIGJ5dGVzIG9uIHRocm91Z2ggZm9yIHNpbmdsZS1ieXRlIGVuY29kaW5ncyAoZS5nLiBhc2NpaSwgbGF0aW4xLCBoZXgpXG5mdW5jdGlvbiBzaW1wbGVXcml0ZShidWYpIHtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcbn1cblxuZnVuY3Rpb24gc2ltcGxlRW5kKGJ1Zikge1xuICByZXR1cm4gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNmb3JtO1xuXG52YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJ2NvcmUtdXRpbC1pcycpKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoVHJhbnNmb3JtLCBEdXBsZXgpO1xuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShlciwgZGF0YSkge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3dyaXRlIGNhbGxiYWNrIGNhbGxlZCBtdWx0aXBsZSB0aW1lcycpKTtcbiAgfVxuXG4gIHRzLndyaXRlY2h1bmsgPSBudWxsO1xuICB0cy53cml0ZWNiID0gbnVsbDtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICB0aGlzLnB1c2goZGF0YSk7XG5cbiAgY2IoZXIpO1xuXG4gIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHJzLnJlYWRpbmcgPSBmYWxzZTtcbiAgaWYgKHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucyk7XG5cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSB7XG4gICAgYWZ0ZXJUcmFuc2Zvcm06IGFmdGVyVHJhbnNmb3JtLmJpbmQodGhpcyksXG4gICAgbmVlZFRyYW5zZm9ybTogZmFsc2UsXG4gICAgdHJhbnNmb3JtaW5nOiBmYWxzZSxcbiAgICB3cml0ZWNiOiBudWxsLFxuICAgIHdyaXRlY2h1bms6IG51bGwsXG4gICAgd3JpdGVlbmNvZGluZzogbnVsbFxuICB9O1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHRoaXMub24oJ3ByZWZpbmlzaCcsIHByZWZpbmlzaCk7XG59XG5cbmZ1bmN0aW9uIHByZWZpbmlzaCgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7XG4gICAgICBkb25lKF90aGlzLCBlciwgZGF0YSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZG9uZSh0aGlzLCBudWxsLCBudWxsKTtcbiAgfVxufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdfdHJhbnNmb3JtKCkgaXMgbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuICB0cy53cml0ZWNiID0gY2I7XG4gIHRzLndyaXRlY2h1bmsgPSBjaHVuaztcbiAgdHMud3JpdGVlbmNvZGluZyA9IGVuY29kaW5nO1xuICBpZiAoIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHZhciBycyA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gICAgaWYgKHRzLm5lZWRUcmFuc2Zvcm0gfHwgcnMubmVlZFJlYWRhYmxlIHx8IHJzLmxlbmd0aCA8IHJzLmhpZ2hXYXRlck1hcmspIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcblxuICBpZiAodHMud3JpdGVjaHVuayAhPT0gbnVsbCAmJiB0cy53cml0ZWNiICYmICF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB0cy50cmFuc2Zvcm1pbmcgPSB0cnVlO1xuICAgIHRoaXMuX3RyYW5zZm9ybSh0cy53cml0ZWNodW5rLCB0cy53cml0ZWVuY29kaW5nLCB0cy5hZnRlclRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbWFyayB0aGF0IHdlIG5lZWQgYSB0cmFuc2Zvcm0sIHNvIHRoYXQgYW55IGRhdGEgdGhhdCBjb21lcyBpblxuICAgIC8vIHdpbGwgZ2V0IHByb2Nlc3NlZCwgbm93IHRoYXQgd2UndmUgYXNrZWQgZm9yIGl0LlxuICAgIHRzLm5lZWRUcmFuc2Zvcm0gPSB0cnVlO1xuICB9XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgRHVwbGV4LnByb3RvdHlwZS5fZGVzdHJveS5jYWxsKHRoaXMsIGVyciwgZnVuY3Rpb24gKGVycjIpIHtcbiAgICBjYihlcnIyKTtcbiAgICBfdGhpczIuZW1pdCgnY2xvc2UnKTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBkb25lKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgaWYgKGVyKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIGlmIChkYXRhICE9IG51bGwpIC8vIHNpbmdsZSBlcXVhbHMgY2hlY2sgZm9yIGJvdGggYG51bGxgIGFuZCBgdW5kZWZpbmVkYFxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIGlmIChzdHJlYW0uX3dyaXRhYmxlU3RhdGUubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpO1xuXG4gIGlmIChzdHJlYW0uX3RyYW5zZm9ybVN0YXRlLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9hcmdwYXJzZScpO1xuIiwiZXhwb3J0IHR5cGUgTWV0YWRhdGEgPSB7IFsga2V5OiBzdHJpbmcgXTogc3RyaW5nW10gfVxuXG5cbmV4cG9ydCBjb25zdCBtZXRhZGF0YVJlZ2V4ID0gL14oW2Etel9dKyk6ICguKykvaVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1ldGFkYXRhKG1hcmtkb3duOiBzdHJpbmcpOiBbIE1ldGFkYXRhLCBzdHJpbmcgXSB7XG4gICAgY29uc3QgdHJpbW1lZCA9IG1hcmtkb3duLnRyaW0oKVxuICAgIGNvbnN0IHNwbGl0ID0gdHJpbW1lZC5zcGxpdCgvXFxyP1xcbi8pXG4gICAgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge31cblxuICAgIGlmIChzcGxpdC5sZW5ndGggPT09IDAgfHwgIW1ldGFkYXRhUmVnZXgudGVzdChzcGxpdFswXSkpIHtcbiAgICAgICAgcmV0dXJuIFsgbWV0YWRhdGEsIHRyaW1tZWQgXVxuICAgIH1cblxuICAgIGxldCBsYXN0S2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICAgIGxldCBpbmRleCA9IDBcbiAgICBmb3IgKDsgaW5kZXggPCBzcGxpdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgbGluZSA9IHNwbGl0W2luZGV4XVxuICAgICAgICBpZiAoL15cXHMqJC8udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXRjaCA9IG1ldGFkYXRhUmVnZXguZXhlYyhsaW5lKVxuICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsYXN0S2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGFkYXRhW2xhc3RLZXldLnB1c2gobGluZS50cmltKCkpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsYXN0S2V5ID0gbWF0Y2hbMV1cbiAgICAgICAgICAgIG1ldGFkYXRhW2xhc3RLZXldID0gWyBtYXRjaFsyXS50cmltKCkgXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdGV4dCA9IHNwbGl0LnNsaWNlKGluZGV4ICsgMSkuam9pbignXFxuJylcbiAgICByZXR1cm4gWyBtZXRhZGF0YSwgdGV4dCBdXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Vtb3Rpb24tc2VydmVyLmNqcy5wcm9kLmpzXCIpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9lbW90aW9uLXNlcnZlci5janMuZGV2LmpzXCIpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBcIi8qIVxcbiAqIEJvb3RzdHJhcCBSZWJvb3QgdjQuNS4wIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxcbiAqIENvcHlyaWdodCAyMDExLTIwMjAgVGhlIEJvb3RzdHJhcCBBdXRob3JzXFxuICogQ29weXJpZ2h0IDIwMTEtMjAyMCBUd2l0dGVyLCBJbmMuXFxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcXG4gKiBGb3JrZWQgZnJvbSBOb3JtYWxpemUuY3NzLCBsaWNlbnNlZCBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZClcXG4gKi8qLCo6OmJlZm9yZSwqOjphZnRlcntib3gtc2l6aW5nOmJvcmRlci1ib3h9aHRtbHtmb250LWZhbWlseTpzYW5zLXNlcmlmO2xpbmUtaGVpZ2h0OjEuMTU7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCU7LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOnJnYmEoMCwwLDAsMCl9YXJ0aWNsZSxhc2lkZSxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLGhncm91cCxtYWluLG5hdixzZWN0aW9ue2Rpc3BsYXk6YmxvY2t9Ym9keXttYXJnaW46MDtmb250LWZhbWlseTotYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcXFwiU2Vnb2UgVUlcXFwiLFJvYm90byxcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLEFyaWFsLFxcXCJOb3RvIFNhbnNcXFwiLHNhbnMtc2VyaWYsXFxcIkFwcGxlIENvbG9yIEVtb2ppXFxcIixcXFwiU2Vnb2UgVUkgRW1vamlcXFwiLFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiLFxcXCJOb3RvIENvbG9yIEVtb2ppXFxcIjtmb250LXNpemU6MXJlbTtmb250LXdlaWdodDo0MDA7bGluZS1oZWlnaHQ6MS41O2NvbG9yOiMyMTI1Mjk7dGV4dC1hbGlnbjpsZWZ0O2JhY2tncm91bmQtY29sb3I6I2ZmZn1bdGFiaW5kZXg9XFxcIi0xXFxcIl06Zm9jdXM6bm90KC5mb2N1cy12aXNpYmxlKXtvdXRsaW5lOjAgIWltcG9ydGFudH1bdGFiaW5kZXg9XFxcIi0xXFxcIl06Zm9jdXM6bm90KDpmb2N1cy12aXNpYmxlKXtvdXRsaW5lOjAgIWltcG9ydGFudH1ocntib3gtc2l6aW5nOmNvbnRlbnQtYm94O2hlaWdodDowO292ZXJmbG93OnZpc2libGV9aDEsaDIsaDMsaDQsaDUsaDZ7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206LjVyZW19cHttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToxcmVtfWFiYnJbdGl0bGVdLGFiYnJbZGF0YS1vcmlnaW5hbC10aXRsZV17dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTstd2Via2l0LXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmUgZG90dGVkO2N1cnNvcjpoZWxwO2JvcmRlci1ib3R0b206MDstd2Via2l0LXRleHQtZGVjb3JhdGlvbi1za2lwLWluazpub25lO3RleHQtZGVjb3JhdGlvbi1za2lwLWluazpub25lfWFkZHJlc3N7bWFyZ2luLWJvdHRvbToxcmVtO2ZvbnQtc3R5bGU6bm9ybWFsO2xpbmUtaGVpZ2h0OmluaGVyaXR9b2wsdWwsZGx7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MXJlbX1vbCBvbCx1bCB1bCxvbCB1bCx1bCBvbHttYXJnaW4tYm90dG9tOjB9ZHR7Zm9udC13ZWlnaHQ6NzAwfWRke21hcmdpbi1ib3R0b206LjVyZW07bWFyZ2luLWxlZnQ6MH1ibG9ja3F1b3Rle21hcmdpbjowIDAgMXJlbX1iLHN0cm9uZ3tmb250LXdlaWdodDpib2xkZXJ9c21hbGx7Zm9udC1zaXplOjgwJX1zdWIsc3Vwe3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1zdWJ7Ym90dG9tOi0uMjVlbX1zdXB7dG9wOi0uNWVtfWF7Y29sb3I6IzAwN2JmZjt0ZXh0LWRlY29yYXRpb246bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fWE6aG92ZXJ7Y29sb3I6IzAwNTZiMzt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfWE6bm90KFtocmVmXSl7Y29sb3I6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246bm9uZX1hOm5vdChbaHJlZl0pOmhvdmVye2NvbG9yOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOm5vbmV9cHJlLGNvZGUsa2JkLHNhbXB7Zm9udC1mYW1pbHk6U0ZNb25vLVJlZ3VsYXIsTWVubG8sTW9uYWNvLENvbnNvbGFzLFxcXCJMaWJlcmF0aW9uIE1vbm9cXFwiLFxcXCJDb3VyaWVyIE5ld1xcXCIsbW9ub3NwYWNlO2ZvbnQtc2l6ZToxZW19cHJle21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjFyZW07b3ZlcmZsb3c6YXV0bzstbXMtb3ZlcmZsb3ctc3R5bGU6c2Nyb2xsYmFyfWZpZ3VyZXttYXJnaW46MCAwIDFyZW19aW1ne3ZlcnRpY2FsLWFsaWduOm1pZGRsZTtib3JkZXItc3R5bGU6bm9uZX1zdmd7b3ZlcmZsb3c6aGlkZGVuO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX10YWJsZXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2V9Y2FwdGlvbntwYWRkaW5nLXRvcDouNzVyZW07cGFkZGluZy1ib3R0b206Ljc1cmVtO2NvbG9yOiM2Yzc1N2Q7dGV4dC1hbGlnbjpsZWZ0O2NhcHRpb24tc2lkZTpib3R0b219dGh7dGV4dC1hbGlnbjppbmhlcml0fWxhYmVse2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1ib3R0b206LjVyZW19YnV0dG9ue2JvcmRlci1yYWRpdXM6MH1idXR0b246Zm9jdXN7b3V0bGluZToxcHggZG90dGVkO291dGxpbmU6NXB4IGF1dG8gLXdlYmtpdC1mb2N1cy1yaW5nLWNvbG9yfWlucHV0LGJ1dHRvbixzZWxlY3Qsb3B0Z3JvdXAsdGV4dGFyZWF7bWFyZ2luOjA7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6aW5oZXJpdDtsaW5lLWhlaWdodDppbmhlcml0fWJ1dHRvbixpbnB1dHtvdmVyZmxvdzp2aXNpYmxlfWJ1dHRvbixzZWxlY3R7dGV4dC10cmFuc2Zvcm06bm9uZX1bcm9sZT1cXFwiYnV0dG9uXFxcIl17Y3Vyc29yOnBvaW50ZXJ9c2VsZWN0e3dvcmQtd3JhcDpub3JtYWx9YnV0dG9uLFt0eXBlPVxcXCJidXR0b25cXFwiXSxbdHlwZT1cXFwicmVzZXRcXFwiXSxbdHlwZT1cXFwic3VibWl0XFxcIl17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1idXR0b246bm90KDpkaXNhYmxlZCksW3R5cGU9XFxcImJ1dHRvblxcXCJdOm5vdCg6ZGlzYWJsZWQpLFt0eXBlPVxcXCJyZXNldFxcXCJdOm5vdCg6ZGlzYWJsZWQpLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTpub3QoOmRpc2FibGVkKXtjdXJzb3I6cG9pbnRlcn1idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcImJ1dHRvblxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJyZXNldFxcXCJdOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPVxcXCJzdWJtaXRcXFwiXTo6LW1vei1mb2N1cy1pbm5lcntwYWRkaW5nOjA7Ym9yZGVyLXN0eWxlOm5vbmV9aW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSxpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJde2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9dGV4dGFyZWF7b3ZlcmZsb3c6YXV0bztyZXNpemU6dmVydGljYWx9ZmllbGRzZXR7bWluLXdpZHRoOjA7cGFkZGluZzowO21hcmdpbjowO2JvcmRlcjowfWxlZ2VuZHtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7bWF4LXdpZHRoOjEwMCU7cGFkZGluZzowO21hcmdpbi1ib3R0b206LjVyZW07Zm9udC1zaXplOjEuNXJlbTtsaW5lLWhlaWdodDppbmhlcml0O2NvbG9yOmluaGVyaXQ7d2hpdGUtc3BhY2U6bm9ybWFsfXByb2dyZXNze3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfVt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixbdHlwZT1cXFwibnVtYmVyXFxcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b257aGVpZ2h0OmF1dG99W3R5cGU9XFxcInNlYXJjaFxcXCJde291dGxpbmUtb2Zmc2V0Oi0ycHg7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uey13ZWJraXQtYXBwZWFyYW5jZTpub25lfTo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b257Zm9udDppbmhlcml0Oy13ZWJraXQtYXBwZWFyYW5jZTpidXR0b259b3V0cHV0e2Rpc3BsYXk6aW5saW5lLWJsb2NrfXN1bW1hcnl7ZGlzcGxheTpsaXN0LWl0ZW07Y3Vyc29yOnBvaW50ZXJ9dGVtcGxhdGV7ZGlzcGxheTpub25lfVtoaWRkZW5de2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fVxcblwiOyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NlcnZlci5ub2RlJyk7XG4iLCJcbjsoZnVuY3Rpb24gKG5hbWUsIHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpXG4gICAgbW9kdWxlLmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZhY3RvcnkoKVxuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmYWN0b3J5KVxuICB9XG4gIGVsc2Uge1xuICAgIHJvb3RbbmFtZV0gPSBmYWN0b3J5KClcbiAgfVxufSgnc2x1Z2lmeScsIHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNoYXJNYXAgPSBKU09OLnBhcnNlKCd7XCIkXCI6XCJkb2xsYXJcIixcIiVcIjpcInBlcmNlbnRcIixcIiZcIjpcImFuZFwiLFwiPFwiOlwibGVzc1wiLFwiPlwiOlwiZ3JlYXRlclwiLFwifFwiOlwib3JcIixcIsKiXCI6XCJjZW50XCIsXCLCo1wiOlwicG91bmRcIixcIsKkXCI6XCJjdXJyZW5jeVwiLFwiwqVcIjpcInllblwiLFwiwqlcIjpcIihjKVwiLFwiwqpcIjpcImFcIixcIsKuXCI6XCIocilcIixcIsK6XCI6XCJvXCIsXCLDgFwiOlwiQVwiLFwiw4FcIjpcIkFcIixcIsOCXCI6XCJBXCIsXCLDg1wiOlwiQVwiLFwiw4RcIjpcIkFcIixcIsOFXCI6XCJBXCIsXCLDhlwiOlwiQUVcIixcIsOHXCI6XCJDXCIsXCLDiFwiOlwiRVwiLFwiw4lcIjpcIkVcIixcIsOKXCI6XCJFXCIsXCLDi1wiOlwiRVwiLFwiw4xcIjpcIklcIixcIsONXCI6XCJJXCIsXCLDjlwiOlwiSVwiLFwiw49cIjpcIklcIixcIsOQXCI6XCJEXCIsXCLDkVwiOlwiTlwiLFwiw5JcIjpcIk9cIixcIsOTXCI6XCJPXCIsXCLDlFwiOlwiT1wiLFwiw5VcIjpcIk9cIixcIsOWXCI6XCJPXCIsXCLDmFwiOlwiT1wiLFwiw5lcIjpcIlVcIixcIsOaXCI6XCJVXCIsXCLDm1wiOlwiVVwiLFwiw5xcIjpcIlVcIixcIsOdXCI6XCJZXCIsXCLDnlwiOlwiVEhcIixcIsOfXCI6XCJzc1wiLFwiw6BcIjpcImFcIixcIsOhXCI6XCJhXCIsXCLDolwiOlwiYVwiLFwiw6NcIjpcImFcIixcIsOkXCI6XCJhXCIsXCLDpVwiOlwiYVwiLFwiw6ZcIjpcImFlXCIsXCLDp1wiOlwiY1wiLFwiw6hcIjpcImVcIixcIsOpXCI6XCJlXCIsXCLDqlwiOlwiZVwiLFwiw6tcIjpcImVcIixcIsOsXCI6XCJpXCIsXCLDrVwiOlwiaVwiLFwiw65cIjpcImlcIixcIsOvXCI6XCJpXCIsXCLDsFwiOlwiZFwiLFwiw7FcIjpcIm5cIixcIsOyXCI6XCJvXCIsXCLDs1wiOlwib1wiLFwiw7RcIjpcIm9cIixcIsO1XCI6XCJvXCIsXCLDtlwiOlwib1wiLFwiw7hcIjpcIm9cIixcIsO5XCI6XCJ1XCIsXCLDulwiOlwidVwiLFwiw7tcIjpcInVcIixcIsO8XCI6XCJ1XCIsXCLDvVwiOlwieVwiLFwiw75cIjpcInRoXCIsXCLDv1wiOlwieVwiLFwixIBcIjpcIkFcIixcIsSBXCI6XCJhXCIsXCLEglwiOlwiQVwiLFwixINcIjpcImFcIixcIsSEXCI6XCJBXCIsXCLEhVwiOlwiYVwiLFwixIZcIjpcIkNcIixcIsSHXCI6XCJjXCIsXCLEjFwiOlwiQ1wiLFwixI1cIjpcImNcIixcIsSOXCI6XCJEXCIsXCLEj1wiOlwiZFwiLFwixJBcIjpcIkRKXCIsXCLEkVwiOlwiZGpcIixcIsSSXCI6XCJFXCIsXCLEk1wiOlwiZVwiLFwixJZcIjpcIkVcIixcIsSXXCI6XCJlXCIsXCLEmFwiOlwiZVwiLFwixJlcIjpcImVcIixcIsSaXCI6XCJFXCIsXCLEm1wiOlwiZVwiLFwixJ5cIjpcIkdcIixcIsSfXCI6XCJnXCIsXCLEolwiOlwiR1wiLFwixKNcIjpcImdcIixcIsSoXCI6XCJJXCIsXCLEqVwiOlwiaVwiLFwixKpcIjpcImlcIixcIsSrXCI6XCJpXCIsXCLErlwiOlwiSVwiLFwixK9cIjpcImlcIixcIsSwXCI6XCJJXCIsXCLEsVwiOlwiaVwiLFwixLZcIjpcImtcIixcIsS3XCI6XCJrXCIsXCLEu1wiOlwiTFwiLFwixLxcIjpcImxcIixcIsS9XCI6XCJMXCIsXCLEvlwiOlwibFwiLFwixYFcIjpcIkxcIixcIsWCXCI6XCJsXCIsXCLFg1wiOlwiTlwiLFwixYRcIjpcIm5cIixcIsWFXCI6XCJOXCIsXCLFhlwiOlwiblwiLFwixYdcIjpcIk5cIixcIsWIXCI6XCJuXCIsXCLFkFwiOlwiT1wiLFwixZFcIjpcIm9cIixcIsWSXCI6XCJPRVwiLFwixZNcIjpcIm9lXCIsXCLFlFwiOlwiUlwiLFwixZVcIjpcInJcIixcIsWYXCI6XCJSXCIsXCLFmVwiOlwiclwiLFwixZpcIjpcIlNcIixcIsWbXCI6XCJzXCIsXCLFnlwiOlwiU1wiLFwixZ9cIjpcInNcIixcIsWgXCI6XCJTXCIsXCLFoVwiOlwic1wiLFwixaJcIjpcIlRcIixcIsWjXCI6XCJ0XCIsXCLFpFwiOlwiVFwiLFwixaVcIjpcInRcIixcIsWoXCI6XCJVXCIsXCLFqVwiOlwidVwiLFwixapcIjpcInVcIixcIsWrXCI6XCJ1XCIsXCLFrlwiOlwiVVwiLFwixa9cIjpcInVcIixcIsWwXCI6XCJVXCIsXCLFsVwiOlwidVwiLFwixbJcIjpcIlVcIixcIsWzXCI6XCJ1XCIsXCLFtFwiOlwiV1wiLFwixbVcIjpcIndcIixcIsW2XCI6XCJZXCIsXCLFt1wiOlwieVwiLFwixbhcIjpcIllcIixcIsW5XCI6XCJaXCIsXCLFulwiOlwielwiLFwixbtcIjpcIlpcIixcIsW8XCI6XCJ6XCIsXCLFvVwiOlwiWlwiLFwixb5cIjpcInpcIixcIsaSXCI6XCJmXCIsXCLGoFwiOlwiT1wiLFwixqFcIjpcIm9cIixcIsavXCI6XCJVXCIsXCLGsFwiOlwidVwiLFwix4hcIjpcIkxKXCIsXCLHiVwiOlwibGpcIixcIseLXCI6XCJOSlwiLFwix4xcIjpcIm5qXCIsXCLImFwiOlwiU1wiLFwiyJlcIjpcInNcIixcIsiaXCI6XCJUXCIsXCLIm1wiOlwidFwiLFwiy5pcIjpcIm9cIixcIs6GXCI6XCJBXCIsXCLOiFwiOlwiRVwiLFwizolcIjpcIkhcIixcIs6KXCI6XCJJXCIsXCLOjFwiOlwiT1wiLFwizo5cIjpcIllcIixcIs6PXCI6XCJXXCIsXCLOkFwiOlwiaVwiLFwizpFcIjpcIkFcIixcIs6SXCI6XCJCXCIsXCLOk1wiOlwiR1wiLFwizpRcIjpcIkRcIixcIs6VXCI6XCJFXCIsXCLOllwiOlwiWlwiLFwizpdcIjpcIkhcIixcIs6YXCI6XCI4XCIsXCLOmVwiOlwiSVwiLFwizppcIjpcIktcIixcIs6bXCI6XCJMXCIsXCLOnFwiOlwiTVwiLFwizp1cIjpcIk5cIixcIs6eXCI6XCIzXCIsXCLOn1wiOlwiT1wiLFwizqBcIjpcIlBcIixcIs6hXCI6XCJSXCIsXCLOo1wiOlwiU1wiLFwizqRcIjpcIlRcIixcIs6lXCI6XCJZXCIsXCLOplwiOlwiRlwiLFwizqdcIjpcIlhcIixcIs6oXCI6XCJQU1wiLFwizqlcIjpcIldcIixcIs6qXCI6XCJJXCIsXCLOq1wiOlwiWVwiLFwizqxcIjpcImFcIixcIs6tXCI6XCJlXCIsXCLOrlwiOlwiaFwiLFwizq9cIjpcImlcIixcIs6wXCI6XCJ5XCIsXCLOsVwiOlwiYVwiLFwizrJcIjpcImJcIixcIs6zXCI6XCJnXCIsXCLOtFwiOlwiZFwiLFwizrVcIjpcImVcIixcIs62XCI6XCJ6XCIsXCLOt1wiOlwiaFwiLFwizrhcIjpcIjhcIixcIs65XCI6XCJpXCIsXCLOulwiOlwia1wiLFwizrtcIjpcImxcIixcIs68XCI6XCJtXCIsXCLOvVwiOlwiblwiLFwizr5cIjpcIjNcIixcIs6/XCI6XCJvXCIsXCLPgFwiOlwicFwiLFwiz4FcIjpcInJcIixcIs+CXCI6XCJzXCIsXCLPg1wiOlwic1wiLFwiz4RcIjpcInRcIixcIs+FXCI6XCJ5XCIsXCLPhlwiOlwiZlwiLFwiz4dcIjpcInhcIixcIs+IXCI6XCJwc1wiLFwiz4lcIjpcIndcIixcIs+KXCI6XCJpXCIsXCLPi1wiOlwieVwiLFwiz4xcIjpcIm9cIixcIs+NXCI6XCJ5XCIsXCLPjlwiOlwid1wiLFwi0IFcIjpcIllvXCIsXCLQglwiOlwiREpcIixcItCEXCI6XCJZZVwiLFwi0IZcIjpcIklcIixcItCHXCI6XCJZaVwiLFwi0IhcIjpcIkpcIixcItCJXCI6XCJMSlwiLFwi0IpcIjpcIk5KXCIsXCLQi1wiOlwiQ1wiLFwi0I9cIjpcIkRaXCIsXCLQkFwiOlwiQVwiLFwi0JFcIjpcIkJcIixcItCSXCI6XCJWXCIsXCLQk1wiOlwiR1wiLFwi0JRcIjpcIkRcIixcItCVXCI6XCJFXCIsXCLQllwiOlwiWmhcIixcItCXXCI6XCJaXCIsXCLQmFwiOlwiSVwiLFwi0JlcIjpcIkpcIixcItCaXCI6XCJLXCIsXCLQm1wiOlwiTFwiLFwi0JxcIjpcIk1cIixcItCdXCI6XCJOXCIsXCLQnlwiOlwiT1wiLFwi0J9cIjpcIlBcIixcItCgXCI6XCJSXCIsXCLQoVwiOlwiU1wiLFwi0KJcIjpcIlRcIixcItCjXCI6XCJVXCIsXCLQpFwiOlwiRlwiLFwi0KVcIjpcIkhcIixcItCmXCI6XCJDXCIsXCLQp1wiOlwiQ2hcIixcItCoXCI6XCJTaFwiLFwi0KlcIjpcIlNoXCIsXCLQqlwiOlwiVVwiLFwi0KtcIjpcIllcIixcItCsXCI6XCJcIixcItCtXCI6XCJFXCIsXCLQrlwiOlwiWXVcIixcItCvXCI6XCJZYVwiLFwi0LBcIjpcImFcIixcItCxXCI6XCJiXCIsXCLQslwiOlwidlwiLFwi0LNcIjpcImdcIixcItC0XCI6XCJkXCIsXCLQtVwiOlwiZVwiLFwi0LZcIjpcInpoXCIsXCLQt1wiOlwielwiLFwi0LhcIjpcImlcIixcItC5XCI6XCJqXCIsXCLQulwiOlwia1wiLFwi0LtcIjpcImxcIixcItC8XCI6XCJtXCIsXCLQvVwiOlwiblwiLFwi0L5cIjpcIm9cIixcItC/XCI6XCJwXCIsXCLRgFwiOlwiclwiLFwi0YFcIjpcInNcIixcItGCXCI6XCJ0XCIsXCLRg1wiOlwidVwiLFwi0YRcIjpcImZcIixcItGFXCI6XCJoXCIsXCLRhlwiOlwiY1wiLFwi0YdcIjpcImNoXCIsXCLRiFwiOlwic2hcIixcItGJXCI6XCJzaFwiLFwi0YpcIjpcInVcIixcItGLXCI6XCJ5XCIsXCLRjFwiOlwiXCIsXCLRjVwiOlwiZVwiLFwi0Y5cIjpcInl1XCIsXCLRj1wiOlwieWFcIixcItGRXCI6XCJ5b1wiLFwi0ZJcIjpcImRqXCIsXCLRlFwiOlwieWVcIixcItGWXCI6XCJpXCIsXCLRl1wiOlwieWlcIixcItGYXCI6XCJqXCIsXCLRmVwiOlwibGpcIixcItGaXCI6XCJualwiLFwi0ZtcIjpcImNcIixcItGdXCI6XCJ1XCIsXCLRn1wiOlwiZHpcIixcItKQXCI6XCJHXCIsXCLSkVwiOlwiZ1wiLFwi0pJcIjpcIkdIXCIsXCLSk1wiOlwiZ2hcIixcItKaXCI6XCJLSFwiLFwi0ptcIjpcImtoXCIsXCLSolwiOlwiTkdcIixcItKjXCI6XCJuZ1wiLFwi0q5cIjpcIlVFXCIsXCLSr1wiOlwidWVcIixcItKwXCI6XCJVXCIsXCLSsVwiOlwidVwiLFwi0rpcIjpcIkhcIixcItK7XCI6XCJoXCIsXCLTmFwiOlwiQUVcIixcItOZXCI6XCJhZVwiLFwi06hcIjpcIk9FXCIsXCLTqVwiOlwib2VcIixcIuC4v1wiOlwiYmFodFwiLFwi4YOQXCI6XCJhXCIsXCLhg5FcIjpcImJcIixcIuGDklwiOlwiZ1wiLFwi4YOTXCI6XCJkXCIsXCLhg5RcIjpcImVcIixcIuGDlVwiOlwidlwiLFwi4YOWXCI6XCJ6XCIsXCLhg5dcIjpcInRcIixcIuGDmFwiOlwiaVwiLFwi4YOZXCI6XCJrXCIsXCLhg5pcIjpcImxcIixcIuGDm1wiOlwibVwiLFwi4YOcXCI6XCJuXCIsXCLhg51cIjpcIm9cIixcIuGDnlwiOlwicFwiLFwi4YOfXCI6XCJ6aFwiLFwi4YOgXCI6XCJyXCIsXCLhg6FcIjpcInNcIixcIuGDolwiOlwidFwiLFwi4YOjXCI6XCJ1XCIsXCLhg6RcIjpcImZcIixcIuGDpVwiOlwia1wiLFwi4YOmXCI6XCJnaFwiLFwi4YOnXCI6XCJxXCIsXCLhg6hcIjpcInNoXCIsXCLhg6lcIjpcImNoXCIsXCLhg6pcIjpcInRzXCIsXCLhg6tcIjpcImR6XCIsXCLhg6xcIjpcInRzXCIsXCLhg61cIjpcImNoXCIsXCLhg65cIjpcImtoXCIsXCLhg69cIjpcImpcIixcIuGDsFwiOlwiaFwiLFwi4bqAXCI6XCJXXCIsXCLhuoFcIjpcIndcIixcIuG6glwiOlwiV1wiLFwi4bqDXCI6XCJ3XCIsXCLhuoRcIjpcIldcIixcIuG6hVwiOlwid1wiLFwi4bqeXCI6XCJTU1wiLFwi4bqgXCI6XCJBXCIsXCLhuqFcIjpcImFcIixcIuG6olwiOlwiQVwiLFwi4bqjXCI6XCJhXCIsXCLhuqRcIjpcIkFcIixcIuG6pVwiOlwiYVwiLFwi4bqmXCI6XCJBXCIsXCLhuqdcIjpcImFcIixcIuG6qFwiOlwiQVwiLFwi4bqpXCI6XCJhXCIsXCLhuqpcIjpcIkFcIixcIuG6q1wiOlwiYVwiLFwi4bqsXCI6XCJBXCIsXCLhuq1cIjpcImFcIixcIuG6rlwiOlwiQVwiLFwi4bqvXCI6XCJhXCIsXCLhurBcIjpcIkFcIixcIuG6sVwiOlwiYVwiLFwi4bqyXCI6XCJBXCIsXCLhurNcIjpcImFcIixcIuG6tFwiOlwiQVwiLFwi4bq1XCI6XCJhXCIsXCLhurZcIjpcIkFcIixcIuG6t1wiOlwiYVwiLFwi4bq4XCI6XCJFXCIsXCLhurlcIjpcImVcIixcIuG6ulwiOlwiRVwiLFwi4bq7XCI6XCJlXCIsXCLhurxcIjpcIkVcIixcIuG6vVwiOlwiZVwiLFwi4bq+XCI6XCJFXCIsXCLhur9cIjpcImVcIixcIuG7gFwiOlwiRVwiLFwi4buBXCI6XCJlXCIsXCLhu4JcIjpcIkVcIixcIuG7g1wiOlwiZVwiLFwi4buEXCI6XCJFXCIsXCLhu4VcIjpcImVcIixcIuG7hlwiOlwiRVwiLFwi4buHXCI6XCJlXCIsXCLhu4hcIjpcIklcIixcIuG7iVwiOlwiaVwiLFwi4buKXCI6XCJJXCIsXCLhu4tcIjpcImlcIixcIuG7jFwiOlwiT1wiLFwi4buNXCI6XCJvXCIsXCLhu45cIjpcIk9cIixcIuG7j1wiOlwib1wiLFwi4buQXCI6XCJPXCIsXCLhu5FcIjpcIm9cIixcIuG7klwiOlwiT1wiLFwi4buTXCI6XCJvXCIsXCLhu5RcIjpcIk9cIixcIuG7lVwiOlwib1wiLFwi4buWXCI6XCJPXCIsXCLhu5dcIjpcIm9cIixcIuG7mFwiOlwiT1wiLFwi4buZXCI6XCJvXCIsXCLhu5pcIjpcIk9cIixcIuG7m1wiOlwib1wiLFwi4bucXCI6XCJPXCIsXCLhu51cIjpcIm9cIixcIuG7nlwiOlwiT1wiLFwi4bufXCI6XCJvXCIsXCLhu6BcIjpcIk9cIixcIuG7oVwiOlwib1wiLFwi4buiXCI6XCJPXCIsXCLhu6NcIjpcIm9cIixcIuG7pFwiOlwiVVwiLFwi4bulXCI6XCJ1XCIsXCLhu6ZcIjpcIlVcIixcIuG7p1wiOlwidVwiLFwi4buoXCI6XCJVXCIsXCLhu6lcIjpcInVcIixcIuG7qlwiOlwiVVwiLFwi4burXCI6XCJ1XCIsXCLhu6xcIjpcIlVcIixcIuG7rVwiOlwidVwiLFwi4buuXCI6XCJVXCIsXCLhu69cIjpcInVcIixcIuG7sFwiOlwiVVwiLFwi4buxXCI6XCJ1XCIsXCLhu7JcIjpcIllcIixcIuG7s1wiOlwieVwiLFwi4bu0XCI6XCJZXCIsXCLhu7VcIjpcInlcIixcIuG7tlwiOlwiWVwiLFwi4bu3XCI6XCJ5XCIsXCLhu7hcIjpcIllcIixcIuG7uVwiOlwieVwiLFwi4oCYXCI6XCJcXCdcIixcIuKAmVwiOlwiXFwnXCIsXCLigJxcIjpcIlxcXFxcXFwiXCIsXCLigJ1cIjpcIlxcXFxcXFwiXCIsXCLigKBcIjpcIitcIixcIuKAolwiOlwiKlwiLFwi4oCmXCI6XCIuLi5cIixcIuKCoFwiOlwiZWN1XCIsXCLigqJcIjpcImNydXplaXJvXCIsXCLigqNcIjpcImZyZW5jaCBmcmFuY1wiLFwi4oKkXCI6XCJsaXJhXCIsXCLigqVcIjpcIm1pbGxcIixcIuKCplwiOlwibmFpcmFcIixcIuKCp1wiOlwicGVzZXRhXCIsXCLigqhcIjpcInJ1cGVlXCIsXCLigqlcIjpcIndvblwiLFwi4oKqXCI6XCJuZXcgc2hlcXVlbFwiLFwi4oKrXCI6XCJkb25nXCIsXCLigqxcIjpcImV1cm9cIixcIuKCrVwiOlwia2lwXCIsXCLigq5cIjpcInR1Z3Jpa1wiLFwi4oKvXCI6XCJkcmFjaG1hXCIsXCLigrBcIjpcInBlbm55XCIsXCLigrFcIjpcInBlc29cIixcIuKCslwiOlwiZ3VhcmFuaVwiLFwi4oKzXCI6XCJhdXN0cmFsXCIsXCLigrRcIjpcImhyeXZuaWFcIixcIuKCtVwiOlwiY2VkaVwiLFwi4oK4XCI6XCJrYXpha2hzdGFuaSB0ZW5nZVwiLFwi4oK5XCI6XCJpbmRpYW4gcnVwZWVcIixcIuKCvVwiOlwicnVzc2lhbiBydWJsZVwiLFwi4oK/XCI6XCJiaXRjb2luXCIsXCLihKBcIjpcInNtXCIsXCLihKJcIjpcInRtXCIsXCLiiIJcIjpcImRcIixcIuKIhlwiOlwiZGVsdGFcIixcIuKIkVwiOlwic3VtXCIsXCLiiJ5cIjpcImluZmluaXR5XCIsXCLimaVcIjpcImxvdmVcIixcIuWFg1wiOlwieXVhblwiLFwi5YaGXCI6XCJ5ZW5cIixcIu+3vFwiOlwicmlhbFwifScpXG4gIHZhciBsb2NhbGVzID0gSlNPTi5wYXJzZSgne1widmlcIjp7XCLEkFwiOlwiRFwiLFwixJFcIjpcImRcIn19JylcblxuICBmdW5jdGlvbiByZXBsYWNlIChzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2x1Z2lmeTogc3RyaW5nIGFyZ3VtZW50IGV4cGVjdGVkJylcbiAgICB9XG5cbiAgICBvcHRpb25zID0gKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJylcbiAgICAgID8ge3JlcGxhY2VtZW50OiBvcHRpb25zfVxuICAgICAgOiBvcHRpb25zIHx8IHt9XG5cbiAgICB2YXIgbG9jYWxlID0gbG9jYWxlc1tvcHRpb25zLmxvY2FsZV0gfHwge31cblxuICAgIHZhciByZXBsYWNlbWVudCA9IG9wdGlvbnMucmVwbGFjZW1lbnQgfHwgJy0nXG5cbiAgICB2YXIgc2x1ZyA9IHN0cmluZy5zcGxpdCgnJylcbiAgICAgIC8vIHJlcGxhY2UgY2hhcmFjdGVycyBiYXNlZCBvbiBjaGFyTWFwXG4gICAgICAucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGNoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyAobG9jYWxlW2NoXSB8fCBjaGFyTWFwW2NoXSB8fCBjaClcbiAgICAgIH0sICcnKVxuICAgICAgLy8gcmVtb3ZlIG5vdCBhbGxvd2VkIGNoYXJhY3RlcnNcbiAgICAgIC5yZXBsYWNlKG9wdGlvbnMucmVtb3ZlIHx8IC9bXlxcd1xccyQqXyt+LigpJ1wiIVxcLTpAXSsvZywgJycpXG4gICAgICAvLyB0cmltIGxlYWRpbmcvdHJhaWxpbmcgc3BhY2VzXG4gICAgICAudHJpbSgpXG4gICAgICAvLyBjb252ZXJ0IHNwYWNlcyB0byByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgIC8vIGFsc28gcmVtb3ZlIGR1cGxpY2F0ZXMgb2YgdGhlIHJlcGxhY2VtZW50IGNoYXJhY3RlclxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCgnW1xcXFxzJyArIHJlcGxhY2VtZW50ICsgJ10rJywgJ2cnKSwgcmVwbGFjZW1lbnQpXG5cbiAgICBpZiAob3B0aW9ucy5sb3dlcikge1xuICAgICAgc2x1ZyA9IHNsdWcudG9Mb3dlckNhc2UoKVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnN0cmljdCkge1xuICAgICAgLy8gcmVtb3ZlIGFueXRoaW5nIGJlc2lkZXMgbGV0dGVycywgbnVtYmVycywgYW5kIHRoZSByZXBsYWNlbWVudCBjaGFyXG4gICAgICBzbHVnID0gc2x1Z1xuICAgICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCdbXmEtekEtWjAtOScgKyByZXBsYWNlbWVudCArICddJywgJ2cnKSwgJycpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNsdWdcbiAgfVxuXG4gIHJlcGxhY2UuZXh0ZW5kID0gZnVuY3Rpb24gKGN1c3RvbU1hcCkge1xuICAgIGZvciAodmFyIGtleSBpbiBjdXN0b21NYXApIHtcbiAgICAgIGNoYXJNYXBba2V5XSA9IGN1c3RvbU1hcFtrZXldXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlcGxhY2Vcbn0pKVxuIiwiLyohXG4gKiBtaW1lLXR5cGVzXG4gKiBDb3B5cmlnaHQoYykgMjAxNCBKb25hdGhhbiBPbmdcbiAqIENvcHlyaWdodChjKSAyMDE1IERvdWdsYXMgQ2hyaXN0b3BoZXIgV2lsc29uXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgZGIgPSByZXF1aXJlKCdtaW1lLWRiJylcbnZhciBleHRuYW1lID0gcmVxdWlyZSgncGF0aCcpLmV4dG5hbWVcblxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgRVhUUkFDVF9UWVBFX1JFR0VYUCA9IC9eXFxzKihbXjtcXHNdKikoPzo7fFxcc3wkKS9cbnZhciBURVhUX1RZUEVfUkVHRVhQID0gL150ZXh0XFwvL2lcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNoYXJzZXQgPSBjaGFyc2V0XG5leHBvcnRzLmNoYXJzZXRzID0geyBsb29rdXA6IGNoYXJzZXQgfVxuZXhwb3J0cy5jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlXG5leHBvcnRzLmV4dGVuc2lvbiA9IGV4dGVuc2lvblxuZXhwb3J0cy5leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuZXhwb3J0cy5sb29rdXAgPSBsb29rdXBcbmV4cG9ydHMudHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5cbi8vIFBvcHVsYXRlIHRoZSBleHRlbnNpb25zL3R5cGVzIG1hcHNcbnBvcHVsYXRlTWFwcyhleHBvcnRzLmV4dGVuc2lvbnMsIGV4cG9ydHMudHlwZXMpXG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGNoYXJzZXQgZm9yIGEgTUlNRSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBjaGFyc2V0ICh0eXBlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBtZWRpYS10eXBlclxuICB2YXIgbWF0Y2ggPSBFWFRSQUNUX1RZUEVfUkVHRVhQLmV4ZWModHlwZSlcbiAgdmFyIG1pbWUgPSBtYXRjaCAmJiBkYlttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmIChtaW1lICYmIG1pbWUuY2hhcnNldCkge1xuICAgIHJldHVybiBtaW1lLmNoYXJzZXRcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdGV4dC8qIHRvIHV0Zi04XG4gIGlmIChtYXRjaCAmJiBURVhUX1RZUEVfUkVHRVhQLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgcmV0dXJuICdVVEYtOCdcbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bGwgQ29udGVudC1UeXBlIGhlYWRlciBnaXZlbiBhIE1JTUUgdHlwZSBvciBleHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gY29udGVudFR5cGUgKHN0cikge1xuICAvLyBUT0RPOiBzaG91bGQgdGhpcyBldmVuIGJlIGluIHRoaXMgbW9kdWxlP1xuICBpZiAoIXN0ciB8fCB0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIG1pbWUgPSBzdHIuaW5kZXhPZignLycpID09PSAtMVxuICAgID8gZXhwb3J0cy5sb29rdXAoc3RyKVxuICAgIDogc3RyXG5cbiAgaWYgKCFtaW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgY29udGVudC10eXBlIG9yIG90aGVyIG1vZHVsZVxuICBpZiAobWltZS5pbmRleE9mKCdjaGFyc2V0JykgPT09IC0xKSB7XG4gICAgdmFyIGNoYXJzZXQgPSBleHBvcnRzLmNoYXJzZXQobWltZSlcbiAgICBpZiAoY2hhcnNldCkgbWltZSArPSAnOyBjaGFyc2V0PScgKyBjaGFyc2V0LnRvTG93ZXJDYXNlKClcbiAgfVxuXG4gIHJldHVybiBtaW1lXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IGV4dGVuc2lvbiBmb3IgYSBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGV4dGVuc2lvbiAodHlwZSkge1xuICBpZiAoIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBUT0RPOiB1c2UgbWVkaWEtdHlwZXJcbiAgdmFyIG1hdGNoID0gRVhUUkFDVF9UWVBFX1JFR0VYUC5leGVjKHR5cGUpXG5cbiAgLy8gZ2V0IGV4dGVuc2lvbnNcbiAgdmFyIGV4dHMgPSBtYXRjaCAmJiBleHBvcnRzLmV4dGVuc2lvbnNbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV1cblxuICBpZiAoIWV4dHMgfHwgIWV4dHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gZXh0c1swXVxufVxuXG4vKipcbiAqIExvb2t1cCB0aGUgTUlNRSB0eXBlIGZvciBhIGZpbGUgcGF0aC9leHRlbnNpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAocGF0aCkge1xuICBpZiAoIXBhdGggfHwgdHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBnZXQgdGhlIGV4dGVuc2lvbiAoXCJleHRcIiBvciBcIi5leHRcIiBvciBmdWxsIHBhdGgpXG4gIHZhciBleHRlbnNpb24gPSBleHRuYW1lKCd4LicgKyBwYXRoKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnN1YnN0cigxKVxuXG4gIGlmICghZXh0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy50eXBlc1tleHRlbnNpb25dIHx8IGZhbHNlXG59XG5cbi8qKlxuICogUG9wdWxhdGUgdGhlIGV4dGVuc2lvbnMgYW5kIHR5cGVzIG1hcHMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvcHVsYXRlTWFwcyAoZXh0ZW5zaW9ucywgdHlwZXMpIHtcbiAgLy8gc291cmNlIHByZWZlcmVuY2UgKGxlYXN0IC0+IG1vc3QpXG4gIHZhciBwcmVmZXJlbmNlID0gWyduZ2lueCcsICdhcGFjaGUnLCB1bmRlZmluZWQsICdpYW5hJ11cblxuICBPYmplY3Qua2V5cyhkYikuZm9yRWFjaChmdW5jdGlvbiBmb3JFYWNoTWltZVR5cGUgKHR5cGUpIHtcbiAgICB2YXIgbWltZSA9IGRiW3R5cGVdXG4gICAgdmFyIGV4dHMgPSBtaW1lLmV4dGVuc2lvbnNcblxuICAgIGlmICghZXh0cyB8fCAhZXh0cy5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIG1pbWUgLT4gZXh0ZW5zaW9uc1xuICAgIGV4dGVuc2lvbnNbdHlwZV0gPSBleHRzXG5cbiAgICAvLyBleHRlbnNpb24gLT4gbWltZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXh0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGV4dGVuc2lvbiA9IGV4dHNbaV1cblxuICAgICAgaWYgKHR5cGVzW2V4dGVuc2lvbl0pIHtcbiAgICAgICAgdmFyIGZyb20gPSBwcmVmZXJlbmNlLmluZGV4T2YoZGJbdHlwZXNbZXh0ZW5zaW9uXV0uc291cmNlKVxuICAgICAgICB2YXIgdG8gPSBwcmVmZXJlbmNlLmluZGV4T2YobWltZS5zb3VyY2UpXG5cbiAgICAgICAgaWYgKHR5cGVzW2V4dGVuc2lvbl0gIT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nICYmXG4gICAgICAgICAgKGZyb20gPiB0byB8fCAoZnJvbSA9PT0gdG8gJiYgdHlwZXNbZXh0ZW5zaW9uXS5zdWJzdHIoMCwgMTIpID09PSAnYXBwbGljYXRpb24vJykpKSB7XG4gICAgICAgICAgLy8gc2tpcCB0aGUgcmVtYXBwaW5nXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzZXQgdGhlIGV4dGVuc2lvbiAtPiBtaW1lXG4gICAgICB0eXBlc1tleHRlbnNpb25dID0gdHlwZVxuICAgIH1cbiAgfSlcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMuQXJndW1lbnRQYXJzZXIgPSByZXF1aXJlKCcuL2FyZ3VtZW50X3BhcnNlci5qcycpO1xubW9kdWxlLmV4cG9ydHMuTmFtZXNwYWNlID0gcmVxdWlyZSgnLi9uYW1lc3BhY2UnKTtcbm1vZHVsZS5leHBvcnRzLkFjdGlvbiA9IHJlcXVpcmUoJy4vYWN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cy5IZWxwRm9ybWF0dGVyID0gcmVxdWlyZSgnLi9oZWxwL2Zvcm1hdHRlci5qcycpO1xubW9kdWxlLmV4cG9ydHMuQ29uc3QgPSByZXF1aXJlKCcuL2NvbnN0LmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzLkFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyID1cbiAgcmVxdWlyZSgnLi9oZWxwL2FkZGVkX2Zvcm1hdHRlcnMuanMnKS5Bcmd1bWVudERlZmF1bHRzSGVscEZvcm1hdHRlcjtcbm1vZHVsZS5leHBvcnRzLlJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlciA9XG4gIHJlcXVpcmUoJy4vaGVscC9hZGRlZF9mb3JtYXR0ZXJzLmpzJykuUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyO1xubW9kdWxlLmV4cG9ydHMuUmF3VGV4dEhlbHBGb3JtYXR0ZXIgPVxuICByZXF1aXJlKCcuL2hlbHAvYWRkZWRfZm9ybWF0dGVycy5qcycpLlJhd1RleHRIZWxwRm9ybWF0dGVyO1xuIiwiLyoqXG4gKiBjbGFzcyBBcmd1bWVudFBhcnNlclxuICpcbiAqIE9iamVjdCBmb3IgcGFyc2luZyBjb21tYW5kIGxpbmUgc3RyaW5ncyBpbnRvIGpzIG9iamVjdHMuXG4gKlxuICogSW5oZXJpdGVkIGZyb20gW1tBY3Rpb25Db250YWluZXJdXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCAgICA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBmb3JtYXQgID0gcmVxdWlyZSgndXRpbCcpLmZvcm1hdDtcbnZhciBQYXRoICAgID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIHNwcmludGYgPSByZXF1aXJlKCdzcHJpbnRmLWpzJykuc3ByaW50ZjtcblxuLy8gQ29uc3RhbnRzXG52YXIgYyA9IHJlcXVpcmUoJy4vY29uc3QnKTtcblxudmFyICQkID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgQWN0aW9uQ29udGFpbmVyID0gcmVxdWlyZSgnLi9hY3Rpb25fY29udGFpbmVyJyk7XG5cbi8vIEVycm9yc1xudmFyIGFyZ3VtZW50RXJyb3JIZWxwZXIgPSByZXF1aXJlKCcuL2FyZ3VtZW50L2Vycm9yJyk7XG5cbnZhciBIZWxwRm9ybWF0dGVyID0gcmVxdWlyZSgnLi9oZWxwL2Zvcm1hdHRlcicpO1xuXG52YXIgTmFtZXNwYWNlID0gcmVxdWlyZSgnLi9uYW1lc3BhY2UnKTtcblxuXG4vKipcbiAqIG5ldyBBcmd1bWVudFBhcnNlcihvcHRpb25zKVxuICpcbiAqIENyZWF0ZSBhIG5ldyBBcmd1bWVudFBhcnNlciBvYmplY3QuXG4gKlxuICogIyMjIyMgT3B0aW9uczpcbiAqIC0gYHByb2dgICBUaGUgbmFtZSBvZiB0aGUgcHJvZ3JhbSAoZGVmYXVsdDogUGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0pKVxuICogLSBgdXNhZ2VgICBBIHVzYWdlIG1lc3NhZ2UgKGRlZmF1bHQ6IGF1dG8tZ2VuZXJhdGVkIGZyb20gYXJndW1lbnRzKVxuICogLSBgZGVzY3JpcHRpb25gICBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIHByb2dyYW0gZG9lc1xuICogLSBgZXBpbG9nYCAgVGV4dCBmb2xsb3dpbmcgdGhlIGFyZ3VtZW50IGRlc2NyaXB0aW9uc1xuICogLSBgcGFyZW50c2AgIFBhcnNlcnMgd2hvc2UgYXJndW1lbnRzIHNob3VsZCBiZSBjb3BpZWQgaW50byB0aGlzIG9uZVxuICogLSBgZm9ybWF0dGVyQ2xhc3NgICBIZWxwRm9ybWF0dGVyIGNsYXNzIGZvciBwcmludGluZyBoZWxwIG1lc3NhZ2VzXG4gKiAtIGBwcmVmaXhDaGFyc2AgIENoYXJhY3RlcnMgdGhhdCBwcmVmaXggb3B0aW9uYWwgYXJndW1lbnRzXG4gKiAtIGBmcm9tZmlsZVByZWZpeENoYXJzYCBDaGFyYWN0ZXJzIHRoYXQgcHJlZml4IGZpbGVzIGNvbnRhaW5pbmcgYWRkaXRpb25hbCBhcmd1bWVudHNcbiAqIC0gYGFyZ3VtZW50RGVmYXVsdGAgIFRoZSBkZWZhdWx0IHZhbHVlIGZvciBhbGwgYXJndW1lbnRzXG4gKiAtIGBhZGRIZWxwYCAgQWRkIGEgLWgvLWhlbHAgb3B0aW9uXG4gKiAtIGBjb25mbGljdEhhbmRsZXJgICBTcGVjaWZpZXMgaG93IHRvIGhhbmRsZSBjb25mbGljdGluZyBhcmd1bWVudCBuYW1lc1xuICogLSBgZGVidWdgICBFbmFibGUgZGVidWcgbW9kZS4gQXJndW1lbnQgZXJyb3JzIHRocm93IGV4Y2VwdGlvbiBpblxuICogICBkZWJ1ZyBtb2RlIGFuZCBwcm9jZXNzLmV4aXQgaW4gbm9ybWFsLiBVc2VkIGZvciBkZXZlbG9wbWVudCBhbmRcbiAqICAgdGVzdGluZyAoZGVmYXVsdDogZmFsc2UpXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjYXJndW1lbnRwYXJzZXItb2JqZWN0c1xuICoqL1xuZnVuY3Rpb24gQXJndW1lbnRQYXJzZXIob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQXJndW1lbnRQYXJzZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBBcmd1bWVudFBhcnNlcihvcHRpb25zKTtcbiAgfVxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIG9wdGlvbnMuZGVzY3JpcHRpb24gPSAob3B0aW9ucy5kZXNjcmlwdGlvbiB8fCBudWxsKTtcbiAgb3B0aW9ucy5hcmd1bWVudERlZmF1bHQgPSAob3B0aW9ucy5hcmd1bWVudERlZmF1bHQgfHwgbnVsbCk7XG4gIG9wdGlvbnMucHJlZml4Q2hhcnMgPSAob3B0aW9ucy5wcmVmaXhDaGFycyB8fCAnLScpO1xuICBvcHRpb25zLmNvbmZsaWN0SGFuZGxlciA9IChvcHRpb25zLmNvbmZsaWN0SGFuZGxlciB8fCAnZXJyb3InKTtcbiAgQWN0aW9uQ29udGFpbmVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgb3B0aW9ucy5hZGRIZWxwID0gdHlwZW9mIG9wdGlvbnMuYWRkSGVscCA9PT0gJ3VuZGVmaW5lZCcgfHwgISFvcHRpb25zLmFkZEhlbHA7XG4gIG9wdGlvbnMucGFyZW50cyA9IG9wdGlvbnMucGFyZW50cyB8fCBbXTtcbiAgLy8gZGVmYXVsdCBwcm9ncmFtIG5hbWVcbiAgb3B0aW9ucy5wcm9nID0gKG9wdGlvbnMucHJvZyB8fCBQYXRoLmJhc2VuYW1lKHByb2Nlc3MuYXJndlsxXSkpO1xuICB0aGlzLnByb2cgPSBvcHRpb25zLnByb2c7XG4gIHRoaXMudXNhZ2UgPSBvcHRpb25zLnVzYWdlO1xuICB0aGlzLmVwaWxvZyA9IG9wdGlvbnMuZXBpbG9nO1xuICB0aGlzLnZlcnNpb24gPSBvcHRpb25zLnZlcnNpb247XG5cbiAgdGhpcy5kZWJ1ZyA9IChvcHRpb25zLmRlYnVnID09PSB0cnVlKTtcblxuICB0aGlzLmZvcm1hdHRlckNsYXNzID0gKG9wdGlvbnMuZm9ybWF0dGVyQ2xhc3MgfHwgSGVscEZvcm1hdHRlcik7XG4gIHRoaXMuZnJvbWZpbGVQcmVmaXhDaGFycyA9IG9wdGlvbnMuZnJvbWZpbGVQcmVmaXhDaGFycyB8fCBudWxsO1xuICB0aGlzLl9wb3NpdGlvbmFscyA9IHRoaXMuYWRkQXJndW1lbnRHcm91cCh7IHRpdGxlOiAnUG9zaXRpb25hbCBhcmd1bWVudHMnIH0pO1xuICB0aGlzLl9vcHRpb25hbHMgPSB0aGlzLmFkZEFyZ3VtZW50R3JvdXAoeyB0aXRsZTogJ09wdGlvbmFsIGFyZ3VtZW50cycgfSk7XG4gIHRoaXMuX3N1YnBhcnNlcnMgPSBudWxsO1xuXG4gIC8vIHJlZ2lzdGVyIHR5cGVzXG4gIGZ1bmN0aW9uIEZVTkNUSU9OX0lERU5USVRZKG8pIHtcbiAgICByZXR1cm4gbztcbiAgfVxuICB0aGlzLnJlZ2lzdGVyKCd0eXBlJywgJ2F1dG8nLCBGVU5DVElPTl9JREVOVElUWSk7XG4gIHRoaXMucmVnaXN0ZXIoJ3R5cGUnLCBudWxsLCBGVU5DVElPTl9JREVOVElUWSk7XG4gIHRoaXMucmVnaXN0ZXIoJ3R5cGUnLCAnaW50JywgZnVuY3Rpb24gKHgpIHtcbiAgICB2YXIgcmVzdWx0ID0gcGFyc2VJbnQoeCwgMTApO1xuICAgIGlmIChpc05hTihyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoeCArICcgaXMgbm90IGEgdmFsaWQgaW50ZWdlci4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG4gIHRoaXMucmVnaXN0ZXIoJ3R5cGUnLCAnZmxvYXQnLCBmdW5jdGlvbiAoeCkge1xuICAgIHZhciByZXN1bHQgPSBwYXJzZUZsb2F0KHgpO1xuICAgIGlmIChpc05hTihyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoeCArICcgaXMgbm90IGEgdmFsaWQgZmxvYXQuJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0pO1xuICB0aGlzLnJlZ2lzdGVyKCd0eXBlJywgJ3N0cmluZycsIGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuICcnICsgeDtcbiAgfSk7XG5cbiAgLy8gYWRkIGhlbHAgYW5kIHZlcnNpb24gYXJndW1lbnRzIGlmIG5lY2Vzc2FyeVxuICB2YXIgZGVmYXVsdFByZWZpeCA9ICh0aGlzLnByZWZpeENoYXJzLmluZGV4T2YoJy0nKSA+IC0xKSA/ICctJyA6IHRoaXMucHJlZml4Q2hhcnNbMF07XG4gIGlmIChvcHRpb25zLmFkZEhlbHApIHtcbiAgICB0aGlzLmFkZEFyZ3VtZW50KFxuICAgICAgWyBkZWZhdWx0UHJlZml4ICsgJ2gnLCBkZWZhdWx0UHJlZml4ICsgZGVmYXVsdFByZWZpeCArICdoZWxwJyBdLFxuICAgICAge1xuICAgICAgICBhY3Rpb246ICdoZWxwJyxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBjLlNVUFBSRVNTLFxuICAgICAgICBoZWxwOiAnU2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdC4nXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICBpZiAodHlwZW9mIHRoaXMudmVyc2lvbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aGlzLmFkZEFyZ3VtZW50KFxuICAgICAgWyBkZWZhdWx0UHJlZml4ICsgJ3YnLCBkZWZhdWx0UHJlZml4ICsgZGVmYXVsdFByZWZpeCArICd2ZXJzaW9uJyBdLFxuICAgICAge1xuICAgICAgICBhY3Rpb246ICd2ZXJzaW9uJyxcbiAgICAgICAgdmVyc2lvbjogdGhpcy52ZXJzaW9uLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGMuU1VQUFJFU1MsXG4gICAgICAgIGhlbHA6IFwiU2hvdyBwcm9ncmFtJ3MgdmVyc2lvbiBudW1iZXIgYW5kIGV4aXQuXCJcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgLy8gYWRkIHBhcmVudCBhcmd1bWVudHMgYW5kIGRlZmF1bHRzXG4gIG9wdGlvbnMucGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICBzZWxmLl9hZGRDb250YWluZXJBY3Rpb25zKHBhcmVudCk7XG4gICAgaWYgKHR5cGVvZiBwYXJlbnQuX2RlZmF1bHRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yICh2YXIgZGVmYXVsdEtleSBpbiBwYXJlbnQuX2RlZmF1bHRzKSB7XG4gICAgICAgIGlmIChwYXJlbnQuX2RlZmF1bHRzLmhhc093blByb3BlcnR5KGRlZmF1bHRLZXkpKSB7XG4gICAgICAgICAgc2VsZi5fZGVmYXVsdHNbZGVmYXVsdEtleV0gPSBwYXJlbnQuX2RlZmF1bHRzW2RlZmF1bHRLZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxudXRpbC5pbmhlcml0cyhBcmd1bWVudFBhcnNlciwgQWN0aW9uQ29udGFpbmVyKTtcblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNhZGRTdWJwYXJzZXJzKG9wdGlvbnMpIC0+IFtbQWN0aW9uU3VicGFyc2Vyc11dXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IGhhc2ggb2Ygb3B0aW9ucyBzZWUgW1tBY3Rpb25TdWJwYXJzZXJzLm5ld11dXG4gKlxuICogU2VlIGFsc28gW3N1YmNvbW1hbmRzXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjc3ViLWNvbW1hbmRzXG4gKiovXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuYWRkU3VicGFyc2VycyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGlmICh0aGlzLl9zdWJwYXJzZXJzKSB7XG4gICAgdGhpcy5lcnJvcignQ2Fubm90IGhhdmUgbXVsdGlwbGUgc3VicGFyc2VyIGFyZ3VtZW50cy4nKTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmRlYnVnID0gKHRoaXMuZGVidWcgPT09IHRydWUpO1xuICBvcHRpb25zLm9wdGlvblN0cmluZ3MgPSBbXTtcbiAgb3B0aW9ucy5wYXJzZXJDbGFzcyA9IChvcHRpb25zLnBhcnNlckNsYXNzIHx8IEFyZ3VtZW50UGFyc2VyKTtcblxuXG4gIGlmICghIW9wdGlvbnMudGl0bGUgfHwgISFvcHRpb25zLmRlc2NyaXB0aW9uKSB7XG5cbiAgICB0aGlzLl9zdWJwYXJzZXJzID0gdGhpcy5hZGRBcmd1bWVudEdyb3VwKHtcbiAgICAgIHRpdGxlOiAob3B0aW9ucy50aXRsZSB8fCAnc3ViY29tbWFuZHMnKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uXG4gICAgfSk7XG4gICAgZGVsZXRlIG9wdGlvbnMudGl0bGU7XG4gICAgZGVsZXRlIG9wdGlvbnMuZGVzY3JpcHRpb247XG5cbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zdWJwYXJzZXJzID0gdGhpcy5fcG9zaXRpb25hbHM7XG4gIH1cblxuICAvLyBwcm9nIGRlZmF1bHRzIHRvIHRoZSB1c2FnZSBtZXNzYWdlIG9mIHRoaXMgcGFyc2VyLCBza2lwcGluZ1xuICAvLyBvcHRpb25hbCBhcmd1bWVudHMgYW5kIHdpdGggbm8gXCJ1c2FnZTpcIiBwcmVmaXhcbiAgaWYgKCFvcHRpb25zLnByb2cpIHtcbiAgICB2YXIgZm9ybWF0dGVyID0gdGhpcy5fZ2V0Rm9ybWF0dGVyKCk7XG4gICAgdmFyIHBvc2l0aW9uYWxzID0gdGhpcy5fZ2V0UG9zaXRpb25hbEFjdGlvbnMoKTtcbiAgICB2YXIgZ3JvdXBzID0gdGhpcy5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHM7XG4gICAgZm9ybWF0dGVyLmFkZFVzYWdlKHRoaXMudXNhZ2UsIHBvc2l0aW9uYWxzLCBncm91cHMsICcnKTtcbiAgICBvcHRpb25zLnByb2cgPSBmb3JtYXR0ZXIuZm9ybWF0SGVscCgpLnRyaW0oKTtcbiAgfVxuXG4gIC8vIGNyZWF0ZSB0aGUgcGFyc2VycyBhY3Rpb24gYW5kIGFkZCBpdCB0byB0aGUgcG9zaXRpb25hbHMgbGlzdFxuICB2YXIgUGFyc2Vyc0NsYXNzID0gdGhpcy5fcG9wQWN0aW9uQ2xhc3Mob3B0aW9ucywgJ3BhcnNlcnMnKTtcbiAgdmFyIGFjdGlvbiA9IG5ldyBQYXJzZXJzQ2xhc3Mob3B0aW9ucyk7XG4gIHRoaXMuX3N1YnBhcnNlcnMuX2FkZEFjdGlvbihhY3Rpb24pO1xuXG4gIC8vIHJldHVybiB0aGUgY3JlYXRlZCBwYXJzZXJzIGFjdGlvblxuICByZXR1cm4gYWN0aW9uO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9hZGRBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIGlmIChhY3Rpb24uaXNPcHRpb25hbCgpKSB7XG4gICAgdGhpcy5fb3B0aW9uYWxzLl9hZGRBY3Rpb24oYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9wb3NpdGlvbmFscy5fYWRkQWN0aW9uKGFjdGlvbik7XG4gIH1cbiAgcmV0dXJuIGFjdGlvbjtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0T3B0aW9uYWxBY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5fYWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIHJldHVybiBhY3Rpb24uaXNPcHRpb25hbCgpO1xuICB9KTtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0UG9zaXRpb25hbEFjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9hY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbi5pc1Bvc2l0aW9uYWwoKTtcbiAgfSk7XG59O1xuXG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjcGFyc2VBcmdzKGFyZ3MsIG5hbWVzcGFjZSkgLT4gTmFtZXNwYWNlfE9iamVjdFxuICogLSBhcmdzIChhcnJheSk6IGlucHV0IGVsZW1lbnRzXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlfE9iamVjdCk6IHJlc3VsdCBvYmplY3RcbiAqXG4gKiBQYXJzZWQgYXJncyBhbmQgdGhyb3dzIGVycm9yIGlmIHNvbWUgYXJndW1lbnRzIGFyZSBub3QgcmVjb2duaXplZFxuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV1bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI3RoZS1wYXJzZS1hcmdzLW1ldGhvZFxuICoqL1xuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLnBhcnNlQXJncyA9IGZ1bmN0aW9uIChhcmdzLCBuYW1lc3BhY2UpIHtcbiAgdmFyIGFyZ3Y7XG4gIHZhciByZXN1bHQgPSB0aGlzLnBhcnNlS25vd25BcmdzKGFyZ3MsIG5hbWVzcGFjZSk7XG5cbiAgYXJncyA9IHJlc3VsdFswXTtcbiAgYXJndiA9IHJlc3VsdFsxXTtcbiAgaWYgKGFyZ3YgJiYgYXJndi5sZW5ndGggPiAwKSB7XG4gICAgdGhpcy5lcnJvcihcbiAgICAgIGZvcm1hdCgnVW5yZWNvZ25pemVkIGFyZ3VtZW50czogJXMuJywgYXJndi5qb2luKCcgJykpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gYXJncztcbn07XG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjcGFyc2VLbm93bkFyZ3MoYXJncywgbmFtZXNwYWNlKSAtPiBhcnJheVxuICogLSBhcmdzIChhcnJheSk6IGlucHV0IG9wdGlvbnNcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2V8T2JqZWN0KTogcmVzdWx0IG9iamVjdFxuICpcbiAqIFBhcnNlIGtub3duIGFyZ3VtZW50cyBhbmQgcmV0dXJuIHR1cGxlIG9mIHJlc3VsdCBvYmplY3RcbiAqIGFuZCB1bmtub3duIGFyZ3NcbiAqXG4gKiBTZWUgYWxzbyBbb3JpZ2luYWwgZ3VpZGVdWzFdXG4gKlxuICogWzFdOmh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvZGV2L2xpYnJhcnkvYXJncGFyc2UuaHRtbCNwYXJ0aWFsLXBhcnNpbmdcbiAqKi9cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5wYXJzZUtub3duQXJncyA9IGZ1bmN0aW9uIChhcmdzLCBuYW1lc3BhY2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGFyZ3MgZGVmYXVsdCB0byB0aGUgc3lzdGVtIGFyZ3NcbiAgYXJncyA9IGFyZ3MgfHwgcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuXG4gIC8vIGRlZmF1bHQgTmFtZXNwYWNlIGJ1aWx0IGZyb20gcGFyc2VyIGRlZmF1bHRzXG4gIG5hbWVzcGFjZSA9IG5hbWVzcGFjZSB8fCBuZXcgTmFtZXNwYWNlKCk7XG5cbiAgc2VsZi5fYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBpZiAoYWN0aW9uLmRlc3QgIT09IGMuU1VQUFJFU1MpIHtcbiAgICAgIGlmICghJCQuaGFzKG5hbWVzcGFjZSwgYWN0aW9uLmRlc3QpKSB7XG4gICAgICAgIGlmIChhY3Rpb24uZGVmYXVsdFZhbHVlICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGFjdGlvbi5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24uZGVmYXVsdFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZGVmYXVsdFZhbHVlID0gc2VsZi5fZ2V0VmFsdWUoYWN0aW9uLCBkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuYW1lc3BhY2VbYWN0aW9uLmRlc3RdID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBPYmplY3Qua2V5cyhzZWxmLl9kZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbiAoZGVzdCkge1xuICAgIG5hbWVzcGFjZVtkZXN0XSA9IHNlbGYuX2RlZmF1bHRzW2Rlc3RdO1xuICB9KTtcblxuICAvLyBwYXJzZSB0aGUgYXJndW1lbnRzIGFuZCBleGl0IGlmIHRoZXJlIGFyZSBhbnkgZXJyb3JzXG4gIHRyeSB7XG4gICAgdmFyIHJlcyA9IHRoaXMuX3BhcnNlS25vd25BcmdzKGFyZ3MsIG5hbWVzcGFjZSk7XG5cbiAgICBuYW1lc3BhY2UgPSByZXNbMF07XG4gICAgYXJncyA9IHJlc1sxXTtcbiAgICBpZiAoJCQuaGFzKG5hbWVzcGFjZSwgYy5fVU5SRUNPR05JWkVEX0FSR1NfQVRUUikpIHtcbiAgICAgIGFyZ3MgPSAkJC5hcnJheVVuaW9uKGFyZ3MsIG5hbWVzcGFjZVtjLl9VTlJFQ09HTklaRURfQVJHU19BVFRSXSk7XG4gICAgICBkZWxldGUgbmFtZXNwYWNlW2MuX1VOUkVDT0dOSVpFRF9BUkdTX0FUVFJdO1xuICAgIH1cbiAgICByZXR1cm4gWyBuYW1lc3BhY2UsIGFyZ3MgXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMuZXJyb3IoZSk7XG4gIH1cbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fcGFyc2VLbm93bkFyZ3MgPSBmdW5jdGlvbiAoYXJnU3RyaW5ncywgbmFtZXNwYWNlKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB2YXIgZXh0cmFzID0gW107XG5cbiAgLy8gcmVwbGFjZSBhcmcgc3RyaW5ncyB0aGF0IGFyZSBmaWxlIHJlZmVyZW5jZXNcbiAgaWYgKHRoaXMuZnJvbWZpbGVQcmVmaXhDaGFycyAhPT0gbnVsbCkge1xuICAgIGFyZ1N0cmluZ3MgPSB0aGlzLl9yZWFkQXJnc0Zyb21GaWxlcyhhcmdTdHJpbmdzKTtcbiAgfVxuICAvLyBtYXAgYWxsIG11dHVhbGx5IGV4Y2x1c2l2ZSBhcmd1bWVudHMgdG8gdGhlIG90aGVyIGFyZ3VtZW50c1xuICAvLyB0aGV5IGNhbid0IG9jY3VyIHdpdGhcbiAgLy8gUHl0aG9uIGhhcyAnY29uZmxpY3RzID0gYWN0aW9uX2NvbmZsaWN0cy5zZXRkZWZhdWx0KG11dGV4X2FjdGlvbiwgW10pJ1xuICAvLyB0aG91Z2ggSSBjYW4ndCBjb25jZWl2ZSBvZiBhIHdheSBpbiB3aGljaCBhbiBhY3Rpb24gY291bGQgYmUgYSBtZW1iZXJcbiAgLy8gb2YgdHdvIGRpZmZlcmVudCBtdXR1YWxseSBleGNsdXNpdmUgZ3JvdXBzLlxuXG4gIGZ1bmN0aW9uIGFjdGlvbkhhc2goYWN0aW9uKSB7XG4gICAgLy8gc29tZSBzb3J0IG9mIGhhc2hhYmxlIGtleSBmb3IgdGhpcyBhY3Rpb25cbiAgICAvLyBhY3Rpb24gaXRzZWxmIGNhbm5vdCBiZSBhIGtleSBpbiBhY3Rpb25Db25mbGljdHNcbiAgICAvLyBJIHRoaW5rIGdldE5hbWUoKSAoam9pbiBvZiBvcHRpb25TdHJpbmdzKSBpcyB1bmlxdWUgZW5vdWdoXG4gICAgcmV0dXJuIGFjdGlvbi5nZXROYW1lKCk7XG4gIH1cblxuICB2YXIgY29uZmxpY3RzLCBrZXk7XG4gIHZhciBhY3Rpb25Db25mbGljdHMgPSB7fTtcblxuICB0aGlzLl9tdXR1YWxseUV4Y2x1c2l2ZUdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRleEdyb3VwKSB7XG4gICAgbXV0ZXhHcm91cC5fZ3JvdXBBY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGV4QWN0aW9uLCBpLCBncm91cEFjdGlvbnMpIHtcbiAgICAgIGtleSA9IGFjdGlvbkhhc2gobXV0ZXhBY3Rpb24pO1xuICAgICAgaWYgKCEkJC5oYXMoYWN0aW9uQ29uZmxpY3RzLCBrZXkpKSB7XG4gICAgICAgIGFjdGlvbkNvbmZsaWN0c1trZXldID0gW107XG4gICAgICB9XG4gICAgICBjb25mbGljdHMgPSBhY3Rpb25Db25mbGljdHNba2V5XTtcbiAgICAgIGNvbmZsaWN0cy5wdXNoLmFwcGx5KGNvbmZsaWN0cywgZ3JvdXBBY3Rpb25zLnNsaWNlKDAsIGkpKTtcbiAgICAgIGNvbmZsaWN0cy5wdXNoLmFwcGx5KGNvbmZsaWN0cywgZ3JvdXBBY3Rpb25zLnNsaWNlKGkgKyAxKSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vIGZpbmQgYWxsIG9wdGlvbiBpbmRpY2VzLCBhbmQgZGV0ZXJtaW5lIHRoZSBhcmdfc3RyaW5nX3BhdHRlcm5cbiAgLy8gd2hpY2ggaGFzIGFuICdPJyBpZiB0aGVyZSBpcyBhbiBvcHRpb24gYXQgYW4gaW5kZXgsXG4gIC8vIGFuICdBJyBpZiB0aGVyZSBpcyBhbiBhcmd1bWVudCwgb3IgYSAnLScgaWYgdGhlcmUgaXMgYSAnLS0nXG4gIHZhciBvcHRpb25TdHJpbmdJbmRpY2VzID0ge307XG5cbiAgdmFyIGFyZ1N0cmluZ1BhdHRlcm5QYXJ0cyA9IFtdO1xuXG4gIGFyZ1N0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnU3RyaW5nLCBhcmdTdHJpbmdJbmRleCkge1xuICAgIGlmIChhcmdTdHJpbmcgPT09ICctLScpIHtcbiAgICAgIGFyZ1N0cmluZ1BhdHRlcm5QYXJ0cy5wdXNoKCctJyk7XG4gICAgICB3aGlsZSAoYXJnU3RyaW5nSW5kZXggPCBhcmdTdHJpbmdzLmxlbmd0aCkge1xuICAgICAgICBhcmdTdHJpbmdQYXR0ZXJuUGFydHMucHVzaCgnQScpO1xuICAgICAgICBhcmdTdHJpbmdJbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UsIGFkZCB0aGUgYXJnIHRvIHRoZSBhcmcgc3RyaW5nc1xuICAgICAgLy8gYW5kIG5vdGUgdGhlIGluZGV4IGlmIGl0IHdhcyBhbiBvcHRpb25cbiAgICAgIHZhciBwYXR0ZXJuO1xuICAgICAgdmFyIG9wdGlvblR1cGxlID0gc2VsZi5fcGFyc2VPcHRpb25hbChhcmdTdHJpbmcpO1xuICAgICAgaWYgKCFvcHRpb25UdXBsZSkge1xuICAgICAgICBwYXR0ZXJuID0gJ0EnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9uU3RyaW5nSW5kaWNlc1thcmdTdHJpbmdJbmRleF0gPSBvcHRpb25UdXBsZTtcbiAgICAgICAgcGF0dGVybiA9ICdPJztcbiAgICAgIH1cbiAgICAgIGFyZ1N0cmluZ1BhdHRlcm5QYXJ0cy5wdXNoKHBhdHRlcm4pO1xuICAgIH1cbiAgfSk7XG4gIHZhciBhcmdTdHJpbmdzUGF0dGVybiA9IGFyZ1N0cmluZ1BhdHRlcm5QYXJ0cy5qb2luKCcnKTtcblxuICB2YXIgc2VlbkFjdGlvbnMgPSBbXTtcbiAgdmFyIHNlZW5Ob25EZWZhdWx0QWN0aW9ucyA9IFtdO1xuXG5cbiAgZnVuY3Rpb24gdGFrZUFjdGlvbihhY3Rpb24sIGFyZ3VtZW50U3RyaW5ncywgb3B0aW9uU3RyaW5nKSB7XG4gICAgc2VlbkFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgIHZhciBhcmd1bWVudFZhbHVlcyA9IHNlbGYuX2dldFZhbHVlcyhhY3Rpb24sIGFyZ3VtZW50U3RyaW5ncyk7XG5cbiAgICAvLyBlcnJvciBpZiB0aGlzIGFyZ3VtZW50IGlzIG5vdCBhbGxvd2VkIHdpdGggb3RoZXIgcHJldmlvdXNseVxuICAgIC8vIHNlZW4gYXJndW1lbnRzLCBhc3N1bWluZyB0aGF0IGFjdGlvbnMgdGhhdCB1c2UgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBkb24ndCByZWFsbHkgY291bnQgYXMgXCJwcmVzZW50XCJcbiAgICBpZiAoYXJndW1lbnRWYWx1ZXMgIT09IGFjdGlvbi5kZWZhdWx0VmFsdWUpIHtcbiAgICAgIHNlZW5Ob25EZWZhdWx0QWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgICBpZiAoYWN0aW9uQ29uZmxpY3RzW2FjdGlvbkhhc2goYWN0aW9uKV0pIHtcbiAgICAgICAgYWN0aW9uQ29uZmxpY3RzW2FjdGlvbkhhc2goYWN0aW9uKV0uZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uQ29uZmxpY3QpIHtcbiAgICAgICAgICBpZiAoc2Vlbk5vbkRlZmF1bHRBY3Rpb25zLmluZGV4T2YoYWN0aW9uQ29uZmxpY3QpID49IDApIHtcbiAgICAgICAgICAgIHRocm93IGFyZ3VtZW50RXJyb3JIZWxwZXIoXG4gICAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgICAgZm9ybWF0KCdOb3QgYWxsb3dlZCB3aXRoIGFyZ3VtZW50IFwiJXNcIi4nLCBhY3Rpb25Db25mbGljdC5nZXROYW1lKCkpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3VtZW50VmFsdWVzICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgICBhY3Rpb24uY2FsbChzZWxmLCBuYW1lc3BhY2UsIGFyZ3VtZW50VmFsdWVzLCBvcHRpb25TdHJpbmcpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnN1bWVPcHRpb25hbChzdGFydEluZGV4KSB7XG4gICAgLy8gZ2V0IHRoZSBvcHRpb25hbCBpZGVudGlmaWVkIGF0IHRoaXMgaW5kZXhcbiAgICB2YXIgb3B0aW9uVHVwbGUgPSBvcHRpb25TdHJpbmdJbmRpY2VzW3N0YXJ0SW5kZXhdO1xuICAgIHZhciBhY3Rpb24gPSBvcHRpb25UdXBsZVswXTtcbiAgICB2YXIgb3B0aW9uU3RyaW5nID0gb3B0aW9uVHVwbGVbMV07XG4gICAgdmFyIGV4cGxpY2l0QXJnID0gb3B0aW9uVHVwbGVbMl07XG5cbiAgICAvLyBpZGVudGlmeSBhZGRpdGlvbmFsIG9wdGlvbmFscyBpbiB0aGUgc2FtZSBhcmcgc3RyaW5nXG4gICAgLy8gKGUuZy4gLXh5eiBpcyB0aGUgc2FtZSBhcyAteCAteSAteiBpZiBubyBhcmdzIGFyZSByZXF1aXJlZClcbiAgICB2YXIgYWN0aW9uVHVwbGVzID0gW107XG5cbiAgICB2YXIgYXJncywgYXJnQ291bnQsIHN0YXJ0LCBzdG9wO1xuXG4gICAgZm9yICg7Oykge1xuICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgZXh0cmFzLnB1c2goYXJnU3RyaW5nc1tzdGFydEluZGV4XSk7XG4gICAgICAgIHJldHVybiBzdGFydEluZGV4ICsgMTtcbiAgICAgIH1cbiAgICAgIGlmIChleHBsaWNpdEFyZykge1xuICAgICAgICBhcmdDb3VudCA9IHNlbGYuX21hdGNoQXJndW1lbnQoYWN0aW9uLCAnQScpO1xuXG4gICAgICAgIC8vIGlmIHRoZSBhY3Rpb24gaXMgYSBzaW5nbGUtZGFzaCBvcHRpb24gYW5kIHRha2VzIG5vXG4gICAgICAgIC8vIGFyZ3VtZW50cywgdHJ5IHRvIHBhcnNlIG1vcmUgc2luZ2xlLWRhc2ggb3B0aW9ucyBvdXRcbiAgICAgICAgLy8gb2YgdGhlIHRhaWwgb2YgdGhlIG9wdGlvbiBzdHJpbmdcbiAgICAgICAgdmFyIGNoYXJzID0gc2VsZi5wcmVmaXhDaGFycztcbiAgICAgICAgaWYgKGFyZ0NvdW50ID09PSAwICYmIGNoYXJzLmluZGV4T2Yob3B0aW9uU3RyaW5nWzFdKSA8IDApIHtcbiAgICAgICAgICBhY3Rpb25UdXBsZXMucHVzaChbIGFjdGlvbiwgW10sIG9wdGlvblN0cmluZyBdKTtcbiAgICAgICAgICBvcHRpb25TdHJpbmcgPSBvcHRpb25TdHJpbmdbMF0gKyBleHBsaWNpdEFyZ1swXTtcbiAgICAgICAgICB2YXIgbmV3RXhwbGljaXRBcmcgPSBleHBsaWNpdEFyZy5zbGljZSgxKSB8fCBudWxsO1xuICAgICAgICAgIHZhciBvcHRpb25hbHNNYXAgPSBzZWxmLl9vcHRpb25TdHJpbmdBY3Rpb25zO1xuXG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbmFsc01hcCkuaW5kZXhPZihvcHRpb25TdHJpbmcpID49IDApIHtcbiAgICAgICAgICAgIGFjdGlvbiA9IG9wdGlvbmFsc01hcFtvcHRpb25TdHJpbmddO1xuICAgICAgICAgICAgZXhwbGljaXRBcmcgPSBuZXdFeHBsaWNpdEFyZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihhY3Rpb24sIHNwcmludGYoJ2lnbm9yZWQgZXhwbGljaXQgYXJndW1lbnQgJXInLCBleHBsaWNpdEFyZykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChhcmdDb3VudCA9PT0gMSkge1xuICAgICAgICAgIC8vIGlmIHRoZSBhY3Rpb24gZXhwZWN0IGV4YWN0bHkgb25lIGFyZ3VtZW50LCB3ZSd2ZVxuICAgICAgICAgIC8vIHN1Y2Nlc3NmdWxseSBtYXRjaGVkIHRoZSBvcHRpb247IGV4aXQgdGhlIGxvb3BcbiAgICAgICAgICBzdG9wID0gc3RhcnRJbmRleCArIDE7XG4gICAgICAgICAgYXJncyA9IFsgZXhwbGljaXRBcmcgXTtcbiAgICAgICAgICBhY3Rpb25UdXBsZXMucHVzaChbIGFjdGlvbiwgYXJncywgb3B0aW9uU3RyaW5nIF0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGVycm9yIGlmIGEgZG91YmxlLWRhc2ggb3B0aW9uIGRpZCBub3QgdXNlIHRoZVxuICAgICAgICAgIC8vIGV4cGxpY2l0IGFyZ3VtZW50XG4gICAgICAgICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihhY3Rpb24sIHNwcmludGYoJ2lnbm9yZWQgZXhwbGljaXQgYXJndW1lbnQgJXInLCBleHBsaWNpdEFyZykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBleHBsaWNpdCBhcmd1bWVudCwgdHJ5IHRvIG1hdGNoIHRoZVxuICAgICAgICAvLyBvcHRpb25hbCdzIHN0cmluZyBhcmd1bWVudHMgd2l0aCB0aGUgZm9sbG93aW5nIHN0cmluZ3NcbiAgICAgICAgLy8gaWYgc3VjY2Vzc2Z1bCwgZXhpdCB0aGUgbG9vcFxuXG4gICAgICAgIHN0YXJ0ID0gc3RhcnRJbmRleCArIDE7XG4gICAgICAgIHZhciBzZWxlY3RlZFBhdHRlcm5zID0gYXJnU3RyaW5nc1BhdHRlcm4uc3Vic3RyKHN0YXJ0KTtcblxuICAgICAgICBhcmdDb3VudCA9IHNlbGYuX21hdGNoQXJndW1lbnQoYWN0aW9uLCBzZWxlY3RlZFBhdHRlcm5zKTtcbiAgICAgICAgc3RvcCA9IHN0YXJ0ICsgYXJnQ291bnQ7XG5cblxuICAgICAgICBhcmdzID0gYXJnU3RyaW5ncy5zbGljZShzdGFydCwgc3RvcCk7XG5cbiAgICAgICAgYWN0aW9uVHVwbGVzLnB1c2goWyBhY3Rpb24sIGFyZ3MsIG9wdGlvblN0cmluZyBdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBhZGQgdGhlIE9wdGlvbmFsIHRvIHRoZSBsaXN0IGFuZCByZXR1cm4gdGhlIGluZGV4IGF0IHdoaWNoXG4gICAgLy8gdGhlIE9wdGlvbmFsJ3Mgc3RyaW5nIGFyZ3Mgc3RvcHBlZFxuICAgIGlmIChhY3Rpb25UdXBsZXMubGVuZ3RoIDwgMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdsZW5ndGggc2hvdWxkIGJlID4gMCcpO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFjdGlvblR1cGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGFrZUFjdGlvbi5hcHBseShzZWxmLCBhY3Rpb25UdXBsZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RvcDtcbiAgfVxuXG4gIC8vIHRoZSBsaXN0IG9mIFBvc2l0aW9uYWxzIGxlZnQgdG8gYmUgcGFyc2VkOyB0aGlzIGlzIG1vZGlmaWVkXG4gIC8vIGJ5IGNvbnN1bWVfcG9zaXRpb25hbHMoKVxuICB2YXIgcG9zaXRpb25hbHMgPSBzZWxmLl9nZXRQb3NpdGlvbmFsQWN0aW9ucygpO1xuXG4gIGZ1bmN0aW9uIGNvbnN1bWVQb3NpdGlvbmFscyhzdGFydEluZGV4KSB7XG4gICAgLy8gbWF0Y2ggYXMgbWFueSBQb3NpdGlvbmFscyBhcyBwb3NzaWJsZVxuICAgIHZhciBzZWxlY3RlZFBhdHRlcm4gPSBhcmdTdHJpbmdzUGF0dGVybi5zdWJzdHIoc3RhcnRJbmRleCk7XG4gICAgdmFyIGFyZ0NvdW50cyA9IHNlbGYuX21hdGNoQXJndW1lbnRzUGFydGlhbChwb3NpdGlvbmFscywgc2VsZWN0ZWRQYXR0ZXJuKTtcblxuICAgIC8vIHNsaWNlIG9mZiB0aGUgYXBwcm9wcmlhdGUgYXJnIHN0cmluZ3MgZm9yIGVhY2ggUG9zaXRpb25hbFxuICAgIC8vIGFuZCBhZGQgdGhlIFBvc2l0aW9uYWwgYW5kIGl0cyBhcmdzIHRvIHRoZSBsaXN0XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3NpdGlvbmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFjdGlvbiA9IHBvc2l0aW9uYWxzW2ldO1xuICAgICAgdmFyIGFyZ0NvdW50ID0gYXJnQ291bnRzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBhcmdDb3VudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IGFyZ1N0cmluZ3Muc2xpY2Uoc3RhcnRJbmRleCwgc3RhcnRJbmRleCArIGFyZ0NvdW50KTtcblxuICAgICAgc3RhcnRJbmRleCArPSBhcmdDb3VudDtcbiAgICAgIHRha2VBY3Rpb24oYWN0aW9uLCBhcmdzKTtcbiAgICB9XG5cbiAgICAvLyBzbGljZSBvZmYgdGhlIFBvc2l0aW9uYWxzIHRoYXQgd2UganVzdCBwYXJzZWQgYW5kIHJldHVybiB0aGVcbiAgICAvLyBpbmRleCBhdCB3aGljaCB0aGUgUG9zaXRpb25hbHMnIHN0cmluZyBhcmdzIHN0b3BwZWRcbiAgICBwb3NpdGlvbmFscyA9IHBvc2l0aW9uYWxzLnNsaWNlKGFyZ0NvdW50cy5sZW5ndGgpO1xuICAgIHJldHVybiBzdGFydEluZGV4O1xuICB9XG5cbiAgLy8gY29uc3VtZSBQb3NpdGlvbmFscyBhbmQgT3B0aW9uYWxzIGFsdGVybmF0ZWx5LCB1bnRpbCB3ZSBoYXZlXG4gIC8vIHBhc3NlZCB0aGUgbGFzdCBvcHRpb24gc3RyaW5nXG4gIHZhciBzdGFydEluZGV4ID0gMDtcbiAgdmFyIHBvc2l0aW9uO1xuXG4gIHZhciBtYXhPcHRpb25TdHJpbmdJbmRleCA9IC0xO1xuXG4gIE9iamVjdC5rZXlzKG9wdGlvblN0cmluZ0luZGljZXMpLmZvckVhY2goZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgbWF4T3B0aW9uU3RyaW5nSW5kZXggPSBNYXRoLm1heChtYXhPcHRpb25TdHJpbmdJbmRleCwgcGFyc2VJbnQocG9zaXRpb24sIDEwKSk7XG4gIH0pO1xuXG4gIHZhciBwb3NpdGlvbmFsc0VuZEluZGV4LCBuZXh0T3B0aW9uU3RyaW5nSW5kZXg7XG5cbiAgd2hpbGUgKHN0YXJ0SW5kZXggPD0gbWF4T3B0aW9uU3RyaW5nSW5kZXgpIHtcbiAgICAvLyBjb25zdW1lIGFueSBQb3NpdGlvbmFscyBwcmVjZWRpbmcgdGhlIG5leHQgb3B0aW9uXG4gICAgbmV4dE9wdGlvblN0cmluZ0luZGV4ID0gbnVsbDtcbiAgICBmb3IgKHBvc2l0aW9uIGluIG9wdGlvblN0cmluZ0luZGljZXMpIHtcbiAgICAgIGlmICghb3B0aW9uU3RyaW5nSW5kaWNlcy5oYXNPd25Qcm9wZXJ0eShwb3NpdGlvbikpIHsgY29udGludWU7IH1cblxuICAgICAgcG9zaXRpb24gPSBwYXJzZUludChwb3NpdGlvbiwgMTApO1xuICAgICAgaWYgKHBvc2l0aW9uID49IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgaWYgKG5leHRPcHRpb25TdHJpbmdJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICAgIG5leHRPcHRpb25TdHJpbmdJbmRleCA9IE1hdGgubWluKG5leHRPcHRpb25TdHJpbmdJbmRleCwgcG9zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5leHRPcHRpb25TdHJpbmdJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0SW5kZXggIT09IG5leHRPcHRpb25TdHJpbmdJbmRleCkge1xuICAgICAgcG9zaXRpb25hbHNFbmRJbmRleCA9IGNvbnN1bWVQb3NpdGlvbmFscyhzdGFydEluZGV4KTtcbiAgICAgIC8vIG9ubHkgdHJ5IHRvIHBhcnNlIHRoZSBuZXh0IG9wdGlvbmFsIGlmIHdlIGRpZG4ndCBjb25zdW1lXG4gICAgICAvLyB0aGUgb3B0aW9uIHN0cmluZyBkdXJpbmcgdGhlIHBvc2l0aW9uYWxzIHBhcnNpbmdcbiAgICAgIGlmIChwb3NpdGlvbmFsc0VuZEluZGV4ID4gc3RhcnRJbmRleCkge1xuICAgICAgICBzdGFydEluZGV4ID0gcG9zaXRpb25hbHNFbmRJbmRleDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydEluZGV4ID0gcG9zaXRpb25hbHNFbmRJbmRleDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBjb25zdW1lZCBhbGwgdGhlIHBvc2l0aW9uYWxzIHdlIGNvdWxkIGFuZCB3ZSdyZSBub3RcbiAgICAvLyBhdCB0aGUgaW5kZXggb2YgYW4gb3B0aW9uIHN0cmluZywgdGhlcmUgd2VyZSBleHRyYSBhcmd1bWVudHNcbiAgICBpZiAoIW9wdGlvblN0cmluZ0luZGljZXNbc3RhcnRJbmRleF0pIHtcbiAgICAgIHZhciBzdHJpbmdzID0gYXJnU3RyaW5ncy5zbGljZShzdGFydEluZGV4LCBuZXh0T3B0aW9uU3RyaW5nSW5kZXgpO1xuICAgICAgZXh0cmFzID0gZXh0cmFzLmNvbmNhdChzdHJpbmdzKTtcbiAgICAgIHN0YXJ0SW5kZXggPSBuZXh0T3B0aW9uU3RyaW5nSW5kZXg7XG4gICAgfVxuICAgIC8vIGNvbnN1bWUgdGhlIG5leHQgb3B0aW9uYWwgYW5kIGFueSBhcmd1bWVudHMgZm9yIGl0XG4gICAgc3RhcnRJbmRleCA9IGNvbnN1bWVPcHRpb25hbChzdGFydEluZGV4KTtcbiAgfVxuXG4gIC8vIGNvbnN1bWUgYW55IHBvc2l0aW9uYWxzIGZvbGxvd2luZyB0aGUgbGFzdCBPcHRpb25hbFxuICB2YXIgc3RvcEluZGV4ID0gY29uc3VtZVBvc2l0aW9uYWxzKHN0YXJ0SW5kZXgpO1xuXG4gIC8vIGlmIHdlIGRpZG4ndCBjb25zdW1lIGFsbCB0aGUgYXJndW1lbnQgc3RyaW5ncywgdGhlcmUgd2VyZSBleHRyYXNcbiAgZXh0cmFzID0gZXh0cmFzLmNvbmNhdChhcmdTdHJpbmdzLnNsaWNlKHN0b3BJbmRleCkpO1xuXG4gIC8vIGlmIHdlIGRpZG4ndCB1c2UgYWxsIHRoZSBQb3NpdGlvbmFsIG9iamVjdHMsIHRoZXJlIHdlcmUgdG9vIGZld1xuICAvLyBhcmcgc3RyaW5ncyBzdXBwbGllZC5cbiAgaWYgKHBvc2l0aW9uYWxzLmxlbmd0aCA+IDApIHtcbiAgICBzZWxmLmVycm9yKCd0b28gZmV3IGFyZ3VtZW50cycpO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIGFsbCByZXF1aXJlZCBhY3Rpb25zIHdlcmUgcHJlc2VudFxuICBzZWxmLl9hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGlmIChhY3Rpb24ucmVxdWlyZWQpIHtcbiAgICAgIGlmIChzZWVuQWN0aW9ucy5pbmRleE9mKGFjdGlvbikgPCAwKSB7XG4gICAgICAgIHNlbGYuZXJyb3IoZm9ybWF0KCdBcmd1bWVudCBcIiVzXCIgaXMgcmVxdWlyZWQnLCBhY3Rpb24uZ2V0TmFtZSgpKSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBtYWtlIHN1cmUgYWxsIHJlcXVpcmVkIGdyb3VwcyBoYXZlIG9uZSBvcHRpb24gcHJlc2VudFxuICB2YXIgYWN0aW9uVXNlZCA9IGZhbHNlO1xuICBzZWxmLl9tdXR1YWxseUV4Y2x1c2l2ZUdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xuICAgIGlmIChncm91cC5yZXF1aXJlZCkge1xuICAgICAgYWN0aW9uVXNlZCA9IGdyb3VwLl9ncm91cEFjdGlvbnMuc29tZShmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBzZWVuTm9uRGVmYXVsdEFjdGlvbnMuaW5kZXhPZihhY3Rpb24pICE9PSAtMTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBpZiBubyBhY3Rpb25zIHdlcmUgdXNlZCwgcmVwb3J0IHRoZSBlcnJvclxuICAgICAgaWYgKCFhY3Rpb25Vc2VkKSB7XG4gICAgICAgIHZhciBuYW1lcyA9IFtdO1xuICAgICAgICBncm91cC5fZ3JvdXBBY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgIGlmIChhY3Rpb24uaGVscCAhPT0gYy5TVVBQUkVTUykge1xuICAgICAgICAgICAgbmFtZXMucHVzaChhY3Rpb24uZ2V0TmFtZSgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuYW1lcyA9IG5hbWVzLmpvaW4oJyAnKTtcbiAgICAgICAgdmFyIG1zZyA9ICdvbmUgb2YgdGhlIGFyZ3VtZW50cyAnICsgbmFtZXMgKyAnIGlzIHJlcXVpcmVkJztcbiAgICAgICAgc2VsZi5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gcmV0dXJuIHRoZSB1cGRhdGVkIG5hbWVzcGFjZSBhbmQgdGhlIGV4dHJhIGFyZ3VtZW50c1xuICByZXR1cm4gWyBuYW1lc3BhY2UsIGV4dHJhcyBdO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9yZWFkQXJnc0Zyb21GaWxlcyA9IGZ1bmN0aW9uIChhcmdTdHJpbmdzKSB7XG4gIC8vIGV4cGFuZCBhcmd1bWVudHMgcmVmZXJlbmNpbmcgZmlsZXNcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZnMgPSByZXF1aXJlKCdmcycpO1xuICB2YXIgbmV3QXJnU3RyaW5ncyA9IFtdO1xuICBhcmdTdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKGFyZ1N0cmluZykge1xuICAgIGlmIChzZWxmLmZyb21maWxlUHJlZml4Q2hhcnMuaW5kZXhPZihhcmdTdHJpbmdbMF0pIDwgMCkge1xuICAgICAgLy8gZm9yIHJlZ3VsYXIgYXJndW1lbnRzLCBqdXN0IGFkZCB0aGVtIGJhY2sgaW50byB0aGUgbGlzdFxuICAgICAgbmV3QXJnU3RyaW5ncy5wdXNoKGFyZ1N0cmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlcGxhY2UgYXJndW1lbnRzIHJlZmVyZW5jaW5nIGZpbGVzIHdpdGggdGhlIGZpbGUgY29udGVudFxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGFyZ3N0cnMgPSBbXTtcbiAgICAgICAgdmFyIGZpbGVuYW1lID0gYXJnU3RyaW5nLnNsaWNlKDEpO1xuICAgICAgICB2YXIgY29udGVudCA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0ZjgnKTtcbiAgICAgICAgY29udGVudCA9IGNvbnRlbnQudHJpbSgpLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgY29udGVudC5mb3JFYWNoKGZ1bmN0aW9uIChhcmdMaW5lKSB7XG4gICAgICAgICAgc2VsZi5jb252ZXJ0QXJnTGluZVRvQXJncyhhcmdMaW5lKS5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIGFyZ3N0cnMucHVzaChhcmcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFyZ3N0cnMgPSBzZWxmLl9yZWFkQXJnc0Zyb21GaWxlcyhhcmdzdHJzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5ld0FyZ1N0cmluZ3MucHVzaC5hcHBseShuZXdBcmdTdHJpbmdzLCBhcmdzdHJzKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBzZWxmLmVycm9yKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdBcmdTdHJpbmdzO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLmNvbnZlcnRBcmdMaW5lVG9BcmdzID0gZnVuY3Rpb24gKGFyZ0xpbmUpIHtcbiAgcmV0dXJuIFsgYXJnTGluZSBdO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9tYXRjaEFyZ3VtZW50ID0gZnVuY3Rpb24gKGFjdGlvbiwgcmVnZXhwQXJnU3RyaW5ncykge1xuXG4gIC8vIG1hdGNoIHRoZSBwYXR0ZXJuIGZvciB0aGlzIGFjdGlvbiB0byB0aGUgYXJnIHN0cmluZ3NcbiAgdmFyIHJlZ2V4cE5hcmdzID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLl9nZXROYXJnc1BhdHRlcm4oYWN0aW9uKSk7XG4gIHZhciBtYXRjaGVzID0gcmVnZXhwQXJnU3RyaW5ncy5tYXRjaChyZWdleHBOYXJncyk7XG4gIHZhciBtZXNzYWdlO1xuXG4gIC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiB3ZSB3ZXJlbid0IGFibGUgdG8gZmluZCBhIG1hdGNoXG4gIGlmICghbWF0Y2hlcykge1xuICAgIHN3aXRjaCAoYWN0aW9uLm5hcmdzKSB7XG4gICAgICAvKmVzbGludC1kaXNhYmxlIG5vLXVuZGVmaW5lZCovXG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCBvbmUgYXJndW1lbnQuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGMuT1BUSU9OQUw6XG4gICAgICAgIG1lc3NhZ2UgPSAnRXhwZWN0ZWQgYXQgbW9zdCBvbmUgYXJndW1lbnQuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGMuT05FX09SX01PUkU6XG4gICAgICAgIG1lc3NhZ2UgPSAnRXhwZWN0ZWQgYXQgbGVhc3Qgb25lIGFyZ3VtZW50Lic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCAlcyBhcmd1bWVudChzKSc7XG4gICAgfVxuXG4gICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihcbiAgICAgIGFjdGlvbixcbiAgICAgIGZvcm1hdChtZXNzYWdlLCBhY3Rpb24ubmFyZ3MpXG4gICAgKTtcbiAgfVxuICAvLyByZXR1cm4gdGhlIG51bWJlciBvZiBhcmd1bWVudHMgbWF0Y2hlZFxuICByZXR1cm4gbWF0Y2hlc1sxXS5sZW5ndGg7XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX21hdGNoQXJndW1lbnRzUGFydGlhbCA9IGZ1bmN0aW9uIChhY3Rpb25zLCByZWdleHBBcmdTdHJpbmdzKSB7XG4gIC8vIHByb2dyZXNzaXZlbHkgc2hvcnRlbiB0aGUgYWN0aW9ucyBsaXN0IGJ5IHNsaWNpbmcgb2ZmIHRoZVxuICAvLyBmaW5hbCBhY3Rpb25zIHVudGlsIHdlIGZpbmQgYSBtYXRjaFxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGFjdGlvblNsaWNlLCBwYXR0ZXJuLCBtYXRjaGVzO1xuICB2YXIgaSwgajtcblxuICBmdW5jdGlvbiBnZXRMZW5ndGgoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGg7XG4gIH1cblxuICBmb3IgKGkgPSBhY3Rpb25zLmxlbmd0aDsgaSA+IDA7IGktLSkge1xuICAgIHBhdHRlcm4gPSAnJztcbiAgICBhY3Rpb25TbGljZSA9IGFjdGlvbnMuc2xpY2UoMCwgaSk7XG4gICAgZm9yIChqID0gMDsgaiA8IGFjdGlvblNsaWNlLmxlbmd0aDsgaisrKSB7XG4gICAgICBwYXR0ZXJuICs9IHNlbGYuX2dldE5hcmdzUGF0dGVybihhY3Rpb25TbGljZVtqXSk7XG4gICAgfVxuXG4gICAgcGF0dGVybiA9IG5ldyBSZWdFeHAoJ14nICsgcGF0dGVybik7XG4gICAgbWF0Y2hlcyA9IHJlZ2V4cEFyZ1N0cmluZ3MubWF0Y2gocGF0dGVybik7XG5cbiAgICBpZiAobWF0Y2hlcyAmJiBtYXRjaGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIG5lZWQgb25seSBncm91cHNcbiAgICAgIG1hdGNoZXMgPSBtYXRjaGVzLnNwbGljZSgxKTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQobWF0Y2hlcy5tYXAoZ2V0TGVuZ3RoKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgYXJnIHN0cmluZyBjb3VudHNcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fcGFyc2VPcHRpb25hbCA9IGZ1bmN0aW9uIChhcmdTdHJpbmcpIHtcbiAgdmFyIGFjdGlvbiwgb3B0aW9uU3RyaW5nLCBhcmdFeHBsaWNpdCwgb3B0aW9uVHVwbGVzO1xuXG4gIC8vIGlmIGl0J3MgYW4gZW1wdHkgc3RyaW5nLCBpdCB3YXMgbWVhbnQgdG8gYmUgYSBwb3NpdGlvbmFsXG4gIGlmICghYXJnU3RyaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBpZiBpdCBkb2Vzbid0IHN0YXJ0IHdpdGggYSBwcmVmaXgsIGl0IHdhcyBtZWFudCB0byBiZSBwb3NpdGlvbmFsXG4gIGlmICh0aGlzLnByZWZpeENoYXJzLmluZGV4T2YoYXJnU3RyaW5nWzBdKSA8IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGlmIHRoZSBvcHRpb24gc3RyaW5nIGlzIHByZXNlbnQgaW4gdGhlIHBhcnNlciwgcmV0dXJuIHRoZSBhY3Rpb25cbiAgaWYgKHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnNbYXJnU3RyaW5nXSkge1xuICAgIHJldHVybiBbIHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnNbYXJnU3RyaW5nXSwgYXJnU3RyaW5nLCBudWxsIF07XG4gIH1cblxuICAvLyBpZiBpdCdzIGp1c3QgYSBzaW5nbGUgY2hhcmFjdGVyLCBpdCB3YXMgbWVhbnQgdG8gYmUgcG9zaXRpb25hbFxuICBpZiAoYXJnU3RyaW5nLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gaWYgdGhlIG9wdGlvbiBzdHJpbmcgYmVmb3JlIHRoZSBcIj1cIiBpcyBwcmVzZW50LCByZXR1cm4gdGhlIGFjdGlvblxuICBpZiAoYXJnU3RyaW5nLmluZGV4T2YoJz0nKSA+PSAwKSB7XG4gICAgb3B0aW9uU3RyaW5nID0gYXJnU3RyaW5nLnNwbGl0KCc9JywgMSlbMF07XG4gICAgYXJnRXhwbGljaXQgPSBhcmdTdHJpbmcuc2xpY2Uob3B0aW9uU3RyaW5nLmxlbmd0aCArIDEpO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnNbb3B0aW9uU3RyaW5nXSkge1xuICAgICAgYWN0aW9uID0gdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9uc1tvcHRpb25TdHJpbmddO1xuICAgICAgcmV0dXJuIFsgYWN0aW9uLCBvcHRpb25TdHJpbmcsIGFyZ0V4cGxpY2l0IF07XG4gICAgfVxuICB9XG5cbiAgLy8gc2VhcmNoIHRocm91Z2ggYWxsIHBvc3NpYmxlIHByZWZpeGVzIG9mIHRoZSBvcHRpb24gc3RyaW5nXG4gIC8vIGFuZCBhbGwgYWN0aW9ucyBpbiB0aGUgcGFyc2VyIGZvciBwb3NzaWJsZSBpbnRlcnByZXRhdGlvbnNcbiAgb3B0aW9uVHVwbGVzID0gdGhpcy5fZ2V0T3B0aW9uVHVwbGVzKGFyZ1N0cmluZyk7XG5cbiAgLy8gaWYgbXVsdGlwbGUgYWN0aW9ucyBtYXRjaCwgdGhlIG9wdGlvbiBzdHJpbmcgd2FzIGFtYmlndW91c1xuICBpZiAob3B0aW9uVHVwbGVzLmxlbmd0aCA+IDEpIHtcbiAgICB2YXIgb3B0aW9uU3RyaW5ncyA9IG9wdGlvblR1cGxlcy5tYXAoZnVuY3Rpb24gKG9wdGlvblR1cGxlKSB7XG4gICAgICByZXR1cm4gb3B0aW9uVHVwbGVbMV07XG4gICAgfSk7XG4gICAgdGhpcy5lcnJvcihmb3JtYXQoXG4gICAgICAgICAgJ0FtYmlndW91cyBvcHRpb246IFwiJXNcIiBjb3VsZCBtYXRjaCAlcy4nLFxuICAgICAgICAgIGFyZ1N0cmluZywgb3B0aW9uU3RyaW5ncy5qb2luKCcsICcpXG4gICAgKSk7XG4gIC8vIGlmIGV4YWN0bHkgb25lIGFjdGlvbiBtYXRjaGVkLCB0aGlzIHNlZ21lbnRhdGlvbiBpcyBnb29kLFxuICAvLyBzbyByZXR1cm4gdGhlIHBhcnNlZCBhY3Rpb25cbiAgfSBlbHNlIGlmIChvcHRpb25UdXBsZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIG9wdGlvblR1cGxlc1swXTtcbiAgfVxuXG4gIC8vIGlmIGl0IHdhcyBub3QgZm91bmQgYXMgYW4gb3B0aW9uLCBidXQgaXQgbG9va3MgbGlrZSBhIG5lZ2F0aXZlXG4gIC8vIG51bWJlciwgaXQgd2FzIG1lYW50IHRvIGJlIHBvc2l0aW9uYWxcbiAgLy8gdW5sZXNzIHRoZXJlIGFyZSBuZWdhdGl2ZS1udW1iZXItbGlrZSBvcHRpb25zXG4gIGlmIChhcmdTdHJpbmcubWF0Y2godGhpcy5fcmVnZXhwTmVnYXRpdmVOdW1iZXIpKSB7XG4gICAgaWYgKCF0aGlzLl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscy5zb21lKEJvb2xlYW4pKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgLy8gaWYgaXQgY29udGFpbnMgYSBzcGFjZSwgaXQgd2FzIG1lYW50IHRvIGJlIGEgcG9zaXRpb25hbFxuICBpZiAoYXJnU3RyaW5nLnNlYXJjaCgnICcpID49IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGl0IHdhcyBtZWFudCB0byBiZSBhbiBvcHRpb25hbCBidXQgdGhlcmUgaXMgbm8gc3VjaCBvcHRpb25cbiAgLy8gaW4gdGhpcyBwYXJzZXIgKHRob3VnaCBpdCBtaWdodCBiZSBhIHZhbGlkIG9wdGlvbiBpbiBhIHN1YnBhcnNlcilcbiAgcmV0dXJuIFsgbnVsbCwgYXJnU3RyaW5nLCBudWxsIF07XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX2dldE9wdGlvblR1cGxlcyA9IGZ1bmN0aW9uIChvcHRpb25TdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgY2hhcnMgPSB0aGlzLnByZWZpeENoYXJzO1xuICB2YXIgb3B0aW9uUHJlZml4O1xuICB2YXIgYXJnRXhwbGljaXQ7XG4gIHZhciBhY3Rpb247XG4gIHZhciBhY3Rpb25PcHRpb25TdHJpbmc7XG5cbiAgLy8gb3B0aW9uIHN0cmluZ3Mgc3RhcnRpbmcgd2l0aCB0d28gcHJlZml4IGNoYXJhY3RlcnMgYXJlIG9ubHkgc3BsaXQgYXRcbiAgLy8gdGhlICc9J1xuICBpZiAoY2hhcnMuaW5kZXhPZihvcHRpb25TdHJpbmdbMF0pID49IDAgJiYgY2hhcnMuaW5kZXhPZihvcHRpb25TdHJpbmdbMV0pID49IDApIHtcbiAgICBpZiAob3B0aW9uU3RyaW5nLmluZGV4T2YoJz0nKSA+PSAwKSB7XG4gICAgICB2YXIgb3B0aW9uU3RyaW5nU3BsaXQgPSBvcHRpb25TdHJpbmcuc3BsaXQoJz0nLCAxKTtcblxuICAgICAgb3B0aW9uUHJlZml4ID0gb3B0aW9uU3RyaW5nU3BsaXRbMF07XG4gICAgICBhcmdFeHBsaWNpdCA9IG9wdGlvblN0cmluZ1NwbGl0WzFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcHRpb25QcmVmaXggPSBvcHRpb25TdHJpbmc7XG4gICAgICBhcmdFeHBsaWNpdCA9IG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChhY3Rpb25PcHRpb25TdHJpbmcgaW4gdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9ucykge1xuICAgICAgaWYgKGFjdGlvbk9wdGlvblN0cmluZy5zdWJzdHIoMCwgb3B0aW9uUHJlZml4Lmxlbmd0aCkgPT09IG9wdGlvblByZWZpeCkge1xuICAgICAgICBhY3Rpb24gPSB0aGlzLl9vcHRpb25TdHJpbmdBY3Rpb25zW2FjdGlvbk9wdGlvblN0cmluZ107XG4gICAgICAgIHJlc3VsdC5wdXNoKFsgYWN0aW9uLCBhY3Rpb25PcHRpb25TdHJpbmcsIGFyZ0V4cGxpY2l0IF0pO1xuICAgICAgfVxuICAgIH1cblxuICAvLyBzaW5nbGUgY2hhcmFjdGVyIG9wdGlvbnMgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIHRoZWlyIGFyZ3VtZW50c1xuICAvLyBidXQgbXVsdGlwbGUgY2hhcmFjdGVyIG9wdGlvbnMgYWx3YXlzIGhhdmUgdG8gaGF2ZSB0aGVpciBhcmd1bWVudFxuICAvLyBzZXBhcmF0ZVxuICB9IGVsc2UgaWYgKGNoYXJzLmluZGV4T2Yob3B0aW9uU3RyaW5nWzBdKSA+PSAwICYmIGNoYXJzLmluZGV4T2Yob3B0aW9uU3RyaW5nWzFdKSA8IDApIHtcbiAgICBvcHRpb25QcmVmaXggPSBvcHRpb25TdHJpbmc7XG4gICAgYXJnRXhwbGljaXQgPSBudWxsO1xuICAgIHZhciBvcHRpb25QcmVmaXhTaG9ydCA9IG9wdGlvblN0cmluZy5zdWJzdHIoMCwgMik7XG4gICAgdmFyIGFyZ0V4cGxpY2l0U2hvcnQgPSBvcHRpb25TdHJpbmcuc3Vic3RyKDIpO1xuXG4gICAgZm9yIChhY3Rpb25PcHRpb25TdHJpbmcgaW4gdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9ucykge1xuICAgICAgaWYgKCEkJC5oYXModGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9ucywgYWN0aW9uT3B0aW9uU3RyaW5nKSkgY29udGludWU7XG5cbiAgICAgIGFjdGlvbiA9IHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnNbYWN0aW9uT3B0aW9uU3RyaW5nXTtcbiAgICAgIGlmIChhY3Rpb25PcHRpb25TdHJpbmcgPT09IG9wdGlvblByZWZpeFNob3J0KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFsgYWN0aW9uLCBhY3Rpb25PcHRpb25TdHJpbmcsIGFyZ0V4cGxpY2l0U2hvcnQgXSk7XG4gICAgICB9IGVsc2UgaWYgKGFjdGlvbk9wdGlvblN0cmluZy5zdWJzdHIoMCwgb3B0aW9uUHJlZml4Lmxlbmd0aCkgPT09IG9wdGlvblByZWZpeCkge1xuICAgICAgICByZXN1bHQucHVzaChbIGFjdGlvbiwgYWN0aW9uT3B0aW9uU3RyaW5nLCBhcmdFeHBsaWNpdCBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgLy8gc2hvdWxkbid0IGV2ZXIgZ2V0IGhlcmVcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCdVbmV4cGVjdGVkIG9wdGlvbiBzdHJpbmc6ICVzLicsIG9wdGlvblN0cmluZykpO1xuICB9XG4gIC8vIHJldHVybiB0aGUgY29sbGVjdGVkIG9wdGlvbiB0dXBsZXNcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0TmFyZ3NQYXR0ZXJuID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAvLyBpbiBhbGwgZXhhbXBsZXMgYmVsb3csIHdlIGhhdmUgdG8gYWxsb3cgZm9yICctLScgYXJnc1xuICAvLyB3aGljaCBhcmUgcmVwcmVzZW50ZWQgYXMgJy0nIGluIHRoZSBwYXR0ZXJuXG4gIHZhciByZWdleHBOYXJncztcblxuICBzd2l0Y2ggKGFjdGlvbi5uYXJncykge1xuICAgIC8vIHRoZSBkZWZhdWx0IChudWxsKSBpcyBhc3N1bWVkIHRvIGJlIGEgc2luZ2xlIGFyZ3VtZW50XG4gICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgY2FzZSBudWxsOlxuICAgICAgcmVnZXhwTmFyZ3MgPSAnKC0qQS0qKSc7XG4gICAgICBicmVhaztcbiAgICAvLyBhbGxvdyB6ZXJvIG9yIG1vcmUgYXJndW1lbnRzXG4gICAgY2FzZSBjLk9QVElPTkFMOlxuICAgICAgcmVnZXhwTmFyZ3MgPSAnKC0qQT8tKiknO1xuICAgICAgYnJlYWs7XG4gICAgLy8gYWxsb3cgemVybyBvciBtb3JlIGFyZ3VtZW50c1xuICAgIGNhc2UgYy5aRVJPX09SX01PUkU6XG4gICAgICByZWdleHBOYXJncyA9ICcoLSpbQS1dKiknO1xuICAgICAgYnJlYWs7XG4gICAgLy8gYWxsb3cgb25lIG9yIG1vcmUgYXJndW1lbnRzXG4gICAgY2FzZSBjLk9ORV9PUl9NT1JFOlxuICAgICAgcmVnZXhwTmFyZ3MgPSAnKC0qQVtBLV0qKSc7XG4gICAgICBicmVhaztcbiAgICAvLyBhbGxvdyBhbnkgbnVtYmVyIG9mIG9wdGlvbnMgb3IgYXJndW1lbnRzXG4gICAgY2FzZSBjLlJFTUFJTkRFUjpcbiAgICAgIHJlZ2V4cE5hcmdzID0gJyhbLUFPXSopJztcbiAgICAgIGJyZWFrO1xuICAgIC8vIGFsbG93IG9uZSBhcmd1bWVudCBmb2xsb3dlZCBieSBhbnkgbnVtYmVyIG9mIG9wdGlvbnMgb3IgYXJndW1lbnRzXG4gICAgY2FzZSBjLlBBUlNFUjpcbiAgICAgIHJlZ2V4cE5hcmdzID0gJygtKkFbLUFPXSopJztcbiAgICAgIGJyZWFrO1xuICAgIC8vIGFsbCBvdGhlcnMgc2hvdWxkIGJlIGludGVnZXJzXG4gICAgZGVmYXVsdDpcbiAgICAgIHJlZ2V4cE5hcmdzID0gJygtKicgKyAkJC5yZXBlYXQoJy0qQScsIGFjdGlvbi5uYXJncykgKyAnLSopJztcbiAgfVxuXG4gIC8vIGlmIHRoaXMgaXMgYW4gb3B0aW9uYWwgYWN0aW9uLCAtLSBpcyBub3QgYWxsb3dlZFxuICBpZiAoYWN0aW9uLmlzT3B0aW9uYWwoKSkge1xuICAgIHJlZ2V4cE5hcmdzID0gcmVnZXhwTmFyZ3MucmVwbGFjZSgvLVxcKi9nLCAnJyk7XG4gICAgcmVnZXhwTmFyZ3MgPSByZWdleHBOYXJncy5yZXBsYWNlKC8tL2csICcnKTtcbiAgfVxuXG4gIC8vIHJldHVybiB0aGUgcGF0dGVyblxuICByZXR1cm4gcmVnZXhwTmFyZ3M7XG59O1xuXG4vL1xuLy8gVmFsdWUgY29udmVyc2lvbiBtZXRob2RzXG4vL1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX2dldFZhbHVlcyA9IGZ1bmN0aW9uIChhY3Rpb24sIGFyZ1N0cmluZ3MpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIGZvciBldmVyeXRoaW5nIGJ1dCBQQVJTRVIgYXJncywgc3RyaXAgb3V0ICctLSdcbiAgaWYgKGFjdGlvbi5uYXJncyAhPT0gYy5QQVJTRVIgJiYgYWN0aW9uLm5hcmdzICE9PSBjLlJFTUFJTkRFUikge1xuICAgIGFyZ1N0cmluZ3MgPSBhcmdTdHJpbmdzLmZpbHRlcihmdW5jdGlvbiAoYXJyYXlFbGVtZW50KSB7XG4gICAgICByZXR1cm4gYXJyYXlFbGVtZW50ICE9PSAnLS0nO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHZhbHVlLCBhcmdTdHJpbmc7XG5cbiAgLy8gb3B0aW9uYWwgYXJndW1lbnQgcHJvZHVjZXMgYSBkZWZhdWx0IHdoZW4gbm90IHByZXNlbnRcbiAgaWYgKGFyZ1N0cmluZ3MubGVuZ3RoID09PSAwICYmIGFjdGlvbi5uYXJncyA9PT0gYy5PUFRJT05BTCkge1xuXG4gICAgdmFsdWUgPSAoYWN0aW9uLmlzT3B0aW9uYWwoKSkgPyBhY3Rpb24uY29uc3RhbnQgOiBhY3Rpb24uZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSAnc3RyaW5nJykge1xuICAgICAgdmFsdWUgPSB0aGlzLl9nZXRWYWx1ZShhY3Rpb24sIHZhbHVlKTtcbiAgICAgIHRoaXMuX2NoZWNrVmFsdWUoYWN0aW9uLCB2YWx1ZSk7XG4gICAgfVxuXG4gIC8vIHdoZW4gbmFyZ3M9JyonIG9uIGEgcG9zaXRpb25hbCwgaWYgdGhlcmUgd2VyZSBubyBjb21tYW5kLWxpbmVcbiAgLy8gYXJncywgdXNlIHRoZSBkZWZhdWx0IGlmIGl0IGlzIGFueXRoaW5nIG90aGVyIHRoYW4gTm9uZVxuICB9IGVsc2UgaWYgKGFyZ1N0cmluZ3MubGVuZ3RoID09PSAwICYmIGFjdGlvbi5uYXJncyA9PT0gYy5aRVJPX09SX01PUkUgJiZcbiAgICBhY3Rpb24ub3B0aW9uU3RyaW5ncy5sZW5ndGggPT09IDApIHtcblxuICAgIHZhbHVlID0gKGFjdGlvbi5kZWZhdWx0VmFsdWUgfHwgYXJnU3RyaW5ncyk7XG4gICAgdGhpcy5fY2hlY2tWYWx1ZShhY3Rpb24sIHZhbHVlKTtcblxuICAvLyBzaW5nbGUgYXJndW1lbnQgb3Igb3B0aW9uYWwgYXJndW1lbnQgcHJvZHVjZXMgYSBzaW5nbGUgdmFsdWVcbiAgfSBlbHNlIGlmIChhcmdTdHJpbmdzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAoIWFjdGlvbi5uYXJncyB8fCBhY3Rpb24ubmFyZ3MgPT09IGMuT1BUSU9OQUwpKSB7XG5cbiAgICBhcmdTdHJpbmcgPSBhcmdTdHJpbmdzWzBdO1xuICAgIHZhbHVlID0gdGhpcy5fZ2V0VmFsdWUoYWN0aW9uLCBhcmdTdHJpbmcpO1xuICAgIHRoaXMuX2NoZWNrVmFsdWUoYWN0aW9uLCB2YWx1ZSk7XG5cbiAgLy8gUkVNQUlOREVSIGFyZ3VtZW50cyBjb252ZXJ0IGFsbCB2YWx1ZXMsIGNoZWNraW5nIG5vbmVcbiAgfSBlbHNlIGlmIChhY3Rpb24ubmFyZ3MgPT09IGMuUkVNQUlOREVSKSB7XG4gICAgdmFsdWUgPSBhcmdTdHJpbmdzLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHNlbGYuX2dldFZhbHVlKGFjdGlvbiwgdik7XG4gICAgfSk7XG5cbiAgLy8gUEFSU0VSIGFyZ3VtZW50cyBjb252ZXJ0IGFsbCB2YWx1ZXMsIGJ1dCBjaGVjayBvbmx5IHRoZSBmaXJzdFxuICB9IGVsc2UgaWYgKGFjdGlvbi5uYXJncyA9PT0gYy5QQVJTRVIpIHtcbiAgICB2YWx1ZSA9IGFyZ1N0cmluZ3MubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gc2VsZi5fZ2V0VmFsdWUoYWN0aW9uLCB2KTtcbiAgICB9KTtcbiAgICB0aGlzLl9jaGVja1ZhbHVlKGFjdGlvbiwgdmFsdWVbMF0pO1xuXG4gIC8vIGFsbCBvdGhlciB0eXBlcyBvZiBuYXJncyBwcm9kdWNlIGEgbGlzdFxuICB9IGVsc2Uge1xuICAgIHZhbHVlID0gYXJnU3RyaW5ncy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBzZWxmLl9nZXRWYWx1ZShhY3Rpb24sIHYpO1xuICAgIH0pO1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgIHNlbGYuX2NoZWNrVmFsdWUoYWN0aW9uLCB2KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHJldHVybiB0aGUgY29udmVydGVkIHZhbHVlXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0VmFsdWUgPSBmdW5jdGlvbiAoYWN0aW9uLCBhcmdTdHJpbmcpIHtcbiAgdmFyIHJlc3VsdDtcblxuICB2YXIgdHlwZUZ1bmN0aW9uID0gdGhpcy5fcmVnaXN0cnlHZXQoJ3R5cGUnLCBhY3Rpb24udHlwZSwgYWN0aW9uLnR5cGUpO1xuICBpZiAodHlwZW9mIHR5cGVGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXNzYWdlID0gZm9ybWF0KCclcyBpcyBub3QgY2FsbGFibGUnLCB0eXBlRnVuY3Rpb24pO1xuICAgIHRocm93IGFyZ3VtZW50RXJyb3JIZWxwZXIoYWN0aW9uLCBtZXNzYWdlKTtcbiAgfVxuXG4gIC8vIGNvbnZlcnQgdGhlIHZhbHVlIHRvIHRoZSBhcHByb3ByaWF0ZSB0eXBlXG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gdHlwZUZ1bmN0aW9uKGFyZ1N0cmluZyk7XG5cbiAgICAvLyBBcmd1bWVudFR5cGVFcnJvcnMgaW5kaWNhdGUgZXJyb3JzXG4gICAgLy8gSWYgYWN0aW9uLnR5cGUgaXMgbm90IGEgcmVnaXN0ZXJlZCBzdHJpbmcsIGl0IGlzIGEgZnVuY3Rpb25cbiAgICAvLyBUcnkgdG8gZGVkdWNlIGl0cyBuYW1lIGZvciBpbmNsdXNpb24gaW4gdGhlIGVycm9yIG1lc3NhZ2VcbiAgICAvLyBGYWlsaW5nIHRoYXQsIGluY2x1ZGUgdGhlIGVycm9yIG1lc3NhZ2UgaXQgcmFpc2VkLlxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIG5hbWUgPSBudWxsO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYWN0aW9uLnR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBhY3Rpb24udHlwZS5uYW1lIHx8IGFjdGlvbi50eXBlLmRpc3BsYXlOYW1lIHx8ICc8ZnVuY3Rpb24+JztcbiAgICB9XG4gICAgdmFyIG1zZyA9IGZvcm1hdCgnSW52YWxpZCAlcyB2YWx1ZTogJXMnLCBuYW1lLCBhcmdTdHJpbmcpO1xuICAgIGlmIChuYW1lID09PSAnPGZ1bmN0aW9uPicpIHsgbXNnICs9ICdcXG4nICsgZS5tZXNzYWdlOyB9XG4gICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihhY3Rpb24sIG1zZyk7XG4gIH1cbiAgLy8gcmV0dXJuIHRoZSBjb252ZXJ0ZWQgdmFsdWVcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fY2hlY2tWYWx1ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIHZhbHVlKSB7XG4gIC8vIGNvbnZlcnRlZCB2YWx1ZSBtdXN0IGJlIG9uZSBvZiB0aGUgY2hvaWNlcyAoaWYgc3BlY2lmaWVkKVxuICB2YXIgY2hvaWNlcyA9IGFjdGlvbi5jaG9pY2VzO1xuICBpZiAoY2hvaWNlcykge1xuICAgIC8vIGNob2lzZSBmb3IgYXJndW1lbnQgY2FuIGJ5IGFycmF5IG9yIHN0cmluZ1xuICAgIGlmICgodHlwZW9mIGNob2ljZXMgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoY2hvaWNlcykpICYmXG4gICAgICAgIGNob2ljZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGNob2lzZSBmb3Igc3VicGFyc2VycyBjYW4gYnkgb25seSBoYXNoXG4gICAgaWYgKHR5cGVvZiBjaG9pY2VzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShjaG9pY2VzKSAmJiBjaG9pY2VzW3ZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hvaWNlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNob2ljZXMgPSBjaG9pY2VzLnNwbGl0KCcnKS5qb2luKCcsICcpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaG9pY2VzKSkge1xuICAgICAgY2hvaWNlcyA9ICBjaG9pY2VzLmpvaW4oJywgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNob2ljZXMgPSAgT2JqZWN0LmtleXMoY2hvaWNlcykuam9pbignLCAnKTtcbiAgICB9XG4gICAgdmFyIG1lc3NhZ2UgPSBmb3JtYXQoJ0ludmFsaWQgY2hvaWNlOiAlcyAoY2hvb3NlIGZyb20gWyVzXSknLCB2YWx1ZSwgY2hvaWNlcyk7XG4gICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihhY3Rpb24sIG1lc3NhZ2UpO1xuICB9XG59O1xuXG4vL1xuLy8gSGVscCBmb3JtYXR0aW5nIG1ldGhvZHNcbi8vXG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjZm9ybWF0VXNhZ2UgLT4gc3RyaW5nXG4gKlxuICogUmV0dXJuIHVzYWdlIHN0cmluZ1xuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV1bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI3ByaW50aW5nLWhlbHBcbiAqKi9cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5mb3JtYXRVc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGZvcm1hdHRlciA9IHRoaXMuX2dldEZvcm1hdHRlcigpO1xuICBmb3JtYXR0ZXIuYWRkVXNhZ2UodGhpcy51c2FnZSwgdGhpcy5fYWN0aW9ucywgdGhpcy5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMpO1xuICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdEhlbHAoKTtcbn07XG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjZm9ybWF0SGVscCAtPiBzdHJpbmdcbiAqXG4gKiBSZXR1cm4gaGVscFxuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV1bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI3ByaW50aW5nLWhlbHBcbiAqKi9cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5mb3JtYXRIZWxwID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZm9ybWF0dGVyID0gdGhpcy5fZ2V0Rm9ybWF0dGVyKCk7XG5cbiAgLy8gdXNhZ2VcbiAgZm9ybWF0dGVyLmFkZFVzYWdlKHRoaXMudXNhZ2UsIHRoaXMuX2FjdGlvbnMsIHRoaXMuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzKTtcblxuICAvLyBkZXNjcmlwdGlvblxuICBmb3JtYXR0ZXIuYWRkVGV4dCh0aGlzLmRlc2NyaXB0aW9uKTtcblxuICAvLyBwb3NpdGlvbmFscywgb3B0aW9uYWxzIGFuZCB1c2VyLWRlZmluZWQgZ3JvdXBzXG4gIHRoaXMuX2FjdGlvbkdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb25Hcm91cCkge1xuICAgIGZvcm1hdHRlci5zdGFydFNlY3Rpb24oYWN0aW9uR3JvdXAudGl0bGUpO1xuICAgIGZvcm1hdHRlci5hZGRUZXh0KGFjdGlvbkdyb3VwLmRlc2NyaXB0aW9uKTtcbiAgICBmb3JtYXR0ZXIuYWRkQXJndW1lbnRzKGFjdGlvbkdyb3VwLl9ncm91cEFjdGlvbnMpO1xuICAgIGZvcm1hdHRlci5lbmRTZWN0aW9uKCk7XG4gIH0pO1xuXG4gIC8vIGVwaWxvZ1xuICBmb3JtYXR0ZXIuYWRkVGV4dCh0aGlzLmVwaWxvZyk7XG5cbiAgLy8gZGV0ZXJtaW5lIGhlbHAgZnJvbSBmb3JtYXQgYWJvdmVcbiAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXRIZWxwKCk7XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX2dldEZvcm1hdHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIEZvcm1hdHRlckNsYXNzID0gdGhpcy5mb3JtYXR0ZXJDbGFzcztcbiAgdmFyIGZvcm1hdHRlciA9IG5ldyBGb3JtYXR0ZXJDbGFzcyh7IHByb2c6IHRoaXMucHJvZyB9KTtcbiAgcmV0dXJuIGZvcm1hdHRlcjtcbn07XG5cbi8vXG4vLyAgUHJpbnQgZnVuY3Rpb25zXG4vL1xuXG4vKipcbiAqIEFyZ3VtZW50UGFyc2VyI3ByaW50VXNhZ2UoKSAtPiBWb2lkXG4gKlxuICogUHJpbnQgdXNhZ2VcbiAqXG4gKiBTZWUgYWxzbyBbb3JpZ2luYWwgZ3VpZGVdWzFdXG4gKlxuICogWzFdOmh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvZGV2L2xpYnJhcnkvYXJncGFyc2UuaHRtbCNwcmludGluZy1oZWxwXG4gKiovXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUucHJpbnRVc2FnZSA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcHJpbnRNZXNzYWdlKHRoaXMuZm9ybWF0VXNhZ2UoKSk7XG59O1xuXG4vKipcbiAqIEFyZ3VtZW50UGFyc2VyI3ByaW50SGVscCgpIC0+IFZvaWRcbiAqXG4gKiBQcmludCBoZWxwXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjcHJpbnRpbmctaGVscFxuICoqL1xuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLnByaW50SGVscCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fcHJpbnRNZXNzYWdlKHRoaXMuZm9ybWF0SGVscCgpKTtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fcHJpbnRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHN0cmVhbSkge1xuICBpZiAoIXN0cmVhbSkge1xuICAgIHN0cmVhbSA9IHByb2Nlc3Muc3Rkb3V0O1xuICB9XG4gIGlmIChtZXNzYWdlKSB7XG4gICAgc3RyZWFtLndyaXRlKCcnICsgbWVzc2FnZSk7XG4gIH1cbn07XG5cbi8vXG4vLyAgRXhpdCBmdW5jdGlvbnNcbi8vXG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjZXhpdChzdGF0dXM9MCwgbWVzc2FnZSkgLT4gVm9pZFxuICogLSBzdGF0dXMgKGludCk6IGV4aXQgc3RhdHVzXG4gKiAtIG1lc3NhZ2UgKHN0cmluZyk6IG1lc3NhZ2VcbiAqXG4gKiBQcmludCBtZXNzYWdlIGluIHN0ZGVyci9zdGRvdXQgYW5kIGV4aXQgcHJvZ3JhbVxuICoqL1xuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLmV4aXQgPSBmdW5jdGlvbiAoc3RhdHVzLCBtZXNzYWdlKSB7XG4gIGlmIChtZXNzYWdlKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gMCkge1xuICAgICAgdGhpcy5fcHJpbnRNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wcmludE1lc3NhZ2UobWVzc2FnZSwgcHJvY2Vzcy5zdGRlcnIpO1xuICAgIH1cbiAgfVxuXG4gIHByb2Nlc3MuZXhpdChzdGF0dXMpO1xufTtcblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNlcnJvcihtZXNzYWdlKSAtPiBWb2lkXG4gKiAtIGVyciAoRXJyb3J8c3RyaW5nKTogbWVzc2FnZVxuICpcbiAqIEVycm9yIG1ldGhvZCBQcmludHMgYSB1c2FnZSBtZXNzYWdlIGluY29ycG9yYXRpbmcgdGhlIG1lc3NhZ2UgdG8gc3RkZXJyIGFuZFxuICogZXhpdHMuIElmIHlvdSBvdmVycmlkZSB0aGlzIGluIGEgc3ViY2xhc3MsXG4gKiBpdCBzaG91bGQgbm90IHJldHVybiAtLSBpdCBzaG91bGRcbiAqIGVpdGhlciBleGl0IG9yIHRocm93IGFuIGV4Y2VwdGlvbi5cbiAqXG4gKiovXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHZhciBtZXNzYWdlO1xuICBpZiAoZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBtZXNzYWdlID0gZXJyLm1lc3NhZ2U7XG4gIH0gZWxzZSB7XG4gICAgbWVzc2FnZSA9IGVycjtcbiAgfVxuICB2YXIgbXNnID0gZm9ybWF0KCclczogZXJyb3I6ICVzJywgdGhpcy5wcm9nLCBtZXNzYWdlKSArIGMuRU9MO1xuXG4gIGlmICh0aGlzLmRlYnVnID09PSB0cnVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cblxuICB0aGlzLnByaW50VXNhZ2UocHJvY2Vzcy5zdGRlcnIpO1xuXG4gIHJldHVybiB0aGlzLmV4aXQoMiwgbXNnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXJndW1lbnRQYXJzZXI7XG4iLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25IZWxwXG4gKlxuICogU3VwcG9ydCBhY3Rpb24gZm9yIHByaW50aW5nIGhlbHBcbiAqIFRoaXMgY2xhc3MgaW5oZXJpZGVkIGZyb20gW1tBY3Rpb25dXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFjdGlvbiA9IHJlcXVpcmUoJy4uL2FjdGlvbicpO1xuXG4vLyBDb25zdGFudHNcbnZhciBjICA9IHJlcXVpcmUoJy4uL2NvbnN0Jyk7XG5cbi8qOm5vZG9jOipcbiAqIG5ldyBBY3Rpb25IZWxwKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uSGVscCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uSGVscChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAob3B0aW9ucy5kZWZhdWx0VmFsdWUgIT09IG51bGwpIHtcbiAgICBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMuZGVmYXVsdFZhbHVlID0gYy5TVVBQUkVTUztcbiAgfVxuICBvcHRpb25zLmRlc3QgPSAob3B0aW9ucy5kZXN0ICE9PSBudWxsID8gb3B0aW9ucy5kZXN0IDogYy5TVVBQUkVTUyk7XG4gIG9wdGlvbnMubmFyZ3MgPSAwO1xuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcblxufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uSGVscCwgQWN0aW9uKTtcblxuLyo6bm9kb2M6KlxuICogQWN0aW9uSGVscCNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZylcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIFByaW50IGhlbHAgYW5kIGV4aXRcbiAqKi9cbkFjdGlvbkhlbHAucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyKSB7XG4gIHBhcnNlci5wcmludEhlbHAoKTtcbiAgcGFyc2VyLmV4aXQoKTtcbn07XG4iLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25BcHBlbmRcbiAqXG4gKiBUaGlzIGFjdGlvbiBzdG9yZXMgYSBsaXN0LCBhbmQgYXBwZW5kcyBlYWNoIGFyZ3VtZW50IHZhbHVlIHRvIHRoZSBsaXN0LlxuICogVGhpcyBpcyB1c2VmdWwgdG8gYWxsb3cgYW4gb3B0aW9uIHRvIGJlIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcy5cbiAqIFRoaXMgY2xhc3MgaW5oZXJpZGVkIGZyb20gW1tBY3Rpb25dXVxuICpcbiAqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFjdGlvbiA9IHJlcXVpcmUoJy4uL2FjdGlvbicpO1xuXG4vLyBDb25zdGFudHNcbnZhciBjID0gcmVxdWlyZSgnLi4vY29uc3QnKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvbkFwcGVuZChvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICogTm90ZTogb3B0aW9ucy5uYXJncyBzaG91bGQgYmUgb3B0aW9uYWwgZm9yIGNvbnN0YW50c1xuICogYW5kIG1vcmUgdGhlbiB6ZXJvIGZvciBvdGhlclxuICoqL1xudmFyIEFjdGlvbkFwcGVuZCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uQXBwZW5kKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICh0aGlzLm5hcmdzIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25hcmdzIGZvciBhcHBlbmQgYWN0aW9ucyBtdXN0IGJlID4gMDsgaWYgYXJnICcgK1xuICAgICAgICAnc3RyaW5ncyBhcmUgbm90IHN1cHBseWluZyB0aGUgdmFsdWUgdG8gYXBwZW5kLCAnICtcbiAgICAgICAgJ3RoZSBhcHBlbmQgY29uc3QgYWN0aW9uIG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlJyk7XG4gIH1cbiAgaWYgKCEhdGhpcy5jb25zdGFudCAmJiB0aGlzLm5hcmdzICE9PSBjLk9QVElPTkFMKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCduYXJncyBtdXN0IGJlIE9QVElPTkFMIHRvIHN1cHBseSBjb25zdCcpO1xuICB9XG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uQXBwZW5kLCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25BcHBlbmQjY2FsbChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzLCBvcHRpb25TdHJpbmcpIC0+IFZvaWRcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIENhbGwgdGhlIGFjdGlvbi4gU2F2ZSByZXN1bHQgaW4gbmFtZXNwYWNlIG9iamVjdFxuICoqL1xuQWN0aW9uQXBwZW5kLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMpIHtcbiAgdmFyIGl0ZW1zID0gKG5hbWVzcGFjZVt0aGlzLmRlc3RdIHx8IFtdKS5zbGljZSgpO1xuICBpdGVtcy5wdXNoKHZhbHVlcyk7XG4gIG5hbWVzcGFjZS5zZXQodGhpcy5kZXN0LCBpdGVtcyk7XG59O1xuIiwiLyo6bm9kb2M6KlxuICogY2xhc3MgQWN0aW9uQXBwZW5kQ29uc3RhbnRcbiAqXG4gKiBUaGlzIHN0b3JlcyBhIGxpc3QsIGFuZCBhcHBlbmRzIHRoZSB2YWx1ZSBzcGVjaWZpZWQgYnlcbiAqIHRoZSBjb25zdCBrZXl3b3JkIGFyZ3VtZW50IHRvIHRoZSBsaXN0LlxuICogKE5vdGUgdGhhdCB0aGUgY29uc3Qga2V5d29yZCBhcmd1bWVudCBkZWZhdWx0cyB0byBudWxsLilcbiAqIFRoZSAnYXBwZW5kQ29uc3QnIGFjdGlvbiBpcyB0eXBpY2FsbHkgdXNlZnVsIHdoZW4gbXVsdGlwbGVcbiAqIGFyZ3VtZW50cyBuZWVkIHRvIHN0b3JlIGNvbnN0YW50cyB0byB0aGUgc2FtZSBsaXN0LlxuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBY3Rpb25dXVxuICoqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vYWN0aW9uJyk7XG5cbi8qOm5vZG9jOipcbiAqIG5ldyBBY3Rpb25BcHBlbmRDb25zdGFudChvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICoqL1xudmFyIEFjdGlvbkFwcGVuZENvbnN0YW50ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25BcHBlbmRDb25zdGFudChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLm5hcmdzID0gMDtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmNvbnN0YW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignY29uc3RhbnQgb3B0aW9uIGlzIHJlcXVpcmVkIGZvciBhcHBlbmRBY3Rpb24nKTtcbiAgfVxuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG51dGlsLmluaGVyaXRzKEFjdGlvbkFwcGVuZENvbnN0YW50LCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25BcHBlbmRDb25zdGFudCNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykgLT4gVm9pZFxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogQ2FsbCB0aGUgYWN0aW9uLiBTYXZlIHJlc3VsdCBpbiBuYW1lc3BhY2Ugb2JqZWN0XG4gKiovXG5BY3Rpb25BcHBlbmRDb25zdGFudC5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgaXRlbXMgPSBbXS5jb25jYXQobmFtZXNwYWNlW3RoaXMuZGVzdF0gfHwgW10pO1xuICBpdGVtcy5wdXNoKHRoaXMuY29uc3RhbnQpO1xuICBuYW1lc3BhY2Uuc2V0KHRoaXMuZGVzdCwgaXRlbXMpO1xufTtcbiIsIi8qOm5vZG9jOipcbiAqIGNsYXNzIEFjdGlvbkNvdW50XG4gKlxuICogVGhpcyBjb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyBhIGtleXdvcmQgYXJndW1lbnQgb2NjdXJzLlxuICogRm9yIGV4YW1wbGUsIHRoaXMgaXMgdXNlZnVsIGZvciBpbmNyZWFzaW5nIHZlcmJvc2l0eSBsZXZlbHNcbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaWRlZCBmcm9tIFtbQWN0aW9uXV1cbiAqXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9uJyk7XG5cbi8qOm5vZG9jOipcbiAqIG5ldyBBY3Rpb25Db3VudChvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICoqL1xudmFyIEFjdGlvbkNvdW50ID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25Db3VudChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLm5hcmdzID0gMDtcblxuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG51dGlsLmluaGVyaXRzKEFjdGlvbkNvdW50LCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25Db3VudCNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykgLT4gVm9pZFxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogQ2FsbCB0aGUgYWN0aW9uLiBTYXZlIHJlc3VsdCBpbiBuYW1lc3BhY2Ugb2JqZWN0XG4gKiovXG5BY3Rpb25Db3VudC5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIsIG5hbWVzcGFjZSkge1xuICBuYW1lc3BhY2Uuc2V0KHRoaXMuZGVzdCwgKG5hbWVzcGFjZVt0aGlzLmRlc3RdIHx8IDApICsgMSk7XG59O1xuIiwiLyo6bm9kb2M6KlxuICogY2xhc3MgQWN0aW9uU3RvcmVcbiAqXG4gKiBUaGlzIGFjdGlvbiBqdXN0IHN0b3JlcyB0aGUgYXJndW1lbnTigJlzIHZhbHVlLiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbi5cbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaXRlZCBmcm9tIFtbQWN0aW9uXV1cbiAqXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9uJyk7XG5cbi8vIENvbnN0YW50c1xudmFyIGMgPSByZXF1aXJlKCcuLi9jb25zdCcpO1xuXG5cbi8qOm5vZG9jOipcbiAqIG5ldyBBY3Rpb25TdG9yZShvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICoqL1xudmFyIEFjdGlvblN0b3JlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25TdG9yZShvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAodGhpcy5uYXJncyA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCduYXJncyBmb3Igc3RvcmUgYWN0aW9ucyBtdXN0IGJlID4gMDsgaWYgeW91ICcgK1xuICAgICAgICAnaGF2ZSBub3RoaW5nIHRvIHN0b3JlLCBhY3Rpb25zIHN1Y2ggYXMgc3RvcmUgJyArXG4gICAgICAgICd0cnVlIG9yIHN0b3JlIGNvbnN0IG1heSBiZSBtb3JlIGFwcHJvcHJpYXRlJyk7XG5cbiAgfVxuICBpZiAodHlwZW9mIHRoaXMuY29uc3RhbnQgIT09ICd1bmRlZmluZWQnICYmIHRoaXMubmFyZ3MgIT09IGMuT1BUSU9OQUwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25hcmdzIG11c3QgYmUgT1BUSU9OQUwgdG8gc3VwcGx5IGNvbnN0Jyk7XG4gIH1cbiAgQWN0aW9uLmNhbGwodGhpcywgb3B0aW9ucyk7XG59O1xudXRpbC5pbmhlcml0cyhBY3Rpb25TdG9yZSwgQWN0aW9uKTtcblxuLyo6bm9kb2M6KlxuICogQWN0aW9uU3RvcmUjY2FsbChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzLCBvcHRpb25TdHJpbmcpIC0+IFZvaWRcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIENhbGwgdGhlIGFjdGlvbi4gU2F2ZSByZXN1bHQgaW4gbmFtZXNwYWNlIG9iamVjdFxuICoqL1xuQWN0aW9uU3RvcmUucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcykge1xuICBuYW1lc3BhY2Uuc2V0KHRoaXMuZGVzdCwgdmFsdWVzKTtcbn07XG4iLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25TdG9yZVRydWVcbiAqXG4gKiBUaGlzIGFjdGlvbiBzdG9yZSB0aGUgdmFsdWVzIFRydWUgcmVzcGVjdGl2ZWx5LlxuICogVGhpcyBpc3NwZWNpYWwgY2FzZXMgb2YgJ3N0b3JlQ29uc3QnXG4gKlxuICogVGhpcyBjbGFzcyBpbmhlcml0ZWQgZnJvbSBbW0FjdGlvbl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uU3RvcmVDb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvblN0b3JlVHJ1ZShvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICoqL1xudmFyIEFjdGlvblN0b3JlVHJ1ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uU3RvcmVUcnVlKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29uc3RhbnQgPSB0cnVlO1xuICBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlICE9PSBudWxsID8gb3B0aW9ucy5kZWZhdWx0VmFsdWUgOiBmYWxzZTtcbiAgQWN0aW9uU3RvcmVDb25zdGFudC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uU3RvcmVUcnVlLCBBY3Rpb25TdG9yZUNvbnN0YW50KTtcbiIsIi8qOm5vZG9jOipcbiAqIGNsYXNzIEFjdGlvblN0b3JlRmFsc2VcbiAqXG4gKiBUaGlzIGFjdGlvbiBzdG9yZSB0aGUgdmFsdWVzIEZhbHNlIHJlc3BlY3RpdmVseS5cbiAqIFRoaXMgaXMgc3BlY2lhbCBjYXNlcyBvZiAnc3RvcmVDb25zdCdcbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaXRlZCBmcm9tIFtbQWN0aW9uXV1cbiAqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFjdGlvblN0b3JlQ29uc3RhbnQgPSByZXF1aXJlKCcuL2NvbnN0YW50Jyk7XG5cbi8qOm5vZG9jOipcbiAqIG5ldyBBY3Rpb25TdG9yZUZhbHNlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IGhhc2ggb2Ygb3B0aW9ucyBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uU3RvcmVGYWxzZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uU3RvcmVGYWxzZShvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmNvbnN0YW50ID0gZmFsc2U7XG4gIG9wdGlvbnMuZGVmYXVsdFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgIT09IG51bGwgPyBvcHRpb25zLmRlZmF1bHRWYWx1ZSA6IHRydWU7XG4gIEFjdGlvblN0b3JlQ29uc3RhbnQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG51dGlsLmluaGVyaXRzKEFjdGlvblN0b3JlRmFsc2UsIEFjdGlvblN0b3JlQ29uc3RhbnQpO1xuIiwiLyo6bm9kb2M6KlxuICogY2xhc3MgQWN0aW9uVmVyc2lvblxuICpcbiAqIFN1cHBvcnQgYWN0aW9uIGZvciBwcmludGluZyBwcm9ncmFtIHZlcnNpb25cbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBY3Rpb25dXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFjdGlvbiA9IHJlcXVpcmUoJy4uL2FjdGlvbicpO1xuXG4vL1xuLy8gQ29uc3RhbnRzXG4vL1xudmFyIGMgPSByZXF1aXJlKCcuLi9jb25zdCcpO1xuXG4vKjpub2RvYzoqXG4gKiBuZXcgQWN0aW9uVmVyc2lvbihvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICoqL1xudmFyIEFjdGlvblZlcnNpb24gPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFjdGlvblZlcnNpb24ob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5kZWZhdWx0VmFsdWUgPSAob3B0aW9ucy5kZWZhdWx0VmFsdWUgPyBvcHRpb25zLmRlZmF1bHRWYWx1ZSA6IGMuU1VQUFJFU1MpO1xuICBvcHRpb25zLmRlc3QgPSAob3B0aW9ucy5kZXN0IHx8IGMuU1VQUFJFU1MpO1xuICBvcHRpb25zLm5hcmdzID0gMDtcbiAgdGhpcy52ZXJzaW9uID0gb3B0aW9ucy52ZXJzaW9uO1xuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG51dGlsLmluaGVyaXRzKEFjdGlvblZlcnNpb24sIEFjdGlvbik7XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvblZlcnNpb24jY2FsbChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzLCBvcHRpb25TdHJpbmcpIC0+IFZvaWRcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIFByaW50IHZlcnNpb24gYW5kIGV4aXRcbiAqKi9cbkFjdGlvblZlcnNpb24ucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyKSB7XG4gIHZhciB2ZXJzaW9uID0gdGhpcy52ZXJzaW9uIHx8IHBhcnNlci52ZXJzaW9uO1xuICB2YXIgZm9ybWF0dGVyID0gcGFyc2VyLl9nZXRGb3JtYXR0ZXIoKTtcbiAgZm9ybWF0dGVyLmFkZFRleHQodmVyc2lvbik7XG4gIHBhcnNlci5leGl0KDAsIGZvcm1hdHRlci5mb3JtYXRIZWxwKCkpO1xufTtcbiIsIi8qKiBpbnRlcm5hbFxuICogY2xhc3MgQWN0aW9uU3VicGFyc2Vyc1xuICpcbiAqIFN1cHBvcnQgdGhlIGNyZWF0aW9uIG9mIHN1Y2ggc3ViLWNvbW1hbmRzIHdpdGggdGhlIGFkZFN1YnBhcnNlcnMoKVxuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBY3Rpb25dXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCAgICA9IHJlcXVpcmUoJ3V0aWwnKTtcbnZhciBmb3JtYXQgID0gcmVxdWlyZSgndXRpbCcpLmZvcm1hdDtcblxuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9uJyk7XG5cbi8vIENvbnN0YW50c1xudmFyIGMgPSByZXF1aXJlKCcuLi9jb25zdCcpO1xuXG4vLyBFcnJvcnNcbnZhciBhcmd1bWVudEVycm9ySGVscGVyID0gcmVxdWlyZSgnLi4vYXJndW1lbnQvZXJyb3InKTtcblxuXG4vKjpub2RvYzoqXG4gKiBuZXcgQ2hvaWNlc1BzZXVkb0FjdGlvbihuYW1lLCBoZWxwKVxuICpcbiAqIENyZWF0ZSBwc2V1ZG8gYWN0aW9uIGZvciBjb3JyZWN0IGhlbHAgdGV4dFxuICpcbiAqKi9cbmZ1bmN0aW9uIENob2ljZXNQc2V1ZG9BY3Rpb24obmFtZSwgaGVscCkge1xuICB2YXIgb3B0aW9ucyA9IHtcbiAgICBvcHRpb25TdHJpbmdzOiBbXSxcbiAgICBkZXN0OiBuYW1lLFxuICAgIGhlbHA6IGhlbHBcbiAgfTtcblxuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxudXRpbC5pbmhlcml0cyhDaG9pY2VzUHNldWRvQWN0aW9uLCBBY3Rpb24pO1xuXG4vKipcbiAqIG5ldyBBY3Rpb25TdWJwYXJzZXJzKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG5mdW5jdGlvbiBBY3Rpb25TdWJwYXJzZXJzKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuZGVzdCA9IG9wdGlvbnMuZGVzdCB8fCBjLlNVUFBSRVNTO1xuICBvcHRpb25zLm5hcmdzID0gYy5QQVJTRVI7XG5cbiAgdGhpcy5kZWJ1ZyA9IChvcHRpb25zLmRlYnVnID09PSB0cnVlKTtcblxuICB0aGlzLl9wcm9nUHJlZml4ID0gb3B0aW9ucy5wcm9nO1xuICB0aGlzLl9wYXJzZXJDbGFzcyA9IG9wdGlvbnMucGFyc2VyQ2xhc3M7XG4gIHRoaXMuX25hbWVQYXJzZXJNYXAgPSB7fTtcbiAgdGhpcy5fY2hvaWNlc0FjdGlvbnMgPSBbXTtcblxuICBvcHRpb25zLmNob2ljZXMgPSB0aGlzLl9uYW1lUGFyc2VyTWFwO1xuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxudXRpbC5pbmhlcml0cyhBY3Rpb25TdWJwYXJzZXJzLCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25TdWJwYXJzZXJzI2FkZFBhcnNlcihuYW1lLCBvcHRpb25zKSAtPiBBcmd1bWVudFBhcnNlclxuICogLSBuYW1lIChzdHJpbmcpOiBzdWItY29tbWFuZCBuYW1lXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IHNlZSBbW0FyZ3VtZW50UGFyc2VyLm5ld11dXG4gKlxuICogIE5vdGU6XG4gKiAgYWRkUGFyc2VyIHN1cHBvcnRzIGFuIGFkZGl0aW9uYWwgYWxpYXNlcyBvcHRpb24sXG4gKiAgd2hpY2ggYWxsb3dzIG11bHRpcGxlIHN0cmluZ3MgdG8gcmVmZXIgdG8gdGhlIHNhbWUgc3VicGFyc2VyLlxuICogIFRoaXMgZXhhbXBsZSwgbGlrZSBzdm4sIGFsaWFzZXMgY28gYXMgYSBzaG9ydGhhbmQgZm9yIGNoZWNrb3V0XG4gKlxuICoqL1xuQWN0aW9uU3VicGFyc2Vycy5wcm90b3R5cGUuYWRkUGFyc2VyID0gZnVuY3Rpb24gKG5hbWUsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnNlcjtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgb3B0aW9ucy5kZWJ1ZyA9ICh0aGlzLmRlYnVnID09PSB0cnVlKTtcblxuICAvLyBzZXQgcHJvZ3JhbSBmcm9tIHRoZSBleGlzdGluZyBwcmVmaXhcbiAgaWYgKCFvcHRpb25zLnByb2cpIHtcbiAgICBvcHRpb25zLnByb2cgPSB0aGlzLl9wcm9nUHJlZml4ICsgJyAnICsgbmFtZTtcbiAgfVxuXG4gIHZhciBhbGlhc2VzID0gb3B0aW9ucy5hbGlhc2VzIHx8IFtdO1xuXG4gIC8vIGNyZWF0ZSBhIHBzZXVkby1hY3Rpb24gdG8gaG9sZCB0aGUgY2hvaWNlIGhlbHBcbiAgaWYgKCEhb3B0aW9ucy5oZWxwIHx8IHR5cGVvZiBvcHRpb25zLmhlbHAgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIGhlbHAgPSBvcHRpb25zLmhlbHA7XG4gICAgZGVsZXRlIG9wdGlvbnMuaGVscDtcblxuICAgIHZhciBjaG9pY2VBY3Rpb24gPSBuZXcgQ2hvaWNlc1BzZXVkb0FjdGlvbihuYW1lLCBoZWxwKTtcbiAgICB0aGlzLl9jaG9pY2VzQWN0aW9ucy5wdXNoKGNob2ljZUFjdGlvbik7XG4gIH1cblxuICAvLyBjcmVhdGUgdGhlIHBhcnNlciBhbmQgYWRkIGl0IHRvIHRoZSBtYXBcbiAgcGFyc2VyID0gbmV3IHRoaXMuX3BhcnNlckNsYXNzKG9wdGlvbnMpO1xuICB0aGlzLl9uYW1lUGFyc2VyTWFwW25hbWVdID0gcGFyc2VyO1xuXG4gIC8vIG1ha2UgcGFyc2VyIGF2YWlsYWJsZSB1bmRlciBhbGlhc2VzIGFsc29cbiAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgIHNlbGYuX25hbWVQYXJzZXJNYXBbYWxpYXNdID0gcGFyc2VyO1xuICB9KTtcblxuICByZXR1cm4gcGFyc2VyO1xufTtcblxuQWN0aW9uU3VicGFyc2Vycy5wcm90b3R5cGUuX2dldFN1YmFjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9jaG9pY2VzQWN0aW9ucztcbn07XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvblN1YnBhcnNlcnMjY2FsbChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzLCBvcHRpb25TdHJpbmcpIC0+IFZvaWRcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIENhbGwgdGhlIGFjdGlvbi4gUGFyc2UgaW5wdXQgYWd1bWVudHNcbiAqKi9cbkFjdGlvblN1YnBhcnNlcnMucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcykge1xuICB2YXIgcGFyc2VyTmFtZSA9IHZhbHVlc1swXTtcbiAgdmFyIGFyZ1N0cmluZ3MgPSB2YWx1ZXMuc2xpY2UoMSk7XG5cbiAgLy8gc2V0IHRoZSBwYXJzZXIgbmFtZSBpZiByZXF1ZXN0ZWRcbiAgaWYgKHRoaXMuZGVzdCAhPT0gYy5TVVBQUkVTUykge1xuICAgIG5hbWVzcGFjZVt0aGlzLmRlc3RdID0gcGFyc2VyTmFtZTtcbiAgfVxuXG4gIC8vIHNlbGVjdCB0aGUgcGFyc2VyXG4gIGlmICh0aGlzLl9uYW1lUGFyc2VyTWFwW3BhcnNlck5hbWVdKSB7XG4gICAgcGFyc2VyID0gdGhpcy5fbmFtZVBhcnNlck1hcFtwYXJzZXJOYW1lXTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKGZvcm1hdChcbiAgICAgICdVbmtub3duIHBhcnNlciBcIiVzXCIgKGNob2ljZXM6IFslc10pLicsXG4gICAgICAgIHBhcnNlck5hbWUsXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuX25hbWVQYXJzZXJNYXApLmpvaW4oJywgJylcbiAgICApKTtcbiAgfVxuXG4gIC8vIHBhcnNlIGFsbCB0aGUgcmVtYWluaW5nIG9wdGlvbnMgaW50byB0aGUgbmFtZXNwYWNlXG4gIHBhcnNlci5wYXJzZUFyZ3MoYXJnU3RyaW5ncywgbmFtZXNwYWNlKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWN0aW9uU3VicGFyc2VycztcbiIsIi8qKiBpbnRlcm5hbFxuICogY2xhc3MgTXV0dWFsbHlFeGNsdXNpdmVHcm91cFxuICpcbiAqIEdyb3VwIGFyZ3VtZW50cy5cbiAqIEJ5IGRlZmF1bHQsIEFyZ3VtZW50UGFyc2VyIGdyb3VwcyBjb21tYW5kLWxpbmUgYXJndW1lbnRzXG4gKiBpbnRvIOKAnHBvc2l0aW9uYWwgYXJndW1lbnRz4oCdIGFuZCDigJxvcHRpb25hbCBhcmd1bWVudHPigJ1cbiAqIHdoZW4gZGlzcGxheWluZyBoZWxwIG1lc3NhZ2VzLiBXaGVuIHRoZXJlIGlzIGEgYmV0dGVyXG4gKiBjb25jZXB0dWFsIGdyb3VwaW5nIG9mIGFyZ3VtZW50cyB0aGFuIHRoaXMgZGVmYXVsdCBvbmUsXG4gKiBhcHByb3ByaWF0ZSBncm91cHMgY2FuIGJlIGNyZWF0ZWQgdXNpbmcgdGhlIGFkZEFyZ3VtZW50R3JvdXAoKSBtZXRob2RcbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaXRlZCBmcm9tIFtbQXJndW1lbnRDb250YWluZXJdXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFyZ3VtZW50R3JvdXAgPSByZXF1aXJlKCcuL2dyb3VwJyk7XG5cbi8qKlxuICogbmV3IE11dHVhbGx5RXhjbHVzaXZlR3JvdXAoY29udGFpbmVyLCBvcHRpb25zKVxuICogLSBjb250YWluZXIgKG9iamVjdCk6IG1haW4gY29udGFpbmVyXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMucmVxdWlyZWQgLT4gdHJ1ZS9mYWxzZVxuICpcbiAqIGByZXF1aXJlZGAgY291bGQgYmUgYW4gYXJndW1lbnQgaXRzZWxmLCBidXQgbWFraW5nIGl0IGEgcHJvcGVydHkgb2ZcbiAqIHRoZSBvcHRpb25zIGFyZ3VtZW50IGlzIG1vcmUgY29uc2lzdGVudCB3aXRoIHRoZSBKUyBhZGFwdGF0aW9uIG9mIHRoZSBQeXRob24pXG4gKiovXG52YXIgTXV0dWFsbHlFeGNsdXNpdmVHcm91cCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTXV0dWFsbHlFeGNsdXNpdmVHcm91cChjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgdmFyIHJlcXVpcmVkO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgcmVxdWlyZWQgPSBvcHRpb25zLnJlcXVpcmVkIHx8IGZhbHNlO1xuICBBcmd1bWVudEdyb3VwLmNhbGwodGhpcywgY29udGFpbmVyKTtcbiAgdGhpcy5yZXF1aXJlZCA9IHJlcXVpcmVkO1xuXG59O1xudXRpbC5pbmhlcml0cyhNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwLCBBcmd1bWVudEdyb3VwKTtcblxuXG5NdXR1YWxseUV4Y2x1c2l2ZUdyb3VwLnByb3RvdHlwZS5fYWRkQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICB2YXIgbXNnO1xuICBpZiAoYWN0aW9uLnJlcXVpcmVkKSB7XG4gICAgbXNnID0gJ211dHVhbGx5IGV4Y2x1c2l2ZSBhcmd1bWVudHMgbXVzdCBiZSBvcHRpb25hbCc7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH1cbiAgYWN0aW9uID0gdGhpcy5fY29udGFpbmVyLl9hZGRBY3Rpb24oYWN0aW9uKTtcbiAgdGhpcy5fZ3JvdXBBY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgcmV0dXJuIGFjdGlvbjtcbn07XG5cblxuTXV0dWFsbHlFeGNsdXNpdmVHcm91cC5wcm90b3R5cGUuX3JlbW92ZUFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgdGhpcy5fY29udGFpbmVyLl9yZW1vdmVBY3Rpb24oYWN0aW9uKTtcbiAgdGhpcy5fZ3JvdXBBY3Rpb25zLnJlbW92ZShhY3Rpb24pO1xufTtcblxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfaW50ZXJvcERlZmF1bHQoZXgpIHtcbiAgcmV0dXJuIGV4ICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4ICYmIFwiZGVmYXVsdFwiIGluIGV4ID8gZXguZGVmYXVsdCA6IGV4O1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6ICEwXG59KTtcblxudmFyIGNyZWF0ZUVtb3Rpb25TZXJ2ZXIgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZShcImNyZWF0ZS1lbW90aW9uLXNlcnZlclwiKSksIGVtb3Rpb24gPSByZXF1aXJlKFwiZW1vdGlvblwiKSwgX2NyZWF0ZUVtb3Rpb25TZXJ2ZXIgPSBjcmVhdGVFbW90aW9uU2VydmVyKGVtb3Rpb24uY2FjaGUpLCBleHRyYWN0Q3JpdGljYWwgPSBfY3JlYXRlRW1vdGlvblNlcnZlci5leHRyYWN0Q3JpdGljYWwsIHJlbmRlclN0eWxlc1RvU3RyaW5nID0gX2NyZWF0ZUVtb3Rpb25TZXJ2ZXIucmVuZGVyU3R5bGVzVG9TdHJpbmcsIHJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbSA9IF9jcmVhdGVFbW90aW9uU2VydmVyLnJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbTtcblxuZXhwb3J0cy5leHRyYWN0Q3JpdGljYWwgPSBleHRyYWN0Q3JpdGljYWwsIGV4cG9ydHMucmVuZGVyU3R5bGVzVG9Ob2RlU3RyZWFtID0gcmVuZGVyU3R5bGVzVG9Ob2RlU3RyZWFtLCBcbmV4cG9ydHMucmVuZGVyU3R5bGVzVG9TdHJpbmcgPSByZW5kZXJTdHlsZXNUb1N0cmluZztcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2NyZWF0ZS1lbW90aW9uLXNlcnZlci5janMucHJvZC5qc1wiKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vY3JlYXRlLWVtb3Rpb24tc2VydmVyLmNqcy5kZXYuanNcIik7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0KGV4KSB7XG4gIHJldHVybiBleCAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBleCAmJiBcImRlZmF1bHRcIiBpbiBleCA/IGV4LmRlZmF1bHQgOiBleDtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiAhMFxufSk7XG5cbnZhciB0aHJvdWdoID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJ0aHJvdWdoXCIpKSwgdG9rZW5pemUgPSBfaW50ZXJvcERlZmF1bHQocmVxdWlyZShcImh0bWwtdG9rZW5pemVcIikpLCBwaXBlID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJtdWx0aXBpcGVcIikpLCBjcmVhdGVFeHRyYWN0Q3JpdGljYWwgPSBmdW5jdGlvbihjYWNoZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaHRtbCkge1xuICAgIGZvciAodmFyIG1hdGNoLCBSR1ggPSBuZXcgUmVnRXhwKGNhY2hlLmtleSArIFwiLShbYS16QS1aMC05LV9dKylcIiwgXCJnbVwiKSwgbyA9IHtcbiAgICAgIGh0bWw6IGh0bWwsXG4gICAgICBpZHM6IFtdLFxuICAgICAgY3NzOiBcIlwiXG4gICAgfSwgaWRzID0ge307IG51bGwgIT09IChtYXRjaCA9IFJHWC5leGVjKGh0bWwpKTsgKSB2b2lkIDAgPT09IGlkc1ttYXRjaFsxXV0gJiYgKGlkc1ttYXRjaFsxXV0gPSAhMCk7XG4gICAgcmV0dXJuIG8uaWRzID0gT2JqZWN0LmtleXMoY2FjaGUuaW5zZXJ0ZWQpLmZpbHRlcihmdW5jdGlvbihpZCkge1xuICAgICAgaWYgKCh2b2lkIDAgIT09IGlkc1tpZF0gfHwgdm9pZCAwID09PSBjYWNoZS5yZWdpc3RlcmVkW2NhY2hlLmtleSArIFwiLVwiICsgaWRdKSAmJiAhMCAhPT0gY2FjaGUuaW5zZXJ0ZWRbaWRdKSByZXR1cm4gby5jc3MgKz0gY2FjaGUuaW5zZXJ0ZWRbaWRdLCBcbiAgICAgICEwO1xuICAgIH0pLCBvO1xuICB9O1xufTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVTdHlsZVRhZyhjc3NLZXksIGlkcywgc3R5bGVzLCBub25jZVN0cmluZykge1xuICByZXR1cm4gXCI8c3R5bGUgZGF0YS1lbW90aW9uLVwiICsgY3NzS2V5ICsgJz1cIicgKyBpZHMuc3Vic3RyaW5nKDEpICsgJ1wiJyArIG5vbmNlU3RyaW5nICsgXCI+XCIgKyBzdHlsZXMgKyBcIjwvc3R5bGU+XCI7XG59XG5cbnZhciBjcmVhdGVSZW5kZXJTdHlsZXNUb1N0cmluZyA9IGZ1bmN0aW9uKGNhY2hlLCBub25jZVN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oaHRtbCkge1xuICAgIHZhciBpbnNlcnRlZCA9IGNhY2hlLmluc2VydGVkLCBjc3NLZXkgPSBjYWNoZS5rZXksIHJlZ2lzdGVyZWQgPSBjYWNoZS5yZWdpc3RlcmVkLCByZWdleCA9IG5ldyBSZWdFeHAoXCI8fFwiICsgY3NzS2V5ICsgXCItKFthLXpBLVowLTktX10rKVwiLCBcImdtXCIpLCBzZWVuID0ge30sIHJlc3VsdCA9IFwiXCIsIGdsb2JhbElkcyA9IFwiXCIsIGdsb2JhbFN0eWxlcyA9IFwiXCI7XG4gICAgZm9yICh2YXIgaWQgaW4gaW5zZXJ0ZWQpIGlmIChpbnNlcnRlZC5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIHZhciBzdHlsZSA9IGluc2VydGVkW2lkXTtcbiAgICAgICEwICE9PSBzdHlsZSAmJiB2b2lkIDAgPT09IHJlZ2lzdGVyZWRbY3NzS2V5ICsgXCItXCIgKyBpZF0gJiYgKGdsb2JhbFN0eWxlcyArPSBzdHlsZSwgXG4gICAgICBnbG9iYWxJZHMgKz0gXCIgXCIgKyBpZCk7XG4gICAgfVxuICAgIFwiXCIgIT09IGdsb2JhbFN0eWxlcyAmJiAocmVzdWx0ID0gZ2VuZXJhdGVTdHlsZVRhZyhjc3NLZXksIGdsb2JhbElkcywgZ2xvYmFsU3R5bGVzLCBub25jZVN0cmluZykpO1xuICAgIGZvciAodmFyIG1hdGNoLCBpZHMgPSBcIlwiLCBzdHlsZXMgPSBcIlwiLCBsYXN0SW5zZXJ0aW9uUG9pbnQgPSAwOyBudWxsICE9PSAobWF0Y2ggPSByZWdleC5leGVjKGh0bWwpKTsgKSBpZiAoXCI8XCIgIT09IG1hdGNoWzBdKSB7XG4gICAgICB2YXIgX2lkID0gbWF0Y2hbMV0sIF9zdHlsZSA9IGluc2VydGVkW19pZF07XG4gICAgICAhMCA9PT0gX3N0eWxlIHx8IHZvaWQgMCA9PT0gX3N0eWxlIHx8IHNlZW5bX2lkXSB8fCAoc2VlbltfaWRdID0gITAsIHN0eWxlcyArPSBfc3R5bGUsIFxuICAgICAgaWRzICs9IFwiIFwiICsgX2lkKTtcbiAgICB9IGVsc2UgXCJcIiAhPT0gaWRzICYmIChyZXN1bHQgKz0gZ2VuZXJhdGVTdHlsZVRhZyhjc3NLZXksIGlkcywgc3R5bGVzLCBub25jZVN0cmluZyksIFxuICAgIGlkcyA9IFwiXCIsIHN0eWxlcyA9IFwiXCIpLCByZXN1bHQgKz0gaHRtbC5zdWJzdHJpbmcobGFzdEluc2VydGlvblBvaW50LCBtYXRjaC5pbmRleCksIFxuICAgIGxhc3RJbnNlcnRpb25Qb2ludCA9IG1hdGNoLmluZGV4O1xuICAgIHJldHVybiByZXN1bHQgKz0gaHRtbC5zdWJzdHJpbmcobGFzdEluc2VydGlvblBvaW50KTtcbiAgfTtcbn0sIGNyZWF0ZVJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbSA9IGZ1bmN0aW9uKGNhY2hlLCBub25jZVN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluc2VkID0ge30sIHRva2VuU3RyZWFtID0gdG9rZW5pemUoKSwgaW5saW5lU3RyZWFtID0gdGhyb3VnaChmdW5jdGlvbih0aGluZykge1xuICAgICAgdmFyIHR5cGUgPSB0aGluZ1swXSwgZGF0YSA9IHRoaW5nWzFdO1xuICAgICAgaWYgKFwib3BlblwiID09PSB0eXBlKSB7XG4gICAgICAgIGZvciAodmFyIG1hdGNoLCBjc3MgPSBcIlwiLCBpZHMgPSB7fSwgZnJhZ21lbnQgPSBkYXRhLnRvU3RyaW5nKCksIHJlZ2V4ID0gbmV3IFJlZ0V4cChjYWNoZS5rZXkgKyBcIi0oW2EtekEtWjAtOS1fXSspXCIsIFwiZ21cIik7IG51bGwgIT09IChtYXRjaCA9IHJlZ2V4LmV4ZWMoZnJhZ21lbnQpKTsgKSBudWxsICE9PSBtYXRjaCAmJiB2b2lkIDAgPT09IGluc2VkW21hdGNoWzFdXSAmJiAoaWRzW21hdGNoWzFdXSA9ICEwKTtcbiAgICAgICAgT2JqZWN0LmtleXMoY2FjaGUuaW5zZXJ0ZWQpLmZvckVhY2goZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAhMCAhPT0gY2FjaGUuaW5zZXJ0ZWRbaWRdICYmIHZvaWQgMCA9PT0gaW5zZWRbaWRdICYmICghMCA9PT0gaWRzW2lkXSB8fCB2b2lkIDAgPT09IGNhY2hlLnJlZ2lzdGVyZWRbY2FjaGUua2V5ICsgXCItXCIgKyBpZF0gJiYgKGlkc1tpZF0gPSAhMCkpICYmIChpbnNlZFtpZF0gPSAhMCwgXG4gICAgICAgICAgY3NzICs9IGNhY2hlLmluc2VydGVkW2lkXSk7XG4gICAgICAgIH0pLCBcIlwiICE9PSBjc3MgJiYgdGhpcy5xdWV1ZShcIjxzdHlsZSBkYXRhLWVtb3Rpb24tXCIgKyBjYWNoZS5rZXkgKyAnPVwiJyArIE9iamVjdC5rZXlzKGlkcykuam9pbihcIiBcIikgKyAnXCInICsgbm9uY2VTdHJpbmcgKyBcIj5cIiArIGNzcyArIFwiPC9zdHlsZT5cIik7XG4gICAgICB9XG4gICAgICB0aGlzLnF1ZXVlKGRhdGEpO1xuICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5xdWV1ZShudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGlwZSh0b2tlblN0cmVhbSwgaW5saW5lU3RyZWFtKTtcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGluZGV4KGNhY2hlKSB7XG4gICEwICE9PSBjYWNoZS5jb21wYXQgJiYgKGNhY2hlLmNvbXBhdCA9ICEwKTtcbiAgdmFyIG5vbmNlU3RyaW5nID0gdm9pZCAwICE9PSBjYWNoZS5ub25jZSA/ICcgbm9uY2U9XCInICsgY2FjaGUubm9uY2UgKyAnXCInIDogXCJcIjtcbiAgcmV0dXJuIHtcbiAgICBleHRyYWN0Q3JpdGljYWw6IGNyZWF0ZUV4dHJhY3RDcml0aWNhbChjYWNoZSksXG4gICAgcmVuZGVyU3R5bGVzVG9TdHJpbmc6IGNyZWF0ZVJlbmRlclN0eWxlc1RvU3RyaW5nKGNhY2hlLCBub25jZVN0cmluZyksXG4gICAgcmVuZGVyU3R5bGVzVG9Ob2RlU3RyZWFtOiBjcmVhdGVSZW5kZXJTdHlsZXNUb05vZGVTdHJlYW0oY2FjaGUsIG5vbmNlU3RyaW5nKVxuICB9O1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBpbmRleDtcbiIsInZhciBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKVxuXG4vLyB0aHJvdWdoXG4vL1xuLy8gYSBzdHJlYW0gdGhhdCBkb2VzIG5vdGhpbmcgYnV0IHJlLWVtaXQgdGhlIGlucHV0LlxuLy8gdXNlZnVsIGZvciBhZ2dyZWdhdGluZyBhIHNlcmllcyBvZiBjaGFuZ2luZyBidXQgbm90IGVuZGluZyBzdHJlYW1zIGludG8gb25lIHN0cmVhbSlcblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdGhyb3VnaFxudGhyb3VnaC50aHJvdWdoID0gdGhyb3VnaFxuXG4vL2NyZWF0ZSBhIHJlYWRhYmxlIHdyaXRhYmxlIHN0cmVhbS5cblxuZnVuY3Rpb24gdGhyb3VnaCAod3JpdGUsIGVuZCwgb3B0cykge1xuICB3cml0ZSA9IHdyaXRlIHx8IGZ1bmN0aW9uIChkYXRhKSB7IHRoaXMucXVldWUoZGF0YSkgfVxuICBlbmQgPSBlbmQgfHwgZnVuY3Rpb24gKCkgeyB0aGlzLnF1ZXVlKG51bGwpIH1cblxuICB2YXIgZW5kZWQgPSBmYWxzZSwgZGVzdHJveWVkID0gZmFsc2UsIGJ1ZmZlciA9IFtdLCBfZW5kZWQgPSBmYWxzZVxuICB2YXIgc3RyZWFtID0gbmV3IFN0cmVhbSgpXG4gIHN0cmVhbS5yZWFkYWJsZSA9IHN0cmVhbS53cml0YWJsZSA9IHRydWVcbiAgc3RyZWFtLnBhdXNlZCA9IGZhbHNlXG5cbi8vICBzdHJlYW0uYXV0b1BhdXNlICAgPSAhKG9wdHMgJiYgb3B0cy5hdXRvUGF1c2UgICA9PT0gZmFsc2UpXG4gIHN0cmVhbS5hdXRvRGVzdHJveSA9ICEob3B0cyAmJiBvcHRzLmF1dG9EZXN0cm95ID09PSBmYWxzZSlcblxuICBzdHJlYW0ud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHdyaXRlLmNhbGwodGhpcywgZGF0YSlcbiAgICByZXR1cm4gIXN0cmVhbS5wYXVzZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYWluKCkge1xuICAgIHdoaWxlKGJ1ZmZlci5sZW5ndGggJiYgIXN0cmVhbS5wYXVzZWQpIHtcbiAgICAgIHZhciBkYXRhID0gYnVmZmVyLnNoaWZ0KClcbiAgICAgIGlmKG51bGwgPT09IGRhdGEpXG4gICAgICAgIHJldHVybiBzdHJlYW0uZW1pdCgnZW5kJylcbiAgICAgIGVsc2VcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBkYXRhKVxuICAgIH1cbiAgfVxuXG4gIHN0cmVhbS5xdWV1ZSA9IHN0cmVhbS5wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbi8vICAgIGNvbnNvbGUuZXJyb3IoZW5kZWQpXG4gICAgaWYoX2VuZGVkKSByZXR1cm4gc3RyZWFtXG4gICAgaWYoZGF0YSA9PT0gbnVsbCkgX2VuZGVkID0gdHJ1ZVxuICAgIGJ1ZmZlci5wdXNoKGRhdGEpXG4gICAgZHJhaW4oKVxuICAgIHJldHVybiBzdHJlYW1cbiAgfVxuXG4gIC8vdGhpcyB3aWxsIGJlIHJlZ2lzdGVyZWQgYXMgdGhlIGZpcnN0ICdlbmQnIGxpc3RlbmVyXG4gIC8vbXVzdCBjYWxsIGRlc3Ryb3kgbmV4dCB0aWNrLCB0byBtYWtlIHN1cmUgd2UncmUgYWZ0ZXIgYW55XG4gIC8vc3RyZWFtIHBpcGVkIGZyb20gaGVyZS5cbiAgLy90aGlzIGlzIG9ubHkgYSBwcm9ibGVtIGlmIGVuZCBpcyBub3QgZW1pdHRlZCBzeW5jaHJvbm91c2x5LlxuICAvL2EgbmljZXIgd2F5IHRvIGRvIHRoaXMgaXMgdG8gbWFrZSBzdXJlIHRoaXMgaXMgdGhlIGxhc3QgbGlzdGVuZXIgZm9yICdlbmQnXG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2VcbiAgICBpZighc3RyZWFtLndyaXRhYmxlICYmIHN0cmVhbS5hdXRvRGVzdHJveSlcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBzdHJlYW0uZGVzdHJveSgpXG4gICAgICB9KVxuICB9KVxuXG4gIGZ1bmN0aW9uIF9lbmQgKCkge1xuICAgIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlXG4gICAgZW5kLmNhbGwoc3RyZWFtKVxuICAgIGlmKCFzdHJlYW0ucmVhZGFibGUgJiYgc3RyZWFtLmF1dG9EZXN0cm95KVxuICAgICAgc3RyZWFtLmRlc3Ryb3koKVxuICB9XG5cbiAgc3RyZWFtLmVuZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYoZW5kZWQpIHJldHVyblxuICAgIGVuZGVkID0gdHJ1ZVxuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGgpIHN0cmVhbS53cml0ZShkYXRhKVxuICAgIF9lbmQoKSAvLyB3aWxsIGVtaXQgb3IgcXVldWVcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBzdHJlYW0uZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZihkZXN0cm95ZWQpIHJldHVyblxuICAgIGRlc3Ryb3llZCA9IHRydWVcbiAgICBlbmRlZCA9IHRydWVcbiAgICBidWZmZXIubGVuZ3RoID0gMFxuICAgIHN0cmVhbS53cml0YWJsZSA9IHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlXG4gICAgc3RyZWFtLmVtaXQoJ2Nsb3NlJylcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBzdHJlYW0ucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYoc3RyZWFtLnBhdXNlZCkgcmV0dXJuXG4gICAgc3RyZWFtLnBhdXNlZCA9IHRydWVcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICBzdHJlYW0ucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKHN0cmVhbS5wYXVzZWQpIHtcbiAgICAgIHN0cmVhbS5wYXVzZWQgPSBmYWxzZVxuICAgICAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpXG4gICAgfVxuICAgIGRyYWluKClcbiAgICAvL21heSBoYXZlIGJlY29tZSBwYXVzZWQgYWdhaW4sXG4gICAgLy9hcyBkcmFpbiBlbWl0cyAnZGF0YScuXG4gICAgaWYoIXN0cmVhbS5wYXVzZWQpXG4gICAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKVxuICAgIHJldHVybiBzdHJlYW1cbiAgfVxuICByZXR1cm4gc3RyZWFtXG59XG5cbiIsInZhciBidWZmZXJGcm9tID0gcmVxdWlyZSgnYnVmZmVyLWZyb20nKVxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJ3JlYWRhYmxlLXN0cmVhbScpLlRyYW5zZm9ybTtcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG5cbmluaGVyaXRzKFRva2VuaXplLCBUcmFuc2Zvcm0pO1xubW9kdWxlLmV4cG9ydHMgPSBUb2tlbml6ZTtcblxudmFyIGNvZGVzID0ge1xuICAgIGx0OiAnPCcuY2hhckNvZGVBdCgwKSxcbiAgICBndDogJz4nLmNoYXJDb2RlQXQoMCksXG4gICAgc2xhc2g6ICcvJy5jaGFyQ29kZUF0KDApLFxuICAgIGRxdW90ZTogJ1wiJy5jaGFyQ29kZUF0KDApLFxuICAgIHNxdW90ZTogXCInXCIuY2hhckNvZGVBdCgwKSxcbiAgICBlcXVhbDogJz0nLmNoYXJDb2RlQXQoMClcbn07XG5cbnZhciBzdHJpbmdzID0ge1xuICAgIGVuZFNjcmlwdDogYnVmZmVyRnJvbSgnPC9zY3JpcHQnKSxcbiAgICBlbmRTdHlsZTogYnVmZmVyRnJvbSgnPC9zdHlsZScpLFxuICAgIGVuZFRpdGxlOiBidWZmZXJGcm9tKCc8L3RpdGxlJyksXG4gICAgY29tbWVudDogYnVmZmVyRnJvbSgnPCEtLScpLFxuICAgIGVuZENvbW1lbnQ6IGJ1ZmZlckZyb20oJy0tPicpLFxuICAgIGNkYXRhOiBidWZmZXJGcm9tKCc8IVtDREFUQVsnKSxcbiAgICBlbmRDZGF0YTogYnVmZmVyRnJvbSgnXV0+Jylcbn07XG5cbnZhciBzdGF0ZXMgPSB7XG4gICAgJ1RhZ05hbWVTdGF0ZSc6IDEsXG4gICAgJ0F0dHJpYnV0ZU5hbWVTdGF0ZSc6IDIsXG4gICAgJ0JlZm9yZUF0dHJpYnV0ZVZhbHVlU3RhdGUnOiAzLFxuICAgICdBdHRyaWJ1dGVWYWx1ZVN0YXRlJzo0XG59XG5cbmZ1bmN0aW9uIFRva2VuaXplICgpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVG9rZW5pemUpKSByZXR1cm4gbmV3IFRva2VuaXplO1xuICAgIFRyYW5zZm9ybS5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUub2JqZWN0TW9kZSA9IHRydWU7XG4gICAgdGhpcy5zdGF0ZSA9ICd0ZXh0JztcbiAgICB0aGlzLnRhZ1N0YXRlID0gbnVsbDtcbiAgICB0aGlzLnF1b3RlU3RhdGUgPSBudWxsO1xuICAgIHRoaXMucmF3ID0gbnVsbDtcbiAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICB0aGlzLl9sYXN0ID0gW107XG59XG5cblRva2VuaXplLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGJ1ZiwgZW5jLCBuZXh0KSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIFxuICAgIGlmICh0aGlzLl9wcmV2KSB7XG4gICAgICAgIGJ1ZiA9IEJ1ZmZlci5jb25jYXQoWyB0aGlzLl9wcmV2LCBidWYgXSk7XG4gICAgICAgIGkgPSB0aGlzLl9wcmV2Lmxlbmd0aCAtIDE7XG4gICAgICAgIG9mZnNldCA9IHRoaXMuX29mZnNldDtcbiAgICAgICAgdGhpcy5fcHJldiA9IG51bGw7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IDA7XG4gICAgfVxuICAgIFxuICAgIGZvciAoOyBpIDwgYnVmLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBiID0gYnVmW2ldO1xuICAgICAgICB0aGlzLl9sYXN0LnB1c2goYik7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0Lmxlbmd0aCA+IDkpIHRoaXMuX2xhc3Quc2hpZnQoKTtcbiAgICAgICAgLy8gZGV0ZWN0IGVuZCBvZiByYXcgY2hhcmFjdGVyIG1vZGUgKGNvbW1lbnQsIHNjcmlwdCwuLilcbiAgICAgICAgaWYgKHRoaXMucmF3KSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSB0aGlzLl90ZXN0UmF3KGJ1Ziwgb2Zmc2V0LCBpKTtcbiAgICAgICAgICAgIGlmIChwYXJ0cykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChbICd0ZXh0JywgcGFydHNbMF0gXSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmF3ID09PSBzdHJpbmdzLmVuZENvbW1lbnRcbiAgICAgICAgICAgICAgICB8fCB0aGlzLnJhdyA9PT0gc3RyaW5ncy5lbmRDZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3RleHQnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wdXNoKFsgJ2Nsb3NlJywgcGFydHNbMV0gXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gJ29wZW4nO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbIHBhcnRzWzFdIF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucmF3ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhc2sgZm9yIG1vcmUgZGF0YSBpZiBsYXN0IGJ5dGUgaXMgJzwnIFxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAndGV4dCcgJiYgYiA9PT0gY29kZXMubHRcbiAgICAgICAgJiYgaSA9PT0gYnVmLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIHRoaXMuX3ByZXYgPSBidWY7XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRldGVjdCBhIHRhZyBvcGVuaW5nXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICd0ZXh0JyAmJiBiID09PSBjb2Rlcy5sdFxuICAgICAgICAmJiAhaXNXaGl0ZVNwYWNlKGJ1ZltpKzFdKSkge1xuICAgICAgICAgICAgaWYgKGkgPiAwICYmIGkgLSBvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYnVmLnNsaWNlKG9mZnNldCwgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gaTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAnb3Blbic7XG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID0gc3RhdGVzLlRhZ05hbWVTdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hTdGF0ZSgndGV4dCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9PT0gc3RhdGVzLlRhZ05hbWVTdGF0ZSAmJlxuICAgICAgICAgICAgaXNXaGl0ZVNwYWNlKGIpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IHN0YXRlcy5BdHRyaWJ1dGVOYW1lU3RhdGVcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPT09IHN0YXRlcy5BdHRyaWJ1dGVOYW1lU3RhdGUgJiZcbiAgICAgICAgICAgIGIgPT09IGNvZGVzLmVxdWFsXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IHN0YXRlcy5CZWZvcmVBdHRyaWJ1dGVWYWx1ZVN0YXRlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID09PSBzdGF0ZXMuQmVmb3JlQXR0cmlidXRlVmFsdWVTdGF0ZSAmJlxuICAgICAgICAgICAgaXNXaGl0ZVNwYWNlKGIpXG4gICAgICAgICkge31cbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID09PSBzdGF0ZXMuQmVmb3JlQXR0cmlidXRlVmFsdWVTdGF0ZVxuICAgICAgICAgICAgJiYgYiAhPT0gY29kZXMuZ3RcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID0gc3RhdGVzLkF0dHJpYnV0ZVZhbHVlU3RhdGU7XG4gICAgICAgICAgICBpZiAoYiA9PT0gY29kZXMuZHF1b3RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdW90ZVN0YXRlID0gJ2RvdWJsZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGIgPT09IGNvZGVzLnNxdW90ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucXVvdGVTdGF0ZSA9ICdzaW5nbGUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnF1b3RlU3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9PT0gc3RhdGVzLkF0dHJpYnV0ZVZhbHVlU3RhdGUgJiZcbiAgICAgICAgICAgICF0aGlzLnF1b3RlU3RhdGUgJiZcbiAgICAgICAgICAgIGlzV2hpdGVTcGFjZShiKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPSBzdGF0ZXMuQXR0cmlidXRlTmFtZVN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9PT0gc3RhdGVzLkF0dHJpYnV0ZVZhbHVlU3RhdGUgJiZcbiAgICAgICAgICAgIHRoaXMucXVvdGVTdGF0ZSA9PT0gJ2RvdWJsZScgJiZcbiAgICAgICAgICAgIGIgPT09IGNvZGVzLmRxdW90ZVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMucXVvdGVTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID0gc3RhdGVzLkF0dHJpYnV0ZU5hbWVTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPT09IHN0YXRlcy5BdHRyaWJ1dGVWYWx1ZVN0YXRlICYmXG4gICAgICAgICAgICB0aGlzLnF1b3RlU3RhdGUgPT09ICdzaW5nbGUnICYmXG4gICAgICAgICAgICBiID09PSBjb2Rlcy5zcXVvdGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnF1b3RlU3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IHN0YXRlcy5BdHRyaWJ1dGVOYW1lU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gJ29wZW4nICYmIGIgPT09IGNvZGVzLmd0ICYmICF0aGlzLnF1b3RlU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1Zi5zbGljZShvZmZzZXQsIGkgKyAxKSk7XG4gICAgICAgICAgICBvZmZzZXQgPSBpICsgMTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndGV4dCc7XG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl9nZXRDaGFyKDEpID09PSBjb2Rlcy5zbGFzaCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3B1c2hTdGF0ZSgnY2xvc2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciB0YWcgPSB0aGlzLl9nZXRUYWcoKTtcbiAgICAgICAgICAgICAgICBpZiAodGFnID09PSAnc2NyaXB0JykgdGhpcy5yYXcgPSBzdHJpbmdzLmVuZFNjcmlwdDtcbiAgICAgICAgICAgICAgICBpZiAodGFnID09PSAnc3R5bGUnKSB0aGlzLnJhdyA9IHN0cmluZ3MuZW5kU3R5bGU7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ3RpdGxlJykgdGhpcy5yYXcgPSBzdHJpbmdzLmVuZFRpdGxlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3B1c2hTdGF0ZSgnb3BlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICdvcGVuJyAmJiBjb21wYXJlKHRoaXMuX2xhc3QsIHN0cmluZ3MuY29tbWVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1Zi5zbGljZShvZmZzZXQsIGkgKyAxKSk7XG4gICAgICAgICAgICBvZmZzZXQgPSBpICsgMTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSAndGV4dCc7XG4gICAgICAgICAgICB0aGlzLnJhdyA9IHN0cmluZ3MuZW5kQ29tbWVudDtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hTdGF0ZSgnb3BlbicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICdvcGVuJyAmJiBjb21wYXJlKHRoaXMuX2xhc3QsIHN0cmluZ3MuY2RhdGEpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWYuc2xpY2Uob2Zmc2V0LCBpICsgMSkpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gaSArIDE7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3RleHQnO1xuICAgICAgICAgICAgdGhpcy5yYXcgPSBzdHJpbmdzLmVuZENkYXRhO1xuICAgICAgICAgICAgdGhpcy5fcHVzaFN0YXRlKCdvcGVuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9mZnNldCA8IGJ1Zi5sZW5ndGgpIHRoaXMuYnVmZmVycy5wdXNoKGJ1Zi5zbGljZShvZmZzZXQpKTtcbiAgICBuZXh0KCk7XG59O1xuXG5Ub2tlbml6ZS5wcm90b3R5cGUuX2ZsdXNoID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSA9PT0gJ3RleHQnKSB0aGlzLl9wdXNoU3RhdGUoJ3RleHQnKTtcbiAgICB0aGlzLnB1c2gobnVsbCk7XG4gICAgbmV4dCgpO1xufTtcblxuVG9rZW5pemUucHJvdG90eXBlLl9wdXNoU3RhdGUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycyk7XG4gICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgdGhpcy5wdXNoKFsgZXYsIGJ1ZiBdKTtcbn07XG5cblRva2VuaXplLnByb3RvdHlwZS5fZ2V0Q2hhciA9IGZ1bmN0aW9uIChpKSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmJ1ZmZlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdmFyIGJ1ZiA9IHRoaXMuYnVmZmVyc1tqXTtcbiAgICAgICAgaWYgKG9mZnNldCArIGJ1Zi5sZW5ndGggPiBpKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVmW2kgLSBvZmZzZXRdO1xuICAgICAgICB9XG4gICAgICAgIG9mZnNldCArPSBidWY7XG4gICAgfVxufTtcblxuVG9rZW5pemUucHJvdG90eXBlLl9nZXRUYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9mZnNldCA9IDA7XG4gICAgdmFyIHRhZyA9ICcnO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5idWZmZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBidWYgPSB0aGlzLmJ1ZmZlcnNbal07XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYnVmLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09PSAwICYmIGsgPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltrXSk7XG4gICAgICAgICAgICBpZiAoL1teXFx3LSFcXFtcXF1dLy50ZXN0KGMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB0YWcgKz0gYztcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gYnVmLmxlbmd0aDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZS5wcm90b3R5cGUuX3Rlc3RSYXcgPSBmdW5jdGlvbiAoYnVmLCBvZmZzZXQsIGluZGV4KSB7XG4gICAgdmFyIHJhdyA9IHRoaXMucmF3LCBsYXN0ID0gdGhpcy5fbGFzdDtcbiAgICBpZiAoIWNvbXBhcmUobGFzdCwgcmF3KSkgcmV0dXJuO1xuICAgIFxuICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1Zi5zbGljZShvZmZzZXQsIGluZGV4ICsgMSkpO1xuICAgIHZhciBidWYgPSBCdWZmZXIuY29uY2F0KHRoaXMuYnVmZmVycyk7XG4gICAgdmFyIGsgPSBidWYubGVuZ3RoIC0gcmF3Lmxlbmd0aDtcbiAgICByZXR1cm4gWyBidWYuc2xpY2UoMCwgayksIGJ1Zi5zbGljZShrKSBdO1xufTtcblxuZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICAgIGlmIChhLmxlbmd0aCA8IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yICh2YXIgaT1hLmxlbmd0aC0xLCBqPWIubGVuZ3RoLTE7IGkgPj0gMCAmJiBqID49IDA7IGktLSwgai0tKSB7XG4gICAgICAgIGlmIChsb3dlcihhW2ldKSAhPT0gbG93ZXIoYltqXSkpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGxvd2VyIChuKSB7XG4gICAgaWYgKG4gPj0gNjUgJiYgbiA8PSA5MCkgcmV0dXJuIG4gKyAzMjtcbiAgICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZVNwYWNlKGIpIHtcbiAgcmV0dXJuIGIgPT09IDB4MjAgfHwgYiA9PT0gMHgwOSB8fCBiID09PSAweDBBIHx8IGIgPT09IDB4MEMgfHwgYiA9PT0gMHgwRDtcbn1cbiIsInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxudmFyIGlzTW9kZXJuID0gKFxuICB0eXBlb2YgQnVmZmVyLmFsbG9jID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBCdWZmZXIuYWxsb2NVbnNhZmUgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIEJ1ZmZlci5mcm9tID09PSAnZnVuY3Rpb24nXG4pXG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIgKGlucHV0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGlucHV0KS5zbGljZSg4LCAtMSkgPT09ICdBcnJheUJ1ZmZlcidcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChvYmosIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBieXRlT2Zmc2V0ID4+Pj0gMFxuXG4gIHZhciBtYXhMZW5ndGggPSBvYmouYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXRcblxuICBpZiAobWF4TGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiJ29mZnNldCcgaXMgb3V0IG9mIGJvdW5kc1wiKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gbWF4TGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID4+Pj0gMFxuXG4gICAgaWYgKGxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInbGVuZ3RoJyBpcyBvdXQgb2YgYm91bmRzXCIpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbShvYmouc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGxlbmd0aCkpXG4gICAgOiBuZXcgQnVmZmVyKG5ldyBVaW50OEFycmF5KG9iai5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgbGVuZ3RoKSkpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbShzdHJpbmcsIGVuY29kaW5nKVxuICAgIDogbmV3IEJ1ZmZlcihzdHJpbmcsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBidWZmZXJGcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpc0FycmF5QnVmZmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gaXNNb2Rlcm5cbiAgICA/IEJ1ZmZlci5mcm9tKHZhbHVlKVxuICAgIDogbmV3IEJ1ZmZlcih2YWx1ZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWZmZXJGcm9tXG4iLCJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7IC8vIGhhY2sgdG8gZml4IGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBpc3N1ZSB3aGVuIHVzZWQgd2l0aCBicm93c2VyaWZ5XG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG5leHBvcnRzLlN0cmVhbSA9IFN0cmVhbTtcbmV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuZXhwb3J0cy5Xcml0YWJsZSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fd3JpdGFibGUuanMnKTtcbmV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbmV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbmV4cG9ydHMuUGFzc1Rocm91Z2ggPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3Bhc3N0aHJvdWdoLmpzJyk7XG5pZiAoIXByb2Nlc3MuYnJvd3NlciAmJiBwcm9jZXNzLmVudi5SRUFEQUJMRV9TVFJFQU0gPT09ICdkaXNhYmxlJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3N0cmVhbScpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3NUaHJvdWdoO1xuXG52YXIgVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9fc3RyZWFtX3RyYW5zZm9ybScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnV0aWwuaW5oZXJpdHMoUGFzc1Rocm91Z2gsIFRyYW5zZm9ybSk7XG5cbmZ1bmN0aW9uIFBhc3NUaHJvdWdoKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBhc3NUaHJvdWdoKSlcbiAgICByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTtcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBkdXBsZXhlciA9IHJlcXVpcmUoJ2R1cGxleGVyMicpO1xudmFyIFBhc3NUaHJvdWdoID0gcmVxdWlyZSgnc3RyZWFtJykuUGFzc1Rocm91Z2g7XG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCdzdHJlYW0nKS5QYXNzVGhyb3VnaDtcbnZhciBvYmplY3RBc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbi8qKlxuICogU2xpY2UgcmVmZXJlbmNlLlxuICovXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xuXG4vKipcbiAqIER1cGxleGVyIG9wdGlvbnMuXG4gKi9cblxudmFyIGRlZmF1bHRPcHRzID0ge1xuICBidWJibGVFcnJvcnM6IGZhbHNlLFxuICBvYmplY3RNb2RlOiB0cnVlXG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcGlwZWAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBwaXBlO1xuXG4vKipcbiAqIFBpcGUuXG4gKlxuICogQHBhcmFtIHN0cmVhbXMgQXJyYXlbU3RyZWFtLC4uLl1cbiAqIEBwYXJhbSBvcHRzIFtPYmplY3RdXG4gKiBAcGFyYW0gY2IgW0Z1bmN0aW9uXVxuICogQHJldHVybiB7U3RyZWFtfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBwaXBlKHN0cmVhbXMsIG9wdHMsIGNiKXtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHN0cmVhbXMpKSB7XG4gICAgc3RyZWFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICBvcHRzID0gbnVsbDtcbiAgICBjYiA9IG51bGw7XG4gIH1cblxuICB2YXIgbGFzdEFyZyA9IHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGxhc3RBcmcpIHtcbiAgICBjYiA9IHN0cmVhbXMuc3BsaWNlKC0xKVswXTtcbiAgICBsYXN0QXJnID0gc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdO1xuICB9XG4gIGlmICgnb2JqZWN0JyA9PSB0eXBlb2YgbGFzdEFyZyAmJiB0eXBlb2YgbGFzdEFyZy5waXBlICE9ICdmdW5jdGlvbicpIHtcbiAgICBvcHRzID0gc3RyZWFtcy5zcGxpY2UoLTEpWzBdO1xuICB9XG4gIHZhciBmaXJzdCA9IHN0cmVhbXNbMF07XG4gIHZhciBsYXN0ID0gc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdO1xuICB2YXIgcmV0O1xuICBvcHRzID0gb2JqZWN0QXNzaWduKHt9LCBkZWZhdWx0T3B0cywgb3B0cylcblxuICBpZiAoIWZpcnN0KSB7XG4gICAgaWYgKGNiKSBwcm9jZXNzLm5leHRUaWNrKGNiKTtcbiAgICByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdHMpO1xuICB9XG4gIFxuICBpZiAoZmlyc3Qud3JpdGFibGUgJiYgbGFzdC5yZWFkYWJsZSkgcmV0ID0gZHVwbGV4ZXIob3B0cywgZmlyc3QsIGxhc3QpO1xuICBlbHNlIGlmIChzdHJlYW1zLmxlbmd0aCA9PSAxKSByZXQgPSBuZXcgUmVhZGFibGUob3B0cykud3JhcChzdHJlYW1zWzBdKTtcbiAgZWxzZSBpZiAoZmlyc3Qud3JpdGFibGUpIHJldCA9IGZpcnN0O1xuICBlbHNlIGlmIChsYXN0LnJlYWRhYmxlKSByZXQgPSBsYXN0O1xuICBlbHNlIHJldCA9IG5ldyBQYXNzVGhyb3VnaChvcHRzKTtcbiAgXG4gIHN0cmVhbXMuZm9yRWFjaChmdW5jdGlvbihzdHJlYW0sIGkpe1xuICAgIHZhciBuZXh0ID0gc3RyZWFtc1tpKzFdO1xuICAgIGlmIChuZXh0KSBzdHJlYW0ucGlwZShuZXh0KTtcbiAgICBpZiAoc3RyZWFtICE9IHJldCkgc3RyZWFtLm9uKCdlcnJvcicsIHJldC5lbWl0LmJpbmQocmV0LCAnZXJyb3InKSk7XG4gIH0pO1xuXG4gIGlmIChjYikge1xuICAgIHZhciBlbmRlZCA9IGZhbHNlO1xuICAgIHJldC5vbignZXJyb3InLCBlbmQpO1xuICAgIGxhc3Qub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uKCl7IGVuZCgpIH0pO1xuICAgIGxhc3Qub24oJ2Nsb3NlJywgZnVuY3Rpb24oKXsgZW5kKCkgfSk7XG4gICAgZnVuY3Rpb24gZW5kKGVycil7XG4gICAgICBpZiAoZW5kZWQpIHJldHVybjtcbiAgICAgIGVuZGVkID0gdHJ1ZTtcbiAgICAgIGNiKGVycik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHJlYW0gPSByZXF1aXJlKFwicmVhZGFibGUtc3RyZWFtXCIpO1xuXG5mdW5jdGlvbiBEdXBsZXhXcmFwcGVyKG9wdGlvbnMsIHdyaXRhYmxlLCByZWFkYWJsZSkge1xuICBpZiAodHlwZW9mIHJlYWRhYmxlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmVhZGFibGUgPSB3cml0YWJsZTtcbiAgICB3cml0YWJsZSA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cblxuICBzdHJlYW0uRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKHR5cGVvZiByZWFkYWJsZS5yZWFkICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZWFkYWJsZSA9IChuZXcgc3RyZWFtLlJlYWRhYmxlKG9wdGlvbnMpKS53cmFwKHJlYWRhYmxlKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlID0gd3JpdGFibGU7XG4gIHRoaXMuX3JlYWRhYmxlID0gcmVhZGFibGU7XG4gIHRoaXMuX3dhaXRpbmcgPSBmYWxzZTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgd3JpdGFibGUub25jZShcImZpbmlzaFwiLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLmVuZCgpO1xuICB9KTtcblxuICB0aGlzLm9uY2UoXCJmaW5pc2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgd3JpdGFibGUuZW5kKCk7XG4gIH0pO1xuXG4gIHJlYWRhYmxlLm9uKFwicmVhZGFibGVcIiwgZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYuX3dhaXRpbmcpIHtcbiAgICAgIHNlbGYuX3dhaXRpbmcgPSBmYWxzZTtcbiAgICAgIHNlbGYuX3JlYWQoKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJlYWRhYmxlLm9uY2UoXCJlbmRcIiwgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5wdXNoKG51bGwpO1xuICB9KTtcblxuICBpZiAoIW9wdGlvbnMgfHwgdHlwZW9mIG9wdGlvbnMuYnViYmxlRXJyb3JzID09PSBcInVuZGVmaW5lZFwiIHx8IG9wdGlvbnMuYnViYmxlRXJyb3JzKSB7XG4gICAgd3JpdGFibGUub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgfSk7XG5cbiAgICByZWFkYWJsZS5vbihcImVycm9yXCIsIGZ1bmN0aW9uKGVycikge1xuICAgICAgc2VsZi5lbWl0KFwiZXJyb3JcIiwgZXJyKTtcbiAgICB9KTtcbiAgfVxufVxuXG5EdXBsZXhXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3RyZWFtLkR1cGxleC5wcm90b3R5cGUsIHtjb25zdHJ1Y3Rvcjoge3ZhbHVlOiBEdXBsZXhXcmFwcGVyfX0pO1xuXG5EdXBsZXhXcmFwcGVyLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiBfd3JpdGUoaW5wdXQsIGVuY29kaW5nLCBkb25lKSB7XG4gIHRoaXMuX3dyaXRhYmxlLndyaXRlKGlucHV0LCBlbmNvZGluZywgZG9uZSk7XG59O1xuXG5EdXBsZXhXcmFwcGVyLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIF9yZWFkKCkge1xuICB2YXIgYnVmO1xuICB2YXIgcmVhZHMgPSAwO1xuICB3aGlsZSAoKGJ1ZiA9IHRoaXMuX3JlYWRhYmxlLnJlYWQoKSkgIT09IG51bGwpIHtcbiAgICB0aGlzLnB1c2goYnVmKTtcbiAgICByZWFkcysrO1xuICB9XG4gIGlmIChyZWFkcyA9PT0gMCkge1xuICAgIHRoaXMuX3dhaXRpbmcgPSB0cnVlO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGR1cGxleDIob3B0aW9ucywgd3JpdGFibGUsIHJlYWRhYmxlKSB7XG4gIHJldHVybiBuZXcgRHVwbGV4V3JhcHBlcihvcHRpb25zLCB3cml0YWJsZSwgcmVhZGFibGUpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuRHVwbGV4V3JhcHBlciA9IER1cGxleFdyYXBwZXI7XG4iLCJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5pZiAocHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScgJiYgU3RyZWFtKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBTdHJlYW0uUmVhZGFibGU7XG4gIGV4cG9ydHMuUmVhZGFibGUgPSBTdHJlYW0uUmVhZGFibGU7XG4gIGV4cG9ydHMuV3JpdGFibGUgPSBTdHJlYW0uV3JpdGFibGU7XG4gIGV4cG9ydHMuRHVwbGV4ID0gU3RyZWFtLkR1cGxleDtcbiAgZXhwb3J0cy5UcmFuc2Zvcm0gPSBTdHJlYW0uVHJhbnNmb3JtO1xuICBleHBvcnRzLlBhc3NUaHJvdWdoID0gU3RyZWFtLlBhc3NUaHJvdWdoO1xuICBleHBvcnRzLlN0cmVhbSA9IFN0cmVhbTtcbn0gZWxzZSB7XG4gIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcmVhZGFibGUuanMnKTtcbiAgZXhwb3J0cy5TdHJlYW0gPSBTdHJlYW0gfHwgZXhwb3J0cztcbiAgZXhwb3J0cy5SZWFkYWJsZSA9IGV4cG9ydHM7XG4gIGV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG4gIGV4cG9ydHMuRHVwbGV4ID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9kdXBsZXguanMnKTtcbiAgZXhwb3J0cy5UcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcycpO1xuICBleHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBjb3B5QnVmZmVyKHNyYywgdGFyZ2V0LCBvZmZzZXQpIHtcbiAgc3JjLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQnVmZmVyTGlzdCk7XG5cbiAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2godikge1xuICAgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgICB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgICArK3RoaXMubGVuZ3RoO1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0KHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IHRoaXMuaGVhZCB9O1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy50YWlsID0gZW50cnk7XG4gICAgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0KCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAtLXRoaXMubGVuZ3RoO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gam9pbihzKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gJyc7XG4gICAgdmFyIHAgPSB0aGlzLmhlYWQ7XG4gICAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICAgIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgICByZXQgKz0gcyArIHAuZGF0YTtcbiAgICB9cmV0dXJuIHJldDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQobikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHJldHVybiB0aGlzLmhlYWQuZGF0YTtcbiAgICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4gPj4+IDApO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAocCkge1xuICAgICAgY29weUJ1ZmZlcihwLmRhdGEsIHJldCwgaSk7XG4gICAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgICBwID0gcC5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIHJldHVybiBCdWZmZXJMaXN0O1xufSgpO1xuXG5pZiAodXRpbCAmJiB1dGlsLmluc3BlY3QgJiYgdXRpbC5pbnNwZWN0LmN1c3RvbSkge1xuICBtb2R1bGUuZXhwb3J0cy5wcm90b3R5cGVbdXRpbC5pbnNwZWN0LmN1c3RvbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iaiA9IHV0aWwuaW5zcGVjdCh7IGxlbmd0aDogdGhpcy5sZW5ndGggfSk7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZSArICcgJyArIG9iajtcbiAgfTtcbn0iLCJcbi8qKlxuICogRm9yIE5vZGUuanMsIHNpbXBseSByZS1leHBvcnQgdGhlIGNvcmUgYHV0aWwuZGVwcmVjYXRlYCBmdW5jdGlvbi5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ3V0aWwnKS5kZXByZWNhdGU7XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7XG5cbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspO1xufTsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLXNlcnZlci5ub2RlLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXIubm9kZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20tc2VydmVyLm5vZGUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGs9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbT1yZXF1aXJlKFwicmVhY3RcIiksYWE9cmVxdWlyZShcInN0cmVhbVwiKTtmdW5jdGlvbiByKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIHU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixiYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj11P1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxjYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxkYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCx3PXU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGVhPXU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmE9dT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGhhPXU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLEI9dT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWE9dT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxqYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGthPXU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixsYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyxuYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtmdW5jdGlvbiBvYShhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYyl7MD09PWEuX3N0YXR1cyYmKGM9Yy5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1jKX0sZnVuY3Rpb24oYyl7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1jKX0pfX1cbmZ1bmN0aW9uIEMoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB2OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIGJhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBkYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBjYTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWE6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSB3OnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgaGE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7XG5jYXNlIGphOnJldHVybiBDKGEudHlwZSk7Y2FzZSBsYTpyZXR1cm4gQyhhLnJlbmRlcik7Y2FzZSBrYTppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIEMoYSl9cmV0dXJuIG51bGx9dmFyIEQ9bS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtELmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KEQuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7RC5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoRC5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO3ZhciBwYT17fTtmdW5jdGlvbiBFKGEsYil7Zm9yKHZhciBjPWEuX3RocmVhZENvdW50fDA7Yzw9YjtjKyspYVtjXT1hLl9jdXJyZW50VmFsdWUyLGEuX3RocmVhZENvdW50PWMrMX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKGQmJihkPWEuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCkpcmV0dXJuIEUoZCxjKSxkW2NdO2lmKGE9YS5jb250ZXh0VHlwZXMpe2M9e307Zm9yKHZhciBmIGluIGEpY1tmXT1iW2ZdO2I9Y31lbHNlIGI9cGE7cmV0dXJuIGJ9Zm9yKHZhciBGPW5ldyBVaW50MTZBcnJheSgxNiksSD0wOzE1Pkg7SCsrKUZbSF09SCsxO0ZbMTVdPTA7XG52YXIgcmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLHNhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksdGE9e30sdWE9e307XG5mdW5jdGlvbiB2YShhKXtpZihzYS5jYWxsKHVhLGEpKXJldHVybiEwO2lmKHNhLmNhbGwodGEsYSkpcmV0dXJuITE7aWYocmEudGVzdChhKSlyZXR1cm4gdWFbYV09ITA7dGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gd2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiB4YShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHx3YShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEooYSxiLGMsZCxmLGgpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9Zjt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1ofXZhciBLPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0tbYl09bmV3IEooYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0tbYV09bmV3IEooYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBMPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gTShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShMLFxuTSk7S1tiXT1uZXcgSihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKEwsTSk7S1tiXT1uZXcgSihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShMLE0pO0tbYl09bmV3IEooYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbksueGxpbmtIcmVmPW5ldyBKKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgeWE9L1tcIicmPD5dLztcbmZ1bmN0aW9uIE4oYSl7aWYoXCJib29sZWFuXCI9PT10eXBlb2YgYXx8XCJudW1iZXJcIj09PXR5cGVvZiBhKXJldHVyblwiXCIrYTthPVwiXCIrYTt2YXIgYj15YS5leGVjKGEpO2lmKGIpe3ZhciBjPVwiXCIsZCxmPTA7Zm9yKGQ9Yi5pbmRleDtkPGEubGVuZ3RoO2QrKyl7c3dpdGNoKGEuY2hhckNvZGVBdChkKSl7Y2FzZSAzNDpiPVwiJnF1b3Q7XCI7YnJlYWs7Y2FzZSAzODpiPVwiJmFtcDtcIjticmVhaztjYXNlIDM5OmI9XCImI3gyNztcIjticmVhaztjYXNlIDYwOmI9XCImbHQ7XCI7YnJlYWs7Y2FzZSA2MjpiPVwiJmd0O1wiO2JyZWFrO2RlZmF1bHQ6Y29udGludWV9ZiE9PWQmJihjKz1hLnN1YnN0cmluZyhmLGQpKTtmPWQrMTtjKz1ifWE9ZiE9PWQ/YythLnN1YnN0cmluZyhmLGQpOmN9cmV0dXJuIGF9XG5mdW5jdGlvbiB6YShhLGIpe3ZhciBjPUsuaGFzT3duUHJvcGVydHkoYSk/S1thXTpudWxsO3ZhciBkO2lmKGQ9XCJzdHlsZVwiIT09YSlkPW51bGwhPT1jPzA9PT1jLnR5cGU6ISgyPGEubGVuZ3RoKXx8XCJvXCIhPT1hWzBdJiZcIk9cIiE9PWFbMF18fFwiblwiIT09YVsxXSYmXCJOXCIhPT1hWzFdPyExOiEwO2lmKGR8fHhhKGEsYixjLCExKSlyZXR1cm5cIlwiO2lmKG51bGwhPT1jKXthPWMuYXR0cmlidXRlTmFtZTtkPWMudHlwZTtpZigzPT09ZHx8ND09PWQmJiEwPT09YilyZXR1cm4gYSsnPVwiXCInO2Muc2FuaXRpemVVUkwmJihiPVwiXCIrYik7cmV0dXJuIGErJz1cIicrKE4oYikrJ1wiJyl9cmV0dXJuIHZhKGEpP2ErJz1cIicrKE4oYikrJ1wiJyk6XCJcIn1mdW5jdGlvbiBBYShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9XG52YXIgQmE9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6QWEsTz1udWxsLFA9bnVsbCxRPW51bGwsUj0hMSxTPSExLFU9bnVsbCxWPTA7ZnVuY3Rpb24gVygpe2lmKG51bGw9PT1PKXRocm93IEVycm9yKHIoMzIxKSk7cmV0dXJuIE99ZnVuY3Rpb24gQ2EoKXtpZigwPFYpdGhyb3cgRXJyb3IocigzMTIpKTtyZXR1cm57bWVtb2l6ZWRTdGF0ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBEYSgpe251bGw9PT1RP251bGw9PT1QPyhSPSExLFA9UT1DYSgpKTooUj0hMCxRPVApOm51bGw9PT1RLm5leHQ/KFI9ITEsUT1RLm5leHQ9Q2EoKSk6KFI9ITAsUT1RLm5leHQpO3JldHVybiBRfWZ1bmN0aW9uIEVhKGEsYixjLGQpe2Zvcig7UzspUz0hMSxWKz0xLFE9bnVsbCxjPWEoYixkKTtQPU89bnVsbDtWPTA7UT1VPW51bGw7cmV0dXJuIGN9ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBHYShhLGIsYyl7Tz1XKCk7UT1EYSgpO2lmKFIpe3ZhciBkPVEucXVldWU7Yj1kLmRpc3BhdGNoO2lmKG51bGwhPT1VJiYoYz1VLmdldChkKSx2b2lkIDAhPT1jKSl7VS5kZWxldGUoZCk7ZD1RLm1lbW9pemVkU3RhdGU7ZG8gZD1hKGQsYy5hY3Rpb24pLGM9Yy5uZXh0O3doaWxlKG51bGwhPT1jKTtRLm1lbW9pemVkU3RhdGU9ZDtyZXR1cm5bZCxiXX1yZXR1cm5bUS5tZW1vaXplZFN0YXRlLGJdfWE9YT09PUZhP1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoKTpiOnZvaWQgMCE9PWM/YyhiKTpiO1EubWVtb2l6ZWRTdGF0ZT1hO2E9US5xdWV1ZT17bGFzdDpudWxsLGRpc3BhdGNoOm51bGx9O2E9YS5kaXNwYXRjaD1IYS5iaW5kKG51bGwsTyxhKTtyZXR1cm5bUS5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gSGEoYSxiLGMpe2lmKCEoMjU+VikpdGhyb3cgRXJyb3IocigzMDEpKTtpZihhPT09TylpZihTPSEwLGE9e2FjdGlvbjpjLG5leHQ6bnVsbH0sbnVsbD09PVUmJihVPW5ldyBNYXApLGM9VS5nZXQoYiksdm9pZCAwPT09YylVLnNldChiLGEpO2Vsc2V7Zm9yKGI9YztudWxsIT09Yi5uZXh0OyliPWIubmV4dDtiLm5leHQ9YX19ZnVuY3Rpb24gSWEoKXt9XG52YXIgWD0wLEphPXtyZWFkQ29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1YO0UoYSxiKTtyZXR1cm4gYVtiXX0sdXNlQ29udGV4dDpmdW5jdGlvbihhKXtXKCk7dmFyIGI9WDtFKGEsYik7cmV0dXJuIGFbYl19LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXtPPVcoKTtRPURhKCk7Yj12b2lkIDA9PT1iP251bGw6YjtpZihudWxsIT09USl7dmFyIGM9US5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiZudWxsIT09Yil7YTp7dmFyIGQ9Y1sxXTtpZihudWxsPT09ZClkPSExO2Vsc2V7Zm9yKHZhciBmPTA7ZjxkLmxlbmd0aCYmZjxiLmxlbmd0aDtmKyspaWYoIUJhKGJbZl0sZFtmXSkpe2Q9ITE7YnJlYWsgYX1kPSEwfX1pZihkKXJldHVybiBjWzBdfX1hPWEoKTtRLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6R2EsdXNlUmVmOmZ1bmN0aW9uKGEpe089VygpO1E9RGEoKTt2YXIgYj1RLm1lbW9pemVkU3RhdGU7cmV0dXJuIG51bGw9PT1iPyhhPXtjdXJyZW50OmF9LFEubWVtb2l6ZWRTdGF0ZT1cbmEpOmJ9LHVzZVN0YXRlOmZ1bmN0aW9uKGEpe3JldHVybiBHYShGYSxhKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKCl7fSx1c2VDYWxsYmFjazpmdW5jdGlvbihhKXtyZXR1cm4gYX0sdXNlSW1wZXJhdGl2ZUhhbmRsZTpJYSx1c2VFZmZlY3Q6SWEsdXNlRGVidWdWYWx1ZTpJYSx1c2VSZXNwb25kZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm57cHJvcHM6YixyZXNwb25kZXI6YX19LHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7VygpO3JldHVybiBhfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7VygpO3JldHVybltmdW5jdGlvbihhKXthKCl9LCExXX19LEthPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIExhKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG52YXIgTWE9e2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0sTmE9ayh7bWVudWl0ZW06ITB9LE1hKSxZPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLFxuZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LE9hPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhZKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe09hLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7WVtiXT1ZW2FdfSl9KTtcbnZhciBQYT0vKFtBLVpdKS9nLFFhPS9ebXMtLyxaPW0uQ2hpbGRyZW4udG9BcnJheSxSYT1ELlJlYWN0Q3VycmVudERpc3BhdGNoZXIsU2E9e2xpc3Rpbmc6ITAscHJlOiEwLHRleHRhcmVhOiEwfSxUYT0vXlthLXpBLVpdW2EtekEtWjpfXFwuXFwtXFxkXSokLyxVYT17fSxWYT17fTtmdW5jdGlvbiBXYShhKXtpZih2b2lkIDA9PT1hfHxudWxsPT09YSlyZXR1cm4gYTt2YXIgYj1cIlwiO20uQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifXZhciBYYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFlhPXtjaGlsZHJlbjpudWxsLGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOm51bGwsc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOm51bGwsc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nOm51bGx9O2Z1bmN0aW9uIFphKGEsYil7aWYodm9pZCAwPT09YSl0aHJvdyBFcnJvcihyKDE1MixDKGIpfHxcIkNvbXBvbmVudFwiKSk7fVxuZnVuY3Rpb24gJGEoYSxiLGMpe2Z1bmN0aW9uIGQoZCxoKXt2YXIgZT1oLnByb3RvdHlwZSYmaC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCxmPXFhKGgsYixjLGUpLHA9W10sZz0hMSxsPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7aWYobnVsbD09PXApcmV0dXJuIG51bGx9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxjKXtnPSEwO3A9W2NdfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxjKXtpZihudWxsPT09cClyZXR1cm4gbnVsbDtwLnB1c2goYyl9fTtpZihlKXtpZihlPW5ldyBoKGQucHJvcHMsZixsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMpe3ZhciB4PWguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLmNhbGwobnVsbCxkLnByb3BzLGUuc3RhdGUpO251bGwhPXgmJihlLnN0YXRlPWsoe30sZS5zdGF0ZSx4KSl9fWVsc2UgaWYoTz17fSxlPWgoZC5wcm9wcyxcbmYsbCksZT1FYShoLGQucHJvcHMsZSxmKSxudWxsPT1lfHxudWxsPT1lLnJlbmRlcil7YT1lO1phKGEsaCk7cmV0dXJufWUucHJvcHM9ZC5wcm9wcztlLmNvbnRleHQ9ZjtlLnVwZGF0ZXI9bDtsPWUuc3RhdGU7dm9pZCAwPT09bCYmKGUuc3RhdGU9bD1udWxsKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgaC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxwLmxlbmd0aCl7bD1wO3ZhciB0PVxuZztwPW51bGw7Zz0hMTtpZih0JiYxPT09bC5sZW5ndGgpZS5zdGF0ZT1sWzBdO2Vsc2V7eD10P2xbMF06ZS5zdGF0ZTt2YXIgeT0hMDtmb3IodD10PzE6MDt0PGwubGVuZ3RoO3QrKyl7dmFyIHE9bFt0XTtxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxP3EuY2FsbChlLHgsZC5wcm9wcyxmKTpxO251bGwhPXEmJih5Pyh5PSExLHg9ayh7fSx4LHEpKTprKHgscSkpfWUuc3RhdGU9eH19ZWxzZSBwPW51bGw7YT1lLnJlbmRlcigpO1phKGEsaCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0Q2hpbGRDb250ZXh0JiYoZD1oLmNoaWxkQ29udGV4dFR5cGVzLFwib2JqZWN0XCI9PT10eXBlb2YgZCkpe3ZhciBBPWUuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBUIGluIEEpaWYoIShUIGluIGQpKXRocm93IEVycm9yKHIoMTA4LEMoaCl8fFwiVW5rbm93blwiLFQpKTt9QSYmKGI9ayh7fSxiLEEpKX1mb3IoO20uaXNWYWxpZEVsZW1lbnQoYSk7KXt2YXIgZj1hLGg9Zi50eXBlO2lmKFwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGgpYnJlYWs7ZChmLGgpfXJldHVybntjaGlsZDphLGNvbnRleHQ6Yn19XG52YXIgYWI9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYil7bS5pc1ZhbGlkRWxlbWVudChhKT9hLnR5cGUhPT12P2E9W2FdOihhPWEucHJvcHMuY2hpbGRyZW4sYT1tLmlzVmFsaWRFbGVtZW50KGEpP1thXTpaKGEpKTphPVooYSk7YT17dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpLYS5odG1sLGNoaWxkcmVuOmEsY2hpbGRJbmRleDowLGNvbnRleHQ6cGEsZm9vdGVyOlwiXCJ9O3ZhciBjPUZbMF07aWYoMD09PWMpe3ZhciBkPUY7Yz1kLmxlbmd0aDt2YXIgcD0yKmM7aWYoISg2NTUzNj49cCkpdGhyb3cgRXJyb3IocigzMDQpKTt2YXIgZz1uZXcgVWludDE2QXJyYXkocCk7Zy5zZXQoZCk7Rj1nO0ZbMF09YysxO2ZvcihkPWM7ZDxwLTE7ZCsrKUZbZF09ZCsxO0ZbcC0xXT0wfWVsc2UgRlswXT1GW2NdO3RoaXMudGhyZWFkSUQ9Yzt0aGlzLnN0YWNrPVthXTt0aGlzLmV4aGF1c3RlZD0hMTt0aGlzLmN1cnJlbnRTZWxlY3RWYWx1ZT1udWxsO3RoaXMucHJldmlvdXNXYXNUZXh0Tm9kZT0hMTt0aGlzLm1ha2VTdGF0aWNNYXJrdXA9XG5iO3RoaXMuc3VzcGVuc2VEZXB0aD0wO3RoaXMuY29udGV4dEluZGV4PS0xO3RoaXMuY29udGV4dFN0YWNrPVtdO3RoaXMuY29udGV4dFZhbHVlU3RhY2s9W119dmFyIGI9YS5wcm90b3R5cGU7Yi5kZXN0cm95PWZ1bmN0aW9uKCl7aWYoIXRoaXMuZXhoYXVzdGVkKXt0aGlzLmV4aGF1c3RlZD0hMDt0aGlzLmNsZWFyUHJvdmlkZXJzKCk7dmFyIGE9dGhpcy50aHJlYWRJRDtGW2FdPUZbMF07RlswXT1hfX07Yi5wdXNoUHJvdmlkZXI9ZnVuY3Rpb24oYSl7dmFyIGI9Kyt0aGlzLmNvbnRleHRJbmRleCxjPWEudHlwZS5fY29udGV4dCxoPXRoaXMudGhyZWFkSUQ7RShjLGgpO3ZhciBwPWNbaF07dGhpcy5jb250ZXh0U3RhY2tbYl09Yzt0aGlzLmNvbnRleHRWYWx1ZVN0YWNrW2JdPXA7Y1toXT1hLnByb3BzLnZhbHVlfTtiLnBvcFByb3ZpZGVyPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb250ZXh0SW5kZXgsYj10aGlzLmNvbnRleHRTdGFja1thXSxmPXRoaXMuY29udGV4dFZhbHVlU3RhY2tbYV07XG50aGlzLmNvbnRleHRTdGFja1thXT1udWxsO3RoaXMuY29udGV4dFZhbHVlU3RhY2tbYV09bnVsbDt0aGlzLmNvbnRleHRJbmRleC0tO2JbdGhpcy50aHJlYWRJRF09Zn07Yi5jbGVhclByb3ZpZGVycz1mdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmNvbnRleHRJbmRleDswPD1hO2EtLSl0aGlzLmNvbnRleHRTdGFja1thXVt0aGlzLnRocmVhZElEXT10aGlzLmNvbnRleHRWYWx1ZVN0YWNrW2FdfTtiLnJlYWQ9ZnVuY3Rpb24oYSl7aWYodGhpcy5leGhhdXN0ZWQpcmV0dXJuIG51bGw7dmFyIGI9WDtYPXRoaXMudGhyZWFkSUQ7dmFyIGM9UmEuY3VycmVudDtSYS5jdXJyZW50PUphO3RyeXtmb3IodmFyIGg9W1wiXCJdLHA9ITE7aFswXS5sZW5ndGg8YTspe2lmKDA9PT10aGlzLnN0YWNrLmxlbmd0aCl7dGhpcy5leGhhdXN0ZWQ9ITA7dmFyIGc9dGhpcy50aHJlYWRJRDtGW2ddPUZbMF07RlswXT1nO2JyZWFrfXZhciBlPXRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtMV07aWYocHx8ZS5jaGlsZEluZGV4Pj1cbmUuY2hpbGRyZW4ubGVuZ3RoKXt2YXIgST1lLmZvb3RlcjtcIlwiIT09SSYmKHRoaXMucHJldmlvdXNXYXNUZXh0Tm9kZT0hMSk7dGhpcy5zdGFjay5wb3AoKTtpZihcInNlbGVjdFwiPT09ZS50eXBlKXRoaXMuY3VycmVudFNlbGVjdFZhbHVlPW51bGw7ZWxzZSBpZihudWxsIT1lLnR5cGUmJm51bGwhPWUudHlwZS50eXBlJiZlLnR5cGUudHlwZS4kJHR5cGVvZj09PXcpdGhpcy5wb3BQcm92aWRlcihlLnR5cGUpO2Vsc2UgaWYoZS50eXBlPT09Qil7dGhpcy5zdXNwZW5zZURlcHRoLS07dmFyIEc9aC5wb3AoKTtpZihwKXtwPSExO3ZhciBuPWUuZmFsbGJhY2tGcmFtZTtpZighbil0aHJvdyBFcnJvcihyKDMwMykpO3RoaXMuc3RhY2sucHVzaChuKTtoW3RoaXMuc3VzcGVuc2VEZXB0aF0rPVwiXFx4M2MhLS0kIS0tXFx4M2VcIjtjb250aW51ZX1lbHNlIGhbdGhpcy5zdXNwZW5zZURlcHRoXSs9R31oW3RoaXMuc3VzcGVuc2VEZXB0aF0rPUl9ZWxzZXt2YXIgbD1lLmNoaWxkcmVuW2UuY2hpbGRJbmRleCsrXSxcbng9XCJcIjt0cnl7eCs9dGhpcy5yZW5kZXIobCxlLmNvbnRleHQsZS5kb21OYW1lc3BhY2UpfWNhdGNoKHQpe2lmKG51bGwhPXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB0LnRoZW4pdGhyb3cgRXJyb3IocigyOTQpKTt0aHJvdyB0O31maW5hbGx5e31oLmxlbmd0aDw9dGhpcy5zdXNwZW5zZURlcHRoJiZoLnB1c2goXCJcIik7aFt0aGlzLnN1c3BlbnNlRGVwdGhdKz14fX1yZXR1cm4gaFswXX1maW5hbGx5e1JhLmN1cnJlbnQ9YyxYPWJ9fTtiLnJlbmRlcj1mdW5jdGlvbihhLGIsZil7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcIm51bWJlclwiPT09dHlwZW9mIGEpe2Y9XCJcIithO2lmKFwiXCI9PT1mKXJldHVyblwiXCI7aWYodGhpcy5tYWtlU3RhdGljTWFya3VwKXJldHVybiBOKGYpO2lmKHRoaXMucHJldmlvdXNXYXNUZXh0Tm9kZSlyZXR1cm5cIlxceDNjIS0tIC0tXFx4M2VcIitOKGYpO3RoaXMucHJldmlvdXNXYXNUZXh0Tm9kZT0hMDtyZXR1cm4gTihmKX1iPSRhKGEsYix0aGlzLnRocmVhZElEKTthPWIuY2hpbGQ7XG5iPWIuY29udGV4dDtpZihudWxsPT09YXx8ITE9PT1hKXJldHVyblwiXCI7aWYoIW0uaXNWYWxpZEVsZW1lbnQoYSkpe2lmKG51bGwhPWEmJm51bGwhPWEuJCR0eXBlb2Ype2Y9YS4kJHR5cGVvZjtpZihmPT09YmEpdGhyb3cgRXJyb3IocigyNTcpKTt0aHJvdyBFcnJvcihyKDI1OCxmLnRvU3RyaW5nKCkpKTt9YT1aKGEpO3RoaXMuc3RhY2sucHVzaCh7dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpmLGNoaWxkcmVuOmEsY2hpbGRJbmRleDowLGNvbnRleHQ6Yixmb290ZXI6XCJcIn0pO3JldHVyblwiXCJ9dmFyIGM9YS50eXBlO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYylyZXR1cm4gdGhpcy5yZW5kZXJET00oYSxiLGYpO3N3aXRjaChjKXtjYXNlIGNhOmNhc2UgZmE6Y2FzZSBkYTpjYXNlIGlhOmNhc2UgdjpyZXR1cm4gYT1aKGEucHJvcHMuY2hpbGRyZW4pLHRoaXMuc3RhY2sucHVzaCh7dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpmLGNoaWxkcmVuOmEsY2hpbGRJbmRleDowLGNvbnRleHQ6Yixmb290ZXI6XCJcIn0pLFxuXCJcIjtjYXNlIEI6dGhyb3cgRXJyb3IocigyOTQpKTt9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yylzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBoYTpPPXt9O3ZhciBkPWMucmVuZGVyKGEucHJvcHMsYS5yZWYpO2Q9RWEoYy5yZW5kZXIsYS5wcm9wcyxkLGEucmVmKTtkPVooZCk7dGhpcy5zdGFjay5wdXNoKHt0eXBlOm51bGwsZG9tTmFtZXNwYWNlOmYsY2hpbGRyZW46ZCxjaGlsZEluZGV4OjAsY29udGV4dDpiLGZvb3RlcjpcIlwifSk7cmV0dXJuXCJcIjtjYXNlIGphOnJldHVybiBhPVttLmNyZWF0ZUVsZW1lbnQoYy50eXBlLGsoe3JlZjphLnJlZn0sYS5wcm9wcykpXSx0aGlzLnN0YWNrLnB1c2goe3R5cGU6bnVsbCxkb21OYW1lc3BhY2U6ZixjaGlsZHJlbjphLGNoaWxkSW5kZXg6MCxjb250ZXh0OmIsZm9vdGVyOlwiXCJ9KSxcIlwiO2Nhc2UgdzpyZXR1cm4gYz1aKGEucHJvcHMuY2hpbGRyZW4pLGY9e3R5cGU6YSxkb21OYW1lc3BhY2U6ZixjaGlsZHJlbjpjLGNoaWxkSW5kZXg6MCxcbmNvbnRleHQ6Yixmb290ZXI6XCJcIn0sdGhpcy5wdXNoUHJvdmlkZXIoYSksdGhpcy5zdGFjay5wdXNoKGYpLFwiXCI7Y2FzZSBlYTpjPWEudHlwZTtkPWEucHJvcHM7dmFyIGc9dGhpcy50aHJlYWRJRDtFKGMsZyk7Yz1aKGQuY2hpbGRyZW4oY1tnXSkpO3RoaXMuc3RhY2sucHVzaCh7dHlwZTphLGRvbU5hbWVzcGFjZTpmLGNoaWxkcmVuOmMsY2hpbGRJbmRleDowLGNvbnRleHQ6Yixmb290ZXI6XCJcIn0pO3JldHVyblwiXCI7Y2FzZSBtYTp0aHJvdyBFcnJvcihyKDMzOCkpO2Nhc2Uga2E6c3dpdGNoKGM9YS50eXBlLG9hKGMpLGMuX3N0YXR1cyl7Y2FzZSAxOnJldHVybiBhPVttLmNyZWF0ZUVsZW1lbnQoYy5fcmVzdWx0LGsoe3JlZjphLnJlZn0sYS5wcm9wcykpXSx0aGlzLnN0YWNrLnB1c2goe3R5cGU6bnVsbCxkb21OYW1lc3BhY2U6ZixjaGlsZHJlbjphLGNoaWxkSW5kZXg6MCxjb250ZXh0OmIsZm9vdGVyOlwiXCJ9KSxcIlwiO2Nhc2UgMjp0aHJvdyBjLl9yZXN1bHQ7ZGVmYXVsdDp0aHJvdyBFcnJvcihyKDI5NSkpO1xufWNhc2UgbmE6dGhyb3cgRXJyb3IocigzNDMpKTt9dGhyb3cgRXJyb3IocigxMzAsbnVsbD09Yz9jOnR5cGVvZiBjLFwiXCIpKTt9O2IucmVuZGVyRE9NPWZ1bmN0aW9uKGEsYixmKXt2YXIgYz1hLnR5cGUudG9Mb3dlckNhc2UoKTtmPT09S2EuaHRtbCYmTGEoYyk7aWYoIVVhLmhhc093blByb3BlcnR5KGMpKXtpZighVGEudGVzdChjKSl0aHJvdyBFcnJvcihyKDY1LGMpKTtVYVtjXT0hMH12YXIgZD1hLnByb3BzO2lmKFwiaW5wdXRcIj09PWMpZD1rKHt0eXBlOnZvaWQgMH0sZCx7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6bnVsbCE9ZC52YWx1ZT9kLnZhbHVlOmQuZGVmYXVsdFZhbHVlLGNoZWNrZWQ6bnVsbCE9ZC5jaGVja2VkP2QuY2hlY2tlZDpkLmRlZmF1bHRDaGVja2VkfSk7ZWxzZSBpZihcInRleHRhcmVhXCI9PT1jKXt2YXIgZz1kLnZhbHVlO2lmKG51bGw9PWcpe2c9ZC5kZWZhdWx0VmFsdWU7dmFyIGU9ZC5jaGlsZHJlbjtpZihudWxsIT1lKXtpZihudWxsIT1cbmcpdGhyb3cgRXJyb3Iocig5MikpO2lmKEFycmF5LmlzQXJyYXkoZSkpe2lmKCEoMT49ZS5sZW5ndGgpKXRocm93IEVycm9yKHIoOTMpKTtlPWVbMF19Zz1cIlwiK2V9bnVsbD09ZyYmKGc9XCJcIil9ZD1rKHt9LGQse3ZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2d9KX1lbHNlIGlmKFwic2VsZWN0XCI9PT1jKXRoaXMuY3VycmVudFNlbGVjdFZhbHVlPW51bGwhPWQudmFsdWU/ZC52YWx1ZTpkLmRlZmF1bHRWYWx1ZSxkPWsoe30sZCx7dmFsdWU6dm9pZCAwfSk7ZWxzZSBpZihcIm9wdGlvblwiPT09Yyl7ZT10aGlzLmN1cnJlbnRTZWxlY3RWYWx1ZTt2YXIgST1XYShkLmNoaWxkcmVuKTtpZihudWxsIT1lKXt2YXIgRz1udWxsIT1kLnZhbHVlP2QudmFsdWUrXCJcIjpJO2c9ITE7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7aWYoXCJcIitlW25dPT09Ryl7Zz0hMDticmVha319ZWxzZSBnPVwiXCIrZT09PUc7ZD1rKHtzZWxlY3RlZDp2b2lkIDAsY2hpbGRyZW46dm9pZCAwfSxcbmQse3NlbGVjdGVkOmcsY2hpbGRyZW46SX0pfX1pZihnPWQpe2lmKE5hW2NdJiYobnVsbCE9Zy5jaGlsZHJlbnx8bnVsbCE9Zy5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocigxMzcsYyxcIlwiKSk7aWYobnVsbCE9Zy5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Zy5jaGlsZHJlbil0aHJvdyBFcnJvcihyKDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGcuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBnLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihyKDYxKSk7fWlmKG51bGwhPWcuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgZy5zdHlsZSl0aHJvdyBFcnJvcihyKDYyLFwiXCIpKTt9Zz1kO2U9dGhpcy5tYWtlU3RhdGljTWFya3VwO0k9MT09PXRoaXMuc3RhY2subGVuZ3RoO0c9XCI8XCIrYS50eXBlO2Zvcih6IGluIGcpaWYoWGEuY2FsbChnLHopKXt2YXIgbD1nW3pdO2lmKG51bGwhPWwpe2lmKFwic3R5bGVcIj09PVxueil7bj12b2lkIDA7dmFyIHg9XCJcIix0PVwiXCI7Zm9yKG4gaW4gbClpZihsLmhhc093blByb3BlcnR5KG4pKXt2YXIgeT0wPT09bi5pbmRleE9mKFwiLS1cIikscT1sW25dO2lmKG51bGwhPXEpe2lmKHkpdmFyIEE9bjtlbHNlIGlmKEE9bixWYS5oYXNPd25Qcm9wZXJ0eShBKSlBPVZhW0FdO2Vsc2V7dmFyIFQ9QS5yZXBsYWNlKFBhLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZShRYSxcIi1tcy1cIik7QT1WYVtBXT1UfXgrPXQrQStcIjpcIjt0PW47eT1udWxsPT1xfHxcImJvb2xlYW5cIj09PXR5cGVvZiBxfHxcIlwiPT09cT9cIlwiOnl8fFwibnVtYmVyXCIhPT10eXBlb2YgcXx8MD09PXF8fFkuaGFzT3duUHJvcGVydHkodCkmJllbdF0/KFwiXCIrcSkudHJpbSgpOnErXCJweFwiO3grPXk7dD1cIjtcIn19bD14fHxudWxsfW49bnVsbDtiOmlmKHk9YyxxPWcsLTE9PT15LmluZGV4T2YoXCItXCIpKXk9XCJzdHJpbmdcIj09PXR5cGVvZiBxLmlzO2Vsc2Ugc3dpdGNoKHkpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6eT1cbiExO2JyZWFrIGI7ZGVmYXVsdDp5PSEwfXk/WWEuaGFzT3duUHJvcGVydHkoeil8fChuPXosbj12YShuKSYmbnVsbCE9bD9uKyc9XCInKyhOKGwpKydcIicpOlwiXCIpOm49emEoeixsKTtuJiYoRys9XCIgXCIrbil9fWV8fEkmJihHKz0nIGRhdGEtcmVhY3Ryb290PVwiXCInKTt2YXIgej1HO2c9XCJcIjtNYS5oYXNPd25Qcm9wZXJ0eShjKT96Kz1cIi8+XCI6KHorPVwiPlwiLGc9XCI8L1wiK2EudHlwZStcIj5cIik7YTp7ZT1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO2lmKG51bGwhPWUpe2lmKG51bGwhPWUuX19odG1sKXtlPWUuX19odG1sO2JyZWFrIGF9fWVsc2UgaWYoZT1kLmNoaWxkcmVuLFwic3RyaW5nXCI9PT10eXBlb2YgZXx8XCJudW1iZXJcIj09PXR5cGVvZiBlKXtlPU4oZSk7YnJlYWsgYX1lPW51bGx9bnVsbCE9ZT8oZD1bXSxTYS5oYXNPd25Qcm9wZXJ0eShjKSYmXCJcXG5cIj09PWUuY2hhckF0KDApJiYoeis9XCJcXG5cIikseis9ZSk6ZD1aKGQuY2hpbGRyZW4pO2E9YS50eXBlO2Y9bnVsbD09Znx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1cbmY/TGEoYSk6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09ZiYmXCJmb3JlaWduT2JqZWN0XCI9PT1hP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmY7dGhpcy5zdGFjay5wdXNoKHtkb21OYW1lc3BhY2U6Zix0eXBlOmMsY2hpbGRyZW46ZCxjaGlsZEluZGV4OjAsY29udGV4dDpiLGZvb3RlcjpnfSk7dGhpcy5wcmV2aW91c1dhc1RleHROb2RlPSExO3JldHVybiB6fTtyZXR1cm4gYX0oKTtmdW5jdGlvbiBiYihhLGIpe2EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYi5wcm90b3R5cGUpO2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPWE7YS5fX3Byb3RvX189Yn1cbnZhciBjYj1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKGIsYyl7dmFyIGQ9YS5jYWxsKHRoaXMse30pfHx0aGlzO2QucGFydGlhbFJlbmRlcmVyPW5ldyBhYihiLGMpO3JldHVybiBkfWJiKGIsYSk7dmFyIGM9Yi5wcm90b3R5cGU7Yy5fZGVzdHJveT1mdW5jdGlvbihhLGIpe3RoaXMucGFydGlhbFJlbmRlcmVyLmRlc3Ryb3koKTtiKGEpfTtjLl9yZWFkPWZ1bmN0aW9uKGEpe3RyeXt0aGlzLnB1c2godGhpcy5wYXJ0aWFsUmVuZGVyZXIucmVhZChhKSl9Y2F0Y2goZil7dGhpcy5kZXN0cm95KGYpfX07cmV0dXJuIGJ9KGFhLlJlYWRhYmxlKSxkYj17cmVuZGVyVG9TdHJpbmc6ZnVuY3Rpb24oYSl7YT1uZXcgYWIoYSwhMSk7dHJ5e3JldHVybiBhLnJlYWQoSW5maW5pdHkpfWZpbmFsbHl7YS5kZXN0cm95KCl9fSxyZW5kZXJUb1N0YXRpY01hcmt1cDpmdW5jdGlvbihhKXthPW5ldyBhYihhLCEwKTt0cnl7cmV0dXJuIGEucmVhZChJbmZpbml0eSl9ZmluYWxseXthLmRlc3Ryb3koKX19LHJlbmRlclRvTm9kZVN0cmVhbTpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGNiKGEsXG4hMSl9LHJlbmRlclRvU3RhdGljTm9kZVN0cmVhbTpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGNiKGEsITApfSx2ZXJzaW9uOlwiMTYuMTMuMVwifTttb2R1bGUuZXhwb3J0cz1kYi5kZWZhdWx0fHxkYjtcbiIsIi8qIVxuICogbWltZS1kYlxuICogQ29weXJpZ2h0KGMpIDIwMTQgSm9uYXRoYW4gT25nXG4gKiBNSVQgTGljZW5zZWRcbiAqL1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kYi5qc29uJylcbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBQYWNrYWdlSnNvbiBmcm9tIFwiLi4vLi4vcGFja2FnZS5qc29uXCI7XG5cbnZhciBqc29uID0gUGFja2FnZUpzb247XG5cbmV4cG9ydCB7XG4gIGpzb24gLFxuICBcbn1cbi8qIGpzb24gTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBBcmdwYXJzZSBmcm9tIFwiYXJncGFyc2VcIjtcblxuZnVuY3Rpb24gbWFrZSh2ZXJzaW9uLCBwcm9nKSB7XG4gIHJldHVybiBuZXcgQXJncGFyc2UuQXJndW1lbnRQYXJzZXIoe1xuICAgICAgICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICBwcm9nOiBwcm9nXG4gICAgICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQXJndW1lbnQoc2hvcnROYW1lLCBsb25nTmFtZSwgZGVzdCwgcmVxdWlyZWQsIG1ldGF2YXIsIHBhcnNlcikge1xuICBwYXJzZXIuYWRkQXJndW1lbnQoW1xuICAgICAgICBzaG9ydE5hbWUsXG4gICAgICAgIGxvbmdOYW1lXG4gICAgICBdLCB7XG4gICAgICAgIGRlc3Q6IGRlc3QsXG4gICAgICAgIG1ldGF2YXI6IG1ldGF2YXIsXG4gICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZFxuICAgICAgfSk7XG4gIFxufVxuXG5leHBvcnQge1xuICBtYWtlICxcbiAgYWRkQXJndW1lbnQgLFxuICBcbn1cbi8qIGFyZ3BhcnNlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgUGFja2FnZSBmcm9tIFwiLi9iaW5kaW5ncy9QYWNrYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBBcmdQYXJzZSBmcm9tIFwiLi9iaW5kaW5ncy9BcmdQYXJzZS5icy5qc1wiO1xuXG5mdW5jdGlvbiBwYXJzZUFyZ3VtZW50cyhwYXJhbSkge1xuICB2YXIgcGFyc2VyID0gQXJnUGFyc2UubWFrZShQYWNrYWdlLmpzb24udmVyc2lvbiwgUGFja2FnZS5qc29uLm5hbWUpO1xuICBBcmdQYXJzZS5hZGRBcmd1bWVudChcIi1zXCIsIFwiLS1zaXRlLW5hbWVcIiwgXCJzaXRlTmFtZVwiLCB0cnVlLCBcIlNUUklOR1wiLCBwYXJzZXIpO1xuICBBcmdQYXJzZS5hZGRBcmd1bWVudChcIi1lXCIsIFwiLS1lbnRyaWVzLWRpcmVjdG9yeVwiLCBcImVudHJpZXNEaXJlY3RvcnlcIiwgdHJ1ZSwgXCJQQVRIXCIsIHBhcnNlcik7XG4gIEFyZ1BhcnNlLmFkZEFyZ3VtZW50KFwiLWFcIiwgXCItLWFib3V0LXBhdGhcIiwgXCJhYm91dFBhdGhcIiwgdHJ1ZSwgXCJQQVRIXCIsIHBhcnNlcik7XG4gIHJldHVybiBwYXJzZXIucGFyc2VBcmdzKCk7XG59XG5cbmV4cG9ydCB7XG4gIHBhcnNlQXJndW1lbnRzICxcbiAgXG59XG4vKiBQYWNrYWdlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuXG5mdW5jdGlvbiBtYWtlKHllYXIsIG1vbnRoLCBkYXksIGhvdXJPcHQsIG1pbnV0ZU9wdCwgcGFyYW0pIHtcbiAgdmFyIGhvdXIgPSBob3VyT3B0ICE9PSB1bmRlZmluZWQgPyBob3VyT3B0IDogMDtcbiAgdmFyIG1pbnV0ZSA9IG1pbnV0ZU9wdCAhPT0gdW5kZWZpbmVkID8gbWludXRlT3B0IDogMDtcbiAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSB8IDAsIGRheSwgaG91ciwgbWludXRlKTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9udGgoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpICsgMSB8IDA7XG59XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBnZXRNb250aCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5cbmZ1bmN0aW9uIF9fKHRhZywgYmxvY2spIHtcbiAgYmxvY2sudGFnID0gdGFnO1xuICByZXR1cm4gYmxvY2s7XG59XG5cbmV4cG9ydCB7XG4gIF9fICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cblxudmFyIG91dF9vZl9tZW1vcnkgPSAvKiB0dXBsZSAqL1tcbiAgXCJPdXRfb2ZfbWVtb3J5XCIsXG4gIDBcbl07XG5cbnZhciBzeXNfZXJyb3IgPSAvKiB0dXBsZSAqL1tcbiAgXCJTeXNfZXJyb3JcIixcbiAgLTFcbl07XG5cbnZhciBmYWlsdXJlID0gLyogdHVwbGUgKi9bXG4gIFwiRmFpbHVyZVwiLFxuICAtMlxuXTtcblxudmFyIGludmFsaWRfYXJndW1lbnQgPSAvKiB0dXBsZSAqL1tcbiAgXCJJbnZhbGlkX2FyZ3VtZW50XCIsXG4gIC0zXG5dO1xuXG52YXIgZW5kX29mX2ZpbGUgPSAvKiB0dXBsZSAqL1tcbiAgXCJFbmRfb2ZfZmlsZVwiLFxuICAtNFxuXTtcblxudmFyIGRpdmlzaW9uX2J5X3plcm8gPSAvKiB0dXBsZSAqL1tcbiAgXCJEaXZpc2lvbl9ieV96ZXJvXCIsXG4gIC01XG5dO1xuXG52YXIgbm90X2ZvdW5kID0gLyogdHVwbGUgKi9bXG4gIFwiTm90X2ZvdW5kXCIsXG4gIC02XG5dO1xuXG52YXIgbWF0Y2hfZmFpbHVyZSA9IC8qIHR1cGxlICovW1xuICBcIk1hdGNoX2ZhaWx1cmVcIixcbiAgLTdcbl07XG5cbnZhciBzdGFja19vdmVyZmxvdyA9IC8qIHR1cGxlICovW1xuICBcIlN0YWNrX292ZXJmbG93XCIsXG4gIC04XG5dO1xuXG52YXIgc3lzX2Jsb2NrZWRfaW8gPSAvKiB0dXBsZSAqL1tcbiAgXCJTeXNfYmxvY2tlZF9pb1wiLFxuICAtOVxuXTtcblxudmFyIGFzc2VydF9mYWlsdXJlID0gLyogdHVwbGUgKi9bXG4gIFwiQXNzZXJ0X2ZhaWx1cmVcIixcbiAgLTEwXG5dO1xuXG52YXIgdW5kZWZpbmVkX3JlY3Vyc2l2ZV9tb2R1bGUgPSAvKiB0dXBsZSAqL1tcbiAgXCJVbmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZVwiLFxuICAtMTFcbl07XG5cbm91dF9vZl9tZW1vcnkudGFnID0gMjQ4O1xuXG5zeXNfZXJyb3IudGFnID0gMjQ4O1xuXG5mYWlsdXJlLnRhZyA9IDI0ODtcblxuaW52YWxpZF9hcmd1bWVudC50YWcgPSAyNDg7XG5cbmVuZF9vZl9maWxlLnRhZyA9IDI0ODtcblxuZGl2aXNpb25fYnlfemVyby50YWcgPSAyNDg7XG5cbm5vdF9mb3VuZC50YWcgPSAyNDg7XG5cbm1hdGNoX2ZhaWx1cmUudGFnID0gMjQ4O1xuXG5zdGFja19vdmVyZmxvdy50YWcgPSAyNDg7XG5cbnN5c19ibG9ja2VkX2lvLnRhZyA9IDI0ODtcblxuYXNzZXJ0X2ZhaWx1cmUudGFnID0gMjQ4O1xuXG51bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZS50YWcgPSAyNDg7XG5cbmV4cG9ydCB7XG4gIG91dF9vZl9tZW1vcnkgLFxuICBzeXNfZXJyb3IgLFxuICBmYWlsdXJlICxcbiAgaW52YWxpZF9hcmd1bWVudCAsXG4gIGVuZF9vZl9maWxlICxcbiAgZGl2aXNpb25fYnlfemVybyAsXG4gIG5vdF9mb3VuZCAsXG4gIG1hdGNoX2ZhaWx1cmUgLFxuICBzdGFja19vdmVyZmxvdyAsXG4gIHN5c19ibG9ja2VkX2lvICxcbiAgYXNzZXJ0X2ZhaWx1cmUgLFxuICB1bmRlZmluZWRfcmVjdXJzaXZlX21vZHVsZSAsXG4gIFxufVxuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcblxuZnVuY3Rpb24gY2FtbF9hcnJheV9zdWIoeCwgb2Zmc2V0LCBsZW4pIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xuICB2YXIgaiA9IDA7XG4gIHZhciBpID0gb2Zmc2V0O1xuICB3aGlsZShqIDwgbGVuKSB7XG4gICAgcmVzdWx0W2pdID0geFtpXTtcbiAgICBqID0gaiArIDEgfCAwO1xuICAgIGkgPSBpICsgMSB8IDA7XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGxlbihfYWNjLCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICBpZiAoIWwpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIF9sID0gbFsxXTtcbiAgICBfYWNjID0gbFswXS5sZW5ndGggKyBhY2MgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbChhcnIsIF9pLCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICghbCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHggPSBsWzBdO1xuICAgIHZhciBsJDEgPSB4Lmxlbmd0aDtcbiAgICB2YXIgayA9IGk7XG4gICAgdmFyIGogPSAwO1xuICAgIHdoaWxlKGogPCBsJDEpIHtcbiAgICAgIGFycltrXSA9IHhbal07XG4gICAgICBrID0gayArIDEgfCAwO1xuICAgICAgaiA9IGogKyAxIHwgMDtcbiAgICB9O1xuICAgIF9sID0gbFsxXTtcbiAgICBfaSA9IGs7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjYW1sX2FycmF5X2NvbmNhdChsKSB7XG4gIHZhciB2ID0gbGVuKDAsIGwpO1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHYpO1xuICBmaWxsKHJlc3VsdCwgMCwgbCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfc2V0KHhzLCBpbmRleCwgbmV3dmFsKSB7XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0geHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbmRleCBvdXQgb2YgYm91bmRzXCJcbiAgICAgICAgXTtcbiAgfVxuICB4c1tpbmRleF0gPSBuZXd2YWw7XG4gIFxufVxuXG5mdW5jdGlvbiBjYW1sX2FycmF5X2dldCh4cywgaW5kZXgpIHtcbiAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB4cy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImluZGV4IG91dCBvZiBib3VuZHNcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiB4c1tpbmRleF07XG59XG5cbmZ1bmN0aW9uIGNhbWxfbWFrZV92ZWN0KGxlbiwgaW5pdCkge1xuICB2YXIgYiA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIGJbaV0gPSBpbml0O1xuICB9XG4gIHJldHVybiBiO1xufVxuXG5mdW5jdGlvbiBjYW1sX21ha2VfZmxvYXRfdmVjdChsZW4pIHtcbiAgdmFyIGIgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICBiW2ldID0gMDtcbiAgfVxuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9ibGl0KGExLCBpMSwgYTIsIGkyLCBsZW4pIHtcbiAgaWYgKGkyIDw9IGkxKSB7XG4gICAgZm9yKHZhciBqID0gMDsgaiA8IGxlbjsgKytqKXtcbiAgICAgIGEyW2ogKyBpMiB8IDBdID0gYTFbaiArIGkxIHwgMF07XG4gICAgfVxuICAgIHJldHVybiA7XG4gIH1cbiAgZm9yKHZhciBqJDEgPSBsZW4gLSAxIHwgMDsgaiQxID49IDA7IC0taiQxKXtcbiAgICBhMltqJDEgKyBpMiB8IDBdID0gYTFbaiQxICsgaTEgfCAwXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9kdXAocHJpbSkge1xuICByZXR1cm4gcHJpbS5zbGljZSgwKTtcbn1cblxuZXhwb3J0IHtcbiAgY2FtbF9hcnJheV9kdXAgLFxuICBjYW1sX2FycmF5X3N1YiAsXG4gIGNhbWxfYXJyYXlfY29uY2F0ICxcbiAgY2FtbF9tYWtlX3ZlY3QgLFxuICBjYW1sX21ha2VfZmxvYXRfdmVjdCAsXG4gIGNhbWxfYXJyYXlfYmxpdCAsXG4gIGNhbWxfYXJyYXlfZ2V0ICxcbiAgY2FtbF9hcnJheV9zZXQgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2FtbF9hcnJheSBmcm9tIFwiLi9jYW1sX2FycmF5LmpzXCI7XG5cbmZ1bmN0aW9uIGFwcChfZiwgX2FyZ3MpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhcmdzID0gX2FyZ3M7XG4gICAgdmFyIGYgPSBfZjtcbiAgICB2YXIgaW5pdF9hcml0eSA9IGYubGVuZ3RoO1xuICAgIHZhciBhcml0eSA9IGluaXRfYXJpdHkgPT09IDAgPyAxIDogaW5pdF9hcml0eTtcbiAgICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gICAgdmFyIGQgPSBhcml0eSAtIGxlbiB8IDA7XG4gICAgaWYgKGQgPT09IDApIHtcbiAgICAgIHJldHVybiBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpZiAoZCA+PSAwKSB7XG4gICAgICByZXR1cm4gKGZ1bmN0aW9uKGYsYXJncyl7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIGFwcChmLCBhcmdzLmNvbmNhdChbeF0pKTtcbiAgICAgIH1cbiAgICAgIH0oZixhcmdzKSk7XG4gICAgfVxuICAgIF9hcmdzID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhcmdzLCBhcml0eSwgLWQgfCAwKTtcbiAgICBfZiA9IGYuYXBwbHkobnVsbCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhcmdzLCAwLCBhcml0eSkpO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gXzEobywgYTApIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMSkge1xuICAgIHJldHVybiBvKGEwKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDEgOlxuICAgICAgICAgIHJldHVybiBvKGEwKTtcbiAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIHBhcmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSAzIDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDQgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMik7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA2IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDcgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzLCBwYXJhbSQ0LCBwYXJhbSQ1KSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCwgcGFyYW0kNSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcHAobywgW2EwXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9fMShvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDEpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCkge1xuICAgICAgICByZXR1cm4gXzEobywgYTApO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzIobywgYTAsIGExKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgW2ExXSk7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSk7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDQgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDUgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDYgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDcgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzLCBwYXJhbSQ0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYXBwKG8sIFtcbiAgICAgICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgICAgIGExXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX18yKG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMikge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSkge1xuICAgICAgICByZXR1cm4gXzIobywgYTAsIGExKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF8zKG8sIGEwLCBhMSwgYTIpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMykge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICAgIGEyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAyIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgW2EyXSk7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIpO1xuICAgICAgY2FzZSA0IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBwYXJhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDYgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA3IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMykge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcHAobywgW1xuICAgICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgIGEyXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX18zKG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gMykge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIpIHtcbiAgICAgICAgcmV0dXJuIF8zKG8sIGEwLCBhMSwgYTIpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzQobywgYTAsIGExLCBhMiwgYTMpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNCkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDEgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhM1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhM1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMyA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIpLCBbYTNdKTtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMpO1xuICAgICAgY2FzZSA1IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDYgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFwcChvLCBbXG4gICAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzXG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX180KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNCkge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzKSB7XG4gICAgICAgIHJldHVybiBfNChvLCBhMCwgYTEsIGEyLCBhMyk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfNShvLCBhMCwgYTEsIGEyLCBhMywgYTQpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNSkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTApLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTRcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTRcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA0IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMpLCBbYTRdKTtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0KTtcbiAgICAgIGNhc2UgNiA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBwYXJhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcHAobywgW1xuICAgICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgYTRcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfXzUobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA1KSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0KSB7XG4gICAgICAgIHJldHVybiBfNShvLCBhMCwgYTEsIGEyLCBhMywgYTQpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzYobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA2KSB7XG4gICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTApLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA0IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDUgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQpLCBbYTVdKTtcbiAgICAgIGNhc2UgNiA6XG4gICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICBjYXNlIDcgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIHBhcmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFwcChvLCBbXG4gICAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgYTVcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfXzYobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA2KSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICAgICAgICByZXR1cm4gXzYobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfNyhvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNikge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA3KSB7XG4gICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAyIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAzIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA1IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMsIGE0KSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA2IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSksIFthNl0pO1xuICAgICAgY2FzZSA3IDpcbiAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYXBwKG8sIFtcbiAgICAgICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgYTZcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfXzcobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA3KSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiAgICAgICAgcmV0dXJuIF83KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF84KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA4KSB7XG4gICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDEgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMyA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDQgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMyksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNiA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDcgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiksIFthN10pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFwcChvLCBbXG4gICAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgIGE2LFxuICAgICAgICAgICAgICAgICAgICBhN1xuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9fOChvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDgpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiAgICAgICAgcmV0dXJuIF84KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBhcHAgLFxuICBfMSAsXG4gIF9fMSAsXG4gIF8yICxcbiAgX18yICxcbiAgXzMgLFxuICBfXzMgLFxuICBfNCAsXG4gIF9fNCAsXG4gIF81ICxcbiAgX181ICxcbiAgXzYgLFxuICBfXzYgLFxuICBfNyAsXG4gIF9fNyAsXG4gIF84ICxcbiAgX184ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cblxudmFyIHVuZGVmaW5lZEhlYWRlciA9IFtdO1xuXG5mdW5jdGlvbiBzb21lKHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBibG9jayA9IC8qIHR1cGxlICovW1xuICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgMFxuICAgIF07XG4gICAgYmxvY2sudGFnID0gMjU2O1xuICAgIHJldHVybiBibG9jaztcbiAgfVxuICBpZiAoISh4ICE9PSBudWxsICYmIHhbMF0gPT09IHVuZGVmaW5lZEhlYWRlcikpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuICB2YXIgbmlkID0geFsxXSArIDEgfCAwO1xuICB2YXIgYmxvY2skMSA9IC8qIHR1cGxlICovW1xuICAgIHVuZGVmaW5lZEhlYWRlcixcbiAgICBuaWRcbiAgXTtcbiAgYmxvY2skMS50YWcgPSAyNTY7XG4gIHJldHVybiBibG9jayQxO1xufVxuXG5mdW5jdGlvbiBudWxsYWJsZV90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb21lKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuZGVmaW5lZF90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudWxsX3RvX29wdCh4KSB7XG4gIGlmICh4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxGcm9tT3B0aW9uKHgpIHtcbiAgaWYgKCEoeCAhPT0gbnVsbCAmJiB4WzBdID09PSB1bmRlZmluZWRIZWFkZXIpKSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgdmFyIGRlcHRoID0geFsxXTtcbiAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB1bmRlZmluZWRIZWFkZXIsXG4gICAgICAgICAgICBkZXB0aCAtIDEgfCAwXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvcHRpb25fZ2V0KHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbEZyb21PcHRpb24oeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uX2dldF91bndyYXAoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsRnJvbU9wdGlvbih4KVsxXTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBudWxsYWJsZV90b19vcHQgLFxuICB1bmRlZmluZWRfdG9fb3B0ICxcbiAgbnVsbF90b19vcHQgLFxuICB2YWxGcm9tT3B0aW9uICxcbiAgc29tZSAsXG4gIG9wdGlvbl9nZXQgLFxuICBvcHRpb25fZ2V0X3Vud3JhcCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBnZXQoZGljdCwgaykge1xuICBpZiAoKGsgaW4gZGljdCkpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShkaWN0W2tdKTtcbiAgfVxuICBcbn1cblxudmFyIHVuc2FmZURlbGV0ZUtleSA9IChmdW5jdGlvbiAoZGljdCxrZXkpe1xuICAgICAgZGVsZXRlIGRpY3Rba2V5XTtcbiAgICAgfSk7XG5cbmZ1bmN0aW9uIGVudHJpZXMoZGljdCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRpY3QpO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGwpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB2YWx1ZXNbaV0gPSAvKiB0dXBsZSAqL1tcbiAgICAgIGtleSxcbiAgICAgIGRpY3Rba2V5XVxuICAgIF07XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gdmFsdWVzKGRpY3QpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkaWN0KTtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyQxID0gbmV3IEFycmF5KGwpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICB2YWx1ZXMkMVtpXSA9IGRpY3Rba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIHZhbHVlcyQxO1xufVxuXG5mdW5jdGlvbiBmcm9tTGlzdChlbnRyaWVzKSB7XG4gIHZhciBkaWN0ID0geyB9O1xuICB2YXIgX3BhcmFtID0gZW50cmllcztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gZGljdDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gICAgZGljdFttYXRjaFswXV0gPSBtYXRjaFsxXTtcbiAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheShlbnRyaWVzKSB7XG4gIHZhciBkaWN0ID0geyB9O1xuICB2YXIgbCA9IGVudHJpZXMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICB2YXIgbWF0Y2ggPSBlbnRyaWVzW2ldO1xuICAgIGRpY3RbbWF0Y2hbMF1dID0gbWF0Y2hbMV07XG4gIH1cbiAgcmV0dXJuIGRpY3Q7XG59XG5cbmZ1bmN0aW9uIG1hcChmLCBzb3VyY2UpIHtcbiAgdmFyIHRhcmdldCA9IHsgfTtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB0YXJnZXRba2V5XSA9IGYoc291cmNlW2tleV0pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmV4cG9ydCB7XG4gIGdldCAsXG4gIHVuc2FmZURlbGV0ZUtleSAsXG4gIGVudHJpZXMgLFxuICB2YWx1ZXMgLFxuICBmcm9tTGlzdCAsXG4gIGZyb21BcnJheSAsXG4gIG1hcCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5cbnZhciBpZCA9IHtcbiAgY29udGVudHM6IDBcbn07XG5cbmZ1bmN0aW9uIGNhbWxfc2V0X29vX2lkKGIpIHtcbiAgYlsxXSA9IGlkLmNvbnRlbnRzO1xuICBpZC5jb250ZW50cyA9IGlkLmNvbnRlbnRzICsgMTtcbiAgcmV0dXJuIGI7XG59XG5cbmZ1bmN0aW9uIGNhbWxfZnJlc2hfb29faWQocGFyYW0pIHtcbiAgaWQuY29udGVudHMgPSBpZC5jb250ZW50cyArIDE7XG4gIHJldHVybiBpZC5jb250ZW50cztcbn1cblxuZnVuY3Rpb24gY3JlYXRlKHN0cikge1xuICB2YXIgdl8wMDEgPSBjYW1sX2ZyZXNoX29vX2lkKHVuZGVmaW5lZCk7XG4gIHZhciB2ID0gLyogdHVwbGUgKi9bXG4gICAgc3RyLFxuICAgIHZfMDAxXG4gIF07XG4gIHYudGFnID0gMjQ4O1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gY2FtbF9pc19leHRlbnNpb24oZSkge1xuICBpZiAoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChlLnRhZyA9PT0gMjQ4KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHNsb3QgPSBlWzBdO1xuICBpZiAoc2xvdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHNsb3QudGFnID09PSAyNDg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIGNhbWxfc2V0X29vX2lkICxcbiAgY2FtbF9mcmVzaF9vb19pZCAsXG4gIGNyZWF0ZSAsXG4gIGNhbWxfaXNfZXh0ZW5zaW9uICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCIuL2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9leGNlcHRpb25zLmpzXCI7XG5cbnZhciAkJEVycm9yID0gQ2FtbF9leGNlcHRpb25zLmNyZWF0ZShcIkNhbWxfanNfZXhjZXB0aW9ucy5FcnJvclwiKTtcblxuZnVuY3Rpb24gaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKGUpIHtcbiAgaWYgKENhbWxfZXhjZXB0aW9ucy5jYW1sX2lzX2V4dGVuc2lvbihlKSkge1xuICAgIHJldHVybiBlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXG4gICAgICAgICAgICAkJEVycm9yLFxuICAgICAgICAgICAgZVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9hc19qc19leG4oZXhuKSB7XG4gIGlmIChleG5bMF0gPT09ICQkRXJyb3IpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShleG5bMV0pO1xuICB9XG4gIFxufVxuXG5leHBvcnQge1xuICAkJEVycm9yICxcbiAgaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uICxcbiAgY2FtbF9hc19qc19leG4gLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuXG5mdW5jdGlvbiBjYW1sX2ludF9jb21wYXJlKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jvb2xfY29tcGFyZSh4LCB5KSB7XG4gIGlmICh4KSB7XG4gICAgaWYgKHkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Zsb2F0X2NvbXBhcmUoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2UgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKHggPiB5IHx8IHggPT09IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmICh5ID09PSB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX2NvbXBhcmUoczEsIHMyKSB7XG4gIGlmIChzMSA9PT0gczIpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIGlmIChzMSA8IHMyKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYnl0ZXNfY29tcGFyZV9hdXgoczEsIHMyLCBfb2ZmLCBsZW4sIGRlZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG9mZiA9IF9vZmY7XG4gICAgaWYgKG9mZiA+PSBsZW4pIHtcbiAgICAgIHJldHVybiBkZWY7XG4gICAgfVxuICAgIHZhciBhID0gczFbb2ZmXTtcbiAgICB2YXIgYiA9IHMyW29mZl07XG4gICAgaWYgKGEgPiBiKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGEgPCBiKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIF9vZmYgPSBvZmYgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbWxfYnl0ZXNfY29tcGFyZShzMSwgczIpIHtcbiAgdmFyIGxlbjEgPSBzMS5sZW5ndGg7XG4gIHZhciBsZW4yID0gczIubGVuZ3RoO1xuICBpZiAobGVuMSA9PT0gbGVuMikge1xuICAgIHJldHVybiBjYW1sX2J5dGVzX2NvbXBhcmVfYXV4KHMxLCBzMiwgMCwgbGVuMSwgMCk7XG4gIH0gZWxzZSBpZiAobGVuMSA8IGxlbjIpIHtcbiAgICByZXR1cm4gY2FtbF9ieXRlc19jb21wYXJlX2F1eChzMSwgczIsIDAsIGxlbjEsIC0xKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FtbF9ieXRlc19jb21wYXJlX2F1eChzMSwgczIsIDAsIGxlbjIsIDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYnl0ZXNfZXF1YWwoczEsIHMyKSB7XG4gIHZhciBsZW4xID0gczEubGVuZ3RoO1xuICB2YXIgbGVuMiA9IHMyLmxlbmd0aDtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICB2YXIgX29mZiA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIG9mZiA9IF9vZmY7XG4gICAgICBpZiAob2ZmID09PSBsZW4xKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzMVtvZmZdO1xuICAgICAgdmFyIGIgPSBzMltvZmZdO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgX29mZiA9IG9mZiArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYm9vbF9taW4oeCwgeSkge1xuICBpZiAoeCkge1xuICAgIHJldHVybiB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50X21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfZmxvYXRfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zdHJpbmdfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9uYXRpdmVpbnRfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9pbnQzMl9taW4oeCwgeSkge1xuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jvb2xfbWF4KHgsIHkpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludF9tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Zsb2F0X21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbmF0aXZlaW50X21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50MzJfbWF4KHgsIHkpIHtcbiAgaWYgKHggPiB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxudmFyIGNhbWxfbmF0aXZlaW50X2NvbXBhcmUgPSBjYW1sX2ludF9jb21wYXJlO1xuXG52YXIgY2FtbF9pbnQzMl9jb21wYXJlID0gY2FtbF9pbnRfY29tcGFyZTtcblxuZXhwb3J0IHtcbiAgY2FtbF9ieXRlc19jb21wYXJlICxcbiAgY2FtbF9ieXRlc19lcXVhbCAsXG4gIGNhbWxfaW50X2NvbXBhcmUgLFxuICBjYW1sX2Jvb2xfY29tcGFyZSAsXG4gIGNhbWxfZmxvYXRfY29tcGFyZSAsXG4gIGNhbWxfbmF0aXZlaW50X2NvbXBhcmUgLFxuICBjYW1sX3N0cmluZ19jb21wYXJlICxcbiAgY2FtbF9pbnQzMl9jb21wYXJlICxcbiAgY2FtbF9ib29sX21pbiAsXG4gIGNhbWxfaW50X21pbiAsXG4gIGNhbWxfZmxvYXRfbWluICxcbiAgY2FtbF9zdHJpbmdfbWluICxcbiAgY2FtbF9uYXRpdmVpbnRfbWluICxcbiAgY2FtbF9pbnQzMl9taW4gLFxuICBjYW1sX2Jvb2xfbWF4ICxcbiAgY2FtbF9pbnRfbWF4ICxcbiAgY2FtbF9mbG9hdF9tYXggLFxuICBjYW1sX3N0cmluZ19tYXggLFxuICBjYW1sX25hdGl2ZWludF9tYXggLFxuICBjYW1sX2ludDMyX21heCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgSnNfbWF0aCBmcm9tIFwiLi9qc19tYXRoLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9wcmltaXRpdmUgZnJvbSBcIi4vY2FtbF9wcmltaXRpdmUuanNcIjtcblxuZnVuY3Rpb24gZ2V0KGFyciwgaSkge1xuICBpZiAoaSA+PSAwICYmIGkgPCBhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoYXJyW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZ2V0RXhuKGFyciwgaSkge1xuICBpZiAoIShpID49IDAgJiYgaSA8IGFyci5sZW5ndGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBcXFwiYmVsdF9BcnJheS5tbFxcXCIsIGxpbmUgMjUsIGNoYXJhY3RlcnMgNi0xMlwiKTtcbiAgfVxuICByZXR1cm4gYXJyW2ldO1xufVxuXG5mdW5jdGlvbiBzZXQoYXJyLCBpLCB2KSB7XG4gIGlmIChpID49IDAgJiYgaSA8IGFyci5sZW5ndGgpIHtcbiAgICBhcnJbaV0gPSB2O1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRFeG4oYXJyLCBpLCB2KSB7XG4gIGlmICghKGkgPj0gMCAmJiBpIDwgYXJyLmxlbmd0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIFxcXCJiZWx0X0FycmF5Lm1sXFxcIiwgbGluZSAzMSwgY2hhcmFjdGVycyA0LTEwXCIpO1xuICB9XG4gIGFycltpXSA9IHY7XG4gIFxufVxuXG5mdW5jdGlvbiBzd2FwVW5zYWZlKHhzLCBpLCBqKSB7XG4gIHZhciB0bXAgPSB4c1tpXTtcbiAgeHNbaV0gPSB4c1tqXTtcbiAgeHNbal0gPSB0bXA7XG4gIFxufVxuXG5mdW5jdGlvbiBzaHVmZmxlSW5QbGFjZSh4cykge1xuICB2YXIgbGVuID0geHMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHN3YXBVbnNhZmUoeHMsIGksIEpzX21hdGgucmFuZG9tX2ludChpLCBsZW4pKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZSh4cykge1xuICB2YXIgcmVzdWx0ID0geHMuc2xpY2UoMCk7XG4gIHNodWZmbGVJblBsYWNlKHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2VJblBsYWNlKHhzKSB7XG4gIHZhciBsZW4gPSB4cy5sZW5ndGg7XG4gIHZhciBvZnMgPSAwO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAvIDIgfCAwOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgc3dhcFVuc2FmZSh4cywgb2ZzICsgaSB8IDAsICgob2ZzICsgbGVuIHwgMCkgLSBpIHwgMCkgLSAxIHwgMCk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHJldmVyc2UoeHMpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHJlc3VsdFtpXSA9IHhzWyhsZW4gLSAxIHwgMCkgLSBpIHwgMF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbWFrZShsLCBmKSB7XG4gIGlmIChsIDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgcmVzW2ldID0gZjtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtYWtlQnlVKGwsIGYpIHtcbiAgaWYgKGwgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgcmVzID0gbmV3IEFycmF5KGwpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICByZXNbaV0gPSBmKGkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeShsLCBmKSB7XG4gIHJldHVybiBtYWtlQnlVKGwsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeUFuZFNodWZmbGVVKGwsIGYpIHtcbiAgdmFyIHUgPSBtYWtlQnlVKGwsIGYpO1xuICBzaHVmZmxlSW5QbGFjZSh1KTtcbiAgcmV0dXJuIHU7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeUFuZFNodWZmbGUobCwgZikge1xuICByZXR1cm4gbWFrZUJ5QW5kU2h1ZmZsZVUobCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGZpbmlzaCkge1xuICB2YXIgY3V0ID0gZmluaXNoIC0gc3RhcnQgfCAwO1xuICBpZiAoY3V0IDwgMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgYXJyID0gbmV3IEFycmF5KGN1dCArIDEgfCAwKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8PSBjdXQ7ICsraSl7XG4gICAgYXJyW2ldID0gc3RhcnQgKyBpIHwgMDtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiByYW5nZUJ5KHN0YXJ0LCBmaW5pc2gsIHN0ZXApIHtcbiAgdmFyIGN1dCA9IGZpbmlzaCAtIHN0YXJ0IHwgMDtcbiAgaWYgKGN1dCA8IDAgfHwgc3RlcCA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBuYiA9IChjdXQgLyBzdGVwIHwgMCkgKyAxIHwgMDtcbiAgdmFyIGFyciA9IG5ldyBBcnJheShuYik7XG4gIHZhciBjdXIgPSBzdGFydDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IG5iOyArK2kpe1xuICAgIGFycltpXSA9IGN1cjtcbiAgICBjdXIgPSBjdXIgKyBzdGVwIHwgMDtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB6aXAoeHMsIHlzKSB7XG4gIHZhciBsZW54ID0geHMubGVuZ3RoO1xuICB2YXIgbGVueSA9IHlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbnggPCBsZW55ID8gbGVueCA6IGxlbnk7XG4gIHZhciBzID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgc1tpXSA9IC8qIHR1cGxlICovW1xuICAgICAgeHNbaV0sXG4gICAgICB5c1tpXVxuICAgIF07XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIHppcEJ5VSh4cywgeXMsIGYpIHtcbiAgdmFyIGxlbnggPSB4cy5sZW5ndGg7XG4gIHZhciBsZW55ID0geXMubGVuZ3RoO1xuICB2YXIgbGVuID0gbGVueCA8IGxlbnkgPyBsZW54IDogbGVueTtcbiAgdmFyIHMgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICBzW2ldID0gZih4c1tpXSwgeXNbaV0pO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiB6aXBCeSh4cywgeXMsIGYpIHtcbiAgcmV0dXJuIHppcEJ5VSh4cywgeXMsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChhMSwgYTIpIHtcbiAgdmFyIGwxID0gYTEubGVuZ3RoO1xuICB2YXIgbDIgPSBhMi5sZW5ndGg7XG4gIHZhciBhMWEyID0gbmV3IEFycmF5KGwxICsgbDIgfCAwKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGwxOyArK2kpe1xuICAgIGExYTJbaV0gPSBhMVtpXTtcbiAgfVxuICBmb3IodmFyIGkkMSA9IDA7IGkkMSA8IGwyOyArK2kkMSl7XG4gICAgYTFhMltsMSArIGkkMSB8IDBdID0gYTJbaSQxXTtcbiAgfVxuICByZXR1cm4gYTFhMjtcbn1cblxuZnVuY3Rpb24gY29uY2F0TWFueShhcnJzKSB7XG4gIHZhciBsZW5BcnJzID0gYXJycy5sZW5ndGg7XG4gIHZhciB0b3RhbExlbiA9IDA7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW5BcnJzOyArK2kpe1xuICAgIHRvdGFsTGVuID0gdG90YWxMZW4gKyBhcnJzW2ldLmxlbmd0aCB8IDA7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheSh0b3RhbExlbik7XG4gIHRvdGFsTGVuID0gMDtcbiAgZm9yKHZhciBqID0gMDsgaiA8IGxlbkFycnM7ICsrail7XG4gICAgdmFyIGN1ciA9IGFycnNbal07XG4gICAgZm9yKHZhciBrID0gMCAsa19maW5pc2ggPSBjdXIubGVuZ3RoOyBrIDwga19maW5pc2g7ICsrayl7XG4gICAgICByZXN1bHRbdG90YWxMZW5dID0gY3VyW2tdO1xuICAgICAgdG90YWxMZW4gPSB0b3RhbExlbiArIDEgfCAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzbGljZShhLCBvZmZzZXQsIGxlbikge1xuICBpZiAobGVuIDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGxlbmEgPSBhLmxlbmd0aDtcbiAgdmFyIG9mcyA9IG9mZnNldCA8IDAgPyBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9tYXgobGVuYSArIG9mZnNldCB8IDAsIDApIDogb2Zmc2V0O1xuICB2YXIgaGFzTGVuID0gbGVuYSAtIG9mcyB8IDA7XG4gIHZhciBjb3B5TGVuZ3RoID0gaGFzTGVuIDwgbGVuID8gaGFzTGVuIDogbGVuO1xuICBpZiAoY29weUxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoY29weUxlbmd0aCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBjb3B5TGVuZ3RoOyArK2kpe1xuICAgIHJlc3VsdFtpXSA9IGFbb2ZzICsgaSB8IDBdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHNsaWNlVG9FbmQoYSwgb2Zmc2V0KSB7XG4gIHZhciBsZW5hID0gYS5sZW5ndGg7XG4gIHZhciBvZnMgPSBvZmZzZXQgPCAwID8gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWF4KGxlbmEgKyBvZmZzZXQgfCAwLCAwKSA6IG9mZnNldDtcbiAgdmFyIGxlbiA9IGxlbmEgLSBvZnMgfCAwO1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgcmVzdWx0W2ldID0gYVtvZnMgKyBpIHwgMF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmlsbChhLCBvZmZzZXQsIGxlbiwgdikge1xuICBpZiAobGVuIDw9IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBsZW5hID0gYS5sZW5ndGg7XG4gIHZhciBvZnMgPSBvZmZzZXQgPCAwID8gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWF4KGxlbmEgKyBvZmZzZXQgfCAwLCAwKSA6IG9mZnNldDtcbiAgdmFyIGhhc0xlbiA9IGxlbmEgLSBvZnMgfCAwO1xuICB2YXIgZmlsbExlbmd0aCA9IGhhc0xlbiA8IGxlbiA/IGhhc0xlbiA6IGxlbjtcbiAgaWYgKGZpbGxMZW5ndGggPD0gMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgZm9yKHZhciBpID0gb2ZzICxpX2ZpbmlzaCA9IG9mcyArIGZpbGxMZW5ndGggfCAwOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgYVtpXSA9IHY7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGJsaXRVbnNhZmUoYTEsIHNyY29mczEsIGEyLCBzcmNvZnMyLCBibGl0TGVuZ3RoKSB7XG4gIGlmIChzcmNvZnMyIDw9IHNyY29mczEpIHtcbiAgICBmb3IodmFyIGogPSAwOyBqIDwgYmxpdExlbmd0aDsgKytqKXtcbiAgICAgIGEyW2ogKyBzcmNvZnMyIHwgMF0gPSBhMVtqICsgc3Jjb2ZzMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaiQxID0gYmxpdExlbmd0aCAtIDEgfCAwOyBqJDEgPj0gMDsgLS1qJDEpe1xuICAgIGEyW2okMSArIHNyY29mczIgfCAwXSA9IGExW2okMSArIHNyY29mczEgfCAwXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbikge1xuICB2YXIgbGVuYTEgPSBhMS5sZW5ndGg7XG4gIHZhciBsZW5hMiA9IGEyLmxlbmd0aDtcbiAgdmFyIHNyY29mczEgPSBvZnMxIDwgMCA/IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21heChsZW5hMSArIG9mczEgfCAwLCAwKSA6IG9mczE7XG4gIHZhciBzcmNvZnMyID0gb2ZzMiA8IDAgPyBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9tYXgobGVuYTIgKyBvZnMyIHwgMCwgMCkgOiBvZnMyO1xuICB2YXIgYmxpdExlbmd0aCA9IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihsZW4sIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihsZW5hMSAtIHNyY29mczEgfCAwLCBsZW5hMiAtIHNyY29mczIgfCAwKSk7XG4gIGlmIChzcmNvZnMyIDw9IHNyY29mczEpIHtcbiAgICBmb3IodmFyIGogPSAwOyBqIDwgYmxpdExlbmd0aDsgKytqKXtcbiAgICAgIGEyW2ogKyBzcmNvZnMyIHwgMF0gPSBhMVtqICsgc3Jjb2ZzMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaiQxID0gYmxpdExlbmd0aCAtIDEgfCAwOyBqJDEgPj0gMDsgLS1qJDEpe1xuICAgIGEyW2okMSArIHNyY29mczIgfCAwXSA9IGExW2okMSArIHNyY29mczEgfCAwXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFUoYSwgZikge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgZihhW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChhLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBmKGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXAoYSwgZikge1xuICByZXR1cm4gbWFwVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBnZXRCeVUoYSwgcCkge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciByO1xuICB3aGlsZShyID09PSB1bmRlZmluZWQgJiYgaSA8IGwpIHtcbiAgICB2YXIgdiA9IGFbaV07XG4gICAgaWYgKHAodikpIHtcbiAgICAgIHIgPSBDYW1sX29wdGlvbi5zb21lKHYpO1xuICAgIH1cbiAgICBpID0gaSArIDEgfCAwO1xuICB9O1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZ2V0QnkoYSwgcCkge1xuICByZXR1cm4gZ2V0QnlVKGEsIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlVKGEsIHApIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgd2hpbGUociA9PT0gdW5kZWZpbmVkICYmIGkgPCBsKSB7XG4gICAgdmFyIHYgPSBhW2ldO1xuICAgIGlmIChwKHYpKSB7XG4gICAgICByID0gaTtcbiAgICB9XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4QnkoYSwgcCkge1xuICByZXR1cm4gZ2V0SW5kZXhCeVUoYSwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24ga2VlcFUoYSwgZikge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICB2YXIgciA9IG5ldyBBcnJheShsKTtcbiAgdmFyIGogPSAwO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICB2YXIgdiA9IGFbaV07XG4gICAgaWYgKGYodikpIHtcbiAgICAgIHJbal0gPSB2O1xuICAgICAgaiA9IGogKyAxIHwgMDtcbiAgICB9XG4gICAgXG4gIH1cbiAgci5sZW5ndGggPSBqO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24ga2VlcChhLCBmKSB7XG4gIHJldHVybiBrZWVwVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4VShhLCBmKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIHZhciByID0gbmV3IEFycmF5KGwpO1xuICB2YXIgaiA9IDA7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHZhciB2ID0gYVtpXTtcbiAgICBpZiAoZih2LCBpKSkge1xuICAgICAgcltqXSA9IHY7XG4gICAgICBqID0gaiArIDEgfCAwO1xuICAgIH1cbiAgICBcbiAgfVxuICByLmxlbmd0aCA9IGo7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4KGEsIGYpIHtcbiAgcmV0dXJuIGtlZXBXaXRoSW5kZXhVKGEsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXBVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIHZhciBqID0gMDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIHYgPSBhW2ldO1xuICAgIHZhciB2JDEgPSBmKHYpO1xuICAgIGlmICh2JDEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcltqXSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24odiQxKTtcbiAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgfVxuICAgIFxuICB9XG4gIHIubGVuZ3RoID0gajtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXAoYSwgZikge1xuICByZXR1cm4ga2VlcE1hcFUoYSwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleFUoYSwgZikge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgZihpLCBhW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleChhLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoV2l0aEluZGV4VShhLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXhVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBmKGksIGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXgoYSwgZikge1xuICByZXR1cm4gbWFwV2l0aEluZGV4VShhLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgciA9IGYociwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShhLCB4LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKGEsIHgsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2VVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSBhLmxlbmd0aCAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IGYociwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UoYSwgeCwgZikge1xuICByZXR1cm4gcmVkdWNlUmV2ZXJzZVUoYSwgeCwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTJVKGEsIGIsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICB2YXIgbGVuID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIGZvcih2YXIgaSA9IGxlbiAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IGYociwgYVtpXSwgYltpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UyKGEsIGIsIHgsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2UyVShhLCBiLCB4LCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VXaXRoSW5kZXhVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgciA9IGYociwgYVtpXSwgaSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVdpdGhJbmRleChhLCB4LCBmKSB7XG4gIHJldHVybiByZWR1Y2VXaXRoSW5kZXhVKGEsIHgsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5VShhcnIsIGIpIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBsZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWIoYXJyW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KGFyciwgZikge1xuICByZXR1cm4gZXZlcnlVKGFyciwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gc29tZVUoYXJyLCBiKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChiKGFycltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUoYXJyLCBmKSB7XG4gIHJldHVybiBzb21lVShhcnIsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5QXV4MihhcnIxLCBhcnIyLCBfaSwgYiwgbGVuKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBsZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWIoYXJyMVtpXSwgYXJyMltpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeTJVKGEsIGIsIHApIHtcbiAgcmV0dXJuIGV2ZXJ5QXV4MihhLCBiLCAwLCBwLCBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oYS5sZW5ndGgsIGIubGVuZ3RoKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5MihhLCBiLCBwKSB7XG4gIHJldHVybiBldmVyeTJVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWUyVShhLCBiLCBwKSB7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBsZW4gPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPT09IGxlbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocChhW2ldLCBiW2ldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc29tZTIoYSwgYiwgcCkge1xuICByZXR1cm4gc29tZTJVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGVxVShhLCBiLCBwKSB7XG4gIHZhciBsZW5hID0gYS5sZW5ndGg7XG4gIHZhciBsZW5iID0gYi5sZW5ndGg7XG4gIGlmIChsZW5hID09PSBsZW5iKSB7XG4gICAgcmV0dXJuIGV2ZXJ5QXV4MihhLCBiLCAwLCBwLCBsZW5hKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoYSwgYiwgcCkge1xuICByZXR1cm4gZXFVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGNtcFUoYSwgYiwgcCkge1xuICB2YXIgbGVuYSA9IGEubGVuZ3RoO1xuICB2YXIgbGVuYiA9IGIubGVuZ3RoO1xuICBpZiAobGVuYSA+IGxlbmIpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChsZW5hIDwgbGVuYikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2kgPSAwO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBpID0gX2k7XG4gICAgICBpZiAoaSA9PT0gbGVuYSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHZhciBjID0gcChhW2ldLCBiW2ldKTtcbiAgICAgIGlmIChjICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgICAgfVxuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbXAoYSwgYiwgcCkge1xuICByZXR1cm4gY21wVShhLCBiLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25VKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgaiA9IDA7XG4gIHZhciBhMSA9IG5ldyBBcnJheShsKTtcbiAgdmFyIGEyID0gbmV3IEFycmF5KGwpO1xuICBmb3IodmFyIGlpID0gMDsgaWkgPCBsOyArK2lpKXtcbiAgICB2YXIgdiA9IGFbaWldO1xuICAgIGlmIChmKHYpKSB7XG4gICAgICBhMVtpXSA9IHY7XG4gICAgICBpID0gaSArIDEgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBhMltqXSA9IHY7XG4gICAgICBqID0gaiArIDEgfCAwO1xuICAgIH1cbiAgfVxuICBhMS5sZW5ndGggPSBpO1xuICBhMi5sZW5ndGggPSBqO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgYTEsXG4gICAgICAgICAgYTJcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGEsIGYpIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUoYSwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gdW56aXAoYSkge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICB2YXIgYTEgPSBuZXcgQXJyYXkobCk7XG4gIHZhciBhMiA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIG1hdGNoID0gYVtpXTtcbiAgICBhMVtpXSA9IG1hdGNoWzBdO1xuICAgIGEyW2ldID0gbWF0Y2hbMV07XG4gIH1cbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIGExLFxuICAgICAgICAgIGEyXG4gICAgICAgIF07XG59XG5cbmV4cG9ydCB7XG4gIGdldCAsXG4gIGdldEV4biAsXG4gIHNldCAsXG4gIHNldEV4biAsXG4gIHNodWZmbGVJblBsYWNlICxcbiAgc2h1ZmZsZSAsXG4gIHJldmVyc2VJblBsYWNlICxcbiAgcmV2ZXJzZSAsXG4gIG1ha2UgLFxuICByYW5nZSAsXG4gIHJhbmdlQnkgLFxuICBtYWtlQnlVICxcbiAgbWFrZUJ5ICxcbiAgbWFrZUJ5QW5kU2h1ZmZsZVUgLFxuICBtYWtlQnlBbmRTaHVmZmxlICxcbiAgemlwICxcbiAgemlwQnlVICxcbiAgemlwQnkgLFxuICB1bnppcCAsXG4gIGNvbmNhdCAsXG4gIGNvbmNhdE1hbnkgLFxuICBzbGljZSAsXG4gIHNsaWNlVG9FbmQgLFxuICBmaWxsICxcbiAgYmxpdCAsXG4gIGJsaXRVbnNhZmUgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICBtYXBVICxcbiAgbWFwICxcbiAgZ2V0QnlVICxcbiAgZ2V0QnkgLFxuICBnZXRJbmRleEJ5VSAsXG4gIGdldEluZGV4QnkgLFxuICBrZWVwVSAsXG4gIGtlZXAgLFxuICBrZWVwV2l0aEluZGV4VSAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBrZWVwTWFwVSAsXG4gIGtlZXBNYXAgLFxuICBmb3JFYWNoV2l0aEluZGV4VSAsXG4gIGZvckVhY2hXaXRoSW5kZXggLFxuICBtYXBXaXRoSW5kZXhVICxcbiAgbWFwV2l0aEluZGV4ICxcbiAgcGFydGl0aW9uVSAsXG4gIHBhcnRpdGlvbiAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICByZWR1Y2VSZXZlcnNlVSAsXG4gIHJlZHVjZVJldmVyc2UgLFxuICByZWR1Y2VSZXZlcnNlMlUgLFxuICByZWR1Y2VSZXZlcnNlMiAsXG4gIHJlZHVjZVdpdGhJbmRleFUgLFxuICByZWR1Y2VXaXRoSW5kZXggLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIGV2ZXJ5MlUgLFxuICBldmVyeTIgLFxuICBzb21lMlUgLFxuICBzb21lMiAsXG4gIGNtcFUgLFxuICBjbXAgLFxuICBlcVUgLFxuICBlcSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9BcnJheSBmcm9tIFwiLi9iZWx0X0FycmF5LmpzXCI7XG5cbmZ1bmN0aW9uIHNvcnRlZExlbmd0aEF1eE1vcmUoeHMsIF9wcmVjLCBfYWNjLCBsZW4sIGx0KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIGlmIChhY2MgPj0gbGVuKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICB2YXIgdiA9IHhzW2FjY107XG4gICAgaWYgKCFsdCh2LCBwcmVjKSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgX2FjYyA9IGFjYyArIDEgfCAwO1xuICAgIF9wcmVjID0gdjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdGx5U29ydGVkTGVuZ3RoVSh4cywgbHQpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEpIHtcbiAgICByZXR1cm4gbGVuO1xuICB9XG4gIHZhciB4MCA9IHhzWzBdO1xuICB2YXIgeDEgPSB4c1sxXTtcbiAgaWYgKGx0KHgwLCB4MSkpIHtcbiAgICB2YXIgX3ByZWMgPSB4MTtcbiAgICB2YXIgX2FjYyA9IDI7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgICAgaWYgKGFjYyA+PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIHZhciB2ID0geHNbYWNjXTtcbiAgICAgIGlmICghbHQocHJlYywgdikpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIF9hY2MgPSBhY2MgKyAxIHwgMDtcbiAgICAgIF9wcmVjID0gdjtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9IGVsc2UgaWYgKGx0KHgxLCB4MCkpIHtcbiAgICByZXR1cm4gLXNvcnRlZExlbmd0aEF1eE1vcmUoeHMsIHgxLCAyLCBsZW4sIGx0KSB8IDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaWN0bHlTb3J0ZWRMZW5ndGgoeHMsIGx0KSB7XG4gIHJldHVybiBzdHJpY3RseVNvcnRlZExlbmd0aFUoeHMsIEN1cnJ5Ll9fMihsdCkpO1xufVxuXG5mdW5jdGlvbiBpc1NvcnRlZFUoYSwgY21wKSB7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBfaSA9IDA7XG4gICAgdmFyIGxhc3RfYm91bmQgPSBsZW4gLSAxIHwgMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgaWYgKGkgPT09IGxhc3RfYm91bmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY21wKGFbaV0sIGFbaSArIDEgfCAwXSkgPiAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTb3J0ZWQoYSwgY21wKSB7XG4gIHJldHVybiBpc1NvcnRlZFUoYSwgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShzcmMsIHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzLCBjbXApIHtcbiAgdmFyIHNyYzFyID0gc3JjMW9mcyArIHNyYzFsZW4gfCAwO1xuICB2YXIgc3JjMnIgPSBzcmMyb2ZzICsgc3JjMmxlbiB8IDA7XG4gIHZhciBfaTEgPSBzcmMxb2ZzO1xuICB2YXIgX3MxID0gc3JjW3NyYzFvZnNdO1xuICB2YXIgX2kyID0gc3JjMm9mcztcbiAgdmFyIF9zMiA9IHNyYzJbc3JjMm9mc107XG4gIHZhciBfZCA9IGRzdG9mcztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBkID0gX2Q7XG4gICAgdmFyIHMyID0gX3MyO1xuICAgIHZhciBpMiA9IF9pMjtcbiAgICB2YXIgczEgPSBfczE7XG4gICAgdmFyIGkxID0gX2kxO1xuICAgIGlmIChjbXAoczEsIHMyKSA8PSAwKSB7XG4gICAgICBkc3RbZF0gPSBzMTtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgIHJldHVybiBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIsIGRzdCwgZCArIDEgfCAwLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICB9XG4gICAgICBfZCA9IGQgKyAxIHwgMDtcbiAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgIF9pMSA9IGkxJDE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGRzdFtkXSA9IHMyO1xuICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICBpZiAoaTIkMSA+PSBzcmMycikge1xuICAgICAgcmV0dXJuIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQgKyAxIHwgMCwgc3JjMXIgLSBpMSB8IDApO1xuICAgIH1cbiAgICBfZCA9IGQgKyAxIHwgMDtcbiAgICBfczIgPSBzcmMyW2kyJDFdO1xuICAgIF9pMiA9IGkyJDE7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1bmlvblUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgY21wKSB7XG4gIHZhciBzcmMxciA9IHNyYzFvZnMgKyBzcmMxbGVuIHwgMDtcbiAgdmFyIHNyYzJyID0gc3JjMm9mcyArIHNyYzJsZW4gfCAwO1xuICB2YXIgX2kxID0gc3JjMW9mcztcbiAgdmFyIF9zMSA9IHNyY1tzcmMxb2ZzXTtcbiAgdmFyIF9pMiA9IHNyYzJvZnM7XG4gIHZhciBfczIgPSBzcmMyW3NyYzJvZnNdO1xuICB2YXIgX2QgPSBkc3RvZnM7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgZCA9IF9kO1xuICAgIHZhciBzMiA9IF9zMjtcbiAgICB2YXIgaTIgPSBfaTI7XG4gICAgdmFyIHMxID0gX3MxO1xuICAgIHZhciBpMSA9IF9pMTtcbiAgICB2YXIgYyA9IGNtcChzMSwgczIpO1xuICAgIGlmIChjIDwgMCkge1xuICAgICAgZHN0W2RdID0gczE7XG4gICAgICB2YXIgaTEkMSA9IGkxICsgMSB8IDA7XG4gICAgICB2YXIgZCQxID0gZCArIDEgfCAwO1xuICAgICAgaWYgKGkxJDEgPCBzcmMxcikge1xuICAgICAgICBfZCA9IGQkMTtcbiAgICAgICAgX3MxID0gc3JjW2kxJDFdO1xuICAgICAgICBfaTEgPSBpMSQxO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIsIGRzdCwgZCQxLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICByZXR1cm4gKGQkMSArIHNyYzJyIHwgMCkgLSBpMiB8IDA7XG4gICAgfVxuICAgIGlmIChjID09PSAwKSB7XG4gICAgICBkc3RbZF0gPSBzMTtcbiAgICAgIHZhciBpMSQyID0gaTEgKyAxIHwgMDtcbiAgICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICAgIHZhciBkJDIgPSBkICsgMSB8IDA7XG4gICAgICBpZiAoIShpMSQyIDwgc3JjMXIgJiYgaTIkMSA8IHNyYzJyKSkge1xuICAgICAgICBpZiAoaTEkMiA9PT0gc3JjMXIpIHtcbiAgICAgICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIkMSwgZHN0LCBkJDIsIHNyYzJyIC0gaTIkMSB8IDApO1xuICAgICAgICAgIHJldHVybiAoZCQyICsgc3JjMnIgfCAwKSAtIGkyJDEgfCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxJDIsIGRzdCwgZCQyLCBzcmMxciAtIGkxJDIgfCAwKTtcbiAgICAgICAgICByZXR1cm4gKGQkMiArIHNyYzFyIHwgMCkgLSBpMSQyIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX2QgPSBkJDI7XG4gICAgICBfczIgPSBzcmMyW2kyJDFdO1xuICAgICAgX2kyID0gaTIkMTtcbiAgICAgIF9zMSA9IHNyY1tpMSQyXTtcbiAgICAgIF9pMSA9IGkxJDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGRzdFtkXSA9IHMyO1xuICAgIHZhciBpMiQyID0gaTIgKyAxIHwgMDtcbiAgICB2YXIgZCQzID0gZCArIDEgfCAwO1xuICAgIGlmIChpMiQyIDwgc3JjMnIpIHtcbiAgICAgIF9kID0gZCQzO1xuICAgICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICAgIF9pMiA9IGkyJDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQkMywgc3JjMXIgLSBpMSB8IDApO1xuICAgIHJldHVybiAoZCQzICsgc3JjMXIgfCAwKSAtIGkxIHwgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdW5pb24oc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgY21wKSB7XG4gIHJldHVybiB1bmlvblUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RVKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICB2YXIgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiB8IDA7XG4gIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gIHZhciBfczEgPSBzcmNbc3JjMW9mc107XG4gIHZhciBfaTIgPSBzcmMyb2ZzO1xuICB2YXIgX3MyID0gc3JjMltzcmMyb2ZzXTtcbiAgdmFyIF9kID0gZHN0b2ZzO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGQgPSBfZDtcbiAgICB2YXIgczIgPSBfczI7XG4gICAgdmFyIGkyID0gX2kyO1xuICAgIHZhciBzMSA9IF9zMTtcbiAgICB2YXIgaTEgPSBfaTE7XG4gICAgdmFyIGMgPSBjbXAoczEsIHMyKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgICAgX3MxID0gc3JjW2kxJDFdO1xuICAgICAgX2kxID0gaTEkMTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIGRzdFtkXSA9IHMxO1xuICAgICAgdmFyIGkxJDIgPSBpMSArIDEgfCAwO1xuICAgICAgdmFyIGkyJDEgPSBpMiArIDEgfCAwO1xuICAgICAgdmFyIGQkMSA9IGQgKyAxIHwgMDtcbiAgICAgIGlmICghKGkxJDIgPCBzcmMxciAmJiBpMiQxIDwgc3JjMnIpKSB7XG4gICAgICAgIHJldHVybiBkJDE7XG4gICAgICB9XG4gICAgICBfZCA9IGQkMTtcbiAgICAgIF9zMiA9IHNyYzJbaTIkMV07XG4gICAgICBfaTIgPSBpMiQxO1xuICAgICAgX3MxID0gc3JjW2kxJDJdO1xuICAgICAgX2kxID0gaTEkMjtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgdmFyIGkyJDIgPSBpMiArIDEgfCAwO1xuICAgIGlmIChpMiQyID49IHNyYzJyKSB7XG4gICAgICByZXR1cm4gZDtcbiAgICB9XG4gICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICBfaTIgPSBpMiQyO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gaW50ZXJzZWN0VShzcmMsIHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGRpZmZVKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICB2YXIgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiB8IDA7XG4gIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gIHZhciBfczEgPSBzcmNbc3JjMW9mc107XG4gIHZhciBfaTIgPSBzcmMyb2ZzO1xuICB2YXIgX3MyID0gc3JjMltzcmMyb2ZzXTtcbiAgdmFyIF9kID0gZHN0b2ZzO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGQgPSBfZDtcbiAgICB2YXIgczIgPSBfczI7XG4gICAgdmFyIGkyID0gX2kyO1xuICAgIHZhciBzMSA9IF9zMTtcbiAgICB2YXIgaTEgPSBfaTE7XG4gICAgdmFyIGMgPSBjbXAoczEsIHMyKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIGRzdFtkXSA9IHMxO1xuICAgICAgdmFyIGQkMSA9IGQgKyAxIHwgMDtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgIHJldHVybiBkJDE7XG4gICAgICB9XG4gICAgICBfZCA9IGQkMTtcbiAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgIF9pMSA9IGkxJDE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGlmIChjID09PSAwKSB7XG4gICAgICB2YXIgaTEkMiA9IGkxICsgMSB8IDA7XG4gICAgICB2YXIgaTIkMSA9IGkyICsgMSB8IDA7XG4gICAgICBpZiAoIShpMSQyIDwgc3JjMXIgJiYgaTIkMSA8IHNyYzJyKSkge1xuICAgICAgICBpZiAoaTEkMiA9PT0gc3JjMXIpIHtcbiAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjLCBpMSQyLCBkc3QsIGQsIHNyYzFyIC0gaTEkMiB8IDApO1xuICAgICAgICAgIHJldHVybiAoZCArIHNyYzFyIHwgMCkgLSBpMSQyIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3MyID0gc3JjMltpMiQxXTtcbiAgICAgIF9pMiA9IGkyJDE7XG4gICAgICBfczEgPSBzcmNbaTEkMl07XG4gICAgICBfaTEgPSBpMSQyO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICB2YXIgaTIkMiA9IGkyICsgMSB8IDA7XG4gICAgaWYgKGkyJDIgPCBzcmMycikge1xuICAgICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICAgIF9pMiA9IGkyJDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQsIHNyYzFyIC0gaTEgfCAwKTtcbiAgICByZXR1cm4gKGQgKyBzcmMxciB8IDApIC0gaTEgfCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaWZmKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gZGlmZlUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRpb25Tb3J0KHNyYywgc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuLCBjbXApIHtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2YXIgZSA9IHNyY1tzcmNvZnMgKyBpIHwgMF07XG4gICAgdmFyIGogPSAoZHN0b2ZzICsgaSB8IDApIC0gMSB8IDA7XG4gICAgd2hpbGUoaiA+PSBkc3RvZnMgJiYgY21wKGRzdFtqXSwgZSkgPiAwKSB7XG4gICAgICBkc3RbaiArIDEgfCAwXSA9IGRzdFtqXTtcbiAgICAgIGogPSBqIC0gMSB8IDA7XG4gICAgfTtcbiAgICBkc3RbaiArIDEgfCAwXSA9IGU7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHNvcnRUbyhzcmMsIHNyY29mcywgZHN0LCBkc3RvZnMsIGxlbiwgY21wKSB7XG4gIGlmIChsZW4gPD0gNSkge1xuICAgIHJldHVybiBpbnNlcnRpb25Tb3J0KHNyYywgc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuLCBjbXApO1xuICB9XG4gIHZhciBsMSA9IGxlbiAvIDIgfCAwO1xuICB2YXIgbDIgPSBsZW4gLSBsMSB8IDA7XG4gIHNvcnRUbyhzcmMsIHNyY29mcyArIGwxIHwgMCwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBjbXApO1xuICBzb3J0VG8oc3JjLCBzcmNvZnMsIHNyYywgc3Jjb2ZzICsgbDIgfCAwLCBsMSwgY21wKTtcbiAgcmV0dXJuIG1lcmdlKHNyYywgc3Jjb2ZzICsgbDIgfCAwLCBsMSwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBkc3QsIGRzdG9mcywgY21wKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEluUGxhY2VCeVUoYSwgY21wKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsIDw9IDUpIHtcbiAgICByZXR1cm4gaW5zZXJ0aW9uU29ydChhLCAwLCBhLCAwLCBsLCBjbXApO1xuICB9XG4gIHZhciBsMSA9IGwgLyAyIHwgMDtcbiAgdmFyIGwyID0gbCAtIGwxIHwgMDtcbiAgdmFyIHQgPSBuZXcgQXJyYXkobDIpO1xuICBzb3J0VG8oYSwgbDEsIHQsIDAsIGwyLCBjbXApO1xuICBzb3J0VG8oYSwgMCwgYSwgbDIsIGwxLCBjbXApO1xuICByZXR1cm4gbWVyZ2UoYSwgbDIsIGwxLCB0LCAwLCBsMiwgYSwgMCwgY21wKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEluUGxhY2VCeShhLCBjbXApIHtcbiAgcmV0dXJuIHN0YWJsZVNvcnRJblBsYWNlQnlVKGEsIEN1cnJ5Ll9fMihjbXApKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEJ5VShhLCBjbXApIHtcbiAgdmFyIGIgPSBhLnNsaWNlKDApO1xuICBzdGFibGVTb3J0SW5QbGFjZUJ5VShiLCBjbXApO1xuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEJ5KGEsIGNtcCkge1xuICByZXR1cm4gc3RhYmxlU29ydEJ5VShhLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaEJ5VShzb3J0ZWQsIGtleSwgY21wKSB7XG4gIHZhciBsZW4gPSBzb3J0ZWQubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBsbyA9IHNvcnRlZFswXTtcbiAgdmFyIGMgPSBjbXAoa2V5LCBsbyk7XG4gIGlmIChjIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaGkgPSBzb3J0ZWRbbGVuIC0gMSB8IDBdO1xuICB2YXIgYzIgPSBjbXAoa2V5LCBoaSk7XG4gIGlmIChjMiA+IDApIHtcbiAgICByZXR1cm4gLShsZW4gKyAxIHwgMCkgfCAwO1xuICB9IGVsc2Uge1xuICAgIHZhciBfbG8gPSAwO1xuICAgIHZhciBfaGkgPSBsZW4gLSAxIHwgMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaGkkMSA9IF9oaTtcbiAgICAgIHZhciBsbyQxID0gX2xvO1xuICAgICAgdmFyIG1pZCA9IChsbyQxICsgaGkkMSB8IDApIC8gMiB8IDA7XG4gICAgICB2YXIgbWlkVmFsID0gc29ydGVkW21pZF07XG4gICAgICB2YXIgYyQxID0gY21wKGtleSwgbWlkVmFsKTtcbiAgICAgIGlmIChjJDEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG1pZDtcbiAgICAgIH1cbiAgICAgIGlmIChjJDEgPCAwKSB7XG4gICAgICAgIGlmIChoaSQxID09PSBtaWQpIHtcbiAgICAgICAgICBpZiAoY21wKHNvcnRlZFtsbyQxXSwga2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvJDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtKGhpJDEgKyAxIHwgMCkgfCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfaGkgPSBtaWQ7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIGlmIChsbyQxID09PSBtaWQpIHtcbiAgICAgICAgaWYgKGNtcChzb3J0ZWRbaGkkMV0sIGtleSkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gaGkkMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLShoaSQxICsgMSB8IDApIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX2xvID0gbWlkO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoQnkoc29ydGVkLCBrZXksIGNtcCkge1xuICByZXR1cm4gYmluYXJ5U2VhcmNoQnlVKHNvcnRlZCwga2V5LCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbnZhciBJbnQ7XG5cbnZhciAkJFN0cmluZztcblxuZXhwb3J0IHtcbiAgSW50ICxcbiAgJCRTdHJpbmcgLFxuICBzdHJpY3RseVNvcnRlZExlbmd0aFUgLFxuICBzdHJpY3RseVNvcnRlZExlbmd0aCAsXG4gIGlzU29ydGVkVSAsXG4gIGlzU29ydGVkICxcbiAgc3RhYmxlU29ydEluUGxhY2VCeVUgLFxuICBzdGFibGVTb3J0SW5QbGFjZUJ5ICxcbiAgc3RhYmxlU29ydEJ5VSAsXG4gIHN0YWJsZVNvcnRCeSAsXG4gIGJpbmFyeVNlYXJjaEJ5VSAsXG4gIGJpbmFyeVNlYXJjaEJ5ICxcbiAgdW5pb25VICxcbiAgdW5pb24gLFxuICBpbnRlcnNlY3RVICxcbiAgaW50ZXJzZWN0ICxcbiAgZGlmZlUgLFxuICBkaWZmICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9Tb3J0QXJyYXkgZnJvbSBcIi4vYmVsdF9Tb3J0QXJyYXkuanNcIjtcblxuZnVuY3Rpb24gdHJlZUhlaWdodChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbi5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBuLmtleSxcbiAgICAgICAgICAgIHZhbHVlOiBuLnZhbHVlLFxuICAgICAgICAgICAgaGVpZ2h0OiBuLmhlaWdodCxcbiAgICAgICAgICAgIGxlZnQ6IGNvcHkobi5sZWZ0KSxcbiAgICAgICAgICAgIHJpZ2h0OiBjb3B5KG4ucmlnaHQpXG4gICAgICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGUobCwgeCwgZCwgcikge1xuICB2YXIgaGwgPSB0cmVlSGVpZ2h0KGwpO1xuICB2YXIgaHIgPSB0cmVlSGVpZ2h0KHIpO1xuICByZXR1cm4ge1xuICAgICAgICAgIGtleTogeCxcbiAgICAgICAgICB2YWx1ZTogZCxcbiAgICAgICAgICBoZWlnaHQ6IGhsID49IGhyID8gaGwgKyAxIHwgMCA6IGhyICsgMSB8IDAsXG4gICAgICAgICAgbGVmdDogbCxcbiAgICAgICAgICByaWdodDogclxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBzaW5nbGV0b24oeCwgZCkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGtleTogeCxcbiAgICAgICAgICB2YWx1ZTogZCxcbiAgICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgICAgbGVmdDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJpZ2h0OiB1bmRlZmluZWRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0R2UobCwgcikge1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGwuaGVpZ2h0ID49IHIuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlKG4sIG5ld1ZhbHVlKSB7XG4gIGlmIChuLnZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgIHJldHVybiBuO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IG4ua2V5LFxuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgaGVpZ2h0OiBuLmhlaWdodCxcbiAgICAgICAgICAgIGxlZnQ6IG4ubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiBuLnJpZ2h0XG4gICAgICAgICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYWwobCwgeCwgZCwgcikge1xuICB2YXIgaGwgPSBsICE9PSB1bmRlZmluZWQgPyBsLmhlaWdodCA6IDA7XG4gIHZhciBociA9IHIgIT09IHVuZGVmaW5lZCA/IHIuaGVpZ2h0IDogMDtcbiAgaWYgKGhsID4gKGhyICsgMiB8IDApKSB7XG4gICAgdmFyIGx2ID0gbC5rZXk7XG4gICAgdmFyIGxkID0gbC52YWx1ZTtcbiAgICB2YXIgbGwgPSBsLmxlZnQ7XG4gICAgdmFyIGxyID0gbC5yaWdodDtcbiAgICBpZiAodHJlZUhlaWdodChsbCkgPj0gdHJlZUhlaWdodChscikpIHtcbiAgICAgIHJldHVybiBjcmVhdGUobGwsIGx2LCBsZCwgY3JlYXRlKGxyLCB4LCBkLCByKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjcmVhdGUoY3JlYXRlKGxsLCBsdiwgbGQsIGxyLmxlZnQpLCBsci5rZXksIGxyLnZhbHVlLCBjcmVhdGUobHIucmlnaHQsIHgsIGQsIHIpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGhyIDw9IChobCArIDIgfCAwKSkge1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHgsXG4gICAgICAgICAgICB2YWx1ZTogZCxcbiAgICAgICAgICAgIGhlaWdodDogaGwgPj0gaHIgPyBobCArIDEgfCAwIDogaHIgKyAxIHwgMCxcbiAgICAgICAgICAgIGxlZnQ6IGwsXG4gICAgICAgICAgICByaWdodDogclxuICAgICAgICAgIH07XG4gIH1cbiAgdmFyIHJ2ID0gci5rZXk7XG4gIHZhciByZCA9IHIudmFsdWU7XG4gIHZhciBybCA9IHIubGVmdDtcbiAgdmFyIHJyID0gci5yaWdodDtcbiAgaWYgKHRyZWVIZWlnaHQocnIpID49IHRyZWVIZWlnaHQocmwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZShjcmVhdGUobCwgeCwgZCwgcmwpLCBydiwgcmQsIHJyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlKGNyZWF0ZShsLCB4LCBkLCBybC5sZWZ0KSwgcmwua2V5LCBybC52YWx1ZSwgY3JlYXRlKHJsLnJpZ2h0LCBydiwgcmQsIHJyKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWluS2V5MEF1eChfbikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgbiQxID0gbi5sZWZ0O1xuICAgIGlmIChuJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG4ua2V5O1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1pbktleShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShtaW5LZXkwQXV4KG4pKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWluS2V5VW5kZWZpbmVkKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtaW5LZXkwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtYXhLZXkwQXV4KF9uKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIHZhciBuJDEgPSBuLnJpZ2h0O1xuICAgIGlmIChuJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG4ua2V5O1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1heEtleShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShtYXhLZXkwQXV4KG4pKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWF4S2V5VW5kZWZpbmVkKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXhLZXkwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtaW5LVjBBdXgoX24pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIG4kMSA9IG4ubGVmdDtcbiAgICBpZiAobiQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgbi5rZXksXG4gICAgICAgICAgICAgIG4udmFsdWVcbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIF9uID0gbiQxO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWluaW11bShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWluS1YwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtaW5VbmRlZmluZWQobikge1xuICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG1pbktWMEF1eChuKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWF4S1YwQXV4KF9uKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIHZhciBuJDEgPSBuLnJpZ2h0O1xuICAgIGlmIChuJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBuLmtleSxcbiAgICAgICAgICAgICAgbi52YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gICAgX24gPSBuJDE7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtYXhpbXVtKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXhLVjBBdXgobik7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1heFVuZGVmaW5lZChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWF4S1YwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiByZW1vdmVNaW5BdXhXaXRoUmVmKG4sIGtyLCB2cikge1xuICB2YXIgbG4gPSBuLmxlZnQ7XG4gIHZhciBybiA9IG4ucmlnaHQ7XG4gIHZhciBrbiA9IG4ua2V5O1xuICB2YXIgdm4gPSBuLnZhbHVlO1xuICBpZiAobG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwocmVtb3ZlTWluQXV4V2l0aFJlZihsbiwga3IsIHZyKSwga24sIHZuLCBybik7XG4gIH0gZWxzZSB7XG4gICAga3IuY29udGVudHMgPSBrbjtcbiAgICB2ci5jb250ZW50cyA9IHZuO1xuICAgIHJldHVybiBybjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KHgpIHtcbiAgcmV0dXJuIHggPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc3RhY2tBbGxMZWZ0KF92LCBfcykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHMgPSBfcztcbiAgICB2YXIgdiA9IF92O1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBfcyA9IC8qIDo6ICovW1xuICAgICAgdixcbiAgICAgIHNcbiAgICBdO1xuICAgIF92ID0gdi5sZWZ0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnlVKG4sIHApIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIGxlZnQgPSBmaW5kRmlyc3RCeVUobi5sZWZ0LCBwKTtcbiAgaWYgKGxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBsZWZ0O1xuICB9XG4gIHZhciB2ID0gbi5rZXk7XG4gIHZhciBkID0gbi52YWx1ZTtcbiAgdmFyIHB2ZCA9IHAodiwgZCk7XG4gIGlmIChwdmQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB2LFxuICAgICAgICAgICAgZFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIHJpZ2h0ID0gZmluZEZpcnN0QnlVKG4ucmlnaHQsIHApO1xuICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByaWdodDtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnkobiwgcCkge1xuICByZXR1cm4gZmluZEZpcnN0QnlVKG4sIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKF9uLCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGZvckVhY2hVKG4ubGVmdCwgZik7XG4gICAgZihuLmtleSwgbi52YWx1ZSk7XG4gICAgX24gPSBuLnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChuLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoVShuLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKG4sIGYpIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIG5ld0xlZnQgPSBtYXBVKG4ubGVmdCwgZik7XG4gIHZhciBuZXdEID0gZihuLnZhbHVlKTtcbiAgdmFyIG5ld1JpZ2h0ID0gbWFwVShuLnJpZ2h0LCBmKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBrZXk6IG4ua2V5LFxuICAgICAgICAgIHZhbHVlOiBuZXdELFxuICAgICAgICAgIGhlaWdodDogbi5oZWlnaHQsXG4gICAgICAgICAgbGVmdDogbmV3TGVmdCxcbiAgICAgICAgICByaWdodDogbmV3UmlnaHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gbWFwKG4sIGYpIHtcbiAgcmV0dXJuIG1hcFUobiwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aEtleVUobiwgZikge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIga2V5ID0gbi5rZXk7XG4gIHZhciBuZXdMZWZ0ID0gbWFwV2l0aEtleVUobi5sZWZ0LCBmKTtcbiAgdmFyIG5ld0QgPSBmKGtleSwgbi52YWx1ZSk7XG4gIHZhciBuZXdSaWdodCA9IG1hcFdpdGhLZXlVKG4ucmlnaHQsIGYpO1xuICByZXR1cm4ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiBuZXdELFxuICAgICAgICAgIGhlaWdodDogbi5oZWlnaHQsXG4gICAgICAgICAgbGVmdDogbmV3TGVmdCxcbiAgICAgICAgICByaWdodDogbmV3UmlnaHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aEtleShuLCBmKSB7XG4gIHJldHVybiBtYXBXaXRoS2V5VShuLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKF9tLCBfYWNjdSwgZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICB2YXIgbSA9IF9tO1xuICAgIGlmIChtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgICB2YXIgdiA9IG0ua2V5O1xuICAgIHZhciBkID0gbS52YWx1ZTtcbiAgICB2YXIgbCA9IG0ubGVmdDtcbiAgICB2YXIgciA9IG0ucmlnaHQ7XG4gICAgX2FjY3UgPSBmKHJlZHVjZVUobCwgYWNjdSwgZiksIHYsIGQpO1xuICAgIF9tID0gcjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShtLCBhY2N1LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKG0sIGFjY3UsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5VShfbiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwKG4ua2V5LCBuLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWV2ZXJ5VShuLmxlZnQsIHApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF9uID0gbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KG4sIHApIHtcbiAgcmV0dXJuIGV2ZXJ5VShuLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBzb21lVShfbiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwKG4ua2V5LCBuLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzb21lVShuLmxlZnQsIHApKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX24gPSBuLnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc29tZShuLCBwKSB7XG4gIHJldHVybiBzb21lVShuLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBhZGRNaW5FbGVtZW50KG4sIGssIHYpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwoYWRkTWluRWxlbWVudChuLmxlZnQsIGssIHYpLCBuLmtleSwgbi52YWx1ZSwgbi5yaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbihrLCB2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRNYXhFbGVtZW50KG4sIGssIHYpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwobi5sZWZ0LCBuLmtleSwgbi52YWx1ZSwgYWRkTWF4RWxlbWVudChuLnJpZ2h0LCBrLCB2KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbihrLCB2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqb2luKGxuLCB2LCBkLCBybikge1xuICBpZiAobG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhZGRNaW5FbGVtZW50KHJuLCB2LCBkKTtcbiAgfVxuICBpZiAocm4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhZGRNYXhFbGVtZW50KGxuLCB2LCBkKTtcbiAgfVxuICB2YXIgbHYgPSBsbi5rZXk7XG4gIHZhciBsZCA9IGxuLnZhbHVlO1xuICB2YXIgbGggPSBsbi5oZWlnaHQ7XG4gIHZhciBsbCA9IGxuLmxlZnQ7XG4gIHZhciBsciA9IGxuLnJpZ2h0O1xuICB2YXIgcnYgPSBybi5rZXk7XG4gIHZhciByZCA9IHJuLnZhbHVlO1xuICB2YXIgcmggPSBybi5oZWlnaHQ7XG4gIHZhciBybCA9IHJuLmxlZnQ7XG4gIHZhciByciA9IHJuLnJpZ2h0O1xuICBpZiAobGggPiAocmggKyAyIHwgMCkpIHtcbiAgICByZXR1cm4gYmFsKGxsLCBsdiwgbGQsIGpvaW4obHIsIHYsIGQsIHJuKSk7XG4gIH0gZWxzZSBpZiAocmggPiAobGggKyAyIHwgMCkpIHtcbiAgICByZXR1cm4gYmFsKGpvaW4obG4sIHYsIGQsIHJsKSwgcnYsIHJkLCBycik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZShsbiwgdiwgZCwgcm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmNhdCh0MSwgdDIpIHtcbiAgaWYgKHQxID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdDI7XG4gIH1cbiAgaWYgKHQyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdDE7XG4gIH1cbiAgdmFyIGtyID0ge1xuICAgIGNvbnRlbnRzOiB0Mi5rZXlcbiAgfTtcbiAgdmFyIHZyID0ge1xuICAgIGNvbnRlbnRzOiB0Mi52YWx1ZVxuICB9O1xuICB2YXIgdDJyID0gcmVtb3ZlTWluQXV4V2l0aFJlZih0Miwga3IsIHZyKTtcbiAgcmV0dXJuIGpvaW4odDEsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgdDJyKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0T3JKb2luKHQxLCB2LCBkLCB0Mikge1xuICBpZiAoZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGpvaW4odDEsIHYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZCksIHQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uY2F0KHQxLCB0Mik7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2VlcFNoYXJlZFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgdiA9IG4ua2V5O1xuICB2YXIgZCA9IG4udmFsdWU7XG4gIHZhciBuZXdMZWZ0ID0ga2VlcFNoYXJlZFUobi5sZWZ0LCBwKTtcbiAgdmFyIHB2ZCA9IHAodiwgZCk7XG4gIHZhciBuZXdSaWdodCA9IGtlZXBTaGFyZWRVKG4ucmlnaHQsIHApO1xuICBpZiAocHZkKSB7XG4gICAgcmV0dXJuIGpvaW4obmV3TGVmdCwgdiwgZCwgbmV3UmlnaHQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb25jYXQobmV3TGVmdCwgbmV3UmlnaHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGtlZXBTaGFyZWQobiwgcCkge1xuICByZXR1cm4ga2VlcFNoYXJlZFUobiwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24ga2VlcE1hcFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgdiA9IG4ua2V5O1xuICB2YXIgZCA9IG4udmFsdWU7XG4gIHZhciBuZXdMZWZ0ID0ga2VlcE1hcFUobi5sZWZ0LCBwKTtcbiAgdmFyIHB2ZCA9IHAodiwgZCk7XG4gIHZhciBuZXdSaWdodCA9IGtlZXBNYXBVKG4ucmlnaHQsIHApO1xuICBpZiAocHZkICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gam9pbihuZXdMZWZ0LCB2LCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHB2ZCksIG5ld1JpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uY2F0KG5ld0xlZnQsIG5ld1JpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZWVwTWFwKG4sIHApIHtcbiAgcmV0dXJuIGtlZXBNYXBVKG4sIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvblNoYXJlZFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIga2V5ID0gbi5rZXk7XG4gIHZhciB2YWx1ZSA9IG4udmFsdWU7XG4gIHZhciBtYXRjaCA9IHBhcnRpdGlvblNoYXJlZFUobi5sZWZ0LCBwKTtcbiAgdmFyIGxmID0gbWF0Y2hbMV07XG4gIHZhciBsdCA9IG1hdGNoWzBdO1xuICB2YXIgcHZkID0gcChrZXksIHZhbHVlKTtcbiAgdmFyIG1hdGNoJDEgPSBwYXJ0aXRpb25TaGFyZWRVKG4ucmlnaHQsIHApO1xuICB2YXIgcmYgPSBtYXRjaCQxWzFdO1xuICB2YXIgcnQgPSBtYXRjaCQxWzBdO1xuICBpZiAocHZkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgam9pbihsdCwga2V5LCB2YWx1ZSwgcnQpLFxuICAgICAgICAgICAgY29uY2F0KGxmLCByZilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGNvbmNhdChsdCwgcnQpLFxuICAgICAgICAgICAgam9pbihsZiwga2V5LCB2YWx1ZSwgcmYpXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25TaGFyZWQobiwgcCkge1xuICByZXR1cm4gcGFydGl0aW9uU2hhcmVkVShuLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhOb2RlKG4pIHtcbiAgdmFyIGwgPSBuLmxlZnQ7XG4gIHZhciByID0gbi5yaWdodDtcbiAgdmFyIHNpemVMID0gbCAhPT0gdW5kZWZpbmVkID8gbGVuZ3RoTm9kZShsKSA6IDA7XG4gIHZhciBzaXplUiA9IHIgIT09IHVuZGVmaW5lZCA/IGxlbmd0aE5vZGUocikgOiAwO1xuICByZXR1cm4gKDEgKyBzaXplTCB8IDApICsgc2l6ZVIgfCAwO1xufVxuXG5mdW5jdGlvbiBzaXplKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBsZW5ndGhOb2RlKG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvTGlzdEF1eChfbiwgX2FjY3UpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgdmFyIGsgPSBuLmtleTtcbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHIgPSBuLnJpZ2h0O1xuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgayxcbiAgICAgICAgdlxuICAgICAgXSxcbiAgICAgIHRvTGlzdEF1eChyLCBhY2N1KVxuICAgIF07XG4gICAgX24gPSBsO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9MaXN0KHMpIHtcbiAgcmV0dXJuIHRvTGlzdEF1eChzLCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBjaGVja0ludmFyaWFudEludGVybmFsKF92KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgdiA9IF92O1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBsID0gdi5sZWZ0O1xuICAgIHZhciByID0gdi5yaWdodDtcbiAgICB2YXIgZGlmZiA9IHRyZWVIZWlnaHQobCkgLSB0cmVlSGVpZ2h0KHIpIHwgMDtcbiAgICBpZiAoIShkaWZmIDw9IDIgJiYgZGlmZiA+PSAtMikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUgXFxcImJlbHRfaW50ZXJuYWxBVkx0cmVlLm1sXFxcIiwgbGluZSAzODEsIGNoYXJhY3RlcnMgNi0xMlwiKTtcbiAgICB9XG4gICAgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChsKTtcbiAgICBfdiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXlLZXkoX24sIF9pLCBhcnIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgdiA9IG4ua2V5O1xuICAgIHZhciBsID0gbi5sZWZ0O1xuICAgIHZhciByID0gbi5yaWdodDtcbiAgICB2YXIgbmV4dCA9IGwgIT09IHVuZGVmaW5lZCA/IGZpbGxBcnJheUtleShsLCBpLCBhcnIpIDogaTtcbiAgICBhcnJbbmV4dF0gPSB2O1xuICAgIHZhciBybmV4dCA9IG5leHQgKyAxIHwgMDtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcm5leHQ7XG4gICAgfVxuICAgIF9pID0gcm5leHQ7XG4gICAgX24gPSByO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbEFycmF5VmFsdWUoX24sIF9pLCBhcnIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgbCA9IG4ubGVmdDtcbiAgICB2YXIgciA9IG4ucmlnaHQ7XG4gICAgdmFyIG5leHQgPSBsICE9PSB1bmRlZmluZWQgPyBmaWxsQXJyYXlWYWx1ZShsLCBpLCBhcnIpIDogaTtcbiAgICBhcnJbbmV4dF0gPSBuLnZhbHVlO1xuICAgIHZhciBybmV4dCA9IG5leHQgKyAxIHwgMDtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcm5leHQ7XG4gICAgfVxuICAgIF9pID0gcm5leHQ7XG4gICAgX24gPSByO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbEFycmF5KF9uLCBfaSwgYXJyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHYgPSBuLmtleTtcbiAgICB2YXIgciA9IG4ucmlnaHQ7XG4gICAgdmFyIG5leHQgPSBsICE9PSB1bmRlZmluZWQgPyBmaWxsQXJyYXkobCwgaSwgYXJyKSA6IGk7XG4gICAgYXJyW25leHRdID0gLyogdHVwbGUgKi9bXG4gICAgICB2LFxuICAgICAgbi52YWx1ZVxuICAgIF07XG4gICAgdmFyIHJuZXh0ID0gbmV4dCArIDEgfCAwO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBybmV4dDtcbiAgICB9XG4gICAgX2kgPSBybmV4dDtcbiAgICBfbiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG4pIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgc2l6ZSA9IGxlbmd0aE5vZGUobik7XG4gIHZhciB2ID0gbmV3IEFycmF5KHNpemUpO1xuICBmaWxsQXJyYXkobiwgMCwgdik7XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBrZXlzVG9BcnJheShuKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgZmlsbEFycmF5S2V5KG4sIDAsIHYpO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gdmFsdWVzVG9BcnJheShuKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgZmlsbEFycmF5VmFsdWUobiwgMCwgdik7XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlSZXZBdXgoYXJyLCBvZmYsIGxlbikge1xuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMCA6XG4gICAgICAgIHJldHVybiA7XG4gICAgY2FzZSAxIDpcbiAgICAgICAgdmFyIG1hdGNoID0gYXJyW29mZl07XG4gICAgICAgIHJldHVybiBzaW5nbGV0b24obWF0Y2hbMF0sIG1hdGNoWzFdKTtcbiAgICBjYXNlIDIgOlxuICAgICAgICB2YXIgbWF0Y2hfMDAwID0gYXJyW29mZl07XG4gICAgICAgIHZhciBtYXRjaF8wMDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoXzAwMTtcbiAgICAgICAgdmFyIG1hdGNoJDIgPSBtYXRjaF8wMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQxWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQxWzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkMlswXSwgbWF0Y2gkMlsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciBtYXRjaF8wMDAkMSA9IGFycltvZmZdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAxJDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAyID0gYXJyW29mZiAtIDIgfCAwXTtcbiAgICAgICAgdmFyIG1hdGNoJDMgPSBtYXRjaF8wMDI7XG4gICAgICAgIHZhciBtYXRjaCQ0ID0gbWF0Y2hfMDAxJDE7XG4gICAgICAgIHZhciBtYXRjaCQ1ID0gbWF0Y2hfMDAwJDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQ0WzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQ0WzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkNVswXSwgbWF0Y2gkNVsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHNpbmdsZXRvbihtYXRjaCQzWzBdLCBtYXRjaCQzWzFdKVxuICAgICAgICAgICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgbmwgPSBsZW4gLyAyIHwgMDtcbiAgICAgIHZhciBsZWZ0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgb2ZmLCBubCk7XG4gICAgICB2YXIgbWF0Y2gkNiA9IGFycltvZmYgLSBubCB8IDBdO1xuICAgICAgdmFyIHJpZ2h0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgKG9mZiAtIG5sIHwgMCkgLSAxIHwgMCwgKGxlbiAtIG5sIHwgMCkgLSAxIHwgMCk7XG4gICAgICByZXR1cm4gY3JlYXRlKGxlZnQsIG1hdGNoJDZbMF0sIG1hdGNoJDZbMV0sIHJpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCBvZmYsIGxlbikge1xuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMCA6XG4gICAgICAgIHJldHVybiA7XG4gICAgY2FzZSAxIDpcbiAgICAgICAgdmFyIG1hdGNoID0gYXJyW29mZl07XG4gICAgICAgIHJldHVybiBzaW5nbGV0b24obWF0Y2hbMF0sIG1hdGNoWzFdKTtcbiAgICBjYXNlIDIgOlxuICAgICAgICB2YXIgbWF0Y2hfMDAwID0gYXJyW29mZl07XG4gICAgICAgIHZhciBtYXRjaF8wMDEgPSBhcnJbb2ZmICsgMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoXzAwMTtcbiAgICAgICAgdmFyIG1hdGNoJDIgPSBtYXRjaF8wMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQxWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQxWzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkMlswXSwgbWF0Y2gkMlsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciBtYXRjaF8wMDAkMSA9IGFycltvZmZdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAxJDEgPSBhcnJbb2ZmICsgMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAyID0gYXJyW29mZiArIDIgfCAwXTtcbiAgICAgICAgdmFyIG1hdGNoJDMgPSBtYXRjaF8wMDI7XG4gICAgICAgIHZhciBtYXRjaCQ0ID0gbWF0Y2hfMDAxJDE7XG4gICAgICAgIHZhciBtYXRjaCQ1ID0gbWF0Y2hfMDAwJDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQ0WzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQ0WzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkNVswXSwgbWF0Y2gkNVsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHNpbmdsZXRvbihtYXRjaCQzWzBdLCBtYXRjaCQzWzFdKVxuICAgICAgICAgICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgbmwgPSBsZW4gLyAyIHwgMDtcbiAgICAgIHZhciBsZWZ0ID0gZnJvbVNvcnRlZEFycmF5QXV4KGFyciwgb2ZmLCBubCk7XG4gICAgICB2YXIgbWF0Y2gkNiA9IGFycltvZmYgKyBubCB8IDBdO1xuICAgICAgdmFyIHJpZ2h0ID0gZnJvbVNvcnRlZEFycmF5QXV4KGFyciwgKG9mZiArIG5sIHwgMCkgKyAxIHwgMCwgKGxlbiAtIG5sIHwgMCkgLSAxIHwgMCk7XG4gICAgICByZXR1cm4gY3JlYXRlKGxlZnQsIG1hdGNoJDZbMF0sIG1hdGNoJDZbMV0sIHJpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlVbnNhZmUoYXJyKSB7XG4gIHJldHVybiBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCAwLCBhcnIubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY21wVShzMSwgczIsIGtjbXAsIHZjbXApIHtcbiAgdmFyIGxlbjEgPSBzaXplKHMxKTtcbiAgdmFyIGxlbjIgPSBzaXplKHMyKTtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICB2YXIgX2UxID0gc3RhY2tBbGxMZWZ0KHMxLCAvKiBbXSAqLzApO1xuICAgIHZhciBfZTIgPSBzdGFja0FsbExlZnQoczIsIC8qIFtdICovMCk7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGUyID0gX2UyO1xuICAgICAgdmFyIGUxID0gX2UxO1xuICAgICAgaWYgKCFlMSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmICghZTIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgaDIgPSBlMlswXTtcbiAgICAgIHZhciBoMSA9IGUxWzBdO1xuICAgICAgdmFyIGMgPSBrY21wKGgxLmtleSwgaDIua2V5KTtcbiAgICAgIGlmIChjICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgICAgfVxuICAgICAgdmFyIGN4ID0gdmNtcChoMS52YWx1ZSwgaDIudmFsdWUpO1xuICAgICAgaWYgKGN4ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjeDtcbiAgICAgIH1cbiAgICAgIF9lMiA9IHN0YWNrQWxsTGVmdChoMi5yaWdodCwgZTJbMV0pO1xuICAgICAgX2UxID0gc3RhY2tBbGxMZWZ0KGgxLnJpZ2h0LCBlMVsxXSk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChsZW4xIDwgbGVuMikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbXAoczEsIHMyLCBrY21wLCB2Y21wKSB7XG4gIHJldHVybiBjbXBVKHMxLCBzMiwga2NtcCwgQ3VycnkuX18yKHZjbXApKTtcbn1cblxuZnVuY3Rpb24gZXFVKHMxLCBzMiwga2NtcCwgdmVxKSB7XG4gIHZhciBsZW4xID0gc2l6ZShzMSk7XG4gIHZhciBsZW4yID0gc2l6ZShzMik7XG4gIGlmIChsZW4xID09PSBsZW4yKSB7XG4gICAgdmFyIF9lMSA9IHN0YWNrQWxsTGVmdChzMSwgLyogW10gKi8wKTtcbiAgICB2YXIgX2UyID0gc3RhY2tBbGxMZWZ0KHMyLCAvKiBbXSAqLzApO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBlMiA9IF9lMjtcbiAgICAgIHZhciBlMSA9IF9lMTtcbiAgICAgIGlmICghZTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWUyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGgyID0gZTJbMF07XG4gICAgICB2YXIgaDEgPSBlMVswXTtcbiAgICAgIGlmICghKGtjbXAoaDEua2V5LCBoMi5rZXkpID09PSAwICYmIHZlcShoMS52YWx1ZSwgaDIudmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBfZTIgPSBzdGFja0FsbExlZnQoaDIucmlnaHQsIGUyWzFdKTtcbiAgICAgIF9lMSA9IHN0YWNrQWxsTGVmdChoMS5yaWdodCwgZTFbMV0pO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxKHMxLCBzMiwga2NtcCwgdmVxKSB7XG4gIHJldHVybiBlcVUoczEsIHMyLCBrY21wLCBDdXJyeS5fXzIodmVxKSk7XG59XG5cbmZ1bmN0aW9uIGdldChfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB2ID0gbi5rZXk7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKG4udmFsdWUpO1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZChfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB2ID0gbi5rZXk7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV4bihfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB2ID0gbi5rZXk7XG4gICAgICB2YXIgYyA9IGNtcCh4LCB2KTtcbiAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgICAgfVxuICAgICAgX24gPSBjIDwgMCA/IG4ubGVmdCA6IG4ucmlnaHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImdldEV4bjBcIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KF9uLCB4LCBkZWYsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICB2YXIgdiA9IG4ua2V5O1xuICAgIHZhciBjID0gY21wKHgsIHYpO1xuICAgIGlmIChjID09PSAwKSB7XG4gICAgICByZXR1cm4gbi52YWx1ZTtcbiAgICB9XG4gICAgX24gPSBjIDwgMCA/IG4ubGVmdCA6IG4ucmlnaHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYXMoX24sIHgsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB2ID0gbi5rZXk7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVdpdGhMZWZ0Q2hpbGQoazIpIHtcbiAgdmFyIGsxID0gazIubGVmdDtcbiAgazIubGVmdCA9IGsxLnJpZ2h0O1xuICBrMS5yaWdodCA9IGsyO1xuICB2YXIgaGxrMiA9IHRyZWVIZWlnaHQoazIubGVmdCk7XG4gIHZhciBocmsyID0gdHJlZUhlaWdodChrMi5yaWdodCk7XG4gIGsyLmhlaWdodCA9IChcbiAgICBobGsyID4gaHJrMiA/IGhsazIgOiBocmsyXG4gICkgKyAxIHwgMDtcbiAgdmFyIGhsazEgPSB0cmVlSGVpZ2h0KGsxLmxlZnQpO1xuICB2YXIgaGsyID0gazIuaGVpZ2h0O1xuICBrMS5oZWlnaHQgPSAoXG4gICAgaGxrMSA+IGhrMiA/IGhsazEgOiBoazJcbiAgKSArIDEgfCAwO1xuICByZXR1cm4gazE7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVdpdGhSaWdodENoaWxkKGsxKSB7XG4gIHZhciBrMiA9IGsxLnJpZ2h0O1xuICBrMS5yaWdodCA9IGsyLmxlZnQ7XG4gIGsyLmxlZnQgPSBrMTtcbiAgdmFyIGhsazEgPSB0cmVlSGVpZ2h0KGsxLmxlZnQpO1xuICB2YXIgaHJrMSA9IHRyZWVIZWlnaHQoazEucmlnaHQpO1xuICBrMS5oZWlnaHQgPSAoXG4gICAgaGxrMSA+IGhyazEgPyBobGsxIDogaHJrMVxuICApICsgMSB8IDA7XG4gIHZhciBocmsyID0gdHJlZUhlaWdodChrMi5yaWdodCk7XG4gIHZhciBoazEgPSBrMS5oZWlnaHQ7XG4gIGsyLmhlaWdodCA9IChcbiAgICBocmsyID4gaGsxID8gaHJrMiA6IGhrMVxuICApICsgMSB8IDA7XG4gIHJldHVybiBrMjtcbn1cblxuZnVuY3Rpb24gZG91YmxlV2l0aExlZnRDaGlsZChrMykge1xuICB2YXIgdiA9IHJvdGF0ZVdpdGhSaWdodENoaWxkKGszLmxlZnQpO1xuICBrMy5sZWZ0ID0gdjtcbiAgcmV0dXJuIHJvdGF0ZVdpdGhMZWZ0Q2hpbGQoazMpO1xufVxuXG5mdW5jdGlvbiBkb3VibGVXaXRoUmlnaHRDaGlsZChrMikge1xuICB2YXIgdiA9IHJvdGF0ZVdpdGhMZWZ0Q2hpbGQoazIucmlnaHQpO1xuICBrMi5yaWdodCA9IHY7XG4gIHJldHVybiByb3RhdGVXaXRoUmlnaHRDaGlsZChrMik7XG59XG5cbmZ1bmN0aW9uIGhlaWdodFVwZGF0ZU11dGF0ZSh0KSB7XG4gIHZhciBobHQgPSB0cmVlSGVpZ2h0KHQubGVmdCk7XG4gIHZhciBocnQgPSB0cmVlSGVpZ2h0KHQucmlnaHQpO1xuICB0LmhlaWdodCA9IChcbiAgICBobHQgPiBocnQgPyBobHQgOiBocnRcbiAgKSArIDEgfCAwO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gYmFsTXV0YXRlKG50KSB7XG4gIHZhciBsID0gbnQubGVmdDtcbiAgdmFyIHIgPSBudC5yaWdodDtcbiAgdmFyIGhsID0gdHJlZUhlaWdodChsKTtcbiAgdmFyIGhyID0gdHJlZUhlaWdodChyKTtcbiAgaWYgKGhsID4gKDIgKyBociB8IDApKSB7XG4gICAgdmFyIGxsID0gbC5sZWZ0O1xuICAgIHZhciBsciA9IGwucmlnaHQ7XG4gICAgaWYgKGhlaWdodEdlKGxsLCBscikpIHtcbiAgICAgIHJldHVybiBoZWlnaHRVcGRhdGVNdXRhdGUocm90YXRlV2l0aExlZnRDaGlsZChudCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGVpZ2h0VXBkYXRlTXV0YXRlKGRvdWJsZVdpdGhMZWZ0Q2hpbGQobnQpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGhyID4gKDIgKyBobCB8IDApKSB7XG4gICAgdmFyIHJsID0gci5sZWZ0O1xuICAgIHZhciByciA9IHIucmlnaHQ7XG4gICAgaWYgKGhlaWdodEdlKHJyLCBybCkpIHtcbiAgICAgIHJldHVybiBoZWlnaHRVcGRhdGVNdXRhdGUocm90YXRlV2l0aFJpZ2h0Q2hpbGQobnQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhlaWdodFVwZGF0ZU11dGF0ZShkb3VibGVXaXRoUmlnaHRDaGlsZChudCkpO1xuICAgIH1cbiAgfVxuICBudC5oZWlnaHQgPSAoXG4gICAgaGwgPiBociA/IGhsIDogaHJcbiAgKSArIDEgfCAwO1xuICByZXR1cm4gbnQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU11dGF0ZSh0LCB4LCBkYXRhLCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzaW5nbGV0b24oeCwgZGF0YSk7XG4gIH1cbiAgdmFyIGsgPSB0LmtleTtcbiAgdmFyIGMgPSBjbXAoeCwgayk7XG4gIGlmIChjID09PSAwKSB7XG4gICAgdC52YWx1ZSA9IGRhdGE7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdmFyIGwgPSB0LmxlZnQ7XG4gIHZhciByID0gdC5yaWdodDtcbiAgaWYgKGMgPCAwKSB7XG4gICAgdmFyIGxsID0gdXBkYXRlTXV0YXRlKGwsIHgsIGRhdGEsIGNtcCk7XG4gICAgdC5sZWZ0ID0gbGw7XG4gIH0gZWxzZSB7XG4gICAgdC5yaWdodCA9IHVwZGF0ZU11dGF0ZShyLCB4LCBkYXRhLCBjbXApO1xuICB9XG4gIHJldHVybiBiYWxNdXRhdGUodCk7XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheSh4cywgY21wKSB7XG4gIHZhciBsZW4gPSB4cy5sZW5ndGg7XG4gIGlmIChsZW4gPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBuZXh0ID0gQmVsdF9Tb3J0QXJyYXkuc3RyaWN0bHlTb3J0ZWRMZW5ndGhVKHhzLCAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgcmV0dXJuIGNtcChwYXJhbVswXSwgcGFyYW0kMVswXSkgPCAwO1xuICAgICAgICB9KSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChuZXh0ID49IDApIHtcbiAgICByZXN1bHQgPSBmcm9tU29ydGVkQXJyYXlBdXgoeHMsIDAsIG5leHQpO1xuICB9IGVsc2Uge1xuICAgIG5leHQgPSAtbmV4dCB8IDA7XG4gICAgcmVzdWx0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KHhzLCBuZXh0IC0gMSB8IDAsIG5leHQpO1xuICB9XG4gIGZvcih2YXIgaSA9IG5leHQ7IGkgPCBsZW47ICsraSl7XG4gICAgdmFyIG1hdGNoID0geHNbaV07XG4gICAgcmVzdWx0ID0gdXBkYXRlTXV0YXRlKHJlc3VsdCwgbWF0Y2hbMF0sIG1hdGNoWzFdLCBjbXApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1pbkF1eFdpdGhSb290TXV0YXRlKG50LCBuKSB7XG4gIHZhciBybiA9IG4ucmlnaHQ7XG4gIHZhciBsbiA9IG4ubGVmdDtcbiAgaWYgKGxuICE9PSB1bmRlZmluZWQpIHtcbiAgICBuLmxlZnQgPSByZW1vdmVNaW5BdXhXaXRoUm9vdE11dGF0ZShudCwgbG4pO1xuICAgIHJldHVybiBiYWxNdXRhdGUobik7XG4gIH0gZWxzZSB7XG4gICAgbnQua2V5ID0gbi5rZXk7XG4gICAgbnQudmFsdWUgPSBuLnZhbHVlO1xuICAgIHJldHVybiBybjtcbiAgfVxufVxuXG5leHBvcnQge1xuICBjb3B5ICxcbiAgY3JlYXRlICxcbiAgYmFsICxcbiAgc2luZ2xldG9uICxcbiAgdXBkYXRlVmFsdWUgLFxuICBtaW5LZXkgLFxuICBtaW5LZXlVbmRlZmluZWQgLFxuICBtYXhLZXkgLFxuICBtYXhLZXlVbmRlZmluZWQgLFxuICBtaW5pbXVtICxcbiAgbWluVW5kZWZpbmVkICxcbiAgbWF4aW11bSAsXG4gIG1heFVuZGVmaW5lZCAsXG4gIHJlbW92ZU1pbkF1eFdpdGhSZWYgLFxuICBpc0VtcHR5ICxcbiAgc3RhY2tBbGxMZWZ0ICxcbiAgZmluZEZpcnN0QnlVICxcbiAgZmluZEZpcnN0QnkgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICBtYXBVICxcbiAgbWFwICxcbiAgbWFwV2l0aEtleVUgLFxuICBtYXBXaXRoS2V5ICxcbiAgcmVkdWNlVSAsXG4gIHJlZHVjZSAsXG4gIGV2ZXJ5VSAsXG4gIGV2ZXJ5ICxcbiAgc29tZVUgLFxuICBzb21lICxcbiAgam9pbiAsXG4gIGNvbmNhdCAsXG4gIGNvbmNhdE9ySm9pbiAsXG4gIGtlZXBTaGFyZWRVICxcbiAga2VlcFNoYXJlZCAsXG4gIGtlZXBNYXBVICxcbiAga2VlcE1hcCAsXG4gIHBhcnRpdGlvblNoYXJlZFUgLFxuICBwYXJ0aXRpb25TaGFyZWQgLFxuICBsZW5ndGhOb2RlICxcbiAgc2l6ZSAsXG4gIHRvTGlzdCAsXG4gIGNoZWNrSW52YXJpYW50SW50ZXJuYWwgLFxuICBmaWxsQXJyYXkgLFxuICB0b0FycmF5ICxcbiAga2V5c1RvQXJyYXkgLFxuICB2YWx1ZXNUb0FycmF5ICxcbiAgZnJvbVNvcnRlZEFycmF5QXV4ICxcbiAgZnJvbVNvcnRlZEFycmF5UmV2QXV4ICxcbiAgZnJvbVNvcnRlZEFycmF5VW5zYWZlICxcbiAgY21wVSAsXG4gIGNtcCAsXG4gIGVxVSAsXG4gIGVxICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0V2l0aERlZmF1bHQgLFxuICBnZXRFeG4gLFxuICBoYXMgLFxuICBmcm9tQXJyYXkgLFxuICB1cGRhdGVNdXRhdGUgLFxuICBiYWxNdXRhdGUgLFxuICByZW1vdmVNaW5BdXhXaXRoUm9vdE11dGF0ZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfaW50ZXJuYWxBVkx0cmVlIGZyb20gXCIuL2JlbHRfaW50ZXJuYWxBVkx0cmVlLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X2ludGVybmFsTWFwU3RyaW5nIGZyb20gXCIuL2JlbHRfaW50ZXJuYWxNYXBTdHJpbmcuanNcIjtcblxuZnVuY3Rpb24gc2V0KHQsIG5ld0ssIG5ld0QpIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5zaW5nbGV0b24obmV3SywgbmV3RCk7XG4gIH1cbiAgdmFyIGsgPSB0LmtleTtcbiAgaWYgKG5ld0sgPT09IGspIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUudXBkYXRlVmFsdWUodCwgbmV3RCk7XG4gIH1cbiAgdmFyIHYgPSB0LnZhbHVlO1xuICBpZiAobmV3SyA8IGspIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKHNldCh0LmxlZnQsIG5ld0ssIG5ld0QpLCBrLCB2LCB0LnJpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKHQubGVmdCwgaywgdiwgc2V0KHQucmlnaHQsIG5ld0ssIG5ld0QpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVVKHQsIHgsIGYpIHtcbiAgaWYgKHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBrID0gdC5rZXk7XG4gICAgaWYgKHggPT09IGspIHtcbiAgICAgIHZhciBkYXRhID0gZihDYW1sX29wdGlvbi5zb21lKHQudmFsdWUpKTtcbiAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLnVwZGF0ZVZhbHVlKHQsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZGF0YSkpO1xuICAgICAgfVxuICAgICAgdmFyIGwgPSB0LmxlZnQ7XG4gICAgICB2YXIgciA9IHQucmlnaHQ7XG4gICAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgICAgaWYgKHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH1cbiAgICAgIHZhciBrciA9IHtcbiAgICAgICAgY29udGVudHM6IHIua2V5XG4gICAgICB9O1xuICAgICAgdmFyIHZyID0ge1xuICAgICAgICBjb250ZW50czogci52YWx1ZVxuICAgICAgfTtcbiAgICAgIHZhciByJDEgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5yZW1vdmVNaW5BdXhXaXRoUmVmKHIsIGtyLCB2cik7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgICB9XG4gICAgdmFyIHYgPSB0LnZhbHVlO1xuICAgIHZhciBsJDEgPSB0LmxlZnQ7XG4gICAgdmFyIHIkMiA9IHQucmlnaHQ7XG4gICAgaWYgKHggPCBrKSB7XG4gICAgICB2YXIgbGwgPSB1cGRhdGVVKGwkMSwgeCwgZik7XG4gICAgICBpZiAobCQxID09PSBsbCkge1xuICAgICAgICByZXR1cm4gdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobGwsIGssIHYsIHIkMik7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciByciA9IHVwZGF0ZVUociQyLCB4LCBmKTtcbiAgICBpZiAociQyID09PSBycikge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobCQxLCBrLCB2LCBycik7XG4gICAgfVxuICB9XG4gIHZhciBkYXRhJDEgPSBmKHVuZGVmaW5lZCk7XG4gIGlmIChkYXRhJDEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5zaW5nbGV0b24oeCwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihkYXRhJDEpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGUodCwgeCwgZikge1xuICByZXR1cm4gdXBkYXRlVSh0LCB4LCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdXgobiwgeCkge1xuICB2YXIgdiA9IG4ua2V5O1xuICB2YXIgbCA9IG4ubGVmdDtcbiAgdmFyIHIgPSBuLnJpZ2h0O1xuICBpZiAoeCA9PT0gdikge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG4gICAgdmFyIGtyID0ge1xuICAgICAgY29udGVudHM6IHIua2V5XG4gICAgfTtcbiAgICB2YXIgdnIgPSB7XG4gICAgICBjb250ZW50czogci52YWx1ZVxuICAgIH07XG4gICAgdmFyIHIkMSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlbW92ZU1pbkF1eFdpdGhSZWYociwga3IsIHZyKTtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgfVxuICBpZiAoeCA8IHYpIHtcbiAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgdmFyIGxsID0gcmVtb3ZlQXV4KGwsIHgpO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIG47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobGwsIHYsIG4udmFsdWUsIHIpO1xuICAgIH1cbiAgfVxuICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgdmFyIHJyID0gcmVtb3ZlQXV4KHIsIHgpO1xuICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIHYsIG4udmFsdWUsIHJyKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG4sIHgpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZW1vdmVBdXgobiwgeCk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hbnkodCwga2V5cykge1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGlmICh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX3QgPSB0O1xuICAgIHZhciBfaSA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIHZhciB0JDEgPSBfdDtcbiAgICAgIGlmIChpID49IGxlbikge1xuICAgICAgICByZXR1cm4gdCQxO1xuICAgICAgfVxuICAgICAgdmFyIGVsZSA9IGtleXNbaV07XG4gICAgICB2YXIgdSA9IHJlbW92ZUF1eCh0JDEsIGVsZSk7XG4gICAgICBpZiAodSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1O1xuICAgICAgfVxuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBfdCA9IHU7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWVyZ2VNYW55KGgsIGFycikge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIHYgPSBoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHZhciBtYXRjaCA9IGFycltpXTtcbiAgICB2ID0gc2V0KHYsIG1hdGNoWzBdLCBtYXRjaFsxXSk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbnZhciBlbXB0eTtcblxudmFyIGlzRW1wdHkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5pc0VtcHR5O1xuXG52YXIgaGFzID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5oYXM7XG5cbnZhciBjbXBVID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5jbXBVO1xuXG52YXIgY21wID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5jbXA7XG5cbnZhciBlcVUgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLmVxVTtcblxudmFyIGVxID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5lcTtcblxudmFyIGZpbmRGaXJzdEJ5VSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZpbmRGaXJzdEJ5VTtcblxudmFyIGZpbmRGaXJzdEJ5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZmluZEZpcnN0Qnk7XG5cbnZhciBmb3JFYWNoVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZvckVhY2hVO1xuXG52YXIgZm9yRWFjaCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZvckVhY2g7XG5cbnZhciByZWR1Y2VVID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUucmVkdWNlVTtcblxudmFyIHJlZHVjZSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlZHVjZTtcblxudmFyIGV2ZXJ5VSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmV2ZXJ5VTtcblxudmFyIGV2ZXJ5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZXZlcnk7XG5cbnZhciBzb21lVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnNvbWVVO1xuXG52YXIgc29tZSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnNvbWU7XG5cbnZhciBzaXplID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuc2l6ZTtcblxudmFyIHRvTGlzdCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnRvTGlzdDtcblxudmFyIHRvQXJyYXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS50b0FycmF5O1xuXG52YXIgZnJvbUFycmF5ID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5mcm9tQXJyYXk7XG5cbnZhciBrZXlzVG9BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmtleXNUb0FycmF5O1xuXG52YXIgdmFsdWVzVG9BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnZhbHVlc1RvQXJyYXk7XG5cbnZhciBtaW5LZXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5taW5LZXk7XG5cbnZhciBtaW5LZXlVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5taW5LZXlVbmRlZmluZWQ7XG5cbnZhciBtYXhLZXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhLZXk7XG5cbnZhciBtYXhLZXlVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhLZXlVbmRlZmluZWQ7XG5cbnZhciBtaW5pbXVtID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWluaW11bTtcblxudmFyIG1pblVuZGVmaW5lZCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1pblVuZGVmaW5lZDtcblxudmFyIG1heGltdW0gPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhpbXVtO1xuXG52YXIgbWF4VW5kZWZpbmVkID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWF4VW5kZWZpbmVkO1xuXG52YXIgZ2V0ID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5nZXQ7XG5cbnZhciBnZXRVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLmdldFVuZGVmaW5lZDtcblxudmFyIGdldFdpdGhEZWZhdWx0ID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5nZXRXaXRoRGVmYXVsdDtcblxudmFyIGdldEV4biA9IEJlbHRfaW50ZXJuYWxNYXBTdHJpbmcuZ2V0RXhuO1xuXG52YXIgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNoZWNrSW52YXJpYW50SW50ZXJuYWw7XG5cbnZhciBtZXJnZVUgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLm1lcmdlVTtcblxudmFyIG1lcmdlID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5tZXJnZTtcblxudmFyIGtlZXBVID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2VlcFNoYXJlZFU7XG5cbnZhciBrZWVwID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2VlcFNoYXJlZDtcblxudmFyIHBhcnRpdGlvblUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5wYXJ0aXRpb25TaGFyZWRVO1xuXG52YXIgcGFydGl0aW9uID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUucGFydGl0aW9uU2hhcmVkO1xuXG52YXIgc3BsaXQgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLnNwbGl0O1xuXG52YXIgbWFwVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1hcFU7XG5cbnZhciBtYXAgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXA7XG5cbnZhciBtYXBXaXRoS2V5VSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1hcFdpdGhLZXlVO1xuXG52YXIgbWFwV2l0aEtleSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1hcFdpdGhLZXk7XG5cbmV4cG9ydCB7XG4gIGVtcHR5ICxcbiAgaXNFbXB0eSAsXG4gIGhhcyAsXG4gIGNtcFUgLFxuICBjbXAgLFxuICBlcVUgLFxuICBlcSAsXG4gIGZpbmRGaXJzdEJ5VSAsXG4gIGZpbmRGaXJzdEJ5ICxcbiAgZm9yRWFjaFUgLFxuICBmb3JFYWNoICxcbiAgcmVkdWNlVSAsXG4gIHJlZHVjZSAsXG4gIGV2ZXJ5VSAsXG4gIGV2ZXJ5ICxcbiAgc29tZVUgLFxuICBzb21lICxcbiAgc2l6ZSAsXG4gIHRvTGlzdCAsXG4gIHRvQXJyYXkgLFxuICBmcm9tQXJyYXkgLFxuICBrZXlzVG9BcnJheSAsXG4gIHZhbHVlc1RvQXJyYXkgLFxuICBtaW5LZXkgLFxuICBtaW5LZXlVbmRlZmluZWQgLFxuICBtYXhLZXkgLFxuICBtYXhLZXlVbmRlZmluZWQgLFxuICBtaW5pbXVtICxcbiAgbWluVW5kZWZpbmVkICxcbiAgbWF4aW11bSAsXG4gIG1heFVuZGVmaW5lZCAsXG4gIGdldCAsXG4gIGdldFVuZGVmaW5lZCAsXG4gIGdldFdpdGhEZWZhdWx0ICxcbiAgZ2V0RXhuICxcbiAgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbCAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICBzZXQgLFxuICB1cGRhdGVVICxcbiAgdXBkYXRlICxcbiAgbWVyZ2VVICxcbiAgbWVyZ2UgLFxuICBtZXJnZU1hbnkgLFxuICBrZWVwVSAsXG4gIGtlZXAgLFxuICBwYXJ0aXRpb25VICxcbiAgcGFydGl0aW9uICxcbiAgc3BsaXQgLFxuICBtYXBVICxcbiAgbWFwICxcbiAgbWFwV2l0aEtleVUgLFxuICBtYXBXaXRoS2V5ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCIuL2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX3ByaW1pdGl2ZSBmcm9tIFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcblxudmFyIGZvcl9pbiA9IChmdW5jdGlvbihvLGZvbyl7XG4gICAgICAgIGZvciAodmFyIHggaW4gbykgeyBmb28oeCkgfX0pO1xuXG5mdW5jdGlvbiBjYW1sX29ial9ibG9jayh0YWcsIHNpemUpIHtcbiAgdmFyIHYgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIHYudGFnID0gdGFnO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gY2FtbF9vYmpfZHVwKHgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oKHt9KSwgeCk7XG4gIH1cbiAgdmFyIGxlbiA9IHgubGVuZ3RoIHwgMDtcbiAgdmFyIHYgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2W2ldID0geFtpXTtcbiAgfVxuICB2LnRhZyA9IHgudGFnIHwgMDtcbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGNhbWxfb2JqX3RydW5jYXRlKHgsIG5ld19zaXplKSB7XG4gIHZhciBsZW4gPSB4Lmxlbmd0aCB8IDA7XG4gIGlmIChuZXdfc2l6ZSA8PSAwIHx8IG5ld19zaXplID4gbGVuKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJPYmoudHJ1bmNhdGVcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChsZW4gPT09IG5ld19zaXplKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBmb3IodmFyIGkgPSBuZXdfc2l6ZTsgaSA8IGxlbjsgKytpKXtcbiAgICB4W2ldID0gMDtcbiAgfVxuICB4Lmxlbmd0aCA9IG5ld19zaXplO1xuICBcbn1cblxuZnVuY3Rpb24gY2FtbF9sYXp5X21ha2VfZm9yd2FyZCh4KSB7XG4gIHJldHVybiBCbG9jay5fXygyNTAsIFt4XSk7XG59XG5cbmZ1bmN0aW9uIGNhbWxfbGF6eV9tYWtlKGZuKSB7XG4gIHZhciBibG9jayA9IFtmbl07XG4gIGJsb2NrLnRhZyA9IDI0NjtcbiAgcmV0dXJuIGJsb2NrO1xufVxuXG52YXIgY2FtbF91cGRhdGVfZHVtbXkgPSAoZnVuY3Rpb24oeCx5KXtcbiAgdmFyIGsgIFxuICBpZihBcnJheS5pc0FycmF5KHkpKXtcbiAgICBmb3IoayA9IDA7IGsgPCB5Lmxlbmd0aCA7ICsrayl7XG4gICAgICB4W2tdID0geVtrXVxuICAgIH1cbiAgICBpZih5LnRhZyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHgudGFnID0geS50YWdcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgayBpbiB5KXtcbiAgICAgIHhba10gPSB5W2tdXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gY2FtbF9jb21wYXJlKF9hLCBfYikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGIgPSBfYjtcbiAgICB2YXIgYSA9IF9hO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGFfdHlwZSA9IHR5cGVvZiBhO1xuICAgIHZhciBiX3R5cGUgPSB0eXBlb2YgYjtcbiAgICBzd2l0Y2ggKGFfdHlwZSkge1xuICAgICAgY2FzZSBcImJvb2xlYW5cIiA6XG4gICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2Jvb2xfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIiA6XG4gICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgICAgXCJjb21wYXJlOiBmdW5jdGlvbmFsIHZhbHVlXCJcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJudW1iZXJcIiA6XG4gICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X2NvbXBhcmUoYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInN0cmluZ1wiIDpcbiAgICAgICAgICBpZiAoYl90eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FtbF9wcmltaXRpdmUuY2FtbF9zdHJpbmdfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiIDpcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBcbiAgICB9XG4gICAgc3dpdGNoIChiX3R5cGUpIHtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIiA6XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiIDpcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChhX3R5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhX3R5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBpZiAoYiA9PT0gbnVsbCB8fCBiLnRhZyA9PT0gMjU2KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYl90eXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgaWYgKGEgPT09IG51bGwgfHwgYS50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoYi50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgPT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoYS50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRhZ19hID0gYS50YWcgfCAwO1xuICAgICAgICB2YXIgdGFnX2IgPSBiLnRhZyB8IDA7XG4gICAgICAgIGlmICh0YWdfYSA9PT0gMjUwKSB7XG4gICAgICAgICAgX2EgPSBhWzBdO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnX2IgPT09IDI1MCkge1xuICAgICAgICAgIF9iID0gYlswXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZ19hID09PSAyNTYpIHtcbiAgICAgICAgICBpZiAodGFnX2IgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X2NvbXBhcmUoYVsxXSwgYlsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZ19hID09PSAyNDgpIHtcbiAgICAgICAgICByZXR1cm4gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfY29tcGFyZShhWzFdLCBiWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnX2EgPT09IDI1MSkge1xuICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgIFwiZXF1YWw6IGFic3RyYWN0IHZhbHVlXCJcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnX2EgIT09IHRhZ19iKSB7XG4gICAgICAgICAgaWYgKHRhZ19hIDwgdGFnX2IpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5fYSA9IGEubGVuZ3RoIHwgMDtcbiAgICAgICAgdmFyIGxlbl9iID0gYi5sZW5ndGggfCAwO1xuICAgICAgICBpZiAobGVuX2EgPT09IGxlbl9iKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgICAgIHZhciBfaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gX2k7XG4gICAgICAgICAgICAgIGlmIChpID09PSBsZW5fYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciByZXMgPSBjYW1sX2NvbXBhcmUoYVtpXSwgYltpXSk7XG4gICAgICAgICAgICAgIGlmIChyZXMgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChhIC0gYik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtaW5fa2V5X2xocyA9IHtcbiAgICAgICAgICAgICAgY29udGVudHM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBtaW5fa2V5X3JocyA9IHtcbiAgICAgICAgICAgICAgY29udGVudHM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBkb19rZXkgPSBmdW5jdGlvbiAocGFyYW0sIGtleSkge1xuICAgICAgICAgICAgICB2YXIgbWluX2tleSA9IHBhcmFtWzJdO1xuICAgICAgICAgICAgICB2YXIgYiA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICBpZiAoISghYi5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGNhbWxfY29tcGFyZShwYXJhbVswXVtrZXldLCBiW2tleV0pID4gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBtayA9IG1pbl9rZXkuY29udGVudHM7XG4gICAgICAgICAgICAgIGlmIChtayAhPT0gdW5kZWZpbmVkICYmIGtleSA+PSBtaykge1xuICAgICAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluX2tleS5jb250ZW50cyA9IGtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgIG1pbl9rZXlfcmhzXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdmFyIGRvX2tleV9hID0gKGZ1bmN0aW9uKHBhcnRpYWxfYXJnKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYShwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gZG9fa2V5KHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KHBhcnRpYWxfYXJnKSk7XG4gICAgICAgICAgICB2YXIgcGFydGlhbF9hcmckMSA9IC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBtaW5fa2V5X2xoc1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHZhciBkb19rZXlfYiA9IChmdW5jdGlvbihwYXJ0aWFsX2FyZyQxKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gZG9fa2V5KHBhcnRpYWxfYXJnJDEsIHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0ocGFydGlhbF9hcmckMSkpO1xuICAgICAgICAgICAgZm9yX2luKGEsIGRvX2tleV9hKTtcbiAgICAgICAgICAgIGZvcl9pbihiLCBkb19rZXlfYik7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBtaW5fa2V5X2xocy5jb250ZW50cztcbiAgICAgICAgICAgIHZhciBtYXRjaCQxID0gbWluX2tleV9yaHMuY29udGVudHM7XG4gICAgICAgICAgICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBpZiAobWF0Y2gkMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfc3RyaW5nX2NvbXBhcmUobWF0Y2gsIG1hdGNoJDEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGVuX2EgPCBsZW5fYikge1xuICAgICAgICAgIHZhciBfaSQxID0gMDtcbiAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgaSQxID0gX2kkMTtcbiAgICAgICAgICAgIGlmIChpJDEgPT09IGxlbl9hKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXMkMSA9IGNhbWxfY29tcGFyZShhW2kkMV0sIGJbaSQxXSk7XG4gICAgICAgICAgICBpZiAocmVzJDEgIT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlcyQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2kkMSA9IGkkMSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9pJDIgPSAwO1xuICAgICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBpJDIgPSBfaSQyO1xuICAgICAgICAgICAgaWYgKGkkMiA9PT0gbGVuX2IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzJDIgPSBjYW1sX2NvbXBhcmUoYVtpJDJdLCBiW2kkMl0pO1xuICAgICAgICAgICAgaWYgKHJlcyQyICE9PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXMkMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9pJDIgPSBpJDIgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsKF9hLCBfYikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGIgPSBfYjtcbiAgICB2YXIgYSA9IF9hO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGFfdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmIChhX3R5cGUgPT09IFwic3RyaW5nXCIgfHwgYV90eXBlID09PSBcIm51bWJlclwiIHx8IGFfdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgYV90eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IGEgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGJfdHlwZSA9IHR5cGVvZiBiO1xuICAgIGlmIChhX3R5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBiX3R5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiZXF1YWw6IGZ1bmN0aW9uYWwgdmFsdWVcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmIChiX3R5cGUgPT09IFwibnVtYmVyXCIgfHwgYl90eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IGIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRhZ19hID0gYS50YWcgfCAwO1xuICAgIHZhciB0YWdfYiA9IGIudGFnIHwgMDtcbiAgICBpZiAodGFnX2EgPT09IDI1MCkge1xuICAgICAgX2EgPSBhWzBdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBpZiAodGFnX2IgPT09IDI1MCkge1xuICAgICAgX2IgPSBiWzBdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBpZiAodGFnX2EgPT09IDI0OCkge1xuICAgICAgcmV0dXJuIGFbMV0gPT09IGJbMV07XG4gICAgfVxuICAgIGlmICh0YWdfYSA9PT0gMjUxKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJlcXVhbDogYWJzdHJhY3QgdmFsdWVcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmICh0YWdfYSAhPT0gdGFnX2IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRhZ19hID09PSAyNTYpIHtcbiAgICAgIHJldHVybiBhWzFdID09PSBiWzFdO1xuICAgIH1cbiAgICB2YXIgbGVuX2EgPSBhLmxlbmd0aCB8IDA7XG4gICAgdmFyIGxlbl9iID0gYi5sZW5ndGggfCAwO1xuICAgIGlmIChsZW5fYSA9PT0gbGVuX2IpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICAgIHZhciBfaSA9IDA7XG4gICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICB2YXIgaSA9IF9pO1xuICAgICAgICAgIGlmIChpID09PSBsZW5fYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY2FtbF9lcXVhbChhW2ldLCBiW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuICEoYSA+IGIgfHwgYSA8IGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICBjb250ZW50czogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZG9fa2V5X2EgPSAoZnVuY3Rpb24oYixyZXN1bHQpe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZG9fa2V5X2Eoa2V5KSB7XG4gICAgICAgICAgaWYgKCFiLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb250ZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgfShiLHJlc3VsdCkpO1xuICAgICAgICB2YXIgZG9fa2V5X2IgPSAoZnVuY3Rpb24oYSxiLHJlc3VsdCl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihrZXkpIHtcbiAgICAgICAgICBpZiAoIWEuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhY2FtbF9lcXVhbChiW2tleV0sIGFba2V5XSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb250ZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgfShhLGIscmVzdWx0KSk7XG4gICAgICAgIGZvcl9pbihhLCBkb19rZXlfYSk7XG4gICAgICAgIGlmIChyZXN1bHQuY29udGVudHMpIHtcbiAgICAgICAgICBmb3JfaW4oYiwgZG9fa2V5X2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuY29udGVudHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbWxfZXF1YWxfbnVsbCh4LCB5KSB7XG4gIGlmICh5ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNhbWxfZXF1YWwoeCwgeSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggPT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbF91bmRlZmluZWQoeCwgeSkge1xuICBpZiAoeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNhbWxfZXF1YWwoeCwgeSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggPT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbF9udWxsYWJsZSh4LCB5KSB7XG4gIGlmICh5ID09IG51bGwpIHtcbiAgICByZXR1cm4geCA9PT0geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FtbF9lcXVhbCh4LCB5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX25vdGVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuICFjYW1sX2VxdWFsKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBjYW1sX2dyZWF0ZXJlcXVhbChhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPj0gMDtcbn1cblxuZnVuY3Rpb24gY2FtbF9ncmVhdGVydGhhbihhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPiAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX2xlc3NlcXVhbChhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPD0gMDtcbn1cblxuZnVuY3Rpb24gY2FtbF9sZXNzdGhhbihhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPCAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX21pbih4LCB5KSB7XG4gIGlmIChjYW1sX2NvbXBhcmUoeCwgeSkgPD0gMCkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbWF4KHgsIHkpIHtcbiAgaWYgKGNhbWxfY29tcGFyZSh4LCB5KSA+PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9vYmpfc2V0X3RhZyhwcmltLCBwcmltJDEpIHtcbiAgcHJpbS50YWcgPSBwcmltJDE7XG4gIFxufVxuXG5leHBvcnQge1xuICBjYW1sX29ial9ibG9jayAsXG4gIGNhbWxfb2JqX2R1cCAsXG4gIGNhbWxfb2JqX3RydW5jYXRlICxcbiAgY2FtbF9sYXp5X21ha2VfZm9yd2FyZCAsXG4gIGNhbWxfbGF6eV9tYWtlICxcbiAgY2FtbF91cGRhdGVfZHVtbXkgLFxuICBjYW1sX2NvbXBhcmUgLFxuICBjYW1sX2VxdWFsICxcbiAgY2FtbF9lcXVhbF9udWxsICxcbiAgY2FtbF9lcXVhbF91bmRlZmluZWQgLFxuICBjYW1sX2VxdWFsX251bGxhYmxlICxcbiAgY2FtbF9ub3RlcXVhbCAsXG4gIGNhbWxfZ3JlYXRlcmVxdWFsICxcbiAgY2FtbF9ncmVhdGVydGhhbiAsXG4gIGNhbWxfbGVzc3RoYW4gLFxuICBjYW1sX2xlc3NlcXVhbCAsXG4gIGNhbWxfbWluICxcbiAgY2FtbF9tYXggLFxuICBjYW1sX29ial9zZXRfdGFnICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuXG5mdW5jdGlvbiBpbnZlcnQob3JkZXJpbmcpIHtcbiAgaWYgKG9yZGVyaW5nICE9PSAxNTkwMzk0OTQpIHtcbiAgICBpZiAob3JkZXJpbmcgPj0gOTM5MjE0MTUxKSB7XG4gICAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludF90b19vcmRlcmluZyh4KSB7XG4gIGlmICh4IDwgMCkge1xuICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gIH0gZWxzZSBpZiAoeCA9PT0gMCkge1xuICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNhZmVfY29tcGFyZShhLCBiKSB7XG4gIGlmIChDYW1sX29iai5jYW1sX2xlc3N0aGFuKGEsIGIpKSB7XG4gICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfSBlbHNlIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEsIGIpKSB7XG4gICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICB9XG59XG5cbmZ1bmN0aW9uIE9yZGVyaW5nKE8pIHtcbiAgdmFyIGxlc3NfdGhhbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgPT09IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJfdGhhbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgPT09IC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfTtcbiAgdmFyIGxlc3NfdGhhbl9vcl9lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgIT09IC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJfdGhhbl9vcl9lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgIT09IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBsZXNzX3RoYW46IGxlc3NfdGhhbixcbiAgICAgICAgICBncmVhdGVyX3RoYW46IGdyZWF0ZXJfdGhhbixcbiAgICAgICAgICBsZXNzX3RoYW5fb3JfZXF1YWw6IGxlc3NfdGhhbl9vcl9lcXVhbCxcbiAgICAgICAgICBncmVhdGVyX3RoYW5fb3JfZXF1YWw6IGdyZWF0ZXJfdGhhbl9vcl9lcXVhbFxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBpbnZlcnQgLFxuICBpbnRfdG9fb3JkZXJpbmcgLFxuICB1bnNhZmVfY29tcGFyZSAsXG4gIE9yZGVyaW5nICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBJbnRlcmZhY2UkQnNCYXN0ZXQgZnJvbSBcIi4vSW50ZXJmYWNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1hZ21hKE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRjb2xvbiRncmVhdDogTS5hcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTWFnbWFfQW55KE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRjb2xvbiRncmVhdDogTS5hcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRnVuY3RvcihGKSB7XG4gIHZhciAkbGVzcyRoYXNoJGdyZWF0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIHgsIGYpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgICRsZXNzJCRncmVhdDogRi5tYXAsXG4gICAgICAgICAgJGxlc3MkaGFzaCRncmVhdDogJGxlc3MkaGFzaCRncmVhdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBcHBseShBKSB7XG4gIHZhciAkbGVzcyRoYXNoJGdyZWF0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXAsIHgsIGYpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgICRsZXNzJCRncmVhdDogQS5tYXAsXG4gICAgICAgICAgJGxlc3MkaGFzaCRncmVhdDogJGxlc3MkaGFzaCRncmVhdCxcbiAgICAgICAgICAkbGVzcyRzdGFyJGdyZWF0OiBBLmFwcGx5XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkKE0pIHtcbiAgdmFyICRsZXNzJGhhc2gkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMihNLm1hcCwgeCwgZik7XG4gIH07XG4gIHZhciAkZ3JlYXQkZ3JlYXQkZXEgPSBNLmZsYXRfbWFwO1xuICB2YXIgJGVxJGxlc3MkbGVzcyA9IGZ1bmN0aW9uIChtYSwgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihNLmZsYXRfbWFwLCBmLCBtYSk7XG4gIH07XG4gIHZhciAkZ3JlYXQkZXEkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgZywgYSkge1xuICAgIHJldHVybiBDdXJyeS5fMigkZ3JlYXQkZ3JlYXQkZXEsIEN1cnJ5Ll8xKGYsIGEpLCBnKTtcbiAgfTtcbiAgdmFyICRsZXNzJGVxJGxlc3MgPSBmdW5jdGlvbiAoZiwgZywgYSkge1xuICAgIHZhciBmJDEgPSBDdXJyeS5fMShnLCBhKTtcbiAgICByZXR1cm4gQ3VycnkuXzIoTS5mbGF0X21hcCwgZiQxLCBmKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyQkZ3JlYXQ6IE0ubWFwLFxuICAgICAgICAgICRsZXNzJGhhc2gkZ3JlYXQ6ICRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgICAgICAgJGxlc3Mkc3RhciRncmVhdDogTS5hcHBseSxcbiAgICAgICAgICAkZ3JlYXQkZ3JlYXQkZXE6ICRncmVhdCRncmVhdCRlcSxcbiAgICAgICAgICAkZXEkbGVzcyRsZXNzOiAkZXEkbGVzcyRsZXNzLFxuICAgICAgICAgICRncmVhdCRlcSRncmVhdDogJGdyZWF0JGVxJGdyZWF0LFxuICAgICAgICAgICRsZXNzJGVxJGxlc3M6ICRsZXNzJGVxJGxlc3NcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQWx0KEEpIHtcbiAgdmFyICRsZXNzJGhhc2gkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgeCwgZik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkJGdyZWF0OiBBLm1hcCxcbiAgICAgICAgICAkbGVzcyRoYXNoJGdyZWF0OiAkbGVzcyRoYXNoJGdyZWF0LFxuICAgICAgICAgICRsZXNzJHBpcGUkZ3JlYXQ6IEEuYWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFsdGVybmF0aXZlKEEpIHtcbiAgdmFyICRsZXNzJGhhc2gkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgeCwgZik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkcGlwZSRncmVhdDogQS5hbHQsXG4gICAgICAgICAgJGxlc3MkJGdyZWF0OiBBLm1hcCxcbiAgICAgICAgICAkbGVzcyRoYXNoJGdyZWF0OiAkbGVzcyRoYXNoJGdyZWF0LFxuICAgICAgICAgICRsZXNzJHN0YXIkZ3JlYXQ6IEEuYXBwbHlcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaWdyb3Vwb2lkKFMpIHtcbiAgdmFyICRncmVhdCRkb3QgPSBmdW5jdGlvbiAoZywgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihTLmNvbXBvc2UsIGYsIGcpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgICRsZXNzJGRvdDogUy5jb21wb3NlLFxuICAgICAgICAgICRncmVhdCRkb3Q6ICRncmVhdCRkb3RcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRXEoRSkge1xuICByZXR1cm4ge1xuICAgICAgICAgICRlcSRwaXBlJGVxOiBFLmVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE9yZChPKSB7XG4gIHZhciBGbiA9IEludGVyZmFjZSRCc0Jhc3RldC5PcmRlcmluZyhPKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRwaXBlJHBpcGU6IEZuLmxlc3NfdGhhbixcbiAgICAgICAgICAkcGlwZSRwaXBlJGdyZWF0OiBGbi5ncmVhdGVyX3RoYW4sXG4gICAgICAgICAgJGxlc3MkcGlwZSRlcTogRm4ubGVzc190aGFuX29yX2VxdWFsLFxuICAgICAgICAgICRncmVhdCRwaXBlJGVxOiBGbi5ncmVhdGVyX3RoYW5fb3JfZXF1YWxcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaXJpbmcoUykge1xuICByZXR1cm4ge1xuICAgICAgICAgICRwaXBlJHBsdXMkcGlwZTogUy5hZGQsXG4gICAgICAgICAgJHBpcGUkc3RhciRwaXBlOiBTLm11bHRpcGx5XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFJpbmcoUikge1xuICByZXR1cm4ge1xuICAgICAgICAgICRwaXBlJHBsdXMkcGlwZTogUi5hZGQsXG4gICAgICAgICAgJHBpcGUkc3RhciRwaXBlOiBSLm11bHRpcGx5LFxuICAgICAgICAgICRwaXBlJG5lZyRwaXBlOiBSLnN1YnRyYWN0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEV1Y2xpZGVhbl9SaW5nKEUpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkcGlwZSRwbHVzJHBpcGU6IEUuYWRkLFxuICAgICAgICAgICRwaXBlJHN0YXIkcGlwZTogRS5tdWx0aXBseSxcbiAgICAgICAgICAkcGlwZSRuZWckcGlwZTogRS5zdWJ0cmFjdCxcbiAgICAgICAgICAkcGlwZSRzbGFzaCRwaXBlOiBFLmRpdmlkZSxcbiAgICAgICAgICAkcGlwZSRwZXJjZW50JHBpcGU6IEUubW9kdWxvXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEV4dGVuZChFKSB7XG4gIHZhciAkZXEkZ3JlYXQkZ3JlYXQgPSBmdW5jdGlvbiAoYSwgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihFLmV4dGVuZCwgZiwgYSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkbGVzcyRlcTogRS5leHRlbmQsXG4gICAgICAgICAgJGVxJGdyZWF0JGdyZWF0OiAkZXEkZ3JlYXQkZ3JlYXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQmlmdW5jdG9yKEIpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogQi5iaW1hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCaWFwcGx5KEIpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogQi5iaW1hcCxcbiAgICAgICAgICAkbGVzcyRsZXNzJHN0YXIkZ3JlYXQkZ3JlYXQ6IEIuYmlhcHBseVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBKb2luX1NlbWlsYXR0aWNlKEopIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRwaXBlJHBpcGUkZ3JlYXQ6IEouam9pblxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNZWV0X1NlbWlsYXR0aWNlKE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRhbXAkYW1wJGdyZWF0OiBNLm1lZXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gSGV5dGluZ19BbGdlYnJhKEgpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbmVnJG5lZyRncmVhdDogSC5pbXBsaWVzXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIE1hZ21hICxcbiAgTWFnbWFfQW55ICxcbiAgRnVuY3RvciAsXG4gIEFwcGx5ICxcbiAgTW9uYWQgLFxuICBBbHQgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIFNlbWlncm91cG9pZCAsXG4gIEVxICxcbiAgT3JkICxcbiAgU2VtaXJpbmcgLFxuICBSaW5nICxcbiAgRXVjbGlkZWFuX1JpbmcgLFxuICBFeHRlbmQgLFxuICBCaWZ1bmN0b3IgLFxuICBCaWFwcGx5ICxcbiAgSm9pbl9TZW1pbGF0dGljZSAsXG4gIE1lZXRfU2VtaWxhdHRpY2UgLFxuICBIZXl0aW5nX0FsZ2VicmEgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGZsaXAoZiwgYiwgYSkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgYSwgYik7XG59XG5cbmZ1bmN0aW9uICQkY29uc3QoYSwgcGFyYW0pIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIEZ1bmN0b3IoVCkge1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ3VycnkuXzEoZywgeCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFwcGx5KFQpIHtcbiAgdmFyIG1hcCA9IGZ1bmN0aW9uIChmLCBnLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIEN1cnJ5Ll8xKGcsIHgpKTtcbiAgfTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZiwgeCwgQ3VycnkuXzEoZywgeCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGFwcGx5OiBhcHBseVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21wb3NlKGYsIGcsIHgpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIEN1cnJ5Ll8xKGcsIHgpKTtcbn1cblxudmFyIFNlbWlncm91cG9pZCA9IHtcbiAgY29tcG9zZTogY29tcG9zZVxufTtcblxuZnVuY3Rpb24gaWQoYSkge1xuICByZXR1cm4gYTtcbn1cblxudmFyIENhdGVnb3J5ID0ge1xuICBjb21wb3NlOiBjb21wb3NlLFxuICBpZDogaWRcbn07XG5cbmZ1bmN0aW9uIEludmFyaWFudChUKSB7XG4gIHZhciBpbWFwID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIEN1cnJ5Ll8xKHBhcmFtLCBwYXJhbSQxKSk7XG4gICAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBpbWFwOiBpbWFwXG4gICAgICAgIH07XG59XG5cbnZhciBJID0gSW5maXgkQnNCYXN0ZXQuU2VtaWdyb3Vwb2lkKFNlbWlncm91cG9pZCk7XG5cbnZhciAkZ3JlYXQkZG90ID0gSS4kZ3JlYXQkZG90O1xuXG5mdW5jdGlvbiBkaW1hcChhX3RvX2IsIGNfdG9fZCwgYl90b19jKSB7XG4gIHJldHVybiBDdXJyeS5fMigkZ3JlYXQkZG90LCBDdXJyeS5fMigkZ3JlYXQkZG90LCBhX3RvX2IsIGJfdG9fYyksIGNfdG9fZCk7XG59XG5cbnZhciBQcm9mdW5jdG9yID0ge1xuICBkaW1hcDogZGltYXBcbn07XG5cbmZ1bmN0aW9uIENvbnRyYXZhcmlhbnQoVCkge1xuICB2YXIgY21hcCA9IGZ1bmN0aW9uIChmLCBnLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGcsIEN1cnJ5Ll8xKGYsIHgpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbWFwOiBjbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEJpY29udHJhdmFyaWFudChUKSB7XG4gIHZhciBiaWNtYXAgPSBmdW5jdGlvbiAoZiwgZywgaCwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihoLCBDdXJyeS5fMShmLCBhKSwgQ3VycnkuXzEoZywgYikpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGJpY21hcDogYmljbWFwXG4gICAgICAgIH07XG59XG5cbnZhciBpbmNsdWRlID0gSW5maXgkQnNCYXN0ZXQuU2VtaWdyb3Vwb2lkKFNlbWlncm91cG9pZCk7XG5cbnZhciBJbmZpeCA9IGluY2x1ZGU7XG5cbmV4cG9ydCB7XG4gIGZsaXAgLFxuICAkJGNvbnN0ICxcbiAgRnVuY3RvciAsXG4gIEFwcGx5ICxcbiAgU2VtaWdyb3Vwb2lkICxcbiAgQ2F0ZWdvcnkgLFxuICBJbnZhcmlhbnQgLFxuICBQcm9mdW5jdG9yICxcbiAgQ29udHJhdmFyaWFudCAsXG4gIEJpY29udHJhdmFyaWFudCAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBJIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbiRCc0Jhc3RldCBmcm9tIFwiLi9GdW5jdGlvbi5icy5qc1wiO1xuXG52YXIgaWQgPSBGdW5jdGlvbiRCc0Jhc3RldC5DYXRlZ29yeS5pZDtcblxudmFyICRsZXNzJGRvdCA9IEZ1bmN0aW9uJEJzQmFzdGV0LkluZml4LiRsZXNzJGRvdDtcblxuZnVuY3Rpb24gYXBwZW5kKGYsIGcpIHtcbiAgcmV0dXJuIC8qIEVuZG8gKi9bQ3VycnkuXzIoJGxlc3MkZG90LCBmWzBdLCBnWzBdKV07XG59XG5cbnZhciBNYWdtYSA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBTZW1pZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgZW1wdHkgPSAvKiBFbmRvICovW2lkXTtcblxudmFyIE1vbm9pZCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiBlbXB0eVxufTtcblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYV9BbnkoTWFnbWEpO1xuXG52YXIgSW5maXggPSBpbmNsdWRlO1xuXG5leHBvcnQge1xuICBpZCAsXG4gICRsZXNzJGRvdCAsXG4gIE1hZ21hICxcbiAgU2VtaWdyb3VwICxcbiAgTW9ub2lkICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRW5kbyRCc0Jhc3RldCBmcm9tIFwiLi9FbmRvLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb24kQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb24uYnMuanNcIjtcblxudmFyIGlkID0gRnVuY3Rpb24kQnNCYXN0ZXQuQ2F0ZWdvcnkuaWQ7XG5cbnZhciAkbGVzcyRkb3QgPSBGdW5jdGlvbiRCc0Jhc3RldC5JbmZpeC4kbGVzcyRkb3Q7XG5cbmZ1bmN0aW9uIE1vbm9pZChNKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuTWFnbWEoTSk7XG4gIHZhciBwb3dlciA9IGZ1bmN0aW9uICh4LCBwKSB7XG4gICAgdmFyIGdvID0gZnVuY3Rpb24gKHApIHtcbiAgICAgIGlmIChwIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAocCA9PT0gMSkge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICAgIGlmIChwICUgMiA9PT0gMCkge1xuICAgICAgICB2YXIgeCRwcmltZSA9IGdvKHAgLyAyIHwgMCk7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJGNvbG9uJGdyZWF0LCB4JHByaW1lLCB4JHByaW1lKTtcbiAgICAgIH1cbiAgICAgIHZhciB4JHByaW1lJDEgPSBnbyhwIC8gMiB8IDApO1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3MkY29sb24kZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkY29sb24kZ3JlYXQsIHgkcHJpbWUkMSwgeCRwcmltZSQxKSwgeCk7XG4gICAgfTtcbiAgICByZXR1cm4gZ28ocCk7XG4gIH07XG4gIHZhciBndWFyZCA9IGZ1bmN0aW9uIChwLCBhKSB7XG4gICAgaWYgKHApIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTS5lbXB0eTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgSTogSSxcbiAgICAgICAgICBwb3dlcjogcG93ZXIsXG4gICAgICAgICAgZ3VhcmQ6IGd1YXJkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZ1bmN0b3IoRikge1xuICB2YXIgJCR2b2lkID0gZnVuY3Rpb24gKGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEYubWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCh1bmRlZmluZWQsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICB9O1xuICB2YXIgdm9pZF9yaWdodCA9IGZ1bmN0aW9uIChhLCBmYikge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QoYSwgcGFyYW0pO1xuICAgICAgICAgICAgICAgIH0pLCBmYik7XG4gIH07XG4gIHZhciB2b2lkX2xlZnQgPSBmdW5jdGlvbiAoZmEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGIsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICB9O1xuICB2YXIgZmxhcCA9IGZ1bmN0aW9uIChmcywgYSkge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgICAgfSksIGZzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkJHZvaWQ6ICQkdm9pZCxcbiAgICAgICAgICB2b2lkX3JpZ2h0OiB2b2lkX3JpZ2h0LFxuICAgICAgICAgIHZvaWRfbGVmdDogdm9pZF9sZWZ0LFxuICAgICAgICAgIGZsYXA6IGZsYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbHkoQSkge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0LkFwcGx5KEEpO1xuICB2YXIgYXBwbHlfZmlyc3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0LCBhKSwgYik7XG4gIH07XG4gIHZhciBhcHBseV9zZWNvbmQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QoaWQsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGFwcGx5X2JvdGggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCAoZnVuY3Rpb24gKGEkcHJpbWUsIGIkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhJHByaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiRwcmltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gIH07XG4gIHZhciBsaWZ0MiA9IGZ1bmN0aW9uIChmLCBhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGxpZnQzID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpO1xuICB9O1xuICB2YXIgbGlmdDQgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKSwgZCk7XG4gIH07XG4gIHZhciBsaWZ0NSA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyksIGQpLCBlKTtcbiAgfTtcbiAgdmFyIEluZml4ID0ge1xuICAgICRsZXNzJHN0YXI6IGFwcGx5X2ZpcnN0LFxuICAgICRzdGFyJGdyZWF0OiBhcHBseV9zZWNvbmRcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBJOiBJLFxuICAgICAgICAgIGFwcGx5X2ZpcnN0OiBhcHBseV9maXJzdCxcbiAgICAgICAgICBhcHBseV9zZWNvbmQ6IGFwcGx5X3NlY29uZCxcbiAgICAgICAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoLFxuICAgICAgICAgIGxpZnQyOiBsaWZ0MixcbiAgICAgICAgICBsaWZ0MzogbGlmdDMsXG4gICAgICAgICAgbGlmdDQ6IGxpZnQ0LFxuICAgICAgICAgIGxpZnQ1OiBsaWZ0NSxcbiAgICAgICAgICBJbmZpeDogSW5maXhcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbHkkcHJpbWUoQSwgVCkge1xuICB2YXIgRiA9IEZ1bmN0aW9uJEJzQmFzdGV0LkFwcGx5KHsgfSk7XG4gIHZhciBGJHByaW1lID0gRnVuY3Rpb24kQnNCYXN0ZXQuQXBwbHkoeyB9KTtcbiAgdmFyIEkgPSBJbmZpeCRCc0Jhc3RldC5BcHBseShGKTtcbiAgdmFyIGFwcGx5X2ZpcnN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCwgYSksIGIpO1xuICB9O1xuICB2YXIgYXBwbHlfc2Vjb25kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGlkLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gIH07XG4gIHZhciBhcHBseV9ib3RoID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChhJHByaW1lLCBiJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSRwcmltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYSksIGIpO1xuICB9O1xuICB2YXIgbGlmdDIgPSBmdW5jdGlvbiAoZiwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYik7XG4gIH07XG4gIHZhciBsaWZ0MyA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKTtcbiAgfTtcbiAgdmFyIGxpZnQ0ID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyksIGQpO1xuICB9O1xuICB2YXIgbGlmdDUgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKSwgZSk7XG4gIH07XG4gIHZhciBJbmZpeCA9IHtcbiAgICAkbGVzcyRzdGFyOiBhcHBseV9maXJzdCxcbiAgICAkc3RhciRncmVhdDogYXBwbHlfc2Vjb25kXG4gIH07XG4gIHZhciBBcHBseV9GID0ge1xuICAgIEk6IEksXG4gICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0LFxuICAgIGFwcGx5X3NlY29uZDogYXBwbHlfc2Vjb25kLFxuICAgIGFwcGx5X2JvdGg6IGFwcGx5X2JvdGgsXG4gICAgbGlmdDI6IGxpZnQyLFxuICAgIGxpZnQzOiBsaWZ0MyxcbiAgICBsaWZ0NDogbGlmdDQsXG4gICAgbGlmdDU6IGxpZnQ1LFxuICAgIEluZml4OiBJbmZpeFxuICB9O1xuICB2YXIgSSQxID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gIHZhciBhcHBseV9maXJzdCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyQkZ3JlYXQsIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QsIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGFwcGx5X3NlY29uZCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChpZCwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYSksIGIpO1xuICB9O1xuICB2YXIgYXBwbHlfYm90aCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAoYSRwcmltZSwgYiRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiJHByaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGxpZnQyJDEgPSBmdW5jdGlvbiAoZiwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpO1xuICB9O1xuICB2YXIgbGlmdDMkMSA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKTtcbiAgfTtcbiAgdmFyIGxpZnQ0JDEgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCkge1xuICAgIHJldHVybiBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJJDEuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKTtcbiAgfTtcbiAgdmFyIGxpZnQ1JDEgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKSwgZCksIGUpO1xuICB9O1xuICB2YXIgSW5maXgkMSA9IHtcbiAgICAkbGVzcyRzdGFyOiBhcHBseV9maXJzdCQxLFxuICAgICRzdGFyJGdyZWF0OiBhcHBseV9zZWNvbmQkMVxuICB9O1xuICB2YXIgQXBwbHlfQSA9IHtcbiAgICBJOiBJJDEsXG4gICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0JDEsXG4gICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQkMSxcbiAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoJDEsXG4gICAgbGlmdDI6IGxpZnQyJDEsXG4gICAgbGlmdDM6IGxpZnQzJDEsXG4gICAgbGlmdDQ6IGxpZnQ0JDEsXG4gICAgbGlmdDU6IGxpZnQ1JDEsXG4gICAgSW5maXg6IEluZml4JDFcbiAgfTtcbiAgdmFyIGFwcGx5X2NvbnN0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRiRwcmltZS5hcHBseSwgYXBwbHlfZmlyc3QkMSwgZiwgeCk7XG4gIH07XG4gIHZhciBhcHBseV9maXJzdCQyID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEobGlmdDIoYXBwbHlfZmlyc3QkMSwgZiwgZyksIHgpO1xuICB9O1xuICB2YXIgYXBwbHlfc2Vjb25kJDIgPSBmdW5jdGlvbiAoZiwgZywgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMShsaWZ0MihhcHBseV9zZWNvbmQkMSwgZiwgZyksIHgpO1xuICB9O1xuICB2YXIgYXBwbHlfYm90aCQyID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEobGlmdDIoYXBwbHlfYm90aCQxLCBmLCBnKSwgeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRjogRixcbiAgICAgICAgICBGJHByaW1lOiBGJHByaW1lLFxuICAgICAgICAgIEFwcGx5X0Y6IEFwcGx5X0YsXG4gICAgICAgICAgQXBwbHlfQTogQXBwbHlfQSxcbiAgICAgICAgICBhcHBseV9jb25zdDogYXBwbHlfY29uc3QsXG4gICAgICAgICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0JDIsXG4gICAgICAgICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQkMixcbiAgICAgICAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoJDJcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbGljYXRpdmUoQSkge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0LkFwcGx5KEEpO1xuICB2YXIgbGlmdEExID0gZnVuY3Rpb24gKGYsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzEoQS5wdXJlLCBmKSwgZmEpO1xuICB9O1xuICB2YXIgd2hlbl8gPSBmdW5jdGlvbiAocCwgZmEpIHtcbiAgICBpZiAocCkge1xuICAgICAgcmV0dXJuIGZhO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVubGVzcyA9IGZ1bmN0aW9uIChwLCBmYSkge1xuICAgIGlmIChwKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmE7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEk6IEksXG4gICAgICAgICAgbGlmdEExOiBsaWZ0QTEsXG4gICAgICAgICAgd2hlbl86IHdoZW5fLFxuICAgICAgICAgIHVubGVzczogdW5sZXNzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkKE0pIHtcbiAgdmFyIEkgPSBJbmZpeCRCc0Jhc3RldC5Nb25hZChNKTtcbiAgdmFyIEkkMSA9IEluZml4JEJzQmFzdGV0LkFwcGx5KE0pO1xuICB2YXIgbGlmdEExID0gZnVuY3Rpb24gKGYsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMShNLnB1cmUsIGYpLCBmYSk7XG4gIH07XG4gIHZhciB3aGVuXyA9IGZ1bmN0aW9uIChwLCBmYSkge1xuICAgIGlmIChwKSB7XG4gICAgICByZXR1cm4gZmE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShNLnB1cmUsIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9O1xuICB2YXIgdW5sZXNzID0gZnVuY3Rpb24gKHAsIGZhKSB7XG4gICAgaWYgKHApIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShNLnB1cmUsIHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYTtcbiAgICB9XG4gIH07XG4gIHZhciBBID0ge1xuICAgIEk6IEkkMSxcbiAgICBsaWZ0QTE6IGxpZnRBMSxcbiAgICB3aGVuXzogd2hlbl8sXG4gICAgdW5sZXNzOiB1bmxlc3NcbiAgfTtcbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRncmVhdCRncmVhdCRlcSwgbSwgaWQpO1xuICB9O1xuICB2YXIgY29tcG9zZV9rbGllc2xpID0gZnVuY3Rpb24gKGYsIGcsIGEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIEN1cnJ5Ll8xKGYsIGEpLCBnKTtcbiAgfTtcbiAgdmFyIGNvbXBvc2Vfa2xpZXNsaV9mbGlwcGVkID0gZnVuY3Rpb24gKGYsIGcsIGEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZXEkbGVzcyRsZXNzLCBmLCBDdXJyeS5fMShnLCBhKSk7XG4gIH07XG4gIHZhciBpZl9tID0gZnVuY3Rpb24gKHAsIHQsIGYpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIHAsIChmdW5jdGlvbiAocCRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHAkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHZhciBsaWZ0TTEgPSBmdW5jdGlvbiAoZiwgZmEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIGZhLCAoZnVuY3Rpb24gKGZhJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoTS5wdXJlLCBDdXJyeS5fMShmLCBmYSRwcmltZSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgfTtcbiAgdmFyIGFwID0gZnVuY3Rpb24gKGYsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGdyZWF0JGdyZWF0JGVxLCBmLCAoZnVuY3Rpb24gKGYkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRncmVhdCRncmVhdCRlcSwgZmEsIChmdW5jdGlvbiAoZmEkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKE0ucHVyZSwgQ3VycnkuXzEoZiRwcmltZSwgZmEkcHJpbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHZhciB3aGVuXyQxID0gZnVuY3Rpb24gKHAsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGdyZWF0JGdyZWF0JGVxLCBwLCAoZnVuY3Rpb24gKHAkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3aGVuXyhwJHByaW1lLCBmYSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICB9O1xuICB2YXIgdW5sZXNzJDEgPSBmdW5jdGlvbiAocCwgZmEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIHAsIChmdW5jdGlvbiAocCRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHVubGVzcyhwJHByaW1lLCBmYSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEk6IEksXG4gICAgICAgICAgQTogQSxcbiAgICAgICAgICBmbGF0dGVuOiBmbGF0dGVuLFxuICAgICAgICAgIGNvbXBvc2Vfa2xpZXNsaTogY29tcG9zZV9rbGllc2xpLFxuICAgICAgICAgIGNvbXBvc2Vfa2xpZXNsaV9mbGlwcGVkOiBjb21wb3NlX2tsaWVzbGlfZmxpcHBlZCxcbiAgICAgICAgICBpZl9tOiBpZl9tLFxuICAgICAgICAgIGxpZnRNMTogbGlmdE0xLFxuICAgICAgICAgIGFwOiBhcCxcbiAgICAgICAgICB3aGVuXzogd2hlbl8kMSxcbiAgICAgICAgICB1bmxlc3M6IHVubGVzcyQxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRhYmxlKEYpIHtcbiAgdmFyIFNlbWlncm91cCA9IGZ1bmN0aW9uIChTKSB7XG4gICAgdmFyIEZNID0gQ3VycnkuXzEoRi5Gb2xkX01hcF9BbnksIEVuZG8kQnNCYXN0ZXQuTW9ub2lkKTtcbiAgICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKFMpO1xuICAgIHZhciBzdXJyb3VuZF9tYXAgPSBmdW5jdGlvbiAoZGVsaW1pdGVyLCBmLCBmYSkge1xuICAgICAgdmFyIGpvaW5lZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiAvKiBFbmRvICovWyhmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgZGVsaW1pdGVyLCBDdXJyeS5fMShmLCBhKSksIG0pO1xuICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgfTtcbiAgICAgIHZhciBmbiA9IEN1cnJ5Ll8yKEZNLmZvbGRfbWFwLCBqb2luZWQsIGZhKTtcbiAgICAgIHJldHVybiBDdXJyeS5fMShmblswXSwgZGVsaW1pdGVyKTtcbiAgICB9O1xuICAgIHZhciBzdXJyb3VuZCA9IGZ1bmN0aW9uIChkZWxpbWl0ZXIsIGZhKSB7XG4gICAgICByZXR1cm4gc3Vycm91bmRfbWFwKGRlbGltaXRlciwgaWQsIGZhKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBGTTogRk0sXG4gICAgICAgICAgICBJOiBJLFxuICAgICAgICAgICAgc3Vycm91bmRfbWFwOiBzdXJyb3VuZF9tYXAsXG4gICAgICAgICAgICBzdXJyb3VuZDogc3Vycm91bmRcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgTW9ub2lkID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgRk0gPSBDdXJyeS5fMShGLkZvbGRfTWFwLCBNKTtcbiAgICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE0pO1xuICAgIHZhciBmb2xkID0gQ3VycnkuXzEoRk0uZm9sZF9tYXAsIGlkKTtcbiAgICB2YXIgaW50ZXJjYWxhdGUgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCB4cykge1xuICAgICAgdmFyIGdvID0gZnVuY3Rpb24gKGFjYywgeCkge1xuICAgICAgICBpZiAoYWNjLmluaXQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgaW5pdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBhY2M6IHhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICBpbml0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGFjYzogQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgYWNjLmFjYywgc2VwYXJhdG9yKSwgeClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCBnbywge1xuICAgICAgICAgICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGFjYzogTS5lbXB0eVxuICAgICAgICAgICAgICAgIH0sIHhzKS5hY2M7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgRk06IEZNLFxuICAgICAgICAgICAgSTogSSxcbiAgICAgICAgICAgIGZvbGQ6IGZvbGQsXG4gICAgICAgICAgICBpbnRlcmNhbGF0ZTogaW50ZXJjYWxhdGVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgQXBwbGljYXRpdmUgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gICAgdmFyIGFwcGx5X2ZpcnN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0LCBhKSwgYik7XG4gICAgfTtcbiAgICB2YXIgYXBwbHlfc2Vjb25kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChpZCwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gICAgfTtcbiAgICB2YXIgYXBwbHlfYm90aCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChhJHByaW1lLCBiJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBiKTtcbiAgICB9O1xuICAgIHZhciBsaWZ0MiA9IGZ1bmN0aW9uIChmLCBhLCBiKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpO1xuICAgIH07XG4gICAgdmFyIGxpZnQzID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyk7XG4gICAgfTtcbiAgICB2YXIgbGlmdDQgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKTtcbiAgICB9O1xuICAgIHZhciBsaWZ0NSA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKSwgZCksIGUpO1xuICAgIH07XG4gICAgdmFyIEluZml4ID0ge1xuICAgICAgJGxlc3Mkc3RhcjogYXBwbHlfZmlyc3QsXG4gICAgICAkc3RhciRncmVhdDogYXBwbHlfc2Vjb25kXG4gICAgfTtcbiAgICB2YXIgRm4gPSB7XG4gICAgICBJOiBJLFxuICAgICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0LFxuICAgICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQsXG4gICAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoLFxuICAgICAgbGlmdDI6IGxpZnQyLFxuICAgICAgbGlmdDM6IGxpZnQzLFxuICAgICAgbGlmdDQ6IGxpZnQ0LFxuICAgICAgbGlmdDU6IGxpZnQ1LFxuICAgICAgSW5maXg6IEluZml4XG4gICAgfTtcbiAgICB2YXIgdHJhdmVyc2UkcHJpbWUgPSBmdW5jdGlvbiAoZiwgZmEpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfcmlnaHQsIEN1cnJ5Ll8yKCRsZXNzJGRvdCwgYXBwbHlfc2Vjb25kLCBmKSwgQ3VycnkuXzEoQS5wdXJlLCB1bmRlZmluZWQpLCBmYSk7XG4gICAgfTtcbiAgICB2YXIgc2VxdWVuY2UkcHJpbWUgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICAgIHJldHVybiB0cmF2ZXJzZSRwcmltZShpZCwgZmEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZuOiBGbixcbiAgICAgICAgICAgIHRyYXZlcnNlJHByaW1lOiB0cmF2ZXJzZSRwcmltZSxcbiAgICAgICAgICAgIHNlcXVlbmNlJHByaW1lOiBzZXF1ZW5jZSRwcmltZVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBQbHVzID0gZnVuY3Rpb24gKFApIHtcbiAgICB2YXIgb25lX29mID0gZnVuY3Rpb24gKGZhKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX3JpZ2h0LCBQLmFsdCwgUC5lbXB0eSwgZmEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uZV9vZjogb25lX29mXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIE1vbmFkID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE0pO1xuICAgIHZhciBmb2xkX21vbmFkID0gZnVuY3Rpb24gKGYsIGEsIGZhKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRncmVhdCRncmVhdCRlcSwgYWNjLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LmZsaXAoZiwgeCwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoTS5wdXJlLCBhKSwgZmEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEk6IEksXG4gICAgICAgICAgICBmb2xkX21vbmFkOiBmb2xkX21vbmFkXG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBTZW1pZ3JvdXA6IFNlbWlncm91cCxcbiAgICAgICAgICBNb25vaWQ6IE1vbm9pZCxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgUGx1czogUGx1cyxcbiAgICAgICAgICBNb25hZDogTW9uYWRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gVHJhdmVyc2FibGUoVCkge1xuICB2YXIgYXBwbHlfc3RhdGUgPSBmdW5jdGlvbiAocywgYSkge1xuICAgIHJldHVybiBDdXJyeS5fMShzLCBhKTtcbiAgfTtcbiAgdmFyIFN0YXRlX0xlZnQgPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgaywgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoaywgcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2guYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShmLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgRnVuY3RvciA9IHtcbiAgICAgIG1hcDogbWFwXG4gICAgfTtcbiAgICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgeCwgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoZiwgcyk7XG4gICAgICB2YXIgbWF0Y2gkMSA9IEN1cnJ5Ll8xKHgsIG1hdGNoLmFjY3VtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaCQxLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEobWF0Y2gudmFsdWUsIG1hdGNoJDEudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEFwcGx5ID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBhcHBseTogYXBwbHlcbiAgICB9O1xuICAgIHZhciBwdXJlID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgcHVyZTogcHVyZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgU3RhdGVfUmlnaHQgPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgaywgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoaywgcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2guYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShmLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgRnVuY3RvciA9IHtcbiAgICAgIG1hcDogbWFwXG4gICAgfTtcbiAgICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgeCwgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoeCwgcyk7XG4gICAgICB2YXIgbWF0Y2gkMSA9IEN1cnJ5Ll8xKGYsIG1hdGNoLmFjY3VtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaCQxLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEobWF0Y2gkMS52YWx1ZSwgbWF0Y2gudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEFwcGx5ID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBhcHBseTogYXBwbHlcbiAgICB9O1xuICAgIHZhciBwdXJlID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgcHVyZTogcHVyZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgTWFwX0FjY3VtID0gZnVuY3Rpb24gKFR5cGUsIFQpIHtcbiAgICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGssIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKGssIHMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWNjdW06IG1hdGNoLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEoZiwgbWF0Y2gudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEZ1bmN0b3IgPSB7XG4gICAgICBtYXA6IG1hcFxuICAgIH07XG4gICAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGYsIHgsIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKGYsIHMpO1xuICAgICAgdmFyIG1hdGNoJDEgPSBDdXJyeS5fMSh4LCBtYXRjaC5hY2N1bSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2gkMS5hY2N1bSxcbiAgICAgICAgICAgICAgdmFsdWU6IEN1cnJ5Ll8xKG1hdGNoLnZhbHVlLCBtYXRjaCQxLnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBseSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5XG4gICAgfTtcbiAgICB2YXIgcHVyZSA9IGZ1bmN0aW9uIChhLCBzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogcyxcbiAgICAgICAgICAgICAgdmFsdWU6IGFcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgQXBwbGljYXRpdmUgPSB7XG4gICAgICBtYXA6IG1hcCxcbiAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgIHB1cmU6IHB1cmVcbiAgICB9O1xuICAgIHZhciBTTCA9IHtcbiAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICBBcHBseTogQXBwbHksXG4gICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmVcbiAgICB9O1xuICAgIHZhciBtYXAkMSA9IGZ1bmN0aW9uIChmLCBrLCBzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMShrLCBzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaC5hY2N1bSxcbiAgICAgICAgICAgICAgdmFsdWU6IEN1cnJ5Ll8xKGYsIG1hdGNoLnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBGdW5jdG9yJDEgPSB7XG4gICAgICBtYXA6IG1hcCQxXG4gICAgfTtcbiAgICB2YXIgYXBwbHkkMSA9IGZ1bmN0aW9uIChmLCB4LCBzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMSh4LCBzKTtcbiAgICAgIHZhciBtYXRjaCQxID0gQ3VycnkuXzEoZiwgbWF0Y2guYWNjdW0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWNjdW06IG1hdGNoJDEuYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShtYXRjaCQxLnZhbHVlLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgQXBwbHkkMSA9IHtcbiAgICAgIG1hcDogbWFwJDEsXG4gICAgICBhcHBseTogYXBwbHkkMVxuICAgIH07XG4gICAgdmFyIHB1cmUkMSA9IGZ1bmN0aW9uIChhLCBzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogcyxcbiAgICAgICAgICAgICAgdmFsdWU6IGFcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgQXBwbGljYXRpdmUkMSA9IHtcbiAgICAgIG1hcDogbWFwJDEsXG4gICAgICBhcHBseTogYXBwbHkkMSxcbiAgICAgIHB1cmU6IHB1cmUkMVxuICAgIH07XG4gICAgdmFyIFNSID0ge1xuICAgICAgRnVuY3RvcjogRnVuY3RvciQxLFxuICAgICAgQXBwbHk6IEFwcGx5JDEsXG4gICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUkMVxuICAgIH07XG4gICAgdmFyIFRTTCA9IEN1cnJ5Ll8xKFQsIEFwcGxpY2F0aXZlKTtcbiAgICB2YXIgVFNSID0gQ3VycnkuXzEoVCwgQXBwbGljYXRpdmUkMSk7XG4gICAgdmFyIG1hcF9hY2N1bV9sZWZ0ID0gZnVuY3Rpb24gKGYsIHMsIHhzKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoVFNMLnRyYXZlcnNlLCAoZnVuY3Rpb24gKGEsIHMkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHMkcHJpbWUsIGEpO1xuICAgICAgICAgICAgICAgICAgfSksIHhzLCBzKTtcbiAgICB9O1xuICAgIHZhciBtYXBfYWNjdW1fcmlnaHQgPSBmdW5jdGlvbiAoZiwgcywgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhUU1IudHJhdmVyc2UsIChmdW5jdGlvbiAoYSwgcyRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoZiwgcyRwcmltZSwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSwgeHMsIHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFNMOiBTTCxcbiAgICAgICAgICAgIFNSOiBTUixcbiAgICAgICAgICAgIFRTTDogVFNMLFxuICAgICAgICAgICAgVFNSOiBUU1IsXG4gICAgICAgICAgICBtYXBfYWNjdW1fbGVmdDogbWFwX2FjY3VtX2xlZnQsXG4gICAgICAgICAgICBtYXBfYWNjdW1fcmlnaHQ6IG1hcF9hY2N1bV9yaWdodFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBJbnRlcm5hbCA9IHtcbiAgICBhcHBseV9zdGF0ZTogYXBwbHlfc3RhdGUsXG4gICAgU3RhdGVfTGVmdDogU3RhdGVfTGVmdCxcbiAgICBTdGF0ZV9SaWdodDogU3RhdGVfUmlnaHQsXG4gICAgTWFwX0FjY3VtOiBNYXBfQWNjdW1cbiAgfTtcbiAgdmFyIFNjYW4gPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgaywgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoaywgcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2guYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShmLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgRnVuY3RvciA9IHtcbiAgICAgIG1hcDogbWFwXG4gICAgfTtcbiAgICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgeCwgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoZiwgcyk7XG4gICAgICB2YXIgbWF0Y2gkMSA9IEN1cnJ5Ll8xKHgsIG1hdGNoLmFjY3VtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaCQxLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEobWF0Y2gudmFsdWUsIG1hdGNoJDEudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEFwcGx5ID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBhcHBseTogYXBwbHlcbiAgICB9O1xuICAgIHZhciBwdXJlID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgcHVyZTogcHVyZVxuICAgIH07XG4gICAgdmFyIFNMID0ge1xuICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZVxuICAgIH07XG4gICAgdmFyIG1hcCQxID0gZnVuY3Rpb24gKGYsIGssIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKGssIHMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWNjdW06IG1hdGNoLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEoZiwgbWF0Y2gudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEZ1bmN0b3IkMSA9IHtcbiAgICAgIG1hcDogbWFwJDFcbiAgICB9O1xuICAgIHZhciBhcHBseSQxID0gZnVuY3Rpb24gKGYsIHgsIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKHgsIHMpO1xuICAgICAgdmFyIG1hdGNoJDEgPSBDdXJyeS5fMShmLCBtYXRjaC5hY2N1bSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2gkMS5hY2N1bSxcbiAgICAgICAgICAgICAgdmFsdWU6IEN1cnJ5Ll8xKG1hdGNoJDEudmFsdWUsIG1hdGNoLnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBseSQxID0ge1xuICAgICAgbWFwOiBtYXAkMSxcbiAgICAgIGFwcGx5OiBhcHBseSQxXG4gICAgfTtcbiAgICB2YXIgcHVyZSQxID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSQxID0ge1xuICAgICAgbWFwOiBtYXAkMSxcbiAgICAgIGFwcGx5OiBhcHBseSQxLFxuICAgICAgcHVyZTogcHVyZSQxXG4gICAgfTtcbiAgICB2YXIgU1IgPSB7XG4gICAgICBGdW5jdG9yOiBGdW5jdG9yJDEsXG4gICAgICBBcHBseTogQXBwbHkkMSxcbiAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSQxXG4gICAgfTtcbiAgICB2YXIgVFNMID0gQ3VycnkuXzEoVCwgQXBwbGljYXRpdmUpO1xuICAgIHZhciBUU1IgPSBDdXJyeS5fMShULCBBcHBsaWNhdGl2ZSQxKTtcbiAgICB2YXIgbWFwX2FjY3VtX2xlZnQgPSBmdW5jdGlvbiAoZiwgcywgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhUU0wudHJhdmVyc2UsIChmdW5jdGlvbiAoYSwgcyRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoZiwgcyRwcmltZSwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSwgeHMsIHMpO1xuICAgIH07XG4gICAgdmFyIG1hcF9hY2N1bV9yaWdodCA9IGZ1bmN0aW9uIChmLCBzLCB4cykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKFRTUi50cmF2ZXJzZSwgKGZ1bmN0aW9uIChhLCBzJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihmLCBzJHByaW1lLCBhKTtcbiAgICAgICAgICAgICAgICAgIH0pLCB4cywgcyk7XG4gICAgfTtcbiAgICB2YXIgTUEgPSB7XG4gICAgICBTTDogU0wsXG4gICAgICBTUjogU1IsXG4gICAgICBUU0w6IFRTTCxcbiAgICAgIFRTUjogVFNSLFxuICAgICAgbWFwX2FjY3VtX2xlZnQ6IG1hcF9hY2N1bV9sZWZ0LFxuICAgICAgbWFwX2FjY3VtX3JpZ2h0OiBtYXBfYWNjdW1fcmlnaHRcbiAgICB9O1xuICAgIHZhciBzY2FuX2xlZnQgPSBmdW5jdGlvbiAoZiwgaW5pdCwgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhtYXBfYWNjdW1fbGVmdCwgKGZ1bmN0aW9uIChiLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiJHByaW1lID0gQ3VycnkuXzIoZiwgYiwgYSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW06IGIkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pLCBpbml0LCB4cykudmFsdWU7XG4gICAgfTtcbiAgICB2YXIgc2Nhbl9yaWdodCA9IGZ1bmN0aW9uIChmLCBpbml0LCB4cykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKG1hcF9hY2N1bV9yaWdodCwgKGZ1bmN0aW9uIChiLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiJHByaW1lID0gQ3VycnkuXzIoZiwgYSwgYik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW06IGIkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pLCBpbml0LCB4cykudmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgTUE6IE1BLFxuICAgICAgICAgICAgc2Nhbl9sZWZ0OiBzY2FuX2xlZnQsXG4gICAgICAgICAgICBzY2FuX3JpZ2h0OiBzY2FuX3JpZ2h0XG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBJbnRlcm5hbDogSW50ZXJuYWwsXG4gICAgICAgICAgU2NhbjogU2NhblxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBcHBseSQxKEEpIHtcbiAgdmFyIEkgPSBJbmZpeCRCc0Jhc3RldC5BcHBseShBKTtcbiAgdmFyIGFwcGx5X2ZpcnN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCwgYSksIGIpO1xuICB9O1xuICB2YXIgYXBwbHlfc2Vjb25kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGlkLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gIH07XG4gIHZhciBhcHBseV9ib3RoID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChhJHByaW1lLCBiJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSRwcmltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYSksIGIpO1xuICB9O1xuICB2YXIgbGlmdDIgPSBmdW5jdGlvbiAoZiwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYik7XG4gIH07XG4gIHZhciBsaWZ0MyA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKTtcbiAgfTtcbiAgdmFyIGxpZnQ0ID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyksIGQpO1xuICB9O1xuICB2YXIgbGlmdDUgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKSwgZSk7XG4gIH07XG4gIHZhciBJbmZpeCA9IHtcbiAgICAkbGVzcyRzdGFyOiBhcHBseV9maXJzdCxcbiAgICAkc3RhciRncmVhdDogYXBwbHlfc2Vjb25kXG4gIH07XG4gIHZhciBGdW5jdGlvbnMgPSB7XG4gICAgSTogSSxcbiAgICBhcHBseV9maXJzdDogYXBwbHlfZmlyc3QsXG4gICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQsXG4gICAgYXBwbHlfYm90aDogYXBwbHlfYm90aCxcbiAgICBsaWZ0MjogbGlmdDIsXG4gICAgbGlmdDM6IGxpZnQzLFxuICAgIGxpZnQ0OiBsaWZ0NCxcbiAgICBsaWZ0NTogbGlmdDUsXG4gICAgSW5maXg6IEluZml4XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3Rpb25zOiBGdW5jdGlvbnMsXG4gICAgICAgICAgJGxlc3Mkc3RhcjogYXBwbHlfZmlyc3QsXG4gICAgICAgICAgJHN0YXIkZ3JlYXQ6IGFwcGx5X3NlY29uZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNb25hZCQxKE0pIHtcbiAgdmFyIEZ1bmN0aW9ucyA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIEZ1bmN0aW9uczogRnVuY3Rpb25zLFxuICAgICAgICAgICRncmVhdCRlcSRncmVhdDogRnVuY3Rpb25zLiRncmVhdCRlcSRncmVhdCxcbiAgICAgICAgICAkbGVzcyRlcSRsZXNzOiBGdW5jdGlvbnMuJGxlc3MkZXEkbGVzc1xuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBWb2lkKEYpIHtcbiAgdmFyICQkdm9pZCA9IGZ1bmN0aW9uIChmYSkge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QodW5kZWZpbmVkLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgfSksIGZhKTtcbiAgfTtcbiAgdmFyIHZvaWRfcmlnaHQgPSBmdW5jdGlvbiAoYSwgZmIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGEsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9KSwgZmIpO1xuICB9O1xuICB2YXIgdm9pZF9sZWZ0ID0gZnVuY3Rpb24gKGZhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEYubWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChiLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgfSksIGZhKTtcbiAgfTtcbiAgdmFyIGZsYXAgPSBmdW5jdGlvbiAoZnMsIGEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGEpO1xuICAgICAgICAgICAgICAgIH0pLCBmcyk7XG4gIH07XG4gIHZhciBGdW5jdGlvbnMgPSB7XG4gICAgJCR2b2lkOiAkJHZvaWQsXG4gICAgdm9pZF9yaWdodDogdm9pZF9yaWdodCxcbiAgICB2b2lkX2xlZnQ6IHZvaWRfbGVmdCxcbiAgICBmbGFwOiBmbGFwXG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3Rpb25zOiBGdW5jdGlvbnMsXG4gICAgICAgICAgJCRncmVhdDogdm9pZF9sZWZ0LFxuICAgICAgICAgICRsZXNzJDogdm9pZF9yaWdodCxcbiAgICAgICAgICAkbGVzcyRhdCRncmVhdDogZmxhcFxuICAgICAgICB9O1xufVxuXG52YXIgSW5maXggPSB7XG4gIEFwcGx5OiBBcHBseSQxLFxuICBNb25hZDogTW9uYWQkMSxcbiAgVm9pZDogVm9pZFxufTtcblxudmFyICQkY29uc3QgPSBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0O1xuXG52YXIgZmxpcCA9IEZ1bmN0aW9uJEJzQmFzdGV0LmZsaXA7XG5cbmV4cG9ydCB7XG4gICQkY29uc3QgLFxuICBmbGlwICxcbiAgaWQgLFxuICAkbGVzcyRkb3QgLFxuICBNb25vaWQgLFxuICBGdW5jdG9yICxcbiAgQXBwbHkgLFxuICBBcHBseSRwcmltZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgTW9uYWQgLFxuICBGb2xkYWJsZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgSW5maXggLFxuICBcbn1cbi8qIEVuZG8tQnNCYXN0ZXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb25zJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9GdW5jdGlvbnMuYnMuanNcIjtcblxuZnVuY3Rpb24gQXBwbHlFeHRlbnNpb25zKEEpIHtcbiAgdmFyIEJzQXBwbHlFeHRlbnNpb25zID0gRnVuY3Rpb25zJEJzQmFzdGV0LkFwcGx5KEEpO1xuICB2YXIgbWFwMiA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQyO1xuICB2YXIgbWFwMyA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQzO1xuICB2YXIgbWFwNCA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ0O1xuICB2YXIgbWFwNSA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ1O1xuICB2YXIgdHVwbGUzID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgKGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIGZhLCBmYiwgZmMpO1xuICB9O1xuICB2YXIgdHVwbGU0ID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMsIGZkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll81KG1hcDQsIChmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCk7XG4gIH07XG4gIHZhciB0dXBsZTUgPSBmdW5jdGlvbiAoZmEsIGZiLCBmYywgZmQsIGZlKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIChmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCwgZmUpO1xuICB9O1xuICB2YXIgbWFwVHVwbGUyID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKG1hcDIsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTMgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTQgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzUobWFwNCwgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSwgcGFyYW1bM10pO1xuICB9O1xuICB2YXIgbWFwVHVwbGU1ID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdLCBwYXJhbVs0XSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgQnNBcHBseUV4dGVuc2lvbnM6IEJzQXBwbHlFeHRlbnNpb25zLFxuICAgICAgICAgIGFwcGx5Rmlyc3Q6IEJzQXBwbHlFeHRlbnNpb25zLmFwcGx5X2ZpcnN0LFxuICAgICAgICAgIGFwcGx5U2Vjb25kOiBCc0FwcGx5RXh0ZW5zaW9ucy5hcHBseV9zZWNvbmQsXG4gICAgICAgICAgbWFwMjogbWFwMixcbiAgICAgICAgICBtYXAzOiBtYXAzLFxuICAgICAgICAgIG1hcDQ6IG1hcDQsXG4gICAgICAgICAgbWFwNTogbWFwNSxcbiAgICAgICAgICB0dXBsZTI6IEJzQXBwbHlFeHRlbnNpb25zLmFwcGx5X2JvdGgsXG4gICAgICAgICAgdHVwbGUzOiB0dXBsZTMsXG4gICAgICAgICAgdHVwbGU0OiB0dXBsZTQsXG4gICAgICAgICAgdHVwbGU1OiB0dXBsZTUsXG4gICAgICAgICAgbWFwVHVwbGUyOiBtYXBUdXBsZTIsXG4gICAgICAgICAgbWFwVHVwbGUzOiBtYXBUdXBsZTMsXG4gICAgICAgICAgbWFwVHVwbGU0OiBtYXBUdXBsZTQsXG4gICAgICAgICAgbWFwVHVwbGU1OiBtYXBUdXBsZTVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbHlJbmZpeChBKSB7XG4gIHZhciBCc0FwcGx5RXh0ZW5zaW9ucyA9IEZ1bmN0aW9ucyRCc0Jhc3RldC5BcHBseShBKTtcbiAgdmFyIGFwcGx5Rmlyc3QgPSBCc0FwcGx5RXh0ZW5zaW9ucy5hcHBseV9maXJzdDtcbiAgdmFyIGFwcGx5U2Vjb25kID0gQnNBcHBseUV4dGVuc2lvbnMuYXBwbHlfc2Vjb25kO1xuICB2YXIgbWFwMiA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQyO1xuICB2YXIgbWFwMyA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQzO1xuICB2YXIgbWFwNCA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ0O1xuICB2YXIgbWFwNSA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ1O1xuICB2YXIgdHVwbGUzID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgKGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIGZhLCBmYiwgZmMpO1xuICB9O1xuICB2YXIgdHVwbGU0ID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMsIGZkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll81KG1hcDQsIChmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCk7XG4gIH07XG4gIHZhciB0dXBsZTUgPSBmdW5jdGlvbiAoZmEsIGZiLCBmYywgZmQsIGZlKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIChmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCwgZmUpO1xuICB9O1xuICB2YXIgbWFwVHVwbGUyID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKG1hcDIsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTMgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTQgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzUobWFwNCwgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSwgcGFyYW1bM10pO1xuICB9O1xuICB2YXIgbWFwVHVwbGU1ID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdLCBwYXJhbVs0XSk7XG4gIH07XG4gIHZhciBBcHBseUV4dGVuc2lvbnNfdHVwbGUyID0gQnNBcHBseUV4dGVuc2lvbnMuYXBwbHlfYm90aDtcbiAgdmFyIEFwcGx5RXh0ZW5zaW9ucyA9IHtcbiAgICBCc0FwcGx5RXh0ZW5zaW9uczogQnNBcHBseUV4dGVuc2lvbnMsXG4gICAgYXBwbHlGaXJzdDogYXBwbHlGaXJzdCxcbiAgICBhcHBseVNlY29uZDogYXBwbHlTZWNvbmQsXG4gICAgbWFwMjogbWFwMixcbiAgICBtYXAzOiBtYXAzLFxuICAgIG1hcDQ6IG1hcDQsXG4gICAgbWFwNTogbWFwNSxcbiAgICB0dXBsZTI6IEFwcGx5RXh0ZW5zaW9uc190dXBsZTIsXG4gICAgdHVwbGUzOiB0dXBsZTMsXG4gICAgdHVwbGU0OiB0dXBsZTQsXG4gICAgdHVwbGU1OiB0dXBsZTUsXG4gICAgbWFwVHVwbGUyOiBtYXBUdXBsZTIsXG4gICAgbWFwVHVwbGUzOiBtYXBUdXBsZTMsXG4gICAgbWFwVHVwbGU0OiBtYXBUdXBsZTQsXG4gICAgbWFwVHVwbGU1OiBtYXBUdXBsZTVcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBBcHBseUV4dGVuc2lvbnM6IEFwcGx5RXh0ZW5zaW9ucyxcbiAgICAgICAgICAkbGVzcyRzdGFyJGdyZWF0OiBBLmFwcGx5LFxuICAgICAgICAgICRsZXNzJHN0YXI6IGFwcGx5Rmlyc3QsXG4gICAgICAgICAgJHN0YXIkZ3JlYXQ6IGFwcGx5U2Vjb25kXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIEFwcGx5RXh0ZW5zaW9ucyAsXG4gIEFwcGx5SW5maXggLFxuICBcbn1cbi8qIEZ1bmN0aW9ucy1Cc0Jhc3RldCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0Z1bmN0aW9ucy5icy5qc1wiO1xuXG5mdW5jdGlvbiBNb25hZEV4dGVuc2lvbnMoTSkge1xuICB2YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuTW9uYWQoTSk7XG4gIHZhciBmbGF0TWFwID0gZnVuY3Rpb24gKGYsIG1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1hLCBmKTtcbiAgfTtcbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAobW1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1tYSwgKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IEJzTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZsYXRNYXA6IGZsYXRNYXAsXG4gICAgICAgICAgZmxhdHRlbjogZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogQnNNb25hZEV4dGVuc2lvbnMuY29tcG9zZV9rbGllc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogQnNNb25hZEV4dGVuc2lvbnMuY29tcG9zZV9rbGllc2xpX2ZsaXBwZWQsXG4gICAgICAgICAgbGlmdE0xOiBCc01vbmFkRXh0ZW5zaW9ucy5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IEJzTW9uYWRFeHRlbnNpb25zLndoZW5fLFxuICAgICAgICAgIHVubGVzczogQnNNb25hZEV4dGVuc2lvbnMudW5sZXNzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkSW5maXgoTSkge1xuICB2YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuTW9uYWQoTSk7XG4gIHZhciBmbGF0TWFwID0gZnVuY3Rpb24gKGYsIG1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1hLCBmKTtcbiAgfTtcbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAobW1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1tYSwgKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHZhciBjb21wb3NlS2xlaXNsaSA9IEJzTW9uYWRFeHRlbnNpb25zLmNvbXBvc2Vfa2xpZXNsaTtcbiAgdmFyIGZsaXBDb21wb3NlS2xlaXNsaSA9IEJzTW9uYWRFeHRlbnNpb25zLmNvbXBvc2Vfa2xpZXNsaV9mbGlwcGVkO1xuICB2YXIgTW9uYWRFeHRlbnNpb25zX2xpZnRNMSA9IEJzTW9uYWRFeHRlbnNpb25zLmxpZnRNMTtcbiAgdmFyIE1vbmFkRXh0ZW5zaW9uc193aGVuXyA9IEJzTW9uYWRFeHRlbnNpb25zLndoZW5fO1xuICB2YXIgTW9uYWRFeHRlbnNpb25zX3VubGVzcyA9IEJzTW9uYWRFeHRlbnNpb25zLnVubGVzcztcbiAgdmFyIE1vbmFkRXh0ZW5zaW9ucyA9IHtcbiAgICBCc01vbmFkRXh0ZW5zaW9uczogQnNNb25hZEV4dGVuc2lvbnMsXG4gICAgZmxhdE1hcDogZmxhdE1hcCxcbiAgICBmbGF0dGVuOiBmbGF0dGVuLFxuICAgIGNvbXBvc2VLbGVpc2xpOiBjb21wb3NlS2xlaXNsaSxcbiAgICBmbGlwQ29tcG9zZUtsZWlzbGk6IGZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICBsaWZ0TTE6IE1vbmFkRXh0ZW5zaW9uc19saWZ0TTEsXG4gICAgd2hlbl86IE1vbmFkRXh0ZW5zaW9uc193aGVuXyxcbiAgICB1bmxlc3M6IE1vbmFkRXh0ZW5zaW9uc191bmxlc3NcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBNb25hZEV4dGVuc2lvbnM6IE1vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICAkZ3JlYXQkZ3JlYXQkZXE6IE0uZmxhdF9tYXAsXG4gICAgICAgICAgJGVxJGxlc3MkbGVzczogZmxhdE1hcCxcbiAgICAgICAgICAkZ3JlYXQkZXEkZ3JlYXQ6IGNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgICRsZXNzJGVxJGxlc3M6IGZsaXBDb21wb3NlS2xlaXNsaVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBNb25hZEV4dGVuc2lvbnMgLFxuICBNb25hZEluZml4ICxcbiAgXG59XG4vKiBGdW5jdGlvbnMtQnNCYXN0ZXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb25zJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9GdW5jdGlvbnMuYnMuanNcIjtcblxuZnVuY3Rpb24gRnVuY3RvckV4dGVuc2lvbnMoRikge1xuICB2YXIgQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IEZ1bmN0aW9ucyRCc0Jhc3RldC5GdW5jdG9yKEYpO1xuICB2YXIgZmxpcE1hcCA9IGZ1bmN0aW9uIChmYSwgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgZiwgZmEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEJzRnVuY3RvckV4dGVuc2lvbnM6IEJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogZmxpcE1hcCxcbiAgICAgICAgICAkJHZvaWQ6IEJzRnVuY3RvckV4dGVuc2lvbnMuJCR2b2lkLFxuICAgICAgICAgIHZvaWRSaWdodDogQnNGdW5jdG9yRXh0ZW5zaW9ucy52b2lkX3JpZ2h0LFxuICAgICAgICAgIHZvaWRMZWZ0OiBCc0Z1bmN0b3JFeHRlbnNpb25zLnZvaWRfbGVmdCxcbiAgICAgICAgICBmbGFwOiBCc0Z1bmN0b3JFeHRlbnNpb25zLmZsYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRnVuY3RvckluZml4KEYpIHtcbiAgdmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRnVuY3RvcihGKTtcbiAgdmFyIGZsaXBNYXAgPSBmdW5jdGlvbiAoZmEsIGYpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIGYsIGZhKTtcbiAgfTtcbiAgdmFyIHZvaWRSaWdodCA9IEJzRnVuY3RvckV4dGVuc2lvbnMudm9pZF9yaWdodDtcbiAgdmFyIHZvaWRMZWZ0ID0gQnNGdW5jdG9yRXh0ZW5zaW9ucy52b2lkX2xlZnQ7XG4gIHZhciBmbGFwID0gQnNGdW5jdG9yRXh0ZW5zaW9ucy5mbGFwO1xuICB2YXIgRnVuY3RvckV4dGVuc2lvbnNfdm9pZCA9IEJzRnVuY3RvckV4dGVuc2lvbnMuJCR2b2lkO1xuICB2YXIgRnVuY3RvckV4dGVuc2lvbnMgPSB7XG4gICAgQnNGdW5jdG9yRXh0ZW5zaW9uczogQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICBmbGlwTWFwOiBmbGlwTWFwLFxuICAgICQkdm9pZDogRnVuY3RvckV4dGVuc2lvbnNfdm9pZCxcbiAgICB2b2lkUmlnaHQ6IHZvaWRSaWdodCxcbiAgICB2b2lkTGVmdDogdm9pZExlZnQsXG4gICAgZmxhcDogZmxhcFxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEZ1bmN0b3JFeHRlbnNpb25zOiBGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICAgICAgICAkbGVzcyQkZ3JlYXQ6IEYubWFwLFxuICAgICAgICAgICRsZXNzJGhhc2gkZ3JlYXQ6IGZsaXBNYXAsXG4gICAgICAgICAgJGxlc3MkOiB2b2lkUmlnaHQsXG4gICAgICAgICAgJCRncmVhdDogdm9pZExlZnQsXG4gICAgICAgICAgJGxlc3MkYXQkZ3JlYXQ6IGZsYXBcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgRnVuY3RvckV4dGVuc2lvbnMgLFxuICBGdW5jdG9ySW5maXggLFxuICBcbn1cbi8qIEZ1bmN0aW9ucy1Cc0Jhc3RldCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0Z1bmN0aW9ucy5icy5qc1wiO1xuXG5mdW5jdGlvbiBBcHBsaWNhdGl2ZUV4dGVuc2lvbnMoQSkge1xuICB2YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuQXBwbGljYXRpdmUoQSk7XG4gIHZhciBhbGwgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLmFwcGx5LCBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uIChyZXN1bHQsIHJlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBwYXJhbVswXSksIGFsbChwYXJhbVsxXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCAvKiBbXSAqLzApO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgbGlmdEExOiBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucy5saWZ0QTEsXG4gICAgICAgICAgd2hlbl86IEJzQXBwbGljYXRpdmVFeHRlbnNpb25zLndoZW5fLFxuICAgICAgICAgIHVubGVzczogQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMudW5sZXNzLFxuICAgICAgICAgIGFsbDogYWxsXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIEFwcGxpY2F0aXZlRXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogRnVuY3Rpb25zLUJzQmFzdGV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X01hcFN0cmluZyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X01hcFN0cmluZy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuYnMuanNcIjtcblxuZnVuY3Rpb24gaWRlbnRpdHkoYSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gJCRjb25zdChhLCBwYXJhbSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gZmxpcChmLCBiLCBhKSB7XG4gIHJldHVybiBDdXJyeS5fMihmLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZShmLCBnLCBhKSB7XG4gIHJldHVybiBDdXJyeS5fMShmLCBDdXJyeS5fMShnLCBhKSk7XG59XG5cbmZ1bmN0aW9uIGZsaXBDb21wb3NlKGYsIGcsIGEpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGcsIEN1cnJ5Ll8xKGYsIGEpKTtcbn1cblxuZnVuY3Rpb24gY3VycnkyKGYsIGEsIGIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3VycnkzKGYsIGEsIGIsIGMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBjXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3Vycnk0KGYsIGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICBkXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3Vycnk1KGYsIGEsIGIsIGMsIGQsIGUpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICBlXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdW5jdXJyeTIoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIHVuY3VycnkzKGYsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhmLCBwYXJhbVswXSwgcGFyYW1bMV0sIHBhcmFtWzJdKTtcbn1cblxuZnVuY3Rpb24gdW5jdXJyeTQoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll80KGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdKTtcbn1cblxuZnVuY3Rpb24gdW5jdXJyeTUoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll81KGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdLCBwYXJhbVs0XSk7XG59XG5cbmZ1bmN0aW9uIG1hcChhVG9CLCByVG9BLCByKSB7XG4gIHJldHVybiBDdXJyeS5fMShhVG9CLCBDdXJyeS5fMShyVG9BLCByKSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5KHJUb0FUb0IsIHJUb0EsIHIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKHJUb0FUb0IsIHIsIEN1cnJ5Ll8xKHJUb0EsIHIpKTtcbn1cblxuZnVuY3Rpb24gcHVyZShhLCBwYXJhbSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gYmluZChyVG9BLCBhclRvQiwgcikge1xuICByZXR1cm4gQ3VycnkuXzIoYXJUb0IsIEN1cnJ5Ll8xKHJUb0EsIHIpLCByKTtcbn1cblxuZnVuY3Rpb24gZmxhdE1hcChmLCBmYSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIEN1cnJ5Ll8xKGZhLCBwYXJhbSksIHBhcmFtKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZTAoZikge1xuICB2YXIgY2FjaGVkID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSBjYWNoZWQuY29udGVudHM7XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQkMSA9IEN1cnJ5Ll8xKGYsIHVuZGVmaW5lZCk7XG4gICAgICBjYWNoZWQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCQxKTtcbiAgICAgIHJldHVybiByZXN1bHQkMTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZTEobWFrZUtleSwgZikge1xuICB2YXIgY2FjaGUgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgdmFyIGtleSA9IEN1cnJ5Ll8xKG1ha2VLZXksIGlucHV0KTtcbiAgICAgIHZhciByZXN1bHRPcHQgPSBCZWx0X01hcFN0cmluZy5nZXQoY2FjaGUuY29udGVudHMsIGtleSk7XG4gICAgICBpZiAocmVzdWx0T3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ocmVzdWx0T3B0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBDdXJyeS5fMShmLCBpbnB1dCk7XG4gICAgICBjYWNoZS5jb250ZW50cyA9IEJlbHRfTWFwU3RyaW5nLnNldChjYWNoZS5jb250ZW50cywga2V5LCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYmVmb3JlKHRpbWVzLCBmKSB7XG4gIHZhciBjYWxsQ291bnQgPSB7XG4gICAgY29udGVudHM6IDBcbiAgfTtcbiAgdmFyIGxhc3RSZXN1bHRPcHQgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGxhc3RSZXN1bHQgPSBsYXN0UmVzdWx0T3B0LmNvbnRlbnRzO1xuICAgICAgaWYgKGxhc3RSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoY2FsbENvdW50LmNvbnRlbnRzID49IHRpbWVzKSB7XG4gICAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obGFzdFJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IEN1cnJ5Ll8xKGYsIHVuZGVmaW5lZCk7XG4gICAgICAgIGxhc3RSZXN1bHRPcHQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCk7XG4gICAgICAgIGNhbGxDb3VudC5jb250ZW50cyA9IGNhbGxDb3VudC5jb250ZW50cyArIDEgfCAwO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCQxID0gQ3VycnkuXzEoZiwgdW5kZWZpbmVkKTtcbiAgICAgIGxhc3RSZXN1bHRPcHQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCQxKTtcbiAgICAgIGNhbGxDb3VudC5jb250ZW50cyA9IGNhbGxDb3VudC5jb250ZW50cyArIDEgfCAwO1xuICAgICAgcmV0dXJuIHJlc3VsdCQxO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZnRlcih0aW1lcywgZikge1xuICB2YXIgY2FsbENvdW50ID0ge1xuICAgIGNvbnRlbnRzOiAwXG4gIH07XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBpZiAoY2FsbENvdW50LmNvbnRlbnRzIDwgdGltZXMpIHtcbiAgICAgICAgY2FsbENvdW50LmNvbnRlbnRzID0gY2FsbENvdW50LmNvbnRlbnRzICsgMSB8IDA7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShDdXJyeS5fMShmLCB1bmRlZmluZWQpKTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25jZShmKSB7XG4gIHZhciBsYXN0UmVzdWx0T3B0ID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBsYXN0UmVzdWx0ID0gbGFzdFJlc3VsdE9wdC5jb250ZW50cztcbiAgICAgIGlmIChsYXN0UmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obGFzdFJlc3VsdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gQ3VycnkuXzEoZiwgdW5kZWZpbmVkKTtcbiAgICAgIGxhc3RSZXN1bHRPcHQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB3cmFwKGJlZm9yZSwgYWZ0ZXIsIGYsIGlucHV0KSB7XG4gIHJldHVybiBDdXJyeS5fMShhZnRlciwgQ3VycnkuXzEoZiwgQ3VycnkuXzEoYmVmb3JlLCBpbnB1dCkpKTtcbn1cblxuZnVuY3Rpb24gbmVnYXRlKGYsIGEpIHtcbiAgcmV0dXJuICFDdXJyeS5fMShmLCBhKTtcbn1cblxudmFyIEluZml4ID0ge1xuICAkbGVzcyRsZXNzOiBjb21wb3NlLFxuICAkZ3JlYXQkZ3JlYXQ6IGZsaXBDb21wb3NlXG59O1xuXG5mdW5jdGlvbiBXaXRoQXJndW1lbnQoUikge1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckV4dGVuc2lvbnMoRnVuY3Rvcik7XG4gIHZhciBBcHBseSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHlcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5RXh0ZW5zaW9ucyhBcHBseSk7XG4gIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlKTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kXG4gIH07XG4gIHZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuICB2YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9ySW5maXgoRnVuY3Rvcik7XG4gIHZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUluZml4KEFwcGx5KTtcbiAgdmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkSW5maXgoTW9uYWQpO1xuICB2YXIgSW5maXhfRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuRnVuY3RvckV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlJDQuJGxlc3MkJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUkNC4kbGVzcyRoYXNoJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZG9sbGFyID0gaW5jbHVkZSQ0LiRsZXNzJDtcbiAgdmFyIEluZml4XyQkZ3JlYXQgPSBpbmNsdWRlJDQuJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGF0JGdyZWF0ID0gaW5jbHVkZSQ0LiRsZXNzJGF0JGdyZWF0O1xuICB2YXIgSW5maXhfQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkFwcGx5RXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDUuJGxlc3Mkc3RhciRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIgPSBpbmNsdWRlJDUuJGxlc3Mkc3RhcjtcbiAgdmFyIEluZml4XyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQ1LiRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ2Lk1vbmFkRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUkNi4kZ3JlYXQkZ3JlYXQkZXE7XG4gIHZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZSQ2LiRlcSRsZXNzJGxlc3M7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlJDYuJGdyZWF0JGVxJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUkNi4kbGVzcyRlcSRsZXNzO1xuICB2YXIgSW5maXggPSB7XG4gICAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICAgJCRncmVhdDogSW5maXhfJCRncmVhdCxcbiAgICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAgICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgICBNb25hZEV4dGVuc2lvbnM6IEluZml4X01vbmFkRXh0ZW5zaW9ucyxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICAgJGxlc3MkbGVzczogY29tcG9zZSxcbiAgICAkZ3JlYXQkZ3JlYXQ6IGZsaXBDb21wb3NlXG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBpbmNsdWRlLkJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogaW5jbHVkZS5mbGlwTWFwLFxuICAgICAgICAgICQkdm9pZDogaW5jbHVkZS4kJHZvaWQsXG4gICAgICAgICAgdm9pZFJpZ2h0OiBpbmNsdWRlLnZvaWRSaWdodCxcbiAgICAgICAgICB2b2lkTGVmdDogaW5jbHVkZS52b2lkTGVmdCxcbiAgICAgICAgICBmbGFwOiBpbmNsdWRlLmZsYXAsXG4gICAgICAgICAgQXBwbHk6IEFwcGx5LFxuICAgICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgICBCc0FwcGx5RXh0ZW5zaW9uczogaW5jbHVkZSQxLkJzQXBwbHlFeHRlbnNpb25zLFxuICAgICAgICAgIGFwcGx5Rmlyc3Q6IGluY2x1ZGUkMS5hcHBseUZpcnN0LFxuICAgICAgICAgIGFwcGx5U2Vjb25kOiBpbmNsdWRlJDEuYXBwbHlTZWNvbmQsXG4gICAgICAgICAgbWFwMjogaW5jbHVkZSQxLm1hcDIsXG4gICAgICAgICAgbWFwMzogaW5jbHVkZSQxLm1hcDMsXG4gICAgICAgICAgbWFwNDogaW5jbHVkZSQxLm1hcDQsXG4gICAgICAgICAgbWFwNTogaW5jbHVkZSQxLm1hcDUsXG4gICAgICAgICAgdHVwbGUyOiBpbmNsdWRlJDEudHVwbGUyLFxuICAgICAgICAgIHR1cGxlMzogaW5jbHVkZSQxLnR1cGxlMyxcbiAgICAgICAgICB0dXBsZTQ6IGluY2x1ZGUkMS50dXBsZTQsXG4gICAgICAgICAgdHVwbGU1OiBpbmNsdWRlJDEudHVwbGU1LFxuICAgICAgICAgIG1hcFR1cGxlMjogaW5jbHVkZSQxLm1hcFR1cGxlMixcbiAgICAgICAgICBtYXBUdXBsZTM6IGluY2x1ZGUkMS5tYXBUdXBsZTMsXG4gICAgICAgICAgbWFwVHVwbGU0OiBpbmNsdWRlJDEubWFwVHVwbGU0LFxuICAgICAgICAgIG1hcFR1cGxlNTogaW5jbHVkZSQxLm1hcFR1cGxlNSxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgcHVyZTogcHVyZSxcbiAgICAgICAgICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogaW5jbHVkZSQyLkJzQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgIGxpZnRBMTogaW5jbHVkZSQyLmxpZnRBMSxcbiAgICAgICAgICBhbGw6IGluY2x1ZGUkMi5hbGwsXG4gICAgICAgICAgTW9uYWQ6IE1vbmFkLFxuICAgICAgICAgIGJpbmQ6IGJpbmQsXG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IGluY2x1ZGUkMy5Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGF0TWFwOiBpbmNsdWRlJDMuZmxhdE1hcCxcbiAgICAgICAgICBmbGF0dGVuOiBpbmNsdWRlJDMuZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogaW5jbHVkZSQzLmNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogaW5jbHVkZSQzLmZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBsaWZ0TTE6IGluY2x1ZGUkMy5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IGluY2x1ZGUkMy53aGVuXyxcbiAgICAgICAgICB1bmxlc3M6IGluY2x1ZGUkMy51bmxlc3MsXG4gICAgICAgICAgSW5maXg6IEluZml4XG4gICAgICAgIH07XG59XG5cbnZhciBpZCA9IGlkZW50aXR5O1xuXG52YXIgYW5kVGhlbiA9IGZsaXBDb21wb3NlO1xuXG5leHBvcnQge1xuICBpZGVudGl0eSAsXG4gIGlkICxcbiAgJCRjb25zdCAsXG4gIGZsaXAgLFxuICBjb21wb3NlICxcbiAgZmxpcENvbXBvc2UgLFxuICBhbmRUaGVuICxcbiAgY3VycnkyICxcbiAgY3VycnkzICxcbiAgY3Vycnk0ICxcbiAgY3Vycnk1ICxcbiAgdW5jdXJyeTIgLFxuICB1bmN1cnJ5MyAsXG4gIHVuY3Vycnk0ICxcbiAgdW5jdXJyeTUgLFxuICBtYXAgLFxuICBhcHBseSAsXG4gIHB1cmUgLFxuICBiaW5kICxcbiAgZmxhdE1hcCAsXG4gIG1lbW9pemUwICxcbiAgbWVtb2l6ZTEgLFxuICBiZWZvcmUgLFxuICBhZnRlciAsXG4gIG9uY2UgLFxuICB3cmFwICxcbiAgbmVnYXRlICxcbiAgSW5maXggLFxuICBXaXRoQXJndW1lbnQgLFxuICBcbn1cbi8qIFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcIi4vY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfQXJyYXkgZnJvbSBcIi4vYmVsdF9BcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfU29ydEFycmF5IGZyb20gXCIuL2JlbHRfU29ydEFycmF5LmpzXCI7XG5cbmZ1bmN0aW9uIGhlYWQoeCkge1xuICBpZiAoeCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHhbMF0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBoZWFkRXhuKHgpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geFswXTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJoZWFkRXhuXCIpO1xufVxuXG5mdW5jdGlvbiB0YWlsKHgpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geFsxXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gdGFpbEV4bih4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIHhbMV07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwidGFpbEV4blwiKTtcbn1cblxuZnVuY3Rpb24gYWRkKHhzLCB4KSB7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICB4LFxuICAgICAgICAgIHhzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGdldCh4LCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF94ID0geDtcbiAgICB2YXIgX24gPSBuO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBuJDEgPSBfbjtcbiAgICAgIHZhciB4JDEgPSBfeDtcbiAgICAgIGlmICgheCQxKSB7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9XG4gICAgICBpZiAobiQxID09PSAwKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHgkMVswXSk7XG4gICAgICB9XG4gICAgICBfbiA9IG4kMSAtIDEgfCAwO1xuICAgICAgX3ggPSB4JDFbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFeG4oeCwgbikge1xuICBpZiAobiA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRFeG5cIik7XG4gIH1cbiAgdmFyIF94ID0geDtcbiAgdmFyIF9uID0gbjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuJDEgPSBfbjtcbiAgICB2YXIgeCQxID0gX3g7XG4gICAgaWYgKHgkMSkge1xuICAgICAgaWYgKG4kMSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geCQxWzBdO1xuICAgICAgfVxuICAgICAgX24gPSBuJDEgLSAxIHwgMDtcbiAgICAgIF94ID0geCQxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRFeG5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbkF1eChwLCBfY2VsbCwgX3ByZWNYLCBfcHJlY1kpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjWSA9IF9wcmVjWTtcbiAgICB2YXIgcHJlY1ggPSBfcHJlY1g7XG4gICAgdmFyIGNlbGwgPSBfY2VsbDtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB0ID0gY2VsbFsxXTtcbiAgICB2YXIgaCA9IGNlbGxbMF07XG4gICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgIGgsXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIGlmIChwKGgpKSB7XG4gICAgICBwcmVjWFsxXSA9IG5leHQ7XG4gICAgICBfcHJlY1ggPSBuZXh0O1xuICAgICAgX2NlbGwgPSB0O1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBwcmVjWVsxXSA9IG5leHQ7XG4gICAgX3ByZWNZID0gbmV4dDtcbiAgICBfY2VsbCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzcGxpdEF1eChfY2VsbCwgX3ByZWNYLCBfcHJlY1kpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjWSA9IF9wcmVjWTtcbiAgICB2YXIgcHJlY1ggPSBfcHJlY1g7XG4gICAgdmFyIGNlbGwgPSBfY2VsbDtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IGNlbGxbMF07XG4gICAgdmFyIG5leHRBID0gLyogOjogKi9bXG4gICAgICBtYXRjaFswXSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgdmFyIG5leHRCID0gLyogOjogKi9bXG4gICAgICBtYXRjaFsxXSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1hbMV0gPSBuZXh0QTtcbiAgICBwcmVjWVsxXSA9IG5leHRCO1xuICAgIF9wcmVjWSA9IG5leHRCO1xuICAgIF9wcmVjWCA9IG5leHRBO1xuICAgIF9jZWxsID0gY2VsbFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhDb250KF9jZWxsWCwgX3ByZWMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiBwcmVjO1xuICAgIH1cbiAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgY2VsbFhbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHByZWNbMV0gPSBuZXh0O1xuICAgIF9wcmVjID0gbmV4dDtcbiAgICBfY2VsbFggPSBjZWxsWFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRGaWx0ZXIoZiwgX2NlbGxYLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHQgPSBjZWxsWFsxXTtcbiAgICB2YXIgaCA9IGNlbGxYWzBdO1xuICAgIGlmIChmKGgpKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICBoLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIF9jZWxsWCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0aEZpbHRlckluZGV4KGYsIF9jZWxsWCwgX3ByZWMsIF9pKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB0ID0gY2VsbFhbMV07XG4gICAgdmFyIGggPSBjZWxsWFswXTtcbiAgICBpZiAoZihoLCBpKSkge1xuICAgICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgICAgaCxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIF9jZWxsWCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0RmlsdGVyTWFwKGYsIF9jZWxsWCwgX3ByZWMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB0ID0gY2VsbFhbMV07XG4gICAgdmFyIGggPSBmKGNlbGxYWzBdKTtcbiAgICBpZiAoaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGgpLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIF9jZWxsWCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZW1vdmVBc3NvY0F1eFdpdGhNYXAoX2NlbGxYLCB4LCBfcHJlYywgZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdCA9IGNlbGxYWzFdO1xuICAgIHZhciBoID0gY2VsbFhbMF07XG4gICAgaWYgKGYoaFswXSwgeCkpIHtcbiAgICAgIHByZWNbMV0gPSB0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBoLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gbmV4dDtcbiAgICBfcHJlYyA9IG5leHQ7XG4gICAgX2NlbGxYID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldEFzc29jQXV4V2l0aE1hcChfY2VsbFgsIHgsIGssIF9wcmVjLCBlcSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdCA9IGNlbGxYWzFdO1xuICAgIHZhciBoID0gY2VsbFhbMF07XG4gICAgaWYgKGVxKGhbMF0sIHgpKSB7XG4gICAgICBwcmVjWzFdID0gLyogOjogKi9bXG4gICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgIHgsXG4gICAgICAgICAga1xuICAgICAgICBdLFxuICAgICAgICB0XG4gICAgICBdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBoLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gbmV4dDtcbiAgICBfcHJlYyA9IG5leHQ7XG4gICAgX2NlbGxYID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRoTWFwKF9jZWxsWCwgX3ByZWMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBmKGNlbGxYWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgX3ByZWMgPSBuZXh0O1xuICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gemlwQXV4KF9jZWxsWCwgX2NlbGxZLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFkgPSBfY2VsbFk7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmICghY2VsbFkpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgY2VsbFhbMF0sXG4gICAgICAgIGNlbGxZWzBdXG4gICAgICBdLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gbmV4dDtcbiAgICBfcHJlYyA9IG5leHQ7XG4gICAgX2NlbGxZID0gY2VsbFlbMV07XG4gICAgX2NlbGxYID0gY2VsbFhbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0aE1hcDIoZiwgX2NlbGxYLCBfY2VsbFksIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWSA9IF9jZWxsWTtcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKCFjZWxsWSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgIGYoY2VsbFhbMF0sIGNlbGxZWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgX3ByZWMgPSBuZXh0O1xuICAgIF9jZWxsWSA9IGNlbGxZWzFdO1xuICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weUF1eFdpdGhNYXBJKGYsIF9pLCBfY2VsbFgsIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWCA9IF9jZWxsWDtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBmKGksIGNlbGxYWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgX3ByZWMgPSBuZXh0O1xuICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZUF1eChfbiwgX2NlbGwsIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsID0gX2NlbGw7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghY2VsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2VsbCQxID0gLyogOjogKi9bXG4gICAgICBjZWxsWzBdLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gY2VsbCQxO1xuICAgIF9wcmVjID0gY2VsbCQxO1xuICAgIF9jZWxsID0gY2VsbFsxXTtcbiAgICBfbiA9IG4gLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXRBdXgoX24sIF9jZWxsLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbCA9IF9jZWxsO1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBjZWxsJDEgPSAvKiA6OiAqL1tcbiAgICAgIGNlbGxbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHByZWNbMV0gPSBjZWxsJDE7XG4gICAgX3ByZWMgPSBjZWxsJDE7XG4gICAgX2NlbGwgPSBjZWxsWzFdO1xuICAgIF9uID0gbiAtIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZShsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBpZiAobiA9PT0gMCkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgaWYgKCFsc3QpIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgbHN0WzBdLFxuICAgIC8qIFtdICovMFxuICBdO1xuICB2YXIgaGFzID0gdGFrZUF1eChuIC0gMSB8IDAsIGxzdFsxXSwgY2VsbCk7XG4gIGlmIChoYXMpIHtcbiAgICByZXR1cm4gY2VsbDtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZHJvcChsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2wgPSBsc3Q7XG4gICAgdmFyIF9uID0gbjtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgbiQxID0gX247XG4gICAgICB2YXIgbCA9IF9sO1xuICAgICAgaWYgKG4kMSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH1cbiAgICAgIGlmICghbCkge1xuICAgICAgICByZXR1cm4gO1xuICAgICAgfVxuICAgICAgX24gPSBuJDEgLSAxIHwgMDtcbiAgICAgIF9sID0gbFsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXQobHN0LCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgaWYgKG4gPT09IDApIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAvKiBbXSAqLzAsXG4gICAgICAgICAgICBsc3RcbiAgICAgICAgICBdO1xuICB9XG4gIGlmICghbHN0KSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIGxzdFswXSxcbiAgICAvKiBbXSAqLzBcbiAgXTtcbiAgdmFyIHJlc3QgPSBzcGxpdEF0QXV4KG4gLSAxIHwgMCwgbHN0WzFdLCBjZWxsKTtcbiAgaWYgKHJlc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgICByZXN0XG4gICAgICAgICAgXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gY29uY2F0KHhzLCB5cykge1xuICBpZiAoIXhzKSB7XG4gICAgcmV0dXJuIHlzO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgeHNbMF0sXG4gICAgLyogW10gKi8wXG4gIF07XG4gIGNvcHlBdXhDb250KHhzWzFdLCBjZWxsKVsxXSA9IHlzO1xuICByZXR1cm4gY2VsbDtcbn1cblxuZnVuY3Rpb24gbWFwVSh4cywgZikge1xuICBpZiAoIXhzKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIGYoeHNbMF0pLFxuICAgIC8qIFtdICovMFxuICBdO1xuICBjb3B5QXV4V2l0aE1hcCh4c1sxXSwgY2VsbCwgZik7XG4gIHJldHVybiBjZWxsO1xufVxuXG5mdW5jdGlvbiBtYXAoeHMsIGYpIHtcbiAgcmV0dXJuIG1hcFUoeHMsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHppcEJ5VShsMSwgbDIsIGYpIHtcbiAgaWYgKCFsMSkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgaWYgKCFsMikge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdmFyIGNlbGwgPSAvKiA6OiAqL1tcbiAgICBmKGwxWzBdLCBsMlswXSksXG4gICAgLyogW10gKi8wXG4gIF07XG4gIGNvcHlBdXhXaXRoTWFwMihmLCBsMVsxXSwgbDJbMV0sIGNlbGwpO1xuICByZXR1cm4gY2VsbDtcbn1cblxuZnVuY3Rpb24gemlwQnkobDEsIGwyLCBmKSB7XG4gIHJldHVybiB6aXBCeVUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXhVKHhzLCBmKSB7XG4gIGlmICgheHMpIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgZigwLCB4c1swXSksXG4gICAgLyogW10gKi8wXG4gIF07XG4gIGNvcHlBdXhXaXRoTWFwSShmLCAxLCB4c1sxXSwgY2VsbCk7XG4gIHJldHVybiBjZWxsO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXgoeHMsIGYpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleFUoeHMsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeVUobiwgZikge1xuICBpZiAobiA8PSAwKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgaGVhZFggPSAvKiA6OiAqL1tcbiAgICBmKDApLFxuICAgIC8qIFtdICovMFxuICBdO1xuICB2YXIgY3VyID0gaGVhZFg7XG4gIHZhciBpID0gMTtcbiAgd2hpbGUoaSA8IG4pIHtcbiAgICB2YXIgdiA9IC8qIDo6ICovW1xuICAgICAgZihpKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgY3VyWzFdID0gdjtcbiAgICBjdXIgPSB2O1xuICAgIGkgPSBpICsgMSB8IDA7XG4gIH07XG4gIHJldHVybiBoZWFkWDtcbn1cblxuZnVuY3Rpb24gbWFrZUJ5KG4sIGYpIHtcbiAgcmV0dXJuIG1ha2VCeVUobiwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFrZShuLCB2KSB7XG4gIGlmIChuIDw9IDApIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBoZWFkWCA9IC8qIDo6ICovW1xuICAgIHYsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciBjdXIgPSBoZWFkWDtcbiAgdmFyIGkgPSAxO1xuICB3aGlsZShpIDwgbikge1xuICAgIHZhciB2JDEgPSAvKiA6OiAqL1tcbiAgICAgIHYsXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIGN1clsxXSA9IHYkMTtcbiAgICBjdXIgPSB2JDE7XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgcmV0dXJuIGhlYWRYO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgoeHMpIHtcbiAgdmFyIF94ID0geHM7XG4gIHZhciBfYWNjID0gMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciB4ID0gX3g7XG4gICAgaWYgKCF4KSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBfYWNjID0gYWNjICsgMSB8IDA7XG4gICAgX3ggPSB4WzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbEF1eChhcnIsIF9pLCBfeCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHggPSBfeDtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICgheCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgYXJyW2ldID0geFswXTtcbiAgICBfeCA9IHhbMV07XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoYSkge1xuICB2YXIgX2kgPSBhLmxlbmd0aCAtIDEgfCAwO1xuICB2YXIgX3JlcyA9IC8qIFtdICovMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciByZXMgPSBfcmVzO1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfcmVzID0gLyogOjogKi9bXG4gICAgICBhW2ldLFxuICAgICAgcmVzXG4gICAgXTtcbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoeCkge1xuICB2YXIgbGVuID0gbGVuZ3RoKHgpO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGxlbik7XG4gIGZpbGxBdXgoYXJyLCAwLCB4KTtcbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZSh4cykge1xuICB2YXIgdiA9IHRvQXJyYXkoeHMpO1xuICBCZWx0X0FycmF5LnNodWZmbGVJblBsYWNlKHYpO1xuICByZXR1cm4gZnJvbUFycmF5KHYpO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlQ29uY2F0KF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiBsMjtcbiAgICB9XG4gICAgX2wyID0gLyogOjogKi9bXG4gICAgICBsMVswXSxcbiAgICAgIGwyXG4gICAgXTtcbiAgICBfbDEgPSBsMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJldmVyc2UobCkge1xuICByZXR1cm4gcmV2ZXJzZUNvbmNhdChsLCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuQXV4KF9wcmVjLCBfeHMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHByZWNbMV0gPSAvKiBbXSAqLzA7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBfcHJlYyA9IGNvcHlBdXhDb250KHhzWzBdLCBwcmVjKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oX3hzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0geHNbMF07XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgZmxhdHRlbkF1eChjb3B5QXV4Q29udChtYXRjaFsxXSwgY2VsbCksIHhzWzFdKTtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdE1hbnkoeHMpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMSkge1xuICAgIHJldHVybiB4c1swXTtcbiAgfVxuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgbGVuJDEgPSB4cy5sZW5ndGg7XG4gIHZhciB2ID0geHNbbGVuJDEgLSAxIHwgMF07XG4gIGZvcih2YXIgaSA9IGxlbiQxIC0gMiB8IDA7IGkgPj0gMDsgLS1pKXtcbiAgICB2ID0gY29uY2F0KHhzW2ldLCB2KTtcbiAgfVxuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZVUobCwgZikge1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfeHMgPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF94cyA9IHhzWzFdO1xuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICBmKHhzWzBdKSxcbiAgICAgIGFjY3VcbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZShsLCBmKSB7XG4gIHJldHVybiBtYXBSZXZlcnNlVShsLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoVShfeHMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBmKHhzWzBdKTtcbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hVKHhzLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoV2l0aEluZGV4VShsLCBmKSB7XG4gIHZhciBfeHMgPSBsO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgZihpLCB4c1swXSk7XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgX3hzID0geHNbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoV2l0aEluZGV4KGwsIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hXaXRoSW5kZXhVKGwsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVUoX2wsIF9hY2N1LCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBsID0gX2w7XG4gICAgaWYgKCFsKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgX2FjY3UgPSBmKGFjY3UsIGxbMF0pO1xuICAgIF9sID0gbFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShsLCBhY2N1LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKGwsIGFjY3UsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2VVbnNhZmVVKGwsIGFjY3UsIGYpIHtcbiAgaWYgKGwpIHtcbiAgICByZXR1cm4gZihyZWR1Y2VSZXZlcnNlVW5zYWZlVShsWzFdLCBhY2N1LCBmKSwgbFswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY3U7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZVUobCwgYWNjLCBmKSB7XG4gIHZhciBsZW4gPSBsZW5ndGgobCk7XG4gIGlmIChsZW4gPCAxMDAwKSB7XG4gICAgcmV0dXJuIHJlZHVjZVJldmVyc2VVbnNhZmVVKGwsIGFjYywgZik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfQXJyYXkucmVkdWNlUmV2ZXJzZVUodG9BcnJheShsKSwgYWNjLCBmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXZlcnNlKGwsIGFjY3UsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2VVKGwsIGFjY3UsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVdpdGhJbmRleFUobCwgYWNjLCBmKSB7XG4gIHZhciBfbCA9IGw7XG4gIHZhciBfYWNjID0gYWNjO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICB2YXIgYWNjJDEgPSBfYWNjO1xuICAgIHZhciBsJDEgPSBfbDtcbiAgICBpZiAoIWwkMSkge1xuICAgICAgcmV0dXJuIGFjYyQxO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBfYWNjID0gZihhY2MkMSwgbCQxWzBdLCBpKTtcbiAgICBfbCA9IGwkMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVdpdGhJbmRleChsLCBhY2MsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVdpdGhJbmRleFUobCwgYWNjLCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBSZXZlcnNlMlUobDEsIGwyLCBmKSB7XG4gIHZhciBfbDEgPSBsMTtcbiAgdmFyIF9sMiA9IGwyO1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBsMiQxID0gX2wyO1xuICAgIHZhciBsMSQxID0gX2wxO1xuICAgIGlmICghbDEkMSkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIGlmICghbDIkMSkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICBmKGwxJDFbMF0sIGwyJDFbMF0pLFxuICAgICAgYWNjdVxuICAgIF07XG4gICAgX2wyID0gbDIkMVsxXTtcbiAgICBfbDEgPSBsMSQxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZTIobDEsIGwyLCBmKSB7XG4gIHJldHVybiBtYXBSZXZlcnNlMlUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoMlUoX2wxLCBfbDIsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKCFsMSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgZihsMVswXSwgbDJbMF0pO1xuICAgIF9sMiA9IGwyWzFdO1xuICAgIF9sMSA9IGwxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaDIobDEsIGwyLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoMlUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UyVShfbDEsIF9sMiwgX2FjY3UsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAoIWwxKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9hY2N1ID0gZihhY2N1LCBsMVswXSwgbDJbMF0pO1xuICAgIF9sMiA9IGwyWzFdO1xuICAgIF9sMSA9IGwxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlMihsMSwgbDIsIGFjYywgZikge1xuICByZXR1cm4gcmVkdWNlMlUobDEsIGwyLCBhY2MsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UyVW5zYWZlVShsMSwgbDIsIGFjY3UsIGYpIHtcbiAgaWYgKGwxICYmIGwyKSB7XG4gICAgcmV0dXJuIGYocmVkdWNlUmV2ZXJzZTJVbnNhZmVVKGwxWzFdLCBsMlsxXSwgYWNjdSwgZiksIGwxWzBdLCBsMlswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY3U7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTJVKGwxLCBsMiwgYWNjLCBmKSB7XG4gIHZhciBsZW4gPSBsZW5ndGgobDEpO1xuICBpZiAobGVuIDwgMTAwMCkge1xuICAgIHJldHVybiByZWR1Y2VSZXZlcnNlMlVuc2FmZVUobDEsIGwyLCBhY2MsIGYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBCZWx0X0FycmF5LnJlZHVjZVJldmVyc2UyVSh0b0FycmF5KGwxKSwgdG9BcnJheShsMiksIGFjYywgZik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTIobDEsIGwyLCBhY2MsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2UyVShsMSwgbDIsIGFjYywgQ3VycnkuX18zKGYpKTtcbn1cblxuZnVuY3Rpb24gZXZlcnlVKF94cywgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXAoeHNbMF0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF94cyA9IHhzWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlcnkoeHMsIHApIHtcbiAgcmV0dXJuIGV2ZXJ5VSh4cywgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gc29tZVUoX3hzLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocCh4c1swXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUoeHMsIHApIHtcbiAgcmV0dXJuIHNvbWVVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBldmVyeTJVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwKGwxWzBdLCBsMlswXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeTIobDEsIGwyLCBwKSB7XG4gIHJldHVybiBldmVyeTJVKGwxLCBsMiwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24gY21wQnlMZW5ndGgoX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKCFsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbXBVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHZhciBjID0gcChsMVswXSwgbDJbMF0pO1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbXAobDEsIGwyLCBmKSB7XG4gIHJldHVybiBjbXBVKGwxLCBsMiwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gZXFVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXAobDFbMF0sIGwyWzBdKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfbDIgPSBsMlsxXTtcbiAgICBfbDEgPSBsMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVxKGwxLCBsMiwgZikge1xuICByZXR1cm4gZXFVKGwxLCBsMiwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gc29tZTJVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocChsMVswXSwgbDJbMF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzb21lMihsMSwgbDIsIHApIHtcbiAgcmV0dXJuIHNvbWUyVShsMSwgbDIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGhhc1UoX3hzLCB4LCBlcSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGVxKHhzWzBdLCB4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF94cyA9IHhzWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzKHhzLCB4LCBlcSkge1xuICByZXR1cm4gaGFzVSh4cywgeCwgQ3VycnkuX18yKGVxKSk7XG59XG5cbmZ1bmN0aW9uIGdldEFzc29jVShfeHMsIHgsIGVxKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0geHNbMF07XG4gICAgaWYgKGVxKG1hdGNoWzBdLCB4KSkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUobWF0Y2hbMV0pO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEFzc29jKHhzLCB4LCBlcSkge1xuICByZXR1cm4gZ2V0QXNzb2NVKHhzLCB4LCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gaGFzQXNzb2NVKF94cywgeCwgZXEpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChlcSh4c1swXVswXSwgeCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc0Fzc29jKHhzLCB4LCBlcSkge1xuICByZXR1cm4gaGFzQXNzb2NVKHhzLCB4LCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2NVKHhzLCB4LCBlcSkge1xuICBpZiAoIXhzKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgbCA9IHhzWzFdO1xuICB2YXIgcGFpciA9IHhzWzBdO1xuICBpZiAoZXEocGFpclswXSwgeCkpIHtcbiAgICByZXR1cm4gbDtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIHBhaXIsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciByZW1vdmVkID0gcmVtb3ZlQXNzb2NBdXhXaXRoTWFwKGwsIHgsIGNlbGwsIGVxKTtcbiAgaWYgKHJlbW92ZWQpIHtcbiAgICByZXR1cm4gY2VsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2MoeHMsIHgsIGVxKSB7XG4gIHJldHVybiByZW1vdmVBc3NvY1UoeHMsIHgsIEN1cnJ5Ll9fMihlcSkpO1xufVxuXG5mdW5jdGlvbiBzZXRBc3NvY1UoeHMsIHgsIGssIGVxKSB7XG4gIGlmICgheHMpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAga1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIGwgPSB4c1sxXTtcbiAgdmFyIHBhaXIgPSB4c1swXTtcbiAgaWYgKGVxKHBhaXJbMF0sIHgpKSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIGtcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBsXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIHBhaXIsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciByZXBsYWNlZCA9IHNldEFzc29jQXV4V2l0aE1hcChsLCB4LCBrLCBjZWxsLCBlcSk7XG4gIGlmIChyZXBsYWNlZCkge1xuICAgIHJldHVybiBjZWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICBrXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeHNcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEFzc29jKHhzLCB4LCBrLCBlcSkge1xuICByZXR1cm4gc2V0QXNzb2NVKHhzLCB4LCBrLCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gc29ydFUoeHMsIGNtcCkge1xuICB2YXIgYXJyID0gdG9BcnJheSh4cyk7XG4gIEJlbHRfU29ydEFycmF5LnN0YWJsZVNvcnRJblBsYWNlQnlVKGFyciwgY21wKTtcbiAgcmV0dXJuIGZyb21BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBzb3J0KHhzLCBjbXApIHtcbiAgcmV0dXJuIHNvcnRVKHhzLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGdldEJ5VShfeHMsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgeCA9IHhzWzBdO1xuICAgIGlmIChwKHgpKSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgICB9XG4gICAgX3hzID0geHNbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRCeSh4cywgcCkge1xuICByZXR1cm4gZ2V0QnlVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBrZWVwVShfeHMsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gLyogW10gKi8wO1xuICAgIH1cbiAgICB2YXIgdCA9IHhzWzFdO1xuICAgIHZhciBoID0geHNbMF07XG4gICAgaWYgKHAoaCkpIHtcbiAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgIGgsXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIGNvcHlBdXhXaXRGaWx0ZXIocCwgdCwgY2VsbCk7XG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gICAgX3hzID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGtlZXAoeHMsIHApIHtcbiAgcmV0dXJuIGtlZXBVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4VSh4cywgcCkge1xuICB2YXIgX3hzID0geHM7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciB4cyQxID0gX3hzO1xuICAgIGlmICgheHMkMSkge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gICAgdmFyIHQgPSB4cyQxWzFdO1xuICAgIHZhciBoID0geHMkMVswXTtcbiAgICBpZiAocChoLCBpKSkge1xuICAgICAgdmFyIGNlbGwgPSAvKiA6OiAqL1tcbiAgICAgICAgaCxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgY29weUF1eFdpdGhGaWx0ZXJJbmRleChwLCB0LCBjZWxsLCBpICsgMSB8IDApO1xuICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIF94cyA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4KHhzLCBwKSB7XG4gIHJldHVybiBrZWVwV2l0aEluZGV4VSh4cywgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24ga2VlcE1hcFUoX3hzLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gICAgdmFyIHQgPSB4c1sxXTtcbiAgICB2YXIgaCA9IHAoeHNbMF0pO1xuICAgIGlmIChoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oaCksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIGNvcHlBdXhXaXRGaWx0ZXJNYXAocCwgdCwgY2VsbCk7XG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gICAgX3hzID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXAoeHMsIHApIHtcbiAgcmV0dXJuIGtlZXBNYXBVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25VKGwsIHApIHtcbiAgaWYgKCFsKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogW10gKi8wLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgaCA9IGxbMF07XG4gIHZhciBuZXh0WCA9IC8qIDo6ICovW1xuICAgIGgsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciBuZXh0WSA9IC8qIDo6ICovW1xuICAgIGgsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciBiID0gcChoKTtcbiAgcGFydGl0aW9uQXV4KHAsIGxbMV0sIG5leHRYLCBuZXh0WSk7XG4gIGlmIChiKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmV4dFgsXG4gICAgICAgICAgICBuZXh0WVsxXVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmV4dFhbMV0sXG4gICAgICAgICAgICBuZXh0WVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGwsIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUobCwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gdW56aXAoeHMpIHtcbiAgaWYgKCF4cykge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIFtdICovMCxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIG1hdGNoID0geHNbMF07XG4gIHZhciBjZWxsWCA9IC8qIDo6ICovW1xuICAgIG1hdGNoWzBdLFxuICAgIC8qIFtdICovMFxuICBdO1xuICB2YXIgY2VsbFkgPSAvKiA6OiAqL1tcbiAgICBtYXRjaFsxXSxcbiAgICAvKiBbXSAqLzBcbiAgXTtcbiAgc3BsaXRBdXgoeHNbMV0sIGNlbGxYLCBjZWxsWSk7XG4gIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICBjZWxsWCxcbiAgICAgICAgICBjZWxsWVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB6aXAobDEsIGwyKSB7XG4gIGlmICghbDEpIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIGlmICghbDIpIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgLyogdHVwbGUgKi9bXG4gICAgICBsMVswXSxcbiAgICAgIGwyWzBdXG4gICAgXSxcbiAgICAvKiBbXSAqLzBcbiAgXTtcbiAgemlwQXV4KGwxWzFdLCBsMlsxXSwgY2VsbCk7XG4gIHJldHVybiBjZWxsO1xufVxuXG52YXIgc2l6ZSA9IGxlbmd0aDtcblxudmFyIGZpbHRlciA9IGtlZXA7XG5cbnZhciBmaWx0ZXJXaXRoSW5kZXggPSBrZWVwV2l0aEluZGV4O1xuXG5leHBvcnQge1xuICBsZW5ndGggLFxuICBzaXplICxcbiAgaGVhZCAsXG4gIGhlYWRFeG4gLFxuICB0YWlsICxcbiAgdGFpbEV4biAsXG4gIGFkZCAsXG4gIGdldCAsXG4gIGdldEV4biAsXG4gIG1ha2UgLFxuICBtYWtlQnlVICxcbiAgbWFrZUJ5ICxcbiAgc2h1ZmZsZSAsXG4gIGRyb3AgLFxuICB0YWtlICxcbiAgc3BsaXRBdCAsXG4gIGNvbmNhdCAsXG4gIGNvbmNhdE1hbnkgLFxuICByZXZlcnNlQ29uY2F0ICxcbiAgZmxhdHRlbiAsXG4gIG1hcFUgLFxuICBtYXAgLFxuICB6aXAgLFxuICB6aXBCeVUgLFxuICB6aXBCeSAsXG4gIG1hcFdpdGhJbmRleFUgLFxuICBtYXBXaXRoSW5kZXggLFxuICBmcm9tQXJyYXkgLFxuICB0b0FycmF5ICxcbiAgcmV2ZXJzZSAsXG4gIG1hcFJldmVyc2VVICxcbiAgbWFwUmV2ZXJzZSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIGZvckVhY2hXaXRoSW5kZXhVICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICByZWR1Y2VXaXRoSW5kZXhVICxcbiAgcmVkdWNlV2l0aEluZGV4ICxcbiAgcmVkdWNlUmV2ZXJzZVUgLFxuICByZWR1Y2VSZXZlcnNlICxcbiAgbWFwUmV2ZXJzZTJVICxcbiAgbWFwUmV2ZXJzZTIgLFxuICBmb3JFYWNoMlUgLFxuICBmb3JFYWNoMiAsXG4gIHJlZHVjZTJVICxcbiAgcmVkdWNlMiAsXG4gIHJlZHVjZVJldmVyc2UyVSAsXG4gIHJlZHVjZVJldmVyc2UyICxcbiAgZXZlcnlVICxcbiAgZXZlcnkgLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBldmVyeTJVICxcbiAgZXZlcnkyICxcbiAgc29tZTJVICxcbiAgc29tZTIgLFxuICBjbXBCeUxlbmd0aCAsXG4gIGNtcFUgLFxuICBjbXAgLFxuICBlcVUgLFxuICBlcSAsXG4gIGhhc1UgLFxuICBoYXMgLFxuICBnZXRCeVUgLFxuICBnZXRCeSAsXG4gIGtlZXBVICxcbiAga2VlcCAsXG4gIGZpbHRlciAsXG4gIGtlZXBXaXRoSW5kZXhVICxcbiAga2VlcFdpdGhJbmRleCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBNYXBVICxcbiAga2VlcE1hcCAsXG4gIHBhcnRpdGlvblUgLFxuICBwYXJ0aXRpb24gLFxuICB1bnppcCAsXG4gIGdldEFzc29jVSAsXG4gIGdldEFzc29jICxcbiAgaGFzQXNzb2NVICxcbiAgaGFzQXNzb2MgLFxuICByZW1vdmVBc3NvY1UgLFxuICByZW1vdmVBc3NvYyAsXG4gIHNldEFzc29jVSAsXG4gIHNldEFzc29jICxcbiAgc29ydFUgLFxuICBzb3J0ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBmb3JFYWNoVShvcHQsIGYpIHtcbiAgaWYgKG9wdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGYoQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihvcHQpKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChvcHQsIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hVKG9wdCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhuKHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcImdldEV4blwiKTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aERlZmF1bHRVKG9wdCwgJCRkZWZhdWx0LCBmKSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBXaXRoRGVmYXVsdChvcHQsICQkZGVmYXVsdCwgZikge1xuICByZXR1cm4gbWFwV2l0aERlZmF1bHRVKG9wdCwgJCRkZWZhdWx0LCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKG9wdCwgZikge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KSkpO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtYXAob3B0LCBmKSB7XG4gIHJldHVybiBtYXBVKG9wdCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZmxhdE1hcFUob3B0LCBmKSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGZsYXRNYXAob3B0LCBmKSB7XG4gIHJldHVybiBmbGF0TWFwVShvcHQsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KG9wdCwgJCRkZWZhdWx0KSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG9wdCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NvbWUocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTm9uZSh4KSB7XG4gIHJldHVybiB4ID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxVShhLCBiLCBmKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZihDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYiA9PT0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxKGEsIGIsIGYpIHtcbiAgcmV0dXJuIGVxVShhLCBiLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBjbXBVKGEsIGIsIGYpIHtcbiAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNtcChhLCBiLCBmKSB7XG4gIHJldHVybiBjbXBVKGEsIGIsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmV4cG9ydCB7XG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIGdldEV4biAsXG4gIG1hcFdpdGhEZWZhdWx0VSAsXG4gIG1hcFdpdGhEZWZhdWx0ICxcbiAgbWFwVSAsXG4gIG1hcCAsXG4gIGZsYXRNYXBVICxcbiAgZmxhdE1hcCAsXG4gIGdldFdpdGhEZWZhdWx0ICxcbiAgaXNTb21lICxcbiAgaXNOb25lICxcbiAgZXFVICxcbiAgZXEgLFxuICBjbXBVICxcbiAgY21wICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiLi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9hcnJheSBmcm9tIFwiLi9jYW1sX2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9leGNlcHRpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2pzX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9qc19leGNlcHRpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG52YXIgbWFrZV9mbG9hdCA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX2Zsb2F0X3ZlY3Q7XG5cbnZhciBGbG9hdGFycmF5ID0geyB9O1xuXG5mdW5jdGlvbiBpbml0KGwsIGYpIHtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGwgPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJBcnJheS5pbml0XCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgcmVzID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChsLCBDdXJyeS5fMShmLCAwKSk7XG4gIGZvcih2YXIgaSA9IDE7IGkgPCBsOyArK2kpe1xuICAgIHJlc1tpXSA9IEN1cnJ5Ll8xKGYsIGkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1ha2VfbWF0cml4KHN4LCBzeSwgaW5pdCkge1xuICB2YXIgcmVzID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChzeCwgW10pO1xuICBmb3IodmFyIHggPSAwOyB4IDwgc3g7ICsreCl7XG4gICAgcmVzW3hdID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChzeSwgaW5pdCk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gY29weShhKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc3ViKGEsIDAsIGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGVuZChhMSwgYTIpIHtcbiAgdmFyIGwxID0gYTEubGVuZ3RoO1xuICBpZiAobDEgPT09IDApIHtcbiAgICByZXR1cm4gY29weShhMik7XG4gIH0gZWxzZSBpZiAoYTIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zdWIoYTEsIDAsIGwxKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYTEuY29uY2F0KGEyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWIoYSwgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAoYS5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkuc3ViXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGZpbGwoYSwgb2ZzLCBsZW4sIHYpIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAoYS5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkuZmlsbFwiXG4gICAgICAgIF07XG4gIH1cbiAgZm9yKHZhciBpID0gb2ZzICxpX2ZpbmlzaCA9IG9mcyArIGxlbiB8IDA7IGkgPCBpX2ZpbmlzaDsgKytpKXtcbiAgICBhW2ldID0gdjtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbikge1xuICBpZiAobGVuIDwgMCB8fCBvZnMxIDwgMCB8fCBvZnMxID4gKGExLmxlbmd0aCAtIGxlbiB8IDApIHx8IG9mczIgPCAwIHx8IG9mczIgPiAoYTIubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkFycmF5LmJsaXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzEoZiwgYVtpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGl0ZXIyKGYsIGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkuaXRlcjI6IGFycmF5cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoXCJcbiAgICAgICAgXTtcbiAgfVxuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgYVtpXSwgYltpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1hcChmLCBhKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChsLCBDdXJyeS5fMShmLCBhWzBdKSk7XG4gIGZvcih2YXIgaSA9IDE7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBDdXJyeS5fMShmLCBhW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFwMihmLCBhLCBiKSB7XG4gIHZhciBsYSA9IGEubGVuZ3RoO1xuICB2YXIgbGIgPSBiLmxlbmd0aDtcbiAgaWYgKGxhICE9PSBsYikge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkubWFwMjogYXJyYXlzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGhcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChsYSA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgciA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobGEsIEN1cnJ5Ll8yKGYsIGFbMF0sIGJbMF0pKTtcbiAgZm9yKHZhciBpID0gMTsgaSA8IGxhOyArK2kpe1xuICAgIHJbaV0gPSBDdXJyeS5fMihmLCBhW2ldLCBiW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgaSwgYVtpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1hcGkoZiwgYSkge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgciA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobCwgQ3VycnkuXzIoZiwgMCwgYVswXSkpO1xuICBmb3IodmFyIGkgPSAxOyBpIDwgbDsgKytpKXtcbiAgICByW2ldID0gQ3VycnkuXzIoZiwgaSwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHRvX2xpc3QoYSkge1xuICB2YXIgX2kgPSBhLmxlbmd0aCAtIDEgfCAwO1xuICB2YXIgX3JlcyA9IC8qIFtdICovMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciByZXMgPSBfcmVzO1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfcmVzID0gLyogOjogKi9bXG4gICAgICBhW2ldLFxuICAgICAgcmVzXG4gICAgXTtcbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxpc3RfbGVuZ3RoKF9hY2N1LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICBfYWNjdSA9IGFjY3UgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mX2xpc3QobCkge1xuICBpZiAoIWwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGEgPSBDYW1sX2FycmF5LmNhbWxfbWFrZV92ZWN0KGxpc3RfbGVuZ3RoKDAsIGwpLCBsWzBdKTtcbiAgdmFyIF9pID0gMTtcbiAgdmFyIF9wYXJhbSA9IGxbMV07XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgYVtpXSA9IHBhcmFtWzBdO1xuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9sZWZ0KGYsIHgsIGEpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgciA9IEN1cnJ5Ll8yKGYsIHIsIGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGEsIHgpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSBhLmxlbmd0aCAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IEN1cnJ5Ll8yKGYsIGFbaV0sIHIpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBleGlzdHMocCwgYSkge1xuICB2YXIgbiA9IGEubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQ3VycnkuXzEocCwgYVtpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcl9hbGwocCwgYSkge1xuICB2YXIgbiA9IGEubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzEocCwgYVtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZW0oeCwgYSkge1xuICB2YXIgbiA9IGEubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhW2ldLCB4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtcSh4LCBhKSB7XG4gIHZhciBuID0gYS5sZW5ndGg7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh4ID09PSBhW2ldKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG52YXIgQm90dG9tID0gQ2FtbF9leGNlcHRpb25zLmNyZWF0ZShcIkFycmF5LkJvdHRvbVwiKTtcblxuZnVuY3Rpb24gc29ydChjbXAsIGEpIHtcbiAgdmFyIG1heHNvbiA9IGZ1bmN0aW9uIChsLCBpKSB7XG4gICAgdmFyIGkzMSA9ICgoaSArIGkgfCAwKSArIGkgfCAwKSArIDEgfCAwO1xuICAgIHZhciB4ID0gaTMxO1xuICAgIGlmICgoaTMxICsgMiB8IDApIDwgbCkge1xuICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMzEpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGkzMSArIDEgfCAwKSkgPCAwKSB7XG4gICAgICAgIHggPSBpMzEgKyAxIHwgMDtcbiAgICAgIH1cbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgeCksIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTMxICsgMiB8IDApKSA8IDApIHtcbiAgICAgICAgeCA9IGkzMSArIDIgfCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIGlmICgoaTMxICsgMSB8IDApIDwgbCAmJiBDdXJyeS5fMihjbXAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTMxKSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMzEgKyAxIHwgMCkpIDwgMCkge1xuICAgICAgcmV0dXJuIGkzMSArIDEgfCAwO1xuICAgIH1cbiAgICBpZiAoaTMxIDwgbCkge1xuICAgICAgcmV0dXJuIGkzMTtcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIEJvdHRvbSxcbiAgICAgICAgICBpXG4gICAgICAgIF07XG4gIH07XG4gIHZhciB0cmlja2xlID0gZnVuY3Rpb24gKGwsIGksIGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIF9pID0gaTtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGkkMSA9IF9pO1xuICAgICAgICB2YXIgaiA9IG1heHNvbihsLCBpJDEpO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGopLCBlKSA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgaSQxLCBlKTtcbiAgICAgICAgfVxuICAgICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGkkMSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBqKSk7XG4gICAgICAgIF9pID0gajtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKHJhd19pKXtcbiAgICAgIHZhciBpJDIgPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19pKTtcbiAgICAgIGlmIChpJDJbMF0gPT09IEJvdHRvbSkge1xuICAgICAgICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCBpJDJbMV0sIGUpO1xuICAgICAgfVxuICAgICAgdGhyb3cgaSQyO1xuICAgIH1cbiAgfTtcbiAgdmFyIGJ1YmJsZSA9IGZ1bmN0aW9uIChsLCBpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBfaSA9IGk7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBpJDEgPSBfaTtcbiAgICAgICAgdmFyIGogPSBtYXhzb24obCwgaSQxKTtcbiAgICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCBpJDEsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaikpO1xuICAgICAgICBfaSA9IGo7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChyYXdfaSl7XG4gICAgICB2YXIgaSQyID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfaSk7XG4gICAgICBpZiAoaSQyWzBdID09PSBCb3R0b20pIHtcbiAgICAgICAgcmV0dXJuIGkkMlsxXTtcbiAgICAgIH1cbiAgICAgIHRocm93IGkkMjtcbiAgICB9XG4gIH07XG4gIHZhciB0cmlja2xldXAgPSBmdW5jdGlvbiAoX2ksIGUpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgdmFyIGZhdGhlciA9IChpIC0gMSB8IDApIC8gMyB8IDA7XG4gICAgICBpZiAoaSA9PT0gZmF0aGVyKSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIFwiYXJyYXkubWxcIixcbiAgICAgICAgICAgICAgICAyMzgsXG4gICAgICAgICAgICAgICAgNFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBmYXRoZXIpLCBlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGksIGUpO1xuICAgICAgfVxuICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCBpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGZhdGhlcikpO1xuICAgICAgaWYgKGZhdGhlciA8PSAwKSB7XG4gICAgICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIDAsIGUpO1xuICAgICAgfVxuICAgICAgX2kgPSBmYXRoZXI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgZm9yKHZhciBpID0gKChsICsgMSB8IDApIC8gMyB8IDApIC0gMSB8IDA7IGkgPj0gMDsgLS1pKXtcbiAgICB0cmlja2xlKGwsIGksIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaSkpO1xuICB9XG4gIGZvcih2YXIgaSQxID0gbCAtIDEgfCAwOyBpJDEgPj0gMjsgLS1pJDEpe1xuICAgIHZhciBlID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpJDEpO1xuICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgaSQxLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIDApKTtcbiAgICB0cmlja2xldXAoYnViYmxlKGkkMSwgMCksIGUpO1xuICB9XG4gIGlmIChsIDw9IDEpIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBlJDEgPSBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIDEpO1xuICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIDEsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgMCkpO1xuICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCAwLCBlJDEpO1xufVxuXG5mdW5jdGlvbiBzdGFibGVfc29ydChjbXAsIGEpIHtcbiAgdmFyIG1lcmdlID0gZnVuY3Rpb24gKHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzKSB7XG4gICAgdmFyIHNyYzFyID0gc3JjMW9mcyArIHNyYzFsZW4gfCAwO1xuICAgIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgICB2YXIgX2kxID0gc3JjMW9mcztcbiAgICB2YXIgX3MxID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBzcmMxb2ZzKTtcbiAgICB2YXIgX2kyID0gc3JjMm9mcztcbiAgICB2YXIgX3MyID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChzcmMyLCBzcmMyb2ZzKTtcbiAgICB2YXIgX2QgPSBkc3RvZnM7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGQgPSBfZDtcbiAgICAgIHZhciBzMiA9IF9zMjtcbiAgICAgIHZhciBpMiA9IF9pMjtcbiAgICAgIHZhciBzMSA9IF9zMTtcbiAgICAgIHZhciBpMSA9IF9pMTtcbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIHMxLCBzMikgPD0gMCkge1xuICAgICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGRzdCwgZCwgczEpO1xuICAgICAgICB2YXIgaTEkMSA9IGkxICsgMSB8IDA7XG4gICAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgICAgcmV0dXJuIGJsaXQoc3JjMiwgaTIsIGRzdCwgZCArIDEgfCAwLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgX2QgPSBkICsgMSB8IDA7XG4gICAgICAgIF9zMSA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTEkMSk7XG4gICAgICAgIF9pMSA9IGkxJDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoZHN0LCBkLCBzMik7XG4gICAgICB2YXIgaTIkMSA9IGkyICsgMSB8IDA7XG4gICAgICBpZiAoaTIkMSA+PSBzcmMycikge1xuICAgICAgICByZXR1cm4gYmxpdChhLCBpMSwgZHN0LCBkICsgMSB8IDAsIHNyYzFyIC0gaTEgfCAwKTtcbiAgICAgIH1cbiAgICAgIF9kID0gZCArIDEgfCAwO1xuICAgICAgX3MyID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChzcmMyLCBpMiQxKTtcbiAgICAgIF9pMiA9IGkyJDE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGlzb3J0dG8gPSBmdW5jdGlvbiAoc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICAgIHZhciBlID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBzcmNvZnMgKyBpIHwgMCk7XG4gICAgICB2YXIgaiA9IChkc3RvZnMgKyBpIHwgMCkgLSAxIHwgMDtcbiAgICAgIHdoaWxlKGogPj0gZHN0b2ZzICYmIEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChkc3QsIGopLCBlKSA+IDApIHtcbiAgICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChkc3QsIGogKyAxIHwgMCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChkc3QsIGopKTtcbiAgICAgICAgaiA9IGogLSAxIHwgMDtcbiAgICAgIH07XG4gICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGRzdCwgaiArIDEgfCAwLCBlKTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciBzb3J0dG8gPSBmdW5jdGlvbiAoc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuKSB7XG4gICAgaWYgKGxlbiA8PSA1KSB7XG4gICAgICByZXR1cm4gaXNvcnR0byhzcmNvZnMsIGRzdCwgZHN0b2ZzLCBsZW4pO1xuICAgIH1cbiAgICB2YXIgbDEgPSBsZW4gLyAyIHwgMDtcbiAgICB2YXIgbDIgPSBsZW4gLSBsMSB8IDA7XG4gICAgc29ydHRvKHNyY29mcyArIGwxIHwgMCwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyKTtcbiAgICBzb3J0dG8oc3Jjb2ZzLCBhLCBzcmNvZnMgKyBsMiB8IDAsIGwxKTtcbiAgICByZXR1cm4gbWVyZ2Uoc3Jjb2ZzICsgbDIgfCAwLCBsMSwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBkc3QsIGRzdG9mcyk7XG4gIH07XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsIDw9IDUpIHtcbiAgICByZXR1cm4gaXNvcnR0bygwLCBhLCAwLCBsKTtcbiAgfVxuICB2YXIgbDEgPSBsIC8gMiB8IDA7XG4gIHZhciBsMiA9IGwgLSBsMSB8IDA7XG4gIHZhciB0ID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChsMiwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCAwKSk7XG4gIHNvcnR0byhsMSwgdCwgMCwgbDIpO1xuICBzb3J0dG8oMCwgYSwgbDIsIGwxKTtcbiAgcmV0dXJuIG1lcmdlKGwyLCBsMSwgdCwgMCwgbDIsIGEsIDApO1xufVxuXG52YXIgY3JlYXRlX21hdHJpeCA9IG1ha2VfbWF0cml4O1xuXG52YXIgY29uY2F0ID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2NvbmNhdDtcblxudmFyIGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0O1xuXG5leHBvcnQge1xuICBtYWtlX2Zsb2F0ICxcbiAgaW5pdCAsXG4gIG1ha2VfbWF0cml4ICxcbiAgY3JlYXRlX21hdHJpeCAsXG4gIGFwcGVuZCAsXG4gIGNvbmNhdCAsXG4gIHN1YiAsXG4gIGNvcHkgLFxuICBmaWxsICxcbiAgYmxpdCAsXG4gIHRvX2xpc3QgLFxuICBvZl9saXN0ICxcbiAgaXRlciAsXG4gIGl0ZXJpICxcbiAgbWFwICxcbiAgbWFwaSAsXG4gIGZvbGRfbGVmdCAsXG4gIGZvbGRfcmlnaHQgLFxuICBpdGVyMiAsXG4gIG1hcDIgLFxuICBmb3JfYWxsICxcbiAgZXhpc3RzICxcbiAgbWVtICxcbiAgbWVtcSAsXG4gIHNvcnQgLFxuICBzdGFibGVfc29ydCAsXG4gIGZhc3Rfc29ydCAsXG4gIEZsb2F0YXJyYXkgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgJCRBcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuXG52YXIgaW5pdCA9ICQkQXJyYXkuaW5pdDtcblxudmFyIG1ha2VfbWF0cml4ID0gJCRBcnJheS5tYWtlX21hdHJpeDtcblxudmFyIGNyZWF0ZV9tYXRyaXggPSAkJEFycmF5LmNyZWF0ZV9tYXRyaXg7XG5cbnZhciBhcHBlbmQgPSAkJEFycmF5LmFwcGVuZDtcblxudmFyIGNvbmNhdCA9ICQkQXJyYXkuY29uY2F0O1xuXG52YXIgc3ViID0gJCRBcnJheS5zdWI7XG5cbnZhciBjb3B5ID0gJCRBcnJheS5jb3B5O1xuXG52YXIgZmlsbCA9ICQkQXJyYXkuZmlsbDtcblxudmFyIGJsaXQgPSAkJEFycmF5LmJsaXQ7XG5cbnZhciB0b19saXN0ID0gJCRBcnJheS50b19saXN0O1xuXG52YXIgb2ZfbGlzdCA9ICQkQXJyYXkub2ZfbGlzdDtcblxudmFyIGl0ZXIgPSAkJEFycmF5Lml0ZXI7XG5cbnZhciBtYXAgPSAkJEFycmF5Lm1hcDtcblxudmFyIGl0ZXJpID0gJCRBcnJheS5pdGVyaTtcblxudmFyIG1hcGkgPSAkJEFycmF5Lm1hcGk7XG5cbnZhciBmb2xkX2xlZnQgPSAkJEFycmF5LmZvbGRfbGVmdDtcblxudmFyIGZvbGRfcmlnaHQgPSAkJEFycmF5LmZvbGRfcmlnaHQ7XG5cbnZhciBpdGVyMiA9ICQkQXJyYXkuaXRlcjI7XG5cbnZhciBtYXAyID0gJCRBcnJheS5tYXAyO1xuXG52YXIgZXhpc3RzID0gJCRBcnJheS5leGlzdHM7XG5cbnZhciBmb3JfYWxsID0gJCRBcnJheS5mb3JfYWxsO1xuXG52YXIgbWVtID0gJCRBcnJheS5tZW07XG5cbnZhciBtZW1xID0gJCRBcnJheS5tZW1xO1xuXG52YXIgbWFrZV9mbG9hdCA9ICQkQXJyYXkubWFrZV9mbG9hdDtcblxudmFyIHNvcnQgPSAkJEFycmF5LnNvcnQ7XG5cbnZhciBzdGFibGVfc29ydCA9ICQkQXJyYXkuc3RhYmxlX3NvcnQ7XG5cbnZhciBmYXN0X3NvcnQgPSAkJEFycmF5LmZhc3Rfc29ydDtcblxudmFyIEZsb2F0YXJyYXkgPSAkJEFycmF5LkZsb2F0YXJyYXk7XG5cbmV4cG9ydCB7XG4gIGluaXQgLFxuICBtYWtlX21hdHJpeCAsXG4gIGNyZWF0ZV9tYXRyaXggLFxuICBhcHBlbmQgLFxuICBjb25jYXQgLFxuICBzdWIgLFxuICBjb3B5ICxcbiAgZmlsbCAsXG4gIGJsaXQgLFxuICB0b19saXN0ICxcbiAgb2ZfbGlzdCAsXG4gIGl0ZXIgLFxuICBtYXAgLFxuICBpdGVyaSAsXG4gIG1hcGkgLFxuICBmb2xkX2xlZnQgLFxuICBmb2xkX3JpZ2h0ICxcbiAgaXRlcjIgLFxuICBtYXAyICxcbiAgZXhpc3RzICxcbiAgZm9yX2FsbCAsXG4gIG1lbSAsXG4gIG1lbXEgLFxuICBtYWtlX2Zsb2F0ICxcbiAgc29ydCAsXG4gIHN0YWJsZV9zb3J0ICxcbiAgZmFzdF9zb3J0ICxcbiAgRmxvYXRhcnJheSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgSW5maXgkQnNCYXN0ZXQgZnJvbSBcIi4vSW5maXguYnMuanNcIjtcbmltcG9ydCAqIGFzIEZ1bmN0aW9uJEJzQmFzdGV0IGZyb20gXCIuL0Z1bmN0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbnRlcmZhY2UkQnNCYXN0ZXQgZnJvbSBcIi4vSW50ZXJmYWNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGFwcGVuZChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gKyBwcmltJDE7XG59XG5cbnZhciBNYWdtYSA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBTZW1pZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTW9ub2lkID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IFwiXCJcbn07XG5cbnZhciBRdWFzaWdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIExvb3AgPSB7XG4gIGFwcGVuZDogYXBwZW5kLFxuICBlbXB0eTogXCJcIlxufTtcblxudmFyIGVxID0gQ2FtbF9vYmouY2FtbF9lcXVhbDtcblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogSW50ZXJmYWNlJEJzQmFzdGV0LnVuc2FmZV9jb21wYXJlXG59O1xuXG52YXIgc2hvdyA9IEZ1bmN0aW9uJEJzQmFzdGV0LkNhdGVnb3J5LmlkO1xuXG52YXIgU2hvdyA9IHtcbiAgc2hvdzogc2hvd1xufTtcblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYShNYWdtYSk7XG5cbnZhciBpbmNsdWRlJDEgPSBJbmZpeCRCc0Jhc3RldC5FcShFcSk7XG5cbnZhciBpbmNsdWRlJDIgPSBJbmZpeCRCc0Jhc3RldC5PcmQoT3JkKTtcblxudmFyIEluZml4XyRsZXNzJGNvbG9uJGdyZWF0ID0gaW5jbHVkZS4kbGVzcyRjb2xvbiRncmVhdDtcblxudmFyIEluZml4XyRlcSRwaXBlJGVxID0gaW5jbHVkZSQxLiRlcSRwaXBlJGVxO1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRwaXBlID0gaW5jbHVkZSQyLiRsZXNzJHBpcGUkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDIuJHBpcGUkcGlwZSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZXEgPSBpbmNsdWRlJDIuJGxlc3MkcGlwZSRlcTtcblxudmFyIEluZml4XyRncmVhdCRwaXBlJGVxID0gaW5jbHVkZSQyLiRncmVhdCRwaXBlJGVxO1xuXG52YXIgSW5maXggPSB7XG4gICRsZXNzJGNvbG9uJGdyZWF0OiBJbmZpeF8kbGVzcyRjb2xvbiRncmVhdCxcbiAgJGVxJHBpcGUkZXE6IEluZml4XyRlcSRwaXBlJGVxLFxuICAkbGVzcyRwaXBlJHBpcGU6IEluZml4XyRsZXNzJHBpcGUkcGlwZSxcbiAgJHBpcGUkcGlwZSRncmVhdDogSW5maXhfJHBpcGUkcGlwZSRncmVhdCxcbiAgJGxlc3MkcGlwZSRlcTogSW5maXhfJGxlc3MkcGlwZSRlcSxcbiAgJGdyZWF0JHBpcGUkZXE6IEluZml4XyRncmVhdCRwaXBlJGVxXG59O1xuXG5leHBvcnQge1xuICBNYWdtYSAsXG4gIFNlbWlncm91cCAsXG4gIE1vbm9pZCAsXG4gIFF1YXNpZ3JvdXAgLFxuICBMb29wICxcbiAgRXEgLFxuICBPcmQgLFxuICBTaG93ICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgSW5maXgkQnNCYXN0ZXQgZnJvbSBcIi4vSW5maXguYnMuanNcIjtcblxuZnVuY3Rpb24gTWFnbWEoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihNLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cChTKSB7XG4gIHZhciBhcHBlbmQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAvKiBEdWFsICovW0N1cnJ5Ll8yKFMuYXBwZW5kLCBiWzBdLCBhWzBdKV07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYXBwZW5kOiBhcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTW9ub2lkKE0pIHtcbiAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIC8qIER1YWwgKi9bQ3VycnkuXzIoTS5hcHBlbmQsIGJbMF0sIGFbMF0pXTtcbiAgfTtcbiAgdmFyIGVtcHR5ID0gLyogRHVhbCAqL1tNLmVtcHR5XTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICAgICAgICBlbXB0eTogZW1wdHlcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIGEpIHtcbiAgcmV0dXJuIC8qIER1YWwgKi9bQ3VycnkuXzEoZiwgYVswXSldO1xufVxuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbmZ1bmN0aW9uIGFwcGx5KGYsIGEpIHtcbiAgcmV0dXJuIC8qIER1YWwgKi9bQ3VycnkuXzEoZlswXSwgYVswXSldO1xufVxuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIER1YWwgKi9bYV07XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxuZnVuY3Rpb24gZmxhdF9tYXAoYSwgZikge1xuICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG59XG5cbnZhciBNb25hZCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgZmxhdF9tYXA6IGZsYXRfbWFwXG59O1xuXG5mdW5jdGlvbiBNYWdtYV9BbnkoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihNLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cF9BbnkoUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihTLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbm9pZF9BbnkoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihNLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICB2YXIgZW1wdHkgPSAvKiBEdWFsICovW00uZW1wdHldO1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kLFxuICAgICAgICAgIGVtcHR5OiBlbXB0eVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX2xlZnQoZiwgaW5pdCwgeCkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgaW5pdCwgeFswXSk7XG59XG5cbmZ1bmN0aW9uIGZvbGRfcmlnaHQoZiwgaW5pdCwgeCkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgeFswXSwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGZvbGRfbWFwKGYsIHgpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHhbMF0pO1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcChNKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX0FueShNKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX1BsdXMoUCkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShBKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuRnVuY3RvcihBKTtcbiAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIER1YWwgKi9beF07XG4gICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKGYsIHhbMF0pKTtcbiAgfTtcbiAgdmFyIHNlcXVlbmNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIER1YWwgKi9beF07XG4gICAgICAgICAgICAgICAgfSksIHhbMF0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG52YXIgaW5jbHVkZSA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE1vbmFkKTtcblxudmFyIEluZml4ID0gaW5jbHVkZTtcblxuZXhwb3J0IHtcbiAgTWFnbWEgLFxuICBTZW1pZ3JvdXAgLFxuICBNb25vaWQgLFxuICBGdW5jdG9yICxcbiAgQXBwbGljYXRpdmUgLFxuICBNb25hZCAsXG4gIE1hZ21hX0FueSAsXG4gIFNlbWlncm91cF9BbnkgLFxuICBNb25vaWRfQW55ICxcbiAgRm9sZGFibGUgLFxuICBUcmF2ZXJzYWJsZSAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIER1YWwkQnNCYXN0ZXQgZnJvbSBcIi4vRHVhbC5icy5qc1wiO1xuaW1wb3J0ICogYXMgRW5kbyRCc0Jhc3RldCBmcm9tIFwiLi9FbmRvLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb24kQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb24uYnMuanNcIjtcblxudmFyICRsZXNzJGRvdCA9IEZ1bmN0aW9uJEJzQmFzdGV0LkluZml4LiRsZXNzJGRvdDtcblxuZnVuY3Rpb24gRm9sZF9NYXAoTSwgRikge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE0pO1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9sZWZ0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgYWNjLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICAgICAgICAgICAgfSksIE0uZW1wdHksIHgpO1xuICB9O1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9yaWdodCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9yaWdodCwgKGZ1bmN0aW9uICh4LCBhY2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJGNvbG9uJGdyZWF0LCBDdXJyeS5fMShmLCB4KSwgYWNjKTtcbiAgICAgICAgICAgICAgICB9KSwgTS5lbXB0eSwgeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgSTogSSxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X2xlZnQ6IGZvbGRfbWFwX2RlZmF1bHRfbGVmdCxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0OiBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX0FueShNLCBGKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuTWFnbWFfQW55KE0pO1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9sZWZ0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgYWNjLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICAgICAgICAgICAgfSksIE0uZW1wdHksIHgpO1xuICB9O1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9yaWdodCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9yaWdodCwgKGZ1bmN0aW9uICh4LCBhY2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJGNvbG9uJGdyZWF0LCBDdXJyeS5fMShmLCB4KSwgYWNjKTtcbiAgICAgICAgICAgICAgICB9KSwgTS5lbXB0eSwgeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgSTogSSxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X2xlZnQ6IGZvbGRfbWFwX2RlZmF1bHRfbGVmdCxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0OiBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX1BsdXMoUCwgRikge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0LkFsdChQKTtcbiAgdmFyIGZvbGRfbWFwX2RlZmF1bHRfbGVmdCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGFjYywgeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3MkcGlwZSRncmVhdCwgYWNjLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICAgICAgICAgICAgfSksIFAuZW1wdHksIHgpO1xuICB9O1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9yaWdodCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9yaWdodCwgKGZ1bmN0aW9uICh4LCBhY2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHBpcGUkZ3JlYXQsIEN1cnJ5Ll8xKGYsIHgpLCBhY2MpO1xuICAgICAgICAgICAgICAgIH0pLCBQLmVtcHR5LCB4KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBJOiBJLFxuICAgICAgICAgIGZvbGRfbWFwX2RlZmF1bHRfbGVmdDogZm9sZF9tYXBfZGVmYXVsdF9sZWZ0LFxuICAgICAgICAgIGZvbGRfbWFwX2RlZmF1bHRfcmlnaHQ6IGZvbGRfbWFwX2RlZmF1bHRfcmlnaHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZChGKSB7XG4gIHZhciBEdWFsX0VuZG8gPSBEdWFsJEJzQmFzdGV0Lk1vbm9pZF9BbnkoRW5kbyRCc0Jhc3RldC5Nb25vaWQpO1xuICB2YXIgRHVhbF9Gb2xkX01hcCA9IEN1cnJ5Ll8xKEYuRm9sZF9NYXBfQW55LCBEdWFsX0VuZG8pO1xuICB2YXIgRW5kb19Gb2xkX01hcCA9IEN1cnJ5Ll8xKEYuRm9sZF9NYXBfQW55LCBFbmRvJEJzQmFzdGV0Lk1vbm9pZCk7XG4gIHZhciBmb2xkX2xlZnRfZGVmYXVsdCA9IGZ1bmN0aW9uIChmLCBpbml0LCB4cykge1xuICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8yKER1YWxfRm9sZF9NYXAuZm9sZF9tYXAsIEN1cnJ5Ll8yKCRsZXNzJGRvdCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIER1YWwgKi9bLyogRW5kbyAqL1t4XV07XG4gICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LmZsaXAoZiwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgICB9KSksIHhzKTtcbiAgICByZXR1cm4gQ3VycnkuXzEobWF0Y2hbMF1bMF0sIGluaXQpO1xuICB9O1xuICB2YXIgZm9sZF9yaWdodF9kZWZhdWx0ID0gZnVuY3Rpb24gKGYsIGluaXQsIHhzKSB7XG4gICAgdmFyIHIgPSBDdXJyeS5fMihFbmRvX0ZvbGRfTWFwLmZvbGRfbWFwLCBDdXJyeS5fMigkbGVzcyRkb3QsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBFbmRvICovW3hdO1xuICAgICAgICAgICAgICB9KSwgZiksIHhzKTtcbiAgICByZXR1cm4gQ3VycnkuXzEoclswXSwgaW5pdCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRHVhbF9FbmRvOiBEdWFsX0VuZG8sXG4gICAgICAgICAgRHVhbF9Gb2xkX01hcDogRHVhbF9Gb2xkX01hcCxcbiAgICAgICAgICBFbmRvX0ZvbGRfTWFwOiBFbmRvX0ZvbGRfTWFwLFxuICAgICAgICAgIGZvbGRfbGVmdF9kZWZhdWx0OiBmb2xkX2xlZnRfZGVmYXVsdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0X2RlZmF1bHQ6IGZvbGRfcmlnaHRfZGVmYXVsdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTZXF1ZW5jZShUKSB7XG4gIHZhciBzZXF1ZW5jZV9kZWZhdWx0ID0gZnVuY3Rpb24gKHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFQudHJhdmVyc2UsIEZ1bmN0aW9uJEJzQmFzdGV0LkNhdGVnb3J5LmlkLCB4cyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2VxdWVuY2VfZGVmYXVsdDogc2VxdWVuY2VfZGVmYXVsdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBUcmF2ZXJzZShTKSB7XG4gIHZhciB0cmF2ZXJzZV9kZWZhdWx0ID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKFMuc2VxdWVuY2UsIEN1cnJ5Ll8yKFMubWFwLCBmLCB4cykpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHRyYXZlcnNlX2RlZmF1bHQ6IHRyYXZlcnNlX2RlZmF1bHRcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgJGxlc3MkZG90ICxcbiAgRm9sZF9NYXAgLFxuICBGb2xkX01hcF9BbnkgLFxuICBGb2xkX01hcF9QbHVzICxcbiAgRm9sZCAsXG4gIFNlcXVlbmNlICxcbiAgVHJhdmVyc2UgLFxuICBcbn1cbi8qIER1YWwtQnNCYXN0ZXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9hcnJheSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBBcnJheUxhYmVscyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9hcnJheUxhYmVscy5qc1wiO1xuaW1wb3J0ICogYXMgQXJyYXlGJEJzQmFzdGV0IGZyb20gXCIuL0FycmF5Ri5icy5qc1wiO1xuXG5mdW5jdGlvbiBsZW5ndGgocHJpbSkge1xuICByZXR1cm4gcHJpbS5sZW5ndGg7XG59XG5cbnZhciBtYWtlID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdDtcblxudmFyIG1hcCA9IEFycmF5TGFiZWxzLm1hcDtcblxuZnVuY3Rpb24gbWFwaShmLCBhcnIpIHtcbiAgcmV0dXJuIEFycmF5TGFiZWxzLm1hcGkoKGZ1bmN0aW9uIChpbmRleCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihmLCBlLCBpbmRleCk7XG4gICAgICAgICAgICAgIH0pLCBhcnIpO1xufVxuXG52YXIgZm9sZF9sZWZ0ID0gQXJyYXlMYWJlbHMuZm9sZF9sZWZ0O1xuXG52YXIgZXZlcnkgPSBBcnJheUxhYmVscy5mb3JfYWxsO1xuXG5mdW5jdGlvbiBzbGljZShzdGFydCwgZW5kXywgYXJyKSB7XG4gIHJldHVybiBBcnJheUxhYmVscy5zdWIoYXJyLCBzdGFydCwgZW5kXyAtIHN0YXJ0IHwgMCk7XG59XG5cbnZhciBBID0gQXJyYXlGJEJzQmFzdGV0Lk1ha2Uoe1xuICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICBtYWtlOiBtYWtlLFxuICAgICAgYXBwZW5kOiBBcnJheUxhYmVscy5hcHBlbmQsXG4gICAgICBtYXA6IG1hcCxcbiAgICAgIG1hcGk6IG1hcGksXG4gICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgIGV2ZXJ5OiBldmVyeSxcbiAgICAgIHNsaWNlOiBzbGljZVxuICAgIH0pO1xuXG52YXIgemlwX3dpdGggPSBBLnppcF93aXRoO1xuXG52YXIgemlwID0gQS56aXA7XG5cbnZhciBGdW5jdG9yID0gQS5GdW5jdG9yO1xuXG52YXIgQWx0ID0gQS5BbHQ7XG5cbnZhciBBcHBseSA9IEEuQXBwbHk7XG5cbnZhciBBcHBsaWNhdGl2ZSA9IEEuQXBwbGljYXRpdmU7XG5cbnZhciBNb25hZCA9IEEuTW9uYWQ7XG5cbnZhciBGb2xkYWJsZSA9IEEuRm9sZGFibGU7XG5cbnZhciBVbmZvbGRhYmxlID0gQS5VbmZvbGRhYmxlO1xuXG52YXIgVHJhdmVyc2FibGUgPSBBLlRyYXZlcnNhYmxlO1xuXG52YXIgRXEgPSBBLkVxO1xuXG52YXIgT3JkID0gQS5PcmQ7XG5cbnZhciBTaG93ID0gQS5TaG93O1xuXG52YXIgSW52YXJpYW50ID0gQS5JbnZhcmlhbnQ7XG5cbnZhciBFeHRlbmQgPSBBLkV4dGVuZDtcblxudmFyIEluZml4ID0gQS5JbmZpeDtcblxuZXhwb3J0IHtcbiAgemlwX3dpdGggLFxuICB6aXAgLFxuICBGdW5jdG9yICxcbiAgQWx0ICxcbiAgQXBwbHkgLFxuICBBcHBsaWNhdGl2ZSAsXG4gIE1vbmFkICxcbiAgRm9sZGFibGUgLFxuICBVbmZvbGRhYmxlICxcbiAgVHJhdmVyc2FibGUgLFxuICBFcSAsXG4gIE9yZCAsXG4gIFNob3cgLFxuICBJbnZhcmlhbnQgLFxuICBFeHRlbmQgLFxuICBJbmZpeCAsXG4gIFxufVxuLyogQSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2FycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfYXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIEFycmF5TGFiZWxzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5TGFiZWxzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCIuL1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgRGVmYXVsdCRCc0Jhc3RldCBmcm9tIFwiLi9EZWZhdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1ha2UoQSkge1xuICB2YXIgemlwX3dpdGggPSBmdW5jdGlvbiAoZiwgeHMsIHlzKSB7XG4gICAgdmFyIGwgPSBDdXJyeS5fMShBLmxlbmd0aCwgeHMpIDwgQ3VycnkuXzEoQS5sZW5ndGgsIHlzKSA/IEN1cnJ5Ll8xKEEubGVuZ3RoLCB4cykgOiBDdXJyeS5fMShBLmxlbmd0aCwgeXMpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICAgIHZhciB2YWx1ZSA9IEN1cnJ5Ll8yKGYsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoeHMsIGkpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KHlzLCBpKSk7XG4gICAgICB2YXIgYXJyID0gcmVzdWx0O1xuICAgICAgaWYgKGFyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYXJyLCBpbmRleCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gQ3VycnkuXzIoQS5tYWtlLCBsLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IGluZGV4ICsgMSB8IDA7XG4gICAgfVxuICAgIHZhciBhcnJheSA9IHJlc3VsdDtcbiAgICBpZiAoYXJyYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuICB2YXIgemlwID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIHJldHVybiB6aXBfd2l0aCgoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYlxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KSwgeHMsIHlzKTtcbiAgfTtcbiAgdmFyIG1hcCA9IEEubWFwO1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgYWx0ID0gQS5hcHBlbmQ7XG4gIHZhciBBbHQgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYWx0OiBhbHRcbiAgfTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGZuX2FycmF5LCBhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEEuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGFjYywgZikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGFsdCwgYWNjLCBDdXJyeS5fMihtYXAsIGYsIGEpKTtcbiAgICAgICAgICAgICAgICB9KSwgW10sIGZuX2FycmF5KTtcbiAgfTtcbiAgdmFyIEFwcGx5ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseVxuICB9O1xuICB2YXIgcHVyZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIFthXTtcbiAgfTtcbiAgdmFyIEFwcGxpY2F0aXZlID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlXG4gIH07XG4gIHZhciBmbGF0X21hcCA9IGZ1bmN0aW9uICh4LCBmKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEEuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGFjYywgYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGFsdCwgYWNjLCBDdXJyeS5fMShmLCBhKSk7XG4gICAgICAgICAgICAgICAgfSksIFtdLCB4KTtcbiAgfTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBmbGF0X21hcFxuICB9O1xuICB2YXIgZm9sZF9sZWZ0ID0gQS5mb2xkX2xlZnQ7XG4gIHZhciBmb2xkX3JpZ2h0ID0gZnVuY3Rpb24gKGYsIGluaXQpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICByZXR1cm4gQXJyYXlMYWJlbHMuZm9sZF9yaWdodChmLCBwYXJhbSwgaW5pdCk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXA7XG4gICAgdmFyIEQgPSBwYXJ0aWFsX2FyZyhmdW5hcmcsIHtcbiAgICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0XG4gICAgICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogRC5mb2xkX21hcF9kZWZhdWx0X2xlZnRcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZGFibGVfRm9sZF9NYXBfQW55ID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXBfQW55O1xuICAgIHZhciBEID0gcGFydGlhbF9hcmcoZnVuYXJnLCB7XG4gICAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogZm9sZF9yaWdodFxuICAgICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IEQuZm9sZF9tYXBfZGVmYXVsdF9sZWZ0XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMgPSBmdW5jdGlvbiAoZnVuYXJnKSB7XG4gICAgdmFyIHBhcnRpYWxfYXJnID0gRGVmYXVsdCRCc0Jhc3RldC5Gb2xkX01hcF9QbHVzO1xuICAgIHZhciBEID0gcGFydGlhbF9hcmcoZnVuYXJnLCB7XG4gICAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogZm9sZF9yaWdodFxuICAgICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IEQuZm9sZF9tYXBfZGVmYXVsdF9sZWZ0XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlID0ge1xuICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICAgIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbiAgfTtcbiAgdmFyIHVuZm9sZCA9IGZ1bmN0aW9uIChmLCBpbml0KSB7XG4gICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoZiwgaW5pdCk7XG4gICAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihhbHQsIFttYXRjaFswXV0sIHVuZm9sZChmLCBtYXRjaFsxXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuICB2YXIgVW5mb2xkYWJsZSA9IHtcbiAgICB1bmZvbGQ6IHVuZm9sZFxuICB9O1xuICB2YXIgVHJhdmVyc2FibGUgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgIHZhciBhcmcgPSBDdXJyeS5fMShBLnB1cmUsIFtdKTtcbiAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgcmV0dXJuIEFycmF5TGFiZWxzLmZvbGRfcmlnaHQoKGZ1bmN0aW9uIChhY2MsIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzEoQS5wdXJlLCAoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoYWx0LCBbeF0sIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIEN1cnJ5Ll8xKGYsIGFjYykpLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSwgcGFyYW0sIGFyZyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIEQgPSBEZWZhdWx0JEJzQmFzdGV0LlNlcXVlbmNlKHtcbiAgICAgICAgICB0cmF2ZXJzZTogdHJhdmVyc2VcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgICAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICAgICAgICAgICAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgICAgICAgICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgICAgc2VxdWVuY2U6IEQuc2VxdWVuY2VfZGVmYXVsdFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBFcSA9IGZ1bmN0aW9uIChFKSB7XG4gICAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgICAgaWYgKEN1cnJ5Ll8xKEEubGVuZ3RoLCB4cykgPT09IEN1cnJ5Ll8xKEEubGVuZ3RoLCB5cykpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEEuZXZlcnksIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoRS5lcSwgcGFyYW1bMF0sIHBhcmFtWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIHppcCh4cywgeXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcTogZXFcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgT3JkID0gZnVuY3Rpb24gKE8pIHtcbiAgICB2YXIgZXEgPSBmdW5jdGlvbiAoeHMsIHlzKSB7XG4gICAgICBpZiAoQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSA9PT0gQ3VycnkuXzEoQS5sZW5ndGgsIHlzKSkge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoQS5ldmVyeSwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihPLmVxLCBwYXJhbVswXSwgcGFyYW1bMV0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgemlwKHhzLCB5cykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoeHMsIHlzKSB7XG4gICAgICBpZiAoQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSAhPT0gQ3VycnkuXzEoQS5sZW5ndGgsIHlzKSkge1xuICAgICAgICBpZiAoQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSA8IEN1cnJ5Ll8xKEEubGVuZ3RoLCB5cykpIHtcbiAgICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IHtcbiAgICAgICAgY29udGVudHM6IDBcbiAgICAgIH07XG4gICAgICByZXR1cm4gQ3VycnkuXzMoQS5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhY2MgIT09IC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MiA/IGFjYyA6IEN1cnJ5Ll8yKE8uY29tcGFyZSwgZSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldCh5cywgaW5kZXguY29udGVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXguY29udGVudHMgPSBpbmRleC5jb250ZW50cyArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfSksIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MiwgeHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVxOiBlcSxcbiAgICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgU2hvdyA9IGZ1bmN0aW9uIChTKSB7XG4gICAgdmFyIEYgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRm9sZGFibGUoRm9sZGFibGUpO1xuICAgIHZhciBNID0gQ3VycnkuXzEoRi5Nb25vaWQsIFN0cmluZyRCc0Jhc3RldC5Nb25vaWQpO1xuICAgIHZhciBzaG93ID0gZnVuY3Rpb24gKHhzKSB7XG4gICAgICByZXR1cm4gXCJbXCIgKyAoQ3VycnkuXzIoTS5pbnRlcmNhbGF0ZSwgXCIsIFwiLCBDdXJyeS5fMihtYXAsIFMuc2hvdywgeHMpKSArIFwiXVwiKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93OiBzaG93XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIGltYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzEobWFwLCBmKTtcbiAgfTtcbiAgdmFyIEludmFyaWFudCA9IHtcbiAgICBpbWFwOiBpbWFwXG4gIH07XG4gIHZhciBleHRlbmQgPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXBpLCAoZnVuY3Rpb24gKHBhcmFtLCBpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ3VycnkuXzMoQS5zbGljZSwgaSwgQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSwgeHMpKTtcbiAgICAgICAgICAgICAgICB9KSwgeHMpO1xuICB9O1xuICB2YXIgRXh0ZW5kID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGV4dGVuZDogZXh0ZW5kXG4gIH07XG4gIHZhciBpbmNsdWRlID0gSW5maXgkQnNCYXN0ZXQuTW9uYWQoTW9uYWQpO1xuICB2YXIgaW5jbHVkZSQxID0gSW5maXgkQnNCYXN0ZXQuRXh0ZW5kKEV4dGVuZCk7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGhhc2gkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJGhhc2gkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZS4kbGVzcyRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfJGdyZWF0JGdyZWF0JGVxID0gaW5jbHVkZS4kZ3JlYXQkZ3JlYXQkZXE7XG4gIHZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZS4kZXEkbGVzcyRsZXNzO1xuICB2YXIgSW5maXhfJGdyZWF0JGVxJGdyZWF0ID0gaW5jbHVkZS4kZ3JlYXQkZXEkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRlcSRsZXNzID0gaW5jbHVkZS4kbGVzcyRlcSRsZXNzO1xuICB2YXIgSW5maXhfJGxlc3MkbGVzcyRlcSA9IGluY2x1ZGUkMS4kbGVzcyRsZXNzJGVxO1xuICB2YXIgSW5maXhfJGVxJGdyZWF0JGdyZWF0ID0gaW5jbHVkZSQxLiRlcSRncmVhdCRncmVhdDtcbiAgdmFyIEluZml4ID0ge1xuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICAgJGxlc3MkbGVzcyRlcTogSW5maXhfJGxlc3MkbGVzcyRlcSxcbiAgICAkZXEkZ3JlYXQkZ3JlYXQ6IEluZml4XyRlcSRncmVhdCRncmVhdFxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHppcF93aXRoOiB6aXBfd2l0aCxcbiAgICAgICAgICB6aXA6IHppcCxcbiAgICAgICAgICBGdW5jdG9yOiBGdW5jdG9yLFxuICAgICAgICAgIEFsdDogQWx0LFxuICAgICAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgTW9uYWQ6IE1vbmFkLFxuICAgICAgICAgIEZvbGRhYmxlOiBGb2xkYWJsZSxcbiAgICAgICAgICBVbmZvbGRhYmxlOiBVbmZvbGRhYmxlLFxuICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZSxcbiAgICAgICAgICBFcTogRXEsXG4gICAgICAgICAgT3JkOiBPcmQsXG4gICAgICAgICAgU2hvdzogU2hvdyxcbiAgICAgICAgICBJbnZhcmlhbnQ6IEludmFyaWFudCxcbiAgICAgICAgICBFeHRlbmQ6IEV4dGVuZCxcbiAgICAgICAgICBJbmZpeDogSW5maXhcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgTWFrZSAsXG4gIFxufVxuLyogU3RyaW5nLUJzQmFzdGV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcblxuZnVuY3Rpb24gYnkoYlRvQSwgZXFBLCBiMSwgYjIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGVxQSwgQ3VycnkuXzEoYlRvQSwgYjEpLCBDdXJyeS5fMShiVG9BLCBiMikpO1xufVxuXG52YXIgQ29udHJhdmFyaWFudCA9IHtcbiAgY21hcDogYnlcbn07XG5cbmZ1bmN0aW9uIGludmVydChlcUEsIGExLCBhMikge1xuICByZXR1cm4gIUN1cnJ5Ll8yKGVxQSwgYTEsIGEyKTtcbn1cblxudmFyIGNtYXAgPSBieTtcblxuZXhwb3J0IHtcbiAgYnkgLFxuICBjbWFwICxcbiAgQ29udHJhdmFyaWFudCAsXG4gIGludmVydCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0VxIGZyb20gXCIuLi9SZWx1ZGVfRXEuYnMuanNcIjtcblxuZnVuY3Rpb24gRXFFeHRlbnNpb25zKEVxKSB7XG4gIHZhciBlcVdpdGhDb252ZXJzaW9uID0gZnVuY3Rpb24gKGJUb0EpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICByZXR1cm4gUmVsdWRlX0VxLmJ5KGJUb0EsIEVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIG5vdEVxID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9FcS5pbnZlcnQoRXEuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIEVxSW52ZXJ0ZWQgPSB7XG4gICAgZXE6IG5vdEVxXG4gIH07XG4gIHZhciBFcUJ5ID0gZnVuY3Rpb24gKEEpIHtcbiAgICB2YXIgZXEgPSBmdW5jdGlvbiAoYjEsIGIyKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoRXEuZXEsIEN1cnJ5Ll8xKEEuZiwgYjEpLCBDdXJyeS5fMShBLmYsIGIyKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXE6IGVxXG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcVdpdGhDb252ZXJzaW9uOiBlcVdpdGhDb252ZXJzaW9uLFxuICAgICAgICAgIG5vdEVxOiBub3RFcSxcbiAgICAgICAgICBlcUludmVydGVkOiBub3RFcSxcbiAgICAgICAgICBFcUludmVydGVkOiBFcUludmVydGVkLFxuICAgICAgICAgIEVxQnk6IEVxQnlcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRXFJbmZpeChFcSkge1xuICB2YXIgZXFXaXRoQ29udmVyc2lvbiA9IGZ1bmN0aW9uIChiVG9BKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9FcS5ieShiVG9BLCBFcS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgfSk7XG4gIH07XG4gIHZhciBub3RFcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfRXEuaW52ZXJ0KEVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBFcUludmVydGVkID0ge1xuICAgIGVxOiBub3RFcVxuICB9O1xuICB2YXIgRXFCeSA9IGZ1bmN0aW9uIChBKSB7XG4gICAgdmFyIGVxID0gZnVuY3Rpb24gKGIxLCBiMikge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEVxLmVxLCBDdXJyeS5fMShBLmYsIGIxKSwgQ3VycnkuXzEoQS5mLCBiMikpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVxOiBlcVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBFcUV4dGVuc2lvbnMgPSB7XG4gICAgZXFXaXRoQ29udmVyc2lvbjogZXFXaXRoQ29udmVyc2lvbixcbiAgICBub3RFcTogbm90RXEsXG4gICAgZXFJbnZlcnRlZDogbm90RXEsXG4gICAgRXFJbnZlcnRlZDogRXFJbnZlcnRlZCxcbiAgICBFcUJ5OiBFcUJ5XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRXFFeHRlbnNpb25zOiBFcUV4dGVuc2lvbnMsXG4gICAgICAgICAgJHBpcGUkZXEkcGlwZTogRXEuZXEsXG4gICAgICAgICAgJHBpcGUkYmFuZyRlcSRwaXBlOiBub3RFcVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBFcUV4dGVuc2lvbnMgLFxuICBFcUluZml4ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Db250cmF2YXJpYW50IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQ29udHJhdmFyaWFudC5icy5qc1wiO1xuXG5mdW5jdGlvbiBieShiVG9BLCBjb21wYXJlQSwgYjEsIGIyKSB7XG4gIHJldHVybiBDdXJyeS5fMihjb21wYXJlQSwgQ3VycnkuXzEoYlRvQSwgYjEpLCBDdXJyeS5fMShiVG9BLCBiMikpO1xufVxuXG52YXIgQ29udHJhdmFyaWFudCA9IHtcbiAgY21hcDogYnlcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0NvbnRyYXZhcmlhbnQuQ29udHJhdmFyaWFudEV4dGVuc2lvbnMoQ29udHJhdmFyaWFudCk7XG5cbmZ1bmN0aW9uIHJldmVyc2UoY29tcGFyZSwgYTEsIGEyKSB7XG4gIHZhciBtYXRjaCA9IEN1cnJ5Ll8yKGNvbXBhcmUsIGExLCBhMik7XG4gIGlmIChtYXRjaCAhPT0gMTU5MDM5NDk0KSB7XG4gICAgaWYgKG1hdGNoID49IDkzOTIxNDE1MSkge1xuICAgICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlQXNJbnRCeShjb21wYXJlLCBhLCBiKSB7XG4gIHZhciBtYXRjaCA9IEN1cnJ5Ll8yKGNvbXBhcmUsIGEsIGIpO1xuICBpZiAobWF0Y2ggIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChtYXRjaCA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVBc0ludChvcmQsIGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVBc0ludEJ5KG9yZC5jb21wYXJlLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gbWluQnkoY29tcGFyZSwgYSwgYikge1xuICB2YXIgbWF0Y2ggPSBDdXJyeS5fMihjb21wYXJlLCBhLCBiKTtcbiAgaWYgKG1hdGNoICE9PSAxNTkwMzk0OTQpIHtcbiAgICByZXR1cm4gYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYjtcbiAgfVxufVxuXG5mdW5jdGlvbiBtaW4ob3JkLCBhLCBiKSB7XG4gIHJldHVybiBtaW5CeShvcmQuY29tcGFyZSwgYSwgYik7XG59XG5cbmZ1bmN0aW9uIG1heEJ5KGNvbXBhcmUsIGEsIGIpIHtcbiAgdmFyIG1hdGNoID0gQ3VycnkuXzIoY29tcGFyZSwgYSwgYik7XG4gIGlmIChtYXRjaCA+PSA5MzkyMTQxNTEpIHtcbiAgICByZXR1cm4gYjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXgob3JkLCBhLCBiKSB7XG4gIHJldHVybiBtYXhCeShvcmQuY29tcGFyZSwgYSwgYik7XG59XG5cbmZ1bmN0aW9uIGxlc3NUaGFuQnkoY29tcGFyZSwgYSwgYikge1xuICByZXR1cm4gQ3VycnkuXzIoY29tcGFyZSwgYSwgYikgPT09IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbn1cblxuZnVuY3Rpb24gbGVzc1RoYW4ob3JkLCBhLCBiKSB7XG4gIHJldHVybiBsZXNzVGhhbkJ5KG9yZC5jb21wYXJlLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gbGVzc1RoYW5PckVxQnkoY29tcGFyZSwgYSwgYikge1xuICByZXR1cm4gQ3VycnkuXzIoY29tcGFyZSwgYSwgYikgIT09IC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbn1cblxuZnVuY3Rpb24gbGVzc1RoYW5PckVxKG9yZCwgYSwgYikge1xuICByZXR1cm4gbGVzc1RoYW5PckVxQnkob3JkLmNvbXBhcmUsIGEsIGIpO1xufVxuXG5mdW5jdGlvbiBncmVhdGVyVGhhbkJ5KGNvbXBhcmUsIGEsIGIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGNvbXBhcmUsIGEsIGIpID09PSAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG59XG5cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG9yZCwgYSwgYikge1xuICByZXR1cm4gZ3JlYXRlclRoYW5CeShvcmQuY29tcGFyZSwgYSwgYik7XG59XG5cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcUJ5KGNvbXBhcmUsIGEsIGIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGNvbXBhcmUsIGEsIGIpICE9PSAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG59XG5cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcShvcmQsIGEsIGIpIHtcbiAgcmV0dXJuIGdyZWF0ZXJUaGFuT3JFcUJ5KG9yZC5jb21wYXJlLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gY2xhbXBCeShjb21wYXJlLCBtaW4sIG1heCwgdikge1xuICByZXR1cm4gbWluQnkoY29tcGFyZSwgbWF4LCBtYXhCeShjb21wYXJlLCBtaW4sIHYpKTtcbn1cblxuZnVuY3Rpb24gY2xhbXAob3JkLCBtaW4sIG1heCwgeCkge1xuICByZXR1cm4gY2xhbXBCeShvcmQuY29tcGFyZSwgbWluLCBtYXgsIHgpO1xufVxuXG5mdW5jdGlvbiBiZXR3ZWVuQnkoY29tcGFyZSwgbWluLCBtYXgsIHYpIHtcbiAgaWYgKGdyZWF0ZXJUaGFuT3JFcUJ5KGNvbXBhcmUsIHYsIG1pbikpIHtcbiAgICByZXR1cm4gbGVzc1RoYW5PckVxQnkoY29tcGFyZSwgdiwgbWF4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmV0d2VlbihvcmQsIG1pbiwgbWF4LCB4KSB7XG4gIHJldHVybiBiZXR3ZWVuQnkob3JkLmNvbXBhcmUsIG1pbiwgbWF4LCB4KTtcbn1cblxuZnVuY3Rpb24gYWJzKG9yZCwgcmluZywgeCkge1xuICBpZiAoZ3JlYXRlclRoYW5PckVxKG9yZCwgeCwgcmluZy56ZXJvKSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMihyaW5nLnN1YnRyYWN0LCByaW5nLnplcm8sIHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNpZ251bShvcmQsIHJpbmcsIHgpIHtcbiAgaWYgKGdyZWF0ZXJUaGFuT3JFcShvcmQsIHgsIHJpbmcuemVybykpIHtcbiAgICByZXR1cm4gcmluZy5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKHJpbmcuc3VidHJhY3QsIHJpbmcuemVybywgcmluZy5vbmUpO1xuICB9XG59XG5cbnZhciBjbWFwID0gYnk7XG5cbnZhciBsdEJ5ID0gbGVzc1RoYW5CeTtcblxudmFyIGx0ID0gbGVzc1RoYW47XG5cbnZhciBsdGVCeSA9IGxlc3NUaGFuT3JFcUJ5O1xuXG52YXIgbHRlID0gbGVzc1RoYW5PckVxO1xuXG52YXIgZ3RCeSA9IGdyZWF0ZXJUaGFuQnk7XG5cbnZhciBndCA9IGdyZWF0ZXJUaGFuO1xuXG52YXIgZ3RlQnkgPSBncmVhdGVyVGhhbk9yRXFCeTtcblxudmFyIGd0ZSA9IGdyZWF0ZXJUaGFuT3JFcTtcblxuZXhwb3J0IHtcbiAgYnkgLFxuICBjbWFwICxcbiAgQ29udHJhdmFyaWFudCAsXG4gIHJldmVyc2UgLFxuICBjb21wYXJlQXNJbnRCeSAsXG4gIGNvbXBhcmVBc0ludCAsXG4gIG1pbkJ5ICxcbiAgbWluICxcbiAgbWF4QnkgLFxuICBtYXggLFxuICBsZXNzVGhhbkJ5ICxcbiAgbHRCeSAsXG4gIGxlc3NUaGFuICxcbiAgbHQgLFxuICBsZXNzVGhhbk9yRXFCeSAsXG4gIGx0ZUJ5ICxcbiAgbGVzc1RoYW5PckVxICxcbiAgbHRlICxcbiAgZ3JlYXRlclRoYW5CeSAsXG4gIGd0QnkgLFxuICBncmVhdGVyVGhhbiAsXG4gIGd0ICxcbiAgZ3JlYXRlclRoYW5PckVxQnkgLFxuICBndGVCeSAsXG4gIGdyZWF0ZXJUaGFuT3JFcSAsXG4gIGd0ZSAsXG4gIGNsYW1wQnkgLFxuICBjbGFtcCAsXG4gIGJldHdlZW5CeSAsXG4gIGJldHdlZW4gLFxuICBhYnMgLFxuICBzaWdudW0gLFxuICBcbn1cbi8qICBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3JkIGZyb20gXCIuLi9SZWx1ZGVfT3JkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19FcSBmcm9tIFwiLi9SZWx1ZGVfRXh0ZW5zaW9uc19FcS5icy5qc1wiO1xuXG5mdW5jdGlvbiBPcmRFeHRlbnNpb25zKE8pIHtcbiAgdmFyIGNvbXBhcmVXaXRoQ29udmVyc2lvbiA9IGZ1bmN0aW9uIChiVG9BKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmQuYnkoYlRvQSwgTy5jb21wYXJlLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIGNvbXBhcmVSZXZlcnNlZCA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLnJldmVyc2UoTy5jb21wYXJlLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBPcmRSZXZlcnNlZF9lcSA9IE8uZXE7XG4gIHZhciBPcmRSZXZlcnNlZCA9IHtcbiAgICBlcTogT3JkUmV2ZXJzZWRfZXEsXG4gICAgY29tcGFyZTogY29tcGFyZVJldmVyc2VkXG4gIH07XG4gIHZhciBjb21wYXJlQXNJbnQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmNvbXBhcmVBc0ludEJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBtaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLm1pbkJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBtYXggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLm1heEJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBsZXNzVGhhbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5CeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbGVzc1RoYW5PckVxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5sZXNzVGhhbk9yRXFCeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgZ3JlYXRlclRoYW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJUaGFuT3JFcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuZ3JlYXRlclRoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGNsYW1wID0gZnVuY3Rpb24gKG1pbiwgbWF4LCB2KSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuY2xhbXBCeShPLmNvbXBhcmUsIG1pbiwgbWF4LCB2KTtcbiAgfTtcbiAgdmFyIGJldHdlZW4gPSBmdW5jdGlvbiAobWluLCBtYXgsIHYpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5iZXR3ZWVuQnkoTy5jb21wYXJlLCBtaW4sIG1heCwgdik7XG4gIH07XG4gIHZhciBPcmRSaW5nRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIChSKSB7XG4gICAgdmFyIGFicyA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gUmVsdWRlX09yZC5hYnMoTywgUiwgdik7XG4gICAgfTtcbiAgICB2YXIgc2lnbnVtID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBSZWx1ZGVfT3JkLnNpZ251bShPLCBSLCB2KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBhYnM6IGFicyxcbiAgICAgICAgICAgIHNpZ251bTogc2lnbnVtXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIGxlc3NUaGFuJDEgPSBmdW5jdGlvbiAoY29tcGFyZVRvLCBhKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5CeShPLmNvbXBhcmUsIGEsIGNvbXBhcmVUbyk7XG4gIH07XG4gIHZhciBsZXNzVGhhbk9yRXEkMSA9IGZ1bmN0aW9uIChjb21wYXJlVG8sIGEpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5sZXNzVGhhbk9yRXFCeShPLmNvbXBhcmUsIGEsIGNvbXBhcmVUbyk7XG4gIH07XG4gIHZhciBncmVhdGVyVGhhbiQxID0gZnVuY3Rpb24gKGNvbXBhcmVUbywgYSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgZ3JlYXRlclRoYW5PckVxJDEgPSBmdW5jdGlvbiAoY29tcGFyZVRvLCBhKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuZ3JlYXRlclRoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgT3JkTmFtZWQgPSB7XG4gICAgbGVzc1RoYW46IGxlc3NUaGFuJDEsXG4gICAgbGVzc1RoYW5PckVxOiBsZXNzVGhhbk9yRXEkMSxcbiAgICBncmVhdGVyVGhhbjogZ3JlYXRlclRoYW4kMSxcbiAgICBncmVhdGVyVGhhbk9yRXE6IGdyZWF0ZXJUaGFuT3JFcSQxLFxuICAgIGx0OiBsZXNzVGhhbiQxLFxuICAgIGx0ZTogbGVzc1RoYW5PckVxJDEsXG4gICAgZ3Q6IGdyZWF0ZXJUaGFuJDEsXG4gICAgZ3RlOiBncmVhdGVyVGhhbk9yRXEkMVxuICB9O1xuICB2YXIgT3JkQnkgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfRXEuRXFFeHRlbnNpb25zKE8pO1xuICAgIHZhciBpbmNsdWRlJDEgPSBDdXJyeS5fMShpbmNsdWRlLkVxQnksIEEpO1xuICAgIHZhciBjb21wYXJlID0gZnVuY3Rpb24gKGIxLCBiMikge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgQ3VycnkuXzEoQS5mLCBiMSksIEN1cnJ5Ll8xKEEuZiwgYjIpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcTogaW5jbHVkZSQxLmVxLFxuICAgICAgICAgICAgY29tcGFyZTogY29tcGFyZVxuICAgICAgICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZVdpdGhDb252ZXJzaW9uOiBjb21wYXJlV2l0aENvbnZlcnNpb24sXG4gICAgICAgICAgY29tcGFyZVJldmVyc2VkOiBjb21wYXJlUmV2ZXJzZWQsXG4gICAgICAgICAgT3JkUmV2ZXJzZWQ6IE9yZFJldmVyc2VkLFxuICAgICAgICAgIGNvbXBhcmVBc0ludDogY29tcGFyZUFzSW50LFxuICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgIGxlc3NUaGFuOiBsZXNzVGhhbixcbiAgICAgICAgICBsdDogbGVzc1RoYW4sXG4gICAgICAgICAgbGVzc1RoYW5PckVxOiBsZXNzVGhhbk9yRXEsXG4gICAgICAgICAgbHRlOiBsZXNzVGhhbk9yRXEsXG4gICAgICAgICAgZ3JlYXRlclRoYW46IGdyZWF0ZXJUaGFuLFxuICAgICAgICAgIGd0OiBncmVhdGVyVGhhbixcbiAgICAgICAgICBncmVhdGVyVGhhbk9yRXE6IGdyZWF0ZXJUaGFuT3JFcSxcbiAgICAgICAgICBndGU6IGdyZWF0ZXJUaGFuT3JFcSxcbiAgICAgICAgICBjbGFtcDogY2xhbXAsXG4gICAgICAgICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICAgICAgICBPcmRSaW5nRXh0ZW5zaW9uczogT3JkUmluZ0V4dGVuc2lvbnMsXG4gICAgICAgICAgT3JkTmFtZWQ6IE9yZE5hbWVkLFxuICAgICAgICAgIE9yZEJ5OiBPcmRCeVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBPcmRJbmZpeChPKSB7XG4gIHZhciBjb21wYXJlV2l0aENvbnZlcnNpb24gPSBmdW5jdGlvbiAoYlRvQSkge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgIHJldHVybiBSZWx1ZGVfT3JkLmJ5KGJUb0EsIE8uY29tcGFyZSwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgfSk7XG4gIH07XG4gIHZhciBjb21wYXJlUmV2ZXJzZWQgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5yZXZlcnNlKE8uY29tcGFyZSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgT3JkUmV2ZXJzZWRfZXEgPSBPLmVxO1xuICB2YXIgT3JkUmV2ZXJzZWQgPSB7XG4gICAgZXE6IE9yZFJldmVyc2VkX2VxLFxuICAgIGNvbXBhcmU6IGNvbXBhcmVSZXZlcnNlZFxuICB9O1xuICB2YXIgY29tcGFyZUFzSW50ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5jb21wYXJlQXNJbnRCeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbWluID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5taW5CeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbWF4ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5tYXhCeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbGVzc1RoYW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmxlc3NUaGFuQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGxlc3NUaGFuT3JFcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJUaGFuID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5ncmVhdGVyVGhhbkJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBncmVhdGVyVGhhbk9yRXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuT3JFcUJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBjbGFtcCA9IGZ1bmN0aW9uIChtaW4sIG1heCwgdikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmNsYW1wQnkoTy5jb21wYXJlLCBtaW4sIG1heCwgdik7XG4gIH07XG4gIHZhciBiZXR3ZWVuID0gZnVuY3Rpb24gKG1pbiwgbWF4LCB2KSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuYmV0d2VlbkJ5KE8uY29tcGFyZSwgbWluLCBtYXgsIHYpO1xuICB9O1xuICB2YXIgT3JkUmluZ0V4dGVuc2lvbnMgPSBmdW5jdGlvbiAoUikge1xuICAgIHZhciBhYnMgPSBmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIFJlbHVkZV9PcmQuYWJzKE8sIFIsIHYpO1xuICAgIH07XG4gICAgdmFyIHNpZ251bSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gUmVsdWRlX09yZC5zaWdudW0oTywgUiwgdik7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWJzOiBhYnMsXG4gICAgICAgICAgICBzaWdudW06IHNpZ251bVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBsZXNzVGhhbiQxID0gZnVuY3Rpb24gKGNvbXBhcmVUbywgYSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmxlc3NUaGFuQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgbGVzc1RoYW5PckVxJDEgPSBmdW5jdGlvbiAoY29tcGFyZVRvLCBhKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgZ3JlYXRlclRoYW4kMSA9IGZ1bmN0aW9uIChjb21wYXJlVG8sIGEpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5ncmVhdGVyVGhhbkJ5KE8uY29tcGFyZSwgYSwgY29tcGFyZVRvKTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJUaGFuT3JFcSQxID0gZnVuY3Rpb24gKGNvbXBhcmVUbywgYSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuT3JFcUJ5KE8uY29tcGFyZSwgYSwgY29tcGFyZVRvKTtcbiAgfTtcbiAgdmFyIE9yZE5hbWVkID0ge1xuICAgIGxlc3NUaGFuOiBsZXNzVGhhbiQxLFxuICAgIGxlc3NUaGFuT3JFcTogbGVzc1RoYW5PckVxJDEsXG4gICAgZ3JlYXRlclRoYW46IGdyZWF0ZXJUaGFuJDEsXG4gICAgZ3JlYXRlclRoYW5PckVxOiBncmVhdGVyVGhhbk9yRXEkMSxcbiAgICBsdDogbGVzc1RoYW4kMSxcbiAgICBsdGU6IGxlc3NUaGFuT3JFcSQxLFxuICAgIGd0OiBncmVhdGVyVGhhbiQxLFxuICAgIGd0ZTogZ3JlYXRlclRoYW5PckVxJDFcbiAgfTtcbiAgdmFyIE9yZEJ5ID0gZnVuY3Rpb24gKEEpIHtcbiAgICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0VxLkVxRXh0ZW5zaW9ucyhPKTtcbiAgICB2YXIgaW5jbHVkZSQxID0gQ3VycnkuXzEoaW5jbHVkZS5FcUJ5LCBBKTtcbiAgICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChiMSwgYjIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihPLmNvbXBhcmUsIEN1cnJ5Ll8xKEEuZiwgYjEpLCBDdXJyeS5fMShBLmYsIGIyKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXE6IGluY2x1ZGUkMS5lcSxcbiAgICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgT3JkRXh0ZW5zaW9ucyA9IHtcbiAgICBjb21wYXJlV2l0aENvbnZlcnNpb246IGNvbXBhcmVXaXRoQ29udmVyc2lvbixcbiAgICBjb21wYXJlUmV2ZXJzZWQ6IGNvbXBhcmVSZXZlcnNlZCxcbiAgICBPcmRSZXZlcnNlZDogT3JkUmV2ZXJzZWQsXG4gICAgY29tcGFyZUFzSW50OiBjb21wYXJlQXNJbnQsXG4gICAgbWluOiBtaW4sXG4gICAgbWF4OiBtYXgsXG4gICAgbGVzc1RoYW46IGxlc3NUaGFuLFxuICAgIGx0OiBsZXNzVGhhbixcbiAgICBsZXNzVGhhbk9yRXE6IGxlc3NUaGFuT3JFcSxcbiAgICBsdGU6IGxlc3NUaGFuT3JFcSxcbiAgICBncmVhdGVyVGhhbjogZ3JlYXRlclRoYW4sXG4gICAgZ3Q6IGdyZWF0ZXJUaGFuLFxuICAgIGdyZWF0ZXJUaGFuT3JFcTogZ3JlYXRlclRoYW5PckVxLFxuICAgIGd0ZTogZ3JlYXRlclRoYW5PckVxLFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIE9yZFJpbmdFeHRlbnNpb25zOiBPcmRSaW5nRXh0ZW5zaW9ucyxcbiAgICBPcmROYW1lZDogT3JkTmFtZWQsXG4gICAgT3JkQnk6IE9yZEJ5XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgT3JkRXh0ZW5zaW9uczogT3JkRXh0ZW5zaW9ucyxcbiAgICAgICAgICAkcGlwZSRsZXNzJHBpcGU6IGxlc3NUaGFuLFxuICAgICAgICAgICRwaXBlJGxlc3MkZXEkcGlwZTogbGVzc1RoYW5PckVxLFxuICAgICAgICAgICRwaXBlJGdyZWF0JHBpcGU6IGdyZWF0ZXJUaGFuLFxuICAgICAgICAgICRwaXBlJGdyZWF0JGVxJHBpcGU6IGdyZWF0ZXJUaGFuT3JFcVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBPcmRFeHRlbnNpb25zICxcbiAgT3JkSW5maXggLFxuICBcbn1cbi8qIFJlbHVkZV9PcmQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG5mdW5jdGlvbiBnZXQocywgaSkge1xuICBpZiAoaSA8IDAgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIHNbaV07XG59XG5cbmZ1bmN0aW9uIGNhbWxfZmlsbF9ieXRlcyhzLCBpLCBsLCBjKSB7XG4gIGlmIChsIDw9IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgayA9IGkgLGtfZmluaXNoID0gbCArIGkgfCAwOyBrIDwga19maW5pc2g7ICsrayl7XG4gICAgc1trXSA9IGM7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGNhbWxfY3JlYXRlX2J5dGVzKGxlbikge1xuICBpZiAobGVuIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmNyZWF0ZVwiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHJlc3VsdFtpXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2FtbF9ibGl0X2J5dGVzKHMxLCBpMSwgczIsIGkyLCBsZW4pIHtcbiAgaWYgKGxlbiA8PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBpZiAoczEgPT09IHMyKSB7XG4gICAgaWYgKGkxIDwgaTIpIHtcbiAgICAgIHZhciByYW5nZV9hID0gKHMxLmxlbmd0aCAtIGkyIHwgMCkgLSAxIHwgMDtcbiAgICAgIHZhciByYW5nZV9iID0gbGVuIC0gMSB8IDA7XG4gICAgICB2YXIgcmFuZ2UgPSByYW5nZV9hID4gcmFuZ2VfYiA/IHJhbmdlX2IgOiByYW5nZV9hO1xuICAgICAgZm9yKHZhciBqID0gcmFuZ2U7IGogPj0gMDsgLS1qKXtcbiAgICAgICAgczFbaTIgKyBqIHwgMF0gPSBzMVtpMSArIGogfCAwXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChpMSA8PSBpMikge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHJhbmdlX2EkMSA9IChzMS5sZW5ndGggLSBpMSB8IDApIC0gMSB8IDA7XG4gICAgdmFyIHJhbmdlX2IkMSA9IGxlbiAtIDEgfCAwO1xuICAgIHZhciByYW5nZSQxID0gcmFuZ2VfYSQxID4gcmFuZ2VfYiQxID8gcmFuZ2VfYiQxIDogcmFuZ2VfYSQxO1xuICAgIGZvcih2YXIgayA9IDA7IGsgPD0gcmFuZ2UkMTsgKytrKXtcbiAgICAgIHMxW2kyICsgayB8IDBdID0gczFbaTEgKyBrIHwgMF07XG4gICAgfVxuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIG9mZjEgPSBzMS5sZW5ndGggLSBpMSB8IDA7XG4gIGlmIChsZW4gPD0gb2ZmMSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgICBzMltpMiArIGkgfCAwXSA9IHMxW2kxICsgaSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaSQxID0gMDsgaSQxIDwgb2ZmMTsgKytpJDEpe1xuICAgIHMyW2kyICsgaSQxIHwgMF0gPSBzMVtpMSArIGkkMSB8IDBdO1xuICB9XG4gIGZvcih2YXIgaSQyID0gb2ZmMTsgaSQyIDwgbGVuOyArK2kkMil7XG4gICAgczJbaTIgKyBpJDIgfCAwXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGJ5dGVzX3RvX3N0cmluZyhhKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBzX2xlbiA9IGxlbjtcbiAgaWYgKGkgPT09IDAgJiYgbGVuIDw9IDQwOTYgJiYgbGVuID09PSBhLmxlbmd0aCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGEpO1xuICB9XG4gIHZhciBvZmZzZXQgPSAwO1xuICB3aGlsZShzX2xlbiA+IDApIHtcbiAgICB2YXIgbmV4dCA9IHNfbGVuIDwgMTAyNCA/IHNfbGVuIDogMTAyNDtcbiAgICB2YXIgdG1wX2J5dGVzID0gbmV3IEFycmF5KG5leHQpO1xuICAgIGNhbWxfYmxpdF9ieXRlcyhhLCBvZmZzZXQsIHRtcF9ieXRlcywgMCwgbmV4dCk7XG4gICAgcyA9IHMgKyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHRtcF9ieXRlcyk7XG4gICAgc19sZW4gPSBzX2xlbiAtIG5leHQgfCAwO1xuICAgIG9mZnNldCA9IG9mZnNldCArIG5leHQgfCAwO1xuICB9O1xuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gY2FtbF9ibGl0X3N0cmluZyhzMSwgaTEsIHMyLCBpMiwgbGVuKSB7XG4gIGlmIChsZW4gPD0gMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIG9mZjEgPSBzMS5sZW5ndGggLSBpMSB8IDA7XG4gIGlmIChsZW4gPD0gb2ZmMSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgICBzMltpMiArIGkgfCAwXSA9IHMxLmNoYXJDb2RlQXQoaTEgKyBpIHwgMCk7XG4gICAgfVxuICAgIHJldHVybiA7XG4gIH1cbiAgZm9yKHZhciBpJDEgPSAwOyBpJDEgPCBvZmYxOyArK2kkMSl7XG4gICAgczJbaTIgKyBpJDEgfCAwXSA9IHMxLmNoYXJDb2RlQXQoaTEgKyBpJDEgfCAwKTtcbiAgfVxuICBmb3IodmFyIGkkMiA9IG9mZjE7IGkkMiA8IGxlbjsgKytpJDIpe1xuICAgIHMyW2kyICsgaSQyIHwgMF0gPSAvKiBcIlxcMDAwXCIgKi8wO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBieXRlc19vZl9zdHJpbmcocykge1xuICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICByZXNbaV0gPSBzLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHtcbiAgY2FtbF9jcmVhdGVfYnl0ZXMgLFxuICBjYW1sX2ZpbGxfYnl0ZXMgLFxuICBnZXQgLFxuICBieXRlc190b19zdHJpbmcgLFxuICBjYW1sX2JsaXRfYnl0ZXMgLFxuICBjYW1sX2JsaXRfc3RyaW5nICxcbiAgYnl0ZXNfb2Zfc3RyaW5nICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIGRpdih4LCB5KSB7XG4gIGlmICh5ID09PSAwKSB7XG4gICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZGl2aXNpb25fYnlfemVybztcbiAgfVxuICByZXR1cm4geCAvIHkgfCAwO1xufVxuXG5mdW5jdGlvbiBtb2RfKHgsIHkpIHtcbiAgaWYgKHkgPT09IDApIHtcbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5kaXZpc2lvbl9ieV96ZXJvO1xuICB9XG4gIHJldHVybiB4ICUgeTtcbn1cblxuZnVuY3Rpb24gY2FtbF9ic3dhcDE2KHgpIHtcbiAgcmV0dXJuICgoeCAmIDI1NSkgPDwgOCkgfCAoKHggJiA2NTI4MCkgPj4+IDgpO1xufVxuXG5mdW5jdGlvbiBjYW1sX2ludDMyX2Jzd2FwKHgpIHtcbiAgcmV0dXJuICgoeCAmIDI1NSkgPDwgMjQpIHwgKCh4ICYgNjUyODApIDw8IDgpIHwgKCh4ICYgMTY3MTE2ODApID4+PiA4KSB8ICgoeCAmIDQyNzgxOTAwODApID4+PiAyNCk7XG59XG5cbnZhciBpbXVsID0gKE1hdGguaW11bCB8fCBmdW5jdGlvbiAoeCx5KSB7XG4gIHkgfD0gMDsgcmV0dXJuICgoKCh4ID4+IDE2KSAqIHkpIDw8IDE2KSArICh4ICYgMHhmZmZmKSAqIHkpfDA7IFxufSk7XG5cbnZhciBjYW1sX25hdGl2ZWludF9ic3dhcCA9IGNhbWxfaW50MzJfYnN3YXA7XG5cbmV4cG9ydCB7XG4gIGRpdiAsXG4gIG1vZF8gLFxuICBjYW1sX2Jzd2FwMTYgLFxuICBjYW1sX2ludDMyX2Jzd2FwICxcbiAgY2FtbF9uYXRpdmVpbnRfYnN3YXAgLFxuICBpbXVsICxcbiAgXG59XG4vKiBpbXVsIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2FtbF9pbnQzMiBmcm9tIFwiLi9jYW1sX2ludDMyLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2ludDY0IGZyb20gXCIuL2NhbWxfaW50NjQuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlX2RpZ2l0KGMpIHtcbiAgaWYgKGMgPj0gNjUpIHtcbiAgICBpZiAoYyA+PSA5Nykge1xuICAgICAgaWYgKGMgPj0gMTIzKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjIC0gODcgfCAwO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA+PSA5MSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYyAtIDU1IHwgMDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYyA+IDU3IHx8IGMgPCA0OCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYyAtIC8qIFwiMFwiICovNDggfCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludF9vZl9zdHJpbmdfYmFzZShwYXJhbSkge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSAvKiBPY3QgKi8wIDpcbiAgICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSAvKiBIZXggKi8xIDpcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgLyogRGVjICovMiA6XG4gICAgICAgIHJldHVybiAxMDtcbiAgICBjYXNlIC8qIEJpbiAqLzMgOlxuICAgICAgICByZXR1cm4gMjtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZV9zaWduX2FuZF9iYXNlKHMpIHtcbiAgdmFyIHNpZ24gPSAxO1xuICB2YXIgYmFzZSA9IC8qIERlYyAqLzI7XG4gIHZhciBpID0gMDtcbiAgdmFyIG1hdGNoID0gcy5jaGFyQ29kZUF0KGkpO1xuICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgY2FzZSA0MyA6XG4gICAgICAgIGkgPSBpICsgMSB8IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDQgOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIDQ1IDpcbiAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICBpID0gaSArIDEgfCAwO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgXG4gIH1cbiAgaWYgKHNbaV0gPT09IFwiMFwiKSB7XG4gICAgdmFyIG1hdGNoJDEgPSBzLmNoYXJDb2RlQXQoaSArIDEgfCAwKTtcbiAgICBpZiAobWF0Y2gkMSA+PSA4OSkge1xuICAgICAgaWYgKG1hdGNoJDEgPj0gMTExKSB7XG4gICAgICAgIGlmIChtYXRjaCQxIDwgMTIxKSB7XG4gICAgICAgICAgc3dpdGNoIChtYXRjaCQxIC0gMTExIHwgMCkge1xuICAgICAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgICAgICAgICBiYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgICBjYXNlIDMgOlxuICAgICAgICAgICAgY2FzZSA0IDpcbiAgICAgICAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgICBjYXNlIDcgOlxuICAgICAgICAgICAgY2FzZSA4IDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOSA6XG4gICAgICAgICAgICAgICAgYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMSA9PT0gOTgpIHtcbiAgICAgICAgYmFzZSA9IC8qIEJpbiAqLzM7XG4gICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKG1hdGNoJDEgIT09IDY2KSB7XG4gICAgICBpZiAobWF0Y2gkMSA+PSA3OSkge1xuICAgICAgICBzd2l0Y2ggKG1hdGNoJDEgLSA3OSB8IDApIHtcbiAgICAgICAgICBjYXNlIDAgOlxuICAgICAgICAgICAgICBiYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgICBjYXNlIDIgOlxuICAgICAgICAgIGNhc2UgMyA6XG4gICAgICAgICAgY2FzZSA0IDpcbiAgICAgICAgICBjYXNlIDUgOlxuICAgICAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgY2FzZSA4IDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA5IDpcbiAgICAgICAgICAgICAgYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9IC8qIEJpbiAqLzM7XG4gICAgICBpID0gaSArIDIgfCAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgaSxcbiAgICAgICAgICBzaWduLFxuICAgICAgICAgIGJhc2VcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY2FtbF9pbnRfb2Zfc3RyaW5nKHMpIHtcbiAgdmFyIG1hdGNoID0gcGFyc2Vfc2lnbl9hbmRfYmFzZShzKTtcbiAgdmFyIGkgPSBtYXRjaFswXTtcbiAgdmFyIGJhc2UgPSBpbnRfb2Zfc3RyaW5nX2Jhc2UobWF0Y2hbMl0pO1xuICB2YXIgdGhyZXNob2xkID0gNDI5NDk2NzI5NTtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgYyA9IGkgPCBsZW4gPyBzLmNoYXJDb2RlQXQoaSkgOiAvKiBcIlxcMDAwXCIgKi8wO1xuICB2YXIgZCA9IHBhcnNlX2RpZ2l0KGMpO1xuICBpZiAoZCA8IDAgfHwgZCA+PSBiYXNlKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJpbnRfb2Zfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgYXV4ID0gZnVuY3Rpb24gKF9hY2MsIF9rKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGsgPSBfaztcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKGsgPT09IGxlbikge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzLmNoYXJDb2RlQXQoayk7XG4gICAgICBpZiAoYSA9PT0gLyogXCJfXCIgKi85NSkge1xuICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgdmFyIHYgPSBwYXJzZV9kaWdpdChhKTtcbiAgICAgIGlmICh2IDwgMCB8fCB2ID49IGJhc2UpIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgICAgICBcImludF9vZl9zdHJpbmdcIlxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2MkMSA9IGJhc2UgKiBhY2MgKyB2O1xuICAgICAgaWYgKGFjYyQxID4gdGhyZXNob2xkKSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgXCJpbnRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgIF9hY2MgPSBhY2MkMTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICB2YXIgcmVzID0gbWF0Y2hbMV0gKiBhdXgoZCwgaSArIDEgfCAwKTtcbiAgdmFyIG9yX3JlcyA9IHJlcyB8IDA7XG4gIGlmIChiYXNlID09PSAxMCAmJiByZXMgIT09IG9yX3Jlcykge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIG9yX3Jlcztcbn1cblxuZnVuY3Rpb24gY2FtbF9pbnQ2NF9vZl9zdHJpbmcocykge1xuICB2YXIgbWF0Y2ggPSBwYXJzZV9zaWduX2FuZF9iYXNlKHMpO1xuICB2YXIgaGJhc2UgPSBtYXRjaFsyXTtcbiAgdmFyIGkgPSBtYXRjaFswXTtcbiAgdmFyIGJhc2UgPSBDYW1sX2ludDY0Lm9mX2ludDMyKGludF9vZl9zdHJpbmdfYmFzZShoYmFzZSkpO1xuICB2YXIgc2lnbiA9IENhbWxfaW50NjQub2ZfaW50MzIobWF0Y2hbMV0pO1xuICB2YXIgdGhyZXNob2xkO1xuICBzd2l0Y2ggKGhiYXNlKSB7XG4gICAgY2FzZSAvKiBPY3QgKi8wIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5taygtMSwgNTM2ODcwOTExKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBIZXggKi8xIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5taygtMSwgMjY4NDM1NDU1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBEZWMgKi8yIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5taygtMTcxNzk4NjkxOSwgNDI5NDk2NzI5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBCaW4gKi8zIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5tYXhfaW50O1xuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gIHZhciBjID0gaSA8IGxlbiA/IHMuY2hhckNvZGVBdChpKSA6IC8qIFwiXFwwMDBcIiAqLzA7XG4gIHZhciBkID0gQ2FtbF9pbnQ2NC5vZl9pbnQzMihwYXJzZV9kaWdpdChjKSk7XG4gIGlmIChDYW1sX2ludDY0Lmx0KGQsIENhbWxfaW50NjQuemVybykgfHwgQ2FtbF9pbnQ2NC5nZShkLCBiYXNlKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50NjRfb2Zfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgYXV4ID0gZnVuY3Rpb24gKF9hY2MsIF9rKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGsgPSBfaztcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKGsgPT09IGxlbikge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzLmNoYXJDb2RlQXQoayk7XG4gICAgICBpZiAoYSA9PT0gLyogXCJfXCIgKi85NSkge1xuICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgdmFyIHYgPSBDYW1sX2ludDY0Lm9mX2ludDMyKHBhcnNlX2RpZ2l0KGEpKTtcbiAgICAgIGlmIChDYW1sX2ludDY0Lmx0KHYsIENhbWxfaW50NjQuemVybykgfHwgQ2FtbF9pbnQ2NC5nZSh2LCBiYXNlKSB8fCBDYW1sX2ludDY0Lmd0KGFjYywgdGhyZXNob2xkKSkge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgICAgIFwiaW50NjRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgICB2YXIgYWNjJDEgPSBDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0Lm11bChiYXNlLCBhY2MpLCB2KTtcbiAgICAgIF9rID0gayArIDEgfCAwO1xuICAgICAgX2FjYyA9IGFjYyQxO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHZhciByZXMgPSBDYW1sX2ludDY0Lm11bChzaWduLCBhdXgoZCwgaSArIDEgfCAwKSk7XG4gIHZhciBvcl9yZXMgPSBDYW1sX2ludDY0Lm9yXyhyZXMsIENhbWxfaW50NjQuemVybyk7XG4gIGlmIChDYW1sX2ludDY0LmVxKGJhc2UsIENhbWxfaW50NjQubWsoMTAsIDApKSAmJiBDYW1sX2ludDY0Lm5lcShyZXMsIG9yX3JlcykpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICBcImludDY0X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIG9yX3Jlcztcbn1cblxuZnVuY3Rpb24gaW50X29mX2Jhc2UocGFyYW0pIHtcbiAgc3dpdGNoIChwYXJhbSkge1xuICAgIGNhc2UgLyogT2N0ICovMCA6XG4gICAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgLyogSGV4ICovMSA6XG4gICAgICAgIHJldHVybiAxNjtcbiAgICBjYXNlIC8qIERlYyAqLzIgOlxuICAgICAgICByZXR1cm4gMTA7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKGMpIHtcbiAgaWYgKGMgPj0gLyogXCJBXCIgKi82NSAmJiBjIDw9IC8qIFwiWlwiICovOTAgfHwgYyA+PSAvKiBcIlxcMTkyXCIgKi8xOTIgJiYgYyA8PSAvKiBcIlxcMjE0XCIgKi8yMTQgfHwgYyA+PSAvKiBcIlxcMjE2XCIgKi8yMTYgJiYgYyA8PSAvKiBcIlxcMjIyXCIgKi8yMjIpIHtcbiAgICByZXR1cm4gYyArIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZV9mb3JtYXQoZm10KSB7XG4gIHZhciBsZW4gPSBmbXQubGVuZ3RoO1xuICBpZiAobGVuID4gMzEpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImZvcm1hdF9pbnQ6IGZvcm1hdCB0b28gbG9uZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIGYgPSB7XG4gICAganVzdGlmeTogXCIrXCIsXG4gICAgc2lnbnN0eWxlOiBcIi1cIixcbiAgICBmaWx0ZXI6IFwiIFwiLFxuICAgIGFsdGVybmF0ZTogZmFsc2UsXG4gICAgYmFzZTogLyogRGVjICovMixcbiAgICBzaWduZWRjb252OiBmYWxzZSxcbiAgICB3aWR0aDogMCxcbiAgICB1cHBlcmNhc2U6IGZhbHNlLFxuICAgIHNpZ246IDEsXG4gICAgcHJlYzogLTEsXG4gICAgY29udjogXCJmXCJcbiAgfTtcbiAgdmFyIF9pID0gMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICByZXR1cm4gZjtcbiAgICB9XG4gICAgdmFyIGMgPSBmbXQuY2hhckNvZGVBdChpKTtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKGMgPj0gNjkpIHtcbiAgICAgIGlmIChjID49IDg4KSB7XG4gICAgICAgIGlmIChjID49IDEyMSkge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXRjaCAoYyAtIDg4IHwgMCkge1xuICAgICAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgICAgICAgICBmLmJhc2UgPSAvKiBIZXggKi8xO1xuICAgICAgICAgICAgICAgIGYudXBwZXJjYXNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICBjYXNlIDEzIDpcbiAgICAgICAgICAgIGNhc2UgMTQgOlxuICAgICAgICAgICAgY2FzZSAxNSA6XG4gICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyIDpcbiAgICAgICAgICAgIGNhc2UgMTcgOlxuICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMyA6XG4gICAgICAgICAgICAgICAgZi5iYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICBjYXNlIDI5IDpcbiAgICAgICAgICAgICAgICBmLmJhc2UgPSAvKiBEZWMgKi8yO1xuICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgICBjYXNlIDIgOlxuICAgICAgICAgICAgY2FzZSAzIDpcbiAgICAgICAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgICBjYXNlIDUgOlxuICAgICAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgICBjYXNlIDggOlxuICAgICAgICAgICAgY2FzZSA5IDpcbiAgICAgICAgICAgIGNhc2UgMTAgOlxuICAgICAgICAgICAgY2FzZSAxMSA6XG4gICAgICAgICAgICBjYXNlIDE2IDpcbiAgICAgICAgICAgIGNhc2UgMTggOlxuICAgICAgICAgICAgY2FzZSAxOSA6XG4gICAgICAgICAgICBjYXNlIDIwIDpcbiAgICAgICAgICAgIGNhc2UgMjEgOlxuICAgICAgICAgICAgY2FzZSAyMiA6XG4gICAgICAgICAgICBjYXNlIDI0IDpcbiAgICAgICAgICAgIGNhc2UgMjUgOlxuICAgICAgICAgICAgY2FzZSAyNiA6XG4gICAgICAgICAgICBjYXNlIDI3IDpcbiAgICAgICAgICAgIGNhc2UgMjggOlxuICAgICAgICAgICAgY2FzZSAzMCA6XG4gICAgICAgICAgICBjYXNlIDMxIDpcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzIgOlxuICAgICAgICAgICAgICAgIGYuYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGMgPj0gNzIpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmLnNpZ25lZGNvbnYgPSB0cnVlO1xuICAgICAgICBmLnVwcGVyY2FzZSA9IHRydWU7XG4gICAgICAgIGYuY29udiA9IFN0cmluZy5mcm9tQ2hhckNvZGUobG93ZXJjYXNlKGMpKTtcbiAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMzUgOlxuICAgICAgICAgICAgZi5hbHRlcm5hdGUgPSB0cnVlO1xuICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMzIgOlxuICAgICAgICBjYXNlIDQzIDpcbiAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDUgOlxuICAgICAgICAgICAgZi5qdXN0aWZ5ID0gXCItXCI7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA0NiA6XG4gICAgICAgICAgICBmLnByZWMgPSAwO1xuICAgICAgICAgICAgdmFyIGogPSBpICsgMSB8IDA7XG4gICAgICAgICAgICB3aGlsZSgoZnVuY3Rpb24oail7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB3ID0gZm10LmNoYXJDb2RlQXQoaikgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3ID49IDAgJiYgdyA8PSA5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGopKSgpKSB7XG4gICAgICAgICAgICAgIGYucHJlYyA9IChDYW1sX2ludDMyLmltdWwoZi5wcmVjLCAxMCkgKyBmbXQuY2hhckNvZGVBdChqKSB8IDApIC0gLyogXCIwXCIgKi80OCB8IDA7XG4gICAgICAgICAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX2kgPSBqO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDMzIDpcbiAgICAgICAgY2FzZSAzNCA6XG4gICAgICAgIGNhc2UgMzYgOlxuICAgICAgICBjYXNlIDM3IDpcbiAgICAgICAgY2FzZSAzOCA6XG4gICAgICAgIGNhc2UgMzkgOlxuICAgICAgICBjYXNlIDQwIDpcbiAgICAgICAgY2FzZSA0MSA6XG4gICAgICAgIGNhc2UgNDIgOlxuICAgICAgICBjYXNlIDQ0IDpcbiAgICAgICAgY2FzZSA0NyA6XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ4IDpcbiAgICAgICAgICAgIGYuZmlsdGVyID0gXCIwXCI7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA0OSA6XG4gICAgICAgIGNhc2UgNTAgOlxuICAgICAgICBjYXNlIDUxIDpcbiAgICAgICAgY2FzZSA1MiA6XG4gICAgICAgIGNhc2UgNTMgOlxuICAgICAgICBjYXNlIDU0IDpcbiAgICAgICAgY2FzZSA1NSA6XG4gICAgICAgIGNhc2UgNTYgOlxuICAgICAgICBjYXNlIDU3IDpcbiAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIGYuc2lnbnN0eWxlID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIGYud2lkdGggPSAwO1xuICAgICAgICAgIHZhciBqJDEgPSBpO1xuICAgICAgICAgIHdoaWxlKChmdW5jdGlvbihqJDEpe1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB3ID0gZm10LmNoYXJDb2RlQXQoaiQxKSAtIC8qIFwiMFwiICovNDggfCAwO1xuICAgICAgICAgICAgICAgIHJldHVybiB3ID49IDAgJiYgdyA8PSA5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0oaiQxKSkoKSkge1xuICAgICAgICAgICAgZi53aWR0aCA9IChDYW1sX2ludDMyLmltdWwoZi53aWR0aCwgMTApICsgZm10LmNoYXJDb2RlQXQoaiQxKSB8IDApIC0gLyogXCIwXCIgKi80OCB8IDA7XG4gICAgICAgICAgICBqJDEgPSBqJDEgKyAxIHwgMDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIF9pID0gaiQxO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgZi5zaWduZWRjb252ID0gdHJ1ZTtcbiAgICAgICAgICBmLmJhc2UgPSAvKiBEZWMgKi8yO1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgZi5zaWduZWRjb252ID0gdHJ1ZTtcbiAgICAgICAgICBmLmNvbnYgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIFxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluaXNoX2Zvcm1hdHRpbmcoY29uZmlnLCByYXdidWZmZXIpIHtcbiAgdmFyIGp1c3RpZnkgPSBjb25maWcuanVzdGlmeTtcbiAgdmFyIHNpZ25zdHlsZSA9IGNvbmZpZy5zaWduc3R5bGU7XG4gIHZhciBmaWx0ZXIgPSBjb25maWcuZmlsdGVyO1xuICB2YXIgYWx0ZXJuYXRlID0gY29uZmlnLmFsdGVybmF0ZTtcbiAgdmFyIGJhc2UgPSBjb25maWcuYmFzZTtcbiAgdmFyIHNpZ25lZGNvbnYgPSBjb25maWcuc2lnbmVkY29udjtcbiAgdmFyIHdpZHRoID0gY29uZmlnLndpZHRoO1xuICB2YXIgdXBwZXJjYXNlID0gY29uZmlnLnVwcGVyY2FzZTtcbiAgdmFyIHNpZ24gPSBjb25maWcuc2lnbjtcbiAgdmFyIGxlbiA9IHJhd2J1ZmZlci5sZW5ndGg7XG4gIGlmIChzaWduZWRjb252ICYmIChzaWduIDwgMCB8fCBzaWduc3R5bGUgIT09IFwiLVwiKSkge1xuICAgIGxlbiA9IGxlbiArIDEgfCAwO1xuICB9XG4gIGlmIChhbHRlcm5hdGUpIHtcbiAgICBpZiAoYmFzZSA9PT0gLyogT2N0ICovMCkge1xuICAgICAgbGVuID0gbGVuICsgMSB8IDA7XG4gICAgfSBlbHNlIGlmIChiYXNlID09PSAvKiBIZXggKi8xKSB7XG4gICAgICBsZW4gPSBsZW4gKyAyIHwgMDtcbiAgICB9XG4gICAgXG4gIH1cbiAgdmFyIGJ1ZmZlciA9IFwiXCI7XG4gIGlmIChqdXN0aWZ5ID09PSBcIitcIiAmJiBmaWx0ZXIgPT09IFwiIFwiKSB7XG4gICAgZm9yKHZhciBfZm9yID0gbGVuOyBfZm9yIDwgd2lkdGg7ICsrX2Zvcil7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBmaWx0ZXI7XG4gICAgfVxuICB9XG4gIGlmIChzaWduZWRjb252KSB7XG4gICAgaWYgKHNpZ24gPCAwKSB7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBcIi1cIjtcbiAgICB9IGVsc2UgaWYgKHNpZ25zdHlsZSAhPT0gXCItXCIpIHtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIHNpZ25zdHlsZTtcbiAgICB9XG4gICAgXG4gIH1cbiAgaWYgKGFsdGVybmF0ZSAmJiBiYXNlID09PSAvKiBPY3QgKi8wKSB7XG4gICAgYnVmZmVyID0gYnVmZmVyICsgXCIwXCI7XG4gIH1cbiAgaWYgKGFsdGVybmF0ZSAmJiBiYXNlID09PSAvKiBIZXggKi8xKSB7XG4gICAgYnVmZmVyID0gYnVmZmVyICsgXCIweFwiO1xuICB9XG4gIGlmIChqdXN0aWZ5ID09PSBcIitcIiAmJiBmaWx0ZXIgPT09IFwiMFwiKSB7XG4gICAgZm9yKHZhciBfZm9yJDEgPSBsZW47IF9mb3IkMSA8IHdpZHRoOyArK19mb3IkMSl7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBmaWx0ZXI7XG4gICAgfVxuICB9XG4gIGJ1ZmZlciA9IHVwcGVyY2FzZSA/IGJ1ZmZlciArIHJhd2J1ZmZlci50b1VwcGVyQ2FzZSgpIDogYnVmZmVyICsgcmF3YnVmZmVyO1xuICBpZiAoanVzdGlmeSA9PT0gXCItXCIpIHtcbiAgICBmb3IodmFyIF9mb3IkMiA9IGxlbjsgX2ZvciQyIDwgd2lkdGg7ICsrX2ZvciQyKXtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIFwiIFwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBjYW1sX2Zvcm1hdF9pbnQoZm10LCBpKSB7XG4gIGlmIChmbXQgPT09IFwiJWRcIikge1xuICAgIHJldHVybiBTdHJpbmcoaSk7XG4gIH1cbiAgdmFyIGYgPSBwYXJzZV9mb3JtYXQoZm10KTtcbiAgdmFyIGkkMSA9IGkgPCAwID8gKFxuICAgICAgZi5zaWduZWRjb252ID8gKGYuc2lnbiA9IC0xLCAtaSkgOiAoaSA+Pj4gMClcbiAgICApIDogaTtcbiAgdmFyIHMgPSBpJDEudG9TdHJpbmcoaW50X29mX2Jhc2UoZi5iYXNlKSk7XG4gIGlmIChmLnByZWMgPj0gMCkge1xuICAgIGYuZmlsdGVyID0gXCIgXCI7XG4gICAgdmFyIG4gPSBmLnByZWMgLSBzLmxlbmd0aCB8IDA7XG4gICAgaWYgKG4gPiAwKSB7XG4gICAgICBzID0gXCIwXCIucmVwZWF0KG4pICsgcztcbiAgICB9XG4gICAgXG4gIH1cbiAgcmV0dXJuIGZpbmlzaF9mb3JtYXR0aW5nKGYsIHMpO1xufVxuXG5mdW5jdGlvbiBkZWNfb2ZfcG9zX2ludDY0KHgpIHtcbiAgaWYgKCFDYW1sX2ludDY0Lmx0KHgsIENhbWxfaW50NjQuemVybykpIHtcbiAgICByZXR1cm4gQ2FtbF9pbnQ2NC50b19zdHJpbmcoeCk7XG4gIH1cbiAgdmFyIHdiYXNlID0gQ2FtbF9pbnQ2NC5taygxMCwgMCk7XG4gIHZhciB5ID0gQ2FtbF9pbnQ2NC5kaXNjYXJkX3NpZ24oeCk7XG4gIHZhciBtYXRjaCA9IENhbWxfaW50NjQuZGl2X21vZCh5LCB3YmFzZSk7XG4gIHZhciBtYXRjaCQxID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKENhbWxfaW50NjQuYWRkKENhbWxfaW50NjQubWsoOCwgMCksIG1hdGNoWzFdKSwgd2Jhc2UpO1xuICB2YXIgcXVvdGllbnQgPSBDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0Lm1rKC04NTg5OTM0NjAsIDIxNDc0ODM2NCksIG1hdGNoWzBdKSwgbWF0Y2gkMVswXSk7XG4gIHJldHVybiBDYW1sX2ludDY0LnRvX3N0cmluZyhxdW90aWVudCkgKyBcIjAxMjM0NTY3ODlcIltDYW1sX2ludDY0LnRvX2ludDMyKG1hdGNoJDFbMV0pXTtcbn1cblxuZnVuY3Rpb24gb2N0X29mX2ludDY0KHgpIHtcbiAgdmFyIHMgPSBcIlwiO1xuICB2YXIgd2Jhc2UgPSBDYW1sX2ludDY0Lm1rKDgsIDApO1xuICB2YXIgY3Z0YmwgPSBcIjAxMjM0NTY3XCI7XG4gIGlmIChDYW1sX2ludDY0Lmx0KHgsIENhbWxfaW50NjQuemVybykpIHtcbiAgICB2YXIgeSA9IENhbWxfaW50NjQuZGlzY2FyZF9zaWduKHgpO1xuICAgIHZhciBtYXRjaCA9IENhbWxfaW50NjQuZGl2X21vZCh5LCB3YmFzZSk7XG4gICAgdmFyIHF1b3RpZW50ID0gQ2FtbF9pbnQ2NC5hZGQoQ2FtbF9pbnQ2NC5taygwLCAyNjg0MzU0NTYpLCBtYXRjaFswXSk7XG4gICAgdmFyIG1vZHVsdXMgPSBtYXRjaFsxXTtcbiAgICBzID0gY3Z0YmxbQ2FtbF9pbnQ2NC50b19pbnQzMihtb2R1bHVzKV0gKyBzO1xuICAgIHdoaWxlKENhbWxfaW50NjQubmVxKHF1b3RpZW50LCBDYW1sX2ludDY0Lnplcm8pKSB7XG4gICAgICB2YXIgbWF0Y2gkMSA9IENhbWxfaW50NjQuZGl2X21vZChxdW90aWVudCwgd2Jhc2UpO1xuICAgICAgcXVvdGllbnQgPSBtYXRjaCQxWzBdO1xuICAgICAgbW9kdWx1cyA9IG1hdGNoJDFbMV07XG4gICAgICBzID0gY3Z0YmxbQ2FtbF9pbnQ2NC50b19pbnQzMihtb2R1bHVzKV0gKyBzO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1hdGNoJDIgPSBDYW1sX2ludDY0LmRpdl9tb2QoeCwgd2Jhc2UpO1xuICAgIHZhciBxdW90aWVudCQxID0gbWF0Y2gkMlswXTtcbiAgICB2YXIgbW9kdWx1cyQxID0gbWF0Y2gkMlsxXTtcbiAgICBzID0gY3Z0YmxbQ2FtbF9pbnQ2NC50b19pbnQzMihtb2R1bHVzJDEpXSArIHM7XG4gICAgd2hpbGUoQ2FtbF9pbnQ2NC5uZXEocXVvdGllbnQkMSwgQ2FtbF9pbnQ2NC56ZXJvKSkge1xuICAgICAgdmFyIG1hdGNoJDMgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQkMSwgd2Jhc2UpO1xuICAgICAgcXVvdGllbnQkMSA9IG1hdGNoJDNbMF07XG4gICAgICBtb2R1bHVzJDEgPSBtYXRjaCQzWzFdO1xuICAgICAgcyA9IGN2dGJsW0NhbWxfaW50NjQudG9faW50MzIobW9kdWx1cyQxKV0gKyBzO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50NjRfZm9ybWF0KGZtdCwgeCkge1xuICBpZiAoZm10ID09PSBcIiVkXCIpIHtcbiAgICByZXR1cm4gQ2FtbF9pbnQ2NC50b19zdHJpbmcoeCk7XG4gIH1cbiAgdmFyIGYgPSBwYXJzZV9mb3JtYXQoZm10KTtcbiAgdmFyIHgkMSA9IGYuc2lnbmVkY29udiAmJiBDYW1sX2ludDY0Lmx0KHgsIENhbWxfaW50NjQuemVybykgPyAoZi5zaWduID0gLTEsIENhbWxfaW50NjQubmVnKHgpKSA6IHg7XG4gIHZhciBtYXRjaCA9IGYuYmFzZTtcbiAgdmFyIHM7XG4gIHN3aXRjaCAobWF0Y2gpIHtcbiAgICBjYXNlIC8qIE9jdCAqLzAgOlxuICAgICAgICBzID0gb2N0X29mX2ludDY0KHgkMSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgLyogSGV4ICovMSA6XG4gICAgICAgIHMgPSBDYW1sX2ludDY0LnRvX2hleCh4JDEpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIERlYyAqLzIgOlxuICAgICAgICBzID0gZGVjX29mX3Bvc19pbnQ2NCh4JDEpO1xuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICB2YXIgZmlsbF9zO1xuICBpZiAoZi5wcmVjID49IDApIHtcbiAgICBmLmZpbHRlciA9IFwiIFwiO1xuICAgIHZhciBuID0gZi5wcmVjIC0gcy5sZW5ndGggfCAwO1xuICAgIGZpbGxfcyA9IG4gPiAwID8gXCIwXCIucmVwZWF0KG4pICsgcyA6IHM7XG4gIH0gZWxzZSB7XG4gICAgZmlsbF9zID0gcztcbiAgfVxuICByZXR1cm4gZmluaXNoX2Zvcm1hdHRpbmcoZiwgZmlsbF9zKTtcbn1cblxuZnVuY3Rpb24gY2FtbF9mb3JtYXRfZmxvYXQoZm10LCB4KSB7XG4gIHZhciBmID0gcGFyc2VfZm9ybWF0KGZtdCk7XG4gIHZhciBwcmVjID0gZi5wcmVjIDwgMCA/IDYgOiBmLnByZWM7XG4gIHZhciB4JDEgPSB4IDwgMCA/IChmLnNpZ24gPSAtMSwgLXgpIDogeDtcbiAgdmFyIHMgPSBcIlwiO1xuICBpZiAoaXNOYU4oeCQxKSkge1xuICAgIHMgPSBcIm5hblwiO1xuICAgIGYuZmlsdGVyID0gXCIgXCI7XG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUoeCQxKSkge1xuICAgIHZhciBtYXRjaCA9IGYuY29udjtcbiAgICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgICBjYXNlIFwiZVwiIDpcbiAgICAgICAgICBzID0geCQxLnRvRXhwb25lbnRpYWwocHJlYyk7XG4gICAgICAgICAgdmFyIGkgPSBzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoc1tpIC0gMyB8IDBdID09PSBcImVcIikge1xuICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgaSAtIDEgfCAwKSArIChcIjBcIiArIHMuc2xpY2UoaSAtIDEgfCAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZcIiA6XG4gICAgICAgICAgcyA9IHgkMS50b0ZpeGVkKHByZWMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImdcIiA6XG4gICAgICAgICAgdmFyIHByZWMkMSA9IHByZWMgIT09IDAgPyBwcmVjIDogMTtcbiAgICAgICAgICBzID0geCQxLnRvRXhwb25lbnRpYWwocHJlYyQxIC0gMSB8IDApO1xuICAgICAgICAgIHZhciBqID0gcy5pbmRleE9mKFwiZVwiKTtcbiAgICAgICAgICB2YXIgZXhwID0gTnVtYmVyKHMuc2xpY2UoaiArIDEgfCAwKSkgfCAwO1xuICAgICAgICAgIGlmIChleHAgPCAtNCB8fCB4JDEgPj0gMWUyMSB8fCB4JDEudG9GaXhlZCgpLmxlbmd0aCA+IHByZWMkMSkge1xuICAgICAgICAgICAgdmFyIGkkMSA9IGogLSAxIHwgMDtcbiAgICAgICAgICAgIHdoaWxlKHNbaSQxXSA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgaSQxID0gaSQxIC0gMSB8IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHNbaSQxXSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgaSQxID0gaSQxIC0gMSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzID0gcy5zbGljZSgwLCBpJDEgKyAxIHwgMCkgKyBzLnNsaWNlKGopO1xuICAgICAgICAgICAgdmFyIGkkMiA9IHMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNbaSQyIC0gMyB8IDBdID09PSBcImVcIikge1xuICAgICAgICAgICAgICBzID0gcy5zbGljZSgwLCBpJDIgLSAxIHwgMCkgKyAoXCIwXCIgKyBzLnNsaWNlKGkkMiAtIDEgfCAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHAgPSBwcmVjJDE7XG4gICAgICAgICAgICBpZiAoZXhwIDwgMCkge1xuICAgICAgICAgICAgICBwID0gcCAtIChleHAgKyAxIHwgMCkgfCAwO1xuICAgICAgICAgICAgICBzID0geCQxLnRvRml4ZWQocCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGlsZSgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMgPSB4JDEudG9GaXhlZChwKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5sZW5ndGggPiAocHJlYyQxICsgMSB8IDApO1xuICAgICAgICAgICAgICAgICAgICB9KSgpKSB7XG4gICAgICAgICAgICAgICAgcCA9IHAgLSAxIHwgMDtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwICE9PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcy5sZW5ndGggLSAxIHwgMDtcbiAgICAgICAgICAgICAgd2hpbGUoc1trXSA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICBrID0gayAtIDEgfCAwO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoc1trXSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICBrID0gayAtIDEgfCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIGsgKyAxIHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcyA9IFwiaW5mXCI7XG4gICAgZi5maWx0ZXIgPSBcIiBcIjtcbiAgfVxuICByZXR1cm4gZmluaXNoX2Zvcm1hdHRpbmcoZiwgcyk7XG59XG5cbnZhciBjYW1sX2hleHN0cmluZ19vZl9mbG9hdCA9IChmdW5jdGlvbih4LHByZWMsc3R5bGUpe1xuICBpZiAoIWlzRmluaXRlKHgpKSB7XG4gICAgaWYgKGlzTmFOKHgpKSByZXR1cm4gXCJuYW5cIjtcbiAgICByZXR1cm4geCA+IDAgPyBcImluZmluaXR5XCI6XCItaW5maW5pdHlcIjtcbiAgfVxuICB2YXIgc2lnbiA9ICh4PT0wICYmIDEveCA9PSAtSW5maW5pdHkpPzE6KHg+PTApPzA6MTtcbiAgaWYoc2lnbikgeCA9IC14O1xuICB2YXIgZXhwID0gMDtcbiAgaWYgKHggPT0gMCkgeyB9XG4gIGVsc2UgaWYgKHggPCAxKSB7XG4gICAgd2hpbGUgKHggPCAxICYmIGV4cCA+IC0xMDIyKSAgeyB4ICo9IDI7IGV4cC0tIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoeCA+PSAyKSB7IHggLz0gMjsgZXhwKysgfVxuICB9XG4gIHZhciBleHBfc2lnbiA9IGV4cCA8IDAgPyAnJyA6ICcrJztcbiAgdmFyIHNpZ25fc3RyID0gJyc7XG4gIGlmIChzaWduKSBzaWduX3N0ciA9ICctJ1xuICBlbHNlIHtcbiAgICBzd2l0Y2goc3R5bGUpe1xuICAgIGNhc2UgNDMgLyogJysnICovOiBzaWduX3N0ciA9ICcrJzsgYnJlYWs7XG4gICAgY2FzZSAzMiAvKiAnICcgKi86IHNpZ25fc3RyID0gJyAnOyBicmVhaztcbiAgICBkZWZhdWx0OiBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKHByZWMgPj0gMCAmJiBwcmVjIDwgMTMpIHtcbiAgICAvKiBJZiBhIHByZWNpc2lvbiBpcyBnaXZlbiwgYW5kIGlzIHNtYWxsLCByb3VuZCBtYW50aXNzYSBhY2NvcmRpbmdseSAqL1xuICAgICAgdmFyIGNzdCA9IE1hdGgucG93KDIscHJlYyAqIDQpO1xuICAgICAgeCA9IE1hdGgucm91bmQoeCAqIGNzdCkgLyBjc3Q7XG4gIH1cbiAgdmFyIHhfc3RyID0geC50b1N0cmluZygxNik7XG4gIGlmKHByZWMgPj0gMCl7XG4gICAgICB2YXIgaWR4ID0geF9zdHIuaW5kZXhPZignLicpO1xuICAgIGlmKGlkeDwwKSB7XG4gICAgICB4X3N0ciArPSAnLicgKyAgJzAnLnJlcGVhdChwcmVjKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgc2l6ZSA9IGlkeCsxK3ByZWM7XG4gICAgICBpZih4X3N0ci5sZW5ndGggPCBzaXplKVxuICAgICAgICB4X3N0ciArPSAnMCcucmVwZWF0KHNpemUgLSB4X3N0ci5sZW5ndGgpO1xuICAgICAgZWxzZVxuICAgICAgICB4X3N0ciA9IHhfc3RyLnN1YnN0cigwLHNpemUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gIChzaWduX3N0ciArICcweCcgKyB4X3N0ciArICdwJyArIGV4cF9zaWduICsgZXhwLnRvU3RyaW5nKDEwKSk7XG59KTtcblxudmFyIGZsb2F0X29mX3N0cmluZyA9IChmdW5jdGlvbihzLGV4bil7XG5cbiAgICB2YXIgcmVzID0gK3M7XG4gICAgaWYgKChzLmxlbmd0aCA+IDApICYmIChyZXMgPT09IHJlcykpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgcyA9IHMucmVwbGFjZSgvXy9nLCBcIlwiKTtcbiAgICByZXMgPSArcztcbiAgICBpZiAoKChzLmxlbmd0aCA+IDApICYmIChyZXMgPT09IHJlcykpIHx8IC9eWystXT9uYW4kL2kudGVzdChzKSkge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgdmFyIG0gPSAvXiAqKFsrLV0/KTB4KFswLTlhLWZdKylcXC4/KFswLTlhLWZdKilwKFsrLV0/WzAtOV0rKS9pLmV4ZWMocyk7XG4gICAgLy8gICAgICAgICAgICAxICAgICAgICAyICAgICAgICAgICAgIDMgICAgICAgICAgIDRcbiAgICBpZihtKXtcbiAgICAgICAgdmFyIG0zID0gbVszXS5yZXBsYWNlKC8wKyQvLCcnKTtcbiAgICAgICAgdmFyIG1hbnRpc3NhID0gcGFyc2VJbnQobVsxXSArIG1bMl0gKyBtMywgMTYpO1xuICAgICAgICB2YXIgZXhwb25lbnQgPSAobVs0XXwwKSAtIDQqbTMubGVuZ3RoO1xuICAgICAgICByZXMgPSBtYW50aXNzYSAqIE1hdGgucG93KDIsIGV4cG9uZW50KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKC9eXFwrP2luZihpbml0eSk/JC9pLnRlc3QocykpXG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICBpZiAoL14taW5mKGluaXR5KT8kL2kudGVzdChzKSlcbiAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICB0aHJvdyBleG47XG59KTtcblxuZnVuY3Rpb24gY2FtbF9mbG9hdF9vZl9zdHJpbmcocykge1xuICByZXR1cm4gZmxvYXRfb2Zfc3RyaW5nKHMsIFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgXCJmbG9hdF9vZl9zdHJpbmdcIlxuICAgICAgICAgICAgXSk7XG59XG5cbnZhciBjYW1sX25hdGl2ZWludF9mb3JtYXQgPSBjYW1sX2Zvcm1hdF9pbnQ7XG5cbnZhciBjYW1sX2ludDMyX2Zvcm1hdCA9IGNhbWxfZm9ybWF0X2ludDtcblxudmFyIGNhbWxfaW50MzJfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuXG52YXIgY2FtbF9uYXRpdmVpbnRfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuXG5leHBvcnQge1xuICBjYW1sX2Zvcm1hdF9mbG9hdCAsXG4gIGNhbWxfaGV4c3RyaW5nX29mX2Zsb2F0ICxcbiAgY2FtbF9mb3JtYXRfaW50ICxcbiAgY2FtbF9uYXRpdmVpbnRfZm9ybWF0ICxcbiAgY2FtbF9pbnQzMl9mb3JtYXQgLFxuICBjYW1sX2Zsb2F0X29mX3N0cmluZyAsXG4gIGNhbWxfaW50NjRfZm9ybWF0ICxcbiAgY2FtbF9pbnRfb2Zfc3RyaW5nICxcbiAgY2FtbF9pbnQzMl9vZl9zdHJpbmcgLFxuICBjYW1sX2ludDY0X29mX3N0cmluZyAsXG4gIGNhbWxfbmF0aXZlaW50X29mX3N0cmluZyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9pbyBmcm9tIFwiLi9jYW1sX2lvLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX3N5cyBmcm9tIFwiLi9jYW1sX3N5cy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9ieXRlcyBmcm9tIFwiLi9jYW1sX2J5dGVzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2Zvcm1hdCBmcm9tIFwiLi9jYW1sX2Zvcm1hdC5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9zdHJpbmcgZnJvbSBcIi4vY2FtbF9zdHJpbmcuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfanNfZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2pzX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwgZnJvbSBcIi4vY2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcyBmcm9tIFwiLi9jYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuanNcIjtcblxuZnVuY3Rpb24gZmFpbHdpdGgocykge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgIHNcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGludmFsaWRfYXJnKHMpIHtcbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICBzXG4gICAgICBdO1xufVxuXG52YXIgRXhpdCA9IENhbWxfZXhjZXB0aW9ucy5jcmVhdGUoXCJQZXJ2YXNpdmVzLkV4aXRcIik7XG5cbmZ1bmN0aW9uIGFicyh4KSB7XG4gIGlmICh4ID49IDApIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLXggfCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxub3QoeCkge1xuICByZXR1cm4geCBeIC0xO1xufVxuXG52YXIgbWluX2ludCA9IC0yMTQ3NDgzNjQ4O1xuXG5mdW5jdGlvbiBjbGFzc2lmeV9mbG9hdCh4KSB7XG4gIGlmIChpc0Zpbml0ZSh4KSkge1xuICAgIGlmIChNYXRoLmFicyh4KSA+PSAyLjIyNTA3Mzg1ODUwNzIwMTM4ZS0zMDgpIHtcbiAgICAgIHJldHVybiAvKiBGUF9ub3JtYWwgKi8wO1xuICAgIH0gZWxzZSBpZiAoeCAhPT0gMCkge1xuICAgICAgcmV0dXJuIC8qIEZQX3N1Ym5vcm1hbCAqLzE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBGUF96ZXJvICovMjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOYU4oeCkpIHtcbiAgICByZXR1cm4gLyogRlBfbmFuICovNDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogRlBfaW5maW5pdGUgKi8zO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoYXJfb2ZfaW50KG4pIHtcbiAgaWYgKG4gPCAwIHx8IG4gPiAyNTUpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImNoYXJfb2ZfaW50XCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Jvb2woYikge1xuICBpZiAoYikge1xuICAgIHJldHVybiBcInRydWVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJmYWxzZVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvb2xfb2Zfc3RyaW5nKHBhcmFtKSB7XG4gIHN3aXRjaCAocGFyYW0pIHtcbiAgICBjYXNlIFwiZmFsc2VcIiA6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwidHJ1ZVwiIDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcImJvb2xfb2Zfc3RyaW5nXCJcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvb2xfb2Zfc3RyaW5nX29wdChwYXJhbSkge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSBcImZhbHNlXCIgOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcInRydWVcIiA6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludF9vZl9zdHJpbmdfb3B0KHMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKHMpO1xuICB9XG4gIGNhdGNoIChyYXdfZXhuKXtcbiAgICB2YXIgZXhuID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfZXhuKTtcbiAgICBpZiAoZXhuWzBdID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB0aHJvdyBleG47XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRfZmxvYXRfbGV4ZW0ocykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsKSB7XG4gICAgICByZXR1cm4gcyArIFwiLlwiO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQocywgaSk7XG4gICAgaWYgKG1hdGNoID49IDQ4KSB7XG4gICAgICBpZiAobWF0Y2ggPj0gNTgpIHtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgaWYgKG1hdGNoICE9PSA0NSkge1xuICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Zsb2F0KGYpIHtcbiAgcmV0dXJuIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpO1xufVxuXG5mdW5jdGlvbiBmbG9hdF9vZl9zdHJpbmdfb3B0KHMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9mbG9hdF9vZl9zdHJpbmcocyk7XG4gIH1cbiAgY2F0Y2ggKHJhd19leG4pe1xuICAgIHZhciBleG4gPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19leG4pO1xuICAgIGlmIChleG5bMF0gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHRocm93IGV4bjtcbiAgfVxufVxuXG5mdW5jdGlvbiAkYXQobDEsIGwyKSB7XG4gIGlmIChsMSkge1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIGwxWzBdLFxuICAgICAgICAgICAgJGF0KGwxWzFdLCBsMilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsMjtcbiAgfVxufVxuXG52YXIgc3RkaW4gPSBDYW1sX2lvLnN0ZGluO1xuXG52YXIgc3Rkb3V0ID0gQ2FtbF9pby5zdGRvdXQ7XG5cbnZhciBzdGRlcnIgPSBDYW1sX2lvLnN0ZGVycjtcblxuZnVuY3Rpb24gb3Blbl9vdXRfZ2VuKG1vZGUsIHBlcm0sIG5hbWUpIHtcbiAgdmFyIGMgPSBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX29wZW5fZGVzY3JpcHRvcl9vdXRcIikoQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9zeXNfb3BlblwiKShuYW1lLCBtb2RlLCBwZXJtKSk7XG4gIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfc2V0X2NoYW5uZWxfbmFtZVwiKShjLCBuYW1lKTtcbiAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIG9wZW5fb3V0KG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5fb3V0X2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl93cm9ubHkgKi8xLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2NyZWF0ICovMyxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdHJ1bmMgKi80LFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdGV4dCAqLzcsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSwgNDM4LCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9vdXRfYmluKG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5fb3V0X2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl93cm9ubHkgKi8xLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2NyZWF0ICovMyxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdHJ1bmMgKi80LFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE9wZW5fYmluYXJ5ICovNixcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLCA0MzgsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBmbHVzaF9hbGwocGFyYW0pIHtcbiAgdmFyIF9wYXJhbSA9IENhbWxfaW8uY2FtbF9tbF9vdXRfY2hhbm5lbHNfbGlzdCh1bmRlZmluZWQpO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtJDEgPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSQxKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHBhcmFtJDFbMF0pO1xuICAgIH1cbiAgICBjYXRjaCAocmF3X2V4bil7XG4gICAgICB2YXIgZXhuID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfZXhuKTtcbiAgICAgIGlmIChleG5bMF0gIT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLnN5c19lcnJvcikge1xuICAgICAgICB0aHJvdyBleG47XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW0kMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9ieXRlcyhvYywgcykge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9vdXRwdXRfYnl0ZXNcIikob2MsIHMsIDAsIHMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gb3V0cHV0X3N0cmluZyhvYywgcykge1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dChvYywgcywgMCwgcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBvdXRwdXQob2MsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIm91dHB1dFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfb3V0cHV0X2J5dGVzXCIpKG9jLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9zdWJzdHJpbmcob2MsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIm91dHB1dF9zdWJzdHJpbmdcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0KG9jLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIG91dHB1dF92YWx1ZShjaGFuLCB2KSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX291dHB1dF92YWx1ZVwiKShjaGFuLCB2LCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9vdXQob2MpIHtcbiAgQ2FtbF9pby5jYW1sX21sX2ZsdXNoKG9jKTtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKShvYyk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX291dF9ub2VycihvYykge1xuICB0cnkge1xuICAgIENhbWxfaW8uY2FtbF9tbF9mbHVzaChvYyk7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgXG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9jbG9zZV9jaGFubmVsXCIpKG9jKTtcbiAgfVxuICBjYXRjaCAoZXhuJDEpe1xuICAgIHJldHVybiA7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3Blbl9pbl9nZW4obW9kZSwgcGVybSwgbmFtZSkge1xuICB2YXIgYyA9IENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX2luXCIpKENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfc3lzX29wZW5cIikobmFtZSwgbW9kZSwgcGVybSkpO1xuICBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX3NldF9jaGFubmVsX25hbWVcIikoYywgbmFtZSk7XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBvcGVuX2luKG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5faW5fZ2VuKC8qIDo6ICovW1xuICAgICAgICAgICAgICAvKiBPcGVuX3Jkb25seSAqLzAsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIE9wZW5fdGV4dCAqLzcsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDAsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBvcGVuX2luX2JpbihuYW1lKSB7XG4gIHJldHVybiBvcGVuX2luX2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl9yZG9ubHkgKi8wLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2JpbmFyeSAqLzYsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDAsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBpbnB1dChpYywgcywgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5wdXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0XCIpKGljLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIHVuc2FmZV9yZWFsbHlfaW5wdXQoaWMsIHMsIF9vZnMsIF9sZW4pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsZW4gPSBfbGVuO1xuICAgIHZhciBvZnMgPSBfb2ZzO1xuICAgIGlmIChsZW4gPD0gMCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHIgPSBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0XCIpKGljLCBzLCBvZnMsIGxlbik7XG4gICAgaWYgKHIgPT09IDApIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmVuZF9vZl9maWxlO1xuICAgIH1cbiAgICBfbGVuID0gbGVuIC0gciB8IDA7XG4gICAgX29mcyA9IG9mcyArIHIgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVhbGx5X2lucHV0KGljLCBzLCBvZnMsIGxlbikge1xuICBpZiAob2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IChzLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJyZWFsbHlfaW5wdXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiB1bnNhZmVfcmVhbGx5X2lucHV0KGljLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIHJlYWxseV9pbnB1dF9zdHJpbmcoaWMsIGxlbikge1xuICB2YXIgcyA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuKTtcbiAgcmVhbGx5X2lucHV0KGljLCBzLCAwLCBsZW4pO1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcocyk7XG59XG5cbmZ1bmN0aW9uIGlucHV0X2xpbmUoY2hhbikge1xuICB2YXIgYnVpbGRfcmVzdWx0ID0gZnVuY3Rpb24gKGJ1ZiwgX3BvcywgX3BhcmFtKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgICAgdmFyIHBvcyA9IF9wb3M7XG4gICAgICBpZiAoIXBhcmFtKSB7XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgICB9XG4gICAgICB2YXIgaGQgPSBwYXJhbVswXTtcbiAgICAgIHZhciBsZW4gPSBoZC5sZW5ndGg7XG4gICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhoZCwgMCwgYnVmLCBwb3MgLSBsZW4gfCAwLCBsZW4pO1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfcG9zID0gcG9zIC0gbGVuIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICB2YXIgc2NhbiA9IGZ1bmN0aW9uIChfYWNjdSwgX2xlbikge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBsZW4gPSBfbGVuO1xuICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgIHZhciBuID0gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9pbnB1dF9zY2FuX2xpbmVcIikoY2hhbik7XG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBpZiAoYWNjdSkge1xuICAgICAgICAgIHJldHVybiBidWlsZF9yZXN1bHQoQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsZW4pLCBsZW4sIGFjY3UpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmVuZF9vZl9maWxlO1xuICAgICAgfVxuICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgIHZhciByZXMgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG4gLSAxIHwgMCk7XG4gICAgICAgIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfaW5wdXRcIikoY2hhbiwgcmVzLCAwLCBuIC0gMSB8IDApO1xuICAgICAgICBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0X2NoYXJcIikoY2hhbik7XG4gICAgICAgIGlmICghYWNjdSkge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiQxID0gKGxlbiArIG4gfCAwKSAtIDEgfCAwO1xuICAgICAgICByZXR1cm4gYnVpbGRfcmVzdWx0KENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuJDEpLCBsZW4kMSwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHJlcyxcbiAgICAgICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICB2YXIgYmVnID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcygtbiB8IDApO1xuICAgICAgQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9pbnB1dFwiKShjaGFuLCBiZWcsIDAsIC1uIHwgMCk7XG4gICAgICBfbGVuID0gbGVuIC0gbiB8IDA7XG4gICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICBiZWcsXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHNjYW4oLyogW10gKi8wLCAwKSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX2luX25vZXJyKGljKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKShpYyk7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludF9jaGFyKGMpIHtcbiAgcmV0dXJuIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIGMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdHJpbmcocykge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRvdXQsIHMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9ieXRlcyhzKSB7XG4gIHJldHVybiBvdXRwdXRfYnl0ZXMoc3Rkb3V0LCBzKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRfaW50KGkpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3Rkb3V0LCBTdHJpbmcoaSkpO1xufVxuXG5mdW5jdGlvbiBwcmludF9mbG9hdChmKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZG91dCwgdmFsaWRfZmxvYXRfbGV4ZW0oQ2FtbF9mb3JtYXQuY2FtbF9mb3JtYXRfZmxvYXQoXCIlLjEyZ1wiLCBmKSkpO1xufVxuXG5mdW5jdGlvbiBwcmludF9uZXdsaW5lKHBhcmFtKSB7XG4gIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIC8qIFwiXFxuXCIgKi8xMCk7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfY2hhcihjKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCBjKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3RkZXJyLCBzKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfYnl0ZXMocykge1xuICByZXR1cm4gb3V0cHV0X2J5dGVzKHN0ZGVyciwgcyk7XG59XG5cbmZ1bmN0aW9uIHByZXJyX2ludChpKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZGVyciwgU3RyaW5nKGkpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfZmxvYXQoZikge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRlcnIsIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfbmV3bGluZShwYXJhbSkge1xuICBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCAvKiBcIlxcblwiICovMTApO1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHN0ZGVycik7XG59XG5cbmZ1bmN0aW9uIHJlYWRfbGluZShwYXJhbSkge1xuICBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbiAgcmV0dXJuIGlucHV0X2xpbmUoc3RkaW4pO1xufVxuXG5mdW5jdGlvbiByZWFkX2ludChwYXJhbSkge1xuICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9pbnRfb3B0KHBhcmFtKSB7XG4gIHJldHVybiBpbnRfb2Zfc3RyaW5nX29wdCgoQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHN0ZG91dCksIGlucHV0X2xpbmUoc3RkaW4pKSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfZmxvYXQocGFyYW0pIHtcbiAgcmV0dXJuIENhbWxfZm9ybWF0LmNhbWxfZmxvYXRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9mbG9hdF9vcHQocGFyYW0pIHtcbiAgcmV0dXJuIGZsb2F0X29mX3N0cmluZ19vcHQoKENhbWxfaW8uY2FtbF9tbF9mbHVzaChzdGRvdXQpLCBpbnB1dF9saW5lKHN0ZGluKSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZm9ybWF0KHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxuZnVuY3Rpb24gJGNhcmV0JGNhcmV0KHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmNvbmNhdF9mbXQocGFyYW1bMF0sIHBhcmFtJDFbMF0pLFxuICAgICAgICAgIHBhcmFtWzFdICsgKFwiJSxcIiArIHBhcmFtJDFbMV0pXG4gICAgICAgIF07XG59XG5cbnZhciBleGl0X2Z1bmN0aW9uID0ge1xuICBjb250ZW50czogZmx1c2hfYWxsXG59O1xuXG5mdW5jdGlvbiBhdF9leGl0KGYpIHtcbiAgdmFyIGcgPSBleGl0X2Z1bmN0aW9uLmNvbnRlbnRzO1xuICBleGl0X2Z1bmN0aW9uLmNvbnRlbnRzID0gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgQ3VycnkuXzEoZiwgdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBDdXJyeS5fMShnLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuICBcbn1cblxuZnVuY3Rpb24gZG9fYXRfZXhpdChwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzEoZXhpdF9mdW5jdGlvbi5jb250ZW50cywgdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gZXhpdChyZXRjb2RlKSB7XG4gIGRvX2F0X2V4aXQodW5kZWZpbmVkKTtcbiAgcmV0dXJuIENhbWxfc3lzLmNhbWxfc3lzX2V4aXQocmV0Y29kZSk7XG59XG5cbnZhciBtYXhfaW50ID0gMjE0NzQ4MzY0NztcblxudmFyIGluZmluaXR5ID0gSW5maW5pdHk7XG5cbnZhciBuZWdfaW5maW5pdHkgPSAtSW5maW5pdHk7XG5cbnZhciBtYXhfZmxvYXQgPSAxLjc5NzY5MzEzNDg2MjMxNTcxZSszMDg7XG5cbnZhciBtaW5fZmxvYXQgPSAyLjIyNTA3Mzg1ODUwNzIwMTM4ZS0zMDg7XG5cbnZhciBlcHNpbG9uX2Zsb2F0ID0gMi4yMjA0NDYwNDkyNTAzMTMwOGUtMTY7XG5cbnZhciBmbHVzaCA9IENhbWxfaW8uY2FtbF9tbF9mbHVzaDtcblxudmFyIG91dHB1dF9jaGFyID0gQ2FtbF9pby5jYW1sX21sX291dHB1dF9jaGFyO1xuXG52YXIgb3V0cHV0X2J5dGUgPSBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXI7XG5cbmZ1bmN0aW9uIG91dHB1dF9iaW5hcnlfaW50KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9vdXRwdXRfaW50XCIpKHByaW0sIHByaW0kMSk7XG59XG5cbmZ1bmN0aW9uIHNlZWtfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX291dFwiKShwcmltLCBwcmltJDEpO1xufVxuXG5mdW5jdGlvbiBwb3Nfb3V0KHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfcG9zX291dFwiKShwcmltKTtcbn1cblxuZnVuY3Rpb24gb3V0X2NoYW5uZWxfbGVuZ3RoKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2hhbm5lbF9zaXplXCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBzZXRfYmluYXJ5X21vZGVfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIikocHJpbSwgcHJpbSQxKTtcbn1cblxuZnVuY3Rpb24gaW5wdXRfY2hhcihwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0X2NoYXJcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGlucHV0X2J5dGUocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9pbnB1dF9jaGFyXCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBpbnB1dF9iaW5hcnlfaW50KHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfaW5wdXRfaW50XCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBpbnB1dF92YWx1ZShwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX2lucHV0X3ZhbHVlXCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBzZWVrX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX2luXCIpKHByaW0sIHByaW0kMSk7XG59XG5cbmZ1bmN0aW9uIHBvc19pbihwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX3Bvc19pblwiKShwcmltKTtcbn1cblxuZnVuY3Rpb24gaW5fY2hhbm5lbF9sZW5ndGgocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9jaGFubmVsX3NpemVcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX2luKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKShwcmltKTtcbn1cblxuZnVuY3Rpb24gc2V0X2JpbmFyeV9tb2RlX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIikocHJpbSwgcHJpbSQxKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlX3NlZWtfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX291dF82NFwiKShwcmltLCBwcmltJDEpO1xufVxuXG5mdW5jdGlvbiBMYXJnZUZpbGVfcG9zX291dChwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX3Bvc19vdXRfNjRcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9vdXRfY2hhbm5lbF9sZW5ndGgocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9jaGFubmVsX3NpemVfNjRcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9zZWVrX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX2luXzY0XCIpKHByaW0sIHByaW0kMSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9wb3NfaW4ocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9wb3NfaW5fNjRcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9pbl9jaGFubmVsX2xlbmd0aChwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2NoYW5uZWxfc2l6ZV82NFwiKShwcmltKTtcbn1cblxudmFyIExhcmdlRmlsZSA9IHtcbiAgc2Vla19vdXQ6IExhcmdlRmlsZV9zZWVrX291dCxcbiAgcG9zX291dDogTGFyZ2VGaWxlX3Bvc19vdXQsXG4gIG91dF9jaGFubmVsX2xlbmd0aDogTGFyZ2VGaWxlX291dF9jaGFubmVsX2xlbmd0aCxcbiAgc2Vla19pbjogTGFyZ2VGaWxlX3NlZWtfaW4sXG4gIHBvc19pbjogTGFyZ2VGaWxlX3Bvc19pbixcbiAgaW5fY2hhbm5lbF9sZW5ndGg6IExhcmdlRmlsZV9pbl9jaGFubmVsX2xlbmd0aFxufTtcblxuZXhwb3J0IHtcbiAgaW52YWxpZF9hcmcgLFxuICBmYWlsd2l0aCAsXG4gIEV4aXQgLFxuICBhYnMgLFxuICBtYXhfaW50ICxcbiAgbWluX2ludCAsXG4gIGxub3QgLFxuICBpbmZpbml0eSAsXG4gIG5lZ19pbmZpbml0eSAsXG4gIG1heF9mbG9hdCAsXG4gIG1pbl9mbG9hdCAsXG4gIGVwc2lsb25fZmxvYXQgLFxuICBjbGFzc2lmeV9mbG9hdCAsXG4gIGNoYXJfb2ZfaW50ICxcbiAgc3RyaW5nX29mX2Jvb2wgLFxuICBib29sX29mX3N0cmluZyAsXG4gIGJvb2xfb2Zfc3RyaW5nX29wdCAsXG4gIGludF9vZl9zdHJpbmdfb3B0ICxcbiAgc3RyaW5nX29mX2Zsb2F0ICxcbiAgZmxvYXRfb2Zfc3RyaW5nX29wdCAsXG4gICRhdCAsXG4gIHN0ZGluICxcbiAgc3Rkb3V0ICxcbiAgc3RkZXJyICxcbiAgcHJpbnRfY2hhciAsXG4gIHByaW50X3N0cmluZyAsXG4gIHByaW50X2J5dGVzICxcbiAgcHJpbnRfaW50ICxcbiAgcHJpbnRfZmxvYXQgLFxuICBwcmludF9uZXdsaW5lICxcbiAgcHJlcnJfY2hhciAsXG4gIHByZXJyX3N0cmluZyAsXG4gIHByZXJyX2J5dGVzICxcbiAgcHJlcnJfaW50ICxcbiAgcHJlcnJfZmxvYXQgLFxuICBwcmVycl9uZXdsaW5lICxcbiAgcmVhZF9saW5lICxcbiAgcmVhZF9pbnQgLFxuICByZWFkX2ludF9vcHQgLFxuICByZWFkX2Zsb2F0ICxcbiAgcmVhZF9mbG9hdF9vcHQgLFxuICBvcGVuX291dCAsXG4gIG9wZW5fb3V0X2JpbiAsXG4gIG9wZW5fb3V0X2dlbiAsXG4gIGZsdXNoICxcbiAgZmx1c2hfYWxsICxcbiAgb3V0cHV0X2NoYXIgLFxuICBvdXRwdXRfc3RyaW5nICxcbiAgb3V0cHV0X2J5dGVzICxcbiAgb3V0cHV0ICxcbiAgb3V0cHV0X3N1YnN0cmluZyAsXG4gIG91dHB1dF9ieXRlICxcbiAgb3V0cHV0X2JpbmFyeV9pbnQgLFxuICBvdXRwdXRfdmFsdWUgLFxuICBzZWVrX291dCAsXG4gIHBvc19vdXQgLFxuICBvdXRfY2hhbm5lbF9sZW5ndGggLFxuICBjbG9zZV9vdXQgLFxuICBjbG9zZV9vdXRfbm9lcnIgLFxuICBzZXRfYmluYXJ5X21vZGVfb3V0ICxcbiAgb3Blbl9pbiAsXG4gIG9wZW5faW5fYmluICxcbiAgb3Blbl9pbl9nZW4gLFxuICBpbnB1dF9jaGFyICxcbiAgaW5wdXRfbGluZSAsXG4gIGlucHV0ICxcbiAgcmVhbGx5X2lucHV0ICxcbiAgcmVhbGx5X2lucHV0X3N0cmluZyAsXG4gIGlucHV0X2J5dGUgLFxuICBpbnB1dF9iaW5hcnlfaW50ICxcbiAgaW5wdXRfdmFsdWUgLFxuICBzZWVrX2luICxcbiAgcG9zX2luICxcbiAgaW5fY2hhbm5lbF9sZW5ndGggLFxuICBjbG9zZV9pbiAsXG4gIGNsb3NlX2luX25vZXJyICxcbiAgc2V0X2JpbmFyeV9tb2RlX2luICxcbiAgTGFyZ2VGaWxlICxcbiAgc3RyaW5nX29mX2Zvcm1hdCAsXG4gICRjYXJldCRjYXJldCAsXG4gIGV4aXQgLFxuICBhdF9leGl0ICxcbiAgdmFsaWRfZmxvYXRfbGV4ZW0gLFxuICB1bnNhZmVfcmVhbGx5X2lucHV0ICxcbiAgZG9fYXRfZXhpdCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vYmogZnJvbSBcIi4vY2FtbF9vYmouanNcIjtcbmltcG9ydCAqIGFzIFBlcnZhc2l2ZXMgZnJvbSBcIi4vcGVydmFzaXZlcy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIGxlbmd0aChsKSB7XG4gIHZhciBfbGVuID0gMDtcbiAgdmFyIF9wYXJhbSA9IGw7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGxlbiA9IF9sZW47XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgX2xlbiA9IGxlbiArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29ucyhhLCBsKSB7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICBhLFxuICAgICAgICAgIGxcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gaGQocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIHBhcmFtWzBdO1xuICB9XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgXCJoZFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiB0bChwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH1cbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICBcInRsXCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG50aChsLCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5udGhcIlxuICAgICAgICBdO1xuICB9XG4gIHZhciBfbCA9IGw7XG4gIHZhciBfbiA9IG47XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiQxID0gX247XG4gICAgdmFyIGwkMSA9IF9sO1xuICAgIGlmIChsJDEpIHtcbiAgICAgIGlmIChuJDEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGwkMVswXTtcbiAgICAgIH1cbiAgICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgICBfbCA9IGwkMVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJudGhcIlxuICAgICAgICBdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBudGhfb3B0KGwsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0Lm50aFwiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIF9sID0gbDtcbiAgdmFyIF9uID0gbjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuJDEgPSBfbjtcbiAgICB2YXIgbCQxID0gX2w7XG4gICAgaWYgKCFsJDEpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChuJDEgPT09IDApIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKGwkMVswXSk7XG4gICAgfVxuICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgX2wgPSBsJDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZXZfYXBwZW5kKF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiBsMjtcbiAgICB9XG4gICAgX2wyID0gLyogOjogKi9bXG4gICAgICBsMVswXSxcbiAgICAgIGwyXG4gICAgXTtcbiAgICBfbDEgPSBsMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJldihsKSB7XG4gIHJldHVybiByZXZfYXBwZW5kKGwsIC8qIFtdICovMCk7XG59XG5cbmZ1bmN0aW9uIGluaXRfdGFpbHJlY19hdXgoX2FjYywgX2ksIG4sIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgaWYgKGkgPj0gbikge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgX2FjYyA9IC8qIDo6ICovW1xuICAgICAgQ3VycnkuXzEoZiwgaSksXG4gICAgICBhY2NcbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdF9hdXgoaSwgbiwgZikge1xuICBpZiAoaSA+PSBuKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgciA9IEN1cnJ5Ll8xKGYsIGkpO1xuICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgcixcbiAgICAgICAgICBpbml0X2F1eChpICsgMSB8IDAsIG4sIGYpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGluaXQobGVuLCBmKSB7XG4gIGlmIChsZW4gPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmluaXRcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChsZW4gPiAxMDAwMCkge1xuICAgIHJldHVybiByZXZfYXBwZW5kKGluaXRfdGFpbHJlY19hdXgoLyogW10gKi8wLCAwLCBsZW4sIGYpLCAvKiBbXSAqLzApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbml0X2F1eCgwLCBsZW4sIGYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4ocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIFBlcnZhc2l2ZXMuJGF0KHBhcmFtWzBdLCBmbGF0dGVuKHBhcmFtWzFdKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXAoZiwgcGFyYW0pIHtcbiAgaWYgKCFwYXJhbSkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdmFyIHIgPSBDdXJyeS5fMShmLCBwYXJhbVswXSk7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICByLFxuICAgICAgICAgIG1hcChmLCBwYXJhbVsxXSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbWFwaShpLCBmLCBwYXJhbSkge1xuICBpZiAoIXBhcmFtKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgciA9IEN1cnJ5Ll8yKGYsIGksIHBhcmFtWzBdKTtcbiAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgIHIsXG4gICAgICAgICAgbWFwaShpICsgMSB8IDAsIGYsIHBhcmFtWzFdKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYXBpJDEoZiwgbCkge1xuICByZXR1cm4gbWFwaSgwLCBmLCBsKTtcbn1cblxuZnVuY3Rpb24gcmV2X21hcChmLCBsKSB7XG4gIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgdmFyIF9wYXJhbSA9IGw7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSxcbiAgICAgIGFjY3VcbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcihmLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBDdXJyeS5fMShmLCBwYXJhbVswXSk7XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpdGVyaShmLCBsKSB7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgQ3VycnkuXzIoZiwgaSwgcGFyYW1bMF0pO1xuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9sZWZ0KGYsIF9hY2N1LCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmICghbCkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9sID0gbFsxXTtcbiAgICBfYWNjdSA9IEN1cnJ5Ll8yKGYsIGFjY3UsIGxbMF0pO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9yaWdodChmLCBsLCBhY2N1KSB7XG4gIGlmIChsKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGxbMF0sIGZvbGRfcmlnaHQoZiwgbFsxXSwgYWNjdSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhY2N1O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcDIoZiwgbDEsIGwyKSB7XG4gIGlmIChsMSkge1xuICAgIGlmIChsMikge1xuICAgICAgdmFyIHIgPSBDdXJyeS5fMihmLCBsMVswXSwgbDJbMF0pO1xuICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICBtYXAyKGYsIGwxWzFdLCBsMlsxXSlcbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5tYXAyXCJcbiAgICAgICAgXTtcbiAgfVxuICBpZiAoIWwyKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIFwiTGlzdC5tYXAyXCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJldl9tYXAyKGYsIGwxLCBsMikge1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfbDEgPSBsMTtcbiAgdmFyIF9sMiA9IGwyO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgdmFyIGwxJDEgPSBfbDE7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAobDEkMSkge1xuICAgICAgaWYgKGwyJDEpIHtcbiAgICAgICAgX2wyID0gbDIkMVsxXTtcbiAgICAgICAgX2wxID0gbDEkMVsxXTtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBDdXJyeS5fMihmLCBsMSQxWzBdLCBsMiQxWzBdKSxcbiAgICAgICAgICBhY2N1XG4gICAgICAgIF07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QucmV2X21hcDJcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmIChsMiQxKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LnJldl9tYXAyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcjIoZiwgX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxKSB7XG4gICAgICBpZiAobDIpIHtcbiAgICAgICAgQ3VycnkuXzIoZiwgbDFbMF0sIGwyWzBdKTtcbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0Lml0ZXIyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkxpc3QuaXRlcjJcIlxuICAgICAgICBdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX2xlZnQyKGYsIF9hY2N1LCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgX2FjY3UgPSBDdXJyeS5fMyhmLCBhY2N1LCBsMVswXSwgbDJbMF0pO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmZvbGRfbGVmdDJcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmIChsMikge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5mb2xkX2xlZnQyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9yaWdodDIoZiwgbDEsIGwyLCBhY2N1KSB7XG4gIGlmIChsMSkge1xuICAgIGlmIChsMikge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKGYsIGwxWzBdLCBsMlswXSwgZm9sZF9yaWdodDIoZiwgbDFbMV0sIGwyWzFdLCBhY2N1KSk7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5mb2xkX3JpZ2h0MlwiXG4gICAgICAgIF07XG4gIH1cbiAgaWYgKGwyKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmZvbGRfcmlnaHQyXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gYWNjdTtcbn1cblxuZnVuY3Rpb24gZm9yX2FsbChwLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFDdXJyeS5fMShwLCBwYXJhbVswXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleGlzdHMocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQ3VycnkuXzEocCwgcGFyYW1bMF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JfYWxsMihwLCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICBpZiAoIUN1cnJ5Ll8yKHAsIGwxWzBdLCBsMlswXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmZvcl9hbGwyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmZvcl9hbGwyXCJcbiAgICAgICAgXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzMihwLCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICBpZiAoQ3VycnkuXzIocCwgbDFbMF0sIGwyWzBdKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5leGlzdHMyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5leGlzdHMyXCJcbiAgICAgICAgXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwocGFyYW1bMF0sIHgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZW1xKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtWzBdID09PSB4KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhc3NvYyh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHZhciBtYXRjaCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwobWF0Y2hbMF0sIHgpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgIH1cbiAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzc29jX29wdCh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVswXTtcbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChtYXRjaFswXSwgeCkpIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKG1hdGNoWzFdKTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhc3NxKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gICAgICBpZiAobWF0Y2hbMF0gPT09IHgpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNzcV9vcHQoeCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gICAgaWYgKG1hdGNoWzBdID09PSB4KSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShtYXRjaFsxXSk7XG4gICAgfVxuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtX2Fzc29jKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwocGFyYW1bMF1bMF0sIHgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZW1fYXNzcSh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwYXJhbVswXVswXSA9PT0geCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2Fzc29jKHgsIHBhcmFtKSB7XG4gIGlmICghcGFyYW0pIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBsID0gcGFyYW1bMV07XG4gIHZhciBwYWlyID0gcGFyYW1bMF07XG4gIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKHBhaXJbMF0sIHgpKSB7XG4gICAgcmV0dXJuIGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIHJlbW92ZV9hc3NvYyh4LCBsKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2Fzc3EoeCwgcGFyYW0pIHtcbiAgaWYgKCFwYXJhbSkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdmFyIGwgPSBwYXJhbVsxXTtcbiAgdmFyIHBhaXIgPSBwYXJhbVswXTtcbiAgaWYgKHBhaXJbMF0gPT09IHgpIHtcbiAgICByZXR1cm4gbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgcmVtb3ZlX2Fzc3EoeCwgbClcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmQocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICB2YXIgeCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKEN1cnJ5Ll8xKHAsIHgpKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZF9vcHQocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHggPSBwYXJhbVswXTtcbiAgICBpZiAoQ3VycnkuXzEocCwgeCkpIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHgpO1xuICAgIH1cbiAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRfYWxsKHApIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICAgIHZhciBfcGFyYW0gPSBwYXJhbTtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIHBhcmFtJDEgPSBfcGFyYW07XG4gICAgICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgICAgIGlmICghcGFyYW0kMSkge1xuICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGFjY3UsIC8qIFtdICovMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGwgPSBwYXJhbSQxWzFdO1xuICAgICAgICB2YXIgeCA9IHBhcmFtJDFbMF07XG4gICAgICAgIGlmIChDdXJyeS5fMShwLCB4KSkge1xuICAgICAgICAgIF9wYXJhbSA9IGw7XG4gICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICBhY2N1XG4gICAgICAgICAgXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgICAgX3BhcmFtID0gbDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKHAsIGwpIHtcbiAgdmFyIF95ZXMgPSAvKiBbXSAqLzA7XG4gIHZhciBfbm8gPSAvKiBbXSAqLzA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBubyA9IF9ubztcbiAgICB2YXIgeWVzID0gX3llcztcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHJldl9hcHBlbmQoeWVzLCAvKiBbXSAqLzApLFxuICAgICAgICAgICAgICByZXZfYXBwZW5kKG5vLCAvKiBbXSAqLzApXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgbCQxID0gcGFyYW1bMV07XG4gICAgdmFyIHggPSBwYXJhbVswXTtcbiAgICBpZiAoQ3VycnkuXzEocCwgeCkpIHtcbiAgICAgIF9wYXJhbSA9IGwkMTtcbiAgICAgIF95ZXMgPSAvKiA6OiAqL1tcbiAgICAgICAgeCxcbiAgICAgICAgeWVzXG4gICAgICBdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBfcGFyYW0gPSBsJDE7XG4gICAgX25vID0gLyogOjogKi9bXG4gICAgICB4LFxuICAgICAgbm9cbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BsaXQocGFyYW0pIHtcbiAgaWYgKCFwYXJhbSkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIFtdICovMCxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gIHZhciBtYXRjaCQxID0gc3BsaXQocGFyYW1bMV0pO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIG1hdGNoJDFbMF1cbiAgICAgICAgICBdLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lKGwxLCBsMikge1xuICBpZiAobDEpIHtcbiAgICBpZiAobDIpIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgbDFbMF0sXG4gICAgICAgICAgICAgICAgbDJbMF1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY29tYmluZShsMVsxXSwgbDJbMV0pXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkxpc3QuY29tYmluZVwiXG4gICAgICAgIF07XG4gIH1cbiAgaWYgKCFsMikge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICBcIkxpc3QuY29tYmluZVwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBtZXJnZShjbXAsIGwxLCBsMikge1xuICBpZiAoIWwxKSB7XG4gICAgcmV0dXJuIGwyO1xuICB9XG4gIGlmICghbDIpIHtcbiAgICByZXR1cm4gbDE7XG4gIH1cbiAgdmFyIGgyID0gbDJbMF07XG4gIHZhciBoMSA9IGwxWzBdO1xuICBpZiAoQ3VycnkuXzIoY21wLCBoMSwgaDIpIDw9IDApIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBoMSxcbiAgICAgICAgICAgIG1lcmdlKGNtcCwgbDFbMV0sIGwyKVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgaDIsXG4gICAgICAgICAgICBtZXJnZShjbXAsIGwxLCBsMlsxXSlcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNob3AoX2ssIF9sKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbCA9IF9sO1xuICAgIHZhciBrID0gX2s7XG4gICAgaWYgKGsgPT09IDApIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICBpZiAobCkge1xuICAgICAgX2wgPSBsWzFdO1xuICAgICAgX2sgPSBrIC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIFwibGlzdC5tbFwiLFxuICAgICAgICAgICAgMjYyLFxuICAgICAgICAgICAgMTFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0YWJsZV9zb3J0KGNtcCwgbCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIChuLCBsKSB7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuID09PSAzICYmIGwpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MikgPD0gMCkge1xuICAgICAgICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBsWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIHgyJDEgPSBtYXRjaCQyWzBdO1xuICAgICAgICB2YXIgeDEkMSA9IGxbMF07XG4gICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxJDEsIHgyJDEpIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgdmFyIG4yID0gbiAtIG4xIHwgMDtcbiAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICB2YXIgczEgPSByZXZfc29ydChuMSwgbCk7XG4gICAgdmFyIHMyID0gcmV2X3NvcnQobjIsIGwyKTtcbiAgICB2YXIgX2wxID0gczE7XG4gICAgdmFyIF9sMiA9IHMyO1xuICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICBpZiAoIWwxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwyJDEsIGFjY3UpO1xuICAgICAgfVxuICAgICAgaWYgKCFsMiQxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIHZhciBoMiA9IGwyJDFbMF07XG4gICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIGgxLCBoMikgPiAwKSB7XG4gICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgaDEsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgaDIsXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBfbDIgPSBsMiQxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHZhciByZXZfc29ydCA9IGZ1bmN0aW9uIChuLCBsKSB7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuID09PSAzICYmIGwpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MikgPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgyLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKGwpIHtcbiAgICAgIHZhciBtYXRjaCQyID0gbFsxXTtcbiAgICAgIGlmIChtYXRjaCQyKSB7XG4gICAgICAgIHZhciB4MiQxID0gbWF0Y2gkMlswXTtcbiAgICAgICAgdmFyIHgxJDEgPSBsWzBdO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MSQxLCB4MiQxKSA+IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgdmFyIG4yID0gbiAtIG4xIHwgMDtcbiAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICB2YXIgczEgPSBzb3J0KG4xLCBsKTtcbiAgICB2YXIgczIgPSBzb3J0KG4yLCBsMik7XG4gICAgdmFyIF9sMSA9IHMxO1xuICAgIHZhciBfbDIgPSBzMjtcbiAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgaWYgKCFsMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIGlmICghbDIkMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMSwgYWNjdSk7XG4gICAgICB9XG4gICAgICB2YXIgaDIgPSBsMiQxWzBdO1xuICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICBpZiAoQ3VycnkuXzIoY21wLCBoMSwgaDIpIDw9IDApIHtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBoMSxcbiAgICAgICAgICBhY2N1XG4gICAgICAgIF07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICBoMixcbiAgICAgICAgYWNjdVxuICAgICAgXTtcbiAgICAgIF9sMiA9IGwyJDFbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGxlbiA9IGxlbmd0aChsKTtcbiAgaWYgKGxlbiA8IDIpIHtcbiAgICByZXR1cm4gbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29ydChsZW4sIGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNvcnRfdW5pcShjbXAsIGwpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiAobiwgbCkge1xuICAgIGlmIChuICE9PSAyKSB7XG4gICAgICBpZiAobiA9PT0gMyAmJiBsKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGxbMV07XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gbWF0Y2hbMV07XG4gICAgICAgICAgaWYgKG1hdGNoJDEpIHtcbiAgICAgICAgICAgIHZhciB4MyA9IG1hdGNoJDFbMF07XG4gICAgICAgICAgICB2YXIgeDIgPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHZhciB4MSA9IGxbMF07XG4gICAgICAgICAgICB2YXIgYyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgyKTtcbiAgICAgICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDEgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDEgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQxIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA8IDApIHtcbiAgICAgICAgICAgICAgdmFyIGMkMiA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjJDIgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgYyQzID0gQ3VycnkuXzIoY21wLCB4MSwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQzIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGMkNCA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKTtcbiAgICAgICAgICAgIGlmIChjJDQgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyQ0IDwgMCkge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGMkNSA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgIGlmIChjJDUgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMkNSA8IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfVxuICAgICAgXG4gICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICB2YXIgbWF0Y2gkMiA9IGxbMV07XG4gICAgICBpZiAobWF0Y2gkMikge1xuICAgICAgICB2YXIgeDIkMSA9IG1hdGNoJDJbMF07XG4gICAgICAgIHZhciB4MSQxID0gbFswXTtcbiAgICAgICAgdmFyIGMkNiA9IEN1cnJ5Ll8yKGNtcCwgeDEkMSwgeDIkMSk7XG4gICAgICAgIGlmIChjJDYgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIGlmIChjJDYgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfVxuICAgIHZhciBuMSA9IChuID4+IDEpO1xuICAgIHZhciBuMiA9IG4gLSBuMSB8IDA7XG4gICAgdmFyIGwyID0gY2hvcChuMSwgbCk7XG4gICAgdmFyIHMxID0gcmV2X3NvcnQobjEsIGwpO1xuICAgIHZhciBzMiA9IHJldl9zb3J0KG4yLCBsMik7XG4gICAgdmFyIF9sMSA9IHMxO1xuICAgIHZhciBfbDIgPSBzMjtcbiAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgaWYgKCFsMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIGlmICghbDIkMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMSwgYWNjdSk7XG4gICAgICB9XG4gICAgICB2YXIgdDIgPSBsMiQxWzFdO1xuICAgICAgdmFyIGgyID0gbDIkMVswXTtcbiAgICAgIHZhciB0MSA9IGwxWzFdO1xuICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICB2YXIgYyQ3ID0gQ3VycnkuXzIoY21wLCBoMSwgaDIpO1xuICAgICAgaWYgKGMkNyA9PT0gMCkge1xuICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgIGgxLFxuICAgICAgICAgIGFjY3VcbiAgICAgICAgXTtcbiAgICAgICAgX2wyID0gdDI7XG4gICAgICAgIF9sMSA9IHQxO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBpZiAoYyQ3ID4gMCkge1xuICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgIGgxLFxuICAgICAgICAgIGFjY3VcbiAgICAgICAgXTtcbiAgICAgICAgX2wxID0gdDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgIGgyLFxuICAgICAgICBhY2N1XG4gICAgICBdO1xuICAgICAgX2wyID0gdDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIHJldl9zb3J0ID0gZnVuY3Rpb24gKG4sIGwpIHtcbiAgICBpZiAobiAhPT0gMikge1xuICAgICAgaWYgKG4gPT09IDMgJiYgbCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBsWzFdO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChtYXRjaCQxKSB7XG4gICAgICAgICAgICB2YXIgeDMgPSBtYXRjaCQxWzBdO1xuICAgICAgICAgICAgdmFyIHgyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICB2YXIgeDEgPSBsWzBdO1xuICAgICAgICAgICAgdmFyIGMgPSBDdXJyeS5fMihjbXAsIHgxLCB4Mik7XG4gICAgICAgICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICAgICAgICB2YXIgYyQxID0gQ3VycnkuXzIoY21wLCB4MiwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQxID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPiAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDIgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYyQyID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGMkMyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkMyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMyA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjJDQgPSBDdXJyeS5fMihjbXAsIHgxLCB4Myk7XG4gICAgICAgICAgICBpZiAoYyQ0ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMkNCA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjJDUgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICBpZiAoYyQ1ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjJDUgPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBsWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIHgyJDEgPSBtYXRjaCQyWzBdO1xuICAgICAgICB2YXIgeDEkMSA9IGxbMF07XG4gICAgICAgIHZhciBjJDYgPSBDdXJyeS5fMihjbXAsIHgxJDEsIHgyJDEpO1xuICAgICAgICBpZiAoYyQ2ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSBpZiAoYyQ2ID4gMCkge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgICB2YXIgbjEgPSAobiA+PiAxKTtcbiAgICB2YXIgbjIgPSBuIC0gbjEgfCAwO1xuICAgIHZhciBsMiA9IGNob3AobjEsIGwpO1xuICAgIHZhciBzMSA9IHNvcnQobjEsIGwpO1xuICAgIHZhciBzMiA9IHNvcnQobjIsIGwyKTtcbiAgICB2YXIgX2wxID0gczE7XG4gICAgdmFyIF9sMiA9IHMyO1xuICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICBpZiAoIWwxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwyJDEsIGFjY3UpO1xuICAgICAgfVxuICAgICAgaWYgKCFsMiQxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIHZhciB0MiA9IGwyJDFbMV07XG4gICAgICB2YXIgaDIgPSBsMiQxWzBdO1xuICAgICAgdmFyIHQxID0gbDFbMV07XG4gICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgIHZhciBjJDcgPSBDdXJyeS5fMihjbXAsIGgxLCBoMik7XG4gICAgICBpZiAoYyQ3ID09PSAwKSB7XG4gICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgaDEsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBfbDIgPSB0MjtcbiAgICAgICAgX2wxID0gdDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIGlmIChjJDcgPCAwKSB7XG4gICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgaDEsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBfbDEgPSB0MTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgaDIsXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBfbDIgPSB0MjtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICB2YXIgbGVuID0gbGVuZ3RoKGwpO1xuICBpZiAobGVuIDwgMikge1xuICAgIHJldHVybiBsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb3J0KGxlbiwgbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGFyZV9sZW5ndGhzKF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIF9sMiA9IGwyWzFdO1xuICAgIF9sMSA9IGwxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZV9sZW5ndGhfd2l0aChfbCwgX24pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIGwgPSBfbDtcbiAgICBpZiAoIWwpIHtcbiAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSBlbHNlIGlmIChuID4gMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG4gPD0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIF9uID0gbiAtIDEgfCAwO1xuICAgIF9sID0gbFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbnZhciBhcHBlbmQgPSBQZXJ2YXNpdmVzLiRhdDtcblxudmFyIGNvbmNhdCA9IGZsYXR0ZW47XG5cbnZhciBmaWx0ZXIgPSBmaW5kX2FsbDtcblxudmFyIHNvcnQgPSBzdGFibGVfc29ydDtcblxudmFyIGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0O1xuXG5leHBvcnQge1xuICBsZW5ndGggLFxuICBjb21wYXJlX2xlbmd0aHMgLFxuICBjb21wYXJlX2xlbmd0aF93aXRoICxcbiAgY29ucyAsXG4gIGhkICxcbiAgdGwgLFxuICBudGggLFxuICBudGhfb3B0ICxcbiAgcmV2ICxcbiAgaW5pdCAsXG4gIGFwcGVuZCAsXG4gIHJldl9hcHBlbmQgLFxuICBjb25jYXQgLFxuICBmbGF0dGVuICxcbiAgaXRlciAsXG4gIGl0ZXJpICxcbiAgbWFwICxcbiAgbWFwaSQxIGFzIG1hcGksXG4gIHJldl9tYXAgLFxuICBmb2xkX2xlZnQgLFxuICBmb2xkX3JpZ2h0ICxcbiAgaXRlcjIgLFxuICBtYXAyICxcbiAgcmV2X21hcDIgLFxuICBmb2xkX2xlZnQyICxcbiAgZm9sZF9yaWdodDIgLFxuICBmb3JfYWxsICxcbiAgZXhpc3RzICxcbiAgZm9yX2FsbDIgLFxuICBleGlzdHMyICxcbiAgbWVtICxcbiAgbWVtcSAsXG4gIGZpbmQgLFxuICBmaW5kX29wdCAsXG4gIGZpbHRlciAsXG4gIGZpbmRfYWxsICxcbiAgcGFydGl0aW9uICxcbiAgYXNzb2MgLFxuICBhc3NvY19vcHQgLFxuICBhc3NxICxcbiAgYXNzcV9vcHQgLFxuICBtZW1fYXNzb2MgLFxuICBtZW1fYXNzcSAsXG4gIHJlbW92ZV9hc3NvYyAsXG4gIHJlbW92ZV9hc3NxICxcbiAgc3BsaXQgLFxuICBjb21iaW5lICxcbiAgc29ydCAsXG4gIHN0YWJsZV9zb3J0ICxcbiAgZmFzdF9zb3J0ICxcbiAgc29ydF91bmlxICxcbiAgbWVyZ2UgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0LmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcblxuZnVuY3Rpb24gbGlzdEFwcGVuZCh2YWx1ZSwgbGlzdCkge1xuICByZXR1cm4gTGlzdC5jb25jYXQoLyogOjogKi9bXG4gICAgICAgICAgICAgIGxpc3QsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gRW51bUV4dGVuc2lvbnMoRSkge1xuICB2YXIgZnJvbVRvQXNMaXN0ID0gZnVuY3Rpb24gKHN0YXJ0LCBmaW5pc2gpIHtcbiAgICB2YXIgX2FjYyA9IC8qIFtdICovMDtcbiAgICB2YXIgX2N1cnJlbnQgPSBzdGFydDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IF9jdXJyZW50O1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMihFLmNvbXBhcmUsIGN1cnJlbnQsIGZpbmlzaCk7XG4gICAgICBpZiAobWF0Y2ggIT09IDE1OTAzOTQ5NCkge1xuICAgICAgICBpZiAobWF0Y2ggPCA5MzkyMTQxNTEpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXh0ID0gQ3VycnkuXzEoRS5zdWNjLCBjdXJyZW50KTtcbiAgICAgICAgaWYgKG5leHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICAgIH1cbiAgICAgICAgX2N1cnJlbnQgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG5leHQpO1xuICAgICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB2YXIgcHJldiA9IEN1cnJ5Ll8xKEUucHJlZCwgY3VycmVudCk7XG4gICAgICBpZiAocHJldiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICB9XG4gICAgICBfY3VycmVudCA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ocHJldik7XG4gICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHZhciB1cEZyb21Bc0xpc3QgPSBmdW5jdGlvbiAoc3RhcnQpIHtcbiAgICB2YXIgbmV4dCA9IEN1cnJ5Ll8xKEUuc3VjYywgc3RhcnQpO1xuICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgICAgdmFyIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihuZXh0KTtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBfY3VycmVudDtcbiAgICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICAgIHZhciBuZXh0JDEgPSBDdXJyeS5fMShFLnN1Y2MsIGN1cnJlbnQpO1xuICAgICAgICBpZiAobmV4dCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihuZXh0JDEpO1xuICAgICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogW10gKi8wO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgIHZhciBfY3VycmVudCA9IHN0YXJ0O1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gX2N1cnJlbnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIHZhciBuZXh0ID0gQ3VycnkuXzEoRS5zdWNjLCBjdXJyZW50KTtcbiAgICAgIGlmIChuZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihuZXh0KTtcbiAgICAgIF9hY2MgPSBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGRvd25Gcm9tQXNMaXN0ID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gICAgdmFyIG5leHQgPSBDdXJyeS5fMShFLnByZWQsIHN0YXJ0KTtcbiAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2FjYyA9IC8qIFtdICovMDtcbiAgICAgIHZhciBfY3VycmVudCA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obmV4dCk7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gX2N1cnJlbnQ7XG4gICAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgICB2YXIgcHJldiA9IEN1cnJ5Ll8xKEUucHJlZCwgY3VycmVudCk7XG4gICAgICAgIGlmIChwcmV2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihwcmV2KTtcbiAgICAgICAgX2FjYyA9IGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gIH07XG4gIHZhciBkb3duRnJvbUluY2x1ZGluZ0FzTGlzdCA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgIHZhciBfY3VycmVudCA9IHN0YXJ0O1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gX2N1cnJlbnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIHZhciBwcmV2ID0gQ3VycnkuXzEoRS5wcmVkLCBjdXJyZW50KTtcbiAgICAgIGlmIChwcmV2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihwcmV2KTtcbiAgICAgIF9hY2MgPSBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmcm9tVG9Bc0xpc3Q6IGZyb21Ub0FzTGlzdCxcbiAgICAgICAgICB1cEZyb21Bc0xpc3Q6IHVwRnJvbUFzTGlzdCxcbiAgICAgICAgICB1cEZyb21JbmNsdWRpbmdBc0xpc3Q6IHVwRnJvbUluY2x1ZGluZ0FzTGlzdCxcbiAgICAgICAgICBkb3duRnJvbUFzTGlzdDogZG93bkZyb21Bc0xpc3QsXG4gICAgICAgICAgZG93bkZyb21JbmNsdWRpbmdBc0xpc3Q6IGRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0XG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIGxpc3RBcHBlbmQgLFxuICBFbnVtRXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBMaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2xpc3QuanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBsaXN0QXBwZW5kKHZhbHVlLCBsaXN0KSB7XG4gIHJldHVybiBMaXN0LmNvbmNhdCgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgbGlzdCxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBCb3VuZGVkRW51bUV4dGVuc2lvbnMoRSkge1xuICB2YXIgZnJvbVRoZW5Ub0FzTGlzdCA9IGZ1bmN0aW9uIChzdGFydCwgbmV4dCwgZmluaXNoKSB7XG4gICAgdmFyIHN0YXJ0SW50ID0gQ3VycnkuXzEoRS5mcm9tRW51bSwgc3RhcnQpO1xuICAgIHZhciBuZXh0SW50ID0gQ3VycnkuXzEoRS5mcm9tRW51bSwgbmV4dCk7XG4gICAgdmFyIHN0ZXBJbnQgPSBuZXh0SW50IC0gc3RhcnRJbnQgfCAwO1xuICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgIHZhciBfY3VycmVudCA9IHN0YXJ0O1xuICAgIHZhciBfY3VycmVudEludCA9IHN0YXJ0SW50O1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBjdXJyZW50SW50ID0gX2N1cnJlbnRJbnQ7XG4gICAgICB2YXIgY3VycmVudCA9IF9jdXJyZW50O1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMihFLmNvbXBhcmUsIGN1cnJlbnQsIGZpbmlzaCk7XG4gICAgICBpZiAobWF0Y2ggPCAxNTkwMzk0OTQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXh0SW50JDEgPSBjdXJyZW50SW50ICsgc3RlcEludCB8IDA7XG4gICAgICB2YXIgbmV4dCQxID0gQ3VycnkuXzEoRS50b0VudW0sIG5leHRJbnQkMSk7XG4gICAgICBpZiAobmV4dCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIF9jdXJyZW50SW50ID0gbmV4dEludCQxO1xuICAgICAgX2N1cnJlbnQgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG5leHQkMSk7XG4gICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZnJvbVRoZW5Ub0FzTGlzdDogZnJvbVRoZW5Ub0FzTGlzdFxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBsaXN0QXBwZW5kICxcbiAgQm91bmRlZEVudW1FeHRlbnNpb25zICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0VxIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRXEuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX09yZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRW51bSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0VudW0uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkRW51bSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWRFbnVtLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGZyb21JbnQoaSkge1xuICBpZiAoaSA8IDApIHtcbiAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9JbnQocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAxNTkwMzk0OTQpIHtcbiAgICBpZiAocGFyYW0gPj0gOTM5MjE0MTUxKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXZlcnNlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gMTU5MDM5NDk0KSB7XG4gICAgaWYgKHBhcmFtID49IDkzOTIxNDE1MSkge1xuICAgICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlcShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG52YXIgRXEgPSB7XG4gIGVxOiBlcVxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19FcS5FcUV4dGVuc2lvbnMoRXEpO1xuXG5mdW5jdGlvbiBjb21wYXJlKG8xLCBvMikge1xuICBpZiAobzEgIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChvMSA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIGlmIChvMiA+PSA5MzkyMTQxNTEpIHtcbiAgICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvMiAhPT0gMTU5MDM5NDk0KSB7XG4gICAgICBpZiAobzIgPj0gOTM5MjE0MTUxKSB7XG4gICAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvMiAhPT0gMTU5MDM5NDk0KSB7XG4gICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICB9XG59XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogY29tcGFyZVxufTtcblxudmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX09yZC5PcmRFeHRlbnNpb25zKE9yZCk7XG5cbnZhciBCb3VuZGVkID0ge1xuICBlcTogZXEsXG4gIGNvbXBhcmU6IGNvbXBhcmUsXG4gIHRvcDogLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0LFxuICBib3R0b206IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MVxufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQm91bmRlZC5Cb3VuZGVkRXh0ZW5zaW9ucyhCb3VuZGVkKTtcblxuZnVuY3Rpb24gcHJlZChwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChwYXJhbSA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3VjYyhwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChwYXJhbSA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfVxuICB9XG4gIFxufVxuXG52YXIgRW51bSA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlLFxuICBzdWNjOiBzdWNjLFxuICBwcmVkOiBwcmVkXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5FbnVtRXh0ZW5zaW9ucyhFbnVtKTtcblxuZnVuY3Rpb24gdG9FbnVtKGkpIHtcbiAgcmV0dXJuIGZyb21JbnQoaSk7XG59XG5cbnZhciBCb3VuZGVkRW51bSA9IHtcbiAgdG9wOiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQsXG4gIGJvdHRvbTogLyogbGVzc190aGFuICovOTM5MjE0MTUxLFxuICBlcTogZXEsXG4gIGNvbXBhcmU6IGNvbXBhcmUsXG4gIHN1Y2M6IHN1Y2MsXG4gIHByZWQ6IHByZWQsXG4gIGNhcmRpbmFsaXR5OiAzLFxuICBmcm9tRW51bTogdG9JbnQsXG4gIHRvRW51bTogdG9FbnVtXG59O1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQm91bmRlZEVudW0uQm91bmRlZEVudW1FeHRlbnNpb25zKEJvdW5kZWRFbnVtKTtcblxudmFyIGVxV2l0aENvbnZlcnNpb24gPSBpbmNsdWRlLmVxV2l0aENvbnZlcnNpb247XG5cbnZhciBub3RFcSA9IGluY2x1ZGUubm90RXE7XG5cbnZhciBlcUludmVydGVkID0gaW5jbHVkZS5lcUludmVydGVkO1xuXG52YXIgRXFJbnZlcnRlZCA9IGluY2x1ZGUuRXFJbnZlcnRlZDtcblxudmFyIEVxQnkgPSBpbmNsdWRlLkVxQnk7XG5cbnZhciBjb21wYXJlV2l0aENvbnZlcnNpb24gPSBpbmNsdWRlJDEuY29tcGFyZVdpdGhDb252ZXJzaW9uO1xuXG52YXIgY29tcGFyZVJldmVyc2VkID0gaW5jbHVkZSQxLmNvbXBhcmVSZXZlcnNlZDtcblxudmFyIE9yZFJldmVyc2VkID0gaW5jbHVkZSQxLk9yZFJldmVyc2VkO1xuXG52YXIgY29tcGFyZUFzSW50ID0gaW5jbHVkZSQxLmNvbXBhcmVBc0ludDtcblxudmFyIG1pbiA9IGluY2x1ZGUkMS5taW47XG5cbnZhciBtYXggPSBpbmNsdWRlJDEubWF4O1xuXG52YXIgbGVzc1RoYW4gPSBpbmNsdWRlJDEubGVzc1RoYW47XG5cbnZhciBsdCA9IGluY2x1ZGUkMS5sdDtcblxudmFyIGxlc3NUaGFuT3JFcSA9IGluY2x1ZGUkMS5sZXNzVGhhbk9yRXE7XG5cbnZhciBsdGUgPSBpbmNsdWRlJDEubHRlO1xuXG52YXIgZ3JlYXRlclRoYW4gPSBpbmNsdWRlJDEuZ3JlYXRlclRoYW47XG5cbnZhciBndCA9IGluY2x1ZGUkMS5ndDtcblxudmFyIGdyZWF0ZXJUaGFuT3JFcSA9IGluY2x1ZGUkMS5ncmVhdGVyVGhhbk9yRXE7XG5cbnZhciBndGUgPSBpbmNsdWRlJDEuZ3RlO1xuXG52YXIgY2xhbXAgPSBpbmNsdWRlJDEuY2xhbXA7XG5cbnZhciBiZXR3ZWVuID0gaW5jbHVkZSQxLmJldHdlZW47XG5cbnZhciBPcmRSaW5nRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMS5PcmRSaW5nRXh0ZW5zaW9ucztcblxudmFyIE9yZE5hbWVkID0gaW5jbHVkZSQxLk9yZE5hbWVkO1xuXG52YXIgT3JkQnkgPSBpbmNsdWRlJDEuT3JkQnk7XG5cbnZhciB0b3AgPSAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG5cbnZhciBib3R0b20gPSAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG5cbnZhciBmcm9tVG9Bc0xpc3QgPSBpbmNsdWRlJDIuZnJvbVRvQXNMaXN0O1xuXG52YXIgdXBGcm9tQXNMaXN0ID0gaW5jbHVkZSQyLnVwRnJvbUFzTGlzdDtcblxudmFyIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCA9IGluY2x1ZGUkMi51cEZyb21JbmNsdWRpbmdBc0xpc3Q7XG5cbnZhciBkb3duRnJvbUFzTGlzdCA9IGluY2x1ZGUkMi5kb3duRnJvbUFzTGlzdDtcblxudmFyIGRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0ID0gaW5jbHVkZSQyLmRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0O1xuXG52YXIgZnJvbVRoZW5Ub0FzTGlzdCA9IGluY2x1ZGUkMy5mcm9tVGhlblRvQXNMaXN0O1xuXG5leHBvcnQge1xuICBmcm9tSW50ICxcbiAgdG9JbnQgLFxuICByZXZlcnNlICxcbiAgZXEgLFxuICBFcSAsXG4gIGVxV2l0aENvbnZlcnNpb24gLFxuICBub3RFcSAsXG4gIGVxSW52ZXJ0ZWQgLFxuICBFcUludmVydGVkICxcbiAgRXFCeSAsXG4gIGNvbXBhcmUgLFxuICBPcmQgLFxuICBjb21wYXJlV2l0aENvbnZlcnNpb24gLFxuICBjb21wYXJlUmV2ZXJzZWQgLFxuICBPcmRSZXZlcnNlZCAsXG4gIGNvbXBhcmVBc0ludCAsXG4gIG1pbiAsXG4gIG1heCAsXG4gIGxlc3NUaGFuICxcbiAgbHQgLFxuICBsZXNzVGhhbk9yRXEgLFxuICBsdGUgLFxuICBncmVhdGVyVGhhbiAsXG4gIGd0ICxcbiAgZ3JlYXRlclRoYW5PckVxICxcbiAgZ3RlICxcbiAgY2xhbXAgLFxuICBiZXR3ZWVuICxcbiAgT3JkUmluZ0V4dGVuc2lvbnMgLFxuICBPcmROYW1lZCAsXG4gIE9yZEJ5ICxcbiAgdG9wICxcbiAgYm90dG9tICxcbiAgQm91bmRlZCAsXG4gIHByZWQgLFxuICBzdWNjICxcbiAgRW51bSAsXG4gIGZyb21Ub0FzTGlzdCAsXG4gIHVwRnJvbUFzTGlzdCAsXG4gIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCAsXG4gIGRvd25Gcm9tQXNMaXN0ICxcbiAgZG93bkZyb21JbmNsdWRpbmdBc0xpc3QgLFxuICBCb3VuZGVkRW51bSAsXG4gIGZyb21UaGVuVG9Bc0xpc3QgLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbiRCc0Jhc3RldCBmcm9tIFwiLi9GdW5jdGlvbi5icy5qc1wiO1xuXG52YXIgJGxlc3MkZG90ID0gRnVuY3Rpb24kQnNCYXN0ZXQuSW5maXguJGxlc3MkZG90O1xuXG5mdW5jdGlvbiBtYXliZShmLCAkJGRlZmF1bHQsIG9wdCkge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihvcHQpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJCRkZWZhdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KGEsIHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcChmLCBhKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShDdXJyeS5fMShmLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpKSk7XG4gIH1cbiAgXG59XG5cbnZhciBGdW5jdG9yID0ge1xuICBtYXA6IG1hcFxufTtcblxuZnVuY3Rpb24gYXBwbHkoZm5fb3B0LCBhKSB7XG4gIGlmIChmbl9vcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXAoZm5fb3B0LCBhKTtcbiAgfVxuICBcbn1cblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoYSk7XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxuZnVuY3Rpb24gZmxhdF9tYXAoeCwgZikge1xuICBpZiAoeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpO1xuICB9XG4gIFxufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IHB1cmUsXG4gIGZsYXRfbWFwOiBmbGF0X21hcFxufTtcblxuZnVuY3Rpb24gTWFnbWEoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoTS5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTZW1pZ3JvdXAoUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoUy5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNb25vaWQoUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoUy5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICAgICAgICBlbXB0eTogdW5kZWZpbmVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFF1YXNpZ3JvdXAoUSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoUS5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBMb29wKEwpIHtcbiAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJDEgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpO1xuICAgIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKEN1cnJ5Ll8yKEwuYXBwZW5kLCBhJDEsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoYSQxKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYXBwZW5kOiBhcHBlbmQsXG4gICAgICAgICAgZW1wdHk6IHVuZGVmaW5lZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBhbHQoYSwgYikge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihhKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGI7XG4gIH1cbn1cblxudmFyIEFsdCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0XG59O1xuXG52YXIgUGx1cyA9IHtcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0LFxuICBlbXB0eTogdW5kZWZpbmVkXG59O1xuXG52YXIgQWx0ZXJuYXRpdmUgPSB7XG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0LFxuICBlbXB0eTogdW5kZWZpbmVkXG59O1xuXG5mdW5jdGlvbiBmb2xkX2xlZnQoZiwgaW5pdCwgeCkge1xuICByZXR1cm4gbWF5YmUoQ3VycnkuXzEoZiwgaW5pdCksIGluaXQsIHgpO1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGluaXQsIHgpIHtcbiAgcmV0dXJuIG1heWJlKChmdW5jdGlvbiAoeCRwcmltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihmLCB4JHByaW1lLCBpbml0KTtcbiAgICAgICAgICAgICAgfSksIGluaXQsIHgpO1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcChNKSB7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIG1heWJlKGYsIE0uZW1wdHksIHgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcF9BbnkoTSkge1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBtYXliZShmLCBNLmVtcHR5LCB4KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZF9NYXBfUGx1cyhQKSB7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIG1heWJlKGYsIFAuZW1wdHksIHgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShBKSB7XG4gIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIG1heWJlKEN1cnJ5Ll8yKCRsZXNzJGRvdCwgQ3VycnkuXzEoQS5tYXAsIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgZiksIEN1cnJ5Ll8xKEEucHVyZSwgdW5kZWZpbmVkKSwgeCk7XG4gIH07XG4gIHZhciBzZXF1ZW5jZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIG1heWJlKEN1cnJ5Ll8xKEEubWFwLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBDdXJyeS5fMShBLnB1cmUsIHVuZGVmaW5lZCksIHgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBFcShFKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICBpZiAoeHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHlzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEUuZXEsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeHMpLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB5cyA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gT3JkKE8pIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIGlmICh4cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoeXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoTy5lcSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih4cyksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHlzID09PSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoTy5jb21wYXJlLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcSxcbiAgICAgICAgICBjb21wYXJlOiBjb21wYXJlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNob3coUykge1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiU29tZShcIiArIChDdXJyeS5fMShTLnNob3csIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSkpICsgXCIpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJOb25lXCI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3dcbiAgICAgICAgfTtcbn1cblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5Nb25hZChNb25hZCk7XG5cbnZhciBpbmNsdWRlJDEgPSBJbmZpeCRCc0Jhc3RldC5BbHRlcm5hdGl2ZShBbHRlcm5hdGl2ZSk7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEgPSBpbmNsdWRlLiRncmVhdCRncmVhdCRlcTtcblxudmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlLiRlcSRsZXNzJGxlc3M7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlLiRncmVhdCRlcSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGVxJGxlc3MgPSBpbmNsdWRlLiRsZXNzJGVxJGxlc3M7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyRoYXNoJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyRzdGFyJGdyZWF0O1xuXG52YXIgSW5maXggPSB7XG4gICRncmVhdCRncmVhdCRlcTogSW5maXhfJGdyZWF0JGdyZWF0JGVxLFxuICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgJGxlc3MkZXEkbGVzczogSW5maXhfJGxlc3MkZXEkbGVzcyxcbiAgJGxlc3MkcGlwZSRncmVhdDogSW5maXhfJGxlc3MkcGlwZSRncmVhdCxcbiAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICRwaXBlJHF1ZXN0aW9uOiBnZXRXaXRoRGVmYXVsdFxufTtcblxuZXhwb3J0IHtcbiAgJGxlc3MkZG90ICxcbiAgbWF5YmUgLFxuICBnZXRXaXRoRGVmYXVsdCAsXG4gIEZ1bmN0b3IgLFxuICBBcHBseSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgTW9uYWQgLFxuICBNYWdtYSAsXG4gIFNlbWlncm91cCAsXG4gIE1vbm9pZCAsXG4gIFF1YXNpZ3JvdXAgLFxuICBMb29wICxcbiAgQWx0ICxcbiAgUGx1cyAsXG4gIEFsdGVybmF0aXZlICxcbiAgRm9sZGFibGUgLFxuICBUcmF2ZXJzYWJsZSAsXG4gIEVxICxcbiAgT3JkICxcbiAgU2hvdyAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcblxuZnVuY3Rpb24gQWx0RXh0ZW5zaW9ucyhBKSB7XG4gIHZhciBvckVsc2UgPSBmdW5jdGlvbiAoZmFsbGJhY2ssIGluaXQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5hbHQsIGluaXQsIGZhbGxiYWNrKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBvckVsc2U6IG9yRWxzZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBbHRJbmZpeChBKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkcGlwZSRncmVhdDogQS5hbHRcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgQWx0RXh0ZW5zaW9ucyAsXG4gIEFsdEluZml4ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEZ1bmN0aW9ucyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1vbm9pZEV4dGVuc2lvbnMoTSkge1xuICB2YXIgQnNNb25vaWRFeHRlbnNpb25zID0gRnVuY3Rpb25zJEJzQmFzdGV0Lk1vbm9pZChNKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBCc01vbm9pZEV4dGVuc2lvbnM6IEJzTW9ub2lkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBndWFyZDogQnNNb25vaWRFeHRlbnNpb25zLmd1YXJkLFxuICAgICAgICAgIHBvd2VyOiBCc01vbm9pZEV4dGVuc2lvbnMucG93ZXJcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogRnVuY3Rpb25zLUJzQmFzdGV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfQXJyYXkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9BcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZCBmcm9tIFwiLi4vUmVsdWRlX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEZ1bmN0aW9ucyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG9wdGlvbkFsdChhLCBiKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYjtcbiAgfVxufVxuXG5mdW5jdGlvbiBGb2xkYWJsZUV4dGVuc2lvbnMoRikge1xuICB2YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRm9sZGFibGUoRik7XG4gIHZhciBhbnkgPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAodiwgeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgeCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIGZhbHNlLCB4cyk7XG4gIH07XG4gIHZhciBhbGwgPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAodiwgeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHgpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLCB0cnVlLCB4cyk7XG4gIH07XG4gIHZhciBjb250YWluc0J5ID0gZnVuY3Rpb24gKGYsIHgsIHhzKSB7XG4gICAgcmV0dXJuIGFueShDdXJyeS5fMShmLCB4KSwgeHMpO1xuICB9O1xuICB2YXIgY29udGFpbnMgPSBmdW5jdGlvbiAoZXFBLCB4LCB4cykge1xuICAgIHJldHVybiBhbnkoQ3VycnkuXzEoZXFBLmVxLCB4KSwgeHMpO1xuICB9O1xuICB2YXIgaW5kZXhPZkJ5ID0gZnVuY3Rpb24gKGYsIHgsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gcGFyYW1bMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICsgMSB8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uQWx0KHBhcmFtWzFdLCBDdXJyeS5fMihmLCB4LCB5KSA/IGkgOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgXSwgeHMpWzFdO1xuICB9O1xuICB2YXIgaW5kZXhPZiA9IGZ1bmN0aW9uIChlcUEsIHgsIHhzKSB7XG4gICAgcmV0dXJuIGluZGV4T2ZCeShlcUEuZXEsIHgsIHhzKTtcbiAgfTtcbiAgdmFyIG1pbkJ5ID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKG1pbiwgeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKFJlbHVkZV9PcmQubWluQnkoZiwgeCwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtaW4pKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkLCB4cyk7XG4gIH07XG4gIHZhciBtaW4gPSBmdW5jdGlvbiAob3JkQSwgeHMpIHtcbiAgICByZXR1cm4gbWluQnkob3JkQS5jb21wYXJlLCB4cyk7XG4gIH07XG4gIHZhciBtYXhCeSA9IGZ1bmN0aW9uIChmLCB4cykge1xuICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfbGVmdCwgKGZ1bmN0aW9uIChtaW4sIHgpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciB5ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtaW4pO1xuICAgICAgICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGYsIHgsIHkpID09PSAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoeCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh5KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkLCB4cyk7XG4gIH07XG4gIHZhciBtYXggPSBmdW5jdGlvbiAob3JkQSwgeHMpIHtcbiAgICByZXR1cm4gbWF4Qnkob3JkQS5jb21wYXJlLCB4cyk7XG4gIH07XG4gIHZhciBjb3VudEJ5ID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGNvdW50LCB4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzEoZiwgeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50ICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIDAsIHhzKTtcbiAgfTtcbiAgdmFyIGxlbmd0aCA9IGZ1bmN0aW9uICh4cykge1xuICAgIHJldHVybiBjb3VudEJ5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0pLCB4cyk7XG4gIH07XG4gIHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgeCk7XG4gICAgICAgICAgICAgICAgfSksIHVuZGVmaW5lZCwgeHMpO1xuICB9O1xuICB2YXIgZm9yRWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uIChmLCB4cykge1xuICAgIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGksIHgpIHtcbiAgICAgICAgICAgIEN1cnJ5Ll8yKGYsIHgsIGkpO1xuICAgICAgICAgICAgcmV0dXJuIGkgKyAxIHwgMDtcbiAgICAgICAgICB9KSwgMCwgeHMpO1xuICAgIFxuICB9O1xuICB2YXIgZmluZCA9IGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHYsIHgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25BbHQodiwgQ3VycnkuXzEoZiwgeCkgPyBDYW1sX29wdGlvbi5zb21lKHgpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkKTtcbiAgfTtcbiAgdmFyIGZpbmRXaXRoSW5kZXggPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAocGFyYW0sIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJhbVswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKyAxIHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25BbHQocGFyYW1bMV0sIEN1cnJ5Ll8yKGYsIHgsIGkpID8gQ2FtbF9vcHRpb24uc29tZSh4KSA6IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH0pLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBdLCB4cylbMV07XG4gIH07XG4gIHZhciB0b0xpc3QgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX3JpZ2h0LCAoZnVuY3Rpb24gKGEsIGFjYykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIC8qIFtdICovMCwgZmEpO1xuICB9O1xuICB2YXIgdG9BcnJheSA9IGZ1bmN0aW9uIChmYSkge1xuICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfbGVmdCwgKGZ1bmN0aW9uIChhY2MsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBCZWx0X0FycmF5LmNvbmNhdChhY2MsIFthXSk7XG4gICAgICAgICAgICAgICAgfSksIFtdLCBmYSk7XG4gIH07XG4gIHZhciBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoUykge1xuICAgIHZhciBCc0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLlNlbWlncm91cCwgUyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEJzRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zOiBCc0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIHN1cnJvdW5kTWFwOiBCc0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucy5zdXJyb3VuZF9tYXAsXG4gICAgICAgICAgICBzdXJyb3VuZDogQnNGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMuc3Vycm91bmRcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBDdXJyeS5fMShCc0ZvbGRhYmxlRXh0ZW5zaW9ucy5Nb25vaWQsIE0pO1xuICAgIHZhciBmb2xkTWFwID0gQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMuRk0uZm9sZF9tYXA7XG4gICAgdmFyIGludGVyY2FsYXRlID0gZnVuY3Rpb24gKHNlcCwgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfbGVmdCwgKGZ1bmN0aW9uIChwYXJhbSwgeCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzIoTS5hcHBlbmQsIHBhcmFtWzFdLCBDdXJyeS5fMihNLmFwcGVuZCwgc2VwLCB4KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIE0uZW1wdHlcbiAgICAgICAgICAgICAgICAgIF0sIHhzKVsxXTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMsXG4gICAgICAgICAgICBmb2xkTWFwOiBmb2xkTWFwLFxuICAgICAgICAgICAgZm9sZFdpdGhNb25vaWQ6IEJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLmZvbGQsXG4gICAgICAgICAgICBpbnRlcmNhbGF0ZTogaW50ZXJjYWxhdGVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgZm9sZE1hcCA9IGZ1bmN0aW9uIChtb25vaWRBLCBmLCB4cykge1xuICAgIHZhciBCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyA9IEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLk1vbm9pZCwgbW9ub2lkQSk7XG4gICAgdmFyIGZvbGRNYXAkMSA9IEJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLkZNLmZvbGRfbWFwO1xuICAgIHJldHVybiBDdXJyeS5fMihmb2xkTWFwJDEsIGYsIHhzKTtcbiAgfTtcbiAgdmFyIGZvbGRXaXRoTW9ub2lkID0gZnVuY3Rpb24gKG1vbm9pZEEsIHhzKSB7XG4gICAgdmFyIEJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gQ3VycnkuXzEoQnNGb2xkYWJsZUV4dGVuc2lvbnMuTW9ub2lkLCBtb25vaWRBKTtcbiAgICByZXR1cm4gQ3VycnkuXzEoQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMuZm9sZCwgeHMpO1xuICB9O1xuICB2YXIgaW50ZXJjYWxhdGUgPSBmdW5jdGlvbiAobW9ub2lkQSwgc2VwLCB4cykge1xuICAgIEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLk1vbm9pZCwgbW9ub2lkQSk7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMihtb25vaWRBLmFwcGVuZCwgcGFyYW1bMV0sIEN1cnJ5Ll8yKG1vbm9pZEEuYXBwZW5kLCBzZXAsIHgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICBtb25vaWRBLmVtcHR5XG4gICAgICAgICAgICAgICAgXSwgeHMpWzFdO1xuICB9O1xuICB2YXIgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gQ3VycnkuXzEoQnNGb2xkYWJsZUV4dGVuc2lvbnMuQXBwbGljYXRpdmUsIEEpO1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zOiBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgICAgdHJhdmVyc2VfOiBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLnRyYXZlcnNlJHByaW1lLFxuICAgICAgICAgICAgc2VxdWVuY2VfOiBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLnNlcXVlbmNlJHByaW1lXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyA9IEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLk1vbmFkLCBNKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9uczogQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIGZvbGRXaXRoTW9uYWQ6IEJzRm9sZGFibGVNb25hZEV4dGVuc2lvbnMuZm9sZF9tb25hZFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIChFKSB7XG4gICAgdmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICByZXR1cm4gYW55KEN1cnJ5Ll8xKEUuZXEsIHBhcmFtKSwgcGFyYW0kMSk7XG4gICAgfTtcbiAgICB2YXIgaW5kZXhPZiA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgcmV0dXJuIGluZGV4T2ZCeShFLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGFpbnM6IGNvbnRhaW5zLFxuICAgICAgICAgICAgaW5kZXhPZjogaW5kZXhPZlxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoTykge1xuICAgIHZhciBtaW4gPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBtaW5CeShPLmNvbXBhcmUsIHBhcmFtKTtcbiAgICB9O1xuICAgIHZhciBtYXggPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBtYXhCeShPLmNvbXBhcmUsIHBhcmFtKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgIG1heDogbWF4XG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBCc0ZvbGRhYmxlRXh0ZW5zaW9uczogQnNGb2xkYWJsZUV4dGVuc2lvbnMsXG4gICAgICAgICAgYW55OiBhbnksXG4gICAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgICAgY29udGFpbnNCeTogY29udGFpbnNCeSxcbiAgICAgICAgICBjb250YWluczogY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZkJ5OiBpbmRleE9mQnksXG4gICAgICAgICAgaW5kZXhPZjogaW5kZXhPZixcbiAgICAgICAgICBtaW5CeTogbWluQnksXG4gICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgbWF4Qnk6IG1heEJ5LFxuICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgIGNvdW50Qnk6IGNvdW50QnksXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgc2l6ZTogbGVuZ3RoLFxuICAgICAgICAgIGNvdW50OiBsZW5ndGgsXG4gICAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgICBmb3JFYWNoV2l0aEluZGV4OiBmb3JFYWNoV2l0aEluZGV4LFxuICAgICAgICAgIGZpbmQ6IGZpbmQsXG4gICAgICAgICAgZmluZFdpdGhJbmRleDogZmluZFdpdGhJbmRleCxcbiAgICAgICAgICB0b0xpc3Q6IHRvTGlzdCxcbiAgICAgICAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgICAgICAgIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9uczogRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZvbGRNYXA6IGZvbGRNYXAsXG4gICAgICAgICAgZm9sZFdpdGhNb25vaWQ6IGZvbGRXaXRoTW9ub2lkLFxuICAgICAgICAgIGludGVyY2FsYXRlOiBpbnRlcmNhbGF0ZSxcbiAgICAgICAgICBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9uczogRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVNb25hZEV4dGVuc2lvbnM6IEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlRXFFeHRlbnNpb25zOiBGb2xkYWJsZUVxRXh0ZW5zaW9ucyxcbiAgICAgICAgICBGb2xkYWJsZU9yZEV4dGVuc2lvbnM6IEZvbGRhYmxlT3JkRXh0ZW5zaW9uc1xuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBvcHRpb25BbHQgLFxuICBGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBcbn1cbi8qIFJlbHVkZV9PcmQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBTZW1pZ3JvdXBFeHRlbnNpb25zKFMpIHtcbiAgdmFyIGNvbmNhdE5hbWVkID0gZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFMuYXBwZW5kLCBwcmVmaXgsIHN1ZmZpeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29uY2F0TmFtZWQ6IGNvbmNhdE5hbWVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cEluZml4KFMpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkcGlwZSRwbHVzJHBpcGU6IFMuYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIFNlbWlncm91cEV4dGVuc2lvbnMgLFxuICBTZW1pZ3JvdXBJbmZpeCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBTZW1pZ3JvdXBvaWRFeHRlbnNpb25zKFMpIHtcbiAgdmFyIGFuZFRoZW4gPSBmdW5jdGlvbiAoYVRvQiwgYlRvQykge1xuICAgIHJldHVybiBDdXJyeS5fMihTLmNvbXBvc2UsIGJUb0MsIGFUb0IpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFuZFRoZW46IGFuZFRoZW5cbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaWdyb3Vwb2lkSW5maXgoUykge1xuICB2YXIgYW5kVGhlbiA9IGZ1bmN0aW9uIChhVG9CLCBiVG9DKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFMuY29tcG9zZSwgYlRvQywgYVRvQik7XG4gIH07XG4gIHZhciBTRSA9IHtcbiAgICBhbmRUaGVuOiBhbmRUaGVuXG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgU0U6IFNFLFxuICAgICAgICAgICRsZXNzJGxlc3MkbGVzczogUy5jb21wb3NlLFxuICAgICAgICAgICRncmVhdCRncmVhdCRncmVhdDogYW5kVGhlblxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBTZW1pZ3JvdXBvaWRFeHRlbnNpb25zICxcbiAgU2VtaWdyb3Vwb2lkSW5maXggLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgT3B0aW9uJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GdW5jdGlvbiBmcm9tIFwiLi4vUmVsdWRlX0Z1bmN0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19QbHVzIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1BsdXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsaWduIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsaWduLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbm9pZCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbiBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pYWxpZ24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXAuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuYnMuanNcIjtcblxuZnVuY3Rpb24gY29tcG9zZShvcHRpb25CVG9DLCBvcHRpb25BVG9CKSB7XG4gIGlmIChvcHRpb25BVG9CICE9PSB1bmRlZmluZWQgJiYgb3B0aW9uQlRvQyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQob3B0aW9uQVRvQiwgb3B0aW9uQlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gIH1cbiAgXG59XG5cbnZhciBTZW1pZ3JvdXBvaWQgPSB7XG4gIGNvbXBvc2U6IGNvbXBvc2Vcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLlNlbWlncm91cG9pZEV4dGVuc2lvbnMoU2VtaWdyb3Vwb2lkKTtcblxuZnVuY3Rpb24gbWFwKGYsIHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKEN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpKTtcbiAgfVxuICBcbn1cblxudmFyIEZ1bmN0b3IgPSB7XG4gIG1hcDogbWFwXG59O1xuXG52YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcblxudmFyIGFwcGx5ID0gT3B0aW9uJEJzQmFzdGV0LkFwcGx5LmFwcGx5O1xuXG52YXIgQXBwbHkgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHlcbn07XG5cbnZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuXG5mdW5jdGlvbiBwdXJlKHYpIHtcbiAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUodik7XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbmZ1bmN0aW9uIGJpbmQoeCwgZikge1xuICBpZiAoeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpO1xuICB9XG4gIFxufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IHB1cmUsXG4gIGZsYXRfbWFwOiBiaW5kXG59O1xuXG52YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRFeHRlbnNpb25zKE1vbmFkKTtcblxuZnVuY3Rpb24gYWxpZ24oZmEsIGZiKSB7XG4gIGlmIChmYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGZiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiBUaGF0ICovQmxvY2suX18oMSwgW0NhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZmIpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICB9XG4gIHZhciBhID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihmYSk7XG4gIGlmIChmYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIEJvdGggKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZmIpXG4gICAgICAgICAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVGhpcyAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxpZ25XaXRoKGYsIGZhLCBmYikge1xuICByZXR1cm4gbWFwKGYsIGFsaWduKGZhLCBmYikpO1xufVxuXG52YXIgU2VtaWFsaWduID0ge1xuICBtYXA6IG1hcCxcbiAgYWxpZ246IGFsaWduLFxuICBhbGlnbldpdGg6IGFsaWduV2l0aFxufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduLlNlbWlhbGlnbkV4dGVuc2lvbnMoU2VtaWFsaWduKTtcblxudmFyIEFsaWduID0ge1xuICBtYXA6IG1hcCxcbiAgYWxpZ246IGFsaWduLFxuICBhbGlnbldpdGg6IGFsaWduV2l0aCxcbiAgbmlsOiB1bmRlZmluZWRcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0FsaWduLkFsaWduRXh0ZW5zaW9ucyhBbGlnbik7XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGZuLCAkJGRlZmF1bHQpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBPcHRpb24kQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9sZWZ0KGZuLCAkJGRlZmF1bHQsIHBhcmFtKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZm9sZFJpZ2h0KGZuLCAkJGRlZmF1bHQpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBPcHRpb24kQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9yaWdodChmbiwgJCRkZWZhdWx0LCBwYXJhbSk7XG4gICAgfSk7XG59XG5cbnZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5Gb2xkYWJsZUV4dGVuc2lvbnMoT3B0aW9uJEJzQmFzdGV0LkZvbGRhYmxlKTtcblxuZnVuY3Rpb24gYWx0KGZhMSwgZmEyKSB7XG4gIGlmIChmYTEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbHRMYXp5KGZhMSwgZ2V0RkEyKSB7XG4gIGlmIChmYTEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGdldEZBMiwgdW5kZWZpbmVkKTtcbiAgfVxufVxuXG52YXIgU2VtaWdyb3VwX0FueSA9IHtcbiAgYXBwZW5kOiBhbHRcbn07XG5cbnZhciBNb25vaWRfQW55ID0ge1xuICBhcHBlbmQ6IGFsdCxcbiAgZW1wdHk6IHVuZGVmaW5lZFxufTtcblxudmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRFeHRlbnNpb25zKE9wdGlvbiRCc0Jhc3RldC5BbHQpO1xuXG5SZWx1ZGVfRXh0ZW5zaW9uc19QbHVzLlBsdXNFeHRlbnNpb25zKE9wdGlvbiRCc0Jhc3RldC5QbHVzKTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQWx0ZXJuYXRpdmUuQWx0ZXJuYXRpdmVFeHRlbnNpb25zKE9wdGlvbiRCc0Jhc3RldC5BbHRlcm5hdGl2ZSk7XG5cbmZ1bmN0aW9uIGVxQnkoaW5uZXJFcSwgYSwgYikge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGlubmVyRXEsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiID09PSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoc2hvd0EsIGZhMSwgZmEyKSB7XG4gIHZhciBFcSA9IE9wdGlvbiRCc0Jhc3RldC5FcShzaG93QSk7XG4gIHJldHVybiBDdXJyeS5fMihFcS5lcSwgZmExLCBmYTIpO1xufVxuXG5mdW5jdGlvbiBFcShFcUEpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIHJldHVybiBlcUJ5KEVxQS5lcSwgeHMsIHlzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd0J5KHNob3dBLCBhKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJTb21lKFwiICsgKEN1cnJ5Ll8xKHNob3dBLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpKSArIFwiKVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJOb25lXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdyhzaG93QSwgZmEpIHtcbiAgdmFyIFNob3cgPSBPcHRpb24kQnNCYXN0ZXQuU2hvdyhzaG93QSk7XG4gIHJldHVybiBDdXJyeS5fMShTaG93LnNob3csIGZhKTtcbn1cblxuZnVuY3Rpb24gV2l0aFNlbWlncm91cChTKSB7XG4gIHZhciBTZW1pZ3JvdXAgPSBPcHRpb24kQnNCYXN0ZXQuU2VtaWdyb3VwKFMpO1xuICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cC5TZW1pZ3JvdXBFeHRlbnNpb25zKFNlbWlncm91cCk7XG4gIHZhciBNb25vaWQgPSBPcHRpb24kQnNCYXN0ZXQuTW9ub2lkKFMpO1xuICB2YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkLk1vbm9pZEV4dGVuc2lvbnMoTW9ub2lkKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBTZW1pZ3JvdXA6IFNlbWlncm91cCxcbiAgICAgICAgICBjb25jYXROYW1lZDogaW5jbHVkZS5jb25jYXROYW1lZCxcbiAgICAgICAgICBNb25vaWQ6IE1vbm9pZCxcbiAgICAgICAgICBCc01vbm9pZEV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Cc01vbm9pZEV4dGVuc2lvbnMsXG4gICAgICAgICAgZ3VhcmQ6IGluY2x1ZGUkMS5ndWFyZCxcbiAgICAgICAgICBwb3dlcjogaW5jbHVkZSQxLnBvd2VyXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFdpdGhBcHBsaWNhdGl2ZShBKSB7XG4gIHZhciBUcmF2ZXJzYWJsZSA9IE9wdGlvbiRCc0Jhc3RldC5UcmF2ZXJzYWJsZShBKTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuVHJhdmVyc2FibGVFeHRlbnNpb25zKFRyYXZlcnNhYmxlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGVcbiAgICAgICAgfTtcbn1cblxudmFyIGFuZFRoZW4gPSBpbmNsdWRlLmFuZFRoZW47XG5cbnZhciBCc0Z1bmN0b3JFeHRlbnNpb25zID0gaW5jbHVkZSQxLkJzRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBmbGlwTWFwID0gaW5jbHVkZSQxLmZsaXBNYXA7XG5cbnZhciAkJHZvaWQgPSBpbmNsdWRlJDEuJCR2b2lkO1xuXG52YXIgdm9pZFJpZ2h0ID0gaW5jbHVkZSQxLnZvaWRSaWdodDtcblxudmFyIHZvaWRMZWZ0ID0gaW5jbHVkZSQxLnZvaWRMZWZ0O1xuXG52YXIgZmxhcCA9IGluY2x1ZGUkMS5mbGFwO1xuXG52YXIgQnNBcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDIuQnNBcHBseUV4dGVuc2lvbnM7XG5cbnZhciBhcHBseUZpcnN0ID0gaW5jbHVkZSQyLmFwcGx5Rmlyc3Q7XG5cbnZhciBhcHBseVNlY29uZCA9IGluY2x1ZGUkMi5hcHBseVNlY29uZDtcblxudmFyIG1hcDIgPSBpbmNsdWRlJDIubWFwMjtcblxudmFyIG1hcDMgPSBpbmNsdWRlJDIubWFwMztcblxudmFyIG1hcDQgPSBpbmNsdWRlJDIubWFwNDtcblxudmFyIG1hcDUgPSBpbmNsdWRlJDIubWFwNTtcblxudmFyIHR1cGxlMiA9IGluY2x1ZGUkMi50dXBsZTI7XG5cbnZhciB0dXBsZTMgPSBpbmNsdWRlJDIudHVwbGUzO1xuXG52YXIgdHVwbGU0ID0gaW5jbHVkZSQyLnR1cGxlNDtcblxudmFyIHR1cGxlNSA9IGluY2x1ZGUkMi50dXBsZTU7XG5cbnZhciBtYXBUdXBsZTIgPSBpbmNsdWRlJDIubWFwVHVwbGUyO1xuXG52YXIgbWFwVHVwbGUzID0gaW5jbHVkZSQyLm1hcFR1cGxlMztcblxudmFyIG1hcFR1cGxlNCA9IGluY2x1ZGUkMi5tYXBUdXBsZTQ7XG5cbnZhciBtYXBUdXBsZTUgPSBpbmNsdWRlJDIubWFwVHVwbGU1O1xuXG52YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDMuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBsaWZ0QTEgPSBpbmNsdWRlJDMubGlmdEExO1xuXG52YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuQnNNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBmbGF0TWFwID0gaW5jbHVkZSQ0LmZsYXRNYXA7XG5cbnZhciBmbGF0dGVuID0gaW5jbHVkZSQ0LmZsYXR0ZW47XG5cbnZhciBjb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkNC5jb21wb3NlS2xlaXNsaTtcblxudmFyIGZsaXBDb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkNC5mbGlwQ29tcG9zZUtsZWlzbGk7XG5cbnZhciBsaWZ0TTEgPSBpbmNsdWRlJDQubGlmdE0xO1xuXG52YXIgd2hlbl8gPSBpbmNsdWRlJDQud2hlbl87XG5cbnZhciB1bmxlc3MgPSBpbmNsdWRlJDQudW5sZXNzO1xuXG52YXIgRm9sZGFibGU7XG5cbnZhciBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucztcblxudmFyIGFueSA9IGluY2x1ZGUkNS5hbnk7XG5cbnZhciBhbGwgPSBpbmNsdWRlJDUuYWxsO1xuXG52YXIgY29udGFpbnNCeSA9IGluY2x1ZGUkNS5jb250YWluc0J5O1xuXG52YXIgY29udGFpbnMgPSBpbmNsdWRlJDUuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBpbmNsdWRlJDUuaW5kZXhPZkJ5O1xuXG52YXIgaW5kZXhPZiA9IGluY2x1ZGUkNS5pbmRleE9mO1xuXG52YXIgbWluQnkgPSBpbmNsdWRlJDUubWluQnk7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDUubWluO1xuXG52YXIgbWF4QnkgPSBpbmNsdWRlJDUubWF4Qnk7XG5cbnZhciBtYXggPSBpbmNsdWRlJDUubWF4O1xuXG52YXIgY291bnRCeSA9IGluY2x1ZGUkNS5jb3VudEJ5O1xuXG52YXIgbGVuZ3RoID0gaW5jbHVkZSQ1Lmxlbmd0aDtcblxudmFyIHNpemUgPSBpbmNsdWRlJDUuc2l6ZTtcblxudmFyIGNvdW50ID0gaW5jbHVkZSQ1LmNvdW50O1xuXG52YXIgZm9yRWFjaCA9IGluY2x1ZGUkNS5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IGluY2x1ZGUkNS5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IGluY2x1ZGUkNS5maW5kO1xuXG52YXIgZmluZFdpdGhJbmRleCA9IGluY2x1ZGUkNS5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9MaXN0ID0gaW5jbHVkZSQ1LnRvTGlzdDtcblxudmFyIHRvQXJyYXkgPSBpbmNsdWRlJDUudG9BcnJheTtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDUuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IGluY2x1ZGUkNS5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDUuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IGluY2x1ZGUkNS5pbnRlcmNhbGF0ZTtcblxudmFyIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDUuRm9sZGFibGVNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Gb2xkYWJsZUVxRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Gb2xkYWJsZU9yZEV4dGVuc2lvbnM7XG5cbnZhciBBbHQ7XG5cbnZhciBvckVsc2UgPSBpbmNsdWRlJDYub3JFbHNlO1xuXG52YXIgUGx1cztcblxudmFyIEFsdGVybmF0aXZlO1xuXG52YXIgVHJhdmVyc2FibGUgPSBPcHRpb24kQnNCYXN0ZXQuVHJhdmVyc2FibGU7XG5cbnZhciBPcmQgPSBPcHRpb24kQnNCYXN0ZXQuT3JkO1xuXG52YXIgU2hvdztcblxuZXhwb3J0IHtcbiAgY29tcG9zZSAsXG4gIFNlbWlncm91cG9pZCAsXG4gIGFuZFRoZW4gLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsaWduICxcbiAgYWxpZ25XaXRoICxcbiAgU2VtaWFsaWduICxcbiAgQWxpZ24gLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBsZW5ndGggLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9MaXN0ICxcbiAgdG9BcnJheSAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgYWx0ICxcbiAgYWx0TGF6eSAsXG4gIFNlbWlncm91cF9BbnkgLFxuICBNb25vaWRfQW55ICxcbiAgQWx0ICxcbiAgb3JFbHNlICxcbiAgUGx1cyAsXG4gIEFsdGVybmF0aXZlICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIE9yZCAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgV2l0aFNlbWlncm91cCAsXG4gIFdpdGhBcHBsaWNhdGl2ZSAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X09wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X09wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHNvbWUoYSkge1xuICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhKTtcbn1cblxuZnVuY3Rpb24gaXNTb21lKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc05vbmUocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZvbGQoJCRkZWZhdWx0LCBmLCB2KSB7XG4gIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih2KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb2xkTGF6eShnZXREZWZhdWx0LCBmLCB2KSB7XG4gIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih2KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGdldERlZmF1bHQsIHVuZGVmaW5lZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3JFbHNlKCQkZGVmYXVsdCwgYSkge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPckVsc2VMYXp5KGdldERlZmF1bHQsIGEpIHtcbiAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShnZXREZWZhdWx0LCB1bmRlZmluZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9yRWxzZShmYWxsYmFjaywgZmEpIHtcbiAgaWYgKGZhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9yRWxzZUxhenkoZmFsbGJhY2ssIGZhKSB7XG4gIGlmIChmYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShmYWxsYmFjaywgdW5kZWZpbmVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YXAoaWZTb21lLCBmYSkge1xuICBpZiAoZmEgIT09IHVuZGVmaW5lZCkge1xuICAgIEN1cnJ5Ll8xKGlmU29tZSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihmYSkpO1xuICAgIHJldHVybiBmYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmE7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFwTm9uZShpZk5vbmUsIGZhKSB7XG4gIGlmIChmYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIEN1cnJ5Ll8xKGlmTm9uZSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gZmE7XG4gIH1cbn1cblxuZnVuY3Rpb24gYml0YXAoaWZOb25lLCBpZlNvbWUsIGZhKSB7XG4gIGlmIChmYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgQ3VycnkuXzEoaWZTb21lLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGZhKSk7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIEN1cnJ5Ll8xKGlmTm9uZSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihmbikge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uICgkJGRlZmF1bHQsIHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzEoZm4sIHYpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJOb3QoZikge1xuICByZXR1cm4gZmlsdGVyKChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyIG5vbmU7XG5cbnZhciBlbXB0eTtcblxudmFyIGdldE9yVGhyb3cgPSBCZWx0X09wdGlvbi5nZXRFeG47XG5cbnZhciB0YXBTb21lID0gdGFwO1xuXG52YXIga2VlcCA9IGZpbHRlcjtcblxudmFyIHJlamVjdCA9IGZpbHRlck5vdDtcblxuZXhwb3J0IHtcbiAgc29tZSAsXG4gIG5vbmUgLFxuICBlbXB0eSAsXG4gIGlzU29tZSAsXG4gIGlzTm9uZSAsXG4gIGZvbGQgLFxuICBmb2xkTGF6eSAsXG4gIGdldE9yRWxzZSAsXG4gIGdldE9yRWxzZUxhenkgLFxuICBnZXRPclRocm93ICxcbiAgb3JFbHNlICxcbiAgb3JFbHNlTGF6eSAsXG4gIHRhcCAsXG4gIHRhcFNvbWUgLFxuICB0YXBOb25lICxcbiAgYml0YXAgLFxuICBmaWx0ZXIgLFxuICBrZWVwICxcbiAgZmlsdGVyTm90ICxcbiAgcmVqZWN0ICxcbiAgXG59XG4vKiBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIExpc3QgZnJvbSBcIi4vbGlzdC5qc1wiO1xuXG52YXIgbGVuZ3RoID0gTGlzdC5sZW5ndGg7XG5cbnZhciBoZCA9IExpc3QuaGQ7XG5cbnZhciBjb21wYXJlX2xlbmd0aHMgPSBMaXN0LmNvbXBhcmVfbGVuZ3RocztcblxudmFyIGNvbXBhcmVfbGVuZ3RoX3dpdGggPSBMaXN0LmNvbXBhcmVfbGVuZ3RoX3dpdGg7XG5cbnZhciBjb25zID0gTGlzdC5jb25zO1xuXG52YXIgdGwgPSBMaXN0LnRsO1xuXG52YXIgbnRoID0gTGlzdC5udGg7XG5cbnZhciBudGhfb3B0ID0gTGlzdC5udGhfb3B0O1xuXG52YXIgcmV2ID0gTGlzdC5yZXY7XG5cbnZhciBpbml0ID0gTGlzdC5pbml0O1xuXG52YXIgYXBwZW5kID0gTGlzdC5hcHBlbmQ7XG5cbnZhciByZXZfYXBwZW5kID0gTGlzdC5yZXZfYXBwZW5kO1xuXG52YXIgY29uY2F0ID0gTGlzdC5jb25jYXQ7XG5cbnZhciBmbGF0dGVuID0gTGlzdC5mbGF0dGVuO1xuXG52YXIgaXRlciA9IExpc3QuaXRlcjtcblxudmFyIGl0ZXJpID0gTGlzdC5pdGVyaTtcblxudmFyIG1hcCA9IExpc3QubWFwO1xuXG52YXIgbWFwaSA9IExpc3QubWFwaTtcblxudmFyIHJldl9tYXAgPSBMaXN0LnJldl9tYXA7XG5cbnZhciBmb2xkX2xlZnQgPSBMaXN0LmZvbGRfbGVmdDtcblxudmFyIGZvbGRfcmlnaHQgPSBMaXN0LmZvbGRfcmlnaHQ7XG5cbnZhciBpdGVyMiA9IExpc3QuaXRlcjI7XG5cbnZhciBtYXAyID0gTGlzdC5tYXAyO1xuXG52YXIgcmV2X21hcDIgPSBMaXN0LnJldl9tYXAyO1xuXG52YXIgZm9sZF9sZWZ0MiA9IExpc3QuZm9sZF9sZWZ0MjtcblxudmFyIGZvbGRfcmlnaHQyID0gTGlzdC5mb2xkX3JpZ2h0MjtcblxudmFyIGZvcl9hbGwgPSBMaXN0LmZvcl9hbGw7XG5cbnZhciBleGlzdHMgPSBMaXN0LmV4aXN0cztcblxudmFyIGZvcl9hbGwyID0gTGlzdC5mb3JfYWxsMjtcblxudmFyIGV4aXN0czIgPSBMaXN0LmV4aXN0czI7XG5cbnZhciBtZW0gPSBMaXN0Lm1lbTtcblxudmFyIG1lbXEgPSBMaXN0Lm1lbXE7XG5cbnZhciBmaW5kID0gTGlzdC5maW5kO1xuXG52YXIgZmluZF9vcHQgPSBMaXN0LmZpbmRfb3B0O1xuXG52YXIgZmlsdGVyID0gTGlzdC5maWx0ZXI7XG5cbnZhciBmaW5kX2FsbCA9IExpc3QuZmluZF9hbGw7XG5cbnZhciBwYXJ0aXRpb24gPSBMaXN0LnBhcnRpdGlvbjtcblxudmFyIGFzc29jID0gTGlzdC5hc3NvYztcblxudmFyIGFzc29jX29wdCA9IExpc3QuYXNzb2Nfb3B0O1xuXG52YXIgYXNzcSA9IExpc3QuYXNzcTtcblxudmFyIGFzc3Ffb3B0ID0gTGlzdC5hc3NxX29wdDtcblxudmFyIG1lbV9hc3NvYyA9IExpc3QubWVtX2Fzc29jO1xuXG52YXIgbWVtX2Fzc3EgPSBMaXN0Lm1lbV9hc3NxO1xuXG52YXIgcmVtb3ZlX2Fzc29jID0gTGlzdC5yZW1vdmVfYXNzb2M7XG5cbnZhciByZW1vdmVfYXNzcSA9IExpc3QucmVtb3ZlX2Fzc3E7XG5cbnZhciBzcGxpdCA9IExpc3Quc3BsaXQ7XG5cbnZhciBjb21iaW5lID0gTGlzdC5jb21iaW5lO1xuXG52YXIgc29ydCA9IExpc3Quc29ydDtcblxudmFyIHN0YWJsZV9zb3J0ID0gTGlzdC5zdGFibGVfc29ydDtcblxudmFyIGZhc3Rfc29ydCA9IExpc3QuZmFzdF9zb3J0O1xuXG52YXIgc29ydF91bmlxID0gTGlzdC5zb3J0X3VuaXE7XG5cbnZhciBtZXJnZSA9IExpc3QubWVyZ2U7XG5cbmV4cG9ydCB7XG4gIGxlbmd0aCAsXG4gIGhkICxcbiAgY29tcGFyZV9sZW5ndGhzICxcbiAgY29tcGFyZV9sZW5ndGhfd2l0aCAsXG4gIGNvbnMgLFxuICB0bCAsXG4gIG50aCAsXG4gIG50aF9vcHQgLFxuICByZXYgLFxuICBpbml0ICxcbiAgYXBwZW5kICxcbiAgcmV2X2FwcGVuZCAsXG4gIGNvbmNhdCAsXG4gIGZsYXR0ZW4gLFxuICBpdGVyICxcbiAgaXRlcmkgLFxuICBtYXAgLFxuICBtYXBpICxcbiAgcmV2X21hcCAsXG4gIGZvbGRfbGVmdCAsXG4gIGZvbGRfcmlnaHQgLFxuICBpdGVyMiAsXG4gIG1hcDIgLFxuICByZXZfbWFwMiAsXG4gIGZvbGRfbGVmdDIgLFxuICBmb2xkX3JpZ2h0MiAsXG4gIGZvcl9hbGwgLFxuICBleGlzdHMgLFxuICBmb3JfYWxsMiAsXG4gIGV4aXN0czIgLFxuICBtZW0gLFxuICBtZW1xICxcbiAgZmluZCAsXG4gIGZpbmRfb3B0ICxcbiAgZmlsdGVyICxcbiAgZmluZF9hbGwgLFxuICBwYXJ0aXRpb24gLFxuICBhc3NvYyAsXG4gIGFzc29jX29wdCAsXG4gIGFzc3EgLFxuICBhc3NxX29wdCAsXG4gIG1lbV9hc3NvYyAsXG4gIG1lbV9hc3NxICxcbiAgcmVtb3ZlX2Fzc29jICxcbiAgcmVtb3ZlX2Fzc3EgLFxuICBzcGxpdCAsXG4gIGNvbWJpbmUgLFxuICBzb3J0ICxcbiAgc3RhYmxlX3NvcnQgLFxuICBmYXN0X3NvcnQgLFxuICBzb3J0X3VuaXEgLFxuICBtZXJnZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgTGlzdExhYmVscyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0TGFiZWxzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCIuL1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgRGVmYXVsdCRCc0Jhc3RldCBmcm9tIFwiLi9EZWZhdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG1hcChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gTGlzdExhYmVscy5tYXAoZiwgcGFyYW0pO1xuICAgIH0pO1xufVxuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbnZhciBBbHQgPSB7XG4gIG1hcDogbWFwLFxuICBhbHQ6IExpc3RMYWJlbHMuYXBwZW5kXG59O1xuXG5mdW5jdGlvbiBhcHBseShmbl9hcnJheSwgYSkge1xuICByZXR1cm4gTGlzdExhYmVscy5mb2xkX2xlZnQoKGZ1bmN0aW9uIChhY2MsIGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGlzdExhYmVscy5hcHBlbmQoYWNjLCBMaXN0TGFiZWxzLm1hcChmLCBhKSk7XG4gICAgICAgICAgICAgIH0pLCAvKiBbXSAqLzAsIGZuX2FycmF5KTtcbn1cblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgIGEsXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxuZnVuY3Rpb24gZmxhdF9tYXAoeCwgZikge1xuICByZXR1cm4gTGlzdExhYmVscy5mb2xkX2xlZnQoKGZ1bmN0aW9uIChhY2MsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGlzdExhYmVscy5hcHBlbmQoYWNjLCBDdXJyeS5fMShmLCBhKSk7XG4gICAgICAgICAgICAgIH0pLCAvKiBbXSAqLzAsIHgpO1xufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IHB1cmUsXG4gIGZsYXRfbWFwOiBmbGF0X21hcFxufTtcblxudmFyIFBsdXMgPSB7XG4gIG1hcDogbWFwLFxuICBhbHQ6IExpc3RMYWJlbHMuYXBwZW5kLFxuICBlbXB0eTogLyogW10gKi8wXG59O1xuXG52YXIgQWx0ZXJuYXRpdmUgPSB7XG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgbWFwOiBtYXAsXG4gIGFsdDogTGlzdExhYmVscy5hcHBlbmQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cbmZ1bmN0aW9uIGZvbGRfbGVmdChmLCBpbml0KSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gTGlzdExhYmVscy5mb2xkX2xlZnQoZiwgaW5pdCwgcGFyYW0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGluaXQpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBMaXN0TGFiZWxzLmZvbGRfcmlnaHQoZiwgcGFyYW0sIGluaXQpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcChmdW5hcmcpIHtcbiAgdmFyIHBhcnRpYWxfYXJnID0gRGVmYXVsdCRCc0Jhc3RldC5Gb2xkX01hcDtcbiAgdmFyIEQgPSBwYXJ0aWFsX2FyZyhmdW5hcmcsIHtcbiAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHRcbiAgICAgIH0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBELmZvbGRfbWFwX2RlZmF1bHRfbGVmdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcF9BbnkoZnVuYXJnKSB7XG4gIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXBfQW55O1xuICB2YXIgRCA9IHBhcnRpYWxfYXJnKGZ1bmFyZywge1xuICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgZm9sZF9yaWdodDogZm9sZF9yaWdodFxuICAgICAgfSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IEQuZm9sZF9tYXBfZGVmYXVsdF9sZWZ0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMoZnVuYXJnKSB7XG4gIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXBfUGx1cztcbiAgdmFyIEQgPSBwYXJ0aWFsX2FyZyhmdW5hcmcsIHtcbiAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHRcbiAgICAgIH0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBELmZvbGRfbWFwX2RlZmF1bHRfbGVmdFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZGFibGVfRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiB1bmZvbGQoZiwgaW5pdCkge1xuICB2YXIgbWF0Y2ggPSBDdXJyeS5fMShmLCBpbml0KTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIHVuZm9sZChmLCBtYXRjaFsxXSlcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxudmFyIFVuZm9sZGFibGUgPSB7XG4gIHVuZm9sZDogdW5mb2xkXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShBKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmKSB7XG4gICAgdmFyIGFyZyA9IEN1cnJ5Ll8xKEEucHVyZSwgLyogW10gKi8wKTtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICByZXR1cm4gTGlzdExhYmVscy5mb2xkX3JpZ2h0KChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMShBLnB1cmUsIChmdW5jdGlvbiAoeSwgeXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgQ3VycnkuXzEoZiwgYWNjKSksIHgpO1xuICAgICAgICAgICAgICAgICAgICB9KSwgcGFyYW0sIGFyZyk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIEQgPSBEZWZhdWx0JEJzQmFzdGV0LlNlcXVlbmNlKHtcbiAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlXG4gICAgICB9KTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBGb2xkYWJsZV9Gb2xkX01hcCxcbiAgICAgICAgICBGb2xkX01hcF9Bbnk6IEZvbGRhYmxlX0ZvbGRfTWFwX0FueSxcbiAgICAgICAgICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICAgICAgICBzZXF1ZW5jZTogRC5zZXF1ZW5jZV9kZWZhdWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEVxKEUpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIGlmIChMaXN0TGFiZWxzLmxlbmd0aCh4cykgPT09IExpc3RMYWJlbHMubGVuZ3RoKHlzKSkge1xuICAgICAgcmV0dXJuIExpc3RMYWJlbHMuZm9sZF9sZWZ0KChmdW5jdGlvbiAoYWNjLCBwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEUuZXEsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KSwgdHJ1ZSwgTGlzdExhYmVscy5jb21iaW5lKHhzLCB5cykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTaG93KFMpIHtcbiAgdmFyIEYgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRm9sZGFibGUoRm9sZGFibGUpO1xuICB2YXIgTSA9IEN1cnJ5Ll8xKEYuTW9ub2lkLCBTdHJpbmckQnNCYXN0ZXQuTW9ub2lkKTtcbiAgdmFyIHNob3cgPSBmdW5jdGlvbiAoeHMpIHtcbiAgICByZXR1cm4gXCJbXCIgKyAoQ3VycnkuXzIoTS5pbnRlcmNhbGF0ZSwgXCIsIFwiLCBMaXN0TGFiZWxzLm1hcChTLnNob3csIHhzKSkgKyBcIl1cIik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICB9O1xufVxuXG52YXIgaW5jbHVkZSA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE1vbmFkKTtcblxudmFyIGluY2x1ZGUkMSA9IEluZml4JEJzQmFzdGV0LkFsdGVybmF0aXZlKEFsdGVybmF0aXZlKTtcblxudmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUuJGdyZWF0JGdyZWF0JGVxO1xuXG52YXIgSW5maXhfJGVxJGxlc3MkbGVzcyA9IGluY2x1ZGUuJGVxJGxlc3MkbGVzcztcblxudmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUuJGdyZWF0JGVxJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUuJGxlc3MkZXEkbGVzcztcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkcGlwZSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJGhhc2gkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeCA9IHtcbiAgJGdyZWF0JGdyZWF0JGVxOiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEsXG4gICRlcSRsZXNzJGxlc3M6IEluZml4XyRlcSRsZXNzJGxlc3MsXG4gICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAkbGVzcyRlcSRsZXNzOiBJbmZpeF8kbGVzcyRlcSRsZXNzLFxuICAkbGVzcyRwaXBlJGdyZWF0OiBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0LFxuICAkbGVzcyQkZ3JlYXQ6IEluZml4XyRsZXNzJGRvbGxhciRncmVhdCxcbiAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdFxufTtcblxuZXhwb3J0IHtcbiAgRnVuY3RvciAsXG4gIEFsdCAsXG4gIEFwcGx5ICxcbiAgQXBwbGljYXRpdmUgLFxuICBNb25hZCAsXG4gIFBsdXMgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIEZvbGRhYmxlICxcbiAgVW5mb2xkYWJsZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgRXEgLFxuICBTaG93ICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBTZW1pZ3JvdXBBbnlFeHRlbnNpb25zKFMpIHtcbiAgdmFyIGNvbmNhdE5hbWVkID0gZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFMuYXBwZW5kLCBwcmVmaXgsIHN1ZmZpeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29uY2F0TmFtZWQ6IGNvbmNhdE5hbWVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cEFueUluZml4KFMpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkcGlwZSRwbHVzJHBpcGU6IFMuYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIFNlbWlncm91cEFueUV4dGVuc2lvbnMgLFxuICBTZW1pZ3JvdXBBbnlJbmZpeCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgTGlzdCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvTGlzdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9TdHJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BbHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1BsdXMgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfUGx1cy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWRBbnkgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkQW55LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19VbmZvbGRhYmxlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1VuZm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55IGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cEFueS5icy5qc1wiO1xuXG52YXIgY29uY2F0ID0gQmVsdF9MaXN0LmNvbmNhdDtcblxudmFyIFNlbWlncm91cEFueSA9IHtcbiAgYXBwZW5kOiBjb25jYXRcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55KTtcblxudmFyIE1vbm9pZEFueSA9IHtcbiAgYXBwZW5kOiBjb25jYXQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWRBbnkuTW9ub2lkQW55RXh0ZW5zaW9ucyhNb25vaWRBbnkpO1xuXG52YXIgbWFwID0gTGlzdCRCc0Jhc3RldC5GdW5jdG9yLm1hcDtcblxudmFyIEZ1bmN0b3IgPSB7XG4gIG1hcDogbWFwXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcblxudmFyIGFwcGx5ID0gTGlzdCRCc0Jhc3RldC5BcHBseS5hcHBseTtcblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlFeHRlbnNpb25zKEFwcGx5KTtcblxudmFyIHB1cmUgPSBMaXN0JEJzQmFzdGV0LkFwcGxpY2F0aXZlLnB1cmU7XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxudmFyIGluY2x1ZGUkNCA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbnZhciBiaW5kID0gTGlzdCRCc0Jhc3RldC5Nb25hZC5mbGF0X21hcDtcblxudmFyIE1vbmFkID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5LFxuICBwdXJlOiBwdXJlLFxuICBmbGF0X21hcDogYmluZFxufTtcblxudmFyIGluY2x1ZGUkNSA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkRXh0ZW5zaW9ucyhNb25hZCk7XG5cbnZhciBhbHQgPSBMaXN0JEJzQmFzdGV0LkFsdC5hbHQ7XG5cbnZhciBBbHQgPSB7XG4gIG1hcDogbWFwLFxuICBhbHQ6IGFsdFxufTtcblxudmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRFeHRlbnNpb25zKEFsdCk7XG5cbnZhciBQbHVzID0ge1xuICBtYXA6IG1hcCxcbiAgYWx0OiBhbHQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1BsdXMuUGx1c0V4dGVuc2lvbnMoUGx1cyk7XG5cbnZhciBBbHRlcm5hdGl2ZSA9IHtcbiAgYXBwbHk6IGFwcGx5LFxuICBwdXJlOiBwdXJlLFxuICBtYXA6IG1hcCxcbiAgYWx0OiBhbHQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlLkFsdGVybmF0aXZlRXh0ZW5zaW9ucyhBbHRlcm5hdGl2ZSk7XG5cbnZhciBmb2xkTGVmdCA9IExpc3QkQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9sZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gTGlzdCRCc0Jhc3RldC5Gb2xkYWJsZS5mb2xkX3JpZ2h0O1xuXG52YXIgRm9sZGFibGVfRm9sZF9NYXAgPSBMaXN0JEJzQmFzdGV0LkZvbGRhYmxlLkZvbGRfTWFwO1xuXG52YXIgRm9sZGFibGVfRm9sZF9NYXBfQW55ID0gTGlzdCRCc0Jhc3RldC5Gb2xkYWJsZS5Gb2xkX01hcF9Bbnk7XG5cbnZhciBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzID0gTGlzdCRCc0Jhc3RldC5Gb2xkYWJsZS5Gb2xkX01hcF9QbHVzO1xuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZExlZnQsXG4gIGZvbGRfcmlnaHQ6IGZvbGRSaWdodCxcbiAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICBGb2xkX01hcF9Bbnk6IEZvbGRhYmxlX0ZvbGRfTWFwX0FueSxcbiAgRm9sZF9NYXBfUGx1czogRm9sZGFibGVfRm9sZF9NYXBfUGx1c1xufTtcblxudmFyIGluY2x1ZGUkNyA9IFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLkZvbGRhYmxlRXh0ZW5zaW9ucyhGb2xkYWJsZSk7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IGluY2x1ZGUkNy5pbnRlcmNhbGF0ZTtcblxudmFyIHVuZm9sZCA9IExpc3QkQnNCYXN0ZXQuVW5mb2xkYWJsZS51bmZvbGQ7XG5cbnZhciBVbmZvbGRhYmxlID0ge1xuICB1bmZvbGQ6IExpc3QkQnNCYXN0ZXQuVW5mb2xkYWJsZS51bmZvbGRcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1VuZm9sZGFibGUuVW5mb2xkYWJsZUV4dGVuc2lvbnMoVW5mb2xkYWJsZSk7XG5cbmZ1bmN0aW9uIGVxQnkoaW5uZXJFcSwgX2EsIF9iKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYiA9IF9iO1xuICAgIHZhciBhID0gX2E7XG4gICAgaWYgKCFhKSB7XG4gICAgICBpZiAoYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzIoaW5uZXJFcSwgYVswXSwgYlswXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2IgPSBiWzFdO1xuICAgIF9hID0gYVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVxKGVxQSwgeHMsIHlzKSB7XG4gIHJldHVybiBlcUJ5KGVxQS5lcSwgeHMsIHlzKTtcbn1cblxuZnVuY3Rpb24gRXEoRXFBKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICByZXR1cm4gZXFCeShFcUEuZXEsIHhzLCB5cyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHNob3dCeShpbm5lclNob3csIHhzKSB7XG4gIHZhciBqb2luID0gQ3VycnkuXzEoaW50ZXJjYWxhdGUsIFN0cmluZyRCc0Jhc3RldC5Nb25vaWQpO1xuICByZXR1cm4gXCJbXCIgKyAoQ3VycnkuXzIoam9pbiwgXCIsIFwiLCBtYXAoaW5uZXJTaG93KSh4cykpICsgXCJdXCIpO1xufVxuXG5mdW5jdGlvbiBzaG93KHNob3dBLCB4cykge1xuICByZXR1cm4gc2hvd0J5KHNob3dBLnNob3csIHhzKTtcbn1cblxuZnVuY3Rpb24gU2hvdyhTaG93QSkge1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uICh4cykge1xuICAgIHJldHVybiBzaG93QnkoU2hvd0Euc2hvdywgeHMpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3dcbiAgICAgICAgfTtcbn1cblxudmFyIElzb0FycmF5ID0ge1xuICBmcm9tQXJyYXk6IEJlbHRfTGlzdC5mcm9tQXJyYXksXG4gIHRvQXJyYXk6IEJlbHRfTGlzdC50b0FycmF5XG59O1xuXG52YXIgY29uY2F0TmFtZWQgPSBpbmNsdWRlLmNvbmNhdE5hbWVkO1xuXG52YXIgZW1wdHkgPSAvKiBbXSAqLzA7XG5cbnZhciBndWFyZCA9IGluY2x1ZGUkMS5ndWFyZDtcblxudmFyIHBvd2VyID0gaW5jbHVkZSQxLnBvd2VyO1xuXG52YXIgQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0Z1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgZmxpcE1hcCA9IGluY2x1ZGUkMi5mbGlwTWFwO1xuXG52YXIgJCR2b2lkID0gaW5jbHVkZSQyLiQkdm9pZDtcblxudmFyIHZvaWRSaWdodCA9IGluY2x1ZGUkMi52b2lkUmlnaHQ7XG5cbnZhciB2b2lkTGVmdCA9IGluY2x1ZGUkMi52b2lkTGVmdDtcblxudmFyIGZsYXAgPSBpbmNsdWRlJDIuZmxhcDtcblxudmFyIEJzQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQzLkJzQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgYXBwbHlGaXJzdCA9IGluY2x1ZGUkMy5hcHBseUZpcnN0O1xuXG52YXIgYXBwbHlTZWNvbmQgPSBpbmNsdWRlJDMuYXBwbHlTZWNvbmQ7XG5cbnZhciBtYXAyID0gaW5jbHVkZSQzLm1hcDI7XG5cbnZhciBtYXAzID0gaW5jbHVkZSQzLm1hcDM7XG5cbnZhciBtYXA0ID0gaW5jbHVkZSQzLm1hcDQ7XG5cbnZhciBtYXA1ID0gaW5jbHVkZSQzLm1hcDU7XG5cbnZhciB0dXBsZTIgPSBpbmNsdWRlJDMudHVwbGUyO1xuXG52YXIgdHVwbGUzID0gaW5jbHVkZSQzLnR1cGxlMztcblxudmFyIHR1cGxlNCA9IGluY2x1ZGUkMy50dXBsZTQ7XG5cbnZhciB0dXBsZTUgPSBpbmNsdWRlJDMudHVwbGU1O1xuXG52YXIgbWFwVHVwbGUyID0gaW5jbHVkZSQzLm1hcFR1cGxlMjtcblxudmFyIG1hcFR1cGxlMyA9IGluY2x1ZGUkMy5tYXBUdXBsZTM7XG5cbnZhciBtYXBUdXBsZTQgPSBpbmNsdWRlJDMubWFwVHVwbGU0O1xuXG52YXIgbWFwVHVwbGU1ID0gaW5jbHVkZSQzLm1hcFR1cGxlNTtcblxudmFyIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQ0LkJzQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgbGlmdEExID0gaW5jbHVkZSQ0LmxpZnRBMTtcblxudmFyIEJzTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgZmxhdE1hcCA9IGluY2x1ZGUkNS5mbGF0TWFwO1xuXG52YXIgZmxhdHRlbiA9IGluY2x1ZGUkNS5mbGF0dGVuO1xuXG52YXIgY29tcG9zZUtsZWlzbGkgPSBpbmNsdWRlJDUuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBmbGlwQ29tcG9zZUtsZWlzbGkgPSBpbmNsdWRlJDUuZmxpcENvbXBvc2VLbGVpc2xpO1xuXG52YXIgbGlmdE0xID0gaW5jbHVkZSQ1LmxpZnRNMTtcblxudmFyIHdoZW5fID0gaW5jbHVkZSQ1LndoZW5fO1xuXG52YXIgdW5sZXNzID0gaW5jbHVkZSQ1LnVubGVzcztcblxudmFyIG9yRWxzZSA9IGluY2x1ZGUkNi5vckVsc2U7XG5cbnZhciBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucztcblxudmFyIGFueSA9IGluY2x1ZGUkNy5hbnk7XG5cbnZhciBhbGwgPSBpbmNsdWRlJDcuYWxsO1xuXG52YXIgY29udGFpbnNCeSA9IGluY2x1ZGUkNy5jb250YWluc0J5O1xuXG52YXIgY29udGFpbnMgPSBpbmNsdWRlJDcuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBpbmNsdWRlJDcuaW5kZXhPZkJ5O1xuXG52YXIgaW5kZXhPZiA9IGluY2x1ZGUkNy5pbmRleE9mO1xuXG52YXIgbWluQnkgPSBpbmNsdWRlJDcubWluQnk7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDcubWluO1xuXG52YXIgbWF4QnkgPSBpbmNsdWRlJDcubWF4Qnk7XG5cbnZhciBtYXggPSBpbmNsdWRlJDcubWF4O1xuXG52YXIgY291bnRCeSA9IGluY2x1ZGUkNy5jb3VudEJ5O1xuXG52YXIgbGVuZ3RoID0gaW5jbHVkZSQ3Lmxlbmd0aDtcblxudmFyIHNpemUgPSBpbmNsdWRlJDcuc2l6ZTtcblxudmFyIGNvdW50ID0gaW5jbHVkZSQ3LmNvdW50O1xuXG52YXIgZm9yRWFjaCA9IGluY2x1ZGUkNy5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IGluY2x1ZGUkNy5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IGluY2x1ZGUkNy5maW5kO1xuXG52YXIgZmluZFdpdGhJbmRleCA9IGluY2x1ZGUkNy5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9MaXN0ID0gaW5jbHVkZSQ3LnRvTGlzdDtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IGluY2x1ZGUkNy5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDcuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ3LkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgVHJhdmVyc2FibGUgPSBMaXN0JEJzQmFzdGV0LlRyYXZlcnNhYmxlO1xuXG52YXIgZnJvbUFycmF5ID0gQmVsdF9MaXN0LmZyb21BcnJheTtcblxudmFyIHRvQXJyYXkgPSBCZWx0X0xpc3QudG9BcnJheTtcblxuZXhwb3J0IHtcbiAgY29uY2F0ICxcbiAgU2VtaWdyb3VwQW55ICxcbiAgY29uY2F0TmFtZWQgLFxuICBlbXB0eSAsXG4gIE1vbm9pZEFueSAsXG4gIGd1YXJkICxcbiAgcG93ZXIgLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsdCAsXG4gIEFsdCAsXG4gIG9yRWxzZSAsXG4gIFBsdXMgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIGZvbGRMZWZ0ICxcbiAgZm9sZFJpZ2h0ICxcbiAgRm9sZGFibGUgLFxuICBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyAsXG4gIGFueSAsXG4gIGFsbCAsXG4gIGNvbnRhaW5zQnkgLFxuICBjb250YWlucyAsXG4gIGluZGV4T2ZCeSAsXG4gIGluZGV4T2YgLFxuICBtaW5CeSAsXG4gIG1pbiAsXG4gIG1heEJ5ICxcbiAgbWF4ICxcbiAgY291bnRCeSAsXG4gIGxlbmd0aCAsXG4gIHNpemUgLFxuICBjb3VudCAsXG4gIGZvckVhY2ggLFxuICBmb3JFYWNoV2l0aEluZGV4ICxcbiAgZmluZCAsXG4gIGZpbmRXaXRoSW5kZXggLFxuICB0b0xpc3QgLFxuICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgLFxuICBmb2xkTWFwICxcbiAgZm9sZFdpdGhNb25vaWQgLFxuICBpbnRlcmNhbGF0ZSAsXG4gIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZUVxRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyAsXG4gIHVuZm9sZCAsXG4gIFVuZm9sZGFibGUgLFxuICBUcmF2ZXJzYWJsZSAsXG4gIGVxQnkgLFxuICBlcSAsXG4gIEVxICxcbiAgc2hvd0J5ICxcbiAgc2hvdyAsXG4gIFNob3cgLFxuICBmcm9tQXJyYXkgLFxuICB0b0FycmF5ICxcbiAgSXNvQXJyYXkgLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBNb25vaWRBbnlFeHRlbnNpb25zKE0pIHtcbiAgdmFyIGd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgbWEpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm4gbWE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBNLmVtcHR5O1xuICAgIH1cbiAgfTtcbiAgdmFyIHBvd2VyID0gZnVuY3Rpb24gKG1hLCB0aW1lcykge1xuICAgIHZhciBnbyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG1hO1xuICAgICAgfVxuICAgICAgaWYgKGNvdW50ICUgMiA9PT0gMCkge1xuICAgICAgICB2YXIgbWEkcHJpbWUgPSBnbyhjb3VudCAvIDIgfCAwKTtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE0uYXBwZW5kLCBtYSRwcmltZSwgbWEkcHJpbWUpO1xuICAgICAgfVxuICAgICAgdmFyIG1hJHByaW1lJDEgPSBnbyhjb3VudCAvIDIgfCAwKTtcbiAgICAgIHJldHVybiBDdXJyeS5fMihNLmFwcGVuZCwgQ3VycnkuXzIoTS5hcHBlbmQsIG1hJHByaW1lJDEsIG1hJHByaW1lJDEpLCBtYSk7XG4gICAgfTtcbiAgICByZXR1cm4gZ28odGltZXMpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGd1YXJkOiBndWFyZCxcbiAgICAgICAgICBwb3dlcjogcG93ZXJcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgTW9ub2lkQW55RXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcmRlcmluZyBmcm9tIFwiLi4vUmVsdWRlX09yZGVyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0Jhc2UgZnJvbSBcIi4uL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0luc3RhbmNlcyBmcm9tIFwiLi9SZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuLi9vcHRpb24vUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYnMuanNcIjtcblxuZnVuY3Rpb24gY29ucyh4LCB4cykge1xuICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgeCxcbiAgICAgICAgICB4c1xuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB1bmNvbnMocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICBwYXJhbVsxXVxuICAgICAgICAgIF07XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGFwcGVuZCh4LCB4cykge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNlbWlncm91cEFueS5hcHBlbmQoeHMsIC8qIDo6ICovW1xuICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgIF0pO1xufVxuXG52YXIgcmVwZWF0ID0gQmVsdF9MaXN0Lm1ha2U7XG5cbmZ1bmN0aW9uIG1hcFdpdGhJbmRleChmLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0Lm1hcFdpdGhJbmRleCh4cywgKGZ1bmN0aW9uIChpLCB4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHgsIGkpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzTm90RW1wdHkoeHMpIHtcbiAgcmV0dXJuICEoXG4gICAgICAgICAgeHMgPyBmYWxzZSA6IHRydWVcbiAgICAgICAgKTtcbn1cblxuZnVuY3Rpb24gYXQoaSwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5nZXQoeHMsIGkpO1xufVxuXG5mdW5jdGlvbiBoZWFkKHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHBhcmFtWzBdKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gdGFpbChwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHRhaWxPckVtcHR5KHhzKSB7XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlKC8qIFtdICovMCwgdGFpbCh4cykpO1xufVxuXG5mdW5jdGlvbiBpbml0KHBhcmFtKSB7XG4gIGlmICghcGFyYW0pIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciB4cyA9IHBhcmFtWzFdO1xuICBpZiAoeHMpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICAgIFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2UoLyogW10gKi8wLCBpbml0KHhzKSlcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE9yRW1wdHkoeHMpIHtcbiAgdmFyIHlzID0gaW5pdCh4cyk7XG4gIGlmICh5cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHlzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGFzdChfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgeHMgPSBwYXJhbVsxXTtcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShwYXJhbVswXSk7XG4gICAgfVxuICAgIF9wYXJhbSA9IHhzO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZShpLCB4cykge1xuICB2YXIgZ28gPSBmdW5jdGlvbiAoX2FjYywgX2NvdW50LCBfcmVzdCkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciByZXN0ID0gX3Jlc3Q7XG4gICAgICB2YXIgY291bnQgPSBfY291bnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3QpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIF9yZXN0ID0gcmVzdFsxXTtcbiAgICAgIF9jb3VudCA9IGNvdW50IC0gMSB8IDA7XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHJlc3RbMF0sXG4gICAgICAgIGFjY1xuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoZ28oLyogW10gKi8wLCBpLCB4cykpO1xufVxuXG5mdW5jdGlvbiB0YWtlRXhhY3RseShpLCB4cykge1xuICB2YXIgZ28gPSBmdW5jdGlvbiAoX2FjYywgX2NvdW50LCBfcmVzdCkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciByZXN0ID0gX3Jlc3Q7XG4gICAgICB2YXIgY291bnQgPSBfY291bnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3QpIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICAgIF9yZXN0ID0gcmVzdFsxXTtcbiAgICAgIF9jb3VudCA9IGNvdW50IC0gMSB8IDA7XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHJlc3RbMF0sXG4gICAgICAgIGFjY1xuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICBpZiAoaSA+PSAwKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcChCZWx0X0xpc3QucmV2ZXJzZSwgZ28oLyogW10gKi8wLCBpLCB4cykpO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiB0YWtlV2hpbGUoZiwgeHMpIHtcbiAgdmFyIGdvID0gZnVuY3Rpb24gKF9hY2MsIF9yZXN0KSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIHJlc3QgPSBfcmVzdDtcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKCFyZXN0KSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICB2YXIgeSA9IHJlc3RbMF07XG4gICAgICBpZiAoIUN1cnJ5Ll8xKGYsIHkpKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBfcmVzdCA9IHJlc3RbMV07XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHksXG4gICAgICAgIGFjY1xuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoZ28oLyogW10gKi8wLCB4cykpO1xufVxuXG5mdW5jdGlvbiBkcm9wKF9pLCBfeHMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiAvKiBbXSAqLzA7XG4gICAgfVxuICAgIGlmIChpIDw9IDApIHtcbiAgICAgIHJldHVybiB4cztcbiAgICB9XG4gICAgX3hzID0geHNbMV07XG4gICAgX2kgPSBpIC0gMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkcm9wRXhhY3RseShpLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LmRyb3AoeHMsIGkpO1xufVxuXG5mdW5jdGlvbiBkcm9wV2hpbGUoZiwgX3hzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIHhzO1xuICAgIH1cbiAgICBpZiAoIUN1cnJ5Ll8xKGYsIHhzWzBdKSkge1xuICAgICAgcmV0dXJuIHhzO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihmLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LmtlZXAoeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJXaXRoSW5kZXgoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5rZWVwV2l0aEluZGV4KHhzLCBmKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyTm90KGYpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X0xpc3Qua2VlcChwYXJhbSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck5vdFdpdGhJbmRleChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gQmVsdF9MaXN0LmtlZXBXaXRoSW5kZXgocGFyYW0sIChmdW5jdGlvbiAoYSwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIUN1cnJ5Ll8yKGYsIGEsIGkpO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBtYXBPcHRpb24oZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5yZXZlcnNlKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkTGVmdCgoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZm9sZChhY2MsIChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKGYsIGN1cnIpKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIC8qIFtdICovMCkoeHMpKTtcbn1cblxuZnVuY3Rpb24gY2F0T3B0aW9ucyh4cykge1xuICByZXR1cm4gbWFwT3B0aW9uKChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICB9KSwgeHMpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb24oZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5wYXJ0aXRpb24oeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBzcGxpdEF0KGksIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3Quc3BsaXRBdCh4cywgaSk7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRUb0FsbChkZWxpbSwgeHMpIHtcbiAgdmFyIGdvID0gZnVuY3Rpb24gKF9hY2MsIF9wYXJhbSkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKCFwYXJhbSkge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBkZWxpbSxcbiAgICAgICAgICBhY2NcbiAgICAgICAgXVxuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoZ28oLyogW10gKi8wLCB4cykpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNwZXJzZShkZWxpbSwgeHMpIHtcbiAgaWYgKHhzKSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgeHNbMF0sXG4gICAgICAgICAgICBwcmVwZW5kVG9BbGwoZGVsaW0sIHhzWzFdKVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsaWNhdGUoaSwgeHMpIHtcbiAgaWYgKGkgPD0gMCkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9jb3VudCA9IGk7XG4gICAgdmFyIF9hY2MgPSB4cztcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIHZhciBjb3VudCA9IF9jb3VudDtcbiAgICAgIGlmIChjb3VudCA8PSAxKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBfYWNjID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbmNhdCh4cywgYWNjKTtcbiAgICAgIF9jb3VudCA9IGNvdW50IC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiB6aXBXaXRoKGYsIHhzLCB5cykge1xuICByZXR1cm4gQmVsdF9MaXN0LnppcEJ5KHhzLCB5cywgZik7XG59XG5cbmZ1bmN0aW9uIHppcFdpdGhJbmRleCh4cykge1xuICByZXR1cm4gbWFwV2l0aEluZGV4KChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHYsXG4gICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gc29ydFdpdGhJbnQoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5zb3J0KHhzLCBmKTtcbn1cblxuZnVuY3Rpb24gc29ydEJ5KGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3Quc29ydCh4cywgKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihmLCBhLCBiKSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gc29ydChvcmRBLCB4cykge1xuICByZXR1cm4gc29ydEJ5KG9yZEEuY29tcGFyZSwgeHMpO1xufVxuXG5mdW5jdGlvbiBkaXN0aW5jdEJ5KGVxLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KChmdW5jdGlvbiAoeXMsIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzMoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbnRhaW5zQnksIGVxLCB4LCB5cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5cztcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCAvKiBbXSAqLzApKHhzKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0QnkoaW5uZXJFcSwgdiwgeHMpIHtcbiAgdmFyIGdvID0gZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgdmFyIHlzID0gcGFyYW1bMV07XG4gICAgaWYgKHBhcmFtWzBdKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeXNcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGlubmVyRXEsIHYsIHgpKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KGdvLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgXSkoeHMpWzFdKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaEJ5KGlubmVyRXEsIHgsIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3QucmV2ZXJzZShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uICh5cywgeSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChDdXJyeS5fMihpbm5lckVxLCB4LCB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlzO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSksIC8qIFtdICovMCkoeHMpKTtcbn1cblxuZnVuY3Rpb24gZGlzdGluY3QoZXFBLCB4cykge1xuICByZXR1cm4gZGlzdGluY3RCeShlcUEuZXEsIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3QoZXFBLCB4LCB4cykge1xuICByZXR1cm4gcmVtb3ZlRmlyc3RCeShlcUEuZXEsIHgsIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaChlcUEsIHgsIHhzKSB7XG4gIHJldHVybiByZW1vdmVFYWNoQnkoZXFBLmVxLCB4LCB4cyk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VBdCh0YXJnZXRJbmRleCwgbmV3WCwgeHMpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleCgoZnVuY3Rpb24gKHgsIGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IHRhcmdldEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3WDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgeHMpO1xufVxuXG5mdW5jdGlvbiBzY2FuTGVmdChmLCBpbml0LCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KChmdW5jdGlvbiAocGFyYW0sIGN1cnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0QWNjID0gQ3VycnkuXzIoZiwgcGFyYW1bMF0sIGN1cnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgfSksIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgIF0pKHhzKVsxXSk7XG59XG5cbmZ1bmN0aW9uIHNjYW5SaWdodChmLCBpbml0LCB4cykge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRSaWdodCgoZnVuY3Rpb24gKGN1cnIsIHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0QWNjID0gQ3VycnkuXzIoZiwgY3VyciwgcGFyYW1bMF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRBY2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH0pLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdKSh4cylbMV07XG59XG5cbmZ1bmN0aW9uIGluc2VydEF0KHRhcmdldEluZGV4LCBuZXdYLCB4cykge1xuICB2YXIgbWF0Y2ggPSBCZWx0X0xpc3Quc3BsaXRBdCh4cywgdGFyZ2V0SW5kZXgpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29uY2F0KG1hdGNoWzBdLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBuZXdYLFxuICAgICAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgICAgICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4cztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVBdCh0YXJnZXRJbmRleCwgZiwgeHMpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleCgoZnVuY3Rpb24gKHgsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0YXJnZXRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHN3YXBBdChpLCBqLCB4cykge1xuICB2YXIgbWF0Y2ggPSBCZWx0X0xpc3QuZ2V0KHhzLCBpKTtcbiAgdmFyIG1hdGNoJDEgPSBCZWx0X0xpc3QuZ2V0KHhzLCBqKTtcbiAgaWYgKG1hdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbiAgaWYgKG1hdGNoJDEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB4cztcbiAgfVxuICB2YXIgYiA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obWF0Y2gkMSk7XG4gIHZhciBhID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtYXRjaCk7XG4gIHJldHVybiBtYXBXaXRoSW5kZXgoKGZ1bmN0aW9uICh4LCBrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGspIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaiA9PT0gaykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXQodGFyZ2V0SW5kZXgsIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3Qua2VlcFdpdGhJbmRleCh4cywgKGZ1bmN0aW9uIChwYXJhbSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9PSB0YXJnZXRJbmRleDtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBjaHVuayhzaXplLCB4cykge1xuICBpZiAoQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmxlbmd0aCwgeHMpIDw9IHNpemUpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICB4cyxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgdGFrZShzaXplLCB4cyksXG4gICAgICAgICAgICBjaHVuayhzaXplLCBkcm9wKHNpemUsIHhzKSlcbiAgICAgICAgICBdO1xuICB9XG59XG5cbnZhciBwcmVwZW5kID0gY29ucztcblxudmFyIG1ha2VXaXRoSW5kZXggPSBCZWx0X0xpc3QubWFrZUJ5O1xuXG52YXIgcmV2ZXJzZSA9IEJlbHRfTGlzdC5yZXZlcnNlO1xuXG52YXIgc2h1ZmZsZSA9IEJlbHRfTGlzdC5zaHVmZmxlO1xuXG52YXIga2VlcCA9IGZpbHRlcjtcblxudmFyIGtlZXBXaXRoSW5kZXggPSBmaWx0ZXJXaXRoSW5kZXg7XG5cbnZhciByZWplY3QgPSBmaWx0ZXJOb3Q7XG5cbnZhciByZWplY3RXaXRoSW5kZXggPSBmaWx0ZXJOb3RXaXRoSW5kZXg7XG5cbnZhciB6aXAgPSBCZWx0X0xpc3QuemlwO1xuXG52YXIgdW56aXAgPSBCZWx0X0xpc3QudW56aXA7XG5cbmV4cG9ydCB7XG4gIGNvbnMgLFxuICBwcmVwZW5kICxcbiAgdW5jb25zICxcbiAgYXBwZW5kICxcbiAgcmVwZWF0ICxcbiAgbWFrZVdpdGhJbmRleCAsXG4gIG1hcFdpdGhJbmRleCAsXG4gIHJldmVyc2UgLFxuICBzaHVmZmxlICxcbiAgaXNFbXB0eSAsXG4gIGlzTm90RW1wdHkgLFxuICBhdCAsXG4gIGhlYWQgLFxuICB0YWlsICxcbiAgdGFpbE9yRW1wdHkgLFxuICBpbml0ICxcbiAgaW5pdE9yRW1wdHkgLFxuICBsYXN0ICxcbiAgdGFrZSAsXG4gIHRha2VFeGFjdGx5ICxcbiAgdGFrZVdoaWxlICxcbiAgZHJvcCAsXG4gIGRyb3BFeGFjdGx5ICxcbiAgZHJvcFdoaWxlICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBmaWx0ZXJOb3QgLFxuICByZWplY3QgLFxuICBmaWx0ZXJOb3RXaXRoSW5kZXggLFxuICByZWplY3RXaXRoSW5kZXggLFxuICBtYXBPcHRpb24gLFxuICBjYXRPcHRpb25zICxcbiAgcGFydGl0aW9uICxcbiAgc3BsaXRBdCAsXG4gIHByZXBlbmRUb0FsbCAsXG4gIGludGVyc3BlcnNlICxcbiAgcmVwbGljYXRlICxcbiAgemlwICxcbiAgemlwV2l0aCAsXG4gIHppcFdpdGhJbmRleCAsXG4gIHVuemlwICxcbiAgc29ydFdpdGhJbnQgLFxuICBzb3J0QnkgLFxuICBzb3J0ICxcbiAgZGlzdGluY3RCeSAsXG4gIHJlbW92ZUZpcnN0QnkgLFxuICByZW1vdmVFYWNoQnkgLFxuICBkaXN0aW5jdCAsXG4gIHJlbW92ZUZpcnN0ICxcbiAgcmVtb3ZlRWFjaCAsXG4gIHJlcGxhY2VBdCAsXG4gIHNjYW5MZWZ0ICxcbiAgc2NhblJpZ2h0ICxcbiAgaW5zZXJ0QXQgLFxuICB1cGRhdGVBdCAsXG4gIHN3YXBBdCAsXG4gIHJlbW92ZUF0ICxcbiAgY2h1bmsgLFxuICBcbn1cbi8qIFJlbHVkZV9PcmRlcmluZyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5cbmZ1bmN0aW9uIE1ha2VDb21wYXJhYmxlVShNKSB7XG4gIHJldHVybiBNO1xufVxuXG5mdW5jdGlvbiBNYWtlQ29tcGFyYWJsZShNKSB7XG4gIHZhciBjbXAgPSBNLmNtcDtcbiAgdmFyIGNtcCQxID0gQ3VycnkuX18yKGNtcCk7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAkMVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21wYXJhYmxlVShjbXApIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21wYXJhYmxlKGNtcCkge1xuICB2YXIgY21wJDEgPSBDdXJyeS5fXzIoY21wKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCQxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1ha2VIYXNoYWJsZVUoTSkge1xuICByZXR1cm4gTTtcbn1cblxuZnVuY3Rpb24gTWFrZUhhc2hhYmxlKE0pIHtcbiAgdmFyIGhhc2ggPSBNLmhhc2g7XG4gIHZhciBoYXNoJDEgPSBDdXJyeS5fXzEoaGFzaCk7XG4gIHZhciBlcSA9IE0uZXE7XG4gIHZhciBlcSQxID0gQ3VycnkuX18yKGVxKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBoYXNoOiBoYXNoJDEsXG4gICAgICAgICAgZXE6IGVxJDFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaGFzaGFibGVVKGhhc2gsIGVxKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgaGFzaDogaGFzaCxcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaGFzaGFibGUoaGFzaCwgZXEpIHtcbiAgdmFyIGhhc2gkMSA9IEN1cnJ5Ll9fMShoYXNoKTtcbiAgdmFyIGVxJDEgPSBDdXJyeS5fXzIoZXEpO1xuICByZXR1cm4ge1xuICAgICAgICAgIGhhc2g6IGhhc2gkMSxcbiAgICAgICAgICBlcTogZXEkMVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBNYWtlQ29tcGFyYWJsZVUgLFxuICBNYWtlQ29tcGFyYWJsZSAsXG4gIGNvbXBhcmFibGVVICxcbiAgY29tcGFyYWJsZSAsXG4gIE1ha2VIYXNoYWJsZVUgLFxuICBNYWtlSGFzaGFibGUgLFxuICBoYXNoYWJsZVUgLFxuICBoYXNoYWJsZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfaW50ZXJuYWxBVkx0cmVlIGZyb20gXCIuL2JlbHRfaW50ZXJuYWxBVkx0cmVlLmpzXCI7XG5cbmZ1bmN0aW9uIHNldCh0LCBuZXdLLCBuZXdELCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5zaW5nbGV0b24obmV3SywgbmV3RCk7XG4gIH1cbiAgdmFyIGsgPSB0LmtleTtcbiAgdmFyIGMgPSBjbXAobmV3Sywgayk7XG4gIGlmIChjID09PSAwKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLnVwZGF0ZVZhbHVlKHQsIG5ld0QpO1xuICB9XG4gIHZhciBsID0gdC5sZWZ0O1xuICB2YXIgciA9IHQucmlnaHQ7XG4gIHZhciB2ID0gdC52YWx1ZTtcbiAgaWYgKGMgPCAwKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmJhbChzZXQobCwgbmV3SywgbmV3RCwgY21wKSwgaywgdiwgcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmJhbChsLCBrLCB2LCBzZXQociwgbmV3SywgbmV3RCwgY21wKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlVSh0LCBuZXdLLCBmLCBjbXApIHtcbiAgaWYgKHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBrID0gdC5rZXk7XG4gICAgdmFyIGMgPSBjbXAobmV3Sywgayk7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHZhciBuZXdEID0gZihDYW1sX29wdGlvbi5zb21lKHQudmFsdWUpKTtcbiAgICAgIGlmIChuZXdEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLnVwZGF0ZVZhbHVlKHQsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obmV3RCkpO1xuICAgICAgfVxuICAgICAgdmFyIGwgPSB0LmxlZnQ7XG4gICAgICB2YXIgciA9IHQucmlnaHQ7XG4gICAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgICAgaWYgKHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH1cbiAgICAgIHZhciBrciA9IHtcbiAgICAgICAgY29udGVudHM6IHIua2V5XG4gICAgICB9O1xuICAgICAgdmFyIHZyID0ge1xuICAgICAgICBjb250ZW50czogci52YWx1ZVxuICAgICAgfTtcbiAgICAgIHZhciByJDEgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5yZW1vdmVNaW5BdXhXaXRoUmVmKHIsIGtyLCB2cik7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgICB9XG4gICAgdmFyIGwkMSA9IHQubGVmdDtcbiAgICB2YXIgciQyID0gdC5yaWdodDtcbiAgICB2YXIgdiA9IHQudmFsdWU7XG4gICAgaWYgKGMgPCAwKSB7XG4gICAgICB2YXIgbGwgPSB1cGRhdGVVKGwkMSwgbmV3SywgZiwgY21wKTtcbiAgICAgIGlmIChsJDEgPT09IGxsKSB7XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmJhbChsbCwgaywgdiwgciQyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJyID0gdXBkYXRlVShyJDIsIG5ld0ssIGYsIGNtcCk7XG4gICAgaWYgKHIkMiA9PT0gcnIpIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwkMSwgaywgdiwgcnIpO1xuICAgIH1cbiAgfVxuICB2YXIgbmV3RCQxID0gZih1bmRlZmluZWQpO1xuICBpZiAobmV3RCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuc2luZ2xldG9uKG5ld0ssIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obmV3RCQxKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlKHQsIG5ld0ssIGYsIGNtcCkge1xuICByZXR1cm4gdXBkYXRlVSh0LCBuZXdLLCBDdXJyeS5fXzEoZiksIGNtcCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF1eDAobiwgeCwgY21wKSB7XG4gIHZhciB2ID0gbi5rZXk7XG4gIHZhciBsID0gbi5sZWZ0O1xuICB2YXIgciA9IG4ucmlnaHQ7XG4gIHZhciBjID0gY21wKHgsIHYpO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG4gICAgdmFyIGtyID0ge1xuICAgICAgY29udGVudHM6IHIua2V5XG4gICAgfTtcbiAgICB2YXIgdnIgPSB7XG4gICAgICBjb250ZW50czogci52YWx1ZVxuICAgIH07XG4gICAgdmFyIHIkMSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlbW92ZU1pbkF1eFdpdGhSZWYociwga3IsIHZyKTtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgfVxuICBpZiAoYyA8IDApIHtcbiAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgdmFyIGxsID0gcmVtb3ZlQXV4MChsLCB4LCBjbXApO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIG47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobGwsIHYsIG4udmFsdWUsIHIpO1xuICAgIH1cbiAgfVxuICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgdmFyIHJyID0gcmVtb3ZlQXV4MChyLCB4LCBjbXApO1xuICBpZiAocnIgPT09IHIpIHtcbiAgICByZXR1cm4gbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIHYsIG4udmFsdWUsIHJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUobiwgeCwgY21wKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVtb3ZlQXV4MChuLCB4LCBjbXApO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtZXJnZU1hbnkoaCwgYXJyLCBjbXApIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciB2ID0gaDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2YXIgbWF0Y2ggPSBhcnJbaV07XG4gICAgdiA9IHNldCh2LCBtYXRjaFswXSwgbWF0Y2hbMV0sIGNtcCk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXV4UGl2b3QobiwgeCwgcHJlcywgY21wKSB7XG4gIHZhciB2ID0gbi5rZXk7XG4gIHZhciBkID0gbi52YWx1ZTtcbiAgdmFyIGwgPSBuLmxlZnQ7XG4gIHZhciByID0gbi5yaWdodDtcbiAgdmFyIGMgPSBjbXAoeCwgdik7XG4gIGlmIChjID09PSAwKSB7XG4gICAgcHJlcy5jb250ZW50cyA9IENhbWxfb3B0aW9uLnNvbWUoZCk7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHJcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChjIDwgMCkge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBuXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBzcGxpdEF1eFBpdm90KGwsIHgsIHByZXMsIGNtcCk7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgICAgICBCZWx0X2ludGVybmFsQVZMdHJlZS5qb2luKG1hdGNoWzFdLCB2LCBkLCByKVxuICAgICAgICAgIF07XG4gIH1cbiAgaWYgKHIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICBdO1xuICB9XG4gIHZhciBtYXRjaCQxID0gc3BsaXRBdXhQaXZvdChyLCB4LCBwcmVzLCBjbXApO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgQmVsdF9pbnRlcm5hbEFWTHRyZWUuam9pbihsLCB2LCBkLCBtYXRjaCQxWzBdKSxcbiAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0KG4sIHgsIGNtcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgcHJlcyA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciB2ID0gc3BsaXRBdXhQaXZvdChuLCB4LCBwcmVzLCBjbXApO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgdixcbiAgICAgICAgICBwcmVzLmNvbnRlbnRzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG1lcmdlVShzMSwgczIsIGYsIGNtcCkge1xuICBpZiAoczEgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2VlcE1hcFUoczIsIChmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZihrLCB1bmRlZmluZWQsIENhbWxfb3B0aW9uLnNvbWUodikpO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgfVxuICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5rZWVwTWFwVShzMSwgKGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZihrLCBDYW1sX29wdGlvbi5zb21lKHYpLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgfVxuICBpZiAoczEuaGVpZ2h0ID49IHMyLmhlaWdodCkge1xuICAgIHZhciB2MSA9IHMxLmtleTtcbiAgICB2YXIgZDEgPSBzMS52YWx1ZTtcbiAgICB2YXIgbDEgPSBzMS5sZWZ0O1xuICAgIHZhciByMSA9IHMxLnJpZ2h0O1xuICAgIHZhciBkMiA9IHtcbiAgICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHZhciBtYXRjaCA9IHNwbGl0QXV4UGl2b3QoczIsIHYxLCBkMiwgY21wKTtcbiAgICB2YXIgZDIkMSA9IGQyLmNvbnRlbnRzO1xuICAgIHZhciBuZXdMZWZ0ID0gbWVyZ2VVKGwxLCBtYXRjaFswXSwgZiwgY21wKTtcbiAgICB2YXIgbmV3RCA9IGYodjEsIENhbWxfb3B0aW9uLnNvbWUoZDEpLCBkMiQxKTtcbiAgICB2YXIgbmV3UmlnaHQgPSBtZXJnZVUocjEsIG1hdGNoWzFdLCBmLCBjbXApO1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5jb25jYXRPckpvaW4obmV3TGVmdCwgdjEsIG5ld0QsIG5ld1JpZ2h0KTtcbiAgfVxuICB2YXIgdjIgPSBzMi5rZXk7XG4gIHZhciBkMiQyID0gczIudmFsdWU7XG4gIHZhciBsMiA9IHMyLmxlZnQ7XG4gIHZhciByMiA9IHMyLnJpZ2h0O1xuICB2YXIgZDEkMSA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciBtYXRjaCQxID0gc3BsaXRBdXhQaXZvdChzMSwgdjIsIGQxJDEsIGNtcCk7XG4gIHZhciBkMSQyID0gZDEkMS5jb250ZW50cztcbiAgdmFyIG5ld0xlZnQkMSA9IG1lcmdlVShtYXRjaCQxWzBdLCBsMiwgZiwgY21wKTtcbiAgdmFyIG5ld0QkMSA9IGYodjIsIGQxJDIsIENhbWxfb3B0aW9uLnNvbWUoZDIkMikpO1xuICB2YXIgbmV3UmlnaHQkMSA9IG1lcmdlVShtYXRjaCQxWzFdLCByMiwgZiwgY21wKTtcbiAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNvbmNhdE9ySm9pbihuZXdMZWZ0JDEsIHYyLCBuZXdEJDEsIG5ld1JpZ2h0JDEpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShzMSwgczIsIGYsIGNtcCkge1xuICByZXR1cm4gbWVyZ2VVKHMxLCBzMiwgQ3VycnkuX18zKGYpLCBjbXApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNYW55KHQsIGtleXMsIGNtcCkge1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGlmICh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX3QgPSB0O1xuICAgIHZhciBfaSA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIHZhciB0JDEgPSBfdDtcbiAgICAgIGlmIChpID49IGxlbikge1xuICAgICAgICByZXR1cm4gdCQxO1xuICAgICAgfVxuICAgICAgdmFyIGVsZSA9IGtleXNbaV07XG4gICAgICB2YXIgdSA9IHJlbW92ZUF1eDAodCQxLCBlbGUsIGNtcCk7XG4gICAgICBpZiAodSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1O1xuICAgICAgfVxuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBfdCA9IHU7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxuICBcbn1cblxudmFyIGVtcHR5O1xuXG52YXIgaXNFbXB0eSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmlzRW1wdHk7XG5cbnZhciBoYXMgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5oYXM7XG5cbnZhciBjbXBVID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuY21wVTtcblxudmFyIGNtcCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNtcDtcblxudmFyIGVxVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmVxVTtcblxudmFyIGVxID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZXE7XG5cbnZhciBmaW5kRmlyc3RCeVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5maW5kRmlyc3RCeVU7XG5cbnZhciBmaW5kRmlyc3RCeSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZpbmRGaXJzdEJ5O1xuXG52YXIgZm9yRWFjaFUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5mb3JFYWNoVTtcblxudmFyIGZvckVhY2ggPSBCZWx0X2ludGVybmFsQVZMdHJlZS5mb3JFYWNoO1xuXG52YXIgcmVkdWNlVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlZHVjZVU7XG5cbnZhciByZWR1Y2UgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5yZWR1Y2U7XG5cbnZhciBldmVyeVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5ldmVyeVU7XG5cbnZhciBldmVyeSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmV2ZXJ5O1xuXG52YXIgc29tZVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5zb21lVTtcblxudmFyIHNvbWUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5zb21lO1xuXG52YXIgc2l6ZSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnNpemU7XG5cbnZhciB0b0xpc3QgPSBCZWx0X2ludGVybmFsQVZMdHJlZS50b0xpc3Q7XG5cbnZhciB0b0FycmF5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUudG9BcnJheTtcblxudmFyIGZyb21BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZyb21BcnJheTtcblxudmFyIGtleXNUb0FycmF5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2V5c1RvQXJyYXk7XG5cbnZhciB2YWx1ZXNUb0FycmF5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUudmFsdWVzVG9BcnJheTtcblxudmFyIG1pbktleSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1pbktleTtcblxudmFyIG1pbktleVVuZGVmaW5lZCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1pbktleVVuZGVmaW5lZDtcblxudmFyIG1heEtleSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1heEtleTtcblxudmFyIG1heEtleVVuZGVmaW5lZCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1heEtleVVuZGVmaW5lZDtcblxudmFyIG1pbmltdW0gPSBCZWx0X2ludGVybmFsQVZMdHJlZS5taW5pbXVtO1xuXG52YXIgbWluVW5kZWZpbmVkID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWluVW5kZWZpbmVkO1xuXG52YXIgbWF4aW11bSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1heGltdW07XG5cbnZhciBtYXhVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhVbmRlZmluZWQ7XG5cbnZhciBnZXQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5nZXQ7XG5cbnZhciBnZXRVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5nZXRVbmRlZmluZWQ7XG5cbnZhciBnZXRXaXRoRGVmYXVsdCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmdldFdpdGhEZWZhdWx0O1xuXG52YXIgZ2V0RXhuID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZ2V0RXhuO1xuXG52YXIgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNoZWNrSW52YXJpYW50SW50ZXJuYWw7XG5cbnZhciBrZWVwVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmtlZXBTaGFyZWRVO1xuXG52YXIga2VlcCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmtlZXBTaGFyZWQ7XG5cbnZhciBwYXJ0aXRpb25VID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUucGFydGl0aW9uU2hhcmVkVTtcblxudmFyIHBhcnRpdGlvbiA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnBhcnRpdGlvblNoYXJlZDtcblxudmFyIG1hcFUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXBVO1xuXG52YXIgbWFwID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWFwO1xuXG52YXIgbWFwV2l0aEtleVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXBXaXRoS2V5VTtcblxudmFyIG1hcFdpdGhLZXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXBXaXRoS2V5O1xuXG5leHBvcnQge1xuICBlbXB0eSAsXG4gIGlzRW1wdHkgLFxuICBoYXMgLFxuICBjbXBVICxcbiAgY21wICxcbiAgZXFVICxcbiAgZXEgLFxuICBmaW5kRmlyc3RCeVUgLFxuICBmaW5kRmlyc3RCeSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIHNvbWVVICxcbiAgc29tZSAsXG4gIHNpemUgLFxuICB0b0xpc3QgLFxuICB0b0FycmF5ICxcbiAgZnJvbUFycmF5ICxcbiAga2V5c1RvQXJyYXkgLFxuICB2YWx1ZXNUb0FycmF5ICxcbiAgbWluS2V5ICxcbiAgbWluS2V5VW5kZWZpbmVkICxcbiAgbWF4S2V5ICxcbiAgbWF4S2V5VW5kZWZpbmVkICxcbiAgbWluaW11bSAsXG4gIG1pblVuZGVmaW5lZCAsXG4gIG1heGltdW0gLFxuICBtYXhVbmRlZmluZWQgLFxuICBnZXQgLFxuICBnZXRVbmRlZmluZWQgLFxuICBnZXRXaXRoRGVmYXVsdCAsXG4gIGdldEV4biAsXG4gIGNoZWNrSW52YXJpYW50SW50ZXJuYWwgLFxuICByZW1vdmUgLFxuICByZW1vdmVNYW55ICxcbiAgc2V0ICxcbiAgdXBkYXRlVSAsXG4gIHVwZGF0ZSAsXG4gIG1lcmdlVSAsXG4gIG1lcmdlICxcbiAgbWVyZ2VNYW55ICxcbiAga2VlcFUgLFxuICBrZWVwICxcbiAgcGFydGl0aW9uVSAsXG4gIHBhcnRpdGlvbiAsXG4gIHNwbGl0ICxcbiAgbWFwVSAsXG4gIG1hcCAsXG4gIG1hcFdpdGhLZXlVICxcbiAgbWFwV2l0aEtleSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9NYXBEaWN0IGZyb20gXCIuL2JlbHRfTWFwRGljdC5qc1wiO1xuXG5mdW5jdGlvbiBmcm9tQXJyYXkoZGF0YSwgaWQpIHtcbiAgdmFyIGNtcCA9IGlkLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3QuZnJvbUFycmF5KGRhdGEsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG0sIHgpIHtcbiAgdmFyIG9kYXRhID0gbS5kYXRhO1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHZhciBuZXdEYXRhID0gQmVsdF9NYXBEaWN0LnJlbW92ZShvZGF0YSwgeCwgY21wKTtcbiAgaWYgKG5ld0RhdGEgPT09IG9kYXRhKSB7XG4gICAgcmV0dXJuIG07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgZGF0YTogbmV3RGF0YVxuICAgICAgICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWFueShtLCB4KSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgdmFyIG5ld0RhdGEgPSBCZWx0X01hcERpY3QucmVtb3ZlTWFueShtLmRhdGEsIHgsIGNtcCk7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogbmV3RGF0YVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBzZXQobSwga2V5LCBkKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3Quc2V0KG0uZGF0YSwga2V5LCBkLCBjbXApXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueShtLCBlKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3QubWVyZ2VNYW55KG0uZGF0YSwgZSwgY21wKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVVKG0sIGtleSwgZikge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9NYXBEaWN0LnVwZGF0ZVUobS5kYXRhLCBrZXksIGYsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKG0sIGtleSwgZikge1xuICByZXR1cm4gdXBkYXRlVShtLCBrZXksIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0KG0sIHgpIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbWF0Y2ggPSBCZWx0X01hcERpY3Quc3BsaXQobS5kYXRhLCB4LCBjbXApO1xuICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzBdO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgICBkYXRhOiBtYXRjaCQxWzBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICAgICAgZGF0YTogbWF0Y2gkMVsxXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgbWF0Y2hbMV1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VVKHMxLCBzMiwgZikge1xuICB2YXIgY21wID0gczEuY21wO1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfTWFwRGljdC5tZXJnZVUoczEuZGF0YSwgczIuZGF0YSwgZiwgY21wKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZShzMSwgczIsIGYpIHtcbiAgcmV0dXJuIG1lcmdlVShzMSwgczIsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2UoaWQpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGlkLmNtcCxcbiAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShtYXApIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5pc0VtcHR5KG1hcC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnlVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5maW5kRmlyc3RCeVUobS5kYXRhLCBmKTtcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnkobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmZpbmRGaXJzdEJ5VShtLmRhdGEsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5mb3JFYWNoVShtLmRhdGEsIGYpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5mb3JFYWNoVShtLmRhdGEsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVUobSwgYWNjLCBmKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QucmVkdWNlVShtLmRhdGEsIGFjYywgZik7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShtLCBhY2MsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVUobSwgYWNjLCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiBldmVyeVUobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmV2ZXJ5VShtLmRhdGEsIGYpO1xufVxuXG5mdW5jdGlvbiBldmVyeShtLCBmKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QuZXZlcnlVKG0uZGF0YSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gc29tZVUobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnNvbWVVKG0uZGF0YSwgZik7XG59XG5cbmZ1bmN0aW9uIHNvbWUobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnNvbWVVKG0uZGF0YSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24ga2VlcFUobSwgZikge1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogbS5jbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9NYXBEaWN0LmtlZXBVKG0uZGF0YSwgZilcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24ga2VlcChtLCBmKSB7XG4gIHJldHVybiBrZWVwVShtLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25VKG0sIHApIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbWF0Y2ggPSBCZWx0X01hcERpY3QucGFydGl0aW9uVShtLmRhdGEsIHApO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBtYXRjaFswXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBtYXRjaFsxXVxuICAgICAgICAgIH1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKG0sIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUobSwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24gbWFwVShtLCBmKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBtLmNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3QubWFwVShtLmRhdGEsIGYpXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG1hcChtLCBmKSB7XG4gIHJldHVybiBtYXBVKG0sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIG1hcFdpdGhLZXlVKG0sIGYpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IG0uY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfTWFwRGljdC5tYXBXaXRoS2V5VShtLmRhdGEsIGYpXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG1hcFdpdGhLZXkobSwgZikge1xuICByZXR1cm4gbWFwV2l0aEtleVUobSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gc2l6ZShtYXApIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5zaXplKG1hcC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gdG9MaXN0KG1hcCkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnRvTGlzdChtYXAuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnRvQXJyYXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24ga2V5c1RvQXJyYXkobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmtleXNUb0FycmF5KG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHZhbHVlc1RvQXJyYXkobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnZhbHVlc1RvQXJyYXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWluS2V5KG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5taW5LZXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWluS2V5VW5kZWZpbmVkKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5taW5LZXlVbmRlZmluZWQobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWF4S2V5KG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5tYXhLZXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWF4S2V5VW5kZWZpbmVkKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5tYXhLZXlVbmRlZmluZWQobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWluaW11bShtKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QubWluaW11bShtLmRhdGEpO1xufVxuXG5mdW5jdGlvbiBtaW5VbmRlZmluZWQobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0Lm1pblVuZGVmaW5lZChtLmRhdGEpO1xufVxuXG5mdW5jdGlvbiBtYXhpbXVtKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5tYXhpbXVtKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIG1heFVuZGVmaW5lZChtKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QubWF4VW5kZWZpbmVkKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGdldChtYXAsIHgpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5nZXQobWFwLmRhdGEsIHgsIG1hcC5jbXApO1xufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWQobWFwLCB4KSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QuZ2V0VW5kZWZpbmVkKG1hcC5kYXRhLCB4LCBtYXAuY21wKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2l0aERlZmF1bHQobWFwLCB4LCBkZWYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5nZXRXaXRoRGVmYXVsdChtYXAuZGF0YSwgeCwgZGVmLCBtYXAuY21wKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhuKG1hcCwgeCkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmdldEV4bihtYXAuZGF0YSwgeCwgbWFwLmNtcCk7XG59XG5cbmZ1bmN0aW9uIGhhcyhtYXAsIHgpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5oYXMobWFwLmRhdGEsIHgsIG1hcC5jbXApO1xufVxuXG5mdW5jdGlvbiBjaGVja0ludmFyaWFudEludGVybmFsKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5jaGVja0ludmFyaWFudEludGVybmFsKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVxVShtMSwgbTIsIHZlcSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmVxVShtMS5kYXRhLCBtMi5kYXRhLCBtMS5jbXAsIHZlcSk7XG59XG5cbmZ1bmN0aW9uIGVxKG0xLCBtMiwgdmVxKSB7XG4gIHJldHVybiBlcVUobTEsIG0yLCBDdXJyeS5fXzIodmVxKSk7XG59XG5cbmZ1bmN0aW9uIGNtcFUobTEsIG0yLCB2Y21wKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QuY21wVShtMS5kYXRhLCBtMi5kYXRhLCBtMS5jbXAsIHZjbXApO1xufVxuXG5mdW5jdGlvbiBjbXAobTEsIG0yLCB2Y21wKSB7XG4gIHJldHVybiBjbXBVKG0xLCBtMiwgQ3VycnkuX18yKHZjbXApKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YShtKSB7XG4gIHJldHVybiBtLmRhdGE7XG59XG5cbmZ1bmN0aW9uIGdldElkKG0pIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogY21wXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tJZERhdGEoaWQsIGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGlkLmNtcCxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH07XG59XG5cbnZhciBJbnQ7XG5cbnZhciAkJFN0cmluZztcblxudmFyIERpY3Q7XG5cbmV4cG9ydCB7XG4gIEludCAsXG4gICQkU3RyaW5nICxcbiAgRGljdCAsXG4gIG1ha2UgLFxuICBpc0VtcHR5ICxcbiAgaGFzICxcbiAgY21wVSAsXG4gIGNtcCAsXG4gIGVxVSAsXG4gIGVxICxcbiAgZmluZEZpcnN0QnlVICxcbiAgZmluZEZpcnN0QnkgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICByZWR1Y2VVICxcbiAgcmVkdWNlICxcbiAgZXZlcnlVICxcbiAgZXZlcnkgLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBzaXplICxcbiAgdG9BcnJheSAsXG4gIHRvTGlzdCAsXG4gIGZyb21BcnJheSAsXG4gIGtleXNUb0FycmF5ICxcbiAgdmFsdWVzVG9BcnJheSAsXG4gIG1pbktleSAsXG4gIG1pbktleVVuZGVmaW5lZCAsXG4gIG1heEtleSAsXG4gIG1heEtleVVuZGVmaW5lZCAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0V2l0aERlZmF1bHQgLFxuICBnZXRFeG4gLFxuICByZW1vdmUgLFxuICByZW1vdmVNYW55ICxcbiAgc2V0ICxcbiAgdXBkYXRlVSAsXG4gIHVwZGF0ZSAsXG4gIG1lcmdlTWFueSAsXG4gIG1lcmdlVSAsXG4gIG1lcmdlICxcbiAga2VlcFUgLFxuICBrZWVwICxcbiAgcGFydGl0aW9uVSAsXG4gIHBhcnRpdGlvbiAsXG4gIHNwbGl0ICxcbiAgbWFwVSAsXG4gIG1hcCAsXG4gIG1hcFdpdGhLZXlVICxcbiAgbWFwV2l0aEtleSAsXG4gIGdldERhdGEgLFxuICBnZXRJZCAsXG4gIHBhY2tJZERhdGEgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0xpc3QgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9MaXN0LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0FycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfQXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBBcnJheSRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvQXJyYXkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFN0cmluZyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvU3RyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LmJzLmpzXCI7XG5cbnZhciBTZW1pZ3JvdXBBbnkgPSB7XG4gIGFwcGVuZDogQmVsdF9BcnJheS5jb25jYXRcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55KTtcblxudmFyIG1hcCA9IEFycmF5JEJzQmFzdGV0LkZ1bmN0b3IubWFwO1xuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuXG52YXIgYXBwbHkgPSBBcnJheSRCc0Jhc3RldC5BcHBseS5hcHBseTtcblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlFeHRlbnNpb25zKEFwcGx5KTtcblxuZnVuY3Rpb24gcHVyZShhKSB7XG4gIHJldHVybiBbYV07XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbnZhciBiaW5kID0gQXJyYXkkQnNCYXN0ZXQuTW9uYWQuZmxhdF9tYXA7XG5cbnZhciBNb25hZCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgZmxhdF9tYXA6IGJpbmRcbn07XG5cbnZhciBpbmNsdWRlJDQgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuXG52YXIgYWx0ID0gQXJyYXkkQnNCYXN0ZXQuQWx0LmFsdDtcblxudmFyIEFsdCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0XG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gUmVsdWRlX0V4dGVuc2lvbnNfQWx0LkFsdEV4dGVuc2lvbnMoQWx0KTtcblxudmFyIGltYXAgPSBBcnJheSRCc0Jhc3RldC5JbnZhcmlhbnQuaW1hcDtcblxudmFyIEludmFyaWFudCA9IHtcbiAgaW1hcDogaW1hcFxufTtcblxudmFyIGV4dGVuZCA9IEFycmF5JEJzQmFzdGV0LkV4dGVuZC5leHRlbmQ7XG5cbnZhciBFeHRlbmQgPSB7XG4gIG1hcDogbWFwLFxuICBleHRlbmQ6IGV4dGVuZFxufTtcblxudmFyIGZvbGRMZWZ0ID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9sZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9yaWdodDtcblxudmFyIEZvbGRhYmxlX0ZvbGRfTWFwID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuRm9sZF9NYXA7XG5cbnZhciBGb2xkYWJsZV9Gb2xkX01hcF9BbnkgPSBBcnJheSRCc0Jhc3RldC5Gb2xkYWJsZS5Gb2xkX01hcF9Bbnk7XG5cbnZhciBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuRm9sZF9NYXBfUGx1cztcblxudmFyIEZvbGRhYmxlID0ge1xuICBmb2xkX2xlZnQ6IGZvbGRMZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQsXG4gIEZvbGRfTWFwOiBGb2xkYWJsZV9Gb2xkX01hcCxcbiAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbn07XG5cbnZhciBpbmNsdWRlJDYgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5Gb2xkYWJsZUV4dGVuc2lvbnMoRm9sZGFibGUpO1xuXG52YXIgaW50ZXJjYWxhdGUgPSBpbmNsdWRlJDYuaW50ZXJjYWxhdGU7XG5cbmZ1bmN0aW9uIGVxQnkoaW5uZXJFcSwgX3hzLCBfeXMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB5cyA9IF95cztcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgdmFyIG1hdGNoID0gQmVsdF9BcnJheS5nZXQoeHMsIDApO1xuICAgIHZhciBtYXRjaCQxID0gQmVsdF9BcnJheS5nZXQoeXMsIDApO1xuICAgIGlmIChtYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbWF0Y2gkMSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAobWF0Y2gkMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzIoaW5uZXJFcSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtYXRjaCksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obWF0Y2gkMSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF95cyA9IEJlbHRfQXJyYXkuc2xpY2VUb0VuZCh5cywgMSk7XG4gICAgX3hzID0gQmVsdF9BcnJheS5zbGljZVRvRW5kKHhzLCAxKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVxKGVxQSwgeHMsIHlzKSB7XG4gIHJldHVybiBlcUJ5KGVxQS5lcSwgeHMsIHlzKTtcbn1cblxuZnVuY3Rpb24gRXEoRXFBKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBlcUJ5KEVxQS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBzaG93QnkoaW5uZXJTaG93LCB4cykge1xuICB2YXIgam9pbiA9IEN1cnJ5Ll8xKGludGVyY2FsYXRlLCBTdHJpbmckQnNCYXN0ZXQuTW9ub2lkKTtcbiAgcmV0dXJuIFwiW1wiICsgKEN1cnJ5Ll8yKGpvaW4sIFwiLCBcIiwgQ3VycnkuXzIobWFwLCBpbm5lclNob3csIHhzKSkgKyBcIl1cIik7XG59XG5cbmZ1bmN0aW9uIHNob3coc2hvd0EsIHhzKSB7XG4gIHJldHVybiBzaG93Qnkoc2hvd0Euc2hvdywgeHMpO1xufVxuXG5mdW5jdGlvbiBTaG93KFNob3dBKSB7XG4gIHZhciBzaG93ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHNob3dCeShTaG93QS5zaG93LCBwYXJhbSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICB9O1xufVxuXG52YXIgSXNvTGlzdCA9IHtcbiAgZnJvbUxpc3Q6IEJlbHRfTGlzdC50b0FycmF5LFxuICB0b0xpc3Q6IEJlbHRfTGlzdC5mcm9tQXJyYXlcbn07XG5cbnZhciBjb25jYXQgPSBCZWx0X0FycmF5LmNvbmNhdDtcblxudmFyIGNvbmNhdE5hbWVkID0gaW5jbHVkZS5jb25jYXROYW1lZDtcblxudmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuQnNGdW5jdG9yRXh0ZW5zaW9ucztcblxudmFyIGZsaXBNYXAgPSBpbmNsdWRlJDEuZmxpcE1hcDtcblxudmFyICQkdm9pZCA9IGluY2x1ZGUkMS4kJHZvaWQ7XG5cbnZhciB2b2lkUmlnaHQgPSBpbmNsdWRlJDEudm9pZFJpZ2h0O1xuXG52YXIgdm9pZExlZnQgPSBpbmNsdWRlJDEudm9pZExlZnQ7XG5cbnZhciBmbGFwID0gaW5jbHVkZSQxLmZsYXA7XG5cbnZhciBCc0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0FwcGx5RXh0ZW5zaW9ucztcblxudmFyIGFwcGx5Rmlyc3QgPSBpbmNsdWRlJDIuYXBwbHlGaXJzdDtcblxudmFyIGFwcGx5U2Vjb25kID0gaW5jbHVkZSQyLmFwcGx5U2Vjb25kO1xuXG52YXIgbWFwMiA9IGluY2x1ZGUkMi5tYXAyO1xuXG52YXIgbWFwMyA9IGluY2x1ZGUkMi5tYXAzO1xuXG52YXIgbWFwNCA9IGluY2x1ZGUkMi5tYXA0O1xuXG52YXIgbWFwNSA9IGluY2x1ZGUkMi5tYXA1O1xuXG52YXIgdHVwbGUyID0gaW5jbHVkZSQyLnR1cGxlMjtcblxudmFyIHR1cGxlMyA9IGluY2x1ZGUkMi50dXBsZTM7XG5cbnZhciB0dXBsZTQgPSBpbmNsdWRlJDIudHVwbGU0O1xuXG52YXIgdHVwbGU1ID0gaW5jbHVkZSQyLnR1cGxlNTtcblxudmFyIG1hcFR1cGxlMiA9IGluY2x1ZGUkMi5tYXBUdXBsZTI7XG5cbnZhciBtYXBUdXBsZTMgPSBpbmNsdWRlJDIubWFwVHVwbGUzO1xuXG52YXIgbWFwVHVwbGU0ID0gaW5jbHVkZSQyLm1hcFR1cGxlNDtcblxudmFyIG1hcFR1cGxlNSA9IGluY2x1ZGUkMi5tYXBUdXBsZTU7XG5cbnZhciBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIGxpZnRBMSA9IGluY2x1ZGUkMy5saWZ0QTE7XG5cbnZhciBCc01vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNC5Cc01vbmFkRXh0ZW5zaW9ucztcblxudmFyIGZsYXRNYXAgPSBpbmNsdWRlJDQuZmxhdE1hcDtcblxudmFyIGZsYXR0ZW4gPSBpbmNsdWRlJDQuZmxhdHRlbjtcblxudmFyIGNvbXBvc2VLbGVpc2xpID0gaW5jbHVkZSQ0LmNvbXBvc2VLbGVpc2xpO1xuXG52YXIgZmxpcENvbXBvc2VLbGVpc2xpID0gaW5jbHVkZSQ0LmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIGxpZnRNMSA9IGluY2x1ZGUkNC5saWZ0TTE7XG5cbnZhciB3aGVuXyA9IGluY2x1ZGUkNC53aGVuXztcblxudmFyIHVubGVzcyA9IGluY2x1ZGUkNC51bmxlc3M7XG5cbnZhciBvckVsc2UgPSBpbmNsdWRlJDUub3JFbHNlO1xuXG52YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBhbnkgPSBpbmNsdWRlJDYuYW55O1xuXG52YXIgYWxsID0gaW5jbHVkZSQ2LmFsbDtcblxudmFyIGNvbnRhaW5zQnkgPSBpbmNsdWRlJDYuY29udGFpbnNCeTtcblxudmFyIGNvbnRhaW5zID0gaW5jbHVkZSQ2LmNvbnRhaW5zO1xuXG52YXIgaW5kZXhPZkJ5ID0gaW5jbHVkZSQ2LmluZGV4T2ZCeTtcblxudmFyIGluZGV4T2YgPSBpbmNsdWRlJDYuaW5kZXhPZjtcblxudmFyIG1pbkJ5ID0gaW5jbHVkZSQ2Lm1pbkJ5O1xuXG52YXIgbWluID0gaW5jbHVkZSQ2Lm1pbjtcblxudmFyIG1heEJ5ID0gaW5jbHVkZSQ2Lm1heEJ5O1xuXG52YXIgbWF4ID0gaW5jbHVkZSQ2Lm1heDtcblxudmFyIGNvdW50QnkgPSBpbmNsdWRlJDYuY291bnRCeTtcblxudmFyIGxlbmd0aCA9IGluY2x1ZGUkNi5sZW5ndGg7XG5cbnZhciBzaXplID0gaW5jbHVkZSQ2LnNpemU7XG5cbnZhciBjb3VudCA9IGluY2x1ZGUkNi5jb3VudDtcblxudmFyIGZvckVhY2ggPSBpbmNsdWRlJDYuZm9yRWFjaDtcblxudmFyIGZvckVhY2hXaXRoSW5kZXggPSBpbmNsdWRlJDYuZm9yRWFjaFdpdGhJbmRleDtcblxudmFyIGZpbmQgPSBpbmNsdWRlJDYuZmluZDtcblxudmFyIGZpbmRXaXRoSW5kZXggPSBpbmNsdWRlJDYuZmluZFdpdGhJbmRleDtcblxudmFyIHRvQXJyYXkgPSBpbmNsdWRlJDYudG9BcnJheTtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNi5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IGluY2x1ZGUkNi5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDYuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNi5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ2LkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgVHJhdmVyc2FibGU7XG5cbnZhciBPcmQ7XG5cbnZhciBmcm9tTGlzdCA9IEJlbHRfTGlzdC50b0FycmF5O1xuXG52YXIgdG9MaXN0ID0gQmVsdF9MaXN0LmZyb21BcnJheTtcblxuZXhwb3J0IHtcbiAgY29uY2F0ICxcbiAgU2VtaWdyb3VwQW55ICxcbiAgY29uY2F0TmFtZWQgLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsdCAsXG4gIEFsdCAsXG4gIG9yRWxzZSAsXG4gIGltYXAgLFxuICBJbnZhcmlhbnQgLFxuICBleHRlbmQgLFxuICBFeHRlbmQgLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBsZW5ndGggLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9BcnJheSAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIE9yZCAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgZnJvbUxpc3QgLFxuICB0b0xpc3QgLFxuICBJc29MaXN0ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfSWQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9JZC5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9NYXAgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9NYXAuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0xpc3QuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfQXJyYXkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9BcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0Z1bmN0aW9uIGZyb20gXCIuL1JlbHVkZV9GdW5jdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZGVyaW5nIGZyb20gXCIuL1JlbHVkZV9PcmRlcmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfSW5zdGFuY2VzIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzIGZyb20gXCIuL2FycmF5L1JlbHVkZV9BcnJheV9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzXCI7XG5cbnZhciBtYWtlID0gQmVsdF9NYXAubWFrZTtcblxuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAuc2V0KF9feCwga2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHNpbmdsZXRvbihjb21wYXJhYmxlLCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBCZWx0X01hcC5zZXQoQmVsdF9NYXAubWFrZShjb21wYXJhYmxlKSwga2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKGtleSwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5oYXMoX194LCBrZXkpO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlSW50KGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmNtcChhLCBiLCBjb21wYXJhdG9yKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUJ5KGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy5mcm9tSW50KEJlbHRfTWFwLmNtcChhLCBiLCAoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihjb21wYXJhdG9yLCBhLCBiKSk7XG4gICAgICAgICAgICAgICAgICB9KSkpO1xufVxuXG5mdW5jdGlvbiBlcUJ5KGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmVxKGEsIGIsIGNvbXBhcmF0b3IpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGJ5LCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmZpbmRGaXJzdEJ5KF9feCwgYnkpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmZvckVhY2goX194LCBmbik7XG59XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGZuLCBhY2MsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAucmVkdWNlKF9feCwgYWNjLCBmbik7XG59XG5cbmZ1bmN0aW9uIGFsbChjb25kLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmV2ZXJ5KF9feCwgY29uZCk7XG59XG5cbmZ1bmN0aW9uIGFueShjb25kLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLnNvbWUoX194LCBjb25kKTtcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5KGNvbXBhcmFibGUsIGFycikge1xuICByZXR1cm4gQmVsdF9NYXAuZnJvbUFycmF5KGFyciwgY29tcGFyYWJsZSk7XG59XG5cbmZ1bmN0aW9uIGZyb21WYWx1ZUFycmF5KGNvbXBhcmFibGUsIHRvS2V5KSB7XG4gIHJldHVybiBDdXJyeS5fMihSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKG1hcCwgdikge1xuICAgICAgICAgICAgICAgIHJldHVybiBCZWx0X01hcC5zZXQobWFwLCBDdXJyeS5fMSh0b0tleSwgdiksIHYpO1xuICAgICAgICAgICAgICB9KSwgQmVsdF9NYXAubWFrZShjb21wYXJhYmxlKSk7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0KGNvbXBhcmFibGUsIGxzdCkge1xuICByZXR1cm4gQmVsdF9NYXAuZnJvbUFycmF5KEJlbHRfTGlzdC50b0FycmF5KGxzdCksIGNvbXBhcmFibGUpO1xufVxuXG5mdW5jdGlvbiBmcm9tVmFsdWVMaXN0KGNvbXBhcmFibGUsIHRvS2V5KSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uIChtYXAsIHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9NYXAuc2V0KG1hcCwgQ3VycnkuXzEodG9LZXksIHYpLCB2KTtcbiAgICAgICAgICAgICAgfSksIEJlbHRfTWFwLm1ha2UoY29tcGFyYWJsZSkpO1xufVxuXG5mdW5jdGlvbiBrZXlzKG1hcCkge1xuICByZXR1cm4gQmVsdF9MaXN0LmZyb21BcnJheShCZWx0X01hcC5rZXlzVG9BcnJheShtYXApKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVzKG1hcCkge1xuICByZXR1cm4gQmVsdF9MaXN0LmZyb21BcnJheShCZWx0X01hcC52YWx1ZXNUb0FycmF5KG1hcCkpO1xufVxuXG5mdW5jdGlvbiBnZXQoa2V5LCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmdldChfX3gsIGtleSk7XG59XG5cbmZ1bmN0aW9uIGdldE9yRWxzZShrZXksICQkZGVmYXVsdCwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5nZXRXaXRoRGVmYXVsdChfX3gsIGtleSwgJCRkZWZhdWx0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKGtleSwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5yZW1vdmUoX194LCBrZXkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNYW55KGtleXMsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAucmVtb3ZlTWFueShfX3gsIGtleXMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoa2V5LCB1cGRhdGVGbiwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC51cGRhdGUoX194LCBrZXksIHVwZGF0ZUZuKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UobWVyZ2VGbiwgYSwgYikge1xuICByZXR1cm4gQmVsdF9NYXAubWVyZ2UoYSwgYiwgbWVyZ2VGbik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueShhcnIsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAubWVyZ2VNYW55KF9feCwgYXJyKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmtlZXAoX194LCBmbik7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck5vdChmbiwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5rZWVwKF9feCwgKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFDdXJyeS5fMihmbiwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLnBhcnRpdGlvbihfX3gsIGZuKTtcbn1cblxuZnVuY3Rpb24gbWFwKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLm1hcChfX3gsIGZuKTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aEtleShmbiwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5tYXBXaXRoS2V5KF9feCwgZm4pO1xufVxuXG5mdW5jdGlvbiBncm91cExpc3RCeShjb21wYXJhYmxlLCBncm91cEJ5KSB7XG4gIHZhciBhZGRJdGVtVG9Hcm91cCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ3JvdXBCeSwgeCk7XG4gICAgdmFyIHBhcnRpYWxfYXJnJDEgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X01hcC5nZXRXaXRoRGVmYXVsdChwYXJhbSwgcGFydGlhbF9hcmcsIC8qIFtdICovMCk7XG4gICAgfTtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZyQxLCAoZnVuY3Rpb24gKHhzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSksIHBhcmFtKTtcbiAgICAgIH0pO1xuICB9O1xuICB2YXIgYWRkSXRlbVRvTWFwID0gZnVuY3Rpb24gKGRpY3QsIHgpIHtcbiAgICByZXR1cm4gQmVsdF9NYXAuc2V0KGRpY3QsIEN1cnJ5Ll8xKGdyb3VwQnksIHgpLCBhZGRJdGVtVG9Hcm91cCh4KShkaWN0KSk7XG4gIH07XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdCgoZnVuY3Rpb24gKF9feCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9MaXN0LnJlZHVjZShfX3gsIEJlbHRfTWFwLm1ha2UoY29tcGFyYWJsZSksIGFkZEl0ZW1Ub01hcCk7XG4gICAgICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9NYXAubWFwKHBhcmFtLCBCZWx0X0xpc3QucmV2ZXJzZSk7XG4gICAgICAgICAgICAgICAgICB9KSwgcGFyYW0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBncm91cEFycmF5QnkoY29tcGFyYWJsZSwgZ3JvdXBCeSkge1xuICB2YXIgYWRkSXRlbVRvR3JvdXAgPSBmdW5jdGlvbiAoeCkge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IFtdO1xuICAgIHZhciBwYXJ0aWFsX2FyZyQxID0gQ3VycnkuXzEoZ3JvdXBCeSwgeCk7XG4gICAgdmFyIHBhcnRpYWxfYXJnJDIgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X01hcC5nZXRXaXRoRGVmYXVsdChwYXJhbSwgcGFydGlhbF9hcmckMSwgcGFydGlhbF9hcmcpO1xuICAgIH07XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmckMiwgKGZ1bmN0aW9uIChfX3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9BcnJheS5jb25jYXQoX194LCBbeF0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgcGFyYW0pO1xuICAgICAgfSk7XG4gIH07XG4gIHZhciBhZGRJdGVtVG9NYXAgPSBmdW5jdGlvbiAoZGljdCwgeCkge1xuICAgIHJldHVybiBCZWx0X01hcC5zZXQoZGljdCwgQ3VycnkuXzEoZ3JvdXBCeSwgeCksIGFkZEl0ZW1Ub0dyb3VwKHgpKGRpY3QpKTtcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAoX194KSB7XG4gICAgICByZXR1cm4gQmVsdF9BcnJheS5yZWR1Y2UoX194LCBCZWx0X01hcC5tYWtlKGNvbXBhcmFibGUpLCBhZGRJdGVtVG9NYXApO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBXaXRoT3JkKE0pIHtcbiAgdmFyIGNtcCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihNLmNvbXBhcmUsIGEsIGIpKTtcbiAgfTtcbiAgdmFyIENvbXBhcmFibGUgPSBCZWx0X0lkLk1ha2VDb21wYXJhYmxlKHtcbiAgICAgICAgY21wOiBjbXBcbiAgICAgIH0pO1xuICB2YXIgbWFrZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBCZWx0X01hcC5tYWtlKENvbXBhcmFibGUpO1xuICB9O1xuICB2YXIgc2luZ2xldG9uID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gQmVsdF9NYXAuc2V0KEJlbHRfTWFwLm1ha2UoQ29tcGFyYWJsZSksIGtleSwgdmFsdWUpO1xuICB9O1xuICB2YXIgZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuICAgIHJldHVybiBCZWx0X01hcC5mcm9tQXJyYXkoYXJyLCBDb21wYXJhYmxlKTtcbiAgfTtcbiAgdmFyIGZyb21WYWx1ZUFycmF5JDEgPSBmdW5jdGlvbiAodG9LZXksIGFycikge1xuICAgIHJldHVybiBDdXJyeS5fMShmcm9tVmFsdWVBcnJheShDb21wYXJhYmxlLCB0b0tleSksIGFycik7XG4gIH07XG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChsc3QpIHtcbiAgICByZXR1cm4gQmVsdF9NYXAuZnJvbUFycmF5KEJlbHRfTGlzdC50b0FycmF5KGxzdCksIENvbXBhcmFibGUpO1xuICB9O1xuICB2YXIgZnJvbVZhbHVlTGlzdCQxID0gZnVuY3Rpb24gKHRvS2V5LCBsc3QpIHtcbiAgICByZXR1cm4gZnJvbVZhbHVlTGlzdChDb21wYXJhYmxlLCB0b0tleSkobHN0KTtcbiAgfTtcbiAgdmFyIGdyb3VwTGlzdEJ5JDEgPSBmdW5jdGlvbiAoZ3JvdXBCeSwgbHN0KSB7XG4gICAgcmV0dXJuIGdyb3VwTGlzdEJ5KENvbXBhcmFibGUsIGdyb3VwQnkpKGxzdCk7XG4gIH07XG4gIHZhciBncm91cEFycmF5QnkkMSA9IGZ1bmN0aW9uIChncm91cEJ5LCBhcnIpIHtcbiAgICByZXR1cm4gZ3JvdXBBcnJheUJ5KENvbXBhcmFibGUsIGdyb3VwQnkpKGFycik7XG4gIH07XG4gIHZhciBGdW5jdG9yID0ge1xuICAgIG1hcDogbWFwXG4gIH07XG4gIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckV4dGVuc2lvbnMoRnVuY3Rvcik7XG4gIHJldHVybiB7XG4gICAgICAgICAgQ29tcGFyYWJsZTogeyB9LFxuICAgICAgICAgIG1ha2U6IG1ha2UsXG4gICAgICAgICAgc2V0OiBzZXQsXG4gICAgICAgICAgc2luZ2xldG9uOiBzaW5nbGV0b24sXG4gICAgICAgICAgaXNFbXB0eTogQmVsdF9NYXAuaXNFbXB0eSxcbiAgICAgICAgICBjb250YWluczogY29udGFpbnMsXG4gICAgICAgICAgY29tcGFyZUludDogY29tcGFyZUludCxcbiAgICAgICAgICBjb21wYXJlQnk6IGNvbXBhcmVCeSxcbiAgICAgICAgICBlcUJ5OiBlcUJ5LFxuICAgICAgICAgIGZpbmQ6IGZpbmQsXG4gICAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgICBmb2xkTGVmdDogZm9sZExlZnQsXG4gICAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgICAgYW55OiBhbnksXG4gICAgICAgICAgbGVuZ3RoOiBCZWx0X01hcC5zaXplLFxuICAgICAgICAgIHRvQXJyYXk6IEJlbHRfTWFwLnRvQXJyYXksXG4gICAgICAgICAgZnJvbUFycmF5OiBmcm9tQXJyYXksXG4gICAgICAgICAgZnJvbVZhbHVlQXJyYXk6IGZyb21WYWx1ZUFycmF5JDEsXG4gICAgICAgICAgdG9MaXN0OiBCZWx0X01hcC50b0xpc3QsXG4gICAgICAgICAgZnJvbUxpc3Q6IGZyb21MaXN0LFxuICAgICAgICAgIGZyb21WYWx1ZUxpc3Q6IGZyb21WYWx1ZUxpc3QkMSxcbiAgICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICAgIGtleUFycmF5OiBCZWx0X01hcC5rZXlzVG9BcnJheSxcbiAgICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgICAgICB2YWx1ZUFycmF5OiBCZWx0X01hcC52YWx1ZXNUb0FycmF5LFxuICAgICAgICAgIG1pbktleTogQmVsdF9NYXAubWluS2V5LFxuICAgICAgICAgIG1heEtleTogQmVsdF9NYXAubWF4S2V5LFxuICAgICAgICAgIG1pbjogQmVsdF9NYXAubWluaW11bSxcbiAgICAgICAgICBtYXg6IEJlbHRfTWFwLm1heGltdW0sXG4gICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgZ2V0T3JFbHNlOiBnZXRPckVsc2UsXG4gICAgICAgICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgICAgICAgcmVtb3ZlTWFueTogcmVtb3ZlTWFueSxcbiAgICAgICAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICAgICAgICBtZXJnZTogbWVyZ2UsXG4gICAgICAgICAgbWVyZ2VNYW55OiBtZXJnZU1hbnksXG4gICAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgICAga2VlcDogZmlsdGVyLFxuICAgICAgICAgIGZpbHRlck5vdDogZmlsdGVyTm90LFxuICAgICAgICAgIHJlamVjdDogZmlsdGVyTm90LFxuICAgICAgICAgIHBhcnRpdGlvbjogcGFydGl0aW9uLFxuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIG1hcFdpdGhLZXk6IG1hcFdpdGhLZXksXG4gICAgICAgICAgZ3JvdXBMaXN0Qnk6IGdyb3VwTGlzdEJ5JDEsXG4gICAgICAgICAgZ3JvdXBBcnJheUJ5OiBncm91cEFycmF5QnkkMVxuICAgICAgICB9O1xufVxuXG52YXIgaXNFbXB0eSA9IEJlbHRfTWFwLmlzRW1wdHk7XG5cbnZhciBsZW5ndGggPSBCZWx0X01hcC5zaXplO1xuXG52YXIgdG9BcnJheSA9IEJlbHRfTWFwLnRvQXJyYXk7XG5cbnZhciB0b0xpc3QgPSBCZWx0X01hcC50b0xpc3Q7XG5cbnZhciBrZXlBcnJheSA9IEJlbHRfTWFwLmtleXNUb0FycmF5O1xuXG52YXIgdmFsdWVBcnJheSA9IEJlbHRfTWFwLnZhbHVlc1RvQXJyYXk7XG5cbnZhciBtaW5LZXkgPSBCZWx0X01hcC5taW5LZXk7XG5cbnZhciBtYXhLZXkgPSBCZWx0X01hcC5tYXhLZXk7XG5cbnZhciBtaW4gPSBCZWx0X01hcC5taW5pbXVtO1xuXG52YXIgbWF4ID0gQmVsdF9NYXAubWF4aW11bTtcblxudmFyIGtlZXAgPSBmaWx0ZXI7XG5cbnZhciByZWplY3QgPSBmaWx0ZXJOb3Q7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBzZXQgLFxuICBzaW5nbGV0b24gLFxuICBpc0VtcHR5ICxcbiAgY29udGFpbnMgLFxuICBjb21wYXJlSW50ICxcbiAgY29tcGFyZUJ5ICxcbiAgZXFCeSAsXG4gIGZpbmQgLFxuICBmb3JFYWNoICxcbiAgZm9sZExlZnQgLFxuICBhbGwgLFxuICBhbnkgLFxuICBsZW5ndGggLFxuICB0b0FycmF5ICxcbiAgZnJvbUFycmF5ICxcbiAgZnJvbVZhbHVlQXJyYXkgLFxuICB0b0xpc3QgLFxuICBmcm9tTGlzdCAsXG4gIGZyb21WYWx1ZUxpc3QgLFxuICBrZXlBcnJheSAsXG4gIGtleXMgLFxuICB2YWx1ZUFycmF5ICxcbiAgdmFsdWVzICxcbiAgbWluS2V5ICxcbiAgbWF4S2V5ICxcbiAgbWluICxcbiAgbWF4ICxcbiAgZ2V0ICxcbiAgZ2V0T3JFbHNlICxcbiAgcmVtb3ZlICxcbiAgcmVtb3ZlTWFueSAsXG4gIHVwZGF0ZSAsXG4gIG1lcmdlICxcbiAgbWVyZ2VNYW55ICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlck5vdCAsXG4gIHJlamVjdCAsXG4gIHBhcnRpdGlvbiAsXG4gIG1hcCAsXG4gIG1hcFdpdGhLZXkgLFxuICBncm91cExpc3RCeSAsXG4gIGdyb3VwQXJyYXlCeSAsXG4gIFdpdGhPcmQgLFxuICBcbn1cbi8qIFJlbHVkZV9GdW5jdGlvbiBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9Tb3J0QXJyYXkgZnJvbSBcIi4vYmVsdF9Tb3J0QXJyYXkuanNcIjtcblxuZnVuY3Rpb24gdHJlZUhlaWdodChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbi5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IG4udmFsdWUsXG4gICAgICAgICAgICBoZWlnaHQ6IG4uaGVpZ2h0LFxuICAgICAgICAgICAgbGVmdDogY29weShuLmxlZnQpLFxuICAgICAgICAgICAgcmlnaHQ6IGNvcHkobi5yaWdodClcbiAgICAgICAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShsLCB2LCByKSB7XG4gIHZhciBobCA9IGwgIT09IHVuZGVmaW5lZCA/IGwuaGVpZ2h0IDogMDtcbiAgdmFyIGhyID0gciAhPT0gdW5kZWZpbmVkID8gci5oZWlnaHQgOiAwO1xuICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgIGhlaWdodDogaGwgPj0gaHIgPyBobCArIDEgfCAwIDogaHIgKyAxIHwgMCxcbiAgICAgICAgICBsZWZ0OiBsLFxuICAgICAgICAgIHJpZ2h0OiByXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHNpbmdsZXRvbih4KSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHgsXG4gICAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICAgIGxlZnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByaWdodDogdW5kZWZpbmVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGhlaWdodEdlKGwsIHIpIHtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsLmhlaWdodCA+PSByLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYWwobCwgdiwgcikge1xuICB2YXIgaGwgPSBsICE9PSB1bmRlZmluZWQgPyBsLmhlaWdodCA6IDA7XG4gIHZhciBociA9IHIgIT09IHVuZGVmaW5lZCA/IHIuaGVpZ2h0IDogMDtcbiAgaWYgKGhsID4gKGhyICsgMiB8IDApKSB7XG4gICAgdmFyIGx2ID0gbC52YWx1ZTtcbiAgICB2YXIgbGwgPSBsLmxlZnQ7XG4gICAgdmFyIGxyID0gbC5yaWdodDtcbiAgICBpZiAoaGVpZ2h0R2UobGwsIGxyKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZShsbCwgbHYsIGNyZWF0ZShsciwgdiwgcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3JlYXRlKGNyZWF0ZShsbCwgbHYsIGxyLmxlZnQpLCBsci52YWx1ZSwgY3JlYXRlKGxyLnJpZ2h0LCB2LCByKSk7XG4gICAgfVxuICB9XG4gIGlmIChociA8PSAoaGwgKyAyIHwgMCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgICAgICBoZWlnaHQ6IGhsID49IGhyID8gaGwgKyAxIHwgMCA6IGhyICsgMSB8IDAsXG4gICAgICAgICAgICBsZWZ0OiBsLFxuICAgICAgICAgICAgcmlnaHQ6IHJcbiAgICAgICAgICB9O1xuICB9XG4gIHZhciBydiA9IHIudmFsdWU7XG4gIHZhciBybCA9IHIubGVmdDtcbiAgdmFyIHJyID0gci5yaWdodDtcbiAgaWYgKGhlaWdodEdlKHJyLCBybCkpIHtcbiAgICByZXR1cm4gY3JlYXRlKGNyZWF0ZShsLCB2LCBybCksIHJ2LCBycik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZShjcmVhdGUobCwgdiwgcmwubGVmdCksIHJsLnZhbHVlLCBjcmVhdGUocmwucmlnaHQsIHJ2LCBycikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pbjBBdXgoX24pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIG4kMSA9IG4ubGVmdDtcbiAgICBpZiAobiQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1pbmltdW0obikge1xuICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUobWluMEF1eChuKSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1pblVuZGVmaW5lZChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWluMEF1eChuKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWF4MEF1eChfbikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgbiQxID0gbi5yaWdodDtcbiAgICBpZiAobiQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1heGltdW0obikge1xuICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUobWF4MEF1eChuKSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1heFVuZGVmaW5lZChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWF4MEF1eChuKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWluQXV4V2l0aFJlZihuLCB2KSB7XG4gIHZhciBrbiA9IG4udmFsdWU7XG4gIHZhciBsbiA9IG4ubGVmdDtcbiAgdmFyIHJuID0gbi5yaWdodDtcbiAgaWYgKGxuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYmFsKHJlbW92ZU1pbkF1eFdpdGhSZWYobG4sIHYpLCBrbiwgcm4pO1xuICB9IGVsc2Uge1xuICAgIHYuY29udGVudHMgPSBrbjtcbiAgICByZXR1cm4gcm47XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbXB0eShuKSB7XG4gIHJldHVybiBuID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHN0YWNrQWxsTGVmdChfdiwgX3MpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBzID0gX3M7XG4gICAgdmFyIHYgPSBfdjtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgX3MgPSAvKiA6OiAqL1tcbiAgICAgIHYsXG4gICAgICBzXG4gICAgXTtcbiAgICBfdiA9IHYubGVmdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKF9uLCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGZvckVhY2hVKG4ubGVmdCwgZik7XG4gICAgZihuLnZhbHVlKTtcbiAgICBfbiA9IG4ucmlnaHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKG4sIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hVKG4sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVUoX3MsIF9hY2N1LCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBzID0gX3M7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIHZhciBrID0gcy52YWx1ZTtcbiAgICB2YXIgbCA9IHMubGVmdDtcbiAgICB2YXIgciA9IHMucmlnaHQ7XG4gICAgX2FjY3UgPSBmKHJlZHVjZVUobCwgYWNjdSwgZiksIGspO1xuICAgIF9zID0gcjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShzLCBhY2N1LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKHMsIGFjY3UsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5VShfbiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwKG4udmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghZXZlcnlVKG4ubGVmdCwgcCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX24gPSBuLnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlcnkobiwgcCkge1xuICByZXR1cm4gZXZlcnlVKG4sIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWVVKF9uLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHAobi52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc29tZVUobi5sZWZ0LCBwKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9uID0gbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUobiwgcCkge1xuICByZXR1cm4gc29tZVUobiwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gYWRkTWluRWxlbWVudChuLCB2KSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYmFsKGFkZE1pbkVsZW1lbnQobi5sZWZ0LCB2KSwgbi52YWx1ZSwgbi5yaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbih2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRNYXhFbGVtZW50KG4sIHYpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwobi5sZWZ0LCBuLnZhbHVlLCBhZGRNYXhFbGVtZW50KG4ucmlnaHQsIHYpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2luZ2xldG9uKHYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpvaW5TaGFyZWQobG4sIHYsIHJuKSB7XG4gIGlmIChsbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFkZE1pbkVsZW1lbnQocm4sIHYpO1xuICB9XG4gIGlmIChybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFkZE1heEVsZW1lbnQobG4sIHYpO1xuICB9XG4gIHZhciBsaCA9IGxuLmhlaWdodDtcbiAgdmFyIHJoID0gcm4uaGVpZ2h0O1xuICBpZiAobGggPiAocmggKyAyIHwgMCkpIHtcbiAgICByZXR1cm4gYmFsKGxuLmxlZnQsIGxuLnZhbHVlLCBqb2luU2hhcmVkKGxuLnJpZ2h0LCB2LCBybikpO1xuICB9IGVsc2UgaWYgKHJoID4gKGxoICsgMiB8IDApKSB7XG4gICAgcmV0dXJuIGJhbChqb2luU2hhcmVkKGxuLCB2LCBybi5sZWZ0KSwgcm4udmFsdWUsIHJuLnJpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlKGxuLCB2LCBybik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uY2F0U2hhcmVkKHQxLCB0Mikge1xuICBpZiAodDEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0MjtcbiAgfVxuICBpZiAodDIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0MTtcbiAgfVxuICB2YXIgdiA9IHtcbiAgICBjb250ZW50czogdDIudmFsdWVcbiAgfTtcbiAgdmFyIHQyciA9IHJlbW92ZU1pbkF1eFdpdGhSZWYodDIsIHYpO1xuICByZXR1cm4gam9pblNoYXJlZCh0MSwgdi5jb250ZW50cywgdDJyKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uU2hhcmVkVShuLCBwKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICBdO1xuICB9XG4gIHZhciB2YWx1ZSA9IG4udmFsdWU7XG4gIHZhciBtYXRjaCA9IHBhcnRpdGlvblNoYXJlZFUobi5sZWZ0LCBwKTtcbiAgdmFyIGxmID0gbWF0Y2hbMV07XG4gIHZhciBsdCA9IG1hdGNoWzBdO1xuICB2YXIgcHYgPSBwKHZhbHVlKTtcbiAgdmFyIG1hdGNoJDEgPSBwYXJ0aXRpb25TaGFyZWRVKG4ucmlnaHQsIHApO1xuICB2YXIgcmYgPSBtYXRjaCQxWzFdO1xuICB2YXIgcnQgPSBtYXRjaCQxWzBdO1xuICBpZiAocHYpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBqb2luU2hhcmVkKGx0LCB2YWx1ZSwgcnQpLFxuICAgICAgICAgICAgY29uY2F0U2hhcmVkKGxmLCByZilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGNvbmNhdFNoYXJlZChsdCwgcnQpLFxuICAgICAgICAgICAgam9pblNoYXJlZChsZiwgdmFsdWUsIHJmKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uU2hhcmVkKG4sIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblNoYXJlZFUobiwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTm9kZShuKSB7XG4gIHZhciBsID0gbi5sZWZ0O1xuICB2YXIgciA9IG4ucmlnaHQ7XG4gIHZhciBzaXplTCA9IGwgIT09IHVuZGVmaW5lZCA/IGxlbmd0aE5vZGUobCkgOiAwO1xuICB2YXIgc2l6ZVIgPSByICE9PSB1bmRlZmluZWQgPyBsZW5ndGhOb2RlKHIpIDogMDtcbiAgcmV0dXJuICgxICsgc2l6ZUwgfCAwKSArIHNpemVSIHwgMDtcbn1cblxuZnVuY3Rpb24gc2l6ZShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbGVuZ3RoTm9kZShuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0xpc3RBdXgoX24sIF9hY2N1KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICBuLnZhbHVlLFxuICAgICAgdG9MaXN0QXV4KG4ucmlnaHQsIGFjY3UpXG4gICAgXTtcbiAgICBfbiA9IG4ubGVmdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvTGlzdChzKSB7XG4gIHJldHVybiB0b0xpc3RBdXgocywgLyogW10gKi8wKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChfdikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHYgPSBfdjtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgbCA9IHYubGVmdDtcbiAgICB2YXIgciA9IHYucmlnaHQ7XG4gICAgdmFyIGRpZmYgPSB0cmVlSGVpZ2h0KGwpIC0gdHJlZUhlaWdodChyKSB8IDA7XG4gICAgaWYgKCEoZGlmZiA8PSAyICYmIGRpZmYgPj0gLTIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIFxcXCJiZWx0X2ludGVybmFsQVZMc2V0Lm1sXFxcIiwgbGluZSAzMDAsIGNoYXJhY3RlcnMgNi0xMlwiKTtcbiAgICB9XG4gICAgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChsKTtcbiAgICBfdiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXkoX24sIF9pLCBhcnIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHIgPSBuLnJpZ2h0O1xuICAgIHZhciBuZXh0ID0gbCAhPT0gdW5kZWZpbmVkID8gZmlsbEFycmF5KGwsIGksIGFycikgOiBpO1xuICAgIGFycltuZXh0XSA9IHY7XG4gICAgdmFyIHJuZXh0ID0gbmV4dCArIDEgfCAwO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBybmV4dDtcbiAgICB9XG4gICAgX2kgPSBybmV4dDtcbiAgICBfbiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXlXaXRoUGFydGl0aW9uKF9uLCBjdXJzb3IsIGFyciwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHIgPSBuLnJpZ2h0O1xuICAgIGlmIChsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpbGxBcnJheVdpdGhQYXJ0aXRpb24obCwgY3Vyc29yLCBhcnIsIHApO1xuICAgIH1cbiAgICBpZiAocCh2KSkge1xuICAgICAgdmFyIGMgPSBjdXJzb3IuZm9yd2FyZDtcbiAgICAgIGFycltjXSA9IHY7XG4gICAgICBjdXJzb3IuZm9yd2FyZCA9IGMgKyAxIHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGMkMSA9IGN1cnNvci5iYWNrd2FyZDtcbiAgICAgIGFycltjJDFdID0gdjtcbiAgICAgIGN1cnNvci5iYWNrd2FyZCA9IGMkMSAtIDEgfCAwO1xuICAgIH1cbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBfbiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXlXaXRoRmlsdGVyKF9uLCBfaSwgYXJyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIHYgPSBuLnZhbHVlO1xuICAgIHZhciBsID0gbi5sZWZ0O1xuICAgIHZhciByID0gbi5yaWdodDtcbiAgICB2YXIgbmV4dCA9IGwgIT09IHVuZGVmaW5lZCA/IGZpbGxBcnJheVdpdGhGaWx0ZXIobCwgaSwgYXJyLCBwKSA6IGk7XG4gICAgdmFyIHJuZXh0ID0gcCh2KSA/IChhcnJbbmV4dF0gPSB2LCBuZXh0ICsgMSB8IDApIDogbmV4dDtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcm5leHQ7XG4gICAgfVxuICAgIF9pID0gcm5leHQ7XG4gICAgX24gPSByO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShuKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgZmlsbEFycmF5KG4sIDAsIHYpO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgb2ZmLCBsZW4pIHtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDAgOlxuICAgICAgICByZXR1cm4gO1xuICAgIGNhc2UgMSA6XG4gICAgICAgIHJldHVybiBzaW5nbGV0b24oYXJyW29mZl0pO1xuICAgIGNhc2UgMiA6XG4gICAgICAgIHZhciB4MCA9IGFycltvZmZdO1xuICAgICAgICB2YXIgeDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB4MSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgbGVmdDogc2luZ2xldG9uKHgwKSxcbiAgICAgICAgICAgICAgICByaWdodDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH07XG4gICAgY2FzZSAzIDpcbiAgICAgICAgdmFyIHgwJDEgPSBhcnJbb2ZmXTtcbiAgICAgICAgdmFyIHgxJDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICB2YXIgeDIgPSBhcnJbb2ZmIC0gMiB8IDBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB4MSQxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24oeDAkMSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHNpbmdsZXRvbih4MilcbiAgICAgICAgICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgdmFyIG5sID0gbGVuIC8gMiB8IDA7XG4gICAgICB2YXIgbGVmdCA9IGZyb21Tb3J0ZWRBcnJheVJldkF1eChhcnIsIG9mZiwgbmwpO1xuICAgICAgdmFyIG1pZCA9IGFycltvZmYgLSBubCB8IDBdO1xuICAgICAgdmFyIHJpZ2h0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgKG9mZiAtIG5sIHwgMCkgLSAxIHwgMCwgKGxlbiAtIG5sIHwgMCkgLSAxIHwgMCk7XG4gICAgICByZXR1cm4gY3JlYXRlKGxlZnQsIG1pZCwgcmlnaHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZyb21Tb3J0ZWRBcnJheUF1eChhcnIsIG9mZiwgbGVuKSB7XG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAwIDpcbiAgICAgICAgcmV0dXJuIDtcbiAgICBjYXNlIDEgOlxuICAgICAgICByZXR1cm4gc2luZ2xldG9uKGFycltvZmZdKTtcbiAgICBjYXNlIDIgOlxuICAgICAgICB2YXIgeDAgPSBhcnJbb2ZmXTtcbiAgICAgICAgdmFyIHgxID0gYXJyW29mZiArIDEgfCAwXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogeDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHNpbmdsZXRvbih4MCksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciB4MCQxID0gYXJyW29mZl07XG4gICAgICAgIHZhciB4MSQxID0gYXJyW29mZiArIDEgfCAwXTtcbiAgICAgICAgdmFyIHgyID0gYXJyW29mZiArIDIgfCAwXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogeDEkMSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgbGVmdDogc2luZ2xldG9uKHgwJDEpLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBzaW5nbGV0b24oeDIpXG4gICAgICAgICAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBubCA9IGxlbiAvIDIgfCAwO1xuICAgICAgdmFyIGxlZnQgPSBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCBvZmYsIG5sKTtcbiAgICAgIHZhciBtaWQgPSBhcnJbb2ZmICsgbmwgfCAwXTtcbiAgICAgIHZhciByaWdodCA9IGZyb21Tb3J0ZWRBcnJheUF1eChhcnIsIChvZmYgKyBubCB8IDApICsgMSB8IDAsIChsZW4gLSBubCB8IDApIC0gMSB8IDApO1xuICAgICAgcmV0dXJuIGNyZWF0ZShsZWZ0LCBtaWQsIHJpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlVbnNhZmUoYXJyKSB7XG4gIHJldHVybiBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCAwLCBhcnIubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24ga2VlcFNoYXJlZFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgdiA9IG4udmFsdWU7XG4gIHZhciBsID0gbi5sZWZ0O1xuICB2YXIgciA9IG4ucmlnaHQ7XG4gIHZhciBuZXdMID0ga2VlcFNoYXJlZFUobCwgcCk7XG4gIHZhciBwdiA9IHAodik7XG4gIHZhciBuZXdSID0ga2VlcFNoYXJlZFUociwgcCk7XG4gIGlmIChwdikge1xuICAgIGlmIChsID09PSBuZXdMICYmIHIgPT09IG5ld1IpIHtcbiAgICAgIHJldHVybiBuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gam9pblNoYXJlZChuZXdMLCB2LCBuZXdSKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbmNhdFNoYXJlZChuZXdMLCBuZXdSKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZWVwU2hhcmVkKG4sIHApIHtcbiAgcmV0dXJuIGtlZXBTaGFyZWRVKG4sIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBDb3B5VShuLCBwKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBzaXplID0gbGVuZ3RoTm9kZShuKTtcbiAgdmFyIHYgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIHZhciBsYXN0ID0gZmlsbEFycmF5V2l0aEZpbHRlcihuLCAwLCB2LCBwKTtcbiAgcmV0dXJuIGZyb21Tb3J0ZWRBcnJheUF1eCh2LCAwLCBsYXN0KTtcbn1cblxuZnVuY3Rpb24ga2VlcENvcHkobiwgcCkge1xuICByZXR1cm4ga2VlcENvcHlVKG4sIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbkNvcHlVKG4sIHApIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgdmFyIGJhY2t3YXJkID0gc2l6ZSAtIDEgfCAwO1xuICB2YXIgY3Vyc29yID0ge1xuICAgIGZvcndhcmQ6IDAsXG4gICAgYmFja3dhcmQ6IGJhY2t3YXJkXG4gIH07XG4gIGZpbGxBcnJheVdpdGhQYXJ0aXRpb24obiwgY3Vyc29yLCB2LCBwKTtcbiAgdmFyIGZvcndhcmRMZW4gPSBjdXJzb3IuZm9yd2FyZDtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIGZyb21Tb3J0ZWRBcnJheUF1eCh2LCAwLCBmb3J3YXJkTGVuKSxcbiAgICAgICAgICBmcm9tU29ydGVkQXJyYXlSZXZBdXgodiwgYmFja3dhcmQsIHNpemUgLSBmb3J3YXJkTGVuIHwgMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uQ29weShuLCBwKSB7XG4gIHJldHVybiBwYXJ0aXRpb25Db3B5VShuLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBoYXMoX3QsIHgsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHQgPSBfdDtcbiAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB2ID0gdC52YWx1ZTtcbiAgICB2YXIgYyA9IGNtcCh4LCB2KTtcbiAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF90ID0gYyA8IDAgPyB0LmxlZnQgOiB0LnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY21wKHMxLCBzMiwgY21wJDEpIHtcbiAgdmFyIGxlbjEgPSBzaXplKHMxKTtcbiAgdmFyIGxlbjIgPSBzaXplKHMyKTtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICB2YXIgX2UxID0gc3RhY2tBbGxMZWZ0KHMxLCAvKiBbXSAqLzApO1xuICAgIHZhciBfZTIgPSBzdGFja0FsbExlZnQoczIsIC8qIFtdICovMCk7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGUyID0gX2UyO1xuICAgICAgdmFyIGUxID0gX2UxO1xuICAgICAgaWYgKCFlMSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmICghZTIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgaDIgPSBlMlswXTtcbiAgICAgIHZhciBoMSA9IGUxWzBdO1xuICAgICAgdmFyIGMgPSBjbXAkMShoMS52YWx1ZSwgaDIudmFsdWUpO1xuICAgICAgaWYgKGMgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgICBfZTIgPSBzdGFja0FsbExlZnQoaDIucmlnaHQsIGUyWzFdKTtcbiAgICAgIF9lMSA9IHN0YWNrQWxsTGVmdChoMS5yaWdodCwgZTFbMV0pO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH0gZWxzZSBpZiAobGVuMSA8IGxlbjIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoczEsIHMyLCBjKSB7XG4gIHJldHVybiBjbXAoczEsIHMyLCBjKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gc3Vic2V0KF9zMSwgX3MyLCBjbXApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBzMiA9IF9zMjtcbiAgICB2YXIgczEgPSBfczE7XG4gICAgaWYgKHMxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdjEgPSBzMS52YWx1ZTtcbiAgICB2YXIgbDEgPSBzMS5sZWZ0O1xuICAgIHZhciByMSA9IHMxLnJpZ2h0O1xuICAgIHZhciB2MiA9IHMyLnZhbHVlO1xuICAgIHZhciBsMiA9IHMyLmxlZnQ7XG4gICAgdmFyIHIyID0gczIucmlnaHQ7XG4gICAgdmFyIGMgPSBjbXAodjEsIHYyKTtcbiAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgaWYgKCFzdWJzZXQobDEsIGwyLCBjbXApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIF9zMiA9IHIyO1xuICAgICAgX3MxID0gcjE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGlmIChjIDwgMCkge1xuICAgICAgaWYgKCFzdWJzZXQoY3JlYXRlKGwxLCB2MSwgdW5kZWZpbmVkKSwgbDIsIGNtcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgX3MxID0gcjE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGlmICghc3Vic2V0KGNyZWF0ZSh1bmRlZmluZWQsIHYxLCByMSksIHIyLCBjbXApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF9zMSA9IGwxO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0KF9uLCB4LCBjbXApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHYgPSBuLnZhbHVlO1xuICAgIHZhciBjID0gY21wKHgsIHYpO1xuICAgIGlmIChjID09PSAwKSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh2KTtcbiAgICB9XG4gICAgX24gPSBjIDwgMCA/IG4ubGVmdCA6IG4ucmlnaHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWQoX24sIHgsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV4bihfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB2ID0gbi52YWx1ZTtcbiAgICAgIHZhciBjID0gY21wKHgsIHYpO1xuICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZ2V0RXhuMFwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRlV2l0aExlZnRDaGlsZChrMikge1xuICB2YXIgazEgPSBrMi5sZWZ0O1xuICBrMi5sZWZ0ID0gazEucmlnaHQ7XG4gIGsxLnJpZ2h0ID0gazI7XG4gIHZhciBobGsyID0gdHJlZUhlaWdodChrMi5sZWZ0KTtcbiAgdmFyIGhyazIgPSB0cmVlSGVpZ2h0KGsyLnJpZ2h0KTtcbiAgazIuaGVpZ2h0ID0gKFxuICAgIGhsazIgPiBocmsyID8gaGxrMiA6IGhyazJcbiAgKSArIDEgfCAwO1xuICB2YXIgaGxrMSA9IHRyZWVIZWlnaHQoazEubGVmdCk7XG4gIHZhciBoazIgPSBrMi5oZWlnaHQ7XG4gIGsxLmhlaWdodCA9IChcbiAgICBobGsxID4gaGsyID8gaGxrMSA6IGhrMlxuICApICsgMSB8IDA7XG4gIHJldHVybiBrMTtcbn1cblxuZnVuY3Rpb24gcm90YXRlV2l0aFJpZ2h0Q2hpbGQoazEpIHtcbiAgdmFyIGsyID0gazEucmlnaHQ7XG4gIGsxLnJpZ2h0ID0gazIubGVmdDtcbiAgazIubGVmdCA9IGsxO1xuICB2YXIgaGxrMSA9IHRyZWVIZWlnaHQoazEubGVmdCk7XG4gIHZhciBocmsxID0gdHJlZUhlaWdodChrMS5yaWdodCk7XG4gIGsxLmhlaWdodCA9IChcbiAgICBobGsxID4gaHJrMSA/IGhsazEgOiBocmsxXG4gICkgKyAxIHwgMDtcbiAgdmFyIGhyazIgPSB0cmVlSGVpZ2h0KGsyLnJpZ2h0KTtcbiAgdmFyIGhrMSA9IGsxLmhlaWdodDtcbiAgazIuaGVpZ2h0ID0gKFxuICAgIGhyazIgPiBoazEgPyBocmsyIDogaGsxXG4gICkgKyAxIHwgMDtcbiAgcmV0dXJuIGsyO1xufVxuXG5mdW5jdGlvbiBkb3VibGVXaXRoTGVmdENoaWxkKGszKSB7XG4gIHZhciB2ID0gcm90YXRlV2l0aFJpZ2h0Q2hpbGQoazMubGVmdCk7XG4gIGszLmxlZnQgPSB2O1xuICByZXR1cm4gcm90YXRlV2l0aExlZnRDaGlsZChrMyk7XG59XG5cbmZ1bmN0aW9uIGRvdWJsZVdpdGhSaWdodENoaWxkKGsyKSB7XG4gIHZhciB2ID0gcm90YXRlV2l0aExlZnRDaGlsZChrMi5yaWdodCk7XG4gIGsyLnJpZ2h0ID0gdjtcbiAgcmV0dXJuIHJvdGF0ZVdpdGhSaWdodENoaWxkKGsyKTtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0VXBkYXRlTXV0YXRlKHQpIHtcbiAgdmFyIGhsdCA9IHRyZWVIZWlnaHQodC5sZWZ0KTtcbiAgdmFyIGhydCA9IHRyZWVIZWlnaHQodC5yaWdodCk7XG4gIHQuaGVpZ2h0ID0gKFxuICAgIGhsdCA+IGhydCA/IGhsdCA6IGhydFxuICApICsgMSB8IDA7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBiYWxNdXRhdGUobnQpIHtcbiAgdmFyIGwgPSBudC5sZWZ0O1xuICB2YXIgciA9IG50LnJpZ2h0O1xuICB2YXIgaGwgPSB0cmVlSGVpZ2h0KGwpO1xuICB2YXIgaHIgPSB0cmVlSGVpZ2h0KHIpO1xuICBpZiAoaGwgPiAoMiArIGhyIHwgMCkpIHtcbiAgICB2YXIgbGwgPSBsLmxlZnQ7XG4gICAgdmFyIGxyID0gbC5yaWdodDtcbiAgICBpZiAoaGVpZ2h0R2UobGwsIGxyKSkge1xuICAgICAgcmV0dXJuIGhlaWdodFVwZGF0ZU11dGF0ZShyb3RhdGVXaXRoTGVmdENoaWxkKG50KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoZWlnaHRVcGRhdGVNdXRhdGUoZG91YmxlV2l0aExlZnRDaGlsZChudCkpO1xuICAgIH1cbiAgfVxuICBpZiAoaHIgPiAoMiArIGhsIHwgMCkpIHtcbiAgICB2YXIgcmwgPSByLmxlZnQ7XG4gICAgdmFyIHJyID0gci5yaWdodDtcbiAgICBpZiAoaGVpZ2h0R2UocnIsIHJsKSkge1xuICAgICAgcmV0dXJuIGhlaWdodFVwZGF0ZU11dGF0ZShyb3RhdGVXaXRoUmlnaHRDaGlsZChudCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGVpZ2h0VXBkYXRlTXV0YXRlKGRvdWJsZVdpdGhSaWdodENoaWxkKG50KSk7XG4gICAgfVxuICB9XG4gIG50LmhlaWdodCA9IChcbiAgICBobCA+IGhyID8gaGwgOiBoclxuICApICsgMSB8IDA7XG4gIHJldHVybiBudDtcbn1cblxuZnVuY3Rpb24gYWRkTXV0YXRlKGNtcCwgdCwgeCkge1xuICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbih4KTtcbiAgfVxuICB2YXIgayA9IHQudmFsdWU7XG4gIHZhciBjID0gY21wKHgsIGspO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIHJldHVybiB0O1xuICB9XG4gIHZhciBsID0gdC5sZWZ0O1xuICB2YXIgciA9IHQucmlnaHQ7XG4gIGlmIChjIDwgMCkge1xuICAgIHZhciBsbCA9IGFkZE11dGF0ZShjbXAsIGwsIHgpO1xuICAgIHQubGVmdCA9IGxsO1xuICB9IGVsc2Uge1xuICAgIHQucmlnaHQgPSBhZGRNdXRhdGUoY21wLCByLCB4KTtcbiAgfVxuICByZXR1cm4gYmFsTXV0YXRlKHQpO1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoeHMsIGNtcCkge1xuICB2YXIgbGVuID0geHMubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgbmV4dCA9IEJlbHRfU29ydEFycmF5LnN0cmljdGx5U29ydGVkTGVuZ3RoVSh4cywgKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgcmV0dXJuIGNtcCh4LCB5KSA8IDA7XG4gICAgICAgIH0pKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKG5leHQgPj0gMCkge1xuICAgIHJlc3VsdCA9IGZyb21Tb3J0ZWRBcnJheUF1eCh4cywgMCwgbmV4dCk7XG4gIH0gZWxzZSB7XG4gICAgbmV4dCA9IC1uZXh0IHwgMDtcbiAgICByZXN1bHQgPSBmcm9tU29ydGVkQXJyYXlSZXZBdXgoeHMsIG5leHQgLSAxIHwgMCwgbmV4dCk7XG4gIH1cbiAgZm9yKHZhciBpID0gbmV4dDsgaSA8IGxlbjsgKytpKXtcbiAgICByZXN1bHQgPSBhZGRNdXRhdGUoY21wLCByZXN1bHQsIHhzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZW1vdmVNaW5BdXhXaXRoUm9vdE11dGF0ZShudCwgbikge1xuICB2YXIgbG4gPSBuLmxlZnQ7XG4gIHZhciBybiA9IG4ucmlnaHQ7XG4gIGlmIChsbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbi5sZWZ0ID0gcmVtb3ZlTWluQXV4V2l0aFJvb3RNdXRhdGUobnQsIGxuKTtcbiAgICByZXR1cm4gYmFsTXV0YXRlKG4pO1xuICB9IGVsc2Uge1xuICAgIG50LnZhbHVlID0gbi52YWx1ZTtcbiAgICByZXR1cm4gcm47XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgY29weSAsXG4gIGNyZWF0ZSAsXG4gIGJhbCAsXG4gIHNpbmdsZXRvbiAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgcmVtb3ZlTWluQXV4V2l0aFJlZiAsXG4gIGlzRW1wdHkgLFxuICBzdGFja0FsbExlZnQgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICByZWR1Y2VVICxcbiAgcmVkdWNlICxcbiAgZXZlcnlVICxcbiAgZXZlcnkgLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBqb2luU2hhcmVkICxcbiAgY29uY2F0U2hhcmVkICxcbiAga2VlcFNoYXJlZFUgLFxuICBrZWVwU2hhcmVkICxcbiAga2VlcENvcHlVICxcbiAga2VlcENvcHkgLFxuICBwYXJ0aXRpb25TaGFyZWRVICxcbiAgcGFydGl0aW9uU2hhcmVkICxcbiAgcGFydGl0aW9uQ29weVUgLFxuICBwYXJ0aXRpb25Db3B5ICxcbiAgbGVuZ3RoTm9kZSAsXG4gIHNpemUgLFxuICB0b0xpc3QgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgZmlsbEFycmF5ICxcbiAgdG9BcnJheSAsXG4gIGZyb21Tb3J0ZWRBcnJheUF1eCAsXG4gIGZyb21Tb3J0ZWRBcnJheVJldkF1eCAsXG4gIGZyb21Tb3J0ZWRBcnJheVVuc2FmZSAsXG4gIGhhcyAsXG4gIGNtcCAsXG4gIGVxICxcbiAgc3Vic2V0ICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0RXhuICxcbiAgZnJvbUFycmF5ICxcbiAgYWRkTXV0YXRlICxcbiAgYmFsTXV0YXRlICxcbiAgcmVtb3ZlTWluQXV4V2l0aFJvb3RNdXRhdGUgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmVsdF9pbnRlcm5hbEFWTHNldCBmcm9tIFwiLi9iZWx0X2ludGVybmFsQVZMc2V0LmpzXCI7XG5cbmZ1bmN0aW9uIGFkZCh0LCB4LCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LnNpbmdsZXRvbih4KTtcbiAgfVxuICB2YXIgayA9IHQudmFsdWU7XG4gIHZhciBjID0gY21wKHgsIGspO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIHJldHVybiB0O1xuICB9XG4gIHZhciBsID0gdC5sZWZ0O1xuICB2YXIgciA9IHQucmlnaHQ7XG4gIGlmIChjIDwgMCkge1xuICAgIHZhciBsbCA9IGFkZChsLCB4LCBjbXApO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LmJhbChsbCwgaywgcik7XG4gICAgfVxuICB9XG4gIHZhciByciA9IGFkZChyLCB4LCBjbXApO1xuICBpZiAocnIgPT09IHIpIHtcbiAgICByZXR1cm4gdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5iYWwobCwgaywgcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSh0LCB4LCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0O1xuICB9XG4gIHZhciB2ID0gdC52YWx1ZTtcbiAgdmFyIGwgPSB0LmxlZnQ7XG4gIHZhciByID0gdC5yaWdodDtcbiAgdmFyIGMgPSBjbXAoeCwgdik7XG4gIGlmIChjID09PSAwKSB7XG4gICAgaWYgKGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICB2YXIgdiQxID0ge1xuICAgICAgY29udGVudHM6IHIudmFsdWVcbiAgICB9O1xuICAgIHZhciByJDEgPSBCZWx0X2ludGVybmFsQVZMc2V0LnJlbW92ZU1pbkF1eFdpdGhSZWYociwgdiQxKTtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5iYWwobCwgdiQxLmNvbnRlbnRzLCByJDEpO1xuICB9XG4gIGlmIChjIDwgMCkge1xuICAgIHZhciBsbCA9IHJlbW92ZShsLCB4LCBjbXApO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LmJhbChsbCwgdiwgcik7XG4gICAgfVxuICB9XG4gIHZhciByciA9IHJlbW92ZShyLCB4LCBjbXApO1xuICBpZiAocnIgPT09IHIpIHtcbiAgICByZXR1cm4gdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5iYWwobCwgdiwgcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueShoLCBhcnIsIGNtcCkge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIHYgPSBoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHZhciBrZXkgPSBhcnJbaV07XG4gICAgdiA9IGFkZCh2LCBrZXksIGNtcCk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hbnkoaCwgYXJyLCBjbXApIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciB2ID0gaDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2YXIga2V5ID0gYXJyW2ldO1xuICAgIHYgPSByZW1vdmUodiwga2V5LCBjbXApO1xuICB9XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBzcGxpdEF1eE5vUGl2b3QoY21wLCBuLCB4KSB7XG4gIHZhciB2ID0gbi52YWx1ZTtcbiAgdmFyIGwgPSBuLmxlZnQ7XG4gIHZhciByID0gbi5yaWdodDtcbiAgdmFyIGMgPSBjbXAoeCwgdik7XG4gIGlmIChjID09PSAwKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHJcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChjIDwgMCkge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBuXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBzcGxpdEF1eE5vUGl2b3QoY21wLCBsLCB4KTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChtYXRjaFsxXSwgdiwgcilcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHNwbGl0QXV4Tm9QaXZvdChjbXAsIHIsIHgpO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgQmVsdF9pbnRlcm5hbEFWTHNldC5qb2luU2hhcmVkKGwsIHYsIG1hdGNoJDFbMF0pLFxuICAgICAgICAgIG1hdGNoJDFbMV1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3BsaXRBdXhQaXZvdChjbXAsIG4sIHgsIHByZXMpIHtcbiAgdmFyIHYgPSBuLnZhbHVlO1xuICB2YXIgbCA9IG4ubGVmdDtcbiAgdmFyIHIgPSBuLnJpZ2h0O1xuICB2YXIgYyA9IGNtcCh4LCB2KTtcbiAgaWYgKGMgPT09IDApIHtcbiAgICBwcmVzLmNvbnRlbnRzID0gdHJ1ZTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgclxuICAgICAgICAgIF07XG4gIH1cbiAgaWYgKGMgPCAwKSB7XG4gICAgaWYgKGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIG5cbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IHNwbGl0QXV4UGl2b3QoY21wLCBsLCB4LCBwcmVzKTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChtYXRjaFsxXSwgdiwgcilcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHNwbGl0QXV4UGl2b3QoY21wLCByLCB4LCBwcmVzKTtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChsLCB2LCBtYXRjaCQxWzBdKSxcbiAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHQsIHgsIGNtcCkge1xuICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICBdO1xuICB9XG4gIHZhciBwcmVzID0ge1xuICAgIGNvbnRlbnRzOiBmYWxzZVxuICB9O1xuICB2YXIgdiA9IHNwbGl0QXV4UGl2b3QoY21wLCB0LCB4LCBwcmVzKTtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHYsXG4gICAgICAgICAgcHJlcy5jb250ZW50c1xuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB1bmlvbihzMSwgczIsIGNtcCkge1xuICBpZiAoczEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzMjtcbiAgfVxuICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzMTtcbiAgfVxuICB2YXIgaDEgPSBzMS5oZWlnaHQ7XG4gIHZhciBoMiA9IHMyLmhlaWdodDtcbiAgaWYgKGgxID49IGgyKSB7XG4gICAgaWYgKGgyID09PSAxKSB7XG4gICAgICByZXR1cm4gYWRkKHMxLCBzMi52YWx1ZSwgY21wKTtcbiAgICB9XG4gICAgdmFyIHYxID0gczEudmFsdWU7XG4gICAgdmFyIGwxID0gczEubGVmdDtcbiAgICB2YXIgcjEgPSBzMS5yaWdodDtcbiAgICB2YXIgbWF0Y2ggPSBzcGxpdEF1eE5vUGl2b3QoY21wLCBzMiwgdjEpO1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LmpvaW5TaGFyZWQodW5pb24obDEsIG1hdGNoWzBdLCBjbXApLCB2MSwgdW5pb24ocjEsIG1hdGNoWzFdLCBjbXApKTtcbiAgfVxuICBpZiAoaDEgPT09IDEpIHtcbiAgICByZXR1cm4gYWRkKHMyLCBzMS52YWx1ZSwgY21wKTtcbiAgfVxuICB2YXIgdjIgPSBzMi52YWx1ZTtcbiAgdmFyIGwyID0gczIubGVmdDtcbiAgdmFyIHIyID0gczIucmlnaHQ7XG4gIHZhciBtYXRjaCQxID0gc3BsaXRBdXhOb1Bpdm90KGNtcCwgczEsIHYyKTtcbiAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZCh1bmlvbihtYXRjaCQxWzBdLCBsMiwgY21wKSwgdjIsIHVuaW9uKG1hdGNoJDFbMV0sIHIyLCBjbXApKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHMxLCBzMiwgY21wKSB7XG4gIGlmIChzMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIHYxID0gczEudmFsdWU7XG4gIHZhciBsMSA9IHMxLmxlZnQ7XG4gIHZhciByMSA9IHMxLnJpZ2h0O1xuICB2YXIgcHJlcyA9IHtcbiAgICBjb250ZW50czogZmFsc2VcbiAgfTtcbiAgdmFyIG1hdGNoID0gc3BsaXRBdXhQaXZvdChjbXAsIHMyLCB2MSwgcHJlcyk7XG4gIHZhciBsbCA9IGludGVyc2VjdChsMSwgbWF0Y2hbMF0sIGNtcCk7XG4gIHZhciByciA9IGludGVyc2VjdChyMSwgbWF0Y2hbMV0sIGNtcCk7XG4gIGlmIChwcmVzLmNvbnRlbnRzKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChsbCwgdjEsIHJyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5jb25jYXRTaGFyZWQobGwsIHJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWZmKHMxLCBzMiwgY21wKSB7XG4gIGlmIChzMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHMxO1xuICB9XG4gIGlmIChzMiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHMxO1xuICB9XG4gIHZhciB2MSA9IHMxLnZhbHVlO1xuICB2YXIgbDEgPSBzMS5sZWZ0O1xuICB2YXIgcjEgPSBzMS5yaWdodDtcbiAgdmFyIHByZXMgPSB7XG4gICAgY29udGVudHM6IGZhbHNlXG4gIH07XG4gIHZhciBtYXRjaCA9IHNwbGl0QXV4UGl2b3QoY21wLCBzMiwgdjEsIHByZXMpO1xuICB2YXIgbGwgPSBkaWZmKGwxLCBtYXRjaFswXSwgY21wKTtcbiAgdmFyIHJyID0gZGlmZihyMSwgbWF0Y2hbMV0sIGNtcCk7XG4gIGlmIChwcmVzLmNvbnRlbnRzKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuY29uY2F0U2hhcmVkKGxsLCBycik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChsbCwgdjEsIHJyKTtcbiAgfVxufVxuXG52YXIgZW1wdHk7XG5cbnZhciBmcm9tQXJyYXkgPSBCZWx0X2ludGVybmFsQVZMc2V0LmZyb21BcnJheTtcblxudmFyIGZyb21Tb3J0ZWRBcnJheVVuc2FmZSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuZnJvbVNvcnRlZEFycmF5VW5zYWZlO1xuXG52YXIgaXNFbXB0eSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuaXNFbXB0eTtcblxudmFyIGhhcyA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuaGFzO1xuXG52YXIgc3Vic2V0ID0gQmVsdF9pbnRlcm5hbEFWTHNldC5zdWJzZXQ7XG5cbnZhciBjbXAgPSBCZWx0X2ludGVybmFsQVZMc2V0LmNtcDtcblxudmFyIGVxID0gQmVsdF9pbnRlcm5hbEFWTHNldC5lcTtcblxudmFyIGZvckVhY2hVID0gQmVsdF9pbnRlcm5hbEFWTHNldC5mb3JFYWNoVTtcblxudmFyIGZvckVhY2ggPSBCZWx0X2ludGVybmFsQVZMc2V0LmZvckVhY2g7XG5cbnZhciByZWR1Y2VVID0gQmVsdF9pbnRlcm5hbEFWTHNldC5yZWR1Y2VVO1xuXG52YXIgcmVkdWNlID0gQmVsdF9pbnRlcm5hbEFWTHNldC5yZWR1Y2U7XG5cbnZhciBldmVyeVUgPSBCZWx0X2ludGVybmFsQVZMc2V0LmV2ZXJ5VTtcblxudmFyIGV2ZXJ5ID0gQmVsdF9pbnRlcm5hbEFWTHNldC5ldmVyeTtcblxudmFyIHNvbWVVID0gQmVsdF9pbnRlcm5hbEFWTHNldC5zb21lVTtcblxudmFyIHNvbWUgPSBCZWx0X2ludGVybmFsQVZMc2V0LnNvbWU7XG5cbnZhciBrZWVwVSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQua2VlcFNoYXJlZFU7XG5cbnZhciBrZWVwID0gQmVsdF9pbnRlcm5hbEFWTHNldC5rZWVwU2hhcmVkO1xuXG52YXIgcGFydGl0aW9uVSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQucGFydGl0aW9uU2hhcmVkVTtcblxudmFyIHBhcnRpdGlvbiA9IEJlbHRfaW50ZXJuYWxBVkxzZXQucGFydGl0aW9uU2hhcmVkO1xuXG52YXIgc2l6ZSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuc2l6ZTtcblxudmFyIHRvTGlzdCA9IEJlbHRfaW50ZXJuYWxBVkxzZXQudG9MaXN0O1xuXG52YXIgdG9BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQudG9BcnJheTtcblxudmFyIG1pbmltdW0gPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1pbmltdW07XG5cbnZhciBtaW5VbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1pblVuZGVmaW5lZDtcblxudmFyIG1heGltdW0gPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1heGltdW07XG5cbnZhciBtYXhVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1heFVuZGVmaW5lZDtcblxudmFyIGdldCA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuZ2V0O1xuXG52YXIgZ2V0VW5kZWZpbmVkID0gQmVsdF9pbnRlcm5hbEFWTHNldC5nZXRVbmRlZmluZWQ7XG5cbnZhciBnZXRFeG4gPSBCZWx0X2ludGVybmFsQVZMc2V0LmdldEV4bjtcblxudmFyIGNoZWNrSW52YXJpYW50SW50ZXJuYWwgPSBCZWx0X2ludGVybmFsQVZMc2V0LmNoZWNrSW52YXJpYW50SW50ZXJuYWw7XG5cbmV4cG9ydCB7XG4gIGVtcHR5ICxcbiAgZnJvbUFycmF5ICxcbiAgZnJvbVNvcnRlZEFycmF5VW5zYWZlICxcbiAgaXNFbXB0eSAsXG4gIGhhcyAsXG4gIGFkZCAsXG4gIG1lcmdlTWFueSAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICB1bmlvbiAsXG4gIGludGVyc2VjdCAsXG4gIGRpZmYgLFxuICBzdWJzZXQgLFxuICBjbXAgLFxuICBlcSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIHNvbWVVICxcbiAgc29tZSAsXG4gIGtlZXBVICxcbiAga2VlcCAsXG4gIHBhcnRpdGlvblUgLFxuICBwYXJ0aXRpb24gLFxuICBzaXplICxcbiAgdG9MaXN0ICxcbiAgdG9BcnJheSAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0RXhuICxcbiAgc3BsaXQgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X1NldERpY3QgZnJvbSBcIi4vYmVsdF9TZXREaWN0LmpzXCI7XG5cbmZ1bmN0aW9uIGZyb21BcnJheShkYXRhLCBpZCkge1xuICB2YXIgY21wID0gaWQuY21wO1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfU2V0RGljdC5mcm9tQXJyYXkoZGF0YSwgY21wKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiByZW1vdmUobSwgZSkge1xuICB2YXIgZGF0YSA9IG0uZGF0YTtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbmV3RGF0YSA9IEJlbHRfU2V0RGljdC5yZW1vdmUoZGF0YSwgZSwgY21wKTtcbiAgaWYgKG5ld0RhdGEgPT09IGRhdGEpIHtcbiAgICByZXR1cm4gbTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBuZXdEYXRhXG4gICAgICAgICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGQobSwgZSkge1xuICB2YXIgZGF0YSA9IG0uZGF0YTtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbmV3RGF0YSA9IEJlbHRfU2V0RGljdC5hZGQoZGF0YSwgZSwgY21wKTtcbiAgaWYgKG5ld0RhdGEgPT09IGRhdGEpIHtcbiAgICByZXR1cm4gbTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBuZXdEYXRhXG4gICAgICAgICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU1hbnkobSwgZSkge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9TZXREaWN0Lm1lcmdlTWFueShtLmRhdGEsIGUsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWFueShtLCBlKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X1NldERpY3QucmVtb3ZlTWFueShtLmRhdGEsIGUsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gdW5pb24obSwgbikge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9TZXREaWN0LnVuaW9uKG0uZGF0YSwgbi5kYXRhLCBjbXApXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdChtLCBuKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X1NldERpY3QuaW50ZXJzZWN0KG0uZGF0YSwgbi5kYXRhLCBjbXApXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGRpZmYobSwgbikge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9TZXREaWN0LmRpZmYobS5kYXRhLCBuLmRhdGEsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gc3Vic2V0KG0sIG4pIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICByZXR1cm4gQmVsdF9TZXREaWN0LnN1YnNldChtLmRhdGEsIG4uZGF0YSwgY21wKTtcbn1cblxuZnVuY3Rpb24gc3BsaXQobSwgZSkge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHZhciBtYXRjaCA9IEJlbHRfU2V0RGljdC5zcGxpdChtLmRhdGEsIGUsIGNtcCk7XG4gIHZhciBtYXRjaCQxID0gbWF0Y2hbMF07XG4gIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICAgIGRhdGE6IG1hdGNoJDFbMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgICBkYXRhOiBtYXRjaCQxWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBtYXRjaFsxXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYWtlKGlkKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBpZC5jbXAsXG4gICAgICAgICAgZGF0YTogdW5kZWZpbmVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkobSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LmlzRW1wdHkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gY21wKG0sIG4pIHtcbiAgdmFyIGNtcCQxID0gbS5jbXA7XG4gIHJldHVybiBCZWx0X1NldERpY3QuY21wKG0uZGF0YSwgbi5kYXRhLCBjbXAkMSk7XG59XG5cbmZ1bmN0aW9uIGVxKG0sIG4pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5lcShtLmRhdGEsIG4uZGF0YSwgbS5jbXApO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoVShtLCBmKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuZm9yRWFjaFUobS5kYXRhLCBmKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChtLCBmKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuZm9yRWFjaFUobS5kYXRhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKG0sIGFjYywgZikge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LnJlZHVjZVUobS5kYXRhLCBhY2MsIGYpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UobSwgYWNjLCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKG0sIGFjYywgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gZXZlcnlVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5ldmVyeVUobS5kYXRhLCBmKTtcbn1cblxuZnVuY3Rpb24gZXZlcnkobSwgZikge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LmV2ZXJ5VShtLmRhdGEsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWVVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5zb21lVShtLmRhdGEsIGYpO1xufVxuXG5mdW5jdGlvbiBzb21lKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5zb21lVShtLmRhdGEsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBVKG0sIGYpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IG0uY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfU2V0RGljdC5rZWVwVShtLmRhdGEsIGYpXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGtlZXAobSwgZikge1xuICByZXR1cm4ga2VlcFUobSwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uVShtLCBmKSB7XG4gIHZhciBtYXRjaCA9IEJlbHRfU2V0RGljdC5wYXJ0aXRpb25VKG0uZGF0YSwgZik7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgZGF0YTogbWF0Y2hbMF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgZGF0YTogbWF0Y2hbMV1cbiAgICAgICAgICB9XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihtLCBmKSB7XG4gIHJldHVybiBwYXJ0aXRpb25VKG0sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHNpemUobSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LnNpemUobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gdG9MaXN0KG0pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC50b0xpc3QobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShtKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QudG9BcnJheShtLmRhdGEpO1xufVxuXG5mdW5jdGlvbiBtaW5pbXVtKG0pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5taW5pbXVtKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIG1pblVuZGVmaW5lZChtKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QubWluVW5kZWZpbmVkKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIG1heGltdW0obSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0Lm1heGltdW0obS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWF4VW5kZWZpbmVkKG0pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5tYXhVbmRlZmluZWQobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZ2V0KG0sIGUpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5nZXQobS5kYXRhLCBlLCBtLmNtcCk7XG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZChtLCBlKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuZ2V0VW5kZWZpbmVkKG0uZGF0YSwgZSwgbS5jbXApO1xufVxuXG5mdW5jdGlvbiBnZXRFeG4obSwgZSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LmdldEV4bihtLmRhdGEsIGUsIG0uY21wKTtcbn1cblxuZnVuY3Rpb24gaGFzKG0sIGUpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5oYXMobS5kYXRhLCBlLCBtLmNtcCk7XG59XG5cbmZ1bmN0aW9uIGZyb21Tb3J0ZWRBcnJheVVuc2FmZSh4cywgaWQpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGlkLmNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X1NldERpY3QuZnJvbVNvcnRlZEFycmF5VW5zYWZlKHhzKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXREYXRhKG0pIHtcbiAgcmV0dXJuIG0uZGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0SWQobSkge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gcGFja0lkRGF0YShpZCwgZGF0YSkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogaWQuY21wLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChkKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChkLmRhdGEpO1xufVxuXG52YXIgSW50O1xuXG52YXIgJCRTdHJpbmc7XG5cbnZhciBEaWN0O1xuXG5leHBvcnQge1xuICBJbnQgLFxuICAkJFN0cmluZyAsXG4gIERpY3QgLFxuICBtYWtlICxcbiAgZnJvbUFycmF5ICxcbiAgZnJvbVNvcnRlZEFycmF5VW5zYWZlICxcbiAgaXNFbXB0eSAsXG4gIGhhcyAsXG4gIGFkZCAsXG4gIG1lcmdlTWFueSAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICB1bmlvbiAsXG4gIGludGVyc2VjdCAsXG4gIGRpZmYgLFxuICBzdWJzZXQgLFxuICBjbXAgLFxuICBlcSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIHNvbWVVICxcbiAgc29tZSAsXG4gIGtlZXBVICxcbiAga2VlcCAsXG4gIHBhcnRpdGlvblUgLFxuICBwYXJ0aXRpb24gLFxuICBzaXplICxcbiAgdG9BcnJheSAsXG4gIHRvTGlzdCAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0RXhuICxcbiAgc3BsaXQgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgZ2V0RGF0YSAsXG4gIGdldElkICxcbiAgcGFja0lkRGF0YSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyAkJEFycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9JZCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0lkLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X1NldCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X1NldC5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZGVyaW5nIGZyb20gXCIuL1JlbHVkZV9PcmRlcmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9CYXNlIGZyb20gXCIuL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanNcIjtcblxudmFyIGVtcHR5ID0gQmVsdF9TZXQubWFrZTtcblxuZnVuY3Rpb24gZnJvbUFycmF5KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gQmVsdF9TZXQuZnJvbUFycmF5KHZhbHVlLCBpZCk7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gQmVsdF9TZXQuZnJvbUFycmF5KEJlbHRfTGlzdC50b0FycmF5KHZhbHVlKSwgaWQpO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5oYXMoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZCh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5hZGQoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueSh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5tZXJnZU1hbnkoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5yZW1vdmUoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hbnkodmFsdWUsIHNldCkge1xuICByZXR1cm4gQmVsdF9TZXQucmVtb3ZlTWFueShzZXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKHZhbHVlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmFkZChCZWx0X1NldC5yZW1vdmUoc2V0LCB2YWx1ZSksIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlKHZhbHVlLCBzZXQpIHtcbiAgaWYgKEJlbHRfU2V0LmhhcyhzZXQsIHZhbHVlKSkge1xuICAgIHJldHVybiBCZWx0X1NldC5yZW1vdmUoc2V0LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfU2V0LmFkZChzZXQsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoKGZuLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmZvckVhY2goc2V0LCBmbik7XG59XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGZuLCBhY2MsIHNldCkge1xuICByZXR1cm4gQmVsdF9TZXQucmVkdWNlKHNldCwgYWNjLCBmbik7XG59XG5cbmZ1bmN0aW9uIGZvbGRSaWdodChmbiwgYWNjLCBzZXQpIHtcbiAgcmV0dXJuICQkQXJyYXkuZm9sZF9yaWdodChmbiwgQmVsdF9TZXQudG9BcnJheShzZXQpLCBhY2MpO1xufVxuXG5mdW5jdGlvbiBhbGwocHJlZGljYXRlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmV2ZXJ5KHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gYW55KHByZWRpY2F0ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5zb21lKHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5rZWVwKHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyTm90KHByZWRpY2F0ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5rZWVwKHNldCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFDdXJyeS5fMShwcmVkaWNhdGUsIHgpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihwcmVkaWNhdGUsIHNldCkge1xuICByZXR1cm4gQmVsdF9TZXQucGFydGl0aW9uKHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZhbHVlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmdldChzZXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3JFbHNlKHZhbHVlLCAkJGRlZmF1bHQsIHNldCkge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yRWxzZSgkJGRlZmF1bHQsIEJlbHRfU2V0LmdldChzZXQsIHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHZhbHVlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LnNwbGl0KHNldCwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBXaXRoT3JkKE0pIHtcbiAgdmFyIGNtcCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihNLmNvbXBhcmUsIGEsIGIpKTtcbiAgfTtcbiAgdmFyIENvbXBhcmFibGUgPSBCZWx0X0lkLk1ha2VDb21wYXJhYmxlKHtcbiAgICAgICAgY21wOiBjbXBcbiAgICAgIH0pO1xuICB2YXIgZW1wdHkgPSBCZWx0X1NldC5tYWtlKENvbXBhcmFibGUpO1xuICB2YXIgZnJvbUFycmF5ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIEJlbHRfU2V0LmZyb21BcnJheShwYXJhbSwgQ29tcGFyYWJsZSk7XG4gIH07XG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBCZWx0X1NldC5mcm9tQXJyYXkoQmVsdF9MaXN0LnRvQXJyYXkocGFyYW0pLCBDb21wYXJhYmxlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBDb21wYXJhYmxlOiB7IH0sXG4gICAgICAgICAgZW1wdHk6IGVtcHR5LFxuICAgICAgICAgIGZyb21BcnJheTogZnJvbUFycmF5LFxuICAgICAgICAgIGZyb21MaXN0OiBmcm9tTGlzdCxcbiAgICAgICAgICBpc0VtcHR5OiBCZWx0X1NldC5pc0VtcHR5LFxuICAgICAgICAgIGNvbnRhaW5zOiBjb250YWlucyxcbiAgICAgICAgICBhZGQ6IGFkZCxcbiAgICAgICAgICBtZXJnZU1hbnk6IG1lcmdlTWFueSxcbiAgICAgICAgICByZW1vdmU6IHJlbW92ZSxcbiAgICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxuICAgICAgICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgICAgICAgIHRvZ2dsZTogdG9nZ2xlLFxuICAgICAgICAgIHVuaW9uOiBCZWx0X1NldC51bmlvbixcbiAgICAgICAgICBpbnRlcnNlY3Q6IEJlbHRfU2V0LmludGVyc2VjdCxcbiAgICAgICAgICBkaWZmOiBCZWx0X1NldC5kaWZmLFxuICAgICAgICAgIHN1YnNldDogQmVsdF9TZXQuc3Vic2V0LFxuICAgICAgICAgIGNvbXBhcmU6IEJlbHRfU2V0LmNtcCxcbiAgICAgICAgICBlcTogQmVsdF9TZXQuZXEsXG4gICAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgICBmb2xkTGVmdDogZm9sZExlZnQsXG4gICAgICAgICAgZm9sZFJpZ2h0OiBmb2xkUmlnaHQsXG4gICAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgICAgYW55OiBhbnksXG4gICAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgICAga2VlcDogZmlsdGVyLFxuICAgICAgICAgIGZpbHRlck5vdDogZmlsdGVyTm90LFxuICAgICAgICAgIHJlamVjdDogZmlsdGVyTm90LFxuICAgICAgICAgIHBhcnRpdGlvbjogcGFydGl0aW9uLFxuICAgICAgICAgIGxlbmd0aDogQmVsdF9TZXQuc2l6ZSxcbiAgICAgICAgICB0b0FycmF5OiBCZWx0X1NldC50b0FycmF5LFxuICAgICAgICAgIHRvTGlzdDogQmVsdF9TZXQudG9MaXN0LFxuICAgICAgICAgIG1pbmltdW06IEJlbHRfU2V0Lm1pbmltdW0sXG4gICAgICAgICAgbWF4aW11bTogQmVsdF9TZXQubWF4aW11bSxcbiAgICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgICBnZXRPckVsc2U6IGdldE9yRWxzZSxcbiAgICAgICAgICBzcGxpdDogc3BsaXRcbiAgICAgICAgfTtcbn1cblxudmFyIGlzRW1wdHkgPSBCZWx0X1NldC5pc0VtcHR5O1xuXG52YXIgdW5pb24gPSBCZWx0X1NldC51bmlvbjtcblxudmFyIGludGVyc2VjdCA9IEJlbHRfU2V0LmludGVyc2VjdDtcblxudmFyIGRpZmYgPSBCZWx0X1NldC5kaWZmO1xuXG52YXIgc3Vic2V0ID0gQmVsdF9TZXQuc3Vic2V0O1xuXG52YXIgY29tcGFyZSA9IEJlbHRfU2V0LmNtcDtcblxudmFyIGVxID0gQmVsdF9TZXQuZXE7XG5cbnZhciBrZWVwID0gZmlsdGVyO1xuXG52YXIgcmVqZWN0ID0gZmlsdGVyTm90O1xuXG52YXIgbGVuZ3RoID0gQmVsdF9TZXQuc2l6ZTtcblxudmFyIHRvQXJyYXkgPSBCZWx0X1NldC50b0FycmF5O1xuXG52YXIgdG9MaXN0ID0gQmVsdF9TZXQudG9MaXN0O1xuXG52YXIgbWluaW11bSA9IEJlbHRfU2V0Lm1pbmltdW07XG5cbnZhciBtYXhpbXVtID0gQmVsdF9TZXQubWF4aW11bTtcblxuZXhwb3J0IHtcbiAgZW1wdHkgLFxuICBmcm9tQXJyYXkgLFxuICBmcm9tTGlzdCAsXG4gIGlzRW1wdHkgLFxuICBjb250YWlucyAsXG4gIGFkZCAsXG4gIG1lcmdlTWFueSAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICB1cGRhdGUgLFxuICB0b2dnbGUgLFxuICB1bmlvbiAsXG4gIGludGVyc2VjdCAsXG4gIGRpZmYgLFxuICBzdWJzZXQgLFxuICBjb21wYXJlICxcbiAgZXEgLFxuICBmb3JFYWNoICxcbiAgZm9sZExlZnQgLFxuICBmb2xkUmlnaHQgLFxuICBhbGwgLFxuICBhbnkgLFxuICBmaWx0ZXIgLFxuICBrZWVwICxcbiAgZmlsdGVyTm90ICxcbiAgcmVqZWN0ICxcbiAgcGFydGl0aW9uICxcbiAgbGVuZ3RoICxcbiAgdG9BcnJheSAsXG4gIHRvTGlzdCAsXG4gIG1pbmltdW0gLFxuICBtYXhpbXVtICxcbiAgZ2V0ICxcbiAgZ2V0T3JFbHNlICxcbiAgc3BsaXQgLFxuICBXaXRoT3JkICxcbiAgXG59XG4vKiBSZWx1ZGVfT3JkZXJpbmcgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9pbnQzMiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2ludDMyLmpzXCI7XG5pbXBvcnQgKiBhcyBQZXJ2YXNpdmVzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3BlcnZhc2l2ZXMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfcHJpbWl0aXZlIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfcHJpbWl0aXZlLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgSW50ZXJmYWNlJEJzQmFzdGV0IGZyb20gXCIuL0ludGVyZmFjZS5icy5qc1wiO1xuXG5mdW5jdGlvbiBhcHBlbmQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxIHwgMDtcbn1cblxudmFyIE1hZ21hID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIFNlbWlncm91cCA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBNb25vaWQgPSB7XG4gIGFwcGVuZDogYXBwZW5kLFxuICBlbXB0eTogMFxufTtcblxudmFyIFF1YXNpZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTWVkaWFsX1F1YXNpZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTG9vcCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiAwXG59O1xuXG5mdW5jdGlvbiBpbnZlcnNlKHBhcmFtKSB7XG4gIHJldHVybiBDYW1sX2ludDMyLmltdWwoLTEsIHBhcmFtKTtcbn1cblxudmFyIEdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAsXG4gIGludmVyc2U6IGludmVyc2Vcbn07XG5cbnZhciBBYmVsaWFuX0dyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAsXG4gIGludmVyc2U6IGludmVyc2Vcbn07XG5cbnZhciBBZGRpdGl2ZSA9IHtcbiAgTWFnbWE6IE1hZ21hLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hLFxuICBTZW1pZ3JvdXA6IFNlbWlncm91cCxcbiAgTW9ub2lkOiBNb25vaWQsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAsXG4gIE1lZGlhbF9RdWFzaWdyb3VwOiBNZWRpYWxfUXVhc2lncm91cCxcbiAgTG9vcDogTG9vcCxcbiAgR3JvdXA6IEdyb3VwLFxuICBBYmVsaWFuX0dyb3VwOiBBYmVsaWFuX0dyb3VwXG59O1xuXG52YXIgYXBwZW5kJDEgPSBDYW1sX2ludDMyLmltdWw7XG5cbnZhciBNYWdtYSQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxXG59O1xuXG52YXIgU2VtaWdyb3VwJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDFcbn07XG5cbnZhciBNb25vaWQkMSA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMSxcbiAgZW1wdHk6IDFcbn07XG5cbnZhciBRdWFzaWdyb3VwJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDFcbn07XG5cbnZhciBMb29wJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDEsXG4gIGVtcHR5OiAxXG59O1xuXG52YXIgTXVsdGlwbGljYXRpdmUgPSB7XG4gIE1hZ21hOiBNYWdtYSQxLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hJDEsXG4gIFNlbWlncm91cDogU2VtaWdyb3VwJDEsXG4gIE1vbm9pZDogTW9ub2lkJDEsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAkMSxcbiAgTG9vcDogTG9vcCQxXG59O1xuXG5mdW5jdGlvbiBhcHBlbmQkMihwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gLSBwcmltJDEgfCAwO1xufVxuXG52YXIgTWFnbWEkMiA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMlxufTtcblxudmFyIFF1YXNpZ3JvdXAkMiA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMlxufTtcblxudmFyIFN1YnRyYWN0aXZlID0ge1xuICBNYWdtYTogTWFnbWEkMixcbiAgTWVkaWFsX01hZ21hOiBNYWdtYSQyLFxuICBRdWFzaWdyb3VwOiBRdWFzaWdyb3VwJDJcbn07XG5cbnZhciBhcHBlbmQkMyA9IENhbWxfaW50MzIuZGl2O1xuXG52YXIgTWFnbWEkMyA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkM1xufTtcblxudmFyIERpdmlzaXZlID0ge1xuICBNYWdtYTogTWFnbWEkM1xufTtcblxudmFyIGVxID0gQ2FtbF9vYmouY2FtbF9lcXVhbDtcblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogSW50ZXJmYWNlJEJzQmFzdGV0LnVuc2FmZV9jb21wYXJlXG59O1xuXG52YXIgQm91bmRlZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBJbnRlcmZhY2UkQnNCYXN0ZXQudW5zYWZlX2NvbXBhcmUsXG4gIHRvcDogUGVydmFzaXZlcy5tYXhfaW50LFxuICBib3R0b206IFBlcnZhc2l2ZXMubWluX2ludFxufTtcblxuZnVuY3Rpb24gc2hvdyhwcmltKSB7XG4gIHJldHVybiBTdHJpbmcocHJpbSk7XG59XG5cbnZhciBTaG93ID0ge1xuICBzaG93OiBzaG93XG59O1xuXG5mdW5jdGlvbiBhZGQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxIHwgMDtcbn1cblxudmFyIG11bHRpcGx5ID0gQ2FtbF9pbnQzMi5pbXVsO1xuXG52YXIgU2VtaXJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMVxufTtcblxuZnVuY3Rpb24gc3VidHJhY3QocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC0gcHJpbSQxIHwgMDtcbn1cblxudmFyIFJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMSxcbiAgc3VidHJhY3Q6IHN1YnRyYWN0XG59O1xuXG52YXIgQ29tbXV0YXRpdmVfUmluZyA9IHtcbiAgYWRkOiBhZGQsXG4gIHplcm86IDAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLFxuICBzdWJ0cmFjdDogc3VidHJhY3Rcbn07XG5cbmZ1bmN0aW9uIGRlZ3JlZShhKSB7XG4gIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oUGVydmFzaXZlcy5hYnMoYSksIFBlcnZhc2l2ZXMubWF4X2ludCk7XG59XG5cbnZhciBkaXZpZGUgPSBDYW1sX2ludDMyLmRpdjtcblxudmFyIG1vZHVsbyA9IENhbWxfaW50MzIubW9kXztcblxudmFyIEV1Y2xpZGVhbl9SaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCxcbiAgZGVncmVlOiBkZWdyZWUsXG4gIGRpdmlkZTogZGl2aWRlLFxuICBtb2R1bG86IG1vZHVsb1xufTtcblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYShNYWdtYSk7XG5cbnZhciBBZGRpdGl2ZSQxID0gaW5jbHVkZTtcblxudmFyIGluY2x1ZGUkMSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE1hZ21hJDEpO1xuXG52YXIgTXVsdGlwbGljYXRpdmUkMSA9IGluY2x1ZGUkMTtcblxudmFyIGluY2x1ZGUkMiA9IEluZml4JEJzQmFzdGV0LkVxKEVxKTtcblxudmFyIGluY2x1ZGUkMyA9IEluZml4JEJzQmFzdGV0Lk9yZChPcmQpO1xuXG52YXIgaW5jbHVkZSQ0ID0gSW5maXgkQnNCYXN0ZXQuRXVjbGlkZWFuX1JpbmcoRXVjbGlkZWFuX1JpbmcpO1xuXG52YXIgSW5maXhfJGVxJHBpcGUkZXEgPSBpbmNsdWRlJDIuJGVxJHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJHBpcGUgPSBpbmNsdWRlJDMuJGxlc3MkcGlwZSRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkcGlwZSRncmVhdCA9IGluY2x1ZGUkMy4kcGlwZSRwaXBlJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRlcSA9IGluY2x1ZGUkMy4kbGVzcyRwaXBlJGVxO1xuXG52YXIgSW5maXhfJGdyZWF0JHBpcGUkZXEgPSBpbmNsdWRlJDMuJGdyZWF0JHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kcGlwZSRwbHVzJHBpcGUgPSBpbmNsdWRlJDQuJHBpcGUkcGx1cyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkc3RhciRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJHN0YXIkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJCRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJG5lZyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkc2xhc2gkcGlwZSA9IGluY2x1ZGUkNC4kcGlwZSRzbGFzaCRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkcGVyY2VudCRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJHBlcmNlbnQkcGlwZTtcblxudmFyIEluZml4ID0ge1xuICBBZGRpdGl2ZTogQWRkaXRpdmUkMSxcbiAgTXVsdGlwbGljYXRpdmU6IE11bHRpcGxpY2F0aXZlJDEsXG4gICRlcSRwaXBlJGVxOiBJbmZpeF8kZXEkcGlwZSRlcSxcbiAgJGxlc3MkcGlwZSRwaXBlOiBJbmZpeF8kbGVzcyRwaXBlJHBpcGUsXG4gICRwaXBlJHBpcGUkZ3JlYXQ6IEluZml4XyRwaXBlJHBpcGUkZ3JlYXQsXG4gICRsZXNzJHBpcGUkZXE6IEluZml4XyRsZXNzJHBpcGUkZXEsXG4gICRncmVhdCRwaXBlJGVxOiBJbmZpeF8kZ3JlYXQkcGlwZSRlcSxcbiAgJHBpcGUkcGx1cyRwaXBlOiBJbmZpeF8kcGlwZSRwbHVzJHBpcGUsXG4gICRwaXBlJHN0YXIkcGlwZTogSW5maXhfJHBpcGUkc3RhciRwaXBlLFxuICAkcGlwZSRuZWckcGlwZTogSW5maXhfJHBpcGUkJHBpcGUsXG4gICRwaXBlJHNsYXNoJHBpcGU6IEluZml4XyRwaXBlJHNsYXNoJHBpcGUsXG4gICRwaXBlJHBlcmNlbnQkcGlwZTogSW5maXhfJHBpcGUkcGVyY2VudCRwaXBlXG59O1xuXG5leHBvcnQge1xuICBBZGRpdGl2ZSAsXG4gIE11bHRpcGxpY2F0aXZlICxcbiAgU3VidHJhY3RpdmUgLFxuICBEaXZpc2l2ZSAsXG4gIEVxICxcbiAgT3JkICxcbiAgQm91bmRlZCAsXG4gIFNob3cgLFxuICBTZW1pcmluZyAsXG4gIFJpbmcgLFxuICBDb21tdXRhdGl2ZV9SaW5nICxcbiAgRXVjbGlkZWFuX1JpbmcgLFxuICBJbmZpeCAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5cbmZ1bmN0aW9uIFJpbmdFeHRlbnNpb25zKFIpIHtcbiAgdmFyICRuZWcgPSBSLnN1YnRyYWN0O1xuICB2YXIgbmVnYXRlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoJG5lZywgUi56ZXJvLCB2KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbmVnOiAkbmVnLFxuICAgICAgICAgIG5lZ2F0ZTogbmVnYXRlXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIFJpbmdFeHRlbnNpb25zICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBKc19pbnQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfaW50LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2ludDMyIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfaW50MzIuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9NYXAgZnJvbSBcIi4vUmVsdWRlX01hcC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1NldCBmcm9tIFwiLi9SZWx1ZGVfU2V0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2Zvcm1hdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2Zvcm1hdC5qc1wiO1xuaW1wb3J0ICogYXMgSW50JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0VxIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRXEuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX09yZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19FbnVtIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfUmluZyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1JpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pcmluZyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlyaW5nLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHRvRmxvYXQocHJpbSkge1xuICByZXR1cm4gcHJpbTtcbn1cblxuZnVuY3Rpb24gZnJvbUZsb2F0KHByaW0pIHtcbiAgcmV0dXJuIHByaW0gfCAwO1xufVxuXG5mdW5jdGlvbiBhZGQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxIHwgMDtcbn1cblxuZnVuY3Rpb24gc3VidHJhY3QocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC0gcHJpbSQxIHwgMDtcbn1cblxudmFyIG11bHRpcGx5ID0gQ2FtbF9pbnQzMi5pbXVsO1xuXG52YXIgZGl2aWRlID0gQ2FtbF9pbnQzMi5kaXY7XG5cbnZhciBtb2R1bG8gPSBDYW1sX2ludDMyLm1vZF87XG5cbmZ1bmN0aW9uIGRpdmlkZVdpdGhNb2R1bG8oYSwgYikge1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgQ2FtbF9pbnQzMi5kaXYoYSwgYiksXG4gICAgICAgICAgQ2FtbF9pbnQzMi5tb2RfKGEsIGIpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGRpdmlkZUFzRmxvYXQoYSwgYikge1xuICByZXR1cm4gYSAvIGI7XG59XG5cbmZ1bmN0aW9uIGRlZ3JlZShhKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLmFicyhhKSwgSnNfaW50Lm1heCk7XG59XG5cbmZ1bmN0aW9uIHJhbmdlQXNMaXN0KHN0YXJ0LCBlbmRfKSB7XG4gIGlmIChzdGFydCA+PSBlbmRfKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIHJhbmdlQXNMaXN0KHN0YXJ0ICsgMSB8IDAsIGVuZF8pXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZUFzQXJyYXkoc3RhcnQsIGVuZF8pIHtcbiAgaWYgKHN0YXJ0ID49IGVuZF8pIHtcbiAgICByZXR1cm4gW107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KFtzdGFydF0sIHJhbmdlQXNBcnJheShzdGFydCArIDEgfCAwLCBlbmRfKSk7XG4gIH1cbn1cblxudmFyIGVxID0gSW50JEJzQmFzdGV0LkVxLmVxO1xuXG52YXIgRXEgPSB7XG4gIGVxOiBlcVxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19FcS5FcUV4dGVuc2lvbnMoRXEpO1xuXG52YXIgY29tcGFyZSA9IEludCRCc0Jhc3RldC5PcmQuY29tcGFyZTtcblxudmFyIE9yZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlXG59O1xuXG52YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfT3JkLk9yZEV4dGVuc2lvbnMoT3JkKTtcblxudmFyIE9yZFJpbmdFeHRlbnNpb25zID0gaW5jbHVkZSQxLk9yZFJpbmdFeHRlbnNpb25zO1xuXG52YXIgQm91bmRlZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlLFxuICB0b3A6IEpzX2ludC5tYXgsXG4gIGJvdHRvbTogSnNfaW50Lm1pblxufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQm91bmRlZC5Cb3VuZGVkRXh0ZW5zaW9ucyhCb3VuZGVkKTtcblxuZnVuY3Rpb24gcHJlZChpKSB7XG4gIGlmIChpID4gSnNfaW50Lm1pbikge1xuICAgIHJldHVybiBpIC0gMSB8IDA7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHN1Y2MoaSkge1xuICBpZiAoaSA8IEpzX2ludC5tYXgpIHtcbiAgICByZXR1cm4gaSArIDEgfCAwO1xuICB9XG4gIFxufVxuXG52YXIgRW51bSA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlLFxuICBzdWNjOiBzdWNjLFxuICBwcmVkOiBwcmVkXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5FbnVtRXh0ZW5zaW9ucyhFbnVtKTtcblxudmFyIFNlbWlyaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDFcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1NlbWlyaW5nLlNlbWlyaW5nRXh0ZW5zaW9ucyhTZW1pcmluZyk7XG5cbnZhciBSaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdFxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX1JpbmcuUmluZ0V4dGVuc2lvbnMoUmluZyk7XG5cbnZhciBpbmNsdWRlJDQgPSBDdXJyeS5fMShPcmRSaW5nRXh0ZW5zaW9ucywgUmluZyk7XG5cbnZhciBFdWNsaWRlYW5SaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCxcbiAgZGVncmVlOiBkZWdyZWUsXG4gIGRpdmlkZTogZGl2aWRlLFxuICBtb2R1bG86IG1vZHVsb1xufTtcblxudmFyICQkTWFwID0gUmVsdWRlX01hcC5XaXRoT3JkKE9yZCk7XG5cbnZhciAkJFNldCA9IFJlbHVkZV9TZXQuV2l0aE9yZChPcmQpO1xuXG5mdW5jdGlvbiBzaG93KHByaW0pIHtcbiAgcmV0dXJuIFN0cmluZyhwcmltKTtcbn1cblxudmFyIFNob3cgPSB7XG4gIHNob3c6IHNob3dcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcodikge1xuICB0cnkge1xuICAgIHJldHVybiBDYW1sX2Zvcm1hdC5jYW1sX2ludF9vZl9zdHJpbmcodik7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG52YXIgQWRkaXRpdmVfTWFnbWEgPSBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTWFnbWE7XG5cbnZhciBBZGRpdGl2ZV9NZWRpYWxfTWFnbWEgPSBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTWVkaWFsX01hZ21hO1xuXG52YXIgQWRkaXRpdmVfU2VtaWdyb3VwID0gSW50JEJzQmFzdGV0LkFkZGl0aXZlLlNlbWlncm91cDtcblxudmFyIEFkZGl0aXZlX01vbm9pZCA9IEludCRCc0Jhc3RldC5BZGRpdGl2ZS5Nb25vaWQ7XG5cbnZhciBBZGRpdGl2ZV9RdWFzaWdyb3VwID0gSW50JEJzQmFzdGV0LkFkZGl0aXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBBZGRpdGl2ZV9NZWRpYWxfUXVhc2lncm91cCA9IEludCRCc0Jhc3RldC5BZGRpdGl2ZS5NZWRpYWxfUXVhc2lncm91cDtcblxudmFyIEFkZGl0aXZlX0xvb3AgPSBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTG9vcDtcblxudmFyIEFkZGl0aXZlX0dyb3VwID0gSW50JEJzQmFzdGV0LkFkZGl0aXZlLkdyb3VwO1xuXG52YXIgQWRkaXRpdmVfQWJlbGlhbl9Hcm91cCA9IEludCRCc0Jhc3RldC5BZGRpdGl2ZS5BYmVsaWFuX0dyb3VwO1xuXG52YXIgQWRkaXRpdmUgPSB7XG4gIE1hZ21hOiBBZGRpdGl2ZV9NYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBBZGRpdGl2ZV9NZWRpYWxfTWFnbWEsXG4gIFNlbWlncm91cDogQWRkaXRpdmVfU2VtaWdyb3VwLFxuICBNb25vaWQ6IEFkZGl0aXZlX01vbm9pZCxcbiAgUXVhc2lncm91cDogQWRkaXRpdmVfUXVhc2lncm91cCxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IEFkZGl0aXZlX01lZGlhbF9RdWFzaWdyb3VwLFxuICBMb29wOiBBZGRpdGl2ZV9Mb29wLFxuICBHcm91cDogQWRkaXRpdmVfR3JvdXAsXG4gIEFiZWxpYW5fR3JvdXA6IEFkZGl0aXZlX0FiZWxpYW5fR3JvdXBcbn07XG5cbnZhciBNdWx0aXBsaWNhdGl2ZV9NYWdtYSA9IEludCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5NYWdtYTtcblxudmFyIE11bHRpcGxpY2F0aXZlX01lZGlhbF9NYWdtYSA9IEludCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5NZWRpYWxfTWFnbWE7XG5cbnZhciBNdWx0aXBsaWNhdGl2ZV9TZW1pZ3JvdXAgPSBJbnQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuU2VtaWdyb3VwO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTW9ub2lkID0gSW50JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZDtcblxudmFyIE11bHRpcGxpY2F0aXZlX1F1YXNpZ3JvdXAgPSBJbnQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuUXVhc2lncm91cDtcblxudmFyIE11bHRpcGxpY2F0aXZlX0xvb3AgPSBJbnQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuTG9vcDtcblxudmFyIE11bHRpcGxpY2F0aXZlID0ge1xuICBNYWdtYTogTXVsdGlwbGljYXRpdmVfTWFnbWEsXG4gIE1lZGlhbF9NYWdtYTogTXVsdGlwbGljYXRpdmVfTWVkaWFsX01hZ21hLFxuICBTZW1pZ3JvdXA6IE11bHRpcGxpY2F0aXZlX1NlbWlncm91cCxcbiAgTW9ub2lkOiBNdWx0aXBsaWNhdGl2ZV9Nb25vaWQsXG4gIFF1YXNpZ3JvdXA6IE11bHRpcGxpY2F0aXZlX1F1YXNpZ3JvdXAsXG4gIExvb3A6IE11bHRpcGxpY2F0aXZlX0xvb3Bcbn07XG5cbnZhciBTdWJ0cmFjdGl2ZV9NYWdtYSA9IEludCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5NYWdtYTtcblxudmFyIFN1YnRyYWN0aXZlX01lZGlhbF9NYWdtYSA9IEludCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5NZWRpYWxfTWFnbWE7XG5cbnZhciBTdWJ0cmFjdGl2ZV9RdWFzaWdyb3VwID0gSW50JEJzQmFzdGV0LlN1YnRyYWN0aXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBTdWJ0cmFjdGl2ZSA9IHtcbiAgTWFnbWE6IFN1YnRyYWN0aXZlX01hZ21hLFxuICBNZWRpYWxfTWFnbWE6IFN1YnRyYWN0aXZlX01lZGlhbF9NYWdtYSxcbiAgUXVhc2lncm91cDogU3VidHJhY3RpdmVfUXVhc2lncm91cFxufTtcblxudmFyIERpdmlzaXZlID0ge1xuICBNYWdtYTogSW50JEJzQmFzdGV0LkRpdmlzaXZlLk1hZ21hXG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gUmVsdWRlX0V4dGVuc2lvbnNfRXEuRXFJbmZpeChFcSk7XG5cbnZhciBpbmNsdWRlJDYgPSBSZWx1ZGVfRXh0ZW5zaW9uc19PcmQuT3JkSW5maXgoT3JkKTtcblxudmFyIEluZml4X0FkZGl0aXZlID0gSW50JEJzQmFzdGV0LkluZml4LkFkZGl0aXZlO1xuXG52YXIgSW5maXhfTXVsdGlwbGljYXRpdmUgPSBJbnQkQnNCYXN0ZXQuSW5maXguTXVsdGlwbGljYXRpdmU7XG5cbnZhciBJbmZpeF8kZXEkcGlwZSRlcSA9IEludCRCc0Jhc3RldC5JbmZpeC4kZXEkcGlwZSRlcTtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkcGlwZSA9IEludCRCc0Jhc3RldC5JbmZpeC4kbGVzcyRwaXBlJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwaXBlJGdyZWF0ID0gSW50JEJzQmFzdGV0LkluZml4LiRwaXBlJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGVxID0gSW50JEJzQmFzdGV0LkluZml4LiRsZXNzJHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kZ3JlYXQkcGlwZSRlcSA9IEludCRCc0Jhc3RldC5JbmZpeC4kZ3JlYXQkcGlwZSRlcTtcblxudmFyIEluZml4XyRwaXBlJHBsdXMkcGlwZSA9IEludCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRwbHVzJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzdGFyJHBpcGUgPSBJbnQkQnNCYXN0ZXQuSW5maXguJHBpcGUkc3RhciRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkJHBpcGUgPSBJbnQkQnNCYXN0ZXQuSW5maXguJHBpcGUkbmVnJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzbGFzaCRwaXBlID0gSW50JEJzQmFzdGV0LkluZml4LiRwaXBlJHNsYXNoJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGUgPSBJbnQkQnNCYXN0ZXQuSW5maXguJHBpcGUkcGVyY2VudCRwaXBlO1xuXG52YXIgSW5maXhfRXFFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkVxRXh0ZW5zaW9ucztcblxudmFyIEluZml4XyRwaXBlJGVxJHBpcGUgPSBpbmNsdWRlJDUuJHBpcGUkZXEkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJGJhbmckZXEkcGlwZSA9IGluY2x1ZGUkNS4kcGlwZSRiYW5nJGVxJHBpcGU7XG5cbnZhciBJbmZpeF9PcmRFeHRlbnNpb25zID0gaW5jbHVkZSQ2Lk9yZEV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kcGlwZSRsZXNzJHBpcGUgPSBpbmNsdWRlJDYuJHBpcGUkbGVzcyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkbGVzcyRlcSRwaXBlID0gaW5jbHVkZSQ2LiRwaXBlJGxlc3MkZXEkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJGdyZWF0JHBpcGUgPSBpbmNsdWRlJDYuJHBpcGUkZ3JlYXQkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJGdyZWF0JGVxJHBpcGUgPSBpbmNsdWRlJDYuJHBpcGUkZ3JlYXQkZXEkcGlwZTtcblxudmFyIEluZml4ID0ge1xuICBBZGRpdGl2ZTogSW5maXhfQWRkaXRpdmUsXG4gIE11bHRpcGxpY2F0aXZlOiBJbmZpeF9NdWx0aXBsaWNhdGl2ZSxcbiAgJGVxJHBpcGUkZXE6IEluZml4XyRlcSRwaXBlJGVxLFxuICAkbGVzcyRwaXBlJHBpcGU6IEluZml4XyRsZXNzJHBpcGUkcGlwZSxcbiAgJHBpcGUkcGlwZSRncmVhdDogSW5maXhfJHBpcGUkcGlwZSRncmVhdCxcbiAgJGxlc3MkcGlwZSRlcTogSW5maXhfJGxlc3MkcGlwZSRlcSxcbiAgJGdyZWF0JHBpcGUkZXE6IEluZml4XyRncmVhdCRwaXBlJGVxLFxuICAkcGlwZSRwbHVzJHBpcGU6IEluZml4XyRwaXBlJHBsdXMkcGlwZSxcbiAgJHBpcGUkc3RhciRwaXBlOiBJbmZpeF8kcGlwZSRzdGFyJHBpcGUsXG4gICRwaXBlJG5lZyRwaXBlOiBJbmZpeF8kcGlwZSQkcGlwZSxcbiAgJHBpcGUkc2xhc2gkcGlwZTogSW5maXhfJHBpcGUkc2xhc2gkcGlwZSxcbiAgJHBpcGUkcGVyY2VudCRwaXBlOiBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGUsXG4gIEVxRXh0ZW5zaW9uczogSW5maXhfRXFFeHRlbnNpb25zLFxuICAkcGlwZSRlcSRwaXBlOiBJbmZpeF8kcGlwZSRlcSRwaXBlLFxuICAkcGlwZSRiYW5nJGVxJHBpcGU6IEluZml4XyRwaXBlJGJhbmckZXEkcGlwZSxcbiAgT3JkRXh0ZW5zaW9uczogSW5maXhfT3JkRXh0ZW5zaW9ucyxcbiAgJHBpcGUkbGVzcyRwaXBlOiBJbmZpeF8kcGlwZSRsZXNzJHBpcGUsXG4gICRwaXBlJGxlc3MkZXEkcGlwZTogSW5maXhfJHBpcGUkbGVzcyRlcSRwaXBlLFxuICAkcGlwZSRncmVhdCRwaXBlOiBJbmZpeF8kcGlwZSRncmVhdCRwaXBlLFxuICAkcGlwZSRncmVhdCRlcSRwaXBlOiBJbmZpeF8kcGlwZSRncmVhdCRlcSRwaXBlXG59O1xuXG52YXIgemVybyA9IDA7XG5cbnZhciBvbmUgPSAxO1xuXG52YXIgdG9wID0gSnNfaW50Lm1heDtcblxudmFyIGJvdHRvbSA9IEpzX2ludC5taW47XG5cbnZhciBlcVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZS5lcVdpdGhDb252ZXJzaW9uO1xuXG52YXIgbm90RXEgPSBpbmNsdWRlLm5vdEVxO1xuXG52YXIgZXFJbnZlcnRlZCA9IGluY2x1ZGUuZXFJbnZlcnRlZDtcblxudmFyIEVxSW52ZXJ0ZWQgPSBpbmNsdWRlLkVxSW52ZXJ0ZWQ7XG5cbnZhciBFcUJ5ID0gaW5jbHVkZS5FcUJ5O1xuXG52YXIgY29tcGFyZVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZSQxLmNvbXBhcmVXaXRoQ29udmVyc2lvbjtcblxudmFyIGNvbXBhcmVSZXZlcnNlZCA9IGluY2x1ZGUkMS5jb21wYXJlUmV2ZXJzZWQ7XG5cbnZhciBPcmRSZXZlcnNlZCA9IGluY2x1ZGUkMS5PcmRSZXZlcnNlZDtcblxudmFyIGNvbXBhcmVBc0ludCA9IGluY2x1ZGUkMS5jb21wYXJlQXNJbnQ7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDEubWluO1xuXG52YXIgbWF4ID0gaW5jbHVkZSQxLm1heDtcblxudmFyIGxlc3NUaGFuID0gaW5jbHVkZSQxLmxlc3NUaGFuO1xuXG52YXIgbHQgPSBpbmNsdWRlJDEubHQ7XG5cbnZhciBsZXNzVGhhbk9yRXEgPSBpbmNsdWRlJDEubGVzc1RoYW5PckVxO1xuXG52YXIgbHRlID0gaW5jbHVkZSQxLmx0ZTtcblxudmFyIGdyZWF0ZXJUaGFuID0gaW5jbHVkZSQxLmdyZWF0ZXJUaGFuO1xuXG52YXIgZ3QgPSBpbmNsdWRlJDEuZ3Q7XG5cbnZhciBncmVhdGVyVGhhbk9yRXEgPSBpbmNsdWRlJDEuZ3JlYXRlclRoYW5PckVxO1xuXG52YXIgZ3RlID0gaW5jbHVkZSQxLmd0ZTtcblxudmFyIGNsYW1wID0gaW5jbHVkZSQxLmNsYW1wO1xuXG52YXIgYmV0d2VlbiA9IGluY2x1ZGUkMS5iZXR3ZWVuO1xuXG52YXIgT3JkTmFtZWQgPSBpbmNsdWRlJDEuT3JkTmFtZWQ7XG5cbnZhciBPcmRCeSA9IGluY2x1ZGUkMS5PcmRCeTtcblxudmFyIGZyb21Ub0FzTGlzdCA9IGluY2x1ZGUkMi5mcm9tVG9Bc0xpc3Q7XG5cbnZhciB1cEZyb21Bc0xpc3QgPSBpbmNsdWRlJDIudXBGcm9tQXNMaXN0O1xuXG52YXIgdXBGcm9tSW5jbHVkaW5nQXNMaXN0ID0gaW5jbHVkZSQyLnVwRnJvbUluY2x1ZGluZ0FzTGlzdDtcblxudmFyIGRvd25Gcm9tQXNMaXN0ID0gaW5jbHVkZSQyLmRvd25Gcm9tQXNMaXN0O1xuXG52YXIgZG93bkZyb21JbmNsdWRpbmdBc0xpc3QgPSBpbmNsdWRlJDIuZG93bkZyb21JbmNsdWRpbmdBc0xpc3Q7XG5cbnZhciAkbmVnID0gaW5jbHVkZSQzLiRuZWc7XG5cbnZhciBuZWdhdGUgPSBpbmNsdWRlJDMubmVnYXRlO1xuXG52YXIgYWJzID0gaW5jbHVkZSQ0LmFicztcblxudmFyIHNpZ251bSA9IGluY2x1ZGUkNC5zaWdudW07XG5cbnZhciB0b1N0cmluZyA9IHNob3c7XG5cbmV4cG9ydCB7XG4gIHRvRmxvYXQgLFxuICBmcm9tRmxvYXQgLFxuICB6ZXJvICxcbiAgb25lICxcbiAgYWRkICxcbiAgc3VidHJhY3QgLFxuICBtdWx0aXBseSAsXG4gIGRpdmlkZSAsXG4gIG1vZHVsbyAsXG4gIGRpdmlkZVdpdGhNb2R1bG8gLFxuICBkaXZpZGVBc0Zsb2F0ICxcbiAgdG9wICxcbiAgYm90dG9tICxcbiAgZGVncmVlICxcbiAgcmFuZ2VBc0xpc3QgLFxuICByYW5nZUFzQXJyYXkgLFxuICBlcSAsXG4gIEVxICxcbiAgZXFXaXRoQ29udmVyc2lvbiAsXG4gIG5vdEVxICxcbiAgZXFJbnZlcnRlZCAsXG4gIEVxSW52ZXJ0ZWQgLFxuICBFcUJ5ICxcbiAgY29tcGFyZSAsXG4gIE9yZCAsXG4gIGNvbXBhcmVXaXRoQ29udmVyc2lvbiAsXG4gIGNvbXBhcmVSZXZlcnNlZCAsXG4gIE9yZFJldmVyc2VkICxcbiAgY29tcGFyZUFzSW50ICxcbiAgbWluICxcbiAgbWF4ICxcbiAgbGVzc1RoYW4gLFxuICBsdCAsXG4gIGxlc3NUaGFuT3JFcSAsXG4gIGx0ZSAsXG4gIGdyZWF0ZXJUaGFuICxcbiAgZ3QgLFxuICBncmVhdGVyVGhhbk9yRXEgLFxuICBndGUgLFxuICBjbGFtcCAsXG4gIGJldHdlZW4gLFxuICBPcmRSaW5nRXh0ZW5zaW9ucyAsXG4gIE9yZE5hbWVkICxcbiAgT3JkQnkgLFxuICBCb3VuZGVkICxcbiAgRW51bSAsXG4gIGZyb21Ub0FzTGlzdCAsXG4gIHVwRnJvbUFzTGlzdCAsXG4gIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCAsXG4gIGRvd25Gcm9tQXNMaXN0ICxcbiAgZG93bkZyb21JbmNsdWRpbmdBc0xpc3QgLFxuICBTZW1pcmluZyAsXG4gIFJpbmcgLFxuICAkbmVnICxcbiAgbmVnYXRlICxcbiAgYWJzICxcbiAgc2lnbnVtICxcbiAgRXVjbGlkZWFuUmluZyAsXG4gICQkTWFwICxcbiAgJCRTZXQgLFxuICBzaG93ICxcbiAgdG9TdHJpbmcgLFxuICBTaG93ICxcbiAgZnJvbVN0cmluZyAsXG4gIEFkZGl0aXZlICxcbiAgTXVsdGlwbGljYXRpdmUgLFxuICBTdWJ0cmFjdGl2ZSAsXG4gIERpdmlzaXZlICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5cbmZ1bmN0aW9uIGVxdWFsKHgsIHkpIHtcbiAgcmV0dXJuIHggPT09IHk7XG59XG5cbnZhciBtYXggPSAyMTQ3NDgzNjQ3O1xuXG52YXIgbWluID0gLTIxNDc0ODM2NDg7XG5cbmV4cG9ydCB7XG4gIGVxdWFsICxcbiAgbWF4ICxcbiAgbWluICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0FycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfQXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JbnQgZnJvbSBcIi4uL1JlbHVkZV9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X1NvcnRBcnJheSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X1NvcnRBcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZGVyaW5nIGZyb20gXCIuLi9SZWx1ZGVfT3JkZXJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fQmFzZSBmcm9tIFwiLi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGNvbnMoeCwgeHMpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KFt4XSwgeHMpO1xufVxuXG5mdW5jdGlvbiB1bmNvbnMoeHMpIHtcbiAgaWYgKHhzLmxlbmd0aCAhPT0gMCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIEJlbHRfQXJyYXkuZ2V0RXhuKHhzLCAwKSxcbiAgICAgICAgICAgIEJlbHRfQXJyYXkuc2xpY2VUb0VuZCh4cywgMSlcbiAgICAgICAgICBdO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBhcHBlbmQoeCwgeHMpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KHhzLCBbeF0pO1xufVxuXG52YXIgcmVwZWF0ID0gQmVsdF9BcnJheS5tYWtlO1xuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXgoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfQXJyYXkubWFwV2l0aEluZGV4KHhzLCAoZnVuY3Rpb24gKGksIHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoZiwgeCwgaSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZUluUGxhY2UoeHMpIHtcbiAgQmVsdF9BcnJheS5zaHVmZmxlSW5QbGFjZSh4cyk7XG4gIHJldHVybiB4cztcbn1cblxuZnVuY3Rpb24gbGVuZ3RoKHByaW0pIHtcbiAgcmV0dXJuIHByaW0ubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KGFycikge1xuICByZXR1cm4gYXJyLmxlbmd0aCA9PT0gMDtcbn1cblxuZnVuY3Rpb24gaXNOb3RFbXB0eShhcnIpIHtcbiAgcmV0dXJuIGFyci5sZW5ndGggIT09IDA7XG59XG5cbmZ1bmN0aW9uIGF0KGksIHhzKSB7XG4gIHJldHVybiBCZWx0X0FycmF5LmdldCh4cywgaSk7XG59XG5cbmZ1bmN0aW9uIHNldEF0KGksIHgsIHhzKSB7XG4gIGlmIChCZWx0X0FycmF5LnNldCh4cywgaSwgeCkpIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGhlYWQoYXJyKSB7XG4gIHJldHVybiBCZWx0X0FycmF5LmdldChhcnIsIDApO1xufVxuXG5mdW5jdGlvbiB0YWlsKHhzKSB7XG4gIHZhciBsID0geHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgaWYgKGwgPT09IDEpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHlzID0gQmVsdF9BcnJheS5zbGljZVRvRW5kKHhzLCAxKTtcbiAgaWYgKHlzLmxlbmd0aCAhPT0gMCkge1xuICAgIHJldHVybiB5cztcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gdGFpbE9yRW1wdHkoeHMpIHtcbiAgdmFyIHlzID0gdGFpbCh4cyk7XG4gIGlmICh5cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHlzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0KHhzKSB7XG4gIHZhciBsID0geHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfQXJyYXkuc2xpY2UoeHMsIDAsIGwgLSAxIHwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE9yRW1wdHkoeHMpIHtcbiAgdmFyIGFyciA9IGluaXQoeHMpO1xuICBpZiAoYXJyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYXJyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsYXN0KHhzKSB7XG4gIHZhciBsID0geHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfQXJyYXkuZ2V0KHhzLCBsIC0gMSB8IDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRha2UoaSwgeHMpIHtcbiAgdmFyIGwgPSB4cy5sZW5ndGg7XG4gIHZhciBsZW4gPSBpIDwgMCA/IDAgOiAoXG4gICAgICBsIDwgaSA/IGwgOiBpXG4gICAgKTtcbiAgcmV0dXJuIEJlbHRfQXJyYXkuc2xpY2UoeHMsIDAsIGxlbik7XG59XG5cbmZ1bmN0aW9uIHRha2VFeGFjdGx5KGksIHhzKSB7XG4gIGlmIChpIDwgMCB8fCBpID4geHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9BcnJheS5zbGljZSh4cywgMCwgaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFrZVdoaWxlKGYsIHhzKSB7XG4gIHZhciB4ID0gQmVsdF9BcnJheS5nZXQoeHMsIDApO1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciB4JDEgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpO1xuICBpZiAoIUN1cnJ5Ll8xKGYsIHgkMSkpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHhzJDEgPSB0YWtlV2hpbGUoZiwgdGFpbE9yRW1wdHkoeHMpKTtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KFt4JDFdLCB4cyQxKTtcbn1cblxuZnVuY3Rpb24gZHJvcChpLCB4cykge1xuICB2YXIgbCA9IHhzLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gaSA8IDAgPyAwIDogKFxuICAgICAgbCA8IGkgPyBsIDogaVxuICAgICk7XG4gIHJldHVybiBCZWx0X0FycmF5LnNsaWNlVG9FbmQoeHMsIHN0YXJ0KTtcbn1cblxuZnVuY3Rpb24gZHJvcEV4YWN0bHkoaSwgeHMpIHtcbiAgaWYgKGkgPCAwIHx8IGkgPiB4cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBCZWx0X0FycmF5LnNsaWNlVG9FbmQoeHMsIGkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRyb3BXaGlsZShmLCBfeHMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICB2YXIgeCA9IEJlbHRfQXJyYXkuZ2V0KHhzLCAwKTtcbiAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4geHM7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih4KSkpIHtcbiAgICAgIHJldHVybiB4cztcbiAgICB9XG4gICAgX3hzID0gdGFpbE9yRW1wdHkoeHMpO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X0FycmF5LmtlZXAoeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJXaXRoSW5kZXgoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfQXJyYXkua2VlcFdpdGhJbmRleCh4cywgZik7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck5vdChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gQmVsdF9BcnJheS5rZWVwKHBhcmFtLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFDdXJyeS5fMShmLCBhKTtcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyTm90V2l0aEluZGV4KGYpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X0FycmF5LmtlZXBXaXRoSW5kZXgocGFyYW0sIChmdW5jdGlvbiAoYSwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIUN1cnJ5Ll8yKGYsIGEsIGkpO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBtYXBPcHRpb24oZiwgeHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZExlZnQsIChmdW5jdGlvbiAoYWNjLCBjdXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fQmFzZS5mb2xkKGFjYywgKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoYWNjLCBbdl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShmLCBjdXJyKSk7XG4gICAgICAgICAgICAgIH0pLCBbXSwgeHMpO1xufVxuXG5mdW5jdGlvbiBjYXRPcHRpb24oeHMpIHtcbiAgcmV0dXJuIG1hcE9wdGlvbigoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X0FycmF5LnBhcnRpdGlvbih4cywgZik7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXQoaSwgeHMpIHtcbiAgaWYgKGkgPCAwIHx8IGkgPiB4cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIEJlbHRfQXJyYXkuc2xpY2UoeHMsIDAsIGkpLFxuICAgICAgICAgICAgQmVsdF9BcnJheS5zbGljZVRvRW5kKHhzLCBpKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGVuZFRvQWxsKGRlbGltLCB4cykge1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mbGF0TWFwLCAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsaW0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2XG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzcGVyc2UoZGVsaW0sIHhzKSB7XG4gIHZhciB4ID0gQmVsdF9BcnJheS5nZXQoeHMsIDApO1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciB4cyQxID0gcHJlcGVuZFRvQWxsKGRlbGltLCB0YWlsT3JFbXB0eSh4cykpO1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoW0NhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCldLCB4cyQxKTtcbn1cblxuZnVuY3Rpb24gcmVwbGljYXRlKGksIHhzKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKGFjYywgX2kpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoYWNjLCB4cyk7XG4gICAgICAgICAgICAgIH0pLCBbXSwgUmVsdWRlX0ludC5yYW5nZUFzQXJyYXkoMCwgaSkpO1xufVxuXG5mdW5jdGlvbiB6aXBXaXRoKGYsIHhzLCB5cykge1xuICByZXR1cm4gQmVsdF9BcnJheS56aXBCeSh4cywgeXMsIGYpO1xufVxuXG5mdW5jdGlvbiB6aXBXaXRoSW5kZXgoeHMpIHtcbiAgcmV0dXJuIEJlbHRfQXJyYXkuemlwKHhzLCBSZWx1ZGVfSW50LnJhbmdlQXNBcnJheSgwLCB4cy5sZW5ndGgpKTtcbn1cblxuZnVuY3Rpb24gc29ydFdpdGhJbnQoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfU29ydEFycmF5LnN0YWJsZVNvcnRCeSh4cywgZik7XG59XG5cbmZ1bmN0aW9uIHNvcnRCeShmLCB4cykge1xuICByZXR1cm4gQmVsdF9Tb3J0QXJyYXkuc3RhYmxlU29ydEJ5KHhzLCAoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX09yZGVyaW5nLnRvSW50KEN1cnJ5Ll8yKGYsIGEsIGIpKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBzb3J0KG9yZEEsIHhzKSB7XG4gIHJldHVybiBzb3J0Qnkob3JkQS5jb21wYXJlLCB4cyk7XG59XG5cbmZ1bmN0aW9uIGRpc3RpbmN0QnkoZXEsIHhzKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgICAgICAgICAgIGlmIChDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbnRhaW5zQnksIGVxLCBjdXJyLCBhY2MpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoYWNjLCBbY3Vycl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIFtdLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0QnkoaW5uZXJFcSwgdiwgeHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZExlZnQsIChmdW5jdGlvbiAocGFyYW0sIHgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB5cyA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KHlzLCBbeF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGlubmVyRXEsIHYsIHgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoeXMsIFt4XSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgXSwgeHMpWzFdO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoQnkoaW5uZXJFcSwgeCwgeHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZExlZnQsIChmdW5jdGlvbiAoeXMsIHkpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzIoaW5uZXJFcSwgeCwgeSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB5cztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KHlzLCBbeV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIFtdLCB4cyk7XG59XG5cbmZ1bmN0aW9uIGRpc3RpbmN0KGVxQSwgeHMpIHtcbiAgcmV0dXJuIGRpc3RpbmN0QnkoZXFBLmVxLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0KGVxQSwgeCwgeHMpIHtcbiAgcmV0dXJuIHJlbW92ZUZpcnN0QnkoZXFBLmVxLCB4LCB4cyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVhY2goZXFBLCB4LCB4cykge1xuICByZXR1cm4gcmVtb3ZlRWFjaEJ5KGVxQS5lcSwgeCwgeHMpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlQXQodGFyZ2V0SW5kZXgsIG5ld1gsIHhzKSB7XG4gIHJldHVybiBtYXBXaXRoSW5kZXgoKGZ1bmN0aW9uICh4LCBjdXJyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSB0YXJnZXRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld1g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gc2NhbkxlZnQoZiwgaW5pdCwgeHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZExlZnQsIChmdW5jdGlvbiAocGFyYW0sIGN1cnIpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXh0QWNjID0gQ3VycnkuXzIoZiwgcGFyYW1bMF0sIGN1cnIpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChwYXJhbVsxXSwgW25leHRBY2NdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgaW5pdCxcbiAgICAgICAgICAgICAgICBbXVxuICAgICAgICAgICAgICBdLCB4cylbMV07XG59XG5cbmZ1bmN0aW9uIHNjYW5SaWdodChmLCBpbml0LCB4cykge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkUmlnaHQsIChmdW5jdGlvbiAoY3VyciwgcGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuZXh0QWNjID0gQ3VycnkuXzIoZiwgY3VyciwgcGFyYW1bMF0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChbbmV4dEFjY10sIHBhcmFtWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgaW5pdCxcbiAgICAgICAgICAgICAgICBbXVxuICAgICAgICAgICAgICBdLCB4cylbMV07XG59XG5cbmZ1bmN0aW9uIGluc2VydEF0KHRhcmdldEluZGV4LCBuZXdYLCB4cykge1xuICB2YXIgbWF0Y2ggPSBzcGxpdEF0KHRhcmdldEluZGV4LCB4cyk7XG4gIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KG1hdGNoWzBdLCBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChbbmV3WF0sIG1hdGNoWzFdKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHhzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF0KHRhcmdldEluZGV4LCBmLCB4cykge1xuICByZXR1cm4gbWFwV2l0aEluZGV4KChmdW5jdGlvbiAoeCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IHRhcmdldEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgeCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gc3dhcEF0KGksIGosIHhzKSB7XG4gIHZhciBtYXRjaCA9IEJlbHRfQXJyYXkuZ2V0KHhzLCBpKTtcbiAgdmFyIG1hdGNoJDEgPSBCZWx0X0FycmF5LmdldCh4cywgaik7XG4gIGlmIChtYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHhzO1xuICB9XG4gIGlmIChtYXRjaCQxID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbiAgdmFyIGIgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG1hdGNoJDEpO1xuICB2YXIgYSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obWF0Y2gpO1xuICByZXR1cm4gbWFwV2l0aEluZGV4KChmdW5jdGlvbiAoeCwgaykge1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBrKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGogPT09IGspIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF0KHRhcmdldEluZGV4LCB4cykge1xuICByZXR1cm4gQmVsdF9BcnJheS5rZWVwV2l0aEluZGV4KHhzLCAoZnVuY3Rpb24gKHBhcmFtLCBpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgIT09IHRhcmdldEluZGV4O1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rKHNpemUsIHhzKSB7XG4gIGlmIChzaXplIDwgMSkge1xuICAgIHJldHVybiBbeHNdO1xuICB9IGVsc2UgaWYgKHhzLmxlbmd0aCA8PSBzaXplKSB7XG4gICAgcmV0dXJuIFt4c107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KFt0YWtlKHNpemUsIHhzKV0sIGNodW5rKHNpemUsIGRyb3Aoc2l6ZSwgeHMpKSk7XG4gIH1cbn1cblxudmFyIHByZXBlbmQgPSBjb25zO1xuXG52YXIgbWFrZVdpdGhJbmRleCA9IEJlbHRfQXJyYXkubWFrZUJ5O1xuXG52YXIgcmV2ZXJzZSA9IEJlbHRfQXJyYXkucmV2ZXJzZTtcblxudmFyIHNodWZmbGUgPSBCZWx0X0FycmF5LnNodWZmbGU7XG5cbnZhciBrZWVwID0gZmlsdGVyO1xuXG52YXIga2VlcFdpdGhJbmRleCA9IGZpbHRlcldpdGhJbmRleDtcblxudmFyIHJlamVjdCA9IGZpbHRlck5vdDtcblxudmFyIHJlamVjdFdpdGhJbmRleCA9IGZpbHRlck5vdFdpdGhJbmRleDtcblxudmFyIHppcCA9IEJlbHRfQXJyYXkuemlwO1xuXG52YXIgdW56aXAgPSBCZWx0X0FycmF5LnVuemlwO1xuXG5leHBvcnQge1xuICBjb25zICxcbiAgcHJlcGVuZCAsXG4gIHVuY29ucyAsXG4gIGFwcGVuZCAsXG4gIHJlcGVhdCAsXG4gIG1ha2VXaXRoSW5kZXggLFxuICBtYXBXaXRoSW5kZXggLFxuICByZXZlcnNlICxcbiAgc2h1ZmZsZUluUGxhY2UgLFxuICBzaHVmZmxlICxcbiAgbGVuZ3RoICxcbiAgaXNFbXB0eSAsXG4gIGlzTm90RW1wdHkgLFxuICBhdCAsXG4gIHNldEF0ICxcbiAgaGVhZCAsXG4gIHRhaWwgLFxuICB0YWlsT3JFbXB0eSAsXG4gIGluaXQgLFxuICBpbml0T3JFbXB0eSAsXG4gIGxhc3QgLFxuICB0YWtlICxcbiAgdGFrZUV4YWN0bHkgLFxuICB0YWtlV2hpbGUgLFxuICBkcm9wICxcbiAgZHJvcEV4YWN0bHkgLFxuICBkcm9wV2hpbGUgLFxuICBmaWx0ZXIgLFxuICBrZWVwICxcbiAgZmlsdGVyV2l0aEluZGV4ICxcbiAga2VlcFdpdGhJbmRleCAsXG4gIGZpbHRlck5vdCAsXG4gIHJlamVjdCAsXG4gIGZpbHRlck5vdFdpdGhJbmRleCAsXG4gIHJlamVjdFdpdGhJbmRleCAsXG4gIG1hcE9wdGlvbiAsXG4gIGNhdE9wdGlvbiAsXG4gIHBhcnRpdGlvbiAsXG4gIHNwbGl0QXQgLFxuICBwcmVwZW5kVG9BbGwgLFxuICBpbnRlcnNwZXJzZSAsXG4gIHJlcGxpY2F0ZSAsXG4gIHppcCAsXG4gIHppcFdpdGggLFxuICB6aXBXaXRoSW5kZXggLFxuICB1bnppcCAsXG4gIHNvcnRXaXRoSW50ICxcbiAgc29ydEJ5ICxcbiAgc29ydCAsXG4gIGRpc3RpbmN0QnkgLFxuICByZW1vdmVGaXJzdEJ5ICxcbiAgcmVtb3ZlRWFjaEJ5ICxcbiAgZGlzdGluY3QgLFxuICByZW1vdmVGaXJzdCAsXG4gIHJlbW92ZUVhY2ggLFxuICByZXBsYWNlQXQgLFxuICBzY2FuTGVmdCAsXG4gIHNjYW5SaWdodCAsXG4gIGluc2VydEF0ICxcbiAgdXBkYXRlQXQgLFxuICBzd2FwQXQgLFxuICByZW1vdmVBdCAsXG4gIGNodW5rICxcbiAgXG59XG4vKiBSZWx1ZGVfSW50IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEFycmF5JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9BcnJheS5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9TdHJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0Jhc2UgZnJvbSBcIi4vbGlzdC9SZWx1ZGVfTGlzdF9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfQmFzZSBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfSW5zdGFuY2VzIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzIGZyb20gXCIuL2FycmF5L1JlbHVkZV9BcnJheV9JbnN0YW5jZXMuYnMuanNcIjtcblxuZnVuY3Rpb24gZW1wdHlMYXp5KHBhcmFtKSB7XG4gIHJldHVybiAvKiBbXSAqLzA7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0KGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIHRvTGlzdChhKSB7XG4gIHJldHVybiBhO1xufVxuXG52YXIgbWtTdHJpbmcgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuaW50ZXJjYWxhdGUsIFN0cmluZyRCc0Jhc3RldC5Nb25vaWQpO1xuXG52YXIgTGlzdCA9IHtcbiAgZW1wdHlMYXp5OiBlbXB0eUxhenksXG4gIGxlbmd0aDogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmxlbmd0aCxcbiAgaXNFbXB0eTogUmVsdWRlX0xpc3RfQmFzZS5pc0VtcHR5LFxuICBpc05vdEVtcHR5OiBSZWx1ZGVfTGlzdF9CYXNlLmlzTm90RW1wdHksXG4gIGhlYWQ6IFJlbHVkZV9MaXN0X0Jhc2UuaGVhZCxcbiAgdGFpbDogUmVsdWRlX0xpc3RfQmFzZS50YWlsLFxuICB0YWlsT3JFbXB0eTogUmVsdWRlX0xpc3RfQmFzZS50YWlsT3JFbXB0eSxcbiAgdW5jb25zOiBSZWx1ZGVfTGlzdF9CYXNlLnVuY29ucyxcbiAgcHJlcGVuZDogUmVsdWRlX0xpc3RfQmFzZS5wcmVwZW5kLFxuICBhcHBlbmQ6IFJlbHVkZV9MaXN0X0Jhc2UuYXBwZW5kLFxuICBjb25jYXQ6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5jb25jYXQsXG4gIHJldmVyc2U6IFJlbHVkZV9MaXN0X0Jhc2UucmV2ZXJzZSxcbiAgbWtTdHJpbmc6IG1rU3RyaW5nLFxuICB6aXA6IFJlbHVkZV9MaXN0X0Jhc2UuemlwLFxuICB6aXBXaXRoOiBSZWx1ZGVfTGlzdF9CYXNlLnppcFdpdGgsXG4gIGZyb21BcnJheTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZyb21BcnJheSxcbiAgZnJvbUxpc3Q6IGZyb21MaXN0LFxuICB0b0FycmF5OiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudG9BcnJheSxcbiAgdG9MaXN0OiB0b0xpc3QsXG4gIGVxQnk6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5LFxuICBzaG93Qnk6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5zaG93QnksXG4gIEZ1bmN0b3I6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5GdW5jdG9yLFxuICBBcHBseTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFwcGx5LFxuICBBcHBsaWNhdGl2ZTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFwcGxpY2F0aXZlLFxuICBNb25hZDogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLk1vbmFkLFxuICBGb2xkYWJsZTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlLFxuICBUcmF2ZXJzYWJsZTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlRyYXZlcnNhYmxlLFxuICBFcTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkVxLFxuICBTaG93OiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuU2hvd1xufTtcblxuZnVuY3Rpb24gZW1wdHlMYXp5JDEocGFyYW0pIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoYSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShhKSB7XG4gIHJldHVybiBhO1xufVxuXG52YXIgbWtTdHJpbmckMSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuaW50ZXJjYWxhdGUsIFN0cmluZyRCc0Jhc3RldC5Nb25vaWQpO1xuXG52YXIgJCRBcnJheSA9IHtcbiAgZW1wdHlMYXp5OiBlbXB0eUxhenkkMSxcbiAgbGVuZ3RoOiBSZWx1ZGVfQXJyYXlfQmFzZS5sZW5ndGgsXG4gIGlzRW1wdHk6IFJlbHVkZV9BcnJheV9CYXNlLmlzRW1wdHksXG4gIGlzTm90RW1wdHk6IFJlbHVkZV9BcnJheV9CYXNlLmlzTm90RW1wdHksXG4gIGhlYWQ6IFJlbHVkZV9BcnJheV9CYXNlLmhlYWQsXG4gIHRhaWw6IFJlbHVkZV9BcnJheV9CYXNlLnRhaWwsXG4gIHRhaWxPckVtcHR5OiBSZWx1ZGVfQXJyYXlfQmFzZS50YWlsT3JFbXB0eSxcbiAgdW5jb25zOiBSZWx1ZGVfQXJyYXlfQmFzZS51bmNvbnMsXG4gIHByZXBlbmQ6IFJlbHVkZV9BcnJheV9CYXNlLnByZXBlbmQsXG4gIGFwcGVuZDogUmVsdWRlX0FycmF5X0Jhc2UuYXBwZW5kLFxuICBjb25jYXQ6IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0LFxuICByZXZlcnNlOiBSZWx1ZGVfQXJyYXlfQmFzZS5yZXZlcnNlLFxuICBta1N0cmluZzogbWtTdHJpbmckMSxcbiAgemlwOiBSZWx1ZGVfQXJyYXlfQmFzZS56aXAsXG4gIHppcFdpdGg6IFJlbHVkZV9BcnJheV9CYXNlLnppcFdpdGgsXG4gIGZyb21BcnJheTogZnJvbUFycmF5LFxuICBmcm9tTGlzdDogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mcm9tTGlzdCxcbiAgdG9BcnJheTogdG9BcnJheSxcbiAgdG9MaXN0OiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnRvTGlzdCxcbiAgZXFCeTogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5lcUJ5LFxuICBzaG93Qnk6IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuc2hvd0J5LFxuICBGdW5jdG9yOiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZ1bmN0b3IsXG4gIEFwcGx5OiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkFwcGx5LFxuICBBcHBsaWNhdGl2ZTogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5BcHBsaWNhdGl2ZSxcbiAgTW9uYWQ6IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuTW9uYWQsXG4gIEZvbGRhYmxlOiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlLFxuICBUcmF2ZXJzYWJsZTogQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsXG4gIEVxOiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkVxLFxuICBTaG93OiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLlNob3dcbn07XG5cbmV4cG9ydCB7XG4gIExpc3QgLFxuICAkJEFycmF5ICxcbiAgXG59XG4vKiBta1N0cmluZyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0xpc3QgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9MaXN0LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X09wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X09wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1NlcXVlbmNlIGZyb20gXCIuL1JlbHVkZV9TZXF1ZW5jZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0Jhc2UgZnJvbSBcIi4vYXJyYXkvUmVsdWRlX0FycmF5X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fQmFzZSBmcm9tIFwiLi9vcHRpb24vUmVsdWRlX09wdGlvbl9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcyBmcm9tIFwiLi9vcHRpb24vUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1RyYXZlcnNhYmxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkuYnMuanNcIjtcblxuZnVuY3Rpb24gV2l0aFNlcXVlbmNlKFRhaWxTZXF1ZW5jZSkge1xuICB2YXIgb25lID0gZnVuY3Rpb24gKGhlYWQpIHtcbiAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgQ3VycnkuXzEoVGFpbFNlcXVlbmNlLmVtcHR5TGF6eSwgdW5kZWZpbmVkKVxuICAgICAgICAgIF07XG4gIH07XG4gIHZhciBtYWtlID0gZnVuY3Rpb24gKGhlYWQsIHRhaWxTZXF1ZW5jZSkge1xuICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgICB0YWlsU2VxdWVuY2VcbiAgICAgICAgICBdO1xuICB9O1xuICB2YXIgZnJvbVNlcXVlbmNlID0gZnVuY3Rpb24gKHNlcXVlbmNlKSB7XG4gICAgcmV0dXJuIEJlbHRfT3B0aW9uLm1hcChDdXJyeS5fMShUYWlsU2VxdWVuY2UuaGVhZCwgc2VxdWVuY2UpLCAoZnVuY3Rpb24gKGhlYWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoVGFpbFNlcXVlbmNlLnRhaWxPckVtcHR5LCBzZXF1ZW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSkpO1xuICB9O1xuICB2YXIgdG9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihUYWlsU2VxdWVuY2UuY29uY2F0LCBDdXJyeS5fMShUYWlsU2VxdWVuY2UuTW9uYWQucHVyZSwgcGFyYW1bMF0pLCBwYXJhbVsxXSk7XG4gIH07XG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgaWYgKGxpc3QpIHtcbiAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgbGlzdFswXSxcbiAgICAgICAgICAgICAgQ3VycnkuXzEoVGFpbFNlcXVlbmNlLmZyb21MaXN0LCBsaXN0WzFdKVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciBmcm9tQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5mcm9tQXJyYXksIHBhcmFtWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0FycmF5X0Jhc2UudW5jb25zKGFycmF5KSk7XG4gIH07XG4gIHZhciBjb25zID0gZnVuY3Rpb24gKGhlYWQsIHRhaWxOb25FbXB0eSkge1xuICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgICB0b1NlcXVlbmNlKHRhaWxOb25FbXB0eSlcbiAgICAgICAgICBdO1xuICB9O1xuICB2YXIgdW5jb25zID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICBwYXJhbVsxXVxuICAgICAgICAgIF07XG4gIH07XG4gIHZhciBoZWFkID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHBhcmFtWzBdO1xuICB9O1xuICB2YXIgdGFpbCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBwYXJhbVsxXTtcbiAgfTtcbiAgdmFyIGNvbmNhdCA9IGZ1bmN0aW9uIChub25FbXB0eTEsIG5vbkVtcHR5Mikge1xuICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgIGhlYWQobm9uRW1wdHkxKSxcbiAgICAgICAgICAgIEN1cnJ5Ll8yKFRhaWxTZXF1ZW5jZS5jb25jYXQsIHRhaWwobm9uRW1wdHkxKSwgdG9TZXF1ZW5jZShub25FbXB0eTIpKVxuICAgICAgICAgIF07XG4gIH07XG4gIHZhciBTZW1pZ3JvdXBBbnkgPSB7XG4gICAgYXBwZW5kOiBjb25jYXRcbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkuU2VtaWdyb3VwQW55RXh0ZW5zaW9ucyhTZW1pZ3JvdXBBbnkpO1xuICB2YXIgTWFnbWFBbnkgPSB7XG4gICAgYXBwZW5kOiBjb25jYXRcbiAgfTtcbiAgdmFyIHJlZHVjZUxlZnQgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoVGFpbFNlcXVlbmNlLkZvbGRhYmxlLmZvbGRfbGVmdCwgZiwgcGFyYW1bMF0sIHBhcmFtWzFdKTtcbiAgfTtcbiAgdmFyIGZvbGRMZWZ0ID0gZnVuY3Rpb24gKGYsIGluaXQsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKFRhaWxTZXF1ZW5jZS5Gb2xkYWJsZS5mb2xkX2xlZnQsIGYsIEN1cnJ5Ll8yKGYsIGluaXQsIHBhcmFtWzBdKSwgcGFyYW1bMV0pO1xuICB9O1xuICB2YXIgZm9sZFJpZ2h0ID0gZnVuY3Rpb24gKGYsIGluaXQsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHBhcmFtWzBdLCBDdXJyeS5fMyhUYWlsU2VxdWVuY2UuRm9sZGFibGUuZm9sZF9yaWdodCwgZiwgaW5pdCwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBUYWlsRm9sZE1hcCA9IEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5Gb2xkYWJsZS5Gb2xkX01hcCwgZnVuYXJnKTtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYXBwZW5kLCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFRhaWxGb2xkTWFwLmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZV9Gb2xkX01hcF9BbnkgPSBmdW5jdGlvbiAoZnVuYXJnKSB7XG4gICAgdmFyIFNlcXVlbmNlRm9sZE1hcEFueSA9IEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5Gb2xkYWJsZS5Gb2xkX01hcF9BbnksIGZ1bmFyZyk7XG4gICAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFwcGVuZCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihTZXF1ZW5jZUZvbGRNYXBBbnkuZm9sZF9tYXAsIGYsIHBhcmFtWzFdKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMgPSBmdW5jdGlvbiAoZnVuYXJnKSB7XG4gICAgdmFyIFRhaWxGb2xkTWFwUGx1cyA9IEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5Gb2xkYWJsZS5Gb2xkX01hcF9QbHVzLCBmdW5hcmcpO1xuICAgIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGZ1bmFyZy5hbHQsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSwgQ3VycnkuXzIoVGFpbEZvbGRNYXBQbHVzLmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZSA9IHtcbiAgICBmb2xkX2xlZnQ6IGZvbGRMZWZ0LFxuICAgIGZvbGRfcmlnaHQ6IGZvbGRSaWdodCxcbiAgICBGb2xkX01hcDogRm9sZGFibGVfRm9sZF9NYXAsXG4gICAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgRm9sZF9NYXBfUGx1czogRm9sZGFibGVfRm9sZF9NYXBfUGx1c1xuICB9O1xuICB2YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuRm9sZGFibGVFeHRlbnNpb25zKEZvbGRhYmxlKTtcbiAgdmFyIG1hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSxcbiAgICAgICAgICAgIEN1cnJ5Ll8yKFRhaWxTZXF1ZW5jZS5Nb25hZC5tYXAsIGYsIHBhcmFtWzFdKVxuICAgICAgICAgIF07XG4gIH07XG4gIHZhciBGdW5jdG9yID0ge1xuICAgIG1hcDogbWFwXG4gIH07XG4gIHZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZmYsIGZhKSB7XG4gICAgcmV0dXJuIHJlZHVjZUxlZnQoY29uY2F0LCBtYXAoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcChmLCBmYSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBmZikpO1xuICB9O1xuICB2YXIgQXBwbHkgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5XG4gIH07XG4gIHZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuICB2YXIgQXBwbGljYXRpdmUgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IG9uZVxuICB9O1xuICB2YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlKTtcbiAgdmFyIGJpbmQgPSBmdW5jdGlvbiAobm9uRW1wdHksIGYpIHtcbiAgICByZXR1cm4gcmVkdWNlTGVmdChjb25jYXQsIG1hcChmLCBub25FbXB0eSkpO1xuICB9O1xuICB2YXIgTW9uYWQgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IG9uZSxcbiAgICBmbGF0X21hcDogYmluZFxuICB9O1xuICB2YXIgaW5jbHVkZSQ1ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRFeHRlbnNpb25zKE1vbmFkKTtcbiAgdmFyIG1rU3RyaW5nID0gZnVuY3Rpb24gKGRlbGltLCB4cykge1xuICAgIHJldHVybiB4c1swXSArIChkZWxpbSArIEN1cnJ5Ll8yKFRhaWxTZXF1ZW5jZS5ta1N0cmluZywgZGVsaW0sIHhzWzFdKSk7XG4gIH07XG4gIHZhciByZXZlcnNlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIGhlYWQgPSBwYXJhbVswXTtcbiAgICByZXR1cm4gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yRWxzZUxhenkoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShUYWlsU2VxdWVuY2UuZW1wdHlMYXp5LCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzIoVGFpbFNlcXVlbmNlLmFwcGVuZCwgaGVhZCwgcGFyYW1bMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS51bmNvbnMsIEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5yZXZlcnNlLCBwYXJhbVsxXSkpKSk7XG4gIH07XG4gIHZhciBlcUJ5ID0gZnVuY3Rpb24gKGVxQSwgeHMsIHlzKSB7XG4gICAgaWYgKEN1cnJ5Ll8yKGVxQSwgeHNbMF0sIHlzWzBdKSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKFRhaWxTZXF1ZW5jZS5lcUJ5LCBlcUEsIHhzWzFdLCB5c1sxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChlcUEsIHhzLCB5cykge1xuICAgIHJldHVybiBlcUJ5KGVxQS5lcSwgeHMsIHlzKTtcbiAgfTtcbiAgdmFyIEVxID0gZnVuY3Rpb24gKEVxQSkge1xuICAgIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICAgIHJldHVybiBlcUJ5KEVxQS5lcSwgeHMsIHlzKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcTogZXFcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgc2hvd0J5ID0gZnVuY3Rpb24gKHNob3dYLCB4cykge1xuICAgIHZhciBzdHJpbmdzID0gbWFwKHNob3dYLCB4cyk7XG4gICAgcmV0dXJuIFwiWyFcIiArIChta1N0cmluZyhcIiwgXCIsIHN0cmluZ3MpICsgXCIhXVwiKTtcbiAgfTtcbiAgdmFyIHNob3cgPSBmdW5jdGlvbiAoc2hvd0EsIHhzKSB7XG4gICAgcmV0dXJuIHNob3dCeShzaG93QS5zaG93LCB4cyk7XG4gIH07XG4gIHZhciBTaG93ID0gZnVuY3Rpb24gKFMpIHtcbiAgICB2YXIgc2hvdyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIHNob3dCeShTLnNob3csIHBhcmFtKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93OiBzaG93XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIFdpdGhBcHBsaWNhdGl2ZSA9IGZ1bmN0aW9uIChBKSB7XG4gICAgdmFyIFRhaWxUcmF2ZXJzYWJsZSA9IEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5UcmF2ZXJzYWJsZSwgQSk7XG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoQS5hcHBseSwgQ3VycnkuXzIoQS5tYXAsIG1ha2UsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSksIEN1cnJ5Ll8yKFRhaWxUcmF2ZXJzYWJsZS50cmF2ZXJzZSwgZiwgcGFyYW1bMV0pKTtcbiAgICB9O1xuICAgIHZhciBzZXF1ZW5jZSA9IGZ1bmN0aW9uIChmYSkge1xuICAgICAgcmV0dXJuIHRyYXZlcnNlKChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICAgIH0pLCBmYSk7XG4gICAgfTtcbiAgICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXAgPSBGb2xkYWJsZV9Gb2xkX01hcDtcbiAgICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXBfQW55ID0gRm9sZGFibGVfRm9sZF9NYXBfQW55O1xuICAgIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzID0gRm9sZGFibGVfRm9sZF9NYXBfUGx1cztcbiAgICB2YXIgVHJhdmVyc2FibGUgPSB7XG4gICAgICBtYXA6IG1hcCxcbiAgICAgIGZvbGRfbGVmdDogZm9sZExlZnQsXG4gICAgICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQsXG4gICAgICBGb2xkX01hcDogVHJhdmVyc2FibGVfRm9sZF9NYXAsXG4gICAgICBGb2xkX01hcF9Bbnk6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSxcbiAgICAgIEZvbGRfTWFwX1BsdXM6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMsXG4gICAgICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gICAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgICB9O1xuICAgIFJlbHVkZV9FeHRlbnNpb25zX1RyYXZlcnNhYmxlLlRyYXZlcnNhYmxlRXh0ZW5zaW9ucyhUcmF2ZXJzYWJsZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZSxcbiAgICAgICAgICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgb25lOiBvbmUsXG4gICAgICAgICAgbWFrZTogbWFrZSxcbiAgICAgICAgICBmcm9tU2VxdWVuY2U6IGZyb21TZXF1ZW5jZSxcbiAgICAgICAgICB0b1NlcXVlbmNlOiB0b1NlcXVlbmNlLFxuICAgICAgICAgIGZyb21MaXN0OiBmcm9tTGlzdCxcbiAgICAgICAgICBmcm9tQXJyYXk6IGZyb21BcnJheSxcbiAgICAgICAgICBjb25zOiBjb25zLFxuICAgICAgICAgIHVuY29uczogdW5jb25zLFxuICAgICAgICAgIGhlYWQ6IGhlYWQsXG4gICAgICAgICAgdGFpbDogdGFpbCxcbiAgICAgICAgICBjb25jYXQ6IGNvbmNhdCxcbiAgICAgICAgICBTZW1pZ3JvdXBBbnk6IFNlbWlncm91cEFueSxcbiAgICAgICAgICBjb25jYXROYW1lZDogaW5jbHVkZS5jb25jYXROYW1lZCxcbiAgICAgICAgICBNYWdtYUFueTogTWFnbWFBbnksXG4gICAgICAgICAgcmVkdWNlTGVmdDogcmVkdWNlTGVmdCxcbiAgICAgICAgICBmb2xkTGVmdDogZm9sZExlZnQsXG4gICAgICAgICAgZm9sZFJpZ2h0OiBmb2xkUmlnaHQsXG4gICAgICAgICAgRm9sZGFibGU6IEZvbGRhYmxlLFxuICAgICAgICAgIEJzRm9sZGFibGVFeHRlbnNpb25zOiBpbmNsdWRlJDEuQnNGb2xkYWJsZUV4dGVuc2lvbnMsXG4gICAgICAgICAgYW55OiBpbmNsdWRlJDEuYW55LFxuICAgICAgICAgIGNvbnRhaW5zQnk6IGluY2x1ZGUkMS5jb250YWluc0J5LFxuICAgICAgICAgIGNvbnRhaW5zOiBpbmNsdWRlJDEuY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZkJ5OiBpbmNsdWRlJDEuaW5kZXhPZkJ5LFxuICAgICAgICAgIGluZGV4T2Y6IGluY2x1ZGUkMS5pbmRleE9mLFxuICAgICAgICAgIG1pbkJ5OiBpbmNsdWRlJDEubWluQnksXG4gICAgICAgICAgbWluOiBpbmNsdWRlJDEubWluLFxuICAgICAgICAgIG1heEJ5OiBpbmNsdWRlJDEubWF4QnksXG4gICAgICAgICAgbWF4OiBpbmNsdWRlJDEubWF4LFxuICAgICAgICAgIGNvdW50Qnk6IGluY2x1ZGUkMS5jb3VudEJ5LFxuICAgICAgICAgIGxlbmd0aDogaW5jbHVkZSQxLmxlbmd0aCxcbiAgICAgICAgICBzaXplOiBpbmNsdWRlJDEuc2l6ZSxcbiAgICAgICAgICBjb3VudDogaW5jbHVkZSQxLmNvdW50LFxuICAgICAgICAgIGZvckVhY2g6IGluY2x1ZGUkMS5mb3JFYWNoLFxuICAgICAgICAgIGZvckVhY2hXaXRoSW5kZXg6IGluY2x1ZGUkMS5mb3JFYWNoV2l0aEluZGV4LFxuICAgICAgICAgIGZpbmQ6IGluY2x1ZGUkMS5maW5kLFxuICAgICAgICAgIGZpbmRXaXRoSW5kZXg6IGluY2x1ZGUkMS5maW5kV2l0aEluZGV4LFxuICAgICAgICAgIHRvTGlzdDogaW5jbHVkZSQxLnRvTGlzdCxcbiAgICAgICAgICB0b0FycmF5OiBpbmNsdWRlJDEudG9BcnJheSxcbiAgICAgICAgICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zOiBpbmNsdWRlJDEuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZvbGRNYXA6IGluY2x1ZGUkMS5mb2xkTWFwLFxuICAgICAgICAgIGZvbGRXaXRoTW9ub2lkOiBpbmNsdWRlJDEuZm9sZFdpdGhNb25vaWQsXG4gICAgICAgICAgaW50ZXJjYWxhdGU6IGluY2x1ZGUkMS5pbnRlcmNhbGF0ZSxcbiAgICAgICAgICBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9uczogaW5jbHVkZSQxLkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zOiBpbmNsdWRlJDEuRm9sZGFibGVNb25hZEV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVFcUV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Gb2xkYWJsZUVxRXh0ZW5zaW9ucyxcbiAgICAgICAgICBGb2xkYWJsZU9yZEV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsXG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgICAgICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBpbmNsdWRlJDIuQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGlwTWFwOiBpbmNsdWRlJDIuZmxpcE1hcCxcbiAgICAgICAgICAkJHZvaWQ6IGluY2x1ZGUkMi4kJHZvaWQsXG4gICAgICAgICAgdm9pZFJpZ2h0OiBpbmNsdWRlJDIudm9pZFJpZ2h0LFxuICAgICAgICAgIHZvaWRMZWZ0OiBpbmNsdWRlJDIudm9pZExlZnQsXG4gICAgICAgICAgZmxhcDogaW5jbHVkZSQyLmZsYXAsXG4gICAgICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgICAgICBCc0FwcGx5RXh0ZW5zaW9uczogaW5jbHVkZSQzLkJzQXBwbHlFeHRlbnNpb25zLFxuICAgICAgICAgIGFwcGx5Rmlyc3Q6IGluY2x1ZGUkMy5hcHBseUZpcnN0LFxuICAgICAgICAgIGFwcGx5U2Vjb25kOiBpbmNsdWRlJDMuYXBwbHlTZWNvbmQsXG4gICAgICAgICAgbWFwMjogaW5jbHVkZSQzLm1hcDIsXG4gICAgICAgICAgbWFwMzogaW5jbHVkZSQzLm1hcDMsXG4gICAgICAgICAgbWFwNDogaW5jbHVkZSQzLm1hcDQsXG4gICAgICAgICAgbWFwNTogaW5jbHVkZSQzLm1hcDUsXG4gICAgICAgICAgdHVwbGUyOiBpbmNsdWRlJDMudHVwbGUyLFxuICAgICAgICAgIHR1cGxlMzogaW5jbHVkZSQzLnR1cGxlMyxcbiAgICAgICAgICB0dXBsZTQ6IGluY2x1ZGUkMy50dXBsZTQsXG4gICAgICAgICAgdHVwbGU1OiBpbmNsdWRlJDMudHVwbGU1LFxuICAgICAgICAgIG1hcFR1cGxlMjogaW5jbHVkZSQzLm1hcFR1cGxlMixcbiAgICAgICAgICBtYXBUdXBsZTM6IGluY2x1ZGUkMy5tYXBUdXBsZTMsXG4gICAgICAgICAgbWFwVHVwbGU0OiBpbmNsdWRlJDMubWFwVHVwbGU0LFxuICAgICAgICAgIG1hcFR1cGxlNTogaW5jbHVkZSQzLm1hcFR1cGxlNSxcbiAgICAgICAgICBwdXJlOiBvbmUsXG4gICAgICAgICAgQXBwbGljYXRpdmU6IEFwcGxpY2F0aXZlLFxuICAgICAgICAgIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zOiBpbmNsdWRlJDQuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgbGlmdEExOiBpbmNsdWRlJDQubGlmdEExLFxuICAgICAgICAgIGFsbDogaW5jbHVkZSQ0LmFsbCxcbiAgICAgICAgICBiaW5kOiBiaW5kLFxuICAgICAgICAgIE1vbmFkOiBNb25hZCxcbiAgICAgICAgICBCc01vbmFkRXh0ZW5zaW9uczogaW5jbHVkZSQ1LkJzTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZsYXRNYXA6IGluY2x1ZGUkNS5mbGF0TWFwLFxuICAgICAgICAgIGZsYXR0ZW46IGluY2x1ZGUkNS5mbGF0dGVuLFxuICAgICAgICAgIGNvbXBvc2VLbGVpc2xpOiBpbmNsdWRlJDUuY29tcG9zZUtsZWlzbGksXG4gICAgICAgICAgZmxpcENvbXBvc2VLbGVpc2xpOiBpbmNsdWRlJDUuZmxpcENvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGxpZnRNMTogaW5jbHVkZSQ1LmxpZnRNMSxcbiAgICAgICAgICB3aGVuXzogaW5jbHVkZSQ1LndoZW5fLFxuICAgICAgICAgIHVubGVzczogaW5jbHVkZSQ1LnVubGVzcyxcbiAgICAgICAgICBta1N0cmluZzogbWtTdHJpbmcsXG4gICAgICAgICAgcmV2ZXJzZTogcmV2ZXJzZSxcbiAgICAgICAgICBlcUJ5OiBlcUJ5LFxuICAgICAgICAgIGVxOiBlcSxcbiAgICAgICAgICBFcTogRXEsXG4gICAgICAgICAgc2hvd0J5OiBzaG93QnksXG4gICAgICAgICAgc2hvdzogc2hvdyxcbiAgICAgICAgICBTaG93OiBTaG93LFxuICAgICAgICAgIFdpdGhBcHBsaWNhdGl2ZTogV2l0aEFwcGxpY2F0aXZlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG9uZShoZWFkKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkLFxuICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LmVtcHR5TGF6eSwgdW5kZWZpbmVkKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYWtlKGhlYWQsIHRhaWxTZXF1ZW5jZSkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgaGVhZCxcbiAgICAgICAgICB0YWlsU2VxdWVuY2VcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZnJvbVNlcXVlbmNlKHNlcXVlbmNlKSB7XG4gIHJldHVybiBCZWx0X09wdGlvbi5tYXAoQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuaGVhZCwgc2VxdWVuY2UpLCAoZnVuY3Rpb24gKGhlYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QudGFpbE9yRW1wdHksIHNlcXVlbmNlKVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gdG9TZXF1ZW5jZShwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLkxpc3QuY29uY2F0LCBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Nb25hZC5wdXJlLCBwYXJhbVswXSksIHBhcmFtWzFdKTtcbn1cblxuZnVuY3Rpb24gZnJvbUxpc3QobGlzdCkge1xuICBpZiAobGlzdCkge1xuICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgIGxpc3RbMF0sXG4gICAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5mcm9tTGlzdCwgbGlzdFsxXSlcbiAgICAgICAgICBdO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoYXJyYXkpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5mcm9tQXJyYXksIHBhcmFtWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0pLCBSZWx1ZGVfQXJyYXlfQmFzZS51bmNvbnMoYXJyYXkpKTtcbn1cblxuZnVuY3Rpb24gY29ucyhoZWFkLCB0YWlsTm9uRW1wdHkpIHtcbiAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgdG9TZXF1ZW5jZSh0YWlsTm9uRW1wdHkpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHVuY29ucyhwYXJhbSkge1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgcGFyYW1bMV1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gaGVhZChwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMF07XG59XG5cbmZ1bmN0aW9uIHRhaWwocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzFdO1xufVxuXG5mdW5jdGlvbiBjb25jYXQobm9uRW1wdHkxLCBub25FbXB0eTIpIHtcbiAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgIGhlYWQobm9uRW1wdHkxKSxcbiAgICAgICAgICBDdXJyeS5fMihSZWx1ZGVfU2VxdWVuY2UuTGlzdC5jb25jYXQsIHRhaWwobm9uRW1wdHkxKSwgdG9TZXF1ZW5jZShub25FbXB0eTIpKVxuICAgICAgICBdO1xufVxuXG52YXIgU2VtaWdyb3VwQW55ID0ge1xuICBhcHBlbmQ6IGNvbmNhdFxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkuU2VtaWdyb3VwQW55RXh0ZW5zaW9ucyhTZW1pZ3JvdXBBbnkpO1xuXG52YXIgTWFnbWFBbnkgPSB7XG4gIGFwcGVuZDogY29uY2F0XG59O1xuXG5mdW5jdGlvbiByZWR1Y2VMZWZ0KGYsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Gb2xkYWJsZS5mb2xkX2xlZnQsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGYsIGluaXQsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Gb2xkYWJsZS5mb2xkX2xlZnQsIGYsIEN1cnJ5Ll8yKGYsIGluaXQsIHBhcmFtWzBdKSwgcGFyYW1bMV0pO1xufVxuXG5mdW5jdGlvbiBmb2xkUmlnaHQoZiwgaW5pdCwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHBhcmFtWzBdLCBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Gb2xkYWJsZS5mb2xkX3JpZ2h0LCBmLCBpbml0LCBwYXJhbVsxXSkpO1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcChmdW5hcmcpIHtcbiAgdmFyIFRhaWxGb2xkTWFwID0gQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuRm9sZGFibGUuRm9sZF9NYXAsIGZ1bmFyZyk7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYXBwZW5kLCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFRhaWxGb2xkTWFwLmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcF9BbnkoZnVuYXJnKSB7XG4gIHZhciBTZXF1ZW5jZUZvbGRNYXBBbnkgPSBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Gb2xkYWJsZS5Gb2xkX01hcF9BbnksIGZ1bmFyZyk7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYXBwZW5kLCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFNlcXVlbmNlRm9sZE1hcEFueS5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZGFibGVfRm9sZF9NYXBfUGx1cyhmdW5hcmcpIHtcbiAgdmFyIFRhaWxGb2xkTWFwUGx1cyA9IEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LkZvbGRhYmxlLkZvbGRfTWFwX1BsdXMsIGZ1bmFyZyk7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYWx0LCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFRhaWxGb2xkTWFwUGx1cy5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxudmFyIEZvbGRhYmxlID0ge1xuICBmb2xkX2xlZnQ6IGZvbGRMZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQsXG4gIEZvbGRfTWFwOiBGb2xkYWJsZV9Gb2xkX01hcCxcbiAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5Gb2xkYWJsZUV4dGVuc2lvbnMoRm9sZGFibGUpO1xuXG5mdW5jdGlvbiBtYXAoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSxcbiAgICAgICAgICBDdXJyeS5fMihSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Nb25hZC5tYXAsIGYsIHBhcmFtWzFdKVxuICAgICAgICBdO1xufVxuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbnZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuXG5mdW5jdGlvbiBhcHBseShmZiwgZmEpIHtcbiAgcmV0dXJuIHJlZHVjZUxlZnQoY29uY2F0LCBtYXAoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXAoZiwgZmEpO1xuICAgICAgICAgICAgICAgICAgfSksIGZmKSk7XG59XG5cbnZhciBBcHBseSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseVxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5RXh0ZW5zaW9ucyhBcHBseSk7XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogb25lXG59O1xuXG52YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlKTtcblxuZnVuY3Rpb24gYmluZChub25FbXB0eSwgZikge1xuICByZXR1cm4gcmVkdWNlTGVmdChjb25jYXQsIG1hcChmLCBub25FbXB0eSkpO1xufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IG9uZSxcbiAgZmxhdF9tYXA6IGJpbmRcbn07XG5cbnZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuXG5mdW5jdGlvbiBta1N0cmluZyhkZWxpbSwgeHMpIHtcbiAgcmV0dXJuIHhzWzBdICsgKGRlbGltICsgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLkxpc3QubWtTdHJpbmcsIGRlbGltLCB4c1sxXSkpO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlKHBhcmFtKSB7XG4gIHZhciBoZWFkID0gcGFyYW1bMF07XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlTGF6eSgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LmVtcHR5TGF6eSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLkxpc3QuYXBwZW5kLCBoZWFkLCBwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC51bmNvbnMsIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LnJldmVyc2UsIHBhcmFtWzFdKSkpKTtcbn1cblxuZnVuY3Rpb24gZXFCeShlcUEsIHhzLCB5cykge1xuICBpZiAoQ3VycnkuXzIoZXFBLCB4c1swXSwgeXNbMF0pKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LmVxQnksIGVxQSwgeHNbMV0sIHlzWzFdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoZXFBLCB4cywgeXMpIHtcbiAgcmV0dXJuIGVxQnkoZXFBLmVxLCB4cywgeXMpO1xufVxuXG5mdW5jdGlvbiBFcShFcUEpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIHJldHVybiBlcUJ5KEVxQS5lcSwgeHMsIHlzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd0J5KHNob3dYLCB4cykge1xuICB2YXIgc3RyaW5ncyA9IG1hcChzaG93WCwgeHMpO1xuICByZXR1cm4gXCJbIVwiICsgKG1rU3RyaW5nKFwiLCBcIiwgc3RyaW5ncykgKyBcIiFdXCIpO1xufVxuXG5mdW5jdGlvbiBzaG93KHNob3dBLCB4cykge1xuICByZXR1cm4gc2hvd0J5KHNob3dBLnNob3csIHhzKTtcbn1cblxuZnVuY3Rpb24gU2hvdyhTKSB7XG4gIHZhciBzaG93ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHNob3dCeShTLnNob3csIHBhcmFtKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBzaG93OiBzaG93XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFdpdGhBcHBsaWNhdGl2ZShBKSB7XG4gIHZhciBUYWlsVHJhdmVyc2FibGUgPSBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5UcmF2ZXJzYWJsZSwgQSk7XG4gIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihBLmFwcGx5LCBDdXJyeS5fMihBLm1hcCwgbWFrZSwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pKSwgQ3VycnkuXzIoVGFpbFRyYXZlcnNhYmxlLnRyYXZlcnNlLCBmLCBwYXJhbVsxXSkpO1xuICB9O1xuICB2YXIgc2VxdWVuY2UgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICByZXR1cm4gdHJhdmVyc2UoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICB9O1xuICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXAgPSBGb2xkYWJsZV9Gb2xkX01hcDtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSA9IEZvbGRhYmxlX0ZvbGRfTWFwX0FueTtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMgPSBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzO1xuICB2YXIgVHJhdmVyc2FibGUgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgZm9sZF9sZWZ0OiBmb2xkTGVmdCxcbiAgICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQsXG4gICAgRm9sZF9NYXA6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwLFxuICAgIEZvbGRfTWFwX0FueTogVHJhdmVyc2FibGVfRm9sZF9NYXBfQW55LFxuICAgIEZvbGRfTWFwX1BsdXM6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMsXG4gICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZS5UcmF2ZXJzYWJsZUV4dGVuc2lvbnMoVHJhdmVyc2FibGUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZSxcbiAgICAgICAgICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gICAgICAgICAgc2VxdWVuY2U6IHNlcXVlbmNlXG4gICAgICAgIH07XG59XG5cbnZhciBMaXN0X2NvbmNhdE5hbWVkID0gaW5jbHVkZS5jb25jYXROYW1lZDtcblxudmFyIExpc3RfQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X2FueSA9IGluY2x1ZGUkMS5hbnk7XG5cbnZhciBMaXN0X2NvbnRhaW5zQnkgPSBpbmNsdWRlJDEuY29udGFpbnNCeTtcblxudmFyIExpc3RfY29udGFpbnMgPSBpbmNsdWRlJDEuY29udGFpbnM7XG5cbnZhciBMaXN0X2luZGV4T2ZCeSA9IGluY2x1ZGUkMS5pbmRleE9mQnk7XG5cbnZhciBMaXN0X2luZGV4T2YgPSBpbmNsdWRlJDEuaW5kZXhPZjtcblxudmFyIExpc3RfbWluQnkgPSBpbmNsdWRlJDEubWluQnk7XG5cbnZhciBMaXN0X21pbiA9IGluY2x1ZGUkMS5taW47XG5cbnZhciBMaXN0X21heEJ5ID0gaW5jbHVkZSQxLm1heEJ5O1xuXG52YXIgTGlzdF9tYXggPSBpbmNsdWRlJDEubWF4O1xuXG52YXIgTGlzdF9jb3VudEJ5ID0gaW5jbHVkZSQxLmNvdW50Qnk7XG5cbnZhciBMaXN0X2xlbmd0aCA9IGluY2x1ZGUkMS5sZW5ndGg7XG5cbnZhciBMaXN0X3NpemUgPSBpbmNsdWRlJDEuc2l6ZTtcblxudmFyIExpc3RfY291bnQgPSBpbmNsdWRlJDEuY291bnQ7XG5cbnZhciBMaXN0X2ZvckVhY2ggPSBpbmNsdWRlJDEuZm9yRWFjaDtcblxudmFyIExpc3RfZm9yRWFjaFdpdGhJbmRleCA9IGluY2x1ZGUkMS5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgTGlzdF9maW5kID0gaW5jbHVkZSQxLmZpbmQ7XG5cbnZhciBMaXN0X2ZpbmRXaXRoSW5kZXggPSBpbmNsdWRlJDEuZmluZFdpdGhJbmRleDtcblxudmFyIExpc3RfdG9MaXN0ID0gaW5jbHVkZSQxLnRvTGlzdDtcblxudmFyIExpc3RfdG9BcnJheSA9IGluY2x1ZGUkMS50b0FycmF5O1xuXG52YXIgTGlzdF9Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9mb2xkTWFwID0gaW5jbHVkZSQxLmZvbGRNYXA7XG5cbnZhciBMaXN0X2ZvbGRXaXRoTW9ub2lkID0gaW5jbHVkZSQxLmZvbGRXaXRoTW9ub2lkO1xuXG52YXIgTGlzdF9pbnRlcmNhbGF0ZSA9IGluY2x1ZGUkMS5pbnRlcmNhbGF0ZTtcblxudmFyIExpc3RfRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X0ZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQxLkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9Gb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMS5Gb2xkYWJsZUVxRXh0ZW5zaW9ucztcblxudmFyIExpc3RfRm9sZGFibGVPcmRFeHRlbnNpb25zID0gaW5jbHVkZSQxLkZvbGRhYmxlT3JkRXh0ZW5zaW9ucztcblxudmFyIExpc3RfQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0Z1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9mbGlwTWFwID0gaW5jbHVkZSQyLmZsaXBNYXA7XG5cbnZhciBMaXN0X3ZvaWQgPSBpbmNsdWRlJDIuJCR2b2lkO1xuXG52YXIgTGlzdF92b2lkUmlnaHQgPSBpbmNsdWRlJDIudm9pZFJpZ2h0O1xuXG52YXIgTGlzdF92b2lkTGVmdCA9IGluY2x1ZGUkMi52b2lkTGVmdDtcblxudmFyIExpc3RfZmxhcCA9IGluY2x1ZGUkMi5mbGFwO1xuXG52YXIgTGlzdF9Cc0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkMy5Cc0FwcGx5RXh0ZW5zaW9ucztcblxudmFyIExpc3RfYXBwbHlGaXJzdCA9IGluY2x1ZGUkMy5hcHBseUZpcnN0O1xuXG52YXIgTGlzdF9hcHBseVNlY29uZCA9IGluY2x1ZGUkMy5hcHBseVNlY29uZDtcblxudmFyIExpc3RfbWFwMiA9IGluY2x1ZGUkMy5tYXAyO1xuXG52YXIgTGlzdF9tYXAzID0gaW5jbHVkZSQzLm1hcDM7XG5cbnZhciBMaXN0X21hcDQgPSBpbmNsdWRlJDMubWFwNDtcblxudmFyIExpc3RfbWFwNSA9IGluY2x1ZGUkMy5tYXA1O1xuXG52YXIgTGlzdF90dXBsZTIgPSBpbmNsdWRlJDMudHVwbGUyO1xuXG52YXIgTGlzdF90dXBsZTMgPSBpbmNsdWRlJDMudHVwbGUzO1xuXG52YXIgTGlzdF90dXBsZTQgPSBpbmNsdWRlJDMudHVwbGU0O1xuXG52YXIgTGlzdF90dXBsZTUgPSBpbmNsdWRlJDMudHVwbGU1O1xuXG52YXIgTGlzdF9tYXBUdXBsZTIgPSBpbmNsdWRlJDMubWFwVHVwbGUyO1xuXG52YXIgTGlzdF9tYXBUdXBsZTMgPSBpbmNsdWRlJDMubWFwVHVwbGUzO1xuXG52YXIgTGlzdF9tYXBUdXBsZTQgPSBpbmNsdWRlJDMubWFwVHVwbGU0O1xuXG52YXIgTGlzdF9tYXBUdXBsZTUgPSBpbmNsdWRlJDMubWFwVHVwbGU1O1xuXG52YXIgTGlzdF9Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNC5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIExpc3RfbGlmdEExID0gaW5jbHVkZSQ0LmxpZnRBMTtcblxudmFyIExpc3RfYWxsID0gaW5jbHVkZSQ0LmFsbDtcblxudmFyIExpc3RfQnNNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDUuQnNNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X2ZsYXRNYXAgPSBpbmNsdWRlJDUuZmxhdE1hcDtcblxudmFyIExpc3RfZmxhdHRlbiA9IGluY2x1ZGUkNS5mbGF0dGVuO1xuXG52YXIgTGlzdF9jb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkNS5jb21wb3NlS2xlaXNsaTtcblxudmFyIExpc3RfZmxpcENvbXBvc2VLbGVpc2xpID0gaW5jbHVkZSQ1LmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIExpc3RfbGlmdE0xID0gaW5jbHVkZSQ1LmxpZnRNMTtcblxudmFyIExpc3Rfd2hlbl8gPSBpbmNsdWRlJDUud2hlbl87XG5cbnZhciBMaXN0X3VubGVzcyA9IGluY2x1ZGUkNS51bmxlc3M7XG5cbnZhciBMaXN0ID0ge1xuICBvbmU6IG9uZSxcbiAgbWFrZTogbWFrZSxcbiAgZnJvbVNlcXVlbmNlOiBmcm9tU2VxdWVuY2UsXG4gIHRvU2VxdWVuY2U6IHRvU2VxdWVuY2UsXG4gIGZyb21MaXN0OiBmcm9tTGlzdCxcbiAgZnJvbUFycmF5OiBmcm9tQXJyYXksXG4gIGNvbnM6IGNvbnMsXG4gIHVuY29uczogdW5jb25zLFxuICBoZWFkOiBoZWFkLFxuICB0YWlsOiB0YWlsLFxuICBjb25jYXQ6IGNvbmNhdCxcbiAgU2VtaWdyb3VwQW55OiBTZW1pZ3JvdXBBbnksXG4gIGNvbmNhdE5hbWVkOiBMaXN0X2NvbmNhdE5hbWVkLFxuICBNYWdtYUFueTogTWFnbWFBbnksXG4gIHJlZHVjZUxlZnQ6IHJlZHVjZUxlZnQsXG4gIGZvbGRMZWZ0OiBmb2xkTGVmdCxcbiAgZm9sZFJpZ2h0OiBmb2xkUmlnaHQsXG4gIEZvbGRhYmxlOiBGb2xkYWJsZSxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnM6IExpc3RfQnNGb2xkYWJsZUV4dGVuc2lvbnMsXG4gIGFueTogTGlzdF9hbnksXG4gIGNvbnRhaW5zQnk6IExpc3RfY29udGFpbnNCeSxcbiAgY29udGFpbnM6IExpc3RfY29udGFpbnMsXG4gIGluZGV4T2ZCeTogTGlzdF9pbmRleE9mQnksXG4gIGluZGV4T2Y6IExpc3RfaW5kZXhPZixcbiAgbWluQnk6IExpc3RfbWluQnksXG4gIG1pbjogTGlzdF9taW4sXG4gIG1heEJ5OiBMaXN0X21heEJ5LFxuICBtYXg6IExpc3RfbWF4LFxuICBjb3VudEJ5OiBMaXN0X2NvdW50QnksXG4gIGxlbmd0aDogTGlzdF9sZW5ndGgsXG4gIHNpemU6IExpc3Rfc2l6ZSxcbiAgY291bnQ6IExpc3RfY291bnQsXG4gIGZvckVhY2g6IExpc3RfZm9yRWFjaCxcbiAgZm9yRWFjaFdpdGhJbmRleDogTGlzdF9mb3JFYWNoV2l0aEluZGV4LFxuICBmaW5kOiBMaXN0X2ZpbmQsXG4gIGZpbmRXaXRoSW5kZXg6IExpc3RfZmluZFdpdGhJbmRleCxcbiAgdG9MaXN0OiBMaXN0X3RvTGlzdCxcbiAgdG9BcnJheTogTGlzdF90b0FycmF5LFxuICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM6IExpc3RfRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zLFxuICBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnM6IExpc3RfRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICBmb2xkTWFwOiBMaXN0X2ZvbGRNYXAsXG4gIGZvbGRXaXRoTW9ub2lkOiBMaXN0X2ZvbGRXaXRoTW9ub2lkLFxuICBpbnRlcmNhbGF0ZTogTGlzdF9pbnRlcmNhbGF0ZSxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IExpc3RfRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zOiBMaXN0X0ZvbGRhYmxlTW9uYWRFeHRlbnNpb25zLFxuICBGb2xkYWJsZUVxRXh0ZW5zaW9uczogTGlzdF9Gb2xkYWJsZUVxRXh0ZW5zaW9ucyxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zOiBMaXN0X0ZvbGRhYmxlT3JkRXh0ZW5zaW9ucyxcbiAgbWFwOiBtYXAsXG4gIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gIEJzRnVuY3RvckV4dGVuc2lvbnM6IExpc3RfQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgZmxpcE1hcDogTGlzdF9mbGlwTWFwLFxuICAkJHZvaWQ6IExpc3Rfdm9pZCxcbiAgdm9pZFJpZ2h0OiBMaXN0X3ZvaWRSaWdodCxcbiAgdm9pZExlZnQ6IExpc3Rfdm9pZExlZnQsXG4gIGZsYXA6IExpc3RfZmxhcCxcbiAgYXBwbHk6IGFwcGx5LFxuICBBcHBseTogQXBwbHksXG4gIEJzQXBwbHlFeHRlbnNpb25zOiBMaXN0X0JzQXBwbHlFeHRlbnNpb25zLFxuICBhcHBseUZpcnN0OiBMaXN0X2FwcGx5Rmlyc3QsXG4gIGFwcGx5U2Vjb25kOiBMaXN0X2FwcGx5U2Vjb25kLFxuICBtYXAyOiBMaXN0X21hcDIsXG4gIG1hcDM6IExpc3RfbWFwMyxcbiAgbWFwNDogTGlzdF9tYXA0LFxuICBtYXA1OiBMaXN0X21hcDUsXG4gIHR1cGxlMjogTGlzdF90dXBsZTIsXG4gIHR1cGxlMzogTGlzdF90dXBsZTMsXG4gIHR1cGxlNDogTGlzdF90dXBsZTQsXG4gIHR1cGxlNTogTGlzdF90dXBsZTUsXG4gIG1hcFR1cGxlMjogTGlzdF9tYXBUdXBsZTIsXG4gIG1hcFR1cGxlMzogTGlzdF9tYXBUdXBsZTMsXG4gIG1hcFR1cGxlNDogTGlzdF9tYXBUdXBsZTQsXG4gIG1hcFR1cGxlNTogTGlzdF9tYXBUdXBsZTUsXG4gIHB1cmU6IG9uZSxcbiAgQXBwbGljYXRpdmU6IEFwcGxpY2F0aXZlLFxuICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogTGlzdF9Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyxcbiAgbGlmdEExOiBMaXN0X2xpZnRBMSxcbiAgYWxsOiBMaXN0X2FsbCxcbiAgYmluZDogYmluZCxcbiAgTW9uYWQ6IE1vbmFkLFxuICBCc01vbmFkRXh0ZW5zaW9uczogTGlzdF9Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgZmxhdE1hcDogTGlzdF9mbGF0TWFwLFxuICBmbGF0dGVuOiBMaXN0X2ZsYXR0ZW4sXG4gIGNvbXBvc2VLbGVpc2xpOiBMaXN0X2NvbXBvc2VLbGVpc2xpLFxuICBmbGlwQ29tcG9zZUtsZWlzbGk6IExpc3RfZmxpcENvbXBvc2VLbGVpc2xpLFxuICBsaWZ0TTE6IExpc3RfbGlmdE0xLFxuICB3aGVuXzogTGlzdF93aGVuXyxcbiAgdW5sZXNzOiBMaXN0X3VubGVzcyxcbiAgbWtTdHJpbmc6IG1rU3RyaW5nLFxuICByZXZlcnNlOiByZXZlcnNlLFxuICBlcUJ5OiBlcUJ5LFxuICBlcTogZXEsXG4gIEVxOiBFcSxcbiAgc2hvd0J5OiBzaG93QnksXG4gIHNob3c6IHNob3csXG4gIFNob3c6IFNob3csXG4gIFdpdGhBcHBsaWNhdGl2ZTogV2l0aEFwcGxpY2F0aXZlXG59O1xuXG5mdW5jdGlvbiBvbmUkMShoZWFkKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkLFxuICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LmVtcHR5TGF6eSwgdW5kZWZpbmVkKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYWtlJDEoaGVhZCwgdGFpbFNlcXVlbmNlKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkLFxuICAgICAgICAgIHRhaWxTZXF1ZW5jZVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBmcm9tU2VxdWVuY2UkMShzZXF1ZW5jZSkge1xuICByZXR1cm4gQmVsdF9PcHRpb24ubWFwKEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LmhlYWQsIHNlcXVlbmNlKSwgKGZ1bmN0aW9uIChoZWFkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LnRhaWxPckVtcHR5LCBzZXF1ZW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHRvU2VxdWVuY2UkMShwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuY29uY2F0LCBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5Nb25hZC5wdXJlLCBwYXJhbVswXSksIHBhcmFtWzFdKTtcbn1cblxuZnVuY3Rpb24gZnJvbUxpc3QkMShsaXN0KSB7XG4gIGlmIChsaXN0KSB7XG4gICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgbGlzdFswXSxcbiAgICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LmZyb21MaXN0LCBsaXN0WzFdKVxuICAgICAgICAgIF07XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheSQxKGFycmF5KSB7XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuZnJvbUFycmF5LCBwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9KSwgUmVsdWRlX0FycmF5X0Jhc2UudW5jb25zKGFycmF5KSk7XG59XG5cbmZ1bmN0aW9uIGNvbnMkMShoZWFkLCB0YWlsTm9uRW1wdHkpIHtcbiAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgdG9TZXF1ZW5jZSQxKHRhaWxOb25FbXB0eSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdW5jb25zJDEocGFyYW0pIHtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgIHBhcmFtWzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhlYWQkMShwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMF07XG59XG5cbmZ1bmN0aW9uIHRhaWwkMShwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMV07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdCQxKG5vbkVtcHR5MSwgbm9uRW1wdHkyKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkJDEobm9uRW1wdHkxKSxcbiAgICAgICAgICBDdXJyeS5fMihSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5jb25jYXQsIHRhaWwkMShub25FbXB0eTEpLCB0b1NlcXVlbmNlJDEobm9uRW1wdHkyKSlcbiAgICAgICAgXTtcbn1cblxudmFyIFNlbWlncm91cEFueSQxID0ge1xuICBhcHBlbmQ6IGNvbmNhdCQxXG59O1xuXG52YXIgaW5jbHVkZSQ2ID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55JDEpO1xuXG52YXIgTWFnbWFBbnkkMSA9IHtcbiAgYXBwZW5kOiBjb25jYXQkMVxufTtcblxuZnVuY3Rpb24gcmVkdWNlTGVmdCQxKGYsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5Gb2xkYWJsZS5mb2xkX2xlZnQsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0JDEoZiwgaW5pdCwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LkZvbGRhYmxlLmZvbGRfbGVmdCwgZiwgQ3VycnkuXzIoZiwgaW5pdCwgcGFyYW1bMF0pLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIGZvbGRSaWdodCQxKGYsIGluaXQsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMihmLCBwYXJhbVswXSwgQ3VycnkuXzMoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuRm9sZGFibGUuZm9sZF9yaWdodCwgZiwgaW5pdCwgcGFyYW1bMV0pKTtcbn1cblxuZnVuY3Rpb24gRm9sZGFibGVfRm9sZF9NYXAkMShmdW5hcmcpIHtcbiAgdmFyIFRhaWxGb2xkTWFwID0gQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuRm9sZGFibGUuRm9sZF9NYXAsIGZ1bmFyZyk7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYXBwZW5kLCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFRhaWxGb2xkTWFwLmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcF9BbnkkMShmdW5hcmcpIHtcbiAgdmFyIFNlcXVlbmNlRm9sZE1hcEFueSA9IEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LkZvbGRhYmxlLkZvbGRfTWFwX0FueSwgZnVuYXJnKTtcbiAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGZ1bmFyZy5hcHBlbmQsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSwgQ3VycnkuXzIoU2VxdWVuY2VGb2xkTWFwQW55LmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzJDEoZnVuYXJnKSB7XG4gIHZhciBUYWlsRm9sZE1hcFBsdXMgPSBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5Gb2xkYWJsZS5Gb2xkX01hcF9QbHVzLCBmdW5hcmcpO1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFsdCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihUYWlsRm9sZE1hcFBsdXMuZm9sZF9tYXAsIGYsIHBhcmFtWzFdKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbnZhciBGb2xkYWJsZSQxID0ge1xuICBmb2xkX2xlZnQ6IGZvbGRMZWZ0JDEsXG4gIGZvbGRfcmlnaHQ6IGZvbGRSaWdodCQxLFxuICBGb2xkX01hcDogRm9sZGFibGVfRm9sZF9NYXAkMSxcbiAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnkkMSxcbiAgRm9sZF9NYXBfUGx1czogRm9sZGFibGVfRm9sZF9NYXBfUGx1cyQxXG59O1xuXG52YXIgaW5jbHVkZSQ3ID0gUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuRm9sZGFibGVFeHRlbnNpb25zKEZvbGRhYmxlJDEpO1xuXG5mdW5jdGlvbiBtYXAkMShmLCBwYXJhbSkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLFxuICAgICAgICAgIEN1cnJ5Ll8yKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5Lk1vbmFkLm1hcCwgZiwgcGFyYW1bMV0pXG4gICAgICAgIF07XG59XG5cbnZhciBGdW5jdG9yJDEgPSB7XG4gIG1hcDogbWFwJDFcbn07XG5cbnZhciBpbmNsdWRlJDggPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IkMSk7XG5cbmZ1bmN0aW9uIGFwcGx5JDEoZmYsIGZhKSB7XG4gIHJldHVybiByZWR1Y2VMZWZ0JDEoY29uY2F0JDEsIG1hcCQxKChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFwJDEoZiwgZmEpO1xuICAgICAgICAgICAgICAgICAgfSksIGZmKSk7XG59XG5cbnZhciBBcHBseSQxID0ge1xuICBtYXA6IG1hcCQxLFxuICBhcHBseTogYXBwbHkkMVxufTtcblxudmFyIGluY2x1ZGUkOSA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5RXh0ZW5zaW9ucyhBcHBseSQxKTtcblxudmFyIEFwcGxpY2F0aXZlJDEgPSB7XG4gIG1hcDogbWFwJDEsXG4gIGFwcGx5OiBhcHBseSQxLFxuICBwdXJlOiBvbmUkMVxufTtcblxudmFyIGluY2x1ZGUkMTAgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5BcHBsaWNhdGl2ZUV4dGVuc2lvbnMoQXBwbGljYXRpdmUkMSk7XG5cbmZ1bmN0aW9uIGJpbmQkMShub25FbXB0eSwgZikge1xuICByZXR1cm4gcmVkdWNlTGVmdCQxKGNvbmNhdCQxLCBtYXAkMShmLCBub25FbXB0eSkpO1xufVxuXG52YXIgTW9uYWQkMSA9IHtcbiAgbWFwOiBtYXAkMSxcbiAgYXBwbHk6IGFwcGx5JDEsXG4gIHB1cmU6IG9uZSQxLFxuICBmbGF0X21hcDogYmluZCQxXG59O1xuXG52YXIgaW5jbHVkZSQxMSA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkRXh0ZW5zaW9ucyhNb25hZCQxKTtcblxuZnVuY3Rpb24gbWtTdHJpbmckMShkZWxpbSwgeHMpIHtcbiAgcmV0dXJuIHhzWzBdICsgKGRlbGltICsgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkubWtTdHJpbmcsIGRlbGltLCB4c1sxXSkpO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlJDEocGFyYW0pIHtcbiAgdmFyIGhlYWQgPSBwYXJhbVswXTtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2VMYXp5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuZW1wdHlMYXp5LCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMihSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5hcHBlbmQsIGhlYWQsIHBhcmFtWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LnVuY29ucywgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkucmV2ZXJzZSwgcGFyYW1bMV0pKSkpO1xufVxuXG5mdW5jdGlvbiBlcUJ5JDEoZXFBLCB4cywgeXMpIHtcbiAgaWYgKEN1cnJ5Ll8yKGVxQSwgeHNbMF0sIHlzWzBdKSkge1xuICAgIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5lcUJ5LCBlcUEsIHhzWzFdLCB5c1sxXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxJDEoZXFBLCB4cywgeXMpIHtcbiAgcmV0dXJuIGVxQnkkMShlcUEuZXEsIHhzLCB5cyk7XG59XG5cbmZ1bmN0aW9uIEVxJDEoRXFBKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICByZXR1cm4gZXFCeSQxKEVxQS5lcSwgeHMsIHlzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd0J5JDEoc2hvd1gsIHhzKSB7XG4gIHZhciBzdHJpbmdzID0gbWFwJDEoc2hvd1gsIHhzKTtcbiAgcmV0dXJuIFwiWyFcIiArIChta1N0cmluZyQxKFwiLCBcIiwgc3RyaW5ncykgKyBcIiFdXCIpO1xufVxuXG5mdW5jdGlvbiBzaG93JDEoc2hvd0EsIHhzKSB7XG4gIHJldHVybiBzaG93QnkkMShzaG93QS5zaG93LCB4cyk7XG59XG5cbmZ1bmN0aW9uIFNob3ckMShTKSB7XG4gIHZhciBzaG93ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHNob3dCeSQxKFMuc2hvdywgcGFyYW0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3dcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gV2l0aEFwcGxpY2F0aXZlJDEoQSkge1xuICB2YXIgVGFpbFRyYXZlcnNhYmxlID0gQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuVHJhdmVyc2FibGUsIEEpO1xuICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5hcHBseSwgQ3VycnkuXzIoQS5tYXAsIG1ha2UkMSwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pKSwgQ3VycnkuXzIoVGFpbFRyYXZlcnNhYmxlLnRyYXZlcnNlLCBmLCBwYXJhbVsxXSkpO1xuICB9O1xuICB2YXIgc2VxdWVuY2UgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICByZXR1cm4gdHJhdmVyc2UoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICB9O1xuICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXAgPSBGb2xkYWJsZV9Gb2xkX01hcCQxO1xuICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXBfQW55ID0gRm9sZGFibGVfRm9sZF9NYXBfQW55JDE7XG4gIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzID0gRm9sZGFibGVfRm9sZF9NYXBfUGx1cyQxO1xuICB2YXIgVHJhdmVyc2FibGUgPSB7XG4gICAgbWFwOiBtYXAkMSxcbiAgICBmb2xkX2xlZnQ6IGZvbGRMZWZ0JDEsXG4gICAgZm9sZF9yaWdodDogZm9sZFJpZ2h0JDEsXG4gICAgRm9sZF9NYXA6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwLFxuICAgIEZvbGRfTWFwX0FueTogVHJhdmVyc2FibGVfRm9sZF9NYXBfQW55LFxuICAgIEZvbGRfTWFwX1BsdXM6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMsXG4gICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZS5UcmF2ZXJzYWJsZUV4dGVuc2lvbnMoVHJhdmVyc2FibGUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZSxcbiAgICAgICAgICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gICAgICAgICAgc2VxdWVuY2U6IHNlcXVlbmNlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHRvTm9uRW1wdHlMaXN0KHBhcmFtKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICBCZWx0X0xpc3QuZnJvbUFycmF5KHBhcmFtWzFdKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBmcm9tTm9uRW1wdHlMaXN0KHBhcmFtKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICBCZWx0X0xpc3QudG9BcnJheShwYXJhbVsxXSlcbiAgICAgICAgXTtcbn1cblxudmFyIEFycmF5X2NvbmNhdE5hbWVkID0gaW5jbHVkZSQ2LmNvbmNhdE5hbWVkO1xuXG52YXIgQXJyYXlfQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9hbnkgPSBpbmNsdWRlJDcuYW55O1xuXG52YXIgQXJyYXlfY29udGFpbnNCeSA9IGluY2x1ZGUkNy5jb250YWluc0J5O1xuXG52YXIgQXJyYXlfY29udGFpbnMgPSBpbmNsdWRlJDcuY29udGFpbnM7XG5cbnZhciBBcnJheV9pbmRleE9mQnkgPSBpbmNsdWRlJDcuaW5kZXhPZkJ5O1xuXG52YXIgQXJyYXlfaW5kZXhPZiA9IGluY2x1ZGUkNy5pbmRleE9mO1xuXG52YXIgQXJyYXlfbWluQnkgPSBpbmNsdWRlJDcubWluQnk7XG5cbnZhciBBcnJheV9taW4gPSBpbmNsdWRlJDcubWluO1xuXG52YXIgQXJyYXlfbWF4QnkgPSBpbmNsdWRlJDcubWF4Qnk7XG5cbnZhciBBcnJheV9tYXggPSBpbmNsdWRlJDcubWF4O1xuXG52YXIgQXJyYXlfY291bnRCeSA9IGluY2x1ZGUkNy5jb3VudEJ5O1xuXG52YXIgQXJyYXlfbGVuZ3RoID0gaW5jbHVkZSQ3Lmxlbmd0aDtcblxudmFyIEFycmF5X3NpemUgPSBpbmNsdWRlJDcuc2l6ZTtcblxudmFyIEFycmF5X2NvdW50ID0gaW5jbHVkZSQ3LmNvdW50O1xuXG52YXIgQXJyYXlfZm9yRWFjaCA9IGluY2x1ZGUkNy5mb3JFYWNoO1xuXG52YXIgQXJyYXlfZm9yRWFjaFdpdGhJbmRleCA9IGluY2x1ZGUkNy5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgQXJyYXlfZmluZCA9IGluY2x1ZGUkNy5maW5kO1xuXG52YXIgQXJyYXlfZmluZFdpdGhJbmRleCA9IGluY2x1ZGUkNy5maW5kV2l0aEluZGV4O1xuXG52YXIgQXJyYXlfdG9MaXN0ID0gaW5jbHVkZSQ3LnRvTGlzdDtcblxudmFyIEFycmF5X3RvQXJyYXkgPSBpbmNsdWRlJDcudG9BcnJheTtcblxudmFyIEFycmF5X0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfZm9sZE1hcCA9IGluY2x1ZGUkNy5mb2xkTWFwO1xuXG52YXIgQXJyYXlfZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDcuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBBcnJheV9pbnRlcmNhbGF0ZSA9IGluY2x1ZGUkNy5pbnRlcmNhbGF0ZTtcblxudmFyIEFycmF5X0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQ3LkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9Gb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucztcblxudmFyIEFycmF5X0ZvbGRhYmxlT3JkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9Cc0Z1bmN0b3JFeHRlbnNpb25zID0gaW5jbHVkZSQ4LkJzRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9mbGlwTWFwID0gaW5jbHVkZSQ4LmZsaXBNYXA7XG5cbnZhciBBcnJheV92b2lkID0gaW5jbHVkZSQ4LiQkdm9pZDtcblxudmFyIEFycmF5X3ZvaWRSaWdodCA9IGluY2x1ZGUkOC52b2lkUmlnaHQ7XG5cbnZhciBBcnJheV92b2lkTGVmdCA9IGluY2x1ZGUkOC52b2lkTGVmdDtcblxudmFyIEFycmF5X2ZsYXAgPSBpbmNsdWRlJDguZmxhcDtcblxudmFyIEFycmF5X0JzQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQ5LkJzQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfYXBwbHlGaXJzdCA9IGluY2x1ZGUkOS5hcHBseUZpcnN0O1xuXG52YXIgQXJyYXlfYXBwbHlTZWNvbmQgPSBpbmNsdWRlJDkuYXBwbHlTZWNvbmQ7XG5cbnZhciBBcnJheV9tYXAyID0gaW5jbHVkZSQ5Lm1hcDI7XG5cbnZhciBBcnJheV9tYXAzID0gaW5jbHVkZSQ5Lm1hcDM7XG5cbnZhciBBcnJheV9tYXA0ID0gaW5jbHVkZSQ5Lm1hcDQ7XG5cbnZhciBBcnJheV9tYXA1ID0gaW5jbHVkZSQ5Lm1hcDU7XG5cbnZhciBBcnJheV90dXBsZTIgPSBpbmNsdWRlJDkudHVwbGUyO1xuXG52YXIgQXJyYXlfdHVwbGUzID0gaW5jbHVkZSQ5LnR1cGxlMztcblxudmFyIEFycmF5X3R1cGxlNCA9IGluY2x1ZGUkOS50dXBsZTQ7XG5cbnZhciBBcnJheV90dXBsZTUgPSBpbmNsdWRlJDkudHVwbGU1O1xuXG52YXIgQXJyYXlfbWFwVHVwbGUyID0gaW5jbHVkZSQ5Lm1hcFR1cGxlMjtcblxudmFyIEFycmF5X21hcFR1cGxlMyA9IGluY2x1ZGUkOS5tYXBUdXBsZTM7XG5cbnZhciBBcnJheV9tYXBUdXBsZTQgPSBpbmNsdWRlJDkubWFwVHVwbGU0O1xuXG52YXIgQXJyYXlfbWFwVHVwbGU1ID0gaW5jbHVkZSQ5Lm1hcFR1cGxlNTtcblxudmFyIEFycmF5X0JzQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQxMC5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEFycmF5X2xpZnRBMSA9IGluY2x1ZGUkMTAubGlmdEExO1xuXG52YXIgQXJyYXlfYWxsID0gaW5jbHVkZSQxMC5hbGw7XG5cbnZhciBBcnJheV9Cc01vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMTEuQnNNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9mbGF0TWFwID0gaW5jbHVkZSQxMS5mbGF0TWFwO1xuXG52YXIgQXJyYXlfZmxhdHRlbiA9IGluY2x1ZGUkMTEuZmxhdHRlbjtcblxudmFyIEFycmF5X2NvbXBvc2VLbGVpc2xpID0gaW5jbHVkZSQxMS5jb21wb3NlS2xlaXNsaTtcblxudmFyIEFycmF5X2ZsaXBDb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkMTEuZmxpcENvbXBvc2VLbGVpc2xpO1xuXG52YXIgQXJyYXlfbGlmdE0xID0gaW5jbHVkZSQxMS5saWZ0TTE7XG5cbnZhciBBcnJheV93aGVuXyA9IGluY2x1ZGUkMTEud2hlbl87XG5cbnZhciBBcnJheV91bmxlc3MgPSBpbmNsdWRlJDExLnVubGVzcztcblxudmFyICQkQXJyYXkgPSB7XG4gIG9uZTogb25lJDEsXG4gIG1ha2U6IG1ha2UkMSxcbiAgZnJvbVNlcXVlbmNlOiBmcm9tU2VxdWVuY2UkMSxcbiAgdG9TZXF1ZW5jZTogdG9TZXF1ZW5jZSQxLFxuICBmcm9tTGlzdDogZnJvbUxpc3QkMSxcbiAgZnJvbUFycmF5OiBmcm9tQXJyYXkkMSxcbiAgY29uczogY29ucyQxLFxuICB1bmNvbnM6IHVuY29ucyQxLFxuICBoZWFkOiBoZWFkJDEsXG4gIHRhaWw6IHRhaWwkMSxcbiAgY29uY2F0OiBjb25jYXQkMSxcbiAgU2VtaWdyb3VwQW55OiBTZW1pZ3JvdXBBbnkkMSxcbiAgY29uY2F0TmFtZWQ6IEFycmF5X2NvbmNhdE5hbWVkLFxuICBNYWdtYUFueTogTWFnbWFBbnkkMSxcbiAgcmVkdWNlTGVmdDogcmVkdWNlTGVmdCQxLFxuICBmb2xkTGVmdDogZm9sZExlZnQkMSxcbiAgZm9sZFJpZ2h0OiBmb2xkUmlnaHQkMSxcbiAgRm9sZGFibGU6IEZvbGRhYmxlJDEsXG4gIEJzRm9sZGFibGVFeHRlbnNpb25zOiBBcnJheV9Cc0ZvbGRhYmxlRXh0ZW5zaW9ucyxcbiAgYW55OiBBcnJheV9hbnksXG4gIGNvbnRhaW5zQnk6IEFycmF5X2NvbnRhaW5zQnksXG4gIGNvbnRhaW5zOiBBcnJheV9jb250YWlucyxcbiAgaW5kZXhPZkJ5OiBBcnJheV9pbmRleE9mQnksXG4gIGluZGV4T2Y6IEFycmF5X2luZGV4T2YsXG4gIG1pbkJ5OiBBcnJheV9taW5CeSxcbiAgbWluOiBBcnJheV9taW4sXG4gIG1heEJ5OiBBcnJheV9tYXhCeSxcbiAgbWF4OiBBcnJheV9tYXgsXG4gIGNvdW50Qnk6IEFycmF5X2NvdW50QnksXG4gIGxlbmd0aDogQXJyYXlfbGVuZ3RoLFxuICBzaXplOiBBcnJheV9zaXplLFxuICBjb3VudDogQXJyYXlfY291bnQsXG4gIGZvckVhY2g6IEFycmF5X2ZvckVhY2gsXG4gIGZvckVhY2hXaXRoSW5kZXg6IEFycmF5X2ZvckVhY2hXaXRoSW5kZXgsXG4gIGZpbmQ6IEFycmF5X2ZpbmQsXG4gIGZpbmRXaXRoSW5kZXg6IEFycmF5X2ZpbmRXaXRoSW5kZXgsXG4gIHRvTGlzdDogQXJyYXlfdG9MaXN0LFxuICB0b0FycmF5OiBBcnJheV90b0FycmF5LFxuICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM6IEFycmF5X0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyxcbiAgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zOiBBcnJheV9Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMsXG4gIGZvbGRNYXA6IEFycmF5X2ZvbGRNYXAsXG4gIGZvbGRXaXRoTW9ub2lkOiBBcnJheV9mb2xkV2l0aE1vbm9pZCxcbiAgaW50ZXJjYWxhdGU6IEFycmF5X2ludGVyY2FsYXRlLFxuICBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9uczogQXJyYXlfRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zOiBBcnJheV9Gb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyxcbiAgRm9sZGFibGVFcUV4dGVuc2lvbnM6IEFycmF5X0ZvbGRhYmxlRXFFeHRlbnNpb25zLFxuICBGb2xkYWJsZU9yZEV4dGVuc2lvbnM6IEFycmF5X0ZvbGRhYmxlT3JkRXh0ZW5zaW9ucyxcbiAgbWFwOiBtYXAkMSxcbiAgRnVuY3RvcjogRnVuY3RvciQxLFxuICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBBcnJheV9Cc0Z1bmN0b3JFeHRlbnNpb25zLFxuICBmbGlwTWFwOiBBcnJheV9mbGlwTWFwLFxuICAkJHZvaWQ6IEFycmF5X3ZvaWQsXG4gIHZvaWRSaWdodDogQXJyYXlfdm9pZFJpZ2h0LFxuICB2b2lkTGVmdDogQXJyYXlfdm9pZExlZnQsXG4gIGZsYXA6IEFycmF5X2ZsYXAsXG4gIGFwcGx5OiBhcHBseSQxLFxuICBBcHBseTogQXBwbHkkMSxcbiAgQnNBcHBseUV4dGVuc2lvbnM6IEFycmF5X0JzQXBwbHlFeHRlbnNpb25zLFxuICBhcHBseUZpcnN0OiBBcnJheV9hcHBseUZpcnN0LFxuICBhcHBseVNlY29uZDogQXJyYXlfYXBwbHlTZWNvbmQsXG4gIG1hcDI6IEFycmF5X21hcDIsXG4gIG1hcDM6IEFycmF5X21hcDMsXG4gIG1hcDQ6IEFycmF5X21hcDQsXG4gIG1hcDU6IEFycmF5X21hcDUsXG4gIHR1cGxlMjogQXJyYXlfdHVwbGUyLFxuICB0dXBsZTM6IEFycmF5X3R1cGxlMyxcbiAgdHVwbGU0OiBBcnJheV90dXBsZTQsXG4gIHR1cGxlNTogQXJyYXlfdHVwbGU1LFxuICBtYXBUdXBsZTI6IEFycmF5X21hcFR1cGxlMixcbiAgbWFwVHVwbGUzOiBBcnJheV9tYXBUdXBsZTMsXG4gIG1hcFR1cGxlNDogQXJyYXlfbWFwVHVwbGU0LFxuICBtYXBUdXBsZTU6IEFycmF5X21hcFR1cGxlNSxcbiAgcHVyZTogb25lJDEsXG4gIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSQxLFxuICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogQXJyYXlfQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gIGxpZnRBMTogQXJyYXlfbGlmdEExLFxuICBhbGw6IEFycmF5X2FsbCxcbiAgYmluZDogYmluZCQxLFxuICBNb25hZDogTW9uYWQkMSxcbiAgQnNNb25hZEV4dGVuc2lvbnM6IEFycmF5X0JzTW9uYWRFeHRlbnNpb25zLFxuICBmbGF0TWFwOiBBcnJheV9mbGF0TWFwLFxuICBmbGF0dGVuOiBBcnJheV9mbGF0dGVuLFxuICBjb21wb3NlS2xlaXNsaTogQXJyYXlfY29tcG9zZUtsZWlzbGksXG4gIGZsaXBDb21wb3NlS2xlaXNsaTogQXJyYXlfZmxpcENvbXBvc2VLbGVpc2xpLFxuICBsaWZ0TTE6IEFycmF5X2xpZnRNMSxcbiAgd2hlbl86IEFycmF5X3doZW5fLFxuICB1bmxlc3M6IEFycmF5X3VubGVzcyxcbiAgbWtTdHJpbmc6IG1rU3RyaW5nJDEsXG4gIHJldmVyc2U6IHJldmVyc2UkMSxcbiAgZXFCeTogZXFCeSQxLFxuICBlcTogZXEkMSxcbiAgRXE6IEVxJDEsXG4gIHNob3dCeTogc2hvd0J5JDEsXG4gIHNob3c6IHNob3ckMSxcbiAgU2hvdzogU2hvdyQxLFxuICBXaXRoQXBwbGljYXRpdmU6IFdpdGhBcHBsaWNhdGl2ZSQxLFxuICB0b05vbkVtcHR5TGlzdDogdG9Ob25FbXB0eUxpc3QsXG4gIGZyb21Ob25FbXB0eUxpc3Q6IGZyb21Ob25FbXB0eUxpc3Rcbn07XG5cbmV4cG9ydCB7XG4gIFdpdGhTZXF1ZW5jZSAsXG4gIExpc3QgLFxuICAkJEFycmF5ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgSW5maXgkQnNCYXN0ZXQgZnJvbSBcIi4vSW5maXguYnMuanNcIjtcbmltcG9ydCAqIGFzIE9wdGlvbiRCc0Jhc3RldCBmcm9tIFwiLi9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIEZ1bmN0aW9uJEJzQmFzdGV0IGZyb20gXCIuL0Z1bmN0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG5mdW5jdGlvbiByZXN1bHQoZiwgZywgYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZywgYVswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGFbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIE1hZ21hKFQsIE0pIHtcbiAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoIWIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKCFiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE0uYXBwZW5kLCBhWzBdLCBiWzBdKV0pO1xuICAgIH1cbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthWzBdXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1lZGlhbF9NYWdtYShULCBNKSB7XG4gIHZhciBhcHBlbmQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKCFiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgICAgXG4gICAgfSBlbHNlIGlmICghYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihNLmFwcGVuZCwgYVswXSwgYlswXSldKTtcbiAgICB9XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYVswXV0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTZW1pZ3JvdXAoVCwgUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmICghYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAoIWIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoUy5hcHBlbmQsIGFbMF0sIGJbMF0pXSk7XG4gICAgfVxuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2FbMF1dKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYXBwZW5kOiBhcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRnVuY3RvcihUKSB7XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGJpbWFwKGYsIGcsIGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGcsIGFbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gIH1cbn1cblxudmFyIEJpZnVuY3RvciA9IHtcbiAgYmltYXA6IGJpbWFwXG59O1xuXG5mdW5jdGlvbiBBcHBseShUKSB7XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChmLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2ZbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1hcChmWzBdLCBhKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgYXBwbHk6IGFwcGx5XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFwcGxpY2F0aXZlKFQpIHtcbiAgdmFyIG1hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZiwgYVswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBhcHBseSA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgaWYgKGYudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZlswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFwKGZbMF0sIGEpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHB1cmUgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgICAgIHB1cmU6IHB1cmVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTW9uYWQoVCkge1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoZi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtmWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXAoZlswXSwgYSk7XG4gICAgfVxuICB9O1xuICB2YXIgcHVyZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2FdKTtcbiAgfTtcbiAgdmFyIGZsYXRfbWFwID0gZnVuY3Rpb24gKGEsIGYpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShmLCBhWzBdKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgICAgIHB1cmU6IHB1cmUsXG4gICAgICAgICAgZmxhdF9tYXA6IGZsYXRfbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFsdChUKSB7XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgYWx0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgYWx0OiBhbHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRXh0ZW5kKFQpIHtcbiAgdmFyIG1hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZiwgYVswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBleHRlbmQgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGEpXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGV4dGVuZDogZXh0ZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNob3coT2ssICQkRXJyb3IpIHtcbiAgdmFyIHNob3cgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gcmVzdWx0KE9rLnNob3csICQkRXJyb3Iuc2hvdywgcGFyYW0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3dcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRXEoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoJCRFcnJvci5lcSwgYVswXSwgYlswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoT2suZXEsIGFbMF0sIGJbMF0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gT3JkKE9rLCAkJEVycm9yKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKCQkRXJyb3IuZXEsIGFbMF0sIGJbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE9rLmVxLCBhWzBdLCBiWzBdKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGVxOiBlcVxuICB9O1xuICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKCQkRXJyb3IuY29tcGFyZSwgYVswXSwgYlswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihPay5jb21wYXJlLCBhWzBdLCBiWzBdKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGluY2x1ZGUuZXEsXG4gICAgICAgICAgY29tcGFyZTogY29tcGFyZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCb3VuZGVkKE9rLCAkJEVycm9yKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKCQkRXJyb3IuZXEsIGFbMF0sIGJbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE9rLmVxLCBhWzBdLCBiWzBdKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGVxOiBlcVxuICB9O1xuICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKCQkRXJyb3IuY29tcGFyZSwgYVswXSwgYlswXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihPay5jb21wYXJlLCBhWzBdLCBiWzBdKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlX2VxID0gaW5jbHVkZS5lcTtcbiAgdmFyIHRvcCA9IC8qIE9rICovQmxvY2suX18oMCwgW09rLnRvcF0pO1xuICB2YXIgYm90dG9tID0gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbJCRFcnJvci5ib3R0b21dKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogaW5jbHVkZV9lcSxcbiAgICAgICAgICBjb21wYXJlOiBjb21wYXJlLFxuICAgICAgICAgIHRvcDogdG9wLFxuICAgICAgICAgIGJvdHRvbTogYm90dG9tXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFF1YXNpcmVmbGV4aXZlX0VxKE9rLCAkJEVycm9yKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFF1YXNpcmVmbGV4aXZlX09yZChPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBlcTogZXFcbiAgfTtcbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBpbmNsdWRlLmVxLFxuICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gSm9pbl9TZW1pbGF0dGljZShPaywgJCRFcnJvcikge1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBqb2luOiBqb2luXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1lZXRfU2VtaWxhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLm1lZXQsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLm1lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1lZXQ6IG1lZXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQm91bmRlZF9Kb2luX1NlbWlsYXR0aWNlKE9rLCAkJEVycm9yKSB7XG4gIHZhciBqb2luID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5qb2luLCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2EkcHJpbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLmpvaW4sIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBqb2luOiBqb2luXG4gIH07XG4gIHZhciBib3R0b20gPSAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIGpvaW46IGluY2x1ZGUuam9pbixcbiAgICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCb3VuZGVkX01lZXRfU2VtaWxhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLm1lZXQsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLm1lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBtZWV0OiBtZWV0XG4gIH07XG4gIHZhciB0b3AgPSAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay50b3BdKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtZWV0OiBpbmNsdWRlLm1lZXQsXG4gICAgICAgICAgdG9wOiB0b3BcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTGF0dGljZShPaywgJCRFcnJvcikge1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSB7XG4gICAgam9pbjogam9pblxuICB9O1xuICB2YXIgbWVldCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKCFhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtiWzBdXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2subWVldCwgYVswXSwgYlswXSldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3IubWVldCwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2EkcHJpbWVdKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSB7XG4gICAgbWVldDogbWVldFxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGpvaW46IGluY2x1ZGUuam9pbixcbiAgICAgICAgICBtZWV0OiBpbmNsdWRlJDEubWVldFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCb3VuZGVkX0xhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLmpvaW4sIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYSRwcmltZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2suam9pbiwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIGJvdHRvbSA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gIHZhciBpbmNsdWRlX2pvaW4gPSBpbmNsdWRlLmpvaW47XG4gIHZhciBtZWV0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoIWEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2JbMF1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5tZWV0LCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IHtcbiAgICBtZWV0OiBtZWV0XG4gIH07XG4gIHZhciB0b3AgPSAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay50b3BdKTtcbiAgdmFyIGluY2x1ZGVfbWVldCA9IGluY2x1ZGUkMS5tZWV0O1xuICByZXR1cm4ge1xuICAgICAgICAgIGpvaW46IGluY2x1ZGVfam9pbixcbiAgICAgICAgICBib3R0b206IGJvdHRvbSxcbiAgICAgICAgICBtZWV0OiBpbmNsdWRlX21lZXQsXG4gICAgICAgICAgdG9wOiB0b3BcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRGlzdHJpYnV0aXZlX0xhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLmpvaW4sIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYSRwcmltZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2suam9pbiwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIHBhcnRpYWxfYXJnID0ge1xuICAgIG1lZXQ6IE9rLm1lZXRcbiAgfTtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnLm1lZXQsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLm1lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0ge1xuICAgIG1lZXQ6IG1lZXRcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBqb2luOiBpbmNsdWRlLmpvaW4sXG4gICAgICAgICAgbWVldDogaW5jbHVkZSQxLm1lZXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQm91bmRlZF9EaXN0cmlidXRpdmVfTGF0dGljZShPaywgJCRFcnJvcikge1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSB7XG4gICAgam9pbjogam9pblxuICB9O1xuICB2YXIgYm90dG9tID0gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbJCRFcnJvci5ib3R0b21dKTtcbiAgdmFyIGluY2x1ZGVfam9pbiA9IGluY2x1ZGUuam9pbjtcbiAgdmFyIHBhcnRpYWxfYXJnX21lZXQgPSBPay5tZWV0O1xuICB2YXIgcGFydGlhbF9hcmdfdG9wID0gT2sudG9wO1xuICB2YXIgbWVldCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKCFhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtiWzBdXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIocGFydGlhbF9hcmdfbWVldCwgYVswXSwgYlswXSldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3IubWVldCwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2EkcHJpbWVdKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSB7XG4gICAgbWVldDogbWVldFxuICB9O1xuICB2YXIgdG9wID0gLyogT2sgKi9CbG9jay5fXygwLCBbcGFydGlhbF9hcmdfdG9wXSk7XG4gIHZhciBpbmNsdWRlX21lZXQgPSBpbmNsdWRlJDEubWVldDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBqb2luOiBpbmNsdWRlX2pvaW4sXG4gICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgbWVldDogaW5jbHVkZV9tZWV0LFxuICAgICAgICAgIHRvcDogdG9wXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEhleXRpbmdfQWxnZWJyYShPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBlcTogZXFcbiAgfTtcbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZV9lcSA9IGluY2x1ZGUuZXE7XG4gIHZhciBFcnJvcl9qb2luID0gJCRFcnJvci5qb2luO1xuICB2YXIgRXJyb3JfYm90dG9tID0gJCRFcnJvci5ib3R0b207XG4gIHZhciBFcnJvcl9tZWV0ID0gJCRFcnJvci5tZWV0O1xuICB2YXIgRXJyb3JfdG9wID0gJCRFcnJvci50b3A7XG4gIHZhciBqb2luID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5qb2luLCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2EkcHJpbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLmpvaW4sIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIGJvdHRvbSA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gIHZhciBpbmNsdWRlX2pvaW4gPSBpbmNsdWRlJDEuam9pbjtcbiAgdmFyIHBhcnRpYWxfYXJnX21lZXQgPSBPay5tZWV0O1xuICB2YXIgcGFydGlhbF9hcmdfdG9wID0gT2sudG9wO1xuICB2YXIgbWVldCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKCFhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtiWzBdXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIocGFydGlhbF9hcmdfbWVldCwgYVswXSwgYlswXSldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKEVycm9yX21lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0ge1xuICAgIG1lZXQ6IG1lZXRcbiAgfTtcbiAgdmFyIHRvcCA9IC8qIE9rICovQmxvY2suX18oMCwgW3BhcnRpYWxfYXJnX3RvcF0pO1xuICB2YXIgaW5jbHVkZV9tZWV0ID0gaW5jbHVkZSQyLm1lZXQ7XG4gIHZhciBpbmNsdWRlX2pvaW4kMSA9IGluY2x1ZGVfam9pbjtcbiAgdmFyIGluY2x1ZGVfYm90dG9tID0gYm90dG9tO1xuICB2YXIgaW5jbHVkZV9tZWV0JDEgPSBpbmNsdWRlX21lZXQ7XG4gIHZhciBpbmNsdWRlX3RvcCA9IHRvcDtcbiAgdmFyIGpvaW4kMSA9IGluY2x1ZGVfam9pbiQxO1xuICB2YXIgbm90ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUsICQkRXJyb3IudG9wKSkge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbT2suYm90dG9tXSk7XG4gICAgICB9IGVsc2UgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSwgJCRFcnJvci5ib3R0b20pKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay50b3BdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSQxID0gYVswXTtcbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lJDEsIE9rLnRvcCkpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICAgIH0gZWxzZSBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lJDEsIE9rLmJvdHRvbSkpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLnRvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH07XG4gIHZhciBpbXBsaWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoam9pbiQxLCBub3QoYSksIGIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBpbmNsdWRlX2VxLFxuICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmUsXG4gICAgICAgICAgam9pbjogam9pbiQxLFxuICAgICAgICAgIGJvdHRvbTogaW5jbHVkZV9ib3R0b20sXG4gICAgICAgICAgbWVldDogaW5jbHVkZV9tZWV0JDEsXG4gICAgICAgICAgdG9wOiBpbmNsdWRlX3RvcCxcbiAgICAgICAgICBub3Q6IG5vdCxcbiAgICAgICAgICBpbXBsaWVzOiBpbXBsaWVzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEludm9sdXRpdmVfSGV5dGluZ19BbGdlYnJhKE9rLCAkJEVycm9yKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGVxOiBlcVxuICB9O1xuICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlX2VxID0gaW5jbHVkZS5lcTtcbiAgdmFyIHBhcnRpYWxfYXJnX2pvaW4gPSBPay5qb2luO1xuICB2YXIgcGFydGlhbF9hcmdfYm90dG9tID0gT2suYm90dG9tO1xuICB2YXIgcGFydGlhbF9hcmdfbWVldCA9IE9rLm1lZXQ7XG4gIHZhciBwYXJ0aWFsX2FyZ190b3AgPSBPay50b3A7XG4gIHZhciBFcnJvcl9qb2luID0gJCRFcnJvci5qb2luO1xuICB2YXIgRXJyb3JfYm90dG9tID0gJCRFcnJvci5ib3R0b207XG4gIHZhciBFcnJvcl9tZWV0ID0gJCRFcnJvci5tZWV0O1xuICB2YXIgRXJyb3JfdG9wID0gJCRFcnJvci50b3A7XG4gIHZhciBqb2luID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5qb2luLCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2EkcHJpbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnX2pvaW4sIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIGJvdHRvbSA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gIHZhciBpbmNsdWRlX2pvaW4gPSBpbmNsdWRlJDEuam9pbjtcbiAgdmFyIHBhcnRpYWxfYXJnX21lZXQkMSA9IHBhcnRpYWxfYXJnX21lZXQ7XG4gIHZhciBwYXJ0aWFsX2FyZ190b3AkMSA9IHBhcnRpYWxfYXJnX3RvcDtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnX21lZXQkMSwgYVswXSwgYlswXSldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKEVycm9yX21lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0ge1xuICAgIG1lZXQ6IG1lZXRcbiAgfTtcbiAgdmFyIHRvcCA9IC8qIE9rICovQmxvY2suX18oMCwgW3BhcnRpYWxfYXJnX3RvcCQxXSk7XG4gIHZhciBpbmNsdWRlX21lZXQgPSBpbmNsdWRlJDIubWVldDtcbiAgdmFyIGluY2x1ZGVfam9pbiQxID0gaW5jbHVkZV9qb2luO1xuICB2YXIgaW5jbHVkZV9ib3R0b20gPSBib3R0b207XG4gIHZhciBpbmNsdWRlX21lZXQkMSA9IGluY2x1ZGVfbWVldDtcbiAgdmFyIGluY2x1ZGVfdG9wID0gdG9wO1xuICB2YXIgam9pbiQxID0gaW5jbHVkZV9qb2luJDE7XG4gIHZhciBub3QgPSBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSwgJCRFcnJvci50b3ApKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay5ib3R0b21dKTtcbiAgICAgIH0gZWxzZSBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lLCAkJEVycm9yLmJvdHRvbSkpIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW09rLnRvcF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lJDEgPSBhWzBdO1xuICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUkMSwgT2sudG9wKSkge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gICAgfSBlbHNlIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUkMSwgT2suYm90dG9tKSkge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IudG9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfTtcbiAgdmFyIGltcGxpZXMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihqb2luJDEsIG5vdChhKSwgYik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGluY2x1ZGVfZXEsXG4gICAgICAgICAgY29tcGFyZTogY29tcGFyZSxcbiAgICAgICAgICBqb2luOiBqb2luJDEsXG4gICAgICAgICAgYm90dG9tOiBpbmNsdWRlX2JvdHRvbSxcbiAgICAgICAgICBtZWV0OiBpbmNsdWRlX21lZXQkMSxcbiAgICAgICAgICB0b3A6IGluY2x1ZGVfdG9wLFxuICAgICAgICAgIG5vdDogbm90LFxuICAgICAgICAgIGltcGxpZXM6IGltcGxpZXNcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQm9vbGVhbl9BbGdlYnJhKE9rLCAkJEVycm9yKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGVxOiBlcVxuICB9O1xuICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlX2VxID0gaW5jbHVkZS5lcTtcbiAgdmFyIHBhcnRpYWxfYXJnX2pvaW4gPSBPay5qb2luO1xuICB2YXIgcGFydGlhbF9hcmdfYm90dG9tID0gT2suYm90dG9tO1xuICB2YXIgcGFydGlhbF9hcmdfbWVldCA9IE9rLm1lZXQ7XG4gIHZhciBwYXJ0aWFsX2FyZ190b3AgPSBPay50b3A7XG4gIHZhciBFcnJvcl9qb2luID0gJCRFcnJvci5qb2luO1xuICB2YXIgRXJyb3JfYm90dG9tID0gJCRFcnJvci5ib3R0b207XG4gIHZhciBFcnJvcl9tZWV0ID0gJCRFcnJvci5tZWV0O1xuICB2YXIgRXJyb3JfdG9wID0gJCRFcnJvci50b3A7XG4gIHZhciBqb2luID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5qb2luLCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2EkcHJpbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnX2pvaW4sIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIGJvdHRvbSA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gIHZhciBpbmNsdWRlX2pvaW4gPSBpbmNsdWRlJDEuam9pbjtcbiAgdmFyIHBhcnRpYWxfYXJnX21lZXQkMSA9IHBhcnRpYWxfYXJnX21lZXQ7XG4gIHZhciBwYXJ0aWFsX2FyZ190b3AkMSA9IHBhcnRpYWxfYXJnX3RvcDtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnX21lZXQkMSwgYVswXSwgYlswXSldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKEVycm9yX21lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0ge1xuICAgIG1lZXQ6IG1lZXRcbiAgfTtcbiAgdmFyIHRvcCA9IC8qIE9rICovQmxvY2suX18oMCwgW3BhcnRpYWxfYXJnX3RvcCQxXSk7XG4gIHZhciBpbmNsdWRlX21lZXQgPSBpbmNsdWRlJDIubWVldDtcbiAgdmFyIGluY2x1ZGVfam9pbiQxID0gaW5jbHVkZV9qb2luO1xuICB2YXIgaW5jbHVkZV9ib3R0b20gPSBib3R0b207XG4gIHZhciBpbmNsdWRlX21lZXQkMSA9IGluY2x1ZGVfbWVldDtcbiAgdmFyIGluY2x1ZGVfdG9wID0gdG9wO1xuICB2YXIgam9pbiQxID0gaW5jbHVkZV9qb2luJDE7XG4gIHZhciBub3QgPSBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSwgJCRFcnJvci50b3ApKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay5ib3R0b21dKTtcbiAgICAgIH0gZWxzZSBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lLCAkJEVycm9yLmJvdHRvbSkpIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW09rLnRvcF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lJDEgPSBhWzBdO1xuICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUkMSwgT2sudG9wKSkge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gICAgfSBlbHNlIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUkMSwgT2suYm90dG9tKSkge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IudG9wXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfTtcbiAgdmFyIGltcGxpZXMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihqb2luJDEsIG5vdChhKSwgYik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGluY2x1ZGVfZXEsXG4gICAgICAgICAgY29tcGFyZTogY29tcGFyZSxcbiAgICAgICAgICBqb2luOiBqb2luJDEsXG4gICAgICAgICAgYm90dG9tOiBpbmNsdWRlX2JvdHRvbSxcbiAgICAgICAgICBtZWV0OiBpbmNsdWRlX21lZXQkMSxcbiAgICAgICAgICB0b3A6IGluY2x1ZGVfdG9wLFxuICAgICAgICAgIG5vdDogbm90LFxuICAgICAgICAgIGltcGxpZXM6IGltcGxpZXNcbiAgICAgICAgfTtcbn1cblxudmFyIE1hbnlfVmFsdWVkX0xvZ2ljID0ge1xuICBRdWFzaXJlZmxleGl2ZV9FcTogUXVhc2lyZWZsZXhpdmVfRXEsXG4gIFF1YXNpcmVmbGV4aXZlX09yZDogUXVhc2lyZWZsZXhpdmVfT3JkLFxuICBKb2luX1NlbWlsYXR0aWNlOiBKb2luX1NlbWlsYXR0aWNlLFxuICBNZWV0X1NlbWlsYXR0aWNlOiBNZWV0X1NlbWlsYXR0aWNlLFxuICBCb3VuZGVkX0pvaW5fU2VtaWxhdHRpY2U6IEJvdW5kZWRfSm9pbl9TZW1pbGF0dGljZSxcbiAgQm91bmRlZF9NZWV0X1NlbWlsYXR0aWNlOiBCb3VuZGVkX01lZXRfU2VtaWxhdHRpY2UsXG4gIExhdHRpY2U6IExhdHRpY2UsXG4gIEJvdW5kZWRfTGF0dGljZTogQm91bmRlZF9MYXR0aWNlLFxuICBEaXN0cmlidXRpdmVfTGF0dGljZTogRGlzdHJpYnV0aXZlX0xhdHRpY2UsXG4gIEJvdW5kZWRfRGlzdHJpYnV0aXZlX0xhdHRpY2U6IEJvdW5kZWRfRGlzdHJpYnV0aXZlX0xhdHRpY2UsXG4gIEhleXRpbmdfQWxnZWJyYTogSGV5dGluZ19BbGdlYnJhLFxuICBJbnZvbHV0aXZlX0hleXRpbmdfQWxnZWJyYTogSW52b2x1dGl2ZV9IZXl0aW5nX0FsZ2VicmEsXG4gIEJvb2xlYW5fQWxnZWJyYTogQm9vbGVhbl9BbGdlYnJhXG59O1xuXG5mdW5jdGlvbiBGb2xkYWJsZShUKSB7XG4gIHZhciBmb2xkX2xlZnQgPSBmdW5jdGlvbiAoZiwgaW5pdGlhbCwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIGluaXRpYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihmLCBpbml0aWFsLCBhWzBdKTtcbiAgICB9XG4gIH07XG4gIHZhciBmb2xkX3JpZ2h0ID0gZnVuY3Rpb24gKGYsIGluaXRpYWwsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBpbml0aWFsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZiwgYVswXSwgaW5pdGlhbCk7XG4gICAgfVxuICB9O1xuICB2YXIgRm9sZF9NYXAgPSBmdW5jdGlvbiAoTSkge1xuICAgIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRfTWFwX1BsdXMgPSBmdW5jdGlvbiAoUCkge1xuICAgIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgcmV0dXJuIFAuZW1wdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRfTWFwX0FueSA9IGZ1bmN0aW9uIChNKSB7XG4gICAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICAgIGlmIChhLnRhZykge1xuICAgICAgICByZXR1cm4gTS5lbXB0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShmLCBhWzBdKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXNcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gYmlmb2xkX2xlZnQoZiwgZywgaW5pdGlhbCwgYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZywgaW5pdGlhbCwgYVswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGluaXRpYWwsIGFbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJpZm9sZF9yaWdodChmLCBnLCBpbml0aWFsLCBhKSB7XG4gIGlmIChhLnRhZykge1xuICAgIHJldHVybiBDdXJyeS5fMihnLCBhWzBdLCBpbml0aWFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZiwgYVswXSwgaW5pdGlhbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gRm9sZF9NYXAoTSkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiByZXN1bHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZF9NYXBfQW55KE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogcmVzdWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX1BsdXMoUCkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiByZXN1bHRcbiAgICAgICAgfTtcbn1cblxudmFyIEJpZm9sZGFibGUgPSB7XG4gIGJpZm9sZF9sZWZ0OiBiaWZvbGRfbGVmdCxcbiAgYmlmb2xkX3JpZ2h0OiBiaWZvbGRfcmlnaHQsXG4gIEZvbGRfTWFwOiBGb2xkX01hcCxcbiAgRm9sZF9NYXBfQW55OiBGb2xkX01hcF9BbnksXG4gIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXNcbn07XG5cbmZ1bmN0aW9uIFRyYXZlcnNhYmxlKFQsIEEpIHtcbiAgdmFyIHB1cmUgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gIH07XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgZm9sZF9sZWZ0ID0gZnVuY3Rpb24gKGYsIGluaXRpYWwsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBpbml0aWFsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZiwgaW5pdGlhbCwgYVswXSk7XG4gICAgfVxuICB9O1xuICB2YXIgZm9sZF9yaWdodCA9IGZ1bmN0aW9uIChmLCBpbml0aWFsLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGFbMF0sIGluaXRpYWwpO1xuICAgIH1cbiAgfTtcbiAgdmFyIEZvbGRfTWFwID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgICAgaWYgKGEudGFnKSB7XG4gICAgICAgIHJldHVybiBNLmVtcHR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGFbMF0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkX01hcF9QbHVzID0gZnVuY3Rpb24gKFApIHtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgICAgaWYgKGEudGFnKSB7XG4gICAgICAgIHJldHVybiBQLmVtcHR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGFbMF0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkX01hcF9BbnkgPSBmdW5jdGlvbiAoTSkge1xuICAgIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShBLnB1cmUsIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgcHVyZSwgQ3VycnkuXzEoZiwgYVswXSkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHNlcXVlbmNlID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShBLnB1cmUsIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgcHVyZSwgYVswXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCaXRyYXZlcnNhYmxlKEEpIHtcbiAgdmFyIGJpdHJhdmVyc2UgPSBmdW5jdGlvbiAoZiwgZywgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEEubWFwLCAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW3hdKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShnLCBhWzBdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFt4XSk7XG4gICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoZiwgYVswXSkpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGJpc2VxdWVuY2UgPSBmdW5jdGlvbiAoYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEEubWFwLCAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW3hdKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBhWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEEubWFwLCAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW3hdKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBhWzBdKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYmltYXA6IGJpbWFwLFxuICAgICAgICAgIGJpZm9sZF9sZWZ0OiBiaWZvbGRfbGVmdCxcbiAgICAgICAgICBiaWZvbGRfcmlnaHQ6IGJpZm9sZF9yaWdodCxcbiAgICAgICAgICBGb2xkX01hcDogRm9sZF9NYXAsXG4gICAgICAgICAgRm9sZF9NYXBfQW55OiBGb2xkX01hcF9BbnksXG4gICAgICAgICAgRm9sZF9NYXBfUGx1czogRm9sZF9NYXBfUGx1cyxcbiAgICAgICAgICBiaXRyYXZlcnNlOiBiaXRyYXZlcnNlLFxuICAgICAgICAgIGJpc2VxdWVuY2U6IGJpc2VxdWVuY2VcbiAgICAgICAgfTtcbn1cblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5CaWZ1bmN0b3IoQmlmdW5jdG9yKTtcblxudmFyIEluZml4ID0gaW5jbHVkZTtcblxuZnVuY3Rpb24gQ2hvb3NlKEEpIHtcbiAgdmFyIGNob29zZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEEuYWx0LCBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW3hdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW3hdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGIpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjaG9vc2U6IGNob29zZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tX29rKGEpIHtcbiAgaWYgKCFhLnRhZykge1xuICAgIHJldHVybiBhWzBdO1xuICB9XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgXCJZb3UgcGFzc2VkIGluIGFuIGBFcnJvcmAgdmFsdWUgdG8gYGZyb21fb2tgXCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGZyb21fZXJyb3IoYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gYVswXTtcbiAgfVxuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIFwiWW91IHBhc3NlZCBpbiBhbiBgT2tgIHZhbHVlIHRvIGBmcm9tX2Vycm9yYFwiXG4gICAgICBdO1xufVxuXG52YXIgVW5zYWZlID0ge1xuICBmcm9tX29rOiBmcm9tX29rLFxuICBmcm9tX2Vycm9yOiBmcm9tX2Vycm9yXG59O1xuXG5mdW5jdGlvbiBpc19vayhhKSB7XG4gIHJldHVybiByZXN1bHQoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KHRydWUsIHBhcmFtKTtcbiAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChmYWxzZSwgcGFyYW0pO1xuICAgICAgICAgICAgICB9KSwgYSk7XG59XG5cbmZ1bmN0aW9uIGlzX2Vycm9yKGEpIHtcbiAgcmV0dXJuIHJlc3VsdCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QoZmFsc2UsIHBhcmFtKTtcbiAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCh0cnVlLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pLCBhKTtcbn1cblxuZnVuY3Rpb24gbm90ZSgkJGRlZmF1bHQpIHtcbiAgdmFyIHBhcnRpYWxfYXJnID0gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbJCRkZWZhdWx0XSk7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gT3B0aW9uJEJzQmFzdGV0Lm1heWJlKChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbeF0pO1xuICAgICAgICAgICAgICAgICAgfSksIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGh1c2goZSkge1xuICByZXR1cm4gcmVzdWx0KE9wdGlvbiRCc0Jhc3RldC5BcHBsaWNhdGl2ZS5wdXJlLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QodW5kZWZpbmVkLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pLCBlKTtcbn1cblxudmFyIGZsaXAgPSBGdW5jdGlvbiRCc0Jhc3RldC5mbGlwO1xuXG52YXIgJCRjb25zdCA9IEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3Q7XG5cbmV4cG9ydCB7XG4gIGZsaXAgLFxuICAkJGNvbnN0ICxcbiAgcmVzdWx0ICxcbiAgTWFnbWEgLFxuICBNZWRpYWxfTWFnbWEgLFxuICBTZW1pZ3JvdXAgLFxuICBGdW5jdG9yICxcbiAgQmlmdW5jdG9yICxcbiAgQXBwbHkgLFxuICBBcHBsaWNhdGl2ZSAsXG4gIE1vbmFkICxcbiAgQWx0ICxcbiAgRXh0ZW5kICxcbiAgU2hvdyAsXG4gIEVxICxcbiAgT3JkICxcbiAgQm91bmRlZCAsXG4gIE1hbnlfVmFsdWVkX0xvZ2ljICxcbiAgRm9sZGFibGUgLFxuICBCaWZvbGRhYmxlICxcbiAgVHJhdmVyc2FibGUgLFxuICBCaXRyYXZlcnNhYmxlICxcbiAgSW5maXggLFxuICBDaG9vc2UgLFxuICBVbnNhZmUgLFxuICBpc19vayAsXG4gIGlzX2Vycm9yICxcbiAgbm90ZSAsXG4gIGh1c2ggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTm9uRW1wdHkgZnJvbSBcIi4vUmVsdWRlX05vbkVtcHR5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG9rKGEpIHtcbiAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG59XG5cbmZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtlXSk7XG59XG5cbmZ1bmN0aW9uIGVycm9yTmVsKGUpIHtcbiAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtSZWx1ZGVfTm9uRW1wdHkuTGlzdC5wdXJlKGUpXSk7XG59XG5cbmZ1bmN0aW9uIGVycm9yTmVhKGUpIHtcbiAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtSZWx1ZGVfTm9uRW1wdHkuJCRBcnJheS5wdXJlKGUpXSk7XG59XG5cbmZ1bmN0aW9uIGlzT2socGFyYW0pIHtcbiAgaWYgKHBhcmFtLnRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yKGEpIHtcbiAgcmV0dXJuICFpc09rKGEpO1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFwKGYsIGUpIHtcbiAgaWYgKGUudGFnKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgQ3VycnkuXzEoZiwgZVswXSk7XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBtYXBFcnJvcihmLCBvaykge1xuICBpZiAob2sudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShmLCBva1swXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2s7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwRXJyb3JzTmVhKGYsIG9rKSB7XG4gIGlmIChvay50YWcpIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW1JlbHVkZV9Ob25FbXB0eS4kJEFycmF5Lm1hcChmLCBva1swXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2s7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwRXJyb3JzTmVsKGYsIG9rKSB7XG4gIGlmIChvay50YWcpIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW1JlbHVkZV9Ob25FbXB0eS5MaXN0Lm1hcChmLCBva1swXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2s7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFwRXJyb3IoZiwgb2spIHtcbiAgaWYgKCFvay50YWcpIHtcbiAgICByZXR1cm4gb2s7XG4gIH1cbiAgQ3VycnkuXzEoZiwgb2tbMF0pO1xuICByZXR1cm4gb2s7XG59XG5cbmZ1bmN0aW9uIGJpbWFwKGYsIGcsIGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShnLCBhWzBdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZiwgYVswXSldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiaXRhcChmLCBnLCBvaykge1xuICBpZiAob2sudGFnKSB7XG4gICAgQ3VycnkuXzEoZywgb2tbMF0pO1xuICAgIHJldHVybiBvaztcbiAgfVxuICBDdXJyeS5fMShmLCBva1swXSk7XG4gIHJldHVybiBvaztcbn1cblxuZnVuY3Rpb24gYXBwbHlXaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgZmYsIGZ2KSB7XG4gIGlmICghZmYudGFnKSB7XG4gICAgaWYgKGZ2LnRhZykge1xuICAgICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtmdlswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGZmWzBdLCBmdlswXSldKTtcbiAgICB9XG4gIH1cbiAgdmFyIGUgPSBmZlswXTtcbiAgaWYgKGZ2LnRhZykge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoYXBwZW5kRXJyb3JzLCBlLCBmdlswXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW2VdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGlnbldpdGhBcHBlbmRFcnJvcnMoYXBwZW5kRXJyb3JzLCBmYSwgZmIpIHtcbiAgaWYgKGZhLnRhZykge1xuICAgIGlmIChmYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoYXBwZW5kRXJyb3JzLCBmYVswXSwgZmJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbLyogVGhhdCAqL0Jsb2NrLl9fKDEsIFtmYlswXV0pXSk7XG4gICAgfVxuICB9XG4gIHZhciBhID0gZmFbMF07XG4gIGlmIChmYi50YWcpIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgWy8qIFRoaXMgKi9CbG9jay5fXygwLCBbYV0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFsvKiBCb3RoICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgIGZiWzBdXG4gICAgICAgICAgICAgICAgXSldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGlnbldpdGhXaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgZiwgZmEsIGZiKSB7XG4gIHJldHVybiBtYXAoZiwgYWxpZ25XaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgZmEsIGZiKSk7XG59XG5cbmZ1bmN0aW9uIHB1cmUoYSkge1xuICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW2FdKTtcbn1cblxuZnVuY3Rpb24gYmluZChmYSwgZikge1xuICBpZiAoZmEudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtmYVswXV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShmLCBmYVswXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcChmLCBmYSkge1xuICByZXR1cm4gYmluZChmYSwgZik7XG59XG5cbmZ1bmN0aW9uIGZyb21SZXN1bHQoYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW2FbMF1dKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1Jlc3VsdChhKSB7XG4gIGlmIChhLnRhZykge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2FbMF1dKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tT3B0aW9uKGRlZmF1bHRFcnJvciwgYSkge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFtDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtkZWZhdWx0RXJyb3JdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tT3B0aW9uTGF6eShnZXREZWZhdWx0RXJyb3IsIGEpIHtcbiAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihhKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZ2V0RGVmYXVsdEVycm9yLCB1bmRlZmluZWQpXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9sZChlYywgYWMsIGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGVjLCBhWzBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoYWMsIGFbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsaXAoZmEpIHtcbiAgcmV0dXJuIGZvbGQoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFtlXSk7XG4gICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW2FdKTtcbiAgICAgICAgICAgICAgfSksIGZhKTtcbn1cblxuZnVuY3Rpb24gbWFwMihhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYikge1xuICByZXR1cm4gYXBwbHlXaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgbWFwKGYsIGZhKSwgZmIpO1xufVxuXG5mdW5jdGlvbiBtYXAzKGFwcGVuZEVycm9ycywgZiwgZmEsIGZiLCBmYykge1xuICByZXR1cm4gYXBwbHlXaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgbWFwMihhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYiksIGZjKTtcbn1cblxuZnVuY3Rpb24gbWFwNChhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYiwgZmMsIGZkKSB7XG4gIHJldHVybiBhcHBseVdpdGhBcHBlbmRFcnJvcnMoYXBwZW5kRXJyb3JzLCBtYXAzKGFwcGVuZEVycm9ycywgZiwgZmEsIGZiLCBmYyksIGZkKTtcbn1cblxuZnVuY3Rpb24gbWFwNShhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYiwgZmMsIGZkLCBmZSkge1xuICByZXR1cm4gYXBwbHlXaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgbWFwNChhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYiwgZmMsIGZkKSwgZmUpO1xufVxuXG5mdW5jdGlvbiBXaXRoRXJyb3JzKEVycm9ycywgJCRFcnJvcikge1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckV4dGVuc2lvbnMoRnVuY3Rvcik7XG4gIHZhciBhcHBseSA9IGZ1bmN0aW9uIChmZiwgZmEpIHtcbiAgICByZXR1cm4gYXBwbHlXaXRoQXBwZW5kRXJyb3JzKEVycm9ycy5hcHBlbmQsIGZmLCBmYSk7XG4gIH07XG4gIHZhciBBcHBseSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHlcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5RXh0ZW5zaW9ucyhBcHBseSk7XG4gIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlKTtcbiAgdmFyIGFsaWduID0gZnVuY3Rpb24gKGZhLCBmYikge1xuICAgIHJldHVybiBhbGlnbldpdGhBcHBlbmRFcnJvcnMoRXJyb3JzLmFwcGVuZCwgZmEsIGZiKTtcbiAgfTtcbiAgdmFyIGFsaWduV2l0aCA9IGZ1bmN0aW9uIChmLCBmYSwgZmIpIHtcbiAgICByZXR1cm4gYWxpZ25XaXRoV2l0aEFwcGVuZEVycm9ycyhFcnJvcnMuYXBwZW5kLCBmLCBmYSwgZmIpO1xuICB9O1xuICB2YXIgU2VtaWFsaWduID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFsaWduOiBhbGlnbixcbiAgICBhbGlnbldpdGg6IGFsaWduV2l0aFxuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pYWxpZ24uU2VtaWFsaWduRXh0ZW5zaW9ucyhTZW1pYWxpZ24pO1xuICB2YXIgTW9uYWQgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmUsXG4gICAgZmxhdF9tYXA6IGJpbmRcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkRXh0ZW5zaW9ucyhNb25hZCk7XG4gIHZhciBpbmNsdWRlJDQgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JJbmZpeChGdW5jdG9yKTtcbiAgdmFyIGluY2x1ZGUkNSA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5SW5maXgoQXBwbHkpO1xuICB2YXIgaW5jbHVkZSQ2ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRJbmZpeChNb25hZCk7XG4gIHZhciBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNC5GdW5jdG9yRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUkNC4kbGVzcyQkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZSQ0LiRsZXNzJGhhc2gkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIgPSBpbmNsdWRlJDQuJGxlc3MkO1xuICB2YXIgSW5maXhfJCRncmVhdCA9IGluY2x1ZGUkNC4kJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkYXQkZ3JlYXQgPSBpbmNsdWRlJDQuJGxlc3MkYXQkZ3JlYXQ7XG4gIHZhciBJbmZpeF9BcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDUuQXBwbHlFeHRlbnNpb25zO1xuICB2YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkNS4kbGVzcyRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3Mkc3RhciA9IGluY2x1ZGUkNS4kbGVzcyRzdGFyO1xuICB2YXIgSW5maXhfJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDUuJHN0YXIkZ3JlYXQ7XG4gIHZhciBJbmZpeF9Nb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuTW9uYWRFeHRlbnNpb25zO1xuICB2YXIgSW5maXhfJGdyZWF0JGdyZWF0JGVxID0gaW5jbHVkZSQ2LiRncmVhdCRncmVhdCRlcTtcbiAgdmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlJDYuJGVxJGxlc3MkbGVzcztcbiAgdmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUkNi4kZ3JlYXQkZXEkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRlcSRsZXNzID0gaW5jbHVkZSQ2LiRsZXNzJGVxJGxlc3M7XG4gIHZhciBJbmZpeCA9IHtcbiAgICBGdW5jdG9yRXh0ZW5zaW9uczogSW5maXhfRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgICAkbGVzcyQ6IEluZml4XyRsZXNzJGRvbGxhcixcbiAgICAkJGdyZWF0OiBJbmZpeF8kJGdyZWF0LFxuICAgICRsZXNzJGF0JGdyZWF0OiBJbmZpeF8kbGVzcyRhdCRncmVhdCxcbiAgICBBcHBseUV4dGVuc2lvbnM6IEluZml4X0FwcGx5RXh0ZW5zaW9ucyxcbiAgICAkbGVzcyRzdGFyJGdyZWF0OiBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0LFxuICAgICRsZXNzJHN0YXI6IEluZml4XyRsZXNzJHN0YXIsXG4gICAgJHN0YXIkZ3JlYXQ6IEluZml4XyRzdGFyJGdyZWF0LFxuICAgIE1vbmFkRXh0ZW5zaW9uczogSW5maXhfTW9uYWRFeHRlbnNpb25zLFxuICAgICRncmVhdCRncmVhdCRlcTogSW5maXhfJGdyZWF0JGdyZWF0JGVxLFxuICAgICRlcSRsZXNzJGxlc3M6IEluZml4XyRlcSRsZXNzJGxlc3MsXG4gICAgJGdyZWF0JGVxJGdyZWF0OiBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQsXG4gICAgJGxlc3MkZXEkbGVzczogSW5maXhfJGxlc3MkZXEkbGVzc1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgQnNGdW5jdG9yRXh0ZW5zaW9uczogaW5jbHVkZS5Cc0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICAgICAgIGZsaXBNYXA6IGluY2x1ZGUuZmxpcE1hcCxcbiAgICAgICAgICAkJHZvaWQ6IGluY2x1ZGUuJCR2b2lkLFxuICAgICAgICAgIHZvaWRSaWdodDogaW5jbHVkZS52b2lkUmlnaHQsXG4gICAgICAgICAgdm9pZExlZnQ6IGluY2x1ZGUudm9pZExlZnQsXG4gICAgICAgICAgZmxhcDogaW5jbHVkZS5mbGFwLFxuICAgICAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgICAgICBhcHBseTogYXBwbHksXG4gICAgICAgICAgQnNBcHBseUV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Cc0FwcGx5RXh0ZW5zaW9ucyxcbiAgICAgICAgICBhcHBseUZpcnN0OiBpbmNsdWRlJDEuYXBwbHlGaXJzdCxcbiAgICAgICAgICBhcHBseVNlY29uZDogaW5jbHVkZSQxLmFwcGx5U2Vjb25kLFxuICAgICAgICAgIG1hcDI6IGluY2x1ZGUkMS5tYXAyLFxuICAgICAgICAgIG1hcDM6IGluY2x1ZGUkMS5tYXAzLFxuICAgICAgICAgIG1hcDQ6IGluY2x1ZGUkMS5tYXA0LFxuICAgICAgICAgIG1hcDU6IGluY2x1ZGUkMS5tYXA1LFxuICAgICAgICAgIHR1cGxlMjogaW5jbHVkZSQxLnR1cGxlMixcbiAgICAgICAgICB0dXBsZTM6IGluY2x1ZGUkMS50dXBsZTMsXG4gICAgICAgICAgdHVwbGU0OiBpbmNsdWRlJDEudHVwbGU0LFxuICAgICAgICAgIHR1cGxlNTogaW5jbHVkZSQxLnR1cGxlNSxcbiAgICAgICAgICBtYXBUdXBsZTI6IGluY2x1ZGUkMS5tYXBUdXBsZTIsXG4gICAgICAgICAgbWFwVHVwbGUzOiBpbmNsdWRlJDEubWFwVHVwbGUzLFxuICAgICAgICAgIG1hcFR1cGxlNDogaW5jbHVkZSQxLm1hcFR1cGxlNCxcbiAgICAgICAgICBtYXBUdXBsZTU6IGluY2x1ZGUkMS5tYXBUdXBsZTUsXG4gICAgICAgICAgQXBwbGljYXRpdmU6IEFwcGxpY2F0aXZlLFxuICAgICAgICAgIHB1cmU6IHB1cmUsXG4gICAgICAgICAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IGluY2x1ZGUkMi5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyxcbiAgICAgICAgICBsaWZ0QTE6IGluY2x1ZGUkMi5saWZ0QTEsXG4gICAgICAgICAgYWxsOiBpbmNsdWRlJDIuYWxsLFxuICAgICAgICAgIFNlbWlhbGlnbjogU2VtaWFsaWduLFxuICAgICAgICAgIE1vbmFkOiBNb25hZCxcbiAgICAgICAgICBiaW5kOiBiaW5kLFxuICAgICAgICAgIEJzTW9uYWRFeHRlbnNpb25zOiBpbmNsdWRlJDMuQnNNb25hZEV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxhdE1hcDogaW5jbHVkZSQzLmZsYXRNYXAsXG4gICAgICAgICAgZmxhdHRlbjogaW5jbHVkZSQzLmZsYXR0ZW4sXG4gICAgICAgICAgY29tcG9zZUtsZWlzbGk6IGluY2x1ZGUkMy5jb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBmbGlwQ29tcG9zZUtsZWlzbGk6IGluY2x1ZGUkMy5mbGlwQ29tcG9zZUtsZWlzbGksXG4gICAgICAgICAgbGlmdE0xOiBpbmNsdWRlJDMubGlmdE0xLFxuICAgICAgICAgIHdoZW5fOiBpbmNsdWRlJDMud2hlbl8sXG4gICAgICAgICAgdW5sZXNzOiBpbmNsdWRlJDMudW5sZXNzLFxuICAgICAgICAgIEluZml4OiBJbmZpeFxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBvayAsXG4gIGVycm9yICxcbiAgZXJyb3JOZWwgLFxuICBlcnJvck5lYSAsXG4gIGlzT2sgLFxuICBpc0Vycm9yICxcbiAgbWFwICxcbiAgdGFwICxcbiAgbWFwRXJyb3IgLFxuICBtYXBFcnJvcnNOZWEgLFxuICBtYXBFcnJvcnNOZWwgLFxuICB0YXBFcnJvciAsXG4gIGJpbWFwICxcbiAgYml0YXAgLFxuICBhcHBseVdpdGhBcHBlbmRFcnJvcnMgLFxuICBhbGlnbldpdGhBcHBlbmRFcnJvcnMgLFxuICBhbGlnbldpdGhXaXRoQXBwZW5kRXJyb3JzICxcbiAgcHVyZSAsXG4gIGJpbmQgLFxuICBmbGF0TWFwICxcbiAgZnJvbVJlc3VsdCAsXG4gIHRvUmVzdWx0ICxcbiAgZnJvbU9wdGlvbiAsXG4gIGZyb21PcHRpb25MYXp5ICxcbiAgZm9sZCAsXG4gIGZsaXAgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgV2l0aEVycm9ycyAsXG4gIFxufVxuLyogUmVsdWRlX05vbkVtcHR5IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcblxuZnVuY3Rpb24gQmlmdW5jdG9yRXh0ZW5zaW9ucyhCKSB7XG4gIHZhciBtYXBMZWZ0ID0gZnVuY3Rpb24gKGFUb0MsIGZhYikge1xuICAgIHJldHVybiBDdXJyeS5fMyhCLmJpbWFwLCBhVG9DLCAoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgICAgIH0pLCBmYWIpO1xuICB9O1xuICB2YXIgbWFwUmlnaHQgPSBmdW5jdGlvbiAoYlRvRCwgZmFiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEIuYmltYXAsIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfSksIGJUb0QsIGZhYik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgbWFwTGVmdDogbWFwTGVmdCxcbiAgICAgICAgICBtYXBSaWdodDogbWFwUmlnaHQsXG4gICAgICAgICAgbWFwRXJyb3I6IG1hcFJpZ2h0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEJpZnVuY3RvckluZml4KEIpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogQi5iaW1hcFxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBCaWZ1bmN0b3JFeHRlbnNpb25zICxcbiAgQmlmdW5jdG9ySW5maXggLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0Z1bmN0aW9uIGZyb20gXCIuL1JlbHVkZV9GdW5jdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX05vbkVtcHR5IGZyb20gXCIuL1JlbHVkZV9Ob25FbXB0eS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVzdWx0JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9SZXN1bHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9WYWxpZGF0aW9uIGZyb20gXCIuL1JlbHVkZV9WYWxpZGF0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2pzX2V4Y2VwdGlvbnMgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9qc19leGNlcHRpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BbHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19CaWZ1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19CaWZ1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbiBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQmlmb2xkYWJsZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0JpZm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkRXJyb3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZEVycm9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZFRocm93IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRUaHJvdy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19CaXRyYXZlcnNhYmxlIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQml0cmF2ZXJzYWJsZS5icy5qc1wiO1xuXG5mdW5jdGlvbiBvayhhKSB7XG4gIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG59XG5cbmZ1bmN0aW9uIGVycm9yKGUpIHtcbiAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2VdKTtcbn1cblxuZnVuY3Rpb24gZ2V0T2soYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKGFbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEVycm9yKGUpIHtcbiAgaWYgKGUudGFnKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoZVswXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGlzT2socGFyYW0pIHtcbiAgaWYgKHBhcmFtLnRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yKHBhcmFtKSB7XG4gIGlmIChwYXJhbS50YWcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9sZChlYywgYWMsIHIpIHtcbiAgaWYgKHIudGFnKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGVjLCByWzBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoYWMsIHJbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9yRWxzZSgkJGRlZmF1bHQsIGZhKSB7XG4gIGlmIChmYS50YWcpIHtcbiAgICByZXR1cm4gJCRkZWZhdWx0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYVswXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPckVsc2VMYXp5KGdldERlZmF1bHQsIGZhKSB7XG4gIGlmIChmYS50YWcpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZ2V0RGVmYXVsdCwgdW5kZWZpbmVkKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFbMF07XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2UoYSkge1xuICByZXR1cm4gYVswXTtcbn1cblxuZnVuY3Rpb24gZmxpcChhKSB7XG4gIGlmIChhLnRhZykge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthWzBdXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb3NlKHJlc3VsdEJUb0MsIHJlc3VsdEFUb0IpIHtcbiAgaWYgKHJlc3VsdEFUb0IudGFnKSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW3Jlc3VsdEFUb0JbMF1dKTtcbiAgfVxuICB2YXIgYVRvQiA9IHJlc3VsdEFUb0JbMF07XG4gIGlmIChyZXN1bHRCVG9DLnRhZykge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtyZXN1bHRCVG9DWzBdXSk7XG4gIH1cbiAgdmFyIGJUb0MgPSByZXN1bHRCVG9DWzBdO1xuICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgfSldKTtcbn1cblxuZnVuY3Rpb24gYW5kVGhlbihyZXN1bHRBVG9CLCByZXN1bHRCVG9DKSB7XG4gIHJldHVybiBjb21wb3NlKHJlc3VsdEJUb0MsIHJlc3VsdEFUb0IpO1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgZmEpIHtcbiAgaWYgKGZhLnRhZykge1xuICAgIHJldHVybiBmYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZiwgZmFbMF0pXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmltYXAobWFwQSwgbWFwRSwgcmVzdWx0KSB7XG4gIGlmIChyZXN1bHQudGFnKSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKG1hcEUsIHJlc3VsdFswXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEobWFwQSwgcmVzdWx0WzBdKV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRhcChmLCByYSkge1xuICBpZiAoIXJhLnRhZykge1xuICAgIEN1cnJ5Ll8xKGYsIHJhWzBdKTtcbiAgfVxuICByZXR1cm4gcmE7XG59XG5cbmZ1bmN0aW9uIHRhcEVycm9yKGYsIHJhKSB7XG4gIGlmIChyYS50YWcpIHtcbiAgICBDdXJyeS5fMShmLCByYVswXSk7XG4gIH1cbiAgcmV0dXJuIHJhO1xufVxuXG5mdW5jdGlvbiBhcHBseShyZiwgcmEpIHtcbiAgaWYgKHJmLnRhZykge1xuICAgIGlmIChyYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtyYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbcmZbMF1dKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocmEudGFnKSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW3JhWzBdXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKHJmWzBdLCByYVswXSldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXAyKGYsIGZhLCBmYikge1xuICByZXR1cm4gYXBwbHkobWFwKGYsIGZhKSwgZmIpO1xufVxuXG5mdW5jdGlvbiBtYXAzKGYsIGZhLCBmYiwgZmMpIHtcbiAgcmV0dXJuIGFwcGx5KG1hcDIoZiwgZmEsIGZiKSwgZmMpO1xufVxuXG5mdW5jdGlvbiBtYXA0KGYsIGZhLCBmYiwgZmMsIGZkKSB7XG4gIHJldHVybiBhcHBseShtYXAzKGYsIGZhLCBmYiwgZmMpLCBmZCk7XG59XG5cbmZ1bmN0aW9uIG1hcDUoZiwgZmEsIGZiLCBmYywgZmQsIGZlKSB7XG4gIHJldHVybiBhcHBseShtYXA0KGYsIGZhLCBmYiwgZmMsIGZkKSwgZmUpO1xufVxuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2FdKTtcbn1cblxuZnVuY3Rpb24gYmluZChmYSwgZikge1xuICBpZiAoZmEudGFnKSB7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShmLCBmYVswXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcChmLCBmYSkge1xuICByZXR1cm4gYmluZChmYSwgZik7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4obW1hKSB7XG4gIHJldHVybiBiaW5kKG1tYSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gYWx0KGZhMSwgZmEyKSB7XG4gIGlmIChmYTEudGFnKSB7XG4gICAgcmV0dXJuIGZhMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmExO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFsaWduKGZhLCBmYikge1xuICBpZiAoZmEudGFnKSB7XG4gICAgaWYgKGZiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2ZhWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFsvKiBUaGF0ICovQmxvY2suX18oMSwgW2ZiWzBdXSldKTtcbiAgICB9XG4gIH1cbiAgdmFyIGEgPSBmYVswXTtcbiAgaWYgKGZiLnRhZykge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFsvKiBUaGlzICovQmxvY2suX18oMCwgW2FdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFsvKiBCb3RoICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgIGZiWzBdXG4gICAgICAgICAgICAgICAgXSldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGlnbldpdGgoZiwgZmEsIGZiKSB7XG4gIHJldHVybiBtYXAoZiwgYWxpZ24oZmEsIGZiKSk7XG59XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3IoZiwgZmEpIHtcbiAgaWYgKGZhLnRhZykge1xuICAgIHJldHVybiBDdXJyeS5fMShmLCBmYVswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yKGVUb0EsIGZhKSB7XG4gIGlmIChmYS50YWcpIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZVRvQSwgZmFbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEhhbmRsZUVycm9yKGFUb0IsIGVUb0IsIGlvQUUpIHtcbiAgcmV0dXJuIGhhbmRsZUVycm9yKGVUb0IsIG1hcChhVG9CLCBpb0FFKSk7XG59XG5cbmZ1bmN0aW9uIHJlY292ZXIoYSwgZmEpIHtcbiAgcmV0dXJuIGNhdGNoRXJyb3IoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gICAgICAgICAgICAgIH0pLCBmYSk7XG59XG5cbmZ1bmN0aW9uIGZyb21PcHRpb24oZGVmYXVsdEVycm9yLCBvcHQpIHtcbiAgaWYgKG9wdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0NhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtkZWZhdWx0RXJyb3JdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tT3B0aW9uTGF6eShnZXRFcnJvciwgb3B0KSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG9wdCldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZ2V0RXJyb3IsIHVuZGVmaW5lZCldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlcUJ5KGVycm9yRXEsIG9rRXEsIGEsIGIpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZXJyb3JFcSwgYVswXSwgYlswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKG9rRXEsIGFbMF0sIGJbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaWVzKGZuKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGZuLCB1bmRlZmluZWQpXSk7XG4gIH1cbiAgY2F0Y2ggKHJhd19leG4pe1xuICAgIHZhciBleG4gPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19leG4pO1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtleG5dKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmllc0FzU3RyaW5nKGZuKSB7XG4gIHZhciBmID0gZnVuY3Rpb24gKHByaW0pIHtcbiAgICByZXR1cm4gU3RyaW5nKHByaW0pO1xuICB9O1xuICB2YXIgcmEgPSB0cmllcyhmbik7XG4gIGlmIChyYS50YWcpIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZiwgcmFbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJhO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvVmFsaWRhdGlvbk5lbCh2YWx1ZSkge1xuICBpZiAodmFsdWUudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtSZWx1ZGVfTm9uRW1wdHkuTGlzdC5wdXJlKHZhbHVlWzBdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbdmFsdWVbMF1dKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1ZhbGlkYXRpb25OZWEodmFsdWUpIHtcbiAgaWYgKHZhbHVlLnRhZykge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbUmVsdWRlX05vbkVtcHR5LiQkQXJyYXkucHVyZSh2YWx1ZVswXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW3ZhbHVlWzBdXSk7XG4gIH1cbn1cblxudmFyIEJpZnVuY3RvciA9IHtcbiAgYmltYXA6IGJpbWFwXG59O1xuXG52YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0JpZnVuY3Rvci5CaWZ1bmN0b3JFeHRlbnNpb25zKEJpZnVuY3Rvcik7XG5cbnZhciBiaWZvbGRfbGVmdCA9IFJlc3VsdCRCc0Jhc3RldC5CaWZvbGRhYmxlLmJpZm9sZF9sZWZ0O1xuXG52YXIgYmlmb2xkX3JpZ2h0ID0gUmVzdWx0JEJzQmFzdGV0LkJpZm9sZGFibGUuYmlmb2xkX3JpZ2h0O1xuXG52YXIgQmlmb2xkYWJsZV9Gb2xkX01hcCA9IFJlc3VsdCRCc0Jhc3RldC5CaWZvbGRhYmxlLkZvbGRfTWFwO1xuXG52YXIgQmlmb2xkYWJsZV9Gb2xkX01hcF9BbnkgPSBSZXN1bHQkQnNCYXN0ZXQuQmlmb2xkYWJsZS5Gb2xkX01hcF9Bbnk7XG5cbnZhciBCaWZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMgPSBSZXN1bHQkQnNCYXN0ZXQuQmlmb2xkYWJsZS5Gb2xkX01hcF9QbHVzO1xuXG52YXIgQmlmb2xkYWJsZSA9IHtcbiAgYmlmb2xkX2xlZnQ6IGJpZm9sZF9sZWZ0LFxuICBiaWZvbGRfcmlnaHQ6IGJpZm9sZF9yaWdodCxcbiAgRm9sZF9NYXA6IEJpZm9sZGFibGVfRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogQmlmb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gIEZvbGRfTWFwX1BsdXM6IEJpZm9sZGFibGVfRm9sZF9NYXBfUGx1c1xufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQmlmb2xkYWJsZS5CaWZvbGRhYmxlRXh0ZW5zaW9ucyhCaWZvbGRhYmxlKTtcblxuZnVuY3Rpb24gV2l0aEVycm9yKEUpIHtcbiAgdmFyIEZ1bmN0b3IgPSB7XG4gICAgbWFwOiBtYXBcbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuICB2YXIgQWx0ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFsdDogYWx0XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQuQWx0RXh0ZW5zaW9ucyhBbHQpO1xuICB2YXIgQXBwbHkgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5XG4gIH07XG4gIHZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuICB2YXIgQXBwbGljYXRpdmUgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmVcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG4gIHZhciBTZW1pYWxpZ24gPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYWxpZ246IGFsaWduLFxuICAgIGFsaWduV2l0aDogYWxpZ25XaXRoXG4gIH07XG4gIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbi5TZW1pYWxpZ25FeHRlbnNpb25zKFNlbWlhbGlnbik7XG4gIHZhciBNb25hZCA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZSxcbiAgICBmbGF0X21hcDogYmluZFxuICB9O1xuICB2YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRFeHRlbnNpb25zKE1vbmFkKTtcbiAgdmFyIE1vbmFkVGhyb3cgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmUsXG4gICAgZmxhdF9tYXA6IGJpbmQsXG4gICAgdGhyb3dFcnJvcjogZXJyb3JcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRUaHJvdy5Nb25hZFRocm93RXh0ZW5zaW9ucyhNb25hZFRocm93KTtcbiAgdmFyIE1vbmFkRXJyb3IgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmUsXG4gICAgZmxhdF9tYXA6IGJpbmQsXG4gICAgdGhyb3dFcnJvcjogZXJyb3IsXG4gICAgY2F0Y2hFcnJvcjogY2F0Y2hFcnJvclxuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZEVycm9yLk1vbmFkRXJyb3JFeHRlbnNpb25zKE1vbmFkRXJyb3IpO1xuICB2YXIgU2VtaWdyb3Vwb2lkID0ge1xuICAgIGNvbXBvc2U6IGNvbXBvc2VcbiAgfTtcbiAgdmFyIGluY2x1ZGUkNSA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZC5TZW1pZ3JvdXBvaWRFeHRlbnNpb25zKFNlbWlncm91cG9pZCk7XG4gIHZhciBpbmNsdWRlJDYgPSBSZXN1bHQkQnNCYXN0ZXQuRm9sZGFibGUoRSk7XG4gIHZhciBmb2xkX2xlZnQgPSBpbmNsdWRlJDYuZm9sZF9sZWZ0O1xuICB2YXIgZm9sZF9yaWdodCA9IGluY2x1ZGUkNi5mb2xkX3JpZ2h0O1xuICB2YXIgRm9sZGFibGVfRm9sZF9NYXAgPSBpbmNsdWRlJDYuRm9sZF9NYXA7XG4gIHZhciBGb2xkYWJsZV9Gb2xkX01hcF9BbnkgPSBpbmNsdWRlJDYuRm9sZF9NYXBfQW55O1xuICB2YXIgRm9sZGFibGVfRm9sZF9NYXBfUGx1cyA9IGluY2x1ZGUkNi5Gb2xkX01hcF9QbHVzO1xuICB2YXIgRm9sZGFibGUgPSB7XG4gICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgZm9sZF9yaWdodDogZm9sZF9yaWdodCxcbiAgICBGb2xkX01hcDogRm9sZGFibGVfRm9sZF9NYXAsXG4gICAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgRm9sZF9NYXBfUGx1czogRm9sZGFibGVfRm9sZF9NYXBfUGx1c1xuICB9O1xuICB2YXIgaW5jbHVkZSQ3ID0gUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuRm9sZGFibGVFeHRlbnNpb25zKEZvbGRhYmxlKTtcbiAgdmFyIFdpdGhBcHBsaWNhdGl2ZSA9IGZ1bmN0aW9uIChBKSB7XG4gICAgdmFyIHBhcnRpYWxfYXJnID0gUmVzdWx0JEJzQmFzdGV0LlRyYXZlcnNhYmxlO1xuICAgIHZhciBpbmNsdWRlID0gcGFydGlhbF9hcmcoRSwgQSk7XG4gICAgdmFyIHRyYXZlcnNlID0gaW5jbHVkZS50cmF2ZXJzZTtcbiAgICB2YXIgc2VxdWVuY2UgPSBpbmNsdWRlLnNlcXVlbmNlO1xuICAgIHZhciBUcmF2ZXJzYWJsZV9tYXAgPSBpbmNsdWRlLm1hcDtcbiAgICB2YXIgVHJhdmVyc2FibGVfZm9sZF9sZWZ0ID0gaW5jbHVkZS5mb2xkX2xlZnQ7XG4gICAgdmFyIFRyYXZlcnNhYmxlX2ZvbGRfcmlnaHQgPSBpbmNsdWRlLmZvbGRfcmlnaHQ7XG4gICAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwID0gaW5jbHVkZS5Gb2xkX01hcDtcbiAgICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXBfQW55ID0gaW5jbHVkZS5Gb2xkX01hcF9Bbnk7XG4gICAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMgPSBpbmNsdWRlLkZvbGRfTWFwX1BsdXM7XG4gICAgdmFyIFRyYXZlcnNhYmxlID0ge1xuICAgICAgbWFwOiBUcmF2ZXJzYWJsZV9tYXAsXG4gICAgICBmb2xkX2xlZnQ6IFRyYXZlcnNhYmxlX2ZvbGRfbGVmdCxcbiAgICAgIGZvbGRfcmlnaHQ6IFRyYXZlcnNhYmxlX2ZvbGRfcmlnaHQsXG4gICAgICBGb2xkX01hcDogVHJhdmVyc2FibGVfRm9sZF9NYXAsXG4gICAgICBGb2xkX01hcF9Bbnk6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSxcbiAgICAgIEZvbGRfTWFwX1BsdXM6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMsXG4gICAgICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gICAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgICB9O1xuICAgIFJlbHVkZV9FeHRlbnNpb25zX1RyYXZlcnNhYmxlLlRyYXZlcnNhYmxlRXh0ZW5zaW9ucyhUcmF2ZXJzYWJsZSk7XG4gICAgdmFyIGluY2x1ZGUkMSA9IFJlc3VsdCRCc0Jhc3RldC5CaXRyYXZlcnNhYmxlKEEpO1xuICAgIHZhciBiaXRyYXZlcnNlID0gaW5jbHVkZSQxLmJpdHJhdmVyc2U7XG4gICAgdmFyIGJpc2VxdWVuY2UgPSBpbmNsdWRlJDEuYmlzZXF1ZW5jZTtcbiAgICB2YXIgQml0cmF2ZXJzYWJsZV9iaW1hcCA9IGluY2x1ZGUkMS5iaW1hcDtcbiAgICB2YXIgQml0cmF2ZXJzYWJsZV9iaWZvbGRfbGVmdCA9IGluY2x1ZGUkMS5iaWZvbGRfbGVmdDtcbiAgICB2YXIgQml0cmF2ZXJzYWJsZV9iaWZvbGRfcmlnaHQgPSBpbmNsdWRlJDEuYmlmb2xkX3JpZ2h0O1xuICAgIHZhciBCaXRyYXZlcnNhYmxlX0ZvbGRfTWFwID0gaW5jbHVkZSQxLkZvbGRfTWFwO1xuICAgIHZhciBCaXRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSA9IGluY2x1ZGUkMS5Gb2xkX01hcF9Bbnk7XG4gICAgdmFyIEJpdHJhdmVyc2FibGVfRm9sZF9NYXBfUGx1cyA9IGluY2x1ZGUkMS5Gb2xkX01hcF9QbHVzO1xuICAgIHZhciBCaXRyYXZlcnNhYmxlID0ge1xuICAgICAgYmltYXA6IEJpdHJhdmVyc2FibGVfYmltYXAsXG4gICAgICBiaWZvbGRfbGVmdDogQml0cmF2ZXJzYWJsZV9iaWZvbGRfbGVmdCxcbiAgICAgIGJpZm9sZF9yaWdodDogQml0cmF2ZXJzYWJsZV9iaWZvbGRfcmlnaHQsXG4gICAgICBGb2xkX01hcDogQml0cmF2ZXJzYWJsZV9Gb2xkX01hcCxcbiAgICAgIEZvbGRfTWFwX0FueTogQml0cmF2ZXJzYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgICBGb2xkX01hcF9QbHVzOiBCaXRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMsXG4gICAgICBiaXRyYXZlcnNlOiBiaXRyYXZlcnNlLFxuICAgICAgYmlzZXF1ZW5jZTogYmlzZXF1ZW5jZVxuICAgIH07XG4gICAgUmVsdWRlX0V4dGVuc2lvbnNfQml0cmF2ZXJzYWJsZS5CaXRyYXZlcnNhYmxlRXh0ZW5zaW9ucyhCaXRyYXZlcnNhYmxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgVHJhdmVyc2FibGU6IFRyYXZlcnNhYmxlLFxuICAgICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgICAgc2VxdWVuY2U6IHNlcXVlbmNlLFxuICAgICAgICAgICAgQml0cmF2ZXJzYWJsZTogQml0cmF2ZXJzYWJsZSxcbiAgICAgICAgICAgIGJpdHJhdmVyc2U6IGJpdHJhdmVyc2UsXG4gICAgICAgICAgICBiaXNlcXVlbmNlOiBiaXNlcXVlbmNlXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIGluY2x1ZGUkOCA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckluZml4KEZ1bmN0b3IpO1xuICB2YXIgaW5jbHVkZSQ5ID0gUmVsdWRlX0V4dGVuc2lvbnNfQmlmdW5jdG9yLkJpZnVuY3RvckluZml4KEJpZnVuY3Rvcik7XG4gIHZhciBpbmNsdWRlJDEwID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlJbmZpeChBcHBseSk7XG4gIHZhciBpbmNsdWRlJDExID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRJbmZpeChNb25hZCk7XG4gIHZhciBpbmNsdWRlJDEyID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLlNlbWlncm91cG9pZEluZml4KFNlbWlncm91cG9pZCk7XG4gIHZhciBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkOC5GdW5jdG9yRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUkOC4kbGVzcyQkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZSQ4LiRsZXNzJGhhc2gkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIgPSBpbmNsdWRlJDguJGxlc3MkO1xuICB2YXIgSW5maXhfJCRncmVhdCA9IGluY2x1ZGUkOC4kJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkYXQkZ3JlYXQgPSBpbmNsdWRlJDguJGxlc3MkYXQkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRsZXNzJGRvbGxhciRncmVhdCRncmVhdCA9IGluY2x1ZGUkOS4kbGVzcyRsZXNzJCRncmVhdCRncmVhdDtcbiAgdmFyIEluZml4X0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkMTAuQXBwbHlFeHRlbnNpb25zO1xuICB2YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkMTAuJGxlc3Mkc3RhciRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIgPSBpbmNsdWRlJDEwLiRsZXNzJHN0YXI7XG4gIHZhciBJbmZpeF8kc3RhciRncmVhdCA9IGluY2x1ZGUkMTAuJHN0YXIkZ3JlYXQ7XG4gIHZhciBJbmZpeF9Nb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDExLk1vbmFkRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUkMTEuJGdyZWF0JGdyZWF0JGVxO1xuICB2YXIgSW5maXhfJGVxJGxlc3MkbGVzcyA9IGluY2x1ZGUkMTEuJGVxJGxlc3MkbGVzcztcbiAgdmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUkMTEuJGdyZWF0JGVxJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUkMTEuJGxlc3MkZXEkbGVzcztcbiAgdmFyIEluZml4X1NFID0gaW5jbHVkZSQxMi5TRTtcbiAgdmFyIEluZml4XyRsZXNzJGxlc3MkbGVzcyA9IGluY2x1ZGUkMTIuJGxlc3MkbGVzcyRsZXNzO1xuICB2YXIgSW5maXhfJGdyZWF0JGdyZWF0JGdyZWF0ID0gaW5jbHVkZSQxMi4kZ3JlYXQkZ3JlYXQkZ3JlYXQ7XG4gIHZhciBJbmZpeCA9IHtcbiAgICBGdW5jdG9yRXh0ZW5zaW9uczogSW5maXhfRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgICAkbGVzcyQ6IEluZml4XyRsZXNzJGRvbGxhcixcbiAgICAkJGdyZWF0OiBJbmZpeF8kJGdyZWF0LFxuICAgICRsZXNzJGF0JGdyZWF0OiBJbmZpeF8kbGVzcyRhdCRncmVhdCxcbiAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogSW5maXhfJGxlc3MkbGVzcyRkb2xsYXIkZ3JlYXQkZ3JlYXQsXG4gICAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAgICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgICBNb25hZEV4dGVuc2lvbnM6IEluZml4X01vbmFkRXh0ZW5zaW9ucyxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICAgU0U6IEluZml4X1NFLFxuICAgICRsZXNzJGxlc3MkbGVzczogSW5maXhfJGxlc3MkbGVzcyRsZXNzLFxuICAgICRncmVhdCRncmVhdCRncmVhdDogSW5maXhfJGdyZWF0JGdyZWF0JGdyZWF0XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBpbmNsdWRlLkJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogaW5jbHVkZS5mbGlwTWFwLFxuICAgICAgICAgICQkdm9pZDogaW5jbHVkZS4kJHZvaWQsXG4gICAgICAgICAgdm9pZFJpZ2h0OiBpbmNsdWRlLnZvaWRSaWdodCxcbiAgICAgICAgICB2b2lkTGVmdDogaW5jbHVkZS52b2lkTGVmdCxcbiAgICAgICAgICBmbGFwOiBpbmNsdWRlLmZsYXAsXG4gICAgICAgICAgQWx0OiBBbHQsXG4gICAgICAgICAgYWx0OiBhbHQsXG4gICAgICAgICAgb3JFbHNlOiBpbmNsdWRlJDEub3JFbHNlLFxuICAgICAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgICAgICBhcHBseTogYXBwbHksXG4gICAgICAgICAgQnNBcHBseUV4dGVuc2lvbnM6IGluY2x1ZGUkMi5Cc0FwcGx5RXh0ZW5zaW9ucyxcbiAgICAgICAgICBhcHBseUZpcnN0OiBpbmNsdWRlJDIuYXBwbHlGaXJzdCxcbiAgICAgICAgICBhcHBseVNlY29uZDogaW5jbHVkZSQyLmFwcGx5U2Vjb25kLFxuICAgICAgICAgIG1hcDI6IGluY2x1ZGUkMi5tYXAyLFxuICAgICAgICAgIG1hcDM6IGluY2x1ZGUkMi5tYXAzLFxuICAgICAgICAgIG1hcDQ6IGluY2x1ZGUkMi5tYXA0LFxuICAgICAgICAgIG1hcDU6IGluY2x1ZGUkMi5tYXA1LFxuICAgICAgICAgIHR1cGxlMjogaW5jbHVkZSQyLnR1cGxlMixcbiAgICAgICAgICB0dXBsZTM6IGluY2x1ZGUkMi50dXBsZTMsXG4gICAgICAgICAgdHVwbGU0OiBpbmNsdWRlJDIudHVwbGU0LFxuICAgICAgICAgIHR1cGxlNTogaW5jbHVkZSQyLnR1cGxlNSxcbiAgICAgICAgICBtYXBUdXBsZTI6IGluY2x1ZGUkMi5tYXBUdXBsZTIsXG4gICAgICAgICAgbWFwVHVwbGUzOiBpbmNsdWRlJDIubWFwVHVwbGUzLFxuICAgICAgICAgIG1hcFR1cGxlNDogaW5jbHVkZSQyLm1hcFR1cGxlNCxcbiAgICAgICAgICBtYXBUdXBsZTU6IGluY2x1ZGUkMi5tYXBUdXBsZTUsXG4gICAgICAgICAgQXBwbGljYXRpdmU6IEFwcGxpY2F0aXZlLFxuICAgICAgICAgIHB1cmU6IHB1cmUsXG4gICAgICAgICAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IGluY2x1ZGUkMy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyxcbiAgICAgICAgICBsaWZ0QTE6IGluY2x1ZGUkMy5saWZ0QTEsXG4gICAgICAgICAgU2VtaWFsaWduOiBTZW1pYWxpZ24sXG4gICAgICAgICAgTW9uYWQ6IE1vbmFkLFxuICAgICAgICAgIGJpbmQ6IGJpbmQsXG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IGluY2x1ZGUkNC5Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGF0TWFwOiBpbmNsdWRlJDQuZmxhdE1hcCxcbiAgICAgICAgICBmbGF0dGVuOiBpbmNsdWRlJDQuZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogaW5jbHVkZSQ0LmNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogaW5jbHVkZSQ0LmZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBsaWZ0TTE6IGluY2x1ZGUkNC5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IGluY2x1ZGUkNC53aGVuXyxcbiAgICAgICAgICB1bmxlc3M6IGluY2x1ZGUkNC51bmxlc3MsXG4gICAgICAgICAgTW9uYWRUaHJvdzogTW9uYWRUaHJvdyxcbiAgICAgICAgICB0aHJvd0Vycm9yOiBlcnJvcixcbiAgICAgICAgICBNb25hZEVycm9yOiBNb25hZEVycm9yLFxuICAgICAgICAgIGNhdGNoRXJyb3I6IGNhdGNoRXJyb3IsXG4gICAgICAgICAgU2VtaWdyb3Vwb2lkOiBTZW1pZ3JvdXBvaWQsXG4gICAgICAgICAgY29tcG9zZTogY29tcG9zZSxcbiAgICAgICAgICBhbmRUaGVuOiBpbmNsdWRlJDUuYW5kVGhlbixcbiAgICAgICAgICBGb2xkYWJsZTogRm9sZGFibGUsXG4gICAgICAgICAgZm9sZExlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkUmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgQnNGb2xkYWJsZUV4dGVuc2lvbnM6IGluY2x1ZGUkNy5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucyxcbiAgICAgICAgICBhbnk6IGluY2x1ZGUkNy5hbnksXG4gICAgICAgICAgYWxsOiBpbmNsdWRlJDcuYWxsLFxuICAgICAgICAgIGNvbnRhaW5zQnk6IGluY2x1ZGUkNy5jb250YWluc0J5LFxuICAgICAgICAgIGNvbnRhaW5zOiBpbmNsdWRlJDcuY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZkJ5OiBpbmNsdWRlJDcuaW5kZXhPZkJ5LFxuICAgICAgICAgIGluZGV4T2Y6IGluY2x1ZGUkNy5pbmRleE9mLFxuICAgICAgICAgIG1pbkJ5OiBpbmNsdWRlJDcubWluQnksXG4gICAgICAgICAgbWluOiBpbmNsdWRlJDcubWluLFxuICAgICAgICAgIG1heEJ5OiBpbmNsdWRlJDcubWF4QnksXG4gICAgICAgICAgbWF4OiBpbmNsdWRlJDcubWF4LFxuICAgICAgICAgIGNvdW50Qnk6IGluY2x1ZGUkNy5jb3VudEJ5LFxuICAgICAgICAgIGxlbmd0aDogaW5jbHVkZSQ3Lmxlbmd0aCxcbiAgICAgICAgICBzaXplOiBpbmNsdWRlJDcuc2l6ZSxcbiAgICAgICAgICBjb3VudDogaW5jbHVkZSQ3LmNvdW50LFxuICAgICAgICAgIGZvckVhY2g6IGluY2x1ZGUkNy5mb3JFYWNoLFxuICAgICAgICAgIGZvckVhY2hXaXRoSW5kZXg6IGluY2x1ZGUkNy5mb3JFYWNoV2l0aEluZGV4LFxuICAgICAgICAgIGZpbmQ6IGluY2x1ZGUkNy5maW5kLFxuICAgICAgICAgIGZpbmRXaXRoSW5kZXg6IGluY2x1ZGUkNy5maW5kV2l0aEluZGV4LFxuICAgICAgICAgIHRvTGlzdDogaW5jbHVkZSQ3LnRvTGlzdCxcbiAgICAgICAgICB0b0FycmF5OiBpbmNsdWRlJDcudG9BcnJheSxcbiAgICAgICAgICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM6IGluY2x1ZGUkNy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zOiBpbmNsdWRlJDcuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZvbGRNYXA6IGluY2x1ZGUkNy5mb2xkTWFwLFxuICAgICAgICAgIGZvbGRXaXRoTW9ub2lkOiBpbmNsdWRlJDcuZm9sZFdpdGhNb25vaWQsXG4gICAgICAgICAgaW50ZXJjYWxhdGU6IGluY2x1ZGUkNy5pbnRlcmNhbGF0ZSxcbiAgICAgICAgICBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9uczogaW5jbHVkZSQ3LkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zOiBpbmNsdWRlJDcuRm9sZGFibGVNb25hZEV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVFcUV4dGVuc2lvbnM6IGluY2x1ZGUkNy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucyxcbiAgICAgICAgICBGb2xkYWJsZU9yZEV4dGVuc2lvbnM6IGluY2x1ZGUkNy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsXG4gICAgICAgICAgV2l0aEFwcGxpY2F0aXZlOiBXaXRoQXBwbGljYXRpdmUsXG4gICAgICAgICAgRXE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBPcmQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBTaG93OiB1bmRlZmluZWQsXG4gICAgICAgICAgSW5maXg6IEluZml4XG4gICAgICAgIH07XG59XG5cbnZhciB1bml0ID0gLyogT2sgKi9CbG9jay5fXygwLCBbdW5kZWZpbmVkXSk7XG5cbnZhciB0b09wdGlvbiA9IGdldE9rO1xuXG52YXIgbWFwT2sgPSBtYXA7XG5cbnZhciB0YXBPayA9IHRhcDtcblxudmFyIHRvVmFsaWRhdGlvbiA9IFJlbHVkZV9WYWxpZGF0aW9uLmZyb21SZXN1bHQ7XG5cbnZhciBmcm9tVmFsaWRhdGlvbiA9IFJlbHVkZV9WYWxpZGF0aW9uLnRvUmVzdWx0O1xuXG52YXIgbWFwTGVmdCA9IGluY2x1ZGUubWFwTGVmdDtcblxudmFyIG1hcFJpZ2h0ID0gaW5jbHVkZS5tYXBSaWdodDtcblxudmFyIG1hcEVycm9yID0gaW5jbHVkZS5tYXBFcnJvcjtcblxudmFyIGJpZm9sZExlZnQgPSBiaWZvbGRfbGVmdDtcblxudmFyIGJpZm9sZFJpZ2h0ID0gYmlmb2xkX3JpZ2h0O1xuXG5leHBvcnQge1xuICBvayAsXG4gIGVycm9yICxcbiAgdW5pdCAsXG4gIGdldE9rICxcbiAgdG9PcHRpb24gLFxuICBnZXRFcnJvciAsXG4gIGlzT2sgLFxuICBpc0Vycm9yICxcbiAgZm9sZCAsXG4gIGdldE9yRWxzZSAsXG4gIGdldE9yRWxzZUxhenkgLFxuICBtZXJnZSAsXG4gIGZsaXAgLFxuICBjb21wb3NlICxcbiAgYW5kVGhlbiAsXG4gIG1hcCAsXG4gIG1hcE9rICxcbiAgdGFwICxcbiAgdGFwT2sgLFxuICB0YXBFcnJvciAsXG4gIGFwcGx5ICxcbiAgbWFwMiAsXG4gIG1hcDMgLFxuICBtYXA0ICxcbiAgbWFwNSAsXG4gIHB1cmUgLFxuICBiaW5kICxcbiAgZmxhdE1hcCAsXG4gIGZsYXR0ZW4gLFxuICBhbHQgLFxuICBhbGlnbiAsXG4gIGFsaWduV2l0aCAsXG4gIGNhdGNoRXJyb3IgLFxuICBoYW5kbGVFcnJvciAsXG4gIG1hcEhhbmRsZUVycm9yICxcbiAgcmVjb3ZlciAsXG4gIGZyb21PcHRpb24gLFxuICBmcm9tT3B0aW9uTGF6eSAsXG4gIGVxQnkgLFxuICB0cmllcyAsXG4gIHRyaWVzQXNTdHJpbmcgLFxuICB0b1ZhbGlkYXRpb24gLFxuICBmcm9tVmFsaWRhdGlvbiAsXG4gIHRvVmFsaWRhdGlvbk5lbCAsXG4gIHRvVmFsaWRhdGlvbk5lYSAsXG4gIEJpZnVuY3RvciAsXG4gIGJpbWFwICxcbiAgbWFwTGVmdCAsXG4gIG1hcFJpZ2h0ICxcbiAgbWFwRXJyb3IgLFxuICBCaWZvbGRhYmxlICxcbiAgYmlmb2xkTGVmdCAsXG4gIGJpZm9sZFJpZ2h0ICxcbiAgV2l0aEVycm9yICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBKc19leG4gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfZXhuLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfVm9pZCBmcm9tIFwiLi9SZWx1ZGVfVm9pZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0pzX0V4biBmcm9tIFwiLi9qcy9SZWx1ZGVfSnNfRXhuLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfUmVzdWx0IGZyb20gXCIuL1JlbHVkZV9SZXN1bHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GdW5jdGlvbiBmcm9tIFwiLi9SZWx1ZGVfRnVuY3Rpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfanNfZXhjZXB0aW9ucyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2pzX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fQmFzZSBmcm9tIFwiLi9vcHRpb24vUmVsdWRlX09wdGlvbl9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BbHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0JpZnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0JpZnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZEVycm9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRFcnJvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRUaHJvdyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkVGhyb3cuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZC5icy5qc1wiO1xuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbYV0pO1xufVxuXG5mdW5jdGlvbiBwdXJlV2l0aFZvaWQoYSkge1xuICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFthXSk7XG59XG5cbmZ1bmN0aW9uICQkdGhyb3coZSkge1xuICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbZV0pO1xufVxuXG5mdW5jdGlvbiB0aHJvd1dpdGhWb2lkKGUpIHtcbiAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2VdKTtcbn1cblxuZnVuY3Rpb24gc3VzcGVuZChnZXRBKSB7XG4gIHJldHVybiAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgW2dldEFdKTtcbn1cblxuZnVuY3Rpb24gc3VzcGVuZFdpdGhWb2lkKGdldEEpIHtcbiAgcmV0dXJuIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbZ2V0QV0pO1xufVxuXG5mdW5jdGlvbiBzdXNwZW5kVGhyb3coZ2V0RXJyb3IpIHtcbiAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGdldEVycm9yLCB1bmRlZmluZWQpXSk7XG4gICAgICAgICAgICAgIH0pXSk7XG59XG5cbmZ1bmN0aW9uIHN1c3BlbmRJTyhnZXRJTykge1xuICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgW2dldElPXSk7XG59XG5cbmZ1bmN0aW9uIGFzeW5jKG9uRG9uZSkge1xuICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbb25Eb25lXSk7XG59XG5cbmZ1bmN0aW9uIGZyb21PcHRpb24oZ2V0RXJyb3IsIG9wdGlvbikge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9CYXNlLmZvbGRMYXp5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZ2V0RXJyb3IsIHVuZGVmaW5lZCldKTtcbiAgICAgICAgICAgICAgfSksIHB1cmUsIG9wdGlvbik7XG59XG5cbmZ1bmN0aW9uIGZyb21SZXN1bHQocmVzKSB7XG4gIHJldHVybiBSZWx1ZGVfUmVzdWx0LmZvbGQoJCR0aHJvdywgcHVyZSwgcmVzKTtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIGlvKSB7XG4gIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgaW9cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gJGxlc3MkaGFzaCRncmVhdChpb0EsIGFUb0IpIHtcbiAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgIGFUb0IsXG4gICAgICAgICAgICBpb0FcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGFwKGYpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGYsIGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgICAgIF0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhcHBseShpb0FUb0IsIGlvQSkge1xuICByZXR1cm4gLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICBpb0FUb0IsXG4gICAgICAgICAgICBpb0FcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmxhdE1hcChyVG9JT0EsIGlvUikge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIHJUb0lPQSxcbiAgICAgICAgICAgIGlvUlxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiaW5kKGlvQSwgYVRvSU9CKSB7XG4gIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgYVRvSU9CLFxuICAgICAgICAgICAgaW9BXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvbmQoZiwgbmV3QSwgZXJyLCBpb0EpIHtcbiAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzEoZiwgYSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW25ld0FdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2Vycl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpb0FcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29uZEVycm9yKGYsIGVyciwgaW9BKSB7XG4gIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgaWYgKEN1cnJ5Ll8xKGYsIGEpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtlcnJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW9BXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJ1bkFzeW5jKF9vbkRvbmUsIF9pb0EpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpb0EgPSBfaW9BO1xuICAgIHZhciBvbkRvbmUgPSBfb25Eb25lO1xuICAgIHN3aXRjaCAoaW9BLnRhZyB8IDApIHtcbiAgICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW2lvQVswXV0pKTtcbiAgICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtpb0FbMF1dKSk7XG4gICAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShpb0FbMF0sIHVuZGVmaW5lZCldKSk7XG4gICAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICAgIF9pb0EgPSBDdXJyeS5fMShpb0FbMF0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICAgIHJldHVybiBDdXJyeS5fMShpb0FbMF0sIG9uRG9uZSk7XG4gICAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICAgIHZhciByMFRvQSA9IGlvQVswXTtcbiAgICAgICAgICBfaW9BID0gaW9BWzFdO1xuICAgICAgICAgIF9vbkRvbmUgPSAoZnVuY3Rpb24ob25Eb25lLHIwVG9BKXtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHJlc3VsdEUpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKHIwVG9BLCByZXN1bHRFWzBdKV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgfShvbkRvbmUscjBUb0EpKTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jUGFyMigoZnVuY3Rpb24ob25Eb25lKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXN1bHRSMFRvQSwgcmVzdWx0UjApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCBSZWx1ZGVfUmVzdWx0LmFwcGx5KHJlc3VsdFIwVG9BLCByZXN1bHRSMCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0ob25Eb25lKSksIGlvQVswXSwgaW9BWzFdKTtcbiAgICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICAgIHZhciByMFRvSU9BID0gaW9BWzBdO1xuICAgICAgICAgIF9pb0EgPSBpb0FbMV07XG4gICAgICAgICAgX29uRG9uZSA9IChmdW5jdGlvbihvbkRvbmUscjBUb0lPQSl7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbcmVzdWx0RVswXV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShyMFRvSU9BLCByZXN1bHRFWzBdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIH0ob25Eb25lLHIwVG9JT0EpKTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICBcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJ1bkFzeW5jUGFyMihvbkRvbmUsIGlvQSwgaW9CKSB7XG4gIHZhciByZWZBID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIHJlZkIgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICB1bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHJlc3VsdEEpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0QiA9IHJlZkIuY29udGVudHM7XG4gICAgICAgICAgaWYgKHJlc3VsdEIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKG9uRG9uZSwgcmVzdWx0QSwgcmVzdWx0Qik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZkEuY29udGVudHMgPSByZXN1bHRBO1xuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBpb0EpO1xuICByZXR1cm4gdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHRCKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdEEgPSByZWZBLmNvbnRlbnRzO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRBICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihvbkRvbmUsIHJlc3VsdEEsIHJlc3VsdEIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZWZCLmNvbnRlbnRzID0gcmVzdWx0QjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgaW9CKTtcbn1cblxuZnVuY3Rpb24gdW5zYWZlUnVuQXN5bmNQYXIzKG9uRG9uZSwgaW9BLCBpb0IsIGlvQykge1xuICB2YXIgcmVmQSA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciByZWZCID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIHJlZkMgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICB1bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHJlc3VsdEEpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSByZWZCLmNvbnRlbnRzO1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gcmVmQy5jb250ZW50cztcbiAgICAgICAgICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMyhvbkRvbmUsIHJlc3VsdEEsIG1hdGNoLCBtYXRjaCQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmQS5jb250ZW50cyA9IHJlc3VsdEE7XG4gICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIGlvQSk7XG4gIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0Qikge1xuICAgICAgICAgIHZhciBtYXRjaCA9IHJlZkEuY29udGVudHM7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSByZWZDLmNvbnRlbnRzO1xuICAgICAgICAgIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkICYmIG1hdGNoJDEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8zKG9uRG9uZSwgbWF0Y2gsIHJlc3VsdEIsIG1hdGNoJDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWZCLmNvbnRlbnRzID0gcmVzdWx0QjtcbiAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgaW9CKTtcbiAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0Qykge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHJlZkEuY29udGVudHM7XG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoJDEgPSByZWZCLmNvbnRlbnRzO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gdW5kZWZpbmVkICYmIG1hdGNoJDEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8zKG9uRG9uZSwgbWF0Y2gsIG1hdGNoJDEsIHJlc3VsdEMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZWZDLmNvbnRlbnRzID0gcmVzdWx0QztcbiAgICAgICAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgaW9DKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZUFwcGx5KGlvUjBUb0FUb0IsIGlvUjAsIGlvQlRvQykge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0FUb0IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0FUb0IsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHBhcnRpYWxfYXJnLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb0JUb0NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlvUjBUb0FUb0JcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZUZsYXRNYXAocjBUb0lPQVRvQiwgaW9SMCwgaW9CVG9DKSB7XG4gIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGFUb0IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb0JUb0NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIwVG9JT0FUb0IsIHIwKVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW9SMFxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb21wb3NlU3VzcGVuZElPKGdldElPQVRvQiwgaW9CVG9DKSB7XG4gIHN3aXRjaCAoaW9CVG9DLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgdmFyIGJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYVRvQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT0FUb0IsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIGlvQlRvQztcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldEJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYVRvQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ2V0QlRvQywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQVRvQiwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYVRvQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQlRvQywgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9BVG9CLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQlRvQywgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiVG9DID0gcmVzdWx0RVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoZ2V0SU9BVG9CLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICB2YXIgaW9SMCA9IGlvQlRvQ1sxXTtcbiAgICAgICAgdmFyIHIwVG9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhVG9CKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT0FUb0IsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgdmFyIGlvUjAkMSA9IGlvQlRvQ1sxXTtcbiAgICAgICAgdmFyIGlvUjBUb0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGFUb0IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0JUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShyMFRvQlRvQywgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwJDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0JUb0NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQVRvQiwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciBpb1IwJDIgPSBpb0JUb0NbMV07XG4gICAgICAgIHZhciByMFRvSU9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhVG9CKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMFRvSU9CVG9DLCByMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjAkMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9BVG9CLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb3NlUHVyZShhVG9CLCBpb0JUb0MpIHtcbiAgc3dpdGNoIChpb0JUb0MudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICB2YXIgYlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBpb0JUb0M7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ2V0QlRvQywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQlRvQywgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUJUb0MsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJUb0MgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICB2YXIgcjBUb0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgaW9CVG9DWzFdXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQlRvQywgcjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb0JUb0NbMF1cbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBpb0JUb0NbMV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIwVG9JT0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYlRvQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMFRvSU9CVG9DLCByMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGlvQlRvQ1sxXVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VNYXAocjBUb0FUb0IsIGlvUjAsIGlvQlRvQykge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9BVG9CLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHBhcnRpYWxfYXJnLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpb0JUb0NcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlvUjBcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZUFzeW5jKG9uRG9uZUFUb0IsIGlvQlRvQykge1xuICBzd2l0Y2ggKGlvQlRvQy50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHZhciBiVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQVRvQiwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIGlvQlRvQztcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldEJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVBVG9CLCAoZnVuY3Rpb24gKHJlc3VsdEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhVG9CID0gcmVzdWx0RVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKGdldEJUb0MsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQVRvQiwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiVG9DID0gcmVzdWx0RVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShnZXRJT0JUb0MsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQVRvQiwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQlRvQywgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiVG9DID0gcmVzdWx0RVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIGlvUjAgPSBpb0JUb0NbMV07XG4gICAgICAgIHZhciByMFRvQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUFUb0IsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShyMFRvQlRvQywgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHZhciBpb1IwJDEgPSBpb0JUb0NbMV07XG4gICAgICAgIHZhciBpb1IwVG9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQVRvQiwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9CVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwJDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0JUb0NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciBpb1IwJDIgPSBpb0JUb0NbMV07XG4gICAgICAgIHZhciByMFRvSU9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQVRvQiwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYlRvQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjBUb0lPQlRvQywgcjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwJDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9zZVRocm93KGUsIGlvQlRvQykge1xuICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbZV0pO1xufVxuXG5mdW5jdGlvbiBjb21wb3NlU3VzcGVuZChnZXRBVG9CLCBpb0JUb0MpIHtcbiAgc3dpdGNoIChpb0JUb0MudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICB2YXIgYlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKGdldEFUb0IsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmcsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIGlvQlRvQztcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldEJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShnZXRCVG9DLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyQxID0gQ3VycnkuXzEoZ2V0QVRvQiwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZyQxLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShnZXRBVG9CLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZywgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9CVG9DLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQlRvQywgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYlRvQyA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShnZXRBVG9CLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmcsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIwVG9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9CVG9DLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnJDEgPSBDdXJyeS5fMShnZXRBVG9CLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHBhcnRpYWxfYXJnJDEsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBpb0JUb0NbMV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9CVG9DLCByMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShyMFRvQlRvQywgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmckMSA9IEN1cnJ5Ll8xKGdldEFUb0IsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZyQxLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9CVG9DWzBdXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgaW9CVG9DWzFdXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciByMFRvSU9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKGdldEFUb0IsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHBhcnRpYWxfYXJnLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMFRvSU9CVG9DLCByMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGlvQlRvQ1sxXVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2UoaW9CVG9DLCBpb0FUb0IpIHtcbiAgc3dpdGNoIChpb0FUb0IudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gY29tcG9zZVB1cmUoaW9BVG9CWzBdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VUaHJvdyhpb0FUb0JbMF0sIGlvQlRvQyk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHJldHVybiBjb21wb3NlU3VzcGVuZChpb0FUb0JbMF0sIGlvQlRvQyk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VTdXNwZW5kSU8oaW9BVG9CWzBdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VBc3luYyhpb0FUb0JbMF0sIGlvQlRvQyk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VNYXAoaW9BVG9CWzBdLCBpb0FUb0JbMV0sIGlvQlRvQyk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gY29tcG9zZUFwcGx5KGlvQVRvQlswXSwgaW9BVG9CWzFdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICByZXR1cm4gY29tcG9zZUZsYXRNYXAoaW9BVG9CWzBdLCBpb0FUb0JbMV0sIGlvQlRvQyk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gYW5kVGhlbihpb0FUb0IsIGlvQlRvQykge1xuICByZXR1cm4gY29tcG9zZShpb0JUb0MsIGlvQVRvQik7XG59XG5cbmZ1bmN0aW9uIG1hcEVycm9yKGUxVG9FMiwgaW9BKSB7XG4gIHN3aXRjaCAoaW9BLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbaW9BWzBdXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZTFUb0UyLCBpb0FbMF0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgW2lvQVswXV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT0EgPSBpb0FbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXBFcnJvcihlMVRvRTIsIEN1cnJ5Ll8xKGdldElPQSwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUEsIChmdW5jdGlvbiAocmVzdWx0QSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgQ3VycnkuXzIoUmVsdWRlX1Jlc3VsdC5tYXBFcnJvciwgZTFUb0UyLCByZXN1bHRBKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICBpb0FbMF0sXG4gICAgICAgICAgICAgICAgICBtYXBFcnJvcihlMVRvRTIsIGlvQVsxXSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgIG1hcEVycm9yKGUxVG9FMiwgaW9BWzBdKSxcbiAgICAgICAgICAgICAgICAgIG1hcEVycm9yKGUxVG9FMiwgaW9BWzFdKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgclRvSU9BID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXBFcnJvcihlMVRvRTIsIEN1cnJ5Ll8xKHJUb0lPQSwgcikpO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIG1hcEVycm9yKGUxVG9FMiwgaW9BWzFdKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHRhcEVycm9yKGYsIGlvKSB7XG4gIHJldHVybiBtYXBFcnJvcigoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBDdXJyeS5fMShmLCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgfSksIGlvKTtcbn1cblxuZnVuY3Rpb24gY2F0Y2hFcnJvcihlVG9JT0EsIGlvQSkge1xuICBzd2l0Y2ggKGlvQS50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvQVswXV0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGVUb0lPQSwgaW9BWzBdKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbaW9BWzBdXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCBDdXJyeS5fMShnZXRJT0EsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZUEgPSBpb0FbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVBLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBDdXJyeS5fMShlVG9JT0EsIGFbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW2FbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yTWFwKGVUb0lPQSwgaW9BWzBdLCBpb0FbMV0pO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3JBcHBseShlVG9JT0EsIGlvQVswXSwgaW9BWzFdKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3JGbGF0TWFwKGVUb0lPQSwgaW9BWzBdLCBpb0FbMV0pO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3JNYXAoZVRvSU9BLCByMFRvQSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEocjBUb0EsIGlvUjBbMF0pXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGVUb0lPQSwgaW9SMFswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZVIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVIwLCAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocjAudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luYyhvbkRvbmUsIEN1cnJ5Ll8xKGVUb0lPQSwgcjBbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKHIwVG9BLCByMFswXSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHIxVG9SMCwgcjBUb0EsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlKC8qIFB1cmUgKi9CbG9jay5fXygwLCBbcjBUb0FdKSwgaW9SMFswXSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciByMVRvSU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHIxVG9JT1IwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3JBcHBseShlVG9JT0EsIGlvUjBUb0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgdmFyIHIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0EsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGVUb0lPQSwgaW9SMFswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZVIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVIwLCAoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBDdXJyeS5fMShlVG9JT0EsIGVbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luYyhvbkRvbmUsIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtlWzBdXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZShpb1IwVG9BLCAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvUjBbMF1dKSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2UoaW9SMFRvQSwgaW9SMFswXSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciBpb1IxID0gaW9SMFsxXTtcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuX18xKHIwVG9BKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjFUb0lPUjAsIHIxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gY2F0Y2hFcnJvckZsYXRNYXAoZVRvSU9BLCByMFRvSU9BLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgQ3VycnkuXzEocjBUb0lPQSwgaW9SMFswXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGVUb0lPQSwgaW9SMFswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9JT0EsIEN1cnJ5Ll8xKGdldFIwLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIwVG9JT0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT1IwLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIwLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBDdXJyeS5fMShlVG9JT0EsIHIwWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBjYXRjaEVycm9yKGVUb0lPQSwgQ3VycnkuXzEocjBUb0lPQSwgcjBbMF0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChyMVRvUjAsIHIwVG9JT0EsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgdmFyIGlvUjFUb1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxVG9SMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvSU9BLCBDdXJyeS5fMShyMVRvUjAsIHIxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMVRvUjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIwVG9JT0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMVRvSU9SMCwgcjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlVG9BLCBpb0EpIHtcbiAgcmV0dXJuIGNhdGNoRXJyb3IoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZVRvQSwgZSldKTtcbiAgICAgICAgICAgICAgfSksIGlvQSk7XG59XG5cbmZ1bmN0aW9uIG1hcEhhbmRsZUVycm9yKGFUb0IsIGVUb0IsIGlvQUUpIHtcbiAgcmV0dXJuIGhhbmRsZUVycm9yKGVUb0IsIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICBhVG9CLFxuICAgICAgICAgICAgICAgIGlvQUVcbiAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiBiaW1hcChhVG9CLCBlMVRvRTIsIGlvKSB7XG4gIHJldHVybiBtYXBFcnJvcihlMVRvRTIsIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICBhVG9CLFxuICAgICAgICAgICAgICAgIGlvXG4gICAgICAgICAgICAgIF0pKTtcbn1cblxuZnVuY3Rpb24gYml0YXAoZiwgZywgaW8pIHtcbiAgcmV0dXJuIGJpbWFwKChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGYsIGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgQ3VycnkuXzEoZywgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgIH0pLCBpbyk7XG59XG5cbmZ1bmN0aW9uIGFsdChpbzEsIGlvMikge1xuICByZXR1cm4gY2F0Y2hFcnJvcigoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlvMjtcbiAgICAgICAgICAgICAgfSksIGlvMSk7XG59XG5cbmZ1bmN0aW9uIGFsaWduKGlvQSwgaW9CKSB7XG4gIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luY1BhcjIoKGZ1bmN0aW9uIChyZXN1bHRBLCByZXN1bHRCKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0QS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEIudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0QSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbLyogVGhhdCAqL0Jsb2NrLl9fKDEsIFtyZXN1bHRCWzBdXSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gcmVzdWx0QVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRCLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFsvKiBUaGlzICovQmxvY2suX18oMCwgW2FdKV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWy8qIEJvdGggKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdEJbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpb0EsIGlvQik7XG4gICAgICAgICAgICAgIH0pXSk7XG59XG5cbmZ1bmN0aW9uIGFsaWduV2l0aChmLCBmYSwgZmIpIHtcbiAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgIGYsXG4gICAgICAgICAgICBhbGlnbihmYSwgZmIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG9yRWxzZShmYWxsYmFjaywgaW8pIHtcbiAgcmV0dXJuIGNhdGNoRXJyb3IoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgICAgICAgfSksIGlvKTtcbn1cblxuZnVuY3Rpb24gdHJpZXMoZ2V0QSkge1xuICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZ2V0QSwgdW5kZWZpbmVkKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAocmF3X2V4bil7XG4gICAgICAgICAgICAgICAgICB2YXIgZXhuID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfZXhuKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtleG5dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXSk7XG59XG5cbmZ1bmN0aW9uIHRyaWVzSlMoZ2V0QSkge1xuICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZ2V0QSwgdW5kZWZpbmVkKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAocmF3X2pzRXhuKXtcbiAgICAgICAgICAgICAgICAgIHZhciBqc0V4biA9IENhbWxfanNfZXhjZXB0aW9ucy5pbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24ocmF3X2pzRXhuKTtcbiAgICAgICAgICAgICAgICAgIGlmIChqc0V4blswXSA9PT0gSnNfZXhuLiQkRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2pzRXhuWzFdXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIganNFeG4kMSA9IFJlbHVkZV9Kc19FeG4udW5zYWZlRnJvbUV4bihqc0V4bik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbanNFeG4kMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSldKTtcbn1cblxuZnVuY3Rpb24gZmxpcChpb0EpIHtcbiAgc3dpdGNoIChpb0EudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbaW9BWzBdXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtpb0FbMF1dKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldEEgPSBpb0FbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShnZXRBLCB1bmRlZmluZWQpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsaXAoQ3VycnkuXzEoZ2V0SU9BLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVBID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQSwgKGZ1bmN0aW9uIChyZXN1bHRBKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCBSZWx1ZGVfUmVzdWx0LmZsaXAocmVzdWx0QSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICByZXR1cm4gZmxpcE1hcChpb0FbMF0sIGlvQVsxXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gZmxpcEFwcGx5KGlvQVswXSwgaW9BWzFdKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgcmV0dXJuIGZsaXBGbGF0TWFwKGlvQVswXSwgaW9BWzFdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBmbGlwTWFwKHIwVG9BLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShyMFRvQSwgaW9SMFswXSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvUjBbMF1dKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldFIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKHIwVG9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSldKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGlwKC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIwVG9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChyZXN1bHRSMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgUmVsdWRlX1Jlc3VsdC5mbGlwKFJlbHVkZV9SZXN1bHQubWFwKHIwVG9BLCByZXN1bHRSMCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBmbGlwKC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHIxVG9SMCwgcjBUb0EsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZSgvKiBQdXJlICovQmxvY2suX18oMCwgW3IwVG9BXSksIGlvUjBbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgclRvSU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBmbGlwKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHJUb0lPUjAsIHIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBmbGlwQXBwbHkoaW9SMFRvQSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICB2YXIgcjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0EsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbaW9SMFswXV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0EsIEN1cnJ5Ll8xKGdldFIwLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsaXAoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbZVswXV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByMCA9IGVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW2VbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZVswXV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZShpb1IwVG9BLCAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvUjBbMF1dKSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gZmxpcCgvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlKGlvUjBUb0EsIGlvUjBbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIxVG9JT1IwLCByMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGZsaXBGbGF0TWFwKHIwVG9JT0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIGZsaXAoQ3VycnkuXzEocjBUb0lPQSwgaW9SMFswXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbaW9SMFswXV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxpcChDdXJyeS5fMShyMFRvSU9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsaXAoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIwVG9JT0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT1IwLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZVIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVIwLCAoZnVuY3Rpb24gKHJlc3VsdFIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0UjAudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3Jlc3VsdFIwWzBdXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgZmxpcChDdXJyeS5fMShyMFRvSU9BLCByZXN1bHRSMFswXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBmbGlwKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChyMVRvUjAsIHIwVG9JT0EsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgdmFyIGlvUjFUb1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMVRvUjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0lPQSwgQ3VycnkuXzEocjFUb1IwLCByMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjFUb1IwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHJUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIwVG9JT0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyVG9JT1IwLCByKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gc3VtbW9uRXJyb3IoaW9BKSB7XG4gIHN3aXRjaCAoaW9BLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbLyogT2sgKi9CbG9jay5fXygwLCBbaW9BWzBdXSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWy8qIEVycm9yICovQmxvY2suX18oMSwgW2lvQVswXV0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRBID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGdldEEsIHVuZGVmaW5lZCldKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9BID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoQ3VycnkuXzEoZ2V0SU9BLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVBID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQSwgKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3Jlc3VsdF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yTWFwKGlvQVswXSwgaW9BWzFdKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvckFwcGx5KGlvQVswXSwgaW9BWzFdKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yRmxhdE1hcChpb0FbMF0sIGlvQVsxXSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gc3VtbW9uRXJyb3JNYXAocjBUb0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEocjBUb0EsIGlvUjBbMF0pXSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWy8qIEVycm9yICovQmxvY2suX18oMSwgW2lvUjBbMF1dKV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKHIwVG9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSldKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdW1tb25FcnJvcigvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAocmVzUjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW1JlbHVkZV9SZXN1bHQubWFwKHIwVG9BLCByZXNSMCldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocjFUb1IwLCByMFRvQSwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZSgvKiBQdXJlICovQmxvY2suX18oMCwgW3IwVG9BXSksIGlvUjBbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIxVG9JT1IwLCByMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHN1bW1vbkVycm9yQXBwbHkoaW9SMFRvQSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICB2YXIgcjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWy8qIEVycm9yICovQmxvY2suX18oMSwgW2lvUjBbMF1dKV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbcmVzdWx0RV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByMCA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBzdW1tb25FcnJvcigvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvcigvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlKGlvUjBUb0EsIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbaW9SMFswXV0pKSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvcigvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlKGlvUjBUb0EsIGlvUjBbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMVRvSU9SMCwgcjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBzdW1tb25FcnJvckZsYXRNYXAocjBUb0lPQSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoQ3VycnkuXzEocjBUb0lPQSwgaW9SMFswXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbLyogRXJyb3IgKi9CbG9jay5fXygxLCBbaW9SMFswXV0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdW1tb25FcnJvcihDdXJyeS5fMShyMFRvSU9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvSU9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZVswXV0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgc3VtbW9uRXJyb3IoQ3VycnkuXzEocjBUb0lPQSwgZVswXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocjFUb1IwLCByMFRvSU9BLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHZhciBpb1IxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxVG9SMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvSU9BLCBDdXJyeS5fMShyMVRvUjAsIHIxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMVRvUjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuX18xKHIwVG9JT0EpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjFUb0lPUjAsIHIxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zdW1tb25FcnJvcihpb1Jlc3VsdEEpIHtcbiAgc3dpdGNoIChpb1Jlc3VsdEEudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mb2xkKCQkdGhyb3csIHB1cmUsIGlvUmVzdWx0QVswXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gUmVsdWRlX1ZvaWQuYWJzdXJkKGlvUmVzdWx0QVswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSZXN1bHRBID0gaW9SZXN1bHRBWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mb2xkKCQkdGhyb3csIHB1cmUsIEN1cnJ5Ll8xKGdldFJlc3VsdEEsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1Jlc3VsdEEgPSBpb1Jlc3VsdEFbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKEN1cnJ5Ll8xKGdldElPUmVzdWx0QSwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUmVzdWx0UmVzdWx0QSA9IGlvUmVzdWx0QVswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lUmVzdWx0QSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSZXN1bHRSZXN1bHRBLCAoZnVuY3Rpb24gKHJlc3VsdFJlc3VsdEEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRSZXN1bHRBLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1ZvaWQuYWJzdXJkKHJlc3VsdFJlc3VsdEFbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVJlc3VsdEEsIHJlc3VsdFJlc3VsdEFbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvck1hcChpb1Jlc3VsdEFbMF0sIGlvUmVzdWx0QVsxXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvckFwcGx5KGlvUmVzdWx0QVswXSwgaW9SZXN1bHRBWzFdKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3JGbGF0TWFwKGlvUmVzdWx0QVswXSwgaW9SZXN1bHRBWzFdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN1bW1vbkVycm9yTWFwKHIwVG9SZXN1bHRBLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiBSZWx1ZGVfUmVzdWx0LmZvbGQoJCR0aHJvdywgcHVyZSwgQ3VycnkuXzEocjBUb1Jlc3VsdEEsIGlvUjBbMF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBSZWx1ZGVfVm9pZC5hYnN1cmQoaW9SMFswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfUmVzdWx0LmZvbGQoJCR0aHJvdywgcHVyZSwgQ3VycnkuXzEocjBUb1Jlc3VsdEEsIEN1cnJ5Ll8xKGdldFIwLCB1bmRlZmluZWQpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvUmVzdWx0QSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmVSZXN1bHRBKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVIwLCAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocjAudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfVm9pZC5hYnN1cmQocjBbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVJlc3VsdEEsIEN1cnJ5Ll8xKHIwVG9SZXN1bHRBLCByMFswXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICB2YXIgcjFUb1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9SZXN1bHRBLCBDdXJyeS5fMShyMVRvUjAsIHIxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2UoLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtyMFRvUmVzdWx0QV0pLCBpb1IwWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvUmVzdWx0QSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIxVG9JT1IwLCByMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3VtbW9uRXJyb3JBcHBseShpb1IwVG9SZXN1bHRBLCBpb1IwKSB7XG4gIHJldHVybiB1bnN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvUmVzdWx0QSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShyMFRvUmVzdWx0QSwgcjApXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgaW9SMFRvUmVzdWx0QVxuICAgICAgICAgICAgICBdKSk7XG59XG5cbmZ1bmN0aW9uIHVuc3VtbW9uRXJyb3JGbGF0TWFwKHIwVG9JT1Jlc3VsdEEsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoQ3VycnkuXzEocjBUb0lPUmVzdWx0QSwgaW9SMFswXSkpO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9Wb2lkLmFic3VyZChpb1IwWzBdKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldFIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoQ3VycnkuXzEocjBUb0lPUmVzdWx0QSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvSU9SZXN1bHRBLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZVJlc3VsdEEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyMC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9Wb2lkLmFic3VyZChyMFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lUmVzdWx0QSwgdW5zdW1tb25FcnJvcihDdXJyeS5fMShyMFRvSU9SZXN1bHRBLCByMFswXSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChyMVRvUjAsIHIwVG9JT1Jlc3VsdEEsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgdmFyIGlvUjEgPSBpb1IwWzFdO1xuICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjFUb1IwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMFRvSU9SZXN1bHRBLCBDdXJyeS5fMShyMVRvUjAsIHIxKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMF1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fXzEocjBUb0lPUmVzdWx0QSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMVRvSU9SMCwgcjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWxheShtaWxsaXMpIHtcbiAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFt1bmRlZmluZWRdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksIG1pbGxpcyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pXSk7XG59XG5cbmZ1bmN0aW9uIGRlbGF5V2l0aFZvaWQobWlsbGlzKSB7XG4gIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbdW5kZWZpbmVkXSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBtaWxsaXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KV0pO1xufVxuXG5mdW5jdGlvbiB3aXRoRGVsYXlBZnRlcihtaWxsaXMsIGlvKSB7XG4gIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5KG1pbGxpcylcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlvXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhEZWxheUJlZm9yZShtaWxsaXMsIGlvKSB7XG4gIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbztcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBkZWxheShtaWxsaXMpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGltbWVkaWF0ZU9wdCwgaW50ZXJ2YWxNc09wdCwgaW8pIHtcbiAgdmFyIGltbWVkaWF0ZSA9IGltbWVkaWF0ZU9wdCAhPT0gdW5kZWZpbmVkID8gaW1tZWRpYXRlT3B0IDogZmFsc2U7XG4gIHZhciBpbnRlcnZhbE1zID0gaW50ZXJ2YWxNc09wdCAhPT0gdW5kZWZpbmVkID8gaW50ZXJ2YWxNc09wdCA6IDE1MDtcbiAgdmFyIGN1cnJlbnRseURlYm91bmNlZElPID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIHN0YXJ0RGVib3VuY2VkSU8gPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgZGVib3VuY2VkSU8gPSBkZWxheShpbnRlcnZhbE1zKTtcbiAgICBjdXJyZW50bHlEZWJvdW5jZWRJTy5jb250ZW50cyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnB1cmUoZGVib3VuY2VkSU8pO1xuICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzaG91bGRSdW5JTyA9IFJlbHVkZV9PcHRpb25fQmFzZS5mb2xkKGZhbHNlLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWJvdW5jZWRJTyA9PT0gcGFyYW07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgY3VycmVudGx5RGVib3VuY2VkSU8uY29udGVudHMpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZFJ1bklPKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseURlYm91bmNlZElPLmNvbnRlbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3VsZFJ1bklPO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBkZWJvdW5jZWRJT1xuICAgICAgICAgICAgXSk7XG4gIH07XG4gIHJldHVybiAoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHZhciBtYXRjaCA9IGN1cnJlbnRseURlYm91bmNlZElPLmNvbnRlbnRzO1xuICAgICAgdmFyIGltbWVkaWF0ZWx5UmFuSU8gPSBpbW1lZGlhdGUgJiYgbWF0Y2ggPT09IHVuZGVmaW5lZCA/IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnB1cmUoLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnB1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShpbywgYSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgIH0pXSkpIDogdW5kZWZpbmVkO1xuICAgICAgdmFyIGRlYm91bmNlZElPXzAwMCA9IGZ1bmN0aW9uIChzaG91bGRSdW5JTykge1xuICAgICAgICBpZiAoc2hvdWxkUnVuSU8gJiYgUmVsdWRlX09wdGlvbl9CYXNlLmlzTm9uZShpbW1lZGlhdGVseVJhbklPKSkge1xuICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnB1cmUsXG4gICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGlvLCBhKVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbdW5kZWZpbmVkXSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgZGVib3VuY2VkSU9fMDAxID0gc3RhcnREZWJvdW5jZWRJTyh1bmRlZmluZWQpO1xuICAgICAgdmFyIGRlYm91bmNlZElPID0gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICBkZWJvdW5jZWRJT18wMDAsXG4gICAgICAgICAgZGVib3VuY2VkSU9fMDAxXG4gICAgICAgIF0pO1xuICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2UoZGVib3VuY2VkSU8sIGltbWVkaWF0ZWx5UmFuSU8pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0aHJvdHRsZShpbnRlcnZhbE1zT3B0LCBpbykge1xuICB2YXIgaW50ZXJ2YWxNcyA9IGludGVydmFsTXNPcHQgIT09IHVuZGVmaW5lZCA/IGludGVydmFsTXNPcHQgOiAxNTA7XG4gIHZhciBjdXJyZW50bHlUaHJvdHRsZWQgPSB7XG4gICAgY29udGVudHM6IGZhbHNlXG4gIH07XG4gIHZhciBzdGFydFRocm90dGxlID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgY3VycmVudGx5VGhyb3R0bGVkLmNvbnRlbnRzID0gdHJ1ZTtcbiAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgIGN1cnJlbnRseVRocm90dGxlZC5jb250ZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgfSksIGludGVydmFsTXMpO1xuICAgIFxuICB9O1xuICByZXR1cm4gKGZ1bmN0aW9uIChhKSB7XG4gICAgICBpZiAoY3VycmVudGx5VGhyb3R0bGVkLmNvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW3VuZGVmaW5lZF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhcnRUaHJvdHRsZSh1bmRlZmluZWQpO1xuICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMucHVyZSxcbiAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGlvLCBhKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG52YXIgQmlmdW5jdG9yID0ge1xuICBiaW1hcDogYmltYXBcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfQmlmdW5jdG9yLkJpZnVuY3RvckV4dGVuc2lvbnMoQmlmdW5jdG9yKTtcblxudmFyIG1hcEVycm9yJDEgPSBpbmNsdWRlLm1hcEVycm9yO1xuXG5mdW5jdGlvbiBXaXRoRXJyb3IoRSkge1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckV4dGVuc2lvbnMoRnVuY3Rvcik7XG4gIHZhciBBbHQgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYWx0OiBhbHRcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRFeHRlbnNpb25zKEFsdCk7XG4gIHZhciBBcHBseSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHlcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMiA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5RXh0ZW5zaW9ucyhBcHBseSk7XG4gIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZVxuICB9O1xuICB2YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlKTtcbiAgdmFyIFNlbWlhbGlnbiA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhbGlnbjogYWxpZ24sXG4gICAgYWxpZ25XaXRoOiBhbGlnbldpdGhcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduLlNlbWlhbGlnbkV4dGVuc2lvbnMoU2VtaWFsaWduKTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kXG4gIH07XG4gIHZhciBpbmNsdWRlJDQgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuICB2YXIgTW9uYWRUaHJvdyA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZSxcbiAgICBmbGF0X21hcDogYmluZCxcbiAgICB0aHJvd0Vycm9yOiAkJHRocm93XG4gIH07XG4gIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkVGhyb3cuTW9uYWRUaHJvd0V4dGVuc2lvbnMoTW9uYWRUaHJvdyk7XG4gIHZhciBNb25hZEVycm9yID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kLFxuICAgIHRocm93RXJyb3I6ICQkdGhyb3csXG4gICAgY2F0Y2hFcnJvcjogY2F0Y2hFcnJvclxuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZEVycm9yLk1vbmFkRXJyb3JFeHRlbnNpb25zKE1vbmFkRXJyb3IpO1xuICB2YXIgU2VtaWdyb3Vwb2lkID0ge1xuICAgIGNvbXBvc2U6IGNvbXBvc2VcbiAgfTtcbiAgdmFyIGluY2x1ZGUkNSA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZC5TZW1pZ3JvdXBvaWRFeHRlbnNpb25zKFNlbWlncm91cG9pZCk7XG4gIHZhciBpbmNsdWRlJDYgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JJbmZpeChGdW5jdG9yKTtcbiAgdmFyIGluY2x1ZGUkNyA9IFJlbHVkZV9FeHRlbnNpb25zX0JpZnVuY3Rvci5CaWZ1bmN0b3JJbmZpeChCaWZ1bmN0b3IpO1xuICB2YXIgaW5jbHVkZSQ4ID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlJbmZpeChBcHBseSk7XG4gIHZhciBpbmNsdWRlJDkgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEluZml4KE1vbmFkKTtcbiAgdmFyIGluY2x1ZGUkMTAgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQuQWx0SW5maXgoQWx0KTtcbiAgdmFyIGluY2x1ZGUkMTEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuU2VtaWdyb3Vwb2lkSW5maXgoU2VtaWdyb3Vwb2lkKTtcbiAgdmFyIEluZml4X0Z1bmN0b3JFeHRlbnNpb25zID0gaW5jbHVkZSQ2LkZ1bmN0b3JFeHRlbnNpb25zO1xuICB2YXIgSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0ID0gaW5jbHVkZSQ2LiRsZXNzJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGhhc2gkZ3JlYXQgPSBpbmNsdWRlJDYuJGxlc3MkaGFzaCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGRvbGxhciA9IGluY2x1ZGUkNi4kbGVzcyQ7XG4gIHZhciBJbmZpeF8kJGdyZWF0ID0gaW5jbHVkZSQ2LiQkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRhdCRncmVhdCA9IGluY2x1ZGUkNi4kbGVzcyRhdCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGxlc3MkZG9sbGFyJGdyZWF0JGdyZWF0ID0gaW5jbHVkZSQ3LiRsZXNzJGxlc3MkJGdyZWF0JGdyZWF0O1xuICB2YXIgSW5maXhfQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQ4LkFwcGx5RXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDguJGxlc3Mkc3RhciRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIgPSBpbmNsdWRlJDguJGxlc3Mkc3RhcjtcbiAgdmFyIEluZml4XyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQ4LiRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ5Lk1vbmFkRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUkOS4kZ3JlYXQkZ3JlYXQkZXE7XG4gIHZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZSQ5LiRlcSRsZXNzJGxlc3M7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlJDkuJGdyZWF0JGVxJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUkOS4kbGVzcyRlcSRsZXNzO1xuICB2YXIgSW5maXhfJGxlc3MkcGlwZSRncmVhdCA9IGluY2x1ZGUkMTAuJGxlc3MkcGlwZSRncmVhdDtcbiAgdmFyIEluZml4X1NFID0gaW5jbHVkZSQxMS5TRTtcbiAgdmFyIEluZml4XyRsZXNzJGxlc3MkbGVzcyA9IGluY2x1ZGUkMTEuJGxlc3MkbGVzcyRsZXNzO1xuICB2YXIgSW5maXhfJGdyZWF0JGdyZWF0JGdyZWF0ID0gaW5jbHVkZSQxMS4kZ3JlYXQkZ3JlYXQkZ3JlYXQ7XG4gIHZhciBJbmZpeCA9IHtcbiAgICBGdW5jdG9yRXh0ZW5zaW9uczogSW5maXhfRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgICAkbGVzcyQ6IEluZml4XyRsZXNzJGRvbGxhcixcbiAgICAkJGdyZWF0OiBJbmZpeF8kJGdyZWF0LFxuICAgICRsZXNzJGF0JGdyZWF0OiBJbmZpeF8kbGVzcyRhdCRncmVhdCxcbiAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogSW5maXhfJGxlc3MkbGVzcyRkb2xsYXIkZ3JlYXQkZ3JlYXQsXG4gICAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAgICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgICBNb25hZEV4dGVuc2lvbnM6IEluZml4X01vbmFkRXh0ZW5zaW9ucyxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICAgJGxlc3MkcGlwZSRncmVhdDogSW5maXhfJGxlc3MkcGlwZSRncmVhdCxcbiAgICBTRTogSW5maXhfU0UsXG4gICAgJGxlc3MkbGVzcyRsZXNzOiBJbmZpeF8kbGVzcyRsZXNzJGxlc3MsXG4gICAgJGdyZWF0JGdyZWF0JGdyZWF0OiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZ3JlYXRcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBGdW5jdG9yOiBGdW5jdG9yLFxuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIG1hcEVycm9yOiBtYXBFcnJvciQxLFxuICAgICAgICAgIEJzRnVuY3RvckV4dGVuc2lvbnM6IGluY2x1ZGUuQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGlwTWFwOiBpbmNsdWRlLmZsaXBNYXAsXG4gICAgICAgICAgJCR2b2lkOiBpbmNsdWRlLiQkdm9pZCxcbiAgICAgICAgICB2b2lkUmlnaHQ6IGluY2x1ZGUudm9pZFJpZ2h0LFxuICAgICAgICAgIHZvaWRMZWZ0OiBpbmNsdWRlLnZvaWRMZWZ0LFxuICAgICAgICAgIGZsYXA6IGluY2x1ZGUuZmxhcCxcbiAgICAgICAgICBBbHQ6IEFsdCxcbiAgICAgICAgICBhbHQ6IGFsdCxcbiAgICAgICAgICBvckVsc2U6IGluY2x1ZGUkMS5vckVsc2UsXG4gICAgICAgICAgQXBwbHk6IEFwcGx5LFxuICAgICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgICBCc0FwcGx5RXh0ZW5zaW9uczogaW5jbHVkZSQyLkJzQXBwbHlFeHRlbnNpb25zLFxuICAgICAgICAgIGFwcGx5Rmlyc3Q6IGluY2x1ZGUkMi5hcHBseUZpcnN0LFxuICAgICAgICAgIGFwcGx5U2Vjb25kOiBpbmNsdWRlJDIuYXBwbHlTZWNvbmQsXG4gICAgICAgICAgbWFwMjogaW5jbHVkZSQyLm1hcDIsXG4gICAgICAgICAgbWFwMzogaW5jbHVkZSQyLm1hcDMsXG4gICAgICAgICAgbWFwNDogaW5jbHVkZSQyLm1hcDQsXG4gICAgICAgICAgbWFwNTogaW5jbHVkZSQyLm1hcDUsXG4gICAgICAgICAgdHVwbGUyOiBpbmNsdWRlJDIudHVwbGUyLFxuICAgICAgICAgIHR1cGxlMzogaW5jbHVkZSQyLnR1cGxlMyxcbiAgICAgICAgICB0dXBsZTQ6IGluY2x1ZGUkMi50dXBsZTQsXG4gICAgICAgICAgdHVwbGU1OiBpbmNsdWRlJDIudHVwbGU1LFxuICAgICAgICAgIG1hcFR1cGxlMjogaW5jbHVkZSQyLm1hcFR1cGxlMixcbiAgICAgICAgICBtYXBUdXBsZTM6IGluY2x1ZGUkMi5tYXBUdXBsZTMsXG4gICAgICAgICAgbWFwVHVwbGU0OiBpbmNsdWRlJDIubWFwVHVwbGU0LFxuICAgICAgICAgIG1hcFR1cGxlNTogaW5jbHVkZSQyLm1hcFR1cGxlNSxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgcHVyZTogcHVyZSxcbiAgICAgICAgICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogaW5jbHVkZSQzLkJzQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgIGxpZnRBMTogaW5jbHVkZSQzLmxpZnRBMSxcbiAgICAgICAgICBhbGw6IGluY2x1ZGUkMy5hbGwsXG4gICAgICAgICAgU2VtaWFsaWduOiBTZW1pYWxpZ24sXG4gICAgICAgICAgTW9uYWQ6IE1vbmFkLFxuICAgICAgICAgIGJpbmQ6IGJpbmQsXG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IGluY2x1ZGUkNC5Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGF0TWFwOiBpbmNsdWRlJDQuZmxhdE1hcCxcbiAgICAgICAgICBmbGF0dGVuOiBpbmNsdWRlJDQuZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogaW5jbHVkZSQ0LmNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogaW5jbHVkZSQ0LmZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBsaWZ0TTE6IGluY2x1ZGUkNC5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IGluY2x1ZGUkNC53aGVuXyxcbiAgICAgICAgICB1bmxlc3M6IGluY2x1ZGUkNC51bmxlc3MsXG4gICAgICAgICAgTW9uYWRUaHJvdzogTW9uYWRUaHJvdyxcbiAgICAgICAgICB0aHJvd0Vycm9yOiAkJHRocm93LFxuICAgICAgICAgIE1vbmFkRXJyb3I6IE1vbmFkRXJyb3IsXG4gICAgICAgICAgY2F0Y2hFcnJvcjogY2F0Y2hFcnJvcixcbiAgICAgICAgICBTZW1pZ3JvdXBvaWQ6IFNlbWlncm91cG9pZCxcbiAgICAgICAgICBhbmRUaGVuOiBpbmNsdWRlJDUuYW5kVGhlbixcbiAgICAgICAgICBJbmZpeDogSW5maXhcbiAgICAgICAgfTtcbn1cblxudmFyIHVuaXQgPSAvKiBQdXJlICovQmxvY2suX18oMCwgW3VuZGVmaW5lZF0pO1xuXG52YXIgdW5pdFdpdGhWb2lkID0gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFt1bmRlZmluZWRdKTtcblxudmFyICRsZXNzJCRncmVhdCA9IG1hcDtcblxudmFyICRsZXNzJHN0YXIkZ3JlYXQgPSBhcHBseTtcblxudmFyICRncmVhdCRncmVhdCRlcSA9IGJpbmQ7XG5cbnZhciAkbGVzcyRsZXNzJGxlc3MgPSBjb21wb3NlO1xuXG52YXIgJGdyZWF0JGdyZWF0JGdyZWF0ID0gYW5kVGhlbjtcblxudmFyIHdpdGhEZWxheSA9IHdpdGhEZWxheUFmdGVyO1xuXG52YXIgbWFwTGVmdCA9IGluY2x1ZGUubWFwTGVmdDtcblxudmFyIG1hcFJpZ2h0ID0gaW5jbHVkZS5tYXBSaWdodDtcblxuZXhwb3J0IHtcbiAgcHVyZSAsXG4gIHB1cmVXaXRoVm9pZCAsXG4gIHVuaXQgLFxuICB1bml0V2l0aFZvaWQgLFxuICAkJHRocm93ICxcbiAgdGhyb3dXaXRoVm9pZCAsXG4gIHN1c3BlbmQgLFxuICBzdXNwZW5kV2l0aFZvaWQgLFxuICBzdXNwZW5kVGhyb3cgLFxuICBzdXNwZW5kSU8gLFxuICBhc3luYyAsXG4gIGZyb21PcHRpb24gLFxuICBmcm9tUmVzdWx0ICxcbiAgbWFwICxcbiAgJGxlc3MkJGdyZWF0ICxcbiAgJGxlc3MkaGFzaCRncmVhdCAsXG4gIHRhcCAsXG4gIGFwcGx5ICxcbiAgJGxlc3Mkc3RhciRncmVhdCAsXG4gIGZsYXRNYXAgLFxuICBiaW5kICxcbiAgJGdyZWF0JGdyZWF0JGVxICxcbiAgY29uZCAsXG4gIGNvbmRFcnJvciAsXG4gIHVuc2FmZVJ1bkFzeW5jICxcbiAgdW5zYWZlUnVuQXN5bmNQYXIyICxcbiAgdW5zYWZlUnVuQXN5bmNQYXIzICxcbiAgY29tcG9zZSAsXG4gIGNvbXBvc2VQdXJlICxcbiAgY29tcG9zZVRocm93ICxcbiAgY29tcG9zZVN1c3BlbmQgLFxuICBjb21wb3NlU3VzcGVuZElPICxcbiAgY29tcG9zZUFzeW5jICxcbiAgY29tcG9zZU1hcCAsXG4gIGNvbXBvc2VBcHBseSAsXG4gIGNvbXBvc2VGbGF0TWFwICxcbiAgJGxlc3MkbGVzcyRsZXNzICxcbiAgYW5kVGhlbiAsXG4gICRncmVhdCRncmVhdCRncmVhdCAsXG4gIHRhcEVycm9yICxcbiAgY2F0Y2hFcnJvciAsXG4gIGNhdGNoRXJyb3JNYXAgLFxuICBjYXRjaEVycm9yQXBwbHkgLFxuICBjYXRjaEVycm9yRmxhdE1hcCAsXG4gIGhhbmRsZUVycm9yICxcbiAgbWFwSGFuZGxlRXJyb3IgLFxuICBiaXRhcCAsXG4gIGFsdCAsXG4gIGFsaWduICxcbiAgYWxpZ25XaXRoICxcbiAgb3JFbHNlICxcbiAgdHJpZXMgLFxuICB0cmllc0pTICxcbiAgZmxpcCAsXG4gIGZsaXBNYXAgLFxuICBmbGlwQXBwbHkgLFxuICBmbGlwRmxhdE1hcCAsXG4gIHN1bW1vbkVycm9yICxcbiAgc3VtbW9uRXJyb3JNYXAgLFxuICBzdW1tb25FcnJvckFwcGx5ICxcbiAgc3VtbW9uRXJyb3JGbGF0TWFwICxcbiAgdW5zdW1tb25FcnJvciAsXG4gIHVuc3VtbW9uRXJyb3JNYXAgLFxuICB1bnN1bW1vbkVycm9yQXBwbHkgLFxuICB1bnN1bW1vbkVycm9yRmxhdE1hcCAsXG4gIGRlbGF5ICxcbiAgZGVsYXlXaXRoVm9pZCAsXG4gIHdpdGhEZWxheUFmdGVyICxcbiAgd2l0aERlbGF5ICxcbiAgd2l0aERlbGF5QmVmb3JlICxcbiAgZGVib3VuY2UgLFxuICB0aHJvdHRsZSAsXG4gIEJpZnVuY3RvciAsXG4gIGJpbWFwICxcbiAgbWFwTGVmdCAsXG4gIG1hcFJpZ2h0ICxcbiAgbWFwRXJyb3IkMSBhcyBtYXBFcnJvcixcbiAgV2l0aEVycm9yICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ2FtbF9vYmogZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vYmouanNcIjtcbmltcG9ydCAqIGFzIFBlcnZhc2l2ZXMgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvcGVydmFzaXZlcy5qc1wiO1xuaW1wb3J0ICogYXMgSW5maXgkQnNCYXN0ZXQgZnJvbSBcIi4vSW5maXguYnMuanNcIjtcbmltcG9ydCAqIGFzIEludGVyZmFjZSRCc0Jhc3RldCBmcm9tIFwiLi9JbnRlcmZhY2UuYnMuanNcIjtcblxuZnVuY3Rpb24gYXBwcm94aW1hdGVseV9lcXVhbCh0b2xlcmFuY2UsIGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSB0b2xlcmFuY2U7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gKyBwcmltJDE7XG59XG5cbnZhciBNYWdtYSA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBTZW1pZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTW9ub2lkID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAuMFxufTtcblxudmFyIFF1YXNpZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTWVkaWFsX1F1YXNpZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTG9vcCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiAwLjBcbn07XG5cbmZ1bmN0aW9uIGludmVyc2UocGFyYW0pIHtcbiAgcmV0dXJuIC0xLjAgKiBwYXJhbTtcbn1cblxudmFyIEdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAuMCxcbiAgaW52ZXJzZTogaW52ZXJzZVxufTtcblxudmFyIEFiZWxpYW5fR3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kLFxuICBlbXB0eTogMC4wLFxuICBpbnZlcnNlOiBpbnZlcnNlXG59O1xuXG52YXIgQWRkaXRpdmUgPSB7XG4gIE1hZ21hOiBNYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBNYWdtYSxcbiAgU2VtaWdyb3VwOiBTZW1pZ3JvdXAsXG4gIE1vbm9pZDogTW9ub2lkLFxuICBRdWFzaWdyb3VwOiBRdWFzaWdyb3VwLFxuICBNZWRpYWxfUXVhc2lncm91cDogTWVkaWFsX1F1YXNpZ3JvdXAsXG4gIExvb3A6IExvb3AsXG4gIEdyb3VwOiBHcm91cCxcbiAgQWJlbGlhbl9Hcm91cDogQWJlbGlhbl9Hcm91cFxufTtcblxuZnVuY3Rpb24gYXBwZW5kJDEocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICogcHJpbSQxO1xufVxuXG52YXIgTWFnbWEkMSA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMVxufTtcblxudmFyIFNlbWlncm91cCQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxXG59O1xuXG52YXIgTW9ub2lkJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDEsXG4gIGVtcHR5OiAxLjBcbn07XG5cbnZhciBRdWFzaWdyb3VwJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDFcbn07XG5cbnZhciBNZWRpYWxfUXVhc2lncm91cCQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxXG59O1xuXG52YXIgTG9vcCQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxLFxuICBlbXB0eTogMS4wXG59O1xuXG52YXIgTXVsdGlwbGljYXRpdmUgPSB7XG4gIE1hZ21hOiBNYWdtYSQxLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hJDEsXG4gIFNlbWlncm91cDogU2VtaWdyb3VwJDEsXG4gIE1vbm9pZDogTW9ub2lkJDEsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAkMSxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IE1lZGlhbF9RdWFzaWdyb3VwJDEsXG4gIExvb3A6IExvb3AkMVxufTtcblxuZnVuY3Rpb24gYXBwZW5kJDIocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC0gcHJpbSQxO1xufVxuXG52YXIgTWFnbWEkMiA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMlxufTtcblxudmFyIFF1YXNpZ3JvdXAkMiA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMlxufTtcblxudmFyIE1lZGlhbF9RdWFzaWdyb3VwJDIgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDJcbn07XG5cbnZhciBTdWJ0cmFjdGl2ZSA9IHtcbiAgTWFnbWE6IE1hZ21hJDIsXG4gIE1lZGlhbF9NYWdtYTogTWFnbWEkMixcbiAgUXVhc2lncm91cDogUXVhc2lncm91cCQyLFxuICBNZWRpYWxfUXVhc2lncm91cDogTWVkaWFsX1F1YXNpZ3JvdXAkMlxufTtcblxuZnVuY3Rpb24gYXBwZW5kJDMocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC8gcHJpbSQxO1xufVxuXG52YXIgTWFnbWEkMyA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkM1xufTtcblxudmFyIFF1YXNpZ3JvdXAkMyA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkM1xufTtcblxudmFyIE1lZGlhbF9RdWFzaWdyb3VwJDMgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDNcbn07XG5cbnZhciBEaXZpc2l2ZSA9IHtcbiAgTWFnbWE6IE1hZ21hJDMsXG4gIE1lZGlhbF9NYWdtYTogTWFnbWEkMyxcbiAgUXVhc2lncm91cDogUXVhc2lncm91cCQzLFxuICBNZWRpYWxfUXVhc2lncm91cDogTWVkaWFsX1F1YXNpZ3JvdXAkM1xufTtcblxudmFyIGVxID0gQ2FtbF9vYmouY2FtbF9lcXVhbDtcblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogSW50ZXJmYWNlJEJzQmFzdGV0LnVuc2FmZV9jb21wYXJlXG59O1xuXG52YXIgQm91bmRlZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBJbnRlcmZhY2UkQnNCYXN0ZXQudW5zYWZlX2NvbXBhcmUsXG4gIHRvcDogUGVydmFzaXZlcy5tYXhfZmxvYXQsXG4gIGJvdHRvbTogUGVydmFzaXZlcy5taW5fZmxvYXRcbn07XG5cbnZhciBTaG93ID0ge1xuICBzaG93OiBQZXJ2YXNpdmVzLnN0cmluZ19vZl9mbG9hdFxufTtcblxuZnVuY3Rpb24gYWRkKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSArIHByaW0kMTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbHkocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICogcHJpbSQxO1xufVxuXG52YXIgU2VtaXJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjBcbn07XG5cbmZ1bmN0aW9uIHN1YnRyYWN0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAtIHByaW0kMTtcbn1cblxudmFyIFJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjAsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdFxufTtcblxudmFyIENvbW11dGF0aXZlX1JpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjAsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdFxufTtcblxuZnVuY3Rpb24gcmVjaXByb2NhbChhKSB7XG4gIHJldHVybiAxLjAgLyBhO1xufVxuXG52YXIgRGl2aXNpb25fUmluZyA9IHtcbiAgYWRkOiBhZGQsXG4gIHplcm86IDAuMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEuMCxcbiAgc3VidHJhY3Q6IHN1YnRyYWN0LFxuICByZWNpcHJvY2FsOiByZWNpcHJvY2FsXG59O1xuXG5mdW5jdGlvbiBkZWdyZWUocGFyYW0pIHtcbiAgcmV0dXJuIDE7XG59XG5cbmZ1bmN0aW9uIGRpdmlkZShwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gLyBwcmltJDE7XG59XG5cbmZ1bmN0aW9uIG1vZHVsbyhwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gMC4wO1xufVxuXG52YXIgRXVjbGlkZWFuX1JpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjAsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCxcbiAgZGVncmVlOiBkZWdyZWUsXG4gIGRpdmlkZTogZGl2aWRlLFxuICBtb2R1bG86IG1vZHVsb1xufTtcblxudmFyIEZpZWxkID0ge1xuICBkZWdyZWU6IGRlZ3JlZSxcbiAgZGl2aWRlOiBkaXZpZGUsXG4gIG1vZHVsbzogbW9kdWxvLFxuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wLFxuICBzdWJ0cmFjdDogc3VidHJhY3QsXG4gIHJlY2lwcm9jYWw6IHJlY2lwcm9jYWxcbn07XG5cbnZhciBpbmNsdWRlID0gSW5maXgkQnNCYXN0ZXQuTWFnbWEoTWFnbWEpO1xuXG52YXIgQWRkaXRpdmUkMSA9IGluY2x1ZGU7XG5cbnZhciBpbmNsdWRlJDEgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYShNYWdtYSQxKTtcblxudmFyIE11bHRpcGxpY2F0aXZlJDEgPSBpbmNsdWRlJDE7XG5cbnZhciBpbmNsdWRlJDIgPSBJbmZpeCRCc0Jhc3RldC5FcShFcSk7XG5cbnZhciBpbmNsdWRlJDMgPSBJbmZpeCRCc0Jhc3RldC5PcmQoT3JkKTtcblxudmFyIGluY2x1ZGUkNCA9IEluZml4JEJzQmFzdGV0LkV1Y2xpZGVhbl9SaW5nKEV1Y2xpZGVhbl9SaW5nKTtcblxudmFyIEluZml4XyRlcSRwaXBlJGVxID0gaW5jbHVkZSQyLiRlcSRwaXBlJGVxO1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRwaXBlID0gaW5jbHVkZSQzLiRsZXNzJHBpcGUkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDMuJHBpcGUkcGlwZSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZXEgPSBpbmNsdWRlJDMuJGxlc3MkcGlwZSRlcTtcblxudmFyIEluZml4XyRncmVhdCRwaXBlJGVxID0gaW5jbHVkZSQzLiRncmVhdCRwaXBlJGVxO1xuXG52YXIgSW5maXhfJHBpcGUkcGx1cyRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJHBsdXMkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHN0YXIkcGlwZSA9IGluY2x1ZGUkNC4kcGlwZSRzdGFyJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSQkcGlwZSA9IGluY2x1ZGUkNC4kcGlwZSRuZWckcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHNsYXNoJHBpcGUgPSBpbmNsdWRlJDQuJHBpcGUkc2xhc2gkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHBlcmNlbnQkcGlwZSA9IGluY2x1ZGUkNC4kcGlwZSRwZXJjZW50JHBpcGU7XG5cbnZhciBJbmZpeCA9IHtcbiAgQWRkaXRpdmU6IEFkZGl0aXZlJDEsXG4gIE11bHRpcGxpY2F0aXZlOiBNdWx0aXBsaWNhdGl2ZSQxLFxuICAkZXEkcGlwZSRlcTogSW5maXhfJGVxJHBpcGUkZXEsXG4gICRsZXNzJHBpcGUkcGlwZTogSW5maXhfJGxlc3MkcGlwZSRwaXBlLFxuICAkcGlwZSRwaXBlJGdyZWF0OiBJbmZpeF8kcGlwZSRwaXBlJGdyZWF0LFxuICAkbGVzcyRwaXBlJGVxOiBJbmZpeF8kbGVzcyRwaXBlJGVxLFxuICAkZ3JlYXQkcGlwZSRlcTogSW5maXhfJGdyZWF0JHBpcGUkZXEsXG4gICRwaXBlJHBsdXMkcGlwZTogSW5maXhfJHBpcGUkcGx1cyRwaXBlLFxuICAkcGlwZSRzdGFyJHBpcGU6IEluZml4XyRwaXBlJHN0YXIkcGlwZSxcbiAgJHBpcGUkbmVnJHBpcGU6IEluZml4XyRwaXBlJCRwaXBlLFxuICAkcGlwZSRzbGFzaCRwaXBlOiBJbmZpeF8kcGlwZSRzbGFzaCRwaXBlLFxuICAkcGlwZSRwZXJjZW50JHBpcGU6IEluZml4XyRwaXBlJHBlcmNlbnQkcGlwZVxufTtcblxuZXhwb3J0IHtcbiAgYXBwcm94aW1hdGVseV9lcXVhbCAsXG4gIEFkZGl0aXZlICxcbiAgTXVsdGlwbGljYXRpdmUgLFxuICBTdWJ0cmFjdGl2ZSAsXG4gIERpdmlzaXZlICxcbiAgRXEgLFxuICBPcmQgLFxuICBCb3VuZGVkICxcbiAgU2hvdyAsXG4gIFNlbWlyaW5nICxcbiAgUmluZyAsXG4gIENvbW11dGF0aXZlX1JpbmcgLFxuICBEaXZpc2lvbl9SaW5nICxcbiAgRXVjbGlkZWFuX1JpbmcgLFxuICBGaWVsZCAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFBlcnZhc2l2ZXMgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvcGVydmFzaXZlcy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9mb3JtYXQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9mb3JtYXQuanNcIjtcbmltcG9ydCAqIGFzIEZsb2F0JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9GbG9hdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfT3JkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfT3JkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19SaW5nIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfUmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaXJpbmcgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pcmluZy5icy5qc1wiO1xuXG5mdW5jdGlvbiBlcShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG52YXIgRXEgPSB7XG4gIGVxOiBlcVxufTtcblxudmFyIG5hbiA9IE51bWJlci5OYU47XG5cbmZ1bmN0aW9uIGFkZChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gKyBwcmltJDE7XG59XG5cbmZ1bmN0aW9uIHN1YnRyYWN0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAtIHByaW0kMTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbHkocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICogcHJpbSQxO1xufVxuXG5mdW5jdGlvbiBkaXZpZGUocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC8gcHJpbSQxO1xufVxuXG5mdW5jdGlvbiBwb3coYSwgYikge1xuICByZXR1cm4gTWF0aC5wb3coYSwgYik7XG59XG5cbmZ1bmN0aW9uIHNxcnQocHJpbSkge1xuICByZXR1cm4gTWF0aC5zcXJ0KHByaW0pO1xufVxuXG5mdW5jdGlvbiAkJGlzTmFOKHgpIHtcbiAgcmV0dXJuIHggIT09IHg7XG59XG5cbnZhciBjb21wYXJlID0gRmxvYXQkQnNCYXN0ZXQuT3JkLmNvbXBhcmU7XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogY29tcGFyZVxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19PcmQuT3JkRXh0ZW5zaW9ucyhPcmQpO1xuXG52YXIgT3JkUmluZ0V4dGVuc2lvbnMgPSBpbmNsdWRlLk9yZFJpbmdFeHRlbnNpb25zO1xuXG52YXIgU2VtaXJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjBcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1NlbWlyaW5nLlNlbWlyaW5nRXh0ZW5zaW9ucyhTZW1pcmluZyk7XG5cbmZ1bmN0aW9uIHN1YnRyYWN0JDEoYSwgYikge1xuICByZXR1cm4gYSAtIGI7XG59XG5cbnZhciBSaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wLFxuICBzdWJ0cmFjdDogc3VidHJhY3QkMVxufTtcblxudmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX1JpbmcuUmluZ0V4dGVuc2lvbnMoUmluZyk7XG5cbnZhciBpbmNsdWRlJDIgPSBDdXJyeS5fMShPcmRSaW5nRXh0ZW5zaW9ucywgUmluZyk7XG5cbnZhciBhYnMgPSBpbmNsdWRlJDIuYWJzO1xuXG5mdW5jdGlvbiBtb2R1bG8ocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIDAuMDtcbn1cblxuZnVuY3Rpb24gZGVncmVlKHBhcmFtKSB7XG4gIHJldHVybiAxO1xufVxuXG52YXIgRXVjbGlkZWFuUmluZyA9IHtcbiAgYWRkOiBhZGQsXG4gIHplcm86IDAuMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEuMCxcbiAgc3VidHJhY3Q6IHN1YnRyYWN0JDEsXG4gIGRlZ3JlZTogZGVncmVlLFxuICBkaXZpZGU6IGRpdmlkZSxcbiAgbW9kdWxvOiBtb2R1bG9cbn07XG5cbmZ1bmN0aW9uIGFwcHJveGltYXRlbHlFcXVhbCh0b2xlcmFuY2UsIHgsIHkpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHggLSB5KSA8PSB0b2xlcmFuY2U7XG59XG5cbmZ1bmN0aW9uIHRvSW50KHByaW0pIHtcbiAgcmV0dXJuIHByaW0gfCAwO1xufVxuXG5mdW5jdGlvbiBmcm9tSW50KHByaW0pIHtcbiAgcmV0dXJuIHByaW07XG59XG5cbmZ1bmN0aW9uIGZyYWN0aW9uYWxQYXJ0KHYpIHtcbiAgdmFyIHdob2xlID0gdiB8IDA7XG4gIHJldHVybiBDdXJyeS5fMShhYnMsIHYgPj0gMC4wID8gdiAtIHdob2xlIDogdiArIEN1cnJ5Ll8xKGFicywgd2hvbGUpKTtcbn1cblxuZnVuY3Rpb24gZmxvb3IocHJpbSkge1xuICByZXR1cm4gTWF0aC5mbG9vcihwcmltKTtcbn1cblxuZnVuY3Rpb24gZmxvb3JBc0ludCh2KSB7XG4gIHJldHVybiBNYXRoLmZsb29yKHYpIHwgMDtcbn1cblxuZnVuY3Rpb24gY2VpbChwcmltKSB7XG4gIHJldHVybiBNYXRoLmNlaWwocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGNlaWxBc0ludCh2KSB7XG4gIHJldHVybiBNYXRoLmNlaWwodikgfCAwO1xufVxuXG5mdW5jdGlvbiByb3VuZCh2KSB7XG4gIGlmIChmcmFjdGlvbmFsUGFydCh2KSA+PSAwLjUpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBNYXRoLmZsb29yKHYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJvdW5kQXNJbnQodikge1xuICByZXR1cm4gcm91bmQodikgfCAwO1xufVxuXG5mdW5jdGlvbiB0b1ByZWNpc2lvbihkZWNpbWFscywgbnVtKSB7XG4gIHZhciBwb3cgPSBNYXRoLnBvdygxMC4wLCBkZWNpbWFscyk7XG4gIHZhciBtdWx0aXBsaWVkID0gbnVtID49IDAuMCA/IE1hdGguZmxvb3IocG93ICogbnVtKSA6IE1hdGguY2VpbChwb3cgKiBudW0pO1xuICByZXR1cm4gbXVsdGlwbGllZCAvIHBvdztcbn1cblxuZnVuY3Rpb24gc2hvdyhwcmltKSB7XG4gIHJldHVybiBwcmltLnRvU3RyaW5nKCk7XG59XG5cbnZhciBTaG93ID0ge1xuICBzaG93OiBzaG93XG59O1xuXG5mdW5jdGlvbiBmcm9tU3RyaW5nKHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9mbG9hdF9vZl9zdHJpbmcodik7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG52YXIgQWRkaXRpdmVfTWFnbWEgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5NYWdtYTtcblxudmFyIEFkZGl0aXZlX01lZGlhbF9NYWdtYSA9IEZsb2F0JEJzQmFzdGV0LkFkZGl0aXZlLk1lZGlhbF9NYWdtYTtcblxudmFyIEFkZGl0aXZlX1NlbWlncm91cCA9IEZsb2F0JEJzQmFzdGV0LkFkZGl0aXZlLlNlbWlncm91cDtcblxudmFyIEFkZGl0aXZlX01vbm9pZCA9IEZsb2F0JEJzQmFzdGV0LkFkZGl0aXZlLk1vbm9pZDtcblxudmFyIEFkZGl0aXZlX1F1YXNpZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5RdWFzaWdyb3VwO1xuXG52YXIgQWRkaXRpdmVfTWVkaWFsX1F1YXNpZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5NZWRpYWxfUXVhc2lncm91cDtcblxudmFyIEFkZGl0aXZlX0xvb3AgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5Mb29wO1xuXG52YXIgQWRkaXRpdmVfR3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5Hcm91cDtcblxudmFyIEFkZGl0aXZlX0FiZWxpYW5fR3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5BYmVsaWFuX0dyb3VwO1xuXG52YXIgQWRkaXRpdmUgPSB7XG4gIE1hZ21hOiBBZGRpdGl2ZV9NYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBBZGRpdGl2ZV9NZWRpYWxfTWFnbWEsXG4gIFNlbWlncm91cDogQWRkaXRpdmVfU2VtaWdyb3VwLFxuICBNb25vaWQ6IEFkZGl0aXZlX01vbm9pZCxcbiAgUXVhc2lncm91cDogQWRkaXRpdmVfUXVhc2lncm91cCxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IEFkZGl0aXZlX01lZGlhbF9RdWFzaWdyb3VwLFxuICBMb29wOiBBZGRpdGl2ZV9Mb29wLFxuICBHcm91cDogQWRkaXRpdmVfR3JvdXAsXG4gIEFiZWxpYW5fR3JvdXA6IEFkZGl0aXZlX0FiZWxpYW5fR3JvdXBcbn07XG5cbnZhciBNdWx0aXBsaWNhdGl2ZV9NYWdtYSA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1hZ21hO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTWVkaWFsX01hZ21hID0gRmxvYXQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuTWVkaWFsX01hZ21hO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfU2VtaWdyb3VwID0gRmxvYXQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuU2VtaWdyb3VwO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTW9ub2lkID0gRmxvYXQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuTW9ub2lkO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfUXVhc2lncm91cCA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBNdWx0aXBsaWNhdGl2ZV9NZWRpYWxfUXVhc2lncm91cCA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1lZGlhbF9RdWFzaWdyb3VwO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTG9vcCA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLkxvb3A7XG5cbnZhciBNdWx0aXBsaWNhdGl2ZSA9IHtcbiAgTWFnbWE6IE11bHRpcGxpY2F0aXZlX01hZ21hLFxuICBNZWRpYWxfTWFnbWE6IE11bHRpcGxpY2F0aXZlX01lZGlhbF9NYWdtYSxcbiAgU2VtaWdyb3VwOiBNdWx0aXBsaWNhdGl2ZV9TZW1pZ3JvdXAsXG4gIE1vbm9pZDogTXVsdGlwbGljYXRpdmVfTW9ub2lkLFxuICBRdWFzaWdyb3VwOiBNdWx0aXBsaWNhdGl2ZV9RdWFzaWdyb3VwLFxuICBNZWRpYWxfUXVhc2lncm91cDogTXVsdGlwbGljYXRpdmVfTWVkaWFsX1F1YXNpZ3JvdXAsXG4gIExvb3A6IE11bHRpcGxpY2F0aXZlX0xvb3Bcbn07XG5cbnZhciBTdWJ0cmFjdGl2ZV9NYWdtYSA9IEZsb2F0JEJzQmFzdGV0LlN1YnRyYWN0aXZlLk1hZ21hO1xuXG52YXIgU3VidHJhY3RpdmVfTWVkaWFsX01hZ21hID0gRmxvYXQkQnNCYXN0ZXQuU3VidHJhY3RpdmUuTWVkaWFsX01hZ21hO1xuXG52YXIgU3VidHJhY3RpdmVfUXVhc2lncm91cCA9IEZsb2F0JEJzQmFzdGV0LlN1YnRyYWN0aXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBTdWJ0cmFjdGl2ZV9NZWRpYWxfUXVhc2lncm91cCA9IEZsb2F0JEJzQmFzdGV0LlN1YnRyYWN0aXZlLk1lZGlhbF9RdWFzaWdyb3VwO1xuXG52YXIgU3VidHJhY3RpdmUgPSB7XG4gIE1hZ21hOiBTdWJ0cmFjdGl2ZV9NYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBTdWJ0cmFjdGl2ZV9NZWRpYWxfTWFnbWEsXG4gIFF1YXNpZ3JvdXA6IFN1YnRyYWN0aXZlX1F1YXNpZ3JvdXAsXG4gIE1lZGlhbF9RdWFzaWdyb3VwOiBTdWJ0cmFjdGl2ZV9NZWRpYWxfUXVhc2lncm91cFxufTtcblxudmFyIERpdmlzaXZlX01hZ21hID0gRmxvYXQkQnNCYXN0ZXQuRGl2aXNpdmUuTWFnbWE7XG5cbnZhciBEaXZpc2l2ZV9NZWRpYWxfTWFnbWEgPSBGbG9hdCRCc0Jhc3RldC5EaXZpc2l2ZS5NZWRpYWxfTWFnbWE7XG5cbnZhciBEaXZpc2l2ZV9RdWFzaWdyb3VwID0gRmxvYXQkQnNCYXN0ZXQuRGl2aXNpdmUuUXVhc2lncm91cDtcblxudmFyIERpdmlzaXZlX01lZGlhbF9RdWFzaWdyb3VwID0gRmxvYXQkQnNCYXN0ZXQuRGl2aXNpdmUuTWVkaWFsX1F1YXNpZ3JvdXA7XG5cbnZhciBEaXZpc2l2ZSA9IHtcbiAgTWFnbWE6IERpdmlzaXZlX01hZ21hLFxuICBNZWRpYWxfTWFnbWE6IERpdmlzaXZlX01lZGlhbF9NYWdtYSxcbiAgUXVhc2lncm91cDogRGl2aXNpdmVfUXVhc2lncm91cCxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IERpdmlzaXZlX01lZGlhbF9RdWFzaWdyb3VwXG59O1xuXG52YXIgSW5maXhfQWRkaXRpdmUgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC5BZGRpdGl2ZTtcblxudmFyIEluZml4X011bHRpcGxpY2F0aXZlID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguTXVsdGlwbGljYXRpdmU7XG5cbnZhciBJbmZpeF8kZXEkcGlwZSRlcSA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRlcSRwaXBlJGVxO1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRwaXBlID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguJGxlc3MkcGlwZSRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkcGlwZSRncmVhdCA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRwaXBlJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGVxID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguJGxlc3MkcGlwZSRlcTtcblxudmFyIEluZml4XyRncmVhdCRwaXBlJGVxID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguJGdyZWF0JHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kcGlwZSRwbHVzJHBpcGUgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRwbHVzJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzdGFyJHBpcGUgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRzdGFyJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSQkcGlwZSA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRwaXBlJG5lZyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkc2xhc2gkcGlwZSA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRwaXBlJHNsYXNoJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGUgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRwZXJjZW50JHBpcGU7XG5cbnZhciBJbmZpeCA9IHtcbiAgQWRkaXRpdmU6IEluZml4X0FkZGl0aXZlLFxuICBNdWx0aXBsaWNhdGl2ZTogSW5maXhfTXVsdGlwbGljYXRpdmUsXG4gICRlcSRwaXBlJGVxOiBJbmZpeF8kZXEkcGlwZSRlcSxcbiAgJGxlc3MkcGlwZSRwaXBlOiBJbmZpeF8kbGVzcyRwaXBlJHBpcGUsXG4gICRwaXBlJHBpcGUkZ3JlYXQ6IEluZml4XyRwaXBlJHBpcGUkZ3JlYXQsXG4gICRsZXNzJHBpcGUkZXE6IEluZml4XyRsZXNzJHBpcGUkZXEsXG4gICRncmVhdCRwaXBlJGVxOiBJbmZpeF8kZ3JlYXQkcGlwZSRlcSxcbiAgJHBpcGUkcGx1cyRwaXBlOiBJbmZpeF8kcGlwZSRwbHVzJHBpcGUsXG4gICRwaXBlJHN0YXIkcGlwZTogSW5maXhfJHBpcGUkc3RhciRwaXBlLFxuICAkcGlwZSRuZWckcGlwZTogSW5maXhfJHBpcGUkJHBpcGUsXG4gICRwaXBlJHNsYXNoJHBpcGU6IEluZml4XyRwaXBlJHNsYXNoJHBpcGUsXG4gICRwaXBlJHBlcmNlbnQkcGlwZTogSW5maXhfJHBpcGUkcGVyY2VudCRwaXBlXG59O1xuXG52YXIgemVybyA9IDAuMDtcblxudmFyIG9uZSA9IDEuMDtcblxudmFyIGluZmluaXR5ID0gUGVydmFzaXZlcy5pbmZpbml0eTtcblxudmFyIG5lZ2F0aXZlSW5maW5pdHkgPSBQZXJ2YXNpdmVzLm5lZ19pbmZpbml0eTtcblxudmFyIHRvcCA9IFBlcnZhc2l2ZXMubWF4X2Zsb2F0O1xuXG52YXIgYm90dG9tID0gUGVydmFzaXZlcy5taW5fZmxvYXQ7XG5cbnZhciBjb21wYXJlV2l0aENvbnZlcnNpb24gPSBpbmNsdWRlLmNvbXBhcmVXaXRoQ29udmVyc2lvbjtcblxudmFyIGNvbXBhcmVSZXZlcnNlZCA9IGluY2x1ZGUuY29tcGFyZVJldmVyc2VkO1xuXG52YXIgT3JkUmV2ZXJzZWQgPSBpbmNsdWRlLk9yZFJldmVyc2VkO1xuXG52YXIgY29tcGFyZUFzSW50ID0gaW5jbHVkZS5jb21wYXJlQXNJbnQ7XG5cbnZhciBtaW4gPSBpbmNsdWRlLm1pbjtcblxudmFyIG1heCA9IGluY2x1ZGUubWF4O1xuXG52YXIgbGVzc1RoYW4gPSBpbmNsdWRlLmxlc3NUaGFuO1xuXG52YXIgbHQgPSBpbmNsdWRlLmx0O1xuXG52YXIgbGVzc1RoYW5PckVxID0gaW5jbHVkZS5sZXNzVGhhbk9yRXE7XG5cbnZhciBsdGUgPSBpbmNsdWRlLmx0ZTtcblxudmFyIGdyZWF0ZXJUaGFuID0gaW5jbHVkZS5ncmVhdGVyVGhhbjtcblxudmFyIGd0ID0gaW5jbHVkZS5ndDtcblxudmFyIGdyZWF0ZXJUaGFuT3JFcSA9IGluY2x1ZGUuZ3JlYXRlclRoYW5PckVxO1xuXG52YXIgZ3RlID0gaW5jbHVkZS5ndGU7XG5cbnZhciBjbGFtcCA9IGluY2x1ZGUuY2xhbXA7XG5cbnZhciBiZXR3ZWVuID0gaW5jbHVkZS5iZXR3ZWVuO1xuXG52YXIgT3JkTmFtZWQgPSBpbmNsdWRlLk9yZE5hbWVkO1xuXG52YXIgT3JkQnkgPSBpbmNsdWRlLk9yZEJ5O1xuXG52YXIgJG5lZyA9IGluY2x1ZGUkMS4kbmVnO1xuXG52YXIgbmVnYXRlID0gaW5jbHVkZSQxLm5lZ2F0ZTtcblxudmFyIHNpZ251bSA9IGluY2x1ZGUkMi5zaWdudW07XG5cbnZhciB0b1N0cmluZyA9IHNob3c7XG5cbmV4cG9ydCB7XG4gIGVxICxcbiAgRXEgLFxuICB6ZXJvICxcbiAgb25lICxcbiAgbmFuICxcbiAgaW5maW5pdHkgLFxuICBuZWdhdGl2ZUluZmluaXR5ICxcbiAgYWRkICxcbiAgc3VidHJhY3QgLFxuICBtdWx0aXBseSAsXG4gIGRpdmlkZSAsXG4gIHBvdyAsXG4gIHNxcnQgLFxuICB0b3AgLFxuICBib3R0b20gLFxuICAkJGlzTmFOICxcbiAgY29tcGFyZSAsXG4gIE9yZCAsXG4gIGNvbXBhcmVXaXRoQ29udmVyc2lvbiAsXG4gIGNvbXBhcmVSZXZlcnNlZCAsXG4gIE9yZFJldmVyc2VkICxcbiAgY29tcGFyZUFzSW50ICxcbiAgbWluICxcbiAgbWF4ICxcbiAgbGVzc1RoYW4gLFxuICBsdCAsXG4gIGxlc3NUaGFuT3JFcSAsXG4gIGx0ZSAsXG4gIGdyZWF0ZXJUaGFuICxcbiAgZ3QgLFxuICBncmVhdGVyVGhhbk9yRXEgLFxuICBndGUgLFxuICBjbGFtcCAsXG4gIGJldHdlZW4gLFxuICBPcmRSaW5nRXh0ZW5zaW9ucyAsXG4gIE9yZE5hbWVkICxcbiAgT3JkQnkgLFxuICBTZW1pcmluZyAsXG4gIFJpbmcgLFxuICAkbmVnICxcbiAgbmVnYXRlICxcbiAgYWJzICxcbiAgc2lnbnVtICxcbiAgRXVjbGlkZWFuUmluZyAsXG4gIGFwcHJveGltYXRlbHlFcXVhbCAsXG4gIHRvSW50ICxcbiAgZnJvbUludCAsXG4gIGZyYWN0aW9uYWxQYXJ0ICxcbiAgZmxvb3IgLFxuICBmbG9vckFzSW50ICxcbiAgY2VpbCAsXG4gIGNlaWxBc0ludCAsXG4gIHJvdW5kICxcbiAgcm91bmRBc0ludCAsXG4gIHRvUHJlY2lzaW9uICxcbiAgc2hvdyAsXG4gIHRvU3RyaW5nICxcbiAgU2hvdyAsXG4gIGZyb21TdHJpbmcgLFxuICBBZGRpdGl2ZSAsXG4gIE11bHRpcGxpY2F0aXZlICxcbiAgU3VidHJhY3RpdmUgLFxuICBEaXZpc2l2ZSAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBuYW4gTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDaGFyIGZyb20gXCIuL2NoYXIuanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J5dGVzIGZyb20gXCIuL2NhbWxfYnl0ZXMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfcHJpbWl0aXZlIGZyb20gXCIuL2NhbWxfcHJpbWl0aXZlLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG5mdW5jdGlvbiBtYWtlKG4sIGMpIHtcbiAgdmFyIHMgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG4pO1xuICBDYW1sX2J5dGVzLmNhbWxfZmlsbF9ieXRlcyhzLCAwLCBuLCBjKTtcbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIGluaXQobiwgZikge1xuICB2YXIgcyA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobik7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBuOyArK2kpe1xuICAgIHNbaV0gPSBDdXJyeS5fMShmLCBpKTtcbiAgfVxuICByZXR1cm4gcztcbn1cblxudmFyIGVtcHR5ID0gW107XG5cbmZ1bmN0aW9uIGNvcHkocykge1xuICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gIHZhciByID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsZW4pO1xuICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzLCAwLCByLCAwLCBsZW4pO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gdG9fc3RyaW5nKGIpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKGNvcHkoYikpO1xufVxuXG5mdW5jdGlvbiBvZl9zdHJpbmcocykge1xuICByZXR1cm4gY29weShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSk7XG59XG5cbmZ1bmN0aW9uIHN1YihzLCBvZnMsIGxlbikge1xuICBpZiAob2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IChzLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuc3ViIC8gQnl0ZXMuc3ViXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuKTtcbiAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMocywgb2ZzLCByLCAwLCBsZW4pO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gc3ViX3N0cmluZyhiLCBvZnMsIGxlbikge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoc3ViKGIsIG9mcywgbGVuKSk7XG59XG5cbmZ1bmN0aW9uICRwbHVzJHBsdXMoYSwgYikge1xuICB2YXIgYyA9IGEgKyBiIHwgMDtcbiAgdmFyIG1hdGNoID0gYSA8IDA7XG4gIHZhciBtYXRjaCQxID0gYiA8IDA7XG4gIHZhciBtYXRjaCQyID0gYyA8IDA7XG4gIGlmIChtYXRjaCkge1xuICAgIGlmICghbWF0Y2gkMSkge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIGlmIChtYXRjaCQyKSB7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJCeXRlcy5leHRlbmRcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChtYXRjaCQxKSB7XG4gICAgcmV0dXJuIGM7XG4gIH1cbiAgaWYgKG1hdGNoJDIpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkJ5dGVzLmV4dGVuZFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChzLCBsZWZ0LCByaWdodCkge1xuICB2YXIgbGVuID0gJHBsdXMkcGx1cygkcGx1cyRwbHVzKHMubGVuZ3RoLCBsZWZ0KSwgcmlnaHQpO1xuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuKTtcbiAgdmFyIG1hdGNoID0gbGVmdCA8IDAgPyAvKiB0dXBsZSAqL1tcbiAgICAgIC1sZWZ0IHwgMCxcbiAgICAgIDBcbiAgICBdIDogLyogdHVwbGUgKi9bXG4gICAgICAwLFxuICAgICAgbGVmdFxuICAgIF07XG4gIHZhciBkc3RvZmYgPSBtYXRjaFsxXTtcbiAgdmFyIHNyY29mZiA9IG1hdGNoWzBdO1xuICB2YXIgY3B5bGVuID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWluKHMubGVuZ3RoIC0gc3Jjb2ZmIHwgMCwgbGVuIC0gZHN0b2ZmIHwgMCk7XG4gIGlmIChjcHlsZW4gPiAwKSB7XG4gICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMocywgc3Jjb2ZmLCByLCBkc3RvZmYsIGNweWxlbik7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGZpbGwocywgb2ZzLCBsZW4sIGMpIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmZpbGwgLyBCeXRlcy5maWxsXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gQ2FtbF9ieXRlcy5jYW1sX2ZpbGxfYnl0ZXMocywgb2ZzLCBsZW4sIGMpO1xufVxuXG5mdW5jdGlvbiBibGl0KHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKSB7XG4gIGlmIChsZW4gPCAwIHx8IG9mczEgPCAwIHx8IG9mczEgPiAoczEubGVuZ3RoIC0gbGVuIHwgMCkgfHwgb2ZzMiA8IDAgfHwgb2ZzMiA+IChzMi5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQnl0ZXMuYmxpdFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKTtcbn1cblxuZnVuY3Rpb24gYmxpdF9zdHJpbmcoczEsIG9mczEsIHMyLCBvZnMyLCBsZW4pIHtcbiAgaWYgKGxlbiA8IDAgfHwgb2ZzMSA8IDAgfHwgb2ZzMSA+IChzMS5sZW5ndGggLSBsZW4gfCAwKSB8fCBvZnMyIDwgMCB8fCBvZnMyID4gKHMyLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuYmxpdCAvIEJ5dGVzLmJsaXRfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gQ2FtbF9ieXRlcy5jYW1sX2JsaXRfc3RyaW5nKHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKTtcbn1cblxuZnVuY3Rpb24gaXRlcihmLCBhKSB7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gYS5sZW5ndGg7IGkgPCBpX2ZpbmlzaDsgKytpKXtcbiAgICBDdXJyeS5fMShmLCBhW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgaSwgYVtpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGVuc3VyZV9nZSh4LCB5KSB7XG4gIGlmICh4ID49IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIFwiQnl0ZXMuY29uY2F0XCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHN1bV9sZW5ndGhzKF9hY2MsIHNlcGxlbiwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgdmFyIHRsID0gcGFyYW1bMV07XG4gICAgdmFyIGhkID0gcGFyYW1bMF07XG4gICAgaWYgKCF0bCkge1xuICAgICAgcmV0dXJuIGhkLmxlbmd0aCArIGFjYyB8IDA7XG4gICAgfVxuICAgIF9wYXJhbSA9IHRsO1xuICAgIF9hY2MgPSBlbnN1cmVfZ2UoKGhkLmxlbmd0aCArIHNlcGxlbiB8IDApICsgYWNjIHwgMCwgYWNjKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChzZXAsIGwpIHtcbiAgaWYgKCFsKSB7XG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG4gIHZhciBzZXBsZW4gPSBzZXAubGVuZ3RoO1xuICB2YXIgZHN0ID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhzdW1fbGVuZ3RocygwLCBzZXBsZW4sIGwpKTtcbiAgdmFyIF9wb3MgPSAwO1xuICB2YXIgX3BhcmFtID0gbDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgcG9zID0gX3BvcztcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gZHN0O1xuICAgIH1cbiAgICB2YXIgdGwgPSBwYXJhbVsxXTtcbiAgICB2YXIgaGQgPSBwYXJhbVswXTtcbiAgICBpZiAodGwpIHtcbiAgICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKGhkLCAwLCBkc3QsIHBvcywgaGQubGVuZ3RoKTtcbiAgICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHNlcCwgMCwgZHN0LCBwb3MgKyBoZC5sZW5ndGggfCAwLCBzZXBsZW4pO1xuICAgICAgX3BhcmFtID0gdGw7XG4gICAgICBfcG9zID0gKHBvcyArIGhkLmxlbmd0aCB8IDApICsgc2VwbGVuIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMoaGQsIDAsIGRzdCwgcG9zLCBoZC5sZW5ndGgpO1xuICAgIHJldHVybiBkc3Q7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhdChzMSwgczIpIHtcbiAgdmFyIGwxID0gczEubGVuZ3RoO1xuICB2YXIgbDIgPSBzMi5sZW5ndGg7XG4gIHZhciByID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsMSArIGwyIHwgMCk7XG4gIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMxLCAwLCByLCAwLCBsMSk7XG4gIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMyLCAwLCByLCBsMSwgbDIpO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gaXNfc3BhY2UocGFyYW0pIHtcbiAgdmFyIHN3aXRjaGVyID0gcGFyYW0gLSA5IHwgMDtcbiAgaWYgKHN3aXRjaGVyID4gNCB8fCBzd2l0Y2hlciA8IDApIHtcbiAgICByZXR1cm4gc3dpdGNoZXIgPT09IDIzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzd2l0Y2hlciAhPT0gMjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmltKHMpIHtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlKGkgPCBsZW4gJiYgaXNfc3BhY2Uoc1tpXSkpIHtcbiAgICBpID0gaSArIDEgfCAwO1xuICB9O1xuICB2YXIgaiA9IGxlbiAtIDEgfCAwO1xuICB3aGlsZShqID49IGkgJiYgaXNfc3BhY2Uoc1tqXSkpIHtcbiAgICBqID0gaiAtIDEgfCAwO1xuICB9O1xuICBpZiAoaiA+PSBpKSB7XG4gICAgcmV0dXJuIHN1YihzLCBpLCAoaiAtIGkgfCAwKSArIDEgfCAwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZW1wdHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXNjYXBlZChzKSB7XG4gIHZhciBuID0gMDtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBzLmxlbmd0aDsgaSA8IGlfZmluaXNoOyArK2kpe1xuICAgIHZhciBtYXRjaCA9IHNbaV07XG4gICAgdmFyIHRtcDtcbiAgICBpZiAobWF0Y2ggPj0gMzIpIHtcbiAgICAgIHZhciBzd2l0Y2hlciA9IG1hdGNoIC0gMzQgfCAwO1xuICAgICAgdG1wID0gc3dpdGNoZXIgPiA1OCB8fCBzd2l0Y2hlciA8IDAgPyAoXG4gICAgICAgICAgc3dpdGNoZXIgPj0gOTMgPyA0IDogMVxuICAgICAgICApIDogKFxuICAgICAgICAgIHN3aXRjaGVyID4gNTcgfHwgc3dpdGNoZXIgPCAxID8gMiA6IDFcbiAgICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG1wID0gbWF0Y2ggPj0gMTEgPyAoXG4gICAgICAgICAgbWF0Y2ggIT09IDEzID8gNCA6IDJcbiAgICAgICAgKSA6IChcbiAgICAgICAgICBtYXRjaCA+PSA4ID8gMiA6IDRcbiAgICAgICAgKTtcbiAgICB9XG4gICAgbiA9IG4gKyB0bXAgfCAwO1xuICB9XG4gIGlmIChuID09PSBzLmxlbmd0aCkge1xuICAgIHJldHVybiBjb3B5KHMpO1xuICB9XG4gIHZhciBzJHByaW1lID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhuKTtcbiAgbiA9IDA7XG4gIGZvcih2YXIgaSQxID0gMCAsaV9maW5pc2gkMSA9IHMubGVuZ3RoOyBpJDEgPCBpX2ZpbmlzaCQxOyArK2kkMSl7XG4gICAgdmFyIGMgPSBzW2kkMV07XG4gICAgdmFyIGV4aXQgPSAwO1xuICAgIGlmIChjID49IDM1KSB7XG4gICAgICBpZiAoYyAhPT0gOTIpIHtcbiAgICAgICAgaWYgKGMgPj0gMTI3KSB7XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXQgPSAyO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA+PSAzMikge1xuICAgICAgaWYgKGMgPj0gMzQpIHtcbiAgICAgICAgZXhpdCA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzJHByaW1lW25dID0gYztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPj0gMTQpIHtcbiAgICAgIGV4aXQgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgY2FzZSA4IDpcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcImJcIiAqLzk4O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOSA6XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJcXFxcXCIgKi85MjtcbiAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJ0XCIgKi8xMTY7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMCA6XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJcXFxcXCIgKi85MjtcbiAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJuXCIgKi8xMTA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgY2FzZSAyIDpcbiAgICAgICAgY2FzZSAzIDpcbiAgICAgICAgY2FzZSA0IDpcbiAgICAgICAgY2FzZSA1IDpcbiAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgY2FzZSA3IDpcbiAgICAgICAgY2FzZSAxMSA6XG4gICAgICAgIGNhc2UgMTIgOlxuICAgICAgICAgICAgZXhpdCA9IDE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMyA6XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJcXFxcXCIgKi85MjtcbiAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJyXCIgKi8xMTQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJcXFxcXCIgKi85MjtcbiAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIChjIC8gMTAwIHwgMCkgfCAwO1xuICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgcyRwcmltZVtuXSA9IDQ4ICsgKGMgLyAxMCB8IDApICUgMTAgfCAwO1xuICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgcyRwcmltZVtuXSA9IDQ4ICsgYyAlIDEwIHwgMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICBzJHByaW1lW25dID0gYztcbiAgICAgICAgICBicmVhaztcbiAgICAgIFxuICAgIH1cbiAgICBuID0gbiArIDEgfCAwO1xuICB9XG4gIHJldHVybiBzJHByaW1lO1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgcykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiBzO1xuICB9XG4gIHZhciByID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgcltpXSA9IEN1cnJ5Ll8xKGYsIHNbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXBpKGYsIHMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gcztcbiAgfVxuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBDdXJyeS5fMihmLCBpLCBzW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gdXBwZXJjYXNlX2FzY2lpKHMpIHtcbiAgcmV0dXJuIG1hcChDaGFyLnVwcGVyY2FzZV9hc2NpaSwgcyk7XG59XG5cbmZ1bmN0aW9uIGxvd2VyY2FzZV9hc2NpaShzKSB7XG4gIHJldHVybiBtYXAoQ2hhci5sb3dlcmNhc2VfYXNjaWksIHMpO1xufVxuXG5mdW5jdGlvbiBhcHBseTEoZiwgcykge1xuICBpZiAocy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gcztcbiAgfVxuICB2YXIgciA9IGNvcHkocyk7XG4gIHJbMF0gPSBDdXJyeS5fMShmLCBzWzBdKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemVfYXNjaWkocykge1xuICByZXR1cm4gYXBwbHkxKENoYXIudXBwZXJjYXNlX2FzY2lpLCBzKTtcbn1cblxuZnVuY3Rpb24gdW5jYXBpdGFsaXplX2FzY2lpKHMpIHtcbiAgcmV0dXJuIGFwcGx5MShDaGFyLmxvd2VyY2FzZV9hc2NpaSwgcyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4X3JlYyhzLCBsaW0sIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH1cbiAgICBpZiAoc1tpXSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZXgocywgYykge1xuICByZXR1cm4gaW5kZXhfcmVjKHMsIHMubGVuZ3RoLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfcmVjX29wdChzLCBsaW0sIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKHNbaV0gPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGV4X29wdChzLCBjKSB7XG4gIHJldHVybiBpbmRleF9yZWNfb3B0KHMsIHMubGVuZ3RoLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChpIDwgMCB8fCBpID4gbCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmluZGV4X2Zyb20gLyBCeXRlcy5pbmRleF9mcm9tXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gaW5kZXhfcmVjKHMsIGwsIGksIGMpO1xufVxuXG5mdW5jdGlvbiBpbmRleF9mcm9tX29wdChzLCBpLCBjKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChpIDwgMCB8fCBpID4gbCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmluZGV4X2Zyb21fb3B0IC8gQnl0ZXMuaW5kZXhfZnJvbV9vcHRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBpbmRleF9yZWNfb3B0KHMsIGwsIGksIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfcmVjKHMsIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH1cbiAgICBpZiAoc1tpXSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIF9pID0gaSAtIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmluZGV4KHMsIGMpIHtcbiAgcmV0dXJuIHJpbmRleF9yZWMocywgcy5sZW5ndGggLSAxIHwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9mcm9tKHMsIGksIGMpIHtcbiAgaWYgKGkgPCAtMSB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcucmluZGV4X2Zyb20gLyBCeXRlcy5yaW5kZXhfZnJvbVwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIHJpbmRleF9yZWMocywgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9yZWNfb3B0KHMsIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKHNbaV0gPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9vcHQocywgYykge1xuICByZXR1cm4gcmluZGV4X3JlY19vcHQocywgcy5sZW5ndGggLSAxIHwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9mcm9tX29wdChzLCBpLCBjKSB7XG4gIGlmIChpIDwgLTEgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJpbmRleF9mcm9tX29wdCAvIEJ5dGVzLnJpbmRleF9mcm9tX29wdFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIHJpbmRleF9yZWNfb3B0KHMsIGksIGMpO1xufVxuXG5mdW5jdGlvbiBjb250YWluc19mcm9tKHMsIGksIGMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGkgPCAwIHx8IGkgPiBsKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuY29udGFpbnNfZnJvbSAvIEJ5dGVzLmNvbnRhaW5zX2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHRyeSB7XG4gICAgaW5kZXhfcmVjKHMsIGwsIGksIGMpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBleG47XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udGFpbnMocywgYykge1xuICByZXR1cm4gY29udGFpbnNfZnJvbShzLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gcmNvbnRhaW5zX2Zyb20ocywgaSwgYykge1xuICBpZiAoaSA8IDAgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJjb250YWluc19mcm9tIC8gQnl0ZXMucmNvbnRhaW5zX2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHRyeSB7XG4gICAgcmluZGV4X3JlYyhzLCBpLCBjKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYXRjaCAoZXhuKXtcbiAgICBpZiAoZXhuID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhyb3cgZXhuO1xuICB9XG59XG5cbnZhciBjb21wYXJlID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9ieXRlc19jb21wYXJlO1xuXG5mdW5jdGlvbiB1cHBlcmNhc2Uocykge1xuICByZXR1cm4gbWFwKENoYXIudXBwZXJjYXNlLCBzKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKHMpIHtcbiAgcmV0dXJuIG1hcChDaGFyLmxvd2VyY2FzZSwgcyk7XG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUocykge1xuICByZXR1cm4gYXBwbHkxKENoYXIudXBwZXJjYXNlLCBzKTtcbn1cblxuZnVuY3Rpb24gdW5jYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIGFwcGx5MShDaGFyLmxvd2VyY2FzZSwgcyk7XG59XG5cbnZhciBlcXVhbCA9IENhbWxfcHJpbWl0aXZlLmNhbWxfYnl0ZXNfZXF1YWw7XG5cbnZhciB1bnNhZmVfdG9fc3RyaW5nID0gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmc7XG5cbnZhciB1bnNhZmVfb2Zfc3RyaW5nID0gQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmc7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBpbml0ICxcbiAgZW1wdHkgLFxuICBjb3B5ICxcbiAgb2Zfc3RyaW5nICxcbiAgdG9fc3RyaW5nICxcbiAgc3ViICxcbiAgc3ViX3N0cmluZyAsXG4gIGV4dGVuZCAsXG4gIGZpbGwgLFxuICBibGl0ICxcbiAgYmxpdF9zdHJpbmcgLFxuICBjb25jYXQgLFxuICBjYXQgLFxuICBpdGVyICxcbiAgaXRlcmkgLFxuICBtYXAgLFxuICBtYXBpICxcbiAgdHJpbSAsXG4gIGVzY2FwZWQgLFxuICBpbmRleCAsXG4gIGluZGV4X29wdCAsXG4gIHJpbmRleCAsXG4gIHJpbmRleF9vcHQgLFxuICBpbmRleF9mcm9tICxcbiAgaW5kZXhfZnJvbV9vcHQgLFxuICByaW5kZXhfZnJvbSAsXG4gIHJpbmRleF9mcm9tX29wdCAsXG4gIGNvbnRhaW5zICxcbiAgY29udGFpbnNfZnJvbSAsXG4gIHJjb250YWluc19mcm9tICxcbiAgdXBwZXJjYXNlICxcbiAgbG93ZXJjYXNlICxcbiAgY2FwaXRhbGl6ZSAsXG4gIHVuY2FwaXRhbGl6ZSAsXG4gIHVwcGVyY2FzZV9hc2NpaSAsXG4gIGxvd2VyY2FzZV9hc2NpaSAsXG4gIGNhcGl0YWxpemVfYXNjaWkgLFxuICB1bmNhcGl0YWxpemVfYXNjaWkgLFxuICBjb21wYXJlICxcbiAgZXF1YWwgLFxuICB1bnNhZmVfdG9fc3RyaW5nICxcbiAgdW5zYWZlX29mX3N0cmluZyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBCeXRlcyBmcm9tIFwiLi9ieXRlcy5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcIi4vY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfYnl0ZXMgZnJvbSBcIi4vY2FtbF9ieXRlcy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9wcmltaXRpdmUgZnJvbSBcIi4vY2FtbF9wcmltaXRpdmUuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIG1ha2UobiwgYykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFrZShuLCBjKSk7XG59XG5cbmZ1bmN0aW9uIGluaXQobiwgZikge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMuaW5pdChuLCBmKSk7XG59XG5cbmZ1bmN0aW9uIGNvcHkocykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMuY29weShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBzdWIocywgb2ZzLCBsZW4pIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnN1YihDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSwgb2ZzLCBsZW4pKTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlX2dlKHgsIHkpIHtcbiAgaWYgKHggPj0geSkge1xuICAgIHJldHVybiB4O1xuICB9XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgXCJTdHJpbmcuY29uY2F0XCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHN1bV9sZW5ndGhzKF9hY2MsIHNlcGxlbiwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgdmFyIHRsID0gcGFyYW1bMV07XG4gICAgdmFyIGhkID0gcGFyYW1bMF07XG4gICAgaWYgKCF0bCkge1xuICAgICAgcmV0dXJuIGhkLmxlbmd0aCArIGFjYyB8IDA7XG4gICAgfVxuICAgIF9wYXJhbSA9IHRsO1xuICAgIF9hY2MgPSBlbnN1cmVfZ2UoKGhkLmxlbmd0aCArIHNlcGxlbiB8IDApICsgYWNjIHwgMCwgYWNjKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVuc2FmZV9ibGl0cyhkc3QsIF9wb3MsIHNlcCwgc2VwbGVuLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgcG9zID0gX3BvcztcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gZHN0O1xuICAgIH1cbiAgICB2YXIgdGwgPSBwYXJhbVsxXTtcbiAgICB2YXIgaGQgPSBwYXJhbVswXTtcbiAgICBpZiAodGwpIHtcbiAgICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X3N0cmluZyhoZCwgMCwgZHN0LCBwb3MsIGhkLmxlbmd0aCk7XG4gICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9zdHJpbmcoc2VwLCAwLCBkc3QsIHBvcyArIGhkLmxlbmd0aCB8IDAsIHNlcGxlbik7XG4gICAgICBfcGFyYW0gPSB0bDtcbiAgICAgIF9wb3MgPSAocG9zICsgaGQubGVuZ3RoIHwgMCkgKyBzZXBsZW4gfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9zdHJpbmcoaGQsIDAsIGRzdCwgcG9zLCBoZC5sZW5ndGgpO1xuICAgIHJldHVybiBkc3Q7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChzZXAsIGwpIHtcbiAgaWYgKCFsKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgdmFyIHNlcGxlbiA9IHNlcC5sZW5ndGg7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyh1bnNhZmVfYmxpdHMoQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhzdW1fbGVuZ3RocygwLCBzZXBsZW4sIGwpKSwgMCwgc2VwLCBzZXBsZW4sIGwpKTtcbn1cblxuZnVuY3Rpb24gaXRlcihmLCBzKSB7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gcy5sZW5ndGg7IGkgPCBpX2ZpbmlzaDsgKytpKXtcbiAgICBDdXJyeS5fMShmLCBzLmNoYXJDb2RlQXQoaSkpO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBpdGVyaShmLCBzKSB7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gcy5sZW5ndGg7IGkgPCBpX2ZpbmlzaDsgKytpKXtcbiAgICBDdXJyeS5fMihmLCBpLCBzLmNoYXJDb2RlQXQoaSkpO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtYXAoZiwgcykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFwKGYsIENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIG1hcGkoZiwgcykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMubWFwaShmLCBDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBpc19zcGFjZShwYXJhbSkge1xuICB2YXIgc3dpdGNoZXIgPSBwYXJhbSAtIDkgfCAwO1xuICBpZiAoc3dpdGNoZXIgPiA0IHx8IHN3aXRjaGVyIDwgMCkge1xuICAgIHJldHVybiBzd2l0Y2hlciA9PT0gMjM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN3aXRjaGVyICE9PSAyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaW0ocykge1xuICBpZiAocyA9PT0gXCJcIiB8fCAhKGlzX3NwYWNlKHMuY2hhckNvZGVBdCgwKSkgfHwgaXNfc3BhY2Uocy5jaGFyQ29kZUF0KHMubGVuZ3RoIC0gMSB8IDApKSkpIHtcbiAgICByZXR1cm4gcztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMudHJpbShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWQocykge1xuICB2YXIgbmVlZHNfZXNjYXBlID0gZnVuY3Rpb24gKF9pKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIGlmIChpID49IHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgIGlmIChtYXRjaCA8IDMyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIHN3aXRjaGVyID0gbWF0Y2ggLSAzNCB8IDA7XG4gICAgICBpZiAoc3dpdGNoZXIgPiA1OCB8fCBzd2l0Y2hlciA8IDApIHtcbiAgICAgICAgaWYgKHN3aXRjaGVyID49IDkzKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2l0Y2hlciA+IDU3IHx8IHN3aXRjaGVyIDwgMSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIGlmIChuZWVkc19lc2NhcGUoMCkpIHtcbiAgICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMuZXNjYXBlZChDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4X3JlYyhzLCBsaW0sIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kO1xuICAgIH1cbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpID09PSBjKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpbmRleChzLCBjKSB7XG4gIHJldHVybiBpbmRleF9yZWMocywgcy5sZW5ndGgsIDAsIGMpO1xufVxuXG5mdW5jdGlvbiBpbmRleF9yZWNfb3B0KHMsIGxpbSwgX2ksIGMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPj0gbGltKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpID09PSBjKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpbmRleF9vcHQocywgYykge1xuICByZXR1cm4gaW5kZXhfcmVjX29wdChzLCBzLmxlbmd0aCwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4X2Zyb20ocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5pbmRleF9mcm9tIC8gQnl0ZXMuaW5kZXhfZnJvbVwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIGluZGV4X3JlYyhzLCBsLCBpLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfZnJvbV9vcHQocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5pbmRleF9mcm9tX29wdCAvIEJ5dGVzLmluZGV4X2Zyb21fb3B0XCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gaW5kZXhfcmVjX29wdChzLCBsLCBpLCBjKTtcbn1cblxuZnVuY3Rpb24gcmluZGV4X3JlYyhzLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIF9pID0gaSAtIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmluZGV4KHMsIGMpIHtcbiAgcmV0dXJuIHJpbmRleF9yZWMocywgcy5sZW5ndGggLSAxIHwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9mcm9tKHMsIGksIGMpIHtcbiAgaWYgKGkgPCAtMSB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcucmluZGV4X2Zyb20gLyBCeXRlcy5yaW5kZXhfZnJvbVwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIHJpbmRleF9yZWMocywgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9yZWNfb3B0KHMsIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIF9pID0gaSAtIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmluZGV4X29wdChzLCBjKSB7XG4gIHJldHVybiByaW5kZXhfcmVjX29wdChzLCBzLmxlbmd0aCAtIDEgfCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gcmluZGV4X2Zyb21fb3B0KHMsIGksIGMpIHtcbiAgaWYgKGkgPCAtMSB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcucmluZGV4X2Zyb21fb3B0IC8gQnl0ZXMucmluZGV4X2Zyb21fb3B0XCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gcmluZGV4X3JlY19vcHQocywgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zX2Zyb20ocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5jb250YWluc19mcm9tIC8gQnl0ZXMuY29udGFpbnNfZnJvbVwiXG4gICAgICAgIF07XG4gIH1cbiAgdHJ5IHtcbiAgICBpbmRleF9yZWMocywgbCwgaSwgYyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgaWYgKGV4biA9PT0gQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGV4bjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb250YWlucyhzLCBjKSB7XG4gIHJldHVybiBjb250YWluc19mcm9tKHMsIDAsIGMpO1xufVxuXG5mdW5jdGlvbiByY29udGFpbnNfZnJvbShzLCBpLCBjKSB7XG4gIGlmIChpIDwgMCB8fCBpID49IHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcucmNvbnRhaW5zX2Zyb20gLyBCeXRlcy5yY29udGFpbnNfZnJvbVwiXG4gICAgICAgIF07XG4gIH1cbiAgdHJ5IHtcbiAgICByaW5kZXhfcmVjKHMsIGksIGMpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBleG47XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBwZXJjYXNlX2FzY2lpKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnVwcGVyY2FzZV9hc2NpaShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBsb3dlcmNhc2VfYXNjaWkocykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMubG93ZXJjYXNlX2FzY2lpKENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemVfYXNjaWkocykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMuY2FwaXRhbGl6ZV9hc2NpaShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiB1bmNhcGl0YWxpemVfYXNjaWkocykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMudW5jYXBpdGFsaXplX2FzY2lpKENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbnZhciBjb21wYXJlID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9zdHJpbmdfY29tcGFyZTtcblxuZnVuY3Rpb24gc3BsaXRfb25fY2hhcihzZXAsIHMpIHtcbiAgdmFyIHIgPSAvKiBbXSAqLzA7XG4gIHZhciBqID0gcy5sZW5ndGg7XG4gIGZvcih2YXIgaSA9IHMubGVuZ3RoIC0gMSB8IDA7IGkgPj0gMDsgLS1pKXtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpID09PSBzZXApIHtcbiAgICAgIHIgPSAvKiA6OiAqL1tcbiAgICAgICAgc3ViKHMsIGkgKyAxIHwgMCwgKGogLSBpIHwgMCkgLSAxIHwgMCksXG4gICAgICAgIHJcbiAgICAgIF07XG4gICAgICBqID0gaTtcbiAgICB9XG4gICAgXG4gIH1cbiAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgIHN1YihzLCAwLCBqKSxcbiAgICAgICAgICByXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHVwcGVyY2FzZShzKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy51cHBlcmNhc2UoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmxvd2VyY2FzZShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmNhcGl0YWxpemUoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gdW5jYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnVuY2FwaXRhbGl6ZShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG52YXIgZmlsbCA9IEJ5dGVzLmZpbGw7XG5cbnZhciBibGl0ID0gQnl0ZXMuYmxpdF9zdHJpbmc7XG5cbmZ1bmN0aW9uIGVxdWFsKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSA9PT0gcHJpbSQxO1xufVxuXG5leHBvcnQge1xuICBtYWtlICxcbiAgaW5pdCAsXG4gIGNvcHkgLFxuICBzdWIgLFxuICBmaWxsICxcbiAgYmxpdCAsXG4gIGNvbmNhdCAsXG4gIGl0ZXIgLFxuICBpdGVyaSAsXG4gIG1hcCAsXG4gIG1hcGkgLFxuICB0cmltICxcbiAgZXNjYXBlZCAsXG4gIGluZGV4ICxcbiAgaW5kZXhfb3B0ICxcbiAgcmluZGV4ICxcbiAgcmluZGV4X29wdCAsXG4gIGluZGV4X2Zyb20gLFxuICBpbmRleF9mcm9tX29wdCAsXG4gIHJpbmRleF9mcm9tICxcbiAgcmluZGV4X2Zyb21fb3B0ICxcbiAgY29udGFpbnMgLFxuICBjb250YWluc19mcm9tICxcbiAgcmNvbnRhaW5zX2Zyb20gLFxuICB1cHBlcmNhc2UgLFxuICBsb3dlcmNhc2UgLFxuICBjYXBpdGFsaXplICxcbiAgdW5jYXBpdGFsaXplICxcbiAgdXBwZXJjYXNlX2FzY2lpICxcbiAgbG93ZXJjYXNlX2FzY2lpICxcbiAgY2FwaXRhbGl6ZV9hc2NpaSAsXG4gIHVuY2FwaXRhbGl6ZV9hc2NpaSAsXG4gIGNvbXBhcmUgLFxuICBlcXVhbCAsXG4gIHNwbGl0X29uX2NoYXIgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEpzX2V4biBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9qc19leG4uanNcIjtcbmltcG9ydCAqIGFzICQkU3RyaW5nIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3N0cmluZy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9pbnQzMiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2ludDMyLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTWFwIGZyb20gXCIuL1JlbHVkZV9NYXAuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9TZXQgZnJvbSBcIi4vUmVsdWRlX1NldC5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9mb3JtYXQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9mb3JtYXQuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRmxvYXQgZnJvbSBcIi4vUmVsdWRlX0Zsb2F0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBTdHJpbmckQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfQmFzZSBmcm9tIFwiLi9saXN0L1JlbHVkZV9MaXN0X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9CYXNlIGZyb20gXCIuL2FycmF5L1JlbHVkZV9BcnJheV9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19FcSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0VxLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19PcmQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19PcmQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0luc3RhbmNlcyBmcm9tIFwiLi9saXN0L1JlbHVkZV9MaXN0X0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cC5icy5qc1wiO1xuXG52YXIgZW1wdHkgPSBcIlwiO1xuXG5mdW5jdGlvbiBsZW5ndGgocHJpbSkge1xuICByZXR1cm4gcHJpbS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkocykge1xuICByZXR1cm4gcy5sZW5ndGggPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTm9uRW1wdHkocykge1xuICByZXR1cm4gcy5sZW5ndGggIT09IDA7XG59XG5cbmZ1bmN0aW9uIHRvTm9uRW1wdHkocykge1xuICBpZiAocy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaW0ocHJpbSkge1xuICByZXR1cm4gcHJpbS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShzKSB7XG4gIHZhciBzJDEgPSBzLnRyaW0oKTtcbiAgcmV0dXJuIHMkMS5sZW5ndGggPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTm9uV2hpdGVzcGFjZShzKSB7XG4gIHZhciBzJDEgPSBzLnRyaW0oKTtcbiAgcmV0dXJuIHMkMS5sZW5ndGggIT09IDA7XG59XG5cbmZ1bmN0aW9uIHRvTm9uV2hpdGVzcGFjZShzKSB7XG4gIHZhciBzJDEgPSBzLnRyaW0oKTtcbiAgaWYgKHMkMS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChhLCBiKSB7XG4gIHJldHVybiBhICsgYjtcbn1cblxudmFyIFNlbWlncm91cCA9IHtcbiAgYXBwZW5kOiBjb25jYXRcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwLlNlbWlncm91cEV4dGVuc2lvbnMoU2VtaWdyb3VwKTtcblxudmFyIE1vbm9pZCA9IHtcbiAgYXBwZW5kOiBjb25jYXQsXG4gIGVtcHR5OiBlbXB0eVxufTtcblxudmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX01vbm9pZC5Nb25vaWRFeHRlbnNpb25zKE1vbm9pZCk7XG5cbmZ1bmN0aW9uIGNvbmNhdEFycmF5KGFycmF5KSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKGFjYywgc3RyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIHN0cjtcbiAgICAgICAgICAgICAgfSksIFwiXCIsIGFycmF5KTtcbn1cblxuZnVuY3Rpb24gY29uY2F0TGlzdChsaXN0KSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uIChhY2MsIHN0cikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIHN0cjtcbiAgICAgICAgICAgICAgICB9KSwgXCJcIikobGlzdCk7XG59XG5cbmZ1bmN0aW9uIG1ha2UocHJpbSkge1xuICByZXR1cm4gU3RyaW5nKHByaW0pO1xufVxuXG5mdW5jdGlvbiBtYWtlV2l0aEluZGV4KGksIGYpIHtcbiAgdmFyIF9hY2MgPSBcIlwiO1xuICB2YXIgX2lkeCA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaWR4ID0gX2lkeDtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICBpZiAoaWR4ID49IGkpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIF9pZHggPSBpZHggKyAxIHwgMDtcbiAgICBfYWNjID0gYWNjICsgQ3VycnkuXzEoZiwgaWR4KTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlcGVhdChpLCBzdHIpIHtcbiAgdmFyIF9hY2MgPSBcIlwiO1xuICB2YXIgX2kgPSBpO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkkMSA9IF9pO1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIGlmIChpJDEgPD0gMCkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgX2kgPSBpJDEgLSAxIHwgMDtcbiAgICBfYWNjID0gYWNjICsgc3RyO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9VcHBlckNhc2UocHJpbSkge1xuICByZXR1cm4gcHJpbS50b1VwcGVyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiB0b0xvd2VyQ2FzZShwcmltKSB7XG4gIHJldHVybiBwcmltLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIGZyb21DaGFyQ29kZShwcmltKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHByaW0pO1xufVxuXG5mdW5jdGlvbiBjaGFyQ29kZUF0KGksIHN0cikge1xuICB2YXIgY29kZSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICBpZiAoUmVsdWRlX0Zsb2F0LiQkaXNOYU4oY29kZSkpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb2RlIHwgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGFyQXQoaSwgc3RyKSB7XG4gIHJldHVybiBDYW1sX29wdGlvbi5udWxsYWJsZV90b19vcHQoc3RyW2ldKTtcbn1cblxuZnVuY3Rpb24gY2hhckF0T3JFbXB0eShpLCBzdHIpIHtcbiAgdmFyIHggPSBzdHJbaV07XG4gIGlmICh4ID09IG51bGwpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfSBlbHNlIGlmICh4ID09IG51bGwpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoYXJBdE51bGxhYmxlKGksIHN0cikge1xuICByZXR1cm4gc3RyW2ldO1xufVxuXG5mdW5jdGlvbiBjaGFyQXRPclRocm93KGksIHN0cikge1xuICB2YXIgdiA9IHN0cltpXTtcbiAgaWYgKHYgPT0gbnVsbCkge1xuICAgIHJldHVybiBKc19leG4ucmFpc2VSYW5nZUVycm9yKFwiRmFpbGVkIHRvIGdldCBzdHJpbmcgYXQgaW5kZXggXCIgKyAoU3RyaW5nKGkpICsgKFwiIGZvciBzdHJpbmc6IFwiICsgc3RyKSkpO1xuICB9IGVsc2UgaWYgKHYgPT0gbnVsbCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUodik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9MaXN0KHN0cikge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5tYWtlV2l0aEluZGV4KHN0ci5sZW5ndGgsIChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFyQXRPclRocm93KGksIHN0cik7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShzdHIpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLm1ha2VXaXRoSW5kZXgoc3RyLmxlbmd0aCwgKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJBdE9yVGhyb3coaSwgc3RyKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBmb2xkTGVmdChmLCBpbml0LCBzdHIpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkTGVmdChmLCBpbml0KSh0b0xpc3Qoc3RyKSk7XG59XG5cbmZ1bmN0aW9uIGZvbGRSaWdodChmLCBpbml0LCBzdHIpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkUmlnaHQoZiwgaW5pdCkodG9MaXN0KHN0cikpO1xufVxuXG5mdW5jdGlvbiBzaG93KGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbnZhciBTaG93ID0ge1xuICBzaG93OiBzaG93XG59O1xuXG5mdW5jdGlvbiBlcShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG52YXIgRXEgPSB7XG4gIGVxOiBlcVxufTtcblxudmFyIGluY2x1ZGUkMiA9IFJlbHVkZV9FeHRlbnNpb25zX0VxLkVxRXh0ZW5zaW9ucyhFcSk7XG5cbnZhciBjb21wYXJlID0gU3RyaW5nJEJzQmFzdGV0Lk9yZC5jb21wYXJlO1xuXG52YXIgT3JkID0ge1xuICBlcTogZXEsXG4gIGNvbXBhcmU6IGNvbXBhcmVcbn07XG5cbnZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19PcmQuT3JkRXh0ZW5zaW9ucyhPcmQpO1xuXG52YXIgJCRNYXAgPSBSZWx1ZGVfTWFwLldpdGhPcmQoT3JkKTtcblxudmFyICQkU2V0ID0gUmVsdWRlX1NldC5XaXRoT3JkKE9yZCk7XG5cbmZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaCwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LmVuZHNXaXRoKHNlYXJjaCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoLCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQuc3RhcnRzV2l0aChzZWFyY2gpO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyhzZWFyY2gsIGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5pbmNsdWRlcyhzZWFyY2gpO1xufVxuXG5mdW5jdGlvbiBpbmRleE9mKHNlYXJjaCwgaW5wdXQpIHtcbiAgdmFyIGluZGV4ID0gaW5wdXQuaW5kZXhPZihzZWFyY2gpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoLCBpbnB1dCkge1xuICB2YXIgaW5kZXggPSBpbnB1dC5sYXN0SW5kZXhPZihzZWFyY2gpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2xpY2UoZnJvbUluZGV4LCB0b0luZGV4LCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQuc2xpY2UoZnJvbUluZGV4LCB0b0luZGV4KTtcbn1cblxuZnVuY3Rpb24gc2xpY2VUb0VuZChmcm9tSW5kZXgsIHN0cikge1xuICByZXR1cm4gc3RyLnNsaWNlKGZyb21JbmRleCk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXJyYXkoZGVsaW1pdGVyLCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQuc3BsaXQoZGVsaW1pdGVyKTtcbn1cblxuZnVuY3Rpb24gc3BsaXRMaXN0KGRlbGltaXRlciwgaW5wdXQpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mcm9tQXJyYXkoaW5wdXQuc3BsaXQoZGVsaW1pdGVyKSk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXQoaW5kZXgsIGlucHV0KSB7XG4gIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICBpbnB1dC5zbGljZSgwLCBpbmRleCksXG4gICAgICAgICAgaW5wdXQuc2xpY2UoaW5kZXgpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG1hcENoYXJzKGYsIHN0cikge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRNYXAsIE1vbm9pZCwgZiwgdG9MaXN0KHN0cikpO1xufVxuXG5mdW5jdGlvbiBwYWRTdGFydCh0YXJnZXRMZW5ndGgsIHBhZFdpdGhPcHQsIGlucHV0KSB7XG4gIHZhciBwYWRXaXRoID0gcGFkV2l0aE9wdCAhPT0gdW5kZWZpbmVkID8gcGFkV2l0aE9wdCA6IFwiIFwiO1xuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gIHZhciBwYWRXaXRoTGVuZ3RoID0gcGFkV2l0aC5sZW5ndGg7XG4gIGlmIChpbnB1dExlbmd0aCA+PSB0YXJnZXRMZW5ndGgpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgaWYgKHBhZFdpdGhMZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgdmFyIHBhZExlbmd0aCA9IHRhcmdldExlbmd0aCAtIGlucHV0TGVuZ3RoIHwgMDtcbiAgdmFyIHBhZFRpbWVzID0gQ2FtbF9pbnQzMi5kaXYocGFkTGVuZ3RoLCBwYWRXaXRoTGVuZ3RoKSArIDEgfCAwO1xuICB2YXIgcGFkID0gcmVwZWF0KHBhZFRpbWVzLCBwYWRXaXRoKS5zbGljZSgwLCBwYWRMZW5ndGgpO1xuICByZXR1cm4gcGFkICsgaW5wdXQ7XG59XG5cbmZ1bmN0aW9uIHBhZEVuZCh0YXJnZXRMZW5ndGgsIHBhZFdpdGhPcHQsIGlucHV0KSB7XG4gIHZhciBwYWRXaXRoID0gcGFkV2l0aE9wdCAhPT0gdW5kZWZpbmVkID8gcGFkV2l0aE9wdCA6IFwiIFwiO1xuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gIHZhciBwYWRXaXRoTGVuZ3RoID0gcGFkV2l0aC5sZW5ndGg7XG4gIGlmIChpbnB1dExlbmd0aCA+PSB0YXJnZXRMZW5ndGgpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgaWYgKHBhZFdpdGhMZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgdmFyIHBhZExlbmd0aCA9IHRhcmdldExlbmd0aCAtIGlucHV0TGVuZ3RoIHwgMDtcbiAgdmFyIHBhZFRpbWVzID0gQ2FtbF9pbnQzMi5kaXYocGFkTGVuZ3RoLCBwYWRXaXRoTGVuZ3RoKSArIDEgfCAwO1xuICB2YXIgcGFkID0gcmVwZWF0KHBhZFRpbWVzLCBwYWRXaXRoKS5zbGljZSgwLCBwYWRMZW5ndGgpO1xuICByZXR1cm4gaW5wdXQgKyBwYWQ7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VGaXJzdChzZWFyY2gsIHJlcGxhY2VXaXRoLCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShzZWFyY2gsIHJlcGxhY2VXaXRoKTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUVhY2goc2VhcmNoLCByZXBsYWNlV2l0aCwgaW5wdXQpIHtcbiAgcmV0dXJuICQkU3RyaW5nLmNvbmNhdChyZXBsYWNlV2l0aCwgUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZyb21BcnJheShpbnB1dC5zcGxpdChzZWFyY2gpKSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VSZWdleChzZWFyY2gsIHJlcGxhY2VXaXRoLCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShzZWFyY2gsIHJlcGxhY2VXaXRoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3Qoc2VhcmNoLCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShzZWFyY2gsIFwiXCIpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoKHNlYXJjaCwgaW5wdXQpIHtcbiAgcmV0dXJuIHJlcGxhY2VFYWNoKHNlYXJjaCwgXCJcIiwgaW5wdXQpO1xufVxuXG5mdW5jdGlvbiBmcm9tSW50KHByaW0pIHtcbiAgcmV0dXJuIFN0cmluZyhwcmltKTtcbn1cblxuZnVuY3Rpb24gdG9JbnQodikge1xuICB0cnkge1xuICAgIHJldHVybiBDYW1sX2Zvcm1hdC5jYW1sX2ludF9vZl9zdHJpbmcodik7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tRmxvYXQocHJpbSkge1xuICByZXR1cm4gcHJpbS50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiB0b0Zsb2F0KHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9mbG9hdF9vZl9zdHJpbmcodik7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG52YXIgaXNOb3RFbXB0eSA9IGlzTm9uRW1wdHk7XG5cbnZhciBjb25jYXROYW1lZCA9IGluY2x1ZGUuY29uY2F0TmFtZWQ7XG5cbnZhciBCc01vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuQnNNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZ3VhcmQgPSBpbmNsdWRlJDEuZ3VhcmQ7XG5cbnZhciBwb3dlciA9IGluY2x1ZGUkMS5wb3dlcjtcblxudmFyIGVxV2l0aENvbnZlcnNpb24gPSBpbmNsdWRlJDIuZXFXaXRoQ29udmVyc2lvbjtcblxudmFyIG5vdEVxID0gaW5jbHVkZSQyLm5vdEVxO1xuXG52YXIgZXFJbnZlcnRlZCA9IGluY2x1ZGUkMi5lcUludmVydGVkO1xuXG52YXIgRXFJbnZlcnRlZCA9IGluY2x1ZGUkMi5FcUludmVydGVkO1xuXG52YXIgRXFCeSA9IGluY2x1ZGUkMi5FcUJ5O1xuXG52YXIgY29tcGFyZVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZSQzLmNvbXBhcmVXaXRoQ29udmVyc2lvbjtcblxudmFyIGNvbXBhcmVSZXZlcnNlZCA9IGluY2x1ZGUkMy5jb21wYXJlUmV2ZXJzZWQ7XG5cbnZhciBPcmRSZXZlcnNlZCA9IGluY2x1ZGUkMy5PcmRSZXZlcnNlZDtcblxudmFyIGNvbXBhcmVBc0ludCA9IGluY2x1ZGUkMy5jb21wYXJlQXNJbnQ7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDMubWluO1xuXG52YXIgbWF4ID0gaW5jbHVkZSQzLm1heDtcblxudmFyIGxlc3NUaGFuID0gaW5jbHVkZSQzLmxlc3NUaGFuO1xuXG52YXIgbHQgPSBpbmNsdWRlJDMubHQ7XG5cbnZhciBsZXNzVGhhbk9yRXEgPSBpbmNsdWRlJDMubGVzc1RoYW5PckVxO1xuXG52YXIgbHRlID0gaW5jbHVkZSQzLmx0ZTtcblxudmFyIGdyZWF0ZXJUaGFuID0gaW5jbHVkZSQzLmdyZWF0ZXJUaGFuO1xuXG52YXIgZ3QgPSBpbmNsdWRlJDMuZ3Q7XG5cbnZhciBncmVhdGVyVGhhbk9yRXEgPSBpbmNsdWRlJDMuZ3JlYXRlclRoYW5PckVxO1xuXG52YXIgZ3RlID0gaW5jbHVkZSQzLmd0ZTtcblxudmFyIGNsYW1wID0gaW5jbHVkZSQzLmNsYW1wO1xuXG52YXIgYmV0d2VlbiA9IGluY2x1ZGUkMy5iZXR3ZWVuO1xuXG52YXIgT3JkUmluZ0V4dGVuc2lvbnMgPSBpbmNsdWRlJDMuT3JkUmluZ0V4dGVuc2lvbnM7XG5cbnZhciBPcmROYW1lZCA9IGluY2x1ZGUkMy5PcmROYW1lZDtcblxudmFyIE9yZEJ5ID0gaW5jbHVkZSQzLk9yZEJ5O1xuXG52YXIgc3BsaXRBc0FycmF5ID0gc3BsaXRBcnJheTtcblxudmFyIHNwbGl0QXNMaXN0ID0gc3BsaXRMaXN0O1xuXG5leHBvcnQge1xuICBlbXB0eSAsXG4gIGxlbmd0aCAsXG4gIGlzRW1wdHkgLFxuICBpc05vbkVtcHR5ICxcbiAgaXNOb3RFbXB0eSAsXG4gIHRvTm9uRW1wdHkgLFxuICB0cmltICxcbiAgaXNXaGl0ZXNwYWNlICxcbiAgaXNOb25XaGl0ZXNwYWNlICxcbiAgdG9Ob25XaGl0ZXNwYWNlICxcbiAgY29uY2F0ICxcbiAgU2VtaWdyb3VwICxcbiAgY29uY2F0TmFtZWQgLFxuICBNb25vaWQgLFxuICBCc01vbm9pZEV4dGVuc2lvbnMgLFxuICBndWFyZCAsXG4gIHBvd2VyICxcbiAgY29uY2F0QXJyYXkgLFxuICBjb25jYXRMaXN0ICxcbiAgbWFrZSAsXG4gIG1ha2VXaXRoSW5kZXggLFxuICByZXBlYXQgLFxuICB0b1VwcGVyQ2FzZSAsXG4gIHRvTG93ZXJDYXNlICxcbiAgZnJvbUNoYXJDb2RlICxcbiAgY2hhckNvZGVBdCAsXG4gIGNoYXJBdCAsXG4gIGNoYXJBdE9yRW1wdHkgLFxuICBjaGFyQXROdWxsYWJsZSAsXG4gIGNoYXJBdE9yVGhyb3cgLFxuICB0b0xpc3QgLFxuICB0b0FycmF5ICxcbiAgZm9sZExlZnQgLFxuICBmb2xkUmlnaHQgLFxuICBzaG93ICxcbiAgU2hvdyAsXG4gIGVxICxcbiAgRXEgLFxuICBlcVdpdGhDb252ZXJzaW9uICxcbiAgbm90RXEgLFxuICBlcUludmVydGVkICxcbiAgRXFJbnZlcnRlZCAsXG4gIEVxQnkgLFxuICBjb21wYXJlICxcbiAgT3JkICxcbiAgY29tcGFyZVdpdGhDb252ZXJzaW9uICxcbiAgY29tcGFyZVJldmVyc2VkICxcbiAgT3JkUmV2ZXJzZWQgLFxuICBjb21wYXJlQXNJbnQgLFxuICBtaW4gLFxuICBtYXggLFxuICBsZXNzVGhhbiAsXG4gIGx0ICxcbiAgbGVzc1RoYW5PckVxICxcbiAgbHRlICxcbiAgZ3JlYXRlclRoYW4gLFxuICBndCAsXG4gIGdyZWF0ZXJUaGFuT3JFcSAsXG4gIGd0ZSAsXG4gIGNsYW1wICxcbiAgYmV0d2VlbiAsXG4gIE9yZFJpbmdFeHRlbnNpb25zICxcbiAgT3JkTmFtZWQgLFxuICBPcmRCeSAsXG4gICQkTWFwICxcbiAgJCRTZXQgLFxuICBlbmRzV2l0aCAsXG4gIHN0YXJ0c1dpdGggLFxuICBjb250YWlucyAsXG4gIGluZGV4T2YgLFxuICBsYXN0SW5kZXhPZiAsXG4gIHNsaWNlICxcbiAgc2xpY2VUb0VuZCAsXG4gIHNwbGl0QXJyYXkgLFxuICBzcGxpdEFzQXJyYXkgLFxuICBzcGxpdExpc3QgLFxuICBzcGxpdEFzTGlzdCAsXG4gIHNwbGl0QXQgLFxuICBtYXBDaGFycyAsXG4gIHBhZFN0YXJ0ICxcbiAgcGFkRW5kICxcbiAgcmVwbGFjZUZpcnN0ICxcbiAgcmVwbGFjZUVhY2ggLFxuICByZXBsYWNlUmVnZXggLFxuICByZW1vdmVGaXJzdCAsXG4gIHJlbW92ZUVhY2ggLFxuICBmcm9tSW50ICxcbiAgdG9JbnQgLFxuICBmcm9tRmxvYXQgLFxuICB0b0Zsb2F0ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwiLi4vUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCIuLi9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbnQkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0ludC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0Zsb2F0IGZyb20gXCIuLi9SZWx1ZGVfRmxvYXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIExpc3QkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0xpc3QuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9SZXN1bHQgZnJvbSBcIi4uL1JlbHVkZV9SZXN1bHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9TdHJpbmcgZnJvbSBcIi4uL1JlbHVkZV9TdHJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIEZsb2F0JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9GbG9hdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX05vbkVtcHR5IGZyb20gXCIuLi9SZWx1ZGVfTm9uRW1wdHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0Jhc2UgZnJvbSBcIi4vUmVsdWRlX0xpc3RfQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1ZhbGlkYXRpb24gZnJvbSBcIi4uL1JlbHVkZV9WYWxpZGF0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMgZnJvbSBcIi4vUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcyBmcm9tIFwiLi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIExpc3RFcUV4dGVuc2lvbnMoRSkge1xuICB2YXIgaW5jbHVkZSA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucywgRSk7XG4gIHZhciBkaXN0aW5jdCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLmRpc3RpbmN0QnkoRS5lcSwgcGFyYW0pO1xuICB9O1xuICB2YXIgcmVtb3ZlRmlyc3QgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVGaXJzdEJ5KEUuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIHJlbW92ZUVhY2ggPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVFYWNoQnkoRS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgZXEgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmVxQnkoRS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRhaW5zOiBpbmNsdWRlLmNvbnRhaW5zLFxuICAgICAgICAgIGluZGV4T2Y6IGluY2x1ZGUuaW5kZXhPZixcbiAgICAgICAgICBkaXN0aW5jdDogZGlzdGluY3QsXG4gICAgICAgICAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0LFxuICAgICAgICAgIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gsXG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIExpc3RPcmRFeHRlbnNpb25zKE8pIHtcbiAgdmFyIGluY2x1ZGUgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIE8pO1xuICB2YXIgZGlzdGluY3QgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5kaXN0aW5jdEJ5KE8uZXEsIHBhcmFtKTtcbiAgfTtcbiAgdmFyIHJlbW92ZUZpcnN0ID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRmlyc3RCeShPLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaEJ5KE8uZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5KE8uZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIE8pO1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnNvcnRCeShPLmNvbXBhcmUsIHBhcmFtKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjb250YWluczogaW5jbHVkZS5jb250YWlucyxcbiAgICAgICAgICBpbmRleE9mOiBpbmNsdWRlLmluZGV4T2YsXG4gICAgICAgICAgZGlzdGluY3Q6IGRpc3RpbmN0LFxuICAgICAgICAgIHJlbW92ZUZpcnN0OiByZW1vdmVGaXJzdCxcbiAgICAgICAgICByZW1vdmVFYWNoOiByZW1vdmVFYWNoLFxuICAgICAgICAgIGVxOiBlcSxcbiAgICAgICAgICBtaW46IGluY2x1ZGUkMS5taW4sXG4gICAgICAgICAgbWF4OiBpbmNsdWRlJDEubWF4LFxuICAgICAgICAgIHNvcnQ6IHNvcnRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTGlzdE1vbm9pZEV4dGVuc2lvbnMoTSkge1xuICByZXR1cm4gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucywgTSk7XG59XG5cbnZhciBpbmNsdWRlID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBSZWx1ZGVfU3RyaW5nLk9yZCk7XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0KHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUZpcnN0QnkoUmVsdWRlX1N0cmluZy5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaChwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVFYWNoQnkoUmVsdWRlX1N0cmluZy5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gZXEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5KFJlbHVkZV9TdHJpbmcuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbnZhciBpbmNsdWRlJDEgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zLCBSZWx1ZGVfU3RyaW5nLk9yZCk7XG5cbmZ1bmN0aW9uIHNvcnQocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2Uuc29ydEJ5KFJlbHVkZV9TdHJpbmcuT3JkLmNvbXBhcmUsIHBhcmFtKTtcbn1cblxudmFyIGluY2x1ZGUkMiA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMsIFJlbHVkZV9TdHJpbmcuTW9ub2lkKTtcblxudmFyIGZvbGRXaXRoTW9ub2lkID0gaW5jbHVkZSQyLmZvbGRXaXRoTW9ub2lkO1xuXG52YXIgaW50ZXJjYWxhdGUgPSBpbmNsdWRlJDIuaW50ZXJjYWxhdGU7XG5cbmZ1bmN0aW9uIGRpc3RpbmN0KHhzKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZnJvbUFycmF5KE9iamVjdC5rZXlzKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkTGVmdCgoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NbY3Vycl0gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIHsgfSkoeHMpKSk7XG59XG5cbnZhciBTdHJpbmdfY29udGFpbnMgPSBpbmNsdWRlLmNvbnRhaW5zO1xuXG52YXIgU3RyaW5nX2luZGV4T2YgPSBpbmNsdWRlLmluZGV4T2Y7XG5cbnZhciBTdHJpbmdfbWluID0gaW5jbHVkZSQxLm1pbjtcblxudmFyIFN0cmluZ19tYXggPSBpbmNsdWRlJDEubWF4O1xuXG52YXIgU3RyaW5nX0JzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gaW5jbHVkZSQyLkJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgU3RyaW5nX2ZvbGRNYXAgPSBpbmNsdWRlJDIuZm9sZE1hcDtcblxudmFyICQkU3RyaW5nID0ge1xuICBjb250YWluczogU3RyaW5nX2NvbnRhaW5zLFxuICBpbmRleE9mOiBTdHJpbmdfaW5kZXhPZixcbiAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0LFxuICByZW1vdmVFYWNoOiByZW1vdmVFYWNoLFxuICBlcTogZXEsXG4gIG1pbjogU3RyaW5nX21pbixcbiAgbWF4OiBTdHJpbmdfbWF4LFxuICBzb3J0OiBzb3J0LFxuICBCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogU3RyaW5nX0JzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICBmb2xkTWFwOiBTdHJpbmdfZm9sZE1hcCxcbiAgZm9sZFdpdGhNb25vaWQ6IGZvbGRXaXRoTW9ub2lkLFxuICBpbnRlcmNhbGF0ZTogaW50ZXJjYWxhdGUsXG4gIGpvaW46IGZvbGRXaXRoTW9ub2lkLFxuICBqb2luV2l0aDogaW50ZXJjYWxhdGUsXG4gIGRpc3RpbmN0OiBkaXN0aW5jdFxufTtcblxudmFyIGluY2x1ZGUkMyA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucywgUmVsdWRlX0ludC5PcmQpO1xuXG5mdW5jdGlvbiBkaXN0aW5jdCQxKHBhcmFtKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLmRpc3RpbmN0QnkoUmVsdWRlX0ludC5PcmQuZXEsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3QkMShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVGaXJzdEJ5KFJlbHVkZV9JbnQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVhY2gkMShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVFYWNoQnkoUmVsdWRlX0ludC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gZXEkMShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmVxQnkoUmVsdWRlX0ludC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxudmFyIGluY2x1ZGUkNCA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIFJlbHVkZV9JbnQuT3JkKTtcblxuZnVuY3Rpb24gc29ydCQxKHBhcmFtKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnNvcnRCeShSZWx1ZGVfSW50Lk9yZC5jb21wYXJlLCBwYXJhbSk7XG59XG5cbnZhciBzdW0gPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEludCRCc0Jhc3RldC5BZGRpdGl2ZS5Nb25vaWQpO1xuXG52YXIgcHJvZHVjdCA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgSW50JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZCk7XG5cbnZhciBJbnRfY29udGFpbnMgPSBpbmNsdWRlJDMuY29udGFpbnM7XG5cbnZhciBJbnRfaW5kZXhPZiA9IGluY2x1ZGUkMy5pbmRleE9mO1xuXG52YXIgSW50X21pbiA9IGluY2x1ZGUkNC5taW47XG5cbnZhciBJbnRfbWF4ID0gaW5jbHVkZSQ0Lm1heDtcblxudmFyIEludCA9IHtcbiAgY29udGFpbnM6IEludF9jb250YWlucyxcbiAgaW5kZXhPZjogSW50X2luZGV4T2YsXG4gIGRpc3RpbmN0OiBkaXN0aW5jdCQxLFxuICByZW1vdmVGaXJzdDogcmVtb3ZlRmlyc3QkMSxcbiAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCQxLFxuICBlcTogZXEkMSxcbiAgbWluOiBJbnRfbWluLFxuICBtYXg6IEludF9tYXgsXG4gIHNvcnQ6IHNvcnQkMSxcbiAgc3VtOiBzdW0sXG4gIHByb2R1Y3Q6IHByb2R1Y3Rcbn07XG5cbnZhciBpbmNsdWRlJDUgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIFJlbHVkZV9GbG9hdC5PcmQpO1xuXG5mdW5jdGlvbiBkaXN0aW5jdCQyKHBhcmFtKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLmRpc3RpbmN0QnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaXJzdCQyKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUZpcnN0QnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoJDIocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaEJ5KFJlbHVkZV9GbG9hdC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gZXEkMihwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmVxQnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgaW5jbHVkZSQ2ID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlT3JkRXh0ZW5zaW9ucywgUmVsdWRlX0Zsb2F0Lk9yZCk7XG5cbmZ1bmN0aW9uIHNvcnQkMihwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5zb3J0QnkoUmVsdWRlX0Zsb2F0Lk9yZC5jb21wYXJlLCBwYXJhbSk7XG59XG5cbnZhciBzdW0kMSA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuTW9ub2lkKTtcblxudmFyIHByb2R1Y3QkMSA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgRmxvYXQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuTW9ub2lkKTtcblxudmFyIEZsb2F0X2NvbnRhaW5zID0gaW5jbHVkZSQ1LmNvbnRhaW5zO1xuXG52YXIgRmxvYXRfaW5kZXhPZiA9IGluY2x1ZGUkNS5pbmRleE9mO1xuXG52YXIgRmxvYXRfbWluID0gaW5jbHVkZSQ2Lm1pbjtcblxudmFyIEZsb2F0X21heCA9IGluY2x1ZGUkNi5tYXg7XG5cbnZhciBGbG9hdCA9IHtcbiAgY29udGFpbnM6IEZsb2F0X2NvbnRhaW5zLFxuICBpbmRleE9mOiBGbG9hdF9pbmRleE9mLFxuICBkaXN0aW5jdDogZGlzdGluY3QkMixcbiAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0JDIsXG4gIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gkMixcbiAgZXE6IGVxJDIsXG4gIG1pbjogRmxvYXRfbWluLFxuICBtYXg6IEZsb2F0X21heCxcbiAgc29ydDogc29ydCQyLFxuICBzdW06IHN1bSQxLFxuICBwcm9kdWN0OiBwcm9kdWN0JDFcbn07XG5cbnZhciBpbmNsdWRlJDcgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuVHJhdmVyc2FibGUoUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQXBwbGljYXRpdmUpO1xuXG52YXIgJCRPcHRpb24gPSBpbmNsdWRlJDc7XG5cbmZ1bmN0aW9uIHRyYXZlcnNlKGYsIGxpc3QpIHtcbiAgdmFyIFJlc3VsdEUgPSBSZWx1ZGVfUmVzdWx0LldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VSZXN1bHQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuVHJhdmVyc2FibGUoUmVzdWx0RS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiBDdXJyeS5fMihUcmF2ZXJzZVJlc3VsdC50cmF2ZXJzZSwgZiwgbGlzdCk7XG59XG5cbmZ1bmN0aW9uIHNlcXVlbmNlKHhzKSB7XG4gIHZhciBSZXN1bHRFID0gUmVsdWRlX1Jlc3VsdC5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlUmVzdWx0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlRyYXZlcnNhYmxlKFJlc3VsdEUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzEoVHJhdmVyc2VSZXN1bHQuc2VxdWVuY2UsIHhzKTtcbn1cblxudmFyIFJlc3VsdCA9IHtcbiAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICBzZXF1ZW5jZTogc2VxdWVuY2Vcbn07XG5cbmZ1bmN0aW9uIHRyYXZlcnNlJDEoZiwgbGlzdCkge1xuICB2YXIgSW9FID0gUmVsdWRlX0lPLldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VJTyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5UcmF2ZXJzYWJsZShJb0UuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzIoVHJhdmVyc2VJTy50cmF2ZXJzZSwgZiwgbGlzdCk7XG59XG5cbmZ1bmN0aW9uIHNlcXVlbmNlJDEoeHMpIHtcbiAgdmFyIElvRSA9IFJlbHVkZV9JTy5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlSU8gPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuVHJhdmVyc2FibGUoSW9FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8xKFRyYXZlcnNlSU8uc2VxdWVuY2UsIHhzKTtcbn1cblxudmFyIElPID0ge1xuICB0cmF2ZXJzZTogdHJhdmVyc2UkMSxcbiAgc2VxdWVuY2U6IHNlcXVlbmNlJDFcbn07XG5cbmZ1bmN0aW9uIFRyYXZlcnNhYmxlKEVycm9ycywgJCRFcnJvcikge1xuICB2YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKEVycm9ycywgJCRFcnJvcik7XG4gIHZhciBpbmNsdWRlID0gTGlzdCRCc0Jhc3RldC5UcmF2ZXJzYWJsZShWYWxpZGF0aW9uRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgVmFsaWRhdGlvbkU6IFZhbGlkYXRpb25FLFxuICAgICAgICAgIFZhbGlkYXRpb25FQXBwbGljYXRpdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXA6IGluY2x1ZGUubWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogaW5jbHVkZS5mb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogaW5jbHVkZS5mb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBpbmNsdWRlLkZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogaW5jbHVkZS5Gb2xkX01hcF9BbnksXG4gICAgICAgICAgRm9sZF9NYXBfUGx1czogaW5jbHVkZS5Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgIHRyYXZlcnNlOiBpbmNsdWRlLnRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBpbmNsdWRlLnNlcXVlbmNlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdCgkJEVycm9yKSB7XG4gIHZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNlbWlncm91cEFueSwgJCRFcnJvcik7XG4gIHZhciBpbmNsdWRlID0gTGlzdCRCc0Jhc3RldC5UcmF2ZXJzYWJsZShWYWxpZGF0aW9uRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgVmFsaWRhdGlvbkU6IFZhbGlkYXRpb25FLFxuICAgICAgICAgIFZhbGlkYXRpb25FQXBwbGljYXRpdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXA6IGluY2x1ZGUubWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogaW5jbHVkZS5mb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogaW5jbHVkZS5mb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBpbmNsdWRlLkZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogaW5jbHVkZS5Gb2xkX01hcF9BbnksXG4gICAgICAgICAgRm9sZF9NYXBfUGx1czogaW5jbHVkZS5Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgIHRyYXZlcnNlOiBpbmNsdWRlLnRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBpbmNsdWRlLnNlcXVlbmNlXG4gICAgICAgIH07XG59XG5cbnZhciBwYXJhbSA9IHsgfTtcblxudmFyIFZhbGlkYXRpb25FID0gUmVsdWRlX1ZhbGlkYXRpb24uV2l0aEVycm9ycyhSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuU2VtaWdyb3VwQW55LCBwYXJhbSk7XG5cbnZhciBpbmNsdWRlJDggPSBMaXN0JEJzQmFzdGV0LlRyYXZlcnNhYmxlKFZhbGlkYXRpb25FLkFwcGxpY2F0aXZlKTtcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19tYXAgPSBpbmNsdWRlJDgubWFwO1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX2ZvbGRfbGVmdCA9IGluY2x1ZGUkOC5mb2xkX2xlZnQ7XG5cbnZhciBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfZm9sZF9yaWdodCA9IGluY2x1ZGUkOC5mb2xkX3JpZ2h0O1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX0ZvbGRfTWFwID0gaW5jbHVkZSQ4LkZvbGRfTWFwO1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX0ZvbGRfTWFwX0FueSA9IGluY2x1ZGUkOC5Gb2xkX01hcF9Bbnk7XG5cbnZhciBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfRm9sZF9NYXBfUGx1cyA9IGluY2x1ZGUkOC5Gb2xkX01hcF9QbHVzO1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX3RyYXZlcnNlID0gaW5jbHVkZSQ4LnRyYXZlcnNlO1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX3NlcXVlbmNlID0gaW5jbHVkZSQ4LnNlcXVlbmNlO1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzID0ge1xuICBWYWxpZGF0aW9uRTogVmFsaWRhdGlvbkUsXG4gIFZhbGlkYXRpb25FQXBwbGljYXRpdmU6IHVuZGVmaW5lZCxcbiAgbWFwOiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfbWFwLFxuICBmb2xkX2xlZnQ6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19mb2xkX2xlZnQsXG4gIGZvbGRfcmlnaHQ6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19mb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX0ZvbGRfTWFwLFxuICBGb2xkX01hcF9Bbnk6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19Gb2xkX01hcF9BbnksXG4gIEZvbGRfTWFwX1BsdXM6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19Gb2xkX01hcF9QbHVzLFxuICB0cmF2ZXJzZTogVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX3RyYXZlcnNlLFxuICBzZXF1ZW5jZTogVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX3NlcXVlbmNlXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc05vbkVtcHR5TGlzdCgkJEVycm9yKSB7XG4gIHZhciBFcnJvcnMgPSBSZWx1ZGVfTm9uRW1wdHkuTGlzdC5TZW1pZ3JvdXBBbnk7XG4gIHZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoRXJyb3JzLCAkJEVycm9yKTtcbiAgdmFyIGluY2x1ZGUgPSBMaXN0JEJzQmFzdGV0LlRyYXZlcnNhYmxlKFZhbGlkYXRpb25FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBWYWxpZGF0aW9uRTogVmFsaWRhdGlvbkUsXG4gICAgICAgICAgVmFsaWRhdGlvbkVBcHBsaWNhdGl2ZTogdW5kZWZpbmVkLFxuICAgICAgICAgIG1hcDogaW5jbHVkZS5tYXAsXG4gICAgICAgICAgZm9sZF9sZWZ0OiBpbmNsdWRlLmZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBpbmNsdWRlLmZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IGluY2x1ZGUuRm9sZF9NYXAsXG4gICAgICAgICAgRm9sZF9NYXBfQW55OiBpbmNsdWRlLkZvbGRfTWFwX0FueSxcbiAgICAgICAgICBGb2xkX01hcF9QbHVzOiBpbmNsdWRlLkZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgdHJhdmVyc2U6IGluY2x1ZGUudHJhdmVyc2UsXG4gICAgICAgICAgc2VxdWVuY2U6IGluY2x1ZGUuc2VxdWVuY2VcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gdHJhdmVyc2UkMihmLCBsaXN0KSB7XG4gIHZhciAkJEVycm9yID0geyB9O1xuICB2YXIgRXJyb3JzID0gUmVsdWRlX05vbkVtcHR5Lkxpc3QuU2VtaWdyb3VwQW55O1xuICB2YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKEVycm9ycywgJCRFcnJvcik7XG4gIHZhciBpbmNsdWRlID0gTGlzdCRCc0Jhc3RldC5UcmF2ZXJzYWJsZShWYWxpZGF0aW9uRS5BcHBsaWNhdGl2ZSk7XG4gIHZhciBUcmF2ZXJzYWJsZV9tYXAgPSBpbmNsdWRlLm1hcDtcbiAgdmFyIFRyYXZlcnNhYmxlX2ZvbGRfbGVmdCA9IGluY2x1ZGUuZm9sZF9sZWZ0O1xuICB2YXIgVHJhdmVyc2FibGVfZm9sZF9yaWdodCA9IGluY2x1ZGUuZm9sZF9yaWdodDtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwID0gaW5jbHVkZS5Gb2xkX01hcDtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSA9IGluY2x1ZGUuRm9sZF9NYXBfQW55O1xuICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXBfUGx1cyA9IGluY2x1ZGUuRm9sZF9NYXBfUGx1cztcbiAgdmFyIFRyYXZlcnNhYmxlX3RyYXZlcnNlID0gaW5jbHVkZS50cmF2ZXJzZTtcbiAgdmFyIFRyYXZlcnNhYmxlX3NlcXVlbmNlID0gaW5jbHVkZS5zZXF1ZW5jZTtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFRyYXZlcnNhYmxlX3RyYXZlcnNlLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC50b1ZhbGlkYXRpb25OZWwoQ3VycnkuXzEoZiwgYSkpO1xuICAgICAgICAgICAgICB9KSwgbGlzdCk7XG59XG5cbnZhciBWYWxpZGF0aW9uID0ge1xuICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGUsXG4gIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdDogVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0LFxuICBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3M6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5ncyxcbiAgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNOb25FbXB0eUxpc3Q6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTm9uRW1wdHlMaXN0LFxuICB0cmF2ZXJzZTogdHJhdmVyc2UkMlxufTtcblxuZXhwb3J0IHtcbiAgTGlzdEVxRXh0ZW5zaW9ucyAsXG4gIExpc3RPcmRFeHRlbnNpb25zICxcbiAgTGlzdE1vbm9pZEV4dGVuc2lvbnMgLFxuICAkJFN0cmluZyAsXG4gIEludCAsXG4gIEZsb2F0ICxcbiAgJCRPcHRpb24gLFxuICBSZXN1bHQgLFxuICBJTyAsXG4gIFZhbGlkYXRpb24gLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9CYXNlIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQWx0IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMgZnJvbSBcIi4vbGlzdC9SZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMgZnJvbSBcIi4vbGlzdC9SZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuYnMuanNcIjtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JJbmZpeChSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRnVuY3Rvcik7XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQuQWx0SW5maXgoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFsdCk7XG5cbnZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUluZml4KFJlbHVkZV9MaXN0X0luc3RhbmNlcy5BcHBseSk7XG5cbnZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEluZml4KFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Nb25hZCk7XG5cbnZhciBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUuRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGhhc2gkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJGhhc2gkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIgPSBpbmNsdWRlLiRsZXNzJDtcblxudmFyIEluZml4XyQkZ3JlYXQgPSBpbmNsdWRlLiQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRhdCRncmVhdCA9IGluY2x1ZGUuJGxlc3MkYXQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF9BcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDIuQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkMi4kbGVzcyRzdGFyJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciA9IGluY2x1ZGUkMi4kbGVzcyRzdGFyO1xuXG52YXIgSW5maXhfJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDIuJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeF9Nb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDMuTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGdyZWF0JGdyZWF0JGVxID0gaW5jbHVkZSQzLiRncmVhdCRncmVhdCRlcTtcblxudmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlJDMuJGVxJGxlc3MkbGVzcztcblxudmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUkMy4kZ3JlYXQkZXEkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRlcSRsZXNzID0gaW5jbHVkZSQzLiRsZXNzJGVxJGxlc3M7XG5cbnZhciBJbmZpeCA9IHtcbiAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAkbGVzcyQkZ3JlYXQ6IEluZml4XyRsZXNzJGRvbGxhciRncmVhdCxcbiAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICQkZ3JlYXQ6IEluZml4XyQkZ3JlYXQsXG4gICRsZXNzJGF0JGdyZWF0OiBJbmZpeF8kbGVzcyRhdCRncmVhdCxcbiAgJGxlc3MkcGlwZSRncmVhdDogSW5maXhfJGxlc3MkcGlwZSRncmVhdCxcbiAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICRsZXNzJHN0YXI6IEluZml4XyRsZXNzJHN0YXIsXG4gICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgTW9uYWRFeHRlbnNpb25zOiBJbmZpeF9Nb25hZEV4dGVuc2lvbnMsXG4gICRncmVhdCRncmVhdCRlcTogSW5maXhfJGdyZWF0JGdyZWF0JGVxLFxuICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgJGxlc3MkZXEkbGVzczogSW5maXhfJGxlc3MkZXEkbGVzc1xufTtcblxudmFyIGNvbmNhdCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5jb25jYXQ7XG5cbnZhciBTZW1pZ3JvdXBBbnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuU2VtaWdyb3VwQW55O1xuXG52YXIgY29uY2F0TmFtZWQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29uY2F0TmFtZWQ7XG5cbnZhciBlbXB0eSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lbXB0eTtcblxudmFyIE1vbm9pZEFueSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Nb25vaWRBbnk7XG5cbnZhciBndWFyZCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5ndWFyZDtcblxudmFyIHBvd2VyID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnBvd2VyO1xuXG52YXIgbWFwID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcDtcblxudmFyIEZ1bmN0b3IgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRnVuY3RvcjtcblxudmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQnNGdW5jdG9yRXh0ZW5zaW9ucztcblxudmFyIGZsaXBNYXAgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZmxpcE1hcDtcblxudmFyICQkdm9pZCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy4kJHZvaWQ7XG5cbnZhciB2b2lkUmlnaHQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudm9pZFJpZ2h0O1xuXG52YXIgdm9pZExlZnQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudm9pZExlZnQ7XG5cbnZhciBmbGFwID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZsYXA7XG5cbnZhciBhcHBseSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5hcHBseTtcblxudmFyIEFwcGx5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFwcGx5O1xuXG52YXIgQnNBcHBseUV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQnNBcHBseUV4dGVuc2lvbnM7XG5cbnZhciBhcHBseUZpcnN0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmFwcGx5Rmlyc3Q7XG5cbnZhciBhcHBseVNlY29uZCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5hcHBseVNlY29uZDtcblxudmFyIG1hcDIgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwMjtcblxudmFyIG1hcDMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwMztcblxudmFyIG1hcDQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwNDtcblxudmFyIG1hcDUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwNTtcblxudmFyIHR1cGxlMiA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy50dXBsZTI7XG5cbnZhciB0dXBsZTMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudHVwbGUzO1xuXG52YXIgdHVwbGU0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnR1cGxlNDtcblxudmFyIHR1cGxlNSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy50dXBsZTU7XG5cbnZhciBtYXBUdXBsZTIgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwVHVwbGUyO1xuXG52YXIgbWFwVHVwbGUzID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcFR1cGxlMztcblxudmFyIG1hcFR1cGxlNCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5tYXBUdXBsZTQ7XG5cbnZhciBtYXBUdXBsZTUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwVHVwbGU1O1xuXG52YXIgcHVyZSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5wdXJlO1xuXG52YXIgQXBwbGljYXRpdmUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQXBwbGljYXRpdmU7XG5cbnZhciBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIGxpZnRBMSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5saWZ0QTE7XG5cbnZhciBiaW5kID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmJpbmQ7XG5cbnZhciBNb25hZCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Nb25hZDtcblxudmFyIEJzTW9uYWRFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgZmxhdE1hcCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mbGF0TWFwO1xuXG52YXIgZmxhdHRlbiA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mbGF0dGVuO1xuXG52YXIgY29tcG9zZUtsZWlzbGkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBmbGlwQ29tcG9zZUtsZWlzbGkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZmxpcENvbXBvc2VLbGVpc2xpO1xuXG52YXIgbGlmdE0xID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmxpZnRNMTtcblxudmFyIHdoZW5fID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLndoZW5fO1xuXG52YXIgdW5sZXNzID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnVubGVzcztcblxudmFyIGFsdCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5hbHQ7XG5cbnZhciBBbHQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQWx0O1xuXG52YXIgb3JFbHNlID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm9yRWxzZTtcblxudmFyIFBsdXMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuUGx1cztcblxudmFyIEFsdGVybmF0aXZlID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFsdGVybmF0aXZlO1xuXG52YXIgZm9sZExlZnQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQ7XG5cbnZhciBmb2xkUmlnaHQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFJpZ2h0O1xuXG52YXIgRm9sZGFibGUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGU7XG5cbnZhciBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucztcblxudmFyIGFueSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5hbnk7XG5cbnZhciBhbGwgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYWxsO1xuXG52YXIgY29udGFpbnNCeSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5jb250YWluc0J5O1xuXG52YXIgY29udGFpbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuaW5kZXhPZkJ5O1xuXG52YXIgaW5kZXhPZiA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5pbmRleE9mO1xuXG52YXIgbWluQnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWluQnk7XG5cbnZhciBtaW4gPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWluO1xuXG52YXIgbWF4QnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWF4Qnk7XG5cbnZhciBtYXggPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWF4O1xuXG52YXIgY291bnRCeSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5jb3VudEJ5O1xuXG52YXIgbGVuZ3RoID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmxlbmd0aDtcblxudmFyIHNpemUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuc2l6ZTtcblxudmFyIGNvdW50ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvdW50O1xuXG52YXIgZm9yRWFjaCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5maW5kO1xuXG52YXIgZmluZFdpdGhJbmRleCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9MaXN0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnRvTGlzdDtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5pbnRlcmNhbGF0ZTtcblxudmFyIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnM7XG5cbnZhciB1bmZvbGQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudW5mb2xkO1xuXG52YXIgVW5mb2xkYWJsZSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5VbmZvbGRhYmxlO1xuXG52YXIgVHJhdmVyc2FibGUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuVHJhdmVyc2FibGU7XG5cbnZhciBlcUJ5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmVxQnk7XG5cbnZhciBlcSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcTtcblxudmFyIEVxID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkVxO1xuXG52YXIgc2hvd0J5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnNob3dCeTtcblxudmFyIHNob3cgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuc2hvdztcblxudmFyIFNob3cgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuU2hvdztcblxudmFyIGZyb21BcnJheSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mcm9tQXJyYXk7XG5cbnZhciB0b0FycmF5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnRvQXJyYXk7XG5cbnZhciBJc29BcnJheSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Jc29BcnJheTtcblxudmFyIGNvbnMgPSBSZWx1ZGVfTGlzdF9CYXNlLmNvbnM7XG5cbnZhciBwcmVwZW5kID0gUmVsdWRlX0xpc3RfQmFzZS5wcmVwZW5kO1xuXG52YXIgdW5jb25zID0gUmVsdWRlX0xpc3RfQmFzZS51bmNvbnM7XG5cbnZhciBhcHBlbmQgPSBSZWx1ZGVfTGlzdF9CYXNlLmFwcGVuZDtcblxudmFyIHJlcGVhdCA9IFJlbHVkZV9MaXN0X0Jhc2UucmVwZWF0O1xuXG52YXIgbWFrZVdpdGhJbmRleCA9IFJlbHVkZV9MaXN0X0Jhc2UubWFrZVdpdGhJbmRleDtcblxudmFyIG1hcFdpdGhJbmRleCA9IFJlbHVkZV9MaXN0X0Jhc2UubWFwV2l0aEluZGV4O1xuXG52YXIgcmV2ZXJzZSA9IFJlbHVkZV9MaXN0X0Jhc2UucmV2ZXJzZTtcblxudmFyIHNodWZmbGUgPSBSZWx1ZGVfTGlzdF9CYXNlLnNodWZmbGU7XG5cbnZhciBpc0VtcHR5ID0gUmVsdWRlX0xpc3RfQmFzZS5pc0VtcHR5O1xuXG52YXIgaXNOb3RFbXB0eSA9IFJlbHVkZV9MaXN0X0Jhc2UuaXNOb3RFbXB0eTtcblxudmFyIGF0ID0gUmVsdWRlX0xpc3RfQmFzZS5hdDtcblxudmFyIGhlYWQgPSBSZWx1ZGVfTGlzdF9CYXNlLmhlYWQ7XG5cbnZhciB0YWlsID0gUmVsdWRlX0xpc3RfQmFzZS50YWlsO1xuXG52YXIgdGFpbE9yRW1wdHkgPSBSZWx1ZGVfTGlzdF9CYXNlLnRhaWxPckVtcHR5O1xuXG52YXIgaW5pdCA9IFJlbHVkZV9MaXN0X0Jhc2UuaW5pdDtcblxudmFyIGluaXRPckVtcHR5ID0gUmVsdWRlX0xpc3RfQmFzZS5pbml0T3JFbXB0eTtcblxudmFyIGxhc3QgPSBSZWx1ZGVfTGlzdF9CYXNlLmxhc3Q7XG5cbnZhciB0YWtlID0gUmVsdWRlX0xpc3RfQmFzZS50YWtlO1xuXG52YXIgdGFrZUV4YWN0bHkgPSBSZWx1ZGVfTGlzdF9CYXNlLnRha2VFeGFjdGx5O1xuXG52YXIgdGFrZVdoaWxlID0gUmVsdWRlX0xpc3RfQmFzZS50YWtlV2hpbGU7XG5cbnZhciBkcm9wID0gUmVsdWRlX0xpc3RfQmFzZS5kcm9wO1xuXG52YXIgZHJvcEV4YWN0bHkgPSBSZWx1ZGVfTGlzdF9CYXNlLmRyb3BFeGFjdGx5O1xuXG52YXIgZHJvcFdoaWxlID0gUmVsdWRlX0xpc3RfQmFzZS5kcm9wV2hpbGU7XG5cbnZhciBmaWx0ZXIgPSBSZWx1ZGVfTGlzdF9CYXNlLmZpbHRlcjtcblxudmFyIGtlZXAgPSBSZWx1ZGVfTGlzdF9CYXNlLmtlZXA7XG5cbnZhciBmaWx0ZXJXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9CYXNlLmZpbHRlcldpdGhJbmRleDtcblxudmFyIGtlZXBXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9CYXNlLmtlZXBXaXRoSW5kZXg7XG5cbnZhciBmaWx0ZXJOb3QgPSBSZWx1ZGVfTGlzdF9CYXNlLmZpbHRlck5vdDtcblxudmFyIHJlamVjdCA9IFJlbHVkZV9MaXN0X0Jhc2UucmVqZWN0O1xuXG52YXIgZmlsdGVyTm90V2l0aEluZGV4ID0gUmVsdWRlX0xpc3RfQmFzZS5maWx0ZXJOb3RXaXRoSW5kZXg7XG5cbnZhciByZWplY3RXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9CYXNlLnJlamVjdFdpdGhJbmRleDtcblxudmFyIG1hcE9wdGlvbiA9IFJlbHVkZV9MaXN0X0Jhc2UubWFwT3B0aW9uO1xuXG52YXIgY2F0T3B0aW9ucyA9IFJlbHVkZV9MaXN0X0Jhc2UuY2F0T3B0aW9ucztcblxudmFyIHBhcnRpdGlvbiA9IFJlbHVkZV9MaXN0X0Jhc2UucGFydGl0aW9uO1xuXG52YXIgc3BsaXRBdCA9IFJlbHVkZV9MaXN0X0Jhc2Uuc3BsaXRBdDtcblxudmFyIHByZXBlbmRUb0FsbCA9IFJlbHVkZV9MaXN0X0Jhc2UucHJlcGVuZFRvQWxsO1xuXG52YXIgaW50ZXJzcGVyc2UgPSBSZWx1ZGVfTGlzdF9CYXNlLmludGVyc3BlcnNlO1xuXG52YXIgcmVwbGljYXRlID0gUmVsdWRlX0xpc3RfQmFzZS5yZXBsaWNhdGU7XG5cbnZhciB6aXAgPSBSZWx1ZGVfTGlzdF9CYXNlLnppcDtcblxudmFyIHppcFdpdGggPSBSZWx1ZGVfTGlzdF9CYXNlLnppcFdpdGg7XG5cbnZhciB6aXBXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9CYXNlLnppcFdpdGhJbmRleDtcblxudmFyIHVuemlwID0gUmVsdWRlX0xpc3RfQmFzZS51bnppcDtcblxudmFyIHNvcnRXaXRoSW50ID0gUmVsdWRlX0xpc3RfQmFzZS5zb3J0V2l0aEludDtcblxudmFyIHNvcnRCeSA9IFJlbHVkZV9MaXN0X0Jhc2Uuc29ydEJ5O1xuXG52YXIgc29ydCA9IFJlbHVkZV9MaXN0X0Jhc2Uuc29ydDtcblxudmFyIGRpc3RpbmN0QnkgPSBSZWx1ZGVfTGlzdF9CYXNlLmRpc3RpbmN0Qnk7XG5cbnZhciByZW1vdmVGaXJzdEJ5ID0gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVGaXJzdEJ5O1xuXG52YXIgcmVtb3ZlRWFjaEJ5ID0gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVFYWNoQnk7XG5cbnZhciBkaXN0aW5jdCA9IFJlbHVkZV9MaXN0X0Jhc2UuZGlzdGluY3Q7XG5cbnZhciByZW1vdmVGaXJzdCA9IFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRmlyc3Q7XG5cbnZhciByZW1vdmVFYWNoID0gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVFYWNoO1xuXG52YXIgcmVwbGFjZUF0ID0gUmVsdWRlX0xpc3RfQmFzZS5yZXBsYWNlQXQ7XG5cbnZhciBzY2FuTGVmdCA9IFJlbHVkZV9MaXN0X0Jhc2Uuc2NhbkxlZnQ7XG5cbnZhciBzY2FuUmlnaHQgPSBSZWx1ZGVfTGlzdF9CYXNlLnNjYW5SaWdodDtcblxudmFyIGluc2VydEF0ID0gUmVsdWRlX0xpc3RfQmFzZS5pbnNlcnRBdDtcblxudmFyIHVwZGF0ZUF0ID0gUmVsdWRlX0xpc3RfQmFzZS51cGRhdGVBdDtcblxudmFyIHN3YXBBdCA9IFJlbHVkZV9MaXN0X0Jhc2Uuc3dhcEF0O1xuXG52YXIgcmVtb3ZlQXQgPSBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUF0O1xuXG52YXIgY2h1bmsgPSBSZWx1ZGVfTGlzdF9CYXNlLmNodW5rO1xuXG52YXIgTGlzdEVxRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X1NwZWNpYWxpemF0aW9ucy5MaXN0RXFFeHRlbnNpb25zO1xuXG52YXIgTGlzdE9yZEV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuTGlzdE9yZEV4dGVuc2lvbnM7XG5cbnZhciBMaXN0TW9ub2lkRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X1NwZWNpYWxpemF0aW9ucy5MaXN0TW9ub2lkRXh0ZW5zaW9ucztcblxudmFyICQkU3RyaW5nID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLiQkU3RyaW5nO1xuXG52YXIgSW50ID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLkludDtcblxudmFyIEZsb2F0ID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLkZsb2F0O1xuXG52YXIgJCRPcHRpb24gPSBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuJCRPcHRpb247XG5cbnZhciBSZXN1bHQgPSBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuUmVzdWx0O1xuXG52YXIgSU8gPSBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuSU87XG5cbnZhciBWYWxpZGF0aW9uID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLlZhbGlkYXRpb247XG5cbmV4cG9ydCB7XG4gIGNvbmNhdCAsXG4gIFNlbWlncm91cEFueSAsXG4gIGNvbmNhdE5hbWVkICxcbiAgZW1wdHkgLFxuICBNb25vaWRBbnkgLFxuICBndWFyZCAsXG4gIHBvd2VyICxcbiAgbWFwICxcbiAgRnVuY3RvciAsXG4gIEJzRnVuY3RvckV4dGVuc2lvbnMgLFxuICBmbGlwTWFwICxcbiAgJCR2b2lkICxcbiAgdm9pZFJpZ2h0ICxcbiAgdm9pZExlZnQgLFxuICBmbGFwICxcbiAgYXBwbHkgLFxuICBBcHBseSAsXG4gIEJzQXBwbHlFeHRlbnNpb25zICxcbiAgYXBwbHlGaXJzdCAsXG4gIGFwcGx5U2Vjb25kICxcbiAgbWFwMiAsXG4gIG1hcDMgLFxuICBtYXA0ICxcbiAgbWFwNSAsXG4gIHR1cGxlMiAsXG4gIHR1cGxlMyAsXG4gIHR1cGxlNCAsXG4gIHR1cGxlNSAsXG4gIG1hcFR1cGxlMiAsXG4gIG1hcFR1cGxlMyAsXG4gIG1hcFR1cGxlNCAsXG4gIG1hcFR1cGxlNSAsXG4gIHB1cmUgLFxuICBBcHBsaWNhdGl2ZSAsXG4gIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgbGlmdEExICxcbiAgYmluZCAsXG4gIE1vbmFkICxcbiAgQnNNb25hZEV4dGVuc2lvbnMgLFxuICBmbGF0TWFwICxcbiAgZmxhdHRlbiAsXG4gIGNvbXBvc2VLbGVpc2xpICxcbiAgZmxpcENvbXBvc2VLbGVpc2xpICxcbiAgbGlmdE0xICxcbiAgd2hlbl8gLFxuICB1bmxlc3MgLFxuICBhbHQgLFxuICBBbHQgLFxuICBvckVsc2UgLFxuICBQbHVzICxcbiAgQWx0ZXJuYXRpdmUgLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBsZW5ndGggLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9MaXN0ICxcbiAgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zICxcbiAgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zICxcbiAgZm9sZE1hcCAsXG4gIGZvbGRXaXRoTW9ub2lkICxcbiAgaW50ZXJjYWxhdGUgLFxuICBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zICxcbiAgRm9sZGFibGVFcUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgLFxuICB1bmZvbGQgLFxuICBVbmZvbGRhYmxlICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgZnJvbUFycmF5ICxcbiAgdG9BcnJheSAsXG4gIElzb0FycmF5ICxcbiAgY29ucyAsXG4gIHByZXBlbmQgLFxuICB1bmNvbnMgLFxuICBhcHBlbmQgLFxuICByZXBlYXQgLFxuICBtYWtlV2l0aEluZGV4ICxcbiAgbWFwV2l0aEluZGV4ICxcbiAgcmV2ZXJzZSAsXG4gIHNodWZmbGUgLFxuICBpc0VtcHR5ICxcbiAgaXNOb3RFbXB0eSAsXG4gIGF0ICxcbiAgaGVhZCAsXG4gIHRhaWwgLFxuICB0YWlsT3JFbXB0eSAsXG4gIGluaXQgLFxuICBpbml0T3JFbXB0eSAsXG4gIGxhc3QgLFxuICB0YWtlICxcbiAgdGFrZUV4YWN0bHkgLFxuICB0YWtlV2hpbGUgLFxuICBkcm9wICxcbiAgZHJvcEV4YWN0bHkgLFxuICBkcm9wV2hpbGUgLFxuICBmaWx0ZXIgLFxuICBrZWVwICxcbiAgZmlsdGVyV2l0aEluZGV4ICxcbiAga2VlcFdpdGhJbmRleCAsXG4gIGZpbHRlck5vdCAsXG4gIHJlamVjdCAsXG4gIGZpbHRlck5vdFdpdGhJbmRleCAsXG4gIHJlamVjdFdpdGhJbmRleCAsXG4gIG1hcE9wdGlvbiAsXG4gIGNhdE9wdGlvbnMgLFxuICBwYXJ0aXRpb24gLFxuICBzcGxpdEF0ICxcbiAgcHJlcGVuZFRvQWxsICxcbiAgaW50ZXJzcGVyc2UgLFxuICByZXBsaWNhdGUgLFxuICB6aXAgLFxuICB6aXBXaXRoICxcbiAgemlwV2l0aEluZGV4ICxcbiAgdW56aXAgLFxuICBzb3J0V2l0aEludCAsXG4gIHNvcnRCeSAsXG4gIHNvcnQgLFxuICBkaXN0aW5jdEJ5ICxcbiAgcmVtb3ZlRmlyc3RCeSAsXG4gIHJlbW92ZUVhY2hCeSAsXG4gIGRpc3RpbmN0ICxcbiAgcmVtb3ZlRmlyc3QgLFxuICByZW1vdmVFYWNoICxcbiAgcmVwbGFjZUF0ICxcbiAgc2NhbkxlZnQgLFxuICBzY2FuUmlnaHQgLFxuICBpbnNlcnRBdCAsXG4gIHVwZGF0ZUF0ICxcbiAgc3dhcEF0ICxcbiAgcmVtb3ZlQXQgLFxuICBjaHVuayAsXG4gIExpc3RFcUV4dGVuc2lvbnMgLFxuICBMaXN0T3JkRXh0ZW5zaW9ucyAsXG4gIExpc3RNb25vaWRFeHRlbnNpb25zICxcbiAgJCRTdHJpbmcgLFxuICBJbnQgLFxuICBGbG9hdCAsXG4gICQkT3B0aW9uICxcbiAgUmVzdWx0ICxcbiAgSU8gLFxuICBWYWxpZGF0aW9uICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCIuLi9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JbnQgZnJvbSBcIi4uL1JlbHVkZV9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIEludCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRmxvYXQgZnJvbSBcIi4uL1JlbHVkZV9GbG9hdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1Jlc3VsdCBmcm9tIFwiLi4vUmVsdWRlX1Jlc3VsdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1N0cmluZyBmcm9tIFwiLi4vUmVsdWRlX1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQXJyYXkkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0FycmF5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGbG9hdCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRmxvYXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9Ob25FbXB0eSBmcm9tIFwiLi4vUmVsdWRlX05vbkVtcHR5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfQmFzZSBmcm9tIFwiLi9SZWx1ZGVfQXJyYXlfQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1ZhbGlkYXRpb24gZnJvbSBcIi4uL1JlbHVkZV9WYWxpZGF0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzIGZyb20gXCIuL1JlbHVkZV9BcnJheV9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuLi9vcHRpb24vUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYnMuanNcIjtcblxuZnVuY3Rpb24gQXJyYXlFcUV4dGVuc2lvbnMoRSkge1xuICB2YXIgaW5jbHVkZSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIEUpO1xuICB2YXIgZGlzdGluY3QgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UuZGlzdGluY3RCeShFLmVxLCBwYXJhbSk7XG4gIH07XG4gIHZhciByZW1vdmVGaXJzdCA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVGaXJzdEJ5KEUuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIHJlbW92ZUVhY2ggPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRWFjaEJ5KEUuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZXFCeShFLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29udGFpbnM6IGluY2x1ZGUuY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZjogaW5jbHVkZS5pbmRleE9mLFxuICAgICAgICAgIGRpc3RpbmN0OiBkaXN0aW5jdCxcbiAgICAgICAgICByZW1vdmVGaXJzdDogcmVtb3ZlRmlyc3QsXG4gICAgICAgICAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCxcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXJyYXlPcmRFeHRlbnNpb25zKE8pIHtcbiAgdmFyIGluY2x1ZGUgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBPKTtcbiAgdmFyIGRpc3RpbmN0ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLmRpc3RpbmN0QnkoTy5lcSwgcGFyYW0pO1xuICB9O1xuICB2YXIgcmVtb3ZlRmlyc3QgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRmlyc3RCeShPLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUVhY2hCeShPLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxQnkoTy5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgaW5jbHVkZSQxID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIE8pO1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5zb3J0QnkoTy5jb21wYXJlLCBwYXJhbSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29udGFpbnM6IGluY2x1ZGUuY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZjogaW5jbHVkZS5pbmRleE9mLFxuICAgICAgICAgIGRpc3RpbmN0OiBkaXN0aW5jdCxcbiAgICAgICAgICByZW1vdmVGaXJzdDogcmVtb3ZlRmlyc3QsXG4gICAgICAgICAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCxcbiAgICAgICAgICBlcTogZXEsXG4gICAgICAgICAgbWluOiBpbmNsdWRlJDEubWluLFxuICAgICAgICAgIG1heDogaW5jbHVkZSQxLm1heCxcbiAgICAgICAgICBzb3J0OiBzb3J0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFycmF5TW9ub2lkRXh0ZW5zaW9ucyhNKSB7XG4gIHJldHVybiBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucywgTSk7XG59XG5cbnZhciBpbmNsdWRlID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucywgUmVsdWRlX1N0cmluZy5PcmQpO1xuXG5mdW5jdGlvbiByZW1vdmVGaXJzdChwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRmlyc3RCeShSZWx1ZGVfU3RyaW5nLk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVFYWNoQnkoUmVsdWRlX1N0cmluZy5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gZXEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfU3RyaW5nLk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgaW5jbHVkZSQxID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIFJlbHVkZV9TdHJpbmcuT3JkKTtcblxuZnVuY3Rpb24gc29ydChwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2Uuc29ydEJ5KFJlbHVkZV9TdHJpbmcuT3JkLmNvbXBhcmUsIHBhcmFtKTtcbn1cblxudmFyIGluY2x1ZGUkMiA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLCBSZWx1ZGVfU3RyaW5nLk1vbm9pZCk7XG5cbnZhciBmb2xkV2l0aE1vbm9pZCA9IGluY2x1ZGUkMi5mb2xkV2l0aE1vbm9pZDtcblxudmFyIGludGVyY2FsYXRlID0gaW5jbHVkZSQyLmludGVyY2FsYXRlO1xuXG5mdW5jdGlvbiBkaXN0aW5jdCh4cykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoQ3VycnkuXzMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkTGVmdCwgKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjW2N1cnJdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICAgIH0pLCB7IH0sIHhzKSk7XG59XG5cbnZhciBTdHJpbmdfY29udGFpbnMgPSBpbmNsdWRlLmNvbnRhaW5zO1xuXG52YXIgU3RyaW5nX2luZGV4T2YgPSBpbmNsdWRlLmluZGV4T2Y7XG5cbnZhciBTdHJpbmdfbWluID0gaW5jbHVkZSQxLm1pbjtcblxudmFyIFN0cmluZ19tYXggPSBpbmNsdWRlJDEubWF4O1xuXG52YXIgU3RyaW5nX0JzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gaW5jbHVkZSQyLkJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgU3RyaW5nX2ZvbGRNYXAgPSBpbmNsdWRlJDIuZm9sZE1hcDtcblxudmFyICQkU3RyaW5nID0ge1xuICBjb250YWluczogU3RyaW5nX2NvbnRhaW5zLFxuICBpbmRleE9mOiBTdHJpbmdfaW5kZXhPZixcbiAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0LFxuICByZW1vdmVFYWNoOiByZW1vdmVFYWNoLFxuICBlcTogZXEsXG4gIG1pbjogU3RyaW5nX21pbixcbiAgbWF4OiBTdHJpbmdfbWF4LFxuICBzb3J0OiBzb3J0LFxuICBCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogU3RyaW5nX0JzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICBmb2xkTWFwOiBTdHJpbmdfZm9sZE1hcCxcbiAgZm9sZFdpdGhNb25vaWQ6IGZvbGRXaXRoTW9ub2lkLFxuICBpbnRlcmNhbGF0ZTogaW50ZXJjYWxhdGUsXG4gIGpvaW46IGZvbGRXaXRoTW9ub2lkLFxuICBqb2luV2l0aDogaW50ZXJjYWxhdGUsXG4gIGRpc3RpbmN0OiBkaXN0aW5jdFxufTtcblxudmFyIGluY2x1ZGUkMyA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIFJlbHVkZV9JbnQuT3JkKTtcblxuZnVuY3Rpb24gZGlzdGluY3QkMShwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UuZGlzdGluY3RCeShSZWx1ZGVfSW50Lk9yZC5lcSwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaXJzdCQxKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVGaXJzdEJ5KFJlbHVkZV9JbnQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVhY2gkMShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRWFjaEJ5KFJlbHVkZV9JbnQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIGVxJDEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfSW50Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgaW5jbHVkZSQ0ID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIFJlbHVkZV9JbnQuT3JkKTtcblxuZnVuY3Rpb24gc29ydCQxKHBhcmFtKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5zb3J0QnkoUmVsdWRlX0ludC5PcmQuY29tcGFyZSwgcGFyYW0pO1xufVxuXG52YXIgc3VtID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgSW50JEJzQmFzdGV0LkFkZGl0aXZlLk1vbm9pZCk7XG5cbnZhciBwcm9kdWN0ID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgSW50JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZCk7XG5cbnZhciBJbnRfY29udGFpbnMgPSBpbmNsdWRlJDMuY29udGFpbnM7XG5cbnZhciBJbnRfaW5kZXhPZiA9IGluY2x1ZGUkMy5pbmRleE9mO1xuXG52YXIgSW50X21pbiA9IGluY2x1ZGUkNC5taW47XG5cbnZhciBJbnRfbWF4ID0gaW5jbHVkZSQ0Lm1heDtcblxudmFyIEludCA9IHtcbiAgY29udGFpbnM6IEludF9jb250YWlucyxcbiAgaW5kZXhPZjogSW50X2luZGV4T2YsXG4gIGRpc3RpbmN0OiBkaXN0aW5jdCQxLFxuICByZW1vdmVGaXJzdDogcmVtb3ZlRmlyc3QkMSxcbiAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCQxLFxuICBlcTogZXEkMSxcbiAgbWluOiBJbnRfbWluLFxuICBtYXg6IEludF9tYXgsXG4gIHNvcnQ6IHNvcnQkMSxcbiAgc3VtOiBzdW0sXG4gIHByb2R1Y3Q6IHByb2R1Y3Rcbn07XG5cbnZhciBpbmNsdWRlJDUgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBSZWx1ZGVfRmxvYXQuT3JkKTtcblxuZnVuY3Rpb24gZGlzdGluY3QkMihwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UuZGlzdGluY3RCeShSZWx1ZGVfRmxvYXQuT3JkLmVxLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0JDIocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUZpcnN0QnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoJDIocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUVhY2hCeShSZWx1ZGVfRmxvYXQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIGVxJDIocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfRmxvYXQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbnZhciBpbmNsdWRlJDYgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlT3JkRXh0ZW5zaW9ucywgUmVsdWRlX0Zsb2F0Lk9yZCk7XG5cbmZ1bmN0aW9uIHNvcnQkMihwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2Uuc29ydEJ5KFJlbHVkZV9GbG9hdC5PcmQuY29tcGFyZSwgcGFyYW0pO1xufVxuXG52YXIgc3VtJDEgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRXaXRoTW9ub2lkLCBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5Nb25vaWQpO1xuXG52YXIgcHJvZHVjdCQxID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgRmxvYXQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuTW9ub2lkKTtcblxudmFyIEZsb2F0X2NvbnRhaW5zID0gaW5jbHVkZSQ1LmNvbnRhaW5zO1xuXG52YXIgRmxvYXRfaW5kZXhPZiA9IGluY2x1ZGUkNS5pbmRleE9mO1xuXG52YXIgRmxvYXRfbWluID0gaW5jbHVkZSQ2Lm1pbjtcblxudmFyIEZsb2F0X21heCA9IGluY2x1ZGUkNi5tYXg7XG5cbnZhciBGbG9hdCA9IHtcbiAgY29udGFpbnM6IEZsb2F0X2NvbnRhaW5zLFxuICBpbmRleE9mOiBGbG9hdF9pbmRleE9mLFxuICBkaXN0aW5jdDogZGlzdGluY3QkMixcbiAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0JDIsXG4gIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gkMixcbiAgZXE6IGVxJDIsXG4gIG1pbjogRmxvYXRfbWluLFxuICBtYXg6IEZsb2F0X21heCxcbiAgc29ydDogc29ydCQyLFxuICBzdW06IHN1bSQxLFxuICBwcm9kdWN0OiBwcm9kdWN0JDFcbn07XG5cbnZhciBpbmNsdWRlJDcgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQXBwbGljYXRpdmUpO1xuXG52YXIgJCRPcHRpb24gPSBpbmNsdWRlJDc7XG5cbmZ1bmN0aW9uIHRyYXZlcnNlKGYsIHhzKSB7XG4gIHZhciBSZXN1bHRFID0gUmVsdWRlX1Jlc3VsdC5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlUmVzdWx0ID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFJlc3VsdEUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzIoVHJhdmVyc2VSZXN1bHQudHJhdmVyc2UsIGYsIHhzKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVuY2UoeHMpIHtcbiAgdmFyIFJlc3VsdEUgPSBSZWx1ZGVfUmVzdWx0LldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VSZXN1bHQgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgUmVzdWx0RS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiBDdXJyeS5fMShUcmF2ZXJzZVJlc3VsdC5zZXF1ZW5jZSwgeHMpO1xufVxuXG52YXIgUmVzdWx0ID0ge1xuICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gIHNlcXVlbmNlOiBzZXF1ZW5jZVxufTtcblxuZnVuY3Rpb24gdHJhdmVyc2UkMShmLCB4cykge1xuICB2YXIgSW9FID0gUmVsdWRlX0lPLldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VJTyA9IEN1cnJ5Ll8xKEFycmF5JEJzQmFzdGV0LlRyYXZlcnNhYmxlLCBJb0UuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzIoVHJhdmVyc2VJTy50cmF2ZXJzZSwgZiwgeHMpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW5jZSQxKHhzKSB7XG4gIHZhciBJb0UgPSBSZWx1ZGVfSU8uV2l0aEVycm9yKHsgfSk7XG4gIHZhciBUcmF2ZXJzZUlPID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIElvRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiBDdXJyeS5fMShUcmF2ZXJzZUlPLnNlcXVlbmNlLCB4cyk7XG59XG5cbnZhciBJTyA9IHtcbiAgdHJhdmVyc2U6IHRyYXZlcnNlJDEsXG4gIHNlcXVlbmNlOiBzZXF1ZW5jZSQxXG59O1xuXG5mdW5jdGlvbiBXaXRoRXJyb3JzKEVycm9ycywgJCRFcnJvcikge1xuICB2YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKEVycm9ycywgJCRFcnJvcik7XG4gIHZhciBUcmF2ZXJzYWJsZSA9IEN1cnJ5Ll8xKEFycmF5JEJzQmFzdGV0LlRyYXZlcnNhYmxlLCBWYWxpZGF0aW9uRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgVmFsaWRhdGlvbkU6IFZhbGlkYXRpb25FLFxuICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBXaXRoRXJyb3JzQXNBcnJheSgkJEVycm9yKSB7XG4gIHZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5TZW1pZ3JvdXBBbnksICQkRXJyb3IpO1xuICB2YXIgVHJhdmVyc2FibGUgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFZhbGlkYXRpb25FOiBWYWxpZGF0aW9uRSxcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGVcbiAgICAgICAgfTtcbn1cblxudmFyICQkRXJyb3IgPSB7IH07XG5cbnZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5TZW1pZ3JvdXBBbnksICQkRXJyb3IpO1xuXG52YXIgVHJhdmVyc2FibGUgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuXG52YXIgV2l0aEVycm9yc0FzQXJyYXlPZlN0cmluZ3MgPSB7XG4gIFZhbGlkYXRpb25FOiBWYWxpZGF0aW9uRSxcbiAgVHJhdmVyc2FibGU6IFRyYXZlcnNhYmxlXG59O1xuXG5mdW5jdGlvbiBXaXRoRXJyb3JzQXNOb25FbXB0eUFycmF5KCQkRXJyb3IpIHtcbiAgdmFyIFZhbGlkYXRpb25FID0gUmVsdWRlX1ZhbGlkYXRpb24uV2l0aEVycm9ycyhSZWx1ZGVfTm9uRW1wdHkuJCRBcnJheS5TZW1pZ3JvdXBBbnksICQkRXJyb3IpO1xuICB2YXIgVHJhdmVyc2FibGUgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFZhbGlkYXRpb25FOiBWYWxpZGF0aW9uRSxcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gdHJhdmVyc2UkMihmLCBhcnJheSkge1xuICB2YXIgJCRFcnJvciA9IHsgfTtcbiAgdmFyIFZhbGlkYXRpb25FID0gUmVsdWRlX1ZhbGlkYXRpb24uV2l0aEVycm9ycyhSZWx1ZGVfTm9uRW1wdHkuJCRBcnJheS5TZW1pZ3JvdXBBbnksICQkRXJyb3IpO1xuICB2YXIgVHJhdmVyc2FibGUgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzIoVHJhdmVyc2FibGUudHJhdmVyc2UsIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfUmVzdWx0LnRvVmFsaWRhdGlvbk5lYShDdXJyeS5fMShmLCBhKSk7XG4gICAgICAgICAgICAgIH0pLCBhcnJheSk7XG59XG5cbnZhciBWYWxpZGF0aW9uID0ge1xuICBXaXRoRXJyb3JzOiBXaXRoRXJyb3JzLFxuICBXaXRoRXJyb3JzQXNBcnJheTogV2l0aEVycm9yc0FzQXJyYXksXG4gIFdpdGhFcnJvcnNBc0FycmF5T2ZTdHJpbmdzOiBXaXRoRXJyb3JzQXNBcnJheU9mU3RyaW5ncyxcbiAgV2l0aEVycm9yc0FzTm9uRW1wdHlBcnJheTogV2l0aEVycm9yc0FzTm9uRW1wdHlBcnJheSxcbiAgdHJhdmVyc2U6IHRyYXZlcnNlJDJcbn07XG5cbmV4cG9ydCB7XG4gIEFycmF5RXFFeHRlbnNpb25zICxcbiAgQXJyYXlPcmRFeHRlbnNpb25zICxcbiAgQXJyYXlNb25vaWRFeHRlbnNpb25zICxcbiAgJCRTdHJpbmcgLFxuICBJbnQgLFxuICBGbG9hdCAsXG4gICQkT3B0aW9uICxcbiAgUmVzdWx0ICxcbiAgSU8gLFxuICBWYWxpZGF0aW9uICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0Jhc2UgZnJvbSBcIi4vYXJyYXkvUmVsdWRlX0FycmF5X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucyBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLmJzLmpzXCI7XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9ySW5maXgoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5GdW5jdG9yKTtcblxudmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRJbmZpeChSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkFsdCk7XG5cbnZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUluZml4KFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuQXBwbHkpO1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRJbmZpeChSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLk1vbmFkKTtcblxudmFyIEluZml4X0Z1bmN0b3JFeHRlbnNpb25zID0gaW5jbHVkZS5GdW5jdG9yRXh0ZW5zaW9ucztcblxudmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUuJGxlc3MkJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUuJGxlc3MkaGFzaCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGRvbGxhciA9IGluY2x1ZGUuJGxlc3MkO1xuXG52YXIgSW5maXhfJCRncmVhdCA9IGluY2x1ZGUuJCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGF0JGdyZWF0ID0gaW5jbHVkZS4kbGVzcyRhdCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkcGlwZSRncmVhdDtcblxudmFyIEluZml4X0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5BcHBseUV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQyLiRsZXNzJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRzdGFyID0gaW5jbHVkZSQyLiRsZXNzJHN0YXI7XG5cbnZhciBJbmZpeF8kc3RhciRncmVhdCA9IGluY2x1ZGUkMi4kc3RhciRncmVhdDtcblxudmFyIEluZml4X01vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMy5Nb25hZEV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEgPSBpbmNsdWRlJDMuJGdyZWF0JGdyZWF0JGVxO1xuXG52YXIgSW5maXhfJGVxJGxlc3MkbGVzcyA9IGluY2x1ZGUkMy4kZXEkbGVzcyRsZXNzO1xuXG52YXIgSW5maXhfJGdyZWF0JGVxJGdyZWF0ID0gaW5jbHVkZSQzLiRncmVhdCRlcSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGVxJGxlc3MgPSBpbmNsdWRlJDMuJGxlc3MkZXEkbGVzcztcblxudmFyIEluZml4ID0ge1xuICBGdW5jdG9yRXh0ZW5zaW9uczogSW5maXhfRnVuY3RvckV4dGVuc2lvbnMsXG4gICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAkbGVzcyRoYXNoJGdyZWF0OiBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0LFxuICAkbGVzcyQ6IEluZml4XyRsZXNzJGRvbGxhcixcbiAgJCRncmVhdDogSW5maXhfJCRncmVhdCxcbiAgJGxlc3MkYXQkZ3JlYXQ6IEluZml4XyRsZXNzJGF0JGdyZWF0LFxuICAkbGVzcyRwaXBlJGdyZWF0OiBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0LFxuICBBcHBseUV4dGVuc2lvbnM6IEluZml4X0FwcGx5RXh0ZW5zaW9ucyxcbiAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgJGxlc3Mkc3RhcjogSW5maXhfJGxlc3Mkc3RhcixcbiAgJHN0YXIkZ3JlYXQ6IEluZml4XyRzdGFyJGdyZWF0LFxuICBNb25hZEV4dGVuc2lvbnM6IEluZml4X01vbmFkRXh0ZW5zaW9ucyxcbiAgJGdyZWF0JGdyZWF0JGVxOiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEsXG4gICRlcSRsZXNzJGxlc3M6IEluZml4XyRlcSRsZXNzJGxlc3MsXG4gICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAkbGVzcyRlcSRsZXNzOiBJbmZpeF8kbGVzcyRlcSRsZXNzXG59O1xuXG52YXIgY29uY2F0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQ7XG5cbnZhciBTZW1pZ3JvdXBBbnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLlNlbWlncm91cEFueTtcblxudmFyIGNvbmNhdE5hbWVkID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXROYW1lZDtcblxudmFyIG1hcCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwO1xuXG52YXIgRnVuY3RvciA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRnVuY3RvcjtcblxudmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkJzRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBmbGlwTWFwID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mbGlwTWFwO1xuXG52YXIgJCR2b2lkID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy4kJHZvaWQ7XG5cbnZhciB2b2lkUmlnaHQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnZvaWRSaWdodDtcblxudmFyIHZvaWRMZWZ0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy52b2lkTGVmdDtcblxudmFyIGZsYXAgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZsYXA7XG5cbnZhciBhcHBseSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuYXBwbHk7XG5cbnZhciBBcHBseSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuQXBwbHk7XG5cbnZhciBCc0FwcGx5RXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuQnNBcHBseUV4dGVuc2lvbnM7XG5cbnZhciBhcHBseUZpcnN0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5hcHBseUZpcnN0O1xuXG52YXIgYXBwbHlTZWNvbmQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmFwcGx5U2Vjb25kO1xuXG52YXIgbWFwMiA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwMjtcblxudmFyIG1hcDMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1hcDM7XG5cbnZhciBtYXA0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXA0O1xuXG52YXIgbWFwNSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwNTtcblxudmFyIHR1cGxlMiA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMudHVwbGUyO1xuXG52YXIgdHVwbGUzID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy50dXBsZTM7XG5cbnZhciB0dXBsZTQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnR1cGxlNDtcblxudmFyIHR1cGxlNSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMudHVwbGU1O1xuXG52YXIgbWFwVHVwbGUyID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXBUdXBsZTI7XG5cbnZhciBtYXBUdXBsZTMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1hcFR1cGxlMztcblxudmFyIG1hcFR1cGxlNCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwVHVwbGU0O1xuXG52YXIgbWFwVHVwbGU1ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXBUdXBsZTU7XG5cbnZhciBwdXJlID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5wdXJlO1xuXG52YXIgQXBwbGljYXRpdmUgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkFwcGxpY2F0aXZlO1xuXG52YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkJzQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgbGlmdEExID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5saWZ0QTE7XG5cbnZhciBiaW5kID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5iaW5kO1xuXG52YXIgTW9uYWQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLk1vbmFkO1xuXG52YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgZmxhdE1hcCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZmxhdE1hcDtcblxudmFyIGZsYXR0ZW4gPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZsYXR0ZW47XG5cbnZhciBjb21wb3NlS2xlaXNsaSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBmbGlwQ29tcG9zZUtsZWlzbGkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIGxpZnRNMSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubGlmdE0xO1xuXG52YXIgd2hlbl8gPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLndoZW5fO1xuXG52YXIgdW5sZXNzID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy51bmxlc3M7XG5cbnZhciBhbHQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmFsdDtcblxudmFyIEFsdCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuQWx0O1xuXG52YXIgb3JFbHNlID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5vckVsc2U7XG5cbnZhciBpbWFwID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5pbWFwO1xuXG52YXIgSW52YXJpYW50ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5JbnZhcmlhbnQ7XG5cbnZhciBleHRlbmQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmV4dGVuZDtcblxudmFyIEV4dGVuZCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRXh0ZW5kO1xuXG52YXIgZm9sZExlZnQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkUmlnaHQ7XG5cbnZhciBGb2xkYWJsZSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGU7XG5cbnZhciBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBhbnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmFueTtcblxudmFyIGFsbCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuYWxsO1xuXG52YXIgY29udGFpbnNCeSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29udGFpbnNCeTtcblxudmFyIGNvbnRhaW5zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb250YWlucztcblxudmFyIGluZGV4T2ZCeSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuaW5kZXhPZkJ5O1xuXG52YXIgaW5kZXhPZiA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuaW5kZXhPZjtcblxudmFyIG1pbkJ5ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5taW5CeTtcblxudmFyIG1pbiA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWluO1xuXG52YXIgbWF4QnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1heEJ5O1xuXG52YXIgbWF4ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXg7XG5cbnZhciBjb3VudEJ5ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb3VudEJ5O1xuXG52YXIgc2l6ZSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuc2l6ZTtcblxudmFyIGNvdW50ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb3VudDtcblxudmFyIGZvckVhY2ggPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvckVhY2g7XG5cbnZhciBmb3JFYWNoV2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZmluZDtcblxudmFyIGZpbmRXaXRoSW5kZXggPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZpbmRXaXRoSW5kZXg7XG5cbnZhciB0b0FycmF5ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy50b0FycmF5O1xuXG52YXIgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIGZvbGRNYXAgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRNYXA7XG5cbnZhciBmb2xkV2l0aE1vbm9pZCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuaW50ZXJjYWxhdGU7XG5cbnZhciBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlT3JkRXh0ZW5zaW9ucztcblxudmFyIFRyYXZlcnNhYmxlID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5UcmF2ZXJzYWJsZTtcblxudmFyIGVxQnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxQnk7XG5cbnZhciBlcSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZXE7XG5cbnZhciBFcSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRXE7XG5cbnZhciBPcmQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLk9yZDtcblxudmFyIHNob3dCeSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuc2hvd0J5O1xuXG52YXIgc2hvdyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuc2hvdztcblxudmFyIFNob3cgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLlNob3c7XG5cbnZhciBmcm9tTGlzdCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZnJvbUxpc3Q7XG5cbnZhciB0b0xpc3QgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnRvTGlzdDtcblxudmFyIElzb0xpc3QgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLklzb0xpc3Q7XG5cbnZhciBjb25zID0gUmVsdWRlX0FycmF5X0Jhc2UuY29ucztcblxudmFyIHByZXBlbmQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5wcmVwZW5kO1xuXG52YXIgdW5jb25zID0gUmVsdWRlX0FycmF5X0Jhc2UudW5jb25zO1xuXG52YXIgYXBwZW5kID0gUmVsdWRlX0FycmF5X0Jhc2UuYXBwZW5kO1xuXG52YXIgcmVwZWF0ID0gUmVsdWRlX0FycmF5X0Jhc2UucmVwZWF0O1xuXG52YXIgbWFrZVdpdGhJbmRleCA9IFJlbHVkZV9BcnJheV9CYXNlLm1ha2VXaXRoSW5kZXg7XG5cbnZhciBtYXBXaXRoSW5kZXggPSBSZWx1ZGVfQXJyYXlfQmFzZS5tYXBXaXRoSW5kZXg7XG5cbnZhciByZXZlcnNlID0gUmVsdWRlX0FycmF5X0Jhc2UucmV2ZXJzZTtcblxudmFyIHNodWZmbGVJblBsYWNlID0gUmVsdWRlX0FycmF5X0Jhc2Uuc2h1ZmZsZUluUGxhY2U7XG5cbnZhciBzaHVmZmxlID0gUmVsdWRlX0FycmF5X0Jhc2Uuc2h1ZmZsZTtcblxudmFyIGxlbmd0aCA9IFJlbHVkZV9BcnJheV9CYXNlLmxlbmd0aDtcblxudmFyIGlzRW1wdHkgPSBSZWx1ZGVfQXJyYXlfQmFzZS5pc0VtcHR5O1xuXG52YXIgaXNOb3RFbXB0eSA9IFJlbHVkZV9BcnJheV9CYXNlLmlzTm90RW1wdHk7XG5cbnZhciBhdCA9IFJlbHVkZV9BcnJheV9CYXNlLmF0O1xuXG52YXIgc2V0QXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zZXRBdDtcblxudmFyIGhlYWQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5oZWFkO1xuXG52YXIgdGFpbCA9IFJlbHVkZV9BcnJheV9CYXNlLnRhaWw7XG5cbnZhciB0YWlsT3JFbXB0eSA9IFJlbHVkZV9BcnJheV9CYXNlLnRhaWxPckVtcHR5O1xuXG52YXIgaW5pdCA9IFJlbHVkZV9BcnJheV9CYXNlLmluaXQ7XG5cbnZhciBpbml0T3JFbXB0eSA9IFJlbHVkZV9BcnJheV9CYXNlLmluaXRPckVtcHR5O1xuXG52YXIgbGFzdCA9IFJlbHVkZV9BcnJheV9CYXNlLmxhc3Q7XG5cbnZhciB0YWtlID0gUmVsdWRlX0FycmF5X0Jhc2UudGFrZTtcblxudmFyIHRha2VFeGFjdGx5ID0gUmVsdWRlX0FycmF5X0Jhc2UudGFrZUV4YWN0bHk7XG5cbnZhciB0YWtlV2hpbGUgPSBSZWx1ZGVfQXJyYXlfQmFzZS50YWtlV2hpbGU7XG5cbnZhciBkcm9wID0gUmVsdWRlX0FycmF5X0Jhc2UuZHJvcDtcblxudmFyIGRyb3BFeGFjdGx5ID0gUmVsdWRlX0FycmF5X0Jhc2UuZHJvcEV4YWN0bHk7XG5cbnZhciBkcm9wV2hpbGUgPSBSZWx1ZGVfQXJyYXlfQmFzZS5kcm9wV2hpbGU7XG5cbnZhciBmaWx0ZXIgPSBSZWx1ZGVfQXJyYXlfQmFzZS5maWx0ZXI7XG5cbnZhciBrZWVwID0gUmVsdWRlX0FycmF5X0Jhc2Uua2VlcDtcblxudmFyIGZpbHRlcldpdGhJbmRleCA9IFJlbHVkZV9BcnJheV9CYXNlLmZpbHRlcldpdGhJbmRleDtcblxudmFyIGtlZXBXaXRoSW5kZXggPSBSZWx1ZGVfQXJyYXlfQmFzZS5rZWVwV2l0aEluZGV4O1xuXG52YXIgZmlsdGVyTm90ID0gUmVsdWRlX0FycmF5X0Jhc2UuZmlsdGVyTm90O1xuXG52YXIgcmVqZWN0ID0gUmVsdWRlX0FycmF5X0Jhc2UucmVqZWN0O1xuXG52YXIgZmlsdGVyTm90V2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0Jhc2UuZmlsdGVyTm90V2l0aEluZGV4O1xuXG52YXIgcmVqZWN0V2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0Jhc2UucmVqZWN0V2l0aEluZGV4O1xuXG52YXIgbWFwT3B0aW9uID0gUmVsdWRlX0FycmF5X0Jhc2UubWFwT3B0aW9uO1xuXG52YXIgY2F0T3B0aW9uID0gUmVsdWRlX0FycmF5X0Jhc2UuY2F0T3B0aW9uO1xuXG52YXIgcGFydGl0aW9uID0gUmVsdWRlX0FycmF5X0Jhc2UucGFydGl0aW9uO1xuXG52YXIgc3BsaXRBdCA9IFJlbHVkZV9BcnJheV9CYXNlLnNwbGl0QXQ7XG5cbnZhciBwcmVwZW5kVG9BbGwgPSBSZWx1ZGVfQXJyYXlfQmFzZS5wcmVwZW5kVG9BbGw7XG5cbnZhciBpbnRlcnNwZXJzZSA9IFJlbHVkZV9BcnJheV9CYXNlLmludGVyc3BlcnNlO1xuXG52YXIgcmVwbGljYXRlID0gUmVsdWRlX0FycmF5X0Jhc2UucmVwbGljYXRlO1xuXG52YXIgemlwID0gUmVsdWRlX0FycmF5X0Jhc2UuemlwO1xuXG52YXIgemlwV2l0aCA9IFJlbHVkZV9BcnJheV9CYXNlLnppcFdpdGg7XG5cbnZhciB6aXBXaXRoSW5kZXggPSBSZWx1ZGVfQXJyYXlfQmFzZS56aXBXaXRoSW5kZXg7XG5cbnZhciB1bnppcCA9IFJlbHVkZV9BcnJheV9CYXNlLnVuemlwO1xuXG52YXIgc29ydFdpdGhJbnQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zb3J0V2l0aEludDtcblxudmFyIHNvcnRCeSA9IFJlbHVkZV9BcnJheV9CYXNlLnNvcnRCeTtcblxudmFyIHNvcnQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zb3J0O1xuXG52YXIgZGlzdGluY3RCeSA9IFJlbHVkZV9BcnJheV9CYXNlLmRpc3RpbmN0Qnk7XG5cbnZhciByZW1vdmVGaXJzdEJ5ID0gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRmlyc3RCeTtcblxudmFyIHJlbW92ZUVhY2hCeSA9IFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUVhY2hCeTtcblxudmFyIGRpc3RpbmN0ID0gUmVsdWRlX0FycmF5X0Jhc2UuZGlzdGluY3Q7XG5cbnZhciByZW1vdmVGaXJzdCA9IFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUZpcnN0O1xuXG52YXIgcmVtb3ZlRWFjaCA9IFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUVhY2g7XG5cbnZhciByZXBsYWNlQXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5yZXBsYWNlQXQ7XG5cbnZhciBzY2FuTGVmdCA9IFJlbHVkZV9BcnJheV9CYXNlLnNjYW5MZWZ0O1xuXG52YXIgc2NhblJpZ2h0ID0gUmVsdWRlX0FycmF5X0Jhc2Uuc2NhblJpZ2h0O1xuXG52YXIgaW5zZXJ0QXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5pbnNlcnRBdDtcblxudmFyIHVwZGF0ZUF0ID0gUmVsdWRlX0FycmF5X0Jhc2UudXBkYXRlQXQ7XG5cbnZhciBzd2FwQXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zd2FwQXQ7XG5cbnZhciByZW1vdmVBdCA9IFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUF0O1xuXG52YXIgY2h1bmsgPSBSZWx1ZGVfQXJyYXlfQmFzZS5jaHVuaztcblxudmFyIEFycmF5RXFFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5BcnJheUVxRXh0ZW5zaW9ucztcblxudmFyIEFycmF5T3JkRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuQXJyYXlPcmRFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlNb25vaWRFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5BcnJheU1vbm9pZEV4dGVuc2lvbnM7XG5cbnZhciAkJFN0cmluZyA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuJCRTdHJpbmc7XG5cbnZhciBJbnQgPSBSZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLkludDtcblxudmFyIEZsb2F0ID0gUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5GbG9hdDtcblxudmFyICQkT3B0aW9uID0gUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy4kJE9wdGlvbjtcblxudmFyIFJlc3VsdCA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuUmVzdWx0O1xuXG52YXIgSU8gPSBSZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLklPO1xuXG52YXIgVmFsaWRhdGlvbiA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuVmFsaWRhdGlvbjtcblxuZXhwb3J0IHtcbiAgY29uY2F0ICxcbiAgU2VtaWdyb3VwQW55ICxcbiAgY29uY2F0TmFtZWQgLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsdCAsXG4gIEFsdCAsXG4gIG9yRWxzZSAsXG4gIGltYXAgLFxuICBJbnZhcmlhbnQgLFxuICBleHRlbmQgLFxuICBFeHRlbmQgLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9BcnJheSAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIE9yZCAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgZnJvbUxpc3QgLFxuICB0b0xpc3QgLFxuICBJc29MaXN0ICxcbiAgY29ucyAsXG4gIHByZXBlbmQgLFxuICB1bmNvbnMgLFxuICBhcHBlbmQgLFxuICByZXBlYXQgLFxuICBtYWtlV2l0aEluZGV4ICxcbiAgbWFwV2l0aEluZGV4ICxcbiAgcmV2ZXJzZSAsXG4gIHNodWZmbGVJblBsYWNlICxcbiAgc2h1ZmZsZSAsXG4gIGxlbmd0aCAsXG4gIGlzRW1wdHkgLFxuICBpc05vdEVtcHR5ICxcbiAgYXQgLFxuICBzZXRBdCAsXG4gIGhlYWQgLFxuICB0YWlsICxcbiAgdGFpbE9yRW1wdHkgLFxuICBpbml0ICxcbiAgaW5pdE9yRW1wdHkgLFxuICBsYXN0ICxcbiAgdGFrZSAsXG4gIHRha2VFeGFjdGx5ICxcbiAgdGFrZVdoaWxlICxcbiAgZHJvcCAsXG4gIGRyb3BFeGFjdGx5ICxcbiAgZHJvcFdoaWxlICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBmaWx0ZXJOb3QgLFxuICByZWplY3QgLFxuICBmaWx0ZXJOb3RXaXRoSW5kZXggLFxuICByZWplY3RXaXRoSW5kZXggLFxuICBtYXBPcHRpb24gLFxuICBjYXRPcHRpb24gLFxuICBwYXJ0aXRpb24gLFxuICBzcGxpdEF0ICxcbiAgcHJlcGVuZFRvQWxsICxcbiAgaW50ZXJzcGVyc2UgLFxuICByZXBsaWNhdGUgLFxuICB6aXAgLFxuICB6aXBXaXRoICxcbiAgemlwV2l0aEluZGV4ICxcbiAgdW56aXAgLFxuICBzb3J0V2l0aEludCAsXG4gIHNvcnRCeSAsXG4gIHNvcnQgLFxuICBkaXN0aW5jdEJ5ICxcbiAgcmVtb3ZlRmlyc3RCeSAsXG4gIHJlbW92ZUVhY2hCeSAsXG4gIGRpc3RpbmN0ICxcbiAgcmVtb3ZlRmlyc3QgLFxuICByZW1vdmVFYWNoICxcbiAgcmVwbGFjZUF0ICxcbiAgc2NhbkxlZnQgLFxuICBzY2FuUmlnaHQgLFxuICBpbnNlcnRBdCAsXG4gIHVwZGF0ZUF0ICxcbiAgc3dhcEF0ICxcbiAgcmVtb3ZlQXQgLFxuICBjaHVuayAsXG4gIEFycmF5RXFFeHRlbnNpb25zICxcbiAgQXJyYXlPcmRFeHRlbnNpb25zICxcbiAgQXJyYXlNb25vaWRFeHRlbnNpb25zICxcbiAgJCRTdHJpbmcgLFxuICBJbnQgLFxuICBGbG9hdCAsXG4gICQkT3B0aW9uICxcbiAgUmVzdWx0ICxcbiAgSU8gLFxuICBWYWxpZGF0aW9uICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCIuLi9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JbnQgZnJvbSBcIi4uL1JlbHVkZV9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GbG9hdCBmcm9tIFwiLi4vUmVsdWRlX0Zsb2F0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfU3RyaW5nIGZyb20gXCIuLi9SZWx1ZGVfU3RyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBPcHRpb24kQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL09wdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMgZnJvbSBcIi4vUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYnMuanNcIjtcblxuZnVuY3Rpb24gT3B0aW9uRXFFeHRlbnNpb25zKEUpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmVxQnkoRS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBPcHRpb25PcmRFeHRlbnNpb25zKE8pIHtcbiAgdmFyIE9wdGlvbk9yZCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLk9yZChPKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBPcHRpb25PcmQ6IE9wdGlvbk9yZCxcbiAgICAgICAgICBjb21wYXJlOiBPcHRpb25PcmQuY29tcGFyZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBlcShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfU3RyaW5nLkVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbnZhciBPcHRpb25PcmQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5PcmQoUmVsdWRlX1N0cmluZy5PcmQpO1xuXG52YXIgU3RyaW5nX2NvbXBhcmUgPSBPcHRpb25PcmQuY29tcGFyZTtcblxudmFyICQkU3RyaW5nID0ge1xuICBlcTogZXEsXG4gIE9wdGlvbk9yZDogT3B0aW9uT3JkLFxuICBjb21wYXJlOiBTdHJpbmdfY29tcGFyZVxufTtcblxuZnVuY3Rpb24gZXEkMShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfSW50LkVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbnZhciBPcHRpb25PcmQkMSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLk9yZChSZWx1ZGVfSW50Lk9yZCk7XG5cbnZhciBJbnRfY29tcGFyZSA9IE9wdGlvbk9yZCQxLmNvbXBhcmU7XG5cbnZhciBJbnQgPSB7XG4gIGVxOiBlcSQxLFxuICBPcHRpb25PcmQ6IE9wdGlvbk9yZCQxLFxuICBjb21wYXJlOiBJbnRfY29tcGFyZVxufTtcblxuZnVuY3Rpb24gZXEkMihwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfRmxvYXQuRXEuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxudmFyIE9wdGlvbk9yZCQyID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuT3JkKFJlbHVkZV9GbG9hdC5PcmQpO1xuXG52YXIgRmxvYXRfY29tcGFyZSA9IE9wdGlvbk9yZCQyLmNvbXBhcmU7XG5cbnZhciBGbG9hdCA9IHtcbiAgZXE6IGVxJDIsXG4gIE9wdGlvbk9yZDogT3B0aW9uT3JkJDIsXG4gIGNvbXBhcmU6IEZsb2F0X2NvbXBhcmVcbn07XG5cbmZ1bmN0aW9uIHRyYXZlcnNlKGYsIG9wdCkge1xuICB2YXIgSW9FID0gUmVsdWRlX0lPLldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VJTyA9IE9wdGlvbiRCc0Jhc3RldC5UcmF2ZXJzYWJsZShJb0UuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzIoVHJhdmVyc2VJTy50cmF2ZXJzZSwgZiwgb3B0KTtcbn1cblxuZnVuY3Rpb24gc2VxdWVuY2Uob3B0KSB7XG4gIHZhciBJb0UgPSBSZWx1ZGVfSU8uV2l0aEVycm9yKHsgfSk7XG4gIHZhciBUcmF2ZXJzZUlPID0gT3B0aW9uJEJzQmFzdGV0LlRyYXZlcnNhYmxlKElvRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiBDdXJyeS5fMShUcmF2ZXJzZUlPLnNlcXVlbmNlLCBvcHQpO1xufVxuXG52YXIgSU8gPSB7XG4gIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgc2VxdWVuY2U6IHNlcXVlbmNlXG59O1xuXG5leHBvcnQge1xuICBPcHRpb25FcUV4dGVuc2lvbnMgLFxuICBPcHRpb25PcmRFeHRlbnNpb25zICxcbiAgJCRTdHJpbmcgLFxuICBJbnQgLFxuICBGbG9hdCAsXG4gIElPICxcbiAgXG59XG4vKiBPcHRpb25PcmQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBPcHRpb24kQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL09wdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9CYXNlIGZyb20gXCIuL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMgZnJvbSBcIi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9TcGVjaWFsaXphdGlvbnMgZnJvbSBcIi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuYnMuanNcIjtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuU2VtaWdyb3Vwb2lkSW5maXgoUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuU2VtaWdyb3Vwb2lkKTtcblxudmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckluZml4KFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkZ1bmN0b3IpO1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQWx0LkFsdEluZml4KE9wdGlvbiRCc0Jhc3RldC5BbHQpO1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlJbmZpeChSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5BcHBseSk7XG5cbnZhciBpbmNsdWRlJDQgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEluZml4KFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLk1vbmFkKTtcblxuZnVuY3Rpb24gJHBpcGUkcXVlc3Rpb24ob3B0LCAkJGRlZmF1bHQpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2UoJCRkZWZhdWx0LCBvcHQpO1xufVxuXG52YXIgSW5maXhfU0UgPSBpbmNsdWRlLlNFO1xuXG52YXIgSW5maXhfJGxlc3MkbGVzcyRsZXNzID0gaW5jbHVkZS4kbGVzcyRsZXNzJGxlc3M7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZ3JlYXQgPSBpbmNsdWRlLiRncmVhdCRncmVhdCRncmVhdDtcblxudmFyIEluZml4X0Z1bmN0b3JFeHRlbnNpb25zID0gaW5jbHVkZSQxLkZ1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGhhc2gkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkaGFzaCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGRvbGxhciA9IGluY2x1ZGUkMS4kbGVzcyQ7XG5cbnZhciBJbmZpeF8kJGdyZWF0ID0gaW5jbHVkZSQxLiQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRhdCRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyRhdCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDIuJGxlc3MkcGlwZSRncmVhdDtcblxudmFyIEluZml4X0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkMy5BcHBseUV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQzLiRsZXNzJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRzdGFyID0gaW5jbHVkZSQzLiRsZXNzJHN0YXI7XG5cbnZhciBJbmZpeF8kc3RhciRncmVhdCA9IGluY2x1ZGUkMy4kc3RhciRncmVhdDtcblxudmFyIEluZml4X01vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNC5Nb25hZEV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEgPSBpbmNsdWRlJDQuJGdyZWF0JGdyZWF0JGVxO1xuXG52YXIgSW5maXhfJGVxJGxlc3MkbGVzcyA9IGluY2x1ZGUkNC4kZXEkbGVzcyRsZXNzO1xuXG52YXIgSW5maXhfJGdyZWF0JGVxJGdyZWF0ID0gaW5jbHVkZSQ0LiRncmVhdCRlcSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGVxJGxlc3MgPSBpbmNsdWRlJDQuJGxlc3MkZXEkbGVzcztcblxudmFyIEluZml4ID0ge1xuICBTRTogSW5maXhfU0UsXG4gICRsZXNzJGxlc3MkbGVzczogSW5maXhfJGxlc3MkbGVzcyRsZXNzLFxuICAkZ3JlYXQkZ3JlYXQkZ3JlYXQ6IEluZml4XyRncmVhdCRncmVhdCRncmVhdCxcbiAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAkbGVzcyQkZ3JlYXQ6IEluZml4XyRsZXNzJGRvbGxhciRncmVhdCxcbiAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICQkZ3JlYXQ6IEluZml4XyQkZ3JlYXQsXG4gICRsZXNzJGF0JGdyZWF0OiBJbmZpeF8kbGVzcyRhdCRncmVhdCxcbiAgJGxlc3MkcGlwZSRncmVhdDogSW5maXhfJGxlc3MkcGlwZSRncmVhdCxcbiAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICRsZXNzJHN0YXI6IEluZml4XyRsZXNzJHN0YXIsXG4gICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgTW9uYWRFeHRlbnNpb25zOiBJbmZpeF9Nb25hZEV4dGVuc2lvbnMsXG4gICRncmVhdCRncmVhdCRlcTogSW5maXhfJGdyZWF0JGdyZWF0JGVxLFxuICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgJGxlc3MkZXEkbGVzczogSW5maXhfJGxlc3MkZXEkbGVzcyxcbiAgJHBpcGUkcXVlc3Rpb246ICRwaXBlJHF1ZXN0aW9uXG59O1xuXG52YXIgY29tcG9zZSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmNvbXBvc2U7XG5cbnZhciBTZW1pZ3JvdXBvaWQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5TZW1pZ3JvdXBvaWQ7XG5cbnZhciBhbmRUaGVuID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYW5kVGhlbjtcblxudmFyIG1hcCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcDtcblxudmFyIEZ1bmN0b3IgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5GdW5jdG9yO1xuXG52YXIgQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkJzRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBmbGlwTWFwID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZmxpcE1hcDtcblxudmFyICQkdm9pZCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLiQkdm9pZDtcblxudmFyIHZvaWRSaWdodCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnZvaWRSaWdodDtcblxudmFyIHZvaWRMZWZ0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudm9pZExlZnQ7XG5cbnZhciBmbGFwID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZmxhcDtcblxudmFyIGFwcGx5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYXBwbHk7XG5cbnZhciBBcHBseSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkFwcGx5O1xuXG52YXIgQnNBcHBseUV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Cc0FwcGx5RXh0ZW5zaW9ucztcblxudmFyIGFwcGx5Rmlyc3QgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5hcHBseUZpcnN0O1xuXG52YXIgYXBwbHlTZWNvbmQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5hcHBseVNlY29uZDtcblxudmFyIG1hcDIgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAyO1xuXG52YXIgbWFwMyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcDM7XG5cbnZhciBtYXA0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwNDtcblxudmFyIG1hcDUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXA1O1xuXG52YXIgdHVwbGUyID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudHVwbGUyO1xuXG52YXIgdHVwbGUzID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudHVwbGUzO1xuXG52YXIgdHVwbGU0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudHVwbGU0O1xuXG52YXIgdHVwbGU1ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudHVwbGU1O1xuXG52YXIgbWFwVHVwbGUyID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwVHVwbGUyO1xuXG52YXIgbWFwVHVwbGUzID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwVHVwbGUzO1xuXG52YXIgbWFwVHVwbGU0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwVHVwbGU0O1xuXG52YXIgbWFwVHVwbGU1ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwVHVwbGU1O1xuXG52YXIgcHVyZSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnB1cmU7XG5cbnZhciBBcHBsaWNhdGl2ZSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkFwcGxpY2F0aXZlO1xuXG52YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIGxpZnRBMSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmxpZnRBMTtcblxudmFyIGJpbmQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5iaW5kO1xuXG52YXIgTW9uYWQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Nb25hZDtcblxudmFyIEJzTW9uYWRFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQnNNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBmbGF0TWFwID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZmxhdE1hcDtcblxudmFyIGZsYXR0ZW4gPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5mbGF0dGVuO1xuXG52YXIgY29tcG9zZUtsZWlzbGkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5jb21wb3NlS2xlaXNsaTtcblxudmFyIGZsaXBDb21wb3NlS2xlaXNsaSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIGxpZnRNMSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmxpZnRNMTtcblxudmFyIHdoZW5fID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMud2hlbl87XG5cbnZhciB1bmxlc3MgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy51bmxlc3M7XG5cbnZhciBhbGlnbiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFsaWduO1xuXG52YXIgYWxpZ25XaXRoID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYWxpZ25XaXRoO1xuXG52YXIgU2VtaWFsaWduID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuU2VtaWFsaWduO1xuXG52YXIgQWxpZ24gPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5BbGlnbjtcblxudmFyIGZvbGRMZWZ0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9sZExlZnQ7XG5cbnZhciBmb2xkUmlnaHQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5mb2xkUmlnaHQ7XG5cbnZhciBGb2xkYWJsZSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkZvbGRhYmxlO1xuXG52YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucztcblxudmFyIGFueSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFueTtcblxudmFyIGFsbCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFsbDtcblxudmFyIGNvbnRhaW5zQnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5jb250YWluc0J5O1xuXG52YXIgY29udGFpbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5jb250YWlucztcblxudmFyIGluZGV4T2ZCeSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmluZGV4T2ZCeTtcblxudmFyIGluZGV4T2YgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5pbmRleE9mO1xuXG52YXIgbWluQnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5taW5CeTtcblxudmFyIG1pbiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1pbjtcblxudmFyIG1heEJ5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWF4Qnk7XG5cbnZhciBtYXggPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXg7XG5cbnZhciBjb3VudEJ5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuY291bnRCeTtcblxudmFyIGxlbmd0aCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmxlbmd0aDtcblxudmFyIHNpemUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5zaXplO1xuXG52YXIgY291bnQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5jb3VudDtcblxudmFyIGZvckVhY2ggPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZvckVhY2hXaXRoSW5kZXg7XG5cbnZhciBmaW5kID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZmluZDtcblxudmFyIGZpbmRXaXRoSW5kZXggPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9MaXN0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudG9MaXN0O1xuXG52YXIgdG9BcnJheSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnRvQXJyYXk7XG5cbnZhciBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnM7XG5cbnZhciBmb2xkTWFwID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9sZE1hcDtcblxudmFyIGZvbGRXaXRoTW9ub2lkID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmludGVyY2FsYXRlO1xuXG52YXIgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRm9sZGFibGVNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVPcmRFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgYWx0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYWx0O1xuXG52YXIgYWx0TGF6eSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFsdExhenk7XG5cbnZhciBTZW1pZ3JvdXBfQW55ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuU2VtaWdyb3VwX0FueTtcblxudmFyIE1vbm9pZF9BbnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Nb25vaWRfQW55O1xuXG52YXIgQWx0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQWx0O1xuXG52YXIgUGx1cyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLlBsdXM7XG5cbnZhciBBbHRlcm5hdGl2ZSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkFsdGVybmF0aXZlO1xuXG52YXIgVHJhdmVyc2FibGUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5UcmF2ZXJzYWJsZTtcblxudmFyIGVxQnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5lcUJ5O1xuXG52YXIgZXEgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5lcTtcblxudmFyIEVxID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRXE7XG5cbnZhciBPcmQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5PcmQ7XG5cbnZhciBzaG93QnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5zaG93Qnk7XG5cbnZhciBzaG93ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuc2hvdztcblxudmFyIFNob3cgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5TaG93O1xuXG52YXIgV2l0aFNlbWlncm91cCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLldpdGhTZW1pZ3JvdXA7XG5cbnZhciBXaXRoQXBwbGljYXRpdmUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5XaXRoQXBwbGljYXRpdmU7XG5cbnZhciBzb21lID0gUmVsdWRlX09wdGlvbl9CYXNlLnNvbWU7XG5cbnZhciBub25lO1xuXG52YXIgZW1wdHk7XG5cbnZhciBpc1NvbWUgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuaXNTb21lO1xuXG52YXIgaXNOb25lID0gUmVsdWRlX09wdGlvbl9CYXNlLmlzTm9uZTtcblxudmFyIGZvbGQgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuZm9sZDtcblxudmFyIGZvbGRMYXp5ID0gUmVsdWRlX09wdGlvbl9CYXNlLmZvbGRMYXp5O1xuXG52YXIgZ2V0T3JFbHNlID0gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yRWxzZTtcblxudmFyIGdldE9yRWxzZUxhenkgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlTGF6eTtcblxudmFyIGdldE9yVGhyb3cgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JUaHJvdztcblxudmFyIG9yRWxzZSA9IFJlbHVkZV9PcHRpb25fQmFzZS5vckVsc2U7XG5cbnZhciBvckVsc2VMYXp5ID0gUmVsdWRlX09wdGlvbl9CYXNlLm9yRWxzZUxhenk7XG5cbnZhciB0YXAgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UudGFwO1xuXG52YXIgdGFwU29tZSA9IFJlbHVkZV9PcHRpb25fQmFzZS50YXBTb21lO1xuXG52YXIgdGFwTm9uZSA9IFJlbHVkZV9PcHRpb25fQmFzZS50YXBOb25lO1xuXG52YXIgYml0YXAgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuYml0YXA7XG5cbnZhciBmaWx0ZXIgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuZmlsdGVyO1xuXG52YXIga2VlcCA9IFJlbHVkZV9PcHRpb25fQmFzZS5rZWVwO1xuXG52YXIgZmlsdGVyTm90ID0gUmVsdWRlX09wdGlvbl9CYXNlLmZpbHRlck5vdDtcblxudmFyIHJlamVjdCA9IFJlbHVkZV9PcHRpb25fQmFzZS5yZWplY3Q7XG5cbnZhciBPcHRpb25FcUV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX1NwZWNpYWxpemF0aW9ucy5PcHRpb25FcUV4dGVuc2lvbnM7XG5cbnZhciBPcHRpb25PcmRFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9TcGVjaWFsaXphdGlvbnMuT3B0aW9uT3JkRXh0ZW5zaW9ucztcblxudmFyICQkU3RyaW5nID0gUmVsdWRlX09wdGlvbl9TcGVjaWFsaXphdGlvbnMuJCRTdHJpbmc7XG5cbnZhciBJbnQgPSBSZWx1ZGVfT3B0aW9uX1NwZWNpYWxpemF0aW9ucy5JbnQ7XG5cbnZhciBGbG9hdCA9IFJlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zLkZsb2F0O1xuXG52YXIgSU8gPSBSZWx1ZGVfT3B0aW9uX1NwZWNpYWxpemF0aW9ucy5JTztcblxuZXhwb3J0IHtcbiAgY29tcG9zZSAsXG4gIFNlbWlncm91cG9pZCAsXG4gIGFuZFRoZW4gLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsaWduICxcbiAgYWxpZ25XaXRoICxcbiAgU2VtaWFsaWduICxcbiAgQWxpZ24gLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBsZW5ndGggLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9MaXN0ICxcbiAgdG9BcnJheSAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgYWx0ICxcbiAgYWx0TGF6eSAsXG4gIFNlbWlncm91cF9BbnkgLFxuICBNb25vaWRfQW55ICxcbiAgQWx0ICxcbiAgUGx1cyAsXG4gIEFsdGVybmF0aXZlICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIE9yZCAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgV2l0aFNlbWlncm91cCAsXG4gIFdpdGhBcHBsaWNhdGl2ZSAsXG4gIHNvbWUgLFxuICBub25lICxcbiAgZW1wdHkgLFxuICBpc1NvbWUgLFxuICBpc05vbmUgLFxuICBmb2xkICxcbiAgZm9sZExhenkgLFxuICBnZXRPckVsc2UgLFxuICBnZXRPckVsc2VMYXp5ICxcbiAgZ2V0T3JUaHJvdyAsXG4gIG9yRWxzZSAsXG4gIG9yRWxzZUxhenkgLFxuICB0YXAgLFxuICB0YXBTb21lICxcbiAgdGFwTm9uZSAsXG4gIGJpdGFwICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlck5vdCAsXG4gIHJlamVjdCAsXG4gIE9wdGlvbkVxRXh0ZW5zaW9ucyAsXG4gIE9wdGlvbk9yZEV4dGVuc2lvbnMgLFxuICAkJFN0cmluZyAsXG4gIEludCAsXG4gIEZsb2F0ICxcbiAgSU8gLFxuICBJbmZpeCAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBmcm9tSnMocGFyYW0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhZGRyZXNzOiBDYW1sX29wdGlvbi5udWxsYWJsZV90b19vcHQocGFyYW0uYWRkcmVzcyksXG4gICAgICAgICAgY29kZTogcGFyYW0uY29kZSxcbiAgICAgICAgICBkZXN0OiBDYW1sX29wdGlvbi5udWxsYWJsZV90b19vcHQocGFyYW0uZGVzdCksXG4gICAgICAgICAgZXJybm86IHBhcmFtLmVycm5vLFxuICAgICAgICAgIGluZm86IENhbWxfb3B0aW9uLm51bGxhYmxlX3RvX29wdChwYXJhbS5pbmZvKSxcbiAgICAgICAgICBtZXNzYWdlOiBwYXJhbS5tZXNzYWdlLFxuICAgICAgICAgIHBhdGg6IENhbWxfb3B0aW9uLm51bGxhYmxlX3RvX29wdChwYXJhbS5wYXRoKSxcbiAgICAgICAgICBwb3J0OiBDYW1sX29wdGlvbi5udWxsYWJsZV90b19vcHQocGFyYW0ucG9ydCksXG4gICAgICAgICAgc3lzY2FsbDogcGFyYW0uc3lzY2FsbFxuICAgICAgICB9O1xufVxuXG52YXIgU3lzdGVtRXJyb3IgPSB7XG4gIGZyb21KczogZnJvbUpzXG59O1xuXG52YXIgVW5rbm93bkVycm9yID0geyB9O1xuXG5mdW5jdGlvbiBfbWFrZVN5c3RlbUVycm9yKGV4Yykge1xuICB2YXIgZXJyb3IgPSBmcm9tSnMoZXhjKTtcbiAgdmFyIG1hdGNoID0gZXJyb3IuY29kZTtcbiAgc3dpdGNoIChtYXRjaCkge1xuICAgIGNhc2UgXCJFQUNDRVNcIiA6XG4gICAgICAgIHJldHVybiAvKiBBY2Nlc3NEZW5pZWQgKi9CbG9jay5fXygwLCBbZXJyb3JdKTtcbiAgICBjYXNlIFwiRUFERFJJTlVTRVwiIDpcbiAgICAgICAgcmV0dXJuIC8qIEFkZHJlc3NJblVzZSAqL0Jsb2NrLl9fKDEsIFtlcnJvcl0pO1xuICAgIGNhc2UgXCJFQ09OTlJFRlVTRURcIiA6XG4gICAgICAgIHJldHVybiAvKiBDb25uZWN0aW9uUmVmdXNlZCAqL0Jsb2NrLl9fKDIsIFtlcnJvcl0pO1xuICAgIGNhc2UgXCJFQ09OTlJFU0VUXCIgOlxuICAgICAgICByZXR1cm4gLyogQ29ubmVjdGlvblJlc2V0ICovQmxvY2suX18oMywgW2Vycm9yXSk7XG4gICAgY2FzZSBcIkVFWElTVFwiIDpcbiAgICAgICAgcmV0dXJuIC8qIEZpbGVFeGlzdHMgKi9CbG9jay5fXyg0LCBbZXJyb3JdKTtcbiAgICBjYXNlIFwiRUlTRElSXCIgOlxuICAgICAgICByZXR1cm4gLyogSXNBRGlyZWN0b3J5ICovQmxvY2suX18oNSwgW2Vycm9yXSk7XG4gICAgY2FzZSBcIkVNRklMRVwiIDpcbiAgICAgICAgcmV0dXJuIC8qIFRvb01hbnlPcGVuRmlsZXMgKi9CbG9jay5fXyg2LCBbZXJyb3JdKTtcbiAgICBjYXNlIFwiRU5PRU5UXCIgOlxuICAgICAgICByZXR1cm4gLyogTm9TdWNoRmlsZU9yRGlyZWN0b3J5ICovQmxvY2suX18oNywgW2Vycm9yXSk7XG4gICAgY2FzZSBcIkVOT1RESVJcIiA6XG4gICAgICAgIHJldHVybiAvKiBOb3RBRGlyZWN0b3J5ICovQmxvY2suX18oOCwgW2Vycm9yXSk7XG4gICAgY2FzZSBcIkVOT1RFTVBUWVwiIDpcbiAgICAgICAgcmV0dXJuIC8qIERpcmVjdG9yeU5vdEVtcHR5ICovQmxvY2suX18oOSwgW2Vycm9yXSk7XG4gICAgY2FzZSBcIkVOT1RGT1VORFwiIDpcbiAgICAgICAgcmV0dXJuIC8qIEROU0xvb2t1cEZhaWxlZCAqL0Jsb2NrLl9fKDEwLCBbZXJyb3JdKTtcbiAgICBjYXNlIFwiRVBFUk1cIiA6XG4gICAgICAgIHJldHVybiAvKiBOb3RQZXJtaXR0ZWQgKi9CbG9jay5fXygxMSwgW2Vycm9yXSk7XG4gICAgY2FzZSBcIkVQSVBFXCIgOlxuICAgICAgICByZXR1cm4gLyogQnJva2VuUGlwZSAqL0Jsb2NrLl9fKDEyLCBbZXJyb3JdKTtcbiAgICBjYXNlIFwiRVRJTUVET1VUXCIgOlxuICAgICAgICByZXR1cm4gLyogVGltZWRPdXQgKi9CbG9jay5fXygxMywgW2Vycm9yXSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAvKiBVbmtub3duU3lzdGVtRXJyb3IgKi9CbG9jay5fXygxNCwgW2Vycm9yXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX21ha2VVbmtub3duRXJyb3IoZXhjKSB7XG4gIHJldHVybiAvKiBPdGhlclVua25vd25FcnJvciAqL0Jsb2NrLl9fKDE1LCBbZXhjXSk7XG59XG5cbmZ1bmN0aW9uIGZyb21FeGNlcHRpb24oZXhjKSB7XG4gIHZhciBfbWFrZUVycm9yID0gKGZ1bmN0aW9uIChtYWtlU3lzdGVtRXJyb3IsIG1ha2VVbmtub3duRXJyb3IsIGV4Yykge1xuICAgICAgICAgICAgcmV0dXJuIGV4Yy5zeXNjYWxsID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG1ha2VVbmtub3duRXJyb3IoZXhjKVxuICAgICAgICAgICAgICAgIDogbWFrZVN5c3RlbUVycm9yKGV4YylcbiAgICAgICAgfSk7XG4gIHJldHVybiBfbWFrZUVycm9yKF9tYWtlU3lzdGVtRXJyb3IsIF9tYWtlVW5rbm93bkVycm9yLCBleGMpO1xufVxuXG5leHBvcnQge1xuICBTeXN0ZW1FcnJvciAsXG4gIFVua25vd25FcnJvciAsXG4gIF9tYWtlU3lzdGVtRXJyb3IgLFxuICBfbWFrZVVua25vd25FcnJvciAsXG4gIGZyb21FeGNlcHRpb24gLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgRnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIE5vZGVGU19fRXJyb3IgZnJvbSBcIi4vTm9kZUZTX19FcnJvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1Jlc3VsdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfUmVzdWx0LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHJlYWRGaWxlKGVuY29kaW5nT3B0LCBwYXRoKSB7XG4gIHZhciBlbmNvZGluZyA9IGVuY29kaW5nT3B0ICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZ09wdCA6IFwidXRmLThcIjtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBGcy5yZWFkRmlsZShwYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nXG4gICAgICAgICAgICAgICAgICAgIH0sIChmdW5jdGlvbiAoZXJyb3IsIGNvbnRlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocmVzb2x2ZSwgQ3VycnkuXzIoUmVsdWRlX1Jlc3VsdC5tYXBFcnJvciwgTm9kZUZTX19FcnJvci5mcm9tRXhjZXB0aW9uLCBSZWx1ZGVfUmVzdWx0LmZsaXAoUmVsdWRlX1Jlc3VsdC5mcm9tT3B0aW9uKGNvbnRlbnRzLCBlcnJvciA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IENhbWxfb3B0aW9uLnNvbWUoZXJyb3IpKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyICQkRXJyb3I7XG5cbmV4cG9ydCB7XG4gICQkRXJyb3IgLFxuICByZWFkRmlsZSAsXG4gIFxufVxuLyogZnMgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyAkJERhdGUgZnJvbSBcIi4vYmluZGluZ3MvRGF0ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBKc19kaWN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2pzX2RpY3QuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JbnQgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0ludC5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9MaXN0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXkgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0FycmF5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9SZXN1bHQgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX1Jlc3VsdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgTm9kZUZTX19SZWFkRGlyIGZyb20gXCJub2RlLWZzLWJzL3NyYy9Ob2RlRlNfX1JlYWREaXIuYnMuanNcIjtcbmltcG9ydCAqIGFzIE5vZGVGU19fUmVhZEZpbGUgZnJvbSBcIm5vZGUtZnMtYnMvc3JjL05vZGVGU19fUmVhZEZpbGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIE1hcmtkb3duTWV0YWRhdGEgZnJvbSBcIm1hcmtkb3duLW1ldGFkYXRhXCI7XG5cbmZ1bmN0aW9uIHBhcnNlVGl0bGUobWV0YWRhdGEpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfQXJyYXkuYXQoMCwgcGFyYW0pO1xuICAgICAgICAgICAgICB9KSwgSnNfZGljdC5nZXQobWV0YWRhdGEsIFwidGl0bGVcIikpO1xufVxuXG52YXIgcGFydGlhbF9hcmcgPSAvXihbMC05XXs0fSktKFswLTldezJ9KS0oWzAtOV17Mn0pIChbMC05XXsyfSk6KFswLTldezJ9KSQvO1xuXG5mdW5jdGlvbiBtYXRjaERhdGUocGFyYW0pIHtcbiAgcmV0dXJuIENhbWxfb3B0aW9uLm51bGxfdG9fb3B0KHBhcnRpYWxfYXJnLmV4ZWMocGFyYW0pKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUaW1lc3RhbXAobWV0YWRhdGEpIHtcbiAgcmV0dXJuIFJlbHVkZV9SZXN1bHQuZmxhdE1hcCgoZnVuY3Rpb24gKG1hdGNoXykge1xuICAgICAgICAgICAgICAgIHZhciBjYXB0dXJlcyA9IG1hdGNoXy5zbGljZSgxKS5tYXAoKGZ1bmN0aW9uIChjYXB0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCBSZWx1ZGVfSW50LmZyb21TdHJpbmcsIChjYXB0dXJlID09IG51bGwpID8gdW5kZWZpbmVkIDogQ2FtbF9vcHRpb24uc29tZShjYXB0dXJlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGlmIChjYXB0dXJlcy5sZW5ndGggIT09IDUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBNYWxmb3JtZWQgKi8xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gY2FwdHVyZXNbMF07XG4gICAgICAgICAgICAgICAgaWYgKHllYXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIE1hbGZvcm1lZCAqLzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gY2FwdHVyZXNbMV07XG4gICAgICAgICAgICAgICAgaWYgKG1vbnRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBNYWxmb3JtZWQgKi8xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSBjYXB0dXJlc1syXTtcbiAgICAgICAgICAgICAgICBpZiAoZGF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBNYWxmb3JtZWQgKi8xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBob3VyID0gY2FwdHVyZXNbM107XG4gICAgICAgICAgICAgICAgaWYgKGhvdXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIE1hbGZvcm1lZCAqLzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIG1pbnV0ZSA9IGNhcHR1cmVzWzRdO1xuICAgICAgICAgICAgICAgIGlmIChtaW51dGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgWyQkRGF0ZS5tYWtlKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgdW5kZWZpbmVkKV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogTWFsZm9ybWVkICovMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9SZXN1bHQuZmxhdE1hcCgoZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9SZXN1bHQuZnJvbU9wdGlvbigvKiBNYWxmb3JtZWQgKi8xLCBtYXRjaERhdGUoZGF0ZSkpO1xuICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9SZXN1bHQuZnJvbU9wdGlvbigvKiBNaXNzaW5nICovMCwgQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9BcnJheS5hdCgwLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBKc19kaWN0LmdldChtZXRhZGF0YSwgXCJkYXRlXCIpKSkpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUYWdzKG1ldGFkYXRhKSB7XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uLm1hcChSZWx1ZGVfTGlzdC5mcm9tQXJyYXksIFJlbHVkZV9PcHRpb24uZmlsdGVyKChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXkubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgfSkpKEpzX2RpY3QuZ2V0KG1ldGFkYXRhLCBcInRhZ3NcIikpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VFbnRyeShtYXJrZG93bikge1xuICB2YXIgbWF0Y2ggPSBNYXJrZG93bk1ldGFkYXRhLnBhcnNlTWV0YWRhdGEobWFya2Rvd24pO1xuICB2YXIgbWV0YWRhdGEgPSBtYXRjaFswXTtcbiAgdmFyIG1hdGNoJDEgPSBwYXJzZVRpdGxlKG1ldGFkYXRhKTtcbiAgdmFyIG1hdGNoJDIgPSBwYXJzZVRpbWVzdGFtcChtZXRhZGF0YSk7XG4gIHZhciBtYXRjaCQzID0gcGFyc2VUYWdzKG1ldGFkYXRhKTtcbiAgaWYgKG1hdGNoJDEgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChtYXRjaCQyLnRhZykge1xuICAgICAgaWYgKG1hdGNoJDMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogVGltZXN0YW1wRXJyb3IgKi9bbWF0Y2gkMlswXV1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBCYWRNZXRhZGF0YSAqLzJdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1hdGNoJDMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW3tcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBtYXRjaCQxLFxuICAgICAgICAgICAgICAgICAgZGF0ZTogbWF0Y2gkMlswXSxcbiAgICAgICAgICAgICAgICAgIHRhZ3M6IG1hdGNoJDMsXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBtYXRjaFsxXVxuICAgICAgICAgICAgICAgIH1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIFRhZ3NNaXNzaW5nICovMV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChtYXRjaCQyLnRhZyB8fCBtYXRjaCQzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogQmFkTWV0YWRhdGEgKi8yXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIFRpdGxlTWlzc2luZyAqLzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWFkQW5kUGFyc2VFbnRyaWVzRGlyZWN0b3J5KGRpcmVjdG9yeSkge1xuICByZXR1cm4gUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJpZXMuZmlsdGVyKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW50cnkubmFtZS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKFwiLm1kXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWVudHJ5LmlzRGlyZWN0b3J5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IHBhcmFtLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXRoID0gUGF0aC5qb2luKGRpcmVjdG9yeSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0lPLmZyb21SZXN1bHQoQ3VycnkuXzIoUmVsdWRlX1Jlc3VsdC5tYXBFcnJvciwgKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBQYXJzZUVycm9yICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBuYW1lICovbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXJyb3IgKi9lcnJvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBwYXJzZUVudHJ5KHRleHQpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfSU8ubWFwRXJyb3IsIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlYWRFbnRyeUVycm9yICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbmFtZSAqL25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlcnJvciAqL2Vycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vZGVGU19fUmVhZEZpbGUucmVhZEZpbGUodW5kZWZpbmVkLCBwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWFkaW5nIGVudHJ5IGZyb20gXFxcIlwiICsgKFN0cmluZyhwYXRoKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkucmVkdWNlKChmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy5tYXAoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBhY2N1bXVsYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbLyogW10gKi8wXSkpO1xuICAgICAgICAgICAgICB9KSwgQ3VycnkuXzIoUmVsdWRlX0lPLm1hcEVycm9yLCAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBSZWFkRGlyZWN0b3J5RXJyb3IgKi9CbG9jay5fXygwLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9kZUZTX19SZWFkRGlyLnJlYWREaXIodW5kZWZpbmVkLCBkaXJlY3RvcnkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlYWRpbmcgZnJvbSBlbnRyaWVzIGRpcmVjdG9yeSBcXFwiXCIgKyAoU3RyaW5nKGRpcmVjdG9yeSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKSkpO1xufVxuXG5mdW5jdGlvbiByZWFkQW5kUGFyc2VBYm91dFBhdGgocGF0aCkge1xuICByZXR1cm4gUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOb2RlRlNfX1JlYWRGaWxlLnJlYWRGaWxlKHVuZGVmaW5lZCwgcGF0aCk7XG4gICAgICAgICAgICAgIH0pLCAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWFkaW5nIGFib3V0IHRleHQgZnJvbSBcXFwiXCIgKyAoU3RyaW5nKHBhdGgpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICB9KV0pKTtcbn1cblxuZnVuY3Rpb24gcmVhZEFuZFBhcnNlQWxsKGFib3V0UGF0aCwgZW50cmllc0RpcmVjdG9yeSkge1xuICByZXR1cm4gUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy5iaW1hcCgoZnVuY3Rpb24gKGFib3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm91dDogYWJvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXM6IGVudHJpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBBYm91dEZpbGVFcnJvciAqL0Jsb2NrLl9fKDAsIFtlcnJvcl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCByZWFkQW5kUGFyc2VBYm91dFBhdGgoYWJvdXRQYXRoKSk7XG4gICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfSU8ubWFwRXJyb3IsIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVudHJpZXNEaXJlY3RvcnlFcnJvciAqL0Jsb2NrLl9fKDEsIFtlcnJvcl0pO1xuICAgICAgICAgICAgICAgICAgfSksIHJlYWRBbmRQYXJzZUVudHJpZXNEaXJlY3RvcnkoZW50cmllc0RpcmVjdG9yeSkpKTtcbn1cblxuZXhwb3J0IHtcbiAgcGFyc2VUaXRsZSAsXG4gIG1hdGNoRGF0ZSAsXG4gIHBhcnNlVGltZXN0YW1wICxcbiAgcGFyc2VUYWdzICxcbiAgcGFyc2VFbnRyeSAsXG4gIHJlYWRBbmRQYXJzZUVudHJpZXNEaXJlY3RvcnkgLFxuICByZWFkQW5kUGFyc2VBYm91dFBhdGggLFxuICByZWFkQW5kUGFyc2VBbGwgLFxuICBcbn1cbi8qIHBhdGggTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBGcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgTm9kZUZTX19FcnJvciBmcm9tIFwiLi9Ob2RlRlNfX0Vycm9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfUmVzdWx0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9SZXN1bHQuYnMuanNcIjtcblxudmFyIERpcmVjdG9yeUVudHJ5ID0geyB9O1xuXG5mdW5jdGlvbiByZWFkRGlyKGVuY29kaW5nT3B0LCBwYXRoKSB7XG4gIHZhciBlbmNvZGluZyA9IGVuY29kaW5nT3B0ICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZ09wdCA6IFwidXRmLThcIjtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBGcy5yZWFkZGlyKHBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICB3aXRoRmlsZVR5cGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICB9LCAoZnVuY3Rpb24gKGVycm9yLCBmaWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHJlc29sdmUsIEN1cnJ5Ll8yKFJlbHVkZV9SZXN1bHQubWFwRXJyb3IsIE5vZGVGU19fRXJyb3IuZnJvbUV4Y2VwdGlvbiwgUmVsdWRlX1Jlc3VsdC5mbGlwKFJlbHVkZV9SZXN1bHQuZnJvbU9wdGlvbihmaWxlcywgZXJyb3IgPT09IG51bGwgPyB1bmRlZmluZWQgOiBDYW1sX29wdGlvbi5zb21lKGVycm9yKSkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSk7XG59XG5cbnZhciAkJEVycm9yO1xuXG5leHBvcnQge1xuICAkJEVycm9yICxcbiAgRGlyZWN0b3J5RW50cnkgLFxuICByZWFkRGlyICxcbiAgXG59XG4vKiBmcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cblxudmFyICQkUmVxdWVzdCA9IHsgfTtcblxuZnVuY3Rpb24gc2V0U3RhdHVzQ29kZShzdGF0dXMsIHJlc3BvbnNlKSB7XG4gIHJlc3BvbnNlLnN0YXR1c0NvZGUgPSBzdGF0dXM7XG4gIFxufVxuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZSh2YWx1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcGFyYW0uc2V0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIHZhbHVlKTtcbiAgICAgIFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRDb250ZW50TGVuZ3RoKGxlbmd0aCkge1xuICB2YXIgcGFydGlhbF9hcmcgPSBTdHJpbmcobGVuZ3RoKTtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHBhcmFtLnNldEhlYWRlcihcIkNvbnRlbnQtTGVuZ3RoXCIsIHBhcnRpYWxfYXJnKTtcbiAgICAgIFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRMYXN0TW9kaWZpZWQoZGF0ZSkge1xuICB2YXIgcGFydGlhbF9hcmcgPSBkYXRlLnRvVVRDU3RyaW5nKCk7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBwYXJhbS5zZXRIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIsIHBhcnRpYWxfYXJnKTtcbiAgICAgIFxuICAgIH0pO1xufVxuXG52YXIgJCRSZXNwb25zZSA9IHtcbiAgc2V0U3RhdHVzQ29kZTogc2V0U3RhdHVzQ29kZSxcbiAgc2V0Q29udGVudFR5cGU6IHNldENvbnRlbnRUeXBlLFxuICBzZXRDb250ZW50TGVuZ3RoOiBzZXRDb250ZW50TGVuZ3RoLFxuICBzZXRMYXN0TW9kaWZpZWQ6IHNldExhc3RNb2RpZmllZFxufTtcblxudmFyIFNlcnZlciA9IHsgfTtcblxuZXhwb3J0IHtcbiAgJCRSZXF1ZXN0ICxcbiAgJCRSZXNwb25zZSAsXG4gIFNlcnZlciAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuXG52YXIgbm90Rm91bmQgPSAvKiBQYWdlICovQmxvY2suX18oMCwgW1xuICAgIC8qIGRhdGEgKi91bmRlZmluZWQsXG4gICAgLyogc3RhdHVzICovNDAwXG4gIF0pO1xuXG5leHBvcnQge1xuICBub3RGb3VuZCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBMaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2xpc3QuanNcIjtcbmltcG9ydCAqIGFzICQkU3RyaW5nIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3N0cmluZy5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuXG5mdW5jdGlvbiB0b1N0cmluZyhwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC02MDEyMDQ3MzIpIHtcbiAgICBpZiAocGFyYW0gPj0gNjUzMTkzOTYxKSB7XG4gICAgICByZXR1cm4gXCJ1bnNldFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJpbml0aWFsXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImluaGVyaXRcIjtcbiAgfVxufVxuXG52YXIgQ2FzY2FkaW5nID0ge1xuICBpbml0aWFsOiAvKiBpbml0aWFsICovLTg3ODc2Nzk5NixcbiAgaW5oZXJpdF86IC8qIGluaGVyaXRfICovLTYwMTIwNDczMixcbiAgdW5zZXQ6IC8qIHVuc2V0ICovNjUzMTkzOTYxLFxuICB0b1N0cmluZzogdG9TdHJpbmdcbn07XG5cbmZ1bmN0aW9uIHMoeCkge1xuICByZXR1cm4gLyogYHMgKi9bXG4gICAgICAgICAgMTE1LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbXMoeCkge1xuICByZXR1cm4gLyogYG1zICovW1xuICAgICAgICAgIDI0NDIyLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckMShwYXJhbSkge1xuICBpZiAocGFyYW1bMF0gPj0gMjQ0MjIpIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwibXNcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwic1wiO1xuICB9XG59XG5cbnZhciBUaW1lID0ge1xuICBzOiBzLFxuICBtczogbXMsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxXG59O1xuXG5mdW5jdGlvbiBwY3QoeCkge1xuICByZXR1cm4gLyogYHBlcmNlbnQgKi9bXG4gICAgICAgICAgLTExOTg4NzE2MyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDIocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiVcIjtcbn1cblxudmFyIFBlcmNlbnRhZ2UgPSB7XG4gIHBjdDogcGN0LFxuICB0b1N0cmluZzogdG9TdHJpbmckMlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMyhwYXJhbSkge1xuICByZXR1cm4gXCJ1cmwoXCIgKyAocGFyYW1bMV0gKyBcIilcIik7XG59XG5cbnZhciBVcmwgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQzXG59O1xuXG5mdW5jdGlvbiBjaCh4KSB7XG4gIHJldHVybiAvKiBgY2ggKi9bXG4gICAgICAgICAgMjIxODEsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBlbSh4KSB7XG4gIHJldHVybiAvKiBgZW0gKi9bXG4gICAgICAgICAgMjI2MzIsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBleCh4KSB7XG4gIHJldHVybiAvKiBgZXggKi9bXG4gICAgICAgICAgMjI2NDMsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByZW0oeCkge1xuICByZXR1cm4gLyogYHJlbSAqL1tcbiAgICAgICAgICA1NjkxNzM4LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdmgoeCkge1xuICByZXR1cm4gLyogYHZoICovW1xuICAgICAgICAgIDI2NDE4LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdncoeCkge1xuICByZXR1cm4gLyogYHZ3ICovW1xuICAgICAgICAgIDI2NDMzLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdm1pbih4KSB7XG4gIHJldHVybiAvKiBgdm1pbiAqL1tcbiAgICAgICAgICAtODMzNDcwNzU2LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdm1heCh4KSB7XG4gIHJldHVybiAvKiBgdm1heCAqL1tcbiAgICAgICAgICAtODMzNDcyNTMwLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcHgoeCkge1xuICByZXR1cm4gLyogYHB4ICovW1xuICAgICAgICAgIDI1MDk2LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcHhGbG9hdCh4KSB7XG4gIHJldHVybiAvKiBgcHhGbG9hdCAqL1tcbiAgICAgICAgICAtMTA0MDQ4NDc0OCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNtKHgpIHtcbiAgcmV0dXJuIC8qIGBjbSAqL1tcbiAgICAgICAgICAyMjE4NixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG1tKHgpIHtcbiAgcmV0dXJuIC8qIGBtbSAqL1tcbiAgICAgICAgICAyNDQxNixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGluY2goeCkge1xuICByZXR1cm4gLyogYGluY2ggKi9bXG4gICAgICAgICAgLTk3NzU4Njc0MixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHBjKHgpIHtcbiAgcmV0dXJuIC8qIGBwYyAqL1tcbiAgICAgICAgICAyNTA3NSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHB0KHgpIHtcbiAgcmV0dXJuIC8qIGBwdCAqL1tcbiAgICAgICAgICAyNTA5MixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDQocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcIjBcIjtcbiAgfVxuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCA+PSAyMjYzMikge1xuICAgIGlmICh2YXJpYW50ID49IDI1MDkyKSB7XG4gICAgICBpZiAodmFyaWFudCAhPT0gMjUwOTYpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjY0MzMpIHtcbiAgICAgICAgICBpZiAodmFyaWFudCA+PSA1NjkxNzM4KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicmVtXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2d1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDI2NDE4KSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZoXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInB0XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNDQxNikge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjUwNzUpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInBjXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwibW1cIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjI2NDMpIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJleFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZW1cIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MDc1Nikge1xuICAgIGlmICh2YXJpYW50ID49IDIyMTgxKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyMjE4Nikge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiY21cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJjaFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtMTE5ODg3MTYzKSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidm1pblwiO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA+PSAtOTc3NTg2NzQyKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MjUzMCkge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZtYXhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImluXCI7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID49IC0xMDQwNDg0NzQ4KSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInB4XCI7XG4gIH1cbiAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gIGlmIChtYXRjaFswXSA+PSA1NzQ1MDI0KSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArICh0b1N0cmluZyQ0KG1hdGNoWzFdKSArIChcIiAtIFwiICsgKHRvU3RyaW5nJDQobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArICh0b1N0cmluZyQ0KG1hdGNoWzFdKSArIChcIiArIFwiICsgKHRvU3RyaW5nJDQobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gIH1cbn1cblxudmFyIExlbmd0aCA9IHtcbiAgY2g6IGNoLFxuICBlbTogZW0sXG4gIGV4OiBleCxcbiAgcmVtOiByZW0sXG4gIHZoOiB2aCxcbiAgdnc6IHZ3LFxuICB2bWluOiB2bWluLFxuICB2bWF4OiB2bWF4LFxuICBweDogcHgsXG4gIHB4RmxvYXQ6IHB4RmxvYXQsXG4gIGNtOiBjbSxcbiAgbW06IG1tLFxuICBpbmNoOiBpbmNoLFxuICBwYzogcGMsXG4gIHB0OiBwdCxcbiAgemVybzogLyogemVybyAqLy03ODk1MDgzMTIsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0XG59O1xuXG5mdW5jdGlvbiBkZWcoeCkge1xuICByZXR1cm4gLyogYGRlZyAqL1tcbiAgICAgICAgICA0OTk1NTI2LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmFkKHgpIHtcbiAgcmV0dXJuIC8qIGByYWQgKi9bXG4gICAgICAgICAgNTY5MDgzNyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGdyYWQoeCkge1xuICByZXR1cm4gLyogYGdyYWQgKi9bXG4gICAgICAgICAgLTk5OTU2NzQxMCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHR1cm4oeCkge1xuICByZXR1cm4gLyogYHR1cm4gKi9bXG4gICAgICAgICAgLTg1NTI1MDA1MSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDUocGFyYW0pIHtcbiAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgaWYgKHZhcmlhbnQgPj0gNDk5NTUyNikge1xuICAgIGlmICh2YXJpYW50ID49IDU2OTA4MzcpIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJyYWRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImRlZ1wiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YXJpYW50ID49IC04NTUyNTAwNTEpIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidHVyblwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJncmFkXCI7XG4gIH1cbn1cblxudmFyIEFuZ2xlID0ge1xuICBkZWc6IGRlZyxcbiAgcmFkOiByYWQsXG4gIGdyYWQ6IGdyYWQsXG4gIHR1cm46IHR1cm4sXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ2KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA1Njk1MDgyKSB7XG4gICAgcmV0dXJuIFwicnRsXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibHRyXCI7XG4gIH1cbn1cblxudmFyIERpcmVjdGlvbiA9IHtcbiAgbHRyOiAvKiBsdHIgKi81Mzk2NzE0LFxuICBydGw6IC8qIHJ0bCAqLzU2OTUwODIsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gMTA2MTUxNTYpIHtcbiAgICBpZiAocGFyYW0gPj0gMTg4MjYzNzIxKSB7XG4gICAgICBpZiAocGFyYW0gPj0gOTAzMTM0NDEyKSB7XG4gICAgICAgIHJldHVybiBcInJlbGF0aXZlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJzdGlja3lcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDEwMDM5MjExMCkge1xuICAgICAgcmV0dXJuIFwic3RhdGljXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImFic29sdXRlXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImZpeGVkXCI7XG4gIH1cbn1cblxudmFyIFBvc2l0aW9uID0ge1xuICBhYnNvbHV0ZTogLyogYWJzb2x1dGUgKi8tMTAxMzU5MjQ1NyxcbiAgcmVsYXRpdmU6IC8qIHJlbGF0aXZlICovOTAzMTM0NDEyLFxuICAkJHN0YXRpYzogLyogc3RhdGljICovMTAwMzkyMTEwLFxuICBmaXhlZDogLyogZml4ZWQgKi8xMDYxNTE1NixcbiAgc3RpY2t5OiAvKiBzdGlja3kgKi8xODgyNjM3MjEsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtMzY3Njc0MjUwKSB7XG4gICAgaWYgKHBhcmFtID49IDQyMzYxMDk2OSkge1xuICAgICAgaWYgKHBhcmFtID49IDg4ODk2MDMzMykge1xuICAgICAgICByZXR1cm4gXCJibG9ja1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiaW5saW5lXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAzNjUxNjU3OTYpIHtcbiAgICAgIHJldHVybiBcImhvcml6b250YWxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwidmVydGljYWxcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTkyMjA4NjcyOCkge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJib3RoXCI7XG4gIH1cbn1cblxudmFyIFJlc2l6ZSA9IHtcbiAgbm9uZTogLyogbm9uZSAqLy05MjIwODY3MjgsXG4gIGJvdGg6IC8qIGJvdGggKi8tMTA1NTE2MDE5MSxcbiAgaG9yaXpvbnRhbDogLyogaG9yaXpvbnRhbCAqLzM2NTE2NTc5NixcbiAgdmVydGljYWw6IC8qIHZlcnRpY2FsICovLTM2NzY3NDI1MCxcbiAgYmxvY2s6IC8qIGJsb2NrICovODg4OTYwMzMzLFxuICBpbmxpbmU6IC8qIGlubGluZSAqLzQyMzYxMDk2OSxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDhcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDkocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDgxMjIxNjg3MSkge1xuICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInNtYWxsQ2Fwc1wiO1xuICB9XG59XG5cbnZhciBGb250VmFyaWFudCA9IHtcbiAgbm9ybWFsOiAvKiBub3JtYWwgKi84MTIyMTY4NzEsXG4gIHNtYWxsQ2FwczogLyogc21hbGxDYXBzICovLTM4NjY4NDc5MixcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDlcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDEwKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gNzM0NzkyODgxKSB7XG4gICAgaWYgKHBhcmFtID49IDgxMjIxNjg3MSkge1xuICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIml0YWxpY1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJvYmxpcXVlXCI7XG4gIH1cbn1cblxudmFyIEZvbnRTdHlsZSA9IHtcbiAgbm9ybWFsOiAvKiBub3JtYWwgKi84MTIyMTY4NzEsXG4gIGl0YWxpYzogLyogaXRhbGljICovMTA3MjI4OTEyLFxuICBvYmxpcXVlOiAvKiBvYmxpcXVlICovNzM0NzkyODgxLFxuICB0b1N0cmluZzogdG9TdHJpbmckMTBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDExKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtNTUwNTc3NzIxKSB7XG4gICAgaWYgKHBhcmFtID49IDYwNTU3MDQ1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gNDI3MjY1MzM3KSB7XG4gICAgICAgIHJldHVybiBcImNvbnRlbnRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm1heC1jb250ZW50XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMTk1ODA1MzM2KSB7XG4gICAgICByZXR1cm4gXCJmaXQtY29udGVudFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJtaW4tY29udGVudFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMTAxMTEwMjA3Nykge1xuICAgIHJldHVybiBcImZpbGxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJhdXRvXCI7XG4gIH1cbn1cblxudmFyIEZsZXhCYXNpcyA9IHtcbiAgZmlsbDogLyogZmlsbCAqLy0xMDExMTAyMDc3LFxuICBjb250ZW50OiAvKiBjb250ZW50ICovNDI3MjY1MzM3LFxuICBtYXhDb250ZW50OiAvKiBtYXhDb250ZW50ICovNjA1NTcwNDUsXG4gIG1pbkNvbnRlbnQ6IC8qIG1pbkNvbnRlbnQgKi8tNTUwNTc3NzIxLFxuICBmaXRDb250ZW50OiAvKiBmaXRDb250ZW50ICovLTE5NTgwNTMzNixcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDExXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxMihwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTg2MjU4NDk4Mikge1xuICAgIGlmIChwYXJhbSA+PSA1ODk1OTI2OTApIHtcbiAgICAgIHJldHVybiBcInZpc2libGVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiaGlkZGVuXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC05NDk2OTI0MDMpIHtcbiAgICByZXR1cm4gXCJzY3JvbGxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJhdXRvXCI7XG4gIH1cbn1cblxudmFyIE92ZXJmbG93ID0ge1xuICBoaWRkZW46IC8qIGhpZGRlbiAqLy04NjI1ODQ5ODIsXG4gIHZpc2libGU6IC8qIHZpc2libGUgKi81ODk1OTI2OTAsXG4gIHNjcm9sbDogLyogc2Nyb2xsICovLTk0OTY5MjQwMyxcbiAgYXV0bzogLyogYXV0byAqLy0xMDY1OTUxMzc3LFxuICB0b1N0cmluZzogdG9TdHJpbmckMTJcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDEzKHBhcmFtKSB7XG4gIHJldHVybiBcImF1dG9cIjtcbn1cblxudmFyIE1hcmdpbiA9IHtcbiAgYXV0bzogLyogYXV0byAqLy0xMDY1OTUxMzc3LFxuICB0b1N0cmluZzogdG9TdHJpbmckMTNcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDE0KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtMTU1MjUwODMpIHtcbiAgICBpZiAocGFyYW0gPj0gNTY5Mzk3OCkge1xuICAgICAgcmV0dXJuIFwicm93XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInJvdyBkZW5zZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMjI3NjA1MjcxKSB7XG4gICAgcmV0dXJuIFwiY29sdW1uIGRlbnNlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY29sdW1uXCI7XG4gIH1cbn1cblxudmFyIEdyaWRBdXRvRmxvdyA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDE0XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxNShwYXJhbSkge1xuICByZXR1cm4gXCJub3JtYWxcIjtcbn1cblxudmFyIEdyaWRDb2x1bW5HYXAgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxNVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMTYocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDc5NjkyMTU1KSB7XG4gICAgaWYgKHBhcmFtID49IDQ3NjY2OTgxNikge1xuICAgICAgaWYgKHBhcmFtID49IDUxNjQwNjI0OCkge1xuICAgICAgICByZXR1cm4gXCJ0ZXh0LXRvcFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidGV4dC1ib3R0b21cIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDI4NzgyNTAyOSkge1xuICAgICAgcmV0dXJuIFwiYmFzZWxpbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwic3VwZXJcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gNTc0NTAyNCkge1xuICAgIGlmIChwYXJhbSA+PSA1NzkzNDI5KSB7XG4gICAgICByZXR1cm4gXCJ0b3BcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwic3ViXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC00NDUwNjEzOTcpIHtcbiAgICByZXR1cm4gXCJib3R0b21cIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJtaWRkbGVcIjtcbiAgfVxufVxuXG52YXIgVmVydGljYWxBbGlnbiA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDE2XG59O1xuXG5mdW5jdGlvbiBzdGVwcyhpLCBkaXIpIHtcbiAgcmV0dXJuIC8qIGBzdGVwcyAqL1tcbiAgICAgICAgICA2ODA1ODAyMyxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBkaXJcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGN1YmljQmV6aWVyKGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIC8qIGBjdWJpY0JlemllciAqL1tcbiAgICAgICAgICAtNTU0Nzg1NTI3LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGIsXG4gICAgICAgICAgICBjLFxuICAgICAgICAgICAgZFxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckMTcocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChwYXJhbSA+PSAtMTkzNTI1Mzg2KSB7XG4gICAgICBpZiAocGFyYW0gPj0gMTM4MDI3ODkxKSB7XG4gICAgICAgIGlmIChwYXJhbSA+PSA3MTU3NDg2NzIpIHtcbiAgICAgICAgICByZXR1cm4gXCJlYXNlLW91dFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImVhc2UtaW5cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSAyMDkzMzYxNSkge1xuICAgICAgICByZXR1cm4gXCJzdGVwLWVuZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic3RlcC1zdGFydFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gIT09IC05NjA2NTE1NTcpIHtcbiAgICAgIGlmIChwYXJhbSA+PSAtMzI1MDM3NTk1KSB7XG4gICAgICAgIHJldHVybiBcImxpbmVhclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZWFzZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJlYXNlLWluLW91dFwiO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1bMF0gPj0gNjgwNTgwMjMpIHtcbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICB2YXIgaSA9IG1hdGNoWzBdO1xuICAgIGlmIChtYXRjaFsxXSA+PSA2Nzg1OTU1NCkge1xuICAgICAgcmV0dXJuIFwic3RlcHMoXCIgKyAoaS50b1N0cmluZygpICsgXCIsIHN0YXJ0KVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwic3RlcHMoXCIgKyAoaS50b1N0cmluZygpICsgXCIsIGVuZClcIik7XG4gICAgfVxuICB9XG4gIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gIHJldHVybiBcImN1YmljLWJlemllcihcIiArIChtYXRjaCQxWzBdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDFbMV0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkMVsyXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQxWzNdLnRvU3RyaW5nKCkgKyBcIilcIikpKSkpKSk7XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDE4KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gNjUyMzI4MzM4KSB7XG4gICAgICByZXR1cm4gXCJhdXRvLWZpbGxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0by1maXRcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxudmFyIFJlcGVhdFZhbHVlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMThcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDE5KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtNDg0MTk3NzMyKSB7XG4gICAgaWYgKHBhcmFtID49IDcwMDM0NTY2MCkge1xuICAgICAgaWYgKHBhcmFtID49IDc4NzI3OTQxOSkge1xuICAgICAgICBpZiAocGFyYW0gPj0gODI2OTIwMjU4KSB7XG4gICAgICAgICAgcmV0dXJuIFwidXBwZXItbGF0aW5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJ1cHBlci1yb21hblwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID49IDczOTk4NjQ5OSkge1xuICAgICAgICByZXR1cm4gXCJsb3dlci1sYXRpblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibG93ZXItcm9tYW5cIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC00MjIzMzMyOTUpIHtcbiAgICAgIHJldHVybiBcImRlY2ltYWxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwidXBwZXItYWxwaGFcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTcwMzc2MTkwNCkge1xuICAgIGlmIChwYXJhbSA+PSAtNjU1MjI4NzcxKSB7XG4gICAgICBpZiAocGFyYW0gPj0gLTU3MTEzMTQ5MSkge1xuICAgICAgICByZXR1cm4gXCJsb3dlci1hbHBoYVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic3F1YXJlXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNjk5Njg2NjU3KSB7XG4gICAgICByZXR1cm4gXCJsb3dlci1ncmVla1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjaXJjbGVcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTkyMjA4NjcyOCkge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJkaXNjXCI7XG4gIH1cbn1cblxudmFyIExpc3RTdHlsZVR5cGUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxOVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMjAocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDUwMTIzNTcwOCkge1xuICAgIHJldHVybiBcImluc2lkZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm91dHNpZGVcIjtcbiAgfVxufVxuXG52YXIgTGlzdFN0eWxlUG9zaXRpb24gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyMFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMjEocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDQ3MjA5NTczOCkge1xuICAgIGlmIChwYXJhbSAhPT0gNTY4NDAzNTA1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gODUyMTc1NjMzKSB7XG4gICAgICAgIGlmIChwYXJhbSA+PSAxMDQyMjgzNzQxKSB7XG4gICAgICAgICAgcmV0dXJuIFwiaW5zZXRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJkb3VibGVcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSA4NDE5Nzk2MjYpIHtcbiAgICAgICAgcmV0dXJuIFwiZG90dGVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJncm92ZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJkYXNoZWRcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gIT09IC04NjI1ODQ5ODIpIHtcbiAgICBpZiAocGFyYW0gPj0gMTI5NTY3MTUpIHtcbiAgICAgIGlmIChwYXJhbSA+PSAyMDk5MzAxOTYpIHtcbiAgICAgICAgcmV0dXJuIFwib3V0c2V0XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJzb2xpZFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTM3OTQ2ODc1Nykge1xuICAgICAgcmV0dXJuIFwicmlkZ2VcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJoaWRkZW5cIjtcbiAgfVxufVxuXG52YXIgT3V0bGluZVN0eWxlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMjFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDIyKHgpIHtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHggPj0gLTgxODAxMTYzKSB7XG4gICAgICBpZiAoeCA+PSAtMjA0MjU2MTEpIHtcbiAgICAgICAgaWYgKHggPj0gODEyMjE2ODcxKSB7XG4gICAgICAgICAgaWYgKHggPj0gODg4MjY0MTI3KSB7XG4gICAgICAgICAgICByZXR1cm4gXCI5MDBcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiNDAwXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHggPj0gNDM0MzI2MjExKSB7XG4gICAgICAgICAgcmV0dXJuIFwibGlnaHRlclwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIjUwMFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHggPj0gLTIxMTYwOTIyKSB7XG4gICAgICAgIHJldHVybiBcIjIwMFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiODAwXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4ICE9PSAtODU1ODk4NTM1KSB7XG4gICAgICBpZiAoeCA+PSAtNTM0NTc1ODIyKSB7XG4gICAgICAgIGlmICh4ID49IC0xODQ3NzQ0NDIpIHtcbiAgICAgICAgICByZXR1cm4gXCIzMDBcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJib2xkZXJcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh4ID49IC04MTI3MDk2MTMpIHtcbiAgICAgICAgcmV0dXJuIFwiNjAwXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCI3MDBcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiMTAwXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB4WzFdLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxudmFyIEZvbnRXZWlnaHQgPSB7XG4gIHRoaW46IC8qIHRoaW4gKi8tODU1ODk4NTM1LFxuICBleHRyYUxpZ2h0OiAvKiBleHRyYUxpZ2h0ICovLTIxMTYwOTIyLFxuICBsaWdodDogLyogbGlnaHQgKi8tMTg0Nzc0NDQyLFxuICBtZWRpdW06IC8qIG1lZGl1bSAqLy0yMDQyNTYxMSxcbiAgc2VtaUJvbGQ6IC8qIHNlbWlCb2xkICovLTgxMjcwOTYxMyxcbiAgYm9sZDogLyogYm9sZCAqLy0xMDU1MTYxOTc5LFxuICBleHRyYUJvbGQ6IC8qIGV4dHJhQm9sZCAqLy04MTgwMTE2MyxcbiAgbGlnaHRlcjogLyogbGlnaHRlciAqLzQzNDMyNjIxMSxcbiAgYm9sZGVyOiAvKiBib2xkZXIgKi8tNTM0NTc1ODIyLFxuICB0b1N0cmluZzogdG9TdHJpbmckMjJcbn07XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZSh4LCB5KSB7XG4gIHJldHVybiAvKiBgdHJhbnNsYXRlICovW1xuICAgICAgICAgIC05MTQzNjg2OTAsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlM2QoeCwgeSwgeikge1xuICByZXR1cm4gLyogYHRyYW5zbGF0ZTNkICovW1xuICAgICAgICAgIDE3ODE4OTIxNSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgelxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWCh4KSB7XG4gIHJldHVybiAvKiBgdHJhbnNsYXRlWCAqL1tcbiAgICAgICAgICAxMDY3Mjg3NzgsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIC8qIGB0cmFuc2xhdGVZICovW1xuICAgICAgICAgIDEwNjcyODc3OSxcbiAgICAgICAgICB5XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVooeikge1xuICByZXR1cm4gLyogYHRyYW5zbGF0ZVogKi9bXG4gICAgICAgICAgMTA2NzI4NzgwLFxuICAgICAgICAgIHpcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGUoeCwgeSkge1xuICByZXR1cm4gLyogYHNjYWxlICovW1xuICAgICAgICAgIC0xMjA2NjQ0MzgsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGUzZCh4LCB5LCB6KSB7XG4gIHJldHVybiAvKiBgc2NhbGUzZCAqL1tcbiAgICAgICAgICAtNDUyNTEzMzE3LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICB6XG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzY2FsZVgoeCkge1xuICByZXR1cm4gLyogYHNjYWxlWCAqL1tcbiAgICAgICAgICAxMDA5MTE3ODM4LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGVZKHgpIHtcbiAgcmV0dXJuIC8qIGBzY2FsZVkgKi9bXG4gICAgICAgICAgMTAwOTExNzgzOSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNjYWxlWih4KSB7XG4gIHJldHVybiAvKiBgc2NhbGVaICovW1xuICAgICAgICAgIDEwMDkxMTc4NDAsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGUoYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZSAqL1tcbiAgICAgICAgICAtODg3MDc3Mjg1LFxuICAgICAgICAgIGFcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcm90YXRlM2QoeCwgeSwgeiwgYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZTNkICovW1xuICAgICAgICAgIDE0MjgwMjkyNCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgeixcbiAgICAgICAgICAgIGFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVgoYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZVggKi9bXG4gICAgICAgICAgLTI0OTczODg1MSxcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVkoYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZVkgKi9bXG4gICAgICAgICAgLTI0OTczODg1MCxcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVooYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZVogKi9bXG4gICAgICAgICAgLTI0OTczODg0OSxcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNrZXcoYSwgYSRwcmltZSkge1xuICByZXR1cm4gLyogYHNrZXcgKi9bXG4gICAgICAgICAgLTg2NjgzOTc5OCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBhJHByaW1lXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBza2V3WChhKSB7XG4gIHJldHVybiAvKiBgc2tld1ggKi9bXG4gICAgICAgICAgLTMxNzQ2NTQ2LFxuICAgICAgICAgIGFcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2tld1koYSkge1xuICByZXR1cm4gLyogYHNrZXdZICovW1xuICAgICAgICAgIC0zMTc0NjU0NSxcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDIzKHBhcmFtKSB7XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IC0xMjA2NjQ0MzgpIHtcbiAgICBpZiAodmFyaWFudCA+PSAxMDY3Mjg3NzgpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDE3ODE4OTIxNSkge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAxMDA5MTE3ODM4KSB7XG4gICAgICAgICAgc3dpdGNoICh2YXJpYW50IC0gMTAwOTExNzgzOCB8IDApIHtcbiAgICAgICAgICAgIGNhc2UgMCA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2NhbGVYKFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIilcIik7XG4gICAgICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInNjYWxlWShcIiArIChwYXJhbVsxXS50b1N0cmluZygpICsgXCIpXCIpO1xuICAgICAgICAgICAgY2FzZSAyIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzY2FsZVooXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiKVwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICAgICAgICB2YXIgeCA9IG1hdGNoWzBdO1xuICAgICAgICAgIHZhciB5ID0gbWF0Y2hbMV07XG4gICAgICAgICAgdmFyIHogPSBtYXRjaFsyXTtcbiAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGUzZChcIiArICh0b1N0cmluZyQ0KHgpICsgKFwiLCBcIiArICh0b1N0cmluZyQ0KHkpICsgKFwiLCBcIiArICh0b1N0cmluZyQ0KHopICsgXCIpXCIpKSkpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMTQyODAyOTI0KSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBwYXJhbVsxXTtcbiAgICAgICAgICByZXR1cm4gXCJyb3RhdGUzZChcIiArIChtYXRjaCQxWzBdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDFbMV0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkMVsyXS50b1N0cmluZygpICsgKFwiLCBcIiArICh0b1N0cmluZyQ1KG1hdGNoJDFbM10pICsgXCIpXCIpKSkpKSkpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodmFyaWFudCAtIDEwNjcyODc3OCB8IDApIHtcbiAgICAgICAgICBjYXNlIDAgOlxuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKFwiICsgKHRvU3RyaW5nJDQocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZVkoXCIgKyAodG9TdHJpbmckNChwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgICAgICAgY2FzZSAyIDpcbiAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlWihcIiArICh0b1N0cmluZyQ0KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFyaWFudCA9PT0gLTMxNzQ2NTQ2KSB7XG4gICAgICAgIHJldHVybiBcInNrZXdYKFwiICsgKHRvU3RyaW5nJDUocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHZhcmlhbnQgPj0gLTMxNzQ2NTQ1KSB7XG4gICAgICAgIHJldHVybiBcInNrZXdZKFwiICsgKHRvU3RyaW5nJDUocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDIgPSBwYXJhbVsxXTtcbiAgICAgIHZhciB4JDEgPSBtYXRjaCQyWzBdO1xuICAgICAgdmFyIHkkMSA9IG1hdGNoJDJbMV07XG4gICAgICByZXR1cm4gXCJzY2FsZShcIiArICh4JDEudG9TdHJpbmcoKSArIChcIiwgXCIgKyAoeSQxLnRvU3RyaW5nKCkgKyBcIilcIikpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtODg3MDc3Mjg1KSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTQ1MjUxMzMxNykge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gLTI0OTczODg1MSkge1xuICAgICAgICBzd2l0Y2ggKHZhcmlhbnQgKyAyNDk3Mzg4NTEgfCAwKSB7XG4gICAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgICAgICAgcmV0dXJuIFwicm90YXRlWChcIiArICh0b1N0cmluZyQ1KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgICByZXR1cm4gXCJyb3RhdGVZKFwiICsgKHRvU3RyaW5nJDUocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgICAgIHJldHVybiBcInJvdGF0ZVooXCIgKyAodG9TdHJpbmckNShwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXRjaCQzID0gcGFyYW1bMV07XG4gICAgICAgIHJldHVybiBcInNjYWxlM2QoXCIgKyAobWF0Y2gkM1swXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQzWzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDNbMl0udG9TdHJpbmcoKSArIFwiKVwiKSkpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YXJpYW50IDwgLTg2NjgzOTc5OCkge1xuICAgICAgICByZXR1cm4gXCJyb3RhdGUoXCIgKyAodG9TdHJpbmckNShwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgICB9XG4gICAgICB2YXIgbWF0Y2gkNCA9IHBhcmFtWzFdO1xuICAgICAgcmV0dXJuIFwic2tldyhcIiArICh0b1N0cmluZyQ1KG1hdGNoJDRbMF0pICsgKFwiLCBcIiArICh0b1N0cmluZyQ1KG1hdGNoJDRbMV0pICsgXCIpXCIpKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2YXJpYW50IDwgLTkxNDM2ODY5MCkge1xuICAgICAgcmV0dXJuIFwicGVyc3BlY3RpdmUoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiKVwiKTtcbiAgICB9XG4gICAgdmFyIG1hdGNoJDUgPSBwYXJhbVsxXTtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAodG9TdHJpbmckNChtYXRjaCQ1WzBdKSArIChcIiwgXCIgKyAodG9TdHJpbmckNChtYXRjaCQ1WzFdKSArIFwiKVwiKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDI0KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICBpZiAocGFyYW0gPj0gODkyNTg2Mjk4KSB7XG4gICAgICByZXR1cm4gXCJhbHRlcm5hdGVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IDU0NTQyODIzMikge1xuICAgIHJldHVybiBcImFsdGVybmF0ZS1yZXZlcnNlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwicmV2ZXJzZVwiO1xuICB9XG59XG5cbnZhciBBbmltYXRpb25EaXJlY3Rpb24gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyNFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMjUocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDI0NTg2MTE2OCkge1xuICAgIGlmIChwYXJhbSA+PSA3MzM2NTM3NzQpIHtcbiAgICAgIHJldHVybiBcImZvcndhcmRzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImJhY2t3YXJkc1wiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTIyMDg2NzI4KSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImJvdGhcIjtcbiAgfVxufVxuXG52YXIgQW5pbWF0aW9uRmlsbE1vZGUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyNVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMjYocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcImluZmluaXRlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxudmFyIEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMjZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDI3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtMjc2NTQ1MzYyKSB7XG4gICAgcmV0dXJuIFwicGF1c2VkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwicnVubmluZ1wiO1xuICB9XG59XG5cbnZhciBBbmltYXRpb25QbGF5U3RhdGUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyN1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMjgoeCkge1xuICBpZiAoeCA+PSA4MjMyODk0Mykge1xuICAgIGlmICh4ID49IDQ3NzE4MTE2Nykge1xuICAgICAgaWYgKHggPj0gNjI0MzY0MzE3KSB7XG4gICAgICAgIGlmICh4ICE9PSA2MjY4NjI4OTQpIHtcbiAgICAgICAgICBpZiAoeCA+PSA5Mzk5MDcxNTcpIHtcbiAgICAgICAgICAgIGlmICh4ID49IDk1MTM2NjAyNykge1xuICAgICAgICAgICAgICByZXR1cm4gXCJuZS1yZXNpemVcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIm5vdC1hbGxvd2VkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh4ID49IDY3NjkyMDkxNikge1xuICAgICAgICAgICAgcmV0dXJuIFwiY29sLXJlc2l6ZVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJudy1yZXNpemVcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiY29udGV4dC1tZW51XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoeCA+PSA1Nzc4MzI5NjYpIHtcbiAgICAgICAgaWYgKHggPj0gNjIxMjU4ODA5KSB7XG4gICAgICAgICAgcmV0dXJuIFwiZS1yZXNpemVcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJldy1yZXNpemVcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh4ID49IDU2MzE3MTcyOCkge1xuICAgICAgICByZXR1cm4gXCJhbGlhc1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibmVzdy1yZXNpemVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHggPj0gMzAyMzQ4NTYwKSB7XG4gICAgICBpZiAoeCAhPT0gMzY1NDUwMjU0KSB7XG4gICAgICAgIGlmICh4ID49IDQ1Nzc1Nzk1NCkge1xuICAgICAgICAgIGlmICh4ID49IDQ2NTgxOTg0MSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZGVmYXVsdFwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJuLXJlc2l6ZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh4ID49IDM4MTYyNjQzNSkge1xuICAgICAgICAgIHJldHVybiBcInZlcnRpY2FsLXRleHRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJuby1kcm9wXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImFsbC1zY3JvbGxcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHggPj0gMTgwODk3NDQyKSB7XG4gICAgICBpZiAoeCA+PSAyOTQyNTcwOTkpIHtcbiAgICAgICAgcmV0dXJuIFwidy1yZXNpemVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImNyb3NzaGFpclwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeCA+PSAxMDM0NzkyMTMpIHtcbiAgICAgIHJldHVybiBcInByb2dyZXNzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm53c2UtcmVzaXplXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHggPj0gLTg0MDI4NjI5MCkge1xuICAgIGlmICh4ID49IC00NTk2Mjc3MTcpIHtcbiAgICAgIGlmICh4ICE9PSAtMzQ4OTAzNzM3KSB7XG4gICAgICAgIGlmICh4ID49IC0xOTYyMDk4MCkge1xuICAgICAgICAgIGlmICh4ID49IC0xODc5NjUxOSkge1xuICAgICAgICAgICAgcmV0dXJuIFwibnMtcmVzaXplXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcImdyYWJiaW5nXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHggPj0gLTg4NzMyMjAwKSB7XG4gICAgICAgICAgcmV0dXJuIFwiem9vbS1pblwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcInpvb20tb3V0XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInMtcmVzaXplXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4ID49IC03ODYzMTcxMjMpIHtcbiAgICAgIGlmICh4ID49IC02OTMwNDgyODIpIHtcbiAgICAgICAgcmV0dXJuIFwic2UtcmVzaXplXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJwb2ludGVyXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4ID49IC04MjI5Nzc5MzEpIHtcbiAgICAgIHJldHVybiBcIndhaXRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwicm93LXJlc2l6ZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh4ID49IC05OTk1Njc0MTIpIHtcbiAgICBpZiAoeCAhPT0gLTk4OTEyMTg1NSkge1xuICAgICAgaWYgKHggPj0gLTkyMjA4NjcyOCkge1xuICAgICAgICBpZiAoeCA+PSAtODU2MDQ0MzcxKSB7XG4gICAgICAgICAgcmV0dXJuIFwidGV4dFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh4ID49IC05MzMxNzQ1MTEpIHtcbiAgICAgICAgcmV0dXJuIFwibW92ZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZ3JhYlwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJoZWxwXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHggPj0gLTEwNDQwNzE0OTkpIHtcbiAgICBpZiAoeCA+PSAtMTAyMDA0OTk5Mikge1xuICAgICAgcmV0dXJuIFwic3ctcmVzaXplXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImNvcHlcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeCA+PSAtMTA0NDU2OTY5NCkge1xuICAgIHJldHVybiBcImNlbGxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJhdXRvXCI7XG4gIH1cbn1cblxudmFyIEN1cnNvciA9IHtcbiAgYXV0bzogLyogYXV0byAqLy0xMDY1OTUxMzc3LFxuICAkJGRlZmF1bHQ6IC8qIGRlZmF1bHQgKi80NjU4MTk4NDEsXG4gIG5vbmU6IC8qIG5vbmUgKi8tOTIyMDg2NzI4LFxuICBjb250ZXh0TWVudTogLyogY29udGV4dE1lbnUgKi82MjY4NjI4OTQsXG4gIGhlbHA6IC8qIGhlbHAgKi8tOTg5MTIxODU1LFxuICBwb2ludGVyOiAvKiBwb2ludGVyICovLTc4NjMxNzEyMyxcbiAgcHJvZ3Jlc3M6IC8qIHByb2dyZXNzICovMTAzNDc5MjEzLFxuICB3YWl0OiAvKiB3YWl0ICovLTgyMjk3NzkzMSxcbiAgY2VsbDogLyogY2VsbCAqLy0xMDQ0NTY5Njk0LFxuICBjcm9zc2hhaXI6IC8qIGNyb3NzaGFpciAqLzE4MDg5NzQ0MixcbiAgdGV4dDogLyogdGV4dCAqLy04NTYwNDQzNzEsXG4gIHZlcnRpY2FsVGV4dDogLyogdmVydGljYWxUZXh0ICovMzgxNjI2NDM1LFxuICBhbGlhczogLyogYWxpYXMgKi81NjMxNzE3MjgsXG4gIGNvcHk6IC8qIGNvcHkgKi8tMTA0NDA3MTQ5OSxcbiAgbW92ZTogLyogbW92ZSAqLy05MzMxNzQ1MTEsXG4gIG5vRHJvcDogLyogbm9Ecm9wICovMzAyMzQ4NTYwLFxuICBub3RBbGxvd2VkOiAvKiBub3RBbGxvd2VkICovOTM5OTA3MTU3LFxuICBncmFiOiAvKiBncmFiICovLTk5OTU2NzQxMixcbiAgZ3JhYmJpbmc6IC8qIGdyYWJiaW5nICovLTE5NjIwOTgwLFxuICBhbGxTY3JvbGw6IC8qIGFsbFNjcm9sbCAqLzM2NTQ1MDI1NCxcbiAgY29sUmVzaXplOiAvKiBjb2xSZXNpemUgKi82NzY5MjA5MTYsXG4gIHJvd1Jlc2l6ZTogLyogcm93UmVzaXplICovLTg0MDI4NjI5MCxcbiAgblJlc2l6ZTogLyogblJlc2l6ZSAqLzQ1Nzc1Nzk1NCxcbiAgZVJlc2l6ZTogLyogZVJlc2l6ZSAqLzYyMTI1ODgwOSxcbiAgc1Jlc2l6ZTogLyogc1Jlc2l6ZSAqLy0zNDg5MDM3MzcsXG4gIHdSZXNpemU6IC8qIHdSZXNpemUgKi8yOTQyNTcwOTksXG4gIG5lUmVzaXplOiAvKiBuZVJlc2l6ZSAqLzk1MTM2NjAyNyxcbiAgbndSZXNpemU6IC8qIG53UmVzaXplICovNjI0MzY0MzE3LFxuICBzZVJlc2l6ZTogLyogc2VSZXNpemUgKi8tNjkzMDQ4MjgyLFxuICBzd1Jlc2l6ZTogLyogc3dSZXNpemUgKi8tMTAyMDA0OTk5MixcbiAgZXdSZXNpemU6IC8qIGV3UmVzaXplICovNTc3ODMyOTY2LFxuICBuc1Jlc2l6ZTogLyogbnNSZXNpemUgKi8tMTg3OTY1MTksXG4gIG5lc3dSZXNpemU6IC8qIG5lc3dSZXNpemUgKi80NzcxODExNjcsXG4gIG53c2VSZXNpemU6IC8qIG53c2VSZXNpemUgKi84MjMyODk0MyxcbiAgem9vbUluOiAvKiB6b29tSW4gKi8tODg3MzIyMDAsXG4gIHpvb21PdXQ6IC8qIHpvb21PdXQgKi8tNDU5NjI3NzE3LFxuICB0b1N0cmluZzogdG9TdHJpbmckMjhcbn07XG5cbmZ1bmN0aW9uIHJnYihyLCBnLCBiKSB7XG4gIHJldHVybiAvKiBgcmdiICovW1xuICAgICAgICAgIDU2OTIxNzMsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIGJcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICByZXR1cm4gLyogYHJnYmEgKi9bXG4gICAgICAgICAgLTg3ODEyODk3MixcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHIsXG4gICAgICAgICAgICBnLFxuICAgICAgICAgICAgYixcbiAgICAgICAgICAgIGFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhzbChoLCBzLCBsKSB7XG4gIHJldHVybiAvKiBgaHNsICovW1xuICAgICAgICAgIDUxOTc1NjksXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBoLFxuICAgICAgICAgICAgLyogYHBlcmNlbnQgKi9bXG4gICAgICAgICAgICAgIC0xMTk4ODcxNjMsXG4gICAgICAgICAgICAgIHNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAvKiBgcGVyY2VudCAqL1tcbiAgICAgICAgICAgICAgLTExOTg4NzE2MyxcbiAgICAgICAgICAgICAgbFxuICAgICAgICAgICAgXVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIHJldHVybiAvKiBgaHNsYSAqL1tcbiAgICAgICAgICAtOTg4NDI1NjY0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIC8qIGBwZXJjZW50ICovW1xuICAgICAgICAgICAgICAtMTE5ODg3MTYzLFxuICAgICAgICAgICAgICBzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLyogYHBlcmNlbnQgKi9bXG4gICAgICAgICAgICAgIC0xMTk4ODcxNjMsXG4gICAgICAgICAgICAgIGxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBhXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBoZXgoeCkge1xuICByZXR1cm4gLyogYGhleCAqL1tcbiAgICAgICAgICA1MTk0NDU5LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2FscGhhKHBhcmFtKSB7XG4gIGlmIChwYXJhbVswXSA+PSA1NDk2MzkwKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiVcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfcGVyY2VudChwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJVwiO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQyOShwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IDU4MjYyNjEzMCkge1xuICAgICAgcmV0dXJuIFwidHJhbnNwYXJlbnRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY3VycmVudENvbG9yXCI7XG4gICAgfVxuICB9XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ICE9PSAtODc4MTI4OTcyKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gNTE5NzU2OSkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gNTY5MjE3Mykge1xuICAgICAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICAgICAgcmV0dXJuIFwicmdiKFwiICsgKG1hdGNoWzBdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoWzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoWzJdLnRvU3RyaW5nKCkgKyBcIilcIikpKSkpO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDEgPSBwYXJhbVsxXTtcbiAgICAgIHJldHVybiBcImhzbChcIiArICh0b1N0cmluZyQ1KG1hdGNoJDFbMF0pICsgKFwiLCBcIiArIChzdHJpbmdfb2ZfcGVyY2VudChtYXRjaCQxWzFdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX3BlcmNlbnQobWF0Y2gkMVsyXSkgKyBcIilcIikpKSkpO1xuICAgIH1cbiAgICBpZiAodmFyaWFudCA+PSA1MTk0NDU5KSB7XG4gICAgICByZXR1cm4gXCIjXCIgKyBwYXJhbVsxXTtcbiAgICB9XG4gICAgdmFyIG1hdGNoJDIgPSBwYXJhbVsxXTtcbiAgICByZXR1cm4gXCJoc2xhKFwiICsgKHRvU3RyaW5nJDUobWF0Y2gkMlswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9wZXJjZW50KG1hdGNoJDJbMV0pICsgKFwiLCBcIiArIChzdHJpbmdfb2ZfcGVyY2VudChtYXRjaCQyWzJdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX2FscGhhKG1hdGNoJDJbM10pICsgXCIpXCIpKSkpKSkpO1xuICB9XG4gIHZhciBtYXRjaCQzID0gcGFyYW1bMV07XG4gIHJldHVybiBcInJnYmEoXCIgKyAobWF0Y2gkM1swXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQzWzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDNbMl0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkM1szXS50b1N0cmluZygpICsgXCIpXCIpKSkpKSkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQzMChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNDcyMDk1NzM4KSB7XG4gICAgaWYgKHBhcmFtICE9PSA1Njg0MDM1MDUpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4NTIxNzU2MzMpIHtcbiAgICAgICAgaWYgKHBhcmFtID49IDEwNDIyODM3NDEpIHtcbiAgICAgICAgICByZXR1cm4gXCJpbnNldFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImRvdWJsZVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID49IDg0MTk3OTYyNikge1xuICAgICAgICByZXR1cm4gXCJkb3R0ZWRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImdyb292ZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJkYXNoZWRcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gIT09IC04NjI1ODQ5ODIpIHtcbiAgICBpZiAocGFyYW0gPj0gMTI5NTY3MTUpIHtcbiAgICAgIGlmIChwYXJhbSA+PSAyMDk5MzAxOTYpIHtcbiAgICAgICAgcmV0dXJuIFwib3V0c2V0XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJzb2xpZFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTM3OTQ2ODc1Nykge1xuICAgICAgcmV0dXJuIFwicmlkZ2VcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJoaWRkZW5cIjtcbiAgfVxufVxuXG52YXIgQm9yZGVyU3R5bGUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQzMFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMzEocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbnZhciBQb2ludGVyRXZlbnRzID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDMyKHBhcmFtKSB7XG4gIHJldHVybiBcIm5vbmVcIjtcbn1cblxudmFyIFBlcnNwZWN0aXZlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzJcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDMzKHBhcmFtKSB7XG4gIHJldHVybiBcIm5vcm1hbFwiO1xufVxuXG52YXIgTGV0dGVyU3BhY2luZyA9IHtcbiAgbm9ybWFsOiAvKiBub3JtYWwgKi84MTIyMTY4NzEsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQzM1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMzQocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpO1xuICB9XG59XG5cbnZhciBMaW5lSGVpZ2h0ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzRcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDM1KHBhcmFtKSB7XG4gIHJldHVybiBcIm5vcm1hbFwiO1xufVxuXG52YXIgV29yZFNwYWNpbmcgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQzNVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMzYocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSA0MjM2MTA5NjkpIHtcbiAgICBpZiAocGFyYW0gPj0gODg4OTYwMzMzKSB7XG4gICAgICByZXR1cm4gXCJibG9ja1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJydW4taW5cIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiaW5saW5lXCI7XG4gIH1cbn1cblxudmFyIERpc3BsYXlPdXRzaWRlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDM3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTk5OTU2NTYyNikge1xuICAgIGlmIChwYXJhbSA+PSAxODI2OTU5NTApIHtcbiAgICAgIHJldHVybiBcInRhYmxlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImZsZXhcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiZ3JpZFwiO1xuICB9XG59XG5cbnZhciBEaXNwbGF5SW5zaWRlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzdcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDM4KHBhcmFtKSB7XG4gIHJldHVybiBcImxpc3QtaXRlbVwiO1xufVxuXG52YXIgRGlzcGxheUxpc3RJdGVtID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzhcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDM5KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA2MDY0MTkyMDQpIHtcbiAgICBpZiAocGFyYW0gPj0gODUwMjA5NTYzKSB7XG4gICAgICBpZiAocGFyYW0gPj0gMTA1NDgyNjYxNikge1xuICAgICAgICByZXR1cm4gXCJ0YWJsZS1jYXB0aW9uXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJ0YWJsZS1jb2x1bW4tZ3JvdXBcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDc5MzkxMjUyOCkge1xuICAgICAgcmV0dXJuIFwidGFibGUtY2VsbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJ0YWJsZS1oZWFkZXItZ3JvdXBcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTgzNjcyNTUxNykge1xuICAgIGlmIChwYXJhbSA+PSA5NzEyMjY5Mikge1xuICAgICAgcmV0dXJuIFwidGFibGUtY29sdW1uXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInRhYmxlLXJvdy1ncm91cFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtODQzMTI5MTcyKSB7XG4gICAgcmV0dXJuIFwidGFibGUtcm93XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwidGFibGUtZm9vdGVyLWdyb3VwXCI7XG4gIH1cbn1cblxudmFyIERpc3BsYXlJbnRlcm5hbCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDM5XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0MChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNzkwODg5NzU0KSB7XG4gICAgcmV0dXJuIFwiY29udGVudHNcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbn1cblxudmFyIERpc3BsYXlCb3ggPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0MFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDEocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDUzMzIzMzE0KSB7XG4gICAgaWYgKHBhcmFtID49IDY0NzEyMTI3KSB7XG4gICAgICByZXR1cm4gXCJpbmxpbmUtZ3JpZFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJpbmxpbmUtZmxleFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMTQ3Nzg1Njc2KSB7XG4gICAgcmV0dXJuIFwiaW5saW5lLWJsb2NrXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiaW5saW5lLXRhYmxlXCI7XG4gIH1cbn1cblxudmFyIERpc3BsYXlMZWdhY3kgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0MVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDIocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtMTYyMzE2Nzk1KSB7XG4gICAgaWYgKHBhcmFtID49IDgxMjIxNjg3MSkge1xuICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic3RyZXRjaFwiO1xuICB9XG59XG5cbnZhciBKdXN0aWZ5U2VsZiA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQyXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0MyhwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNjc4NTk1NTQpIHtcbiAgICBpZiAocGFyYW0gIT09IDk4MjQ4MTQ5KSB7XG4gICAgICBpZiAocGFyYW0gPj0gOTI0MjY4MDY2KSB7XG4gICAgICAgIGlmIChwYXJhbSA+PSAxMDQwNjQ1NDMwKSB7XG4gICAgICAgICAgcmV0dXJuIFwic2VsZi1zdGFydFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImZsZXgtZW5kXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gNjYyNDM5NTI5KSB7XG4gICAgICAgIHJldHVybiBcImZsZXgtc3RhcnRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInN0YXJ0XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMzc5MzE5MzMyKSB7XG4gICAgaWYgKHBhcmFtID49IDUxODM0Nzk5KSB7XG4gICAgICByZXR1cm4gXCJzZWxmLWVuZFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJyaWdodFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTQ0NzY0OTIxKSB7XG4gICAgcmV0dXJuIFwibGVmdFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImVuZFwiO1xuICB9XG59XG5cbnZhciBQb3NpdGlvbmFsQWxpZ25tZW50ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNDNcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDQ0KHBhcmFtKSB7XG4gIHJldHVybiBcImJhc2VsaW5lXCI7XG59XG5cbnZhciBCYXNlbGluZUFsaWdubWVudCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQ0XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0NShwYXJhbSkge1xuICByZXR1cm4gXCJub3JtYWxcIjtcbn1cblxudmFyIE5vcm1hbEFsaWdubWVudCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQ1XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0NihwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTE2MjMxNjc5NSkge1xuICAgIGlmIChwYXJhbSA+PSA1MTY2ODIxNDYpIHtcbiAgICAgIHJldHVybiBcInNwYWNlLWJldHdlZW5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwic3RyZXRjaFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNDg1ODk1NzU3KSB7XG4gICAgcmV0dXJuIFwic3BhY2UtYXJvdW5kXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic3BhY2UtZXZlbmx5XCI7XG4gIH1cbn1cblxudmFyIERpc3RyaWJ1dGVkQWxpZ25tZW50ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNDZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDQ3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA2MjI1MDgzMikge1xuICAgIGlmIChwYXJhbSA+PSA5ODI0ODE0OSkge1xuICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImp1c3RpZnlcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTM3OTMxOTMzMikge1xuICAgIHJldHVybiBcInJpZ2h0XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibGVmdFwiO1xuICB9XG59XG5cbnZhciBUZXh0QWxpZ24gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0N1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDgocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSA4MTIyMTY4NzEpIHtcbiAgICBpZiAocGFyYW0gPj0gODkyNzQ4MTg4KSB7XG4gICAgICByZXR1cm4gXCJrZWVwLWFsbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJicmVhay1hbGxcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gIH1cbn1cblxudmFyIFdvcmRCcmVhayA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQ4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0OShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNjYwODcwMDI5KSB7XG4gICAgaWYgKHBhcmFtID49IDgxMjIxNjg3MSkge1xuICAgICAgaWYgKHBhcmFtID49IDg2NzkxMzM1NSkge1xuICAgICAgICByZXR1cm4gXCJub3dyYXBcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gNzA1NDE3OTk2KSB7XG4gICAgICByZXR1cm4gXCJicmVhay1zcGFjZXNcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwicHJlLXdyYXBcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gNTM4NDQwMTE5KSB7XG4gICAgcmV0dXJuIFwicHJlLWxpbmVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJwcmVcIjtcbiAgfVxufVxuXG52YXIgV2hpdGVTcGFjZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQ5XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1MChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gODEyMjE2ODcxKSB7XG4gICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic3RyZXRjaFwiO1xuICB9XG59XG5cbnZhciBBbGlnbkl0ZW1zID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNTBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDUxKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTE2MjMxNjc5NSkge1xuICAgIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInN0cmV0Y2hcIjtcbiAgfVxufVxuXG52YXIgQWxpZ25TZWxmID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNTFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDUyKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gNjc4NTk1NTQpIHtcbiAgICBpZiAocGFyYW0gPj0gNjYyNDM5NTI5KSB7XG4gICAgICBpZiAocGFyYW0gPj0gOTI0MjY4MDY2KSB7XG4gICAgICAgIHJldHVybiBcImZsZXgtZW5kXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSA5ODI0ODE0OSkge1xuICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImVuZFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJzdGFydFwiO1xuICB9XG59XG5cbnZhciBBbGlnbkNvbnRlbnQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1MlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNTMocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtOTIyMDg2NzI4KSB7XG4gICAgaWYgKHBhcmFtID49IDQyNzA2NTMwMCkge1xuICAgICAgaWYgKHBhcmFtID49IDYzNTUwMjYwNCkge1xuICAgICAgICByZXR1cm4gXCJzY2FsZS1kb3duXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJjb250YWluXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtODk5NDE2MjY1KSB7XG4gICAgICByZXR1cm4gXCJjb3ZlclwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJmaWxsXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfVxufVxuXG52YXIgT2JqZWN0Rml0ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNTNcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDU0KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtOTQ0NzY0OTIxKSB7XG4gICAgaWYgKHBhcmFtID49IC0zNzkzMTkzMzIpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA5NDM5MjcwNDIpIHtcbiAgICAgICAgcmV0dXJuIFwiaW5saW5lLWVuZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibGVmdFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTY4ODg2NDU1KSB7XG4gICAgcmV0dXJuIFwiaW5saW5lLXN0YXJ0XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYm90aFwiO1xuICB9XG59XG5cbnZhciBDbGVhciA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDU0XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1NShwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC05NDQ3NjQ5MjEpIHtcbiAgICBpZiAocGFyYW0gPj0gLTM3OTMxOTMzMikge1xuICAgICAgaWYgKHBhcmFtID49IDk0MzkyNzA0Mikge1xuICAgICAgICByZXR1cm4gXCJpbmxpbmUtZW5kXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJyaWdodFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTkyMjA4NjcyOCkge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJpbmxpbmUtc3RhcnRcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibGVmdFwiO1xuICB9XG59XG5cbnZhciBGbG9hdCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDU1XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1NihwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC04NjI1ODQ5ODIpIHtcbiAgICBpZiAocGFyYW0gPj0gNTg5NTkyNjkwKSB7XG4gICAgICByZXR1cm4gXCJ2aXNpYmxlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImNvbGxhcHNlXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImhpZGRlblwiO1xuICB9XG59XG5cbnZhciBWaXNpYmlsaXR5ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNTZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDU3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAxMDYxNTE1Nikge1xuICAgIHJldHVybiBcImZpeGVkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbnZhciBUYWJsZUxheW91dCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDU3XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1OChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gMTE5MjgzNTU1KSB7XG4gICAgcmV0dXJuIFwic2VwYXJhdGVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJjb2xsYXBzZVwiO1xuICB9XG59XG5cbnZhciBCb3JkZXJDb2xsYXBzZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDU4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1OShwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC00NjMxMjEyODgpIHtcbiAgICBpZiAocGFyYW0gPj0gODY3OTEzMzU1KSB7XG4gICAgICByZXR1cm4gXCJub3dyYXBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwid3JhcFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJ3cmFwLXJldmVyc2VcIjtcbiAgfVxufVxuXG52YXIgRmxleFdyYXAgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1OVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNjAocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDEzNTQ3NzQ4NCkge1xuICAgIGlmIChwYXJhbSA+PSAzNzg5NTEyMDgpIHtcbiAgICAgIHJldHVybiBcInJvdy1yZXZlcnNlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImNvbHVtbi1yZXZlcnNlXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IDU2OTM5NzgpIHtcbiAgICByZXR1cm4gXCJyb3dcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJjb2x1bW5cIjtcbiAgfVxufVxuXG52YXIgRmxleERpcmVjdGlvbiA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDYwXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ2MShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gOTMwNzI2Mykge1xuICAgIHJldHVybiBcImJvcmRlci1ib3hcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJjb250ZW50LWJveFwiO1xuICB9XG59XG5cbnZhciBCb3hTaXppbmcgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2MVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNjIocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcImF1dG9cIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKTtcbiAgfVxufVxuXG52YXIgQ29sdW1uQ291bnQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2MlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNjMocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtOTIyMDg2NzI4KSB7XG4gICAgaWYgKHBhcmFtID49IDQ4NDc5MDUpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA0MjcwNjUzMDApIHtcbiAgICAgICAgcmV0dXJuIFwiY29udGFpblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiYWxsXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtODU2MDQ0MzcxKSB7XG4gICAgICByZXR1cm4gXCJ0ZXh0XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG59XG5cbnZhciBVc2VyU2VsZWN0ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNjNcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDY0KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtNDI1MzQ5ODM5KSB7XG4gICAgaWYgKHBhcmFtID49IC00MTUzMzAwMzApIHtcbiAgICAgIHJldHVybiBcInVwcGVyY2FzZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJsb3dlcmNhc2VcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTUwOTg2NzYwNCkge1xuICAgIHJldHVybiBcImNhcGl0YWxpemVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbn1cblxudmFyIFRleHRUcmFuc2Zvcm0gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2NFxufTtcblxuZnVuY3Rpb24gYXJlYXMoeCkge1xuICByZXR1cm4gLyogYGFyZWFzICovW1xuICAgICAgICAgIDYyOTUxMDIxNCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDY1KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkU3RyaW5nLnRyaW0oTGlzdC5mb2xkX2xlZnQoKGZ1bmN0aW9uIChjYXJyeSwgZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXJyeSArIChcIidcIiArIChlbGVtICsgXCInIFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBcIlwiLCBwYXJhbVsxXSkpO1xuICB9XG59XG5cbnZhciBHcmlkVGVtcGxhdGVBcmVhcyA9IHtcbiAgYXJlYXM6IGFyZWFzLFxuICB0b1N0cmluZzogdG9TdHJpbmckNjVcbn07XG5cbmZ1bmN0aW9uIGlkZW50KHgpIHtcbiAgcmV0dXJuIC8qIGBpZGVudCAqL1tcbiAgICAgICAgICA5MzA2OTM4NzIsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBudW0oeCkge1xuICByZXR1cm4gLyogYG51bSAqL1tcbiAgICAgICAgICA1NDk2MzkwLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbnVtSWRlbnQoeCwgeSkge1xuICByZXR1cm4gLyogYG51bUlkZW50ICovW1xuICAgICAgICAgIC0xOTIzMjU5NDIsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3Bhbih4KSB7XG4gIHJldHVybiAvKiBgc3BhbiAqL1tcbiAgICAgICAgICAtODY2NTkyMDU0LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckNjYodCkge1xuICBpZiAodHlwZW9mIHQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJhdXRvXCI7XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSB0WzBdO1xuICBpZiAodmFyaWFudCA+PSA1NDk2MzkwKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gOTMwNjkzODcyKSB7XG4gICAgICByZXR1cm4gdFsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFN0cmluZyh0WzFdKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTE5MjMyNTk0Mikge1xuICAgIHZhciBtYXRjaCA9IHRbMV07XG4gICAgcmV0dXJuIFN0cmluZyhtYXRjaFswXSkgKyAoXCIgXCIgKyBtYXRjaFsxXSk7XG4gIH1cbiAgdmFyIGUgPSB0WzFdO1xuICByZXR1cm4gXCJzcGFuIFwiICsgKFxuICAgICAgICAgIGVbMF0gPj0gOTMwNjkzODcyID8gZVsxXSA6IFN0cmluZyhlWzFdKVxuICAgICAgICApO1xufVxuXG52YXIgR3JpZEFyZWEgPSB7XG4gIGF1dG86IC8qIGF1dG8gKi8tMTA2NTk1MTM3NyxcbiAgaWRlbnQ6IGlkZW50LFxuICBudW06IG51bSxcbiAgbnVtSWRlbnQ6IG51bUlkZW50LFxuICBzcGFuOiBzcGFuLFxuICB0b1N0cmluZzogdG9TdHJpbmckNjZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDY3KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgaWYgKHZhcmlhbnQgPj0gLTk3NzQwMDQyKSB7XG4gICAgaWYgKHZhcmlhbnQgIT09IC0yOTkyOTQ4OSkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gOTM0NDA3NDI2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDEwMzY4NzA5NjMpIHtcbiAgICAgICAgICB2YXIgaCA9IHBhcmFtWzFdO1xuICAgICAgICAgIGlmICh0eXBlb2YgaCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiaHVlLXJvdGF0ZSgwZGVnKVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJodWUtcm90YXRlKFwiICsgKHRvU3RyaW5nJDUoaCkgKyBcIilcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICAgICAgICBpZiAobWF0Y2hbMF0gPj0gNTQ5NjM5MCkge1xuICAgICAgICAgIHJldHVybiBcImNvbnRyYXN0KFwiICsgKFN0cmluZyhtYXRjaFsxXSkgKyBcIilcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiY29udHJhc3QoXCIgKyAobWF0Y2hbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh2YXJpYW50ID49IDUzNDMwODYzMCkge1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IHBhcmFtWzFdO1xuICAgICAgICBpZiAobWF0Y2gkMVswXSA+PSA1NDk2MzkwKSB7XG4gICAgICAgICAgcmV0dXJuIFwiaW52ZXJ0KFwiICsgKFN0cmluZyhtYXRjaCQxWzFdKSArIFwiKVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJpbnZlcnQoXCIgKyAobWF0Y2gkMVsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDIgPSBwYXJhbVsxXTtcbiAgICAgIGlmIChtYXRjaCQyWzBdID49IDU0OTYzOTApIHtcbiAgICAgICAgcmV0dXJuIFwic2VwaWEoXCIgKyAoU3RyaW5nKG1hdGNoJDJbMV0pICsgXCIpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic2VwaWEoXCIgKyAobWF0Y2gkMlsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1hdGNoJDMgPSBwYXJhbVsxXTtcbiAgICBpZiAobWF0Y2gkM1swXSA+PSA1NDk2MzkwKSB7XG4gICAgICByZXR1cm4gXCJzYXR1cmF0ZShcIiArIChTdHJpbmcobWF0Y2gkM1sxXSkgKyBcIilcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInNhdHVyYXRlKFwiICsgKG1hdGNoJDNbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ICE9PSAtNTk0NTI1ODQxKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTM0NTY3ODM4OSkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gLTIxNDQ2NDU2OSkge1xuICAgICAgICB2YXIgbWF0Y2gkNCA9IHBhcmFtWzFdO1xuICAgICAgICBpZiAobWF0Y2gkNFswXSA+PSA1NDk2MzkwKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZ3JheXNjYWxlKFwiICsgKFN0cmluZyhtYXRjaCQ0WzFdKSArIFwiKVwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJncmF5c2NhbGUoXCIgKyAobWF0Y2gkNFsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDUgPSBwYXJhbVsxXTtcbiAgICAgIGlmIChtYXRjaCQ1WzBdID49IDU0OTYzOTApIHtcbiAgICAgICAgcmV0dXJuIFwib3BhY2l0eShcIiArIChTdHJpbmcobWF0Y2gkNVsxXSkgKyBcIilcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJvcGFjaXR5KFwiICsgKG1hdGNoJDVbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2YXJpYW50IDwgLTQ0NTU0Mjk1OSkge1xuICAgICAgcmV0dXJuIFwiYmx1cihcIiArICh0b1N0cmluZyQ0KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICB9XG4gICAgdmFyIG1hdGNoJDYgPSBwYXJhbVsxXTtcbiAgICBpZiAobWF0Y2gkNlswXSA+PSA1NDk2MzkwKSB7XG4gICAgICByZXR1cm4gXCJicmlnaHRuZXNzKFwiICsgKFN0cmluZyhtYXRjaCQ2WzFdKSArIFwiKVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYnJpZ2h0bmVzcyhcIiArIChtYXRjaCQ2WzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgIH1cbiAgfVxuICB2YXIgbWF0Y2gkNyA9IHBhcmFtWzFdO1xuICBpZiAobWF0Y2gkN1swXSA+PSA1NDk2MzkwKSB7XG4gICAgcmV0dXJuIFwiZHJvcC1zaGFkb3coXCIgKyAoU3RyaW5nKG1hdGNoJDdbMV0pICsgXCIpXCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImRyb3Atc2hhZG93KFwiICsgKG1hdGNoJDdbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckNjgocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtMTE4NDM3NTI1KSB7XG4gICAgaWYgKHBhcmFtID49IDEwNjE1MTU2KSB7XG4gICAgICByZXR1cm4gXCJmaXhlZFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJzY3JvbGxcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibG9jYWxcIjtcbiAgfVxufVxuXG52YXIgQmFja2dyb3VuZEF0dGFjaG1lbnQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2OFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNjkocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSA5MzA3MjYzKSB7XG4gICAgaWYgKHBhcmFtID49IDk3MjU3NTkzMCkge1xuICAgICAgcmV0dXJuIFwicGFkZGluZy1ib3hcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY29udGVudC1ib3hcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYm9yZGVyLWJveFwiO1xuICB9XG59XG5cbnZhciBCYWNrZ3JvdW5kQ2xpcCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDY5XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3MChwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDkzMDcyNjMpIHtcbiAgICBpZiAocGFyYW0gPj0gOTcyNTc1OTMwKSB7XG4gICAgICByZXR1cm4gXCJwYWRkaW5nLWJveFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjb250ZW50LWJveFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJib3JkZXItYm94XCI7XG4gIH1cbn1cblxudmFyIEJhY2tncm91bmRPcmlnaW4gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3MFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzEocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtMzc5MzE5MzMyKSB7XG4gICAgaWYgKHBhcmFtID49IDk4MjQ4MTQ5KSB7XG4gICAgICByZXR1cm4gXCJjZW50ZXJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibGVmdFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJyaWdodFwiO1xuICB9XG59XG5cbnZhciBYID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNzFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDcyKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gNTc5MzQyOSkge1xuICAgIGlmIChwYXJhbSA+PSA5ODI0ODE0OSkge1xuICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImJvdHRvbVwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJ0b3BcIjtcbiAgfVxufVxuXG52YXIgWSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDcyXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3MyhwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC00NDUwNjEzOTcpIHtcbiAgICBpZiAocGFyYW0gPj0gNTc5MzQyOSkge1xuICAgICAgaWYgKHBhcmFtID49IDk4MjQ4MTQ5KSB7XG4gICAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidG9wXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMzc5MzE5MzMyKSB7XG4gICAgICByZXR1cm4gXCJyaWdodFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJsZWZ0XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImJvdHRvbVwiO1xuICB9XG59XG5cbnZhciBCYWNrZ3JvdW5kUG9zaXRpb24gPSB7XG4gIFg6IFgsXG4gIFk6IFksXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3M1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzQocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDIzNDk3OTI2KSB7XG4gICAgaWYgKHBhcmFtID49IDY0NjQzNzAyMSkge1xuICAgICAgaWYgKHBhcmFtID49IDY0NjQzNzAyMikge1xuICAgICAgICByZXR1cm4gXCJyZXBlYXQteVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwicmVwZWF0LXhcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDEwODgyODUwNykge1xuICAgICAgcmV0dXJuIFwicmVwZWF0XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInNwYWNlXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC0zMTIwODQ0MDIpIHtcbiAgICByZXR1cm4gXCJyb3VuZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm5vLXJlcGVhdFwiO1xuICB9XG59XG5cbnZhciBCYWNrZ3JvdW5kUmVwZWF0ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNzRcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDc1KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gMTY2ODg4Nzg1KSB7XG4gICAgICByZXR1cm4gXCJlbGxpcHNpc1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjbGlwXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXTtcbiAgfVxufVxuXG52YXIgVGV4dE92ZXJmbG93ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNzVcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDc2KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTkyMjA4NjcyOCkge1xuICAgIGlmIChwYXJhbSA+PSA0MTIxNTU1NjkpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4ODg2NjQ0MTIpIHtcbiAgICAgICAgcmV0dXJuIFwiYmxpbmtcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImxpbmUtdGhyb3VnaFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gMTMxMTQyOTI0KSB7XG4gICAgICByZXR1cm4gXCJ1bmRlcmxpbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwib3ZlcmxpbmVcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG59XG5cbnZhciBUZXh0RGVjb3JhdGlvbkxpbmUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3NlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzcocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAxMjk1NjcxNSkge1xuICAgIGlmIChwYXJhbSA+PSA4NDE5Nzk2MjYpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4NTIxNzU2MzMpIHtcbiAgICAgICAgcmV0dXJuIFwiZG91YmxlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJkb3R0ZWRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDU2ODQwMzUwNSkge1xuICAgICAgcmV0dXJuIFwiZGFzaGVkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIndhdnlcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic29saWRcIjtcbiAgfVxufVxuXG52YXIgVGV4dERlY29yYXRpb25TdHlsZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDc3XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3OChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTE5NTgwNTMzNikge1xuICAgIHJldHVybiBcImZpdC1jb250ZW50XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbnZhciBXaWR0aCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDc4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3OShwYXJhbSkge1xuICByZXR1cm4gXCJub25lXCI7XG59XG5cbnZhciBNYXhXaWR0aCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDc5XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4MChwYXJhbSkge1xuICByZXR1cm4gXCJhdXRvXCI7XG59XG5cbnZhciBIZWlnaHQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ4MFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckODEocGFyYW0pIHtcbiAgcmV0dXJuIFwibm9uZVwiO1xufVxuXG52YXIgTWF4SGVpZ2h0ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckODFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDgyKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gODkzMzMyODU5KSB7XG4gICAgaWYgKHBhcmFtID49IDEwNTk5MjE0NDkpIHtcbiAgICAgIHJldHVybiBcImJyZWFrLXdvcmRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibm9ybWFsXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImFueXdoZXJlXCI7XG4gIH1cbn1cblxudmFyIE92ZXJmbG93V3JhcCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDgyXG59O1xuXG5mdW5jdGlvbiBsaW5lYXJHcmFkaWVudChhbmdsZSwgc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGBsaW5lYXJHcmFkaWVudCAqL1tcbiAgICAgICAgICA2MTYzNzk2MzcsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBhbmdsZSxcbiAgICAgICAgICAgIHN0b3BzXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByZXBlYXRpbmdMaW5lYXJHcmFkaWVudChhbmdsZSwgc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGByZXBlYXRpbmdMaW5lYXJHcmFkaWVudCAqL1tcbiAgICAgICAgICAtMTYwMjgwNjQ0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBzdG9wc1xuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmFkaWFsR3JhZGllbnQoc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGByYWRpYWxHcmFkaWVudCAqL1tcbiAgICAgICAgICAxMTk1NDg5MTEsXG4gICAgICAgICAgc3RvcHNcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmVwZWF0aW5nUmFkaWFsR3JhZGllbnQoc3RvcHMpIHtcbiAgcmV0dXJuIC8qIGByZXBlYXRpbmdSYWRpYWxHcmFkaWVudCAqL1tcbiAgICAgICAgICAtNjU3MTExMzcwLFxuICAgICAgICAgIHN0b3BzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9zdG9wcyhzdG9wcykge1xuICB2YXIgc3RyaW5ncyA9IEJlbHRfTGlzdC5tYXAoc3RvcHMsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICByZXR1cm4gdG9TdHJpbmckMjkocGFyYW1bMV0pICsgKFwiIFwiICsgdG9TdHJpbmckNChwYXJhbVswXSkpO1xuICAgICAgICB9KSk7XG4gIHZhciBzZXBhcmF0b3IgPSBcIiwgXCI7XG4gIHZhciBfc3RyaW5ncyA9IHN0cmluZ3M7XG4gIHZhciBfYWNjID0gXCJcIjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciBzdHJpbmdzJDEgPSBfc3RyaW5ncztcbiAgICBpZiAoIXN0cmluZ3MkMSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgdmFyIHhzID0gc3RyaW5ncyQxWzFdO1xuICAgIHZhciB4ID0gc3RyaW5ncyQxWzBdO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiBhY2MgKyB4O1xuICAgIH1cbiAgICBfYWNjID0gYWNjICsgKHggKyBzZXBhcmF0b3IpO1xuICAgIF9zdHJpbmdzID0geHM7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ4MyhwYXJhbSkge1xuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCA+PSAxMTk1NDg5MTEpIHtcbiAgICBpZiAodmFyaWFudCA8IDYxNjM3OTYzNykge1xuICAgICAgcmV0dXJuIFwicmFkaWFsLWdyYWRpZW50KFwiICsgKHN0cmluZ19vZl9zdG9wcyhwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICAgIHJldHVybiBcImxpbmVhci1ncmFkaWVudChcIiArICh0b1N0cmluZyQ1KG1hdGNoWzBdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX3N0b3BzKG1hdGNoWzFdKSArIFwiKVwiKSkpO1xuICB9XG4gIGlmICh2YXJpYW50IDwgLTE2MDI4MDY0NCkge1xuICAgIHJldHVybiBcInJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX3N0b3BzKHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHBhcmFtWzFdO1xuICByZXR1cm4gXCJyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KFwiICsgKHRvU3RyaW5nJDUobWF0Y2gkMVswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9zdG9wcyhtYXRjaCQxWzFdKSArIFwiKVwiKSkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ4NChwYXJhbSkge1xuICByZXR1cm4gXCJub25lXCI7XG59XG5cbnZhciBCYWNrZ3JvdW5kSW1hZ2UgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ4NFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckODUocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDkzMDcyNjMpIHtcbiAgICBpZiAocGFyYW0gPj0gNDgxMzY2MTgyKSB7XG4gICAgICBpZiAocGFyYW0gPj0gOTcyNTc1OTMwKSB7XG4gICAgICAgIHJldHVybiBcInBhZGRpbmctYm94XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJ2aWV3LWJveFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gNjUxNjYxNTIpIHtcbiAgICAgIHJldHVybiBcImZpbGwtYm94XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImJvcmRlci1ib3hcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gIT09IC0yOTg2NTgxNzkpIHtcbiAgICBpZiAocGFyYW0gPj0gLTIyOTcxMDU0MSkge1xuICAgICAgcmV0dXJuIFwic3Ryb2tlLWJveFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjb250ZW50LWJveFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJtYXJnaW4tYm94XCI7XG4gIH1cbn1cblxudmFyIEdlb21ldHlCb3ggPSB7XG4gIG1hcmdpbkJveDogLyogbWFyZ2luQm94ICovLTI5ODY1ODE3OSxcbiAgYm9yZGVyQm94OiAvKiBib3JkZXJCb3ggKi85MzA3MjYzLFxuICBwYWRkaW5nQm94OiAvKiBwYWRkaW5nQm94ICovOTcyNTc1OTMwLFxuICBjb250ZW50Qm94OiAvKiBjb250ZW50Qm94ICovLTEwMDg4NDgzMDIsXG4gIGZpbGxCb3g6IC8qIGZpbGxCb3ggKi82NTE2NjE1MixcbiAgc3Ryb2tlQm94OiAvKiBzdHJva2VCb3ggKi8tMjI5NzEwNTQxLFxuICB2aWV3Qm94OiAvKiB2aWV3Qm94ICovNDgxMzY2MTgyLFxuICB0b1N0cmluZzogdG9TdHJpbmckODVcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDg2KHBhcmFtKSB7XG4gIHJldHVybiBcIm5vbmVcIjtcbn1cblxudmFyIENsaXBQYXRoID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckODZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDg3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA1ODk1OTI2OTApIHtcbiAgICByZXR1cm4gXCJ2aXNpYmxlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiaGlkZGVuXCI7XG4gIH1cbn1cblxudmFyIEJhY2tmYWNlVmlzaWJpbGl0eSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDg3XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4OChwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC05MjIwODY3MjgpIHtcbiAgICBpZiAocGFyYW0gPj0gLTg3ODc2Nzk5Nikge1xuICAgICAgcmV0dXJuIFwiaW5pdGlhbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfVxufVxuXG52YXIgRmxleCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDg4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4OShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNTg5NzAyMDQ1KSB7XG4gICAgcmV0dXJuIFwicHJlc2VydmUtM2RcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJmbGF0XCI7XG4gIH1cbn1cblxudmFyIFRyYW5zZm9ybVN0eWxlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckODlcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDkwKHBhcmFtKSB7XG4gIHJldHVybiBcIm5vbmVcIjtcbn1cblxudmFyIExpc3RTdHlsZUltYWdlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckOTBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDkxKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTUwNDc3NTkwMSkge1xuICAgICAgaWYgKHBhcmFtICE9PSAtMjcwOTYyODEwKSB7XG4gICAgICAgIGlmIChwYXJhbSA+PSAtNDY4MDA5ODYpIHtcbiAgICAgICAgICBpZiAocGFyYW0gPj0gNTYzODA5Mjg5KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJmYW5nc29uZ1wiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJmYW50YXN5XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtID49IC05NzY0MDU3OSkge1xuICAgICAgICAgIHJldHVybiBcInNlcmlmXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwic3lzdGVtLXVpXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImVtb2ppXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNzE4MzczMzM0KSB7XG4gICAgICBpZiAocGFyYW0gPj0gLTU1NTM2MzkwMSkge1xuICAgICAgICByZXR1cm4gXCJtb25vc3BhY2VcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInNhbnMtc2VyaWZcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC04NjI5ODU1MzEpIHtcbiAgICAgIHJldHVybiBcImN1cnNpdmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibWF0aFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckOTIocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtODY2MjQzOTQ5KSB7XG4gICAgaWYgKHBhcmFtID49IDcxNDk5MzY5OCkge1xuICAgICAgaWYgKHBhcmFtID49IDg4ODk2MDMzMykge1xuICAgICAgICByZXR1cm4gXCJibG9ja1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZmFsbGJhY2tcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDUxMDU3MDQwMCkge1xuICAgICAgcmV0dXJuIFwib3B0aW9uYWxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJzd2FwXCI7XG4gIH1cbn1cblxudmFyIHRvU3RyaW5nJDkzID0gdG9TdHJpbmckMTk7XG5cbnZhciBDb3VudGVyU3R5bGVUeXBlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckOTNcbn07XG5cbmZ1bmN0aW9uIGNvdW50ZXIoc3R5bGVPcHQsIG5hbWUpIHtcbiAgdmFyIHN0eWxlID0gc3R5bGVPcHQgIT09IHVuZGVmaW5lZCA/IHN0eWxlT3B0IDogLyogdW5zZXQgKi82NTMxOTM5NjE7XG4gIHJldHVybiAvKiBgY291bnRlciAqL1tcbiAgICAgICAgICA0OTI0MTY3NjQsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgc3R5bGVcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDk0KHBhcmFtKSB7XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICB2YXIgc3R5bGUgPSBtYXRjaFsxXTtcbiAgdmFyIGNvdW50ZXIgPSBtYXRjaFswXTtcbiAgaWYgKHN0eWxlICE9PSA2NTMxOTM5NjEpIHtcbiAgICByZXR1cm4gXCJjb3VudGVyKFwiICsgKGNvdW50ZXIgKyAoXCIsXCIgKyAodG9TdHJpbmckMTkoc3R5bGUpICsgXCIpXCIpKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY291bnRlcihcIiArIChjb3VudGVyICsgXCIpXCIpO1xuICB9XG59XG5cbnZhciBDb3VudGVyID0ge1xuICBjb3VudGVyOiBjb3VudGVyLFxuICB0b1N0cmluZzogdG9TdHJpbmckOTRcbn07XG5cbmZ1bmN0aW9uIGNvdW50ZXJzKHN0eWxlT3B0LCBzZXBhcmF0b3JPcHQsIG5hbWUpIHtcbiAgdmFyIHN0eWxlID0gc3R5bGVPcHQgIT09IHVuZGVmaW5lZCA/IHN0eWxlT3B0IDogLyogdW5zZXQgKi82NTMxOTM5NjE7XG4gIHZhciBzZXBhcmF0b3IgPSBzZXBhcmF0b3JPcHQgIT09IHVuZGVmaW5lZCA/IHNlcGFyYXRvck9wdCA6IFwiXCI7XG4gIHJldHVybiAvKiBgY291bnRlcnMgKi9bXG4gICAgICAgICAgMjg3MjcyNDM5LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHNlcGFyYXRvcixcbiAgICAgICAgICAgIHN0eWxlXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ5NShwYXJhbSkge1xuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgdmFyIHN0eWxlID0gbWF0Y2hbMl07XG4gIHZhciBzZXBhcmF0b3IgPSBtYXRjaFsxXTtcbiAgdmFyIG5hbWUgPSBtYXRjaFswXTtcbiAgaWYgKHN0eWxlICE9PSA2NTMxOTM5NjEpIHtcbiAgICByZXR1cm4gXCJjb3VudGVycyhcIiArIChuYW1lICsgKFwiLFxcXCJcIiArIChzZXBhcmF0b3IgKyAoXCJcXFwiLFwiICsgKHRvU3RyaW5nJDE5KHN0eWxlKSArIFwiKVwiKSkpKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY291bnRlcnMoXCIgKyAobmFtZSArIChcIixcXFwiXCIgKyAoc2VwYXJhdG9yICsgXCJcXFwiKVwiKSkpO1xuICB9XG59XG5cbnZhciBDb3VudGVycyA9IHtcbiAgY291bnRlcnM6IGNvdW50ZXJzLFxuICB0b1N0cmluZzogdG9TdHJpbmckOTVcbn07XG5cbmZ1bmN0aW9uIGluY3JlbWVudCh2YWx1ZU9wdCwgbmFtZSkge1xuICB2YXIgdmFsdWUgPSB2YWx1ZU9wdCAhPT0gdW5kZWZpbmVkID8gdmFsdWVPcHQgOiAxO1xuICByZXR1cm4gLyogYGluY3JlbWVudCAqL1tcbiAgICAgICAgICA4Mzg3OTY4NDcsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDk2KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbiAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gIHJldHVybiBtYXRjaFswXSArIChcIiBcIiArIFN0cmluZyhtYXRjaFsxXSkpO1xufVxuXG52YXIgQ291bnRlckluY3JlbWVudCA9IHtcbiAgaW5jcmVtZW50OiBpbmNyZW1lbnQsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ5NlxufTtcblxuZnVuY3Rpb24gcmVzZXQodmFsdWVPcHQsIG5hbWUpIHtcbiAgdmFyIHZhbHVlID0gdmFsdWVPcHQgIT09IHVuZGVmaW5lZCA/IHZhbHVlT3B0IDogMDtcbiAgcmV0dXJuIC8qIGByZXNldCAqL1tcbiAgICAgICAgICAtNDIzMDgxNTIxLFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ5NyhwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICByZXR1cm4gbWF0Y2hbMF0gKyAoXCIgXCIgKyBTdHJpbmcobWF0Y2hbMV0pKTtcbn1cblxudmFyIENvdW50ZXJSZXNldCA9IHtcbiAgcmVzZXQ6IHJlc2V0LFxuICB0b1N0cmluZzogdG9TdHJpbmckOTdcbn07XG5cbmZ1bmN0aW9uIHNldCh2YWx1ZU9wdCwgbmFtZSkge1xuICB2YXIgdmFsdWUgPSB2YWx1ZU9wdCAhPT0gdW5kZWZpbmVkID8gdmFsdWVPcHQgOiAwO1xuICByZXR1cm4gLyogYHNldCAqL1tcbiAgICAgICAgICA1NzQxNDc0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ5OChwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICByZXR1cm4gbWF0Y2hbMF0gKyAoXCIgXCIgKyBTdHJpbmcobWF0Y2hbMV0pKTtcbn1cblxudmFyIENvdW50ZXJTZXQgPSB7XG4gIHNldDogc2V0LFxuICB0b1N0cmluZzogdG9TdHJpbmckOThcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDk5KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTc4Njk4NDE3NCkge1xuICAgICAgaWYgKHBhcmFtID49IDgxMjIxNjg3MSkge1xuICAgICAgICBpZiAocGFyYW0gPj0gODUxODcwMzUzKSB7XG4gICAgICAgICAgcmV0dXJuIFwibm8tb3Blbi1xdW90ZVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID49IDY4NDk0OTYwNCkge1xuICAgICAgICByZXR1cm4gXCJjbG9zZS1xdW90ZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwib3Blbi1xdW90ZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTkyMjA4NjcyOCkge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJuby1jbG9zZS1xdW90ZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbVswXSA+PSAtODU2MDQ0MzcxKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiICsgKFN0cmluZyhwYXJhbVsxXSkgKyBcIlxcXCJcIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXR0cihcIiArIChwYXJhbVsxXSArIFwiKVwiKTtcbiAgfVxufVxuXG52YXIgQ29udGVudCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDk5XG59O1xuXG52YXIgVGltaW5nRnVuY3Rpb24gPSB7XG4gIGxpbmVhcjogLyogbGluZWFyICovLTMyNTAzNzU5NSxcbiAgZWFzZTogLyogZWFzZSAqLy0xMDIyNTg3OTIyLFxuICBlYXNlSW46IC8qIGVhc2VJbiAqLzEzODAyNzg5MSxcbiAgZWFzZU91dDogLyogZWFzZU91dCAqLzcxNTc0ODY3MixcbiAgZWFzZUluT3V0OiAvKiBlYXNlSW5PdXQgKi8tOTYwNjUxNTU3LFxuICBzdGVwU3RhcnQ6IC8qIHN0ZXBTdGFydCAqLy0xOTM1MjUzODYsXG4gIHN0ZXBFbmQ6IC8qIHN0ZXBFbmQgKi8yMDkzMzYxNSxcbiAgc3RlcHM6IHN0ZXBzLFxuICBjdWJpY0JlemllcjogY3ViaWNCZXppZXIsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxN1xufTtcblxudmFyIFRyYW5zZm9ybSA9IHtcbiAgdHJhbnNsYXRlOiB0cmFuc2xhdGUsXG4gIHRyYW5zbGF0ZTNkOiB0cmFuc2xhdGUzZCxcbiAgdHJhbnNsYXRlWDogdHJhbnNsYXRlWCxcbiAgdHJhbnNsYXRlWTogdHJhbnNsYXRlWSxcbiAgdHJhbnNsYXRlWjogdHJhbnNsYXRlWixcbiAgc2NhbGU6IHNjYWxlLFxuICBzY2FsZTNkOiBzY2FsZTNkLFxuICBzY2FsZVg6IHNjYWxlWCxcbiAgc2NhbGVZOiBzY2FsZVksXG4gIHNjYWxlWjogc2NhbGVaLFxuICByb3RhdGU6IHJvdGF0ZSxcbiAgcm90YXRlM2Q6IHJvdGF0ZTNkLFxuICByb3RhdGVYOiByb3RhdGVYLFxuICByb3RhdGVZOiByb3RhdGVZLFxuICByb3RhdGVaOiByb3RhdGVaLFxuICBza2V3OiBza2V3LFxuICBza2V3WDogc2tld1gsXG4gIHNrZXdZOiBza2V3WSxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDIzXG59O1xuXG52YXIgQ29sb3IgPSB7XG4gIHJnYjogcmdiLFxuICByZ2JhOiByZ2JhLFxuICBoc2w6IGhzbCxcbiAgaHNsYTogaHNsYSxcbiAgaGV4OiBoZXgsXG4gIHRyYW5zcGFyZW50OiAvKiB0cmFuc3BhcmVudCAqLzU4MjYyNjEzMCxcbiAgY3VycmVudENvbG9yOiAvKiBjdXJyZW50Q29sb3IgKi8yOTIwNTA1MzgsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyOVxufTtcblxudmFyIEJhY2tkcm9wRmlsdGVyID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNjdcbn07XG5cbnZhciBHcmFkaWVudCA9IHtcbiAgbGluZWFyR3JhZGllbnQ6IGxpbmVhckdyYWRpZW50LFxuICByYWRpYWxHcmFkaWVudDogcmFkaWFsR3JhZGllbnQsXG4gIHJlcGVhdGluZ0xpbmVhckdyYWRpZW50OiByZXBlYXRpbmdMaW5lYXJHcmFkaWVudCxcbiAgcmVwZWF0aW5nUmFkaWFsR3JhZGllbnQ6IHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50LFxuICB0b1N0cmluZzogdG9TdHJpbmckODNcbn07XG5cbnZhciBGb250RmFtaWx5TmFtZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDkxXG59O1xuXG52YXIgRm9udERpc3BsYXkgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ5MlxufTtcblxuZXhwb3J0IHtcbiAgQ2FzY2FkaW5nICxcbiAgVGltZSAsXG4gIFBlcmNlbnRhZ2UgLFxuICBVcmwgLFxuICBMZW5ndGggLFxuICBBbmdsZSAsXG4gIERpcmVjdGlvbiAsXG4gIFBvc2l0aW9uICxcbiAgUmVzaXplICxcbiAgRm9udFZhcmlhbnQgLFxuICBGb250U3R5bGUgLFxuICBGbGV4QmFzaXMgLFxuICBPdmVyZmxvdyAsXG4gIE1hcmdpbiAsXG4gIEdyaWRBdXRvRmxvdyAsXG4gIEdyaWRDb2x1bW5HYXAgLFxuICBWZXJ0aWNhbEFsaWduICxcbiAgVGltaW5nRnVuY3Rpb24gLFxuICBSZXBlYXRWYWx1ZSAsXG4gIExpc3RTdHlsZVR5cGUgLFxuICBMaXN0U3R5bGVQb3NpdGlvbiAsXG4gIE91dGxpbmVTdHlsZSAsXG4gIEZvbnRXZWlnaHQgLFxuICBUcmFuc2Zvcm0gLFxuICBBbmltYXRpb25EaXJlY3Rpb24gLFxuICBBbmltYXRpb25GaWxsTW9kZSAsXG4gIEFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ICxcbiAgQW5pbWF0aW9uUGxheVN0YXRlICxcbiAgQ3Vyc29yICxcbiAgQ29sb3IgLFxuICBCb3JkZXJTdHlsZSAsXG4gIFBvaW50ZXJFdmVudHMgLFxuICBQZXJzcGVjdGl2ZSAsXG4gIExldHRlclNwYWNpbmcgLFxuICBMaW5lSGVpZ2h0ICxcbiAgV29yZFNwYWNpbmcgLFxuICBEaXNwbGF5T3V0c2lkZSAsXG4gIERpc3BsYXlJbnNpZGUgLFxuICBEaXNwbGF5TGlzdEl0ZW0gLFxuICBEaXNwbGF5SW50ZXJuYWwgLFxuICBEaXNwbGF5Qm94ICxcbiAgRGlzcGxheUxlZ2FjeSAsXG4gIEp1c3RpZnlTZWxmICxcbiAgUG9zaXRpb25hbEFsaWdubWVudCAsXG4gIEJhc2VsaW5lQWxpZ25tZW50ICxcbiAgTm9ybWFsQWxpZ25tZW50ICxcbiAgRGlzdHJpYnV0ZWRBbGlnbm1lbnQgLFxuICBUZXh0QWxpZ24gLFxuICBXb3JkQnJlYWsgLFxuICBXaGl0ZVNwYWNlICxcbiAgQWxpZ25JdGVtcyAsXG4gIEFsaWduU2VsZiAsXG4gIEFsaWduQ29udGVudCAsXG4gIE9iamVjdEZpdCAsXG4gIENsZWFyICxcbiAgRmxvYXQgLFxuICBWaXNpYmlsaXR5ICxcbiAgVGFibGVMYXlvdXQgLFxuICBCb3JkZXJDb2xsYXBzZSAsXG4gIEZsZXhXcmFwICxcbiAgRmxleERpcmVjdGlvbiAsXG4gIEJveFNpemluZyAsXG4gIENvbHVtbkNvdW50ICxcbiAgVXNlclNlbGVjdCAsXG4gIFRleHRUcmFuc2Zvcm0gLFxuICBHcmlkVGVtcGxhdGVBcmVhcyAsXG4gIEdyaWRBcmVhICxcbiAgQmFja2Ryb3BGaWx0ZXIgLFxuICBCYWNrZ3JvdW5kQXR0YWNobWVudCAsXG4gIEJhY2tncm91bmRDbGlwICxcbiAgQmFja2dyb3VuZE9yaWdpbiAsXG4gIEJhY2tncm91bmRQb3NpdGlvbiAsXG4gIEJhY2tncm91bmRSZXBlYXQgLFxuICBUZXh0T3ZlcmZsb3cgLFxuICBUZXh0RGVjb3JhdGlvbkxpbmUgLFxuICBUZXh0RGVjb3JhdGlvblN0eWxlICxcbiAgV2lkdGggLFxuICBNYXhXaWR0aCAsXG4gIEhlaWdodCAsXG4gIE1heEhlaWdodCAsXG4gIE92ZXJmbG93V3JhcCAsXG4gIEdyYWRpZW50ICxcbiAgQmFja2dyb3VuZEltYWdlICxcbiAgR2VvbWV0eUJveCAsXG4gIENsaXBQYXRoICxcbiAgQmFja2ZhY2VWaXNpYmlsaXR5ICxcbiAgRmxleCAsXG4gIFRyYW5zZm9ybVN0eWxlICxcbiAgTGlzdFN0eWxlSW1hZ2UgLFxuICBGb250RmFtaWx5TmFtZSAsXG4gIEZvbnREaXNwbGF5ICxcbiAgQ291bnRlclN0eWxlVHlwZSAsXG4gIENvdW50ZXIgLFxuICBDb3VudGVycyAsXG4gIENvdW50ZXJJbmNyZW1lbnQgLFxuICBDb3VudGVyUmVzZXQgLFxuICBDb3VudGVyU2V0ICxcbiAgQ29udGVudCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDc3NfQXRvbWljVHlwZXMgZnJvbSBcIi4vQ3NzX0F0b21pY1R5cGVzLmpzXCI7XG5cbnZhciBhbGljZWJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjBGOEZGXCIpO1xuXG52YXIgYW50aXF1ZXdoaXRlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZBRUJEN1wiKTtcblxudmFyIGFxdWEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDBGRkZGXCIpO1xuXG52YXIgYXF1YW1hcmluZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI3RkZGRDRcIik7XG5cbnZhciBhenVyZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGMEZGRkZcIik7XG5cbnZhciBiZWlnZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGNUY1RENcIik7XG5cbnZhciBiaXNxdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZFNEM0XCIpO1xuXG52YXIgYmxhY2sgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDAwMDAwXCIpO1xuXG52YXIgYmxhbmNoZWRhbG1vbmQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZFQkNEXCIpO1xuXG52YXIgYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDAwRkZcIik7XG5cbnZhciBibHVldmlvbGV0ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjhBMkJFMlwiKTtcblxudmFyIGJyb3duID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkE1MkEyQVwiKTtcblxudmFyIGJ1cmx5d29vZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJERUI4ODdcIik7XG5cbnZhciBjYWRldGJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNUY5RUEwXCIpO1xuXG52YXIgY2hhcnRyZXVzZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI3RkZGMDBcIik7XG5cbnZhciBjaG9jb2xhdGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRDI2OTFFXCIpO1xuXG52YXIgY29yYWwgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkY3RjUwXCIpO1xuXG52YXIgY29ybmZsb3dlcmJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNjQ5NUVEXCIpO1xuXG52YXIgY29ybnNpbGsgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGOERDXCIpO1xuXG52YXIgY3JpbXNvbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEQzE0M0NcIik7XG5cbnZhciBjeWFuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwRkZGRlwiKTtcblxudmFyIGRhcmtibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwMDA4QlwiKTtcblxudmFyIGRhcmtjeWFuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwOEI4QlwiKTtcblxudmFyIGRhcmtnb2xkZW5yb2QgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQjg4NjBCXCIpO1xuXG52YXIgZGFya2dyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQTlBOUE5XCIpO1xuXG52YXIgZGFya2dyZWVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwNjQwMFwiKTtcblxudmFyIGRhcmtncmV5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkE5QTlBOVwiKTtcblxudmFyIGRhcmtraGFraSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJCREI3NkJcIik7XG5cbnZhciBkYXJrbWFnZW50YSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4QjAwOEJcIik7XG5cbnZhciBkYXJrb2xpdmVncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI1NTZCMkZcIik7XG5cbnZhciBkYXJrb3JhbmdlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGOEMwMFwiKTtcblxudmFyIGRhcmtvcmNoaWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOTkzMkNDXCIpO1xuXG52YXIgZGFya3JlZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4QjAwMDBcIik7XG5cbnZhciBkYXJrc2FsbW9uID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkU5OTY3QVwiKTtcblxudmFyIGRhcmtzZWFncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4RkJDOEZcIik7XG5cbnZhciBkYXJrc2xhdGVibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjQ4M0Q4QlwiKTtcblxudmFyIGRhcmtzbGF0ZWdyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMkY0RjRGXCIpO1xuXG52YXIgZGFya3NsYXRlZ3JleSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIyRjRGNEZcIik7XG5cbnZhciBkYXJrdHVycXVvaXNlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwQ0VEMVwiKTtcblxudmFyIGRhcmt2aW9sZXQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOTQwMEQzXCIpO1xuXG52YXIgZGVlcHBpbmsgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkYxNDkzXCIpO1xuXG52YXIgZGVlcHNreWJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDBCRkZGXCIpO1xuXG52YXIgZGltZ3JheSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI2OTY5NjlcIik7XG5cbnZhciBkaW1ncmV5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjY5Njk2OVwiKTtcblxudmFyIGRvZGdlcmJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMUU5MEZGXCIpO1xuXG52YXIgZmlyZWJyaWNrID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkIyMjIyMlwiKTtcblxudmFyIGZsb3JhbHdoaXRlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRkFGMFwiKTtcblxudmFyIGZvcmVzdGdyZWVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjIyOEIyMlwiKTtcblxudmFyIGZ1Y2hzaWEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkYwMEZGXCIpO1xuXG52YXIgZ2FpbnNib3JvID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkRDRENEQ1wiKTtcblxudmFyIGdob3N0d2hpdGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjhGOEZGXCIpO1xuXG52YXIgZ29sZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkQ3MDBcIik7XG5cbnZhciBnb2xkZW5yb2QgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiREFBNTIwXCIpO1xuXG52YXIgZ3JheSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4MDgwODBcIik7XG5cbnZhciBncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDgwMDBcIik7XG5cbnZhciBncmVlbnllbGxvdyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJBREZGMkZcIik7XG5cbnZhciBncmV5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjgwODA4MFwiKTtcblxudmFyIGhvbmV5ZGV3ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkYwRkZGMFwiKTtcblxudmFyIGhvdHBpbmsgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkY2OUI0XCIpO1xuXG52YXIgaW5kaWFucmVkID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkNENUM1Q1wiKTtcblxudmFyIGluZGlnbyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI0QjAwODJcIik7XG5cbnZhciBpdm9yeSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkZGRjBcIik7XG5cbnZhciBraGFraSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGMEU2OENcIik7XG5cbnZhciBsYXZlbmRlciA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJFNkU2RkFcIik7XG5cbnZhciBsYXZlbmRlcmJsdXNoID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRjBGNVwiKTtcblxudmFyIGxhd25ncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI3Q0ZDMDBcIik7XG5cbnZhciBsZW1vbmNoaWZmb24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGQUNEXCIpO1xuXG52YXIgbGlnaHRibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkFERDhFNlwiKTtcblxudmFyIGxpZ2h0Y29yYWwgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjA4MDgwXCIpO1xuXG52YXIgbGlnaHRjeWFuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkUwRkZGRlwiKTtcblxudmFyIGxpZ2h0Z29sZGVucm9keWVsbG93ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZBRkFEMlwiKTtcblxudmFyIGxpZ2h0Z3JheSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEM0QzRDNcIik7XG5cbnZhciBsaWdodGdyZWVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjkwRUU5MFwiKTtcblxudmFyIGxpZ2h0Z3JleSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEM0QzRDNcIik7XG5cbnZhciBsaWdodHBpbmsgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZCNkMxXCIpO1xuXG52YXIgbGlnaHRzYWxtb24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZBMDdBXCIpO1xuXG52YXIgbGlnaHRzZWFncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIyMEIyQUFcIik7XG5cbnZhciBsaWdodHNreWJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiODdDRUZBXCIpO1xuXG52YXIgbGlnaHRzbGF0ZWdyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNzc4ODk5XCIpO1xuXG52YXIgbGlnaHRzbGF0ZWdyZXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNzc4ODk5XCIpO1xuXG52YXIgbGlnaHRzdGVlbGJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQjBDNERFXCIpO1xuXG52YXIgbGlnaHR5ZWxsb3cgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGRkUwXCIpO1xuXG52YXIgbGltZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMEZGMDBcIik7XG5cbnZhciBsaW1lZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMzJDRDMyXCIpO1xuXG52YXIgbGluZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkFGMEU2XCIpO1xuXG52YXIgbWFnZW50YSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRjAwRkZcIik7XG5cbnZhciBtYXJvb24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiODAwMDAwXCIpO1xuXG52YXIgbWVkaXVtYXF1YW1hcmluZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI2NkNEQUFcIik7XG5cbnZhciBtZWRpdW1ibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwMDBDRFwiKTtcblxudmFyIG1lZGl1bW9yY2hpZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJCQTU1RDNcIik7XG5cbnZhciBtZWRpdW1wdXJwbGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOTM3MERCXCIpO1xuXG52YXIgbWVkaXVtc2VhZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiM0NCMzcxXCIpO1xuXG52YXIgbWVkaXVtc2xhdGVibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjdCNjhFRVwiKTtcblxudmFyIG1lZGl1bXNwcmluZ2dyZWVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwRkE5QVwiKTtcblxudmFyIG1lZGl1bXR1cnF1b2lzZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI0OEQxQ0NcIik7XG5cbnZhciBtZWRpdW12aW9sZXRyZWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQzcxNTg1XCIpO1xuXG52YXIgbWlkbmlnaHRibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjE5MTk3MFwiKTtcblxudmFyIG1pbnRjcmVhbSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGNUZGRkFcIik7XG5cbnZhciBtaXN0eXJvc2UgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZFNEUxXCIpO1xuXG52YXIgbW9jY2FzaW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZFNEI1XCIpO1xuXG52YXIgbmF2YWpvd2hpdGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZERUFEXCIpO1xuXG52YXIgbmF2eSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDAwODBcIik7XG5cbnZhciBvbGRsYWNlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZERjVFNlwiKTtcblxudmFyIG9saXZlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjgwODAwMFwiKTtcblxudmFyIG9saXZlZHJhYiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI2QjhFMjNcIik7XG5cbnZhciBvcmFuZ2UgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZBNTAwXCIpO1xuXG52YXIgb3JhbmdlcmVkID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGNDUwMFwiKTtcblxudmFyIG9yY2hpZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEQTcwRDZcIik7XG5cbnZhciBwYWxlZ29sZGVucm9kID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkVFRThBQVwiKTtcblxudmFyIHBhbGVncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI5OEZCOThcIik7XG5cbnZhciBwYWxldHVycXVvaXNlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkFGRUVFRVwiKTtcblxudmFyIHBhbGV2aW9sZXRyZWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiREI3MDkzXCIpO1xuXG52YXIgcGFwYXlhd2hpcCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkVGRDVcIik7XG5cbnZhciBwZWFjaHB1ZmYgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZEQUI5XCIpO1xuXG52YXIgcGVydSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJDRDg1M0ZcIik7XG5cbnZhciBwaW5rID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGQzBDQlwiKTtcblxudmFyIHBsdW0gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRERBMEREXCIpO1xuXG52YXIgcG93ZGVyYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJCMEUwRTZcIik7XG5cbnZhciBwdXJwbGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiODAwMDgwXCIpO1xuXG52YXIgcmViZWNjYXB1cnBsZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI2NjMzOTlcIik7XG5cbnZhciByZWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkYwMDAwXCIpO1xuXG52YXIgcm9zeWJyb3duID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkJDOEY4RlwiKTtcblxudmFyIHJveWFsYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI0MTY5RTFcIik7XG5cbnZhciBzYWRkbGVicm93biA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4QjQ1MTNcIik7XG5cbnZhciBzYWxtb24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkE4MDcyXCIpO1xuXG52YXIgc2FuZHlicm93biA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGNEE0NjBcIik7XG5cbnZhciBzZWFncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIyRThCNTdcIik7XG5cbnZhciBzZWFzaGVsbCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkY1RUVcIik7XG5cbnZhciBzaWVubmEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQTA1MjJEXCIpO1xuXG52YXIgc2lsdmVyID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkMwQzBDMFwiKTtcblxudmFyIHNreWJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiODdDRUVCXCIpO1xuXG52YXIgc2xhdGVibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjZBNUFDRFwiKTtcblxudmFyIHNsYXRlZ3JheSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI3MDgwOTBcIik7XG5cbnZhciBzbGF0ZWdyZXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNzA4MDkwXCIpO1xuXG52YXIgc25vdyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkZBRkFcIik7XG5cbnZhciBzcHJpbmdncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMEZGN0ZcIik7XG5cbnZhciBzdGVlbGJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNDY4MkI0XCIpO1xuXG52YXIgdGFuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkQyQjQ4Q1wiKTtcblxudmFyIHRlYWwgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDA4MDgwXCIpO1xuXG52YXIgdGhpc3RsZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEOEJGRDhcIik7XG5cbnZhciB0b21hdG8gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkY2MzQ3XCIpO1xuXG52YXIgdHVycXVvaXNlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjQwRTBEMFwiKTtcblxudmFyIHZpb2xldCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJFRTgyRUVcIik7XG5cbnZhciB3aGVhdCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGNURFQjNcIik7XG5cbnZhciB3aGl0ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkZGRkZcIik7XG5cbnZhciB3aGl0ZXNtb2tlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkY1RjVGNVwiKTtcblxudmFyIHllbGxvdyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkZGMDBcIik7XG5cbnZhciB5ZWxsb3dncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI5QUNEM1wiKTtcblxudmFyIHRyYW5zcGFyZW50ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRyYW5zcGFyZW50O1xuXG5leHBvcnQge1xuICBhbGljZWJsdWUgLFxuICBhbnRpcXVld2hpdGUgLFxuICBhcXVhICxcbiAgYXF1YW1hcmluZSAsXG4gIGF6dXJlICxcbiAgYmVpZ2UgLFxuICBiaXNxdWUgLFxuICBibGFjayAsXG4gIGJsYW5jaGVkYWxtb25kICxcbiAgYmx1ZSAsXG4gIGJsdWV2aW9sZXQgLFxuICBicm93biAsXG4gIGJ1cmx5d29vZCAsXG4gIGNhZGV0Ymx1ZSAsXG4gIGNoYXJ0cmV1c2UgLFxuICBjaG9jb2xhdGUgLFxuICBjb3JhbCAsXG4gIGNvcm5mbG93ZXJibHVlICxcbiAgY29ybnNpbGsgLFxuICBjcmltc29uICxcbiAgY3lhbiAsXG4gIGRhcmtibHVlICxcbiAgZGFya2N5YW4gLFxuICBkYXJrZ29sZGVucm9kICxcbiAgZGFya2dyYXkgLFxuICBkYXJrZ3JlZW4gLFxuICBkYXJrZ3JleSAsXG4gIGRhcmtraGFraSAsXG4gIGRhcmttYWdlbnRhICxcbiAgZGFya29saXZlZ3JlZW4gLFxuICBkYXJrb3JhbmdlICxcbiAgZGFya29yY2hpZCAsXG4gIGRhcmtyZWQgLFxuICBkYXJrc2FsbW9uICxcbiAgZGFya3NlYWdyZWVuICxcbiAgZGFya3NsYXRlYmx1ZSAsXG4gIGRhcmtzbGF0ZWdyYXkgLFxuICBkYXJrc2xhdGVncmV5ICxcbiAgZGFya3R1cnF1b2lzZSAsXG4gIGRhcmt2aW9sZXQgLFxuICBkZWVwcGluayAsXG4gIGRlZXBza3libHVlICxcbiAgZGltZ3JheSAsXG4gIGRpbWdyZXkgLFxuICBkb2RnZXJibHVlICxcbiAgZmlyZWJyaWNrICxcbiAgZmxvcmFsd2hpdGUgLFxuICBmb3Jlc3RncmVlbiAsXG4gIGZ1Y2hzaWEgLFxuICBnYWluc2Jvcm8gLFxuICBnaG9zdHdoaXRlICxcbiAgZ29sZCAsXG4gIGdvbGRlbnJvZCAsXG4gIGdyYXkgLFxuICBncmVlbiAsXG4gIGdyZWVueWVsbG93ICxcbiAgZ3JleSAsXG4gIGhvbmV5ZGV3ICxcbiAgaG90cGluayAsXG4gIGluZGlhbnJlZCAsXG4gIGluZGlnbyAsXG4gIGl2b3J5ICxcbiAga2hha2kgLFxuICBsYXZlbmRlciAsXG4gIGxhdmVuZGVyYmx1c2ggLFxuICBsYXduZ3JlZW4gLFxuICBsZW1vbmNoaWZmb24gLFxuICBsaWdodGJsdWUgLFxuICBsaWdodGNvcmFsICxcbiAgbGlnaHRjeWFuICxcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3cgLFxuICBsaWdodGdyYXkgLFxuICBsaWdodGdyZWVuICxcbiAgbGlnaHRncmV5ICxcbiAgbGlnaHRwaW5rICxcbiAgbGlnaHRzYWxtb24gLFxuICBsaWdodHNlYWdyZWVuICxcbiAgbGlnaHRza3libHVlICxcbiAgbGlnaHRzbGF0ZWdyYXkgLFxuICBsaWdodHNsYXRlZ3JleSAsXG4gIGxpZ2h0c3RlZWxibHVlICxcbiAgbGlnaHR5ZWxsb3cgLFxuICBsaW1lICxcbiAgbGltZWdyZWVuICxcbiAgbGluZW4gLFxuICBtYWdlbnRhICxcbiAgbWFyb29uICxcbiAgbWVkaXVtYXF1YW1hcmluZSAsXG4gIG1lZGl1bWJsdWUgLFxuICBtZWRpdW1vcmNoaWQgLFxuICBtZWRpdW1wdXJwbGUgLFxuICBtZWRpdW1zZWFncmVlbiAsXG4gIG1lZGl1bXNsYXRlYmx1ZSAsXG4gIG1lZGl1bXNwcmluZ2dyZWVuICxcbiAgbWVkaXVtdHVycXVvaXNlICxcbiAgbWVkaXVtdmlvbGV0cmVkICxcbiAgbWlkbmlnaHRibHVlICxcbiAgbWludGNyZWFtICxcbiAgbWlzdHlyb3NlICxcbiAgbW9jY2FzaW4gLFxuICBuYXZham93aGl0ZSAsXG4gIG5hdnkgLFxuICBvbGRsYWNlICxcbiAgb2xpdmUgLFxuICBvbGl2ZWRyYWIgLFxuICBvcmFuZ2UgLFxuICBvcmFuZ2VyZWQgLFxuICBvcmNoaWQgLFxuICBwYWxlZ29sZGVucm9kICxcbiAgcGFsZWdyZWVuICxcbiAgcGFsZXR1cnF1b2lzZSAsXG4gIHBhbGV2aW9sZXRyZWQgLFxuICBwYXBheWF3aGlwICxcbiAgcGVhY2hwdWZmICxcbiAgcGVydSAsXG4gIHBpbmsgLFxuICBwbHVtICxcbiAgcG93ZGVyYmx1ZSAsXG4gIHB1cnBsZSAsXG4gIHJlYmVjY2FwdXJwbGUgLFxuICByZWQgLFxuICByb3N5YnJvd24gLFxuICByb3lhbGJsdWUgLFxuICBzYWRkbGVicm93biAsXG4gIHNhbG1vbiAsXG4gIHNhbmR5YnJvd24gLFxuICBzZWFncmVlbiAsXG4gIHNlYXNoZWxsICxcbiAgc2llbm5hICxcbiAgc2lsdmVyICxcbiAgc2t5Ymx1ZSAsXG4gIHNsYXRlYmx1ZSAsXG4gIHNsYXRlZ3JheSAsXG4gIHNsYXRlZ3JleSAsXG4gIHNub3cgLFxuICBzcHJpbmdncmVlbiAsXG4gIHN0ZWVsYmx1ZSAsXG4gIHRhbiAsXG4gIHRlYWwgLFxuICB0aGlzdGxlICxcbiAgdG9tYXRvICxcbiAgdHVycXVvaXNlICxcbiAgdmlvbGV0ICxcbiAgd2hlYXQgLFxuICB3aGl0ZSAsXG4gIHdoaXRlc21va2UgLFxuICB5ZWxsb3cgLFxuICB5ZWxsb3dncmVlbiAsXG4gIHRyYW5zcGFyZW50ICxcbiAgXG59XG4vKiBhbGljZWJsdWUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBMaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2xpc3QuanNcIjtcbmltcG9ydCAqIGFzICQkQXJyYXkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgJCRTdHJpbmcgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvc3RyaW5nLmpzXCI7XG5pbXBvcnQgKiBhcyBKc19kaWN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2pzX2RpY3QuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0xpc3QuanNcIjtcbmltcG9ydCAqIGFzIEpzX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9qc19vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIENzc19Db2xvcnMgZnJvbSBcIi4vQ3NzX0NvbG9ycy5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9PcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9PcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIENzc19BdG9taWNUeXBlcyBmcm9tIFwiLi9Dc3NfQXRvbWljVHlwZXMuanNcIjtcblxuZnVuY3Rpb24gcnVsZVRvRGljdChkaWN0LCBydWxlKSB7XG4gIHN3aXRjaCAocnVsZS50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBEICovMCA6XG4gICAgICAgIHZhciB2YWx1ZSA9IHJ1bGVbMV07XG4gICAgICAgIHZhciBuYW1lID0gcnVsZVswXTtcbiAgICAgICAgaWYgKG5hbWUgPT09IFwiY29udGVudFwiKSB7XG4gICAgICAgICAgZGljdFtuYW1lXSA9IHZhbHVlID09PSBcIlwiID8gXCJcXFwiXFxcIlwiIDogdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGljdFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgLyogUyAqLzEgOlxuICAgICAgICBkaWN0W3J1bGVbMF1dID0gdG9Kc29uKHJ1bGVbMV0pO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIFBzZXVkb0NsYXNzICovMiA6XG4gICAgICAgIGRpY3RbXCI6XCIgKyBydWxlWzBdXSA9IHRvSnNvbihydWxlWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBQc2V1ZG9DbGFzc1BhcmFtICovMyA6XG4gICAgICAgIGRpY3RbXCI6XCIgKyAocnVsZVswXSArIChcIihcIiArIChydWxlWzFdICsgXCIpXCIpKSldID0gdG9Kc29uKHJ1bGVbMl0pO1xuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICByZXR1cm4gZGljdDtcbn1cblxuZnVuY3Rpb24gdG9Kc29uKHJ1bGVzKSB7XG4gIHJldHVybiBCZWx0X0xpc3QucmVkdWNlKHJ1bGVzLCB7IH0sIHJ1bGVUb0RpY3QpO1xufVxuXG5mdW5jdGlvbiBhZGRTdG9wKGRpY3QsIHBhcmFtKSB7XG4gIGRpY3RbcGFyYW1bMF0udG9TdHJpbmcoKSArIFwiJVwiXSA9IHRvSnNvbihwYXJhbVsxXSk7XG4gIHJldHVybiBkaWN0O1xufVxuXG5mdW5jdGlvbiBqb2luKHN0cmluZ3MsIHNlcGFyYXRvcikge1xuICB2YXIgX3N0cmluZ3MgPSBzdHJpbmdzO1xuICB2YXIgX2FjYyA9IFwiXCI7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICB2YXIgc3RyaW5ncyQxID0gX3N0cmluZ3M7XG4gICAgaWYgKCFzdHJpbmdzJDEpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHZhciB4cyA9IHN0cmluZ3MkMVsxXTtcbiAgICB2YXIgeCA9IHN0cmluZ3MkMVswXTtcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gYWNjICsgeDtcbiAgICB9XG4gICAgX2FjYyA9IGFjYyArICh4ICsgc2VwYXJhdG9yKTtcbiAgICBfc3RyaW5ncyA9IHhzO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2FscGhhKHBhcmFtKSB7XG4gIGlmIChwYXJhbVswXSA+PSA1NDk2MzkwKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiVcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2Zfc3RvcHMoc3RvcHMpIHtcbiAgcmV0dXJuIGpvaW4oQmVsdF9MaXN0Lm1hcChzdG9wcywgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHBhcmFtWzFdKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocGFyYW1bMF0pKTtcbiAgICAgICAgICAgICAgICAgIH0pKSwgXCIsIFwiKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2JhY2tncm91bmQoYmcpIHtcbiAgaWYgKHR5cGVvZiBiZyA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChiZyAhPT0gMjkyMDUwNTM4KSB7XG4gICAgICBpZiAoYmcgPj0gNTgyNjI2MTMwKSB7XG4gICAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImN1cnJlbnRDb2xvclwiO1xuICAgIH1cbiAgfVxuICB2YXIgdmFyaWFudCA9IGJnWzBdO1xuICBpZiAodmFyaWFudCA+PSA1MTk3NTY5KSB7XG4gICAgaWYgKHZhcmlhbnQgIT09IDU2OTIxNzMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDExOTU0ODkxMSkge1xuICAgICAgICBpZiAodmFyaWFudCA8IDYxNjM3OTYzNykge1xuICAgICAgICAgIHJldHVybiBcInJhZGlhbC1ncmFkaWVudChcIiArIChzdHJpbmdfb2Zfc3RvcHMoYmdbMV0pICsgXCIpXCIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXRjaCA9IGJnWzFdO1xuICAgICAgICByZXR1cm4gXCJsaW5lYXItZ3JhZGllbnQoXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkFuZ2xlLnRvU3RyaW5nKG1hdGNoWzBdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX3N0b3BzKG1hdGNoWzFdKSArIFwiKVwiKSkpO1xuICAgICAgfVxuICAgICAgaWYgKHZhcmlhbnQgPj0gNTg0MzgyMykge1xuICAgICAgICByZXR1cm4gXCJ1cmwoXCIgKyAoYmdbMV0gKyBcIilcIik7XG4gICAgICB9XG4gICAgICB2YXIgbWF0Y2gkMSA9IGJnWzFdO1xuICAgICAgdmFyIGggPSBtYXRjaCQxWzBdO1xuICAgICAgdmFyIHMgPSBtYXRjaCQxWzFdO1xuICAgICAgdmFyIGwgPSBtYXRjaCQxWzJdO1xuICAgICAgcmV0dXJuIFwiaHNsKFwiICsgKENzc19BdG9taWNUeXBlcy5BbmdsZS50b1N0cmluZyhoKSArIChcIiwgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcocykgKyAoXCIsIFwiICsgKENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKGwpICsgXCIpXCIpKSkpKTtcbiAgICB9XG4gICAgdmFyIG1hdGNoJDIgPSBiZ1sxXTtcbiAgICByZXR1cm4gXCJyZ2IoXCIgKyAobWF0Y2gkMlswXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQyWzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDJbMl0udG9TdHJpbmcoKSArIFwiKVwiKSkpKSk7XG4gIH1cbiAgaWYgKHZhcmlhbnQgIT09IC04NzgxMjg5NzIpIHtcbiAgICBpZiAodmFyaWFudCA+PSAtMTYwMjgwNjQ0KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSA1MTk0NDU5KSB7XG4gICAgICAgIHJldHVybiBcIiNcIiArIGJnWzFdO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDMgPSBiZ1sxXTtcbiAgICAgIHJldHVybiBcInJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkFuZ2xlLnRvU3RyaW5nKG1hdGNoJDNbMF0pICsgKFwiLCBcIiArIChzdHJpbmdfb2Zfc3RvcHMobWF0Y2gkM1sxXSkgKyBcIilcIikpKTtcbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPj0gLTY1NzExMTM3MCkge1xuICAgICAgcmV0dXJuIFwicmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudChcIiArIChzdHJpbmdfb2Zfc3RvcHMoYmdbMV0pICsgXCIpXCIpO1xuICAgIH1cbiAgICB2YXIgbWF0Y2gkNCA9IGJnWzFdO1xuICAgIHZhciBoJDEgPSBtYXRjaCQ0WzBdO1xuICAgIHZhciBzJDEgPSBtYXRjaCQ0WzFdO1xuICAgIHZhciBsJDEgPSBtYXRjaCQ0WzJdO1xuICAgIHZhciBhID0gbWF0Y2gkNFszXTtcbiAgICByZXR1cm4gXCJoc2xhKFwiICsgKENzc19BdG9taWNUeXBlcy5BbmdsZS50b1N0cmluZyhoJDEpICsgKFwiLCBcIiArIChDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyhzJDEpICsgKFwiLCBcIiArIChDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyhsJDEpICsgKFwiLCBcIiArIChzdHJpbmdfb2ZfYWxwaGEoYSkgKyBcIilcIikpKSkpKSk7XG4gIH1cbiAgdmFyIG1hdGNoJDUgPSBiZ1sxXTtcbiAgcmV0dXJuIFwicmdiYShcIiArIChtYXRjaCQ1WzBdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDVbMV0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkNVsyXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQ1WzNdLnRvU3RyaW5nKCkgKyBcIilcIikpKSkpKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9jb250ZW50KHgpIHtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHggPj0gLTYwMTIwNDczMikge1xuICAgICAgaWYgKHggPj0gNjg0OTQ5NjA0KSB7XG4gICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ29udGVudC50b1N0cmluZyh4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeCAhPT0gLTg3ODc2Nzk5Nikge1xuICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Db250ZW50LnRvU3RyaW5nKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KTtcbiAgICB9XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSB4WzBdO1xuICBpZiAodmFyaWFudCA+PSAxMTk1NDg5MTEpIHtcbiAgICBpZiAodmFyaWFudCAhPT0gMjg3MjcyNDM5KSB7XG4gICAgICBpZiAodmFyaWFudCAhPT0gNDkyNDE2NzY0KSB7XG4gICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuR3JhZGllbnQudG9TdHJpbmcoeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvdW50ZXIudG9TdHJpbmcoeCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ291bnRlcnMudG9TdHJpbmcoeCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTY1NzExMTM3MCkge1xuICAgIGlmICh2YXJpYW50ID49IDU4NDM4MjMpIHtcbiAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuVXJsLnRvU3RyaW5nKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkdyYWRpZW50LnRvU3RyaW5nKHgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvbnRlbnQudG9TdHJpbmcoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2NvdW50ZXJfaW5jcmVtZW50KHgpIHtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPj0gLTg3ODc2Nzk5Nikge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ291bnRlckluY3JlbWVudC50b1N0cmluZyh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfY291bnRlcl9yZXNldCh4KSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ID49IC04Nzg3Njc5OTYpIHtcbiAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvdW50ZXJSZXNldC50b1N0cmluZyh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfY291bnRlcl9zZXQoeCkge1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCA+PSAtODc4NzY3OTk2KSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Db3VudGVyU2V0LnRvU3RyaW5nKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGltcG9ydGFudCh2KSB7XG4gIGlmICh2LnRhZykge1xuICAgIHJldHVybiB2O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICB2WzBdLFxuICAgICAgICAgICAgICB2WzFdICsgXCIgIWltcG9ydGFudFwiXG4gICAgICAgICAgICBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsYWJlbChsYWJlbCQxKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgbGFiZWwkMVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbGlnbkNvbnRlbnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYWxpZ25Db250ZW50XCIsXG4gICAgICAgICAgICB4ID49IDI4NzgyNTAyOSA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA1MTY2ODIxNDYgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gNjYyNDM5NTI5ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCAhPT0gODEyMjE2ODcxID8gQ3NzX0F0b21pY1R5cGVzLkFsaWduQ29udGVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Ob3JtYWxBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkJhc2VsaW5lQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5EaXN0cmlidXRlZEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggIT09IC0xMDE2MDYxNTU1ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IC00ODU4OTU3NTcgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IDY3ODU5NTU0ID8gQ3NzX0F0b21pY1R5cGVzLkFsaWduQ29udGVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5EaXN0cmlidXRlZEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xMDIxOTQ0Nzk1ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5BbGlnbkNvbnRlbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkRpc3RyaWJ1dGVkQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYWxpZ25JdGVtcyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbGlnbkl0ZW1zXCIsXG4gICAgICAgICAgICB4ID49IDI4NzgyNTAyOSA/IChcbiAgICAgICAgICAgICAgICB4ID49IDY2MjQzOTUyOSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gODEyMjE2ODcxID8gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQWxpZ25JdGVtcy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkJhc2VsaW5lQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtMzc5MzE5MzMyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSAtMTYyMzE2Nzk1ID8gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQWxpZ25JdGVtcy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYWxpZ25TZWxmKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFsaWduU2VsZlwiLFxuICAgICAgICAgICAgeCA+PSA1MTgzNDc5OSA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAyODc4MjUwMjkgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggIT09IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkFsaWduU2VsZi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkJhc2VsaW5lQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTM3OTMxOTMzMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTYyMzE2Nzk1ID8gQ3NzX0F0b21pY1R5cGVzLkFsaWduU2VsZi50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTAyMTk0NDc5NiA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkFsaWduU2VsZi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkRlbGF5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvbkRlbGF5XCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKCkgKyBcIm1zXCJcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRGlyZWN0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvbkRpcmVjdGlvblwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkFuaW1hdGlvbkRpcmVjdGlvbi50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25EdXJhdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25EdXJhdGlvblwiLFxuICAgICAgICAgICAgeC50b1N0cmluZygpICsgXCJtc1wiXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkZpbGxNb2RlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvbkZpbGxNb2RlXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQW5pbWF0aW9uRmlsbE1vZGUudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5BbmltYXRpb25JdGVyYXRpb25Db3VudC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25QbGF5U3RhdGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYW5pbWF0aW9uUGxheVN0YXRlXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQW5pbWF0aW9uUGxheVN0YXRlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24udG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2ZhY2VWaXNpYmlsaXR5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tmYWNlVmlzaWJpbGl0eVwiLFxuICAgICAgICAgICAgeCAhPT0gLTg2MjU4NDk4MiAmJiB4ICE9PSA1ODk1OTI2OTAgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkJhY2tmYWNlVmlzaWJpbGl0eS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZHJvcEZpbHRlcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZHJvcC1maWx0ZXJcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4LCBDc3NfQXRvbWljVHlwZXMuQmFja2Ryb3BGaWx0ZXIudG9TdHJpbmcpLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRBdHRhY2htZW50KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRBdHRhY2htZW50XCIsXG4gICAgICAgICAgICB4ID49IC0xMTg0Mzc1MjUgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRBdHRhY2htZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kQXR0YWNobWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRDb2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kQ29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kQ2xpcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kQ2xpcFwiLFxuICAgICAgICAgICAgeCA+PSA5MzA3MjYzID8gKFxuICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kQ2xpcC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRDbGlwLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZEltYWdlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRJbWFnZVwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZEltYWdlLnRvU3RyaW5nKHgpIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IDU4NDM4MjMgPyBDc3NfQXRvbWljVHlwZXMuR3JhZGllbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVXJsLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZE9yaWdpbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kT3JpZ2luXCIsXG4gICAgICAgICAgICB4ID49IDkzMDcyNjMgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRPcmlnaW4udG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kT3JpZ2luLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2JhY2tncm91bmRwb3NpdGlvbihicCkge1xuICBpZiAodHlwZW9mIGJwID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKGJwICE9PSAtNzg5NTA4MzEyKSB7XG4gICAgICBpZiAoYnAgPj0gLTQ0NTA2MTM5Nykge1xuICAgICAgICBpZiAoYnAgPj0gNjUzMTkzOTYxKSB7XG4gICAgICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoYnApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFBvc2l0aW9uLnRvU3RyaW5nKGJwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChicCA+PSAtOTQ0NzY0OTIwKSB7XG4gICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKGJwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFBvc2l0aW9uLnRvU3RyaW5nKGJwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoYnApO1xuICAgIH1cbiAgfVxuICBpZiAoYnBbMF0gIT09IDIzMzEwKSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoYnApO1xuICB9XG4gIHZhciBtYXRjaCA9IGJwWzFdO1xuICB2YXIgdiA9IG1hdGNoWzFdO1xuICB2YXIgaCA9IG1hdGNoWzBdO1xuICByZXR1cm4gKFxuICAgICAgICAgIHR5cGVvZiBoID09PSBcIm51bWJlclwiICYmIGggIT09IC03ODk1MDgzMTIgPyBDdXJyeS5fMShDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFBvc2l0aW9uLlgudG9TdHJpbmcsIGgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhoKVxuICAgICAgICApICsgKFwiIFwiICsgKFxuICAgICAgICAgICAgdHlwZW9mIHYgPT09IFwibnVtYmVyXCIgJiYgdiA+PSAtNDQ1MDYxMzk3ID8gQ3VycnkuXzEoQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRQb3NpdGlvbi5ZLnRvU3RyaW5nLCB2KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcodilcbiAgICAgICAgICApKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZFBvc2l0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRQb3NpdGlvblwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2JhY2tncm91bmRwb3NpdGlvbih4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kUG9zaXRpb25zKGJwKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kUG9zaXRpb25cIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcChicCwgc3RyaW5nX29mX2JhY2tncm91bmRwb3NpdGlvbiksIFwiLCBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZFBvc2l0aW9uNCh4LCBvZmZzZXRYLCB5LCBvZmZzZXRZKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kUG9zaXRpb25cIixcbiAgICAgICAgICAgIEN1cnJ5Ll8xKENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kUG9zaXRpb24uWC50b1N0cmluZywgeCkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhvZmZzZXRYKSArIChcIiBcIiArIChDdXJyeS5fMShDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFBvc2l0aW9uLlkudG9TdHJpbmcsIHkpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhvZmZzZXRZKSkpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRSZXBlYXQoeCkge1xuICB2YXIgdG1wO1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpIHtcbiAgICB0bXAgPSB4ID49IC0zMTIwODQ0MDIgPyAoXG4gICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kUmVwZWF0LnRvU3RyaW5nKHgpXG4gICAgICApIDogKFxuICAgICAgICB4ICE9PSAtNjk1NDMwNTMyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kUmVwZWF0LnRvU3RyaW5nKHgpXG4gICAgICApO1xuICB9IGVsc2Uge1xuICAgIHZhciBtYXRjaCA9IHhbMV07XG4gICAgdG1wID0gQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRSZXBlYXQudG9TdHJpbmcobWF0Y2hbMF0pICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRSZXBlYXQudG9TdHJpbmcobWF0Y2hbMV0pKTtcbiAgfVxuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZFJlcGVhdFwiLFxuICAgICAgICAgICAgdG1wXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckJvdHRvbUNvbG9yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckJvdHRvbUNvbG9yXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQm90dG9tTGVmdFJhZGl1cyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckJvdHRvbVdpZHRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckJvdHRvbVdpZHRoXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckNvbGxhcHNlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckNvbGxhcHNlXCIsXG4gICAgICAgICAgICB4ICE9PSAxMTkyODM1NTUgJiYgeCA+PSAtOTk2ODQ3MjUwID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Cb3JkZXJDb2xsYXBzZS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJDb2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJDb2xvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckxlZnRDb2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJMZWZ0Q29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJMZWZ0V2lkdGgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyTGVmdFdpZHRoXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclNwYWNpbmcoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyU3BhY2luZ1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSYWRpdXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyUmFkaXVzXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclJpZ2h0Q29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyUmlnaHRDb2xvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclJpZ2h0V2lkdGgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyUmlnaHRXaWR0aFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJUb3BDb2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJUb3BDb2xvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclRvcExlZnRSYWRpdXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJUb3BSaWdodFJhZGl1cyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJUb3BXaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJUb3BXaWR0aFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJXaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJXaWR0aFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3R0b20oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm90dG9tXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm94U2l6aW5nKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJveFNpemluZ1wiLFxuICAgICAgICAgICAgeCAhPT0gOTMwNzI2MyAmJiB4ID49IC0xMDA4ODQ4MzAxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Cb3hTaXppbmcudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY2xlYXIoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY2xlYXJcIixcbiAgICAgICAgICAgIHggPj0gLTM3OTMxOTMzMiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2xlYXIudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DbGVhci50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNsaXBQYXRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImNsaXBQYXRoXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtOTIyMDg2NzI4ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IC0yOTg2NTgxNzkgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuR2VvbWV0eUJveC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTAwODg0ODMwMSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuR2VvbWV0eUJveC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuQ2xpcFBhdGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5VcmwudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb2x1bW5Db3VudCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb2x1bW5Db3VudFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Db2x1bW5Db3VudC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb250ZW50UnVsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb250ZW50XCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfY29udGVudCh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb250ZW50UnVsZXMoeHMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImNvbnRlbnRcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4cywgc3RyaW5nX29mX2NvbnRlbnQpLCBcIiBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY291bnRlckluY3JlbWVudCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb3VudGVyLWluY3JlbWVudFwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2NvdW50ZXJfaW5jcmVtZW50KHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50ZXJzSW5jcmVtZW50KHhzKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb3VudGVyLWluY3JlbWVudFwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHhzLCBzdHJpbmdfb2ZfY291bnRlcl9pbmNyZW1lbnQpLCBcIiBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY291bnRlclJlc2V0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImNvdW50ZXItcmVzZXRcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9jb3VudGVyX3Jlc2V0KHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50ZXJzUmVzZXQoeHMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImNvdW50ZXItcmVzZXRcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4cywgc3RyaW5nX29mX2NvdW50ZXJfcmVzZXQpLCBcIiBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY291bnRlclNldCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb3VudGVyLXNldFwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2NvdW50ZXJfc2V0KHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50ZXJzU2V0KHhzKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb3VudGVyLXNldFwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHhzLCBzdHJpbmdfb2ZfY291bnRlcl9zZXQpLCBcIiBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3Vyc29yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImN1cnNvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkN1cnNvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBkaXJlY3Rpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZGlyZWN0aW9uXCIsXG4gICAgICAgICAgICB4ID49IDUzOTY3MTQgJiYgeCA8IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5EaXJlY3Rpb24udG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXkoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZGlzcGxheVwiLFxuICAgICAgICAgICAgeCA+PSA5NzEyMjY5MiA/IChcbiAgICAgICAgICAgICAgICB4IDwgNjUzMTkzOTYxID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSAxODI2OTU5NTAgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICE9PSA0MjM2MTA5NjkgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA2MzI1OTE1MDUgPyBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUxpc3RJdGVtLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlJbnRlcm5hbC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlPdXRzaWRlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5SW5zaWRlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDc5MzkxMjUyOCA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggIT09IDg4ODk2MDMzMyA/IENzc19BdG9taWNUeXBlcy5EaXNwbGF5SW50ZXJuYWwudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzcGxheU91dHNpZGUudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA3OTA4ODk3NTQgPyBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUJveC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODU0MDUwMDU5ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSAtNjAxMjA0NzMyID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMjQ1OTAzMzQ0ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTE0Nzc4NTY3NiA/IENzc19BdG9taWNUeXBlcy5EaXNwbGF5TGVnYWN5LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlPdXRzaWRlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtODQzMTI5MTcyID8gQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlJbnRlcm5hbC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5TGVnYWN5LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtOTIyMDg2NzI4ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5Qm94LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTEwMTA5NTQ0MzkgPyBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUluc2lkZS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5SW50ZXJuYWwudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmxleCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmbGV4XCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IENzc19BdG9taWNUeXBlcy5GbGV4LnRvU3RyaW5nKHgpIDogeFsxXS50b1N0cmluZygpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZsZXhEaXJlY3Rpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmxleERpcmVjdGlvblwiLFxuICAgICAgICAgICAgeCA+PSA1NjkzOTc4ID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5GbGV4RGlyZWN0aW9uLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5GbGV4RGlyZWN0aW9uLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmxleEdyb3coeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmxleEdyb3dcIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmbGV4U2hyaW5rKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZsZXhTaHJpbmtcIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmbGV4V3JhcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmbGV4V3JhcFwiLFxuICAgICAgICAgICAgeCA+PSAtNDYzMTIxMjg4ID8gKFxuICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5GbGV4V3JhcC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtODIyMTM0MzI2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5GbGV4V3JhcC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uICQkZmxvYXQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmxvYXRcIixcbiAgICAgICAgICAgIHggPj0gLTM3OTMxOTMzMiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuRmxvYXQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5GbG9hdC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvbnRGYW1pbHkoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZm9udEZhbWlseVwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgISh4ICE9PSAtODc4NzY3OTk2ICYmIHggIT09IC02MDEyMDQ3MzIgJiYgeCA8IDY1MzE5Mzk2MSkgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkZvbnRGYW1pbHlOYW1lLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvbnRGYW1pbGllcyh4cykge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZm9udEZhbWlseVwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHhzLCBDc3NfQXRvbWljVHlwZXMuRm9udEZhbWlseU5hbWUudG9TdHJpbmcpLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTaXplKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZvbnRTaXplXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZm9udFN0eWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZvbnRTdHlsZVwiLFxuICAgICAgICAgICAgeCAhPT0gMTA3MjI4OTEyICYmIHggPCA3MzQ3OTI4ODEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkZvbnRTdHlsZS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmb250VmFyaWFudCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmb250VmFyaWFudFwiLFxuICAgICAgICAgICAgeCAhPT0gLTM4NjY4NDc5MiAmJiB4IDwgODEyMjE2ODcxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Gb250VmFyaWFudC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmb250V2VpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZvbnRXZWlnaHRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmICEoeCAhPT0gLTg3ODc2Nzk5NiAmJiB4ICE9PSAtNjAxMjA0NzMyICYmIHggIT09IDY1MzE5Mzk2MSkgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZEF1dG9GbG93KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBdXRvRmxvd1wiLFxuICAgICAgICAgICAgeCA+PSAtMjI3NjA1MjcxID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5HcmlkQXV0b0Zsb3cudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkdyaWRBdXRvRmxvdy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRDb2x1bW4oc3RhcnQsIGVuZCRwcmltZSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZENvbHVtblwiLFxuICAgICAgICAgICAgc3RhcnQudG9TdHJpbmcoKSArIChcIiAvIFwiICsgZW5kJHByaW1lLnRvU3RyaW5nKCkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRDb2x1bW5HYXAoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZENvbHVtbkdhcFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuR3JpZENvbHVtbkdhcC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeFswXSAhPT0gLTExOTg4NzE2MyA/IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRDb2x1bW5TdGFydChuKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkQ29sdW1uU3RhcnRcIixcbiAgICAgICAgICAgIG4udG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQ29sdW1uRW5kKG4pIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRDb2x1bW5FbmRcIixcbiAgICAgICAgICAgIG4udG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkUm93KHN0YXJ0LCBlbmQkcHJpbWUpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRSb3dcIixcbiAgICAgICAgICAgIHN0YXJ0LnRvU3RyaW5nKCkgKyAoXCIgLyBcIiArIGVuZCRwcmltZS50b1N0cmluZygpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkR2FwKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRHYXBcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkUm93R2FwKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRSb3dHYXBcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkUm93RW5kKG4pIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRSb3dFbmRcIixcbiAgICAgICAgICAgIG4udG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkUm93U3RhcnQobikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZFJvd1N0YXJ0XCIsXG4gICAgICAgICAgICBuLnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImhlaWdodFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTA2NTk1MTM3NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuSGVpZ2h0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBqdXN0aWZ5Q29udGVudCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJqdXN0aWZ5Q29udGVudFwiLFxuICAgICAgICAgICAgeCA+PSAtMTYyMzE2Nzk1ID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNTE2NjgyMTQ2ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDY2MjQzOTUyOSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggIT09IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLk5vcm1hbEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzdHJpYnV0ZWRBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDUxODM0Nzk5ID8gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzdHJpYnV0ZWRBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtMTAxNjA2MTU1NSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtNDg1ODk1NzU3ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMzc5MzE5MzMyID8gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzdHJpYnV0ZWRBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5EaXN0cmlidXRlZEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxlZnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibGVmdFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxldHRlclNwYWNpbmcoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibGV0dGVyU3BhY2luZ1wiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICB4ID49IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5MZXR0ZXJTcGFjaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsaW5lSGVpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImxpbmVIZWlnaHRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gODEyMjE2ODcxID8gQ3NzX0F0b21pY1R5cGVzLkxpbmVIZWlnaHQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IDQ4NDU2ODIgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxpbmVIZWlnaHQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R5bGUoc3R5bGUsIHBvc2l0aW9uLCBpbWFnZSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibGlzdFN0eWxlXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGlzdFN0eWxlVHlwZS50b1N0cmluZyhzdHlsZSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxpc3RTdHlsZVBvc2l0aW9uLnRvU3RyaW5nKHBvc2l0aW9uKSArIChcIiBcIiArIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGltYWdlID09PSBcIm51bWJlclwiID8gQ3NzX0F0b21pY1R5cGVzLkxpc3RTdHlsZUltYWdlLnRvU3RyaW5nKGltYWdlKSA6IENzc19BdG9taWNUeXBlcy5VcmwudG9TdHJpbmcoaW1hZ2UpXG4gICAgICAgICAgICAgICAgICApKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RTdHlsZUltYWdlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImxpc3RTdHlsZUltYWdlXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxpc3RTdHlsZUltYWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuVXJsLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RTdHlsZVR5cGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibGlzdFN0eWxlVHlwZVwiLFxuICAgICAgICAgICAgeCAhPT0gLTg3ODc2Nzk5NiAmJiB4ICE9PSAtNjAxMjA0NzMyICYmIHggIT09IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5MaXN0U3R5bGVUeXBlLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R5bGVQb3NpdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJsaXN0U3R5bGVQb3NpdGlvblwiLFxuICAgICAgICAgICAgeCA+PSAtNDMwMDExMDk5ICYmIHggPCA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuTGlzdFN0eWxlUG9zaXRpb24udG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpblRvU3RyaW5nKHgpIHtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPCAtNzg5NTA4MzEyKSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5NYXJnaW4udG9TdHJpbmcoeCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFyZ2luKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1hcmdpblwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luMih2LCBoKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHYpICsgKFwiIFwiICsgbWFyZ2luVG9TdHJpbmcoaCkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbjModG9wLCBoLCBib3R0b20pIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1hcmdpblwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcodG9wKSArIChcIiBcIiArIChtYXJnaW5Ub1N0cmluZyhoKSArIChcIiBcIiArIG1hcmdpblRvU3RyaW5nKGJvdHRvbSkpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luNCh0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1hcmdpblwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcodG9wKSArIChcIiBcIiArIChtYXJnaW5Ub1N0cmluZyhyaWdodCkgKyAoXCIgXCIgKyAobWFyZ2luVG9TdHJpbmcoYm90dG9tKSArIChcIiBcIiArIG1hcmdpblRvU3RyaW5nKGxlZnQpKSkpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luTGVmdCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5MZWZ0XCIsXG4gICAgICAgICAgICBtYXJnaW5Ub1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYXJnaW5SaWdodCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5SaWdodFwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luVG9wKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1hcmdpblRvcFwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luQm90dG9tKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1hcmdpbkJvdHRvbVwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWF4SGVpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1heEhlaWdodFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtOTIyMDg2NzI3ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5NYXhIZWlnaHQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeFswXSAhPT0gLTExOTg4NzE2MyA/IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1heFdpZHRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1heFdpZHRoXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IC05MjIwODY3MjcgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLk1heFdpZHRoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtaW5IZWlnaHQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibWluSGVpZ2h0XCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IC0xMDY1OTUxMzc2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5IZWlnaHQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeFswXSAhPT0gLTExOTg4NzE2MyA/IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1pbldpZHRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1pbldpZHRoXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSAtMTk1ODA1MzM2ICYmIHggPj0gLTEwNjU5NTEzNzYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLldpZHRoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvYmplY3RGaXQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib2JqZWN0Rml0XCIsXG4gICAgICAgICAgICB4ID49IDQyNzA2NTMwMCA/IChcbiAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuT2JqZWN0Rml0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5PYmplY3RGaXQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvYmplY3RQb3NpdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJvYmplY3RQb3NpdGlvblwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2JhY2tncm91bmRwb3NpdGlvbih4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvcGFjaXR5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm9wYWNpdHlcIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdXRsaW5lKHNpemUsIHN0eWxlLCBjb2xvcikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3V0bGluZVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhzaXplKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuT3V0bGluZVN0eWxlLnRvU3RyaW5nKHN0eWxlKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3V0bGluZUNvbG9yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm91dGxpbmVDb2xvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG91dGxpbmVPZmZzZXQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3V0bGluZU9mZnNldFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdXRsaW5lU3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3V0bGluZVN0eWxlXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuT3V0bGluZVN0eWxlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG91dGxpbmVXaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJvdXRsaW5lV2lkdGhcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3ZlcmZsb3coeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3ZlcmZsb3dcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5PdmVyZmxvdy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdmVyZmxvd1goeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3ZlcmZsb3dYXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuT3ZlcmZsb3cudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3ZlcmZsb3dZKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm92ZXJmbG93WVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLk92ZXJmbG93LnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG92ZXJmbG93V3JhcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJvdmVyZmxvd1dyYXBcIixcbiAgICAgICAgICAgIHggPj0gODEyMjE2ODcxID8gQ3NzX0F0b21pY1R5cGVzLk92ZXJmbG93V3JhcC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGFkZGluZyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmcyKHYsIGgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBhZGRpbmdcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcodikgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKGgpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nMyh0b3AsIGgsIGJvdHRvbSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh0b3ApICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoaCkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKGJvdHRvbSkpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGFkZGluZzQodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHRvcCkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhyaWdodCkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhib3R0b20pICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhsZWZ0KSkpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmdCb3R0b20oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ0JvdHRvbVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nTGVmdCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwYWRkaW5nTGVmdFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nUmlnaHQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ1JpZ2h0XCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmdUb3AoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ1RvcFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwZXJzcGVjdGl2ZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwZXJzcGVjdGl2ZVwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICB4ID49IC05MjIwODY3MjcgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcnNwZWN0aXZlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBlcnNwZWN0aXZlT3JpZ2luKHgsIHkpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBlcnNwZWN0aXZlT3JpZ2luXCIsXG4gICAgICAgICAgICAoXG4gICAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPCAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLlBlcnNwZWN0aXZlLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgKSArIChcIiBcIiArIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgeSA9PT0gXCJudW1iZXJcIiAmJiB5IDwgLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5QZXJzcGVjdGl2ZS50b1N0cmluZyh5KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeSlcbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRlckV2ZW50cyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwb2ludGVyRXZlbnRzXCIsXG4gICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBvaW50ZXJFdmVudHMudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcG9zaXRpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicG9zaXRpb25cIixcbiAgICAgICAgICAgIHggPj0gMTA2MTUxNTYgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb24udG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBqdXN0aWZ5U2VsZih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJqdXN0aWZ5U2VsZlwiLFxuICAgICAgICAgICAgeCA+PSA1MTgzNDc5OSA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAyODc4MjUwMjkgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggIT09IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkp1c3RpZnlTZWxmLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuQmFzZWxpbmVBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtMzc5MzE5MzMyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xNjIzMTY3OTUgPyBDc3NfQXRvbWljVHlwZXMuSnVzdGlmeVNlbGYudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTEwMjE5NDQ3OTYgPyBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5KdXN0aWZ5U2VsZi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHJlc2l6ZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJyZXNpemVcIixcbiAgICAgICAgICAgIHggPj0gLTM2NzY3NDI1MCA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuUmVzaXplLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUmVzaXplLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcmlnaHQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicmlnaHRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggIT09IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0YWJsZUxheW91dCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0YWJsZUxheW91dFwiLFxuICAgICAgICAgICAgeCAhPT0gMTA2MTUxNTYgJiYgeCA+PSAtMTA2NTk1MTM3NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVGFibGVMYXlvdXQudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGV4dEFsaWduKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHRBbGlnblwiLFxuICAgICAgICAgICAgeCA+PSAtMzc5MzE5MzMyID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5UZXh0QWxpZ24udG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRleHRBbGlnbi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHREZWNvcmF0aW9uQ29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGV4dERlY29yYXRpb25Db2xvclwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgISh4ID49IDI5MjA1MDUzOCAmJiB4IDwgNjUzMTkzOTYxKSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGV4dERlY29yYXRpb25MaW5lKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHREZWNvcmF0aW9uTGluZVwiLFxuICAgICAgICAgICAgeCA+PSAxMzExNDI5MjQgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLlRleHREZWNvcmF0aW9uTGluZS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRleHREZWNvcmF0aW9uTGluZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHREZWNvcmF0aW9uU3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGV4dERlY29yYXRpb25TdHlsZVwiLFxuICAgICAgICAgICAgeCA+PSAxMjk1NjcxNSA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuVGV4dERlY29yYXRpb25TdHlsZS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtODIyOTc1MDI3ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5UZXh0RGVjb3JhdGlvblN0eWxlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGV4dEluZGVudCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0ZXh0SW5kZW50XCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGV4dE92ZXJmbG93KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHRPdmVyZmxvd1wiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gMTY2ODg4Nzg1ICYmIHggPj0gLTEwNDQyMjIyNTUgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRleHRPdmVyZmxvdy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0VHJhbnNmb3JtKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHRUcmFuc2Zvcm1cIixcbiAgICAgICAgICAgIHggPj0gLTUwOTg2NzYwNCA/IChcbiAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVGV4dFRyYW5zZm9ybS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVGV4dFRyYW5zZm9ybS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRvcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0b3BcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggIT09IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeCwgQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS50b1N0cmluZyksIFwiIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1PcmlnaW4oeCwgeSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNmb3JtT3JpZ2luXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh5KSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtT3JpZ2luM2QoeCwgeSwgeikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNmb3JtT3JpZ2luXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh6KSArIFwiIFwiKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB1bnNhZmUocHJvcGVydHksIHZhbHVlKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB1c2VyU2VsZWN0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInVzZXJTZWxlY3RcIixcbiAgICAgICAgICAgIHggIT09IC04Nzg3Njc5OTYgJiYgeCAhPT0gLTYwMTIwNDczMiAmJiB4IDwgNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLlVzZXJTZWxlY3QudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHZlcnRpY2FsQWxpZ24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidmVydGljYWxBbGlnblwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTg2NjIwMDc0NyA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtNDQ1MDYxMzk3ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlZlcnRpY2FsQWxpZ24udG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5WZXJ0aWNhbEFsaWduLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHZpc2liaWxpdHkoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidmlzaWJpbGl0eVwiLFxuICAgICAgICAgICAgeCA+PSAtNjAxMjA0NzMyID8gKFxuICAgICAgICAgICAgICAgIHggIT09IDU4OTU5MjY5MCA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVmlzaWJpbGl0eS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggIT09IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuVmlzaWJpbGl0eS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB3aWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ3aWR0aFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gLTE5NTgwNTMzNiAmJiB4ID49IC0xMDY1OTUxMzc2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5XaWR0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gd2hpdGVTcGFjZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ3aGl0ZVNwYWNlXCIsXG4gICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgJiYgeCA+PSAtNjAxMjA0NzMxID8gQ3NzX0F0b21pY1R5cGVzLldoaXRlU3BhY2UudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHdvcmRCcmVhayh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ3b3JkQnJlYWtcIixcbiAgICAgICAgICAgIHggIT09IC0zMjM3NjA3MzQgJiYgeCA8IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuV29yZEJyZWFrLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHdvcmRTcGFjaW5nKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIndvcmRTcGFjaW5nXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5Xb3JkU3BhY2luZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeFswXSAhPT0gLTExOTg4NzE2MyA/IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHpJbmRleCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ6SW5kZXhcIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtZWRpYShxdWVyeSwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIkBtZWRpYSBcIiArIHF1ZXJ5LFxuICAgICAgICAgICAgcnVsZXNcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0b3Ioc2VsZWN0b3IkMSwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBzZWxlY3RvciQxLFxuICAgICAgICAgICAgcnVsZXNcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYWN0aXZlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiYWN0aXZlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjaGVja2VkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiY2hlY2tlZFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gJCRkZWZhdWx0KHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZGVmYXVsdFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImRlZmluZWRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGRpc2FibGVkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZW1wdHlcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGVuYWJsZWQocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJlbmFibGVkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaXJzdChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImZpcnN0XCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaXJzdENoaWxkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZmlyc3QtY2hpbGRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZpcnN0T2ZUeXBlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZmlyc3Qtb2YtdHlwZVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZm9jdXMocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJmb2N1c1wiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZm9jdXNXaXRoaW4ocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJmb2N1cy13aXRoaW5cIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGhvc3Qoc2VsZWN0b3IsIHJ1bGVzKSB7XG4gIGlmIChzZWxlY3RvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgIFwiaG9zdFwiLFxuICAgICAgICAgICAgICBzZWxlY3RvcixcbiAgICAgICAgICAgICAgcnVsZXNcbiAgICAgICAgICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgXCJob3N0XCIsXG4gICAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgICBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBob3ZlcihwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImhvdmVyXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBpbmRldGVybWluYXRlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiaW5kZXRlcm1pbmF0ZVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gaW5SYW5nZShwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImluLXJhbmdlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiaW52YWxpZFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbGFuZyhjb2RlLCBydWxlcykge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3NQYXJhbSAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgIFwibGFuZ1wiLFxuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxhc3RDaGlsZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImxhc3QtY2hpbGRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxhc3RPZlR5cGUocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJsYXN0LW9mLXR5cGVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxpbmsocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJsaW5rXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBub3RfXyhzZWxlY3RvciwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICBcIm5vdFwiLFxuICAgICAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyhwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IDU1NDIzMTkpIHtcbiAgICAgIHJldHVybiBcIm9kZFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJldmVuXCI7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbVswXSA8IDQ4NDYxMTMpIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiblwiO1xuICB9XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICByZXR1cm4gbWF0Y2hbMF0udG9TdHJpbmcoKSArIChcIm4rXCIgKyBtYXRjaFsxXS50b1N0cmluZygpKTtcbn1cblxudmFyIE50aCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nXG59O1xuXG5mdW5jdGlvbiBudGhDaGlsZCh4LCBydWxlcykge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3NQYXJhbSAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgIFwibnRoLWNoaWxkXCIsXG4gICAgICAgICAgICB0b1N0cmluZyh4KSxcbiAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG50aExhc3RDaGlsZCh4LCBydWxlcykge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3NQYXJhbSAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgIFwibnRoLWxhc3QtY2hpbGRcIixcbiAgICAgICAgICAgIHRvU3RyaW5nKHgpLFxuICAgICAgICAgICAgcnVsZXNcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbnRoTGFzdE9mVHlwZSh4LCBydWxlcykge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3NQYXJhbSAqL0Jsb2NrLl9fKDMsIFtcbiAgICAgICAgICAgIFwibnRoLWxhc3Qtb2YtdHlwZVwiLFxuICAgICAgICAgICAgdG9TdHJpbmcoeCksXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBudGhPZlR5cGUoeCwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICBcIm50aC1vZi10eXBlXCIsXG4gICAgICAgICAgICB0b1N0cmluZyh4KSxcbiAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcIm9ubHktY2hpbGRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG9ubHlPZlR5cGUocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJvbmx5LW9mLXR5cGVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG9wdGlvbmFsKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwib3B0aW9uYWxcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG91dE9mUmFuZ2UocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJvdXQtb2YtcmFuZ2VcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRPbmx5KHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwicmVhZC1vbmx5XCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiByZWFkV3JpdGUocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJyZWFkLXdyaXRlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiByZXF1aXJlZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcInJlcXVpcmVkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiByb290KHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwicm9vdFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc2NvcGUocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJzY29wZVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGFyZ2V0KHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwidGFyZ2V0XCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB2YWxpZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcInZhbGlkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB2aXNpdGVkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwidmlzaXRlZFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYWZ0ZXIocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIjo6YWZ0ZXJcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJlZm9yZShwYXJhbSkge1xuICByZXR1cm4gLyogUyAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgIFwiOjpiZWZvcmVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZpcnN0TGV0dGVyKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCI6OmZpcnN0LWxldHRlclwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmlyc3RMaW5lKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCI6OmZpcnN0LWxpbmVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbihwYXJhbSkge1xuICByZXR1cm4gLyogUyAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgIFwiOjpzZWxlY3Rpb25cIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkKHgpIHtcbiAgdmFyIHBhcnRpYWxfYXJnID0gXCIgPiBcIiArIHg7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gLyogUyAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsX2FyZyxcbiAgICAgICAgICAgICAgICBwYXJhbVxuICAgICAgICAgICAgICBdKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW4ocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIiA+ICpcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGRpcmVjdFNpYmxpbmcocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIiArIFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGxhY2Vob2xkZXIocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIjo6cGxhY2Vob2xkZXJcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHNpYmxpbmdzKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCIgfiBcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFueUxpbmsocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIjphbnktbGlua1wiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxudmFyIGluaXRpYWwgPSBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLmluaXRpYWw7XG5cbnZhciBpbmhlcml0XyA9IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcuaW5oZXJpdF87XG5cbnZhciB1bnNldCA9IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudW5zZXQ7XG5cbnZhciBwY3QgPSBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS5wY3Q7XG5cbnZhciBjaCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGguY2g7XG5cbnZhciBjbSA9IENzc19BdG9taWNUeXBlcy5MZW5ndGguY207XG5cbnZhciBlbSA9IENzc19BdG9taWNUeXBlcy5MZW5ndGguZW07XG5cbnZhciBleCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGguZXg7XG5cbnZhciBtbSA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgubW07XG5cbnZhciBwdCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgucHQ7XG5cbnZhciBweCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgucHg7XG5cbnZhciBweEZsb2F0ID0gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC5weEZsb2F0O1xuXG52YXIgcmVtID0gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC5yZW07XG5cbnZhciB2aCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgudmg7XG5cbnZhciB2bWluID0gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC52bWluO1xuXG52YXIgdm1heCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgudm1heDtcblxudmFyIHplcm8gPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnplcm87XG5cbnZhciBkZWcgPSBDc3NfQXRvbWljVHlwZXMuQW5nbGUuZGVnO1xuXG52YXIgcmFkID0gQ3NzX0F0b21pY1R5cGVzLkFuZ2xlLnJhZDtcblxudmFyIGdyYWQgPSBDc3NfQXRvbWljVHlwZXMuQW5nbGUuZ3JhZDtcblxudmFyIHR1cm4gPSBDc3NfQXRvbWljVHlwZXMuQW5nbGUudHVybjtcblxudmFyIGx0ciA9IENzc19BdG9taWNUeXBlcy5EaXJlY3Rpb24ubHRyO1xuXG52YXIgcnRsID0gQ3NzX0F0b21pY1R5cGVzLkRpcmVjdGlvbi5ydGw7XG5cbnZhciBhYnNvbHV0ZSA9IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbi5hYnNvbHV0ZTtcblxudmFyIHJlbGF0aXZlID0gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uLnJlbGF0aXZlO1xuXG52YXIgJCRzdGF0aWMgPSBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb24uJCRzdGF0aWM7XG5cbnZhciBzdGlja3kgPSBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb24uc3RpY2t5O1xuXG52YXIgaG9yaXpvbnRhbCA9IENzc19BdG9taWNUeXBlcy5SZXNpemUuaG9yaXpvbnRhbDtcblxudmFyIHZlcnRpY2FsID0gQ3NzX0F0b21pY1R5cGVzLlJlc2l6ZS52ZXJ0aWNhbDtcblxudmFyIHNtYWxsQ2FwcyA9IENzc19BdG9taWNUeXBlcy5Gb250VmFyaWFudC5zbWFsbENhcHM7XG5cbnZhciBpdGFsaWMgPSBDc3NfQXRvbWljVHlwZXMuRm9udFN0eWxlLml0YWxpYztcblxudmFyIG9ibGlxdWUgPSBDc3NfQXRvbWljVHlwZXMuRm9udFN0eWxlLm9ibGlxdWU7XG5cbnZhciByZ2IgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IucmdiO1xuXG52YXIgcmdiYSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5yZ2JhO1xuXG52YXIgaHNsID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhzbDtcblxudmFyIGhzbGEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaHNsYTtcblxudmFyIGhleCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXg7XG5cbnZhciBjdXJyZW50Q29sb3IgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuY3VycmVudENvbG9yO1xuXG52YXIgdHJhbnNwYXJlbnQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IudHJhbnNwYXJlbnQ7XG5cbnZhciBsaW5lYXIgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24ubGluZWFyO1xuXG52YXIgZWFzZSA9IENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi5lYXNlO1xuXG52YXIgZWFzZUluID0gQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLmVhc2VJbjtcblxudmFyIGVhc2VJbk91dCA9IENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi5lYXNlSW5PdXQ7XG5cbnZhciBlYXNlT3V0ID0gQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLmVhc2VPdXQ7XG5cbnZhciBzdGVwU3RhcnQgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24uc3RlcFN0YXJ0O1xuXG52YXIgc3RlcEVuZCA9IENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi5zdGVwRW5kO1xuXG52YXIgc3RlcHMgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24uc3RlcHM7XG5cbnZhciBjdWJpY0JlemllciA9IENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi5jdWJpY0JlemllcjtcblxudmFyIG1hcmdpbkJveCA9IENzc19BdG9taWNUeXBlcy5HZW9tZXR5Qm94Lm1hcmdpbkJveDtcblxudmFyIGZpbGxCb3ggPSBDc3NfQXRvbWljVHlwZXMuR2VvbWV0eUJveC5maWxsQm94O1xuXG52YXIgc3Ryb2tlQm94ID0gQ3NzX0F0b21pY1R5cGVzLkdlb21ldHlCb3guc3Ryb2tlQm94O1xuXG52YXIgdmlld0JveCA9IENzc19BdG9taWNUeXBlcy5HZW9tZXR5Qm94LnZpZXdCb3g7XG5cbnZhciB0cmFuc2xhdGUgPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnRyYW5zbGF0ZTtcblxudmFyIHRyYW5zbGF0ZTNkID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS50cmFuc2xhdGUzZDtcblxudmFyIHRyYW5zbGF0ZVggPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnRyYW5zbGF0ZVg7XG5cbnZhciB0cmFuc2xhdGVZID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS50cmFuc2xhdGVZO1xuXG52YXIgdHJhbnNsYXRlWiA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0udHJhbnNsYXRlWjtcblxudmFyIHNjYWxlWCA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0uc2NhbGVYO1xuXG52YXIgc2NhbGVZID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5zY2FsZVk7XG5cbnZhciBzY2FsZVogPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnNjYWxlWjtcblxudmFyIHJvdGF0ZVggPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnJvdGF0ZVg7XG5cbnZhciByb3RhdGVZID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5yb3RhdGVZO1xuXG52YXIgcm90YXRlWiA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0ucm90YXRlWjtcblxudmFyIHNjYWxlID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5zY2FsZTtcblxudmFyIHNjYWxlM2QgPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnNjYWxlM2Q7XG5cbnZhciBza2V3ID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5za2V3O1xuXG52YXIgc2tld1ggPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnNrZXdYO1xuXG52YXIgc2tld1kgPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnNrZXdZO1xuXG52YXIgdGhpbiA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LnRoaW47XG5cbnZhciBleHRyYUxpZ2h0ID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQuZXh0cmFMaWdodDtcblxudmFyIGxpZ2h0ID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQubGlnaHQ7XG5cbnZhciBtZWRpdW0gPSBDc3NfQXRvbWljVHlwZXMuRm9udFdlaWdodC5tZWRpdW07XG5cbnZhciBzZW1pQm9sZCA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LnNlbWlCb2xkO1xuXG52YXIgYm9sZCA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LmJvbGQ7XG5cbnZhciBleHRyYUJvbGQgPSBDc3NfQXRvbWljVHlwZXMuRm9udFdlaWdodC5leHRyYUJvbGQ7XG5cbnZhciBsaWdodGVyID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQubGlnaHRlcjtcblxudmFyIGJvbGRlciA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LmJvbGRlcjtcblxudmFyIGxpbmVhckdyYWRpZW50ID0gQ3NzX0F0b21pY1R5cGVzLkdyYWRpZW50LmxpbmVhckdyYWRpZW50O1xuXG52YXIgcmVwZWF0aW5nTGluZWFyR3JhZGllbnQgPSBDc3NfQXRvbWljVHlwZXMuR3JhZGllbnQucmVwZWF0aW5nTGluZWFyR3JhZGllbnQ7XG5cbnZhciByYWRpYWxHcmFkaWVudCA9IENzc19BdG9taWNUeXBlcy5HcmFkaWVudC5yYWRpYWxHcmFkaWVudDtcblxudmFyIHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50ID0gQ3NzX0F0b21pY1R5cGVzLkdyYWRpZW50LnJlcGVhdGluZ1JhZGlhbEdyYWRpZW50O1xuXG52YXIgYXJlYXMgPSBDc3NfQXRvbWljVHlwZXMuR3JpZFRlbXBsYXRlQXJlYXMuYXJlYXM7XG5cbnZhciBpZGVudCA9IENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS5pZGVudDtcblxudmFyIG51bUlkZW50ID0gQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLm51bUlkZW50O1xuXG52YXIgY29udGV4dE1lbnUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmNvbnRleHRNZW51O1xuXG52YXIgaGVscCA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuaGVscDtcblxudmFyIHBvaW50ZXIgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnBvaW50ZXI7XG5cbnZhciBwcm9ncmVzcyA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IucHJvZ3Jlc3M7XG5cbnZhciB3YWl0ID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci53YWl0O1xuXG52YXIgY2VsbCA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuY2VsbDtcblxudmFyIGNyb3NzaGFpciA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuY3Jvc3NoYWlyO1xuXG52YXIgdmVydGljYWxUZXh0ID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci52ZXJ0aWNhbFRleHQ7XG5cbnZhciBhbGlhcyA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuYWxpYXM7XG5cbnZhciBjb3B5ID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5jb3B5O1xuXG52YXIgbW92ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IubW92ZTtcblxudmFyIG5vRHJvcCA9IENzc19BdG9taWNUeXBlcy5DdXJzb3Iubm9Ecm9wO1xuXG52YXIgbm90QWxsb3dlZCA9IENzc19BdG9taWNUeXBlcy5DdXJzb3Iubm90QWxsb3dlZDtcblxudmFyIGdyYWIgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmdyYWI7XG5cbnZhciBncmFiYmluZyA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuZ3JhYmJpbmc7XG5cbnZhciBhbGxTY3JvbGwgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmFsbFNjcm9sbDtcblxudmFyIGNvbFJlc2l6ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuY29sUmVzaXplO1xuXG52YXIgcm93UmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5yb3dSZXNpemU7XG5cbnZhciBuUmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5uUmVzaXplO1xuXG52YXIgZVJlc2l6ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuZVJlc2l6ZTtcblxudmFyIHNSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnNSZXNpemU7XG5cbnZhciB3UmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci53UmVzaXplO1xuXG52YXIgbmVSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm5lUmVzaXplO1xuXG52YXIgbndSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm53UmVzaXplO1xuXG52YXIgc2VSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnNlUmVzaXplO1xuXG52YXIgc3dSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnN3UmVzaXplO1xuXG52YXIgZXdSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmV3UmVzaXplO1xuXG52YXIgbnNSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm5zUmVzaXplO1xuXG52YXIgbmVzd1Jlc2l6ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IubmVzd1Jlc2l6ZTtcblxudmFyIG53c2VSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm53c2VSZXNpemU7XG5cbnZhciB6b29tSW4gPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnpvb21JbjtcblxudmFyIHpvb21PdXQgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnpvb21PdXQ7XG5cbmZ1bmN0aW9uIHZ3KHgpIHtcbiAgcmV0dXJuIC8qIGB2dyAqL1tcbiAgICAgICAgICAyNjQzMyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGZyKHgpIHtcbiAgcmV0dXJuIC8qIGBmciAqL1tcbiAgICAgICAgICAyMjg2MCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uICRuZWcoYSwgYikge1xuICByZXR1cm4gLyogYGNhbGMgKi9bXG4gICAgICAgICAgLTEwNDQ3Njg2MTksXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAvKiBzdWIgKi81NzQ1MDI0LFxuICAgICAgICAgICAgYSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uICRwbHVzKGEsIGIpIHtcbiAgcmV0dXJuIC8qIGBjYWxjICovW1xuICAgICAgICAgIC0xMDQ0NzY4NjE5LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogYWRkICovNDg0NjExMyxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBiXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG52YXIgQ2FsYyA9IHtcbiAgJG5lZzogJG5lZyxcbiAgJHBsdXM6ICRwbHVzXG59O1xuXG5mdW5jdGlvbiBzaXplKHgsIHkpIHtcbiAgcmV0dXJuIC8qIGBzaXplICovW1xuICAgICAgICAgIC04NjY5MzQ1OTEsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY291bnQoeCkge1xuICByZXR1cm4gLyogYGNvdW50ICovW1xuICAgICAgICAgIC04OTk0NjM5ODUsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBsb2NhbFVybCh4KSB7XG4gIHJldHVybiAvKiBgbG9jYWxVcmwgKi9bXG4gICAgICAgICAgLTUzODA3OTU0OCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZShhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlICovW1xuICAgICAgICAgIC04ODcwNzcyODUsXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGUzZCh4LCB5LCB6LCBhKSB7XG4gIHJldHVybiAvKiBgcm90YXRlM2QgKi9bXG4gICAgICAgICAgMTQyODAyOTI0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHksXG4gICAgICAgICAgICB6LFxuICAgICAgICAgICAgYVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdXJsKHgpIHtcbiAgcmV0dXJuIC8qIGB1cmwgKi9bXG4gICAgICAgICAgNTg0MzgyMyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGZsZXgzKGdyb3csIHNocmluaywgYmFzaXMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZsZXhcIixcbiAgICAgICAgICAgIGdyb3cudG9TdHJpbmcoKSArIChcIiBcIiArIChzaHJpbmsudG9TdHJpbmcoKSArIChcIiBcIiArIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGJhc2lzID09PSBcIm51bWJlclwiICYmIGJhc2lzICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkZsZXhCYXNpcy50b1N0cmluZyhiYXNpcykgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKGJhc2lzKVxuICAgICAgICAgICAgICAgICAgKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmbGV4QmFzaXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmxleEJhc2lzXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkZsZXhCYXNpcy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3JkZXIoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3JkZXJcIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfbWlubWF4KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTU1MDU3NzcyMSkge1xuICAgICAgaWYgKHBhcmFtID49IDYwNTU3MDQ1KSB7XG4gICAgICAgIHJldHVybiBcIm1heC1jb250ZW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJtaW4tY29udGVudFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTc4OTUwODMxMikge1xuICAgICAgcmV0dXJuIFwiMFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IDIyNjQzKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gMjUwOTIpIHtcbiAgICAgIGlmICh2YXJpYW50ICE9PSAyNTA5Nikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyNjQzMykge1xuICAgICAgICAgIGlmICh2YXJpYW50ID49IDU2OTE3MzgpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJyZW1cIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZ3XCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjY0MTgpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidmhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHRcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInB4XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDI0NDE2KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyNTA3NSkge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicGNcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJtbVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyMjg2MCkge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImZyXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJleFwiO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgaWYgKHZhcmlhbnQgIT09IC0xMTk4ODcxNjMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDIyMTg2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDIyNjMyKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImVtXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImNtXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyMjE4MSkge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiY2hcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2bWluXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCIlXCI7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID49IC05Nzc1ODY3NDIpIHtcbiAgICBpZiAodmFyaWFudCA+PSAtODMzNDcyNTMwKSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidm1heFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiaW5cIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTEwNDA0ODQ3NDgpIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHhcIjtcbiAgfVxuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgaWYgKG1hdGNoWzBdID49IDU3NDUwMjQpIHtcbiAgICByZXR1cm4gXCJjYWxjKFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2hbMV0pICsgKFwiIC0gXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFsyXSkgKyBcIilcIikpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJjYWxjKFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2hbMV0pICsgKFwiICsgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFsyXSkgKyBcIilcIikpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZGltZW5zaW9uKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTc4OTUwODMxMikge1xuICAgICAgaWYgKHBhcmFtID49IC0xOTU4MDUzMzYpIHtcbiAgICAgICAgaWYgKHBhcmFtID49IDYwNTU3MDQ1KSB7XG4gICAgICAgICAgcmV0dXJuIFwibWF4LWNvbnRlbnRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJmaXQtY29udGVudFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID49IC01NTA1Nzc3MjEpIHtcbiAgICAgICAgcmV0dXJuIFwibWluLWNvbnRlbnRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIjBcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgfVxuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCA+PSAyMjYzMikge1xuICAgIGlmICh2YXJpYW50ID49IDI1MDkyKSB7XG4gICAgICBpZiAodmFyaWFudCAhPT0gMjUwOTYpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjY0MzMpIHtcbiAgICAgICAgICBpZiAodmFyaWFudCA+PSA1NjkxNzM4KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicmVtXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2d1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDI2NDE4KSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZoXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInB0XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCAhPT0gMjI2NDMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDI0NDE2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI1MDc1KSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInBjXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIm1tXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyMjg2MCkge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZnJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJlbVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZXhcIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MDc1Nikge1xuICAgIGlmICh2YXJpYW50ICE9PSAtNzU0ODU5OTUwKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyMjE4MSkge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyMjE4Nikge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJjbVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJjaFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZtaW5cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgcmV0dXJuIFwibWlubWF4KFwiICsgKHN0cmluZ19vZl9taW5tYXgobWF0Y2hbMF0pICsgKFwiLFwiICsgKHN0cmluZ19vZl9taW5tYXgobWF0Y2hbMV0pICsgXCIpXCIpKSk7XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTk3NzU4Njc0Mikge1xuICAgIGlmICh2YXJpYW50ID49IC04MzM0NzI1MzApIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2bWF4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJpblwiO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA+PSAtMTA0MDQ4NDc0OCkge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICB9XG4gIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gIGlmIChtYXRjaCQxWzBdID49IDU3NDUwMjQpIHtcbiAgICByZXR1cm4gXCJjYWxjKFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2gkMVsxXSkgKyAoXCIgLSBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoJDFbMl0pICsgXCIpXCIpKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoJDFbMV0pICsgKFwiICsgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaCQxWzJdKSArIFwiKVwiKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdyaWRMZW5ndGhUb0pzKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTU1MDU3NzcyMSkge1xuICAgICAgaWYgKHBhcmFtID49IDYwNTU3MDQ1KSB7XG4gICAgICAgIHJldHVybiBcIm1heC1jb250ZW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJtaW4tY29udGVudFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTc4OTUwODMxMikge1xuICAgICAgcmV0dXJuIFwiMFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IDIyNjQzKSB7XG4gICAgaWYgKHZhcmlhbnQgPCAyNTA5Nikge1xuICAgICAgaWYgKHZhcmlhbnQgIT09IDIyODYwKSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI1MDc1KSB7XG4gICAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjUwOTIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJwdFwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicGNcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNDQxNikge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJtbVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJleFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZnJcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPT09IDI2NDE4KSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidmhcIjtcbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPCA1NjkxNzM4KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyNjQzMykge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidndcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFyaWFudCA8IDEwODgyODUwNykge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInJlbVwiO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICByZXR1cm4gXCJyZXBlYXQoXCIgKyAoQ3NzX0F0b21pY1R5cGVzLlJlcGVhdFZhbHVlLnRvU3RyaW5nKG1hdGNoWzBdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX2RpbWVuc2lvbihtYXRjaFsxXSkgKyBcIilcIikpKTtcbiAgfVxuICBpZiAodmFyaWFudCA+PSAtNzU0ODU5OTUwKSB7XG4gICAgaWYgKHZhcmlhbnQgPT09IC0xMTk4ODcxNjMpIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCIlXCI7XG4gICAgfVxuICAgIGlmICh2YXJpYW50ID49IDIyMTg2KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyMjYzMikge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZW1cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJjbVwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFyaWFudCA+PSAyMjE4MSkge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImNoXCI7XG4gICAgfVxuICAgIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gICAgcmV0dXJuIFwibWlubWF4KFwiICsgKHN0cmluZ19vZl9taW5tYXgobWF0Y2gkMVswXSkgKyAoXCIsXCIgKyAoc3RyaW5nX29mX21pbm1heChtYXRjaCQxWzFdKSArIFwiKVwiKSkpO1xuICB9XG4gIGlmICh2YXJpYW50ID09PSAtMTA0MDQ4NDc0OCkge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICB9XG4gIGlmICh2YXJpYW50ID49IC04MzM0NzI1MzApIHtcbiAgICBpZiAodmFyaWFudCA+PSAtODMzNDcwNzU2KSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidm1pblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidm1heFwiO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA+PSAtOTc3NTg2NzQyKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImluXCI7XG4gIH1cbiAgdmFyIG1hdGNoJDIgPSBwYXJhbVsxXTtcbiAgaWYgKG1hdGNoJDJbMF0gPj0gNTc0NTAyNCkge1xuICAgIHJldHVybiBcImNhbGMoXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaCQyWzFdKSArIChcIiAtIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2gkMlsyXSkgKyBcIilcIikpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJjYWxjKFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2gkMlsxXSkgKyAoXCIgKyBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoJDJbMl0pICsgXCIpXCIpKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2RpbWVuc2lvbnMoZGltZW5zaW9ucykge1xuICByZXR1cm4gJCRTdHJpbmcuY29uY2F0KFwiIFwiLCBMaXN0Lm1hcChncmlkTGVuZ3RoVG9KcywgZGltZW5zaW9ucykpO1xufVxuXG5mdW5jdGlvbiBncmlkVGVtcGxhdGVDb2x1bW5zKGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRUZW1wbGF0ZUNvbHVtbnNcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9kaW1lbnNpb25zKGRpbWVuc2lvbnMpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRUZW1wbGF0ZVJvd3MoZGltZW5zaW9ucykge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZFRlbXBsYXRlUm93c1wiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2RpbWVuc2lvbnMoZGltZW5zaW9ucylcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZEF1dG9Db2x1bW5zKGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBdXRvQ29sdW1uc1wiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2RpbWVuc2lvbihkaW1lbnNpb25zKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQXV0b1Jvd3MoZGltZW5zaW9ucykge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZEF1dG9Sb3dzXCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfZGltZW5zaW9uKGRpbWVuc2lvbnMpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRBcmVhKHMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBcmVhXCIsXG4gICAgICAgICAgICB0eXBlb2YgcyA9PT0gXCJudW1iZXJcIiAmJiBzID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHMpIDogQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLnRvU3RyaW5nKHMpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRBcmVhMihzLCBzMikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZEFyZWFcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzKSArIChcIiAvIFwiICsgQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLnRvU3RyaW5nKHMyKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZEFyZWEzKHMsIHMyLCBzMykge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZEFyZWFcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzKSArIChcIiAvIFwiICsgKENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzMikgKyAoXCIgLyBcIiArIENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzMykpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZEFyZWE0KHMsIHMyLCBzMywgczQpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBcmVhXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEudG9TdHJpbmcocykgKyAoXCIgLyBcIiArIChDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEudG9TdHJpbmcoczIpICsgKFwiIC8gXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLnRvU3RyaW5nKHMzKSArIChcIiAvIFwiICsgQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLnRvU3RyaW5nKHM0KSkpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRUZW1wbGF0ZUFyZWFzKGwpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRUZW1wbGF0ZUFyZWFzXCIsXG4gICAgICAgICAgICB0eXBlb2YgbCA9PT0gXCJudW1iZXJcIiAmJiBsID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKGwpIDogQ3NzX0F0b21pY1R5cGVzLkdyaWRUZW1wbGF0ZUFyZWFzLnRvU3RyaW5nKGwpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9maWx0ZXIocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChwYXJhbSA+PSAtNjAxMjA0NzMyKSB7XG4gICAgICBpZiAocGFyYW0gPj0gNjUzMTkzOTYxKSB7XG4gICAgICAgIHJldHVybiBcInVuc2V0XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJpbmhlcml0XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtODc4NzY3OTk2KSB7XG4gICAgICByZXR1cm4gXCJpbml0aWFsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgaWYgKHZhcmlhbnQgPj0gLTk3NzQwMDQyKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gNTg0MzgyMykge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gOTM0NDA3NDI2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDEwMzY4NzA5NjMpIHtcbiAgICAgICAgICByZXR1cm4gXCJodWUtcm90YXRlKFwiICsgKENzc19BdG9taWNUeXBlcy5BbmdsZS50b1N0cmluZyhwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiY29udHJhc3QoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSA1MzQzMDg2MzApIHtcbiAgICAgICAgcmV0dXJuIFwiaW52ZXJ0KFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidXJsKFwiICsgKHBhcmFtWzFdICsgXCIpXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtMjk5Mjk0ODkpIHtcbiAgICAgIHJldHVybiBcInNhdHVyYXRlKFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJzZXBpYShcIiArIChwYXJhbVsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgIT09IC01OTQ1MjU4NDEpIHtcbiAgICBpZiAodmFyaWFudCA+PSAtMzQ1Njc4Mzg5KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAtMjE0NDY0NTY5KSB7XG4gICAgICAgIHJldHVybiBcImdyYXlzY2FsZShcIiArIChwYXJhbVsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm9wYWNpdHkoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ID49IC00NDU1NDI5NTkpIHtcbiAgICAgIHJldHVybiBcImJyaWdodG5lc3MoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImJsdXIoXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgfVxuICB9XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICByZXR1cm4gXCJkcm9wLXNoYWRvdyhcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoWzBdKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoWzFdKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoWzJdKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcobWF0Y2hbM10pICsgXCIpXCIpKSkpKSkpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXIoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmlsdGVyXCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeCwgc3RyaW5nX29mX2ZpbHRlciksIFwiIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3goeE9wdCwgeU9wdCwgYmx1ck9wdCwgc3ByZWFkT3B0LCBpbnNldE9wdCwgY29sb3IpIHtcbiAgdmFyIHggPSB4T3B0ICE9PSB1bmRlZmluZWQgPyB4T3B0IDogemVybztcbiAgdmFyIHkgPSB5T3B0ICE9PSB1bmRlZmluZWQgPyB5T3B0IDogemVybztcbiAgdmFyIGJsdXIgPSBibHVyT3B0ICE9PSB1bmRlZmluZWQgPyBibHVyT3B0IDogemVybztcbiAgdmFyIHNwcmVhZCA9IHNwcmVhZE9wdCAhPT0gdW5kZWZpbmVkID8gc3ByZWFkT3B0IDogemVybztcbiAgdmFyIGluc2V0ID0gaW5zZXRPcHQgIT09IHVuZGVmaW5lZCA/IGluc2V0T3B0IDogZmFsc2U7XG4gIHJldHVybiAvKiBgc2hhZG93ICovW1xuICAgICAgICAgIDQ4ODY4NzU4NCxcbiAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhibHVyKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHNwcmVhZCkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKGNvbG9yKSArIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNldCA/IFwiIGluc2V0XCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkpKSkpKSkpKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0ZXh0KHhPcHQsIHlPcHQsIGJsdXJPcHQsIGNvbG9yKSB7XG4gIHZhciB4ID0geE9wdCAhPT0gdW5kZWZpbmVkID8geE9wdCA6IHplcm87XG4gIHZhciB5ID0geU9wdCAhPT0gdW5kZWZpbmVkID8geU9wdCA6IHplcm87XG4gIHZhciBibHVyID0gYmx1ck9wdCAhPT0gdW5kZWZpbmVkID8gYmx1ck9wdCA6IHplcm87XG4gIHJldHVybiAvKiBgc2hhZG93ICovW1xuICAgICAgICAgIDQ4ODY4NzU4NCxcbiAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhibHVyKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikpKSkpKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQxKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdO1xuICB9XG59XG5cbnZhciBTaGFkb3cgPSB7XG4gIGJveDogYm94LFxuICB0ZXh0OiB0ZXh0LFxuICB0b1N0cmluZzogdG9TdHJpbmckMVxufTtcblxuZnVuY3Rpb24gYm94U2hhZG93KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJveFNoYWRvd1wiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IHRvU3RyaW5nJDEoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm94U2hhZG93cyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3hTaGFkb3dcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4LCB0b1N0cmluZyQxKSwgXCIsIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoYikge1xuICBpZiAoYiAhPT0gLTg3ODc2Nzk5NiAmJiBiICE9PSAtNjAxMjA0NzMyICYmIGIgIT09IDY1MzE5Mzk2MSkge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQm9yZGVyU3R5bGUudG9TdHJpbmcoYik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoYik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYm9yZGVyKHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhweCkgKyAoXCIgXCIgKyAoc3RyaW5nX29mX2JvcmRlcnN0eWxlKHN0eWxlKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyU3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyU3R5bGVcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9ib3JkZXJzdHlsZSh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJMZWZ0KHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckxlZnRcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocHgpICsgKFwiIFwiICsgKHN0cmluZ19vZl9ib3JkZXJzdHlsZShzdHlsZSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoY29sb3IpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckxlZnRTdHlsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJMZWZ0U3R5bGVcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9ib3JkZXJzdHlsZSh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSaWdodChweCwgc3R5bGUsIGNvbG9yKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJSaWdodFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhweCkgKyAoXCIgXCIgKyAoc3RyaW5nX29mX2JvcmRlcnN0eWxlKHN0eWxlKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyUmlnaHRTdHlsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJSaWdodFN0eWxlXCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyVG9wKHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclRvcFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhweCkgKyAoXCIgXCIgKyAoc3RyaW5nX29mX2JvcmRlcnN0eWxlKHN0eWxlKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyVG9wU3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wU3R5bGVcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9ib3JkZXJzdHlsZSh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b20ocHgsIHN0eWxlLCBjb2xvcikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHB4KSArIChcIiBcIiArIChzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoc3R5bGUpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKGNvbG9yKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b21TdHlsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21TdHlsZVwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2JvcmRlcnN0eWxlKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZFwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2JhY2tncm91bmQoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZHMoYmcpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcChiZywgc3RyaW5nX29mX2JhY2tncm91bmQpLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRTaXplKHgpIHtcbiAgdmFyIHRtcDtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSB7XG4gICAgdG1wID0geCAhPT0gLTg5OTQxNjI2NSA/IChcbiAgICAgICAgeCA+PSA0MjcwNjUzMDAgPyBcImNvbnRhaW5cIiA6IFwiYXV0b1wiXG4gICAgICApIDogXCJjb3ZlclwiO1xuICB9IGVsc2Uge1xuICAgIHZhciBtYXRjaCA9IHhbMV07XG4gICAgdG1wID0gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFswXSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoWzFdKSk7XG4gIH1cbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRTaXplXCIsXG4gICAgICAgICAgICB0bXBcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZm9udEZhY2UoZm9udEZhbWlseSwgc3JjLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGZvbnREaXNwbGF5LCBwYXJhbSkge1xuICB2YXIgZm9udFN0eWxlJDEgPSBKc19vcHRpb24ubWFwKChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkZvbnRTdHlsZS50b1N0cmluZyh2YWx1ZSk7XG4gICAgICAgIH0pLCBmb250U3R5bGUpO1xuICB2YXIgc3JjJDEgPSAkJFN0cmluZy5jb25jYXQoXCIsIFwiLCBMaXN0Lm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIGlmIChwYXJhbVswXSA+PSA1ODQzODIzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidXJsKFxcXCJcIiArIChTdHJpbmcocGFyYW1bMV0pICsgXCJcXFwiKVwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJsb2NhbChcXFwiXCIgKyAoU3RyaW5nKHBhcmFtWzFdKSArIFwiXFxcIilcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLCBzcmMpKTtcbiAgdmFyIGZvbnRTdHlsZSQyID0gQmVsdF9PcHRpb24ubWFwV2l0aERlZmF1bHQoZm9udFN0eWxlJDEsIFwiXCIsIChmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiBcImZvbnQtc3R5bGU6IFwiICsgKHMgKyBcIjtcIik7XG4gICAgICAgIH0pKTtcbiAgdmFyIGZvbnRXZWlnaHQkMSA9IEJlbHRfT3B0aW9uLm1hcFdpdGhEZWZhdWx0KGZvbnRXZWlnaHQsIFwiXCIsIChmdW5jdGlvbiAodykge1xuICAgICAgICAgIHJldHVybiBcImZvbnQtd2VpZ2h0OiBcIiArICgoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiB3ID09PSBcIm51bWJlclwiICYmICEodyAhPT0gLTg3ODc2Nzk5NiAmJiB3ICE9PSAtNjAxMjA0NzMyICYmIHcgIT09IDY1MzE5Mzk2MSkgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHcpIDogQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQudG9TdHJpbmcodylcbiAgICAgICAgICAgICAgICAgICkgKyBcIjtcIik7XG4gICAgICAgIH0pKTtcbiAgdmFyIGZvbnREaXNwbGF5JDEgPSBCZWx0X09wdGlvbi5tYXBXaXRoRGVmYXVsdChmb250RGlzcGxheSwgXCJcIiwgKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZm9udC1kaXNwbGF5OiBcIiArIChDc3NfQXRvbWljVHlwZXMuRm9udERpc3BsYXkudG9TdHJpbmcoZikgKyBcIjtcIik7XG4gICAgICAgIH0pKTtcbiAgcmV0dXJuIFwiQGZvbnQtZmFjZSB7XFxuICAgICBmb250LWZhbWlseTogXCIgKyAoU3RyaW5nKGZvbnRGYW1pbHkpICsgKFwiO1xcbiAgICAgc3JjOiBcIiArIChTdHJpbmcoc3JjJDEpICsgKFwiO1xcbiAgICAgXCIgKyAoU3RyaW5nKGZvbnRTdHlsZSQyKSArIChcIlxcbiAgICAgXCIgKyAoU3RyaW5nKGZvbnRXZWlnaHQkMSkgKyAoXCJcXG4gICAgIFwiICsgKFN0cmluZyhmb250RGlzcGxheSQxKSArIFwiXFxuICAgfVwiKSkpKSkpKSkpO1xufVxuXG5mdW5jdGlvbiB0ZXh0RGVjb3JhdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0ZXh0RGVjb3JhdGlvblwiLFxuICAgICAgICAgICAgeCA+PSAtNjAxMjA0NzMyID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNDEyMTU1NTY5ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IFwidW5zZXRcIiA6IFwibGluZS10aHJvdWdoXCJcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gMTMxMTQyOTI0ID8gXCJ1bmRlcmxpbmVcIiA6IFwiaW5oZXJpdFwiXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTkyMjA4NjcyOCA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gXCJpbml0aWFsXCIgOiBcIm92ZXJsaW5lXCJcbiAgICAgICAgICAgICAgICAgICkgOiBcIm5vbmVcIlxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHRTaGFkb3coeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGV4dFNoYWRvd1wiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IHRvU3RyaW5nJDEoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGV4dFNoYWRvd3MoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGV4dFNoYWRvd1wiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHgsIHRvU3RyaW5nJDEpLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN0eWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zZm9ybVN0eWxlXCIsXG4gICAgICAgICAgICB4ICE9PSA1ODk3MDIwNDUgJiYgeCA+PSAtMTAxMDk1NTMzNCA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtU3R5bGUudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc2hvcnRoYW5kKGR1cmF0aW9uT3B0LCBkZWxheU9wdCwgdGltaW5nRnVuY3Rpb25PcHQsIHByb3BlcnR5KSB7XG4gIHZhciBkdXJhdGlvbiA9IGR1cmF0aW9uT3B0ICE9PSB1bmRlZmluZWQgPyBkdXJhdGlvbk9wdCA6IDA7XG4gIHZhciBkZWxheSA9IGRlbGF5T3B0ICE9PSB1bmRlZmluZWQgPyBkZWxheU9wdCA6IDA7XG4gIHZhciB0aW1pbmdGdW5jdGlvbiA9IHRpbWluZ0Z1bmN0aW9uT3B0ICE9PSB1bmRlZmluZWQgPyB0aW1pbmdGdW5jdGlvbk9wdCA6IC8qIGVhc2UgKi8tMTAyMjU4NzkyMjtcbiAgcmV0dXJuIC8qIGB2YWx1ZSAqL1tcbiAgICAgICAgICA4MzQxNzQ4MzMsXG4gICAgICAgICAgZHVyYXRpb24udG9TdHJpbmcoKSArIFwibXMgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLnRvU3RyaW5nKHRpbWluZ0Z1bmN0aW9uKSArIChcIiBcIiArIChkZWxheS50b1N0cmluZygpICsgXCJtcyBcIiArIHByb3BlcnR5KSkpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDIocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzFdO1xufVxuXG52YXIgVHJhbnNpdGlvbiA9IHtcbiAgc2hvcnRoYW5kOiBzaG9ydGhhbmQsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyXG59O1xuXG5mdW5jdGlvbiB0cmFuc2l0aW9uVmFsdWUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNpdGlvblwiLFxuICAgICAgICAgICAgeFsxXVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uTGlzdCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0cmFuc2l0aW9uXCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeCwgdG9TdHJpbmckMiksIFwiLCBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihkdXJhdGlvbiwgZGVsYXksIHRpbWluZ0Z1bmN0aW9uLCBwcm9wZXJ0eSkge1xuICB2YXIgeCA9IHNob3J0aGFuZChkdXJhdGlvbiwgZGVsYXksIHRpbWluZ0Z1bmN0aW9uLCBwcm9wZXJ0eSk7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0cmFuc2l0aW9uXCIsXG4gICAgICAgICAgICB4WzFdXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25EZWxheShpKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0cmFuc2l0aW9uRGVsYXlcIixcbiAgICAgICAgICAgIGkudG9TdHJpbmcoKSArIFwibXNcIlxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRHVyYXRpb24oaSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsXG4gICAgICAgICAgICBpLnRvU3RyaW5nKCkgKyBcIm1zXCJcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zaXRpb25UaW1pbmdGdW5jdGlvblwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25Qcm9wZXJ0eSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIixcbiAgICAgICAgICAgIHhcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc2hvcnRoYW5kJDEoZHVyYXRpb25PcHQsIGRlbGF5T3B0LCBkaXJlY3Rpb25PcHQsIHRpbWluZ0Z1bmN0aW9uT3B0LCBmaWxsTW9kZU9wdCwgcGxheVN0YXRlT3B0LCBpdGVyYXRpb25Db3VudE9wdCwgbmFtZSkge1xuICB2YXIgZHVyYXRpb24gPSBkdXJhdGlvbk9wdCAhPT0gdW5kZWZpbmVkID8gZHVyYXRpb25PcHQgOiAwO1xuICB2YXIgZGVsYXkgPSBkZWxheU9wdCAhPT0gdW5kZWZpbmVkID8gZGVsYXlPcHQgOiAwO1xuICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uT3B0ICE9PSB1bmRlZmluZWQgPyBkaXJlY3Rpb25PcHQgOiAvKiBub3JtYWwgKi84MTIyMTY4NzE7XG4gIHZhciB0aW1pbmdGdW5jdGlvbiA9IHRpbWluZ0Z1bmN0aW9uT3B0ICE9PSB1bmRlZmluZWQgPyB0aW1pbmdGdW5jdGlvbk9wdCA6IC8qIGVhc2UgKi8tMTAyMjU4NzkyMjtcbiAgdmFyIGZpbGxNb2RlID0gZmlsbE1vZGVPcHQgIT09IHVuZGVmaW5lZCA/IGZpbGxNb2RlT3B0IDogLyogbm9uZSAqLy05MjIwODY3Mjg7XG4gIHZhciBwbGF5U3RhdGUgPSBwbGF5U3RhdGVPcHQgIT09IHVuZGVmaW5lZCA/IHBsYXlTdGF0ZU9wdCA6IC8qIHJ1bm5pbmcgKi8tMzQ1NDEyMDk3O1xuICB2YXIgaXRlcmF0aW9uQ291bnQgPSBpdGVyYXRpb25Db3VudE9wdCAhPT0gdW5kZWZpbmVkID8gaXRlcmF0aW9uQ291bnRPcHQgOiAvKiBgY291bnQgKi9bXG4gICAgICAtODk5NDYzOTg1LFxuICAgICAgMVxuICAgIF07XG4gIHJldHVybiAvKiBgdmFsdWUgKi9bXG4gICAgICAgICAgODM0MTc0ODMzLFxuICAgICAgICAgIG5hbWUgKyAoXCIgXCIgKyAoZHVyYXRpb24udG9TdHJpbmcoKSArIFwibXMgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLnRvU3RyaW5nKHRpbWluZ0Z1bmN0aW9uKSArIChcIiBcIiArIChkZWxheS50b1N0cmluZygpICsgXCJtcyBcIiArIChDc3NfQXRvbWljVHlwZXMuQW5pbWF0aW9uSXRlcmF0aW9uQ291bnQudG9TdHJpbmcoaXRlcmF0aW9uQ291bnQpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5BbmltYXRpb25EaXJlY3Rpb24udG9TdHJpbmcoZGlyZWN0aW9uKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuQW5pbWF0aW9uRmlsbE1vZGUudG9TdHJpbmcoZmlsbE1vZGUpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkFuaW1hdGlvblBsYXlTdGF0ZS50b1N0cmluZyhwbGF5U3RhdGUpKSkpKSkpKSkpKSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckMyhwYXJhbSkge1xuICByZXR1cm4gcGFyYW1bMV07XG59XG5cbnZhciBBbmltYXRpb24gPSB7XG4gIHNob3J0aGFuZDogc2hvcnRoYW5kJDEsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQzXG59O1xuXG5mdW5jdGlvbiBhbmltYXRpb25WYWx1ZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25cIixcbiAgICAgICAgICAgIHhbMV1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uKGR1cmF0aW9uLCBkZWxheSwgZGlyZWN0aW9uLCB0aW1pbmdGdW5jdGlvbiwgZmlsbE1vZGUsIHBsYXlTdGF0ZSwgaXRlcmF0aW9uQ291bnQsIG5hbWUpIHtcbiAgdmFyIHggPSBzaG9ydGhhbmQkMShkdXJhdGlvbiwgZGVsYXksIGRpcmVjdGlvbiwgdGltaW5nRnVuY3Rpb24sIGZpbGxNb2RlLCBwbGF5U3RhdGUsIGl0ZXJhdGlvbkNvdW50LCBuYW1lKTtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvblwiLFxuICAgICAgICAgICAgeFsxXVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25zKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvblwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHgsIHRvU3RyaW5nJDMpLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbk5hbWUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYW5pbWF0aW9uTmFtZVwiLFxuICAgICAgICAgICAgeFxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaWxsKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZpbGxcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaWxsT3BhY2l0eShvcGFjaXR5KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmaWxsT3BhY2l0eVwiLFxuICAgICAgICAgICAgb3BhY2l0eS50b1N0cmluZygpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZpbGxSdWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZpbGxSdWxlXCIsXG4gICAgICAgICAgICB4ID49IDExMDU2MzAyOSA/IFwiZXZlbm9kZFwiIDogXCJub256ZXJvXCJcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc3Ryb2tlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0cm9rZVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZVdpZHRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0cm9rZVdpZHRoXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZU9wYWNpdHkob3BhY2l0eSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwic3Ryb2tlT3BhY2l0eVwiLFxuICAgICAgICAgICAgb3BhY2l0eS50b1N0cmluZygpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZU1pdGVybGltaXQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwic3Ryb2tlTWl0ZXJsaW1pdFwiLFxuICAgICAgICAgICAgeC50b1N0cmluZygpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZUxpbmVjYXAoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwic3Ryb2tlTGluZWNhcFwiLFxuICAgICAgICAgICAgeCAhPT0gLTY1NTIyODc3MSA/IChcbiAgICAgICAgICAgICAgICB4ID49IC0zMTIwODQ0MDIgPyBcInJvdW5kXCIgOiBcImJ1dHRcIlxuICAgICAgICAgICAgICApIDogXCJzcXVhcmVcIlxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJva2VMaW5lam9pbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJzdHJva2VMaW5lam9pblwiLFxuICAgICAgICAgICAgeCAhPT0gMTQxMzYxMTU3ID8gKFxuICAgICAgICAgICAgICAgIHggPj0gODExNjgxOTE0ID8gXCJiZXZlbFwiIDogXCJyb3VuZFwiXG4gICAgICAgICAgICAgICkgOiBcIm1pdGVyXCJcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc3RvcENvbG9yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0b3BDb2xvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0b3BPcGFjaXR5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0b3BPcGFjaXR5XCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxudmFyIFR5cGVzO1xuXG5mdW5jdGlvbiBNYWtlKGZ1bmFyZykge1xuICB2YXIgbWVyZ2UgPSBmdW5jdGlvbiAoc3R5bGVuYW1lcykge1xuICAgIHJldHVybiBmdW5hcmcubWVyZ2VTdHlsZXMoJCRBcnJheS5vZl9saXN0KHN0eWxlbmFtZXMpKTtcbiAgfTtcbiAgdmFyIGluc2VydFJ1bGUgPSBmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBmdW5hcmcuaW5qZWN0UmF3KHMpO1xuICB9O1xuICB2YXIgc3R5bGUgPSBmdW5jdGlvbiAocnVsZXMpIHtcbiAgICByZXR1cm4gZnVuYXJnLm1ha2UodG9Kc29uKHJ1bGVzKSk7XG4gIH07XG4gIHZhciAkJGdsb2JhbCA9IGZ1bmN0aW9uIChzZWxlY3RvciwgcnVsZXMpIHtcbiAgICByZXR1cm4gZnVuYXJnLmluamVjdFJ1bGUoSnNfZGljdC5mcm9tTGlzdCgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgdG9Kc29uKHJ1bGVzKVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF0pKTtcbiAgfTtcbiAgdmFyIGtleWZyYW1lcyA9IGZ1bmN0aW9uIChmcmFtZXMpIHtcbiAgICByZXR1cm4gZnVuYXJnLm1ha2VLZXlGcmFtZXMoTGlzdC5mb2xkX2xlZnQoYWRkU3RvcCwgeyB9LCBmcmFtZXMpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkJGdsb2JhbDogJCRnbG9iYWwsXG4gICAgICAgICAgaW5zZXJ0UnVsZTogaW5zZXJ0UnVsZSxcbiAgICAgICAgICBtZXJnZTogbWVyZ2UsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgIGtleWZyYW1lczoga2V5ZnJhbWVzXG4gICAgICAgIH07XG59XG5cbnZhciB3b3JkV3JhcCA9IG92ZXJmbG93V3JhcDtcblxudmFyIGF1dG8gPSAvKiBhdXRvICovLTEwNjU5NTEzNzc7XG5cbnZhciBub25lID0gLyogbm9uZSAqLy05MjIwODY3Mjg7XG5cbnZhciB0ZXh0JDEgPSAvKiB0ZXh0ICovLTg1NjA0NDM3MTtcblxudmFyIGZpeGVkID0gLyogZml4ZWQgKi8xMDYxNTE1NjtcblxudmFyIGhpZGRlbiA9IC8qIGhpZGRlbiAqLy04NjI1ODQ5ODI7XG5cbnZhciB2aXNpYmxlID0gLyogdmlzaWJsZSAqLzU4OTU5MjY5MDtcblxudmFyIHNjcm9sbCA9IC8qIHNjcm9sbCAqLy05NDk2OTI0MDM7XG5cbnZhciBsb2NhbCA9IC8qIGxvY2FsICovLTExODQzNzUyNTtcblxudmFyIHBhZGRpbmdCb3ggPSAvKiBwYWRkaW5nQm94ICovOTcyNTc1OTMwO1xuXG52YXIgYm9yZGVyQm94ID0gLyogYm9yZGVyQm94ICovOTMwNzI2MztcblxudmFyIGNvbnRlbnRCb3ggPSAvKiBjb250ZW50Qm94ICovLTEwMDg4NDgzMDI7XG5cbnZhciBub1JlcGVhdCA9IC8qIG5vUmVwZWF0ICovLTY5NTQzMDUzMjtcblxudmFyIHNwYWNlID0gLyogc3BhY2UgKi8yMzQ5NzkyNjtcblxudmFyIHJlcGVhdCA9IC8qIHJlcGVhdCAqLzEwODgyODUwNztcblxudmFyIG1pbm1heCA9IC8qIG1pbm1heCAqLy03NTQ4NTk5NTA7XG5cbnZhciByZXBlYXRYID0gLyogcmVwZWF0WCAqLzY0NjQzNzAyMTtcblxudmFyIHJlcGVhdFkgPSAvKiByZXBlYXRZICovNjQ2NDM3MDIyO1xuXG52YXIgY29udGFpbiA9IC8qIGNvbnRhaW4gKi80MjcwNjUzMDA7XG5cbnZhciBjb3ZlciA9IC8qIGNvdmVyICovLTg5OTQxNjI2NTtcblxudmFyIHJvdyA9IC8qIHJvdyAqLzU2OTM5Nzg7XG5cbnZhciByb3dSZXZlcnNlID0gLyogcm93UmV2ZXJzZSAqLzM3ODk1MTIwODtcblxudmFyIGNvbHVtbiA9IC8qIGNvbHVtbiAqLy05NjM5NDg4NDI7XG5cbnZhciBjb2x1bW5SZXZlcnNlID0gLyogY29sdW1uUmV2ZXJzZSAqLzEzNTQ3NzQ4NDtcblxudmFyIHdyYXAgPSAvKiB3cmFwICovLTgyMjEzNDMyNjtcblxudmFyIG5vd3JhcCA9IC8qIG5vd3JhcCAqLzg2NzkxMzM1NTtcblxudmFyIHdyYXBSZXZlcnNlID0gLyogd3JhcFJldmVyc2UgKi8tNDYzMTIxMjg4O1xuXG52YXIgaW5saW5lID0gLyogaW5saW5lICovNDIzNjEwOTY5O1xuXG52YXIgYmxvY2sgPSAvKiBibG9jayAqLzg4ODk2MDMzMztcblxudmFyIGNvbnRlbnRzID0gLyogY29udGVudHMgKi83OTA4ODk3NTQ7XG5cbnZhciBmbGV4Qm94ID0gLyogZmxleCAqLy0xMDEwOTU0NDM5O1xuXG52YXIgZ3JpZCA9IC8qIGdyaWQgKi8tOTk5NTY1NjI2O1xuXG52YXIgaW5saW5lQmxvY2sgPSAvKiBpbmxpbmVCbG9jayAqLy0xNDc3ODU2NzY7XG5cbnZhciBpbmxpbmVGbGV4ID0gLyogaW5saW5lRmxleCAqLzUzMzIzMzE0O1xuXG52YXIgaW5saW5lR3JpZCA9IC8qIGlubGluZUdyaWQgKi82NDcxMjEyNztcblxudmFyIGlubGluZVRhYmxlID0gLyogaW5saW5lVGFibGUgKi8tODU0MDUwMDU5O1xuXG52YXIgbGlzdEl0ZW0gPSAvKiBsaXN0SXRlbSAqLzYzMjU5MTUwNTtcblxudmFyIHJ1bkluID0gLyogcnVuSW4gKi8tMjQ1OTAzMzQ0O1xuXG52YXIgdGFibGUgPSAvKiB0YWJsZSAqLzE4MjY5NTk1MDtcblxudmFyIHRhYmxlQ2FwdGlvbiA9IC8qIHRhYmxlQ2FwdGlvbiAqLzEwNTQ4MjY2MTY7XG5cbnZhciB0YWJsZUNvbHVtbkdyb3VwID0gLyogdGFibGVDb2x1bW5Hcm91cCAqLzg1MDIwOTU2MztcblxudmFyIHRhYmxlSGVhZGVyR3JvdXAgPSAvKiB0YWJsZUhlYWRlckdyb3VwICovNjA2NDE5MjA0O1xuXG52YXIgdGFibGVGb290ZXJHcm91cCA9IC8qIHRhYmxlRm9vdGVyR3JvdXAgKi8tMTA0NTY5NjIwMjtcblxudmFyIHRhYmxlUm93R3JvdXAgPSAvKiB0YWJsZVJvd0dyb3VwICovLTgzNjcyNTUxNztcblxudmFyIHRhYmxlQ2VsbCA9IC8qIHRhYmxlQ2VsbCAqLzc5MzkxMjUyODtcblxudmFyIHRhYmxlQ29sdW1uID0gLyogdGFibGVDb2x1bW4gKi85NzEyMjY5MjtcblxudmFyIHRhYmxlUm93ID0gLyogdGFibGVSb3cgKi8tODQzMTI5MTcyO1xuXG52YXIgZmxleFN0YXJ0ID0gLyogZmxleFN0YXJ0ICovNjYyNDM5NTI5O1xuXG52YXIgZmxleEVuZCA9IC8qIGZsZXhFbmQgKi85MjQyNjgwNjY7XG5cbnZhciBjZW50ZXIgPSAvKiBjZW50ZXIgKi85ODI0ODE0OTtcblxudmFyIHN0cmV0Y2ggPSAvKiBzdHJldGNoICovLTE2MjMxNjc5NTtcblxudmFyIHNwYWNlQmV0d2VlbiA9IC8qIHNwYWNlQmV0d2VlbiAqLzUxNjY4MjE0NjtcblxudmFyIHNwYWNlQXJvdW5kID0gLyogc3BhY2VBcm91bmQgKi8tNDg1ODk1NzU3O1xuXG52YXIgc3BhY2VFdmVubHkgPSAvKiBzcGFjZUV2ZW5seSAqLy0xMDE2MDYxNTU1O1xuXG52YXIgYmFzZWxpbmUgPSAvKiBiYXNlbGluZSAqLzI4NzgyNTAyOTtcblxudmFyIGZvcndhcmRzID0gLyogZm9yd2FyZHMgKi83MzM2NTM3NzQ7XG5cbnZhciBiYWNrd2FyZHMgPSAvKiBiYWNrd2FyZHMgKi8yNDU4NjExNjg7XG5cbnZhciBib3RoID0gLyogYm90aCAqLy0xMDU1MTYwMTkxO1xuXG52YXIgaW5maW5pdGUgPSAvKiBpbmZpbml0ZSAqLy02MzA2NDcwODQ7XG5cbnZhciBwYXVzZWQgPSAvKiBwYXVzZWQgKi8tMjc2NTQ1MzYyO1xuXG52YXIgcnVubmluZyA9IC8qIHJ1bm5pbmcgKi8tMzQ1NDEyMDk3O1xuXG52YXIgaW5zaWRlID0gLyogaW5zaWRlICovNTAxMjM1NzA4O1xuXG52YXIgb3V0c2lkZSA9IC8qIG91dHNpZGUgKi8tNDMwMDExMDk5O1xuXG52YXIgc29saWQgPSAvKiBzb2xpZCAqLzEyOTU2NzE1O1xuXG52YXIgZG90dGVkID0gLyogZG90dGVkICovODQxOTc5NjI2O1xuXG52YXIgZGFzaGVkID0gLyogZGFzaGVkICovNTY4NDAzNTA1O1xuXG52YXIgdW5kZXJsaW5lID0gLyogdW5kZXJsaW5lICovMTMxMTQyOTI0O1xuXG52YXIgb3ZlcmxpbmUgPSAvKiBvdmVybGluZSAqLy05ODY2NTE4MzI7XG5cbnZhciBsaW5lVGhyb3VnaCA9IC8qIGxpbmVUaHJvdWdoICovNDEyMTU1NTY5O1xuXG52YXIgY2xpcCA9IC8qIGNsaXAgKi8tMTA0NDIyMjI1NjtcblxudmFyIGVsbGlwc2lzID0gLyogZWxsaXBzaXMgKi8xNjY4ODg3ODU7XG5cbnZhciB3YXZ5ID0gLyogd2F2eSAqLy04MjI5NzUwMjc7XG5cbnZhciAkJGRvdWJsZSA9IC8qIGRvdWJsZSAqLzg1MjE3NTYzMztcblxudmFyIHVwcGVyY2FzZSA9IC8qIHVwcGVyY2FzZSAqLy00MTUzMzAwMzA7XG5cbnZhciBsb3dlcmNhc2UgPSAvKiBsb3dlcmNhc2UgKi8tNDI1MzQ5ODM5O1xuXG52YXIgY2FwaXRhbGl6ZSA9IC8qIGNhcGl0YWxpemUgKi8tNTA5ODY3NjA0O1xuXG52YXIgc3ViID0gLyogc3ViICovNTc0NTAyNDtcblxudmFyICQkc3VwZXIgPSAvKiBzdXBlciAqLzc5NjkyMTU1O1xuXG52YXIgdGV4dFRvcCA9IC8qIHRleHRUb3AgKi81MTY0MDYyNDg7XG5cbnZhciB0ZXh0Qm90dG9tID0gLyogdGV4dEJvdHRvbSAqLzQ3NjY2OTgxNjtcblxudmFyIG1pZGRsZSA9IC8qIG1pZGRsZSAqLy04NjYyMDA3NDc7XG5cbnZhciBub3JtYWwgPSAvKiBub3JtYWwgKi84MTIyMTY4NzE7XG5cbnZhciBicmVha0FsbCA9IC8qIGJyZWFrQWxsICovLTMyMzc2MDczNDtcblxudmFyIGtlZXBBbGwgPSAvKiBrZWVwQWxsICovODkyNzQ4MTg4O1xuXG52YXIgYnJlYWtXb3JkID0gLyogYnJlYWtXb3JkICovMTA1OTkyMTQ0OTtcblxudmFyIHJldmVyc2UgPSAvKiByZXZlcnNlICovNDUyNzM3MzE0O1xuXG52YXIgYWx0ZXJuYXRlID0gLyogYWx0ZXJuYXRlICovODkyNTg2Mjk4O1xuXG52YXIgYWx0ZXJuYXRlUmV2ZXJzZSA9IC8qIGFsdGVybmF0ZVJldmVyc2UgKi81NDU0MjgyMzI7XG5cbnZhciBmaWxsJDEgPSAvKiBmaWxsICovLTEwMTExMDIwNzc7XG5cbnZhciBjb250ZW50ID0gLyogY29udGVudCAqLzQyNzI2NTMzNztcblxudmFyIG1heENvbnRlbnQgPSAvKiBtYXhDb250ZW50ICovNjA1NTcwNDU7XG5cbnZhciBtaW5Db250ZW50ID0gLyogbWluQ29udGVudCAqLy01NTA1Nzc3MjE7XG5cbnZhciBmaXRDb250ZW50ID0gLyogZml0Q29udGVudCAqLy0xOTU4MDUzMzY7XG5cbnZhciBhbGwgPSAvKiBhbGwgKi80ODQ3OTA1O1xuXG52YXIgcm91bmQgPSAvKiByb3VuZCAqLy0zMTIwODQ0MDI7XG5cbnZhciBtaXRlciA9IC8qIG1pdGVyICovMTQxMzYxMTU3O1xuXG52YXIgYmV2ZWwgPSAvKiBiZXZlbCAqLzgxMTY4MTkxNDtcblxudmFyIGJ1dHQgPSAvKiBidXR0ICovLTEwNTQ4NjE4MDU7XG5cbnZhciBzcXVhcmUgPSAvKiBzcXVhcmUgKi8tNjU1MjI4NzcxO1xuXG52YXIgdHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9uTGlzdDtcblxudmFyIFNWRyA9IHtcbiAgZmlsbDogZmlsbCxcbiAgZmlsbFJ1bGU6IGZpbGxSdWxlLFxuICBmaWxsT3BhY2l0eTogZmlsbE9wYWNpdHksXG4gIHN0cm9rZTogc3Ryb2tlLFxuICBzdHJva2VMaW5lY2FwOiBzdHJva2VMaW5lY2FwLFxuICBzdHJva2VMaW5lam9pbjogc3Ryb2tlTGluZWpvaW4sXG4gIHN0cm9rZU1pdGVybGltaXQ6IHN0cm9rZU1pdGVybGltaXQsXG4gIHN0cm9rZVdpZHRoOiBzdHJva2VXaWR0aCxcbiAgc3Ryb2tlT3BhY2l0eTogc3Ryb2tlT3BhY2l0eSxcbiAgc3RvcENvbG9yOiBzdG9wQ29sb3IsXG4gIHN0b3BPcGFjaXR5OiBzdG9wT3BhY2l0eVxufTtcblxudmFyIGFsaWNlYmx1ZSA9IENzc19Db2xvcnMuYWxpY2VibHVlO1xuXG52YXIgYW50aXF1ZXdoaXRlID0gQ3NzX0NvbG9ycy5hbnRpcXVld2hpdGU7XG5cbnZhciBhcXVhID0gQ3NzX0NvbG9ycy5hcXVhO1xuXG52YXIgYXF1YW1hcmluZSA9IENzc19Db2xvcnMuYXF1YW1hcmluZTtcblxudmFyIGF6dXJlID0gQ3NzX0NvbG9ycy5henVyZTtcblxudmFyIGJlaWdlID0gQ3NzX0NvbG9ycy5iZWlnZTtcblxudmFyIGJpc3F1ZSA9IENzc19Db2xvcnMuYmlzcXVlO1xuXG52YXIgYmxhY2sgPSBDc3NfQ29sb3JzLmJsYWNrO1xuXG52YXIgYmxhbmNoZWRhbG1vbmQgPSBDc3NfQ29sb3JzLmJsYW5jaGVkYWxtb25kO1xuXG52YXIgYmx1ZSA9IENzc19Db2xvcnMuYmx1ZTtcblxudmFyIGJsdWV2aW9sZXQgPSBDc3NfQ29sb3JzLmJsdWV2aW9sZXQ7XG5cbnZhciBicm93biA9IENzc19Db2xvcnMuYnJvd247XG5cbnZhciBidXJseXdvb2QgPSBDc3NfQ29sb3JzLmJ1cmx5d29vZDtcblxudmFyIGNhZGV0Ymx1ZSA9IENzc19Db2xvcnMuY2FkZXRibHVlO1xuXG52YXIgY2hhcnRyZXVzZSA9IENzc19Db2xvcnMuY2hhcnRyZXVzZTtcblxudmFyIGNob2NvbGF0ZSA9IENzc19Db2xvcnMuY2hvY29sYXRlO1xuXG52YXIgY29yYWwgPSBDc3NfQ29sb3JzLmNvcmFsO1xuXG52YXIgY29ybmZsb3dlcmJsdWUgPSBDc3NfQ29sb3JzLmNvcm5mbG93ZXJibHVlO1xuXG52YXIgY29ybnNpbGsgPSBDc3NfQ29sb3JzLmNvcm5zaWxrO1xuXG52YXIgY3JpbXNvbiA9IENzc19Db2xvcnMuY3JpbXNvbjtcblxudmFyIGN5YW4gPSBDc3NfQ29sb3JzLmN5YW47XG5cbnZhciBkYXJrYmx1ZSA9IENzc19Db2xvcnMuZGFya2JsdWU7XG5cbnZhciBkYXJrY3lhbiA9IENzc19Db2xvcnMuZGFya2N5YW47XG5cbnZhciBkYXJrZ29sZGVucm9kID0gQ3NzX0NvbG9ycy5kYXJrZ29sZGVucm9kO1xuXG52YXIgZGFya2dyYXkgPSBDc3NfQ29sb3JzLmRhcmtncmF5O1xuXG52YXIgZGFya2dyZXkgPSBDc3NfQ29sb3JzLmRhcmtncmV5O1xuXG52YXIgZGFya2dyZWVuID0gQ3NzX0NvbG9ycy5kYXJrZ3JlZW47XG5cbnZhciBkYXJra2hha2kgPSBDc3NfQ29sb3JzLmRhcmtraGFraTtcblxudmFyIGRhcmttYWdlbnRhID0gQ3NzX0NvbG9ycy5kYXJrbWFnZW50YTtcblxudmFyIGRhcmtvbGl2ZWdyZWVuID0gQ3NzX0NvbG9ycy5kYXJrb2xpdmVncmVlbjtcblxudmFyIGRhcmtvcmFuZ2UgPSBDc3NfQ29sb3JzLmRhcmtvcmFuZ2U7XG5cbnZhciBkYXJrb3JjaGlkID0gQ3NzX0NvbG9ycy5kYXJrb3JjaGlkO1xuXG52YXIgZGFya3JlZCA9IENzc19Db2xvcnMuZGFya3JlZDtcblxudmFyIGRhcmtzYWxtb24gPSBDc3NfQ29sb3JzLmRhcmtzYWxtb247XG5cbnZhciBkYXJrc2VhZ3JlZW4gPSBDc3NfQ29sb3JzLmRhcmtzZWFncmVlbjtcblxudmFyIGRhcmtzbGF0ZWJsdWUgPSBDc3NfQ29sb3JzLmRhcmtzbGF0ZWJsdWU7XG5cbnZhciBkYXJrc2xhdGVncmF5ID0gQ3NzX0NvbG9ycy5kYXJrc2xhdGVncmF5O1xuXG52YXIgZGFya3NsYXRlZ3JleSA9IENzc19Db2xvcnMuZGFya3NsYXRlZ3JleTtcblxudmFyIGRhcmt0dXJxdW9pc2UgPSBDc3NfQ29sb3JzLmRhcmt0dXJxdW9pc2U7XG5cbnZhciBkYXJrdmlvbGV0ID0gQ3NzX0NvbG9ycy5kYXJrdmlvbGV0O1xuXG52YXIgZGVlcHBpbmsgPSBDc3NfQ29sb3JzLmRlZXBwaW5rO1xuXG52YXIgZGVlcHNreWJsdWUgPSBDc3NfQ29sb3JzLmRlZXBza3libHVlO1xuXG52YXIgZGltZ3JheSA9IENzc19Db2xvcnMuZGltZ3JheTtcblxudmFyIGRpbWdyZXkgPSBDc3NfQ29sb3JzLmRpbWdyZXk7XG5cbnZhciBkb2RnZXJibHVlID0gQ3NzX0NvbG9ycy5kb2RnZXJibHVlO1xuXG52YXIgZmlyZWJyaWNrID0gQ3NzX0NvbG9ycy5maXJlYnJpY2s7XG5cbnZhciBmbG9yYWx3aGl0ZSA9IENzc19Db2xvcnMuZmxvcmFsd2hpdGU7XG5cbnZhciBmb3Jlc3RncmVlbiA9IENzc19Db2xvcnMuZm9yZXN0Z3JlZW47XG5cbnZhciBmdWNoc2lhID0gQ3NzX0NvbG9ycy5mdWNoc2lhO1xuXG52YXIgZ2FpbnNib3JvID0gQ3NzX0NvbG9ycy5nYWluc2Jvcm87XG5cbnZhciBnaG9zdHdoaXRlID0gQ3NzX0NvbG9ycy5naG9zdHdoaXRlO1xuXG52YXIgZ29sZCA9IENzc19Db2xvcnMuZ29sZDtcblxudmFyIGdvbGRlbnJvZCA9IENzc19Db2xvcnMuZ29sZGVucm9kO1xuXG52YXIgZ3JheSA9IENzc19Db2xvcnMuZ3JheTtcblxudmFyIGdyZXkgPSBDc3NfQ29sb3JzLmdyZXk7XG5cbnZhciBncmVlbiA9IENzc19Db2xvcnMuZ3JlZW47XG5cbnZhciBncmVlbnllbGxvdyA9IENzc19Db2xvcnMuZ3JlZW55ZWxsb3c7XG5cbnZhciBob25leWRldyA9IENzc19Db2xvcnMuaG9uZXlkZXc7XG5cbnZhciBob3RwaW5rID0gQ3NzX0NvbG9ycy5ob3RwaW5rO1xuXG52YXIgaW5kaWFucmVkID0gQ3NzX0NvbG9ycy5pbmRpYW5yZWQ7XG5cbnZhciBpbmRpZ28gPSBDc3NfQ29sb3JzLmluZGlnbztcblxudmFyIGl2b3J5ID0gQ3NzX0NvbG9ycy5pdm9yeTtcblxudmFyIGtoYWtpID0gQ3NzX0NvbG9ycy5raGFraTtcblxudmFyIGxhdmVuZGVyID0gQ3NzX0NvbG9ycy5sYXZlbmRlcjtcblxudmFyIGxhdmVuZGVyYmx1c2ggPSBDc3NfQ29sb3JzLmxhdmVuZGVyYmx1c2g7XG5cbnZhciBsYXduZ3JlZW4gPSBDc3NfQ29sb3JzLmxhd25ncmVlbjtcblxudmFyIGxlbW9uY2hpZmZvbiA9IENzc19Db2xvcnMubGVtb25jaGlmZm9uO1xuXG52YXIgbGlnaHRibHVlID0gQ3NzX0NvbG9ycy5saWdodGJsdWU7XG5cbnZhciBsaWdodGNvcmFsID0gQ3NzX0NvbG9ycy5saWdodGNvcmFsO1xuXG52YXIgbGlnaHRjeWFuID0gQ3NzX0NvbG9ycy5saWdodGN5YW47XG5cbnZhciBsaWdodGdvbGRlbnJvZHllbGxvdyA9IENzc19Db2xvcnMubGlnaHRnb2xkZW5yb2R5ZWxsb3c7XG5cbnZhciBsaWdodGdyYXkgPSBDc3NfQ29sb3JzLmxpZ2h0Z3JheTtcblxudmFyIGxpZ2h0Z3JleSA9IENzc19Db2xvcnMubGlnaHRncmV5O1xuXG52YXIgbGlnaHRncmVlbiA9IENzc19Db2xvcnMubGlnaHRncmVlbjtcblxudmFyIGxpZ2h0cGluayA9IENzc19Db2xvcnMubGlnaHRwaW5rO1xuXG52YXIgbGlnaHRzYWxtb24gPSBDc3NfQ29sb3JzLmxpZ2h0c2FsbW9uO1xuXG52YXIgbGlnaHRzZWFncmVlbiA9IENzc19Db2xvcnMubGlnaHRzZWFncmVlbjtcblxudmFyIGxpZ2h0c2t5Ymx1ZSA9IENzc19Db2xvcnMubGlnaHRza3libHVlO1xuXG52YXIgbGlnaHRzbGF0ZWdyYXkgPSBDc3NfQ29sb3JzLmxpZ2h0c2xhdGVncmF5O1xuXG52YXIgbGlnaHRzbGF0ZWdyZXkgPSBDc3NfQ29sb3JzLmxpZ2h0c2xhdGVncmV5O1xuXG52YXIgbGlnaHRzdGVlbGJsdWUgPSBDc3NfQ29sb3JzLmxpZ2h0c3RlZWxibHVlO1xuXG52YXIgbGlnaHR5ZWxsb3cgPSBDc3NfQ29sb3JzLmxpZ2h0eWVsbG93O1xuXG52YXIgbGltZSA9IENzc19Db2xvcnMubGltZTtcblxudmFyIGxpbWVncmVlbiA9IENzc19Db2xvcnMubGltZWdyZWVuO1xuXG52YXIgbGluZW4gPSBDc3NfQ29sb3JzLmxpbmVuO1xuXG52YXIgbWFnZW50YSA9IENzc19Db2xvcnMubWFnZW50YTtcblxudmFyIG1hcm9vbiA9IENzc19Db2xvcnMubWFyb29uO1xuXG52YXIgbWVkaXVtYXF1YW1hcmluZSA9IENzc19Db2xvcnMubWVkaXVtYXF1YW1hcmluZTtcblxudmFyIG1lZGl1bWJsdWUgPSBDc3NfQ29sb3JzLm1lZGl1bWJsdWU7XG5cbnZhciBtZWRpdW1vcmNoaWQgPSBDc3NfQ29sb3JzLm1lZGl1bW9yY2hpZDtcblxudmFyIG1lZGl1bXB1cnBsZSA9IENzc19Db2xvcnMubWVkaXVtcHVycGxlO1xuXG52YXIgbWVkaXVtc2VhZ3JlZW4gPSBDc3NfQ29sb3JzLm1lZGl1bXNlYWdyZWVuO1xuXG52YXIgbWVkaXVtc2xhdGVibHVlID0gQ3NzX0NvbG9ycy5tZWRpdW1zbGF0ZWJsdWU7XG5cbnZhciBtZWRpdW1zcHJpbmdncmVlbiA9IENzc19Db2xvcnMubWVkaXVtc3ByaW5nZ3JlZW47XG5cbnZhciBtZWRpdW10dXJxdW9pc2UgPSBDc3NfQ29sb3JzLm1lZGl1bXR1cnF1b2lzZTtcblxudmFyIG1lZGl1bXZpb2xldHJlZCA9IENzc19Db2xvcnMubWVkaXVtdmlvbGV0cmVkO1xuXG52YXIgbWlkbmlnaHRibHVlID0gQ3NzX0NvbG9ycy5taWRuaWdodGJsdWU7XG5cbnZhciBtaW50Y3JlYW0gPSBDc3NfQ29sb3JzLm1pbnRjcmVhbTtcblxudmFyIG1pc3R5cm9zZSA9IENzc19Db2xvcnMubWlzdHlyb3NlO1xuXG52YXIgbW9jY2FzaW4gPSBDc3NfQ29sb3JzLm1vY2Nhc2luO1xuXG52YXIgbmF2YWpvd2hpdGUgPSBDc3NfQ29sb3JzLm5hdmFqb3doaXRlO1xuXG52YXIgbmF2eSA9IENzc19Db2xvcnMubmF2eTtcblxudmFyIG9sZGxhY2UgPSBDc3NfQ29sb3JzLm9sZGxhY2U7XG5cbnZhciBvbGl2ZSA9IENzc19Db2xvcnMub2xpdmU7XG5cbnZhciBvbGl2ZWRyYWIgPSBDc3NfQ29sb3JzLm9saXZlZHJhYjtcblxudmFyIG9yYW5nZSA9IENzc19Db2xvcnMub3JhbmdlO1xuXG52YXIgb3JhbmdlcmVkID0gQ3NzX0NvbG9ycy5vcmFuZ2VyZWQ7XG5cbnZhciBvcmNoaWQgPSBDc3NfQ29sb3JzLm9yY2hpZDtcblxudmFyIHBhbGVnb2xkZW5yb2QgPSBDc3NfQ29sb3JzLnBhbGVnb2xkZW5yb2Q7XG5cbnZhciBwYWxlZ3JlZW4gPSBDc3NfQ29sb3JzLnBhbGVncmVlbjtcblxudmFyIHBhbGV0dXJxdW9pc2UgPSBDc3NfQ29sb3JzLnBhbGV0dXJxdW9pc2U7XG5cbnZhciBwYWxldmlvbGV0cmVkID0gQ3NzX0NvbG9ycy5wYWxldmlvbGV0cmVkO1xuXG52YXIgcGFwYXlhd2hpcCA9IENzc19Db2xvcnMucGFwYXlhd2hpcDtcblxudmFyIHBlYWNocHVmZiA9IENzc19Db2xvcnMucGVhY2hwdWZmO1xuXG52YXIgcGVydSA9IENzc19Db2xvcnMucGVydTtcblxudmFyIHBpbmsgPSBDc3NfQ29sb3JzLnBpbms7XG5cbnZhciBwbHVtID0gQ3NzX0NvbG9ycy5wbHVtO1xuXG52YXIgcG93ZGVyYmx1ZSA9IENzc19Db2xvcnMucG93ZGVyYmx1ZTtcblxudmFyIHB1cnBsZSA9IENzc19Db2xvcnMucHVycGxlO1xuXG52YXIgcmViZWNjYXB1cnBsZSA9IENzc19Db2xvcnMucmViZWNjYXB1cnBsZTtcblxudmFyIHJlZCA9IENzc19Db2xvcnMucmVkO1xuXG52YXIgcm9zeWJyb3duID0gQ3NzX0NvbG9ycy5yb3N5YnJvd247XG5cbnZhciByb3lhbGJsdWUgPSBDc3NfQ29sb3JzLnJveWFsYmx1ZTtcblxudmFyIHNhZGRsZWJyb3duID0gQ3NzX0NvbG9ycy5zYWRkbGVicm93bjtcblxudmFyIHNhbG1vbiA9IENzc19Db2xvcnMuc2FsbW9uO1xuXG52YXIgc2FuZHlicm93biA9IENzc19Db2xvcnMuc2FuZHlicm93bjtcblxudmFyIHNlYWdyZWVuID0gQ3NzX0NvbG9ycy5zZWFncmVlbjtcblxudmFyIHNlYXNoZWxsID0gQ3NzX0NvbG9ycy5zZWFzaGVsbDtcblxudmFyIHNpZW5uYSA9IENzc19Db2xvcnMuc2llbm5hO1xuXG52YXIgc2lsdmVyID0gQ3NzX0NvbG9ycy5zaWx2ZXI7XG5cbnZhciBza3libHVlID0gQ3NzX0NvbG9ycy5za3libHVlO1xuXG52YXIgc2xhdGVibHVlID0gQ3NzX0NvbG9ycy5zbGF0ZWJsdWU7XG5cbnZhciBzbGF0ZWdyYXkgPSBDc3NfQ29sb3JzLnNsYXRlZ3JheTtcblxudmFyIHNsYXRlZ3JleSA9IENzc19Db2xvcnMuc2xhdGVncmV5O1xuXG52YXIgc25vdyA9IENzc19Db2xvcnMuc25vdztcblxudmFyIHNwcmluZ2dyZWVuID0gQ3NzX0NvbG9ycy5zcHJpbmdncmVlbjtcblxudmFyIHN0ZWVsYmx1ZSA9IENzc19Db2xvcnMuc3RlZWxibHVlO1xuXG52YXIgdGFuID0gQ3NzX0NvbG9ycy50YW47XG5cbnZhciB0ZWFsID0gQ3NzX0NvbG9ycy50ZWFsO1xuXG52YXIgdGhpc3RsZSA9IENzc19Db2xvcnMudGhpc3RsZTtcblxudmFyIHRvbWF0byA9IENzc19Db2xvcnMudG9tYXRvO1xuXG52YXIgdHVycXVvaXNlID0gQ3NzX0NvbG9ycy50dXJxdW9pc2U7XG5cbnZhciB2aW9sZXQgPSBDc3NfQ29sb3JzLnZpb2xldDtcblxudmFyIHdoZWF0ID0gQ3NzX0NvbG9ycy53aGVhdDtcblxudmFyIHdoaXRlID0gQ3NzX0NvbG9ycy53aGl0ZTtcblxudmFyIHdoaXRlc21va2UgPSBDc3NfQ29sb3JzLndoaXRlc21va2U7XG5cbnZhciB5ZWxsb3cgPSBDc3NfQ29sb3JzLnllbGxvdztcblxudmFyIHllbGxvd2dyZWVuID0gQ3NzX0NvbG9ycy55ZWxsb3dncmVlbjtcblxuZXhwb3J0IHtcbiAgVHlwZXMgLFxuICBNYWtlICxcbiAgdG9Kc29uICxcbiAgaW1wb3J0YW50ICxcbiAgbGFiZWwgLFxuICBTaGFkb3cgLFxuICB1bnNhZmUgLFxuICBhbGlnbkNvbnRlbnQgLFxuICBhbGlnbkl0ZW1zICxcbiAgYWxpZ25TZWxmICxcbiAgYW5pbWF0aW9uRGVsYXkgLFxuICBhbmltYXRpb25EaXJlY3Rpb24gLFxuICBhbmltYXRpb25EdXJhdGlvbiAsXG4gIGFuaW1hdGlvbkZpbGxNb2RlICxcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQgLFxuICBhbmltYXRpb25QbGF5U3RhdGUgLFxuICBhbmltYXRpb25UaW1pbmdGdW5jdGlvbiAsXG4gIGJhY2tkcm9wRmlsdGVyICxcbiAgYmFja2ZhY2VWaXNpYmlsaXR5ICxcbiAgYmFja2dyb3VuZEF0dGFjaG1lbnQgLFxuICBiYWNrZ3JvdW5kQ29sb3IgLFxuICBiYWNrZ3JvdW5kQ2xpcCAsXG4gIGJhY2tncm91bmRJbWFnZSAsXG4gIGJhY2tncm91bmRPcmlnaW4gLFxuICBiYWNrZ3JvdW5kUG9zaXRpb24gLFxuICBiYWNrZ3JvdW5kUG9zaXRpb25zICxcbiAgYmFja2dyb3VuZFBvc2l0aW9uNCAsXG4gIGJhY2tncm91bmRSZXBlYXQgLFxuICBib3JkZXJCb3R0b20gLFxuICBib3JkZXJCb3R0b21Db2xvciAsXG4gIGJvcmRlckJvdHRvbUxlZnRSYWRpdXMgLFxuICBib3JkZXJCb3R0b21SaWdodFJhZGl1cyAsXG4gIGJvcmRlckJvdHRvbVN0eWxlICxcbiAgYm9yZGVyQm90dG9tV2lkdGggLFxuICBib3JkZXJDb2xsYXBzZSAsXG4gIGJvcmRlckNvbG9yICxcbiAgYm9yZGVyTGVmdCAsXG4gIGJvcmRlckxlZnRDb2xvciAsXG4gIGJvcmRlckxlZnRTdHlsZSAsXG4gIGJvcmRlckxlZnRXaWR0aCAsXG4gIGJvcmRlclJpZ2h0ICxcbiAgYm9yZGVyUmlnaHRDb2xvciAsXG4gIGJvcmRlclJpZ2h0U3R5bGUgLFxuICBib3JkZXJSaWdodFdpZHRoICxcbiAgYm9yZGVyUmFkaXVzICxcbiAgYm9yZGVyU3BhY2luZyAsXG4gIGJvcmRlclN0eWxlICxcbiAgYm9yZGVyVG9wQ29sb3IgLFxuICBib3JkZXJUb3BMZWZ0UmFkaXVzICxcbiAgYm9yZGVyVG9wUmlnaHRSYWRpdXMgLFxuICBib3JkZXJUb3BTdHlsZSAsXG4gIGJvcmRlclRvcFdpZHRoICxcbiAgYm9yZGVyV2lkdGggLFxuICBib3R0b20gLFxuICBib3hTaXppbmcgLFxuICBib3hTaGFkb3cgLFxuICBib3hTaGFkb3dzICxcbiAgY2xlYXIgLFxuICBjbGlwUGF0aCAsXG4gIGNvbG9yICxcbiAgY29sdW1uQ291bnQgLFxuICBjb250ZW50UnVsZSAsXG4gIGNvbnRlbnRSdWxlcyAsXG4gIGNvdW50ZXJJbmNyZW1lbnQgLFxuICBjb3VudGVyc0luY3JlbWVudCAsXG4gIGNvdW50ZXJSZXNldCAsXG4gIGNvdW50ZXJzUmVzZXQgLFxuICBjb3VudGVyU2V0ICxcbiAgY291bnRlcnNTZXQgLFxuICBjdXJzb3IgLFxuICBkaXJlY3Rpb24gLFxuICBkaXNwbGF5ICxcbiAgZmxleCAsXG4gIGZsZXhCYXNpcyAsXG4gIGZsZXhEaXJlY3Rpb24gLFxuICBmbGV4R3JvdyAsXG4gIGZsZXhTaHJpbmsgLFxuICBmbGV4V3JhcCAsXG4gICQkZmxvYXQgLFxuICBmb250RmFtaWx5ICxcbiAgZm9udEZhbWlsaWVzICxcbiAgZm9udFNpemUgLFxuICBmb250U3R5bGUgLFxuICBmb250VmFyaWFudCAsXG4gIGZvbnRXZWlnaHQgLFxuICBncmlkQXJlYSAsXG4gIGdyaWRBcmVhMiAsXG4gIGdyaWRBcmVhMyAsXG4gIGdyaWRBcmVhNCAsXG4gIGdyaWRBdXRvRmxvdyAsXG4gIGdyaWRDb2x1bW4gLFxuICBncmlkQ29sdW1uRW5kICxcbiAgZ3JpZENvbHVtbkdhcCAsXG4gIGdyaWRDb2x1bW5TdGFydCAsXG4gIGdyaWRHYXAgLFxuICBncmlkUm93ICxcbiAgZ3JpZFJvd0VuZCAsXG4gIGdyaWRSb3dHYXAgLFxuICBncmlkUm93U3RhcnQgLFxuICBncmlkVGVtcGxhdGVBcmVhcyAsXG4gIGhlaWdodCAsXG4gIGp1c3RpZnlDb250ZW50ICxcbiAganVzdGlmeVNlbGYgLFxuICBsZWZ0ICxcbiAgbGV0dGVyU3BhY2luZyAsXG4gIGxpbmVIZWlnaHQgLFxuICBsaXN0U3R5bGUgLFxuICBsaXN0U3R5bGVJbWFnZSAsXG4gIGxpc3RTdHlsZVR5cGUgLFxuICBsaXN0U3R5bGVQb3NpdGlvbiAsXG4gIG1hcmdpbiAsXG4gIG1hcmdpbjIgLFxuICBtYXJnaW4zICxcbiAgbWFyZ2luNCAsXG4gIG1hcmdpbkxlZnQgLFxuICBtYXJnaW5SaWdodCAsXG4gIG1hcmdpblRvcCAsXG4gIG1hcmdpbkJvdHRvbSAsXG4gIG1heEhlaWdodCAsXG4gIG1heFdpZHRoICxcbiAgbWluSGVpZ2h0ICxcbiAgbWluV2lkdGggLFxuICBvYmplY3RGaXQgLFxuICBvYmplY3RQb3NpdGlvbiAsXG4gIG9wYWNpdHkgLFxuICBvcmRlciAsXG4gIG91dGxpbmUgLFxuICBvdXRsaW5lQ29sb3IgLFxuICBvdXRsaW5lT2Zmc2V0ICxcbiAgb3V0bGluZVN0eWxlICxcbiAgb3V0bGluZVdpZHRoICxcbiAgb3ZlcmZsb3cgLFxuICBvdmVyZmxvd1ggLFxuICBvdmVyZmxvd1kgLFxuICBvdmVyZmxvd1dyYXAgLFxuICBwYWRkaW5nICxcbiAgcGFkZGluZzIgLFxuICBwYWRkaW5nMyAsXG4gIHBhZGRpbmc0ICxcbiAgcGFkZGluZ0xlZnQgLFxuICBwYWRkaW5nUmlnaHQgLFxuICBwYWRkaW5nVG9wICxcbiAgcGFkZGluZ0JvdHRvbSAsXG4gIHBlcnNwZWN0aXZlICxcbiAgcGVyc3BlY3RpdmVPcmlnaW4gLFxuICBwb2ludGVyRXZlbnRzICxcbiAgcG9zaXRpb24gLFxuICByZXNpemUgLFxuICByaWdodCAsXG4gIHRhYmxlTGF5b3V0ICxcbiAgdGV4dEFsaWduICxcbiAgdGV4dERlY29yYXRpb25Db2xvciAsXG4gIHRleHREZWNvcmF0aW9uTGluZSAsXG4gIHRleHREZWNvcmF0aW9uU3R5bGUgLFxuICB0ZXh0SW5kZW50ICxcbiAgdGV4dE92ZXJmbG93ICxcbiAgdGV4dFNoYWRvdyAsXG4gIHRleHRTaGFkb3dzICxcbiAgdGV4dFRyYW5zZm9ybSAsXG4gIHRvcCAsXG4gIHRyYW5zZm9ybSAsXG4gIHRyYW5zZm9ybXMgLFxuICB0cmFuc2Zvcm1PcmlnaW4gLFxuICB0cmFuc2Zvcm1PcmlnaW4zZCAsXG4gIHRyYW5zaXRpb25EZWxheSAsXG4gIHRyYW5zaXRpb25EdXJhdGlvbiAsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eSAsXG4gIHRyYW5zZm9ybVN0eWxlICxcbiAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uICxcbiAgdXNlclNlbGVjdCAsXG4gIHZlcnRpY2FsQWxpZ24gLFxuICB2aXNpYmlsaXR5ICxcbiAgd2lkdGggLFxuICB3aGl0ZVNwYWNlICxcbiAgd29yZEJyZWFrICxcbiAgd29yZFNwYWNpbmcgLFxuICB3b3JkV3JhcCAsXG4gIHpJbmRleCAsXG4gIHNlbGVjdG9yICxcbiAgbWVkaWEgLFxuICBhY3RpdmUgLFxuICBjaGVja2VkICxcbiAgJCRkZWZhdWx0ICxcbiAgJCRkZWZhdWx0IGFzIGRlZmF1bHQsXG4gIGRlZmluZWQgLFxuICBkaXNhYmxlZCAsXG4gIGVtcHR5ICxcbiAgZW5hYmxlZCAsXG4gIGZpcnN0ICxcbiAgZmlyc3RDaGlsZCAsXG4gIGZpcnN0T2ZUeXBlICxcbiAgZm9jdXMgLFxuICBmb2N1c1dpdGhpbiAsXG4gIGhvc3QgLFxuICBob3ZlciAsXG4gIGluZGV0ZXJtaW5hdGUgLFxuICBpblJhbmdlICxcbiAgaW52YWxpZCAsXG4gIGxhbmcgLFxuICBsYXN0Q2hpbGQgLFxuICBsYXN0T2ZUeXBlICxcbiAgbGluayAsXG4gIG5vdF9fICxcbiAgTnRoICxcbiAgbnRoQ2hpbGQgLFxuICBudGhMYXN0Q2hpbGQgLFxuICBudGhMYXN0T2ZUeXBlICxcbiAgbnRoT2ZUeXBlICxcbiAgb25seUNoaWxkICxcbiAgb25seU9mVHlwZSAsXG4gIG9wdGlvbmFsICxcbiAgb3V0T2ZSYW5nZSAsXG4gIHJlYWRPbmx5ICxcbiAgcmVhZFdyaXRlICxcbiAgcmVxdWlyZWQgLFxuICByb290ICxcbiAgc2NvcGUgLFxuICB0YXJnZXQgLFxuICB2YWxpZCAsXG4gIHZpc2l0ZWQgLFxuICBhZnRlciAsXG4gIGJlZm9yZSAsXG4gIGZpcnN0TGV0dGVyICxcbiAgZmlyc3RMaW5lICxcbiAgcGxhY2Vob2xkZXIgLFxuICBzZWxlY3Rpb24gLFxuICBjaGlsZCAsXG4gIGNoaWxkcmVuICxcbiAgZGlyZWN0U2libGluZyAsXG4gIHNpYmxpbmdzICxcbiAgYW55TGluayAsXG4gIGluaXRpYWwgLFxuICBpbmhlcml0XyAsXG4gIHVuc2V0ICxcbiAgYXV0byAsXG4gIG5vbmUgLFxuICB0ZXh0JDEgYXMgdGV4dCxcbiAgcGN0ICxcbiAgY2ggLFxuICBjbSAsXG4gIGVtICxcbiAgZXggLFxuICBtbSAsXG4gIHB0ICxcbiAgcHggLFxuICBweEZsb2F0ICxcbiAgcmVtICxcbiAgdmggLFxuICB2bWluICxcbiAgdm1heCAsXG4gIHplcm8gLFxuICBkZWcgLFxuICByYWQgLFxuICBncmFkICxcbiAgdHVybiAsXG4gIGx0ciAsXG4gIHJ0bCAsXG4gIGFic29sdXRlICxcbiAgcmVsYXRpdmUgLFxuICAkJHN0YXRpYyAsXG4gIGZpeGVkICxcbiAgc3RpY2t5ICxcbiAgaG9yaXpvbnRhbCAsXG4gIHZlcnRpY2FsICxcbiAgc21hbGxDYXBzICxcbiAgaXRhbGljICxcbiAgb2JsaXF1ZSAsXG4gIGhpZGRlbiAsXG4gIHZpc2libGUgLFxuICBzY3JvbGwgLFxuICByZ2IgLFxuICByZ2JhICxcbiAgaHNsICxcbiAgaHNsYSAsXG4gIGhleCAsXG4gIHRyYW5zcGFyZW50ICxcbiAgY3VycmVudENvbG9yICxcbiAgbG9jYWwgLFxuICBwYWRkaW5nQm94ICxcbiAgYm9yZGVyQm94ICxcbiAgY29udGVudEJveCAsXG4gIG5vUmVwZWF0ICxcbiAgc3BhY2UgLFxuICByZXBlYXQgLFxuICBtaW5tYXggLFxuICByZXBlYXRYICxcbiAgcmVwZWF0WSAsXG4gIGNvbnRhaW4gLFxuICBjb3ZlciAsXG4gIHJvdyAsXG4gIHJvd1JldmVyc2UgLFxuICBjb2x1bW4gLFxuICBjb2x1bW5SZXZlcnNlICxcbiAgd3JhcCAsXG4gIG5vd3JhcCAsXG4gIHdyYXBSZXZlcnNlICxcbiAgaW5saW5lICxcbiAgYmxvY2sgLFxuICBjb250ZW50cyAsXG4gIGZsZXhCb3ggLFxuICBncmlkICxcbiAgaW5saW5lQmxvY2sgLFxuICBpbmxpbmVGbGV4ICxcbiAgaW5saW5lR3JpZCAsXG4gIGlubGluZVRhYmxlICxcbiAgbGlzdEl0ZW0gLFxuICBydW5JbiAsXG4gIHRhYmxlICxcbiAgdGFibGVDYXB0aW9uICxcbiAgdGFibGVDb2x1bW5Hcm91cCAsXG4gIHRhYmxlSGVhZGVyR3JvdXAgLFxuICB0YWJsZUZvb3Rlckdyb3VwICxcbiAgdGFibGVSb3dHcm91cCAsXG4gIHRhYmxlQ2VsbCAsXG4gIHRhYmxlQ29sdW1uICxcbiAgdGFibGVSb3cgLFxuICBmbGV4U3RhcnQgLFxuICBmbGV4RW5kICxcbiAgY2VudGVyICxcbiAgc3RyZXRjaCAsXG4gIHNwYWNlQmV0d2VlbiAsXG4gIHNwYWNlQXJvdW5kICxcbiAgc3BhY2VFdmVubHkgLFxuICBiYXNlbGluZSAsXG4gIGZvcndhcmRzICxcbiAgYmFja3dhcmRzICxcbiAgYm90aCAsXG4gIGluZmluaXRlICxcbiAgY291bnQgLFxuICBwYXVzZWQgLFxuICBydW5uaW5nICxcbiAgaW5zaWRlICxcbiAgb3V0c2lkZSAsXG4gIHNvbGlkICxcbiAgZG90dGVkICxcbiAgZGFzaGVkICxcbiAgdW5kZXJsaW5lICxcbiAgb3ZlcmxpbmUgLFxuICBsaW5lVGhyb3VnaCAsXG4gIGNsaXAgLFxuICBlbGxpcHNpcyAsXG4gIHdhdnkgLFxuICAkJGRvdWJsZSAsXG4gIHVwcGVyY2FzZSAsXG4gIGxvd2VyY2FzZSAsXG4gIGNhcGl0YWxpemUgLFxuICBzdWIgLFxuICAkJHN1cGVyICxcbiAgdGV4dFRvcCAsXG4gIHRleHRCb3R0b20gLFxuICBtaWRkbGUgLFxuICBub3JtYWwgLFxuICBicmVha0FsbCAsXG4gIGtlZXBBbGwgLFxuICBicmVha1dvcmQgLFxuICByZXZlcnNlICxcbiAgYWx0ZXJuYXRlICxcbiAgYWx0ZXJuYXRlUmV2ZXJzZSAsXG4gIGZpbGwkMSBhcyBmaWxsLFxuICBjb250ZW50ICxcbiAgbWF4Q29udGVudCAsXG4gIG1pbkNvbnRlbnQgLFxuICBmaXRDb250ZW50ICxcbiAgYWxsICxcbiAgcm91bmQgLFxuICBtaXRlciAsXG4gIGJldmVsICxcbiAgYnV0dCAsXG4gIHNxdWFyZSAsXG4gIHRoaW4gLFxuICBleHRyYUxpZ2h0ICxcbiAgbGlnaHQgLFxuICBtZWRpdW0gLFxuICBzZW1pQm9sZCAsXG4gIGJvbGQgLFxuICBleHRyYUJvbGQgLFxuICBsaWdodGVyICxcbiAgYm9sZGVyICxcbiAgZnIgLFxuICB2dyAsXG4gIGxvY2FsVXJsICxcbiAgdXJsICxcbiAgbGluZWFyICxcbiAgZWFzZSAsXG4gIGVhc2VJbiAsXG4gIGVhc2VPdXQgLFxuICBlYXNlSW5PdXQgLFxuICBzdGVwU3RhcnQgLFxuICBzdGVwRW5kICxcbiAgc3RlcHMgLFxuICBjdWJpY0JlemllciAsXG4gIG1hcmdpbkJveCAsXG4gIGZpbGxCb3ggLFxuICBzdHJva2VCb3ggLFxuICB2aWV3Qm94ICxcbiAgdHJhbnNsYXRlICxcbiAgdHJhbnNsYXRlM2QgLFxuICB0cmFuc2xhdGVYICxcbiAgdHJhbnNsYXRlWSAsXG4gIHRyYW5zbGF0ZVogLFxuICBzY2FsZSAsXG4gIHNjYWxlM2QgLFxuICBzY2FsZVggLFxuICBzY2FsZVkgLFxuICBzY2FsZVogLFxuICByb3RhdGUgLFxuICByb3RhdGUzZCAsXG4gIHJvdGF0ZVggLFxuICByb3RhdGVZICxcbiAgcm90YXRlWiAsXG4gIHNrZXcgLFxuICBza2V3WCAsXG4gIHNrZXdZICxcbiAgbGluZWFyR3JhZGllbnQgLFxuICByZXBlYXRpbmdMaW5lYXJHcmFkaWVudCAsXG4gIHJhZGlhbEdyYWRpZW50ICxcbiAgcmVwZWF0aW5nUmFkaWFsR3JhZGllbnQgLFxuICBhcmVhcyAsXG4gIGlkZW50ICxcbiAgbnVtSWRlbnQgLFxuICBjb250ZXh0TWVudSAsXG4gIGhlbHAgLFxuICBwb2ludGVyICxcbiAgcHJvZ3Jlc3MgLFxuICB3YWl0ICxcbiAgY2VsbCAsXG4gIGNyb3NzaGFpciAsXG4gIHZlcnRpY2FsVGV4dCAsXG4gIGFsaWFzICxcbiAgY29weSAsXG4gIG1vdmUgLFxuICBub0Ryb3AgLFxuICBub3RBbGxvd2VkICxcbiAgZ3JhYiAsXG4gIGdyYWJiaW5nICxcbiAgYWxsU2Nyb2xsICxcbiAgY29sUmVzaXplICxcbiAgcm93UmVzaXplICxcbiAgblJlc2l6ZSAsXG4gIGVSZXNpemUgLFxuICBzUmVzaXplICxcbiAgd1Jlc2l6ZSAsXG4gIG5lUmVzaXplICxcbiAgbndSZXNpemUgLFxuICBzZVJlc2l6ZSAsXG4gIHN3UmVzaXplICxcbiAgZXdSZXNpemUgLFxuICBuc1Jlc2l6ZSAsXG4gIG5lc3dSZXNpemUgLFxuICBud3NlUmVzaXplICxcbiAgem9vbUluICxcbiAgem9vbU91dCAsXG4gIGZsZXgzICxcbiAgYm9yZGVyICxcbiAgYm9yZGVyVG9wICxcbiAgYmFja2dyb3VuZFNpemUgLFxuICB0ZXh0RGVjb3JhdGlvbiAsXG4gIGJhY2tncm91bmQgLFxuICBiYWNrZ3JvdW5kcyAsXG4gIGdyaWRBdXRvQ29sdW1ucyAsXG4gIGdyaWRBdXRvUm93cyAsXG4gIGdyaWRUZW1wbGF0ZUNvbHVtbnMgLFxuICBncmlkVGVtcGxhdGVSb3dzICxcbiAgQ2FsYyAsXG4gIHNpemUgLFxuICBmaWx0ZXIgLFxuICBmb250RmFjZSAsXG4gIFRyYW5zaXRpb24gLFxuICB0cmFuc2l0aW9uVmFsdWUgLFxuICB0cmFuc2l0aW9uTGlzdCAsXG4gIHRyYW5zaXRpb24gLFxuICB0cmFuc2l0aW9ucyAsXG4gIEFuaW1hdGlvbiAsXG4gIGFuaW1hdGlvblZhbHVlICxcbiAgYW5pbWF0aW9uICxcbiAgYW5pbWF0aW9ucyAsXG4gIGFuaW1hdGlvbk5hbWUgLFxuICBTVkcgLFxuICBhbGljZWJsdWUgLFxuICBhbnRpcXVld2hpdGUgLFxuICBhcXVhICxcbiAgYXF1YW1hcmluZSAsXG4gIGF6dXJlICxcbiAgYmVpZ2UgLFxuICBiaXNxdWUgLFxuICBibGFjayAsXG4gIGJsYW5jaGVkYWxtb25kICxcbiAgYmx1ZSAsXG4gIGJsdWV2aW9sZXQgLFxuICBicm93biAsXG4gIGJ1cmx5d29vZCAsXG4gIGNhZGV0Ymx1ZSAsXG4gIGNoYXJ0cmV1c2UgLFxuICBjaG9jb2xhdGUgLFxuICBjb3JhbCAsXG4gIGNvcm5mbG93ZXJibHVlICxcbiAgY29ybnNpbGsgLFxuICBjcmltc29uICxcbiAgY3lhbiAsXG4gIGRhcmtibHVlICxcbiAgZGFya2N5YW4gLFxuICBkYXJrZ29sZGVucm9kICxcbiAgZGFya2dyYXkgLFxuICBkYXJrZ3JleSAsXG4gIGRhcmtncmVlbiAsXG4gIGRhcmtraGFraSAsXG4gIGRhcmttYWdlbnRhICxcbiAgZGFya29saXZlZ3JlZW4gLFxuICBkYXJrb3JhbmdlICxcbiAgZGFya29yY2hpZCAsXG4gIGRhcmtyZWQgLFxuICBkYXJrc2FsbW9uICxcbiAgZGFya3NlYWdyZWVuICxcbiAgZGFya3NsYXRlYmx1ZSAsXG4gIGRhcmtzbGF0ZWdyYXkgLFxuICBkYXJrc2xhdGVncmV5ICxcbiAgZGFya3R1cnF1b2lzZSAsXG4gIGRhcmt2aW9sZXQgLFxuICBkZWVwcGluayAsXG4gIGRlZXBza3libHVlICxcbiAgZGltZ3JheSAsXG4gIGRpbWdyZXkgLFxuICBkb2RnZXJibHVlICxcbiAgZmlyZWJyaWNrICxcbiAgZmxvcmFsd2hpdGUgLFxuICBmb3Jlc3RncmVlbiAsXG4gIGZ1Y2hzaWEgLFxuICBnYWluc2Jvcm8gLFxuICBnaG9zdHdoaXRlICxcbiAgZ29sZCAsXG4gIGdvbGRlbnJvZCAsXG4gIGdyYXkgLFxuICBncmV5ICxcbiAgZ3JlZW4gLFxuICBncmVlbnllbGxvdyAsXG4gIGhvbmV5ZGV3ICxcbiAgaG90cGluayAsXG4gIGluZGlhbnJlZCAsXG4gIGluZGlnbyAsXG4gIGl2b3J5ICxcbiAga2hha2kgLFxuICBsYXZlbmRlciAsXG4gIGxhdmVuZGVyYmx1c2ggLFxuICBsYXduZ3JlZW4gLFxuICBsZW1vbmNoaWZmb24gLFxuICBsaWdodGJsdWUgLFxuICBsaWdodGNvcmFsICxcbiAgbGlnaHRjeWFuICxcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3cgLFxuICBsaWdodGdyYXkgLFxuICBsaWdodGdyZXkgLFxuICBsaWdodGdyZWVuICxcbiAgbGlnaHRwaW5rICxcbiAgbGlnaHRzYWxtb24gLFxuICBsaWdodHNlYWdyZWVuICxcbiAgbGlnaHRza3libHVlICxcbiAgbGlnaHRzbGF0ZWdyYXkgLFxuICBsaWdodHNsYXRlZ3JleSAsXG4gIGxpZ2h0c3RlZWxibHVlICxcbiAgbGlnaHR5ZWxsb3cgLFxuICBsaW1lICxcbiAgbGltZWdyZWVuICxcbiAgbGluZW4gLFxuICBtYWdlbnRhICxcbiAgbWFyb29uICxcbiAgbWVkaXVtYXF1YW1hcmluZSAsXG4gIG1lZGl1bWJsdWUgLFxuICBtZWRpdW1vcmNoaWQgLFxuICBtZWRpdW1wdXJwbGUgLFxuICBtZWRpdW1zZWFncmVlbiAsXG4gIG1lZGl1bXNsYXRlYmx1ZSAsXG4gIG1lZGl1bXNwcmluZ2dyZWVuICxcbiAgbWVkaXVtdHVycXVvaXNlICxcbiAgbWVkaXVtdmlvbGV0cmVkICxcbiAgbWlkbmlnaHRibHVlICxcbiAgbWludGNyZWFtICxcbiAgbWlzdHlyb3NlICxcbiAgbW9jY2FzaW4gLFxuICBuYXZham93aGl0ZSAsXG4gIG5hdnkgLFxuICBvbGRsYWNlICxcbiAgb2xpdmUgLFxuICBvbGl2ZWRyYWIgLFxuICBvcmFuZ2UgLFxuICBvcmFuZ2VyZWQgLFxuICBvcmNoaWQgLFxuICBwYWxlZ29sZGVucm9kICxcbiAgcGFsZWdyZWVuICxcbiAgcGFsZXR1cnF1b2lzZSAsXG4gIHBhbGV2aW9sZXRyZWQgLFxuICBwYXBheWF3aGlwICxcbiAgcGVhY2hwdWZmICxcbiAgcGVydSAsXG4gIHBpbmsgLFxuICBwbHVtICxcbiAgcG93ZGVyYmx1ZSAsXG4gIHB1cnBsZSAsXG4gIHJlYmVjY2FwdXJwbGUgLFxuICByZWQgLFxuICByb3N5YnJvd24gLFxuICByb3lhbGJsdWUgLFxuICBzYWRkbGVicm93biAsXG4gIHNhbG1vbiAsXG4gIHNhbmR5YnJvd24gLFxuICBzZWFncmVlbiAsXG4gIHNlYXNoZWxsICxcbiAgc2llbm5hICxcbiAgc2lsdmVyICxcbiAgc2t5Ymx1ZSAsXG4gIHNsYXRlYmx1ZSAsXG4gIHNsYXRlZ3JheSAsXG4gIHNsYXRlZ3JleSAsXG4gIHNub3cgLFxuICBzcHJpbmdncmVlbiAsXG4gIHN0ZWVsYmx1ZSAsXG4gIHRhbiAsXG4gIHRlYWwgLFxuICB0aGlzdGxlICxcbiAgdG9tYXRvICxcbiAgdHVycXVvaXNlICxcbiAgdmlvbGV0ICxcbiAgd2hlYXQgLFxuICB3aGl0ZSAsXG4gIHdoaXRlc21va2UgLFxuICB5ZWxsb3cgLFxuICB5ZWxsb3dncmVlbiAsXG4gIFxufVxuLyogQ3NzX0NvbG9ycyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBFbW90aW9uIGZyb20gXCJlbW90aW9uXCI7XG5pbXBvcnQgKiBhcyBDc3NfQ29yZSBmcm9tIFwiYnMtY3NzL3NyYy9Dc3NfQ29yZS5qc1wiO1xuXG52YXIgaW5jbHVkZSA9IENzc19Db3JlLk1ha2Uoe1xuICAgICAgbWVyZ2VTdHlsZXM6IEVtb3Rpb24uY3gsXG4gICAgICBpbmplY3RSdWxlOiBFbW90aW9uLmluamVjdEdsb2JhbCxcbiAgICAgIGluamVjdFJhdzogRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAgICBtYWtlOiBFbW90aW9uLmNzcyxcbiAgICAgIG1ha2VLZXlGcmFtZXM6IEVtb3Rpb24ua2V5ZnJhbWVzXG4gICAgfSk7XG5cbnZhciBpbnNlcnRSdWxlID0gaW5jbHVkZS5pbnNlcnRSdWxlO1xuXG5mdW5jdGlvbiBmb250RmFjZShmb250RmFtaWx5LCBzcmMsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgZm9udERpc3BsYXksIHBhcmFtKSB7XG4gIHZhciBhc1N0cmluZyA9IENzc19Db3JlLmZvbnRGYWNlKGZvbnRGYW1pbHksIHNyYywgZm9udFN0eWxlLCBmb250V2VpZ2h0LCBmb250RGlzcGxheSwgdW5kZWZpbmVkKTtcbiAgQ3VycnkuXzEoaW5zZXJ0UnVsZSwgYXNTdHJpbmcpO1xuICByZXR1cm4gZm9udEZhbWlseTtcbn1cblxudmFyIFR5cGVzID0gQ3NzX0NvcmUuVHlwZXM7XG5cbnZhciBNYWtlID0gQ3NzX0NvcmUuTWFrZTtcblxudmFyIHRvSnNvbiA9IENzc19Db3JlLnRvSnNvbjtcblxudmFyIGltcG9ydGFudCA9IENzc19Db3JlLmltcG9ydGFudDtcblxudmFyIGxhYmVsID0gQ3NzX0NvcmUubGFiZWw7XG5cbnZhciBTaGFkb3cgPSBDc3NfQ29yZS5TaGFkb3c7XG5cbnZhciB1bnNhZmUgPSBDc3NfQ29yZS51bnNhZmU7XG5cbnZhciBhbGlnbkNvbnRlbnQgPSBDc3NfQ29yZS5hbGlnbkNvbnRlbnQ7XG5cbnZhciBhbGlnbkl0ZW1zID0gQ3NzX0NvcmUuYWxpZ25JdGVtcztcblxudmFyIGFsaWduU2VsZiA9IENzc19Db3JlLmFsaWduU2VsZjtcblxudmFyIGFuaW1hdGlvbkRlbGF5ID0gQ3NzX0NvcmUuYW5pbWF0aW9uRGVsYXk7XG5cbnZhciBhbmltYXRpb25EaXJlY3Rpb24gPSBDc3NfQ29yZS5hbmltYXRpb25EaXJlY3Rpb247XG5cbnZhciBhbmltYXRpb25EdXJhdGlvbiA9IENzc19Db3JlLmFuaW1hdGlvbkR1cmF0aW9uO1xuXG52YXIgYW5pbWF0aW9uRmlsbE1vZGUgPSBDc3NfQ29yZS5hbmltYXRpb25GaWxsTW9kZTtcblxudmFyIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ID0gQ3NzX0NvcmUuYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ7XG5cbnZhciBhbmltYXRpb25QbGF5U3RhdGUgPSBDc3NfQ29yZS5hbmltYXRpb25QbGF5U3RhdGU7XG5cbnZhciBhbmltYXRpb25UaW1pbmdGdW5jdGlvbiA9IENzc19Db3JlLmFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uO1xuXG52YXIgYmFja2Ryb3BGaWx0ZXIgPSBDc3NfQ29yZS5iYWNrZHJvcEZpbHRlcjtcblxudmFyIGJhY2tmYWNlVmlzaWJpbGl0eSA9IENzc19Db3JlLmJhY2tmYWNlVmlzaWJpbGl0eTtcblxudmFyIGJhY2tncm91bmRBdHRhY2htZW50ID0gQ3NzX0NvcmUuYmFja2dyb3VuZEF0dGFjaG1lbnQ7XG5cbnZhciBiYWNrZ3JvdW5kQ29sb3IgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kQ29sb3I7XG5cbnZhciBiYWNrZ3JvdW5kQ2xpcCA9IENzc19Db3JlLmJhY2tncm91bmRDbGlwO1xuXG52YXIgYmFja2dyb3VuZEltYWdlID0gQ3NzX0NvcmUuYmFja2dyb3VuZEltYWdlO1xuXG52YXIgYmFja2dyb3VuZE9yaWdpbiA9IENzc19Db3JlLmJhY2tncm91bmRPcmlnaW47XG5cbnZhciBiYWNrZ3JvdW5kUG9zaXRpb24gPSBDc3NfQ29yZS5iYWNrZ3JvdW5kUG9zaXRpb247XG5cbnZhciBiYWNrZ3JvdW5kUG9zaXRpb25zID0gQ3NzX0NvcmUuYmFja2dyb3VuZFBvc2l0aW9ucztcblxudmFyIGJhY2tncm91bmRQb3NpdGlvbjQgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kUG9zaXRpb240O1xuXG52YXIgYmFja2dyb3VuZFJlcGVhdCA9IENzc19Db3JlLmJhY2tncm91bmRSZXBlYXQ7XG5cbnZhciBib3JkZXJCb3R0b20gPSBDc3NfQ29yZS5ib3JkZXJCb3R0b207XG5cbnZhciBib3JkZXJCb3R0b21Db2xvciA9IENzc19Db3JlLmJvcmRlckJvdHRvbUNvbG9yO1xuXG52YXIgYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IENzc19Db3JlLmJvcmRlckJvdHRvbUxlZnRSYWRpdXM7XG5cbnZhciBib3JkZXJCb3R0b21SaWdodFJhZGl1cyA9IENzc19Db3JlLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzO1xuXG52YXIgYm9yZGVyQm90dG9tU3R5bGUgPSBDc3NfQ29yZS5ib3JkZXJCb3R0b21TdHlsZTtcblxudmFyIGJvcmRlckJvdHRvbVdpZHRoID0gQ3NzX0NvcmUuYm9yZGVyQm90dG9tV2lkdGg7XG5cbnZhciBib3JkZXJDb2xsYXBzZSA9IENzc19Db3JlLmJvcmRlckNvbGxhcHNlO1xuXG52YXIgYm9yZGVyQ29sb3IgPSBDc3NfQ29yZS5ib3JkZXJDb2xvcjtcblxudmFyIGJvcmRlckxlZnQgPSBDc3NfQ29yZS5ib3JkZXJMZWZ0O1xuXG52YXIgYm9yZGVyTGVmdENvbG9yID0gQ3NzX0NvcmUuYm9yZGVyTGVmdENvbG9yO1xuXG52YXIgYm9yZGVyTGVmdFN0eWxlID0gQ3NzX0NvcmUuYm9yZGVyTGVmdFN0eWxlO1xuXG52YXIgYm9yZGVyTGVmdFdpZHRoID0gQ3NzX0NvcmUuYm9yZGVyTGVmdFdpZHRoO1xuXG52YXIgYm9yZGVyUmlnaHQgPSBDc3NfQ29yZS5ib3JkZXJSaWdodDtcblxudmFyIGJvcmRlclJpZ2h0Q29sb3IgPSBDc3NfQ29yZS5ib3JkZXJSaWdodENvbG9yO1xuXG52YXIgYm9yZGVyUmlnaHRTdHlsZSA9IENzc19Db3JlLmJvcmRlclJpZ2h0U3R5bGU7XG5cbnZhciBib3JkZXJSaWdodFdpZHRoID0gQ3NzX0NvcmUuYm9yZGVyUmlnaHRXaWR0aDtcblxudmFyIGJvcmRlclJhZGl1cyA9IENzc19Db3JlLmJvcmRlclJhZGl1cztcblxudmFyIGJvcmRlclNwYWNpbmcgPSBDc3NfQ29yZS5ib3JkZXJTcGFjaW5nO1xuXG52YXIgYm9yZGVyU3R5bGUgPSBDc3NfQ29yZS5ib3JkZXJTdHlsZTtcblxudmFyIGJvcmRlclRvcENvbG9yID0gQ3NzX0NvcmUuYm9yZGVyVG9wQ29sb3I7XG5cbnZhciBib3JkZXJUb3BMZWZ0UmFkaXVzID0gQ3NzX0NvcmUuYm9yZGVyVG9wTGVmdFJhZGl1cztcblxudmFyIGJvcmRlclRvcFJpZ2h0UmFkaXVzID0gQ3NzX0NvcmUuYm9yZGVyVG9wUmlnaHRSYWRpdXM7XG5cbnZhciBib3JkZXJUb3BTdHlsZSA9IENzc19Db3JlLmJvcmRlclRvcFN0eWxlO1xuXG52YXIgYm9yZGVyVG9wV2lkdGggPSBDc3NfQ29yZS5ib3JkZXJUb3BXaWR0aDtcblxudmFyIGJvcmRlcldpZHRoID0gQ3NzX0NvcmUuYm9yZGVyV2lkdGg7XG5cbnZhciBib3R0b20gPSBDc3NfQ29yZS5ib3R0b207XG5cbnZhciBib3hTaXppbmcgPSBDc3NfQ29yZS5ib3hTaXppbmc7XG5cbnZhciBib3hTaGFkb3cgPSBDc3NfQ29yZS5ib3hTaGFkb3c7XG5cbnZhciBib3hTaGFkb3dzID0gQ3NzX0NvcmUuYm94U2hhZG93cztcblxudmFyIGNsZWFyID0gQ3NzX0NvcmUuY2xlYXI7XG5cbnZhciBjbGlwUGF0aCA9IENzc19Db3JlLmNsaXBQYXRoO1xuXG52YXIgY29sb3IgPSBDc3NfQ29yZS5jb2xvcjtcblxudmFyIGNvbHVtbkNvdW50ID0gQ3NzX0NvcmUuY29sdW1uQ291bnQ7XG5cbnZhciBjb250ZW50UnVsZSA9IENzc19Db3JlLmNvbnRlbnRSdWxlO1xuXG52YXIgY29udGVudFJ1bGVzID0gQ3NzX0NvcmUuY29udGVudFJ1bGVzO1xuXG52YXIgY291bnRlckluY3JlbWVudCA9IENzc19Db3JlLmNvdW50ZXJJbmNyZW1lbnQ7XG5cbnZhciBjb3VudGVyc0luY3JlbWVudCA9IENzc19Db3JlLmNvdW50ZXJzSW5jcmVtZW50O1xuXG52YXIgY291bnRlclJlc2V0ID0gQ3NzX0NvcmUuY291bnRlclJlc2V0O1xuXG52YXIgY291bnRlcnNSZXNldCA9IENzc19Db3JlLmNvdW50ZXJzUmVzZXQ7XG5cbnZhciBjb3VudGVyU2V0ID0gQ3NzX0NvcmUuY291bnRlclNldDtcblxudmFyIGNvdW50ZXJzU2V0ID0gQ3NzX0NvcmUuY291bnRlcnNTZXQ7XG5cbnZhciBjdXJzb3IgPSBDc3NfQ29yZS5jdXJzb3I7XG5cbnZhciBkaXJlY3Rpb24gPSBDc3NfQ29yZS5kaXJlY3Rpb247XG5cbnZhciBkaXNwbGF5ID0gQ3NzX0NvcmUuZGlzcGxheTtcblxudmFyIGZsZXggPSBDc3NfQ29yZS5mbGV4O1xuXG52YXIgZmxleEJhc2lzID0gQ3NzX0NvcmUuZmxleEJhc2lzO1xuXG52YXIgZmxleERpcmVjdGlvbiA9IENzc19Db3JlLmZsZXhEaXJlY3Rpb247XG5cbnZhciBmbGV4R3JvdyA9IENzc19Db3JlLmZsZXhHcm93O1xuXG52YXIgZmxleFNocmluayA9IENzc19Db3JlLmZsZXhTaHJpbms7XG5cbnZhciBmbGV4V3JhcCA9IENzc19Db3JlLmZsZXhXcmFwO1xuXG52YXIgJCRmbG9hdCA9IENzc19Db3JlLiQkZmxvYXQ7XG5cbnZhciBmb250RmFtaWx5ID0gQ3NzX0NvcmUuZm9udEZhbWlseTtcblxudmFyIGZvbnRGYW1pbGllcyA9IENzc19Db3JlLmZvbnRGYW1pbGllcztcblxudmFyIGZvbnRTaXplID0gQ3NzX0NvcmUuZm9udFNpemU7XG5cbnZhciBmb250U3R5bGUgPSBDc3NfQ29yZS5mb250U3R5bGU7XG5cbnZhciBmb250VmFyaWFudCA9IENzc19Db3JlLmZvbnRWYXJpYW50O1xuXG52YXIgZm9udFdlaWdodCA9IENzc19Db3JlLmZvbnRXZWlnaHQ7XG5cbnZhciBncmlkQXJlYSA9IENzc19Db3JlLmdyaWRBcmVhO1xuXG52YXIgZ3JpZEFyZWEyID0gQ3NzX0NvcmUuZ3JpZEFyZWEyO1xuXG52YXIgZ3JpZEFyZWEzID0gQ3NzX0NvcmUuZ3JpZEFyZWEzO1xuXG52YXIgZ3JpZEFyZWE0ID0gQ3NzX0NvcmUuZ3JpZEFyZWE0O1xuXG52YXIgZ3JpZEF1dG9GbG93ID0gQ3NzX0NvcmUuZ3JpZEF1dG9GbG93O1xuXG52YXIgZ3JpZENvbHVtbiA9IENzc19Db3JlLmdyaWRDb2x1bW47XG5cbnZhciBncmlkQ29sdW1uRW5kID0gQ3NzX0NvcmUuZ3JpZENvbHVtbkVuZDtcblxudmFyIGdyaWRDb2x1bW5HYXAgPSBDc3NfQ29yZS5ncmlkQ29sdW1uR2FwO1xuXG52YXIgZ3JpZENvbHVtblN0YXJ0ID0gQ3NzX0NvcmUuZ3JpZENvbHVtblN0YXJ0O1xuXG52YXIgZ3JpZEdhcCA9IENzc19Db3JlLmdyaWRHYXA7XG5cbnZhciBncmlkUm93ID0gQ3NzX0NvcmUuZ3JpZFJvdztcblxudmFyIGdyaWRSb3dFbmQgPSBDc3NfQ29yZS5ncmlkUm93RW5kO1xuXG52YXIgZ3JpZFJvd0dhcCA9IENzc19Db3JlLmdyaWRSb3dHYXA7XG5cbnZhciBncmlkUm93U3RhcnQgPSBDc3NfQ29yZS5ncmlkUm93U3RhcnQ7XG5cbnZhciBncmlkVGVtcGxhdGVBcmVhcyA9IENzc19Db3JlLmdyaWRUZW1wbGF0ZUFyZWFzO1xuXG52YXIgaGVpZ2h0ID0gQ3NzX0NvcmUuaGVpZ2h0O1xuXG52YXIganVzdGlmeUNvbnRlbnQgPSBDc3NfQ29yZS5qdXN0aWZ5Q29udGVudDtcblxudmFyIGp1c3RpZnlTZWxmID0gQ3NzX0NvcmUuanVzdGlmeVNlbGY7XG5cbnZhciBsZWZ0ID0gQ3NzX0NvcmUubGVmdDtcblxudmFyIGxldHRlclNwYWNpbmcgPSBDc3NfQ29yZS5sZXR0ZXJTcGFjaW5nO1xuXG52YXIgbGluZUhlaWdodCA9IENzc19Db3JlLmxpbmVIZWlnaHQ7XG5cbnZhciBsaXN0U3R5bGUgPSBDc3NfQ29yZS5saXN0U3R5bGU7XG5cbnZhciBsaXN0U3R5bGVJbWFnZSA9IENzc19Db3JlLmxpc3RTdHlsZUltYWdlO1xuXG52YXIgbGlzdFN0eWxlVHlwZSA9IENzc19Db3JlLmxpc3RTdHlsZVR5cGU7XG5cbnZhciBsaXN0U3R5bGVQb3NpdGlvbiA9IENzc19Db3JlLmxpc3RTdHlsZVBvc2l0aW9uO1xuXG52YXIgbWFyZ2luID0gQ3NzX0NvcmUubWFyZ2luO1xuXG52YXIgbWFyZ2luMiA9IENzc19Db3JlLm1hcmdpbjI7XG5cbnZhciBtYXJnaW4zID0gQ3NzX0NvcmUubWFyZ2luMztcblxudmFyIG1hcmdpbjQgPSBDc3NfQ29yZS5tYXJnaW40O1xuXG52YXIgbWFyZ2luTGVmdCA9IENzc19Db3JlLm1hcmdpbkxlZnQ7XG5cbnZhciBtYXJnaW5SaWdodCA9IENzc19Db3JlLm1hcmdpblJpZ2h0O1xuXG52YXIgbWFyZ2luVG9wID0gQ3NzX0NvcmUubWFyZ2luVG9wO1xuXG52YXIgbWFyZ2luQm90dG9tID0gQ3NzX0NvcmUubWFyZ2luQm90dG9tO1xuXG52YXIgbWF4SGVpZ2h0ID0gQ3NzX0NvcmUubWF4SGVpZ2h0O1xuXG52YXIgbWF4V2lkdGggPSBDc3NfQ29yZS5tYXhXaWR0aDtcblxudmFyIG1pbkhlaWdodCA9IENzc19Db3JlLm1pbkhlaWdodDtcblxudmFyIG1pbldpZHRoID0gQ3NzX0NvcmUubWluV2lkdGg7XG5cbnZhciBvYmplY3RGaXQgPSBDc3NfQ29yZS5vYmplY3RGaXQ7XG5cbnZhciBvYmplY3RQb3NpdGlvbiA9IENzc19Db3JlLm9iamVjdFBvc2l0aW9uO1xuXG52YXIgb3BhY2l0eSA9IENzc19Db3JlLm9wYWNpdHk7XG5cbnZhciBvcmRlciA9IENzc19Db3JlLm9yZGVyO1xuXG52YXIgb3V0bGluZSA9IENzc19Db3JlLm91dGxpbmU7XG5cbnZhciBvdXRsaW5lQ29sb3IgPSBDc3NfQ29yZS5vdXRsaW5lQ29sb3I7XG5cbnZhciBvdXRsaW5lT2Zmc2V0ID0gQ3NzX0NvcmUub3V0bGluZU9mZnNldDtcblxudmFyIG91dGxpbmVTdHlsZSA9IENzc19Db3JlLm91dGxpbmVTdHlsZTtcblxudmFyIG91dGxpbmVXaWR0aCA9IENzc19Db3JlLm91dGxpbmVXaWR0aDtcblxudmFyIG92ZXJmbG93ID0gQ3NzX0NvcmUub3ZlcmZsb3c7XG5cbnZhciBvdmVyZmxvd1ggPSBDc3NfQ29yZS5vdmVyZmxvd1g7XG5cbnZhciBvdmVyZmxvd1kgPSBDc3NfQ29yZS5vdmVyZmxvd1k7XG5cbnZhciBvdmVyZmxvd1dyYXAgPSBDc3NfQ29yZS5vdmVyZmxvd1dyYXA7XG5cbnZhciBwYWRkaW5nID0gQ3NzX0NvcmUucGFkZGluZztcblxudmFyIHBhZGRpbmcyID0gQ3NzX0NvcmUucGFkZGluZzI7XG5cbnZhciBwYWRkaW5nMyA9IENzc19Db3JlLnBhZGRpbmczO1xuXG52YXIgcGFkZGluZzQgPSBDc3NfQ29yZS5wYWRkaW5nNDtcblxudmFyIHBhZGRpbmdMZWZ0ID0gQ3NzX0NvcmUucGFkZGluZ0xlZnQ7XG5cbnZhciBwYWRkaW5nUmlnaHQgPSBDc3NfQ29yZS5wYWRkaW5nUmlnaHQ7XG5cbnZhciBwYWRkaW5nVG9wID0gQ3NzX0NvcmUucGFkZGluZ1RvcDtcblxudmFyIHBhZGRpbmdCb3R0b20gPSBDc3NfQ29yZS5wYWRkaW5nQm90dG9tO1xuXG52YXIgcGVyc3BlY3RpdmUgPSBDc3NfQ29yZS5wZXJzcGVjdGl2ZTtcblxudmFyIHBlcnNwZWN0aXZlT3JpZ2luID0gQ3NzX0NvcmUucGVyc3BlY3RpdmVPcmlnaW47XG5cbnZhciBwb2ludGVyRXZlbnRzID0gQ3NzX0NvcmUucG9pbnRlckV2ZW50cztcblxudmFyIHBvc2l0aW9uID0gQ3NzX0NvcmUucG9zaXRpb247XG5cbnZhciByZXNpemUgPSBDc3NfQ29yZS5yZXNpemU7XG5cbnZhciByaWdodCA9IENzc19Db3JlLnJpZ2h0O1xuXG52YXIgdGFibGVMYXlvdXQgPSBDc3NfQ29yZS50YWJsZUxheW91dDtcblxudmFyIHRleHRBbGlnbiA9IENzc19Db3JlLnRleHRBbGlnbjtcblxudmFyIHRleHREZWNvcmF0aW9uQ29sb3IgPSBDc3NfQ29yZS50ZXh0RGVjb3JhdGlvbkNvbG9yO1xuXG52YXIgdGV4dERlY29yYXRpb25MaW5lID0gQ3NzX0NvcmUudGV4dERlY29yYXRpb25MaW5lO1xuXG52YXIgdGV4dERlY29yYXRpb25TdHlsZSA9IENzc19Db3JlLnRleHREZWNvcmF0aW9uU3R5bGU7XG5cbnZhciB0ZXh0SW5kZW50ID0gQ3NzX0NvcmUudGV4dEluZGVudDtcblxudmFyIHRleHRPdmVyZmxvdyA9IENzc19Db3JlLnRleHRPdmVyZmxvdztcblxudmFyIHRleHRTaGFkb3cgPSBDc3NfQ29yZS50ZXh0U2hhZG93O1xuXG52YXIgdGV4dFNoYWRvd3MgPSBDc3NfQ29yZS50ZXh0U2hhZG93cztcblxudmFyIHRleHRUcmFuc2Zvcm0gPSBDc3NfQ29yZS50ZXh0VHJhbnNmb3JtO1xuXG52YXIgdG9wID0gQ3NzX0NvcmUudG9wO1xuXG52YXIgdHJhbnNmb3JtID0gQ3NzX0NvcmUudHJhbnNmb3JtO1xuXG52YXIgdHJhbnNmb3JtcyA9IENzc19Db3JlLnRyYW5zZm9ybXM7XG5cbnZhciB0cmFuc2Zvcm1PcmlnaW4gPSBDc3NfQ29yZS50cmFuc2Zvcm1PcmlnaW47XG5cbnZhciB0cmFuc2Zvcm1PcmlnaW4zZCA9IENzc19Db3JlLnRyYW5zZm9ybU9yaWdpbjNkO1xuXG52YXIgdHJhbnNpdGlvbkRlbGF5ID0gQ3NzX0NvcmUudHJhbnNpdGlvbkRlbGF5O1xuXG52YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gQ3NzX0NvcmUudHJhbnNpdGlvbkR1cmF0aW9uO1xuXG52YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gQ3NzX0NvcmUudHJhbnNpdGlvblByb3BlcnR5O1xuXG52YXIgdHJhbnNmb3JtU3R5bGUgPSBDc3NfQ29yZS50cmFuc2Zvcm1TdHlsZTtcblxudmFyIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiA9IENzc19Db3JlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjtcblxudmFyIHVzZXJTZWxlY3QgPSBDc3NfQ29yZS51c2VyU2VsZWN0O1xuXG52YXIgdmVydGljYWxBbGlnbiA9IENzc19Db3JlLnZlcnRpY2FsQWxpZ247XG5cbnZhciB2aXNpYmlsaXR5ID0gQ3NzX0NvcmUudmlzaWJpbGl0eTtcblxudmFyIHdpZHRoID0gQ3NzX0NvcmUud2lkdGg7XG5cbnZhciB3aGl0ZVNwYWNlID0gQ3NzX0NvcmUud2hpdGVTcGFjZTtcblxudmFyIHdvcmRCcmVhayA9IENzc19Db3JlLndvcmRCcmVhaztcblxudmFyIHdvcmRTcGFjaW5nID0gQ3NzX0NvcmUud29yZFNwYWNpbmc7XG5cbnZhciB3b3JkV3JhcCA9IENzc19Db3JlLndvcmRXcmFwO1xuXG52YXIgekluZGV4ID0gQ3NzX0NvcmUuekluZGV4O1xuXG52YXIgc2VsZWN0b3IgPSBDc3NfQ29yZS5zZWxlY3RvcjtcblxudmFyIG1lZGlhID0gQ3NzX0NvcmUubWVkaWE7XG5cbnZhciBhY3RpdmUgPSBDc3NfQ29yZS5hY3RpdmU7XG5cbnZhciBjaGVja2VkID0gQ3NzX0NvcmUuY2hlY2tlZDtcblxudmFyICQkZGVmYXVsdCA9IENzc19Db3JlLiQkZGVmYXVsdDtcblxudmFyIGRlZmluZWQgPSBDc3NfQ29yZS5kZWZpbmVkO1xuXG52YXIgZGlzYWJsZWQgPSBDc3NfQ29yZS5kaXNhYmxlZDtcblxudmFyIGVtcHR5ID0gQ3NzX0NvcmUuZW1wdHk7XG5cbnZhciBlbmFibGVkID0gQ3NzX0NvcmUuZW5hYmxlZDtcblxudmFyIGZpcnN0ID0gQ3NzX0NvcmUuZmlyc3Q7XG5cbnZhciBmaXJzdENoaWxkID0gQ3NzX0NvcmUuZmlyc3RDaGlsZDtcblxudmFyIGZpcnN0T2ZUeXBlID0gQ3NzX0NvcmUuZmlyc3RPZlR5cGU7XG5cbnZhciBmb2N1cyA9IENzc19Db3JlLmZvY3VzO1xuXG52YXIgZm9jdXNXaXRoaW4gPSBDc3NfQ29yZS5mb2N1c1dpdGhpbjtcblxudmFyIGhvc3QgPSBDc3NfQ29yZS5ob3N0O1xuXG52YXIgaG92ZXIgPSBDc3NfQ29yZS5ob3ZlcjtcblxudmFyIGluZGV0ZXJtaW5hdGUgPSBDc3NfQ29yZS5pbmRldGVybWluYXRlO1xuXG52YXIgaW5SYW5nZSA9IENzc19Db3JlLmluUmFuZ2U7XG5cbnZhciBpbnZhbGlkID0gQ3NzX0NvcmUuaW52YWxpZDtcblxudmFyIGxhbmcgPSBDc3NfQ29yZS5sYW5nO1xuXG52YXIgbGFzdENoaWxkID0gQ3NzX0NvcmUubGFzdENoaWxkO1xuXG52YXIgbGFzdE9mVHlwZSA9IENzc19Db3JlLmxhc3RPZlR5cGU7XG5cbnZhciBsaW5rID0gQ3NzX0NvcmUubGluaztcblxudmFyIG5vdF9fID0gQ3NzX0NvcmUubm90X187XG5cbnZhciBOdGggPSBDc3NfQ29yZS5OdGg7XG5cbnZhciBudGhDaGlsZCA9IENzc19Db3JlLm50aENoaWxkO1xuXG52YXIgbnRoTGFzdENoaWxkID0gQ3NzX0NvcmUubnRoTGFzdENoaWxkO1xuXG52YXIgbnRoTGFzdE9mVHlwZSA9IENzc19Db3JlLm50aExhc3RPZlR5cGU7XG5cbnZhciBudGhPZlR5cGUgPSBDc3NfQ29yZS5udGhPZlR5cGU7XG5cbnZhciBvbmx5Q2hpbGQgPSBDc3NfQ29yZS5vbmx5Q2hpbGQ7XG5cbnZhciBvbmx5T2ZUeXBlID0gQ3NzX0NvcmUub25seU9mVHlwZTtcblxudmFyIG9wdGlvbmFsID0gQ3NzX0NvcmUub3B0aW9uYWw7XG5cbnZhciBvdXRPZlJhbmdlID0gQ3NzX0NvcmUub3V0T2ZSYW5nZTtcblxudmFyIHJlYWRPbmx5ID0gQ3NzX0NvcmUucmVhZE9ubHk7XG5cbnZhciByZWFkV3JpdGUgPSBDc3NfQ29yZS5yZWFkV3JpdGU7XG5cbnZhciByZXF1aXJlZCA9IENzc19Db3JlLnJlcXVpcmVkO1xuXG52YXIgcm9vdCA9IENzc19Db3JlLnJvb3Q7XG5cbnZhciBzY29wZSA9IENzc19Db3JlLnNjb3BlO1xuXG52YXIgdGFyZ2V0ID0gQ3NzX0NvcmUudGFyZ2V0O1xuXG52YXIgdmFsaWQgPSBDc3NfQ29yZS52YWxpZDtcblxudmFyIHZpc2l0ZWQgPSBDc3NfQ29yZS52aXNpdGVkO1xuXG52YXIgYWZ0ZXIgPSBDc3NfQ29yZS5hZnRlcjtcblxudmFyIGJlZm9yZSA9IENzc19Db3JlLmJlZm9yZTtcblxudmFyIGZpcnN0TGV0dGVyID0gQ3NzX0NvcmUuZmlyc3RMZXR0ZXI7XG5cbnZhciBmaXJzdExpbmUgPSBDc3NfQ29yZS5maXJzdExpbmU7XG5cbnZhciBwbGFjZWhvbGRlciA9IENzc19Db3JlLnBsYWNlaG9sZGVyO1xuXG52YXIgc2VsZWN0aW9uID0gQ3NzX0NvcmUuc2VsZWN0aW9uO1xuXG52YXIgY2hpbGQgPSBDc3NfQ29yZS5jaGlsZDtcblxudmFyIGNoaWxkcmVuID0gQ3NzX0NvcmUuY2hpbGRyZW47XG5cbnZhciBkaXJlY3RTaWJsaW5nID0gQ3NzX0NvcmUuZGlyZWN0U2libGluZztcblxudmFyIHNpYmxpbmdzID0gQ3NzX0NvcmUuc2libGluZ3M7XG5cbnZhciBhbnlMaW5rID0gQ3NzX0NvcmUuYW55TGluaztcblxudmFyIGluaXRpYWwgPSBDc3NfQ29yZS5pbml0aWFsO1xuXG52YXIgaW5oZXJpdF8gPSBDc3NfQ29yZS5pbmhlcml0XztcblxudmFyIHVuc2V0ID0gQ3NzX0NvcmUudW5zZXQ7XG5cbnZhciBhdXRvID0gQ3NzX0NvcmUuYXV0bztcblxudmFyIG5vbmUgPSBDc3NfQ29yZS5ub25lO1xuXG52YXIgdGV4dCA9IENzc19Db3JlLnRleHQ7XG5cbnZhciBwY3QgPSBDc3NfQ29yZS5wY3Q7XG5cbnZhciBjaCA9IENzc19Db3JlLmNoO1xuXG52YXIgY20gPSBDc3NfQ29yZS5jbTtcblxudmFyIGVtID0gQ3NzX0NvcmUuZW07XG5cbnZhciBleCA9IENzc19Db3JlLmV4O1xuXG52YXIgbW0gPSBDc3NfQ29yZS5tbTtcblxudmFyIHB0ID0gQ3NzX0NvcmUucHQ7XG5cbnZhciBweCA9IENzc19Db3JlLnB4O1xuXG52YXIgcHhGbG9hdCA9IENzc19Db3JlLnB4RmxvYXQ7XG5cbnZhciByZW0gPSBDc3NfQ29yZS5yZW07XG5cbnZhciB2aCA9IENzc19Db3JlLnZoO1xuXG52YXIgdm1pbiA9IENzc19Db3JlLnZtaW47XG5cbnZhciB2bWF4ID0gQ3NzX0NvcmUudm1heDtcblxudmFyIHplcm8gPSBDc3NfQ29yZS56ZXJvO1xuXG52YXIgZGVnID0gQ3NzX0NvcmUuZGVnO1xuXG52YXIgcmFkID0gQ3NzX0NvcmUucmFkO1xuXG52YXIgZ3JhZCA9IENzc19Db3JlLmdyYWQ7XG5cbnZhciB0dXJuID0gQ3NzX0NvcmUudHVybjtcblxudmFyIGx0ciA9IENzc19Db3JlLmx0cjtcblxudmFyIHJ0bCA9IENzc19Db3JlLnJ0bDtcblxudmFyIGFic29sdXRlID0gQ3NzX0NvcmUuYWJzb2x1dGU7XG5cbnZhciByZWxhdGl2ZSA9IENzc19Db3JlLnJlbGF0aXZlO1xuXG52YXIgJCRzdGF0aWMgPSBDc3NfQ29yZS4kJHN0YXRpYztcblxudmFyIGZpeGVkID0gQ3NzX0NvcmUuZml4ZWQ7XG5cbnZhciBzdGlja3kgPSBDc3NfQ29yZS5zdGlja3k7XG5cbnZhciBob3Jpem9udGFsID0gQ3NzX0NvcmUuaG9yaXpvbnRhbDtcblxudmFyIHZlcnRpY2FsID0gQ3NzX0NvcmUudmVydGljYWw7XG5cbnZhciBzbWFsbENhcHMgPSBDc3NfQ29yZS5zbWFsbENhcHM7XG5cbnZhciBpdGFsaWMgPSBDc3NfQ29yZS5pdGFsaWM7XG5cbnZhciBvYmxpcXVlID0gQ3NzX0NvcmUub2JsaXF1ZTtcblxudmFyIGhpZGRlbiA9IENzc19Db3JlLmhpZGRlbjtcblxudmFyIHZpc2libGUgPSBDc3NfQ29yZS52aXNpYmxlO1xuXG52YXIgc2Nyb2xsID0gQ3NzX0NvcmUuc2Nyb2xsO1xuXG52YXIgcmdiID0gQ3NzX0NvcmUucmdiO1xuXG52YXIgcmdiYSA9IENzc19Db3JlLnJnYmE7XG5cbnZhciBoc2wgPSBDc3NfQ29yZS5oc2w7XG5cbnZhciBoc2xhID0gQ3NzX0NvcmUuaHNsYTtcblxudmFyIGhleCA9IENzc19Db3JlLmhleDtcblxudmFyIHRyYW5zcGFyZW50ID0gQ3NzX0NvcmUudHJhbnNwYXJlbnQ7XG5cbnZhciBjdXJyZW50Q29sb3IgPSBDc3NfQ29yZS5jdXJyZW50Q29sb3I7XG5cbnZhciBsb2NhbCA9IENzc19Db3JlLmxvY2FsO1xuXG52YXIgcGFkZGluZ0JveCA9IENzc19Db3JlLnBhZGRpbmdCb3g7XG5cbnZhciBib3JkZXJCb3ggPSBDc3NfQ29yZS5ib3JkZXJCb3g7XG5cbnZhciBjb250ZW50Qm94ID0gQ3NzX0NvcmUuY29udGVudEJveDtcblxudmFyIG5vUmVwZWF0ID0gQ3NzX0NvcmUubm9SZXBlYXQ7XG5cbnZhciBzcGFjZSA9IENzc19Db3JlLnNwYWNlO1xuXG52YXIgcmVwZWF0ID0gQ3NzX0NvcmUucmVwZWF0O1xuXG52YXIgbWlubWF4ID0gQ3NzX0NvcmUubWlubWF4O1xuXG52YXIgcmVwZWF0WCA9IENzc19Db3JlLnJlcGVhdFg7XG5cbnZhciByZXBlYXRZID0gQ3NzX0NvcmUucmVwZWF0WTtcblxudmFyIGNvbnRhaW4gPSBDc3NfQ29yZS5jb250YWluO1xuXG52YXIgY292ZXIgPSBDc3NfQ29yZS5jb3ZlcjtcblxudmFyIHJvdyA9IENzc19Db3JlLnJvdztcblxudmFyIHJvd1JldmVyc2UgPSBDc3NfQ29yZS5yb3dSZXZlcnNlO1xuXG52YXIgY29sdW1uID0gQ3NzX0NvcmUuY29sdW1uO1xuXG52YXIgY29sdW1uUmV2ZXJzZSA9IENzc19Db3JlLmNvbHVtblJldmVyc2U7XG5cbnZhciB3cmFwID0gQ3NzX0NvcmUud3JhcDtcblxudmFyIG5vd3JhcCA9IENzc19Db3JlLm5vd3JhcDtcblxudmFyIHdyYXBSZXZlcnNlID0gQ3NzX0NvcmUud3JhcFJldmVyc2U7XG5cbnZhciBpbmxpbmUgPSBDc3NfQ29yZS5pbmxpbmU7XG5cbnZhciBibG9jayA9IENzc19Db3JlLmJsb2NrO1xuXG52YXIgY29udGVudHMgPSBDc3NfQ29yZS5jb250ZW50cztcblxudmFyIGZsZXhCb3ggPSBDc3NfQ29yZS5mbGV4Qm94O1xuXG52YXIgZ3JpZCA9IENzc19Db3JlLmdyaWQ7XG5cbnZhciBpbmxpbmVCbG9jayA9IENzc19Db3JlLmlubGluZUJsb2NrO1xuXG52YXIgaW5saW5lRmxleCA9IENzc19Db3JlLmlubGluZUZsZXg7XG5cbnZhciBpbmxpbmVHcmlkID0gQ3NzX0NvcmUuaW5saW5lR3JpZDtcblxudmFyIGlubGluZVRhYmxlID0gQ3NzX0NvcmUuaW5saW5lVGFibGU7XG5cbnZhciBsaXN0SXRlbSA9IENzc19Db3JlLmxpc3RJdGVtO1xuXG52YXIgcnVuSW4gPSBDc3NfQ29yZS5ydW5JbjtcblxudmFyIHRhYmxlID0gQ3NzX0NvcmUudGFibGU7XG5cbnZhciB0YWJsZUNhcHRpb24gPSBDc3NfQ29yZS50YWJsZUNhcHRpb247XG5cbnZhciB0YWJsZUNvbHVtbkdyb3VwID0gQ3NzX0NvcmUudGFibGVDb2x1bW5Hcm91cDtcblxudmFyIHRhYmxlSGVhZGVyR3JvdXAgPSBDc3NfQ29yZS50YWJsZUhlYWRlckdyb3VwO1xuXG52YXIgdGFibGVGb290ZXJHcm91cCA9IENzc19Db3JlLnRhYmxlRm9vdGVyR3JvdXA7XG5cbnZhciB0YWJsZVJvd0dyb3VwID0gQ3NzX0NvcmUudGFibGVSb3dHcm91cDtcblxudmFyIHRhYmxlQ2VsbCA9IENzc19Db3JlLnRhYmxlQ2VsbDtcblxudmFyIHRhYmxlQ29sdW1uID0gQ3NzX0NvcmUudGFibGVDb2x1bW47XG5cbnZhciB0YWJsZVJvdyA9IENzc19Db3JlLnRhYmxlUm93O1xuXG52YXIgZmxleFN0YXJ0ID0gQ3NzX0NvcmUuZmxleFN0YXJ0O1xuXG52YXIgZmxleEVuZCA9IENzc19Db3JlLmZsZXhFbmQ7XG5cbnZhciBjZW50ZXIgPSBDc3NfQ29yZS5jZW50ZXI7XG5cbnZhciBzdHJldGNoID0gQ3NzX0NvcmUuc3RyZXRjaDtcblxudmFyIHNwYWNlQmV0d2VlbiA9IENzc19Db3JlLnNwYWNlQmV0d2VlbjtcblxudmFyIHNwYWNlQXJvdW5kID0gQ3NzX0NvcmUuc3BhY2VBcm91bmQ7XG5cbnZhciBzcGFjZUV2ZW5seSA9IENzc19Db3JlLnNwYWNlRXZlbmx5O1xuXG52YXIgYmFzZWxpbmUgPSBDc3NfQ29yZS5iYXNlbGluZTtcblxudmFyIGZvcndhcmRzID0gQ3NzX0NvcmUuZm9yd2FyZHM7XG5cbnZhciBiYWNrd2FyZHMgPSBDc3NfQ29yZS5iYWNrd2FyZHM7XG5cbnZhciBib3RoID0gQ3NzX0NvcmUuYm90aDtcblxudmFyIGluZmluaXRlID0gQ3NzX0NvcmUuaW5maW5pdGU7XG5cbnZhciBjb3VudCA9IENzc19Db3JlLmNvdW50O1xuXG52YXIgcGF1c2VkID0gQ3NzX0NvcmUucGF1c2VkO1xuXG52YXIgcnVubmluZyA9IENzc19Db3JlLnJ1bm5pbmc7XG5cbnZhciBpbnNpZGUgPSBDc3NfQ29yZS5pbnNpZGU7XG5cbnZhciBvdXRzaWRlID0gQ3NzX0NvcmUub3V0c2lkZTtcblxudmFyIHNvbGlkID0gQ3NzX0NvcmUuc29saWQ7XG5cbnZhciBkb3R0ZWQgPSBDc3NfQ29yZS5kb3R0ZWQ7XG5cbnZhciBkYXNoZWQgPSBDc3NfQ29yZS5kYXNoZWQ7XG5cbnZhciB1bmRlcmxpbmUgPSBDc3NfQ29yZS51bmRlcmxpbmU7XG5cbnZhciBvdmVybGluZSA9IENzc19Db3JlLm92ZXJsaW5lO1xuXG52YXIgbGluZVRocm91Z2ggPSBDc3NfQ29yZS5saW5lVGhyb3VnaDtcblxudmFyIGNsaXAgPSBDc3NfQ29yZS5jbGlwO1xuXG52YXIgZWxsaXBzaXMgPSBDc3NfQ29yZS5lbGxpcHNpcztcblxudmFyIHdhdnkgPSBDc3NfQ29yZS53YXZ5O1xuXG52YXIgJCRkb3VibGUgPSBDc3NfQ29yZS4kJGRvdWJsZTtcblxudmFyIHVwcGVyY2FzZSA9IENzc19Db3JlLnVwcGVyY2FzZTtcblxudmFyIGxvd2VyY2FzZSA9IENzc19Db3JlLmxvd2VyY2FzZTtcblxudmFyIGNhcGl0YWxpemUgPSBDc3NfQ29yZS5jYXBpdGFsaXplO1xuXG52YXIgc3ViID0gQ3NzX0NvcmUuc3ViO1xuXG52YXIgJCRzdXBlciA9IENzc19Db3JlLiQkc3VwZXI7XG5cbnZhciB0ZXh0VG9wID0gQ3NzX0NvcmUudGV4dFRvcDtcblxudmFyIHRleHRCb3R0b20gPSBDc3NfQ29yZS50ZXh0Qm90dG9tO1xuXG52YXIgbWlkZGxlID0gQ3NzX0NvcmUubWlkZGxlO1xuXG52YXIgbm9ybWFsID0gQ3NzX0NvcmUubm9ybWFsO1xuXG52YXIgYnJlYWtBbGwgPSBDc3NfQ29yZS5icmVha0FsbDtcblxudmFyIGtlZXBBbGwgPSBDc3NfQ29yZS5rZWVwQWxsO1xuXG52YXIgYnJlYWtXb3JkID0gQ3NzX0NvcmUuYnJlYWtXb3JkO1xuXG52YXIgcmV2ZXJzZSA9IENzc19Db3JlLnJldmVyc2U7XG5cbnZhciBhbHRlcm5hdGUgPSBDc3NfQ29yZS5hbHRlcm5hdGU7XG5cbnZhciBhbHRlcm5hdGVSZXZlcnNlID0gQ3NzX0NvcmUuYWx0ZXJuYXRlUmV2ZXJzZTtcblxudmFyIGZpbGwgPSBDc3NfQ29yZS5maWxsO1xuXG52YXIgY29udGVudCA9IENzc19Db3JlLmNvbnRlbnQ7XG5cbnZhciBtYXhDb250ZW50ID0gQ3NzX0NvcmUubWF4Q29udGVudDtcblxudmFyIG1pbkNvbnRlbnQgPSBDc3NfQ29yZS5taW5Db250ZW50O1xuXG52YXIgZml0Q29udGVudCA9IENzc19Db3JlLmZpdENvbnRlbnQ7XG5cbnZhciBhbGwgPSBDc3NfQ29yZS5hbGw7XG5cbnZhciByb3VuZCA9IENzc19Db3JlLnJvdW5kO1xuXG52YXIgbWl0ZXIgPSBDc3NfQ29yZS5taXRlcjtcblxudmFyIGJldmVsID0gQ3NzX0NvcmUuYmV2ZWw7XG5cbnZhciBidXR0ID0gQ3NzX0NvcmUuYnV0dDtcblxudmFyIHNxdWFyZSA9IENzc19Db3JlLnNxdWFyZTtcblxudmFyIHRoaW4gPSBDc3NfQ29yZS50aGluO1xuXG52YXIgZXh0cmFMaWdodCA9IENzc19Db3JlLmV4dHJhTGlnaHQ7XG5cbnZhciBsaWdodCA9IENzc19Db3JlLmxpZ2h0O1xuXG52YXIgbWVkaXVtID0gQ3NzX0NvcmUubWVkaXVtO1xuXG52YXIgc2VtaUJvbGQgPSBDc3NfQ29yZS5zZW1pQm9sZDtcblxudmFyIGJvbGQgPSBDc3NfQ29yZS5ib2xkO1xuXG52YXIgZXh0cmFCb2xkID0gQ3NzX0NvcmUuZXh0cmFCb2xkO1xuXG52YXIgbGlnaHRlciA9IENzc19Db3JlLmxpZ2h0ZXI7XG5cbnZhciBib2xkZXIgPSBDc3NfQ29yZS5ib2xkZXI7XG5cbnZhciBmciA9IENzc19Db3JlLmZyO1xuXG52YXIgdncgPSBDc3NfQ29yZS52dztcblxudmFyIGxvY2FsVXJsID0gQ3NzX0NvcmUubG9jYWxVcmw7XG5cbnZhciB1cmwgPSBDc3NfQ29yZS51cmw7XG5cbnZhciBsaW5lYXIgPSBDc3NfQ29yZS5saW5lYXI7XG5cbnZhciBlYXNlID0gQ3NzX0NvcmUuZWFzZTtcblxudmFyIGVhc2VJbiA9IENzc19Db3JlLmVhc2VJbjtcblxudmFyIGVhc2VPdXQgPSBDc3NfQ29yZS5lYXNlT3V0O1xuXG52YXIgZWFzZUluT3V0ID0gQ3NzX0NvcmUuZWFzZUluT3V0O1xuXG52YXIgc3RlcFN0YXJ0ID0gQ3NzX0NvcmUuc3RlcFN0YXJ0O1xuXG52YXIgc3RlcEVuZCA9IENzc19Db3JlLnN0ZXBFbmQ7XG5cbnZhciBzdGVwcyA9IENzc19Db3JlLnN0ZXBzO1xuXG52YXIgY3ViaWNCZXppZXIgPSBDc3NfQ29yZS5jdWJpY0JlemllcjtcblxudmFyIG1hcmdpbkJveCA9IENzc19Db3JlLm1hcmdpbkJveDtcblxudmFyIGZpbGxCb3ggPSBDc3NfQ29yZS5maWxsQm94O1xuXG52YXIgc3Ryb2tlQm94ID0gQ3NzX0NvcmUuc3Ryb2tlQm94O1xuXG52YXIgdmlld0JveCA9IENzc19Db3JlLnZpZXdCb3g7XG5cbnZhciB0cmFuc2xhdGUgPSBDc3NfQ29yZS50cmFuc2xhdGU7XG5cbnZhciB0cmFuc2xhdGUzZCA9IENzc19Db3JlLnRyYW5zbGF0ZTNkO1xuXG52YXIgdHJhbnNsYXRlWCA9IENzc19Db3JlLnRyYW5zbGF0ZVg7XG5cbnZhciB0cmFuc2xhdGVZID0gQ3NzX0NvcmUudHJhbnNsYXRlWTtcblxudmFyIHRyYW5zbGF0ZVogPSBDc3NfQ29yZS50cmFuc2xhdGVaO1xuXG52YXIgc2NhbGUgPSBDc3NfQ29yZS5zY2FsZTtcblxudmFyIHNjYWxlM2QgPSBDc3NfQ29yZS5zY2FsZTNkO1xuXG52YXIgc2NhbGVYID0gQ3NzX0NvcmUuc2NhbGVYO1xuXG52YXIgc2NhbGVZID0gQ3NzX0NvcmUuc2NhbGVZO1xuXG52YXIgc2NhbGVaID0gQ3NzX0NvcmUuc2NhbGVaO1xuXG52YXIgcm90YXRlID0gQ3NzX0NvcmUucm90YXRlO1xuXG52YXIgcm90YXRlM2QgPSBDc3NfQ29yZS5yb3RhdGUzZDtcblxudmFyIHJvdGF0ZVggPSBDc3NfQ29yZS5yb3RhdGVYO1xuXG52YXIgcm90YXRlWSA9IENzc19Db3JlLnJvdGF0ZVk7XG5cbnZhciByb3RhdGVaID0gQ3NzX0NvcmUucm90YXRlWjtcblxudmFyIHNrZXcgPSBDc3NfQ29yZS5za2V3O1xuXG52YXIgc2tld1ggPSBDc3NfQ29yZS5za2V3WDtcblxudmFyIHNrZXdZID0gQ3NzX0NvcmUuc2tld1k7XG5cbnZhciBsaW5lYXJHcmFkaWVudCA9IENzc19Db3JlLmxpbmVhckdyYWRpZW50O1xuXG52YXIgcmVwZWF0aW5nTGluZWFyR3JhZGllbnQgPSBDc3NfQ29yZS5yZXBlYXRpbmdMaW5lYXJHcmFkaWVudDtcblxudmFyIHJhZGlhbEdyYWRpZW50ID0gQ3NzX0NvcmUucmFkaWFsR3JhZGllbnQ7XG5cbnZhciByZXBlYXRpbmdSYWRpYWxHcmFkaWVudCA9IENzc19Db3JlLnJlcGVhdGluZ1JhZGlhbEdyYWRpZW50O1xuXG52YXIgYXJlYXMgPSBDc3NfQ29yZS5hcmVhcztcblxudmFyIGlkZW50ID0gQ3NzX0NvcmUuaWRlbnQ7XG5cbnZhciBudW1JZGVudCA9IENzc19Db3JlLm51bUlkZW50O1xuXG52YXIgY29udGV4dE1lbnUgPSBDc3NfQ29yZS5jb250ZXh0TWVudTtcblxudmFyIGhlbHAgPSBDc3NfQ29yZS5oZWxwO1xuXG52YXIgcG9pbnRlciA9IENzc19Db3JlLnBvaW50ZXI7XG5cbnZhciBwcm9ncmVzcyA9IENzc19Db3JlLnByb2dyZXNzO1xuXG52YXIgd2FpdCA9IENzc19Db3JlLndhaXQ7XG5cbnZhciBjZWxsID0gQ3NzX0NvcmUuY2VsbDtcblxudmFyIGNyb3NzaGFpciA9IENzc19Db3JlLmNyb3NzaGFpcjtcblxudmFyIHZlcnRpY2FsVGV4dCA9IENzc19Db3JlLnZlcnRpY2FsVGV4dDtcblxudmFyIGFsaWFzID0gQ3NzX0NvcmUuYWxpYXM7XG5cbnZhciBjb3B5ID0gQ3NzX0NvcmUuY29weTtcblxudmFyIG1vdmUgPSBDc3NfQ29yZS5tb3ZlO1xuXG52YXIgbm9Ecm9wID0gQ3NzX0NvcmUubm9Ecm9wO1xuXG52YXIgbm90QWxsb3dlZCA9IENzc19Db3JlLm5vdEFsbG93ZWQ7XG5cbnZhciBncmFiID0gQ3NzX0NvcmUuZ3JhYjtcblxudmFyIGdyYWJiaW5nID0gQ3NzX0NvcmUuZ3JhYmJpbmc7XG5cbnZhciBhbGxTY3JvbGwgPSBDc3NfQ29yZS5hbGxTY3JvbGw7XG5cbnZhciBjb2xSZXNpemUgPSBDc3NfQ29yZS5jb2xSZXNpemU7XG5cbnZhciByb3dSZXNpemUgPSBDc3NfQ29yZS5yb3dSZXNpemU7XG5cbnZhciBuUmVzaXplID0gQ3NzX0NvcmUublJlc2l6ZTtcblxudmFyIGVSZXNpemUgPSBDc3NfQ29yZS5lUmVzaXplO1xuXG52YXIgc1Jlc2l6ZSA9IENzc19Db3JlLnNSZXNpemU7XG5cbnZhciB3UmVzaXplID0gQ3NzX0NvcmUud1Jlc2l6ZTtcblxudmFyIG5lUmVzaXplID0gQ3NzX0NvcmUubmVSZXNpemU7XG5cbnZhciBud1Jlc2l6ZSA9IENzc19Db3JlLm53UmVzaXplO1xuXG52YXIgc2VSZXNpemUgPSBDc3NfQ29yZS5zZVJlc2l6ZTtcblxudmFyIHN3UmVzaXplID0gQ3NzX0NvcmUuc3dSZXNpemU7XG5cbnZhciBld1Jlc2l6ZSA9IENzc19Db3JlLmV3UmVzaXplO1xuXG52YXIgbnNSZXNpemUgPSBDc3NfQ29yZS5uc1Jlc2l6ZTtcblxudmFyIG5lc3dSZXNpemUgPSBDc3NfQ29yZS5uZXN3UmVzaXplO1xuXG52YXIgbndzZVJlc2l6ZSA9IENzc19Db3JlLm53c2VSZXNpemU7XG5cbnZhciB6b29tSW4gPSBDc3NfQ29yZS56b29tSW47XG5cbnZhciB6b29tT3V0ID0gQ3NzX0NvcmUuem9vbU91dDtcblxudmFyIGZsZXgzID0gQ3NzX0NvcmUuZmxleDM7XG5cbnZhciBib3JkZXIgPSBDc3NfQ29yZS5ib3JkZXI7XG5cbnZhciBib3JkZXJUb3AgPSBDc3NfQ29yZS5ib3JkZXJUb3A7XG5cbnZhciBiYWNrZ3JvdW5kU2l6ZSA9IENzc19Db3JlLmJhY2tncm91bmRTaXplO1xuXG52YXIgdGV4dERlY29yYXRpb24gPSBDc3NfQ29yZS50ZXh0RGVjb3JhdGlvbjtcblxudmFyIGJhY2tncm91bmQgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kO1xuXG52YXIgYmFja2dyb3VuZHMgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kcztcblxudmFyIGdyaWRBdXRvQ29sdW1ucyA9IENzc19Db3JlLmdyaWRBdXRvQ29sdW1ucztcblxudmFyIGdyaWRBdXRvUm93cyA9IENzc19Db3JlLmdyaWRBdXRvUm93cztcblxudmFyIGdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBDc3NfQ29yZS5ncmlkVGVtcGxhdGVDb2x1bW5zO1xuXG52YXIgZ3JpZFRlbXBsYXRlUm93cyA9IENzc19Db3JlLmdyaWRUZW1wbGF0ZVJvd3M7XG5cbnZhciBDYWxjID0gQ3NzX0NvcmUuQ2FsYztcblxudmFyIHNpemUgPSBDc3NfQ29yZS5zaXplO1xuXG52YXIgZmlsdGVyID0gQ3NzX0NvcmUuZmlsdGVyO1xuXG52YXIgVHJhbnNpdGlvbiA9IENzc19Db3JlLlRyYW5zaXRpb247XG5cbnZhciB0cmFuc2l0aW9uVmFsdWUgPSBDc3NfQ29yZS50cmFuc2l0aW9uVmFsdWU7XG5cbnZhciB0cmFuc2l0aW9uTGlzdCA9IENzc19Db3JlLnRyYW5zaXRpb25MaXN0O1xuXG52YXIgdHJhbnNpdGlvbiA9IENzc19Db3JlLnRyYW5zaXRpb247XG5cbnZhciB0cmFuc2l0aW9ucyA9IENzc19Db3JlLnRyYW5zaXRpb25zO1xuXG52YXIgQW5pbWF0aW9uID0gQ3NzX0NvcmUuQW5pbWF0aW9uO1xuXG52YXIgYW5pbWF0aW9uVmFsdWUgPSBDc3NfQ29yZS5hbmltYXRpb25WYWx1ZTtcblxudmFyIGFuaW1hdGlvbiA9IENzc19Db3JlLmFuaW1hdGlvbjtcblxudmFyIGFuaW1hdGlvbnMgPSBDc3NfQ29yZS5hbmltYXRpb25zO1xuXG52YXIgYW5pbWF0aW9uTmFtZSA9IENzc19Db3JlLmFuaW1hdGlvbk5hbWU7XG5cbnZhciBTVkcgPSBDc3NfQ29yZS5TVkc7XG5cbnZhciBhbGljZWJsdWUgPSBDc3NfQ29yZS5hbGljZWJsdWU7XG5cbnZhciBhbnRpcXVld2hpdGUgPSBDc3NfQ29yZS5hbnRpcXVld2hpdGU7XG5cbnZhciBhcXVhID0gQ3NzX0NvcmUuYXF1YTtcblxudmFyIGFxdWFtYXJpbmUgPSBDc3NfQ29yZS5hcXVhbWFyaW5lO1xuXG52YXIgYXp1cmUgPSBDc3NfQ29yZS5henVyZTtcblxudmFyIGJlaWdlID0gQ3NzX0NvcmUuYmVpZ2U7XG5cbnZhciBiaXNxdWUgPSBDc3NfQ29yZS5iaXNxdWU7XG5cbnZhciBibGFjayA9IENzc19Db3JlLmJsYWNrO1xuXG52YXIgYmxhbmNoZWRhbG1vbmQgPSBDc3NfQ29yZS5ibGFuY2hlZGFsbW9uZDtcblxudmFyIGJsdWUgPSBDc3NfQ29yZS5ibHVlO1xuXG52YXIgYmx1ZXZpb2xldCA9IENzc19Db3JlLmJsdWV2aW9sZXQ7XG5cbnZhciBicm93biA9IENzc19Db3JlLmJyb3duO1xuXG52YXIgYnVybHl3b29kID0gQ3NzX0NvcmUuYnVybHl3b29kO1xuXG52YXIgY2FkZXRibHVlID0gQ3NzX0NvcmUuY2FkZXRibHVlO1xuXG52YXIgY2hhcnRyZXVzZSA9IENzc19Db3JlLmNoYXJ0cmV1c2U7XG5cbnZhciBjaG9jb2xhdGUgPSBDc3NfQ29yZS5jaG9jb2xhdGU7XG5cbnZhciBjb3JhbCA9IENzc19Db3JlLmNvcmFsO1xuXG52YXIgY29ybmZsb3dlcmJsdWUgPSBDc3NfQ29yZS5jb3JuZmxvd2VyYmx1ZTtcblxudmFyIGNvcm5zaWxrID0gQ3NzX0NvcmUuY29ybnNpbGs7XG5cbnZhciBjcmltc29uID0gQ3NzX0NvcmUuY3JpbXNvbjtcblxudmFyIGN5YW4gPSBDc3NfQ29yZS5jeWFuO1xuXG52YXIgZGFya2JsdWUgPSBDc3NfQ29yZS5kYXJrYmx1ZTtcblxudmFyIGRhcmtjeWFuID0gQ3NzX0NvcmUuZGFya2N5YW47XG5cbnZhciBkYXJrZ29sZGVucm9kID0gQ3NzX0NvcmUuZGFya2dvbGRlbnJvZDtcblxudmFyIGRhcmtncmF5ID0gQ3NzX0NvcmUuZGFya2dyYXk7XG5cbnZhciBkYXJrZ3JleSA9IENzc19Db3JlLmRhcmtncmV5O1xuXG52YXIgZGFya2dyZWVuID0gQ3NzX0NvcmUuZGFya2dyZWVuO1xuXG52YXIgZGFya2toYWtpID0gQ3NzX0NvcmUuZGFya2toYWtpO1xuXG52YXIgZGFya21hZ2VudGEgPSBDc3NfQ29yZS5kYXJrbWFnZW50YTtcblxudmFyIGRhcmtvbGl2ZWdyZWVuID0gQ3NzX0NvcmUuZGFya29saXZlZ3JlZW47XG5cbnZhciBkYXJrb3JhbmdlID0gQ3NzX0NvcmUuZGFya29yYW5nZTtcblxudmFyIGRhcmtvcmNoaWQgPSBDc3NfQ29yZS5kYXJrb3JjaGlkO1xuXG52YXIgZGFya3JlZCA9IENzc19Db3JlLmRhcmtyZWQ7XG5cbnZhciBkYXJrc2FsbW9uID0gQ3NzX0NvcmUuZGFya3NhbG1vbjtcblxudmFyIGRhcmtzZWFncmVlbiA9IENzc19Db3JlLmRhcmtzZWFncmVlbjtcblxudmFyIGRhcmtzbGF0ZWJsdWUgPSBDc3NfQ29yZS5kYXJrc2xhdGVibHVlO1xuXG52YXIgZGFya3NsYXRlZ3JheSA9IENzc19Db3JlLmRhcmtzbGF0ZWdyYXk7XG5cbnZhciBkYXJrc2xhdGVncmV5ID0gQ3NzX0NvcmUuZGFya3NsYXRlZ3JleTtcblxudmFyIGRhcmt0dXJxdW9pc2UgPSBDc3NfQ29yZS5kYXJrdHVycXVvaXNlO1xuXG52YXIgZGFya3Zpb2xldCA9IENzc19Db3JlLmRhcmt2aW9sZXQ7XG5cbnZhciBkZWVwcGluayA9IENzc19Db3JlLmRlZXBwaW5rO1xuXG52YXIgZGVlcHNreWJsdWUgPSBDc3NfQ29yZS5kZWVwc2t5Ymx1ZTtcblxudmFyIGRpbWdyYXkgPSBDc3NfQ29yZS5kaW1ncmF5O1xuXG52YXIgZGltZ3JleSA9IENzc19Db3JlLmRpbWdyZXk7XG5cbnZhciBkb2RnZXJibHVlID0gQ3NzX0NvcmUuZG9kZ2VyYmx1ZTtcblxudmFyIGZpcmVicmljayA9IENzc19Db3JlLmZpcmVicmljaztcblxudmFyIGZsb3JhbHdoaXRlID0gQ3NzX0NvcmUuZmxvcmFsd2hpdGU7XG5cbnZhciBmb3Jlc3RncmVlbiA9IENzc19Db3JlLmZvcmVzdGdyZWVuO1xuXG52YXIgZnVjaHNpYSA9IENzc19Db3JlLmZ1Y2hzaWE7XG5cbnZhciBnYWluc2Jvcm8gPSBDc3NfQ29yZS5nYWluc2Jvcm87XG5cbnZhciBnaG9zdHdoaXRlID0gQ3NzX0NvcmUuZ2hvc3R3aGl0ZTtcblxudmFyIGdvbGQgPSBDc3NfQ29yZS5nb2xkO1xuXG52YXIgZ29sZGVucm9kID0gQ3NzX0NvcmUuZ29sZGVucm9kO1xuXG52YXIgZ3JheSA9IENzc19Db3JlLmdyYXk7XG5cbnZhciBncmV5ID0gQ3NzX0NvcmUuZ3JleTtcblxudmFyIGdyZWVuID0gQ3NzX0NvcmUuZ3JlZW47XG5cbnZhciBncmVlbnllbGxvdyA9IENzc19Db3JlLmdyZWVueWVsbG93O1xuXG52YXIgaG9uZXlkZXcgPSBDc3NfQ29yZS5ob25leWRldztcblxudmFyIGhvdHBpbmsgPSBDc3NfQ29yZS5ob3RwaW5rO1xuXG52YXIgaW5kaWFucmVkID0gQ3NzX0NvcmUuaW5kaWFucmVkO1xuXG52YXIgaW5kaWdvID0gQ3NzX0NvcmUuaW5kaWdvO1xuXG52YXIgaXZvcnkgPSBDc3NfQ29yZS5pdm9yeTtcblxudmFyIGtoYWtpID0gQ3NzX0NvcmUua2hha2k7XG5cbnZhciBsYXZlbmRlciA9IENzc19Db3JlLmxhdmVuZGVyO1xuXG52YXIgbGF2ZW5kZXJibHVzaCA9IENzc19Db3JlLmxhdmVuZGVyYmx1c2g7XG5cbnZhciBsYXduZ3JlZW4gPSBDc3NfQ29yZS5sYXduZ3JlZW47XG5cbnZhciBsZW1vbmNoaWZmb24gPSBDc3NfQ29yZS5sZW1vbmNoaWZmb247XG5cbnZhciBsaWdodGJsdWUgPSBDc3NfQ29yZS5saWdodGJsdWU7XG5cbnZhciBsaWdodGNvcmFsID0gQ3NzX0NvcmUubGlnaHRjb3JhbDtcblxudmFyIGxpZ2h0Y3lhbiA9IENzc19Db3JlLmxpZ2h0Y3lhbjtcblxudmFyIGxpZ2h0Z29sZGVucm9keWVsbG93ID0gQ3NzX0NvcmUubGlnaHRnb2xkZW5yb2R5ZWxsb3c7XG5cbnZhciBsaWdodGdyYXkgPSBDc3NfQ29yZS5saWdodGdyYXk7XG5cbnZhciBsaWdodGdyZXkgPSBDc3NfQ29yZS5saWdodGdyZXk7XG5cbnZhciBsaWdodGdyZWVuID0gQ3NzX0NvcmUubGlnaHRncmVlbjtcblxudmFyIGxpZ2h0cGluayA9IENzc19Db3JlLmxpZ2h0cGluaztcblxudmFyIGxpZ2h0c2FsbW9uID0gQ3NzX0NvcmUubGlnaHRzYWxtb247XG5cbnZhciBsaWdodHNlYWdyZWVuID0gQ3NzX0NvcmUubGlnaHRzZWFncmVlbjtcblxudmFyIGxpZ2h0c2t5Ymx1ZSA9IENzc19Db3JlLmxpZ2h0c2t5Ymx1ZTtcblxudmFyIGxpZ2h0c2xhdGVncmF5ID0gQ3NzX0NvcmUubGlnaHRzbGF0ZWdyYXk7XG5cbnZhciBsaWdodHNsYXRlZ3JleSA9IENzc19Db3JlLmxpZ2h0c2xhdGVncmV5O1xuXG52YXIgbGlnaHRzdGVlbGJsdWUgPSBDc3NfQ29yZS5saWdodHN0ZWVsYmx1ZTtcblxudmFyIGxpZ2h0eWVsbG93ID0gQ3NzX0NvcmUubGlnaHR5ZWxsb3c7XG5cbnZhciBsaW1lID0gQ3NzX0NvcmUubGltZTtcblxudmFyIGxpbWVncmVlbiA9IENzc19Db3JlLmxpbWVncmVlbjtcblxudmFyIGxpbmVuID0gQ3NzX0NvcmUubGluZW47XG5cbnZhciBtYWdlbnRhID0gQ3NzX0NvcmUubWFnZW50YTtcblxudmFyIG1hcm9vbiA9IENzc19Db3JlLm1hcm9vbjtcblxudmFyIG1lZGl1bWFxdWFtYXJpbmUgPSBDc3NfQ29yZS5tZWRpdW1hcXVhbWFyaW5lO1xuXG52YXIgbWVkaXVtYmx1ZSA9IENzc19Db3JlLm1lZGl1bWJsdWU7XG5cbnZhciBtZWRpdW1vcmNoaWQgPSBDc3NfQ29yZS5tZWRpdW1vcmNoaWQ7XG5cbnZhciBtZWRpdW1wdXJwbGUgPSBDc3NfQ29yZS5tZWRpdW1wdXJwbGU7XG5cbnZhciBtZWRpdW1zZWFncmVlbiA9IENzc19Db3JlLm1lZGl1bXNlYWdyZWVuO1xuXG52YXIgbWVkaXVtc2xhdGVibHVlID0gQ3NzX0NvcmUubWVkaXVtc2xhdGVibHVlO1xuXG52YXIgbWVkaXVtc3ByaW5nZ3JlZW4gPSBDc3NfQ29yZS5tZWRpdW1zcHJpbmdncmVlbjtcblxudmFyIG1lZGl1bXR1cnF1b2lzZSA9IENzc19Db3JlLm1lZGl1bXR1cnF1b2lzZTtcblxudmFyIG1lZGl1bXZpb2xldHJlZCA9IENzc19Db3JlLm1lZGl1bXZpb2xldHJlZDtcblxudmFyIG1pZG5pZ2h0Ymx1ZSA9IENzc19Db3JlLm1pZG5pZ2h0Ymx1ZTtcblxudmFyIG1pbnRjcmVhbSA9IENzc19Db3JlLm1pbnRjcmVhbTtcblxudmFyIG1pc3R5cm9zZSA9IENzc19Db3JlLm1pc3R5cm9zZTtcblxudmFyIG1vY2Nhc2luID0gQ3NzX0NvcmUubW9jY2FzaW47XG5cbnZhciBuYXZham93aGl0ZSA9IENzc19Db3JlLm5hdmFqb3doaXRlO1xuXG52YXIgbmF2eSA9IENzc19Db3JlLm5hdnk7XG5cbnZhciBvbGRsYWNlID0gQ3NzX0NvcmUub2xkbGFjZTtcblxudmFyIG9saXZlID0gQ3NzX0NvcmUub2xpdmU7XG5cbnZhciBvbGl2ZWRyYWIgPSBDc3NfQ29yZS5vbGl2ZWRyYWI7XG5cbnZhciBvcmFuZ2UgPSBDc3NfQ29yZS5vcmFuZ2U7XG5cbnZhciBvcmFuZ2VyZWQgPSBDc3NfQ29yZS5vcmFuZ2VyZWQ7XG5cbnZhciBvcmNoaWQgPSBDc3NfQ29yZS5vcmNoaWQ7XG5cbnZhciBwYWxlZ29sZGVucm9kID0gQ3NzX0NvcmUucGFsZWdvbGRlbnJvZDtcblxudmFyIHBhbGVncmVlbiA9IENzc19Db3JlLnBhbGVncmVlbjtcblxudmFyIHBhbGV0dXJxdW9pc2UgPSBDc3NfQ29yZS5wYWxldHVycXVvaXNlO1xuXG52YXIgcGFsZXZpb2xldHJlZCA9IENzc19Db3JlLnBhbGV2aW9sZXRyZWQ7XG5cbnZhciBwYXBheWF3aGlwID0gQ3NzX0NvcmUucGFwYXlhd2hpcDtcblxudmFyIHBlYWNocHVmZiA9IENzc19Db3JlLnBlYWNocHVmZjtcblxudmFyIHBlcnUgPSBDc3NfQ29yZS5wZXJ1O1xuXG52YXIgcGluayA9IENzc19Db3JlLnBpbms7XG5cbnZhciBwbHVtID0gQ3NzX0NvcmUucGx1bTtcblxudmFyIHBvd2RlcmJsdWUgPSBDc3NfQ29yZS5wb3dkZXJibHVlO1xuXG52YXIgcHVycGxlID0gQ3NzX0NvcmUucHVycGxlO1xuXG52YXIgcmViZWNjYXB1cnBsZSA9IENzc19Db3JlLnJlYmVjY2FwdXJwbGU7XG5cbnZhciByZWQgPSBDc3NfQ29yZS5yZWQ7XG5cbnZhciByb3N5YnJvd24gPSBDc3NfQ29yZS5yb3N5YnJvd247XG5cbnZhciByb3lhbGJsdWUgPSBDc3NfQ29yZS5yb3lhbGJsdWU7XG5cbnZhciBzYWRkbGVicm93biA9IENzc19Db3JlLnNhZGRsZWJyb3duO1xuXG52YXIgc2FsbW9uID0gQ3NzX0NvcmUuc2FsbW9uO1xuXG52YXIgc2FuZHlicm93biA9IENzc19Db3JlLnNhbmR5YnJvd247XG5cbnZhciBzZWFncmVlbiA9IENzc19Db3JlLnNlYWdyZWVuO1xuXG52YXIgc2Vhc2hlbGwgPSBDc3NfQ29yZS5zZWFzaGVsbDtcblxudmFyIHNpZW5uYSA9IENzc19Db3JlLnNpZW5uYTtcblxudmFyIHNpbHZlciA9IENzc19Db3JlLnNpbHZlcjtcblxudmFyIHNreWJsdWUgPSBDc3NfQ29yZS5za3libHVlO1xuXG52YXIgc2xhdGVibHVlID0gQ3NzX0NvcmUuc2xhdGVibHVlO1xuXG52YXIgc2xhdGVncmF5ID0gQ3NzX0NvcmUuc2xhdGVncmF5O1xuXG52YXIgc2xhdGVncmV5ID0gQ3NzX0NvcmUuc2xhdGVncmV5O1xuXG52YXIgc25vdyA9IENzc19Db3JlLnNub3c7XG5cbnZhciBzcHJpbmdncmVlbiA9IENzc19Db3JlLnNwcmluZ2dyZWVuO1xuXG52YXIgc3RlZWxibHVlID0gQ3NzX0NvcmUuc3RlZWxibHVlO1xuXG52YXIgdGFuID0gQ3NzX0NvcmUudGFuO1xuXG52YXIgdGVhbCA9IENzc19Db3JlLnRlYWw7XG5cbnZhciB0aGlzdGxlID0gQ3NzX0NvcmUudGhpc3RsZTtcblxudmFyIHRvbWF0byA9IENzc19Db3JlLnRvbWF0bztcblxudmFyIHR1cnF1b2lzZSA9IENzc19Db3JlLnR1cnF1b2lzZTtcblxudmFyIHZpb2xldCA9IENzc19Db3JlLnZpb2xldDtcblxudmFyIHdoZWF0ID0gQ3NzX0NvcmUud2hlYXQ7XG5cbnZhciB3aGl0ZSA9IENzc19Db3JlLndoaXRlO1xuXG52YXIgd2hpdGVzbW9rZSA9IENzc19Db3JlLndoaXRlc21va2U7XG5cbnZhciB5ZWxsb3cgPSBDc3NfQ29yZS55ZWxsb3c7XG5cbnZhciB5ZWxsb3dncmVlbiA9IENzc19Db3JlLnllbGxvd2dyZWVuO1xuXG52YXIgJCRnbG9iYWwgPSBpbmNsdWRlLiQkZ2xvYmFsO1xuXG52YXIgbWVyZ2UgPSBpbmNsdWRlLm1lcmdlO1xuXG52YXIgc3R5bGUgPSBpbmNsdWRlLnN0eWxlO1xuXG52YXIga2V5ZnJhbWVzID0gaW5jbHVkZS5rZXlmcmFtZXM7XG5cbmV4cG9ydCB7XG4gIFR5cGVzICxcbiAgTWFrZSAsXG4gIHRvSnNvbiAsXG4gIGltcG9ydGFudCAsXG4gIGxhYmVsICxcbiAgU2hhZG93ICxcbiAgdW5zYWZlICxcbiAgYWxpZ25Db250ZW50ICxcbiAgYWxpZ25JdGVtcyAsXG4gIGFsaWduU2VsZiAsXG4gIGFuaW1hdGlvbkRlbGF5ICxcbiAgYW5pbWF0aW9uRGlyZWN0aW9uICxcbiAgYW5pbWF0aW9uRHVyYXRpb24gLFxuICBhbmltYXRpb25GaWxsTW9kZSAsXG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ICxcbiAgYW5pbWF0aW9uUGxheVN0YXRlICxcbiAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24gLFxuICBiYWNrZHJvcEZpbHRlciAsXG4gIGJhY2tmYWNlVmlzaWJpbGl0eSAsXG4gIGJhY2tncm91bmRBdHRhY2htZW50ICxcbiAgYmFja2dyb3VuZENvbG9yICxcbiAgYmFja2dyb3VuZENsaXAgLFxuICBiYWNrZ3JvdW5kSW1hZ2UgLFxuICBiYWNrZ3JvdW5kT3JpZ2luICxcbiAgYmFja2dyb3VuZFBvc2l0aW9uICxcbiAgYmFja2dyb3VuZFBvc2l0aW9ucyAsXG4gIGJhY2tncm91bmRQb3NpdGlvbjQgLFxuICBiYWNrZ3JvdW5kUmVwZWF0ICxcbiAgYm9yZGVyQm90dG9tICxcbiAgYm9yZGVyQm90dG9tQ29sb3IgLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzICxcbiAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgLFxuICBib3JkZXJCb3R0b21TdHlsZSAsXG4gIGJvcmRlckJvdHRvbVdpZHRoICxcbiAgYm9yZGVyQ29sbGFwc2UgLFxuICBib3JkZXJDb2xvciAsXG4gIGJvcmRlckxlZnQgLFxuICBib3JkZXJMZWZ0Q29sb3IgLFxuICBib3JkZXJMZWZ0U3R5bGUgLFxuICBib3JkZXJMZWZ0V2lkdGggLFxuICBib3JkZXJSaWdodCAsXG4gIGJvcmRlclJpZ2h0Q29sb3IgLFxuICBib3JkZXJSaWdodFN0eWxlICxcbiAgYm9yZGVyUmlnaHRXaWR0aCAsXG4gIGJvcmRlclJhZGl1cyAsXG4gIGJvcmRlclNwYWNpbmcgLFxuICBib3JkZXJTdHlsZSAsXG4gIGJvcmRlclRvcENvbG9yICxcbiAgYm9yZGVyVG9wTGVmdFJhZGl1cyAsXG4gIGJvcmRlclRvcFJpZ2h0UmFkaXVzICxcbiAgYm9yZGVyVG9wU3R5bGUgLFxuICBib3JkZXJUb3BXaWR0aCAsXG4gIGJvcmRlcldpZHRoICxcbiAgYm90dG9tICxcbiAgYm94U2l6aW5nICxcbiAgYm94U2hhZG93ICxcbiAgYm94U2hhZG93cyAsXG4gIGNsZWFyICxcbiAgY2xpcFBhdGggLFxuICBjb2xvciAsXG4gIGNvbHVtbkNvdW50ICxcbiAgY29udGVudFJ1bGUgLFxuICBjb250ZW50UnVsZXMgLFxuICBjb3VudGVySW5jcmVtZW50ICxcbiAgY291bnRlcnNJbmNyZW1lbnQgLFxuICBjb3VudGVyUmVzZXQgLFxuICBjb3VudGVyc1Jlc2V0ICxcbiAgY291bnRlclNldCAsXG4gIGNvdW50ZXJzU2V0ICxcbiAgY3Vyc29yICxcbiAgZGlyZWN0aW9uICxcbiAgZGlzcGxheSAsXG4gIGZsZXggLFxuICBmbGV4QmFzaXMgLFxuICBmbGV4RGlyZWN0aW9uICxcbiAgZmxleEdyb3cgLFxuICBmbGV4U2hyaW5rICxcbiAgZmxleFdyYXAgLFxuICAkJGZsb2F0ICxcbiAgZm9udEZhbWlseSAsXG4gIGZvbnRGYW1pbGllcyAsXG4gIGZvbnRTaXplICxcbiAgZm9udFN0eWxlICxcbiAgZm9udFZhcmlhbnQgLFxuICBmb250V2VpZ2h0ICxcbiAgZ3JpZEFyZWEgLFxuICBncmlkQXJlYTIgLFxuICBncmlkQXJlYTMgLFxuICBncmlkQXJlYTQgLFxuICBncmlkQXV0b0Zsb3cgLFxuICBncmlkQ29sdW1uICxcbiAgZ3JpZENvbHVtbkVuZCAsXG4gIGdyaWRDb2x1bW5HYXAgLFxuICBncmlkQ29sdW1uU3RhcnQgLFxuICBncmlkR2FwICxcbiAgZ3JpZFJvdyAsXG4gIGdyaWRSb3dFbmQgLFxuICBncmlkUm93R2FwICxcbiAgZ3JpZFJvd1N0YXJ0ICxcbiAgZ3JpZFRlbXBsYXRlQXJlYXMgLFxuICBoZWlnaHQgLFxuICBqdXN0aWZ5Q29udGVudCAsXG4gIGp1c3RpZnlTZWxmICxcbiAgbGVmdCAsXG4gIGxldHRlclNwYWNpbmcgLFxuICBsaW5lSGVpZ2h0ICxcbiAgbGlzdFN0eWxlICxcbiAgbGlzdFN0eWxlSW1hZ2UgLFxuICBsaXN0U3R5bGVUeXBlICxcbiAgbGlzdFN0eWxlUG9zaXRpb24gLFxuICBtYXJnaW4gLFxuICBtYXJnaW4yICxcbiAgbWFyZ2luMyAsXG4gIG1hcmdpbjQgLFxuICBtYXJnaW5MZWZ0ICxcbiAgbWFyZ2luUmlnaHQgLFxuICBtYXJnaW5Ub3AgLFxuICBtYXJnaW5Cb3R0b20gLFxuICBtYXhIZWlnaHQgLFxuICBtYXhXaWR0aCAsXG4gIG1pbkhlaWdodCAsXG4gIG1pbldpZHRoICxcbiAgb2JqZWN0Rml0ICxcbiAgb2JqZWN0UG9zaXRpb24gLFxuICBvcGFjaXR5ICxcbiAgb3JkZXIgLFxuICBvdXRsaW5lICxcbiAgb3V0bGluZUNvbG9yICxcbiAgb3V0bGluZU9mZnNldCAsXG4gIG91dGxpbmVTdHlsZSAsXG4gIG91dGxpbmVXaWR0aCAsXG4gIG92ZXJmbG93ICxcbiAgb3ZlcmZsb3dYICxcbiAgb3ZlcmZsb3dZICxcbiAgb3ZlcmZsb3dXcmFwICxcbiAgcGFkZGluZyAsXG4gIHBhZGRpbmcyICxcbiAgcGFkZGluZzMgLFxuICBwYWRkaW5nNCAsXG4gIHBhZGRpbmdMZWZ0ICxcbiAgcGFkZGluZ1JpZ2h0ICxcbiAgcGFkZGluZ1RvcCAsXG4gIHBhZGRpbmdCb3R0b20gLFxuICBwZXJzcGVjdGl2ZSAsXG4gIHBlcnNwZWN0aXZlT3JpZ2luICxcbiAgcG9pbnRlckV2ZW50cyAsXG4gIHBvc2l0aW9uICxcbiAgcmVzaXplICxcbiAgcmlnaHQgLFxuICB0YWJsZUxheW91dCAsXG4gIHRleHRBbGlnbiAsXG4gIHRleHREZWNvcmF0aW9uQ29sb3IgLFxuICB0ZXh0RGVjb3JhdGlvbkxpbmUgLFxuICB0ZXh0RGVjb3JhdGlvblN0eWxlICxcbiAgdGV4dEluZGVudCAsXG4gIHRleHRPdmVyZmxvdyAsXG4gIHRleHRTaGFkb3cgLFxuICB0ZXh0U2hhZG93cyAsXG4gIHRleHRUcmFuc2Zvcm0gLFxuICB0b3AgLFxuICB0cmFuc2Zvcm0gLFxuICB0cmFuc2Zvcm1zICxcbiAgdHJhbnNmb3JtT3JpZ2luICxcbiAgdHJhbnNmb3JtT3JpZ2luM2QgLFxuICB0cmFuc2l0aW9uRGVsYXkgLFxuICB0cmFuc2l0aW9uRHVyYXRpb24gLFxuICB0cmFuc2l0aW9uUHJvcGVydHkgLFxuICB0cmFuc2Zvcm1TdHlsZSAsXG4gIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiAsXG4gIHVzZXJTZWxlY3QgLFxuICB2ZXJ0aWNhbEFsaWduICxcbiAgdmlzaWJpbGl0eSAsXG4gIHdpZHRoICxcbiAgd2hpdGVTcGFjZSAsXG4gIHdvcmRCcmVhayAsXG4gIHdvcmRTcGFjaW5nICxcbiAgd29yZFdyYXAgLFxuICB6SW5kZXggLFxuICBzZWxlY3RvciAsXG4gIG1lZGlhICxcbiAgYWN0aXZlICxcbiAgY2hlY2tlZCAsXG4gICQkZGVmYXVsdCAsXG4gICQkZGVmYXVsdCBhcyBkZWZhdWx0LFxuICBkZWZpbmVkICxcbiAgZGlzYWJsZWQgLFxuICBlbXB0eSAsXG4gIGVuYWJsZWQgLFxuICBmaXJzdCAsXG4gIGZpcnN0Q2hpbGQgLFxuICBmaXJzdE9mVHlwZSAsXG4gIGZvY3VzICxcbiAgZm9jdXNXaXRoaW4gLFxuICBob3N0ICxcbiAgaG92ZXIgLFxuICBpbmRldGVybWluYXRlICxcbiAgaW5SYW5nZSAsXG4gIGludmFsaWQgLFxuICBsYW5nICxcbiAgbGFzdENoaWxkICxcbiAgbGFzdE9mVHlwZSAsXG4gIGxpbmsgLFxuICBub3RfXyAsXG4gIE50aCAsXG4gIG50aENoaWxkICxcbiAgbnRoTGFzdENoaWxkICxcbiAgbnRoTGFzdE9mVHlwZSAsXG4gIG50aE9mVHlwZSAsXG4gIG9ubHlDaGlsZCAsXG4gIG9ubHlPZlR5cGUgLFxuICBvcHRpb25hbCAsXG4gIG91dE9mUmFuZ2UgLFxuICByZWFkT25seSAsXG4gIHJlYWRXcml0ZSAsXG4gIHJlcXVpcmVkICxcbiAgcm9vdCAsXG4gIHNjb3BlICxcbiAgdGFyZ2V0ICxcbiAgdmFsaWQgLFxuICB2aXNpdGVkICxcbiAgYWZ0ZXIgLFxuICBiZWZvcmUgLFxuICBmaXJzdExldHRlciAsXG4gIGZpcnN0TGluZSAsXG4gIHBsYWNlaG9sZGVyICxcbiAgc2VsZWN0aW9uICxcbiAgY2hpbGQgLFxuICBjaGlsZHJlbiAsXG4gIGRpcmVjdFNpYmxpbmcgLFxuICBzaWJsaW5ncyAsXG4gIGFueUxpbmsgLFxuICBpbml0aWFsICxcbiAgaW5oZXJpdF8gLFxuICB1bnNldCAsXG4gIGF1dG8gLFxuICBub25lICxcbiAgdGV4dCAsXG4gIHBjdCAsXG4gIGNoICxcbiAgY20gLFxuICBlbSAsXG4gIGV4ICxcbiAgbW0gLFxuICBwdCAsXG4gIHB4ICxcbiAgcHhGbG9hdCAsXG4gIHJlbSAsXG4gIHZoICxcbiAgdm1pbiAsXG4gIHZtYXggLFxuICB6ZXJvICxcbiAgZGVnICxcbiAgcmFkICxcbiAgZ3JhZCAsXG4gIHR1cm4gLFxuICBsdHIgLFxuICBydGwgLFxuICBhYnNvbHV0ZSAsXG4gIHJlbGF0aXZlICxcbiAgJCRzdGF0aWMgLFxuICBmaXhlZCAsXG4gIHN0aWNreSAsXG4gIGhvcml6b250YWwgLFxuICB2ZXJ0aWNhbCAsXG4gIHNtYWxsQ2FwcyAsXG4gIGl0YWxpYyAsXG4gIG9ibGlxdWUgLFxuICBoaWRkZW4gLFxuICB2aXNpYmxlICxcbiAgc2Nyb2xsICxcbiAgcmdiICxcbiAgcmdiYSAsXG4gIGhzbCAsXG4gIGhzbGEgLFxuICBoZXggLFxuICB0cmFuc3BhcmVudCAsXG4gIGN1cnJlbnRDb2xvciAsXG4gIGxvY2FsICxcbiAgcGFkZGluZ0JveCAsXG4gIGJvcmRlckJveCAsXG4gIGNvbnRlbnRCb3ggLFxuICBub1JlcGVhdCAsXG4gIHNwYWNlICxcbiAgcmVwZWF0ICxcbiAgbWlubWF4ICxcbiAgcmVwZWF0WCAsXG4gIHJlcGVhdFkgLFxuICBjb250YWluICxcbiAgY292ZXIgLFxuICByb3cgLFxuICByb3dSZXZlcnNlICxcbiAgY29sdW1uICxcbiAgY29sdW1uUmV2ZXJzZSAsXG4gIHdyYXAgLFxuICBub3dyYXAgLFxuICB3cmFwUmV2ZXJzZSAsXG4gIGlubGluZSAsXG4gIGJsb2NrICxcbiAgY29udGVudHMgLFxuICBmbGV4Qm94ICxcbiAgZ3JpZCAsXG4gIGlubGluZUJsb2NrICxcbiAgaW5saW5lRmxleCAsXG4gIGlubGluZUdyaWQgLFxuICBpbmxpbmVUYWJsZSAsXG4gIGxpc3RJdGVtICxcbiAgcnVuSW4gLFxuICB0YWJsZSAsXG4gIHRhYmxlQ2FwdGlvbiAsXG4gIHRhYmxlQ29sdW1uR3JvdXAgLFxuICB0YWJsZUhlYWRlckdyb3VwICxcbiAgdGFibGVGb290ZXJHcm91cCAsXG4gIHRhYmxlUm93R3JvdXAgLFxuICB0YWJsZUNlbGwgLFxuICB0YWJsZUNvbHVtbiAsXG4gIHRhYmxlUm93ICxcbiAgZmxleFN0YXJ0ICxcbiAgZmxleEVuZCAsXG4gIGNlbnRlciAsXG4gIHN0cmV0Y2ggLFxuICBzcGFjZUJldHdlZW4gLFxuICBzcGFjZUFyb3VuZCAsXG4gIHNwYWNlRXZlbmx5ICxcbiAgYmFzZWxpbmUgLFxuICBmb3J3YXJkcyAsXG4gIGJhY2t3YXJkcyAsXG4gIGJvdGggLFxuICBpbmZpbml0ZSAsXG4gIGNvdW50ICxcbiAgcGF1c2VkICxcbiAgcnVubmluZyAsXG4gIGluc2lkZSAsXG4gIG91dHNpZGUgLFxuICBzb2xpZCAsXG4gIGRvdHRlZCAsXG4gIGRhc2hlZCAsXG4gIHVuZGVybGluZSAsXG4gIG92ZXJsaW5lICxcbiAgbGluZVRocm91Z2ggLFxuICBjbGlwICxcbiAgZWxsaXBzaXMgLFxuICB3YXZ5ICxcbiAgJCRkb3VibGUgLFxuICB1cHBlcmNhc2UgLFxuICBsb3dlcmNhc2UgLFxuICBjYXBpdGFsaXplICxcbiAgc3ViICxcbiAgJCRzdXBlciAsXG4gIHRleHRUb3AgLFxuICB0ZXh0Qm90dG9tICxcbiAgbWlkZGxlICxcbiAgbm9ybWFsICxcbiAgYnJlYWtBbGwgLFxuICBrZWVwQWxsICxcbiAgYnJlYWtXb3JkICxcbiAgcmV2ZXJzZSAsXG4gIGFsdGVybmF0ZSAsXG4gIGFsdGVybmF0ZVJldmVyc2UgLFxuICBmaWxsICxcbiAgY29udGVudCAsXG4gIG1heENvbnRlbnQgLFxuICBtaW5Db250ZW50ICxcbiAgZml0Q29udGVudCAsXG4gIGFsbCAsXG4gIHJvdW5kICxcbiAgbWl0ZXIgLFxuICBiZXZlbCAsXG4gIGJ1dHQgLFxuICBzcXVhcmUgLFxuICB0aGluICxcbiAgZXh0cmFMaWdodCAsXG4gIGxpZ2h0ICxcbiAgbWVkaXVtICxcbiAgc2VtaUJvbGQgLFxuICBib2xkICxcbiAgZXh0cmFCb2xkICxcbiAgbGlnaHRlciAsXG4gIGJvbGRlciAsXG4gIGZyICxcbiAgdncgLFxuICBsb2NhbFVybCAsXG4gIHVybCAsXG4gIGxpbmVhciAsXG4gIGVhc2UgLFxuICBlYXNlSW4gLFxuICBlYXNlT3V0ICxcbiAgZWFzZUluT3V0ICxcbiAgc3RlcFN0YXJ0ICxcbiAgc3RlcEVuZCAsXG4gIHN0ZXBzICxcbiAgY3ViaWNCZXppZXIgLFxuICBtYXJnaW5Cb3ggLFxuICBmaWxsQm94ICxcbiAgc3Ryb2tlQm94ICxcbiAgdmlld0JveCAsXG4gIHRyYW5zbGF0ZSAsXG4gIHRyYW5zbGF0ZTNkICxcbiAgdHJhbnNsYXRlWCAsXG4gIHRyYW5zbGF0ZVkgLFxuICB0cmFuc2xhdGVaICxcbiAgc2NhbGUgLFxuICBzY2FsZTNkICxcbiAgc2NhbGVYICxcbiAgc2NhbGVZICxcbiAgc2NhbGVaICxcbiAgcm90YXRlICxcbiAgcm90YXRlM2QgLFxuICByb3RhdGVYICxcbiAgcm90YXRlWSAsXG4gIHJvdGF0ZVogLFxuICBza2V3ICxcbiAgc2tld1ggLFxuICBza2V3WSAsXG4gIGxpbmVhckdyYWRpZW50ICxcbiAgcmVwZWF0aW5nTGluZWFyR3JhZGllbnQgLFxuICByYWRpYWxHcmFkaWVudCAsXG4gIHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50ICxcbiAgYXJlYXMgLFxuICBpZGVudCAsXG4gIG51bUlkZW50ICxcbiAgY29udGV4dE1lbnUgLFxuICBoZWxwICxcbiAgcG9pbnRlciAsXG4gIHByb2dyZXNzICxcbiAgd2FpdCAsXG4gIGNlbGwgLFxuICBjcm9zc2hhaXIgLFxuICB2ZXJ0aWNhbFRleHQgLFxuICBhbGlhcyAsXG4gIGNvcHkgLFxuICBtb3ZlICxcbiAgbm9Ecm9wICxcbiAgbm90QWxsb3dlZCAsXG4gIGdyYWIgLFxuICBncmFiYmluZyAsXG4gIGFsbFNjcm9sbCAsXG4gIGNvbFJlc2l6ZSAsXG4gIHJvd1Jlc2l6ZSAsXG4gIG5SZXNpemUgLFxuICBlUmVzaXplICxcbiAgc1Jlc2l6ZSAsXG4gIHdSZXNpemUgLFxuICBuZVJlc2l6ZSAsXG4gIG53UmVzaXplICxcbiAgc2VSZXNpemUgLFxuICBzd1Jlc2l6ZSAsXG4gIGV3UmVzaXplICxcbiAgbnNSZXNpemUgLFxuICBuZXN3UmVzaXplICxcbiAgbndzZVJlc2l6ZSAsXG4gIHpvb21JbiAsXG4gIHpvb21PdXQgLFxuICBmbGV4MyAsXG4gIGJvcmRlciAsXG4gIGJvcmRlclRvcCAsXG4gIGJhY2tncm91bmRTaXplICxcbiAgdGV4dERlY29yYXRpb24gLFxuICBiYWNrZ3JvdW5kICxcbiAgYmFja2dyb3VuZHMgLFxuICBncmlkQXV0b0NvbHVtbnMgLFxuICBncmlkQXV0b1Jvd3MgLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zICxcbiAgZ3JpZFRlbXBsYXRlUm93cyAsXG4gIENhbGMgLFxuICBzaXplICxcbiAgZmlsdGVyICxcbiAgVHJhbnNpdGlvbiAsXG4gIHRyYW5zaXRpb25WYWx1ZSAsXG4gIHRyYW5zaXRpb25MaXN0ICxcbiAgdHJhbnNpdGlvbiAsXG4gIHRyYW5zaXRpb25zICxcbiAgQW5pbWF0aW9uICxcbiAgYW5pbWF0aW9uVmFsdWUgLFxuICBhbmltYXRpb24gLFxuICBhbmltYXRpb25zICxcbiAgYW5pbWF0aW9uTmFtZSAsXG4gIFNWRyAsXG4gIGFsaWNlYmx1ZSAsXG4gIGFudGlxdWV3aGl0ZSAsXG4gIGFxdWEgLFxuICBhcXVhbWFyaW5lICxcbiAgYXp1cmUgLFxuICBiZWlnZSAsXG4gIGJpc3F1ZSAsXG4gIGJsYWNrICxcbiAgYmxhbmNoZWRhbG1vbmQgLFxuICBibHVlICxcbiAgYmx1ZXZpb2xldCAsXG4gIGJyb3duICxcbiAgYnVybHl3b29kICxcbiAgY2FkZXRibHVlICxcbiAgY2hhcnRyZXVzZSAsXG4gIGNob2NvbGF0ZSAsXG4gIGNvcmFsICxcbiAgY29ybmZsb3dlcmJsdWUgLFxuICBjb3Juc2lsayAsXG4gIGNyaW1zb24gLFxuICBjeWFuICxcbiAgZGFya2JsdWUgLFxuICBkYXJrY3lhbiAsXG4gIGRhcmtnb2xkZW5yb2QgLFxuICBkYXJrZ3JheSAsXG4gIGRhcmtncmV5ICxcbiAgZGFya2dyZWVuICxcbiAgZGFya2toYWtpICxcbiAgZGFya21hZ2VudGEgLFxuICBkYXJrb2xpdmVncmVlbiAsXG4gIGRhcmtvcmFuZ2UgLFxuICBkYXJrb3JjaGlkICxcbiAgZGFya3JlZCAsXG4gIGRhcmtzYWxtb24gLFxuICBkYXJrc2VhZ3JlZW4gLFxuICBkYXJrc2xhdGVibHVlICxcbiAgZGFya3NsYXRlZ3JheSAsXG4gIGRhcmtzbGF0ZWdyZXkgLFxuICBkYXJrdHVycXVvaXNlICxcbiAgZGFya3Zpb2xldCAsXG4gIGRlZXBwaW5rICxcbiAgZGVlcHNreWJsdWUgLFxuICBkaW1ncmF5ICxcbiAgZGltZ3JleSAsXG4gIGRvZGdlcmJsdWUgLFxuICBmaXJlYnJpY2sgLFxuICBmbG9yYWx3aGl0ZSAsXG4gIGZvcmVzdGdyZWVuICxcbiAgZnVjaHNpYSAsXG4gIGdhaW5zYm9ybyAsXG4gIGdob3N0d2hpdGUgLFxuICBnb2xkICxcbiAgZ29sZGVucm9kICxcbiAgZ3JheSAsXG4gIGdyZXkgLFxuICBncmVlbiAsXG4gIGdyZWVueWVsbG93ICxcbiAgaG9uZXlkZXcgLFxuICBob3RwaW5rICxcbiAgaW5kaWFucmVkICxcbiAgaW5kaWdvICxcbiAgaXZvcnkgLFxuICBraGFraSAsXG4gIGxhdmVuZGVyICxcbiAgbGF2ZW5kZXJibHVzaCAsXG4gIGxhd25ncmVlbiAsXG4gIGxlbW9uY2hpZmZvbiAsXG4gIGxpZ2h0Ymx1ZSAsXG4gIGxpZ2h0Y29yYWwgLFxuICBsaWdodGN5YW4gLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdyAsXG4gIGxpZ2h0Z3JheSAsXG4gIGxpZ2h0Z3JleSAsXG4gIGxpZ2h0Z3JlZW4gLFxuICBsaWdodHBpbmsgLFxuICBsaWdodHNhbG1vbiAsXG4gIGxpZ2h0c2VhZ3JlZW4gLFxuICBsaWdodHNreWJsdWUgLFxuICBsaWdodHNsYXRlZ3JheSAsXG4gIGxpZ2h0c2xhdGVncmV5ICxcbiAgbGlnaHRzdGVlbGJsdWUgLFxuICBsaWdodHllbGxvdyAsXG4gIGxpbWUgLFxuICBsaW1lZ3JlZW4gLFxuICBsaW5lbiAsXG4gIG1hZ2VudGEgLFxuICBtYXJvb24gLFxuICBtZWRpdW1hcXVhbWFyaW5lICxcbiAgbWVkaXVtYmx1ZSAsXG4gIG1lZGl1bW9yY2hpZCAsXG4gIG1lZGl1bXB1cnBsZSAsXG4gIG1lZGl1bXNlYWdyZWVuICxcbiAgbWVkaXVtc2xhdGVibHVlICxcbiAgbWVkaXVtc3ByaW5nZ3JlZW4gLFxuICBtZWRpdW10dXJxdW9pc2UgLFxuICBtZWRpdW12aW9sZXRyZWQgLFxuICBtaWRuaWdodGJsdWUgLFxuICBtaW50Y3JlYW0gLFxuICBtaXN0eXJvc2UgLFxuICBtb2NjYXNpbiAsXG4gIG5hdmFqb3doaXRlICxcbiAgbmF2eSAsXG4gIG9sZGxhY2UgLFxuICBvbGl2ZSAsXG4gIG9saXZlZHJhYiAsXG4gIG9yYW5nZSAsXG4gIG9yYW5nZXJlZCAsXG4gIG9yY2hpZCAsXG4gIHBhbGVnb2xkZW5yb2QgLFxuICBwYWxlZ3JlZW4gLFxuICBwYWxldHVycXVvaXNlICxcbiAgcGFsZXZpb2xldHJlZCAsXG4gIHBhcGF5YXdoaXAgLFxuICBwZWFjaHB1ZmYgLFxuICBwZXJ1ICxcbiAgcGluayAsXG4gIHBsdW0gLFxuICBwb3dkZXJibHVlICxcbiAgcHVycGxlICxcbiAgcmViZWNjYXB1cnBsZSAsXG4gIHJlZCAsXG4gIHJvc3licm93biAsXG4gIHJveWFsYmx1ZSAsXG4gIHNhZGRsZWJyb3duICxcbiAgc2FsbW9uICxcbiAgc2FuZHlicm93biAsXG4gIHNlYWdyZWVuICxcbiAgc2Vhc2hlbGwgLFxuICBzaWVubmEgLFxuICBzaWx2ZXIgLFxuICBza3libHVlICxcbiAgc2xhdGVibHVlICxcbiAgc2xhdGVncmF5ICxcbiAgc2xhdGVncmV5ICxcbiAgc25vdyAsXG4gIHNwcmluZ2dyZWVuICxcbiAgc3RlZWxibHVlICxcbiAgdGFuICxcbiAgdGVhbCAsXG4gIHRoaXN0bGUgLFxuICB0b21hdG8gLFxuICB0dXJxdW9pc2UgLFxuICB2aW9sZXQgLFxuICB3aGVhdCAsXG4gIHdoaXRlICxcbiAgd2hpdGVzbW9rZSAsXG4gIHllbGxvdyAsXG4gIHllbGxvd2dyZWVuICxcbiAgJCRnbG9iYWwgLFxuICBpbnNlcnRSdWxlICxcbiAgbWVyZ2UgLFxuICBzdHlsZSAsXG4gIGtleWZyYW1lcyAsXG4gIGZvbnRGYWNlICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG52YXIgYmx1ZSA9IENzcy5yZ2IoMjUsIDExNiwgMTk1KTtcblxudmFyIGdyZXkxID0gQ3NzLnJnYigyNDksIDI0OSwgMjUwKTtcblxudmFyIGdyZXkyID0gQ3NzLnJnYigyMzMsIDIzNiwgMjM5KTtcblxudmFyIGdyZXkzID0gQ3NzLnJnYigyMjIsIDIyNiwgMjMwKTtcblxudmFyIGdyZXk0ID0gQ3NzLnJnYigyMDYsIDIxMiwgMjE4KTtcblxudmFyIGdyZXk1ID0gQ3NzLnJnYigxNzMsIDE4MSwgMTg5KTtcblxudmFyIGdyZXk2ID0gQ3NzLnJnYigxMDgsIDExNywgMTI1KTtcblxudmFyIGdyZXk3ID0gQ3NzLnJnYig3MywgODAsIDg3KTtcblxudmFyIGdyZXk4ID0gQ3NzLnJnYig1MiwgNTgsIDY0KTtcblxudmFyIGdyZXk5ID0gQ3NzLnJnYigzMywgMzcsIDQxKTtcblxudmFyIGRlc2t0b3BDb2x1bW5XaWR0aCA9IENzcy53aWR0aChDc3MucmVtKDM3LjUpKTtcblxudmFyIHBhcnRpYWxfYXJnID0gXCIobWluLXdpZHRoOiBcIiArIChTdHJpbmcoMzcuNSkgKyBcInJlbSlcIik7XG5cbmZ1bmN0aW9uIGRlc2t0b3BNZWRpYVF1ZXJ5KHBhcmFtKSB7XG4gIHJldHVybiBDc3MubWVkaWEocGFydGlhbF9hcmcsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHbG9iYWxTdHlsZXMocGFyYW0pIHtcbiAgQ3VycnkuXzIoQ3NzLiQkZ2xvYmFsLCBcImFcIiwgLyogOjogKi9bXG4gICAgICAgIENzcy50ZXh0RGVjb3JhdGlvbihDc3Mubm9uZSksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5jb2xvcihibHVlKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXSk7XG4gIHZhciBjb2RlU3R5bGVfMDAwID0gQ3NzLmZvbnRTaXplKENzcy5yZW0oMC44NzUpKTtcbiAgdmFyIGNvZGVTdHlsZV8wMDEgPSAvKiA6OiAqL1tcbiAgICBDc3MuZm9udEZhbWlseSgvKiBtb25vc3BhY2UgKi8tNTU1MzYzOTAxKSxcbiAgICAvKiA6OiAqL1tcbiAgICAgIENzcy5iYWNrZ3JvdW5kQ29sb3IoZ3JleTIpLFxuICAgICAgLyogW10gKi8wXG4gICAgXVxuICBdO1xuICB2YXIgY29kZVN0eWxlID0gLyogOjogKi9bXG4gICAgY29kZVN0eWxlXzAwMCxcbiAgICBjb2RlU3R5bGVfMDAxXG4gIF07XG4gIEN1cnJ5Ll8yKENzcy4kJGdsb2JhbCwgXCJjb2RlXCIsIGNvZGVTdHlsZSk7XG4gIEN1cnJ5Ll8yKENzcy4kJGdsb2JhbCwgXCJwcmVcIiwgLyogOjogKi9bXG4gICAgICAgIENzcy5wYWRkaW5nKENzcy5yZW0oMC42MjUpKSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgQ3NzLm92ZXJmbG93KENzcy5hdXRvKSxcbiAgICAgICAgICBjb2RlU3R5bGVcbiAgICAgICAgXVxuICAgICAgXSk7XG4gIHJldHVybiBDdXJyeS5fMihDc3MuJCRnbG9iYWwsIFwiaDEgY29kZSwgaDIgY29kZSwgaDMgY29kZVwiLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLmZvbnRTaXplKENzcy5pbmhlcml0XyksXG4gICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgXSk7XG59XG5cbnZhciBkYXJrQm9yZGVyQ29sb3VyID0gZ3JleTI7XG5cbnZhciBsaWdodEJvcmRlckNvbG91ciA9IGdyZXkzO1xuXG52YXIgZGVza3RvcENvbHVtblJlbSA9IDM3LjU7XG5cbmV4cG9ydCB7XG4gIGJsdWUgLFxuICBncmV5MSAsXG4gIGdyZXkyICxcbiAgZ3JleTMgLFxuICBncmV5NCAsXG4gIGdyZXk1ICxcbiAgZ3JleTYgLFxuICBncmV5NyAsXG4gIGdyZXk4ICxcbiAgZ3JleTkgLFxuICBkYXJrQm9yZGVyQ29sb3VyICxcbiAgbGlnaHRCb3JkZXJDb2xvdXIgLFxuICBkZXNrdG9wQ29sdW1uUmVtICxcbiAgZGVza3RvcENvbHVtbldpZHRoICxcbiAgZGVza3RvcE1lZGlhUXVlcnkgLFxuICByZWdpc3Rlckdsb2JhbFN0eWxlcyAsXG4gIFxufVxuLyogYmx1ZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiaW1wb3J0IHsgc2VyaWFsaXplU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vc2VyaWFsaXplJztcblxuZnVuY3Rpb24gY3NzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIHNlcmlhbGl6ZVN0eWxlcyhhcmdzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3NzO1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCBmb3J3YXJkUmVmLCBjcmVhdGVFbGVtZW50LCBDb21wb25lbnQsIEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3V0aWxzJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnO1xuaW1wb3J0IGNzcyBmcm9tICdAZW1vdGlvbi9jc3MnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuXG52YXIgaXNCcm93c2VyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcblxudmFyIEVtb3Rpb25DYWNoZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCAvLyB3ZSdyZSBkb2luZyB0aGlzIHRvIGF2b2lkIHByZWNvbnN0cnVjdCdzIGRlYWQgY29kZSBlbGltaW5hdGlvbiBpbiB0aGlzIG9uZSBjYXNlXG4vLyBiZWNhdXNlIHRoaXMgbW9kdWxlIGlzIHByaW1hcmlseSBpbnRlbmRlZCBmb3IgdGhlIGJyb3dzZXIgYW5kIG5vZGVcbi8vIGJ1dCBpdCdzIGFsc28gcmVxdWlyZWQgaW4gcmVhY3QgbmF0aXZlIGFuZCBzaW1pbGFyIGVudmlyb25tZW50cyBzb21ldGltZXNcbi8vIGFuZCB3ZSBjb3VsZCBoYXZlIGEgc3BlY2lhbCBidWlsZCBqdXN0IGZvciB0aGF0XG4vLyBidXQgdGhpcyBpcyBtdWNoIGVhc2llciBhbmQgdGhlIG5hdGl2ZSBwYWNrYWdlc1xuLy8gbWlnaHQgdXNlIGEgZGlmZmVyZW50IHRoZW1lIGNvbnRleHQgaW4gdGhlIGZ1dHVyZSBhbnl3YXlcbnR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBjcmVhdGVDYWNoZSgpIDogbnVsbCk7XG52YXIgVGhlbWVDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh7fSk7XG52YXIgQ2FjaGVQcm92aWRlciA9IEVtb3Rpb25DYWNoZUNvbnRleHQuUHJvdmlkZXI7XG5cbnZhciB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gIHZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIocHJvcHMsIHJlZikge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEVtb3Rpb25DYWNoZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgcmV0dXJuIGZ1bmMocHJvcHMsIGNhY2hlLCByZWYpO1xuICAgIH0pO1xuICB9OyAvLyAkRmxvd0ZpeE1lXG5cblxuICByZXR1cm4gZm9yd2FyZFJlZihyZW5kZXIpO1xufTtcblxuaWYgKCFpc0Jyb3dzZXIpIHtcbiAgdmFyIEJhc2ljUHJvdmlkZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQmFzaWNQcm92aWRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBCYXNpY1Byb3ZpZGVyKHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgICB2YXIgX3RoaXM7XG5cbiAgICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBjcmVhdGVDYWNoZSgpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBCYXNpY1Byb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChFbW90aW9uQ2FjaGVDb250ZXh0LlByb3ZpZGVyLCB0aGlzLnN0YXRlLCB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuc3RhdGUudmFsdWUpKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJhc2ljUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICB3aXRoRW1vdGlvbkNhY2hlID0gZnVuY3Rpb24gd2l0aEVtb3Rpb25DYWNoZShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoRW1vdGlvbkNhY2hlQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChCYXNpY1Byb3ZpZGVyLCBudWxsLCBmdW5jdGlvbiAobmV3Q29udGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMocHJvcHMsIG5ld0NvbnRleHQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmdW5jKHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLy8gdGh1cyB3ZSBvbmx5IG5lZWQgdG8gcmVwbGFjZSB3aGF0IGlzIGEgdmFsaWQgY2hhcmFjdGVyIGZvciBKUywgYnV0IG5vdCBmb3IgQ1NTXG5cbnZhciBzYW5pdGl6ZUlkZW50aWZpZXIgPSBmdW5jdGlvbiBzYW5pdGl6ZUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gaWRlbnRpZmllci5yZXBsYWNlKC9cXCQvZywgJy0nKTtcbn07XG5cbnZhciB0eXBlUHJvcE5hbWUgPSAnX19FTU9USU9OX1RZUEVfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgbGFiZWxQcm9wTmFtZSA9ICdfX0VNT1RJT05fTEFCRUxfUExFQVNFX0RPX05PVF9VU0VfXyc7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGNhY2hlLCBwcm9wcywgdGhlbWUsIHJlZikge1xuICB2YXIgY3NzUHJvcCA9IHRoZW1lID09PSBudWxsID8gcHJvcHMuY3NzIDogcHJvcHMuY3NzKHRoZW1lKTsgLy8gc28gdGhhdCB1c2luZyBgY3NzYCBmcm9tIGBlbW90aW9uYCBhbmQgcGFzc2luZyB0aGUgcmVzdWx0IHRvIHRoZSBjc3MgcHJvcCB3b3Jrc1xuICAvLyBub3QgcGFzc2luZyB0aGUgcmVnaXN0ZXJlZCBjYWNoZSB0byBzZXJpYWxpemVTdHlsZXMgYmVjYXVzZSBpdCB3b3VsZFxuICAvLyBtYWtlIGNlcnRhaW4gYmFiZWwgb3B0aW1pc2F0aW9ucyBub3QgcG9zc2libGVcblxuICBpZiAodHlwZW9mIGNzc1Byb3AgPT09ICdzdHJpbmcnICYmIGNhY2hlLnJlZ2lzdGVyZWRbY3NzUHJvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIGNzc1Byb3AgPSBjYWNoZS5yZWdpc3RlcmVkW2Nzc1Byb3BdO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBwcm9wc1t0eXBlUHJvcE5hbWVdO1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtjc3NQcm9wXTtcbiAgdmFyIGNsYXNzTmFtZSA9ICcnO1xuXG4gIGlmICh0eXBlb2YgcHJvcHMuY2xhc3NOYW1lID09PSAnc3RyaW5nJykge1xuICAgIGNsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMoY2FjaGUucmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgcHJvcHMuY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmIChwcm9wcy5jbGFzc05hbWUgIT0gbnVsbCkge1xuICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSArIFwiIFwiO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMocmVnaXN0ZXJlZFN0eWxlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5uYW1lLmluZGV4T2YoJy0nKSA9PT0gLTEpIHtcbiAgICB2YXIgbGFiZWxGcm9tU3RhY2sgPSBwcm9wc1tsYWJlbFByb3BOYW1lXTtcblxuICAgIGlmIChsYWJlbEZyb21TdGFjaykge1xuICAgICAgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhbc2VyaWFsaXplZCwgJ2xhYmVsOicgKyBsYWJlbEZyb21TdGFjayArICc7J10pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBydWxlcyA9IGluc2VydFN0eWxlcyhjYWNoZSwgc2VyaWFsaXplZCwgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKTtcbiAgY2xhc3NOYW1lICs9IGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB2YXIgbmV3UHJvcHMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywga2V5KSAmJiBrZXkgIT09ICdjc3MnICYmIGtleSAhPT0gdHlwZVByb3BOYW1lICYmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IGtleSAhPT0gbGFiZWxQcm9wTmFtZSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzLnJlZiA9IHJlZjtcbiAgbmV3UHJvcHMuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICB2YXIgZWxlID0gY3JlYXRlRWxlbWVudCh0eXBlLCBuZXdQcm9wcyk7XG5cbiAgaWYgKCFpc0Jyb3dzZXIgJiYgcnVsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIHNlcmlhbGl6ZWROYW1lcyA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICB2YXIgbmV4dCA9IHNlcmlhbGl6ZWQubmV4dDtcblxuICAgIHdoaWxlIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlcmlhbGl6ZWROYW1lcyArPSAnICcgKyBuZXh0Lm5hbWU7XG4gICAgICBuZXh0ID0gbmV4dC5uZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBjcmVhdGVFbGVtZW50KFwic3R5bGVcIiwgKF9yZWYgPSB7fSwgX3JlZltcImRhdGEtZW1vdGlvbi1cIiArIGNhY2hlLmtleV0gPSBzZXJpYWxpemVkTmFtZXMsIF9yZWYuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPSB7XG4gICAgICBfX2h0bWw6IHJ1bGVzXG4gICAgfSwgX3JlZi5ub25jZSA9IGNhY2hlLnNoZWV0Lm5vbmNlLCBfcmVmKSksIGVsZSk7XG4gIH1cblxuICByZXR1cm4gZWxlO1xufTtcblxudmFyIEVtb3Rpb24gPVxuLyogI19fUFVSRV9fICovXG53aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY2FjaGUsIHJlZikge1xuICAvLyB1c2UgQ29udGV4dC5yZWFkIGZvciB0aGUgdGhlbWUgd2hlbiBpdCdzIHN0YWJsZVxuICBpZiAodHlwZW9mIHByb3BzLmNzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFRoZW1lQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICByZXR1cm4gcmVuZGVyKGNhY2hlLCBwcm9wcywgdGhlbWUsIHJlZik7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVuZGVyKGNhY2hlLCBwcm9wcywgbnVsbCwgcmVmKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBFbW90aW9uLmRpc3BsYXlOYW1lID0gJ0Vtb3Rpb25Dc3NQcm9wSW50ZXJuYWwnO1xufSAvLyAkRmxvd0ZpeE1lXG5cblxudmFyIGpzeCA9IGZ1bmN0aW9uIGpzeCh0eXBlLCBwcm9wcykge1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblxuICBpZiAocHJvcHMgPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwcm9wcywgJ2NzcycpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcHJvcHMuY3NzID09PSAnc3RyaW5nJyAmJiAvLyBjaGVjayBpZiB0aGVyZSBpcyBhIGNzcyBkZWNsYXJhdGlvblxuICBwcm9wcy5jc3MuaW5kZXhPZignOicpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZ3MgYXJlIG5vdCBhbGxvd2VkIGFzIGNzcyBwcm9wIHZhbHVlcywgcGxlYXNlIHdyYXAgaXQgaW4gYSBjc3MgdGVtcGxhdGUgbGl0ZXJhbCBmcm9tICdAZW1vdGlvbi9jc3MnIGxpa2UgdGhpczogY3NzYFwiICsgcHJvcHMuY3NzICsgXCJgXCIpO1xuICB9XG5cbiAgdmFyIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aDtcbiAgdmFyIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSA9IG5ldyBBcnJheShhcmdzTGVuZ3RoKTtcbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzBdID0gRW1vdGlvbjtcbiAgdmFyIG5ld1Byb3BzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocHJvcHMsIGtleSkpIHtcbiAgICAgIG5ld1Byb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIG5ld1Byb3BzW3R5cGVQcm9wTmFtZV0gPSB0eXBlO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cbiAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgIC8vIGNocm9tZVxuICAgICAgdmFyIG1hdGNoID0gZXJyb3Iuc3RhY2subWF0Y2goL2F0ICg/Ok9iamVjdFxcLnwpanN4LipcXG5cXHMrYXQgKFtBLVpdW0EtWmEteiRdKykgLyk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgLy8gc2FmYXJpIGFuZCBmaXJlZm94XG4gICAgICAgIG1hdGNoID0gZXJyb3Iuc3RhY2subWF0Y2goLy4qXFxuKFtBLVpdW0EtWmEteiRdKylALyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBuZXdQcm9wc1tsYWJlbFByb3BOYW1lXSA9IHNhbml0aXplSWRlbnRpZmllcihtYXRjaFsxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlRWxlbWVudEFyZ0FycmF5WzFdID0gbmV3UHJvcHM7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmdzTGVuZ3RoOyBpKyspIHtcbiAgICBjcmVhdGVFbGVtZW50QXJnQXJyYXlbaV0gPSBhcmdzW2ldO1xuICB9IC8vICRGbG93Rml4TWVcblxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KG51bGwsIGNyZWF0ZUVsZW1lbnRBcmdBcnJheSk7XG59O1xuXG52YXIgd2FybmVkQWJvdXRDc3NQcm9wRm9yR2xvYmFsID0gZmFsc2U7XG52YXIgR2xvYmFsID1cbi8qICNfX1BVUkVfXyAqL1xud2l0aEVtb3Rpb25DYWNoZShmdW5jdGlvbiAocHJvcHMsIGNhY2hlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICF3YXJuZWRBYm91dENzc1Byb3BGb3JHbG9iYWwgJiYgKCAvLyBjaGVjayBmb3IgY2xhc3NOYW1lIGFzIHdlbGwgc2luY2UgdGhlIHVzZXIgaXNcbiAgLy8gcHJvYmFibHkgdXNpbmcgdGhlIGN1c3RvbSBjcmVhdGVFbGVtZW50IHdoaWNoXG4gIC8vIG1lYW5zIGl0IHdpbGwgYmUgdHVybmVkIGludG8gYSBjbGFzc05hbWUgcHJvcFxuICAvLyAkRmxvd0ZpeE1lIEkgZG9uJ3QgcmVhbGx5IHdhbnQgdG8gYWRkIGl0IHRvIHRoZSB0eXBlIHNpbmNlIGl0IHNob3VsZG4ndCBiZSB1c2VkXG4gIHByb3BzLmNsYXNzTmFtZSB8fCBwcm9wcy5jc3MpKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkl0IGxvb2tzIGxpa2UgeW91J3JlIHVzaW5nIHRoZSBjc3MgcHJvcCBvbiBHbG9iYWwsIGRpZCB5b3UgbWVhbiB0byB1c2UgdGhlIHN0eWxlcyBwcm9wIGluc3RlYWQ/XCIpO1xuICAgIHdhcm5lZEFib3V0Q3NzUHJvcEZvckdsb2JhbCA9IHRydWU7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gcHJvcHMuc3R5bGVzO1xuXG4gIGlmICh0eXBlb2Ygc3R5bGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKFtzdHlsZXModGhlbWUpXSk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChJbm5lckdsb2JhbCwge1xuICAgICAgICBzZXJpYWxpemVkOiBzZXJpYWxpemVkLFxuICAgICAgICBjYWNoZTogY2FjaGVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoW3N0eWxlc10pO1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChJbm5lckdsb2JhbCwge1xuICAgIHNlcmlhbGl6ZWQ6IHNlcmlhbGl6ZWQsXG4gICAgY2FjaGU6IGNhY2hlXG4gIH0pO1xufSk7XG5cbi8vIG1haW50YWluIHBsYWNlIG92ZXIgcmVyZW5kZXJzLlxuLy8gaW5pdGlhbCByZW5kZXIgZnJvbSBicm93c2VyLCBpbnNlcnRCZWZvcmUgY29udGV4dC5zaGVldC50YWdzWzBdIG9yIGlmIGEgc3R5bGUgaGFzbid0IGJlZW4gaW5zZXJ0ZWQgdGhlcmUgeWV0LCBhcHBlbmRDaGlsZFxuLy8gaW5pdGlhbCBjbGllbnQtc2lkZSByZW5kZXIgZnJvbSBTU1IsIHVzZSBwbGFjZSBvZiBoeWRyYXRpbmcgdGFnXG52YXIgSW5uZXJHbG9iYWwgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSW5uZXJHbG9iYWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElubmVyR2xvYmFsKHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCwgdXBkYXRlcikgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbm5lckdsb2JhbC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zaGVldCA9IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleTogdGhpcy5wcm9wcy5jYWNoZS5rZXkgKyBcIi1nbG9iYWxcIixcbiAgICAgIG5vbmNlOiB0aGlzLnByb3BzLmNhY2hlLnNoZWV0Lm5vbmNlLFxuICAgICAgY29udGFpbmVyOiB0aGlzLnByb3BzLmNhY2hlLnNoZWV0LmNvbnRhaW5lclxuICAgIH0pOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyB0aGlzLnByb3BzLmNhY2hlLmtleSArIFwiPVxcXCJcIiArIHRoaXMucHJvcHMuc2VyaWFsaXplZC5uYW1lICsgXCJcXFwiXVwiKTtcblxuICAgIGlmIChub2RlICE9PSBudWxsKSB7XG4gICAgICB0aGlzLnNoZWV0LnRhZ3MucHVzaChub2RlKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5jYWNoZS5zaGVldC50YWdzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zaGVldC5iZWZvcmUgPSB0aGlzLnByb3BzLmNhY2hlLnNoZWV0LnRhZ3NbMF07XG4gICAgfVxuXG4gICAgdGhpcy5pbnNlcnRTdHlsZXMoKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmIChwcmV2UHJvcHMuc2VyaWFsaXplZC5uYW1lICE9PSB0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmFtZSkge1xuICAgICAgdGhpcy5pbnNlcnRTdHlsZXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmluc2VydFN0eWxlcyA9IGZ1bmN0aW9uIGluc2VydFN0eWxlcyQxKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlcmlhbGl6ZWQubmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpbnNlcnQga2V5ZnJhbWVzXG4gICAgICBpbnNlcnRTdHlsZXModGhpcy5wcm9wcy5jYWNoZSwgdGhpcy5wcm9wcy5zZXJpYWxpemVkLm5leHQsIHRydWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNoZWV0LnRhZ3MubGVuZ3RoKSB7XG4gICAgICAvLyBpZiB0aGlzIGRvZXNuJ3QgZXhpc3QgdGhlbiBpdCB3aWxsIGJlIG51bGwgc28gdGhlIHN0eWxlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnNoZWV0LnRhZ3NbdGhpcy5zaGVldC50YWdzLmxlbmd0aCAtIDFdLm5leHRFbGVtZW50U2libGluZztcbiAgICAgIHRoaXMuc2hlZXQuYmVmb3JlID0gZWxlbWVudDtcbiAgICAgIHRoaXMuc2hlZXQuZmx1c2goKTtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLmNhY2hlLmluc2VydChcIlwiLCB0aGlzLnByb3BzLnNlcmlhbGl6ZWQsIHRoaXMuc2hlZXQsIGZhbHNlKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnNoZWV0LmZsdXNoKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICBpZiAoIWlzQnJvd3Nlcikge1xuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSB0aGlzLnByb3BzLnNlcmlhbGl6ZWQ7XG4gICAgICB2YXIgc2VyaWFsaXplZE5hbWVzID0gc2VyaWFsaXplZC5uYW1lO1xuICAgICAgdmFyIHNlcmlhbGl6ZWRTdHlsZXMgPSBzZXJpYWxpemVkLnN0eWxlcztcbiAgICAgIHZhciBuZXh0ID0gc2VyaWFsaXplZC5uZXh0O1xuXG4gICAgICB3aGlsZSAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlcmlhbGl6ZWROYW1lcyArPSAnICcgKyBuZXh0Lm5hbWU7XG4gICAgICAgIHNlcmlhbGl6ZWRTdHlsZXMgKz0gbmV4dC5zdHlsZXM7XG4gICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG91bGRDYWNoZSA9IHRoaXMucHJvcHMuY2FjaGUuY29tcGF0ID09PSB0cnVlO1xuICAgICAgdmFyIHJ1bGVzID0gdGhpcy5wcm9wcy5jYWNoZS5pbnNlcnQoXCJcIiwge1xuICAgICAgICBuYW1lOiBzZXJpYWxpemVkTmFtZXMsXG4gICAgICAgIHN0eWxlczogc2VyaWFsaXplZFN0eWxlc1xuICAgICAgfSwgdGhpcy5zaGVldCwgc2hvdWxkQ2FjaGUpO1xuXG4gICAgICBpZiAoIXNob3VsZENhY2hlKSB7XG4gICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFwic3R5bGVcIiwgKF9yZWYgPSB7fSwgX3JlZltcImRhdGEtZW1vdGlvbi1cIiArIHRoaXMucHJvcHMuY2FjaGUua2V5XSA9IHNlcmlhbGl6ZWROYW1lcywgX3JlZi5kYW5nZXJvdXNseVNldElubmVySFRNTCA9IHtcbiAgICAgICAgICBfX2h0bWw6IHJ1bGVzXG4gICAgICAgIH0sIF9yZWYubm9uY2UgPSB0aGlzLnByb3BzLmNhY2hlLnNoZWV0Lm5vbmNlLCBfcmVmKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIElubmVyR2xvYmFsO1xufShDb21wb25lbnQpO1xuXG52YXIga2V5ZnJhbWVzID0gZnVuY3Rpb24ga2V5ZnJhbWVzKCkge1xuICB2YXIgaW5zZXJ0YWJsZSA9IGNzcy5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIHZhciBuYW1lID0gXCJhbmltYXRpb24tXCIgKyBpbnNlcnRhYmxlLm5hbWU7IC8vICRGbG93Rml4TWVcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgc3R5bGVzOiBcIkBrZXlmcmFtZXMgXCIgKyBuYW1lICsgXCJ7XCIgKyBpbnNlcnRhYmxlLnN0eWxlcyArIFwifVwiLFxuICAgIGFuaW06IDEsXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiX0VNT19cIiArIHRoaXMubmFtZSArIFwiX1wiICsgdGhpcy5zdHlsZXMgKyBcIl9FTU9fXCI7XG4gICAgfVxuICB9O1xufTtcblxudmFyIGNsYXNzbmFtZXMgPSBmdW5jdGlvbiBjbGFzc25hbWVzKGFyZ3MpIHtcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV07XG4gICAgaWYgKGFyZyA9PSBudWxsKSBjb250aW51ZTtcbiAgICB2YXIgdG9BZGQgPSB2b2lkIDA7XG5cbiAgICBzd2l0Y2ggKHR5cGVvZiBhcmcpIHtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIHRvQWRkID0gY2xhc3NuYW1lcyhhcmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b0FkZCA9ICcnO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGFyZykge1xuICAgICAgICAgICAgICBpZiAoYXJnW2tdICYmIGspIHtcbiAgICAgICAgICAgICAgICB0b0FkZCAmJiAodG9BZGQgKz0gJyAnKTtcbiAgICAgICAgICAgICAgICB0b0FkZCArPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRvQWRkID0gYXJnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQWRkKSB7XG4gICAgICBjbHMgJiYgKGNscyArPSAnICcpO1xuICAgICAgY2xzICs9IHRvQWRkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbHM7XG59O1xuXG5mdW5jdGlvbiBtZXJnZShyZWdpc3RlcmVkLCBjc3MsIGNsYXNzTmFtZSkge1xuICB2YXIgcmVnaXN0ZXJlZFN0eWxlcyA9IFtdO1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gZ2V0UmVnaXN0ZXJlZFN0eWxlcyhyZWdpc3RlcmVkLCByZWdpc3RlcmVkU3R5bGVzLCBjbGFzc05hbWUpO1xuXG4gIGlmIChyZWdpc3RlcmVkU3R5bGVzLmxlbmd0aCA8IDIpIHtcbiAgICByZXR1cm4gY2xhc3NOYW1lO1xuICB9XG5cbiAgcmV0dXJuIHJhd0NsYXNzTmFtZSArIGNzcyhyZWdpc3RlcmVkU3R5bGVzKTtcbn1cblxudmFyIENsYXNzTmFtZXMgPSB3aXRoRW1vdGlvbkNhY2hlKGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCkge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChUaGVtZUNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uICh0aGVtZSkge1xuICAgIHZhciBydWxlcyA9ICcnO1xuICAgIHZhciBzZXJpYWxpemVkSGFzaGVzID0gJyc7XG4gICAgdmFyIGhhc1JlbmRlcmVkID0gZmFsc2U7XG5cbiAgICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKCkge1xuICAgICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjc3MgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgcmVuZGVyJyk7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjb250ZXh0LnJlZ2lzdGVyZWQpO1xuXG4gICAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAgIGluc2VydFN0eWxlcyhjb250ZXh0LCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzID0gaW5zZXJ0U3R5bGVzKGNvbnRleHQsIHNlcmlhbGl6ZWQsIGZhbHNlKTtcblxuICAgICAgICBpZiAocmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBydWxlcyArPSByZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0Jyb3dzZXIpIHtcbiAgICAgICAgc2VyaWFsaXplZEhhc2hlcyArPSBcIiBcIiArIHNlcmlhbGl6ZWQubmFtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRleHQua2V5ICsgXCItXCIgKyBzZXJpYWxpemVkLm5hbWU7XG4gICAgfTtcblxuICAgIHZhciBjeCA9IGZ1bmN0aW9uIGN4KCkge1xuICAgICAgaWYgKGhhc1JlbmRlcmVkICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjeCBjYW4gb25seSBiZSB1c2VkIGR1cmluZyByZW5kZXInKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lcmdlKGNvbnRleHQucmVnaXN0ZXJlZCwgY3NzLCBjbGFzc25hbWVzKGFyZ3MpKTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbnRlbnQgPSB7XG4gICAgICBjc3M6IGNzcyxcbiAgICAgIGN4OiBjeCxcbiAgICAgIHRoZW1lOiB0aGVtZVxuICAgIH07XG4gICAgdmFyIGVsZSA9IHByb3BzLmNoaWxkcmVuKGNvbnRlbnQpO1xuICAgIGhhc1JlbmRlcmVkID0gdHJ1ZTtcblxuICAgIGlmICghaXNCcm93c2VyICYmIHJ1bGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBjcmVhdGVFbGVtZW50KFwic3R5bGVcIiwgKF9yZWYgPSB7fSwgX3JlZltcImRhdGEtZW1vdGlvbi1cIiArIGNvbnRleHQua2V5XSA9IHNlcmlhbGl6ZWRIYXNoZXMuc3Vic3RyaW5nKDEpLCBfcmVmLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0ge1xuICAgICAgICBfX2h0bWw6IHJ1bGVzXG4gICAgICB9LCBfcmVmLm5vbmNlID0gY29udGV4dC5zaGVldC5ub25jZSwgX3JlZikpLCBlbGUpO1xuICAgIH1cblxuICAgIHJldHVybiBlbGU7XG4gIH0pO1xufSk7XG5cbmV4cG9ydCB7IENhY2hlUHJvdmlkZXIsIENsYXNzTmFtZXMsIEdsb2JhbCwgVGhlbWVDb250ZXh0LCBqc3gsIGtleWZyYW1lcywgd2l0aEVtb3Rpb25DYWNoZSB9O1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgRW1vdGlvbiBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0ICogYXMgQ29yZSBmcm9tIFwiQGVtb3Rpb24vY29yZVwiO1xuXG52YXIgUHJvdmlkZXIgPSB7IH07XG5cbnZhciBDYWNoZSA9IHtcbiAgUHJvdmlkZXI6IFByb3ZpZGVyXG59O1xuXG52YXIgU2VydmVyID0geyB9O1xuXG5mdW5jdGlvbiBFbW90aW9uJFByb3ZpZGVyKFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb3JlLkNhY2hlUHJvdmlkZXIsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IEVtb3Rpb24uY2FjaGUsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICAgICAgfSk7XG59XG5cbnZhciBQcm92aWRlciQxID0ge1xuICBtYWtlOiBFbW90aW9uJFByb3ZpZGVyXG59O1xuXG5leHBvcnQge1xuICBDYWNoZSAsXG4gIFNlcnZlciAsXG4gIFByb3ZpZGVyJDEgYXMgUHJvdmlkZXIsXG4gIFxufVxuLyogcmVhY3QgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gQWJvdXRQYWdlKFByb3BzKSB7XG4gIHZhciBwYXJhbSA9IFByb3BzLmRhdGE7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB1bmRlZmluZWQsIFwiYWJvdXRcIiksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBwYXJhbS50ZXh0KSk7XG59XG5cbnZhciBtYWtlID0gQWJvdXRQYWdlO1xuXG5leHBvcnQge1xuICBtYWtlICxcbiAgXG59XG4vKiByZWFjdCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5mdW5jdGlvbiBFbnRyeVBhZ2UoUHJvcHMpIHtcbiAgdmFyIHBhcmFtID0gUHJvcHMuZGF0YTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgcGFyYW0udGl0bGUpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgcGFyYW0udGV4dCkpO1xufVxuXG52YXIgbWFrZSA9IEVudHJ5UGFnZTtcblxuZXhwb3J0IHtcbiAgbWFrZSAsXG4gIFxufVxuLyogcmVhY3QgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9MaXN0LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIEluZGV4UGFnZShQcm9wcykge1xuICB2YXIgcGFyYW0gPSBQcm9wcy5kYXRhO1xuICB2YXIgZW50cmllcyA9IFJlbHVkZV9MaXN0LnRvQXJyYXkoUmVsdWRlX0xpc3QubWFwKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBlbnRyeS50aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBlbnRyeS50aXRsZSk7XG4gICAgICAgICAgICAgIH0pKShwYXJhbS5lbnRyaWVzKSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB1bmRlZmluZWQsIFwicGFnZSBcIiArIChTdHJpbmcocGFyYW0ucGFnZSkgKyBcIlwiKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBcInRvdGFsIFwiICsgKFN0cmluZyhwYXJhbS50b3RhbCkgKyBcIlwiKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBlbnRyaWVzKSk7XG59XG5cbnZhciBtYWtlID0gSW5kZXhQYWdlO1xuXG5leHBvcnQge1xuICBtYWtlICxcbiAgXG59XG4vKiByZWFjdCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5mdW5jdGlvbiBOb3RGb3VuZFBhZ2UoUHJvcHMpIHtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBcIm5vdCBmb3VuZFwiKTtcbn1cblxudmFyIG1ha2UgPSBOb3RGb3VuZFBhZ2U7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBcbn1cbi8qIHJlYWN0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfTGlzdC5icy5qc1wiO1xuXG5mdW5jdGlvbiBUYWdTZWFyY2hQYWdlKFByb3BzKSB7XG4gIHZhciBwYXJhbSA9IFByb3BzLmRhdGE7XG4gIHZhciBlbnRyaWVzID0gUmVsdWRlX0xpc3QudG9BcnJheShSZWx1ZGVfTGlzdC5tYXAoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGVudHJ5LnRpdGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGVudHJ5LnRpdGxlKTtcbiAgICAgICAgICAgICAgfSkpKHBhcmFtLmVudHJpZXMpKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgXCJ0YWcgXCIgKyAoU3RyaW5nKHBhcmFtLnRhZykgKyBcIlwiKSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgdW5kZWZpbmVkLCBcInBhZ2UgXCIgKyAoU3RyaW5nKHBhcmFtLnBhZ2UpICsgXCJcIikpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgZW50cmllcykpO1xufVxuXG52YXIgbWFrZSA9IFRhZ1NlYXJjaFBhZ2U7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBcbn1cbi8qIHJlYWN0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBFbW90aW9uIGZyb20gXCIuLi9iaW5kaW5ncy9FbW90aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBBYm91dFBhZ2UgZnJvbSBcIi4vcGFnZXMvQWJvdXRQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBFbnRyeVBhZ2UgZnJvbSBcIi4vcGFnZXMvRW50cnlQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmRleFBhZ2UgZnJvbSBcIi4vcGFnZXMvSW5kZXhQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBOb3RGb3VuZFBhZ2UgZnJvbSBcIi4vcGFnZXMvTm90Rm91bmRQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBUYWdTZWFyY2hQYWdlIGZyb20gXCIuL3BhZ2VzL1RhZ1NlYXJjaFBhZ2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIEJvb3RzdHJhcFJlYm9vdFNjc3MgZnJvbSBcImJvb3RzdHJhcC9zY3NzL2Jvb3RzdHJhcC1yZWJvb3Quc2Nzc1wiO1xuXG5mdW5jdGlvbiBmb3JtYXRUaXRsZShzaXRlTmFtZSwgcGFnZURhdGEpIHtcbiAgaWYgKHBhZ2VEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJOb3QgZm91bmQgfCBcIiArIChTdHJpbmcoc2l0ZU5hbWUpICsgXCJcIik7XG4gIH1cbiAgc3dpdGNoIChwYWdlRGF0YS50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBJbmRleCAqLzAgOlxuICAgICAgICByZXR1cm4gc2l0ZU5hbWU7XG4gICAgY2FzZSAvKiBUYWdTZWFyY2ggKi8xIDpcbiAgICAgICAgcmV0dXJuIFwiXCIgKyAoU3RyaW5nKHBhZ2VEYXRhWzBdLnRhZykgKyAoXCIgfCBcIiArIChTdHJpbmcoc2l0ZU5hbWUpICsgXCJcIikpKTtcbiAgICBjYXNlIC8qIEFib3V0ICovMiA6XG4gICAgICAgIHJldHVybiBcIkFib3V0IHwgXCIgKyAoU3RyaW5nKHNpdGVOYW1lKSArIFwiXCIpO1xuICAgIGNhc2UgLyogRW50cnkgKi8zIDpcbiAgICAgICAgcmV0dXJuIFwiXCIgKyAoU3RyaW5nKHBhZ2VEYXRhWzBdLnRpdGxlKSArIChcIiB8IFwiICsgKFN0cmluZyhzaXRlTmFtZSkgKyBcIlwiKSkpO1xuICAgIFxuICB9XG59XG5cbnZhciBjbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5mbGV4RGlyZWN0aW9uKENzcy5jb2x1bW4pLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MubWluSGVpZ2h0KENzcy52aCgxMDAuMCkpLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIFBhZ2VfX0NvbXBvbmVudCRSb290KFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBSb290ID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgbWFrZTogUGFnZV9fQ29tcG9uZW50JFJvb3Rcbn07XG5cbmZ1bmN0aW9uIFBhZ2VfX0NvbXBvbmVudChQcm9wcykge1xuICB2YXIgc2l0ZU5hbWUgPSBQcm9wcy5zaXRlTmFtZTtcbiAgdmFyIHBhZ2VEYXRhID0gUHJvcHMucGFnZURhdGE7XG4gIHZhciB0aXRsZSA9IGZvcm1hdFRpdGxlKHNpdGVOYW1lLCBwYWdlRGF0YSk7XG4gIHZhciBjb250ZW50O1xuICBpZiAocGFnZURhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHN3aXRjaCAocGFnZURhdGEudGFnIHwgMCkge1xuICAgICAgY2FzZSAvKiBJbmRleCAqLzAgOlxuICAgICAgICAgIGNvbnRlbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEluZGV4UGFnZS5tYWtlLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogcGFnZURhdGFbMF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIC8qIFRhZ1NlYXJjaCAqLzEgOlxuICAgICAgICAgIGNvbnRlbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRhZ1NlYXJjaFBhZ2UubWFrZSwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHBhZ2VEYXRhWzBdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAvKiBBYm91dCAqLzIgOlxuICAgICAgICAgIGNvbnRlbnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEFib3V0UGFnZS5tYWtlLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogcGFnZURhdGFbMF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIC8qIEVudHJ5ICovMyA6XG4gICAgICAgICAgY29udGVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cnlQYWdlLm1ha2UsIHtcbiAgICAgICAgICAgICAgICBkYXRhOiBwYWdlRGF0YVswXVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb250ZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChOb3RGb3VuZFBhZ2UubWFrZSwgeyB9KTtcbiAgfVxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbW90aW9uLlByb3ZpZGVyLm1ha2UsIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJodG1sXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZzogXCJlblwiXG4gICAgICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaGVhZFwiLCB1bmRlZmluZWQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJtZXRhXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyU2V0OiBcInV0Zi04XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJtZXRhXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBzaHJpbmstdG8tZml0PW5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ2aWV3cG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgdW5kZWZpbmVkLCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCB1bmRlZmluZWQsIEJvb3RzdHJhcFJlYm9vdFNjc3MpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImJvZHlcIiwgdW5kZWZpbmVkLCBSZWFjdC5jcmVhdGVFbGVtZW50KFBhZ2VfX0NvbXBvbmVudCRSb290LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKVxuICAgICAgICAgICAgfSk7XG59XG5cbnZhciBtYWtlID0gUGFnZV9fQ29tcG9uZW50O1xuXG5leHBvcnQge1xuICBmb3JtYXRUaXRsZSAsXG4gIFJvb3QgLFxuICBtYWtlICxcbiAgXG59XG4vKiBjbGFzc05hbWUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBTdHlsZSBmcm9tIFwiLi9TdHlsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBFbW90aW9uU2VydmVyIGZyb20gXCJlbW90aW9uLXNlcnZlclwiO1xuaW1wb3J0ICogYXMgUGFnZV9fQ29tcG9uZW50IGZyb20gXCIuL1BhZ2VfX0NvbXBvbmVudC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU2VydmVyIGZyb20gXCJyZWFjdC1kb20vc2VydmVyXCI7XG5cbmZ1bmN0aW9uIHJlbmRlcihzaXRlTmFtZSwgcGFnZURhdGEpIHtcbiAgU3R5bGUucmVnaXN0ZXJHbG9iYWxTdHlsZXModW5kZWZpbmVkKTtcbiAgdmFyIHJlbmRlcmVkID0gRW1vdGlvblNlcnZlci5yZW5kZXJTdHlsZXNUb1N0cmluZyhTZXJ2ZXIucmVuZGVyVG9TdHJpbmcoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlX19Db21wb25lbnQubWFrZSwge1xuICAgICAgICAgICAgICAgIHNpdGVOYW1lOiBzaXRlTmFtZSxcbiAgICAgICAgICAgICAgICBwYWdlRGF0YTogcGFnZURhdGFcbiAgICAgICAgICAgICAgfSkpKTtcbiAgcmV0dXJuIFwiPCFET0NUWVBFIGh0bWw+XCIgKyByZW5kZXJlZDtcbn1cblxuZXhwb3J0IHtcbiAgcmVuZGVyICxcbiAgXG59XG4vKiBTdHlsZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cblxudmFyIHVuZGVmaW5lZEhlYWRlciA9IC8qIGFycmF5ICovW107XG5cbmZ1bmN0aW9uIHNvbWUoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGJsb2NrID0gLyogdHVwbGUgKi9bXG4gICAgICB1bmRlZmluZWRIZWFkZXIsXG4gICAgICAwXG4gICAgXTtcbiAgICBibG9jay50YWcgPSAyNTY7XG4gICAgcmV0dXJuIGJsb2NrO1xuICB9IGVsc2UgaWYgKHggIT09IG51bGwgJiYgeFswXSA9PT0gdW5kZWZpbmVkSGVhZGVyKSB7XG4gICAgdmFyIG5pZCA9IHhbMV0gKyAxIHwgMDtcbiAgICB2YXIgYmxvY2skMSA9IC8qIHR1cGxlICovW1xuICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgbmlkXG4gICAgXTtcbiAgICBibG9jayQxLnRhZyA9IDI1NjtcbiAgICByZXR1cm4gYmxvY2skMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBudWxsYWJsZV90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb21lKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVuZGVmaW5lZF90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudWxsX3RvX29wdCh4KSB7XG4gIGlmICh4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxGcm9tT3B0aW9uKHgpIHtcbiAgaWYgKHggIT09IG51bGwgJiYgeFswXSA9PT0gdW5kZWZpbmVkSGVhZGVyKSB7XG4gICAgdmFyIGRlcHRoID0geFsxXTtcbiAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgIHJldHVybiA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgICAgICAgICBkZXB0aCAtIDEgfCAwXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geDtcbiAgfVxufVxuXG5mdW5jdGlvbiBvcHRpb25fZ2V0KHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbEZyb21PcHRpb24oeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uX2dldF91bndyYXAoeCkge1xuICBpZiAoeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsRnJvbU9wdGlvbih4KVsxXTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBudWxsYWJsZV90b19vcHQgLFxuICB1bmRlZmluZWRfdG9fb3B0ICxcbiAgbnVsbF90b19vcHQgLFxuICB2YWxGcm9tT3B0aW9uICxcbiAgc29tZSAsXG4gIG9wdGlvbl9nZXQgLFxuICBvcHRpb25fZ2V0X3Vud3JhcCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBiaW5kKHgsIGYpIHtcbiAgaWYgKHggPT0gbnVsbCkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGl0ZXIoeCwgZikge1xuICBpZiAoeCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIC8qICgpICovMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZih4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tT3B0aW9uKHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpO1xuICB9XG4gIFxufVxuXG52YXIgZnJvbV9vcHQgPSBmcm9tT3B0aW9uO1xuXG5leHBvcnQge1xuICBiaW5kICxcbiAgaXRlciAsXG4gIGZyb21PcHRpb24gLFxuICBmcm9tX29wdCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBTbHVnaWZ5IGZyb20gXCJzbHVnaWZ5XCI7XG5pbXBvcnQgKiBhcyBKc19udWxsX3VuZGVmaW5lZCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9qc19udWxsX3VuZGVmaW5lZC5qc1wiO1xuXG5mdW5jdGlvbiBzbHVnaWZ5KHJlcGxhY2VtZW50LCByZW1vdmUsIGxvd2VyLCBzdHIpIHtcbiAgcmV0dXJuIFNsdWdpZnkoc3RyLCB7XG4gICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBKc19udWxsX3VuZGVmaW5lZC5mcm9tT3B0aW9uKHJlcGxhY2VtZW50KSxcbiAgICAgICAgICAgICAgcmVtb3ZlOiBKc19udWxsX3VuZGVmaW5lZC5mcm9tT3B0aW9uKHJlbW92ZSksXG4gICAgICAgICAgICAgIGxvd2VyOiBKc19udWxsX3VuZGVmaW5lZC5mcm9tT3B0aW9uKGxvd2VyKVxuICAgICAgICAgICAgfSk7XG59XG5cbmV4cG9ydCB7XG4gIHNsdWdpZnkgLFxuICBcbn1cbi8qIHNsdWdpZnkgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgU2x1Z2lmeSBmcm9tIFwic2x1Z2lmeS1icy9zcmMvU2x1Z2lmeS5icy5qc1wiO1xuXG5mdW5jdGlvbiBzbHVnKHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhTbHVnaWZ5LnNsdWdpZnksIFwiLVwiLCBwYXJhbSwgdHJ1ZSk7XG59XG5cbmV4cG9ydCB7XG4gIHNsdWcgLFxuICBcbn1cbi8qIFNsdWdpZnkgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyAkJERhdGUgZnJvbSBcIi4uL2JpbmRpbmdzL0RhdGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uL1V0aWxzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9MaXN0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcblxuZnVuY3Rpb24gZGF5VGltZXN0YW1wKGRhdGUpIHtcbiAgcmV0dXJuICQkRGF0ZS5tYWtlKGRhdGUuZ2V0RnVsbFllYXIoKSwgJCREYXRlLmdldE1vbnRoKGRhdGUpLCBkYXRlLmdldERhdGUoKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkuZ2V0VGltZSgpO1xufVxuXG5mdW5jdGlvbiBtYWtlUmVzcG9uc2UoZW50cmllcywgeWVhciwgbW9udGgsIGRheSwgc2x1Zykge1xuICB2YXIgdGltZXN0YW1wID0gJCREYXRlLm1ha2UoeWVhciwgbW9udGgsIGRheSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkuZ2V0VGltZSgpO1xuICByZXR1cm4gUmVsdWRlX0lPLm1hcCgoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFBhZ2UgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRhdGEgKi8vKiBFbnRyeSAqL0Jsb2NrLl9fKDMsIFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlbnRyeS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZW50cnkuZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZW50cnkudGV4dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnczogZW50cnkudGFncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXM6IFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfTGlzdC5maW5kLCAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlUaW1lc3RhbXAoZW50cnkuZGF0ZSkgPCB0aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0xpc3Quc29ydEJ5KChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9JbnQuY29tcGFyZSwgYi5kYXRlLmdldFRpbWUoKSwgYS5kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGVudHJpZXMpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6IFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkudGl0bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfTGlzdC5maW5kLCAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXlUaW1lc3RhbXAoZW50cnkuZGF0ZSkgPiB0aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0xpc3Quc29ydEJ5KChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9JbnQuY29tcGFyZSwgYS5kYXRlLmdldFRpbWUoKSwgYi5kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGVudHJpZXMpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RhdHVzICovMjAwXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9JTy5mcm9tT3B0aW9uKChmdW5jdGlvbiAocHJpbSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfTGlzdC5maW5kLCAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5VGltZXN0YW1wKGVudHJ5LmRhdGUpID09PSB0aW1lc3RhbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKFV0aWxzLnNsdWcodW5kZWZpbmVkKSwgZW50cnkudGl0bGUpID09PSBzbHVnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pLCBlbnRyaWVzKSkpO1xufVxuXG5leHBvcnQge1xuICBkYXlUaW1lc3RhbXAgLFxuICBtYWtlUmVzcG9uc2UgLFxuICBcbn1cbi8qIFV0aWxzIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEpzX3R5cGVzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2pzX3R5cGVzLmpzXCI7XG5pbXBvcnQgKiBhcyBNaW1lVHlwZXMgZnJvbSBcIm1pbWUtdHlwZXNcIjtcblxuZnVuY3Rpb24gc3RyaW5nKHN0cmluZyQxKSB7XG4gIHJldHVybiBzdHJpbmckMTtcbn1cblxuZnVuY3Rpb24gJCRib29sZWFuKCQkYm9vbGVhbiQxKSB7XG4gIHJldHVybiAkJGJvb2xlYW4kMTtcbn1cblxuZnVuY3Rpb24gY2xhc3NpZnkodmFsdWUpIHtcbiAgaWYgKEpzX3R5cGVzLnRlc3QodmFsdWUsIC8qIFN0cmluZyAqLzQpKSB7XG4gICAgcmV0dXJuIC8qIFN0cmluZyAqL0Jsb2NrLl9fKDAsIFt2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBCb29sZWFuICovQmxvY2suX18oMSwgW3ZhbHVlXSk7XG4gIH1cbn1cblxudmFyIFN0cmluZ0Jvb2xlYW5VbmlvbiA9IHtcbiAgc3RyaW5nOiBzdHJpbmcsXG4gICQkYm9vbGVhbjogJCRib29sZWFuLFxuICBjbGFzc2lmeTogY2xhc3NpZnlcbn07XG5cbmZ1bmN0aW9uIGNvbnRlbnRUeXBlKGZpbGVuYW1lKSB7XG4gIHZhciBjb250ZW50VHlwZSQxID0gY2xhc3NpZnkoTWltZVR5cGVzLmNvbnRlbnRUeXBlKGZpbGVuYW1lKSk7XG4gIGlmIChjb250ZW50VHlwZSQxLnRhZykge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRlbnRUeXBlJDFbMF07XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgU3RyaW5nQm9vbGVhblVuaW9uICxcbiAgY29udGVudFR5cGUgLFxuICBcbn1cbi8qIG1pbWUtdHlwZXMgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiLi9ibG9jay5qc1wiO1xuXG5mdW5jdGlvbiBjbGFzc2lmeSh4KSB7XG4gIHZhciB0eSA9IHR5cGVvZiB4O1xuICBpZiAodHkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gLyogSlNVbmRlZmluZWQgKi8zO1xuICB9IGVsc2UgaWYgKHggPT09IG51bGwpIHtcbiAgICByZXR1cm4gLyogSlNOdWxsICovMjtcbiAgfSBlbHNlIGlmICh0eSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiAvKiBKU051bWJlciAqL0Jsb2NrLl9fKDAsIFt4XSk7XG4gIH0gZWxzZSBpZiAodHkgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gLyogSlNTdHJpbmcgKi9CbG9jay5fXygxLCBbeF0pO1xuICB9IGVsc2UgaWYgKHR5ID09PSBcImJvb2xlYW5cIikge1xuICAgIGlmICh4ID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gLyogSlNUcnVlICovMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEpTRmFsc2UgKi8wO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIC8qIEpTRnVuY3Rpb24gKi9CbG9jay5fXygyLCBbeF0pO1xuICB9IGVsc2UgaWYgKHR5ID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuIC8qIEpTT2JqZWN0ICovQmxvY2suX18oMywgW3hdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogSlNTeW1ib2wgKi9CbG9jay5fXyg0LCBbeF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRlc3QoeCwgdikge1xuICBzd2l0Y2ggKHYpIHtcbiAgICBjYXNlIC8qIFVuZGVmaW5lZCAqLzAgOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwidW5kZWZpbmVkXCI7XG4gICAgY2FzZSAvKiBOdWxsICovMSA6XG4gICAgICAgIHJldHVybiB4ID09PSBudWxsO1xuICAgIGNhc2UgLyogQm9vbGVhbiAqLzIgOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xuICAgIGNhc2UgLyogTnVtYmVyICovMyA6XG4gICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIjtcbiAgICBjYXNlIC8qIFN0cmluZyAqLzQgOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3RyaW5nXCI7XG4gICAgY2FzZSAvKiBGdW5jdGlvbiAqLzUgOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcbiAgICBjYXNlIC8qIE9iamVjdCAqLzYgOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwib2JqZWN0XCI7XG4gICAgY2FzZSAvKiBTeW1ib2wgKi83IDpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN5bWJvbFwiO1xuICAgIFxuICB9XG59XG5cbmV4cG9ydCB7XG4gIHRlc3QgLFxuICBjbGFzc2lmeSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBGcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBOb2RlRlNfX0Vycm9yIGZyb20gXCIuL05vZGVGU19fRXJyb3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9Kc19Qcm9taXNlIGZyb20gXCJyZWx1ZGUvc3JjL2pzL1JlbHVkZV9Kc19Qcm9taXNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG1ha2UocGF0aCkge1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0lPLm1hcEVycm9yLCBOb2RlRlNfX0Vycm9yLmZyb21FeGNlcHRpb24sIFJlbHVkZV9Kc19Qcm9taXNlLnRvSU9MYXp5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IEZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0ub24oXCJyZWFkeVwiLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocmVzb2x2ZSwgc3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgIH0pKSk7XG59XG5cbnZhciAkJEVycm9yO1xuXG52YXIgVXRpbHM7XG5cbmV4cG9ydCB7XG4gICQkRXJyb3IgLFxuICBVdGlscyAsXG4gIG1ha2UgLFxuICBcbn1cbi8qIGZzIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcIi4uL1JlbHVkZV9JTy5icy5qc1wiO1xuXG5mdW5jdGlvbiB0b0lPKHByb21pc2UpIHtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UudGhlbigoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3ZdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShDdXJyeS5fMShvbkRvbmUsIC8qIEVycm9yICovQmxvY2suX18oMSwgW2VdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiB0b0lPTGF6eShydW5Qcm9taXNlKSB7XG4gIHJldHVybiBSZWx1ZGVfSU8uYXN5bmMoKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IEN1cnJ5Ll8xKHJ1blByb21pc2UsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbdl0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEN1cnJ5Ll8xKG9uRG9uZSwgLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZV0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGZyb21JT1dpdGhSZXN1bHQoaW8pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAocmVzb2x2ZSwgcGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0lPLnVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpbyk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gZnJvbUlPKGlvKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8udW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGlvKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBmcm9tSU9FeG4oaW8pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy51bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChyZXN1bHRbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgaW8pO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGZyb21JT0pzRXhuKGlvKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8udW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGlvKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5leHBvcnQge1xuICB0b0lPICxcbiAgdG9JT0xhenkgLFxuICBmcm9tSU9XaXRoUmVzdWx0ICxcbiAgZnJvbUlPICxcbiAgZnJvbUlPRXhuICxcbiAgZnJvbUlPSnNFeG4gLFxuICBcbn1cbi8qIFJlbHVkZV9JTyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgTWltZVR5cGVzIGZyb20gXCIuLi9iaW5kaW5ncy9NaW1lVHlwZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIE5vZGVGU19fU3RhdCBmcm9tIFwibm9kZS1mcy1icy9zcmMvTm9kZUZTX19TdGF0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBOb2RlRlNfX1JlYWRTdHJlYW0gZnJvbSBcIm5vZGUtZnMtYnMvc3JjL05vZGVGU19fUmVhZFN0cmVhbS5icy5qc1wiO1xuXG5mdW5jdGlvbiBtYWtlUmVzcG9uc2UoZGlyZWN0b3J5LCBmaWxlbmFtZSkge1xuICB2YXIgcGF0aCA9IFBhdGguam9pbihfX2Rpcm5hbWUsIGRpcmVjdG9yeSwgZmlsZW5hbWUpO1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0lPLm1hcEVycm9yLCAoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9JTy5mbGF0TWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG10aW1lID0gcGFyYW0ubXRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0gcGFyYW0uc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy5tYXAoKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogU3RyZWFtICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdHJlYW0gKi9zdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHR5cGVfICovTWltZVR5cGVzLmNvbnRlbnRUeXBlKGZpbGVuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoICovc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbW9kaWZpZWQgKi9tdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBOb2RlRlNfX1JlYWRTdHJlYW0ubWFrZShwYXRoKSk7XG4gICAgICAgICAgICAgICAgICB9KSwgTm9kZUZTX19TdGF0LnN0YXQocGF0aCkpKTtcbn1cblxuZXhwb3J0IHtcbiAgbWFrZVJlc3BvbnNlICxcbiAgXG59XG4vKiBwYXRoIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgRnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIE5vZGVGU19fRXJyb3IgZnJvbSBcIi4vTm9kZUZTX19FcnJvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1Jlc3VsdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfUmVzdWx0LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXQocGF0aCkge1xuICByZXR1cm4gUmVsdWRlX0lPLmFzeW5jKChmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIEZzLnN0YXQocGF0aCwgKGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHJlc29sdmUsIEN1cnJ5Ll8yKFJlbHVkZV9SZXN1bHQubWFwRXJyb3IsIE5vZGVGU19fRXJyb3IuZnJvbUV4Y2VwdGlvbiwgUmVsdWRlX1Jlc3VsdC5mbGlwKFJlbHVkZV9SZXN1bHQuZnJvbU9wdGlvbihkYXRhLCBlcnJvciA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IENhbWxfb3B0aW9uLnNvbWUoZXJyb3IpKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyICQkRXJyb3I7XG5cbmV4cG9ydCB7XG4gICQkRXJyb3IgLFxuICBzdGF0ICxcbiAgXG59XG4vKiBmcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vYmluZGluZ3MvSFRUUC5icy5qc1wiO1xuaW1wb3J0ICogYXMgSHR0cCBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0ICogYXMgUm91dGVyIGZyb20gXCIuL1JvdXRlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgJCRSZXNwb25zZSBmcm9tIFwiLi9SZXNwb25zZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFBhZ2VfX1JlbmRlciBmcm9tIFwiLi92aWV3cy9QYWdlX19SZW5kZXIuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgQWJvdXRDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL0Fib3V0Q29udHJvbGxlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgRW50cnlDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL0VudHJ5Q29udHJvbGxlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgSW5kZXhDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL0luZGV4Q29udHJvbGxlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RhdGljQ29udHJvbGxlciBmcm9tIFwiLi9jb250cm9sbGVycy9TdGF0aWNDb250cm9sbGVyLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBUYWdTZWFyY2hDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL1RhZ1NlYXJjaENvbnRyb2xsZXIuYnMuanNcIjtcblxuZnVuY3Rpb24gc3BsaXRVUkxTZWdtZW50cyh1cmwpIHtcbiAgcmV0dXJuIHVybC5zbGljZSgxKS5zcGxpdChcIi9cIikubWFwKChmdW5jdGlvbiAoc2VnbWVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzZWdtZW50KS50cmltKCk7XG4gICAgICAgICAgICAgICAgfSkpLmZpbHRlcigoZnVuY3Rpb24gKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VnbWVudC5sZW5ndGggPj0gMTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBtYWtlUmVzcG9uc2UocGFyYW0sIHJvdXRlKSB7XG4gIHZhciBlbnRyaWVzID0gcGFyYW0uZW50cmllcztcbiAgaWYgKHR5cGVvZiByb3V0ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBBYm91dENvbnRyb2xsZXIubWFrZVJlc3BvbnNlKHBhcmFtLmFib3V0KTtcbiAgfVxuICBzd2l0Y2ggKHJvdXRlLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIEluZGV4ICovMCA6XG4gICAgICAgIHJldHVybiBJbmRleENvbnRyb2xsZXIubWFrZVJlc3BvbnNlKGVudHJpZXMsIHJvdXRlWy8qIHBhZ2UgKi8wXSk7XG4gICAgY2FzZSAvKiBUYWdTZWFyY2ggKi8xIDpcbiAgICAgICAgcmV0dXJuIFRhZ1NlYXJjaENvbnRyb2xsZXIubWFrZVJlc3BvbnNlKGVudHJpZXMsIHJvdXRlWy8qIHNsdWcgKi8wXSwgcm91dGVbLyogcGFnZSAqLzFdKTtcbiAgICBjYXNlIC8qIEVudHJ5ICovMiA6XG4gICAgICAgIHJldHVybiBFbnRyeUNvbnRyb2xsZXIubWFrZVJlc3BvbnNlKGVudHJpZXMsIHJvdXRlWy8qIHllYXIgKi8wXSwgcm91dGVbLyogbW9udGggKi8xXSwgcm91dGVbLyogZGF5ICovMl0sIHJvdXRlWy8qIHNsdWcgKi8zXSk7XG4gICAgY2FzZSAvKiBTdGF0aWMgKi8zIDpcbiAgICAgICAgcmV0dXJuIFN0YXRpY0NvbnRyb2xsZXIubWFrZVJlc3BvbnNlKHJvdXRlWy8qIGRpcmVjdG9yeSAqLzBdLCByb3V0ZVsvKiBmaWxlbmFtZSAqLzFdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlKHNpdGVOYW1lLCBkYXRhKSB7XG4gIHJldHVybiBIdHRwLmNyZWF0ZVNlcnZlcigoZnVuY3Rpb24gKHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IFJlbHVkZV9PcHRpb24uZ2V0T3JFbHNlKFwiL1wiLCBDYW1sX29wdGlvbi51bmRlZmluZWRfdG9fb3B0KHJlcXVlc3QudXJsKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy51bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8udGFwKChmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLm9uKFwiY2xvc2VcIiwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHVzID0gcmVzcG9uc2Uuc3RhdHVzQ29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1zID0gRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiXCIgKyAoU3RyaW5nKHN0YXR1cykgKyAoXCIgXCIgKyAoU3RyaW5nKHVybCkgKyAoXCIgXCIgKyAoU3RyaW5nKG1zKSArIFwibXNcIikpKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIVFRQLiQkUmVzcG9uc2Uuc2V0U3RhdHVzQ29kZSgyMDAsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldENvbnRlbnRUeXBlKFJlbHVkZV9PcHRpb24uZ2V0T3JFbHNlKFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsIHJlc1svKiB0eXBlXyAqLzFdKSkocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIVFRQLiQkUmVzcG9uc2Uuc2V0Q29udGVudExlbmd0aChyZXNbLyogbGVuZ3RoICovMl0pKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldExhc3RNb2RpZmllZChyZXNbLyogbW9kaWZpZWQgKi8zXSkocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNbLyogc3RyZWFtICovMF0ucGlwZShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9IFBhZ2VfX1JlbmRlci5yZW5kZXIoc2l0ZU5hbWUsIHJlc1svKiBkYXRhICovMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldFN0YXR1c0NvZGUocmVzWy8qIHN0YXR1cyAqLzFdLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIVFRQLiQkUmVzcG9uc2Uuc2V0Q29udGVudFR5cGUoXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLThcIikocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldENvbnRlbnRMZW5ndGgobGVuZ3RoKShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5lbmQoYm9keSwgXCJ1dGYtOFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShSZWx1ZGVfSU8uaGFuZGxlRXJyb3IoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCRSZXNwb25zZS5ub3RGb3VuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVJlc3BvbnNlKGRhdGEsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLmZyb21PcHRpb24oKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSb3V0ZXIucm91dGUoc3BsaXRVUkxTZWdtZW50cyh1cmwpKSkpKSkpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGxpc3RlbihwYXJhbSkge1xuICBwYXJhbS5saXN0ZW4oNTAwMCwgXCIxMjcuMC4wLjFcIiwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiTGlzdGVuaW5nXCIpO1xuICAgICAgICAgIFxuICAgICAgICB9KSk7XG4gIFxufVxuXG5leHBvcnQge1xuICBzcGxpdFVSTFNlZ21lbnRzICxcbiAgbWFrZVJlc3BvbnNlICxcbiAgbWFrZSAsXG4gIGxpc3RlbiAsXG4gIFxufVxuLyogaHR0cCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5cbmZ1bmN0aW9uIG1ha2VSZXNwb25zZShhYm91dCkge1xuICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFsvKiBQYWdlICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgIC8qIGRhdGEgKi8vKiBBYm91dCAqL0Jsb2NrLl9fKDIsIFt7XG4gICAgICAgICAgICAgICAgICAgICAgdGV4dDogYWJvdXRcbiAgICAgICAgICAgICAgICAgICAgfV0pLFxuICAgICAgICAgICAgICAgIC8qIHN0YXR1cyAqLzIwMFxuICAgICAgICAgICAgICBdKV0pO1xufVxuXG5leHBvcnQge1xuICBtYWtlUmVzcG9uc2UgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4uL0NvbnN0YW50cy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9pbnQzMiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2ludDMyLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9MaXN0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcblxuZnVuY3Rpb24gbWFrZVJlc3BvbnNlKGVudHJpZXMsIHBhZ2UpIHtcbiAgcmV0dXJuIFJlbHVkZV9JTy5mcm9tT3B0aW9uKChmdW5jdGlvbiAocHJpbSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSwgQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uLm1hcCgoZnVuY3Rpb24gKHBhZ2VFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFBhZ2UgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRhdGEgKi8vKiBJbmRleCAqL0Jsb2NrLl9fKDAsIFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiBDdXJyeS5fMShSZWx1ZGVfTGlzdC5sZW5ndGgsIGVudHJpZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzOiBSZWx1ZGVfTGlzdC5tYXAoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBlbnRyeS5kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBlbnRyeS50ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShwYWdlRW50cmllcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RhdHVzICovMjAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9PcHRpb24uZmlsdGVyKChmdW5jdGlvbiAocGFnZUVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoUmVsdWRlX0xpc3QubGVuZ3RoLCBwYWdlRW50cmllcykgIT09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShSZWx1ZGVfTGlzdC50YWtlKENvbnN0YW50cy5lbnRyaWVzUGVyUGFnZSwgcGFyYW1bMV0pKSk7XG4gICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0xpc3Quc3BsaXRBdChDYW1sX2ludDMyLmltdWwocGFnZSAtIDEgfCAwLCBDb25zdGFudHMuZW50cmllc1BlclBhZ2UpLCBSZWx1ZGVfTGlzdC5zb3J0QnkoKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9JbnQuY29tcGFyZSwgYi5kYXRlLmdldFRpbWUoKSwgYS5kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBlbnRyaWVzKSkpKTtcbn1cblxuZXhwb3J0IHtcbiAgbWFrZVJlc3BvbnNlICxcbiAgXG59XG4vKiBSZWx1ZGVfSU8gTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5cbnZhciBlbnRyaWVzUGVyUGFnZSA9IDEwO1xuXG5leHBvcnQge1xuICBlbnRyaWVzUGVyUGFnZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLi9VdGlscy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gXCIuLi9Db25zdGFudHMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfaW50MzIgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9pbnQzMi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0ludCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfTGlzdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbiBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfT3B0aW9uLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG1ha2VSZXNwb25zZShlbnRyaWVzLCBzbHVnLCBwYWdlKSB7XG4gIHJldHVybiBSZWx1ZGVfSU8uZnJvbU9wdGlvbigoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gcGFyYW1bMl07XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZEVudHJpZXMgPSBwYXJhbVswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAocGFnZUVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUGFnZSAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZGF0YSAqLy8qIFRhZ1NlYXJjaCAqL0Jsb2NrLl9fKDEsIFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogdGFnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogQ3VycnkuXzEoUmVsdWRlX0xpc3QubGVuZ3RoLCBmaWx0ZXJlZEVudHJpZXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzOiBSZWx1ZGVfTGlzdC5tYXAoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBlbnRyeS5kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBlbnRyeS50ZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShwYWdlRW50cmllcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogc3RhdHVzICovMjAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9PcHRpb24uZmlsdGVyKChmdW5jdGlvbiAocGFnZUVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoUmVsdWRlX0xpc3QubGVuZ3RoLCBwYWdlRW50cmllcykgIT09IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShSZWx1ZGVfTGlzdC50YWtlKENvbnN0YW50cy5lbnRyaWVzUGVyUGFnZSwgcGFyYW1bMV0pKSk7XG4gICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gcGFyYW1bMV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRFbnRyaWVzID0gcGFyYW1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRFbnRyaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9MaXN0LnNwbGl0QXQoQ2FtbF9pbnQzMi5pbXVsKHBhZ2UgLSAxIHwgMCwgQ29uc3RhbnRzLmVudHJpZXNQZXJQYWdlKSwgUmVsdWRlX0xpc3Quc29ydEJ5KChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihSZWx1ZGVfSW50LmNvbXBhcmUsIGIuZGF0ZS5nZXRUaW1lKCksIGEuZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZmlsdGVyZWRFbnRyaWVzKSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfTGlzdC5mb2xkTGVmdCgoZnVuY3Rpb24gKGFjY3VtdWxhdG9yLCBlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IEN1cnJ5Ll8yKFJlbHVkZV9MaXN0LmZpbmQsIChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShVdGlscy5zbHVnKHVuZGVmaW5lZCksIHRhZykgPT09IHNsdWc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZW50cnkudGFncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjY3VtdWxhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY3VtdWxhdG9yWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkKShlbnRyaWVzKSkpKTtcbn1cblxuZXhwb3J0IHtcbiAgbWFrZVJlc3BvbnNlICxcbiAgXG59XG4vKiBVdGlscyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0ludCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcblxuZnVuY3Rpb24gcm91dGUoc2VnbWVudHMpIHtcbiAgdmFyIGxlbiA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKGxlbiA+PSA1KSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMCA6XG4gICAgICAgIHJldHVybiAvKiBJbmRleCAqL0Jsb2NrLl9fKDAsIFsvKiBwYWdlICovMV0pO1xuICAgIGNhc2UgMSA6XG4gICAgICAgIHZhciBwYWdlID0gc2VnbWVudHNbMF07XG4gICAgICAgIGlmIChwYWdlID09PSBcImFib3V0XCIpIHtcbiAgICAgICAgICByZXR1cm4gLyogQWJvdXQgKi8wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uLm1hcCgoZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBJbmRleCAqL0Jsb2NrLl9fKDAsIFsvKiBwYWdlICovcGFnZV0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uLmZpbHRlcigoZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlID49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKFJlbHVkZV9JbnQuZnJvbVN0cmluZyhwYWdlKSkpO1xuICAgICAgICB9XG4gICAgY2FzZSAyIDpcbiAgICAgICAgdmFyIGRpcmVjdG9yeSA9IHNlZ21lbnRzWzBdO1xuICAgICAgICBzd2l0Y2ggKGRpcmVjdG9yeSkge1xuICAgICAgICAgIGNhc2UgXCJ0YWdcIiA6XG4gICAgICAgICAgICAgIHZhciBzbHVnID0gc2VnbWVudHNbMV07XG4gICAgICAgICAgICAgIHJldHVybiAvKiBUYWdTZWFyY2ggKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBzbHVnICovc2x1ZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHBhZ2UgKi8xXG4gICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgY2FzZSBcInN0YXRpY1wiIDpcbiAgICAgICAgICBjYXNlIFwidXBsb2Fkc1wiIDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpbGVuYW1lID0gc2VnbWVudHNbMV07XG4gICAgICAgIHJldHVybiAvKiBTdGF0aWMgKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICAgICAgICAvKiBkaXJlY3RvcnkgKi9kaXJlY3RvcnksXG4gICAgICAgICAgICAgICAgICAvKiBmaWxlbmFtZSAqL2ZpbGVuYW1lXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAzIDpcbiAgICAgICAgdmFyIG1hdGNoID0gc2VnbWVudHNbMF07XG4gICAgICAgIGlmIChtYXRjaCAhPT0gXCJ0YWdcIikge1xuICAgICAgICAgIHJldHVybiA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNsdWckMSA9IHNlZ21lbnRzWzFdO1xuICAgICAgICB2YXIgcGFnZSQxID0gc2VnbWVudHNbMl07XG4gICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uLm1hcCgoZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogVGFnU2VhcmNoICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzbHVnICovc2x1ZyQxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBwYWdlICovcGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uLmZpbHRlcigoZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZSA+PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkoUmVsdWRlX0ludC5mcm9tU3RyaW5nKHBhZ2UkMSkpKTtcbiAgICBjYXNlIDQgOlxuICAgICAgICB2YXIgeWVhciA9IHNlZ21lbnRzWzBdO1xuICAgICAgICB2YXIgbW9udGggPSBzZWdtZW50c1sxXTtcbiAgICAgICAgdmFyIGRheSA9IHNlZ21lbnRzWzJdO1xuICAgICAgICB2YXIgc2x1ZyQyID0gc2VnbWVudHNbM107XG4gICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVudHJ5ICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiB5ZWFyICovcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1vbnRoICovcGFyYW1bMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRheSAqL3BhcmFtWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzbHVnICovc2x1ZyQyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBwYXJhbVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJhbVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9PcHRpb24uZmlsdGVyKChmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheSA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF5IDw9IDMxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkoUmVsdWRlX0ludC5mcm9tU3RyaW5nKGRheSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfT3B0aW9uLmZsYXRNYXAsIChmdW5jdGlvbiAoeWVhcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHllYXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uLmZpbHRlcigoZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb250aCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoIDw9IDEyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKFJlbHVkZV9JbnQuZnJvbVN0cmluZyhtb250aCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0ludC5mcm9tU3RyaW5nKHllYXIpKSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGJ1aWxkKHJvdXRlKSB7XG4gIGlmICh0eXBlb2Ygcm91dGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCIvYWJvdXRcIjtcbiAgfVxuICBzd2l0Y2ggKHJvdXRlLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIEluZGV4ICovMCA6XG4gICAgICAgIHZhciBwYWdlID0gcm91dGVbLyogcGFnZSAqLzBdO1xuICAgICAgICBpZiAocGFnZSAhPT0gMSkge1xuICAgICAgICAgIHJldHVybiBcIi9cIiArIChTdHJpbmcocGFnZSkgKyBcIlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCIvXCI7XG4gICAgICAgIH1cbiAgICBjYXNlIC8qIFRhZ1NlYXJjaCAqLzEgOlxuICAgICAgICB2YXIgcGFnZSQxID0gcm91dGVbLyogcGFnZSAqLzFdO1xuICAgICAgICB2YXIgc2x1ZyA9IHJvdXRlWy8qIHNsdWcgKi8wXTtcbiAgICAgICAgaWYgKHBhZ2UkMSAhPT0gMSkge1xuICAgICAgICAgIHJldHVybiBcIi90YWcvXCIgKyAoU3RyaW5nKHNsdWcpICsgKFwiL1wiICsgKFN0cmluZyhwYWdlJDEpICsgXCJcIikpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCIvdGFnL1wiICsgKFN0cmluZyhzbHVnKSArIFwiXCIpO1xuICAgICAgICB9XG4gICAgY2FzZSAvKiBFbnRyeSAqLzIgOlxuICAgICAgICByZXR1cm4gXCIvXCIgKyAoU3RyaW5nKHJvdXRlWy8qIHllYXIgKi8wXSkgKyAoXCIvXCIgKyAoU3RyaW5nKHJvdXRlWy8qIG1vbnRoICovMV0pICsgKFwiL1wiICsgKFN0cmluZyhyb3V0ZVsvKiBkYXkgKi8yXSkgKyAoXCIvXCIgKyAoU3RyaW5nKHJvdXRlWy8qIHNsdWcgKi8zXSkgKyBcIlwiKSkpKSkpKTtcbiAgICBjYXNlIC8qIFN0YXRpYyAqLzMgOlxuICAgICAgICByZXR1cm4gXCIvXCIgKyAoU3RyaW5nKHJvdXRlWy8qIGRpcmVjdG9yeSAqLzBdKSArIChcIi9cIiArIChTdHJpbmcocm91dGVbLyogZmlsZW5hbWUgKi8xXSkgKyBcIlwiKSkpO1xuICAgIFxuICB9XG59XG5cbmV4cG9ydCB7XG4gIHJvdXRlICxcbiAgYnVpbGQgLFxuICBcbn1cbi8qIFJlbHVkZV9JbnQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDTEkgZnJvbSBcIi4vQ0xJLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBQYXJzZSBmcm9tIFwiLi9QYXJzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgU2VydmVyIGZyb20gXCIuL1NlcnZlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuXG5mdW5jdGlvbiBwcmludEVycm9yKGVycm9yKSB7XG4gIHZhciBtZXNzYWdlO1xuICBpZiAoZXJyb3IudGFnKSB7XG4gICAgdmFyIG1hdGNoID0gZXJyb3JbMF07XG4gICAgc3dpdGNoIChtYXRjaC50YWcgfCAwKSB7XG4gICAgICBjYXNlIC8qIFJlYWREaXJlY3RvcnlFcnJvciAqLzAgOlxuICAgICAgICAgIHN3aXRjaCAobWF0Y2hbMF0udGFnIHwgMCkge1xuICAgICAgICAgICAgY2FzZSAvKiBOb1N1Y2hGaWxlT3JEaXJlY3RvcnkgKi83IDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJFbnRyaWVzIHBhdGggZG9lcyBub3QgZXhpc3RcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgLyogTm90QURpcmVjdG9yeSAqLzggOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVudHJpZXMgcGF0aCBpcyBub3QgYSBkaXJlY3RvcnlcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIHJlYWRpbmcgZW50cmllcyBkaXJlY3RvcnlcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIC8qIFJlYWRFbnRyeUVycm9yICovMSA6XG4gICAgICAgICAgbWVzc2FnZSA9IFwiRXJyb3IgcmVhZGluZyBlbnRyeTogXCIgKyBtYXRjaFsvKiBuYW1lICovMF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIC8qIFBhcnNlRXJyb3IgKi8yIDpcbiAgICAgICAgICBtZXNzYWdlID0gXCJFcnJvciBwYXJzaW5nIGVudHJ5OiBcIiArIG1hdGNoWy8qIG5hbWUgKi8wXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGVycm9yWzBdLnRhZyB8IDApIHtcbiAgICAgIGNhc2UgLyogSXNBRGlyZWN0b3J5ICovNSA6XG4gICAgICAgICAgbWVzc2FnZSA9IFwiQWJvdXQgcGF0aCBpcyBhIGRpcmVjdG9yeVwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAvKiBOb1N1Y2hGaWxlT3JEaXJlY3RvcnkgKi83IDpcbiAgICAgICAgICBtZXNzYWdlID0gXCJBYm91dCBmaWxlIGRvZXMgbm90IGV4aXN0XCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBtZXNzYWdlID0gXCJFcnJvciByZWFkaW5nIGFib3V0IGZpbGVcIjtcbiAgICB9XG4gIH1cbiAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgXG59XG5cbmZ1bmN0aW9uIG1haW4ocGFyYW0pIHtcbiAgdmFyIG1hdGNoID0gQ0xJLnBhcnNlQXJndW1lbnRzKHVuZGVmaW5lZCk7XG4gIHZhciBzaXRlTmFtZSA9IG1hdGNoLnNpdGVOYW1lO1xuICByZXR1cm4gUmVsdWRlX0lPLnVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocHJpbSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLmJpdGFwKFNlcnZlci5saXN0ZW4sIHByaW50RXJyb3IsIFJlbHVkZV9JTy5tYXAoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2VydmVyLm1ha2Uoc2l0ZU5hbWUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBQYXJzZS5yZWFkQW5kUGFyc2VBbGwobWF0Y2guYWJvdXRQYXRoLCBtYXRjaC5lbnRyaWVzRGlyZWN0b3J5KSkpKTtcbn1cblxubWFpbih1bmRlZmluZWQpO1xuXG5leHBvcnQge1xuICBwcmludEVycm9yICxcbiAgbWFpbiAsXG4gIFxufVxuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iXSwic291cmNlUm9vdCI6IiJ9