!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=239)}([function(e,n,t){"use strict";e.exports=t(100)},function(e,n){e.exports=require("util")},function(e,n,t){try{var r=t(1);if("function"!=typeof r.inherits)throw"";e.exports=r.inherits}catch(n){e.exports=t(144)}},function(e,n,t){"use strict";e.exports=function(e){return i.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,i=/\s/},function(e,n,t){"use strict";e.exports.EOL="\n",e.exports.SUPPRESS="==SUPPRESS==",e.exports.OPTIONAL="?",e.exports.ZERO_OR_MORE="*",e.exports.ONE_OR_MORE="+",e.exports.PARSER="A...",e.exports.REMAINDER="...",e.exports._UNRECOGNIZED_ARGS_ATTR="_unrecognized_args"},function(e,n){e.exports=require("fs")},function(e,n){e.exports=function(){for(var e={},n=0;n<arguments.length;n++){var r=arguments[n];for(var i in r)t.call(r,i)&&(e[i]=r[i])}return e};var t=Object.prototype.hasOwnProperty},function(e,n){e.exports=require("stream")},function(e,n){function t(e){return Object.prototype.toString.call(e)}n.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===t(e)},n.isBoolean=function(e){return"boolean"==typeof e},n.isNull=function(e){return null===e},n.isNullOrUndefined=function(e){return null==e},n.isNumber=function(e){return"number"==typeof e},n.isString=function(e){return"string"==typeof e},n.isSymbol=function(e){return"symbol"==typeof e},n.isUndefined=function(e){return void 0===e},n.isRegExp=function(e){return"[object RegExp]"===t(e)},n.isObject=function(e){return"object"==typeof e&&null!==e},n.isDate=function(e){return"[object Date]"===t(e)},n.isError=function(e){return"[object Error]"===t(e)||e instanceof Error},n.isFunction=function(e){return"function"==typeof e},n.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},n.isBuffer=Buffer.isBuffer},function(e,n){e.exports=require("path")},function(e,n,t){"use strict";var r=t(4),i=e.exports=function(e){if(e=e||{},this.optionStrings=e.optionStrings||[],this.dest=e.dest,this.nargs=void 0!==e.nargs?e.nargs:null,this.constant=void 0!==e.constant?e.constant:null,this.defaultValue=e.defaultValue,this.type=void 0!==e.type?e.type:null,this.choices=void 0!==e.choices?e.choices:null,this.required=void 0!==e.required&&e.required,this.help=void 0!==e.help?e.help:null,this.metavar=void 0!==e.metavar?e.metavar:null,!(this.optionStrings instanceof Array))throw new Error("optionStrings should be an array");if(void 0!==this.required&&"boolean"!=typeof this.required)throw new Error("required should be a boolean")};i.prototype.getName=function(){return this.optionStrings.length>0?this.optionStrings.join("/"):null!==this.metavar&&this.metavar!==r.SUPPRESS?this.metavar:void 0!==this.dest&&this.dest!==r.SUPPRESS?this.dest:null},i.prototype.isOptional=function(){return!this.isPositional()},i.prototype.isPositional=function(){return 0===this.optionStrings.length},i.prototype.call=function(){throw new Error(".call() not defined")}},function(e,n,t){"use strict";t.r(n),t.d(n,"cache",(function(){return B})),t.d(n,"css",(function(){return I})),t.d(n,"cx",(function(){return q})),t.d(n,"flush",(function(){return R})),t.d(n,"getRegisteredStyles",(function(){return N})),t.d(n,"hydrate",(function(){return T})),t.d(n,"injectGlobal",(function(){return P})),t.d(n,"keyframes",(function(){return D})),t.d(n,"merge",(function(){return L})),t.d(n,"sheet",(function(){return z}));var r=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var n=e.prototype;return n.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var n,t=function(e){var n=document.createElement("style");return n.setAttribute("data-emotion",e.key),void 0!==e.nonce&&n.setAttribute("nonce",e.nonce),n.appendChild(document.createTextNode("")),n}(this);n=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(t,n),this.tags.push(t)}var r=this.tags[this.tags.length-1];if(this.isSpeedy){var i=function(e){if(e.sheet)return e.sheet;for(var n=0;n<document.styleSheets.length;n++)if(document.styleSheets[n].ownerNode===e)return document.styleSheets[n]}(r);try{var a=105===e.charCodeAt(1)&&64===e.charCodeAt(0);i.insertRule(e,a?0:i.cssRules.length)}catch(e){0}}else r.appendChild(document.createTextNode(e));this.ctr++},n.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}();var i=function(e){function n(e,n,r){var i=n.trim().split(m);n=i;var a=i.length,o=e.length;switch(o){case 0:case 1:var s=0;for(e=0===o?"":e[0]+" ";s<a;++s)n[s]=t(e,n[s],r).trim();break;default:var c=s=0;for(n=[];s<a;++s)for(var u=0;u<o;++u)n[c++]=t(e[u]+" ",i[s],r).trim()}return n}function t(e,n,t){var r=n.charCodeAt(0);switch(33>r&&(r=(n=n.trim()).charCodeAt(0)),r){case 38:return n.replace(h,"$1"+e.trim());case 58:return e.trim()+n.replace(h,"$1"+e.trim());default:if(0<1*t&&0<n.indexOf("\f"))return n.replace(h,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+n}function r(e,n,t,a){var o=e+";",s=2*n+3*t+4*a;if(944===s){e=o.indexOf(":",9)+1;var c=o.substring(e,o.length-1).trim();return c=o.substring(0,e).trim()+c+";",1===O||2===O&&i(c,1)?"-webkit-"+c+c:c}if(0===O||2===O&&!i(o,1))return o;switch(s){case 1015:return 97===o.charCodeAt(10)?"-webkit-"+o+o:o;case 951:return 116===o.charCodeAt(3)?"-webkit-"+o+o:o;case 963:return 110===o.charCodeAt(5)?"-webkit-"+o+o:o;case 1009:if(100!==o.charCodeAt(4))break;case 969:case 942:return"-webkit-"+o+o;case 978:return"-webkit-"+o+"-moz-"+o+o;case 1019:case 983:return"-webkit-"+o+"-moz-"+o+"-ms-"+o+o;case 883:if(45===o.charCodeAt(8))return"-webkit-"+o+o;if(0<o.indexOf("image-set(",11))return o.replace(E,"$1-webkit-$2")+o;break;case 932:if(45===o.charCodeAt(4))switch(o.charCodeAt(5)){case 103:return"-webkit-box-"+o.replace("-grow","")+"-webkit-"+o+"-ms-"+o.replace("grow","positive")+o;case 115:return"-webkit-"+o+"-ms-"+o.replace("shrink","negative")+o;case 98:return"-webkit-"+o+"-ms-"+o.replace("basis","preferred-size")+o}return"-webkit-"+o+"-ms-"+o+o;case 964:return"-webkit-"+o+"-ms-flex-"+o+o;case 1023:if(99!==o.charCodeAt(8))break;return"-webkit-box-pack"+(c=o.substring(o.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+o+"-ms-flex-pack"+c+o;case 1005:return f.test(o)?o.replace(p,":-webkit-")+o.replace(p,":-moz-")+o:o;case 1e3:switch(n=(c=o.substring(13).trim()).indexOf("-")+1,c.charCodeAt(0)+c.charCodeAt(n)){case 226:c=o.replace(b,"tb");break;case 232:c=o.replace(b,"tb-rl");break;case 220:c=o.replace(b,"lr");break;default:return o}return"-webkit-"+o+"-ms-"+c+o;case 1017:if(-1===o.indexOf("sticky",9))break;case 975:switch(n=(o=e).length-10,s=(c=(33===o.charCodeAt(n)?o.substring(0,n):o).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|c.charCodeAt(7))){case 203:if(111>c.charCodeAt(8))break;case 115:o=o.replace(c,"-webkit-"+c)+";"+o;break;case 207:case 102:o=o.replace(c,"-webkit-"+(102<s?"inline-":"")+"box")+";"+o.replace(c,"-webkit-"+c)+";"+o.replace(c,"-ms-"+c+"box")+";"+o}return o+";";case 938:if(45===o.charCodeAt(5))switch(o.charCodeAt(6)){case 105:return c=o.replace("-items",""),"-webkit-"+o+"-webkit-box-"+c+"-ms-flex-"+c+o;case 115:return"-webkit-"+o+"-ms-flex-item-"+o.replace(k,"")+o;default:return"-webkit-"+o+"-ms-flex-line-pack"+o.replace("align-content","").replace(k,"")+o}break;case 973:case 989:if(45!==o.charCodeAt(3)||122===o.charCodeAt(4))break;case 931:case 953:if(!0===S.test(e))return 115===(c=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),n,t,a).replace(":fill-available",":stretch"):o.replace(c,"-webkit-"+c)+o.replace(c,"-moz-"+c.replace("fill-",""))+o;break;case 962:if(o="-webkit-"+o+(102===o.charCodeAt(5)?"-ms-"+o:"")+o,211===t+a&&105===o.charCodeAt(13)&&0<o.indexOf("transform",10))return o.substring(0,o.indexOf(";",27)+1).replace(d,"$1-webkit-$2")+o}return o}function i(e,n){var t=e.indexOf(1===n?":":"{"),r=e.substring(0,3!==n?t:10);return t=e.substring(t+1,e.length-1),R(2!==n?r:r.replace(_,"$1"),t,n)}function a(e,n){var t=r(n,n.charCodeAt(0),n.charCodeAt(1),n.charCodeAt(2));return t!==n+";"?t.replace(w," or ($1)").substring(4):"("+n+")"}function o(e,n,t,r,i,a,o,s,u,l){for(var p,f=0,d=n;f<F;++f)switch(p=j[f].call(c,e,d,t,r,i,a,o,s,u,l)){case void 0:case!1:case!0:case null:break;default:d=p}if(d!==n)return d}function s(e){return void 0!==(e=e.prefix)&&(R=null,e?"function"!=typeof e?O=1:(O=2,R=e):O=0),s}function c(e,t){var s=e;if(33>s.charCodeAt(0)&&(s=s.trim()),s=[s],0<F){var c=o(-1,t,s,s,$,A,0,0,0,0);void 0!==c&&"string"==typeof c&&(t=c)}var p=function e(t,s,c,p,f){for(var d,m,h,b,w,k=0,_=0,S=0,E=0,j=0,R=0,q=h=d=0,L=0,N=0,P=0,D=0,I=c.length,z=I-1,B="",U="",H="",G="";L<I;){if(m=c.charCodeAt(L),L===z&&0!==_+E+S+k&&(0!==_&&(m=47===_?10:47),E=S=k=0,I++,z++),0===_+E+S+k){if(L===z&&(0<N&&(B=B.replace(l,"")),0<B.trim().length)){switch(m){case 32:case 9:case 59:case 13:case 10:break;default:B+=c.charAt(L)}m=59}switch(m){case 123:for(d=(B=B.trim()).charCodeAt(0),h=1,D=++L;L<I;){switch(m=c.charCodeAt(L)){case 123:h++;break;case 125:h--;break;case 47:switch(m=c.charCodeAt(L+1)){case 42:case 47:e:{for(q=L+1;q<z;++q)switch(c.charCodeAt(q)){case 47:if(42===m&&42===c.charCodeAt(q-1)&&L+2!==q){L=q+1;break e}break;case 10:if(47===m){L=q+1;break e}}L=q}}break;case 91:m++;case 40:m++;case 34:case 39:for(;L++<z&&c.charCodeAt(L)!==m;);}if(0===h)break;L++}switch(h=c.substring(D,L),0===d&&(d=(B=B.replace(u,"").trim()).charCodeAt(0)),d){case 64:switch(0<N&&(B=B.replace(l,"")),m=B.charCodeAt(1)){case 100:case 109:case 115:case 45:N=s;break;default:N=M}if(D=(h=e(s,N,h,m,f+1)).length,0<F&&(w=o(3,h,N=n(M,B,P),s,$,A,D,m,f,p),B=N.join(""),void 0!==w&&0===(D=(h=w.trim()).length)&&(m=0,h="")),0<D)switch(m){case 115:B=B.replace(y,a);case 100:case 109:case 45:h=B+"{"+h+"}";break;case 107:h=(B=B.replace(g,"$1 $2"))+"{"+h+"}",h=1===O||2===O&&i("@"+h,3)?"@-webkit-"+h+"@"+h:"@"+h;break;default:h=B+h,112===p&&(U+=h,h="")}else h="";break;default:h=e(s,n(s,B,P),h,p,f+1)}H+=h,h=P=N=q=d=0,B="",m=c.charCodeAt(++L);break;case 125:case 59:if(1<(D=(B=(0<N?B.replace(l,""):B).trim()).length))switch(0===q&&(d=B.charCodeAt(0),45===d||96<d&&123>d)&&(D=(B=B.replace(" ",":")).length),0<F&&void 0!==(w=o(1,B,s,t,$,A,U.length,p,f,p))&&0===(D=(B=w.trim()).length)&&(B="\0\0"),d=B.charCodeAt(0),m=B.charCodeAt(1),d){case 0:break;case 64:if(105===m||99===m){G+=B+c.charAt(L);break}default:58!==B.charCodeAt(D-1)&&(U+=r(B,d,m,B.charCodeAt(2)))}P=N=q=d=0,B="",m=c.charCodeAt(++L)}}switch(m){case 13:case 10:47===_?_=0:0===1+d&&107!==p&&0<B.length&&(N=1,B+="\0"),0<F*T&&o(0,B,s,t,$,A,U.length,p,f,p),A=1,$++;break;case 59:case 125:if(0===_+E+S+k){A++;break}default:switch(A++,b=c.charAt(L),m){case 9:case 32:if(0===E+k+_)switch(j){case 44:case 58:case 9:case 32:b="";break;default:32!==m&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===E+_+k&&(N=P=1,b="\f"+b);break;case 108:if(0===E+_+k+C&&0<q)switch(L-q){case 2:112===j&&58===c.charCodeAt(L-3)&&(C=j);case 8:111===R&&(C=R)}break;case 58:0===E+_+k&&(q=L);break;case 44:0===_+S+E+k&&(N=1,b+="\r");break;case 34:case 39:0===_&&(E=E===m?0:0===E?m:E);break;case 91:0===E+_+S&&k++;break;case 93:0===E+_+S&&k--;break;case 41:0===E+_+k&&S--;break;case 40:if(0===E+_+k){if(0===d)switch(2*j+3*R){case 533:break;default:d=1}S++}break;case 64:0===_+S+E+k+q+h&&(h=1);break;case 42:case 47:if(!(0<E+k+S))switch(_){case 0:switch(2*m+3*c.charCodeAt(L+1)){case 235:_=47;break;case 220:D=L,_=42}break;case 42:47===m&&42===j&&D+2!==L&&(33===c.charCodeAt(D+2)&&(U+=c.substring(D,L+1)),b="",_=0)}}0===_&&(B+=b)}R=j,j=m,L++}if(0<(D=U.length)){if(N=s,0<F&&(void 0!==(w=o(2,U,N,t,$,A,D,p,f,p))&&0===(U=w).length))return G+U+H;if(U=N.join(",")+"{"+U+"}",0!=O*C){switch(2!==O||i(U,2)||(C=0),C){case 111:U=U.replace(x,":-moz-$1")+U;break;case 112:U=U.replace(v,"::-webkit-input-$1")+U.replace(v,"::-moz-$1")+U.replace(v,":-ms-input-$1")+U}C=0}}return G+U+H}(M,s,t,0,0);return 0<F&&(void 0!==(c=o(-2,p,s,s,$,A,p.length,0,0,0))&&(p=c)),"",C=0,A=$=1,p}var u=/^\0+/g,l=/[\0\r\f]/g,p=/: */g,f=/zoo|gra/,d=/([,: ])(transform)/g,m=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,g=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,x=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,y=/\(\s*(.*)\s*\)/g,w=/([\s\S]*?);/g,k=/-self|flex-/g,_=/[^]*?(:[rp][el]a[\w-]+)[^]*/,S=/stretch|:\s*\w+\-(?:conte|avail)/,E=/([^-])(image-set\()/,A=1,$=1,C=0,O=1,M=[],j=[],F=0,R=null,T=0;return c.use=function e(n){switch(n){case void 0:case null:F=j.length=0;break;default:if("function"==typeof n)j[F++]=n;else if("object"==typeof n)for(var t=0,r=n.length;t<r;++t)e(n[t]);else T=0|!!n}return e},c.set=s,void 0!==e&&s(e),c},a=function(e){var n=new WeakMap;return function(t){if(n.has(t))return n.get(t);var r=e(t);return n.set(t,r),r}};function o(e){e&&s.current.insert(e+"}")}var s={current:null},c=function(e,n,t,r,i,a,c,u,l,p){switch(e){case 1:switch(n.charCodeAt(0)){case 64:return s.current.insert(n+";"),"";case 108:if(98===n.charCodeAt(2))return""}break;case 2:if(0===u)return n+"/*|*/";break;case 3:switch(u){case 102:case 112:return s.current.insert(t[0]+n),"";default:return n+(0===p?"/*|*/":"")}case-2:n.split("/*|*/}").forEach(o)}},u=function(e,n){if(1===e&&108===n.charCodeAt(0)&&98===n.charCodeAt(2))return""},l="undefined"!=typeof document,p={},f=l?void 0:a((function(){var e=a((function(){return{}})),n={},t={};return function(r){return void 0===r||!0===r?n:!1===r?t:e(r)}})),d=function(e){void 0===e&&(e={});var n,t=e.key||"css";void 0!==e.prefix&&(n={prefix:e.prefix});var a=new i(n);var o,d,m={};if(l){o=e.container||document.head;var h=document.querySelectorAll("style[data-emotion-"+t+"]");Array.prototype.forEach.call(h,(function(e){e.getAttribute("data-emotion-"+t).split(" ").forEach((function(e){m[e]=!0})),e.parentNode!==o&&o.appendChild(e)}))}if(l)a.use(e.stylisPlugins)(c),d=function(e,n,t,r){var i=n.name;s.current=t,a(e,n.styles),r&&(v.inserted[i]=!0)};else{a.use(u);var g=p;(e.stylisPlugins||void 0!==e.prefix)&&(a.use(e.stylisPlugins),g=f(e.stylisPlugins||p)(e.prefix));d=function(e,n,t,r){var i=n.name,o=function(e,n){var t=n.name;return void 0===g[t]&&(g[t]=a(e,n.styles)),g[t]}(e,n);return void 0===v.compat?(r&&(v.inserted[i]=!0),o):r?void(v.inserted[i]=o):o}}var v={key:t,sheet:new r({key:t,container:o,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:m,registered:{},insert:d};return v};var m=function(e){for(var n,t=0,r=0,i=e.length;i>=4;++r,i-=4)n=1540483477*(65535&(n=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(n>>>16)<<16),t=1540483477*(65535&(n^=n>>>24))+(59797*(n>>>16)<<16)^1540483477*(65535&t)+(59797*(t>>>16)<<16);switch(i){case 3:t^=(255&e.charCodeAt(r+2))<<16;case 2:t^=(255&e.charCodeAt(r+1))<<8;case 1:t=1540483477*(65535&(t^=255&e.charCodeAt(r)))+(59797*(t>>>16)<<16)}return(((t=1540483477*(65535&(t^=t>>>13))+(59797*(t>>>16)<<16))^t>>>15)>>>0).toString(36)},h={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var g=/[A-Z]|^ms/g,v=/_EMO_([^_]+?)_([^]*?)_EMO_/g,x=function(e){return 45===e.charCodeAt(1)},b=function(e){return null!=e&&"boolean"!=typeof e},y=function(e){var n={};return function(t){return void 0===n[t]&&(n[t]=e(t)),n[t]}}((function(e){return x(e)?e:e.replace(g,"-$&").toLowerCase()})),w=function(e,n){switch(e){case"animation":case"animationName":if("string"==typeof n)return n.replace(v,(function(e,n,t){return _={name:n,styles:t,next:_},n}))}return 1===h[e]||x(e)||"number"!=typeof n||0===n?n:n+"px"};function k(e,n,t,r){if(null==t)return"";if(void 0!==t.__emotion_styles)return t;switch(typeof t){case"boolean":return"";case"object":if(1===t.anim)return _={name:t.name,styles:t.styles,next:_},t.name;if(void 0!==t.styles){var i=t.next;if(void 0!==i)for(;void 0!==i;)_={name:i.name,styles:i.styles,next:_},i=i.next;return t.styles+";"}return function(e,n,t){var r="";if(Array.isArray(t))for(var i=0;i<t.length;i++)r+=k(e,n,t[i],!1);else for(var a in t){var o=t[a];if("object"!=typeof o)null!=n&&void 0!==n[o]?r+=a+"{"+n[o]+"}":b(o)&&(r+=y(a)+":"+w(a,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=n&&void 0!==n[o[0]]){var s=k(e,n,o,!1);switch(a){case"animation":case"animationName":r+=y(a)+":"+s+";";break;default:r+=a+"{"+s+"}"}}else for(var c=0;c<o.length;c++)b(o[c])&&(r+=y(a)+":"+w(a,o[c])+";")}return r}(e,n,t);case"function":if(void 0!==e){var a=_,o=t(e);return _=a,k(e,n,o,r)}break;case"string":}if(null==n)return t;var s=n[t];return void 0===s||r?t:s}var _,S=/label:\s*([^\s;\n{]+)\s*;/g;var E=function(e,n,t){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";_=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,i+=k(t,n,a,!1)):i+=a[0];for(var o=1;o<e.length;o++)i+=k(t,n,e[o],46===i.charCodeAt(i.length-1)),r&&(i+=a[o]);S.lastIndex=0;for(var s,c="";null!==(s=S.exec(i));)c+="-"+s[1];return{name:m(i)+c,styles:i,next:_}},A="undefined"!=typeof document;function $(e,n,t){var r="";return t.split(" ").forEach((function(t){void 0!==e[t]?n.push(e[t]):r+=t+" "})),r}var C=function(e,n,t){var r=e.key+"-"+n.name;if((!1===t||!1===A&&void 0!==e.compat)&&void 0===e.registered[r]&&(e.registered[r]=n.styles),void 0===e.inserted[n.name]){var i="",a=n;do{var o=e.insert("."+r,a,e.sheet,!0);A||void 0===o||(i+=o),a=a.next}while(void 0!==a);if(!A&&0!==i.length)return i}};function O(e,n){if(void 0===e.inserted[n.name])return e.insert("",n,e.sheet,!0)}function M(e,n,t){var r=[],i=$(e,r,t);return r.length<2?t:i+n(r)}var j=function e(n){for(var t="",r=0;r<n.length;r++){var i=n[r];if(null!=i){var a=void 0;switch(typeof i){case"boolean":break;case"object":if(Array.isArray(i))a=e(i);else for(var o in a="",i)i[o]&&o&&(a&&(a+=" "),a+=o);break;default:a=i}a&&(t&&(t+=" "),t+=a)}}return t},F=function(e){var n=d(e);n.sheet.speedy=function(e){this.isSpeedy=e},n.compat=!0;var t=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=E(t,n.registered,void 0);return C(n,i,!1),n.key+"-"+i.name};return{css:t,cx:function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];return M(n.registered,t,j(r))},injectGlobal:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=E(t,n.registered);O(n,i)},keyframes:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var i=E(t,n.registered),a="animation-"+i.name;return O(n,{name:i.name,styles:"@keyframes "+a+"{"+i.styles+"}"}),a},hydrate:function(e){e.forEach((function(e){n.inserted[e]=!0}))},flush:function(){n.registered={},n.inserted={},n.sheet.flush()},sheet:n.sheet,cache:n,getRegisteredStyles:$.bind(null,n.registered),merge:M.bind(null,n.registered,t)}}(),R=F.flush,T=F.hydrate,q=F.cx,L=F.merge,N=F.getRegisteredStyles,P=F.injectGlobal,D=F.keyframes,I=F.css,z=F.sheet,B=F.cache},function(e,n){(n=e.exports=function(e){return e.replace(/^\s*|\s*$/g,"")}).left=function(e){return e.replace(/^\s*/,"")},n.right=function(e){return e.replace(/\s*$/,"")}},function(e,n,t){"use strict";var r=t(22),i=Object.keys||function(e){var n=[];for(var t in e)n.push(t);return n};e.exports=p;var a=Object.create(t(8));a.inherits=t(2);var o=t(60),s=t(63);a.inherits(p,o);for(var c=i(s.prototype),u=0;u<c.length;u++){var l=c[u];p.prototype[l]||(p.prototype[l]=s.prototype[l])}function p(e){if(!(this instanceof p))return new p(e);o.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",f)}function f(){this.allowHalfOpen||this._writableState.ended||r.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(p.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(p.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),p.prototype._destroy=function(e,n){this.push(null),this.end(),r.nextTick(n,e)}},function(e,n,t){"use strict";function r(e,n){return Object.prototype.hasOwnProperty.call(e,n)}n.repeat=function(e,n){for(var t="",r=0;r<n;r++)t+=e;return t},n.arrayEqual=function(e,n){if(e.length!==n.length)return!1;for(var t=0;t<e.length;t++)if(e[t]!==n[t])return!1;return!0},n.trimChars=function(e,n){for(var t=0,r=e.length-1;n.indexOf(e.charAt(t))>=0;)t++;for(;n.indexOf(e.charAt(r))>=0;)r--;return e.slice(t,r+1)},n.capitalize=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},n.arrayUnion=function(){for(var e=[],n=0,t={};n<arguments.length;n++)for(var r=arguments[n],i=0;i<r.length;i++)t[r[i]]||(t[r[i]]=!0,e.push(r[i]));return e},n.has=r,n.extend=function(e,n){for(var t in n)r(n,t)&&(e[t]=n[t])},n.trimEnd=function(e){return e.replace(/\s+$/g,"")}},function(e,n,t){"use strict";var r=t(30),i=t(45),a=t(46);e.exports=function(e){var n,t,o=e.space,s=e.mustUseProperty||[],c=e.attributes||{},u=e.properties,l=e.transform,p={},f={};for(n in u)t=new a(n,l(c,n),u[n],o),-1!==s.indexOf(n)&&(t.mustUseProperty=!0),p[n]=t,f[r(n)]=n,f[r(t.attribute)]=n;return new i(p,f,o)}},function(e,n){n.getArg=function(e,n,t){if(n in e)return e[n];if(3===arguments.length)return t;throw new Error('"'+n+'" is a required argument.')};var t=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(e){var n=e.match(t);return n?{scheme:n[1],auth:n[2],host:n[3],port:n[4],path:n[5]}:null}function a(e){var n="";return e.scheme&&(n+=e.scheme+":"),n+="//",e.auth&&(n+=e.auth+"@"),e.host&&(n+=e.host),e.port&&(n+=":"+e.port),e.path&&(n+=e.path),n}function o(e){var t=e,r=i(e);if(r){if(!r.path)return e;t=r.path}for(var o,s=n.isAbsolute(t),c=t.split(/\/+/),u=0,l=c.length-1;l>=0;l--)"."===(o=c[l])?c.splice(l,1):".."===o?u++:u>0&&(""===o?(c.splice(l+1,u),u=0):(c.splice(l,2),u--));return""===(t=c.join("/"))&&(t=s?"/":"."),r?(r.path=t,a(r)):t}function s(e,n){""===e&&(e="."),""===n&&(n=".");var t=i(n),s=i(e);if(s&&(e=s.path||"/"),t&&!t.scheme)return s&&(t.scheme=s.scheme),a(t);if(t||n.match(r))return n;if(s&&!s.host&&!s.path)return s.host=n,a(s);var c="/"===n.charAt(0)?n:o(e.replace(/\/+$/,"")+"/"+n);return s?(s.path=c,a(s)):c}n.urlParse=i,n.urlGenerate=a,n.normalize=o,n.join=s,n.isAbsolute=function(e){return"/"===e.charAt(0)||t.test(e)},n.relative=function(e,n){""===e&&(e="."),e=e.replace(/\/$/,"");for(var t=0;0!==n.indexOf(e+"/");){var r=e.lastIndexOf("/");if(r<0)return n;if((e=e.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return n;++t}return Array(t+1).join("../")+n.substr(e.length+1)};var c=!("__proto__"in Object.create(null));function u(e){return e}function l(e){if(!e)return!1;var n=e.length;if(n<9)return!1;if(95!==e.charCodeAt(n-1)||95!==e.charCodeAt(n-2)||111!==e.charCodeAt(n-3)||116!==e.charCodeAt(n-4)||111!==e.charCodeAt(n-5)||114!==e.charCodeAt(n-6)||112!==e.charCodeAt(n-7)||95!==e.charCodeAt(n-8)||95!==e.charCodeAt(n-9))return!1;for(var t=n-10;t>=0;t--)if(36!==e.charCodeAt(t))return!1;return!0}function p(e,n){return e===n?0:null===e?1:null===n?-1:e>n?1:-1}n.toSetString=c?u:function(e){return l(e)?"$"+e:e},n.fromSetString=c?u:function(e){return l(e)?e.slice(1):e},n.compareByOriginalPositions=function(e,n,t){var r=p(e.source,n.source);return 0!==r||0!==(r=e.originalLine-n.originalLine)||0!==(r=e.originalColumn-n.originalColumn)||t||0!==(r=e.generatedColumn-n.generatedColumn)||0!==(r=e.generatedLine-n.generatedLine)?r:p(e.name,n.name)},n.compareByGeneratedPositionsDeflated=function(e,n,t){var r=e.generatedLine-n.generatedLine;return 0!==r||0!==(r=e.generatedColumn-n.generatedColumn)||t||0!==(r=p(e.source,n.source))||0!==(r=e.originalLine-n.originalLine)||0!==(r=e.originalColumn-n.originalColumn)?r:p(e.name,n.name)},n.compareByGeneratedPositionsInflated=function(e,n){var t=e.generatedLine-n.generatedLine;return 0!==t||0!==(t=e.generatedColumn-n.generatedColumn)||0!==(t=p(e.source,n.source))||0!==(t=e.originalLine-n.originalLine)||0!==(t=e.originalColumn-n.originalColumn)?t:p(e.name,n.name)},n.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},n.computeSourceURL=function(e,n,t){if(n=n||"",e&&("/"!==e[e.length-1]&&"/"!==n[0]&&(e+="/"),n=e+n),t){var r=i(t);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var c=r.path.lastIndexOf("/");c>=0&&(r.path=r.path.substring(0,c+1))}n=s(a(r),n)}return o(n)}},function(e,n){function t(){return e.exports=t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},t.apply(this,arguments)}e.exports=t},function(e,n,t){"use strict";var r=t(116),i=t(117),a=t(19),o=t(118),s=t(119),c=t(120);e.exports=function(e,n){var t,a,o={};n||(n={});for(a in f)t=n[a],o[a]=null==t?f[a]:t;(o.position.indent||o.position.start)&&(o.indent=o.position.indent||[],o.position=o.position.start);return function(e,n){var t,a,o,f,b,y,w,k,_,S,E,A,$,C,O,M,j,F,R,T=n.additional,q=n.nonTerminated,L=n.text,N=n.reference,P=n.warning,D=n.textContext,I=n.referenceContext,z=n.warningContext,B=n.position,U=n.indent||[],H=e.length,G=0,W=-1,V=B.column||1,Y=B.line||1,Z="",X=[];"string"==typeof T&&(T=T.charCodeAt(0));M=J(),k=P?function(e,n){var t=J();t.column+=n,t.offset+=n,P.call(z,v[e],t,e)}:p,G--,H++;for(;++G<H;)if(10===b&&(V=U[W]||1),38===(b=e.charCodeAt(G))){if(9===(w=e.charCodeAt(G+1))||10===w||12===w||32===w||38===w||60===w||w!=w||T&&w===T){Z+=l(b),V++;continue}for(A=$=G+1,R=$,35===w?(R=++A,88===(w=e.charCodeAt(R))||120===w?(C=m,R=++A):C="decimal"):C=d,t="",E="",f="",O=g[C],R--;++R<H&&(w=e.charCodeAt(R),O(w));)f+=l(w),C===d&&u.call(r,f)&&(t=f,E=r[f]);(o=59===e.charCodeAt(R))&&(R++,(a=C===d&&c(f))&&(t=f,E=a)),F=1+R-$,(o||q)&&(f?C===d?(o&&!E?k(5,1):(t!==f&&(R=A+t.length,F=1+R-A,o=!1),o||(_=t?1:3,n.attribute?61===(w=e.charCodeAt(R))?(k(_,F),E=null):s(w)?E=null:k(_,F):k(_,F))),y=E):(o||k(2,F),y=parseInt(f,h[C]),(K=y)>=55296&&K<=57343||K>1114111?(k(7,F),y=l(65533)):y in i?(k(6,F),y=i[y]):(S="",x(y)&&k(6,F),y>65535&&(S+=l((y-=65536)>>>10|55296),y=56320|1023&y),y=S+l(y))):C!==d&&k(4,F)),y?(Q(),M=J(),G=R-1,V+=R-$+1,X.push(y),(j=J()).offset++,N&&N.call(I,y,{start:M,end:j},e.slice($-1,R)),M=j):(f=e.slice($-1,R),Z+=f,V+=f.length,G=R-1)}else 10===b&&(Y++,W++,V=0),b==b?(Z+=l(b),V++):Q();var K;return X.join("");function J(){return{line:Y,column:V,offset:G+(B.offset||0)}}function Q(){Z&&(X.push(Z),L&&L.call(D,Z,{start:M,end:J()}),Z="")}}(e,o)};var u={}.hasOwnProperty,l=String.fromCharCode,p=Function.prototype,f={warning:null,reference:null,text:null,warningContext:null,referenceContext:null,textContext:null,position:{},additional:null,attribute:!1,nonTerminated:!0},d="named",m="hexadecimal",h={hexadecimal:16,decimal:10},g={};g[d]=s,g.decimal=a,g[m]=o;var v={};function x(e){return e>=1&&e<=8||11===e||e>=13&&e<=31||e>=127&&e<=159||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)}v[1]="Named character references must be terminated by a semicolon",v[2]="Numeric character references must be terminated by a semicolon",v[3]="Named character references cannot be empty",v[4]="Numeric character references cannot be empty",v[5]="Named character references must be known",v[6]="Numeric character references cannot be disallowed",v[7]="Numeric character references cannot be outside the permissible Unicode range"},function(e,n,t){"use strict";e.exports=function(e){var n="string"==typeof e?e.charCodeAt(0):e;return n>=48&&n<=57}},function(e,n,t){"use strict";e.exports=s;var r=t(156),i=r.CONTINUE,a=r.SKIP,o=r.EXIT;function s(e,n,t,i){"function"==typeof n&&"function"!=typeof t&&(i=t,t=n,n=null),r(e,n,(function(e,n){var r=n[n.length-1],i=r?r.children.indexOf(e):null;return t(e,i,r)}),i)}s.CONTINUE=i,s.SKIP=a,s.EXIT=o},function(e,n){e.exports=require("buffer")},function(e,n,t){"use strict";"undefined"==typeof process||!process.version||0===process.version.indexOf("v0.")||0===process.version.indexOf("v1.")&&0!==process.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,t,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var i,a,o=arguments.length;switch(o){case 0:case 1:return process.nextTick(e);case 2:return process.nextTick((function(){e.call(null,n)}));case 3:return process.nextTick((function(){e.call(null,n,t)}));case 4:return process.nextTick((function(){e.call(null,n,t,r)}));default:for(i=new Array(o-1),a=0;a<i.length;)i[a++]=arguments[a];return process.nextTick((function(){e.apply(null,i)}))}}}:e.exports=process},function(e,n,t){var r=t(21),i=r.Buffer;function a(e,n){for(var t in e)n[t]=e[t]}function o(e,n,t){return i(e,n,t)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=r:(a(r,n),n.Buffer=o),a(i,o),o.from=function(e,n,t){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,n,t)},o.alloc=function(e,n,t){if("number"!=typeof e)throw new TypeError("Argument must be a number");var r=i(e);return void 0!==n?"string"==typeof t?r.fill(n,t):r.fill(n):r.fill(0),r},o.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},o.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r.SlowBuffer(e)}},function(e,n,t){var r=t(127);e.exports=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?Object(arguments[n]):{},i=Object.keys(t);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})))),i.forEach((function(n){r(e,n,t[n])}))}return e}},function(e,n,t){"use strict";var r=t(1),i=t(10),a=e.exports=function(e){if((e=e||{}).nargs=0,void 0===e.constant)throw new Error("constant option is required for storeAction");i.call(this,e)};r.inherits(a,i),a.prototype.call=function(e,n){n.set(this.dest,this.constant)}},function(e,n,t){"use strict";var r=t(1).format;e.exports=function(e,n){var t,i,a=null;return t=(a=e.getName?e.getName():""+e)?r('argument "%s": %s',a,n):n,(i=new TypeError(t)).code="ARGError",i}},function(e,n,t){"use strict";var r=t(41).sprintf,i=t(4),a=t(14);function o(e,n){this._parent=e,this._heading=n,this._items=[]}o.prototype.addItem=function(e){this._items.push(e)},o.prototype.formatHelp=function(e){var n,t;if(this._parent&&e._indent(),n=this._items.map((function(n){var t,r,i;return t=e,r=n[0],i=n[1],r.apply(t,i)})),n=e._joinParts(n),this._parent&&e._dedent(),!n)return"";if(t="",this._heading&&this._heading!==i.SUPPRESS){var r=e.currentIndent;t=a.repeat(" ",r)+this._heading+":"+i.EOL}return e._joinParts([i.EOL,t,n,i.EOL])};var s=e.exports=function(e){e=e||{},this._prog=e.prog,this._maxHelpPosition=e.maxHelpPosition||24,this._width=e.width||(process.env.COLUMNS||80)-2,this._currentIndent=0,this._indentIncriment=e.indentIncriment||2,this._level=0,this._actionMaxLength=0,this._rootSection=new o(null),this._currentSection=this._rootSection,this._whitespaceMatcher=new RegExp("\\s+","g"),this._longBreakMatcher=new RegExp(i.EOL+i.EOL+i.EOL+"+","g")};s.prototype._indent=function(){this._currentIndent+=this._indentIncriment,this._level+=1},s.prototype._dedent=function(){if(this._currentIndent-=this._indentIncriment,this._level-=1,this._currentIndent<0)throw new Error("Indent decreased below 0.")},s.prototype._addItem=function(e,n){this._currentSection.addItem([e,n])},s.prototype.startSection=function(e){this._indent();var n=new o(this._currentSection,e),t=n.formatHelp.bind(n);this._addItem(t,[this]),this._currentSection=n},s.prototype.endSection=function(){this._currentSection=this._currentSection._parent,this._dedent()},s.prototype.addText=function(e){e&&e!==i.SUPPRESS&&this._addItem(this._formatText,[e])},s.prototype.addUsage=function(e,n,t,r){e!==i.SUPPRESS&&this._addItem(this._formatUsage,[e,n,t,r])},s.prototype.addArgument=function(e){if(e.help!==i.SUPPRESS){var n,t=this,r=[this._formatActionInvocation(e)],a=r[0].length;e._getSubactions&&(this._indent(),e._getSubactions().forEach((function(e){var n=t._formatActionInvocation(e);r.push(n),a=Math.max(a,n.length)})),this._dedent()),n=a+this._currentIndent,this._actionMaxLength=Math.max(this._actionMaxLength,n),this._addItem(this._formatAction,[e])}},s.prototype.addArguments=function(e){var n=this;e.forEach((function(e){n.addArgument(e)}))},s.prototype.formatHelp=function(){var e=this._rootSection.formatHelp(this);return e&&(e=e.replace(this._longBreakMatcher,i.EOL+i.EOL),e=a.trimChars(e,i.EOL)+i.EOL),e},s.prototype._joinParts=function(e){return e.filter((function(e){return e&&e!==i.SUPPRESS})).join("")},s.prototype._formatUsage=function(e,n,t,o){if(o||"string"==typeof o||(o="usage: "),n=n||[],t=t||[],e)e=r(e,{prog:this._prog});else if(e||0!==n.length){if(!e){var s,c=this._prog,u=[],l=[];if(n.forEach((function(e){e.isOptional()?u.push(e):l.push(e)})),e=[c,this._formatActionsUsage([].concat(u,l),t)].join(" "),s=this._width-this._currentIndent,o.length+e.length>s){var p=new RegExp("\\(.*?\\)+|\\[.*?\\]+|\\S+","g"),f=this._formatActionsUsage(u,t),d=this._formatActionsUsage(l,t),m=f.match(p),h=d.match(p)||[];if(m.join(" ")!==f)throw new Error("assert \"optionalParts.join(' ') === optionalUsage\"");if(h.join(" ")!==d)throw new Error("assert \"positionalParts.join(' ') === positionalUsage\"");var g,v,x=function(e,n,t){var r=[],i=[],a=t?t.length-1:n.length-1;return e.forEach((function(e){a+1+e.length>s&&(r.push(n+i.join(" ")),i=[],a=n.length-1),i.push(e),a+=e.length+1})),i&&r.push(n+i.join(" ")),t&&(r[0]=r[0].substr(n.length)),r};o.length+c.length<=.75*s?(v=a.repeat(" ",o.length+c.length+1),g=m?[].concat(x([c].concat(m),v,o),x(h,v)):h?x([c].concat(h),v,o):[c]):(v=a.repeat(" ",o.length),(g=x(m.concat(h),v)).length>1&&(g=[].concat(x(m,v),x(h,v))),g=[c].concat(g)),e=g.join(i.EOL)}}}else e=this._prog;return o+e+i.EOL+i.EOL},s.prototype._formatActionsUsage=function(e,n){var t=[],r=[],o=this;n.forEach((function(n){var i,o,s=e.indexOf(n._groupActions[0]);if(s>=0&&(i=s+n._groupActions.length,a.arrayEqual(e.slice(s,i),n._groupActions)))for(n._groupActions.forEach((function(e){t.push(e)})),n.required?(r[s]?r[s]+=" (":r[s]="(",r[i]=")"):(r[s]?r[s]+=" [":r[s]="[",r[i]="]"),o=s+1;o<i;o+=1)r[o]="|"}));var s=[];e.forEach((function(e,n){var a,c,u;e.help===i.SUPPRESS?(s.push(null),"|"===r[n]?r.splice(n,n):"|"===r[n+1]&&r.splice(n+1,n+1)):e.isOptional()?(c=e.optionStrings[0],0===e.nargs?a=""+c:(u=e.dest.toUpperCase(),a=c+" "+o._formatArgs(e,u)),!e.required&&t.indexOf(e)<0&&(a="["+a+"]"),s.push(a)):(a=o._formatArgs(e,e.dest),t.indexOf(e)>=0&&"["===a[0]&&"]"===a[a.length-1]&&(a=a.slice(1,-1)),s.push(a))}));for(var c=r.length-1;c>=0;--c)null!==r[c]&&s.splice(c,0,r[c]);var u=s.filter((function(e){return!!e})).join(" ");return u=(u=(u=(u=(u=(u=u.replace(/([\[(]) /g,"$1")).replace(/ ([\])])/g,"$1")).replace(/\[ *\]/g,"")).replace(/\( *\)/g,"")).replace(/\(([^|]*)\)/g,"$1")).trim()},s.prototype._formatText=function(e){e=r(e,{prog:this._prog});var n=this._width-this._currentIndent,t=a.repeat(" ",this._currentIndent);return this._fillText(e,n,t)+i.EOL+i.EOL},s.prototype._formatAction=function(e){var n,t,r,o,s=this,c=Math.min(this._actionMaxLength+2,this._maxHelpPosition),u=this._width-c,l=c-this._currentIndent-2,p=this._formatActionInvocation(e);return e.help?p.length<=l?(p=a.repeat(" ",this._currentIndent)+p+"  "+a.repeat(" ",l-p.length),o=0):(p=a.repeat(" ",this._currentIndent)+p+i.EOL,o=c):p=a.repeat(" ",this._currentIndent)+p+i.EOL,r=[p],e.help?(n=this._expandHelp(e),t=this._splitLines(n,u),r.push(a.repeat(" ",o)+t[0]+i.EOL),t.slice(1).forEach((function(e){r.push(a.repeat(" ",c)+e+i.EOL)}))):p.charAt(p.length-1)!==i.EOL&&r.push(i.EOL),e._getSubactions&&(this._indent(),e._getSubactions().forEach((function(e){r.push(s._formatAction(e))})),this._dedent()),this._joinParts(r)},s.prototype._formatActionInvocation=function(e){if(!e.isOptional())return this._metavarFormatter(e,e.dest)(1)[0];var n,t,r=[];return 0===e.nargs?r=r.concat(e.optionStrings):(n=e.dest.toUpperCase(),t=this._formatArgs(e,n),e.optionStrings.forEach((function(e){r.push(e+" "+t)}))),r.join(", ")},s.prototype._metavarFormatter=function(e,n){var t;if(e.metavar||""===e.metavar)t=e.metavar;else if(e.choices){var r=e.choices;r="string"==typeof r?r.split("").join(", "):Array.isArray(r)?r.join(","):Object.keys(r).join(","),t="{"+r+"}"}else t=n;return function(e){if(Array.isArray(t))return t;for(var n=[],r=0;r<e;r+=1)n.push(t);return n}},s.prototype._formatArgs=function(e,n){var t,r,a=this._metavarFormatter(e,n);switch(e.nargs){case void 0:case null:t=""+(r=a(1))[0];break;case i.OPTIONAL:t="["+(r=a(1))[0]+"]";break;case i.ZERO_OR_MORE:t="["+(r=a(2))[0]+" ["+r[1]+" ...]]";break;case i.ONE_OR_MORE:t=(r=a(2))[0]+" ["+r[1]+" ...]";break;case i.REMAINDER:t="...";break;case i.PARSER:t=(r=a(1))[0]+" ...";break;default:t=(r=a(e.nargs)).join(" ")}return t},s.prototype._expandHelp=function(e){var n={prog:this._prog};return Object.keys(e).forEach((function(t){var r=e[t];r!==i.SUPPRESS&&(n[t]=r)})),n.choices&&("string"==typeof n.choices?n.choices=n.choices.split("").join(", "):Array.isArray(n.choices)?n.choices=n.choices.join(", "):n.choices=Object.keys(n.choices).join(", ")),r(this._getHelpString(e),n)},s.prototype._splitLines=function(e,n){var t=[],r=[" ",".",",","!","?"],a=new RegExp("["+r.join("")+"][^"+r.join("")+"]*$");return(e=(e=(e=e.replace(/[\n\|\t]/g," ")).trim()).replace(this._whitespaceMatcher," ")).split(i.EOL).forEach((function(e){if(n>=e.length)t.push(e);else{for(var i=0,o=n;o<=e.length;)o!==e.length&&r.indexOf(e[o]<-1)&&(o=i+(a.exec(e.substring(i,o))||{}).index+1),t.push(e.substring(i,o)),i=o,o+=n;i<e.length&&t.push(e.substring(i,o))}})),t},s.prototype._fillText=function(e,n,t){var r=this._splitLines(e,n);return(r=r.map((function(e){return t+e}))).join(i.EOL)},s.prototype._getHelpString=function(e){return e.help}},function(e,n,t){"use strict";var r=t(1),i=t(4),a=t(14),o=t(27);function s(e){o.call(this,e)}function c(e){o.call(this,e)}function u(e){c.call(this,e)}r.inherits(s,o),s.prototype._getHelpString=function(e){var n=e.help;if(-1===e.help.indexOf("%(defaultValue)s")&&e.defaultValue!==i.SUPPRESS){var t=[i.OPTIONAL,i.ZERO_OR_MORE];(e.isOptional()||t.indexOf(e.nargs)>=0)&&(n+=" (default: %(defaultValue)s)")}return n},e.exports.ArgumentDefaultsHelpFormatter=s,r.inherits(c,o),c.prototype._fillText=function(e,n,t){var r=e.split("\n");return(r=r.map((function(e){return a.trimEnd(t+e)}))).join("\n")},e.exports.RawDescriptionHelpFormatter=c,r.inherits(u,c),u.prototype._splitLines=function(e){return e.split("\n")},e.exports.RawTextHelpFormatter=u},function(e,n,t){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var n={},t=0;t<10;t++)n["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(e){return n[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,n){for(var t,s,c=o(e),u=1;u<arguments.length;u++){for(var l in t=Object(arguments[u]))i.call(t,l)&&(c[l]=t[l]);if(r){s=r(t);for(var p=0;p<s.length;p++)a.call(t,s[p])&&(c[s[p]]=t[s[p]])}}return c}},function(e,n,t){"use strict";e.exports=function(e){return e.toLowerCase()}},function(e,n,t){"use strict";var r=0;function i(){return Math.pow(2,++r)}n.boolean=i(),n.booleanish=i(),n.overloadedBoolean=i(),n.number=i(),n.spaceSeparated=i(),n.commaSeparated=i(),n.commaOrSpaceSeparated=i()},function(e,n,t){"use strict";
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var r,i="";e.exports=function(e,n){if("string"!=typeof e)throw new TypeError("expected a string");if(1===n)return e;if(2===n)return e+e;var t=e.length*n;if(r!==e||void 0===r)r=e,i="";else if(i.length>=t)return i.substr(0,t);for(;t>i.length&&n>1;)1&n&&(i+=e),n>>=1,e+=e;return i=(i+=e).substr(0,t)}},function(e,n,t){"use strict";e.exports=function(e){var n=String(e),t=n.length;for(;"\n"===n.charAt(--t););return n.slice(0,t+1)}},function(e,n,t){"use strict";e.exports=function(e,n,t,r){var i,a,o,s,c,u,l=["pedantic","commonmark"],p=l.length,f=e.length,d=-1;for(;++d<f;){for(i=e[d],a=i[1]||{},o=i[0],s=-1,u=!1;++s<p;)if(void 0!==a[c=l[s]]&&a[c]!==t.options[c]){u=!0;break}if(!u&&n[o].apply(t,r))return!0}return!1}},function(e,n,t){"use strict";var r=t(169);e.exports=function(e){return r(e).toLowerCase()}},function(e,n,t){e.exports=s;var r=Object.keys||function(e){var n=[];for(var t in e)n.push(t);return n},i=t(8);i.inherits=t(2);var a=t(55),o=t(58);function s(e){if(!(this instanceof s))return new s(e);a.call(this,e),o.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",c)}function c(){this.allowHalfOpen||this._writableState.ended||process.nextTick(this.end.bind(this))}i.inherits(s,a),function(e,n){for(var t=0,r=e.length;t<r;t++)n(e[t],t)}(r(o.prototype),(function(e){s.prototype[e]||(s.prototype[e]=o.prototype[e])}))},function(e,n,t){"use strict";function r(e){e.languages.javascript=e.languages.extend("clike",{"class-name":[e.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)(?:catch|finally)\b/,lookbehind:!0},{pattern:/(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,function:/#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,operator:/-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/}),e.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,e.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/,lookbehind:!0,greedy:!0},"function-variable":{pattern:/#?[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,lookbehind:!0,inside:e.languages.javascript},{pattern:/[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,inside:e.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,lookbehind:!0,inside:e.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,lookbehind:!0,inside:e.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),e.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:e.languages.javascript}},string:/[\s\S]+/}}}),e.languages.markup&&e.languages.markup.tag.addInlined("script","javascript"),e.languages.js=e.languages.javascript}e.exports=r,r.displayName="javascript",r.aliases=["js"]},function(e,n,t){"use strict";function r(e){e.languages.typescript=e.languages.extend("javascript",{keyword:/\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/,builtin:/\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/}),e.languages.ts=e.languages.typescript}e.exports=r,r.displayName="typescript",r.aliases=["ts"]},function(e,n,t){"use strict";var r,i,a=(r="Prism"in global,i=r?global.Prism:void 0,function(){r?global.Prism=i:delete global.Prism,r=void 0,i=void 0});("undefined"==typeof window?"undefined"==typeof self?{}:self:window).Prism={manual:!0,disableWorkerMessageHandler:!0};var o=t(101),s=t(18),c=t(122),u=t(123),l=t(124),p=t(125),f=t(37);a();var d={}.hasOwnProperty;function m(){}m.prototype=c;var h=new m;function g(e){if("function"!=typeof e||!e.displayName)throw new Error("Expected `function` for `grammar`, got `"+e+"`");void 0===h.languages[e.displayName]&&e(h)}e.exports=h,h.highlight=function(e,n){var t,r=c.highlight;if("string"!=typeof e)throw new Error("Expected `string` for `value`, got `"+e+"`");if("Object"===h.util.type(n))t=n,n=null;else{if("string"!=typeof n)throw new Error("Expected `string` for `name`, got `"+n+"`");if(!d.call(h.languages,n))throw new Error("Unknown language: `"+n+"` is not registered");t=h.languages[n]}return r.call(this,e,t,n)},h.register=g,h.alias=function(e,n){var t,r,i,a,o=h.languages,s=e;n&&((s={})[e]=n);for(t in s)for(r=s[t],i=(r="string"==typeof r?[r]:r).length,a=-1;++a<i;)o[r[a]]=o[t]},h.registered=function(e){if("string"!=typeof e)throw new Error("Expected `string` for `language`, got `"+e+"`");return d.call(h.languages,e)},h.listLanguages=function(){var e,n=h.languages,t=[];for(e in n)d.call(n,e)&&"object"==typeof n[e]&&t.push(e);return t},g(u),g(l),g(p),g(f),h.util.encode=function(e){return e},h.Token.stringify=function(e,n,t){var r;if("string"==typeof e)return{type:"text",value:e};if("Array"===h.util.type(e))return function(e,n){var t,r=[],i=e.length,a=-1;for(;++a<i;)""!==(t=e[a])&&null!=t&&r.push(t);a=-1,i=r.length;for(;++a<i;)t=r[a],r[a]=h.Token.stringify(t,n,r);return r}(e,n);r={type:e.type,content:h.Token.stringify(e.content,n,t),tag:"span",classes:["token",e.type],attributes:{},language:n,parent:t},e.alias&&(r.classes=r.classes.concat(e.alias));return h.hooks.run("wrap",r),o(r.tag+"."+r.classes.join("."),function(e){var n;for(n in e)e[n]=s(e[n]);return e}(r.attributes),r.content)}},function(e,n,t){"use strict";e.exports=t(224)},function(e,n,t){!function(e){var t={not_string:/[^s]/,number:/[diefg]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijosuxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[\+\-]/};function r(){var e=arguments[0],n=r.cache;return n[e]&&n.hasOwnProperty(e)||(n[e]=r.parse(e)),r.format.call(null,n[e],arguments)}r.format=function(e,n){var a,o,s,c,u,l,p,f,d=1,m=e.length,h="",g=[],v=!0,x="";for(o=0;o<m;o++)if("string"===(h=i(e[o])))g[g.length]=e[o];else if("array"===h){if((c=e[o])[2])for(a=n[d],s=0;s<c[2].length;s++){if(!a.hasOwnProperty(c[2][s]))throw new Error(r("[sprintf] property '%s' does not exist",c[2][s]));a=a[c[2][s]]}else a=c[1]?n[c[1]]:n[d++];if("function"==i(a)&&(a=a()),t.not_string.test(c[8])&&t.not_json.test(c[8])&&"number"!=i(a)&&isNaN(a))throw new TypeError(r("[sprintf] expecting number but found %s",i(a)));switch(t.number.test(c[8])&&(v=a>=0),c[8]){case"b":a=a.toString(2);break;case"c":a=String.fromCharCode(a);break;case"d":case"i":a=parseInt(a,10);break;case"j":a=JSON.stringify(a,null,c[6]?parseInt(c[6]):0);break;case"e":a=c[7]?a.toExponential(c[7]):a.toExponential();break;case"f":a=c[7]?parseFloat(a).toFixed(c[7]):parseFloat(a);break;case"g":a=c[7]?parseFloat(a).toPrecision(c[7]):parseFloat(a);break;case"o":a=a.toString(8);break;case"s":a=(a=String(a))&&c[7]?a.substring(0,c[7]):a;break;case"u":a>>>=0;break;case"x":a=a.toString(16);break;case"X":a=a.toString(16).toUpperCase()}t.json.test(c[8])?g[g.length]=a:(!t.number.test(c[8])||v&&!c[3]?x="":(x=v?"+":"-",a=a.toString().replace(t.sign,"")),l=c[4]?"0"===c[4]?"0":c[4].charAt(1):" ",p=c[6]-(x+a).length,u=c[6]&&p>0?(f=l,Array(p+1).join(f)):"",g[g.length]=c[5]?x+a+u:"0"===l?x+u+a:u+x+a)}return g.join("")},r.cache={},r.parse=function(e){for(var n=e,r=[],i=[],a=0;n;){if(null!==(r=t.text.exec(n)))i[i.length]=r[0];else if(null!==(r=t.modulo.exec(n)))i[i.length]="%";else{if(null===(r=t.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(r[2]){a|=1;var o=[],s=r[2],c=[];if(null===(c=t.key.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(o[o.length]=c[1];""!==(s=s.substring(c[0].length));)if(null!==(c=t.key_access.exec(s)))o[o.length]=c[1];else{if(null===(c=t.index_access.exec(s)))throw new SyntaxError("[sprintf] failed to parse named argument key");o[o.length]=c[1]}r[2]=o}else a|=2;if(3===a)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");i[i.length]=r}n=n.substring(r[0].length)}return i};function i(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}n.sprintf=r,n.vsprintf=function(e,n,t){return(t=(n||[]).slice(0)).splice(0,0,e),r.apply(null,t)}}("undefined"==typeof window||window)},function(e,n,t){"use strict";var r=t(1).format,i=t(4),a=t(14),o=t(88),s=t(89),c=t(90),u=t(91),l=t(92),p=t(25),f=t(93),d=t(94),m=t(95),h=t(96),g=t(26),v=e.exports=function(e){e=e||{},this.description=e.description,this.argumentDefault=e.argumentDefault,this.prefixChars=e.prefixChars||"",this.conflictHandler=e.conflictHandler,this._registries={},this.register("action",null,l),this.register("action","store",l),this.register("action","storeConst",p),this.register("action","storeTrue",f),this.register("action","storeFalse",d),this.register("action","append",s),this.register("action","appendConst",c),this.register("action","count",u),this.register("action","help",o),this.register("action","version",m),this.register("action","parsers",h),this._getHandler(),this._actions=[],this._optionStringActions={},this._actionGroups=[],this._mutuallyExclusiveGroups=[],this._defaults={},this._regexpNegativeNumber=new RegExp("^[-]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?$"),this._hasNegativeNumberOptionals=[]},x=t(43),b=t(97);v.prototype.register=function(e,n,t){this._registries[e]=this._registries[e]||{},this._registries[e][n]=t},v.prototype._registryGet=function(e,n,t){return arguments.length<3&&(t=null),this._registries[e][n]||t},v.prototype.setDefaults=function(e){for(var n in e=e||{})a.has(e,n)&&(this._defaults[n]=e[n]);this._actions.forEach((function(n){a.has(e,n.dest)&&(n.defaultValue=e[n.dest])}))},v.prototype.getDefault=function(e){var n=a.has(this._defaults,e)?this._defaults[e]:null;return this._actions.forEach((function(t){t.dest===e&&a.has(t,"defaultValue")&&(n=t.defaultValue)})),n},v.prototype.addArgument=function(e,n){if(n=n||{},"string"==typeof(e=e)&&(e=[e]),!Array.isArray(e))throw new TypeError("addArgument first argument should be a string or an array");if("object"!=typeof n||Array.isArray(n))throw new TypeError("addArgument second argument should be a hash");if(!e||1===e.length&&this.prefixChars.indexOf(e[0][0])<0){if(e&&n.dest)throw new Error("dest supplied twice for positional argument");n=this._getPositional(e,n)}else n=this._getOptional(e,n);if(void 0===n.defaultValue){var t=n.dest;a.has(this._defaults,t)?n.defaultValue=this._defaults[t]:void 0!==this.argumentDefault&&(n.defaultValue=this.argumentDefault)}var i=this._popActionClass(n);if("function"!=typeof i)throw new Error(r('Unknown action "%s".',i));var o=new i(n),s=this._registryGet("type",o.type,o.type);if("function"!=typeof s)throw new Error(r('"%s" is not callable',s));return this._addAction(o)},v.prototype.addArgumentGroup=function(e){var n=new x(this,e);return this._actionGroups.push(n),n},v.prototype.addMutuallyExclusiveGroup=function(e){var n=new b(this,e);return this._mutuallyExclusiveGroups.push(n),n},v.prototype._addAction=function(e){var n=this;return this._checkConflict(e),this._actions.push(e),e.container=this,e.optionStrings.forEach((function(t){n._optionStringActions[t]=e})),e.optionStrings.forEach((function(e){e.match(n._regexpNegativeNumber)&&(n._hasNegativeNumberOptionals.some(Boolean)||n._hasNegativeNumberOptionals.push(!0))})),e},v.prototype._removeAction=function(e){var n=this._actions.indexOf(e);n>=0&&this._actions.splice(n,1)},v.prototype._addContainerActions=function(e){var n={};this._actionGroups.forEach((function(e){if(n[e.title])throw new Error(r('Cannot merge actions - two groups are named "%s".',e.title));n[e.title]=e}));var t,i={};function a(e){return e.getName()}e._actionGroups.forEach((function(e){n[e.title]||(n[e.title]=this.addArgumentGroup({title:e.title,description:e.description})),e._groupActions.forEach((function(t){i[a(t)]=n[e.title]}))}),this),e._mutuallyExclusiveGroups.forEach((function(e){t=this.addMutuallyExclusiveGroup({required:e.required}),e._groupActions.forEach((function(e){i[a(e)]=t}))}),this),e._actions.forEach((function(e){var n=a(e);i[n]?i[n]._addAction(e):this._addAction(e)}))},v.prototype._getPositional=function(e,n){if(Array.isArray(e)&&(e=e[0]),n.required)throw new Error('"required" is an invalid argument for positionals.');return n.nargs!==i.OPTIONAL&&n.nargs!==i.ZERO_OR_MORE&&(n.required=!0),n.nargs===i.ZERO_OR_MORE&&void 0===n.defaultValue&&(n.required=!0),n.dest=e,n.optionStrings=[],n},v.prototype._getOptional=function(e,n){var t=this.prefixChars,i=[],o=[];e.forEach((function(e){if(t.indexOf(e[0])<0)throw new Error(r('Invalid option string "%s": must start with a "%s".',e,t));i.push(e),e.length>1&&t.indexOf(e[1])>=0&&o.push(e)}));var s=n.dest||null;if(delete n.dest,!s){var c=o.length?o[0]:i[0];if(0===(s=a.trimChars(c,this.prefixChars)).length)throw new Error(r('dest= is required for options like "%s"',i.join(", ")));s=s.replace(/-/g,"_")}return n.dest=s,n.optionStrings=i,n},v.prototype._popActionClass=function(e,n){n=n||null;var t=e.action||n;return delete e.action,this._registryGet("action",t,t)},v.prototype._getHandler=function(){var e=this.conflictHandler,n=this["_handleConflict"+a.capitalize(e)];if(void 0===n)throw new Error("invalid conflict resolution value: "+e);return n},v.prototype._checkConflict=function(e){var n=this._optionStringActions,t=[];(e.optionStrings.forEach((function(e){var r=n[e];void 0!==r&&t.push([e,r])})),t.length>0)&&this._getHandler().call(this,e,t)},v.prototype._handleConflictError=function(e,n){var t=n.map((function(e){return e[0]}));throw t=t.join(", "),g(e,r("Conflicting option string(s): %s",t))},v.prototype._handleConflictResolve=function(e,n){var t=this;n.forEach((function(e){var n=e[0],r=e[1],i=r.optionStrings.indexOf(n);i>=0&&r.optionStrings.splice(i,1),delete t._optionStringActions[n],0===r.optionStrings.length&&r.container._removeAction(r)}))}},function(e,n,t){"use strict";var r=t(1),i=t(42),a=e.exports=function(e,n){(n=n||{}).conflictHandler=n.conflictHandler||e.conflictHandler,n.prefixChars=n.prefixChars||e.prefixChars,n.argumentDefault=n.argumentDefault||e.argumentDefault,i.call(this,n),this.title=n.title,this._groupActions=[],this._container=e,this._registries=e._registries,this._actions=e._actions,this._optionStringActions=e._optionStringActions,this._defaults=e._defaults,this._hasNegativeNumberOptionals=e._hasNegativeNumberOptionals,this._mutuallyExclusiveGroups=e._mutuallyExclusiveGroups};r.inherits(a,i),a.prototype._addAction=function(e){return e=i.prototype._addAction.call(this,e),this._groupActions.push(e),e},a.prototype._removeAction=function(e){i.prototype._removeAction.call(this,e);var n=this._groupActions.indexOf(e);n>=0&&this._groupActions.splice(n,1)}},function(e,n,t){"use strict";var r=t(14),i=e.exports=function(e){r.extend(this,e)};i.prototype.isset=function(e){return r.has(this,e)},i.prototype.set=function(e,n){return"object"==typeof e?r.extend(this,e):this[e]=n,this},i.prototype.get=function(e,n){return this[e]?this[e]:n},i.prototype.unset=function(e,n){var t=this[e];return null!==t?(delete this[e],t):n}},function(e,n,t){"use strict";e.exports=i;var r=i.prototype;function i(e,n,t){this.property=e,this.normal=n,t&&(this.space=t)}r.space=null,r.normal={},r.property={}},function(e,n,t){"use strict";var r=t(47),i=t(31);e.exports=s,s.prototype=new r,s.prototype.defined=!0;var a=["boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated"],o=a.length;function s(e,n,t,s){var u,l=-1;for(c(this,"space",s),r.call(this,e,n);++l<o;)c(this,u=a[l],(t&i[u])===i[u])}function c(e,n,t){t&&(e[n]=t)}},function(e,n,t){"use strict";e.exports=i;var r=i.prototype;function i(e,n){this.property=e,this.attribute=n}r.space=null,r.attribute=null,r.property=null,r.boolean=!1,r.booleanish=!1,r.overloadedBoolean=!1,r.number=!1,r.commaSeparated=!1,r.spaceSeparated=!1,r.commaOrSpaceSeparated=!1,r.mustUseProperty=!1,r.defined=!1},function(e,n,t){"use strict";var r=t(108);e.exports=function(e,n){return r(e,n.toLowerCase())}},function(e,n,t){"use strict";e.exports=function(e){var n="string"==typeof e?e.charCodeAt(0):e;return n>=97&&n<=122||n>=65&&n<=90}},function(e,n,t){"use strict";e.exports={position:!0,gfm:!0,commonmark:!1,footnotes:!1,pedantic:!1,blocks:t(153)}},function(e,n,t){"use strict";e.exports=function(e){var n,t=0,i=0,a=e.charAt(t),o={};for(;a in r;)i+=n=r[a],n>1&&(i=Math.floor(i/n)*n),o[i]=t,a=e.charAt(++t);return{indent:i,stops:o}};var r={" ":1,"\t":4}},function(e,n,t){"use strict";var r="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\u0000-\\u0020]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",i="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";n.openCloseTag=new RegExp("^(?:"+r+"|"+i+")"),n.tag=new RegExp("^(?:"+r+"|"+i+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Za-z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)")},function(e,n,t){"use strict";e.exports=function(e,n){return e.indexOf("<",n)}},function(e,n,t){"use strict";e.exports=function(e,n){var t=e.indexOf("[",n),r=e.indexOf("![",n);if(-1===r)return t;return t<r?t:r}},function(e,n,t){e.exports=l;var r=t(215),i=t(21).Buffer;l.ReadableState=u;var a=t(56).EventEmitter;a.listenerCount||(a.listenerCount=function(e,n){return e.listeners(n).length});var o,s=t(7),c=t(8);function u(e,n){var r=(e=e||{}).highWaterMark;this.highWaterMark=r||0===r?r:16384,this.highWaterMark=~~this.highWaterMark,this.buffer=[],this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=!1,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.calledRead=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.objectMode=!!e.objectMode,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(o||(o=t(57).StringDecoder),this.decoder=new o(e.encoding),this.encoding=e.encoding)}function l(e){if(!(this instanceof l))return new l(e);this._readableState=new u(e,this),this.readable=!0,s.call(this)}function p(e,n,t,r,a){var o=function(e,n){var t=null;i.isBuffer(n)||"string"==typeof n||null==n||e.objectMode||(t=new TypeError("Invalid non-string/buffer chunk"));return t}(n,t);if(o)e.emit("error",o);else if(null==t)n.reading=!1,n.ended||function(e,n){if(n.decoder&&!n.ended){var t=n.decoder.end();t&&t.length&&(n.buffer.push(t),n.length+=n.objectMode?1:t.length)}n.ended=!0,n.length>0?d(e):b(e)}(e,n);else if(n.objectMode||t&&t.length>0)if(n.ended&&!a){var s=new Error("stream.push() after EOF");e.emit("error",s)}else if(n.endEmitted&&a){s=new Error("stream.unshift() after end event");e.emit("error",s)}else!n.decoder||a||r||(t=n.decoder.write(t)),n.length+=n.objectMode?1:t.length,a?n.buffer.unshift(t):(n.reading=!1,n.buffer.push(t)),n.needReadable&&d(e),function(e,n){n.readingMore||(n.readingMore=!0,process.nextTick((function(){!function(e,n){var t=n.length;for(;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(e.read(0),t!==n.length);)t=n.length;n.readingMore=!1}(e,n)})))}(e,n);else a||(n.reading=!1);return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(n)}c.inherits=t(2),c.inherits(l,s),l.prototype.push=function(e,n){var t=this._readableState;return"string"!=typeof e||t.objectMode||(n=n||t.defaultEncoding)!==t.encoding&&(e=new i(e,n),n=""),p(this,t,e,n,!1)},l.prototype.unshift=function(e){return p(this,this._readableState,e,"",!0)},l.prototype.setEncoding=function(e){o||(o=t(57).StringDecoder),this._readableState.decoder=new o(e),this._readableState.encoding=e};function f(e,n){return 0===n.length&&n.ended?0:n.objectMode?0===e?0:1:null===e||isNaN(e)?n.flowing&&n.buffer.length?n.buffer[0].length:n.length:e<=0?0:(e>n.highWaterMark&&(n.highWaterMark=function(e){if(e>=8388608)e=8388608;else{e--;for(var n=1;n<32;n<<=1)e|=e>>n;e++}return e}(e)),e>n.length?n.ended?n.length:(n.needReadable=!0,0):e)}function d(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(n.emittedReadable=!0,n.sync?process.nextTick((function(){m(e)})):m(e))}function m(e){e.emit("readable")}function h(e){var n,t=e._readableState;function r(e,r,i){!1===e.write(n)&&t.awaitDrain++}for(t.awaitDrain=0;t.pipesCount&&null!==(n=e.read());)if(1===t.pipesCount?r(t.pipes):y(t.pipes,r),e.emit("data",n),t.awaitDrain>0)return;if(0===t.pipesCount)return t.flowing=!1,void(a.listenerCount(e,"data")>0&&v(e));t.ranOut=!0}function g(){this._readableState.ranOut&&(this._readableState.ranOut=!1,h(this))}function v(e,n){if(e._readableState.flowing)throw new Error("Cannot switch to old mode now.");var t=n||!1,r=!1;e.readable=!0,e.pipe=s.prototype.pipe,e.on=e.addListener=s.prototype.on,e.on("readable",(function(){var n;for(r=!0;!t&&null!==(n=e.read());)e.emit("data",n);null===n&&(r=!1,e._readableState.needReadable=!0)})),e.pause=function(){t=!0,this.emit("pause")},e.resume=function(){t=!1,r?process.nextTick((function(){e.emit("readable")})):this.read(0),this.emit("resume")},e.emit("readable")}function x(e,n){var t,r=n.buffer,a=n.length,o=!!n.decoder,s=!!n.objectMode;if(0===r.length)return null;if(0===a)t=null;else if(s)t=r.shift();else if(!e||e>=a)t=o?r.join(""):i.concat(r,a),r.length=0;else{if(e<r[0].length)t=(p=r[0]).slice(0,e),r[0]=p.slice(e);else if(e===r[0].length)t=r.shift();else{t=o?"":new i(e);for(var c=0,u=0,l=r.length;u<l&&c<e;u++){var p=r[0],f=Math.min(e-c,p.length);o?t+=p.slice(0,f):p.copy(t,c,0,f),f<p.length?r[0]=p.slice(f):r.shift(),c+=f}}}return t}function b(e){var n=e._readableState;if(n.length>0)throw new Error("endReadable called on non-empty stream");!n.endEmitted&&n.calledRead&&(n.ended=!0,process.nextTick((function(){n.endEmitted||0!==n.length||(n.endEmitted=!0,e.readable=!1,e.emit("end"))})))}function y(e,n){for(var t=0,r=e.length;t<r;t++)n(e[t],t)}l.prototype.read=function(e){var n=this._readableState;n.calledRead=!0;var t,r=e;if(("number"!=typeof e||e>0)&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return d(this),null;if(0===(e=f(e,n))&&n.ended)return t=null,n.length>0&&n.decoder&&(t=x(e,n),n.length-=t.length),0===n.length&&b(this),t;var i=n.needReadable;return n.length-e<=n.highWaterMark&&(i=!0),(n.ended||n.reading)&&(i=!1),i&&(n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1),i&&!n.reading&&(e=f(r,n)),null===(t=e>0?x(e,n):null)&&(n.needReadable=!0,e=0),n.length-=e,0!==n.length||n.ended||(n.needReadable=!0),n.ended&&!n.endEmitted&&0===n.length&&b(this),t},l.prototype._read=function(e){this.emit("error",new Error("not implemented"))},l.prototype.pipe=function(e,n){var t=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1;var o=(!n||!1!==n.end)&&e!==process.stdout&&e!==process.stderr?c:l;function s(e){e===t&&l()}function c(){e.end()}i.endEmitted?process.nextTick(o):t.once("end",o),e.on("unpipe",s);var u=function(e){return function(){var n=e._readableState;n.awaitDrain--,0===n.awaitDrain&&h(e)}}(t);function l(){e.removeListener("close",f),e.removeListener("finish",d),e.removeListener("drain",u),e.removeListener("error",p),e.removeListener("unpipe",s),t.removeListener("end",c),t.removeListener("end",l),e._writableState&&!e._writableState.needDrain||u()}function p(n){m(),e.removeListener("error",p),0===a.listenerCount(e,"error")&&e.emit("error",n)}function f(){e.removeListener("finish",d),m()}function d(){e.removeListener("close",f),m()}function m(){t.unpipe(e)}return e.on("drain",u),e._events&&e._events.error?r(e._events.error)?e._events.error.unshift(p):e._events.error=[p,e._events.error]:e.on("error",p),e.once("close",f),e.once("finish",d),e.emit("pipe",t),i.flowing||(this.on("readable",g),i.flowing=!0,process.nextTick((function(){h(t)}))),e},l.prototype.unpipe=function(e){var n=this._readableState;if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,this.removeListener("readable",g),n.flowing=!1,e&&e.emit("unpipe",this)),this;if(!e){var t=n.pipes,r=n.pipesCount;n.pipes=null,n.pipesCount=0,this.removeListener("readable",g),n.flowing=!1;for(var i=0;i<r;i++)t[i].emit("unpipe",this);return this}return-1===(i=function(e,n){for(var t=0,r=e.length;t<r;t++)if(e[t]===n)return t;return-1}(n.pipes,e))||(n.pipes.splice(i,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this)),this},l.prototype.on=function(e,n){var t=s.prototype.on.call(this,e,n);if("data"!==e||this._readableState.flowing||v(this),"readable"===e&&this.readable){var r=this._readableState;r.readableListening||(r.readableListening=!0,r.emittedReadable=!1,r.needReadable=!0,r.reading?r.length&&d(this):this.read(0))}return t},l.prototype.addListener=l.prototype.on,l.prototype.resume=function(){v(this),this.read(0),this.emit("resume")},l.prototype.pause=function(){v(this,!0),this.emit("pause")},l.prototype.wrap=function(e){var n=this._readableState,t=!1,r=this;for(var i in e.on("end",(function(){if(n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&r.push(e)}r.push(null)})),e.on("data",(function(i){(n.decoder&&(i=n.decoder.write(i)),n.objectMode&&null==i)||(n.objectMode||i&&i.length)&&(r.push(i)||(t=!0,e.pause()))})),e)"function"==typeof e[i]&&void 0===this[i]&&(this[i]=function(n){return function(){return e[n].apply(e,arguments)}}(i));return y(["error","close","destroy","pause","resume"],(function(n){e.on(n,r.emit.bind(r,n))})),r._read=function(n){t&&(t=!1,e.resume())},r},l._fromList=x},function(e,n){e.exports=require("events")},function(e,n,t){var r=t(21).Buffer,i=r.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};var a=n.StringDecoder=function(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),function(e){if(e&&!i(e))throw new Error("Unknown encoding: "+e)}(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=s;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=c;break;default:return void(this.write=o)}this.charBuffer=new r(6),this.charReceived=0,this.charLength=0};function o(e){return e.toString(this.encoding)}function s(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function c(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}a.prototype.write=function(e){for(var n="";this.charLength;){var t=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,t),this.charReceived+=t,this.charReceived<this.charLength)return"";if(e=e.slice(t,e.length),!((i=(n=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(n.length-1))>=55296&&i<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return n;break}this.charLength+=this.surrogateSize,n=""}this.detectIncompleteChar(e);var r=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,r),r-=this.charReceived);var i;r=(n+=e.toString(this.encoding,0,r)).length-1;if((i=n.charCodeAt(r))>=55296&&i<=56319){var a=this.surrogateSize;return this.charLength+=a,this.charReceived+=a,this.charBuffer.copy(this.charBuffer,a,0,a),e.copy(this.charBuffer,0,0,a),n.substring(0,r)}return n},a.prototype.detectIncompleteChar=function(e){for(var n=e.length>=3?3:e.length;n>0;n--){var t=e[e.length-n];if(1==n&&t>>5==6){this.charLength=2;break}if(n<=2&&t>>4==14){this.charLength=3;break}if(n<=3&&t>>3==30){this.charLength=4;break}}this.charReceived=n},a.prototype.end=function(e){var n="";if(e&&e.length&&(n=this.write(e)),this.charReceived){var t=this.charReceived,r=this.charBuffer,i=this.encoding;n+=r.slice(0,t).toString(i)}return n}},function(e,n,t){e.exports=c;var r=t(21).Buffer;c.WritableState=s;var i=t(8);i.inherits=t(2);var a=t(7);function o(e,n,t){this.chunk=e,this.encoding=n,this.callback=t}function s(e,n){var t=(e=e||{}).highWaterMark;this.highWaterMark=t||0===t?t:16384,this.objectMode=!!e.objectMode,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var r=!1===e.decodeStrings;this.decodeStrings=!r,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var t=e._writableState,r=t.sync,i=t.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(t),n)!function(e,n,t,r,i){t?process.nextTick((function(){i(r)})):i(r);e._writableState.errorEmitted=!0,e.emit("error",r)}(e,0,r,n,i);else{var a=p(e,t);a||t.bufferProcessing||!t.buffer.length||function(e,n){n.bufferProcessing=!0;for(var t=0;t<n.buffer.length;t++){var r=n.buffer[t],i=r.chunk,a=r.encoding,o=r.callback,s=n.objectMode?1:i.length;if(u(e,n,s,i,a,o),n.writing){t++;break}}n.bufferProcessing=!1,t<n.buffer.length?n.buffer=n.buffer.slice(t):n.buffer.length=0}(e,t),r?process.nextTick((function(){l(e,t,a,i)})):l(e,t,a,i)}}(n,e)},this.writecb=null,this.writelen=0,this.buffer=[],this.errorEmitted=!1}function c(e){var n=t(36);if(!(this instanceof c||this instanceof n))return new c(e);this._writableState=new s(e,this),this.writable=!0,a.call(this)}function u(e,n,t,r,i,a){n.writelen=t,n.writecb=a,n.writing=!0,n.sync=!0,e._write(r,i,n.onwrite),n.sync=!1}function l(e,n,t,r){t||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),r(),t&&f(e,n)}function p(e,n){return n.ending&&0===n.length&&!n.finished&&!n.writing}function f(e,n){var t=p(0,n);return t&&(n.finished=!0,e.emit("finish")),t}i.inherits(c,a),c.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe. Not readable."))},c.prototype.write=function(e,n,t){var i=this._writableState,a=!1;return"function"==typeof n&&(t=n,n=null),r.isBuffer(e)?n="buffer":n||(n=i.defaultEncoding),"function"!=typeof t&&(t=function(){}),i.ended?function(e,n,t){var r=new Error("write after end");e.emit("error",r),process.nextTick((function(){t(r)}))}(this,0,t):function(e,n,t,i){var a=!0;if(!r.isBuffer(t)&&"string"!=typeof t&&null!=t&&!n.objectMode){var o=new TypeError("Invalid non-string/buffer chunk");e.emit("error",o),process.nextTick((function(){i(o)})),a=!1}return a}(this,i,e,t)&&(a=function(e,n,t,i,a){t=function(e,n,t){e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=new r(n,t));return n}(n,t,i),r.isBuffer(t)&&(i="buffer");var s=n.objectMode?1:t.length;n.length+=s;var c=n.length<n.highWaterMark;c||(n.needDrain=!0);n.writing?n.buffer.push(new o(t,i,a)):u(e,n,s,t,i,a);return c}(this,i,e,n,t)),a},c.prototype._write=function(e,n,t){t(new Error("not implemented"))},c.prototype.end=function(e,n,t){var r=this._writableState;"function"==typeof e?(t=e,e=null,n=null):"function"==typeof n&&(t=n,n=null),null!=e&&this.write(e,n),r.ending||r.finished||function(e,n,t){n.ending=!0,f(e,n),t&&(n.finished?process.nextTick(t):e.once("finish",t));n.ended=!0}(this,r,t)}},function(e,n,t){e.exports=o;var r=t(36),i=t(8);function a(e,n){this.afterTransform=function(e,t){return function(e,n,t){var r=e._transformState;r.transforming=!1;var i=r.writecb;if(!i)return e.emit("error",new Error("no writecb in Transform class"));r.writechunk=null,r.writecb=null,null!=t&&e.push(t);i&&i(n);var a=e._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&e._read(a.highWaterMark)}(n,e,t)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null}function o(e){if(!(this instanceof o))return new o(e);r.call(this,e);this._transformState=new a(e,this);var n=this;this._readableState.needReadable=!0,this._readableState.sync=!1,this.once("finish",(function(){"function"==typeof this._flush?this._flush((function(e){s(n,e)})):s(n)}))}function s(e,n){if(n)return e.emit("error",n);var t=e._writableState,r=(e._readableState,e._transformState);if(t.length)throw new Error("calling transform done when ws.length != 0");if(r.transforming)throw new Error("calling transform done when still transforming");return e.push(null)}i.inherits=t(2),i.inherits(o,r),o.prototype.push=function(e,n){return this._transformState.needTransform=!1,r.prototype.push.call(this,e,n)},o.prototype._transform=function(e,n,t){throw new Error("not implemented")},o.prototype._write=function(e,n,t){var r=this._transformState;if(r.writecb=t,r.writechunk=e,r.writeencoding=n,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0}},function(e,n,t){"use strict";var r=t(22);e.exports=x;var i,a=t(220);x.ReadableState=v;t(56).EventEmitter;var o=function(e,n){return e.listeners(n).length},s=t(61),c=t(23).Buffer,u=global.Uint8Array||function(){};var l=Object.create(t(8));l.inherits=t(2);var p=t(1),f=void 0;f=p&&p.debuglog?p.debuglog("stream"):function(){};var d,m=t(221),h=t(62);l.inherits(x,s);var g=["error","close","destroy","pause","resume"];function v(e,n){e=e||{};var r=n instanceof(i=i||t(13));this.objectMode=!!e.objectMode,r&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var a=e.highWaterMark,o=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=a||0===a?a:r&&(o||0===o)?o:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(d||(d=t(64).StringDecoder),this.decoder=new d(e.encoding),this.encoding=e.encoding)}function x(e){if(i=i||t(13),!(this instanceof x))return new x(e);this._readableState=new v(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),s.call(this)}function b(e,n,t,r,i){var a,o=e._readableState;null===n?(o.reading=!1,function(e,n){if(n.ended)return;if(n.decoder){var t=n.decoder.end();t&&t.length&&(n.buffer.push(t),n.length+=n.objectMode?1:t.length)}n.ended=!0,k(e)}(e,o)):(i||(a=function(e,n){var t;r=n,c.isBuffer(r)||r instanceof u||"string"==typeof n||void 0===n||e.objectMode||(t=new TypeError("Invalid non-string/buffer chunk"));var r;return t}(o,n)),a?e.emit("error",a):o.objectMode||n&&n.length>0?("string"==typeof n||o.objectMode||Object.getPrototypeOf(n)===c.prototype||(n=function(e){return c.from(e)}(n)),r?o.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):y(e,o,n,!0):o.ended?e.emit("error",new Error("stream.push() after EOF")):(o.reading=!1,o.decoder&&!t?(n=o.decoder.write(n),o.objectMode||0!==n.length?y(e,o,n,!1):S(e,o)):y(e,o,n,!1))):r||(o.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(o)}function y(e,n,t,r){n.flowing&&0===n.length&&!n.sync?(e.emit("data",t),e.read(0)):(n.length+=n.objectMode?1:t.length,r?n.buffer.unshift(t):n.buffer.push(t),n.needReadable&&k(e)),S(e,n)}Object.defineProperty(x.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),x.prototype.destroy=h.destroy,x.prototype._undestroy=h.undestroy,x.prototype._destroy=function(e,n){this.push(null),n(e)},x.prototype.push=function(e,n){var t,r=this._readableState;return r.objectMode?t=!0:"string"==typeof e&&((n=n||r.defaultEncoding)!==r.encoding&&(e=c.from(e,n),n=""),t=!0),b(this,e,n,!1,t)},x.prototype.unshift=function(e){return b(this,e,null,!0,!1)},x.prototype.isPaused=function(){return!1===this._readableState.flowing},x.prototype.setEncoding=function(e){return d||(d=t(64).StringDecoder),this._readableState.decoder=new d(e),this._readableState.encoding=e,this};function w(e,n){return e<=0||0===n.length&&n.ended?0:n.objectMode?1:e!=e?n.flowing&&n.length?n.buffer.head.data.length:n.length:(e>n.highWaterMark&&(n.highWaterMark=function(e){return e>=8388608?e=8388608:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=n.length?e:n.ended?n.length:(n.needReadable=!0,0))}function k(e){var n=e._readableState;n.needReadable=!1,n.emittedReadable||(f("emitReadable",n.flowing),n.emittedReadable=!0,n.sync?r.nextTick(_,e):_(e))}function _(e){f("emit readable"),e.emit("readable"),C(e)}function S(e,n){n.readingMore||(n.readingMore=!0,r.nextTick(E,e,n))}function E(e,n){for(var t=n.length;!n.reading&&!n.flowing&&!n.ended&&n.length<n.highWaterMark&&(f("maybeReadMore read 0"),e.read(0),t!==n.length);)t=n.length;n.readingMore=!1}function A(e){f("readable nexttick read 0"),e.read(0)}function $(e,n){n.reading||(f("resume read 0"),e.read(0)),n.resumeScheduled=!1,n.awaitDrain=0,e.emit("resume"),C(e),n.flowing&&!n.reading&&e.read(0)}function C(e){var n=e._readableState;for(f("flow",n.flowing);n.flowing&&null!==e.read(););}function O(e,n){return 0===n.length?null:(n.objectMode?t=n.buffer.shift():!e||e>=n.length?(t=n.decoder?n.buffer.join(""):1===n.buffer.length?n.buffer.head.data:n.buffer.concat(n.length),n.buffer.clear()):t=function(e,n,t){var r;e<n.head.data.length?(r=n.head.data.slice(0,e),n.head.data=n.head.data.slice(e)):r=e===n.head.data.length?n.shift():t?function(e,n){var t=n.head,r=1,i=t.data;e-=i.length;for(;t=t.next;){var a=t.data,o=e>a.length?a.length:e;if(o===a.length?i+=a:i+=a.slice(0,e),0===(e-=o)){o===a.length?(++r,t.next?n.head=t.next:n.head=n.tail=null):(n.head=t,t.data=a.slice(o));break}++r}return n.length-=r,i}(e,n):function(e,n){var t=c.allocUnsafe(e),r=n.head,i=1;r.data.copy(t),e-=r.data.length;for(;r=r.next;){var a=r.data,o=e>a.length?a.length:e;if(a.copy(t,t.length-e,0,o),0===(e-=o)){o===a.length?(++i,r.next?n.head=r.next:n.head=n.tail=null):(n.head=r,r.data=a.slice(o));break}++i}return n.length-=i,t}(e,n);return r}(e,n.buffer,n.decoder),t);var t}function M(e){var n=e._readableState;if(n.length>0)throw new Error('"endReadable()" called on non-empty stream');n.endEmitted||(n.ended=!0,r.nextTick(j,n,e))}function j(e,n){e.endEmitted||0!==e.length||(e.endEmitted=!0,n.readable=!1,n.emit("end"))}function F(e,n){for(var t=0,r=e.length;t<r;t++)if(e[t]===n)return t;return-1}x.prototype.read=function(e){f("read",e),e=parseInt(e,10);var n=this._readableState,t=e;if(0!==e&&(n.emittedReadable=!1),0===e&&n.needReadable&&(n.length>=n.highWaterMark||n.ended))return f("read: emitReadable",n.length,n.ended),0===n.length&&n.ended?M(this):k(this),null;if(0===(e=w(e,n))&&n.ended)return 0===n.length&&M(this),null;var r,i=n.needReadable;return f("need readable",i),(0===n.length||n.length-e<n.highWaterMark)&&f("length less than watermark",i=!0),n.ended||n.reading?f("reading or ended",i=!1):i&&(f("do read"),n.reading=!0,n.sync=!0,0===n.length&&(n.needReadable=!0),this._read(n.highWaterMark),n.sync=!1,n.reading||(e=w(t,n))),null===(r=e>0?O(e,n):null)?(n.needReadable=!0,e=0):n.length-=e,0===n.length&&(n.ended||(n.needReadable=!0),t!==e&&n.ended&&M(this)),null!==r&&this.emit("data",r),r},x.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},x.prototype.pipe=function(e,n){var t=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,f("pipe count=%d opts=%j",i.pipesCount,n);var s=(!n||!1!==n.end)&&e!==process.stdout&&e!==process.stderr?u:x;function c(n,r){f("onunpipe"),n===t&&r&&!1===r.hasUnpiped&&(r.hasUnpiped=!0,f("cleanup"),e.removeListener("close",g),e.removeListener("finish",v),e.removeListener("drain",l),e.removeListener("error",h),e.removeListener("unpipe",c),t.removeListener("end",u),t.removeListener("end",x),t.removeListener("data",m),p=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||l())}function u(){f("onend"),e.end()}i.endEmitted?r.nextTick(s):t.once("end",s),e.on("unpipe",c);var l=function(e){return function(){var n=e._readableState;f("pipeOnDrain",n.awaitDrain),n.awaitDrain&&n.awaitDrain--,0===n.awaitDrain&&o(e,"data")&&(n.flowing=!0,C(e))}}(t);e.on("drain",l);var p=!1;var d=!1;function m(n){f("ondata"),d=!1,!1!==e.write(n)||d||((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==F(i.pipes,e))&&!p&&(f("false write response, pause",t._readableState.awaitDrain),t._readableState.awaitDrain++,d=!0),t.pause())}function h(n){f("onerror",n),x(),e.removeListener("error",h),0===o(e,"error")&&e.emit("error",n)}function g(){e.removeListener("finish",v),x()}function v(){f("onfinish"),e.removeListener("close",g),x()}function x(){f("unpipe"),t.unpipe(e)}return t.on("data",m),function(e,n,t){if("function"==typeof e.prependListener)return e.prependListener(n,t);e._events&&e._events[n]?a(e._events[n])?e._events[n].unshift(t):e._events[n]=[t,e._events[n]]:e.on(n,t)}(e,"error",h),e.once("close",g),e.once("finish",v),e.emit("pipe",t),i.flowing||(f("pipe resume"),t.resume()),e},x.prototype.unpipe=function(e){var n=this._readableState,t={hasUnpiped:!1};if(0===n.pipesCount)return this;if(1===n.pipesCount)return e&&e!==n.pipes||(e||(e=n.pipes),n.pipes=null,n.pipesCount=0,n.flowing=!1,e&&e.emit("unpipe",this,t)),this;if(!e){var r=n.pipes,i=n.pipesCount;n.pipes=null,n.pipesCount=0,n.flowing=!1;for(var a=0;a<i;a++)r[a].emit("unpipe",this,t);return this}var o=F(n.pipes,e);return-1===o||(n.pipes.splice(o,1),n.pipesCount-=1,1===n.pipesCount&&(n.pipes=n.pipes[0]),e.emit("unpipe",this,t)),this},x.prototype.on=function(e,n){var t=s.prototype.on.call(this,e,n);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var i=this._readableState;i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.emittedReadable=!1,i.reading?i.length&&k(this):r.nextTick(A,this))}return t},x.prototype.addListener=x.prototype.on,x.prototype.resume=function(){var e=this._readableState;return e.flowing||(f("resume"),e.flowing=!0,function(e,n){n.resumeScheduled||(n.resumeScheduled=!0,r.nextTick($,e,n))}(this,e)),this},x.prototype.pause=function(){return f("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(f("pause"),this._readableState.flowing=!1,this.emit("pause")),this},x.prototype.wrap=function(e){var n=this,t=this._readableState,r=!1;for(var i in e.on("end",(function(){if(f("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)})),e.on("data",(function(i){(f("wrapped data"),t.decoder&&(i=t.decoder.write(i)),t.objectMode&&null==i)||(t.objectMode||i&&i.length)&&(n.push(i)||(r=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(n){return function(){return e[n].apply(e,arguments)}}(i));for(var a=0;a<g.length;a++)e.on(g[a],this.emit.bind(this,g[a]));return this._read=function(n){f("wrapped _read",n),r&&(r=!1,e.resume())},this},Object.defineProperty(x.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),x._fromList=O},function(e,n,t){e.exports=t(7)},function(e,n,t){"use strict";var r=t(22);function i(e,n){e.emit("error",n)}e.exports={destroy:function(e,n){var t=this,a=this._readableState&&this._readableState.destroyed,o=this._writableState&&this._writableState.destroyed;return a||o?(n?n(e):!e||this._writableState&&this._writableState.errorEmitted||r.nextTick(i,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!n&&e?(r.nextTick(i,t,e),t._writableState&&(t._writableState.errorEmitted=!0)):n&&n(e)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,n,t){"use strict";var r=t(22);function i(e){var n=this;this.next=null,this.entry=null,this.finish=function(){!function(e,n,t){var r=e.entry;e.entry=null;for(;r;){var i=r.callback;n.pendingcb--,i(t),r=r.next}n.corkedRequestsFree?n.corkedRequestsFree.next=e:n.corkedRequestsFree=e}(n,e)}}e.exports=g;var a,o=!process.browser&&["v0.10","v0.9."].indexOf(process.version.slice(0,5))>-1?setImmediate:r.nextTick;g.WritableState=h;var s=Object.create(t(8));s.inherits=t(2);var c={deprecate:t(222)},u=t(61),l=t(23).Buffer,p=global.Uint8Array||function(){};var f,d=t(62);function m(){}function h(e,n){a=a||t(13),e=e||{};var s=n instanceof a;this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var c=e.highWaterMark,u=e.writableHighWaterMark,l=this.objectMode?16:16384;this.highWaterMark=c||0===c?c:s&&(u||0===u)?u:l,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var p=!1===e.decodeStrings;this.decodeStrings=!p,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,n){var t=e._writableState,i=t.sync,a=t.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(t),n)!function(e,n,t,i,a){--n.pendingcb,t?(r.nextTick(a,i),r.nextTick(k,e,n),e._writableState.errorEmitted=!0,e.emit("error",i)):(a(i),e._writableState.errorEmitted=!0,e.emit("error",i),k(e,n))}(e,t,i,n,a);else{var s=y(t);s||t.corked||t.bufferProcessing||!t.bufferedRequest||b(e,t),i?o(x,e,t,s,a):x(e,t,s,a)}}(n,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new i(this)}function g(e){if(a=a||t(13),!(f.call(g,this)||this instanceof a))return new g(e);this._writableState=new h(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),u.call(this)}function v(e,n,t,r,i,a,o){n.writelen=r,n.writecb=o,n.writing=!0,n.sync=!0,t?e._writev(i,n.onwrite):e._write(i,a,n.onwrite),n.sync=!1}function x(e,n,t,r){t||function(e,n){0===n.length&&n.needDrain&&(n.needDrain=!1,e.emit("drain"))}(e,n),n.pendingcb--,r(),k(e,n)}function b(e,n){n.bufferProcessing=!0;var t=n.bufferedRequest;if(e._writev&&t&&t.next){var r=n.bufferedRequestCount,a=new Array(r),o=n.corkedRequestsFree;o.entry=t;for(var s=0,c=!0;t;)a[s]=t,t.isBuf||(c=!1),t=t.next,s+=1;a.allBuffers=c,v(e,n,!0,n.length,a,"",o.finish),n.pendingcb++,n.lastBufferedRequest=null,o.next?(n.corkedRequestsFree=o.next,o.next=null):n.corkedRequestsFree=new i(n),n.bufferedRequestCount=0}else{for(;t;){var u=t.chunk,l=t.encoding,p=t.callback;if(v(e,n,!1,n.objectMode?1:u.length,u,l,p),t=t.next,n.bufferedRequestCount--,n.writing)break}null===t&&(n.lastBufferedRequest=null)}n.bufferedRequest=t,n.bufferProcessing=!1}function y(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function w(e,n){e._final((function(t){n.pendingcb--,t&&e.emit("error",t),n.prefinished=!0,e.emit("prefinish"),k(e,n)}))}function k(e,n){var t=y(n);return t&&(!function(e,n){n.prefinished||n.finalCalled||("function"==typeof e._final?(n.pendingcb++,n.finalCalled=!0,r.nextTick(w,e,n)):(n.prefinished=!0,e.emit("prefinish")))}(e,n),0===n.pendingcb&&(n.finished=!0,e.emit("finish"))),t}s.inherits(g,u),h.prototype.getBuffer=function(){for(var e=this.bufferedRequest,n=[];e;)n.push(e),e=e.next;return n},function(){try{Object.defineProperty(h.prototype,"buffer",{get:c.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(f=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!f.call(this,e)||this===g&&(e&&e._writableState instanceof h)}})):f=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,n,t){var i,a=this._writableState,o=!1,s=!a.objectMode&&(i=e,l.isBuffer(i)||i instanceof p);return s&&!l.isBuffer(e)&&(e=function(e){return l.from(e)}(e)),"function"==typeof n&&(t=n,n=null),s?n="buffer":n||(n=a.defaultEncoding),"function"!=typeof t&&(t=m),a.ended?function(e,n){var t=new Error("write after end");e.emit("error",t),r.nextTick(n,t)}(this,t):(s||function(e,n,t,i){var a=!0,o=!1;return null===t?o=new TypeError("May not write null values to stream"):"string"==typeof t||void 0===t||n.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(e.emit("error",o),r.nextTick(i,o),a=!1),a}(this,a,e,t))&&(a.pendingcb++,o=function(e,n,t,r,i,a){if(!t){var o=function(e,n,t){e.objectMode||!1===e.decodeStrings||"string"!=typeof n||(n=l.from(n,t));return n}(n,r,i);r!==o&&(t=!0,i="buffer",r=o)}var s=n.objectMode?1:r.length;n.length+=s;var c=n.length<n.highWaterMark;c||(n.needDrain=!0);if(n.writing||n.corked){var u=n.lastBufferedRequest;n.lastBufferedRequest={chunk:r,encoding:i,isBuf:t,callback:a,next:null},u?u.next=n.lastBufferedRequest:n.bufferedRequest=n.lastBufferedRequest,n.bufferedRequestCount+=1}else v(e,n,!1,s,r,i,a);return c}(this,a,s,e,n,t)),o},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||b(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,n,t){t(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,n,t){var i=this._writableState;"function"==typeof e?(t=e,e=null,n=null):"function"==typeof n&&(t=n,n=null),null!=e&&this.write(e,n),i.corked&&(i.corked=1,this.uncork()),i.ending||i.finished||function(e,n,t){n.ending=!0,k(e,n),t&&(n.finished?r.nextTick(t):e.once("finish",t));n.ended=!0,e.writable=!1}(this,i,t)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=d.destroy,g.prototype._undestroy=d.undestroy,g.prototype._destroy=function(e,n){this.end(),n(e)}},function(e,n,t){"use strict";var r=t(23).Buffer,i=r.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function a(e){var n;switch(this.encoding=function(e){var n=function(e){if(!e)return"utf8";for(var n;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(n)return;e=(""+e).toLowerCase(),n=!0}}(e);if("string"!=typeof n&&(r.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return n||e}(e),this.encoding){case"utf16le":this.text=c,this.end=u,n=4;break;case"utf8":this.fillLast=s,n=4;break;case"base64":this.text=l,this.end=p,n=3;break;default:return this.write=f,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=r.allocUnsafe(n)}function o(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var n=this.lastTotal-this.lastNeed,t=function(e,n,t){if(128!=(192&n[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&n.length>1){if(128!=(192&n[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&n.length>2&&128!=(192&n[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==t?t:this.lastNeed<=e.length?(e.copy(this.lastChar,n,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,n,0,e.length),void(this.lastNeed-=e.length))}function c(e,n){if((e.length-n)%2==0){var t=e.toString("utf16le",n);if(t){var r=t.charCodeAt(t.length-1);if(r>=55296&&r<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],t.slice(0,-1)}return t}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",n,e.length-1)}function u(e){var n=e&&e.length?this.write(e):"";if(this.lastNeed){var t=this.lastTotal-this.lastNeed;return n+this.lastChar.toString("utf16le",0,t)}return n}function l(e,n){var t=(e.length-n)%3;return 0===t?e.toString("base64",n):(this.lastNeed=3-t,this.lastTotal=3,1===t?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",n,e.length-t))}function p(e){var n=e&&e.length?this.write(e):"";return this.lastNeed?n+this.lastChar.toString("base64",0,3-this.lastNeed):n}function f(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}n.StringDecoder=a,a.prototype.write=function(e){if(0===e.length)return"";var n,t;if(this.lastNeed){if(void 0===(n=this.fillLast(e)))return"";t=this.lastNeed,this.lastNeed=0}else t=0;return t<e.length?n?n+this.text(e,t):this.text(e,t):n||""},a.prototype.end=function(e){var n=e&&e.length?this.write(e):"";return this.lastNeed?n+"�":n},a.prototype.text=function(e,n){var t=function(e,n,t){var r=n.length-1;if(r<t)return 0;var i=o(n[r]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--r<t||-2===i)return 0;if((i=o(n[r]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--r<t||-2===i)return 0;if((i=o(n[r]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,n);if(!this.lastNeed)return e.toString("utf8",n);this.lastTotal=t;var r=e.length-(t-this.lastNeed);return e.copy(this.lastChar,0,r),e.toString("utf8",n,r)},a.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,n,t){"use strict";e.exports=o;var r=t(13),i=Object.create(t(8));function a(e,n){var t=this._transformState;t.transforming=!1;var r=t.writecb;if(!r)return this.emit("error",new Error("write callback called multiple times"));t.writechunk=null,t.writecb=null,null!=n&&this.push(n),r(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function o(e){if(!(this instanceof o))return new o(e);r.call(this,e),this._transformState={afterTransform:a.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush((function(n,t){c(e,n,t)})):c(this,null,null)}function c(e,n,t){if(n)return e.emit("error",n);if(null!=t&&e.push(t),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}i.inherits=t(2),i.inherits(o,r),o.prototype.push=function(e,n){return this._transformState.needTransform=!1,r.prototype.push.call(this,e,n)},o.prototype._transform=function(e,n,t){throw new Error("_transform() is not implemented")},o.prototype._write=function(e,n,t){var r=this._transformState;if(r.writecb=t,r.writechunk=e,r.writeencoding=n,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},o.prototype._read=function(e){var n=this._transformState;null!==n.writechunk&&n.writecb&&!n.transforming?(n.transforming=!0,this._transform(n.writechunk,n.writeencoding,n.afterTransform)):n.needTransform=!0},o.prototype._destroy=function(e,n){var t=this;r.prototype._destroy.call(this,e,(function(e){n(e),t.emit("close")}))}},function(e,n,t){var r=t(67),i=t(16),a=t(68).ArraySet,o=t(233).MappingList;function s(e){e||(e={}),this._file=i.getArg(e,"file",null),this._sourceRoot=i.getArg(e,"sourceRoot",null),this._skipValidation=i.getArg(e,"skipValidation",!1),this._sources=new a,this._names=new a,this._mappings=new o,this._sourcesContents=null}s.prototype._version=3,s.fromSourceMap=function(e){var n=e.sourceRoot,t=new s({file:e.file,sourceRoot:n});return e.eachMapping((function(e){var r={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(r.source=e.source,null!=n&&(r.source=i.relative(n,r.source)),r.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(r.name=e.name)),t.addMapping(r)})),e.sources.forEach((function(r){var a=r;null!==n&&(a=i.relative(n,r)),t._sources.has(a)||t._sources.add(a);var o=e.sourceContentFor(r);null!=o&&t.setSourceContent(r,o)})),t},s.prototype.addMapping=function(e){var n=i.getArg(e,"generated"),t=i.getArg(e,"original",null),r=i.getArg(e,"source",null),a=i.getArg(e,"name",null);this._skipValidation||this._validateMapping(n,t,r,a),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=a&&(a=String(a),this._names.has(a)||this._names.add(a)),this._mappings.add({generatedLine:n.line,generatedColumn:n.column,originalLine:null!=t&&t.line,originalColumn:null!=t&&t.column,source:r,name:a})},s.prototype.setSourceContent=function(e,n){var t=e;null!=this._sourceRoot&&(t=i.relative(this._sourceRoot,t)),null!=n?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[i.toSetString(t)]=n):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(t)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},s.prototype.applySourceMap=function(e,n,t){var r=n;if(null==n){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=e.file}var o=this._sourceRoot;null!=o&&(r=i.relative(o,r));var s=new a,c=new a;this._mappings.unsortedForEach((function(n){if(n.source===r&&null!=n.originalLine){var a=e.originalPositionFor({line:n.originalLine,column:n.originalColumn});null!=a.source&&(n.source=a.source,null!=t&&(n.source=i.join(t,n.source)),null!=o&&(n.source=i.relative(o,n.source)),n.originalLine=a.line,n.originalColumn=a.column,null!=a.name&&(n.name=a.name))}var u=n.source;null==u||s.has(u)||s.add(u);var l=n.name;null==l||c.has(l)||c.add(l)}),this),this._sources=s,this._names=c,e.sources.forEach((function(n){var r=e.sourceContentFor(n);null!=r&&(null!=t&&(n=i.join(t,n)),null!=o&&(n=i.relative(o,n)),this.setSourceContent(n,r))}),this)},s.prototype._validateMapping=function(e,n,t,r){if(n&&"number"!=typeof n.line&&"number"!=typeof n.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||n||t||r)&&!(e&&"line"in e&&"column"in e&&n&&"line"in n&&"column"in n&&e.line>0&&e.column>=0&&n.line>0&&n.column>=0&&t))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:t,original:n,name:r}))},s.prototype._serializeMappings=function(){for(var e,n,t,a,o=0,s=1,c=0,u=0,l=0,p=0,f="",d=this._mappings.toArray(),m=0,h=d.length;m<h;m++){if(e="",(n=d[m]).generatedLine!==s)for(o=0;n.generatedLine!==s;)e+=";",s++;else if(m>0){if(!i.compareByGeneratedPositionsInflated(n,d[m-1]))continue;e+=","}e+=r.encode(n.generatedColumn-o),o=n.generatedColumn,null!=n.source&&(a=this._sources.indexOf(n.source),e+=r.encode(a-p),p=a,e+=r.encode(n.originalLine-1-u),u=n.originalLine-1,e+=r.encode(n.originalColumn-c),c=n.originalColumn,null!=n.name&&(t=this._names.indexOf(n.name),e+=r.encode(t-l),l=t)),f+=e}return f},s.prototype._generateSourcesContent=function(e,n){return e.map((function(e){if(!this._sourcesContents)return null;null!=n&&(e=i.relative(n,e));var t=i.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,t)?this._sourcesContents[t]:null}),this)},s.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},s.prototype.toString=function(){return JSON.stringify(this.toJSON())},n.SourceMapGenerator=s},function(e,n,t){var r=t(232);n.encode=function(e){var n,t="",i=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{n=31&i,(i>>>=5)>0&&(n|=32),t+=r.encode(n)}while(i>0);return t},n.decode=function(e,n,t){var i,a,o,s,c=e.length,u=0,l=0;do{if(n>=c)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(a=r.decode(e.charCodeAt(n++))))throw new Error("Invalid base64 digit: "+e.charAt(n-1));i=!!(32&a),u+=(a&=31)<<l,l+=5}while(i);t.value=(s=(o=u)>>1,1==(1&o)?-s:s),t.rest=n}},function(e,n,t){var r=t(16),i=Object.prototype.hasOwnProperty,a="undefined"!=typeof Map;function o(){this._array=[],this._set=a?new Map:Object.create(null)}o.fromArray=function(e,n){for(var t=new o,r=0,i=e.length;r<i;r++)t.add(e[r],n);return t},o.prototype.size=function(){return a?this._set.size:Object.getOwnPropertyNames(this._set).length},o.prototype.add=function(e,n){var t=a?e:r.toSetString(e),o=a?this.has(e):i.call(this._set,t),s=this._array.length;o&&!n||this._array.push(e),o||(a?this._set.set(e,s):this._set[t]=s)},o.prototype.has=function(e){if(a)return this._set.has(e);var n=r.toSetString(e);return i.call(this._set,n)},o.prototype.indexOf=function(e){if(a){var n=this._set.get(e);if(n>=0)return n}else{var t=r.toSetString(e);if(i.call(this._set,t))return this._set[t]}throw new Error('"'+e+'" is not in the set.')},o.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},o.prototype.toArray=function(){return this._array.slice()},n.ArraySet=o},function(e){e.exports=JSON.parse('{"name":"muhblog-reason","version":"0.1.0","main":"dist/index.js","license":"MIT","repository":{"type":"git","url":"https://github.com/elcr/muhblog-reason.git"},"author":"elcr","scripts":{"build":"bsb -make-world -clean-world"},"dependencies":{"argparse":"^1.0.10","bootstrap":"^4.5.0","bs-bastet":"ssh://git@github.com:elcr/bs-bastet-without-bisect.git","bs-css-emotion":"^1.2.0","bs-platform":"^7.3.2","emotion-server":"^10.0.27","markdown-metadata-bs":"ssh://git@github.com:elcr/markdown-metadata-bs.git","mime-types":"^2.1.27","node-fs-bs":"ssh://git@github.com:elcr/node-fs-bs.git","node-stream-bs":"ssh://git@github.com:elcr/node-stream-bs.git","react":"^16.13.1","react-dom":"^16.13.1","react-markdown":"^4.3.1","react-syntax-highlighter":"^12.2.1","reason-react":"^0.8.0","relude":"ssh://git@github.com:elcr/relude-without-bisect.git","sanitize-filename":"^1.6.3","slugify-bs":"ssh://git@github.com:elcr/slugify-bs.git","source-map-support":"^0.5.19","squel":"^5.13.0","strftime":"^0.10.0"},"devDependencies":{"autoprefixer":"^9.8.0","node-sass":"^4.14.1","postcss-loader":"^3.0.0","precss":"^4.0.0","raw-loader":"^4.0.1","sass-loader":"^8.0.2","source-map-loader":"^0.2.4","string-replace-loader":"^2.3.0","webpack":"^4.43.0","webpack-cli":"^3.3.11"}}')},function(e,n,t){"use strict";e.exports=t(86)},function(e,n,t){"use strict";
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */var r,i,a,o=t(98),s=t(9).extname,c=/^\s*([^;\s]*)(?:;|\s|$)/,u=/^text\//i;function l(e){if(!e||"string"!=typeof e)return!1;var n=c.exec(e),t=n&&o[n[1].toLowerCase()];return t&&t.charset?t.charset:!(!n||!u.test(n[1]))&&"UTF-8"}n.charset=l,n.charsets={lookup:l},n.contentType=function(e){if(!e||"string"!=typeof e)return!1;var t=-1===e.indexOf("/")?n.lookup(e):e;if(!t)return!1;if(-1===t.indexOf("charset")){var r=n.charset(t);r&&(t+="; charset="+r.toLowerCase())}return t},n.extension=function(e){if(!e||"string"!=typeof e)return!1;var t=c.exec(e),r=t&&n.extensions[t[1].toLowerCase()];if(!r||!r.length)return!1;return r[0]},n.extensions=Object.create(null),n.lookup=function(e){if(!e||"string"!=typeof e)return!1;var t=s("x."+e).toLowerCase().substr(1);if(!t)return!1;return n.types[t]||!1},n.types=Object.create(null),r=n.extensions,i=n.types,a=["nginx","apache",void 0,"iana"],Object.keys(o).forEach((function(e){var n=o[e],t=n.extensions;if(t&&t.length){r[e]=t;for(var s=0;s<t.length;s++){var c=t[s];if(i[c]){var u=a.indexOf(o[i[c]].source),l=a.indexOf(n.source);if("application/octet-stream"!==i[c]&&(u>l||u===l&&"application/"===i[c].substr(0,12)))continue}i[c]=e}}}))},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.metadataRegex=/^([a-z_]+): (.+)/i,n.parseMetadata=function(e){var t=e.trim(),r=t.split(/\r?\n/),i={};if(0===r.length||!n.metadataRegex.test(r[0]))return[i,t];for(var a=null,o=0;o<r.length;o++){var s=r[o];if(/^\s*$/.test(s))break;var c=n.metadataRegex.exec(s);if(null===c){if(null===a)break;i[a].push(s.trim())}else i[a=c[1]]=[c[2].trim()]}return[i,r.slice(o+1).join("\n")]}},function(e,n){e.exports=require("http")},function(e,n,t){var r=t(126);e.exports=function(e,n){if(null==e)return{};var t,i,a=r(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}},function(e,n,t){"use strict";function r(e){!function(e){var n="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",t={environment:{pattern:RegExp("\\$"+n),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+n),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)\w+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b\w+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+n),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+?)\s*(?:\r?\n|\r)(?:[\s\S])*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:t},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s*(?:\r?\n|\r)(?:[\s\S])*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0},{pattern:/(["'])(?:\\[\s\S]|\$\([^)]+\)|`[^`]+`|(?!\1)[^\\])*\1/,greedy:!0,inside:t}],environment:{pattern:RegExp("\\$?"+n),alias:"constant"},variable:t.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|==?|!=?|=~|<<[<-]?|[&\d]?>>|\d?[<>]&?|&[>&]?|\|[&|]?|<=?|>=?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}};for(var r=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],i=t.variable[1].inside,a=0;a<r.length;a++)i[r[a]]=e.languages.bash[r[a]];e.languages.shell=e.languages.bash}(e)}e.exports=r,r.displayName="bash",r.aliases=["shell"]},function(e,n,t){"use strict";function r(e){e.languages.json={property:{pattern:/"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,greedy:!0},string:{pattern:/"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,greedy:!0},comment:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,number:/-?\d+\.?\d*(e[+-]?\d+)?/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:true|false)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}}}e.exports=r,r.displayName="json",r.aliases=[]},function(e,n,t){"use strict";function r(e){e.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"string-interpolation":{pattern:/(?:f|rf|fr)(?:("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|rb|br)?("""|''')[\s\S]+?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^\s*)@\w+(?:\.\w+)*/i,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*\.?\d*|\.\d+)(?:e[+-]?\d+)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},e.languages.python["string-interpolation"].inside.interpolation.inside.rest=e.languages.python,e.languages.py=e.languages.python}e.exports=r,r.displayName="python",r.aliases=["py"]},function(e,n,t){"use strict";function r(e){e.languages.reason=e.languages.extend("clike",{comment:{pattern:/(^|[^\\])\/\*[\s\S]*?\*\//,lookbehind:!0},string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,greedy:!0},"class-name":/\b[A-Z]\w*/,keyword:/\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,operator:/\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:mod|land|lor|lxor|lsl|lsr|asr)\b/}),e.languages.insertBefore("reason","class-name",{character:{pattern:/'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,alias:"string"},constructor:{pattern:/\b[A-Z]\w*\b(?!\s*\.)/,alias:"variable"},label:{pattern:/\b[a-z]\w*(?=::)/,alias:"symbol"}}),delete e.languages.reason.function}e.exports=r,r.displayName="reason",r.aliases=[]},function(e,n,t){"use strict";var r=t(128),i=t(38);function a(e){e.register(r),e.register(i);var n=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend("jsx",n)}e.exports=a,a.displayName="tsx",a.aliases=[]},function(e,n,t){var r;r=function(){var e=JSON.parse('{"$":"dollar","%":"percent","&":"and","<":"less",">":"greater","|":"or","¢":"cent","£":"pound","¤":"currency","¥":"yen","©":"(c)","ª":"a","®":"(r)","º":"o","À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","Æ":"AE","Ç":"C","È":"E","É":"E","Ê":"E","Ë":"E","Ì":"I","Í":"I","Î":"I","Ï":"I","Ð":"D","Ñ":"N","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","Ù":"U","Ú":"U","Û":"U","Ü":"U","Ý":"Y","Þ":"TH","ß":"ss","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","æ":"ae","ç":"c","è":"e","é":"e","ê":"e","ë":"e","ì":"i","í":"i","î":"i","ï":"i","ð":"d","ñ":"n","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","ù":"u","ú":"u","û":"u","ü":"u","ý":"y","þ":"th","ÿ":"y","Ā":"A","ā":"a","Ă":"A","ă":"a","Ą":"A","ą":"a","Ć":"C","ć":"c","Č":"C","č":"c","Ď":"D","ď":"d","Đ":"DJ","đ":"dj","Ē":"E","ē":"e","Ė":"E","ė":"e","Ę":"e","ę":"e","Ě":"E","ě":"e","Ğ":"G","ğ":"g","Ģ":"G","ģ":"g","Ĩ":"I","ĩ":"i","Ī":"i","ī":"i","Į":"I","į":"i","İ":"I","ı":"i","Ķ":"k","ķ":"k","Ļ":"L","ļ":"l","Ľ":"L","ľ":"l","Ł":"L","ł":"l","Ń":"N","ń":"n","Ņ":"N","ņ":"n","Ň":"N","ň":"n","Ő":"O","ő":"o","Œ":"OE","œ":"oe","Ŕ":"R","ŕ":"r","Ř":"R","ř":"r","Ś":"S","ś":"s","Ş":"S","ş":"s","Š":"S","š":"s","Ţ":"T","ţ":"t","Ť":"T","ť":"t","Ũ":"U","ũ":"u","Ū":"u","ū":"u","Ů":"U","ů":"u","Ű":"U","ű":"u","Ų":"U","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","ź":"z","Ż":"Z","ż":"z","Ž":"Z","ž":"z","ƒ":"f","Ơ":"O","ơ":"o","Ư":"U","ư":"u","ǈ":"LJ","ǉ":"lj","ǋ":"NJ","ǌ":"nj","Ș":"S","ș":"s","Ț":"T","ț":"t","˚":"o","Ά":"A","Έ":"E","Ή":"H","Ί":"I","Ό":"O","Ύ":"Y","Ώ":"W","ΐ":"i","Α":"A","Β":"B","Γ":"G","Δ":"D","Ε":"E","Ζ":"Z","Η":"H","Θ":"8","Ι":"I","Κ":"K","Λ":"L","Μ":"M","Ν":"N","Ξ":"3","Ο":"O","Π":"P","Ρ":"R","Σ":"S","Τ":"T","Υ":"Y","Φ":"F","Χ":"X","Ψ":"PS","Ω":"W","Ϊ":"I","Ϋ":"Y","ά":"a","έ":"e","ή":"h","ί":"i","ΰ":"y","α":"a","β":"b","γ":"g","δ":"d","ε":"e","ζ":"z","η":"h","θ":"8","ι":"i","κ":"k","λ":"l","μ":"m","ν":"n","ξ":"3","ο":"o","π":"p","ρ":"r","ς":"s","σ":"s","τ":"t","υ":"y","φ":"f","χ":"x","ψ":"ps","ω":"w","ϊ":"i","ϋ":"y","ό":"o","ύ":"y","ώ":"w","Ё":"Yo","Ђ":"DJ","Є":"Ye","І":"I","Ї":"Yi","Ј":"J","Љ":"LJ","Њ":"NJ","Ћ":"C","Џ":"DZ","А":"A","Б":"B","В":"V","Г":"G","Д":"D","Е":"E","Ж":"Zh","З":"Z","И":"I","Й":"J","К":"K","Л":"L","М":"M","Н":"N","О":"O","П":"P","Р":"R","С":"S","Т":"T","У":"U","Ф":"F","Х":"H","Ц":"C","Ч":"Ch","Ш":"Sh","Щ":"Sh","Ъ":"U","Ы":"Y","Ь":"","Э":"E","Ю":"Yu","Я":"Ya","а":"a","б":"b","в":"v","г":"g","д":"d","е":"e","ж":"zh","з":"z","и":"i","й":"j","к":"k","л":"l","м":"m","н":"n","о":"o","п":"p","р":"r","с":"s","т":"t","у":"u","ф":"f","х":"h","ц":"c","ч":"ch","ш":"sh","щ":"sh","ъ":"u","ы":"y","ь":"","э":"e","ю":"yu","я":"ya","ё":"yo","ђ":"dj","є":"ye","і":"i","ї":"yi","ј":"j","љ":"lj","њ":"nj","ћ":"c","ѝ":"u","џ":"dz","Ґ":"G","ґ":"g","Ғ":"GH","ғ":"gh","Қ":"KH","қ":"kh","Ң":"NG","ң":"ng","Ү":"UE","ү":"ue","Ұ":"U","ұ":"u","Һ":"H","һ":"h","Ә":"AE","ә":"ae","Ө":"OE","ө":"oe","฿":"baht","ა":"a","ბ":"b","გ":"g","დ":"d","ე":"e","ვ":"v","ზ":"z","თ":"t","ი":"i","კ":"k","ლ":"l","მ":"m","ნ":"n","ო":"o","პ":"p","ჟ":"zh","რ":"r","ს":"s","ტ":"t","უ":"u","ფ":"f","ქ":"k","ღ":"gh","ყ":"q","შ":"sh","ჩ":"ch","ც":"ts","ძ":"dz","წ":"ts","ჭ":"ch","ხ":"kh","ჯ":"j","ჰ":"h","Ẁ":"W","ẁ":"w","Ẃ":"W","ẃ":"w","Ẅ":"W","ẅ":"w","ẞ":"SS","Ạ":"A","ạ":"a","Ả":"A","ả":"a","Ấ":"A","ấ":"a","Ầ":"A","ầ":"a","Ẩ":"A","ẩ":"a","Ẫ":"A","ẫ":"a","Ậ":"A","ậ":"a","Ắ":"A","ắ":"a","Ằ":"A","ằ":"a","Ẳ":"A","ẳ":"a","Ẵ":"A","ẵ":"a","Ặ":"A","ặ":"a","Ẹ":"E","ẹ":"e","Ẻ":"E","ẻ":"e","Ẽ":"E","ẽ":"e","Ế":"E","ế":"e","Ề":"E","ề":"e","Ể":"E","ể":"e","Ễ":"E","ễ":"e","Ệ":"E","ệ":"e","Ỉ":"I","ỉ":"i","Ị":"I","ị":"i","Ọ":"O","ọ":"o","Ỏ":"O","ỏ":"o","Ố":"O","ố":"o","Ồ":"O","ồ":"o","Ổ":"O","ổ":"o","Ỗ":"O","ỗ":"o","Ộ":"O","ộ":"o","Ớ":"O","ớ":"o","Ờ":"O","ờ":"o","Ở":"O","ở":"o","Ỡ":"O","ỡ":"o","Ợ":"O","ợ":"o","Ụ":"U","ụ":"u","Ủ":"U","ủ":"u","Ứ":"U","ứ":"u","Ừ":"U","ừ":"u","Ử":"U","ử":"u","Ữ":"U","ữ":"u","Ự":"U","ự":"u","Ỳ":"Y","ỳ":"y","Ỵ":"Y","ỵ":"y","Ỷ":"Y","ỷ":"y","Ỹ":"Y","ỹ":"y","‘":"\'","’":"\'","“":"\\"","”":"\\"","†":"+","•":"*","…":"...","₠":"ecu","₢":"cruzeiro","₣":"french franc","₤":"lira","₥":"mill","₦":"naira","₧":"peseta","₨":"rupee","₩":"won","₪":"new shequel","₫":"dong","€":"euro","₭":"kip","₮":"tugrik","₯":"drachma","₰":"penny","₱":"peso","₲":"guarani","₳":"austral","₴":"hryvnia","₵":"cedi","₸":"kazakhstani tenge","₹":"indian rupee","₽":"russian ruble","₿":"bitcoin","℠":"sm","™":"tm","∂":"d","∆":"delta","∑":"sum","∞":"infinity","♥":"love","元":"yuan","円":"yen","﷼":"rial"}'),n=JSON.parse('{"vi":{"Đ":"D","đ":"d"}}');function t(t,r){if("string"!=typeof t)throw new Error("slugify: string argument expected");var i=n[(r="string"==typeof r?{replacement:r}:r||{}).locale]||{},a=r.replacement||"-",o=t.split("").reduce((function(n,t){return n+(i[t]||e[t]||t)}),"").replace(r.remove||/[^\w\s$*_+~.()'"!\-:@]+/g,"").trim().replace(new RegExp("[\\s"+a+"]+","g"),a);return r.lower&&(o=o.toLowerCase()),r.strict&&(o=o.replace(new RegExp("[^a-zA-Z0-9"+a+"]","g"),"")),o}return t.extend=function(n){for(var t in n)e[t]=n[t]},t},e.exports=r(),e.exports.default=r()},function(e,n,t){"use strict";function r(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var i=t(6),a=t(129),o=t(142),s=t(193),c=t(196),u=t(198),l=t(199),p=t(200),f=t(203),d=t(204),m=t(205),h=t(206),g=t(207),v=Object.keys(h),x=function(e){var n=e.source||e.children||"",t=e.parserOptions;if(e.allowedTypes&&e.disallowedTypes)throw new Error("Only one of `allowedTypes` and `disallowedTypes` should be defined");var r=i(h,e.renderers),s=[[o,t]].concat(e.plugins||[]).reduce(b,a()),m=s.parse(n),x=i(e,{renderers:r,definitions:d(m)}),y=function(e){var n=[f,c()],t=e.disallowedTypes;e.allowedTypes&&(t=v.filter((function(n){return"root"!==n&&-1===e.allowedTypes.indexOf(n)})));var r=e.unwrapDisallowed?"unwrap":"remove";t&&t.length>0&&n.push(l.ofType(t,r));e.allowNode&&n.push(l.ifNotMatch(e.allowNode,r));var i=!e.escapeHtml&&!e.skipHtml,a=(e.astPlugins||[]).some((function(e){return(Array.isArray(e)?e[0]:e).identity===g.HtmlParser}));i&&!a&&n.push(u);return e.astPlugins?n.concat(e.astPlugins):n}(e),w=s.runSync(m),k=y.reduce((function(e,n){return n(e,x)}),w);return p(k,x)};function b(e,n){return Array.isArray(n)?e.use.apply(e,r(n)):e.use(n)}x.defaultProps={renderers:{},escapeHtml:!0,skipHtml:!1,sourcePos:!1,rawSourcePos:!1,transformLinkUri:m,astPlugins:[],plugins:[],parserOptions:{}},x.propTypes={className:s.string,source:s.string,children:s.string,sourcePos:s.bool,rawSourcePos:s.bool,escapeHtml:s.bool,skipHtml:s.bool,allowNode:s.func,allowedTypes:s.arrayOf(s.oneOf(v)),disallowedTypes:s.arrayOf(s.oneOf(v)),transformLinkUri:s.oneOfType([s.func,s.bool]),linkTarget:s.oneOfType([s.func,s.string]),transformImageUri:s.func,astPlugins:s.arrayOf(s.func),unwrapDisallowed:s.bool,renderers:s.object,plugins:s.array,parserOptions:s.object},x.types=v,x.renderers=h,x.uriTransformer=m,e.exports=x},function(e,n){!function(){var n={de_DE:{days:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],shortDays:["So","Mo","Di","Mi","Do","Fr","Sa"],months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],shortMonths:["Jan","Feb","Mär","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d.%m.%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},en_CA:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ordinalSuffixes:["st","nd","rd","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","st","nd","rd","th","th","th","th","th","th","th","st"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%r",x:"%D"}},en_US:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],ordinalSuffixes:["st","nd","rd","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","th","st","nd","rd","th","th","th","th","th","th","th","st"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%m/%d/%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%r",x:"%D"}},es_MX:{days:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],shortDays:["dom","lun","mar","mié","jue","vie","sáb"],months:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre"," diciembre"],shortMonths:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},fr_FR:{days:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],shortDays:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],months:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],shortMonths:["janv.","févr.","mars","avril","mai","juin","juil.","août","sept.","oct.","nov.","déc."],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},it_IT:{days:["domenica","lunedì","martedì","mercoledì","giovedì","venerdì","sabato"],shortDays:["dom","lun","mar","mer","gio","ven","sab"],months:["gennaio","febbraio","marzo","aprile","maggio","giugno","luglio","agosto","settembre","ottobre","novembre","dicembre"],shortMonths:["pr","mag","giu","lug","ago","set","ott","nov","dic"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},nl_NL:{days:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],shortDays:["zo","ma","di","wo","do","vr","za"],months:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],shortMonths:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d-%m-%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},pt_BR:{days:["domingo","segunda","terça","quarta","quinta","sexta","sábado"],shortDays:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],months:["janeiro","fevereiro","março","abril","maio","junho","julho","agosto","setembro","outubro","novembro","dezembro"],shortMonths:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X %Z",D:"%d-%m-%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},ru_RU:{days:["Воскресенье","Понедельник","Вторник","Среда","Четверг","Пятница","Суббота"],shortDays:["Вс","Пн","Вт","Ср","Чт","Пт","Сб"],months:["Январь","Февраль","Март","Апрель","Май","Июнь","Июль","Август","Сентябрь","Октябрь","Ноябрь","Декабрь"],shortMonths:["янв","фев","мар","апр","май","июн","июл","авг","сен","окт","ноя","дек"],AM:"AM",PM:"PM",am:"am",pm:"pm",formats:{c:"%a %d %b %Y %X",D:"%d.%m.%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},tr_TR:{days:["Pazar","Pazartesi","Salı","Çarşamba","Perşembe","Cuma","Cumartesi"],shortDays:["Paz","Pzt","Sal","Çrş","Prş","Cum","Cts"],months:["Ocak","Şubat","Mart","Nisan","Mayıs","Haziran","Temmuz","Ağustos","Eylül","Ekim","Kasım","Aralık"],shortMonths:["Oca","Şub","Mar","Nis","May","Haz","Tem","Ağu","Eyl","Eki","Kas","Ara"],AM:"ÖÖ",PM:"ÖS",am:"ÖÖ",pm:"ÖS",formats:{c:"%a %d %b %Y %X %Z",D:"%d-%m-%Y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%T",x:"%D"}},zh_CN:{days:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],shortDays:["日","一","二","三","四","五","六"],months:["一月份","二月份","三月份","四月份","五月份","六月份","七月份","八月份","九月份","十月份","十一月份","十二月份"],shortMonths:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],AM:"上午",PM:"下午",am:"上午",pm:"下午",formats:{c:"%a %d %b %Y %X %Z",D:"%d/%m/%y",F:"%Y-%m-%d",R:"%H:%M",r:"%I:%M:%S %p",T:"%H:%M:%S",v:"%e-%b-%Y",X:"%r",x:"%D"}}},t=n.en_US,r=new function e(r,p,f){var d,m=r||t,h=p||0,g=f||!1,v=0;var x=function(e,n){var t;if(n){if(t=n.getTime(),g){var r=u(n);if(u(n=new Date(t+r+h))!==r){var p=u(n);n=new Date(t+p+h)}}}else{var f=Date.now();f>v?(v=f,d=new Date(v),t=v,g&&(d=new Date(v+u(d)+h))):t=v,n=d}return function e(n,t,r,u){for(var p="",f=null,d=!1,m=n.length,v=!1,x=0;x<m;x++){var b=n.charCodeAt(x);if(!0!==d)37!==b?p+=n[x]:d=!0;else{if(45===b){f="";continue}if(95===b){f=" ";continue}if(48===b){f="0";continue}if(58===b){v&&l("[WARNING] detected use of unsupported %:: or %::: modifiers to strftime"),v=!0;continue}switch(b){case 37:p+="%";break;case 65:p+=r.days[t.getDay()];break;case 66:p+=r.months[t.getMonth()];break;case 67:p+=i(Math.floor(t.getFullYear()/100),f);break;case 68:p+=e(r.formats.D,t,r,u);break;case 70:p+=e(r.formats.F,t,r,u);break;case 72:p+=i(t.getHours(),f);break;case 73:p+=i(o(t.getHours()),f);break;case 76:p+=a(Math.floor(u%1e3));break;case 77:p+=i(t.getMinutes(),f);break;case 80:p+=t.getHours()<12?r.am:r.pm;break;case 82:p+=e(r.formats.R,t,r,u);break;case 83:p+=i(t.getSeconds(),f);break;case 84:p+=e(r.formats.T,t,r,u);break;case 85:p+=i(s(t,"sunday"),f);break;case 87:p+=i(s(t,"monday"),f);break;case 88:p+=e(r.formats.X,t,r,u);break;case 89:p+=t.getFullYear();break;case 90:if(g&&0===h)p+="GMT";else{var y=t.toString().match(/\(([\w\s]+)\)/);p+=y&&y[1]||""}break;case 97:p+=r.shortDays[t.getDay()];break;case 98:p+=r.shortMonths[t.getMonth()];break;case 99:p+=e(r.formats.c,t,r,u);break;case 100:p+=i(t.getDate(),f);break;case 101:p+=i(t.getDate(),null==f?" ":f);break;case 104:p+=r.shortMonths[t.getMonth()];break;case 106:var w=new Date(t.getFullYear(),0,1),k=Math.ceil((t.getTime()-w.getTime())/864e5);p+=a(k);break;case 107:p+=i(t.getHours(),null==f?" ":f);break;case 108:p+=i(o(t.getHours()),null==f?" ":f);break;case 109:p+=i(t.getMonth()+1,f);break;case 110:p+="\n";break;case 111:k=t.getDate();r.ordinalSuffixes?p+=String(k)+(r.ordinalSuffixes[k-1]||c(k)):p+=String(k)+c(k);break;case 112:p+=t.getHours()<12?r.AM:r.PM;break;case 114:p+=e(r.formats.r,t,r,u);break;case 115:p+=Math.floor(u/1e3);break;case 116:p+="\t";break;case 117:k=t.getDay();p+=0===k?7:k;break;case 118:p+=e(r.formats.v,t,r,u);break;case 119:p+=t.getDay();break;case 120:p+=e(r.formats.x,t,r,u);break;case 121:p+=(""+t.getFullYear()).slice(2);break;case 122:if(g&&0===h)p+=v?"+00:00":"+0000";else{var _,S=(_=0!==h?h/6e4:-t.getTimezoneOffset())<0?"-":"+",E=v?":":"",A=Math.floor(Math.abs(_/60)),$=Math.abs(_%60);p+=S+i(A)+E+i($)}break;default:d&&(p+="%"),p+=n[x]}f=null,d=!1}}return p}(e,n,m,t)};return x.localize=function(n){return new e(n||m,h,g)},x.localizeByIdentifier=function(e){var t=n[e];return t?x.localize(t):(l('[WARNING] No locale found with identifier "'+e+'".'),x)},x.timezone=function(n){var t=h,r=g,i=typeof n;"number"!==i&&"string"!==i||(r=!0,"string"===i?t=("-"===n[0]?-1:1)*(60*parseInt(n.slice(1,3),10)+parseInt(n.slice(3,5),10))*60*1e3:"number"===i&&(t=60*n*1e3));return new e(m,t,r)},x.utc=function(){return new e(m,h,!0)},x}(t,0,!1);function i(e,n){return""===n||e>9?e:(null==n&&(n="0"),n+e)}function a(e){return e>99?e:e>9?"0"+e:"00"+e}function o(e){return 0===e?12:e>12?e-12:e}function s(e,n){n=n||"sunday";var t=e.getDay();"monday"===n&&(0===t?t=6:t--);var r=Date.UTC(e.getFullYear(),0,1),i=Date.UTC(e.getFullYear(),e.getMonth(),e.getDate()),a=(Math.floor((i-r)/864e5)+7-t)/7;return Math.floor(a)}function c(e){var n=e%10,t=e%100;if(t>=11&&t<=13||0===n||n>=4)return"th";switch(n){case 1:return"st";case 2:return"nd";case 3:return"rd"}}function u(e){return 6e4*(e.getTimezoneOffset()||0)}function l(e){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e)}void 0!==e?e.exports=r:(function(){return this||(0,eval)("this")}()).strftime=r,"function"!=typeof Date.now&&(Date.now=function(){return+new Date})}()},function(e,n){e.exports='*,*::before,*::after{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0)}article,aside,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex="-1"]:focus:not(.focus-visible){outline:0 !important}[tabindex="-1"]:focus:not(:focus-visible){outline:0 !important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[title],abbr[data-original-title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;border-bottom:0;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul,dl{margin-top:0;margin-bottom:1rem}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:#007bff;text-decoration:none;background-color:transparent}a:hover{color:#0056b3;text-decoration:underline}a:not([href]){color:inherit;text-decoration:none}a:not([href]):hover{color:inherit;text-decoration:none}pre,code,kbd,samp{font-family:SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg{overflow:hidden;vertical-align:middle}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}[role="button"]{cursor:pointer}select{word-wrap:normal}button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button:not(:disabled),[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled){cursor:pointer}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{padding:0;border-style:none}input[type="radio"],input[type="checkbox"]{box-sizing:border-box;padding:0}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{outline-offset:-2px;-webkit-appearance:none}[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none !important}\n'},function(e,n,t){"use strict";e.exports=t(208)},function(e,n,t){"use strict";var r=t(226),i=/[\/\?<>\\:\*\|"]/g,a=/[\x00-\x1f\x80-\x9f]/g,o=/^\.+$/,s=/^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i,c=/[\. ]+$/;function u(e,n){if("string"!=typeof e)throw new Error("Input must be string");var t=e.replace(i,n).replace(a,n).replace(o,n).replace(s,n).replace(c,n);return r(t,255)}e.exports=function(e,n){var t=n&&n.replacement||"",r=u(e,t);return""===t?r:u(r,"")}},function(e,n,t){"use strict";e.exports.ArgumentParser=t(87),e.exports.Namespace=t(44),e.exports.Action=t(10),e.exports.HelpFormatter=t(27),e.exports.Const=t(4),e.exports.ArgumentDefaultsHelpFormatter=t(28).ArgumentDefaultsHelpFormatter,e.exports.RawDescriptionHelpFormatter=t(28).RawDescriptionHelpFormatter,e.exports.RawTextHelpFormatter=t(28).RawTextHelpFormatter},function(e,n,t){"use strict";var r=t(1),i=t(1).format,a=t(9),o=t(41).sprintf,s=t(4),c=t(14),u=t(42),l=t(26),p=t(27),f=t(44);function d(e){if(!(this instanceof d))return new d(e);var n=this;function t(e){return e}(e=e||{}).description=e.description||null,e.argumentDefault=e.argumentDefault||null,e.prefixChars=e.prefixChars||"-",e.conflictHandler=e.conflictHandler||"error",u.call(this,e),e.addHelp=void 0===e.addHelp||!!e.addHelp,e.parents=e.parents||[],e.prog=e.prog||a.basename(process.argv[1]),this.prog=e.prog,this.usage=e.usage,this.epilog=e.epilog,this.version=e.version,this.debug=!0===e.debug,this.formatterClass=e.formatterClass||p,this.fromfilePrefixChars=e.fromfilePrefixChars||null,this._positionals=this.addArgumentGroup({title:"Positional arguments"}),this._optionals=this.addArgumentGroup({title:"Optional arguments"}),this._subparsers=null,this.register("type","auto",t),this.register("type",null,t),this.register("type","int",(function(e){var n=parseInt(e,10);if(isNaN(n))throw new Error(e+" is not a valid integer.");return n})),this.register("type","float",(function(e){var n=parseFloat(e);if(isNaN(n))throw new Error(e+" is not a valid float.");return n})),this.register("type","string",(function(e){return""+e}));var r=this.prefixChars.indexOf("-")>-1?"-":this.prefixChars[0];e.addHelp&&this.addArgument([r+"h",r+r+"help"],{action:"help",defaultValue:s.SUPPRESS,help:"Show this help message and exit."}),void 0!==this.version&&this.addArgument([r+"v",r+r+"version"],{action:"version",version:this.version,defaultValue:s.SUPPRESS,help:"Show program's version number and exit."}),e.parents.forEach((function(e){if(n._addContainerActions(e),void 0!==e._defaults)for(var t in e._defaults)e._defaults.hasOwnProperty(t)&&(n._defaults[t]=e._defaults[t])}))}r.inherits(d,u),d.prototype.addSubparsers=function(e){if(this._subparsers&&this.error("Cannot have multiple subparser arguments."),(e=e||{}).debug=!0===this.debug,e.optionStrings=[],e.parserClass=e.parserClass||d,e.title||e.description?(this._subparsers=this.addArgumentGroup({title:e.title||"subcommands",description:e.description}),delete e.title,delete e.description):this._subparsers=this._positionals,!e.prog){var n=this._getFormatter(),t=this._getPositionalActions(),r=this._mutuallyExclusiveGroups;n.addUsage(this.usage,t,r,""),e.prog=n.formatHelp().trim()}var i=new(this._popActionClass(e,"parsers"))(e);return this._subparsers._addAction(i),i},d.prototype._addAction=function(e){return e.isOptional()?this._optionals._addAction(e):this._positionals._addAction(e),e},d.prototype._getOptionalActions=function(){return this._actions.filter((function(e){return e.isOptional()}))},d.prototype._getPositionalActions=function(){return this._actions.filter((function(e){return e.isPositional()}))},d.prototype.parseArgs=function(e,n){var t,r=this.parseKnownArgs(e,n);return e=r[0],(t=r[1])&&t.length>0&&this.error(i("Unrecognized arguments: %s.",t.join(" "))),e},d.prototype.parseKnownArgs=function(e,n){var t=this;e=e||process.argv.slice(2),n=n||new f,t._actions.forEach((function(e){if(e.dest!==s.SUPPRESS&&!c.has(n,e.dest)&&e.defaultValue!==s.SUPPRESS){var r=e.defaultValue;"string"==typeof e.defaultValue&&(r=t._getValue(e,r)),n[e.dest]=r}})),Object.keys(t._defaults).forEach((function(e){n[e]=t._defaults[e]}));try{var r=this._parseKnownArgs(e,n);return n=r[0],e=r[1],c.has(n,s._UNRECOGNIZED_ARGS_ATTR)&&(e=c.arrayUnion(e,n[s._UNRECOGNIZED_ARGS_ATTR]),delete n[s._UNRECOGNIZED_ARGS_ATTR]),[n,e]}catch(e){this.error(e)}},d.prototype._parseKnownArgs=function(e,n){var t,r,a=this,u=[];function p(e){return e.getName()}null!==this.fromfilePrefixChars&&(e=this._readArgsFromFiles(e));var f={};this._mutuallyExclusiveGroups.forEach((function(e){e._groupActions.forEach((function(e,n,i){r=p(e),c.has(f,r)||(f[r]=[]),(t=f[r]).push.apply(t,i.slice(0,n)),t.push.apply(t,i.slice(n+1))}))}));var d={},m=[];e.forEach((function(n,t){if("--"===n)for(m.push("-");t<e.length;)m.push("A"),t++;else{var r,i=a._parseOptional(n);i?(d[t]=i,r="O"):r="A",m.push(r)}}));var h=m.join(""),g=[],v=[];function x(e,t,r){g.push(e);var o=a._getValues(e,t);o!==e.defaultValue&&(v.push(e),f[p(e)]&&f[p(e)].forEach((function(n){if(v.indexOf(n)>=0)throw l(e,i('Not allowed with argument "%s".',n.getName()))}))),o!==s.SUPPRESS&&e.call(a,n,o,r)}function b(n){for(var t,r,i,s,c=d[n],p=c[0],f=c[1],m=c[2],g=[];;){if(!p)return u.push(e[n]),n+1;if(!m){i=n+1;var v=h.substr(i);s=i+(r=a._matchArgument(p,v)),t=e.slice(i,s),g.push([p,t,f]);break}r=a._matchArgument(p,"A");var b=a.prefixChars;if(!(0===r&&b.indexOf(f[1])<0)){if(1===r){s=n+1,t=[m],g.push([p,t,f]);break}throw l(p,o("ignored explicit argument %r",m))}g.push([p,[],f]),f=f[0]+m[0];var y=m.slice(1)||null,w=a._optionStringActions;if(!(Object.keys(w).indexOf(f)>=0))throw l(p,o("ignored explicit argument %r",m));p=w[f],m=y}if(g.length<1)throw new Error("length should be > 0");for(var k=0;k<g.length;k++)x.apply(a,g[k]);return s}var y=a._getPositionalActions();function w(n){for(var t=h.substr(n),r=a._matchArgumentsPartial(y,t),i=0;i<y.length;i++){var o=y[i],s=r[i];if(void 0!==s){var c=e.slice(n,n+s);n+=s,x(o,c)}}return y=y.slice(r.length),n}var k,_,S,E=0,A=-1;for(Object.keys(d).forEach((function(e){A=Math.max(A,parseInt(e,10))}));E<=A;){for(k in S=null,d)d.hasOwnProperty(k)&&(k=parseInt(k,10))>=E&&(S=null!==S?Math.min(S,k):k);if(E!==S){if((_=w(E))>E){E=_;continue}E=_}if(!d[E]){var $=e.slice(E,S);u=u.concat($),E=S}E=b(E)}var C=w(E);u=u.concat(e.slice(C)),y.length>0&&a.error("too few arguments"),a._actions.forEach((function(e){e.required&&g.indexOf(e)<0&&a.error(i('Argument "%s" is required',e.getName()))}));return a._mutuallyExclusiveGroups.forEach((function(e){if(e.required&&!e._groupActions.some((function(e){return-1!==v.indexOf(e)}))){var n=[];e._groupActions.forEach((function(e){e.help!==s.SUPPRESS&&n.push(e.getName())}));var t="one of the arguments "+(n=n.join(" "))+" is required";a.error(t)}})),[n,u]},d.prototype._readArgsFromFiles=function(e){var n=this,r=t(5),i=[];return e.forEach((function(e){if(n.fromfilePrefixChars.indexOf(e[0])<0)i.push(e);else try{var t=[],a=e.slice(1),o=r.readFileSync(a,"utf8");(o=o.trim().split("\n")).forEach((function(e){n.convertArgLineToArgs(e).forEach((function(e){t.push(e)})),t=n._readArgsFromFiles(t)})),i.push.apply(i,t)}catch(e){return n.error(e.message)}})),i},d.prototype.convertArgLineToArgs=function(e){return[e]},d.prototype._matchArgument=function(e,n){var t,r=new RegExp("^"+this._getNargsPattern(e)),a=n.match(r);if(!a){switch(e.nargs){case void 0:case null:t="Expected one argument.";break;case s.OPTIONAL:t="Expected at most one argument.";break;case s.ONE_OR_MORE:t="Expected at least one argument.";break;default:t="Expected %s argument(s)"}throw l(e,i(t,e.nargs))}return a[1].length},d.prototype._matchArgumentsPartial=function(e,n){var t,r,i,a,o,s=[];function c(e){return e.length}for(a=e.length;a>0;a--){for(r="",t=e.slice(0,a),o=0;o<t.length;o++)r+=this._getNargsPattern(t[o]);if(r=new RegExp("^"+r),(i=n.match(r))&&i.length>0){i=i.splice(1),s=s.concat(i.map(c));break}}return s},d.prototype._parseOptional=function(e){var n,t,r;if(!e)return null;if(this.prefixChars.indexOf(e[0])<0)return null;if(this._optionStringActions[e])return[this._optionStringActions[e],e,null];if(1===e.length)return null;if(e.indexOf("=")>=0&&(n=e.split("=",1)[0],t=e.slice(n.length+1),this._optionStringActions[n]))return[this._optionStringActions[n],n,t];if((r=this._getOptionTuples(e)).length>1){var a=r.map((function(e){return e[1]}));this.error(i('Ambiguous option: "%s" could match %s.',e,a.join(", ")))}else if(1===r.length)return r[0];return e.match(this._regexpNegativeNumber)&&!this._hasNegativeNumberOptionals.some(Boolean)||e.search(" ")>=0?null:[null,e,null]},d.prototype._getOptionTuples=function(e){var n,t,r,a,o=[],s=this.prefixChars;if(s.indexOf(e[0])>=0&&s.indexOf(e[1])>=0){if(e.indexOf("=")>=0){var u=e.split("=",1);n=u[0],t=u[1]}else n=e,t=null;for(a in this._optionStringActions)a.substr(0,n.length)===n&&(r=this._optionStringActions[a],o.push([r,a,t]))}else{if(!(s.indexOf(e[0])>=0&&s.indexOf(e[1])<0))throw new Error(i("Unexpected option string: %s.",e));n=e,t=null;var l=e.substr(0,2),p=e.substr(2);for(a in this._optionStringActions)c.has(this._optionStringActions,a)&&(r=this._optionStringActions[a],a===l?o.push([r,a,p]):a.substr(0,n.length)===n&&o.push([r,a,t]))}return o},d.prototype._getNargsPattern=function(e){var n;switch(e.nargs){case void 0:case null:n="(-*A-*)";break;case s.OPTIONAL:n="(-*A?-*)";break;case s.ZERO_OR_MORE:n="(-*[A-]*)";break;case s.ONE_OR_MORE:n="(-*A[A-]*)";break;case s.REMAINDER:n="([-AO]*)";break;case s.PARSER:n="(-*A[-AO]*)";break;default:n="(-*"+c.repeat("-*A",e.nargs)+"-*)"}return e.isOptional()&&(n=(n=n.replace(/-\*/g,"")).replace(/-/g,"")),n},d.prototype._getValues=function(e,n){var t,r,i=this;return e.nargs!==s.PARSER&&e.nargs!==s.REMAINDER&&(n=n.filter((function(e){return"--"!==e}))),0===n.length&&e.nargs===s.OPTIONAL?"string"==typeof(t=e.isOptional()?e.constant:e.defaultValue)&&(t=this._getValue(e,t),this._checkValue(e,t)):0===n.length&&e.nargs===s.ZERO_OR_MORE&&0===e.optionStrings.length?(t=e.defaultValue||n,this._checkValue(e,t)):1!==n.length||e.nargs&&e.nargs!==s.OPTIONAL?e.nargs===s.REMAINDER?t=n.map((function(n){return i._getValue(e,n)})):e.nargs===s.PARSER?(t=n.map((function(n){return i._getValue(e,n)})),this._checkValue(e,t[0])):(t=n.map((function(n){return i._getValue(e,n)}))).forEach((function(n){i._checkValue(e,n)})):(r=n[0],t=this._getValue(e,r),this._checkValue(e,t)),t},d.prototype._getValue=function(e,n){var t,r=this._registryGet("type",e.type,e.type);if("function"!=typeof r){var a=i("%s is not callable",r);throw l(e,a)}try{t=r(n)}catch(t){var o=null;o="string"==typeof e.type?e.type:e.type.name||e.type.displayName||"<function>";var s=i("Invalid %s value: %s",o,n);throw"<function>"===o&&(s+="\n"+t.message),l(e,s)}return t},d.prototype._checkValue=function(e,n){var t=e.choices;if(t){if(("string"==typeof t||Array.isArray(t))&&-1!==t.indexOf(n))return;if("object"==typeof t&&!Array.isArray(t)&&t[n])return;t="string"==typeof t?t.split("").join(", "):Array.isArray(t)?t.join(", "):Object.keys(t).join(", ");var r=i("Invalid choice: %s (choose from [%s])",n,t);throw l(e,r)}},d.prototype.formatUsage=function(){var e=this._getFormatter();return e.addUsage(this.usage,this._actions,this._mutuallyExclusiveGroups),e.formatHelp()},d.prototype.formatHelp=function(){var e=this._getFormatter();return e.addUsage(this.usage,this._actions,this._mutuallyExclusiveGroups),e.addText(this.description),this._actionGroups.forEach((function(n){e.startSection(n.title),e.addText(n.description),e.addArguments(n._groupActions),e.endSection()})),e.addText(this.epilog),e.formatHelp()},d.prototype._getFormatter=function(){return new(0,this.formatterClass)({prog:this.prog})},d.prototype.printUsage=function(){this._printMessage(this.formatUsage())},d.prototype.printHelp=function(){this._printMessage(this.formatHelp())},d.prototype._printMessage=function(e,n){n||(n=process.stdout),e&&n.write(""+e)},d.prototype.exit=function(e,n){n&&(0===e?this._printMessage(n):this._printMessage(n,process.stderr)),process.exit(e)},d.prototype.error=function(e){var n;if(e instanceof Error){if(!0===this.debug)throw e;n=e.message}else n=e;var t=i("%s: error: %s",this.prog,n)+s.EOL;if(!0===this.debug)throw new Error(t);return this.printUsage(process.stderr),this.exit(2,t)},e.exports=d},function(e,n,t){"use strict";var r=t(1),i=t(10),a=t(4),o=e.exports=function(e){null!==(e=e||{}).defaultValue?e.defaultValue=e.defaultValue:e.defaultValue=a.SUPPRESS,e.dest=null!==e.dest?e.dest:a.SUPPRESS,e.nargs=0,i.call(this,e)};r.inherits(o,i),o.prototype.call=function(e){e.printHelp(),e.exit()}},function(e,n,t){"use strict";var r=t(1),i=t(10),a=t(4),o=e.exports=function(e){if(e=e||{},this.nargs<=0)throw new Error("nargs for append actions must be > 0; if arg strings are not supplying the value to append, the append const action may be more appropriate");if(this.constant&&this.nargs!==a.OPTIONAL)throw new Error("nargs must be OPTIONAL to supply const");i.call(this,e)};r.inherits(o,i),o.prototype.call=function(e,n,t){var r=(n[this.dest]||[]).slice();r.push(t),n.set(this.dest,r)}},function(e,n,t){"use strict";var r=t(1),i=t(10),a=e.exports=function(e){if((e=e||{}).nargs=0,void 0===e.constant)throw new Error("constant option is required for appendAction");i.call(this,e)};r.inherits(a,i),a.prototype.call=function(e,n){var t=[].concat(n[this.dest]||[]);t.push(this.constant),n.set(this.dest,t)}},function(e,n,t){"use strict";var r=t(1),i=t(10),a=e.exports=function(e){(e=e||{}).nargs=0,i.call(this,e)};r.inherits(a,i),a.prototype.call=function(e,n){n.set(this.dest,(n[this.dest]||0)+1)}},function(e,n,t){"use strict";var r=t(1),i=t(10),a=t(4),o=e.exports=function(e){if(e=e||{},this.nargs<=0)throw new Error("nargs for store actions must be > 0; if you have nothing to store, actions such as store true or store const may be more appropriate");if(void 0!==this.constant&&this.nargs!==a.OPTIONAL)throw new Error("nargs must be OPTIONAL to supply const");i.call(this,e)};r.inherits(o,i),o.prototype.call=function(e,n,t){n.set(this.dest,t)}},function(e,n,t){"use strict";var r=t(1),i=t(25),a=e.exports=function(e){(e=e||{}).constant=!0,e.defaultValue=null!==e.defaultValue&&e.defaultValue,i.call(this,e)};r.inherits(a,i)},function(e,n,t){"use strict";var r=t(1),i=t(25),a=e.exports=function(e){(e=e||{}).constant=!1,e.defaultValue=null===e.defaultValue||e.defaultValue,i.call(this,e)};r.inherits(a,i)},function(e,n,t){"use strict";var r=t(1),i=t(10),a=t(4),o=e.exports=function(e){(e=e||{}).defaultValue=e.defaultValue?e.defaultValue:a.SUPPRESS,e.dest=e.dest||a.SUPPRESS,e.nargs=0,this.version=e.version,i.call(this,e)};r.inherits(o,i),o.prototype.call=function(e){var n=this.version||e.version,t=e._getFormatter();t.addText(n),e.exit(0,t.formatHelp())}},function(e,n,t){"use strict";var r=t(1),i=t(1).format,a=t(10),o=t(4),s=t(26);function c(e,n){var t={optionStrings:[],dest:e,help:n};a.call(this,t)}function u(e){(e=e||{}).dest=e.dest||o.SUPPRESS,e.nargs=o.PARSER,this.debug=!0===e.debug,this._progPrefix=e.prog,this._parserClass=e.parserClass,this._nameParserMap={},this._choicesActions=[],e.choices=this._nameParserMap,a.call(this,e)}r.inherits(c,a),r.inherits(u,a),u.prototype.addParser=function(e,n){var t,r=this;(n=n||{}).debug=!0===this.debug,n.prog||(n.prog=this._progPrefix+" "+e);var i=n.aliases||[];if(n.help||"string"==typeof n.help){var a=n.help;delete n.help;var o=new c(e,a);this._choicesActions.push(o)}return t=new this._parserClass(n),this._nameParserMap[e]=t,i.forEach((function(e){r._nameParserMap[e]=t})),t},u.prototype._getSubactions=function(){return this._choicesActions},u.prototype.call=function(e,n,t){var r=t[0],a=t.slice(1);if(this.dest!==o.SUPPRESS&&(n[this.dest]=r),!this._nameParserMap[r])throw s(i('Unknown parser "%s" (choices: [%s]).',r,Object.keys(this._nameParserMap).join(", ")));this._nameParserMap[r].parseArgs(a,n)},e.exports=u},function(e,n,t){"use strict";var r=t(1),i=t(43),a=e.exports=function(e,n){var t;t=(n=n||{}).required||!1,i.call(this,e),this.required=t};r.inherits(a,i),a.prototype._addAction=function(e){if(e.required)throw"mutually exclusive arguments must be optional",new Error("mutually exclusive arguments must be optional");return e=this._container._addAction(e),this._groupActions.push(e),e},a.prototype._removeAction=function(e){this._container._removeAction(e),this._groupActions.remove(e)}},function(e,n,t){
/*!
 * mime-db
 * Copyright(c) 2014 Jonathan Ong
 * MIT Licensed
 */
e.exports=t(99)},function(e){e.exports=JSON.parse('{"application/1d-interleaved-parityfec":{"source":"iana"},"application/3gpdash-qoe-report+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/3gpp-ims+xml":{"source":"iana","compressible":true},"application/a2l":{"source":"iana"},"application/activemessage":{"source":"iana"},"application/activity+json":{"source":"iana","compressible":true},"application/alto-costmap+json":{"source":"iana","compressible":true},"application/alto-costmapfilter+json":{"source":"iana","compressible":true},"application/alto-directory+json":{"source":"iana","compressible":true},"application/alto-endpointcost+json":{"source":"iana","compressible":true},"application/alto-endpointcostparams+json":{"source":"iana","compressible":true},"application/alto-endpointprop+json":{"source":"iana","compressible":true},"application/alto-endpointpropparams+json":{"source":"iana","compressible":true},"application/alto-error+json":{"source":"iana","compressible":true},"application/alto-networkmap+json":{"source":"iana","compressible":true},"application/alto-networkmapfilter+json":{"source":"iana","compressible":true},"application/alto-updatestreamcontrol+json":{"source":"iana","compressible":true},"application/alto-updatestreamparams+json":{"source":"iana","compressible":true},"application/aml":{"source":"iana"},"application/andrew-inset":{"source":"iana","extensions":["ez"]},"application/applefile":{"source":"iana"},"application/applixware":{"source":"apache","extensions":["aw"]},"application/atf":{"source":"iana"},"application/atfx":{"source":"iana"},"application/atom+xml":{"source":"iana","compressible":true,"extensions":["atom"]},"application/atomcat+xml":{"source":"iana","compressible":true,"extensions":["atomcat"]},"application/atomdeleted+xml":{"source":"iana","compressible":true,"extensions":["atomdeleted"]},"application/atomicmail":{"source":"iana"},"application/atomsvc+xml":{"source":"iana","compressible":true,"extensions":["atomsvc"]},"application/atsc-dwd+xml":{"source":"iana","compressible":true,"extensions":["dwd"]},"application/atsc-dynamic-event-message":{"source":"iana"},"application/atsc-held+xml":{"source":"iana","compressible":true,"extensions":["held"]},"application/atsc-rdt+json":{"source":"iana","compressible":true},"application/atsc-rsat+xml":{"source":"iana","compressible":true,"extensions":["rsat"]},"application/atxml":{"source":"iana"},"application/auth-policy+xml":{"source":"iana","compressible":true},"application/bacnet-xdd+zip":{"source":"iana","compressible":false},"application/batch-smtp":{"source":"iana"},"application/bdoc":{"compressible":false,"extensions":["bdoc"]},"application/beep+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/calendar+json":{"source":"iana","compressible":true},"application/calendar+xml":{"source":"iana","compressible":true,"extensions":["xcs"]},"application/call-completion":{"source":"iana"},"application/cals-1840":{"source":"iana"},"application/cap+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/cbor":{"source":"iana"},"application/cbor-seq":{"source":"iana"},"application/cccex":{"source":"iana"},"application/ccmp+xml":{"source":"iana","compressible":true},"application/ccxml+xml":{"source":"iana","compressible":true,"extensions":["ccxml"]},"application/cdfx+xml":{"source":"iana","compressible":true,"extensions":["cdfx"]},"application/cdmi-capability":{"source":"iana","extensions":["cdmia"]},"application/cdmi-container":{"source":"iana","extensions":["cdmic"]},"application/cdmi-domain":{"source":"iana","extensions":["cdmid"]},"application/cdmi-object":{"source":"iana","extensions":["cdmio"]},"application/cdmi-queue":{"source":"iana","extensions":["cdmiq"]},"application/cdni":{"source":"iana"},"application/cea":{"source":"iana"},"application/cea-2018+xml":{"source":"iana","compressible":true},"application/cellml+xml":{"source":"iana","compressible":true},"application/cfw":{"source":"iana"},"application/clue+xml":{"source":"iana","compressible":true},"application/clue_info+xml":{"source":"iana","compressible":true},"application/cms":{"source":"iana"},"application/cnrp+xml":{"source":"iana","compressible":true},"application/coap-group+json":{"source":"iana","compressible":true},"application/coap-payload":{"source":"iana"},"application/commonground":{"source":"iana"},"application/conference-info+xml":{"source":"iana","compressible":true},"application/cose":{"source":"iana"},"application/cose-key":{"source":"iana"},"application/cose-key-set":{"source":"iana"},"application/cpl+xml":{"source":"iana","compressible":true},"application/csrattrs":{"source":"iana"},"application/csta+xml":{"source":"iana","compressible":true},"application/cstadata+xml":{"source":"iana","compressible":true},"application/csvm+json":{"source":"iana","compressible":true},"application/cu-seeme":{"source":"apache","extensions":["cu"]},"application/cwt":{"source":"iana"},"application/cybercash":{"source":"iana"},"application/dart":{"compressible":true},"application/dash+xml":{"source":"iana","compressible":true,"extensions":["mpd"]},"application/dashdelta":{"source":"iana"},"application/davmount+xml":{"source":"iana","compressible":true,"extensions":["davmount"]},"application/dca-rft":{"source":"iana"},"application/dcd":{"source":"iana"},"application/dec-dx":{"source":"iana"},"application/dialog-info+xml":{"source":"iana","compressible":true},"application/dicom":{"source":"iana"},"application/dicom+json":{"source":"iana","compressible":true},"application/dicom+xml":{"source":"iana","compressible":true},"application/dii":{"source":"iana"},"application/dit":{"source":"iana"},"application/dns":{"source":"iana"},"application/dns+json":{"source":"iana","compressible":true},"application/dns-message":{"source":"iana"},"application/docbook+xml":{"source":"apache","compressible":true,"extensions":["dbk"]},"application/dots+cbor":{"source":"iana"},"application/dskpp+xml":{"source":"iana","compressible":true},"application/dssc+der":{"source":"iana","extensions":["dssc"]},"application/dssc+xml":{"source":"iana","compressible":true,"extensions":["xdssc"]},"application/dvcs":{"source":"iana"},"application/ecmascript":{"source":"iana","compressible":true,"extensions":["ecma","es"]},"application/edi-consent":{"source":"iana"},"application/edi-x12":{"source":"iana","compressible":false},"application/edifact":{"source":"iana","compressible":false},"application/efi":{"source":"iana"},"application/emergencycalldata.comment+xml":{"source":"iana","compressible":true},"application/emergencycalldata.control+xml":{"source":"iana","compressible":true},"application/emergencycalldata.deviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.ecall.msd":{"source":"iana"},"application/emergencycalldata.providerinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.serviceinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.subscriberinfo+xml":{"source":"iana","compressible":true},"application/emergencycalldata.veds+xml":{"source":"iana","compressible":true},"application/emma+xml":{"source":"iana","compressible":true,"extensions":["emma"]},"application/emotionml+xml":{"source":"iana","compressible":true,"extensions":["emotionml"]},"application/encaprtp":{"source":"iana"},"application/epp+xml":{"source":"iana","compressible":true},"application/epub+zip":{"source":"iana","compressible":false,"extensions":["epub"]},"application/eshop":{"source":"iana"},"application/exi":{"source":"iana","extensions":["exi"]},"application/expect-ct-report+json":{"source":"iana","compressible":true},"application/fastinfoset":{"source":"iana"},"application/fastsoap":{"source":"iana"},"application/fdt+xml":{"source":"iana","compressible":true,"extensions":["fdt"]},"application/fhir+json":{"source":"iana","charset":"UTF-8","compressible":true},"application/fhir+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/fido.trusted-apps+json":{"compressible":true},"application/fits":{"source":"iana"},"application/flexfec":{"source":"iana"},"application/font-sfnt":{"source":"iana"},"application/font-tdpfr":{"source":"iana","extensions":["pfr"]},"application/font-woff":{"source":"iana","compressible":false},"application/framework-attributes+xml":{"source":"iana","compressible":true},"application/geo+json":{"source":"iana","compressible":true,"extensions":["geojson"]},"application/geo+json-seq":{"source":"iana"},"application/geopackage+sqlite3":{"source":"iana"},"application/geoxacml+xml":{"source":"iana","compressible":true},"application/gltf-buffer":{"source":"iana"},"application/gml+xml":{"source":"iana","compressible":true,"extensions":["gml"]},"application/gpx+xml":{"source":"apache","compressible":true,"extensions":["gpx"]},"application/gxf":{"source":"apache","extensions":["gxf"]},"application/gzip":{"source":"iana","compressible":false,"extensions":["gz"]},"application/h224":{"source":"iana"},"application/held+xml":{"source":"iana","compressible":true},"application/hjson":{"extensions":["hjson"]},"application/http":{"source":"iana"},"application/hyperstudio":{"source":"iana","extensions":["stk"]},"application/ibe-key-request+xml":{"source":"iana","compressible":true},"application/ibe-pkg-reply+xml":{"source":"iana","compressible":true},"application/ibe-pp-data":{"source":"iana"},"application/iges":{"source":"iana"},"application/im-iscomposing+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/index":{"source":"iana"},"application/index.cmd":{"source":"iana"},"application/index.obj":{"source":"iana"},"application/index.response":{"source":"iana"},"application/index.vnd":{"source":"iana"},"application/inkml+xml":{"source":"iana","compressible":true,"extensions":["ink","inkml"]},"application/iotp":{"source":"iana"},"application/ipfix":{"source":"iana","extensions":["ipfix"]},"application/ipp":{"source":"iana"},"application/isup":{"source":"iana"},"application/its+xml":{"source":"iana","compressible":true,"extensions":["its"]},"application/java-archive":{"source":"apache","compressible":false,"extensions":["jar","war","ear"]},"application/java-serialized-object":{"source":"apache","compressible":false,"extensions":["ser"]},"application/java-vm":{"source":"apache","compressible":false,"extensions":["class"]},"application/javascript":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["js","mjs"]},"application/jf2feed+json":{"source":"iana","compressible":true},"application/jose":{"source":"iana"},"application/jose+json":{"source":"iana","compressible":true},"application/jrd+json":{"source":"iana","compressible":true},"application/json":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["json","map"]},"application/json-patch+json":{"source":"iana","compressible":true},"application/json-seq":{"source":"iana"},"application/json5":{"extensions":["json5"]},"application/jsonml+json":{"source":"apache","compressible":true,"extensions":["jsonml"]},"application/jwk+json":{"source":"iana","compressible":true},"application/jwk-set+json":{"source":"iana","compressible":true},"application/jwt":{"source":"iana"},"application/kpml-request+xml":{"source":"iana","compressible":true},"application/kpml-response+xml":{"source":"iana","compressible":true},"application/ld+json":{"source":"iana","compressible":true,"extensions":["jsonld"]},"application/lgr+xml":{"source":"iana","compressible":true,"extensions":["lgr"]},"application/link-format":{"source":"iana"},"application/load-control+xml":{"source":"iana","compressible":true},"application/lost+xml":{"source":"iana","compressible":true,"extensions":["lostxml"]},"application/lostsync+xml":{"source":"iana","compressible":true},"application/lpf+zip":{"source":"iana","compressible":false},"application/lxf":{"source":"iana"},"application/mac-binhex40":{"source":"iana","extensions":["hqx"]},"application/mac-compactpro":{"source":"apache","extensions":["cpt"]},"application/macwriteii":{"source":"iana"},"application/mads+xml":{"source":"iana","compressible":true,"extensions":["mads"]},"application/manifest+json":{"charset":"UTF-8","compressible":true,"extensions":["webmanifest"]},"application/marc":{"source":"iana","extensions":["mrc"]},"application/marcxml+xml":{"source":"iana","compressible":true,"extensions":["mrcx"]},"application/mathematica":{"source":"iana","extensions":["ma","nb","mb"]},"application/mathml+xml":{"source":"iana","compressible":true,"extensions":["mathml"]},"application/mathml-content+xml":{"source":"iana","compressible":true},"application/mathml-presentation+xml":{"source":"iana","compressible":true},"application/mbms-associated-procedure-description+xml":{"source":"iana","compressible":true},"application/mbms-deregister+xml":{"source":"iana","compressible":true},"application/mbms-envelope+xml":{"source":"iana","compressible":true},"application/mbms-msk+xml":{"source":"iana","compressible":true},"application/mbms-msk-response+xml":{"source":"iana","compressible":true},"application/mbms-protection-description+xml":{"source":"iana","compressible":true},"application/mbms-reception-report+xml":{"source":"iana","compressible":true},"application/mbms-register+xml":{"source":"iana","compressible":true},"application/mbms-register-response+xml":{"source":"iana","compressible":true},"application/mbms-schedule+xml":{"source":"iana","compressible":true},"application/mbms-user-service-description+xml":{"source":"iana","compressible":true},"application/mbox":{"source":"iana","extensions":["mbox"]},"application/media-policy-dataset+xml":{"source":"iana","compressible":true},"application/media_control+xml":{"source":"iana","compressible":true},"application/mediaservercontrol+xml":{"source":"iana","compressible":true,"extensions":["mscml"]},"application/merge-patch+json":{"source":"iana","compressible":true},"application/metalink+xml":{"source":"apache","compressible":true,"extensions":["metalink"]},"application/metalink4+xml":{"source":"iana","compressible":true,"extensions":["meta4"]},"application/mets+xml":{"source":"iana","compressible":true,"extensions":["mets"]},"application/mf4":{"source":"iana"},"application/mikey":{"source":"iana"},"application/mipc":{"source":"iana"},"application/mmt-aei+xml":{"source":"iana","compressible":true,"extensions":["maei"]},"application/mmt-usd+xml":{"source":"iana","compressible":true,"extensions":["musd"]},"application/mods+xml":{"source":"iana","compressible":true,"extensions":["mods"]},"application/moss-keys":{"source":"iana"},"application/moss-signature":{"source":"iana"},"application/mosskey-data":{"source":"iana"},"application/mosskey-request":{"source":"iana"},"application/mp21":{"source":"iana","extensions":["m21","mp21"]},"application/mp4":{"source":"iana","extensions":["mp4s","m4p"]},"application/mpeg4-generic":{"source":"iana"},"application/mpeg4-iod":{"source":"iana"},"application/mpeg4-iod-xmt":{"source":"iana"},"application/mrb-consumer+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/mrb-publish+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/msc-ivr+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msc-mixer+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/msword":{"source":"iana","compressible":false,"extensions":["doc","dot"]},"application/mud+json":{"source":"iana","compressible":true},"application/multipart-core":{"source":"iana"},"application/mxf":{"source":"iana","extensions":["mxf"]},"application/n-quads":{"source":"iana","extensions":["nq"]},"application/n-triples":{"source":"iana","extensions":["nt"]},"application/nasdata":{"source":"iana"},"application/news-checkgroups":{"source":"iana","charset":"US-ASCII"},"application/news-groupinfo":{"source":"iana","charset":"US-ASCII"},"application/news-transmission":{"source":"iana"},"application/nlsml+xml":{"source":"iana","compressible":true},"application/node":{"source":"iana","extensions":["cjs"]},"application/nss":{"source":"iana"},"application/ocsp-request":{"source":"iana"},"application/ocsp-response":{"source":"iana"},"application/octet-stream":{"source":"iana","compressible":false,"extensions":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"]},"application/oda":{"source":"iana","extensions":["oda"]},"application/odm+xml":{"source":"iana","compressible":true},"application/odx":{"source":"iana"},"application/oebps-package+xml":{"source":"iana","compressible":true,"extensions":["opf"]},"application/ogg":{"source":"iana","compressible":false,"extensions":["ogx"]},"application/omdoc+xml":{"source":"apache","compressible":true,"extensions":["omdoc"]},"application/onenote":{"source":"apache","extensions":["onetoc","onetoc2","onetmp","onepkg"]},"application/oscore":{"source":"iana"},"application/oxps":{"source":"iana","extensions":["oxps"]},"application/p2p-overlay+xml":{"source":"iana","compressible":true,"extensions":["relo"]},"application/parityfec":{"source":"iana"},"application/passport":{"source":"iana"},"application/patch-ops-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/pdf":{"source":"iana","compressible":false,"extensions":["pdf"]},"application/pdx":{"source":"iana"},"application/pem-certificate-chain":{"source":"iana"},"application/pgp-encrypted":{"source":"iana","compressible":false,"extensions":["pgp"]},"application/pgp-keys":{"source":"iana"},"application/pgp-signature":{"source":"iana","extensions":["asc","sig"]},"application/pics-rules":{"source":"apache","extensions":["prf"]},"application/pidf+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pidf-diff+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/pkcs10":{"source":"iana","extensions":["p10"]},"application/pkcs12":{"source":"iana"},"application/pkcs7-mime":{"source":"iana","extensions":["p7m","p7c"]},"application/pkcs7-signature":{"source":"iana","extensions":["p7s"]},"application/pkcs8":{"source":"iana","extensions":["p8"]},"application/pkcs8-encrypted":{"source":"iana"},"application/pkix-attr-cert":{"source":"iana","extensions":["ac"]},"application/pkix-cert":{"source":"iana","extensions":["cer"]},"application/pkix-crl":{"source":"iana","extensions":["crl"]},"application/pkix-pkipath":{"source":"iana","extensions":["pkipath"]},"application/pkixcmp":{"source":"iana","extensions":["pki"]},"application/pls+xml":{"source":"iana","compressible":true,"extensions":["pls"]},"application/poc-settings+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/postscript":{"source":"iana","compressible":true,"extensions":["ai","eps","ps"]},"application/ppsp-tracker+json":{"source":"iana","compressible":true},"application/problem+json":{"source":"iana","compressible":true},"application/problem+xml":{"source":"iana","compressible":true},"application/provenance+xml":{"source":"iana","compressible":true,"extensions":["provx"]},"application/prs.alvestrand.titrax-sheet":{"source":"iana"},"application/prs.cww":{"source":"iana","extensions":["cww"]},"application/prs.hpub+zip":{"source":"iana","compressible":false},"application/prs.nprend":{"source":"iana"},"application/prs.plucker":{"source":"iana"},"application/prs.rdf-xml-crypt":{"source":"iana"},"application/prs.xsf+xml":{"source":"iana","compressible":true},"application/pskc+xml":{"source":"iana","compressible":true,"extensions":["pskcxml"]},"application/pvd+json":{"source":"iana","compressible":true},"application/qsig":{"source":"iana"},"application/raml+yaml":{"compressible":true,"extensions":["raml"]},"application/raptorfec":{"source":"iana"},"application/rdap+json":{"source":"iana","compressible":true},"application/rdf+xml":{"source":"iana","compressible":true,"extensions":["rdf","owl"]},"application/reginfo+xml":{"source":"iana","compressible":true,"extensions":["rif"]},"application/relax-ng-compact-syntax":{"source":"iana","extensions":["rnc"]},"application/remote-printing":{"source":"iana"},"application/reputon+json":{"source":"iana","compressible":true},"application/resource-lists+xml":{"source":"iana","compressible":true,"extensions":["rl"]},"application/resource-lists-diff+xml":{"source":"iana","compressible":true,"extensions":["rld"]},"application/rfc+xml":{"source":"iana","compressible":true},"application/riscos":{"source":"iana"},"application/rlmi+xml":{"source":"iana","compressible":true},"application/rls-services+xml":{"source":"iana","compressible":true,"extensions":["rs"]},"application/route-apd+xml":{"source":"iana","compressible":true,"extensions":["rapd"]},"application/route-s-tsid+xml":{"source":"iana","compressible":true,"extensions":["sls"]},"application/route-usd+xml":{"source":"iana","compressible":true,"extensions":["rusd"]},"application/rpki-ghostbusters":{"source":"iana","extensions":["gbr"]},"application/rpki-manifest":{"source":"iana","extensions":["mft"]},"application/rpki-publication":{"source":"iana"},"application/rpki-roa":{"source":"iana","extensions":["roa"]},"application/rpki-updown":{"source":"iana"},"application/rsd+xml":{"source":"apache","compressible":true,"extensions":["rsd"]},"application/rss+xml":{"source":"apache","compressible":true,"extensions":["rss"]},"application/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"application/rtploopback":{"source":"iana"},"application/rtx":{"source":"iana"},"application/samlassertion+xml":{"source":"iana","compressible":true},"application/samlmetadata+xml":{"source":"iana","compressible":true},"application/sbe":{"source":"iana"},"application/sbml+xml":{"source":"iana","compressible":true,"extensions":["sbml"]},"application/scaip+xml":{"source":"iana","compressible":true},"application/scim+json":{"source":"iana","compressible":true},"application/scvp-cv-request":{"source":"iana","extensions":["scq"]},"application/scvp-cv-response":{"source":"iana","extensions":["scs"]},"application/scvp-vp-request":{"source":"iana","extensions":["spq"]},"application/scvp-vp-response":{"source":"iana","extensions":["spp"]},"application/sdp":{"source":"iana","extensions":["sdp"]},"application/secevent+jwt":{"source":"iana"},"application/senml+cbor":{"source":"iana"},"application/senml+json":{"source":"iana","compressible":true},"application/senml+xml":{"source":"iana","compressible":true,"extensions":["senmlx"]},"application/senml-etch+cbor":{"source":"iana"},"application/senml-etch+json":{"source":"iana","compressible":true},"application/senml-exi":{"source":"iana"},"application/sensml+cbor":{"source":"iana"},"application/sensml+json":{"source":"iana","compressible":true},"application/sensml+xml":{"source":"iana","compressible":true,"extensions":["sensmlx"]},"application/sensml-exi":{"source":"iana"},"application/sep+xml":{"source":"iana","compressible":true},"application/sep-exi":{"source":"iana"},"application/session-info":{"source":"iana"},"application/set-payment":{"source":"iana"},"application/set-payment-initiation":{"source":"iana","extensions":["setpay"]},"application/set-registration":{"source":"iana"},"application/set-registration-initiation":{"source":"iana","extensions":["setreg"]},"application/sgml":{"source":"iana"},"application/sgml-open-catalog":{"source":"iana"},"application/shf+xml":{"source":"iana","compressible":true,"extensions":["shf"]},"application/sieve":{"source":"iana","extensions":["siv","sieve"]},"application/simple-filter+xml":{"source":"iana","compressible":true},"application/simple-message-summary":{"source":"iana"},"application/simplesymbolcontainer":{"source":"iana"},"application/sipc":{"source":"iana"},"application/slate":{"source":"iana"},"application/smil":{"source":"iana"},"application/smil+xml":{"source":"iana","compressible":true,"extensions":["smi","smil"]},"application/smpte336m":{"source":"iana"},"application/soap+fastinfoset":{"source":"iana"},"application/soap+xml":{"source":"iana","compressible":true},"application/sparql-query":{"source":"iana","extensions":["rq"]},"application/sparql-results+xml":{"source":"iana","compressible":true,"extensions":["srx"]},"application/spirits-event+xml":{"source":"iana","compressible":true},"application/sql":{"source":"iana"},"application/srgs":{"source":"iana","extensions":["gram"]},"application/srgs+xml":{"source":"iana","compressible":true,"extensions":["grxml"]},"application/sru+xml":{"source":"iana","compressible":true,"extensions":["sru"]},"application/ssdl+xml":{"source":"apache","compressible":true,"extensions":["ssdl"]},"application/ssml+xml":{"source":"iana","compressible":true,"extensions":["ssml"]},"application/stix+json":{"source":"iana","compressible":true},"application/swid+xml":{"source":"iana","compressible":true,"extensions":["swidtag"]},"application/tamp-apex-update":{"source":"iana"},"application/tamp-apex-update-confirm":{"source":"iana"},"application/tamp-community-update":{"source":"iana"},"application/tamp-community-update-confirm":{"source":"iana"},"application/tamp-error":{"source":"iana"},"application/tamp-sequence-adjust":{"source":"iana"},"application/tamp-sequence-adjust-confirm":{"source":"iana"},"application/tamp-status-query":{"source":"iana"},"application/tamp-status-response":{"source":"iana"},"application/tamp-update":{"source":"iana"},"application/tamp-update-confirm":{"source":"iana"},"application/tar":{"compressible":true},"application/taxii+json":{"source":"iana","compressible":true},"application/td+json":{"source":"iana","compressible":true},"application/tei+xml":{"source":"iana","compressible":true,"extensions":["tei","teicorpus"]},"application/tetra_isi":{"source":"iana"},"application/thraud+xml":{"source":"iana","compressible":true,"extensions":["tfi"]},"application/timestamp-query":{"source":"iana"},"application/timestamp-reply":{"source":"iana"},"application/timestamped-data":{"source":"iana","extensions":["tsd"]},"application/tlsrpt+gzip":{"source":"iana"},"application/tlsrpt+json":{"source":"iana","compressible":true},"application/tnauthlist":{"source":"iana"},"application/toml":{"compressible":true,"extensions":["toml"]},"application/trickle-ice-sdpfrag":{"source":"iana"},"application/trig":{"source":"iana"},"application/ttml+xml":{"source":"iana","compressible":true,"extensions":["ttml"]},"application/tve-trigger":{"source":"iana"},"application/tzif":{"source":"iana"},"application/tzif-leap":{"source":"iana"},"application/ulpfec":{"source":"iana"},"application/urc-grpsheet+xml":{"source":"iana","compressible":true},"application/urc-ressheet+xml":{"source":"iana","compressible":true,"extensions":["rsheet"]},"application/urc-targetdesc+xml":{"source":"iana","compressible":true},"application/urc-uisocketdesc+xml":{"source":"iana","compressible":true},"application/vcard+json":{"source":"iana","compressible":true},"application/vcard+xml":{"source":"iana","compressible":true},"application/vemmi":{"source":"iana"},"application/vividence.scriptfile":{"source":"apache"},"application/vnd.1000minds.decision-model+xml":{"source":"iana","compressible":true,"extensions":["1km"]},"application/vnd.3gpp-prose+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-prose-pc3ch+xml":{"source":"iana","compressible":true},"application/vnd.3gpp-v2x-local-service-information":{"source":"iana"},"application/vnd.3gpp.access-transfer-events+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.bsf+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.gmop+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mc-signalling-ear":{"source":"iana"},"application/vnd.3gpp.mcdata-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-payload":{"source":"iana"},"application/vnd.3gpp.mcdata-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-signalling":{"source":"iana"},"application/vnd.3gpp.mcdata-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcdata-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-floor-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-signed+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-ue-init-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcptt-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-command+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-affiliation-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-location-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-mbms-usage-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-service-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-transmission-request+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-ue-config+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mcvideo-user-profile+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.mid-call+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.pic-bw-large":{"source":"iana","extensions":["plb"]},"application/vnd.3gpp.pic-bw-small":{"source":"iana","extensions":["psb"]},"application/vnd.3gpp.pic-bw-var":{"source":"iana","extensions":["pvb"]},"application/vnd.3gpp.sms":{"source":"iana"},"application/vnd.3gpp.sms+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-ext+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.srvcc-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.state-and-event-info+xml":{"source":"iana","compressible":true},"application/vnd.3gpp.ussd+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.bcmcsinfo+xml":{"source":"iana","compressible":true},"application/vnd.3gpp2.sms":{"source":"iana"},"application/vnd.3gpp2.tcap":{"source":"iana","extensions":["tcap"]},"application/vnd.3lightssoftware.imagescal":{"source":"iana"},"application/vnd.3m.post-it-notes":{"source":"iana","extensions":["pwn"]},"application/vnd.accpac.simply.aso":{"source":"iana","extensions":["aso"]},"application/vnd.accpac.simply.imp":{"source":"iana","extensions":["imp"]},"application/vnd.acucobol":{"source":"iana","extensions":["acu"]},"application/vnd.acucorp":{"source":"iana","extensions":["atc","acutc"]},"application/vnd.adobe.air-application-installer-package+zip":{"source":"apache","compressible":false,"extensions":["air"]},"application/vnd.adobe.flash.movie":{"source":"iana"},"application/vnd.adobe.formscentral.fcdt":{"source":"iana","extensions":["fcdt"]},"application/vnd.adobe.fxp":{"source":"iana","extensions":["fxp","fxpl"]},"application/vnd.adobe.partial-upload":{"source":"iana"},"application/vnd.adobe.xdp+xml":{"source":"iana","compressible":true,"extensions":["xdp"]},"application/vnd.adobe.xfdf":{"source":"iana","extensions":["xfdf"]},"application/vnd.aether.imp":{"source":"iana"},"application/vnd.afpc.afplinedata":{"source":"iana"},"application/vnd.afpc.afplinedata-pagedef":{"source":"iana"},"application/vnd.afpc.foca-charset":{"source":"iana"},"application/vnd.afpc.foca-codedfont":{"source":"iana"},"application/vnd.afpc.foca-codepage":{"source":"iana"},"application/vnd.afpc.modca":{"source":"iana"},"application/vnd.afpc.modca-formdef":{"source":"iana"},"application/vnd.afpc.modca-mediummap":{"source":"iana"},"application/vnd.afpc.modca-objectcontainer":{"source":"iana"},"application/vnd.afpc.modca-overlay":{"source":"iana"},"application/vnd.afpc.modca-pagesegment":{"source":"iana"},"application/vnd.ah-barcode":{"source":"iana"},"application/vnd.ahead.space":{"source":"iana","extensions":["ahead"]},"application/vnd.airzip.filesecure.azf":{"source":"iana","extensions":["azf"]},"application/vnd.airzip.filesecure.azs":{"source":"iana","extensions":["azs"]},"application/vnd.amadeus+json":{"source":"iana","compressible":true},"application/vnd.amazon.ebook":{"source":"apache","extensions":["azw"]},"application/vnd.amazon.mobi8-ebook":{"source":"iana"},"application/vnd.americandynamics.acc":{"source":"iana","extensions":["acc"]},"application/vnd.amiga.ami":{"source":"iana","extensions":["ami"]},"application/vnd.amundsen.maze+xml":{"source":"iana","compressible":true},"application/vnd.android.ota":{"source":"iana"},"application/vnd.android.package-archive":{"source":"apache","compressible":false,"extensions":["apk"]},"application/vnd.anki":{"source":"iana"},"application/vnd.anser-web-certificate-issue-initiation":{"source":"iana","extensions":["cii"]},"application/vnd.anser-web-funds-transfer-initiation":{"source":"apache","extensions":["fti"]},"application/vnd.antix.game-component":{"source":"iana","extensions":["atx"]},"application/vnd.apache.thrift.binary":{"source":"iana"},"application/vnd.apache.thrift.compact":{"source":"iana"},"application/vnd.apache.thrift.json":{"source":"iana"},"application/vnd.api+json":{"source":"iana","compressible":true},"application/vnd.aplextor.warrp+json":{"source":"iana","compressible":true},"application/vnd.apothekende.reservation+json":{"source":"iana","compressible":true},"application/vnd.apple.installer+xml":{"source":"iana","compressible":true,"extensions":["mpkg"]},"application/vnd.apple.keynote":{"source":"iana","extensions":["keynote"]},"application/vnd.apple.mpegurl":{"source":"iana","extensions":["m3u8"]},"application/vnd.apple.numbers":{"source":"iana","extensions":["numbers"]},"application/vnd.apple.pages":{"source":"iana","extensions":["pages"]},"application/vnd.apple.pkpass":{"compressible":false,"extensions":["pkpass"]},"application/vnd.arastra.swi":{"source":"iana"},"application/vnd.aristanetworks.swi":{"source":"iana","extensions":["swi"]},"application/vnd.artisan+json":{"source":"iana","compressible":true},"application/vnd.artsquare":{"source":"iana"},"application/vnd.astraea-software.iota":{"source":"iana","extensions":["iota"]},"application/vnd.audiograph":{"source":"iana","extensions":["aep"]},"application/vnd.autopackage":{"source":"iana"},"application/vnd.avalon+json":{"source":"iana","compressible":true},"application/vnd.avistar+xml":{"source":"iana","compressible":true},"application/vnd.balsamiq.bmml+xml":{"source":"iana","compressible":true,"extensions":["bmml"]},"application/vnd.balsamiq.bmpr":{"source":"iana"},"application/vnd.banana-accounting":{"source":"iana"},"application/vnd.bbf.usp.error":{"source":"iana"},"application/vnd.bbf.usp.msg":{"source":"iana"},"application/vnd.bbf.usp.msg+json":{"source":"iana","compressible":true},"application/vnd.bekitzur-stech+json":{"source":"iana","compressible":true},"application/vnd.bint.med-content":{"source":"iana"},"application/vnd.biopax.rdf+xml":{"source":"iana","compressible":true},"application/vnd.blink-idb-value-wrapper":{"source":"iana"},"application/vnd.blueice.multipass":{"source":"iana","extensions":["mpm"]},"application/vnd.bluetooth.ep.oob":{"source":"iana"},"application/vnd.bluetooth.le.oob":{"source":"iana"},"application/vnd.bmi":{"source":"iana","extensions":["bmi"]},"application/vnd.bpf":{"source":"iana"},"application/vnd.bpf3":{"source":"iana"},"application/vnd.businessobjects":{"source":"iana","extensions":["rep"]},"application/vnd.byu.uapi+json":{"source":"iana","compressible":true},"application/vnd.cab-jscript":{"source":"iana"},"application/vnd.canon-cpdl":{"source":"iana"},"application/vnd.canon-lips":{"source":"iana"},"application/vnd.capasystems-pg+json":{"source":"iana","compressible":true},"application/vnd.cendio.thinlinc.clientconf":{"source":"iana"},"application/vnd.century-systems.tcp_stream":{"source":"iana"},"application/vnd.chemdraw+xml":{"source":"iana","compressible":true,"extensions":["cdxml"]},"application/vnd.chess-pgn":{"source":"iana"},"application/vnd.chipnuts.karaoke-mmd":{"source":"iana","extensions":["mmd"]},"application/vnd.ciedi":{"source":"iana"},"application/vnd.cinderella":{"source":"iana","extensions":["cdy"]},"application/vnd.cirpack.isdn-ext":{"source":"iana"},"application/vnd.citationstyles.style+xml":{"source":"iana","compressible":true,"extensions":["csl"]},"application/vnd.claymore":{"source":"iana","extensions":["cla"]},"application/vnd.cloanto.rp9":{"source":"iana","extensions":["rp9"]},"application/vnd.clonk.c4group":{"source":"iana","extensions":["c4g","c4d","c4f","c4p","c4u"]},"application/vnd.cluetrust.cartomobile-config":{"source":"iana","extensions":["c11amc"]},"application/vnd.cluetrust.cartomobile-config-pkg":{"source":"iana","extensions":["c11amz"]},"application/vnd.coffeescript":{"source":"iana"},"application/vnd.collabio.xodocuments.document":{"source":"iana"},"application/vnd.collabio.xodocuments.document-template":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation":{"source":"iana"},"application/vnd.collabio.xodocuments.presentation-template":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet":{"source":"iana"},"application/vnd.collabio.xodocuments.spreadsheet-template":{"source":"iana"},"application/vnd.collection+json":{"source":"iana","compressible":true},"application/vnd.collection.doc+json":{"source":"iana","compressible":true},"application/vnd.collection.next+json":{"source":"iana","compressible":true},"application/vnd.comicbook+zip":{"source":"iana","compressible":false},"application/vnd.comicbook-rar":{"source":"iana"},"application/vnd.commerce-battelle":{"source":"iana"},"application/vnd.commonspace":{"source":"iana","extensions":["csp"]},"application/vnd.contact.cmsg":{"source":"iana","extensions":["cdbcmsg"]},"application/vnd.coreos.ignition+json":{"source":"iana","compressible":true},"application/vnd.cosmocaller":{"source":"iana","extensions":["cmc"]},"application/vnd.crick.clicker":{"source":"iana","extensions":["clkx"]},"application/vnd.crick.clicker.keyboard":{"source":"iana","extensions":["clkk"]},"application/vnd.crick.clicker.palette":{"source":"iana","extensions":["clkp"]},"application/vnd.crick.clicker.template":{"source":"iana","extensions":["clkt"]},"application/vnd.crick.clicker.wordbank":{"source":"iana","extensions":["clkw"]},"application/vnd.criticaltools.wbs+xml":{"source":"iana","compressible":true,"extensions":["wbs"]},"application/vnd.cryptii.pipe+json":{"source":"iana","compressible":true},"application/vnd.crypto-shade-file":{"source":"iana"},"application/vnd.ctc-posml":{"source":"iana","extensions":["pml"]},"application/vnd.ctct.ws+xml":{"source":"iana","compressible":true},"application/vnd.cups-pdf":{"source":"iana"},"application/vnd.cups-postscript":{"source":"iana"},"application/vnd.cups-ppd":{"source":"iana","extensions":["ppd"]},"application/vnd.cups-raster":{"source":"iana"},"application/vnd.cups-raw":{"source":"iana"},"application/vnd.curl":{"source":"iana"},"application/vnd.curl.car":{"source":"apache","extensions":["car"]},"application/vnd.curl.pcurl":{"source":"apache","extensions":["pcurl"]},"application/vnd.cyan.dean.root+xml":{"source":"iana","compressible":true},"application/vnd.cybank":{"source":"iana"},"application/vnd.d2l.coursepackage1p0+zip":{"source":"iana","compressible":false},"application/vnd.dart":{"source":"iana","compressible":true,"extensions":["dart"]},"application/vnd.data-vision.rdz":{"source":"iana","extensions":["rdz"]},"application/vnd.datapackage+json":{"source":"iana","compressible":true},"application/vnd.dataresource+json":{"source":"iana","compressible":true},"application/vnd.dbf":{"source":"iana"},"application/vnd.debian.binary-package":{"source":"iana"},"application/vnd.dece.data":{"source":"iana","extensions":["uvf","uvvf","uvd","uvvd"]},"application/vnd.dece.ttml+xml":{"source":"iana","compressible":true,"extensions":["uvt","uvvt"]},"application/vnd.dece.unspecified":{"source":"iana","extensions":["uvx","uvvx"]},"application/vnd.dece.zip":{"source":"iana","extensions":["uvz","uvvz"]},"application/vnd.denovo.fcselayout-link":{"source":"iana","extensions":["fe_launch"]},"application/vnd.desmume.movie":{"source":"iana"},"application/vnd.dir-bi.plate-dl-nosuffix":{"source":"iana"},"application/vnd.dm.delegation+xml":{"source":"iana","compressible":true},"application/vnd.dna":{"source":"iana","extensions":["dna"]},"application/vnd.document+json":{"source":"iana","compressible":true},"application/vnd.dolby.mlp":{"source":"apache","extensions":["mlp"]},"application/vnd.dolby.mobile.1":{"source":"iana"},"application/vnd.dolby.mobile.2":{"source":"iana"},"application/vnd.doremir.scorecloud-binary-document":{"source":"iana"},"application/vnd.dpgraph":{"source":"iana","extensions":["dpg"]},"application/vnd.dreamfactory":{"source":"iana","extensions":["dfac"]},"application/vnd.drive+json":{"source":"iana","compressible":true},"application/vnd.ds-keypoint":{"source":"apache","extensions":["kpxx"]},"application/vnd.dtg.local":{"source":"iana"},"application/vnd.dtg.local.flash":{"source":"iana"},"application/vnd.dtg.local.html":{"source":"iana"},"application/vnd.dvb.ait":{"source":"iana","extensions":["ait"]},"application/vnd.dvb.dvbisl+xml":{"source":"iana","compressible":true},"application/vnd.dvb.dvbj":{"source":"iana"},"application/vnd.dvb.esgcontainer":{"source":"iana"},"application/vnd.dvb.ipdcdftnotifaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess":{"source":"iana"},"application/vnd.dvb.ipdcesgaccess2":{"source":"iana"},"application/vnd.dvb.ipdcesgpdd":{"source":"iana"},"application/vnd.dvb.ipdcroaming":{"source":"iana"},"application/vnd.dvb.iptv.alfec-base":{"source":"iana"},"application/vnd.dvb.iptv.alfec-enhancement":{"source":"iana"},"application/vnd.dvb.notif-aggregate-root+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-container+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-generic+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-msglist+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-request+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-ia-registration-response+xml":{"source":"iana","compressible":true},"application/vnd.dvb.notif-init+xml":{"source":"iana","compressible":true},"application/vnd.dvb.pfr":{"source":"iana"},"application/vnd.dvb.service":{"source":"iana","extensions":["svc"]},"application/vnd.dxr":{"source":"iana"},"application/vnd.dynageo":{"source":"iana","extensions":["geo"]},"application/vnd.dzr":{"source":"iana"},"application/vnd.easykaraoke.cdgdownload":{"source":"iana"},"application/vnd.ecdis-update":{"source":"iana"},"application/vnd.ecip.rlp":{"source":"iana"},"application/vnd.ecowin.chart":{"source":"iana","extensions":["mag"]},"application/vnd.ecowin.filerequest":{"source":"iana"},"application/vnd.ecowin.fileupdate":{"source":"iana"},"application/vnd.ecowin.series":{"source":"iana"},"application/vnd.ecowin.seriesrequest":{"source":"iana"},"application/vnd.ecowin.seriesupdate":{"source":"iana"},"application/vnd.efi.img":{"source":"iana"},"application/vnd.efi.iso":{"source":"iana"},"application/vnd.emclient.accessrequest+xml":{"source":"iana","compressible":true},"application/vnd.enliven":{"source":"iana","extensions":["nml"]},"application/vnd.enphase.envoy":{"source":"iana"},"application/vnd.eprints.data+xml":{"source":"iana","compressible":true},"application/vnd.epson.esf":{"source":"iana","extensions":["esf"]},"application/vnd.epson.msf":{"source":"iana","extensions":["msf"]},"application/vnd.epson.quickanime":{"source":"iana","extensions":["qam"]},"application/vnd.epson.salt":{"source":"iana","extensions":["slt"]},"application/vnd.epson.ssf":{"source":"iana","extensions":["ssf"]},"application/vnd.ericsson.quickcall":{"source":"iana"},"application/vnd.espass-espass+zip":{"source":"iana","compressible":false},"application/vnd.eszigno3+xml":{"source":"iana","compressible":true,"extensions":["es3","et3"]},"application/vnd.etsi.aoc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.asic-e+zip":{"source":"iana","compressible":false},"application/vnd.etsi.asic-s+zip":{"source":"iana","compressible":false},"application/vnd.etsi.cug+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvcommand+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-bc+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-cod+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsad-npvr+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvservice+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvsync+xml":{"source":"iana","compressible":true},"application/vnd.etsi.iptvueprofile+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mcid+xml":{"source":"iana","compressible":true},"application/vnd.etsi.mheg5":{"source":"iana"},"application/vnd.etsi.overload-control-policy-dataset+xml":{"source":"iana","compressible":true},"application/vnd.etsi.pstn+xml":{"source":"iana","compressible":true},"application/vnd.etsi.sci+xml":{"source":"iana","compressible":true},"application/vnd.etsi.simservs+xml":{"source":"iana","compressible":true},"application/vnd.etsi.timestamp-token":{"source":"iana"},"application/vnd.etsi.tsl+xml":{"source":"iana","compressible":true},"application/vnd.etsi.tsl.der":{"source":"iana"},"application/vnd.eudora.data":{"source":"iana"},"application/vnd.evolv.ecig.profile":{"source":"iana"},"application/vnd.evolv.ecig.settings":{"source":"iana"},"application/vnd.evolv.ecig.theme":{"source":"iana"},"application/vnd.exstream-empower+zip":{"source":"iana","compressible":false},"application/vnd.exstream-package":{"source":"iana"},"application/vnd.ezpix-album":{"source":"iana","extensions":["ez2"]},"application/vnd.ezpix-package":{"source":"iana","extensions":["ez3"]},"application/vnd.f-secure.mobile":{"source":"iana"},"application/vnd.fastcopy-disk-image":{"source":"iana"},"application/vnd.fdf":{"source":"iana","extensions":["fdf"]},"application/vnd.fdsn.mseed":{"source":"iana","extensions":["mseed"]},"application/vnd.fdsn.seed":{"source":"iana","extensions":["seed","dataless"]},"application/vnd.ffsns":{"source":"iana"},"application/vnd.ficlab.flb+zip":{"source":"iana","compressible":false},"application/vnd.filmit.zfc":{"source":"iana"},"application/vnd.fints":{"source":"iana"},"application/vnd.firemonkeys.cloudcell":{"source":"iana"},"application/vnd.flographit":{"source":"iana","extensions":["gph"]},"application/vnd.fluxtime.clip":{"source":"iana","extensions":["ftc"]},"application/vnd.font-fontforge-sfd":{"source":"iana"},"application/vnd.framemaker":{"source":"iana","extensions":["fm","frame","maker","book"]},"application/vnd.frogans.fnc":{"source":"iana","extensions":["fnc"]},"application/vnd.frogans.ltf":{"source":"iana","extensions":["ltf"]},"application/vnd.fsc.weblaunch":{"source":"iana","extensions":["fsc"]},"application/vnd.fujitsu.oasys":{"source":"iana","extensions":["oas"]},"application/vnd.fujitsu.oasys2":{"source":"iana","extensions":["oa2"]},"application/vnd.fujitsu.oasys3":{"source":"iana","extensions":["oa3"]},"application/vnd.fujitsu.oasysgp":{"source":"iana","extensions":["fg5"]},"application/vnd.fujitsu.oasysprs":{"source":"iana","extensions":["bh2"]},"application/vnd.fujixerox.art-ex":{"source":"iana"},"application/vnd.fujixerox.art4":{"source":"iana"},"application/vnd.fujixerox.ddd":{"source":"iana","extensions":["ddd"]},"application/vnd.fujixerox.docuworks":{"source":"iana","extensions":["xdw"]},"application/vnd.fujixerox.docuworks.binder":{"source":"iana","extensions":["xbd"]},"application/vnd.fujixerox.docuworks.container":{"source":"iana"},"application/vnd.fujixerox.hbpl":{"source":"iana"},"application/vnd.fut-misnet":{"source":"iana"},"application/vnd.futoin+cbor":{"source":"iana"},"application/vnd.futoin+json":{"source":"iana","compressible":true},"application/vnd.fuzzysheet":{"source":"iana","extensions":["fzs"]},"application/vnd.genomatix.tuxedo":{"source":"iana","extensions":["txd"]},"application/vnd.gentics.grd+json":{"source":"iana","compressible":true},"application/vnd.geo+json":{"source":"iana","compressible":true},"application/vnd.geocube+xml":{"source":"iana","compressible":true},"application/vnd.geogebra.file":{"source":"iana","extensions":["ggb"]},"application/vnd.geogebra.tool":{"source":"iana","extensions":["ggt"]},"application/vnd.geometry-explorer":{"source":"iana","extensions":["gex","gre"]},"application/vnd.geonext":{"source":"iana","extensions":["gxt"]},"application/vnd.geoplan":{"source":"iana","extensions":["g2w"]},"application/vnd.geospace":{"source":"iana","extensions":["g3w"]},"application/vnd.gerber":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt":{"source":"iana"},"application/vnd.globalplatform.card-content-mgt-response":{"source":"iana"},"application/vnd.gmx":{"source":"iana","extensions":["gmx"]},"application/vnd.google-apps.document":{"compressible":false,"extensions":["gdoc"]},"application/vnd.google-apps.presentation":{"compressible":false,"extensions":["gslides"]},"application/vnd.google-apps.spreadsheet":{"compressible":false,"extensions":["gsheet"]},"application/vnd.google-earth.kml+xml":{"source":"iana","compressible":true,"extensions":["kml"]},"application/vnd.google-earth.kmz":{"source":"iana","compressible":false,"extensions":["kmz"]},"application/vnd.gov.sk.e-form+xml":{"source":"iana","compressible":true},"application/vnd.gov.sk.e-form+zip":{"source":"iana","compressible":false},"application/vnd.gov.sk.xmldatacontainer+xml":{"source":"iana","compressible":true},"application/vnd.grafeq":{"source":"iana","extensions":["gqf","gqs"]},"application/vnd.gridmp":{"source":"iana"},"application/vnd.groove-account":{"source":"iana","extensions":["gac"]},"application/vnd.groove-help":{"source":"iana","extensions":["ghf"]},"application/vnd.groove-identity-message":{"source":"iana","extensions":["gim"]},"application/vnd.groove-injector":{"source":"iana","extensions":["grv"]},"application/vnd.groove-tool-message":{"source":"iana","extensions":["gtm"]},"application/vnd.groove-tool-template":{"source":"iana","extensions":["tpl"]},"application/vnd.groove-vcard":{"source":"iana","extensions":["vcg"]},"application/vnd.hal+json":{"source":"iana","compressible":true},"application/vnd.hal+xml":{"source":"iana","compressible":true,"extensions":["hal"]},"application/vnd.handheld-entertainment+xml":{"source":"iana","compressible":true,"extensions":["zmm"]},"application/vnd.hbci":{"source":"iana","extensions":["hbci"]},"application/vnd.hc+json":{"source":"iana","compressible":true},"application/vnd.hcl-bireports":{"source":"iana"},"application/vnd.hdt":{"source":"iana"},"application/vnd.heroku+json":{"source":"iana","compressible":true},"application/vnd.hhe.lesson-player":{"source":"iana","extensions":["les"]},"application/vnd.hp-hpgl":{"source":"iana","extensions":["hpgl"]},"application/vnd.hp-hpid":{"source":"iana","extensions":["hpid"]},"application/vnd.hp-hps":{"source":"iana","extensions":["hps"]},"application/vnd.hp-jlyt":{"source":"iana","extensions":["jlt"]},"application/vnd.hp-pcl":{"source":"iana","extensions":["pcl"]},"application/vnd.hp-pclxl":{"source":"iana","extensions":["pclxl"]},"application/vnd.httphone":{"source":"iana"},"application/vnd.hydrostatix.sof-data":{"source":"iana","extensions":["sfd-hdstx"]},"application/vnd.hyper+json":{"source":"iana","compressible":true},"application/vnd.hyper-item+json":{"source":"iana","compressible":true},"application/vnd.hyperdrive+json":{"source":"iana","compressible":true},"application/vnd.hzn-3d-crossword":{"source":"iana"},"application/vnd.ibm.afplinedata":{"source":"iana"},"application/vnd.ibm.electronic-media":{"source":"iana"},"application/vnd.ibm.minipay":{"source":"iana","extensions":["mpy"]},"application/vnd.ibm.modcap":{"source":"iana","extensions":["afp","listafp","list3820"]},"application/vnd.ibm.rights-management":{"source":"iana","extensions":["irm"]},"application/vnd.ibm.secure-container":{"source":"iana","extensions":["sc"]},"application/vnd.iccprofile":{"source":"iana","extensions":["icc","icm"]},"application/vnd.ieee.1905":{"source":"iana"},"application/vnd.igloader":{"source":"iana","extensions":["igl"]},"application/vnd.imagemeter.folder+zip":{"source":"iana","compressible":false},"application/vnd.imagemeter.image+zip":{"source":"iana","compressible":false},"application/vnd.immervision-ivp":{"source":"iana","extensions":["ivp"]},"application/vnd.immervision-ivu":{"source":"iana","extensions":["ivu"]},"application/vnd.ims.imsccv1p1":{"source":"iana"},"application/vnd.ims.imsccv1p2":{"source":"iana"},"application/vnd.ims.imsccv1p3":{"source":"iana"},"application/vnd.ims.lis.v2.result+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolconsumerprofile+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolproxy.id+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings+json":{"source":"iana","compressible":true},"application/vnd.ims.lti.v2.toolsettings.simple+json":{"source":"iana","compressible":true},"application/vnd.informedcontrol.rms+xml":{"source":"iana","compressible":true},"application/vnd.informix-visionary":{"source":"iana"},"application/vnd.infotech.project":{"source":"iana"},"application/vnd.infotech.project+xml":{"source":"iana","compressible":true},"application/vnd.innopath.wamp.notification":{"source":"iana"},"application/vnd.insors.igm":{"source":"iana","extensions":["igm"]},"application/vnd.intercon.formnet":{"source":"iana","extensions":["xpw","xpx"]},"application/vnd.intergeo":{"source":"iana","extensions":["i2g"]},"application/vnd.intertrust.digibox":{"source":"iana"},"application/vnd.intertrust.nncp":{"source":"iana"},"application/vnd.intu.qbo":{"source":"iana","extensions":["qbo"]},"application/vnd.intu.qfx":{"source":"iana","extensions":["qfx"]},"application/vnd.iptc.g2.catalogitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.conceptitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.knowledgeitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.newsmessage+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.packageitem+xml":{"source":"iana","compressible":true},"application/vnd.iptc.g2.planningitem+xml":{"source":"iana","compressible":true},"application/vnd.ipunplugged.rcprofile":{"source":"iana","extensions":["rcprofile"]},"application/vnd.irepository.package+xml":{"source":"iana","compressible":true,"extensions":["irp"]},"application/vnd.is-xpr":{"source":"iana","extensions":["xpr"]},"application/vnd.isac.fcs":{"source":"iana","extensions":["fcs"]},"application/vnd.iso11783-10+zip":{"source":"iana","compressible":false},"application/vnd.jam":{"source":"iana","extensions":["jam"]},"application/vnd.japannet-directory-service":{"source":"iana"},"application/vnd.japannet-jpnstore-wakeup":{"source":"iana"},"application/vnd.japannet-payment-wakeup":{"source":"iana"},"application/vnd.japannet-registration":{"source":"iana"},"application/vnd.japannet-registration-wakeup":{"source":"iana"},"application/vnd.japannet-setstore-wakeup":{"source":"iana"},"application/vnd.japannet-verification":{"source":"iana"},"application/vnd.japannet-verification-wakeup":{"source":"iana"},"application/vnd.jcp.javame.midlet-rms":{"source":"iana","extensions":["rms"]},"application/vnd.jisp":{"source":"iana","extensions":["jisp"]},"application/vnd.joost.joda-archive":{"source":"iana","extensions":["joda"]},"application/vnd.jsk.isdn-ngn":{"source":"iana"},"application/vnd.kahootz":{"source":"iana","extensions":["ktz","ktr"]},"application/vnd.kde.karbon":{"source":"iana","extensions":["karbon"]},"application/vnd.kde.kchart":{"source":"iana","extensions":["chrt"]},"application/vnd.kde.kformula":{"source":"iana","extensions":["kfo"]},"application/vnd.kde.kivio":{"source":"iana","extensions":["flw"]},"application/vnd.kde.kontour":{"source":"iana","extensions":["kon"]},"application/vnd.kde.kpresenter":{"source":"iana","extensions":["kpr","kpt"]},"application/vnd.kde.kspread":{"source":"iana","extensions":["ksp"]},"application/vnd.kde.kword":{"source":"iana","extensions":["kwd","kwt"]},"application/vnd.kenameaapp":{"source":"iana","extensions":["htke"]},"application/vnd.kidspiration":{"source":"iana","extensions":["kia"]},"application/vnd.kinar":{"source":"iana","extensions":["kne","knp"]},"application/vnd.koan":{"source":"iana","extensions":["skp","skd","skt","skm"]},"application/vnd.kodak-descriptor":{"source":"iana","extensions":["sse"]},"application/vnd.las":{"source":"iana"},"application/vnd.las.las+json":{"source":"iana","compressible":true},"application/vnd.las.las+xml":{"source":"iana","compressible":true,"extensions":["lasxml"]},"application/vnd.laszip":{"source":"iana"},"application/vnd.leap+json":{"source":"iana","compressible":true},"application/vnd.liberty-request+xml":{"source":"iana","compressible":true},"application/vnd.llamagraphics.life-balance.desktop":{"source":"iana","extensions":["lbd"]},"application/vnd.llamagraphics.life-balance.exchange+xml":{"source":"iana","compressible":true,"extensions":["lbe"]},"application/vnd.logipipe.circuit+zip":{"source":"iana","compressible":false},"application/vnd.loom":{"source":"iana"},"application/vnd.lotus-1-2-3":{"source":"iana","extensions":["123"]},"application/vnd.lotus-approach":{"source":"iana","extensions":["apr"]},"application/vnd.lotus-freelance":{"source":"iana","extensions":["pre"]},"application/vnd.lotus-notes":{"source":"iana","extensions":["nsf"]},"application/vnd.lotus-organizer":{"source":"iana","extensions":["org"]},"application/vnd.lotus-screencam":{"source":"iana","extensions":["scm"]},"application/vnd.lotus-wordpro":{"source":"iana","extensions":["lwp"]},"application/vnd.macports.portpkg":{"source":"iana","extensions":["portpkg"]},"application/vnd.mapbox-vector-tile":{"source":"iana"},"application/vnd.marlin.drm.actiontoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.conftoken+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.license+xml":{"source":"iana","compressible":true},"application/vnd.marlin.drm.mdcf":{"source":"iana"},"application/vnd.mason+json":{"source":"iana","compressible":true},"application/vnd.maxmind.maxmind-db":{"source":"iana"},"application/vnd.mcd":{"source":"iana","extensions":["mcd"]},"application/vnd.medcalcdata":{"source":"iana","extensions":["mc1"]},"application/vnd.mediastation.cdkey":{"source":"iana","extensions":["cdkey"]},"application/vnd.meridian-slingshot":{"source":"iana"},"application/vnd.mfer":{"source":"iana","extensions":["mwf"]},"application/vnd.mfmp":{"source":"iana","extensions":["mfm"]},"application/vnd.micro+json":{"source":"iana","compressible":true},"application/vnd.micrografx.flo":{"source":"iana","extensions":["flo"]},"application/vnd.micrografx.igx":{"source":"iana","extensions":["igx"]},"application/vnd.microsoft.portable-executable":{"source":"iana"},"application/vnd.microsoft.windows.thumbnail-cache":{"source":"iana"},"application/vnd.miele+json":{"source":"iana","compressible":true},"application/vnd.mif":{"source":"iana","extensions":["mif"]},"application/vnd.minisoft-hp3000-save":{"source":"iana"},"application/vnd.mitsubishi.misty-guard.trustweb":{"source":"iana"},"application/vnd.mobius.daf":{"source":"iana","extensions":["daf"]},"application/vnd.mobius.dis":{"source":"iana","extensions":["dis"]},"application/vnd.mobius.mbk":{"source":"iana","extensions":["mbk"]},"application/vnd.mobius.mqy":{"source":"iana","extensions":["mqy"]},"application/vnd.mobius.msl":{"source":"iana","extensions":["msl"]},"application/vnd.mobius.plc":{"source":"iana","extensions":["plc"]},"application/vnd.mobius.txf":{"source":"iana","extensions":["txf"]},"application/vnd.mophun.application":{"source":"iana","extensions":["mpn"]},"application/vnd.mophun.certificate":{"source":"iana","extensions":["mpc"]},"application/vnd.motorola.flexsuite":{"source":"iana"},"application/vnd.motorola.flexsuite.adsi":{"source":"iana"},"application/vnd.motorola.flexsuite.fis":{"source":"iana"},"application/vnd.motorola.flexsuite.gotap":{"source":"iana"},"application/vnd.motorola.flexsuite.kmr":{"source":"iana"},"application/vnd.motorola.flexsuite.ttc":{"source":"iana"},"application/vnd.motorola.flexsuite.wem":{"source":"iana"},"application/vnd.motorola.iprm":{"source":"iana"},"application/vnd.mozilla.xul+xml":{"source":"iana","compressible":true,"extensions":["xul"]},"application/vnd.ms-3mfdocument":{"source":"iana"},"application/vnd.ms-artgalry":{"source":"iana","extensions":["cil"]},"application/vnd.ms-asf":{"source":"iana"},"application/vnd.ms-cab-compressed":{"source":"iana","extensions":["cab"]},"application/vnd.ms-color.iccprofile":{"source":"apache"},"application/vnd.ms-excel":{"source":"iana","compressible":false,"extensions":["xls","xlm","xla","xlc","xlt","xlw"]},"application/vnd.ms-excel.addin.macroenabled.12":{"source":"iana","extensions":["xlam"]},"application/vnd.ms-excel.sheet.binary.macroenabled.12":{"source":"iana","extensions":["xlsb"]},"application/vnd.ms-excel.sheet.macroenabled.12":{"source":"iana","extensions":["xlsm"]},"application/vnd.ms-excel.template.macroenabled.12":{"source":"iana","extensions":["xltm"]},"application/vnd.ms-fontobject":{"source":"iana","compressible":true,"extensions":["eot"]},"application/vnd.ms-htmlhelp":{"source":"iana","extensions":["chm"]},"application/vnd.ms-ims":{"source":"iana","extensions":["ims"]},"application/vnd.ms-lrm":{"source":"iana","extensions":["lrm"]},"application/vnd.ms-office.activex+xml":{"source":"iana","compressible":true},"application/vnd.ms-officetheme":{"source":"iana","extensions":["thmx"]},"application/vnd.ms-opentype":{"source":"apache","compressible":true},"application/vnd.ms-outlook":{"compressible":false,"extensions":["msg"]},"application/vnd.ms-package.obfuscated-opentype":{"source":"apache"},"application/vnd.ms-pki.seccat":{"source":"apache","extensions":["cat"]},"application/vnd.ms-pki.stl":{"source":"apache","extensions":["stl"]},"application/vnd.ms-playready.initiator+xml":{"source":"iana","compressible":true},"application/vnd.ms-powerpoint":{"source":"iana","compressible":false,"extensions":["ppt","pps","pot"]},"application/vnd.ms-powerpoint.addin.macroenabled.12":{"source":"iana","extensions":["ppam"]},"application/vnd.ms-powerpoint.presentation.macroenabled.12":{"source":"iana","extensions":["pptm"]},"application/vnd.ms-powerpoint.slide.macroenabled.12":{"source":"iana","extensions":["sldm"]},"application/vnd.ms-powerpoint.slideshow.macroenabled.12":{"source":"iana","extensions":["ppsm"]},"application/vnd.ms-powerpoint.template.macroenabled.12":{"source":"iana","extensions":["potm"]},"application/vnd.ms-printdevicecapabilities+xml":{"source":"iana","compressible":true},"application/vnd.ms-printing.printticket+xml":{"source":"apache","compressible":true},"application/vnd.ms-printschematicket+xml":{"source":"iana","compressible":true},"application/vnd.ms-project":{"source":"iana","extensions":["mpp","mpt"]},"application/vnd.ms-tnef":{"source":"iana"},"application/vnd.ms-windows.devicepairing":{"source":"iana"},"application/vnd.ms-windows.nwprinting.oob":{"source":"iana"},"application/vnd.ms-windows.printerpairing":{"source":"iana"},"application/vnd.ms-windows.wsd.oob":{"source":"iana"},"application/vnd.ms-wmdrm.lic-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.lic-resp":{"source":"iana"},"application/vnd.ms-wmdrm.meter-chlg-req":{"source":"iana"},"application/vnd.ms-wmdrm.meter-resp":{"source":"iana"},"application/vnd.ms-word.document.macroenabled.12":{"source":"iana","extensions":["docm"]},"application/vnd.ms-word.template.macroenabled.12":{"source":"iana","extensions":["dotm"]},"application/vnd.ms-works":{"source":"iana","extensions":["wps","wks","wcm","wdb"]},"application/vnd.ms-wpl":{"source":"iana","extensions":["wpl"]},"application/vnd.ms-xpsdocument":{"source":"iana","compressible":false,"extensions":["xps"]},"application/vnd.msa-disk-image":{"source":"iana"},"application/vnd.mseq":{"source":"iana","extensions":["mseq"]},"application/vnd.msign":{"source":"iana"},"application/vnd.multiad.creator":{"source":"iana"},"application/vnd.multiad.creator.cif":{"source":"iana"},"application/vnd.music-niff":{"source":"iana"},"application/vnd.musician":{"source":"iana","extensions":["mus"]},"application/vnd.muvee.style":{"source":"iana","extensions":["msty"]},"application/vnd.mynfc":{"source":"iana","extensions":["taglet"]},"application/vnd.ncd.control":{"source":"iana"},"application/vnd.ncd.reference":{"source":"iana"},"application/vnd.nearst.inv+json":{"source":"iana","compressible":true},"application/vnd.nervana":{"source":"iana"},"application/vnd.netfpx":{"source":"iana"},"application/vnd.neurolanguage.nlu":{"source":"iana","extensions":["nlu"]},"application/vnd.nimn":{"source":"iana"},"application/vnd.nintendo.nitro.rom":{"source":"iana"},"application/vnd.nintendo.snes.rom":{"source":"iana"},"application/vnd.nitf":{"source":"iana","extensions":["ntf","nitf"]},"application/vnd.noblenet-directory":{"source":"iana","extensions":["nnd"]},"application/vnd.noblenet-sealer":{"source":"iana","extensions":["nns"]},"application/vnd.noblenet-web":{"source":"iana","extensions":["nnw"]},"application/vnd.nokia.catalogs":{"source":"iana"},"application/vnd.nokia.conml+wbxml":{"source":"iana"},"application/vnd.nokia.conml+xml":{"source":"iana","compressible":true},"application/vnd.nokia.iptv.config+xml":{"source":"iana","compressible":true},"application/vnd.nokia.isds-radio-presets":{"source":"iana"},"application/vnd.nokia.landmark+wbxml":{"source":"iana"},"application/vnd.nokia.landmark+xml":{"source":"iana","compressible":true},"application/vnd.nokia.landmarkcollection+xml":{"source":"iana","compressible":true},"application/vnd.nokia.n-gage.ac+xml":{"source":"iana","compressible":true,"extensions":["ac"]},"application/vnd.nokia.n-gage.data":{"source":"iana","extensions":["ngdat"]},"application/vnd.nokia.n-gage.symbian.install":{"source":"iana","extensions":["n-gage"]},"application/vnd.nokia.ncd":{"source":"iana"},"application/vnd.nokia.pcd+wbxml":{"source":"iana"},"application/vnd.nokia.pcd+xml":{"source":"iana","compressible":true},"application/vnd.nokia.radio-preset":{"source":"iana","extensions":["rpst"]},"application/vnd.nokia.radio-presets":{"source":"iana","extensions":["rpss"]},"application/vnd.novadigm.edm":{"source":"iana","extensions":["edm"]},"application/vnd.novadigm.edx":{"source":"iana","extensions":["edx"]},"application/vnd.novadigm.ext":{"source":"iana","extensions":["ext"]},"application/vnd.ntt-local.content-share":{"source":"iana"},"application/vnd.ntt-local.file-transfer":{"source":"iana"},"application/vnd.ntt-local.ogw_remote-access":{"source":"iana"},"application/vnd.ntt-local.sip-ta_remote":{"source":"iana"},"application/vnd.ntt-local.sip-ta_tcp_stream":{"source":"iana"},"application/vnd.oasis.opendocument.chart":{"source":"iana","extensions":["odc"]},"application/vnd.oasis.opendocument.chart-template":{"source":"iana","extensions":["otc"]},"application/vnd.oasis.opendocument.database":{"source":"iana","extensions":["odb"]},"application/vnd.oasis.opendocument.formula":{"source":"iana","extensions":["odf"]},"application/vnd.oasis.opendocument.formula-template":{"source":"iana","extensions":["odft"]},"application/vnd.oasis.opendocument.graphics":{"source":"iana","compressible":false,"extensions":["odg"]},"application/vnd.oasis.opendocument.graphics-template":{"source":"iana","extensions":["otg"]},"application/vnd.oasis.opendocument.image":{"source":"iana","extensions":["odi"]},"application/vnd.oasis.opendocument.image-template":{"source":"iana","extensions":["oti"]},"application/vnd.oasis.opendocument.presentation":{"source":"iana","compressible":false,"extensions":["odp"]},"application/vnd.oasis.opendocument.presentation-template":{"source":"iana","extensions":["otp"]},"application/vnd.oasis.opendocument.spreadsheet":{"source":"iana","compressible":false,"extensions":["ods"]},"application/vnd.oasis.opendocument.spreadsheet-template":{"source":"iana","extensions":["ots"]},"application/vnd.oasis.opendocument.text":{"source":"iana","compressible":false,"extensions":["odt"]},"application/vnd.oasis.opendocument.text-master":{"source":"iana","extensions":["odm"]},"application/vnd.oasis.opendocument.text-template":{"source":"iana","extensions":["ott"]},"application/vnd.oasis.opendocument.text-web":{"source":"iana","extensions":["oth"]},"application/vnd.obn":{"source":"iana"},"application/vnd.ocf+cbor":{"source":"iana"},"application/vnd.oci.image.manifest.v1+json":{"source":"iana","compressible":true},"application/vnd.oftn.l10n+json":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessdownload+xml":{"source":"iana","compressible":true},"application/vnd.oipf.contentaccessstreaming+xml":{"source":"iana","compressible":true},"application/vnd.oipf.cspg-hexbinary":{"source":"iana"},"application/vnd.oipf.dae.svg+xml":{"source":"iana","compressible":true},"application/vnd.oipf.dae.xhtml+xml":{"source":"iana","compressible":true},"application/vnd.oipf.mippvcontrolmessage+xml":{"source":"iana","compressible":true},"application/vnd.oipf.pae.gem":{"source":"iana"},"application/vnd.oipf.spdiscovery+xml":{"source":"iana","compressible":true},"application/vnd.oipf.spdlist+xml":{"source":"iana","compressible":true},"application/vnd.oipf.ueprofile+xml":{"source":"iana","compressible":true},"application/vnd.oipf.userprofile+xml":{"source":"iana","compressible":true},"application/vnd.olpc-sugar":{"source":"iana","extensions":["xo"]},"application/vnd.oma-scws-config":{"source":"iana"},"application/vnd.oma-scws-http-request":{"source":"iana"},"application/vnd.oma-scws-http-response":{"source":"iana"},"application/vnd.oma.bcast.associated-procedure-parameter+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.drm-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.imd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.ltkm":{"source":"iana"},"application/vnd.oma.bcast.notification+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.provisioningtrigger":{"source":"iana"},"application/vnd.oma.bcast.sgboot":{"source":"iana"},"application/vnd.oma.bcast.sgdd+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sgdu":{"source":"iana"},"application/vnd.oma.bcast.simple-symbol-container":{"source":"iana"},"application/vnd.oma.bcast.smartcard-trigger+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.sprov+xml":{"source":"iana","compressible":true},"application/vnd.oma.bcast.stkm":{"source":"iana"},"application/vnd.oma.cab-address-book+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-feature-handler+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-pcc+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-subs-invite+xml":{"source":"iana","compressible":true},"application/vnd.oma.cab-user-prefs+xml":{"source":"iana","compressible":true},"application/vnd.oma.dcd":{"source":"iana"},"application/vnd.oma.dcdc":{"source":"iana"},"application/vnd.oma.dd2+xml":{"source":"iana","compressible":true,"extensions":["dd2"]},"application/vnd.oma.drm.risd+xml":{"source":"iana","compressible":true},"application/vnd.oma.group-usage-list+xml":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+json":{"source":"iana","compressible":true},"application/vnd.oma.lwm2m+tlv":{"source":"iana"},"application/vnd.oma.pal+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.detailed-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.final-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.groups+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.invocation-descriptor+xml":{"source":"iana","compressible":true},"application/vnd.oma.poc.optimized-progress-report+xml":{"source":"iana","compressible":true},"application/vnd.oma.push":{"source":"iana"},"application/vnd.oma.scidm.messages+xml":{"source":"iana","compressible":true},"application/vnd.oma.xcap-directory+xml":{"source":"iana","compressible":true},"application/vnd.omads-email+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-file+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omads-folder+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.omaloc-supl-init":{"source":"iana"},"application/vnd.onepager":{"source":"iana"},"application/vnd.onepagertamp":{"source":"iana"},"application/vnd.onepagertamx":{"source":"iana"},"application/vnd.onepagertat":{"source":"iana"},"application/vnd.onepagertatp":{"source":"iana"},"application/vnd.onepagertatx":{"source":"iana"},"application/vnd.openblox.game+xml":{"source":"iana","compressible":true,"extensions":["obgx"]},"application/vnd.openblox.game-binary":{"source":"iana"},"application/vnd.openeye.oeb":{"source":"iana"},"application/vnd.openofficeorg.extension":{"source":"apache","extensions":["oxt"]},"application/vnd.openstreetmap.data+xml":{"source":"iana","compressible":true,"extensions":["osm"]},"application/vnd.openxmlformats-officedocument.custom-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.customxmlproperties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawing+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chart+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.extended-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presentation":{"source":"iana","compressible":false,"extensions":["pptx"]},"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slide":{"source":"iana","extensions":["sldx"]},"application/vnd.openxmlformats-officedocument.presentationml.slide+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideshow":{"source":"iana","extensions":["ppsx"]},"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.tags+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.template":{"source":"iana","extensions":["potx"]},"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":{"source":"iana","compressible":false,"extensions":["xlsx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.template":{"source":"iana","extensions":["xltx"]},"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.theme+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.themeoverride+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.vmldrawing":{"source":"iana"},"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document":{"source":"iana","compressible":false,"extensions":["docx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.template":{"source":"iana","extensions":["dotx"]},"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.core-properties+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml":{"source":"iana","compressible":true},"application/vnd.openxmlformats-package.relationships+xml":{"source":"iana","compressible":true},"application/vnd.oracle.resource+json":{"source":"iana","compressible":true},"application/vnd.orange.indata":{"source":"iana"},"application/vnd.osa.netdeploy":{"source":"iana"},"application/vnd.osgeo.mapguide.package":{"source":"iana","extensions":["mgp"]},"application/vnd.osgi.bundle":{"source":"iana"},"application/vnd.osgi.dp":{"source":"iana","extensions":["dp"]},"application/vnd.osgi.subsystem":{"source":"iana","extensions":["esa"]},"application/vnd.otps.ct-kip+xml":{"source":"iana","compressible":true},"application/vnd.oxli.countgraph":{"source":"iana"},"application/vnd.pagerduty+json":{"source":"iana","compressible":true},"application/vnd.palm":{"source":"iana","extensions":["pdb","pqa","oprc"]},"application/vnd.panoply":{"source":"iana"},"application/vnd.paos.xml":{"source":"iana"},"application/vnd.patentdive":{"source":"iana"},"application/vnd.patientecommsdoc":{"source":"iana"},"application/vnd.pawaafile":{"source":"iana","extensions":["paw"]},"application/vnd.pcos":{"source":"iana"},"application/vnd.pg.format":{"source":"iana","extensions":["str"]},"application/vnd.pg.osasli":{"source":"iana","extensions":["ei6"]},"application/vnd.piaccess.application-licence":{"source":"iana"},"application/vnd.picsel":{"source":"iana","extensions":["efif"]},"application/vnd.pmi.widget":{"source":"iana","extensions":["wg"]},"application/vnd.poc.group-advertisement+xml":{"source":"iana","compressible":true},"application/vnd.pocketlearn":{"source":"iana","extensions":["plf"]},"application/vnd.powerbuilder6":{"source":"iana","extensions":["pbd"]},"application/vnd.powerbuilder6-s":{"source":"iana"},"application/vnd.powerbuilder7":{"source":"iana"},"application/vnd.powerbuilder7-s":{"source":"iana"},"application/vnd.powerbuilder75":{"source":"iana"},"application/vnd.powerbuilder75-s":{"source":"iana"},"application/vnd.preminet":{"source":"iana"},"application/vnd.previewsystems.box":{"source":"iana","extensions":["box"]},"application/vnd.proteus.magazine":{"source":"iana","extensions":["mgz"]},"application/vnd.psfs":{"source":"iana"},"application/vnd.publishare-delta-tree":{"source":"iana","extensions":["qps"]},"application/vnd.pvi.ptid1":{"source":"iana","extensions":["ptid"]},"application/vnd.pwg-multiplexed":{"source":"iana"},"application/vnd.pwg-xhtml-print+xml":{"source":"iana","compressible":true},"application/vnd.qualcomm.brew-app-res":{"source":"iana"},"application/vnd.quarantainenet":{"source":"iana"},"application/vnd.quark.quarkxpress":{"source":"iana","extensions":["qxd","qxt","qwd","qwt","qxl","qxb"]},"application/vnd.quobject-quoxdocument":{"source":"iana"},"application/vnd.radisys.moml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-conn+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-audit-stream+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-conf+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-base+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-detect+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-fax-sendrecv+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-group+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-speech+xml":{"source":"iana","compressible":true},"application/vnd.radisys.msml-dialog-transform+xml":{"source":"iana","compressible":true},"application/vnd.rainstor.data":{"source":"iana"},"application/vnd.rapid":{"source":"iana"},"application/vnd.rar":{"source":"iana"},"application/vnd.realvnc.bed":{"source":"iana","extensions":["bed"]},"application/vnd.recordare.musicxml":{"source":"iana","extensions":["mxl"]},"application/vnd.recordare.musicxml+xml":{"source":"iana","compressible":true,"extensions":["musicxml"]},"application/vnd.renlearn.rlprint":{"source":"iana"},"application/vnd.restful+json":{"source":"iana","compressible":true},"application/vnd.rig.cryptonote":{"source":"iana","extensions":["cryptonote"]},"application/vnd.rim.cod":{"source":"apache","extensions":["cod"]},"application/vnd.rn-realmedia":{"source":"apache","extensions":["rm"]},"application/vnd.rn-realmedia-vbr":{"source":"apache","extensions":["rmvb"]},"application/vnd.route66.link66+xml":{"source":"iana","compressible":true,"extensions":["link66"]},"application/vnd.rs-274x":{"source":"iana"},"application/vnd.ruckus.download":{"source":"iana"},"application/vnd.s3sms":{"source":"iana"},"application/vnd.sailingtracker.track":{"source":"iana","extensions":["st"]},"application/vnd.sar":{"source":"iana"},"application/vnd.sbm.cid":{"source":"iana"},"application/vnd.sbm.mid2":{"source":"iana"},"application/vnd.scribus":{"source":"iana"},"application/vnd.sealed.3df":{"source":"iana"},"application/vnd.sealed.csf":{"source":"iana"},"application/vnd.sealed.doc":{"source":"iana"},"application/vnd.sealed.eml":{"source":"iana"},"application/vnd.sealed.mht":{"source":"iana"},"application/vnd.sealed.net":{"source":"iana"},"application/vnd.sealed.ppt":{"source":"iana"},"application/vnd.sealed.tiff":{"source":"iana"},"application/vnd.sealed.xls":{"source":"iana"},"application/vnd.sealedmedia.softseal.html":{"source":"iana"},"application/vnd.sealedmedia.softseal.pdf":{"source":"iana"},"application/vnd.seemail":{"source":"iana","extensions":["see"]},"application/vnd.sema":{"source":"iana","extensions":["sema"]},"application/vnd.semd":{"source":"iana","extensions":["semd"]},"application/vnd.semf":{"source":"iana","extensions":["semf"]},"application/vnd.shade-save-file":{"source":"iana"},"application/vnd.shana.informed.formdata":{"source":"iana","extensions":["ifm"]},"application/vnd.shana.informed.formtemplate":{"source":"iana","extensions":["itp"]},"application/vnd.shana.informed.interchange":{"source":"iana","extensions":["iif"]},"application/vnd.shana.informed.package":{"source":"iana","extensions":["ipk"]},"application/vnd.shootproof+json":{"source":"iana","compressible":true},"application/vnd.shopkick+json":{"source":"iana","compressible":true},"application/vnd.shp":{"source":"iana"},"application/vnd.shx":{"source":"iana"},"application/vnd.sigrok.session":{"source":"iana"},"application/vnd.simtech-mindmapper":{"source":"iana","extensions":["twd","twds"]},"application/vnd.siren+json":{"source":"iana","compressible":true},"application/vnd.smaf":{"source":"iana","extensions":["mmf"]},"application/vnd.smart.notebook":{"source":"iana"},"application/vnd.smart.teacher":{"source":"iana","extensions":["teacher"]},"application/vnd.snesdev-page-table":{"source":"iana"},"application/vnd.software602.filler.form+xml":{"source":"iana","compressible":true,"extensions":["fo"]},"application/vnd.software602.filler.form-xml-zip":{"source":"iana"},"application/vnd.solent.sdkm+xml":{"source":"iana","compressible":true,"extensions":["sdkm","sdkd"]},"application/vnd.spotfire.dxp":{"source":"iana","extensions":["dxp"]},"application/vnd.spotfire.sfs":{"source":"iana","extensions":["sfs"]},"application/vnd.sqlite3":{"source":"iana"},"application/vnd.sss-cod":{"source":"iana"},"application/vnd.sss-dtf":{"source":"iana"},"application/vnd.sss-ntf":{"source":"iana"},"application/vnd.stardivision.calc":{"source":"apache","extensions":["sdc"]},"application/vnd.stardivision.draw":{"source":"apache","extensions":["sda"]},"application/vnd.stardivision.impress":{"source":"apache","extensions":["sdd"]},"application/vnd.stardivision.math":{"source":"apache","extensions":["smf"]},"application/vnd.stardivision.writer":{"source":"apache","extensions":["sdw","vor"]},"application/vnd.stardivision.writer-global":{"source":"apache","extensions":["sgl"]},"application/vnd.stepmania.package":{"source":"iana","extensions":["smzip"]},"application/vnd.stepmania.stepchart":{"source":"iana","extensions":["sm"]},"application/vnd.street-stream":{"source":"iana"},"application/vnd.sun.wadl+xml":{"source":"iana","compressible":true,"extensions":["wadl"]},"application/vnd.sun.xml.calc":{"source":"apache","extensions":["sxc"]},"application/vnd.sun.xml.calc.template":{"source":"apache","extensions":["stc"]},"application/vnd.sun.xml.draw":{"source":"apache","extensions":["sxd"]},"application/vnd.sun.xml.draw.template":{"source":"apache","extensions":["std"]},"application/vnd.sun.xml.impress":{"source":"apache","extensions":["sxi"]},"application/vnd.sun.xml.impress.template":{"source":"apache","extensions":["sti"]},"application/vnd.sun.xml.math":{"source":"apache","extensions":["sxm"]},"application/vnd.sun.xml.writer":{"source":"apache","extensions":["sxw"]},"application/vnd.sun.xml.writer.global":{"source":"apache","extensions":["sxg"]},"application/vnd.sun.xml.writer.template":{"source":"apache","extensions":["stw"]},"application/vnd.sus-calendar":{"source":"iana","extensions":["sus","susp"]},"application/vnd.svd":{"source":"iana","extensions":["svd"]},"application/vnd.swiftview-ics":{"source":"iana"},"application/vnd.symbian.install":{"source":"apache","extensions":["sis","sisx"]},"application/vnd.syncml+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xsm"]},"application/vnd.syncml.dm+wbxml":{"source":"iana","charset":"UTF-8","extensions":["bdm"]},"application/vnd.syncml.dm+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["xdm"]},"application/vnd.syncml.dm.notification":{"source":"iana"},"application/vnd.syncml.dmddf+wbxml":{"source":"iana"},"application/vnd.syncml.dmddf+xml":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["ddf"]},"application/vnd.syncml.dmtnds+wbxml":{"source":"iana"},"application/vnd.syncml.dmtnds+xml":{"source":"iana","charset":"UTF-8","compressible":true},"application/vnd.syncml.ds.notification":{"source":"iana"},"application/vnd.tableschema+json":{"source":"iana","compressible":true},"application/vnd.tao.intent-module-archive":{"source":"iana","extensions":["tao"]},"application/vnd.tcpdump.pcap":{"source":"iana","extensions":["pcap","cap","dmp"]},"application/vnd.think-cell.ppttc+json":{"source":"iana","compressible":true},"application/vnd.tmd.mediaflex.api+xml":{"source":"iana","compressible":true},"application/vnd.tml":{"source":"iana"},"application/vnd.tmobile-livetv":{"source":"iana","extensions":["tmo"]},"application/vnd.tri.onesource":{"source":"iana"},"application/vnd.trid.tpt":{"source":"iana","extensions":["tpt"]},"application/vnd.triscape.mxs":{"source":"iana","extensions":["mxs"]},"application/vnd.trueapp":{"source":"iana","extensions":["tra"]},"application/vnd.truedoc":{"source":"iana"},"application/vnd.ubisoft.webplayer":{"source":"iana"},"application/vnd.ufdl":{"source":"iana","extensions":["ufd","ufdl"]},"application/vnd.uiq.theme":{"source":"iana","extensions":["utz"]},"application/vnd.umajin":{"source":"iana","extensions":["umj"]},"application/vnd.unity":{"source":"iana","extensions":["unityweb"]},"application/vnd.uoml+xml":{"source":"iana","compressible":true,"extensions":["uoml"]},"application/vnd.uplanet.alert":{"source":"iana"},"application/vnd.uplanet.alert-wbxml":{"source":"iana"},"application/vnd.uplanet.bearer-choice":{"source":"iana"},"application/vnd.uplanet.bearer-choice-wbxml":{"source":"iana"},"application/vnd.uplanet.cacheop":{"source":"iana"},"application/vnd.uplanet.cacheop-wbxml":{"source":"iana"},"application/vnd.uplanet.channel":{"source":"iana"},"application/vnd.uplanet.channel-wbxml":{"source":"iana"},"application/vnd.uplanet.list":{"source":"iana"},"application/vnd.uplanet.list-wbxml":{"source":"iana"},"application/vnd.uplanet.listcmd":{"source":"iana"},"application/vnd.uplanet.listcmd-wbxml":{"source":"iana"},"application/vnd.uplanet.signal":{"source":"iana"},"application/vnd.uri-map":{"source":"iana"},"application/vnd.valve.source.material":{"source":"iana"},"application/vnd.vcx":{"source":"iana","extensions":["vcx"]},"application/vnd.vd-study":{"source":"iana"},"application/vnd.vectorworks":{"source":"iana"},"application/vnd.vel+json":{"source":"iana","compressible":true},"application/vnd.verimatrix.vcas":{"source":"iana"},"application/vnd.veryant.thin":{"source":"iana"},"application/vnd.ves.encrypted":{"source":"iana"},"application/vnd.vidsoft.vidconference":{"source":"iana"},"application/vnd.visio":{"source":"iana","extensions":["vsd","vst","vss","vsw"]},"application/vnd.visionary":{"source":"iana","extensions":["vis"]},"application/vnd.vividence.scriptfile":{"source":"iana"},"application/vnd.vsf":{"source":"iana","extensions":["vsf"]},"application/vnd.wap.sic":{"source":"iana"},"application/vnd.wap.slc":{"source":"iana"},"application/vnd.wap.wbxml":{"source":"iana","charset":"UTF-8","extensions":["wbxml"]},"application/vnd.wap.wmlc":{"source":"iana","extensions":["wmlc"]},"application/vnd.wap.wmlscriptc":{"source":"iana","extensions":["wmlsc"]},"application/vnd.webturbo":{"source":"iana","extensions":["wtb"]},"application/vnd.wfa.p2p":{"source":"iana"},"application/vnd.wfa.wsc":{"source":"iana"},"application/vnd.windows.devicepairing":{"source":"iana"},"application/vnd.wmc":{"source":"iana"},"application/vnd.wmf.bootstrap":{"source":"iana"},"application/vnd.wolfram.mathematica":{"source":"iana"},"application/vnd.wolfram.mathematica.package":{"source":"iana"},"application/vnd.wolfram.player":{"source":"iana","extensions":["nbp"]},"application/vnd.wordperfect":{"source":"iana","extensions":["wpd"]},"application/vnd.wqd":{"source":"iana","extensions":["wqd"]},"application/vnd.wrq-hp3000-labelled":{"source":"iana"},"application/vnd.wt.stf":{"source":"iana","extensions":["stf"]},"application/vnd.wv.csp+wbxml":{"source":"iana"},"application/vnd.wv.csp+xml":{"source":"iana","compressible":true},"application/vnd.wv.ssp+xml":{"source":"iana","compressible":true},"application/vnd.xacml+json":{"source":"iana","compressible":true},"application/vnd.xara":{"source":"iana","extensions":["xar"]},"application/vnd.xfdl":{"source":"iana","extensions":["xfdl"]},"application/vnd.xfdl.webform":{"source":"iana"},"application/vnd.xmi+xml":{"source":"iana","compressible":true},"application/vnd.xmpie.cpkg":{"source":"iana"},"application/vnd.xmpie.dpkg":{"source":"iana"},"application/vnd.xmpie.plan":{"source":"iana"},"application/vnd.xmpie.ppkg":{"source":"iana"},"application/vnd.xmpie.xlim":{"source":"iana"},"application/vnd.yamaha.hv-dic":{"source":"iana","extensions":["hvd"]},"application/vnd.yamaha.hv-script":{"source":"iana","extensions":["hvs"]},"application/vnd.yamaha.hv-voice":{"source":"iana","extensions":["hvp"]},"application/vnd.yamaha.openscoreformat":{"source":"iana","extensions":["osf"]},"application/vnd.yamaha.openscoreformat.osfpvg+xml":{"source":"iana","compressible":true,"extensions":["osfpvg"]},"application/vnd.yamaha.remote-setup":{"source":"iana"},"application/vnd.yamaha.smaf-audio":{"source":"iana","extensions":["saf"]},"application/vnd.yamaha.smaf-phrase":{"source":"iana","extensions":["spf"]},"application/vnd.yamaha.through-ngn":{"source":"iana"},"application/vnd.yamaha.tunnel-udpencap":{"source":"iana"},"application/vnd.yaoweme":{"source":"iana"},"application/vnd.yellowriver-custom-menu":{"source":"iana","extensions":["cmp"]},"application/vnd.youtube.yt":{"source":"iana"},"application/vnd.zul":{"source":"iana","extensions":["zir","zirz"]},"application/vnd.zzazz.deck+xml":{"source":"iana","compressible":true,"extensions":["zaz"]},"application/voicexml+xml":{"source":"iana","compressible":true,"extensions":["vxml"]},"application/voucher-cms+json":{"source":"iana","compressible":true},"application/vq-rtcpxr":{"source":"iana"},"application/wasm":{"compressible":true,"extensions":["wasm"]},"application/watcherinfo+xml":{"source":"iana","compressible":true},"application/webpush-options+json":{"source":"iana","compressible":true},"application/whoispp-query":{"source":"iana"},"application/whoispp-response":{"source":"iana"},"application/widget":{"source":"iana","extensions":["wgt"]},"application/winhlp":{"source":"apache","extensions":["hlp"]},"application/wita":{"source":"iana"},"application/wordperfect5.1":{"source":"iana"},"application/wsdl+xml":{"source":"iana","compressible":true,"extensions":["wsdl"]},"application/wspolicy+xml":{"source":"iana","compressible":true,"extensions":["wspolicy"]},"application/x-7z-compressed":{"source":"apache","compressible":false,"extensions":["7z"]},"application/x-abiword":{"source":"apache","extensions":["abw"]},"application/x-ace-compressed":{"source":"apache","extensions":["ace"]},"application/x-amf":{"source":"apache"},"application/x-apple-diskimage":{"source":"apache","extensions":["dmg"]},"application/x-arj":{"compressible":false,"extensions":["arj"]},"application/x-authorware-bin":{"source":"apache","extensions":["aab","x32","u32","vox"]},"application/x-authorware-map":{"source":"apache","extensions":["aam"]},"application/x-authorware-seg":{"source":"apache","extensions":["aas"]},"application/x-bcpio":{"source":"apache","extensions":["bcpio"]},"application/x-bdoc":{"compressible":false,"extensions":["bdoc"]},"application/x-bittorrent":{"source":"apache","extensions":["torrent"]},"application/x-blorb":{"source":"apache","extensions":["blb","blorb"]},"application/x-bzip":{"source":"apache","compressible":false,"extensions":["bz"]},"application/x-bzip2":{"source":"apache","compressible":false,"extensions":["bz2","boz"]},"application/x-cbr":{"source":"apache","extensions":["cbr","cba","cbt","cbz","cb7"]},"application/x-cdlink":{"source":"apache","extensions":["vcd"]},"application/x-cfs-compressed":{"source":"apache","extensions":["cfs"]},"application/x-chat":{"source":"apache","extensions":["chat"]},"application/x-chess-pgn":{"source":"apache","extensions":["pgn"]},"application/x-chrome-extension":{"extensions":["crx"]},"application/x-cocoa":{"source":"nginx","extensions":["cco"]},"application/x-compress":{"source":"apache"},"application/x-conference":{"source":"apache","extensions":["nsc"]},"application/x-cpio":{"source":"apache","extensions":["cpio"]},"application/x-csh":{"source":"apache","extensions":["csh"]},"application/x-deb":{"compressible":false},"application/x-debian-package":{"source":"apache","extensions":["deb","udeb"]},"application/x-dgc-compressed":{"source":"apache","extensions":["dgc"]},"application/x-director":{"source":"apache","extensions":["dir","dcr","dxr","cst","cct","cxt","w3d","fgd","swa"]},"application/x-doom":{"source":"apache","extensions":["wad"]},"application/x-dtbncx+xml":{"source":"apache","compressible":true,"extensions":["ncx"]},"application/x-dtbook+xml":{"source":"apache","compressible":true,"extensions":["dtb"]},"application/x-dtbresource+xml":{"source":"apache","compressible":true,"extensions":["res"]},"application/x-dvi":{"source":"apache","compressible":false,"extensions":["dvi"]},"application/x-envoy":{"source":"apache","extensions":["evy"]},"application/x-eva":{"source":"apache","extensions":["eva"]},"application/x-font-bdf":{"source":"apache","extensions":["bdf"]},"application/x-font-dos":{"source":"apache"},"application/x-font-framemaker":{"source":"apache"},"application/x-font-ghostscript":{"source":"apache","extensions":["gsf"]},"application/x-font-libgrx":{"source":"apache"},"application/x-font-linux-psf":{"source":"apache","extensions":["psf"]},"application/x-font-pcf":{"source":"apache","extensions":["pcf"]},"application/x-font-snf":{"source":"apache","extensions":["snf"]},"application/x-font-speedo":{"source":"apache"},"application/x-font-sunos-news":{"source":"apache"},"application/x-font-type1":{"source":"apache","extensions":["pfa","pfb","pfm","afm"]},"application/x-font-vfont":{"source":"apache"},"application/x-freearc":{"source":"apache","extensions":["arc"]},"application/x-futuresplash":{"source":"apache","extensions":["spl"]},"application/x-gca-compressed":{"source":"apache","extensions":["gca"]},"application/x-glulx":{"source":"apache","extensions":["ulx"]},"application/x-gnumeric":{"source":"apache","extensions":["gnumeric"]},"application/x-gramps-xml":{"source":"apache","extensions":["gramps"]},"application/x-gtar":{"source":"apache","extensions":["gtar"]},"application/x-gzip":{"source":"apache"},"application/x-hdf":{"source":"apache","extensions":["hdf"]},"application/x-httpd-php":{"compressible":true,"extensions":["php"]},"application/x-install-instructions":{"source":"apache","extensions":["install"]},"application/x-iso9660-image":{"source":"apache","extensions":["iso"]},"application/x-java-archive-diff":{"source":"nginx","extensions":["jardiff"]},"application/x-java-jnlp-file":{"source":"apache","compressible":false,"extensions":["jnlp"]},"application/x-javascript":{"compressible":true},"application/x-keepass2":{"extensions":["kdbx"]},"application/x-latex":{"source":"apache","compressible":false,"extensions":["latex"]},"application/x-lua-bytecode":{"extensions":["luac"]},"application/x-lzh-compressed":{"source":"apache","extensions":["lzh","lha"]},"application/x-makeself":{"source":"nginx","extensions":["run"]},"application/x-mie":{"source":"apache","extensions":["mie"]},"application/x-mobipocket-ebook":{"source":"apache","extensions":["prc","mobi"]},"application/x-mpegurl":{"compressible":false},"application/x-ms-application":{"source":"apache","extensions":["application"]},"application/x-ms-shortcut":{"source":"apache","extensions":["lnk"]},"application/x-ms-wmd":{"source":"apache","extensions":["wmd"]},"application/x-ms-wmz":{"source":"apache","extensions":["wmz"]},"application/x-ms-xbap":{"source":"apache","extensions":["xbap"]},"application/x-msaccess":{"source":"apache","extensions":["mdb"]},"application/x-msbinder":{"source":"apache","extensions":["obd"]},"application/x-mscardfile":{"source":"apache","extensions":["crd"]},"application/x-msclip":{"source":"apache","extensions":["clp"]},"application/x-msdos-program":{"extensions":["exe"]},"application/x-msdownload":{"source":"apache","extensions":["exe","dll","com","bat","msi"]},"application/x-msmediaview":{"source":"apache","extensions":["mvb","m13","m14"]},"application/x-msmetafile":{"source":"apache","extensions":["wmf","wmz","emf","emz"]},"application/x-msmoney":{"source":"apache","extensions":["mny"]},"application/x-mspublisher":{"source":"apache","extensions":["pub"]},"application/x-msschedule":{"source":"apache","extensions":["scd"]},"application/x-msterminal":{"source":"apache","extensions":["trm"]},"application/x-mswrite":{"source":"apache","extensions":["wri"]},"application/x-netcdf":{"source":"apache","extensions":["nc","cdf"]},"application/x-ns-proxy-autoconfig":{"compressible":true,"extensions":["pac"]},"application/x-nzb":{"source":"apache","extensions":["nzb"]},"application/x-perl":{"source":"nginx","extensions":["pl","pm"]},"application/x-pilot":{"source":"nginx","extensions":["prc","pdb"]},"application/x-pkcs12":{"source":"apache","compressible":false,"extensions":["p12","pfx"]},"application/x-pkcs7-certificates":{"source":"apache","extensions":["p7b","spc"]},"application/x-pkcs7-certreqresp":{"source":"apache","extensions":["p7r"]},"application/x-pki-message":{"source":"iana"},"application/x-rar-compressed":{"source":"apache","compressible":false,"extensions":["rar"]},"application/x-redhat-package-manager":{"source":"nginx","extensions":["rpm"]},"application/x-research-info-systems":{"source":"apache","extensions":["ris"]},"application/x-sea":{"source":"nginx","extensions":["sea"]},"application/x-sh":{"source":"apache","compressible":true,"extensions":["sh"]},"application/x-shar":{"source":"apache","extensions":["shar"]},"application/x-shockwave-flash":{"source":"apache","compressible":false,"extensions":["swf"]},"application/x-silverlight-app":{"source":"apache","extensions":["xap"]},"application/x-sql":{"source":"apache","extensions":["sql"]},"application/x-stuffit":{"source":"apache","compressible":false,"extensions":["sit"]},"application/x-stuffitx":{"source":"apache","extensions":["sitx"]},"application/x-subrip":{"source":"apache","extensions":["srt"]},"application/x-sv4cpio":{"source":"apache","extensions":["sv4cpio"]},"application/x-sv4crc":{"source":"apache","extensions":["sv4crc"]},"application/x-t3vm-image":{"source":"apache","extensions":["t3"]},"application/x-tads":{"source":"apache","extensions":["gam"]},"application/x-tar":{"source":"apache","compressible":true,"extensions":["tar"]},"application/x-tcl":{"source":"apache","extensions":["tcl","tk"]},"application/x-tex":{"source":"apache","extensions":["tex"]},"application/x-tex-tfm":{"source":"apache","extensions":["tfm"]},"application/x-texinfo":{"source":"apache","extensions":["texinfo","texi"]},"application/x-tgif":{"source":"apache","extensions":["obj"]},"application/x-ustar":{"source":"apache","extensions":["ustar"]},"application/x-virtualbox-hdd":{"compressible":true,"extensions":["hdd"]},"application/x-virtualbox-ova":{"compressible":true,"extensions":["ova"]},"application/x-virtualbox-ovf":{"compressible":true,"extensions":["ovf"]},"application/x-virtualbox-vbox":{"compressible":true,"extensions":["vbox"]},"application/x-virtualbox-vbox-extpack":{"compressible":false,"extensions":["vbox-extpack"]},"application/x-virtualbox-vdi":{"compressible":true,"extensions":["vdi"]},"application/x-virtualbox-vhd":{"compressible":true,"extensions":["vhd"]},"application/x-virtualbox-vmdk":{"compressible":true,"extensions":["vmdk"]},"application/x-wais-source":{"source":"apache","extensions":["src"]},"application/x-web-app-manifest+json":{"compressible":true,"extensions":["webapp"]},"application/x-www-form-urlencoded":{"source":"iana","compressible":true},"application/x-x509-ca-cert":{"source":"iana","extensions":["der","crt","pem"]},"application/x-x509-ca-ra-cert":{"source":"iana"},"application/x-x509-next-ca-cert":{"source":"iana"},"application/x-xfig":{"source":"apache","extensions":["fig"]},"application/x-xliff+xml":{"source":"apache","compressible":true,"extensions":["xlf"]},"application/x-xpinstall":{"source":"apache","compressible":false,"extensions":["xpi"]},"application/x-xz":{"source":"apache","extensions":["xz"]},"application/x-zmachine":{"source":"apache","extensions":["z1","z2","z3","z4","z5","z6","z7","z8"]},"application/x400-bp":{"source":"iana"},"application/xacml+xml":{"source":"iana","compressible":true},"application/xaml+xml":{"source":"apache","compressible":true,"extensions":["xaml"]},"application/xcap-att+xml":{"source":"iana","compressible":true,"extensions":["xav"]},"application/xcap-caps+xml":{"source":"iana","compressible":true,"extensions":["xca"]},"application/xcap-diff+xml":{"source":"iana","compressible":true,"extensions":["xdf"]},"application/xcap-el+xml":{"source":"iana","compressible":true,"extensions":["xel"]},"application/xcap-error+xml":{"source":"iana","compressible":true,"extensions":["xer"]},"application/xcap-ns+xml":{"source":"iana","compressible":true,"extensions":["xns"]},"application/xcon-conference-info+xml":{"source":"iana","compressible":true},"application/xcon-conference-info-diff+xml":{"source":"iana","compressible":true},"application/xenc+xml":{"source":"iana","compressible":true,"extensions":["xenc"]},"application/xhtml+xml":{"source":"iana","compressible":true,"extensions":["xhtml","xht"]},"application/xhtml-voice+xml":{"source":"apache","compressible":true},"application/xliff+xml":{"source":"iana","compressible":true,"extensions":["xlf"]},"application/xml":{"source":"iana","compressible":true,"extensions":["xml","xsl","xsd","rng"]},"application/xml-dtd":{"source":"iana","compressible":true,"extensions":["dtd"]},"application/xml-external-parsed-entity":{"source":"iana"},"application/xml-patch+xml":{"source":"iana","compressible":true},"application/xmpp+xml":{"source":"iana","compressible":true},"application/xop+xml":{"source":"iana","compressible":true,"extensions":["xop"]},"application/xproc+xml":{"source":"apache","compressible":true,"extensions":["xpl"]},"application/xslt+xml":{"source":"iana","compressible":true,"extensions":["xslt"]},"application/xspf+xml":{"source":"apache","compressible":true,"extensions":["xspf"]},"application/xv+xml":{"source":"iana","compressible":true,"extensions":["mxml","xhvml","xvml","xvm"]},"application/yang":{"source":"iana","extensions":["yang"]},"application/yang-data+json":{"source":"iana","compressible":true},"application/yang-data+xml":{"source":"iana","compressible":true},"application/yang-patch+json":{"source":"iana","compressible":true},"application/yang-patch+xml":{"source":"iana","compressible":true},"application/yin+xml":{"source":"iana","compressible":true,"extensions":["yin"]},"application/zip":{"source":"iana","compressible":false,"extensions":["zip"]},"application/zlib":{"source":"iana"},"application/zstd":{"source":"iana"},"audio/1d-interleaved-parityfec":{"source":"iana"},"audio/32kadpcm":{"source":"iana"},"audio/3gpp":{"source":"iana","compressible":false,"extensions":["3gpp"]},"audio/3gpp2":{"source":"iana"},"audio/aac":{"source":"iana"},"audio/ac3":{"source":"iana"},"audio/adpcm":{"source":"apache","extensions":["adp"]},"audio/amr":{"source":"iana"},"audio/amr-wb":{"source":"iana"},"audio/amr-wb+":{"source":"iana"},"audio/aptx":{"source":"iana"},"audio/asc":{"source":"iana"},"audio/atrac-advanced-lossless":{"source":"iana"},"audio/atrac-x":{"source":"iana"},"audio/atrac3":{"source":"iana"},"audio/basic":{"source":"iana","compressible":false,"extensions":["au","snd"]},"audio/bv16":{"source":"iana"},"audio/bv32":{"source":"iana"},"audio/clearmode":{"source":"iana"},"audio/cn":{"source":"iana"},"audio/dat12":{"source":"iana"},"audio/dls":{"source":"iana"},"audio/dsr-es201108":{"source":"iana"},"audio/dsr-es202050":{"source":"iana"},"audio/dsr-es202211":{"source":"iana"},"audio/dsr-es202212":{"source":"iana"},"audio/dv":{"source":"iana"},"audio/dvi4":{"source":"iana"},"audio/eac3":{"source":"iana"},"audio/encaprtp":{"source":"iana"},"audio/evrc":{"source":"iana"},"audio/evrc-qcp":{"source":"iana"},"audio/evrc0":{"source":"iana"},"audio/evrc1":{"source":"iana"},"audio/evrcb":{"source":"iana"},"audio/evrcb0":{"source":"iana"},"audio/evrcb1":{"source":"iana"},"audio/evrcnw":{"source":"iana"},"audio/evrcnw0":{"source":"iana"},"audio/evrcnw1":{"source":"iana"},"audio/evrcwb":{"source":"iana"},"audio/evrcwb0":{"source":"iana"},"audio/evrcwb1":{"source":"iana"},"audio/evs":{"source":"iana"},"audio/flexfec":{"source":"iana"},"audio/fwdred":{"source":"iana"},"audio/g711-0":{"source":"iana"},"audio/g719":{"source":"iana"},"audio/g722":{"source":"iana"},"audio/g7221":{"source":"iana"},"audio/g723":{"source":"iana"},"audio/g726-16":{"source":"iana"},"audio/g726-24":{"source":"iana"},"audio/g726-32":{"source":"iana"},"audio/g726-40":{"source":"iana"},"audio/g728":{"source":"iana"},"audio/g729":{"source":"iana"},"audio/g7291":{"source":"iana"},"audio/g729d":{"source":"iana"},"audio/g729e":{"source":"iana"},"audio/gsm":{"source":"iana"},"audio/gsm-efr":{"source":"iana"},"audio/gsm-hr-08":{"source":"iana"},"audio/ilbc":{"source":"iana"},"audio/ip-mr_v2.5":{"source":"iana"},"audio/isac":{"source":"apache"},"audio/l16":{"source":"iana"},"audio/l20":{"source":"iana"},"audio/l24":{"source":"iana","compressible":false},"audio/l8":{"source":"iana"},"audio/lpc":{"source":"iana"},"audio/melp":{"source":"iana"},"audio/melp1200":{"source":"iana"},"audio/melp2400":{"source":"iana"},"audio/melp600":{"source":"iana"},"audio/mhas":{"source":"iana"},"audio/midi":{"source":"apache","extensions":["mid","midi","kar","rmi"]},"audio/mobile-xmf":{"source":"iana","extensions":["mxmf"]},"audio/mp3":{"compressible":false,"extensions":["mp3"]},"audio/mp4":{"source":"iana","compressible":false,"extensions":["m4a","mp4a"]},"audio/mp4a-latm":{"source":"iana"},"audio/mpa":{"source":"iana"},"audio/mpa-robust":{"source":"iana"},"audio/mpeg":{"source":"iana","compressible":false,"extensions":["mpga","mp2","mp2a","mp3","m2a","m3a"]},"audio/mpeg4-generic":{"source":"iana"},"audio/musepack":{"source":"apache"},"audio/ogg":{"source":"iana","compressible":false,"extensions":["oga","ogg","spx"]},"audio/opus":{"source":"iana"},"audio/parityfec":{"source":"iana"},"audio/pcma":{"source":"iana"},"audio/pcma-wb":{"source":"iana"},"audio/pcmu":{"source":"iana"},"audio/pcmu-wb":{"source":"iana"},"audio/prs.sid":{"source":"iana"},"audio/qcelp":{"source":"iana"},"audio/raptorfec":{"source":"iana"},"audio/red":{"source":"iana"},"audio/rtp-enc-aescm128":{"source":"iana"},"audio/rtp-midi":{"source":"iana"},"audio/rtploopback":{"source":"iana"},"audio/rtx":{"source":"iana"},"audio/s3m":{"source":"apache","extensions":["s3m"]},"audio/silk":{"source":"apache","extensions":["sil"]},"audio/smv":{"source":"iana"},"audio/smv-qcp":{"source":"iana"},"audio/smv0":{"source":"iana"},"audio/sp-midi":{"source":"iana"},"audio/speex":{"source":"iana"},"audio/t140c":{"source":"iana"},"audio/t38":{"source":"iana"},"audio/telephone-event":{"source":"iana"},"audio/tetra_acelp":{"source":"iana"},"audio/tetra_acelp_bb":{"source":"iana"},"audio/tone":{"source":"iana"},"audio/uemclip":{"source":"iana"},"audio/ulpfec":{"source":"iana"},"audio/usac":{"source":"iana"},"audio/vdvi":{"source":"iana"},"audio/vmr-wb":{"source":"iana"},"audio/vnd.3gpp.iufp":{"source":"iana"},"audio/vnd.4sb":{"source":"iana"},"audio/vnd.audiokoz":{"source":"iana"},"audio/vnd.celp":{"source":"iana"},"audio/vnd.cisco.nse":{"source":"iana"},"audio/vnd.cmles.radio-events":{"source":"iana"},"audio/vnd.cns.anp1":{"source":"iana"},"audio/vnd.cns.inf1":{"source":"iana"},"audio/vnd.dece.audio":{"source":"iana","extensions":["uva","uvva"]},"audio/vnd.digital-winds":{"source":"iana","extensions":["eol"]},"audio/vnd.dlna.adts":{"source":"iana"},"audio/vnd.dolby.heaac.1":{"source":"iana"},"audio/vnd.dolby.heaac.2":{"source":"iana"},"audio/vnd.dolby.mlp":{"source":"iana"},"audio/vnd.dolby.mps":{"source":"iana"},"audio/vnd.dolby.pl2":{"source":"iana"},"audio/vnd.dolby.pl2x":{"source":"iana"},"audio/vnd.dolby.pl2z":{"source":"iana"},"audio/vnd.dolby.pulse.1":{"source":"iana"},"audio/vnd.dra":{"source":"iana","extensions":["dra"]},"audio/vnd.dts":{"source":"iana","extensions":["dts"]},"audio/vnd.dts.hd":{"source":"iana","extensions":["dtshd"]},"audio/vnd.dts.uhd":{"source":"iana"},"audio/vnd.dvb.file":{"source":"iana"},"audio/vnd.everad.plj":{"source":"iana"},"audio/vnd.hns.audio":{"source":"iana"},"audio/vnd.lucent.voice":{"source":"iana","extensions":["lvp"]},"audio/vnd.ms-playready.media.pya":{"source":"iana","extensions":["pya"]},"audio/vnd.nokia.mobile-xmf":{"source":"iana"},"audio/vnd.nortel.vbk":{"source":"iana"},"audio/vnd.nuera.ecelp4800":{"source":"iana","extensions":["ecelp4800"]},"audio/vnd.nuera.ecelp7470":{"source":"iana","extensions":["ecelp7470"]},"audio/vnd.nuera.ecelp9600":{"source":"iana","extensions":["ecelp9600"]},"audio/vnd.octel.sbc":{"source":"iana"},"audio/vnd.presonus.multitrack":{"source":"iana"},"audio/vnd.qcelp":{"source":"iana"},"audio/vnd.rhetorex.32kadpcm":{"source":"iana"},"audio/vnd.rip":{"source":"iana","extensions":["rip"]},"audio/vnd.rn-realaudio":{"compressible":false},"audio/vnd.sealedmedia.softseal.mpeg":{"source":"iana"},"audio/vnd.vmx.cvsd":{"source":"iana"},"audio/vnd.wave":{"compressible":false},"audio/vorbis":{"source":"iana","compressible":false},"audio/vorbis-config":{"source":"iana"},"audio/wav":{"compressible":false,"extensions":["wav"]},"audio/wave":{"compressible":false,"extensions":["wav"]},"audio/webm":{"source":"apache","compressible":false,"extensions":["weba"]},"audio/x-aac":{"source":"apache","compressible":false,"extensions":["aac"]},"audio/x-aiff":{"source":"apache","extensions":["aif","aiff","aifc"]},"audio/x-caf":{"source":"apache","compressible":false,"extensions":["caf"]},"audio/x-flac":{"source":"apache","extensions":["flac"]},"audio/x-m4a":{"source":"nginx","extensions":["m4a"]},"audio/x-matroska":{"source":"apache","extensions":["mka"]},"audio/x-mpegurl":{"source":"apache","extensions":["m3u"]},"audio/x-ms-wax":{"source":"apache","extensions":["wax"]},"audio/x-ms-wma":{"source":"apache","extensions":["wma"]},"audio/x-pn-realaudio":{"source":"apache","extensions":["ram","ra"]},"audio/x-pn-realaudio-plugin":{"source":"apache","extensions":["rmp"]},"audio/x-realaudio":{"source":"nginx","extensions":["ra"]},"audio/x-tta":{"source":"apache"},"audio/x-wav":{"source":"apache","extensions":["wav"]},"audio/xm":{"source":"apache","extensions":["xm"]},"chemical/x-cdx":{"source":"apache","extensions":["cdx"]},"chemical/x-cif":{"source":"apache","extensions":["cif"]},"chemical/x-cmdf":{"source":"apache","extensions":["cmdf"]},"chemical/x-cml":{"source":"apache","extensions":["cml"]},"chemical/x-csml":{"source":"apache","extensions":["csml"]},"chemical/x-pdb":{"source":"apache"},"chemical/x-xyz":{"source":"apache","extensions":["xyz"]},"font/collection":{"source":"iana","extensions":["ttc"]},"font/otf":{"source":"iana","compressible":true,"extensions":["otf"]},"font/sfnt":{"source":"iana"},"font/ttf":{"source":"iana","compressible":true,"extensions":["ttf"]},"font/woff":{"source":"iana","extensions":["woff"]},"font/woff2":{"source":"iana","extensions":["woff2"]},"image/aces":{"source":"iana","extensions":["exr"]},"image/apng":{"compressible":false,"extensions":["apng"]},"image/avci":{"source":"iana"},"image/avcs":{"source":"iana"},"image/bmp":{"source":"iana","compressible":true,"extensions":["bmp"]},"image/cgm":{"source":"iana","extensions":["cgm"]},"image/dicom-rle":{"source":"iana","extensions":["drle"]},"image/emf":{"source":"iana","extensions":["emf"]},"image/fits":{"source":"iana","extensions":["fits"]},"image/g3fax":{"source":"iana","extensions":["g3"]},"image/gif":{"source":"iana","compressible":false,"extensions":["gif"]},"image/heic":{"source":"iana","extensions":["heic"]},"image/heic-sequence":{"source":"iana","extensions":["heics"]},"image/heif":{"source":"iana","extensions":["heif"]},"image/heif-sequence":{"source":"iana","extensions":["heifs"]},"image/hej2k":{"source":"iana","extensions":["hej2"]},"image/hsj2":{"source":"iana","extensions":["hsj2"]},"image/ief":{"source":"iana","extensions":["ief"]},"image/jls":{"source":"iana","extensions":["jls"]},"image/jp2":{"source":"iana","compressible":false,"extensions":["jp2","jpg2"]},"image/jpeg":{"source":"iana","compressible":false,"extensions":["jpeg","jpg","jpe"]},"image/jph":{"source":"iana","extensions":["jph"]},"image/jphc":{"source":"iana","extensions":["jhc"]},"image/jpm":{"source":"iana","compressible":false,"extensions":["jpm"]},"image/jpx":{"source":"iana","compressible":false,"extensions":["jpx","jpf"]},"image/jxr":{"source":"iana","extensions":["jxr"]},"image/jxra":{"source":"iana","extensions":["jxra"]},"image/jxrs":{"source":"iana","extensions":["jxrs"]},"image/jxs":{"source":"iana","extensions":["jxs"]},"image/jxsc":{"source":"iana","extensions":["jxsc"]},"image/jxsi":{"source":"iana","extensions":["jxsi"]},"image/jxss":{"source":"iana","extensions":["jxss"]},"image/ktx":{"source":"iana","extensions":["ktx"]},"image/naplps":{"source":"iana"},"image/pjpeg":{"compressible":false},"image/png":{"source":"iana","compressible":false,"extensions":["png"]},"image/prs.btif":{"source":"iana","extensions":["btif"]},"image/prs.pti":{"source":"iana","extensions":["pti"]},"image/pwg-raster":{"source":"iana"},"image/sgi":{"source":"apache","extensions":["sgi"]},"image/svg+xml":{"source":"iana","compressible":true,"extensions":["svg","svgz"]},"image/t38":{"source":"iana","extensions":["t38"]},"image/tiff":{"source":"iana","compressible":false,"extensions":["tif","tiff"]},"image/tiff-fx":{"source":"iana","extensions":["tfx"]},"image/vnd.adobe.photoshop":{"source":"iana","compressible":true,"extensions":["psd"]},"image/vnd.airzip.accelerator.azv":{"source":"iana","extensions":["azv"]},"image/vnd.cns.inf2":{"source":"iana"},"image/vnd.dece.graphic":{"source":"iana","extensions":["uvi","uvvi","uvg","uvvg"]},"image/vnd.djvu":{"source":"iana","extensions":["djvu","djv"]},"image/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"image/vnd.dwg":{"source":"iana","extensions":["dwg"]},"image/vnd.dxf":{"source":"iana","extensions":["dxf"]},"image/vnd.fastbidsheet":{"source":"iana","extensions":["fbs"]},"image/vnd.fpx":{"source":"iana","extensions":["fpx"]},"image/vnd.fst":{"source":"iana","extensions":["fst"]},"image/vnd.fujixerox.edmics-mmr":{"source":"iana","extensions":["mmr"]},"image/vnd.fujixerox.edmics-rlc":{"source":"iana","extensions":["rlc"]},"image/vnd.globalgraphics.pgb":{"source":"iana"},"image/vnd.microsoft.icon":{"source":"iana","extensions":["ico"]},"image/vnd.mix":{"source":"iana"},"image/vnd.mozilla.apng":{"source":"iana"},"image/vnd.ms-dds":{"extensions":["dds"]},"image/vnd.ms-modi":{"source":"iana","extensions":["mdi"]},"image/vnd.ms-photo":{"source":"apache","extensions":["wdp"]},"image/vnd.net-fpx":{"source":"iana","extensions":["npx"]},"image/vnd.radiance":{"source":"iana"},"image/vnd.sealed.png":{"source":"iana"},"image/vnd.sealedmedia.softseal.gif":{"source":"iana"},"image/vnd.sealedmedia.softseal.jpg":{"source":"iana"},"image/vnd.svf":{"source":"iana"},"image/vnd.tencent.tap":{"source":"iana","extensions":["tap"]},"image/vnd.valve.source.texture":{"source":"iana","extensions":["vtf"]},"image/vnd.wap.wbmp":{"source":"iana","extensions":["wbmp"]},"image/vnd.xiff":{"source":"iana","extensions":["xif"]},"image/vnd.zbrush.pcx":{"source":"iana","extensions":["pcx"]},"image/webp":{"source":"apache","extensions":["webp"]},"image/wmf":{"source":"iana","extensions":["wmf"]},"image/x-3ds":{"source":"apache","extensions":["3ds"]},"image/x-cmu-raster":{"source":"apache","extensions":["ras"]},"image/x-cmx":{"source":"apache","extensions":["cmx"]},"image/x-freehand":{"source":"apache","extensions":["fh","fhc","fh4","fh5","fh7"]},"image/x-icon":{"source":"apache","compressible":true,"extensions":["ico"]},"image/x-jng":{"source":"nginx","extensions":["jng"]},"image/x-mrsid-image":{"source":"apache","extensions":["sid"]},"image/x-ms-bmp":{"source":"nginx","compressible":true,"extensions":["bmp"]},"image/x-pcx":{"source":"apache","extensions":["pcx"]},"image/x-pict":{"source":"apache","extensions":["pic","pct"]},"image/x-portable-anymap":{"source":"apache","extensions":["pnm"]},"image/x-portable-bitmap":{"source":"apache","extensions":["pbm"]},"image/x-portable-graymap":{"source":"apache","extensions":["pgm"]},"image/x-portable-pixmap":{"source":"apache","extensions":["ppm"]},"image/x-rgb":{"source":"apache","extensions":["rgb"]},"image/x-tga":{"source":"apache","extensions":["tga"]},"image/x-xbitmap":{"source":"apache","extensions":["xbm"]},"image/x-xcf":{"compressible":false},"image/x-xpixmap":{"source":"apache","extensions":["xpm"]},"image/x-xwindowdump":{"source":"apache","extensions":["xwd"]},"message/cpim":{"source":"iana"},"message/delivery-status":{"source":"iana"},"message/disposition-notification":{"source":"iana","extensions":["disposition-notification"]},"message/external-body":{"source":"iana"},"message/feedback-report":{"source":"iana"},"message/global":{"source":"iana","extensions":["u8msg"]},"message/global-delivery-status":{"source":"iana","extensions":["u8dsn"]},"message/global-disposition-notification":{"source":"iana","extensions":["u8mdn"]},"message/global-headers":{"source":"iana","extensions":["u8hdr"]},"message/http":{"source":"iana","compressible":false},"message/imdn+xml":{"source":"iana","compressible":true},"message/news":{"source":"iana"},"message/partial":{"source":"iana","compressible":false},"message/rfc822":{"source":"iana","compressible":true,"extensions":["eml","mime"]},"message/s-http":{"source":"iana"},"message/sip":{"source":"iana"},"message/sipfrag":{"source":"iana"},"message/tracking-status":{"source":"iana"},"message/vnd.si.simp":{"source":"iana"},"message/vnd.wfa.wsc":{"source":"iana","extensions":["wsc"]},"model/3mf":{"source":"iana","extensions":["3mf"]},"model/gltf+json":{"source":"iana","compressible":true,"extensions":["gltf"]},"model/gltf-binary":{"source":"iana","compressible":true,"extensions":["glb"]},"model/iges":{"source":"iana","compressible":false,"extensions":["igs","iges"]},"model/mesh":{"source":"iana","compressible":false,"extensions":["msh","mesh","silo"]},"model/mtl":{"source":"iana","extensions":["mtl"]},"model/obj":{"source":"iana","extensions":["obj"]},"model/stl":{"source":"iana","extensions":["stl"]},"model/vnd.collada+xml":{"source":"iana","compressible":true,"extensions":["dae"]},"model/vnd.dwf":{"source":"iana","extensions":["dwf"]},"model/vnd.flatland.3dml":{"source":"iana"},"model/vnd.gdl":{"source":"iana","extensions":["gdl"]},"model/vnd.gs-gdl":{"source":"apache"},"model/vnd.gs.gdl":{"source":"iana"},"model/vnd.gtw":{"source":"iana","extensions":["gtw"]},"model/vnd.moml+xml":{"source":"iana","compressible":true},"model/vnd.mts":{"source":"iana","extensions":["mts"]},"model/vnd.opengex":{"source":"iana","extensions":["ogex"]},"model/vnd.parasolid.transmit.binary":{"source":"iana","extensions":["x_b"]},"model/vnd.parasolid.transmit.text":{"source":"iana","extensions":["x_t"]},"model/vnd.rosette.annotated-data-model":{"source":"iana"},"model/vnd.usdz+zip":{"source":"iana","compressible":false,"extensions":["usdz"]},"model/vnd.valve.source.compiled-map":{"source":"iana","extensions":["bsp"]},"model/vnd.vtu":{"source":"iana","extensions":["vtu"]},"model/vrml":{"source":"iana","compressible":false,"extensions":["wrl","vrml"]},"model/x3d+binary":{"source":"apache","compressible":false,"extensions":["x3db","x3dbz"]},"model/x3d+fastinfoset":{"source":"iana","extensions":["x3db"]},"model/x3d+vrml":{"source":"apache","compressible":false,"extensions":["x3dv","x3dvz"]},"model/x3d+xml":{"source":"iana","compressible":true,"extensions":["x3d","x3dz"]},"model/x3d-vrml":{"source":"iana","extensions":["x3dv"]},"multipart/alternative":{"source":"iana","compressible":false},"multipart/appledouble":{"source":"iana"},"multipart/byteranges":{"source":"iana"},"multipart/digest":{"source":"iana"},"multipart/encrypted":{"source":"iana","compressible":false},"multipart/form-data":{"source":"iana","compressible":false},"multipart/header-set":{"source":"iana"},"multipart/mixed":{"source":"iana"},"multipart/multilingual":{"source":"iana"},"multipart/parallel":{"source":"iana"},"multipart/related":{"source":"iana","compressible":false},"multipart/report":{"source":"iana"},"multipart/signed":{"source":"iana","compressible":false},"multipart/vnd.bint.med-plus":{"source":"iana"},"multipart/voice-message":{"source":"iana"},"multipart/x-mixed-replace":{"source":"iana"},"text/1d-interleaved-parityfec":{"source":"iana"},"text/cache-manifest":{"source":"iana","compressible":true,"extensions":["appcache","manifest"]},"text/calendar":{"source":"iana","extensions":["ics","ifb"]},"text/calender":{"compressible":true},"text/cmd":{"compressible":true},"text/coffeescript":{"extensions":["coffee","litcoffee"]},"text/css":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["css"]},"text/csv":{"source":"iana","compressible":true,"extensions":["csv"]},"text/csv-schema":{"source":"iana"},"text/directory":{"source":"iana"},"text/dns":{"source":"iana"},"text/ecmascript":{"source":"iana"},"text/encaprtp":{"source":"iana"},"text/enriched":{"source":"iana"},"text/flexfec":{"source":"iana"},"text/fwdred":{"source":"iana"},"text/grammar-ref-list":{"source":"iana"},"text/html":{"source":"iana","compressible":true,"extensions":["html","htm","shtml"]},"text/jade":{"extensions":["jade"]},"text/javascript":{"source":"iana","compressible":true},"text/jcr-cnd":{"source":"iana"},"text/jsx":{"compressible":true,"extensions":["jsx"]},"text/less":{"compressible":true,"extensions":["less"]},"text/markdown":{"source":"iana","compressible":true,"extensions":["markdown","md"]},"text/mathml":{"source":"nginx","extensions":["mml"]},"text/mdx":{"compressible":true,"extensions":["mdx"]},"text/mizar":{"source":"iana"},"text/n3":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["n3"]},"text/parameters":{"source":"iana","charset":"UTF-8"},"text/parityfec":{"source":"iana"},"text/plain":{"source":"iana","compressible":true,"extensions":["txt","text","conf","def","list","log","in","ini"]},"text/provenance-notation":{"source":"iana","charset":"UTF-8"},"text/prs.fallenstein.rst":{"source":"iana"},"text/prs.lines.tag":{"source":"iana","extensions":["dsc"]},"text/prs.prop.logic":{"source":"iana"},"text/raptorfec":{"source":"iana"},"text/red":{"source":"iana"},"text/rfc822-headers":{"source":"iana"},"text/richtext":{"source":"iana","compressible":true,"extensions":["rtx"]},"text/rtf":{"source":"iana","compressible":true,"extensions":["rtf"]},"text/rtp-enc-aescm128":{"source":"iana"},"text/rtploopback":{"source":"iana"},"text/rtx":{"source":"iana"},"text/sgml":{"source":"iana","extensions":["sgml","sgm"]},"text/shex":{"extensions":["shex"]},"text/slim":{"extensions":["slim","slm"]},"text/strings":{"source":"iana"},"text/stylus":{"extensions":["stylus","styl"]},"text/t140":{"source":"iana"},"text/tab-separated-values":{"source":"iana","compressible":true,"extensions":["tsv"]},"text/troff":{"source":"iana","extensions":["t","tr","roff","man","me","ms"]},"text/turtle":{"source":"iana","charset":"UTF-8","extensions":["ttl"]},"text/ulpfec":{"source":"iana"},"text/uri-list":{"source":"iana","compressible":true,"extensions":["uri","uris","urls"]},"text/vcard":{"source":"iana","compressible":true,"extensions":["vcard"]},"text/vnd.a":{"source":"iana"},"text/vnd.abc":{"source":"iana"},"text/vnd.ascii-art":{"source":"iana"},"text/vnd.curl":{"source":"iana","extensions":["curl"]},"text/vnd.curl.dcurl":{"source":"apache","extensions":["dcurl"]},"text/vnd.curl.mcurl":{"source":"apache","extensions":["mcurl"]},"text/vnd.curl.scurl":{"source":"apache","extensions":["scurl"]},"text/vnd.debian.copyright":{"source":"iana","charset":"UTF-8"},"text/vnd.dmclientscript":{"source":"iana"},"text/vnd.dvb.subtitle":{"source":"iana","extensions":["sub"]},"text/vnd.esmertec.theme-descriptor":{"source":"iana","charset":"UTF-8"},"text/vnd.ficlab.flt":{"source":"iana"},"text/vnd.fly":{"source":"iana","extensions":["fly"]},"text/vnd.fmi.flexstor":{"source":"iana","extensions":["flx"]},"text/vnd.gml":{"source":"iana"},"text/vnd.graphviz":{"source":"iana","extensions":["gv"]},"text/vnd.hgl":{"source":"iana"},"text/vnd.in3d.3dml":{"source":"iana","extensions":["3dml"]},"text/vnd.in3d.spot":{"source":"iana","extensions":["spot"]},"text/vnd.iptc.newsml":{"source":"iana"},"text/vnd.iptc.nitf":{"source":"iana"},"text/vnd.latex-z":{"source":"iana"},"text/vnd.motorola.reflex":{"source":"iana"},"text/vnd.ms-mediapackage":{"source":"iana"},"text/vnd.net2phone.commcenter.command":{"source":"iana"},"text/vnd.radisys.msml-basic-layout":{"source":"iana"},"text/vnd.senx.warpscript":{"source":"iana"},"text/vnd.si.uricatalogue":{"source":"iana"},"text/vnd.sosi":{"source":"iana"},"text/vnd.sun.j2me.app-descriptor":{"source":"iana","charset":"UTF-8","extensions":["jad"]},"text/vnd.trolltech.linguist":{"source":"iana","charset":"UTF-8"},"text/vnd.wap.si":{"source":"iana"},"text/vnd.wap.sl":{"source":"iana"},"text/vnd.wap.wml":{"source":"iana","extensions":["wml"]},"text/vnd.wap.wmlscript":{"source":"iana","extensions":["wmls"]},"text/vtt":{"source":"iana","charset":"UTF-8","compressible":true,"extensions":["vtt"]},"text/x-asm":{"source":"apache","extensions":["s","asm"]},"text/x-c":{"source":"apache","extensions":["c","cc","cxx","cpp","h","hh","dic"]},"text/x-component":{"source":"nginx","extensions":["htc"]},"text/x-fortran":{"source":"apache","extensions":["f","for","f77","f90"]},"text/x-gwt-rpc":{"compressible":true},"text/x-handlebars-template":{"extensions":["hbs"]},"text/x-java-source":{"source":"apache","extensions":["java"]},"text/x-jquery-tmpl":{"compressible":true},"text/x-lua":{"extensions":["lua"]},"text/x-markdown":{"compressible":true,"extensions":["mkd"]},"text/x-nfo":{"source":"apache","extensions":["nfo"]},"text/x-opml":{"source":"apache","extensions":["opml"]},"text/x-org":{"compressible":true,"extensions":["org"]},"text/x-pascal":{"source":"apache","extensions":["p","pas"]},"text/x-processing":{"compressible":true,"extensions":["pde"]},"text/x-sass":{"extensions":["sass"]},"text/x-scss":{"extensions":["scss"]},"text/x-setext":{"source":"apache","extensions":["etx"]},"text/x-sfv":{"source":"apache","extensions":["sfv"]},"text/x-suse-ymp":{"compressible":true,"extensions":["ymp"]},"text/x-uuencode":{"source":"apache","extensions":["uu"]},"text/x-vcalendar":{"source":"apache","extensions":["vcs"]},"text/x-vcard":{"source":"apache","extensions":["vcf"]},"text/xml":{"source":"iana","compressible":true,"extensions":["xml"]},"text/xml-external-parsed-entity":{"source":"iana"},"text/yaml":{"extensions":["yaml","yml"]},"video/1d-interleaved-parityfec":{"source":"iana"},"video/3gpp":{"source":"iana","extensions":["3gp","3gpp"]},"video/3gpp-tt":{"source":"iana"},"video/3gpp2":{"source":"iana","extensions":["3g2"]},"video/bmpeg":{"source":"iana"},"video/bt656":{"source":"iana"},"video/celb":{"source":"iana"},"video/dv":{"source":"iana"},"video/encaprtp":{"source":"iana"},"video/flexfec":{"source":"iana"},"video/h261":{"source":"iana","extensions":["h261"]},"video/h263":{"source":"iana","extensions":["h263"]},"video/h263-1998":{"source":"iana"},"video/h263-2000":{"source":"iana"},"video/h264":{"source":"iana","extensions":["h264"]},"video/h264-rcdo":{"source":"iana"},"video/h264-svc":{"source":"iana"},"video/h265":{"source":"iana"},"video/iso.segment":{"source":"iana"},"video/jpeg":{"source":"iana","extensions":["jpgv"]},"video/jpeg2000":{"source":"iana"},"video/jpm":{"source":"apache","extensions":["jpm","jpgm"]},"video/mj2":{"source":"iana","extensions":["mj2","mjp2"]},"video/mp1s":{"source":"iana"},"video/mp2p":{"source":"iana"},"video/mp2t":{"source":"iana","extensions":["ts"]},"video/mp4":{"source":"iana","compressible":false,"extensions":["mp4","mp4v","mpg4"]},"video/mp4v-es":{"source":"iana"},"video/mpeg":{"source":"iana","compressible":false,"extensions":["mpeg","mpg","mpe","m1v","m2v"]},"video/mpeg4-generic":{"source":"iana"},"video/mpv":{"source":"iana"},"video/nv":{"source":"iana"},"video/ogg":{"source":"iana","compressible":false,"extensions":["ogv"]},"video/parityfec":{"source":"iana"},"video/pointer":{"source":"iana"},"video/quicktime":{"source":"iana","compressible":false,"extensions":["qt","mov"]},"video/raptorfec":{"source":"iana"},"video/raw":{"source":"iana"},"video/rtp-enc-aescm128":{"source":"iana"},"video/rtploopback":{"source":"iana"},"video/rtx":{"source":"iana"},"video/smpte291":{"source":"iana"},"video/smpte292m":{"source":"iana"},"video/ulpfec":{"source":"iana"},"video/vc1":{"source":"iana"},"video/vc2":{"source":"iana"},"video/vnd.cctv":{"source":"iana"},"video/vnd.dece.hd":{"source":"iana","extensions":["uvh","uvvh"]},"video/vnd.dece.mobile":{"source":"iana","extensions":["uvm","uvvm"]},"video/vnd.dece.mp4":{"source":"iana"},"video/vnd.dece.pd":{"source":"iana","extensions":["uvp","uvvp"]},"video/vnd.dece.sd":{"source":"iana","extensions":["uvs","uvvs"]},"video/vnd.dece.video":{"source":"iana","extensions":["uvv","uvvv"]},"video/vnd.directv.mpeg":{"source":"iana"},"video/vnd.directv.mpeg-tts":{"source":"iana"},"video/vnd.dlna.mpeg-tts":{"source":"iana"},"video/vnd.dvb.file":{"source":"iana","extensions":["dvb"]},"video/vnd.fvt":{"source":"iana","extensions":["fvt"]},"video/vnd.hns.video":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.1dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-1010":{"source":"iana"},"video/vnd.iptvforum.2dparityfec-2005":{"source":"iana"},"video/vnd.iptvforum.ttsavc":{"source":"iana"},"video/vnd.iptvforum.ttsmpeg2":{"source":"iana"},"video/vnd.motorola.video":{"source":"iana"},"video/vnd.motorola.videop":{"source":"iana"},"video/vnd.mpegurl":{"source":"iana","extensions":["mxu","m4u"]},"video/vnd.ms-playready.media.pyv":{"source":"iana","extensions":["pyv"]},"video/vnd.nokia.interleaved-multimedia":{"source":"iana"},"video/vnd.nokia.mp4vr":{"source":"iana"},"video/vnd.nokia.videovoip":{"source":"iana"},"video/vnd.objectvideo":{"source":"iana"},"video/vnd.radgamettools.bink":{"source":"iana"},"video/vnd.radgamettools.smacker":{"source":"iana"},"video/vnd.sealed.mpeg1":{"source":"iana"},"video/vnd.sealed.mpeg4":{"source":"iana"},"video/vnd.sealed.swf":{"source":"iana"},"video/vnd.sealedmedia.softseal.mov":{"source":"iana"},"video/vnd.uvvu.mp4":{"source":"iana","extensions":["uvu","uvvu"]},"video/vnd.vivo":{"source":"iana","extensions":["viv"]},"video/vnd.youtube.yt":{"source":"iana"},"video/vp8":{"source":"iana"},"video/webm":{"source":"apache","compressible":false,"extensions":["webm"]},"video/x-f4v":{"source":"apache","extensions":["f4v"]},"video/x-fli":{"source":"apache","extensions":["fli"]},"video/x-flv":{"source":"apache","compressible":false,"extensions":["flv"]},"video/x-m4v":{"source":"apache","extensions":["m4v"]},"video/x-matroska":{"source":"apache","compressible":false,"extensions":["mkv","mk3d","mks"]},"video/x-mng":{"source":"apache","extensions":["mng"]},"video/x-ms-asf":{"source":"apache","extensions":["asf","asx"]},"video/x-ms-vob":{"source":"apache","extensions":["vob"]},"video/x-ms-wm":{"source":"apache","extensions":["wm"]},"video/x-ms-wmv":{"source":"apache","compressible":false,"extensions":["wmv"]},"video/x-ms-wmx":{"source":"apache","extensions":["wmx"]},"video/x-ms-wvx":{"source":"apache","extensions":["wvx"]},"video/x-msvideo":{"source":"apache","extensions":["avi"]},"video/x-sgi-movie":{"source":"apache","extensions":["movie"]},"video/x-smv":{"source":"apache","extensions":["smv"]},"x-conference/x-cooltalk":{"source":"apache","extensions":["ice"]},"x-shader/x-fragment":{"compressible":true},"x-shader/x-vertex":{"compressible":true}}')},function(e,n,t){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=t(29),i="function"==typeof Symbol&&Symbol.for,a=i?Symbol.for("react.element"):60103,o=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,c=i?Symbol.for("react.strict_mode"):60108,u=i?Symbol.for("react.profiler"):60114,l=i?Symbol.for("react.provider"):60109,p=i?Symbol.for("react.context"):60110,f=i?Symbol.for("react.forward_ref"):60112,d=i?Symbol.for("react.suspense"):60113,m=i?Symbol.for("react.memo"):60115,h=i?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var x={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function y(e,n,t){this.props=e,this.context=n,this.refs=b,this.updater=t||x}function w(){}function k(e,n,t){this.props=e,this.context=n,this.refs=b,this.updater=t||x}y.prototype.isReactComponent={},y.prototype.setState=function(e,n){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,n,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=y.prototype;var _=k.prototype=new w;_.constructor=k,r(_,y.prototype),_.isPureReactComponent=!0;var S={current:null},E=Object.prototype.hasOwnProperty,A={key:!0,ref:!0,__self:!0,__source:!0};function $(e,n,t){var r,i={},o=null,s=null;if(null!=n)for(r in void 0!==n.ref&&(s=n.ref),void 0!==n.key&&(o=""+n.key),n)E.call(n,r)&&!A.hasOwnProperty(r)&&(i[r]=n[r]);var c=arguments.length-2;if(1===c)i.children=t;else if(1<c){for(var u=Array(c),l=0;l<c;l++)u[l]=arguments[l+2];i.children=u}if(e&&e.defaultProps)for(r in c=e.defaultProps)void 0===i[r]&&(i[r]=c[r]);return{$$typeof:a,type:e,key:o,ref:s,props:i,_owner:S.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var O=/\/+/g,M=[];function j(e,n,t,r){if(M.length){var i=M.pop();return i.result=e,i.keyPrefix=n,i.func=t,i.context=r,i.count=0,i}return{result:e,keyPrefix:n,func:t,context:r,count:0}}function F(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>M.length&&M.push(e)}function R(e,n,t){return null==e?0:function e(n,t,r,i){var s=typeof n;"undefined"!==s&&"boolean"!==s||(n=null);var c=!1;if(null===n)c=!0;else switch(s){case"string":case"number":c=!0;break;case"object":switch(n.$$typeof){case a:case o:c=!0}}if(c)return r(i,n,""===t?"."+T(n,0):t),1;if(c=0,t=""===t?".":t+":",Array.isArray(n))for(var u=0;u<n.length;u++){var l=t+T(s=n[u],u);c+=e(s,l,r,i)}else if(null===n||"object"!=typeof n?l=null:l="function"==typeof(l=g&&n[g]||n["@@iterator"])?l:null,"function"==typeof l)for(n=l.call(n),u=0;!(s=n.next()).done;)c+=e(s=s.value,l=t+T(s,u++),r,i);else if("object"===s)throw r=""+n,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(n).join(", ")+"}":r,""));return c}(e,"",n,t)}function T(e,n){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var n={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return n[e]}))}(e.key):n.toString(36)}function q(e,n){e.func.call(e.context,n,e.count++)}function L(e,n,t){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,n,e.count++),Array.isArray(e)?N(e,r,t,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,n){return{$$typeof:a,type:e.type,key:n,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||n&&n.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+t)),r.push(e))}function N(e,n,t,r,i){var a="";null!=t&&(a=(""+t).replace(O,"$&/")+"/"),R(e,L,n=j(n,a,r,i)),F(n)}var P={current:null};function D(){var e=P.current;if(null===e)throw Error(v(321));return e}var I={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};n.Children={map:function(e,n,t){if(null==e)return e;var r=[];return N(e,r,null,n,t),r},forEach:function(e,n,t){if(null==e)return e;R(e,q,n=j(null,null,n,t)),F(n)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var n=[];return N(e,n,null,(function(e){return e})),n},only:function(e){if(!C(e))throw Error(v(143));return e}},n.Component=y,n.Fragment=s,n.Profiler=u,n.PureComponent=k,n.StrictMode=c,n.Suspense=d,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,n.cloneElement=function(e,n,t){if(null==e)throw Error(v(267,e));var i=r({},e.props),o=e.key,s=e.ref,c=e._owner;if(null!=n){if(void 0!==n.ref&&(s=n.ref,c=S.current),void 0!==n.key&&(o=""+n.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in n)E.call(n,l)&&!A.hasOwnProperty(l)&&(i[l]=void 0===n[l]&&void 0!==u?u[l]:n[l])}var l=arguments.length-2;if(1===l)i.children=t;else if(1<l){u=Array(l);for(var p=0;p<l;p++)u[p]=arguments[p+2];i.children=u}return{$$typeof:a,type:e.type,key:o,ref:s,props:i,_owner:c}},n.createContext=function(e,n){return void 0===n&&(n=null),(e={$$typeof:p,_calculateChangedBits:n,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},n.createElement=$,n.createFactory=function(e){var n=$.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:f,render:e}},n.isValidElement=C,n.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},n.memo=function(e,n){return{$$typeof:m,type:e,compare:void 0===n?null:n}},n.useCallback=function(e,n){return D().useCallback(e,n)},n.useContext=function(e,n){return D().useContext(e,n)},n.useDebugValue=function(){},n.useEffect=function(e,n){return D().useEffect(e,n)},n.useImperativeHandle=function(e,n,t){return D().useImperativeHandle(e,n,t)},n.useLayoutEffect=function(e,n){return D().useLayoutEffect(e,n)},n.useMemo=function(e,n){return D().useMemo(e,n)},n.useReducer=function(e,n,t){return D().useReducer(e,n,t)},n.useRef=function(e){return D().useRef(e)},n.useState=function(e){return D().useState(e)},n.version="16.13.1"},function(e,n,t){"use strict";e.exports=t(102)},function(e,n,t){"use strict";var r=t(103),i=t(111)(r,"div");i.displayName="html",e.exports=i},function(e,n,t){"use strict";var r=t(104),i=t(105),a=t(106),o=t(107),s=t(109),c=t(110);e.exports=r([a,i,o,s,c])},function(e,n,t){"use strict";var r=t(6),i=t(45);e.exports=function(e){var n,t,a=e.length,o=[],s=[],c=-1;for(;++c<a;)n=e[c],o.push(n.property),s.push(n.normal),t=n.space;return new i(r.apply(null,o),r.apply(null,s),t)}},function(e,n,t){"use strict";var r=t(15);e.exports=r({space:"xlink",transform:function(e,n){return"xlink:"+n.slice(5).toLowerCase()},properties:{xLinkActuate:null,xLinkArcRole:null,xLinkHref:null,xLinkRole:null,xLinkShow:null,xLinkTitle:null,xLinkType:null}})},function(e,n,t){"use strict";var r=t(15);e.exports=r({space:"xml",transform:function(e,n){return"xml:"+n.slice(3).toLowerCase()},properties:{xmlLang:null,xmlBase:null,xmlSpace:null}})},function(e,n,t){"use strict";var r=t(15),i=t(48);e.exports=r({space:"xmlns",attributes:{xmlnsxlink:"xmlns:xlink"},transform:i,properties:{xmlns:null,xmlnsXLink:null}})},function(e,n,t){"use strict";e.exports=function(e,n){return n in e?e[n]:n}},function(e,n,t){"use strict";var r=t(31),i=t(15),a=r.booleanish,o=r.number,s=r.spaceSeparated;e.exports=i({transform:function(e,n){return"role"===n?n:"aria-"+n.slice(4).toLowerCase()},properties:{ariaActiveDescendant:null,ariaAtomic:a,ariaAutoComplete:null,ariaBusy:a,ariaChecked:a,ariaColCount:o,ariaColIndex:o,ariaColSpan:o,ariaControls:s,ariaCurrent:null,ariaDescribedBy:s,ariaDetails:null,ariaDisabled:a,ariaDropEffect:s,ariaErrorMessage:null,ariaExpanded:a,ariaFlowTo:s,ariaGrabbed:a,ariaHasPopup:null,ariaHidden:a,ariaInvalid:null,ariaKeyShortcuts:null,ariaLabel:null,ariaLabelledBy:s,ariaLevel:o,ariaLive:null,ariaModal:a,ariaMultiLine:a,ariaMultiSelectable:a,ariaOrientation:null,ariaOwns:s,ariaPlaceholder:null,ariaPosInSet:o,ariaPressed:a,ariaReadOnly:a,ariaRelevant:null,ariaRequired:a,ariaRoleDescription:s,ariaRowCount:o,ariaRowIndex:o,ariaRowSpan:o,ariaSelected:a,ariaSetSize:o,ariaSort:null,ariaValueMax:o,ariaValueMin:o,ariaValueNow:o,ariaValueText:null,role:null}})},function(e,n,t){"use strict";var r=t(31),i=t(15),a=t(48),o=r.boolean,s=r.overloadedBoolean,c=r.booleanish,u=r.number,l=r.spaceSeparated,p=r.commaSeparated;e.exports=i({space:"html",attributes:{acceptcharset:"accept-charset",classname:"class",htmlfor:"for",httpequiv:"http-equiv"},transform:a,mustUseProperty:["checked","multiple","muted","selected"],properties:{abbr:null,accept:p,acceptCharset:l,accessKey:l,action:null,allow:null,allowFullScreen:o,allowPaymentRequest:o,allowUserMedia:o,alt:null,as:null,async:o,autoCapitalize:null,autoComplete:l,autoFocus:o,autoPlay:o,capture:o,charSet:null,checked:o,cite:null,className:l,cols:u,colSpan:null,content:null,contentEditable:c,controls:o,controlsList:l,coords:u|p,crossOrigin:null,data:null,dateTime:null,decoding:null,default:o,defer:o,dir:null,dirName:null,disabled:o,download:s,draggable:c,encType:null,enterKeyHint:null,form:null,formAction:null,formEncType:null,formMethod:null,formNoValidate:o,formTarget:null,headers:l,height:u,hidden:o,high:u,href:null,hrefLang:null,htmlFor:l,httpEquiv:l,id:null,imageSizes:null,imageSrcSet:p,inputMode:null,integrity:null,is:null,isMap:o,itemId:null,itemProp:l,itemRef:l,itemScope:o,itemType:l,kind:null,label:null,lang:null,language:null,list:null,loop:o,low:u,manifest:null,max:null,maxLength:u,media:null,method:null,min:null,minLength:u,multiple:o,muted:o,name:null,nonce:null,noModule:o,noValidate:o,onAbort:null,onAfterPrint:null,onAuxClick:null,onBeforePrint:null,onBeforeUnload:null,onBlur:null,onCancel:null,onCanPlay:null,onCanPlayThrough:null,onChange:null,onClick:null,onClose:null,onContextMenu:null,onCopy:null,onCueChange:null,onCut:null,onDblClick:null,onDrag:null,onDragEnd:null,onDragEnter:null,onDragExit:null,onDragLeave:null,onDragOver:null,onDragStart:null,onDrop:null,onDurationChange:null,onEmptied:null,onEnded:null,onError:null,onFocus:null,onFormData:null,onHashChange:null,onInput:null,onInvalid:null,onKeyDown:null,onKeyPress:null,onKeyUp:null,onLanguageChange:null,onLoad:null,onLoadedData:null,onLoadedMetadata:null,onLoadEnd:null,onLoadStart:null,onMessage:null,onMessageError:null,onMouseDown:null,onMouseEnter:null,onMouseLeave:null,onMouseMove:null,onMouseOut:null,onMouseOver:null,onMouseUp:null,onOffline:null,onOnline:null,onPageHide:null,onPageShow:null,onPaste:null,onPause:null,onPlay:null,onPlaying:null,onPopState:null,onProgress:null,onRateChange:null,onRejectionHandled:null,onReset:null,onResize:null,onScroll:null,onSecurityPolicyViolation:null,onSeeked:null,onSeeking:null,onSelect:null,onSlotChange:null,onStalled:null,onStorage:null,onSubmit:null,onSuspend:null,onTimeUpdate:null,onToggle:null,onUnhandledRejection:null,onUnload:null,onVolumeChange:null,onWaiting:null,onWheel:null,open:o,optimum:u,pattern:null,ping:l,placeholder:null,playsInline:o,poster:null,preload:null,readOnly:o,referrerPolicy:null,rel:l,required:o,reversed:o,rows:u,rowSpan:u,sandbox:l,scope:null,scoped:o,seamless:o,selected:o,shape:null,size:u,sizes:null,slot:null,span:u,spellCheck:c,src:null,srcDoc:null,srcLang:null,srcSet:p,start:u,step:null,style:null,tabIndex:u,target:null,title:null,translate:null,type:null,typeMustMatch:o,useMap:null,value:c,width:u,wrap:null,align:null,aLink:null,archive:l,axis:null,background:null,bgColor:null,border:u,borderColor:null,bottomMargin:u,cellPadding:null,cellSpacing:null,char:null,charOff:null,classId:null,clear:null,code:null,codeBase:null,codeType:null,color:null,compact:o,declare:o,event:null,face:null,frame:null,frameBorder:null,hSpace:u,leftMargin:u,link:null,longDesc:null,lowSrc:null,marginHeight:u,marginWidth:u,noResize:o,noHref:o,noShade:o,noWrap:o,object:null,profile:null,prompt:null,rev:null,rightMargin:u,rules:null,scheme:null,scrolling:c,standby:null,summary:null,text:null,topMargin:u,valueType:null,version:null,vAlign:null,vLink:null,vSpace:u,allowTransparency:null,autoCorrect:null,autoSave:null,disablePictureInPicture:o,disableRemotePlayback:o,prefix:null,property:null,results:u,security:null,unselectable:null}})},function(e,n,t){"use strict";var r=t(112),i=t(30),a=t(113),o=t(114).parse,s=t(115).parse;e.exports=function(e,n,t){var i=t?function(e){var n,t=e.length,r=-1,i={};for(;++r<t;)n=e[r],i[n.toLowerCase()]=n;return i}(t):null;return function(e,t){var r,o=a(e,n),s=Array.prototype.slice.call(arguments,2),p=o.tagName.toLowerCase();o.tagName=i&&c.call(i,p)?i[p]:p,t&&u(t,o)&&(s.unshift(t),t=null);if(t)for(r in t)f(o.properties,r,t[r]);l(o.children,s),"template"===o.tagName&&(o.content={type:"root",children:o.children},o.children=[]);return o};function f(n,t,i){var a,c,u;null!=i&&i==i&&(c=(a=r(e,t)).property,"string"==typeof(u=i)&&(a.spaceSeparated?u=o(u):a.commaSeparated?u=s(u):a.commaOrSpaceSeparated&&(u=o(s(u).join(" ")))),"style"===c&&"string"!=typeof i&&(u=function(e){var n,t=[];for(n in e)t.push([n,e[n]].join(": "));return t.join("; ")}(u)),"className"===c&&n.className&&(u=n.className.concat(u)),n[c]=function(e,n,t){var r,i,a;if("object"!=typeof t||!("length"in t))return p(e,n,t);i=t.length,r=-1,a=[];for(;++r<i;)a[r]=p(e,n,t[r]);return a}(a,c,u))}};var c={}.hasOwnProperty;function u(e,n){return"string"==typeof e||"length"in e||function(e,n){var t=n.type;if("input"===e||!t||"string"!=typeof t)return!1;if("object"==typeof n.children&&"length"in n.children)return!0;if(t=t.toLowerCase(),"button"===e)return"menu"!==t&&"submit"!==t&&"reset"!==t&&"button"!==t;return"value"in n}(n.tagName,e)}function l(e,n){var t,r;if("string"!=typeof n&&"number"!=typeof n)if("object"==typeof n&&"length"in n)for(t=-1,r=n.length;++t<r;)l(e,n[t]);else{if("object"!=typeof n||!("type"in n))throw new Error("Expected node, nodes, or string, got `"+n+"`");e.push(n)}else e.push({type:"text",value:String(n)})}function p(e,n,t){var r=t;return e.number||e.positiveNumber?isNaN(r)||""===r||(r=Number(r)):(e.boolean||e.overloadedBoolean)&&("string"!=typeof r||""!==r&&i(t)!==i(n)||(r=!0)),r}},function(e,n,t){"use strict";var r=t(30),i=t(46),a=t(47);e.exports=function(e,n){var t=r(n),p=n,f=a;if(t in e.normal)return e.property[e.normal[t]];t.length>4&&"data"===t.slice(0,4)&&o.test(n)&&("-"===n.charAt(4)?p=function(e){var n=e.slice(5).replace(s,l);return"data"+n.charAt(0).toUpperCase()+n.slice(1)}(n):n=function(e){var n=e.slice(4);if(s.test(n))return e;"-"!==(n=n.replace(c,u)).charAt(0)&&(n="-"+n);return"data"+n}(n),f=i);return new f(p,n)};var o=/^data[-\w.:]+$/i,s=/-[a-z]/g,c=/[A-Z]/g;function u(e){return"-"+e.toLowerCase()}function l(e){return e.charAt(1).toUpperCase()}},function(e,n,t){"use strict";e.exports=function(e,n){var t,r,i,a,o,s=e||"",c=n||"div",u={},l=-1,p=s.length;for(;++l<=p;)(i=s.charCodeAt(l))&&46!==i&&35!==i||((a=s.slice(o,l))&&(46===r?t?t.push(a):(t=[a],u.className=t):35===r?u.id=a:c=a),o=l+1,r=i);return{type:"element",tagName:c,properties:u,children:[]}}},function(e,n,t){"use strict";n.parse=function(e){var n=String(e||"").trim();return""===n?[]:n.split(r)},n.stringify=function(e){return e.join(" ").trim()};var r=/[ \t\n\r\f]+/g},function(e,n,t){"use strict";n.parse=function(e){var n,t=[],r=String(e||""),i=r.indexOf(","),a=0,o=!1;for(;!o;)-1===i&&(i=r.length,o=!0),!(n=r.slice(a,i).trim())&&o||t.push(n),a=i+1,i=r.indexOf(",",a);return t},n.stringify=function(e,n){var t=n||{},r=!1===t.padLeft?"":" ",i=t.padRight?" ":"";""===e[e.length-1]&&(e=e.concat(""));return e.join(i+","+r).trim()}},function(e){e.exports=JSON.parse('{"AElig":"Æ","AMP":"&","Aacute":"Á","Acirc":"Â","Agrave":"À","Aring":"Å","Atilde":"Ã","Auml":"Ä","COPY":"©","Ccedil":"Ç","ETH":"Ð","Eacute":"É","Ecirc":"Ê","Egrave":"È","Euml":"Ë","GT":">","Iacute":"Í","Icirc":"Î","Igrave":"Ì","Iuml":"Ï","LT":"<","Ntilde":"Ñ","Oacute":"Ó","Ocirc":"Ô","Ograve":"Ò","Oslash":"Ø","Otilde":"Õ","Ouml":"Ö","QUOT":"\\"","REG":"®","THORN":"Þ","Uacute":"Ú","Ucirc":"Û","Ugrave":"Ù","Uuml":"Ü","Yacute":"Ý","aacute":"á","acirc":"â","acute":"´","aelig":"æ","agrave":"à","amp":"&","aring":"å","atilde":"ã","auml":"ä","brvbar":"¦","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","curren":"¤","deg":"°","divide":"÷","eacute":"é","ecirc":"ê","egrave":"è","eth":"ð","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","iacute":"í","icirc":"î","iexcl":"¡","igrave":"ì","iquest":"¿","iuml":"ï","laquo":"«","lt":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","ntilde":"ñ","oacute":"ó","ocirc":"ô","ograve":"ò","ordf":"ª","ordm":"º","oslash":"ø","otilde":"õ","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","raquo":"»","reg":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","thorn":"þ","times":"×","uacute":"ú","ucirc":"û","ugrave":"ù","uml":"¨","uuml":"ü","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e){e.exports=JSON.parse('{"0":"�","128":"€","130":"‚","131":"ƒ","132":"„","133":"…","134":"†","135":"‡","136":"ˆ","137":"‰","138":"Š","139":"‹","140":"Œ","142":"Ž","145":"‘","146":"’","147":"“","148":"”","149":"•","150":"–","151":"—","152":"˜","153":"™","154":"š","155":"›","156":"œ","158":"ž","159":"Ÿ"}')},function(e,n,t){"use strict";e.exports=function(e){var n="string"==typeof e?e.charCodeAt(0):e;return n>=97&&n<=102||n>=65&&n<=70||n>=48&&n<=57}},function(e,n,t){"use strict";var r=t(49),i=t(19);e.exports=function(e){return r(e)||i(e)}},function(e,n,t){"use strict";var r=t(121);e.exports=function(e){return!!i.call(r,e)&&r[e]};var i={}.hasOwnProperty},function(e){e.exports=JSON.parse('{"AEli":"Æ","AElig":"Æ","AM":"&","AMP":"&","Aacut":"Á","Aacute":"Á","Abreve":"Ă","Acir":"Â","Acirc":"Â","Acy":"А","Afr":"𝔄","Agrav":"À","Agrave":"À","Alpha":"Α","Amacr":"Ā","And":"⩓","Aogon":"Ą","Aopf":"𝔸","ApplyFunction":"⁡","Arin":"Å","Aring":"Å","Ascr":"𝒜","Assign":"≔","Atild":"Ã","Atilde":"Ã","Aum":"Ä","Auml":"Ä","Backslash":"∖","Barv":"⫧","Barwed":"⌆","Bcy":"Б","Because":"∵","Bernoullis":"ℬ","Beta":"Β","Bfr":"𝔅","Bopf":"𝔹","Breve":"˘","Bscr":"ℬ","Bumpeq":"≎","CHcy":"Ч","COP":"©","COPY":"©","Cacute":"Ć","Cap":"⋒","CapitalDifferentialD":"ⅅ","Cayleys":"ℭ","Ccaron":"Č","Ccedi":"Ç","Ccedil":"Ç","Ccirc":"Ĉ","Cconint":"∰","Cdot":"Ċ","Cedilla":"¸","CenterDot":"·","Cfr":"ℭ","Chi":"Χ","CircleDot":"⊙","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","Colon":"∷","Colone":"⩴","Congruent":"≡","Conint":"∯","ContourIntegral":"∮","Copf":"ℂ","Coproduct":"∐","CounterClockwiseContourIntegral":"∳","Cross":"⨯","Cscr":"𝒞","Cup":"⋓","CupCap":"≍","DD":"ⅅ","DDotrahd":"⤑","DJcy":"Ђ","DScy":"Ѕ","DZcy":"Џ","Dagger":"‡","Darr":"↡","Dashv":"⫤","Dcaron":"Ď","Dcy":"Д","Del":"∇","Delta":"Δ","Dfr":"𝔇","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","Diamond":"⋄","DifferentialD":"ⅆ","Dopf":"𝔻","Dot":"¨","DotDot":"⃜","DotEqual":"≐","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrow":"↓","DownArrowBar":"⤓","DownArrowUpArrow":"⇵","DownBreve":"̑","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVector":"↽","DownLeftVectorBar":"⥖","DownRightTeeVector":"⥟","DownRightVector":"⇁","DownRightVectorBar":"⥗","DownTee":"⊤","DownTeeArrow":"↧","Downarrow":"⇓","Dscr":"𝒟","Dstrok":"Đ","ENG":"Ŋ","ET":"Ð","ETH":"Ð","Eacut":"É","Eacute":"É","Ecaron":"Ě","Ecir":"Ê","Ecirc":"Ê","Ecy":"Э","Edot":"Ė","Efr":"𝔈","Egrav":"È","Egrave":"È","Element":"∈","Emacr":"Ē","EmptySmallSquare":"◻","EmptyVerySmallSquare":"▫","Eogon":"Ę","Eopf":"𝔼","Epsilon":"Ε","Equal":"⩵","EqualTilde":"≂","Equilibrium":"⇌","Escr":"ℰ","Esim":"⩳","Eta":"Η","Eum":"Ë","Euml":"Ë","Exists":"∃","ExponentialE":"ⅇ","Fcy":"Ф","Ffr":"𝔉","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","Fopf":"𝔽","ForAll":"∀","Fouriertrf":"ℱ","Fscr":"ℱ","GJcy":"Ѓ","G":">","GT":">","Gamma":"Γ","Gammad":"Ϝ","Gbreve":"Ğ","Gcedil":"Ģ","Gcirc":"Ĝ","Gcy":"Г","Gdot":"Ġ","Gfr":"𝔊","Gg":"⋙","Gopf":"𝔾","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","Gt":"≫","HARDcy":"Ъ","Hacek":"ˇ","Hat":"^","Hcirc":"Ĥ","Hfr":"ℌ","HilbertSpace":"ℋ","Hopf":"ℍ","HorizontalLine":"─","Hscr":"ℋ","Hstrok":"Ħ","HumpDownHump":"≎","HumpEqual":"≏","IEcy":"Е","IJlig":"Ĳ","IOcy":"Ё","Iacut":"Í","Iacute":"Í","Icir":"Î","Icirc":"Î","Icy":"И","Idot":"İ","Ifr":"ℑ","Igrav":"Ì","Igrave":"Ì","Im":"ℑ","Imacr":"Ī","ImaginaryI":"ⅈ","Implies":"⇒","Int":"∬","Integral":"∫","Intersection":"⋂","InvisibleComma":"⁣","InvisibleTimes":"⁢","Iogon":"Į","Iopf":"𝕀","Iota":"Ι","Iscr":"ℐ","Itilde":"Ĩ","Iukcy":"І","Ium":"Ï","Iuml":"Ï","Jcirc":"Ĵ","Jcy":"Й","Jfr":"𝔍","Jopf":"𝕁","Jscr":"𝒥","Jsercy":"Ј","Jukcy":"Є","KHcy":"Х","KJcy":"Ќ","Kappa":"Κ","Kcedil":"Ķ","Kcy":"К","Kfr":"𝔎","Kopf":"𝕂","Kscr":"𝒦","LJcy":"Љ","L":"<","LT":"<","Lacute":"Ĺ","Lambda":"Λ","Lang":"⟪","Laplacetrf":"ℒ","Larr":"↞","Lcaron":"Ľ","Lcedil":"Ļ","Lcy":"Л","LeftAngleBracket":"⟨","LeftArrow":"←","LeftArrowBar":"⇤","LeftArrowRightArrow":"⇆","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVector":"⇃","LeftDownVectorBar":"⥙","LeftFloor":"⌊","LeftRightArrow":"↔","LeftRightVector":"⥎","LeftTee":"⊣","LeftTeeArrow":"↤","LeftTeeVector":"⥚","LeftTriangle":"⊲","LeftTriangleBar":"⧏","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVector":"↿","LeftUpVectorBar":"⥘","LeftVector":"↼","LeftVectorBar":"⥒","Leftarrow":"⇐","Leftrightarrow":"⇔","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","LessLess":"⪡","LessSlantEqual":"⩽","LessTilde":"≲","Lfr":"𝔏","Ll":"⋘","Lleftarrow":"⇚","Lmidot":"Ŀ","LongLeftArrow":"⟵","LongLeftRightArrow":"⟷","LongRightArrow":"⟶","Longleftarrow":"⟸","Longleftrightarrow":"⟺","Longrightarrow":"⟹","Lopf":"𝕃","LowerLeftArrow":"↙","LowerRightArrow":"↘","Lscr":"ℒ","Lsh":"↰","Lstrok":"Ł","Lt":"≪","Map":"⤅","Mcy":"М","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","MinusPlus":"∓","Mopf":"𝕄","Mscr":"ℳ","Mu":"Μ","NJcy":"Њ","Nacute":"Ń","Ncaron":"Ň","Ncedil":"Ņ","Ncy":"Н","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","Nfr":"𝔑","NoBreak":"⁠","NonBreakingSpace":" ","Nopf":"ℕ","Not":"⫬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","NotLeftTriangle":"⋪","NotLeftTriangleBar":"⧏̸","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangle":"⋫","NotRightTriangleBar":"⧐̸","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","Nscr":"𝒩","Ntild":"Ñ","Ntilde":"Ñ","Nu":"Ν","OElig":"Œ","Oacut":"Ó","Oacute":"Ó","Ocir":"Ô","Ocirc":"Ô","Ocy":"О","Odblac":"Ő","Ofr":"𝔒","Ograv":"Ò","Ograve":"Ò","Omacr":"Ō","Omega":"Ω","Omicron":"Ο","Oopf":"𝕆","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","Or":"⩔","Oscr":"𝒪","Oslas":"Ø","Oslash":"Ø","Otild":"Õ","Otilde":"Õ","Otimes":"⨷","Oum":"Ö","Ouml":"Ö","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","PartialD":"∂","Pcy":"П","Pfr":"𝔓","Phi":"Φ","Pi":"Π","PlusMinus":"±","Poincareplane":"ℌ","Popf":"ℙ","Pr":"⪻","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","Prime":"″","Product":"∏","Proportion":"∷","Proportional":"∝","Pscr":"𝒫","Psi":"Ψ","QUO":"\\"","QUOT":"\\"","Qfr":"𝔔","Qopf":"ℚ","Qscr":"𝒬","RBarr":"⤐","RE":"®","REG":"®","Racute":"Ŕ","Rang":"⟫","Rarr":"↠","Rarrtl":"⤖","Rcaron":"Ř","Rcedil":"Ŗ","Rcy":"Р","Re":"ℜ","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","Rfr":"ℜ","Rho":"Ρ","RightAngleBracket":"⟩","RightArrow":"→","RightArrowBar":"⇥","RightArrowLeftArrow":"⇄","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVector":"⇂","RightDownVectorBar":"⥕","RightFloor":"⌋","RightTee":"⊢","RightTeeArrow":"↦","RightTeeVector":"⥛","RightTriangle":"⊳","RightTriangleBar":"⧐","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVector":"↾","RightUpVectorBar":"⥔","RightVector":"⇀","RightVectorBar":"⥓","Rightarrow":"⇒","Ropf":"ℝ","RoundImplies":"⥰","Rrightarrow":"⇛","Rscr":"ℛ","Rsh":"↱","RuleDelayed":"⧴","SHCHcy":"Щ","SHcy":"Ш","SOFTcy":"Ь","Sacute":"Ś","Sc":"⪼","Scaron":"Š","Scedil":"Ş","Scirc":"Ŝ","Scy":"С","Sfr":"𝔖","ShortDownArrow":"↓","ShortLeftArrow":"←","ShortRightArrow":"→","ShortUpArrow":"↑","Sigma":"Σ","SmallCircle":"∘","Sopf":"𝕊","Sqrt":"√","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","Sscr":"𝒮","Star":"⋆","Sub":"⋐","Subset":"⋐","SubsetEqual":"⊆","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","SuchThat":"∋","Sum":"∑","Sup":"⋑","Superset":"⊃","SupersetEqual":"⊇","Supset":"⋑","THOR":"Þ","THORN":"Þ","TRADE":"™","TSHcy":"Ћ","TScy":"Ц","Tab":"\\t","Tau":"Τ","Tcaron":"Ť","Tcedil":"Ţ","Tcy":"Т","Tfr":"𝔗","Therefore":"∴","Theta":"Θ","ThickSpace":"  ","ThinSpace":" ","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","Topf":"𝕋","TripleDot":"⃛","Tscr":"𝒯","Tstrok":"Ŧ","Uacut":"Ú","Uacute":"Ú","Uarr":"↟","Uarrocir":"⥉","Ubrcy":"Ў","Ubreve":"Ŭ","Ucir":"Û","Ucirc":"Û","Ucy":"У","Udblac":"Ű","Ufr":"𝔘","Ugrav":"Ù","Ugrave":"Ù","Umacr":"Ū","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","Uopf":"𝕌","UpArrow":"↑","UpArrowBar":"⤒","UpArrowDownArrow":"⇅","UpDownArrow":"↕","UpEquilibrium":"⥮","UpTee":"⊥","UpTeeArrow":"↥","Uparrow":"⇑","Updownarrow":"⇕","UpperLeftArrow":"↖","UpperRightArrow":"↗","Upsi":"ϒ","Upsilon":"Υ","Uring":"Ů","Uscr":"𝒰","Utilde":"Ũ","Uum":"Ü","Uuml":"Ü","VDash":"⊫","Vbar":"⫫","Vcy":"В","Vdash":"⊩","Vdashl":"⫦","Vee":"⋁","Verbar":"‖","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","Vopf":"𝕍","Vscr":"𝒱","Vvdash":"⊪","Wcirc":"Ŵ","Wedge":"⋀","Wfr":"𝔚","Wopf":"𝕎","Wscr":"𝒲","Xfr":"𝔛","Xi":"Ξ","Xopf":"𝕏","Xscr":"𝒳","YAcy":"Я","YIcy":"Ї","YUcy":"Ю","Yacut":"Ý","Yacute":"Ý","Ycirc":"Ŷ","Ycy":"Ы","Yfr":"𝔜","Yopf":"𝕐","Yscr":"𝒴","Yuml":"Ÿ","ZHcy":"Ж","Zacute":"Ź","Zcaron":"Ž","Zcy":"З","Zdot":"Ż","ZeroWidthSpace":"​","Zeta":"Ζ","Zfr":"ℨ","Zopf":"ℤ","Zscr":"𝒵","aacut":"á","aacute":"á","abreve":"ă","ac":"∾","acE":"∾̳","acd":"∿","acir":"â","acirc":"â","acut":"´","acute":"´","acy":"а","aeli":"æ","aelig":"æ","af":"⁡","afr":"𝔞","agrav":"à","agrave":"à","alefsym":"ℵ","aleph":"ℵ","alpha":"α","amacr":"ā","amalg":"⨿","am":"&","amp":"&","and":"∧","andand":"⩕","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsd":"∡","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","aogon":"ą","aopf":"𝕒","ap":"≈","apE":"⩰","apacir":"⩯","ape":"≊","apid":"≋","apos":"\'","approx":"≈","approxeq":"≊","arin":"å","aring":"å","ascr":"𝒶","ast":"*","asymp":"≈","asympeq":"≍","atild":"ã","atilde":"ã","aum":"ä","auml":"ä","awconint":"∳","awint":"⨑","bNot":"⫭","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","barvee":"⊽","barwed":"⌅","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","beta":"β","beth":"ℶ","between":"≬","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bnot":"⌐","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxDL":"╗","boxDR":"╔","boxDl":"╖","boxDr":"╓","boxH":"═","boxHD":"╦","boxHU":"╩","boxHd":"╤","boxHu":"╧","boxUL":"╝","boxUR":"╚","boxUl":"╜","boxUr":"╙","boxV":"║","boxVH":"╬","boxVL":"╣","boxVR":"╠","boxVh":"╫","boxVl":"╢","boxVr":"╟","boxbox":"⧉","boxdL":"╕","boxdR":"╒","boxdl":"┐","boxdr":"┌","boxh":"─","boxhD":"╥","boxhU":"╨","boxhd":"┬","boxhu":"┴","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxuL":"╛","boxuR":"╘","boxul":"┘","boxur":"└","boxv":"│","boxvH":"╪","boxvL":"╡","boxvR":"╞","boxvh":"┼","boxvl":"┤","boxvr":"├","bprime":"‵","breve":"˘","brvba":"¦","brvbar":"¦","bscr":"𝒷","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsol":"\\\\","bsolb":"⧅","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","bumpeq":"≏","cacute":"ć","cap":"∩","capand":"⩄","capbrcup":"⩉","capcap":"⩋","capcup":"⩇","capdot":"⩀","caps":"∩︀","caret":"⁁","caron":"ˇ","ccaps":"⩍","ccaron":"č","ccedi":"ç","ccedil":"ç","ccirc":"ĉ","ccups":"⩌","ccupssm":"⩐","cdot":"ċ","cedi":"¸","cedil":"¸","cemptyv":"⦲","cen":"¢","cent":"¢","centerdot":"·","cfr":"𝔠","chcy":"ч","check":"✓","checkmark":"✓","chi":"χ","cir":"○","cirE":"⧃","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledR":"®","circledS":"Ⓢ","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","clubs":"♣","clubsuit":"♣","colon":":","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","conint":"∮","copf":"𝕔","coprod":"∐","cop":"©","copy":"©","copysr":"℗","crarr":"↵","cross":"✗","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cup":"∪","cupbrcap":"⩈","cupcap":"⩆","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curre":"¤","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dArr":"⇓","dHar":"⥥","dagger":"†","daleth":"ℸ","darr":"↓","dash":"‐","dashv":"⊣","dbkarow":"⤏","dblac":"˝","dcaron":"ď","dcy":"д","dd":"ⅆ","ddagger":"‡","ddarr":"⇊","ddotseq":"⩷","de":"°","deg":"°","delta":"δ","demptyv":"⦱","dfisht":"⥿","dfr":"𝔡","dharl":"⇃","dharr":"⇂","diam":"⋄","diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","digamma":"ϝ","disin":"⋲","div":"÷","divid":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","dopf":"𝕕","dot":"˙","doteq":"≐","doteqdot":"≑","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","downarrow":"↓","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","dscr":"𝒹","dscy":"ѕ","dsol":"⧶","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","dzcy":"џ","dzigrarr":"⟿","eDDot":"⩷","eDot":"≑","eacut":"é","eacute":"é","easter":"⩮","ecaron":"ě","ecir":"ê","ecirc":"ê","ecolon":"≕","ecy":"э","edot":"ė","ee":"ⅇ","efDot":"≒","efr":"𝔢","eg":"⪚","egrav":"è","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","emacr":"ē","empty":"∅","emptyset":"∅","emptyv":"∅","emsp13":" ","emsp14":" ","emsp":" ","eng":"ŋ","ensp":" ","eogon":"ę","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","equals":"=","equest":"≟","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erDot":"≓","erarr":"⥱","escr":"ℯ","esdot":"≐","esim":"≂","eta":"η","et":"ð","eth":"ð","eum":"ë","euml":"ë","euro":"€","excl":"!","exist":"∃","expectation":"ℰ","exponentiale":"ⅇ","fallingdotseq":"≒","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","ffr":"𝔣","filig":"ﬁ","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","fopf":"𝕗","forall":"∀","fork":"⋔","forkv":"⫙","fpartint":"⨍","frac1":"¼","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac3":"¾","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","gE":"≧","gEl":"⪌","gacute":"ǵ","gamma":"γ","gammad":"ϝ","gap":"⪆","gbreve":"ğ","gcirc":"ĝ","gcy":"г","gdot":"ġ","ge":"≥","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","ges":"⩾","gescc":"⪩","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","gfr":"𝔤","gg":"≫","ggg":"⋙","gimel":"ℷ","gjcy":"ѓ","gl":"≷","glE":"⪒","gla":"⪥","glj":"⪤","gnE":"≩","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gneq":"⪈","gneqq":"≩","gnsim":"⋧","gopf":"𝕘","grave":"`","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","g":">","gt":">","gtcc":"⪧","gtcir":"⩺","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","hArr":"⇔","hairsp":" ","half":"½","hamilt":"ℋ","hardcy":"ъ","harr":"↔","harrcir":"⥈","harrw":"↭","hbar":"ℏ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","horbar":"―","hscr":"𝒽","hslash":"ℏ","hstrok":"ħ","hybull":"⁃","hyphen":"‐","iacut":"í","iacute":"í","ic":"⁣","icir":"î","icirc":"î","icy":"и","iecy":"е","iexc":"¡","iexcl":"¡","iff":"⇔","ifr":"𝔦","igrav":"ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","ijlig":"ĳ","imacr":"ī","image":"ℑ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","imof":"⊷","imped":"Ƶ","in":"∈","incare":"℅","infin":"∞","infintie":"⧝","inodot":"ı","int":"∫","intcal":"⊺","integers":"ℤ","intercal":"⊺","intlarhk":"⨗","intprod":"⨼","iocy":"ё","iogon":"į","iopf":"𝕚","iota":"ι","iprod":"⨼","iques":"¿","iquest":"¿","iscr":"𝒾","isin":"∈","isinE":"⋹","isindot":"⋵","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","itilde":"ĩ","iukcy":"і","ium":"ï","iuml":"ï","jcirc":"ĵ","jcy":"й","jfr":"𝔧","jmath":"ȷ","jopf":"𝕛","jscr":"𝒿","jsercy":"ј","jukcy":"є","kappa":"κ","kappav":"ϰ","kcedil":"ķ","kcy":"к","kfr":"𝔨","kgreen":"ĸ","khcy":"х","kjcy":"ќ","kopf":"𝕜","kscr":"𝓀","lAarr":"⇚","lArr":"⇐","lAtail":"⤛","lBarr":"⤎","lE":"≦","lEg":"⪋","lHar":"⥢","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","lambda":"λ","lang":"⟨","langd":"⦑","langle":"⟨","lap":"⪅","laqu":"«","laquo":"«","larr":"←","larrb":"⇤","larrbfs":"⤟","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","lat":"⪫","latail":"⤙","late":"⪭","lates":"⪭︀","lbarr":"⤌","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","lcaron":"ľ","lcedil":"ļ","lceil":"⌈","lcub":"{","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","leftarrow":"←","leftarrowtail":"↢","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","leftthreetimes":"⋋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","les":"⩽","lescc":"⪨","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","lessgtr":"≶","lesssim":"≲","lfisht":"⥼","lfloor":"⌊","lfr":"𝔩","lg":"≶","lgE":"⪑","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","ljcy":"љ","ll":"≪","llarr":"⇇","llcorner":"⌞","llhard":"⥫","lltri":"◺","lmidot":"ŀ","lmoust":"⎰","lmoustache":"⎰","lnE":"≨","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","longleftrightarrow":"⟷","longmapsto":"⟼","longrightarrow":"⟶","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","lstrok":"ł","l":"<","lt":"<","ltcc":"⪦","ltcir":"⩹","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltrPar":"⦖","ltri":"◃","ltrie":"⊴","ltrif":"◂","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","mDDot":"∺","mac":"¯","macr":"¯","male":"♂","malt":"✠","maltese":"✠","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","mcy":"м","mdash":"—","measuredangle":"∡","mfr":"𝔪","mho":"℧","micr":"µ","micro":"µ","mid":"∣","midast":"*","midcir":"⫰","middo":"·","middot":"·","minus":"−","minusb":"⊟","minusd":"∸","minusdu":"⨪","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","mopf":"𝕞","mp":"∓","mscr":"𝓂","mstpos":"∾","mu":"μ","multimap":"⊸","mumap":"⊸","nGg":"⋙̸","nGt":"≫⃒","nGtv":"≫̸","nLeftarrow":"⇍","nLeftrightarrow":"⇎","nLl":"⋘̸","nLt":"≪⃒","nLtv":"≪̸","nRightarrow":"⇏","nVDash":"⊯","nVdash":"⊮","nabla":"∇","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natur":"♮","natural":"♮","naturals":"ℕ","nbs":" ","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","ncaron":"ň","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","ncy":"н","ndash":"–","ne":"≠","neArr":"⇗","nearhk":"⤤","nearr":"↗","nearrow":"↗","nedot":"≐̸","nequiv":"≢","nesear":"⤨","nesim":"≂̸","nexist":"∄","nexists":"∄","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","ngsim":"≵","ngt":"≯","ngtr":"≯","nhArr":"⇎","nharr":"↮","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","njcy":"њ","nlArr":"⇍","nlE":"≦̸","nlarr":"↚","nldr":"‥","nle":"≰","nleftarrow":"↚","nleftrightarrow":"↮","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nlsim":"≴","nlt":"≮","nltri":"⋪","nltrie":"⋬","nmid":"∤","nopf":"𝕟","no":"¬","not":"¬","notin":"∉","notinE":"⋹̸","notindot":"⋵̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","npar":"∦","nparallel":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","npre":"⪯̸","nprec":"⊀","npreceq":"⪯̸","nrArr":"⇏","nrarr":"↛","nrarrc":"⤳̸","nrarrw":"↝̸","nrightarrow":"↛","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","ntild":"ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","nu":"ν","num":"#","numero":"№","numsp":" ","nvDash":"⊭","nvHarr":"⤄","nvap":"≍⃒","nvdash":"⊬","nvge":"≥⃒","nvgt":">⃒","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwArr":"⇖","nwarhk":"⤣","nwarr":"↖","nwarrow":"↖","nwnear":"⤧","oS":"Ⓢ","oacut":"ó","oacute":"ó","oast":"⊛","ocir":"ô","ocirc":"ô","ocy":"о","odash":"⊝","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","oelig":"œ","ofcir":"⦿","ofr":"𝔬","ogon":"˛","ograv":"ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","omacr":"ō","omega":"ω","omicron":"ο","omid":"⦶","ominus":"⊖","oopf":"𝕠","opar":"⦷","operp":"⦹","oplus":"⊕","or":"∨","orarr":"↻","ord":"º","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oscr":"ℴ","oslas":"ø","oslash":"ø","osol":"⊘","otild":"õ","otilde":"õ","otimes":"⊗","otimesas":"⨶","oum":"ö","ouml":"ö","ovbar":"⌽","par":"¶","para":"¶","parallel":"∥","parsim":"⫳","parsl":"⫽","part":"∂","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","pfr":"𝔭","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plus":"+","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plusdo":"∔","plusdu":"⨥","pluse":"⩲","plusm":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","pointint":"⨕","popf":"𝕡","poun":"£","pound":"£","pr":"≺","prE":"⪳","prap":"⪷","prcue":"≼","pre":"⪯","prec":"≺","precapprox":"⪷","preccurlyeq":"≼","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","precsim":"≾","prime":"′","primes":"ℙ","prnE":"⪵","prnap":"⪹","prnsim":"⋨","prod":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","propto":"∝","prsim":"≾","prurel":"⊰","pscr":"𝓅","psi":"ψ","puncsp":" ","qfr":"𝔮","qint":"⨌","qopf":"𝕢","qprime":"⁗","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quo":"\\"","quot":"\\"","rAarr":"⇛","rArr":"⇒","rAtail":"⤜","rBarr":"⤏","rHar":"⥤","race":"∽̱","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","rangd":"⦒","range":"⦥","rangle":"⟩","raqu":"»","raquo":"»","rarr":"→","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","rarrtl":"↣","rarrw":"↝","ratail":"⤚","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","rcaron":"ř","rcedil":"ŗ","rceil":"⌉","rcub":"}","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","rect":"▭","re":"®","reg":"®","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","rhard":"⇁","rharu":"⇀","rharul":"⥬","rho":"ρ","rhov":"ϱ","rightarrow":"→","rightarrowtail":"↣","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","rightthreetimes":"⋌","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoust":"⎱","rmoustache":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","roplus":"⨮","rotimes":"⨵","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","rsaquo":"›","rscr":"𝓇","rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","ruluhar":"⥨","rx":"℞","sacute":"ś","sbquo":"‚","sc":"≻","scE":"⪴","scap":"⪸","scaron":"š","sccue":"≽","sce":"⪰","scedil":"ş","scirc":"ŝ","scnE":"⪶","scnap":"⪺","scnsim":"⋩","scpolint":"⨓","scsim":"≿","scy":"с","sdot":"⋅","sdotb":"⊡","sdote":"⩦","seArr":"⇘","searhk":"⤥","searr":"↘","searrow":"↘","sec":"§","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","sfr":"𝔰","sfrown":"⌢","sharp":"♯","shchcy":"щ","shcy":"ш","shortmid":"∣","shortparallel":"∥","sh":"­","shy":"­","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","softcy":"ь","sol":"/","solb":"⧄","solbar":"⌿","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","squ":"□","square":"□","squarf":"▪","squf":"▪","srarr":"→","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","subE":"⫅","subdot":"⪽","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","subseteq":"⊆","subseteqq":"⫅","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succ":"≻","succapprox":"⪸","succcurlyeq":"≽","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","sum":"∑","sung":"♪","sup":"⊃","sup1":"¹","sup2":"²","sup3":"³","supE":"⫆","supdot":"⪾","supdsub":"⫘","supe":"⊇","supedot":"⫄","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swArr":"⇙","swarhk":"⤦","swarr":"↙","swarrow":"↙","swnwar":"⤪","szli":"ß","szlig":"ß","target":"⌖","tau":"τ","tbrk":"⎴","tcaron":"ť","tcedil":"ţ","tcy":"т","tdot":"⃛","telrec":"⌕","tfr":"𝔱","there4":"∴","therefore":"∴","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","thinsp":" ","thkap":"≈","thksim":"∼","thor":"þ","thorn":"þ","tilde":"˜","time":"×","times":"×","timesb":"⊠","timesbar":"⨱","timesd":"⨰","tint":"∭","toea":"⤨","top":"⊤","topbot":"⌶","topcir":"⫱","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","tscr":"𝓉","tscy":"ц","tshcy":"ћ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","uArr":"⇑","uHar":"⥣","uacut":"ú","uacute":"ú","uarr":"↑","ubrcy":"ў","ubreve":"ŭ","ucir":"û","ucirc":"û","ucy":"у","udarr":"⇅","udblac":"ű","udhar":"⥮","ufisht":"⥾","ufr":"𝔲","ugrav":"ù","ugrave":"ù","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","umacr":"ū","um":"¨","uml":"¨","uogon":"ų","uopf":"𝕦","uparrow":"↑","updownarrow":"↕","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","upsi":"υ","upsih":"ϒ","upsilon":"υ","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","uring":"ů","urtri":"◹","uscr":"𝓊","utdot":"⋰","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","uum":"ü","uuml":"ü","uwangle":"⦧","vArr":"⇕","vBar":"⫨","vBarv":"⫩","vDash":"⊨","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vcy":"в","vdash":"⊢","vee":"∨","veebar":"⊻","veeeq":"≚","vellip":"⋮","verbar":"|","vert":"|","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","vopf":"𝕧","vprop":"∝","vrtri":"⊳","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","vzigzag":"⦚","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","wedgeq":"≙","weierp":"℘","wfr":"𝔴","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","xfr":"𝔵","xhArr":"⟺","xharr":"⟷","xi":"ξ","xlArr":"⟸","xlarr":"⟵","xmap":"⟼","xnis":"⋻","xodot":"⨀","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrArr":"⟹","xrarr":"⟶","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","yacut":"ý","yacute":"ý","yacy":"я","ycirc":"ŷ","ycy":"ы","ye":"¥","yen":"¥","yfr":"𝔶","yicy":"ї","yopf":"𝕪","yscr":"𝓎","yucy":"ю","yum":"ÿ","yuml":"ÿ","zacute":"ź","zcaron":"ž","zcy":"з","zdot":"ż","zeetrf":"ℨ","zeta":"ζ","zfr":"𝔷","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(e,n,t){var r=function(e){var n=/\blang(?:uage)?-([\w-]+)\b/i,t=0,r={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function(e){return e instanceof i?new i(e.type,r.util.encode(e.content),e.alias):Array.isArray(e)?e.map(r.util.encode):e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function e(n,t){var i,a,o=r.util.type(n);switch(t=t||{},o){case"Object":if(a=r.util.objId(n),t[a])return t[a];for(var s in i={},t[a]=i,n)n.hasOwnProperty(s)&&(i[s]=e(n[s],t));return i;case"Array":return a=r.util.objId(n),t[a]?t[a]:(i=[],t[a]=i,n.forEach((function(n,r){i[r]=e(n,t)})),i);default:return n}}},languages:{extend:function(e,n){var t=r.util.clone(r.languages[e]);for(var i in n)t[i]=n[i];return t},insertBefore:function(e,n,t,i){var a=(i=i||r.languages)[e],o={};for(var s in a)if(a.hasOwnProperty(s)){if(s==n)for(var c in t)t.hasOwnProperty(c)&&(o[c]=t[c]);t.hasOwnProperty(s)||(o[s]=a[s])}var u=i[e];return i[e]=o,r.languages.DFS(r.languages,(function(n,t){t===u&&n!=e&&(this[n]=o)})),o},DFS:function e(n,t,i,a){a=a||{};var o=r.util.objId;for(var s in n)if(n.hasOwnProperty(s)){t.call(n,s,n[s],i||s);var c=n[s],u=r.util.type(c);"Object"!==u||a[o(c)]?"Array"!==u||a[o(c)]||(a[o(c)]=!0,e(c,t,s,a)):(a[o(c)]=!0,e(c,t,null,a))}}},plugins:{},highlightAll:function(e,n){r.highlightAllUnder(document,e,n)},highlightAllUnder:function(e,n,t){var i={callback:t,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};r.hooks.run("before-highlightall",i);for(var a,o=e.querySelectorAll(i.selector),s=0;a=o[s++];)r.highlightElement(a,!0===n,i.callback)},highlightElement:function(t,i,a){for(var o,s="none",c=t;c&&!n.test(c.className);)c=c.parentNode;c&&(s=(c.className.match(n)||[,"none"])[1].toLowerCase(),o=r.languages[s]),t.className=t.className.replace(n,"").replace(/\s+/g," ")+" language-"+s,t.parentNode&&(c=t.parentNode,/pre/i.test(c.nodeName)&&(c.className=c.className.replace(n,"").replace(/\s+/g," ")+" language-"+s));var u={element:t,language:s,grammar:o,code:t.textContent},l=function(e){u.highlightedCode=e,r.hooks.run("before-insert",u),u.element.innerHTML=u.highlightedCode,r.hooks.run("after-highlight",u),r.hooks.run("complete",u),a&&a.call(u.element)};if(r.hooks.run("before-sanity-check",u),u.code)if(r.hooks.run("before-highlight",u),u.grammar)if(i&&e.Worker){var p=new Worker(r.filename);p.onmessage=function(e){l(e.data)},p.postMessage(JSON.stringify({language:u.language,code:u.code,immediateClose:!0}))}else l(r.highlight(u.code,u.grammar,u.language));else l(r.util.encode(u.code));else r.hooks.run("complete",u)},highlight:function(e,n,t){var a={code:e,grammar:n,language:t};return r.hooks.run("before-tokenize",a),a.tokens=r.tokenize(a.code,a.grammar),r.hooks.run("after-tokenize",a),i.stringify(r.util.encode(a.tokens),a.language)},matchGrammar:function(e,n,t,a,o,s,c){for(var u in t)if(t.hasOwnProperty(u)&&t[u]){if(u==c)return;var l=t[u];l="Array"===r.util.type(l)?l:[l];for(var p=0;p<l.length;++p){var f=l[p],d=f.inside,m=!!f.lookbehind,h=!!f.greedy,g=0,v=f.alias;if(h&&!f.pattern.global){var x=f.pattern.toString().match(/[imuy]*$/)[0];f.pattern=RegExp(f.pattern.source,x+"g")}f=f.pattern||f;for(var b=a,y=o;b<n.length;y+=n[b].length,++b){var w=n[b];if(n.length>e.length)return;if(!(w instanceof i)){if(h&&b!=n.length-1){if(f.lastIndex=y,!($=f.exec(e)))break;for(var k=$.index+(m?$[1].length:0),_=$.index+$[0].length,S=b,E=y,A=n.length;S<A&&(E<_||!n[S].type&&!n[S-1].greedy);++S)k>=(E+=n[S].length)&&(++b,y=E);if(n[b]instanceof i)continue;C=S-b,w=e.slice(y,E),$.index-=y}else{f.lastIndex=0;var $=f.exec(w),C=1}if($){m&&(g=$[1]?$[1].length:0);_=(k=$.index+g)+($=$[0].slice(g)).length;var O=w.slice(0,k),M=w.slice(_),j=[b,C];O&&(++b,y+=O.length,j.push(O));var F=new i(u,d?r.tokenize($,d):$,v,$,h);if(j.push(F),M&&j.push(M),Array.prototype.splice.apply(n,j),1!=C&&r.matchGrammar(e,n,t,b,y,!0,u),s)break}else if(s)break}}}}},tokenize:function(e,n){var t=[e],i=n.rest;if(i){for(var a in i)n[a]=i[a];delete n.rest}return r.matchGrammar(e,t,n,0,0,!1),t},hooks:{all:{},add:function(e,n){var t=r.hooks.all;t[e]=t[e]||[],t[e].push(n)},run:function(e,n){var t=r.hooks.all[e];if(t&&t.length)for(var i,a=0;i=t[a++];)i(n)}},Token:i};function i(e,n,t,r,i){this.type=e,this.content=n,this.alias=t,this.length=0|(r||"").length,this.greedy=!!i}if(e.Prism=r,i.stringify=function(e,n){if("string"==typeof e)return e;if(Array.isArray(e))return e.map((function(e){return i.stringify(e,n)})).join("");var t={type:e.type,content:i.stringify(e.content,n),tag:"span",classes:["token",e.type],attributes:{},language:n};if(e.alias){var a=Array.isArray(e.alias)?e.alias:[e.alias];Array.prototype.push.apply(t.classes,a)}r.hooks.run("wrap",t);var o=Object.keys(t.attributes).map((function(e){return e+'="'+(t.attributes[e]||"").replace(/"/g,"&quot;")+'"'})).join(" ");return"<"+t.tag+' class="'+t.classes.join(" ")+'"'+(o?" "+o:"")+">"+t.content+"</"+t.tag+">"},!e.document)return e.addEventListener?(r.disableWorkerMessageHandler||e.addEventListener("message",(function(n){var t=JSON.parse(n.data),i=t.language,a=t.code,o=t.immediateClose;e.postMessage(r.highlight(a,r.languages[i],i)),o&&e.close()}),!1),r):r;var a=document.currentScript||[].slice.call(document.getElementsByTagName("script")).pop();return a&&(r.filename=a.src,r.manual||a.hasAttribute("data-manual")||("loading"!==document.readyState?window.requestAnimationFrame?window.requestAnimationFrame(r.highlightAll):window.setTimeout(r.highlightAll,16):document.addEventListener("DOMContentLoaded",r.highlightAll))),r}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});e.exports&&(e.exports=r),"undefined"!=typeof global&&(global.Prism=r)},function(e,n,t){"use strict";function r(e){e.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:/<!DOCTYPE[\s\S]+?>/i,cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/i,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/^(\s*)["']|["']$/,lookbehind:!0}]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:/&#?[\da-z]{1,8};/i},e.languages.markup.tag.inside["attr-value"].inside.entity=e.languages.markup.entity,e.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.value.replace(/&amp;/,"&"))})),Object.defineProperty(e.languages.markup.tag,"addInlined",{value:function(n,t){var r={};r["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:e.languages[t]},r.cdata=/^<!\[CDATA\[|\]\]>$/i;var i={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:r}};i["language-"+t]={pattern:/[\s\S]+/,inside:e.languages[t]};var a={};a[n]={pattern:RegExp(/(<__[\s\S]*?>)(?:<!\[CDATA\[[\s\S]*?\]\]>\s*|[\s\S])*?(?=<\/__>)/.source.replace(/__/g,n),"i"),lookbehind:!0,greedy:!0,inside:i},e.languages.insertBefore("markup","cdata",a)}}),e.languages.xml=e.languages.extend("markup",{}),e.languages.html=e.languages.markup,e.languages.mathml=e.languages.markup,e.languages.svg=e.languages.markup}e.exports=r,r.displayName="markup",r.aliases=["xml","html","mathml","svg"]},function(e,n,t){"use strict";function r(e){!function(e){var n=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-]+[\s\S]*?(?:;|(?=\s*\{))/,inside:{rule:/@[\w-]+/}},url:{pattern:RegExp("url\\((?:"+n.source+"|[^\n\r()]*)\\)","i"),inside:{function:/^url/i,punctuation:/^\(|\)$/}},selector:RegExp("[^{}\\s](?:[^{};\"']|"+n.source+")*?(?=\\s*\\{)"),string:{pattern:n,greedy:!0},property:/[-_a-z\xA0-\uFFFF][-\w\xA0-\uFFFF]*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var t=e.languages.markup;t&&(t.tag.addInlined("style","css"),e.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\s*style=("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/i,inside:{"attr-name":{pattern:/^\s*style/i,inside:t.tag.inside},punctuation:/^\s*=\s*['"]|['"]\s*$/,"attr-value":{pattern:/.+/i,inside:e.languages.css}},alias:"language-css"}},t.tag))}(e)}e.exports=r,r.displayName="css",r.aliases=[]},function(e,n,t){"use strict";function r(e){e.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,punctuation:/[{}[\];(),.:]/}}e.exports=r,r.displayName="clike",r.aliases=[]},function(e,n){e.exports=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}},function(e,n){e.exports=function(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}},function(e,n,t){"use strict";function r(e){!function(e){var n=e.util.clone(e.languages.javascript);e.languages.jsx=e.languages.extend("markup",n),e.languages.jsx.tag.pattern=/<\/?(?:[\w.:-]+\s*(?:\s+(?:[\w.:-]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s{'">=]+|\{(?:\{(?:\{[^}]*\}|[^{}])*\}|[^{}])+\}))?|\{\.{3}[a-z_$][\w$]*(?:\.[a-z_$][\w$]*)*\}))*\s*\/?)?>/i,e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">]+)/i,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.insertBefore("inside","attr-name",{spread:{pattern:/\{\.{3}[a-z_$][\w$]*(?:\.[a-z_$][\w$]*)*\}/,inside:{punctuation:/\.{3}|[{}.]/,"attr-value":/\w+/}}},e.languages.jsx.tag),e.languages.insertBefore("inside","attr-value",{script:{pattern:/=(\{(?:\{(?:\{[^}]*\}|[^}])*\}|[^}])+\})/i,inside:{"script-punctuation":{pattern:/^=(?={)/,alias:"punctuation"},rest:e.languages.jsx},alias:"language-javascript"}},e.languages.jsx.tag);var t=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(t).join(""):""},r=function(n){for(var i=[],a=0;a<n.length;a++){var o=n[a],s=!1;if("string"!=typeof o&&("tag"===o.type&&o.content[0]&&"tag"===o.content[0].type?"</"===o.content[0].content[0].content?i.length>0&&i[i.length-1].tagName===t(o.content[0].content[1])&&i.pop():"/>"===o.content[o.content.length-1].content||i.push({tagName:t(o.content[0].content[1]),openedBraces:0}):i.length>0&&"punctuation"===o.type&&"{"===o.content?i[i.length-1].openedBraces++:i.length>0&&i[i.length-1].openedBraces>0&&"punctuation"===o.type&&"}"===o.content?i[i.length-1].openedBraces--:s=!0),(s||"string"==typeof o)&&i.length>0&&0===i[i.length-1].openedBraces){var c=t(o);a<n.length-1&&("string"==typeof n[a+1]||"plain-text"===n[a+1].type)&&(c+=t(n[a+1]),n.splice(a+1,1)),a>0&&("string"==typeof n[a-1]||"plain-text"===n[a-1].type)&&(c=t(n[a-1])+c,n.splice(a-1,1),a--),n[a]=new e.Token("plain-text",c,null,c)}o.content&&"string"!=typeof o.content&&r(o.content)}};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||r(e.tokens)}))}(e)}e.exports=r,r.displayName="jsx",r.aliases=[]},function(e,n,t){"use strict";var r=t(130),i=t(131),a=t(132),o=t(138),s=t(140),c=t(141);e.exports=function e(){var n=[],t=o(),x={},b=!1,y=-1;return w.data=function(e,n){if(s(e))return 2===arguments.length?(h("data",b),x[e]=n,w):l.call(x,e)&&x[e]||null;if(e)return h("data",b),x=e,w;return x},w.freeze=k,w.attachers=n,w.use=function(e){var t;if(h("use",b),null==e);else if("function"==typeof e)s.apply(null,arguments);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?o(e):i(e)}t&&(x.settings=r(x.settings||{},t));return w;function i(e){o(e.plugins),e.settings&&(t=r(t||{},e.settings))}function a(e){if("function"==typeof e)s(e);else{if("object"!=typeof e)throw new Error("Expected usable value, not `"+e+"`");"length"in e?s.apply(null,e):i(e)}}function o(e){var n,t;if(null==e);else{if("object"!=typeof e||!("length"in e))throw new Error("Expected a list of plugins, not `"+e+"`");for(n=e.length,t=-1;++t<n;)a(e[t])}}function s(e,t){var i=_(e);i?(c(i[1])&&c(t)&&(t=r(i[1],t)),i[1]=t):n.push(u.call(arguments))}},w.parse=function(e){var n,t=a(e);if(k(),d("parse",n=w.Parser),f(n))return new n(String(t),t).parse();return n(String(t),t)},w.stringify=function(e,n){var t,r=a(n);if(k(),m("stringify",t=w.Compiler),g(e),f(t))return new t(e,r).compile();return t(e,r)},w.run=S,w.runSync=function(e,n){var t,r=!1;return S(e,n,(function(e,n){r=!0,i(e),t=n})),v("runSync","run",r),t},w.process=E,w.processSync=function(e){var n,t=!1;return k(),d("processSync",w.Parser),m("processSync",w.Compiler),E(n=a(e),(function(e){t=!0,i(e)})),v("processSync","process",t),n},w;function w(){for(var t=e(),i=n.length,a=-1;++a<i;)t.use.apply(null,n[a]);return t.data(r(!0,{},x)),t}function k(){var e,r,i,a;if(b)return w;for(;++y<n.length;)r=(e=n[y])[0],null,!1!==(i=e[1])&&(!0===i&&(e[1]=void 0),"function"==typeof(a=r.apply(w,e.slice(1)))&&t.use(a));return b=!0,y=1/0,w}function _(e){for(var t,r=n.length,i=-1;++i<r;)if((t=n[i])[0]===e)return t}function S(e,n,r){if(g(e),k(),r||"function"!=typeof n||(r=n,n=null),!r)return new Promise(i);function i(i,o){t.run(e,a(n),(function(n,t,a){t=t||e,n?o(n):i?i(t):r(null,t,a)}))}i(null,r)}function E(e,n){if(k(),d("process",w.Parser),m("process",w.Compiler),!n)return new Promise(t);function t(t,r){var i=a(e);p.run(w,{file:i},(function(e){e?r(e):t?t(i):n(null,i)}))}t(null,n)}}().freeze();var u=[].slice,l={}.hasOwnProperty,p=o().use((function(e,n){n.tree=e.parse(n.file)})).use((function(e,n,t){e.run(n.tree,n.file,(function(e,r,i){e?t(e):(n.tree=r,n.file=i,t())}))})).use((function(e,n){n.file.contents=e.stringify(n.tree,n.file)}));function f(e){return"function"==typeof e&&function(e){var n;for(n in e)return!0;return!1}(e.prototype)}function d(e,n){if("function"!=typeof n)throw new Error("Cannot `"+e+"` without `Parser`")}function m(e,n){if("function"!=typeof n)throw new Error("Cannot `"+e+"` without `Compiler`")}function h(e,n){if(n)throw new Error(["Cannot invoke `"+e+"` on a frozen processor.\nCreate a new ","processor first, by invoking it: use `processor()` instead of ","`processor`."].join(""))}function g(e){if(!e||!s(e.type))throw new Error("Expected node, got `"+e+"`")}function v(e,n,t){if(!t)throw new Error("`"+e+"` finished async. Use `"+n+"` instead")}},function(e,n,t){"use strict";var r=Object.prototype.hasOwnProperty,i=Object.prototype.toString,a=Object.defineProperty,o=Object.getOwnPropertyDescriptor,s=function(e){return"function"==typeof Array.isArray?Array.isArray(e):"[object Array]"===i.call(e)},c=function(e){if(!e||"[object Object]"!==i.call(e))return!1;var n,t=r.call(e,"constructor"),a=e.constructor&&e.constructor.prototype&&r.call(e.constructor.prototype,"isPrototypeOf");if(e.constructor&&!t&&!a)return!1;for(n in e);return void 0===n||r.call(e,n)},u=function(e,n){a&&"__proto__"===n.name?a(e,n.name,{enumerable:!0,configurable:!0,value:n.newValue,writable:!0}):e[n.name]=n.newValue},l=function(e,n){if("__proto__"===n){if(!r.call(e,n))return;if(o)return o(e,n).value}return e[n]};e.exports=function e(){var n,t,r,i,a,o,p=arguments[0],f=1,d=arguments.length,m=!1;for("boolean"==typeof p&&(m=p,p=arguments[1]||{},f=2),(null==p||"object"!=typeof p&&"function"!=typeof p)&&(p={});f<d;++f)if(null!=(n=arguments[f]))for(t in n)r=l(p,t),p!==(i=l(n,t))&&(m&&i&&(c(i)||(a=s(i)))?(a?(a=!1,o=r&&s(r)?r:[]):o=r&&c(r)?r:{},u(p,{name:t,newValue:e(m,o,i)})):void 0!==i&&u(p,{name:t,newValue:i}));return p}},function(e,n,t){"use strict";e.exports=function(e){if(e)throw e}},function(e,n,t){"use strict";var r=t(133),i=t(135);e.exports=i;var a=i.prototype;function o(e,n,t){var i=this.path,a=new r(e,n,t);return i&&(a.name=i+":"+a.name,a.file=i),a.fatal=!1,this.messages.push(a),a}a.message=o,a.info=function(){var e=this.message.apply(this,arguments);return e.fatal=null,e},a.fail=function(){var e=this.message.apply(this,arguments);throw e.fatal=!0,e},a.warn=o},function(e,n,t){"use strict";var r=t(134);function i(){}e.exports=o,i.prototype=Error.prototype,o.prototype=new i;var a=o.prototype;function o(e,n,t){var i,a,o;"string"==typeof n&&(t=n,n=null),i=function(e){var n,t=[null,null];"string"==typeof e&&(-1===(n=e.indexOf(":"))?t[1]=e:(t[0]=e.slice(0,n),t[1]=e.slice(n+1)));return t}(t),a=r(n)||"1:1",o={start:{line:null,column:null},end:{line:null,column:null}},n&&n.position&&(n=n.position),n&&(n.start?(o=n,n=n.start):o.start=n),e.stack&&(this.stack=e.stack,e=e.message),this.message=e,this.name=a,this.reason=e,this.line=n?n.line:null,this.column=n?n.column:null,this.location=o,this.source=i[0],this.ruleId=i[1]}a.file="",a.name="",a.reason="",a.message="",a.stack="",a.fatal=null,a.column=null,a.line=null},function(e,n,t){"use strict";var r={}.hasOwnProperty;function i(e){return e&&"object"==typeof e||(e={}),o(e.line)+":"+o(e.column)}function a(e){return e&&"object"==typeof e||(e={}),i(e.start)+"-"+i(e.end)}function o(e){return e&&"number"==typeof e?e:1}e.exports=function(e){if(!e||"object"!=typeof e)return null;if(r.call(e,"position")||r.call(e,"type"))return a(e.position);if(r.call(e,"start")||r.call(e,"end"))return a(e);if(r.call(e,"line")||r.call(e,"column"))return i(e);return null}},function(e,n,t){"use strict";var r=t(9),i=t(136),a=t(137);e.exports=u;var o={}.hasOwnProperty,s=u.prototype;s.toString=function(e){var n=this.contents||"";return a(n)?n.toString(e):String(n)};var c=["history","path","basename","stem","extname","dirname"];function u(e){var n,t,r;if(e){if("string"==typeof e||a(e))e={contents:e};else if("message"in e&&"messages"in e)return e}else e={};if(!(this instanceof u))return new u(e);for(this.data={},this.messages=[],this.history=[],this.cwd=process.cwd(),t=-1,r=c.length;++t<r;)n=c[t],o.call(e,n)&&(this[n]=e[n]);for(n in e)-1===c.indexOf(n)&&(this[n]=e[n])}function l(e,n){if(-1!==e.indexOf(r.sep))throw new Error("`"+n+"` cannot be a path: did not expect `"+r.sep+"`")}function p(e,n){if(!e)throw new Error("`"+n+"` cannot be empty")}function f(e,n){if(!e)throw new Error("Setting `"+n+"` requires `path` to be set too")}Object.defineProperty(s,"path",{get:function(){return this.history[this.history.length-1]},set:function(e){p(e,"path"),e!==this.path&&this.history.push(e)}}),Object.defineProperty(s,"dirname",{get:function(){return"string"==typeof this.path?r.dirname(this.path):void 0},set:function(e){f(this.path,"dirname"),this.path=r.join(e||"",this.basename)}}),Object.defineProperty(s,"basename",{get:function(){return"string"==typeof this.path?r.basename(this.path):void 0},set:function(e){p(e,"basename"),l(e,"basename"),this.path=r.join(this.dirname||"",e)}}),Object.defineProperty(s,"extname",{get:function(){return"string"==typeof this.path?r.extname(this.path):void 0},set:function(e){var n=e||"";if(l(n,"extname"),f(this.path,"extname"),n){if("."!==n.charAt(0))throw new Error("`extname` must start with `.`");if(-1!==n.indexOf(".",1))throw new Error("`extname` cannot contain multiple dots")}this.path=i(this.path,n)}}),Object.defineProperty(s,"stem",{get:function(){return"string"==typeof this.path?r.basename(this.path,this.extname):void 0},set:function(e){p(e,"stem"),l(e,"stem"),this.path=r.join(this.dirname||"",e+(this.extname||""))}})},function(e,n,t){"use strict";var r=t(9);e.exports=function(e,n){if("string"!=typeof e)return e;if(0===e.length)return e;var t=r.basename(e,r.extname(e))+n;return r.join(r.dirname(e),t)}},function(e,n){function t(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(t(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&t(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,n,t){"use strict";var r=t(139);e.exports=a,a.wrap=r;var i=[].slice;function a(){var e=[],n={run:function(){var n=-1,t=i.call(arguments,0,-1),a=arguments[arguments.length-1];if("function"!=typeof a)throw new Error("Expected function as last argument, not "+a);function o(s){var c=e[++n],u=i.call(arguments,0),l=u.slice(1),p=t.length,f=-1;if(s)a(s);else{for(;++f<p;)null!==l[f]&&void 0!==l[f]||(l[f]=t[f]);t=l,c?r(c,o).apply(null,t):a.apply(null,[null].concat(t))}}o.apply(null,[null].concat(t))},use:function(t){if("function"!=typeof t)throw new Error("Expected `fn` to be a function, not "+t);return e.push(t),n}};return n}},function(e,n,t){"use strict";var r=[].slice;e.exports=function(e,n){var t;return function(){var n,o=r.call(arguments,0),s=e.length>o.length;s&&o.push(i);try{n=e.apply(null,o)}catch(e){if(s&&t)throw e;return i(e)}s||(n&&"function"==typeof n.then?n.then(a,i):n instanceof Error?i(n):a(n))};function i(){t||(t=!0,n.apply(null,arguments))}function a(e){i(null,e)}}},function(e,n){var t=Object.prototype.toString;e.exports=function(e){return"[object String]"===t.call(e)}},function(e,n,t){"use strict";var r=Object.prototype.toString;e.exports=function(e){var n;return"[object Object]"===r.call(e)&&(null===(n=Object.getPrototypeOf(e))||n===Object.getPrototypeOf({}))}},function(e,n,t){"use strict";var r=t(143),i=t(6),a=t(145);function o(e){var n=r(a);n.prototype.options=i(n.prototype.options,this.data("settings"),e),this.Parser=n}e.exports=o,o.Parser=a},function(e,n,t){"use strict";var r=t(6),i=t(2);e.exports=function(e){var n,t,a;for(t in i(s,e),i(o,s),n=s.prototype)(a=n[t])&&"object"==typeof a&&(n[t]="concat"in a?a.concat():r(a));return s;function o(n){return e.apply(this,n)}function s(){return this instanceof s?e.apply(this,arguments):new o(arguments)}}},function(e,n){"function"==typeof Object.create?e.exports=function(e,n){n&&(e.super_=n,e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,n){if(n){e.super_=n;var t=function(){};t.prototype=n.prototype,e.prototype=new t,e.prototype.constructor=e}}},function(e,n,t){"use strict";var r=t(6),i=t(146),a=t(147),o=t(148),s=t(149),c=t(150);function u(e,n){this.file=n,this.offset={},this.options=r(this.options),this.setOptions({}),this.inList=!1,this.inBlock=!1,this.inLink=!1,this.atStart=!0,this.toOffset=a(n).toOffset,this.unescape=o(this,"escape"),this.decode=s(this)}e.exports=u;var l=u.prototype;function p(e){var n,t=[];for(n in e)t.push(n);return t}l.setOptions=t(151),l.parse=t(154),l.options=t(50),l.exitStart=i("atStart",!0),l.enterList=i("inList",!1),l.enterLink=i("inLink",!1),l.enterBlock=i("inBlock",!1),l.interruptParagraph=[["thematicBreak"],["atxHeading"],["fencedCode"],["blockquote"],["html"],["setextHeading",{commonmark:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.interruptList=[["atxHeading",{pedantic:!1}],["fencedCode",{pedantic:!1}],["thematicBreak",{pedantic:!1}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.interruptBlockquote=[["indentedCode",{commonmark:!0}],["fencedCode",{commonmark:!0}],["atxHeading",{commonmark:!0}],["setextHeading",{commonmark:!0}],["thematicBreak",{commonmark:!0}],["html",{commonmark:!0}],["list",{commonmark:!0}],["definition",{commonmark:!1}],["footnote",{commonmark:!1}]],l.blockTokenizers={newline:t(158),indentedCode:t(159),fencedCode:t(160),blockquote:t(161),atxHeading:t(162),thematicBreak:t(163),list:t(164),setextHeading:t(166),html:t(167),footnote:t(168),definition:t(170),table:t(171),paragraph:t(172)},l.inlineTokenizers={escape:t(173),autoLink:t(175),url:t(176),html:t(178),link:t(179),reference:t(180),strong:t(181),emphasis:t(183),deletion:t(186),code:t(188),break:t(190),text:t(192)},l.blockMethods=p(l.blockTokenizers),l.inlineMethods=p(l.inlineTokenizers),l.tokenizeBlock=c("block"),l.tokenizeInline=c("inline"),l.tokenizeFactory=c},function(e,n,t){"use strict";e.exports=function(e,n,t){return function(){var r=t||this,i=r[e];return r[e]=!n,function(){r[e]=i}}}},function(e,n,t){"use strict";function r(e){return function(n){var t=-1,r=e.length;if(n<0)return{};for(;++t<r;)if(e[t]>n)return{line:t+1,column:n-(e[t-1]||0)+1,offset:n};return{}}}function i(e){return function(n){var t=n&&n.line,r=n&&n.column;if(!isNaN(t)&&!isNaN(r)&&t-1 in e)return(e[t-2]||0)+r-1||0;return-1}}e.exports=function(e){var n=function(e){var n=[],t=e.indexOf("\n");for(;-1!==t;)n.push(t+1),t=e.indexOf("\n",t+1);return n.push(e.length+1),n}(String(e));return{toPosition:r(n),toOffset:i(n)}}},function(e,n,t){"use strict";e.exports=function(e,n){return function(t){var r,i=0,a=t.indexOf("\\"),o=e[n],s=[];for(;-1!==a;)s.push(t.slice(i,a)),i=a+1,(r=t.charAt(i))&&-1!==o.indexOf(r)||s.push("\\"),a=t.indexOf("\\",i);return s.push(t.slice(i)),s.join("")}}},function(e,n,t){"use strict";var r=t(6),i=t(18);e.exports=function(e){return a.raw=function(e,a,o){return i(e,r(o,{position:n(a),warning:t}))},a;function n(n){for(var t=e.offset,r=n.line,i=[];++r&&r in t;)i.push((t[r]||0)+1);return{start:n,indent:i}}function t(n,t,r){3!==r&&e.file.message(n,t)}function a(r,a,o){i(r,{position:n(a),warning:t,text:o,reference:o,textContext:e,referenceContext:e})}}},function(e,n,t){"use strict";e.exports=function(e){return function(n,t){var a,o,s,c,u,l,p=this,f=p.offset,d=[],m=p[e+"Methods"],h=p[e+"Tokenizers"],g=t.line,v=t.column;if(!n)return d;w.now=b,w.file=p.file,x("");for(;n;){for(a=-1,o=m.length,u=!1;++a<o&&(c=m[a],!(s=h[c])||s.onlyAtStart&&!p.atStart||s.notInList&&p.inList||s.notInBlock&&p.inBlock||s.notInLink&&p.inLink||(l=n.length,s.apply(p,[w,n]),!(u=l!==n.length))););u||p.file.fail(new Error("Infinite loop"),w.now())}return p.eof=b(),d;function x(e){for(var n=-1,t=e.indexOf("\n");-1!==t;)g++,n=t,t=e.indexOf("\n",t+1);-1===n?v+=e.length:v=e.length-n,g in f&&(-1!==n?v+=f[g]:v<=f[g]&&(v=f[g]+1))}function b(){var e={line:g,column:v};return e.offset=p.toOffset(e),e}function y(e){this.start=e,this.end=b()}function w(e){var t,a=function(){var e=[],n=g+1;return function(){for(var t=g+1;n<t;)e.push((f[n]||0)+1),n++;return e}}(),o=(t=b(),function(e,n){var r=e.position,i=r?r.start:t,a=[],o=r&&r.end.line,s=t.line;if(e.position=new y(i),r&&n&&r.indent){if(a=r.indent,o<s){for(;++o<s;)a.push((f[o]||0)+1);a.push(t.column)}n=a.concat(n)}return e.position.indent=n||[],e}),s=b();return function(e){n.substring(0,e.length)!==e&&p.file.fail(new Error("Incorrectly eaten value: please report this warning on http://git.io/vg5Ft"),b())}(e),c.reset=u,u.test=l,c.test=l,n=n.substring(e.length),x(e),a=a(),c;function c(e,n){return o(function(e,n){var t=n?n.children:d,a=t[t.length-1];return a&&e.type===a.type&&e.type in r&&i(a)&&i(e)&&(e=r[e.type].call(p,a,e)),e!==a&&t.push(e),p.atStart&&0!==d.length&&p.exitStart(),e}(o(e),n),a)}function u(){var t=c.apply(null,arguments);return g=s.line,v=s.column,n=e+n,t}function l(){var t=o({});return g=s.line,v=s.column,n=e+n,t.position}}}};var r={text:function(e,n){return e.value+=n.value,e},blockquote:function(e,n){if(this.options.commonmark)return n;return e.children=e.children.concat(n.children),e}};function i(e){var n,t;return"text"!==e.type||!e.position||(n=e.position.start,t=e.position.end,n.line!==t.line||t.column-n.column===e.value.length)}},function(e,n,t){"use strict";var r=t(6),i=t(152),a=t(50);e.exports=function(e){var n,t,o=this.options;if(null==e)e={};else{if("object"!=typeof e)throw new Error("Invalid value `"+e+"` for setting `options`");e=r(e)}for(n in a){if(null==(t=e[n])&&(t=o[n]),"blocks"!==n&&"boolean"!=typeof t||"blocks"===n&&"object"!=typeof t)throw new Error("Invalid value `"+t+"` for setting `options."+n+"`");e[n]=t}return this.options=e,this.escape=i(e),this}},function(e,n,t){"use strict";e.exports=o;var r=["\\","`","*","{","}","[","]","(",")","#","+","-",".","!","_",">"],i=r.concat(["~","|"]),a=i.concat(["\n",'"',"$","%","&","'",",","/",":",";","<","=","?","@","^"]);function o(e){var n=e||{};return n.commonmark?a:n.gfm?i:r}o.default=r,o.gfm=i,o.commonmark=a},function(e){e.exports=JSON.parse('["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","pre","section","source","title","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"]')},function(e,n,t){"use strict";var r=t(6),i=t(155);e.exports=function(){var e,n=String(this.file),t={line:1,column:1,offset:0},o=r(t);65279===(n=n.replace(a,"\n")).charCodeAt(0)&&(n=n.slice(1),o.column++,o.offset++);e={type:"root",children:this.tokenizeBlock(n,o),position:{start:t,end:this.eof||r(t)}},this.options.position||i(e,!0);return e};var a=/\r\n|\r/g},function(e,n,t){"use strict";var r=t(20);function i(e){delete e.position}function a(e){e.position=void 0}e.exports=function(e,n){return r(e,n?i:a),e}},function(e,n,t){"use strict";e.exports=i;var r=t(157);function i(e,n,t,i){var o;function s(e,r,c){var u,l=[];return(n&&!o(e,r,c[c.length-1]||null)||!1!==(l=a(t(e,c)))[0])&&e.children&&"skip"!==l[0]&&!1===(u=a(function(e,n){var t,r=i?-1:1,a=(i?e.length:-1)+r;for(;a>-1&&a<e.length;){if(!1===(t=s(e[a],a,n))[0])return t;a="number"==typeof t[1]?t[1]:a+r}}(e.children,c.concat(e))))[0]?u:l}"function"==typeof n&&"function"!=typeof t&&(i=t,t=n,n=null),o=r(n),s(e,null,[])}function a(e){return null!==e&&"object"==typeof e&&"length"in e?e:"number"==typeof e?[!0,e]:[e]}i.CONTINUE=!0,i.SKIP="skip",i.EXIT=!1},function(e,n,t){"use strict";function r(e){if("string"==typeof e)return function(e){return function(n){return Boolean(n&&n.type===e)}}(e);if(null==e)return o;if("object"==typeof e)return("length"in e?a:i)(e);if("function"==typeof e)return e;throw new Error("Expected function, string, or object as test")}function i(e){return function(n){var t;for(t in e)if(n[t]!==e[t])return!1;return!0}}function a(e){var n=function(e){for(var n=[],t=e.length,i=-1;++i<t;)n[i]=r(e[i]);return n}(e),t=n.length;return function(){var e=-1;for(;++e<t;)if(n[e].apply(this,arguments))return!0;return!1}}function o(){return!0}e.exports=r},function(e,n,t){"use strict";var r=t(3);e.exports=function(e,n,t){var i,a,o,s,c=n.charAt(0);if("\n"!==c)return;if(t)return!0;s=1,i=n.length,a=c,o="";for(;s<i&&(c=n.charAt(s),r(c));)o+=c,"\n"===c&&(a+=o,o=""),s++;e(a)}},function(e,n,t){"use strict";var r=t(32),i=t(33);e.exports=function(e,n,t){var r,o,s,c=-1,u=n.length,l="",p="",f="",d="";for(;++c<u;)if(r=n.charAt(c),s)if(s=!1,l+=f,p+=d,f="",d="","\n"===r)f=r,d=r;else for(l+=r,p+=r;++c<u;){if(!(r=n.charAt(c))||"\n"===r){d=r,f=r;break}l+=r,p+=r}else if(" "===r&&n.charAt(c+1)===r&&n.charAt(c+2)===r&&n.charAt(c+3)===r)f+=a,c+=3,s=!0;else if("\t"===r)f+=r,s=!0;else{for(o="";"\t"===r||" "===r;)o+=r,r=n.charAt(++c);if("\n"!==r)break;f+=o+r,d+=r}if(p)return!!t||e(l)({type:"code",lang:null,value:i(p)})};var a=r(" ",4)},function(e,n,t){"use strict";var r=t(33);e.exports=function(e,n,t){var i,a,o,s,c,u,l,p,f,d,m,h=this.options,g=n.length+1,v=0,x="";if(!h.gfm)return;for(;v<g&&(" "===(o=n.charAt(v))||"\t"===o);)x+=o,v++;if(d=v,"~"!==(o=n.charAt(v))&&"`"!==o)return;v++,a=o,i=1,x+=o;for(;v<g&&(o=n.charAt(v))===a;)x+=o,i++,v++;if(i<3)return;for(;v<g&&(" "===(o=n.charAt(v))||"\t"===o);)x+=o,v++;s="",c="";for(;v<g&&"\n"!==(o=n.charAt(v))&&"~"!==o&&"`"!==o;)" "===o||"\t"===o?c+=o:(s+=c+o,c=""),v++;if((o=n.charAt(v))&&"\n"!==o)return;if(t)return!0;(m=e.now()).column+=x.length,m.offset+=x.length,x+=s,s=this.decode.raw(this.unescape(s),m),c&&(x+=c);c="",p="",f="",u="",l="";for(;v<g;)if(o=n.charAt(v),u+=p,l+=f,p="",f="","\n"===o){for(u?(p+=o,f+=o):x+=o,c="",v++;v<g&&" "===(o=n.charAt(v));)c+=o,v++;if(p+=c,f+=c.slice(d),!(c.length>=4)){for(c="";v<g&&(o=n.charAt(v))===a;)c+=o,v++;if(p+=c,f+=c,!(c.length<i)){for(c="";v<g&&(" "===(o=n.charAt(v))||"\t"===o);)p+=o,f+=o,v++;if(!o||"\n"===o)break}}}else u+=o,f+=o,v++;return e(x+=u+p)({type:"code",lang:s||null,value:r(l)})}},function(e,n,t){"use strict";var r=t(12),i=t(34);e.exports=function(e,n,t){var a,o,s,c,u,l,p,f,d,m=this.offset,h=this.blockTokenizers,g=this.interruptBlockquote,v=e.now(),x=v.line,b=n.length,y=[],w=[],k=[],_=0;for(;_<b&&(" "===(o=n.charAt(_))||"\t"===o);)_++;if(">"!==n.charAt(_))return;if(t)return!0;_=0;for(;_<b;){for(c=n.indexOf("\n",_),p=_,f=!1,-1===c&&(c=b);_<b&&(" "===(o=n.charAt(_))||"\t"===o);)_++;if(">"===n.charAt(_)?(_++,f=!0," "===n.charAt(_)&&_++):_=p,u=n.slice(_,c),!f&&!r(u)){_=p;break}if(!f&&(s=n.slice(_),i(g,h,this,[e,s,!0])))break;l=p===_?u:n.slice(p,c),k.push(_-p),y.push(l),w.push(u),_=c+1}_=-1,b=k.length,a=e(y.join("\n"));for(;++_<b;)m[x]=(m[x]||0)+k[_],x++;return d=this.enterBlock(),w=this.tokenizeBlock(w.join("\n"),v),d(),a({type:"blockquote",children:w})}},function(e,n,t){"use strict";e.exports=function(e,n,t){var r,i,a,o=this.options,s=n.length+1,c=-1,u=e.now(),l="",p="";for(;++c<s;){if(" "!==(r=n.charAt(c))&&"\t"!==r){c--;break}l+=r}a=0;for(;++c<=s;){if("#"!==(r=n.charAt(c))){c--;break}l+=r,a++}if(a>6)return;if(!a||!o.pedantic&&"#"===n.charAt(c+1))return;s=n.length+1,i="";for(;++c<s;){if(" "!==(r=n.charAt(c))&&"\t"!==r){c--;break}i+=r}if(!o.pedantic&&0===i.length&&r&&"\n"!==r)return;if(t)return!0;l+=i,i="",p="";for(;++c<s&&(r=n.charAt(c))&&"\n"!==r;)if(" "===r||"\t"===r||"#"===r){for(;" "===r||"\t"===r;)i+=r,r=n.charAt(++c);for(;"#"===r;)i+=r,r=n.charAt(++c);for(;" "===r||"\t"===r;)i+=r,r=n.charAt(++c);c--}else p+=i+r,i="";return u.column+=l.length,u.offset+=l.length,e(l+=p+i)({type:"heading",depth:a,children:this.tokenizeInline(p,u)})}},function(e,n,t){"use strict";e.exports=function(e,n,t){var r,i,a,o,s=-1,c=n.length+1,u="";for(;++s<c&&("\t"===(r=n.charAt(s))||" "===r);)u+=r;if("*"!==r&&"-"!==r&&"_"!==r)return;i=r,u+=r,a=1,o="";for(;++s<c;)if((r=n.charAt(s))===i)a++,u+=o+i,o="";else{if(" "!==r)return a>=3&&(!r||"\n"===r)?(u+=o,!!t||e(u)({type:"thematicBreak"})):void 0;o+=r}}},function(e,n,t){"use strict";var r=t(12),i=t(32),a=t(19),o=t(51),s=t(165),c=t(34);e.exports=function(e,n,t){var i,o,s,u,l,p,f,d,x,b,y,w,k,_,S,E,A,$,C,O,M,j,F,R,T=this.options.commonmark,q=this.options.pedantic,L=this.blockTokenizers,N=this.interruptList,P=0,D=n.length,I=null,z=0;for(;P<D;){if("\t"===(u=n.charAt(P)))z+=4-z%4;else{if(" "!==u)break;z++}P++}if(z>=4)return;if(u=n.charAt(P),i=T?g:h,!0===m[u])l=u,s=!1;else{for(s=!0,o="";P<D&&(u=n.charAt(P),a(u));)o+=u,P++;if(u=n.charAt(P),!o||!0!==i[u])return;I=parseInt(o,10),l=u}if(" "!==(u=n.charAt(++P))&&"\t"!==u)return;if(t)return!0;P=0,_=[],S=[],E=[];for(;P<D;){for(p=n.indexOf("\n",P),f=P,d=!1,R=!1,-1===p&&(p=D),F=P+4,z=0;P<D;){if("\t"===(u=n.charAt(P)))z+=4-z%4;else{if(" "!==u)break;z++}P++}if(z>=4&&(R=!0),A&&z>=A.indent&&(R=!0),u=n.charAt(P),x=null,!R){if(!0===m[u])x=u,P++,z++;else{for(o="";P<D&&(u=n.charAt(P),a(u));)o+=u,P++;u=n.charAt(P),P++,o&&!0===i[u]&&(x=u,z+=o.length+1)}if(x)if("\t"===(u=n.charAt(P)))z+=4-z%4,P++;else if(" "===u){for(F=P+4;P<F&&" "===n.charAt(P);)P++,z++;P===F&&" "===n.charAt(P)&&(P-=3,z-=3)}else"\n"!==u&&""!==u&&(x=null)}if(x){if(!q&&l!==x)break;d=!0}else T||R||" "!==n.charAt(f)?T&&A&&(R=z>=A.indent||z>4):R=!0,d=!1,P=f;if(y=n.slice(f,p),b=f===P?y:n.slice(P,p),("*"===x||"_"===x||"-"===x)&&L.thematicBreak.call(this,e,y,!0))break;if(w=k,k=!r(b).length,R&&A)A.value=A.value.concat(E,y),S=S.concat(E,y),E=[];else if(d)0!==E.length&&(A.value.push(""),A.trail=E.concat()),A={value:[y],indent:z,trail:[]},_.push(A),S=S.concat(E,y),E=[];else if(k){if(w)break;E.push(y)}else{if(w)break;if(c(N,L,this,[e,y,!0]))break;A.value=A.value.concat(E,y),S=S.concat(E,y),E=[]}P=p+1}M=e(S.join("\n")).reset({type:"list",ordered:s,start:I,loose:null,children:[]}),$=this.enterList(),C=this.enterBlock(),O=!1,P=-1,D=_.length;for(;++P<D;)A=_[P].value.join("\n"),j=e.now(),(A=e(A)(v(this,A,j),M)).loose&&(O=!0),A=_[P].trail.join("\n"),P!==D-1&&(A+="\n"),e(A);return $(),C(),M.loose=O,M};var u=/\n\n(?!\s*$)/,l=/^\[([ \t]|x|X)][ \t]/,p=/^([ \t]*)([*+-]|\d+[.)])( {1,4}(?! )| |\t|$|(?=\n))([^\n]*)/,f=/^([ \t]*)([*+-]|\d+[.)])([ \t]+)/,d=/^( {1,4}|\t)?/gm,m={"*":!0,"+":!0,"-":!0},h={".":!0},g={};function v(e,n,t){var r,i,a=e.offset,o=e.options.pedantic?x:b,s=null;return n=o.apply(null,arguments),e.options.gfm&&(r=n.match(l))&&(i=r[0].length,s="x"===r[1].toLowerCase(),a[t.line]+=i,n=n.slice(i)),{type:"listItem",loose:u.test(n)||"\n"===n.charAt(n.length-1),checked:s,children:e.tokenizeBlock(n,t)}}function x(e,n,t){var r=e.offset,i=t.line;return n=n.replace(f,a),i=t.line,n.replace(d,a);function a(e){return r[i]=(r[i]||0)+e.length,i++,""}}function b(e,n,t){var r,a,c,u,l,f,d,m=e.offset,h=t.line;for(u=(n=n.replace(p,(function(e,n,t,o,s){a=n+t+o,c=s,Number(t)<10&&a.length%2==1&&(t=" "+t);return(r=n+i(" ",t.length)+o)+c}))).split("\n"),(l=s(n,o(r).indent).split("\n"))[0]=c,m[h]=(m[h]||0)+a.length,h++,f=0,d=u.length;++f<d;)m[h]=(m[h]||0)+u[f].length-l[f].length,h++;return l.join("\n")}g["."]=!0,g[")"]=!0},function(e,n,t){"use strict";var r=t(12),i=t(32),a=t(51);e.exports=function(e,n){var t,o,s,c,u=e.split("\n"),l=u.length+1,p=1/0,f=[];u.unshift(i(" ",n)+"!");for(;l--;)if(o=a(u[l]),f[l]=o.stops,0!==r(u[l]).length){if(!o.indent){p=1/0;break}o.indent>0&&o.indent<p&&(p=o.indent)}if(p!==1/0)for(l=u.length;l--;){for(s=f[l],t=p;t&&!(t in s);)t--;c=0!==r(u[l]).length&&p&&t!==p?"\t":"",u[l]=c+u[l].slice(t in s?s[t]+1:0)}return u.shift(),u.join("\n")}},function(e,n,t){"use strict";e.exports=function(e,n,t){var i,a,o,s,c,u=e.now(),l=n.length,p=-1,f="";for(;++p<l;){if(" "!==(o=n.charAt(p))||p>=3){p--;break}f+=o}i="",a="";for(;++p<l;){if("\n"===(o=n.charAt(p))){p--;break}" "===o||"\t"===o?a+=o:(i+=a+o,a="")}if(u.column+=f.length,u.offset+=f.length,f+=i+a,o=n.charAt(++p),s=n.charAt(++p),"\n"!==o||!r[s])return;f+=o,a=s,c=r[s];for(;++p<l;){if((o=n.charAt(p))!==s){if("\n"!==o)return;p--;break}a+=o}if(t)return!0;return e(f+a)({type:"heading",depth:c,children:this.tokenizeInline(i,u)})};var r={};r["="]=1,r["-"]=2},function(e,n,t){"use strict";var r=t(52).openCloseTag;e.exports=function(e,n,t){var i,a,o,s,c,u,l,p=this.options.blocks,f=n.length,d=0,m=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Za-z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+p.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(r.source+"\\s*$"),/^$/,!1]];for(;d<f&&("\t"===(s=n.charAt(d))||" "===s);)d++;if("<"!==n.charAt(d))return;i=-1===(i=n.indexOf("\n",d+1))?f:i,a=n.slice(d,i),o=-1,c=m.length;for(;++o<c;)if(m[o][0].test(a)){u=m[o];break}if(!u)return;if(t)return u[2];if(d=i,!u[1].test(a))for(;d<f;){if(i=-1===(i=n.indexOf("\n",d+1))?f:i,a=n.slice(d+1,i),u[1].test(a)){a&&(d=i);break}d=i}return l=n.slice(0,d),e(l)({type:"html",value:l})}},function(e,n,t){"use strict";var r=t(3),i=t(35);e.exports=o,o.notInList=!0,o.notInBlock=!0;var a=/^( {4}|\t)?/gm;function o(e,n,t){var o,s,c,u,l,p,f,d,m,h,g,v,x=this.offset;if(this.options.footnotes){for(o=0,s=n.length,c="",u=e.now(),l=u.line;o<s&&(m=n.charAt(o),r(m));)c+=m,o++;if("["===n.charAt(o)&&"^"===n.charAt(o+1)){for(o=(c+="[^").length,f="";o<s&&"]"!==(m=n.charAt(o));)"\\"===m&&(f+=m,o++,m=n.charAt(o)),f+=m,o++;if(f&&"]"===n.charAt(o)&&":"===n.charAt(o+1)){if(t)return!0;for(h=i(f),o=(c+=f+"]:").length;o<s&&("\t"===(m=n.charAt(o))||" "===m);)c+=m,o++;for(u.column+=c.length,u.offset+=c.length,f="",p="",d="";o<s;){if("\n"===(m=n.charAt(o))){for(d=m,o++;o<s&&"\n"===(m=n.charAt(o));)d+=m,o++;for(f+=d,d="";o<s&&" "===(m=n.charAt(o));)d+=m,o++;if(0===d.length)break;f+=d}f&&(p+=f,f=""),p+=m,o++}return c+=p,p=p.replace(a,(function(e){return x[l]=(x[l]||0)+e.length,l++,""})),g=e(c),v=this.enterBlock(),p=this.tokenizeBlock(p,u),v(),g({type:"footnoteDefinition",identifier:h,children:p})}}}}},function(e,n,t){"use strict";e.exports=function(e){return String(e).replace(/\s+/g," ")}},function(e,n,t){"use strict";var r=t(3),i=t(35);e.exports=a,a.notInList=!0,a.notInBlock=!0;function a(e,n,t){for(var r,a,c,u,l,p,f,d,m=this.options.commonmark,h=0,g=n.length,v="";h<g&&(" "===(u=n.charAt(h))||"\t"===u);)v+=u,h++;if("["===(u=n.charAt(h))){for(h++,v+=u,c="";h<g&&"]"!==(u=n.charAt(h));)"\\"===u&&(c+=u,h++,u=n.charAt(h)),c+=u,h++;if(c&&"]"===n.charAt(h)&&":"===n.charAt(h+1)){for(p=c,h=(v+=c+"]:").length,c="";h<g&&("\t"===(u=n.charAt(h))||" "===u||"\n"===u);)v+=u,h++;if(c="",r=v,"<"===(u=n.charAt(h))){for(h++;h<g&&o(u=n.charAt(h));)c+=u,h++;if((u=n.charAt(h))===o.delimiter)v+="<"+c+u,h++;else{if(m)return;h-=c.length+1,c=""}}if(!c){for(;h<g&&s(u=n.charAt(h));)c+=u,h++;v+=c}if(c){for(f=c,c="";h<g&&("\t"===(u=n.charAt(h))||" "===u||"\n"===u);)c+=u,h++;if(l=null,'"'===(u=n.charAt(h))?l='"':"'"===u?l="'":"("===u&&(l=")"),l){if(!c)return;for(h=(v+=c+u).length,c="";h<g&&(u=n.charAt(h))!==l;){if("\n"===u){if(h++,"\n"===(u=n.charAt(h))||u===l)return;c+="\n"}c+=u,h++}if((u=n.charAt(h))!==l)return;a=v,v+=c+u,h++,d=c,c=""}else c="",h=v.length;for(;h<g&&("\t"===(u=n.charAt(h))||" "===u);)v+=u,h++;return(u=n.charAt(h))&&"\n"!==u?void 0:!!t||(r=e(r).test().end,f=this.decode.raw(this.unescape(f),r,{nonTerminated:!1}),d&&(a=e(a).test().end,d=this.decode.raw(this.unescape(d),a)),e(v)({type:"definition",identifier:i(p),title:d||null,url:f}))}}}}function o(e){return">"!==e&&"["!==e&&"]"!==e}function s(e){return"["!==e&&"]"!==e&&!r(e)}o.delimiter=">"},function(e,n,t){"use strict";var r=t(3);e.exports=function(e,n,t){var i,a,o,s,c,u,l,p,f,d,m,h,g,v,x,b,y,w,k,_,S,E,A,$;if(!this.options.gfm)return;i=0,w=0,u=n.length+1,l=[];for(;i<u;){if(E=n.indexOf("\n",i),A=n.indexOf("|",i+1),-1===E&&(E=n.length),-1===A||A>E){if(w<2)return;break}l.push(n.slice(i,E)),w++,i=E+1}s=l.join("\n"),a=l.splice(1,1)[0]||[],i=0,u=a.length,w--,o=!1,m=[];for(;i<u;){if("|"===(f=a.charAt(i))){if(d=null,!1===o){if(!1===$)return}else m.push(o),o=!1;$=!1}else if("-"===f)d=!0,o=o||null;else if(":"===f)o="left"===o?"center":d&&null===o?"right":"left";else if(!r(f))return;i++}!1!==o&&m.push(o);if(m.length<1)return;if(t)return!0;y=-1,_=[],S=e(s).reset({type:"table",align:m,children:_});for(;++y<w;){for(k=l[y],c={type:"tableRow",children:[]},y&&e("\n"),e(k).reset(c,S),u=k.length+1,i=0,p="",h="",g=!0,v=null,x=null;i<u;)if("\t"!==(f=k.charAt(i))&&" "!==f){if(""===f||"|"===f)if(g)e(f);else{if(f&&x){p+=f,i++;continue}!h&&!f||g||(s=h,p.length>1&&(f?(s+=p.slice(0,p.length-1),p=p.charAt(p.length-1)):(s+=p,p="")),b=e.now(),e(s)({type:"tableCell",children:this.tokenizeInline(h,b)},c)),e(p+f),p="",h=""}else if(p&&(h+=p,p=""),h+=f,"\\"===f&&i!==u-2&&(h+=k.charAt(i+1),i++),"`"===f){for(v=1;k.charAt(i+1)===f;)h+=f,i++,v++;x?v>=x&&(x=0):x=v}g=!1,i++}else h?p+=f:e(f),i++;y||e("\n"+a)}return S}},function(e,n,t){"use strict";var r=t(12),i=t(19),a=t(33),o=t(34);e.exports=function(e,n,t){var s,c,u,l,p,f=this.options,d=f.commonmark,m=f.gfm,h=this.blockTokenizers,g=this.interruptParagraph,v=n.indexOf("\n"),x=n.length;for(;v<x;){if(-1===v){v=x;break}if("\n"===n.charAt(v+1))break;if(d){for(l=0,s=v+1;s<x;){if("\t"===(u=n.charAt(s))){l=4;break}if(" "!==u)break;l++,s++}if(l>=4){v=n.indexOf("\n",v+1);continue}}if(c=n.slice(v+1),o(g,h,this,[e,c,!0]))break;if(h.list.call(this,e,c,!0)&&(this.inList||d||m&&!i(r.left(c).charAt(0))))break;if(s=v,-1!==(v=n.indexOf("\n",v+1))&&""===r(n.slice(s,v))){v=s;break}}if(c=n.slice(0,v),""===r(c))return e(c),null;if(t)return!0;return p=e.now(),c=a(c),e(c)({type:"paragraph",children:this.tokenizeInline(c,p)})}},function(e,n,t){"use strict";var r=t(174);function i(e,n,t){var r,i;if("\\"===n.charAt(0)&&(r=n.charAt(1),-1!==this.escape.indexOf(r)))return!!t||(i="\n"===r?{type:"break"}:{type:"text",value:r},e("\\"+r)(i))}e.exports=i,i.locator=r},function(e,n,t){"use strict";e.exports=function(e,n){return e.indexOf("\\",n)}},function(e,n,t){"use strict";var r=t(3),i=t(18),a=t(53);e.exports=s,s.locator=a,s.notInLink=!0;var o="mailto:".length;function s(e,n,t){var a,s,c,u,l,p,f,d,m,h,g;if("<"===n.charAt(0)){for(this,a="",s=n.length,c=0,u="",p=!1,f="",c++,a="<";c<s&&(l=n.charAt(c),!(r(l)||">"===l||"@"===l||":"===l&&"/"===n.charAt(c+1)));)u+=l,c++;if(u){if(f+=u,u="",f+=l=n.charAt(c),c++,"@"===l)p=!0;else{if(":"!==l||"/"!==n.charAt(c+1))return;f+="/",c++}for(;c<s&&(l=n.charAt(c),!r(l)&&">"!==l);)u+=l,c++;if(l=n.charAt(c),u&&">"===l)return!!t||(m=f+=u,a+=f+l,(d=e.now()).column++,d.offset++,p&&("mailto:"===f.slice(0,o).toLowerCase()?(m=m.substr(o),d.column+=o,d.offset+=o):f="mailto:"+f),h=this.inlineTokenizers,this.inlineTokenizers={text:h.text},g=this.enterLink(),m=this.tokenizeInline(m,d),this.inlineTokenizers=h,g(),e(a)({type:"link",title:null,url:i(f,{nonTerminated:!1}),children:m}))}}}},function(e,n,t){"use strict";var r=t(18),i=t(3),a=t(177);e.exports=c,c.locator=a,c.notInLink=!0;var o=["http://","https://","mailto:"],s=o.length;function c(e,n,t){var a,c,u,l,p,f,d,m,h,g,v,x;if(this.options.gfm){for(a="",l=-1,m=s;++l<m;)if(f=o[l],(d=n.slice(0,f.length)).toLowerCase()===f){a=d;break}if(a){for(l=a.length,m=n.length,h="",g=0;l<m&&(u=n.charAt(l),!i(u)&&"<"!==u)&&("."!==u&&","!==u&&":"!==u&&";"!==u&&'"'!==u&&"'"!==u&&")"!==u&&"]"!==u||(v=n.charAt(l+1))&&!i(v))&&("("!==u&&"["!==u||g++,")"!==u&&"]"!==u||!(--g<0));)h+=u,l++;if(h){if(c=a+=h,"mailto:"===f){if(-1===(p=h.indexOf("@"))||p===m-1)return;c=c.substr("mailto:".length)}return!!t||(x=this.enterLink(),c=this.tokenizeInline(c,e.now()),x(),e(a)({type:"link",title:null,url:r(a,{nonTerminated:!1}),children:c}))}}}}},function(e,n,t){"use strict";e.exports=function(e,n){var t,i=r.length,a=-1,o=-1;if(!this.options.gfm)return-1;for(;++a<i;)-1!==(t=e.indexOf(r[a],n))&&(t<o||-1===o)&&(o=t);return o};var r=["https://","http://","mailto:"]},function(e,n,t){"use strict";var r=t(49),i=t(53),a=t(52).tag;e.exports=c,c.locator=i;var o=/^<a /i,s=/^<\/a>/i;function c(e,n,t){var i,c,u=n.length;if(!("<"!==n.charAt(0)||u<3)&&(i=n.charAt(1),(r(i)||"?"===i||"!"===i||"/"===i)&&(c=n.match(a))))return!!t||(c=c[0],!this.inLink&&o.test(c)?this.inLink=!0:this.inLink&&s.test(c)&&(this.inLink=!1),e(c)({type:"html",value:c}))}},function(e,n,t){"use strict";var r=t(3),i=t(54);e.exports=c,c.locator=i;var a={}.hasOwnProperty,o={'"':'"',"'":"'"},s={};function c(e,n,t){var i,c,u,l,p,f,d,m,h,g,v,x,b,y,w,k,_,S,E,A="",$=0,C=n.charAt(0),O=this.options.pedantic,M=this.options.commonmark,j=this.options.gfm;if("!"===C&&(h=!0,A=C,C=n.charAt(++$)),"["===C&&(h||!this.inLink)){for(A+=C,w="",$++,x=n.length,y=0,(_=e.now()).column+=$,_.offset+=$;$<x;){if(f=C=n.charAt($),"`"===C){for(c=1;"`"===n.charAt($+1);)f+=C,$++,c++;u?c>=u&&(u=0):u=c}else if("\\"===C)$++,f+=n.charAt($);else if(u&&!j||"["!==C){if((!u||j)&&"]"===C){if(!y){if(!O)for(;$<x&&(C=n.charAt($+1),r(C));)f+=C,$++;if("("!==n.charAt($+1))return;f+="(",i=!0,$++;break}y--}}else y++;w+=f,f="",$++}if(i){for(g=w,A+=w+f,$++;$<x&&(C=n.charAt($),r(C));)A+=C,$++;if(C=n.charAt($),m=M?s:o,w="",l=A,"<"===C){for($++,l+="<";$<x&&">"!==(C=n.charAt($));){if(M&&"\n"===C)return;w+=C,$++}if(">"!==n.charAt($))return;A+="<"+w+">",k=w,$++}else{for(C=null,f="";$<x&&(C=n.charAt($),!f||!a.call(m,C));){if(r(C)){if(!O)break;f+=C}else{if("("===C)y++;else if(")"===C){if(0===y)break;y--}w+=f,f="","\\"===C&&(w+="\\",C=n.charAt(++$)),w+=C}$++}k=w,$=(A+=w).length}for(w="";$<x&&(C=n.charAt($),r(C));)w+=C,$++;if(C=n.charAt($),A+=w,w&&a.call(m,C))if($++,A+=C,w="",v=m[C],p=A,M){for(;$<x&&(C=n.charAt($))!==v;)"\\"===C&&(w+="\\",C=n.charAt(++$)),$++,w+=C;if((C=n.charAt($))!==v)return;for(b=w,A+=w+C,$++;$<x&&(C=n.charAt($),r(C));)A+=C,$++}else for(f="";$<x;){if((C=n.charAt($))===v)d&&(w+=v+f,f=""),d=!0;else if(d){if(")"===C){A+=w+v+f,b=w;break}r(C)?f+=C:(w+=v+f+C,f="",d=!1)}else w+=C;$++}if(")"===n.charAt($))return!!t||(A+=")",k=this.decode.raw(this.unescape(k),e(l).test().end,{nonTerminated:!1}),b&&(p=e(p).test().end,b=this.decode.raw(this.unescape(b),p)),E={type:h?"image":"link",title:b||null,url:k},h?E.alt=this.decode.raw(this.unescape(g),_)||null:(S=this.enterLink(),E.children=this.tokenizeInline(g,_),S()),e(A)(E))}}}s['"']='"',s["'"]="'",s["("]=")"},function(e,n,t){"use strict";var r=t(3),i=t(54),a=t(35);e.exports=o,o.locator=i;function o(e,n,t){var i,o,s,c,u,l,p,f,d=n.charAt(0),m=0,h=n.length,g="",v="",x="link",b="shortcut";if("!"===d&&(x="image",v=d,d=n.charAt(++m)),"["===d){if(m++,v+=d,l="",this.options.footnotes&&"^"===n.charAt(m)){if("image"===x)return;v+="^",m++,x="footnote"}for(f=0;m<h;){if("["===(d=n.charAt(m)))p=!0,f++;else if("]"===d){if(!f)break;f--}"\\"===d&&(l+="\\",d=n.charAt(++m)),l+=d,m++}if(g=l,i=l,"]"===(d=n.charAt(m))){for(m++,g+=d,l="";m<h&&(d=n.charAt(m),r(d));)l+=d,m++;if(d=n.charAt(m),"footnote"!==x&&"["===d){for(o="",l+=d,m++;m<h&&"["!==(d=n.charAt(m))&&"]"!==d;)"\\"===d&&(o+="\\",d=n.charAt(++m)),o+=d,m++;"]"===(d=n.charAt(m))?(b=o?"full":"collapsed",l+=o+d,m++):o="",g+=l,l=""}else{if(!i)return;o=i}if("full"===b||!p)return g=v+g,"link"===x&&this.inLink?null:!!t||("footnote"===x&&-1!==i.indexOf(" ")?e(g)({type:"footnote",children:this.tokenizeInline(i,e.now())}):((s=e.now()).column+=v.length,s.offset+=v.length,c={type:x+"Reference",identifier:a(o="full"===b?o:i)},"link"!==x&&"image"!==x||(c.referenceType=b),"link"===x?(u=this.enterLink(),c.children=this.tokenizeInline(i,s),u()):"image"===x&&(c.alt=this.decode.raw(this.unescape(i),s)||null),e(g)(c)))}}}},function(e,n,t){"use strict";var r=t(12),i=t(3),a=t(182);e.exports=o,o.locator=a;function o(e,n,t){var a,o,s,c,u,l,p,f=0,d=n.charAt(f);if(!("*"!==d&&"_"!==d||n.charAt(++f)!==d||(o=this.options.pedantic,u=(s=d)+s,l=n.length,f++,c="",d="",o&&i(n.charAt(f)))))for(;f<l;){if(p=d,!((d=n.charAt(f))!==s||n.charAt(f+1)!==s||o&&i(p))&&(d=n.charAt(f+2))!==s){if(!r(c))return;return!!t||((a=e.now()).column+=2,a.offset+=2,e(u+c+u)({type:"strong",children:this.tokenizeInline(c,a)}))}o||"\\"!==d||(c+=d,d=n.charAt(++f)),c+=d,f++}}},function(e,n,t){"use strict";e.exports=function(e,n){var t=e.indexOf("**",n),r=e.indexOf("__",n);if(-1===r)return t;if(-1===t)return r;return r<t?r:t}},function(e,n,t){"use strict";var r=t(12),i=t(184),a=t(3),o=t(185);e.exports=s,s.locator=o;function s(e,n,t){var o,s,c,u,l,p,f,d=0,m=n.charAt(d);if(!("*"!==m&&"_"!==m||(s=this.options.pedantic,l=m,c=m,p=n.length,d++,u="",m="",s&&a(n.charAt(d)))))for(;d<p;){if(f=m,!((m=n.charAt(d))!==c||s&&a(f))){if((m=n.charAt(++d))!==c){if(!r(u)||f===c)return;if(!s&&"_"===c&&i(m)){u+=c;continue}return!!t||((o=e.now()).column++,o.offset++,e(l+u+c)({type:"emphasis",children:this.tokenizeInline(u,o)}))}u+=c}s||"\\"!==m||(u+=m,m=n.charAt(++d)),u+=m,d++}}},function(e,n,t){"use strict";e.exports=function(e){return i.test("number"==typeof e?r(e):e.charAt(0))};var r=String.fromCharCode,i=/\w/},function(e,n,t){"use strict";e.exports=function(e,n){var t=e.indexOf("*",n),r=e.indexOf("_",n);if(-1===r)return t;if(-1===t)return r;return r<t?r:t}},function(e,n,t){"use strict";var r=t(3),i=t(187);e.exports=a,a.locator=i;function a(e,n,t){var i,a,o,s="",c="",u="",l="";if(this.options.gfm&&"~"===n.charAt(0)&&"~"===n.charAt(1)&&!r(n.charAt(2)))for(i=1,a=n.length,(o=e.now()).column+=2,o.offset+=2;++i<a;){if(!("~"!==(s=n.charAt(i))||"~"!==c||u&&r(u)))return!!t||e("~~"+l+"~~")({type:"delete",children:this.tokenizeInline(l,o)});l+=c,u=c,c=s}}},function(e,n,t){"use strict";e.exports=function(e,n){return e.indexOf("~~",n)}},function(e,n,t){"use strict";var r=t(3),i=t(189);e.exports=a,a.locator=i;function a(e,n,t){for(var i,a,o,s,c,u,l,p,f=n.length,d=0,m="",h="";d<f&&"`"===n.charAt(d);)m+="`",d++;if(m){for(c=m,s=d,m="",p=n.charAt(d),o=0;d<f;){if(u=p,p=n.charAt(d+1),"`"===u?(o++,h+=u):(o=0,m+=u),o&&"`"!==p){if(o===s){c+=m+h,l=!0;break}m+=h,h=""}d++}if(!l){if(s%2!=0)return;m=""}if(t)return!0;for(i="",a="",f=m.length,d=-1;++d<f;)u=m.charAt(d),r(u)?a+=u:(a&&(i&&(i+=a),a=""),i+=u);return e(c)({type:"inlineCode",value:i})}}},function(e,n,t){"use strict";e.exports=function(e,n){return e.indexOf("`",n)}},function(e,n,t){"use strict";var r=t(191);e.exports=i,i.locator=r;function i(e,n,t){for(var r,i=n.length,a=-1,o="";++a<i;){if("\n"===(r=n.charAt(a))){if(a<2)return;return!!t||e(o+=r)({type:"break"})}if(" "!==r)return;o+=r}}},function(e,n,t){"use strict";e.exports=function(e,n){var t=e.indexOf("\n",n);for(;t>n&&" "===e.charAt(t-1);)t--;return t}},function(e,n,t){"use strict";e.exports=function(e,n,t){var r,i,a,o,s,c,u,l,p,f;if(t)return!0;r=this.inlineMethods,o=r.length,i=this.inlineTokenizers,a=-1,p=n.length;for(;++a<o;)"text"!==(l=r[a])&&i[l]&&((u=i[l].locator)||e.file.fail("Missing locator: `"+l+"`"),-1!==(c=u.call(this,n,1))&&c<p&&(p=c));s=n.slice(0,p),f=e.now(),this.decode(s,f,(function(n,t,r){e(r||n)({type:"text",value:n})}))}},function(e,n,t){e.exports=t(194)()},function(e,n,t){"use strict";var r=t(195);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,n,t,i,a,o){if(o!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function n(){return e}e.isRequired=e;var t={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:n,element:e,elementType:e,instanceOf:n,node:e,objectOf:n,oneOf:n,oneOfType:n,shape:n,exact:n,checkPropTypes:a,resetWarningCache:i};return t.PropTypes=t,t}},function(e,n,t){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,n,t){var r=t(197);e.exports=function(){return function(e){return r(e,"list",(function(e,n){var t,r,i=0;for(t=0,r=n.length;t<r;t++)"list"===n[t].type&&(i+=1);for(t=0,r=e.children.length;t<r;t++){var a=e.children[t];a.index=t,a.ordered=e.ordered}e.depth=i})),e}}},function(e,n,t){"use strict";e.exports=function(e,n,t){var r=[];"function"==typeof n&&(t=n,n=null);function i(e){var a;return n&&e.type!==n||(a=t(e,r.concat())),e.children&&!1!==a?function(e,n){var t,a=e.length,o=-1;r.push(n);for(;++o<a;)if((t=e[o])&&!1===i(t))return!1;return r.pop(),!0}(e.children,e):a}i(e)}},function(e,n,t){"use strict";var r=t(20),i=/^<(area|base|br|col|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)\s*\/?>$/i,a=/^<(\/?)([a-z]+)\s*>$/;e.exports=function(e){var n,t;return r(e,"html",(function(e,r,o){t!==o&&(n=[],t=o);var s=function(e){var n=e.value.match(i);return!!n&&n[1]}(e);if(s)return o.children.splice(r,1,{type:"virtualHtml",tag:s,position:e.position}),!0;var c=function(e,n){var t=e.value.match(a);return!!t&&{tag:t[2],opening:!t[1],node:e}}(e);if(!c)return!0;var u=function(e,n){var t=e.length;for(;t--;)if(e[t].tag===n)return e.splice(t,1)[0];return!1}(n,c.tag);return u?o.children.splice(r,0,function(e,n,t){var r=t.children.indexOf(e.node),i=t.children.indexOf(n.node),a=t.children.splice(r,i-r+1).slice(1,-1);return{type:"virtualHtml",children:a,tag:e.tag,position:{start:e.node.position.start,end:n.node.position.end,indent:[]}}}(c,u,o)):c.opening||n.push(c),!0}),!0),e}},function(e,n,t){"use strict";var r=t(20);function i(e,n,t,r){if("remove"===r)t.children.splice(n,1);else if("unwrap"===r){var i=[n,1];e.children&&(i=i.concat(e.children)),Array.prototype.splice.apply(t.children,i)}}n.ofType=function(e,n){return function(n){return e.forEach((function(e){return r(n,e,t,!0)})),n};function t(e,t,r){r&&i(e,t,r,n)}},n.ifNotMatch=function(e,n){return function(e){return r(e,t,!0),e};function t(t,r,a){a&&!e(t,r,a)&&i(t,r,a,n)}}},function(e,n,t){"use strict";var r=t(0),i=t(6),a=t(201),o={start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function s(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,u=n.renderers[e.type];void 0===e.position&&(e.position=t.node&&t.node.position||o);var l=e.position.start,p=[e.type,l.line,l.column,i].join("-");if(!a.isValidElementType(u))throw new Error("Renderer for type `".concat(e.type,"` not defined or is not renderable"));var f=c(e,p,n,u,t,i);return r.createElement(u,f,f.children||d()||void 0);function d(){return e.children&&e.children.map((function(t,r){return s(t,n,{node:e,props:f},r)}))}}function c(e,n,t,a,o,c){var l,p={key:n},f="string"==typeof a;t.sourcePos&&e.position&&(p["data-sourcepos"]=[(l=e.position).start.line,":",l.start.column,"-",l.end.line,":",l.end.column].map(String).join("")),t.rawSourcePos&&!f&&(p.sourcePosition=e.position),t.includeNodeIndex&&o.node&&o.node.children&&!f&&(p.index=o.node.children.indexOf(e),p.parentChildCount=o.node.children.length);var d=null!==e.identifier&&void 0!==e.identifier?t.definitions[e.identifier]||{}:null;switch(e.type){case"root":u(p,{className:t.className});break;case"text":p.nodeKey=n,p.children=e.value;break;case"heading":p.level=e.depth;break;case"list":p.start=e.start,p.ordered=e.ordered,p.tight=!e.loose,p.depth=e.depth;break;case"listItem":p.checked=e.checked,p.tight=!e.loose,p.ordered=e.ordered,p.index=e.index,p.children=function(e,n){if(e.loose)return e.children;if(n.node&&e.index>0&&n.node.children[e.index-1].loose)return e.children;return function(e){return e.children.reduce((function(e,n){return e.concat("paragraph"===n.type?n.children||[]:[n])}),[])}(e)}(e,o).map((function(n,r){return s(n,t,{node:e,props:p},r)}));break;case"definition":u(p,{identifier:e.identifier,title:e.title,url:e.url});break;case"code":u(p,{language:e.lang&&e.lang.split(/\s/,1)[0]});break;case"inlineCode":p.children=e.value,p.inline=!0;break;case"link":u(p,{title:e.title||void 0,target:"function"==typeof t.linkTarget?t.linkTarget(e.url,e.children,e.title):t.linkTarget,href:t.transformLinkUri?t.transformLinkUri(e.url,e.children,e.title):e.url});break;case"image":u(p,{alt:e.alt||void 0,title:e.title||void 0,src:t.transformImageUri?t.transformImageUri(e.url,e.children,e.title,e.alt):e.url});break;case"linkReference":u(p,i(d,{href:t.transformLinkUri?t.transformLinkUri(d.href):d.href}));break;case"imageReference":u(p,{src:t.transformImageUri&&d.href?t.transformImageUri(d.href,e.children,d.title,e.alt):d.href,title:d.title||void 0,alt:e.alt||void 0});break;case"table":case"tableHead":case"tableBody":p.columnAlignment=e.align;break;case"tableRow":p.isHeader="tableHead"===o.node.type,p.columnAlignment=o.props.columnAlignment;break;case"tableCell":u(p,{isHeader:o.props.isHeader,align:o.props.columnAlignment[c]});break;case"virtualHtml":p.tag=e.tag;break;case"html":p.isBlock=e.position.start.line!==e.position.end.line,p.escapeHtml=t.escapeHtml,p.skipHtml=t.skipHtml;break;case"parsedHtml":var m;e.children&&(m=e.children.map((function(n,r){return s(n,t,{node:e,props:p},r)}))),p.escapeHtml=t.escapeHtml,p.skipHtml=t.skipHtml,p.element=function(e,n){var t=e.element;if(Array.isArray(t)){var i=r.Fragment||"div";return r.createElement(i,null,t)}if(t.props.children||n){var a=r.Children.toArray(t.props.children).concat(n);return r.cloneElement(t,null,a)}return r.cloneElement(t,null)}(e,m);break;default:u(p,i(e,{type:void 0,position:void 0,children:void 0}))}return!f&&e.value&&(p.value=e.value),p}function u(e,n){for(var t in n)void 0!==n[t]&&(e[t]=n[t])}e.exports=s},function(e,n,t){"use strict";e.exports=t(202)},function(e,n,t){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,c=r?Symbol.for("react.profiler"):60114,u=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,p=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,d=r?Symbol.for("react.forward_ref"):60112,m=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,g=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,x=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,y=r?Symbol.for("react.responder"):60118,w=r?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var n=e.$$typeof;switch(n){case i:switch(e=e.type){case p:case f:case o:case c:case s:case m:return e;default:switch(e=e&&e.$$typeof){case l:case d:case v:case g:case u:return e;default:return n}}case a:return n}}}function _(e){return k(e)===f}n.AsyncMode=p,n.ConcurrentMode=f,n.ContextConsumer=l,n.ContextProvider=u,n.Element=i,n.ForwardRef=d,n.Fragment=o,n.Lazy=v,n.Memo=g,n.Portal=a,n.Profiler=c,n.StrictMode=s,n.Suspense=m,n.isAsyncMode=function(e){return _(e)||k(e)===p},n.isConcurrentMode=_,n.isContextConsumer=function(e){return k(e)===l},n.isContextProvider=function(e){return k(e)===u},n.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},n.isForwardRef=function(e){return k(e)===d},n.isFragment=function(e){return k(e)===o},n.isLazy=function(e){return k(e)===v},n.isMemo=function(e){return k(e)===g},n.isPortal=function(e){return k(e)===a},n.isProfiler=function(e){return k(e)===c},n.isStrictMode=function(e){return k(e)===s},n.isSuspense=function(e){return k(e)===m},n.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===c||e===s||e===m||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===g||e.$$typeof===u||e.$$typeof===l||e.$$typeof===d||e.$$typeof===b||e.$$typeof===y||e.$$typeof===w||e.$$typeof===x)},n.typeOf=k},function(e,n,t){"use strict";var r=t(20);function i(e){var n=e.children;e.children=[{type:"tableHead",align:e.align,children:[n[0]],position:n[0].position}],n.length>1&&e.children.push({type:"tableBody",align:e.align,children:n.slice(1),position:{start:n[1].position.start,end:n[n.length-1].position.end}})}e.exports=function(e){return r(e,"table",i),e}},function(e,n,t){"use strict";e.exports=function e(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(n.children||[]).reduce((function(n,t){return"definition"===t.type&&(n[t.identifier]={href:t.url,title:t.title}),e(t,n)}),t)}},function(e,n,t){"use strict";var r=["http","https","mailto","tel"];e.exports=function(e){var n=(e||"").trim(),t=n.charAt(0);if("#"===t||"/"===t)return n;var i=n.indexOf(":");if(-1===i)return n;for(var a=r.length,o=-1;++o<a;){var s=r[o];if(i===s.length&&n.slice(0,s.length).toLowerCase()===s)return n}return-1!==(o=n.indexOf("?"))&&i>o||-1!==(o=n.indexOf("#"))&&i>o?n:"javascript:void(0)"}},function(e,n,t){"use strict";var r=t(6),i=t(0),a=parseInt((i.version||"16").slice(0,2),10)>=16,o=i.createElement;function s(e,n){return o(e,c(n),n.children)}function c(e){return e["data-sourcepos"]?{"data-sourcepos":e["data-sourcepos"]}:{}}e.exports={break:"br",paragraph:"p",emphasis:"em",strong:"strong",thematicBreak:"hr",blockquote:"blockquote",delete:"del",link:"a",image:"img",linkReference:"a",imageReference:"img",table:s.bind(null,"table"),tableHead:s.bind(null,"thead"),tableBody:s.bind(null,"tbody"),tableRow:s.bind(null,"tr"),tableCell:function(e){var n=e.align?{textAlign:e.align}:void 0,t=c(e);return o(e.isHeader?"th":"td",n?r({style:n},t):t,e.children)},root:function(e){var n=!e.className,t=n&&i.Fragment||"div";return o(t,n?null:e,e.children)},text:function(e){return a?e.children:o("span",null,e.children)},list:function(e){var n=c(e);null!==e.start&&1!==e.start&&void 0!==e.start&&(n.start=e.start.toString());return o(e.ordered?"ol":"ul",n,e.children)},listItem:function(e){var n=null;if(null!==e.checked&&void 0!==e.checked){var t=e.checked;n=o("input",{type:"checkbox",checked:t,readOnly:!0})}return o("li",c(e),n,e.children)},definition:function(){return null},heading:function(e){return o("h".concat(e.level),c(e),e.children)},inlineCode:function(e){return o("code",c(e),e.children)},code:function(e){var n=e.language&&"language-".concat(e.language),t=o("code",n?{className:n}:null,e.value);return o("pre",c(e),t)},html:function(e){if(e.skipHtml)return null;var n=e.isBlock?"div":"span";if(e.escapeHtml){var t=i.Fragment||n;return o(t,null,e.value)}var r={dangerouslySetInnerHTML:{__html:e.value}};return o(n,r)},virtualHtml:function(e){return o(e.tag,c(e),e.children)},parsedHtml:function(e){return e["data-sourcepos"]?i.cloneElement(e.element,{"data-sourcepos":e["data-sourcepos"]}):e.element}}},function(e,n,t){"use strict";n.HtmlParser="undefined"==typeof Symbol?"__RMD_HTML_PARSER__":Symbol("__RMD_HTML_PARSER__")},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r,i=((r=t(209))&&"object"==typeof r&&"default"in r?r.default:r)(t(11).cache),a=i.extractCritical,o=i.renderStylesToString,s=i.renderStylesToNodeStream;n.extractCritical=a,n.renderStylesToNodeStream=s,n.renderStylesToString=o},function(e,n,t){"use strict";e.exports=t(210)},function(e,n,t){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e.default:e}Object.defineProperty(n,"__esModule",{value:!0});var i=r(t(211)),a=r(t(212)),o=r(t(217)),s=function(e){return function(n){for(var t,r=new RegExp(e.key+"-([a-zA-Z0-9-_]+)","gm"),i={html:n,ids:[],css:""},a={};null!==(t=r.exec(n));)void 0===a[t[1]]&&(a[t[1]]=!0);return i.ids=Object.keys(e.inserted).filter((function(n){if((void 0!==a[n]||void 0===e.registered[e.key+"-"+n])&&!0!==e.inserted[n])return i.css+=e.inserted[n],!0})),i}};function c(e,n,t,r){return"<style data-emotion-"+e+'="'+n.substring(1)+'"'+r+">"+t+"</style>"}var u=function(e,n){return function(t){var r=e.inserted,i=e.key,a=e.registered,o=new RegExp("<|"+i+"-([a-zA-Z0-9-_]+)","gm"),s={},u="",l="",p="";for(var f in r)if(r.hasOwnProperty(f)){var d=r[f];!0!==d&&void 0===a[i+"-"+f]&&(p+=d,l+=" "+f)}""!==p&&(u=c(i,l,p,n));for(var m,h="",g="",v=0;null!==(m=o.exec(t));)if("<"!==m[0]){var x=m[1],b=r[x];!0===b||void 0===b||s[x]||(s[x]=!0,g+=b,h+=" "+x)}else""!==h&&(u+=c(i,h,g,n),h="",g=""),u+=t.substring(v,m.index),v=m.index;return u+t.substring(v)}},l=function(e,n){return function(){var t={},r=a(),s=i((function(r){var i=r[0],a=r[1];if("open"===i){for(var o,s="",c={},u=a.toString(),l=new RegExp(e.key+"-([a-zA-Z0-9-_]+)","gm");null!==(o=l.exec(u));)null!==o&&void 0===t[o[1]]&&(c[o[1]]=!0);Object.keys(e.inserted).forEach((function(n){!0!==e.inserted[n]&&void 0===t[n]&&(!0===c[n]||void 0===e.registered[e.key+"-"+n]&&(c[n]=!0))&&(t[n]=!0,s+=e.inserted[n])})),""!==s&&this.queue("<style data-emotion-"+e.key+'="'+Object.keys(c).join(" ")+'"'+n+">"+s+"</style>")}this.queue(a)}),(function(){this.queue(null)}));return o(r,s)}};n.default=function(e){!0!==e.compat&&(e.compat=!0);var n=void 0!==e.nonce?' nonce="'+e.nonce+'"':"";return{extractCritical:s(e),renderStylesToString:u(e,n),renderStylesToNodeStream:l(e,n)}}},function(e,n,t){var r=t(7);function i(e,n,t){e=e||function(e){this.queue(e)},n=n||function(){this.queue(null)};var i=!1,a=!1,o=[],s=!1,c=new r;function u(){for(;o.length&&!c.paused;){var e=o.shift();if(null===e)return c.emit("end");c.emit("data",e)}}function l(){c.writable=!1,n.call(c),!c.readable&&c.autoDestroy&&c.destroy()}return c.readable=c.writable=!0,c.paused=!1,c.autoDestroy=!(t&&!1===t.autoDestroy),c.write=function(n){return e.call(this,n),!c.paused},c.queue=c.push=function(e){return s||(null===e&&(s=!0),o.push(e),u()),c},c.on("end",(function(){c.readable=!1,!c.writable&&c.autoDestroy&&process.nextTick((function(){c.destroy()}))})),c.end=function(e){if(!i)return i=!0,arguments.length&&c.write(e),l(),c},c.destroy=function(){if(!a)return a=!0,i=!0,o.length=0,c.writable=c.readable=!1,c.emit("close"),c},c.pause=function(){if(!c.paused)return c.paused=!0,c},c.resume=function(){return c.paused&&(c.paused=!1,c.emit("resume")),u(),c.paused||c.emit("drain"),c},c}e.exports=i,i.through=i},function(e,n,t){var r=t(213),i=t(214).Transform;t(2)(g,i),e.exports=g;var a="<".charCodeAt(0),o=">".charCodeAt(0),s="/".charCodeAt(0),c='"'.charCodeAt(0),u="'".charCodeAt(0),l="=".charCodeAt(0),p={endScript:r("</script"),endStyle:r("</style"),endTitle:r("</title"),comment:r("\x3c!--"),endComment:r("--\x3e"),cdata:r("<![CDATA["),endCdata:r("]]>")},f=1,d=2,m=3,h=4;function g(){if(!(this instanceof g))return new g;i.call(this),this._readableState.objectMode=!0,this.state="text",this.tagState=null,this.quoteState=null,this.raw=null,this.buffers=[],this._last=[]}function v(e,n){if(e.length<n.length)return!1;for(var t=e.length-1,r=n.length-1;t>=0&&r>=0;t--,r--)if(x(e[t])!==x(n[r]))return!1;return!0}function x(e){return e>=65&&e<=90?e+32:e}function b(e){return 32===e||9===e||10===e||12===e||13===e}g.prototype._transform=function(e,n,t){var r=0,i=0;for(this._prev&&(e=Buffer.concat([this._prev,e]),r=this._prev.length-1,i=this._offset,this._prev=null,this._offset=0);r<e.length;r++){var g=e[r];if(this._last.push(g),this._last.length>9&&this._last.shift(),this.raw){var x=this._testRaw(e,i,r);x&&(this.push(["text",x[0]]),this.raw===p.endComment||this.raw===p.endCdata?(this.state="text",this.buffers=[],this.push(["close",x[1]])):(this.state="open",this.buffers=[x[1]]),this.raw=null,i=r+1)}else{if("text"===this.state&&g===a&&r===e.length-1)return this._prev=e,this._offset=i,t();if("text"!==this.state||g!==a||b(e[r+1]))if(this.tagState===f&&b(g))this.tagState=d;else if(this.tagState===d&&g===l)this.tagState=m;else if(this.tagState===m&&b(g));else if(this.tagState===m&&g!==o)this.tagState=h,this.quoteState=g===c?"double":g===u?"single":null;else if(this.tagState===h&&!this.quoteState&&b(g))this.tagState=d;else if(this.tagState===h&&"double"===this.quoteState&&g===c)this.quoteState=null,this.tagState=d;else if(this.tagState===h&&"single"===this.quoteState&&g===u)this.quoteState=null,this.tagState=d;else if("open"!==this.state||g!==o||this.quoteState)"open"===this.state&&v(this._last,p.comment)?(this.buffers.push(e.slice(i,r+1)),i=r+1,this.state="text",this.raw=p.endComment,this._pushState("open")):"open"===this.state&&v(this._last,p.cdata)&&(this.buffers.push(e.slice(i,r+1)),i=r+1,this.state="text",this.raw=p.endCdata,this._pushState("open"));else if(this.buffers.push(e.slice(i,r+1)),i=r+1,this.state="text",this.tagState=null,this._getChar(1)===s)this._pushState("close");else{var y=this._getTag();"script"===y&&(this.raw=p.endScript),"style"===y&&(this.raw=p.endStyle),"title"===y&&(this.raw=p.endTitle),this._pushState("open")}else r>0&&r-i>0&&this.buffers.push(e.slice(i,r)),i=r,this.state="open",this.tagState=f,this._pushState("text")}}i<e.length&&this.buffers.push(e.slice(i)),t()},g.prototype._flush=function(e){"text"===this.state&&this._pushState("text"),this.push(null),e()},g.prototype._pushState=function(e){if(0!==this.buffers.length){var n=Buffer.concat(this.buffers);this.buffers=[],this.push([e,n])}},g.prototype._getChar=function(e){for(var n=0,t=0;t<this.buffers.length;t++){var r=this.buffers[t];if(n+r.length>e)return r[e-n];n+=r}},g.prototype._getTag=function(){for(var e=0,n="",t=0;t<this.buffers.length;t++){for(var r=this.buffers[t],i=0;i<r.length;i++)if(0!==e||0!==i){var a=String.fromCharCode(r[i]);if(/[^\w-!\[\]]/.test(a))return n.toLowerCase();n+=a}e+=r.length}},g.prototype._testRaw=function(e,n,t){var r=this.raw;if(v(this._last,r)){this.buffers.push(e.slice(n,t+1));var i=(e=Buffer.concat(this.buffers)).length-r.length;return[e.slice(0,i),e.slice(i)]}}},function(e,n){var t=Object.prototype.toString,r="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;e.exports=function(e,n,i){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return a=e,"ArrayBuffer"===t.call(a).slice(8,-1)?function(e,n,t){n>>>=0;var i=e.byteLength-n;if(i<0)throw new RangeError("'offset' is out of bounds");if(void 0===t)t=i;else if((t>>>=0)>i)throw new RangeError("'length' is out of bounds");return r?Buffer.from(e.slice(n,n+t)):new Buffer(new Uint8Array(e.slice(n,n+t)))}(e,n,i):"string"==typeof e?function(e,n){if("string"==typeof n&&""!==n||(n="utf8"),!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');return r?Buffer.from(e,n):new Buffer(e,n)}(e,n):r?Buffer.from(e):new Buffer(e);var a}},function(e,n,t){var r=t(7);(n=e.exports=t(55)).Stream=r,n.Readable=n,n.Writable=t(58),n.Duplex=t(36),n.Transform=t(59),n.PassThrough=t(216),process.browser||"disable"!==process.env.READABLE_STREAM||(e.exports=t(7))},function(e,n){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,n,t){e.exports=a;var r=t(59),i=t(8);function a(e){if(!(this instanceof a))return new a(e);r.call(this,e)}i.inherits=t(2),i.inherits(a,r),a.prototype._transform=function(e,n,t){t(null,e)}},function(e,n,t){var r=t(218),i=t(7).PassThrough,a=t(7).PassThrough,o=t(29),s=[].slice,c={bubbleErrors:!1,objectMode:!0};e.exports=function(e,n,t){Array.isArray(e)||(e=s.call(arguments),n=null,t=null);var u=e[e.length-1];"function"==typeof u&&(t=e.splice(-1)[0],u=e[e.length-1]);"object"==typeof u&&"function"!=typeof u.pipe&&(n=e.splice(-1)[0]);var l,p=e[0],f=e[e.length-1];if(n=o({},c,n),!p)return t&&process.nextTick(t),new i(n);l=p.writable&&f.readable?r(n,p,f):1==e.length?new a(n).wrap(e[0]):p.writable?p:f.readable?f:new i(n);if(e.forEach((function(n,t){var r=e[t+1];r&&n.pipe(r),n!=l&&n.on("error",l.emit.bind(l,"error"))})),t){var d=!1;function m(e){d||(d=!0,t(e))}l.on("error",m),f.on("finish",(function(){m()})),f.on("close",(function(){m()}))}return l}},function(e,n,t){"use strict";var r=t(219);function i(e,n,t){void 0===t&&(t=n,n=e,e=null),r.Duplex.call(this,e),"function"!=typeof t.read&&(t=new r.Readable(e).wrap(t)),this._writable=n,this._readable=t,this._waiting=!1;var i=this;n.once("finish",(function(){i.end()})),this.once("finish",(function(){n.end()})),t.on("readable",(function(){i._waiting&&(i._waiting=!1,i._read())})),t.once("end",(function(){i.push(null)})),e&&void 0!==e.bubbleErrors&&!e.bubbleErrors||(n.on("error",(function(e){i.emit("error",e)})),t.on("error",(function(e){i.emit("error",e)})))}i.prototype=Object.create(r.Duplex.prototype,{constructor:{value:i}}),i.prototype._write=function(e,n,t){this._writable.write(e,n,t)},i.prototype._read=function(){for(var e,n=0;null!==(e=this._readable.read());)this.push(e),n++;0===n&&(this._waiting=!0)},e.exports=function(e,n,t){return new i(e,n,t)},e.exports.DuplexWrapper=i},function(e,n,t){var r=t(7);"disable"===process.env.READABLE_STREAM&&r?(e.exports=r,(n=e.exports=r.Readable).Readable=r.Readable,n.Writable=r.Writable,n.Duplex=r.Duplex,n.Transform=r.Transform,n.PassThrough=r.PassThrough,n.Stream=r):((n=e.exports=t(60)).Stream=r||n,n.Readable=n,n.Writable=t(63),n.Duplex=t(13),n.Transform=t(65),n.PassThrough=t(223))},function(e,n){var t={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==t.call(e)}},function(e,n,t){"use strict";var r=t(23).Buffer,i=t(1);e.exports=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var n={data:e,next:null};this.length>0?this.tail.next=n:this.head=n,this.tail=n,++this.length},e.prototype.unshift=function(e){var n={data:e,next:this.head};0===this.length&&(this.tail=n),this.head=n,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var n=this.head,t=""+n.data;n=n.next;)t+=e+n.data;return t},e.prototype.concat=function(e){if(0===this.length)return r.alloc(0);if(1===this.length)return this.head.data;for(var n,t,i,a=r.allocUnsafe(e>>>0),o=this.head,s=0;o;)n=o.data,t=a,i=s,n.copy(t,i),s+=o.data.length,o=o.next;return a},e}(),i&&i.inspect&&i.inspect.custom&&(e.exports.prototype[i.inspect.custom]=function(){var e=i.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,n,t){e.exports=t(1).deprecate},function(e,n,t){"use strict";e.exports=a;var r=t(65),i=Object.create(t(8));function a(e){if(!(this instanceof a))return new a(e);r.call(this,e)}i.inherits=t(2),i.inherits(a,r),a.prototype._transform=function(e,n,t){t(null,e)}},function(e,n,t){"use strict";e.exports=t(225)},function(e,n,t){"use strict";
/** @license React v16.13.1
 * react-dom-server.node.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=t(29),i=t(0),a=t(7);function o(e){for(var n="https://reactjs.org/docs/error-decoder.html?invariant="+e,t=1;t<arguments.length;t++)n+="&args[]="+encodeURIComponent(arguments[t]);return"Minified React error #"+e+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var s="function"==typeof Symbol&&Symbol.for,c=s?Symbol.for("react.portal"):60106,u=s?Symbol.for("react.fragment"):60107,l=s?Symbol.for("react.strict_mode"):60108,p=s?Symbol.for("react.profiler"):60114,f=s?Symbol.for("react.provider"):60109,d=s?Symbol.for("react.context"):60110,m=s?Symbol.for("react.concurrent_mode"):60111,h=s?Symbol.for("react.forward_ref"):60112,g=s?Symbol.for("react.suspense"):60113,v=s?Symbol.for("react.suspense_list"):60120,x=s?Symbol.for("react.memo"):60115,b=s?Symbol.for("react.lazy"):60116,y=s?Symbol.for("react.block"):60121,w=s?Symbol.for("react.fundamental"):60117,k=s?Symbol.for("react.scope"):60119;function _(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case u:return"Fragment";case c:return"Portal";case p:return"Profiler";case l:return"StrictMode";case g:return"Suspense";case v:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case d:return"Context.Consumer";case f:return"Context.Provider";case h:var n=e.render;return n=n.displayName||n.name||"",e.displayName||(""!==n?"ForwardRef("+n+")":"ForwardRef");case x:return _(e.type);case y:return _(e.render);case b:if(e=1===e._status?e._result:null)return _(e)}return null}var S=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;S.hasOwnProperty("ReactCurrentDispatcher")||(S.ReactCurrentDispatcher={current:null}),S.hasOwnProperty("ReactCurrentBatchConfig")||(S.ReactCurrentBatchConfig={suspense:null});var E={};function A(e,n){for(var t=0|e._threadCount;t<=n;t++)e[t]=e._currentValue2,e._threadCount=t+1}for(var $=new Uint16Array(16),C=0;15>C;C++)$[C]=C+1;$[15]=0;var O=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,M=Object.prototype.hasOwnProperty,j={},F={};function R(e){return!!M.call(F,e)||!M.call(j,e)&&(O.test(e)?F[e]=!0:(j[e]=!0,!1))}function T(e,n,t,r,i,a){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new T(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var n=e[0];q[n]=new T(n,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new T(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new T(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new T(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new T(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new T(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new T(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new T(e,5,!1,e.toLowerCase(),null,!1)}));var L=/[\-:]([a-z])/g;function N(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var n=e.replace(L,N);q[n]=new T(n,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var n=e.replace(L,N);q[n]=new T(n,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var n=e.replace(L,N);q[n]=new T(n,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new T(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new T("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new T(e,1,!1,e.toLowerCase(),null,!0)}));var P=/["'&<>]/;function D(e){if("boolean"==typeof e||"number"==typeof e)return""+e;e=""+e;var n=P.exec(e);if(n){var t,r="",i=0;for(t=n.index;t<e.length;t++){switch(e.charCodeAt(t)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#x27;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}i!==t&&(r+=e.substring(i,t)),i=t+1,r+=n}e=i!==t?r+e.substring(i,t):r}return e}function I(e,n){var t,r=q.hasOwnProperty(e)?q[e]:null;return(t="style"!==e)&&(t=null!==r?0===r.type:2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1])),t||function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==t?!t.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(e,n,r,!1)?"":null!==r?(e=r.attributeName,3===(t=r.type)||4===t&&!0===n?e+'=""':(r.sanitizeURL&&(n=""+n),e+'="'+D(n)+'"')):R(e)?e+'="'+D(n)+'"':""}var z="function"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n},B=null,U=null,H=null,G=!1,W=!1,V=null,Y=0;function Z(){if(null===B)throw Error(o(321));return B}function X(){if(0<Y)throw Error(o(312));return{memoizedState:null,queue:null,next:null}}function K(){return null===H?null===U?(G=!1,U=H=X()):(G=!0,H=U):null===H.next?(G=!1,H=H.next=X()):(G=!0,H=H.next),H}function J(e,n,t,r){for(;W;)W=!1,Y+=1,H=null,t=e(n,r);return U=B=null,Y=0,H=V=null,t}function Q(e,n){return"function"==typeof n?n(e):n}function ee(e,n,t){if(B=Z(),H=K(),G){var r=H.queue;if(n=r.dispatch,null!==V&&void 0!==(t=V.get(r))){V.delete(r),r=H.memoizedState;do{r=e(r,t.action),t=t.next}while(null!==t);return H.memoizedState=r,[r,n]}return[H.memoizedState,n]}return e=e===Q?"function"==typeof n?n():n:void 0!==t?t(n):n,H.memoizedState=e,e=(e=H.queue={last:null,dispatch:null}).dispatch=ne.bind(null,B,e),[H.memoizedState,e]}function ne(e,n,t){if(!(25>Y))throw Error(o(301));if(e===B)if(W=!0,e={action:t,next:null},null===V&&(V=new Map),void 0===(t=V.get(n)))V.set(n,e);else{for(n=t;null!==n.next;)n=n.next;n.next=e}}function te(){}var re=0,ie={readContext:function(e){var n=re;return A(e,n),e[n]},useContext:function(e){Z();var n=re;return A(e,n),e[n]},useMemo:function(e,n){if(B=Z(),n=void 0===n?null:n,null!==(H=K())){var t=H.memoizedState;if(null!==t&&null!==n){e:{var r=t[1];if(null===r)r=!1;else{for(var i=0;i<r.length&&i<n.length;i++)if(!z(n[i],r[i])){r=!1;break e}r=!0}}if(r)return t[0]}}return e=e(),H.memoizedState=[e,n],e},useReducer:ee,useRef:function(e){B=Z();var n=(H=K()).memoizedState;return null===n?(e={current:e},H.memoizedState=e):n},useState:function(e){return ee(Q,e)},useLayoutEffect:function(){},useCallback:function(e){return e},useImperativeHandle:te,useEffect:te,useDebugValue:te,useResponder:function(e,n){return{props:n,responder:e}},useDeferredValue:function(e){return Z(),e},useTransition:function(){return Z(),[function(e){e()},!1]}},ae="http://www.w3.org/1999/xhtml";function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}var se={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},ce=r({menuitem:!0},se),ue={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},le=["Webkit","ms","Moz","O"];Object.keys(ue).forEach((function(e){le.forEach((function(n){n=n+e.charAt(0).toUpperCase()+e.substring(1),ue[n]=ue[e]}))}));var pe=/([A-Z])/g,fe=/^ms-/,de=i.Children.toArray,me=S.ReactCurrentDispatcher,he={listing:!0,pre:!0,textarea:!0},ge=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,ve={},xe={};var be=Object.prototype.hasOwnProperty,ye={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null,suppressHydrationWarning:null};function we(e,n){if(void 0===e)throw Error(o(152,_(n)||"Component"))}function ke(e,n,t){function a(i,a){var s=a.prototype&&a.prototype.isReactComponent,c=function(e,n,t,r){if(r&&("object"==typeof(r=e.contextType)&&null!==r))return A(r,t),r[t];if(e=e.contextTypes){for(var i in t={},e)t[i]=n[i];n=t}else n=E;return n}(a,n,t,s),u=[],l=!1,p={isMounted:function(){return!1},enqueueForceUpdate:function(){if(null===u)return null},enqueueReplaceState:function(e,n){l=!0,u=[n]},enqueueSetState:function(e,n){if(null===u)return null;u.push(n)}};if(s){if(s=new a(i.props,c,p),"function"==typeof a.getDerivedStateFromProps){var f=a.getDerivedStateFromProps.call(null,i.props,s.state);null!=f&&(s.state=r({},s.state,f))}}else if(B={},s=a(i.props,c,p),null==(s=J(a,i.props,s,c))||null==s.render)return void we(e=s,a);if(s.props=i.props,s.context=c,s.updater=p,void 0===(p=s.state)&&(s.state=p=null),"function"==typeof s.UNSAFE_componentWillMount||"function"==typeof s.componentWillMount)if("function"==typeof s.componentWillMount&&"function"!=typeof a.getDerivedStateFromProps&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&"function"!=typeof a.getDerivedStateFromProps&&s.UNSAFE_componentWillMount(),u.length){p=u;var d=l;if(u=null,l=!1,d&&1===p.length)s.state=p[0];else{f=d?p[0]:s.state;var m=!0;for(d=d?1:0;d<p.length;d++){var h=p[d];null!=(h="function"==typeof h?h.call(s,f,i.props,c):h)&&(m?(m=!1,f=r({},f,h)):r(f,h))}s.state=f}}else u=null;if(we(e=s.render(),a),"function"==typeof s.getChildContext&&"object"==typeof(i=a.childContextTypes)){var g=s.getChildContext();for(var v in g)if(!(v in i))throw Error(o(108,_(a)||"Unknown",v))}g&&(n=r({},n,g))}for(;i.isValidElement(e);){var s=e,c=s.type;if("function"!=typeof c)break;a(s,c)}return{child:e,context:n}}var _e=function(){function e(e,n){i.isValidElement(e)?e.type!==u?e=[e]:(e=e.props.children,e=i.isValidElement(e)?[e]:de(e)):e=de(e),e={type:null,domNamespace:ae,children:e,childIndex:0,context:E,footer:""};var t=$[0];if(0===t){var r=$,a=2*(t=r.length);if(!(65536>=a))throw Error(o(304));var s=new Uint16Array(a);for(s.set(r),($=s)[0]=t+1,r=t;r<a-1;r++)$[r]=r+1;$[a-1]=0}else $[0]=$[t];this.threadID=t,this.stack=[e],this.exhausted=!1,this.currentSelectValue=null,this.previousWasTextNode=!1,this.makeStaticMarkup=n,this.suspenseDepth=0,this.contextIndex=-1,this.contextStack=[],this.contextValueStack=[]}var n=e.prototype;return n.destroy=function(){if(!this.exhausted){this.exhausted=!0,this.clearProviders();var e=this.threadID;$[e]=$[0],$[0]=e}},n.pushProvider=function(e){var n=++this.contextIndex,t=e.type._context,r=this.threadID;A(t,r);var i=t[r];this.contextStack[n]=t,this.contextValueStack[n]=i,t[r]=e.props.value},n.popProvider=function(){var e=this.contextIndex,n=this.contextStack[e],t=this.contextValueStack[e];this.contextStack[e]=null,this.contextValueStack[e]=null,this.contextIndex--,n[this.threadID]=t},n.clearProviders=function(){for(var e=this.contextIndex;0<=e;e--)this.contextStack[e][this.threadID]=this.contextValueStack[e]},n.read=function(e){if(this.exhausted)return null;var n=re;re=this.threadID;var t=me.current;me.current=ie;try{for(var r=[""],i=!1;r[0].length<e;){if(0===this.stack.length){this.exhausted=!0;var a=this.threadID;$[a]=$[0],$[0]=a;break}var s=this.stack[this.stack.length-1];if(i||s.childIndex>=s.children.length){var c=s.footer;if(""!==c&&(this.previousWasTextNode=!1),this.stack.pop(),"select"===s.type)this.currentSelectValue=null;else if(null!=s.type&&null!=s.type.type&&s.type.type.$$typeof===f)this.popProvider(s.type);else if(s.type===g){this.suspenseDepth--;var u=r.pop();if(i){i=!1;var l=s.fallbackFrame;if(!l)throw Error(o(303));this.stack.push(l),r[this.suspenseDepth]+="\x3c!--$!--\x3e";continue}r[this.suspenseDepth]+=u}r[this.suspenseDepth]+=c}else{var p=s.children[s.childIndex++],d="";try{d+=this.render(p,s.context,s.domNamespace)}catch(e){if(null!=e&&"function"==typeof e.then)throw Error(o(294));throw e}r.length<=this.suspenseDepth&&r.push(""),r[this.suspenseDepth]+=d}}return r[0]}finally{me.current=t,re=n}},n.render=function(e,n,t){if("string"==typeof e||"number"==typeof e)return""===(t=""+e)?"":this.makeStaticMarkup?D(t):this.previousWasTextNode?"\x3c!-- --\x3e"+D(t):(this.previousWasTextNode=!0,D(t));if(e=(n=ke(e,n,this.threadID)).child,n=n.context,null===e||!1===e)return"";if(!i.isValidElement(e)){if(null!=e&&null!=e.$$typeof){if((t=e.$$typeof)===c)throw Error(o(257));throw Error(o(258,t.toString()))}return e=de(e),this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),""}var a=e.type;if("string"==typeof a)return this.renderDOM(e,n,t);switch(a){case l:case m:case p:case v:case u:return e=de(e.props.children),this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),"";case g:throw Error(o(294))}if("object"==typeof a&&null!==a)switch(a.$$typeof){case h:B={};var s=a.render(e.props,e.ref);return s=J(a.render,e.props,s,e.ref),s=de(s),this.stack.push({type:null,domNamespace:t,children:s,childIndex:0,context:n,footer:""}),"";case x:return e=[i.createElement(a.type,r({ref:e.ref},e.props))],this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),"";case f:return t={type:e,domNamespace:t,children:a=de(e.props.children),childIndex:0,context:n,footer:""},this.pushProvider(e),this.stack.push(t),"";case d:a=e.type,s=e.props;var y=this.threadID;return A(a,y),a=de(s.children(a[y])),this.stack.push({type:e,domNamespace:t,children:a,childIndex:0,context:n,footer:""}),"";case w:throw Error(o(338));case b:switch(function(e){if(-1===e._status){e._status=0;var n=e._ctor;n=n(),e._result=n,n.then((function(n){0===e._status&&(n=n.default,e._status=1,e._result=n)}),(function(n){0===e._status&&(e._status=2,e._result=n)}))}}(a=e.type),a._status){case 1:return e=[i.createElement(a._result,r({ref:e.ref},e.props))],this.stack.push({type:null,domNamespace:t,children:e,childIndex:0,context:n,footer:""}),"";case 2:throw a._result;default:throw Error(o(295))}case k:throw Error(o(343))}throw Error(o(130,null==a?a:typeof a,""))},n.renderDOM=function(e,n,t){var a=e.type.toLowerCase();if(t===ae&&oe(a),!ve.hasOwnProperty(a)){if(!ge.test(a))throw Error(o(65,a));ve[a]=!0}var s=e.props;if("input"===a)s=r({type:void 0},s,{defaultChecked:void 0,defaultValue:void 0,value:null!=s.value?s.value:s.defaultValue,checked:null!=s.checked?s.checked:s.defaultChecked});else if("textarea"===a){var c=s.value;if(null==c){c=s.defaultValue;var u=s.children;if(null!=u){if(null!=c)throw Error(o(92));if(Array.isArray(u)){if(!(1>=u.length))throw Error(o(93));u=u[0]}c=""+u}null==c&&(c="")}s=r({},s,{value:void 0,children:""+c})}else if("select"===a)this.currentSelectValue=null!=s.value?s.value:s.defaultValue,s=r({},s,{value:void 0});else if("option"===a){u=this.currentSelectValue;var l=function(e){if(null==e)return e;var n="";return i.Children.forEach(e,(function(e){null!=e&&(n+=e)})),n}(s.children);if(null!=u){var p=null!=s.value?s.value+"":l;if(c=!1,Array.isArray(u)){for(var f=0;f<u.length;f++)if(""+u[f]===p){c=!0;break}}else c=""+u===p;s=r({selected:void 0,children:void 0},s,{selected:c,children:l})}}if(c=s){if(ce[a]&&(null!=c.children||null!=c.dangerouslySetInnerHTML))throw Error(o(137,a,""));if(null!=c.dangerouslySetInnerHTML){if(null!=c.children)throw Error(o(60));if("object"!=typeof c.dangerouslySetInnerHTML||!("__html"in c.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=c.style&&"object"!=typeof c.style)throw Error(o(62,""))}for(y in c=s,u=this.makeStaticMarkup,l=1===this.stack.length,p="<"+e.type,c)if(be.call(c,y)){var d=c[y];if(null!=d){if("style"===y){f=void 0;var m="",h="";for(f in d)if(d.hasOwnProperty(f)){var g=0===f.indexOf("--"),v=d[f];if(null!=v){if(g)var x=f;else if(x=f,xe.hasOwnProperty(x))x=xe[x];else{var b=x.replace(pe,"-$1").toLowerCase().replace(fe,"-ms-");x=xe[x]=b}m+=h+x+":",h=f,m+=g=null==v||"boolean"==typeof v||""===v?"":g||"number"!=typeof v||0===v||ue.hasOwnProperty(h)&&ue[h]?(""+v).trim():v+"px",h=";"}}d=m||null}f=null;e:if(g=a,v=c,-1===g.indexOf("-"))g="string"==typeof v.is;else switch(g){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":g=!1;break e;default:g=!0}g?ye.hasOwnProperty(y)||(f=R(f=y)&&null!=d?f+'="'+D(d)+'"':""):f=I(y,d),f&&(p+=" "+f)}}u||l&&(p+=' data-reactroot=""');var y=p;c="",se.hasOwnProperty(a)?y+="/>":(y+=">",c="</"+e.type+">");e:{if(null!=(u=s.dangerouslySetInnerHTML)){if(null!=u.__html){u=u.__html;break e}}else if("string"==typeof(u=s.children)||"number"==typeof u){u=D(u);break e}u=null}return null!=u?(s=[],he.hasOwnProperty(a)&&"\n"===u.charAt(0)&&(y+="\n"),y+=u):s=de(s.children),e=e.type,t=null==t||"http://www.w3.org/1999/xhtml"===t?oe(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t,this.stack.push({domNamespace:t,type:a,children:s,childIndex:0,context:n,footer:c}),this.previousWasTextNode=!1,y},e}();var Se=function(e){function n(n,t){var r=e.call(this,{})||this;return r.partialRenderer=new _e(n,t),r}!function(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}(n,e);var t=n.prototype;return t._destroy=function(e,n){this.partialRenderer.destroy(),n(e)},t._read=function(e){try{this.push(this.partialRenderer.read(e))}catch(e){this.destroy(e)}},n}(a.Readable),Ee={renderToString:function(e){e=new _e(e,!1);try{return e.read(1/0)}finally{e.destroy()}},renderToStaticMarkup:function(e){e=new _e(e,!0);try{return e.read(1/0)}finally{e.destroy()}},renderToNodeStream:function(e){return new Se(e,!1)},renderToStaticNodeStream:function(e){return new Se(e,!0)},version:"16.13.1"};e.exports=Ee.default||Ee},function(e,n,t){"use strict";var r=t(227),i=Buffer.byteLength.bind(Buffer);e.exports=r.bind(null,i)},function(e,n,t){"use strict";function r(e){return e>=55296&&e<=56319}function i(e){return e>=56320&&e<=57343}e.exports=function(e,n,t){if("string"!=typeof n)throw new Error("Input must be string");for(var a,o,s=n.length,c=0,u=0;u<s;u+=1){if(a=n.charCodeAt(u),o=n[u],r(a)&&i(n.charCodeAt(u+1))&&(o+=n[u+=1]),(c+=e(o))===t)return n.slice(0,u+1);if(c>t)return n.slice(0,u-o.length+1)}return n}},function(e,n,t){t(229).install()},function(e,n,t){(function(e){var r,i=t(231).SourceMapConsumer,a=t(9);try{(r=t(5)).existsSync&&r.readFileSync||(r=null)}catch(e){}var o=t(238);function s(e,n){return e.require(n)}var c=!1,u=!1,l=!1,p="auto",f={},d={},m=/^data:application\/json[^,]+base64,/,h=[],g=[];function v(){return"browser"===p||"node"!==p&&("undefined"!=typeof window&&"function"==typeof XMLHttpRequest&&!(window.require&&window.module&&window.process&&"renderer"===window.process.type))}function x(e){return function(n){for(var t=0;t<e.length;t++){var r=e[t](n);if(r)return r}return null}}var b=x(h);function y(e,n){if(!e)return n;var t=a.dirname(e),r=/^\w+:\/\/[^\/]*/.exec(t),i=r?r[0]:"",o=t.slice(i.length);return i&&/^\/\w\:/.test(o)?(i+="/")+a.resolve(t.slice(i.length),n).replace(/\\/g,"/"):i+a.resolve(t.slice(i.length),n)}h.push((function(e){if(e=e.trim(),/^file:/.test(e)&&(e=e.replace(/file:\/\/\/(\w:)?/,(function(e,n){return n?"":"/"}))),e in f)return f[e];var n="";try{if(r)r.existsSync(e)&&(n=r.readFileSync(e,"utf8"));else{var t=new XMLHttpRequest;t.open("GET",e,!1),t.send(null),4===t.readyState&&200===t.status&&(n=t.responseText)}}catch(e){}return f[e]=n}));var w=x(g);function k(e){var n=d[e.source];if(!n){var t=w(e.source);t?(n=d[e.source]={url:t.url,map:new i(t.map)}).map.sourcesContent&&n.map.sources.forEach((function(e,t){var r=n.map.sourcesContent[t];if(r){var i=y(n.url,e);f[i]=r}})):n=d[e.source]={url:null,map:null}}if(n&&n.map&&"function"==typeof n.map.originalPositionFor){var r=n.map.originalPositionFor(e);if(null!==r.source)return r.source=y(n.url,r.source),r}return e}function _(){var e,n="";if(this.isNative())n="native";else{!(e=this.getScriptNameOrSourceURL())&&this.isEval()&&(n=this.getEvalOrigin(),n+=", "),n+=e||"<anonymous>";var t=this.getLineNumber();if(null!=t){n+=":"+t;var r=this.getColumnNumber();r&&(n+=":"+r)}}var i="",a=this.getFunctionName(),o=!0,s=this.isConstructor();if(!(this.isToplevel()||s)){var c=this.getTypeName();"[object Object]"===c&&(c="null");var u=this.getMethodName();a?(c&&0!=a.indexOf(c)&&(i+=c+"."),i+=a,u&&a.indexOf("."+u)!=a.length-u.length-1&&(i+=" [as "+u+"]")):i+=c+"."+(u||"<anonymous>")}else s?i+="new "+(a||"<anonymous>"):a?i+=a:(i+=n,o=!1);return o&&(i+=" ("+n+")"),i}function S(e){var n={};return Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(t){n[t]=/^(?:is|get)/.test(t)?function(){return e[t].call(e)}:e[t]})),n.toString=_,n}function E(e,n){if(void 0===n&&(n={nextPosition:null,curPosition:null}),e.isNative())return n.curPosition=null,e;var t=e.getFileName()||e.getScriptNameOrSourceURL();if(t){var r=e.getLineNumber(),i=e.getColumnNumber()-1,a=/^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/.test(process.version)?0:62;1===r&&i>a&&!v()&&!e.isEval()&&(i-=a);var o=k({source:t,line:r,column:i});n.curPosition=o;var s=(e=S(e)).getFunctionName;return e.getFunctionName=function(){return null==n.nextPosition?s():n.nextPosition.name||s()},e.getFileName=function(){return o.source},e.getLineNumber=function(){return o.line},e.getColumnNumber=function(){return o.column+1},e.getScriptNameOrSourceURL=function(){return o.source},e}var c=e.isEval()&&e.getEvalOrigin();return c?(c=function e(n){var t=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(n);if(t){var r=k({source:t[2],line:+t[3],column:t[4]-1});return"eval at "+t[1]+" ("+r.source+":"+r.line+":"+(r.column+1)+")"}return(t=/^eval at ([^(]+) \((.+)\)$/.exec(n))?"eval at "+t[1]+" ("+e(t[2])+")":n}(c),(e=S(e)).getEvalOrigin=function(){return c},e):e}function A(e,n){l&&(f={},d={});for(var t=(e.name||"Error")+": "+(e.message||""),r={nextPosition:null,curPosition:null},i=[],a=n.length-1;a>=0;a--)i.push("\n    at "+E(n[a],r)),r.nextPosition=r.curPosition;return r.curPosition=r.nextPosition=null,t+i.reverse().join("")}function $(e){var n=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(e.stack);if(n){var t=n[1],i=+n[2],a=+n[3],o=f[t];if(!o&&r&&r.existsSync(t))try{o=r.readFileSync(t,"utf8")}catch(e){o=""}if(o){var s=o.split(/(?:\r\n|\r|\n)/)[i-1];if(s)return t+":"+i+"\n"+s+"\n"+new Array(a).join(" ")+"^"}}return null}function C(e){var n=$(e);process.stderr._handle&&process.stderr._handle.setBlocking&&process.stderr._handle.setBlocking(!0),n&&(console.error(),console.error(n)),console.error(e.stack),process.exit(1)}g.push((function(e){var n,t=function(e){var n;if(v())try{var t=new XMLHttpRequest;t.open("GET",e,!1),t.send(null),n=4===t.readyState?t.responseText:null;var r=t.getResponseHeader("SourceMap")||t.getResponseHeader("X-SourceMap");if(r)return r}catch(e){}n=b(e);for(var i,a,o=/(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/gm;a=o.exec(n);)i=a;return i?i[1]:null}(e);if(!t)return null;if(m.test(t)){var r=t.slice(t.indexOf(",")+1);n=o(r,"base64").toString(),t=e}else t=y(e,t),n=b(t);return n?{url:t,map:n}:null}));var O=h.slice(0),M=g.slice(0);n.wrapCallSite=E,n.getErrorSource=$,n.mapSourcePosition=k,n.retrieveSourceMap=w,n.install=function(n){if((n=n||{}).environment&&(p=n.environment,-1===["node","browser","auto"].indexOf(p)))throw new Error("environment "+p+" was unknown. Available options are {auto, browser, node}");if(n.retrieveFile&&(n.overrideRetrieveFile&&(h.length=0),h.unshift(n.retrieveFile)),n.retrieveSourceMap&&(n.overrideRetrieveSourceMap&&(g.length=0),g.unshift(n.retrieveSourceMap)),n.hookRequire&&!v()){var t=s(e,"module"),r=t.prototype._compile;r.__sourceMapSupport||(t.prototype._compile=function(e,n){return f[n]=e,d[n]=void 0,r.call(this,e,n)},t.prototype._compile.__sourceMapSupport=!0)}if(l||(l="emptyCacheBetweenOperations"in n&&n.emptyCacheBetweenOperations),c||(c=!0,Error.prepareStackTrace=A),!u){var i=!("handleUncaughtExceptions"in n)||n.handleUncaughtExceptions;try{!1===s(e,"worker_threads").isMainThread&&(i=!1)}catch(e){}i&&"object"==typeof process&&null!==process&&"function"==typeof process.on&&(u=!0,a=process.emit,process.emit=function(e){if("uncaughtException"===e){var n=arguments[1]&&arguments[1].stack,t=this.listeners(e).length>0;if(n&&!t)return C(arguments[1])}return a.apply(this,arguments)})}var a},n.resetRetrieveHandlers=function(){h.length=0,g.length=0,h=O.slice(0),g=M.slice(0),w=x(g),b=x(h)}}).call(this,t(230)(e))},function(e,n){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,n,t){n.SourceMapGenerator=t(66).SourceMapGenerator,n.SourceMapConsumer=t(234).SourceMapConsumer,n.SourceNode=t(237).SourceNode},function(e,n){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");n.encode=function(e){if(0<=e&&e<t.length)return t[e];throw new TypeError("Must be between 0 and 63: "+e)},n.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1}},function(e,n,t){var r=t(16);function i(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}i.prototype.unsortedForEach=function(e,n){this._array.forEach(e,n)},i.prototype.add=function(e){var n,t,i,a,o,s;n=this._last,t=e,i=n.generatedLine,a=t.generatedLine,o=n.generatedColumn,s=t.generatedColumn,a>i||a==i&&s>=o||r.compareByGeneratedPositionsInflated(n,t)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},i.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},n.MappingList=i},function(e,n,t){var r=t(16),i=t(235),a=t(68).ArraySet,o=t(67),s=t(236).quickSort;function c(e,n){var t=e;return"string"==typeof e&&(t=r.parseSourceMapInput(e)),null!=t.sections?new p(t,n):new u(t,n)}function u(e,n){var t=e;"string"==typeof e&&(t=r.parseSourceMapInput(e));var i=r.getArg(t,"version"),o=r.getArg(t,"sources"),s=r.getArg(t,"names",[]),c=r.getArg(t,"sourceRoot",null),u=r.getArg(t,"sourcesContent",null),l=r.getArg(t,"mappings"),p=r.getArg(t,"file",null);if(i!=this._version)throw new Error("Unsupported version: "+i);c&&(c=r.normalize(c)),o=o.map(String).map(r.normalize).map((function(e){return c&&r.isAbsolute(c)&&r.isAbsolute(e)?r.relative(c,e):e})),this._names=a.fromArray(s.map(String),!0),this._sources=a.fromArray(o,!0),this._absoluteSources=this._sources.toArray().map((function(e){return r.computeSourceURL(c,e,n)})),this.sourceRoot=c,this.sourcesContent=u,this._mappings=l,this._sourceMapURL=n,this.file=p}function l(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function p(e,n){var t=e;"string"==typeof e&&(t=r.parseSourceMapInput(e));var i=r.getArg(t,"version"),o=r.getArg(t,"sections");if(i!=this._version)throw new Error("Unsupported version: "+i);this._sources=new a,this._names=new a;var s={line:-1,column:0};this._sections=o.map((function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var t=r.getArg(e,"offset"),i=r.getArg(t,"line"),a=r.getArg(t,"column");if(i<s.line||i===s.line&&a<s.column)throw new Error("Section offsets must be ordered and non-overlapping.");return s=t,{generatedOffset:{generatedLine:i+1,generatedColumn:a+1},consumer:new c(r.getArg(e,"map"),n)}}))}c.fromSourceMap=function(e,n){return u.fromSourceMap(e,n)},c.prototype._version=3,c.prototype.__generatedMappings=null,Object.defineProperty(c.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),c.prototype.__originalMappings=null,Object.defineProperty(c.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),c.prototype._charIsMappingSeparator=function(e,n){var t=e.charAt(n);return";"===t||","===t},c.prototype._parseMappings=function(e,n){throw new Error("Subclasses must implement _parseMappings")},c.GENERATED_ORDER=1,c.ORIGINAL_ORDER=2,c.GREATEST_LOWER_BOUND=1,c.LEAST_UPPER_BOUND=2,c.prototype.eachMapping=function(e,n,t){var i,a=n||null;switch(t||c.GENERATED_ORDER){case c.GENERATED_ORDER:i=this._generatedMappings;break;case c.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var o=this.sourceRoot;i.map((function(e){var n=null===e.source?null:this._sources.at(e.source);return{source:n=r.computeSourceURL(o,n,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}}),this).forEach(e,a)},c.prototype.allGeneratedPositionsFor=function(e){var n=r.getArg(e,"line"),t={source:r.getArg(e,"source"),originalLine:n,originalColumn:r.getArg(e,"column",0)};if(t.source=this._findSourceIndex(t.source),t.source<0)return[];var a=[],o=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,i.LEAST_UPPER_BOUND);if(o>=0){var s=this._originalMappings[o];if(void 0===e.column)for(var c=s.originalLine;s&&s.originalLine===c;)a.push({line:r.getArg(s,"generatedLine",null),column:r.getArg(s,"generatedColumn",null),lastColumn:r.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++o];else for(var u=s.originalColumn;s&&s.originalLine===n&&s.originalColumn==u;)a.push({line:r.getArg(s,"generatedLine",null),column:r.getArg(s,"generatedColumn",null),lastColumn:r.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++o]}return a},n.SourceMapConsumer=c,u.prototype=Object.create(c.prototype),u.prototype.consumer=c,u.prototype._findSourceIndex=function(e){var n,t=e;if(null!=this.sourceRoot&&(t=r.relative(this.sourceRoot,t)),this._sources.has(t))return this._sources.indexOf(t);for(n=0;n<this._absoluteSources.length;++n)if(this._absoluteSources[n]==e)return n;return-1},u.fromSourceMap=function(e,n){var t=Object.create(u.prototype),i=t._names=a.fromArray(e._names.toArray(),!0),o=t._sources=a.fromArray(e._sources.toArray(),!0);t.sourceRoot=e._sourceRoot,t.sourcesContent=e._generateSourcesContent(t._sources.toArray(),t.sourceRoot),t.file=e._file,t._sourceMapURL=n,t._absoluteSources=t._sources.toArray().map((function(e){return r.computeSourceURL(t.sourceRoot,e,n)}));for(var c=e._mappings.toArray().slice(),p=t.__generatedMappings=[],f=t.__originalMappings=[],d=0,m=c.length;d<m;d++){var h=c[d],g=new l;g.generatedLine=h.generatedLine,g.generatedColumn=h.generatedColumn,h.source&&(g.source=o.indexOf(h.source),g.originalLine=h.originalLine,g.originalColumn=h.originalColumn,h.name&&(g.name=i.indexOf(h.name)),f.push(g)),p.push(g)}return s(t.__originalMappings,r.compareByOriginalPositions),t},u.prototype._version=3,Object.defineProperty(u.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),u.prototype._parseMappings=function(e,n){for(var t,i,a,c,u,p=1,f=0,d=0,m=0,h=0,g=0,v=e.length,x=0,b={},y={},w=[],k=[];x<v;)if(";"===e.charAt(x))p++,x++,f=0;else if(","===e.charAt(x))x++;else{for((t=new l).generatedLine=p,c=x;c<v&&!this._charIsMappingSeparator(e,c);c++);if(a=b[i=e.slice(x,c)])x+=i.length;else{for(a=[];x<c;)o.decode(e,x,y),u=y.value,x=y.rest,a.push(u);if(2===a.length)throw new Error("Found a source, but no line and column");if(3===a.length)throw new Error("Found a source and line, but no column");b[i]=a}t.generatedColumn=f+a[0],f=t.generatedColumn,a.length>1&&(t.source=h+a[1],h+=a[1],t.originalLine=d+a[2],d=t.originalLine,t.originalLine+=1,t.originalColumn=m+a[3],m=t.originalColumn,a.length>4&&(t.name=g+a[4],g+=a[4])),k.push(t),"number"==typeof t.originalLine&&w.push(t)}s(k,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=k,s(w,r.compareByOriginalPositions),this.__originalMappings=w},u.prototype._findMapping=function(e,n,t,r,a,o){if(e[t]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[t]);if(e[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[r]);return i.search(e,n,a,o)},u.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var n=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var t=this._generatedMappings[e+1];if(n.generatedLine===t.generatedLine){n.lastGeneratedColumn=t.generatedColumn-1;continue}}n.lastGeneratedColumn=1/0}},u.prototype.originalPositionFor=function(e){var n={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},t=this._findMapping(n,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositionsDeflated,r.getArg(e,"bias",c.GREATEST_LOWER_BOUND));if(t>=0){var i=this._generatedMappings[t];if(i.generatedLine===n.generatedLine){var a=r.getArg(i,"source",null);null!==a&&(a=this._sources.at(a),a=r.computeSourceURL(this.sourceRoot,a,this._sourceMapURL));var o=r.getArg(i,"name",null);return null!==o&&(o=this._names.at(o)),{source:a,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:o}}}return{source:null,line:null,column:null,name:null}},u.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(e){return null==e})))},u.prototype.sourceContentFor=function(e,n){if(!this.sourcesContent)return null;var t=this._findSourceIndex(e);if(t>=0)return this.sourcesContent[t];var i,a=e;if(null!=this.sourceRoot&&(a=r.relative(this.sourceRoot,a)),null!=this.sourceRoot&&(i=r.urlParse(this.sourceRoot))){var o=a.replace(/^file:\/\//,"");if("file"==i.scheme&&this._sources.has(o))return this.sourcesContent[this._sources.indexOf(o)];if((!i.path||"/"==i.path)&&this._sources.has("/"+a))return this.sourcesContent[this._sources.indexOf("/"+a)]}if(n)return null;throw new Error('"'+a+'" is not in the SourceMap.')},u.prototype.generatedPositionFor=function(e){var n=r.getArg(e,"source");if((n=this._findSourceIndex(n))<0)return{line:null,column:null,lastColumn:null};var t={source:n,originalLine:r.getArg(e,"line"),originalColumn:r.getArg(e,"column")},i=this._findMapping(t,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,r.getArg(e,"bias",c.GREATEST_LOWER_BOUND));if(i>=0){var a=this._originalMappings[i];if(a.source===t.source)return{line:r.getArg(a,"generatedLine",null),column:r.getArg(a,"generatedColumn",null),lastColumn:r.getArg(a,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},n.BasicSourceMapConsumer=u,p.prototype=Object.create(c.prototype),p.prototype.constructor=c,p.prototype._version=3,Object.defineProperty(p.prototype,"sources",{get:function(){for(var e=[],n=0;n<this._sections.length;n++)for(var t=0;t<this._sections[n].consumer.sources.length;t++)e.push(this._sections[n].consumer.sources[t]);return e}}),p.prototype.originalPositionFor=function(e){var n={generatedLine:r.getArg(e,"line"),generatedColumn:r.getArg(e,"column")},t=i.search(n,this._sections,(function(e,n){var t=e.generatedLine-n.generatedOffset.generatedLine;return t||e.generatedColumn-n.generatedOffset.generatedColumn})),a=this._sections[t];return a?a.consumer.originalPositionFor({line:n.generatedLine-(a.generatedOffset.generatedLine-1),column:n.generatedColumn-(a.generatedOffset.generatedLine===n.generatedLine?a.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},p.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(e){return e.consumer.hasContentsOfAllSources()}))},p.prototype.sourceContentFor=function(e,n){for(var t=0;t<this._sections.length;t++){var r=this._sections[t].consumer.sourceContentFor(e,!0);if(r)return r}if(n)return null;throw new Error('"'+e+'" is not in the SourceMap.')},p.prototype.generatedPositionFor=function(e){for(var n=0;n<this._sections.length;n++){var t=this._sections[n];if(-1!==t.consumer._findSourceIndex(r.getArg(e,"source"))){var i=t.consumer.generatedPositionFor(e);if(i)return{line:i.line+(t.generatedOffset.generatedLine-1),column:i.column+(t.generatedOffset.generatedLine===i.line?t.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},p.prototype._parseMappings=function(e,n){this.__generatedMappings=[],this.__originalMappings=[];for(var t=0;t<this._sections.length;t++)for(var i=this._sections[t],a=i.consumer._generatedMappings,o=0;o<a.length;o++){var c=a[o],u=i.consumer._sources.at(c.source);u=r.computeSourceURL(i.consumer.sourceRoot,u,this._sourceMapURL),this._sources.add(u),u=this._sources.indexOf(u);var l=null;c.name&&(l=i.consumer._names.at(c.name),this._names.add(l),l=this._names.indexOf(l));var p={source:u,generatedLine:c.generatedLine+(i.generatedOffset.generatedLine-1),generatedColumn:c.generatedColumn+(i.generatedOffset.generatedLine===c.generatedLine?i.generatedOffset.generatedColumn-1:0),originalLine:c.originalLine,originalColumn:c.originalColumn,name:l};this.__generatedMappings.push(p),"number"==typeof p.originalLine&&this.__originalMappings.push(p)}s(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),s(this.__originalMappings,r.compareByOriginalPositions)},n.IndexedSourceMapConsumer=p},function(e,n){n.GREATEST_LOWER_BOUND=1,n.LEAST_UPPER_BOUND=2,n.search=function(e,t,r,i){if(0===t.length)return-1;var a=function e(t,r,i,a,o,s){var c=Math.floor((r-t)/2)+t,u=o(i,a[c],!0);return 0===u?c:u>0?r-c>1?e(c,r,i,a,o,s):s==n.LEAST_UPPER_BOUND?r<a.length?r:-1:c:c-t>1?e(t,c,i,a,o,s):s==n.LEAST_UPPER_BOUND?c:t<0?-1:t}(-1,t.length,e,t,r,i||n.GREATEST_LOWER_BOUND);if(a<0)return-1;for(;a-1>=0&&0===r(t[a],t[a-1],!0);)--a;return a}},function(e,n){function t(e,n,t){var r=e[n];e[n]=e[t],e[t]=r}function r(e,n,i,a){if(i<a){var o=i-1;t(e,(l=i,p=a,Math.round(l+Math.random()*(p-l))),a);for(var s=e[a],c=i;c<a;c++)n(e[c],s)<=0&&t(e,o+=1,c);t(e,o+1,c);var u=o+1;r(e,n,i,u-1),r(e,n,u+1,a)}var l,p}n.quickSort=function(e,n){r(e,n,0,e.length-1)}},function(e,n,t){var r=t(66).SourceMapGenerator,i=t(16),a=/(\r?\n)/,o="$$$isSourceNode$$$";function s(e,n,t,r,i){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==n?null:n,this.source=null==t?null:t,this.name=null==i?null:i,this[o]=!0,null!=r&&this.add(r)}s.fromStringWithSourceMap=function(e,n,t){var r=new s,o=e.split(a),c=0,u=function(){return e()+(e()||"");function e(){return c<o.length?o[c++]:void 0}},l=1,p=0,f=null;return n.eachMapping((function(e){if(null!==f){if(!(l<e.generatedLine)){var n=(t=o[c]||"").substr(0,e.generatedColumn-p);return o[c]=t.substr(e.generatedColumn-p),p=e.generatedColumn,d(f,n),void(f=e)}d(f,u()),l++,p=0}for(;l<e.generatedLine;)r.add(u()),l++;if(p<e.generatedColumn){var t=o[c]||"";r.add(t.substr(0,e.generatedColumn)),o[c]=t.substr(e.generatedColumn),p=e.generatedColumn}f=e}),this),c<o.length&&(f&&d(f,u()),r.add(o.splice(c).join(""))),n.sources.forEach((function(e){var a=n.sourceContentFor(e);null!=a&&(null!=t&&(e=i.join(t,e)),r.setSourceContent(e,a))})),r;function d(e,n){if(null===e||void 0===e.source)r.add(n);else{var a=t?i.join(t,e.source):e.source;r.add(new s(e.originalLine,e.originalColumn,a,n,e.name))}}},s.prototype.add=function(e){if(Array.isArray(e))e.forEach((function(e){this.add(e)}),this);else{if(!e[o]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},s.prototype.prepend=function(e){if(Array.isArray(e))for(var n=e.length-1;n>=0;n--)this.prepend(e[n]);else{if(!e[o]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},s.prototype.walk=function(e){for(var n,t=0,r=this.children.length;t<r;t++)(n=this.children[t])[o]?n.walk(e):""!==n&&e(n,{source:this.source,line:this.line,column:this.column,name:this.name})},s.prototype.join=function(e){var n,t,r=this.children.length;if(r>0){for(n=[],t=0;t<r-1;t++)n.push(this.children[t]),n.push(e);n.push(this.children[t]),this.children=n}return this},s.prototype.replaceRight=function(e,n){var t=this.children[this.children.length-1];return t[o]?t.replaceRight(e,n):"string"==typeof t?this.children[this.children.length-1]=t.replace(e,n):this.children.push("".replace(e,n)),this},s.prototype.setSourceContent=function(e,n){this.sourceContents[i.toSetString(e)]=n},s.prototype.walkSourceContents=function(e){for(var n=0,t=this.children.length;n<t;n++)this.children[n][o]&&this.children[n].walkSourceContents(e);var r=Object.keys(this.sourceContents);for(n=0,t=r.length;n<t;n++)e(i.fromSetString(r[n]),this.sourceContents[r[n]])},s.prototype.toString=function(){var e="";return this.walk((function(n){e+=n})),e},s.prototype.toStringWithSourceMap=function(e){var n={code:"",line:1,column:0},t=new r(e),i=!1,a=null,o=null,s=null,c=null;return this.walk((function(e,r){n.code+=e,null!==r.source&&null!==r.line&&null!==r.column?(a===r.source&&o===r.line&&s===r.column&&c===r.name||t.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:n.line,column:n.column},name:r.name}),a=r.source,o=r.line,s=r.column,c=r.name,i=!0):i&&(t.addMapping({generated:{line:n.line,column:n.column}}),a=null,i=!1);for(var u=0,l=e.length;u<l;u++)10===e.charCodeAt(u)?(n.line++,n.column=0,u+1===l?(a=null,i=!1):i&&t.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:n.line,column:n.column},name:r.name})):n.column++})),this.walkSourceContents((function(e,n){t.setSourceContent(e,n)})),{code:n.code,map:t}},n.SourceNode=s},function(e,n){var t=Object.prototype.toString,r="function"==typeof Buffer.alloc&&"function"==typeof Buffer.allocUnsafe&&"function"==typeof Buffer.from;e.exports=function(e,n,i){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return a=e,"ArrayBuffer"===t.call(a).slice(8,-1)?function(e,n,t){n>>>=0;var i=e.byteLength-n;if(i<0)throw new RangeError("'offset' is out of bounds");if(void 0===t)t=i;else if((t>>>=0)>i)throw new RangeError("'length' is out of bounds");return r?Buffer.from(e.slice(n,n+t)):new Buffer(new Uint8Array(e.slice(n,n+t)))}(e,n,i):"string"==typeof e?function(e,n){if("string"==typeof n&&""!==n||(n="utf8"),!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');return r?Buffer.from(e,n):new Buffer(e,n)}(e,n):r?Buffer.from(e):new Buffer(e);var a}},function(e,n,t){"use strict";t.r(n),t.d(n,"printError",(function(){return My})),t.d(n,"main",(function(){return jy}));var r=t(69),i=t(70);function a(e,n,t,r,i){i.addArgument([e,n],{dest:t,metavar:r,required:!0})}function o(e){var n,t,o=(n=r.version,t=r.name,new i.ArgumentParser({version:n,prog:t}));return a("-s","--site-name","siteName","STRING",o),a("-e","--entries-directory","entriesDirectory","PATH",o),a("-a","--about-path","aboutPath","PATH",o),a("-f","--favicon-path","faviconPath","PATH",o),a("-u","--uploads-directory","uploadsDirectory","PATH",o),o.parseArgs()}function s(e,n,t,r,i,a){return new Date(e,n-1|0,t,void 0!==r?r:0,void 0!==i?i:0)}function c(e){return e.getMonth()+1|0}var u=t(9);function l(e,n){return n.tag=e,n}var p=["Sys_error",-1],f=["Failure",-2],d=["Invalid_argument",-3],m=["End_of_file",-4],h=["Division_by_zero",-5],g=["Not_found",-6],v=["Assert_failure",-10];function x(e,n,t){for(var r=new Array(t),i=0,a=n;i<t;)r[i]=e[a],i=i+1|0,a=a+1|0;return r}function b(e,n,t){if(n<0||n>=e.length)throw[d,"index out of bounds"];e[n]=t}function y(e,n){if(n<0||n>=e.length)throw[d,"index out of bounds"];return e[n]}function w(e,n){for(var t=new Array(e),r=0;r<e;++r)t[r]=n;return t}function k(e,n){for(;;){var t=n,r=e,i=r.length,a=0===i?1:i,o=a-t.length|0;if(0===o)return r.apply(null,t);if(o>=0)return function(e,n){return function(t){return k(e,n.concat([t]))}}(r,t);n=x(t,a,0|-o),e=r.apply(null,x(t,0,a))}}function _(e,n){var t=e.length;if(1===t)return e(n);switch(t){case 1:return e(n);case 2:return function(t){return e(n,t)};case 3:return function(t,r){return e(n,t,r)};case 4:return function(t,r,i){return e(n,t,r,i)};case 5:return function(t,r,i,a){return e(n,t,r,i,a)};case 6:return function(t,r,i,a,o){return e(n,t,r,i,a,o)};case 7:return function(t,r,i,a,o,s){return e(n,t,r,i,a,o,s)};default:return k(e,[n])}}function S(e){return 1===e.length?e:function(n){return _(e,n)}}function E(e,n,t){var r=e.length;if(2===r)return e(n,t);switch(r){case 1:return k(e(n),[t]);case 2:return e(n,t);case 3:return function(r){return e(n,t,r)};case 4:return function(r,i){return e(n,t,r,i)};case 5:return function(r,i,a){return e(n,t,r,i,a)};case 6:return function(r,i,a,o){return e(n,t,r,i,a,o)};case 7:return function(r,i,a,o,s){return e(n,t,r,i,a,o,s)};default:return k(e,[n,t])}}function A(e){return 2===e.length?e:function(n,t){return E(e,n,t)}}function $(e,n,t,r){var i=e.length;if(3===i)return e(n,t,r);switch(i){case 1:return k(e(n),[t,r]);case 2:return k(e(n,t),[r]);case 3:return e(n,t,r);case 4:return function(i){return e(n,t,r,i)};case 5:return function(i,a){return e(n,t,r,i,a)};case 6:return function(i,a,o){return e(n,t,r,i,a,o)};case 7:return function(i,a,o,s){return e(n,t,r,i,a,o,s)};default:return k(e,[n,t,r])}}function C(e){return 3===e.length?e:function(n,t,r){return $(e,n,t,r)}}function O(e,n,t,r,i){var a=e.length;if(4===a)return e(n,t,r,i);switch(a){case 1:return k(e(n),[t,r,i]);case 2:return k(e(n,t),[r,i]);case 3:return k(e(n,t,r),[i]);case 4:return e(n,t,r,i);case 5:return function(a){return e(n,t,r,i,a)};case 6:return function(a,o){return e(n,t,r,i,a,o)};case 7:return function(a,o,s){return e(n,t,r,i,a,o,s)};default:return k(e,[n,t,r,i])}}function M(e,n,t,r,i,a){var o=e.length;if(5===o)return e(n,t,r,i,a);switch(o){case 1:return k(e(n),[t,r,i,a]);case 2:return k(e(n,t),[r,i,a]);case 3:return k(e(n,t,r),[i,a]);case 4:return k(e(n,t,r,i),[a]);case 5:return e(n,t,r,i,a);case 6:return function(o){return e(n,t,r,i,a,o)};case 7:return function(o,s){return e(n,t,r,i,a,o,s)};default:return k(e,[n,t,r,i,a])}}function j(e,n,t,r,i,a,o){var s=e.length;if(6===s)return e(n,t,r,i,a,o);switch(s){case 1:return k(e(n),[t,r,i,a,o]);case 2:return k(e(n,t),[r,i,a,o]);case 3:return k(e(n,t,r),[i,a,o]);case 4:return k(e(n,t,r,i),[a,o]);case 5:return k(e(n,t,r,i,a),[o]);case 6:return e(n,t,r,i,a,o);case 7:return function(s){return e(n,t,r,i,a,o,s)};default:return k(e,[n,t,r,i,a,o])}}p.tag=248,f.tag=248,d.tag=248,m.tag=248,h.tag=248,g.tag=248,v.tag=248;var F=[];function R(e){if(void 0===e){var n=[F,0];return n.tag=256,n}if(null===e||e[0]!==F)return e;var t=e[1]+1|0,r=[F,t];return r.tag=256,r}function T(e){return null===e?void 0:R(e)}function q(e){if(null===e||e[0]!==F)return e;var n=e[1];return 0===n?void 0:[F,n-1|0]}function L(e,n){if(n in e)return R(e[n])}var N=t(71);function P(e){return function(e,n){switch(n){case 0:return void 0===e;case 1:return null===e;case 2:return"boolean"==typeof e;case 3:return"number"==typeof e;case 4:return"string"==typeof e;case 5:return"function"==typeof e;case 6:return"object"==typeof e;case 7:return"symbol"==typeof e}}(e,4)?l(0,[e]):l(1,[e])}function D(e){var n=P(N.contentType(e));return n.tag?void 0:n[0]}var I={contents:0};function z(e){var n=[e,(I.contents=I.contents+1,I.contents)];return n.tag=248,n}z("Caml_js_exceptions.Error");var B=function(e){return e>2147483647?2147483647:e<-2147483648?-2147483648:Math.ceil(e)};function U(e,n){return e<n?-1:e===n?0:1}function H(e,n){return e===n?0:e<n?-1:1}function G(e,n){return e<n?e:n}function W(e,n){return e>n?e:n}function V(e,n){if(n>=0&&n<e.length)return R(e[n])}function Y(e,n){if(!(n>=0&&n<e.length))throw new Error('File "belt_Array.ml", line 25, characters 6-12');return e[n]}function Z(e,n){for(var t=e.length,r=n.length,i=t<r?t:r,a=new Array(i),o=0;o<i;++o)a[o]=[e[o],n[o]];return a}function X(e,n,t){return function(e,n,t){for(var r=e.length,i=n.length,a=r<i?r:i,o=new Array(a),s=0;s<a;++s)o[s]=t(e[s],n[s]);return o}(e,n,A(t))}function K(e,n){for(var t=e.length,r=n.length,i=new Array(t+r|0),a=0;a<t;++a)i[a]=e[a];for(var o=0;o<r;++o)i[t+o|0]=n[o];return i}function J(e,n){for(var t=e.length,r=n<0?W(t+n|0,0):n,i=t-r|0,a=new Array(i),o=0;o<i;++o)a[o]=e[r+o|0];return a}function Q(e,n,t,r,i){if(r<=n)for(var a=0;a<i;++a)t[a+r|0]=e[a+n|0];else for(var o=i-1|0;o>=0;--o)t[o+r|0]=e[o+n|0]}function ee(e,n){var t=e.length;if(0===t||1===t)return t;var r=e[0],i=e[1];if(!n(r,i))return n(i,r)?0|-function(e,n,t,r,i){for(;;){var a=t,o=n;if(a>=r)return a;var s=e[a];if(!i(s,o))return a;t=a+1|0,n=s}}(e,i,2,t,n):1;for(var a=i,o=2;;){var s=o,c=a;if(s>=t)return s;var u=e[s];if(!n(c,u))return s;o=s+1|0,a=u}}function ne(e,n,t,r,i,a,o,s,c){for(var u=n+t|0,l=i+a|0,p=n,f=e[n],d=i,m=r[i],h=s;;){var g=h,v=m,x=d,b=f,y=p;if(c(b,v)<=0){o[g]=b;var w=y+1|0;if(w>=u)return Q(r,x,o,g+1|0,l-x|0);h=g+1|0,f=e[w],p=w}else{o[g]=v;var k=x+1|0;if(k>=l)return Q(e,y,o,g+1|0,u-y|0);h=g+1|0,m=r[k],d=k}}}function te(e,n,t,r,i,a){for(var o=0;o<i;++o){for(var s=e[n+o|0],c=(r+o|0)-1|0;c>=r&&a(t[c],s)>0;)t[c+1|0]=t[c],c=c-1|0;t[c+1|0]=s}}function re(e,n,t,r,i,a){if(i<=5)return te(e,n,t,r,i,a);var o=i/2|0,s=i-o|0;return re(e,n+o|0,t,r+o|0,s,a),re(e,n,e,n+s|0,o,a),ne(e,n+s|0,o,t,r+o|0,s,t,r,a)}function ie(e,n){var t=e.length;if(t<=5)return te(e,0,e,0,t,n);var r=t/2|0,i=t-r|0,a=new Array(i);return re(e,r,a,0,i,n),re(e,0,e,i,r,n),ne(e,i,r,a,0,i,e,0,n)}function ae(e,n){return function(e,n){var t=e.slice(0);return ie(t,n),t}(e,A(n))}function oe(e){return void 0!==e?e.height:0}function se(e,n,t,r){var i=oe(e),a=oe(r);return{key:n,value:t,height:i>=a?i+1|0:a+1|0,left:e,right:r}}function ce(e,n){return{key:e,value:n,height:1,left:void 0,right:void 0}}function ue(e,n){return void 0===n||void 0!==e&&e.height>=n.height}function le(e,n){return e.value===n?e:{key:e.key,value:n,height:e.height,left:e.left,right:e.right}}function pe(e,n,t,r){var i=void 0!==e?e.height:0,a=void 0!==r?r.height:0;if(i>(a+2|0)){var o=e.key,s=e.value,c=e.left,u=e.right;return oe(c)>=oe(u)?se(c,o,s,se(u,n,t,r)):se(se(c,o,s,u.left),u.key,u.value,se(u.right,n,t,r))}if(a<=(i+2|0))return{key:n,value:t,height:i>=a?i+1|0:a+1|0,left:e,right:r};var l=r.key,p=r.value,f=r.left,d=r.right;return oe(d)>=oe(f)?se(se(e,n,t,f),l,p,d):se(se(e,n,t,f.left),f.key,f.value,se(f.right,l,p,d))}function fe(e){for(;;){var n=e,t=n.left;if(void 0===t)return n.key;e=t}}function de(e){if(void 0!==e)return R(fe(e))}function me(e){for(;;){var n=e,t=n.right;if(void 0===t)return n.key;e=t}}function he(e){if(void 0!==e)return R(me(e))}function ge(e){for(;;){var n=e,t=n.left;if(void 0===t)return[n.key,n.value];e=t}}function ve(e){if(void 0!==e)return ge(e)}function xe(e){for(;;){var n=e,t=n.right;if(void 0===t)return[n.key,n.value];e=t}}function be(e){if(void 0!==e)return xe(e)}function ye(e,n,t){var r=e.left,i=e.right,a=e.key,o=e.value;return void 0!==r?pe(ye(r,n,t),a,o,i):(n.contents=a,t.contents=o,i)}function we(e){return void 0===e}function ke(e,n){for(;;){if(void 0===e)return n;n=[e,n],e=e.left}}function _e(e,n){if(void 0!==e){var t=_e(e.left,n);if(void 0!==t)return t;var r=e.key,i=e.value;if(n(r,i))return[r,i];var a=_e(e.right,n);return void 0!==a?a:void 0}}function Se(e,n){for(;;){var t=e;if(void 0===t)return;Se(t.left,n),n(t.key,t.value),e=t.right}}function Ee(e,n){if(void 0!==e){var t=Ee(e.left,n),r=n(e.value),i=Ee(e.right,n);return{key:e.key,value:r,height:e.height,left:t,right:i}}}function Ae(e,n){if(void 0!==e){var t=e.key,r=Ae(e.left,n),i=n(t,e.value),a=Ae(e.right,n);return{key:t,value:i,height:e.height,left:r,right:a}}}function $e(e,n,t){for(;;){var r=n,i=e;if(void 0===i)return r;var a=i.key,o=i.value,s=i.left,c=i.right;n=t($e(s,r,t),a,o),e=c}}function Ce(e,n){for(;;){var t=e;if(void 0===t)return!0;if(!n(t.key,t.value))return!1;if(!Ce(t.left,n))return!1;e=t.right}}function Oe(e,n){for(;;){var t=e;if(void 0===t)return!1;if(n(t.key,t.value))return!0;if(Oe(t.left,n))return!0;e=t.right}}function Me(e,n,t,r){if(void 0===e)return function e(n,t,r){return void 0!==n?pe(e(n.left,t,r),n.key,n.value,n.right):ce(t,r)}(r,n,t);if(void 0===r)return function e(n,t,r){return void 0!==n?pe(n.left,n.key,n.value,e(n.right,t,r)):ce(t,r)}(e,n,t);var i=e.key,a=e.value,o=e.height,s=e.left,c=e.right,u=r.key,l=r.value,p=r.height,f=r.left,d=r.right;return o>(p+2|0)?pe(s,i,a,Me(c,n,t,r)):p>(o+2|0)?pe(Me(e,n,t,f),u,l,d):se(e,n,t,r)}function je(e,n){if(void 0===e)return n;if(void 0===n)return e;var t={contents:n.key},r={contents:n.value},i=ye(n,t,r);return Me(e,t.contents,r.contents,i)}function Fe(e,n,t,r){return void 0!==t?Me(e,n,q(t),r):je(e,r)}function Re(e,n){if(void 0!==e){var t=e.key,r=e.value,i=Re(e.left,n),a=n(t,r),o=Re(e.right,n);return a?Me(i,t,r,o):je(i,o)}}function Te(e,n){if(void 0!==e){var t=e.key,r=e.value,i=Te(e.left,n),a=n(t,r),o=Te(e.right,n);return void 0!==a?Me(i,t,q(a),o):je(i,o)}}function qe(e,n){if(void 0===e)return[void 0,void 0];var t=e.key,r=e.value,i=qe(e.left,n),a=i[1],o=i[0],s=n(t,r),c=qe(e.right,n),u=c[1],l=c[0];return s?[Me(o,t,r,l),je(a,u)]:[je(o,l),Me(a,t,r,u)]}function Le(e){var n=e.left,t=e.right;return(1+(void 0!==n?Le(n):0)|0)+(void 0!==t?Le(t):0)|0}function Ne(e){return void 0!==e?Le(e):0}function Pe(e){return function e(n,t){for(;;){var r=t,i=n;if(void 0===i)return r;var a=i.key,o=i.value,s=i.left;t=[[a,o],e(i.right,r)],n=s}}(e,0)}function De(e){if(void 0===e)return[];var n=Le(e),t=new Array(n);return function e(n,t,r){for(;;){var i=t,a=n,o=a.left,s=a.key,c=a.right,u=void 0!==o?e(o,i,r):i;r[u]=[s,a.value];var l=u+1|0;if(void 0===c)return l;t=l,n=c}}(e,0,t),t}function Ie(e){if(void 0===e)return[];var n=Le(e),t=new Array(n);return function e(n,t,r){for(;;){var i=t,a=n,o=a.key,s=a.left,c=a.right,u=void 0!==s?e(s,i,r):i;r[u]=o;var l=u+1|0;if(void 0===c)return l;t=l,n=c}}(e,0,t),t}function ze(e){if(void 0===e)return[];var n=Le(e),t=new Array(n);return function e(n,t,r){for(;;){var i=t,a=n,o=a.left,s=a.right,c=void 0!==o?e(o,i,r):i;r[c]=a.value;var u=c+1|0;if(void 0===s)return u;t=u,n=s}}(e,0,t),t}function Be(e,n,t){switch(t){case 0:return;case 1:var r=e[n];return ce(r[0],r[1]);case 2:var i=e[n],a=e[n-1|0],o=i;return{key:a[0],value:a[1],height:2,left:ce(o[0],o[1]),right:void 0};case 3:var s=e[n],c=e[n-1|0],u=e[n-2|0],l=c,p=s;return{key:l[0],value:l[1],height:2,left:ce(p[0],p[1]),right:ce(u[0],u[1])};default:var f=t/2|0,d=Be(e,n,f),m=e[n-f|0],h=Be(e,(n-f|0)-1|0,(t-f|0)-1|0);return se(d,m[0],m[1],h)}}function Ue(e,n,t){switch(t){case 0:return;case 1:var r=e[n];return ce(r[0],r[1]);case 2:var i=e[n],a=e[n+1|0],o=i;return{key:a[0],value:a[1],height:2,left:ce(o[0],o[1]),right:void 0};case 3:var s=e[n],c=e[n+1|0],u=e[n+2|0],l=c,p=s;return{key:l[0],value:l[1],height:2,left:ce(p[0],p[1]),right:ce(u[0],u[1])};default:var f=t/2|0,d=Ue(e,n,f),m=e[n+f|0],h=Ue(e,1+(n+f|0)|0,(t-f|0)-1|0);return se(d,m[0],m[1],h)}}function He(e,n,t,r){var i=Ne(e),a=Ne(n);if(i!==a)return i<a?-1:1;for(var o=ke(e,0),s=ke(n,0);;){var c=s,u=o;if(!u)return 0;if(!c)return 0;var l=c[0],p=u[0],f=t(p.key,l.key);if(0!==f)return f;var d=r(p.value,l.value);if(0!==d)return d;s=ke(l.right,c[1]),o=ke(p.right,u[1])}}function Ge(e,n,t,r){if(Ne(e)!==Ne(n))return!1;for(var i=ke(e,0),a=ke(n,0);;){var o=a,s=i;if(!s)return!0;if(!o)return!0;var c=o[0],u=s[0];if(0!==t(u.key,c.key)||!r(u.value,c.value))return!1;a=ke(c.right,o[1]),i=ke(u.right,s[1])}}function We(e){var n=e.left;e.left=n.right,n.right=e;var t=oe(e.left),r=oe(e.right);e.height=(t>r?t:r)+1|0;var i=oe(n.left),a=e.height;return n.height=(i>a?i:a)+1|0,n}function Ve(e){var n=e.right;e.right=n.left,n.left=e;var t=oe(e.left),r=oe(e.right);e.height=(t>r?t:r)+1|0;var i=oe(n.right),a=e.height;return n.height=(i>a?i:a)+1|0,n}function Ye(e){var n=oe(e.left),t=oe(e.right);return e.height=(n>t?n:t)+1|0,e}function Ze(e){var n,t,r=e.left,i=e.right,a=oe(r),o=oe(i);if(a>(2+o|0))return ue(r.left,r.right)?Ye(We(e)):Ye((t=Ve((n=e).left),n.left=t,We(n)));if(o>(2+a|0)){var s=i.left;return ue(i.right,s)?Ye(Ve(e)):Ye(function(e){var n=We(e.right);return e.right=n,Ve(e)}(e))}return e.height=(a>o?a:o)+1|0,e}function Xe(e,n,t,r){if(void 0===e)return ce(n,t);var i=r(n,e.key);if(0===i)return e.value=t,e;var a=e.left,o=e.right;if(i<0){var s=Xe(a,n,t,r);e.left=s}else e.right=Xe(o,n,t,r);return Ze(e)}var Ke=function(e,n){for(var t in e)n(t)};function Je(e,n){for(;;){var t=n,r=e;if(r===t)return 0;var i=typeof r,a=typeof t;switch(i){case"boolean":if("boolean"===a)return $=t,r?$?0:1:$?-1:0;break;case"function":if("function"===a)throw[d,"compare: functional value"];break;case"number":if("number"===a)return U(r,t);break;case"string":return"string"===a?H(r,t):1;case"undefined":return-1}switch(a){case"string":return-1;case"undefined":return 1;default:if("boolean"===i)return 1;if("boolean"===a)return-1;if("function"===i)return 1;if("function"===a)return-1;if("number"===i)return null===t||256===t.tag?1:-1;if("number"===a)return null===r||256===r.tag?-1:1;if(null===r)return 256===t.tag?1:-1;if(null===t)return 256===r.tag?-1:1;var o=0|r.tag,s=0|t.tag;if(250===o){e=r[0];continue}if(250===s){n=t[0];continue}if(256===o)return 256===s?U(r[1],t[1]):-1;if(248===o)return U(r[1],t[1]);if(251===o)throw[d,"equal: abstract value"];if(o!==s)return o<s?-1:1;var c=0|r.length,u=0|t.length;if(c===u){if(!Array.isArray(r)){if(r instanceof Date&&t instanceof Date)return r-t;var l={contents:void 0},p={contents:void 0},f=function(e,n){var t=e[2],r=e[1];if(!r.hasOwnProperty(n)||Je(e[0][n],r[n])>0){var i=t.contents;return void 0!==i&&n>=i?void 0:void(t.contents=n)}},m=function(e){return function(n){return f(e,n)}}([r,t,p]),h=function(e){return function(n){return f(e,n)}}([t,r,l]);Ke(r,m),Ke(t,h);var g=l.contents,v=p.contents;return void 0!==g?void 0!==v?H(g,v):-1:void 0!==v?1:0}for(var x=0;;){var b=x;if(b===c)return 0;var y=Je(r[b],t[b]);if(0!==y)return y;x=b+1|0}}else if(c<u)for(var w=0;;){var k=w;if(k===c)return-1;var _=Je(r[k],t[k]);if(0!==_)return _;w=k+1|0}else for(var S=0;;){var E=S;if(E===u)return 1;var A=Je(r[E],t[E]);if(0!==A)return A;S=E+1|0}}}var $}function Qe(e,n){for(;;){var t=n,r=e;if(r===t)return!0;var i=typeof r;if("string"===i||"number"===i||"boolean"===i||"undefined"===i||null===r)return!1;var a=typeof t;if("function"===i||"function"===a)throw[d,"equal: functional value"];if("number"===a||"undefined"===a||null===t)return!1;var o=0|r.tag,s=0|t.tag;if(250!==o)if(250!==s){if(248===o)return r[1]===t[1];if(251===o)throw[d,"equal: abstract value"];if(o!==s)return!1;if(256===o)return r[1]===t[1];var c=0|r.length;if(c!==(0|t.length))return!1;if(!Array.isArray(r)){if(r instanceof Date&&t instanceof Date)return!(r>t||r<t);var u={contents:!0},l=function(e,n){return function(t){e.hasOwnProperty(t)||(n.contents=!1)}}(t,u),p=function(e,n,t){return function(r){e.hasOwnProperty(r)&&Qe(n[r],e[r])||(t.contents=!1)}}(r,t,u);return Ke(r,l),u.contents&&Ke(t,p),u.contents}for(var f=0;;){var m=f;if(m===c)return!0;if(!Qe(r[m],t[m]))return!1;f=m+1|0}}else n=t[0];else e=r[0]}}function en(e,n){return function(e,n){return Je(e,n)<0}(e,n)?939214151:Qe(e,n)?-718572442:159039494}function nn(e){return{$less$colon$great:e.append}}function tn(e){return{$less$colon$great:e.append}}function rn(e){return{$less$$great:e.map,$less$hash$great:function(n,t){return E(e.map,t,n)},$less$star$great:e.apply}}function an(e){var n=e.flat_map;return{$less$$great:e.map,$less$hash$great:function(n,t){return E(e.map,t,n)},$less$star$great:e.apply,$great$great$eq:n,$eq$less$less:function(n,t){return E(e.flat_map,t,n)},$great$eq$great:function(e,t,r){return E(n,_(e,r),t)},$less$eq$less:function(n,t,r){var i=_(t,r);return E(e.flat_map,i,n)}}}function on(e){return{$less$pipe$great:e.alt,$less$$great:e.map,$less$hash$great:function(n,t){return E(e.map,t,n)},$less$star$great:e.apply}}function sn(e){return{$less$dot:e.compose,$great$dot:function(n,t){return E(e.compose,t,n)}}}function cn(e){return{$eq$pipe$eq:e.eq}}function un(e){var n=function(e){return{less_than:function(n,t){return 939214151===E(e.compare,n,t)},greater_than:function(n,t){return 159039494===E(e.compare,n,t)},less_than_or_equal:function(n,t){return 159039494!==E(e.compare,n,t)},greater_than_or_equal:function(n,t){return 939214151!==E(e.compare,n,t)}}}(e);return{$less$pipe$pipe:n.less_than,$pipe$pipe$great:n.greater_than,$less$pipe$eq:n.less_than_or_equal,$great$pipe$eq:n.greater_than_or_equal}}function ln(e){return{$pipe$plus$pipe:e.add,$pipe$star$pipe:e.multiply,$pipe$neg$pipe:e.subtract,$pipe$slash$pipe:e.divide,$pipe$percent$pipe:e.modulo}}function pn(e,n,t){return E(e,t,n)}function fn(e,n){return e}function dn(e,n,t){return _(e,_(n,t))}var mn={compose:dn};var hn=function(e){return e};sn(mn).$great$dot;var gn=sn(mn),vn=hn,xn=gn.$less$dot;function bn(e,n){return[E(xn,e[0],n[0])]}var yn={append:bn,empty:[vn]},wn=(tn({append:bn}),hn),kn=gn.$less$dot;function _n(e){return{$$void:function(n){return E(e.map,(function(e){return fn(void 0)}),n)},void_right:function(n,t){return E(e.map,(function(e){return fn(n)}),t)},void_left:function(n,t){return E(e.map,(function(e){return fn(t)}),n)},flap:function(n,t){return E(e.map,(function(e){return _(e,t)}),n)}}}function Sn(e){var n=rn(e),t=function(e,t){return E(n.$less$star$great,E(n.$less$$great,fn,e),t)},r=function(e,t){return E(n.$less$star$great,E(n.$less$$great,(function(e){return fn(wn)}),e),t)};return{I:n,apply_first:t,apply_second:r,apply_both:function(e,t){return E(n.$less$star$great,E(n.$less$$great,(function(e,n){return[e,n]}),e),t)},lift2:function(e,t,r){return E(n.$less$star$great,E(n.$less$$great,e,t),r)},lift3:function(e,t,r,i){return E(n.$less$star$great,E(n.$less$star$great,E(n.$less$$great,e,t),r),i)},lift4:function(e,t,r,i,a){return E(n.$less$star$great,E(n.$less$star$great,E(n.$less$star$great,E(n.$less$$great,e,t),r),i),a)},lift5:function(e,t,r,i,a,o){return E(n.$less$star$great,E(n.$less$star$great,E(n.$less$star$great,E(n.$less$star$great,E(n.$less$$great,e,t),r),i),a),o)},Infix:{$less$star:t,$star$great:r}}}function En(e){var n=an(e),t=rn(e),r=function(n,t){return n?t:_(e.pure,void 0)},i=function(n,t){return n?_(e.pure,void 0):t};return{I:n,A:{I:t,liftA1:function(n,r){return E(t.$less$star$great,_(e.pure,n),r)},when_:r,unless:i},flatten:function(e){return E(n.$great$great$eq,e,wn)},compose_kliesli:function(e,t,r){return E(n.$great$great$eq,_(e,r),t)},compose_kliesli_flipped:function(e,t,r){return E(n.$eq$less$less,e,_(t,r))},if_m:function(e,t,r){return E(n.$great$great$eq,e,(function(e){return e?t:r}))},liftM1:function(t,r){return E(n.$great$great$eq,r,(function(n){return _(e.pure,_(t,n))}))},ap:function(t,r){return E(n.$great$great$eq,t,(function(t){return E(n.$great$great$eq,r,(function(n){return _(e.pure,_(t,n))}))}))},when_:function(e,t){return E(n.$great$great$eq,e,(function(e){return r(e,t)}))},unless:function(e,t){return E(n.$great$great$eq,e,(function(e){return i(e,t)}))}}}function An(e){return{Semigroup:function(n){var t=_(e.Fold_Map_Any,yn),r=nn(n),i=function(e,n,i){var a=E(t.fold_map,(function(t){return[function(i){return E(r.$less$colon$great,E(r.$less$colon$great,e,_(n,t)),i)}]}),i);return _(a[0],e)};return{FM:t,I:r,surround_map:i,surround:function(e,n){return i(e,wn,n)}}},Monoid:function(n){var t=_(e.Fold_Map,n),r=nn(n),i=_(t.fold_map,wn);return{FM:t,I:r,fold:i,intercalate:function(t,i){return $(e.fold_left,(function(e,n){return e.init?{init:!1,acc:n}:{init:!1,acc:E(r.$less$colon$great,E(r.$less$colon$great,e.acc,t),n)}}),{init:!0,acc:n.empty},i).acc}}},Applicative:function(n){var t=rn(n),r=function(e,n){return E(t.$less$star$great,E(t.$less$$great,fn,e),n)},i=function(e,n){return E(t.$less$star$great,E(t.$less$$great,(function(e){return fn(wn)}),e),n)},a=function(t,r){return $(e.fold_right,E(kn,i,t),_(n.pure,void 0),r)};return{Fn:{I:t,apply_first:r,apply_second:i,apply_both:function(e,n){return E(t.$less$star$great,E(t.$less$$great,(function(e,n){return[e,n]}),e),n)},lift2:function(e,n,r){return E(t.$less$star$great,E(t.$less$$great,e,n),r)},lift3:function(e,n,r,i){return E(t.$less$star$great,E(t.$less$star$great,E(t.$less$$great,e,n),r),i)},lift4:function(e,n,r,i,a){return E(t.$less$star$great,E(t.$less$star$great,E(t.$less$star$great,E(t.$less$$great,e,n),r),i),a)},lift5:function(e,n,r,i,a,o){return E(t.$less$star$great,E(t.$less$star$great,E(t.$less$star$great,E(t.$less$star$great,E(t.$less$$great,e,n),r),i),a),o)},Infix:{$less$star:r,$star$great:i}},traverse$prime:a,sequence$prime:function(e){return a(wn,e)}}},Plus:function(n){return{one_of:function(t){return $(e.fold_right,n.alt,n.empty,t)}}},Monad:function(n){var t=an(n);return{I:t,fold_monad:function(r,i,a){return $(e.fold_left,(function(e,n){return E(t.$great$great$eq,e,(function(e){return pn(r,n,e)}))}),_(n.pure,i),a)}}}}}function $n(e){var n=Sn(e),t=n.lift2,r=n.lift3,i=n.lift4,a=n.lift5;return{BsApplyExtensions:n,applyFirst:n.apply_first,applySecond:n.apply_second,map2:t,map3:r,map4:i,map5:a,tuple2:n.apply_both,tuple3:function(e,n,t){return O(r,(function(e,n,t){return[e,n,t]}),e,n,t)},tuple4:function(e,n,t,r){return M(i,(function(e,n,t,r){return[e,n,t,r]}),e,n,t,r)},tuple5:function(e,n,t,r,i){return j(a,(function(e,n,t,r,i){return[e,n,t,r,i]}),e,n,t,r,i)},mapTuple2:function(e,n){return $(t,e,n[0],n[1])},mapTuple3:function(e,n){return O(r,e,n[0],n[1],n[2])},mapTuple4:function(e,n){return M(i,e,n[0],n[1],n[2],n[3])},mapTuple5:function(e,n){return j(a,e,n[0],n[1],n[2],n[3],n[4])}}}function Cn(e){var n=Sn(e),t=n.apply_first,r=n.apply_second,i=n.lift2,a=n.lift3,o=n.lift4,s=n.lift5,c=n.apply_both;return{ApplyExtensions:{BsApplyExtensions:n,applyFirst:t,applySecond:r,map2:i,map3:a,map4:o,map5:s,tuple2:c,tuple3:function(e,n,t){return O(a,(function(e,n,t){return[e,n,t]}),e,n,t)},tuple4:function(e,n,t,r){return M(o,(function(e,n,t,r){return[e,n,t,r]}),e,n,t,r)},tuple5:function(e,n,t,r,i){return j(s,(function(e,n,t,r,i){return[e,n,t,r,i]}),e,n,t,r,i)},mapTuple2:function(e,n){return $(i,e,n[0],n[1])},mapTuple3:function(e,n){return O(a,e,n[0],n[1],n[2])},mapTuple4:function(e,n){return M(o,e,n[0],n[1],n[2],n[3])},mapTuple5:function(e,n){return j(s,e,n[0],n[1],n[2],n[3],n[4])}},$less$star$great:e.apply,$less$star:t,$star$great:r}}function On(e){var n=En(e);return{BsMonadExtensions:n,flatMap:function(n,t){return E(e.flat_map,t,n)},flatten:function(n){return E(e.flat_map,n,(function(e){return e}))},composeKleisli:n.compose_kliesli,flipComposeKleisli:n.compose_kliesli_flipped,liftM1:n.liftM1,when_:n.when_,unless:n.unless}}function Mn(e){var n=En(e),t=function(n,t){return E(e.flat_map,t,n)},r=n.compose_kliesli,i=n.compose_kliesli_flipped;return{MonadExtensions:{BsMonadExtensions:n,flatMap:t,flatten:function(n){return E(e.flat_map,n,(function(e){return e}))},composeKleisli:r,flipComposeKleisli:i,liftM1:n.liftM1,when_:n.when_,unless:n.unless},$great$great$eq:e.flat_map,$eq$less$less:t,$great$eq$great:r,$less$eq$less:i}}function jn(e){var n=_n(e);return{BsFunctorExtensions:n,flipMap:function(n,t){return E(e.map,t,n)},$$void:n.$$void,voidRight:n.void_right,voidLeft:n.void_left,flap:n.flap}}function Fn(e){var n=_n(e),t=function(n,t){return E(e.map,t,n)},r=n.void_right,i=n.void_left,a=n.flap;return{FunctorExtensions:{BsFunctorExtensions:n,flipMap:t,$$void:n.$$void,voidRight:r,voidLeft:i,flap:a},$less$$great:e.map,$less$hash$great:t,$less$:r,$$great:i,$less$at$great:a}}function Rn(e){var n=function(e){var n=rn(e);return{I:n,liftA1:function(t,r){return E(n.$less$star$great,_(e.pure,t),r)},when_:function(n,t){return n?t:_(e.pure,void 0)},unless:function(n,t){return n?_(e.pure,void 0):t}}}(e),t=function(n){return n?E(e.apply,E(e.map,(function(e,n){return[e,n]}),n[0]),t(n[1])):_(e.pure,0)};return{BsApplicativeExtensions:n,liftA1:n.liftA1,when_:n.when_,unless:n.unless,all:t}}function Tn(e){return e}function qn(e,n,t){return _(e,_(n,t))}function Ln(e,n,t){return _(n,_(e,t))}var Nn={$less$less:qn,$great$great:Ln};function Pn(e,n){for(;;){var t=n,r=e;if(!r)return t;var i=[r[0],0];t[1]=i,n=i,e=r[1]}}function Dn(e,n){if(!(n<0)){if(0===n)return[0,e];if(e){var t=[e[0],0],r=function(e,n,t){for(;;){var r=t,i=n,a=e;if(0===a)return i;if(!i)return;var o=[i[0],0];r[1]=o,t=o,n=i[1],e=a-1|0}}(n-1|0,e[1],t);return void 0!==r?[t,r]:void 0}}}function In(e,n){if(!e)return n;var t=[e[0],0];return Pn(e[1],t)[1]=n,t}function zn(e,n){return function(e,n){if(!e)return 0;var t=[n(e[0]),0];return function(e,n,t){for(;;){var r=n,i=e;if(!i)return;var a=[t(i[0]),0];r[1]=a,n=a,e=i[1]}}(e[1],t,n),t}(e,S(n))}function Bn(e){for(var n=e,t=0;;){if(!n)return t;t=t+1|0,n=n[1]}}function Un(e){for(var n=e.length-1|0,t=0;;){var r=t,i=n;if(i<0)return r;t=[e[i],r],n=i-1|0}}function Hn(e){var n=Bn(e),t=new Array(n);return function(e,n,t){for(;;){var r=t,i=n;if(!r)return;e[i]=r[0],t=r[1],n=i+1|0}}(t,0,e),t}function Gn(e){return function(e,n){for(;;){var t=n,r=e;if(!r)return t;n=[r[0],t],e=r[1]}}(e,0)}function Wn(e,n,t){return function(e,n,t){for(;;){var r=e;if(!r)return n;n=t(n,r[0]),e=r[1]}}(e,n,A(t))}function Vn(e,n){return function(e,n){var t=Hn(e);return ie(t,n),Un(t)}(e,A(n))}function Yn(e,n){return function(e,n){if(void 0!==e)return R(n(q(e)))}(e,S(n))}function Zn(e){var n=e.length;return 0===n?[]:x(e,0,n)}function Xn(e){if(!e)return[];for(var n=w(function(e,n){for(;;){var t=e;if(!n)return t;n=n[1],e=t+1|0}}(0,e),e[0]),t=1,r=e[1];;){var i=r,a=t;if(!i)return n;n[a]=i[0],r=i[1],t=a+1|0}}function Kn(e,n,t){for(var r=t,i=n.length-1|0;i>=0;--i)r=E(e,n[i],r);return r}z("Array.Bottom");var Jn=function(e,n){var t=e.length;return 0===t?Zn(n):0===n.length?x(e,0,t):e.concat(n)},Qn=function(e,n,t){if(n<0||t<0||n>(e.length-t|0))throw[d,"Array.sub"];return x(e,n,t)},et=function(e,n){var t=n.length;if(0===t)return[];for(var r=w(t,_(e,n[0])),i=1;i<t;++i)r[i]=_(e,n[i]);return r},nt=function(e,n){var t=n.length;if(0===t)return[];for(var r=w(t,E(e,0,n[0])),i=1;i<t;++i)r[i]=E(e,i,n[i]);return r},tt=function(e,n,t){for(var r=n,i=0,a=t.length;i<a;++i)r=E(e,r,t[i]);return r},rt=Kn,it=function(e,n){for(var t=n.length,r=0;;){var i=r;if(i===t)return!0;if(!_(e,n[i]))return!1;r=i+1|0}};function at(e,n){return e+n}var ot={append:at,empty:""},st={eq:Qe},ct={eq:Qe,compare:en},ut=nn({append:at}),lt=cn(st),pt=un(ct);ut.$less$colon$great,lt.$eq$pipe$eq,pt.$less$pipe$pipe,pt.$pipe$pipe$great,pt.$less$pipe$eq,pt.$great$pipe$eq;function ft(e,n){return[_(e,n[0])]}function dt(e,n){return[_(e[0],n[0])]}function mt(e){return[e]}an({map:ft,apply:dt,pure:mt,flat_map:function(e,n){return _(n,e[0])}}),gn.$less$dot;function ht(e,n){var t=nn(e);return{I:t,fold_map_default_left:function(r,i){return $(n.fold_left,(function(e,n){return E(t.$less$colon$great,e,_(r,n))}),e.empty,i)},fold_map_default_right:function(r,i){return $(n.fold_right,(function(e,n){return E(t.$less$colon$great,_(r,e),n)}),e.empty,i)}}}function gt(e,n){var t=tn(e);return{I:t,fold_map_default_left:function(r,i){return $(n.fold_left,(function(e,n){return E(t.$less$colon$great,e,_(r,n))}),e.empty,i)},fold_map_default_right:function(r,i){return $(n.fold_right,(function(e,n){return E(t.$less$colon$great,_(r,e),n)}),e.empty,i)}}}function vt(e,n){var t,r={$less$$great:(t=e).map,$less$hash$great:function(e,n){return E(t.map,n,e)},$less$pipe$great:t.alt};return{I:r,fold_map_default_left:function(t,i){return $(n.fold_left,(function(e,n){return E(r.$less$pipe$great,e,_(t,n))}),e.empty,i)},fold_map_default_right:function(t,i){return $(n.fold_right,(function(e,n){return E(r.$less$pipe$great,_(t,e),n)}),e.empty,i)}}}function xt(e){return{sequence_default:function(n){return E(e.traverse,hn,n)}}}var bt,yt,wt,kt,_t,St,Et,At,$t,Ct,Ot,Mt,jt,Ft,Rt,Tt,qt,Lt,Nt,Pt,Dt,It,zt,Bt,Ut,Ht,Gt,Wt,Vt,Yt,Zt,Xt,Kt=(wt=function(e,n,t){for(var r,i=_(bt.length,n)<_(bt.length,t)?_(bt.length,n):_(bt.length,t),a=0,o=0;o<i;++o){var s=E(e,y(n,o),y(t,o));void 0!==r?b(r,a,s):r=E(bt.make,i,s),a=a+1|0}return void 0!==r?r:[]},kt=function(e,n){return wt((function(e,n){return[e,n]}),e,n)},_t=(bt={length:function(e){return e.length},make:w,append:Jn,map:et,mapi:function(e,n){return nt((function(n,t){return E(e,t,n)}),n)},fold_left:tt,every:it,slice:function(e,n,t){return Qn(t,e,n-e|0)}}).map,St={map:_t},Et=bt.append,At={map:_t,alt:Et},Ct={map:_t,apply:$t=function(e,n){return $(bt.fold_left,(function(e,t){return E(Et,e,E(_t,t,n))}),[],e)}},Mt={map:_t,apply:$t,pure:Ot=function(e){return[e]}},jt={map:_t,apply:$t,pure:Ot,flat_map:function(e,n){return $(bt.fold_left,(function(e,t){return E(Et,e,_(n,t))}),[],e)}},Ft=bt.fold_left,Nt={fold_left:Ft,fold_right:Rt=function(e,n){return function(t){return rt(e,t,n)}},Fold_Map:Tt=function(e){return{fold_map:ht(e,{fold_left:Ft,fold_right:Rt}).fold_map_default_left}},Fold_Map_Any:qt=function(e){return{fold_map:gt(e,{fold_left:Ft,fold_right:Rt}).fold_map_default_left}},Fold_Map_Plus:Lt=function(e){return{fold_map:vt(e,{fold_left:Ft,fold_right:Rt}).fold_map_default_left}}},Dt={unfold:Pt=function(e,n){var t=_(e,n);return void 0!==t?E(Et,[t[0]],Pt(e,t[1])):[]}},It={imap:function(e,n){return _(_t,e)}},zt={map:_t,extend:function(e,n){return E(bt.mapi,(function(t,r){return _(e,$(bt.slice,r,_(bt.length,n),n))}),n)}},Bt=an(jt),Ut={$less$less$eq:(yt=zt).extend,$eq$great$great:function(e,n){return E(yt.extend,n,e)}},Ht=Bt.$less$$great,Gt=Bt.$less$hash$great,Wt=Bt.$less$star$great,Vt=Bt.$great$great$eq,Yt=Bt.$eq$less$less,Zt=Bt.$great$eq$great,Xt=Bt.$less$eq$less,{zip_with:wt,zip:kt,Functor:St,Alt:At,Apply:Ct,Applicative:Mt,Monad:jt,Foldable:Nt,Unfoldable:Dt,Traversable:function(e){var n=rn(e),t=function(t){var r=_(e.pure,[]);return function(i){return rt((function(r,i){return E(n.$less$star$great,E(n.$less$star$great,_(e.pure,(function(e,n){return E(Et,[e],n)})),_(t,r)),i)}),i,r)}},r=xt({traverse:t});return{map:_t,fold_left:Ft,fold_right:Rt,Fold_Map:Tt,Fold_Map_Any:qt,Fold_Map_Plus:Lt,traverse:t,sequence:r.sequence_default}},Eq:function(e){return{eq:function(n,t){return _(bt.length,n)===_(bt.length,t)&&E(bt.every,(function(n){return E(e.eq,n[0],n[1])}),kt(n,t))}}},Ord:function(e){return{eq:function(n,t){return _(bt.length,n)===_(bt.length,t)&&E(bt.every,(function(n){return E(e.eq,n[0],n[1])}),kt(n,t))},compare:function(n,t){if(_(bt.length,n)!==_(bt.length,t))return _(bt.length,n)<_(bt.length,t)?939214151:159039494;var r={contents:0};return $(bt.fold_left,(function(n,i){var a=-718572442!==n?n:E(e.compare,i,y(t,r.contents));return r.contents=r.contents+1|0,a}),-718572442,n)}}},Show:function(e){var n=_(An(Nt).Monoid,ot);return{show:function(t){return"["+E(n.intercalate,", ",E(_t,e.show,t))+"]"}}},Invariant:It,Extend:zt,Infix:{$less$$great:Ht,$less$hash$great:Gt,$less$star$great:Wt,$great$great$eq:Vt,$eq$less$less:Yt,$great$eq$great:Zt,$less$eq$less:Xt,$less$less$eq:Ut.$less$less$eq,$eq$great$great:Ut.$eq$great$great}}),Jt=Kt.Functor,Qt=Kt.Alt,er=Kt.Apply,nr=Kt.Monad,tr=Kt.Foldable,rr=Kt.Traversable,ir=Kt.Invariant,ar=Kt.Extend;function or(e,n,t,r){return E(n,_(e,t),_(e,r))}function sr(e,n,t){return!E(e,n,t)}function cr(e){var n=function(n,t){return sr(e.eq,n,t)};return{eqWithConversion:function(n){return function(t,r){return or(n,e.eq,t,r)}},notEq:n,eqInverted:n,EqInverted:{eq:n},EqBy:function(n){return{eq:function(t,r){return E(e.eq,_(n.f,t),_(n.f,r))}}}}}function ur(e,n,t,r){return E(n,_(e,t),_(e,r))}function lr(e,n,t){var r=E(e,n,t);return 159039494!==r?r>=939214151?159039494:-718572442:939214151}function pr(e,n,t){var r=E(e,n,t);return 159039494!==r?r>=939214151?-1:0:1}function fr(e,n,t){return 159039494!==E(e,n,t)?n:t}function dr(e,n,t){return E(e,n,t)>=939214151?t:n}function mr(e,n,t){return 939214151===E(e,n,t)}function hr(e,n,t){return 159039494!==E(e,n,t)}function gr(e,n,t){return 159039494===E(e,n,t)}function vr(e,n,t){return 939214151!==E(e,n,t)}function xr(e,n,t){return vr(e.compare,n,t)}function br(e,n,t,r){return fr(e,t,dr(e,n,r))}function yr(e,n,t,r){return!!vr(e,r,n)&&hr(e,r,t)}function wr(e,n,t){return xr(e,t,n.zero)?t:E(n.subtract,n.zero,t)}function kr(e,n,t){return xr(e,t,n.zero)?n.one:E(n.subtract,n.zero,n.one)}function _r(e){var n=function(n,t){return lr(e.compare,n,t)},t=function(n,t){return mr(e.compare,n,t)},r=function(n,t){return hr(e.compare,n,t)},i=function(n,t){return gr(e.compare,n,t)},a=function(n,t){return vr(e.compare,n,t)},o=function(n,t){return mr(e.compare,t,n)},s=function(n,t){return hr(e.compare,t,n)},c=function(n,t){return gr(e.compare,t,n)},u=function(n,t){return vr(e.compare,t,n)};return{compareWithConversion:function(n){return function(t,r){return ur(n,e.compare,t,r)}},compareReversed:n,OrdReversed:{eq:e.eq,compare:n},compareAsInt:function(n,t){return pr(e.compare,n,t)},min:function(n,t){return fr(e.compare,n,t)},max:function(n,t){return dr(e.compare,n,t)},lessThan:t,lt:t,lessThanOrEq:r,lte:r,greaterThan:i,gt:i,greaterThanOrEq:a,gte:a,clamp:function(n,t,r){return br(e.compare,n,t,r)},between:function(n,t,r){return yr(e.compare,n,t,r)},OrdRingExtensions:function(n){return{abs:function(t){return wr(e,n,t)},signum:function(t){return kr(e,n,t)}}},OrdNamed:{lessThan:o,lessThanOrEq:s,greaterThan:c,greaterThanOrEq:u,lt:o,lte:s,gt:c,gte:u},OrdBy:function(n){return{eq:_(cr(e).EqBy,n).eq,compare:function(t,r){return E(e.compare,_(n.f,t),_(n.f,r))}}}}}function Sr(e){if(e<0)throw[d,"String.create"];for(var n=new Array(e),t=0;t<e;++t)n[t]=0;return n}function Er(e,n,t,r,i){if(!(i<=0))if(e!==t){var a=e.length-n|0;if(i<=a)for(var o=0;o<i;++o)t[r+o|0]=e[n+o|0];else{for(var s=0;s<a;++s)t[r+s|0]=e[n+s|0];for(var c=a;c<i;++c)t[r+c|0]=0}}else{if(n<r){for(var u=(e.length-r|0)-1|0,l=i-1|0,p=u>l?l:u;p>=0;--p)e[r+p|0]=e[n+p|0];return}if(n<=r)return;for(var f=(e.length-n|0)-1|0,d=i-1|0,m=f>d?d:f,h=0;h<=m;++h)e[r+h|0]=e[n+h|0]}}function Ar(e){var n=e.length,t="",r=n;if(n<=4096&&n===e.length)return String.fromCharCode.apply(null,e);for(var i=0;r>0;){var a=r<1024?r:1024,o=new Array(a);Er(e,i,o,0,a),t+=String.fromCharCode.apply(null,o),r=r-a|0,i=i+a|0}return t}function $r(e){for(var n=e.length,t=new Array(n),r=0;r<n;++r)t[r]=e.charCodeAt(r);return t}function Cr(e,n){if(0===n)throw h;return e/n|0}function Or(e,n){if(0===n)throw h;return e%n}var Mr=Math.imul||function(e,n){return((e>>16)*(n|=0)<<16)+(65535&e)*n|0};function jr(e){return e>=65?e>=97?e>=123?-1:e-87|0:e>=91?-1:e-55|0:e>57||e<48?-1:e-48|0}function Fr(e){switch(e){case 0:return 8;case 1:return 16;case 2:return 10;case 3:return 2}}function Rr(e){var n=1,t=2,r=0;switch(e.charCodeAt(r)){case 43:r=r+1|0;break;case 44:break;case 45:n=-1,r=r+1|0}if("0"===e[r]){var i=e.charCodeAt(r+1|0);if(i>=89)if(i>=111){if(i<121)switch(i-111|0){case 0:t=0,r=r+2|0;break;case 6:r=r+2|0;break;case 1:case 2:case 3:case 4:case 5:case 7:case 8:break;case 9:t=1,r=r+2|0}}else 98===i&&(t=3,r=r+2|0);else if(66!==i){if(i>=79)switch(i-79|0){case 0:t=0,r=r+2|0;break;case 6:r=r+2|0;break;case 1:case 2:case 3:case 4:case 5:case 7:case 8:break;case 9:t=1,r=r+2|0}}else t=3,r=r+2|0}return[r,n,t]}function Tr(e){var n=Rr(e),t=n[0],r=Fr(n[2]),i=e.length,a=jr(t<i?e.charCodeAt(t):0);if(a<0||a>=r)throw[f,"int_of_string"];var o=n[1]*function(n,t){for(;;){var a=t,o=n;if(a===i)return o;var s=e.charCodeAt(a);if(95!==s){var c=jr(s);if(c<0||c>=r)throw[f,"int_of_string"];var u=r*o+c;if(u>4294967295)throw[f,"int_of_string"];t=a+1|0,n=u}else t=a+1|0}}(a,t+1|0),s=0|o;if(10===r&&o!==s)throw[f,"int_of_string"];return s}z("Pervasives.Exit");function qr(e,n){return e?[e[0],qr(e[1],n)]:n}function Lr(e){return e?qr(e[0],Lr(e[1])):0}function Nr(e,n){return n?[_(e,n[0]),Nr(e,n[1])]:0}function Pr(e,n,t){for(;;){var r=t,i=n;if(!r)return i;t=r[1],n=E(e,i,r[0])}}var Dr=qr,Ir=Lr;function zr(e,n){return Ir([n,[[e,0],0]])}function Br(e){return{fromToAsList:function(n,t){for(var r=0,i=n;;){var a=i,o=r,s=E(e.compare,a,t);if(159039494===s){var c=_(e.pred,a);if(void 0===c)return zr(a,o);i=q(c),r=zr(a,o)}else{if(s<939214151)return zr(a,o);var u=_(e.succ,a);if(void 0===u)return zr(a,o);i=q(u),r=zr(a,o)}}},upFromAsList:function(n){var t=_(e.succ,n);if(void 0===t)return 0;for(var r=0,i=q(t);;){var a=i,o=r,s=_(e.succ,a);if(void 0===s)return zr(a,o);i=q(s),r=zr(a,o)}},upFromIncludingAsList:function(n){for(var t=0,r=n;;){var i=r,a=t,o=_(e.succ,i);if(void 0===o)return zr(i,a);r=q(o),t=zr(i,a)}},downFromAsList:function(n){var t=_(e.pred,n);if(void 0===t)return 0;for(var r=0,i=q(t);;){var a=i,o=r,s=_(e.pred,a);if(void 0===s)return zr(a,o);i=q(s),r=zr(a,o)}},downFromIncludingAsList:function(n){for(var t=0,r=n;;){var i=r,a=t,o=_(e.pred,i);if(void 0===o)return zr(i,a);r=q(o),t=zr(i,a)}}}}function Ur(e,n){return Ir([n,[[e,0],0]])}function Hr(e){return e<0?939214151:0===e?-718572442:159039494}function Gr(e){return 159039494!==e?e>=939214151?-1:0:1}function Wr(e,n){return e===n}var Vr=cr({eq:Wr});function Yr(e,n){return 159039494!==e?e>=939214151?n>=939214151?-718572442:939214151:159039494!==n?n>=939214151?159039494:-718572442:939214151:159039494!==n?159039494:-718572442}var Zr=_r({eq:Wr,compare:Yr});function Xr(e){return 159039494!==e?e>=939214151?void 0:939214151:-718572442}function Kr(e){if(159039494!==e)return e>=939214151?-718572442:159039494}var Jr=Br({eq:Wr,compare:Yr,succ:Kr,pred:Xr});var Qr=function(e){return{fromThenToAsList:function(n,t,r){for(var i=_(e.fromEnum,n),a=_(e.fromEnum,t)-i|0,o=0,s=n,c=i;;){var u=c,l=s,p=o;if(E(e.compare,l,r)<159039494)return Ur(l,p);var f=u+a|0,d=_(e.toEnum,f);if(void 0===d)return Ur(l,p);c=f,s=q(d),o=Ur(l,p)}}}}({top:159039494,bottom:939214151,eq:Wr,compare:Yr,succ:Kr,pred:Xr,cardinality:3,fromEnum:Gr,toEnum:function(e){return Hr(e)}});Vr.eqWithConversion,Vr.notEq,Vr.eqInverted,Vr.EqInverted,Vr.EqBy,Zr.compareWithConversion,Zr.compareReversed,Zr.OrdReversed,Zr.compareAsInt,Zr.min,Zr.max,Zr.lessThan,Zr.lt,Zr.lessThanOrEq,Zr.lte,Zr.greaterThan,Zr.gt,Zr.greaterThanOrEq,Zr.gte,Zr.clamp,Zr.between,Zr.OrdRingExtensions,Zr.OrdNamed,Zr.OrdBy,Jr.fromToAsList,Jr.upFromAsList,Jr.upFromIncludingAsList,Jr.downFromAsList,Jr.downFromIncludingAsList,Qr.fromThenToAsList,gn.$less$dot;function ei(e,n,t){return void 0!==t?_(e,q(t)):n}function ni(e,n){if(void 0!==n)return R(_(e,q(n)))}function ti(e,n){if(void 0!==e)return ni(e,n)}var ri=ti;function ii(e){return R(e)}function ai(e,n){return void 0!==e?R(q(e)):n}var oi={map:ni,alt:ai},si={apply:ti,pure:ii,map:ni,alt:ai,empty:void 0};function ci(e,n,t){return ei(_(e,n),n,t)}function ui(e,n,t){return ei((function(t){return E(e,t,n)}),n,t)}function li(e){return{fold_map:function(n,t){return ei(n,e.empty,t)}}}function pi(e){return{fold_map:function(n,t){return ei(n,e.empty,t)}}}function fi(e){return{fold_map:function(n,t){return ei(n,e.empty,t)}}}var di={fold_left:ci,fold_right:ui,Fold_Map:li,Fold_Map_Any:pi,Fold_Map_Plus:fi};var mi=an({map:ni,apply:ti,pure:ii,flat_map:function(e,n){if(void 0!==e)return _(n,q(e))}}),hi=on(si);mi.$great$great$eq,mi.$eq$less$less,mi.$great$eq$great,mi.$less$eq$less,hi.$less$pipe$great,hi.$less$$great,hi.$less$hash$great,hi.$less$star$great;function gi(e){return{orElse:function(n,t){return E(e.alt,t,n)}}}function vi(e){return{$less$pipe$great:e.alt}}function xi(e){var n=function(e){var n=nn(e);return{I:n,power:function(t,r){var i=function(r){if(r<=0)return e.empty;if(1===r)return t;if(r%2==0){var a=i(r/2|0);return E(n.$less$colon$great,a,a)}var o=i(r/2|0);return E(n.$less$colon$great,E(n.$less$colon$great,o,o),t)};return i(r)},guard:function(n,t){return n?t:e.empty}}}(e);return{BsMonoidExtensions:n,guard:n.guard,power:n.power}}function bi(e,n){return void 0!==e?e:n}function yi(e){var n=An(e),t=function(n,t){return $(e.fold_left,(function(e,t){return!!e||_(n,t)}),!1,t)},r=function(n,t,r){return $(e.fold_left,(function(e,r){var i=e[0];return[i+1|0,bi(e[1],E(n,t,r)?i:void 0)]}),[0,void 0],r)[1]},i=function(n,t){return $(e.fold_left,(function(e,t){return R(void 0!==e?fr(n,t,q(e)):t)}),void 0,t)},a=function(n,t){return $(e.fold_left,(function(e,t){if(void 0===e)return R(t);var r=q(e);return 159039494===E(n,t,r)?R(t):R(r)}),void 0,t)},o=function(n,t){return $(e.fold_left,(function(e,t){return _(n,t)?e+1|0:e}),0,t)},s=function(e){return o((function(e){return!0}),e)};return{BsFoldableExtensions:n,any:t,all:function(n,t){return $(e.fold_left,(function(e,t){return!!e&&_(n,t)}),!0,t)},containsBy:function(e,n,r){return t(_(e,n),r)},contains:function(e,n,r){return t(_(e.eq,n),r)},indexOfBy:r,indexOf:function(e,n,t){return r(e.eq,n,t)},minBy:i,min:function(e,n){return i(e.compare,n)},maxBy:a,max:function(e,n){return a(e.compare,n)},countBy:o,length:s,size:s,count:s,forEach:function(n,t){return $(e.fold_left,(function(e,t){return _(n,t)}),void 0,t)},forEachWithIndex:function(n,t){$(e.fold_left,(function(e,t){return E(n,t,e),e+1|0}),0,t)},find:function(n){return E(e.fold_left,(function(e,t){return bi(e,_(n,t)?R(t):void 0)}),void 0)},findWithIndex:function(n,t){return $(e.fold_left,(function(e,t){var r=e[0];return[r+1|0,bi(e[1],E(n,t,r)?R(t):void 0)]}),[0,void 0],t)[1]},toList:function(n){return $(e.fold_right,(function(e,n){return[e,n]}),0,n)},toArray:function(n){return $(e.fold_left,(function(e,n){return K(e,[n])}),[],n)},FoldableSemigroupExtensions:function(e){var t=_(n.Semigroup,e);return{BsFoldableSemigroupExtensions:t,surroundMap:t.surround_map,surround:t.surround}},FoldableMonoidExtensions:function(t){var r=_(n.Monoid,t);return{BsFoldableMonoidExtensions:r,foldMap:r.FM.fold_map,foldWithMonoid:r.fold,intercalate:function(n,r){return $(e.fold_left,(function(e,r){return e[0]?[!1,r]:[!1,E(t.append,e[1],E(t.append,n,r))]}),[!0,t.empty],r)[1]}}},foldMap:function(e,t,r){return E(_(n.Monoid,e).FM.fold_map,t,r)},foldWithMonoid:function(e,t){var r=_(n.Monoid,e);return _(r.fold,t)},intercalate:function(t,r,i){return _(n.Monoid,t),$(e.fold_left,(function(e,n){return e[0]?[!1,n]:[!1,E(t.append,e[1],E(t.append,r,n))]}),[!0,t.empty],i)[1]},FoldableApplicativeExtensions:function(e){var t=_(n.Applicative,e);return{BsFoldableApplicativeExtensions:t,traverse_:t.traverse$prime,sequence_:t.sequence$prime}},FoldableMonadExtensions:function(e){var t=_(n.Monad,e);return{BsFoldableMonadExtensions:t,foldWithMonad:t.fold_monad}},FoldableEqExtensions:function(e){return{contains:function(n,r){return t(_(e.eq,n),r)},indexOf:function(n,t){return r(e.eq,n,t)}}},FoldableOrdExtensions:function(e){return{min:function(n){return i(e.compare,n)},max:function(n){return a(e.compare,n)}}}}}function wi(e){return{concatNamed:function(n,t){return E(e.append,n,t)}}}function ki(e){return{andThen:function(n,t){return E(e.compose,t,n)}}}function _i(e){var n=function(n,t){return E(e.compose,t,n)};return{SE:{andThen:n},$less$less$less:e.compose,$great$great$great:n}}function Si(e,n){if(void 0!==n&&void 0!==e)return function(t){return Nn.$great$great(n,e,t)}}var Ei={compose:Si},Ai=ki(Ei);function $i(e,n){if(void 0!==n)return R(_(e,q(n)))}var Ci={map:$i},Oi=jn(Ci),Mi=ri,ji={map:$i,apply:Mi},Fi=$n(ji);function Ri(e){return R(e)}var Ti={map:$i,apply:Mi,pure:Ri},qi=Rn(Ti);function Li(e,n){if(void 0!==e)return _(n,q(e))}var Ni={map:$i,apply:Mi,pure:Ri,flat_map:Li},Pi=On(Ni);function Di(e,n){return function(t){return di.fold_left(e,n,t)}}var Ii=yi(di);var zi=gi(oi);function Bi(e,n,t){return void 0!==n?void 0!==t&&E(e,q(n),q(t)):void 0===t}Ai.andThen,Oi.BsFunctorExtensions,Oi.flipMap,Oi.$$void,Oi.voidRight,Oi.voidLeft,Oi.flap,Fi.BsApplyExtensions,Fi.applyFirst,Fi.applySecond,Fi.map2,Fi.map3,Fi.map4,Fi.map5,Fi.tuple2,Fi.tuple3,Fi.tuple4,Fi.tuple5,Fi.mapTuple2,Fi.mapTuple3,Fi.mapTuple4,Fi.mapTuple5,qi.BsApplicativeExtensions,qi.liftA1,Pi.BsMonadExtensions;var Ui=Pi.flatMap,Hi=(Pi.flatten,Pi.composeKleisli,Pi.flipComposeKleisli,Pi.liftM1,Pi.when_,Pi.unless,Ii.BsFoldableExtensions,Ii.any,Ii.all,Ii.containsBy,Ii.contains,Ii.indexOfBy,Ii.indexOf,Ii.minBy,Ii.min,Ii.maxBy,Ii.max,Ii.countBy,Ii.length,Ii.size,Ii.count,Ii.forEach,Ii.forEachWithIndex,Ii.find,Ii.findWithIndex,Ii.toList,Ii.toArray,Ii.FoldableSemigroupExtensions,Ii.FoldableMonoidExtensions,Ii.foldMap,Ii.foldWithMonoid,Ii.intercalate,Ii.FoldableApplicativeExtensions,Ii.FoldableMonadExtensions,Ii.FoldableEqExtensions,Ii.FoldableOrdExtensions,zi.orElse,function(e){return{eq:function(n,t){return void 0!==n?void 0!==t&&E(e.eq,q(n),q(t)):void 0===t},compare:function(n,t){return void 0!==n?void 0!==t?E(e.compare,q(n),q(t)):159039494:void 0!==t?939214151:-718572442}}});function Gi(e,n,t){return void 0!==t?_(n,q(t)):e}function Wi(e,n,t){return void 0!==t?_(n,q(t)):_(e,void 0)}function Vi(e,n){return void 0!==n?q(n):e}function Yi(e,n){return void 0!==n?q(n):_(e,void 0)}function Zi(e){return Di((function(n,t){return _(e,t)?R(t):n}),void 0)}var Xi=Dr,Ki=Nr,Ji=Pr,Qi=function e(n,t,r){return t?E(n,t[0],e(n,t[1],r)):r};function ea(e){return function(n){return Ki(e,n)}}var na=ea,ta={map:ea,alt:Xi};function ra(e,n){return Ji((function(e,t){return Xi(e,Ki(t,n))}),0,e)}var ia=ra;function aa(e){return[e,0]}var oa=aa;var sa={map:ea,apply:ra,pure:aa,flat_map:function(e,n){return Ji((function(e,t){return Xi(e,_(n,t))}),0,e)}},ca={apply:ra,pure:aa,map:ea,alt:Xi,empty:0};function ua(e,n){return function(t){return Ji(e,n,t)}}function la(e,n){return function(t){return Qi(e,t,n)}}function pa(e){return{fold_map:ht(e,{fold_left:ua,fold_right:la}).fold_map_default_left}}function fa(e){return{fold_map:gt(e,{fold_left:ua,fold_right:la}).fold_map_default_left}}function da(e){return{fold_map:vt(e,{fold_left:ua,fold_right:la}).fold_map_default_left}}var ma={fold_left:ua,fold_right:la,Fold_Map:pa,Fold_Map_Any:fa,Fold_Map_Plus:da};function ha(e){var n=rn(e),t=function(t){var r=_(e.pure,0);return function(i){return Qi((function(r,i){return E(n.$less$star$great,E(n.$less$star$great,_(e.pure,(function(e,n){return[e,n]})),_(t,r)),i)}),i,r)}};return{map:ea,fold_left:ua,fold_right:la,Fold_Map:pa,Fold_Map_Any:fa,Fold_Map_Plus:da,traverse:t,sequence:xt({traverse:t}).sequence_default}}var ga=an(sa),va=on(ca);ga.$great$great$eq,ga.$eq$less$less,ga.$great$eq$great,ga.$less$eq$less,va.$less$pipe$great,va.$less$$great,va.$less$hash$great,va.$less$star$great;function xa(e){return{concatNamed:function(n,t){return E(e.append,n,t)}}}var ba,ya=In,wa={append:ya},ka=xa(wa),_a={append:ya,empty:0},Sa=(ba=_a,na),Ea={map:Sa},Aa=jn(Ea),$a=ia,Ca={map:Sa,apply:$a},Oa=$n(Ca),Ma=oa,ja={map:Sa,apply:$a,pure:Ma},Fa=Rn(ja),Ra=sa.flat_map,Ta={map:Sa,apply:$a,pure:Ma,flat_map:Ra},qa=On(Ta),La=ta.alt,Na={map:Sa,alt:La},Pa=gi(Na),Da=ma.fold_left,Ia=ma.fold_right,za={fold_left:Da,fold_right:Ia,Fold_Map:ma.Fold_Map,Fold_Map_Any:ma.Fold_Map_Any,Fold_Map_Plus:ma.Fold_Map_Plus},Ba=yi(za),Ua=Ba.intercalate;function Ha(e,n,t){for(;;){var r=t,i=n;if(!i)return!r;if(!r)return!1;if(!E(e,i[0],r[0]))return!1;t=r[1],n=i[1]}}function Ga(e){return{eq:function(n,t){return Ha(e.eq,n,t)}}}function Wa(e,n){return"["+E(_(Ua,ot),", ",Sa(e)(n))+"]"}function Va(e){return{show:function(n){return Wa(e.show,n)}}}ka.concatNamed,Aa.BsFunctorExtensions,Aa.flipMap,Aa.$$void,Aa.voidRight,Aa.voidLeft,Aa.flap,Oa.BsApplyExtensions,Oa.applyFirst,Oa.applySecond,Oa.map2,Oa.map3,Oa.map4,Oa.map5,Oa.tuple2,Oa.tuple3,Oa.tuple4,Oa.tuple5,Oa.mapTuple2,Oa.mapTuple3,Oa.mapTuple4,Oa.mapTuple5,Fa.BsApplicativeExtensions,Fa.liftA1,qa.BsMonadExtensions,qa.flatMap,qa.flatten,qa.composeKleisli,qa.flipComposeKleisli,qa.liftM1,qa.when_,qa.unless,Pa.orElse,Ba.BsFoldableExtensions,Ba.any,Ba.all;var Ya=Ba.containsBy,Za=(Ba.contains,Ba.indexOfBy,Ba.indexOf,Ba.minBy,Ba.min,Ba.maxBy,Ba.max,Ba.countBy,Ba.length),Xa=(Ba.size,Ba.count,Ba.forEach,Ba.forEachWithIndex,Ba.find),Ka=(Ba.findWithIndex,Ba.toList,Ba.FoldableSemigroupExtensions,Ba.FoldableMonoidExtensions),Ja=(Ba.foldMap,Ba.foldWithMonoid),Qa=(Ba.FoldableApplicativeExtensions,Ba.FoldableMonadExtensions,Ba.FoldableEqExtensions),eo=Ba.FoldableOrdExtensions,no=ha,to=Un,ro=Hn;function io(e,n){return[e,n]}function ao(e){if(e)return[e[0],e[1]]}function oo(e,n){return wa.append(n,[e,0])}function so(e){return!e}function co(e){return!!e}function uo(e){if(e)return R(e[0])}function lo(e){if(e)return e[1]}function po(e){return Vi(0,lo(e))}function fo(e,n){return Gn(function(e,n,t){for(;;){var r=t,i=n,a=e;if(i<=0)return a;if(!r)return a;t=r[1],n=i-1|0,e=[r[0],a]}}(0,e,n))}function mo(e,n){return Gn(Da((function(n,t){return Gi(n,(function(e){return[e,n]}),_(e,t))}),0)(n))}function ho(e,n,t){return function(e,n,t){return function(e,n,t){if(!e)return 0;if(!n)return 0;var r=[t(e[0],n[0]),0];return function(e,n,t,r){for(;;){var i=r,a=t,o=n;if(!o)return;if(!a)return;var s=[e(o[0],a[0]),0];i[1]=s,r=s,t=a[1],n=o[1]}}(t,e[1],n[1],r),r}(e,n,A(t))}(n,t,e)}function go(e,n){return Vn(n,(function(n,t){return Gr(E(e,n,t))}))}function vo(e,n){return Gn(Da((function(n,t){return $(Ya,e,t,n)?n:[t,n]}),0)(n))}function xo(e,n,t){return Gn(Da((function(t,r){var i=t[1];return t[0]?[!0,[r,i]]:E(e,n,r)?[!0,i]:[!1,[r,i]]}),[!1,0])(t)[1])}function bo(e,n,t){return Gn(Da((function(t,r){return E(e,n,r)?t:[r,t]}),0)(t))}var yo=io,wo=Gn,ko=function(e,n){if(!e)return 0;if(!n)return 0;var t=[[e[0],n[0]],0];return function(e,n,t){for(;;){var r=t,i=n,a=e;if(!a)return;if(!i)return;var o=[[a[0],i[0]],0];r[1]=o,t=o,n=i[1],e=a[1]}}(e[1],n[1],t),t};function _o(e){return{cmp:A(e.cmp)}}function So(e,n,t,r){if(void 0===e)return ce(n,t);var i=e.key,a=r(n,i);if(0===a)return le(e,t);var o=e.left,s=e.right,c=e.value;return a<0?pe(So(o,n,t,r),i,c,s):pe(o,i,c,So(s,n,t,r))}function Eo(e,n,t,r){if(void 0!==e){var i=e.key,a=r(n,i);if(0===a){var o=t(R(e.value));if(void 0!==o)return le(e,q(o));var s=e.left,c=e.right;if(void 0===s)return c;if(void 0===c)return s;var u={contents:c.key},l={contents:c.value},p=ye(c,u,l);return pe(s,u.contents,l.contents,p)}var f=e.left,d=e.right,m=e.value;if(a<0){var h=Eo(f,n,t,r);return f===h?e:pe(h,i,m,d)}var g=Eo(d,n,t,r);return d===g?e:pe(f,i,m,g)}var v=t(void 0);return void 0!==v?ce(n,q(v)):e}function Ao(e,n,t){var r=e.key,i=e.left,a=e.right,o=t(n,r);if(0===o){if(void 0===i)return a;if(void 0===a)return i;var s={contents:a.key},c={contents:a.value},u=ye(a,s,c);return pe(i,s.contents,c.contents,u)}if(o<0){if(void 0===i)return e;var l=Ao(i,n,t);return l===i?e:pe(l,r,e.value,a)}if(void 0===a)return e;var p=Ao(a,n,t);return p===a?e:pe(i,r,e.value,p)}function $o(e,n,t){for(var r=n.length,i=e,a=0;a<r;++a){var o=n[a];i=So(i,o[0],o[1],t)}return i}function Co(e,n,t,r){var i=e.key,a=e.value,o=e.left,s=e.right,c=r(n,i);if(0===c)return t.contents=R(a),[o,s];if(c<0){if(void 0===o)return[void 0,e];var u=Co(o,n,t,r);return[u[0],Me(u[1],i,a,s)]}if(void 0===s)return[e,void 0];var l=Co(s,n,t,r);return[Me(o,i,a,l[0]),l[1]]}function Oo(e,n,t,r){if(void 0===e)return void 0!==n?Te(n,(function(e,n){return t(e,void 0,R(n))})):void 0;if(void 0===n)return Te(e,(function(e,n){return t(e,R(n),void 0)}));if(e.height>=n.height){var i=e.key,a=e.value,o=e.left,s=e.right,c={contents:void 0},u=Co(n,i,c,r),l=c.contents;return Fe(Oo(o,u[0],t,r),i,t(i,R(a),l),Oo(s,u[1],t,r))}var p=n.key,f=n.value,d=n.left,m=n.right,h={contents:void 0},g=Co(e,p,h,r),v=h.contents;return Fe(Oo(g[0],d,t,r),p,t(p,v,R(f)),Oo(g[1],m,t,r))}var Mo=we,jo=function(e,n,t){for(;;){var r=e;if(void 0===r)return!1;var i=t(n,r.key);if(0===i)return!0;e=i<0?r.left:r.right}},Fo=He,Ro=Ge,To=_e,qo=Se,Lo=$e,No=Ce,Po=Oe,Do=Ne,Io=Pe,zo=De,Bo=function(e,n){var t=e.length;if(0!==t){var r,i=ee(e,(function(e,t){return n(e[0],t[0])<0}));r=i>=0?Ue(e,0,i):Be(e,(i=0|-i)-1|0,i);for(var a=i;a<t;++a){var o=e[a];r=Xe(r,o[0],o[1],n)}return r}},Uo=Ie,Ho=ze,Go=de,Wo=he,Vo=ve,Yo=be,Zo=function(e,n,t){for(;;){var r=e;if(void 0===r)return;var i=t(n,r.key);if(0===i)return R(r.value);e=i<0?r.left:r.right}},Xo=function(e,n,t,r){for(;;){var i=e;if(void 0===i)return t;var a=r(n,i.key);if(0===a)return i.value;e=a<0?i.left:i.right}},Ko=Re,Jo=qe,Qo=Ee,es=Ae;function ns(e,n){var t=n.cmp;return{cmp:t,data:Bo(e,t)}}function ts(e,n){var t=e.data,r=e.cmp,i=function(e,n,t){if(void 0!==e)return Ao(e,n,t)}(t,n,r);return i===t?e:{cmp:r,data:i}}function rs(e,n){var t=e.cmp;return{cmp:t,data:function(e,n,t){var r=n.length;if(void 0!==e)for(var i=e,a=0;;){var o=a;if(o>=r)return i;var s=Ao(i,n[o],t);if(void 0===s)return s;a=o+1|0,i=s}}(e.data,n,t)}}function is(e,n,t){var r=e.cmp;return{cmp:r,data:So(e.data,n,t,r)}}function as(e,n,t){return function(e,n,t){var r=e.cmp;return{cmp:r,data:Eo(e.data,n,t,r)}}(e,n,S(t))}function os(e,n,t){return function(e,n,t){var r=e.cmp;return{cmp:r,data:Oo(e.data,n.data,t,r)}}(e,n,C(t))}function ss(e){return{cmp:e.cmp,data:void 0}}function cs(e){return Mo(e.data)}function us(e,n,t){return function(e,n,t){return Lo(e.data,n,t)}(e,n,C(t))}function ls(e,n){return function(e,n){return{cmp:e.cmp,data:Ko(e.data,n)}}(e,A(n))}function ps(e,n){return function(e,n){var t=e.cmp,r=Jo(e.data,n);return[{cmp:t,data:r[0]},{cmp:t,data:r[1]}]}(e,A(n))}function fs(e,n){return function(e,n){return{cmp:e.cmp,data:Qo(e.data,n)}}(e,S(n))}function ds(e,n){return function(e,n){return{cmp:e.cmp,data:es(e.data,n)}}(e,A(n))}function ms(e){return Do(e.data)}function hs(e){return Io(e.data)}function gs(e){return zo(e.data)}function vs(e){return Uo(e.data)}function xs(e){return Ho(e.data)}function bs(e){return Go(e.data)}function ys(e){return Wo(e.data)}function ws(e){return Vo(e.data)}function ks(e){return Yo(e.data)}function _s(e,n,t){return Xo(e.data,n,t,e.cmp)}function Ss(e,n,t){return function(e,n,t){return Ro(e.data,n.data,e.cmp,t)}(e,n,A(t))}function Es(e,n,t){return function(e,n,t){return Fo(e.data,n.data,e.cmp,t)}(e,n,A(t))}var As={append:K},$s=xa(As),Cs=Jt.map,Os={map:Cs},Ms=jn(Os),js=er.apply,Fs={map:Cs,apply:js},Rs=$n(Fs);function Ts(e){return[e]}var qs={map:Cs,apply:js,pure:Ts},Ls=Rn(qs),Ns=nr.flat_map,Ps={map:Cs,apply:js,pure:Ts,flat_map:Ns},Ds=On(Ps),Is=Qt.alt,zs={map:Cs,alt:Is},Bs=gi(zs),Us=(ir.imap,ar.extend,tr.fold_left),Hs=tr.fold_right,Gs=tr.Fold_Map,Ws=tr.Fold_Map_Any,Vs=tr.Fold_Map_Plus,Ys={fold_left:Us,fold_right:Hs,Fold_Map:Gs,Fold_Map_Any:Ws,Fold_Map_Plus:Vs},Zs=yi(Ys),Xs=Zs.intercalate;function Ks(e,n,t){for(;;){var r=t,i=n,a=V(i,0),o=V(r,0);if(void 0===a)return void 0===o;if(void 0===o)return!1;if(!E(e,q(a),q(o)))return!1;t=J(r,1),n=J(i,1)}}function Js(e){return{eq:function(n,t){return Ks(e.eq,n,t)}}}function Qs(e,n){return"["+E(_(Xs,ot),", ",E(Cs,e,n))+"]"}function ec(e){return{show:function(n){return Qs(e.show,n)}}}var nc=K,tc=($s.concatNamed,Ms.BsFunctorExtensions,Ms.flipMap,Ms.$$void,Ms.voidRight,Ms.voidLeft,Ms.flap,Rs.BsApplyExtensions,Rs.applyFirst,Rs.applySecond,Rs.map2,Rs.map3,Rs.map4,Rs.map5,Rs.tuple2,Rs.tuple3,Rs.tuple4,Rs.tuple5,Rs.mapTuple2,Rs.mapTuple3,Rs.mapTuple4,Rs.mapTuple5,Ls.BsApplicativeExtensions,Ls.liftA1,Ds.BsMonadExtensions,Ds.flatMap,Ds.flatten,Ds.composeKleisli,Ds.flipComposeKleisli,Ds.liftM1,Ds.when_,Ds.unless,Bs.orElse,Zs.BsFoldableExtensions,Zs.any,Zs.all,Zs.containsBy),rc=(Zs.contains,Zs.indexOfBy,Zs.indexOf,Zs.minBy,Zs.min,Zs.maxBy,Zs.max,Zs.countBy,Zs.length,Zs.size,Zs.count,Zs.forEach,Zs.forEachWithIndex,Zs.find,Zs.findWithIndex,Zs.toArray,Zs.FoldableSemigroupExtensions,Zs.FoldableMonoidExtensions),ic=(Zs.foldMap,Zs.foldWithMonoid),ac=(Zs.FoldableApplicativeExtensions,Zs.FoldableMonadExtensions,Zs.FoldableEqExtensions),oc=Zs.FoldableOrdExtensions,sc=Hn,cc=Un;function uc(e,n,t){return is(t,e,n)}function lc(e,n){return function(e,n){return jo(e.data,n,e.cmp)}(n,e)}function pc(e,n,t){return Es(n,t,e)}function fc(e,n,t){return Hr(Es(n,t,(function(n,t){return Gr(E(e,n,t))})))}function dc(e,n,t){return Ss(n,t,e)}function mc(e,n){return t=e,To(n.data,A(t));var t}function hc(e,n){return t=e,qo(n.data,A(t));var t}function gc(e,n,t){return us(t,n,e)}function vc(e,n){return t=e,No(n.data,A(t));var t}function xc(e,n){return t=e,Po(n.data,A(t));var t}function bc(e){return Un(vs(e))}function yc(e){return Un(xs(e))}function wc(e,n){return function(e,n){return Zo(e.data,n,e.cmp)}(n,e)}function kc(e,n,t){return _s(t,e,n)}function _c(e,n){return ts(n,e)}function Sc(e,n){return rs(n,e)}function Ec(e,n,t){return as(t,e,n)}function Ac(e,n,t){return os(n,t,e)}function $c(e,n){return r=e,{cmp:i=(t=n).cmp,data:$o(t.data,r,i)};var t,r,i}function Cc(e,n){return ls(n,e)}function Oc(e,n){return ls(n,(function(n,t){return!E(e,n,t)}))}function Mc(e,n){return ps(n,e)}function jc(e,n){return fs(n,e)}function Fc(e,n){return ds(n,e)}function Rc(e,n){var t=function(e,t){return is(e,_(n,t),function(e){var t=_(n,e),r=function(e){return _s(e,t,0)};return function(n){return Nn.$great$great(r,(function(n){return[e,n]}),n)}}(t)(e))};return function(n){return Nn.$great$great((function(n){return Wn(n,ss(e),t)}),(function(e){return fs(e,Gn)}),n)}}function Tc(e,n){var t=function(e,t){return is(e,_(n,t),function(e){var t=[],r=_(n,e),i=function(e){return _s(e,r,t)};return function(n){return Nn.$great$great(i,(function(n){return K(n,[e])}),n)}}(t)(e))};return function(n){return r=n,i=ss(e),function(e,n,t){for(var r=n,i=0,a=e.length;i<a;++i)r=t(r,e[i]);return r}(r,i,A(t));var r,i}}function qc(e){var n=_o({cmp:function(n,t){return Gr(E(e.compare,n,t))}});return jn({map:jc}),{Comparable:{},make:function(e){return ss(n)},set:uc,singleton:function(e,t){return is(ss(n),e,t)},isEmpty:cs,contains:lc,compareInt:pc,compareBy:fc,eqBy:dc,find:mc,forEach:hc,foldLeft:gc,all:vc,any:xc,length:ms,toArray:gs,fromArray:function(e){return ns(e,n)},fromValueArray:function(e,t){return _(function(e,n){return E(Us,(function(e,t){return is(e,_(n,t),t)}),ss(e))}(n,e),t)},toList:hs,fromList:function(e){return ns(Hn(e),n)},fromValueList:function(e,t){return function(e,n){return Da((function(e,t){return is(e,_(n,t),t)}),ss(e))}(n,e)(t)},keys:bc,keyArray:vs,values:yc,valueArray:xs,minKey:bs,maxKey:ys,min:ws,max:ks,get:wc,getOrElse:kc,remove:_c,removeMany:Sc,update:Ec,merge:Ac,mergeMany:$c,filter:Cc,keep:Cc,filterNot:Oc,reject:Oc,partition:Mc,map:jc,mapWithKey:Fc,groupListBy:function(e,t){return Rc(n,e)(t)},groupArrayBy:function(e,t){return Tc(n,e)(t)}}}function Lc(e){return void 0!==e?e.height:0}function Nc(e,n,t){var r=void 0!==e?e.height:0,i=void 0!==t?t.height:0;return{value:n,height:r>=i?r+1|0:i+1|0,left:e,right:t}}function Pc(e){return{value:e,height:1,left:void 0,right:void 0}}function Dc(e,n){return void 0===n||void 0!==e&&e.height>=n.height}function Ic(e,n,t){var r=void 0!==e?e.height:0,i=void 0!==t?t.height:0;if(r>(i+2|0)){var a=e.value,o=e.left,s=e.right;return Dc(o,s)?Nc(o,a,Nc(s,n,t)):Nc(Nc(o,a,s.left),s.value,Nc(s.right,n,t))}if(i<=(r+2|0))return{value:n,height:r>=i?r+1|0:i+1|0,left:e,right:t};var c=t.value,u=t.left,l=t.right;return Dc(l,u)?Nc(Nc(e,n,u),c,l):Nc(Nc(e,n,u.left),u.value,Nc(u.right,c,l))}function zc(e){for(;;){var n=e,t=n.left;if(void 0===t)return n.value;e=t}}function Bc(e){for(;;){var n=e,t=n.right;if(void 0===t)return n.value;e=t}}function Uc(e,n){var t=e.value,r=e.left,i=e.right;return void 0!==r?Ic(Uc(r,n),t,i):(n.contents=t,i)}function Hc(e,n){for(;;){if(void 0===e)return n;n=[e,n],e=e.left}}function Gc(e,n){for(;;){var t=e;if(void 0===t)return;Gc(t.left,n),n(t.value),e=t.right}}function Wc(e,n,t){for(;;){var r=n,i=e;if(void 0===i)return r;var a=i.value,o=i.left,s=i.right;n=t(Wc(o,r,t),a),e=s}}function Vc(e,n){for(;;){var t=e;if(void 0===t)return!0;if(!n(t.value))return!1;if(!Vc(t.left,n))return!1;e=t.right}}function Yc(e,n){for(;;){var t=e;if(void 0===t)return!1;if(n(t.value))return!0;if(Yc(t.left,n))return!0;e=t.right}}function Zc(e,n,t){if(void 0===e)return function e(n,t){return void 0!==n?Ic(e(n.left,t),n.value,n.right):Pc(t)}(t,n);if(void 0===t)return function e(n,t){return void 0!==n?Ic(n.left,n.value,e(n.right,t)):Pc(t)}(e,n);var r=e.height,i=t.height;return r>(i+2|0)?Ic(e.left,e.value,Zc(e.right,n,t)):i>(r+2|0)?Ic(Zc(e,n,t.left),t.value,t.right):Nc(e,n,t)}function Xc(e,n){if(void 0===e)return n;if(void 0===n)return e;var t={contents:n.value},r=Uc(n,t);return Zc(e,t.contents,r)}function Kc(e,n){if(void 0===e)return[void 0,void 0];var t=e.value,r=Kc(e.left,n),i=r[1],a=r[0],o=n(t),s=Kc(e.right,n),c=s[1],u=s[0];return o?[Zc(a,t,u),Xc(i,c)]:[Xc(a,u),Zc(i,t,c)]}function Jc(e){var n=e.left,t=e.right;return(1+(void 0!==n?Jc(n):0)|0)+(void 0!==t?Jc(t):0)|0}function Qc(e){return void 0!==e?Jc(e):0}function eu(e,n,t){switch(t){case 0:return;case 1:return Pc(e[n]);case 2:var r=e[n];return{value:e[n-1|0],height:2,left:Pc(r),right:void 0};case 3:var i=e[n],a=e[n-1|0],o=e[n-2|0];return{value:a,height:2,left:Pc(i),right:Pc(o)};default:var s=t/2|0;return Nc(eu(e,n,s),e[n-s|0],eu(e,(n-s|0)-1|0,(t-s|0)-1|0))}}function nu(e,n,t){switch(t){case 0:return;case 1:return Pc(e[n]);case 2:var r=e[n];return{value:e[n+1|0],height:2,left:Pc(r),right:void 0};case 3:var i=e[n],a=e[n+1|0],o=e[n+2|0];return{value:a,height:2,left:Pc(i),right:Pc(o)};default:var s=t/2|0;return Nc(nu(e,n,s),e[n+s|0],nu(e,1+(n+s|0)|0,(t-s|0)-1|0))}}function tu(e,n){if(void 0!==e){var t=e.value,r=e.left,i=e.right,a=tu(r,n),o=n(t),s=tu(i,n);return o?r===a&&i===s?e:Zc(a,t,s):Xc(a,s)}}function ru(e,n,t){var r=Qc(e),i=Qc(n);if(r!==i)return r<i?-1:1;for(var a=Hc(e,0),o=Hc(n,0);;){var s=o,c=a;if(!c)return 0;if(!s)return 0;var u=s[0],l=c[0],p=t(l.value,u.value);if(0!==p)return p;o=Hc(u.right,s[1]),a=Hc(l.right,c[1])}}function iu(e){var n=e.left;e.left=n.right,n.right=e;var t=Lc(e.left),r=Lc(e.right);e.height=(t>r?t:r)+1|0;var i=Lc(n.left),a=e.height;return n.height=(i>a?i:a)+1|0,n}function au(e){var n=e.right;e.right=n.left,n.left=e;var t=Lc(e.left),r=Lc(e.right);e.height=(t>r?t:r)+1|0;var i=Lc(n.right),a=e.height;return n.height=(i>a?i:a)+1|0,n}function ou(e){var n=Lc(e.left),t=Lc(e.right);return e.height=(n>t?n:t)+1|0,e}function su(e){var n,t,r=e.left,i=e.right,a=Lc(r),o=Lc(i);if(a>(2+o|0))return Dc(r.left,r.right)?ou(iu(e)):ou((t=au((n=e).left),n.left=t,iu(n)));if(o>(2+a|0)){var s=i.left;return Dc(i.right,s)?ou(au(e)):ou(function(e){var n=iu(e.right);return e.right=n,au(e)}(e))}return e.height=(a>o?a:o)+1|0,e}function cu(e,n,t){if(void 0===n)return Pc(t);var r=e(t,n.value);if(0===r)return n;var i=n.left,a=n.right;if(r<0){var o=cu(e,i,t);n.left=o}else n.right=cu(e,a,t);return su(n)}function uu(e,n,t){if(void 0===e)return Pc(n);var r=e.value,i=t(n,r);if(0===i)return e;var a=e.left,o=e.right;if(i<0){var s=uu(a,n,t);return s===a?e:Ic(s,r,o)}var c=uu(o,n,t);return c===o?e:Ic(a,r,c)}function lu(e,n,t){if(void 0===e)return e;var r=e.value,i=e.left,a=e.right,o=t(n,r);if(0===o){if(void 0===i)return a;if(void 0===a)return i;var s={contents:a.value},c=Uc(a,s);return Ic(i,s.contents,c)}if(o<0){var u=lu(i,n,t);return u===i?e:Ic(u,r,a)}var l=lu(a,n,t);return l===a?e:Ic(i,r,l)}function pu(e,n,t){for(var r=n.length,i=e,a=0;a<r;++a){i=uu(i,n[a],t)}return i}function fu(e,n,t){for(var r=n.length,i=e,a=0;a<r;++a){i=lu(i,n[a],t)}return i}function du(e,n,t){var r=n.value,i=n.left,a=n.right,o=e(t,r);if(0===o)return[i,a];if(o<0){if(void 0===i)return[void 0,n];var s=du(e,i,t);return[s[0],Zc(s[1],r,a)]}if(void 0===a)return[n,void 0];var c=du(e,a,t);return[Zc(i,r,c[0]),c[1]]}function mu(e,n,t,r){var i=n.value,a=n.left,o=n.right,s=e(t,i);if(0===s)return r.contents=!0,[a,o];if(s<0){if(void 0===a)return[void 0,n];var c=mu(e,a,t,r);return[c[0],Zc(c[1],i,o)]}if(void 0===o)return[n,void 0];var u=mu(e,o,t,r);return[Zc(a,i,u[0]),u[1]]}function hu(e,n,t){if(void 0===e)return n;if(void 0===n)return e;var r=e.height,i=n.height;if(r>=i){if(1===i)return uu(e,n.value,t);var a=e.value,o=e.left,s=e.right,c=du(t,n,a);return Zc(hu(o,c[0],t),a,hu(s,c[1],t))}if(1===r)return uu(n,e.value,t);var u=n.value,l=n.left,p=n.right,f=du(t,e,u);return Zc(hu(f[0],l,t),u,hu(f[1],p,t))}function gu(e,n,t){if(void 0!==e&&void 0!==n){var r=e.value,i=e.left,a=e.right,o={contents:!1},s=mu(t,n,r,o),c=gu(i,s[0],t),u=gu(a,s[1],t);return o.contents?Zc(c,r,u):Xc(c,u)}}function vu(e,n,t){if(void 0===e)return e;if(void 0===n)return e;var r=e.value,i=e.left,a=e.right,o={contents:!1},s=mu(t,n,r,o),c=vu(i,s[0],t),u=vu(a,s[1],t);return o.contents?Xc(c,u):Zc(c,r,u)}var xu=function(e,n){var t=e.length;if(0!==t){var r,i=ee(e,(function(e,t){return n(e,t)<0}));r=i>=0?nu(e,0,i):eu(e,(i=0|-i)-1|0,i);for(var a=i;a<t;++a)r=cu(n,r,e[a]);return r}},bu=function(e){return void 0===e},yu=function(e,n,t){for(;;){var r=e;if(void 0===r)return!1;var i=t(n,r.value);if(0===i)return!0;e=i<0?r.left:r.right}},wu=function e(n,t,r){for(;;){var i=t,a=n;if(void 0===a)return!0;if(void 0===i)return!1;var o=a.value,s=a.left,c=a.right,u=i.value,l=i.left,p=i.right,f=r(o,u);if(0!==f)if(f<0){if(!e(Nc(s,o,void 0),l,r))return!1;n=c}else{if(!e(Nc(void 0,o,c),p,r))return!1;n=s}else{if(!e(s,l,r))return!1;t=p,n=c}}},ku=ru,_u=function(e,n,t){return 0===ru(e,n,t)},Su=Gc,Eu=Wc,Au=Vc,$u=Yc,Cu=tu,Ou=Kc,Mu=Qc,ju=function(e){return function e(n,t){for(;;){var r=t,i=n;if(void 0===i)return r;t=[i.value,e(i.right,r)],n=i.left}}(e,0)},Fu=function(e){if(void 0===e)return[];var n=Jc(e),t=new Array(n);return function e(n,t,r){for(;;){var i=t,a=n,o=a.value,s=a.left,c=a.right,u=void 0!==s?e(s,i,r):i;r[u]=o;var l=u+1|0;if(void 0===c)return l;t=l,n=c}}(e,0,t),t},Ru=function(e){if(void 0!==e)return R(zc(e))},Tu=function(e){if(void 0!==e)return R(Bc(e))},qu=function(e,n,t){for(;;){var r=e;if(void 0===r)return;var i=r.value,a=t(n,i);if(0===a)return R(i);e=a<0?r.left:r.right}};function Lu(e,n){var t=n.cmp;return{cmp:t,data:xu(e,t)}}function Nu(e,n){var t=e.data,r=e.cmp,i=lu(t,n,r);return i===t?e:{cmp:r,data:i}}function Pu(e,n){var t=e.data,r=e.cmp,i=uu(t,n,r);return i===t?e:{cmp:r,data:i}}function Du(e,n){var t=e.cmp;return{cmp:t,data:hu(e.data,n.data,t)}}function Iu(e,n){var t=e.cmp;return{cmp:t,data:gu(e.data,n.data,t)}}function zu(e,n){var t=e.cmp;return{cmp:t,data:vu(e.data,n.data,t)}}function Bu(e,n){var t=e.cmp;return wu(e.data,n.data,t)}function Uu(e,n){var t=e.cmp,r=function(e,n,t){if(void 0===e)return[[void 0,void 0],!1];var r={contents:!1};return[mu(t,e,n,r),r.contents]}(e.data,n,t),i=r[0];return[[{cmp:t,data:i[0]},{cmp:t,data:i[1]}],r[1]]}function Hu(e){return{cmp:e.cmp,data:void 0}}function Gu(e){return bu(e.data)}function Wu(e,n){var t=e.cmp;return ku(e.data,n.data,t)}function Vu(e,n){return _u(e.data,n.data,e.cmp)}function Yu(e,n,t){return function(e,n,t){return Eu(e.data,n,t)}(e,n,A(t))}function Zu(e,n){return function(e,n){return{cmp:e.cmp,data:Cu(e.data,n)}}(e,S(n))}function Xu(e,n){return function(e,n){var t=Ou(e.data,n),r=e.cmp;return[{cmp:r,data:t[0]},{cmp:r,data:t[1]}]}(e,S(n))}function Ku(e){return Mu(e.data)}function Ju(e){return ju(e.data)}function Qu(e){return Fu(e.data)}function el(e){return Ru(e.data)}function nl(e){return Tu(e.data)}function tl(e,n){return qu(e.data,n,e.cmp)}function rl(e,n){return yu(e.data,n,e.cmp)}function il(e,n){return rl(n,e)}function al(e,n){return Pu(n,e)}function ol(e,n){return r=e,{cmp:i=(t=n).cmp,data:pu(t.data,r,i)};var t,r,i}function sl(e,n){return Nu(n,e)}function cl(e,n){return r=e,{cmp:i=(t=n).cmp,data:fu(t.data,r,i)};var t,r,i}function ul(e,n){return Pu(Nu(n,e),e)}function ll(e,n){return rl(n,e)?Nu(n,e):Pu(n,e)}function pl(e,n){return t=e,Su(n.data,S(t));var t}function fl(e,n,t){return Yu(t,n,e)}function dl(e,n,t){return Kn(e,Qu(t),n)}function ml(e,n){return t=e,Au(n.data,S(t));var t}function hl(e,n){return t=e,$u(n.data,S(t));var t}function gl(e,n){return Zu(n,e)}function vl(e,n){return Zu(n,(function(n){return!_(e,n)}))}function xl(e,n){return Xu(n,e)}function bl(e,n){return tl(n,e)}function yl(e,n,t){return Vi(n,tl(t,e))}function wl(e,n){return Uu(n,e)}function kl(e){var n=_o({cmp:function(n,t){return Gr(E(e.compare,n,t))}});return{Comparable:{},empty:Hu(n),fromArray:function(e){return Lu(e,n)},fromList:function(e){return Lu(Hn(e),n)},isEmpty:Gu,contains:il,add:al,mergeMany:ol,remove:sl,removeMany:cl,update:ul,toggle:ll,union:Du,intersect:Iu,diff:zu,subset:Bu,compare:Wu,eq:Vu,forEach:pl,foldLeft:fl,foldRight:dl,all:ml,any:hl,filter:gl,keep:gl,filterNot:vl,reject:vl,partition:xl,length:Ku,toArray:Qu,toList:Ju,minimum:el,maximum:nl,get:bl,getOrElse:yl,split:wl}}function _l(e,n){return e+n|0}var Sl={append:_l};function El(e){return Mr(-1,e)}var Al={Magma:Sl,Medial_Magma:Sl,Semigroup:{append:_l},Monoid:{append:_l,empty:0},Quasigroup:{append:_l},Medial_Quasigroup:{append:_l},Loop:{append:_l,empty:0},Group:{append:_l,empty:0,inverse:El},Abelian_Group:{append:_l,empty:0,inverse:El}},$l={append:Mr},Cl={Magma:$l,Medial_Magma:$l,Semigroup:{append:Mr},Monoid:{append:Mr,empty:1},Quasigroup:{append:Mr},Loop:{append:Mr,empty:1}};var Ol={eq:Qe},Ml={eq:Qe,compare:en};function jl(e,n){return e+n|0}function Fl(e,n){return e-n|0}var Rl={add:jl,zero:0,multiply:Mr,one:1,subtract:Fl,degree:function(e){return G((n=e)>=0?n:0|-n,2147483647);var n},divide:Cr,modulo:Or},Tl=nn(Sl),ql=nn($l),Ll=cn(Ol),Nl=un(Ml),Pl=ln(Rl);Ll.$eq$pipe$eq,Nl.$less$pipe$pipe,Nl.$pipe$pipe$great,Nl.$less$pipe$eq,Nl.$great$pipe$eq,Pl.$pipe$plus$pipe,Pl.$pipe$star$pipe,Pl.$pipe$neg$pipe,Pl.$pipe$slash$pipe,Pl.$pipe$percent$pipe;function Dl(e){var n=e.subtract;return{$neg:n,negate:function(t){return E(n,e.zero,t)}}}function Il(e,n){return e+n|0}function zl(e,n){return e-n|0}var Bl=Mr;var Ul=Ol.eq,Hl={eq:Ul},Gl=cr(Hl),Wl=Ml.compare,Vl={eq:Ul,compare:Wl},Yl=_r(Vl),Zl=Yl.OrdRingExtensions;var Xl=Br({eq:Ul,compare:Wl,succ:function(e){if(e<2147483647)return e+1|0},pred:function(e){if(e>-2147483648)return e-1|0}}),Kl={add:Il,zero:0,multiply:Bl,one:1,subtract:zl},Jl=Dl(Kl),Ql=_(Zl,Kl);qc(Vl),kl(Vl);function ep(e){return String(e)}function np(e){try{return Tr(e)}catch(e){return}}rp=function(e,n){return sr(tp.eq,e,n)},tp=Hl,op=function(e,n){return mr(ip.compare,e,n)},sp=function(e,n){return hr(ip.compare,e,n)},cp=function(e,n){return gr(ip.compare,e,n)},up=function(e,n){return vr(ip.compare,e,n)},lp=function(e,n){return mr(ip.compare,n,e)},pp=function(e,n){return hr(ip.compare,n,e)},fp=function(e,n){return gr(ip.compare,n,e)},dp=function(e,n){return vr(ip.compare,n,e)},ap=function(e,n){return lr(ip.compare,e,n)},ip=Vl,Gl.eqWithConversion,Gl.notEq,Gl.eqInverted,Gl.EqInverted,Gl.EqBy,Yl.compareWithConversion,Yl.compareReversed,Yl.OrdReversed,Yl.compareAsInt,Yl.min,Yl.max,Yl.lessThan,Yl.lt,Yl.lessThanOrEq,Yl.lte,Yl.greaterThan,Yl.gt,Yl.greaterThanOrEq,Yl.gte,Yl.clamp,Yl.between,Yl.OrdNamed,Yl.OrdBy,Xl.fromToAsList,Xl.upFromAsList,Xl.upFromIncludingAsList,Xl.downFromAsList,Xl.downFromIncludingAsList,Jl.$neg,Jl.negate,Ql.abs,Ql.signum;var tp,rp,ip,ap,op,sp,cp,up,lp,pp,fp,dp,mp=ep;function hp(e,n){return nc([e],n)}function gp(e){if(0!==e.length)return[Y(e,0),J(e,1)]}function vp(e,n){return nc(n,[e])}function xp(e){return e.length}function bp(e){return 0===e.length}function yp(e){return 0!==e.length}function wp(e){return V(e,0)}function kp(e){var n=e.length;if(0!==n){if(1===n)return[];var t=J(e,1);return 0!==t.length?t:void 0}}function _p(e){var n=kp(e);return void 0!==n?n:[]}function Sp(e,n,t){return X(n,t,e)}function Ep(e,n){return ae(n,(function(n,t){return Gr(E(e,n,t))}))}function Ap(e,n){return $(Us,(function(n,t){return $(tc,e,t,n)?n:nc(n,[t])}),[],n)}function $p(e,n,t){return $(Us,(function(t,r){var i=t[1];return t[0]?[!0,nc(i,[r])]:E(e,n,r)?[!0,i]:[!1,nc(i,[r])]}),[!1,[]],t)[1]}function Cp(e,n,t){return $(Us,(function(t,r){return E(e,n,r)?t:nc(t,[r])}),[],t)}var Op=hp,Mp=function(e){for(var n=e.length,t=new Array(n),r=0;r<n;++r)t[r]=e[(n-1|0)-r|0];return t},jp=Z;var Fp=_(Ua,ot),Rp={emptyLazy:function(e){return 0},length:Za,isEmpty:so,isNotEmpty:co,head:uo,tail:lo,tailOrEmpty:po,uncons:ao,prepend:yo,append:oo,concat:ya,reverse:wo,mkString:Fp,zip:ko,zipWith:ho,fromArray:to,fromList:function(e){return e},toArray:ro,toList:function(e){return e},eqBy:Ha,showBy:Wa,Functor:Ea,Apply:Ca,Applicative:ja,Monad:Ta,Foldable:za,Traversable:no,Eq:Ga,Show:Va};var Tp=_(Xs,ot),qp={emptyLazy:function(e){return[]},length:xp,isEmpty:bp,isNotEmpty:yp,head:wp,tail:kp,tailOrEmpty:_p,uncons:gp,prepend:Op,append:vp,concat:nc,reverse:Mp,mkString:Tp,zip:jp,zipWith:Sp,fromArray:function(e){return e},fromList:sc,toArray:function(e){return e},toList:cc,eqBy:Ks,showBy:Qs,Functor:Os,Apply:Fs,Applicative:qs,Monad:Ps,Foldable:Ys,Traversable:rr,Eq:Js,Show:ec};function Lp(e){return[e,_(Rp.emptyLazy,void 0)]}function Np(e,n){return[e,n]}function Pp(e){return E(Rp.concat,_(Rp.Monad.pure,e[0]),e[1])}function Dp(e){return e[0]}function Ip(e){return e[1]}function zp(e,n){return[Dp(e),E(Rp.concat,Ip(e),Pp(n))]}var Bp={append:zp},Up=xa(Bp),Hp={append:zp};function Gp(e,n){return $(Rp.Foldable.fold_left,e,n[0],n[1])}function Wp(e,n,t){return $(Rp.Foldable.fold_left,e,E(e,n,t[0]),t[1])}function Vp(e,n,t){return E(e,t[0],$(Rp.Foldable.fold_right,e,n,t[1]))}function Yp(e){var n=_(Rp.Foldable.Fold_Map,e);return{fold_map:function(t,r){return E(e.append,_(t,r[0]),E(n.fold_map,t,r[1]))}}}function Zp(e){var n=_(Rp.Foldable.Fold_Map_Any,e);return{fold_map:function(t,r){return E(e.append,_(t,r[0]),E(n.fold_map,t,r[1]))}}}function Xp(e){var n=_(Rp.Foldable.Fold_Map_Plus,e);return{fold_map:function(t,r){return E(e.alt,_(t,r[0]),E(n.fold_map,t,r[1]))}}}var Kp={fold_left:Wp,fold_right:Vp,Fold_Map:Yp,Fold_Map_Any:Zp,Fold_Map_Plus:Xp},Jp=yi(Kp);function Qp(e,n){return[_(e,n[0]),E(Rp.Monad.map,e,n[1])]}var ef={map:Qp},nf=jn(ef);function tf(e,n){return Gp(zp,Qp((function(e){return Qp(e,n)}),e))}var rf={map:Qp,apply:tf},af=$n(rf),of={map:Qp,apply:tf,pure:Lp},sf=Rn(of);function cf(e,n){return Gp(zp,Qp(n,e))}var uf={map:Qp,apply:tf,pure:Lp,flat_map:cf},lf=On(uf);function pf(e,n){return n[0]+(e+E(Rp.mkString,e,n[1]))}function ff(e,n,t){return!!E(e,n[0],t[0])&&$(Rp.eqBy,e,n[1],t[1])}function df(e,n){return"[!"+pf(", ",Qp(e,n))+"!]"}var mf={one:Lp,make:Np,fromSequence:function(e){return Yn(_(Rp.head,e),(function(n){return[n,_(Rp.tailOrEmpty,e)]}))},toSequence:Pp,fromList:function(e){if(e)return[e[0],_(Rp.fromList,e[1])]},fromArray:function(e){return $i((function(e){return[e[0],_(Rp.fromArray,e[1])]}),gp(e))},cons:function(e,n){return[e,Pp(n)]},uncons:function(e){return[e[0],e[1]]},head:Dp,tail:Ip,concat:zp,SemigroupAny:Bp,concatNamed:Up.concatNamed,MagmaAny:Hp,reduceLeft:Gp,foldLeft:Wp,foldRight:Vp,Foldable:Kp,BsFoldableExtensions:Jp.BsFoldableExtensions,any:Jp.any,containsBy:Jp.containsBy,contains:Jp.contains,indexOfBy:Jp.indexOfBy,indexOf:Jp.indexOf,minBy:Jp.minBy,min:Jp.min,maxBy:Jp.maxBy,max:Jp.max,countBy:Jp.countBy,length:Jp.length,size:Jp.size,count:Jp.count,forEach:Jp.forEach,forEachWithIndex:Jp.forEachWithIndex,find:Jp.find,findWithIndex:Jp.findWithIndex,toList:Jp.toList,toArray:Jp.toArray,FoldableSemigroupExtensions:Jp.FoldableSemigroupExtensions,FoldableMonoidExtensions:Jp.FoldableMonoidExtensions,foldMap:Jp.foldMap,foldWithMonoid:Jp.foldWithMonoid,intercalate:Jp.intercalate,FoldableApplicativeExtensions:Jp.FoldableApplicativeExtensions,FoldableMonadExtensions:Jp.FoldableMonadExtensions,FoldableEqExtensions:Jp.FoldableEqExtensions,FoldableOrdExtensions:Jp.FoldableOrdExtensions,map:Qp,Functor:ef,BsFunctorExtensions:nf.BsFunctorExtensions,flipMap:nf.flipMap,$$void:nf.$$void,voidRight:nf.voidRight,voidLeft:nf.voidLeft,flap:nf.flap,apply:tf,Apply:rf,BsApplyExtensions:af.BsApplyExtensions,applyFirst:af.applyFirst,applySecond:af.applySecond,map2:af.map2,map3:af.map3,map4:af.map4,map5:af.map5,tuple2:af.tuple2,tuple3:af.tuple3,tuple4:af.tuple4,tuple5:af.tuple5,mapTuple2:af.mapTuple2,mapTuple3:af.mapTuple3,mapTuple4:af.mapTuple4,mapTuple5:af.mapTuple5,pure:Lp,Applicative:of,BsApplicativeExtensions:sf.BsApplicativeExtensions,liftA1:sf.liftA1,all:sf.all,bind:cf,Monad:uf,BsMonadExtensions:lf.BsMonadExtensions,flatMap:lf.flatMap,flatten:lf.flatten,composeKleisli:lf.composeKleisli,flipComposeKleisli:lf.flipComposeKleisli,liftM1:lf.liftM1,when_:lf.when_,unless:lf.unless,mkString:pf,reverse:function(e){var n=e[0];return Yi((function(e){return[n,_(Rp.emptyLazy,void 0)]}),$i((function(e){return[e[0],E(Rp.append,n,e[1])]}),_(Rp.uncons,_(Rp.reverse,e[1]))))},eqBy:ff,eq:function(e,n,t){return ff(e.eq,n,t)},Eq:function(e){return{eq:function(n,t){return ff(e.eq,n,t)}}},showBy:df,show:function(e,n){return df(e.show,n)},Show:function(e){return{show:function(n){return df(e.show,n)}}},WithApplicative:function(e){var n=_(Rp.Traversable,e),t=function(t,r){return E(e.apply,E(e.map,Np,_(t,r[0])),E(n.traverse,t,r[1]))},r=function(e){return t((function(e){return e}),e)},i={map:Qp,fold_left:Wp,fold_right:Vp,Fold_Map:Yp,Fold_Map_Any:Zp,Fold_Map_Plus:Xp,traverse:t,sequence:r};return{Traversable:i,traverse:t,sequence:r}}};function hf(e){return[e,_(qp.emptyLazy,void 0)]}function gf(e,n){return[e,n]}function vf(e){return E(qp.concat,_(qp.Monad.pure,e[0]),e[1])}function xf(e){return e[0]}function bf(e){return e[1]}function yf(e,n){return[xf(e),E(qp.concat,bf(e),vf(n))]}var wf={append:yf},kf=xa(wf),_f={append:yf};function Sf(e,n){return $(qp.Foldable.fold_left,e,n[0],n[1])}function Ef(e,n,t){return $(qp.Foldable.fold_left,e,E(e,n,t[0]),t[1])}function Af(e,n,t){return E(e,t[0],$(qp.Foldable.fold_right,e,n,t[1]))}function $f(e){var n=_(qp.Foldable.Fold_Map,e);return{fold_map:function(t,r){return E(e.append,_(t,r[0]),E(n.fold_map,t,r[1]))}}}function Cf(e){var n=_(qp.Foldable.Fold_Map_Any,e);return{fold_map:function(t,r){return E(e.append,_(t,r[0]),E(n.fold_map,t,r[1]))}}}function Of(e){var n=_(qp.Foldable.Fold_Map_Plus,e);return{fold_map:function(t,r){return E(e.alt,_(t,r[0]),E(n.fold_map,t,r[1]))}}}var Mf={fold_left:Ef,fold_right:Af,Fold_Map:$f,Fold_Map_Any:Cf,Fold_Map_Plus:Of},jf=yi(Mf);function Ff(e,n){return[_(e,n[0]),E(qp.Monad.map,e,n[1])]}var Rf={map:Ff},Tf=jn(Rf);function qf(e,n){return Sf(yf,Ff((function(e){return Ff(e,n)}),e))}var Lf={map:Ff,apply:qf},Nf=$n(Lf),Pf={map:Ff,apply:qf,pure:hf},Df=Rn(Pf);function If(e,n){return Sf(yf,Ff(n,e))}var zf={map:Ff,apply:qf,pure:hf,flat_map:If},Bf=On(zf);function Uf(e,n){return n[0]+(e+E(qp.mkString,e,n[1]))}function Hf(e,n,t){return!!E(e,n[0],t[0])&&$(qp.eqBy,e,n[1],t[1])}function Gf(e,n){return"[!"+Uf(", ",Ff(e,n))+"!]"}var Wf={one:hf,make:gf,fromSequence:function(e){return Yn(_(qp.head,e),(function(n){return[n,_(qp.tailOrEmpty,e)]}))},toSequence:vf,fromList:function(e){if(e)return[e[0],_(qp.fromList,e[1])]},fromArray:function(e){return $i((function(e){return[e[0],_(qp.fromArray,e[1])]}),gp(e))},cons:function(e,n){return[e,vf(n)]},uncons:function(e){return[e[0],e[1]]},head:xf,tail:bf,concat:yf,SemigroupAny:wf,concatNamed:kf.concatNamed,MagmaAny:_f,reduceLeft:Sf,foldLeft:Ef,foldRight:Af,Foldable:Mf,BsFoldableExtensions:jf.BsFoldableExtensions,any:jf.any,containsBy:jf.containsBy,contains:jf.contains,indexOfBy:jf.indexOfBy,indexOf:jf.indexOf,minBy:jf.minBy,min:jf.min,maxBy:jf.maxBy,max:jf.max,countBy:jf.countBy,length:jf.length,size:jf.size,count:jf.count,forEach:jf.forEach,forEachWithIndex:jf.forEachWithIndex,find:jf.find,findWithIndex:jf.findWithIndex,toList:jf.toList,toArray:jf.toArray,FoldableSemigroupExtensions:jf.FoldableSemigroupExtensions,FoldableMonoidExtensions:jf.FoldableMonoidExtensions,foldMap:jf.foldMap,foldWithMonoid:jf.foldWithMonoid,intercalate:jf.intercalate,FoldableApplicativeExtensions:jf.FoldableApplicativeExtensions,FoldableMonadExtensions:jf.FoldableMonadExtensions,FoldableEqExtensions:jf.FoldableEqExtensions,FoldableOrdExtensions:jf.FoldableOrdExtensions,map:Ff,Functor:Rf,BsFunctorExtensions:Tf.BsFunctorExtensions,flipMap:Tf.flipMap,$$void:Tf.$$void,voidRight:Tf.voidRight,voidLeft:Tf.voidLeft,flap:Tf.flap,apply:qf,Apply:Lf,BsApplyExtensions:Nf.BsApplyExtensions,applyFirst:Nf.applyFirst,applySecond:Nf.applySecond,map2:Nf.map2,map3:Nf.map3,map4:Nf.map4,map5:Nf.map5,tuple2:Nf.tuple2,tuple3:Nf.tuple3,tuple4:Nf.tuple4,tuple5:Nf.tuple5,mapTuple2:Nf.mapTuple2,mapTuple3:Nf.mapTuple3,mapTuple4:Nf.mapTuple4,mapTuple5:Nf.mapTuple5,pure:hf,Applicative:Pf,BsApplicativeExtensions:Df.BsApplicativeExtensions,liftA1:Df.liftA1,all:Df.all,bind:If,Monad:zf,BsMonadExtensions:Bf.BsMonadExtensions,flatMap:Bf.flatMap,flatten:Bf.flatten,composeKleisli:Bf.composeKleisli,flipComposeKleisli:Bf.flipComposeKleisli,liftM1:Bf.liftM1,when_:Bf.when_,unless:Bf.unless,mkString:Uf,reverse:function(e){var n=e[0];return Yi((function(e){return[n,_(qp.emptyLazy,void 0)]}),$i((function(e){return[e[0],E(qp.append,n,e[1])]}),_(qp.uncons,_(qp.reverse,e[1]))))},eqBy:Hf,eq:function(e,n,t){return Hf(e.eq,n,t)},Eq:function(e){return{eq:function(n,t){return Hf(e.eq,n,t)}}},showBy:Gf,show:function(e,n){return Gf(e.show,n)},Show:function(e){return{show:function(n){return Gf(e.show,n)}}},WithApplicative:function(e){var n=_(qp.Traversable,e),t=function(t,r){return E(e.apply,E(e.map,gf,_(t,r[0])),E(n.traverse,t,r[1]))},r=function(e){return t((function(e){return e}),e)},i={map:Ff,fold_left:Ef,fold_right:Af,Fold_Map:$f,Fold_Map_Any:Cf,Fold_Map_Plus:Of,traverse:t,sequence:r};return{Traversable:i,traverse:t,sequence:r}},toNonEmptyList:function(e){return[e[0],Un(e[1])]},fromNonEmptyList:function(e){return[e[0],Hn(e[1])]}};function Vf(e,n,t){return t.tag?l(1,[_(n,t[0])]):l(0,[_(e,t[0])])}function Yf(e,n){return n.tag?n:l(0,[_(e,n[0])])}function Zf(e,n,t){if(!n.tag)return t.tag?l(1,[t[0]]):l(0,[_(n[0],t[0])]);var r=n[0];return t.tag?l(1,[E(e,r,t[0])]):l(1,[r])}function Xf(e,n,t){if(n.tag)return t.tag?l(1,[E(e,n[0],t[0])]):l(0,[l(1,[t[0]])]);var r=n[0];return t.tag?l(0,[l(0,[r])]):l(0,[l(2,[r,t[0]])])}function Kf(e){return l(0,[e])}function Jf(e,n){return e.tag?l(1,[e[0]]):_(n,e[0])}function Qf(e,n){var t={map:Yf},r=jn(t),i=function(n,t){return Zf(e.append,n,t)},a={map:Yf,apply:i},o=$n(a),s={map:Yf,apply:i,pure:Kf},c=Rn(s),u={map:Yf,align:function(n,t){return Xf(e.append,n,t)},alignWith:function(n,t,r){return function(e,n,t,r){return Yf(n,Xf(e,t,r))}(e.append,n,t,r)}},l={map:Yf,apply:i,pure:Kf,flat_map:Jf},p=On(l),f=Fn(t),d=Cn(a),m=Mn(l),h={FunctorExtensions:f.FunctorExtensions,$less$$great:f.$less$$great,$less$hash$great:f.$less$hash$great,$less$:f.$less$,$$great:f.$$great,$less$at$great:f.$less$at$great,ApplyExtensions:d.ApplyExtensions,$less$star$great:d.$less$star$great,$less$star:d.$less$star,$star$great:d.$star$great,MonadExtensions:m.MonadExtensions,$great$great$eq:m.$great$great$eq,$eq$less$less:m.$eq$less$less,$great$eq$great:m.$great$eq$great,$less$eq$less:m.$less$eq$less};return{Functor:t,map:Yf,BsFunctorExtensions:r.BsFunctorExtensions,flipMap:r.flipMap,$$void:r.$$void,voidRight:r.voidRight,voidLeft:r.voidLeft,flap:r.flap,Apply:a,apply:i,BsApplyExtensions:o.BsApplyExtensions,applyFirst:o.applyFirst,applySecond:o.applySecond,map2:o.map2,map3:o.map3,map4:o.map4,map5:o.map5,tuple2:o.tuple2,tuple3:o.tuple3,tuple4:o.tuple4,tuple5:o.tuple5,mapTuple2:o.mapTuple2,mapTuple3:o.mapTuple3,mapTuple4:o.mapTuple4,mapTuple5:o.mapTuple5,Applicative:s,pure:Kf,BsApplicativeExtensions:c.BsApplicativeExtensions,liftA1:c.liftA1,all:c.all,Semialign:u,Monad:l,bind:Jf,BsMonadExtensions:p.BsMonadExtensions,flatMap:p.flatMap,flatten:p.flatten,composeKleisli:p.composeKleisli,flipComposeKleisli:p.flipComposeKleisli,liftM1:p.liftM1,when_:p.when_,unless:p.unless,Infix:h}}function ed(e){var n=function(n,t){return $(e.bimap,(function(e){return e}),n,t)};return{mapLeft:function(n,t){return $(e.bimap,n,(function(e){return e}),t)},mapRight:n,mapError:n}}function nd(e,n,t){return t.tag?_(e,t[0]):_(n,t[0])}function td(e){return e.tag?l(0,[e[0]]):l(1,[e[0]])}function rd(e,n){return e.tag?n.tag?l(1,[n[0]]):l(1,[e[0]]):n.tag?l(1,[n[0]]):l(0,[_(e[0],n[0])])}function id(e,n){return e.tag?e:_(n,e[0])}function ad(e,n){return id(n,e)}function od(e,n){return void 0!==n?l(0,[q(n)]):l(1,[e])}var sd={bimap:function(e,n,t){return t.tag?l(1,[_(n,t[0])]):l(0,[_(e,t[0])])}},cd=ed(sd);l(0,[void 0]),cd.mapLeft,cd.mapRight;var ud=cd.mapError;function ld(e){return l(0,[e])}function pd(e){return l(1,[e])}function fd(e){return l(4,[e])}function dd(e,n){return Wi((function(n){return l(1,[_(e,void 0)])}),ld,n)}function md(e,n){return l(5,[e,n])}function hd(e,n){return l(7,[e,n])}function gd(e,n){for(;;){var t=n,r=e;switch(0|t.tag){case 0:return _(r,l(0,[t[0]]));case 1:return _(r,l(1,[t[0]]));case 2:return _(r,l(0,[_(t[0],void 0)]));case 3:n=_(t[0],void 0);continue;case 4:return _(t[0],r);case 5:var i=t[0];n=t[1],e=function(e,n){return function(t){return t.tag?_(e,t):_(e,l(0,[_(n,t[0])]))}}(r,i);continue;case 6:return vd(function(e){return function(n,t){return _(e,rd(n,t))}}(r),t[0],t[1]);case 7:var a=t[0];n=t[1],e=function(e,n){return function(t){return t.tag?_(e,t):gd((function(n){return n.tag?_(e,n):_(e,l(0,[n[0]]))}),_(n,t[0]))}}(r,a);continue}}}function vd(e,n,t){var r={contents:void 0},i={contents:void 0};return gd((function(n){var t=i.contents;return void 0!==t?E(e,n,t):void(r.contents=n)}),n),gd((function(n){var t=r.contents;return void 0!==t?E(e,t,n):void(i.contents=n)}),t)}function xd(e,n){switch(0|n.tag){case 0:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return l(0,[function(n){return Nn.$great$great(e,t,n)}]);case 1:return n;case 2:var r=n[0];return l(2,[function(n){var t=_(r,void 0);return function(n){return Nn.$great$great(e,t,n)}}]);case 3:var i=n[0];return l(3,[function(n){return l(5,[function(n){return function(t){return Nn.$great$great(e,n,t)}},_(i,void 0)])}]);case 4:var a=n[0];return l(4,[function(n){return _(a,(function(t){if(t.tag)return _(n,t);var r=t[0];return _(n,l(0,[function(n){return Nn.$great$great(e,r,n)}]))}))}]);case 5:var o=n[0];return l(5,[function(n){var t=_(o,n);return function(n){return Nn.$great$great(e,t,n)}},n[1]]);case 6:return l(6,[l(5,[function(n,t){var r=_(n,t);return function(n){return Nn.$great$great(e,r,n)}},n[0]]),n[1]]);case 7:var s=n[0];return l(7,[function(n){return l(5,[function(n){return function(t){return Nn.$great$great(e,n,t)}},_(s,n)])},n[1]])}}(n[0],e);case 1:return l(1,[n[0]]);case 2:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return l(2,[function(n){var r=_(e,void 0);return function(e){return Nn.$great$great(r,t,e)}}]);case 1:return n;case 2:var r=n[0];return l(2,[function(n){var t=_(r,void 0),i=_(e,void 0);return function(e){return Nn.$great$great(i,t,e)}}]);case 3:var i=n[0];return l(3,[function(n){return l(5,[function(n){var t=_(e,void 0);return function(e){return Nn.$great$great(t,n,e)}},_(i,void 0)])}]);case 4:var a=n[0];return l(4,[function(n){return _(a,(function(t){if(t.tag)return _(n,t);var r=t[0],i=_(e,void 0);return _(n,l(0,[function(e){return Nn.$great$great(i,r,e)}]))}))}]);case 5:var o=n[0];return l(5,[function(n){var t=_(o,n),r=_(e,void 0);return function(e){return Nn.$great$great(r,t,e)}},n[1]]);case 6:return l(6,[l(5,[function(n,t){var r=_(n,t),i=_(e,void 0);return function(e){return Nn.$great$great(i,r,e)}},n[0]]),n[1]]);case 7:var s=n[0];return l(7,[function(n){return l(5,[function(n){var t=_(e,void 0);return function(e){return Nn.$great$great(t,n,e)}},_(s,n)])},n[1]])}}(n[0],e);case 3:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return l(3,[function(n){return l(5,[function(e){return function(n){return Nn.$great$great(e,t,n)}},_(e,void 0)])}]);case 1:return n;case 2:var r=n[0];return l(3,[function(n){return l(5,[function(e){var n=_(r,void 0);return function(t){return Nn.$great$great(e,n,t)}},_(e,void 0)])}]);case 3:var i=n[0];return l(3,[function(n){return l(7,[function(e){return l(5,[function(n){return function(t){return Nn.$great$great(e,n,t)}},_(i,void 0)])},_(e,void 0)])}]);case 4:var a=n[0];return l(4,[function(n){return gd((function(e){if(e.tag)return _(n,e);var t=e[0];return _(a,(function(e){if(e.tag)return _(n,e);var r=e[0];return _(n,l(0,[function(e){return Nn.$great$great(t,r,e)}]))}))}),_(e,void 0))}]);case 5:var o=n[1],s=n[0];return l(3,[function(n){return l(7,[function(e){return l(5,[function(n){var t=_(s,n);return function(n){return Nn.$great$great(e,t,n)}},o])},_(e,void 0)])}]);case 6:var c=n[1],u=n[0];return l(3,[function(n){return l(7,[function(e){return l(7,[function(n){return l(5,[function(t){var r=_(n,t);return function(n){return Nn.$great$great(e,r,n)}},c])},u])},_(e,void 0)])}]);case 7:var p=n[1],f=n[0];return l(3,[function(n){return l(7,[function(e){return l(7,[function(n){return l(5,[function(n){return function(t){return Nn.$great$great(e,n,t)}},_(f,n)])},p])},_(e,void 0)])}])}}(n[0],e);case 4:return function(e,n){switch(0|n.tag){case 0:var t=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var r=e[0];return _(n,l(0,[function(e){return Nn.$great$great(r,t,e)}]))}))}]);case 1:return n;case 2:var r=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var t=e[0],i=_(r,void 0);return _(n,l(0,[function(e){return Nn.$great$great(t,i,e)}]))}))}]);case 3:var i=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var t=e[0];return gd((function(e){if(e.tag)return _(n,e);var r=e[0];return _(n,l(0,[function(e){return Nn.$great$great(t,r,e)}]))}),_(i,void 0))}))}]);case 4:var a=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var t=e[0];return _(a,(function(e){if(e.tag)return _(n,e);var r=e[0];return _(n,l(0,[function(e){return Nn.$great$great(t,r,e)}]))}))}))}]);case 5:var o=n[1],s=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var t=e[0];return gd(n,l(5,[function(e){var n=_(s,e);return function(e){return Nn.$great$great(t,n,e)}},o]))}))}]);case 6:var c=n[1],u=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var t=e[0];return gd(n,l(7,[function(e){return l(5,[function(n){var r=_(e,n);return function(e){return Nn.$great$great(t,r,e)}},c])},u]))}))}]);case 7:var p=n[1],f=n[0];return l(4,[function(n){return _(e,(function(e){if(e.tag)return _(n,e);var t=e[0];return gd(n,l(7,[function(e){return l(5,[function(e){return function(n){return Nn.$great$great(t,e,n)}},_(f,e)])},p]))}))}])}}(n[0],e);case 5:return function(e,n,t){return l(7,[function(n){return l(5,[function(t){var r=_(e,n);return function(e){return Nn.$great$great(r,t,e)}},t])},n])}(n[0],n[1],e);case 6:return function(e,n,t){return l(7,[function(e){return l(7,[function(n){return l(5,[function(t){var r=_(e,n);return function(e){return Nn.$great$great(r,t,e)}},t])},n])},e])}(n[0],n[1],e);case 7:return function(e,n,t){return l(7,[function(n){return l(7,[function(e){return l(5,[function(n){return function(t){return Nn.$great$great(e,n,t)}},t])},_(e,n)])},n])}(n[0],n[1],e)}}function bd(e,n){switch(0|n.tag){case 0:return l(0,[n[0]]);case 1:return l(1,[_(e,n[0])]);case 2:return l(2,[n[0]]);case 3:var t=n[0];return l(3,[function(n){return bd(e,_(t,void 0))}]);case 4:var r=n[0];return l(4,[function(n){return _(r,(function(t){return _(n,E(ud,e,t))}))}]);case 5:return l(5,[n[0],bd(e,n[1])]);case 6:return l(6,[bd(e,n[0]),bd(e,n[1])]);case 7:var i=n[0];return l(7,[function(n){return bd(e,_(i,n))},bd(e,n[1])])}}function yd(e,n){switch(0|n.tag){case 0:return l(0,[n[0]]);case 1:return _(e,n[0]);case 2:return l(2,[n[0]]);case 3:var t=n[0];return l(3,[function(n){return yd(e,_(t,void 0))}]);case 4:var r=n[0];return l(4,[function(n){return _(r,(function(t){return t.tag?gd(n,_(e,t[0])):_(n,l(0,[t[0]]))}))}]);case 5:return function(e,n,t){switch(0|t.tag){case 0:return yd(e,l(0,[_(n,t[0])]));case 1:return _(e,t[0]);case 2:var r=t[0];return yd(e,l(2,[function(e){return _(n,_(r,void 0))}]));case 3:var i=t[0];return yd(e,l(3,[function(e){return l(5,[n,_(i,void 0)])}]));case 4:var a=t[0];return l(4,[function(t){return _(a,(function(r){return r.tag?gd(t,_(e,r[0])):_(t,l(0,[_(n,r[0])]))}))}]);case 5:var o=t[0];return yd(e,l(5,[function(e){return Nn.$great$great(o,n,e)},t[1]]));case 6:return yd(e,l(6,[xd(l(0,[n]),t[0]),t[1]]));case 7:var s=t[0];return yd(e,l(7,[function(e){return Nn.$great$great(s,(function(e){return l(5,[n,e])}),e)},t[1]]))}}(e,n[0],n[1]);case 6:return function(e,n,t){switch(0|t.tag){case 0:var r=t[0];return yd(e,l(5,[function(e){return _(e,r)},n]));case 1:return _(e,t[0]);case 2:var i=t[0];return yd(e,l(5,[function(e){return _(e,_(i,void 0))},n]));case 3:var a=t[0];return yd(e,l(3,[function(e){return l(6,[n,_(a,void 0)])}]));case 4:var o=t[0];return l(4,[function(t){return _(o,(function(r){return r.tag?gd(t,_(e,r[0])):gd(t,yd(e,l(6,[n,l(0,[r[0]])])))}))}]);case 5:return yd(e,l(6,[xd(n,l(0,[t[0]])),t[1]]));case 6:return yd(e,l(6,[xd(n,t[0]),t[1]]));case 7:var s=t[1],c=t[0];return yd(e,l(7,[function(e){return l(7,[function(n){return l(5,[S(e),_(c,n)])},s])},n]))}}(e,n[0],n[1]);case 7:return function(e,n,t){switch(0|t.tag){case 0:return yd(e,_(n,t[0]));case 1:return _(e,t[0]);case 2:var r=t[0];return yd(e,l(3,[function(e){return _(n,_(r,void 0))}]));case 3:var i=t[0];return yd(e,l(3,[function(e){return l(7,[n,_(i,void 0)])}]));case 4:var a=t[0];return l(4,[function(t){return _(a,(function(r){return r.tag?gd(t,_(e,r[0])):gd(t,yd(e,_(n,r[0])))}))}]);case 5:var o=t[0];return yd(e,l(7,[function(e){return Nn.$great$great(o,n,e)},t[1]]));case 6:var s=t[0];return yd(e,l(7,[function(e){return l(7,[function(t){return _(n,_(t,e))},s])},t[1]]));case 7:var c=t[0];return yd(e,l(7,[function(e){return l(7,[n,_(c,e)])},t[1]]))}}(e,n[0],n[1])}}function wd(e,n){return yd((function(n){return l(0,[_(e,n)])}),n)}function kd(e,n,t){return bd(n,l(5,[e,t]))}var _d={bimap:kd},Sd=ed(_d),Ed=Sd.mapError;l(0,[void 0]),l(0,[void 0]),Sd.mapLeft,Sd.mapRight;function Ad(e,n){return e+n}var $d={append:Ad};function Cd(e){return-1*e}var Od={Magma:$d,Medial_Magma:$d,Semigroup:{append:Ad},Monoid:{append:Ad,empty:0},Quasigroup:{append:Ad},Medial_Quasigroup:{append:Ad},Loop:{append:Ad,empty:0},Group:{append:Ad,empty:0,inverse:Cd},Abelian_Group:{append:Ad,empty:0,inverse:Cd}};function Md(e,n){return e*n}var jd={append:Md},Fd={Magma:jd,Medial_Magma:jd,Semigroup:{append:Md},Monoid:{append:Md,empty:1},Quasigroup:{append:Md},Medial_Quasigroup:{append:Md},Loop:{append:Md,empty:1}};var Rd={eq:Qe},Td={eq:Qe,compare:en};function qd(e,n){return e+n}function Ld(e,n){return e*n}function Nd(e,n){return e-n}function Pd(e){return 1}function Dd(e,n){return e/n}function Id(e,n){return 0}var zd={add:qd,zero:0,multiply:Ld,one:1,subtract:Nd,degree:Pd,divide:Dd,modulo:Id},Bd=nn($d),Ud=nn(jd),Hd=cn(Rd),Gd=un(Td),Wd=ln(zd);Hd.$eq$pipe$eq,Gd.$less$pipe$pipe,Gd.$pipe$pipe$great,Gd.$less$pipe$eq,Gd.$great$pipe$eq,Wd.$pipe$plus$pipe,Wd.$pipe$star$pipe,Wd.$pipe$neg$pipe,Wd.$pipe$slash$pipe,Wd.$pipe$percent$pipe;function Vd(e,n){return e===n}var Yd=Vd;Number.NaN;function Zd(e,n){return e+n}function Xd(e,n){return e*n}var Kd={eq:Vd,compare:Td.compare},Jd=_r(Kd),Qd=Jd.OrdRingExtensions;function em(e,n){return e-n}var nm={add:Zd,zero:0,multiply:Xd,one:1,subtract:em},tm=Dl(nm),rm=_(Qd,nm);rm.abs;Jd.compareWithConversion,Jd.compareReversed,Jd.OrdReversed,Jd.compareAsInt,Jd.min,Jd.max,Jd.lessThan,Jd.lt,Jd.lessThanOrEq,Jd.lte,Jd.greaterThan,Jd.gt,Jd.greaterThanOrEq,Jd.gte,Jd.clamp,Jd.between,Jd.OrdNamed,Jd.OrdBy,tm.$neg,tm.negate,rm.signum;var im=[];function am(e,n,t){if(n<0||t<0||n>(e.length-t|0))throw[d,"String.sub / Bytes.sub"];var r=Sr(t);return Er(e,n,r,0,t),r}function om(e){var n=e-9|0;return n>4||n<0?23===n:2!==n}function sm(e){var n=e-9|0;return n>4||n<0?23===n:2!==n}function cm(e){return""===e||!sm(e.charCodeAt(0))&&!sm(e.charCodeAt(e.length-1|0))?e:Ar(function(e){for(var n=e.length,t=0;t<n&&om(e[t]);)t=t+1|0;for(var r=n-1|0;r>=t&&om(e[r]);)r=r-1|0;return r>=t?am(e,t,1+(r-t|0)|0):im}($r(e)))}function um(e,n){return e+n}var lm=wi({append:um}),pm={append:um,empty:""},fm=xi(pm);function dm(e,n){for(var t="",r=e;;){if(r<=0)return t;r=r-1|0,t=t+n}}function mm(e,n){return e===n}var hm={eq:mm},gm=cr(hm),vm={eq:mm,compare:ct.compare},xm=_r(vm);qc(vm),kl(vm);function bm(e,n,t){var r=void 0!==n?n:" ",i=t.length,a=r.length;if(i>=e)return t;if(0===a)return t;var o=e-i|0;return dm(Cr(o,a)+1|0,r).slice(0,o)+t}lm.concatNamed,fm.BsMonoidExtensions,fm.guard,fm.power,gm.eqWithConversion,gm.notEq,gm.eqInverted,gm.EqInverted,gm.EqBy,xm.compareWithConversion,xm.compareReversed,xm.OrdReversed,xm.compareAsInt,xm.min,xm.max,xm.lessThan,xm.lt,xm.lessThanOrEq,xm.lte,xm.greaterThan,xm.gt,xm.greaterThanOrEq,xm.gte,xm.clamp,xm.between,xm.OrdRingExtensions,xm.OrdNamed,xm.OrdBy;var ym=_(Qa,vm);var wm=_(eo,vm);var km=_(Ka,pm),_m=km.foldWithMonoid,Sm=km.intercalate;ym.contains,ym.indexOf,wm.min,wm.max,km.BsFoldableMonoidExtensions,km.foldMap;var Em=_(Qa,Vl);var Am=_(eo,Vl);var $m=_(Ja,Al.Monoid),Cm=_(Ja,Cl.Monoid),Om=(Em.contains,Em.indexOf,Am.min,Am.max,_(Qa,Kd));var Mm=_(eo,Kd);var jm=_(Ja,Od.Monoid),Fm=_(Ja,Fd.Monoid);Om.contains,Om.indexOf,Mm.min,Mm.max,no(Ti);var Rm=Qf(wa),Tm=ha(Rm.Applicative);Tm.map,Tm.fold_left,Tm.fold_right,Tm.Fold_Map,Tm.Fold_Map_Any,Tm.Fold_Map_Plus,Tm.traverse,Tm.sequence;var qm=Fn(Ea),Lm=vi(Na),Nm=Cn(Ca),Pm=Mn(Ta),Dm=(qm.FunctorExtensions,qm.$less$$great,qm.$less$hash$great,qm.$less$,qm.$$great,qm.$less$at$great,Lm.$less$pipe$great,Nm.ApplyExtensions,Nm.$less$star$great,Nm.$less$star,Nm.$star$great,Pm.MonadExtensions,Pm.$great$great$eq,Pm.$eq$less$less,Pm.$great$eq$great,Pm.$less$eq$less,Sa),Im=Da,zm=Za,Bm=Xa,Um=to,Hm=ro,Gm=oo,Wm=fo,Vm=mo,Ym=function(e,n){return Dn(n,e)},Zm=go;var Xm=_(ac,vm);var Km=_(oc,vm);var Jm=_(rc,pm),Qm=Jm.foldWithMonoid,eh=Jm.intercalate;Xm.contains,Xm.indexOf,Km.min,Km.max,Jm.BsFoldableMonoidExtensions,Jm.foldMap;var nh=_(ac,Vl);var th=_(oc,Vl);var rh=_(ic,Al.Monoid),ih=_(ic,Cl.Monoid),ah=(nh.contains,nh.indexOf,th.min,th.max,_(ac,Kd));var oh=_(oc,Kd);var sh=_(ic,Od.Monoid),ch=_(ic,Fd.Monoid);ah.contains,ah.indexOf,oh.min,oh.max,_(rr,Ti);var uh=Qf(As);_(rr,uh.Applicative);var lh=Fn(Os),ph=vi(zs),fh=Cn(Fs),dh=Mn(Ps),mh=(lh.FunctorExtensions,lh.$less$$great,lh.$less$hash$great,lh.$less$,lh.$$great,lh.$less$at$great,ph.$less$pipe$great,fh.ApplyExtensions,fh.$less$star$great,fh.$less$star,fh.$star$great,dh.MonadExtensions,dh.$great$great$eq,dh.$eq$less$less,dh.$great$eq$great,dh.$less$eq$less,function(e,n){return V(n,e)});var hh=Hi(vm);hh.compare;var gh=Hi(Vl);gh.compare;var vh=Hi(Kd);vh.compare;var xh=_i(Ei),bh=Fn(Ci),yh=vi(oi),wh=Cn(ji),kh=Mn(Ni);xh.SE,xh.$less$less$less,xh.$great$great$great,bh.FunctorExtensions,bh.$less$$great,bh.$less$hash$great,bh.$less$,bh.$$great,bh.$less$at$great,yh.$less$pipe$great,wh.ApplyExtensions,wh.$less$star$great,wh.$less$star,wh.$star$great,kh.MonadExtensions,kh.$great$great$eq,kh.$eq$less$less,kh.$great$eq$great,kh.$less$eq$less;var _h=$i,Sh=Ui,Eh=Vi,Ah=Zi,$h=t(5);function Ch(e){switch(e.code){case"EACCES":return l(0,[e]);case"EADDRINUSE":return l(1,[e]);case"ECONNREFUSED":return l(2,[e]);case"ECONNRESET":return l(3,[e]);case"EEXIST":return l(4,[e]);case"EISDIR":return l(5,[e]);case"EMFILE":return l(6,[e]);case"ENOENT":return l(7,[e]);case"ENOTDIR":return l(8,[e]);case"ENOTEMPTY":return l(9,[e]);case"ENOTFOUND":return l(10,[e]);case"EPERM":return l(11,[e]);case"EPIPE":return l(12,[e]);case"ETIMEDOUT":return l(13,[e]);default:return l(14,[e])}}function Oh(e){return l(15,[e])}function Mh(e){return function(e,n,t){return void 0===t.syscall?n(t):e(t)}(Ch,Oh,e)}function jh(e,n){var t=void 0!==e?e:"utf-8";return fd((function(e){$h.readdir(n,{withFileTypes:!0,encoding:t},(function(n,t){return _(e,E(ud,Mh,td(od(t,null===n?void 0:R(n)))))}))}))}function Fh(e,n){return E(ud,Mh,td(od(n,null===e?void 0:R(e))))}function Rh(e,n){var t=void 0!==e?e:"utf-8";return fd((function(e){$h.readFile(n,{encoding:t},(function(n,t){return _(e,Fh(n,t))}))}))}var Th=t(72);var qh=/^([0-9]{4})-([0-9]{2})-([0-9]{2}) ([0-9]{2}):([0-9]{2})$/;function Lh(e){return ad((function(e){var n=e.slice(1).map((function(e){return E(Sh,np,null==e?void 0:R(e))}));if(5!==n.length)return l(1,[1]);var t=n[0];if(void 0===t)return l(1,[1]);var r=n[1];if(void 0===r)return l(1,[1]);var i=n[2];if(void 0===i)return l(1,[1]);var a=n[3];if(void 0===a)return l(1,[1]);var o=n[4];return void 0!==o?l(0,[s(t,r,i,a,o)]):l(1,[1])}),ad((function(e){return od(1,(n=e,T(qh.exec(n))));var n}),od(0,E(Sh,(function(e){return mh(0,e)}),L(e,"date")))))}function Nh(e){var n=Th.parseMetadata(e),t=n[0],r=function(e){return E(Sh,(function(e){return mh(0,e)}),L(e,"title"))}(t),i=Lh(t),a=function(e){return _h(Um,Ah((function(e){return e.length>0}))(L(e,"tags")))}(t);return void 0!==r?i.tag?l(1,void 0!==a?[[i[0]]]:[2]):void 0!==a?l(0,[{title:r,date:i[0],tags:a,text:n[1]}]):l(1,[1]):i.tag||void 0===a?l(1,[2]):l(1,[0])}function Ph(e){return hd((function(n){return n.filter((function(e){return!!e.name.toLowerCase().endsWith(".md")&&!e.isDirectory()})).map((function(n){var t=n.name,r=u.join(e,t);return hd((function(e){return nd(pd,ld,E(ud,(function(e){return l(2,[t,e])}),Nh(e)))}),E(Ed,(function(e){return l(1,[t,e])}),hd((function(e){return Rh(void 0,r)}),l(2,[function(e){console.log('Reading entry from "'+String(r)+'"')}]))))})).reduce((function(e,n){return hd((function(e){return md((function(n){return[n,e]}),n)}),e)}),l(0,[0]))}),E(Ed,(function(e){return l(0,[e])}),hd((function(n){return jh(void 0,e)}),l(2,[function(n){console.log('Reading from entries directory "'+String(e)+'"')}]))))}function Dh(e){return hd((function(n){return kd((function(e){var t=e.toString("base64");return{uri:"data:"+String(n)+";base64,"+String(t),mimeType:n}}),(function(e){return[e]}),function(e){return fd((function(n){$h.readFile(e,{encoding:null},(function(e,t){return _(n,Fh(e,t))}))}))}(e))}),hd((function(n){return dd((function(e){return 0}),D(u.basename(e)))}),l(2,[function(n){console.log('Reading favicon from "'+String(e)+'"')}])))}function Ih(e,n,t,r){return hd((function(e){return kd((function(n){return e}),(function(e){return l(3,[e])}),(n=r,md((function(e){}),hd((function(e){return jh(void 0,n)}),l(2,[function(e){console.log('Checking existence of uploads directory "'+String(n)+'"')}])))));var n}),hd((function(e){var n=e[1],r=e[0];return kd((function(e){return{about:r,entries:n,favicon:e}}),(function(e){return l(2,[e])}),Dh(t))}),hd((function(n){return kd((function(e){return[e,n]}),(function(e){return l(0,[e])}),(t=e,hd((function(e){return Rh(void 0,t)}),l(2,[function(e){console.log('Reading about text from "'+String(t)+'"')}]))));var t}),E(Ed,(function(e){return l(1,[e])}),Ph(n)))))}var zh={setStatusCode:function(e,n){n.statusCode=e},setContentType:function(e){return function(n){n.setHeader("Content-Type",e)}},setContentLength:function(e){var n=String(e);return function(e){e.setHeader("Content-Length",n)}},setLastModified:function(e){var n=e.toUTCString();return function(e){e.setHeader("Last-Modified",n)}}},Bh=t(73),Uh=t(11);var Hh={initial:-878767996,inherit_:-601204732,unset:653193961,toString:function(e){return-601204732!==e?e>=653193961?"unset":"initial":"inherit"}};var Gh={pct:function(e){return[-119887163,e]},toString:function(e){return e[1].toString()+"%"}};function Wh(e){if("number"==typeof e)return"0";var n=e[0];if(n>=22632)return n>=25092?25096!==n?n>=26433?n>=5691738?e[1].toString()+"rem":e[1].toString()+"vw":n>=26418?e[1].toString()+"vh":e[1].toString()+"pt":e[1].toString()+"px":n>=24416?n>=25075?e[1].toString()+"pc":e[1].toString()+"mm":n>=22643?e[1].toString()+"ex":e[1].toString()+"em";if(n>=-833470756)return n>=22181?n>=22186?e[1].toString()+"cm":e[1].toString()+"ch":n>=-119887163?e[1].toString()+"%":e[1].toString()+"vmin";if(n>=-977586742)return n>=-833472530?e[1].toString()+"vmax":e[1].toString()+"in";if(n>=-1040484748)return e[1].toString()+"px";var t=e[1];return t[0]>=5745024?"calc("+Wh(t[1])+" - "+Wh(t[2])+")":"calc("+Wh(t[1])+" + "+Wh(t[2])+")"}var Vh={ch:function(e){return[22181,e]},em:function(e){return[22632,e]},ex:function(e){return[22643,e]},rem:function(e){return[5691738,e]},vh:function(e){return[26418,e]},vw:function(e){return[26433,e]},vmin:function(e){return[-833470756,e]},vmax:function(e){return[-833472530,e]},px:function(e){return[25096,e]},pxFloat:function(e){return[-1040484748,e]},cm:function(e){return[22186,e]},mm:function(e){return[24416,e]},inch:function(e){return[-977586742,e]},pc:function(e){return[25075,e]},pt:function(e){return[25092,e]},zero:-789508312,toString:Wh};function Yh(e){var n=e[0];return n>=4995526?n>=5690837?e[1].toString()+"rad":e[1].toString()+"deg":n>=-855250051?e[1].toString()+"turn":e[1].toString()+"grad"}var Zh={deg:function(e){return[4995526,e]},rad:function(e){return[5690837,e]},grad:function(e){return[-999567410,e]},turn:function(e){return[-855250051,e]},toString:Yh};var Xh={ltr:5396714,rtl:5695082,toString:function(e){return e>=5695082?"rtl":"ltr"}};var Kh={absolute:-1013592457,relative:903134412,$$static:100392110,fixed:10615156,sticky:188263721,toString:function(e){return 10615156!==e?e>=188263721?e>=903134412?"relative":"sticky":e>=100392110?"static":"absolute":"fixed"}};var Jh={none:-922086728,both:-1055160191,horizontal:365165796,vertical:-367674250,block:888960333,inline:423610969,toString:function(e){return e>=-367674250?e>=423610969?e>=888960333?"block":"inline":e>=365165796?"horizontal":"vertical":e>=-922086728?"none":"both"}};var Qh={normal:812216871,smallCaps:-386684792,toString:function(e){return e>=812216871?"normal":"smallCaps"}};var eg={normal:812216871,italic:107228912,oblique:734792881,toString:function(e){return 734792881!==e?e>=812216871?"normal":"italic":"oblique"}};var ng={auto:-1065951377,toString:function(e){return"auto"}};var tg={thin:-855898535,extraLight:-21160922,light:-184774442,medium:-20425611,semiBold:-812709613,bold:-1055161979,extraBold:-81801163,lighter:434326211,bolder:-534575822,toString:function(e){return"number"==typeof e?e>=-81801163?e>=-20425611?e>=812216871?e>=888264127?"900":"400":e>=434326211?"lighter":"500":e>=-21160922?"200":"800":-855898535!==e?e>=-534575822?e>=-184774442?"300":"bolder":e>=-812709613?"600":"700":"100":e[1].toString()}};var rg={auto:-1065951377,$$default:465819841,none:-922086728,contextMenu:626862894,help:-989121855,pointer:-786317123,progress:103479213,wait:-822977931,cell:-1044569694,crosshair:180897442,text:-856044371,verticalText:381626435,alias:563171728,copy:-1044071499,move:-933174511,noDrop:302348560,notAllowed:939907157,grab:-999567412,grabbing:-19620980,allScroll:365450254,colResize:676920916,rowResize:-840286290,nResize:457757954,eResize:621258809,sResize:-348903737,wResize:294257099,neResize:951366027,nwResize:624364317,seResize:-693048282,swResize:-1020049992,ewResize:577832966,nsResize:-18796519,neswResize:477181167,nwseResize:82328943,zoomIn:-88732200,zoomOut:-459627717,toString:function(e){return e>=82328943?e>=477181167?e>=624364317?626862894!==e?e>=939907157?e>=951366027?"ne-resize":"not-allowed":e>=676920916?"col-resize":"nw-resize":"context-menu":e>=577832966?e>=621258809?"e-resize":"ew-resize":e>=563171728?"alias":"nesw-resize":e>=302348560?365450254!==e?e>=457757954?e>=465819841?"default":"n-resize":e>=381626435?"vertical-text":"no-drop":"all-scroll":e>=180897442?e>=294257099?"w-resize":"crosshair":e>=103479213?"progress":"nwse-resize":e>=-840286290?e>=-459627717?-348903737!==e?e>=-19620980?e>=-18796519?"ns-resize":"grabbing":e>=-88732200?"zoom-in":"zoom-out":"s-resize":e>=-786317123?e>=-693048282?"se-resize":"pointer":e>=-822977931?"wait":"row-resize":e>=-999567412?-989121855!==e?e>=-922086728?e>=-856044371?"text":"none":e>=-933174511?"move":"grab":"help":e>=-1044071499?e>=-1020049992?"sw-resize":"copy":e>=-1044569694?"cell":"auto"}};function ig(e){return e[1].toString()+"%"}function ag(e){if("number"==typeof e)return e>=582626130?"transparent":"currentColor";var n=e[0];if(-878128972!==n){if(n>=5197569){if(n>=5692173){var t=e[1];return"rgb("+t[0].toString()+", "+t[1].toString()+", "+t[2].toString()+")"}var r=e[1];return"hsl("+Yh(r[0])+", "+ig(r[1])+", "+ig(r[2])+")"}if(n>=5194459)return"#"+e[1];var i=e[1];return"hsla("+Yh(i[0])+", "+ig(i[1])+", "+ig(i[2])+", "+function(e){return e[0]>=5496390?e[1].toString():e[1].toString()+"%"}(i[3])+")"}var a=e[1];return"rgba("+a[0].toString()+", "+a[1].toString()+", "+a[2].toString()+", "+a[3].toString()+")"}var og={toString:function(e){return e>=472095738?568403505!==e?e>=852175633?e>=1042283741?"inset":"double":e>=841979626?"dotted":"groove":"dashed":-862584982!==e?e>=12956715?e>=209930196?"outset":"solid":e>=-379468757?"ridge":"none":"hidden"}};var sg={toString:function(e){return 423610969!==e?e>=888960333?"block":"run-in":"inline"}};var cg={toString:function(e){return-999565626!==e?e>=182695950?"table":"flex":"grid"}};var ug={toString:function(e){return"list-item"}};var lg={toString:function(e){return e>=606419204?e>=850209563?e>=1054826616?"table-caption":"table-column-group":e>=793912528?"table-cell":"table-header-group":e>=-836725517?e>=97122692?"table-column":"table-row-group":e>=-843129172?"table-row":"table-footer-group"}};var pg={toString:function(e){return e>=790889754?"contents":"none"}};var fg={toString:function(e){return e>=53323314?e>=64712127?"inline-grid":"inline-flex":e>=-147785676?"inline-block":"inline-table"}};var dg={toString:function(e){return e>=67859554?98248149!==e?e>=924268066?e>=1040645430?"self-start":"flex-end":e>=662439529?"flex-start":"start":"center":e>=-379319332?e>=51834799?"self-end":"right":e>=-944764921?"left":"end"}};var mg={toString:function(e){return"baseline"}};var hg={toString:function(e){return"normal"}};var gg={toString:function(e){return e>=-162316795?e>=516682146?"space-between":"stretch":e>=-485895757?"space-around":"space-evenly"}};var vg={toString:function(e){return e>=812216871?"normal":"stretch"}};var xg={toString:function(e){return-463121288!==e?e>=867913355?"nowrap":"wrap":"wrap-reverse"}};var bg={toString:function(e){return e>=135477484?e>=378951208?"row-reverse":"column-reverse":e>=5693978?"row":"column"}};var yg={toString:function(e){return-922086728!==e?e>=4847905?e>=427065300?"contain":"all":e>=-856044371?"text":"auto":"none"}};var wg={areas:function(e){return[629510214,e]},toString:function(e){return"number"==typeof e?"none":cm(Pr((function(e,n){return e+"'"+n+"' "}),"",e[1]))}};var kg={auto:-1065951377,ident:function(e){return[930693872,e]},num:function(e){return[5496390,e]},numIdent:function(e,n){return[-192325942,[e,n]]},span:function(e){return[-866592054,e]},toString:function(e){if("number"==typeof e)return"auto";var n=e[0];if(n>=5496390)return n>=930693872?e[1]:String(e[1]);if(n>=-192325942){var t=e[1];return String(t[0])+" "+t[1]}var r=e[1];return"span "+(r[0]>=930693872?r[1]:String(r[1]))}};var _g={toString:function(e){return e>=-195805336?"fit-content":"auto"}};var Sg={toString:function(e){return"none"}};var Eg={toString:function(e){return"auto"}};function Ag(e){for(var n=zn(e,(function(e){return ag(e[1])+" "+Wh(e[0])})),t="";;){var r=t,i=n;if(!i)return r;var a=i[1],o=i[0];if(!a)return r+o;t=r+(o+", "),n=a}}var $g={marginBox:-298658179,borderBox:9307263,paddingBox:972575930,contentBox:-1008848302,fillBox:65166152,strokeBox:-229710541,viewBox:481366182,toString:function(e){return e>=9307263?e>=481366182?e>=972575930?"padding-box":"view-box":e>=65166152?"fill-box":"border-box":-298658179!==e?e>=-229710541?"stroke-box":"content-box":"margin-box"}};var Cg={linear:-325037595,ease:-1022587922,easeIn:138027891,easeOut:715748672,easeInOut:-960651557,stepStart:-193525386,stepEnd:20933615,steps:function(e,n){return[68058023,[e,n]]},cubicBezier:function(e,n,t,r){return[-554785527,[e,n,t,r]]},toString:function(e){if("number"==typeof e)return e>=-193525386?e>=138027891?e>=715748672?"ease-out":"ease-in":e>=20933615?"step-end":"step-start":-960651557!==e?e>=-325037595?"linear":"ease":"ease-in-out";if(e[0]>=68058023){var n=e[1],t=n[0];return n[1]>=67859554?"steps("+t.toString()+", start)":"steps("+t.toString()+", end)"}var r=e[1];return"cubic-bezier("+r[0].toString()+", "+r[1].toString()+", "+r[2].toString()+", "+r[3].toString()+")"}},Og={translate:function(e,n){return[-914368690,[e,n]]},translate3d:function(e,n,t){return[178189215,[e,n,t]]},translateX:function(e){return[106728778,e]},translateY:function(e){return[106728779,e]},translateZ:function(e){return[106728780,e]},scale:function(e,n){return[-120664438,[e,n]]},scale3d:function(e,n,t){return[-452513317,[e,n,t]]},scaleX:function(e){return[1009117838,e]},scaleY:function(e){return[1009117839,e]},scaleZ:function(e){return[1009117840,e]},rotate:function(e){return[-887077285,e]},rotate3d:function(e,n,t,r){return[142802924,[e,n,t,r]]},rotateX:function(e){return[-249738851,e]},rotateY:function(e){return[-249738850,e]},rotateZ:function(e){return[-249738849,e]},skew:function(e,n){return[-866839798,[e,n]]},skewX:function(e){return[-31746546,e]},skewY:function(e){return[-31746545,e]},toString:function(e){var n=e[0];if(n>=-120664438){if(!(n>=106728778)){if(-31746546===n)return"skewX("+Yh(e[1])+")";if(n>=-31746545)return"skewY("+Yh(e[1])+")";var t=e[1],r=t[0],i=t[1];return"scale("+r.toString()+", "+i.toString()+")"}if(n>=178189215){if(!(n>=1009117838)){var a=e[1],o=a[0],s=a[1],c=a[2];return"translate3d("+Wh(o)+", "+Wh(s)+", "+Wh(c)+")"}switch(n-1009117838|0){case 0:return"scaleX("+e[1].toString()+")";case 1:return"scaleY("+e[1].toString()+")";case 2:return"scaleZ("+e[1].toString()+")"}}else{if(n>=142802924){var u=e[1];return"rotate3d("+u[0].toString()+", "+u[1].toString()+", "+u[2].toString()+", "+Yh(u[3])+")"}switch(n-106728778|0){case 0:return"translateX("+Wh(e[1])+")";case 1:return"translateY("+Wh(e[1])+")";case 2:return"translateZ("+Wh(e[1])+")"}}}else{if(!(n>=-887077285)){if(n<-914368690)return"perspective("+e[1].toString()+")";var l=e[1];return"translate("+Wh(l[0])+", "+Wh(l[1])+")"}if(!(n>=-452513317)){if(n<-866839798)return"rotate("+Yh(e[1])+")";var p=e[1];return"skew("+Yh(p[0])+", "+Yh(p[1])+")"}if(!(n>=-249738851)){var f=e[1];return"scale3d("+f[0].toString()+", "+f[1].toString()+", "+f[2].toString()+")"}switch(n+249738851|0){case 0:return"rotateX("+Yh(e[1])+")";case 1:return"rotateY("+Yh(e[1])+")";case 2:return"rotateZ("+Yh(e[1])+")"}}}},Mg={rgb:function(e,n,t){return[5692173,[e,n,t]]},rgba:function(e,n,t,r){return[-878128972,[e,n,t,r]]},hsl:function(e,n,t){return[5197569,[e,[-119887163,n],[-119887163,t]]]},hsla:function(e,n,t,r){return[-988425664,[e,[-119887163,n],[-119887163,t],r]]},hex:function(e){return[5194459,e]},transparent:582626130,currentColor:292050538,toString:ag},jg={linearGradient:function(e,n){return[616379637,[e,n]]},radialGradient:function(e){return[119548911,e]},repeatingLinearGradient:function(e,n){return[-160280644,[e,n]]},repeatingRadialGradient:function(e){return[-657111370,e]},toString:function(e){var n=e[0];if(n>=119548911){if(n<616379637)return"radial-gradient("+Ag(e[1])+")";var t=e[1];return"linear-gradient("+Yh(t[0])+", "+Ag(t[1])+")"}if(n<-160280644)return"repeating-radial-gradient("+Ag(e[1])+")";var r=e[1];return"repeating-linear-gradient("+Yh(r[0])+", "+Ag(r[1])+")"}},Fg={toString:function(e){return"number"==typeof e?e>=-504775901?-270962810!==e?e>=-46800986?e>=563809289?"fangsong":"fantasy":e>=-97640579?"serif":"system-ui":"emoji":e>=-718373334?e>=-555363901?"monospace":"sans-serif":e>=-862985531?"cursive":"math":e[1]}},Rg=(Mg.hex("F0F8FF"),Mg.hex("FAEBD7"),Mg.hex("00FFFF"),Mg.hex("7FFFD4"),Mg.hex("F0FFFF"),Mg.hex("F5F5DC"),Mg.hex("FFE4C4"),Mg.hex("000000")),Tg=(Mg.hex("FFEBCD"),Mg.hex("0000FF"),Mg.hex("8A2BE2"),Mg.hex("A52A2A"),Mg.hex("DEB887"),Mg.hex("5F9EA0"),Mg.hex("7FFF00"),Mg.hex("D2691E"),Mg.hex("FF7F50"),Mg.hex("6495ED"),Mg.hex("FFF8DC"),Mg.hex("DC143C"),Mg.hex("00FFFF"),Mg.hex("00008B"),Mg.hex("008B8B"),Mg.hex("B8860B"),Mg.hex("A9A9A9"),Mg.hex("006400"),Mg.hex("A9A9A9"),Mg.hex("BDB76B"),Mg.hex("8B008B"),Mg.hex("556B2F"),Mg.hex("FF8C00"),Mg.hex("9932CC"),Mg.hex("8B0000"),Mg.hex("E9967A"),Mg.hex("8FBC8F"),Mg.hex("483D8B"),Mg.hex("2F4F4F"),Mg.hex("2F4F4F"),Mg.hex("00CED1"),Mg.hex("9400D3"),Mg.hex("FF1493"),Mg.hex("00BFFF"),Mg.hex("696969"),Mg.hex("696969"),Mg.hex("1E90FF"),Mg.hex("B22222"),Mg.hex("FFFAF0"),Mg.hex("228B22"),Mg.hex("FF00FF"),Mg.hex("DCDCDC"),Mg.hex("F8F8FF"),Mg.hex("FFD700"),Mg.hex("DAA520"),Mg.hex("808080"),Mg.hex("008000"),Mg.hex("ADFF2F"),Mg.hex("808080"),Mg.hex("F0FFF0"),Mg.hex("FF69B4"),Mg.hex("CD5C5C"),Mg.hex("4B0082"),Mg.hex("FFFFF0"),Mg.hex("F0E68C"),Mg.hex("E6E6FA"),Mg.hex("FFF0F5"),Mg.hex("7CFC00"),Mg.hex("FFFACD"),Mg.hex("ADD8E6"),Mg.hex("F08080"),Mg.hex("E0FFFF"),Mg.hex("FAFAD2"),Mg.hex("D3D3D3"),Mg.hex("90EE90"),Mg.hex("D3D3D3"),Mg.hex("FFB6C1"),Mg.hex("FFA07A"),Mg.hex("20B2AA"),Mg.hex("87CEFA"),Mg.hex("778899"),Mg.hex("778899"),Mg.hex("B0C4DE"),Mg.hex("FFFFE0"),Mg.hex("00FF00"),Mg.hex("32CD32"),Mg.hex("FAF0E6"),Mg.hex("FF00FF"),Mg.hex("800000"),Mg.hex("66CDAA"),Mg.hex("0000CD"),Mg.hex("BA55D3"),Mg.hex("9370DB"),Mg.hex("3CB371"),Mg.hex("7B68EE"),Mg.hex("00FA9A"),Mg.hex("48D1CC"),Mg.hex("C71585"),Mg.hex("191970"),Mg.hex("F5FFFA"),Mg.hex("FFE4E1"),Mg.hex("FFE4B5"),Mg.hex("FFDEAD"),Mg.hex("000080"),Mg.hex("FDF5E6"),Mg.hex("808000"),Mg.hex("6B8E23"),Mg.hex("FFA500"),Mg.hex("FF4500"),Mg.hex("DA70D6"),Mg.hex("EEE8AA"),Mg.hex("98FB98"),Mg.hex("AFEEEE"),Mg.hex("DB7093"),Mg.hex("FFEFD5"),Mg.hex("FFDAB9"),Mg.hex("CD853F"),Mg.hex("FFC0CB"),Mg.hex("DDA0DD"),Mg.hex("B0E0E6"),Mg.hex("800080"),Mg.hex("663399"),Mg.hex("FF0000"),Mg.hex("BC8F8F"),Mg.hex("4169E1"),Mg.hex("8B4513"),Mg.hex("FA8072"),Mg.hex("F4A460"),Mg.hex("2E8B57"),Mg.hex("FFF5EE"),Mg.hex("A0522D"),Mg.hex("C0C0C0"),Mg.hex("87CEEB"),Mg.hex("6A5ACD"),Mg.hex("708090"),Mg.hex("708090"),Mg.hex("FFFAFA"),Mg.hex("00FF7F"),Mg.hex("4682B4"),Mg.hex("D2B48C"),Mg.hex("008080"),Mg.hex("D8BFD8"),Mg.hex("FF6347"),Mg.hex("40E0D0"),Mg.hex("EE82EE"),Mg.hex("F5DEB3"),Mg.hex("FFFFFF"));Mg.hex("F5F5F5"),Mg.hex("FFFF00"),Mg.hex("9ACD3"),Mg.transparent;function qg(e,n){switch(0|n.tag){case 0:var t=n[1],r=n[0];e[r]="content"===r&&""===t?'""':t;break;case 1:e[n[0]]=Lg(n[1]);break;case 2:e[":"+n[0]]=Lg(n[1]);break;case 3:e[":"+n[0]+"("+n[1]+")"]=Lg(n[2])}return e}function Lg(e){return Wn(e,{},qg)}function Ng(e,n){return e[n[0].toString()+"%"]=Lg(n[1]),e}function Pg(e){return"number"==typeof e&&e<-789508312?ng.toString(e):Vh.toString(e)}Hh.initial,Hh.inherit_,Hh.unset;var Dg=Gh.pct,Ig=(Vh.ch,Vh.cm,Vh.em,Vh.ex,Vh.mm,Vh.pt,Vh.px),zg=(Vh.pxFloat,Vh.rem),Bg=Vh.vh,Ug=(Vh.vmin,Vh.vmax,Vh.zero),Hg=(Zh.deg,Zh.rad,Zh.grad,Zh.turn,Xh.ltr,Xh.rtl,Kh.absolute,Kh.relative,Kh.$$static,Kh.sticky,Jh.horizontal,Jh.vertical,Qh.smallCaps,eg.italic),Gg=(eg.oblique,Mg.rgb);Mg.rgba,Mg.hsl,Mg.hsla,Mg.hex,Mg.currentColor,Mg.transparent,Cg.linear,Cg.ease,Cg.easeIn,Cg.easeInOut,Cg.easeOut,Cg.stepStart,Cg.stepEnd,Cg.steps,Cg.cubicBezier,$g.marginBox,$g.fillBox,$g.strokeBox,$g.viewBox,Og.translate,Og.translate3d,Og.translateX,Og.translateY,Og.translateZ,Og.scaleX,Og.scaleY,Og.scaleZ,Og.rotateX,Og.rotateY,Og.rotateZ,Og.scale,Og.scale3d,Og.skew,Og.skewX,Og.skewY,tg.thin,tg.extraLight,tg.light,tg.medium,tg.semiBold,tg.bold,tg.extraBold,tg.lighter,tg.bolder,jg.linearGradient,jg.repeatingLinearGradient,jg.radialGradient,jg.repeatingRadialGradient,wg.areas,kg.ident,kg.numIdent,rg.contextMenu,rg.help,rg.pointer,rg.progress,rg.wait,rg.cell,rg.crosshair,rg.verticalText,rg.alias,rg.copy,rg.move,rg.noDrop,rg.notAllowed,rg.grab,rg.grabbing,rg.allScroll,rg.colResize,rg.rowResize,rg.nResize,rg.eResize,rg.sResize,rg.wResize,rg.neResize,rg.nwResize,rg.seResize,rg.swResize,rg.ewResize,rg.nsResize,rg.neswResize,rg.nwseResize,rg.zoomIn,rg.zoomOut;function Wg(e){return-878767996!==e&&-601204732!==e&&653193961!==e?og.toString(e):Hh.toString(e)}function Vg(e){return{$$global:function(n,t){return e.injectRule(function(e){for(var n={},t=e;;){var r=t;if(!r)return n;var i=r[0];n[i[0]]=i[1],t=r[1]}}([[n,Lg(t)],0]))},insertRule:function(n){return e.injectRaw(n)},merge:function(n){return e.mergeStyles(Xn(n))},style:function(n){return e.make(Lg(n))},keyframes:function(n){return e.makeKeyFrames(Pr(Ng,{},n))}}}var Yg=Rg,Zg=Tg,Xg=Vg({mergeStyles:Uh.cx,injectRule:Uh.injectGlobal,injectRaw:Uh.injectGlobal,make:Uh.css,makeKeyFrames:Uh.keyframes});Xg.insertRule;var Kg=function(e){return e.tag?e:l(0,[e[0],e[1]+" !important"])},Jg=function(e,n){return l(0,[e,n])},Qg=function(e){return l(0,["alignItems",e>=287825029?e>=662439529?812216871!==e?dg.toString(e):vg.toString(e):e>=653193961?Hh.toString(e):mg.toString(e):e>=-379319332?-162316795!==e?dg.toString(e):vg.toString(e):e>=-878767996?Hh.toString(e):dg.toString(e)])},ev=function(e){return l(0,["backgroundColor",Mg.toString(e)])},nv=function(e,n,t){return l(0,["borderBottom",Vh.toString(e)+" "+Wg(n)+" "+Mg.toString(t)])},tv=function(e){return l(0,["color",Mg.toString(e)])},rv=function(e){return l(0,["display",e>=97122692?e<653193961?182695950!==e?423610969!==e?e>=632591505?ug.toString(e):lg.toString(e):sg.toString(e):cg.toString(e):e>=793912528?888960333!==e?lg.toString(e):sg.toString(e):e>=790889754?pg.toString(e):Hh.toString(e):e>=-854050059?-601204732!==e?e>=-245903344?e>=-147785676?fg.toString(e):sg.toString(e):e>=-843129172?lg.toString(e):fg.toString(e):Hh.toString(e):e>=-922086728?e>=-878767996?Hh.toString(e):pg.toString(e):e>=-1010954439?cg.toString(e):lg.toString(e)])},iv=function(e){return l(0,["flexDirection",e>=5693978?e>=653193961?Hh.toString(e):bg.toString(e):e>=-878767996?Hh.toString(e):bg.toString(e)])},av=function(e){return l(0,["flexGrow",e.toString()])},ov=function(e){return l(0,["flexWrap",e>=-463121288?653193961!==e?xg.toString(e):Hh.toString(e):-822134326!==e?Hh.toString(e):xg.toString(e)])},sv=function(e){return l(0,["fontFamily","number"!=typeof e||-878767996!==e&&-601204732!==e&&e<653193961?Fg.toString(e):Hh.toString(e)])},cv=function(e){return l(0,["fontSize","number"==typeof e&&-789508312!==e?Hh.toString(e):Vh.toString(e)])},uv=function(e){return l(0,["fontStyle",107228912!==e&&e<734792881?Hh.toString(e):eg.toString(e)])},lv=function(e){return l(0,["justifyContent",e>=-162316795?e>=516682146?e>=662439529?812216871!==e?dg.toString(e):hg.toString(e):e>=653193961?Hh.toString(e):gg.toString(e):e>=51834799?dg.toString(e):gg.toString(e):-1016061555!==e?e>=-485895757?e>=-379319332?dg.toString(e):gg.toString(e):e>=-878767996?Hh.toString(e):dg.toString(e):gg.toString(e)])},pv=function(e){return l(0,["margin",Pg(e)])},fv=function(e,n){return l(0,["margin",Pg(e)+" "+Pg(n)])},dv=function(e,n,t,r){return l(0,["margin",Pg(e)+" "+Pg(n)+" "+Pg(t)+" "+Pg(r)])},mv=function(e){return l(0,["marginLeft",Pg(e)])},hv=function(e){return l(0,["marginRight",Pg(e)])},gv=function(e){return l(0,["marginTop",Pg(e)])},vv=function(e){return l(0,["marginBottom",Pg(e)])},xv=function(e){return l(0,["maxWidth","number"==typeof e?-789508312!==e?e>=-922086727?Hh.toString(e):Sg.toString(e):Vh.toString(e):-119887163!==e[0]?Vh.toString(e):Gh.toString(e)])},bv=function(e){return l(0,["minHeight","number"==typeof e?-789508312!==e?e>=-1065951376?Hh.toString(e):Eg.toString(e):Vh.toString(e):-119887163!==e[0]?Vh.toString(e):Gh.toString(e)])},yv=function(e){return l(0,["padding",Vh.toString(e)])},wv=function(e){return l(0,["paddingBottom",Vh.toString(e)])},kv=function(e){return l(0,["userSelect",-878767996!==e&&-601204732!==e&&e<653193961?yg.toString(e):Hh.toString(e)])},_v=function(e){return l(0,["width","number"==typeof e?-789508312!==e?-195805336!==e&&e>=-1065951376?Hh.toString(e):_g.toString(e):Vh.toString(e):-119887163!==e[0]?Vh.toString(e):Gh.toString(e)])},Sv=function(e,n){return l(1,["@media "+e,n])},Ev=function(e){return l(2,["first-child",e])},Av=function(e){return l(2,["first-of-type",e])},$v=function(e){return l(2,["hover",e])},Cv=function(e){return l(2,["last-of-type",e])},Ov=Dg,Mv=Ig,jv=zg,Fv=Bg,Rv=Ug,Tv=Hg,qv=Gg,Lv=function(e){return l(0,["textDecoration",e>=-601204732?e>=412155569?e>=653193961?"unset":"line-through":e>=131142924?"underline":"inherit":-922086728!==e?e>=-878767996?"initial":"overline":"none"])},Nv=Yg,Pv=Zg,Dv=(Xg.$$global,Xg.merge),Iv=Xg.style,zv=(Xg.keyframes,t(0)),Bv=t.n(zv),Uv=t(74),Hv=t.n(Uv),Gv=t(17),Wv=t.n(Gv),Vv=t(24),Yv=t.n(Vv);function Zv(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=arguments.length>2?arguments[2]:void 0;return e.reduce((function(e,n){return Yv()({},e,t[n])}),n)}function Xv(e){return e.join(" ")}function Kv(e){var n=e.node,t=e.stylesheet,r=e.style,i=void 0===r?{}:r,a=e.useInlineStyles,o=e.key,s=n.properties,c=n.type,u=n.tagName,l=n.value;if("text"===c)return l;if(u){var p=function(e,n){var t=0;return function(r){return t+=1,r.map((function(r,i){return Kv({node:r,stylesheet:e,useInlineStyles:n,key:"code-segment-".concat(t,"-").concat(i)})}))}}(t,a),f=a&&s.className&&s.className.filter((function(e){return!t[e]})),d=f&&f.length?f:void 0,m=a?Yv()({},s,{className:d&&Xv(d)},{style:Zv(s.className,Object.assign({},s.style,i),t)}):Yv()({},s,{className:Xv(s.className)}),h=p(n.children);return Bv.a.createElement(u,Wv()({key:o},m),h)}}var Jv=/\n/g;function Qv(e){var n=e.codeString,t=e.codeStyle,r=e.containerProps,i=void 0===r?{}:r,a=e.numberProps,o=e.startingLineNumber;return i.style=i.style||{float:"left",paddingRight:"10px"},Bv.a.createElement("code",Wv()({},i,{style:Object.assign({},t,i.style)}),function(e){var n=e.lines,t=e.startingLineNumber,r=e.numberProps,i=void 0===r?{}:r;return n.map((function(e,n){var r=n+t,a="function"==typeof i?i(r):i;return Bv.a.createElement("span",Wv()({key:"line-".concat(n),className:"react-syntax-highlighter-line-number"},a),"".concat(r,"\n"))}))}({lines:n.replace(/\n$/,"").split("\n"),numberProps:a,startingLineNumber:o}))}function ex(e){var n=e.children,t=e.lineNumber,r=e.lineProps,i=e.className,a=void 0===i?[]:i,o=("function"==typeof r?r(t):r)||{};return o.className=o.className?a.concat(o.className):a,{type:"element",tagName:"span",properties:o,children:n}}function nx(e,n){for(var t=function e(n){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],i=0;i<n.length;i++){var a=n[i];if("text"===a.type)r.push(ex({children:[a],className:t}));else if(a.children){var o=t.concat(a.properties.className);r=r.concat(e(a.children,o))}}return r}(e.value),r=[],i=-1,a=0,o=function(){var e=t[a],o=e.children[0].value;if(o.match(Jv)){var s=o.split("\n");s.forEach((function(o,c){var u=r.length+1,l={type:"text",value:"".concat(o,"\n")};if(0===c){var p=t.slice(i+1,a).concat(ex({children:[l],className:e.properties.className}));r.push(ex({children:p,lineNumber:u,lineProps:n}))}else if(c===s.length-1){if(t[a+1]&&t[a+1].children&&t[a+1].children[0]){var f=ex({children:[{type:"text",value:"".concat(o)}],className:e.properties.className});t.splice(a+1,0,f)}else r.push(ex({children:[l],lineNumber:u,lineProps:n,className:e.properties.className}))}else r.push(ex({children:[l],lineNumber:u,lineProps:n,className:e.properties.className}))})),i=a}a++};a<t.length;)o();if(i!==t.length-1){var s=t.slice(i+1,t.length);s&&s.length&&r.push(ex({children:s,lineNumber:r.length+1,lineProps:n}))}return r}function tx(e){var n=e.rows,t=e.stylesheet,r=e.useInlineStyles;return n.map((function(e,n){return Kv({node:e,stylesheet:t,useInlineStyles:r,key:"code-segement".concat(n)})}))}var rx,ix,ax=t(39),ox=t.n(ax),sx=(rx=ox.a,ix={},function(e){var n=e.language,t=e.children,r=e.style,i=void 0===r?ix:r,a=e.customStyle,o=void 0===a?{}:a,s=e.codeTagProps,c=void 0===s?{style:i['code[class*="language-"]']}:s,u=e.useInlineStyles,l=void 0===u||u,p=e.showLineNumbers,f=void 0!==p&&p,d=e.startingLineNumber,m=void 0===d?1:d,h=e.lineNumberContainerProps,g=e.lineNumberProps,v=e.wrapLines,x=e.lineProps,b=void 0===x?{}:x,y=e.renderer,w=e.PreTag,k=void 0===w?"pre":w,_=e.CodeTag,S=void 0===_?"code":_,E=e.code,A=void 0===E?Array.isArray(t)?t[0]:t:E,$=e.astGenerator,C=Hv()(e,["language","children","style","customStyle","codeTagProps","useInlineStyles","showLineNumbers","startingLineNumber","lineNumberContainerProps","lineNumberProps","wrapLines","lineProps","renderer","PreTag","CodeTag","code","astGenerator"]);$=$||rx;var O=f?Bv.a.createElement(Qv,{containerProps:h,codeStyle:c.style||{},numberProps:g,startingLineNumber:m,codeString:A}):null,M=i.hljs||i['pre[class*="language-"]']||{backgroundColor:"#fff"},j=l?Object.assign({},C,{style:Object.assign({},M,o)}):Object.assign({},C,{className:"hljs"});if(!$)return Bv.a.createElement(k,j,O,Bv.a.createElement(S,c,A));v=!(!y||void 0!==v)||v,y=y||tx;var F=[{type:"text",value:A}],R=function(e){var n=e.astGenerator,t=e.language,r=e.code,i=e.defaultCodeValue;if(n.getLanguage){var a=t&&n.getLanguage(t);return"text"===t?{value:i,language:"text"}:a?n.highlight(t,r):n.highlightAuto(r)}try{return t&&"text"!==t?{value:n.highlight(r,t)}:{value:i}}catch(e){return{value:i}}}({astGenerator:$,language:n,code:A,defaultCodeValue:F});null===R.language&&(R.value=F);var T=v?nx(R,b):R.value;return Bv.a.createElement(k,j,O,Bv.a.createElement(S,c,y({rows:T,stylesheet:i,useInlineStyles:l})))});sx.registerLanguage=function(e,n){return ox.a.register(n)};var cx=sx,ux=t(79),lx=t.n(ux).a,px=t(75),fx=t.n(px).a,dx=t(76),mx=t.n(dx).a,hx={'code[class*="language-"]':{color:"#ccc",background:"none",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none"},'pre[class*="language-"]':{color:"#ccc",background:"#2d2d2d",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none",padding:"1em",margin:".5em 0",overflow:"auto"},':not(pre) > code[class*="language-"]':{background:"#2d2d2d",padding:".1em",borderRadius:".3em",whiteSpace:"normal"},comment:{color:"#999"},"block-comment":{color:"#999"},prolog:{color:"#999"},doctype:{color:"#999"},cdata:{color:"#999"},punctuation:{color:"#ccc"},tag:{color:"#e2777a"},"attr-name":{color:"#e2777a"},namespace:{color:"#e2777a"},deleted:{color:"#e2777a"},"function-name":{color:"#6196cc"},boolean:{color:"#f08d49"},number:{color:"#f08d49"},function:{color:"#f08d49"},property:{color:"#f8c555"},"class-name":{color:"#f8c555"},constant:{color:"#f8c555"},symbol:{color:"#f8c555"},selector:{color:"#cc99cd"},important:{color:"#cc99cd",fontWeight:"bold"},atrule:{color:"#cc99cd"},keyword:{color:"#cc99cd"},builtin:{color:"#cc99cd"},string:{color:"#7ec699"},char:{color:"#7ec699"},"attr-value":{color:"#7ec699"},regex:{color:"#7ec699"},variable:{color:"#7ec699"},operator:{color:"#67cdcc"},entity:{color:"#67cdcc",cursor:"help"},url:{color:"#67cdcc"},bold:{fontWeight:"bold"},italic:{fontStyle:"italic"},inserted:{color:"green"}},gx=t(77),vx=t.n(gx).a,xx=t(78),bx=t.n(xx).a,yx=t(37),wx=t.n(yx).a,kx=t(38),_x=t.n(kx).a;var Sx=_(Iv,[cv(jv(.8)),[Kg(vv(jv(1))),0]]);var Ex=function(e){var n=e.language,t=e.text;return zv.createElement(cx,{className:Sx,language:n,style:hx,children:t})},Ax=jv(48);function $x(e){return Sv("(min-width: 37.5rem)",e)}var Cx=qv(173,175,174),Ox=qv(222,226,230),Mx=_(Iv,[sv(-97640579),[Jg("fontVariant","small-caps"),0]]),jx=_(Iv,[rv(-1010954439),[_v(Ov(100)),[Sv("(min-width: 37.5rem)",[xv(Ax),0]),0]]]),Fx=_(Iv,[nv(Mv(1),12956715,qv(40,40,40)),0]);function Rx(e){return _(Dv,Vm(Tn,e))}var Tx=Nv,qx=Pv,Lx=function(e){cx.registerLanguage("bash",fx),cx.registerLanguage("javascript",wx),cx.registerLanguage("json",mx),cx.registerLanguage("python",vx),cx.registerLanguage("reason",bx),cx.registerLanguage("typescript",_x),cx.registerLanguage("tsx",lx)},Nx=[Lv(-922086728),[tv(qx),0]],Px=_(Iv,[tv(Ox),[$v(Nx),0]]),Dx=_(Iv,Nx);var Ix=function(e){var n=e.url,t=e.active,r=e.className,i=e.children,a=Rx([Px,[r,[void 0!==t&&t?Dx:void 0,0]]]);return zv.createElement("a",{className:a,href:n},i)};var zx=function(e){var n=e.route,t=e.activeRoute,r=e.className,i=e.children,a={url:function(e){if("number"==typeof e)return"/about/";switch(0|e.tag){case 0:var n=e[0];return 1!==n?"/"+String(n)+"/":"/";case 1:var t=e[1],r=e[0];return 1!==t?"/tag/"+String(r)+"/"+String(t)+"/":"/tag/"+String(r)+"/";case 2:var i=bm(2,"0",mp(e[1])),a=bm(2,"0",mp(e[2]));return"/"+String(e[0])+"/"+String(i)+"/"+String(a)+"/"+String(e[3])+"/";case 3:return"/uploads/"+String(e[0])}}(n),active:Qe(n,t),children:i};return void 0!==r&&(a.className=q(r)),zv.createElement(Ix,a)},Bx=_(Iv,[hv(-1065951377),[cv(jv(1.125)),[tv(qx),0]]]);function Ux(e){var n=e.children;return zv.createElement(zx,{route:l(0,[1]),className:Bx,children:n})}var Hx=_(Dv,[jx,[_(Iv,[Qg(98248149),0]),0]]);function Gx(e){var n=e.children;return zv.createElement("div",{className:Hx},n)}var Wx=_(Dv,[Mx,[Fx,[_(Iv,[rv(-1010954439),[lv(98248149),[vv(jv(1.5)),[yv(jv(.5)),0]]]]),0]]]);var Vx=function(e){var n=e.siteName,t=e.activeRoute,r={route:0,children:"About"};return void 0!==t&&(r.activeRoute=q(t)),zv.createElement("nav",{className:Wx},zv.createElement(Gx,{children:null},zv.createElement(Ux,{children:n}),zv.createElement(zx,r)))},Yx=_(Iv,[rv(-1010954439),[av(1),[lv(98248149),[fv(Rv,jv(.5)),[$x([pv(Rv),0]),0]]]]]);function Zx(e){var n=e.children;return zv.createElement("div",{className:Yx},n)}var Xx=_(Dv,[jx,[_(Iv,[iv(-963948842),0]),0]]);function Kx(e){var n=e.children;return zv.createElement("main",{className:Xx},n)}var Jx=function(e){var n=e.children;return zv.createElement(Zx,{children:zv.createElement(Kx,{children:n})})},Qx=t(80),eb=[];function nb(e){if(null!==e&&e[0]===eb){var n=e[1];return 0===n?void 0:[eb,n-1|0]}return e}function tb(e){if(void 0!==e)return nb(e)}var rb=R(/:/);function ib(e){return n=rb,t=!0,Qx(e,{replacement:tb("-"),remove:tb(n),lower:tb(t)});var n,t}function ab(e,n,t,r){return function(e,n,t){var r=n-e|0;if(r<0||t<=0)return[];for(var i=1+(r/t|0)|0,a=new Array(i),o=e,s=0;s<i;++s)a[s]=o,o=o+t|0;return a}(e,n,void 0!==t?t:1)}var ob=Hm;function sb(e){switch(0|e.tag){case 0:return l(0,[e[0].page]);case 1:var n=e[0];return l(1,[ib(n.tag),n.page]);case 2:return 0;case 3:var t=e[0],r=t.date;return l(2,[r.getFullYear(),c(r),r.getDate(),ib(t.title)])}}var cb=function(e){var n=e.level,t=e.className,r=e.children,i=void 0!==n?n:1,a=Rx([Mx,[t,0]]),o="h"+String(i>6?6:i);return zv.createElement(o,{className:a},r)},ub=_(Iv,[ev(Nv),[tv(Nv),[$v([tv(Pv),0]),0]]]);var lb=function(e){var n=e.children;return zv.createElement("span",{className:ub},n)},pb=t(81);function fb(e){var n=e.tag,t=e.children;return"spoiler"===n?zv.createElement(lb,{children:t}):zv.createElement(n,void 0,t)}var db=_(Dv,[Fx,[_(Iv,[dv(jv(1.5),Rv,jv(.6),Rv),[cv(jv(1.5)),[Ev([gv(Rv),0]),0]]]),0]]),mb=_(Iv,[dv(jv(1.25),Rv,jv(.5),Rv),[cv(jv(1.25)),0]]);function hb(e){var n=e.level,t=e.children,r=2!==n?3!==n?void 0:mb:db,i={level:n,children:t};return void 0!==r&&(i.className=q(r)),zv.createElement(cb,i)}var gb=_(Iv,[cv(jv(1.1)),0]);function vb(e){var n=e.children;return zv.createElement("code",{className:gb},n)}var xb=function(e){var n=e.renderParagraph,t=e.text,r={virtualHtml:fb,code:function(e){return zv.createElement(Ex,{language:e.language,text:e.value})},heading:hb,paragraph:Eh((function(e){return zv.createElement("p",void 0,e.children)}),n),inlineCode:vb,link:function(e){return zv.createElement(Ix,{url:e.href,children:e.children})}};return zv.createElement(pb,{source:t,escapeHtml:!1,renderers:r})};var bb=function(e){var n=e.data;return zv.createElement(xb,{text:n.text})},yb=_(Iv,[cv(jv(.875)),[kv(-922086728),0]]);var wb=function(e){var n=e.direction,t=e.double,r=void 0!==t&&t,i=n?r?"▶▶":"▶":r?"◀◀":"◀";return zv.createElement("span",{className:yb},i)},kb=t(82),_b=_(Iv,[uv(Tv),0]);var Sb=function(e){var n=e.className,t=e.date,r=t.toISOString(),i=kb("%d/%m/%Y %H:%M",t),a=Rx([_b,[n,0]]);return zv.createElement("time",{className:a,dateTime:r},i)},Eb=_(Dv,[Fx,[_(Iv,[vv(jv(1.6)),[wv(jv(.3)),0]]),0]]);function Ab(e){var n=e.children;return zv.createElement("header",{className:Eb},n)}var $b=_(Iv,[cv(jv(1.75)),[vv(jv(1)),0]]);function Cb(e){var n=e.children;return zv.createElement(cb,{className:$b,children:n})}var Ob=_(Iv,[rv(-147785676),[uv(Tv),[fv(Rv,jv(.3)),[Av([mv(Rv),0]),0]]]]);function Mb(e){var n=e.tag,t=l(1,[ib(n),1]);return zv.createElement("li",{className:Ob},zv.createElement(zx,{route:t,children:n}))}var jb=_(Iv,[rv(-1010954439),[ov(-822134326),[pv(Rv),[yv(Rv),0]]]]);function Fb(e){var n=e.tags,t=Dm((function(e){return zv.createElement(Mb,{tag:e,key:e})}))(n);return zv.createElement("ul",{className:jb},ob(t))}var Rb=_(Iv,[rv(888960333),[vv(jv(.3)),0]]);function Tb(e){var n=e.date;return zv.createElement(Sb,{className:Rb,date:n})}var qb=_(Iv,[fv(Rv,jv(.5)),0]);function Lb(e){var n=e.title,t=e.date,r=l(2,[t.getFullYear(),c(t),t.getDate(),ib(n)]);return zv.createElement(zx,{route:r,className:qb,children:n})}var Nb=_(Iv,[rv(-1010954439),[Qg(98248149),[fv(jv(1),Rv),[$x([pv(Rv),0]),0]]]]);function Pb(e){var n=e.children;return zv.createElement("div",{className:Nb},n)}var Db=_(Dv,[Mx,[_(Iv,[rv(-1010954439),[iv(135477484),[lv(516682146),[Qg(98248149),[fv(jv(1),Rv),[cv(jv(1.1)),[$x([iv(5693978),[dv(jv(2),Rv,jv(3),Rv),0]]),0]]]]]]]),0]]);function Ib(e){var n=e.previous,t=e.next,r=Eh(zv.createElement("div",void 0),_h((function(e){return zv.createElement(Pb,{children:null},zv.createElement(wb,{direction:0}),zv.createElement(Lb,{title:e.title,date:e.date}))}),n)),i=Eh(zv.createElement("div",void 0),_h((function(e){return zv.createElement(Pb,{children:null},zv.createElement(Lb,{title:e.title,date:e.date}),zv.createElement(wb,{direction:1}))}),t));return zv.createElement("footer",{className:Db},r,i)}var zb=_(Iv,[Cv([vv(Rv),0]),0]);function Bb(e){var n=e.children;return zv.createElement("p",{className:zb},n)}var Ub=_(Dv,[Fx,[_(Iv,[wv(jv(2)),0]),0]]);function Hb(e){var n=e.text;return zv.createElement("section",{className:Ub},zv.createElement(xb,{renderParagraph:Bb,text:n}))}var Gb=function(e){var n=e.data;return zv.createElement("article",void 0,zv.createElement(Ab,{children:null},zv.createElement(Cb,{children:n.title}),zv.createElement(Tb,{date:n.date}),zv.createElement(Fb,{tags:n.tags})),zv.createElement(Hb,{text:n.text}),zv.createElement(Ib,{previous:n.previous,next:n.next}))},Wb=_(Iv,[cv(jv(1.5)),[vv(Rv),0]]);function Vb(e){var n=e.children;return zv.createElement(cb,{className:Wb,children:n})}var Yb=_(Dv,[Fx,[_(Iv,[wv(jv(1.6)),[fv(jv(.5),Rv),[$x([fv(jv(.8),Rv),0]),[Av([gv(Rv),0]),[Cv([vv(Rv),0]),0]]]]]),0]]);function Zb(e){var n=e.children;return zv.createElement("article",{className:Yb},n)}var Xb=_(Iv,[vv(jv(1)),0]);function Kb(e){var n=e.children;return zv.createElement("header",{className:Xb},n)}var Jb=_(Iv,[rv(-1010954439),[fv(-1065951377,jv(.375)),[$x([fv(-1065951377,jv(.5)),0]),0]]]);function Qb(e){var n=e.children;return zv.createElement("span",{className:Jb},n)}function ey(e){var n=e.buildPageRoute,t=e.activeRoute,r=e.page,i=e.children,a={route:_(n,r),className:Jb,children:i};return void 0!==t&&(a.activeRoute=q(t)),zv.createElement(zx,a)}function ny(e){var n=e.buildPageRoute,t=e.activeRoute,r=e.page,i=zv.createElement(wb,{direction:0,double:!0}),a=zv.createElement(wb,{direction:0});return 1===r?zv.createElement(zv.Fragment,void 0,zv.createElement(Qb,{children:i}),zv.createElement(Qb,{children:a})):zv.createElement(zv.Fragment,void 0,zv.createElement(ey,{buildPageRoute:n,activeRoute:t,page:1,children:i}),zv.createElement(ey,{buildPageRoute:n,activeRoute:t,page:r-1|0,children:a}))}function ty(e){var n=e.buildPageRoute,t=e.activeRoute,r=e.totalPages,i=e.page,a=zv.createElement(wb,{direction:1}),o=zv.createElement(wb,{direction:1,double:!0});return i===r?zv.createElement(zv.Fragment,void 0,zv.createElement(Qb,{children:a}),zv.createElement(Qb,{children:o})):zv.createElement(zv.Fragment,void 0,zv.createElement(ey,{buildPageRoute:n,activeRoute:t,page:i+1|0,children:a}),zv.createElement(ey,{buildPageRoute:n,activeRoute:t,page:r,children:o}))}function ry(e){var n=e.buildPageRoute,t=e.activeRoute,r=e.totalPages,i=e.page,a=i-2|0,o=i+2|0;if(a<1&&o>r)a=1,o=r;else{var s=0;a<1&&(a=a+(s=1-a|0)|0,o=o+s|0),o>r&&(o=o-(s=o-r|0)|0,a=(a=a-s|0)<1?1:a)}return ab(a,o,void 0).map((function(e){return e===i?zv.createElement(Qb,{children:e}):zv.createElement(ey,{buildPageRoute:n,activeRoute:t,page:e,children:e})}))}var iy=_(Dv,[Mx,[_(Iv,[rv(-1010954439),[cv(jv(1.125)),[fv(jv(2.4),-1065951377),0]]]),0]]);function ay(e){var n=e.buildPageRoute,t=e.activeRoute,r=e.total,i=e.page,a=B(r/10);return zv.createElement("div",{className:iy},zv.createElement(ny,{buildPageRoute:n,activeRoute:t,page:i}),zv.createElement(ry,{buildPageRoute:n,activeRoute:t,totalPages:a,page:i}),zv.createElement(ty,{buildPageRoute:n,activeRoute:t,totalPages:a,page:i}))}var oy=_(Iv,[vv(Rv),0]);function sy(e){var n=e.children;return zv.createElement("p",{className:oy},n)}var cy=function(e){var n=e.buildPageRoute,t=e.activeRoute,r=e.page,i=e.total,a=e.entries;return ob(Gm(zv.createElement(ay,{buildPageRoute:n,activeRoute:t,total:i,page:r}),Dm((function(e){var n=e.text,t=e.date,r=e.title,i=l(2,[t.getFullYear(),c(t),t.getDate(),ib(r)]),a=Eh(n,E(Sh,(function(e){return null==e?void 0:R(e)}),E(Sh,(function(e){return mh(1,e)}),_h((function(e){return e}),T(/^(.+?)\n\n/.exec(n))))));return zv.createElement(Zb,{children:null,key:t.toISOString()+r},zv.createElement(Kb,{children:null},zv.createElement(Vb,{children:zv.createElement(zx,{route:i,children:r})}),zv.createElement(Sb,{date:t})),zv.createElement("section",void 0,zv.createElement(xb,{renderParagraph:sy,text:a})))}))(a)))};function uy(e){return l(0,[e])}var ly=function(e){var n=e.activeRoute,t=e.data;return zv.createElement(cy,{buildPageRoute:uy,activeRoute:n,page:t.page,total:t.total,entries:t.entries})};var py=function(e){return zv.createElement("div",void 0,"not found")},fy=_(Dv,[Mx,[_(Iv,[cv(jv(1.25)),[vv(jv(1.6)),0]]),0]]);function dy(e){var n=e.children;return zv.createElement("div",{className:fy},n)}var my=function(e){var n=e.activeRoute,t=e.data,r=t.total,i=t.tag,a=1===r?"entry":"entries";return zv.createElement(zv.Fragment,void 0,zv.createElement(dy,{children:String(r)+" "+String(a)+' tagged "'+String(i)+'"'}),zv.createElement(cy,{buildPageRoute:function(e){return l(1,[ib(i),e])},activeRoute:n,page:t.page,total:r,entries:t.entries}))},hy=_(Iv,[rv(-1010954439),[iv(-963948842),[bv(Fv(100)),[ev(Tx),[tv(Cx),[cv(jv(.875)),0]]]]]]);function gy(e){var n=e.children;return zv.createElement("div",{className:hy},n)}var vy=function(e){var n,t=e.siteName,r=e.pageData,i=_h(sb,r);if(void 0!==r)switch(0|r.tag){case 0:n=zv.createElement(ly,{activeRoute:i,data:r[0]});break;case 1:n=zv.createElement(my,{activeRoute:i,data:r[0]});break;case 2:n=zv.createElement(bb,{data:r[0]});break;case 3:n=zv.createElement(Gb,{data:r[0]})}else n=zv.createElement(py,{});return zv.createElement(gy,{children:null},zv.createElement(Vx,{siteName:t,activeRoute:i}),zv.createElement(Jx,{children:n}))},xy=t(83);var by=function(e){var n=e.title,t=e.css,r=e.favicon,i=e.children;return zv.createElement("html",{lang:"en"},zv.createElement("head",void 0,zv.createElement("meta",{charSet:"utf-8"}),zv.createElement("meta",{content:"width=device-width, initial-scale=1, shrink-to-fit=no",name:"viewport"}),zv.createElement("link",{href:r.uri,rel:"icon",type:r.mimeType}),zv.createElement("title",void 0,n),zv.createElement("style",void 0,xy+t)),zv.createElement("body",{dangerouslySetInnerHTML:{__html:i}}))},yy=t(84),wy=t(40);var ky=l(0,[void 0,404]);function _y(e){return s(e.getFullYear(),c(e),e.getDate(),void 0,void 0).getTime()}var Sy=t(85);function Ey(e){return E(Ed,Mh,(n=function(n){return new Promise((function(n,t){var r=$h.createReadStream(e);r.on("error",t),r.on("ready",(function(e){return _(n,r)}))}))},fd((function(e){_(n,void 0).then((function(n){return Promise.resolve(_(e,l(0,[n])))})).catch((function(n){return Promise.resolve(_(e,l(1,[n])))}))}))));var n}function Ay(e,n){var t=Sy(n),r=u.join(e,t);return E(Ed,(function(e){}),hd((function(e){var n=e.mtime,i=e.size;return md((function(e){return l(1,[e,D(t),i,n])}),Ey(r))}),function(e){return fd((function(n){$h.stat(e,(function(e,t){return _(n,E(ud,Mh,td(od(t,null===e?void 0:R(e)))))}))}))}(r)))}function $y(e,n,t){var r=e.entries;if("number"==typeof t)return l(0,[l(0,[l(2,[{text:e.about}]),200])]);switch(0|t.tag){case 0:return function(e,n){return dd((function(e){}),E(Sh,(function(t){return _h((function(t){return l(0,[l(0,[{page:n,total:_(zm,e),entries:Dm((function(e){return{title:e.title,date:e.date,text:e.text}}))(t)}]),200])}),Ah((function(e){return 0!==_(zm,e)}))(Wm(10,t[1])))}),Ym(Mr(n-1|0,10),Zm((function(e,n){return E(Wl,n.date.getTime(),e.date.getTime())}),e))))}(r,t[0]);case 1:return function(e,n,t){return dd((function(e){}),E(Sh,(function(e){var n=e[2],r=e[0];return _h((function(e){return l(0,[l(1,[{tag:n,page:t,total:_(zm,r),entries:Dm((function(e){return{title:e.title,date:e.date,text:e.text}}))(e)}]),200])}),Ah((function(e){return 0!==_(zm,e)}))(Wm(10,e[1])))}),E(Sh,(function(e){var n=e[1],r=e[0];return _h((function(e){return[r,e[1],n]}),Ym(Mr(t-1|0,10),Zm((function(e,n){return E(Wl,n.date.getTime(),e.date.getTime())}),r)))}),Im((function(e,t){var r=E(Bm,(function(e){return ib(e)===n}),t.tags);return void 0!==r?void 0!==e?[[t,e[0]],r]:[[t,0],r]:e}),void 0)(e))))}(r,t[0],t[1]);case 2:return function(e,n,t,r,i){var a=s(n,t,r,void 0,void 0).getTime();return md((function(n){return l(0,[l(3,[{title:n.title,date:n.date,text:n.text,tags:n.tags,previous:_h((function(e){return{title:e.title,date:e.date}}),E(Bm,(function(e){return _y(e.date)<a}),Zm((function(e,n){return E(Wl,n.date.getTime(),e.date.getTime())}),e))),next:_h((function(e){return{title:e.title,date:e.date}}),E(Bm,(function(e){return _y(e.date)>a}),Zm((function(e,n){return E(Wl,e.date.getTime(),n.date.getTime())}),e)))}]),200])}),dd((function(e){}),E(Bm,(function(e){return _y(e.date)===a&&ib(e.title)===i}),e)))}(r,t[0],t[1],t[2],t[3]);case 3:return Ay(n,t[0])}}function Cy(e,n,t){var r=t.favicon;return Bh.createServer((function(i,a){var o,s,c=Eh("/",void 0===(o=i.url)?void 0:R(o));return gd((function(e){}),(s=function(n){var t=Date.now();if(a.on("close",(function(e){var n=a.statusCode,r=Date.now()-t|0;console.log(String(n)+" "+String(c)+" "+String(r)+"ms")})),n.tag)return zh.setStatusCode(200,a),zh.setContentType(Eh("application/octet-stream",n[1]))(a),zh.setContentLength(n[2])(a),zh.setLastModified(n[3])(a),void n[0].pipe(a);var i=function(e,n,t){Lx(void 0);var r,i=wy.renderToString(zv.createElement(vy,{siteName:e,pageData:t})),a=yy.extractCritical(i);if(void 0!==t)switch(0|t.tag){case 0:r=e;break;case 1:r=String(t[0].tag)+" | "+String(e);break;case 2:r="About | "+String(e);break;case 3:r=String(t[0].title)+" | "+String(e)}else r="Not found | "+String(e);return"<!DOCTYPE html>"+wy.renderToString(zv.createElement(by,{title:r,css:a.css,favicon:n,children:a.html}))}(e,r,n[0]),o=Buffer.byteLength(i);zh.setStatusCode(n[1],a),zh.setContentType("text/html; charset=utf-8")(a),zh.setContentLength(o)(a),a.end(i,"utf-8")},function(e){return l(5,[function(e){return _(s,e),e},e])})(wd((function(e){return ky}),hd((function(e){return $y(t,n,e)}),dd((function(e){}),function(e){var n=e.length;if(!(n>=5))switch(n){case 0:return l(0,[1]);case 1:var t=e[0];return"about"===t?0:_h((function(e){return l(0,[e])}),Ah((function(e){return e>=1}))(np(t)));case 2:switch(e[0]){case"tag":return l(1,[e[1],1]);case"uploads":return l(3,[e[1]]);default:return}case 3:if("tag"!==e[0])return;var r=e[1],i=e[2];return _h((function(e){return l(1,[r,e])}),Ah((function(e){return e>=1}))(np(i)));case 4:var a=e[0],o=e[1],s=e[2],c=e[3];return _h((function(e){return l(2,[e[0],e[1],e[2],c])}),E(Sh,(function(e){var n=e[1],t=e[0];return _h((function(e){return[t,n,e]}),Ah((function(e){return e>=1&&e<=31}))(np(s)))}),E(Sh,(function(e){return _h((function(n){return[e,n]}),Ah((function(e){return e>=1&&e<=12}))(np(o)))}),np(a))))}}(function(e){return e.slice(1).split("/").map((function(e){return decodeURIComponent(e).trim()})).filter((function(e){return e.length>=1}))}(c)))))))}))}function Oy(e){e.listen(5e3,"127.0.0.1",(function(e){console.log("Listening")}))}function My(e){var n;switch(0|e.tag){case 0:switch(0|e[0].tag){case 5:n="About path is a directory";break;case 7:n="About path does not exist";break;default:n="Error reading about path"}break;case 1:var t=e[0];switch(0|t.tag){case 0:switch(0|t[0].tag){case 7:n="Entries path does not exist";break;case 8:n="Entries path is not a directory";break;default:n="Error reading entries directory"}break;case 1:n="Error reading entry: "+t[0];break;case 2:n="Error parsing entry: "+t[0]}break;case 2:var r=e[0];if(r)switch(0|r[0].tag){case 5:n="Favicon path is a directory";break;case 7:n="Favicon path does not exist";break;default:n="Error reading favicon path"}else n="Error identifying favicon mimetype";break;case 3:switch(0|e[0].tag){case 7:n="Uploads directory does not exist";break;case 8:n="Uploads path is not a directory";break;default:n="Error checking existence of uploads directory"}}console.error(n)}function jy(e){var n,t,r=o(),i=r.uploadsDirectory,a=r.siteName;return gd((function(e){}),(n=Oy,t=My,kd((function(e){return _(n,e),e}),(function(e){return _(t,e),e}),md((function(e){return Cy(a,i,e)}),Ih(r.aboutPath,r.entriesDirectory,r.faviconPath,i)))))}t(228),jy()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInV0aWxcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvY29uc3QuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZnNcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcInN0cmVhbVwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLXV0aWwtaXMvbGliL3V0aWwuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwicGF0aFwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zaGVldC9kaXN0L3NoZWV0LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGlzL2Rpc3Qvc3R5bGlzLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vd2Vhay1tZW1vaXplL2Rpc3Qvd2Vhay1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vY2FjaGUvZGlzdC9jYWNoZS5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL2hhc2gvZGlzdC9oYXNoLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL21lbW9pemUvZGlzdC9tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc2VyaWFsaXplL2Rpc3Qvc2VyaWFsaXplLmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdXRpbHMvZGlzdC91dGlscy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NyZWF0ZS1lbW90aW9uL2Rpc3QvY3JlYXRlLWVtb3Rpb24uZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uL2Rpc3QvZW1vdGlvbi5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RyaW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9kdXBsZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi91dGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlLWVudGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1kZWNpbWFsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXZpc2l0L2luZGV4LmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImJ1ZmZlclwiIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9jZXNzLW5leHRpY2stYXJncy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vc3RvcmUvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hcmd1bWVudC9lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2hlbHAvZm9ybWF0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvaGVscC9hZGRlZF9mb3JtYXR0ZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9ub3JtYWxpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXBlYXQtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cmltLXRyYWlsaW5nLWxpbmVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvbm9ybWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fZHVwbGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9qYXZhc2NyaXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy90eXBlc2NyaXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL3NlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ByaW50Zi1qcy9zcmMvc3ByaW50Zi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbl9jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hcmd1bWVudC9ncm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL25hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3V0aWwvc2NoZW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9kZWZpbmVkLWluZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2luZm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2Nhc2UtaW5zZW5zaXRpdmUtdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1hbHBoYWJldGljYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9nZXQtaW5kZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJldmVudHNcIiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvc3RyaW5nX2RlY29kZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtdG9rZW5pemUvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvX3N0cmVhbV93cml0YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZGVzdHJveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL2xpYi9zdHJpbmdfZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9fc3RyZWFtX3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2Jhc2U2NC12bHEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2FycmF5LXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbWUtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21hcmtkb3duLW1ldGFkYXRhL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2Jhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2pzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL3B5dGhvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvcmVhc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy90c3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NsdWdpZnkvc2x1Z2lmeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbWFya2Rvd24vbGliL3JlYWN0LW1hcmtkb3duLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJmdGltZS9zdHJmdGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm9vdHN0cmFwL3Njc3MvYm9vdHN0cmFwLXJlYm9vdC5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbW90aW9uLXNlcnZlci9kaXN0L2Vtb3Rpb24tc2VydmVyLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FuaXRpemUtZmlsZW5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hcmdwYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FyZ3VtZW50X3BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi9oZWxwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi9hcHBlbmQvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vY291bnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hY3Rpb24vc3RvcmUvdHJ1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi9zdG9yZS9mYWxzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJncGFyc2UvbGliL2FjdGlvbi92ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcmdwYXJzZS9saWIvYWN0aW9uL3N1YnBhcnNlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FyZ3BhcnNlL2xpYi9hcmd1bWVudC9leGNsdXNpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbWUtZGIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzdHNjcmlwdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzdHNjcmlwdC9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIvdXRpbC9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL3hsaW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIveG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wZXJ0eS1pbmZvcm1hdGlvbi9saWIveG1sbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi91dGlsL2Nhc2Utc2Vuc2l0aXZlLXRyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcGVydHktaW5mb3JtYXRpb24vbGliL2FyaWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2xpYi9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXN0c2NyaXB0L2ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWluZm9ybWF0aW9uL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC1wYXJzZS1zZWxlY3Rvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3BhY2Utc2VwYXJhdGVkLXRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tbWEtc2VwYXJhdGVkLXRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtaGV4YWRlY2ltYWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWFscGhhbnVtZXJpY2FsL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wYXJzZS1lbnRpdGllcy9kZWNvZGUtZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3Ivbm9kZV9tb2R1bGVzL3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWZyYWN0b3IvbGFuZy9tYXJrdXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZnJhY3Rvci9sYW5nL2Nzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvY2xpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVmcmFjdG9yL2xhbmcvanN4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlmaWVkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHRlbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhaWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ZmaWxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZmlsZS1tZXNzYWdlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXN0cmluZ2lmeS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmZpbGUvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVwbGFjZS1leHQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdHJvdWdoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90cm91Z2gvd3JhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveC1pcy1zdHJpbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXBsYWluLW9iai9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmhlcml0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pbmhlcml0cy9pbmhlcml0c19icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RhdGUtdG9nZ2xlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92ZmlsZS1sb2NhdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91bmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3NldC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tYXJrZG93bi1lc2NhcGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91bmlzdC11dGlsLWlzL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbmV3bGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWluZGVudGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtZmVuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Jsb2NrcXVvdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvaGVhZGluZy1hdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Zvb3Rub3RlLWRlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbGxhcHNlLXdoaXRlLXNwYWNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlZmluaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvcGFyYWdyYXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZXNjYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2F1dG8tbGluay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS91cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL3JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3N0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lbXBoYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtd29yZC1jaGFyYWN0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2VtcGhhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2RlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtaW5saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2xvY2F0ZS9jb2RlLWlubGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9icmVhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tZGFzdC1hZGQtbGlzdC1tZXRhZGF0YS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9uYWl2ZS1odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcGx1Z2lucy9kaXNhbGxvdy1ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvYXN0LXRvLXJlYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvd3JhcC10YWJsZS1yb3dzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvZ2V0LWRlZmluaXRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvdXJpLXRyYW5zZm9ybWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvcmVuZGVyZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tYXJrZG93bi9saWIvc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW1vdGlvbi1zZXJ2ZXIvZGlzdC9lbW90aW9uLXNlcnZlci5janMucHJvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWVtb3Rpb24tc2VydmVyL2Rpc3QvY3JlYXRlLWVtb3Rpb24tc2VydmVyLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3JlYXRlLWVtb3Rpb24tc2VydmVyL2Rpc3QvY3JlYXRlLWVtb3Rpb24tc2VydmVyLmNqcy5wcm9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aHJvdWdoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9idWZmZXItZnJvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC10b2tlbml6ZS9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXRva2VuaXplL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL211bHRpcGlwZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZHVwbGV4ZXIyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9CdWZmZXJMaXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dGlsLWRlcHJlY2F0ZS9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9zZXJ2ZXIubm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20tc2VydmVyLm5vZGUucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RydW5jYXRlLXV0ZjgtYnl0ZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RydW5jYXRlLXV0ZjgtYnl0ZXMvbGliL3RydW5jYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwLXN1cHBvcnQvcmVnaXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAtc3VwcG9ydC9zb3VyY2UtbWFwLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9zb3VyY2UtbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL21hcHBpbmctbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1jb25zdW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYmluYXJ5LXNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci1mcm9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kaW5ncy9QYWNrYWdlLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kaW5ncy9BcmdQYXJzZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ0xJLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kaW5ncy9EYXRlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvanNfZGljdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmluZGluZ3MvTWltZVR5cGVzLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2pzX3R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfZXhjZXB0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2pzX2V4Y2VwdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvanNfbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9qc19pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X1NvcnRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X2ludGVybmFsQVZMdHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X01hcFN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvSW50ZXJmYWNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9JbmZpeC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvRnVuY3Rpb24uYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0VuZG8uYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0Z1bmN0aW9ucy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0Z1bmN0aW9uLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X09wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9hcnJheUxhYmVscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvU3RyaW5nLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9EdWFsLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9EZWZhdWx0LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9BcnJheS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvQXJyYXlGLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9FcS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0VxLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9PcmQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19PcmQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9ieXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2ludDMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfZm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L3BlcnZhc2l2ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0VudW0uYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkRW51bS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfT3JkZXJpbmcuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL09wdGlvbi5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbm9pZC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9vcHRpb24vUmVsdWRlX09wdGlvbl9CYXNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2xpc3RMYWJlbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWJhc3RldC9iYXN0ZXQvc3JjL0xpc3QuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvbGlzdC9SZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWRBbnkuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvbGlzdC9SZWx1ZGVfTGlzdF9CYXNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfSWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9NYXBEaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2FycmF5L1JlbHVkZV9BcnJheV9JbnN0YW5jZXMuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX01hcC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X2ludGVybmFsQVZMc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfU2V0RGljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfU2V0LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9JbnQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19SaW5nLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9JbnQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvYXJyYXkvUmVsdWRlX0FycmF5X0Jhc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX1NlcXVlbmNlLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9Ob25FbXB0eS5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnMtYmFzdGV0L2Jhc3RldC9zcmMvUmVzdWx0LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9WYWxpZGF0aW9uLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQmlmdW5jdG9yLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9SZXN1bHQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1iYXN0ZXQvYmFzdGV0L3NyYy9GbG9hdC5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfRmxvYXQuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvYnl0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLXBsYXRmb3JtL2xpYi9lczYvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9TdHJpbmcuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvbGlzdC9SZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvYXJyYXkvUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVsdWRlL3NyYy9SZWx1ZGVfQXJyYXkuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbHVkZS9zcmMvb3B0aW9uL1JlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtZnMtYnMvc3JjL05vZGVGU19fRXJyb3IuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vZGUtZnMtYnMvc3JjL05vZGVGU19fUmVhZERpci5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1mcy1icy9zcmMvTm9kZUZTX19SZWFkRmlsZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUGFyc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JpbmRpbmdzL0hUVFAuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWNzcy9zcmMvQ3NzX0F0b21pY1R5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9icy1jc3Mvc3JjL0Nzc19Db2xvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWNzcy9zcmMvQ3NzX0NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JzLWNzcy1lbW90aW9uL3NyYy9Dc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL2hpZ2hsaWdodC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL3ByaXNtLWxpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vbGFuZ3VhZ2VzL3ByaXNtL3RzeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL2xhbmd1YWdlcy9wcmlzbS9iYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vbGFuZ3VhZ2VzL3ByaXNtL2pzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9zdHlsZXMvcHJpc20vdG9tb3Jyb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9sYW5ndWFnZXMvcHJpc20vcHl0aG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vbGFuZ3VhZ2VzL3ByaXNtL3JlYXNvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL2xhbmd1YWdlcy9wcmlzbS9qYXZhc2NyaXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vbGFuZ3VhZ2VzL3ByaXNtL3R5cGVzY3JpcHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2NvbXBvbmVudHMvSGlnaGxpZ2h0ZWRDb2RlLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9TdHlsZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvY29tcG9uZW50cy9MaW5rLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9jb21wb25lbnRzL1JvdXRlTGluay5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUm91dGVyLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9jb21wb25lbnRzL05hdi5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvY29tcG9uZW50cy9Db250ZW50LmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbHVnaWZ5LWJzL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zbHVnaWZ5LWJzL25vZGVfbW9kdWxlcy9icy1wbGF0Zm9ybS9saWIvZXM2L2pzX251bGxfdW5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uL3NyYy9VdGlscy5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2x1Z2lmeS1icy9zcmMvU2x1Z2lmeS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUGFnZURhdGEuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2NvbXBvbmVudHMvSGVhZGluZy5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvY29tcG9uZW50cy9TcG9pbGVyLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9jb21wb25lbnRzL01hcmtkb3duLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9wYWdlcy9BYm91dFBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2NvbXBvbmVudHMvQXJyb3cuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2NvbXBvbmVudHMvVGltZXN0YW1wLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9wYWdlcy9FbnRyeVBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2NvbXBvbmVudHMvRW50cmllc0xpc3QuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbnN0YW50cy5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvcGFnZXMvSW5kZXhQYWdlLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy92aWV3cy9wYWdlcy9Ob3RGb3VuZFBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL3BhZ2VzL1RhZ1NlYXJjaFBhZ2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL0FwcC5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvUGFnZS5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzcG9uc2UuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL0VudHJ5Q29udHJvbGxlci5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1mcy1icy9zcmMvTm9kZUZTX19SZWFkU3RyZWFtLmJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWx1ZGUvc3JjL2pzL1JlbHVkZV9Kc19Qcm9taXNlLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVycy9VcGxvYWRzQ29udHJvbGxlci5icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9kZS1mcy1icy9zcmMvTm9kZUZTX19TdGF0LmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9TZXJ2ZXIuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2xsZXJzL0Fib3V0Q29udHJvbGxlci5icy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbGxlcnMvSW5kZXhDb250cm9sbGVyLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9jb250cm9sbGVycy9UYWdTZWFyY2hDb250cm9sbGVyLmJzLmpzIiwid2VicGFjazovLy8uL3NyYy9SZW5kZXIuYnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0luZGV4LmJzLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsInV0aWwiLCJpbmhlcml0cyIsImUiLCJjaGFyYWN0ZXIiLCJyZSIsInRlc3QiLCJmcm9tQ29kZSIsImNoYXJBdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIkVPTCIsIlNVUFBSRVNTIiwiT1BUSU9OQUwiLCJaRVJPX09SX01PUkUiLCJPTkVfT1JfTU9SRSIsIlBBUlNFUiIsIlJFTUFJTkRFUiIsIl9VTlJFQ09HTklaRURfQVJHU19BVFRSIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwib2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsImlzQXJyYXkiLCJhcmciLCJBcnJheSIsImlzQm9vbGVhbiIsImlzTnVsbCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1JlZ0V4cCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNFcnJvciIsIkVycm9yIiwiaXNGdW5jdGlvbiIsImlzUHJpbWl0aXZlIiwiaXNCdWZmZXIiLCJCdWZmZXIiLCJBY3Rpb24iLCJvcHRpb25zIiwidGhpcyIsIm9wdGlvblN0cmluZ3MiLCJkZXN0IiwibmFyZ3MiLCJjb25zdGFudCIsImRlZmF1bHRWYWx1ZSIsInR5cGUiLCJjaG9pY2VzIiwicmVxdWlyZWQiLCJoZWxwIiwibWV0YXZhciIsImdldE5hbWUiLCJqb2luIiwiaXNPcHRpb25hbCIsImlzUG9zaXRpb25hbCIsIlN0eWxlU2hlZXQiLCJpc1NwZWVkeSIsInVuZGVmaW5lZCIsInNwZWVkeSIsInRhZ3MiLCJjdHIiLCJub25jZSIsImNvbnRhaW5lciIsImJlZm9yZSIsIl9wcm90byIsImluc2VydCIsInJ1bGUiLCJfdGFnIiwidGFnIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsIm5leHRTaWJsaW5nIiwiaW5zZXJ0QmVmb3JlIiwicHVzaCIsInNoZWV0Iiwic3R5bGVTaGVldHMiLCJvd25lck5vZGUiLCJzaGVldEZvclRhZyIsImlzSW1wb3J0UnVsZSIsImNoYXJDb2RlQXQiLCJpbnNlcnRSdWxlIiwiY3NzUnVsZXMiLCJmbHVzaCIsImZvckVhY2giLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJXIiwiWCIsImgiLCJ0cmltIiwic3BsaXQiLCJpYSIsImEiLCJiIiwiWiIsInYiLCJyZXBsYWNlIiwiRiIsImluZGV4T2YiLCJQIiwic3Vic3RyaW5nIiwidyIsIkwiLCJqYSIsImthIiwiYWEiLCJHIiwiYmEiLCJsYSIsIm1hIiwiUiIsIm5hIiwiZWEiLCJvYSIsIkgiLCJxIiwiZyIsIngiLCJBIiwiUyIsIkIiLCJVIiwicHJlZml4IiwiRCIsInoiLCJNIiwiayIsInkiLCJDIiwiSyIsInUiLCJJIiwiSiIsImYiLCJOIiwiY2EiLCJPIiwiZGEiLCJmYSIsIlkiLCJFIiwiaGEiLCJRIiwidXNlIiwiVCIsInNldCIsImZ1bmMiLCJjYWNoZSIsIldlYWtNYXAiLCJoYXMiLCJyZXQiLCJ0b1NoZWV0IiwiYmxvY2siLCJTaGVldCIsImN1cnJlbnQiLCJydWxlU2hlZXQiLCJjb250ZXh0IiwiY29udGVudCIsInNlbGVjdG9ycyIsInBhcmVudHMiLCJsaW5lIiwiY29sdW1uIiwiZGVwdGgiLCJhdCIsImRlbGltaXRlciIsInJlbW92ZUxhYmVsIiwiaXNCcm93c2VyIiwicm9vdFNlcnZlclN0eWxpc0NhY2hlIiwiZ2V0U2VydmVyU3R5bGlzQ2FjaGUiLCJnZXRDYWNoZSIsInByZWZpeFRydWVDYWNoZSIsInByZWZpeEZhbHNlQ2FjaGUiLCJzdHlsaXNPcHRpb25zIiwic3R5bGlzIiwiX2luc2VydCIsImluc2VydGVkIiwiaGVhZCIsIm5vZGVzIiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGUiLCJnZXRBdHRyaWJ1dGUiLCJpZCIsInN0eWxpc1BsdWdpbnMiLCJzZWxlY3RvciIsInNlcmlhbGl6ZWQiLCJzaG91bGRDYWNoZSIsInN0eWxlcyIsInNlcnZlclN0eWxpc0NhY2hlIiwicnVsZXMiLCJnZXRSdWxlcyIsImNvbXBhdCIsInJlZ2lzdGVyZWQiLCJzdHIiLCJsZW4iLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJmb250V2VpZ2h0IiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsIldlYmtpdExpbmVDbGFtcCIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImh5cGhlbmF0ZVJlZ2V4IiwiYW5pbWF0aW9uUmVnZXgiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNQcm9jZXNzYWJsZVZhbHVlIiwicHJvY2Vzc1N0eWxlTmFtZSIsImZuIiwic3R5bGVOYW1lIiwidG9Mb3dlckNhc2UiLCJtYXRjaCIsInAxIiwicDIiLCJjdXJzb3IiLCJuZXh0IiwiaGFuZGxlSW50ZXJwb2xhdGlvbiIsIm1lcmdlZFByb3BzIiwiaW50ZXJwb2xhdGlvbiIsImNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24iLCJfX2Vtb3Rpb25fc3R5bGVzIiwiYW5pbSIsIm9iaiIsInN0cmluZyIsIl9rZXkiLCJpbnRlcnBvbGF0ZWQiLCJfaSIsImNyZWF0ZVN0cmluZ0Zyb21PYmplY3QiLCJwcmV2aW91c0N1cnNvciIsInJlc3VsdCIsImNhY2hlZCIsImxhYmVsUGF0dGVybiIsImFyZ3MiLCJzdHJpbmdNb2RlIiwic3RyaW5ncyIsInJhdyIsImxhc3RJbmRleCIsImlkZW50aWZpZXJOYW1lIiwiZXhlYyIsImdldFJlZ2lzdGVyZWRTdHlsZXMiLCJyZWdpc3RlcmVkU3R5bGVzIiwiY2xhc3NOYW1lcyIsInJhd0NsYXNzTmFtZSIsImNsYXNzTmFtZSIsImluc2VydFN0eWxlcyIsImlzU3RyaW5nVGFnIiwic3R5bGVzRm9yU1NSIiwibWF5YmVTdHlsZXMiLCJpbnNlcnRXaXRob3V0U2NvcGluZyIsIm1lcmdlIiwiY3NzIiwiY2xhc3NuYW1lcyIsImNscyIsInRvQWRkIiwiX2NyZWF0ZUVtb3Rpb24iLCJfbGVuIiwiY3giLCJfbGVuNCIsIl9rZXk0IiwiaW5qZWN0R2xvYmFsIiwiX2xlbjMiLCJfa2V5MyIsImtleWZyYW1lcyIsIl9sZW4yIiwiX2tleTIiLCJhbmltYXRpb24iLCJoeWRyYXRlIiwiaWRzIiwibGVmdCIsInJpZ2h0IiwicG5hIiwib2JqZWN0S2V5cyIsImtleXMiLCJEdXBsZXgiLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwibWV0aG9kIiwicmVhZGFibGUiLCJ3cml0YWJsZSIsImFsbG93SGFsZk9wZW4iLCJvbmNlIiwib25lbmQiLCJfd3JpdGFibGVTdGF0ZSIsImVuZGVkIiwibmV4dFRpY2siLCJvbkVuZE5UIiwic2VsZiIsImVuZCIsImhpZ2hXYXRlck1hcmsiLCJfcmVhZGFibGVTdGF0ZSIsImRlc3Ryb3llZCIsIl9kZXN0cm95IiwiZXJyIiwiY2IiLCJyZXBlYXQiLCJudW0iLCJhcnJheUVxdWFsIiwidHJpbUNoYXJzIiwiY2hhcnMiLCJzdGFydCIsInNsaWNlIiwiY2FwaXRhbGl6ZSIsInRvVXBwZXJDYXNlIiwiYXJyYXlVbmlvbiIsInZhbHVlcyIsImFyciIsImoiLCJleHRlbmQiLCJzcmMiLCJ0cmltRW5kIiwibm9ybWFsaXplIiwiU2NoZW1hIiwiRGVmaW5lZEluZm8iLCJkZWZpbml0aW9uIiwicHJvcCIsImluZm8iLCJzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsImF0dHJpYnV0ZXMiLCJwcm9wcyIsInByb3BlcnRpZXMiLCJ0cmFuc2Zvcm0iLCJub3JtYWwiLCJhdHRyaWJ1dGUiLCJnZXRBcmciLCJhQXJncyIsImFOYW1lIiwiYURlZmF1bHRWYWx1ZSIsInVybFJlZ2V4cCIsImRhdGFVcmxSZWdleHAiLCJ1cmxQYXJzZSIsImFVcmwiLCJzY2hlbWUiLCJhdXRoIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwidXJsR2VuZXJhdGUiLCJhUGFyc2VkVXJsIiwidXJsIiwiYVBhdGgiLCJwYXJ0IiwiaXNBYnNvbHV0ZSIsInBhcnRzIiwidXAiLCJzcGxpY2UiLCJhUm9vdCIsImFQYXRoVXJsIiwiYVJvb3RVcmwiLCJqb2luZWQiLCJyZWxhdGl2ZSIsImxldmVsIiwiaW5kZXgiLCJsYXN0SW5kZXhPZiIsInN1YnN0ciIsInN1cHBvcnRzTnVsbFByb3RvIiwiaWRlbnRpdHkiLCJpc1Byb3RvU3RyaW5nIiwic3RyY21wIiwiYVN0cjEiLCJhU3RyMiIsInRvU2V0U3RyaW5nIiwiYVN0ciIsImZyb21TZXRTdHJpbmciLCJjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyIsIm1hcHBpbmdBIiwibWFwcGluZ0IiLCJvbmx5Q29tcGFyZU9yaWdpbmFsIiwiY21wIiwib3JpZ2luYWxMaW5lIiwib3JpZ2luYWxDb2x1bW4iLCJnZW5lcmF0ZWRDb2x1bW4iLCJnZW5lcmF0ZWRMaW5lIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQiLCJvbmx5Q29tcGFyZUdlbmVyYXRlZCIsImNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkIiwicGFyc2VTb3VyY2VNYXBJbnB1dCIsIkpTT04iLCJwYXJzZSIsImNvbXB1dGVTb3VyY2VVUkwiLCJzb3VyY2VSb290Iiwic291cmNlVVJMIiwic291cmNlTWFwVVJMIiwicGFyc2VkIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcHBseSIsImxlZ2FjeSIsImludmFsaWQiLCJkZWNpbWFsIiwiaGV4YWRlY2ltYWwiLCJhbHBoYW51bWVyaWNhbCIsImRlY29kZUVudGl0eSIsIm9wdGlvbiIsInNldHRpbmdzIiwiZGVmYXVsdHMiLCJwb3NpdGlvbiIsImluZGVudCIsImVudGl0eUNoYXJhY3RlcnMiLCJuYW1lZEVudGl0eSIsInRlcm1pbmF0ZWQiLCJjaGFyYWN0ZXJzIiwicmVmZXJlbmNlIiwiZm9sbG93aW5nIiwid2FybmluZyIsInJlYXNvbiIsIm91dHB1dCIsImVudGl0eSIsImJlZ2luIiwicHJldiIsImRpZmYiLCJhZGRpdGlvbmFsIiwibm9uVGVybWluYXRlZCIsImhhbmRsZVRleHQiLCJ0ZXh0IiwiaGFuZGxlUmVmZXJlbmNlIiwiaGFuZGxlV2FybmluZyIsInRleHRDb250ZXh0IiwicmVmZXJlbmNlQ29udGV4dCIsIndhcm5pbmdDb250ZXh0IiwicG9zIiwibGluZXMiLCJxdWV1ZSIsIm5vdyIsImNvZGUiLCJvZmZzZXQiLCJtZXNzYWdlcyIsIm5vb3AiLCJoZXhhIiwidGVzdHMiLCJvd24iLCJwYXJzZUludCIsImJhc2VzIiwiZGlzYWxsb3dlZCIsIkZ1bmN0aW9uIiwidmlzaXQiLCJ2aXNpdFBhcmVudHMiLCJDT05USU5VRSIsIlNLSVAiLCJFWElUIiwidHJlZSIsInZpc2l0b3IiLCJyZXZlcnNlIiwicGFyZW50IiwiY2hpbGRyZW4iLCJwcm9jZXNzIiwidmVyc2lvbiIsImFyZzEiLCJhcmcyIiwiYXJnMyIsIlR5cGVFcnJvciIsImJ1ZmZlciIsImNvcHlQcm9wcyIsImRzdCIsIlNhZmVCdWZmZXIiLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbSIsImFsbG9jIiwiYWxsb2NVbnNhZmUiLCJhbGxvY1Vuc2FmZVNsb3ciLCJzaXplIiwiZmlsbCIsImVuY29kaW5nIiwiYnVmIiwiU2xvd0J1ZmZlciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJjb25jYXQiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJBY3Rpb25TdG9yZUNvbnN0YW50IiwicGFyc2VyIiwibmFtZXNwYWNlIiwiZm9ybWF0IiwiYXJndW1lbnQiLCJtZXNzYWdlIiwiZXJyTWVzc2FnZSIsImFyZ3VtZW50TmFtZSIsInNwcmludGYiLCIkJCIsIlNlY3Rpb24iLCJoZWFkaW5nIiwiX3BhcmVudCIsIl9oZWFkaW5nIiwiX2l0ZW1zIiwiYWRkSXRlbSIsImNhbGxiYWNrIiwiZm9ybWF0SGVscCIsImZvcm1hdHRlciIsIml0ZW1IZWxwIiwiX2luZGVudCIsIm1hcCIsIml0ZW0iLCJfam9pblBhcnRzIiwiX2RlZGVudCIsImN1cnJlbnRJbmRlbnQiLCJIZWxwRm9ybWF0dGVyIiwiX3Byb2ciLCJwcm9nIiwiX21heEhlbHBQb3NpdGlvbiIsIm1heEhlbHBQb3NpdGlvbiIsIl93aWR0aCIsIndpZHRoIiwiZW52IiwiQ09MVU1OUyIsIl9jdXJyZW50SW5kZW50IiwiX2luZGVudEluY3JpbWVudCIsImluZGVudEluY3JpbWVudCIsIl9sZXZlbCIsIl9hY3Rpb25NYXhMZW5ndGgiLCJfcm9vdFNlY3Rpb24iLCJfY3VycmVudFNlY3Rpb24iLCJfd2hpdGVzcGFjZU1hdGNoZXIiLCJSZWdFeHAiLCJfbG9uZ0JyZWFrTWF0Y2hlciIsIl9hZGRJdGVtIiwic3RhcnRTZWN0aW9uIiwic2VjdGlvbiIsImVuZFNlY3Rpb24iLCJhZGRUZXh0IiwiX2Zvcm1hdFRleHQiLCJhZGRVc2FnZSIsInVzYWdlIiwiYWN0aW9ucyIsImdyb3VwcyIsIl9mb3JtYXRVc2FnZSIsImFkZEFyZ3VtZW50IiwiYWN0aW9uIiwiYWN0aW9uTGVuZ3RoIiwiaW52b2NhdGlvbnMiLCJfZm9ybWF0QWN0aW9uSW52b2NhdGlvbiIsImludm9jYXRpb25MZW5ndGgiLCJfZ2V0U3ViYWN0aW9ucyIsInN1YmFjdGlvbiIsImludm9jYXRpb25OZXciLCJNYXRoIiwibWF4IiwiX2Zvcm1hdEFjdGlvbiIsImFkZEFyZ3VtZW50cyIsInBhcnRTdHJpbmdzIiwidGV4dFdpZHRoIiwib3B0aW9uYWxzIiwicG9zaXRpb25hbHMiLCJfZm9ybWF0QWN0aW9uc1VzYWdlIiwicmVnZXhwUGFydCIsIm9wdGlvbmFsVXNhZ2UiLCJwb3NpdGlvbmFsVXNhZ2UiLCJvcHRpb25hbFBhcnRzIiwicG9zaXRpb25hbFBhcnRzIiwiX2dldExpbmVzIiwibGluZUxlbmd0aCIsImdyb3VwQWN0aW9ucyIsImluc2VydHMiLCJncm91cCIsIl9ncm91cEFjdGlvbnMiLCJhY3Rpb25JbmRleCIsIm9wdGlvblN0cmluZyIsImFyZ3NEZWZhdWx0IiwiX2Zvcm1hdEFyZ3MiLCJfZmlsbFRleHQiLCJoZWxwVGV4dCIsImhlbHBMaW5lcyIsImluZGVudEZpcnN0IiwiaGVscFBvc2l0aW9uIiwibWluIiwiaGVscFdpZHRoIiwiYWN0aW9uV2lkdGgiLCJhY3Rpb25IZWFkZXIiLCJfZXhwYW5kSGVscCIsIl9zcGxpdExpbmVzIiwiX21ldGF2YXJGb3JtYXR0ZXIiLCJmb3JtYXRfZnVuYyIsImFyZ3NTdHJpbmciLCJtZXRhdmFyRGVmYXVsdCIsIm1ldGF2YXJzIiwiYnVpbGRNZXRhdmFyIiwicGFyYW1zIiwiYWN0aW9uUHJvcGVydHkiLCJhY3Rpb25WYWx1ZSIsIl9nZXRIZWxwU3RyaW5nIiwiZGVsaW1pdGVycyIsIndyYXBTdGFydCIsIndyYXBFbmQiLCJBcmd1bWVudERlZmF1bHRzSGVscEZvcm1hdHRlciIsIlJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlciIsIlJhd1RleHRIZWxwRm9ybWF0dGVyIiwiZGVmYXVsdGluZ19uYXJncyIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwidGVzdDEiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidGVzdDIiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInN5bWJvbHMiLCJ0byIsInBvd2VycyIsImluY3JlbWVudCIsInBvdyIsImJvb2xlYW4iLCJib29sZWFuaXNoIiwib3ZlcmxvYWRlZEJvb2xlYW4iLCJudW1iZXIiLCJzcGFjZVNlcGFyYXRlZCIsImNvbW1hU2VwYXJhdGVkIiwiY29tbWFPclNwYWNlU2VwYXJhdGVkIiwicmVzIiwiaW50ZXJydXB0b3JzIiwidG9rZW5pemVycyIsImN0eCIsImludGVycnVwdG9yIiwiY29uZmlnIiwiYm9vbCIsImlnbm9yZSIsImJvb2xzIiwiY291bnQiLCJjb2xsYXBzZVdoaXRlU3BhY2UiLCJ4cyIsImphdmFzY3JpcHQiLCJQcmlzbSIsImxhbmd1YWdlcyIsImNsaWtlIiwicGF0dGVybiIsImxvb2tiZWhpbmQiLCJrZXl3b3JkIiwiZnVuY3Rpb24iLCJvcGVyYXRvciIsInJlZ2V4IiwiZ3JlZWR5IiwiYWxpYXMiLCJwYXJhbWV0ZXIiLCJpbnNpZGUiLCJyZXN0IiwibWFya3VwIiwiYWRkSW5saW5lZCIsImpzIiwiZGlzcGxheU5hbWUiLCJhbGlhc2VzIiwidHlwZXNjcmlwdCIsImJ1aWx0aW4iLCJ0cyIsImRlZmluZWQiLCJyZXN0b3JlIiwiZ2xvYmFsIiwid2luZG93IiwibWFudWFsIiwiZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyIiwiZGVjb2RlIiwiUmVmcmFjdG9yIiwicmVmcmFjdCIsInJlZ2lzdGVyIiwiZ3JhbW1hciIsImhpZ2hsaWdodCIsInN1cCIsImxpc3QiLCJsYW5ndWFnZSIsImxpc3RMYW5ndWFnZXMiLCJlbmNvZGUiLCJ0b2tlbnMiLCJUb2tlbiIsInN0cmluZ2lmeSIsInN0cmluZ2lmeUFsbCIsImNsYXNzZXMiLCJob29rcyIsInJ1biIsImF0dHJzIiwibm90X3N0cmluZyIsImpzb24iLCJub3RfanNvbiIsIm1vZHVsbyIsInBsYWNlaG9sZGVyIiwia2V5X2FjY2VzcyIsImluZGV4X2FjY2VzcyIsInNpZ24iLCJwYXJzZV90cmVlIiwiYXJndiIsInBhZCIsInBhZF9jaGFyYWN0ZXIiLCJwYWRfbGVuZ3RoIiwiaW5wdXQiLCJ0cmVlX2xlbmd0aCIsIm5vZGVfdHlwZSIsImlzX3Bvc2l0aXZlIiwiZ2V0X3R5cGUiLCJpc05hTiIsInRvRXhwb25lbnRpYWwiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInRvUHJlY2lzaW9uIiwiZm10IiwiX2ZtdCIsImFyZ19uYW1lcyIsIlN5bnRheEVycm9yIiwiZmllbGRfbGlzdCIsInJlcGxhY2VtZW50X2ZpZWxkIiwiZmllbGRfbWF0Y2giLCJ2YXJpYWJsZSIsInZzcHJpbnRmIiwiX2FyZ3YiLCJBY3Rpb25IZWxwIiwiQWN0aW9uQXBwZW5kIiwiQWN0aW9uQXBwZW5kQ29uc3RhbnQiLCJBY3Rpb25Db3VudCIsIkFjdGlvblN0b3JlIiwiQWN0aW9uU3RvcmVUcnVlIiwiQWN0aW9uU3RvcmVGYWxzZSIsIkFjdGlvblZlcnNpb24iLCJBY3Rpb25TdWJwYXJzZXJzIiwiYXJndW1lbnRFcnJvckhlbHBlciIsIkFjdGlvbkNvbnRhaW5lciIsImRlc2NyaXB0aW9uIiwiYXJndW1lbnREZWZhdWx0IiwicHJlZml4Q2hhcnMiLCJjb25mbGljdEhhbmRsZXIiLCJfcmVnaXN0cmllcyIsIl9nZXRIYW5kbGVyIiwiX2FjdGlvbnMiLCJfb3B0aW9uU3RyaW5nQWN0aW9ucyIsIl9hY3Rpb25Hcm91cHMiLCJfbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMiLCJfZGVmYXVsdHMiLCJfcmVnZXhwTmVnYXRpdmVOdW1iZXIiLCJfaGFzTmVnYXRpdmVOdW1iZXJPcHRpb25hbHMiLCJBcmd1bWVudEdyb3VwIiwiTXV0dWFsbHlFeGNsdXNpdmVHcm91cCIsInJlZ2lzdHJ5TmFtZSIsIl9yZWdpc3RyeUdldCIsInNldERlZmF1bHRzIiwiZ2V0RGVmYXVsdCIsIl9nZXRQb3NpdGlvbmFsIiwiX2dldE9wdGlvbmFsIiwiQWN0aW9uQ2xhc3MiLCJfcG9wQWN0aW9uQ2xhc3MiLCJ0eXBlRnVuY3Rpb24iLCJfYWRkQWN0aW9uIiwiYWRkQXJndW1lbnRHcm91cCIsImFkZE11dHVhbGx5RXhjbHVzaXZlR3JvdXAiLCJfY2hlY2tDb25mbGljdCIsInNvbWUiLCJCb29sZWFuIiwiX3JlbW92ZUFjdGlvbiIsIl9hZGRDb250YWluZXJBY3Rpb25zIiwidGl0bGVHcm91cE1hcCIsInRpdGxlIiwibXV0ZXhHcm91cCIsImdyb3VwTWFwIiwiYWN0aW9uSGFzaCIsIm9wdGlvblN0cmluZ3NMb25nIiwib3B0aW9uU3RyaW5nRGVzdCIsImhhbmRsZXJTdHJpbmciLCJvcHRpb25TdHJpbmdBY3Rpb25zIiwiY29uZmxpY3RPcHRpb25hbHMiLCJjb25mbE9wdGlvbmFsIiwiX2hhbmRsZUNvbmZsaWN0RXJyb3IiLCJjb25mbE9wdGlvbmFscyIsImNvbmZsaWN0cyIsInBhaXIiLCJfaGFuZGxlQ29uZmxpY3RSZXNvbHZlIiwiY29uZmxpY3RpbmdBY3Rpb24iLCJfY29udGFpbmVyIiwiTmFtZXNwYWNlIiwiaXNzZXQiLCJ1bnNldCIsInByb3RvIiwiSW5mbyIsInR5cGVzIiwiY2hlY2tzIiwiY2hlY2tzTGVuZ3RoIiwibWFzayIsImNoZWNrIiwibWFyayIsImNhc2VTZW5zaXRpdmVUcmFuc2Zvcm0iLCJnZm0iLCJjb21tb25tYXJrIiwiZm9vdG5vdGVzIiwicGVkYW50aWMiLCJibG9ja3MiLCJzdG9wcyIsImZsb29yIiwib3BlblRhZyIsImNsb3NlVGFnIiwib3BlbkNsb3NlVGFnIiwiZnJvbUluZGV4IiwibGluayIsImltYWdlIiwiUmVhZGFibGVTdGF0ZSIsIkVFIiwiRXZlbnRFbWl0dGVyIiwibGlzdGVuZXJDb3VudCIsImVtaXR0ZXIiLCJsaXN0ZW5lcnMiLCJTdHJpbmdEZWNvZGVyIiwiU3RyZWFtIiwic3RyZWFtIiwiaHdtIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwiY2FsbGVkUmVhZCIsInN5bmMiLCJuZWVkUmVhZGFibGUiLCJlbWl0dGVkUmVhZGFibGUiLCJyZWFkYWJsZUxpc3RlbmluZyIsIm9iamVjdE1vZGUiLCJkZWZhdWx0RW5jb2RpbmciLCJyYW5PdXQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJkZWNvZGVyIiwicmVhZGFibGVBZGRDaHVuayIsInN0YXRlIiwiY2h1bmsiLCJhZGRUb0Zyb250IiwiZXIiLCJjaHVua0ludmFsaWQiLCJlbWl0IiwiZW1pdFJlYWRhYmxlIiwiZW5kUmVhZGFibGUiLCJvbkVvZkNodW5rIiwid3JpdGUiLCJ1bnNoaWZ0IiwicmVhZCIsIm1heWJlUmVhZE1vcmVfIiwibWF5YmVSZWFkTW9yZSIsIm5lZWRNb3JlRGF0YSIsInNldEVuY29kaW5nIiwiZW5jIiwiaG93TXVjaFRvUmVhZCIsInJvdW5kVXBUb05leHRQb3dlck9mMiIsImVtaXRSZWFkYWJsZV8iLCJmbG93IiwiZW1pdERhdGFFdmVudHMiLCJwaXBlT25SZWFkYWJsZSIsInN0YXJ0UGF1c2VkIiwicGF1c2VkIiwicGlwZSIsIm9uIiwiYWRkTGlzdGVuZXIiLCJwYXVzZSIsInJlc3VtZSIsImZyb21MaXN0Iiwic2hpZnQiLCJjcHkiLCJjb3B5Iiwibk9yaWciLCJkb1JlYWQiLCJfcmVhZCIsInBpcGVPcHRzIiwiZW5kRm4iLCJzdGRvdXQiLCJzdGRlcnIiLCJjbGVhbnVwIiwib251bnBpcGUiLCJvbmRyYWluIiwicGlwZU9uRHJhaW4iLCJyZW1vdmVMaXN0ZW5lciIsIm9uY2xvc2UiLCJvbmZpbmlzaCIsIm9uZXJyb3IiLCJuZWVkRHJhaW4iLCJ1bnBpcGUiLCJfZXZlbnRzIiwiZXJyb3IiLCJkZXN0cyIsImV2Iiwid3JhcCIsIl9mcm9tTGlzdCIsImlzQnVmZmVyRW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYXNzZXJ0RW5jb2RpbmciLCJzdXJyb2dhdGVTaXplIiwiZGV0ZWN0SW5jb21wbGV0ZUNoYXIiLCJ1dGYxNkRldGVjdEluY29tcGxldGVDaGFyIiwiYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXIiLCJwYXNzVGhyb3VnaFdyaXRlIiwiY2hhckJ1ZmZlciIsImNoYXJSZWNlaXZlZCIsImNoYXJMZW5ndGgiLCJjaGFyU3RyIiwiYXZhaWxhYmxlIiwiY2hhckNvZGUiLCJjciIsIldyaXRhYmxlU3RhdGUiLCJXcml0ZVJlcSIsImVuZGluZyIsImZpbmlzaGVkIiwibm9EZWNvZGUiLCJkZWNvZGVTdHJpbmdzIiwid3JpdGluZyIsImJ1ZmZlclByb2Nlc3NpbmciLCJvbndyaXRlIiwid3JpdGVjYiIsIndyaXRlbGVuIiwib253cml0ZVN0YXRlVXBkYXRlIiwiZXJyb3JFbWl0dGVkIiwib253cml0ZUVycm9yIiwibmVlZEZpbmlzaCIsImVudHJ5IiwiZG9Xcml0ZSIsImNsZWFyQnVmZmVyIiwiYWZ0ZXJXcml0ZSIsIl93cml0ZSIsIm9ud3JpdGVEcmFpbiIsImZpbmlzaE1heWJlIiwibmVlZCIsIndyaXRlQWZ0ZXJFbmQiLCJ2YWxpZCIsInZhbGlkQ2h1bmsiLCJkZWNvZGVDaHVuayIsIndyaXRlT3JCdWZmZXIiLCJlbmRXcml0YWJsZSIsIlRyYW5zZm9ybSIsIlRyYW5zZm9ybVN0YXRlIiwiYWZ0ZXJUcmFuc2Zvcm0iLCJkYXRhIiwiX3RyYW5zZm9ybVN0YXRlIiwidHJhbnNmb3JtaW5nIiwid3JpdGVjaHVuayIsInJzIiwibmVlZFRyYW5zZm9ybSIsIl9mbHVzaCIsImRvbmUiLCJ3cyIsIl90cmFuc2Zvcm0iLCJ3cml0ZWVuY29kaW5nIiwiRUVsaXN0ZW5lckNvdW50IiwiT3VyVWludDhBcnJheSIsIlVpbnQ4QXJyYXkiLCJkZWJ1Z1V0aWwiLCJkZWJ1ZyIsImRlYnVnbG9nIiwiQnVmZmVyTGlzdCIsImRlc3Ryb3lJbXBsIiwia1Byb3h5RXZlbnRzIiwiaXNEdXBsZXgiLCJyZWFkYWJsZU9iamVjdE1vZGUiLCJyZWFkYWJsZUh3bSIsInJlYWRhYmxlSGlnaFdhdGVyTWFyayIsImRlZmF1bHRId20iLCJyZXN1bWVTY2hlZHVsZWQiLCJkZXN0cm95Iiwic2tpcENodW5rQ2hlY2siLCJnZXRQcm90b3R5cGVPZiIsIl91aW50OEFycmF5VG9CdWZmZXIiLCJhZGRDaHVuayIsIl91bmRlc3Ryb3kiLCJ1bmRlc3Ryb3kiLCJpc1BhdXNlZCIsImNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrIiwiblJlYWRpbmdOZXh0VGljayIsInJlc3VtZV8iLCJjbGVhciIsImhhc1N0cmluZ3MiLCJuYiIsInRhaWwiLCJjb3B5RnJvbUJ1ZmZlclN0cmluZyIsImNvcHlGcm9tQnVmZmVyIiwiZnJvbUxpc3RQYXJ0aWFsIiwiZW5kUmVhZGFibGVOVCIsInVucGlwZUluZm8iLCJoYXNVbnBpcGVkIiwib25kYXRhIiwiY2xlYW5lZFVwIiwiaW5jcmVhc2VkQXdhaXREcmFpbiIsImV2ZW50IiwicHJlcGVuZExpc3RlbmVyIiwiX3RoaXMiLCJlbWl0RXJyb3JOVCIsInJlYWRhYmxlRGVzdHJveWVkIiwid3JpdGFibGVEZXN0cm95ZWQiLCJDb3JrZWRSZXF1ZXN0IiwiZmluaXNoIiwiY29ya1JlcSIsInBlbmRpbmdjYiIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIm9uQ29ya2VkRmluaXNoIiwiYXN5bmNXcml0ZSIsImJyb3dzZXIiLCJzZXRJbW1lZGlhdGUiLCJpbnRlcm5hbFV0aWwiLCJkZXByZWNhdGUiLCJyZWFsSGFzSW5zdGFuY2UiLCJub3AiLCJ3cml0YWJsZU9iamVjdE1vZGUiLCJ3cml0YWJsZUh3bSIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsImZpbmFsQ2FsbGVkIiwiY29ya2VkIiwiYnVmZmVyZWRSZXF1ZXN0IiwibGFzdEJ1ZmZlcmVkUmVxdWVzdCIsInByZWZpbmlzaGVkIiwiYnVmZmVyZWRSZXF1ZXN0Q291bnQiLCJ3cml0ZXYiLCJfd3JpdGV2IiwiZmluYWwiLCJfZmluYWwiLCJob2xkZXIiLCJhbGxCdWZmZXJzIiwiaXNCdWYiLCJjYWxsRmluYWwiLCJwcmVmaW5pc2giLCJnZXRCdWZmZXIiLCJvdXQiLCJfIiwiaGFzSW5zdGFuY2UiLCJuZXdDaHVuayIsImxhc3QiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwibmVuYyIsInJldHJpZWQiLCJfbm9ybWFsaXplRW5jb2RpbmciLCJub3JtYWxpemVFbmNvZGluZyIsInV0ZjE2VGV4dCIsInV0ZjE2RW5kIiwiZmlsbExhc3QiLCJ1dGY4RmlsbExhc3QiLCJiYXNlNjRUZXh0IiwiYmFzZTY0RW5kIiwic2ltcGxlV3JpdGUiLCJzaW1wbGVFbmQiLCJsYXN0TmVlZCIsImxhc3RUb3RhbCIsImxhc3RDaGFyIiwidXRmOENoZWNrQnl0ZSIsImJ5dGUiLCJ1dGY4Q2hlY2tFeHRyYUJ5dGVzIiwidG90YWwiLCJ1dGY4Q2hlY2tJbmNvbXBsZXRlIiwiX3RoaXMyIiwiZXJyMiIsImJhc2U2NFZMUSIsIkFycmF5U2V0IiwiTWFwcGluZ0xpc3QiLCJTb3VyY2VNYXBHZW5lcmF0b3IiLCJfZmlsZSIsIl9zb3VyY2VSb290IiwiX3NraXBWYWxpZGF0aW9uIiwiX3NvdXJjZXMiLCJfbmFtZXMiLCJfbWFwcGluZ3MiLCJfc291cmNlc0NvbnRlbnRzIiwiX3ZlcnNpb24iLCJmcm9tU291cmNlTWFwIiwiYVNvdXJjZU1hcENvbnN1bWVyIiwiZ2VuZXJhdG9yIiwiZmlsZSIsImVhY2hNYXBwaW5nIiwibWFwcGluZyIsIm5ld01hcHBpbmciLCJnZW5lcmF0ZWQiLCJvcmlnaW5hbCIsImFkZE1hcHBpbmciLCJzb3VyY2VzIiwic291cmNlRmlsZSIsInNvdXJjZVJlbGF0aXZlIiwiYWRkIiwic291cmNlQ29udGVudEZvciIsInNldFNvdXJjZUNvbnRlbnQiLCJfdmFsaWRhdGVNYXBwaW5nIiwiYVNvdXJjZUZpbGUiLCJhU291cmNlQ29udGVudCIsImFwcGx5U291cmNlTWFwIiwiYVNvdXJjZU1hcFBhdGgiLCJuZXdTb3VyY2VzIiwibmV3TmFtZXMiLCJ1bnNvcnRlZEZvckVhY2giLCJvcmlnaW5hbFBvc2l0aW9uRm9yIiwiYUdlbmVyYXRlZCIsImFPcmlnaW5hbCIsImFTb3VyY2UiLCJfc2VyaWFsaXplTWFwcGluZ3MiLCJuYW1lSWR4Iiwic291cmNlSWR4IiwicHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4iLCJwcmV2aW91c0dlbmVyYXRlZExpbmUiLCJwcmV2aW91c09yaWdpbmFsQ29sdW1uIiwicHJldmlvdXNPcmlnaW5hbExpbmUiLCJwcmV2aW91c05hbWUiLCJwcmV2aW91c1NvdXJjZSIsIm1hcHBpbmdzIiwidG9BcnJheSIsIl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50IiwiYVNvdXJjZXMiLCJhU291cmNlUm9vdCIsInRvSlNPTiIsIm5hbWVzIiwic291cmNlc0NvbnRlbnQiLCJiYXNlNjQiLCJhVmFsdWUiLCJkaWdpdCIsImVuY29kZWQiLCJ2bHEiLCJ0b1ZMUVNpZ25lZCIsIlZMUV9CQVNFIiwiYUluZGV4IiwiYU91dFBhcmFtIiwiY29udGludWF0aW9uIiwic2hpZnRlZCIsInN0ckxlbiIsImhhc05hdGl2ZU1hcCIsIk1hcCIsIl9hcnJheSIsIl9zZXQiLCJmcm9tQXJyYXkiLCJhQXJyYXkiLCJhQWxsb3dEdXBsaWNhdGVzIiwic1N0ciIsImlzRHVwbGljYXRlIiwiaWR4IiwiYUlkeCIsImV4dGVuc2lvbnMiLCJwcmVmZXJlbmNlIiwiZGIiLCJleHRuYW1lIiwiRVhUUkFDVF9UWVBFX1JFR0VYUCIsIlRFWFRfVFlQRV9SRUdFWFAiLCJjaGFyc2V0IiwibWltZSIsImNoYXJzZXRzIiwibG9va3VwIiwiY29udGVudFR5cGUiLCJleHRlbnNpb24iLCJleHRzIiwibWV0YWRhdGFSZWdleCIsIm1hcmtkb3duIiwidHJpbW1lZCIsIm1ldGFkYXRhIiwibGFzdEtleSIsIm9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZVN5bWJvbEtleXMiLCJiYXNoIiwiZW52VmFycyIsImluc2lkZVN0cmluZyIsImVudmlyb25tZW50IiwicHVuY3R1YXRpb24iLCJzaGViYW5nIiwiY29tbWVudCIsInRvQmVDb3BpZWQiLCJzaGVsbCIsIm51bGwiLCJweXRob24iLCJkZWNvcmF0b3IiLCJweSIsImNvbnN0cnVjdG9yIiwibGFiZWwiLCJyZWZyYWN0b3JKc3giLCJyZWZyYWN0b3JUeXBlc2NyaXB0IiwidHN4IiwiY2xvbmUiLCJmYWN0b3J5IiwiY2hhck1hcCIsImxvY2FsZXMiLCJsb2NhbGUiLCJyZXBsYWNlbWVudCIsInNsdWciLCJyZWR1Y2UiLCJjaCIsInJlbW92ZSIsImxvd2VyIiwic3RyaWN0IiwiY3VzdG9tTWFwIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyMiIsIl9hcnJheVdpdGhvdXRIb2xlcyIsIml0ZXIiLCJpdGVyYXRvciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJ4dGVuZCIsInVuaWZpZWQiLCJQcm9wVHlwZXMiLCJhZGRMaXN0TWV0YWRhdGEiLCJuYWl2ZUh0bWwiLCJkaXNhbGxvd05vZGUiLCJhc3RUb1JlYWN0Iiwid3JhcFRhYmxlUm93cyIsImdldERlZmluaXRpb25zIiwidXJpVHJhbnNmb3JtZXIiLCJkZWZhdWx0UmVuZGVyZXJzIiwiYWxsVHlwZXMiLCJSZWFjdE1hcmtkb3duIiwicGFyc2VyT3B0aW9ucyIsImFsbG93ZWRUeXBlcyIsImRpc2FsbG93ZWRUeXBlcyIsInJlbmRlcmVycyIsInBsdWdpbnMiLCJhcHBseVBhcnNlclBsdWdpbiIsInJhd0FzdCIsInJlbmRlclByb3BzIiwiZGVmaW5pdGlvbnMiLCJhc3RQbHVnaW5zIiwicmVtb3ZhbE1ldGhvZCIsInVud3JhcERpc2FsbG93ZWQiLCJvZlR5cGUiLCJhbGxvd05vZGUiLCJpZk5vdE1hdGNoIiwicmVuZGVySHRtbCIsImVzY2FwZUh0bWwiLCJza2lwSHRtbCIsImhhc0h0bWxQYXJzZXIiLCJIdG1sUGFyc2VyIiwiZGV0ZXJtaW5lQXN0UGx1Z2lucyIsInRyYW5zZm9ybWVkQXN0IiwicnVuU3luYyIsImFzdCIsInBsdWdpbiIsImRlZmF1bHRQcm9wcyIsInNvdXJjZVBvcyIsInJhd1NvdXJjZVBvcyIsInRyYW5zZm9ybUxpbmtVcmkiLCJwcm9wVHlwZXMiLCJhcnJheU9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJsaW5rVGFyZ2V0IiwidHJhbnNmb3JtSW1hZ2VVcmkiLCJhcnJheSIsIkxvY2FsZXMiLCJkZV9ERSIsImRheXMiLCJzaG9ydERheXMiLCJtb250aHMiLCJzaG9ydE1vbnRocyIsIkFNIiwiUE0iLCJhbSIsInBtIiwiZm9ybWF0cyIsImVuX0NBIiwib3JkaW5hbFN1ZmZpeGVzIiwiZW5fVVMiLCJlc19NWCIsImZyX0ZSIiwiaXRfSVQiLCJubF9OTCIsInB0X0JSIiwicnVfUlUiLCJ0cl9UUiIsInpoX0NOIiwiRGVmYXVsdExvY2FsZSIsImRlZmF1bHRTdHJmdGltZSIsIlN0cmZ0aW1lIiwiY3VzdG9tVGltZXpvbmVPZmZzZXQiLCJ1c2VVdGNUaW1lem9uZSIsIl9jYWNoZWREYXRlIiwiX2xvY2FsZSIsIl9jdXN0b21UaW1lem9uZU9mZnNldCIsIl91c2VVdGNCYXNlZERhdGUiLCJfY2FjaGVkRGF0ZVRpbWVzdGFtcCIsInN0cmZ0aW1lIiwiZGF0ZSIsInRpbWVzdGFtcCIsImdldFRpbWUiLCJ1dGNPZmZzZXQiLCJnZXRUaW1lc3RhbXBUb1V0Y09mZnNldEZvciIsIkRhdGUiLCJuZXdVVENPZmZzZXQiLCJjdXJyZW50VGltZXN0YW1wIiwiX3Byb2Nlc3NGb3JtYXQiLCJyZXN1bHRTdHJpbmciLCJwYWRkaW5nIiwiaXNJblNjb3BlIiwiZXh0ZW5kZWRUWiIsImN1cnJlbnRDaGFyQ29kZSIsIndhcm4iLCJnZXREYXkiLCJnZXRNb250aCIsInBhZFRpbGwyIiwiZ2V0RnVsbFllYXIiLCJnZXRIb3VycyIsImhvdXJzMTIiLCJwYWRUaWxsMyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwid2Vla051bWJlciIsInR6U3RyaW5nIiwiZ2V0RGF0ZSIsImRheSIsImNlaWwiLCJvcmRpbmFsIiwib2ZmIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXAiLCJob3VycyIsImFicyIsIm1pbnMiLCJsb2NhbGl6ZSIsImxvY2FsaXplQnlJZGVudGlmaWVyIiwibG9jYWxlSWRlbnRpZmllciIsInRpbWV6b25lIiwidXNlVXRjQmFzZWREYXRlIiwidGltZXpvbmVUeXBlIiwidXRjIiwibnVtYmVyVG9QYWQiLCJwYWRkaW5nQ2hhciIsImhvdXIiLCJmaXJzdFdlZWtkYXkiLCJ3ZWVrZGF5IiwiZmlyc3REYXlPZlllYXJVdGMiLCJVVEMiLCJkYXRlVXRjIiwid2Vla051bSIsImlpIiwiY29uc29sZSIsImV2YWwiLCJ0cnVuY2F0ZSIsImlsbGVnYWxSZSIsImNvbnRyb2xSZSIsInJlc2VydmVkUmUiLCJ3aW5kb3dzUmVzZXJ2ZWRSZSIsIndpbmRvd3NUcmFpbGluZ1JlIiwic2FuaXRpemUiLCJzYW5pdGl6ZWQiLCJBcmd1bWVudFBhcnNlciIsIkNvbnN0IiwiUGF0aCIsIkZVTkNUSU9OX0lERU5USVRZIiwiYWRkSGVscCIsImJhc2VuYW1lIiwiZXBpbG9nIiwiZm9ybWF0dGVyQ2xhc3MiLCJmcm9tZmlsZVByZWZpeENoYXJzIiwiX3Bvc2l0aW9uYWxzIiwiX29wdGlvbmFscyIsIl9zdWJwYXJzZXJzIiwiZGVmYXVsdFByZWZpeCIsImRlZmF1bHRLZXkiLCJhZGRTdWJwYXJzZXJzIiwicGFyc2VyQ2xhc3MiLCJfZ2V0Rm9ybWF0dGVyIiwiX2dldFBvc2l0aW9uYWxBY3Rpb25zIiwiX2dldE9wdGlvbmFsQWN0aW9ucyIsInBhcnNlQXJncyIsInBhcnNlS25vd25BcmdzIiwiX2dldFZhbHVlIiwiX3BhcnNlS25vd25BcmdzIiwiYXJnU3RyaW5ncyIsImV4dHJhcyIsIl9yZWFkQXJnc0Zyb21GaWxlcyIsImFjdGlvbkNvbmZsaWN0cyIsIm11dGV4QWN0aW9uIiwib3B0aW9uU3RyaW5nSW5kaWNlcyIsImFyZ1N0cmluZ1BhdHRlcm5QYXJ0cyIsImFyZ1N0cmluZyIsImFyZ1N0cmluZ0luZGV4Iiwib3B0aW9uVHVwbGUiLCJfcGFyc2VPcHRpb25hbCIsImFyZ1N0cmluZ3NQYXR0ZXJuIiwic2VlbkFjdGlvbnMiLCJzZWVuTm9uRGVmYXVsdEFjdGlvbnMiLCJ0YWtlQWN0aW9uIiwiYXJndW1lbnRTdHJpbmdzIiwiYXJndW1lbnRWYWx1ZXMiLCJfZ2V0VmFsdWVzIiwiYWN0aW9uQ29uZmxpY3QiLCJjb25zdW1lT3B0aW9uYWwiLCJzdGFydEluZGV4IiwiYXJnQ291bnQiLCJzdG9wIiwiZXhwbGljaXRBcmciLCJhY3Rpb25UdXBsZXMiLCJzZWxlY3RlZFBhdHRlcm5zIiwiX21hdGNoQXJndW1lbnQiLCJuZXdFeHBsaWNpdEFyZyIsIm9wdGlvbmFsc01hcCIsImNvbnN1bWVQb3NpdGlvbmFscyIsInNlbGVjdGVkUGF0dGVybiIsImFyZ0NvdW50cyIsIl9tYXRjaEFyZ3VtZW50c1BhcnRpYWwiLCJwb3NpdGlvbmFsc0VuZEluZGV4IiwibmV4dE9wdGlvblN0cmluZ0luZGV4IiwibWF4T3B0aW9uU3RyaW5nSW5kZXgiLCJzdG9wSW5kZXgiLCJtc2ciLCJmcyIsIm5ld0FyZ1N0cmluZ3MiLCJhcmdzdHJzIiwiZmlsZW5hbWUiLCJyZWFkRmlsZVN5bmMiLCJhcmdMaW5lIiwiY29udmVydEFyZ0xpbmVUb0FyZ3MiLCJyZWdleHBBcmdTdHJpbmdzIiwicmVnZXhwTmFyZ3MiLCJfZ2V0TmFyZ3NQYXR0ZXJuIiwibWF0Y2hlcyIsImFjdGlvblNsaWNlIiwiZ2V0TGVuZ3RoIiwiYXJnRXhwbGljaXQiLCJvcHRpb25UdXBsZXMiLCJfZ2V0T3B0aW9uVHVwbGVzIiwic2VhcmNoIiwib3B0aW9uUHJlZml4IiwiYWN0aW9uT3B0aW9uU3RyaW5nIiwib3B0aW9uU3RyaW5nU3BsaXQiLCJvcHRpb25QcmVmaXhTaG9ydCIsImFyZ0V4cGxpY2l0U2hvcnQiLCJhcnJheUVsZW1lbnQiLCJfY2hlY2tWYWx1ZSIsImZvcm1hdFVzYWdlIiwiYWN0aW9uR3JvdXAiLCJGb3JtYXR0ZXJDbGFzcyIsInByaW50VXNhZ2UiLCJfcHJpbnRNZXNzYWdlIiwicHJpbnRIZWxwIiwiZXhpdCIsInN0YXR1cyIsIml0ZW1zIiwiQ2hvaWNlc1BzZXVkb0FjdGlvbiIsIl9wcm9nUHJlZml4IiwiX3BhcnNlckNsYXNzIiwiX25hbWVQYXJzZXJNYXAiLCJfY2hvaWNlc0FjdGlvbnMiLCJhZGRQYXJzZXIiLCJjaG9pY2VBY3Rpb24iLCJwYXJzZXJOYW1lIiwiZm9yIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInJlZnMiLCJ1cGRhdGVyIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJwb3AiLCJrZXlQcmVmaXgiLCJWIiwiZXNjYXBlIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJvbmx5IiwiQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwiY29tcGFyZSIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInNjaGVtYSIsImh0bWwiLCJ4bGluayIsInhtbCIsInhtbG5zIiwiYXJpYSIsInhMaW5rQWN0dWF0ZSIsInhMaW5rQXJjUm9sZSIsInhMaW5rSHJlZiIsInhMaW5rUm9sZSIsInhMaW5rU2hvdyIsInhMaW5rVGl0bGUiLCJ4TGlua1R5cGUiLCJ4bWxMYW5nIiwieG1sQmFzZSIsInhtbFNwYWNlIiwiY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtIiwieG1sbnN4bGluayIsInhtbG5zWExpbmsiLCJhcmlhQWN0aXZlRGVzY2VuZGFudCIsImFyaWFBdG9taWMiLCJhcmlhQXV0b0NvbXBsZXRlIiwiYXJpYUJ1c3kiLCJhcmlhQ2hlY2tlZCIsImFyaWFDb2xDb3VudCIsImFyaWFDb2xJbmRleCIsImFyaWFDb2xTcGFuIiwiYXJpYUNvbnRyb2xzIiwiYXJpYUN1cnJlbnQiLCJhcmlhRGVzY3JpYmVkQnkiLCJhcmlhRGV0YWlscyIsImFyaWFEaXNhYmxlZCIsImFyaWFEcm9wRWZmZWN0IiwiYXJpYUVycm9yTWVzc2FnZSIsImFyaWFFeHBhbmRlZCIsImFyaWFGbG93VG8iLCJhcmlhR3JhYmJlZCIsImFyaWFIYXNQb3B1cCIsImFyaWFIaWRkZW4iLCJhcmlhSW52YWxpZCIsImFyaWFLZXlTaG9ydGN1dHMiLCJhcmlhTGFiZWwiLCJhcmlhTGFiZWxsZWRCeSIsImFyaWFMZXZlbCIsImFyaWFMaXZlIiwiYXJpYU1vZGFsIiwiYXJpYU11bHRpTGluZSIsImFyaWFNdWx0aVNlbGVjdGFibGUiLCJhcmlhT3JpZW50YXRpb24iLCJhcmlhT3ducyIsImFyaWFQbGFjZWhvbGRlciIsImFyaWFQb3NJblNldCIsImFyaWFQcmVzc2VkIiwiYXJpYVJlYWRPbmx5IiwiYXJpYVJlbGV2YW50IiwiYXJpYVJlcXVpcmVkIiwiYXJpYVJvbGVEZXNjcmlwdGlvbiIsImFyaWFSb3dDb3VudCIsImFyaWFSb3dJbmRleCIsImFyaWFSb3dTcGFuIiwiYXJpYVNlbGVjdGVkIiwiYXJpYVNldFNpemUiLCJhcmlhU29ydCIsImFyaWFWYWx1ZU1heCIsImFyaWFWYWx1ZU1pbiIsImFyaWFWYWx1ZU5vdyIsImFyaWFWYWx1ZVRleHQiLCJyb2xlIiwiYWNjZXB0Y2hhcnNldCIsImNsYXNzbmFtZSIsImh0bWxmb3IiLCJodHRwZXF1aXYiLCJhYmJyIiwiYWNjZXB0IiwiYWNjZXB0Q2hhcnNldCIsImFjY2Vzc0tleSIsImFsbG93IiwiYWxsb3dGdWxsU2NyZWVuIiwiYWxsb3dQYXltZW50UmVxdWVzdCIsImFsbG93VXNlck1lZGlhIiwiYWx0IiwiYXMiLCJhc3luYyIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvbXBsZXRlIiwiYXV0b0ZvY3VzIiwiYXV0b1BsYXkiLCJjYXB0dXJlIiwiY2hhclNldCIsImNoZWNrZWQiLCJjaXRlIiwiY29scyIsImNvbFNwYW4iLCJjb250ZW50RWRpdGFibGUiLCJjb250cm9scyIsImNvbnRyb2xzTGlzdCIsImNvb3JkcyIsImNyb3NzT3JpZ2luIiwiZGF0ZVRpbWUiLCJkZWNvZGluZyIsImRlZmF1bHQiLCJkZWZlciIsImRpciIsImRpck5hbWUiLCJkaXNhYmxlZCIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jVHlwZSIsImVudGVyS2V5SGludCIsImZvcm0iLCJmb3JtQWN0aW9uIiwiZm9ybUVuY1R5cGUiLCJmb3JtTWV0aG9kIiwiZm9ybU5vVmFsaWRhdGUiLCJmb3JtVGFyZ2V0IiwiaGVhZGVycyIsImhlaWdodCIsImhpZGRlbiIsImhpZ2giLCJocmVmIiwiaHJlZkxhbmciLCJodG1sRm9yIiwiaHR0cEVxdWl2IiwiaW1hZ2VTaXplcyIsImltYWdlU3JjU2V0IiwiaW5wdXRNb2RlIiwiaW50ZWdyaXR5IiwiaXMiLCJpc01hcCIsIml0ZW1JZCIsIml0ZW1Qcm9wIiwiaXRlbVJlZiIsIml0ZW1TY29wZSIsIml0ZW1UeXBlIiwia2luZCIsImxhbmciLCJsb29wIiwibG93IiwibWFuaWZlc3QiLCJtYXhMZW5ndGgiLCJtZWRpYSIsIm1pbkxlbmd0aCIsIm11bHRpcGxlIiwibXV0ZWQiLCJub01vZHVsZSIsIm5vVmFsaWRhdGUiLCJvbkFib3J0Iiwib25BZnRlclByaW50Iiwib25BdXhDbGljayIsIm9uQmVmb3JlUHJpbnQiLCJvbkJlZm9yZVVubG9hZCIsIm9uQmx1ciIsIm9uQ2FuY2VsIiwib25DYW5QbGF5Iiwib25DYW5QbGF5VGhyb3VnaCIsIm9uQ2hhbmdlIiwib25DbGljayIsIm9uQ2xvc2UiLCJvbkNvbnRleHRNZW51Iiwib25Db3B5Iiwib25DdWVDaGFuZ2UiLCJvbkN1dCIsIm9uRGJsQ2xpY2siLCJvbkRyYWciLCJvbkRyYWdFbmQiLCJvbkRyYWdFbnRlciIsIm9uRHJhZ0V4aXQiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ092ZXIiLCJvbkRyYWdTdGFydCIsIm9uRHJvcCIsIm9uRHVyYXRpb25DaGFuZ2UiLCJvbkVtcHRpZWQiLCJvbkVuZGVkIiwib25FcnJvciIsIm9uRm9jdXMiLCJvbkZvcm1EYXRhIiwib25IYXNoQ2hhbmdlIiwib25JbnB1dCIsIm9uSW52YWxpZCIsIm9uS2V5RG93biIsIm9uS2V5UHJlc3MiLCJvbktleVVwIiwib25MYW5ndWFnZUNoYW5nZSIsIm9uTG9hZCIsIm9uTG9hZGVkRGF0YSIsIm9uTG9hZGVkTWV0YWRhdGEiLCJvbkxvYWRFbmQiLCJvbkxvYWRTdGFydCIsIm9uTWVzc2FnZSIsIm9uTWVzc2FnZUVycm9yIiwib25Nb3VzZURvd24iLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VPdXQiLCJvbk1vdXNlT3ZlciIsIm9uTW91c2VVcCIsIm9uT2ZmbGluZSIsIm9uT25saW5lIiwib25QYWdlSGlkZSIsIm9uUGFnZVNob3ciLCJvblBhc3RlIiwib25QYXVzZSIsIm9uUGxheSIsIm9uUGxheWluZyIsIm9uUG9wU3RhdGUiLCJvblByb2dyZXNzIiwib25SYXRlQ2hhbmdlIiwib25SZWplY3Rpb25IYW5kbGVkIiwib25SZXNldCIsIm9uUmVzaXplIiwib25TY3JvbGwiLCJvblNlY3VyaXR5UG9saWN5VmlvbGF0aW9uIiwib25TZWVrZWQiLCJvblNlZWtpbmciLCJvblNlbGVjdCIsIm9uU2xvdENoYW5nZSIsIm9uU3RhbGxlZCIsIm9uU3RvcmFnZSIsIm9uU3VibWl0Iiwib25TdXNwZW5kIiwib25UaW1lVXBkYXRlIiwib25Ub2dnbGUiLCJvblVuaGFuZGxlZFJlamVjdGlvbiIsIm9uVW5sb2FkIiwib25Wb2x1bWVDaGFuZ2UiLCJvbldhaXRpbmciLCJvbldoZWVsIiwib3BlbiIsIm9wdGltdW0iLCJwaW5nIiwicGxheXNJbmxpbmUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicmVhZE9ubHkiLCJyZWZlcnJlclBvbGljeSIsInJlbCIsInJldmVyc2VkIiwicm93cyIsInJvd1NwYW4iLCJzYW5kYm94Iiwic2NvcGUiLCJzY29wZWQiLCJzZWFtbGVzcyIsInNlbGVjdGVkIiwic2hhcGUiLCJzaXplcyIsInNsb3QiLCJzcGFuIiwic3BlbGxDaGVjayIsInNyY0RvYyIsInNyY0xhbmciLCJzcmNTZXQiLCJzdGVwIiwic3R5bGUiLCJ0YWJJbmRleCIsInRyYW5zbGF0ZSIsInR5cGVNdXN0TWF0Y2giLCJ1c2VNYXAiLCJhbGlnbiIsImFMaW5rIiwiYXJjaGl2ZSIsImF4aXMiLCJiYWNrZ3JvdW5kIiwiYmdDb2xvciIsImJvcmRlciIsImJvcmRlckNvbG9yIiwiYm90dG9tTWFyZ2luIiwiY2VsbFBhZGRpbmciLCJjZWxsU3BhY2luZyIsImNoYXIiLCJjaGFyT2ZmIiwiY2xhc3NJZCIsImNvZGVCYXNlIiwiY29kZVR5cGUiLCJjb2xvciIsImNvbXBhY3QiLCJkZWNsYXJlIiwiZmFjZSIsImZyYW1lIiwiZnJhbWVCb3JkZXIiLCJoU3BhY2UiLCJsZWZ0TWFyZ2luIiwibG9uZ0Rlc2MiLCJsb3dTcmMiLCJtYXJnaW5IZWlnaHQiLCJtYXJnaW5XaWR0aCIsIm5vUmVzaXplIiwibm9IcmVmIiwibm9TaGFkZSIsIm5vV3JhcCIsInByb2ZpbGUiLCJwcm9tcHQiLCJyZXYiLCJyaWdodE1hcmdpbiIsInNjcm9sbGluZyIsInN0YW5kYnkiLCJzdW1tYXJ5IiwidG9wTWFyZ2luIiwidmFsdWVUeXBlIiwidkFsaWduIiwidkxpbmsiLCJ2U3BhY2UiLCJhbGxvd1RyYW5zcGFyZW5jeSIsImF1dG9Db3JyZWN0IiwiYXV0b1NhdmUiLCJkaXNhYmxlUGljdHVyZUluUGljdHVyZSIsImRpc2FibGVSZW1vdGVQbGF5YmFjayIsInJlc3VsdHMiLCJzZWN1cml0eSIsInVuc2VsZWN0YWJsZSIsImZpbmQiLCJwYXJzZVNlbGVjdG9yIiwic3BhY2VzIiwiY29tbWFzIiwiZGVmYXVsdFRhZ05hbWUiLCJjYXNlU2Vuc2l0aXZlIiwiYWRqdXN0IiwiY3JlYXRlQWRqdXN0TWFwIiwidGFnTmFtZSIsImlzQ2hpbGRyZW4iLCJhZGRQcm9wZXJ0eSIsImFkZENoaWxkIiwicGFyc2VQcmltaXRpdmUiLCJwYXJzZVByaW1pdGl2ZXMiLCJpc05vZGUiLCJwb3NpdGl2ZU51bWJlciIsIk51bWJlciIsIlR5cGUiLCJkYXNoIiwiY2FtZWxjYXNlIiwiZGF0YXNldFRvUHJvcGVydHkiLCJjYXAiLCJrZWJhYiIsImRhdGFzZXRUb0F0dHJpYnV0ZSIsIiQwIiwic3VidmFsdWUiLCJ3aGl0ZVNwYWNlIiwicGFkTGVmdCIsInBhZFJpZ2h0IiwiYWxwaGFiZXRpY2FsIiwiY2hhcmFjdGVyRW50aXRpZXMiLCJfc2VsZiIsInVuaXF1ZUlkIiwib2JqSWQiLCJkZWVwQ2xvbmUiLCJ2aXNpdGVkIiwicmVkZWYiLCJyb290IiwidG9rZW4iLCJuZXdUb2tlbiIsIm9sZCIsIkRGUyIsInByb3BlcnR5VHlwZSIsImhpZ2hsaWdodEFsbCIsImhpZ2hsaWdodEFsbFVuZGVyIiwiZWxlbWVudCIsImVsZW1lbnRzIiwiaGlnaGxpZ2h0RWxlbWVudCIsIm5vZGVOYW1lIiwidGV4dENvbnRlbnQiLCJpbnNlcnRIaWdobGlnaHRlZENvZGUiLCJoaWdobGlnaHRlZENvZGUiLCJpbm5lckhUTUwiLCJXb3JrZXIiLCJ3b3JrZXIiLCJvbm1lc3NhZ2UiLCJldnQiLCJwb3N0TWVzc2FnZSIsImltbWVkaWF0ZUNsb3NlIiwidG9rZW5pemUiLCJtYXRjaEdyYW1tYXIiLCJzdHJhcnIiLCJzdGFydFBvcyIsIm9uZXNob3QiLCJwYXR0ZXJucyIsImxvb2tiZWhpbmRMZW5ndGgiLCJmbGFncyIsImRlbE51bSIsImFmdGVyIiwid3JhcHBlZCIsImFsbCIsImNhbGxiYWNrcyIsIm1hdGNoZWRTdHIiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2UiLCJzY3JpcHQiLCJjdXJyZW50U2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoYXNBdHRyaWJ1dGUiLCJyZWFkeVN0YXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsIldvcmtlckdsb2JhbFNjb3BlIiwicHJvbG9nIiwiZG9jdHlwZSIsImNkYXRhIiwiaW5jbHVkZWRDZGF0YUluc2lkZSIsImRlZiIsIm1hdGhtbCIsInN2ZyIsImF0cnVsZSIsImltcG9ydGFudCIsInNvdXJjZUtleXMiLCJjb25maWd1cmFibGUiLCJqc3giLCJzcHJlYWQiLCJzdHJpbmdpZnlUb2tlbiIsIndhbGtUb2tlbnMiLCJvcGVuZWRUYWdzIiwibm90VGFnTm9yQnJhY2UiLCJvcGVuZWRCcmFjZXMiLCJwbGFpblRleHQiLCJiYWlsIiwidmZpbGUiLCJ0cm91Z2giLCJwbGFpbiIsImF0dGFjaGVycyIsInRyYW5zZm9ybWVycyIsImZyb3plbiIsImZyZWV6ZUluZGV4IiwicHJvY2Vzc29yIiwiYXNzZXJ0VW5mcm96ZW4iLCJmcmVlemUiLCJhZGRQbHVnaW4iLCJhZGRMaXN0IiwiYWRkUHJlc2V0IiwiZG9jIiwiUGFyc2VyIiwiYXNzZXJ0UGFyc2VyIiwibmV3YWJsZSIsIkNvbXBpbGVyIiwiYXNzZXJ0Q29tcGlsZXIiLCJhc3NlcnROb2RlIiwiY29tcGlsZSIsImNvbXBsZXRlIiwiYXNzZXJ0RG9uZSIsInByb2Nlc3NTeW5jIiwiZGVzdGluYXRpb24iLCJ0cmFuc2Zvcm1lciIsIkluZmluaXR5IiwiUHJvbWlzZSIsImV4ZWN1dG9yIiwicmVzb2x2ZSIsInJlamVjdCIsInBpcGVsaW5lIiwiY29udGVudHMiLCJhc3luY05hbWUiLCJoYXNPd24iLCJ0b1N0ciIsImdPUEQiLCJpc1BsYWluT2JqZWN0IiwiaGFzT3duQ29uc3RydWN0b3IiLCJoYXNJc1Byb3RvdHlwZU9mIiwic2V0UHJvcGVydHkiLCJuZXdWYWx1ZSIsImdldFByb3BlcnR5IiwiY29weUlzQXJyYXkiLCJkZWVwIiwiVk1lc3NhZ2UiLCJWRmlsZSIsIm9yaWdpbiIsImZpbGVQYXRoIiwiZmF0YWwiLCJmYWlsIiwiVk1lc3NhZ2VQcm90b3R5cGUiLCJyYW5nZSIsImxvY2F0aW9uIiwicGFyc2VPcmlnaW4iLCJzdGFjayIsInJ1bGVJZCIsInBvaW50IiwiaGlzdG9yeSIsImN3ZCIsImFzc2VydFBhcnQiLCJhc3NlcnROb25FbXB0eSIsImFzc2VydFBhdGgiLCJkaXJuYW1lIiwiZXh0Iiwic3RlbSIsIm5wYXRoIiwibkZpbGVOYW1lIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJmbnMiLCJtaWRkbGV3YXJlIiwiaW52b2tlZCIsInRoZW4iLCJ1bmhlcml0IiwiTG9jYWwiLCJTdXBlciIsIk9mIiwiRnJvbSIsInBhcmFtZXRlcnMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwiVGVtcEN0b3IiLCJ0b2dnbGUiLCJ2ZmlsZUxvY2F0aW9uIiwidW5lc2NhcGUiLCJ0b2tlbml6ZXIiLCJzZXRPcHRpb25zIiwiaW5MaXN0IiwiaW5CbG9jayIsImluTGluayIsImF0U3RhcnQiLCJ0b09mZnNldCIsImV4aXRTdGFydCIsImVudGVyTGlzdCIsImVudGVyTGluayIsImVudGVyQmxvY2siLCJpbnRlcnJ1cHRQYXJhZ3JhcGgiLCJpbnRlcnJ1cHRMaXN0IiwiaW50ZXJydXB0QmxvY2txdW90ZSIsImJsb2NrVG9rZW5pemVycyIsIm5ld2xpbmUiLCJpbmRlbnRlZENvZGUiLCJmZW5jZWRDb2RlIiwiYmxvY2txdW90ZSIsImF0eEhlYWRpbmciLCJ0aGVtYXRpY0JyZWFrIiwic2V0ZXh0SGVhZGluZyIsImZvb3Rub3RlIiwidGFibGUiLCJwYXJhZ3JhcGgiLCJpbmxpbmVUb2tlbml6ZXJzIiwiYXV0b0xpbmsiLCJzdHJvbmciLCJlbXBoYXNpcyIsImRlbGV0aW9uIiwiYnJlYWsiLCJibG9ja01ldGhvZHMiLCJpbmxpbmVNZXRob2RzIiwidG9rZW5pemVCbG9jayIsInRva2VuaXplSW5saW5lIiwidG9rZW5pemVGYWN0b3J5Iiwib2Zmc2V0VG9Qb3NpdGlvbkZhY3RvcnkiLCJpbmRpY2VzIiwicG9zaXRpb25Ub09mZnNldEZhY3RvcnkiLCJ0b1Bvc2l0aW9uIiwiZW50aXRpZXMiLCJvZmZzZXRzIiwiaGFuZGxlciIsIm1hdGNoZWQiLCJ2YWx1ZUxlbmd0aCIsIm1ldGhvZHMiLCJlYXQiLCJ1cGRhdGVQb3NpdGlvbiIsIm9ubHlBdFN0YXJ0Iiwibm90SW5MaXN0Iiwibm90SW5CbG9jayIsIm5vdEluTGluayIsImVvZiIsIlBvc2l0aW9uIiwiaW5kZW50YXRpb24iLCJnZXRPZmZzZXQiLCJjb21iaW5lZCIsInZhbGlkYXRlRWF0IiwicmVzZXQiLCJNRVJHRUFCTEVfTk9ERVMiLCJtZXJnZWFibGUiLCJlc2NhcGVzIiwicmVtb3ZlUG9zaXRpb24iLCJFWFBSRVNTSU9OX0xJTkVfQlJFQUtTIiwiaGFyZCIsInNvZnQiLCJmb3JjZSIsImNvbnZlcnQiLCJvbmUiLCJzdWJyZXN1bHQiLCJ0b1Jlc3VsdCIsInR5cGVGYWN0b3J5Iiwib2siLCJhbnlGYWN0b3J5IiwibWF0Y2hlc0ZhY3RvcnkiLCJjb252ZXJ0QWxsIiwid2hpdGVzcGFjZSIsInNpbGVudCIsImJsYW5rUXVldWUiLCJzdWJ2YWx1ZVF1ZXVlIiwiY29udGVudFF1ZXVlIiwiQ09ERV9JTkRFTlQiLCJmZW5jZUNvdW50IiwibWFya2VyIiwiZmxhZyIsImV4ZGVudGVkQ29udGVudCIsImNsb3NpbmciLCJleGRlbnRlZENsb3NpbmciLCJpbnRlcnJ1cHQiLCJuZXh0SW5kZXgiLCJwcmVmaXhlZCIsImN1cnJlbnRMaW5lIiwiaW5kZW50cyIsIm1hcmtlckNvdW50IiwiZ2V0SW5kZW50IiwicmVtb3ZlSW5kZW50IiwibWFya2VycyIsIm9yZGVyZWQiLCJjdXJyZW50TWFya2VyIiwicHJldkVtcHR5IiwiZW1wdHkiLCJhbGxMaW5lcyIsImVtcHR5TGluZXMiLCJlbnRlclRvcCIsImV4aXRCbG9ja3F1b3RlIiwiaXNMb29zZSIsImluZGVudGVkIiwiaW50ZXJ1cHRvcnMiLCJMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTIiwiTElTVF9PUkRFUkVEX01BUktFUlMiLCJMSVNUX1VOT1JERVJFRF9NQVJLRVJTIiwiVEFCX1NJWkUiLCJ0cmFpbCIsImxvb3NlIiwibGlzdEl0ZW0iLCJFWFBSRVNTSU9OX0xPT1NFX0xJU1RfSVRFTSIsIkVYUFJFU1NJT05fVEFTS19JVEVNIiwiRVhQUkVTU0lPTl9CVUxMRVQiLCJFWFBSRVNTSU9OX1BFREFOVElDX0JVTExFVCIsIkVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQiLCJ0YXNrIiwicGVkYW50aWNMaXN0SXRlbSIsIm5vcm1hbExpc3RJdGVtIiwicmVwbGFjZXIiLCJidWxsZXQiLCJ0cmltbWVkTGluZXMiLCIkMSIsIiQyIiwiJDMiLCIkNCIsIm1heGltdW0iLCJtaW5JbmRlbnQiLCJtYXRyaXgiLCJTRVRFWFRfTUFSS0VSUyIsInNlcXVlbmNlIiwic2VxdWVuY2VzIiwiZm9vdG5vdGVEZWZpbml0aW9uIiwiRVhQUkVTU0lPTl9JTklUSUFMX1RBQiIsInN1YnF1ZXVlIiwiaWRlbnRpZmllciIsIkNfQlJBQ0tFVF9PUEVOIiwiYmVmb3JlVVJMIiwiYmVmb3JlVGl0bGUiLCJpc0VuY2xvc2VkVVJMQ2hhcmFjdGVyIiwiaXNVbmNsb3NlZFVSTENoYXJhY3RlciIsImFsaWdubWVudHMiLCJhbGlnbm1lbnQiLCJyb3ciLCJoYXNEYXNoIiwiY2VsbCIsInByZWFtYmxlIiwib3BlbmluZyIsImxpbmVDb3VudCIsImxpbmVJbmRleCIsInBpcGVJbmRleCIsImZpcnN0IiwidHJpbVRyYWlsaW5nTGluZXMiLCJsb2NhdGUiLCJsb2NhdG9yIiwiTUFJTFRPX0xFTkdUSCIsImhhc0F0Q2hhcmFjdGVyIiwiUFJPVE9DT0xTIiwiUFJPVE9DT0xTX0xFTkdUSCIsInByb3RvY29sIiwicGFyZW5Db3VudCIsIm5leHRDaGFyYWN0ZXIiLCJpbmxpbmVIVE1MIiwiRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTiIsIkVYUFJFU1NJT05fSFRNTF9MSU5LX0NMT1NFIiwiTElOS19NQVJLRVJTIiwiQ09NTU9OTUFSS19MSU5LX01BUktFUlMiLCJjbG9zZWQiLCJoYXNNYXJrZXIiLCJpc0ltYWdlIiwiYnJhY2tldGVkIiwiaW50cm8iLCJyZWZlcmVuY2VUeXBlIiwiYXN0ZXJpc2siLCJ1bmRlcnNjb3JlIiwid29yZCIsInN0cmlrZXRocm91Z2giLCJwcmV2aW91cyIsInByZWNlZGluZyIsImlubGluZUNvZGUiLCJvcGVuaW5nQ291bnQiLCJmb3VuZCIsInRpY2tRdWV1ZSIsImhhcmRCcmVhayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYW55IiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwidmlzaXRXaXRoUGFyZW50cyIsImxpc3ROb2RlIiwiY2hpbGQiLCJzZWxmQ2xvc2luZ1JlIiwic2ltcGxlVGFnUmUiLCJjdXJyZW50UGFyZW50Iiwic2VsZkNsb3NpbmciLCJnZXRTZWxmQ2xvc2luZyIsImdldFNpbXBsZVRhZyIsIm1hdGNoaW5nIiwibWF0Y2hpbmdUYWciLCJmaW5kQW5kUHVsbCIsImZyb21Ob2RlIiwidG9Ob2RlIiwidG9JbmRleCIsInZpcnR1YWwiLCJ1bnRhbmdsZSIsImRpc2FsbG93IiwiUmVhY3QiLCJSZWFjdElzIiwiZGVmYXVsdE5vZGVQb3NpdGlvbiIsInJlbmRlcmVyIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwibm9kZVByb3BzIiwiZ2V0Tm9kZVByb3BzIiwicmVzb2x2ZUNoaWxkcmVuIiwiY2hpbGROb2RlIiwib3B0cyIsImlzVGFnUmVuZGVyZXIiLCJzb3VyY2VQb3NpdGlvbiIsImluY2x1ZGVOb2RlSW5kZXgiLCJwYXJlbnRDaGlsZENvdW50IiwiYXNzaWduRGVmaW5lZCIsIm5vZGVLZXkiLCJ0aWdodCIsInVud3JhcFBhcmFncmFwaHMiLCJnZXRMaXN0SXRlbUNoaWxkcmVuIiwiaW5saW5lIiwiY29sdW1uQWxpZ25tZW50IiwiaXNIZWFkZXIiLCJpc0Jsb2NrIiwicGFyc2VkQ2hpbGRyZW4iLCJlbCIsIm1lcmdlTm9kZUNoaWxkcmVuIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRm9yd2FyZFJlZiIsIkxhenkiLCJNZW1vIiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc01lbW8iLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwidHlwZU9mIiwiZGVmcyIsInByb3RvY29scyIsInVyaSIsImNvbG9uIiwic3VwcG9ydHNTdHJpbmdSZW5kZXIiLCJTaW1wbGVSZW5kZXJlciIsImdldENvcmVQcm9wcyIsImRlbGV0ZSIsImxpbmtSZWZlcmVuY2UiLCJpbWFnZVJlZmVyZW5jZSIsInRhYmxlSGVhZCIsInRhYmxlQm9keSIsInRhYmxlUm93IiwidGFibGVDZWxsIiwidGV4dEFsaWduIiwiY29yZVByb3BzIiwidXNlRnJhZ21lbnQiLCJjaGVja2JveCIsImNvbXAiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsInZpcnR1YWxIdG1sIiwicGFyc2VkSHRtbCIsImV4IiwiX2NyZWF0ZUVtb3Rpb25TZXJ2ZXIiLCJleHRyYWN0Q3JpdGljYWwiLCJyZW5kZXJTdHlsZXNUb1N0cmluZyIsInJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbSIsIl9pbnRlcm9wRGVmYXVsdCIsInRocm91Z2giLCJjcmVhdGVFeHRyYWN0Q3JpdGljYWwiLCJSR1giLCJnZW5lcmF0ZVN0eWxlVGFnIiwiY3NzS2V5Iiwibm9uY2VTdHJpbmciLCJjcmVhdGVSZW5kZXJTdHlsZXNUb1N0cmluZyIsInNlZW4iLCJnbG9iYWxJZHMiLCJnbG9iYWxTdHlsZXMiLCJsYXN0SW5zZXJ0aW9uUG9pbnQiLCJfaWQiLCJfc3R5bGUiLCJjcmVhdGVSZW5kZXJTdHlsZXNUb05vZGVTdHJlYW0iLCJpbnNlZCIsInRva2VuU3RyZWFtIiwiaW5saW5lU3RyZWFtIiwidGhpbmciLCJmcmFnbWVudCIsIl9lbmRlZCIsImRyYWluIiwiX2VuZCIsImF1dG9EZXN0cm95IiwiYnVmZmVyRnJvbSIsIlRva2VuaXplIiwiY29kZXMiLCJlbmRTY3JpcHQiLCJlbmRTdHlsZSIsImVuZFRpdGxlIiwiZW5kQ29tbWVudCIsImVuZENkYXRhIiwic3RhdGVzIiwidGFnU3RhdGUiLCJxdW90ZVN0YXRlIiwiYnVmZmVycyIsIl9sYXN0IiwiaXNXaGl0ZVNwYWNlIiwiX3ByZXYiLCJfb2Zmc2V0IiwiX3Rlc3RSYXciLCJfcHVzaFN0YXRlIiwiX2dldENoYXIiLCJfZ2V0VGFnIiwiaXNNb2Rlcm4iLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsIlJhbmdlRXJyb3IiLCJmcm9tQXJyYXlCdWZmZXIiLCJmcm9tU3RyaW5nIiwiUGFzc1Rocm91Z2giLCJSRUFEQUJMRV9TVFJFQU0iLCJkdXBsZXhlciIsIm9iamVjdEFzc2lnbiIsImRlZmF1bHRPcHRzIiwiYnViYmxlRXJyb3JzIiwic3RyZWFtcyIsImxhc3RBcmciLCJEdXBsZXhXcmFwcGVyIiwiX3dyaXRhYmxlIiwiX3JlYWRhYmxlIiwiX3dhaXRpbmciLCJyZWFkcyIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnNwZWN0IiwiY3VzdG9tIiwicGEiLCJVaW50MTZBcnJheSIsInJhIiwic2EiLCJ0YSIsInVhIiwidmEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJ4bGlua0hyZWYiLCJ5YSIsInphIiwid2EiLCJ4YSIsIkJhIiwiQ2EiLCJtZW1vaXplZFN0YXRlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJkaXNwYXRjaCIsIkhhIiwiSWEiLCJKYSIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwicmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJLYSIsIkxhIiwiTWEiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwiTmEiLCJtZW51aXRlbSIsImdyaWRBcmVhIiwibGluZUNsYW1wIiwiT2EiLCJQYSIsIlFhIiwiUmEiLCJTYSIsImxpc3RpbmciLCJwcmUiLCJ0ZXh0YXJlYSIsIlRhIiwiVWEiLCJWYSIsIlhhIiwiWWEiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJaYSIsIiRhIiwiY29udGV4dFR5cGUiLCJjb250ZXh0VHlwZXMiLCJxYSIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJnZXRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsImFiIiwiZG9tTmFtZXNwYWNlIiwiY2hpbGRJbmRleCIsImZvb3RlciIsInRocmVhZElEIiwiZXhoYXVzdGVkIiwiY3VycmVudFNlbGVjdFZhbHVlIiwicHJldmlvdXNXYXNUZXh0Tm9kZSIsIm1ha2VTdGF0aWNNYXJrdXAiLCJzdXNwZW5zZURlcHRoIiwiY29udGV4dEluZGV4IiwiY29udGV4dFN0YWNrIiwiY29udGV4dFZhbHVlU3RhY2siLCJjbGVhclByb3ZpZGVycyIsInB1c2hQcm92aWRlciIsInBvcFByb3ZpZGVyIiwiZmFsbGJhY2tGcmFtZSIsInJlbmRlckRPTSIsImRlZmF1bHRDaGVja2VkIiwiV2EiLCJwYXJ0aWFsUmVuZGVyZXIiLCJfX3Byb3RvX18iLCJiYiIsInJlbmRlclRvU3RyaW5nIiwicmVuZGVyVG9TdGF0aWNNYXJrdXAiLCJyZW5kZXJUb05vZGVTdHJlYW0iLCJyZW5kZXJUb1N0YXRpY05vZGVTdHJlYW0iLCJpc0hpZ2hTdXJyb2dhdGUiLCJjb2RlUG9pbnQiLCJpc0xvd1N1cnJvZ2F0ZSIsInNlZ21lbnQiLCJjdXJCeXRlTGVuZ3RoIiwiaW5zdGFsbCIsIlNvdXJjZU1hcENvbnN1bWVyIiwiZXhpc3RzU3luYyIsImR5bmFtaWNSZXF1aXJlIiwibW9kIiwicmVxdWVzdCIsImVycm9yRm9ybWF0dGVySW5zdGFsbGVkIiwidW5jYXVnaHRTaGltSW5zdGFsbGVkIiwiZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zIiwiZmlsZUNvbnRlbnRzQ2FjaGUiLCJzb3VyY2VNYXBDYWNoZSIsInJlU291cmNlTWFwIiwicmV0cmlldmVGaWxlSGFuZGxlcnMiLCJyZXRyaWV2ZU1hcEhhbmRsZXJzIiwiaXNJbkJyb3dzZXIiLCJYTUxIdHRwUmVxdWVzdCIsImhhbmRsZXJFeGVjIiwicmV0cmlldmVGaWxlIiwic3VwcG9ydFJlbGF0aXZlVVJMIiwic3RhcnRQYXRoIiwiZHJpdmUiLCJ4aHIiLCJzZW5kIiwicmVzcG9uc2VUZXh0IiwicmV0cmlldmVTb3VyY2VNYXAiLCJtYXBTb3VyY2VQb3NpdGlvbiIsInNvdXJjZU1hcCIsInVybEFuZE1hcCIsIm9yaWdpbmFsUG9zaXRpb24iLCJDYWxsU2l0ZVRvU3RyaW5nIiwiZmlsZU5hbWUiLCJmaWxlTG9jYXRpb24iLCJpc05hdGl2ZSIsImdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCIsImlzRXZhbCIsImdldEV2YWxPcmlnaW4iLCJsaW5lTnVtYmVyIiwiZ2V0TGluZU51bWJlciIsImNvbHVtbk51bWJlciIsImdldENvbHVtbk51bWJlciIsImZ1bmN0aW9uTmFtZSIsImdldEZ1bmN0aW9uTmFtZSIsImFkZFN1ZmZpeCIsImlzQ29uc3RydWN0b3IiLCJpc1RvcGxldmVsIiwidHlwZU5hbWUiLCJnZXRUeXBlTmFtZSIsIm1ldGhvZE5hbWUiLCJnZXRNZXRob2ROYW1lIiwiY2xvbmVDYWxsU2l0ZSIsIndyYXBDYWxsU2l0ZSIsIm5leHRQb3NpdGlvbiIsImN1clBvc2l0aW9uIiwiZ2V0RmlsZU5hbWUiLCJoZWFkZXJMZW5ndGgiLCJvcmlnaW5hbEZ1bmN0aW9uTmFtZSIsIm1hcEV2YWxPcmlnaW4iLCJwcmVwYXJlU3RhY2tUcmFjZSIsImVycm9yU3RyaW5nIiwicHJvY2Vzc2VkU3RhY2siLCJnZXRFcnJvclNvdXJjZSIsInByaW50RXJyb3JBbmRFeGl0IiwiX2hhbmRsZSIsInNldEJsb2NraW5nIiwic291cmNlTWFwRGF0YSIsInNvdXJjZU1hcHBpbmdVUkwiLCJmaWxlRGF0YSIsInNvdXJjZU1hcEhlYWRlciIsImdldFJlc3BvbnNlSGVhZGVyIiwibGFzdE1hdGNoIiwicmV0cmlldmVTb3VyY2VNYXBVUkwiLCJyYXdEYXRhIiwib3JpZ2luYWxSZXRyaWV2ZUZpbGVIYW5kbGVycyIsIm9yaWdpbmFsUmV0cmlldmVNYXBIYW5kbGVycyIsIm92ZXJyaWRlUmV0cmlldmVGaWxlIiwib3ZlcnJpZGVSZXRyaWV2ZVNvdXJjZU1hcCIsImhvb2tSZXF1aXJlIiwiTW9kdWxlIiwiJGNvbXBpbGUiLCJfY29tcGlsZSIsIl9fc291cmNlTWFwU3VwcG9ydCIsImluc3RhbGxIYW5kbGVyIiwiaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zIiwiaXNNYWluVGhyZWFkIiwib3JpZ0VtaXQiLCJoYXNTdGFjayIsImhhc0xpc3RlbmVycyIsInJlc2V0UmV0cmlldmVIYW5kbGVycyIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwiU291cmNlTm9kZSIsImludFRvQ2hhck1hcCIsIl9zb3J0ZWQiLCJhQ2FsbGJhY2siLCJhVGhpc0FyZyIsImFNYXBwaW5nIiwibGluZUEiLCJsaW5lQiIsImNvbHVtbkEiLCJjb2x1bW5CIiwic29ydCIsImJpbmFyeVNlYXJjaCIsInF1aWNrU29ydCIsImFTb3VyY2VNYXAiLCJhU291cmNlTWFwVVJMIiwic2VjdGlvbnMiLCJJbmRleGVkU291cmNlTWFwQ29uc3VtZXIiLCJCYXNpY1NvdXJjZU1hcENvbnN1bWVyIiwiX2Fic29sdXRlU291cmNlcyIsIl9zb3VyY2VNYXBVUkwiLCJNYXBwaW5nIiwibGFzdE9mZnNldCIsIl9zZWN0aW9ucyIsIm9mZnNldExpbmUiLCJvZmZzZXRDb2x1bW4iLCJnZW5lcmF0ZWRPZmZzZXQiLCJjb25zdW1lciIsIl9fZ2VuZXJhdGVkTWFwcGluZ3MiLCJfcGFyc2VNYXBwaW5ncyIsIl9fb3JpZ2luYWxNYXBwaW5ncyIsIl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yIiwiR0VORVJBVEVEX09SREVSIiwiT1JJR0lOQUxfT1JERVIiLCJHUkVBVEVTVF9MT1dFUl9CT1VORCIsIkxFQVNUX1VQUEVSX0JPVU5EIiwiYUNvbnRleHQiLCJhT3JkZXIiLCJfZ2VuZXJhdGVkTWFwcGluZ3MiLCJfb3JpZ2luYWxNYXBwaW5ncyIsImFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciIsIm5lZWRsZSIsIl9maW5kU291cmNlSW5kZXgiLCJfZmluZE1hcHBpbmciLCJsYXN0Q29sdW1uIiwicmVsYXRpdmVTb3VyY2UiLCJzbWMiLCJnZW5lcmF0ZWRNYXBwaW5ncyIsImRlc3RHZW5lcmF0ZWRNYXBwaW5ncyIsImRlc3RPcmlnaW5hbE1hcHBpbmdzIiwic3JjTWFwcGluZyIsImRlc3RNYXBwaW5nIiwiY2FjaGVkU2VnbWVudHMiLCJ0ZW1wIiwib3JpZ2luYWxNYXBwaW5ncyIsImFOZWVkbGUiLCJhTWFwcGluZ3MiLCJhTGluZU5hbWUiLCJhQ29sdW1uTmFtZSIsImFDb21wYXJhdG9yIiwiYUJpYXMiLCJjb21wdXRlQ29sdW1uU3BhbnMiLCJuZXh0TWFwcGluZyIsImxhc3RHZW5lcmF0ZWRDb2x1bW4iLCJoYXNDb250ZW50c09mQWxsU291cmNlcyIsInNjIiwibnVsbE9uTWlzc2luZyIsImZpbGVVcmlBYnNQYXRoIiwiZ2VuZXJhdGVkUG9zaXRpb25Gb3IiLCJzZWN0aW9uSW5kZXgiLCJiaWFzIiwiZXZlcnkiLCJnZW5lcmF0ZWRQb3NpdGlvbiIsInNlY3Rpb25NYXBwaW5ncyIsImFkanVzdGVkTWFwcGluZyIsImFIYXlzdGFjayIsImFDb21wYXJlIiwicmVjdXJzaXZlU2VhcmNoIiwiYUxvdyIsImFIaWdoIiwibWlkIiwic3dhcCIsImFyeSIsImRvUXVpY2tTb3J0IiwiY29tcGFyYXRvciIsInJvdW5kIiwicmFuZG9tIiwicGl2b3QiLCJSRUdFWF9ORVdMSU5FIiwiaXNTb3VyY2VOb2RlIiwiYUxpbmUiLCJhQ29sdW1uIiwiYUNodW5rcyIsInNvdXJjZUNvbnRlbnRzIiwiZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAiLCJhR2VuZXJhdGVkQ29kZSIsImFSZWxhdGl2ZVBhdGgiLCJyZW1haW5pbmdMaW5lcyIsInJlbWFpbmluZ0xpbmVzSW5kZXgiLCJzaGlmdE5leHRMaW5lIiwiZ2V0TmV4dExpbmUiLCJsYXN0R2VuZXJhdGVkTGluZSIsImxhc3RNYXBwaW5nIiwibmV4dExpbmUiLCJhZGRNYXBwaW5nV2l0aENvZGUiLCJhQ2h1bmsiLCJwcmVwZW5kIiwid2FsayIsImFGbiIsImFTZXAiLCJuZXdDaGlsZHJlbiIsInJlcGxhY2VSaWdodCIsImFQYXR0ZXJuIiwiYVJlcGxhY2VtZW50IiwibGFzdENoaWxkIiwid2Fsa1NvdXJjZUNvbnRlbnRzIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwic291cmNlTWFwcGluZ0FjdGl2ZSIsImxhc3RPcmlnaW5hbFNvdXJjZSIsImxhc3RPcmlnaW5hbExpbmUiLCJsYXN0T3JpZ2luYWxDb2x1bW4iLCJsYXN0T3JpZ2luYWxOYW1lIiwic291cmNlQ29udGVudCIsInNob3J0TmFtZSIsImxvbmdOYW1lIiwicGFyc2VBcmd1bWVudHMiLCJ5ZWFyIiwibW9udGgiLCJob3VyT3B0IiwibWludXRlT3B0IiwiX18iLCJzeXNfZXJyb3IiLCJmYWlsdXJlIiwiaW52YWxpZF9hcmd1bWVudCIsImVuZF9vZl9maWxlIiwiZGl2aXNpb25fYnlfemVybyIsIm5vdF9mb3VuZCIsImFzc2VydF9mYWlsdXJlIiwiY2FtbF9hcnJheV9zdWIiLCJjYW1sX2FycmF5X3NldCIsIm5ld3ZhbCIsImNhbWxfYXJyYXlfZ2V0IiwiY2FtbF9tYWtlX3ZlY3QiLCJpbml0IiwiYXBwIiwiX2YiLCJfYXJncyIsImluaXRfYXJpdHkiLCJhcml0eSIsIl8xIiwiYTAiLCJwYXJhbSQxIiwicGFyYW0kMiIsInBhcmFtJDMiLCJwYXJhbSQ0IiwicGFyYW0kNSIsIl9fMSIsIl8yIiwiYTEiLCJfXzIiLCJfMyIsImEyIiwiX18zIiwiXzQiLCJhMyIsIl81IiwiYTQiLCJfNiIsImE1IiwidW5kZWZpbmVkSGVhZGVyIiwibmlkIiwiYmxvY2skMSIsIm51bGxfdG9fb3B0IiwidmFsRnJvbU9wdGlvbiIsImRpY3QiLCJjb250ZW50VHlwZSQxIiwiY2FtbF9pbnRfY29tcGFyZSIsImNhbWxfc3RyaW5nX2NvbXBhcmUiLCJzMSIsInMyIiwiY2FtbF9pbnRfbWluIiwiY2FtbF9pbnRfbWF4IiwiZ2V0RXhuIiwieXMiLCJsZW54IiwibGVueSIsInppcEJ5IiwiemlwQnlVIiwibDEiLCJsMiIsImExYTIiLCJpJDEiLCJzbGljZVRvRW5kIiwibGVuYSIsIm9mcyIsImJsaXRVbnNhZmUiLCJzcmNvZnMxIiwic3Jjb2ZzMiIsImJsaXRMZW5ndGgiLCJqJDEiLCJzdHJpY3RseVNvcnRlZExlbmd0aFUiLCJsdCIsIngwIiwieDEiLCJfcHJlYyIsIl9hY2MiLCJhY2MiLCJwcmVjIiwic29ydGVkTGVuZ3RoQXV4TW9yZSIsInNyYzFvZnMiLCJzcmMxbGVuIiwic3JjMiIsInNyYzJvZnMiLCJzcmMybGVuIiwiZHN0b2ZzIiwic3JjMXIiLCJzcmMyciIsIl9pMSIsIl9zMSIsIl9pMiIsIl9zMiIsIl9kIiwiaTIiLCJpMSIsImkxJDEiLCJpMiQxIiwiaW5zZXJ0aW9uU29ydCIsInNyY29mcyIsInNvcnRUbyIsInN0YWJsZVNvcnRJblBsYWNlQnlVIiwic3RhYmxlU29ydEJ5Iiwic3RhYmxlU29ydEJ5VSIsInRyZWVIZWlnaHQiLCJobCIsImhlaWdodEdlIiwidXBkYXRlVmFsdWUiLCJiYWwiLCJsdiIsImxkIiwibGwiLCJsciIsInJ2IiwicmQiLCJybCIsInJyIiwibWluS2V5MEF1eCIsIl9uIiwibiQxIiwibWluS2V5IiwibWF4S2V5MEF1eCIsIm1heEtleSIsIm1pbktWMEF1eCIsIm1pbmltdW0iLCJtYXhLVjBBdXgiLCJyZW1vdmVNaW5BdXhXaXRoUmVmIiwia3IiLCJ2ciIsImxuIiwicm4iLCJrbiIsInZuIiwiaXNFbXB0eSIsInN0YWNrQWxsTGVmdCIsIl92IiwiX3MiLCJmaW5kRmlyc3RCeVUiLCJuZXdMZWZ0IiwibmV3RCIsIm5ld1JpZ2h0IiwibWFwV2l0aEtleVUiLCJfbSIsIl9hY2N1IiwiYWNjdSIsImFkZE1pbkVsZW1lbnQiLCJhZGRNYXhFbGVtZW50IiwibGgiLCJyaCIsInQxIiwidDIiLCJ0MnIiLCJjb25jYXRPckpvaW4iLCJrZWVwU2hhcmVkVSIsInB2ZCIsInBhcnRpdGlvblNoYXJlZFUiLCJsZiIsIm1hdGNoJDEiLCJyZiIsInJ0IiwibGVuZ3RoTm9kZSIsInRvTGlzdEF1eCIsImZpbGxBcnJheSIsInJuZXh0Iiwia2V5c1RvQXJyYXkiLCJmaWxsQXJyYXlLZXkiLCJ2YWx1ZXNUb0FycmF5IiwiZmlsbEFycmF5VmFsdWUiLCJmcm9tU29ydGVkQXJyYXlSZXZBdXgiLCJtYXRjaF8wMDAiLCJtYXRjaCQyIiwibWF0Y2hfMDAwJDEiLCJtYXRjaF8wMDEkMSIsIm1hdGNoJDMiLCJtYXRjaCQ0IiwibWF0Y2gkNSIsIm5sIiwibWF0Y2gkNiIsImZyb21Tb3J0ZWRBcnJheUF1eCIsImtjbXAiLCJ2Y21wIiwibGVuMSIsImxlbjIiLCJfZTEiLCJfZTIiLCJlMiIsImUxIiwiaDIiLCJoMSIsInZlcSIsInJvdGF0ZVdpdGhMZWZ0Q2hpbGQiLCJrMiIsImsxIiwiaGxrMiIsImhyazIiLCJobGsxIiwiaGsyIiwicm90YXRlV2l0aFJpZ2h0Q2hpbGQiLCJocmsxIiwiaGsxIiwiaGVpZ2h0VXBkYXRlTXV0YXRlIiwiaGx0IiwiaHJ0IiwiYmFsTXV0YXRlIiwibnQiLCJrMyIsImRvdWJsZVdpdGhSaWdodENoaWxkIiwidXBkYXRlTXV0YXRlIiwiZm9yX2luIiwiZm9vIiwiY2FtbF9jb21wYXJlIiwiX2EiLCJfYiIsImFfdHlwZSIsImJfdHlwZSIsInRhZ19hIiwidGFnX2IiLCJsZW5fYSIsImxlbl9iIiwibWluX2tleV9saHMiLCJtaW5fa2V5X3JocyIsImRvX2tleSIsIm1pbl9rZXkiLCJtayIsImRvX2tleV9hIiwicGFydGlhbF9hcmciLCJkb19rZXlfYiIsInBhcnRpYWxfYXJnJDEiLCJfaSQxIiwicmVzJDEiLCJfaSQyIiwiaSQyIiwicmVzJDIiLCJjYW1sX2VxdWFsIiwidW5zYWZlX2NvbXBhcmUiLCJNYWdtYSIsIiRsZXNzJGNvbG9uJGdyZWF0IiwiYXBwZW5kIiwiTWFnbWFfQW55IiwiJGxlc3MkJGdyZWF0IiwiJGxlc3MkaGFzaCRncmVhdCIsIiRsZXNzJHN0YXIkZ3JlYXQiLCIkZ3JlYXQkZ3JlYXQkZXEiLCJmbGF0X21hcCIsIiRlcSRsZXNzJGxlc3MiLCIkZ3JlYXQkZXEkZ3JlYXQiLCIkbGVzcyRlcSRsZXNzIiwiZiQxIiwiQWx0ZXJuYXRpdmUiLCIkbGVzcyRwaXBlJGdyZWF0IiwiJGxlc3MkZG90IiwiY29tcG9zZSIsIiRncmVhdCRkb3QiLCIkZXEkcGlwZSRlcSIsImVxIiwiRm4iLCJsZXNzX3RoYW4iLCJncmVhdGVyX3RoYW4iLCJsZXNzX3RoYW5fb3JfZXF1YWwiLCJncmVhdGVyX3RoYW5fb3JfZXF1YWwiLCIkbGVzcyRwaXBlJHBpcGUiLCIkcGlwZSRwaXBlJGdyZWF0IiwiJGxlc3MkcGlwZSRlcSIsIiRncmVhdCRwaXBlJGVxIiwiRXVjbGlkZWFuX1JpbmciLCIkcGlwZSRwbHVzJHBpcGUiLCIkcGlwZSRzdGFyJHBpcGUiLCJtdWx0aXBseSIsIiRwaXBlJG5lZyRwaXBlIiwic3VidHJhY3QiLCIkcGlwZSRzbGFzaCRwaXBlIiwiZGl2aWRlIiwiJHBpcGUkcGVyY2VudCRwaXBlIiwiZmxpcCIsIiQkY29uc3QiLCJDYXRlZ29yeSIsIiQkdm9pZCIsInZvaWRfcmlnaHQiLCJmYiIsInZvaWRfbGVmdCIsImZsYXAiLCJhcHBseV9maXJzdCIsImFwcGx5X3NlY29uZCIsImFwcGx5X2JvdGgiLCJhJHByaW1lIiwiYiRwcmltZSIsImxpZnQyIiwibGlmdDMiLCJsaWZ0NCIsImxpZnQ1IiwiSW5maXgiLCIkbGVzcyRzdGFyIiwiJHN0YXIkZ3JlYXQiLCJJJDEiLCJ3aGVuXyIsInB1cmUiLCJ1bmxlc3MiLCJsaWZ0QTEiLCJmbGF0dGVuIiwiY29tcG9zZV9rbGllc2xpIiwiY29tcG9zZV9rbGllc2xpX2ZsaXBwZWQiLCJpZl9tIiwicCRwcmltZSIsImxpZnRNMSIsImZhJHByaW1lIiwiYXAiLCJmJHByaW1lIiwiU2VtaWdyb3VwIiwiRk0iLCJGb2xkX01hcF9BbnkiLCJzdXJyb3VuZF9tYXAiLCJmb2xkX21hcCIsInN1cnJvdW5kIiwiTW9ub2lkIiwiRm9sZF9NYXAiLCJmb2xkIiwiaW50ZXJjYWxhdGUiLCJzZXBhcmF0b3IiLCJmb2xkX2xlZnQiLCJBcHBsaWNhdGl2ZSIsInRyYXZlcnNlJHByaW1lIiwiZm9sZF9yaWdodCIsInNlcXVlbmNlJHByaW1lIiwiUGx1cyIsIm9uZV9vZiIsIk1vbmFkIiwiZm9sZF9tb25hZCIsIkJzQXBwbHlFeHRlbnNpb25zIiwibWFwMiIsIm1hcDMiLCJtYXA0IiwibWFwNSIsImFwcGx5Rmlyc3QiLCJhcHBseVNlY29uZCIsInR1cGxlMiIsInR1cGxlMyIsImZjIiwidHVwbGU0IiwiZmQiLCJ0dXBsZTUiLCJmZSIsIm1hcFR1cGxlMiIsIm1hcFR1cGxlMyIsIm1hcFR1cGxlNCIsIm1hcFR1cGxlNSIsIkFwcGx5SW5maXgiLCJBcHBseUV4dGVuc2lvbnNfdHVwbGUyIiwiQXBwbHlFeHRlbnNpb25zIiwiQnNNb25hZEV4dGVuc2lvbnMiLCJmbGF0TWFwIiwibW1hIiwiY29tcG9zZUtsZWlzbGkiLCJmbGlwQ29tcG9zZUtsZWlzbGkiLCJNb25hZEluZml4IiwiTW9uYWRFeHRlbnNpb25zIiwiQnNGdW5jdG9yRXh0ZW5zaW9ucyIsImZsaXBNYXAiLCJ2b2lkUmlnaHQiLCJ2b2lkTGVmdCIsIkZ1bmN0b3JJbmZpeCIsIkZ1bmN0b3JFeHRlbnNpb25zIiwiJGxlc3MkIiwiJCRncmVhdCIsIiRsZXNzJGF0JGdyZWF0IiwiQXBwbGljYXRpdmVFeHRlbnNpb25zIiwiQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMiLCJmbGlwQ29tcG9zZSIsIiRsZXNzJGxlc3MiLCIkZ3JlYXQkZ3JlYXQiLCJjb3B5QXV4Q29udCIsIl9jZWxsWCIsImNlbGxYIiwic3BsaXRBdCIsImxzdCIsIl9jZWxsIiwiY2VsbCQxIiwic3BsaXRBdEF1eCIsImNvcHlBdXhXaXRoTWFwIiwiX3giLCJfcmVzIiwiZmlsbEF1eCIsIl9sMSIsIl9sMiIsInJldmVyc2VDb25jYXQiLCJfbCIsInNvcnRVIiwib3B0Iiwib2ZfbGlzdCIsIl9wYXJhbSIsImxpc3RfbGVuZ3RoIiwiaV9maW5pc2giLCJwcmltIiwicHJpbSQxIiwiZm9sZF9tYXBfZGVmYXVsdF9sZWZ0IiwiZm9sZF9tYXBfZGVmYXVsdF9yaWdodCIsIlNlcXVlbmNlIiwic2VxdWVuY2VfZGVmYXVsdCIsInRyYXZlcnNlIiwiemlwX3dpdGgiLCJ6aXAiLCJGdW5jdG9yIiwiQWx0IiwiQXBwbHkiLCJGb2xkYWJsZV9Gb2xkX01hcCIsIkZvbGRhYmxlX0ZvbGRfTWFwX0FueSIsIkZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMiLCJGb2xkYWJsZSIsInVuZm9sZCIsIlVuZm9sZGFibGUiLCJJbnZhcmlhbnQiLCJFeHRlbmQiLCJpbmNsdWRlIiwiaW5jbHVkZSQxIiwiSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0IiwiSW5maXhfJGxlc3MkaGFzaCRncmVhdCIsIkluZml4XyRsZXNzJHN0YXIkZ3JlYXQiLCJJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEiLCJJbmZpeF8kZXEkbGVzcyRsZXNzIiwiSW5maXhfJGdyZWF0JGVxJGdyZWF0IiwiSW5maXhfJGxlc3MkZXEkbGVzcyIsIm1ha2UiLCJtYXBpIiwiZW5kXyIsImZuX2FycmF5IiwiZnVuYXJnIiwiRm9sZF9NYXBfUGx1cyIsImltYXAiLCIkbGVzcyRsZXNzJGVxIiwiJGVxJGdyZWF0JGdyZWF0IiwiVHJhdmVyc2FibGUiLCJFcSIsIk9yZCIsIlNob3ciLCJzaG93IiwiYlRvQSIsImVxQSIsImIxIiwiYjIiLCJub3RFcSIsImVxV2l0aENvbnZlcnNpb24iLCJlcUludmVydGVkIiwiRXFJbnZlcnRlZCIsIkVxQnkiLCJjb21wYXJlQSIsImNvbXBhcmVBc0ludEJ5IiwibGVzc1RoYW5CeSIsImxlc3NUaGFuT3JFcUJ5IiwiZ3JlYXRlclRoYW5CeSIsImdyZWF0ZXJUaGFuT3JFcUJ5Iiwib3JkIiwiY2xhbXBCeSIsImJldHdlZW5CeSIsInJpbmciLCJ6ZXJvIiwiY29tcGFyZVJldmVyc2VkIiwibGVzc1RoYW4iLCJsZXNzVGhhbk9yRXEiLCJncmVhdGVyVGhhbiIsImdyZWF0ZXJUaGFuT3JFcSIsImxlc3NUaGFuJDEiLCJjb21wYXJlVG8iLCJsZXNzVGhhbk9yRXEkMSIsImdyZWF0ZXJUaGFuJDEiLCJncmVhdGVyVGhhbk9yRXEkMSIsImNvbXBhcmVXaXRoQ29udmVyc2lvbiIsIk9yZFJldmVyc2VkIiwiY29tcGFyZUFzSW50IiwibHRlIiwiZ3QiLCJndGUiLCJjbGFtcCIsImJldHdlZW4iLCJPcmRSaW5nRXh0ZW5zaW9ucyIsInNpZ251bSIsIk9yZE5hbWVkIiwiT3JkQnkiLCJjYW1sX2NyZWF0ZV9ieXRlcyIsImNhbWxfYmxpdF9ieXRlcyIsIm9mZjEiLCJyYW5nZV9hIiwicmFuZ2VfYiIsInJhbmdlX2EkMSIsInJhbmdlX2IkMSIsInJhbmdlJDEiLCJieXRlc190b19zdHJpbmciLCJzX2xlbiIsInRtcF9ieXRlcyIsImJ5dGVzX29mX3N0cmluZyIsImRpdiIsIm1vZF8iLCJpbXVsIiwicGFyc2VfZGlnaXQiLCJpbnRfb2Zfc3RyaW5nX2Jhc2UiLCJwYXJzZV9zaWduX2FuZF9iYXNlIiwiY2FtbF9pbnRfb2Zfc3RyaW5nIiwiX2siLCJhY2MkMSIsImF1eCIsIm9yX3JlcyIsIiRhdCIsImxpc3RBcHBlbmQiLCJFbnVtRXh0ZW5zaW9ucyIsImZyb21Ub0FzTGlzdCIsIl9jdXJyZW50IiwicHJlZCIsInN1Y2MiLCJ1cEZyb21Bc0xpc3QiLCJuZXh0JDEiLCJ1cEZyb21JbmNsdWRpbmdBc0xpc3QiLCJkb3duRnJvbUFzTGlzdCIsImRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0IiwiZnJvbUludCIsInRvSW50IiwibzEiLCJvMiIsImZyb21UaGVuVG9Bc0xpc3QiLCJzdGFydEludCIsImZyb21FbnVtIiwic3RlcEludCIsIl9jdXJyZW50SW50IiwiY3VycmVudEludCIsIm5leHRJbnQkMSIsInRvRW51bSIsInRvcCIsImJvdHRvbSIsImNhcmRpbmFsaXR5IiwibWF5YmUiLCIkJGRlZmF1bHQiLCJmbl9vcHQiLCJ4JHByaW1lIiwiQWx0RXh0ZW5zaW9ucyIsIm9yRWxzZSIsImZhbGxiYWNrIiwiQWx0SW5maXgiLCJNb25vaWRFeHRlbnNpb25zIiwiQnNNb25vaWRFeHRlbnNpb25zIiwicG93ZXIiLCJnbyIsIngkcHJpbWUkMSIsImd1YXJkIiwib3B0aW9uQWx0IiwiRm9sZGFibGVFeHRlbnNpb25zIiwiQnNGb2xkYWJsZUV4dGVuc2lvbnMiLCJpbmRleE9mQnkiLCJtaW5CeSIsIm1heEJ5IiwiY291bnRCeSIsImNvbnRhaW5zQnkiLCJjb250YWlucyIsIm9yZEEiLCJmb3JFYWNoV2l0aEluZGV4IiwiZmluZFdpdGhJbmRleCIsInRvTGlzdCIsIkZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyIsIkJzRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zIiwic3Vycm91bmRNYXAiLCJGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMiLCJCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyIsImZvbGRNYXAiLCJmb2xkV2l0aE1vbm9pZCIsIm1vbm9pZEEiLCJGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyIsIkJzRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMiLCJ0cmF2ZXJzZV8iLCJzZXF1ZW5jZV8iLCJGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyIsIkJzRm9sZGFibGVNb25hZEV4dGVuc2lvbnMiLCJmb2xkV2l0aE1vbmFkIiwiRm9sZGFibGVFcUV4dGVuc2lvbnMiLCJGb2xkYWJsZU9yZEV4dGVuc2lvbnMiLCJTZW1pZ3JvdXBFeHRlbnNpb25zIiwiY29uY2F0TmFtZWQiLCJzdWZmaXgiLCJTZW1pZ3JvdXBvaWRFeHRlbnNpb25zIiwiYW5kVGhlbiIsImFUb0IiLCJiVG9DIiwiU2VtaWdyb3Vwb2lkSW5maXgiLCJTRSIsIiRsZXNzJGxlc3MkbGVzcyIsIiRncmVhdCRncmVhdCRncmVhdCIsIm9wdGlvbkJUb0MiLCJvcHRpb25BVG9CIiwiaW5uZXJFcSIsImZvbGRMYXp5IiwiZ2V0T3JFbHNlIiwiZ2V0T3JFbHNlTGF6eSIsIlNlbWlncm91cEFueUV4dGVuc2lvbnMiLCJNb25vaWRBbnkiLCJFcUEiLCJpbm5lclNob3ciLCJTaG93QSIsImlzTm90RW1wdHkiLCJ0YWlsT3JFbXB0eSIsIl9jb3VudCIsIl9yZXN0IiwibWFwT3B0aW9uIiwiY3VyciIsInppcFdpdGgiLCJfY2VsbFkiLCJjZWxsWSIsImNvcHlBdXhXaXRoTWFwMiIsInNvcnRCeSIsImRpc3RpbmN0QnkiLCJyZW1vdmVGaXJzdEJ5IiwicmVtb3ZlRWFjaEJ5IiwiemlwQXV4IiwiTWFrZUNvbXBhcmFibGUiLCJuZXdLIiwiciQxIiwibCQxIiwiciQyIiwibmV3RCQxIiwicmVtb3ZlQXV4MCIsInNwbGl0QXV4UGl2b3QiLCJwcmVzIiwidjEiLCJkMSIsInIxIiwiZDIiLCJkMiQxIiwidjIiLCJkMiQyIiwicjIiLCJkMSQxIiwiZDEkMiIsIm9kYXRhIiwibmV3RGF0YSIsIl90IiwibTEiLCJtMiIsIl94cyIsIl95cyIsIl9feCIsImNvbXBhcmVJbnQiLCJjb21wYXJlQnkiLCJieSIsImNvbmQiLCJ1cGRhdGVGbiIsIm1lcmdlRm4iLCJncm91cExpc3RCeSIsImNvbXBhcmFibGUiLCJncm91cEJ5IiwiYWRkSXRlbVRvTWFwIiwiYWRkSXRlbVRvR3JvdXAiLCJncm91cEFycmF5QnkiLCJwYXJ0aWFsX2FyZyQyIiwicmVkdWNlVSIsIldpdGhPcmQiLCJDb21wYXJhYmxlIiwic2luZ2xldG9uIiwiZXFCeSIsImZvbGRMZWZ0IiwiZnJvbVZhbHVlQXJyYXkiLCJ0b0tleSIsImZyb21WYWx1ZUxpc3QiLCJrZXlBcnJheSIsInZhbHVlQXJyYXkiLCJyZW1vdmVNYW55IiwidXBkYXRlIiwibWVyZ2VNYW55Iiwia2VlcCIsImZpbHRlck5vdCIsInBhcnRpdGlvbiIsIm1hcFdpdGhLZXkiLCJtaW4wQXV4IiwibWF4MEF1eCIsImpvaW5TaGFyZWQiLCJjb25jYXRTaGFyZWQiLCJwdiIsIngwJDEiLCJ4MSQxIiwieDIiLCJuZXdMIiwibmV3UiIsImNtcCQxIiwidiQxIiwic3BsaXRBdXhOb1Bpdm90Iiwic3Vic2V0IiwicHJlZGljYXRlIiwidW5pb24iLCJpbnRlcnNlY3QiLCJmb2xkUmlnaHQiLCJpbnZlcnNlIiwiQWRkaXRpdmUiLCJNZWRpYWxfTWFnbWEiLCJRdWFzaWdyb3VwIiwiTWVkaWFsX1F1YXNpZ3JvdXAiLCJMb29wIiwiR3JvdXAiLCJBYmVsaWFuX0dyb3VwIiwiTWFnbWEkMSIsIk11bHRpcGxpY2F0aXZlIiwiZGVncmVlIiwiQWRkaXRpdmUkMSIsIk11bHRpcGxpY2F0aXZlJDEiLCJSaW5nRXh0ZW5zaW9ucyIsIiRuZWciLCJuZWdhdGUiLCJleG4iLCJMaXN0IiwiZW1wdHlMYXp5IiwidW5jb25zIiwibWtTdHJpbmciLCJzaG93QnkiLCJta1N0cmluZyQxIiwiJCRBcnJheSIsInRhaWxTZXF1ZW5jZSIsIm5vbkVtcHR5MSIsIm5vbkVtcHR5MiIsIlRhaWxGb2xkTWFwIiwiU2VxdWVuY2VGb2xkTWFwQW55IiwiVGFpbEZvbGRNYXBQbHVzIiwiZmYiLCJub25FbXB0eSIsImRlbGltIiwic2hvd1giLCJmcm9tU2VxdWVuY2UiLCJ0b1NlcXVlbmNlIiwiY29ucyIsInRhaWxOb25FbXB0eSIsIlNlbWlncm91cEFueSIsIk1hZ21hQW55IiwicmVkdWNlTGVmdCIsInNob3dBIiwiV2l0aEFwcGxpY2F0aXZlIiwiVGFpbFRyYXZlcnNhYmxlIiwib25lJDEiLCJtYWtlJDEiLCJ0b1NlcXVlbmNlJDEiLCJoZWFkJDEiLCJ0YWlsJDEiLCJjb25jYXQkMSIsIlNlbWlncm91cEFueSQxIiwiTWFnbWFBbnkkMSIsInJlZHVjZUxlZnQkMSIsImZvbGRMZWZ0JDEiLCJmb2xkUmlnaHQkMSIsIkZvbGRhYmxlX0ZvbGRfTWFwJDEiLCJGb2xkYWJsZV9Gb2xkX01hcF9BbnkkMSIsIkZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMkMSIsIkZvbGRhYmxlJDEiLCJiaW5kJDEiLCJlcUJ5JDEiLCJzaG93QnkkMSIsInRvTm9uRW1wdHlMaXN0IiwiZnJvbU5vbkVtcHR5TGlzdCIsImJpbWFwIiwiYXBwbHlXaXRoQXBwZW5kRXJyb3JzIiwiYXBwZW5kRXJyb3JzIiwiZnYiLCJhbGlnbldpdGhBcHBlbmRFcnJvcnMiLCJXaXRoRXJyb3JzIiwiRXJyb3JzIiwiJCRFcnJvciIsImluY2x1ZGUkMiIsIlNlbWlhbGlnbiIsImFsaWduV2l0aCIsImFsaWduV2l0aFdpdGhBcHBlbmRFcnJvcnMiLCJpbmNsdWRlJDMiLCJpbmNsdWRlJDQiLCJpbmNsdWRlJDUiLCJpbmNsdWRlJDYiLCJCaWZ1bmN0b3JFeHRlbnNpb25zIiwibWFwUmlnaHQiLCJiVG9EIiwiZmFiIiwibWFwTGVmdCIsImFUb0MiLCJtYXBFcnJvciIsImVjIiwiYWMiLCJkZWZhdWx0RXJyb3IiLCJtYXBBIiwibWFwRSIsIm9uRG9uZSIsImdldEVycm9yIiwiaW8iLCJyVG9JT0EiLCJpb1IiLCJ1bnNhZmVSdW5Bc3luYyIsIl9vbkRvbmUiLCJfaW9BIiwiaW9BIiwicjBUb0EiLCJyZXN1bHRFIiwidW5zYWZlUnVuQXN5bmNQYXIyIiwicmVzdWx0UjBUb0EiLCJyZXN1bHRSMCIsInIwVG9JT0EiLCJpb0IiLCJyZWZBIiwicmVmQiIsInJlc3VsdEEiLCJyZXN1bHRCIiwiaW9CVG9DIiwiaW9BVG9CIiwiZ2V0QlRvQyIsImdldElPQlRvQyIsIm9uRG9uZUJUb0MiLCJyMFRvQlRvQyIsInIwIiwicjBUb0lPQlRvQyIsImNvbXBvc2VQdXJlIiwiZ2V0QVRvQiIsImNvbXBvc2VTdXNwZW5kIiwiZ2V0SU9BVG9CIiwiaW9SMCIsImlvUjAkMSIsImlvUjBUb0JUb0MiLCJpb1IwJDIiLCJjb21wb3NlU3VzcGVuZElPIiwib25Eb25lQVRvQiIsImNvbXBvc2VBc3luYyIsInIwVG9BVG9CIiwiY29tcG9zZU1hcCIsImlvUjBUb0FUb0IiLCJjb21wb3NlQXBwbHkiLCJyMFRvSU9BVG9CIiwiY29tcG9zZUZsYXRNYXAiLCJlMVRvRTIiLCJnZXRJT0EiLCJvbkRvbmVBIiwiZVRvSU9BIiwiZ2V0UjAiLCJnZXRJT1IwIiwib25Eb25lUjAiLCJyMVRvUjAiLCJyMVRvSU9SMCIsImNhdGNoRXJyb3JNYXAiLCJpb1IwVG9BIiwiaW9SMSIsImNhdGNoRXJyb3JBcHBseSIsImlvUjFUb1IwIiwiY2F0Y2hFcnJvckZsYXRNYXAiLCJlVG9BIiwibWFwRXJyb3IkMSIsIk5hTiIsInN1YnRyYWN0JDEiLCJpc19zcGFjZSIsInN3aXRjaGVyIiwicGFkU3RhcnQiLCJ0YXJnZXRMZW5ndGgiLCJwYWRXaXRoT3B0IiwicGFkV2l0aCIsImlucHV0TGVuZ3RoIiwicGFkV2l0aExlbmd0aCIsInBhZExlbmd0aCIsInN1bSIsInByb2R1Y3QiLCJzdW0kMSIsInByb2R1Y3QkMSIsIk9wdGlvbk9yZCQxIiwiT3B0aW9uT3JkJDIiLCJfbWFrZVN5c3RlbUVycm9yIiwiZXhjIiwiX21ha2VVbmtub3duRXJyb3IiLCJmcm9tRXhjZXB0aW9uIiwibWFrZVN5c3RlbUVycm9yIiwibWFrZVVua25vd25FcnJvciIsInN5c2NhbGwiLCJfbWFrZUVycm9yIiwicmVhZERpciIsImVuY29kaW5nT3B0Iiwid2l0aEZpbGVUeXBlcyIsImZpbGVzIiwiX3RvUmVzdWx0IiwicmVhZFRleHQiLCJwYXJzZVRpbWVzdGFtcCIsIm1hdGNoXyIsImNhcHR1cmVzIiwibWludXRlIiwicGFyc2VFbnRyeSIsInBhcnNlVGl0bGUiLCJwYXJzZVRhZ3MiLCJyZWFkQW5kUGFyc2VFbnRyaWVzRGlyZWN0b3J5IiwiZGlyZWN0b3J5IiwiZW50cmllcyIsImVuZHNXaXRoIiwiaXNEaXJlY3RvcnkiLCJsb2ciLCJhY2N1bXVsYXRvciIsInJlYWRBbmRFbmNvZGVGYXZpY29uUGF0aCIsIm1pbWVUeXBlIiwicmVhZEFuZFBhcnNlQWxsIiwiYWJvdXRQYXRoIiwiZW50cmllc0RpcmVjdG9yeSIsImZhdmljb25QYXRoIiwidXBsb2Fkc0RpcmVjdG9yeSIsImFib3V0IiwiZmF2aWNvbiIsIiQkUmVzcG9uc2UiLCJzZXRTdGF0dXNDb2RlIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwic2V0Q29udGVudFR5cGUiLCJzZXRIZWFkZXIiLCJzZXRDb250ZW50TGVuZ3RoIiwic2V0TGFzdE1vZGlmaWVkIiwidG9VVENTdHJpbmciLCJDYXNjYWRpbmciLCJpbml0aWFsIiwiaW5oZXJpdF8iLCJQZXJjZW50YWdlIiwicGN0IiwidG9TdHJpbmckNCIsInZhcmlhbnQiLCJMZW5ndGgiLCJlbSIsInJlbSIsInZoIiwidnciLCJ2bWluIiwidm1heCIsInB4IiwicHhGbG9hdCIsImNtIiwibW0iLCJpbmNoIiwicGMiLCJwdCIsInRvU3RyaW5nJDUiLCJBbmdsZSIsImRlZyIsInJhZCIsImdyYWQiLCJ0dXJuIiwiRGlyZWN0aW9uIiwibHRyIiwicnRsIiwiYWJzb2x1dGUiLCIkJHN0YXRpYyIsImZpeGVkIiwic3RpY2t5IiwiUmVzaXplIiwibm9uZSIsImJvdGgiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJGb250VmFyaWFudCIsInNtYWxsQ2FwcyIsIkZvbnRTdHlsZSIsIml0YWxpYyIsIm9ibGlxdWUiLCJNYXJnaW4iLCJhdXRvIiwiRm9udFdlaWdodCIsInRoaW4iLCJleHRyYUxpZ2h0IiwibGlnaHQiLCJtZWRpdW0iLCJzZW1pQm9sZCIsImJvbGQiLCJleHRyYUJvbGQiLCJsaWdodGVyIiwiYm9sZGVyIiwiQ3Vyc29yIiwiY29udGV4dE1lbnUiLCJwb2ludGVyIiwicHJvZ3Jlc3MiLCJ3YWl0IiwiY3Jvc3NoYWlyIiwidmVydGljYWxUZXh0IiwibW92ZSIsIm5vRHJvcCIsIm5vdEFsbG93ZWQiLCJncmFiIiwiZ3JhYmJpbmciLCJhbGxTY3JvbGwiLCJjb2xSZXNpemUiLCJyb3dSZXNpemUiLCJuUmVzaXplIiwiZVJlc2l6ZSIsInNSZXNpemUiLCJ3UmVzaXplIiwibmVSZXNpemUiLCJud1Jlc2l6ZSIsInNlUmVzaXplIiwic3dSZXNpemUiLCJld1Jlc2l6ZSIsIm5zUmVzaXplIiwibmVzd1Jlc2l6ZSIsIm53c2VSZXNpemUiLCJ6b29tSW4iLCJ6b29tT3V0Iiwic3RyaW5nX29mX3BlcmNlbnQiLCJ0b1N0cmluZyQyOSIsInN0cmluZ19vZl9hbHBoYSIsIkJvcmRlclN0eWxlIiwiRGlzcGxheU91dHNpZGUiLCJEaXNwbGF5SW5zaWRlIiwiRGlzcGxheUxpc3RJdGVtIiwiRGlzcGxheUludGVybmFsIiwiRGlzcGxheUJveCIsIkRpc3BsYXlMZWdhY3kiLCJQb3NpdGlvbmFsQWxpZ25tZW50IiwiQmFzZWxpbmVBbGlnbm1lbnQiLCJOb3JtYWxBbGlnbm1lbnQiLCJEaXN0cmlidXRlZEFsaWdubWVudCIsIkFsaWduSXRlbXMiLCJGbGV4V3JhcCIsIkZsZXhEaXJlY3Rpb24iLCJVc2VyU2VsZWN0IiwiR3JpZFRlbXBsYXRlQXJlYXMiLCJhcmVhcyIsImNhcnJ5IiwiZWxlbSIsIkdyaWRBcmVhIiwiaWRlbnQiLCJudW1JZGVudCIsIldpZHRoIiwiTWF4V2lkdGgiLCJIZWlnaHQiLCJzdHJpbmdfb2Zfc3RvcHMiLCJfc3RyaW5ncyIsInN0cmluZ3MkMSIsIkdlb21ldHlCb3giLCJtYXJnaW5Cb3giLCJib3JkZXJCb3giLCJwYWRkaW5nQm94IiwiY29udGVudEJveCIsImZpbGxCb3giLCJzdHJva2VCb3giLCJ2aWV3Qm94IiwiVGltaW5nRnVuY3Rpb24iLCJsaW5lYXIiLCJlYXNlIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsInN0ZXBTdGFydCIsInN0ZXBFbmQiLCJzdGVwcyIsImN1YmljQmV6aWVyIiwidHJhbnNsYXRlM2QiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInRyYW5zbGF0ZVoiLCJzY2FsZSIsInNjYWxlM2QiLCJzY2FsZVgiLCJzY2FsZVkiLCJzY2FsZVoiLCJyb3RhdGUiLCJyb3RhdGUzZCIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInNrZXciLCJza2V3WCIsInNrZXdZIiwieCQxIiwieSQxIiwiQ29sb3IiLCJyZ2IiLCJyZ2JhIiwiaHNsIiwiaHNsYSIsImhleCIsInRyYW5zcGFyZW50IiwiY3VycmVudENvbG9yIiwiR3JhZGllbnQiLCJsaW5lYXJHcmFkaWVudCIsImFuZ2xlIiwicmFkaWFsR3JhZGllbnQiLCJyZXBlYXRpbmdMaW5lYXJHcmFkaWVudCIsInJlcGVhdGluZ1JhZGlhbEdyYWRpZW50IiwiRm9udEZhbWlseU5hbWUiLCJibGFjayIsIndoaXRlIiwicnVsZVRvRGljdCIsInRvSnNvbiIsImFkZFN0b3AiLCJtYXJnaW5Ub1N0cmluZyIsInN0cmluZ19vZl9ib3JkZXJzdHlsZSIsIiQkZ2xvYmFsIiwiaW5qZWN0UnVsZSIsImluamVjdFJhdyIsInN0eWxlbmFtZXMiLCJtZXJnZVN0eWxlcyIsImZyYW1lcyIsIm1ha2VLZXlGcmFtZXMiLCJxdWVyeSIsImNyZWF0ZVN0eWxlT2JqZWN0IiwiZWxlbWVudFN0eWxlIiwic3R5bGVzaGVldCIsInN0eWxlT2JqZWN0IiwiY3JlYXRlQ2xhc3NOYW1lU3RyaW5nIiwiX3JlZiIsIl9yZWYkc3R5bGUiLCJ1c2VJbmxpbmVTdHlsZXMiLCJUYWdOYW1lIiwiY2hpbGRyZW5DcmVhdG9yIiwiY2hpbGRyZW5Db3VudCIsImNyZWF0ZUNoaWxkcmVuIiwibm9uU3R5bGVzaGVldENsYXNzTmFtZXMiLCJuZXdMaW5lUmVnZXgiLCJMaW5lTnVtYmVycyIsIl9yZWYyIiwiY29kZVN0cmluZyIsImNvZGVTdHlsZSIsIl9yZWYyJGNvbnRhaW5lclByb3BzIiwiY29udGFpbmVyUHJvcHMiLCJudW1iZXJQcm9wcyIsInN0YXJ0aW5nTGluZU51bWJlciIsImZsb2F0IiwicGFkZGluZ1JpZ2h0IiwiX3JlZiRudW1iZXJQcm9wcyIsImdldExpbmVOdW1iZXJzIiwiY3JlYXRlTGluZUVsZW1lbnQiLCJfcmVmMyIsImxpbmVQcm9wcyIsIl9yZWYzJGNsYXNzTmFtZSIsIndyYXBMaW5lc0luU3BhbiIsImNvZGVUcmVlIiwiZmxhdHRlbkNvZGVUcmVlIiwibmV3VHJlZSIsImxhc3RMaW5lQnJlYWtJbmRleCIsIl9sb29wIiwic3BsaXRWYWx1ZSIsIm5ld0NoaWxkIiwiX2NoaWxkcmVuIiwibmV3RWxlbSIsImRlZmF1bHRSZW5kZXJlciIsIl9yZWY0IiwiX3JlZjYiLCJfcmVmNiRzdHlsZSIsImRlZmF1bHRTdHlsZSIsIl9yZWY2JGN1c3RvbVN0eWxlIiwiY3VzdG9tU3R5bGUiLCJfcmVmNiRjb2RlVGFnUHJvcHMiLCJjb2RlVGFnUHJvcHMiLCJfcmVmNiR1c2VJbmxpbmVTdHlsZXMiLCJfcmVmNiRzaG93TGluZU51bWJlcnMiLCJzaG93TGluZU51bWJlcnMiLCJfcmVmNiRzdGFydGluZ0xpbmVOdW0iLCJsaW5lTnVtYmVyQ29udGFpbmVyUHJvcHMiLCJsaW5lTnVtYmVyUHJvcHMiLCJ3cmFwTGluZXMiLCJfcmVmNiRsaW5lUHJvcHMiLCJfcmVmNiRQcmVUYWciLCJQcmVUYWciLCJfcmVmNiRDb2RlVGFnIiwiQ29kZVRhZyIsIl9yZWY2JGNvZGUiLCJhc3RHZW5lcmF0b3IiLCJkZWZhdWx0QXN0R2VuZXJhdG9yIiwibGluZU51bWJlcnMiLCJkZWZhdWx0UHJlU3R5bGUiLCJobGpzIiwiYmFja2dyb3VuZENvbG9yIiwicHJlUHJvcHMiLCJkZWZhdWx0Q29kZVZhbHVlIiwiX3JlZjUiLCJnZXRMYW5ndWFnZSIsImhhc0xhbmd1YWdlIiwiaGlnaGxpZ2h0QXV0byIsImdldENvZGVUcmVlIiwicmVnaXN0ZXJMYW5ndWFnZSIsIlByb3BzIiwiZGVza3RvcENvbHVtbldpZHRoIiwiZGVza3RvcE1lZGlhUXVlcnkiLCJ0ZXh0Q29sb3VyIiwibGlua0NvbG91ciIsInNtYWxsQ2Fwc0NsYXNzTmFtZSIsImNlbnRyZWRDb2x1bW5DbGFzc05hbWUiLCJib3R0b21Cb3JkZXJDbGFzc05hbWUiLCJjb21iaW5lQ2xhc3NOYW1lcyIsImJhY2tncm91bmRDb2xvdXIiLCJsaW5rSG92ZXJDb2xvdXIiLCJyZWdpc3Rlckdsb2JhbFN0eWxlcyIsImhvdmVyU3R5bGVzIiwiYmFzZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZU9wdCIsImFjdGl2ZSIsImNsYXNzTmFtZSQxIiwicm91dGUiLCJhY3RpdmVSb3V0ZSIsInRtcCIsInBhZ2UiLCJwYWdlJDEiLCJOYXYkSG9tZUxpbmsiLCJOYXYkQ29udGFpbmVyIiwiY2xhc3NOYW1lJDIiLCJzaXRlTmFtZSIsIkNvbnRlbnQkQ29udGFpbmVyIiwiQ29udGVudCRNYWluIiwic3RlcE9wdCIsImN1dCIsImN1ciIsInJlYWN0TGlzdCIsInRvUm91dGUiLCJwYWdlRGF0YSIsImxldmVsT3B0IiwiTWFya2Rvd24kSFRNTEVsZW1lbnQiLCJjbGFzc05hbWVIMiIsImNsYXNzTmFtZUgzIiwiTWFya2Rvd24kU3R5bGVkSGVhZGluZyIsIk1hcmtkb3duJFN0eWxlZENvZGUiLCJyZW5kZXJQYXJhZ3JhcGgiLCJkaXJlY3Rpb24iLCJkb3VibGVPcHQiLCJkb3VibGUiLCIkJGRvdWJsZSIsImlzbyIsInRvSVNPU3RyaW5nIiwiZm9ybWF0dGVkIiwiRW50cnlQYWdlJEhlYWRlciIsIkVudHJ5UGFnZSRTdHlsZWRIZWFkaW5nIiwiRW50cnlQYWdlJFRhZ0l0ZW0iLCJjbGFzc05hbWUkMyIsIkVudHJ5UGFnZSRUYWdMaXN0IiwidGFncyQxIiwiY2xhc3NOYW1lJDQiLCJFbnRyeVBhZ2UkU3R5bGVkVGltZXN0YW1wIiwiY2xhc3NOYW1lJDUiLCJFbnRyeVBhZ2UkTmF2aWdhdGlvbkxpbmsiLCJjbGFzc05hbWUkNiIsIkVudHJ5UGFnZSROYXZpZ2F0aW9uTGlua0NvbnRhaW5lciIsImNsYXNzTmFtZSQ3IiwiRW50cnlQYWdlJE5hdmlnYXRpb24iLCJwcmV2aW91c0xpbmsiLCJuZXh0TGluayIsImNsYXNzTmFtZSQ4IiwiRW50cnlQYWdlJFN0eWxlZFBhcmFncmFwaCIsImNsYXNzTmFtZSQ5IiwiRW50cnlQYWdlJFN0eWxlZE1hcmtkb3duIiwiRW50cmllc0xpc3QkU3R5bGVkSGVhZGluZyIsIkVudHJpZXNMaXN0JEFydGljbGUiLCJFbnRyaWVzTGlzdCRIZWFkZXIiLCJFbnRyaWVzTGlzdCRQYWdlSXRlbSIsIkVudHJpZXNMaXN0JFBhZ2VMaW5rIiwiYnVpbGRQYWdlUm91dGUiLCJFbnRyaWVzTGlzdCRQcmV2aW91c1BhZ2VMaW5rcyIsImZpcnN0QXJyb3ciLCJwcmV2aW91c0Fycm93IiwiRW50cmllc0xpc3QkTmV4dFBhZ2VMaW5rcyIsInRvdGFsUGFnZXMiLCJuZXh0QXJyb3ciLCJsYXN0QXJyb3ciLCJFbnRyaWVzTGlzdCRQYWdlTnVtYmVyTGlua3MiLCJzdGFydFBhZ2UiLCJlbmRQYWdlIiwiZGlmZmVyZW5jZSIsIkVudHJpZXNMaXN0JFBhZ2luYXRpb24iLCJFbnRyaWVzTGlzdCRQYXJhZ3JhcGgiLCJwcmV2aWV3IiwiVGFnU2VhcmNoUGFnZSRMYWJlbCIsInBsdXJhbCIsIkFwcCRSb290Iiwibm90Rm91bmQiLCJkYXlUaW1lc3RhbXAiLCJydW5Qcm9taXNlIiwiY2F0Y2giLCJzYW5pdGlzZWRGaWxlbmFtZSIsIm10aW1lIiwicGFnZUVudHJpZXMiLCJmaWx0ZXJlZEVudHJpZXMiLCJzdGFydFRpbWUiLCJtcyIsImJvZHkiLCJyZW5kZXJlZEFwcCIsInNlZ21lbnRzIiwic2x1ZyQxIiwic2x1ZyQyIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3BsaXRVUkxTZWdtZW50cyIsImxpc3RlbiIsInByaW50RXJyb3IiLCJtYWluIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxLLCtCQy9FbkRoQyxFQUFPRCxRQUFVLEVBQVEsTSxjQ0gzQkMsRUFBT0QsUUFBVWtDLFFBQVEsUyxnQkNBekIsSUFDRSxJQUFJQyxFQUFPLEVBQVEsR0FFbkIsR0FBNkIsbUJBQWxCQSxFQUFLQyxTQUF5QixLQUFNLEdBQy9DbkMsRUFBT0QsUUFBVW1DLEVBQUtDLFNBQ3RCLE1BQU9DLEdBRVBwQyxFQUFPRCxRQUFVLEVBQVEsTyw2QkNMM0JDLEVBQU9ELFFBT1AsU0FBb0JzQyxHQUNsQixPQUFPQyxFQUFHQyxLQUNhLGlCQUFkRixFQUF5QkcsRUFBU0gsR0FBYUEsRUFBVUksT0FBTyxLQVAzRSxJQUFJRCxFQUFXRSxPQUFPQyxhQUNsQkwsRUFBSyxNLDZCQ0NUdEMsRUFBT0QsUUFBUTZDLElBQU0sS0FFckI1QyxFQUFPRCxRQUFROEMsU0FBVyxlQUUxQjdDLEVBQU9ELFFBQVErQyxTQUFXLElBRTFCOUMsRUFBT0QsUUFBUWdELGFBQWUsSUFFOUIvQyxFQUFPRCxRQUFRaUQsWUFBYyxJQUU3QmhELEVBQU9ELFFBQVFrRCxPQUFTLE9BRXhCakQsRUFBT0QsUUFBUW1ELFVBQVksTUFFM0JsRCxFQUFPRCxRQUFRb0Qsd0JBQTBCLHNCLGNDcEJ6Q25ELEVBQU9ELFFBQVVrQyxRQUFRLE8sY0NBekJqQyxFQUFPRCxRQUlQLFdBR0ksSUFGQSxJQUFJcUQsRUFBUyxHQUVKbkQsRUFBSSxFQUFHQSxFQUFJb0QsVUFBVUMsT0FBUXJELElBQUssQ0FDdkMsSUFBSXNELEVBQVNGLFVBQVVwRCxHQUV2QixJQUFLLElBQUl1QixLQUFPK0IsRUFDUnpCLEVBQWUxQixLQUFLbUQsRUFBUS9CLEtBQzVCNEIsRUFBTzVCLEdBQU8rQixFQUFPL0IsSUFLakMsT0FBTzRCLEdBZlgsSUFBSXRCLEVBQWlCbkIsT0FBT2tCLFVBQVVDLGdCLGNDRnRDOUIsRUFBT0QsUUFBVWtDLFFBQVEsVyxjQ3dHekIsU0FBU3VCLEVBQWU5QyxHQUN0QixPQUFPQyxPQUFPa0IsVUFBVTRCLFNBQVNyRCxLQUFLTSxHQTNFeENYLEVBQVEyRCxRQU5SLFNBQWlCQyxHQUNmLE9BQUlDLE1BQU1GLFFBQ0RFLE1BQU1GLFFBQVFDLEdBRVEsbUJBQXhCSCxFQUFlRyxJQU94QjVELEVBQVE4RCxVQUhSLFNBQW1CRixHQUNqQixNQUFzQixrQkFBUkEsR0FPaEI1RCxFQUFRK0QsT0FIUixTQUFnQkgsR0FDZCxPQUFlLE9BQVJBLEdBT1Q1RCxFQUFRZ0Usa0JBSFIsU0FBMkJKLEdBQ3pCLE9BQWMsTUFBUEEsR0FPVDVELEVBQVFpRSxTQUhSLFNBQWtCTCxHQUNoQixNQUFzQixpQkFBUkEsR0FPaEI1RCxFQUFRa0UsU0FIUixTQUFrQk4sR0FDaEIsTUFBc0IsaUJBQVJBLEdBT2hCNUQsRUFBUW1FLFNBSFIsU0FBa0JQLEdBQ2hCLE1BQXNCLGlCQUFSQSxHQU9oQjVELEVBQVFvRSxZQUhSLFNBQXFCUixHQUNuQixZQUFlLElBQVJBLEdBT1Q1RCxFQUFRcUUsU0FIUixTQUFrQjlCLEdBQ2hCLE1BQThCLG9CQUF2QmtCLEVBQWVsQixJQU94QnZDLEVBQVFzRSxTQUhSLFNBQWtCVixHQUNoQixNQUFzQixpQkFBUkEsR0FBNEIsT0FBUkEsR0FPcEM1RCxFQUFRdUUsT0FIUixTQUFnQi9ELEdBQ2QsTUFBNkIsa0JBQXRCaUQsRUFBZWpELElBT3hCUixFQUFRd0UsUUFIUixTQUFpQm5DLEdBQ2YsTUFBOEIsbUJBQXRCb0IsRUFBZXBCLElBQTJCQSxhQUFhb0MsT0FPakV6RSxFQUFRMEUsV0FIUixTQUFvQmQsR0FDbEIsTUFBc0IsbUJBQVJBLEdBWWhCNUQsRUFBUTJFLFlBUlIsU0FBcUJmLEdBQ25CLE9BQWUsT0FBUkEsR0FDZSxrQkFBUkEsR0FDUSxpQkFBUkEsR0FDUSxpQkFBUkEsR0FDUSxpQkFBUkEsUUFDUSxJQUFSQSxHQUloQjVELEVBQVE0RSxTQUFXQyxPQUFPRCxVLGNDdEcxQjNFLEVBQU9ELFFBQVVrQyxRQUFRLFMsNkJDa0N6QixJQUFJM0IsRUFBSSxFQUFRLEdBc0NadUUsRUFBUzdFLEVBQU9ELFFBQVUsU0FBZ0IrRSxHQWE1QyxHQVpBQSxFQUFVQSxHQUFXLEdBQ3JCQyxLQUFLQyxjQUFnQkYsRUFBUUUsZUFBaUIsR0FDOUNELEtBQUtFLEtBQU9ILEVBQVFHLEtBQ3BCRixLQUFLRyxXQUFpQyxJQUFsQkosRUFBUUksTUFBd0JKLEVBQVFJLE1BQVEsS0FDcEVILEtBQUtJLGNBQXVDLElBQXJCTCxFQUFRSyxTQUEyQkwsRUFBUUssU0FBVyxLQUM3RUosS0FBS0ssYUFBZU4sRUFBUU0sYUFDNUJMLEtBQUtNLFVBQStCLElBQWpCUCxFQUFRTyxLQUF1QlAsRUFBUU8sS0FBTyxLQUNqRU4sS0FBS08sYUFBcUMsSUFBcEJSLEVBQVFRLFFBQTBCUixFQUFRUSxRQUFVLEtBQzFFUCxLQUFLUSxjQUF1QyxJQUFyQlQsRUFBUVMsVUFBMkJULEVBQVFTLFNBQ2xFUixLQUFLUyxVQUErQixJQUFqQlYsRUFBUVUsS0FBdUJWLEVBQVFVLEtBQU8sS0FDakVULEtBQUtVLGFBQXFDLElBQXBCWCxFQUFRVyxRQUEwQlgsRUFBUVcsUUFBVSxPQUVwRVYsS0FBS0MseUJBQXlCcEIsT0FDbEMsTUFBTSxJQUFJWSxNQUFNLG9DQUVsQixRQUE2QixJQUFsQk8sS0FBS1EsVUFBcUQsa0JBQWxCUixLQUFLUSxTQUN0RCxNQUFNLElBQUlmLE1BQU0saUNBU3BCSyxFQUFPaEQsVUFBVTZELFFBQVUsV0FDekIsT0FBSVgsS0FBS0MsY0FBYzFCLE9BQVMsRUFDdkJ5QixLQUFLQyxjQUFjVyxLQUFLLEtBQ0wsT0FBakJaLEtBQUtVLFNBQW9CVixLQUFLVSxVQUFZbkYsRUFBRXVDLFNBQzlDa0MsS0FBS1UsYUFDa0IsSUFBZFYsS0FBS0UsTUFBd0JGLEtBQUtFLE9BQVMzRSxFQUFFdUMsU0FDdERrQyxLQUFLRSxLQUVQLE1BUVRKLEVBQU9oRCxVQUFVK0QsV0FBYSxXQUM1QixPQUFRYixLQUFLYyxnQkFRZmhCLEVBQU9oRCxVQUFVZ0UsYUFBZSxXQUM5QixPQUFzQyxJQUE5QmQsS0FBS0MsY0FBYzFCLFFBbUI3QnVCLEVBQU9oRCxVQUFVekIsS0FBTyxXQUN0QixNQUFNLElBQUlvRSxNQUFNLHlCLHNiQzVGbEIsSUFBSXNCLEVBRUosV0FDRSxTQUFTQSxFQUFXaEIsR0FDbEJDLEtBQUtnQixjQUE4QkMsSUFBbkJsQixFQUFRbUIsUUFBK0RuQixFQUFRbUIsT0FDL0ZsQixLQUFLbUIsS0FBTyxHQUNabkIsS0FBS29CLElBQU0sRUFDWHBCLEtBQUtxQixNQUFRdEIsRUFBUXNCLE1BRXJCckIsS0FBS3ZELElBQU1zRCxFQUFRdEQsSUFDbkJ1RCxLQUFLc0IsVUFBWXZCLEVBQVF1QixVQUN6QnRCLEtBQUt1QixPQUFTLEtBR2hCLElBQUlDLEVBQVNULEVBQVdqRSxVQWlFeEIsT0EvREEwRSxFQUFPQyxPQUFTLFNBQWdCQyxHQUk5QixHQUFJMUIsS0FBS29CLEtBQU9wQixLQUFLZ0IsU0FBVyxLQUFRLElBQU8sRUFBRyxDQUNoRCxJQUVJTyxFQUZBSSxFQWpDVixTQUE0QjVCLEdBQzFCLElBQUk2QixFQUFNQyxTQUFTQyxjQUFjLFNBUWpDLE9BUEFGLEVBQUlHLGFBQWEsZUFBZ0JoQyxFQUFRdEQsVUFFbkJ3RSxJQUFsQmxCLEVBQVFzQixPQUNWTyxFQUFJRyxhQUFhLFFBQVNoQyxFQUFRc0IsT0FHcENPLEVBQUlJLFlBQVlILFNBQVNJLGVBQWUsS0FDakNMLEVBd0JRTSxDQUFtQmxDLE1BSzVCdUIsRUFEdUIsSUFBckJ2QixLQUFLbUIsS0FBSzVDLE9BQ0h5QixLQUFLdUIsT0FFTHZCLEtBQUttQixLQUFLbkIsS0FBS21CLEtBQUs1QyxPQUFTLEdBQUc0RCxZQUczQ25DLEtBQUtzQixVQUFVYyxhQUFhVCxFQUFNSixHQUNsQ3ZCLEtBQUttQixLQUFLa0IsS0FBS1YsR0FHakIsSUFBSUMsRUFBTTVCLEtBQUttQixLQUFLbkIsS0FBS21CLEtBQUs1QyxPQUFTLEdBRXZDLEdBQUl5QixLQUFLZ0IsU0FBVSxDQUNqQixJQUFJc0IsRUFuRVYsU0FBcUJWLEdBQ25CLEdBQUlBLEVBQUlVLE1BRU4sT0FBT1YsRUFBSVUsTUFNYixJQUFLLElBQUlwSCxFQUFJLEVBQUdBLEVBQUkyRyxTQUFTVSxZQUFZaEUsT0FBUXJELElBQy9DLEdBQUkyRyxTQUFTVSxZQUFZckgsR0FBR3NILFlBQWNaLEVBRXhDLE9BQU9DLFNBQVNVLFlBQVlySCxHQXVEaEJ1SCxDQUFZYixHQUV4QixJQUtFLElBQUljLEVBQXNDLE1BQXZCaEIsRUFBS2lCLFdBQVcsSUFBcUMsS0FBdkJqQixFQUFLaUIsV0FBVyxHQUdqRUwsRUFBTU0sV0FBV2xCLEVBU2pCZ0IsRUFBZSxFQUFJSixFQUFNTyxTQUFTdEUsUUFDbEMsTUFBT2xCLEdBQ0gsUUFLTnVFLEVBQUlJLFlBQVlILFNBQVNJLGVBQWVQLElBRzFDMUIsS0FBS29CLE9BR1BJLEVBQU9zQixNQUFRLFdBRWI5QyxLQUFLbUIsS0FBSzRCLFNBQVEsU0FBVW5CLEdBQzFCLE9BQU9BLEVBQUlvQixXQUFXQyxZQUFZckIsTUFFcEM1QixLQUFLbUIsS0FBTyxHQUNabkIsS0FBS29CLElBQU0sR0FHTkwsRUE3RVQsR0NnakJlLE1BdG1CZixTQUFxQm1DLEdBa1VuQixTQUFTQyxFQUFFM0gsRUFBR0QsRUFBRzhCLEdBQ2YsSUFBSStGLEVBQUk3SCxFQUFFOEgsT0FBT0MsTUFBTUMsR0FDdkJoSSxFQUFJNkgsRUFDSixJQUFJSSxFQUFJSixFQUFFN0UsT0FDTmpELEVBQUlFLEVBQUUrQyxPQUVWLE9BQVFqRCxHQUNOLEtBQUssRUFDTCxLQUFLLEVBQ0gsSUFBSW1JLEVBQUksRUFFUixJQUFLakksRUFBSSxJQUFNRixFQUFJLEdBQUtFLEVBQUUsR0FBSyxJQUFLaUksRUFBSUQsSUFBS0MsRUFDM0NsSSxFQUFFa0ksR0FBS0MsRUFBRWxJLEVBQUdELEVBQUVrSSxHQUFJcEcsR0FBR2dHLE9BR3ZCLE1BRUYsUUFDRSxJQUFJTSxFQUFJRixFQUFJLEVBRVosSUFBS2xJLEVBQUksR0FBSWtJLEVBQUlELElBQUtDLEVBQ3BCLElBQUssSUFBSTlHLEVBQUksRUFBR0EsRUFBSXJCLElBQUtxQixFQUN2QnBCLEVBQUVvSSxLQUFPRCxFQUFFbEksRUFBRW1CLEdBQUssSUFBS3lHLEVBQUVLLEdBQUlwRyxHQUFHZ0csT0FNeEMsT0FBTzlILEVBR1QsU0FBU21JLEVBQUVsSSxFQUFHRCxFQUFHOEIsR0FDZixJQUFJK0YsRUFBSTdILEVBQUVvSCxXQUFXLEdBR3JCLE9BRkEsR0FBS1MsSUFBTUEsR0FBSzdILEVBQUlBLEVBQUU4SCxRQUFRVixXQUFXLElBRWpDUyxHQUNOLEtBQUssR0FDSCxPQUFPN0gsRUFBRXFJLFFBQVFDLEVBQUcsS0FBT3JJLEVBQUU2SCxRQUUvQixLQUFLLEdBQ0gsT0FBTzdILEVBQUU2SCxPQUFTOUgsRUFBRXFJLFFBQVFDLEVBQUcsS0FBT3JJLEVBQUU2SCxRQUUxQyxRQUNFLEdBQUksRUFBSSxFQUFJaEcsR0FBSyxFQUFJOUIsRUFBRXVJLFFBQVEsTUFBTyxPQUFPdkksRUFBRXFJLFFBQVFDLEdBQUksS0FBT3JJLEVBQUVtSCxXQUFXLEdBQUssR0FBSyxNQUFRbkgsRUFBRTZILFFBR3ZHLE9BQU83SCxFQUFJRCxFQUdiLFNBQVN3SSxFQUFFdkksRUFBR0QsRUFBRzhCLEVBQUcrRixHQUNsQixJQUFJSSxFQUFJaEksRUFBSSxJQUNSRixFQUFJLEVBQUlDLEVBQUksRUFBSThCLEVBQUksRUFBSStGLEVBRTVCLEdBQUksTUFBUTlILEVBQUcsQ0FDYkUsRUFBSWdJLEVBQUVNLFFBQVEsSUFBSyxHQUFLLEVBQ3hCLElBQUlMLEVBQUlELEVBQUVRLFVBQVV4SSxFQUFHZ0ksRUFBRWpGLE9BQVMsR0FBRzhFLE9BRXJDLE9BREFJLEVBQUlELEVBQUVRLFVBQVUsRUFBR3hJLEdBQUc2SCxPQUFTSSxFQUFJLElBQzVCLElBQU1RLEdBQUssSUFBTUEsR0FBS0MsRUFBRVQsRUFBRyxHQUFLLFdBQWFBLEVBQUlBLEVBQUlBLEVBRzlELEdBQUksSUFBTVEsR0FBSyxJQUFNQSxJQUFNQyxFQUFFVixFQUFHLEdBQUksT0FBT0EsRUFFM0MsT0FBUWxJLEdBQ04sS0FBSyxLQUNILE9BQU8sS0FBT2tJLEVBQUViLFdBQVcsSUFBTSxXQUFhYSxFQUFJQSxFQUFJQSxFQUV4RCxLQUFLLElBQ0gsT0FBTyxNQUFRQSxFQUFFYixXQUFXLEdBQUssV0FBYWEsRUFBSUEsRUFBSUEsRUFFeEQsS0FBSyxJQUNILE9BQU8sTUFBUUEsRUFBRWIsV0FBVyxHQUFLLFdBQWFhLEVBQUlBLEVBQUlBLEVBRXhELEtBQUssS0FDSCxHQUFJLE1BQVFBLEVBQUViLFdBQVcsR0FBSSxNQUUvQixLQUFLLElBQ0wsS0FBSyxJQUNILE1BQU8sV0FBYWEsRUFBSUEsRUFFMUIsS0FBSyxJQUNILE1BQU8sV0FBYUEsRUFBSSxRQUFVQSxFQUFJQSxFQUV4QyxLQUFLLEtBQ0wsS0FBSyxJQUNILE1BQU8sV0FBYUEsRUFBSSxRQUFVQSxFQUFJLE9BQVNBLEVBQUlBLEVBRXJELEtBQUssSUFDSCxHQUFJLEtBQU9BLEVBQUViLFdBQVcsR0FBSSxNQUFPLFdBQWFhLEVBQUlBLEVBQ3BELEdBQUksRUFBSUEsRUFBRU0sUUFBUSxhQUFjLElBQUssT0FBT04sRUFBRUksUUFBUU8sRUFBSSxnQkFBa0JYLEVBQzVFLE1BRUYsS0FBSyxJQUNILEdBQUksS0FBT0EsRUFBRWIsV0FBVyxHQUFJLE9BQVFhLEVBQUViLFdBQVcsSUFDL0MsS0FBSyxJQUNILE1BQU8sZUFBaUJhLEVBQUVJLFFBQVEsUUFBUyxJQUFNLFdBQWFKLEVBQUksT0FBU0EsRUFBRUksUUFBUSxPQUFRLFlBQWNKLEVBRTdHLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksT0FBU0EsRUFBRUksUUFBUSxTQUFVLFlBQWNKLEVBRXJFLEtBQUssR0FDSCxNQUFPLFdBQWFBLEVBQUksT0FBU0EsRUFBRUksUUFBUSxRQUFTLGtCQUFvQkosRUFFNUUsTUFBTyxXQUFhQSxFQUFJLE9BQVNBLEVBQUlBLEVBRXZDLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksWUFBY0EsRUFBSUEsRUFFNUMsS0FBSyxLQUNILEdBQUksS0FBT0EsRUFBRWIsV0FBVyxHQUFJLE1BRTVCLE1BQU8sb0JBRFBjLEVBQUlELEVBQUVRLFVBQVVSLEVBQUVNLFFBQVEsSUFBSyxLQUFLRixRQUFRLFFBQVMsSUFBSUEsUUFBUSxnQkFBaUIsWUFDbEQsV0FBYUosRUFBSSxnQkFBa0JDLEVBQUlELEVBRXpFLEtBQUssS0FDSCxPQUFPWSxFQUFHNUcsS0FBS2dHLEdBQUtBLEVBQUVJLFFBQVFTLEVBQUksYUFBZWIsRUFBRUksUUFBUVMsRUFBSSxVQUFZYixFQUFJQSxFQUVqRixLQUFLLElBSUgsT0FGQWpJLEdBREFrSSxFQUFJRCxFQUFFUSxVQUFVLElBQUlYLFFBQ2RTLFFBQVEsS0FBTyxFQUViTCxFQUFFZCxXQUFXLEdBQUtjLEVBQUVkLFdBQVdwSCxJQUNyQyxLQUFLLElBQ0hrSSxFQUFJRCxFQUFFSSxRQUFRVSxFQUFHLE1BQ2pCLE1BRUYsS0FBSyxJQUNIYixFQUFJRCxFQUFFSSxRQUFRVSxFQUFHLFNBQ2pCLE1BRUYsS0FBSyxJQUNIYixFQUFJRCxFQUFFSSxRQUFRVSxFQUFHLE1BQ2pCLE1BRUYsUUFDRSxPQUFPZCxFQUdYLE1BQU8sV0FBYUEsRUFBSSxPQUFTQyxFQUFJRCxFQUV2QyxLQUFLLEtBQ0gsSUFBSyxJQUFNQSxFQUFFTSxRQUFRLFNBQVUsR0FBSSxNQUVyQyxLQUFLLElBSUgsT0FIQXZJLEdBQUtpSSxFQUFJaEksR0FBRytDLE9BQVMsR0FHYmpELEdBRlJtSSxHQUFLLEtBQU9ELEVBQUViLFdBQVdwSCxHQUFLaUksRUFBRVEsVUFBVSxFQUFHekksR0FBS2lJLEdBQUdRLFVBQVV4SSxFQUFFc0ksUUFBUSxJQUFLLEdBQUssR0FBR1QsUUFFeEVWLFdBQVcsSUFBd0IsRUFBbEJjLEVBQUVkLFdBQVcsS0FDMUMsS0FBSyxJQUNILEdBQUksSUFBTWMsRUFBRWQsV0FBVyxHQUFJLE1BRTdCLEtBQUssSUFDSGEsRUFBSUEsRUFBRUksUUFBUUgsRUFBRyxXQUFhQSxHQUFLLElBQU1ELEVBQ3pDLE1BRUYsS0FBSyxJQUNMLEtBQUssSUFDSEEsRUFBSUEsRUFBRUksUUFBUUgsRUFBRyxZQUFjLElBQU1uSSxFQUFJLFVBQVksSUFBTSxPQUFTLElBQU1rSSxFQUFFSSxRQUFRSCxFQUFHLFdBQWFBLEdBQUssSUFBTUQsRUFBRUksUUFBUUgsRUFBRyxPQUFTQSxFQUFJLE9BQVMsSUFBTUQsRUFHNUosT0FBT0EsRUFBSSxJQUViLEtBQUssSUFDSCxHQUFJLEtBQU9BLEVBQUViLFdBQVcsR0FBSSxPQUFRYSxFQUFFYixXQUFXLElBQy9DLEtBQUssSUFDSCxPQUFPYyxFQUFJRCxFQUFFSSxRQUFRLFNBQVUsSUFBSyxXQUFhSixFQUFJLGVBQWlCQyxFQUFJLFlBQWNBLEVBQUlELEVBRTlGLEtBQUssSUFDSCxNQUFPLFdBQWFBLEVBQUksaUJBQW1CQSxFQUFFSSxRQUFRVyxFQUFJLElBQU1mLEVBRWpFLFFBQ0UsTUFBTyxXQUFhQSxFQUFJLHFCQUF1QkEsRUFBRUksUUFBUSxnQkFBaUIsSUFBSUEsUUFBUVcsRUFBSSxJQUFNZixFQUVwRyxNQUVGLEtBQUssSUFDTCxLQUFLLElBQ0gsR0FBSSxLQUFPQSxFQUFFYixXQUFXLElBQU0sTUFBUWEsRUFBRWIsV0FBVyxHQUFJLE1BRXpELEtBQUssSUFDTCxLQUFLLElBQ0gsSUFBSSxJQUFPNkIsRUFBR2hILEtBQUtoQyxHQUFJLE9BQU8sT0FBU2lJLEVBQUlqSSxFQUFFd0ksVUFBVXhJLEVBQUVzSSxRQUFRLEtBQU8sSUFBSW5CLFdBQVcsR0FBS29CLEVBQUV2SSxFQUFFb0ksUUFBUSxVQUFXLGtCQUFtQnJJLEVBQUc4QixFQUFHK0YsR0FBR1EsUUFBUSxrQkFBbUIsWUFBY0osRUFBRUksUUFBUUgsRUFBRyxXQUFhQSxHQUFLRCxFQUFFSSxRQUFRSCxFQUFHLFFBQVVBLEVBQUVHLFFBQVEsUUFBUyxLQUFPSixFQUN4USxNQUVGLEtBQUssSUFDSCxHQUFJQSxFQUFJLFdBQWFBLEdBQUssTUFBUUEsRUFBRWIsV0FBVyxHQUFLLE9BQVNhLEVBQUksSUFBTUEsRUFBRyxNQUFRbkcsRUFBSStGLEdBQUssTUFBUUksRUFBRWIsV0FBVyxLQUFPLEVBQUlhLEVBQUVNLFFBQVEsWUFBYSxJQUFLLE9BQU9OLEVBQUVRLFVBQVUsRUFBR1IsRUFBRU0sUUFBUSxJQUFLLElBQU0sR0FBR0YsUUFBUWEsRUFBSSxnQkFBa0JqQixFQUd2TyxPQUFPQSxFQUdULFNBQVNVLEVBQUUxSSxFQUFHRCxHQUNaLElBQUk4QixFQUFJN0IsRUFBRXNJLFFBQVEsSUFBTXZJLEVBQUksSUFBTSxLQUM5QjZILEVBQUk1SCxFQUFFd0ksVUFBVSxFQUFHLElBQU16SSxFQUFJOEIsRUFBSSxJQUVyQyxPQURBQSxFQUFJN0IsRUFBRXdJLFVBQVUzRyxFQUFJLEVBQUc3QixFQUFFK0MsT0FBUyxHQUMzQm1HLEVBQUUsSUFBTW5KLEVBQUk2SCxFQUFJQSxFQUFFUSxRQUFRZSxFQUFJLE1BQU90SCxFQUFHOUIsR0FHakQsU0FBU3FKLEVBQUdwSixFQUFHRCxHQUNiLElBQUk4QixFQUFJMEcsRUFBRXhJLEVBQUdBLEVBQUVvSCxXQUFXLEdBQUlwSCxFQUFFb0gsV0FBVyxHQUFJcEgsRUFBRW9ILFdBQVcsSUFDNUQsT0FBT3RGLElBQU05QixFQUFJLElBQU04QixFQUFFdUcsUUFBUWlCLEVBQUksWUFBWWIsVUFBVSxHQUFLLElBQU16SSxFQUFJLElBRzVFLFNBQVN1SixFQUFFdEosRUFBR0QsRUFBRzhCLEVBQUcrRixFQUFHSSxFQUFHbEksRUFBR21JLEVBQUdFLEVBQUdoSCxFQUFHb0ksR0FDcEMsSUFBSyxJQUFrQmQsRUFBZGUsRUFBSSxFQUFHQyxFQUFJMUosRUFBTXlKLEVBQUlFLElBQUtGLEVBQ2pDLE9BQVFmLEVBQUlrQixFQUFFSCxHQUFHM0osS0FBSytKLEVBQUc1SixFQUFHeUosRUFBRzVILEVBQUcrRixFQUFHSSxFQUFHbEksRUFBR21JLEVBQUdFLEVBQUdoSCxFQUFHb0ksSUFDbEQsVUFBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxLQUNILE1BRUYsUUFDRUUsRUFBSWhCLEVBSVYsR0FBSWdCLElBQU0xSixFQUFHLE9BQU8wSixFQW1CdEIsU0FBU0ksRUFBRTdKLEdBR1QsWUFEQSxLQURBQSxFQUFJQSxFQUFFOEosVUFDV1osRUFBSSxLQUFNbEosRUFBSSxtQkFBc0JBLEVBQUl5SSxFQUFJLEdBQUtBLEVBQUksRUFBR1MsRUFBSWxKLEdBQUt5SSxFQUFJLEdBQy9Fb0IsRUFHVCxTQUFTRCxFQUFFNUosRUFBR0QsR0FDWixJQUFJOEIsRUFBSTdCLEVBS1IsR0FKQSxHQUFLNkIsRUFBRXNGLFdBQVcsS0FBT3RGLEVBQUlBLEVBQUVnRyxRQUUvQmhHLEVBQUksQ0FEQUEsR0FHQSxFQUFJNkgsRUFBRyxDQUNULElBQUk5QixFQUFJMEIsR0FBRyxFQUFHdkosRUFBRzhCLEVBQUdBLEVBQUdrSSxFQUFHQyxFQUFHLEVBQUcsRUFBRyxFQUFHLFFBQ3RDLElBQVdwQyxHQUFLLGlCQUFvQkEsSUFBTTdILEVBQUk2SCxHQUdoRCxJQUFJSSxFQTVqQk4sU0FBU2lDLEVBQUVqSyxFQUFHRCxFQUFHOEIsRUFBRytGLEVBQUdJLEdBQ3JCLElBQUssSUFBZ0N1QixFQUFHQyxFQUFpQlUsRUFBdUVDLEVBQW1DQyxFQUExSnRLLEVBQUksRUFBR21JLEVBQUksRUFBR0UsRUFBSSxFQUFHaEgsRUFBSSxFQUFTc0ksRUFBSSxFQUFHWSxFQUFJLEVBQU1DLEVBQUlKLEVBQUlYLEVBQUksRUFBRzVKLEVBQUksRUFBR2EsRUFBSSxFQUFHK0osRUFBSSxFQUFHM0osRUFBSSxFQUFHZ0osRUFBSS9ILEVBQUVrQixPQUFReUgsRUFBSVosRUFBSSxFQUFNYSxFQUFJLEdBQUlqSixFQUFJLEdBQUk2RyxFQUFJLEdBQUlTLEVBQUksR0FBT25KLEVBQUlpSyxHQUFJLENBSTVLLEdBSEFKLEVBQUkzSCxFQUFFc0YsV0FBV3hILEdBQ2pCQSxJQUFNNkssR0FBSyxJQUFNdkMsRUFBSTlHLEVBQUlnSCxFQUFJckksSUFBTSxJQUFNbUksSUFBTXVCLEVBQUksS0FBT3ZCLEVBQUksR0FBSyxJQUFLOUcsRUFBSWdILEVBQUlySSxFQUFJLEVBQUc4SixJQUFLWSxLQUV4RixJQUFNdkMsRUFBSTlHLEVBQUlnSCxFQUFJckksRUFBRyxDQUN2QixHQUFJSCxJQUFNNkssSUFBTSxFQUFJaEssSUFBTWlLLEVBQUlBLEVBQUVyQyxRQUFRc0MsRUFBRyxLQUFNLEVBQUlELEVBQUU1QyxPQUFPOUUsUUFBUyxDQUNyRSxPQUFReUcsR0FDTixLQUFLLEdBQ0wsS0FBSyxFQUNMLEtBQUssR0FDTCxLQUFLLEdBQ0wsS0FBSyxHQUNILE1BRUYsUUFDRWlCLEdBQUs1SSxFQUFFSyxPQUFPdkMsR0FHbEI2SixFQUFJLEdBR04sT0FBUUEsR0FDTixLQUFLLElBS0gsSUFIQUQsR0FEQWtCLEVBQUlBLEVBQUU1QyxRQUNBVixXQUFXLEdBQ2pCK0MsRUFBSSxFQUVDdEosSUFBTWpCLEVBQUdBLEVBQUlpSyxHQUFJLENBQ3BCLE9BQVFKLEVBQUkzSCxFQUFFc0YsV0FBV3hILElBQ3ZCLEtBQUssSUFDSHVLLElBQ0EsTUFFRixLQUFLLElBQ0hBLElBQ0EsTUFFRixLQUFLLEdBQ0gsT0FBUVYsRUFBSTNILEVBQUVzRixXQUFXeEgsRUFBSSxJQUMzQixLQUFLLEdBQ0wsS0FBSyxHQUNIcUksRUFBRyxDQUNELElBQUtzQyxFQUFJM0ssRUFBSSxFQUFHMkssRUFBSUUsSUFBS0YsRUFDdkIsT0FBUXpJLEVBQUVzRixXQUFXbUQsSUFDbkIsS0FBSyxHQUNILEdBQUksS0FBT2QsR0FBSyxLQUFPM0gsRUFBRXNGLFdBQVdtRCxFQUFJLElBQU0zSyxFQUFJLElBQU0ySyxFQUFHLENBQ3pEM0ssRUFBSTJLLEVBQUksRUFDUixNQUFNdEMsRUFHUixNQUVGLEtBQUssR0FDSCxHQUFJLEtBQU93QixFQUFHLENBQ1o3SixFQUFJMkssRUFBSSxFQUNSLE1BQU10QyxHQU1kckksRUFBSTJLLEdBS1YsTUFFRixLQUFLLEdBQ0hkLElBRUYsS0FBSyxHQUNIQSxJQUVGLEtBQUssR0FDTCxLQUFLLEdBQ0gsS0FBTzdKLElBQU02SyxHQUFLM0ksRUFBRXNGLFdBQVd4SCxLQUFPNkosS0FLMUMsR0FBSSxJQUFNVSxFQUFHLE1BQ2J2SyxJQU1GLE9BSEF1SyxFQUFJckksRUFBRTJHLFVBQVU1SCxFQUFHakIsR0FDbkIsSUFBTTRKLElBQU1BLEdBQUtrQixFQUFJQSxFQUFFckMsUUFBUXVDLEVBQUksSUFBSTlDLFFBQVFWLFdBQVcsSUFFbERvQyxHQUNOLEtBQUssR0FJSCxPQUhBLEVBQUkvSSxJQUFNaUssRUFBSUEsRUFBRXJDLFFBQVFzQyxFQUFHLEtBQzNCbEIsRUFBSWlCLEVBQUV0RCxXQUFXLElBR2YsS0FBSyxJQUNMLEtBQUssSUFDTCxLQUFLLElBQ0wsS0FBSyxHQUNIM0csRUFBSVQsRUFDSixNQUVGLFFBQ0VTLEVBQUlvSyxFQU1SLEdBRkFoSyxHQURBc0osRUFBSUQsRUFBRWxLLEVBQUdTLEVBQUcwSixFQUFHVixFQUFHeEIsRUFBSSxJQUNoQmpGLE9BQ04sRUFBSTJHLElBQXNCVSxFQUFJZCxFQUFFLEVBQUdZLEVBQXpCMUosRUFBSW1ILEVBQUVpRCxFQUFHSCxFQUFHRixHQUFtQnhLLEVBQUdnSyxFQUFHQyxFQUFHcEosRUFBRzRJLEVBQUd4QixFQUFHSixHQUFJNkMsRUFBSWpLLEVBQUU0RSxLQUFLLFNBQUssSUFBV2dGLEdBQUssS0FBT3hKLEdBQUtzSixFQUFJRSxFQUFFdkMsUUFBUTlFLFVBQVl5RyxFQUFJLEVBQUdVLEVBQUksS0FDNUksRUFBSXRKLEVBQUcsT0FBUTRJLEdBQ2pCLEtBQUssSUFDSGlCLEVBQUlBLEVBQUVyQyxRQUFReUMsRUFBSXpCLEdBRXBCLEtBQUssSUFDTCxLQUFLLElBQ0wsS0FBSyxHQUNIYyxFQUFJTyxFQUFJLElBQU1QLEVBQUksSUFDbEIsTUFFRixLQUFLLElBRUhBLEdBREFPLEVBQUlBLEVBQUVyQyxRQUFRMEMsRUFBSSxVQUNWLElBQU1aLEVBQUksSUFDbEJBLEVBQUksSUFBTXpCLEdBQUssSUFBTUEsR0FBS0MsRUFBRSxJQUFNd0IsRUFBRyxHQUFLLFlBQWNBLEVBQUksSUFBTUEsRUFBSSxJQUFNQSxFQUM1RSxNQUVGLFFBQ0VBLEVBQUlPLEVBQUlQLEVBQUcsTUFBUXRDLElBQVdwRyxHQUFLMEksRUFBVkEsRUFBYSxTQUNuQ0EsRUFBSSxHQUNYLE1BRUYsUUFDRUEsRUFBSUQsRUFBRWxLLEVBQUc0SCxFQUFFNUgsRUFBRzBLLEVBQUdGLEdBQUlMLEVBQUd0QyxFQUFHSSxFQUFJLEdBR25DSyxHQUFLNkIsRUFDTEEsRUFBSUssRUFBSS9KLEVBQUk4SixFQUFJZixFQUFJLEVBQ3BCa0IsRUFBSSxHQUNKakIsRUFBSTNILEVBQUVzRixhQUFheEgsR0FDbkIsTUFFRixLQUFLLElBQ0wsS0FBSyxHQUVILEdBQUksR0FBS2lCLEdBRFQ2SixHQUFLLEVBQUlqSyxFQUFJaUssRUFBRXJDLFFBQVFzQyxFQUFHLElBQU1ELEdBQUc1QyxRQUNwQjlFLFFBQVMsT0FBUSxJQUFNdUgsSUFBTWYsRUFBSWtCLEVBQUV0RCxXQUFXLEdBQUksS0FBT29DLEdBQUssR0FBS0EsR0FBSyxJQUFNQSxLQUFPM0ksR0FBSzZKLEVBQUlBLEVBQUVyQyxRQUFRLElBQUssTUFBTXJGLFFBQVMsRUFBSTJHLFFBQUssS0FBWVUsRUFBSWQsRUFBRSxFQUFHbUIsRUFBRzFLLEVBQUdDLEVBQUcrSixFQUFHQyxFQUFHeEksRUFBRXVCLE9BQVE2RSxFQUFHSSxFQUFHSixLQUFPLEtBQU9oSCxHQUFLNkosRUFBSUwsRUFBRXZDLFFBQVE5RSxVQUFZMEgsRUFBSSxRQUFhbEIsRUFBSWtCLEVBQUV0RCxXQUFXLEdBQUlxQyxFQUFJaUIsRUFBRXRELFdBQVcsR0FBSW9DLEdBQzlTLEtBQUssRUFDSCxNQUVGLEtBQUssR0FDSCxHQUFJLE1BQVFDLEdBQUssS0FBT0EsRUFBRyxDQUN6QlYsR0FBSzJCLEVBQUk1SSxFQUFFSyxPQUFPdkMsR0FDbEIsTUFHSixRQUNFLEtBQU84SyxFQUFFdEQsV0FBV3ZHLEVBQUksS0FBT1ksR0FBSytHLEVBQUVrQyxFQUFHbEIsRUFBR0MsRUFBR2lCLEVBQUV0RCxXQUFXLEtBRWhFb0QsRUFBSS9KLEVBQUk4SixFQUFJZixFQUFJLEVBQ2hCa0IsRUFBSSxHQUNKakIsRUFBSTNILEVBQUVzRixhQUFheEgsSUFJekIsT0FBUTZKLEdBQ04sS0FBSyxHQUNMLEtBQUssR0FDSCxLQUFPdkIsRUFBSUEsRUFBSSxFQUFJLElBQU0sRUFBSXNCLEdBQUssTUFBUTNCLEdBQUssRUFBSTZDLEVBQUUxSCxTQUFXdkMsRUFBSSxFQUFHaUssR0FBSyxNQUM1RSxFQUFJZixFQUFJcUIsR0FBS3pCLEVBQUUsRUFBR21CLEVBQUcxSyxFQUFHQyxFQUFHK0osRUFBR0MsRUFBR3hJLEVBQUV1QixPQUFRNkUsRUFBR0ksRUFBR0osR0FDakRvQyxFQUFJLEVBQ0pELElBQ0EsTUFFRixLQUFLLEdBQ0wsS0FBSyxJQUNILEdBQUksSUFBTTlCLEVBQUk5RyxFQUFJZ0gsRUFBSXJJLEVBQUcsQ0FDdkJrSyxJQUNBLE1BR0osUUFJRSxPQUhBQSxJQUNBRyxFQUFJdEksRUFBRUssT0FBT3ZDLEdBRUw2SixHQUNOLEtBQUssRUFDTCxLQUFLLEdBQ0gsR0FBSSxJQUFNckksRUFBSXJCLEVBQUltSSxFQUFHLE9BQVF3QixHQUMzQixLQUFLLEdBQ0wsS0FBSyxHQUNMLEtBQUssRUFDTCxLQUFLLEdBQ0hVLEVBQUksR0FDSixNQUVGLFFBQ0UsS0FBT1gsSUFBTVcsRUFBSSxLQUVyQixNQUVGLEtBQUssRUFDSEEsRUFBSSxNQUNKLE1BRUYsS0FBSyxHQUNIQSxFQUFJLE1BQ0osTUFFRixLQUFLLEdBQ0hBLEVBQUksTUFDSixNQUVGLEtBQUssR0FDSCxJQUFNaEosRUFBSThHLEVBQUluSSxJQUFNVSxFQUFJK0osRUFBSSxFQUFHSixFQUFJLEtBQU9BLEdBQzFDLE1BRUYsS0FBSyxJQUNILEdBQUksSUFBTWhKLEVBQUk4RyxFQUFJbkksRUFBSWtMLEdBQUssRUFBSVYsRUFBRyxPQUFRM0ssRUFBSTJLLEdBQzVDLEtBQUssRUFDSCxNQUFRYixHQUFLLEtBQU81SCxFQUFFc0YsV0FBV3hILEVBQUksS0FBT3FMLEVBQUl2QixHQUVsRCxLQUFLLEVBQ0gsTUFBUVksSUFBTVcsRUFBSVgsR0FFdEIsTUFFRixLQUFLLEdBQ0gsSUFBTWxKLEVBQUk4RyxFQUFJbkksSUFBTXdLLEVBQUkzSyxHQUN4QixNQUVGLEtBQUssR0FDSCxJQUFNc0ksRUFBSUUsRUFBSWhILEVBQUlyQixJQUFNVSxFQUFJLEVBQUcySixHQUFLLE1BQ3BDLE1BRUYsS0FBSyxHQUNMLEtBQUssR0FDSCxJQUFNbEMsSUFBTTlHLEVBQUlBLElBQU1xSSxFQUFJLEVBQUksSUFBTXJJLEVBQUlxSSxFQUFJckksR0FDNUMsTUFFRixLQUFLLEdBQ0gsSUFBTUEsRUFBSThHLEVBQUlFLEdBQUtySSxJQUNuQixNQUVGLEtBQUssR0FDSCxJQUFNcUIsRUFBSThHLEVBQUlFLEdBQUtySSxJQUNuQixNQUVGLEtBQUssR0FDSCxJQUFNcUIsRUFBSThHLEVBQUluSSxHQUFLcUksSUFDbkIsTUFFRixLQUFLLEdBQ0gsR0FBSSxJQUFNaEgsRUFBSThHLEVBQUluSSxFQUFHLENBQ25CLEdBQUksSUFBTXlKLEVBQUcsT0FBUSxFQUFJRSxFQUFJLEVBQUlZLEdBQy9CLEtBQUssSUFDSCxNQUVGLFFBQ0VkLEVBQUksRUFFUnBCLElBR0YsTUFFRixLQUFLLEdBQ0gsSUFBTUYsRUFBSUUsRUFBSWhILEVBQUlyQixFQUFJd0ssRUFBSUosSUFBTUEsRUFBSSxHQUNwQyxNQUVGLEtBQUssR0FDTCxLQUFLLEdBQ0gsS0FBTSxFQUFJL0ksRUFBSXJCLEVBQUlxSSxHQUFJLE9BQVFGLEdBQzVCLEtBQUssRUFDSCxPQUFRLEVBQUl1QixFQUFJLEVBQUkzSCxFQUFFc0YsV0FBV3hILEVBQUksSUFDbkMsS0FBSyxJQUNIc0ksRUFBSSxHQUNKLE1BRUYsS0FBSyxJQUNIckgsRUFBSWpCLEVBQUdzSSxFQUFJLEdBR2YsTUFFRixLQUFLLEdBQ0gsS0FBT3VCLEdBQUssS0FBT0MsR0FBSzdJLEVBQUksSUFBTWpCLElBQU0sS0FBT2tDLEVBQUVzRixXQUFXdkcsRUFBSSxLQUFPWSxHQUFLSyxFQUFFMkcsVUFBVTVILEVBQUdqQixFQUFJLElBQUt3SyxFQUFJLEdBQUlsQyxFQUFJLElBSXhILElBQU1BLElBQU13QyxHQUFLTixHQUdyQkUsRUFBSVosRUFDSkEsRUFBSUQsRUFDSjdKLElBS0YsR0FBSSxHQUZKaUIsRUFBSVksRUFBRXVCLFFBRUssQ0FFVCxHQURBdkMsRUFBSVQsRUFDQSxFQUFJMkosU0FBMkMsS0FBckNVLEVBQUlkLEVBQUUsRUFBRzlILEVBQUdoQixFQUFHUixFQUFHK0osRUFBR0MsRUFBR3BKLEVBQUdnSCxFQUFHSSxFQUFHSixLQUFvQixLQUFPcEcsRUFBSTRJLEdBQUdySCxRQUFTLE9BQU8rRixFQUFJdEgsRUFBSTZHLEVBR3pHLEdBRkE3RyxFQUFJaEIsRUFBRTRFLEtBQUssS0FBTyxJQUFNNUQsRUFBSSxJQUV4QixHQUFNaUgsRUFBSXVDLEVBQUcsQ0FHZixPQUZBLElBQU12QyxHQUFLQyxFQUFFbEgsRUFBRyxLQUFPd0osRUFBSSxHQUVuQkEsR0FDTixLQUFLLElBQ0h4SixFQUFJQSxFQUFFNEcsUUFBUTZDLEVBQUksWUFBY3pKLEVBQ2hDLE1BRUYsS0FBSyxJQUNIQSxFQUFJQSxFQUFFNEcsUUFBUThDLEVBQUcsc0JBQXdCMUosRUFBRTRHLFFBQVE4QyxFQUFHLGFBQWUxSixFQUFFNEcsUUFBUThDLEVBQUcsaUJBQW1CMUosRUFHekd3SixFQUFJLEdBSVIsT0FBT2xDLEVBQUl0SCxFQUFJNkcsRUE4UFA0QixDQUFFVyxFQUFHL0ksRUFBRzlCLEVBQUcsRUFBRyxHQUt0QixPQUpBLEVBQUkySixTQUFtRCxLQUE3QzlCLEVBQUkwQixHQUFHLEVBQUd0QixFQUFHbkcsRUFBR0EsRUFBR2tJLEVBQUdDLEVBQUdoQyxFQUFFakYsT0FBUSxFQUFHLEVBQUcsTUFBcUJpRixFQUFJSixJQUN4RSxHQUNKb0QsRUFBSSxFQUNKaEIsRUFBSUQsRUFBSSxFQUNEL0IsRUFHVCxJQUFJMkMsRUFBSyxRQUNMRCxFQUFJLFlBQ0o3QixFQUFLLE9BQ0xELEVBQUssVUFDTEssRUFBSyxzQkFDTGxCLEVBQUssU0FDTE0sRUFBSSxvQkFDSnlDLEVBQUsscUJBQ0xJLEVBQUksYUFDSkQsRUFBSyxnQkFDTG5DLEVBQUkscUJBQ0orQixFQUFLLGtCQUNMeEIsRUFBSyxlQUNMTixFQUFLLGVBQ0xJLEVBQUssOEJBQ0xILEVBQUssbUNBQ0xMLEVBQUssc0JBQ0xxQixFQUFJLEVBQ0pELEVBQUksRUFDSmlCLEVBQUksRUFDSnZDLEVBQUksRUFDSm1DLEVBQUksR0FDSmpCLEVBQUksR0FDSkQsRUFBSSxFQUNKUixFQUFJLEtBQ0o2QixFQUFJLEVBS1IsT0FIQW5CLEVBQUV1QixJQXBFRixTQUFTQyxFQUFFcEwsR0FDVCxPQUFRQSxHQUNOLFVBQUssRUFDTCxLQUFLLEtBQ0gwSixFQUFJQyxFQUFFNUcsT0FBUyxFQUNmLE1BRUYsUUFDRSxHQUFJLG1CQUFzQi9DLEVBQUcySixFQUFFRCxLQUFPMUosT0FBTyxHQUFJLGlCQUFvQkEsRUFBRyxJQUFLLElBQUlELEVBQUksRUFBRzhCLEVBQUk3QixFQUFFK0MsT0FBUWhELEVBQUk4QixJQUFLOUIsRUFDN0dxTCxFQUFFcEwsRUFBRUQsU0FDQ2dMLEVBQVUsSUFBSi9LLEVBR2pCLE9BQU9vTCxHQXdEVHhCLEVBQUV5QixJQUFNeEIsT0FDUixJQUFXbkMsR0FBS21DLEVBQUVuQyxHQUNYa0MsR0NwbEJNLEVBZkcsU0FBcUIwQixHQUVyQyxJQUFJQyxFQUFRLElBQUlDLFFBQ2hCLE9BQU8sU0FBVXBJLEdBQ2YsR0FBSW1JLEVBQU1FLElBQUlySSxHQUVaLE9BQU9tSSxFQUFNaEwsSUFBSTZDLEdBR25CLElBQUlzSSxFQUFNSixFQUFLbEksR0FFZixPQURBbUksRUFBTUYsSUFBSWpJLEVBQUtzSSxHQUNSQSxJQ0RYLFNBQVNDLEVBQVFDLEdBQ1hBLEdBQ0ZDLEVBQU1DLFFBQVE3RixPQUFPMkYsRUFBUSxLQUlqQyxJQUFJQyxFQUFRLENBQ1ZDLFFBQVMsTUFFUEMsRUFBWSxTQUFtQkMsRUFBU0MsRUFBU0MsRUFBV0MsRUFBU0MsRUFBTUMsRUFBUXRKLEVBQVFoQyxFQUFJdUwsRUFBT0MsR0FDeEcsT0FBUVAsR0FFTixLQUFLLEVBRUQsT0FBUUMsRUFBUTlFLFdBQVcsSUFDekIsS0FBSyxHQUlELE9BREEwRSxFQUFNQyxRQUFRN0YsT0FBT2dHLEVBQVUsS0FDeEIsR0FJWCxLQUFLLElBSUQsR0FBOEIsS0FBMUJBLEVBQVE5RSxXQUFXLEdBQ3JCLE1BQU8sR0FLZixNQUlKLEtBQUssRUFFRCxHQUFXLElBQVBwRyxFQUFVLE9BQU9rTCxFQTFDYixRQTJDUixNQUlKLEtBQUssRUFFRCxPQUFRbEwsR0FFTixLQUFLLElBQ0wsS0FBSyxJQUdELE9BREE4SyxFQUFNQyxRQUFRN0YsT0FBT2lHLEVBQVUsR0FBS0QsR0FDN0IsR0FHWCxRQUVJLE9BQU9BLEdBQWtCLElBQVBNLEVBNURoQixRQTREdUMsSUFLbkQsS0FBTSxFQUVGTixFQUFRbkUsTUFsRUgwRSxVQWtFaUJqRixRQUFRb0UsS0FJbENjLEVBQWMsU0FBcUJULEVBQVNDLEdBQzlDLEdBQWdCLElBQVpELEdBQ3NCLE1BQTFCQyxFQUFROUUsV0FBVyxJQUNPLEtBQTFCOEUsRUFBUTlFLFdBQVcsR0FFZixNQUFPLElBSVR1RixFQUFnQyxvQkFBYnJHLFNBQ25Cc0csRUFBd0IsR0FDeEJDLEVBQXVCRixPQUFZakgsRUFBWSxHQUFZLFdBQzdELElBQUlvSCxFQUFXLEdBQVksV0FDekIsTUFBTyxNQUVMQyxFQUFrQixHQUNsQkMsRUFBbUIsR0FDdkIsT0FBTyxTQUFVakQsR0FDZixZQUFlckUsSUFBWHFFLElBQW1DLElBQVhBLEVBQ25CZ0QsR0FHTSxJQUFYaEQsRUFDS2lELEVBR0ZGLEVBQVMvQyxPQTRMTCxFQXhMRyxTQUFxQnZGLFFBQ3JCa0IsSUFBWmxCLElBQXVCQSxFQUFVLElBQ3JDLElBQ0l5SSxFQURBL0wsRUFBTXNELEVBQVF0RCxLQUFPLFdBR0Z3RSxJQUFuQmxCLEVBQVF1RixTQUNWa0QsRUFBZ0IsQ0FDZGxELE9BQVF2RixFQUFRdUYsU0FJcEIsSUFBSW1ELEVBQVMsSUFBSSxFQUFPRCxHQVN4QixJQUVJbEgsRUFrQkFvSCxFQXBCQUMsRUFBVyxHQUlmLEdBQUlULEVBQVcsQ0FDYjVHLEVBQVl2QixFQUFRdUIsV0FBYU8sU0FBUytHLEtBQzFDLElBQUlDLEVBQVFoSCxTQUFTaUgsaUJBQWlCLHNCQUF3QnJNLEVBQU0sS0FDcEVvQyxNQUFNL0IsVUFBVWlHLFFBQVExSCxLQUFLd04sR0FBTyxTQUFVRSxHQUMvQkEsRUFBS0MsYUFBYSxnQkFBa0J2TSxHQUUxQzZHLE1BQU0sS0FBS1AsU0FBUSxTQUFVa0csR0FDbENOLEVBQVNNLElBQU0sS0FHYkYsRUFBSy9GLGFBQWUxQixHQUN0QkEsRUFBVVUsWUFBWStHLE1BTzVCLEdBQUliLEVBQ0ZPLEVBQU85QixJQUFJNUcsRUFBUW1KLGNBQW5CVCxDQUFrQ2xCLEdBRWxDbUIsRUFBVSxTQUFnQlMsRUFBVUMsRUFBWTlHLEVBQU8rRyxHQUNyRCxJQUFJNU4sRUFBTzJOLEVBQVczTixLQUN0QjRMLEVBQU1DLFFBQVVoRixFQVdoQm1HLEVBQU9VLEVBQVVDLEVBQVdFLFFBRXhCRCxJQUNGdEMsRUFBTTRCLFNBQVNsTixJQUFRLFFBR3RCLENBQ0xnTixFQUFPOUIsSUFBSXNCLEdBQ1gsSUFBSXNCLEVBQW9CcEIsR0FFcEJwSSxFQUFRbUosb0JBQW9DakksSUFBbkJsQixFQUFRdUYsVUFDbkNtRCxFQUFPOUIsSUFBSTVHLEVBQVFtSixlQUVuQkssRUFBb0JuQixFQUFxQnJJLEVBQVFtSixlQUFpQmYsRUFBOUNDLENBQXFFckksRUFBUXVGLFNBYW5Hb0QsRUFBVSxTQUFpQlMsRUFBVUMsRUFBWTlHLEVBQU8rRyxHQUN0RCxJQUFJNU4sRUFBTzJOLEVBQVczTixLQUNsQitOLEVBWlMsU0FBa0JMLEVBQVVDLEdBQ3pDLElBQUkzTixFQUFPMk4sRUFBVzNOLEtBTXRCLFlBSmdDd0YsSUFBNUJzSSxFQUFrQjlOLEtBQ3BCOE4sRUFBa0I5TixHQUFRZ04sRUFBT1UsRUFBVUMsRUFBV0UsU0FHakRDLEVBQWtCOU4sR0FLYmdPLENBQVNOLEVBQVVDLEdBRS9CLFlBQXFCbkksSUFBakI4RixFQUFNMkMsUUFJSkwsSUFDRnRDLEVBQU00QixTQUFTbE4sSUFBUSxHQVNsQitOLEdBU0hILE9BQ0Z0QyxFQUFNNEIsU0FBU2xOLEdBQVErTixHQUVoQkEsR0FzRGYsSUFBSXpDLEVBQVEsQ0FDVnRLLElBQUtBLEVBQ0w2RixNQUFPLElBQUl2QixFQUFXLENBQ3BCdEUsSUFBS0EsRUFDTDZFLFVBQVdBLEVBQ1hELE1BQU90QixFQUFRc0IsTUFDZkgsT0FBUW5CLEVBQVFtQixTQUVsQkcsTUFBT3RCLEVBQVFzQixNQUNmc0gsU0FBVUEsRUFDVmdCLFdBQVksR0FDWmxJLE9BQVFpSCxHQUVWLE9BQU8zQixHQzNPTSxNQW5EZixTQUFpQjZDLEdBWWYsSUFOQSxJQUVJbEUsRUFGQXRDLEVBQUksRUFHSmxJLEVBQUksRUFDSjJPLEVBQU1ELEVBQUlyTCxPQUVQc0wsR0FBTyxJQUFLM08sRUFBRzJPLEdBQU8sRUFFM0JuRSxFQUVlLFlBQVYsT0FITEEsRUFBd0IsSUFBcEJrRSxFQUFJakgsV0FBV3pILElBQW1DLElBQXRCME8sRUFBSWpILGFBQWF6SCxLQUFjLEdBQTJCLElBQXRCME8sRUFBSWpILGFBQWF6SCxLQUFjLElBQTRCLElBQXRCME8sRUFBSWpILGFBQWF6SCxLQUFjLE1BRzlGLE9BQVp3SyxJQUFNLEtBQWdCLElBSXBEdEMsRUFFZSxZQUFWLE9BTExzQyxHQUVBQSxJQUFNLE1BR29DLE9BQVpBLElBQU0sS0FBZ0IsSUFFckMsWUFBVixNQUFKdEMsSUFBeUMsT0FBWkEsSUFBTSxLQUFnQixJQUl0RCxPQUFReUcsR0FDTixLQUFLLEVBQ0h6RyxJQUE4QixJQUF4QndHLEVBQUlqSCxXQUFXekgsRUFBSSxLQUFjLEdBRXpDLEtBQUssRUFDSGtJLElBQThCLElBQXhCd0csRUFBSWpILFdBQVd6SCxFQUFJLEtBQWMsRUFFekMsS0FBSyxFQUVIa0ksRUFFZSxZQUFWLE9BSExBLEdBQXlCLElBQXBCd0csRUFBSWpILFdBQVd6SCxNQUdzQixPQUFaa0ksSUFBTSxLQUFnQixJQVN4RCxTQUhBQSxFQUVlLFlBQVYsT0FITEEsR0FBS0EsSUFBTSxNQUcrQixPQUFaQSxJQUFNLEtBQWdCLEtBQ3ZDQSxJQUFNLE1BQVEsR0FBRzFFLFNBQVMsS0NGMUIsRUFqREksQ0FDakJvTCx3QkFBeUIsRUFDekJDLGtCQUFtQixFQUNuQkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLFFBQVMsRUFDVEMsYUFBYyxFQUNkQyxnQkFBaUIsRUFDakJDLFlBQWEsRUFDYkMsUUFBUyxFQUNUQyxLQUFNLEVBQ05DLFNBQVUsRUFDVkMsYUFBYyxFQUNkQyxXQUFZLEVBQ1pDLGFBQWMsRUFDZEMsVUFBVyxFQUNYQyxRQUFTLEVBQ1RDLFdBQVksRUFDWkMsWUFBYSxFQUNiQyxhQUFjLEVBQ2RDLFdBQVksRUFDWkMsY0FBZSxFQUNmQyxlQUFnQixFQUNoQkMsZ0JBQWlCLEVBQ2pCQyxVQUFXLEVBQ1hDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxpQkFBa0IsRUFDbEJDLFdBQVksRUFDWkMsV0FBWSxFQUNaQyxRQUFTLEVBQ1RDLE1BQU8sRUFDUEMsUUFBUyxFQUNUQyxRQUFTLEVBQ1RDLE9BQVEsRUFDUkMsT0FBUSxFQUNSQyxLQUFNLEVBQ05DLGdCQUFpQixFQUVqQkMsWUFBYSxFQUNiQyxhQUFjLEVBQ2RDLFlBQWEsRUFDYkMsZ0JBQWlCLEVBQ2pCQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQkMsY0FBZSxFQUNmQyxZQUFhLEdDdENBLElDRlhDLEVBQWlCLGFBQ2pCQyxFQUFpQiw4QkFFakJDLEVBQW1CLFNBQTBCaFEsR0FDL0MsT0FBa0MsS0FBM0JBLEVBQVM4RixXQUFXLElBR3pCbUssRUFBcUIsU0FBNEIzUSxHQUNuRCxPQUFnQixNQUFUQSxHQUFrQyxrQkFBVkEsR0FHN0I0USxFRGpCSixTQUFpQkMsR0FDZixJQUFJakcsRUFBUSxHQUNaLE9BQU8sU0FBVW5JLEdBRWYsWUFEbUJxQyxJQUFmOEYsRUFBTW5JLEtBQW9CbUksRUFBTW5JLEdBQU9vTyxFQUFHcE8sSUFDdkNtSSxFQUFNbkksSUNhTSxFQUFRLFNBQVVxTyxHQUN2QyxPQUFPSixFQUFpQkksR0FBYUEsRUFBWUEsRUFBVXJKLFFBQVErSSxFQUFnQixPQUFPTyxpQkFHeEYsRUFBb0IsU0FBMkJ6USxFQUFLTixHQUN0RCxPQUFRTSxHQUNOLElBQUssWUFDTCxJQUFLLGdCQUVELEdBQXFCLGlCQUFWTixFQUNULE9BQU9BLEVBQU15SCxRQUFRZ0osR0FBZ0IsU0FBVU8sRUFBT0MsRUFBSUMsR0FNeEQsT0FMQUMsRUFBUyxDQUNQN1IsS0FBTTJSLEVBQ045RCxPQUFRK0QsRUFDUkUsS0FBTUQsR0FFREYsS0FNakIsT0FBc0IsSUFBbEIsRUFBUzNRLElBQWVvUSxFQUFpQnBRLElBQXlCLGlCQUFWTixHQUFnQyxJQUFWQSxFQUkzRUEsRUFIRUEsRUFBUSxNQW9DbkIsU0FBU3FSLEVBQW9CQyxFQUFhOUQsRUFBWStELEVBQWVDLEdBQ25FLEdBQXFCLE1BQWpCRCxFQUNGLE1BQU8sR0FHVCxRQUF1Q3pNLElBQW5DeU0sRUFBY0UsaUJBS2hCLE9BQU9GLEVBR1QsY0FBZUEsR0FDYixJQUFLLFVBRUQsTUFBTyxHQUdYLElBQUssU0FFRCxHQUEyQixJQUF2QkEsRUFBY0csS0FNaEIsT0FMQVAsRUFBUyxDQUNQN1IsS0FBTWlTLEVBQWNqUyxLQUNwQjZOLE9BQVFvRSxFQUFjcEUsT0FDdEJpRSxLQUFNRCxHQUVESSxFQUFjalMsS0FHdkIsUUFBNkJ3RixJQUF6QnlNLEVBQWNwRSxPQUFzQixDQUN0QyxJQUFJaUUsRUFBT0csRUFBY0gsS0FFekIsUUFBYXRNLElBQVRzTSxFQUdGLFVBQWdCdE0sSUFBVHNNLEdBQ0xELEVBQVMsQ0FDUDdSLEtBQU04UixFQUFLOVIsS0FDWDZOLE9BQVFpRSxFQUFLakUsT0FDYmlFLEtBQU1ELEdBRVJDLEVBQU9BLEVBQUtBLEtBVWhCLE9BTmFHLEVBQWNwRSxPQUFTLElBU3RDLE9BaURSLFNBQWdDbUUsRUFBYTlELEVBQVltRSxHQUN2RCxJQUFJQyxFQUFTLEdBRWIsR0FBSWxQLE1BQU1GLFFBQVFtUCxHQUNoQixJQUFLLElBQUk1UyxFQUFJLEVBQUdBLEVBQUk0UyxFQUFJdlAsT0FBUXJELElBQzlCNlMsR0FBVVAsRUFBb0JDLEVBQWE5RCxFQUFZbUUsRUFBSTVTLElBQUksUUFHakUsSUFBSyxJQUFJOFMsS0FBUUYsRUFBSyxDQUNwQixJQUFJM1IsRUFBUTJSLEVBQUlFLEdBRWhCLEdBQXFCLGlCQUFWN1IsRUFDUyxNQUFkd04sUUFBNEMxSSxJQUF0QjBJLEVBQVd4TixHQUNuQzRSLEdBQVVDLEVBQU8sSUFBTXJFLEVBQVd4TixHQUFTLElBQ2xDMlEsRUFBbUIzUSxLQUM1QjRSLEdBQVVoQixFQUFpQmlCLEdBQVEsSUFBTSxFQUFrQkEsRUFBTTdSLEdBQVMsVUFPNUUsSUFBSTBDLE1BQU1GLFFBQVF4QyxJQUE4QixpQkFBYkEsRUFBTSxJQUFrQyxNQUFkd04sUUFBK0MxSSxJQUF6QjBJLEVBQVd4TixFQUFNLElBTTdGLENBQ0wsSUFBSThSLEVBQWVULEVBQW9CQyxFQUFhOUQsRUFBWXhOLEdBQU8sR0FFdkUsT0FBUTZSLEdBQ04sSUFBSyxZQUNMLElBQUssZ0JBRURELEdBQVVoQixFQUFpQmlCLEdBQVEsSUFBTUMsRUFBZSxJQUN4RCxNQUdKLFFBTUlGLEdBQVVDLEVBQU8sSUFBTUMsRUFBZSxVQXRCNUMsSUFBSyxJQUFJQyxFQUFLLEVBQUdBLEVBQUsvUixFQUFNb0MsT0FBUTJQLElBQzlCcEIsRUFBbUIzUSxFQUFNK1IsTUFDM0JILEdBQVVoQixFQUFpQmlCLEdBQVEsSUFBTSxFQUFrQkEsRUFBTTdSLEVBQU0rUixJQUFPLEtBNEIxRixPQUFPSCxFQXRHTUksQ0FBdUJWLEVBQWE5RCxFQUFZK0QsR0FHM0QsSUFBSyxXQUVELFFBQW9Cek0sSUFBaEJ3TSxFQUEyQixDQUM3QixJQUFJVyxFQUFpQmQsRUFDakJlLEVBQVNYLEVBQWNELEdBRTNCLE9BREFILEVBQVNjLEVBQ0ZaLEVBQW9CQyxFQUFhOUQsRUFBWTBFLEVBQVFWLEdBSzlELE1BR0osSUFBSyxVQWtCUCxHQUFrQixNQUFkaEUsRUFDRixPQUFPK0QsRUFHVCxJQUFJWSxFQUFTM0UsRUFBVytELEdBT3hCLFlBQWtCek0sSUFBWHFOLEdBQXlCWCxFQUF3Q0QsRUFBVFksRUEyRGpFLElBU0loQixFQVRBaUIsRUFBZSw2QkFVbkIsSUFBSSxFQUFrQixTQUF5QkMsRUFBTTdFLEVBQVk4RCxHQUMvRCxHQUFvQixJQUFoQmUsRUFBS2pRLFFBQW1DLGlCQUFaaVEsRUFBSyxJQUErQixPQUFaQSxFQUFLLFNBQWtDdk4sSUFBbkJ1TixFQUFLLEdBQUdsRixPQUNsRixPQUFPa0YsRUFBSyxHQUdkLElBQUlDLEdBQWEsRUFDYm5GLEVBQVMsR0FDYmdFLE9BQVNyTSxFQUNULElBQUl5TixFQUFVRixFQUFLLEdBRUosTUFBWEUsUUFBbUN6TixJQUFoQnlOLEVBQVFDLEtBQzdCRixHQUFhLEVBQ2JuRixHQUFVa0UsRUFBb0JDLEVBQWE5RCxFQUFZK0UsR0FBUyxJQU1oRXBGLEdBQVVvRixFQUFRLEdBSXBCLElBQUssSUFBSXhULEVBQUksRUFBR0EsRUFBSXNULEVBQUtqUSxPQUFRckQsSUFDL0JvTyxHQUFVa0UsRUFBb0JDLEVBQWE5RCxFQUFZNkUsRUFBS3RULEdBQTZDLEtBQXpDb08sRUFBTzNHLFdBQVcyRyxFQUFPL0ssT0FBUyxJQUU5RmtRLElBS0ZuRixHQUFVb0YsRUFBUXhULElBY3RCcVQsRUFBYUssVUFBWSxFQUl6QixJQUhBLElBQ0l6QixFQURBMEIsRUFBaUIsR0FHMEIsUUFBdkMxQixFQUFRb0IsRUFBYU8sS0FBS3hGLEtBQ2hDdUYsR0FBa0IsSUFDbEIxQixFQUFNLEdBa0JSLE1BQU8sQ0FDTDFSLEtBaEJTLEVBQVc2TixHQUFVdUYsRUFpQjlCdkYsT0FBUUEsRUFDUmlFLEtBQU1ELElDN1ROLEVBQWdDLG9CQUFiekwsU0FDdkIsU0FBU2tOLEVBQW9CcEYsRUFBWXFGLEVBQWtCQyxHQUN6RCxJQUFJQyxFQUFlLEdBUW5CLE9BUEFELEVBQVczTCxNQUFNLEtBQUtQLFNBQVEsU0FBVW9NLFFBQ1JsTyxJQUExQjBJLEVBQVd3RixHQUNiSCxFQUFpQjNNLEtBQUtzSCxFQUFXd0YsSUFFakNELEdBQWdCQyxFQUFZLE9BR3pCRCxFQUVULElBQUlFLEVBQWUsU0FBc0JySSxFQUFPcUMsRUFBWWlHLEdBQzFELElBQUlGLEVBQVlwSSxFQUFNdEssSUFBTSxJQUFNMk0sRUFBVzNOLEtBZTdDLEtBUmlCLElBQWhCNFQsSUFJYSxJQUFkLFFBQXdDcE8sSUFBakI4RixFQUFNMkMsY0FBeUR6SSxJQUFoQzhGLEVBQU00QyxXQUFXd0YsS0FDckVwSSxFQUFNNEMsV0FBV3dGLEdBQWEvRixFQUFXRSxhQUdIckksSUFBcEM4RixFQUFNNEIsU0FBU1MsRUFBVzNOLE1BQXFCLENBQ2pELElBQUk2VCxFQUFlLEdBQ2ZoSSxFQUFVOEIsRUFFZCxFQUFHLENBQ0QsSUFBSW1HLEVBQWN4SSxFQUFNdEYsT0FBTyxJQUFNME4sRUFBVzdILEVBQVNQLEVBQU16RSxPQUFPLEdBRWpFLFFBQTZCckIsSUFBaEJzTyxJQUNoQkQsR0FBZ0JDLEdBR2xCakksRUFBVUEsRUFBUWlHLGdCQUNDdE0sSUFBWnFHLEdBRVQsSUFBSyxHQUFxQyxJQUF4QmdJLEVBQWEvUSxPQUM3QixPQUFPK1EsSUN2Q2IsU0FBU0UsRUFBcUJ6SSxFQUFPcUMsR0FDbkMsUUFBd0NuSSxJQUFwQzhGLEVBQU00QixTQUFTUyxFQUFXM04sTUFDNUIsT0FBT3NMLEVBQU10RixPQUFPLEdBQUkySCxFQUFZckMsRUFBTXpFLE9BQU8sR0FJckQsU0FBU21OLEVBQU05RixFQUFZK0YsRUFBS1AsR0FDOUIsSUFBSUgsRUFBbUIsR0FDbkJFLEVBQWVILEVBQW9CcEYsRUFBWXFGLEVBQWtCRyxHQUVyRSxPQUFJSCxFQUFpQnpRLE9BQVMsRUFDckI0USxFQUdGRCxFQUFlUSxFQUFJVixHQUc1QixJQTZFSVcsRUFBYSxTQUFTQSxFQUFXbkIsR0FHbkMsSUFGQSxJQUFJb0IsRUFBTSxHQUVEMVUsRUFBSSxFQUFHQSxFQUFJc1QsRUFBS2pRLE9BQVFyRCxJQUFLLENBQ3BDLElBQUkwRCxFQUFNNFAsRUFBS3RULEdBQ2YsR0FBVyxNQUFQMEQsRUFBSixDQUNBLElBQUlpUixPQUFRLEVBRVosY0FBZWpSLEdBQ2IsSUFBSyxVQUNILE1BRUYsSUFBSyxTQUVELEdBQUlDLE1BQU1GLFFBQVFDLEdBQ2hCaVIsRUFBUUYsRUFBVy9RLFFBSW5CLElBQUssSUFBSThHLEtBRlRtSyxFQUFRLEdBRU1qUixFQUNSQSxFQUFJOEcsSUFBTUEsSUFDWm1LLElBQVVBLEdBQVMsS0FDbkJBLEdBQVNuSyxHQUtmLE1BR0osUUFFSW1LLEVBQVFqUixFQUlWaVIsSUFDRkQsSUFBUUEsR0FBTyxLQUNmQSxHQUFPQyxJQUlYLE9BQU9ELEdDMUlMRSxFRG1CZ0IsU0FBdUIvUCxHQUN6QyxJQUFJZ0gsRUFBUSxFQUFZaEgsR0FFeEJnSCxFQUFNekUsTUFBTXBCLE9BQVMsU0FBVS9FLEdBSzdCNkQsS0FBS2dCLFNBQVc3RSxHQUdsQjRLLEVBQU0yQyxRQUFTLEVBRWYsSUFBSWdHLEVBQU0sV0FDUixJQUFLLElBQUlLLEVBQU96UixVQUFVQyxPQUFRaVEsRUFBTyxJQUFJM1AsTUFBTWtSLEdBQU8vQixFQUFPLEVBQUdBLEVBQU8rQixFQUFNL0IsSUFDL0VRLEVBQUtSLEdBQVExUCxVQUFVMFAsR0FHekIsSUFBSTVFLEVBQWEsRUFBZ0JvRixFQUFNekgsRUFBTTRDLGdCQUFZMUksR0FFekQsT0FEQW1PLEVBQWFySSxFQUFPcUMsR0FBWSxHQUN6QnJDLEVBQU10SyxJQUFNLElBQU0yTSxFQUFXM04sTUFrQ3RDLE1BQU8sQ0FDTGlVLElBQUtBLEVBQ0xNLEdBVk8sV0FDUCxJQUFLLElBQUlDLEVBQVEzUixVQUFVQyxPQUFRaVEsRUFBTyxJQUFJM1AsTUFBTW9SLEdBQVFDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsSUFDcEYxQixFQUFLMEIsR0FBUzVSLFVBQVU0UixHQUcxQixPQUFPVCxFQUFNMUksRUFBTTRDLFdBQVkrRixFQUFLQyxFQUFXbkIsS0FNL0MyQixhQXBCaUIsV0FDakIsSUFBSyxJQUFJQyxFQUFROVIsVUFBVUMsT0FBUWlRLEVBQU8sSUFBSTNQLE1BQU11UixHQUFRQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BGN0IsRUFBSzZCLEdBQVMvUixVQUFVK1IsR0FHMUIsSUFBSWpILEVBQWEsRUFBZ0JvRixFQUFNekgsRUFBTTRDLFlBQzdDNkYsRUFBcUJ6SSxFQUFPcUMsSUFlNUJrSCxVQW5DYyxXQUNkLElBQUssSUFBSUMsRUFBUWpTLFVBQVVDLE9BQVFpUSxFQUFPLElBQUkzUCxNQUFNMFIsR0FBUUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUNwRmhDLEVBQUtnQyxHQUFTbFMsVUFBVWtTLEdBRzFCLElBQUlwSCxFQUFhLEVBQWdCb0YsRUFBTXpILEVBQU00QyxZQUN6QzhHLEVBQVksYUFBZXJILEVBQVczTixLQUsxQyxPQUpBK1QsRUFBcUJ6SSxFQUFPLENBQzFCdEwsS0FBTTJOLEVBQVczTixLQUNqQjZOLE9BQVEsY0FBZ0JtSCxFQUFZLElBQU1ySCxFQUFXRSxPQUFTLE1BRXpEbUgsR0F5QlBDLFFBQVMsU0FBaUJDLEdBQ3hCQSxFQUFJNU4sU0FBUSxTQUFVdEcsR0FDcEJzSyxFQUFNNEIsU0FBU2xNLElBQU8sTUFHMUJxRyxNQUFPLFdBQ0xpRSxFQUFNNEMsV0FBYSxHQUNuQjVDLEVBQU00QixTQUFXLEdBQ2pCNUIsRUFBTXpFLE1BQU1RLFNBR2RSLE1BQU95RSxFQUFNekUsTUFDYnlFLE1BQU9BLEVBQ1BnSSxvQkFBcUJBLEVBQW9CclMsS0FBSyxLQUFNcUssRUFBTTRDLFlBQzFEOEYsTUFBT0EsRUFBTS9TLEtBQUssS0FBTXFLLEVBQU00QyxXQUFZK0YsSUM1RnpCLEdBQ2pCNU0sRUFBUWdOLEVBQWVoTixNQUN2QjROLEVBQVVaLEVBQWVZLFFBQ3pCLEVBQUtaLEVBQWVFLEdBQ3BCLEVBQVFGLEVBQWVMLE1BQ3ZCLEVBQXNCSyxFQUFlZixvQkFDckMsRUFBZWUsRUFBZUssYUFDOUIsRUFBWUwsRUFBZVEsVUFDM0IsRUFBTVIsRUFBZUosSUFDckJwTixFQUFRd04sRUFBZXhOLE1BQ3ZCLEVBQVF3TixFQUFlL0ksTyxlQ1gzQi9MLEVBQVVDLEVBQU9ELFFBRWpCLFNBQWM0TyxHQUNaLE9BQU9BLEVBQUloRyxRQUFRLGFBQWMsTUFHM0JnTixLQUFPLFNBQVNoSCxHQUN0QixPQUFPQSxFQUFJaEcsUUFBUSxPQUFRLEtBRzdCNUksRUFBUTZWLE1BQVEsU0FBU2pILEdBQ3ZCLE9BQU9BLEVBQUloRyxRQUFRLE9BQVEsTSw2QkNrQjdCLElBQUlrTixFQUFNLEVBQVEsSUFJZEMsRUFBYW5WLE9BQU9vVixNQUFRLFNBQVVsRCxHQUN4QyxJQUFJa0QsRUFBTyxHQUNYLElBQUssSUFBSXZVLEtBQU9xUixFQUNka0QsRUFBSzNPLEtBQUs1RixHQUNYLE9BQU91VSxHQUlWL1YsRUFBT0QsUUFBVWlXLEVBR2pCLElBQUk5VCxFQUFPdkIsT0FBT1ksT0FBTyxFQUFRLElBQ2pDVyxFQUFLQyxTQUFXLEVBQVEsR0FHeEIsSUFBSThULEVBQVcsRUFBUSxJQUNuQkMsRUFBVyxFQUFRLElBRXZCaFUsRUFBS0MsU0FBUzZULEVBQVFDLEdBS3BCLElBREEsSUFBSUYsRUFBT0QsRUFBV0ksRUFBU3JVLFdBQ3RCNkcsRUFBSSxFQUFHQSxFQUFJcU4sRUFBS3pTLE9BQVFvRixJQUFLLENBQ3BDLElBQUl5TixFQUFTSixFQUFLck4sR0FDYnNOLEVBQU9uVSxVQUFVc1UsS0FBU0gsRUFBT25VLFVBQVVzVSxHQUFVRCxFQUFTclUsVUFBVXNVLElBSWpGLFNBQVNILEVBQU9sUixHQUNkLEtBQU1DLGdCQUFnQmlSLEdBQVMsT0FBTyxJQUFJQSxFQUFPbFIsR0FFakRtUixFQUFTN1YsS0FBSzJFLEtBQU1ELEdBQ3BCb1IsRUFBUzlWLEtBQUsyRSxLQUFNRCxHQUVoQkEsSUFBZ0MsSUFBckJBLEVBQVFzUixXQUFvQnJSLEtBQUtxUixVQUFXLEdBRXZEdFIsSUFBZ0MsSUFBckJBLEVBQVF1UixXQUFvQnRSLEtBQUtzUixVQUFXLEdBRTNEdFIsS0FBS3VSLGVBQWdCLEVBQ2pCeFIsSUFBcUMsSUFBMUJBLEVBQVF3UixnQkFBeUJ2UixLQUFLdVIsZUFBZ0IsR0FFckV2UixLQUFLd1IsS0FBSyxNQUFPQyxHQWNuQixTQUFTQSxJQUdIelIsS0FBS3VSLGVBQWlCdlIsS0FBSzBSLGVBQWVDLE9BSTlDYixFQUFJYyxTQUFTQyxFQUFTN1IsTUFHeEIsU0FBUzZSLEVBQVFDLEdBQ2ZBLEVBQUtDLE1BdEJQblcsT0FBT0MsZUFBZW9WLEVBQU9uVSxVQUFXLHdCQUF5QixDQUkvRGhCLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU9pRSxLQUFLMFIsZUFBZU0saUJBbUIvQnBXLE9BQU9DLGVBQWVvVixFQUFPblUsVUFBVyxZQUFhLENBQ25EZixJQUFLLFdBQ0gsWUFBNEJrRixJQUF4QmpCLEtBQUtpUyxxQkFBd0RoUixJQUF4QmpCLEtBQUswUixpQkFHdkMxUixLQUFLaVMsZUFBZUMsV0FBYWxTLEtBQUswUixlQUFlUSxZQUU5RHJMLElBQUssU0FBVTFLLFFBR2U4RSxJQUF4QmpCLEtBQUtpUyxxQkFBd0RoUixJQUF4QmpCLEtBQUswUixpQkFNOUMxUixLQUFLaVMsZUFBZUMsVUFBWS9WLEVBQ2hDNkQsS0FBSzBSLGVBQWVRLFVBQVkvVixNQUlwQzhVLEVBQU9uVSxVQUFVcVYsU0FBVyxTQUFVQyxFQUFLQyxHQUN6Q3JTLEtBQUtxQyxLQUFLLE1BQ1ZyQyxLQUFLK1IsTUFFTGpCLEVBQUljLFNBQVNTLEVBQUlELEssNkJDdkZuQixTQUFTbkwsRUFBSTZHLEVBQUtyUixHQUNoQixPQUFPYixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt5UyxFQUFLclIsR0F6Q25EekIsRUFBUXNYLE9BQVMsU0FBVTFJLEVBQUsySSxHQUU5QixJQURBLElBQUlsRSxFQUFTLEdBQ0puVCxFQUFJLEVBQUdBLEVBQUlxWCxFQUFLclgsSUFBT21ULEdBQVV6RSxFQUMxQyxPQUFPeUUsR0FHVHJULEVBQVF3WCxXQUFhLFNBQVVoUCxFQUFHQyxHQUNoQyxHQUFJRCxFQUFFakYsU0FBV2tGLEVBQUVsRixPQUFVLE9BQU8sRUFDcEMsSUFBSyxJQUFJckQsRUFBSSxFQUFHQSxFQUFJc0ksRUFBRWpGLE9BQVFyRCxJQUM1QixHQUFJc0ksRUFBRXRJLEtBQU91SSxFQUFFdkksR0FBTSxPQUFPLEVBRTlCLE9BQU8sR0FHVEYsRUFBUXlYLFVBQVksU0FBVTdJLEVBQUs4SSxHQUdqQyxJQUZBLElBQUlDLEVBQVEsRUFDUlosRUFBTW5JLEVBQUlyTCxPQUFTLEVBQ2hCbVUsRUFBTTVPLFFBQVE4RixFQUFJbE0sT0FBT2lWLEtBQVcsR0FBS0EsSUFDaEQsS0FBT0QsRUFBTTVPLFFBQVE4RixFQUFJbE0sT0FBT3FVLEtBQVMsR0FBS0EsSUFDOUMsT0FBT25JLEVBQUlnSixNQUFNRCxFQUFPWixFQUFNLElBR2hDL1csRUFBUTZYLFdBQWEsU0FBVWpKLEdBQzdCLE9BQU9BLEVBQUlsTSxPQUFPLEdBQUdvVixjQUFnQmxKLEVBQUlnSixNQUFNLElBR2pENVgsRUFBUStYLFdBQWEsV0FFbkIsSUFEQSxJQUFJMUUsRUFBUyxHQUNKblQsRUFBSSxFQUFHOFgsRUFBUyxHQUFJOVgsRUFBSW9ELFVBQVVDLE9BQVFyRCxJQUVqRCxJQURBLElBQUkrWCxFQUFNM1UsVUFBVXBELEdBQ1hnWSxFQUFJLEVBQUdBLEVBQUlELEVBQUkxVSxPQUFRMlUsSUFDekJGLEVBQU9DLEVBQUlDLE1BQ2RGLEVBQU9DLEVBQUlDLEtBQU0sRUFDakI3RSxFQUFPaE0sS0FBSzRRLEVBQUlDLEtBSXRCLE9BQU83RSxHQU9UclQsRUFBUWlNLElBQU1BLEVBRWRqTSxFQUFRbVksT0FBUyxTQUFValQsRUFBTWtULEdBQy9CLElBQUssSUFBSWxZLEtBQUtrWSxFQUNSbk0sRUFBSW1NLEVBQUtsWSxLQUFNZ0YsRUFBS2hGLEdBQUtrWSxFQUFJbFksS0FJckNGLEVBQVFxWSxRQUFVLFNBQVV6SixHQUMxQixPQUFPQSxFQUFJaEcsUUFBUSxRQUFTLE0sNkJDckQ5QixJQUFJMFAsRUFBWSxFQUFRLElBQ3BCQyxFQUFTLEVBQVEsSUFDakJDLEVBQWMsRUFBUSxJQUUxQnZZLEVBQU9ELFFBRVAsU0FBZ0J5WSxHQUNkLElBT0lDLEVBQ0FDLEVBUkFDLEVBQVFILEVBQVdHLE1BQ25CQyxFQUFrQkosRUFBV0ksaUJBQW1CLEdBQ2hEQyxFQUFhTCxFQUFXSyxZQUFjLEdBQ3RDQyxFQUFRTixFQUFXTyxXQUNuQkMsRUFBWVIsRUFBV1EsVUFDdkJwWCxFQUFXLEdBQ1hxWCxFQUFTLEdBSWIsSUFBS1IsS0FBUUssRUFDWEosRUFBTyxJQUFJSCxFQUNURSxFQUNBTyxFQUFVSCxFQUFZSixHQUN0QkssRUFBTUwsR0FDTkUsSUFHcUMsSUFBbkNDLEVBQWdCL1AsUUFBUTRQLEtBQzFCQyxFQUFLRSxpQkFBa0IsR0FHekJoWCxFQUFTNlcsR0FBUUMsRUFFakJPLEVBQU9aLEVBQVVJLElBQVNBLEVBQzFCUSxFQUFPWixFQUFVSyxFQUFLUSxZQUFjVCxFQUd0QyxPQUFPLElBQUlILEVBQU8xVyxFQUFVcVgsRUFBUU4sSyxjQ1h0QzVZLEVBQVFvWixPQVRSLFNBQWdCQyxFQUFPQyxFQUFPQyxHQUM1QixHQUFJRCxLQUFTRCxFQUNYLE9BQU9BLEVBQU1DLEdBQ1IsR0FBeUIsSUFBckJoVyxVQUFVQyxPQUNuQixPQUFPZ1csRUFFUCxNQUFNLElBQUk5VSxNQUFNLElBQU02VSxFQUFRLDhCQUtsQyxJQUFJRSxFQUFZLGlFQUNaQyxFQUFnQixnQkFFcEIsU0FBU0MsRUFBU0MsR0FDaEIsSUFBSXhILEVBQVF3SCxFQUFLeEgsTUFBTXFILEdBQ3ZCLE9BQUtySCxFQUdFLENBQ0x5SCxPQUFRekgsRUFBTSxHQUNkMEgsS0FBTTFILEVBQU0sR0FDWjJILEtBQU0zSCxFQUFNLEdBQ1o0SCxLQUFNNUgsRUFBTSxHQUNaNkgsS0FBTTdILEVBQU0sSUFQTCxLQVlYLFNBQVM4SCxFQUFZQyxHQUNuQixJQUFJQyxFQUFNLEdBaUJWLE9BaEJJRCxFQUFXTixTQUNiTyxHQUFPRCxFQUFXTixPQUFTLEtBRTdCTyxHQUFPLEtBQ0hELEVBQVdMLE9BQ2JNLEdBQU9ELEVBQVdMLEtBQU8sS0FFdkJLLEVBQVdKLE9BQ2JLLEdBQU9ELEVBQVdKLE1BRWhCSSxFQUFXSCxPQUNiSSxHQUFPLElBQU1ELEVBQVdILE1BRXRCRyxFQUFXRixPQUNiRyxHQUFPRCxFQUFXRixNQUViRyxFQWVULFNBQVM3QixFQUFVOEIsR0FDakIsSUFBSUosRUFBT0ksRUFDUEQsRUFBTVQsRUFBU1UsR0FDbkIsR0FBSUQsRUFBSyxDQUNQLElBQUtBLEVBQUlILEtBQ1AsT0FBT0ksRUFFVEosRUFBT0csRUFBSUgsS0FLYixJQUhBLElBR1NLLEVBSExDLEVBQWF0YSxFQUFRc2EsV0FBV04sR0FFaENPLEVBQVFQLEVBQUsxUixNQUFNLE9BQ1JrUyxFQUFLLEVBQUd0YSxFQUFJcWEsRUFBTWhYLE9BQVMsRUFBR3JELEdBQUssRUFBR0EsSUFFdEMsT0FEYm1hLEVBQU9FLEVBQU1yYSxJQUVYcWEsRUFBTUUsT0FBT3ZhLEVBQUcsR0FDRSxPQUFUbWEsRUFDVEcsSUFDU0EsRUFBSyxJQUNELEtBQVRILEdBSUZFLEVBQU1FLE9BQU92YSxFQUFJLEVBQUdzYSxHQUNwQkEsRUFBSyxJQUVMRCxFQUFNRSxPQUFPdmEsRUFBRyxHQUNoQnNhLE1BVU4sTUFKYSxNQUZiUixFQUFPTyxFQUFNM1UsS0FBSyxRQUdoQm9VLEVBQU9NLEVBQWEsSUFBTSxLQUd4QkgsR0FDRkEsRUFBSUgsS0FBT0EsRUFDSkMsRUFBWUUsSUFFZEgsRUFvQlQsU0FBU3BVLEVBQUs4VSxFQUFPTixHQUNMLEtBQVZNLElBQ0ZBLEVBQVEsS0FFSSxLQUFWTixJQUNGQSxFQUFRLEtBRVYsSUFBSU8sRUFBV2pCLEVBQVNVLEdBQ3BCUSxFQUFXbEIsRUFBU2dCLEdBTXhCLEdBTElFLElBQ0ZGLEVBQVFFLEVBQVNaLE1BQVEsS0FJdkJXLElBQWFBLEVBQVNmLE9BSXhCLE9BSElnQixJQUNGRCxFQUFTZixPQUFTZ0IsRUFBU2hCLFFBRXRCSyxFQUFZVSxHQUdyQixHQUFJQSxHQUFZUCxFQUFNakksTUFBTXNILEdBQzFCLE9BQU9XLEVBSVQsR0FBSVEsSUFBYUEsRUFBU2QsT0FBU2MsRUFBU1osS0FFMUMsT0FEQVksRUFBU2QsS0FBT00sRUFDVEgsRUFBWVcsR0FHckIsSUFBSUMsRUFBNkIsTUFBcEJULEVBQU0xWCxPQUFPLEdBQ3RCMFgsRUFDQTlCLEVBQVVvQyxFQUFNOVIsUUFBUSxPQUFRLElBQU0sSUFBTXdSLEdBRWhELE9BQUlRLEdBQ0ZBLEVBQVNaLEtBQU9hLEVBQ1RaLEVBQVlXLElBRWRDLEVBdklUN2EsRUFBUTBaLFNBQVdBLEVBc0JuQjFaLEVBQVFpYSxZQUFjQSxFQXdEdEJqYSxFQUFRc1ksVUFBWUEsRUEyRHBCdFksRUFBUTRGLEtBQU9BLEVBRWY1RixFQUFRc2EsV0FBYSxTQUFVRixHQUM3QixNQUEyQixNQUFwQkEsRUFBTTFYLE9BQU8sSUFBYzhXLEVBQVVoWCxLQUFLNFgsSUF5Q25EcGEsRUFBUThhLFNBaENSLFNBQWtCSixFQUFPTixHQUNULEtBQVZNLElBQ0ZBLEVBQVEsS0FHVkEsRUFBUUEsRUFBTTlSLFFBQVEsTUFBTyxJQU83QixJQURBLElBQUltUyxFQUFRLEVBQzBCLElBQS9CWCxFQUFNdFIsUUFBUTRSLEVBQVEsTUFBWSxDQUN2QyxJQUFJTSxFQUFRTixFQUFNTyxZQUFZLEtBQzlCLEdBQUlELEVBQVEsRUFDVixPQUFPWixFQU9ULElBREFNLEVBQVFBLEVBQU05QyxNQUFNLEVBQUdvRCxJQUNiN0ksTUFBTSxxQkFDZCxPQUFPaUksSUFHUFcsRUFJSixPQUFPbFgsTUFBTWtYLEVBQVEsR0FBR25WLEtBQUssT0FBU3dVLEVBQU1jLE9BQU9SLEVBQU1uWCxPQUFTLElBSXBFLElBQUk0WCxJQUVPLGNBREN2YSxPQUFPWSxPQUFPLE9BSTFCLFNBQVM0WixFQUFVblosR0FDakIsT0FBT0EsRUE4QlQsU0FBU29aLEVBQWNwWixHQUNyQixJQUFLQSxFQUNILE9BQU8sRUFHVCxJQUFJc0IsRUFBU3RCLEVBQUVzQixPQUVmLEdBQUlBLEVBQVMsRUFDWCxPQUFPLEVBR1QsR0FBaUMsS0FBN0J0QixFQUFFMEYsV0FBV3BFLEVBQVMsSUFDTyxLQUE3QnRCLEVBQUUwRixXQUFXcEUsRUFBUyxJQUNPLE1BQTdCdEIsRUFBRTBGLFdBQVdwRSxFQUFTLElBQ08sTUFBN0J0QixFQUFFMEYsV0FBV3BFLEVBQVMsSUFDTyxNQUE3QnRCLEVBQUUwRixXQUFXcEUsRUFBUyxJQUNPLE1BQTdCdEIsRUFBRTBGLFdBQVdwRSxFQUFTLElBQ08sTUFBN0J0QixFQUFFMEYsV0FBV3BFLEVBQVMsSUFDTyxLQUE3QnRCLEVBQUUwRixXQUFXcEUsRUFBUyxJQUNPLEtBQTdCdEIsRUFBRTBGLFdBQVdwRSxFQUFTLEdBQ3hCLE9BQU8sRUFHVCxJQUFLLElBQUlyRCxFQUFJcUQsRUFBUyxHQUFJckQsR0FBSyxFQUFHQSxJQUNoQyxHQUF3QixLQUFwQitCLEVBQUUwRixXQUFXekgsR0FDZixPQUFPLEVBSVgsT0FBTyxFQWdGVCxTQUFTb2IsRUFBT0MsRUFBT0MsR0FDckIsT0FBSUQsSUFBVUMsRUFDTCxFQUdLLE9BQVZELEVBQ0ssRUFHSyxPQUFWQyxHQUNNLEVBR05ELEVBQVFDLEVBQ0gsR0FHRCxFQXpJVnhiLEVBQVF5YixZQUFjTixFQUFvQkMsRUFQMUMsU0FBcUJNLEdBQ25CLE9BQUlMLEVBQWNLLEdBQ1QsSUFBTUEsRUFHUkEsR0FXVDFiLEVBQVEyYixjQUFnQlIsRUFBb0JDLEVBUDVDLFNBQXVCTSxHQUNyQixPQUFJTCxFQUFjSyxHQUNUQSxFQUFLOUQsTUFBTSxHQUdiOEQsR0F3RVQxYixFQUFRNGIsMkJBNUJSLFNBQW9DQyxFQUFVQyxFQUFVQyxHQUN0RCxJQUFJQyxFQUFNVixFQUFPTyxFQUFTclksT0FBUXNZLEVBQVN0WSxRQUMzQyxPQUFZLElBQVJ3WSxHQUtRLEtBRFpBLEVBQU1ILEVBQVNJLGFBQWVILEVBQVNHLGVBTTNCLEtBRFpELEVBQU1ILEVBQVNLLGVBQWlCSixFQUFTSSxpQkFDeEJILEdBS0wsS0FEWkMsRUFBTUgsRUFBU00sZ0JBQWtCTCxFQUFTSyxrQkFNOUIsS0FEWkgsRUFBTUgsRUFBU08sY0FBZ0JOLEVBQVNNLGVBbEIvQkosRUF1QkZWLEVBQU9PLEVBQVNwYixLQUFNcWIsRUFBU3JiLE9BeUN4Q1QsRUFBUXFjLG9DQTVCUixTQUE2Q1IsRUFBVUMsRUFBVVEsR0FDL0QsSUFBSU4sRUFBTUgsRUFBU08sY0FBZ0JOLEVBQVNNLGNBQzVDLE9BQVksSUFBUkosR0FLUSxLQURaQSxFQUFNSCxFQUFTTSxnQkFBa0JMLEVBQVNLLGtCQUN6QkcsR0FLTCxLQURaTixFQUFNVixFQUFPTyxFQUFTclksT0FBUXNZLEVBQVN0WSxVQU0zQixLQURad1ksRUFBTUgsRUFBU0ksYUFBZUgsRUFBU0csZUFNM0IsS0FEWkQsRUFBTUgsRUFBU0ssZUFBaUJKLEVBQVNJLGdCQWxCaENGLEVBdUJGVixFQUFPTyxFQUFTcGIsS0FBTXFiLEVBQVNyYixPQXdEeENULEVBQVF1YyxvQ0E1QlIsU0FBNkNWLEVBQVVDLEdBQ3JELElBQUlFLEVBQU1ILEVBQVNPLGNBQWdCTixFQUFTTSxjQUM1QyxPQUFZLElBQVJKLEdBS1EsS0FEWkEsRUFBTUgsRUFBU00sZ0JBQWtCTCxFQUFTSyxrQkFNOUIsS0FEWkgsRUFBTVYsRUFBT08sRUFBU3JZLE9BQVFzWSxFQUFTdFksVUFNM0IsS0FEWndZLEVBQU1ILEVBQVNJLGFBQWVILEVBQVNHLGVBTTNCLEtBRFpELEVBQU1ILEVBQVNLLGVBQWlCSixFQUFTSSxnQkFsQmhDRixFQXVCRlYsRUFBT08sRUFBU3BiLEtBQU1xYixFQUFTcmIsT0FZeENULEVBQVF3YyxvQkFIUixTQUE2QjVOLEdBQzNCLE9BQU82TixLQUFLQyxNQUFNOU4sRUFBSWhHLFFBQVEsaUJBQWtCLE1BdURsRDVJLEVBQVEyYyxpQkEvQ1IsU0FBMEJDLEVBQVlDLEVBQVdDLEdBOEIvQyxHQTdCQUQsRUFBWUEsR0FBYSxHQUVyQkQsSUFFd0MsTUFBdENBLEVBQVdBLEVBQVdyWixPQUFTLElBQStCLE1BQWpCc1osRUFBVSxLQUN6REQsR0FBYyxLQU9oQkMsRUFBWUQsRUFBYUMsR0FpQnZCQyxFQUFjLENBQ2hCLElBQUlDLEVBQVNyRCxFQUFTb0QsR0FDdEIsSUFBS0MsRUFDSCxNQUFNLElBQUl0WSxNQUFNLG9DQUVsQixHQUFJc1ksRUFBTy9DLEtBQU0sQ0FFZixJQUFJZ0IsRUFBUStCLEVBQU8vQyxLQUFLaUIsWUFBWSxLQUNoQ0QsR0FBUyxJQUNYK0IsRUFBTy9DLEtBQU8rQyxFQUFPL0MsS0FBS2hSLFVBQVUsRUFBR2dTLEVBQVEsSUFHbkQ2QixFQUFZalgsRUFBS3FVLEVBQVk4QyxHQUFTRixHQUd4QyxPQUFPdkUsRUFBVXVFLEssY0NyZW5CLFNBQVNHLElBZVAsT0FkQS9jLEVBQU9ELFFBQVVnZCxFQUFXcGMsT0FBT3FjLFFBQVUsU0FBVTVaLEdBQ3JELElBQUssSUFBSW5ELEVBQUksRUFBR0EsRUFBSW9ELFVBQVVDLE9BQVFyRCxJQUFLLENBQ3pDLElBQUlzRCxFQUFTRixVQUFVcEQsR0FFdkIsSUFBSyxJQUFJdUIsS0FBTytCLEVBQ1Y1QyxPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUttRCxFQUFRL0IsS0FDL0M0QixFQUFPNUIsR0FBTytCLEVBQU8vQixJQUszQixPQUFPNEIsR0FHRjJaLEVBQVNFLE1BQU1sWSxLQUFNMUIsV0FHOUJyRCxFQUFPRCxRQUFVZ2QsRyw2QkNoQmpCLElBQUlHLEVBQVMsRUFBUSxLQUNqQkMsRUFBVSxFQUFRLEtBQ2xCQyxFQUFVLEVBQVEsSUFDbEJDLEVBQWMsRUFBUSxLQUN0QkMsRUFBaUIsRUFBUSxLQUN6QkMsRUFBZSxFQUFRLEtBRTNCdmQsRUFBT0QsUUFnRlAsU0FBdUJtQixFQUFPNEQsR0FDNUIsSUFDSTBZLEVBQ0FoYyxFQUZBaWMsRUFBVyxHQUlWM1ksSUFDSEEsRUFBVSxJQUdaLElBQUt0RCxLQUFPa2MsRUFDVkYsRUFBUzFZLEVBQVF0RCxHQUNqQmljLEVBQVNqYyxHQUNQZ2MsUUFBMENFLEVBQVNsYyxHQUFPZ2MsR0FHMURDLEVBQVNFLFNBQVNDLFFBQVVILEVBQVNFLFNBQVNqRyxTQUNoRCtGLEVBQVNHLE9BQVNILEVBQVNFLFNBQVNDLFFBQVUsR0FDOUNILEVBQVNFLFNBQVdGLEVBQVNFLFNBQVNqRyxPQUd4QyxPQUtGLFNBQWV4VyxFQUFPdWMsR0FDcEIsSUFpQklJLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0EzYixFQUNBNGIsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQTdHLEVBQ0FyUyxFQUNBOUMsRUFDQWljLEVBQ0FsTSxFQUNBbU0sRUFDQTNILEVBbkNBNEgsRUFBYWpCLEVBQVNpQixXQUN0QkMsRUFBZ0JsQixFQUFTa0IsY0FDekJDLEVBQWFuQixFQUFTb0IsS0FDdEJDLEVBQWtCckIsRUFBU1EsVUFDM0JjLEVBQWdCdEIsRUFBU1UsUUFDekJhLEVBQWN2QixFQUFTdUIsWUFDdkJDLEVBQW1CeEIsRUFBU3dCLGlCQUM1QkMsRUFBaUJ6QixFQUFTeUIsZUFDMUJDLEVBQU0xQixFQUFTRSxTQUNmQyxFQUFTSCxFQUFTRyxRQUFVLEdBQzVCdGEsRUFBU3BDLEVBQU1vQyxPQUNmeVgsRUFBUSxFQUNScUUsR0FBUyxFQUNUeFMsRUFBU3VTLEVBQUl2UyxRQUFVLEVBQ3ZCRCxFQUFPd1MsRUFBSXhTLE1BQVEsRUFDbkIwUyxFQUFRLEdBQ1JqTSxFQUFTLEdBcUJhLGlCQUFmc0wsSUFDVEEsRUFBYUEsRUFBV2hYLFdBQVcsSUFJckM4VyxFQUFPYyxJQUdQbkIsRUFBVVksRUF3UFYsU0FBb0JRLEVBQU1DLEdBQ3hCLElBQUk3QixFQUFXMkIsSUFFZjNCLEVBQVMvUSxRQUFVNFMsRUFDbkI3QixFQUFTNkIsUUFBVUEsRUFFbkJULEVBQWMzZSxLQUFLOGUsRUFBZ0JPLEVBQVNGLEdBQU81QixFQUFVNEIsSUE5UHhCRyxFQUd2QzNFLElBQ0F6WCxJQUVBLE9BQVN5WCxFQUFRelgsR0FRZixHQS9JVyxLQXlJUGpCLElBQ0Z1SyxFQUFTZ1IsRUFBT3dCLElBQVUsR0F2SWhCLE1BMElaL2MsRUFBWW5CLEVBQU13RyxXQUFXcVQsSUFFQSxDQUkzQixHQXBKSSxLQWlKSm1ELEVBQVloZCxFQUFNd0csV0FBV3FULEVBQVEsS0FoSjVCLEtBcUpQbUQsR0FwSk8sS0FxSlBBLEdBcEpJLEtBcUpKQSxHQXBKUSxLQXFKUkEsR0FuSk8sS0FvSlBBLEdBQ0FBLEdBQWNBLEdBQ2JRLEdBQWNSLElBQWNRLEVBQzdCLENBSUFXLEdBQVMxYyxFQUFhTixHQUN0QnVLLElBRUEsU0FpQ0YsSUE3QkEyUixFQURBN0csRUFBUXFELEVBQVEsRUFFaEJqRSxFQUFNWSxFQWpLSyxLQW1LUHdHLEdBRUZwSCxJQUFReUgsRUFwS0MsTUF1S1RMLEVBQVloZCxFQUFNd0csV0FBV29QLEtBdEtwQixNQXdLdUJvSCxHQUU5QjdZLEVBQU9zYSxFQUNQN0ksSUFBUXlILEdBR1JsWixFQXhLQyxXQTRLSEEsRUFBTzdFLEVBR1RxZCxFQUFtQixHQUNuQlMsRUFBUyxHQUNUTixFQUFhLEdBQ2J6YixFQUFPcWQsRUFBTXZhLEdBQ2J5UixNQUVTQSxFQUFNeFQsSUFDYjRhLEVBQVloZCxFQUFNd0csV0FBV29QLEdBRXhCdlUsRUFBSzJiLEtBSVZGLEdBQWNyYixFQUFhdWIsR0FLdkI3WSxJQUFTN0UsR0FBUXFmLEVBQUl6ZixLQUFLOGMsRUFBUWMsS0FDcENILEVBQW1CRyxFQUNuQk0sRUFBU3BCLEVBQU9jLEtBSXBCRCxFQWxOVSxLQWtORzdjLEVBQU13RyxXQUFXb1AsTUFHNUJBLEtBRUFnSCxFQUFjelksSUFBUzdFLEdBQU8rYyxFQUFhUyxNQUd6Q0gsRUFBbUJHLEVBQ25CTSxFQUFTUixJQUliVyxFQUFPLEVBQUkzSCxFQUFNWSxHQUVacUcsR0FBZVksS0FFUlgsRUFNRDNZLElBQVM3RSxHQUdkdWQsSUFBZU8sRUFDakJILEVBM01TLEVBMk1hLElBSWxCTixJQUFxQkcsSUFDdkJsSCxFQUFNeUgsRUFBUVYsRUFBaUJ2YSxPQUMvQm1iLEVBQU8sRUFBSTNILEVBQU15SCxFQUNqQlIsR0FBYSxHQUlWQSxJQUNISyxFQUFTUCxFQTNOSSxFQUVSLEVBMk5ESixFQUFTdkUsVUF6UFYsTUEwUERnRixFQUFZaGQsRUFBTXdHLFdBQVdvUCxLQUczQnFILEVBQVFDLEVBQVFLLEdBQ2hCSCxFQUFTLE1BQ0FoQixFQUFlWSxHQUN4QkksRUFBUyxLQUVUSCxFQUFRQyxFQUFRSyxHQUdsQk4sRUFBUUMsRUFBUUssS0FLdEJSLEVBQVlLLElBRVBQLEdBR0hJLEVBbFBpQixFQWtQYU0sR0FJaENSLEVBQVk2QixTQUFTOUIsRUFBWStCLEVBQU0xYSxLQTBIM0JrYSxFQXRIR3RCLElBdUhMLE9BQVVzQixHQUFRLE9BQVdBLEVBQU8sU0F0SDVDcEIsRUF0UGMsRUFzUGFNLEdBQzNCUixFQUFZdGIsRUFyUkssUUFzUlJzYixLQUFhZCxHQUd0QmdCLEVBNVBjLEVBNFBhTSxHQUMzQlIsRUFBWWQsRUFBUWMsS0FHcEJJLEVBQVMsR0FHTDJCLEVBQVcvQixJQUNiRSxFQXBRWSxFQW9RZU0sR0FJekJSLEVBQVksUUFFZEksR0FBVTFiLEdBRFZzYixHQUFhLFNBQ3lCLEdBQWdCLE9BQ3REQSxFQUFZLE1BQXNCLEtBQVpBLEdBR3hCQSxFQUFZSSxFQUFTMWIsRUFBYXNiLEtBM0VoQzVZLElBQVM3RSxHQUNYMmQsRUF0TVMsRUFzTWFNLElBZ0Z0QlIsR0FDRnBXLElBRUEyVyxFQUFPYyxJQUNQdkUsRUFBUWpFLEVBQU0sRUFDZGxLLEdBQVVrSyxFQUFNWSxFQUFRLEVBQ3hCdEUsRUFBT2hNLEtBQUs2VyxJQUNaM0wsRUFBT2dOLEtBQ0ZFLFNBRURWLEdBQ0ZBLEVBQWdCMWUsS0FDZDZlLEVBQ0FoQixFQUNBLENBQUN2RyxNQUFPOEcsRUFBTTFILElBQUt4RSxHQUNuQnBSLEVBQU15VyxNQUFNRCxFQUFRLEVBQUdaLElBSTNCMEgsRUFBT2xNLElBTVAwTCxFQUFhOWMsRUFBTXlXLE1BQU1ELEVBQVEsRUFBR1osR0FDcEN1SSxHQUFTckIsRUFDVHBSLEdBQVVvUixFQUFXMWEsT0FDckJ5WCxFQUFRakUsRUFBTSxRQUtBLEtBQWR6VSxJQUVBc0ssSUFDQXlTLElBQ0F4UyxFQUFTLEdBR1B2SyxHQUFjQSxHQUNoQmdkLEdBQVMxYyxFQUFhTixHQUN0QnVLLEtBRUEvRSxJQTRDUixJQUFvQjBYLEVBdENsQixPQUFPbk0sRUFBT3pOLEtBQUssSUFHbkIsU0FBUzJaLElBQ1AsTUFBTyxDQUNMM1MsS0FBTUEsRUFDTkMsT0FBUUEsRUFDUjRTLE9BQVF6RSxHQUFTb0UsRUFBSUssUUFBVSxJQWlCbkMsU0FBUzNYLElBQ0h3WCxJQUNGak0sRUFBT2hNLEtBQUtpWSxHQUVSVCxHQUNGQSxFQUFXeGUsS0FBSzRlLEVBQWFLLEVBQU8sQ0FBQzNILE1BQU84RyxFQUFNMUgsSUFBS3dJLE1BR3pERCxFQUFRLEtBL1RMNUMsQ0FBTXZiLEVBQU91YyxJQWxHdEIsSUFBSW9DLEVBQU0sR0FBRy9kLGVBQ1RhLEVBQWVELE9BQU9DLGFBQ3RCK2MsRUFBT08sU0FBU3BlLFVBR2hCNmIsRUFBVyxDQUNiUyxRQUFTLEtBQ1RGLFVBQVcsS0FDWFksS0FBTSxLQUNOSyxlQUFnQixLQUNoQkQsaUJBQWtCLEtBQ2xCRCxZQUFhLEtBQ2JyQixTQUFVLEdBQ1ZlLFdBQVksS0FDWnhGLFdBQVcsRUFDWHlGLGVBQWUsR0FrQmJuZSxFQUFPLFFBQ1BtZixFQUFPLGNBSVBJLEVBQVEsQ0FFWixZQUFjLEdBQ2QsUUFBYyxJQU1WSCxFQUFRLEdBRVpBLEVBQU1wZixHQUFROGMsRUFDZHNDLEVBQVUsUUFBSXhDLEVBQ2R3QyxFQUFNRCxHQUFRdEMsRUFHZCxJQVNJb0MsRUFBVyxHQTZXZixTQUFTTyxFQUFXVCxHQUNsQixPQUNHQSxHQUFRLEdBQVVBLEdBQVEsR0FDbEIsS0FBVEEsR0FDQ0EsR0FBUSxJQUFVQSxHQUFRLElBQzFCQSxHQUFRLEtBQVVBLEdBQVEsS0FDMUJBLEdBQVEsT0FBVUEsR0FBUSxPQUNQLFFBQVosTUFBUEEsSUFDbUIsUUFBWixNQUFQQSxHQW5YTEUsRUFYeUIsR0FZdkIsK0RBQ0ZBLEVBWjJCLEdBYXpCLGlFQUNGQSxFQWJpQixHQWFNLDZDQUN2QkEsRUFibUIsR0FhTSwrQ0FDekJBLEVBYm1CLEdBYU0sMkNBQ3pCQSxFQWJ3QixHQWN0QixvREFDRkEsRUFkd0IsR0FldEIsZ0YsNkJDcEZGemYsRUFBT0QsUUFJUCxTQUFpQnNDLEdBQ2YsSUFBSWtkLEVBQTRCLGlCQUFkbGQsRUFBeUJBLEVBQVVxRixXQUFXLEdBQUtyRixFQUVyRSxPQUFPa2QsR0FBUSxJQUFNQSxHQUFRLEssNkJDUC9CdmYsRUFBT0QsUUFBVW1nQixFQUVqQixJQUFJQyxFQUFlLEVBQVEsS0FFdkJDLEVBQVdELEVBQWFDLFNBQ3hCQyxFQUFPRixFQUFhRSxLQUNwQkMsRUFBT0gsRUFBYUcsS0FNeEIsU0FBU0osRUFBTUssRUFBTWhlLEVBQU1pZSxFQUFTQyxHQUNkLG1CQUFUbGUsR0FBMEMsbUJBQVppZSxJQUN2Q0MsRUFBVUQsRUFDVkEsRUFBVWplLEVBQ1ZBLEVBQU8sTUFHVDRkLEVBQWFJLEVBQU1oZSxHQUVuQixTQUFrQnVMLEVBQU1wQixHQUN0QixJQUFJZ1UsRUFBU2hVLEVBQVFBLEVBQVFwSixPQUFTLEdBQ2xDeVgsRUFBUTJGLEVBQVNBLEVBQU9DLFNBQVM5WCxRQUFRaUYsR0FBUSxLQUNyRCxPQUFPMFMsRUFBUTFTLEVBQU1pTixFQUFPMkYsS0FMS0QsR0FYckNQLEVBQU1FLFNBQVdBLEVBQ2pCRixFQUFNRyxLQUFPQSxFQUNiSCxFQUFNSSxLQUFPQSxHLGNDWmJ0Z0IsRUFBT0QsUUFBVWtDLFFBQVEsVyw2QkNFRixvQkFBWjJlLFVBQ05BLFFBQVFDLFNBQzBCLElBQW5DRCxRQUFRQyxRQUFRaFksUUFBUSxRQUNXLElBQW5DK1gsUUFBUUMsUUFBUWhZLFFBQVEsUUFBcUQsSUFBckMrWCxRQUFRQyxRQUFRaFksUUFBUSxTQUNsRTdJLEVBQU9ELFFBQVUsQ0FBRTRXLFNBS3JCLFNBQWtCNUUsRUFBSStPLEVBQU1DLEVBQU1DLEdBQ2hDLEdBQWtCLG1CQUFQalAsRUFDVCxNQUFNLElBQUlrUCxVQUFVLDBDQUV0QixJQUNJMU4sRUFBTXRULEVBRE4yTyxFQUFNdkwsVUFBVUMsT0FFcEIsT0FBUXNMLEdBQ1IsS0FBSyxFQUNMLEtBQUssRUFDSCxPQUFPZ1MsUUFBUWpLLFNBQVM1RSxHQUMxQixLQUFLLEVBQ0gsT0FBTzZPLFFBQVFqSyxVQUFTLFdBQ3RCNUUsRUFBRzNSLEtBQUssS0FBTTBnQixNQUVsQixLQUFLLEVBQ0gsT0FBT0YsUUFBUWpLLFVBQVMsV0FDdEI1RSxFQUFHM1IsS0FBSyxLQUFNMGdCLEVBQU1DLE1BRXhCLEtBQUssRUFDSCxPQUFPSCxRQUFRakssVUFBUyxXQUN0QjVFLEVBQUczUixLQUFLLEtBQU0wZ0IsRUFBTUMsRUFBTUMsTUFFOUIsUUFHRSxJQUZBek4sRUFBTyxJQUFJM1AsTUFBTWdMLEVBQU0sR0FDdkIzTyxFQUFJLEVBQ0dBLEVBQUlzVCxFQUFLalEsUUFDZGlRLEVBQUt0VCxLQUFPb0QsVUFBVXBELEdBRXhCLE9BQU8yZ0IsUUFBUWpLLFVBQVMsV0FDdEI1RSxFQUFHa0wsTUFBTSxLQUFNMUosU0FoQ25CdlQsRUFBT0QsUUFBVTZnQixTLGdCQ1BuQixJQUFJTSxFQUFTLEVBQVEsSUFDakJ0YyxFQUFTc2MsRUFBT3RjLE9BR3BCLFNBQVN1YyxFQUFXaEosRUFBS2lKLEdBQ3ZCLElBQUssSUFBSTVmLEtBQU8yVyxFQUNkaUosRUFBSTVmLEdBQU8yVyxFQUFJM1csR0FXbkIsU0FBUzZmLEVBQVkxZCxFQUFLMmQsRUFBa0JoZSxHQUMxQyxPQUFPc0IsRUFBT2pCLEVBQUsyZCxFQUFrQmhlLEdBVG5Dc0IsRUFBTzJjLE1BQVEzYyxFQUFPNGMsT0FBUzVjLEVBQU82YyxhQUFlN2MsRUFBTzhjLGdCQUM5RDFoQixFQUFPRCxRQUFVbWhCLEdBR2pCQyxFQUFVRCxFQUFRbmhCLEdBQ2xCQSxFQUFRNkUsT0FBU3ljLEdBUW5CRixFQUFVdmMsRUFBUXljLEdBRWxCQSxFQUFXRSxLQUFPLFNBQVU1ZCxFQUFLMmQsRUFBa0JoZSxHQUNqRCxHQUFtQixpQkFBUkssRUFDVCxNQUFNLElBQUlzZCxVQUFVLGlDQUV0QixPQUFPcmMsRUFBT2pCLEVBQUsyZCxFQUFrQmhlLElBR3ZDK2QsRUFBV0csTUFBUSxTQUFVRyxFQUFNQyxFQUFNQyxHQUN2QyxHQUFvQixpQkFBVEYsRUFDVCxNQUFNLElBQUlWLFVBQVUsNkJBRXRCLElBQUlhLEVBQU1sZCxFQUFPK2MsR0FVakIsWUFUYTNiLElBQVQ0YixFQUNzQixpQkFBYkMsRUFDVEMsRUFBSUYsS0FBS0EsRUFBTUMsR0FFZkMsRUFBSUYsS0FBS0EsR0FHWEUsRUFBSUYsS0FBSyxHQUVKRSxHQUdUVCxFQUFXSSxZQUFjLFNBQVVFLEdBQ2pDLEdBQW9CLGlCQUFUQSxFQUNULE1BQU0sSUFBSVYsVUFBVSw2QkFFdEIsT0FBT3JjLEVBQU8rYyxJQUdoQk4sRUFBV0ssZ0JBQWtCLFNBQVVDLEdBQ3JDLEdBQW9CLGlCQUFUQSxFQUNULE1BQU0sSUFBSVYsVUFBVSw2QkFFdEIsT0FBT0MsRUFBT2EsV0FBV0osSyxnQkM1RDNCLElBQUkvZ0IsRUFBaUIsRUFBUSxLQXFCN0JaLEVBQU9ELFFBbkJQLFNBQXVCcUQsR0FDckIsSUFBSyxJQUFJbkQsRUFBSSxFQUFHQSxFQUFJb0QsVUFBVUMsT0FBUXJELElBQUssQ0FDekMsSUFBSXNELEVBQXlCLE1BQWhCRixVQUFVcEQsR0FBYVUsT0FBTzBDLFVBQVVwRCxJQUFNLEdBQ3ZEK2hCLEVBQVVyaEIsT0FBT29WLEtBQUt4UyxHQUVrQixtQkFBakM1QyxPQUFPc2hCLHdCQUNoQkQsRUFBVUEsRUFBUUUsT0FBT3ZoQixPQUFPc2hCLHNCQUFzQjFlLEdBQVE0ZSxRQUFPLFNBQVVDLEdBQzdFLE9BQU96aEIsT0FBTzBoQix5QkFBeUI5ZSxFQUFRNmUsR0FBS3ZoQixnQkFJeERtaEIsRUFBUWxhLFNBQVEsU0FBVXRHLEdBQ3hCWixFQUFld0MsRUFBUTVCLEVBQUsrQixFQUFPL0IsT0FJdkMsT0FBTzRCLEksNkJDTlQsSUFBSWxCLEVBQU8sRUFBUSxHQUVmMkMsRUFBUyxFQUFRLElBT2pCeWQsRUFBc0J0aUIsRUFBT0QsUUFBVSxTQUE2QitFLEdBR3RFLElBRkFBLEVBQVVBLEdBQVcsSUFDYkksTUFBUSxPQUNnQixJQUFyQkosRUFBUUssU0FDakIsTUFBTSxJQUFJWCxNQUFNLCtDQUVsQkssRUFBT3pFLEtBQUsyRSxLQUFNRCxJQUVwQjVDLEVBQUtDLFNBQVNtZ0IsRUFBcUJ6ZCxHQVduQ3lkLEVBQW9CemdCLFVBQVV6QixLQUFPLFNBQVVtaUIsRUFBUUMsR0FDckRBLEVBQVU1VyxJQUFJN0csS0FBS0UsS0FBTUYsS0FBS0ksWSw2QkN0Q2hDLElBQUlzZCxFQUFVLEVBQVEsR0FBUUEsT0EwQjlCemlCLEVBQU9ELFFBQVUsU0FBVTJpQixFQUFVQyxHQUNuQyxJQUNJQyxFQUNBekwsRUFGQTBMLEVBQWUsS0FrQm5CLE9BTEVELEdBUkFDLEVBREVILEVBQVNoZCxRQUNJZ2QsRUFBU2hkLFVBRVQsR0FBS2dkLEdBTVBELEVBQU8sb0JBQXFCSSxFQUFjRixHQUYxQ0EsR0FLZnhMLEVBQU0sSUFBSThKLFVBQVUyQixJQUNoQnJELEtBekNTLFdBMENOcEksSSw2QkNqQ1QsSUFBSTJMLEVBQVUsRUFBUSxJQUFjQSxRQUdoQ3hpQixFQUFJLEVBQVEsR0FFWnlpQixFQUFLLEVBQVEsSUFTakIsU0FBU0MsRUFBUXRDLEVBQVF1QyxHQUN2QmxlLEtBQUttZSxRQUFVeEMsRUFDZjNiLEtBQUtvZSxTQUFXRixFQUNoQmxlLEtBQUtxZSxPQUFTLEdBU2hCSixFQUFRbmhCLFVBQVV3aEIsUUFBVSxTQUFVQyxHQUNwQ3ZlLEtBQUtxZSxPQUFPaGMsS0FBS2tjLElBVW5CTixFQUFRbmhCLFVBQVUwaEIsV0FBYSxTQUFVQyxHQUN2QyxJQUFJQyxFQUFVUixFQXNCZCxHQW5CSWxlLEtBQUttZSxTQUNQTSxFQUFVRSxVQUdaRCxFQUFXMWUsS0FBS3FlLE9BQU9PLEtBQUksU0FBVUMsR0FDbkMsSUFBSS9RLEVBQUtoSCxFQUFNMEgsRUFLZixPQUhBVixFQUFNMlEsRUFDTjNYLEVBQU8rWCxFQUFLLEdBQ1pyUSxFQUFPcVEsRUFBSyxHQUNML1gsRUFBS29SLE1BQU1wSyxFQUFLVSxNQUV6QmtRLEVBQVdELEVBQVVLLFdBQVdKLEdBRTVCMWUsS0FBS21lLFNBQ1BNLEVBQVVNLFdBSVBMLEVBQ0gsTUFBTyxHQUtULEdBREFSLEVBQVUsR0FDTmxlLEtBQUtvZSxVQUFZcGUsS0FBS29lLFdBQWE3aUIsRUFBRXVDLFNBQVUsQ0FDakQsSUFBSWtoQixFQUFnQlAsRUFBVU8sY0FDOUJkLEVBQVVGLEVBQUcxTCxPQUFPLElBQUswTSxHQUFpQmhmLEtBQUtvZSxTQUFXLElBQU03aUIsRUFBRXNDLElBSXBFLE9BQU80Z0IsRUFBVUssV0FBVyxDQUFFdmpCLEVBQUVzQyxJQUFLcWdCLEVBQVNRLEVBQVVuakIsRUFBRXNDLE9BYTVELElBQUlvaEIsRUFBZ0Joa0IsRUFBT0QsUUFBVSxTQUF1QitFLEdBQzFEQSxFQUFVQSxHQUFXLEdBRXJCQyxLQUFLa2YsTUFBUW5mLEVBQVFvZixLQUVyQm5mLEtBQUtvZixpQkFBbUJyZixFQUFRc2YsaUJBQW1CLEdBQ25EcmYsS0FBS3NmLE9BQVV2ZixFQUFRd2YsUUFBVzFELFFBQVEyRCxJQUFJQyxTQUFXLElBQU0sRUFFL0R6ZixLQUFLMGYsZUFBaUIsRUFDdEIxZixLQUFLMmYsaUJBQW1CNWYsRUFBUTZmLGlCQUFtQixFQUNuRDVmLEtBQUs2ZixPQUFTLEVBQ2Q3ZixLQUFLOGYsaUJBQW1CLEVBRXhCOWYsS0FBSytmLGFBQWUsSUFBSTlCLEVBQVEsTUFDaENqZSxLQUFLZ2dCLGdCQUFrQmhnQixLQUFLK2YsYUFFNUIvZixLQUFLaWdCLG1CQUFxQixJQUFJQyxPQUFPLE9BQVEsS0FDN0NsZ0IsS0FBS21nQixrQkFBb0IsSUFBSUQsT0FBTzNrQixFQUFFc0MsSUFBTXRDLEVBQUVzQyxJQUFNdEMsRUFBRXNDLElBQU0sSUFBSyxNQUduRW9oQixFQUFjbmlCLFVBQVU2aEIsUUFBVSxXQUNoQzNlLEtBQUswZixnQkFBa0IxZixLQUFLMmYsaUJBQzVCM2YsS0FBSzZmLFFBQVUsR0FHakJaLEVBQWNuaUIsVUFBVWlpQixRQUFVLFdBR2hDLEdBRkEvZSxLQUFLMGYsZ0JBQWtCMWYsS0FBSzJmLGlCQUM1QjNmLEtBQUs2ZixRQUFVLEVBQ1g3ZixLQUFLMGYsZUFBaUIsRUFDeEIsTUFBTSxJQUFJamdCLE1BQU0sOEJBSXBCd2YsRUFBY25pQixVQUFVc2pCLFNBQVcsU0FBVXRaLEVBQU0wSCxHQUNqRHhPLEtBQUtnZ0IsZ0JBQWdCMUIsUUFBUSxDQUFFeFgsRUFBTTBILEtBdUJ2Q3lRLEVBQWNuaUIsVUFBVXVqQixhQUFlLFNBQVVuQyxHQUMvQ2xlLEtBQUsyZSxVQUNMLElBQUkyQixFQUFVLElBQUlyQyxFQUFRamUsS0FBS2dnQixnQkFBaUI5QixHQUM1Q3BYLEVBQU93WixFQUFROUIsV0FBVzloQixLQUFLNGpCLEdBQ25DdGdCLEtBQUtvZ0IsU0FBU3RaLEVBQU0sQ0FBRTlHLE9BQ3RCQSxLQUFLZ2dCLGdCQUFrQk0sR0FlekJyQixFQUFjbmlCLFVBQVV5akIsV0FBYSxXQUNuQ3ZnQixLQUFLZ2dCLGdCQUFrQmhnQixLQUFLZ2dCLGdCQUFnQjdCLFFBQzVDbmUsS0FBSytlLFdBaUJQRSxFQUFjbmlCLFVBQVUwakIsUUFBVSxTQUFVMUcsR0FDdENBLEdBQVFBLElBQVN2ZSxFQUFFdUMsVUFDckJrQyxLQUFLb2dCLFNBQVNwZ0IsS0FBS3lnQixZQUFhLENBQUUzRyxLQW1CdENtRixFQUFjbmlCLFVBQVU0akIsU0FBVyxTQUFVQyxFQUFPQyxFQUFTQyxFQUFRdmIsR0FDL0RxYixJQUFVcGxCLEVBQUV1QyxVQUNka0MsS0FBS29nQixTQUFTcGdCLEtBQUs4Z0IsYUFBYyxDQUFFSCxFQUFPQyxFQUFTQyxFQUFRdmIsS0FZL0QyWixFQUFjbmlCLFVBQVVpa0IsWUFBYyxTQUFVQyxHQUM5QyxHQUFJQSxFQUFPdmdCLE9BQVNsRixFQUFFdUMsU0FBVSxDQUM5QixJQU1JbWpCLEVBTkFuUCxFQUFPOVIsS0FHUGtoQixFQUFjLENBQUVsaEIsS0FBS21oQix3QkFBd0JILElBQzdDSSxFQUFtQkYsRUFBWSxHQUFHM2lCLE9BSWxDeWlCLEVBQU9LLGlCQUNUcmhCLEtBQUsyZSxVQUNMcUMsRUFBT0ssaUJBQWlCdGUsU0FBUSxTQUFVdWUsR0FFeEMsSUFBSUMsRUFBZ0J6UCxFQUFLcVAsd0JBQXdCRyxHQUNqREosRUFBWTdlLEtBQUtrZixHQUNqQkgsRUFBbUJJLEtBQUtDLElBQUlMLEVBQWtCRyxFQUFjaGpCLFdBRzlEeUIsS0FBSytlLFdBSVBrQyxFQUFlRyxFQUFtQnBoQixLQUFLMGYsZUFDdkMxZixLQUFLOGYsaUJBQW1CMEIsS0FBS0MsSUFBSXpoQixLQUFLOGYsaUJBQWtCbUIsR0FHeERqaEIsS0FBS29nQixTQUFTcGdCLEtBQUswaEIsY0FBZSxDQUFFVixNQWtCeEMvQixFQUFjbmlCLFVBQVU2a0IsYUFBZSxTQUFVZixHQUMvQyxJQUFJOU8sRUFBTzlSLEtBQ1g0Z0IsRUFBUTdkLFNBQVEsU0FBVWllLEdBQ3hCbFAsRUFBS2lQLFlBQVlDLE9BbUJyQi9CLEVBQWNuaUIsVUFBVTBoQixXQUFhLFdBQ25DLElBQUkvZCxFQUFPVCxLQUFLK2YsYUFBYXZCLFdBQVd4ZSxNQUt4QyxPQUpJUyxJQUNGQSxFQUFPQSxFQUFLbUQsUUFBUTVELEtBQUttZ0Isa0JBQW1CNWtCLEVBQUVzQyxJQUFNdEMsRUFBRXNDLEtBQ3RENEMsRUFBT3VkLEVBQUd2TCxVQUFVaFMsRUFBTWxGLEVBQUVzQyxLQUFPdEMsRUFBRXNDLEtBRWhDNEMsR0FHVHdlLEVBQWNuaUIsVUFBVWdpQixXQUFhLFNBQVU4QyxHQUM3QyxPQUFPQSxFQUFZeEUsUUFBTyxTQUFVL0gsR0FDbEMsT0FBUUEsR0FBUUEsSUFBUzlaLEVBQUV1QyxZQUMxQjhDLEtBQUssS0FHVnFlLEVBQWNuaUIsVUFBVWdrQixhQUFlLFNBQVVILEVBQU9DLEVBQVNDLEVBQVF2YixHQVV2RSxHQVRLQSxHQUE0QixpQkFBWEEsSUFDcEJBLEVBQVMsV0FHWHNiLEVBQVVBLEdBQVcsR0FDckJDLEVBQVNBLEdBQVUsR0FJZkYsRUFDRkEsRUFBUTVDLEVBQVE0QyxFQUFPLENBQUV4QixLQUFNbmYsS0FBS2tmLGFBRy9CLEdBQUt5QixHQUE0QixJQUFuQkMsRUFBUXJpQixRQUl0QixJQUFLb2lCLEVBQU8sQ0FDakIsSUFJSWtCLEVBSkExQyxFQUFPbmYsS0FBS2tmLE1BQ1o0QyxFQUFZLEdBQ1pDLEVBQWMsR0FtQmxCLEdBZEFuQixFQUFRN2QsU0FBUSxTQUFVaWUsR0FDcEJBLEVBQU9uZ0IsYUFDVGloQixFQUFVemYsS0FBSzJlLEdBRWZlLEVBQVkxZixLQUFLMmUsTUFNckJMLEVBQVEsQ0FBRXhCLEVBREluZixLQUFLZ2lCLG9CQUFvQixHQUFHN0UsT0FBTzJFLEVBQVdDLEdBQWNsQixJQUM1Q2pnQixLQUFLLEtBR25DaWhCLEVBQVk3aEIsS0FBS3NmLE9BQVN0ZixLQUFLMGYsZUFDMUJwYSxFQUFPL0csT0FBU29pQixFQUFNcGlCLE9BQVVzakIsRUFBVyxDQUc5QyxJQUFJSSxFQUFhLElBQUkvQixPQUFPLDZCQUE4QixLQUN0RGdDLEVBQWdCbGlCLEtBQUtnaUIsb0JBQW9CRixFQUFXakIsR0FDcERzQixFQUFrQm5pQixLQUFLZ2lCLG9CQUFvQkQsRUFBYWxCLEdBR3hEdUIsRUFBZ0JGLEVBQWMvVSxNQUFNOFUsR0FDcENJLEVBQWtCRixFQUFnQmhWLE1BQU04VSxJQUFlLEdBRTNELEdBQUlHLEVBQWN4aEIsS0FBSyxPQUFTc2hCLEVBQzlCLE1BQU0sSUFBSXppQixNQUFNLHdEQUVsQixHQUFJNGlCLEVBQWdCemhCLEtBQUssT0FBU3VoQixFQUNoQyxNQUFNLElBQUkxaUIsTUFBTSw0REFLbEIsSUF5Qkk0YSxFQUFPeEIsRUF6QlB5SixFQUFZLFNBQVUvTSxFQUFPc0QsRUFBUXZULEdBQ3ZDLElBQUkrVSxFQUFRLEdBQ1J6UyxFQUFPLEdBRVAyYSxFQUFhamQsRUFBU0EsRUFBTy9HLE9BQVMsRUFBSXNhLEVBQU90YSxPQUFTLEVBa0I5RCxPQWhCQWdYLEVBQU14UyxTQUFRLFNBQVVzUyxHQUNsQmtOLEVBQWEsRUFBSWxOLEVBQUs5VyxPQUFTc2pCLElBQ2pDeEgsRUFBTWhZLEtBQUt3VyxFQUFTalIsRUFBS2hILEtBQUssTUFDOUJnSCxFQUFPLEdBQ1AyYSxFQUFhMUosRUFBT3RhLE9BQVMsR0FFL0JxSixFQUFLdkYsS0FBS2dULEdBQ1ZrTixHQUFjbE4sRUFBSzlXLE9BQVMsS0FHMUJxSixHQUNGeVMsRUFBTWhZLEtBQUt3VyxFQUFTalIsRUFBS2hILEtBQUssTUFFNUIwRSxJQUNGK1UsRUFBTSxHQUFLQSxFQUFNLEdBQUduRSxPQUFPMkMsRUFBT3RhLFNBRTdCOGIsR0FLTC9VLEVBQU8vRyxPQUFTNGdCLEVBQUs1Z0IsUUFBVSxJQUFPc2pCLEdBQ3hDaEosRUFBU21GLEVBQUcxTCxPQUFPLElBQU1oTixFQUFPL0csT0FBUzRnQixFQUFLNWdCLE9BQVMsR0FFckQ4YixFQURFK0gsRUFDTSxHQUFHakYsT0FDVG1GLEVBQVUsQ0FBRW5ELEdBQU9oQyxPQUFPaUYsR0FBZ0J2SixFQUFRdlQsR0FDbERnZCxFQUFVRCxFQUFpQnhKLElBRXBCd0osRUFDREMsRUFBVSxDQUFFbkQsR0FBT2hDLE9BQU9rRixHQUFrQnhKLEVBQVF2VCxHQUVwRCxDQUFFNlosS0FLWnRHLEVBQVNtRixFQUFHMUwsT0FBTyxJQUFLaE4sRUFBTy9HLFNBRS9COGIsRUFBUWlJLEVBREFGLEVBQWNqRixPQUFPa0YsR0FDSnhKLElBQ2Z0YSxPQUFTLElBQ2pCOGIsRUFBUSxHQUFHOEMsT0FDVG1GLEVBQVVGLEVBQWV2SixHQUN6QnlKLEVBQVVELEVBQWlCeEosS0FHL0J3QixFQUFRLENBQUU4RSxHQUFPaEMsT0FBTzlDLElBRzFCc0csRUFBUXRHLEVBQU16WixLQUFLckYsRUFBRXNDLFlBbkd2QjhpQixFQUFRM2dCLEtBQUtrZixNQXdHZixPQUFPNVosRUFBU3FiLEVBQVFwbEIsRUFBRXNDLElBQU10QyxFQUFFc0MsS0FHcENvaEIsRUFBY25pQixVQUFVa2xCLG9CQUFzQixTQUFVcEIsRUFBU0MsR0FFL0QsSUFBSTJCLEVBQWUsR0FDZkMsRUFBVSxHQUNWM1EsRUFBTzlSLEtBRVg2Z0IsRUFBTzlkLFNBQVEsU0FBVTJmLEdBQ3ZCLElBQUkzUSxFQUNBN1csRUFFQXlYLEVBQVFpTyxFQUFROWMsUUFBUTRlLEVBQU1DLGNBQWMsSUFDaEQsR0FBSWhRLEdBQVMsSUFDWFosRUFBTVksRUFBUStQLEVBQU1DLGNBQWNwa0IsT0FHOUJ5ZixFQUFHeEwsV0FBV29PLEVBQVFoTyxNQUFNRCxFQUFPWixHQUFNMlEsRUFBTUMsZ0JBb0JqRCxJQW5CQUQsRUFBTUMsY0FBYzVmLFNBQVEsU0FBVWllLEdBQ3BDd0IsRUFBYW5nQixLQUFLMmUsTUFHZjBCLEVBQU1saUIsVUFRTGlpQixFQUFROVAsR0FDVjhQLEVBQVE5UCxJQUFVLEtBRWxCOFAsRUFBUTlQLEdBQVMsSUFFbkI4UCxFQUFRMVEsR0FBTyxNQVpYMFEsRUFBUTlQLEdBQ1Y4UCxFQUFROVAsSUFBVSxLQUVsQjhQLEVBQVE5UCxHQUFTLElBRW5COFAsRUFBUTFRLEdBQU8sS0FTWjdXLEVBQUl5WCxFQUFRLEVBQUd6WCxFQUFJNlcsRUFBSzdXLEdBQUssRUFDaEN1bkIsRUFBUXZuQixHQUFLLE9BT3JCLElBQUlxYSxFQUFRLEdBRVpxTCxFQUFRN2QsU0FBUSxTQUFVaWUsRUFBUTRCLEdBQ2hDLElBQUl2TixFQUNBd04sRUFDQUMsRUFLQTlCLEVBQU92Z0IsT0FBU2xGLEVBQUV1QyxVQUNwQnlYLEVBQU1sVCxLQUFLLE1BQ2tCLE1BQXpCb2dCLEVBQVFHLEdBQ1ZILEVBQVFoTixPQUFPbU4sRUFBYUEsR0FDVSxNQUE3QkgsRUFBUUcsRUFBYyxJQUMvQkgsRUFBUWhOLE9BQU9tTixFQUFjLEVBQUdBLEVBQWMsSUFJdEM1QixFQUFPbmdCLGNBY2pCZ2lCLEVBQWU3QixFQUFPL2dCLGNBQWMsR0FHZixJQUFqQitnQixFQUFPN2dCLE1BQ1RrVixFQUFPLEdBQUt3TixHQUlaQyxFQUFjOUIsRUFBTzlnQixLQUFLNFMsY0FFMUJ1QyxFQUFPd04sRUFBZSxJQURUL1EsRUFBS2lSLFlBQVkvQixFQUFROEIsS0FJbkM5QixFQUFPeGdCLFVBQVlnaUIsRUFBYTFlLFFBQVFrZCxHQUFVLElBQ3JEM0wsRUFBTyxJQUFNQSxFQUFPLEtBR3RCRSxFQUFNbFQsS0FBS2dULEtBOUJYQSxFQUFPdkQsRUFBS2lSLFlBQVkvQixFQUFRQSxFQUFPOWdCLE1BR25Dc2lCLEVBQWExZSxRQUFRa2QsSUFBVyxHQUNsQixNQUFaM0wsRUFBSyxJQUF3QyxNQUExQkEsRUFBS0EsRUFBSzlXLE9BQVMsS0FDeEM4VyxFQUFPQSxFQUFLekMsTUFBTSxHQUFJLElBSTFCMkMsRUFBTWxULEtBQUtnVCxPQTBCZixJQUFLLElBQUluYSxFQUFJdW5CLEVBQVFsa0IsT0FBUyxFQUFHckQsR0FBSyxJQUFLQSxFQUN0QixPQUFmdW5CLEVBQVF2bkIsSUFDVnFhLEVBQU1FLE9BQU92YSxFQUFHLEVBQUd1bkIsRUFBUXZuQixJQUsvQixJQUFJNGUsRUFBT3ZFLEVBQU02SCxRQUFPLFNBQVUvSCxHQUNoQyxRQUFTQSxLQUNSelUsS0FBSyxLQVlSLE9BSEFrWixHQUZBQSxHQURBQSxHQURBQSxHQURBQSxHQURBQSxFQUFPQSxFQUFLbFcsUUFBUSxZQUFhLE9BQ3JCQSxRQUFRLFlBQWEsT0FDckJBLFFBQVEsVUFBVyxLQUNuQkEsUUFBUSxVQUFXLEtBQ25CQSxRQUFRLGVBQWdCLE9BRXhCUCxRQU1kNGIsRUFBY25pQixVQUFVMmpCLFlBQWMsU0FBVTNHLEdBQzlDQSxFQUFPaUUsRUFBUWpFLEVBQU0sQ0FBRXFGLEtBQU1uZixLQUFLa2YsUUFDbEMsSUFBSTJDLEVBQVk3aEIsS0FBS3NmLE9BQVN0ZixLQUFLMGYsZUFDL0JFLEVBQWtCNUIsRUFBRzFMLE9BQU8sSUFBS3RTLEtBQUswZixnQkFDMUMsT0FBTzFmLEtBQUtnakIsVUFBVWxKLEVBQU0rSCxFQUFXakMsR0FBbUJya0IsRUFBRXNDLElBQU10QyxFQUFFc0MsS0FHdEVvaEIsRUFBY25pQixVQUFVNGtCLGNBQWdCLFNBQVVWLEdBQ2hELElBRUlpQyxFQUNBQyxFQUNBM04sRUFDQTROLEVBTEFyUixFQUFPOVIsS0FRUG9qQixFQUFlNUIsS0FBSzZCLElBQUlyakIsS0FBSzhmLGlCQUFtQixFQUFHOWYsS0FBS29mLGtCQUN4RGtFLEVBQVl0akIsS0FBS3NmLE9BQVM4RCxFQUMxQkcsRUFBY0gsRUFBZXBqQixLQUFLMGYsZUFBaUIsRUFDbkQ4RCxFQUFleGpCLEtBQUttaEIsd0JBQXdCSCxHQTZDaEQsT0ExQ0tBLEVBQU92Z0IsS0FJRCtpQixFQUFhamxCLFFBQVVnbEIsR0FDaENDLEVBQWV4RixFQUFHMUwsT0FBTyxJQUFLdFMsS0FBSzBmLGdCQUMvQjhELEVBQ0EsS0FDQXhGLEVBQUcxTCxPQUFPLElBQUtpUixFQUFjQyxFQUFhamxCLFFBQzlDNGtCLEVBQWMsSUFJZEssRUFBZXhGLEVBQUcxTCxPQUFPLElBQUt0UyxLQUFLMGYsZ0JBQWtCOEQsRUFBZWpvQixFQUFFc0MsSUFDdEVzbEIsRUFBY0MsR0FiZEksRUFBZXhGLEVBQUcxTCxPQUFPLElBQUt0UyxLQUFLMGYsZ0JBQWtCOEQsRUFBZWpvQixFQUFFc0MsSUFpQnhFMFgsRUFBUSxDQUFFaU8sR0FHTnhDLEVBQU92Z0IsTUFDVHdpQixFQUFXampCLEtBQUt5akIsWUFBWXpDLEdBQzVCa0MsRUFBWWxqQixLQUFLMGpCLFlBQVlULEVBQVVLLEdBQ3ZDL04sRUFBTWxULEtBQUsyYixFQUFHMUwsT0FBTyxJQUFLNlEsR0FBZUQsRUFBVSxHQUFLM25CLEVBQUVzQyxLQUMxRHFsQixFQUFVdFEsTUFBTSxHQUFHN1AsU0FBUSxTQUFVNkUsR0FDbkMyTixFQUFNbFQsS0FBSzJiLEVBQUcxTCxPQUFPLElBQUs4USxHQUFnQnhiLEVBQU9yTSxFQUFFc0MsU0FJNUMybEIsRUFBYTlsQixPQUFPOGxCLEVBQWFqbEIsT0FBUyxLQUFPaEQsRUFBRXNDLEtBQzVEMFgsRUFBTWxULEtBQUs5RyxFQUFFc0MsS0FHWG1qQixFQUFPSyxpQkFDVHJoQixLQUFLMmUsVUFDTHFDLEVBQU9LLGlCQUFpQnRlLFNBQVEsU0FBVXVlLEdBQ3hDL0wsRUFBTWxULEtBQUt5UCxFQUFLNFAsY0FBY0osT0FFaEN0aEIsS0FBSytlLFdBR0EvZSxLQUFLOGUsV0FBV3ZKLElBR3pCMEosRUFBY25pQixVQUFVcWtCLHdCQUEwQixTQUFVSCxHQUMxRCxJQUFLQSxFQUFPbmdCLGFBR1YsT0FGa0JiLEtBQUsyakIsa0JBQWtCM0MsRUFBUUEsRUFBTzlnQixLQUN6QzBqQixDQUFZLEdBQ1gsR0FHbEIsSUFDSWQsRUFDQWUsRUFGQXRPLEVBQVEsR0FnQlosT0FYcUIsSUFBakJ5TCxFQUFPN2dCLE1BQ1RvVixFQUFRQSxFQUFNNEgsT0FBTzZELEVBQU8vZ0IsZ0JBSTVCNmlCLEVBQWM5QixFQUFPOWdCLEtBQUs0UyxjQUMxQitRLEVBQWE3akIsS0FBSytpQixZQUFZL0IsRUFBUThCLEdBQ3RDOUIsRUFBTy9nQixjQUFjOEMsU0FBUSxTQUFVOGYsR0FDckN0TixFQUFNbFQsS0FBS3dnQixFQUFlLElBQU1nQixPQUc3QnRPLEVBQU0zVSxLQUFLLE9BR3BCcWUsRUFBY25pQixVQUFVNm1CLGtCQUFvQixTQUFVM0MsRUFBUThDLEdBQzVELElBQUl6VixFQUVKLEdBQUkyUyxFQUFPdGdCLFNBQThCLEtBQW5Cc2dCLEVBQU90Z0IsUUFDM0IyTixFQUFTMlMsRUFBT3RnQixhQUNYLEdBQUlzZ0IsRUFBT3pnQixRQUFTLENBQ3pCLElBQUlBLEVBQVV5Z0IsRUFBT3pnQixRQUduQkEsRUFEcUIsaUJBQVpBLEVBQ0NBLEVBQVErQyxNQUFNLElBQUkxQyxLQUFLLE1BQ3hCL0IsTUFBTUYsUUFBUTRCLEdBQ2JBLEVBQVFLLEtBQUssS0FFYmhGLE9BQU9vVixLQUFLelEsR0FBU0ssS0FBSyxLQUV0Q3lOLEVBQVMsSUFBTTlOLEVBQVUsU0FFekI4TixFQUFTeVYsRUFHWCxPQUFPLFNBQVVsSCxHQUNmLEdBQUkvZCxNQUFNRixRQUFRMFAsR0FDaEIsT0FBT0EsRUFJVCxJQURBLElBQUkwVixFQUFXLEdBQ043b0IsRUFBSSxFQUFHQSxFQUFJMGhCLEVBQU0xaEIsR0FBSyxFQUM3QjZvQixFQUFTMWhCLEtBQUtnTSxHQUVoQixPQUFPMFYsSUFJWDlFLEVBQWNuaUIsVUFBVWltQixZQUFjLFNBQVUvQixFQUFROEMsR0FDdEQsSUFBSXpWLEVBQ0EwVixFQUVBQyxFQUFlaGtCLEtBQUsyakIsa0JBQWtCM0MsRUFBUThDLEdBRWxELE9BQVE5QyxFQUFPN2dCLE9BRWIsVUFBS2MsRUFDTCxLQUFLLEtBRUhvTixFQUFTLElBRFQwVixFQUFXQyxFQUFhLElBQ0QsR0FDdkIsTUFDRixLQUFLem9CLEVBQUV3QyxTQUVMc1EsRUFBUyxLQURUMFYsRUFBV0MsRUFBYSxJQUNBLEdBQUssSUFDN0IsTUFDRixLQUFLem9CLEVBQUV5QyxhQUVMcVEsRUFBUyxLQURUMFYsRUFBV0MsRUFBYSxJQUNBLEdBQUssS0FBT0QsRUFBUyxHQUFLLFNBQ2xELE1BQ0YsS0FBS3hvQixFQUFFMEMsWUFFTG9RLEdBREEwVixFQUFXQyxFQUFhLElBQ0QsR0FBSyxLQUFPRCxFQUFTLEdBQUssUUFDakQsTUFDRixLQUFLeG9CLEVBQUU0QyxVQUNMa1EsRUFBUyxNQUNULE1BQ0YsS0FBSzlTLEVBQUUyQyxPQUVMbVEsR0FEQTBWLEVBQVdDLEVBQWEsSUFDTixHQUFLLE9BQ3ZCLE1BQ0YsUUFFRTNWLEdBREEwVixFQUFXQyxFQUFhaEQsRUFBTzdnQixRQUNiUyxLQUFLLEtBRTNCLE9BQU95TixHQUdUNFEsRUFBY25pQixVQUFVMm1CLFlBQWMsU0FBVXpDLEdBQzlDLElBQUlpRCxFQUFTLENBQUU5RSxLQUFNbmYsS0FBS2tmLE9Bb0IxQixPQWxCQXRqQixPQUFPb1YsS0FBS2dRLEdBQVFqZSxTQUFRLFNBQVVtaEIsR0FDcEMsSUFBSUMsRUFBY25ELEVBQU9rRCxHQUVyQkMsSUFBZ0I1b0IsRUFBRXVDLFdBQ3BCbW1CLEVBQU9DLEdBQWtCQyxNQUl6QkYsRUFBTzFqQixVQUNxQixpQkFBbkIwakIsRUFBTzFqQixRQUNoQjBqQixFQUFPMWpCLFFBQVUwakIsRUFBTzFqQixRQUFRK0MsTUFBTSxJQUFJMUMsS0FBSyxNQUN0Qy9CLE1BQU1GLFFBQVFzbEIsRUFBTzFqQixTQUM5QjBqQixFQUFPMWpCLFFBQVUwakIsRUFBTzFqQixRQUFRSyxLQUFLLE1BRXJDcWpCLEVBQU8xakIsUUFBVTNFLE9BQU9vVixLQUFLaVQsRUFBTzFqQixTQUFTSyxLQUFLLE9BSS9DbWQsRUFBUS9kLEtBQUtva0IsZUFBZXBELEdBQVNpRCxJQUc5Q2hGLEVBQWNuaUIsVUFBVTRtQixZQUFjLFNBQVU1SixFQUFNeUYsR0FDcEQsSUFBSWxGLEVBQVEsR0FDUmdLLEVBQWEsQ0FBRSxJQUFLLElBQUssSUFBSyxJQUFLLEtBQ25DOW1CLEVBQUssSUFBSTJpQixPQUFPLElBQU1tRSxFQUFXempCLEtBQUssSUFBTSxNQUFReWpCLEVBQVd6akIsS0FBSyxJQUFNLE9BZ0M5RSxPQTNCQWtaLEdBREFBLEdBRkFBLEVBQU9BLEVBQUtsVyxRQUFRLFlBQWEsTUFFckJQLFFBQ0FPLFFBQVE1RCxLQUFLaWdCLG1CQUFvQixNQUl4QzNjLE1BQU0vSCxFQUFFc0MsS0FBS2tGLFNBQVEsU0FBVTZFLEdBQ2xDLEdBQUkyWCxHQUFTM1gsRUFBS3JKLE9BQ2hCOGIsRUFBTWhZLEtBQUt1RixPQURiLENBUUEsSUFIQSxJQUFJMGMsRUFBWSxFQUNaQyxFQUFVaEYsRUFFUGdGLEdBQVczYyxFQUFLckosUUFDakJnbUIsSUFBWTNjLEVBQUtySixRQUFVOGxCLEVBQVd2Z0IsUUFBUThELEVBQUsyYyxJQUFZLEtBRWpFQSxFQUFVRCxHQURRL21CLEVBQUd1UixLQUFLbEgsRUFBSzVELFVBQVVzZ0IsRUFBV0MsS0FBYSxJQUFJdk8sTUFDOUIsR0FFekNxRSxFQUFNaFksS0FBS3VGLEVBQUs1RCxVQUFVc2dCLEVBQVdDLElBQ3JDRCxFQUFZQyxFQUNaQSxHQUFXaEYsRUFFVCtFLEVBQVkxYyxFQUFLckosUUFDbkI4YixFQUFNaFksS0FBS3VGLEVBQUs1RCxVQUFVc2dCLEVBQVdDLFFBSWxDbEssR0FHVDRFLEVBQWNuaUIsVUFBVWttQixVQUFZLFNBQVVsSixFQUFNeUYsRUFBTzFHLEdBQ3pELElBQUl3QixFQUFRcmEsS0FBSzBqQixZQUFZNUosRUFBTXlGLEdBSW5DLE9BSEFsRixFQUFRQSxFQUFNdUUsS0FBSSxTQUFVaFgsR0FDMUIsT0FBT2lSLEVBQVNqUixNQUVMaEgsS0FBS3JGLEVBQUVzQyxNQUd0Qm9oQixFQUFjbmlCLFVBQVVzbkIsZUFBaUIsU0FBVXBELEdBQ2pELE9BQU9BLEVBQU92Z0IsTyw2QkN2eEJoQixJQUFJdEQsRUFBVSxFQUFRLEdBR2xCNUIsRUFBSSxFQUFRLEdBRVp5aUIsRUFBSyxFQUFRLElBQ2JpQixFQUFnQixFQUFRLElBWTVCLFNBQVN1RixFQUE4QnprQixHQUNyQ2tmLEVBQWM1akIsS0FBSzJFLEtBQU1ELEdBOEIzQixTQUFTMGtCLEVBQTRCMWtCLEdBQ25Da2YsRUFBYzVqQixLQUFLMkUsS0FBTUQsR0F3QjNCLFNBQVMya0IsRUFBcUIza0IsR0FDNUIwa0IsRUFBNEJwcEIsS0FBSzJFLEtBQU1ELEdBckR6QzVDLEVBQUtDLFNBQVNvbkIsRUFBK0J2RixHQUU3Q3VGLEVBQThCMW5CLFVBQVVzbkIsZUFBaUIsU0FBVXBELEdBQ2pFLElBQUl2Z0IsRUFBT3VnQixFQUFPdmdCLEtBQ2xCLElBQWlELElBQTdDdWdCLEVBQU92Z0IsS0FBS3FELFFBQVEscUJBQ2xCa2QsRUFBTzNnQixlQUFpQjlFLEVBQUV1QyxTQUFVLENBQ3RDLElBQUk2bUIsRUFBbUIsQ0FBRXBwQixFQUFFd0MsU0FBVXhDLEVBQUV5QyxlQUNuQ2dqQixFQUFPbmdCLGNBQWlCOGpCLEVBQWlCN2dCLFFBQVFrZCxFQUFPN2dCLFFBQVUsS0FDcEVNLEdBQVEsZ0NBSWQsT0FBT0EsR0FHVHhGLEVBQU9ELFFBQVF3cEIsOEJBQWdDQSxFQWdCL0NybkIsRUFBS0MsU0FBU3FuQixFQUE2QnhGLEdBRTNDd0YsRUFBNEIzbkIsVUFBVWttQixVQUFZLFNBQVVsSixFQUFNeUYsRUFBTzFHLEdBQ3ZFLElBQUl3QixFQUFRUCxFQUFLeFcsTUFBTSxNQUl2QixPQUhBK1csRUFBUUEsRUFBTXVFLEtBQUksU0FBVWhYLEdBQzFCLE9BQU9vVyxFQUFHM0ssUUFBUXdGLEVBQVNqUixPQUVoQmhILEtBQUssT0FFcEIzRixFQUFPRCxRQUFReXBCLDRCQUE4QkEsRUFnQjdDdG5CLEVBQUtDLFNBQVNzbkIsRUFBc0JELEdBRXBDQyxFQUFxQjVuQixVQUFVNG1CLFlBQWMsU0FBVTVKLEdBQ3JELE9BQU9BLEVBQUt4VyxNQUFNLE9BR3BCckksRUFBT0QsUUFBUTBwQixxQkFBdUJBLEc7Ozs7O0VDOUV0QyxJQUFJeEgsRUFBd0J0aEIsT0FBT3NoQixzQkFDL0JuZ0IsRUFBaUJuQixPQUFPa0IsVUFBVUMsZUFDbEM2bkIsRUFBbUJocEIsT0FBT2tCLFVBQVUrbkIscUJBRXhDLFNBQVNDLEVBQVNDLEdBQ2pCLEdBQUlBLFFBQ0gsTUFBTSxJQUFJN0ksVUFBVSx5REFHckIsT0FBT3RnQixPQUFPbXBCLEdBK0NmOXBCLEVBQU9ELFFBNUNQLFdBQ0MsSUFDQyxJQUFLWSxPQUFPcWMsT0FDWCxPQUFPLEVBTVIsSUFBSStNLEVBQVEsSUFBSXJuQixPQUFPLE9BRXZCLEdBREFxbkIsRUFBTSxHQUFLLEtBQ2tDLE1BQXpDcHBCLE9BQU9xcEIsb0JBQW9CRCxHQUFPLEdBQ3JDLE9BQU8sRUFLUixJQURBLElBQUlFLEVBQVEsR0FDSGhxQixFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkJncUIsRUFBTSxJQUFNdm5CLE9BQU9DLGFBQWExQyxJQUFNQSxFQUt2QyxHQUF3QixlQUhYVSxPQUFPcXBCLG9CQUFvQkMsR0FBT3RHLEtBQUksU0FBVWppQixHQUM1RCxPQUFPdW9CLEVBQU12b0IsTUFFSGlFLEtBQUssSUFDZixPQUFPLEVBSVIsSUFBSXVrQixFQUFRLEdBSVosTUFIQSx1QkFBdUI3aEIsTUFBTSxJQUFJUCxTQUFRLFNBQVVxaUIsR0FDbERELEVBQU1DLEdBQVVBLEtBR2YseUJBREV4cEIsT0FBT29WLEtBQUtwVixPQUFPcWMsT0FBTyxHQUFJa04sSUFBUXZrQixLQUFLLElBTTlDLE1BQU93UixHQUVSLE9BQU8sR0FJUWlULEdBQW9CenBCLE9BQU9xYyxPQUFTLFNBQVU1WixFQUFRRyxHQUt0RSxJQUpBLElBQUlnZSxFQUVBOEksRUFEQUMsRUFBS1QsRUFBU3ptQixHQUdUcEIsRUFBSSxFQUFHQSxFQUFJcUIsVUFBVUMsT0FBUXRCLElBQUssQ0FHMUMsSUFBSyxJQUFJUixLQUZUK2YsRUFBTzVnQixPQUFPMEMsVUFBVXJCLElBR25CRixFQUFlMUIsS0FBS21oQixFQUFNL2YsS0FDN0I4b0IsRUFBRzlvQixHQUFPK2YsRUFBSy9mLElBSWpCLEdBQUl5Z0IsRUFBdUIsQ0FDMUJvSSxFQUFVcEksRUFBc0JWLEdBQ2hDLElBQUssSUFBSXRoQixFQUFJLEVBQUdBLEVBQUlvcUIsRUFBUS9tQixPQUFRckQsSUFDL0IwcEIsRUFBaUJ2cEIsS0FBS21oQixFQUFNOEksRUFBUXBxQixNQUN2Q3FxQixFQUFHRCxFQUFRcHFCLElBQU1zaEIsRUFBSzhJLEVBQVFwcUIsTUFNbEMsT0FBT3FxQixJLDZCQ3RGUnRxQixFQUFPRCxRQUVQLFNBQW1CbUIsR0FDakIsT0FBT0EsRUFBTStRLGdCLDZCQ0hmLElBQUlzWSxFQUFTLEVBVWIsU0FBU0MsSUFDUCxPQUFPakUsS0FBS2tFLElBQUksSUFBS0YsR0FUdkJ4cUIsRUFBUTJxQixRQUFVRixJQUNsQnpxQixFQUFRNHFCLFdBQWFILElBQ3JCenFCLEVBQVE2cUIsa0JBQW9CSixJQUM1QnpxQixFQUFROHFCLE9BQVNMLElBQ2pCenFCLEVBQVErcUIsZUFBaUJOLElBQ3pCenFCLEVBQVFnckIsZUFBaUJQLElBQ3pCenFCLEVBQVFpckIsc0JBQXdCUixLOzs7Ozs7R0NHaEMsSUFDSTFlLEVBREFtZixFQUFNLEdBT1ZqckIsRUFBT0QsUUFvQlAsU0FBZ0I0TyxFQUFLMkksR0FDbkIsR0FBbUIsaUJBQVIzSSxFQUNULE1BQU0sSUFBSXNTLFVBQVUscUJBSXRCLEdBQVksSUFBUjNKLEVBQVcsT0FBTzNJLEVBQ3RCLEdBQVksSUFBUjJJLEVBQVcsT0FBTzNJLEVBQU1BLEVBRTVCLElBQUk2WCxFQUFNN1gsRUFBSXJMLE9BQVNnVSxFQUN2QixHQUFJeEwsSUFBVTZDLFFBQXdCLElBQVY3QyxFQUMxQkEsRUFBUTZDLEVBQ1JzYyxFQUFNLFFBQ0QsR0FBSUEsRUFBSTNuQixRQUFVa2pCLEVBQ3ZCLE9BQU95RSxFQUFJaFEsT0FBTyxFQUFHdUwsR0FHdkIsS0FBT0EsRUFBTXlFLEVBQUkzbkIsUUFBVWdVLEVBQU0sR0FDckIsRUFBTkEsSUFDRjJULEdBQU90YyxHQUdUMkksSUFBUSxFQUNSM0ksR0FBT0EsRUFLVCxPQURBc2MsR0FEQUEsR0FBT3RjLEdBQ0dzTSxPQUFPLEVBQUd1TCxLLDZCQ2pFdEJ4bUIsRUFBT0QsUUFLUCxTQUEyQm1CLEdBQ3pCLElBQUk0b0IsRUFBTXBuQixPQUFPeEIsR0FDYjZaLEVBQVErTyxFQUFJeG1CLE9BRWhCLEtBUFMsT0FPRndtQixFQUFJcm5CLFNBQVNzWSxLQUlwQixPQUFPK08sRUFBSW5TLE1BQU0sRUFBR29ELEVBQVEsSyw2QkNiOUIvYSxFQUFPRCxRQUVQLFNBQW1CbXJCLEVBQWNDLEVBQVlDLEVBQUtwQyxHQUNoRCxJQUlJcUMsRUFDQUMsRUFDQXZaLEVBQ0F5TixFQUNBK0wsRUFDQUMsRUFUQUMsRUFBUSxDQUFDLFdBQVksY0FDckJDLEVBQVFELEVBQU1ub0IsT0FDZEEsRUFBUzRuQixFQUFhNW5CLE9BQ3RCeVgsR0FBUyxFQVFiLE9BQVNBLEVBQVF6WCxHQUFRLENBT3ZCLElBTkErbkIsRUFBY0gsRUFBYW5RLEdBQzNCdVEsRUFBU0QsRUFBWSxJQUFNLEdBQzNCdFosRUFBS3NaLEVBQVksR0FDakI3TCxHQUFVLEVBQ1ZnTSxHQUFTLElBRUFoTSxFQUFTa00sR0FHaEIsUUFBcUIxbEIsSUFBakJzbEIsRUFGSkMsRUFBT0UsRUFBTWpNLEtBRXFCOEwsRUFBT0MsS0FBVUgsRUFBSXRtQixRQUFReW1CLEdBQU8sQ0FDcEVDLEdBQVMsRUFDVCxNQUlKLElBQUlBLEdBSUFMLEVBQVdwWixHQUFJa0wsTUFBTW1PLEVBQUtwQyxHQUM1QixPQUFPLEVBSVgsT0FBTyxJLDZCQ3ZDVCxJQUFJMkMsRUFBcUIsRUFBUSxLQUVqQzNyQixFQUFPRCxRQUlQLFNBQW1CbUIsR0FDakIsT0FBT3lxQixFQUFtQnpxQixHQUFPK1EsZ0IsZ0JDaUJuQ2pTLEVBQU9ELFFBQVVpVyxFQUdqQixJQUFJRixFQUFhblYsT0FBT29WLE1BQVEsU0FBVWxELEdBQ3hDLElBQUlrRCxFQUFPLEdBQ1gsSUFBSyxJQUFJdlUsS0FBT3FSLEVBQUtrRCxFQUFLM08sS0FBSzVGLEdBQy9CLE9BQU91VSxHQU1MN1QsRUFBTyxFQUFRLEdBQ25CQSxFQUFLQyxTQUFXLEVBQVEsR0FHeEIsSUFBSThULEVBQVcsRUFBUSxJQUNuQkMsRUFBVyxFQUFRLElBU3ZCLFNBQVNGLEVBQU9sUixHQUNkLEtBQU1DLGdCQUFnQmlSLEdBQ3BCLE9BQU8sSUFBSUEsRUFBT2xSLEdBRXBCbVIsRUFBUzdWLEtBQUsyRSxLQUFNRCxHQUNwQm9SLEVBQVM5VixLQUFLMkUsS0FBTUQsR0FFaEJBLElBQWdDLElBQXJCQSxFQUFRc1IsV0FDckJyUixLQUFLcVIsVUFBVyxHQUVkdFIsSUFBZ0MsSUFBckJBLEVBQVF1UixXQUNyQnRSLEtBQUtzUixVQUFXLEdBRWxCdFIsS0FBS3VSLGVBQWdCLEVBQ2pCeFIsSUFBcUMsSUFBMUJBLEVBQVF3UixnQkFDckJ2UixLQUFLdVIsZUFBZ0IsR0FFdkJ2UixLQUFLd1IsS0FBSyxNQUFPQyxHQUluQixTQUFTQSxJQUdIelIsS0FBS3VSLGVBQWlCdlIsS0FBSzBSLGVBQWVDLE9BSzlDa0ssUUFBUWpLLFNBQVM1UixLQUFLK1IsSUFBSXJWLEtBQUtzRCxPQXBDakM3QyxFQUFLQyxTQUFTNlQsRUFBUUMsR0F1Q3RCLFNBQWtCMlYsRUFBSTVnQixHQUNwQixJQUFLLElBQUkvSyxFQUFJLEVBQUdDLEVBQUkwckIsRUFBR3RvQixPQUFRckQsRUFBSUMsRUFBR0QsSUFDcEMrSyxFQUFFNGdCLEVBQUczckIsR0FBSUEsR0F2Q2I2SCxDQUFRZ08sRUFBV0ksRUFBU3JVLFlBQVksU0FBU3NVLEdBQzFDSCxFQUFPblUsVUFBVXNVLEtBQ3BCSCxFQUFPblUsVUFBVXNVLEdBQVVELEVBQVNyVSxVQUFVc1UsUSw2QkM1Q2xELFNBQVMwVixFQUFXQyxHQUNsQkEsRUFBTUMsVUFBVUYsV0FBYUMsRUFBTUMsVUFBVTdULE9BQU8sUUFBUyxDQUMzRCxhQUFjLENBQ1o0VCxFQUFNQyxVQUFVQyxNQUFNLGNBQ3RCLENBQ0VDLFFBQVMsMEZBQ1RDLFlBQVksSUFHaEJDLFFBQVMsQ0FDUCxDQUNFRixRQUFTLGtDQUNUQyxZQUFZLEdBRWQsQ0FDRUQsUUFBUyw2V0FDVEMsWUFBWSxJQUdoQnJCLE9BQVEsZ09BRVJ1QixTQUFVLG9GQUNWQyxTQUFVLG1HQUVaUCxFQUFNQyxVQUFVRixXQUNkLGNBQ0EsR0FBR0ksUUFBVSx1RUFDZkgsRUFBTUMsVUFBVTVrQixhQUFhLGFBQWMsVUFBVyxDQUNwRG1sQixNQUFPLENBQ0xMLFFBQVMsMkhBQ1RDLFlBQVksRUFDWkssUUFBUSxHQUdWLG9CQUFxQixDQUNuQk4sUUFBUyxnS0FDVE8sTUFBTyxZQUVUQyxVQUFXLENBQ1QsQ0FDRVIsUUFBUyx3R0FDVEMsWUFBWSxFQUNaUSxPQUFRWixFQUFNQyxVQUFVRixZQUUxQixDQUNFSSxRQUFTLGdEQUNUUyxPQUFRWixFQUFNQyxVQUFVRixZQUUxQixDQUNFSSxRQUFTLG9EQUNUQyxZQUFZLEVBQ1pRLE9BQVFaLEVBQU1DLFVBQVVGLFlBRTFCLENBQ0VJLFFBQVMscWNBQ1RDLFlBQVksRUFDWlEsT0FBUVosRUFBTUMsVUFBVUYsYUFHNUIxbUIsU0FBVSw4QkFFWjJtQixFQUFNQyxVQUFVNWtCLGFBQWEsYUFBYyxTQUFVLENBQ25ELGtCQUFtQixDQUNqQjhrQixRQUFTLG9FQUNUTSxRQUFRLEVBQ1JHLE9BQVEsQ0FDTix1QkFBd0IsQ0FDdEJULFFBQVMsUUFDVE8sTUFBTyxVQUVUL1osY0FBZSxDQUNid1osUUFBUyw2REFDVEMsWUFBWSxFQUNaUSxPQUFRLENBQ04sNEJBQTZCLENBQzNCVCxRQUFTLFVBQ1RPLE1BQU8sZUFFVEcsS0FBTWIsRUFBTUMsVUFBVUYsYUFHMUIvWSxPQUFRLGNBSVZnWixFQUFNQyxVQUFVYSxRQUNsQmQsRUFBTUMsVUFBVWEsT0FBT2ptQixJQUFJa21CLFdBQVcsU0FBVSxjQUVsRGYsRUFBTUMsVUFBVWUsR0FBS2hCLEVBQU1DLFVBQVVGLFdBM0Z2QzdyQixFQUFPRCxRQUFVOHJCLEVBQ2pCQSxFQUFXa0IsWUFBYyxhQUN6QmxCLEVBQVdtQixRQUFVLENBQUMsTyw2QkNDdEIsU0FBU0MsRUFBV25CLEdBQ2xCQSxFQUFNQyxVQUFVa0IsV0FBYW5CLEVBQU1DLFVBQVU3VCxPQUFPLGFBQWMsQ0FFaEVpVSxRQUFTLDJZQUNUZSxRQUFTLDBGQUVYcEIsRUFBTUMsVUFBVW9CLEdBQUtyQixFQUFNQyxVQUFVa0IsV0FUdkNqdEIsRUFBT0QsUUFBVWt0QixFQUNqQkEsRUFBV0YsWUFBYyxhQUN6QkUsRUFBV0QsUUFBVSxDQUFDLE8sNkJDQXRCLElBd05NSSxFQUVBL2dCLEVBMU5GZ2hCLEdBd05FRCxFQUFVLFVBQVdFLE9BRXJCamhCLEVBQVUrZ0IsRUFBVUUsT0FBT3hCLFdBQVE5bEIsRUFJdkMsV0FFTW9uQixFQUNGRSxPQUFPeEIsTUFBUXpmLFNBRVJpaEIsT0FBT3hCLE1BR2hCc0IsT0FBVXBuQixFQUNWcUcsT0FBVXJHLEtBbE9NLG9CQUFYdW5CLE9BQ2Esb0JBQVQxVyxLQUNMLEdBQ0FBLEtBQ0YwVyxRQUVGekIsTUFBUSxDQUFDMEIsUUFBUSxFQUFNQyw2QkFBNkIsR0FJeEQsSUFBSXRsQixFQUFJLEVBQVEsS0FDWnVsQixFQUFTLEVBQVEsSUFDakI1QixFQUFRLEVBQVEsS0FDaEJjLEVBQVMsRUFBUSxLQUNqQm5ZLEVBQU0sRUFBUSxLQUNkdVgsRUFBUSxFQUFRLEtBQ2hCYyxFQUFLLEVBQVEsSUFFakJPLElBRUEsSUFBSXhOLEVBQU0sR0FBRy9kLGVBR2IsU0FBUzZyQixLQUVUQSxFQUFVOXJCLFVBQVlpcUIsRUFHdEIsSUFBSThCLEVBQVUsSUFBSUQsRUFxQmxCLFNBQVNFLEVBQVNDLEdBQ2hCLEdBQXVCLG1CQUFaQSxJQUEyQkEsRUFBUWYsWUFDNUMsTUFBTSxJQUFJdm9CLE1BQU0sMkNBQTZDc3BCLEVBQVUsVUFJMUI5bkIsSUFBM0M0bkIsRUFBUTdCLFVBQVUrQixFQUFRZixjQUM1QmUsRUFBUUYsR0F6Qlo1dEIsRUFBT0QsUUFBVTZ0QixFQUdqQkEsRUFBUUcsVUFtRFIsU0FBbUI3c0IsRUFBT1YsR0FDeEIsSUFDSXN0QixFQURBRSxFQUFNbEMsRUFBTWlDLFVBR2hCLEdBQXFCLGlCQUFWN3NCLEVBQ1QsTUFBTSxJQUFJc0QsTUFBTSx1Q0FBeUN0RCxFQUFRLEtBSW5FLEdBQWdDLFdBQTVCMHNCLEVBQVExckIsS0FBS21ELEtBQUs3RSxHQUNwQnN0QixFQUFVdHRCLEVBQ1ZBLEVBQU8sU0FDRixDQUNMLEdBQW9CLGlCQUFUQSxFQUNULE1BQU0sSUFBSWdFLE1BQU0sc0NBQXdDaEUsRUFBTyxLQUdqRSxJQUFJcWYsRUFBSXpmLEtBQUt3dEIsRUFBUTdCLFVBQVd2ckIsR0FHOUIsTUFBTSxJQUFJZ0UsTUFBTSxzQkFBd0JoRSxFQUFPLHVCQUYvQ3N0QixFQUFVRixFQUFRN0IsVUFBVXZyQixHQU1oQyxPQUFPd3RCLEVBQUk1dEIsS0FBSzJFLEtBQU03RCxFQUFPNHNCLEVBQVN0dEIsSUExRXhDb3RCLEVBQVFDLFNBQVdBLEVBQ25CRCxFQUFRcEIsTUF3QlIsU0FBZWhzQixFQUFNZ3NCLEdBQ25CLElBRUlockIsRUFDQXlzQixFQUNBM3FCLEVBQ0F5WCxFQUxBZ1IsRUFBWTZCLEVBQVE3QixVQUNwQnBJLEVBQU1uakIsRUFNTmdzQixLQUNGN0ksRUFBTSxJQUNGbmpCLEdBQVFnc0IsR0FHZCxJQUFLaHJCLEtBQU9taUIsRUFNVixJQUxBc0ssRUFBT3RLLEVBQUluaUIsR0FFWDhCLEdBREEycUIsRUFBdUIsaUJBQVRBLEVBQW9CLENBQUNBLEdBQVFBLEdBQzdCM3FCLE9BQ2R5WCxHQUFTLElBRUFBLEVBQVF6WCxHQUNmeW9CLEVBQVVrQyxFQUFLbFQsSUFBVWdSLEVBQVV2cUIsSUEzQ3pDb3NCLEVBQVFsZixXQTJFUixTQUFvQndmLEdBQ2xCLEdBQXdCLGlCQUFiQSxFQUNULE1BQU0sSUFBSTFwQixNQUFNLDBDQUE0QzBwQixFQUFXLEtBR3pFLE9BQU9yTyxFQUFJemYsS0FBS3d0QixFQUFRN0IsVUFBV21DLElBL0VyQ04sRUFBUU8sY0FrRlIsV0FDRSxJQUVJRCxFQUZBbkMsRUFBWTZCLEVBQVE3QixVQUNwQmtDLEVBQU8sR0FHWCxJQUFLQyxLQUFZbkMsRUFFYmxNLEVBQUl6ZixLQUFLMnJCLEVBQVdtQyxJQUNXLGlCQUF4Qm5DLEVBQVVtQyxJQUVqQkQsRUFBSzdtQixLQUFLOG1CLEdBSWQsT0FBT0QsR0E3RlRKLEVBQVNqQixHQUNUaUIsRUFBU3BaLEdBQ1RvWixFQUFTN0IsR0FDVDZCLEVBQVNmLEdBRVRjLEVBQVExckIsS0FBS2tzQixPQXNKYixTQUFnQkMsR0FDZCxPQUFPQSxHQXRKVFQsRUFBUVUsTUFBTUMsVUEwRmQsU0FBbUJydEIsRUFBT2d0QixFQUFVeE4sR0FDbEMsSUFBSTZELEVBRUosR0FBcUIsaUJBQVZyakIsRUFDVCxNQUFPLENBQUNtRSxLQUFNLE9BQVFuRSxNQUFPQSxHQUcvQixHQUFpQyxVQUE3QjBzQixFQUFRMXJCLEtBQUttRCxLQUFLbkUsR0FDcEIsT0EwQkosU0FBc0I2VyxFQUFRbVcsR0FDNUIsSUFHSWh0QixFQUhBa1MsRUFBUyxHQUNUOVAsRUFBU3lVLEVBQU96VSxPQUNoQnlYLEdBQVMsRUFHYixPQUFTQSxFQUFRelgsR0FHRCxNQUZkcEMsRUFBUTZXLEVBQU9nRCxLQUVYN1osTUFBZ0JBLEdBQ2xCa1MsRUFBT2hNLEtBQUtsRyxHQUloQjZaLEdBQVMsRUFDVHpYLEVBQVM4UCxFQUFPOVAsT0FFaEIsT0FBU3lYLEVBQVF6WCxHQUNmcEMsRUFBUWtTLEVBQU8ySCxHQUNmM0gsRUFBTzJILEdBQVM2UyxFQUFRVSxNQUFNQyxVQUFVcnRCLEVBQU9ndEIsRUFBVTlhLEdBRzNELE9BQU9BLEVBaERFb2IsQ0FBYXR0QixFQUFPZ3RCLEdBRzdCM0osRUFBTSxDQUNKbGYsS0FBTW5FLEVBQU1tRSxLQUNabUgsUUFBU29oQixFQUFRVSxNQUFNQyxVQUFVcnRCLEVBQU1zTCxRQUFTMGhCLEVBQVV4TixHQUMxRC9aLElBQUssT0FDTDhuQixRQUFTLENBQUMsUUFBU3Z0QixFQUFNbUUsTUFDekJ3VCxXQUFZLEdBQ1pxVixTQUFVQSxFQUNWeE4sT0FBUUEsR0FHTnhmLEVBQU1zckIsUUFDUmpJLEVBQUlrSyxRQUFVbEssRUFBSWtLLFFBQVF2TSxPQUFPaGhCLEVBQU1zckIsUUFLekMsT0FGQW9CLEVBQVFjLE1BQU1DLElBQUksT0FBUXBLLEdBRW5CcGMsRUFDTG9jLEVBQUk1ZCxJQUFNLElBQU00ZCxFQUFJa0ssUUFBUTlvQixLQUFLLEtBbUNyQyxTQUFvQmlwQixHQUNsQixJQUFJcHRCLEVBRUosSUFBS0EsS0FBT290QixFQUNWQSxFQUFNcHRCLEdBQU9rc0IsRUFBT2tCLEVBQU1wdEIsSUFHNUIsT0FBT290QixFQXpDTC9WLENBQVcwTCxFQUFJMUwsWUFDZjBMLEVBQUkvWCxXLDZCQzlLUnhNLEVBQU9ELFFBQVUsRUFBUSxNLGlCQ0Z6QixTQUFVd3RCLEdBQ04sSUFBSWpyQixFQUFLLENBQ0x1c0IsV0FBWSxPQUNaaEUsT0FBUSxVQUNSaUUsS0FBTSxNQUNOQyxTQUFVLE9BQ1ZsUSxLQUFNLFlBQ05tUSxPQUFRLFdBQ1JDLFlBQWEseUZBQ2J6dEIsSUFBSyxzQkFDTDB0QixXQUFZLHdCQUNaQyxhQUFjLGFBQ2RDLEtBQU0sV0FHVixTQUFTdE0sSUFDTCxJQUFJdGhCLEVBQU02QixVQUFVLEdBQUl5SSxFQUFRZ1gsRUFBUWhYLE1BSXhDLE9BSE1BLEVBQU10SyxJQUFRc0ssRUFBTWhLLGVBQWVOLEtBQ3JDc0ssRUFBTXRLLEdBQU9zaEIsRUFBUXJHLE1BQU1qYixJQUV4QnNoQixFQUFRTCxPQUFPcmlCLEtBQUssS0FBTTBMLEVBQU10SyxHQUFNNkIsV0FHakR5ZixFQUFRTCxPQUFTLFNBQVM0TSxFQUFZQyxHQUNsQyxJQUFpRTNyQixFQUFrQjFELEVBQUd3SyxFQUFHeUgsRUFBT3FkLEVBQUtDLEVBQWVDLEVBK0pwR0MsRUEvSlpyZCxFQUFTLEVBQUdzZCxFQUFjTixFQUFXL3JCLE9BQVFzc0IsRUFBWSxHQUFTdlIsRUFBUyxHQUFpRHdSLEdBQWMsRUFBTVQsRUFBTyxHQUMzSixJQUFLbnZCLEVBQUksRUFBR0EsRUFBSTB2QixFQUFhMXZCLElBRXpCLEdBQWtCLFlBRGxCMnZCLEVBQVlFLEVBQVNULEVBQVdwdkIsS0FFNUJvZSxFQUFPQSxFQUFPL2EsUUFBVStyQixFQUFXcHZCLFFBRWxDLEdBQWtCLFVBQWQydkIsRUFBdUIsQ0FFNUIsSUFEQTFkLEVBQVFtZCxFQUFXcHZCLElBQ1QsR0FFTixJQURBMEQsRUFBTTJyQixFQUFLamQsR0FDTjVILEVBQUksRUFBR0EsRUFBSXlILEVBQU0sR0FBRzVPLE9BQVFtSCxJQUFLLENBQ2xDLElBQUs5RyxFQUFJN0IsZUFBZW9RLEVBQU0sR0FBR3pILElBQzdCLE1BQU0sSUFBSWpHLE1BQU1zZSxFQUFRLHlDQUEwQzVRLEVBQU0sR0FBR3pILEtBRS9FOUcsRUFBTUEsRUFBSXVPLEVBQU0sR0FBR3pILFNBSXZCOUcsRUFES3VPLEVBQU0sR0FDTG9kLEVBQUtwZCxFQUFNLElBR1hvZCxFQUFLamQsS0FPZixHQUpxQixZQUFqQnlkLEVBQVNuc0IsS0FDVEEsRUFBTUEsS0FHTnJCLEVBQUd1c0IsV0FBV3RzQixLQUFLMlAsRUFBTSxLQUFPNVAsRUFBR3lzQixTQUFTeHNCLEtBQUsyUCxFQUFNLEtBQXlCLFVBQWpCNGQsRUFBU25zQixJQUFvQm9zQixNQUFNcHNCLEdBQ2xHLE1BQU0sSUFBSXNkLFVBQVU2QixFQUFRLDBDQUEyQ2dOLEVBQVNuc0IsS0FPcEYsT0FKSXJCLEVBQUd1b0IsT0FBT3RvQixLQUFLMlAsRUFBTSxNQUNyQjJkLEVBQWNsc0IsR0FBTyxHQUdqQnVPLEVBQU0sSUFDVixJQUFLLElBQ0R2TyxFQUFNQSxFQUFJRixTQUFTLEdBQ3ZCLE1BQ0EsSUFBSyxJQUNERSxFQUFNakIsT0FBT0MsYUFBYWdCLEdBQzlCLE1BQ0EsSUFBSyxJQUNMLElBQUssSUFDREEsRUFBTW1jLFNBQVNuYyxFQUFLLElBQ3hCLE1BQ0EsSUFBSyxJQUNEQSxFQUFNNlksS0FBSytSLFVBQVU1cUIsRUFBSyxLQUFNdU8sRUFBTSxHQUFLNE4sU0FBUzVOLEVBQU0sSUFBTSxHQUNwRSxNQUNBLElBQUssSUFDRHZPLEVBQU11TyxFQUFNLEdBQUt2TyxFQUFJcXNCLGNBQWM5ZCxFQUFNLElBQU12TyxFQUFJcXNCLGdCQUN2RCxNQUNBLElBQUssSUFDRHJzQixFQUFNdU8sRUFBTSxHQUFLK2QsV0FBV3RzQixHQUFLdXNCLFFBQVFoZSxFQUFNLElBQU0rZCxXQUFXdHNCLEdBQ3BFLE1BQ0EsSUFBSyxJQUNEQSxFQUFNdU8sRUFBTSxHQUFLK2QsV0FBV3RzQixHQUFLd3NCLFlBQVlqZSxFQUFNLElBQU0rZCxXQUFXdHNCLEdBQ3hFLE1BQ0EsSUFBSyxJQUNEQSxFQUFNQSxFQUFJRixTQUFTLEdBQ3ZCLE1BQ0EsSUFBSyxJQUNERSxHQUFRQSxFQUFNakIsT0FBT2lCLEtBQVN1TyxFQUFNLEdBQUt2TyxFQUFJb0YsVUFBVSxFQUFHbUosRUFBTSxJQUFNdk8sRUFDMUUsTUFDQSxJQUFLLElBQ0RBLEtBQWMsRUFDbEIsTUFDQSxJQUFLLElBQ0RBLEVBQU1BLEVBQUlGLFNBQVMsSUFDdkIsTUFDQSxJQUFLLElBQ0RFLEVBQU1BLEVBQUlGLFNBQVMsSUFBSW9VLGNBRzNCdlYsRUFBR3dzQixLQUFLdnNCLEtBQUsyUCxFQUFNLElBQ25CbU0sRUFBT0EsRUFBTy9hLFFBQVVLLElBR3BCckIsRUFBR3VvQixPQUFPdG9CLEtBQUsyUCxFQUFNLEtBQVMyZCxJQUFlM2QsRUFBTSxHQUtuRGtkLEVBQU8sSUFKUEEsRUFBT1MsRUFBYyxJQUFNLElBQzNCbHNCLEVBQU1BLEVBQUlGLFdBQVdrRixRQUFRckcsRUFBRzhzQixLQUFNLEtBSzFDSSxFQUFnQnRkLEVBQU0sR0FBa0IsTUFBYkEsRUFBTSxHQUFhLElBQU1BLEVBQU0sR0FBR3pQLE9BQU8sR0FBSyxJQUN6RWd0QixFQUFhdmQsRUFBTSxJQUFNa2QsRUFBT3pyQixHQUFLTCxPQUNyQ2lzQixFQUFNcmQsRUFBTSxJQUFNdWQsRUFBYSxHQXVFM0JDLEVBdkUwQ0YsRUF3RW5ENXJCLE1BeEVrRTZyQixFQXdFL0MsR0FBRzlwQixLQUFLK3BCLElBeEUyRCxHQUNqRnJSLEVBQU9BLEVBQU8vYSxRQUFVNE8sRUFBTSxHQUFLa2QsRUFBT3pyQixFQUFNNHJCLEVBQXlCLE1BQWxCQyxFQUF3QkosRUFBT0csRUFBTTVyQixFQUFNNHJCLEVBQU1ILEVBQU96ckIsR0FJM0gsT0FBTzBhLEVBQU8xWSxLQUFLLEtBR3ZCbWQsRUFBUWhYLE1BQVEsR0FFaEJnWCxFQUFRckcsTUFBUSxTQUFTMlQsR0FFckIsSUFEQSxJQUFJQyxFQUFPRCxFQUFLbGUsRUFBUSxHQUFJbWQsRUFBYSxHQUFJaUIsRUFBWSxFQUNsREQsR0FBTSxDQUNULEdBQXFDLFFBQWhDbmUsRUFBUTVQLEVBQUd1YyxLQUFLaEwsS0FBS3djLElBQ3RCaEIsRUFBV0EsRUFBVy9yQixRQUFVNE8sRUFBTSxRQUVyQyxHQUF1QyxRQUFsQ0EsRUFBUTVQLEVBQUcwc0IsT0FBT25iLEtBQUt3YyxJQUM3QmhCLEVBQVdBLEVBQVcvckIsUUFBVSxRQUUvQixJQUE0QyxRQUF2QzRPLEVBQVE1UCxFQUFHMnNCLFlBQVlwYixLQUFLd2MsSUFnQ2xDLE1BQU0sSUFBSUUsWUFBWSxvQ0EvQnRCLEdBQUlyZSxFQUFNLEdBQUksQ0FDVm9lLEdBQWEsRUFDYixJQUFJRSxFQUFhLEdBQUlDLEVBQW9CdmUsRUFBTSxHQUFJd2UsRUFBYyxHQUNqRSxHQUF1RCxRQUFsREEsRUFBY3B1QixFQUFHZCxJQUFJcVMsS0FBSzRjLElBZTNCLE1BQU0sSUFBSUYsWUFBWSxnREFidEIsSUFEQUMsRUFBV0EsRUFBV2x0QixRQUFVb3RCLEVBQVksR0FDd0MsTUFBNUVELEVBQW9CQSxFQUFrQjFuQixVQUFVMm5CLEVBQVksR0FBR3B0QixVQUNuRSxHQUE4RCxRQUF6RG90QixFQUFjcHVCLEVBQUc0c0IsV0FBV3JiLEtBQUs0YyxJQUNsQ0QsRUFBV0EsRUFBV2x0QixRQUFVb3RCLEVBQVksT0FFM0MsSUFBZ0UsUUFBM0RBLEVBQWNwdUIsRUFBRzZzQixhQUFhdGIsS0FBSzRjLElBSXpDLE1BQU0sSUFBSUYsWUFBWSxnREFIdEJDLEVBQVdBLEVBQVdsdEIsUUFBVW90QixFQUFZLEdBVXhEeGUsRUFBTSxHQUFLc2UsT0FHWEYsR0FBYSxFQUVqQixHQUFrQixJQUFkQSxFQUNBLE1BQU0sSUFBSTlyQixNQUFNLDZFQUVwQjZxQixFQUFXQSxFQUFXL3JCLFFBQVU0TyxFQUtwQ21lLEVBQU9BLEVBQUt0bkIsVUFBVW1KLEVBQU0sR0FBRzVPLFFBRW5DLE9BQU8rckIsR0FZWCxTQUFTUyxFQUFTYSxHQUNkLE9BQU9od0IsT0FBT2tCLFVBQVU0QixTQUFTckQsS0FBS3V3QixHQUFVaFosTUFBTSxHQUFJLEdBQUcxRixjQVc3RGxTLEVBQVEraUIsUUFBVUEsRUFDbEIvaUIsRUFBUTZ3QixTQXRCRyxTQUFTUixFQUFLZCxFQUFNdUIsR0FHL0IsT0FGQUEsR0FBU3ZCLEdBQVEsSUFBSTNYLE1BQU0sSUFDckI2QyxPQUFPLEVBQUcsRUFBRzRWLEdBQ1p0TixFQUFRN0YsTUFBTSxLQUFNNFQsSUE3S25DLENBK01xQixvQkFBWHRELFFBQWdDQSxTLDZCQ3ZNMUMsSUFBSTlLLEVBQVMsRUFBUSxHQUFRQSxPQUd6Qm5pQixFQUFJLEVBQVEsR0FFWnlpQixFQUFLLEVBQVEsSUFHYitOLEVBQWEsRUFBUSxJQUNyQkMsRUFBZSxFQUFRLElBQ3ZCQyxFQUF1QixFQUFRLElBQy9CQyxFQUFjLEVBQVEsSUFDdEJDLEVBQWMsRUFBUSxJQUN0QjVPLEVBQXNCLEVBQVEsSUFDOUI2TyxFQUFrQixFQUFRLElBQzFCQyxFQUFtQixFQUFRLElBQzNCQyxFQUFnQixFQUFRLElBQ3hCQyxFQUFtQixFQUFRLElBRzNCQyxFQUFzQixFQUFRLElBYzlCQyxFQUFrQnh4QixFQUFPRCxRQUFVLFNBQXlCK0UsR0FDOURBLEVBQVVBLEdBQVcsR0FFckJDLEtBQUswc0IsWUFBYzNzQixFQUFRMnNCLFlBQzNCMXNCLEtBQUsyc0IsZ0JBQWtCNXNCLEVBQVE0c0IsZ0JBQy9CM3NCLEtBQUs0c0IsWUFBYzdzQixFQUFRNnNCLGFBQWUsR0FDMUM1c0IsS0FBSzZzQixnQkFBa0I5c0IsRUFBUThzQixnQkFHL0I3c0IsS0FBSzhzQixZQUFjLEdBR25COXNCLEtBQUs4b0IsU0FBUyxTQUFVLEtBQU1xRCxHQUM5Qm5zQixLQUFLOG9CLFNBQVMsU0FBVSxRQUFTcUQsR0FDakNuc0IsS0FBSzhvQixTQUFTLFNBQVUsYUFBY3ZMLEdBQ3RDdmQsS0FBSzhvQixTQUFTLFNBQVUsWUFBYXNELEdBQ3JDcHNCLEtBQUs4b0IsU0FBUyxTQUFVLGFBQWN1RCxHQUN0Q3JzQixLQUFLOG9CLFNBQVMsU0FBVSxTQUFVa0QsR0FDbENoc0IsS0FBSzhvQixTQUFTLFNBQVUsY0FBZW1ELEdBQ3ZDanNCLEtBQUs4b0IsU0FBUyxTQUFVLFFBQVNvRCxHQUNqQ2xzQixLQUFLOG9CLFNBQVMsU0FBVSxPQUFRaUQsR0FDaEMvckIsS0FBSzhvQixTQUFTLFNBQVUsVUFBV3dELEdBQ25DdHNCLEtBQUs4b0IsU0FBUyxTQUFVLFVBQVd5RCxHQUduQ3ZzQixLQUFLK3NCLGNBR0wvc0IsS0FBS2d0QixTQUFXLEdBQ2hCaHRCLEtBQUtpdEIscUJBQXVCLEdBRzVCanRCLEtBQUtrdEIsY0FBZ0IsR0FDckJsdEIsS0FBS210Qix5QkFBMkIsR0FHaENudEIsS0FBS290QixVQUFZLEdBSWpCcHRCLEtBQUtxdEIsc0JBQXdCLElBQUluTixPQUFPLDRDQUl4Q2xnQixLQUFLc3RCLDRCQUE4QixJQUlqQ0MsRUFBZ0IsRUFBUSxJQUN4QkMsRUFBeUIsRUFBUSxJQWNyQ2YsRUFBZ0IzdkIsVUFBVWdzQixTQUFXLFNBQVUyRSxFQUFjdHhCLEVBQU9TLEdBQ2xFb0QsS0FBSzhzQixZQUFZVyxHQUFnQnp0QixLQUFLOHNCLFlBQVlXLElBQWlCLEdBQ25FenRCLEtBQUs4c0IsWUFBWVcsR0FBY3R4QixHQUFTUyxHQUcxQzZ2QixFQUFnQjN2QixVQUFVNHdCLGFBQWUsU0FBVUQsRUFBY3R4QixFQUFPa0UsR0FJdEUsT0FISS9CLFVBQVVDLE9BQVMsSUFDckI4QixFQUFlLE1BRVZMLEtBQUs4c0IsWUFBWVcsR0FBY3R4QixJQUFVa0UsR0FhbERvc0IsRUFBZ0IzdkIsVUFBVTZ3QixZQUFjLFNBQVU1dEIsR0FFaEQsSUFBSyxJQUFJbEQsS0FEVGtELEVBQVVBLEdBQVcsR0FFZmllLEVBQUcvVyxJQUFJbEgsRUFBU2xELEtBQ2xCbUQsS0FBS290QixVQUFVdndCLEdBQVlrRCxFQUFRbEQsSUFNdkNtRCxLQUFLZ3RCLFNBQVNqcUIsU0FBUSxTQUFVaWUsR0FDMUJoRCxFQUFHL1csSUFBSWxILEVBQVNpaEIsRUFBTzlnQixRQUN6QjhnQixFQUFPM2dCLGFBQWVOLEVBQVFpaEIsRUFBTzlnQixXQVczQ3VzQixFQUFnQjN2QixVQUFVOHdCLFdBQWEsU0FBVTF0QixHQUMvQyxJQUFJbU8sRUFBUzJQLEVBQUcvVyxJQUFJakgsS0FBS290QixVQUFXbHRCLEdBQVFGLEtBQUtvdEIsVUFBVWx0QixHQUFRLEtBUW5FLE9BTkFGLEtBQUtndEIsU0FBU2pxQixTQUFRLFNBQVVpZSxHQUMxQkEsRUFBTzlnQixPQUFTQSxHQUFROGQsRUFBRy9XLElBQUkrWixFQUFRLGtCQUN6QzNTLEVBQVMyUyxFQUFPM2dCLGlCQUliZ08sR0FnQlRvZSxFQUFnQjN2QixVQUFVaWtCLFlBQWMsU0FBVXZTLEVBQU16TyxHQU90RCxHQUxBQSxFQUFVQSxHQUFXLEdBRUQsaUJBSHBCeU8sRUFBT0EsS0FJTEEsRUFBTyxDQUFFQSxLQUVOM1AsTUFBTUYsUUFBUTZQLEdBQ2pCLE1BQU0sSUFBSTBOLFVBQVUsNkRBRXRCLEdBQXVCLGlCQUFabmMsR0FBd0JsQixNQUFNRixRQUFRb0IsR0FDL0MsTUFBTSxJQUFJbWMsVUFBVSxnREFLdEIsSUFBSzFOLEdBQXdCLElBQWhCQSxFQUFLalEsUUFBZ0J5QixLQUFLNHNCLFlBQVk5b0IsUUFBUTBLLEVBQUssR0FBRyxJQUFNLEVBQUcsQ0FDMUUsR0FBSUEsR0FBVXpPLEVBQVFHLEtBQ3BCLE1BQU0sSUFBSVQsTUFBTSwrQ0FFbEJNLEVBQVVDLEtBQUs2dEIsZUFBZXJmLEVBQU16TyxRQUlwQ0EsRUFBVUMsS0FBSzh0QixhQUFhdGYsRUFBTXpPLEdBSXBDLFFBQW9DLElBQXpCQSxFQUFRTSxhQUE4QixDQUMvQyxJQUFJSCxFQUFPSCxFQUFRRyxLQUNmOGQsRUFBRy9XLElBQUlqSCxLQUFLb3RCLFVBQVdsdEIsR0FDekJILEVBQVFNLGFBQWVMLEtBQUtvdEIsVUFBVWx0QixRQUNHLElBQXpCRixLQUFLMnNCLGtCQUNyQjVzQixFQUFRTSxhQUFlTCxLQUFLMnNCLGlCQUtoQyxJQUFJb0IsRUFBYy90QixLQUFLZ3VCLGdCQUFnQmp1QixHQUN2QyxHQUEyQixtQkFBaEJndUIsRUFDVCxNQUFNLElBQUl0dUIsTUFBTWllLEVBQU8sdUJBQXdCcVEsSUFFakQsSUFBSS9NLEVBQVMsSUFBSStNLEVBQVlodUIsR0FHekJrdUIsRUFBZWp1QixLQUFLMHRCLGFBQWEsT0FBUTFNLEVBQU8xZ0IsS0FBTTBnQixFQUFPMWdCLE1BQ2pFLEdBQTRCLG1CQUFqQjJ0QixFQUNULE1BQU0sSUFBSXh1QixNQUFNaWUsRUFBTyx1QkFBd0J1USxJQUdqRCxPQUFPanVCLEtBQUtrdUIsV0FBV2xOLElBU3pCeUwsRUFBZ0IzdkIsVUFBVXF4QixpQkFBbUIsU0FBVXB1QixHQUNyRCxJQUFJMmlCLEVBQVEsSUFBSTZLLEVBQWN2dEIsS0FBTUQsR0FFcEMsT0FEQUMsS0FBS2t0QixjQUFjN3FCLEtBQUtxZ0IsR0FDakJBLEdBU1QrSixFQUFnQjN2QixVQUFVc3hCLDBCQUE0QixTQUFVcnVCLEdBQzlELElBQUkyaUIsRUFBUSxJQUFJOEssRUFBdUJ4dEIsS0FBTUQsR0FFN0MsT0FEQUMsS0FBS210Qix5QkFBeUI5cUIsS0FBS3FnQixHQUM1QkEsR0FHVCtKLEVBQWdCM3ZCLFVBQVVveEIsV0FBYSxTQUFVbE4sR0FDL0MsSUFBSWxQLEVBQU85UixLQXdCWCxPQXJCQUEsS0FBS3F1QixlQUFlck4sR0FHcEJoaEIsS0FBS2d0QixTQUFTM3FCLEtBQUsyZSxHQUNuQkEsRUFBTzFmLFVBQVl0QixLQUduQmdoQixFQUFPL2dCLGNBQWM4QyxTQUFRLFNBQVU4ZixHQUNyQy9RLEVBQUttYixxQkFBcUJwSyxHQUFnQjdCLEtBSTVDQSxFQUFPL2dCLGNBQWM4QyxTQUFRLFNBQVU4ZixHQUNqQ0EsRUFBYTFWLE1BQU0yRSxFQUFLdWIseUJBQ3JCdmIsRUFBS3diLDRCQUE0QmdCLEtBQUtDLFVBQ3pDemMsRUFBS3diLDRCQUE0QmpyQixNQUFLLE9BTXJDMmUsR0FHVHlMLEVBQWdCM3ZCLFVBQVUweEIsY0FBZ0IsU0FBVXhOLEdBQ2xELElBQUk0QixFQUFjNWlCLEtBQUtndEIsU0FBU2xwQixRQUFRa2QsR0FDcEM0QixHQUFlLEdBQ2pCNWlCLEtBQUtndEIsU0FBU3ZYLE9BQU9tTixFQUFhLElBSXRDNkosRUFBZ0IzdkIsVUFBVTJ4QixxQkFBdUIsU0FBVW50QixHQUV6RCxJQUFJb3RCLEVBQWdCLEdBQ3BCMXVCLEtBQUtrdEIsY0FBY25xQixTQUFRLFNBQVUyZixHQUNuQyxHQUFJZ00sRUFBY2hNLEVBQU1pTSxPQUN0QixNQUFNLElBQUlsdkIsTUFBTWllLEVBQU8sb0RBQXFEZ0YsRUFBTWlNLFFBRXBGRCxFQUFjaE0sRUFBTWlNLE9BQVNqTSxLQUkvQixJQXdCSWtNLEVBeEJBQyxFQUFXLEdBQ2YsU0FBU0MsRUFBVzlOLEdBRWxCLE9BQU9BLEVBQU9yZ0IsVUFFaEJXLEVBQVU0ckIsY0FBY25xQixTQUFRLFNBQVUyZixHQUduQ2dNLEVBQWNoTSxFQUFNaU0sU0FDdkJELEVBQWNoTSxFQUFNaU0sT0FBUzN1QixLQUFLbXVCLGlCQUFpQixDQUNqRFEsTUFBT2pNLEVBQU1pTSxNQUNiakMsWUFBYWhLLEVBQU1nSyxlQUt2QmhLLEVBQU1DLGNBQWM1ZixTQUFRLFNBQVVpZSxHQUNwQzZOLEVBQVNDLEVBQVc5TixJQUFXME4sRUFBY2hNLEVBQU1pTSxZQUVwRDN1QixNQU1Ic0IsRUFBVTZyQix5QkFBeUJwcUIsU0FBUSxTQUFVMmYsR0FDbkRrTSxFQUFhNXVCLEtBQUtvdUIsMEJBQTBCLENBQzFDNXRCLFNBQVVraUIsRUFBTWxpQixXQUdsQmtpQixFQUFNQyxjQUFjNWYsU0FBUSxTQUFVaWUsR0FDcEM2TixFQUFTQyxFQUFXOU4sSUFBVzROLE9BRWhDNXVCLE1BR0hzQixFQUFVMHJCLFNBQVNqcUIsU0FBUSxTQUFVaWUsR0FDbkMsSUFBSXZrQixFQUFNcXlCLEVBQVc5TixHQUNqQjZOLEVBQVNweUIsR0FDWG95QixFQUFTcHlCLEdBQUt5eEIsV0FBV2xOLEdBRXpCaGhCLEtBQUtrdUIsV0FBV2xOLE9BS3RCeUwsRUFBZ0IzdkIsVUFBVSt3QixlQUFpQixTQUFVM3RCLEVBQU1ILEdBS3pELEdBSklsQixNQUFNRixRQUFRdUIsS0FDaEJBLEVBQU9BLEVBQUssSUFHVkgsRUFBUVMsU0FDVixNQUFNLElBQUlmLE1BQU0sc0RBZWxCLE9BVklNLEVBQVFJLFFBQVU1RSxFQUFFd0MsVUFBWWdDLEVBQVFJLFFBQVU1RSxFQUFFeUMsZUFDdEQrQixFQUFRUyxVQUFXLEdBRWpCVCxFQUFRSSxRQUFVNUUsRUFBRXlDLG1CQUFnRCxJQUF6QitCLEVBQVFNLGVBQ3JETixFQUFRUyxVQUFXLEdBSXJCVCxFQUFRRyxLQUFPQSxFQUNmSCxFQUFRRSxjQUFnQixHQUNqQkYsR0FHVDBzQixFQUFnQjN2QixVQUFVZ3hCLGFBQWUsU0FBVXRmLEVBQU16TyxHQUN2RCxJQUFJNnNCLEVBQWM1c0IsS0FBSzRzQixZQUNuQjNzQixFQUFnQixHQUNoQjh1QixFQUFvQixHQUd4QnZnQixFQUFLekwsU0FBUSxTQUFVOGYsR0FFckIsR0FBSStKLEVBQVk5b0IsUUFBUStlLEVBQWEsSUFBTSxFQUN6QyxNQUFNLElBQUlwakIsTUFBTWllLEVBQU8sc0RBQ3JCbUYsRUFDQStKLElBS0ozc0IsRUFBY29DLEtBQUt3Z0IsR0FDZkEsRUFBYXRrQixPQUFTLEdBQUtxdUIsRUFBWTlvQixRQUFRK2UsRUFBYSxLQUFPLEdBQ3JFa00sRUFBa0Ixc0IsS0FBS3dnQixNQUszQixJQUFJM2lCLEVBQU9ILEVBQVFHLE1BQVEsS0FHM0IsVUFGT0gsRUFBUUcsTUFFVkEsRUFBTSxDQUNULElBQUk4dUIsRUFBbUJELEVBQWtCeHdCLE9BQVN3d0IsRUFBa0IsR0FBSzl1QixFQUFjLEdBR3ZGLEdBQW9CLEtBRnBCQyxFQUFPOGQsRUFBR3ZMLFVBQVV1YyxFQUFrQmh2QixLQUFLNHNCLGNBRWxDcnVCLE9BQ1AsTUFBTSxJQUFJa0IsTUFDUmllLEVBQU8sMENBQTJDemQsRUFBY1csS0FBSyxRQUd6RVYsRUFBT0EsRUFBSzBELFFBQVEsS0FBTSxLQU81QixPQUhBN0QsRUFBUUcsS0FBT0EsRUFDZkgsRUFBUUUsY0FBZ0JBLEVBRWpCRixHQUdUMHNCLEVBQWdCM3ZCLFVBQVVreEIsZ0JBQWtCLFNBQVVqdUIsRUFBU00sR0FDN0RBLEVBQWVBLEdBQWdCLEtBRS9CLElBQUkyZ0IsRUFBVWpoQixFQUFRaWhCLFFBQVUzZ0IsRUFJaEMsY0FIT04sRUFBUWloQixPQUVHaGhCLEtBQUswdEIsYUFBYSxTQUFVMU0sRUFBUUEsSUFJeER5TCxFQUFnQjN2QixVQUFVaXdCLFlBQWMsV0FDdEMsSUFBSWtDLEVBQWdCanZCLEtBQUs2c0IsZ0JBRXJCL2xCLEVBQU85RyxLQURXLGtCQUFvQmdlLEVBQUduTCxXQUFXb2MsSUFFeEQsUUFBb0IsSUFBVG5vQixFQUVULE1BQU0sSUFBSXJILE1BREEsc0NBQXdDd3ZCLEdBR2xELE9BQU9ub0IsR0FJWDJsQixFQUFnQjN2QixVQUFVdXhCLGVBQWlCLFNBQVVyTixHQUNuRCxJQUFJa08sRUFBc0JsdkIsS0FBS2l0QixxQkFDM0JrQyxFQUFvQixJQUl4Qm5PLEVBQU8vZ0IsY0FBYzhDLFNBQVEsU0FBVThmLEdBQ3JDLElBQUl1TSxFQUFnQkYsRUFBb0JyTSxRQUNYLElBQWxCdU0sR0FDVEQsRUFBa0I5c0IsS0FBSyxDQUFFd2dCLEVBQWN1TSxPQUl2Q0QsRUFBa0I1d0IsT0FBUyxJQUNQeUIsS0FBSytzQixjQUNYMXhCLEtBQUsyRSxLQUFNZ2hCLEVBQVFtTyxJQUl2QzFDLEVBQWdCM3ZCLFVBQVV1eUIscUJBQXVCLFNBQVVyTyxFQUFRc08sR0FDakUsSUFBSUMsRUFBWUQsRUFBZTFRLEtBQUksU0FBVTRRLEdBQVEsT0FBT0EsRUFBSyxNQUVqRSxNQURBRCxFQUFZQSxFQUFVM3VCLEtBQUssTUFDckI0ckIsRUFDSnhMLEVBQ0F0RCxFQUFPLG1DQUFvQzZSLEtBSS9DOUMsRUFBZ0IzdkIsVUFBVTJ5Qix1QkFBeUIsU0FBVXpPLEVBQVFzTyxHQUVuRSxJQUFJeGQsRUFBTzlSLEtBQ1hzdkIsRUFBZXZzQixTQUFRLFNBQVV5c0IsR0FDL0IsSUFBSTNNLEVBQWUyTSxFQUFLLEdBQ3BCRSxFQUFvQkYsRUFBSyxHQUV6QnQwQixFQUFJdzBCLEVBQWtCenZCLGNBQWM2RCxRQUFRK2UsR0FDNUMzbkIsR0FBSyxHQUNQdzBCLEVBQWtCenZCLGNBQWN3VixPQUFPdmEsRUFBRyxVQUVyQzRXLEVBQUttYixxQkFBcUJwSyxHQUdjLElBQTNDNk0sRUFBa0J6dkIsY0FBYzFCLFFBQ2xDbXhCLEVBQWtCcHVCLFVBQVVrdEIsY0FBY2tCLFEsNkJDaGRoRCxJQUFJdnlCLEVBQU8sRUFBUSxHQUVmc3ZCLEVBQWtCLEVBQVEsSUFlMUJjLEVBQWdCdHlCLEVBQU9ELFFBQVUsU0FBdUJzRyxFQUFXdkIsSUFFckVBLEVBQVVBLEdBQVcsSUFHYjhzQixnQkFBbUI5c0IsRUFBUThzQixpQkFBbUJ2ckIsRUFBVXVyQixnQkFDaEU5c0IsRUFBUTZzQixZQUFlN3NCLEVBQVE2c0IsYUFBZXRyQixFQUFVc3JCLFlBQ3hEN3NCLEVBQVE0c0IsZ0JBQW1CNXNCLEVBQVE0c0IsaUJBQW1CcnJCLEVBQVVxckIsZ0JBRWhFRixFQUFnQnB4QixLQUFLMkUsS0FBTUQsR0FHM0JDLEtBQUsydUIsTUFBUTV1QixFQUFRNHVCLE1BQ3JCM3VCLEtBQUsyaUIsY0FBZ0IsR0FHckIzaUIsS0FBSzJ2QixXQUFhcnVCLEVBQ2xCdEIsS0FBSzhzQixZQUFjeHJCLEVBQVV3ckIsWUFDN0I5c0IsS0FBS2d0QixTQUFXMXJCLEVBQVUwckIsU0FDMUJodEIsS0FBS2l0QixxQkFBdUIzckIsRUFBVTJyQixxQkFDdENqdEIsS0FBS290QixVQUFZOXJCLEVBQVU4ckIsVUFDM0JwdEIsS0FBS3N0Qiw0QkFBOEJoc0IsRUFBVWdzQiw0QkFDN0N0dEIsS0FBS210Qix5QkFBMkI3ckIsRUFBVTZyQiwwQkFFNUNod0IsRUFBS0MsU0FBU213QixFQUFlZCxHQUc3QmMsRUFBY3p3QixVQUFVb3hCLFdBQWEsU0FBVWxOLEdBSTdDLE9BRkFBLEVBQVN5TCxFQUFnQjN2QixVQUFVb3hCLFdBQVc3eUIsS0FBSzJFLEtBQU1naEIsR0FDekRoaEIsS0FBSzJpQixjQUFjdGdCLEtBQUsyZSxHQUNqQkEsR0FJVHVNLEVBQWN6d0IsVUFBVTB4QixjQUFnQixTQUFVeE4sR0FFaER5TCxFQUFnQjN2QixVQUFVMHhCLGNBQWNuekIsS0FBSzJFLEtBQU1naEIsR0FDbkQsSUFBSTRCLEVBQWM1aUIsS0FBSzJpQixjQUFjN2UsUUFBUWtkLEdBQ3pDNEIsR0FBZSxHQUNqQjVpQixLQUFLMmlCLGNBQWNsTixPQUFPbU4sRUFBYSxLLDZCQzNEM0MsSUFBSTVFLEVBQUssRUFBUSxJQU9iNFIsRUFBWTMwQixFQUFPRCxRQUFVLFNBQW1CK0UsR0FDbERpZSxFQUFHN0ssT0FBT25ULEtBQU1ELElBU2xCNnZCLEVBQVU5eUIsVUFBVSt5QixNQUFRLFNBQVVwekIsR0FDcEMsT0FBT3VoQixFQUFHL1csSUFBSWpILEtBQU12RCxJQVd0Qm16QixFQUFVOXlCLFVBQVUrSixJQUFNLFNBQVVwSyxFQUFLTixHQU12QyxNQUxxQixpQkFBVixFQUNUNmhCLEVBQUc3SyxPQUFPblQsS0FBTXZELEdBRWhCdUQsS0FBS3ZELEdBQU9OLEVBRVA2RCxNQVVUNHZCLEVBQVU5eUIsVUFBVWYsSUFBTSxTQUFVVSxFQUFLNEQsR0FDdkMsT0FBUUwsS0FBS3ZELEdBQXNCdUQsS0FBS3ZELEdBQXBCNEQsR0FVdEJ1dkIsRUFBVTl5QixVQUFVZ3pCLE1BQVEsU0FBVXJ6QixFQUFLNEQsR0FDekMsSUFBSWxFLEVBQVE2RCxLQUFLdkQsR0FDakIsT0FBYyxPQUFWTixVQUNLNkQsS0FBS3ZELEdBQ0xOLEdBRUZrRSxJLDZCQ3hFVHBGLEVBQU9ELFFBQVV1WSxFQUVqQixJQUFJd2MsRUFBUXhjLEVBQU96VyxVQU1uQixTQUFTeVcsRUFBTzFXLEVBQVVxWCxFQUFRTixHQUNoQzVULEtBQUtuRCxTQUFXQSxFQUNoQm1ELEtBQUtrVSxPQUFTQSxFQUVWTixJQUNGNVQsS0FBSzRULE1BQVFBLEdBVGpCbWMsRUFBTW5jLE1BQVEsS0FDZG1jLEVBQU03YixPQUFTLEdBQ2Y2YixFQUFNbHpCLFNBQVcsSSw2QkNOakIsSUFBSW16QixFQUFPLEVBQVEsSUFDZkMsRUFBUSxFQUFRLElBRXBCaDFCLEVBQU9ELFFBQVV3WSxFQUVqQkEsRUFBWTFXLFVBQVksSUFBSWt6QixFQUM1QnhjLEVBQVkxVyxVQUFVdXJCLFNBQVUsRUFFaEMsSUFBSTZILEVBQVMsQ0FDWCxVQUNBLGFBQ0Esb0JBQ0EsU0FDQSxpQkFDQSxpQkFDQSx5QkFFRUMsRUFBZUQsRUFBTzN4QixPQUUxQixTQUFTaVYsRUFBWTNXLEVBQVVzWCxFQUFXaWMsRUFBTXhjLEdBQzlDLElBQ0l5YyxFQURBcmEsR0FBUyxFQU9iLElBSkFzYSxFQUFLdHdCLEtBQU0sUUFBUzRULEdBRXBCb2MsRUFBSzMwQixLQUFLMkUsS0FBTW5ELEVBQVVzWCxLQUVqQjZCLEVBQVFtYSxHQUVmRyxFQUFLdHdCLEtBRExxd0IsRUFBUUgsRUFBT2xhLElBQ0lvYSxFQUFPSCxFQUFNSSxNQUFZSixFQUFNSSxJQUl0RCxTQUFTQyxFQUFLdGQsRUFBUXZXLEVBQUtOLEdBQ3JCQSxJQUNGNlcsRUFBT3ZXLEdBQU9OLEssNkJDbkNsQmxCLEVBQU9ELFFBQVVnMUIsRUFFakIsSUFBSUQsRUFBUUMsRUFBS2x6QixVQWVqQixTQUFTa3pCLEVBQUtuekIsRUFBVXNYLEdBQ3RCblUsS0FBS25ELFNBQVdBLEVBQ2hCbUQsS0FBS21VLFVBQVlBLEVBZm5CNGIsRUFBTW5jLE1BQVEsS0FDZG1jLEVBQU01YixVQUFZLEtBQ2xCNGIsRUFBTWx6QixTQUFXLEtBQ2pCa3pCLEVBQU1wSyxTQUFVLEVBQ2hCb0ssRUFBTW5LLFlBQWEsRUFDbkJtSyxFQUFNbEssbUJBQW9CLEVBQzFCa0ssRUFBTWpLLFFBQVMsRUFDZmlLLEVBQU0vSixnQkFBaUIsRUFDdkIrSixFQUFNaEssZ0JBQWlCLEVBQ3ZCZ0ssRUFBTTlKLHVCQUF3QixFQUM5QjhKLEVBQU1sYyxpQkFBa0IsRUFDeEJrYyxFQUFNMUgsU0FBVSxHLDZCQ2ZoQixJQUFJa0ksRUFBeUIsRUFBUSxLQUVyQ3QxQixFQUFPRCxRQUVQLFNBQWtDOFksRUFBWWpYLEdBQzVDLE9BQU8wekIsRUFBdUJ6YyxFQUFZalgsRUFBU3FRLGlCLDZCQ0xyRGpTLEVBQU9ELFFBSVAsU0FBc0JzQyxHQUNwQixJQUFJa2QsRUFBNEIsaUJBQWRsZCxFQUF5QkEsRUFBVXFGLFdBQVcsR0FBS3JGLEVBRXJFLE9BQ0drZCxHQUFRLElBQU1BLEdBQVEsS0FDdEJBLEdBQVEsSUFBTUEsR0FBUSxLLDZCQ1QzQnZmLEVBQU9ELFFBQVUsQ0FDZjRkLFVBQVUsRUFDVjRYLEtBQUssRUFDTEMsWUFBWSxFQUNaQyxXQUFXLEVBQ1hDLFVBQVUsRUFDVkMsT0FBUSxFQUFRLE8sNkJDTmxCMzFCLEVBQU9ELFFBT1AsU0FBcUJtQixHQUNuQixJQUlJeWdCLEVBSkE1RyxFQUFRLEVBQ1I2QyxFQUFTLEVBQ1R2YixFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUN6QjZhLEVBQVEsR0FHWixLQUFPdnpCLEtBQWEyYixHQUdsQkosR0FGQStELEVBQU8zRCxFQUFXM2IsR0FJZHNmLEVBQU8sSUFDVC9ELEVBQVMySSxLQUFLc1AsTUFBTWpZLEVBQVMrRCxHQUFRQSxHQUd2Q2lVLEVBQU1oWSxHQUFVN0MsRUFFaEIxWSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxHQUc3QixNQUFPLENBQUM2QyxPQUFRQSxFQUFRZ1ksTUFBT0EsSUF4QmpDLElBQUk1WCxFQUFhLENBQUMsSUFBSyxFQUFHLEtBQU0sSSw2QkNKaEMsSUFNSThYLEVBQVUsc0lBQ1ZDLEVBQVcsbUNBTWZoMkIsRUFBUWkyQixhQUFlLElBQUkvUSxPQUFPLE9BQVM2USxFQUFVLElBQU1DLEVBQVcsS0FFdEVoMkIsRUFBUTRHLElBQU0sSUFBSXNlLE9BQU8sT0FDdkI2USxFQUFVLElBQ1ZDLEVBRnVCLHlILDZCQ2Z6Qi8xQixFQUFPRCxRQUVQLFNBQWdCbUIsRUFBTyswQixHQUNyQixPQUFPLzBCLEVBQU0ySCxRQUFRLElBQUtvdEIsSyw2QkNINUJqMkIsRUFBT0QsUUFFUCxTQUFnQm1CLEVBQU8rMEIsR0FDckIsSUFBSUMsRUFBT2gxQixFQUFNMkgsUUFBUSxJQUFLb3RCLEdBQzFCRSxFQUFRajFCLEVBQU0ySCxRQUFRLEtBQU1vdEIsR0FFaEMsSUFBZSxJQUFYRSxFQUNGLE9BQU9ELEVBS1QsT0FBT0EsRUFBT0MsRUFBUUQsRUFBT0MsSSxnQkNPL0JuMkIsRUFBT0QsUUFBVWtXLEVBR2pCLElBQUl2UyxFQUFVLEVBQVEsS0FLbEJrQixFQUFTLEVBQVEsSUFBVUEsT0FHL0JxUixFQUFTbWdCLGNBQWdCQSxFQUV6QixJQUFJQyxFQUFLLEVBQVEsSUFBVUMsYUFHdEJELEVBQUdFLGdCQUFlRixFQUFHRSxjQUFnQixTQUFTQyxFQUFTbnhCLEdBQzFELE9BQU9teEIsRUFBUUMsVUFBVXB4QixHQUFNL0IsU0FJakMsSUFPSW96QixFQVBBQyxFQUFTLEVBQVEsR0FHakJ6MEIsRUFBTyxFQUFRLEdBUW5CLFNBQVNrMEIsRUFBY3R4QixFQUFTOHhCLEdBSzlCLElBQUlDLEdBSkoveEIsRUFBVUEsR0FBVyxJQUlIaVMsY0FDbEJoUyxLQUFLZ1MsY0FBaUI4ZixHQUFlLElBQVJBLEVBQWFBLEVBQU0sTUFHaEQ5eEIsS0FBS2dTLGdCQUFrQmhTLEtBQUtnUyxjQUU1QmhTLEtBQUttYyxPQUFTLEdBQ2RuYyxLQUFLekIsT0FBUyxFQUNkeUIsS0FBSyt4QixNQUFRLEtBQ2IveEIsS0FBS2d5QixXQUFhLEVBQ2xCaHlCLEtBQUtpeUIsU0FBVSxFQUNmanlCLEtBQUsyUixPQUFRLEVBQ2IzUixLQUFLa3lCLFlBQWEsRUFDbEJseUIsS0FBS215QixTQUFVLEVBTWZueUIsS0FBS295QixZQUFhLEVBTWxCcHlCLEtBQUtxeUIsTUFBTyxFQUlacnlCLEtBQUtzeUIsY0FBZSxFQUNwQnR5QixLQUFLdXlCLGlCQUFrQixFQUN2QnZ5QixLQUFLd3lCLG1CQUFvQixFQUt6Qnh5QixLQUFLeXlCLGFBQWUxeUIsRUFBUTB5QixXQUs1Qnp5QixLQUFLMHlCLGdCQUFrQjN5QixFQUFRMnlCLGlCQUFtQixPQUlsRDF5QixLQUFLMnlCLFFBQVMsRUFHZDN5QixLQUFLNHlCLFdBQWEsRUFHbEI1eUIsS0FBSzZ5QixhQUFjLEVBRW5CN3lCLEtBQUs4eUIsUUFBVSxLQUNmOXlCLEtBQUs4YyxTQUFXLEtBQ1ovYyxFQUFRK2MsV0FDTDZVLElBQ0hBLEVBQWdCLEVBQVEsSUFBbUJBLGVBQzdDM3hCLEtBQUs4eUIsUUFBVSxJQUFJbkIsRUFBYzV4QixFQUFRK2MsVUFDekM5YyxLQUFLOGMsU0FBVy9jLEVBQVErYyxVQUk1QixTQUFTNUwsRUFBU25SLEdBQ2hCLEtBQU1DLGdCQUFnQmtSLEdBQ3BCLE9BQU8sSUFBSUEsRUFBU25SLEdBRXRCQyxLQUFLaVMsZUFBaUIsSUFBSW9mLEVBQWN0eEIsRUFBU0MsTUFHakRBLEtBQUtxUixVQUFXLEVBRWhCdWdCLEVBQU92MkIsS0FBSzJFLE1BMkJkLFNBQVMreUIsRUFBaUJsQixFQUFRbUIsRUFBT0MsRUFBT25XLEVBQVVvVyxHQUN4RCxJQUFJQyxFQStPTixTQUFzQkgsRUFBT0MsR0FDM0IsSUFBSUUsRUFBSyxLQUNKdHpCLEVBQU9ELFNBQVNxekIsSUFDakIsaUJBQW9CQSxHQURwQixNQUVBQSxHQUVDRCxFQUFNUCxhQUNUVSxFQUFLLElBQUlqWCxVQUFVLG9DQUVyQixPQUFPaVgsRUF4UEVDLENBQWFKLEVBQU9DLEdBQzdCLEdBQUlFLEVBQ0Z0QixFQUFPd0IsS0FBSyxRQUFTRixRQUNoQixHQUFJRixRQUNURCxFQUFNYixTQUFVLEVBQ1hhLEVBQU1yaEIsT0F1UGYsU0FBb0JrZ0IsRUFBUW1CLEdBQzFCLEdBQUlBLEVBQU1GLFVBQVlFLEVBQU1yaEIsTUFBTyxDQUNqQyxJQUFJc2hCLEVBQVFELEVBQU1GLFFBQVEvZ0IsTUFDdEJraEIsR0FBU0EsRUFBTTEwQixTQUNqQnkwQixFQUFNN1csT0FBTzlaLEtBQUs0d0IsR0FDbEJELEVBQU16MEIsUUFBVXkwQixFQUFNUCxXQUFhLEVBQUlRLEVBQU0xMEIsUUFHakR5MEIsRUFBTXJoQixPQUFRLEVBSVZxaEIsRUFBTXowQixPQUFTLEVBQ2pCKzBCLEVBQWF6QixHQUViMEIsRUFBWTFCLEdBclFWMkIsQ0FBVzNCLEVBQVFtQixRQUNoQixHQUFJQSxFQUFNUCxZQUFjUSxHQUFTQSxFQUFNMTBCLE9BQVMsRUFDckQsR0FBSXkwQixFQUFNcmhCLFFBQVV1aEIsRUFBWSxDQUM5QixJQUFJNzFCLEVBQUksSUFBSW9DLE1BQU0sMkJBQ2xCb3lCLEVBQU93QixLQUFLLFFBQVNoMkIsUUFDaEIsR0FBSTIxQixFQUFNZCxZQUFjZ0IsRUFBWSxDQUNyQzcxQixFQUFJLElBQUlvQyxNQUFNLG9DQUNsQm95QixFQUFPd0IsS0FBSyxRQUFTaDJCLFFBRWpCMjFCLEVBQU1GLFNBQVlJLEdBQWVwVyxJQUNuQ21XLEVBQVFELEVBQU1GLFFBQVFXLE1BQU1SLElBRzlCRCxFQUFNejBCLFFBQVV5MEIsRUFBTVAsV0FBYSxFQUFJUSxFQUFNMTBCLE9BQ3pDMjBCLEVBQ0ZGLEVBQU03VyxPQUFPdVgsUUFBUVQsSUFFckJELEVBQU1iLFNBQVUsRUFDaEJhLEVBQU03VyxPQUFPOVosS0FBSzR3QixJQUdoQkQsRUFBTVYsY0FDUmdCLEVBQWF6QixHQStRckIsU0FBdUJBLEVBQVFtQixHQUN4QkEsRUFBTUgsY0FDVEcsRUFBTUgsYUFBYyxFQUNwQmhYLFFBQVFqSyxVQUFTLFlBTXJCLFNBQXdCaWdCLEVBQVFtQixHQUM5QixJQUFJbnBCLEVBQU1tcEIsRUFBTXowQixPQUNoQixNQUFReTBCLEVBQU1iLFVBQVlhLEVBQU1mLFVBQVllLEVBQU1yaEIsT0FDM0NxaEIsRUFBTXowQixPQUFTeTBCLEVBQU1oaEIsZ0JBQzFCNmYsRUFBTzhCLEtBQUssR0FDUjlwQixJQUFRbXBCLEVBQU16MEIsU0FJaEJzTCxFQUFNbXBCLEVBQU16MEIsT0FFaEJ5MEIsRUFBTUgsYUFBYyxFQWhCaEJlLENBQWUvQixFQUFRbUIsT0FqUnZCYSxDQUFjaEMsRUFBUW1CLFFBRWRFLElBQ1ZGLEVBQU1iLFNBQVUsR0FHbEIsT0FZRixTQUFzQmEsR0FDcEIsT0FBUUEsRUFBTXJoQixRQUNOcWhCLEVBQU1WLGNBQ05VLEVBQU16MEIsT0FBU3kwQixFQUFNaGhCLGVBQ0osSUFBakJnaEIsRUFBTXowQixRQWhCUHUxQixDQUFhZCxHQXBKdEI3MUIsRUFBS0MsU0FBVyxFQUFRLEdBS3hCRCxFQUFLQyxTQUFTOFQsRUFBVTBnQixHQXNGeEIxZ0IsRUFBU3BVLFVBQVV1RixLQUFPLFNBQVM0d0IsRUFBT25XLEdBQ3hDLElBQUlrVyxFQUFRaHpCLEtBQUtpUyxlQVVqQixNQVJxQixpQkFBVmdoQixHQUF1QkQsRUFBTVAsYUFDdEMzVixFQUFXQSxHQUFZa1csRUFBTU4sbUJBQ1pNLEVBQU1sVyxXQUNyQm1XLEVBQVEsSUFBSXB6QixFQUFPb3pCLEVBQU9uVyxHQUMxQkEsRUFBVyxJQUlSaVcsRUFBaUIveUIsS0FBTWd6QixFQUFPQyxFQUFPblcsR0FBVSxJQUl4RDVMLEVBQVNwVSxVQUFVNDJCLFFBQVUsU0FBU1QsR0FFcEMsT0FBT0YsRUFBaUIveUIsS0FEWkEsS0FBS2lTLGVBQ29CZ2hCLEVBQU8sSUFBSSxJQTREbEQvaEIsRUFBU3BVLFVBQVVpM0IsWUFBYyxTQUFTQyxHQUNuQ3JDLElBQ0hBLEVBQWdCLEVBQVEsSUFBbUJBLGVBQzdDM3hCLEtBQUtpUyxlQUFlNmdCLFFBQVUsSUFBSW5CLEVBQWNxQyxHQUNoRGgwQixLQUFLaVMsZUFBZTZLLFNBQVdrWCxHQWlCakMsU0FBU0MsRUFBY3QzQixFQUFHcTJCLEdBQ3hCLE9BQXFCLElBQWpCQSxFQUFNejBCLFFBQWdCeTBCLEVBQU1yaEIsTUFDdkIsRUFFTHFoQixFQUFNUCxXQUNLLElBQU45MUIsRUFBVSxFQUFJLEVBRWIsT0FBTkEsR0FBY3F1QixNQUFNcnVCLEdBRWxCcTJCLEVBQU1mLFNBQVdlLEVBQU03VyxPQUFPNWQsT0FDekJ5MEIsRUFBTTdXLE9BQU8sR0FBRzVkLE9BRWhCeTBCLEVBQU16MEIsT0FHYjVCLEdBQUssRUFDQSxHQU1MQSxFQUFJcTJCLEVBQU1oaEIsZ0JBQ1pnaEIsRUFBTWhoQixjQW5DVixTQUErQnJWLEdBQzdCLEdBQUlBLEdBRlEsUUFHVkEsRUFIVSxZQUlMLENBRUxBLElBQ0EsSUFBSyxJQUFJSyxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFBTSxFQUFHTCxHQUFLQSxHQUFLSyxFQUMzQ0wsSUFFRixPQUFPQSxFQTBCaUJ1M0IsQ0FBc0J2M0IsSUFHMUNBLEVBQUlxMkIsRUFBTXowQixPQUNQeTBCLEVBQU1yaEIsTUFJRnFoQixFQUFNejBCLFFBSGJ5MEIsRUFBTVYsY0FBZSxFQUNkLEdBS0ozMUIsR0FrS1QsU0FBUzIyQixFQUFhekIsR0FDcEIsSUFBSW1CLEVBQVFuQixFQUFPNWYsZUFDbkIrZ0IsRUFBTVYsY0FBZSxFQUNqQlUsRUFBTVQsa0JBR1ZTLEVBQU1ULGlCQUFrQixFQUNwQlMsRUFBTVgsS0FDUnhXLFFBQVFqSyxVQUFTLFdBQ2Z1aUIsRUFBY3RDLE1BR2hCc0MsRUFBY3RDLElBR2xCLFNBQVNzQyxFQUFjdEMsR0FDckJBLEVBQU93QixLQUFLLFlBeUtkLFNBQVNlLEVBQUtoaEIsR0FDWixJQUNJNmYsRUFEQUQsRUFBUTVmLEVBQUluQixlQUloQixTQUFTd2hCLEVBQU12ekIsRUFBTWhGLEVBQUdndUIsSUFFbEIsSUFEVWhwQixFQUFLdXpCLE1BQU1SLElBRXZCRCxFQUFNSixhQUlWLElBVEFJLEVBQU1KLFdBQWEsRUFTWkksRUFBTWhCLFlBQWMsUUFBVWlCLEVBQVE3ZixFQUFJdWdCLFNBVS9DLEdBUnlCLElBQXJCWCxFQUFNaEIsV0FDUnlCLEVBQU1ULEVBQU1qQixPQUVaaHZCLEVBQVFpd0IsRUFBTWpCLE1BQU8wQixHQUV2QnJnQixFQUFJaWdCLEtBQUssT0FBUUosR0FHYkQsRUFBTUosV0FBYSxFQUNyQixPQU9KLEdBQXlCLElBQXJCSSxFQUFNaEIsV0FNUixPQUxBZ0IsRUFBTWYsU0FBVSxPQUdaWCxFQUFHRSxjQUFjcGUsRUFBSyxRQUFVLEdBQ2xDaWhCLEVBQWVqaEIsSUFNbkI0ZixFQUFNTCxRQUFTLEVBR2pCLFNBQVMyQixJQUNIdDBCLEtBQUtpUyxlQUFlMGdCLFNBQ3RCM3lCLEtBQUtpUyxlQUFlMGdCLFFBQVMsRUFDN0J5QixFQUFLcDBCLE9BcUdULFNBQVNxMEIsRUFBZXhDLEVBQVEwQyxHQUc5QixHQUZZMUMsRUFBTzVmLGVBRVRnZ0IsUUFFUixNQUFNLElBQUl4eUIsTUFBTSxrQ0FHbEIsSUFBSSswQixFQUFTRCxJQUFlLEVBQ3hCbGpCLEdBQVcsRUFHZndnQixFQUFPeGdCLFVBQVcsRUFDbEJ3Z0IsRUFBTzRDLEtBQU83QyxFQUFPOTBCLFVBQVUyM0IsS0FDL0I1QyxFQUFPNkMsR0FBSzdDLEVBQU84QyxZQUFjL0MsRUFBTzkwQixVQUFVNDNCLEdBRWxEN0MsRUFBTzZDLEdBQUcsWUFBWSxXQUdwQixJQUFJbjVCLEVBQ0osSUFIQThWLEdBQVcsR0FHSG1qQixHQUFXLFFBQVVqNUIsRUFBSXMyQixFQUFPOEIsU0FDdEM5QixFQUFPd0IsS0FBSyxPQUFROTNCLEdBRVosT0FBTkEsSUFDRjhWLEdBQVcsRUFDWHdnQixFQUFPNWYsZUFBZXFnQixjQUFlLE1BSXpDVCxFQUFPK0MsTUFBUSxXQUNiSixHQUFTLEVBQ1R4MEIsS0FBS3F6QixLQUFLLFVBR1p4QixFQUFPZ0QsT0FBUyxXQUNkTCxHQUFTLEVBQ0xuakIsRUFDRndLLFFBQVFqSyxVQUFTLFdBQ2ZpZ0IsRUFBT3dCLEtBQUssZUFHZHJ6QixLQUFLMnpCLEtBQUssR0FDWjN6QixLQUFLcXpCLEtBQUssV0FJWnhCLEVBQU93QixLQUFLLFlBMkVkLFNBQVN5QixFQUFTbjRCLEVBQUdxMkIsR0FDbkIsSUFJSTlyQixFQUpBZ2lCLEVBQU84SixFQUFNN1csT0FDYjVkLEVBQVN5MEIsRUFBTXowQixPQUNma1EsSUFBZXVrQixFQUFNRixRQUNyQkwsSUFBZU8sRUFBTVAsV0FJekIsR0FBb0IsSUFBaEJ2SixFQUFLM3FCLE9BQ1AsT0FBTyxLQUVULEdBQWUsSUFBWEEsRUFDRjJJLEVBQU0sVUFDSCxHQUFJdXJCLEVBQ1B2ckIsRUFBTWdpQixFQUFLNkwsYUFDUixJQUFLcDRCLEdBQUtBLEdBQUs0QixFQUdoQjJJLEVBREV1SCxFQUNJeWEsRUFBS3RvQixLQUFLLElBRVZmLEVBQU9zZCxPQUFPK0wsRUFBTTNxQixHQUM1QjJxQixFQUFLM3FCLE9BQVMsTUFDVCxDQUVMLEdBQUk1QixFQUFJdXNCLEVBQUssR0FBRzNxQixPQUlkMkksR0FESTZWLEVBQU1tTSxFQUFLLElBQ0x0VyxNQUFNLEVBQUdqVyxHQUNuQnVzQixFQUFLLEdBQUtuTSxFQUFJbkssTUFBTWpXLFFBQ2YsR0FBSUEsSUFBTXVzQixFQUFLLEdBQUczcUIsT0FFdkIySSxFQUFNZ2lCLEVBQUs2TCxZQUNOLENBSUg3dEIsRUFERXVILEVBQ0ksR0FFQSxJQUFJNU8sRUFBT2xELEdBR25CLElBREEsSUFBSXBCLEVBQUksRUFDQ0wsRUFBSSxFQUFHQyxFQUFJK3RCLEVBQUszcUIsT0FBUXJELEVBQUlDLEdBQUtJLEVBQUlvQixFQUFHekIsSUFBSyxDQUNwRCxJQUFJNmhCLEVBQU1tTSxFQUFLLEdBQ1g4TCxFQUFNeFQsS0FBSzZCLElBQUkxbUIsRUFBSXBCLEVBQUd3aEIsRUFBSXhlLFFBRTFCa1EsRUFDRnZILEdBQU82VixFQUFJbkssTUFBTSxFQUFHb2lCLEdBRXBCalksRUFBSWtZLEtBQUsvdEIsRUFBSzNMLEVBQUcsRUFBR3k1QixHQUVsQkEsRUFBTWpZLEVBQUl4ZSxPQUNaMnFCLEVBQUssR0FBS25NLEVBQUluSyxNQUFNb2lCLEdBRXBCOUwsRUFBSzZMLFFBRVB4NUIsR0FBS3k1QixJQUtYLE9BQU85dEIsRUFHVCxTQUFTcXNCLEVBQVkxQixHQUNuQixJQUFJbUIsRUFBUW5CLEVBQU81ZixlQUluQixHQUFJK2dCLEVBQU16MEIsT0FBUyxFQUNqQixNQUFNLElBQUlrQixNQUFNLDJDQUVidXpCLEVBQU1kLFlBQWNjLEVBQU1aLGFBQzdCWSxFQUFNcmhCLE9BQVEsRUFDZGtLLFFBQVFqSyxVQUFTLFdBRVZvaEIsRUFBTWQsWUFBK0IsSUFBakJjLEVBQU16MEIsU0FDN0J5MEIsRUFBTWQsWUFBYSxFQUNuQkwsRUFBT3hnQixVQUFXLEVBQ2xCd2dCLEVBQU93QixLQUFLLFlBTXBCLFNBQVN0d0IsRUFBUzhqQixFQUFJNWdCLEdBQ3BCLElBQUssSUFBSS9LLEVBQUksRUFBR0MsRUFBSTByQixFQUFHdG9CLE9BQVFyRCxFQUFJQyxFQUFHRCxJQUNwQytLLEVBQUU0Z0IsRUFBRzNyQixHQUFJQSxHQTNyQmJnVyxFQUFTcFUsVUFBVTYyQixLQUFPLFNBQVNoM0IsR0FDakMsSUFBSXEyQixFQUFRaHpCLEtBQUtpUyxlQUNqQitnQixFQUFNWixZQUFhLEVBQ25CLElBQ0lsckIsRUFEQWd1QixFQUFRdjRCLEVBU1osSUFOaUIsaUJBQU5BLEdBQWtCQSxFQUFJLEtBQy9CcTJCLEVBQU1ULGlCQUFrQixHQUtoQixJQUFONTFCLEdBQ0FxMkIsRUFBTVYsZUFDTFUsRUFBTXowQixRQUFVeTBCLEVBQU1oaEIsZUFBaUJnaEIsRUFBTXJoQixPQUVoRCxPQURBMmhCLEVBQWF0ekIsTUFDTixLQU1ULEdBQVUsS0FIVnJELEVBQUlzM0IsRUFBY3QzQixFQUFHcTJCLEtBR05BLEVBQU1yaEIsTUFzQm5CLE9BckJBekssRUFBTSxLQWFGOHJCLEVBQU16MEIsT0FBUyxHQUFLeTBCLEVBQU1GLFVBQzVCNXJCLEVBQU00dEIsRUFBU240QixFQUFHcTJCLEdBQ2xCQSxFQUFNejBCLFFBQVUySSxFQUFJM0ksUUFHRCxJQUFqQnkwQixFQUFNejBCLFFBQ1JnMUIsRUFBWXZ6QixNQUVQa0gsRUEwQlQsSUFBSWl1QixFQUFTbkMsRUFBTVYsYUFtRG5CLE9BaERJVSxFQUFNejBCLE9BQVM1QixHQUFLcTJCLEVBQU1oaEIsZ0JBQzVCbWpCLEdBQVMsSUFJUG5DLEVBQU1yaEIsT0FBU3FoQixFQUFNYixXQUN2QmdELEdBQVMsR0FFUEEsSUFDRm5DLEVBQU1iLFNBQVUsRUFDaEJhLEVBQU1YLE1BQU8sRUFFUSxJQUFqQlcsRUFBTXowQixTQUNSeTBCLEVBQU1WLGNBQWUsR0FFdkJ0eUIsS0FBS28xQixNQUFNcEMsRUFBTWhoQixlQUNqQmdoQixFQUFNWCxNQUFPLEdBTVg4QyxJQUFXbkMsRUFBTWIsVUFDbkJ4MUIsRUFBSXMzQixFQUFjaUIsRUFBT2xDLElBT2YsUUFKVjlyQixFQURFdkssRUFBSSxFQUNBbTRCLEVBQVNuNEIsRUFBR3EyQixHQUVaLFFBR05BLEVBQU1WLGNBQWUsRUFDckIzMUIsRUFBSSxHQUdOcTJCLEVBQU16MEIsUUFBVTVCLEVBSUssSUFBakJxMkIsRUFBTXowQixRQUFpQnkwQixFQUFNcmhCLFFBQy9CcWhCLEVBQU1WLGNBQWUsR0FLbkJVLEVBQU1yaEIsUUFBVXFoQixFQUFNZCxZQUErQixJQUFqQmMsRUFBTXowQixRQUM1Q2cxQixFQUFZdnpCLE1BRVBrSCxHQTBGVGdLLEVBQVNwVSxVQUFVczRCLE1BQVEsU0FBU3o0QixHQUNsQ3FELEtBQUtxekIsS0FBSyxRQUFTLElBQUk1ekIsTUFBTSxxQkFHL0J5UixFQUFTcFUsVUFBVTIzQixLQUFPLFNBQVN2MEIsRUFBTW0xQixHQUN2QyxJQUFJamlCLEVBQU1wVCxLQUNOZ3pCLEVBQVFoekIsS0FBS2lTLGVBRWpCLE9BQVErZ0IsRUFBTWhCLFlBQ1osS0FBSyxFQUNIZ0IsRUFBTWpCLE1BQVE3eEIsRUFDZCxNQUNGLEtBQUssRUFDSDh5QixFQUFNakIsTUFBUSxDQUFDaUIsRUFBTWpCLE1BQU83eEIsR0FDNUIsTUFDRixRQUNFOHlCLEVBQU1qQixNQUFNMXZCLEtBQUtuQyxHQUdyQjh5QixFQUFNaEIsWUFBYyxFQUVwQixJQUlJc0QsSUFKVUQsSUFBNkIsSUFBakJBLEVBQVN0akIsTUFDdkI3UixJQUFTMmIsUUFBUTBaLFFBQ2pCcjFCLElBQVMyYixRQUFRMlosT0FFVC9qQixFQUFRZ2tCLEVBTzVCLFNBQVNDLEVBQVNya0IsR0FDWkEsSUFBYStCLEdBQ2pCcWlCLElBR0YsU0FBU2hrQixJQUNQdlIsRUFBSzZSLE1BWkhpaEIsRUFBTWQsV0FDUnJXLFFBQVFqSyxTQUFTMGpCLEdBRWpCbGlCLEVBQUk1QixLQUFLLE1BQU84akIsR0FFbEJwMUIsRUFBS3cwQixHQUFHLFNBQVVnQixHQWNsQixJQUFJQyxFQTZFTixTQUFxQnZpQixHQUNuQixPQUFPLFdBQ0wsSUFDSTRmLEVBQVE1ZixFQUFJbkIsZUFDaEIrZ0IsRUFBTUosYUFDbUIsSUFBckJJLEVBQU1KLFlBQ1J3QixFQUFLaGhCLElBbkZLd2lCLENBQVl4aUIsR0FHMUIsU0FBU3FpQixJQUVQdjFCLEVBQUsyMUIsZUFBZSxRQUFTQyxHQUM3QjUxQixFQUFLMjFCLGVBQWUsU0FBVUUsR0FDOUI3MUIsRUFBSzIxQixlQUFlLFFBQVNGLEdBQzdCejFCLEVBQUsyMUIsZUFBZSxRQUFTRyxHQUM3QjkxQixFQUFLMjFCLGVBQWUsU0FBVUgsR0FDOUJ0aUIsRUFBSXlpQixlQUFlLE1BQU9wa0IsR0FDMUIyQixFQUFJeWlCLGVBQWUsTUFBT0osR0FPckJ2MUIsRUFBS3dSLGlCQUFrQnhSLEVBQUt3UixlQUFldWtCLFdBQzlDTixJQUtKLFNBQVNLLEVBQVE3QyxHQUNmK0MsSUFDQWgyQixFQUFLMjFCLGVBQWUsUUFBU0csR0FDVyxJQUFwQzFFLEVBQUdFLGNBQWN0eEIsRUFBTSxVQUN6QkEsRUFBS216QixLQUFLLFFBQVNGLEdBY3ZCLFNBQVMyQyxJQUNQNTFCLEVBQUsyMUIsZUFBZSxTQUFVRSxHQUM5QkcsSUFHRixTQUFTSCxJQUNQNzFCLEVBQUsyMUIsZUFBZSxRQUFTQyxHQUM3QkksSUFJRixTQUFTQSxJQUNQOWlCLEVBQUk4aUIsT0FBT2gyQixHQW9CYixPQXpFQUEsRUFBS3cwQixHQUFHLFFBQVNpQixHQStCWnoxQixFQUFLaTJCLFNBQVlqMkIsRUFBS2kyQixRQUFRQyxNQUUxQnozQixFQUFRdUIsRUFBS2kyQixRQUFRQyxPQUM1QmwyQixFQUFLaTJCLFFBQVFDLE1BQU0xQyxRQUFRc0MsR0FFM0I5MUIsRUFBS2kyQixRQUFRQyxNQUFRLENBQUNKLEVBQVM5MUIsRUFBS2kyQixRQUFRQyxPQUo1Q2wyQixFQUFLdzBCLEdBQUcsUUFBU3NCLEdBYW5COTFCLEVBQUtzUixLQUFLLFFBQVNza0IsR0FLbkI1MUIsRUFBS3NSLEtBQUssU0FBVXVrQixHQU9wQjcxQixFQUFLbXpCLEtBQUssT0FBUWpnQixHQUdiNGYsRUFBTWYsVUFLVGp5QixLQUFLMDBCLEdBQUcsV0FBWUosR0FFcEJ0QixFQUFNZixTQUFVLEVBQ2hCcFcsUUFBUWpLLFVBQVMsV0FDZndpQixFQUFLaGhCLE9BSUZsVCxHQWlFVGdSLEVBQVNwVSxVQUFVbzVCLE9BQVMsU0FBU2gyQixHQUNuQyxJQUFJOHlCLEVBQVFoekIsS0FBS2lTLGVBR2pCLEdBQXlCLElBQXJCK2dCLEVBQU1oQixXQUNSLE9BQU9oeUIsS0FHVCxHQUF5QixJQUFyQmd6QixFQUFNaEIsV0FFUixPQUFJOXhCLEdBQVFBLElBQVM4eUIsRUFBTWpCLFFBR3RCN3hCLElBQ0hBLEVBQU84eUIsRUFBTWpCLE9BR2ZpQixFQUFNakIsTUFBUSxLQUNkaUIsRUFBTWhCLFdBQWEsRUFDbkJoeUIsS0FBSzYxQixlQUFlLFdBQVl2QixHQUNoQ3RCLEVBQU1mLFNBQVUsRUFDWi94QixHQUNGQSxFQUFLbXpCLEtBQUssU0FBVXJ6QixPQVhiQSxLQWlCWCxJQUFLRSxFQUFNLENBRVQsSUFBSW0yQixFQUFRckQsRUFBTWpCLE1BQ2Rsb0IsRUFBTW1wQixFQUFNaEIsV0FDaEJnQixFQUFNakIsTUFBUSxLQUNkaUIsRUFBTWhCLFdBQWEsRUFDbkJoeUIsS0FBSzYxQixlQUFlLFdBQVl2QixHQUNoQ3RCLEVBQU1mLFNBQVUsRUFFaEIsSUFBSyxJQUFJLzJCLEVBQUksRUFBR0EsRUFBSTJPLEVBQUszTyxJQUN2Qm03QixFQUFNbjdCLEdBQUdtNEIsS0FBSyxTQUFVcnpCLE1BQzFCLE9BQU9BLEtBS1QsT0FBVyxLQURQOUUsRUF5UU4sU0FBa0IyckIsRUFBSTVoQixHQUNwQixJQUFLLElBQUkvSixFQUFJLEVBQUdDLEVBQUkwckIsRUFBR3RvQixPQUFRckQsRUFBSUMsRUFBR0QsSUFDcEMsR0FBSTJyQixFQUFHM3JCLEtBQU8rSixFQUFHLE9BQU8vSixFQUUxQixPQUFRLEVBN1FBNEksQ0FBUWt2QixFQUFNakIsTUFBTzd4QixNQUk3Qjh5QixFQUFNakIsTUFBTXRjLE9BQU92YSxFQUFHLEdBQ3RCODNCLEVBQU1oQixZQUFjLEVBQ0ssSUFBckJnQixFQUFNaEIsYUFDUmdCLEVBQU1qQixNQUFRaUIsRUFBTWpCLE1BQU0sSUFFNUI3eEIsRUFBS216QixLQUFLLFNBQVVyekIsT0FQWEEsTUFjWGtSLEVBQVNwVSxVQUFVNDNCLEdBQUssU0FBUzRCLEVBQUl0cEIsR0FDbkMsSUFBSWtaLEVBQU0wTCxFQUFPOTBCLFVBQVU0M0IsR0FBR3I1QixLQUFLMkUsS0FBTXMyQixFQUFJdHBCLEdBSzdDLEdBSFcsU0FBUHNwQixHQUFrQnQyQixLQUFLaVMsZUFBZWdnQixTQUN4Q29DLEVBQWVyMEIsTUFFTixhQUFQczJCLEdBQXFCdDJCLEtBQUtxUixTQUFVLENBQ3RDLElBQUkyaEIsRUFBUWh6QixLQUFLaVMsZUFDWitnQixFQUFNUixvQkFDVFEsRUFBTVIsbUJBQW9CLEVBQzFCUSxFQUFNVCxpQkFBa0IsRUFDeEJTLEVBQU1WLGNBQWUsRUFDaEJVLEVBQU1iLFFBRUFhLEVBQU16MEIsUUFDZiswQixFQUFhdHpCLE1BRmJBLEtBQUsyekIsS0FBSyxJQU9oQixPQUFPek4sR0FFVGhWLEVBQVNwVSxVQUFVNjNCLFlBQWN6akIsRUFBU3BVLFVBQVU0M0IsR0FJcER4akIsRUFBU3BVLFVBQVUrM0IsT0FBUyxXQUMxQlIsRUFBZXIwQixNQUNmQSxLQUFLMnpCLEtBQUssR0FDVjN6QixLQUFLcXpCLEtBQUssV0FHWm5pQixFQUFTcFUsVUFBVTgzQixNQUFRLFdBQ3pCUCxFQUFlcjBCLE1BQU0sR0FDckJBLEtBQUtxekIsS0FBSyxVQXVEWm5pQixFQUFTcFUsVUFBVXk1QixLQUFPLFNBQVMxRSxHQUNqQyxJQUFJbUIsRUFBUWh6QixLQUFLaVMsZUFDYnVpQixHQUFTLEVBRVQxaUIsRUFBTzlSLEtBK0JYLElBQUssSUFBSTlFLEtBOUJUMjJCLEVBQU82QyxHQUFHLE9BQU8sV0FDZixHQUFJMUIsRUFBTUYsVUFBWUUsRUFBTXJoQixNQUFPLENBQ2pDLElBQUlzaEIsRUFBUUQsRUFBTUYsUUFBUS9nQixNQUN0QmtoQixHQUFTQSxFQUFNMTBCLFFBQ2pCdVQsRUFBS3pQLEtBQUs0d0IsR0FHZG5oQixFQUFLelAsS0FBSyxTQUdad3ZCLEVBQU82QyxHQUFHLFFBQVEsU0FBU3pCLElBQ3JCRCxFQUFNRixVQUNSRyxFQUFRRCxFQUFNRixRQUFRVyxNQUFNUixJQUkxQkQsRUFBTVAsWUFBYyxNQUFDUSxLQUVmRCxFQUFNUCxZQUFnQlEsR0FBVUEsRUFBTTEwQixVQUd0Q3VULEVBQUt6UCxLQUFLNHdCLEtBRWxCdUIsR0FBUyxFQUNUM0MsRUFBTytDLGFBTUcvQyxFQUNhLG1CQUFkQSxFQUFPMzJCLFNBQ0ssSUFBWjhFLEtBQUs5RSxLQUNkOEUsS0FBSzlFLEdBQUssU0FBU2tXLEdBQVUsT0FBTyxXQUNsQyxPQUFPeWdCLEVBQU96Z0IsR0FBUThHLE1BQU0yWixFQUFRdnpCLFlBRDVCLENBRVBwRCxJQW1CUCxPQWJBNkgsRUFEYSxDQUFDLFFBQVMsUUFBUyxVQUFXLFFBQVMsV0FDcEMsU0FBU3V6QixHQUN2QnpFLEVBQU82QyxHQUFHNEIsRUFBSXhrQixFQUFLdWhCLEtBQUszMkIsS0FBS29WLEVBQU13a0IsT0FLckN4a0IsRUFBS3NqQixNQUFRLFNBQVN6NEIsR0FDaEI2M0IsSUFDRkEsR0FBUyxFQUNUM0MsRUFBT2dELFdBSUovaUIsR0FNVFosRUFBU3NsQixVQUFZMUIsRyxjQ2ozQnJCNzVCLEVBQU9ELFFBQVVrQyxRQUFRLFcsZ0JDcUJ6QixJQUFJMkMsRUFBUyxFQUFRLElBQVVBLE9BRTNCNDJCLEVBQW1CNTJCLEVBQU82MkIsWUFDekIsU0FBUzVaLEdBQ1AsT0FBUUEsR0FBWUEsRUFBUzVQLGVBQzNCLElBQUssTUFBTyxJQUFLLE9BQVEsSUFBSyxRQUFTLElBQUssUUFBUyxJQUFLLFNBQVUsSUFBSyxTQUFVLElBQUssT0FBUSxJQUFLLFFBQVMsSUFBSyxVQUFXLElBQUssV0FBWSxJQUFLLE1BQU8sT0FBTyxFQUNsSyxRQUFTLE9BQU8sSUFtQnpCLElBQUl5a0IsRUFBZ0IzMkIsRUFBUTIyQixjQUFnQixTQUFTN1UsR0FHbkQsT0FGQTljLEtBQUs4YyxVQUFZQSxHQUFZLFFBQVE1UCxjQUFjdEosUUFBUSxPQUFRLElBZnJFLFNBQXdCa1osR0FDdEIsR0FBSUEsSUFBYTJaLEVBQWlCM1osR0FDaEMsTUFBTSxJQUFJcmQsTUFBTSxxQkFBdUJxZCxHQWN6QzZaLENBQWU3WixHQUNQOWMsS0FBSzhjLFVBQ1gsSUFBSyxPQUVIOWMsS0FBSzQyQixjQUFnQixFQUNyQixNQUNGLElBQUssT0FDTCxJQUFLLFVBRUg1MkIsS0FBSzQyQixjQUFnQixFQUNyQjUyQixLQUFLNjJCLHFCQUF1QkMsRUFDNUIsTUFDRixJQUFLLFNBRUg5MkIsS0FBSzQyQixjQUFnQixFQUNyQjUyQixLQUFLNjJCLHFCQUF1QkUsRUFDNUIsTUFDRixRQUVFLFlBREEvMkIsS0FBS3l6QixNQUFRdUQsR0FNakJoM0IsS0FBS2kzQixXQUFhLElBQUlwM0IsRUFBTyxHQUU3QkcsS0FBS2szQixhQUFlLEVBRXBCbDNCLEtBQUttM0IsV0FBYSxHQW9JcEIsU0FBU0gsRUFBaUI3YSxHQUN4QixPQUFPQSxFQUFPemQsU0FBU3NCLEtBQUs4YyxVQUc5QixTQUFTZ2EsRUFBMEIzYSxHQUNqQ25jLEtBQUtrM0IsYUFBZS9hLEVBQU81ZCxPQUFTLEVBQ3BDeUIsS0FBS20zQixXQUFhbjNCLEtBQUtrM0IsYUFBZSxFQUFJLEVBRzVDLFNBQVNILEVBQTJCNWEsR0FDbENuYyxLQUFLazNCLGFBQWUvYSxFQUFPNWQsT0FBUyxFQUNwQ3lCLEtBQUttM0IsV0FBYW4zQixLQUFLazNCLGFBQWUsRUFBSSxFQWxJNUN2RixFQUFjNzBCLFVBQVUyMkIsTUFBUSxTQUFTdFgsR0FHdkMsSUFGQSxJQUFJaWIsRUFBVSxHQUVQcDNCLEtBQUttM0IsWUFBWSxDQUV0QixJQUFJRSxFQUFhbGIsRUFBTzVkLFFBQVV5QixLQUFLbTNCLFdBQWFuM0IsS0FBS2szQixhQUNyRGwzQixLQUFLbTNCLFdBQWFuM0IsS0FBS2szQixhQUN2Qi9hLEVBQU81ZCxPQU1YLEdBSEE0ZCxFQUFPOFksS0FBS2oxQixLQUFLaTNCLFdBQVlqM0IsS0FBS2szQixhQUFjLEVBQUdHLEdBQ25EcjNCLEtBQUtrM0IsY0FBZ0JHLEVBRWpCcjNCLEtBQUtrM0IsYUFBZWwzQixLQUFLbTNCLFdBRTNCLE1BQU8sR0FXVCxHQVBBaGIsRUFBU0EsRUFBT3ZKLE1BQU15a0IsRUFBV2xiLEVBQU81ZCxXQU1wQys0QixHQUhKRixFQUFVcDNCLEtBQUtpM0IsV0FBV3JrQixNQUFNLEVBQUc1UyxLQUFLbTNCLFlBQVl6NEIsU0FBU3NCLEtBQUs4YyxXQUczQ25hLFdBQVd5MEIsRUFBUTc0QixPQUFTLEtBQ25DLE9BQVUrNEIsR0FBWSxPQUF0QyxDQVFBLEdBSEF0M0IsS0FBS2szQixhQUFlbDNCLEtBQUttM0IsV0FBYSxFQUdoQixJQUFsQmhiLEVBQU81ZCxPQUNULE9BQU82NEIsRUFFVCxNQVZFcDNCLEtBQUttM0IsWUFBY24zQixLQUFLNDJCLGNBQ3hCUSxFQUFVLEdBYWRwM0IsS0FBSzYyQixxQkFBcUIxYSxHQUUxQixJQUFJcEssRUFBTW9LLEVBQU81ZCxPQUNieUIsS0FBS20zQixhQUVQaGIsRUFBTzhZLEtBQUtqMUIsS0FBS2kzQixXQUFZLEVBQUc5YSxFQUFPNWQsT0FBU3lCLEtBQUtrM0IsYUFBY25sQixHQUNuRUEsR0FBTy9SLEtBQUtrM0IsY0FLZCxJQUNJSSxFQURBdmxCLEdBRkpxbEIsR0FBV2piLEVBQU96ZCxTQUFTc0IsS0FBSzhjLFNBQVUsRUFBRy9LLElBRTNCeFQsT0FBUyxFQUczQixJQUZJKzRCLEVBQVdGLEVBQVF6MEIsV0FBV29QLEtBRWxCLE9BQVV1bEIsR0FBWSxNQUFRLENBQzVDLElBQUkxYSxFQUFPNWMsS0FBSzQyQixjQUtoQixPQUpBNTJCLEtBQUttM0IsWUFBY3ZhLEVBQ25CNWMsS0FBS2szQixjQUFnQnRhLEVBQ3JCNWMsS0FBS2kzQixXQUFXaEMsS0FBS2oxQixLQUFLaTNCLFdBQVlyYSxFQUFNLEVBQUdBLEdBQy9DVCxFQUFPOFksS0FBS2oxQixLQUFLaTNCLFdBQVksRUFBRyxFQUFHcmEsR0FDNUJ3YSxFQUFRcHpCLFVBQVUsRUFBRytOLEdBSTlCLE9BQU9xbEIsR0FPVHpGLEVBQWM3MEIsVUFBVSs1QixxQkFBdUIsU0FBUzFhLEdBTXRELElBSkEsSUFBSWpoQixFQUFLaWhCLEVBQU81ZCxRQUFVLEVBQUssRUFBSTRkLEVBQU81ZCxPQUluQ3JELEVBQUksRUFBR0EsSUFBSyxDQUNqQixJQUFJSyxFQUFJNGdCLEVBQU9BLEVBQU81ZCxPQUFTckQsR0FLL0IsR0FBUyxHQUFMQSxHQUFVSyxHQUFLLEdBQUssRUFBTSxDQUM1QnlFLEtBQUttM0IsV0FBYSxFQUNsQixNQUlGLEdBQUlqOEIsR0FBSyxHQUFLSyxHQUFLLEdBQUssR0FBTSxDQUM1QnlFLEtBQUttM0IsV0FBYSxFQUNsQixNQUlGLEdBQUlqOEIsR0FBSyxHQUFLSyxHQUFLLEdBQUssR0FBTSxDQUM1QnlFLEtBQUttM0IsV0FBYSxFQUNsQixPQUdKbjNCLEtBQUtrM0IsYUFBZWg4QixHQUd0QnkyQixFQUFjNzBCLFVBQVVpVixJQUFNLFNBQVNvSyxHQUNyQyxJQUFJK0osRUFBTSxHQUlWLEdBSEkvSixHQUFVQSxFQUFPNWQsU0FDbkIybkIsRUFBTWxtQixLQUFLeXpCLE1BQU10WCxJQUVmbmMsS0FBS2szQixhQUFjLENBQ3JCLElBQUlLLEVBQUt2M0IsS0FBS2szQixhQUNWbmEsRUFBTS9jLEtBQUtpM0IsV0FDWGpELEVBQU1oMEIsS0FBSzhjLFNBQ2ZvSixHQUFPbkosRUFBSW5LLE1BQU0sRUFBRzJrQixHQUFJNzRCLFNBQVNzMUIsR0FHbkMsT0FBTzlOLEksZ0JDcExUanJCLEVBQU9ELFFBQVVtVyxFQUdqQixJQUFJdFIsRUFBUyxFQUFRLElBQVVBLE9BRy9Cc1IsRUFBU3FtQixjQUFnQkEsRUFJekIsSUFBSXI2QixFQUFPLEVBQVEsR0FDbkJBLEVBQUtDLFNBQVcsRUFBUSxHQUd4QixJQUFJdzBCLEVBQVMsRUFBUSxHQUlyQixTQUFTNkYsRUFBU3hFLEVBQU9uVyxFQUFVekssR0FDakNyUyxLQUFLaXpCLE1BQVFBLEVBQ2JqekIsS0FBSzhjLFNBQVdBLEVBQ2hCOWMsS0FBS3VlLFNBQVdsTSxFQUdsQixTQUFTbWxCLEVBQWN6M0IsRUFBUzh4QixHQU05QixJQUFJQyxHQUxKL3hCLEVBQVVBLEdBQVcsSUFLSGlTLGNBQ2xCaFMsS0FBS2dTLGNBQWlCOGYsR0FBZSxJQUFSQSxFQUFhQSxFQUFNLE1BSWhEOXhCLEtBQUt5eUIsYUFBZTF5QixFQUFRMHlCLFdBRzVCenlCLEtBQUtnUyxnQkFBa0JoUyxLQUFLZ1MsY0FFNUJoUyxLQUFLaTJCLFdBQVksRUFFakJqMkIsS0FBSzAzQixRQUFTLEVBRWQxM0IsS0FBSzJSLE9BQVEsRUFFYjNSLEtBQUsyM0IsVUFBVyxFQUtoQixJQUFJQyxHQUFxQyxJQUExQjczQixFQUFRODNCLGNBQ3ZCNzNCLEtBQUs2M0IsZUFBaUJELEVBS3RCNTNCLEtBQUsweUIsZ0JBQWtCM3lCLEVBQVEyeUIsaUJBQW1CLE9BS2xEMXlCLEtBQUt6QixPQUFTLEVBR2R5QixLQUFLODNCLFNBQVUsRUFNZjkzQixLQUFLcXlCLE1BQU8sRUFLWnJ5QixLQUFLKzNCLGtCQUFtQixFQUd4Qi8zQixLQUFLZzRCLFFBQVUsU0FBUzdFLElBMkoxQixTQUFpQnRCLEVBQVFzQixHQUN2QixJQUFJSCxFQUFRbkIsRUFBT25nQixlQUNmMmdCLEVBQU9XLEVBQU1YLEtBQ2JoZ0IsRUFBSzJnQixFQUFNaUYsUUFJZixHQWRGLFNBQTRCakYsR0FDMUJBLEVBQU04RSxTQUFVLEVBQ2hCOUUsRUFBTWlGLFFBQVUsS0FDaEJqRixFQUFNejBCLFFBQVV5MEIsRUFBTWtGLFNBQ3RCbEYsRUFBTWtGLFNBQVcsRUFRakJDLENBQW1CbkYsR0FFZkcsR0ExQk4sU0FBc0J0QixFQUFRbUIsRUFBT1gsRUFBTWMsRUFBSTlnQixHQUN6Q2dnQixFQUNGeFcsUUFBUWpLLFVBQVMsV0FDZlMsRUFBRzhnQixNQUdMOWdCLEVBQUc4Z0IsR0FFTHRCLEVBQU9uZ0IsZUFBZTBtQixjQUFlLEVBQ3JDdkcsRUFBT3dCLEtBQUssUUFBU0YsR0FrQm5Ca0YsQ0FBYXhHLEVBQVFtQixFQUFPWCxFQUFNYyxFQUFJOWdCLE9BQ25DLENBRUgsSUFBSXNsQixFQUFXVyxFQUFXekcsRUFBUW1CLEdBRTdCMkUsR0FBYTNFLEVBQU0rRSxtQkFBb0IvRSxFQUFNN1csT0FBTzVkLFFBaUM3RCxTQUFxQnN6QixFQUFRbUIsR0FDM0JBLEVBQU0rRSxrQkFBbUIsRUFFekIsSUFBSyxJQUFJeDhCLEVBQUksRUFBR0EsRUFBSXkzQixFQUFNN1csT0FBTzVkLE9BQVFoRCxJQUFLLENBQzVDLElBQUlnOUIsRUFBUXZGLEVBQU03VyxPQUFPNWdCLEdBQ3JCMDNCLEVBQVFzRixFQUFNdEYsTUFDZG5XLEVBQVd5YixFQUFNemIsU0FDakJ6SyxFQUFLa21CLEVBQU1oYSxTQUNYMVUsRUFBTW1wQixFQUFNUCxXQUFhLEVBQUlRLEVBQU0xMEIsT0FRdkMsR0FOQWk2QixFQUFRM0csRUFBUW1CLEVBQU9ucEIsRUFBS29wQixFQUFPblcsRUFBVXpLLEdBTXpDMmdCLEVBQU04RSxRQUFTLENBQ2pCdjhCLElBQ0EsT0FJSnkzQixFQUFNK0Usa0JBQW1CLEVBQ3JCeDhCLEVBQUl5M0IsRUFBTTdXLE9BQU81ZCxPQUNuQnkwQixFQUFNN1csT0FBUzZXLEVBQU03VyxPQUFPdkosTUFBTXJYLEdBRWxDeTNCLEVBQU03VyxPQUFPNWQsT0FBUyxFQTFEcEJrNkIsQ0FBWTVHLEVBQVFtQixHQUVsQlgsRUFDRnhXLFFBQVFqSyxVQUFTLFdBQ2Y4bUIsRUFBVzdHLEVBQVFtQixFQUFPMkUsRUFBVXRsQixNQUd0Q3FtQixFQUFXN0csRUFBUW1CLEVBQU8yRSxFQUFVdGxCLElBL0t0QzJsQixDQUFRbkcsRUFBUXNCLElBSWxCbnpCLEtBQUtpNEIsUUFBVSxLQUdmajRCLEtBQUtrNEIsU0FBVyxFQUVoQmw0QixLQUFLbWMsT0FBUyxHQUdkbmMsS0FBS280QixjQUFlLEVBR3RCLFNBQVNqbkIsRUFBU3BSLEdBQ2hCLElBQUlrUixFQUFTLEVBQVEsSUFJckIsS0FBTWpSLGdCQUFnQm1SLEdBQWVuUixnQkFBZ0JpUixHQUNuRCxPQUFPLElBQUlFLEVBQVNwUixHQUV0QkMsS0FBSzBSLGVBQWlCLElBQUk4bEIsRUFBY3ozQixFQUFTQyxNQUdqREEsS0FBS3NSLFVBQVcsRUFFaEJzZ0IsRUFBT3YyQixLQUFLMkUsTUFrR2QsU0FBU3c0QixFQUFRM0csRUFBUW1CLEVBQU9ucEIsRUFBS29wQixFQUFPblcsRUFBVXpLLEdBQ3BEMmdCLEVBQU1rRixTQUFXcnVCLEVBQ2pCbXBCLEVBQU1pRixRQUFVNWxCLEVBQ2hCMmdCLEVBQU04RSxTQUFVLEVBQ2hCOUUsRUFBTVgsTUFBTyxFQUNiUixFQUFPOEcsT0FBTzFGLEVBQU9uVyxFQUFVa1csRUFBTWdGLFNBQ3JDaEYsRUFBTVgsTUFBTyxFQWdEZixTQUFTcUcsRUFBVzdHLEVBQVFtQixFQUFPMkUsRUFBVXRsQixHQUN0Q3NsQixHQVVQLFNBQXNCOUYsRUFBUW1CLEdBQ1AsSUFBakJBLEVBQU16MEIsUUFBZ0J5MEIsRUFBTWlELFlBQzlCakQsRUFBTWlELFdBQVksRUFDbEJwRSxFQUFPd0IsS0FBSyxVQVpadUYsQ0FBYS9HLEVBQVFtQixHQUN2QjNnQixJQUNJc2xCLEdBQ0ZrQixFQUFZaEgsRUFBUW1CLEdBcUV4QixTQUFTc0YsRUFBV3pHLEVBQVFtQixHQUMxQixPQUFRQSxFQUFNMEUsUUFDVyxJQUFqQjFFLEVBQU16MEIsU0FDTHkwQixFQUFNMkUsV0FDTjNFLEVBQU04RSxRQUdqQixTQUFTZSxFQUFZaEgsRUFBUW1CLEdBQzNCLElBQUk4RixFQUFPUixFQUFXekcsRUFBUW1CLEdBSzlCLE9BSkk4RixJQUNGOUYsRUFBTTJFLFVBQVcsRUFDakI5RixFQUFPd0IsS0FBSyxXQUVQeUYsRUEzVVQzN0IsRUFBS0MsU0FBUytULEVBQVV5Z0IsR0FnR3hCemdCLEVBQVNyVSxVQUFVMjNCLEtBQU8sV0FDeEJ6MEIsS0FBS3F6QixLQUFLLFFBQVMsSUFBSTV6QixNQUFNLGdDQW1DL0IwUixFQUFTclUsVUFBVTIyQixNQUFRLFNBQVNSLEVBQU9uVyxFQUFVekssR0FDbkQsSUFBSTJnQixFQUFRaHpCLEtBQUswUixlQUNieEssR0FBTSxFQW9CVixNQWxCd0IsbUJBQWI0VixJQUNUekssRUFBS3lLLEVBQ0xBLEVBQVcsTUFHVGpkLEVBQU9ELFNBQVNxekIsR0FDbEJuVyxFQUFXLFNBQ0hBLElBQ1JBLEVBQVdrVyxFQUFNTixpQkFFRCxtQkFBUHJnQixJQUNUQSxFQUFLLGNBRUgyZ0IsRUFBTXJoQixNQWhEWixTQUF1QmtnQixFQUFRbUIsRUFBTzNnQixHQUNwQyxJQUFJOGdCLEVBQUssSUFBSTF6QixNQUFNLG1CQUVuQm95QixFQUFPd0IsS0FBSyxRQUFTRixHQUNyQnRYLFFBQVFqSyxVQUFTLFdBQ2ZTLEVBQUc4Z0IsTUE0Q0g0RixDQUFjLzRCLEtBQU1nekIsRUFBTzNnQixHQW5DL0IsU0FBb0J3ZixFQUFRbUIsRUFBT0MsRUFBTzVnQixHQUN4QyxJQUFJMm1CLEdBQVEsRUFDWixJQUFLbjVCLEVBQU9ELFNBQVNxekIsSUFDakIsaUJBQW9CQSxHQURwQixNQUVBQSxJQUVDRCxFQUFNUCxXQUFZLENBQ3JCLElBQUlVLEVBQUssSUFBSWpYLFVBQVUsbUNBQ3ZCMlYsRUFBT3dCLEtBQUssUUFBU0YsR0FDckJ0WCxRQUFRakssVUFBUyxXQUNmUyxFQUFHOGdCLE1BRUw2RixHQUFRLEVBRVYsT0FBT0EsRUFzQkVDLENBQVdqNUIsS0FBTWd6QixFQUFPQyxFQUFPNWdCLEtBQ3RDbkwsRUFpQkosU0FBdUIycUIsRUFBUW1CLEVBQU9DLEVBQU9uVyxFQUFVekssR0FDckQ0Z0IsRUFiRixTQUFxQkQsRUFBT0MsRUFBT25XLEdBQzVCa1csRUFBTVAsYUFDaUIsSUFBeEJPLEVBQU02RSxlQUNXLGlCQUFWNUUsSUFDVEEsRUFBUSxJQUFJcHpCLEVBQU9vekIsRUFBT25XLElBRTVCLE9BQU9tVyxFQU9DaUcsQ0FBWWxHLEVBQU9DLEVBQU9uVyxHQUM5QmpkLEVBQU9ELFNBQVNxekIsS0FDbEJuVyxFQUFXLFVBQ2IsSUFBSWpULEVBQU1tcEIsRUFBTVAsV0FBYSxFQUFJUSxFQUFNMTBCLE9BRXZDeTBCLEVBQU16MEIsUUFBVXNMLEVBRWhCLElBQUkzQyxFQUFNOHJCLEVBQU16MEIsT0FBU3kwQixFQUFNaGhCLGNBRTFCOUssSUFDSDhyQixFQUFNaUQsV0FBWSxHQUVoQmpELEVBQU04RSxRQUNSOUUsRUFBTTdXLE9BQU85WixLQUFLLElBQUlvMUIsRUFBU3hFLEVBQU9uVyxFQUFVekssSUFFaERtbUIsRUFBUTNHLEVBQVFtQixFQUFPbnBCLEVBQUtvcEIsRUFBT25XLEVBQVV6SyxHQUUvQyxPQUFPbkwsRUFuQ0NpeUIsQ0FBY241QixLQUFNZ3pCLEVBQU9DLEVBQU9uVyxFQUFVekssSUFFN0NuTCxHQTJJVGlLLEVBQVNyVSxVQUFVNjdCLE9BQVMsU0FBUzFGLEVBQU9uVyxFQUFVekssR0FDcERBLEVBQUcsSUFBSTVTLE1BQU0scUJBR2YwUixFQUFTclUsVUFBVWlWLElBQU0sU0FBU2toQixFQUFPblcsRUFBVXpLLEdBQ2pELElBQUkyZ0IsRUFBUWh6QixLQUFLMFIsZUFFSSxtQkFBVnVoQixHQUNUNWdCLEVBQUs0Z0IsRUFDTEEsRUFBUSxLQUNSblcsRUFBVyxNQUNrQixtQkFBYkEsSUFDaEJ6SyxFQUFLeUssRUFDTEEsRUFBVyxNQUdULE1BQU9tVyxHQUNUanpCLEtBQUt5ekIsTUFBTVIsRUFBT25XLEdBR2ZrVyxFQUFNMEUsUUFBVzFFLEVBQU0yRSxVQXFCOUIsU0FBcUI5RixFQUFRbUIsRUFBTzNnQixHQUNsQzJnQixFQUFNMEUsUUFBUyxFQUNmbUIsRUFBWWhILEVBQVFtQixHQUNoQjNnQixJQUNFMmdCLEVBQU0yRSxTQUNSOWIsUUFBUWpLLFNBQVNTLEdBRWpCd2YsRUFBT3JnQixLQUFLLFNBQVVhLElBRTFCMmdCLEVBQU1yaEIsT0FBUSxFQTdCWnluQixDQUFZcDVCLEtBQU1nekIsRUFBTzNnQixLLGdCQ25TN0JwWCxFQUFPRCxRQUFVcStCLEVBRWpCLElBQUlwb0IsRUFBUyxFQUFRLElBR2pCOVQsRUFBTyxFQUFRLEdBT25CLFNBQVNtOEIsRUFBZXY1QixFQUFTOHhCLEdBQy9CN3hCLEtBQUt1NUIsZUFBaUIsU0FBU3BHLEVBQUlxRyxHQUNqQyxPQVNKLFNBQXdCM0gsRUFBUXNCLEVBQUlxRyxHQUNsQyxJQUFJcFIsRUFBS3lKLEVBQU80SCxnQkFDaEJyUixFQUFHc1IsY0FBZSxFQUVsQixJQUFJcm5CLEVBQUsrVixFQUFHNlAsUUFFWixJQUFLNWxCLEVBQ0gsT0FBT3dmLEVBQU93QixLQUFLLFFBQVMsSUFBSTV6QixNQUFNLGtDQUV4QzJvQixFQUFHdVIsV0FBYSxLQUNoQnZSLEVBQUc2UCxRQUFVLEtBRVR1QixTQUNGM0gsRUFBT3h2QixLQUFLbTNCLEdBRVZubkIsR0FDRkEsRUFBRzhnQixHQUVMLElBQUl5RyxFQUFLL0gsRUFBTzVmLGVBQ2hCMm5CLEVBQUd6SCxTQUFVLEdBQ1R5SCxFQUFHdEgsY0FBZ0JzSCxFQUFHcjdCLE9BQVNxN0IsRUFBRzVuQixnQkFDcEM2ZixFQUFPdUQsTUFBTXdFLEVBQUc1bkIsZUE5QlR1bkIsQ0FBZTFILEVBQVFzQixFQUFJcUcsSUFHcEN4NUIsS0FBSzY1QixlQUFnQixFQUNyQjc1QixLQUFLMDVCLGNBQWUsRUFDcEIxNUIsS0FBS2k0QixRQUFVLEtBQ2ZqNEIsS0FBSzI1QixXQUFhLEtBNkJwQixTQUFTTixFQUFVdDVCLEdBQ2pCLEtBQU1DLGdCQUFnQnE1QixHQUNwQixPQUFPLElBQUlBLEVBQVV0NUIsR0FFdkJrUixFQUFPNVYsS0FBSzJFLEtBQU1ELEdBRVRDLEtBQUt5NUIsZ0JBQWtCLElBQUlILEVBQWV2NUIsRUFBU0MsTUFBNUQsSUFHSTZ4QixFQUFTN3hCLEtBR2JBLEtBQUtpUyxlQUFlcWdCLGNBQWUsRUFLbkN0eUIsS0FBS2lTLGVBQWVvZ0IsTUFBTyxFQUUzQnJ5QixLQUFLd1IsS0FBSyxVQUFVLFdBQ2QsbUJBQXNCeFIsS0FBSzg1QixPQUM3Qjk1QixLQUFLODVCLFFBQU8sU0FBUzNHLEdBQ25CNEcsRUFBS2xJLEVBQVFzQixNQUdmNEcsRUFBS2xJLE1Bc0RYLFNBQVNrSSxFQUFLbEksRUFBUXNCLEdBQ3BCLEdBQUlBLEVBQ0YsT0FBT3RCLEVBQU93QixLQUFLLFFBQVNGLEdBSTlCLElBQUk2RyxFQUFLbkksRUFBT25nQixlQUVaMFcsR0FES3lKLEVBQU81ZixlQUNQNGYsRUFBTzRILGlCQUVoQixHQUFJTyxFQUFHejdCLE9BQ0wsTUFBTSxJQUFJa0IsTUFBTSw4Q0FFbEIsR0FBSTJvQixFQUFHc1IsYUFDTCxNQUFNLElBQUlqNkIsTUFBTSxrREFFbEIsT0FBT295QixFQUFPeHZCLEtBQUssTUExSXJCbEYsRUFBS0MsU0FBVyxFQUFRLEdBR3hCRCxFQUFLQyxTQUFTaThCLEVBQVdwb0IsR0FxRXpCb29CLEVBQVV2OEIsVUFBVXVGLEtBQU8sU0FBUzR3QixFQUFPblcsR0FFekMsT0FEQTljLEtBQUt5NUIsZ0JBQWdCSSxlQUFnQixFQUM5QjVvQixFQUFPblUsVUFBVXVGLEtBQUtoSCxLQUFLMkUsS0FBTWl6QixFQUFPblcsSUFhakR1YyxFQUFVdjhCLFVBQVVtOUIsV0FBYSxTQUFTaEgsRUFBT25XLEVBQVV6SyxHQUN6RCxNQUFNLElBQUk1UyxNQUFNLG9CQUdsQjQ1QixFQUFVdjhCLFVBQVU2N0IsT0FBUyxTQUFTMUYsRUFBT25XLEVBQVV6SyxHQUNyRCxJQUFJK1YsRUFBS3BvQixLQUFLeTVCLGdCQUlkLEdBSEFyUixFQUFHNlAsUUFBVTVsQixFQUNiK1YsRUFBR3VSLFdBQWExRyxFQUNoQjdLLEVBQUc4UixjQUFnQnBkLEdBQ2RzTCxFQUFHc1IsYUFBYyxDQUNwQixJQUFJRSxFQUFLNTVCLEtBQUtpUyxnQkFDVm1XLEVBQUd5UixlQUNIRCxFQUFHdEgsY0FDSHNILEVBQUdyN0IsT0FBU3E3QixFQUFHNW5CLGdCQUNqQmhTLEtBQUtvMUIsTUFBTXdFLEVBQUc1bkIsaUJBT3BCcW5CLEVBQVV2OEIsVUFBVXM0QixNQUFRLFNBQVN6NEIsR0FDbkMsSUFBSXlyQixFQUFLcG9CLEtBQUt5NUIsZ0JBRVEsT0FBbEJyUixFQUFHdVIsWUFBdUJ2UixFQUFHNlAsVUFBWTdQLEVBQUdzUixjQUM5Q3RSLEVBQUdzUixjQUFlLEVBQ2xCMTVCLEtBQUtpNkIsV0FBVzdSLEVBQUd1UixXQUFZdlIsRUFBRzhSLGNBQWU5UixFQUFHbVIsaUJBSXBEblIsRUFBR3lSLGVBQWdCLEksNkJDbEt2QixJQUFJL29CLEVBQU0sRUFBUSxJQUdsQjdWLEVBQU9ELFFBQVVrVyxFQUdqQixJQUlJRCxFQUpBdFMsRUFBVSxFQUFRLEtBT3RCdVMsRUFBU21nQixjQUFnQkEsRUFHaEIsRUFBUSxJQUFVRSxhQUEzQixJQUVJNEksRUFBa0IsU0FBVTFJLEVBQVNueEIsR0FDdkMsT0FBT214QixFQUFRQyxVQUFVcHhCLEdBQU0vQixRQUs3QnF6QixFQUFTLEVBQVEsSUFLakIveEIsRUFBUyxFQUFRLElBQWVBLE9BQ2hDdTZCLEVBQWdCN1IsT0FBTzhSLFlBQWMsYUFXekMsSUFBSWw5QixFQUFPdkIsT0FBT1ksT0FBTyxFQUFRLElBQ2pDVyxFQUFLQyxTQUFXLEVBQVEsR0FJeEIsSUFBSWs5QixFQUFZLEVBQVEsR0FDcEJDLE9BQVEsRUFFVkEsRUFERUQsR0FBYUEsRUFBVUUsU0FDakJGLEVBQVVFLFNBQVMsVUFFbkIsYUFJVixJQUVJN0ksRUFGQThJLEVBQWEsRUFBUSxLQUNyQkMsRUFBYyxFQUFRLElBRzFCdjlCLEVBQUtDLFNBQVM4VCxFQUFVMGdCLEdBRXhCLElBQUkrSSxFQUFlLENBQUMsUUFBUyxRQUFTLFVBQVcsUUFBUyxVQWMxRCxTQUFTdEosRUFBY3R4QixFQUFTOHhCLEdBRzlCOXhCLEVBQVVBLEdBQVcsR0FPckIsSUFBSTY2QixFQUFXL0ksYUFUZjVnQixFQUFTQSxHQUFVLEVBQVEsS0FhM0JqUixLQUFLeXlCLGFBQWUxeUIsRUFBUTB5QixXQUV4Qm1JLElBQVU1NkIsS0FBS3l5QixXQUFhenlCLEtBQUt5eUIsY0FBZ0IxeUIsRUFBUTg2QixvQkFJN0QsSUFBSS9JLEVBQU0veEIsRUFBUWlTLGNBQ2Q4b0IsRUFBYy82QixFQUFRZzdCLHNCQUN0QkMsRUFBYWg3QixLQUFLeXlCLFdBQWEsR0FBSyxNQUVsQnp5QixLQUFLZ1MsY0FBdkI4ZixHQUFlLElBQVJBLEVBQWdDQSxFQUFhOEksSUFBYUUsR0FBK0IsSUFBaEJBLEdBQXlDQSxFQUFzQ0UsRUFHbktoN0IsS0FBS2dTLGNBQWdCd1AsS0FBS3NQLE1BQU05d0IsS0FBS2dTLGVBS3JDaFMsS0FBS21jLE9BQVMsSUFBSXNlLEVBQ2xCejZCLEtBQUt6QixPQUFTLEVBQ2R5QixLQUFLK3hCLE1BQVEsS0FDYi94QixLQUFLZ3lCLFdBQWEsRUFDbEJoeUIsS0FBS2l5QixRQUFVLEtBQ2ZqeUIsS0FBSzJSLE9BQVEsRUFDYjNSLEtBQUtreUIsWUFBYSxFQUNsQmx5QixLQUFLbXlCLFNBQVUsRUFNZm55QixLQUFLcXlCLE1BQU8sRUFJWnJ5QixLQUFLc3lCLGNBQWUsRUFDcEJ0eUIsS0FBS3V5QixpQkFBa0IsRUFDdkJ2eUIsS0FBS3d5QixtQkFBb0IsRUFDekJ4eUIsS0FBS2k3QixpQkFBa0IsRUFHdkJqN0IsS0FBS2tTLFdBQVksRUFLakJsUyxLQUFLMHlCLGdCQUFrQjN5QixFQUFRMnlCLGlCQUFtQixPQUdsRDF5QixLQUFLNHlCLFdBQWEsRUFHbEI1eUIsS0FBSzZ5QixhQUFjLEVBRW5CN3lCLEtBQUs4eUIsUUFBVSxLQUNmOXlCLEtBQUs4YyxTQUFXLEtBQ1ovYyxFQUFRK2MsV0FDTDZVLElBQWVBLEVBQWdCLEVBQVEsSUFBbUJBLGVBQy9EM3hCLEtBQUs4eUIsUUFBVSxJQUFJbkIsRUFBYzV4QixFQUFRK2MsVUFDekM5YyxLQUFLOGMsU0FBVy9jLEVBQVErYyxVQUk1QixTQUFTNUwsRUFBU25SLEdBR2hCLEdBRkFrUixFQUFTQSxHQUFVLEVBQVEsTUFFckJqUixnQkFBZ0JrUixHQUFXLE9BQU8sSUFBSUEsRUFBU25SLEdBRXJEQyxLQUFLaVMsZUFBaUIsSUFBSW9mLEVBQWN0eEIsRUFBU0MsTUFHakRBLEtBQUtxUixVQUFXLEVBRVp0UixJQUMwQixtQkFBakJBLEVBQVE0ekIsT0FBcUIzekIsS0FBS28xQixNQUFRcjFCLEVBQVE0ekIsTUFFOUIsbUJBQXBCNXpCLEVBQVFtN0IsVUFBd0JsN0IsS0FBS21TLFNBQVdwUyxFQUFRbTdCLFVBR3JFdEosRUFBT3YyQixLQUFLMkUsTUEyRGQsU0FBUyt5QixFQUFpQmxCLEVBQVFvQixFQUFPblcsRUFBVW9XLEVBQVlpSSxHQUM3RCxJQUtNaEksRUFMRkgsRUFBUW5CLEVBQU81ZixlQUNMLE9BQVZnaEIsR0FDRkQsRUFBTWIsU0FBVSxFQTBOcEIsU0FBb0JOLEVBQVFtQixHQUMxQixHQUFJQSxFQUFNcmhCLE1BQU8sT0FDakIsR0FBSXFoQixFQUFNRixRQUFTLENBQ2pCLElBQUlHLEVBQVFELEVBQU1GLFFBQVEvZ0IsTUFDdEJraEIsR0FBU0EsRUFBTTEwQixTQUNqQnkwQixFQUFNN1csT0FBTzlaLEtBQUs0d0IsR0FDbEJELEVBQU16MEIsUUFBVXkwQixFQUFNUCxXQUFhLEVBQUlRLEVBQU0xMEIsUUFHakR5MEIsRUFBTXJoQixPQUFRLEVBR2QyaEIsRUFBYXpCLEdBck9YMkIsQ0FBVzNCLEVBQVFtQixLQUdkbUksSUFBZ0JoSSxFQTJDekIsU0FBc0JILEVBQU9DLEdBQzNCLElBQUlFLEVBcFBpQnJsQixFQXFQRm1sQixFQXBQWnB6QixFQUFPRCxTQUFTa08sSUFBUUEsYUFBZXNzQixHQW9QQSxpQkFBVm5ILFFBQWdDaHlCLElBQVZneUIsR0FBd0JELEVBQU1QLGFBQ3RGVSxFQUFLLElBQUlqWCxVQUFVLG9DQXRQdkIsSUFBdUJwTyxFQXdQckIsT0FBT3FsQixFQWhEcUJDLENBQWFKLEVBQU9DLElBQzFDRSxFQUNGdEIsRUFBT3dCLEtBQUssUUFBU0YsR0FDWkgsRUFBTVAsWUFBY1EsR0FBU0EsRUFBTTEwQixPQUFTLEdBQ2hDLGlCQUFWMDBCLEdBQXVCRCxFQUFNUCxZQUFjNzJCLE9BQU93L0IsZUFBZW5JLEtBQVdwekIsRUFBTy9DLFlBQzVGbTJCLEVBaE5SLFNBQTZCQSxHQUMzQixPQUFPcHpCLEVBQU8yYyxLQUFLeVcsR0ErTUxvSSxDQUFvQnBJLElBRzFCQyxFQUNFRixFQUFNZCxXQUFZTCxFQUFPd0IsS0FBSyxRQUFTLElBQUk1ekIsTUFBTSxxQ0FBMEM2N0IsRUFBU3pKLEVBQVFtQixFQUFPQyxHQUFPLEdBQ3JIRCxFQUFNcmhCLE1BQ2ZrZ0IsRUFBT3dCLEtBQUssUUFBUyxJQUFJNXpCLE1BQU0sNkJBRS9CdXpCLEVBQU1iLFNBQVUsRUFDWmEsRUFBTUYsVUFBWWhXLEdBQ3BCbVcsRUFBUUQsRUFBTUYsUUFBUVcsTUFBTVIsR0FDeEJELEVBQU1QLFlBQStCLElBQWpCUSxFQUFNMTBCLE9BQWMrOEIsRUFBU3pKLEVBQVFtQixFQUFPQyxHQUFPLEdBQVlZLEVBQWNoQyxFQUFRbUIsSUFFN0dzSSxFQUFTekosRUFBUW1CLEVBQU9DLEdBQU8sS0FHekJDLElBQ1ZGLEVBQU1iLFNBQVUsSUFJcEIsT0FnQ0YsU0FBc0JhLEdBQ3BCLE9BQVFBLEVBQU1yaEIsUUFBVXFoQixFQUFNVixjQUFnQlUsRUFBTXowQixPQUFTeTBCLEVBQU1oaEIsZUFBa0MsSUFBakJnaEIsRUFBTXowQixRQWpDbkZ1MUIsQ0FBYWQsR0FHdEIsU0FBU3NJLEVBQVN6SixFQUFRbUIsRUFBT0MsRUFBT0MsR0FDbENGLEVBQU1mLFNBQTRCLElBQWpCZSxFQUFNejBCLFNBQWlCeTBCLEVBQU1YLE1BQ2hEUixFQUFPd0IsS0FBSyxPQUFRSixHQUNwQnBCLEVBQU84QixLQUFLLEtBR1pYLEVBQU16MEIsUUFBVXkwQixFQUFNUCxXQUFhLEVBQUlRLEVBQU0xMEIsT0FDekMyMEIsRUFBWUYsRUFBTTdXLE9BQU91WCxRQUFRVCxHQUFZRCxFQUFNN1csT0FBTzlaLEtBQUs0d0IsR0FFL0RELEVBQU1WLGNBQWNnQixFQUFhekIsSUFFdkNnQyxFQUFjaEMsRUFBUW1CLEdBdkd4QnAzQixPQUFPQyxlQUFlcVYsRUFBU3BVLFVBQVcsWUFBYSxDQUNyRGYsSUFBSyxXQUNILFlBQTRCa0YsSUFBeEJqQixLQUFLaVMsZ0JBR0ZqUyxLQUFLaVMsZUFBZUMsV0FFN0JyTCxJQUFLLFNBQVUxSyxHQUdSNkQsS0FBS2lTLGlCQU1WalMsS0FBS2lTLGVBQWVDLFVBQVkvVixNQUlwQytVLEVBQVNwVSxVQUFVbytCLFFBQVVSLEVBQVlRLFFBQ3pDaHFCLEVBQVNwVSxVQUFVeStCLFdBQWFiLEVBQVljLFVBQzVDdHFCLEVBQVNwVSxVQUFVcVYsU0FBVyxTQUFVQyxFQUFLQyxHQUMzQ3JTLEtBQUtxQyxLQUFLLE1BQ1ZnUSxFQUFHRCxJQU9MbEIsRUFBU3BVLFVBQVV1RixLQUFPLFNBQVU0d0IsRUFBT25XLEdBQ3pDLElBQ0lxZSxFQURBbkksRUFBUWh6QixLQUFLaVMsZUFnQmpCLE9BYksrZ0IsRUFBTVAsV0FVVDBJLEdBQWlCLEVBVEksaUJBQVZsSSxLQUNUblcsRUFBV0EsR0FBWWtXLEVBQU1OLG1CQUNaTSxFQUFNbFcsV0FDckJtVyxFQUFRcHpCLEVBQU8yYyxLQUFLeVcsRUFBT25XLEdBQzNCQSxFQUFXLElBRWJxZSxHQUFpQixHQU1kcEksRUFBaUIveUIsS0FBTWl6QixFQUFPblcsR0FBVSxFQUFPcWUsSUFJeERqcUIsRUFBU3BVLFVBQVU0MkIsUUFBVSxTQUFVVCxHQUNyQyxPQUFPRixFQUFpQi95QixLQUFNaXpCLEVBQU8sTUFBTSxHQUFNLElBd0VuRC9oQixFQUFTcFUsVUFBVTIrQixTQUFXLFdBQzVCLE9BQXVDLElBQWhDejdCLEtBQUtpUyxlQUFlZ2dCLFNBSTdCL2dCLEVBQVNwVSxVQUFVaTNCLFlBQWMsU0FBVUMsR0FJekMsT0FIS3JDLElBQWVBLEVBQWdCLEVBQVEsSUFBbUJBLGVBQy9EM3hCLEtBQUtpUyxlQUFlNmdCLFFBQVUsSUFBSW5CLEVBQWNxQyxHQUNoRGgwQixLQUFLaVMsZUFBZTZLLFNBQVdrWCxFQUN4QmgwQixNQXdCVCxTQUFTaTBCLEVBQWN0M0IsRUFBR3EyQixHQUN4QixPQUFJcjJCLEdBQUssR0FBc0IsSUFBakJxMkIsRUFBTXowQixRQUFnQnkwQixFQUFNcmhCLE1BQWMsRUFDcERxaEIsRUFBTVAsV0FBbUIsRUFDekI5MUIsR0FBTUEsRUFFSnEyQixFQUFNZixTQUFXZSxFQUFNejBCLE9BQWV5MEIsRUFBTTdXLE9BQU92VCxLQUFLNHdCLEtBQUtqN0IsT0FBbUJ5MEIsRUFBTXowQixRQUd4RjVCLEVBQUlxMkIsRUFBTWhoQixnQkFBZWdoQixFQUFNaGhCLGNBM0JyQyxTQUFpQ3JWLEdBYy9CLE9BYklBLEdBRlEsUUFHVkEsRUFIVSxTQU9WQSxJQUNBQSxHQUFLQSxJQUFNLEVBQ1hBLEdBQUtBLElBQU0sRUFDWEEsR0FBS0EsSUFBTSxFQUNYQSxHQUFLQSxJQUFNLEVBQ1hBLEdBQUtBLElBQU0sR0FDWEEsS0FFS0EsRUFhNEMrK0IsQ0FBd0IvK0IsSUFDdkVBLEdBQUtxMkIsRUFBTXowQixPQUFlNUIsRUFFekJxMkIsRUFBTXJoQixNQUlKcWhCLEVBQU16MEIsUUFIWHkwQixFQUFNVixjQUFlLEVBQ2QsSUE0SFgsU0FBU2dCLEVBQWF6QixHQUNwQixJQUFJbUIsRUFBUW5CLEVBQU81ZixlQUNuQitnQixFQUFNVixjQUFlLEVBQ2hCVSxFQUFNVCxrQkFDVGdJLEVBQU0sZUFBZ0J2SCxFQUFNZixTQUM1QmUsRUFBTVQsaUJBQWtCLEVBQ3BCUyxFQUFNWCxLQUFNdmhCLEVBQUljLFNBQVN1aUIsRUFBZXRDLEdBQWFzQyxFQUFjdEMsSUFJM0UsU0FBU3NDLEVBQWN0QyxHQUNyQjBJLEVBQU0saUJBQ04xSSxFQUFPd0IsS0FBSyxZQUNaZSxFQUFLdkMsR0FTUCxTQUFTZ0MsRUFBY2hDLEVBQVFtQixHQUN4QkEsRUFBTUgsY0FDVEcsRUFBTUgsYUFBYyxFQUNwQi9oQixFQUFJYyxTQUFTZ2lCLEVBQWdCL0IsRUFBUW1CLElBSXpDLFNBQVNZLEVBQWUvQixFQUFRbUIsR0FFOUIsSUFEQSxJQUFJbnBCLEVBQU1tcEIsRUFBTXowQixRQUNSeTBCLEVBQU1iLFVBQVlhLEVBQU1mLFVBQVllLEVBQU1yaEIsT0FBU3FoQixFQUFNejBCLE9BQVN5MEIsRUFBTWhoQixnQkFDOUV1b0IsRUFBTSx3QkFDTjFJLEVBQU84QixLQUFLLEdBQ1I5cEIsSUFBUW1wQixFQUFNejBCLFNBRUxzTCxFQUFNbXBCLEVBQU16MEIsT0FFM0J5MEIsRUFBTUgsYUFBYyxFQXlPdEIsU0FBUzhJLEVBQWlCN3BCLEdBQ3hCeW9CLEVBQU0sNEJBQ056b0IsRUFBSzZoQixLQUFLLEdBc0JaLFNBQVNpSSxFQUFRL0osRUFBUW1CLEdBQ2xCQSxFQUFNYixVQUNUb0ksRUFBTSxpQkFDTjFJLEVBQU84QixLQUFLLElBR2RYLEVBQU1pSSxpQkFBa0IsRUFDeEJqSSxFQUFNSixXQUFhLEVBQ25CZixFQUFPd0IsS0FBSyxVQUNaZSxFQUFLdkMsR0FDRG1CLEVBQU1mLFVBQVllLEVBQU1iLFNBQVNOLEVBQU84QixLQUFLLEdBYW5ELFNBQVNTLEVBQUt2QyxHQUNaLElBQUltQixFQUFRbkIsRUFBTzVmLGVBRW5CLElBREFzb0IsRUFBTSxPQUFRdkgsRUFBTWYsU0FDYmUsRUFBTWYsU0FBNkIsT0FBbEJKLEVBQU84QixVQW1GakMsU0FBU21CLEVBQVNuNEIsRUFBR3EyQixHQUVuQixPQUFxQixJQUFqQkEsRUFBTXowQixPQUFxQixNQUczQnkwQixFQUFNUCxXQUFZdnJCLEVBQU04ckIsRUFBTTdXLE9BQU80WSxTQUFrQnA0QixHQUFLQSxHQUFLcTJCLEVBQU16MEIsUUFFdEQySSxFQUFmOHJCLEVBQU1GLFFBQWVFLEVBQU03VyxPQUFPdmIsS0FBSyxJQUFxQyxJQUF4Qm95QixFQUFNN1csT0FBTzVkLE9BQW9CeTBCLEVBQU03VyxPQUFPdlQsS0FBSzR3QixLQUFnQnhHLEVBQU03VyxPQUFPZ0IsT0FBTzZWLEVBQU16MEIsUUFDckp5MEIsRUFBTTdXLE9BQU8wZixTQUdiMzBCLEVBU0osU0FBeUJ2SyxFQUFHdXNCLEVBQU00UyxHQUNoQyxJQUFJNTBCLEVBQ0F2SyxFQUFJdXNCLEVBQUt0Z0IsS0FBSzR3QixLQUFLajdCLFFBRXJCMkksRUFBTWdpQixFQUFLdGdCLEtBQUs0d0IsS0FBSzVtQixNQUFNLEVBQUdqVyxHQUM5QnVzQixFQUFLdGdCLEtBQUs0d0IsS0FBT3RRLEVBQUt0Z0IsS0FBSzR3QixLQUFLNW1CLE1BQU1qVyxJQUd0Q3VLLEVBRlN2SyxJQUFNdXNCLEVBQUt0Z0IsS0FBSzR3QixLQUFLajdCLE9BRXhCMnFCLEVBQUs2TCxRQUdMK0csRUFTVixTQUE4Qm4vQixFQUFHdXNCLEdBQy9CLElBQUlsc0IsRUFBSWtzQixFQUFLdGdCLEtBQ1RyTixFQUFJLEVBQ0oyTCxFQUFNbEssRUFBRXc4QixLQUNaNzhCLEdBQUt1SyxFQUFJM0ksT0FDVCxLQUFPdkIsRUFBSUEsRUFBRXVRLE1BQU0sQ0FDakIsSUFBSTNELEVBQU01TSxFQUFFdzhCLEtBQ1J1QyxFQUFLcC9CLEVBQUlpTixFQUFJckwsT0FBU3FMLEVBQUlyTCxPQUFTNUIsRUFHdkMsR0FGSW8vQixJQUFPbnlCLEVBQUlyTCxPQUFRMkksR0FBTzBDLEVBQVMxQyxHQUFPMEMsRUFBSWdKLE1BQU0sRUFBR2pXLEdBRWpELEtBRFZBLEdBQUtvL0IsR0FDUSxDQUNQQSxJQUFPbnlCLEVBQUlyTCxVQUNYaEQsRUFDRXlCLEVBQUV1USxLQUFNMmIsRUFBS3RnQixLQUFPNUwsRUFBRXVRLEtBQVUyYixFQUFLdGdCLEtBQU9zZ0IsRUFBSzhTLEtBQU8sT0FFNUQ5UyxFQUFLdGdCLEtBQU81TCxFQUNaQSxFQUFFdzhCLEtBQU81dkIsRUFBSWdKLE1BQU1tcEIsSUFFckIsUUFFQXhnQyxFQUdKLE9BREEydEIsRUFBSzNxQixRQUFVaEQsRUFDUjJMLEVBaENjKzBCLENBQXFCdC9CLEVBQUd1c0IsR0FzQy9DLFNBQXdCdnNCLEVBQUd1c0IsR0FDekIsSUFBSWhpQixFQUFNckgsRUFBTzZjLFlBQVkvZixHQUN6QkssRUFBSWtzQixFQUFLdGdCLEtBQ1RyTixFQUFJLEVBQ1J5QixFQUFFdzhCLEtBQUt2RSxLQUFLL3RCLEdBQ1p2SyxHQUFLSyxFQUFFdzhCLEtBQUtqN0IsT0FDWixLQUFPdkIsRUFBSUEsRUFBRXVRLE1BQU0sQ0FDakIsSUFBSXdQLEVBQU0vZixFQUFFdzhCLEtBQ1J1QyxFQUFLcC9CLEVBQUlvZ0IsRUFBSXhlLE9BQVN3ZSxFQUFJeGUsT0FBUzVCLEVBR3ZDLEdBRkFvZ0IsRUFBSWtZLEtBQUsvdEIsRUFBS0EsRUFBSTNJLE9BQVM1QixFQUFHLEVBQUdvL0IsR0FFdkIsS0FEVnAvQixHQUFLby9CLEdBQ1EsQ0FDUEEsSUFBT2hmLEVBQUl4ZSxVQUNYaEQsRUFDRXlCLEVBQUV1USxLQUFNMmIsRUFBS3RnQixLQUFPNUwsRUFBRXVRLEtBQVUyYixFQUFLdGdCLEtBQU9zZ0IsRUFBSzhTLEtBQU8sT0FFNUQ5UyxFQUFLdGdCLEtBQU81TCxFQUNaQSxFQUFFdzhCLEtBQU96YyxFQUFJbkssTUFBTW1wQixJQUVyQixRQUVBeGdDLEVBR0osT0FEQTJ0QixFQUFLM3FCLFFBQVVoRCxFQUNSMkwsRUE5RDhDZzFCLENBQWV2L0IsRUFBR3VzQixHQUV2RSxPQUFPaGlCLEVBdEJDaTFCLENBQWdCeC9CLEVBQUdxMkIsRUFBTTdXLE9BQVE2VyxFQUFNRixTQUd4QzVyQixHQVZQLElBQUlBLEVBNEZOLFNBQVNxc0IsRUFBWTFCLEdBQ25CLElBQUltQixFQUFRbkIsRUFBTzVmLGVBSW5CLEdBQUkrZ0IsRUFBTXowQixPQUFTLEVBQUcsTUFBTSxJQUFJa0IsTUFBTSw4Q0FFakN1ekIsRUFBTWQsYUFDVGMsRUFBTXJoQixPQUFRLEVBQ2RiLEVBQUljLFNBQVN3cUIsRUFBZXBKLEVBQU9uQixJQUl2QyxTQUFTdUssRUFBY3BKLEVBQU9uQixHQUV2Qm1CLEVBQU1kLFlBQStCLElBQWpCYyxFQUFNejBCLFNBQzdCeTBCLEVBQU1kLFlBQWEsRUFDbkJMLEVBQU94Z0IsVUFBVyxFQUNsQndnQixFQUFPd0IsS0FBSyxRQUloQixTQUFTdnZCLEVBQVEraUIsRUFBSTVoQixHQUNuQixJQUFLLElBQUkvSixFQUFJLEVBQUdDLEVBQUkwckIsRUFBR3RvQixPQUFRckQsRUFBSUMsRUFBR0QsSUFDcEMsR0FBSTJyQixFQUFHM3JCLEtBQU8rSixFQUFHLE9BQU8vSixFQUUxQixPQUFRLEVBcG9CVmdXLEVBQVNwVSxVQUFVNjJCLEtBQU8sU0FBVWgzQixHQUNsQzQ5QixFQUFNLE9BQVE1OUIsR0FDZEEsRUFBSW9lLFNBQVNwZSxFQUFHLElBQ2hCLElBQUlxMkIsRUFBUWh6QixLQUFLaVMsZUFDYmlqQixFQUFRdjRCLEVBT1osR0FMVSxJQUFOQSxJQUFTcTJCLEVBQU1ULGlCQUFrQixHQUszQixJQUFONTFCLEdBQVdxMkIsRUFBTVYsZUFBaUJVLEVBQU16MEIsUUFBVXkwQixFQUFNaGhCLGVBQWlCZ2hCLEVBQU1yaEIsT0FHakYsT0FGQTRvQixFQUFNLHFCQUFzQnZILEVBQU16MEIsT0FBUXkwQixFQUFNcmhCLE9BQzNCLElBQWpCcWhCLEVBQU16MEIsUUFBZ0J5MEIsRUFBTXJoQixNQUFPNGhCLEVBQVl2ekIsTUFBV3N6QixFQUFhdHpCLE1BQ3BFLEtBTVQsR0FBVSxLQUhWckQsRUFBSXMzQixFQUFjdDNCLEVBQUdxMkIsS0FHTkEsRUFBTXJoQixNQUVuQixPQURxQixJQUFqQnFoQixFQUFNejBCLFFBQWNnMUIsRUFBWXZ6QixNQUM3QixLQTBCVCxJQTRCSWtILEVBNUJBaXVCLEVBQVNuQyxFQUFNVixhQWlEbkIsT0FoREFpSSxFQUFNLGdCQUFpQnBGLElBR0YsSUFBakJuQyxFQUFNejBCLFFBQWdCeTBCLEVBQU16MEIsT0FBUzVCLEVBQUlxMkIsRUFBTWhoQixnQkFFakR1b0IsRUFBTSw2QkFETnBGLEdBQVMsR0FNUG5DLEVBQU1yaEIsT0FBU3FoQixFQUFNYixRQUV2Qm9JLEVBQU0sbUJBRE5wRixHQUFTLEdBRUFBLElBQ1RvRixFQUFNLFdBQ052SCxFQUFNYixTQUFVLEVBQ2hCYSxFQUFNWCxNQUFPLEVBRVEsSUFBakJXLEVBQU16MEIsU0FBY3kwQixFQUFNVixjQUFlLEdBRTdDdHlCLEtBQUtvMUIsTUFBTXBDLEVBQU1oaEIsZUFDakJnaEIsRUFBTVgsTUFBTyxFQUdSVyxFQUFNYixVQUFTeDFCLEVBQUlzM0IsRUFBY2lCLEVBQU9sQyxLQU1uQyxRQUZEOXJCLEVBQVB2SyxFQUFJLEVBQVNtNEIsRUFBU240QixFQUFHcTJCLEdBQWtCLE9BRzdDQSxFQUFNVixjQUFlLEVBQ3JCMzFCLEVBQUksR0FFSnEyQixFQUFNejBCLFFBQVU1QixFQUdHLElBQWpCcTJCLEVBQU16MEIsU0FHSHkwQixFQUFNcmhCLFFBQU9xaEIsRUFBTVYsY0FBZSxHQUduQzRDLElBQVV2NEIsR0FBS3EyQixFQUFNcmhCLE9BQU80aEIsRUFBWXZ6QixPQUdsQyxPQUFSa0gsR0FBY2xILEtBQUtxekIsS0FBSyxPQUFRbnNCLEdBRTdCQSxHQWtFVGdLLEVBQVNwVSxVQUFVczRCLE1BQVEsU0FBVXo0QixHQUNuQ3FELEtBQUtxekIsS0FBSyxRQUFTLElBQUk1ekIsTUFBTSxnQ0FHL0J5UixFQUFTcFUsVUFBVTIzQixLQUFPLFNBQVV2MEIsRUFBTW0xQixHQUN4QyxJQUFJamlCLEVBQU1wVCxLQUNOZ3pCLEVBQVFoekIsS0FBS2lTLGVBRWpCLE9BQVErZ0IsRUFBTWhCLFlBQ1osS0FBSyxFQUNIZ0IsRUFBTWpCLE1BQVE3eEIsRUFDZCxNQUNGLEtBQUssRUFDSDh5QixFQUFNakIsTUFBUSxDQUFDaUIsRUFBTWpCLE1BQU83eEIsR0FDNUIsTUFDRixRQUNFOHlCLEVBQU1qQixNQUFNMXZCLEtBQUtuQyxHQUdyQjh5QixFQUFNaEIsWUFBYyxFQUNwQnVJLEVBQU0sd0JBQXlCdkgsRUFBTWhCLFdBQVlxRCxHQUVqRCxJQUVJQyxJQUZVRCxJQUE2QixJQUFqQkEsRUFBU3RqQixNQUFrQjdSLElBQVMyYixRQUFRMFosUUFBVXIxQixJQUFTMmIsUUFBUTJaLE9BRTdFL2pCLEVBQVF5a0IsRUFJNUIsU0FBU1IsRUFBU3JrQixFQUFVZ3JCLEdBQzFCOUIsRUFBTSxZQUNGbHBCLElBQWErQixHQUNYaXBCLElBQXdDLElBQTFCQSxFQUFXQyxhQUMzQkQsRUFBV0MsWUFBYSxFQW9CNUIvQixFQUFNLFdBRU5yNkIsRUFBSzIxQixlQUFlLFFBQVNDLEdBQzdCNTFCLEVBQUsyMUIsZUFBZSxTQUFVRSxHQUM5QjcxQixFQUFLMjFCLGVBQWUsUUFBU0YsR0FDN0J6MUIsRUFBSzIxQixlQUFlLFFBQVNHLEdBQzdCOTFCLEVBQUsyMUIsZUFBZSxTQUFVSCxHQUM5QnRpQixFQUFJeWlCLGVBQWUsTUFBT3BrQixHQUMxQjJCLEVBQUl5aUIsZUFBZSxNQUFPSyxHQUMxQjlpQixFQUFJeWlCLGVBQWUsT0FBUTBHLEdBRTNCQyxHQUFZLEdBT1J4SixFQUFNSixZQUFnQjF5QixFQUFLd1IsaUJBQWtCeFIsRUFBS3dSLGVBQWV1a0IsV0FBWU4sS0FoQ25GLFNBQVNsa0IsSUFDUDhvQixFQUFNLFNBQ05yNkIsRUFBSzZSLE1BZkhpaEIsRUFBTWQsV0FBWXBoQixFQUFJYyxTQUFTMGpCLEdBQVlsaUIsRUFBSTVCLEtBQUssTUFBTzhqQixHQUUvRHAxQixFQUFLdzBCLEdBQUcsU0FBVWdCLEdBb0JsQixJQUFJQyxFQTRGTixTQUFxQnZpQixHQUNuQixPQUFPLFdBQ0wsSUFBSTRmLEVBQVE1ZixFQUFJbkIsZUFDaEJzb0IsRUFBTSxjQUFldkgsRUFBTUosWUFDdkJJLEVBQU1KLFlBQVlJLEVBQU1KLGFBQ0gsSUFBckJJLEVBQU1KLFlBQW9CdUgsRUFBZ0IvbUIsRUFBSyxVQUNqRDRmLEVBQU1mLFNBQVUsRUFDaEJtQyxFQUFLaGhCLEtBbkdLd2lCLENBQVl4aUIsR0FDMUJsVCxFQUFLdzBCLEdBQUcsUUFBU2lCLEdBRWpCLElBQUk2RyxHQUFZLEVBMkJoQixJQUFJQyxHQUFzQixFQUUxQixTQUFTRixFQUFPdEosR0FDZHNILEVBQU0sVUFDTmtDLEdBQXNCLEdBRWxCLElBRE12OEIsRUFBS3V6QixNQUFNUixJQUNDd0osS0FLTSxJQUFyQnpKLEVBQU1oQixZQUFvQmdCLEVBQU1qQixRQUFVN3hCLEdBQVE4eUIsRUFBTWhCLFdBQWEsSUFBcUMsSUFBaENsdUIsRUFBUWt2QixFQUFNakIsTUFBTzd4QixNQUFrQnM4QixJQUNwSGpDLEVBQU0sOEJBQStCbm5CLEVBQUluQixlQUFlMmdCLFlBQ3hEeGYsRUFBSW5CLGVBQWUyZ0IsYUFDbkI2SixHQUFzQixHQUV4QnJwQixFQUFJd2hCLFNBTVIsU0FBU29CLEVBQVE3QyxHQUNmb0gsRUFBTSxVQUFXcEgsR0FDakIrQyxJQUNBaDJCLEVBQUsyMUIsZUFBZSxRQUFTRyxHQUNVLElBQW5DbUUsRUFBZ0JqNkIsRUFBTSxVQUFnQkEsRUFBS216QixLQUFLLFFBQVNGLEdBTy9ELFNBQVMyQyxJQUNQNTFCLEVBQUsyMUIsZUFBZSxTQUFVRSxHQUM5QkcsSUFHRixTQUFTSCxJQUNQd0UsRUFBTSxZQUNOcjZCLEVBQUsyMUIsZUFBZSxRQUFTQyxHQUM3QkksSUFJRixTQUFTQSxJQUNQcUUsRUFBTSxVQUNObm5CLEVBQUk4aUIsT0FBT2gyQixHQVliLE9BMURBa1QsRUFBSXNoQixHQUFHLE9BQVE2SCxHQTlnQmpCLFNBQXlCOUssRUFBU2lMLEVBQU8xdkIsR0FHdkMsR0FBdUMsbUJBQTVCeWtCLEVBQVFrTCxnQkFBZ0MsT0FBT2xMLEVBQVFrTCxnQkFBZ0JELEVBQU8xdkIsR0FNcEZ5a0IsRUFBUTBFLFNBQVkxRSxFQUFRMEUsUUFBUXVHLEdBQXVDLzlCLEVBQVE4eUIsRUFBUTBFLFFBQVF1RyxJQUFTakwsRUFBUTBFLFFBQVF1RyxHQUFPaEosUUFBUTFtQixHQUFTeWtCLEVBQVEwRSxRQUFRdUcsR0FBUyxDQUFDMXZCLEVBQUl5a0IsRUFBUTBFLFFBQVF1RyxJQUF0SmpMLEVBQVFpRCxHQUFHZ0ksRUFBTzF2QixHQWtpQm5FMnZCLENBQWdCejhCLEVBQU0sUUFBUzgxQixHQU8vQjkxQixFQUFLc1IsS0FBSyxRQUFTc2tCLEdBTW5CNTFCLEVBQUtzUixLQUFLLFNBQVV1a0IsR0FRcEI3MUIsRUFBS216QixLQUFLLE9BQVFqZ0IsR0FHYjRmLEVBQU1mLFVBQ1RzSSxFQUFNLGVBQ05ubkIsRUFBSXloQixVQUdDMzBCLEdBZVRnUixFQUFTcFUsVUFBVW81QixPQUFTLFNBQVVoMkIsR0FDcEMsSUFBSTh5QixFQUFRaHpCLEtBQUtpUyxlQUNib3FCLEVBQWEsQ0FBRUMsWUFBWSxHQUcvQixHQUF5QixJQUFyQnRKLEVBQU1oQixXQUFrQixPQUFPaHlCLEtBR25DLEdBQXlCLElBQXJCZ3pCLEVBQU1oQixXQUVSLE9BQUk5eEIsR0FBUUEsSUFBUzh5QixFQUFNakIsUUFFdEI3eEIsSUFBTUEsRUFBTzh5QixFQUFNakIsT0FHeEJpQixFQUFNakIsTUFBUSxLQUNkaUIsRUFBTWhCLFdBQWEsRUFDbkJnQixFQUFNZixTQUFVLEVBQ1oveEIsR0FBTUEsRUFBS216QixLQUFLLFNBQVVyekIsS0FBTXE4QixJQVJLcjhCLEtBYzNDLElBQUtFLEVBQU0sQ0FFVCxJQUFJbTJCLEVBQVFyRCxFQUFNakIsTUFDZGxvQixFQUFNbXBCLEVBQU1oQixXQUNoQmdCLEVBQU1qQixNQUFRLEtBQ2RpQixFQUFNaEIsV0FBYSxFQUNuQmdCLEVBQU1mLFNBQVUsRUFFaEIsSUFBSyxJQUFJLzJCLEVBQUksRUFBR0EsRUFBSTJPLEVBQUszTyxJQUN2Qm03QixFQUFNbjdCLEdBQUdtNEIsS0FBSyxTQUFVcnpCLEtBQU1xOEIsR0FDL0IsT0FBT3I4QixLQUlWLElBQUlnVyxFQUFRbFMsRUFBUWt2QixFQUFNakIsTUFBTzd4QixHQUNqQyxPQUFlLElBQVg4VixJQUVKZ2QsRUFBTWpCLE1BQU10YyxPQUFPTyxFQUFPLEdBQzFCZ2QsRUFBTWhCLFlBQWMsRUFDSyxJQUFyQmdCLEVBQU1oQixhQUFrQmdCLEVBQU1qQixNQUFRaUIsRUFBTWpCLE1BQU0sSUFFdEQ3eEIsRUFBS216QixLQUFLLFNBQVVyekIsS0FBTXE4QixJQU5EcjhCLE1BYTNCa1IsRUFBU3BVLFVBQVU0M0IsR0FBSyxTQUFVNEIsRUFBSXRwQixHQUNwQyxJQUFJa1osRUFBTTBMLEVBQU85MEIsVUFBVTQzQixHQUFHcjVCLEtBQUsyRSxLQUFNczJCLEVBQUl0cEIsR0FFN0MsR0FBVyxTQUFQc3BCLEdBRWtDLElBQWhDdDJCLEtBQUtpUyxlQUFlZ2dCLFNBQW1CanlCLEtBQUs2MEIsY0FDM0MsR0FBVyxhQUFQeUIsRUFBbUIsQ0FDNUIsSUFBSXRELEVBQVFoekIsS0FBS2lTLGVBQ1orZ0IsRUFBTWQsWUFBZWMsRUFBTVIsb0JBQzlCUSxFQUFNUixrQkFBb0JRLEVBQU1WLGNBQWUsRUFDL0NVLEVBQU1ULGlCQUFrQixFQUNuQlMsRUFBTWIsUUFFQWEsRUFBTXowQixRQUNmKzBCLEVBQWF0ekIsTUFGYjhRLEVBQUljLFNBQVMrcEIsRUFBa0IzN0IsT0FPckMsT0FBT2ttQixHQUVUaFYsRUFBU3BVLFVBQVU2M0IsWUFBY3pqQixFQUFTcFUsVUFBVTQzQixHQVNwRHhqQixFQUFTcFUsVUFBVSszQixPQUFTLFdBQzFCLElBQUk3QixFQUFRaHpCLEtBQUtpUyxlQU1qQixPQUxLK2dCLEVBQU1mLFVBQ1RzSSxFQUFNLFVBQ052SCxFQUFNZixTQUFVLEVBTXBCLFNBQWdCSixFQUFRbUIsR0FDakJBLEVBQU1pSSxrQkFDVGpJLEVBQU1pSSxpQkFBa0IsRUFDeEJucUIsRUFBSWMsU0FBU2dxQixFQUFTL0osRUFBUW1CLElBUjlCNkIsQ0FBTzcwQixLQUFNZ3pCLElBRVJoekIsTUF1QlRrUixFQUFTcFUsVUFBVTgzQixNQUFRLFdBT3pCLE9BTkEyRixFQUFNLHdCQUF5QnY2QixLQUFLaVMsZUFBZWdnQixVQUMvQyxJQUFVanlCLEtBQUtpUyxlQUFlZ2dCLFVBQ2hDc0ksRUFBTSxTQUNOdjZCLEtBQUtpUyxlQUFlZ2dCLFNBQVUsRUFDOUJqeUIsS0FBS3F6QixLQUFLLFVBRUxyekIsTUFZVGtSLEVBQVNwVSxVQUFVeTVCLEtBQU8sU0FBVTFFLEdBQ2xDLElBQUkrSyxFQUFRNThCLEtBRVJnekIsRUFBUWh6QixLQUFLaVMsZUFDYnVpQixHQUFTLEVBNEJiLElBQUssSUFBSXQ1QixLQTFCVDIyQixFQUFPNkMsR0FBRyxPQUFPLFdBRWYsR0FEQTZGLEVBQU0sZUFDRnZILEVBQU1GLFVBQVlFLEVBQU1yaEIsTUFBTyxDQUNqQyxJQUFJc2hCLEVBQVFELEVBQU1GLFFBQVEvZ0IsTUFDdEJraEIsR0FBU0EsRUFBTTEwQixRQUFRcStCLEVBQU12NkIsS0FBSzR3QixHQUd4QzJKLEVBQU12NkIsS0FBSyxTQUdid3ZCLEVBQU82QyxHQUFHLFFBQVEsU0FBVXpCLElBQzFCc0gsRUFBTSxnQkFDRnZILEVBQU1GLFVBQVNHLEVBQVFELEVBQU1GLFFBQVFXLE1BQU1SLElBRzNDRCxFQUFNUCxZQUFjLE1BQUNRLEtBQXlERCxFQUFNUCxZQUFnQlEsR0FBVUEsRUFBTTEwQixVQUU5R3ErQixFQUFNdjZCLEtBQUs0d0IsS0FFbkJ1QixHQUFTLEVBQ1QzQyxFQUFPK0MsYUFNRy9DLE9BQ0k1d0IsSUFBWmpCLEtBQUs5RSxJQUF5QyxtQkFBZDIyQixFQUFPMzJCLEtBQ3pDOEUsS0FBSzlFLEdBQUssU0FBVWtXLEdBQ2xCLE9BQU8sV0FDTCxPQUFPeWdCLEVBQU96Z0IsR0FBUThHLE1BQU0yWixFQUFRdnpCLFlBRjlCLENBSVJwRCxJQUtOLElBQUssSUFBSXlCLEVBQUksRUFBR0EsRUFBSWcrQixFQUFhcDhCLE9BQVE1QixJQUN2Q2sxQixFQUFPNkMsR0FBR2lHLEVBQWFoK0IsR0FBSXFELEtBQUtxekIsS0FBSzMyQixLQUFLc0QsS0FBTTI2QixFQUFhaCtCLEtBYS9ELE9BUkFxRCxLQUFLbzFCLE1BQVEsU0FBVXo0QixHQUNyQjQ5QixFQUFNLGdCQUFpQjU5QixHQUNuQjYzQixJQUNGQSxHQUFTLEVBQ1QzQyxFQUFPZ0QsV0FJSjcwQixNQUdUcEUsT0FBT0MsZUFBZXFWLEVBQVNwVSxVQUFXLHdCQUF5QixDQUlqRWhCLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU9pRSxLQUFLaVMsZUFBZUQsaUJBSy9CZCxFQUFTc2xCLFVBQVkxQixHLGdCQ3ozQnJCNzVCLEVBQU9ELFFBQVUsRUFBUSxJLDZCQ0l6QixJQUFJOFYsRUFBTSxFQUFRLElBOERsQixTQUFTK3JCLEVBQVkvcUIsRUFBTU0sR0FDekJOLEVBQUt1aEIsS0FBSyxRQUFTamhCLEdBR3JCblgsRUFBT0QsUUFBVSxDQUNma2dDLFFBL0RGLFNBQWlCOW9CLEVBQUtDLEdBQ3BCLElBQUl1cUIsRUFBUTU4QixLQUVSODhCLEVBQW9COThCLEtBQUtpUyxnQkFBa0JqUyxLQUFLaVMsZUFBZUMsVUFDL0Q2cUIsRUFBb0IvOEIsS0FBSzBSLGdCQUFrQjFSLEtBQUswUixlQUFlUSxVQUVuRSxPQUFJNHFCLEdBQXFCQyxHQUNuQjFxQixFQUNGQSxFQUFHRCxJQUNNQSxHQUFTcFMsS0FBSzBSLGdCQUFtQjFSLEtBQUswUixlQUFlMG1CLGNBQzlEdG5CLEVBQUljLFNBQVNpckIsRUFBYTc4QixLQUFNb1MsR0FFM0JwUyxPQU1MQSxLQUFLaVMsaUJBQ1BqUyxLQUFLaVMsZUFBZUMsV0FBWSxHQUk5QmxTLEtBQUswUixpQkFDUDFSLEtBQUswUixlQUFlUSxXQUFZLEdBR2xDbFMsS0FBS21TLFNBQVNDLEdBQU8sTUFBTSxTQUFVQSxJQUM5QkMsR0FBTUQsR0FDVHRCLEVBQUljLFNBQVNpckIsRUFBYUQsRUFBT3hxQixHQUM3QndxQixFQUFNbHJCLGlCQUNSa3JCLEVBQU1sckIsZUFBZTBtQixjQUFlLElBRTdCL2xCLEdBQ1RBLEVBQUdELE1BSUFwUyxPQTBCUHc3QixVQXZCRixXQUNNeDdCLEtBQUtpUyxpQkFDUGpTLEtBQUtpUyxlQUFlQyxXQUFZLEVBQ2hDbFMsS0FBS2lTLGVBQWVrZ0IsU0FBVSxFQUM5Qm55QixLQUFLaVMsZUFBZU4sT0FBUSxFQUM1QjNSLEtBQUtpUyxlQUFlaWdCLFlBQWEsR0FHL0JseUIsS0FBSzBSLGlCQUNQMVIsS0FBSzBSLGVBQWVRLFdBQVksRUFDaENsUyxLQUFLMFIsZUFBZUMsT0FBUSxFQUM1QjNSLEtBQUswUixlQUFlZ21CLFFBQVMsRUFDN0IxM0IsS0FBSzBSLGVBQWVpbUIsVUFBVyxFQUMvQjMzQixLQUFLMFIsZUFBZTBtQixjQUFlLE0sNkJDakN2QyxJQUFJdG5CLEVBQU0sRUFBUSxJQWVsQixTQUFTa3NCLEVBQWNoSyxHQUNyQixJQUFJNEosRUFBUTU4QixLQUVaQSxLQUFLdU4sS0FBTyxLQUNadk4sS0FBS3U0QixNQUFRLEtBQ2J2NEIsS0FBS2k5QixPQUFTLFlBb2xCaEIsU0FBd0JDLEVBQVNsSyxFQUFPNWdCLEdBQ3RDLElBQUltbUIsRUFBUTJFLEVBQVEzRSxNQUNwQjJFLEVBQVEzRSxNQUFRLEtBQ2hCLEtBQU9BLEdBQU8sQ0FDWixJQUFJbG1CLEVBQUtrbUIsRUFBTWhhLFNBQ2Z5VSxFQUFNbUssWUFDTjlxQixFQUFHRCxHQUNIbW1CLEVBQVFBLEVBQU1ockIsS0FFWnlsQixFQUFNb0ssbUJBQ1JwSyxFQUFNb0ssbUJBQW1CN3ZCLEtBQU8ydkIsRUFFaENsSyxFQUFNb0ssbUJBQXFCRixFQS9sQjNCRyxDQUFlVCxFQUFPNUosSUFsQjFCLzNCLEVBQU9ELFFBQVVtVyxFQXdCakIsSUFJSUYsRUFKQXFzQixHQUFjemhCLFFBQVEwaEIsU0FBVyxDQUFDLFFBQVMsU0FBU3o1QixRQUFRK1gsUUFBUUMsUUFBUWxKLE1BQU0sRUFBRyxLQUFPLEVBQUk0cUIsYUFBZTFzQixFQUFJYyxTQU92SFQsRUFBU3FtQixjQUFnQkEsRUFHekIsSUFBSXI2QixFQUFPdkIsT0FBT1ksT0FBTyxFQUFRLElBQ2pDVyxFQUFLQyxTQUFXLEVBQVEsR0FJeEIsSUFBSXFnQyxFQUFlLENBQ2pCQyxVQUFXLEVBQVEsTUFLakI5TCxFQUFTLEVBQVEsSUFLakIveEIsRUFBUyxFQUFRLElBQWVBLE9BQ2hDdTZCLEVBQWdCN1IsT0FBTzhSLFlBQWMsYUFVekMsSUEySUlzRCxFQTNJQWpELEVBQWMsRUFBUSxJQUkxQixTQUFTa0QsS0FFVCxTQUFTcEcsRUFBY3ozQixFQUFTOHhCLEdBQzlCNWdCLEVBQVNBLEdBQVUsRUFBUSxJQUUzQmxSLEVBQVVBLEdBQVcsR0FPckIsSUFBSTY2QixFQUFXL0ksYUFBa0I1Z0IsRUFJakNqUixLQUFLeXlCLGFBQWUxeUIsRUFBUTB5QixXQUV4Qm1JLElBQVU1NkIsS0FBS3l5QixXQUFhenlCLEtBQUt5eUIsY0FBZ0IxeUIsRUFBUTg5QixvQkFLN0QsSUFBSS9MLEVBQU0veEIsRUFBUWlTLGNBQ2Q4ckIsRUFBYy85QixFQUFRZytCLHNCQUN0Qi9DLEVBQWFoN0IsS0FBS3l5QixXQUFhLEdBQUssTUFFbEJ6eUIsS0FBS2dTLGNBQXZCOGYsR0FBZSxJQUFSQSxFQUFnQ0EsRUFBYThJLElBQWFrRCxHQUErQixJQUFoQkEsR0FBeUNBLEVBQXNDOUMsRUFHbktoN0IsS0FBS2dTLGNBQWdCd1AsS0FBS3NQLE1BQU05d0IsS0FBS2dTLGVBR3JDaFMsS0FBS2crQixhQUFjLEVBR25CaCtCLEtBQUtpMkIsV0FBWSxFQUVqQmoyQixLQUFLMDNCLFFBQVMsRUFFZDEzQixLQUFLMlIsT0FBUSxFQUViM1IsS0FBSzIzQixVQUFXLEVBR2hCMzNCLEtBQUtrUyxXQUFZLEVBS2pCLElBQUkwbEIsR0FBcUMsSUFBMUI3M0IsRUFBUTgzQixjQUN2QjczQixLQUFLNjNCLGVBQWlCRCxFQUt0QjUzQixLQUFLMHlCLGdCQUFrQjN5QixFQUFRMnlCLGlCQUFtQixPQUtsRDF5QixLQUFLekIsT0FBUyxFQUdkeUIsS0FBSzgzQixTQUFVLEVBR2Y5M0IsS0FBS2krQixPQUFTLEVBTWRqK0IsS0FBS3F5QixNQUFPLEVBS1pyeUIsS0FBSyszQixrQkFBbUIsRUFHeEIvM0IsS0FBS2c0QixRQUFVLFNBQVU3RSxJQTRSM0IsU0FBaUJ0QixFQUFRc0IsR0FDdkIsSUFBSUgsRUFBUW5CLEVBQU9uZ0IsZUFDZjJnQixFQUFPVyxFQUFNWCxLQUNiaGdCLEVBQUsyZ0IsRUFBTWlGLFFBSWYsR0FkRixTQUE0QmpGLEdBQzFCQSxFQUFNOEUsU0FBVSxFQUNoQjlFLEVBQU1pRixRQUFVLEtBQ2hCakYsRUFBTXowQixRQUFVeTBCLEVBQU1rRixTQUN0QmxGLEVBQU1rRixTQUFXLEVBUWpCQyxDQUFtQm5GLEdBRWZHLEdBdENOLFNBQXNCdEIsRUFBUW1CLEVBQU9YLEVBQU1jLEVBQUk5Z0IsS0FDM0MyZ0IsRUFBTW1LLFVBRUo5SyxHQUdGdmhCLEVBQUljLFNBQVNTLEVBQUk4Z0IsR0FHakJyaUIsRUFBSWMsU0FBU2luQixFQUFhaEgsRUFBUW1CLEdBQ2xDbkIsRUFBT25nQixlQUFlMG1CLGNBQWUsRUFDckN2RyxFQUFPd0IsS0FBSyxRQUFTRixLQUlyQjlnQixFQUFHOGdCLEdBQ0h0QixFQUFPbmdCLGVBQWUwbUIsY0FBZSxFQUNyQ3ZHLEVBQU93QixLQUFLLFFBQVNGLEdBR3JCMEYsRUFBWWhILEVBQVFtQixJQWtCZHFGLENBQWF4RyxFQUFRbUIsRUFBT1gsRUFBTWMsRUFBSTlnQixPQUFTLENBRXJELElBQUlzbEIsRUFBV1csRUFBV3RGLEdBRXJCMkUsR0FBYTNFLEVBQU1pTCxRQUFXakwsRUFBTStFLG1CQUFvQi9FLEVBQU1rTCxpQkFDakV6RixFQUFZNUcsRUFBUW1CLEdBR2xCWCxFQUVGaUwsRUFBVzVFLEVBQVk3RyxFQUFRbUIsRUFBTzJFLEVBQVV0bEIsR0FHaERxbUIsRUFBVzdHLEVBQVFtQixFQUFPMkUsRUFBVXRsQixJQS9TdEMybEIsQ0FBUW5HLEVBQVFzQixJQUlsQm56QixLQUFLaTRCLFFBQVUsS0FHZmo0QixLQUFLazRCLFNBQVcsRUFFaEJsNEIsS0FBS2srQixnQkFBa0IsS0FDdkJsK0IsS0FBS20rQixvQkFBc0IsS0FJM0JuK0IsS0FBS205QixVQUFZLEVBSWpCbjlCLEtBQUtvK0IsYUFBYyxFQUduQnArQixLQUFLbzRCLGNBQWUsRUFHcEJwNEIsS0FBS3ErQixxQkFBdUIsRUFJNUJyK0IsS0FBS285QixtQkFBcUIsSUFBSUosRUFBY2g5QixNQTBDOUMsU0FBU21SLEVBQVNwUixHQVVoQixHQVRBa1IsRUFBU0EsR0FBVSxFQUFRLE1BU3RCMHNCLEVBQWdCdGlDLEtBQUs4VixFQUFVblIsT0FBV0EsZ0JBQWdCaVIsR0FDN0QsT0FBTyxJQUFJRSxFQUFTcFIsR0FHdEJDLEtBQUswUixlQUFpQixJQUFJOGxCLEVBQWN6M0IsRUFBU0MsTUFHakRBLEtBQUtzUixVQUFXLEVBRVp2UixJQUMyQixtQkFBbEJBLEVBQVEwekIsUUFBc0J6ekIsS0FBSzI0QixPQUFTNTRCLEVBQVEwekIsT0FFakMsbUJBQW5CMXpCLEVBQVF1K0IsU0FBdUJ0K0IsS0FBS3UrQixRQUFVeCtCLEVBQVF1K0IsUUFFbEMsbUJBQXBCditCLEVBQVFtN0IsVUFBd0JsN0IsS0FBS21TLFNBQVdwUyxFQUFRbTdCLFNBRXRDLG1CQUFsQm43QixFQUFReStCLFFBQXNCeCtCLEtBQUt5K0IsT0FBUzErQixFQUFReStCLFFBR2pFNU0sRUFBT3YyQixLQUFLMkUsTUFnSmQsU0FBU3c0QixFQUFRM0csRUFBUW1CLEVBQU9zTCxFQUFRejBCLEVBQUtvcEIsRUFBT25XLEVBQVV6SyxHQUM1RDJnQixFQUFNa0YsU0FBV3J1QixFQUNqQm1wQixFQUFNaUYsUUFBVTVsQixFQUNoQjJnQixFQUFNOEUsU0FBVSxFQUNoQjlFLEVBQU1YLE1BQU8sRUFDVGlNLEVBQVF6TSxFQUFPME0sUUFBUXRMLEVBQU9ELEVBQU1nRixTQUFjbkcsRUFBTzhHLE9BQU8xRixFQUFPblcsRUFBVWtXLEVBQU1nRixTQUMzRmhGLEVBQU1YLE1BQU8sRUEyRGYsU0FBU3FHLEVBQVc3RyxFQUFRbUIsRUFBTzJFLEVBQVV0bEIsR0FDdENzbEIsR0FTUCxTQUFzQjlGLEVBQVFtQixHQUNQLElBQWpCQSxFQUFNejBCLFFBQWdCeTBCLEVBQU1pRCxZQUM5QmpELEVBQU1pRCxXQUFZLEVBQ2xCcEUsRUFBT3dCLEtBQUssVUFaQ3VGLENBQWEvRyxFQUFRbUIsR0FDcENBLEVBQU1tSyxZQUNOOXFCLElBQ0F3bUIsRUFBWWhILEVBQVFtQixHQWN0QixTQUFTeUYsRUFBWTVHLEVBQVFtQixHQUMzQkEsRUFBTStFLGtCQUFtQixFQUN6QixJQUFJUSxFQUFRdkYsRUFBTWtMLGdCQUVsQixHQUFJck0sRUFBTzBNLFNBQVdoRyxHQUFTQSxFQUFNaHJCLEtBQU0sQ0FFekMsSUFBSXBTLEVBQUk2M0IsRUFBTXFMLHFCQUNWbGlCLEVBQVMsSUFBSXRkLE1BQU0xRCxHQUNuQnVqQyxFQUFTMUwsRUFBTW9LLG1CQUNuQnNCLEVBQU9uRyxNQUFRQSxFQUlmLElBRkEsSUFBSTVSLEVBQVEsRUFDUmdZLEdBQWEsRUFDVnBHLEdBQ0xwYyxFQUFPd0ssR0FBUzRSLEVBQ1hBLEVBQU1xRyxRQUFPRCxHQUFhLEdBQy9CcEcsRUFBUUEsRUFBTWhyQixLQUNkb1osR0FBUyxFQUVYeEssRUFBT3dpQixXQUFhQSxFQUVwQm5HLEVBQVEzRyxFQUFRbUIsR0FBTyxFQUFNQSxFQUFNejBCLE9BQVE0ZCxFQUFRLEdBQUl1aUIsRUFBT3pCLFFBSTlEakssRUFBTW1LLFlBQ05uSyxFQUFNbUwsb0JBQXNCLEtBQ3hCTyxFQUFPbnhCLE1BQ1R5bEIsRUFBTW9LLG1CQUFxQnNCLEVBQU9ueEIsS0FDbENteEIsRUFBT254QixLQUFPLE1BRWR5bEIsRUFBTW9LLG1CQUFxQixJQUFJSixFQUFjaEssR0FFL0NBLEVBQU1xTCxxQkFBdUIsTUFDeEIsQ0FFTCxLQUFPOUYsR0FBTyxDQUNaLElBQUl0RixFQUFRc0YsRUFBTXRGLE1BQ2RuVyxFQUFXeWIsRUFBTXpiLFNBQ2pCekssRUFBS2ttQixFQUFNaGEsU0FVZixHQVBBaWEsRUFBUTNHLEVBQVFtQixHQUFPLEVBRmJBLEVBQU1QLFdBQWEsRUFBSVEsRUFBTTEwQixPQUVKMDBCLEVBQU9uVyxFQUFVekssR0FDcERrbUIsRUFBUUEsRUFBTWhyQixLQUNkeWxCLEVBQU1xTCx1QkFLRnJMLEVBQU04RSxRQUNSLE1BSVUsT0FBVlMsSUFBZ0J2RixFQUFNbUwsb0JBQXNCLE1BR2xEbkwsRUFBTWtMLGdCQUFrQjNGLEVBQ3hCdkYsRUFBTStFLGtCQUFtQixFQWlDM0IsU0FBU08sRUFBV3RGLEdBQ2xCLE9BQU9BLEVBQU0wRSxRQUEyQixJQUFqQjFFLEVBQU16MEIsUUFBMEMsT0FBMUJ5MEIsRUFBTWtMLGtCQUE2QmxMLEVBQU0yRSxXQUFhM0UsRUFBTThFLFFBRTNHLFNBQVMrRyxFQUFVaE4sRUFBUW1CLEdBQ3pCbkIsRUFBTzRNLFFBQU8sU0FBVXJzQixHQUN0QjRnQixFQUFNbUssWUFDRi9xQixHQUNGeWYsRUFBT3dCLEtBQUssUUFBU2poQixHQUV2QjRnQixFQUFNb0wsYUFBYyxFQUNwQnZNLEVBQU93QixLQUFLLGFBQ1p3RixFQUFZaEgsRUFBUW1CLE1BZ0J4QixTQUFTNkYsRUFBWWhILEVBQVFtQixHQUMzQixJQUFJOEYsRUFBT1IsRUFBV3RGLEdBUXRCLE9BUEk4RixLQWZOLFNBQW1CakgsRUFBUW1CLEdBQ3BCQSxFQUFNb0wsYUFBZ0JwTCxFQUFNZ0wsY0FDRixtQkFBbEJuTSxFQUFPNE0sUUFDaEJ6TCxFQUFNbUssWUFDTm5LLEVBQU1nTCxhQUFjLEVBQ3BCbHRCLEVBQUljLFNBQVNpdEIsRUFBV2hOLEVBQVFtQixLQUVoQ0EsRUFBTW9MLGFBQWMsRUFDcEJ2TSxFQUFPd0IsS0FBSyxlQVFkeUwsQ0FBVWpOLEVBQVFtQixHQUNNLElBQXBCQSxFQUFNbUssWUFDUm5LLEVBQU0yRSxVQUFXLEVBQ2pCOUYsRUFBT3dCLEtBQUssWUFHVHlGLEVBemhCVDM3QixFQUFLQyxTQUFTK1QsRUFBVXlnQixHQW1IeEI0RixFQUFjMTZCLFVBQVVpaUMsVUFBWSxXQUdsQyxJQUZBLElBQUl6M0IsRUFBVXRILEtBQUtrK0IsZ0JBQ2ZjLEVBQU0sR0FDSDEzQixHQUNMMDNCLEVBQUkzOEIsS0FBS2lGLEdBQ1RBLEVBQVVBLEVBQVFpRyxLQUVwQixPQUFPeXhCLEdBR1QsV0FDRSxJQUNFcGpDLE9BQU9DLGVBQWUyN0IsRUFBYzE2QixVQUFXLFNBQVUsQ0FDdkRmLElBQUswaEMsRUFBYUMsV0FBVSxXQUMxQixPQUFPMTlCLEtBQUsrK0IsY0FDWCw2RUFBbUYsYUFFeEYsTUFBT0UsS0FQWCxHQWFzQixtQkFBWGhqQyxRQUF5QkEsT0FBT2lqQyxhQUFpRSxtQkFBM0Noa0IsU0FBU3BlLFVBQVViLE9BQU9pakMsY0FDekZ2QixFQUFrQnppQixTQUFTcGUsVUFBVWIsT0FBT2lqQyxhQUM1Q3RqQyxPQUFPQyxlQUFlc1YsRUFBVWxWLE9BQU9pakMsWUFBYSxDQUNsRC9pQyxNQUFPLFNBQVVTLEdBQ2YsUUFBSStnQyxFQUFnQnRpQyxLQUFLMkUsS0FBTXBELElBQzNCb0QsT0FBU21SLElBRU52VSxHQUFVQSxFQUFPOFUsMEJBQTBCOGxCLE9BSXREbUcsRUFBa0IsU0FBVS9nQyxHQUMxQixPQUFPQSxhQUFrQm9ELE1BcUM3Qm1SLEVBQVNyVSxVQUFVMjNCLEtBQU8sV0FDeEJ6MEIsS0FBS3F6QixLQUFLLFFBQVMsSUFBSTV6QixNQUFNLCtCQThCL0IwUixFQUFTclUsVUFBVTIyQixNQUFRLFNBQVVSLEVBQU9uVyxFQUFVekssR0FDcEQsSUFuT3FCdkUsRUFtT2pCa2xCLEVBQVFoekIsS0FBSzBSLGVBQ2J4SyxHQUFNLEVBQ04wM0IsR0FBUzVMLEVBQU1QLGFBck9FM2tCLEVBcU8wQm1sQixFQXBPeENwekIsRUFBT0QsU0FBU2tPLElBQVFBLGFBQWVzc0IsR0F3UDlDLE9BbEJJd0UsSUFBVS8rQixFQUFPRCxTQUFTcXpCLEtBQzVCQSxFQTNPSixTQUE2QkEsR0FDM0IsT0FBT3B6QixFQUFPMmMsS0FBS3lXLEdBME9Ub0ksQ0FBb0JwSSxJQUdOLG1CQUFiblcsSUFDVHpLLEVBQUt5SyxFQUNMQSxFQUFXLE1BR1Q4aEIsRUFBTzloQixFQUFXLFNBQW1CQSxJQUFVQSxFQUFXa1csRUFBTU4saUJBRWxELG1CQUFQcmdCLElBQW1CQSxFQUFLdXJCLEdBRS9CNUssRUFBTXJoQixNQTdDWixTQUF1QmtnQixFQUFReGYsR0FDN0IsSUFBSThnQixFQUFLLElBQUkxekIsTUFBTSxtQkFFbkJveUIsRUFBT3dCLEtBQUssUUFBU0YsR0FDckJyaUIsRUFBSWMsU0FBU1MsRUFBSThnQixHQXlDQTRGLENBQWMvNEIsS0FBTXFTLElBQWF1c0IsR0FuQ3BELFNBQW9CL00sRUFBUW1CLEVBQU9DLEVBQU81Z0IsR0FDeEMsSUFBSTJtQixHQUFRLEVBQ1I3RixHQUFLLEVBWVQsT0FWYyxPQUFWRixFQUNGRSxFQUFLLElBQUlqWCxVQUFVLHVDQUNPLGlCQUFWK1csUUFBZ0NoeUIsSUFBVmd5QixHQUF3QkQsRUFBTVAsYUFDcEVVLEVBQUssSUFBSWpYLFVBQVUsb0NBRWpCaVgsSUFDRnRCLEVBQU93QixLQUFLLFFBQVNGLEdBQ3JCcmlCLEVBQUljLFNBQVNTLEVBQUk4Z0IsR0FDakI2RixHQUFRLEdBRUhBLEVBcUJvREMsQ0FBV2o1QixLQUFNZ3pCLEVBQU9DLEVBQU81Z0IsTUFDeEYyZ0IsRUFBTW1LLFlBQ05qMkIsRUFrREosU0FBdUIycUIsRUFBUW1CLEVBQU80TCxFQUFPM0wsRUFBT25XLEVBQVV6SyxHQUM1RCxJQUFLdXNCLEVBQU8sQ0FDVixJQUFJTyxFQXRCUixTQUFxQm5NLEVBQU9DLEVBQU9uVyxHQUM1QmtXLEVBQU1QLGFBQXNDLElBQXhCTyxFQUFNNkUsZUFBNEMsaUJBQVY1RSxJQUMvREEsRUFBUXB6QixFQUFPMmMsS0FBS3lXLEVBQU9uVyxJQUU3QixPQUFPbVcsRUFrQlVpRyxDQUFZbEcsRUFBT0MsRUFBT25XLEdBQ3JDbVcsSUFBVWtNLElBQ1pQLEdBQVEsRUFDUjloQixFQUFXLFNBQ1htVyxFQUFRa00sR0FHWixJQUFJdDFCLEVBQU1tcEIsRUFBTVAsV0FBYSxFQUFJUSxFQUFNMTBCLE9BRXZDeTBCLEVBQU16MEIsUUFBVXNMLEVBRWhCLElBQUkzQyxFQUFNOHJCLEVBQU16MEIsT0FBU3kwQixFQUFNaGhCLGNBRTFCOUssSUFBSzhyQixFQUFNaUQsV0FBWSxHQUU1QixHQUFJakQsRUFBTThFLFNBQVc5RSxFQUFNaUwsT0FBUSxDQUNqQyxJQUFJbUIsRUFBT3BNLEVBQU1tTCxvQkFDakJuTCxFQUFNbUwsb0JBQXNCLENBQzFCbEwsTUFBT0EsRUFDUG5XLFNBQVVBLEVBQ1Y4aEIsTUFBT0EsRUFDUHJnQixTQUFVbE0sRUFDVjlFLEtBQU0sTUFFSjZ4QixFQUNGQSxFQUFLN3hCLEtBQU95bEIsRUFBTW1MLG9CQUVsQm5MLEVBQU1rTCxnQkFBa0JsTCxFQUFNbUwsb0JBRWhDbkwsRUFBTXFMLHNCQUF3QixPQUU5QjdGLEVBQVEzRyxFQUFRbUIsR0FBTyxFQUFPbnBCLEVBQUtvcEIsRUFBT25XLEVBQVV6SyxHQUd0RCxPQUFPbkwsRUF0RkNpeUIsQ0FBY241QixLQUFNZ3pCLEVBQU80TCxFQUFPM0wsRUFBT25XLEVBQVV6SyxJQUdwRG5MLEdBR1RpSyxFQUFTclUsVUFBVXVpQyxLQUFPLFdBQ1pyL0IsS0FBSzBSLGVBRVh1c0IsVUFHUjlzQixFQUFTclUsVUFBVXdpQyxPQUFTLFdBQzFCLElBQUl0TSxFQUFRaHpCLEtBQUswUixlQUVic2hCLEVBQU1pTCxTQUNSakwsRUFBTWlMLFNBRURqTCxFQUFNOEUsU0FBWTlFLEVBQU1pTCxRQUFXakwsRUFBTTJFLFVBQWEzRSxFQUFNK0UsbUJBQW9CL0UsRUFBTWtMLGlCQUFpQnpGLEVBQVl6NEIsS0FBTWd6QixLQUlsSTdoQixFQUFTclUsVUFBVXlpQyxtQkFBcUIsU0FBNEJ6aUIsR0FHbEUsR0FEd0IsaUJBQWJBLElBQXVCQSxFQUFXQSxFQUFTNVAsaUJBQ2hELENBQUMsTUFBTyxPQUFRLFFBQVMsUUFBUyxTQUFVLFNBQVUsT0FBUSxRQUFTLFVBQVcsV0FBWSxPQUFPcEosU0FBU2daLEVBQVcsSUFBSTVQLGdCQUFrQixHQUFJLE1BQU0sSUFBSWdQLFVBQVUscUJBQXVCWSxHQUVwTSxPQURBOWMsS0FBSzBSLGVBQWVnaEIsZ0JBQWtCNVYsRUFDL0I5YyxNQVVUcEUsT0FBT0MsZUFBZXNWLEVBQVNyVSxVQUFXLHdCQUF5QixDQUlqRWhCLFlBQVksRUFDWkMsSUFBSyxXQUNILE9BQU9pRSxLQUFLMFIsZUFBZU0saUJBOEwvQmIsRUFBU3JVLFVBQVU2N0IsT0FBUyxTQUFVMUYsRUFBT25XLEVBQVV6SyxHQUNyREEsRUFBRyxJQUFJNVMsTUFBTSxpQ0FHZjBSLEVBQVNyVSxVQUFVeWhDLFFBQVUsS0FFN0JwdEIsRUFBU3JVLFVBQVVpVixJQUFNLFNBQVVraEIsRUFBT25XLEVBQVV6SyxHQUNsRCxJQUFJMmdCLEVBQVFoekIsS0FBSzBSLGVBRUksbUJBQVZ1aEIsR0FDVDVnQixFQUFLNGdCLEVBQ0xBLEVBQVEsS0FDUm5XLEVBQVcsTUFDa0IsbUJBQWJBLElBQ2hCekssRUFBS3lLLEVBQ0xBLEVBQVcsTUFHVG1XLFNBQXVDanpCLEtBQUt5ekIsTUFBTVIsRUFBT25XLEdBR3pEa1csRUFBTWlMLFNBQ1JqTCxFQUFNaUwsT0FBUyxFQUNmaitCLEtBQUtzL0IsVUFJRnRNLEVBQU0wRSxRQUFXMUUsRUFBTTJFLFVBMEM5QixTQUFxQjlGLEVBQVFtQixFQUFPM2dCLEdBQ2xDMmdCLEVBQU0wRSxRQUFTLEVBQ2ZtQixFQUFZaEgsRUFBUW1CLEdBQ2hCM2dCLElBQ0UyZ0IsRUFBTTJFLFNBQVU3bUIsRUFBSWMsU0FBU1MsR0FBU3dmLEVBQU9yZ0IsS0FBSyxTQUFVYSxJQUVsRTJnQixFQUFNcmhCLE9BQVEsRUFDZGtnQixFQUFPdmdCLFVBQVcsRUFqRG9COG5CLENBQVlwNUIsS0FBTWd6QixFQUFPM2dCLElBb0VqRXpXLE9BQU9DLGVBQWVzVixFQUFTclUsVUFBVyxZQUFhLENBQ3JEZixJQUFLLFdBQ0gsWUFBNEJrRixJQUF4QmpCLEtBQUswUixnQkFHRjFSLEtBQUswUixlQUFlUSxXQUU3QnJMLElBQUssU0FBVTFLLEdBR1I2RCxLQUFLMFIsaUJBTVYxUixLQUFLMFIsZUFBZVEsVUFBWS9WLE1BSXBDZ1YsRUFBU3JVLFVBQVVvK0IsUUFBVVIsRUFBWVEsUUFDekMvcEIsRUFBU3JVLFVBQVV5K0IsV0FBYWIsRUFBWWMsVUFDNUNycUIsRUFBU3JVLFVBQVVxVixTQUFXLFNBQVVDLEVBQUtDLEdBQzNDclMsS0FBSytSLE1BQ0xNLEVBQUdELEssNkJDcHBCTCxJQUFJdlMsRUFBUyxFQUFRLElBQWVBLE9BR2hDNjJCLEVBQWE3MkIsRUFBTzYyQixZQUFjLFNBQVU1WixHQUU5QyxRQURBQSxFQUFXLEdBQUtBLElBQ0lBLEVBQVM1UCxlQUMzQixJQUFLLE1BQU0sSUFBSyxPQUFPLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLE9BQU8sSUFBSyxRQUFRLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxNQUN4SSxPQUFPLEVBQ1QsUUFDRSxPQUFPLElBNENiLFNBQVN5a0IsRUFBYzdVLEdBRXJCLElBQUlpZixFQUNKLE9BRkEvN0IsS0FBSzhjLFNBWFAsU0FBMkJrWCxHQUN6QixJQUFJd0wsRUEvQk4sU0FBNEJ4TCxHQUMxQixJQUFLQSxFQUFLLE1BQU8sT0FFakIsSUFEQSxJQUFJeUwsSUFFRixPQUFRekwsR0FDTixJQUFLLE9BQ0wsSUFBSyxRQUNILE1BQU8sT0FDVCxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFdBQ0gsTUFBTyxVQUNULElBQUssU0FDTCxJQUFLLFNBQ0gsTUFBTyxTQUNULElBQUssU0FDTCxJQUFLLFFBQ0wsSUFBSyxNQUNILE9BQU9BLEVBQ1QsUUFDRSxHQUFJeUwsRUFBUyxPQUNiekwsR0FBTyxHQUFLQSxHQUFLOW1CLGNBQ2pCdXlCLEdBQVUsR0FRTEMsQ0FBbUIxTCxHQUM5QixHQUFvQixpQkFBVHdMLElBQXNCMy9CLEVBQU82MkIsYUFBZUEsSUFBZUEsRUFBVzFDLElBQU8sTUFBTSxJQUFJdjBCLE1BQU0scUJBQXVCdTBCLEdBQy9ILE9BQU93TCxHQUFReEwsRUFRQzJMLENBQWtCN2lCLEdBRTFCOWMsS0FBSzhjLFVBQ1gsSUFBSyxVQUNIOWMsS0FBSzhaLEtBQU84bEIsRUFDWjUvQixLQUFLK1IsSUFBTTh0QixFQUNYOUQsRUFBSyxFQUNMLE1BQ0YsSUFBSyxPQUNILzdCLEtBQUs4L0IsU0FBV0MsRUFDaEJoRSxFQUFLLEVBQ0wsTUFDRixJQUFLLFNBQ0gvN0IsS0FBSzhaLEtBQU9rbUIsRUFDWmhnQyxLQUFLK1IsSUFBTWt1QixFQUNYbEUsRUFBSyxFQUNMLE1BQ0YsUUFHRSxPQUZBLzdCLEtBQUt5ekIsTUFBUXlNLE9BQ2JsZ0MsS0FBSytSLElBQU1vdUIsR0FHZm5nQyxLQUFLb2dDLFNBQVcsRUFDaEJwZ0MsS0FBS3FnQyxVQUFZLEVBQ2pCcmdDLEtBQUtzZ0MsU0FBV3pnQyxFQUFPNmMsWUFBWXFmLEdBb0NyQyxTQUFTd0UsRUFBY0MsR0FDckIsT0FBSUEsR0FBUSxJQUFhLEVBQVdBLEdBQVEsR0FBTSxFQUFhLEVBQVdBLEdBQVEsR0FBTSxHQUFhLEVBQVdBLEdBQVEsR0FBTSxHQUFhLEVBQ3BJQSxHQUFRLEdBQU0sR0FBUSxHQUFLLEVBMkRwQyxTQUFTVCxFQUFhaGpCLEdBQ3BCLElBQUkvZixFQUFJZ0QsS0FBS3FnQyxVQUFZcmdDLEtBQUtvZ0MsU0FDMUJwa0MsRUF0Qk4sU0FBNkI4VixFQUFNaUwsRUFBSy9mLEdBQ3RDLEdBQXdCLE1BQVYsSUFBVCtmLEVBQUksSUFFUCxPQURBakwsRUFBS3N1QixTQUFXLEVBQ1QsSUFFVCxHQUFJdHVCLEVBQUtzdUIsU0FBVyxHQUFLcmpCLEVBQUl4ZSxPQUFTLEVBQUcsQ0FDdkMsR0FBd0IsTUFBVixJQUFUd2UsRUFBSSxJQUVQLE9BREFqTCxFQUFLc3VCLFNBQVcsRUFDVCxJQUVULEdBQUl0dUIsRUFBS3N1QixTQUFXLEdBQUtyakIsRUFBSXhlLE9BQVMsR0FDWixNQUFWLElBQVR3ZSxFQUFJLElBRVAsT0FEQWpMLEVBQUtzdUIsU0FBVyxFQUNULEtBU0xLLENBQW9CemdDLEtBQU0rYyxHQUNsQyxZQUFVOWIsSUFBTmpGLEVBQXdCQSxFQUN4QmdFLEtBQUtvZ0MsVUFBWXJqQixFQUFJeGUsUUFDdkJ3ZSxFQUFJa1ksS0FBS2oxQixLQUFLc2dDLFNBQVV0akMsRUFBRyxFQUFHZ0QsS0FBS29nQyxVQUM1QnBnQyxLQUFLc2dDLFNBQVM1aEMsU0FBU3NCLEtBQUs4YyxTQUFVLEVBQUc5YyxLQUFLcWdDLGFBRXZEdGpCLEVBQUlrWSxLQUFLajFCLEtBQUtzZ0MsU0FBVXRqQyxFQUFHLEVBQUcrZixFQUFJeGUsYUFDbEN5QixLQUFLb2dDLFVBQVlyakIsRUFBSXhlLFNBMkJ2QixTQUFTcWhDLEVBQVU3aUIsRUFBSzdoQixHQUN0QixJQUFLNmhCLEVBQUl4ZSxPQUFTckQsR0FBSyxHQUFNLEVBQUcsQ0FDOUIsSUFBSWMsRUFBSStnQixFQUFJcmUsU0FBUyxVQUFXeEQsR0FDaEMsR0FBSWMsRUFBRyxDQUNMLElBQUlULEVBQUlTLEVBQUUyRyxXQUFXM0csRUFBRXVDLE9BQVMsR0FDaEMsR0FBSWhELEdBQUssT0FBVUEsR0FBSyxNQUt0QixPQUpBeUUsS0FBS29nQyxTQUFXLEVBQ2hCcGdDLEtBQUtxZ0MsVUFBWSxFQUNqQnJnQyxLQUFLc2dDLFNBQVMsR0FBS3ZqQixFQUFJQSxFQUFJeGUsT0FBUyxHQUNwQ3lCLEtBQUtzZ0MsU0FBUyxHQUFLdmpCLEVBQUlBLEVBQUl4ZSxPQUFTLEdBQzdCdkMsRUFBRTRXLE1BQU0sR0FBSSxHQUd2QixPQUFPNVcsRUFLVCxPQUhBZ0UsS0FBS29nQyxTQUFXLEVBQ2hCcGdDLEtBQUtxZ0MsVUFBWSxFQUNqQnJnQyxLQUFLc2dDLFNBQVMsR0FBS3ZqQixFQUFJQSxFQUFJeGUsT0FBUyxHQUM3QndlLEVBQUlyZSxTQUFTLFVBQVd4RCxFQUFHNmhCLEVBQUl4ZSxPQUFTLEdBS2pELFNBQVNzaEMsRUFBUzlpQixHQUNoQixJQUFJL2dCLEVBQUkrZ0IsR0FBT0EsRUFBSXhlLE9BQVN5QixLQUFLeXpCLE1BQU0xVyxHQUFPLEdBQzlDLEdBQUkvYyxLQUFLb2dDLFNBQVUsQ0FDakIsSUFBSXJ1QixFQUFNL1IsS0FBS3FnQyxVQUFZcmdDLEtBQUtvZ0MsU0FDaEMsT0FBT3BrQyxFQUFJZ0UsS0FBS3NnQyxTQUFTNWhDLFNBQVMsVUFBVyxFQUFHcVQsR0FFbEQsT0FBTy9WLEVBR1QsU0FBU2drQyxFQUFXampCLEVBQUs3aEIsR0FDdkIsSUFBSXlCLEdBQUtvZ0IsRUFBSXhlLE9BQVNyRCxHQUFLLEVBQzNCLE9BQVUsSUFBTnlCLEVBQWdCb2dCLEVBQUlyZSxTQUFTLFNBQVV4RCxJQUMzQzhFLEtBQUtvZ0MsU0FBVyxFQUFJempDLEVBQ3BCcUQsS0FBS3FnQyxVQUFZLEVBQ1AsSUFBTjFqQyxFQUNGcUQsS0FBS3NnQyxTQUFTLEdBQUt2akIsRUFBSUEsRUFBSXhlLE9BQVMsSUFFcEN5QixLQUFLc2dDLFNBQVMsR0FBS3ZqQixFQUFJQSxFQUFJeGUsT0FBUyxHQUNwQ3lCLEtBQUtzZ0MsU0FBUyxHQUFLdmpCLEVBQUlBLEVBQUl4ZSxPQUFTLElBRS9Cd2UsRUFBSXJlLFNBQVMsU0FBVXhELEVBQUc2aEIsRUFBSXhlLE9BQVM1QixJQUdoRCxTQUFTc2pDLEVBQVVsakIsR0FDakIsSUFBSS9nQixFQUFJK2dCLEdBQU9BLEVBQUl4ZSxPQUFTeUIsS0FBS3l6QixNQUFNMVcsR0FBTyxHQUM5QyxPQUFJL2MsS0FBS29nQyxTQUFpQnBrQyxFQUFJZ0UsS0FBS3NnQyxTQUFTNWhDLFNBQVMsU0FBVSxFQUFHLEVBQUlzQixLQUFLb2dDLFVBQ3BFcGtDLEVBSVQsU0FBU2trQyxFQUFZbmpCLEdBQ25CLE9BQU9BLEVBQUlyZSxTQUFTc0IsS0FBSzhjLFVBRzNCLFNBQVNxakIsRUFBVXBqQixHQUNqQixPQUFPQSxHQUFPQSxFQUFJeGUsT0FBU3lCLEtBQUt5ekIsTUFBTTFXLEdBQU8sR0F6Ti9DL2hCLEVBQVEyMkIsY0FBZ0JBLEVBNkJ4QkEsRUFBYzcwQixVQUFVMjJCLE1BQVEsU0FBVTFXLEdBQ3hDLEdBQW1CLElBQWZBLEVBQUl4ZSxPQUFjLE1BQU8sR0FDN0IsSUFBSXZDLEVBQ0FkLEVBQ0osR0FBSThFLEtBQUtvZ0MsU0FBVSxDQUVqQixRQUFVbi9CLEtBRFZqRixFQUFJZ0UsS0FBSzgvQixTQUFTL2lCLElBQ0csTUFBTyxHQUM1QjdoQixFQUFJOEUsS0FBS29nQyxTQUNUcGdDLEtBQUtvZ0MsU0FBVyxPQUVoQmxsQyxFQUFJLEVBRU4sT0FBSUEsRUFBSTZoQixFQUFJeGUsT0FBZXZDLEVBQUlBLEVBQUlnRSxLQUFLOFosS0FBS2lELEVBQUs3aEIsR0FBSzhFLEtBQUs4WixLQUFLaUQsRUFBSzdoQixHQUMvRGMsR0FBSyxJQUdkMjFCLEVBQWM3MEIsVUFBVWlWLElBd0d4QixTQUFpQmdMLEdBQ2YsSUFBSS9nQixFQUFJK2dCLEdBQU9BLEVBQUl4ZSxPQUFTeUIsS0FBS3l6QixNQUFNMVcsR0FBTyxHQUM5QyxPQUFJL2MsS0FBS29nQyxTQUFpQnBrQyxFQUFJLElBQ3ZCQSxHQXhHVDIxQixFQUFjNzBCLFVBQVVnZCxLQTBGeEIsU0FBa0JpRCxFQUFLN2hCLEdBQ3JCLElBQUl3bEMsRUFyRU4sU0FBNkI1dUIsRUFBTWlMLEVBQUs3aEIsR0FDdEMsSUFBSWdZLEVBQUk2SixFQUFJeGUsT0FBUyxFQUNyQixHQUFJMlUsRUFBSWhZLEVBQUcsT0FBTyxFQUNsQixJQUFJNmdDLEVBQUt3RSxFQUFjeGpCLEVBQUk3SixJQUMzQixHQUFJNm9CLEdBQU0sRUFFUixPQURJQSxFQUFLLElBQUdqcUIsRUFBS3N1QixTQUFXckUsRUFBSyxHQUMxQkEsRUFFVCxLQUFNN29CLEVBQUloWSxJQUFhLElBQVI2Z0MsRUFBVyxPQUFPLEVBRWpDLElBREFBLEVBQUt3RSxFQUFjeGpCLEVBQUk3SixNQUNiLEVBRVIsT0FESTZvQixFQUFLLElBQUdqcUIsRUFBS3N1QixTQUFXckUsRUFBSyxHQUMxQkEsRUFFVCxLQUFNN29CLEVBQUloWSxJQUFhLElBQVI2Z0MsRUFBVyxPQUFPLEVBRWpDLElBREFBLEVBQUt3RSxFQUFjeGpCLEVBQUk3SixNQUNiLEVBSVIsT0FISTZvQixFQUFLLElBQ0ksSUFBUEEsRUFBVUEsRUFBSyxFQUFPanFCLEVBQUtzdUIsU0FBV3JFLEVBQUssR0FFMUNBLEVBRVQsT0FBTyxFQStDSzRFLENBQW9CM2dDLEtBQU0rYyxFQUFLN2hCLEdBQzNDLElBQUs4RSxLQUFLb2dDLFNBQVUsT0FBT3JqQixFQUFJcmUsU0FBUyxPQUFReEQsR0FDaEQ4RSxLQUFLcWdDLFVBQVlLLEVBQ2pCLElBQUkzdUIsRUFBTWdMLEVBQUl4ZSxRQUFVbWlDLEVBQVExZ0MsS0FBS29nQyxVQUVyQyxPQURBcmpCLEVBQUlrWSxLQUFLajFCLEtBQUtzZ0MsU0FBVSxFQUFHdnVCLEdBQ3BCZ0wsRUFBSXJlLFNBQVMsT0FBUXhELEVBQUc2VyxJQTdGakM0ZixFQUFjNzBCLFVBQVVnakMsU0FBVyxTQUFVL2lCLEdBQzNDLEdBQUkvYyxLQUFLb2dDLFVBQVlyakIsRUFBSXhlLE9BRXZCLE9BREF3ZSxFQUFJa1ksS0FBS2oxQixLQUFLc2dDLFNBQVV0Z0MsS0FBS3FnQyxVQUFZcmdDLEtBQUtvZ0MsU0FBVSxFQUFHcGdDLEtBQUtvZ0MsVUFDekRwZ0MsS0FBS3NnQyxTQUFTNWhDLFNBQVNzQixLQUFLOGMsU0FBVSxFQUFHOWMsS0FBS3FnQyxXQUV2RHRqQixFQUFJa1ksS0FBS2oxQixLQUFLc2dDLFNBQVV0Z0MsS0FBS3FnQyxVQUFZcmdDLEtBQUtvZ0MsU0FBVSxFQUFHcmpCLEVBQUl4ZSxRQUMvRHlCLEtBQUtvZ0MsVUFBWXJqQixFQUFJeGUsUyw2QkNyRXZCdEQsRUFBT0QsUUFBVXErQixFQUVqQixJQUFJcG9CLEVBQVMsRUFBUSxJQUdqQjlULEVBQU92QixPQUFPWSxPQUFPLEVBQVEsSUFNakMsU0FBUys4QixFQUFlcEcsRUFBSXFHLEdBQzFCLElBQUlwUixFQUFLcG9CLEtBQUt5NUIsZ0JBQ2RyUixFQUFHc1IsY0FBZSxFQUVsQixJQUFJcm5CLEVBQUsrVixFQUFHNlAsUUFFWixJQUFLNWxCLEVBQ0gsT0FBT3JTLEtBQUtxekIsS0FBSyxRQUFTLElBQUk1ekIsTUFBTSx5Q0FHdEMyb0IsRUFBR3VSLFdBQWEsS0FDaEJ2UixFQUFHNlAsUUFBVSxLQUVELE1BQVJ1QixHQUNGeDVCLEtBQUtxQyxLQUFLbTNCLEdBRVpubkIsRUFBRzhnQixHQUVILElBQUl5RyxFQUFLNTVCLEtBQUtpUyxlQUNkMm5CLEVBQUd6SCxTQUFVLEdBQ1R5SCxFQUFHdEgsY0FBZ0JzSCxFQUFHcjdCLE9BQVNxN0IsRUFBRzVuQixnQkFDcENoUyxLQUFLbzFCLE1BQU13RSxFQUFHNW5CLGVBSWxCLFNBQVNxbkIsRUFBVXQ1QixHQUNqQixLQUFNQyxnQkFBZ0JxNUIsR0FBWSxPQUFPLElBQUlBLEVBQVV0NUIsR0FFdkRrUixFQUFPNVYsS0FBSzJFLEtBQU1ELEdBRWxCQyxLQUFLeTVCLGdCQUFrQixDQUNyQkYsZUFBZ0JBLEVBQWU3OEIsS0FBS3NELE1BQ3BDNjVCLGVBQWUsRUFDZkgsY0FBYyxFQUNkekIsUUFBUyxLQUNUMEIsV0FBWSxLQUNaTyxjQUFlLE1BSWpCbDZCLEtBQUtpUyxlQUFlcWdCLGNBQWUsRUFLbkN0eUIsS0FBS2lTLGVBQWVvZ0IsTUFBTyxFQUV2QnR5QixJQUMrQixtQkFBdEJBLEVBQVFrVSxZQUEwQmpVLEtBQUtpNkIsV0FBYWw2QixFQUFRa1UsV0FFMUMsbUJBQWxCbFUsRUFBUStDLFFBQXNCOUMsS0FBSzg1QixPQUFTLzVCLEVBQVErQyxRQUlqRTlDLEtBQUswMEIsR0FBRyxZQUFhb0ssR0FHdkIsU0FBU0EsSUFDUCxJQUFJbEMsRUFBUTU4QixLQUVlLG1CQUFoQkEsS0FBSzg1QixPQUNkOTVCLEtBQUs4NUIsUUFBTyxTQUFVM0csRUFBSXFHLEdBQ3hCTyxFQUFLNkMsRUFBT3pKLEVBQUlxRyxNQUdsQk8sRUFBSy81QixLQUFNLEtBQU0sTUEyRHJCLFNBQVMrNUIsRUFBS2xJLEVBQVFzQixFQUFJcUcsR0FDeEIsR0FBSXJHLEVBQUksT0FBT3RCLEVBQU93QixLQUFLLFFBQVNGLEdBT3BDLEdBTFksTUFBUnFHLEdBQ0YzSCxFQUFPeHZCLEtBQUttM0IsR0FJVjNILEVBQU9uZ0IsZUFBZW5ULE9BQVEsTUFBTSxJQUFJa0IsTUFBTSw4Q0FFbEQsR0FBSW95QixFQUFPNEgsZ0JBQWdCQyxhQUFjLE1BQU0sSUFBSWo2QixNQUFNLGtEQUV6RCxPQUFPb3lCLEVBQU94dkIsS0FBSyxNQTdJckJsRixFQUFLQyxTQUFXLEVBQVEsR0FHeEJELEVBQUtDLFNBQVNpOEIsRUFBV3BvQixHQXVFekJvb0IsRUFBVXY4QixVQUFVdUYsS0FBTyxTQUFVNHdCLEVBQU9uVyxHQUUxQyxPQURBOWMsS0FBS3k1QixnQkFBZ0JJLGVBQWdCLEVBQzlCNW9CLEVBQU9uVSxVQUFVdUYsS0FBS2hILEtBQUsyRSxLQUFNaXpCLEVBQU9uVyxJQWFqRHVjLEVBQVV2OEIsVUFBVW05QixXQUFhLFNBQVVoSCxFQUFPblcsRUFBVXpLLEdBQzFELE1BQU0sSUFBSTVTLE1BQU0sb0NBR2xCNDVCLEVBQVV2OEIsVUFBVTY3QixPQUFTLFNBQVUxRixFQUFPblcsRUFBVXpLLEdBQ3RELElBQUkrVixFQUFLcG9CLEtBQUt5NUIsZ0JBSWQsR0FIQXJSLEVBQUc2UCxRQUFVNWxCLEVBQ2IrVixFQUFHdVIsV0FBYTFHLEVBQ2hCN0ssRUFBRzhSLGNBQWdCcGQsR0FDZHNMLEVBQUdzUixhQUFjLENBQ3BCLElBQUlFLEVBQUs1NUIsS0FBS2lTLGdCQUNWbVcsRUFBR3lSLGVBQWlCRCxFQUFHdEgsY0FBZ0JzSCxFQUFHcjdCLE9BQVNxN0IsRUFBRzVuQixnQkFBZWhTLEtBQUtvMUIsTUFBTXdFLEVBQUc1bkIsaUJBTzNGcW5CLEVBQVV2OEIsVUFBVXM0QixNQUFRLFNBQVV6NEIsR0FDcEMsSUFBSXlyQixFQUFLcG9CLEtBQUt5NUIsZ0JBRVEsT0FBbEJyUixFQUFHdVIsWUFBdUJ2UixFQUFHNlAsVUFBWTdQLEVBQUdzUixjQUM5Q3RSLEVBQUdzUixjQUFlLEVBQ2xCMTVCLEtBQUtpNkIsV0FBVzdSLEVBQUd1UixXQUFZdlIsRUFBRzhSLGNBQWU5UixFQUFHbVIsaUJBSXBEblIsRUFBR3lSLGVBQWdCLEdBSXZCUixFQUFVdjhCLFVBQVVxVixTQUFXLFNBQVVDLEVBQUtDLEdBQzVDLElBQUl1dUIsRUFBUzVnQyxLQUViaVIsRUFBT25VLFVBQVVxVixTQUFTOVcsS0FBSzJFLEtBQU1vUyxHQUFLLFNBQVV5dUIsR0FDbER4dUIsRUFBR3d1QixHQUNIRCxFQUFPdk4sS0FBSyxjLGdCQzdMaEIsSUFBSXlOLEVBQVksRUFBUSxJQUNwQjNqQyxFQUFPLEVBQVEsSUFDZjRqQyxFQUFXLEVBQVEsSUFBZUEsU0FDbENDLEVBQWMsRUFBUSxLQUFrQkEsWUFVNUMsU0FBU0MsRUFBbUI1c0IsR0FDckJBLElBQ0hBLEVBQVEsSUFFVnJVLEtBQUtraEMsTUFBUS9qQyxFQUFLaVgsT0FBT0MsRUFBTyxPQUFRLE1BQ3hDclUsS0FBS21oQyxZQUFjaGtDLEVBQUtpWCxPQUFPQyxFQUFPLGFBQWMsTUFDcERyVSxLQUFLb2hDLGdCQUFrQmprQyxFQUFLaVgsT0FBT0MsRUFBTyxrQkFBa0IsR0FDNURyVSxLQUFLcWhDLFNBQVcsSUFBSU4sRUFDcEIvZ0MsS0FBS3NoQyxPQUFTLElBQUlQLEVBQ2xCL2dDLEtBQUt1aEMsVUFBWSxJQUFJUCxFQUNyQmhoQyxLQUFLd2hDLGlCQUFtQixLQUcxQlAsRUFBbUJua0MsVUFBVTJrQyxTQUFXLEVBT3hDUixFQUFtQlMsY0FDakIsU0FBMENDLEdBQ3hDLElBQUkvcEIsRUFBYStwQixFQUFtQi9wQixXQUNoQ2dxQixFQUFZLElBQUlYLEVBQW1CLENBQ3JDWSxLQUFNRixFQUFtQkUsS0FDekJqcUIsV0FBWUEsSUEyQ2QsT0F6Q0ErcEIsRUFBbUJHLGFBQVksU0FBVUMsR0FDdkMsSUFBSUMsRUFBYSxDQUNmQyxVQUFXLENBQ1RyNkIsS0FBTW02QixFQUFRM3FCLGNBQ2R2UCxPQUFRazZCLEVBQVE1cUIsa0JBSUUsTUFBbEI0cUIsRUFBUXZqQyxTQUNWd2pDLEVBQVd4akMsT0FBU3VqQyxFQUFRdmpDLE9BQ1YsTUFBZG9aLElBQ0ZvcUIsRUFBV3hqQyxPQUFTckIsRUFBSzJZLFNBQVM4QixFQUFZb3FCLEVBQVd4akMsU0FHM0R3akMsRUFBV0UsU0FBVyxDQUNwQnQ2QixLQUFNbTZCLEVBQVE5cUIsYUFDZHBQLE9BQVFrNkIsRUFBUTdxQixnQkFHRSxNQUFoQjZxQixFQUFRdG1DLE9BQ1Z1bUMsRUFBV3ZtQyxLQUFPc21DLEVBQVF0bUMsT0FJOUJtbUMsRUFBVU8sV0FBV0gsTUFFdkJMLEVBQW1CUyxRQUFRci9CLFNBQVEsU0FBVXMvQixHQUMzQyxJQUFJQyxFQUFpQkQsRUFDRixPQUFmenFCLElBQ0YwcUIsRUFBaUJubEMsRUFBSzJZLFNBQVM4QixFQUFZeXFCLElBR3hDVCxFQUFVUCxTQUFTcDZCLElBQUlxN0IsSUFDMUJWLEVBQVVQLFNBQVNrQixJQUFJRCxHQUd6QixJQUFJNzZCLEVBQVVrNkIsRUFBbUJhLGlCQUFpQkgsR0FDbkMsTUFBWDU2QixHQUNGbTZCLEVBQVVhLGlCQUFpQkosRUFBWTU2QixNQUdwQ202QixHQWFYWCxFQUFtQm5rQyxVQUFVcWxDLFdBQzNCLFNBQXVDOXRCLEdBQ3JDLElBQUk0dEIsRUFBWTlrQyxFQUFLaVgsT0FBT0MsRUFBTyxhQUMvQjZ0QixFQUFXL2tDLEVBQUtpWCxPQUFPQyxFQUFPLFdBQVksTUFDMUM3VixFQUFTckIsRUFBS2lYLE9BQU9DLEVBQU8sU0FBVSxNQUN0QzVZLEVBQU8wQixFQUFLaVgsT0FBT0MsRUFBTyxPQUFRLE1BRWpDclUsS0FBS29oQyxpQkFDUnBoQyxLQUFLMGlDLGlCQUFpQlQsRUFBV0MsRUFBVTFqQyxFQUFRL0MsR0FHdkMsTUFBVitDLElBQ0ZBLEVBQVNiLE9BQU9hLEdBQ1h3QixLQUFLcWhDLFNBQVNwNkIsSUFBSXpJLElBQ3JCd0IsS0FBS3FoQyxTQUFTa0IsSUFBSS9qQyxJQUlWLE1BQVIvQyxJQUNGQSxFQUFPa0MsT0FBT2xDLEdBQ1R1RSxLQUFLc2hDLE9BQU9yNkIsSUFBSXhMLElBQ25CdUUsS0FBS3NoQyxPQUFPaUIsSUFBSTltQyxJQUlwQnVFLEtBQUt1aEMsVUFBVWdCLElBQUksQ0FDakJuckIsY0FBZTZxQixFQUFVcjZCLEtBQ3pCdVAsZ0JBQWlCOHFCLEVBQVVwNkIsT0FDM0JvUCxhQUEwQixNQUFaaXJCLEdBQW9CQSxFQUFTdDZCLEtBQzNDc1AsZUFBNEIsTUFBWmdyQixHQUFvQkEsRUFBU3I2QixPQUM3Q3JKLE9BQVFBLEVBQ1IvQyxLQUFNQSxLQU9ad2xDLEVBQW1CbmtDLFVBQVUybEMsaUJBQzNCLFNBQTZDRSxFQUFhQyxHQUN4RCxJQUFJcGtDLEVBQVNta0MsRUFDVyxNQUFwQjNpQyxLQUFLbWhDLGNBQ1AzaUMsRUFBU3JCLEVBQUsyWSxTQUFTOVYsS0FBS21oQyxZQUFhM2lDLElBR3JCLE1BQWxCb2tDLEdBR0c1aUMsS0FBS3doQyxtQkFDUnhoQyxLQUFLd2hDLGlCQUFtQjVsQyxPQUFPWSxPQUFPLE9BRXhDd0QsS0FBS3doQyxpQkFBaUJya0MsRUFBS3NaLFlBQVlqWSxJQUFXb2tDLEdBQ3pDNWlDLEtBQUt3aEMsMEJBR1B4aEMsS0FBS3doQyxpQkFBaUJya0MsRUFBS3NaLFlBQVlqWSxJQUNJLElBQTlDNUMsT0FBT29WLEtBQUtoUixLQUFLd2hDLGtCQUFrQmpqQyxTQUNyQ3lCLEtBQUt3aEMsaUJBQW1CLFFBcUJoQ1AsRUFBbUJua0MsVUFBVStsQyxlQUMzQixTQUEyQ2xCLEVBQW9CZ0IsRUFBYUcsR0FDMUUsSUFBSVQsRUFBYU0sRUFFakIsR0FBbUIsTUFBZkEsRUFBcUIsQ0FDdkIsR0FBK0IsTUFBM0JoQixFQUFtQkUsS0FDckIsTUFBTSxJQUFJcGlDLE1BQ1IsaUpBSUo0aUMsRUFBYVYsRUFBbUJFLEtBRWxDLElBQUlqcUIsRUFBYTVYLEtBQUttaEMsWUFFSixNQUFkdnBCLElBQ0Z5cUIsRUFBYWxsQyxFQUFLMlksU0FBUzhCLEVBQVl5cUIsSUFJekMsSUFBSVUsRUFBYSxJQUFJaEMsRUFDakJpQyxFQUFXLElBQUlqQyxFQUduQi9nQyxLQUFLdWhDLFVBQVUwQixpQkFBZ0IsU0FBVWxCLEdBQ3ZDLEdBQUlBLEVBQVF2akMsU0FBVzZqQyxHQUFzQyxNQUF4Qk4sRUFBUTlxQixhQUFzQixDQUVqRSxJQUFJaXJCLEVBQVdQLEVBQW1CdUIsb0JBQW9CLENBQ3BEdDdCLEtBQU1tNkIsRUFBUTlxQixhQUNkcFAsT0FBUWs2QixFQUFRN3FCLGlCQUVLLE1BQW5CZ3JCLEVBQVMxakMsU0FFWHVqQyxFQUFRdmpDLE9BQVMwakMsRUFBUzFqQyxPQUNKLE1BQWxCc2tDLElBQ0ZmLEVBQVF2akMsT0FBU3JCLEVBQUt5RCxLQUFLa2lDLEVBQWdCZixFQUFRdmpDLFNBRW5DLE1BQWRvWixJQUNGbXFCLEVBQVF2akMsT0FBU3JCLEVBQUsyWSxTQUFTOEIsRUFBWW1xQixFQUFRdmpDLFNBRXJEdWpDLEVBQVE5cUIsYUFBZWlyQixFQUFTdDZCLEtBQ2hDbTZCLEVBQVE3cUIsZUFBaUJnckIsRUFBU3I2QixPQUNiLE1BQWpCcTZCLEVBQVN6bUMsT0FDWHNtQyxFQUFRdG1DLEtBQU95bUMsRUFBU3ptQyxPQUs5QixJQUFJK0MsRUFBU3VqQyxFQUFRdmpDLE9BQ1AsTUFBVkEsR0FBbUJ1a0MsRUFBVzk3QixJQUFJekksSUFDcEN1a0MsRUFBV1IsSUFBSS9qQyxHQUdqQixJQUFJL0MsRUFBT3NtQyxFQUFRdG1DLEtBQ1AsTUFBUkEsR0FBaUJ1bkMsRUFBUy83QixJQUFJeEwsSUFDaEN1bkMsRUFBU1QsSUFBSTltQyxLQUdkdUUsTUFDSEEsS0FBS3FoQyxTQUFXMEIsRUFDaEIvaUMsS0FBS3NoQyxPQUFTMEIsRUFHZHJCLEVBQW1CUyxRQUFRci9CLFNBQVEsU0FBVXMvQixHQUMzQyxJQUFJNTZCLEVBQVVrNkIsRUFBbUJhLGlCQUFpQkgsR0FDbkMsTUFBWDU2QixJQUNvQixNQUFsQnE3QixJQUNGVCxFQUFhbGxDLEVBQUt5RCxLQUFLa2lDLEVBQWdCVCxJQUV2QixNQUFkenFCLElBQ0Z5cUIsRUFBYWxsQyxFQUFLMlksU0FBUzhCLEVBQVl5cUIsSUFFekNyaUMsS0FBS3lpQyxpQkFBaUJKLEVBQVk1NkIsTUFFbkN6SCxPQWNQaWhDLEVBQW1CbmtDLFVBQVU0bEMsaUJBQzNCLFNBQTRDUyxFQUFZQyxFQUFXQyxFQUN2Qi91QixHQUsxQyxHQUFJOHVCLEdBQXVDLGlCQUFuQkEsRUFBVXg3QixNQUFpRCxpQkFBckJ3N0IsRUFBVXY3QixPQUNwRSxNQUFNLElBQUlwSSxNQUNOLGdQQU1SLE1BQUkwakMsR0FBYyxTQUFVQSxHQUFjLFdBQVlBLEdBQy9DQSxFQUFXdjdCLEtBQU8sR0FBS3U3QixFQUFXdDdCLFFBQVUsSUFDM0N1N0IsR0FBY0MsR0FBWS91QixNQUl6QjZ1QixHQUFjLFNBQVVBLEdBQWMsV0FBWUEsR0FDL0NDLEdBQWEsU0FBVUEsR0FBYSxXQUFZQSxHQUNoREQsRUFBV3Y3QixLQUFPLEdBQUt1N0IsRUFBV3Q3QixRQUFVLEdBQzVDdTdCLEVBQVV4N0IsS0FBTyxHQUFLdzdCLEVBQVV2N0IsUUFBVSxHQUMxQ3c3QixHQUtWLE1BQU0sSUFBSTVqQyxNQUFNLG9CQUFzQmdZLEtBQUsrUixVQUFVLENBQ25EeVksVUFBV2tCLEVBQ1gza0MsT0FBUTZrQyxFQUNSbkIsU0FBVWtCLEVBQ1YzbkMsS0FBTTZZLE1BU2Qyc0IsRUFBbUJua0MsVUFBVXdtQyxtQkFDM0IsV0FjRSxJQWJBLElBT0kvMUIsRUFDQXcwQixFQUNBd0IsRUFDQUMsRUFWQUMsRUFBMEIsRUFDMUJDLEVBQXdCLEVBQ3hCQyxFQUF5QixFQUN6QkMsRUFBdUIsRUFDdkJDLEVBQWUsRUFDZkMsRUFBaUIsRUFDakJ6MUIsRUFBUyxHQU1UMDFCLEVBQVcvakMsS0FBS3VoQyxVQUFVeUMsVUFDckI5b0MsRUFBSSxFQUFHMk8sRUFBTWs2QixFQUFTeGxDLE9BQVFyRCxFQUFJMk8sRUFBSzNPLElBQUssQ0FJbkQsR0FGQXFTLEVBQU8sSUFEUHcwQixFQUFVZ0MsRUFBUzdvQyxJQUdQa2MsZ0JBQWtCc3NCLEVBRTVCLElBREFELEVBQTBCLEVBQ25CMUIsRUFBUTNxQixnQkFBa0Jzc0IsR0FDL0JuMkIsR0FBUSxJQUNSbTJCLFNBSUYsR0FBSXhvQyxFQUFJLEVBQUcsQ0FDVCxJQUFLaUMsRUFBS29hLG9DQUFvQ3dxQixFQUFTZ0MsRUFBUzdvQyxFQUFJLElBQ2xFLFNBRUZxUyxHQUFRLElBSVpBLEdBQVF1ekIsRUFBVXpYLE9BQU8wWSxFQUFRNXFCLGdCQUNKc3NCLEdBQzdCQSxFQUEwQjFCLEVBQVE1cUIsZ0JBRVosTUFBbEI0cUIsRUFBUXZqQyxTQUNWZ2xDLEVBQVl4akMsS0FBS3FoQyxTQUFTdjlCLFFBQVFpK0IsRUFBUXZqQyxRQUMxQytPLEdBQVF1ekIsRUFBVXpYLE9BQU9tYSxFQUFZTSxHQUNyQ0EsRUFBaUJOLEVBR2pCajJCLEdBQVF1ekIsRUFBVXpYLE9BQU8wWSxFQUFROXFCLGFBQWUsRUFDbkIyc0IsR0FDN0JBLEVBQXVCN0IsRUFBUTlxQixhQUFlLEVBRTlDMUosR0FBUXV6QixFQUFVelgsT0FBTzBZLEVBQVE3cUIsZUFDSnlzQixHQUM3QkEsRUFBeUI1QixFQUFRN3FCLGVBRWIsTUFBaEI2cUIsRUFBUXRtQyxPQUNWOG5DLEVBQVV2akMsS0FBS3NoQyxPQUFPeDlCLFFBQVFpK0IsRUFBUXRtQyxNQUN0QzhSLEdBQVF1ekIsRUFBVXpYLE9BQU9rYSxFQUFVTSxHQUNuQ0EsRUFBZU4sSUFJbkJsMUIsR0FBVWQsRUFHWixPQUFPYyxHQUdYNHlCLEVBQW1CbmtDLFVBQVVtbkMsd0JBQzNCLFNBQW1EQyxFQUFVQyxHQUMzRCxPQUFPRCxFQUFTdGxCLEtBQUksU0FBVXBnQixHQUM1QixJQUFLd0IsS0FBS3doQyxpQkFDUixPQUFPLEtBRVUsTUFBZjJDLElBQ0YzbEMsRUFBU3JCLEVBQUsyWSxTQUFTcXVCLEVBQWEzbEMsSUFFdEMsSUFBSS9CLEVBQU1VLEVBQUtzWixZQUFZalksR0FDM0IsT0FBTzVDLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBSzJFLEtBQUt3aEMsaUJBQWtCL2tDLEdBQy9EdUQsS0FBS3doQyxpQkFBaUIva0MsR0FDdEIsT0FDSHVELE9BTVBpaEMsRUFBbUJua0MsVUFBVXNuQyxPQUMzQixXQUNFLElBQUl4bEIsRUFBTSxDQUNSOUMsUUFBUzliLEtBQUt5aEMsU0FDZFcsUUFBU3BpQyxLQUFLcWhDLFNBQVMyQyxVQUN2QkssTUFBT3JrQyxLQUFLc2hDLE9BQU8wQyxVQUNuQkQsU0FBVS9qQyxLQUFLc2pDLHNCQVlqQixPQVZrQixNQUFkdGpDLEtBQUtraEMsUUFDUHRpQixFQUFJaWpCLEtBQU83aEMsS0FBS2toQyxPQUVNLE1BQXBCbGhDLEtBQUttaEMsY0FDUHZpQixFQUFJaEgsV0FBYTVYLEtBQUttaEMsYUFFcEJuaEMsS0FBS3doQyxtQkFDUDVpQixFQUFJMGxCLGVBQWlCdGtDLEtBQUtpa0Msd0JBQXdCcmxCLEVBQUl3akIsUUFBU3hqQixFQUFJaEgsYUFHOURnSCxHQU1YcWlCLEVBQW1CbmtDLFVBQVU0QixTQUMzQixXQUNFLE9BQU8rWSxLQUFLK1IsVUFBVXhwQixLQUFLb2tDLFdBRy9CcHBDLEVBQVFpbUMsbUJBQXFCQSxHLGdCQ25ZN0IsSUFBSXNELEVBQVMsRUFBUSxLQXNEckJ2cEMsRUFBUXF1QixPQUFTLFNBQTBCbWIsR0FDekMsSUFDSUMsRUFEQUMsRUFBVSxHQUdWQyxFQTNCTixTQUFxQkgsR0FDbkIsT0FBT0EsRUFBUyxFQUNPLElBQWhCQSxHQUFXLEdBQ0UsR0FBZkEsR0FBVSxHQXdCTEksQ0FBWUosR0FFdEIsR0FDRUMsRUF6Q2dCSSxHQXlDUkYsR0FDUkEsS0FoRGlCLEdBaURQLElBR1JGLEdBakRTLElBbURYQyxHQUFXSCxFQUFPbGIsT0FBT29iLFNBQ2xCRSxFQUFNLEdBRWYsT0FBT0QsR0FPVDFwQyxFQUFRMnRCLE9BQVMsU0FBMEJqUyxFQUFNb3VCLEVBQVFDLEdBQ3ZELElBR0lDLEVBQWNQLEVBdkNHRCxFQUVqQlMsRUFrQ0FDLEVBQVN4dUIsRUFBS25ZLE9BQ2Q4UCxFQUFTLEVBQ1QwbUIsRUFBUSxFQUdaLEVBQUcsQ0FDRCxHQUFJK1AsR0FBVUksRUFDWixNQUFNLElBQUl6bEMsTUFBTSw4Q0FJbEIsSUFBZSxLQURmZ2xDLEVBQVFGLEVBQU81YixPQUFPalMsRUFBSy9ULFdBQVdtaUMsT0FFcEMsTUFBTSxJQUFJcmxDLE1BQU0seUJBQTJCaVgsRUFBS2haLE9BQU9vbkMsRUFBUyxJQUdsRUUsS0E3RVcsR0E2RU9QLEdBRWxCcDJCLElBREFvMkIsR0EzRWdCSSxLQTRFWTlQLEVBQzVCQSxHQW5GaUIsUUFvRlZpUSxHQUVURCxFQUFVNW9DLE9BdkROOG9DLEdBRmlCVCxFQXlEV24yQixJQXZEUixFQURVLElBQVAsRUFBVG0yQixJQUdiUyxFQUNEQSxHQXFESkYsRUFBVW5kLEtBQU9rZCxJLGdCQ25JbkIsSUFBSTNuQyxFQUFPLEVBQVEsSUFDZjhKLEVBQU1yTCxPQUFPa0IsVUFBVUMsZUFDdkJvb0MsRUFBOEIsb0JBQVJDLElBUTFCLFNBQVNyRSxJQUNQL2dDLEtBQUtxbEMsT0FBUyxHQUNkcmxDLEtBQUtzbEMsS0FBT0gsRUFBZSxJQUFJQyxJQUFReHBDLE9BQU9ZLE9BQU8sTUFNdkR1a0MsRUFBU3dFLFVBQVksU0FBNEJDLEVBQVFDLEdBRXZELElBREEsSUFBSTUrQixFQUFNLElBQUlrNkIsRUFDTDdsQyxFQUFJLEVBQUcyTyxFQUFNMjdCLEVBQU9qbkMsT0FBUXJELEVBQUkyTyxFQUFLM08sSUFDNUMyTCxFQUFJMDdCLElBQUlpRCxFQUFPdHFDLEdBQUl1cUMsR0FFckIsT0FBTzUrQixHQVNUazZCLEVBQVNqa0MsVUFBVThmLEtBQU8sV0FDeEIsT0FBT3VvQixFQUFlbmxDLEtBQUtzbEMsS0FBSzFvQixLQUFPaGhCLE9BQU9xcEIsb0JBQW9CamxCLEtBQUtzbEMsTUFBTS9tQyxRQVEvRXdpQyxFQUFTamtDLFVBQVV5bEMsSUFBTSxTQUFzQjdyQixFQUFNK3VCLEdBQ25ELElBQUlDLEVBQU9QLEVBQWV6dUIsRUFBT3ZaLEVBQUtzWixZQUFZQyxHQUM5Q2l2QixFQUFjUixFQUFlbmxDLEtBQUtpSCxJQUFJeVAsR0FBUXpQLEVBQUk1TCxLQUFLMkUsS0FBS3NsQyxLQUFNSSxHQUNsRUUsRUFBTTVsQyxLQUFLcWxDLE9BQU85bUMsT0FDakJvbkMsSUFBZUYsR0FDbEJ6bEMsS0FBS3FsQyxPQUFPaGpDLEtBQUtxVSxHQUVkaXZCLElBQ0NSLEVBQ0ZubEMsS0FBS3NsQyxLQUFLeitCLElBQUk2UCxFQUFNa3ZCLEdBRXBCNWxDLEtBQUtzbEMsS0FBS0ksR0FBUUUsSUFVeEI3RSxFQUFTamtDLFVBQVVtSyxJQUFNLFNBQXNCeVAsR0FDN0MsR0FBSXl1QixFQUNGLE9BQU9ubEMsS0FBS3NsQyxLQUFLcitCLElBQUl5UCxHQUVyQixJQUFJZ3ZCLEVBQU92b0MsRUFBS3NaLFlBQVlDLEdBQzVCLE9BQU96UCxFQUFJNUwsS0FBSzJFLEtBQUtzbEMsS0FBTUksSUFTL0IzRSxFQUFTamtDLFVBQVVnSCxRQUFVLFNBQTBCNFMsR0FDckQsR0FBSXl1QixFQUFjLENBQ2hCLElBQUlTLEVBQU01bEMsS0FBS3NsQyxLQUFLdnBDLElBQUkyYSxHQUN4QixHQUFJa3ZCLEdBQU8sRUFDUCxPQUFPQSxNQUVOLENBQ0wsSUFBSUYsRUFBT3ZvQyxFQUFLc1osWUFBWUMsR0FDNUIsR0FBSXpQLEVBQUk1TCxLQUFLMkUsS0FBS3NsQyxLQUFNSSxHQUN0QixPQUFPMWxDLEtBQUtzbEMsS0FBS0ksR0FJckIsTUFBTSxJQUFJam1DLE1BQU0sSUFBTWlYLEVBQU8seUJBUS9CcXFCLEVBQVNqa0MsVUFBVWlMLEdBQUssU0FBcUI4OUIsR0FDM0MsR0FBSUEsR0FBUSxHQUFLQSxFQUFPN2xDLEtBQUtxbEMsT0FBTzltQyxPQUNsQyxPQUFPeUIsS0FBS3FsQyxPQUFPUSxHQUVyQixNQUFNLElBQUlwbUMsTUFBTSx5QkFBMkJvbUMsSUFRN0M5RSxFQUFTamtDLFVBQVVrbkMsUUFBVSxXQUMzQixPQUFPaGtDLEtBQUtxbEMsT0FBT3p5QixTQUdyQjVYLEVBQVErbEMsU0FBV0EsRyx1ekNDdEhuQjlsQyxFQUFPRCxRQUFVLEVBQVEsSzs7Ozs7O0dDWXpCLElBMkl1QjhxQyxFQUFZN1YsRUFFN0I4VixFQTdJRkMsRUFBSyxFQUFRLElBQ2JDLEVBQVUsRUFBUSxHQUFRQSxRQU8xQkMsRUFBc0IsMEJBQ3RCQyxFQUFtQixXQXlCdkIsU0FBU0MsRUFBUzlsQyxHQUNoQixJQUFLQSxHQUF3QixpQkFBVEEsRUFDbEIsT0FBTyxFQUlULElBQUk2TSxFQUFRKzRCLEVBQW9CcDNCLEtBQUt4TyxHQUNqQytsQyxFQUFPbDVCLEdBQVM2NEIsRUFBRzc0QixFQUFNLEdBQUdELGVBRWhDLE9BQUltNUIsR0FBUUEsRUFBS0QsUUFDUkMsRUFBS0QsV0FJVmo1QixJQUFTZzVCLEVBQWlCM29DLEtBQUsyUCxFQUFNLE1BQ2hDLFFBakNYblMsRUFBUW9yQyxRQUFVQSxFQUNsQnByQyxFQUFRc3JDLFNBQVcsQ0FBRUMsT0FBUUgsR0FDN0JwckMsRUFBUXdyQyxZQTRDUixTQUFzQjU4QixHQUVwQixJQUFLQSxHQUFzQixpQkFBUkEsRUFDakIsT0FBTyxFQUdULElBQUl5OEIsR0FBNkIsSUFBdEJ6OEIsRUFBSTlGLFFBQVEsS0FDbkI5SSxFQUFRdXJDLE9BQU8zOEIsR0FDZkEsRUFFSixJQUFLeThCLEVBQ0gsT0FBTyxFQUlULElBQWlDLElBQTdCQSxFQUFLdmlDLFFBQVEsV0FBbUIsQ0FDbEMsSUFBSXNpQyxFQUFVcHJDLEVBQVFvckMsUUFBUUMsR0FDMUJELElBQVNDLEdBQVEsYUFBZUQsRUFBUWw1QixlQUc5QyxPQUFPbTVCLEdBL0RUcnJDLEVBQVF5ckMsVUF5RVIsU0FBb0JubUMsR0FDbEIsSUFBS0EsR0FBd0IsaUJBQVRBLEVBQ2xCLE9BQU8sRUFJVCxJQUFJNk0sRUFBUSs0QixFQUFvQnAzQixLQUFLeE8sR0FHakNvbUMsRUFBT3Y1QixHQUFTblMsRUFBUThxQyxXQUFXMzRCLEVBQU0sR0FBR0QsZUFFaEQsSUFBS3c1QixJQUFTQSxFQUFLbm9DLE9BQ2pCLE9BQU8sRUFHVCxPQUFPbW9DLEVBQUssSUF2RmQxckMsRUFBUThxQyxXQUFhbHFDLE9BQU9ZLE9BQU8sTUFDbkN4QixFQUFRdXJDLE9BZ0dSLFNBQWlCdnhCLEdBQ2YsSUFBS0EsR0FBd0IsaUJBQVRBLEVBQ2xCLE9BQU8sRUFJVCxJQUFJeXhCLEVBQVlSLEVBQVEsS0FBT2p4QixHQUM1QjlILGNBQ0FnSixPQUFPLEdBRVYsSUFBS3V3QixFQUNILE9BQU8sRUFHVCxPQUFPenJDLEVBQVFpMUIsTUFBTXdXLEtBQWMsR0E3R3JDenJDLEVBQVFpMUIsTUFBUXIwQixPQUFPWSxPQUFPLE1BcUhQc3BDLEVBbEhWOXFDLEVBQVE4cUMsV0FrSGM3VixFQWxIRmoxQixFQUFRaTFCLE1Bb0huQzhWLEVBQWEsQ0FBQyxRQUFTLGNBQVU5a0MsRUFBVyxRQUVoRHJGLE9BQU9vVixLQUFLZzFCLEdBQUlqakMsU0FBUSxTQUEwQnpDLEdBQ2hELElBQUkrbEMsRUFBT0wsRUFBRzFsQyxHQUNWb21DLEVBQU9MLEVBQUtQLFdBRWhCLEdBQUtZLEdBQVNBLEVBQUtub0MsT0FBbkIsQ0FLQXVuQyxFQUFXeGxDLEdBQVFvbUMsRUFHbkIsSUFBSyxJQUFJeHJDLEVBQUksRUFBR0EsRUFBSXdyQyxFQUFLbm9DLE9BQVFyRCxJQUFLLENBQ3BDLElBQUl1ckMsRUFBWUMsRUFBS3hyQyxHQUVyQixHQUFJKzBCLEVBQU13VyxHQUFZLENBQ3BCLElBQUlqcUIsRUFBT3VwQixFQUFXamlDLFFBQVFraUMsRUFBRy9WLEVBQU13VyxJQUFZam9DLFFBQy9DK21CLEVBQUt3Z0IsRUFBV2ppQyxRQUFRdWlDLEVBQUs3bkMsUUFFakMsR0FBeUIsNkJBQXJCeXhCLEVBQU13VyxLQUNQanFCLEVBQU8rSSxHQUFPL0ksSUFBUytJLEdBQXlDLGlCQUFuQzBLLEVBQU13VyxHQUFXdndCLE9BQU8sRUFBRyxLQUV6RCxTQUtKK1osRUFBTXdXLEdBQWFubUMsUSw4RUNyTFosRUFBQXFtQyxjQUFnQixvQkFHN0IseUJBQThCQyxHQUMxQixJQUFNQyxFQUFVRCxFQUFTdmpDLE9BQ25CQyxFQUFRdWpDLEVBQVF2akMsTUFBTSxTQUN0QndqQyxFQUFxQixHQUUzQixHQUFxQixJQUFqQnhqQyxFQUFNL0UsU0FBaUIsRUFBQW9vQyxjQUFjbnBDLEtBQUs4RixFQUFNLElBQ2hELE1BQU8sQ0FBRXdqQyxFQUFVRCxHQUt2QixJQUZBLElBQUlFLEVBQXlCLEtBQ3pCL3dCLEVBQVEsRUFDTEEsRUFBUTFTLEVBQU0vRSxPQUFReVgsSUFBUyxDQUNsQyxJQUFNcE8sRUFBT3RFLEVBQU0wUyxHQUNuQixHQUFJLFFBQVF4WSxLQUFLb0ssR0FDYixNQUVKLElBQU11RixFQUFRLEVBQUF3NUIsY0FBYzczQixLQUFLbEgsR0FDakMsR0FBYyxPQUFWdUYsRUFBZ0IsQ0FDaEIsR0FBZ0IsT0FBWjQ1QixFQUNBLE1BRUpELEVBQVNDLEdBQVMxa0MsS0FBS3VGLEVBQUt2RSxhQUk1QnlqQyxFQURBQyxFQUFVNTVCLEVBQU0sSUFDSSxDQUFFQSxFQUFNLEdBQUc5SixRQUt2QyxNQUFPLENBQUV5akMsRUFESXhqQyxFQUFNc1AsTUFBTW9ELEVBQVEsR0FBR3BWLEtBQUssUyxjQ25DN0MzRixFQUFPRCxRQUFVa0MsUUFBUSxTLGdCQ0F6QixJQUFJOHBDLEVBQStCLEVBQVEsS0FxQjNDL3JDLEVBQU9ELFFBbkJQLFNBQWtDd0QsRUFBUXlvQyxHQUN4QyxHQUFjLE1BQVZ6b0MsRUFBZ0IsTUFBTyxHQUMzQixJQUNJL0IsRUFBS3ZCLEVBRExtRCxFQUFTMm9DLEVBQTZCeG9DLEVBQVF5b0MsR0FHbEQsR0FBSXJyQyxPQUFPc2hCLHNCQUF1QixDQUNoQyxJQUFJZ3FCLEVBQW1CdHJDLE9BQU9zaEIsc0JBQXNCMWUsR0FFcEQsSUFBS3RELEVBQUksRUFBR0EsRUFBSWdzQyxFQUFpQjNvQyxPQUFRckQsSUFDdkN1QixFQUFNeXFDLEVBQWlCaHNDLEdBQ25CK3JDLEVBQVNuakMsUUFBUXJILElBQVEsR0FDeEJiLE9BQU9rQixVQUFVK25CLHFCQUFxQnhwQixLQUFLbUQsRUFBUS9CLEtBQ3hENEIsRUFBTzVCLEdBQU8rQixFQUFPL0IsSUFJekIsT0FBTzRCLEksNkJDYlQsU0FBUzhvQyxFQUFLcGdCLElBQ1gsU0FBVUEsR0FLVCxJQUFJcWdCLEVBQ0YsMG9DQUNFQyxFQUFlLENBQ2pCQyxZQUFhLENBQ1hwZ0IsUUFBU2hILE9BQU8sTUFBUWtuQixHQUN4QjNmLE1BQU8sWUFFVG1FLFNBQVUsQ0FFUixDQUNFMUUsUUFBUyxzQkFDVE0sUUFBUSxFQUNSRyxPQUFRLENBRU5pRSxTQUFVLENBQ1IsQ0FDRTFFLFFBQVMsdUJBQ1RDLFlBQVksR0FFZCxXQUVGckIsT0FBUSwwREFFUndCLFNBQVUsNkZBRVZpZ0IsWUFBYSxvQkFHakIsQ0FDRXJnQixRQUFTLHFDQUNUTSxRQUFRLEVBQ1JHLE9BQVEsQ0FDTmlFLFNBQVUsb0JBR2QsQ0FDRTFFLFFBQVMsY0FDVE0sUUFBUSxFQUNSRyxPQUFRLENBQ05MLFNBQVUsbUNBQ1ZpZ0IsWUFBYSxTQUNiRCxZQUFhLENBQ1hwZ0IsUUFBU2hILE9BQU8sUUFBVWtuQixHQUMxQmpnQixZQUFZLEVBQ1pNLE1BQU8sY0FJYixzQkFHRmxPLE9BQVEsd0ZBRVZ3TixFQUFNQyxVQUFVbWdCLEtBQU8sQ0FDckJLLFFBQVMsQ0FDUHRnQixRQUFTLGFBQ1RPLE1BQU8sYUFFVGdnQixRQUFTLENBQ1B2Z0IsUUFBUyxrQkFDVEMsWUFBWSxHQUVkLGdCQUFpQixDQUtmLENBRUVELFFBQVMsK0NBQ1RDLFlBQVksRUFDWk0sTUFBTyxZQUVULENBRUVQLFFBQVMsMkJBQ1RPLE1BQU8sYUFJWCxnQkFBaUIsQ0FDZlAsUUFBUyxzQ0FDVE8sTUFBTyxXQUNQTixZQUFZLEdBSWQsY0FBZSxDQUNiRCxRQUFTLGdDQUNUUyxPQUFRLENBQ04yZixZQUFhLENBQ1hwZ0IsUUFBU2hILE9BQU8sdUJBQXlCa25CLEdBQ3pDamdCLFlBQVksRUFDWk0sTUFBTyxhQUdYQSxNQUFPLFdBQ1BOLFlBQVksR0FFZHBaLE9BQVEsQ0FFTixDQUNFbVosUUFBUyxxRUFDVEMsWUFBWSxFQUNaSyxRQUFRLEVBQ1JHLE9BQVEwZixHQUdWLENBQ0VuZ0IsUUFBUyw0RUFDVEMsWUFBWSxFQUNaSyxRQUFRLEdBRVYsQ0FDRU4sUUFBUyx3REFDVE0sUUFBUSxFQUNSRyxPQUFRMGYsSUFHWkMsWUFBYSxDQUNYcGdCLFFBQVNoSCxPQUFPLE9BQVNrbkIsR0FDekIzZixNQUFPLFlBRVRtRSxTQUFVeWIsRUFBYXpiLFNBQ3ZCdkUsU0FBVSxDQUNSSCxRQUFTLDIvQ0FDVEMsWUFBWSxHQUVkQyxRQUFTLENBQ1BGLFFBQVMsZ0hBQ1RDLFlBQVksR0FHZGdCLFFBQVMsQ0FDUGpCLFFBQVMsNlNBQ1RDLFlBQVksRUFFWk0sTUFBTyxjQUVUOUIsUUFBUyxDQUNQdUIsUUFBUyxpREFDVEMsWUFBWSxHQUVkLGtCQUFtQixDQUNqQkQsUUFBUyxVQUNUTyxNQUFPLGFBRVRILFNBQVUsQ0FFUkosUUFBUyw2RUFDVFMsT0FBUSxDQUNOLGtCQUFtQixDQUNqQlQsUUFBUyxNQUNUTyxNQUFPLGVBSWI4ZixZQUFhLGlDQUNiemhCLE9BQVEsQ0FDTm9CLFFBQVMscUNBQ1RDLFlBQVksSUFxQmhCLElBakJBLElBQUl1Z0IsRUFBYSxDQUNmLFVBQ0EsZ0JBQ0EsZ0JBQ0EsY0FDQSxTQUNBLGNBQ0EsV0FDQSxVQUNBLFVBQ0EsVUFDQSxrQkFDQSxXQUNBLGNBQ0EsVUFFRS9mLEVBQVMwZixFQUFhemIsU0FBUyxHQUFHakUsT0FDN0J6c0IsRUFBSSxFQUFHQSxFQUFJd3NDLEVBQVducEMsT0FBUXJELElBQ3JDeXNCLEVBQU8rZixFQUFXeHNDLElBQU02ckIsRUFBTUMsVUFBVW1nQixLQUFLTyxFQUFXeHNDLElBRTFENnJCLEVBQU1DLFVBQVUyZ0IsTUFBUTVnQixFQUFNQyxVQUFVbWdCLEtBN0x6QyxDQThMRXBnQixHQWxNTDlyQixFQUFPRCxRQUFVbXNDLEVBQ2pCQSxFQUFLbmYsWUFBYyxPQUNuQm1mLEVBQUtsZixRQUFVLENBQUMsVSw2QkNDaEIsU0FBUzhCLEVBQUtoRCxHQUNaQSxFQUFNQyxVQUFVK0MsS0FBTyxDQUNyQmx0QixTQUFVLENBQ1JxcUIsUUFBUyxnQ0FDVE0sUUFBUSxHQUVWelosT0FBUSxDQUNObVosUUFBUyxnQ0FDVE0sUUFBUSxHQUVWaWdCLFFBQVMsZ0NBQ1QzaEIsT0FBUSwyQkFDUnloQixZQUFhLFdBQ2JqZ0IsU0FBVSxJQUNWM0IsUUFBUyxxQkFDVGlpQixLQUFNLENBQ0oxZ0IsUUFBUyxXQUNUTyxNQUFPLFlBcEJieHNCLEVBQU9ELFFBQVUrdUIsRUFDakJBLEVBQUsvQixZQUFjLE9BQ25CK0IsRUFBSzlCLFFBQVUsSSw2QkNDZixTQUFTNGYsRUFBTzlnQixHQUNkQSxFQUFNQyxVQUFVNmdCLE9BQVMsQ0FDdkJKLFFBQVMsQ0FDUHZnQixRQUFTLGVBQ1RDLFlBQVksR0FFZCx1QkFBd0IsQ0FDdEJELFFBQVMsc0VBQ1RNLFFBQVEsRUFDUkcsT0FBUSxDQUNOamEsY0FBZSxDQUVid1osUUFBUywyRUFDVEMsWUFBWSxFQUNaUSxPQUFRLENBQ04sY0FBZSxDQUNiVCxRQUFTLHFCQUNUQyxZQUFZLEdBRWQsb0JBQXFCLENBQ25CRCxRQUFTLGtCQUNUTyxNQUFPLGVBRVRHLEtBQU0sT0FHVjdaLE9BQVEsWUFHWix1QkFBd0IsQ0FDdEJtWixRQUFTLHVDQUNUTSxRQUFRLEVBQ1JDLE1BQU8sVUFFVDFaLE9BQVEsQ0FDTm1aLFFBQVMsbURBQ1RNLFFBQVEsR0FFVkgsU0FBVSxDQUNSSCxRQUFTLDRDQUNUQyxZQUFZLEdBRWQsYUFBYyxDQUNaRCxRQUFTLG1CQUNUQyxZQUFZLEdBRWQyZ0IsVUFBVyxDQUNUNWdCLFFBQVMsd0JBQ1RDLFlBQVksRUFDWk0sTUFBTyxDQUFDLGFBQWMsZUFDdEJFLE9BQVEsQ0FDTjRmLFlBQWEsT0FHakJuZ0IsUUFBUyxtTUFDVGUsUUFBUyxzaEJBQ1R4QyxRQUFTLDBCQUNURyxPQUFRLDZGQUNSd0IsU0FBVSxvREFDVmlnQixZQUFhLGlCQUVmeGdCLEVBQU1DLFVBQVU2Z0IsT0FBTyx3QkFBd0JsZ0IsT0FFL0MsY0FBRUEsT0FBT0MsS0FBT2IsRUFBTUMsVUFBVTZnQixPQUNoQzlnQixFQUFNQyxVQUFVK2dCLEdBQUtoaEIsRUFBTUMsVUFBVTZnQixPQW5FdkM1c0MsRUFBT0QsUUFBVTZzQyxFQUNqQkEsRUFBTzdmLFlBQWMsU0FDckI2ZixFQUFPNWYsUUFBVSxDQUFDLE8sNkJDQ2xCLFNBQVM1TyxFQUFPME4sR0FDZEEsRUFBTUMsVUFBVTNOLE9BQVMwTixFQUFNQyxVQUFVN1QsT0FBTyxRQUFTLENBQ3ZEczBCLFFBQVMsQ0FDUHZnQixRQUFTLDRCQUNUQyxZQUFZLEdBRWRwWixPQUFRLENBQ05tWixRQUFTLHNDQUNUTSxRQUFRLEdBR1YsYUFBYyxhQUNkSixRQUFTLDRSQUNURSxTQUFVLHdHQUVaUCxFQUFNQyxVQUFVNWtCLGFBQWEsU0FBVSxhQUFjLENBQ25EOUUsVUFBVyxDQUNUNHBCLFFBQVMsZ0VBQ1RPLE1BQU8sVUFFVHVnQixZQUFhLENBRVg5Z0IsUUFBUyx3QkFDVE8sTUFBTyxZQUVUd2dCLE1BQU8sQ0FDTC9nQixRQUFTLG1CQUNUTyxNQUFPLG1CQUdKVixFQUFNQyxVQUFVM04sT0FBT2dPLFNBakNoQ3BzQixFQUFPRCxRQUFVcWUsRUFDakJBLEVBQU8yTyxZQUFjLFNBQ3JCM08sRUFBTzRPLFFBQVUsSSw2QkNIakIsSUFBSWlnQixFQUFlLEVBQVEsS0FDdkJDLEVBQXNCLEVBQVEsSUFJbEMsU0FBU0MsRUFBSXJoQixHQUNYQSxFQUFNK0IsU0FBU29mLEdBQ2ZuaEIsRUFBTStCLFNBQVNxZixHQUNmLElBQUlqZ0IsRUFBYW5CLEVBQU01cEIsS0FBS2tyQyxNQUFNdGhCLEVBQU1DLFVBQVVrQixZQUNsRG5CLEVBQU1DLFVBQVVvaEIsSUFBTXJoQixFQUFNQyxVQUFVN1QsT0FBTyxNQUFPK1UsR0FQdERqdEIsRUFBT0QsUUFBVW90QyxFQUNqQkEsRUFBSXBnQixZQUFjLE1BQ2xCb2dCLEVBQUluZ0IsUUFBVSxJLGdCQ0paLElBQXNCcWdCLElBWUwsV0FDakIsSUFBSUMsRUFBVTl3QixLQUFLQyxNQUFNLGkzSUFDckI4d0IsRUFBVS93QixLQUFLQyxNQUFNLDRCQUV6QixTQUFTOVQsRUFBU21LLEVBQVFoTyxHQUN4QixHQUFzQixpQkFBWGdPLEVBQ1QsTUFBTSxJQUFJdE8sTUFBTSxxQ0FPbEIsSUFBSWdwQyxFQUFTRCxHQUpiem9DLEVBQThCLGlCQUFaQSxFQUNkLENBQUMyb0MsWUFBYTNvQyxHQUNkQSxHQUFXLElBRWMwb0MsU0FBVyxHQUVwQ0MsRUFBYzNvQyxFQUFRMm9DLGFBQWUsSUFFckNDLEVBQU81NkIsRUFBT3pLLE1BQU0sSUFFckJzbEMsUUFBTyxTQUFVdjZCLEVBQVF3NkIsR0FDeEIsT0FBT3g2QixHQUFVbzZCLEVBQU9JLElBQU9OLEVBQVFNLElBQU9BLEtBQzdDLElBRUZqbEMsUUFBUTdELEVBQVErb0MsUUFBVSwyQkFBNEIsSUFFdER6bEMsT0FHQU8sUUFBUSxJQUFJc2MsT0FBTyxPQUFTd29CLEVBQWMsS0FBTSxLQUFNQSxHQVl6RCxPQVZJM29DLEVBQVFncEMsUUFDVkosRUFBT0EsRUFBS3o3QixlQUdWbk4sRUFBUWlwQyxTQUVWTCxFQUFPQSxFQUNKL2tDLFFBQVEsSUFBSXNjLE9BQU8sY0FBZ0J3b0IsRUFBYyxJQUFLLEtBQU0sS0FHMURDLEVBU1QsT0FOQS9rQyxFQUFRdVAsT0FBUyxTQUFVODFCLEdBQ3pCLElBQUssSUFBSXhzQyxLQUFPd3NDLEVBQ2RWLEVBQVE5ckMsR0FBT3dzQyxFQUFVeHNDLElBSXRCbUgsR0EzREwzSSxFQUFPRCxRQUFVc3RDLElBQ2pCcnRDLEVBQU9ELFFBQWlCLFFBQUlzdEMsSyw2QkNGaEMsU0FBU1ksRUFBbUJqMkIsR0FBTyxPQU1uQyxTQUE0QkEsR0FBTyxHQUFJcFUsTUFBTUYsUUFBUXNVLEdBQU0sQ0FBRSxJQUFLLElBQUkvWCxFQUFJLEVBQUdpdUMsRUFBTyxJQUFJdHFDLE1BQU1vVSxFQUFJMVUsUUFBU3JELEVBQUkrWCxFQUFJMVUsT0FBUXJELElBQU9pdUMsRUFBS2p1QyxHQUFLK1gsRUFBSS9YLEdBQU0sT0FBT2l1QyxHQU5uSEMsQ0FBbUJuMkIsSUFJN0QsU0FBMEJvMkIsR0FBUSxHQUFJcHRDLE9BQU9xdEMsWUFBWTF0QyxPQUFPeXRDLElBQWtELHVCQUF6Q3p0QyxPQUFPa0IsVUFBVTRCLFNBQVNyRCxLQUFLZ3VDLEdBQWdDLE9BQU94cUMsTUFBTTJkLEtBQUs2c0IsR0FKckZFLENBQWlCdDJCLElBRXRGLFdBQWdDLE1BQU0sSUFBSWlKLFVBQVUsbURBRjBDc3RCLEdBUTlGLElBQUlDLEVBQVEsRUFBUSxHQUVoQkMsRUFBVSxFQUFRLEtBRWxCaHlCLEVBQVEsRUFBUSxLQUVoQml5QixFQUFZLEVBQVEsS0FFcEJDLEVBQWtCLEVBQVEsS0FFMUJDLEVBQVksRUFBUSxLQUVwQkMsRUFBZSxFQUFRLEtBRXZCQyxFQUFhLEVBQVEsS0FFckJDLEVBQWdCLEVBQVEsS0FFeEJDLEVBQWlCLEVBQVEsS0FFekJDLEVBQWlCLEVBQVEsS0FFekJDLEVBQW1CLEVBQVEsS0FFM0I3a0IsRUFBVSxFQUFRLEtBRWxCOGtCLEVBQVd4dUMsT0FBT29WLEtBQUttNUIsR0FFdkJFLEVBQWdCLFNBQXVCdDJCLEdBQ3pDLElBQUlYLEVBQU1XLEVBQU12VixRQUFVdVYsRUFBTTZILFVBQVksR0FDeEMwdUIsRUFBZ0J2MkIsRUFBTXUyQixjQUUxQixHQUFJdjJCLEVBQU13MkIsY0FBZ0J4MkIsRUFBTXkyQixnQkFDOUIsTUFBTSxJQUFJL3FDLE1BQU0sc0VBR2xCLElBQUlnckMsRUFBWWhCLEVBQU1VLEVBQWtCcDJCLEVBQU0wMkIsV0FFMUNqdEIsRUFEVSxDQUFDLENBQUM5RixFQUFPNHlCLElBQWdCbnRCLE9BQU9wSixFQUFNMjJCLFNBQVcsSUFDMUM5QixPQUFPK0IsRUFBbUJqQixLQUMzQ2tCLEVBQVNwdEIsRUFBTzlGLE1BQU10RSxHQUN0QnkzQixFQUFjcEIsRUFBTTExQixFQUFPLENBQzdCMDJCLFVBQVdBLEVBQ1hLLFlBQWFiLEVBQWVXLEtBRTFCRyxFQWFOLFNBQTZCaDNCLEdBQzNCLElBQUkyMkIsRUFBVSxDQUFDVixFQUFlSixLQUMxQlksRUFBa0J6MkIsRUFBTXkyQixnQkFFeEJ6MkIsRUFBTXcyQixlQUNSQyxFQUFrQkosRUFBU2h0QixRQUFPLFNBQVU5YyxHQUMxQyxNQUFnQixTQUFUQSxJQUF5RCxJQUF0Q3lULEVBQU13MkIsYUFBYXptQyxRQUFReEQsT0FJekQsSUFBSTBxQyxFQUFnQmozQixFQUFNazNCLGlCQUFtQixTQUFXLFNBRXBEVCxHQUFtQkEsRUFBZ0Jqc0MsT0FBUyxHQUM5Q21zQyxFQUFRcm9DLEtBQUt5bkMsRUFBYW9CLE9BQU9WLEVBQWlCUSxJQUdoRGozQixFQUFNbzNCLFdBQ1JULEVBQVFyb0MsS0FBS3luQyxFQUFhc0IsV0FBV3IzQixFQUFNbzNCLFVBQVdILElBR3hELElBQUlLLEdBQWN0M0IsRUFBTXUzQixhQUFldjNCLEVBQU13M0IsU0FDekNDLEdBQWlCejNCLEVBQU1nM0IsWUFBYyxJQUFJemMsTUFBSyxTQUFVelAsR0FFMUQsT0FEYWhnQixNQUFNRixRQUFRa2dCLEdBQVFBLEVBQUssR0FBS0EsR0FDL0J6SSxXQUFha1AsRUFBUW1tQixjQUdqQ0osSUFBZUcsR0FDakJkLEVBQVFyb0MsS0FBS3duQyxHQUdmLE9BQU85MUIsRUFBTWczQixXQUFhTCxFQUFRdnRCLE9BQU9wSixFQUFNZzNCLFlBQWNMLEVBM0M1Q2dCLENBQW9CMzNCLEdBRWpDNDNCLEVBQWlCbnVCLEVBQU9vdUIsUUFBUWhCLEdBQ2hDaUIsRUFBTWQsRUFBV25DLFFBQU8sU0FBVTcvQixFQUFNK2lDLEdBQzFDLE9BQU9BLEVBQU8vaUMsRUFBTThoQyxLQUNuQmMsR0FDSCxPQUFPNUIsRUFBVzhCLEVBQUtoQixJQUd6QixTQUFTRixFQUFrQm50QixFQUFRc3VCLEdBQ2pDLE9BQU9qdEMsTUFBTUYsUUFBUW10QyxHQUFVdHVCLEVBQU83VyxJQUFJdVIsTUFBTXNGLEVBQVEwckIsRUFBbUI0QyxJQUFXdHVCLEVBQU83VyxJQUFJbWxDLEdBb0NuR3pCLEVBQWMwQixhQUFlLENBQzNCdEIsVUFBVyxHQUNYYSxZQUFZLEVBQ1pDLFVBQVUsRUFDVlMsV0FBVyxFQUNYQyxjQUFjLEVBQ2RDLGlCQUFrQmhDLEVBQ2xCYSxXQUFZLEdBQ1pMLFFBQVMsR0FDVEosY0FBZSxJQUVqQkQsRUFBYzhCLFVBQVksQ0FDeEJoOUIsVUFBV3c2QixFQUFVNTdCLE9BQ3JCdlAsT0FBUW1yQyxFQUFVNTdCLE9BQ2xCNk4sU0FBVSt0QixFQUFVNTdCLE9BQ3BCaStCLFVBQVdyQyxFQUFVbmpCLEtBQ3JCeWxCLGFBQWN0QyxFQUFVbmpCLEtBQ3hCOGtCLFdBQVkzQixFQUFVbmpCLEtBQ3RCK2tCLFNBQVU1QixFQUFVbmpCLEtBQ3BCMmtCLFVBQVd4QixFQUFVN2lDLEtBQ3JCeWpDLGFBQWNaLEVBQVV5QyxRQUFRekMsRUFBVTBDLE1BQU1qQyxJQUNoREksZ0JBQWlCYixFQUFVeUMsUUFBUXpDLEVBQVUwQyxNQUFNakMsSUFDbkQ4QixpQkFBa0J2QyxFQUFVMkMsVUFBVSxDQUFDM0MsRUFBVTdpQyxLQUFNNmlDLEVBQVVuakIsT0FDakUrbEIsV0FBWTVDLEVBQVUyQyxVQUFVLENBQUMzQyxFQUFVN2lDLEtBQU02aUMsRUFBVTU3QixTQUMzRHkrQixrQkFBbUI3QyxFQUFVN2lDLEtBQzdCaWtDLFdBQVlwQixFQUFVeUMsUUFBUXpDLEVBQVU3aUMsTUFDeENta0MsaUJBQWtCdEIsRUFBVW5qQixLQUM1QmlrQixVQUFXZCxFQUFVL3NDLE9BQ3JCOHRDLFFBQVNmLEVBQVU4QyxNQUNuQm5DLGNBQWVYLEVBQVUvc0MsUUFFM0J5dEMsRUFBY3BhLE1BQVFtYSxFQUN0QkMsRUFBY0ksVUFBWU4sRUFDMUJFLEVBQWNILGVBQWlCQSxFQUMvQmp2QyxFQUFPRCxRQUFVcXZDLEcsZUMzSGYsV0FFRSxJQUFJcUMsRUFBVSxDQUNWQyxNQUFPLENBQ0hDLEtBQU0sQ0FBQyxVQUFXLFNBQVUsV0FBWSxXQUFZLGFBQWMsVUFBVyxXQUM3RUMsVUFBVyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ2hEQyxPQUFRLENBQUMsU0FBVSxVQUFXLE9BQVEsUUFBUyxNQUFPLE9BQVEsT0FBUSxTQUFVLFlBQWEsVUFBVyxXQUFZLFlBQ3BIQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWG9vQyxNQUFPLENBQ0hULEtBQU0sQ0FBQyxTQUFVLFNBQVUsVUFBVyxZQUFhLFdBQVksU0FBVSxZQUN6RUMsVUFBVyxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3REQyxPQUFRLENBQUMsVUFBVyxXQUFZLFFBQVMsUUFBUyxNQUFPLE9BQVEsT0FBUSxTQUFVLFlBQWEsVUFBVyxXQUFZLFlBQ3ZIQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGTyxnQkFBaUIsQ0FDYixLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUN0RCxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUN0RCxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUN0RCxNQUVKTixHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWHNvQyxNQUFPLENBQ0hYLEtBQU0sQ0FBQyxTQUFVLFNBQVUsVUFBVyxZQUFhLFdBQVksU0FBVSxZQUN6RUMsVUFBVyxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3REQyxPQUFRLENBQUMsVUFBVyxXQUFZLFFBQVMsUUFBUyxNQUFPLE9BQVEsT0FBUSxTQUFVLFlBQWEsVUFBVyxXQUFZLFlBQ3ZIQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGTyxnQkFBaUIsQ0FDYixLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUN0RCxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUN0RCxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUN0RCxNQUVKTixHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWHVvQyxNQUFPLENBQ0haLEtBQU0sQ0FBQyxVQUFXLFFBQVMsU0FBVSxZQUFhLFNBQVUsVUFBVyxVQUN2RUMsVUFBVyxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3REQyxPQUFRLENBQUMsUUFBUyxVQUFXLFFBQVMsUUFBUyxPQUFRLFFBQVMsUUFBUyxTQUFVLGFBQWMsVUFBVyxZQUFZLGNBQ3hIQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWHdvQyxNQUFPLENBQ0hiLEtBQU0sQ0FBQyxXQUFZLFFBQVMsUUFBUyxXQUFZLFFBQVMsV0FBWSxVQUN0RUMsVUFBVyxDQUFDLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLFFBQzVEQyxPQUFRLENBQUMsVUFBVyxVQUFXLE9BQVEsUUFBUyxNQUFPLE9BQVEsVUFBVyxPQUFRLFlBQWEsVUFBVyxXQUFZLFlBQ3RIQyxZQUFhLENBQUMsUUFBUyxRQUFTLE9BQVEsUUFBUyxNQUFPLE9BQVEsUUFBUyxPQUFRLFFBQVMsT0FBUSxPQUFRLFFBQzFHQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWHlvQyxNQUFPLENBQ0hkLEtBQU0sQ0FBQyxXQUFZLFNBQVUsVUFBVyxZQUFhLFVBQVcsVUFBVyxVQUMzRUMsVUFBVyxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3REQyxPQUFRLENBQUMsVUFBVyxXQUFZLFFBQVMsU0FBVSxTQUFVLFNBQVUsU0FBVSxTQUFVLFlBQWEsVUFBVyxXQUFZLFlBQy9IQyxZQUFhLENBQUMsS0FBTSxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3JFQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWDBvQyxNQUFPLENBQ0hmLEtBQU0sQ0FBQyxTQUFVLFVBQVcsVUFBVyxXQUFZLFlBQWEsVUFBVyxZQUMzRUMsVUFBVyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ2hEQyxPQUFRLENBQUMsVUFBVyxXQUFZLFFBQVMsUUFBUyxNQUFPLE9BQVEsT0FBUSxXQUFZLFlBQWEsVUFBVyxXQUFZLFlBQ3pIQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FJWDJvQyxNQUFPLENBQ0hoQixLQUFNLENBQUMsVUFBVyxVQUFXLFFBQVMsU0FBVSxTQUFVLFFBQVMsVUFDbkVDLFVBQVcsQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUN0REMsT0FBUSxDQUFDLFVBQVcsWUFBYSxRQUFTLFFBQVMsT0FBUSxRQUFTLFFBQVMsU0FBVSxXQUFZLFVBQVcsV0FBWSxZQUMxSEMsWUFBYSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxPQUMzRkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxRQUFTLENBQ0w3eEMsRUFBRyxvQkFDSGdLLEVBQUcsV0FDSDFCLEVBQUcsV0FDSGEsRUFBRyxRQUNIMUksRUFBRyxjQUNINEssRUFBRyxXQUNIakQsRUFBRyxXQUNIUixFQUFHLEtBQ0g4QixFQUFHLE9BSVg0b0MsTUFBTyxDQUNIakIsS0FBTSxDQUFDLGNBQWUsY0FBZSxVQUFXLFFBQVMsVUFBVyxVQUFXLFdBQy9FQyxVQUFXLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDaERDLE9BQVEsQ0FBQyxTQUFVLFVBQVcsT0FBUSxTQUFVLE1BQU8sT0FBUSxPQUFRLFNBQVUsV0FBWSxVQUFXLFNBQVUsV0FDbEhDLFlBQWEsQ0FBQyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDM0ZDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsUUFBUyxDQUNMN3hDLEVBQUcsaUJBQ0hnSyxFQUFHLFdBQ0gxQixFQUFHLFdBQ0hhLEVBQUcsUUFDSDFJLEVBQUcsY0FDSDRLLEVBQUcsV0FDSGpELEVBQUcsV0FDSFIsRUFBRyxLQUNIOEIsRUFBRyxPQUlYNm9DLE1BQU8sQ0FDSGxCLEtBQU0sQ0FBQyxRQUFTLFlBQWEsT0FBTyxXQUFZLFdBQVksT0FBUSxhQUNwRUMsVUFBVyxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQ3REQyxPQUFRLENBQUMsT0FBUSxRQUFTLE9BQVEsUUFBUyxRQUFTLFVBQVcsU0FBVSxVQUFXLFFBQVMsT0FBUSxRQUFTLFVBQzlHQyxZQUFhLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE9BQzNGQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLFFBQVMsQ0FDTDd4QyxFQUFHLG9CQUNIZ0ssRUFBRyxXQUNIMUIsRUFBRyxXQUNIYSxFQUFHLFFBQ0gxSSxFQUFHLGNBQ0g0SyxFQUFHLFdBQ0hqRCxFQUFHLFdBQ0hSLEVBQUcsS0FDSDhCLEVBQUcsT0FNWDhvQyxNQUFPLENBQ0huQixLQUFNLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FDakRDLFVBQVcsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxLQUMxQ0MsT0FBUSxDQUFDLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FBUSxRQUN2RkMsWUFBYSxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFBTyxPQUNqRkMsR0FBSSxLQUNKQyxHQUFJLEtBQ0pDLEdBQUksS0FDSkMsR0FBSSxLQUNKQyxRQUFTLENBQ0w3eEMsRUFBRyxvQkFDSGdLLEVBQUcsV0FDSDFCLEVBQUcsV0FDSGEsRUFBRyxRQUNIMUksRUFBRyxjQUNINEssRUFBRyxXQUNIakQsRUFBRyxXQUNIUixFQUFHLEtBQ0g4QixFQUFHLFFBS1grb0MsRUFBZ0J0QixFQUFlLE1BQy9CdUIsRUFBa0IsSUFzQnRCLFNBQVNDLEVBQVN6RixFQUFRMEYsRUFBc0JDLEdBQzVDLElBU0lDLEVBVEFDLEVBQVU3RixHQUFVdUYsRUFDcEJPLEVBQXdCSixHQUF3QixFQUNoREssRUFBbUJKLElBQWtCLEVBTXJDSyxFQUF1QixFQW9ZM0IsSUFBSUMsRUFqWUosU0FBbUJoeEIsRUFBUWl4QixHQUN2QixJQUFJQyxFQUVKLEdBQUtELEdBc0JELEdBRkFDLEVBQVlELEVBQUtFLFVBRWJMLEVBQWtCLENBQ2xCLElBQUlNLEVBQVlDLEVBQTJCSixHQUkzQyxHQUFJSSxFQUhKSixFQUFPLElBQUlLLEtBQUtKLEVBQVlFLEVBQVlQLE1BR0NPLEVBQVcsQ0FDaEQsSUFBSUcsRUFBZUYsRUFBMkJKLEdBQzlDQSxFQUFPLElBQUlLLEtBQUtKLEVBQVlLLEVBQWVWLFNBN0I1QyxDQUNQLElBQUlXLEVBQW1CRixLQUFLejBCLE1BQ3hCMjBCLEVBQW1CVCxHQUNuQkEsRUFBdUJTLEVBQ3ZCYixFQUFjLElBQUlXLEtBQUtQLEdBRXZCRyxFQUFZSCxFQUVSRCxJQUdBSCxFQUFjLElBQUlXLEtBQUtQLEVBQXVCTSxFQUEyQlYsR0FBZUUsS0FJOUZLLEVBQVlILEVBRWRFLEVBQU9OLEVBaUJYLE9BR0osU0FBU2MsRUFBZXp4QixFQUFRaXhCLEVBQU1sRyxFQUFRbUcsR0FPMUMsSUFOQSxJQUFJUSxFQUFlLEdBQ2ZDLEVBQVUsS0FDVkMsR0FBWSxFQUNaL3dDLEVBQVNtZixFQUFPbmYsT0FDaEJneEMsR0FBYSxFQUVScjBDLEVBQUksRUFBR0EsRUFBSXFELEVBQVFyRCxJQUFLLENBRTdCLElBQUlzMEMsRUFBa0I5eEIsRUFBTy9hLFdBQVd6SCxHQUV4QyxJQUFrQixJQUFkbzBDLEVBbVVvQixLQUFwQkUsRUFLSkosR0FBZ0IxeEIsRUFBT3hpQixHQUpuQm8wQyxHQUFZLE1BcFVoQixDQUVJLEdBQXdCLEtBQXBCRSxFQUF3QixDQUN4QkgsRUFBVSxHQUNWLFNBR0MsR0FBd0IsS0FBcEJHLEVBQXdCLENBQzdCSCxFQUFVLElBQ1YsU0FHQyxHQUF3QixLQUFwQkcsRUFBd0IsQ0FDN0JILEVBQVUsSUFDVixTQUdDLEdBQXdCLEtBQXBCRyxFQUF3QixDQUMzQkQsR0FDQUUsRUFBSywyRUFFVEYsR0FBYSxFQUNiLFNBR0YsT0FBUUMsR0FNSixLQUFLLEdBQ0RKLEdBQWdCLElBQ2hCLE1BSUosS0FBSyxHQUNEQSxHQUFnQjNHLEVBQU9tRSxLQUFLK0IsRUFBS2UsVUFDakMsTUFJSixLQUFLLEdBQ0ROLEdBQWdCM0csRUFBT3FFLE9BQU82QixFQUFLZ0IsWUFDbkMsTUFJSixLQUFLLEdBQ0RQLEdBQWdCUSxFQUFTcHVCLEtBQUtzUCxNQUFNNmQsRUFBS2tCLGNBQWdCLEtBQU1SLEdBQy9ELE1BSUosS0FBSyxHQUNERCxHQUFnQkQsRUFBZTFHLEVBQU8yRSxRQUFRN25DLEVBQUdvcEMsRUFBTWxHLEVBQVFtRyxHQUMvRCxNQUlKLEtBQUssR0FDRFEsR0FBZ0JELEVBQWUxRyxFQUFPMkUsUUFBUXZwQyxFQUFHOHFDLEVBQU1sRyxFQUFRbUcsR0FDL0QsTUFJSixLQUFLLEdBQ0RRLEdBQWdCUSxFQUFTakIsRUFBS21CLFdBQVlULEdBQzFDLE1BSUosS0FBSyxHQUNERCxHQUFnQlEsRUFBU0csRUFBUXBCLEVBQUttQixZQUFhVCxHQUNuRCxNQUlKLEtBQUssR0FDREQsR0FBZ0JZLEVBQVN4dUIsS0FBS3NQLE1BQU04ZCxFQUFZLE1BQ2hELE1BSUosS0FBSyxHQUNEUSxHQUFnQlEsRUFBU2pCLEVBQUtzQixhQUFjWixHQUM1QyxNQUlKLEtBQUssR0FDREQsR0FBZ0JULEVBQUttQixXQUFhLEdBQUtySCxFQUFPeUUsR0FBS3pFLEVBQU8wRSxHQUMxRCxNQUlKLEtBQUssR0FDRGlDLEdBQWdCRCxFQUFlMUcsRUFBTzJFLFFBQVExb0MsRUFBR2lxQyxFQUFNbEcsRUFBUW1HLEdBQy9ELE1BSUosS0FBSyxHQUNEUSxHQUFnQlEsRUFBU2pCLEVBQUt1QixhQUFjYixHQUM1QyxNQUlKLEtBQUssR0FDREQsR0FBZ0JELEVBQWUxRyxFQUFPMkUsUUFBUXhtQyxFQUFHK25DLEVBQU1sRyxFQUFRbUcsR0FDL0QsTUFJSixLQUFLLEdBQ0RRLEdBQWdCUSxFQUFTTyxFQUFXeEIsRUFBTSxVQUFXVSxHQUNyRCxNQUlKLEtBQUssR0FDREQsR0FBZ0JRLEVBQVNPLEVBQVd4QixFQUFNLFVBQVdVLEdBQ3JELE1BSUosS0FBSyxHQUNERCxHQUFnQkQsRUFBZTFHLEVBQU8yRSxRQUFRanFDLEVBQUd3ckMsRUFBTWxHLEVBQVFtRyxHQUMvRCxNQUlKLEtBQUssR0FDRFEsR0FBZ0JULEVBQUtrQixjQUNyQixNQUlKLEtBQUssR0FDRCxHQUFJckIsR0FBOEMsSUFBMUJELEVBQ3BCYSxHQUFnQixVQUVmLENBRUQsSUFBSWdCLEVBQVd6QixFQUFLandDLFdBQVd5TyxNQUFNLGlCQUNyQ2lpQyxHQUFnQmdCLEdBQVlBLEVBQVMsSUFBTSxHQUUvQyxNQUlKLEtBQUssR0FDRGhCLEdBQWdCM0csRUFBT29FLFVBQVU4QixFQUFLZSxVQUN0QyxNQUlKLEtBQUssR0FDRE4sR0FBZ0IzRyxFQUFPc0UsWUFBWTRCLEVBQUtnQixZQUN4QyxNQUlKLEtBQUssR0FDRFAsR0FBZ0JELEVBQWUxRyxFQUFPMkUsUUFBUTd4QyxFQUFHb3pDLEVBQU1sRyxFQUFRbUcsR0FDL0QsTUFJSixLQUFLLElBQ0RRLEdBQWdCUSxFQUFTakIsRUFBSzBCLFVBQVdoQixHQUN6QyxNQUlKLEtBQUssSUFDREQsR0FBZ0JRLEVBQVNqQixFQUFLMEIsVUFBc0IsTUFBWGhCLEVBQWtCLElBQU1BLEdBQ2pFLE1BSUosS0FBSyxJQUNERCxHQUFnQjNHLEVBQU9zRSxZQUFZNEIsRUFBS2dCLFlBQ3hDLE1BSUosS0FBSyxJQUNELElBQUlocUMsRUFBSSxJQUFJcXBDLEtBQUtMLEVBQUtrQixjQUFlLEVBQUcsR0FDcENTLEVBQU05dUIsS0FBSyt1QixNQUFNNUIsRUFBS0UsVUFBWWxwQyxFQUFFa3BDLFdBQWEsT0FDckRPLEdBQWdCWSxFQUFTTSxHQUN6QixNQUlKLEtBQUssSUFDRGxCLEdBQWdCUSxFQUFTakIsRUFBS21CLFdBQXVCLE1BQVhULEVBQWtCLElBQU1BLEdBQ2xFLE1BSUosS0FBSyxJQUNERCxHQUFnQlEsRUFBU0csRUFBUXBCLEVBQUttQixZQUF3QixNQUFYVCxFQUFrQixJQUFNQSxHQUMzRSxNQUlKLEtBQUssSUFDREQsR0FBZ0JRLEVBQVNqQixFQUFLZ0IsV0FBYSxFQUFHTixHQUM5QyxNQUlKLEtBQUssSUFDREQsR0FBZ0IsS0FDaEIsTUFJSixLQUFLLElBR0drQixFQUFNM0IsRUFBSzBCLFVBQ1g1SCxFQUFPNkUsZ0JBQ1A4QixHQUFnQnp4QyxPQUFPMnlDLElBQVE3SCxFQUFPNkUsZ0JBQWdCZ0QsRUFBTSxJQUFNRSxFQUFRRixJQUcxRWxCLEdBQWdCenhDLE9BQU8yeUMsR0FBT0UsRUFBUUYsR0FFMUMsTUFJSixLQUFLLElBQ0RsQixHQUFnQlQsRUFBS21CLFdBQWEsR0FBS3JILEVBQU91RSxHQUFLdkUsRUFBT3dFLEdBQzFELE1BSUosS0FBSyxJQUNEbUMsR0FBZ0JELEVBQWUxRyxFQUFPMkUsUUFBUXB4QyxFQUFHMnlDLEVBQU1sRyxFQUFRbUcsR0FDL0QsTUFJSixLQUFLLElBQ0RRLEdBQWdCNXRCLEtBQUtzUCxNQUFNOGQsRUFBWSxLQUN2QyxNQUlKLEtBQUssSUFDRFEsR0FBZ0IsS0FDaEIsTUFJSixLQUFLLElBQ0drQixFQUFNM0IsRUFBS2UsU0FDZk4sR0FBd0IsSUFBUmtCLEVBQVksRUFBSUEsRUFDaEMsTUFJSixLQUFLLElBQ0RsQixHQUFnQkQsRUFBZTFHLEVBQU8yRSxRQUFRenBDLEVBQUdnckMsRUFBTWxHLEVBQVFtRyxHQUMvRCxNQUlKLEtBQUssSUFDRFEsR0FBZ0JULEVBQUtlLFNBQ3JCLE1BSUosS0FBSyxJQUNETixHQUFnQkQsRUFBZTFHLEVBQU8yRSxRQUFRbm9DLEVBQUcwcEMsRUFBTWxHLEVBQVFtRyxHQUMvRCxNQUlKLEtBQUssSUFDRFEsSUFBaUIsR0FBS1QsRUFBS2tCLGVBQWVqOUIsTUFBTSxHQUNoRCxNQUlKLEtBQUssSUFDRCxHQUFJNDdCLEdBQThDLElBQTFCRCxFQUNwQmEsR0FBZ0JHLEVBQWEsU0FBVyxZQUV2QyxDQUNELElBQUlrQixFQU9BcG1CLEdBTEFvbUIsRUFEMEIsSUFBMUJsQyxFQUNNQSxFQUF3QixLQUd2QkksRUFBSytCLHFCQUVDLEVBQUksSUFBTSxJQUN2QkMsRUFBTXBCLEVBQWEsSUFBTSxHQUN6QnFCLEVBQVFwdkIsS0FBS3NQLE1BQU10UCxLQUFLcXZCLElBQUlKLEVBQU0sS0FDbENLLEVBQU90dkIsS0FBS3F2QixJQUFJSixFQUFNLElBQzFCckIsR0FBZ0Iva0IsRUFBT3VsQixFQUFTZ0IsR0FBU0QsRUFBTWYsRUFBU2tCLEdBRTVELE1BRUosUUFDUXhCLElBQ0FGLEdBQWdCLEtBRXBCQSxHQUFnQjF4QixFQUFPeGlCLEdBSS9CbTBDLEVBQVUsS0FDVkMsR0FBWSxHQWFwQixPQUFPRixFQXpWQUQsQ0FBZXp4QixFQUFRaXhCLEVBQU1MLEVBQVNNLElBd1lqRCxPQTFDQUYsRUFBU3FDLFNBQVcsU0FBU3RJLEdBQ3pCLE9BQU8sSUFBSXlGLEVBQVN6RixHQUFVNkYsRUFBU0MsRUFBdUJDLElBR2xFRSxFQUFTc0MscUJBQXVCLFNBQVNDLEdBQ3JDLElBQUl4SSxFQUFTaUUsRUFBUXVFLEdBQ3JCLE9BQUt4SSxFQUlFaUcsRUFBU3FDLFNBQVN0SSxJQUhyQmdILEVBQUssOENBQWdEd0IsRUFBbUIsTUFDakV2QyxJQUtmQSxFQUFTd0MsU0FBVyxTQUFTQSxHQUN6QixJQUFJL0MsRUFBdUJJLEVBQ3ZCNEMsRUFBa0IzQyxFQUVsQjRDLFNBQXNCRixFQUNMLFdBQWpCRSxHQUE4QyxXQUFqQkEsSUFDN0JELEdBQWtCLEVBR0csV0FBakJDLEVBS0FqRCxHQUoyQixNQUFoQitDLEVBQVMsSUFBYyxFQUFJLElBSU4sR0FIcEJuMkIsU0FBU20yQixFQUFTdCtCLE1BQU0sRUFBRyxHQUFJLElBQzdCbUksU0FBU20yQixFQUFTdCtCLE1BQU0sRUFBRyxHQUFJLEtBRVksR0FBSyxJQUd4QyxXQUFqQncrQixJQUNMakQsRUFBa0MsR0FBWCtDLEVBQWdCLE1BSS9DLE9BQU8sSUFBSWhELEVBQVNJLEVBQVNILEVBQXNCZ0QsSUFHdkR6QyxFQUFTMkMsSUFBTSxXQUNYLE9BQU8sSUFBSW5ELEVBQVNJLEVBQVNDLEdBQXVCLElBR2pERyxFQS9jVyxDQUFhVixFQUFlLEdBQUcsR0FrZHJELFNBQVM0QixFQUFTMEIsRUFBYUMsR0FDM0IsTUFBb0IsS0FBaEJBLEdBQXNCRCxFQUFjLEVBQzdCQSxHQUVRLE1BQWZDLElBQ0FBLEVBQWMsS0FFWEEsRUFBY0QsR0FHekIsU0FBU3RCLEVBQVNzQixHQUNkLE9BQUlBLEVBQWMsR0FDUEEsRUFFUEEsRUFBYyxFQUNQLElBQU1BLEVBRVYsS0FBT0EsRUFHbEIsU0FBU3ZCLEVBQVF5QixHQUNiLE9BQWEsSUFBVEEsRUFDTyxHQUVGQSxFQUFPLEdBQ0xBLEVBQU8sR0FFWEEsRUFNWCxTQUFTckIsRUFBV3hCLEVBQU04QyxHQUN0QkEsRUFBZUEsR0FBZ0IsU0FJL0IsSUFBSUMsRUFBVS9DLEVBQUtlLFNBQ0UsV0FBakIrQixJQUNnQixJQUFaQyxFQUNBQSxFQUFVLEVBRVZBLEtBR1IsSUFBSUMsRUFBb0IzQyxLQUFLNEMsSUFBSWpELEVBQUtrQixjQUFlLEVBQUcsR0FDcERnQyxFQUFVN0MsS0FBSzRDLElBQUlqRCxFQUFLa0IsY0FBZWxCLEVBQUtnQixXQUFZaEIsRUFBSzBCLFdBRTdEeUIsR0FET3R3QixLQUFLc1AsT0FBTytnQixFQUFVRixHQUFxQixPQUNoQyxFQUFJRCxHQUFXLEVBRXJDLE9BQU9sd0IsS0FBS3NQLE1BQU1naEIsR0FJdEIsU0FBU3RCLEVBQVExcUIsR0FDYixJQUFJNXFCLEVBQUk0cUIsRUFBUyxHQUNiaXNCLEVBQUtqc0IsRUFBUyxJQUVsQixHQUFLaXNCLEdBQU0sSUFBTUEsR0FBTSxJQUFhLElBQU43MkMsR0FBV0EsR0FBSyxFQUMxQyxNQUFPLEtBRVgsT0FBUUEsR0FDSixLQUFLLEVBQUcsTUFBTyxLQUNmLEtBQUssRUFBRyxNQUFPLEtBQ2YsS0FBSyxFQUFHLE1BQU8sTUFJdkIsU0FBUzZ6QyxFQUEyQkosR0FDaEMsT0FBeUMsS0FBakNBLEVBQUsrQixxQkFBdUIsR0FHeEMsU0FBU2pCLEVBQUs3eEIsR0FDYSxvQkFBWm8wQixTQUFrRCxtQkFBaEJBLFFBQVF2QyxNQUNqRHVDLFFBQVF2QyxLQUFLN3hCLFFBNWhCYyxJQUFYM2lCLEVBS1JBLEVBQU9ELFFBQVVpekMsR0FLaEIsV0FBYSxPQUFPanVDLE9BQVEsRUFBR2l5QyxNQUFNLFFBQXRDLElBQ0Z2RCxTQUFXVCxFQUlELG1CQUFiZSxLQUFLejBCLE1BQ1p5MEIsS0FBS3owQixJQUFNLFdBQ1QsT0FBUSxJQUFJeTBCLE9BdlJyQixJLGNDWEQvekMsRUFBT0QsUUFBVSxraEgsNkJDR2ZDLEVBQU9ELFFBQVUsRUFBUSxNLDZCQzJCM0IsSUFBSWszQyxFQUFXLEVBQVEsS0FFbkJDLEVBQVksb0JBQ1pDLEVBQVksd0JBQ1pDLEVBQWEsUUFDYkMsRUFBb0IsZ0RBQ3BCQyxFQUFvQixVQUV4QixTQUFTQyxFQUFTN25CLEVBQU8rZCxHQUN2QixHQUFxQixpQkFBVi9kLEVBQ1QsTUFBTSxJQUFJbHJCLE1BQU0sd0JBRWxCLElBQUlnekMsRUFBWTluQixFQUNiL21CLFFBQVF1dUMsRUFBV3pKLEdBQ25COWtDLFFBQVF3dUMsRUFBVzFKLEdBQ25COWtDLFFBQVF5dUMsRUFBWTNKLEdBQ3BCOWtDLFFBQVEwdUMsRUFBbUI1SixHQUMzQjlrQyxRQUFRMnVDLEVBQW1CN0osR0FDOUIsT0FBT3dKLEVBQVNPLEVBQVcsS0FHN0J4M0MsRUFBT0QsUUFBVSxTQUFVMnZCLEVBQU81cUIsR0FDaEMsSUFBSTJvQyxFQUFlM29DLEdBQVdBLEVBQVEyb0MsYUFBZ0IsR0FDbERwdkIsRUFBU2s1QixFQUFTN25CLEVBQU8rZCxHQUM3QixNQUFvQixLQUFoQkEsRUFDS3B2QixFQUVGazVCLEVBQVNsNUIsRUFBUSxNLDZCQ3ZEMUJyZSxFQUFPRCxRQUFRMDNDLGVBQWlCLEVBQVEsSUFDeEN6M0MsRUFBT0QsUUFBUTQwQixVQUFZLEVBQVEsSUFDbkMzMEIsRUFBT0QsUUFBUThFLE9BQVMsRUFBUSxJQUNoQzdFLEVBQU9ELFFBQVFpa0IsY0FBZ0IsRUFBUSxJQUN2Q2hrQixFQUFPRCxRQUFRMjNDLE1BQVEsRUFBUSxHQUUvQjEzQyxFQUFPRCxRQUFRd3BCLDhCQUNiLEVBQVEsSUFBOEJBLDhCQUN4Q3ZwQixFQUFPRCxRQUFReXBCLDRCQUNiLEVBQVEsSUFBOEJBLDRCQUN4Q3hwQixFQUFPRCxRQUFRMHBCLHFCQUNiLEVBQVEsSUFBOEJBLHNCLDZCQ0p4QyxJQUFJdm5CLEVBQVUsRUFBUSxHQUNsQnVnQixFQUFVLEVBQVEsR0FBUUEsT0FDMUJrMUIsRUFBVSxFQUFRLEdBQ2xCNzBCLEVBQVUsRUFBUSxJQUFjQSxRQUdoQ3hpQixFQUFJLEVBQVEsR0FFWnlpQixFQUFLLEVBQVEsSUFFYnlPLEVBQWtCLEVBQVEsSUFHMUJELEVBQXNCLEVBQVEsSUFFOUJ2TixFQUFnQixFQUFRLElBRXhCMlEsRUFBWSxFQUFRLElBNEJ4QixTQUFTOGlCLEVBQWUzeUMsR0FDdEIsS0FBTUMsZ0JBQWdCMHlDLEdBQ3BCLE9BQU8sSUFBSUEsRUFBZTN5QyxHQUU1QixJQUFJK1IsRUFBTzlSLEtBMkJYLFNBQVM2eUMsRUFBa0JsM0MsR0FDekIsT0FBT0EsR0EzQlRvRSxFQUFVQSxHQUFXLElBRWIyc0IsWUFBZTNzQixFQUFRMnNCLGFBQWUsS0FDOUMzc0IsRUFBUTRzQixnQkFBbUI1c0IsRUFBUTRzQixpQkFBbUIsS0FDdEQ1c0IsRUFBUTZzQixZQUFlN3NCLEVBQVE2c0IsYUFBZSxJQUM5QzdzQixFQUFROHNCLGdCQUFtQjlzQixFQUFROHNCLGlCQUFtQixRQUN0REosRUFBZ0JweEIsS0FBSzJFLEtBQU1ELEdBRTNCQSxFQUFRK3lDLGFBQXFDLElBQXBCL3lDLEVBQVEreUMsV0FBNkIveUMsRUFBUSt5QyxRQUN0RS95QyxFQUFRNEgsUUFBVTVILEVBQVE0SCxTQUFXLEdBRXJDNUgsRUFBUW9mLEtBQVFwZixFQUFRb2YsTUFBUXl6QixFQUFLRyxTQUFTbDNCLFFBQVEwTyxLQUFLLElBQzNEdnFCLEtBQUttZixLQUFPcGYsRUFBUW9mLEtBQ3BCbmYsS0FBSzJnQixNQUFRNWdCLEVBQVE0Z0IsTUFDckIzZ0IsS0FBS2d6QyxPQUFTanpDLEVBQVFpekMsT0FDdEJoekMsS0FBSzhiLFFBQVUvYixFQUFRK2IsUUFFdkI5YixLQUFLdTZCLE9BQTJCLElBQWxCeDZCLEVBQVF3NkIsTUFFdEJ2NkIsS0FBS2l6QyxlQUFrQmx6QyxFQUFRa3pDLGdCQUFrQmgwQixFQUNqRGpmLEtBQUtrekMsb0JBQXNCbnpDLEVBQVFtekMscUJBQXVCLEtBQzFEbHpDLEtBQUttekMsYUFBZW56QyxLQUFLbXVCLGlCQUFpQixDQUFFUSxNQUFPLHlCQUNuRDN1QixLQUFLb3pDLFdBQWFwekMsS0FBS211QixpQkFBaUIsQ0FBRVEsTUFBTyx1QkFDakQzdUIsS0FBS3F6QyxZQUFjLEtBTW5CcnpDLEtBQUs4b0IsU0FBUyxPQUFRLE9BQVErcEIsR0FDOUI3eUMsS0FBSzhvQixTQUFTLE9BQVEsS0FBTStwQixHQUM1Qjd5QyxLQUFLOG9CLFNBQVMsT0FBUSxPQUFPLFNBQVU3akIsR0FDckMsSUFBSW9KLEVBQVMwTSxTQUFTOVYsRUFBRyxJQUN6QixHQUFJK2xCLE1BQU0zYyxHQUNSLE1BQU0sSUFBSTVPLE1BQU13RixFQUFJLDRCQUV0QixPQUFPb0osS0FFVHJPLEtBQUs4b0IsU0FBUyxPQUFRLFNBQVMsU0FBVTdqQixHQUN2QyxJQUFJb0osRUFBUzZjLFdBQVdqbUIsR0FDeEIsR0FBSStsQixNQUFNM2MsR0FDUixNQUFNLElBQUk1TyxNQUFNd0YsRUFBSSwwQkFFdEIsT0FBT29KLEtBRVRyTyxLQUFLOG9CLFNBQVMsT0FBUSxVQUFVLFNBQVU3akIsR0FDeEMsTUFBTyxHQUFLQSxLQUlkLElBQUlxdUMsRUFBaUJ0ekMsS0FBSzRzQixZQUFZOW9CLFFBQVEsTUFBUSxFQUFLLElBQU05RCxLQUFLNHNCLFlBQVksR0FDOUU3c0IsRUFBUSt5QyxTQUNWOXlDLEtBQUsrZ0IsWUFDSCxDQUFFdXlCLEVBQWdCLElBQUtBLEVBQWdCQSxFQUFnQixRQUN2RCxDQUNFdHlCLE9BQVEsT0FDUjNnQixhQUFjOUUsRUFBRXVDLFNBQ2hCMkMsS0FBTSwwQ0FJZ0IsSUFBakJULEtBQUs4YixTQUNkOWIsS0FBSytnQixZQUNILENBQUV1eUIsRUFBZ0IsSUFBS0EsRUFBZ0JBLEVBQWdCLFdBQ3ZELENBQ0V0eUIsT0FBUSxVQUNSbEYsUUFBUzliLEtBQUs4YixRQUNkemIsYUFBYzlFLEVBQUV1QyxTQUNoQjJDLEtBQU0sNENBTVpWLEVBQVE0SCxRQUFRNUUsU0FBUSxTQUFVNFksR0FFaEMsR0FEQTdKLEVBQUsyYyxxQkFBcUI5UyxRQUNNLElBQXJCQSxFQUFPeVIsVUFDaEIsSUFBSyxJQUFJbW1CLEtBQWM1M0IsRUFBT3lSLFVBQ3hCelIsRUFBT3lSLFVBQVVyd0IsZUFBZXcyQyxLQUNsQ3poQyxFQUFLc2IsVUFBVW1tQixHQUFjNTNCLEVBQU95UixVQUFVbW1CLE9BT3hEcDJDLEVBQUtDLFNBQVNzMUMsRUFBZ0JqbUIsR0FVOUJpbUIsRUFBZTUxQyxVQUFVMDJDLGNBQWdCLFNBQVV6ekMsR0EwQmpELEdBekJJQyxLQUFLcXpDLGFBQ1ByekMsS0FBS28yQixNQUFNLDhDQUdicjJCLEVBQVVBLEdBQVcsSUFDYnc2QixPQUF3QixJQUFmdjZCLEtBQUt1NkIsTUFDdEJ4NkIsRUFBUUUsY0FBZ0IsR0FDeEJGLEVBQVEwekMsWUFBZTF6QyxFQUFRMHpDLGFBQWVmLEVBR3hDM3lDLEVBQVE0dUIsT0FBVzV1QixFQUFRMnNCLGFBRS9CMXNCLEtBQUtxekMsWUFBY3J6QyxLQUFLbXVCLGlCQUFpQixDQUN2Q1EsTUFBUTV1QixFQUFRNHVCLE9BQVMsY0FDekJqQyxZQUFhM3NCLEVBQVEyc0IscUJBRWhCM3NCLEVBQVE0dUIsYUFDUjV1QixFQUFRMnNCLGFBR2Yxc0IsS0FBS3F6QyxZQUFjcnpDLEtBQUttekMsY0FLckJwekMsRUFBUW9mLEtBQU0sQ0FDakIsSUFBSVYsRUFBWXplLEtBQUswekMsZ0JBQ2pCM3hCLEVBQWMvaEIsS0FBSzJ6Qyx3QkFDbkI5eUIsRUFBUzdnQixLQUFLbXRCLHlCQUNsQjFPLEVBQVVpQyxTQUFTMWdCLEtBQUsyZ0IsTUFBT29CLEVBQWFsQixFQUFRLElBQ3BEOWdCLEVBQVFvZixLQUFPVixFQUFVRCxhQUFhbmIsT0FJeEMsSUFDSTJkLEVBQVMsSUFETWhoQixLQUFLZ3VCLGdCQUFnQmp1QixFQUFTLFdBQ3BDLENBQWlCQSxHQUk5QixPQUhBQyxLQUFLcXpDLFlBQVlubEIsV0FBV2xOLEdBR3JCQSxHQUdUMHhCLEVBQWU1MUMsVUFBVW94QixXQUFhLFNBQVVsTixHQU05QyxPQUxJQSxFQUFPbmdCLGFBQ1RiLEtBQUtvekMsV0FBV2xsQixXQUFXbE4sR0FFM0JoaEIsS0FBS216QyxhQUFhamxCLFdBQVdsTixHQUV4QkEsR0FHVDB4QixFQUFlNTFDLFVBQVU4MkMsb0JBQXNCLFdBQzdDLE9BQU81ekMsS0FBS2d0QixTQUFTNVAsUUFBTyxTQUFVNEQsR0FDcEMsT0FBT0EsRUFBT25nQixpQkFJbEI2eEMsRUFBZTUxQyxVQUFVNjJDLHNCQUF3QixXQUMvQyxPQUFPM3pDLEtBQUtndEIsU0FBUzVQLFFBQU8sU0FBVTRELEdBQ3BDLE9BQU9BLEVBQU9sZ0IsbUJBZ0JsQjR4QyxFQUFlNTFDLFVBQVUrMkMsVUFBWSxTQUFVcmxDLEVBQU1pUCxHQUNuRCxJQUFJOE0sRUFDQWxjLEVBQVNyTyxLQUFLOHpDLGVBQWV0bEMsRUFBTWlQLEdBU3ZDLE9BUEFqUCxFQUFPSCxFQUFPLElBQ2RrYyxFQUFPbGMsRUFBTyxLQUNGa2MsRUFBS2hzQixPQUFTLEdBQ3hCeUIsS0FBS28yQixNQUNIMVksRUFBTyw4QkFBK0I2TSxFQUFLM3BCLEtBQUssT0FHN0M0TixHQWVUa2tDLEVBQWU1MUMsVUFBVWczQyxlQUFpQixTQUFVdGxDLEVBQU1pUCxHQUN4RCxJQUFJM0wsRUFBTzlSLEtBR1h3TyxFQUFPQSxHQUFRcU4sUUFBUTBPLEtBQUszWCxNQUFNLEdBR2xDNkssRUFBWUEsR0FBYSxJQUFJbVMsRUFFN0I5ZCxFQUFLa2IsU0FBU2pxQixTQUFRLFNBQVVpZSxHQUM5QixHQUFJQSxFQUFPOWdCLE9BQVMzRSxFQUFFdUMsV0FDZmtnQixFQUFHL1csSUFBSXdXLEVBQVd1RCxFQUFPOWdCLE9BQ3hCOGdCLEVBQU8zZ0IsZUFBaUI5RSxFQUFFdUMsU0FBVSxDQUN0QyxJQUFJdUMsRUFBZTJnQixFQUFPM2dCLGFBQ1MsaUJBQXhCMmdCLEVBQU8zZ0IsZUFDaEJBLEVBQWV5UixFQUFLaWlDLFVBQVUveUIsRUFBUTNnQixJQUV4Q29kLEVBQVV1RCxFQUFPOWdCLE1BQVFHLE1BTWpDekUsT0FBT29WLEtBQUtjLEVBQUtzYixXQUFXcnFCLFNBQVEsU0FBVTdDLEdBQzVDdWQsRUFBVXZkLEdBQVE0UixFQUFLc2IsVUFBVWx0QixNQUluQyxJQUNFLElBQUlnbUIsRUFBTWxtQixLQUFLZzBDLGdCQUFnQnhsQyxFQUFNaVAsR0FRckMsT0FOQUEsRUFBWXlJLEVBQUksR0FDaEIxWCxFQUFPMFgsRUFBSSxHQUNQbEksRUFBRy9XLElBQUl3VyxFQUFXbGlCLEVBQUU2QywyQkFDdEJvUSxFQUFPd1AsRUFBR2pMLFdBQVd2RSxFQUFNaVAsRUFBVWxpQixFQUFFNkMsaUNBQ2hDcWYsRUFBVWxpQixFQUFFNkMsMEJBRWQsQ0FBRXFmLEVBQVdqUCxHQUNwQixNQUFPblIsR0FDUDJDLEtBQUtvMkIsTUFBTS80QixLQUlmcTFDLEVBQWU1MUMsVUFBVWszQyxnQkFBa0IsU0FBVUMsRUFBWXgyQixHQUMvRCxJQXFCSThSLEVBQVc5eUIsRUFyQlhxVixFQUFPOVIsS0FFUGswQyxFQUFTLEdBWWIsU0FBU3BsQixFQUFXOU4sR0FJbEIsT0FBT0EsRUFBT3JnQixVQWJpQixPQUE3QlgsS0FBS2t6QyxzQkFDUGUsRUFBYWowQyxLQUFLbTBDLG1CQUFtQkYsSUFnQnZDLElBQUlHLEVBQWtCLEdBRXRCcDBDLEtBQUttdEIseUJBQXlCcHFCLFNBQVEsU0FBVTZyQixHQUM5Q0EsRUFBV2pNLGNBQWM1ZixTQUFRLFNBQVVzeEMsRUFBYW41QyxFQUFHc25CLEdBQ3pEL2xCLEVBQU1xeUIsRUFBV3VsQixHQUNacjJCLEVBQUcvVyxJQUFJbXRDLEVBQWlCMzNDLEtBQzNCMjNDLEVBQWdCMzNDLEdBQU8sS0FFekI4eUIsRUFBWTZrQixFQUFnQjMzQyxJQUNsQjRGLEtBQUs2VixNQUFNcVgsRUFBVy9NLEVBQWE1UCxNQUFNLEVBQUcxWCxJQUN0RHEwQixFQUFVbHRCLEtBQUs2VixNQUFNcVgsRUFBVy9NLEVBQWE1UCxNQUFNMVgsRUFBSSxVQU8zRCxJQUFJbzVDLEVBQXNCLEdBRXRCQyxFQUF3QixHQUU1Qk4sRUFBV2x4QyxTQUFRLFNBQVV5eEMsRUFBV0MsR0FDdEMsR0FBa0IsT0FBZEQsRUFFRixJQURBRCxFQUFzQmx5QyxLQUFLLEtBQ3BCb3lDLEVBQWlCUixFQUFXMTFDLFFBQ2pDZzJDLEVBQXNCbHlDLEtBQUssS0FDM0JveUMsUUFFRyxDQUdMLElBQUl2dEIsRUFDQXd0QixFQUFjNWlDLEVBQUs2aUMsZUFBZUgsR0FDakNFLEdBR0hKLEVBQW9CRyxHQUFrQkMsRUFDdEN4dEIsRUFBVSxLQUhWQSxFQUFVLElBS1pxdEIsRUFBc0JseUMsS0FBSzZrQixPQUcvQixJQUFJMHRCLEVBQW9CTCxFQUFzQjN6QyxLQUFLLElBRS9DaTBDLEVBQWMsR0FDZEMsRUFBd0IsR0FHNUIsU0FBU0MsRUFBVy96QixFQUFRZzBCLEVBQWlCbnlCLEdBQzNDZ3lCLEVBQVl4eUMsS0FBSzJlLEdBQ2pCLElBQUlpMEIsRUFBaUJuakMsRUFBS29qQyxXQUFXbDBCLEVBQVFnMEIsR0FLekNDLElBQW1CajBCLEVBQU8zZ0IsZUFDNUJ5MEMsRUFBc0J6eUMsS0FBSzJlLEdBQ3ZCb3pCLEVBQWdCdGxCLEVBQVc5TixLQUM3Qm96QixFQUFnQnRsQixFQUFXOU4sSUFBU2plLFNBQVEsU0FBVW95QyxHQUNwRCxHQUFJTCxFQUFzQmh4QyxRQUFRcXhDLElBQW1CLEVBQ25ELE1BQU0zb0IsRUFDSnhMLEVBQ0F0RCxFQUFPLGtDQUFtQ3kzQixFQUFleDBDLGdCQU8vRHMwQyxJQUFtQjE1QyxFQUFFdUMsVUFDdkJrakIsRUFBTzNsQixLQUFLeVcsRUFBTTJMLEVBQVd3M0IsRUFBZ0JweUIsR0FJakQsU0FBU3V5QixFQUFnQkMsR0FhdkIsSUFYQSxJQVNJN21DLEVBQU04bUMsRUFBVTNpQyxFQUFPNGlDLEVBVHZCYixFQUFjSixFQUFvQmUsR0FDbENyMEIsRUFBUzB6QixFQUFZLEdBQ3JCN3hCLEVBQWU2eEIsRUFBWSxHQUMzQmMsRUFBY2QsRUFBWSxHQUkxQmUsRUFBZSxLQUlWLENBQ1AsSUFBS3owQixFQUVILE9BREFrekIsRUFBTzd4QyxLQUFLNHhDLEVBQVdvQixJQUNoQkEsRUFBYSxFQUV0QixJQUFJRyxFQStCRyxDQUtMN2lDLEVBQVEwaUMsRUFBYSxFQUNyQixJQUFJSyxFQUFtQmQsRUFBa0IxK0IsT0FBT3ZELEdBR2hENGlDLEVBQU81aUMsR0FEUDJpQyxFQUFXeGpDLEVBQUs2akMsZUFBZTMwQixFQUFRMDBCLElBSXZDbG5DLEVBQU95bEMsRUFBV3JoQyxNQUFNRCxFQUFPNGlDLEdBRS9CRSxFQUFhcHpDLEtBQUssQ0FBRTJlLEVBQVF4UyxFQUFNcVUsSUFDbEMsTUE3Q0F5eUIsRUFBV3hqQyxFQUFLNmpDLGVBQWUzMEIsRUFBUSxLQUt2QyxJQUFJdE8sRUFBUVosRUFBSzhhLFlBQ2pCLEtBQWlCLElBQWIwb0IsR0FBa0I1aUMsRUFBTTVPLFFBQVErZSxFQUFhLElBQU0sR0FZaEQsSUFBaUIsSUFBYnl5QixFQUFnQixDQUd6QkMsRUFBT0YsRUFBYSxFQUNwQjdtQyxFQUFPLENBQUVnbkMsR0FDVEMsRUFBYXB6QyxLQUFLLENBQUUyZSxFQUFReFMsRUFBTXFVLElBQ2xDLE1BSUEsTUFBTTJKLEVBQW9CeEwsRUFBUWpELEVBQVEsK0JBQWdDeTNCLElBckIxRUMsRUFBYXB6QyxLQUFLLENBQUUyZSxFQUFRLEdBQUk2QixJQUNoQ0EsRUFBZUEsRUFBYSxHQUFLMnlCLEVBQVksR0FDN0MsSUFBSUksRUFBaUJKLEVBQVk1aUMsTUFBTSxJQUFNLEtBQ3pDaWpDLEVBQWUvakMsRUFBS21iLHFCQUV4QixLQUFJcnhCLE9BQU9vVixLQUFLNmtDLEdBQWMveEMsUUFBUStlLElBQWlCLEdBSXJELE1BQU0ySixFQUFvQnhMLEVBQVFqRCxFQUFRLCtCQUFnQ3kzQixJQUgxRXgwQixFQUFTNjBCLEVBQWFoekIsR0FDdEIyeUIsRUFBY0ksRUFzQ3RCLEdBQUlILEVBQWFsM0MsT0FBUyxFQUN4QixNQUFNLElBQUlrQixNQUFNLHdCQUVsQixJQUFLLElBQUl2RSxFQUFJLEVBQUdBLEVBQUl1NkMsRUFBYWwzQyxPQUFRckQsSUFDdkM2NUMsRUFBVzc4QixNQUFNcEcsRUFBTTJqQyxFQUFhdjZDLElBRXRDLE9BQU9xNkMsRUFLVCxJQUFJeHpCLEVBQWNqUSxFQUFLNmhDLHdCQUV2QixTQUFTbUMsRUFBbUJULEdBTzFCLElBTEEsSUFBSVUsRUFBa0JuQixFQUFrQjErQixPQUFPbS9CLEdBQzNDVyxFQUFZbGtDLEVBQUtta0MsdUJBQXVCbDBCLEVBQWFnMEIsR0FJaEQ3NkMsRUFBSSxFQUFHQSxFQUFJNm1CLEVBQVl4akIsT0FBUXJELElBQUssQ0FDM0MsSUFBSThsQixFQUFTZSxFQUFZN21CLEdBQ3JCbzZDLEVBQVdVLEVBQVU5NkMsR0FDekIsUUFBd0IsSUFBYm82QyxFQUFYLENBR0EsSUFBSTltQyxFQUFPeWxDLEVBQVdyaEMsTUFBTXlpQyxFQUFZQSxFQUFhQyxHQUVyREQsR0FBY0MsRUFDZFAsRUFBVy96QixFQUFReFMsSUFNckIsT0FEQXVULEVBQWNBLEVBQVluUCxNQUFNb2pDLEVBQVV6M0MsUUFDbkM4MkMsRUFLVCxJQUNJejhCLEVBUUFzOUIsRUFBcUJDLEVBVHJCZCxFQUFhLEVBR2JlLEdBQXdCLEVBUTVCLElBTkF4NkMsT0FBT29WLEtBQUtzakMsR0FBcUJ2eEMsU0FBUSxTQUFVNlYsR0FDakR3OUIsRUFBdUI1MEIsS0FBS0MsSUFBSTIwQixFQUFzQnI3QixTQUFTbkMsRUFBVSxRQUtwRXk4QixHQUFjZSxHQUFzQixDQUd6QyxJQUFLeDlCLEtBREx1OUIsRUFBd0IsS0FDUDdCLEVBQ1ZBLEVBQW9CdjNDLGVBQWU2YixLQUV4Q0EsRUFBV21DLFNBQVNuQyxFQUFVLE1BQ2R5OEIsSUFFWmMsRUFENEIsT0FBMUJBLEVBQ3NCMzBCLEtBQUs2QixJQUFJOHlCLEVBQXVCdjlCLEdBRWhDQSxHQUs5QixHQUFJeThCLElBQWVjLEVBQXVCLENBSXhDLElBSEFELEVBQXNCSixFQUFtQlQsSUFHZkEsRUFBWSxDQUNwQ0EsRUFBYWEsRUFDYixTQUVBYixFQUFhYSxFQU1qQixJQUFLNUIsRUFBb0JlLEdBQWEsQ0FDcEMsSUFBSTNtQyxFQUFVdWxDLEVBQVdyaEMsTUFBTXlpQyxFQUFZYyxHQUMzQ2pDLEVBQVNBLEVBQU8vMkIsT0FBT3pPLEdBQ3ZCMm1DLEVBQWFjLEVBR2ZkLEVBQWFELEVBQWdCQyxHQUkvQixJQUFJZ0IsRUFBWVAsRUFBbUJULEdBR25DbkIsRUFBU0EsRUFBTy8yQixPQUFPODJCLEVBQVdyaEMsTUFBTXlqQyxJQUlwQ3QwQixFQUFZeGpCLE9BQVMsR0FDdkJ1VCxFQUFLc2tCLE1BQU0scUJBSWJ0a0IsRUFBS2tiLFNBQVNqcUIsU0FBUSxTQUFVaWUsR0FDMUJBLEVBQU94Z0IsVUFDTHEwQyxFQUFZL3dDLFFBQVFrZCxHQUFVLEdBQ2hDbFAsRUFBS3NrQixNQUFNMVksRUFBTyw0QkFBNkJzRCxFQUFPcmdCLGVBNkI1RCxPQXRCQW1SLEVBQUtxYix5QkFBeUJwcUIsU0FBUSxTQUFVMmYsR0FDOUMsR0FBSUEsRUFBTWxpQixXQUNLa2lCLEVBQU1DLGNBQWMyTCxNQUFLLFNBQVV0TixHQUM5QyxPQUFrRCxJQUEzQzh6QixFQUFzQmh4QyxRQUFRa2QsTUFJdEIsQ0FDZixJQUFJcWpCLEVBQVEsR0FDWjNoQixFQUFNQyxjQUFjNWYsU0FBUSxTQUFVaWUsR0FDaENBLEVBQU92Z0IsT0FBU2xGLEVBQUV1QyxVQUNwQnVtQyxFQUFNaGlDLEtBQUsyZSxFQUFPcmdCLGNBSXRCLElBQUkyMUMsRUFBTSx5QkFEVmpTLEVBQVFBLEVBQU16akMsS0FBSyxNQUN5QixlQUM1Q2tSLEVBQUtza0IsTUFBTWtnQixPQU1WLENBQUU3NEIsRUFBV3kyQixJQUd0QnhCLEVBQWU1MUMsVUFBVXEzQyxtQkFBcUIsU0FBVUYsR0FFdEQsSUFBSW5pQyxFQUFPOVIsS0FDUHUyQyxFQUFLLEVBQVEsR0FDYkMsRUFBZ0IsR0F3QnBCLE9BdkJBdkMsRUFBV2x4QyxTQUFRLFNBQVV5eEMsR0FDM0IsR0FBSTFpQyxFQUFLb2hDLG9CQUFvQnB2QyxRQUFRMHdDLEVBQVUsSUFBTSxFQUVuRGdDLEVBQWNuMEMsS0FBS215QyxRQUduQixJQUNFLElBQUlpQyxFQUFVLEdBQ1ZDLEVBQVdsQyxFQUFVNWhDLE1BQU0sR0FDM0JuTCxFQUFVOHVDLEVBQUdJLGFBQWFELEVBQVUsU0FDeENqdkMsRUFBVUEsRUFBUXBFLE9BQU9DLE1BQU0sT0FDdkJQLFNBQVEsU0FBVTZ6QyxHQUN4QjlrQyxFQUFLK2tDLHFCQUFxQkQsR0FBUzd6QyxTQUFRLFNBQVVuRSxHQUNuRDYzQyxFQUFRcDBDLEtBQUt6RCxNQUVmNjNDLEVBQVUza0MsRUFBS3FpQyxtQkFBbUJzQyxNQUVwQ0QsRUFBY24wQyxLQUFLNlYsTUFBTXMrQixFQUFlQyxHQUN4QyxNQUFPcmdCLEdBQ1AsT0FBT3RrQixFQUFLc2tCLE1BQU1BLEVBQU14WSxhQUl2QjQ0QixHQUdUOUQsRUFBZTUxQyxVQUFVKzVDLHFCQUF1QixTQUFVRCxHQUN4RCxNQUFPLENBQUVBLElBR1hsRSxFQUFlNTFDLFVBQVU2NEMsZUFBaUIsU0FBVTMwQixFQUFRODFCLEdBRzFELElBRUlsNUIsRUFGQW01QixFQUFjLElBQUk3MkIsT0FBTyxJQUFNbGdCLEtBQUtnM0MsaUJBQWlCaDJCLElBQ3JEaTJCLEVBQVVILEVBQWlCM3BDLE1BQU00cEMsR0FJckMsSUFBS0UsRUFBUyxDQUNaLE9BQVFqMkIsRUFBTzdnQixPQUViLFVBQUtjLEVBQ0wsS0FBSyxLQUNIMmMsRUFBVSx5QkFDVixNQUNGLEtBQUtyaUIsRUFBRXdDLFNBQ0w2ZixFQUFVLGlDQUNWLE1BQ0YsS0FBS3JpQixFQUFFMEMsWUFDTDJmLEVBQVUsa0NBQ1YsTUFDRixRQUNFQSxFQUFVLDBCQUdkLE1BQU00TyxFQUNKeEwsRUFDQXRELEVBQU9FLEVBQVNvRCxFQUFPN2dCLFFBSTNCLE9BQU84MkMsRUFBUSxHQUFHMTRDLFFBR3BCbTBDLEVBQWU1MUMsVUFBVW01Qyx1QkFBeUIsU0FBVXIxQixFQUFTazJCLEdBR25FLElBRUlJLEVBQWFod0IsRUFBUyt2QixFQUN0Qi83QyxFQUFHZ1ksRUFGSDdFLEVBQVMsR0FJYixTQUFTOG9DLEVBQVVwcEMsR0FDakIsT0FBT0EsRUFBT3hQLE9BR2hCLElBQUtyRCxFQUFJMGxCLEVBQVFyaUIsT0FBUXJELEVBQUksRUFBR0EsSUFBSyxDQUduQyxJQUZBZ3NCLEVBQVUsR0FDVmd3QixFQUFjdDJCLEVBQVFoTyxNQUFNLEVBQUcxWCxHQUMxQmdZLEVBQUksRUFBR0EsRUFBSWdrQyxFQUFZMzRDLE9BQVEyVSxJQUNsQ2dVLEdBYk9sbkIsS0FhU2czQyxpQkFBaUJFLEVBQVloa0MsSUFNL0MsR0FIQWdVLEVBQVUsSUFBSWhILE9BQU8sSUFBTWdILElBQzNCK3ZCLEVBQVVILEVBQWlCM3BDLE1BQU0rWixLQUVsQit2QixFQUFRMTRDLE9BQVMsRUFBRyxDQUVqQzA0QyxFQUFVQSxFQUFReGhDLE9BQU8sR0FDekJwSCxFQUFTQSxFQUFPOE8sT0FBTzg1QixFQUFRcjRCLElBQUl1NEIsSUFDbkMsT0FLSixPQUFPOW9DLEdBR1Rxa0MsRUFBZTUxQyxVQUFVNjNDLGVBQWlCLFNBQVVILEdBQ2xELElBQVkzeEIsRUFBY3UwQixFQUFhQyxFQUd2QyxJQUFLN0MsRUFDSCxPQUFPLEtBSVQsR0FBSXgwQyxLQUFLNHNCLFlBQVk5b0IsUUFBUTB3QyxFQUFVLElBQU0sRUFDM0MsT0FBTyxLQUlULEdBQUl4MEMsS0FBS2l0QixxQkFBcUJ1bkIsR0FDNUIsTUFBTyxDQUFFeDBDLEtBQUtpdEIscUJBQXFCdW5CLEdBQVlBLEVBQVcsTUFJNUQsR0FBeUIsSUFBckJBLEVBQVVqMkMsT0FDWixPQUFPLEtBSVQsR0FBSWkyQyxFQUFVMXdDLFFBQVEsTUFBUSxJQUM1QitlLEVBQWUyeEIsRUFBVWx4QyxNQUFNLElBQUssR0FBRyxHQUN2Qzh6QyxFQUFjNUMsRUFBVTVoQyxNQUFNaVEsRUFBYXRrQixPQUFTLEdBRWhEeUIsS0FBS2l0QixxQkFBcUJwSyxJQUU1QixNQUFPLENBREU3aUIsS0FBS2l0QixxQkFBcUJwSyxHQUNsQkEsRUFBY3UwQixHQVNuQyxJQUhBQyxFQUFlcjNDLEtBQUtzM0MsaUJBQWlCOUMsSUFHcEJqMkMsT0FBUyxFQUFHLENBQzNCLElBQUkwQixFQUFnQm8zQyxFQUFhejRCLEtBQUksU0FBVTgxQixHQUM3QyxPQUFPQSxFQUFZLE1BRXJCMTBDLEtBQUtvMkIsTUFBTTFZLEVBQ0wseUNBQ0E4MkIsRUFBV3YwQyxFQUFjVyxLQUFLLGFBSS9CLEdBQTRCLElBQXhCeTJDLEVBQWE5NEMsT0FDdEIsT0FBTzg0QyxFQUFhLEdBTXRCLE9BQUk3QyxFQUFVcm5DLE1BQU1uTixLQUFLcXRCLHlCQUNsQnJ0QixLQUFLc3RCLDRCQUE0QmdCLEtBQUtDLFVBS3pDaW1CLEVBQVUrQyxPQUFPLE1BQVEsRUFKbEIsS0FVSixDQUFFLEtBQU0vQyxFQUFXLE9BRzVCOUIsRUFBZTUxQyxVQUFVdzZDLGlCQUFtQixTQUFVejBCLEdBQ3BELElBRUkyMEIsRUFDQUosRUFDQXAyQixFQUNBeTJCLEVBTEFwcEMsRUFBUyxHQUNUcUUsRUFBUTFTLEtBQUs0c0IsWUFRakIsR0FBSWxhLEVBQU01TyxRQUFRK2UsRUFBYSxLQUFPLEdBQUtuUSxFQUFNNU8sUUFBUStlLEVBQWEsS0FBTyxFQUFHLENBQzlFLEdBQUlBLEVBQWEvZSxRQUFRLE1BQVEsRUFBRyxDQUNsQyxJQUFJNHpDLEVBQW9CNzBCLEVBQWF2ZixNQUFNLElBQUssR0FFaERrMEMsRUFBZUUsRUFBa0IsR0FDakNOLEVBQWNNLEVBQWtCLFFBRWhDRixFQUFlMzBCLEVBQ2Z1MEIsRUFBYyxLQUdoQixJQUFLSyxLQUFzQnozQyxLQUFLaXRCLHFCQUMxQndxQixFQUFtQnZoQyxPQUFPLEVBQUdzaEMsRUFBYWo1QyxVQUFZaTVDLElBQ3hEeDJCLEVBQVNoaEIsS0FBS2l0QixxQkFBcUJ3cUIsR0FDbkNwcEMsRUFBT2hNLEtBQUssQ0FBRTJlLEVBQVF5MkIsRUFBb0JMLFNBT3pDLE1BQUkxa0MsRUFBTTVPLFFBQVErZSxFQUFhLEtBQU8sR0FBS25RLEVBQU01TyxRQUFRK2UsRUFBYSxJQUFNLEdBbUJqRixNQUFNLElBQUlwakIsTUFBTWllLEVBQU8sZ0NBQWlDbUYsSUFsQnhEMjBCLEVBQWUzMEIsRUFDZnUwQixFQUFjLEtBQ2QsSUFBSU8sRUFBb0I5MEIsRUFBYTNNLE9BQU8sRUFBRyxHQUMzQzBoQyxFQUFtQi8wQixFQUFhM00sT0FBTyxHQUUzQyxJQUFLdWhDLEtBQXNCejNDLEtBQUtpdEIscUJBQ3pCalAsRUFBRy9XLElBQUlqSCxLQUFLaXRCLHFCQUFzQndxQixLQUV2Q3oyQixFQUFTaGhCLEtBQUtpdEIscUJBQXFCd3FCLEdBQy9CQSxJQUF1QkUsRUFDekJ0cEMsRUFBT2hNLEtBQUssQ0FBRTJlLEVBQVF5MkIsRUFBb0JHLElBQ2pDSCxFQUFtQnZoQyxPQUFPLEVBQUdzaEMsRUFBYWo1QyxVQUFZaTVDLEdBQy9EbnBDLEVBQU9oTSxLQUFLLENBQUUyZSxFQUFReTJCLEVBQW9CTCxLQVNoRCxPQUFPL29DLEdBR1Rxa0MsRUFBZTUxQyxVQUFVazZDLGlCQUFtQixTQUFVaDJCLEdBR3BELElBQUkrMUIsRUFFSixPQUFRLzFCLEVBQU83Z0IsT0FFYixVQUFLYyxFQUNMLEtBQUssS0FDSDgxQyxFQUFjLFVBQ2QsTUFFRixLQUFLeDdDLEVBQUV3QyxTQUNMZzVDLEVBQWMsV0FDZCxNQUVGLEtBQUt4N0MsRUFBRXlDLGFBQ0wrNEMsRUFBYyxZQUNkLE1BRUYsS0FBS3g3QyxFQUFFMEMsWUFDTDg0QyxFQUFjLGFBQ2QsTUFFRixLQUFLeDdDLEVBQUU0QyxVQUNMNDRDLEVBQWMsV0FDZCxNQUVGLEtBQUt4N0MsRUFBRTJDLE9BQ0w2NEMsRUFBYyxjQUNkLE1BRUYsUUFDRUEsRUFBYyxNQUFRLzRCLEVBQUcxTCxPQUFPLE1BQU8wTyxFQUFPN2dCLE9BQVMsTUFVM0QsT0FOSTZnQixFQUFPbmdCLGVBRVRrMkMsR0FEQUEsRUFBY0EsRUFBWW56QyxRQUFRLE9BQVEsS0FDaEJBLFFBQVEsS0FBTSxLQUluQ216QyxHQU9UckUsRUFBZTUxQyxVQUFVbzRDLFdBQWEsU0FBVWwwQixFQUFRaXpCLEdBQ3RELElBU0k5M0MsRUFBT3E0QyxFQVRQMWlDLEVBQU85UixLQTZEWCxPQTFESWdoQixFQUFPN2dCLFFBQVU1RSxFQUFFMkMsUUFBVThpQixFQUFPN2dCLFFBQVU1RSxFQUFFNEMsWUFDbEQ4MUMsRUFBYUEsRUFBVzcyQixRQUFPLFNBQVV5NkIsR0FDdkMsTUFBd0IsT0FBakJBLE1BT2UsSUFBdEI1RCxFQUFXMTFDLFFBQWdCeWlCLEVBQU83Z0IsUUFBVTVFLEVBQUV3QyxTQUl6QixpQkFGdkI1QixFQUFTNmtCLEVBQU9uZ0IsYUFBZ0JtZ0IsRUFBTzVnQixTQUFXNGdCLEVBQU8zZ0IsZ0JBR3ZEbEUsRUFBUTZELEtBQUsrekMsVUFBVS95QixFQUFRN2tCLEdBQy9CNkQsS0FBSzgzQyxZQUFZOTJCLEVBQVE3a0IsSUFLSSxJQUF0QjgzQyxFQUFXMTFDLFFBQWdCeWlCLEVBQU83Z0IsUUFBVTVFLEVBQUV5QyxjQUN2QixJQUFoQ2dqQixFQUFPL2dCLGNBQWMxQixRQUVyQnBDLEVBQVM2a0IsRUFBTzNnQixjQUFnQjR6QyxFQUNoQ2owQyxLQUFLODNDLFlBQVk5MkIsRUFBUTdrQixJQUdNLElBQXRCODNDLEVBQVcxMUMsUUFDZHlpQixFQUFPN2dCLE9BQVM2Z0IsRUFBTzdnQixRQUFVNUUsRUFBRXdDLFNBT2hDaWpCLEVBQU83Z0IsUUFBVTVFLEVBQUU0QyxVQUM1QmhDLEVBQVE4M0MsRUFBV3IxQixLQUFJLFNBQVVqYixHQUMvQixPQUFPbU8sRUFBS2lpQyxVQUFVL3lCLEVBQVFyZCxNQUl2QnFkLEVBQU83Z0IsUUFBVTVFLEVBQUUyQyxRQUM1Qi9CLEVBQVE4M0MsRUFBV3IxQixLQUFJLFNBQVVqYixHQUMvQixPQUFPbU8sRUFBS2lpQyxVQUFVL3lCLEVBQVFyZCxNQUVoQzNELEtBQUs4M0MsWUFBWTkyQixFQUFRN2tCLEVBQU0sTUFJL0JBLEVBQVE4M0MsRUFBV3IxQixLQUFJLFNBQVVqYixHQUMvQixPQUFPbU8sRUFBS2lpQyxVQUFVL3lCLEVBQVFyZCxPQUUxQlosU0FBUSxTQUFVWSxHQUN0Qm1PLEVBQUtnbUMsWUFBWTkyQixFQUFRcmQsT0F2QjNCNndDLEVBQVlQLEVBQVcsR0FDdkI5M0MsRUFBUTZELEtBQUsrekMsVUFBVS95QixFQUFRd3pCLEdBQy9CeDBDLEtBQUs4M0MsWUFBWTkyQixFQUFRN2tCLElBMEJwQkEsR0FHVHUyQyxFQUFlNTFDLFVBQVVpM0MsVUFBWSxTQUFVL3lCLEVBQVF3ekIsR0FDckQsSUFBSW5tQyxFQUVBNGYsRUFBZWp1QixLQUFLMHRCLGFBQWEsT0FBUTFNLEVBQU8xZ0IsS0FBTTBnQixFQUFPMWdCLE1BQ2pFLEdBQTRCLG1CQUFqQjJ0QixFQUE2QixDQUN0QyxJQUFJclEsRUFBVUYsRUFBTyxxQkFBc0J1USxHQUMzQyxNQUFNekIsRUFBb0J4TCxFQUFRcEQsR0FJcEMsSUFDRXZQLEVBQVM0ZixFQUFhdW1CLEdBTXRCLE1BQU9uM0MsR0FDUCxJQUFJNUIsRUFBTyxLQUVUQSxFQUR5QixpQkFBaEJ1bEIsRUFBTzFnQixLQUNUMGdCLEVBQU8xZ0IsS0FFUDBnQixFQUFPMWdCLEtBQUs3RSxNQUFRdWxCLEVBQU8xZ0IsS0FBSzBuQixhQUFlLGFBRXhELElBQUlzdUIsRUFBTTU0QixFQUFPLHVCQUF3QmppQixFQUFNKzRDLEdBRS9DLEtBRGEsZUFBVC80QyxJQUF5QjY2QyxHQUFPLEtBQU9qNUMsRUFBRXVnQixTQUN2QzRPLEVBQW9CeEwsRUFBUXMxQixHQUdwQyxPQUFPam9DLEdBR1Rxa0MsRUFBZTUxQyxVQUFVZzdDLFlBQWMsU0FBVTkyQixFQUFRN2tCLEdBRXZELElBQUlvRSxFQUFVeWdCLEVBQU96Z0IsUUFDckIsR0FBSUEsRUFBUyxDQUVYLElBQXdCLGlCQUFaQSxHQUF3QjFCLE1BQU1GLFFBQVE0QixNQUNsQixJQUE1QkEsRUFBUXVELFFBQVEzSCxHQUNsQixPQUdGLEdBQXVCLGlCQUFab0UsSUFBeUIxQixNQUFNRixRQUFRNEIsSUFBWUEsRUFBUXBFLEdBQ3BFLE9BSUFvRSxFQURxQixpQkFBWkEsRUFDQ0EsRUFBUStDLE1BQU0sSUFBSTFDLEtBQUssTUFDeEIvQixNQUFNRixRQUFRNEIsR0FDWkEsRUFBUUssS0FBSyxNQUViaEYsT0FBT29WLEtBQUt6USxHQUFTSyxLQUFLLE1BRXZDLElBQUlnZCxFQUFVRixFQUFPLHdDQUF5Q3ZoQixFQUFPb0UsR0FDckUsTUFBTWlzQixFQUFvQnhMLEVBQVFwRCxLQWlCdEM4MEIsRUFBZTUxQyxVQUFVaTdDLFlBQWMsV0FDckMsSUFBSXQ1QixFQUFZemUsS0FBSzB6QyxnQkFFckIsT0FEQWoxQixFQUFVaUMsU0FBUzFnQixLQUFLMmdCLE1BQU8zZ0IsS0FBS2d0QixTQUFVaHRCLEtBQUttdEIsMEJBQzVDMU8sRUFBVUQsY0FZbkJrMEIsRUFBZTUxQyxVQUFVMGhCLFdBQWEsV0FDcEMsSUFBSUMsRUFBWXplLEtBQUswekMsZ0JBb0JyQixPQWpCQWoxQixFQUFVaUMsU0FBUzFnQixLQUFLMmdCLE1BQU8zZ0IsS0FBS2d0QixTQUFVaHRCLEtBQUttdEIsMEJBR25EMU8sRUFBVStCLFFBQVF4Z0IsS0FBSzBzQixhQUd2QjFzQixLQUFLa3RCLGNBQWNucUIsU0FBUSxTQUFVaTFDLEdBQ25DdjVCLEVBQVU0QixhQUFhMjNCLEVBQVlycEIsT0FDbkNsUSxFQUFVK0IsUUFBUXczQixFQUFZdHJCLGFBQzlCak8sRUFBVWtELGFBQWFxMkIsRUFBWXIxQixlQUNuQ2xFLEVBQVU4QixnQkFJWjlCLEVBQVUrQixRQUFReGdCLEtBQUtnekMsUUFHaEJ2MEIsRUFBVUQsY0FHbkJrMEIsRUFBZTUxQyxVQUFVNDJDLGNBQWdCLFdBR3ZDLE9BRGdCLElBQUl1RSxFQURDajRDLEtBQUtpekMsZ0JBQ1MsQ0FBRTl6QixLQUFNbmYsS0FBS21mLFFBaUJsRHV6QixFQUFlNTFDLFVBQVVvN0MsV0FBYSxXQUNwQ2w0QyxLQUFLbTRDLGNBQWNuNEMsS0FBSyszQyxnQkFZMUJyRixFQUFlNTFDLFVBQVVzN0MsVUFBWSxXQUNuQ3A0QyxLQUFLbTRDLGNBQWNuNEMsS0FBS3dlLGVBRzFCazBCLEVBQWU1MUMsVUFBVXE3QyxjQUFnQixTQUFVdjZCLEVBQVNpVSxHQUNyREEsSUFDSEEsRUFBU2hXLFFBQVEwWixRQUVmM1gsR0FDRmlVLEVBQU80QixNQUFNLEdBQUs3VixJQWV0QjgwQixFQUFlNTFDLFVBQVV1N0MsS0FBTyxTQUFVQyxFQUFRMTZCLEdBQzVDQSxJQUNhLElBQVgwNkIsRUFDRnQ0QyxLQUFLbTRDLGNBQWN2NkIsR0FFbkI1ZCxLQUFLbTRDLGNBQWN2NkIsRUFBUy9CLFFBQVEyWixTQUl4QzNaLFFBQVF3OEIsS0FBS0MsSUFhZjVGLEVBQWU1MUMsVUFBVXM1QixNQUFRLFNBQVVoa0IsR0FDekMsSUFBSXdMLEVBQ0osR0FBSXhMLGFBQWUzUyxNQUFPLENBQ3hCLElBQW1CLElBQWZPLEtBQUt1NkIsTUFDUCxNQUFNbm9CLEVBRVJ3TCxFQUFVeEwsRUFBSXdMLGFBRWRBLEVBQVV4TCxFQUVaLElBQUlra0MsRUFBTTU0QixFQUFPLGdCQUFpQjFkLEtBQUttZixLQUFNdkIsR0FBV3JpQixFQUFFc0MsSUFFMUQsSUFBbUIsSUFBZm1DLEtBQUt1NkIsTUFDUCxNQUFNLElBQUk5NkIsTUFBTTYyQyxHQUtsQixPQUZBdDJDLEtBQUtrNEMsV0FBV3I4QixRQUFRMlosUUFFakJ4MUIsS0FBS3E0QyxLQUFLLEVBQUcvQixJQUd0QnI3QyxFQUFPRCxRQUFVMDNDLEcsNkJDaG9DakIsSUFBSXYxQyxFQUFPLEVBQVEsR0FFZjJDLEVBQVMsRUFBUSxJQUdqQnZFLEVBQUssRUFBUSxHQU9id3dCLEVBQWE5d0IsRUFBT0QsUUFBVSxTQUFvQitFLEdBRXZCLFFBRDdCQSxFQUFVQSxHQUFXLElBQ1RNLGFBQ1ZOLEVBQVFNLGFBQWVOLEVBQVFNLGFBRS9CTixFQUFRTSxhQUFlOUUsRUFBRXVDLFNBRTNCaUMsRUFBUUcsS0FBeUIsT0FBakJILEVBQVFHLEtBQWdCSCxFQUFRRyxLQUFPM0UsRUFBRXVDLFNBQ3pEaUMsRUFBUUksTUFBUSxFQUNoQkwsRUFBT3pFLEtBQUsyRSxLQUFNRCxJQUdwQjVDLEVBQUtDLFNBQVMydUIsRUFBWWpzQixHQVcxQmlzQixFQUFXanZCLFVBQVV6QixLQUFPLFNBQVVtaUIsR0FDcENBLEVBQU80NkIsWUFDUDU2QixFQUFPNjZCLFMsNkJDbENULElBQUlsN0MsRUFBTyxFQUFRLEdBRWYyQyxFQUFTLEVBQVEsSUFHakJ2RSxFQUFJLEVBQVEsR0FTWnl3QixFQUFlL3dCLEVBQU9ELFFBQVUsU0FBc0IrRSxHQUV4RCxHQURBQSxFQUFVQSxHQUFXLEdBQ2pCQyxLQUFLRyxPQUFTLEVBQ2hCLE1BQU0sSUFBSVYsTUFBTSwrSUFJbEIsR0FBTU8sS0FBS0ksVUFBWUosS0FBS0csUUFBVTVFLEVBQUV3QyxTQUN0QyxNQUFNLElBQUkwQixNQUFNLDBDQUVsQkssRUFBT3pFLEtBQUsyRSxLQUFNRCxJQUVwQjVDLEVBQUtDLFNBQVM0dUIsRUFBY2xzQixHQVc1QmtzQixFQUFhbHZCLFVBQVV6QixLQUFPLFNBQVVtaUIsRUFBUUMsRUFBV3pLLEdBQ3pELElBQUl1bEMsR0FBUzk2QixFQUFVemQsS0FBS0UsT0FBUyxJQUFJMFMsUUFDekMybEMsRUFBTWwyQyxLQUFLMlEsR0FDWHlLLEVBQVU1VyxJQUFJN0csS0FBS0UsS0FBTXE0QyxLLDZCQ3JDM0IsSUFBSXA3QyxFQUFPLEVBQVEsR0FFZjJDLEVBQVMsRUFBUSxJQU9qQm1zQixFQUF1Qmh4QixFQUFPRCxRQUFVLFNBQThCK0UsR0FHeEUsSUFGQUEsRUFBVUEsR0FBVyxJQUNiSSxNQUFRLE9BQ2dCLElBQXJCSixFQUFRSyxTQUNqQixNQUFNLElBQUlYLE1BQU0sZ0RBRWxCSyxFQUFPekUsS0FBSzJFLEtBQU1ELElBRXBCNUMsRUFBS0MsU0FBUzZ1QixFQUFzQm5zQixHQVdwQ21zQixFQUFxQm52QixVQUFVekIsS0FBTyxTQUFVbWlCLEVBQVFDLEdBQ3RELElBQUk4NkIsRUFBUSxHQUFHcDdCLE9BQU9NLEVBQVV6ZCxLQUFLRSxPQUFTLElBQzlDcTRDLEVBQU1sMkMsS0FBS3JDLEtBQUtJLFVBQ2hCcWQsRUFBVTVXLElBQUk3RyxLQUFLRSxLQUFNcTRDLEssNkJDbEMzQixJQUFJcDdDLEVBQU8sRUFBUSxHQUVmMkMsRUFBUyxFQUFRLElBT2pCb3NCLEVBQWNqeEIsRUFBT0QsUUFBVSxTQUFxQitFLElBQ3REQSxFQUFVQSxHQUFXLElBQ2JJLE1BQVEsRUFFaEJMLEVBQU96RSxLQUFLMkUsS0FBTUQsSUFFcEI1QyxFQUFLQyxTQUFTOHVCLEVBQWFwc0IsR0FXM0Jvc0IsRUFBWXB2QixVQUFVekIsS0FBTyxTQUFVbWlCLEVBQVFDLEdBQzdDQSxFQUFVNVcsSUFBSTdHLEtBQUtFLE1BQU91ZCxFQUFVemQsS0FBS0UsT0FBUyxHQUFLLEssNkJDNUJ6RCxJQUFJL0MsRUFBTyxFQUFRLEdBRWYyQyxFQUFTLEVBQVEsSUFHakJ2RSxFQUFJLEVBQVEsR0FRWjR3QixFQUFjbHhCLEVBQU9ELFFBQVUsU0FBcUIrRSxHQUV0RCxHQURBQSxFQUFVQSxHQUFXLEdBQ2pCQyxLQUFLRyxPQUFTLEVBQ2hCLE1BQU0sSUFBSVYsTUFBTSx3SUFLbEIsUUFBNkIsSUFBbEJPLEtBQUtJLFVBQTRCSixLQUFLRyxRQUFVNUUsRUFBRXdDLFNBQzNELE1BQU0sSUFBSTBCLE1BQU0sMENBRWxCSyxFQUFPekUsS0FBSzJFLEtBQU1ELElBRXBCNUMsRUFBS0MsU0FBUyt1QixFQUFhcnNCLEdBVzNCcXNCLEVBQVlydkIsVUFBVXpCLEtBQU8sU0FBVW1pQixFQUFRQyxFQUFXekssR0FDeER5SyxFQUFVNVcsSUFBSTdHLEtBQUtFLEtBQU04UyxLLDZCQ3RDM0IsSUFBSTdWLEVBQU8sRUFBUSxHQUVmb2dCLEVBQXNCLEVBQVEsSUFPOUI2TyxFQUFrQm54QixFQUFPRCxRQUFVLFNBQXlCK0UsSUFDOURBLEVBQVVBLEdBQVcsSUFDYkssVUFBVyxFQUNuQkwsRUFBUU0sYUFBd0MsT0FBekJOLEVBQVFNLGNBQXdCTixFQUFRTSxhQUMvRGtkLEVBQW9CbGlCLEtBQUsyRSxLQUFNRCxJQUVqQzVDLEVBQUtDLFNBQVNndkIsRUFBaUI3TyxJLDZCQ2QvQixJQUFJcGdCLEVBQU8sRUFBUSxHQUVmb2dCLEVBQXNCLEVBQVEsSUFPOUI4TyxFQUFtQnB4QixFQUFPRCxRQUFVLFNBQTBCK0UsSUFDaEVBLEVBQVVBLEdBQVcsSUFDYkssVUFBVyxFQUNuQkwsRUFBUU0sYUFBd0MsT0FBekJOLEVBQVFNLGNBQXdCTixFQUFRTSxhQUMvRGtkLEVBQW9CbGlCLEtBQUsyRSxLQUFNRCxJQUVqQzVDLEVBQUtDLFNBQVNpdkIsRUFBa0I5TyxJLDZCQ2xCaEMsSUFBSXBnQixFQUFPLEVBQVEsR0FFZjJDLEVBQVMsRUFBUSxJQUtqQnZFLEVBQUksRUFBUSxHQU9aK3dCLEVBQWdCcnhCLEVBQU9ELFFBQVUsU0FBdUIrRSxJQUMxREEsRUFBVUEsR0FBVyxJQUNiTSxhQUFnQk4sRUFBUU0sYUFBZU4sRUFBUU0sYUFBZTlFLEVBQUV1QyxTQUN4RWlDLEVBQVFHLEtBQVFILEVBQVFHLE1BQVEzRSxFQUFFdUMsU0FDbENpQyxFQUFRSSxNQUFRLEVBQ2hCSCxLQUFLOGIsUUFBVS9iLEVBQVErYixRQUN2QmhjLEVBQU96RSxLQUFLMkUsS0FBTUQsSUFFcEI1QyxFQUFLQyxTQUFTa3ZCLEVBQWV4c0IsR0FXN0J3c0IsRUFBY3h2QixVQUFVekIsS0FBTyxTQUFVbWlCLEdBQ3ZDLElBQUkxQixFQUFVOWIsS0FBSzhiLFNBQVcwQixFQUFPMUIsUUFDakMyQyxFQUFZakIsRUFBT2syQixnQkFDdkJqMUIsRUFBVStCLFFBQVExRSxHQUNsQjBCLEVBQU82NkIsS0FBSyxFQUFHNTVCLEVBQVVELGdCLDZCQ3BDM0IsSUFBSXJoQixFQUFVLEVBQVEsR0FDbEJ1Z0IsRUFBVSxFQUFRLEdBQVFBLE9BRzFCNWQsRUFBUyxFQUFRLElBR2pCdkUsRUFBSSxFQUFRLEdBR1ppeEIsRUFBc0IsRUFBUSxJQVNsQyxTQUFTZ3NCLEVBQW9CLzhDLEVBQU1nRixHQUNqQyxJQUFJVixFQUFVLENBQ1pFLGNBQWUsR0FDZkMsS0FBTXpFLEVBQ05nRixLQUFNQSxHQUdSWCxFQUFPekUsS0FBSzJFLEtBQU1ELEdBVXBCLFNBQVN3c0IsRUFBaUJ4c0IsSUFDeEJBLEVBQVVBLEdBQVcsSUFDYkcsS0FBT0gsRUFBUUcsTUFBUTNFLEVBQUV1QyxTQUNqQ2lDLEVBQVFJLE1BQVE1RSxFQUFFMkMsT0FFbEI4QixLQUFLdTZCLE9BQTJCLElBQWxCeDZCLEVBQVF3NkIsTUFFdEJ2NkIsS0FBS3k0QyxZQUFjMTRDLEVBQVFvZixLQUMzQm5mLEtBQUswNEMsYUFBZTM0QyxFQUFRMHpDLFlBQzVCenpDLEtBQUsyNEMsZUFBaUIsR0FDdEIzNEMsS0FBSzQ0QyxnQkFBa0IsR0FFdkI3NEMsRUFBUVEsUUFBVVAsS0FBSzI0QyxlQUN2Qjc0QyxFQUFPekUsS0FBSzJFLEtBQU1ELEdBcEJwQjVDLEVBQUtDLFNBQVNvN0MsRUFBcUIxNEMsR0F1Qm5DM0MsRUFBS0MsU0FBU212QixFQUFrQnpzQixHQWFoQ3lzQixFQUFpQnp2QixVQUFVKzdDLFVBQVksU0FBVXA5QyxFQUFNc0UsR0FDckQsSUFBSXlkLEVBRUExTCxFQUFPOVIsTUFFWEQsRUFBVUEsR0FBVyxJQUVidzZCLE9BQXdCLElBQWZ2NkIsS0FBS3U2QixNQUdqQng2QixFQUFRb2YsT0FDWHBmLEVBQVFvZixLQUFPbmYsS0FBS3k0QyxZQUFjLElBQU1oOUMsR0FHMUMsSUFBSXdzQixFQUFVbG9CLEVBQVFrb0IsU0FBVyxHQUdqQyxHQUFNbG9CLEVBQVFVLE1BQWdDLGlCQUFqQlYsRUFBUVUsS0FBbUIsQ0FDdEQsSUFBSUEsRUFBT1YsRUFBUVUsWUFDWlYsRUFBUVUsS0FFZixJQUFJcTRDLEVBQWUsSUFBSU4sRUFBb0IvOEMsRUFBTWdGLEdBQ2pEVCxLQUFLNDRDLGdCQUFnQnYyQyxLQUFLeTJDLEdBWTVCLE9BUkF0N0IsRUFBUyxJQUFJeGQsS0FBSzA0QyxhQUFhMzRDLEdBQy9CQyxLQUFLMjRDLGVBQWVsOUMsR0FBUStoQixFQUc1QnlLLEVBQVFsbEIsU0FBUSxTQUFVMGtCLEdBQ3hCM1YsRUFBSzZtQyxlQUFlbHhCLEdBQVNqSyxLQUd4QkEsR0FHVCtPLEVBQWlCenZCLFVBQVV1a0IsZUFBaUIsV0FDMUMsT0FBT3JoQixLQUFLNDRDLGlCQVlkcnNCLEVBQWlCenZCLFVBQVV6QixLQUFPLFNBQVVtaUIsRUFBUUMsRUFBV3pLLEdBQzdELElBQUkrbEMsRUFBYS9sQyxFQUFPLEdBQ3BCaWhDLEVBQWFqaEMsRUFBT0osTUFBTSxHQVE5QixHQUxJNVMsS0FBS0UsT0FBUzNFLEVBQUV1QyxXQUNsQjJmLEVBQVV6ZCxLQUFLRSxNQUFRNjRDLElBSXJCLzRDLEtBQUsyNEMsZUFBZUksR0FHdEIsTUFBTXZzQixFQUFvQjlPLEVBQ3hCLHVDQUNFcTdCLEVBQ0FuOUMsT0FBT29WLEtBQUtoUixLQUFLMjRDLGdCQUFnQi8zQyxLQUFLLFFBTGpDWixLQUFLMjRDLGVBQWVJLEdBVXhCbEYsVUFBVUksRUFBWXgyQixJQUcvQnhpQixFQUFPRCxRQUFVdXhCLEcsNkJDdElqQixJQUFJcHZCLEVBQU8sRUFBUSxHQUVmb3dCLEVBQWdCLEVBQVEsSUFVeEJDLEVBQXlCdnlCLEVBQU9ELFFBQVUsU0FBZ0NzRyxFQUFXdkIsR0FDdkYsSUFBSVMsRUFFSkEsR0FEQVQsRUFBVUEsR0FBVyxJQUNGUyxXQUFZLEVBQy9CK3NCLEVBQWNseUIsS0FBSzJFLEtBQU1zQixHQUN6QnRCLEtBQUtRLFNBQVdBLEdBR2xCckQsRUFBS0MsU0FBU293QixFQUF3QkQsR0FHdENDLEVBQXVCMXdCLFVBQVVveEIsV0FBYSxTQUFVbE4sR0FFdEQsR0FBSUEsRUFBT3hnQixTQUVULEtBRE0sZ0RBQ0EsSUFBSWYsTUFESixpREFLUixPQUZBdWhCLEVBQVNoaEIsS0FBSzJ2QixXQUFXekIsV0FBV2xOLEdBQ3BDaGhCLEtBQUsyaUIsY0FBY3RnQixLQUFLMmUsR0FDakJBLEdBSVR3TSxFQUF1QjF3QixVQUFVMHhCLGNBQWdCLFNBQVV4TixHQUN6RGhoQixLQUFLMnZCLFdBQVduQixjQUFjeE4sR0FDOUJoaEIsS0FBSzJpQixjQUFjbW1CLE9BQU85bkIsSzs7Ozs7O0FDekM1Qi9sQixFQUFPRCxRQUFVLEVBQVEsSzs7Ozs7Ozs7R0NEWixJQUFJRyxFQUFFLEVBQVEsSUFBaUJ3QixFQUFFLG1CQUFvQlYsUUFBUUEsT0FBTys4QyxJQUFJaDhDLEVBQUVMLEVBQUVWLE9BQU8rOEMsSUFBSSxpQkFBaUIsTUFBTWowQyxFQUFFcEksRUFBRVYsT0FBTys4QyxJQUFJLGdCQUFnQixNQUFNaDlDLEVBQUVXLEVBQUVWLE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTTU4QyxFQUFFTyxFQUFFVixPQUFPKzhDLElBQUkscUJBQXFCLE1BQU1sekMsRUFBRW5KLEVBQUVWLE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTXIxQyxFQUFFaEgsRUFBRVYsT0FBTys4QyxJQUFJLGtCQUFrQixNQUFNLzBDLEVBQUV0SCxFQUFFVixPQUFPKzhDLElBQUksaUJBQWlCLE1BQU0vekMsRUFBRXRJLEVBQUVWLE9BQU8rOEMsSUFBSSxxQkFBcUIsTUFBTXJ6QyxFQUFFaEosRUFBRVYsT0FBTys4QyxJQUFJLGtCQUFrQixNQUFNeHpDLEVBQUU3SSxFQUFFVixPQUFPKzhDLElBQUksY0FBYyxNQUFNOXpDLEVBQUV2SSxFQUFFVixPQUFPKzhDLElBQUksY0FDeGUsTUFBTTV6QyxFQUFFLG1CQUFvQm5KLFFBQVFBLE9BQU9xdEMsU0FBUyxTQUFTMWpDLEVBQUVwQyxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUVqSSxFQUFFLEVBQUVBLEVBQUUrQyxVQUFVQyxPQUFPaEQsSUFBSWtJLEdBQUcsV0FBV3cxQyxtQkFBbUIzNkMsVUFBVS9DLElBQUksTUFBTSx5QkFBeUJpSSxFQUFFLFdBQVdDLEVBQUUsaUhBQy9QLElBQUk4QixFQUFFLENBQUMyekMsVUFBVSxXQUFXLE9BQU0sR0FBSUMsbUJBQW1CLGFBQWFDLG9CQUFvQixhQUFhQyxnQkFBZ0IsY0FBYzd5QyxFQUFFLEdBQUcsU0FBUzNDLEVBQUVMLEVBQUVDLEVBQUVsSSxHQUFHeUUsS0FBSytULE1BQU12USxFQUFFeEQsS0FBS3dILFFBQVEvRCxFQUFFekQsS0FBS3M1QyxLQUFLOXlDLEVBQUV4RyxLQUFLdTVDLFFBQVFoK0MsR0FBR2dLLEVBQ3BOLFNBQVNqQixLQUE2QixTQUFTUSxFQUFFdEIsRUFBRUMsRUFBRWxJLEdBQUd5RSxLQUFLK1QsTUFBTXZRLEVBQUV4RCxLQUFLd0gsUUFBUS9ELEVBQUV6RCxLQUFLczVDLEtBQUs5eUMsRUFBRXhHLEtBQUt1NUMsUUFBUWgrQyxHQUFHZ0ssRUFEc0cxQixFQUFFL0csVUFBVTA4QyxpQkFBaUIsR0FBRzMxQyxFQUFFL0csVUFBVTI4QyxTQUFTLFNBQVNqMkMsRUFBRUMsR0FBRyxHQUFHLGlCQUFrQkQsR0FBRyxtQkFBb0JBLEdBQUcsTUFBTUEsRUFBRSxNQUFNL0QsTUFBTW1HLEVBQUUsS0FBSzVGLEtBQUt1NUMsUUFBUUYsZ0JBQWdCcjVDLEtBQUt3RCxFQUFFQyxFQUFFLGFBQWFJLEVBQUUvRyxVQUFVNDhDLFlBQVksU0FBU2wyQyxHQUFHeEQsS0FBS3U1QyxRQUFRSixtQkFBbUJuNUMsS0FBS3dELEVBQUUsZ0JBQ25kYyxFQUFFeEgsVUFBVStHLEVBQUUvRyxVQUFzRixJQUFJaUosRUFBRWpCLEVBQUVoSSxVQUFVLElBQUl3SCxFQUFFeUIsRUFBRWlpQyxZQUFZbGpDLEVBQUUzSixFQUFFNEssRUFBRWxDLEVBQUUvRyxXQUFXaUosRUFBRTR6QyxzQkFBcUIsRUFBRyxJQUFJM3pDLEVBQUUsQ0FBQ3NCLFFBQVEsTUFBTXpCLEVBQUVqSyxPQUFPa0IsVUFBVUMsZUFBZW1ILEVBQUUsQ0FBQ3pILEtBQUksRUFBR205QyxLQUFJLEVBQUdDLFFBQU8sRUFBR0MsVUFBUyxHQUNoUyxTQUFTcjBDLEVBQUVqQyxFQUFFQyxFQUFFbEksR0FBRyxJQUFJOEIsRUFBRTdCLEVBQUUsR0FBR3dKLEVBQUUsS0FBS1UsRUFBRSxLQUFLLEdBQUcsTUFBTWpDLEVBQUUsSUFBSXBHLFVBQUssSUFBU29HLEVBQUVtMkMsTUFBTWwwQyxFQUFFakMsRUFBRW0yQyxVQUFLLElBQVNuMkMsRUFBRWhILE1BQU11SSxFQUFFLEdBQUd2QixFQUFFaEgsS0FBS2dILEVBQUVvQyxFQUFFeEssS0FBS29JLEVBQUVwRyxLQUFLNkcsRUFBRW5ILGVBQWVNLEtBQUs3QixFQUFFNkIsR0FBR29HLEVBQUVwRyxJQUFJLElBQUk0SSxFQUFFM0gsVUFBVUMsT0FBTyxFQUFFLEdBQUcsSUFBSTBILEVBQUV6SyxFQUFFb2dCLFNBQVNyZ0IsT0FBTyxHQUFHLEVBQUUwSyxFQUFFLENBQUMsSUFBSSxJQUFJN0MsRUFBRXZFLE1BQU1vSCxHQUFHM0ssRUFBRSxFQUFFQSxFQUFFMkssRUFBRTNLLElBQUk4SCxFQUFFOUgsR0FBR2dELFVBQVVoRCxFQUFFLEdBQUdFLEVBQUVvZ0IsU0FBU3hZLEVBQUUsR0FBR0ksR0FBR0EsRUFBRXVvQyxhQUFhLElBQUkxdUMsS0FBSzRJLEVBQUV6QyxFQUFFdW9DLGtCQUFlLElBQVN2d0MsRUFBRTZCLEtBQUs3QixFQUFFNkIsR0FBRzRJLEVBQUU1SSxJQUFJLE1BQU0sQ0FBQzA4QyxTQUFTLzhDLEVBQUVzRCxLQUFLa0QsRUFBRS9HLElBQUl1SSxFQUFFNDBDLElBQUlsMEMsRUFBRXFPLE1BQU12WSxFQUFFdytDLE9BQU9oMEMsRUFBRXNCLFNBQ3hVLFNBQVNsQixFQUFFNUMsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFdTJDLFdBQVcvOEMsRUFBMEcsSUFBSStHLEVBQUUsT0FBTzJDLEVBQUUsR0FBRyxTQUFTaEMsRUFBRWxCLEVBQUVDLEVBQUVsSSxFQUFFOEIsR0FBRyxHQUFHcUosRUFBRW5JLE9BQU8sQ0FBQyxJQUFJL0MsRUFBRWtMLEVBQUV1ekMsTUFBOEQsT0FBeER6K0MsRUFBRTZTLE9BQU83SyxFQUFFaEksRUFBRTArQyxVQUFVejJDLEVBQUVqSSxFQUFFc0wsS0FBS3ZMLEVBQUVDLEVBQUVnTSxRQUFRbkssRUFBRTdCLEVBQUVtckIsTUFBTSxFQUFTbnJCLEVBQUUsTUFBTSxDQUFDNlMsT0FBTzdLLEVBQUUwMkMsVUFBVXoyQyxFQUFFcUQsS0FBS3ZMLEVBQUVpTSxRQUFRbkssRUFBRXNwQixNQUFNLEdBQzViLFNBQVN4aEIsRUFBRTNCLEdBQUdBLEVBQUU2SyxPQUFPLEtBQUs3SyxFQUFFMDJDLFVBQVUsS0FBSzEyQyxFQUFFc0QsS0FBSyxLQUFLdEQsRUFBRWdFLFFBQVEsS0FBS2hFLEVBQUVtakIsTUFBTSxFQUFFLEdBQUdqZ0IsRUFBRW5JLFFBQVFtSSxFQUFFckUsS0FBS21CLEdBRTJGLFNBQVMyMkMsRUFBRTMyQyxFQUFFQyxFQUFFbEksR0FBRyxPQUFPLE1BQU1pSSxFQUFFLEVBRGxPLFNBQVNvRCxFQUFFcEQsRUFBRUMsRUFBRWxJLEVBQUU4QixHQUFHLElBQUk3QixTQUFTZ0ksRUFBSyxjQUFjaEksR0FBRyxZQUFZQSxJQUFFZ0ksRUFBRSxNQUFLLElBQUl3QixHQUFFLEVBQUcsR0FBRyxPQUFPeEIsRUFBRXdCLEdBQUUsT0FBUSxPQUFPeEosR0FBRyxJQUFLLFNBQVMsSUFBSyxTQUFTd0osR0FBRSxFQUFHLE1BQU0sSUFBSyxTQUFTLE9BQU94QixFQUFFdTJDLFVBQVUsS0FBSy84QyxFQUFFLEtBQUsrSCxFQUFFQyxHQUFFLEdBQUksR0FBR0EsRUFBRSxPQUFPekosRUFBRThCLEVBQUVtRyxFQUFFLEtBQUtDLEVBQUUsSUFBSTRCLEVBQUU3QixFQUFFLEdBQUdDLEdBQUcsRUFBeUIsR0FBdkJ1QixFQUFFLEVBQUV2QixFQUFFLEtBQUtBLEVBQUUsSUFBSUEsRUFBRSxJQUFPNUUsTUFBTUYsUUFBUTZFLEdBQUcsSUFBSSxJQUFJa0MsRUFBRSxFQUFFQSxFQUFFbEMsRUFBRWpGLE9BQU9tSCxJQUFJLENBQVEsSUFBSU8sRUFBRXhDLEVBQUU0QixFQUFmN0osRUFBRWdJLEVBQUVrQyxHQUFlQSxHQUFHVixHQUFHNEIsRUFBRXBMLEVBQUV5SyxFQUFFMUssRUFBRThCLFFBQVEsR0FBRyxPQUFPbUcsR0FBRyxpQkFBa0JBLEVBQUV5QyxFQUFFLEtBQWlDQSxFQUFFLG1CQUE3QkEsRUFBRWIsR0FBRzVCLEVBQUU0QixJQUFJNUIsRUFBRSxlQUFzQ3lDLEVBQUUsS0FBTSxtQkFBb0JBLEVBQUUsSUFBSXpDLEVBQUV5QyxFQUFFNUssS0FBS21JLEdBQUdrQyxFQUNwZixJQUFJbEssRUFBRWdJLEVBQUUrSixRQUFRd3NCLE1BQTZCLzBCLEdBQUc0QixFQUExQnBMLEVBQUVBLEVBQUVXLE1BQU04SixFQUFFeEMsRUFBRTRCLEVBQUU3SixFQUFFa0ssS0FBY25LLEVBQUU4QixRQUFRLEdBQUcsV0FBVzdCLEVBQUUsTUFBTUQsRUFBRSxHQUFHaUksRUFBRS9ELE1BQU1tRyxFQUFFLEdBQUcsb0JBQW9CckssRUFBRSxxQkFBcUJLLE9BQU9vVixLQUFLeE4sR0FBRzVDLEtBQUssTUFBTSxJQUFJckYsRUFBRSxLQUFLLE9BQU95SixFQUFxQzRCLENBQUVwRCxFQUFFLEdBQUdDLEVBQUVsSSxHQUFHLFNBQVM4SixFQUFFN0IsRUFBRUMsR0FBRyxNQUFNLGlCQUFrQkQsR0FBRyxPQUFPQSxHQUFHLE1BQU1BLEVBQUUvRyxJQUg5SSxTQUFnQitHLEdBQUcsSUFBSUMsRUFBRSxDQUFDLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxLQUFLLEdBQUdELEdBQUdJLFFBQVEsU0FBUSxTQUFTSixHQUFHLE9BQU9DLEVBQUVELE1BRytDNDJDLENBQU81MkMsRUFBRS9HLEtBQUtnSCxFQUFFL0UsU0FBUyxJQUFJLFNBQVN3RSxFQUFFTSxFQUFFQyxHQUFHRCxFQUFFc0QsS0FBS3pMLEtBQUttSSxFQUFFZ0UsUUFBUS9ELEVBQUVELEVBQUVtakIsU0FDeFgsU0FBU3RpQixFQUFHYixFQUFFQyxFQUFFbEksR0FBRyxJQUFJOEIsRUFBRW1HLEVBQUU2SyxPQUFPN1MsRUFBRWdJLEVBQUUwMkMsVUFBVTEyQyxFQUFFQSxFQUFFc0QsS0FBS3pMLEtBQUttSSxFQUFFZ0UsUUFBUS9ELEVBQUVELEVBQUVtakIsU0FBUzluQixNQUFNRixRQUFRNkUsR0FBR0wsRUFBRUssRUFBRW5HLEVBQUU5QixHQUFFLFNBQVNpSSxHQUFHLE9BQU9BLEtBQUksTUFBTUEsSUFBSTRDLEVBQUU1QyxLQUFLQSxFQUp0SixTQUFXQSxFQUFFQyxHQUFHLE1BQU0sQ0FBQ3MyQyxTQUFTLzhDLEVBQUVzRCxLQUFLa0QsRUFBRWxELEtBQUs3RCxJQUFJZ0gsRUFBRW0yQyxJQUFJcDJDLEVBQUVvMkMsSUFBSTdsQyxNQUFNdlEsRUFBRXVRLE1BQU1pbUMsT0FBT3gyQyxFQUFFdzJDLFFBSW1FOXpDLENBQUUxQyxFQUFFaEksSUFBSWdJLEVBQUUvRyxLQUFLZ0gsR0FBR0EsRUFBRWhILE1BQU0rRyxFQUFFL0csSUFBSSxJQUFJLEdBQUcrRyxFQUFFL0csS0FBS21ILFFBQVFHLEVBQUUsT0FBTyxLQUFLeEksSUFBSThCLEVBQUVnRixLQUFLbUIsSUFBSSxTQUFTTCxFQUFFSyxFQUFFQyxFQUFFbEksRUFBRThCLEVBQUU3QixHQUFHLElBQUl3SixFQUFFLEdBQUcsTUFBTXpKLElBQUl5SixHQUFHLEdBQUd6SixHQUFHcUksUUFBUUcsRUFBRSxPQUFPLEtBQWtCbzJDLEVBQUUzMkMsRUFBRWEsRUFBakJaLEVBQUVpQixFQUFFakIsRUFBRXVCLEVBQUUzSCxFQUFFN0IsSUFBYTJKLEVBQUUxQixHQUFHLElBQUk4QyxFQUFFLENBQUNlLFFBQVEsTUFBTSxTQUFTNUQsSUFBSSxJQUFJRixFQUFFK0MsRUFBRWUsUUFBUSxHQUFHLE9BQU85RCxFQUFFLE1BQU0vRCxNQUFNbUcsRUFBRSxNQUFNLE9BQU9wQyxFQUN4YSxJQUFJZSxFQUFHLENBQUM4MUMsdUJBQXVCOXpDLEVBQUUrekMsd0JBQXdCLENBQUNDLFNBQVMsTUFBTUMsa0JBQWtCeDBDLEVBQUV5MEMscUJBQXFCLENBQUNuekMsU0FBUSxHQUFJMlEsT0FBTzljLEdBQUdILEVBQVEwL0MsU0FBUyxDQUFDOTdCLElBQUksU0FBU3BiLEVBQUVDLEVBQUVsSSxHQUFHLEdBQUcsTUFBTWlJLEVBQUUsT0FBT0EsRUFBRSxJQUFJbkcsRUFBRSxHQUFtQixPQUFoQjhGLEVBQUVLLEVBQUVuRyxFQUFFLEtBQUtvRyxFQUFFbEksR0FBVThCLEdBQUcwRixRQUFRLFNBQVNTLEVBQUVDLEVBQUVsSSxHQUFHLEdBQUcsTUFBTWlJLEVBQUUsT0FBT0EsRUFBcUIyMkMsRUFBRTMyQyxFQUFFTixFQUF2Qk8sRUFBRWlCLEVBQUUsS0FBSyxLQUFLakIsRUFBRWxJLElBQVk0SixFQUFFMUIsSUFBSWtqQixNQUFNLFNBQVNuakIsR0FBRyxPQUFPMjJDLEVBQUUzMkMsR0FBRSxXQUFXLE9BQU8sT0FBTSxPQUFPd2dDLFFBQVEsU0FBU3hnQyxHQUFHLElBQUlDLEVBQUUsR0FBcUMsT0FBbENOLEVBQUVLLEVBQUVDLEVBQUUsTUFBSyxTQUFTRCxHQUFHLE9BQU9BLEtBQVdDLEdBQUdrM0MsS0FBSyxTQUFTbjNDLEdBQUcsSUFBSTRDLEVBQUU1QyxHQUFHLE1BQU0vRCxNQUFNbUcsRUFBRSxNQUFNLE9BQU9wQyxJQUM5ZXhJLEVBQVE0L0MsVUFBVS8yQyxFQUFFN0ksRUFBUTYvQyxTQUFTNytDLEVBQUVoQixFQUFROC9DLFNBQVNoMUMsRUFBRTlLLEVBQVErL0MsY0FBY2oyQyxFQUFFOUosRUFBUWdnRCxXQUFXNStDLEVBQUVwQixFQUFRaWdELFNBQVN0MUMsRUFBRTNLLEVBQVFrZ0QsbURBQW1EMzJDLEVBQ3JMdkosRUFBUW1nRCxhQUFhLFNBQVMzM0MsRUFBRUMsRUFBRWxJLEdBQUcsR0FBRyxNQUFPaUksRUFBYyxNQUFNL0QsTUFBTW1HLEVBQUUsSUFBSXBDLElBQUksSUFBSW5HLEVBQUVsQyxFQUFFLEdBQUdxSSxFQUFFdVEsT0FBT3ZZLEVBQUVnSSxFQUFFL0csSUFBSXVJLEVBQUV4QixFQUFFbzJDLElBQUlsMEMsRUFBRWxDLEVBQUV3MkMsT0FBTyxHQUFHLE1BQU12MkMsRUFBRSxDQUFvRSxRQUFuRSxJQUFTQSxFQUFFbTJDLE1BQU01MEMsRUFBRXZCLEVBQUVtMkMsSUFBSWwwQyxFQUFFTSxFQUFFc0IsY0FBUyxJQUFTN0QsRUFBRWhILE1BQU1qQixFQUFFLEdBQUdpSSxFQUFFaEgsS0FBUStHLEVBQUVsRCxNQUFNa0QsRUFBRWxELEtBQUt5ckMsYUFBYSxJQUFJOWxDLEVBQUV6QyxFQUFFbEQsS0FBS3lyQyxhQUFhLElBQUkzb0MsS0FBS0ssRUFBRW9DLEVBQUV4SyxLQUFLb0ksRUFBRUwsS0FBS2MsRUFBRW5ILGVBQWVxRyxLQUFLL0YsRUFBRStGLFFBQUcsSUFBU0ssRUFBRUwsU0FBSSxJQUFTNkMsRUFBRUEsRUFBRTdDLEdBQUdLLEVBQUVMLElBQUksSUFBSUEsRUFBRTlFLFVBQVVDLE9BQU8sRUFBRSxHQUFHLElBQUk2RSxFQUFFL0YsRUFBRXVlLFNBQVNyZ0IsT0FBTyxHQUFHLEVBQUU2SCxFQUFFLENBQUM2QyxFQUFFcEgsTUFBTXVFLEdBQUcsSUFBSSxJQUFJOUgsRUFBRSxFQUFFQSxFQUFFOEgsRUFBRTlILElBQUkySyxFQUFFM0ssR0FBR2dELFVBQVVoRCxFQUFFLEdBQUcrQixFQUFFdWUsU0FBUzNWLEVBQUUsTUFBTSxDQUFDOHpDLFNBQVMvOEMsRUFBRXNELEtBQUtrRCxFQUFFbEQsS0FDeGY3RCxJQUFJakIsRUFBRW8rQyxJQUFJNTBDLEVBQUUrTyxNQUFNMVcsRUFBRTI4QyxPQUFPdDBDLElBQUkxSyxFQUFRb2dELGNBQWMsU0FBUzUzQyxFQUFFQyxHQUE4SyxZQUEzSyxJQUFTQSxJQUFJQSxFQUFFLE9BQU1ELEVBQUUsQ0FBQ3UyQyxTQUFTOTFDLEVBQUVvM0Msc0JBQXNCNTNDLEVBQUU2M0MsY0FBYzkzQyxFQUFFKzNDLGVBQWUvM0MsRUFBRWc0QyxhQUFhLEVBQUVDLFNBQVMsS0FBS0MsU0FBUyxPQUFRRCxTQUFTLENBQUMxQixTQUFTcDJDLEVBQUVnNEMsU0FBU240QyxHQUFVQSxFQUFFazRDLFNBQVNsNEMsR0FBR3hJLEVBQVE4RyxjQUFjMkQsRUFBRXpLLEVBQVE0Z0QsY0FBYyxTQUFTcDRDLEdBQUcsSUFBSUMsRUFBRWdDLEVBQUUvSSxLQUFLLEtBQUs4RyxHQUFZLE9BQVRDLEVBQUVuRCxLQUFLa0QsRUFBU0MsR0FBR3pJLEVBQVE2Z0QsVUFBVSxXQUFXLE1BQU0sQ0FBQ3YwQyxRQUFRLE9BQU90TSxFQUFROGdELFdBQVcsU0FBU3Q0QyxHQUFHLE1BQU0sQ0FBQ3UyQyxTQUFTOTBDLEVBQUU4MkMsT0FBT3Y0QyxJQUFJeEksRUFBUWdoRCxlQUFlNTFDLEVBQzNlcEwsRUFBUWloRCxLQUFLLFNBQVN6NEMsR0FBRyxNQUFNLENBQUN1MkMsU0FBUzcwQyxFQUFFZzNDLE1BQU0xNEMsRUFBRTI0QyxTQUFTLEVBQUVDLFFBQVEsT0FBT3BoRCxFQUFRcWhELEtBQUssU0FBUzc0QyxFQUFFQyxHQUFHLE1BQU0sQ0FBQ3MyQyxTQUFTdjBDLEVBQUVsRixLQUFLa0QsRUFBRTg0QyxhQUFRLElBQVM3NEMsRUFBRSxLQUFLQSxJQUFJekksRUFBUXVoRCxZQUFZLFNBQVMvNEMsRUFBRUMsR0FBRyxPQUFPQyxJQUFJNjRDLFlBQVkvNEMsRUFBRUMsSUFBSXpJLEVBQVF3aEQsV0FBVyxTQUFTaDVDLEVBQUVDLEdBQUcsT0FBT0MsSUFBSTg0QyxXQUFXaDVDLEVBQUVDLElBQUl6SSxFQUFReWhELGNBQWMsYUFBYXpoRCxFQUFRMGhELFVBQVUsU0FBU2w1QyxFQUFFQyxHQUFHLE9BQU9DLElBQUlnNUMsVUFBVWw1QyxFQUFFQyxJQUFJekksRUFBUTJoRCxvQkFBb0IsU0FBU241QyxFQUFFQyxFQUFFbEksR0FBRyxPQUFPbUksSUFBSWk1QyxvQkFBb0JuNUMsRUFBRUMsRUFBRWxJLElBQ3RjUCxFQUFRNGhELGdCQUFnQixTQUFTcDVDLEVBQUVDLEdBQUcsT0FBT0MsSUFBSWs1QyxnQkFBZ0JwNUMsRUFBRUMsSUFBSXpJLEVBQVE2aEQsUUFBUSxTQUFTcjVDLEVBQUVDLEdBQUcsT0FBT0MsSUFBSW01QyxRQUFRcjVDLEVBQUVDLElBQUl6SSxFQUFROGhELFdBQVcsU0FBU3Q1QyxFQUFFQyxFQUFFbEksR0FBRyxPQUFPbUksSUFBSW81QyxXQUFXdDVDLEVBQUVDLEVBQUVsSSxJQUFJUCxFQUFRK2hELE9BQU8sU0FBU3Y1QyxHQUFHLE9BQU9FLElBQUlxNUMsT0FBT3Y1QyxJQUFJeEksRUFBUWdpRCxTQUFTLFNBQVN4NUMsR0FBRyxPQUFPRSxJQUFJczVDLFNBQVN4NUMsSUFBSXhJLEVBQVE4Z0IsUUFBUSxXLDZCQ3RCclQ3Z0IsRUFBT0QsUUFBVSxFQUFRLE0sNkJDQXpCLElBQUlpaUQsRUFBUyxFQUFRLEtBR2pCQyxFQUZVLEVBQVEsSUFFWDVVLENBQVEyVSxFQUFRLE9BQzNCQyxFQUFLbDFCLFlBQWMsT0FFbkIvc0IsRUFBT0QsUUFBVWtpRCxHLDZCQ05qQixJQUFJenRDLEVBQVEsRUFBUSxLQUNoQjB0QyxFQUFRLEVBQVEsS0FDaEJDLEVBQU0sRUFBUSxLQUNkQyxFQUFRLEVBQVEsS0FDaEJDLEVBQU8sRUFBUSxLQUNmSixFQUFPLEVBQVEsS0FFbkJqaUQsRUFBT0QsUUFBVXlVLEVBQU0sQ0FBQzJ0QyxFQUFLRCxFQUFPRSxFQUFPQyxFQUFNSixLLDZCQ1BqRCxJQUFJelQsRUFBUSxFQUFRLEdBQ2hCbDJCLEVBQVMsRUFBUSxJQUVyQnRZLEVBQU9ELFFBRVAsU0FBZTh2QyxHQUNiLElBSUluM0IsRUFDQUMsRUFMQXJWLEVBQVN1c0MsRUFBWXZzQyxPQUNyQjFCLEVBQVcsR0FDWHFYLEVBQVMsR0FDVDhCLEdBQVMsRUFJYixPQUFTQSxFQUFRelgsR0FDZm9WLEVBQU9tM0IsRUFBWTkwQixHQUNuQm5aLEVBQVN3RixLQUFLc1IsRUFBSzlXLFVBQ25CcVgsRUFBTzdSLEtBQUtzUixFQUFLTyxRQUNqQk4sRUFBUUQsRUFBS0MsTUFHZixPQUFPLElBQUlMLEVBQ1RrMkIsRUFBTXZ4QixNQUFNLEtBQU1yYixHQUNsQjRzQyxFQUFNdnhCLE1BQU0sS0FBTWhFLEdBQ2xCTixLLDZCQ3ZCSixJQUFJcFgsRUFBUyxFQUFRLElBRXJCdkIsRUFBT0QsUUFBVXdCLEVBQU8sQ0FDdEJvWCxNQUFPLFFBQ1BLLFVBWUYsU0FBd0JnckIsRUFBR3ZyQixHQUN6QixNQUFPLFNBQVdBLEVBQUtkLE1BQU0sR0FBRzFGLGVBWmhDOEcsV0FBWSxDQUNWdXBDLGFBQWMsS0FDZEMsYUFBYyxLQUNkQyxVQUFXLEtBQ1hDLFVBQVcsS0FDWEMsVUFBVyxLQUNYQyxXQUFZLEtBQ1pDLFVBQVcsUyw2QkNaZixJQUFJcmhELEVBQVMsRUFBUSxJQUVyQnZCLEVBQU9ELFFBQVV3QixFQUFPLENBQ3RCb1gsTUFBTyxNQUNQSyxVQVFGLFNBQXNCZ3JCLEVBQUd2ckIsR0FDdkIsTUFBTyxPQUFTQSxFQUFLZCxNQUFNLEdBQUcxRixlQVI5QjhHLFdBQVksQ0FDVjhwQyxRQUFTLEtBQ1RDLFFBQVMsS0FDVEMsU0FBVSxTLDZCQ1JkLElBQUl4aEQsRUFBUyxFQUFRLElBQ2pCeWhELEVBQTJCLEVBQVEsSUFFdkNoakQsRUFBT0QsUUFBVXdCLEVBQU8sQ0FDdEJvWCxNQUFPLFFBQ1BFLFdBQVksQ0FDVm9xQyxXQUFZLGVBRWRqcUMsVUFBV2dxQyxFQUNYanFDLFdBQVksQ0FDVnFwQyxNQUFPLEtBQ1BjLFdBQVksUyw2QkNYaEJsakQsRUFBT0QsUUFFUCxTQUFnQzhZLEVBQVlLLEdBQzFDLE9BQU9BLEtBQWFMLEVBQWFBLEVBQVdLLEdBQWFBLEksNkJDSDNELElBQUk4YixFQUFRLEVBQVEsSUFDaEJ6ekIsRUFBUyxFQUFRLElBRWpCb3BCLEVBQWFxSyxFQUFNckssV0FDbkJFLEVBQVNtSyxFQUFNbkssT0FDZkMsRUFBaUJrSyxFQUFNbEssZUFFM0I5cUIsRUFBT0QsUUFBVXdCLEVBQU8sQ0FDdEJ5WCxVQXNERixTQUF1QmdyQixFQUFHdnJCLEdBQ3hCLE1BQWdCLFNBQVRBLEVBQWtCQSxFQUFPLFFBQVVBLEVBQUtkLE1BQU0sR0FBRzFGLGVBdER4RDhHLFdBQVksQ0FDVm9xQyxxQkFBc0IsS0FDdEJDLFdBQVl6NEIsRUFDWjA0QixpQkFBa0IsS0FDbEJDLFNBQVUzNEIsRUFDVjQ0QixZQUFhNTRCLEVBQ2I2NEIsYUFBYzM0QixFQUNkNDRCLGFBQWM1NEIsRUFDZDY0QixZQUFhNzRCLEVBQ2I4NEIsYUFBYzc0QixFQUNkODRCLFlBQWEsS0FDYkMsZ0JBQWlCLzRCLEVBQ2pCZzVCLFlBQWEsS0FDYkMsYUFBY3A1QixFQUNkcTVCLGVBQWdCbDVCLEVBQ2hCbTVCLGlCQUFrQixLQUNsQkMsYUFBY3Y1QixFQUNkdzVCLFdBQVlyNUIsRUFDWnM1QixZQUFhejVCLEVBQ2IwNUIsYUFBYyxLQUNkQyxXQUFZMzVCLEVBQ1o0NUIsWUFBYSxLQUNiQyxpQkFBa0IsS0FDbEJDLFVBQVcsS0FDWEMsZUFBZ0I1NUIsRUFDaEI2NUIsVUFBVzk1QixFQUNYKzVCLFNBQVUsS0FDVkMsVUFBV2w2QixFQUNYbTZCLGNBQWVuNkIsRUFDZm82QixvQkFBcUJwNkIsRUFDckJxNkIsZ0JBQWlCLEtBQ2pCQyxTQUFVbjZCLEVBQ1ZvNkIsZ0JBQWlCLEtBQ2pCQyxhQUFjdDZCLEVBQ2R1NkIsWUFBYXo2QixFQUNiMDZCLGFBQWMxNkIsRUFDZDI2QixhQUFjLEtBQ2RDLGFBQWM1NkIsRUFDZDY2QixvQkFBcUIxNkIsRUFDckIyNkIsYUFBYzU2QixFQUNkNjZCLGFBQWM3NkIsRUFDZDg2QixZQUFhOTZCLEVBQ2IrNkIsYUFBY2o3QixFQUNkazdCLFlBQWFoN0IsRUFDYmk3QixTQUFVLEtBQ1ZDLGFBQWNsN0IsRUFDZG03QixhQUFjbjdCLEVBQ2RvN0IsYUFBY3A3QixFQUNkcTdCLGNBQWUsS0FDZkMsS0FBTSxTLDZCQzFEVixJQUFJbnhCLEVBQVEsRUFBUSxJQUNoQnp6QixFQUFTLEVBQVEsSUFDakJ5aEQsRUFBMkIsRUFBUSxJQUVuQ3Q0QixFQUFVc0ssRUFBTXRLLFFBQ2hCRSxFQUFvQm9LLEVBQU1wSyxrQkFDMUJELEVBQWFxSyxFQUFNckssV0FDbkJFLEVBQVNtSyxFQUFNbkssT0FDZkMsRUFBaUJrSyxFQUFNbEssZUFDdkJDLEVBQWlCaUssRUFBTWpLLGVBRTNCL3FCLEVBQU9ELFFBQVV3QixFQUFPLENBQ3RCb1gsTUFBTyxPQUNQRSxXQUFZLENBQ1Z1dEMsY0FBZSxpQkFDZkMsVUFBVyxRQUNYQyxRQUFTLE1BQ1RDLFVBQVcsY0FFYnZ0QyxVQUFXZ3FDLEVBQ1hwcUMsZ0JBQWlCLENBQUMsVUFBVyxXQUFZLFFBQVMsWUFDbERHLFdBQVksQ0FFVnl0QyxLQUFNLEtBQ05DLE9BQVExN0IsRUFDUjI3QixjQUFlNTdCLEVBQ2Y2N0IsVUFBVzc3QixFQUNYL0UsT0FBUSxLQUNSNmdDLE1BQU8sS0FDUEMsZ0JBQWlCbjhCLEVBQ2pCbzhCLG9CQUFxQnA4QixFQUNyQnE4QixlQUFnQnI4QixFQUNoQnM4QixJQUFLLEtBQ0xDLEdBQUksS0FDSkMsTUFBT3g4QixFQUNQeThCLGVBQWdCLEtBQ2hCQyxhQUFjdDhCLEVBQ2R1OEIsVUFBVzM4QixFQUNYNDhCLFNBQVU1OEIsRUFDVjY4QixRQUFTNzhCLEVBQ1Q4OEIsUUFBUyxLQUNUQyxRQUFTLzhCLEVBQ1RnOUIsS0FBTSxLQUNOeHpDLFVBQVc0VyxFQUNYNjhCLEtBQU05OEIsRUFDTis4QixRQUFTLEtBQ1RwN0MsUUFBUyxLQUNUcTdDLGdCQUFpQmw5QixFQUNqQm05QixTQUFVcDlCLEVBQ1ZxOUIsYUFBY2o5QixFQUNkazlCLE9BQVFuOUIsRUFBU0UsRUFDakJrOUIsWUFBYSxLQUNiMXBCLEtBQU0sS0FDTjJwQixTQUFVLEtBQ1ZDLFNBQVUsS0FDVkMsUUFBUzE5QixFQUNUMjlCLE1BQU8zOUIsRUFDUDQ5QixJQUFLLEtBQ0xDLFFBQVMsS0FDVEMsU0FBVTk5QixFQUNWKzlCLFNBQVU3OUIsRUFDVjg5QixVQUFXLzlCLEVBQ1hnK0IsUUFBUyxLQUNUQyxhQUFjLEtBQ2RDLEtBQU0sS0FDTkMsV0FBWSxLQUNaQyxZQUFhLEtBQ2JDLFdBQVksS0FDWkMsZUFBZ0J2K0IsRUFDaEJ3K0IsV0FBWSxLQUNaQyxRQUFTcitCLEVBQ1RzK0IsT0FBUXYrQixFQUNSdytCLE9BQVEzK0IsRUFDUjQrQixLQUFNeitCLEVBQ04wK0IsS0FBTSxLQUNOQyxTQUFVLEtBQ1ZDLFFBQVMzK0IsRUFDVDQrQixVQUFXNStCLEVBQ1g5YyxHQUFJLEtBQ0oyN0MsV0FBWSxLQUNaQyxZQUFhNytCLEVBQ2I4K0IsVUFBVyxLQUNYQyxVQUFXLEtBQ1hDLEdBQUksS0FDSkMsTUFBT3QvQixFQUNQdS9CLE9BQVEsS0FDUkMsU0FBVXAvQixFQUNWcS9CLFFBQVNyL0IsRUFDVHMvQixVQUFXMS9CLEVBQ1gyL0IsU0FBVXYvQixFQUNWdy9CLEtBQU0sS0FDTnRkLE1BQU8sS0FDUHVkLEtBQU0sS0FDTnI4QixTQUFVLEtBQ1ZELEtBQU0sS0FDTnU4QixLQUFNOS9CLEVBQ04rL0IsSUFBSzUvQixFQUNMNi9CLFNBQVUsS0FDVmxrQyxJQUFLLEtBQ0xta0MsVUFBVzkvQixFQUNYKy9CLE1BQU8sS0FDUHowQyxPQUFRLEtBQ1JpUyxJQUFLLEtBQ0x5aUMsVUFBV2hnQyxFQUNYaWdDLFNBQVVwZ0MsRUFDVnFnQyxNQUFPcmdDLEVBQ1BscUIsS0FBTSxLQUNONEYsTUFBTyxLQUNQNGtELFNBQVV0Z0MsRUFDVnVnQyxXQUFZdmdDLEVBQ1p3Z0MsUUFBUyxLQUNUQyxhQUFjLEtBQ2RDLFdBQVksS0FDWkMsY0FBZSxLQUNmQyxlQUFnQixLQUNoQkMsT0FBUSxLQUNSQyxTQUFVLEtBQ1ZDLFVBQVcsS0FDWEMsaUJBQWtCLEtBQ2xCQyxTQUFVLEtBQ1ZDLFFBQVMsS0FDVEMsUUFBUyxLQUNUQyxjQUFlLEtBQ2ZDLE9BQVEsS0FDUkMsWUFBYSxLQUNiQyxNQUFPLEtBQ1BDLFdBQVksS0FDWkMsT0FBUSxLQUNSQyxVQUFXLEtBQ1hDLFlBQWEsS0FDYkMsV0FBWSxLQUNaQyxZQUFhLEtBQ2JDLFdBQVksS0FDWkMsWUFBYSxLQUNiQyxPQUFRLEtBQ1JDLGlCQUFrQixLQUNsQkMsVUFBVyxLQUNYQyxRQUFTLEtBQ1RDLFFBQVMsS0FDVEMsUUFBUyxLQUNUQyxXQUFZLEtBQ1pDLGFBQWMsS0FDZEMsUUFBUyxLQUNUQyxVQUFXLEtBQ1hDLFVBQVcsS0FDWEMsV0FBWSxLQUNaQyxRQUFTLEtBQ1RDLGlCQUFrQixLQUNsQkMsT0FBUSxLQUNSQyxhQUFjLEtBQ2RDLGlCQUFrQixLQUNsQkMsVUFBVyxLQUNYQyxZQUFhLEtBQ2JDLFVBQVcsS0FDWEMsZUFBZ0IsS0FDaEJDLFlBQWEsS0FDYkMsYUFBYyxLQUNkQyxhQUFjLEtBQ2RDLFlBQWEsS0FDYkMsV0FBWSxLQUNaQyxZQUFhLEtBQ2JDLFVBQVcsS0FDWEMsVUFBVyxLQUNYQyxTQUFVLEtBQ1ZDLFdBQVksS0FDWkMsV0FBWSxLQUNaQyxRQUFTLEtBQ1RDLFFBQVMsS0FDVEMsT0FBUSxLQUNSQyxVQUFXLEtBQ1hDLFdBQVksS0FDWkMsV0FBWSxLQUNaQyxhQUFjLEtBQ2RDLG1CQUFvQixLQUNwQkMsUUFBUyxLQUNUQyxTQUFVLEtBQ1ZDLFNBQVUsS0FDVkMsMEJBQTJCLEtBQzNCQyxTQUFVLEtBQ1ZDLFVBQVcsS0FDWEMsU0FBVSxLQUNWQyxhQUFjLEtBQ2RDLFVBQVcsS0FDWEMsVUFBVyxLQUNYQyxTQUFVLEtBQ1ZDLFVBQVcsS0FDWEMsYUFBYyxLQUNkQyxTQUFVLEtBQ1ZDLHFCQUFzQixLQUN0QkMsU0FBVSxLQUNWQyxlQUFnQixLQUNoQkMsVUFBVyxLQUNYQyxRQUFTLEtBQ1RDLEtBQU0zbEMsRUFDTjRsQyxRQUFTemxDLEVBQ1RvQixRQUFTLEtBQ1Rza0MsS0FBTXpsQyxFQUNObUUsWUFBYSxLQUNidWhDLFlBQWE5bEMsRUFDYitsQyxPQUFRLEtBQ1JDLFFBQVMsS0FDVEMsU0FBVWptQyxFQUNWa21DLGVBQWdCLEtBQ2hCQyxJQUFLL2xDLEVBQ0x2bEIsU0FBVW1sQixFQUNWb21DLFNBQVVwbUMsRUFDVnFtQyxLQUFNbG1DLEVBQ05tbUMsUUFBU25tQyxFQUNUb21DLFFBQVNubUMsRUFDVG9tQyxNQUFPLEtBQ1BDLE9BQVF6bUMsRUFDUjBtQyxTQUFVMW1DLEVBQ1YybUMsU0FBVTNtQyxFQUNWNG1DLE1BQU8sS0FDUDN2QyxLQUFNa0osRUFDTjBtQyxNQUFPLEtBQ1BDLEtBQU0sS0FDTkMsS0FBTTVtQyxFQUNONm1DLFdBQVkvbUMsRUFDWnhTLElBQUssS0FDTHc1QyxPQUFRLEtBQ1JDLFFBQVMsS0FDVEMsT0FBUTltQyxFQUNSclQsTUFBT21ULEVBQ1BpbkMsS0FBTSxLQUNOQyxNQUFPLEtBQ1BDLFNBQVVubkMsRUFDVnpuQixPQUFRLEtBQ1Jzd0IsTUFBTyxLQUNQdStCLFVBQVcsS0FDWDVzRCxLQUFNLEtBQ042c0QsY0FBZXhuQyxFQUNmeW5DLE9BQVEsS0FDUmp4RCxNQUFPeXBCLEVBQ1ByRyxNQUFPdUcsRUFDUHlRLEtBQU0sS0FJTjgyQixNQUFPLEtBQ1BDLE1BQU8sS0FDUEMsUUFBU3huQyxFQUNUeW5DLEtBQU0sS0FDTkMsV0FBWSxLQUNaQyxRQUFTLEtBQ1RDLE9BQVE3bkMsRUFDUjhuQyxZQUFhLEtBQ2JDLGFBQWMvbkMsRUFDZGdvQyxZQUFhLEtBQ2JDLFlBQWEsS0FDYkMsS0FBTSxLQUNOQyxRQUFTLEtBQ1RDLFFBQVMsS0FDVHJ5QixNQUFPLEtBQ1ByaEIsS0FBTSxLQUNOMnpDLFNBQVUsS0FDVkMsU0FBVSxLQUNWQyxNQUFPLEtBQ1BDLFFBQVMzb0MsRUFDVDRvQyxRQUFTNW9DLEVBQ1QrVyxNQUFPLEtBQ1A4eEIsS0FBTSxLQUNOQyxNQUFPLEtBQ1BDLFlBQWEsS0FDYkMsT0FBUTdvQyxFQUNSOG9DLFdBQVk5b0MsRUFDWnFMLEtBQU0sS0FDTjA5QixTQUFVLEtBQ1ZDLE9BQVEsS0FDUkMsYUFBY2pwQyxFQUNka3BDLFlBQWFscEMsRUFDYm1wQyxTQUFVdHBDLEVBQ1Z1cEMsT0FBUXZwQyxFQUNSd3BDLFFBQVN4cEMsRUFDVHlwQyxPQUFRenBDLEVBQ1Ivb0IsT0FBUSxLQUNSeXlELFFBQVMsS0FDVEMsT0FBUSxLQUNSQyxJQUFLLEtBQ0xDLFlBQWExcEMsRUFDYnRjLE1BQU8sS0FDUG9MLE9BQVEsS0FDUjY2QyxVQUFXN3BDLEVBQ1g4cEMsUUFBUyxLQUNUQyxRQUFTLEtBQ1Q3MUMsS0FBTSxLQUNOODFDLFVBQVc5cEMsRUFDWCtwQyxVQUFXLEtBQ1gvekMsUUFBUyxLQUNUZzBDLE9BQVEsS0FDUkMsTUFBTyxLQUNQQyxPQUFRbHFDLEVBR1JtcUMsa0JBQW1CLEtBQ25CQyxZQUFhLEtBQ2JDLFNBQVUsS0FDVkMsd0JBQXlCenFDLEVBQ3pCMHFDLHNCQUF1QjFxQyxFQUN2QnJnQixPQUFRLEtBQ1J6SSxTQUFVLEtBQ1Z5ekQsUUFBU3hxQyxFQUNUeXFDLFNBQVUsS0FDVkMsYUFBYyxTLDZCQy9TbEIsSUFBSUMsRUFBTyxFQUFRLEtBQ2ZuOUMsRUFBWSxFQUFRLElBQ3BCbzlDLEVBQWdCLEVBQVEsS0FDeEJDLEVBQVMsRUFBUSxLQUEwQmo1QyxNQUMzQ2s1QyxFQUFTLEVBQVEsS0FBMEJsNUMsTUFFL0N6YyxFQUFPRCxRQUlQLFNBQWlCaWlELEVBQVE0VCxFQUFnQkMsR0FDdkMsSUFBSUMsRUFBU0QsRUEwTGYsU0FBeUI5OUMsR0FDdkIsSUFHSTdXLEVBSEFvQyxFQUFTeVUsRUFBT3pVLE9BQ2hCeVgsR0FBUyxFQUNUM0gsRUFBUyxHQUdiLE9BQVMySCxFQUFRelgsR0FDZnBDLEVBQVE2VyxFQUFPZ0QsR0FDZjNILEVBQU9sUyxFQUFNK1EsZUFBaUIvUSxFQUdoQyxPQUFPa1MsRUFyTXNCMmlELENBQWdCRixHQUFpQixLQUU5RCxPQUdBLFNBQVczbkQsRUFBVTZLLEdBQ25CLElBR0luWCxFQUhBa00sRUFBTzJuRCxFQUFjdm5ELEVBQVUwbkQsR0FDL0JqMUMsRUFBVy9jLE1BQU0vQixVQUFVOFYsTUFBTXZYLEtBQUtpRCxVQUFXLEdBQ2pEN0MsRUFBT3NOLEVBQUtrb0QsUUFBUS9qRCxjQUd4Qm5FLEVBQUtrb0QsUUFBVUYsR0FBVWoyQyxFQUFJemYsS0FBSzAxRCxFQUFRdDFELEdBQVFzMUQsRUFBT3QxRCxHQUFRQSxFQUU3RHVZLEdBQWNrOUMsRUFBV2w5QyxFQUFZakwsS0FDdkM2UyxFQUFTOFgsUUFBUTFmLEdBQ2pCQSxFQUFhLE1BR2YsR0FBSUEsRUFDRixJQUFLblgsS0FBWW1YLEVBQ2ZtOUMsRUFBWXBvRCxFQUFLaUwsV0FBWW5YLEVBQVVtWCxFQUFXblgsSUFJdER1MEQsRUFBU3JvRCxFQUFLNlMsU0FBVUEsR0FFSCxhQUFqQjdTLEVBQUtrb0QsVUFDUGxvRCxFQUFLdEIsUUFBVSxDQUFDbkgsS0FBTSxPQUFRc2IsU0FBVTdTLEVBQUs2UyxVQUM3QzdTLEVBQUs2UyxTQUFXLElBR2xCLE9BQU83UyxHQUdULFNBQVNvb0QsRUFBWW45QyxFQUFZdlgsRUFBS04sR0FDcEMsSUFBSXdYLEVBQ0E5VyxFQUNBd1IsRUFHQWxTLFNBQXlDQSxHQUFVQSxJQUt2RFUsR0FEQThXLEVBQU84OEMsRUFBS3hULEVBQVF4Z0QsSUFDSkksU0FJTSxpQkFIdEJ3UixFQUFTbFMsS0FJSHdYLEVBQUtvUyxlQUNQMVgsRUFBU3NpRCxFQUFPdGlELEdBQ1BzRixFQUFLcVMsZUFDZDNYLEVBQVN1aUQsRUFBT3ZpRCxHQUNQc0YsRUFBS3NTLHdCQUNkNVgsRUFBU3NpRCxFQUFPQyxFQUFPdmlELEdBQVF6TixLQUFLLFFBS3ZCLFVBQWIvRCxHQUF5QyxpQkFBVlYsSUFDakNrUyxFQWtITixTQUFlbFMsR0FDYixJQUNJTSxFQURBNFIsRUFBUyxHQUdiLElBQUs1UixLQUFPTixFQUNWa1MsRUFBT2hNLEtBQUssQ0FBQzVGLEVBQUtOLEVBQU1NLElBQU1tRSxLQUFLLE9BR3JDLE9BQU95TixFQUFPek4sS0FBSyxNQTFITm9zRCxDQUFNMytDLElBSUEsY0FBYnhSLEdBQTRCbVgsRUFBVzdFLFlBQ3pDZCxFQUFTMkYsRUFBVzdFLFVBQVVnTyxPQUFPOU8sSUFHdkMyRixFQUFXblgsR0FpRWYsU0FBeUI4VyxFQUFNbFksRUFBTVUsR0FDbkMsSUFBSTZaLEVBQ0F6WCxFQUNBOFAsRUFFSixHQUFxQixpQkFBVmxTLEtBQXdCLFdBQVlBLEdBQzdDLE9BQU9rMUQsRUFBZTE5QyxFQUFNbFksRUFBTVUsR0FHcENvQyxFQUFTcEMsRUFBTW9DLE9BQ2Z5WCxHQUFTLEVBQ1QzSCxFQUFTLEdBRVQsT0FBUzJILEVBQVF6WCxHQUNmOFAsRUFBTzJILEdBQVNxN0MsRUFBZTE5QyxFQUFNbFksRUFBTVUsRUFBTTZaLElBR25ELE9BQU8zSCxFQWxGa0JpakQsQ0FBZ0IzOUMsRUFBTTlXLEVBQVV3UixNQXhFM0QsSUFBSXlNLEVBQU0sR0FBRy9kLGVBNEViLFNBQVNtMEQsRUFBVy8wRCxFQUFPNE0sR0FDekIsTUFDbUIsaUJBQVY1TSxHQUNQLFdBQVlBLEdBS2hCLFNBQWdCODBELEVBQVM5MEQsR0FDdkIsSUFBSW1FLEVBQU9uRSxFQUFNbUUsS0FFakIsR0FBZ0IsVUFBWjJ3RCxJQUF3QjN3RCxHQUF3QixpQkFBVEEsRUFDekMsT0FBTyxFQUdULEdBQThCLGlCQUFuQm5FLEVBQU15ZixVQUF5QixXQUFZemYsRUFBTXlmLFNBQzFELE9BQU8sRUFLVCxHQUZBdGIsRUFBT0EsRUFBSzRNLGNBRUksV0FBWitqRCxFQUNGLE1BQ1csU0FBVDN3RCxHQUNTLFdBQVRBLEdBQ1MsVUFBVEEsR0FDUyxXQUFUQSxFQUlKLE1BQU8sVUFBV25FLEVBMUJoQm8xRCxDQUFPeG9ELEVBQUtrb0QsUUFBUzkwRCxHQTZCekIsU0FBU2kxRCxFQUFTdm9ELEVBQU8xTSxHQUN2QixJQUFJNlosRUFDQXpYLEVBRUosR0FBcUIsaUJBQVZwQyxHQUF1QyxpQkFBVkEsRUFLeEMsR0FBcUIsaUJBQVZBLEdBQXNCLFdBQVlBLEVBSTNDLElBSEE2WixHQUFTLEVBQ1R6WCxFQUFTcEMsRUFBTW9DLFNBRU55WCxFQUFRelgsR0FDZjZ5RCxFQUFTdm9ELEVBQU8xTSxFQUFNNlosUUFMMUIsQ0FXQSxHQUFxQixpQkFBVjdaLEtBQXdCLFNBQVVBLEdBQzNDLE1BQU0sSUFBSXNELE1BQU0seUNBQTJDdEQsRUFBUSxLQUdyRTBNLEVBQU14RyxLQUFLbEcsUUFuQlQwTSxFQUFNeEcsS0FBSyxDQUFDL0IsS0FBTSxPQUFRbkUsTUFBT3dCLE9BQU94QixLQTRDNUMsU0FBU2sxRCxFQUFlMTlDLEVBQU1sWSxFQUFNVSxHQUNsQyxJQUFJa1MsRUFBU2xTLEVBZ0JiLE9BZEl3WCxFQUFLbVMsUUFBVW5TLEVBQUs2OUMsZUFDakJ4bUMsTUFBTTNjLElBQXNCLEtBQVhBLElBQ3BCQSxFQUFTb2pELE9BQU9wakQsS0FFVHNGLEVBQUtnUyxTQUFXaFMsRUFBS2tTLHFCQUdWLGlCQUFYeFgsR0FDSyxLQUFYQSxHQUFpQmlGLEVBQVVuWCxLQUFXbVgsRUFBVTdYLEtBRWpENFMsR0FBUyxJQUlOQSxJLDZCQ3ZMVCxJQUFJaUYsRUFBWSxFQUFRLElBQ3BCRSxFQUFjLEVBQVEsSUFDdEJ3YyxFQUFPLEVBQVEsSUFJbkIvMEIsRUFBT0QsUUFNUCxTQUFjaWlELEVBQVE5Z0QsR0FDcEIsSUFBSStYLEVBQVNaLEVBQVVuWCxHQUNuQnVYLEVBQU92WCxFQUNQdTFELEVBQU8xaEMsRUFFWCxHQUFJOWIsS0FBVStvQyxFQUFPL29DLE9BQ25CLE9BQU8rb0MsRUFBT3BnRCxTQUFTb2dELEVBQU8vb0MsT0FBT0EsSUFHbkNBLEVBQU8zVixPQUFTLEdBakJYLFNBaUJnQjJWLEVBQU90QixNQUFNLEVBQUcsSUFBZW9tQixFQUFNeDdCLEtBQUtyQixLQUV6QyxNQUFwQkEsRUFBTXVCLE9BQU8sR0FDZmdXLEVBV04sU0FBMkJTLEdBQ3pCLElBQUloWSxFQUFRZ1ksRUFBVXZCLE1BQU0sR0FBR2hQLFFBQVErdEQsRUFBTUMsR0FDN0MsTUFqQ1MsT0FpQ0t6MUQsRUFBTXVCLE9BQU8sR0FBR29WLGNBQWdCM1csRUFBTXlXLE1BQU0sR0FiL0NpL0MsQ0FBa0IxMUQsR0FFekJBLEVBY04sU0FBNEJVLEdBQzFCLElBQUlWLEVBQVFVLEVBQVMrVixNQUFNLEdBRTNCLEdBQUkrK0MsRUFBS24wRCxLQUFLckIsR0FDWixPQUFPVSxFQUtlLE9BRnhCVixFQUFRQSxFQUFNeUgsUUFBUWt1RCxFQUFLQyxJQUVqQnIwRCxPQUFPLEtBQ2Z2QixFQUFRLElBQU1BLEdBR2hCLE1BakRTLE9BaURLQSxFQTNCRjYxRCxDQUFtQjcxRCxHQUc3QnUxRCxFQUFPbCtDLEdBR1QsT0FBTyxJQUFJaytDLEVBQUtoK0MsRUFBTXZYLElBeEJ4QixJQUFJNjhCLEVBQVEsa0JBQ1IyNEIsRUFBTyxVQUNQRyxFQUFNLFNBOENWLFNBQVNDLEVBQU1FLEdBQ2IsTUFBTyxJQUFNQSxFQUFHL2tELGNBR2xCLFNBQVMwa0QsRUFBVUssR0FDakIsT0FBT0EsRUFBR3YwRCxPQUFPLEdBQUdvVixnQiw2QkM3RHRCN1gsRUFBT0QsUUFNUCxTQUFlbU8sRUFBVTBuRCxHQUN2QixJQUtJMWhELEVBQ0E3TyxFQUNBa2EsRUFDQTAzQyxFQUNBdGpELEVBVEF6UyxFQUFRZ04sR0FBWSxHQUNwQjFOLEVBQU9vMUQsR0FBa0IsTUFDekI5OEMsRUFBUSxHQUNSaUMsR0FBUyxFQUNUelgsRUFBU3BDLEVBQU1vQyxPQU9uQixPQUFTeVgsR0FBU3pYLElBQ2hCaWMsRUFBT3JlLEVBQU13RyxXQUFXcVQsS0FoQmxCLEtBa0JPd0UsR0FuQkEsS0FtQmdCQSxLQUMzQjAzQyxFQUFXLzFELEVBQU15VyxNQUFNaEUsRUFBV29ILE1BbkI5QixLQXNCRTFWLEVBRUU2TyxFQUNGQSxFQUFVOU0sS0FBSzZ2RCxJQUVmL2lELEVBQVksQ0FBQytpRCxHQUNibitDLEVBQU01RSxVQUFZQSxHQTdCYixLQStCRTdPLEVBQ1R5VCxFQUFNOUssR0FBS2lwRCxFQUVYejJELEVBQU95MkQsR0FJWHRqRCxFQUFZb0gsRUFBUSxFQUNwQjFWLEVBQU9rYSxHQUlYLE1BQU8sQ0FDTGxhLEtBQU0sVUFDTjJ3RCxRQUFTeDFELEVBQ1R1WSxXQUFZRCxFQUNaNkgsU0FBVSxNLDZCQ2pEZDVnQixFQUFRMGMsTUFPUixTQUFldmIsR0FDYixJQUFJd3VCLEVBQVFodEIsT0FBT3hCLEdBTFQsSUFLeUJrSCxPQUNuQyxNQU5VLEtBTUhzbkIsRUFBa0IsR0FBS0EsRUFBTXJuQixNQUFNNnVELElBUjVDbjNELEVBQVF3dUIsVUFXUixTQUFtQnhXLEdBQ2pCLE9BQU9BLEVBQU9wUyxLQVRKLEtBU2dCeUMsUUFWNUIsSUFFSTh1RCxFQUFhLGlCLDZCQ0xqQm4zRCxFQUFRMGMsTUFRUixTQUFldmIsR0FDYixJQUtJNG9CLEVBTEEvUixFQUFTLEdBQ1QyWCxFQUFRaHRCLE9BQU94QixHQUxULElBTU42WixFQUFRMlUsRUFBTTdtQixRQVJSLEtBU044SyxFQUFZLEVBQ1ptRCxHQUFNLEVBR1YsTUFBUUEsSUFDUyxJQUFYaUUsSUFDRkEsRUFBUTJVLEVBQU1wc0IsT0FDZHdULEdBQU0sS0FHUmdULEVBQU00RixFQUFNL1gsTUFBTWhFLEVBQVdvSCxHQUFPM1MsU0FFeEIwTyxHQUNWaUIsRUFBTzNRLEtBQUswaUIsR0FHZG5XLEVBQVlvSCxFQUFRLEVBQ3BCQSxFQUFRMlUsRUFBTTdtQixRQTFCTixJQTBCcUI4SyxHQUcvQixPQUFPb0UsR0EvQlRoWSxFQUFRd3VCLFVBcUNSLFNBQW1CeFcsRUFBUWpULEdBQ3pCLElBQUkyWSxFQUFXM1ksR0FBVyxHQUN0QjZRLEdBQTRCLElBQXJCOEgsRUFBUzA1QyxRQW5DVixHQURBLElBcUNOdmhELEVBQVE2SCxFQUFTMjVDLFNBckNYLElBQ0EsUUF1Q05yL0MsRUFBT0EsRUFBT3pVLE9BQVMsS0FDekJ5VSxFQUFTQSxFQUFPbUssT0F4Q1IsS0EyQ1YsT0FBT25LLEVBQU9wUyxLQUFLaVEsRUE3Q1QsSUE2Q3lCRCxHQUFNdk4sUywybURDaEQzQ3BJLEVBQU9ELFFBSVAsU0FBcUJzQyxHQUNuQixJQUFJa2QsRUFBNEIsaUJBQWRsZCxFQUF5QkEsRUFBVXFGLFdBQVcsR0FBS3JGLEVBRXJFLE9BQ0drZCxHQUFRLElBQWNBLEdBQVEsS0FDOUJBLEdBQVEsSUFBY0EsR0FBUSxJQUM5QkEsR0FBUSxJQUFjQSxHQUFRLEssNkJDVm5DLElBQUk4M0MsRUFBZSxFQUFRLElBQ3ZCajZDLEVBQVUsRUFBUSxJQUV0QnBkLEVBQU9ELFFBSVAsU0FBd0JzQyxHQUN0QixPQUFPZzFELEVBQWFoMUQsSUFBYythLEVBQVEvYSxLLDZCQ1I1QyxJQUFJaTFELEVBQW9CLEVBQVEsS0FFaEN0M0QsRUFBT0QsUUFJUCxTQUFzQmllLEdBQ3BCLFFBQU82QixFQUFJemYsS0FBS2szRCxFQUFtQnQ1QyxJQUMvQnM1QyxFQUFrQnQ1QyxJQUp4QixJQUFJNkIsRUFBTSxHQUFHL2QsZ0Isc2g3QkNOYixJQWNJZ3FCLEVBQVEsU0FBV3lyQyxHQUd2QixJQUFJaE4sRUFBTyw4QkFDUGlOLEVBQVcsRUFFWHh6QixFQUFJLENBQ1B4VyxPQUFRK3BDLEVBQU16ckMsT0FBU3lyQyxFQUFNenJDLE1BQU0wQixPQUNuQ0MsNEJBQTZCOHBDLEVBQU16ckMsT0FBU3lyQyxFQUFNenJDLE1BQU0yQiw0QkFDeER2ckIsS0FBTSxDQUNMa3NCLE9BQVEsU0FBVUMsR0FDakIsT0FBSUEsYUFBa0JDLEVBQ2QsSUFBSUEsRUFBTUQsRUFBT2hwQixLQUFNMitCLEVBQUU5aEMsS0FBS2tzQixPQUFPQyxFQUFPN2hCLFNBQVU2aEIsRUFBTzdCLE9BQzFENW9CLE1BQU1GLFFBQVEycUIsR0FDakJBLEVBQU8xSyxJQUFJcWdCLEVBQUU5aEMsS0FBS2tzQixRQUVsQkMsRUFBTzFsQixRQUFRLEtBQU0sU0FBU0EsUUFBUSxLQUFNLFFBQVFBLFFBQVEsVUFBVyxNQUloRnRELEtBQU0sU0FBVTNFLEdBQ2YsT0FBT0MsT0FBT2tCLFVBQVU0QixTQUFTckQsS0FBS00sR0FBR2lYLE1BQU0sR0FBSSxJQUdwRDgvQyxNQUFPLFNBQVU1a0QsR0FJaEIsT0FIS0EsRUFBVSxNQUNkbFMsT0FBT0MsZUFBZWlTLEVBQUssT0FBUSxDQUFFM1IsUUFBU3MyRCxJQUV4QzNrRCxFQUFVLE1BSWxCdTZCLE1BQU8sU0FBU3NxQixFQUFVaDNELEVBQUdpM0QsR0FDNUIsSUFBSXZxQixFQUFPcC9CLEVBQUkzSSxFQUFPMitCLEVBQUU5aEMsS0FBS21ELEtBQUszRSxHQUdsQyxPQUZBaTNELEVBQVVBLEdBQVcsR0FFYnR5RCxHQUNQLElBQUssU0FFSixHQURBMkksRUFBS2cyQixFQUFFOWhDLEtBQUt1MUQsTUFBTS8yRCxHQUNkaTNELEVBQVEzcEQsR0FDWCxPQUFPMnBELEVBQVEzcEQsR0FLaEIsSUFBSyxJQUFJeE0sS0FIVDRyQyxFQUFRLEdBQ1J1cUIsRUFBUTNwRCxHQUFNby9CLEVBRUUxc0MsRUFDWEEsRUFBRW9CLGVBQWVOLEtBQ3BCNHJDLEVBQU01ckMsR0FBT2syRCxFQUFVaDNELEVBQUVjLEdBQU1tMkQsSUFJakMsT0FBT3ZxQixFQUVSLElBQUssUUFFSixPQURBcC9CLEVBQUtnMkIsRUFBRTloQyxLQUFLdTFELE1BQU0vMkQsR0FDZGkzRCxFQUFRM3BELEdBQ0oycEQsRUFBUTNwRCxJQUVoQm8vQixFQUFRLEdBQ1J1cUIsRUFBUTNwRCxHQUFNby9CLEVBRWQxc0MsRUFBRW9ILFNBQVEsU0FBVVksRUFBR3pJLEdBQ3RCbXRDLEVBQU1udEMsR0FBS3kzRCxFQUFVaHZELEVBQUdpdkQsTUFHbEJ2cUIsR0FFUixRQUNDLE9BQU8xc0MsS0FLWHFyQixVQUFXLENBQ1Y3VCxPQUFRLFNBQVVsSyxFQUFJNHBELEdBQ3JCLElBQUlyTixFQUFPdm1CLEVBQUU5aEMsS0FBS2tyQyxNQUFNcEosRUFBRWpZLFVBQVUvZCxJQUVwQyxJQUFLLElBQUl4TSxLQUFPbzJELEVBQ2ZyTixFQUFLL29ELEdBQU9vMkQsRUFBTXAyRCxHQUduQixPQUFPK29ELEdBWVJwakQsYUFBYyxTQUFVdWxCLEVBQVFwbUIsRUFBUUUsRUFBUXF4RCxHQUUvQyxJQUFJL3BDLEdBREorcEMsRUFBT0EsR0FBUTd6QixFQUFFalksV0FDRVcsR0FDZnpnQixFQUFNLEdBRVYsSUFBSyxJQUFJNnJELEtBQVNocUMsRUFDakIsR0FBSUEsRUFBUWhzQixlQUFlZzJELEdBQVEsQ0FFbEMsR0FBSUEsR0FBU3h4RCxFQUNaLElBQUssSUFBSXl4RCxLQUFZdnhELEVBQ2hCQSxFQUFPMUUsZUFBZWkyRCxLQUN6QjlyRCxFQUFJOHJELEdBQVl2eEQsRUFBT3V4RCxJQU1yQnZ4RCxFQUFPMUUsZUFBZWcyRCxLQUMxQjdyRCxFQUFJNnJELEdBQVNocUMsRUFBUWdxQyxJQUt4QixJQUFJRSxFQUFNSCxFQUFLbnJDLEdBVWYsT0FUQW1yQyxFQUFLbnJDLEdBQVV6Z0IsRUFHZiszQixFQUFFalksVUFBVWtzQyxJQUFJajBCLEVBQUVqWSxXQUFXLFNBQVN2cUIsRUFBS04sR0FDdENBLElBQVU4MkQsR0FBT3gyRCxHQUFPa3JCLElBQzNCM25CLEtBQUt2RCxHQUFPeUssTUFJUEEsR0FJUmdzRCxJQUFLLFNBQVNBLEVBQUl2M0QsRUFBRzRpQixFQUFVamUsRUFBTXN5RCxHQUNwQ0EsRUFBVUEsR0FBVyxHQUVyQixJQUFJRixFQUFRenpCLEVBQUU5aEMsS0FBS3UxRCxNQUVuQixJQUFLLElBQUl4M0QsS0FBS1MsRUFDYixHQUFJQSxFQUFFb0IsZUFBZTdCLEdBQUksQ0FDeEJxakIsRUFBU2xqQixLQUFLTSxFQUFHVCxFQUFHUyxFQUFFVCxHQUFJb0YsR0FBUXBGLEdBRWxDLElBQUkyQixFQUFXbEIsRUFBRVQsR0FDYmk0RCxFQUFlbDBCLEVBQUU5aEMsS0FBS21ELEtBQUt6RCxHQUVWLFdBQWpCczJELEdBQThCUCxFQUFRRixFQUFNNzFELElBSXRCLFVBQWpCczJELEdBQTZCUCxFQUFRRixFQUFNNzFELE1BQ25EKzFELEVBQVFGLEVBQU03MUQsS0FBYSxFQUMzQnEyRCxFQUFJcjJELEVBQVUwaEIsRUFBVXJqQixFQUFHMDNELEtBTDNCQSxFQUFRRixFQUFNNzFELEtBQWEsRUFDM0JxMkQsRUFBSXIyRCxFQUFVMGhCLEVBQVUsS0FBTXEwQyxPQVVuQ2xvQixRQUFTLEdBRVQwb0IsYUFBYyxTQUFTalIsRUFBTzVqQyxHQUM3QjBnQixFQUFFbzBCLGtCQUFrQnh4RCxTQUFVc2dELEVBQU81akMsSUFHdEM4MEMsa0JBQW1CLFNBQVMveEQsRUFBVzZnRCxFQUFPNWpDLEdBQzdDLElBQUlpQixFQUFNLENBQ1RqQixTQUFVQSxFQUNWcFYsU0FBVSxvR0FHWDgxQixFQUFFdFYsTUFBTUMsSUFBSSxzQkFBdUJwSyxHQUluQyxJQUZBLElBRWM4ekMsRUFGVkMsRUFBV2p5RCxFQUFVd0gsaUJBQWlCMFcsRUFBSXJXLFVBRXJDak8sRUFBRSxFQUFZbzRELEVBQVVDLEVBQVNyNEQsTUFDekMrakMsRUFBRXUwQixpQkFBaUJGLEdBQW1CLElBQVZuUixFQUFnQjNpQyxFQUFJakIsV0FJbERpMUMsaUJBQWtCLFNBQVNGLEVBQVNuUixFQUFPNWpDLEdBSTFDLElBRkEsSUFBdUJ3SyxFQUFuQkksRUFBVyxPQUFpQnhOLEVBQVMyM0MsRUFFbEMzM0MsSUFBVzZwQyxFQUFLaG9ELEtBQUttZSxFQUFPeE0sWUFDbEN3TSxFQUFTQSxFQUFPM1ksV0FHYjJZLElBQ0h3TixHQUFZeE4sRUFBT3hNLFVBQVVoQyxNQUFNcTRDLElBQVMsQ0FBQyxDQUFDLFNBQVMsR0FBR3Q0QyxjQUMxRDZiLEVBQVVrVyxFQUFFalksVUFBVW1DLElBSXZCbXFDLEVBQVFua0QsVUFBWW1rRCxFQUFRbmtELFVBQVV2TCxRQUFRNGhELEVBQU0sSUFBSTVoRCxRQUFRLE9BQVEsS0FBTyxhQUFldWxCLEVBRTFGbXFDLEVBQVF0d0QsYUFFWDJZLEVBQVMyM0MsRUFBUXR3RCxXQUViLE9BQU94RixLQUFLbWUsRUFBTzgzQyxZQUN0QjkzQyxFQUFPeE0sVUFBWXdNLEVBQU94TSxVQUFVdkwsUUFBUTRoRCxFQUFNLElBQUk1aEQsUUFBUSxPQUFRLEtBQU8sYUFBZXVsQixJQUk5RixJQUVJM0osRUFBTSxDQUNUOHpDLFFBQVNBLEVBQ1RucUMsU0FBVUEsRUFDVkosUUFBU0EsRUFDVHZPLEtBTlU4NEMsRUFBUUksYUFTZkMsRUFBd0IsU0FBVUMsR0FDckNwMEMsRUFBSW8wQyxnQkFBa0JBLEVBRXRCMzBCLEVBQUV0VixNQUFNQyxJQUFJLGdCQUFpQnBLLEdBRTdCQSxFQUFJOHpDLFFBQVFPLFVBQVlyMEMsRUFBSW8wQyxnQkFFNUIzMEIsRUFBRXRWLE1BQU1DLElBQUksa0JBQW1CcEssR0FDL0J5ZixFQUFFdFYsTUFBTUMsSUFBSSxXQUFZcEssR0FDeEJqQixHQUFZQSxFQUFTbGpCLEtBQUtta0IsRUFBSTh6QyxVQUsvQixHQUZBcjBCLEVBQUV0VixNQUFNQyxJQUFJLHNCQUF1QnBLLEdBRTlCQSxFQUFJaEYsS0FPVCxHQUZBeWtCLEVBQUV0VixNQUFNQyxJQUFJLG1CQUFvQnBLLEdBRTNCQSxFQUFJdUosUUFLVCxHQUFJbzVCLEdBQVNxUSxFQUFNc0IsT0FBUSxDQUMxQixJQUFJQyxFQUFTLElBQUlELE9BQU83MEIsRUFBRXlYLFVBRTFCcWQsRUFBT0MsVUFBWSxTQUFTQyxHQUMzQk4sRUFBc0JNLEVBQUl6NkIsT0FHM0J1NkIsRUFBT0csWUFBWXo4QyxLQUFLK1IsVUFBVSxDQUNqQ0wsU0FBVTNKLEVBQUkySixTQUNkM08sS0FBTWdGLEVBQUloRixLQUNWMjVDLGdCQUFnQixVQUlqQlIsRUFBc0IxMEIsRUFBRWpXLFVBQVV4SixFQUFJaEYsS0FBTWdGLEVBQUl1SixRQUFTdkosRUFBSTJKLGdCQWxCN0R3cUMsRUFBc0IxMEIsRUFBRTloQyxLQUFLa3NCLE9BQU83SixFQUFJaEYsWUFQeEN5a0IsRUFBRXRWLE1BQU1DLElBQUksV0FBWXBLLElBNkIxQndKLFVBQVcsU0FBVWxQLEVBQU1pUCxFQUFTSSxHQUNuQyxJQUFJM0osRUFBTSxDQUNUaEYsS0FBTVYsRUFDTmlQLFFBQVNBLEVBQ1RJLFNBQVVBLEdBS1gsT0FIQThWLEVBQUV0VixNQUFNQyxJQUFJLGtCQUFtQnBLLEdBQy9CQSxFQUFJOEosT0FBUzJWLEVBQUVtMUIsU0FBUzUwQyxFQUFJaEYsS0FBTWdGLEVBQUl1SixTQUN0Q2tXLEVBQUV0VixNQUFNQyxJQUFJLGlCQUFrQnBLLEdBQ3ZCK0osRUFBTUMsVUFBVXlWLEVBQUU5aEMsS0FBS2tzQixPQUFPN0osRUFBSThKLFFBQVM5SixFQUFJMkosV0FHdkRrckMsYUFBYyxTQUFVdjZDLEVBQU13NkMsRUFBUXZyQyxFQUFTL1MsRUFBT3UrQyxFQUFVQyxFQUFTbjJELEdBQ3hFLElBQUssSUFBSTAwRCxLQUFTaHFDLEVBQ2pCLEdBQUlBLEVBQVFoc0IsZUFBZWcyRCxJQUFXaHFDLEVBQVFncUMsR0FBOUMsQ0FJQSxHQUFJQSxHQUFTMTBELEVBQ1osT0FHRCxJQUFJbzJELEVBQVcxckMsRUFBUWdxQyxHQUN2QjBCLEVBQXNDLFVBQTFCeDFCLEVBQUU5aEMsS0FBS21ELEtBQUttMEQsR0FBeUJBLEVBQVcsQ0FBQ0EsR0FFN0QsSUFBSyxJQUFJdmhELEVBQUksRUFBR0EsRUFBSXVoRCxFQUFTbDJELFNBQVUyVSxFQUFHLENBQ3pDLElBQUlnVSxFQUFVdXRDLEVBQVN2aEQsR0FDdEJ5VSxFQUFTVCxFQUFRUyxPQUNqQlIsSUFBZUQsRUFBUUMsV0FDdkJLLElBQVdOLEVBQVFNLE9BQ25Ca3RDLEVBQW1CLEVBQ25CanRDLEVBQVFQLEVBQVFPLE1BRWpCLEdBQUlELElBQVdOLEVBQVFBLFFBQVFxQixPQUFRLENBRXRDLElBQUlvc0MsRUFBUXp0QyxFQUFRQSxRQUFReG9CLFdBQVd5TyxNQUFNLFlBQVksR0FDekQrWixFQUFRQSxRQUFVaEgsT0FBT2dILEVBQVFBLFFBQVExb0IsT0FBUW0yRCxFQUFRLEtBRzFEenRDLEVBQVVBLEVBQVFBLFNBQVdBLEVBRzdCLElBQUssSUFBSWhzQixFQUFJOGEsRUFBT29FLEVBQU1tNkMsRUFBVXI1RCxFQUFJbzVELEVBQU8vMUQsT0FBUTZiLEdBQU9rNkMsRUFBT3A1RCxHQUFHcUQsU0FBVXJELEVBQUcsQ0FFcEYsSUFBSTBPLEVBQU0wcUQsRUFBT3A1RCxHQUVqQixHQUFJbzVELEVBQU8vMUQsT0FBU3ViLEVBQUt2YixPQUV4QixPQUdELEtBQUlxTCxhQUFlMmYsR0FBbkIsQ0FJQSxHQUFJL0IsR0FBVXRzQixHQUFLbzVELEVBQU8vMUQsT0FBUyxFQUFHLENBR3JDLEdBRkEyb0IsRUFBUXRZLFVBQVl3TCxJQUNoQmpOLEVBQVErWixFQUFRcFksS0FBS2dMLElBRXhCLE1BUUQsSUFMQSxJQUFJMEMsRUFBT3JQLEVBQU02SSxPQUFTbVIsRUFBYWhhLEVBQU0sR0FBRzVPLE9BQVMsR0FDckRnbkIsRUFBS3BZLEVBQU02SSxNQUFRN0ksRUFBTSxHQUFHNU8sT0FDNUJtSCxFQUFJeEssRUFDSjhCLEVBQUlvZCxFQUVDdlEsRUFBTXlxRCxFQUFPLzFELE9BQVFtSCxFQUFJbUUsSUFBUTdNLEVBQUl1b0IsSUFBUSt1QyxFQUFPNXVELEdBQUdwRixPQUFTZzBELEVBQU81dUQsRUFBSSxHQUFHOGhCLFVBQVk5aEIsRUFHOUY4VyxJQUZKeGYsR0FBS3MzRCxFQUFPNXVELEdBQUduSCxZQUdackQsRUFDRmtmLEVBQU1wZCxHQUtSLEdBQUlzM0QsRUFBT3A1RCxhQUFjcXVCLEVBQ3hCLFNBSURxckMsRUFBU2x2RCxFQUFJeEssRUFDYjBPLEVBQU1rUSxFQUFLbEgsTUFBTXdILEVBQUtwZCxHQUN0Qm1RLEVBQU02SSxPQUFTb0UsTUFDVCxDQUNOOE0sRUFBUXRZLFVBQVksRUFFcEIsSUFBSXpCLEVBQVErWixFQUFRcFksS0FBS2xGLEdBQ3hCZ3JELEVBQVMsRUFHWCxHQUFLem5ELEVBQUwsQ0FRR2dhLElBQ0Z1dEMsRUFBbUJ2bkQsRUFBTSxHQUFLQSxFQUFNLEdBQUc1TyxPQUFTLEdBSzdDZ25CLEdBRkEvSSxFQUFPclAsRUFBTTZJLE1BQVEwK0MsSUFDckJ2bkQsRUFBUUEsRUFBTSxHQUFHeUYsTUFBTThoRCxJQUNMbjJELE9BRnRCLElBR0lnRCxFQUFTcUksRUFBSWdKLE1BQU0sRUFBRzRKLEdBQ3RCcTRDLEVBQVFqckQsRUFBSWdKLE1BQU0yUyxHQUVsQi9XLEVBQU8sQ0FBQ3RULEVBQUcwNUQsR0FFWHJ6RCxNQUNEckcsRUFDRmtmLEdBQU83WSxFQUFPaEQsT0FDZGlRLEVBQUtuTSxLQUFLZCxJQUdYLElBQUl1ekQsRUFBVSxJQUFJdnJDLEVBQU13cEMsRUFBT3ByQyxFQUFRc1gsRUFBRW0xQixTQUFTam5ELEVBQU93YSxHQUFVeGEsRUFBT3NhLEVBQU90YSxFQUFPcWEsR0FheEYsR0FYQWhaLEVBQUtuTSxLQUFLeXlELEdBRU5ELEdBQ0hybUQsRUFBS25NLEtBQUt3eUQsR0FHWGgyRCxNQUFNL0IsVUFBVTJZLE9BQU95QyxNQUFNbzhDLEVBQVE5bEQsR0FFdkIsR0FBVm9tRCxHQUNIMzFCLEVBQUVvMUIsYUFBYXY2QyxFQUFNdzZDLEVBQVF2ckMsRUFBUzd0QixFQUFHa2YsR0FBSyxFQUFNMjRDLEdBRWpEeUIsRUFDSCxXQXZDQSxHQUFJQSxFQUNILFdBNENOSixTQUFVLFNBQVN0NkMsRUFBTWlQLEdBQ3hCLElBQUl1ckMsRUFBUyxDQUFDeDZDLEdBRVY4TixFQUFPbUIsRUFBUW5CLEtBRW5CLEdBQUlBLEVBQU0sQ0FDVCxJQUFLLElBQUltckMsS0FBU25yQyxFQUNqQm1CLEVBQVFncUMsR0FBU25yQyxFQUFLbXJDLFVBR2hCaHFDLEVBQVFuQixLQUtoQixPQUZBcVgsRUFBRW8xQixhQUFhdjZDLEVBQU13NkMsRUFBUXZyQyxFQUFTLEVBQUcsR0FBRyxHQUVyQ3VyQyxHQUdSM3FDLE1BQU8sQ0FDTm9yQyxJQUFLLEdBRUx4eUIsSUFBSyxTQUFVOW1DLEVBQU04aUIsR0FDcEIsSUFBSW9MLEVBQVFzVixFQUFFdFYsTUFBTW9yQyxJQUVwQnByQyxFQUFNbHVCLEdBQVFrdUIsRUFBTWx1QixJQUFTLEdBRTdCa3VCLEVBQU1sdUIsR0FBTTRHLEtBQUtrYyxJQUdsQnFMLElBQUssU0FBVW51QixFQUFNK2pCLEdBQ3BCLElBQUl3MUMsRUFBWS8xQixFQUFFdFYsTUFBTW9yQyxJQUFJdDVELEdBRTVCLEdBQUt1NUQsR0FBY0EsRUFBVXoyRCxPQUk3QixJQUFLLElBQVNnZ0IsRUFBTHJqQixFQUFFLEVBQWFxakIsRUFBV3kyQyxFQUFVOTVELE1BQzVDcWpCLEVBQVNpQixLQUtaK0osTUFBT0EsR0FLUixTQUFTQSxFQUFNanBCLEVBQU1tSCxFQUFTZ2dCLEVBQU93dEMsRUFBWXp0QyxHQUNoRHhuQixLQUFLTSxLQUFPQSxFQUNaTixLQUFLeUgsUUFBVUEsRUFDZnpILEtBQUt5bkIsTUFBUUEsRUFFYnpuQixLQUFLekIsT0FBbUMsR0FBekIwMkQsR0FBYyxJQUFJMTJELE9BQ2pDeUIsS0FBS3duQixTQUFXQSxFQXFDakIsR0E3Q0FnckMsRUFBTXpyQyxNQUFRa1ksRUFXZDFWLEVBQU1DLFVBQVksU0FBUzd0QixFQUFHd3RCLEdBQzdCLEdBQWdCLGlCQUFMeHRCLEVBQ1YsT0FBT0EsRUFHUixHQUFJa0QsTUFBTUYsUUFBUWhELEdBQ2pCLE9BQU9BLEVBQUVpakIsS0FBSSxTQUFTMDBDLEdBQ3JCLE9BQU8vcEMsRUFBTUMsVUFBVThwQyxFQUFTbnFDLE1BQzlCdm9CLEtBQUssSUFHVCxJQUFJNGUsRUFBTSxDQUNUbGYsS0FBTTNFLEVBQUUyRSxLQUNSbUgsUUFBUzhoQixFQUFNQyxVQUFVN3RCLEVBQUU4TCxRQUFTMGhCLEdBQ3BDdm5CLElBQUssT0FDTDhuQixRQUFTLENBQUMsUUFBUy90QixFQUFFMkUsTUFDckJ3VCxXQUFZLEdBQ1pxVixTQUFVQSxHQUdYLEdBQUl4dEIsRUFBRThyQixNQUFPLENBQ1osSUFBSVEsRUFBVXBwQixNQUFNRixRQUFRaEQsRUFBRThyQixPQUFTOXJCLEVBQUU4ckIsTUFBUSxDQUFDOXJCLEVBQUU4ckIsT0FDcEQ1b0IsTUFBTS9CLFVBQVV1RixLQUFLNlYsTUFBTXNILEVBQUlrSyxRQUFTekIsR0FHekNnWCxFQUFFdFYsTUFBTUMsSUFBSSxPQUFRcEssR0FFcEIsSUFBSTFMLEVBQWFsWSxPQUFPb1YsS0FBS3dPLEVBQUkxTCxZQUFZOEssS0FBSSxTQUFTbmpCLEdBQ3pELE9BQU9BLEVBQU8sTUFBUStqQixFQUFJMUwsV0FBV3JZLElBQVMsSUFBSW1JLFFBQVEsS0FBTSxVQUFZLE9BQzFFaEQsS0FBSyxLQUVSLE1BQU8sSUFBTTRlLEVBQUk1ZCxJQUFNLFdBQWE0ZCxFQUFJa0ssUUFBUTlvQixLQUFLLEtBQU8sS0FBT2tULEVBQWEsSUFBTUEsRUFBYSxJQUFNLElBQU0wTCxFQUFJL1gsUUFBVSxLQUFPK1gsRUFBSTVkLElBQU0sTUFHMUk0d0QsRUFBTTN3RCxTQUNWLE9BQUsyd0QsRUFBTTBDLGtCQUtOajJCLEVBQUV2Vyw2QkFFTjhwQyxFQUFNMEMsaUJBQWlCLFdBQVcsU0FBVWpCLEdBQzNDLElBQUlyMkMsRUFBVW5HLEtBQUtDLE1BQU11OEMsRUFBSXo2QixNQUM1QmdzQixFQUFPNW5DLEVBQVF1TCxTQUNmM08sRUFBT29ELEVBQVFwRCxLQUNmMjVDLEVBQWlCdjJDLEVBQVF1MkMsZUFFMUIzQixFQUFNMEIsWUFBWWoxQixFQUFFalcsVUFBVXhPLEVBQU15a0IsRUFBRWpZLFVBQVV3K0IsR0FBT0EsSUFDbkQyTyxHQUNIM0IsRUFBTTJDLFdBRUwsR0FHR2wyQixHQWxCQ0EsRUFzQlQsSUFBSW0yQixFQUFTdnpELFNBQVN3ekQsZUFBaUIsR0FBR3ppRCxNQUFNdlgsS0FBS3dHLFNBQVN5ekQscUJBQXFCLFdBQVdyYixNQW1COUYsT0FqQkltYixJQUNIbjJCLEVBQUV5WCxTQUFXMGUsRUFBT2hpRCxJQUVmNnJCLEVBQUV4VyxRQUFXMnNDLEVBQU9HLGFBQWEsaUJBQ1YsWUFBeEIxekQsU0FBUzJ6RCxXQUNQaHRDLE9BQU9pdEMsc0JBQ1ZqdEMsT0FBT2l0QyxzQkFBc0J4MkIsRUFBRW0wQixjQUUvQjVxQyxPQUFPa3RDLFdBQVd6MkIsRUFBRW0wQixhQUFjLElBSW5DdnhELFNBQVNxekQsaUJBQWlCLG1CQUFvQmoyQixFQUFFbTBCLGdCQUs1Q24wQixFQTdnQkssQ0FkbUIsb0JBQVh6VyxPQUNqQkEsT0FFNkIsb0JBQXRCbXRDLG1CQUFxQzdqRCxnQkFBZ0I2akQsa0JBQzNEN2pELEtBQ0EsSUEwaEJpQzdXLEVBQU9ELFVBQzNDQyxFQUFPRCxRQUFVK3JCLEdBSUksb0JBQVh3QixTQUNWQSxPQUFPeEIsTUFBUUEsSSw2QkNoaUJoQixTQUFTYyxFQUFPZCxHQUNkQSxFQUFNQyxVQUFVYSxPQUFTLENBQ3ZCNGYsUUFBUyxrQkFDVG11QixPQUFRLGlCQUNSQyxRQUFTLHNCQUNUQyxNQUFPLDBCQUNQbDBELElBQUssQ0FDSHNsQixRQUFTLHdIQUNUTSxRQUFRLEVBQ1JHLE9BQVEsQ0FDTi9sQixJQUFLLENBQ0hzbEIsUUFBUyxrQkFDVFMsT0FBUSxDQUNONGYsWUFBYSxRQUNiOXBCLFVBQVcsaUJBR2YsYUFBYyxDQUNaeUosUUFBUyxzQ0FDVFMsT0FBUSxDQUNONGYsWUFBYSxDQUNYLEtBQ0EsQ0FDRXJnQixRQUFTLG1CQUNUQyxZQUFZLE1BS3BCb2dCLFlBQWEsT0FDYixZQUFhLENBQ1hyZ0IsUUFBUyxZQUNUUyxPQUFRLENBQ05sSyxVQUFXLG1CQUtuQmxFLE9BQVEscUJBRVZ3TixFQUFNQyxVQUFVYSxPQUFZLElBQUVGLE9BQU8sY0FBY0EsT0FBZSxPQUNoRVosRUFBTUMsVUFBVWEsT0FBZSxPQUNqQ2QsRUFBTTRDLE1BQU00WSxJQUFJLFFBQVEsU0FBUy9pQixHQUNkLFdBQWJBLEVBQUlsZixPQUNOa2YsRUFBSTFMLFdBQWtCLE1BQUkwTCxFQUFJL1gsUUFBUXRMLE1BQU15SCxRQUFRLFFBQVMsU0FHakVoSSxPQUFPQyxlQUFla3JCLEVBQU1DLFVBQVVhLE9BQU9qbUIsSUFBSyxhQUFjLENBWTlEekYsTUFBTyxTQUFvQjgwRCxFQUFTekwsR0FDbEMsSUFBSXVRLEVBQXNCLEdBQzFCQSxFQUFvQixZQUFjdlEsR0FBUSxDQUN4Q3QrQixRQUFTLG9DQUNUQyxZQUFZLEVBQ1pRLE9BQVFaLEVBQU1DLFVBQVV3K0IsSUFFMUJ1USxFQUEyQixNQUFJLHVCQUMvQixJQUFJcHVDLEVBQVMsQ0FDWCxpQkFBa0IsQ0FDaEJULFFBQVMsNEJBQ1RTLE9BQVFvdUMsSUFHWnB1QyxFQUFPLFlBQWM2OUIsR0FBUSxDQUMzQnQrQixRQUFTLFVBQ1RTLE9BQVFaLEVBQU1DLFVBQVV3K0IsSUFFMUIsSUFBSXdRLEVBQU0sR0FDVkEsRUFBSS9FLEdBQVcsQ0FDYi9wQyxRQUFTaEgsT0FDUCxtRUFBbUUxaEIsT0FBT29GLFFBQ3hFLE1BQ0FxdEQsR0FFRixLQUVGOXBDLFlBQVksRUFDWkssUUFBUSxFQUNSRyxPQUFRQSxHQUVWWixFQUFNQyxVQUFVNWtCLGFBQWEsU0FBVSxRQUFTNHpELE1BR3BEanZDLEVBQU1DLFVBQVVvMkIsSUFBTXIyQixFQUFNQyxVQUFVN1QsT0FBTyxTQUFVLElBQ3ZENFQsRUFBTUMsVUFBVWsyQixLQUFPbjJCLEVBQU1DLFVBQVVhLE9BQ3ZDZCxFQUFNQyxVQUFVaXZDLE9BQVNsdkMsRUFBTUMsVUFBVWEsT0FDekNkLEVBQU1DLFVBQVVrdkMsSUFBTW52QyxFQUFNQyxVQUFVYSxPQW5HeEM1c0IsRUFBT0QsUUFBVTZzQixFQUNqQkEsRUFBT0csWUFBYyxTQUNyQkgsRUFBT0ksUUFBVSxDQUFDLE1BQU8sT0FBUSxTQUFVLFEsNkJDQzNDLFNBQVN2WSxFQUFJcVgsSUFDVixTQUFVQSxHQUNULElBQUloWixFQUFTLGdEQUNiZ1osRUFBTUMsVUFBVXRYLElBQU0sQ0FDcEIrM0IsUUFBUyxtQkFDVDB1QixPQUFRLENBQ05qdkMsUUFBUyxpQ0FDVFMsT0FBUSxDQUNOam1CLEtBQU0sWUFHVnlULElBQUssQ0FDSCtSLFFBQVNoSCxPQUFPLFlBQWNuUyxFQUFPdlAsT0FBUyxrQkFBbUIsS0FDakVtcEIsT0FBUSxDQUNOTixTQUFVLFFBQ1ZrZ0IsWUFBYSxZQUdqQnArQixTQUFVK1csT0FDUix3QkFBMEJuUyxFQUFPdlAsT0FBUyxrQkFFNUN1UCxPQUFRLENBQ05tWixRQUFTblosRUFDVHlaLFFBQVEsR0FFVjNxQixTQUFVLCtDQUNWdTVELFVBQVcsZ0JBQ1gvdUMsU0FBVSxvQkFDVmtnQixZQUFhLGFBRWZ4Z0IsRUFBTUMsVUFBVXRYLElBQVksT0FBRWlZLE9BQU9DLEtBQU9iLEVBQU1DLFVBQVV0WCxJQUM1RCxJQUFJbVksRUFBU2QsRUFBTUMsVUFBVWEsT0FDekJBLElBQ0ZBLEVBQU9qbUIsSUFBSWttQixXQUFXLFFBQVMsT0FDL0JmLEVBQU1DLFVBQVU1a0IsYUFDZCxTQUNBLGFBQ0EsQ0FDRSxhQUFjLENBQ1o4a0IsUUFBUyw2Q0FDVFMsT0FBUSxDQUNOLFlBQWEsQ0FDWFQsUUFBUyxhQUNUUyxPQUFRRSxFQUFPam1CLElBQUkrbEIsUUFFckI0ZixZQUFhLHdCQUNiLGFBQWMsQ0FDWnJnQixRQUFTLE1BQ1RTLE9BQVFaLEVBQU1DLFVBQVV0WCxNQUc1QitYLE1BQU8saUJBR1hJLEVBQU9qbUIsTUFyRFosQ0F3REVtbEIsR0E1REw5ckIsRUFBT0QsUUFBVTBVLEVBQ2pCQSxFQUFJc1ksWUFBYyxNQUNsQnRZLEVBQUl1WSxRQUFVLEksNkJDQ2QsU0FBU2hCLEVBQU1GLEdBQ2JBLEVBQU1DLFVBQVVDLE1BQVEsQ0FDdEJ3Z0IsUUFBUyxDQUNQLENBQ0V2Z0IsUUFBUyxrQ0FDVEMsWUFBWSxHQUVkLENBQ0VELFFBQVMsbUJBQ1RDLFlBQVksRUFDWkssUUFBUSxJQUdaelosT0FBUSxDQUNObVosUUFBUyxpREFDVE0sUUFBUSxHQUVWLGFBQWMsQ0FDWk4sUUFBUyxpR0FDVEMsWUFBWSxFQUNaUSxPQUFRLENBQ040ZixZQUFhLFVBR2pCbmdCLFFBQVMsNkdBQ1R6QixRQUFTLHFCQUNUMEIsU0FBVSxZQUNWdkIsT0FBUSx3REFDUndCLFNBQVUsMERBQ1ZpZ0IsWUFBYSxpQkFoQ2pCdHNDLEVBQU9ELFFBQVVpc0IsRUFDakJBLEVBQU1lLFlBQWMsUUFDcEJmLEVBQU1nQixRQUFVLEksY0NXaEJodEIsRUFBT0QsUUFmUCxTQUF1Q3dELEVBQVF5b0MsR0FDN0MsR0FBYyxNQUFWem9DLEVBQWdCLE1BQU8sR0FDM0IsSUFFSS9CLEVBQUt2QixFQUZMbUQsRUFBUyxHQUNUZzRELEVBQWF6NkQsT0FBT29WLEtBQUt4UyxHQUc3QixJQUFLdEQsRUFBSSxFQUFHQSxFQUFJbTdELEVBQVc5M0QsT0FBUXJELElBQ2pDdUIsRUFBTTQ1RCxFQUFXbjdELEdBQ2IrckMsRUFBU25qQyxRQUFRckgsSUFBUSxJQUM3QjRCLEVBQU81QixHQUFPK0IsRUFBTy9CLElBR3ZCLE9BQU80QixJLGNDR1RwRCxFQUFPRCxRQWZQLFNBQXlCOFMsRUFBS3JSLEVBQUtOLEdBWWpDLE9BWElNLEtBQU9xUixFQUNUbFMsT0FBT0MsZUFBZWlTLEVBQUtyUixFQUFLLENBQzlCTixNQUFPQSxFQUNQTCxZQUFZLEVBQ1p3NkQsY0FBYyxFQUNkaGxELFVBQVUsSUFHWnhELEVBQUlyUixHQUFPTixFQUdOMlIsSSw2QkNQVCxTQUFTeW9ELEVBQUl4dkMsSUFDVixTQUFVQSxHQUNULElBQUlELEVBQWFDLEVBQU01cEIsS0FBS2tyQyxNQUFNdGhCLEVBQU1DLFVBQVVGLFlBQ2xEQyxFQUFNQyxVQUFVdXZDLElBQU14dkMsRUFBTUMsVUFBVTdULE9BQU8sU0FBVTJULEdBQ3ZEQyxFQUFNQyxVQUFVdXZDLElBQUkzMEQsSUFBSXNsQixRQUFVLDRMQUNsQ0gsRUFBTUMsVUFBVXV2QyxJQUFJMzBELElBQUkrbEIsT0FBWSxJQUFFVCxRQUFVLGtCQUNoREgsRUFBTUMsVUFBVXV2QyxJQUFJMzBELElBQUkrbEIsT0FDdEIsY0FDQVQsUUFBVSx5REFDWkgsRUFBTUMsVUFBVXV2QyxJQUFJMzBELElBQUkrbEIsT0FBWSxJQUFFQSxPQUNwQyxjQUNFLDRCQUNKWixFQUFNQyxVQUFVNWtCLGFBQ2QsU0FDQSxZQUNBLENBQ0VvMEQsT0FBUSxDQUNOdHZDLFFBQVMsNkNBQ1RTLE9BQVEsQ0FDTjRmLFlBQWEsY0FDYixhQUFjLFNBSXBCeGdCLEVBQU1DLFVBQVV1dkMsSUFBSTMwRCxLQUV0Qm1sQixFQUFNQyxVQUFVNWtCLGFBQ2QsU0FDQSxhQUNBLENBQ0VnekQsT0FBUSxDQUVObHVDLFFBQVMsNENBQ1RTLE9BQVEsQ0FDTixxQkFBc0IsQ0FDcEJULFFBQVMsVUFDVE8sTUFBTyxlQUVURyxLQUFNYixFQUFNQyxVQUFVdXZDLEtBRXhCOXVDLE1BQU8sd0JBR1hWLEVBQU1DLFVBQVV1dkMsSUFBSTMwRCxLQUV0QixJQUFJNjBELEVBQWlCLFNBQVMxRCxHQUM1QixPQUFLQSxFQUdnQixpQkFBVkEsRUFDRkEsRUFFb0IsaUJBQWxCQSxFQUFNdHJELFFBQ1JzckQsRUFBTXRyRCxRQUVSc3JELEVBQU10ckQsUUFBUW1YLElBQUk2M0MsR0FBZ0I3MUQsS0FBSyxJQVJyQyxJQVVQODFELEVBQWEsU0FBU3B0QyxHQUV4QixJQURBLElBQUlxdEMsRUFBYSxHQUNSejdELEVBQUksRUFBR0EsRUFBSW91QixFQUFPL3FCLE9BQVFyRCxJQUFLLENBQ3RDLElBQUk2M0QsRUFBUXpwQyxFQUFPcHVCLEdBQ2YwN0QsR0FBaUIsRUFnRHJCLEdBL0NxQixpQkFBVjdELElBRVEsUUFBZkEsRUFBTXp5RCxNQUNOeXlELEVBQU10ckQsUUFBUSxJQUNZLFFBQTFCc3JELEVBQU10ckQsUUFBUSxHQUFHbkgsS0FHMkIsT0FBeEN5eUQsRUFBTXRyRCxRQUFRLEdBQUdBLFFBQVEsR0FBR0EsUUFHNUJrdkQsRUFBV3A0RCxPQUFTLEdBQ3BCbzRELEVBQVdBLEVBQVdwNEQsT0FBUyxHQUFHMHlELFVBQ2hDd0YsRUFBZTFELEVBQU10ckQsUUFBUSxHQUFHQSxRQUFRLEtBRzFDa3ZELEVBQVcxYyxNQUcyQyxPQUFwRDhZLEVBQU10ckQsUUFBUXNyRCxFQUFNdHJELFFBQVFsSixPQUFTLEdBQUdrSixTQUkxQ2t2RCxFQUFXdDBELEtBQUssQ0FDZDR1RCxRQUFTd0YsRUFBZTFELEVBQU10ckQsUUFBUSxHQUFHQSxRQUFRLElBQ2pEb3ZELGFBQWMsSUFLcEJGLEVBQVdwNEQsT0FBUyxHQUNMLGdCQUFmdzBELEVBQU16eUQsTUFDWSxNQUFsQnl5RCxFQUFNdHJELFFBR05rdkQsRUFBV0EsRUFBV3A0RCxPQUFTLEdBQUdzNEQsZUFFbENGLEVBQVdwNEQsT0FBUyxHQUNwQm80RCxFQUFXQSxFQUFXcDRELE9BQVMsR0FBR3M0RCxhQUFlLEdBQ2xDLGdCQUFmOUQsRUFBTXp5RCxNQUNZLE1BQWxCeXlELEVBQU10ckQsUUFHTmt2RCxFQUFXQSxFQUFXcDRELE9BQVMsR0FBR3M0RCxlQUVsQ0QsR0FBaUIsSUFHakJBLEdBQW1DLGlCQUFWN0QsSUFFekI0RCxFQUFXcDRELE9BQVMsR0FDK0IsSUFBbkRvNEQsRUFBV0EsRUFBV3A0RCxPQUFTLEdBQUdzNEQsYUFDbEMsQ0FHQSxJQUFJQyxFQUFZTCxFQUFlMUQsR0FFN0I3M0QsRUFBSW91QixFQUFPL3FCLE9BQVMsSUFDTSxpQkFBbEIrcUIsRUFBT3B1QixFQUFJLElBQ00sZUFBdkJvdUIsRUFBT3B1QixFQUFJLEdBQUdvRixRQUVoQncyRCxHQUFhTCxFQUFlbnRDLEVBQU9wdUIsRUFBSSxJQUN2Q291QixFQUFPN1QsT0FBT3ZhLEVBQUksRUFBRyxJQUdyQkEsRUFBSSxJQUNzQixpQkFBbEJvdUIsRUFBT3B1QixFQUFJLElBQ00sZUFBdkJvdUIsRUFBT3B1QixFQUFJLEdBQUdvRixRQUVoQncyRCxFQUFZTCxFQUFlbnRDLEVBQU9wdUIsRUFBSSxJQUFNNDdELEVBQzVDeHRDLEVBQU83VCxPQUFPdmEsRUFBSSxFQUFHLEdBQ3JCQSxLQUVGb3VCLEVBQU9wdUIsR0FBSyxJQUFJNnJCLEVBQU13QyxNQUNwQixhQUNBdXRDLEVBQ0EsS0FDQUEsR0FJRi9ELEVBQU10ckQsU0FBb0MsaUJBQWxCc3JELEVBQU10ckQsU0FDaENpdkQsRUFBVzNELEVBQU10ckQsV0FJdkJzZixFQUFNNEMsTUFBTTRZLElBQUksa0JBQWtCLFNBQVMvaUIsR0FDcEIsUUFBakJBLEVBQUkySixVQUF1QyxRQUFqQjNKLEVBQUkySixVQUdsQ3V0QyxFQUFXbDNDLEVBQUk4SixXQXRKbEIsQ0F3SkV2QyxHQTVKTDlyQixFQUFPRCxRQUFVdTdELEVBQ2pCQSxFQUFJdnVDLFlBQWMsTUFDbEJ1dUMsRUFBSXR1QyxRQUFVLEksNkJDRGQsSUFBSTlVLEVBQVMsRUFBUSxLQUNqQjRqRCxFQUFPLEVBQVEsS0FDZkMsRUFBUSxFQUFRLEtBQ2hCQyxFQUFTLEVBQVEsS0FDakJscEQsRUFBUyxFQUFRLEtBQ2pCbXBELEVBQVEsRUFBUSxLQUdwQmo4RCxFQUFPRCxRQWtDUCxTQUFTMHVDLElBQ1AsSUFBSXl0QixFQUFZLEdBQ1pDLEVBQWVILElBQ2Z4NUMsRUFBWSxHQUNaNDVDLEdBQVMsRUFDVEMsR0FBZSxFQXFCbkIsT0FsQkFDLEVBQVUvOUIsS0FvRlYsU0FBYy84QixFQUFLTixHQUNqQixHQUFJNFIsRUFBT3RSLEdBRVQsT0FBeUIsSUFBckI2QixVQUFVQyxRQUNaaTVELEVBQWUsT0FBUUgsR0FFdkI1NUMsRUFBVWhoQixHQUFPTixFQUVWbzdELEdBSUR6OEMsRUFBSXpmLEtBQUtvaUIsRUFBV2hoQixJQUFRZ2hCLEVBQVVoaEIsSUFBUyxLQUl6RCxHQUFJQSxFQUdGLE9BRkErNkQsRUFBZSxPQUFRSCxHQUN2QjU1QyxFQUFZaGhCLEVBQ0w4NkQsRUFJVCxPQUFPOTVDLEdBeEdUODVDLEVBQVVFLE9BQVNBLEVBR25CRixFQUFVSixVQUFZQSxFQUN0QkksRUFBVTV3RCxJQThHVixTQUFheEssR0FDWCxJQUFJdWMsRUFJSixHQUZBOCtDLEVBQWUsTUFBT0gsR0FFbEJsN0QsY0FFRyxHQUFxQixtQkFBVkEsRUFDaEJ1N0QsRUFBVXgvQyxNQUFNLEtBQU01WixlQUNqQixJQUFxQixpQkFBVm5DLEVBT2hCLE1BQU0sSUFBSXNELE1BQU0sK0JBQWlDdEQsRUFBUSxLQU5yRCxXQUFZQSxFQUNkdzdELEVBQVF4N0QsR0FFUnk3RCxFQUFVejdELEdBTVZ1YyxJQUNGK0UsRUFBVS9FLFNBQVd2RixFQUFPc0ssRUFBVS9FLFVBQVksR0FBSUEsSUFHeEQsT0FBTzYrQyxFQUVQLFNBQVNLLEVBQVV2cEQsR0FDakJzcEQsRUFBUXRwRCxFQUFPcThCLFNBRVhyOEIsRUFBT3FLLFdBQ1RBLEVBQVd2RixFQUFPdUYsR0FBWSxHQUFJckssRUFBT3FLLFdBSTdDLFNBQVM2cEIsRUFBSXBtQyxHQUNYLEdBQXFCLG1CQUFWQSxFQUNUdTdELEVBQVV2N0QsT0FDTCxJQUFxQixpQkFBVkEsRUFPaEIsTUFBTSxJQUFJc0QsTUFBTSwrQkFBaUN0RCxFQUFRLEtBTnJELFdBQVlBLEVBQ2R1N0QsRUFBVXgvQyxNQUFNLEtBQU0vYixHQUV0Qnk3RCxFQUFVejdELElBT2hCLFNBQVN3N0QsRUFBUWp0QixHQUNmLElBQUluc0MsRUFDQXlYLEVBRUosR0FBSTAwQixhQUVHLElBQXVCLGlCQUFaQSxLQUF3QixXQUFZQSxHQVFwRCxNQUFNLElBQUlqckMsTUFBTSxvQ0FBc0NpckMsRUFBVSxLQUpoRSxJQUhBbnNDLEVBQVNtc0MsRUFBUW5zQyxPQUNqQnlYLEdBQVMsSUFFQUEsRUFBUXpYLEdBQ2Zna0MsRUFBSW1JLEVBQVExMEIsS0FPbEIsU0FBUzBoRCxFQUFVNXJCLEVBQVEzdkMsR0FDekIsSUFBSW84QixFQUFRazRCLEVBQUsza0IsR0FFYnZULEdBQ0UyK0IsRUFBTTMrQixFQUFNLEtBQU8yK0IsRUFBTS82RCxLQUMzQkEsRUFBUWdYLEVBQU9vbEIsRUFBTSxHQUFJcDhCLElBRzNCbzhCLEVBQU0sR0FBS3A4QixHQUVYZzdELEVBQVU5MEQsS0FBS3VRLEVBQU12WCxLQUFLaUQsY0F0TGhDaTVELEVBQVU3L0MsTUE0TVYsU0FBZW1nRCxHQUNiLElBQ0lDLEVBREFqMkIsRUFBT20xQixFQUFNYSxHQU9qQixHQUpBSixJQUVBTSxFQUFhLFFBRGJELEVBQVNQLEVBQVVPLFFBR2ZFLEVBQVFGLEdBQ1YsT0FBTyxJQUFJQSxFQUFPbjZELE9BQU9ra0MsR0FBT0EsR0FBTW5xQixRQUd4QyxPQUFPb2dELEVBQU9uNkQsT0FBT2trQyxHQUFPQSxJQXZOOUIwMUIsRUFBVS90QyxVQWlSVixTQUFtQnpnQixFQUFNOHVELEdBQ3ZCLElBQ0lJLEVBREFwMkIsRUFBT20xQixFQUFNYSxHQVFqQixHQUxBSixJQUVBUyxFQUFlLFlBRGZELEVBQVdWLEVBQVVVLFVBRXJCRSxFQUFXcHZELEdBRVBpdkQsRUFBUUMsR0FDVixPQUFPLElBQUlBLEVBQVNsdkQsRUFBTTg0QixHQUFNdTJCLFVBR2xDLE9BQU9ILEVBQVNsdkQsRUFBTTg0QixJQTdSeEIwMUIsRUFBVTN0QyxJQUFNQSxFQUNoQjJ0QyxFQUFVM3JCLFFBMlBWLFNBQWlCN2lDLEVBQU04NEIsR0FDckIsSUFDSXh6QixFQURBZ3FELEdBQVcsRUFPZixPQUpBenVDLEVBQUk3Z0IsRUFBTTg0QixHQU1WLFNBQWN6dkIsRUFBS29KLEdBQ2pCNjhDLEdBQVcsRUFDWHRCLEVBQUsza0QsR0FDTC9ELEVBQVNtTixLQVBYODhDLEVBQVcsVUFBVyxNQUFPRCxHQUV0QmhxRCxHQWxRVGtwRCxFQUFVMTdDLFFBQVVBLEVBQ3BCMDdDLEVBQVVnQixZQWdVVixTQUFxQlYsR0FDbkIsSUFDSWgyQixFQURBdzJCLEdBQVcsRUFZZixPQVRBWixJQUNBTSxFQUFhLGNBQWVSLEVBQVVPLFFBQ3RDSSxFQUFlLGNBQWVYLEVBQVVVLFVBR3hDcDhDLEVBRkFnbUIsRUFBT20xQixFQUFNYSxJQVFiLFNBQWN6bEQsR0FDWmltRCxHQUFXLEVBQ1h0QixFQUFLM2tELE1BTlBrbUQsRUFBVyxjQUFlLFVBQVdELEdBRTlCeDJCLEdBMVVGMDFCLEVBSVAsU0FBU0EsSUFLUCxJQUpBLElBQUlpQixFQUFjOXVCLElBQ2RuckMsRUFBUzQ0RCxFQUFVNTRELE9BQ25CeVgsR0FBUyxJQUVKQSxFQUFRelgsR0FDZmk2RCxFQUFZN3hELElBQUl1UixNQUFNLEtBQU1pL0MsRUFBVW5oRCxJQUt4QyxPQUZBd2lELEVBQVloL0IsS0FBS3JtQixHQUFPLEVBQU0sR0FBSXNLLElBRTNCKzZDLEVBWVQsU0FBU2YsSUFDUCxJQUFJemtELEVBQ0E4NEIsRUFDQS9yQyxFQUNBMDRELEVBRUosR0FBSXBCLEVBQ0YsT0FBT0UsRUFHVCxPQUFTRCxFQUFjSCxFQUFVNTRELFFBRS9CdXRDLEdBREE5NEIsRUFBU21rRCxFQUFVRyxJQUNILEdBRUYsTUFFRSxLQUhoQnYzRCxFQUFVaVQsRUFBTyxPQU9ELElBQVpqVCxJQUNGaVQsRUFBTyxRQUFLL1IsR0FLYSxtQkFGM0J3M0QsRUFBYzNzQixFQUFPNXpCLE1BQU1xL0MsRUFBV3ZrRCxFQUFPSixNQUFNLE1BR2pEd2tELEVBQWF6d0QsSUFBSTh4RCxJQU9yQixPQUhBcEIsR0FBUyxFQUNUQyxFQUFjb0IsSUFFUG5CLEVBc0hULFNBQVM5RyxFQUFLM2tCLEdBS1osSUFKQSxJQUVJdlQsRUFGQWg2QixFQUFTNDRELEVBQVU1NEQsT0FDbkJ5WCxHQUFTLElBR0pBLEVBQVF6WCxHQUdmLElBRkFnNkIsRUFBUTQrQixFQUFVbmhELElBRVIsS0FBTzgxQixFQUNmLE9BQU92VCxFQXlCYixTQUFTM08sRUFBSTdnQixFQUFNODRCLEVBQU14dkIsR0FTdkIsR0FSQThsRCxFQUFXcHZELEdBQ1gwdUQsSUFFS3BsRCxHQUFzQixtQkFBVHd2QixJQUNoQnh2QixFQUFLd3ZCLEVBQ0xBLEVBQU8sT0FHSnh2QixFQUNILE9BQU8sSUFBSXNtRCxRQUFRQyxHQUtyQixTQUFTQSxFQUFTQyxFQUFTQyxHQUN6QjFCLEVBQWF4dEMsSUFBSTdnQixFQUFNaXVELEVBQU1uMUIsSUFFN0IsU0FBY3p2QixFQUFLb0osRUFBTXFtQixHQUN2QnJtQixFQUFPQSxHQUFRelMsRUFDWHFKLEVBQ0YwbUQsRUFBTzFtRCxHQUNFeW1ELEVBQ1RBLEVBQVFyOUMsR0FFUm5KLEVBQUcsS0FBTW1KLEVBQU1xbUIsTUFackIrMkIsRUFBUyxLQUFNdm1ELEdBNkRqQixTQUFTd0osRUFBUWc4QyxFQUFLeGxELEdBS3BCLEdBSkFvbEQsSUFDQU0sRUFBYSxVQUFXUixFQUFVTyxRQUNsQ0ksRUFBZSxVQUFXWCxFQUFVVSxXQUUvQjVsRCxFQUNILE9BQU8sSUFBSXNtRCxRQUFRQyxHQUtyQixTQUFTQSxFQUFTQyxFQUFTQyxHQUN6QixJQUFJajNCLEVBQU9tMUIsRUFBTWEsR0FFakJrQixFQUFTbnZDLElBQUkydEMsRUFBVyxDQUFDMTFCLEtBQU1BLElBRS9CLFNBQWN6dkIsR0FDUkEsRUFDRjBtRCxFQUFPMW1ELEdBQ0V5bUQsRUFDVEEsRUFBUWgzQixHQUVSeHZCLEVBQUcsS0FBTXd2QixNQWJmKzJCLEVBQVMsS0FBTXZtRCxJQXBXRnEzQixHQUFVK3RCLFNBRTNCLElBQUk3a0QsRUFBUSxHQUFHQSxNQUNYa0ksRUFBTSxHQUFHL2QsZUFHVGc4RCxFQUFXOUIsSUFDWnR3RCxLQUlILFNBQXVCM0osRUFBR3FwQixHQUN4QkEsRUFBSTdLLEtBQU94ZSxFQUFFMGEsTUFBTTJPLEVBQUl3YixTQUp0Qmw3QixLQU9ILFNBQXFCM0osRUFBR3FwQixFQUFLOVksR0FDM0J2USxFQUFFNHNCLElBQUl2RCxFQUFJN0ssS0FBTTZLLEVBQUl3YixNQUVwQixTQUFjenZCLEVBQUtvSixFQUFNcW1CLEdBQ25CenZCLEVBQ0Y3RSxFQUFLNkUsSUFFTGlVLEVBQUk3SyxLQUFPQSxFQUNYNkssRUFBSXdiLEtBQU9BLEVBQ1h0MEIsV0FmSDVHLEtBb0JILFNBQTJCM0osRUFBR3FwQixHQUM1QkEsRUFBSXdiLEtBQUttM0IsU0FBV2g4RCxFQUFFd3NCLFVBQVVuRCxFQUFJN0ssS0FBTTZLLEVBQUl3YixTQWtYaEQsU0FBU20yQixFQUFRNzdELEdBQ2YsTUFBd0IsbUJBQVZBLEdBSWhCLFNBQWNBLEdBQ1osSUFBSU0sRUFDSixJQUFLQSxLQUFPTixFQUNWLE9BQU8sRUFFVCxPQUFPLEVBVCtCNlUsQ0FBSzdVLEVBQU1XLFdBYW5ELFNBQVNpN0QsRUFBYXQ4RCxFQUFNcThELEdBQzFCLEdBQXNCLG1CQUFYQSxFQUNULE1BQU0sSUFBSXI0RCxNQUFNLFdBQWFoRSxFQUFPLHNCQUt4QyxTQUFTeThELEVBQWV6OEQsRUFBTXc4RCxHQUM1QixHQUF3QixtQkFBYkEsRUFDVCxNQUFNLElBQUl4NEQsTUFBTSxXQUFhaEUsRUFBTyx3QkFLeEMsU0FBUys3RCxFQUFlLzdELEVBQU00N0QsR0FDNUIsR0FBSUEsRUFDRixNQUFNLElBQUk1M0QsTUFDUixDQUNFLGtCQUFvQmhFLEVBQU8sMENBQzNCLGlFQUNBLGdCQUNBbUYsS0FBSyxLQU1iLFNBQVN1M0QsRUFBV3B2RCxHQUNsQixJQUFLQSxJQUFTZ0YsRUFBT2hGLEVBQUt6SSxNQUN4QixNQUFNLElBQUliLE1BQU0sdUJBQXlCc0osRUFBTyxLQUtwRCxTQUFTdXZELEVBQVc3OEQsRUFBTXc5RCxFQUFXWixHQUNuQyxJQUFLQSxFQUNILE1BQU0sSUFBSTU0RCxNQUNSLElBQU1oRSxFQUFPLDBCQUE0Qnc5RCxFQUFZLGUsNkJDNWMzRCxJQUFJQyxFQUFTdDlELE9BQU9rQixVQUFVQyxlQUMxQm84RCxFQUFRdjlELE9BQU9rQixVQUFVNEIsU0FDekI3QyxFQUFpQkQsT0FBT0MsZUFDeEJ1OUQsRUFBT3g5RCxPQUFPMGhCLHlCQUVkM2UsRUFBVSxTQUFpQnNVLEdBQzlCLE1BQTZCLG1CQUFsQnBVLE1BQU1GLFFBQ1RFLE1BQU1GLFFBQVFzVSxHQUdLLG1CQUFwQmttRCxFQUFNOTlELEtBQUs0WCxJQUdmb21ELEVBQWdCLFNBQXVCdnJELEdBQzFDLElBQUtBLEdBQTJCLG9CQUFwQnFyRCxFQUFNOTlELEtBQUt5UyxHQUN0QixPQUFPLEVBR1IsSUFTSXJSLEVBVEE2OEQsRUFBb0JKLEVBQU83OUQsS0FBS3lTLEVBQUssZUFDckN5ckQsRUFBbUJ6ckQsRUFBSWs2QixhQUFlbDZCLEVBQUlrNkIsWUFBWWxyQyxXQUFhbzhELEVBQU83OUQsS0FBS3lTLEVBQUlrNkIsWUFBWWxyQyxVQUFXLGlCQUU5RyxHQUFJZ1IsRUFBSWs2QixjQUFnQnN4QixJQUFzQkMsRUFDN0MsT0FBTyxFQU1SLElBQUs5OEQsS0FBT3FSLEdBRVosWUFBc0IsSUFBUnJSLEdBQXVCeThELEVBQU83OUQsS0FBS3lTLEVBQUtyUixJQUluRCs4RCxFQUFjLFNBQXFCbjdELEVBQVEwQixHQUMxQ2xFLEdBQW1DLGNBQWpCa0UsRUFBUXRFLEtBQzdCSSxFQUFld0MsRUFBUTBCLEVBQVF0RSxLQUFNLENBQ3BDSyxZQUFZLEVBQ1p3NkQsY0FBYyxFQUNkbjZELE1BQU80RCxFQUFRMDVELFNBQ2Zub0QsVUFBVSxJQUdYalQsRUFBTzBCLEVBQVF0RSxNQUFRc0UsRUFBUTA1RCxVQUs3QkMsRUFBYyxTQUFxQjVyRCxFQUFLclMsR0FDM0MsR0FBYSxjQUFUQSxFQUFzQixDQUN6QixJQUFLeTlELEVBQU83OUQsS0FBS3lTLEVBQUtyUyxHQUNyQixPQUNNLEdBQUkyOUQsRUFHVixPQUFPQSxFQUFLdHJELEVBQUtyUyxHQUFNVSxNQUl6QixPQUFPMlIsRUFBSXJTLElBR1pSLEVBQU9ELFFBQVUsU0FBU21ZLElBQ3pCLElBQUlwVCxFQUFTdEUsRUFBTTJYLEVBQUs2aEIsRUFBTTBrQyxFQUFhdHhCLEVBQ3ZDaHFDLEVBQVNDLFVBQVUsR0FDbkJwRCxFQUFJLEVBQ0pxRCxFQUFTRCxVQUFVQyxPQUNuQnE3RCxHQUFPLEVBYVgsSUFWc0Isa0JBQVh2N0QsSUFDVnU3RCxFQUFPdjdELEVBQ1BBLEVBQVNDLFVBQVUsSUFBTSxHQUV6QnBELEVBQUksSUFFUyxNQUFWbUQsR0FBcUMsaUJBQVhBLEdBQXlDLG1CQUFYQSxLQUMzREEsRUFBUyxJQUdIbkQsRUFBSXFELElBQVVyRCxFQUdwQixHQUFlLE9BRmY2RSxFQUFVekIsVUFBVXBELElBSW5CLElBQUtPLEtBQVFzRSxFQUNacVQsRUFBTXNtRCxFQUFZcjdELEVBQVE1QyxHQUl0QjRDLEtBSEo0MkIsRUFBT3lrQyxFQUFZMzVELEVBQVN0RSxNQUt2Qm0rRCxHQUFRM2tDLElBQVNva0MsRUFBY3BrQyxLQUFVMGtDLEVBQWNoN0QsRUFBUXMyQixNQUM5RDBrQyxHQUNIQSxHQUFjLEVBQ2R0eEIsRUFBUWoxQixHQUFPelUsRUFBUXlVLEdBQU9BLEVBQU0sSUFFcENpMUIsRUFBUWoxQixHQUFPaW1ELEVBQWNqbUQsR0FBT0EsRUFBTSxHQUkzQ29tRCxFQUFZbjdELEVBQVEsQ0FBRTVDLEtBQU1BLEVBQU1nK0QsU0FBVXRtRCxFQUFPeW1ELEVBQU12eEIsRUFBT3BULFdBR3RDLElBQVRBLEdBQ2pCdWtDLEVBQVluN0QsRUFBUSxDQUFFNUMsS0FBTUEsRUFBTWcrRCxTQUFVeGtDLEtBUWpELE9BQU81MkIsSSw2QkNqSFJwRCxFQUFPRCxRQUVQLFNBQWNvWCxHQUNaLEdBQUlBLEVBQ0YsTUFBTUEsSSw2QkNKVixJQUFJeW5ELEVBQVcsRUFBUSxLQUNuQkMsRUFBUSxFQUFRLEtBRXBCNytELEVBQU9ELFFBQVU4K0QsRUFFakIsSUFBSS9wQyxFQUFRK3BDLEVBQU1oOUQsVUFXbEIsU0FBUzhnQixFQUFRdkUsRUFBUVQsRUFBVW1oRCxHQUNqQyxJQUFJQyxFQUFXaDZELEtBQUtnVixLQUNoQjRJLEVBQVUsSUFBSWk4QyxFQUFTeGdELEVBQVFULEVBQVVtaEQsR0FXN0MsT0FUSUMsSUFDRnA4QyxFQUFRbmlCLEtBQU91K0QsRUFBVyxJQUFNcDhDLEVBQVFuaUIsS0FDeENtaUIsRUFBUWlrQixLQUFPbTRCLEdBR2pCcDhDLEVBQVFxOEMsT0FBUSxFQUVoQmo2RCxLQUFLMGEsU0FBU3JZLEtBQUt1YixHQUVaQSxFQXRCVG1TLEVBQU1uUyxRQUFVQSxFQUNoQm1TLEVBQU1wYyxLQW9DTixXQUNFLElBQUlpSyxFQUFVNWQsS0FBSzRkLFFBQVExRixNQUFNbFksS0FBTTFCLFdBSXZDLE9BRkFzZixFQUFRcThDLE1BQVEsS0FFVHI4QyxHQXhDVG1TLEVBQU1tcUMsS0F5Qk4sV0FDRSxJQUFJdDhDLEVBQVU1ZCxLQUFLNGQsUUFBUTFGLE1BQU1sWSxLQUFNMUIsV0FJdkMsTUFGQXNmLEVBQVFxOEMsT0FBUSxFQUVWcjhDLEdBM0JSbVMsRUFBTTBmLEtBQU83eEIsRyw2QkNaYixJQUFJNEwsRUFBWSxFQUFRLEtBS3hCLFNBQVMyd0MsS0FIVGwvRCxFQUFPRCxRQUFVNitELEVBSWpCTSxFQUFrQnI5RCxVQUFZMkMsTUFBTTNDLFVBQ3BDKzhELEVBQVMvOEQsVUFBWSxJQUFJcTlELEVBR3pCLElBQUlwcUMsRUFBUThwQyxFQUFTLzhELFVBZ0JyQixTQUFTKzhELEVBQVN4Z0QsRUFBUVQsRUFBVW1oRCxHQUNsQyxJQUFJeGtELEVBQ0E2a0QsRUFDQUMsRUFFb0IsaUJBQWJ6aEQsSUFDVG1oRCxFQUFTbmhELEVBQ1RBLEVBQVcsTUFHYnJELEVBdUNGLFNBQXFCd2tELEdBQ25CLElBQ0kvakQsRUFEQTNILEVBQVMsQ0FBQyxLQUFNLE1BR0UsaUJBQVgwckQsS0FHTSxLQUZmL2pELEVBQVErakQsRUFBT2oyRCxRQUFRLE1BR3JCdUssRUFBTyxHQUFLMHJELEdBRVoxckQsRUFBTyxHQUFLMHJELEVBQU9ubkQsTUFBTSxFQUFHb0QsR0FDNUIzSCxFQUFPLEdBQUswckQsRUFBT25uRCxNQUFNb0QsRUFBUSxLQUlyQyxPQUFPM0gsRUF0RENpc0QsQ0FBWVAsR0FDcEJLLEVBQVE1d0MsRUFBVTVRLElBQWEsTUFFL0J5aEQsRUFBVyxDQUNUMW5ELE1BQU8sQ0FBQy9LLEtBQU0sS0FBTUMsT0FBUSxNQUM1QmtLLElBQUssQ0FBQ25LLEtBQU0sS0FBTUMsT0FBUSxPQUl4QitRLEdBQVlBLEVBQVNBLFdBQ3ZCQSxFQUFXQSxFQUFTQSxVQUdsQkEsSUFFRUEsRUFBU2pHLE9BQ1gwbkQsRUFBV3poRCxFQUNYQSxFQUFXQSxFQUFTakcsT0FHcEIwbkQsRUFBUzFuRCxNQUFRaUcsR0FJakJTLEVBQU9raEQsUUFDVHY2RCxLQUFLdTZELE1BQVFsaEQsRUFBT2toRCxNQUNwQmxoRCxFQUFTQSxFQUFPdUUsU0FHbEI1ZCxLQUFLNGQsUUFBVXZFLEVBQ2ZyWixLQUFLdkUsS0FBTzIrRCxFQUNacDZELEtBQUtxWixPQUFTQSxFQUNkclosS0FBSzRILEtBQU9nUixFQUFXQSxFQUFTaFIsS0FBTyxLQUN2QzVILEtBQUs2SCxPQUFTK1EsRUFBV0EsRUFBUy9RLE9BQVMsS0FDM0M3SCxLQUFLcTZELFNBQVdBLEVBQ2hCcjZELEtBQUt4QixPQUFTK1csRUFBTSxHQUNwQnZWLEtBQUt3NkQsT0FBU2psRCxFQUFNLEdBNUR0QndhLEVBQU04UixLQUFPLEdBQ2I5UixFQUFNdDBCLEtBQU8sR0FDYnMwQixFQUFNMVcsT0FBUyxHQUNmMFcsRUFBTW5TLFFBQVUsR0FDaEJtUyxFQUFNd3FDLE1BQVEsR0FDZHhxQyxFQUFNa3FDLE1BQVEsS0FDZGxxQyxFQUFNbG9CLE9BQVMsS0FDZmtvQixFQUFNbm9CLEtBQU8sTSw2QkNuQmIsSUFBSWtULEVBQU0sR0FBRy9kLGVBNkJiLFNBQVMwOUQsRUFBTUEsR0FLYixPQUpLQSxHQUEwQixpQkFBVkEsSUFDbkJBLEVBQVEsSUFHSHprRCxFQUFNeWtELEVBQU03eUQsTUFBUSxJQUFNb08sRUFBTXlrRCxFQUFNNXlELFFBRy9DLFNBQVMrUSxFQUFTd0IsR0FLaEIsT0FKS0EsR0FBc0IsaUJBQVJBLElBQ2pCQSxFQUFNLElBR0RxZ0QsRUFBTXJnRCxFQUFJekgsT0FBUyxJQUFNOG5ELEVBQU1yZ0QsRUFBSXJJLEtBRzVDLFNBQVNpRSxFQUFNN1osR0FDYixPQUFPQSxHQUEwQixpQkFBVkEsRUFBcUJBLEVBQVEsRUE1Q3REbEIsRUFBT0QsUUFFUCxTQUFtQm1CLEdBRWpCLElBQUtBLEdBQTBCLGlCQUFWQSxFQUNuQixPQUFPLEtBSVQsR0FBSTJlLEVBQUl6ZixLQUFLYyxFQUFPLGFBQWUyZSxFQUFJemYsS0FBS2MsRUFBTyxRQUNqRCxPQUFPeWMsRUFBU3pjLEVBQU15YyxVQUl4QixHQUFJa0MsRUFBSXpmLEtBQUtjLEVBQU8sVUFBWTJlLEVBQUl6ZixLQUFLYyxFQUFPLE9BQzlDLE9BQU95YyxFQUFTemMsR0FJbEIsR0FBSTJlLEVBQUl6ZixLQUFLYyxFQUFPLFNBQVcyZSxFQUFJemYsS0FBS2MsRUFBTyxVQUM3QyxPQUFPcytELEVBQU10K0QsR0FJZixPQUFPLE8sNkJDMUJULElBQUk2WSxFQUFPLEVBQVEsR0FDZnBSLEVBQVUsRUFBUSxLQUNsQnVZLEVBQVMsRUFBUSxLQUVyQmxoQixFQUFPRCxRQUFVOCtELEVBRWpCLElBQUloL0MsRUFBTSxHQUFHL2QsZUFDVGd6QixFQUFRK3BDLEVBQU1oOUQsVUFFbEJpekIsRUFBTXJ4QixTQW9JTixTQUFrQm9lLEdBQ2hCLElBQUkzZ0IsRUFBUTZELEtBQUtnNUQsVUFBWSxHQUM3QixPQUFPNzhDLEVBQU9oZ0IsR0FBU0EsRUFBTXVDLFNBQVNvZSxHQUFZbmYsT0FBT3hCLElBakkzRCxJQUFJeVAsRUFBUSxDQUNWLFVBQ0EsT0FDQSxXQUNBLE9BQ0EsVUFDQSxXQUlGLFNBQVNrdUQsRUFBTS81RCxHQUNiLElBQUkyVCxFQUNBc0MsRUFDQXpYLEVBRUosR0FBS3dCLEdBRUUsR0FBdUIsaUJBQVpBLEdBQXdCb2MsRUFBT3BjLEdBQy9DQSxFQUFVLENBQUNpNUQsU0FBVWo1RCxRQUNoQixHQUFJLFlBQWFBLEdBQVcsYUFBY0EsRUFDL0MsT0FBT0EsT0FKUEEsRUFBVSxHQU9aLEtBQU1DLGdCQUFnQjg1RCxHQUNwQixPQUFPLElBQUlBLEVBQU0vNUQsR0FZbkIsSUFUQUMsS0FBS3c1QixLQUFPLEdBQ1p4NUIsS0FBSzBhLFNBQVcsR0FDaEIxYSxLQUFLMDZELFFBQVUsR0FDZjE2RCxLQUFLMjZELElBQU05K0MsUUFBUTgrQyxNQUduQjNrRCxHQUFTLEVBQ1R6WCxFQUFTcU4sRUFBTXJOLFNBRU55WCxFQUFRelgsR0FDZm1WLEVBQU85SCxFQUFNb0ssR0FFVDhFLEVBQUl6ZixLQUFLMEUsRUFBUzJULEtBQ3BCMVQsS0FBSzBULEdBQVEzVCxFQUFRMlQsSUFLekIsSUFBS0EsS0FBUTNULEdBQ2tCLElBQXpCNkwsRUFBTTlILFFBQVE0UCxLQUNoQjFULEtBQUswVCxHQUFRM1QsRUFBUTJULElBdUYzQixTQUFTa25ELEVBQVd2bEQsRUFBTTVaLEdBQ3hCLElBQWdDLElBQTVCNFosRUFBS3ZSLFFBQVFrUixFQUFLMjdCLEtBQ3BCLE1BQU0sSUFBSWx4QyxNQUFNLElBQU1oRSxFQUFPLHVDQUF5Q3VaLEVBQUsyN0IsSUFBTSxLQUtyRixTQUFTa3FCLEVBQWV4bEQsRUFBTTVaLEdBQzVCLElBQUs0WixFQUNILE1BQU0sSUFBSTVWLE1BQU0sSUFBTWhFLEVBQU8scUJBS2pDLFNBQVNxL0QsRUFBVzlsRCxFQUFNdlosR0FDeEIsSUFBS3VaLEVBQ0gsTUFBTSxJQUFJdlYsTUFBTSxZQUFjaEUsRUFBTyxtQ0FqR3pDRyxPQUFPQyxlQUFlazBCLEVBQU8sT0FBUSxDQUNuQ2gwQixJQUFLLFdBQ0gsT0FBT2lFLEtBQUswNkQsUUFBUTE2RCxLQUFLMDZELFFBQVFuOEQsT0FBUyxJQUU1Q3NJLElBQUssU0FBVW1PLEdBQ2I2bEQsRUFBZTdsRCxFQUFNLFFBRWpCQSxJQUFTaFYsS0FBS2dWLE1BQ2hCaFYsS0FBSzA2RCxRQUFRcjRELEtBQUsyUyxNQU14QnBaLE9BQU9DLGVBQWVrMEIsRUFBTyxVQUFXLENBQ3RDaDBCLElBQUssV0FDSCxNQUE0QixpQkFBZGlFLEtBQUtnVixLQUFvQkEsRUFBSytsRCxRQUFRLzZELEtBQUtnVixXQUFRL1QsR0FFbkU0RixJQUFLLFNBQVVrMEQsR0FDYkQsRUFBVzk2RCxLQUFLZ1YsS0FBTSxXQUN0QmhWLEtBQUtnVixLQUFPQSxFQUFLcFUsS0FBS202RCxHQUFXLEdBQUkvNkQsS0FBSyt5QyxhQUs5Q24zQyxPQUFPQyxlQUFlazBCLEVBQU8sV0FBWSxDQUN2Q2gwQixJQUFLLFdBQ0gsTUFBNEIsaUJBQWRpRSxLQUFLZ1YsS0FBb0JBLEVBQUsrOUIsU0FBUy95QyxLQUFLZ1YsV0FBUS9ULEdBRXBFNEYsSUFBSyxTQUFVa3NDLEdBQ2I4bkIsRUFBZTluQixFQUFVLFlBQ3pCNm5CLEVBQVc3bkIsRUFBVSxZQUNyQi95QyxLQUFLZ1YsS0FBT0EsRUFBS3BVLEtBQUtaLEtBQUsrNkQsU0FBVyxHQUFJaG9CLE1BSzlDbjNDLE9BQU9DLGVBQWVrMEIsRUFBTyxVQUFXLENBQ3RDaDBCLElBQUssV0FDSCxNQUE0QixpQkFBZGlFLEtBQUtnVixLQUFvQkEsRUFBS2l4QixRQUFRam1DLEtBQUtnVixXQUFRL1QsR0FFbkU0RixJQUFLLFNBQVVvL0IsR0FDYixJQUFJKzBCLEVBQU0vMEIsR0FBVyxHQUtyQixHQUhBMjBCLEVBQVdJLEVBQUssV0FDaEJGLEVBQVc5NkQsS0FBS2dWLEtBQU0sV0FFbEJnbUQsRUFBSyxDQUNQLEdBQXNCLE1BQWxCQSxFQUFJdDlELE9BQU8sR0FDYixNQUFNLElBQUkrQixNQUFNLGlDQUdsQixJQUE2QixJQUF6QnU3RCxFQUFJbDNELFFBQVEsSUFBSyxHQUNuQixNQUFNLElBQUlyRSxNQUFNLDBDQUlwQk8sS0FBS2dWLEtBQU9wUixFQUFRNUQsS0FBS2dWLEtBQU1nbUQsTUFLbkNwL0QsT0FBT0MsZUFBZWswQixFQUFPLE9BQVEsQ0FDbkNoMEIsSUFBSyxXQUNILE1BQTRCLGlCQUFkaUUsS0FBS2dWLEtBQW9CQSxFQUFLKzlCLFNBQVMveUMsS0FBS2dWLEtBQU1oVixLQUFLaW1DLGNBQVdobEMsR0FFbEY0RixJQUFLLFNBQVVvMEQsR0FDYkosRUFBZUksRUFBTSxRQUNyQkwsRUFBV0ssRUFBTSxRQUNqQmo3RCxLQUFLZ1YsS0FBT0EsRUFBS3BVLEtBQUtaLEtBQUsrNkQsU0FBVyxHQUFJRSxHQUFRajdELEtBQUtpbUMsU0FBVyxTLDZCQ3hJdEUsSUFBSWp4QixFQUFPLEVBQVEsR0FlbkIvWixFQUFPRCxRQWJQLFNBQW9Ca2dFLEVBQU9GLEdBQ3pCLEdBQXFCLGlCQUFWRSxFQUNULE9BQU9BLEVBR1QsR0FBcUIsSUFBakJBLEVBQU0zOEQsT0FDUixPQUFPMjhELEVBR1QsSUFBSUMsRUFBWW5tRCxFQUFLKzlCLFNBQVNtb0IsRUFBT2xtRCxFQUFLaXhCLFFBQVFpMUIsSUFBVUYsRUFDNUQsT0FBT2htRCxFQUFLcFUsS0FBS29VLEVBQUsrbEQsUUFBUUcsR0FBUUMsSyxjQ0R4QyxTQUFTdjdELEVBQVVrTyxHQUNqQixRQUFTQSxFQUFJazZCLGFBQW1ELG1CQUE3Qmw2QixFQUFJazZCLFlBQVlwb0MsVUFBMkJrTyxFQUFJazZCLFlBQVlwb0MsU0FBU2tPOzs7Ozs7O0FBTHpHN1MsRUFBT0QsUUFBVSxTQUFVOFMsR0FDekIsT0FBYyxNQUFQQSxJQUFnQmxPLEVBQVNrTyxJQVFsQyxTQUF1QkEsR0FDckIsTUFBa0MsbUJBQXBCQSxFQUFJc3RELGFBQW1ELG1CQUFkdHRELEVBQUk4RSxPQUF3QmhULEVBQVNrTyxFQUFJOEUsTUFBTSxFQUFHLElBVGpFeW9ELENBQWF2dEQsTUFBVUEsRUFBSXd0RCxhLDZCQ1JyRSxJQUFJL2tDLEVBQU8sRUFBUSxLQUVuQnQ3QixFQUFPRCxRQUFVaThELEVBRWpCQSxFQUFPMWdDLEtBQU9BLEVBRWQsSUFBSTNqQixFQUFRLEdBQUdBLE1BR2YsU0FBU3FrRCxJQUNQLElBQUlzRSxFQUFNLEdBQ05DLEVBQWEsQ0FFakIsSUFNQSxXQUNFLElBQUl4bEQsR0FBUyxFQUNUMlUsRUFBUS9YLEVBQU12WCxLQUFLaUQsVUFBVyxHQUFJLEdBQ2xDeTdCLEVBQU96N0IsVUFBVUEsVUFBVUMsT0FBUyxHQUV4QyxHQUFvQixtQkFBVHc3QixFQUNULE1BQU0sSUFBSXQ2QixNQUFNLDJDQUE2Q3M2QixHQU0vRCxTQUFTeHNCLEVBQUs2RSxHQUNaLElBQUlwRixFQUFLdXVELElBQU12bEQsR0FDWGlPLEVBQVNyUixFQUFNdlgsS0FBS2lELFVBQVcsR0FDL0IwVSxFQUFTaVIsRUFBT3JSLE1BQU0sR0FDdEJyVSxFQUFTb3NCLEVBQU1wc0IsT0FDZjZiLEdBQU8sRUFFWCxHQUFJaEksRUFDRjJuQixFQUFLM25CLE9BRFAsQ0FNQSxPQUFTZ0ksRUFBTTdiLEdBQ08sT0FBaEJ5VSxFQUFPb0gsU0FBaUNuWixJQUFoQitSLEVBQU9vSCxLQUNqQ3BILEVBQU9vSCxHQUFPdVEsRUFBTXZRLElBSXhCdVEsRUFBUTNYLEVBR0poRyxFQUNGdXBCLEVBQUt2cEIsRUFBSU8sR0FBTTJLLE1BQU0sS0FBTXlTLEdBRTNCb1AsRUFBSzdoQixNQUFNLEtBQU0sQ0FBQyxNQUFNaUYsT0FBT3dOLEtBNUJuQ3BkLEVBQUsySyxNQUFNLEtBQU0sQ0FBQyxNQUFNaUYsT0FBT3dOLEtBZGpDLElBZ0RBLFNBQWEzZCxHQUNYLEdBQWtCLG1CQUFQQSxFQUNULE1BQU0sSUFBSXZOLE1BQU0sdUNBQXlDdU4sR0FLM0QsT0FGQXV1RCxFQUFJbDVELEtBQUsySyxHQUVGd3VELElBckRULE9BQU9BLEksNkJDaEJULElBQUk1b0QsRUFBUSxHQUFHQSxNQUVmM1gsRUFBT0QsUUFLUCxTQUFjZ1MsRUFBSXVSLEdBQ2hCLElBQUlrOUMsRUFFSixPQUVBLFdBQ0UsSUFFSXB0RCxFQUZBNFYsRUFBU3JSLEVBQU12WCxLQUFLaUQsVUFBVyxHQUMvQmlnQixFQUFXdlIsRUFBR3pPLE9BQVMwbEIsRUFBTzFsQixPQUc5QmdnQixHQUNGMEYsRUFBTzVoQixLQUFLMDNCLEdBR2QsSUFDRTFyQixFQUFTckIsRUFBR2tMLE1BQU0sS0FBTStMLEdBQ3hCLE1BQU9tUyxHQU1QLEdBQUk3WCxHQUFZazlDLEVBQ2QsTUFBTXJsQyxFQUdSLE9BQU8yRCxFQUFLM0QsR0FHVDdYLElBQ0NsUSxHQUFpQyxtQkFBaEJBLEVBQU9xdEQsS0FDMUJydEQsRUFBT3F0RCxLQUFLQSxFQUFNM2hDLEdBQ1QxckIsYUFBa0I1TyxNQUMzQnM2QixFQUFLMXJCLEdBRUxxdEQsRUFBS3J0RCxLQU1YLFNBQVMwckIsSUFDRjBoQyxJQUNIQSxHQUFVLEVBRVZsOUMsRUFBU3JHLE1BQU0sS0FBTTVaLFlBTXpCLFNBQVNvOUQsRUFBS3YvRCxHQUNaNDlCLEVBQUssS0FBTTU5QixNLGNDN0RmLElBQUl1QyxFQUFXOUMsT0FBT2tCLFVBQVU0QixTQUVoQ3pELEVBQU9ELFFBRVAsU0FBa0I4UyxHQUNkLE1BQThCLG9CQUF2QnBQLEVBQVNyRCxLQUFLeVMsSyw2QkNKekIsSUFBSXBQLEVBQVc5QyxPQUFPa0IsVUFBVTRCLFNBRWhDekQsRUFBT0QsUUFBVSxTQUFVaUssR0FDMUIsSUFBSW5JLEVBQ0osTUFBNEIsb0JBQXJCNEIsRUFBU3JELEtBQUs0SixLQUFpRixRQUFwRG5JLEVBQVlsQixPQUFPdy9CLGVBQWVuMkIsS0FBMEJuSSxJQUFjbEIsT0FBT3cvQixlQUFlLE8sNkJDSG5KLElBQUl1Z0MsRUFBVSxFQUFRLEtBQ2xCbHlCLEVBQVEsRUFBUSxHQUNoQnF1QixFQUFTLEVBQVEsS0FLckIsU0FBU3BnRCxFQUFNM1gsR0FDYixJQUFJNjdELEVBQVFELEVBQVE3RCxHQUNwQjhELEVBQU05K0QsVUFBVWlELFFBQVUwcEMsRUFBTW15QixFQUFNOStELFVBQVVpRCxRQUFTQyxLQUFLdzVCLEtBQUssWUFBYXo1QixHQUNoRkMsS0FBSzgzRCxPQUFTOEQsRUFOaEIzZ0UsRUFBT0QsUUFBVTBjLEVBQ2pCQSxFQUFNb2dELE9BQVNBLEcsNkJDTGYsSUFBSXJ1QixFQUFRLEVBQVEsR0FDaEJyc0MsRUFBVyxFQUFRLEdBRXZCbkMsRUFBT0QsUUFJUCxTQUFpQjZnRSxHQUNmLElBQUl4dEQsRUFDQTVSLEVBQ0FOLEVBUUosSUFBS00sS0FOTFcsRUFBUzArRCxFQUFJRCxHQUNieitELEVBQVMyK0QsRUFBTUQsR0FHZnp0RCxFQUFTeXRELEVBQUdoL0QsV0FHVlgsRUFBUWtTLEVBQU81UixLQUVlLGlCQUFWTixJQUNsQmtTLEVBQU81UixHQUFPLFdBQVlOLEVBQVFBLEVBQU1naEIsU0FBV3NzQixFQUFNdHRDLElBSTdELE9BQU8yL0QsRUFJUCxTQUFTQyxFQUFLQyxHQUNaLE9BQU9ILEVBQU0zakQsTUFBTWxZLEtBQU1nOEQsR0FJM0IsU0FBU0YsSUFDUCxPQUFNOTdELGdCQUFnQjg3RCxFQUlmRCxFQUFNM2pELE1BQU1sWSxLQUFNMUIsV0FIaEIsSUFBSXk5RCxFQUFLejlELGMsY0N2Q08sbUJBQWxCMUMsT0FBT1ksT0FFaEJ2QixFQUFPRCxRQUFVLFNBQWtCaWhFLEVBQU1DLEdBQ25DQSxJQUNGRCxFQUFLRSxPQUFTRCxFQUNkRCxFQUFLbi9ELFVBQVlsQixPQUFPWSxPQUFPMC9ELEVBQVVwL0QsVUFBVyxDQUNsRGtyQyxZQUFhLENBQ1g3ckMsTUFBTzgvRCxFQUNQbmdFLFlBQVksRUFDWndWLFVBQVUsRUFDVmdsRCxjQUFjLE9BT3RCcjdELEVBQU9ELFFBQVUsU0FBa0JpaEUsRUFBTUMsR0FDdkMsR0FBSUEsRUFBVyxDQUNiRCxFQUFLRSxPQUFTRCxFQUNkLElBQUlFLEVBQVcsYUFDZkEsRUFBU3QvRCxVQUFZby9ELEVBQVVwL0QsVUFDL0JtL0QsRUFBS24vRCxVQUFZLElBQUlzL0QsRUFDckJILEVBQUtuL0QsVUFBVWtyQyxZQUFjaTBCLEssNkJDckJuQyxJQUFJeHlCLEVBQVEsRUFBUSxHQUNoQjR5QixFQUFTLEVBQVEsS0FDakJDLEVBQWdCLEVBQVEsS0FDeEJDLEVBQVcsRUFBUSxLQUNuQjV6QyxFQUFTLEVBQVEsS0FDakI2ekMsRUFBWSxFQUFRLEtBSXhCLFNBQVMxRSxFQUFPRCxFQUFLaDJCLEdBQ25CN2hDLEtBQUs2aEMsS0FBT0EsRUFDWjdoQyxLQUFLeWEsT0FBUyxHQUNkemEsS0FBS0QsUUFBVTBwQyxFQUFNenBDLEtBQUtELFNBQzFCQyxLQUFLeThELFdBQVcsSUFFaEJ6OEQsS0FBSzA4RCxRQUFTLEVBQ2QxOEQsS0FBSzI4RCxTQUFVLEVBQ2YzOEQsS0FBSzQ4RCxRQUFTLEVBQ2Q1OEQsS0FBSzY4RCxTQUFVLEVBRWY3OEQsS0FBSzg4RCxTQUFXUixFQUFjejZCLEdBQU1pN0IsU0FDcEM5OEQsS0FBS3U4RCxTQUFXQSxFQUFTdjhELEtBQU0sVUFDL0JBLEtBQUsyb0IsT0FBU0EsRUFBTzNvQixNQWZ2Qi9FLEVBQU9ELFFBQVU4OEQsRUFrQmpCLElBQUkvbkMsRUFBUStuQyxFQUFPaDdELFVBbUhuQixTQUFTa1UsRUFBSzdVLEdBQ1osSUFDSU0sRUFEQTRSLEVBQVMsR0FHYixJQUFLNVIsS0FBT04sRUFDVmtTLEVBQU9oTSxLQUFLNUYsR0FHZCxPQUFPNFIsRUF4SFQwaEIsRUFBTTBzQyxXQUFhLEVBQVEsS0FDM0Ixc0MsRUFBTXJZLE1BQVEsRUFBUSxLQUd0QnFZLEVBQU1od0IsUUFBVSxFQUFRLElBR3hCZ3dCLEVBQU1ndEMsVUFBWVYsRUFBTyxXQUFXLEdBQ3BDdHNDLEVBQU1pdEMsVUFBWVgsRUFBTyxVQUFVLEdBQ25DdHNDLEVBQU1rdEMsVUFBWVosRUFBTyxVQUFVLEdBQ25DdHNDLEVBQU1tdEMsV0FBYWIsRUFBTyxXQUFXLEdBV3JDdHNDLEVBQU1vdEMsbUJBQXFCLENBQ3pCLENBQUMsaUJBQ0QsQ0FBQyxjQUNELENBQUMsY0FDRCxDQUFDLGNBQ0QsQ0FBQyxRQUNELENBQUMsZ0JBQWlCLENBQUMxc0MsWUFBWSxJQUMvQixDQUFDLGFBQWMsQ0FBQ0EsWUFBWSxJQUM1QixDQUFDLFdBQVksQ0FBQ0EsWUFBWSxLQVk1QlYsRUFBTXF0QyxjQUFnQixDQUNwQixDQUFDLGFBQWMsQ0FBQ3pzQyxVQUFVLElBQzFCLENBQUMsYUFBYyxDQUFDQSxVQUFVLElBQzFCLENBQUMsZ0JBQWlCLENBQUNBLFVBQVUsSUFDN0IsQ0FBQyxhQUFjLENBQUNGLFlBQVksSUFDNUIsQ0FBQyxXQUFZLENBQUNBLFlBQVksS0FZNUJWLEVBQU1zdEMsb0JBQXNCLENBQzFCLENBQUMsZUFBZ0IsQ0FBQzVzQyxZQUFZLElBQzlCLENBQUMsYUFBYyxDQUFDQSxZQUFZLElBQzVCLENBQUMsYUFBYyxDQUFDQSxZQUFZLElBQzVCLENBQUMsZ0JBQWlCLENBQUNBLFlBQVksSUFDL0IsQ0FBQyxnQkFBaUIsQ0FBQ0EsWUFBWSxJQUMvQixDQUFDLE9BQVEsQ0FBQ0EsWUFBWSxJQUN0QixDQUFDLE9BQVEsQ0FBQ0EsWUFBWSxJQUN0QixDQUFDLGFBQWMsQ0FBQ0EsWUFBWSxJQUM1QixDQUFDLFdBQVksQ0FBQ0EsWUFBWSxLQUk1QlYsRUFBTXV0QyxnQkFBa0IsQ0FDdEJDLFFBQVMsRUFBUSxLQUNqQkMsYUFBYyxFQUFRLEtBQ3RCQyxXQUFZLEVBQVEsS0FDcEJDLFdBQVksRUFBUSxLQUNwQkMsV0FBWSxFQUFRLEtBQ3BCQyxjQUFlLEVBQVEsS0FDdkIxMEMsS0FBTSxFQUFRLEtBQ2QyMEMsY0FBZSxFQUFRLEtBQ3ZCM2dCLEtBQU0sRUFBUSxLQUNkNGdCLFNBQVUsRUFBUSxLQUNsQnJxRCxXQUFZLEVBQVEsS0FDcEJzcUQsTUFBTyxFQUFRLEtBQ2ZDLFVBQVcsRUFBUSxNQUdyQmp1QyxFQUFNa3VDLGlCQUFtQixDQUN2QjdqQixPQUFRLEVBQVEsS0FDaEI4akIsU0FBVSxFQUFRLEtBQ2xCL29ELElBQUssRUFBUSxLQUNiK25DLEtBQU0sRUFBUSxLQUNkL3JCLEtBQU0sRUFBUSxLQUNkalksVUFBVyxFQUFRLEtBQ25CaWxELE9BQVEsRUFBUSxLQUNoQkMsU0FBVSxFQUFRLEtBQ2xCQyxTQUFVLEVBQVEsS0FDbEI3akQsS0FBTSxFQUFRLEtBQ2Q4akQsTUFBTyxFQUFRLEtBQ2Z4a0QsS0FBTSxFQUFRLE1BSWhCaVcsRUFBTXd1QyxhQUFldnRELEVBQUsrZSxFQUFNdXRDLGlCQUNoQ3Z0QyxFQUFNeXVDLGNBQWdCeHRELEVBQUsrZSxFQUFNa3VDLGtCQUdqQ2x1QyxFQUFNMHVDLGNBQWdCakMsRUFBVSxTQUNoQ3pzQyxFQUFNMnVDLGVBQWlCbEMsRUFBVSxVQUNqQ3pzQyxFQUFNNHVDLGdCQUFrQm5DLEcsNkJDekl4QnZoRSxFQUFPRCxRQUtQLFNBQWlCeUIsRUFBS3UyQixFQUFPM00sR0FDM0IsT0FFQSxXQUNFLElBQUk3ZSxFQUFVNmUsR0FBT3JtQixLQUNqQnNILEVBQVVFLEVBQVEvSyxHQUl0QixPQUZBK0ssRUFBUS9LLElBQVF1MkIsRUFJaEIsV0FDRXhyQixFQUFRL0ssR0FBTzZLLE0sNkJDSnJCLFNBQVNzM0QsRUFBd0JDLEdBQy9CLE9BR0EsU0FBMEJwa0QsR0FDeEIsSUFBSXpFLEdBQVMsRUFDVHpYLEVBQVNzZ0UsRUFBUXRnRSxPQUVyQixHQUFJa2MsRUFBUyxFQUNYLE1BQU8sR0FHVCxPQUFTekUsRUFBUXpYLEdBQ2YsR0FBSXNnRSxFQUFRN29ELEdBQVN5RSxFQUNuQixNQUFPLENBQ0w3UyxLQUFNb08sRUFBUSxFQUNkbk8sT0FBUTRTLEdBQVVva0QsRUFBUTdvRCxFQUFRLElBQU0sR0FBSyxFQUM3Q3lFLE9BQVFBLEdBS2QsTUFBTyxJQU1YLFNBQVNxa0QsRUFBd0JELEdBQy9CLE9BSUEsU0FBMEJqbUQsR0FDeEIsSUFBSWhSLEVBQU9nUixHQUFZQSxFQUFTaFIsS0FDNUJDLEVBQVMrUSxHQUFZQSxFQUFTL1EsT0FFbEMsSUFBS21qQixNQUFNcGpCLEtBQVVvakIsTUFBTW5qQixJQUFXRCxFQUFPLEtBQUtpM0QsRUFDaEQsT0FBUUEsRUFBUWozRCxFQUFPLElBQU0sR0FBS0MsRUFBUyxHQUFLLEVBR2xELE9BQVEsR0F0RFo1TSxFQUFPRCxRQUVQLFNBQWlCNm1DLEdBQ2YsSUFBSW0zQixFQXdETixTQUFpQjc4RCxHQUNmLElBQUlrUyxFQUFTLEdBQ1QySCxFQUFRN1osRUFBTTJILFFBQVEsTUFFMUIsTUFBa0IsSUFBWGtTLEdBQ0wzSCxFQUFPaE0sS0FBSzJULEVBQVEsR0FDcEJBLEVBQVE3WixFQUFNMkgsUUFBUSxLQUFNa1MsRUFBUSxHQUt0QyxPQUZBM0gsRUFBT2hNLEtBQUtsRyxFQUFNb0MsT0FBUyxHQUVwQjhQLEVBbkVRd3dELENBQVFsaEUsT0FBT2trQyxJQUU5QixNQUFPLENBQ0xrOUIsV0FBWUgsRUFBd0I1RixHQUNwQzhELFNBQVVnQyxFQUF3QjlGLE0sNkJDUHRDLzlELEVBQU9ELFFBSVAsU0FBaUJxckIsRUFBSzVwQixHQUNwQixPQUlBLFNBQWtCTixHQUNoQixJQUlJbUIsRUFKQW1jLEVBQU8sRUFDUHpELEVBQVE3WixFQUFNMkgsUUFBUSxNQUN0QnMyQyxFQUFTL3pCLEVBQUk1cEIsR0FDYjZkLEVBQVEsR0FHWixNQUFrQixJQUFYdEUsR0FDTHNFLEVBQU1qWSxLQUFLbEcsRUFBTXlXLE1BQU02RyxFQUFNekQsSUFDN0J5RCxFQUFPekQsRUFBUSxHQUNmMVksRUFBWW5CLEVBQU11QixPQUFPK2IsTUFJd0IsSUFBL0IyZ0MsRUFBT3QyQyxRQUFReEcsSUFDL0JnZCxFQUFNalksS0FBSyxNQUdiMlQsRUFBUTdaLEVBQU0ySCxRQUFRLEtBQU0yVixHQUs5QixPQUZBYSxFQUFNalksS0FBS2xHLEVBQU15VyxNQUFNNkcsSUFFaEJhLEVBQU0xWixLQUFLLE8sNkJDaEN0QixJQUFJNm9DLEVBQVEsRUFBUSxHQUNoQnUxQixFQUFXLEVBQVEsSUFFdkIvakUsRUFBT0QsUUFHUCxTQUFpQnFyQixHQUdmLE9BRkF5TSxFQUFRbmtCLElBZ0RSLFNBQW1CeFMsRUFBT3ljLEVBQVU3WSxHQUNsQyxPQUFPaS9ELEVBQVM3aUUsRUFBT3N0QyxFQUFNMXBDLEVBQVMsQ0FDcEM2WSxTQUFVdEYsRUFBVXNGLEdBQ3BCUSxRQUFTWSxNQWpETjhZLEVBR1AsU0FBU3hmLEVBQVVzRixHQUtqQixJQUpBLElBQUlxbUQsRUFBVTU0QyxFQUFJNUwsT0FDZDdTLEVBQU9nUixFQUFTaFIsS0FDaEJ5RyxFQUFTLEtBRUp6RyxHQUNEQSxLQUFRcTNELEdBSWQ1d0QsRUFBT2hNLE1BQU00OEQsRUFBUXIzRCxJQUFTLEdBQUssR0FHckMsTUFBTyxDQUNMK0ssTUFBT2lHLEVBQ1BDLE9BQVF4SyxHQU9aLFNBQVMyTCxFQUFjWCxFQUFRVCxFQUFVNEIsR0FDMUIsSUFBVEEsR0FJSjZMLEVBQUl3YixLQUFLamtCLFFBQVF2RSxFQUFRVCxHQUkzQixTQUFTa2EsRUFBUTMyQixFQUFPeWMsRUFBVXNtRCxHQUNoQ0YsRUFBUzdpRSxFQUFPLENBQ2R5YyxTQUFVdEYsRUFBVXNGLEdBQ3BCUSxRQUFTWSxFQUNURixLQUFNb2xELEVBQ05obUQsVUFBV2dtRCxFQUNYamxELFlBQWFvTSxFQUNibk0saUJBQWtCbU0sTyw2QkNsRHhCcHJCLEVBQU9ELFFBOENQLFNBQWlCc0YsR0FDZixPQUdBLFNBQWtCbkUsRUFBT2srRCxHQUN2QixJQU9JcmtELEVBQ0F6WCxFQUNBNlMsRUFDQTNWLEVBQ0EwakUsRUFDQUMsRUFaQXR0RCxFQUFPOVIsS0FDUHlhLEVBQVMzSSxFQUFLMkksT0FDZDZPLEVBQVMsR0FDVCsxQyxFQUFVdnRELEVBQUt4UixFQUFPLFdBQ3RCOGxCLEVBQWF0VSxFQUFLeFIsRUFBTyxjQUN6QnNILEVBQU95eUQsRUFBU3p5RCxLQUNoQkMsRUFBU3d5RCxFQUFTeHlELE9BU3RCLElBQUsxTCxFQUNILE9BQU9tdEIsRUFJVGcyQyxFQUFJL2tELElBQU1BLEVBQ1Yra0QsRUFBSXo5QixLQUFPL3ZCLEVBQUsrdkIsS0FHaEIwOUIsRUFBZSxJQU9mLEtBQU9wakUsR0FBTyxDQUtaLElBSkE2WixHQUFTLEVBQ1R6WCxFQUFTOGdFLEVBQVE5Z0UsT0FDakI0Z0UsR0FBVSxJQUVEbnBELEVBQVF6WCxJQUNmOUMsRUFBTzRqRSxFQUFRcnBELEtBQ2Y1RSxFQUFTZ1YsRUFBVzNxQixLQUlXMlYsRUFBT291RCxjQUFlMXRELEVBQUsrcUQsU0FDdER6ckQsRUFBT3F1RCxXQUFjM3RELEVBQUs0cUQsUUFDMUJ0ckQsRUFBT3N1RCxZQUFlNXRELEVBQUs2cUQsU0FDM0J2ckQsRUFBT3V1RCxXQUFjN3RELEVBQUs4cUQsU0FFNUJ3QyxFQUFjampFLEVBQU1vQyxPQUVwQjZTLEVBQU84RyxNQUFNcEcsRUFBTSxDQUFDd3RELEVBQUtuakUsTUFFekJnakUsRUFBVUMsSUFBZ0JqakUsRUFBTW9DLFlBUy9CNGdFLEdBQ0hydEQsRUFBSyt2QixLQUFLcTRCLEtBQUssSUFBSXo2RCxNQUFNLGlCQUFrQjYvRCxFQUFJL2tELE9BTW5ELE9BRkF6SSxFQUFLOHRELElBQU1ybEQsSUFFSitPLEVBSVAsU0FBU2kyQyxFQUFlck4sR0FJdEIsSUFIQSxJQUFJdGpELEdBQWEsRUFDYm9ILEVBQVFrOEMsRUFBU3B1RCxRQUFRLE9BRVgsSUFBWGtTLEdBQ0xwTyxJQUNBZ0gsRUFBWW9ILEVBQ1pBLEVBQVFrOEMsRUFBU3B1RCxRQUFRLEtBQU1rUyxFQUFRLElBR3RCLElBQWZwSCxFQUNGL0csR0FBVXFxRCxFQUFTM3pELE9BRW5Cc0osRUFBU3FxRCxFQUFTM3pELE9BQVNxUSxFQUd6QmhILEtBQVE2UyxLQUNTLElBQWY3TCxFQUNGL0csR0FBVTRTLEVBQU83UyxHQUNSQyxHQUFVNFMsRUFBTzdTLEtBQzFCQyxFQUFTNFMsRUFBTzdTLEdBQVEsSUEyQjlCLFNBQVMyUyxJQUNQLElBQUlILEVBQU0sQ0FBQ3hTLEtBQU1BLEVBQU1DLE9BQVFBLEdBSS9CLE9BRkF1UyxFQUFJSyxPQUFTM0ksRUFBS2dyRCxTQUFTMWlELEdBRXBCQSxFQUlULFNBQVN5bEQsRUFBU2x0RCxHQUNoQjNTLEtBQUsyUyxNQUFRQSxFQUNiM1MsS0FBSytSLElBQU13SSxJQTZGYixTQUFTK2tELEVBQUlwTixHQUNYLElBeEVJM3dELEVBd0VBc1gsRUE3SE4sV0FDRSxJQUFJaW5ELEVBQWMsR0FDZDFsRCxFQUFNeFMsRUFBTyxFQUlqQixPQUFPLFdBR0wsSUFGQSxJQUFJdzNCLEVBQU94M0IsRUFBTyxFQUVYd1MsRUFBTWdsQixHQUNYMGdDLEVBQVl6OUQsTUFBTW9ZLEVBQU9MLElBQVEsR0FBSyxHQUV0Q0EsSUFHRixPQUFPMGxELEdBOEdJQyxHQUNUM2xELEdBekVBN1ksRUFBU2daLElBS2IsU0FBZ0J4UixFQUFNOFAsR0FDcEIsSUFBSVksRUFBTzFRLEVBQUs2UCxTQUNaakcsRUFBUThHLEVBQU9BLEVBQUs5RyxNQUFRcFIsRUFDNUJ5K0QsRUFBVyxHQUNYcmpFLEVBQUk4YyxHQUFRQSxFQUFLMUgsSUFBSW5LLEtBQ3JCek0sRUFBSW9HLEVBQU9xRyxLQVlmLEdBVkFtQixFQUFLNlAsU0FBVyxJQUFJaW5ELEVBQVNsdEQsR0FVekI4RyxHQUFRWixHQUFVWSxFQUFLWixPQUFRLENBR2pDLEdBRkFtbkQsRUFBV3ZtRCxFQUFLWixPQUVabGMsRUFBSXhCLEVBQUcsQ0FDVCxPQUFTd0IsRUFBSXhCLEdBQ1g2a0UsRUFBUzM5RCxNQUFNb1ksRUFBTzlkLElBQU0sR0FBSyxHQUduQ3FqRSxFQUFTMzlELEtBQUtkLEVBQU9zRyxRQUd2QmdSLEVBQVNtbkQsRUFBUzdpRCxPQUFPdEUsR0FLM0IsT0FGQTlQLEVBQUs2UCxTQUFTQyxPQUFTQSxHQUFVLEdBRTFCOVAsSUFvQ0x6QixFQUFVaVQsSUFjZCxPQXhHRixTQUFxQjIzQyxHQUVmLzFELEVBQU02SCxVQUFVLEVBQUdrdUQsRUFBUzN6RCxVQUFZMnpELEdBRTFDcGdELEVBQUsrdkIsS0FBS3E0QixLQUNSLElBQUl6NkQsTUFDRiw4RUFHRjhhLEtBbUZKMGxELENBQVkvTixHQUVaaDZDLEVBQU1nb0QsTUFBUUEsRUFDZEEsRUFBTTFpRSxLQUFPQSxFQUNiMGEsRUFBTTFhLEtBQU9BLEVBRWJyQixFQUFRQSxFQUFNNkgsVUFBVWt1RCxFQUFTM3pELFFBRWpDZ2hFLEVBQWVyTixHQUVmcjVDLEVBQVNBLElBRUZYLEVBSVAsU0FBU0EsRUFBTW5QLEVBQU00UyxHQUNuQixPQUFPdkIsRUFqRFgsU0FBYXJSLEVBQU00UyxHQUNqQixJQUFJQyxFQUFXRCxFQUFTQSxFQUFPQyxTQUFXME4sRUFDdEM3UCxFQUFPbUMsRUFBU0EsRUFBU3JkLE9BQVMsR0FvQnRDLE9BakJFa2IsR0FDQTFRLEVBQUt6SSxPQUFTbVosRUFBS25aLE1BQ25CeUksRUFBS3pJLFFBQVE2L0QsR0FDYkMsRUFBVTNtRCxJQUNWMm1ELEVBQVVyM0QsS0FFVkEsRUFBT28zRCxFQUFnQnAzRCxFQUFLekksTUFBTWpGLEtBQUt5VyxFQUFNMkgsRUFBTTFRLElBR2pEQSxJQUFTMFEsR0FDWG1DLEVBQVN2WixLQUFLMEcsR0FHWitJLEVBQUsrcUQsU0FBNkIsSUFBbEJ2ekMsRUFBTy9xQixRQUN6QnVULEVBQUtpckQsWUFHQWgwRCxFQTJCTXc1QixDQUFJbm9CLEVBQUlyUixHQUFPNFMsR0FBUzlDLEdBVXJDLFNBQVNxbkQsSUFDUCxJQUFJbjNELEVBQU9tUCxFQUFNQSxNQUFNLEtBQU01WixXQU03QixPQUpBc0osRUFBT04sRUFBUU0sS0FDZkMsRUFBU1AsRUFBUU8sT0FDakIxTCxFQUFRKzFELEVBQVcvMUQsRUFFWjRNLEVBS1QsU0FBU3ZMLElBQ1AsSUFBSTZRLEVBQVMrTCxFQUFJLElBTWpCLE9BSkF4UyxFQUFPTixFQUFRTSxLQUNmQyxFQUFTUCxFQUFRTyxPQUNqQjFMLEVBQVErMUQsRUFBVy8xRCxFQUVaa1MsRUFBT3VLLGFBbFV0QixJQUFJdW5ELEVBQWtCLENBQ3BCcm1ELEtBdUJGLFNBQW1CTCxFQUFNMVEsR0FHdkIsT0FGQTBRLEVBQUt0ZCxPQUFTNE0sRUFBSzVNLE1BRVpzZCxHQXpCUGlrRCxXQThCRixTQUF5QmprRCxFQUFNMVEsR0FDN0IsR0FBSS9JLEtBQUtELFFBQVEwd0IsV0FDZixPQUFPMW5CLEVBS1QsT0FGQTBRLEVBQUttQyxTQUFXbkMsRUFBS21DLFNBQVN1QixPQUFPcFUsRUFBSzZTLFVBRW5DbkMsSUFqQ1QsU0FBUzJtRCxFQUFVcjNELEdBQ2pCLElBQUk0SixFQUNBWixFQUVKLE1BQWtCLFNBQWRoSixFQUFLekksT0FBb0J5SSxFQUFLNlAsV0FJbENqRyxFQUFRNUosRUFBSzZQLFNBQVNqRyxNQUN0QlosRUFBTWhKLEVBQUs2UCxTQUFTN0csSUFJYlksRUFBTS9LLE9BQVNtSyxFQUFJbkssTUFDdEJtSyxFQUFJbEssT0FBUzhLLEVBQU05SyxTQUFXa0IsRUFBSzVNLE1BQU1vQyxVLDZCQ3RCL0MsSUFBSWtyQyxFQUFRLEVBQVEsR0FDaEI0MkIsRUFBVSxFQUFRLEtBQ2xCMW5ELEVBQVcsRUFBUSxJQUV2QjFkLEVBQU9ELFFBRVAsU0FBb0IrRSxHQUNsQixJQUVJdEQsRUFDQU4sRUFGQW1MLEVBRE90SCxLQUNRRCxRQUluQixHQUFlLE1BQVhBLEVBQ0ZBLEVBQVUsT0FDTCxJQUF1QixpQkFBWkEsRUFHaEIsTUFBTSxJQUFJTixNQUNSLGtCQUFvQk0sRUFBcEIsMkJBSEZBLEVBQVUwcEMsRUFBTTFwQyxHQVFsQixJQUFLdEQsS0FBT2tjLEVBQVUsQ0FPcEIsR0FKYSxPQUZieGMsRUFBUTRELEVBQVF0RCxNQUdkTixFQUFRbUwsRUFBUTdLLElBSVAsV0FBUkEsR0FBcUMsa0JBQVZOLEdBQ25CLFdBQVJNLEdBQXFDLGlCQUFWTixFQUU1QixNQUFNLElBQUlzRCxNQUFNLGtCQUFvQnRELEVBQVEsMEJBQTRCTSxFQUFNLEtBR2hGc0QsRUFBUXRELEdBQU9OLEVBTWpCLE9BcENXNkQsS0FpQ05ELFFBQVVBLEVBakNKQyxLQWtDTm82QyxPQUFTaW1CLEVBQVF0Z0UsR0FsQ1hDLE8sNkJDUGIvRSxFQUFPRCxRQUFVcWxFLEVBRWpCLElBQUkxbkQsRUFBVyxDQUNiLEtBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEtBR0U2WCxFQUFNN1gsRUFBU3dFLE9BQU8sQ0FBQyxJQUFLLE1BRTVCc1QsRUFBYUQsRUFBSXJULE9BQU8sQ0FDMUIsS0FDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLE1BUUYsU0FBU2tqRCxFQUFRdGdFLEdBQ2YsSUFBSTJZLEVBQVczWSxHQUFXLEdBRTFCLE9BQUkyWSxFQUFTK1gsV0FDSkEsRUFHRi9YLEVBQVM4WCxJQUFNQSxFQUFNN1gsRUFaOUIwbkQsRUFBUWhkLFFBQVUxcUMsRUFDbEIwbkQsRUFBUTd2QyxJQUFNQSxFQUNkNnZDLEVBQVE1dkMsV0FBYUEsRyxra0JDM0NyQixJQUFJZ1osRUFBUSxFQUFRLEdBQ2hCNjJCLEVBQWlCLEVBQVEsS0FFN0JybEUsRUFBT0QsUUFNUCxXQUNFLElBSUkrTixFQUhBNU0sRUFBUXdCLE9BRERxQyxLQUNhNmhDLE1BQ3BCbHZCLEVBQVEsQ0FBQy9LLEtBQU0sRUFBR0MsT0FBUSxFQUFHNFMsT0FBUSxHQUNyQ2hULEVBQVVnaUMsRUFBTTkyQixHQVFRLFNBRjVCeFcsRUFBUUEsRUFBTXlILFFBQVEyOEQsRUFkUixPQWdCSjU5RCxXQUFXLEtBQ25CeEcsRUFBUUEsRUFBTXlXLE1BQU0sR0FFcEJuTCxFQUFRSSxTQUNSSixFQUFRZ1QsVUFHVjFSLEVBQU8sQ0FDTHpJLEtBQU0sT0FDTnNiLFNBcEJTNWIsS0FvQk15K0QsY0FBY3RpRSxFQUFPc0wsR0FDcENtUixTQUFVLENBQ1JqRyxNQUFPQSxFQUNQWixJQXZCTy9SLEtBdUJHNC9ELEtBQU9uMkIsRUFBTTkyQixLQXZCaEIzUyxLQTJCREQsUUFBUTZZLFVBQ2hCMG5ELEVBQWV2M0QsR0FBTSxHQUd2QixPQUFPQSxHQXBDVCxJQUNJdzNELEVBQXlCLFksNkJDTjdCLElBQUlwbEQsRUFBUSxFQUFRLElBU3BCLFNBQVNxbEQsRUFBS3ozRCxVQUNMQSxFQUFLNlAsU0FHZCxTQUFTNm5ELEVBQUsxM0QsR0FDWkEsRUFBSzZQLGNBQVczWCxFQVpsQmhHLEVBQU9ELFFBRVAsU0FBd0IrTixFQUFNMjNELEdBRTVCLE9BREF2bEQsRUFBTXBTLEVBQU0yM0QsRUFBUUYsRUFBT0MsR0FDcEIxM0QsSSw2QkNOVDlOLEVBQU9ELFFBQVVvZ0IsRUFFakIsSUFBSXVsRCxFQUFVLEVBQVEsS0FVdEIsU0FBU3ZsRCxFQUFhSSxFQUFNaGUsRUFBTWllLEVBQVNDLEdBQ3pDLElBQUlzcEMsRUFhSixTQUFTNGIsRUFBSTczRCxFQUFNaU4sRUFBT3JPLEdBQ3hCLElBQ0lrNUQsRUFEQXh5RCxFQUFTLEdBR2IsT0FBSzdRLElBQVF3bkQsRUFBR2o4QyxFQUFNaU4sRUFBT3JPLEVBQVFBLEVBQVFwSixPQUFTLElBQU0sUUF4QnJELEtBeUJMOFAsRUFBU3l5RCxFQUFTcmxELEVBQVExUyxFQUFNcEIsS0FFckIsS0FLVG9CLEVBQUs2UyxVQWpDRixTQWlDY3ZOLEVBQU8sS0FoQ3JCLEtBaUNMd3lELEVBQVlDLEVBUWhCLFNBQWFsbEQsRUFBVWpVLEdBQ3JCLElBR0kwRyxFQUZBMCtDLEVBQU9yeEMsR0FBVyxFQUFJLEVBQ3RCMUYsR0FBUzBGLEVBQVVFLEVBQVNyZCxRQUZ0QixHQUVzQ3d1RCxFQUdoRCxLQUFPLzJDLEdBTEcsR0FLWUEsRUFBUTRGLEVBQVNyZCxRQUFRLENBRzdDLElBbERLLEtBZ0RMOFAsRUFBU3V5RCxFQUFJaGxELEVBQVM1RixHQUFRQSxFQUFPck8sSUFFMUIsR0FDVCxPQUFPMEcsRUFHVDJILEVBQTZCLGlCQUFkM0gsRUFBTyxHQUFrQkEsRUFBTyxHQUFLMkgsRUFBUSsyQyxHQXJCdkNnSSxDQUFJaHNELEVBQUs2UyxTQUFValUsRUFBUXdWLE9BQU9wVSxNQUN0QyxHQUFjODNELEVBTnRCeHlELEVBbkJPLG1CQUFUN1EsR0FBMEMsbUJBQVppZSxJQUN2Q0MsRUFBVUQsRUFDVkEsRUFBVWplLEVBQ1ZBLEVBQU8sTUFHVHduRCxFQUFLMmIsRUFBUW5qRSxHQUVib2pFLEVBQUlwbEQsRUFBTSxLQUFNLElBMENsQixTQUFTc2xELEVBQVMza0UsR0FDaEIsT0FBYyxPQUFWQSxHQUFtQyxpQkFBVkEsR0FBc0IsV0FBWUEsRUFDdERBLEVBR1ksaUJBQVZBLEVBQ0YsRUFuRUksRUFtRU9BLEdBR2IsQ0FBQ0EsR0FsRVZpZixFQUFhQyxVQUpFLEVBS2ZELEVBQWFFLEtBSkYsT0FLWEYsRUFBYUcsTUFKRixHLDZCQ0pYLFNBQVNvbEQsRUFBUW5qRSxHQUNmLEdBQW9CLGlCQUFUQSxFQUNULE9BcUVKLFNBQXFCQSxHQUNuQixPQUVBLFNBQWN1TCxHQUNaLE9BQU93bEIsUUFBUXhsQixHQUFRQSxFQUFLekksT0FBUzlDLElBekU5QnVqRSxDQUFZdmpFLEdBR3JCLEdBQUlBLFFBQ0YsT0FBT3dqRSxFQUdULEdBQW9CLGlCQUFUeGpFLEVBQ1QsT0FBUSxXQUFZQSxFQUFPeWpFLEVBQWFDLEdBQWdCMWpFLEdBRzFELEdBQW9CLG1CQUFUQSxFQUNULE9BQU9BLEVBR1QsTUFBTSxJQUFJaUMsTUFBTSxnREFpQmxCLFNBQVN5aEUsRUFBZTFqRSxHQUN0QixPQUVBLFNBQWlCdUwsR0FDZixJQUFJdE0sRUFFSixJQUFLQSxLQUFPZSxFQUNWLEdBQUl1TCxFQUFLdE0sS0FBU2UsRUFBS2YsR0FDckIsT0FBTyxFQUlYLE9BQU8sR0FJWCxTQUFTd2tFLEVBQVdwbUQsR0FDbEIsSUFBSXFWLEVBL0JOLFNBQW9CclYsR0FLbEIsSUFKQSxJQUFJeTFDLEVBQVUsR0FDVi94RCxFQUFTc2MsRUFBTXRjLE9BQ2Z5WCxHQUFTLElBRUpBLEVBQVF6WCxHQUNmK3hELEVBQVF0NkMsR0FBUzJxRCxFQUFROWxELEVBQU03RSxJQUdqQyxPQUFPczZDLEVBc0JNNlEsQ0FBV3RtRCxHQUNwQnRjLEVBQVMyeEIsRUFBTzN4QixPQUVwQixPQUVBLFdBQ0UsSUFBSXlYLEdBQVMsRUFFYixPQUFTQSxFQUFRelgsR0FDZixHQUFJMnhCLEVBQU9sYSxHQUFPa0MsTUFBTWxZLEtBQU0xQixXQUM1QixPQUFPLEVBSVgsT0FBTyxHQWVYLFNBQVMwaUUsSUFDUCxPQUFPLEVBbkZUL2xFLEVBQU9ELFFBQVUybEUsRyw2QkNBakIsSUFBSVMsRUFBYSxFQUFRLEdBRXpCbm1FLEVBQU9ELFFBR1AsU0FBaUJza0UsRUFBS25qRSxFQUFPa2xFLEdBQzNCLElBQ0k5aUUsRUFDQTJ6RCxFQUNBNTNDLEVBQ0F0RSxFQUpBMVksRUFBWW5CLEVBQU11QixPQUFPLEdBTTdCLEdBQWtCLE9BQWRKLEVBQ0YsT0FJRixHQUFJK2pFLEVBQ0YsT0FBTyxFQUdUcnJELEVBQVEsRUFDUnpYLEVBQVNwQyxFQUFNb0MsT0FDZjJ6RCxFQUFXNTBELEVBQ1hnZCxFQUFRLEdBRVIsS0FBT3RFLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksR0FFcEJvckQsRUFBVzlqRSxLQUloQmdkLEdBQVNoZCxFQUVTLE9BQWRBLElBQ0Y0MEQsR0FBWTUzQyxFQUNaQSxFQUFRLElBR1Z0RSxJQUdGc3BELEVBQUlwTixLLDZCQzNDTixJQUFJNS9DLEVBQVMsRUFBUSxJQUNqQmpQLEVBQU8sRUFBUSxJQUVuQnBJLEVBQU9ELFFBVVAsU0FBc0Jza0UsRUFBS25qRSxFQUFPa2xFLEdBQ2hDLElBTUkvakUsRUFDQWdrRSxFQUNBem9ELEVBUkE3QyxHQUFTLEVBQ1R6WCxFQUFTcEMsRUFBTW9DLE9BQ2YyekQsRUFBVyxHQUNYenFELEVBQVUsR0FDVjg1RCxFQUFnQixHQUNoQkMsRUFBZSxHQUtuQixPQUFTeHJELEVBQVF6WCxHQUdmLEdBRkFqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUVyQjZDLEVBUUYsR0FQQUEsR0FBUyxFQUVUcTVDLEdBQVlxUCxFQUNaOTVELEdBQVcrNUQsRUFDWEQsRUFBZ0IsR0FDaEJDLEVBQWUsR0E1QkwsT0E4Qk5sa0UsRUFDRmlrRSxFQUFnQmprRSxFQUNoQmtrRSxFQUFlbGtFLE9BS2YsSUFIQTQwRCxHQUFZNTBELEVBQ1ptSyxHQUFXbkssSUFFRjBZLEVBQVF6WCxHQUFRLENBR3ZCLEtBRkFqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQXRDbkIsT0F3Q1kxWSxFQUF5QixDQUN6Q2trRSxFQUFlbGtFLEVBQ2Zpa0UsRUFBZ0Jqa0UsRUFDaEIsTUFHRjQwRCxHQUFZNTBELEVBQ1ptSyxHQUFXbkssT0FHVixHQWhERyxNQWlEUkEsR0FDQW5CLEVBQU11QixPQUFPc1ksRUFBUSxLQUFPMVksR0FDNUJuQixFQUFNdUIsT0FBT3NZLEVBQVEsS0FBTzFZLEdBQzVCbkIsRUFBTXVCLE9BQU9zWSxFQUFRLEtBQU8xWSxFQUU1QmlrRSxHQUFpQkUsRUFDakJ6ckQsR0FBUyxFQUNUNkMsR0FBUyxPQUNKLEdBMURDLE9BMERHdmIsRUFDVGlrRSxHQUFpQmprRSxFQUNqQnViLEdBQVMsTUFDSixDQUdMLElBRkF5b0QsRUFBYSxHQTlEUCxPQWdFQ2hrRSxHQS9EQyxNQStEc0JBLEdBQzVCZ2tFLEdBQWNoa0UsRUFDZEEsRUFBWW5CLEVBQU11QixTQUFTc1ksR0FHN0IsR0F0RVUsT0FzRU4xWSxFQUNGLE1BR0Zpa0UsR0FBaUJELEVBQWFoa0UsRUFDOUJra0UsR0FBZ0Jsa0UsRUFJcEIsR0FBSW1LLEVBQ0YsUUFBSTQ1RCxHQUlHL0IsRUFBSXBOLEVBQUpvTixDQUFjLENBQ25CaC9ELEtBQU0sT0FDTmtsRCxLQUFNLEtBQ05ycEQsTUFBT2tILEVBQUtvRSxNQXZGbEIsSUFLSWc2RCxFQUFjbnZELEVBSEosSUFFVSxJLDZCQ1R4QixJQUFJalAsRUFBTyxFQUFRLElBRW5CcEksRUFBT0QsUUFXUCxTQUFvQnNrRSxFQUFLbmpFLEVBQU9rbEUsR0FDOUIsSUFLSUssRUFDQUMsRUFDQXJrRSxFQUNBc2tFLEVBQ0F0bkQsRUFDQTdTLEVBQ0FvNkQsRUFDQUMsRUFDQUMsRUFDQWxwRCxFQUNBMEIsRUFkQTdCLEVBRE8xWSxLQUNTRCxRQUNoQnhCLEVBQVNwQyxFQUFNb0MsT0FBUyxFQUN4QnlYLEVBQVEsRUFDUms4QyxFQUFXLEdBYWYsSUFBS3g1QyxFQUFTOFgsSUFDWixPQUlGLEtBQU94YSxFQUFRelgsSUE5QkgsT0ErQlZqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQWhDakIsT0FrQ3FCMVksSUFJN0I0MEQsR0FBWTUwRCxFQUNaMFksSUFRRixHQUxBNkMsRUFBUzdDLEVBeENHLE9BMkNaMVksRUFBWW5CLEVBQU11QixPQUFPc1ksS0ExQ2QsTUE0Q2tCMVksRUFDM0IsT0FHRjBZLElBQ0EyckQsRUFBU3JrRSxFQUNUb2tFLEVBQWEsRUFDYnhQLEdBQVk1MEQsRUFFWixLQUFPMFksRUFBUXpYLElBQ2JqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxNQUVQMnJELEdBSWxCelAsR0FBWTUwRCxFQUNab2tFLElBQ0ExckQsSUFHRixHQUFJMHJELEVBL0RnQixFQWdFbEIsT0FJRixLQUFPMXJELEVBQVF6WCxJQXhFSCxPQXlFVmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBMUVqQixPQTRFcUIxWSxJQUk3QjQwRCxHQUFZNTBELEVBQ1owWSxJQUlGNHJELEVBQU8sR0FDUHRuRCxFQUFRLEdBRVIsS0FBT3RFLEVBQVF6WCxHQXpGRCxRQTBGWmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBdkZmLE1BMkZSMVksR0ExRk8sTUEyRlBBLEdBN0ZRLE1Ba0dOQSxHQW5HSSxPQW1HcUJBLEVBQzNCZ2QsR0FBU2hkLEdBRVRza0UsR0FBUXRuRCxFQUFRaGQsRUFDaEJnZCxFQUFRLElBR1Z0RSxJQUtGLElBRkExWSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQTlHWCxPQWdIRzFZLEVBQ2YsT0FHRixHQUFJK2pFLEVBQ0YsT0FBTyxHQUdUOW1ELEVBQU0ra0QsRUFBSS9rRCxPQUNOMVMsUUFBVXFxRCxFQUFTM3pELE9BQ3ZCZ2MsRUFBSUUsUUFBVXkzQyxFQUFTM3pELE9BRXZCMnpELEdBQVkwUCxFQUNaQSxFQW5IVzVoRSxLQW1IQzJvQixPQUFPaGEsSUFuSFIzTyxLQW1IaUJ1OEQsU0FBU3FGLEdBQU9ybkQsR0FFeENELElBQ0Y0M0MsR0FBWTUzQyxHQUdkQSxFQUFRLEdBQ1J3bkQsRUFBVSxHQUNWQyxFQUFrQixHQUNsQnQ2RCxFQUFVLEdBQ1ZvNkQsRUFBa0IsR0FHbEIsS0FBTzdyRCxFQUFRelgsR0FPYixHQU5BakIsRUFBWW5CLEVBQU11QixPQUFPc1ksR0FDekJ2TyxHQUFXcTZELEVBQ1hELEdBQW1CRSxFQUNuQkQsRUFBVSxHQUNWQyxFQUFrQixHQS9JTixPQWlKUnprRSxFQUFKLENBb0JBLElBVkltSyxHQUNGcTZELEdBQVd4a0UsRUFDWHlrRSxHQUFtQnprRSxHQUVuQjQwRCxHQUFZNTBELEVBR2RnZCxFQUFRLEdBQ1J0RSxJQUVPQSxFQUFRelgsR0FuS0wsT0FvS1JqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQU16QnNFLEdBQVNoZCxFQUNUMFksSUFNRixHQUhBOHJELEdBQVd4bkQsRUFDWHluRCxHQUFtQnpuRCxFQUFNMUgsTUFBTWlHLEtBRTNCeUIsRUFBTS9iLFFBNUtVLEdBNEtwQixDQU1BLElBRkErYixFQUFRLEdBRUR0RSxFQUFRelgsSUFDYmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLE1BRVAyckQsR0FJbEJybkQsR0FBU2hkLEVBQ1QwWSxJQU1GLEdBSEE4ckQsR0FBV3huRCxFQUNYeW5ELEdBQW1Cem5ELElBRWZBLEVBQU0vYixPQUFTbWpFLEdBQW5CLENBTUEsSUFGQXBuRCxFQUFRLEdBRUR0RSxFQUFRelgsSUEzTUwsT0E0TVJqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQTdNbkIsT0ErTXVCMVksSUFJN0J3a0UsR0FBV3hrRSxFQUNYeWtFLEdBQW1CemtFLEVBQ25CMFksSUFHRixJQUFLMVksR0F6Tk8sT0F5Tk1BLEVBQ2hCLGFBeEVBbUssR0FBV25LLEVBQ1h5a0UsR0FBbUJ6a0UsRUFDbkIwWSxJQTRFSixPQUFPc3BELEVBRlBwTixHQUFZenFELEVBQVVxNkQsRUFFZnhDLENBQWMsQ0FDbkJoL0QsS0FBTSxPQUNOa2xELEtBQU1vYyxHQUFRLEtBQ2R6bEUsTUFBT2tILEVBQUt3K0QsTyw2QkN2T2hCLElBQUl4K0QsRUFBTyxFQUFRLElBQ2YyK0QsRUFBWSxFQUFRLElBRXhCL21FLEVBQU9ELFFBUVAsU0FBb0Jza0UsRUFBS25qRSxFQUFPa2xFLEdBQzlCLElBVUk5K0IsRUFFQWpsQyxFQUNBc3FCLEVBQ0FxNkMsRUFDQXg2RCxFQUNBRyxFQUNBeXRDLEVBQ0E2c0IsRUFDQTdwQixFQWxCQTRtQixFQURPai9ELEtBQ1F5YSxPQUNmMkwsRUFGT3BtQixLQUVXczlELGdCQUNsQm4zQyxFQUhPbm1CLEtBR2FxOUQsb0JBQ3BCOWlELEVBQU0ra0QsRUFBSS9rRCxNQUNWNG5ELEVBQWM1bkQsRUFBSTNTLEtBQ2xCckosRUFBU3BDLEVBQU1vQyxPQUNmeVUsRUFBUyxHQUNUZ21ELEVBQVcsR0FDWG9KLEVBQVUsR0FFVnBzRCxFQUFRLEVBVVosS0FBT0EsRUFBUXpYLElBMUJILE9BMkJWakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0E1QmpCLE9BOEJxQjFZLElBSTdCMFksSUFHRixHQW5DUyxNQW1DTDdaLEVBQU11QixPQUFPc1ksR0FDZixPQUdGLEdBQUlxckQsRUFDRixPQUFPLEVBR1RyckQsRUFBUSxFQUVSLEtBQU9BLEVBQVF6WCxHQUFRLENBU3JCLElBUkEwakUsRUFBWTlsRSxFQUFNMkgsUUFqRE4sS0FpRHlCa1MsR0FDckNxL0IsRUFBYXIvQixFQUNia3NELEdBQVcsR0FFUSxJQUFmRCxJQUNGQSxFQUFZMWpFLEdBR1B5WCxFQUFRelgsSUF2REwsT0F3RFJqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQXpEbkIsT0EyRHVCMVksSUFJN0IwWSxJQWdCRixHQTdFTyxNQWdFSDdaLEVBQU11QixPQUFPc1ksSUFDZkEsSUFDQWtzRCxHQUFXLEVBbkVILE1BcUVKL2xFLEVBQU11QixPQUFPc1ksSUFDZkEsS0FHRkEsRUFBUXEvQixFQUdWNXRDLEVBQVV0TCxFQUFNeVcsTUFBTW9ELEVBQU9pc0QsSUFFeEJDLElBQWE3K0QsRUFBS29FLEdBQVUsQ0FDL0J1TyxFQUFRcS9CLEVBQ1IsTUFHRixJQUFLNnNCLElBQ0h0NkMsRUFBT3pyQixFQUFNeVcsTUFBTW9ELEdBSWZnc0QsRUFBVTc3QyxFQUFjQyxFQW5GckJwbUIsS0FtRnVDLENBQUNzL0QsRUFBSzEzQyxHQUFNLEtBQ3hELE1BSUpoZ0IsRUFBT3l0QyxJQUFlci9CLEVBQVF2TyxFQUFVdEwsRUFBTXlXLE1BQU15aUMsRUFBWTRzQixHQUVoRUcsRUFBUS8vRCxLQUFLMlQsRUFBUXEvQixHQUNyQnJpQyxFQUFPM1EsS0FBS3VGLEdBQ1pveEQsRUFBUzMyRCxLQUFLb0YsR0FFZHVPLEVBQVFpc0QsRUFBWSxFQUd0QmpzRCxHQUFTLEVBQ1R6WCxFQUFTNmpFLEVBQVE3akUsT0FDakJna0MsRUFBTSs4QixFQUFJdHNELEVBQU9wUyxLQTFHSCxPQTRHZCxPQUFTb1YsRUFBUXpYLEdBQ2YwZ0UsRUFBUWtELElBQWdCbEQsRUFBUWtELElBQWdCLEdBQUtDLEVBQVFwc0QsR0FDN0Rtc0QsSUFPRixPQUpBOXBCLEVBMUdXcjRDLEtBMEdDazlELGFBQ1psRSxFQTNHV2g1RCxLQTJHS3krRCxjQUFjekYsRUFBU3A0RCxLQWxIekIsTUFrSDBDMlosR0FDeEQ4OUIsSUFFTzlWLEVBQUksQ0FDVGppQyxLQUFNLGFBQ05zYixTQUFVbzlDLE0sNkJDNUhkLzlELEVBQU9ELFFBU1AsU0FBb0Jza0UsRUFBS25qRSxFQUFPa2xFLEdBQzlCLElBT0kvakUsRUFDQWdkLEVBQ0F4UyxFQVJBNFEsRUFETzFZLEtBQ1NELFFBQ2hCeEIsRUFBU3BDLEVBQU1vQyxPQUFTLEVBQ3hCeVgsR0FBUyxFQUNUdUUsRUFBTStrRCxFQUFJL2tELE1BQ1YyM0MsRUFBVyxHQUNYenFELEVBQVUsR0FNZCxPQUFTdU8sRUFBUXpYLEdBQVEsQ0FHdkIsR0FyQlUsT0FtQlZqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQXBCakIsT0FzQnFCMVksRUFBcUIsQ0FDaEQwWSxJQUNBLE1BR0ZrOEMsR0FBWTUwRCxFQUlkd0ssRUFBUSxFQUVSLE9BQVNrTyxHQUFTelgsR0FBUSxDQUd4QixHQWxDUyxPQWdDVGpCLEVBQVluQixFQUFNdUIsT0FBT3NZLElBRUMsQ0FDeEJBLElBQ0EsTUFHRms4QyxHQUFZNTBELEVBQ1p3SyxJQUdGLEdBQUlBLEVBekNjLEVBMENoQixPQUdGLElBQ0dBLElBQ0M0USxFQUFTaVksVUFqREYsTUFpRGN4MEIsRUFBTXVCLE9BQU9zWSxFQUFRLEdBRTVDLE9BR0Z6WCxFQUFTcEMsRUFBTW9DLE9BQVMsRUFHeEIrYixFQUFRLEdBRVIsT0FBU3RFLEVBQVF6WCxHQUFRLENBR3ZCLEdBL0RVLE9BNkRWakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0E5RGpCLE9BZ0VxQjFZLEVBQXFCLENBQ2hEMFksSUFDQSxNQUdGc0UsR0FBU2hkLEVBSVgsSUFDR29iLEVBQVNpWSxVQUNPLElBQWpCclcsRUFBTS9iLFFBQ05qQixHQTdFWSxPQThFWkEsRUFFQSxPQUdGLEdBQUkrakUsRUFDRixPQUFPLEVBSVRuUCxHQUFZNTNDLEVBQ1pBLEVBQVEsR0FDUjdTLEVBQVUsR0FFVixPQUFTdU8sRUFBUXpYLElBQ2ZqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQTdGYixPQStGTTFZLEdBSWxCLEdBakdVLE1Ba0dSQSxHQW5HTSxPQW9HTkEsR0FsR08sTUFtR1BBLEVBSEYsQ0FVQSxLQTNHVSxNQTJHSEEsR0E1R0MsT0E0R3dCQSxHQUM5QmdkLEdBQVNoZCxFQUNUQSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxHQUc3QixLQS9HUyxNQStHRjFZLEdBQ0xnZCxHQUFTaGQsRUFDVEEsRUFBWW5CLEVBQU11QixTQUFTc1ksR0FHN0IsS0FySFUsTUFxSEgxWSxHQXRIQyxPQXNId0JBLEdBQzlCZ2QsR0FBU2hkLEVBQ1RBLEVBQVluQixFQUFNdUIsU0FBU3NZLEdBRzdCQSxTQXBCRXZPLEdBQVc2UyxFQUFRaGQsRUFDbkJnZCxFQUFRLEdBMEJaLE9BSkFDLEVBQUkxUyxRQUFVcXFELEVBQVMzekQsT0FDdkJnYyxFQUFJRSxRQUFVeTNDLEVBQVMzekQsT0FHaEIrZ0UsRUFGUHBOLEdBQVl6cUQsRUFBVTZTLEVBRWZnbEQsQ0FBYyxDQUNuQmgvRCxLQUFNLFVBQ053SCxNQUFPQSxFQUNQOFQsU0E5SFM1YixLQThITTArRCxlQUFlajNELEVBQVM4UyxPLDZCQ3hJM0N0ZixFQUFPRCxRQVdQLFNBQXVCc2tFLEVBQUtuakUsRUFBT2tsRSxHQUNqQyxJQUdJL2pFLEVBQ0Fxa0UsRUFDQVUsRUFDQS9uRCxFQU5BdEUsR0FBUyxFQUNUelgsRUFBU3BDLEVBQU1vQyxPQUFTLEVBQ3hCMnpELEVBQVcsR0FNZixPQUFTbDhDLEVBQVF6WCxJQWpCUCxRQWtCUmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBakJmLE1BbUJpQjFZLElBSTNCNDBELEdBQVk1MEQsRUFHZCxHQXpCZSxNQTBCYkEsR0F4QlMsTUF5QlRBLEdBMUJlLE1BMkJmQSxFQUVBLE9BR0Zxa0UsRUFBU3JrRSxFQUNUNDBELEdBQVk1MEQsRUFDWitrRSxFQUFjLEVBQ2QvbkQsRUFBUSxHQUVSLE9BQVN0RSxFQUFRelgsR0FHZixJQUZBakIsRUFBWW5CLEVBQU11QixPQUFPc1ksTUFFUDJyRCxFQUNoQlUsSUFDQW5RLEdBQVk1M0MsRUFBUXFuRCxFQUNwQnJuRCxFQUFRLE9BQ0gsSUE5Q0csTUE4Q0NoZCxFQUVKLE9BQ0wra0UsR0E1QzRCLEtBNkMxQi9rRSxHQXBEUSxPQW9ES0EsSUFFZjQwRCxHQUFZNTNDLElBRVIrbUQsR0FJRy9CLEVBQUlwTixFQUFKb04sQ0FBYyxDQUFDaC9ELEtBQU0sd0JBRTVCLEVBYkFnYSxHQUFTaGQsSyw2QkNqRGYsSUFBSStGLEVBQU8sRUFBUSxJQUNmaVAsRUFBUyxFQUFRLElBQ2pCK0YsRUFBVSxFQUFRLElBQ2xCaXFELEVBQVksRUFBUSxJQUNwQkMsRUFBZSxFQUFRLEtBQ3ZCUCxFQUFZLEVBQVEsSUFFeEIvbUUsRUFBT0QsUUF5Q1AsU0FBY3NrRSxFQUFLbmpFLEVBQU9rbEUsR0FDeEIsSUFLSW1CLEVBS0Fsb0QsRUFDQW1vRCxFQUNBbmxFLEVBQ0Fxa0UsRUFDQU0sRUFDQTVzQixFQUNBNnNCLEVBQ0FRLEVBQ0FqN0QsRUFDQUcsRUFDQSs2RCxFQUNBQyxFQUNBcnFCLEVBQ0FzcUIsRUFDQUMsRUFDQWprRCxFQUNBa2tELEVBQ0FDLEVBQ0FDLEVBQ0FsNkQsRUFDQXdSLEVBQ0F4SSxFQUNBbXhELEVBL0JBenlDLEVBRE96d0IsS0FDV0QsUUFBUTB3QixXQUMxQkUsRUFGTzN3QixLQUVTRCxRQUFRNHdCLFNBQ3hCdkssRUFIT3BtQixLQUdXczlELGdCQUNsQjZGLEVBSk9uakUsS0FJWW85RCxjQUVuQnBuRCxFQUFRLEVBQ1J6WCxFQUFTcEMsRUFBTW9DLE9BQ2ZvVSxFQUFRLEtBQ1JpSyxFQUFPLEVBeUJYLEtBQU81RyxFQUFRelgsR0FBUSxDQUdyQixHQXRFUSxRQW9FUmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLElBR3ZCNEcsR0FuRVMsRUFtRVdBLEVBbkVYLE1Bb0VKLElBMUVHLE1BMEVDdGYsRUFHVCxNQUZBc2YsSUFLRjVHLElBR0YsR0FBSTRHLEdBN0VTLEVBOEVYLE9BU0YsR0FOQXRmLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBRXpCd3NELEVBQVUveEMsRUFDUjJ5QyxFQUNBQyxHQUV3QyxJQUF0Q0MsRUFBdUJobUUsR0FDekJxa0UsRUFBU3JrRSxFQUNUbWxFLEdBQVUsTUFDTCxDQUlMLElBSEFBLEdBQVUsRUFDVm5vRCxFQUFRLEdBRUR0RSxFQUFRelgsSUFDYmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBRXBCcUMsRUFBUS9hLEtBSWJnZCxHQUFTaGQsRUFDVDBZLElBS0YsR0FGQTFZLEVBQVluQixFQUFNdUIsT0FBT3NZLElBRXBCc0UsSUFBZ0MsSUFBdkJrb0QsRUFBUWxsRSxHQUNwQixPQUdGcVYsRUFBUW9JLFNBQVNULEVBQU8sSUFDeEJxbkQsRUFBU3JrRSxFQUtYLEdBM0hZLE9BeUhaQSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxLQXZIakIsT0F5SG1CMVksRUFDM0IsT0FHRixHQUFJK2pFLEVBQ0YsT0FBTyxFQUdUcnJELEVBQVEsRUFDUnVpQyxFQUFRLEdBQ1JzcUIsRUFBVyxHQUNYQyxFQUFhLEdBRWIsS0FBTzlzRCxFQUFRelgsR0FBUSxDQWFyQixJQVpBMGpFLEVBQVk5bEUsRUFBTTJILFFBeElOLEtBd0l5QmtTLEdBQ3JDcS9CLEVBQWFyL0IsRUFDYmtzRCxHQUFXLEVBQ1hnQixHQUFXLEdBRVEsSUFBZmpCLElBQ0ZBLEVBQVkxakUsR0FHZHdULEVBQU1pRSxFQTVJSyxFQTZJWDRHLEVBQU8sRUFFQTVHLEVBQVF6WCxHQUFRLENBR3JCLEdBdEpNLFFBb0pOakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFHdkI0RyxHQW5KTyxFQW1KYUEsRUFuSmIsTUFvSkYsSUExSkMsTUEwSkd0ZixFQUdULE1BRkFzZixJQUtGNUcsSUFjRixHQVhJNEcsR0E3Sk8sSUE4SlRzbUQsR0FBVyxHQUdUcmtELEdBQVFqQyxHQUFRaUMsRUFBS2hHLFNBQ3ZCcXFELEdBQVcsR0FHYjVsRSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUN6QjBzRCxFQUFnQixNQUVYUSxFQUFVLENBQ2IsSUFBMEMsSUFBdENJLEVBQXVCaG1FLEdBQ3pCb2xFLEVBQWdCcGxFLEVBQ2hCMFksSUFDQTRHLFFBQ0ssQ0FHTCxJQUZBdEMsRUFBUSxHQUVEdEUsRUFBUXpYLElBQ2JqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUVwQnFDLEVBQVEvYSxLQUliZ2QsR0FBU2hkLEVBQ1QwWSxJQUdGMVksRUFBWW5CLEVBQU11QixPQUFPc1ksR0FDekJBLElBRUlzRSxJQUFnQyxJQUF2QmtvRCxFQUFRbGxFLEtBQ25Cb2xFLEVBQWdCcGxFLEVBQ2hCc2YsR0FBUXRDLEVBQU0vYixPQUFTLEdBSTNCLEdBQUlta0UsRUFHRixHQTNNSSxRQXlNSnBsRSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxJQUd2QjRHLEdBeE1LLEVBd01lQSxFQXhNZixFQXlNTDVHLFNBQ0ssR0FoTkQsTUFnTksxWSxFQUF1QixDQUdoQyxJQUZBeVUsRUFBTWlFLEVBM01ELEVBNk1FQSxFQUFRakUsR0FuTlgsTUFvTkU1VixFQUFNdUIsT0FBT3NZLElBSWpCQSxJQUNBNEcsSUFHRTVHLElBQVVqRSxHQTVOVixNQTROaUI1VixFQUFNdUIsT0FBT3NZLEtBQ2hDQSxHQUFTdXRELEVBQ1QzbUQsR0FBUTJtRCxPQTdOSixPQStOR2ptRSxHQUF5QyxLQUFkQSxJQUNwQ29sRSxFQUFnQixNQUt0QixHQUFJQSxFQUFlLENBQ2pCLElBQUsveEMsR0FBWWd4QyxJQUFXZSxFQUMxQixNQUdGUixHQUFXLE9BRU56eEMsR0FBZXl5QyxHQTdPWixNQTZPd0IvbUUsRUFBTXVCLE9BQU8yM0MsR0FFbEM1a0IsR0FBYzVSLElBQ3ZCcWtELEVBQVd0bUQsR0FBUWlDLEVBQUtoRyxRQUFVK0QsRUExTzNCLEdBd09Qc21ELEdBQVcsRUFLYmhCLEdBQVcsRUFDWGxzRCxFQUFRcS9CLEVBTVYsR0FIQXp0QyxFQUFPekwsRUFBTXlXLE1BQU15aUMsRUFBWTRzQixHQUMvQng2RCxFQUFVNHRDLElBQWVyL0IsRUFBUXBPLEVBQU96TCxFQUFNeVcsTUFBTW9ELEVBQU9pc0QsSUE3UDlDLE1BZ1FYUyxHQS9QYSxNQWdRYkEsR0E5UE8sTUErUFBBLElBRUl0OEMsRUFBV3czQyxjQUFjdmlFLEtBNU50QjJFLEtBNE5pQ3MvRCxFQUFLMTNELEdBQU0sR0FDakQsTUFPSixHQUhBKzZELEVBQVlDLEVBQ1pBLEdBQVN2L0QsRUFBS29FLEdBQVNsSixPQUVuQjJrRSxHQUFZcmtELEVBQ2RBLEVBQUsxaUIsTUFBUTBpQixFQUFLMWlCLE1BQU1naEIsT0FBTzJsRCxFQUFZbDdELEdBQzNDaTdELEVBQVdBLEVBQVMxbEQsT0FBTzJsRCxFQUFZbDdELEdBQ3ZDazdELEVBQWEsUUFDUixHQUFJWixFQUNpQixJQUF0QlksRUFBV3ZrRSxTQUNic2dCLEVBQUsxaUIsTUFBTWtHLEtBQUssSUFDaEJ3YyxFQUFLMmtELE1BQVFWLEVBQVczbEQsVUFHMUIwQixFQUFPLENBQ0wxaUIsTUFBTyxDQUFDeUwsR0FDUmlSLE9BQVErRCxFQUNSNG1ELE1BQU8sSUFHVGpyQixFQUFNbDJDLEtBQUt3YyxHQUNYZ2tELEVBQVdBLEVBQVMxbEQsT0FBTzJsRCxFQUFZbDdELEdBQ3ZDazdELEVBQWEsUUFDUixHQUFJRixFQUFPLENBQ2hCLEdBQUlELEVBQ0YsTUFHRkcsRUFBV3pnRSxLQUFLdUYsT0FDWCxDQUNMLEdBQUkrNkQsRUFDRixNQUdGLEdBQUlYLEVBQVVtQixFQUFhLzhDLEVBbFFwQnBtQixLQWtRc0MsQ0FBQ3MvRCxFQUFLMTNELEdBQU0sSUFDdkQsTUFHRmlYLEVBQUsxaUIsTUFBUTBpQixFQUFLMWlCLE1BQU1naEIsT0FBTzJsRCxFQUFZbDdELEdBQzNDaTdELEVBQVdBLEVBQVMxbEQsT0FBTzJsRCxFQUFZbDdELEdBQ3ZDazdELEVBQWEsR0FHZjlzRCxFQUFRaXNELEVBQVksRUFHdEJsNUQsRUFBT3UyRCxFQUFJdUQsRUFBU2ppRSxLQWhUTixPQWdUdUJzL0QsTUFBTSxDQUN6QzUvRCxLQUFNLE9BQ05taUUsUUFBU0EsRUFDVDl2RCxNQUFPQSxFQUNQOHdELE1BQU8sS0FDUDduRCxTQUFVLEtBR1ptbkQsRUF0UlcvaUUsS0FzUktnOUQsWUFDaEJnRyxFQXZSV2hqRSxLQXVSV2s5RCxhQUN0QitGLEdBQVUsRUFDVmp0RCxHQUFTLEVBQ1R6WCxFQUFTZzZDLEVBQU1oNkMsT0FFZixPQUFTeVgsRUFBUXpYLEdBQ2ZzZ0IsRUFBTzA1QixFQUFNdmlDLEdBQU83WixNQUFNeUUsS0EvVGQsTUFnVVoyWixFQUFNK2tELEVBQUkva0QsT0FFVnNFLEVBQU95Z0QsRUFBSXpnRCxFQUFKeWdELENBQVVvRSxFQWhTUjFqRSxLQWdTdUI2ZSxFQUFNdEUsR0FBTXhSLElBRW5DMDZELFFBQ1BSLEdBQVUsR0FHWnBrRCxFQUFPMDVCLEVBQU12aUMsR0FBT3d0RCxNQUFNNWlFLEtBeFVkLE1BMFVSb1YsSUFBVXpYLEVBQVMsSUFDckJzZ0IsR0EzVVUsTUE4VVp5Z0QsRUFBSXpnRCxHQVFOLE9BTEFra0QsSUFDQUMsSUFFQWo2RCxFQUFLMDZELE1BQVFSLEVBRU5sNkQsR0E1VlQsSUFZSTQ2RCxFQUE2QixlQUM3QkMsRUFBdUIsdUJBQ3ZCQyxFQUFvQiw4REFDcEJDLEVBQTZCLG1DQUM3QkMsRUFBNEIsa0JBSTVCVCxFQUF5QixDQUU3QixLQUFxQyxFQUNyQyxLQUFpQyxFQUNqQyxLQUFpQyxHQUk3QkQsRUFBdUIsQ0FFM0IsS0FBOEIsR0FJMUJELEVBQWtDLEdBNlR0QyxTQUFTTSxFQUFTcjlDLEVBQUtscUIsRUFBT3ljLEdBQzVCLElBR0lvckQsRUFDQW5yRCxFQUpBb21ELEVBQVU1NEMsRUFBSTVMLE9BQ2R6TixFQUFLcVosRUFBSXRtQixRQUFRNHdCLFNBQVdzekMsRUFBbUJDLEVBQy9DeGhCLEVBQVUsS0FpQmQsT0FiQXZtRCxFQUFRNlEsRUFBR2tMLE1BQU0sS0FBTTVaLFdBRW5CK25CLEVBQUl0bUIsUUFBUXl3QixNQUNkd3pDLEVBQU83bkUsRUFBTWdSLE1BQU15MkQsTUFHakIvcUQsRUFBU21yRCxFQUFLLEdBQUd6bEUsT0FDakJta0QsRUFwV1UsTUFvV0FzaEIsRUFBSyxHQUFHOTJELGNBQ2xCK3hELEVBQVFybUQsRUFBU2hSLE9BQVNpUixFQUMxQjFjLEVBQVFBLEVBQU15VyxNQUFNaUcsSUFJakIsQ0FDTHZZLEtBQU0sV0FDTm1qRSxNQUFPRSxFQUEyQm5tRSxLQUFLckIsSUEvVzNCLE9BZ1hWQSxFQUFNdUIsT0FBT3ZCLEVBQU1vQyxPQUFTLEdBQzlCbWtELFFBQVNBLEVBQ1Q5bUMsU0FBVXlLLEVBQUlvNEMsY0FBY3RpRSxFQUFPeWMsSUFLdkMsU0FBU3FyRCxFQUFpQjU5QyxFQUFLbHFCLEVBQU95YyxHQUNwQyxJQUFJcW1ELEVBQVU1NEMsRUFBSTVMLE9BQ2Q3UyxFQUFPZ1IsRUFBU2hSLEtBU3BCLE9BTkF6TCxFQUFRQSxFQUFNeUgsUUFBUWtnRSxFQUE0QkssR0FJbER2OEQsRUFBT2dSLEVBQVNoUixLQUVUekwsRUFBTXlILFFBQVFtZ0UsRUFBMkJJLEdBSWhELFNBQVNBLEVBQVNsUyxHQUloQixPQUhBZ04sRUFBUXIzRCxJQUFTcTNELEVBQVFyM0QsSUFBUyxHQUFLcXFELEVBQUcxekQsT0FDMUNxSixJQUVPLElBS1gsU0FBU3M4RCxFQUFlNzlDLEVBQUtscUIsRUFBT3ljLEdBQ2xDLElBRUk2SSxFQUNBMmlELEVBQ0F4OEMsRUFDQXZOLEVBQ0FncUQsRUFDQXJ1RCxFQUNBelgsRUFSQTBnRSxFQUFVNTRDLEVBQUk1TCxPQUNkN1MsRUFBT2dSLEVBQVNoUixLQThCcEIsSUFsQkF5UyxHQUZBbGUsRUFBUUEsRUFBTXlILFFBQVFpZ0UsR0E0QnRCLFNBQWtCNVIsRUFBSXFTLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ2hDTCxFQUFTRSxFQUFLQyxFQUFLQyxFQUNuQjU4QyxFQUFPNjhDLEVBS0hoVCxPQUFPOFMsR0FBTSxJQUFNSCxFQUFPN2xFLE9BQVMsR0FBTSxJQUMzQ2dtRSxFQWhjUSxJQWdjT0EsR0FLakIsT0FGQTlpRCxFQUFNNmlELEVBQUtoeUQsRUFuY0QsSUFtY2lCaXlELEVBQUdobUUsUUFBVWltRSxHQUUzQjU4QyxNQXZDRHRrQixNQTdaQSxPQStaZCtnRSxFQUFlOUIsRUFBYXBtRSxFQUFPbW1FLEVBQVU3Z0QsR0FBSzVJLFFBQVF2VixNQS9aNUMsT0F1YUQsR0FBS3NrQixFQUVsQnEzQyxFQUFRcjNELElBQVNxM0QsRUFBUXIzRCxJQUFTLEdBQUt3OEQsRUFBTzdsRSxPQUM5Q3FKLElBRUFvTyxFQUFRLEVBQ1J6WCxFQUFTOGIsRUFBTTliLFNBRU55WCxFQUFRelgsR0FDZjBnRSxFQUFRcjNELElBQVNxM0QsRUFBUXIzRCxJQUFTLEdBQ2hDeVMsRUFBTXJFLEdBQU96WCxPQUFTOGxFLEVBQWFydUQsR0FBT3pYLE9BQzVDcUosSUFHRixPQUFPeThELEVBQWF6akUsS0FyYk4sTUE4QmhCd2lFLEVBaENZLE1BZ0M2QixFQUN6Q0EsRUE3Qm9CLE1BNkI2QixHLDZCQ2hEakQsSUFBSS8vRCxFQUFPLEVBQVEsSUFDZmlQLEVBQVMsRUFBUSxJQUNqQmd3RCxFQUFZLEVBQVEsSUFFeEJybkUsRUFBT0QsUUFTUCxTQUFxQm1CLEVBQU91b0UsR0FDMUIsSUFJSTF1RCxFQUNBOHBELEVBQ0FqdkMsRUFDQXdlLEVBUEFyOEIsRUFBUzdXLEVBQU1tSCxNQVBMLE1BUVZzVixFQUFXNUYsRUFBT3pVLE9BQVMsRUFDM0JvbUUsRUFBWWpNLElBQ1prTSxFQUFTLEdBTWI1eEQsRUFBTzBnQixRQUFRcGhCLEVBakJILElBaUJtQm95RCxHQUFXLEtBRTFDLEtBQU85ckQsS0FLTCxHQUpBa25ELEVBQWN3QyxFQUFVdHZELEVBQU80RixJQUUvQmdzRCxFQUFPaHNELEdBQVlrbkQsRUFBWWp2QyxNQUVPLElBQWxDeHRCLEVBQUsyUCxFQUFPNEYsSUFBV3JhLE9BQTNCLENBSUEsSUFBSXVoRSxFQUFZam5ELE9BSVQsQ0FDTDhyRCxFQUFZak0sSUFFWixNQU5Jb0gsRUFBWWpuRCxPQUFTLEdBQUtpbkQsRUFBWWpuRCxPQUFTOHJELElBQ2pEQSxFQUFZN0UsRUFBWWpuRCxRQVM5QixHQUFJOHJELElBQWNqTSxJQUdoQixJQUZBOS9DLEVBQVc1RixFQUFPelUsT0FFWHFhLEtBQVksQ0FJakIsSUFIQWlZLEVBQVErekMsRUFBT2hzRCxHQUNmNUMsRUFBUTJ1RCxFQUVEM3VELEtBQVdBLEtBQVM2YSxJQUN6QjdhLElBUUFxNUIsRUFKa0MsSUFBbENoc0MsRUFBSzJQLEVBQU80RixJQUFXcmEsUUFDdkJvbUUsR0FDQTN1RCxJQUFVMnVELEVBbkROLEtBdURNLEdBR1ozeEQsRUFBTzRGLEdBQVl5MkIsRUFBVXI4QixFQUFPNEYsR0FBVWhHLE1BQzVDb0QsS0FBUzZhLEVBQVFBLEVBQU03YSxHQUFTLEVBQUksR0FPMUMsT0FGQWhELEVBQU8raEIsUUFFQS9oQixFQUFPcFMsS0FuRUEsUSw2QkNQaEIzRixFQUFPRCxRQWlCUCxTQUF1QnNrRSxFQUFLbmpFLEVBQU9rbEUsR0FDakMsSUFLSTU1RCxFQUNBNlMsRUFDQWhkLEVBQ0Fxa0UsRUFDQTc1RCxFQVJBeVMsRUFBTStrRCxFQUFJL2tELE1BQ1ZoYyxFQUFTcEMsRUFBTW9DLE9BQ2Z5WCxHQUFTLEVBQ1RrOEMsRUFBVyxHQVFmLE9BQVNsOEMsRUFBUXpYLEdBQVEsQ0FHdkIsR0E3QlUsT0EyQlZqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQUVJQSxHQXpCUixFQXlCcUMsQ0FDeERBLElBQ0EsTUFHRms4QyxHQUFZNTBELEVBSWRtSyxFQUFVLEdBQ1Y2UyxFQUFRLEdBRVIsT0FBU3RFLEVBQVF6WCxHQUFRLENBR3ZCLEdBOUNZLFFBNENaakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFFSSxDQUMzQkEsSUFDQSxNQTlDUSxNQWlETjFZLEdBbERJLE9Ba0RxQkEsRUFDM0JnZCxHQUFTaGQsR0FFVG1LLEdBQVc2UyxFQUFRaGQsRUFDbkJnZCxFQUFRLElBYVosR0FUQUMsRUFBSTFTLFFBQVVxcUQsRUFBUzN6RCxPQUN2QmdjLEVBQUlFLFFBQVV5M0MsRUFBUzN6RCxPQUN2QjJ6RCxHQUFZenFELEVBQVU2UyxFQUl0QmhkLEVBQVluQixFQUFNdUIsU0FBU3NZLEdBQzNCMnJELEVBQVN4bEUsRUFBTXVCLFNBQVNzWSxHQWxFVixPQW9FVjFZLElBQTRCdW5FLEVBQWVsRCxHQUM3QyxPQUdGelAsR0FBWTUwRCxFQUdaZ2QsRUFBUXFuRCxFQUNSNzVELEVBQVErOEQsRUFBZWxELEdBRXZCLE9BQVMzckQsRUFBUXpYLEdBQVEsQ0FHdkIsSUFGQWpCLEVBQVluQixFQUFNdUIsT0FBT3NZLE1BRVAyckQsRUFBUSxDQUN4QixHQWxGVSxPQWtGTnJrRSxFQUNGLE9BR0YwWSxJQUNBLE1BR0ZzRSxHQUFTaGQsRUFHWCxHQUFJK2pFLEVBQ0YsT0FBTyxFQUdULE9BQU8vQixFQUFJcE4sRUFBVzUzQyxFQUFmZ2xELENBQXNCLENBQzNCaC9ELEtBQU0sVUFDTndILE1BQU9BLEVBQ1A4VCxTQXBGUzViLEtBb0ZNMCtELGVBQWVqM0QsRUFBUzhTLE1BcEczQyxJQVVJc3FELEVBQWlCLEdBRXJCQSxFQVRlLEtBU1ksRUFDM0JBLEVBVGEsS0FTWSxHLDZCQ2Z6QixJQUFJNXpDLEVBQWUsRUFBUSxJQUFnQkEsYUFFM0NoMkIsRUFBT0QsUUFPUCxTQUFtQnNrRSxFQUFLbmpFLEVBQU9rbEUsR0FDN0IsSUFJSTl6RCxFQUNBM0YsRUFDQTZTLEVBQ0FuZCxFQUNBcXBCLEVBQ0FtK0MsRUFDQTVTLEVBVEF0aEMsRUFETzV3QixLQUNPRCxRQUFRNndCLE9BQ3RCcnlCLEVBQVNwQyxFQUFNb0MsT0FDZnlYLEVBQVEsRUFTUit1RCxFQUFZLENBQ2QsQ0FBQyxvQ0FBcUMsMkJBQTJCLEdBQ2pFLENBQUMsUUFBUyxPQUFPLEdBQ2pCLENBQUMsT0FBUSxPQUFPLEdBQ2hCLENBQUMsY0FBZSxLQUFLLEdBQ3JCLENBQUMsZUFBZ0IsU0FBUyxHQUMxQixDQUFDLElBQUk3a0QsT0FBTyxRQUFVMFEsRUFBT2h3QixLQUFLLEtBQU8sbUJBQW9CLEtBQU0sTUFBTSxHQUN6RSxDQUFDLElBQUlzZixPQUFPK1EsRUFBYXp5QixPQUFTLFNBQVUsTUFBTSxJQUlwRCxLQUFPd1gsRUFBUXpYLElBN0JMLFFBOEJSakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0E3QmYsTUErQmlCMVksSUFJM0IwWSxJQUdGLEdBcENTLE1Bb0NMN1osRUFBTXVCLE9BQU9zWSxHQUNmLE9BSUZ6SSxHQUFpQixLQURqQkEsRUFBT3BSLEVBQU0ySCxRQXpDQyxLQXlDa0JrUyxFQUFRLElBQ25CelgsRUFBU2dQLEVBQzlCM0YsRUFBT3pMLEVBQU15VyxNQUFNb0QsRUFBT3pJLEdBQzFCa04sR0FBVSxFQUNWa00sRUFBUW8rQyxFQUFVeG1FLE9BRWxCLE9BQVNrYyxFQUFTa00sR0FDaEIsR0FBSW8rQyxFQUFVdHFELEdBQVEsR0FBR2pkLEtBQUtvSyxHQUFPLENBQ25DazlELEVBQVdDLEVBQVV0cUQsR0FDckIsTUFJSixJQUFLcXFELEVBQ0gsT0FHRixHQUFJekQsRUFDRixPQUFPeUQsRUFBUyxHQUtsQixHQUZBOXVELEVBQVF6SSxHQUVIdTNELEVBQVMsR0FBR3RuRSxLQUFLb0ssR0FDcEIsS0FBT29PLEVBQVF6WCxHQUFRLENBS3JCLEdBSEFnUCxHQUFpQixLQURqQkEsRUFBT3BSLEVBQU0ySCxRQWxFSCxLQWtFc0JrUyxFQUFRLElBQ25CelgsRUFBU2dQLEVBQzlCM0YsRUFBT3pMLEVBQU15VyxNQUFNb0QsRUFBUSxFQUFHekksR0FFMUJ1M0QsRUFBUyxHQUFHdG5FLEtBQUtvSyxHQUFPLENBQ3RCQSxJQUNGb08sRUFBUXpJLEdBR1YsTUFHRnlJLEVBQVF6SSxFQU1aLE9BRkEya0QsRUFBVy8xRCxFQUFNeVcsTUFBTSxFQUFHb0QsR0FFbkJzcEQsRUFBSXBOLEVBQUpvTixDQUFjLENBQUNoL0QsS0FBTSxPQUFRbkUsTUFBTysxRCxNLDZCQzFGN0MsSUFBSWtQLEVBQWEsRUFBUSxHQUNyQjl0RCxFQUFZLEVBQVEsSUFFeEJyWSxFQUFPRCxRQUFVZ3FFLEVBQ2pCQSxFQUFtQnZGLFdBQVksRUFDL0J1RixFQUFtQnRGLFlBQWEsRUFFaEMsSUFTSXVGLEVBQXlCLGdCQUU3QixTQUFTRCxFQUFtQjFGLEVBQUtuakUsRUFBT2tsRSxHQUN0QyxJQUVJcnJELEVBQ0F6WCxFQUNBMnpELEVBQ0EzM0MsRUFDQTRuRCxFQUNBMTZELEVBQ0E2UyxFQUNBNHFELEVBQ0E1bkUsRUFDQTZuRSxFQUNBNWlDLEVBQ0E4VixFQVpBNG1CLEVBRE9qL0QsS0FDUXlhLE9BY25CLEdBZld6YSxLQWVERCxRQUFRMndCLFVBQWxCLENBVUEsSUFOQTFhLEVBQVEsRUFDUnpYLEVBQVNwQyxFQUFNb0MsT0FDZjJ6RCxFQUFXLEdBQ1gzM0MsRUFBTStrRCxFQUFJL2tELE1BQ1Y0bkQsRUFBYzVuRCxFQUFJM1MsS0FFWG9PLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksR0FFcEJvckQsRUFBVzlqRSxLQUloQjQwRCxHQUFZNTBELEVBQ1owWSxJQUdGLEdBNUNtQixNQTZDakI3WixFQUFNdUIsT0FBT3NZLElBM0NILE1BNENWN1osRUFBTXVCLE9BQU9zWSxFQUFRLEdBRnZCLENBV0EsSUFIQUEsR0FEQWs4QyxHQUFZa1QsTUFDSzdtRSxPQUNqQitiLEVBQVEsR0FFRHRFLEVBQVF6WCxHQXRESyxPQXVEbEJqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQTVEWCxPQWdFSDFZLElBQ1RnZCxHQUFTaGQsRUFDVDBZLElBQ0ExWSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxJQUczQnNFLEdBQVNoZCxFQUNUMFksSUFHRixHQUNHc0UsR0F0RWlCLE1BdUVsQm5lLEVBQU11QixPQUFPc1ksSUFyRUgsTUFzRVY3WixFQUFNdUIsT0FBT3NZLEVBQVEsR0FIdkIsQ0FRQSxHQUFJcXJELEVBQ0YsT0FBTyxFQU9ULElBSkE4RCxFQUFhN3hELEVBQVVnSCxHQUV2QnRFLEdBREFrOEMsR0FBWTUzQyxRQUNLL2IsT0FFVnlYLEVBQVF6WCxJQXhGTCxRQXlGUmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBeEZmLE1BMEZpQjFZLElBSTNCNDBELEdBQVk1MEQsRUFDWjBZLElBU0YsSUFOQXVFLEVBQUkxUyxRQUFVcXFELEVBQVMzekQsT0FDdkJnYyxFQUFJRSxRQUFVeTNDLEVBQVMzekQsT0FDdkIrYixFQUFRLEdBQ1I3UyxFQUFVLEdBQ1Z5OUQsRUFBVyxHQUVKbHZELEVBQVF6WCxHQUFRLENBR3JCLEdBN0dZLFFBMkdaakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFFSSxDQUkzQixJQUhBa3ZELEVBQVc1bkUsRUFDWDBZLElBRU9BLEVBQVF6WCxHQWpITCxRQWtIUmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBTXpCa3ZELEdBQVk1bkUsRUFDWjBZLElBTUYsSUFIQXNFLEdBQVM0cUQsRUFDVEEsRUFBVyxHQUVKbHZELEVBQVF6WCxHQTdIUCxPQThITmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBTXpCa3ZELEdBQVk1bkUsRUFDWjBZLElBR0YsR0FBd0IsSUFBcEJrdkQsRUFBUzNtRSxPQUNYLE1BR0YrYixHQUFTNHFELEVBR1A1cUQsSUFDRjdTLEdBQVc2UyxFQUNYQSxFQUFRLElBR1Y3UyxHQUFXbkssRUFDWDBZLElBa0JGLE9BZkFrOEMsR0FBWXpxRCxFQUVaQSxFQUFVQSxFQUFRN0QsUUFBUXFoRSxHQUF3QixTQUFVcjlELEdBSTFELE9BSEFxM0QsRUFBUWtELElBQWdCbEQsRUFBUWtELElBQWdCLEdBQUt2NkQsRUFBS3JKLE9BQzFENGpFLElBRU8sTUFHVDUvQixFQUFNKzhCLEVBQUlwTixHQUVWN1osRUExSldyNEMsS0EwSkNrOUQsYUFDWnoxRCxFQTNKV3pILEtBMkpJeStELGNBQWNoM0QsRUFBUzhTLEdBQ3RDODlCLElBRU85VixFQUFJLENBQ1RqaUMsS0FBTSxxQkFDTjZrRSxXQUFZQSxFQUNadnBELFNBQVVuVSxTLDZCQ3BMZHhNLEVBQU9ELFFBR1AsU0FBa0JtQixHQUNoQixPQUFPd0IsT0FBT3hCLEdBQU95SCxRQUFRLE9BQVEsTyw2QkNKdkMsSUFBSXc5RCxFQUFhLEVBQVEsR0FDckI5dEQsRUFBWSxFQUFRLElBRXhCclksRUFBT0QsUUFBVXlZLEVBQ2pCQSxFQUFXZ3NELFdBQVksRUFDdkJoc0QsRUFBV2lzRCxZQUFhLEVBZ0J4QixTQUFTanNELEVBQVc2ckQsRUFBS25qRSxFQUFPa2xFLEdBZTlCLElBZEEsSUFLSWdFLEVBQ0FDLEVBQ0FockQsRUFDQWhkLEVBQ0FFLEVBQ0EybkUsRUFDQWh3RCxFQUNBd1osRUFYQThCLEVBRE96d0IsS0FDV0QsUUFBUTB3QixXQUMxQnphLEVBQVEsRUFDUnpYLEVBQVNwQyxFQUFNb0MsT0FDZjJ6RCxFQUFXLEdBVVJsOEMsRUFBUXpYLElBeEJILE9BeUJWakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0ExQmpCLE9BNEJxQjFZLElBSTdCNDBELEdBQVk1MEQsRUFDWjBZLElBS0YsR0FwQ21CLE9Ba0NuQjFZLEVBQVluQixFQUFNdUIsT0FBT3NZLElBRXpCLENBUUEsSUFKQUEsSUFDQWs4QyxHQUFZNTBELEVBQ1pnZCxFQUFRLEdBRUR0RSxFQUFRelgsR0EzQ0ssT0E0Q2xCakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0FqRFgsT0FxREgxWSxJQUNUZ2QsR0FBU2hkLEVBQ1QwWSxJQUNBMVksRUFBWW5CLEVBQU11QixPQUFPc1ksSUFHM0JzRSxHQUFTaGQsRUFDVDBZLElBR0YsR0FDR3NFLEdBM0RpQixNQTREbEJuZSxFQUFNdUIsT0FBT3NZLElBekRILE1BMERWN1osRUFBTXVCLE9BQU9zWSxFQUFRLEdBSHZCLENBYUEsSUFMQW12RCxFQUFhN3FELEVBRWJ0RSxHQURBazhDLEdBQVk1M0MsUUFDSy9iLE9BQ2pCK2IsRUFBUSxHQUVEdEUsRUFBUXpYLElBMUVMLFFBMkVSakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0ExRWYsTUE4RVIxWSxHQWhGVSxPQWlGVkEsSUFLRjQwRCxHQUFZNTBELEVBQ1owWSxJQU9GLEdBSEFzRSxFQUFRLEdBQ1IrcUQsRUFBWW5ULEVBcEZILE9Ba0ZUNTBELEVBQVluQixFQUFNdUIsT0FBT3NZLElBSUQsQ0FHdEIsSUFGQUEsSUFFT0EsRUFBUXpYLEdBR1JnbkUsRUFGTGpvRSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQU16QnNFLEdBQVNoZCxFQUNUMFksSUFLRixJQUZBMVksRUFBWW5CLEVBQU11QixPQUFPc1ksTUFFUHV2RCxFQUF1QnY5RCxVQUN2Q2txRCxHQXZHSyxJQXVHYzUzQyxFQUFRaGQsRUFDM0IwWSxRQUNLLENBQ0wsR0FBSXlhLEVBQ0YsT0FHRnphLEdBQVNzRSxFQUFNL2IsT0FBUyxFQUN4QitiLEVBQVEsSUFJWixJQUFLQSxFQUFPLENBQ1YsS0FBT3RFLEVBQVF6WCxHQUdSaW5FLEVBRkxsb0UsRUFBWW5CLEVBQU11QixPQUFPc1ksS0FNekJzRSxHQUFTaGQsRUFDVDBZLElBR0ZrOEMsR0FBWTUzQyxFQUdkLEdBQUtBLEVBQUwsQ0FPQSxJQUhBbkYsRUFBTW1GLEVBQ05BLEVBQVEsR0FFRHRFLEVBQVF6WCxJQWhKTCxRQWlKUmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBaEpmLE1Bb0pSMVksR0F0SlUsT0F1SlZBLElBS0ZnZCxHQUFTaGQsRUFDVDBZLElBY0YsR0FWQXhZLEVBQU8sS0FwS1ksT0FtS25CRixFQUFZbkIsRUFBTXVCLE9BQU9zWSxJQUl2QnhZLEVBdktpQixJQUNBLE1BdUtSRixFQUNURSxFQXhLaUIsSUFPRixNQWtLTkYsSUFDVEUsRUFsS2dCLEtBcUtiQSxFQUdFLEtBQUk4YyxFQXVDVCxPQWxDQSxJQUhBdEUsR0FEQWs4QyxHQUFZNTNDLEVBQVFoZCxHQUNIaUIsT0FDakIrYixFQUFRLEdBRUR0RSxFQUFRelgsSUFDYmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLE1BRVB4WSxHQUhHLENBT3JCLEdBMUxVLE9BMExORixFQUF5QixDQUkzQixHQUhBMFksSUEzTFEsUUE0TFIxWSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxLQUVNMVksSUFBY0UsRUFDM0MsT0FHRjhjLEdBbE1RLEtBcU1WQSxHQUFTaGQsRUFDVDBZLElBS0YsSUFGQTFZLEVBQVluQixFQUFNdUIsT0FBT3NZLE1BRVB4WSxFQUNoQixPQUdGOG5FLEVBQWNwVCxFQUNkQSxHQUFZNTNDLEVBQVFoZCxFQUNwQjBZLElBQ0EyWSxFQUFRclUsRUFDUkEsRUFBUSxRQXZDUkEsRUFBUSxHQUNSdEUsRUFBUWs4QyxFQUFTM3pELE9BMkNuQixLQUFPeVgsRUFBUXpYLElBdk5MLFFBd05SakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0F2TmYsTUF5TmlCMVksSUFJM0I0MEQsR0FBWTUwRCxFQUNaMFksSUFLRixPQUZBMVksRUFBWW5CLEVBQU11QixPQUFPc1ksS0FuT1gsT0FxT0kxWSxPQUFsQixJQUNNK2pFLElBSUpnRSxFQUFZL0YsRUFBSStGLEdBQVc3bkUsT0FBT3VVLElBQ2xDb0QsRUEvTlNuVixLQStORTJvQixPQUFPaGEsSUEvTlQzTyxLQStOa0J1OEQsU0FBU3BuRCxHQUFNa3dELEVBQVcsQ0FBQ3pyRCxlQUFlLElBRWpFK1UsSUFDRjIyQyxFQUFjaEcsRUFBSWdHLEdBQWE5bkUsT0FBT3VVLElBQ3RDNGMsRUFuT08zdUIsS0FtT00yb0IsT0FBT2hhLElBbk9iM08sS0FtT3NCdThELFNBQVM1dEMsR0FBUTIyQyxJQUd6Q2hHLEVBQUlwTixFQUFKb04sQ0FBYyxDQUNuQmgvRCxLQUFNLGFBQ042a0UsV0FBWTd4RCxFQUFVNnhELEdBQ3RCeDJDLE1BQU9BLEdBQVMsS0FDaEJ4WixJQUFLQSxRQU1YLFNBQVNvd0QsRUFBdUJqb0UsR0FDOUIsTUFwUFMsTUFvUEZBLEdBMVBZLE1BMlBqQkEsR0ExUGtCLE1BMlBsQkEsRUFNSixTQUFTa29FLEVBQXVCbG9FLEdBQzlCLE1BblFtQixNQW1RWkEsR0FsUWEsTUFtUWxCQSxJQUNDOGpFLEVBQVc5akUsR0FOaEJpb0UsRUFBdUJ2OUQsVUF6UFosSyw2QkNuQlgsSUFBSW81RCxFQUFhLEVBQVEsR0FFekJubUUsRUFBT0QsUUFtQlAsU0FBZXNrRSxFQUFLbmpFLEVBQU9rbEUsR0FDekIsSUFDSXJyRCxFQUNBeXZELEVBQ0FDLEVBQ0F4VCxFQUNBeVQsRUFDQXBuRSxFQUNBOGIsRUFDQUMsRUFDQWhkLEVBQ0Fzb0UsRUFDQXZZLEVBQ0F3WSxFQUNBQyxFQUNBbi9DLEVBQ0FvL0MsRUFDQXhyRCxFQUNBM0IsRUFDQW90RCxFQUNBcCtELEVBQ0Fva0QsRUFDQStSLEVBQ0FrSSxFQUNBQyxFQUNBQyxFQUdKLElBM0JXbm1FLEtBMkJERCxRQUFReXdCLElBQ2hCLE9BUUZ4YSxFQUFRLEVBQ1Jnd0QsRUFBWSxFQUNaem5FLEVBQVNwQyxFQUFNb0MsT0FBUyxFQUN4QjhiLEVBQVEsR0FFUixLQUFPckUsRUFBUXpYLEdBQVEsQ0FRckIsR0FQQTBuRSxFQUFZOXBFLEVBQU0ySCxRQXRETixLQXNEeUJrUyxHQUNyQ2t3RCxFQUFZL3BFLEVBQU0ySCxRQTFEVCxJQTBEeUJrUyxFQUFRLElBRXZCLElBQWZpd0QsSUFDRkEsRUFBWTlwRSxFQUFNb0MsU0FHRCxJQUFmMm5FLEdBQW9CQSxFQUFZRCxFQUFXLENBQzdDLEdBQUlELEVBMURXLEVBMkRiLE9BR0YsTUFHRjNyRCxFQUFNaFksS0FBS2xHLEVBQU15VyxNQUFNb0QsRUFBT2l3RCxJQUM5QkQsSUFDQWh3RCxFQUFRaXdELEVBQVksRUFJdEIvVCxFQUFXNzNDLEVBQU16WixLQTNFSCxNQTRFZDZrRSxFQUFhcHJELEVBQU01RSxPQUFPLEVBQUcsR0FBRyxJQUFNLEdBQ3RDTyxFQUFRLEVBQ1J6WCxFQUFTa25FLEVBQVdsbkUsT0FDcEJ5bkUsSUFDQU4sR0FBWSxFQUNaclksRUFBUSxHQUVSLEtBQU9yM0MsRUFBUXpYLEdBQVEsQ0FHckIsR0F6RlMsT0F1RlRqQixFQUFZbW9FLEVBQVcvbkUsT0FBT3NZLElBRUosQ0FHeEIsR0FGQTR2RCxFQUFVLE1BRVEsSUFBZEYsR0FDRixJQUFjLElBQVZTLEVBQ0YsWUFHRjlZLEVBQU1ockQsS0FBS3FqRSxHQUNYQSxHQUFZLEVBR2RTLEdBQVEsT0FDSCxHQXZHRSxNQXVHRTdvRSxFQUNUc29FLEdBQVUsRUFDVkYsRUFBWUEsR0E1RkssVUE2RlosR0F4R0csTUF3R0Nwb0UsRUFFUG9vRSxFQWxHZSxTQWlHYkEsRUFoR2UsU0FrR1JFLEdBaEdNLE9BZ0dLRixFQWpHSixRQUZELFlBd0daLElBQUt0RSxFQUFXOWpFLEdBQ3JCLE9BR0YwWSxLQUdnQixJQUFkMHZELEdBQ0ZyWSxFQUFNaHJELEtBQUtxakUsR0FJYixHQUFJclksRUFBTTl1RCxPQXZIWSxFQXdIcEIsT0FJRixHQUFJOGlFLEVBQ0YsT0FBTyxFQUlUem9ELEdBQVksRUFDWm96QyxFQUFPLEdBRVArUixFQUFRdUIsRUFBSXBOLEdBQVVnTyxNQUFNLENBQzFCNS9ELEtBQU0sUUFDTitzRCxNQUFPQSxFQUNQenhDLFNBQVVvd0MsSUFHWixPQUFTcHpDLEVBQVdvdEQsR0FBVyxDQXFCN0IsSUFwQkFwK0QsRUFBT3lTLEVBQU16QixHQUNiK3NELEVBQU0sQ0FBQ3JsRSxLQUFNLFdBQVlzYixTQUFVLElBSS9CaEQsR0FDRjBtRCxFQXBKVSxNQXdKWkEsRUFBSTEzRCxHQUFNczRELE1BQU15RixFQUFLNUgsR0FFckJ4L0QsRUFBU3FKLEVBQUtySixPQUFTLEVBQ3ZCeVgsRUFBUSxFQUNSc0UsRUFBUSxHQUNSdXJELEVBQU8sR0FDUEMsR0FBVyxFQUNYbi9DLEVBQVEsS0FDUm8vQyxFQUFVLEtBRUgvdkQsRUFBUXpYLEdBR2IsR0FwS00sUUFrS05qQixFQUFZc0ssRUFBS2xLLE9BQU9zWSxLQXBLaEIsTUFzS21CMVksRUFBM0IsQ0FXQSxHQUFrQixLQUFkQSxHQW5MRyxNQW1MaUJBLEVBQ3RCLEdBQUl3b0UsRUFDRnhHLEVBQUloaUUsT0FDQyxDQUNMLEdBQUlBLEdBQWF5b0UsRUFBUyxDQUN4QnpyRCxHQUFTaGQsRUFDVDBZLElBQ0EsVUFHRzZ2RCxJQUFRdm9FLEdBQWV3b0UsSUFDMUI1VCxFQUFXMlQsRUFFUHZyRCxFQUFNL2IsT0FBUyxJQUNiakIsR0FDRjQwRCxHQUFZNTNDLEVBQU0xSCxNQUFNLEVBQUcwSCxFQUFNL2IsT0FBUyxHQUMxQytiLEVBQVFBLEVBQU01YyxPQUFPNGMsRUFBTS9iLE9BQVMsS0FFcEMyekQsR0FBWTUzQyxFQUNaQSxFQUFRLEtBSVpDLEVBQU0ra0QsRUFBSS9rRCxNQUVWK2tELEVBQUlwTixFQUFKb04sQ0FBYyxDQUNaaC9ELEtBQU0sWUFDTnNiLFNBL0xENWIsS0ErTGdCMCtELGVBQWVtSCxFQUFNdHJELElBQ25Db3JELElBR0xyRyxFQUFJaGxELEVBQVFoZCxHQUVaZ2QsRUFBUSxHQUNSdXJELEVBQU8sUUFlVCxHQVpJdnJELElBQ0Z1ckQsR0FBUXZyRCxFQUNSQSxFQUFRLElBR1Z1ckQsR0FBUXZvRSxFQWhPRSxPQWtPTkEsR0FBNkIwWSxJQUFVelgsRUFBUyxJQUNsRHNuRSxHQUFRaitELEVBQUtsSyxPQUFPc1ksRUFBUSxHQUM1QkEsS0FuT0csTUFzT0QxWSxFQUFzQixDQUd4QixJQUZBcXBCLEVBQVEsRUFFRC9lLEVBQUtsSyxPQUFPc1ksRUFBUSxLQUFPMVksR0FDaEN1b0UsR0FBUXZvRSxFQUNSMFksSUFDQTJRLElBR0dvL0MsRUFFTXAvQyxHQUFTby9DLElBQ2xCQSxFQUFVLEdBRlZBLEVBQVVwL0MsRUFPaEJtL0MsR0FBVyxFQUNYOXZELFNBN0VNNnZELEVBQ0Z2ckQsR0FBU2hkLEVBRVRnaUUsRUFBSWhpRSxHQUdOMFksSUEyRUM0QyxHQUNIMG1ELEVBeFBVLEtBd1BNbUcsR0FJcEIsT0FBTzFILEksNkJDdFFULElBQUkxNkQsRUFBTyxFQUFRLElBQ2ZnVixFQUFVLEVBQVEsSUFDbEIrdEQsRUFBb0IsRUFBUSxJQUM1QnBFLEVBQVksRUFBUSxJQUV4Qi9tRSxFQUFPRCxRQVNQLFNBQW1Cc2tFLEVBQUtuakUsRUFBT2tsRSxHQUM3QixJQVFJem9ELEVBQ0FzNUMsRUFDQTUwRCxFQUNBc2YsRUFDQXJDLEVBWEE3QixFQURPMVksS0FDU0QsUUFDaEIwd0IsRUFBYS9YLEVBQVMrWCxXQUN0QkQsRUFBTTlYLEVBQVM4WCxJQUNmcEssRUFKT3BtQixLQUlXczlELGdCQUNsQm4zQyxFQUxPbm1CLEtBS2FtOUQsbUJBQ3BCbm5ELEVBQVE3WixFQUFNMkgsUUFkSixNQWVWdkYsRUFBU3BDLEVBQU1vQyxPQU9uQixLQUFPeVgsRUFBUXpYLEdBQVEsQ0FFckIsSUFBZSxJQUFYeVgsRUFBYyxDQUNoQkEsRUFBUXpYLEVBQ1IsTUFJRixHQTlCWSxPQThCUnBDLEVBQU11QixPQUFPc1ksRUFBUSxHQUN2QixNQUtGLEdBQUl5YSxFQUFZLENBSWQsSUFIQTdULEVBQU8sRUFDUGhFLEVBQVc1QyxFQUFRLEVBRVo0QyxFQUFXcmEsR0FBUSxDQUd4QixHQTFDSSxRQXdDSmpCLEVBQVluQixFQUFNdUIsT0FBT2tiLElBRUEsQ0FDdkJnRSxFQXhDSyxFQXlDTCxNQUNLLEdBNUNELE1BNENLdGYsRUFHVCxNQUZBc2YsSUFLRmhFLElBR0YsR0FBSWdFLEdBbkRLLEVBbURhLENBQ3BCNUcsRUFBUTdaLEVBQU0ySCxRQXhETixLQXdEeUJrUyxFQUFRLEdBQ3pDLFVBUUosR0FKQWs4QyxFQUFXLzFELEVBQU15VyxNQUFNb0QsRUFBUSxHQUkzQmdzRCxFQUFVNzdDLEVBQWNDLEVBekRuQnBtQixLQXlEcUMsQ0FBQ3MvRCxFQUFLcE4sR0FBVSxJQUM1RCxNQU1GLEdBQ0U5ckMsRUFBVzhDLEtBQUs3dEIsS0FqRVQyRSxLQWlFb0JzL0QsRUFBS3BOLEdBQVUsS0FqRW5DbHlELEtBbUVBMDhELFFBQ0xqc0MsR0FDQ0QsSUFBUW5ZLEVBQVFoVixFQUFLdU4sS0FBS3NoRCxHQUFVeDBELE9BQU8sS0FHOUMsTUFNRixHQUhBa2IsRUFBVzVDLEdBR0ksS0FGZkEsRUFBUTdaLEVBQU0ySCxRQXBGRixLQW9GcUJrUyxFQUFRLEtBRWtCLEtBQXZDM1MsRUFBS2xILEVBQU15VyxNQUFNZ0csRUFBVTVDLElBQWdCLENBQzdEQSxFQUFRNEMsRUFDUixPQU1KLEdBRkFzNUMsRUFBVy8xRCxFQUFNeVcsTUFBTSxFQUFHb0QsR0FFSCxLQUFuQjNTLEVBQUs2dUQsR0FHUCxPQUZBb04sRUFBSXBOLEdBRUcsS0FJVCxHQUFJbVAsRUFDRixPQUFPLEVBTVQsT0FIQTltRCxFQUFNK2tELEVBQUkva0QsTUFDVjIzQyxFQUFXa1UsRUFBa0JsVSxHQUV0Qm9OLEVBQUlwTixFQUFKb04sQ0FBYyxDQUNuQmgvRCxLQUFNLFlBQ05zYixTQXRHUzViLEtBc0dNMCtELGVBQWV4TSxFQUFVMzNDLE8sNkJDckg1QyxJQUFJOHJELEVBQVMsRUFBUSxLQUtyQixTQUFTanNCLEVBQU9rbEIsRUFBS25qRSxFQUFPa2xFLEdBQzFCLElBQ0kvakUsRUFDQXlMLEVBRUosR0FBd0IsT0FBcEI1TSxFQUFNdUIsT0FBTyxLQUNmSixFQUFZbkIsRUFBTXVCLE9BQU8sSUFFZSxJQVAvQnNDLEtBT0FvNkMsT0FBT3QyQyxRQUFReEcsSUFFdEIsUUFBSStqRSxJQUtGdDRELEVBRGdCLE9BQWR6TCxFQUNLLENBQUNnRCxLQUFNLFNBRVAsQ0FDTEEsS0FBTSxPQUNObkUsTUFBT21CLEdBSUpnaUUsRUFBSSxLQUFPaGlFLEVBQVhnaUUsQ0FBc0J2MkQsSUExQm5DOU4sRUFBT0QsUUFBVW8vQyxFQUNqQkEsRUFBT2tzQixRQUFVRCxHLDZCQ0hqQnByRSxFQUFPRCxRQUVQLFNBQWdCbUIsRUFBTyswQixHQUNyQixPQUFPLzBCLEVBQU0ySCxRQUFRLEtBQU1vdEIsSyw2QkNIN0IsSUFBSWt3QyxFQUFhLEVBQVEsR0FDckJ6NEMsRUFBUyxFQUFRLElBQ2pCMDlDLEVBQVMsRUFBUSxJQUVyQnByRSxFQUFPRCxRQUFVa2pFLEVBQ2pCQSxFQUFTb0ksUUFBVUQsRUFDbkJuSSxFQUFTeUIsV0FBWSxFQUVyQixJQUtJNEcsRUFEUyxVQUNjaG9FLE9BRzNCLFNBQVMyL0QsRUFBU29CLEVBQUtuakUsRUFBT2tsRSxHQUM1QixJQUNJblAsRUFDQTN6RCxFQUNBeVgsRUFDQXNFLEVBQ0FoZCxFQUNBa3BFLEVBQ0FyMUMsRUFDQTVXLEVBQ0E5UyxFQUNBMmUsRUFDQWl5QixFQUVKLEdBdEJTLE1Bc0JMbDhDLEVBQU11QixPQUFPLEdBQWpCLENBZUEsSUFYT3NDLEtBQ1BreUQsRUFBVyxHQUNYM3pELEVBQVNwQyxFQUFNb0MsT0FDZnlYLEVBQVEsRUFDUnNFLEVBQVEsR0FDUmtzRCxHQUFpQixFQUNqQnIxQyxFQUFPLEdBRVBuYixJQUNBazhDLEVBbkNTLElBcUNGbDhDLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0FHdkJvckQsRUFBVzlqRSxJQXhDTixNQXlDTEEsR0F4Q1UsTUF5Q1ZBLEdBQ2UsTUFBZEEsR0F6Q08sTUF5Q2NuQixFQUFNdUIsT0FBT3NZLEVBQVEsTUFLN0NzRSxHQUFTaGQsRUFDVDBZLElBR0YsR0FBS3NFLEVBQUwsQ0FXQSxHQVBBNlcsR0FBUTdXLEVBQ1JBLEVBQVEsR0FHUjZXLEdBREE3ekIsRUFBWW5CLEVBQU11QixPQUFPc1ksR0FFekJBLElBNURjLE1BOERWMVksRUFDRmtwRSxHQUFpQixNQUNaLENBQ0wsR0FDZ0IsTUFBZGxwRSxHQWpFUSxNQWtFUm5CLEVBQU11QixPQUFPc1ksRUFBUSxHQUVyQixPQUdGbWIsR0F2RVUsSUF3RVZuYixJQUdGLEtBQU9BLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFFckJvckQsRUFBVzlqRSxJQWhGUixNQWdGc0JBLElBSTdCZ2QsR0FBU2hkLEVBQ1QwWSxJQUtGLEdBRkExWSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUVwQnNFLEdBMUZJLE1BMEZLaGQsRUFLZCxRQUFJK2pFLElBS0o1NUQsRUFEQTBwQixHQUFRN1csRUFFUjQzQyxHQUFZL2dDLEVBQU83ekIsR0FDbkJpZCxFQUFNK2tELEVBQUkva0QsT0FDTjFTLFNBQ0owUyxFQUFJRSxTQUVBK3JELElBdkdPLFlBd0dMcjFDLEVBQUt2ZSxNQUFNLEVBQUcyekQsR0FBZXI1RCxlQUMvQnpGLEVBQVVBLEVBQVF5TyxPQUFPcXdELEdBQ3pCaHNELEVBQUkxUyxRQUFVMCtELEVBQ2Roc0QsRUFBSUUsUUFBVThyRCxHQUVkcDFDLEVBN0dPLFVBNkdTQSxHQUtwQi9LLEVBNUZPcG1CLEtBNEZXaStELGlCQTVGWGorRCxLQTZGRmkrRCxpQkFBbUIsQ0FBQ25rRCxLQUFNc00sRUFBV3RNLE1BRTFDdStCLEVBL0ZPcjRDLEtBK0ZLaTlELFlBRVp4MUQsRUFqR096SCxLQWlHUTArRCxlQUFlajNELEVBQVM4UyxHQWpHaEN2YSxLQW1HRmkrRCxpQkFBbUI3M0MsRUFDeEJpeUIsSUFFT2luQixFQUFJcE4sRUFBSm9OLENBQWMsQ0FDbkJoL0QsS0FBTSxPQUNOcXVCLE1BQU8sS0FDUHhaLElBQUt3VCxFQUFPd0ksRUFBTSxDQUFDdlgsZUFBZSxJQUNsQ2dDLFNBQVVuVSxTLDZCQzVJZCxJQUFJa2hCLEVBQVMsRUFBUSxJQUNqQnk0QyxFQUFhLEVBQVEsR0FDckJpRixFQUFTLEVBQVEsS0FFckJwckUsRUFBT0QsUUFBVW1hLEVBQ2pCQSxFQUFJbXhELFFBQVVELEVBQ2RseEQsRUFBSXdxRCxXQUFZLEVBRWhCLElBV0k4RyxFQUFZLENBSkksVUFDQyxXQUNDLFdBUWxCQyxFQUFtQkQsRUFBVWxvRSxPQUVqQyxTQUFTNFcsRUFBSW1xRCxFQUFLbmpFLEVBQU9rbEUsR0FDdkIsSUFDSW5QLEVBQ0F6cUQsRUFDQW5LLEVBQ0EwWSxFQUNBNEMsRUFDQSt0RCxFQUNBeDVELEVBQ0E1TyxFQUNBK2IsRUFDQXNzRCxFQUNBQyxFQUNBeHVCLEVBRUosR0FkV3I0QyxLQWNERCxRQUFReXdCLElBQWxCLENBUUEsSUFKQTBoQyxFQUFXLEdBQ1hsOEMsR0FBUyxFQUNUelgsRUFBU21vRSxJQUVBMXdELEVBQVF6WCxHQUlmLEdBSEFvb0UsRUFBV0YsRUFBVXp3RCxJQUNyQjdJLEVBQVFoUixFQUFNeVcsTUFBTSxFQUFHK3pELEVBQVNwb0UsU0FFdEIyTyxnQkFBa0J5NUQsRUFBVSxDQUNwQ3pVLEVBQVcva0QsRUFDWCxNQUlKLEdBQUsra0QsRUFBTCxDQVNBLElBTEFsOEMsRUFBUWs4QyxFQUFTM3pELE9BQ2pCQSxFQUFTcEMsRUFBTW9DLE9BQ2YrYixFQUFRLEdBQ1Jzc0QsRUFBYSxFQUVONXdELEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFFckJvckQsRUFBVzlqRSxJQTVEUixNQTREc0JBLEtBS2IsTUFBZEEsR0FDYyxNQUFkQSxHQUNjLE1BQWRBLEdBQ2MsTUFBZEEsR0FDYyxNQUFkQSxHQUNjLE1BQWRBLEdBQ2MsTUFBZEEsR0FDYyxNQUFkQSxJQUVBdXBFLEVBQWdCMXFFLEVBQU11QixPQUFPc1ksRUFBUSxNQUVmb3JELEVBQVd5RixNQTlFcEIsTUFtRlh2cEUsR0FyRmEsTUFxRmlCQSxHQUNoQ3NwRSxJQW5GYyxNQXNGWnRwRSxHQXhGYyxNQXdGaUJBLE9BQ2pDc3BFLEVBRWlCLEtBS25CdHNELEdBQVNoZCxFQUNUMFksSUFHRixHQUFLc0UsRUFBTCxDQU9BLEdBRkE3UyxFQURBeXFELEdBQVk1M0MsRUFoR1EsWUFtR2hCcXNELEVBQThCLENBR2hDLElBQWtCLEtBRmxCL3RELEVBQVcwQixFQUFNeFcsUUF4R0wsT0EwR1c4VSxJQUFhcmEsRUFBUyxFQUMzQyxPQUdGa0osRUFBVUEsRUFBUXlPLE9BMUdBLFVBMEd1QjNYLFFBSTNDLFFBQUk4aUUsSUFJSmhwQixFQXZHV3I0QyxLQXVHQ2k5RCxZQUNaeDFELEVBeEdXekgsS0F3R0kwK0QsZUFBZWozRCxFQUFTNjNELEVBQUkva0QsT0FDM0M4OUIsSUFFT2luQixFQUFJcE4sRUFBSm9OLENBQWMsQ0FDbkJoL0QsS0FBTSxPQUNOcXVCLE1BQU8sS0FDUHhaLElBQUt3VCxFQUFPdXBDLEVBQVUsQ0FBQ3Q0QyxlQUFlLElBQ3RDZ0MsU0FBVW5VLFUsNkJDM0lkeE0sRUFBT0QsUUFJUCxTQUFnQm1CLEVBQU8rMEIsR0FDckIsSUFHSXRZLEVBSEFyYSxFQUFTa29FLEVBQVVsb0UsT0FDbkJ5WCxHQUFTLEVBQ1RxTixHQUFPLEVBR1gsSUFBS3JqQixLQUFLRCxRQUFReXdCLElBQ2hCLE9BQVEsRUFHVixPQUFTeGEsRUFBUXpYLElBR0csS0FGbEJxYSxFQUFXemMsRUFBTTJILFFBQVEyaUUsRUFBVXp3RCxHQUFRa2IsTUFFbkJ0WSxFQUFXeUssSUFBZ0IsSUFBVEEsS0FDeENBLEVBQU16SyxHQUlWLE9BQU95SyxHQXBCVCxJQUFJb2pELEVBQVksQ0FBQyxXQUFZLFVBQVcsWSw2QkNGeEMsSUFBSW5VLEVBQWUsRUFBUSxJQUN2QitULEVBQVMsRUFBUSxJQUNqQnprRSxFQUFNLEVBQVEsSUFBZ0JBLElBRWxDM0csRUFBT0QsUUFBVThyRSxFQUNqQkEsRUFBV1IsUUFBVUQsRUFFckIsSUFBSVUsRUFBNEIsUUFDNUJDLEVBQTZCLFVBRWpDLFNBQVNGLEVBQVd4SCxFQUFLbmpFLEVBQU9rbEUsR0FDOUIsSUFFSS9qRSxFQUNBNDBELEVBRkEzekQsRUFBU3BDLEVBQU1vQyxPQUluQixLQUF3QixNQUFwQnBDLEVBQU11QixPQUFPLElBQWNhLEVBQVMsS0FJeENqQixFQUFZbkIsRUFBTXVCLE9BQU8sSUFHdEI0MEQsRUFBYWgxRCxJQUNBLE1BQWRBLEdBQ2MsTUFBZEEsR0FDYyxNQUFkQSxLQUtGNDBELEVBQVcvMUQsRUFBTWdSLE1BQU12TCxLQU92QixRQUFJeS9ELElBSUpuUCxFQUFXQSxFQUFTLElBL0JUbHlELEtBaUNENDhELFFBQVVtSyxFQUEwQnZwRSxLQUFLMDBELEdBakN4Q2x5RCxLQWtDSjQ4RCxRQUFTLEVBbENMNThELEtBbUNLNDhELFFBQVVvSyxFQUEyQnhwRSxLQUFLMDBELEtBbkMvQ2x5RCxLQW9DSjQ4RCxRQUFTLEdBR1QwQyxFQUFJcE4sRUFBSm9OLENBQWMsQ0FBQ2gvRCxLQUFNLE9BQVFuRSxNQUFPKzFELE8sNkJDbEQ3QyxJQUFJa1AsRUFBYSxFQUFRLEdBQ3JCaUYsRUFBUyxFQUFRLElBRXJCcHJFLEVBQU9ELFFBQVVtMkIsRUFDakJBLEVBQUttMUMsUUFBVUQsRUFFZixJQUFJdnJELEVBQU0sR0FBRy9kLGVBZVRrcUUsRUFBZSxDQUVuQixJQVBxQixJQVFyQixJQVBxQixLQVdqQkMsRUFBMEIsR0FNOUIsU0FBUy8xQyxFQUFLbXVDLEVBQUtuakUsRUFBT2tsRSxHQUN4QixJQU9JOEYsRUFDQXhnRCxFQUNBby9DLEVBQ0FWLEVBQ0FDLEVBQ0FKLEVBQ0FrQyxFQUNBNUUsRUFDQTZFLEVBQ0E1L0QsRUFDQWs2RCxFQUNBcGpFLEVBQ0Fvd0IsRUFDQTdtQixFQUNBd1MsRUFDQW5GLEVBQ0FvRixFQUNBODlCLEVBQ0F0dkMsRUF4QkFtcEQsRUFBVyxHQUNYbDhDLEVBQVEsRUFDUjFZLEVBQVluQixFQUFNdUIsT0FBTyxHQUN6Qml6QixFQUpPM3dCLEtBSVNELFFBQVE0d0IsU0FDeEJGLEVBTE96d0IsS0FLV0QsUUFBUTB3QixXQUMxQkQsRUFOT3h3QixLQU1JRCxRQUFReXdCLElBNkJ2QixHQVBrQixNQUFkbHpCLElBQ0YrcEUsR0FBVSxFQUNWblYsRUFBVzUwRCxFQUNYQSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxJQXpEVixNQTZEZjFZLElBTUMrcEUsSUF6Q01ybkUsS0F5Q1U0OEQsUUFBckIsQ0FnQkEsSUFaQTFLLEdBQVk1MEQsRUFDWmdkLEVBQVEsR0FDUnRFLElBR0F6WCxFQUFTcEMsRUFBTW9DLE9BRWZ1SixFQUFRLEdBRFJ5UyxFQUFNK2tELEVBQUkva0QsT0FHTjFTLFFBQVVtTyxFQUNkdUUsRUFBSUUsUUFBVXpFLEVBRVBBLEVBQVF6WCxHQUFRLENBSXJCLEdBRkEybUUsRUFEQTVuRSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQTlFaEIsTUFpRkwxWSxFQUFzQixDQUl4QixJQUZBcXBCLEVBQVEsRUFuRkQsTUFxRkF4cUIsRUFBTXVCLE9BQU9zWSxFQUFRLElBQzFCa3ZELEdBQVk1bkUsRUFDWjBZLElBQ0EyUSxJQUdHby9DLEVBRU1wL0MsR0FBU28vQyxJQUNsQkEsRUFBVSxHQUZWQSxFQUFVcC9DLE9BSVAsR0F2R08sT0F1R0hycEIsRUFFVDBZLElBQ0FrdkQsR0FBWS9vRSxFQUFNdUIsT0FBT3NZLFFBS3BCLEdBQU0rdkQsSUFBV3YxQyxHQTlHUCxNQThHZWx6QixHQUV6QixLQUFNeW9FLEdBQVd2MUMsSUEvR04sTUErR2NsekIsRUFBK0IsQ0FDN0QsSUFBSXdLLEVBRUcsQ0FHTCxJQUFLNm9CLEVBQ0gsS0FBTzNhLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksRUFBUSxHQUU1Qm9yRCxFQUFXOWpFLEtBSWhCNG5FLEdBQVk1bkUsRUFDWjBZLElBSUosR0FqSVcsTUFpSVA3WixFQUFNdUIsT0FBT3NZLEVBQVEsR0FDdkIsT0FHRmt2RCxHQXJJVyxJQXNJWGlDLEdBQVMsRUFDVG54RCxJQUVBLE1BekJBbE8sVUFIRkEsSUFnQ0Z3UyxHQUFTNHFELEVBQ1RBLEVBQVcsR0FDWGx2RCxJQUlGLEdBQUtteEQsRUFBTCxDQVNBLElBTEExL0QsRUFBVTZTLEVBQ1Y0M0MsR0FBWTUzQyxFQUFRNHFELEVBQ3BCbHZELElBR09BLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksR0FFcEJvckQsRUFBVzlqRSxLQUloQjQwRCxHQUFZNTBELEVBQ1owWSxJQVNGLEdBTEExWSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUN6QndzRCxFQUFVL3hDLEVBQWF5MkMsRUFBMEJELEVBQ2pEM3NELEVBQVEsR0FDUitxRCxFQUFZblQsRUF6S0gsTUEyS0w1MEQsRUFBb0IsQ0FJdEIsSUFIQTBZLElBQ0FxdkQsR0E3S08sSUErS0FydkQsRUFBUXpYLEdBOUtSLE9BK0tMakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0FESixDQU9yQixHQUFJeWEsR0FBNEIsT0FBZG56QixFQUNoQixPQUdGZ2QsR0FBU2hkLEVBQ1QwWSxJQUdGLEdBN0xPLE1BNkxIN1osRUFBTXVCLE9BQU9zWSxHQUNmLE9BR0ZrOEMsR0FsTU8sSUFrTVk1M0MsRUFqTVosSUFrTVBuRixFQUFNbUYsRUFDTnRFLFFBQ0ssQ0FJTCxJQUhBMVksRUFBWSxLQUNaNG5FLEVBQVcsR0FFSmx2RCxFQUFRelgsSUFDYmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLElBRXJCa3ZELElBQVlwcUQsRUFBSXpmLEtBQUttbkUsRUFBU2xsRSxLQUhiLENBT3JCLEdBQUk4akUsRUFBVzlqRSxHQUFZLENBQ3pCLElBQUtxekIsRUFDSCxNQUdGdTBDLEdBQVk1bkUsTUFDUCxDQUNMLEdBek5XLE1BeU5QQSxFQUNGd0ssU0FDSyxHQTFOSyxNQTBORHhLLEVBQTZCLENBQ3RDLEdBQWMsSUFBVndLLEVBQ0YsTUFHRkEsSUFHRndTLEdBQVM0cUQsRUFDVEEsRUFBVyxHQXZPRCxPQXlPTjVuRSxJQUNGZ2QsR0ExT1EsS0EyT1JoZCxFQUFZbkIsRUFBTXVCLFNBQVNzWSxJQUc3QnNFLEdBQVNoZCxFQUdYMFksSUFJRmIsRUFBTW1GLEVBQ050RSxHQUZBazhDLEdBQVk1M0MsR0FFSy9iLE9BTW5CLElBRkErYixFQUFRLEdBRUR0RSxFQUFRelgsSUFDYmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBRXBCb3JELEVBQVc5akUsS0FJaEJnZCxHQUFTaGQsRUFDVDBZLElBT0YsR0FKQTFZLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBQ3pCazhDLEdBQVk1M0MsRUFHUkEsR0FBU1EsRUFBSXpmLEtBQUttbkUsRUFBU2xsRSxHQVk3QixHQVhBMFksSUFDQWs4QyxHQUFZNTBELEVBQ1pnZCxFQUFRLEdBQ1JxbkQsRUFBU2EsRUFBUWxsRSxHQUNqQmdvRSxFQUFjcFQsRUFPVnpoQyxFQUFZLENBQ2QsS0FBT3phLEVBQVF6WCxJQUNiakIsRUFBWW5CLEVBQU11QixPQUFPc1ksTUFFUDJyRCxHQTNSUixPQStSTnJrRSxJQUNGZ2QsR0FoU1EsS0FpU1JoZCxFQUFZbkIsRUFBTXVCLFNBQVNzWSxJQUc3QkEsSUFDQXNFLEdBQVNoZCxFQUtYLElBRkFBLEVBQVluQixFQUFNdUIsT0FBT3NZLE1BRVAyckQsRUFDaEIsT0FPRixJQUpBaHpDLEVBQVFyVSxFQUNSNDNDLEdBQVk1M0MsRUFBUWhkLEVBQ3BCMFksSUFFT0EsRUFBUXpYLElBQ2JqQixFQUFZbkIsRUFBTXVCLE9BQU9zWSxHQUVwQm9yRCxFQUFXOWpFLEtBSWhCNDBELEdBQVk1MEQsRUFDWjBZLFNBS0YsSUFGQWt2RCxFQUFXLEdBRUpsdkQsRUFBUXpYLEdBQVEsQ0FHckIsSUFGQWpCLEVBQVluQixFQUFNdUIsT0FBT3NZLE1BRVAyckQsRUFDWnlGLElBQ0Y5c0QsR0FBU3FuRCxFQUFTdUQsRUFDbEJBLEVBQVcsSUFHYmtDLEdBQVksT0FDUCxHQUFLQSxFQUVMLElBdlVLLE1BdVVEOXBFLEVBQTZCLENBQ3RDNDBELEdBQVk1M0MsRUFBUXFuRCxFQUFTdUQsRUFDN0J2MkMsRUFBUXJVLEVBQ1IsTUFDUzhtRCxFQUFXOWpFLEdBQ3BCNG5FLEdBQVk1bkUsR0FFWmdkLEdBQVNxbkQsRUFBU3VELEVBQVc1bkUsRUFDN0I0bkUsRUFBVyxHQUNYa0MsR0FBWSxRQVZaOXNELEdBQVNoZCxFQWFYMFksSUFLTixHQXhWa0IsTUF3VmQ3WixFQUFNdUIsT0FBT3NZLEdBS2pCLFFBQUlxckQsSUFJSm5QLEdBaldrQixJQW1XbEIvOEMsRUE1VVduVixLQTRVQTJvQixPQUFPaGEsSUE1VVAzTyxLQTRVZ0J1OEQsU0FBU3BuRCxHQUFNbXFELEVBQUkrRixHQUFXN25FLE9BQU91VSxJQUFLLENBQUM2SCxlQUFlLElBRWpGK1UsSUFDRjIyQyxFQUFjaEcsRUFBSWdHLEdBQWE5bkUsT0FBT3VVLElBQ3RDNGMsRUFoVlMzdUIsS0FnVkkyb0IsT0FBT2hhLElBaFZYM08sS0FnVm9CdThELFNBQVM1dEMsR0FBUTIyQyxJQUdoRHY4RCxFQUFPLENBQ0x6SSxLQUFNK21FLEVBQVUsUUFBVSxPQUMxQjE0QyxNQUFPQSxHQUFTLEtBQ2hCeFosSUFBS0EsR0FHSGt5RCxFQUNGdCtELEVBQUtrNUMsSUExVklqaUQsS0EwVk8yb0IsT0FBT2hhLElBMVZkM08sS0EwVnVCdThELFNBQVM5MEQsR0FBVThTLElBQVEsTUFFM0Q4OUIsRUE1VlNyNEMsS0E0VkdpOUQsWUFDWmwwRCxFQUFLNlMsU0E3Vkk1YixLQTZWWTArRCxlQUFlajNELEVBQVM4UyxHQUM3Qzg5QixLQUdLaW5CLEVBQUlwTixFQUFKb04sQ0FBY3YyRCxNQXRXdkJtK0QsRUFkcUIsU0FlckJBLEVBZHFCLFNBZXJCQSxFQXJCbUIsS0FDQyxLLDZCQ1pwQixJQUFJOUYsRUFBYSxFQUFRLEdBQ3JCaUYsRUFBUyxFQUFRLElBQ2pCL3lELEVBQVksRUFBUSxJQUV4QnJZLEVBQU9ELFFBQVVrZSxFQUNqQkEsRUFBVW90RCxRQUFVRCxFQWFwQixTQUFTbnRELEVBQVVvbUQsRUFBS25qRSxFQUFPa2xFLEdBQzdCLElBUUk1NUQsRUFDQTA5RCxFQUNBNXFELEVBQ0F4UixFQUNBc3ZDLEVBQ0EvOUIsRUFDQWd0RCxFQUNBeC9ELEVBZEF4SyxFQUFZbkIsRUFBTXVCLE9BQU8sR0FDekJzWSxFQUFRLEVBQ1J6WCxFQUFTcEMsRUFBTW9DLE9BQ2YyekQsRUFBVyxHQUNYcVYsRUFBUSxHQUNSam5FLEVBbEJPLE9BbUJQa25FLEVBaEJ3QixXQWlDNUIsR0FOa0IsTUFBZGxxRSxJQUNGZ0QsRUE5QlUsUUErQlZpbkUsRUFBUWpxRSxFQUNSQSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxJQXpCVixNQTRCZjFZLEVBQUosQ0FTQSxHQUxBMFksSUFDQXV4RCxHQUFTanFFLEVBQ1RnZCxFQUFRLEdBOUJHdGEsS0FpQ0ZELFFBQVEyd0IsV0F2Q0wsTUF1Q2tCdjBCLEVBQU11QixPQUFPc1ksR0FBb0IsQ0FHN0QsR0EvQ1UsVUErQ04xVixFQUNGLE9BR0ZpbkUsR0E5Q1UsSUErQ1Z2eEQsSUFDQTFWLEVBcERhLFdBMERmLElBRkF3SCxFQUFRLEVBRURrTyxFQUFRelgsR0FBUSxDQUdyQixHQXZEaUIsT0FxRGpCakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFHdkJzeEQsR0FBWSxFQUNaeC9ELFNBQ0ssR0F6RFcsTUF5RFB4SyxFQUErQixDQUN4QyxJQUFLd0ssRUFDSCxNQUdGQSxJQWhFWSxPQW1FVnhLLElBQ0ZnZCxHQXBFWSxLQXFFWmhkLEVBQVluQixFQUFNdUIsU0FBU3NZLElBRzdCc0UsR0FBU2hkLEVBQ1QwWSxJQU9GLEdBSkFrOEMsRUFBVzUzQyxFQUNYN1MsRUFBVTZTLEVBM0VVLE9BNEVwQmhkLEVBQVluQixFQUFNdUIsT0FBT3NZLElBRXpCLENBUUEsSUFKQUEsSUFDQWs4QyxHQUFZNTBELEVBQ1pnZCxFQUFRLEdBRUR0RSxFQUFRelgsSUFDYmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBRXBCb3JELEVBQVc5akUsS0FJaEJnZCxHQUFTaGQsRUFDVDBZLElBTUYsR0FIQTFZLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBeEdWLGFBMkdYMVYsR0FyR2UsTUFxR1FoRCxFQUE4QixDQUt2RCxJQUpBNm5FLEVBQWEsR0FDYjdxRCxHQUFTaGQsRUFDVDBZLElBRU9BLEVBQVF6WCxHQTFHRSxPQTJHZmpCLEVBQVluQixFQUFNdUIsT0FBT3NZLEtBMUdULE1BNEdvQjFZLEdBOUd4QixPQWtIUkEsSUFDRjZuRSxHQW5IVSxLQW9IVjduRSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxJQUc3Qm12RCxHQUFjN25FLEVBQ2QwWSxJQXRIZ0IsT0F5SGxCMVksRUFBWW5CLEVBQU11QixPQUFPc1ksS0FHdkJ3eEQsRUFBZ0JyQyxFQWhJSSxPQURLLFlBa0l6QjdxRCxHQUFTNnFELEVBQWE3bkUsRUFDdEIwWSxLQUVBbXZELEVBQWEsR0FHZmpULEdBQVk1M0MsRUFDWkEsRUFBUSxPQUNILENBQ0wsSUFBSzdTLEVBQ0gsT0FHRjA5RCxFQUFhMTlELEVBSWYsR0FsSndCLFNBa0pwQisvRCxJQUF5Q0YsRUFNN0MsT0FGQXBWLEVBQVdxVixFQUFRclYsRUEzSlIsU0E2SlA1eEQsR0FqSk9OLEtBaUppQjQ4RCxPQUNuQixPQUlMeUUsSUFoS1csYUFvS1gvZ0UsSUFBaUQsSUFBMUJtSCxFQUFRM0QsUUFBUSxLQUNsQ3c3RCxFQUFJcE4sRUFBSm9OLENBQWMsQ0FDbkJoL0QsS0FBTSxXQUNOc2IsU0FBVTViLEtBQUswK0QsZUFBZWozRCxFQUFTNjNELEVBQUkva0QsV0FJL0NBLEVBQU0ra0QsRUFBSS9rRCxPQUNOMVMsUUFBVTAvRCxFQUFNaHBFLE9BQ3BCZ2MsRUFBSUUsUUFBVThzRCxFQUFNaHBFLE9BR3BCd0ssRUFBTyxDQUNMekksS0FBTUEsRUFBTyxZQUNiNmtFLFdBQVk3eEQsRUFKZDZ4RCxFQTNLd0IsU0EyS1hxQyxFQUF3Q3JDLEVBQWExOUQsSUFoTHZELFNBdUxQbkgsR0F0TFEsVUFzTFdBLElBQ3JCeUksRUFBS3krRCxjQUFnQkEsR0F4TFosU0EyTFBsbkUsR0FDRiszQyxFQWhMU3I0QyxLQWdMR2k5RCxZQUNabDBELEVBQUs2UyxTQWpMSTViLEtBaUxZMCtELGVBQWVqM0QsRUFBUzhTLEdBQzdDODlCLEtBN0xVLFVBOExELzNDLElBQ1R5SSxFQUFLazVDLElBcExJamlELEtBb0xPMm9CLE9BQU9oYSxJQXBMZDNPLEtBb0x1QnU4RCxTQUFTOTBELEdBQVU4UyxJQUFRLE1BR3REK2tELEVBQUlwTixFQUFKb04sQ0FBY3YyRCxTLDZCQzFNdkIsSUFBSTFGLEVBQU8sRUFBUSxJQUNmKzlELEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUVyQnByRSxFQUFPRCxRQUFVbWpFLEVBQ2pCQSxFQUFPbUksUUFBVUQsRUFLakIsU0FBU2xJLEVBQU9tQixFQUFLbmpFLEVBQU9rbEUsR0FDMUIsSUFHSTltRCxFQUNBb1csRUFDQWd4QyxFQUNBcm5ELEVBQ0E0M0MsRUFDQTN6RCxFQUNBa2IsRUFSQXpELEVBQVEsRUFDUjFZLEVBQVluQixFQUFNdUIsT0FBT3NZLEdBUzdCLEtBZmUsTUFnQloxWSxHQWZjLE1BZWNBLEdBQzdCbkIsRUFBTXVCLFNBQVNzWSxLQUFXMVksSUFLNUJxekIsRUFsQlczd0IsS0FrQktELFFBQVE0d0IsU0FFeEJ1aEMsR0FEQXlQLEVBQVNya0UsR0FDV3FrRSxFQUNwQnBqRSxFQUFTcEMsRUFBTW9DLE9BQ2Z5WCxJQUNBc0UsRUFBUSxHQUNSaGQsRUFBWSxHQUVScXpCLEdBQVl5d0MsRUFBV2psRSxFQUFNdUIsT0FBT3NZLE1BSXhDLEtBQU9BLEVBQVF6WCxHQUFRLENBSXJCLEdBSEFrYixFQUFPbmMsS0FDUEEsRUFBWW5CLEVBQU11QixPQUFPc1ksTUFHVDJyRCxHQUNkeGxFLEVBQU11QixPQUFPc1ksRUFBUSxLQUFPMnJELEdBQzFCaHhDLEdBQWF5d0MsRUFBVzNuRCxNQUUxQm5jLEVBQVluQixFQUFNdUIsT0FBT3NZLEVBQVEsTUFFZjJyRCxFQUFRLENBQ3hCLElBQUt0K0QsRUFBS2lYLEdBQ1IsT0FJRixRQUFJK21ELEtBSUo5bUQsRUFBTStrRCxFQUFJL2tELE9BQ04xUyxRQUFVLEVBQ2QwUyxFQUFJRSxRQUFVLEVBRVA2a0QsRUFBSXBOLEVBQVc1M0MsRUFBUTQzQyxFQUF2Qm9OLENBQWlDLENBQ3RDaC9ELEtBQU0sU0FDTnNiLFNBekRHNWIsS0F5RFkwK0QsZUFBZXBrRCxFQUFPQyxNQUt0Q29XLEdBQTBCLE9BQWRyekIsSUFDZmdkLEdBQVNoZCxFQUNUQSxFQUFZbkIsRUFBTXVCLFNBQVNzWSxJQUc3QnNFLEdBQVNoZCxFQUNUMFksTyw2QkMvRUovYSxFQUFPRCxRQUVQLFNBQWdCbUIsRUFBTyswQixHQUNyQixJQUFJdTJDLEVBQVd0ckUsRUFBTTJILFFBQVEsS0FBTW90QixHQUMvQncyQyxFQUFhdnJFLEVBQU0ySCxRQUFRLEtBQU1vdEIsR0FFckMsSUFBb0IsSUFBaEJ3MkMsRUFDRixPQUFPRCxFQUdULElBQWtCLElBQWRBLEVBQ0YsT0FBT0MsRUFHVCxPQUFPQSxFQUFhRCxFQUFXQyxFQUFhRCxJLDZCQ2Q5QyxJQUFJcGtFLEVBQU8sRUFBUSxJQUNmc2tFLEVBQU8sRUFBUSxLQUNmdkcsRUFBYSxFQUFRLEdBQ3JCaUYsRUFBUyxFQUFRLEtBRXJCcHJFLEVBQU9ELFFBQVVvakUsRUFDakJBLEVBQVNrSSxRQUFVRCxFQUtuQixTQUFTakksRUFBU2tCLEVBQUtuakUsRUFBT2tsRSxHQUM1QixJQUdJOW1ELEVBQ0FvVyxFQUNBZ3hDLEVBQ0FybkQsRUFDQTQzQyxFQUNBM3pELEVBQ0FrYixFQVJBekQsRUFBUSxFQUNSMVksRUFBWW5CLEVBQU11QixPQUFPc1ksR0FTN0IsS0FmZSxNQWVYMVksR0FkYSxNQWNlQSxJQUloQ3F6QixFQWZXM3dCLEtBZUtELFFBQVE0d0IsU0FDeEJ1aEMsRUFBVzUwRCxFQUNYcWtFLEVBQVNya0UsRUFDVGlCLEVBQVNwQyxFQUFNb0MsT0FDZnlYLElBQ0FzRSxFQUFRLEdBQ1JoZCxFQUFZLEdBRVJxekIsR0FBWXl3QyxFQUFXamxFLEVBQU11QixPQUFPc1ksTUFJeEMsS0FBT0EsRUFBUXpYLEdBQVEsQ0FJckIsR0FIQWtiLEVBQU9uYyxLQUNQQSxFQUFZbkIsRUFBTXVCLE9BQU9zWSxNQUVQMnJELEdBQVloeEMsR0FBYXl3QyxFQUFXM25ELElBQVEsQ0FHNUQsSUFGQW5jLEVBQVluQixFQUFNdUIsU0FBU3NZLE1BRVQyckQsRUFBUSxDQUN4QixJQUFLdCtELEVBQUtpWCxJQUFVYixJQUFTa29ELEVBQzNCLE9BR0YsSUFBS2h4QyxHQTFDTSxNQTBDTWd4QyxHQUEyQmdHLEVBQUtycUUsR0FBWSxDQUMzRGdkLEdBQVNxbkQsRUFDVCxTQUlGLFFBQUlOLEtBSUo5bUQsRUFBTStrRCxFQUFJL2tELE9BQ04xUyxTQUNKMFMsRUFBSUUsU0FFRzZrRCxFQUFJcE4sRUFBVzUzQyxFQUFRcW5ELEVBQXZCckMsQ0FBK0IsQ0FDcENoL0QsS0FBTSxXQUNOc2IsU0F2REc1YixLQXVEWTArRCxlQUFlcGtELEVBQU9DLE1BSXpDRCxHQUFTcW5ELEVBR05oeEMsR0FBMEIsT0FBZHJ6QixJQUNmZ2QsR0FBU2hkLEVBQ1RBLEVBQVluQixFQUFNdUIsU0FBU3NZLElBRzdCc0UsR0FBU2hkLEVBQ1QwWSxPLDZCQ2hGSi9hLEVBQU9ELFFBT1AsU0FBdUJzQyxHQUNyQixPQUFPQyxFQUFHQyxLQUNhLGlCQUFkRixFQUF5QkcsRUFBU0gsR0FBYUEsRUFBVUksT0FBTyxLQVAzRSxJQUFJRCxFQUFXRSxPQUFPQyxhQUNsQkwsRUFBSyxNLDZCQ0hUdEMsRUFBT0QsUUFFUCxTQUFnQm1CLEVBQU8rMEIsR0FDckIsSUFBSXUyQyxFQUFXdHJFLEVBQU0ySCxRQUFRLElBQUtvdEIsR0FDOUJ3MkMsRUFBYXZyRSxFQUFNMkgsUUFBUSxJQUFLb3RCLEdBRXBDLElBQW9CLElBQWhCdzJDLEVBQ0YsT0FBT0QsRUFHVCxJQUFrQixJQUFkQSxFQUNGLE9BQU9DLEVBR1QsT0FBT0EsRUFBYUQsRUFBV0MsRUFBYUQsSSw2QkNkOUMsSUFBSXJHLEVBQWEsRUFBUSxHQUNyQmlGLEVBQVMsRUFBUSxLQUVyQnByRSxFQUFPRCxRQUFVNHNFLEVBQ2pCQSxFQUFjdEIsUUFBVUQsRUFLeEIsU0FBU3VCLEVBQWN0SSxFQUFLbmpFLEVBQU9rbEUsR0FDakMsSUFLSXJyRCxFQUNBelgsRUFDQWdjLEVBTkFqZCxFQUFZLEdBQ1p1cUUsRUFBVyxHQUNYQyxFQUFZLEdBQ1o1VixFQUFXLEdBS2YsR0FUV2x5RCxLQVVIRCxRQUFReXdCLEtBZEosTUFlVnIwQixFQUFNdUIsT0FBTyxJQWZILE1BZ0JWdkIsRUFBTXVCLE9BQU8sS0FDYjBqRSxFQUFXamxFLEVBQU11QixPQUFPLElBVzFCLElBTkFzWSxFQUFRLEVBQ1J6WCxFQUFTcEMsRUFBTW9DLFFBQ2ZnYyxFQUFNK2tELEVBQUkva0QsT0FDTjFTLFFBQVUsRUFDZDBTLEVBQUlFLFFBQVUsSUFFTHpFLEVBQVF6WCxHQUFRLENBR3ZCLEtBL0JVLE9BNkJWakIsRUFBWW5CLEVBQU11QixPQUFPc1ksS0E3QmYsTUFpQ1I2eEQsR0FDRUMsR0FBYzFHLEVBQVcwRyxJQUczQixRQUFJekcsR0FJRy9CLEVBeENBLEtBd0NhcE4sRUF4Q2IsS0F3Q0FvTixDQUFnQyxDQUNyQ2gvRCxLQUFNLFNBQ05zYixTQXZDSzViLEtBdUNVMCtELGVBQWV4TSxFQUFVMzNDLEtBSTVDMjNDLEdBQVkyVixFQUNaQyxFQUFZRCxFQUNaQSxFQUFXdnFFLEssNkJDdkRmckMsRUFBT0QsUUFFUCxTQUFnQm1CLEVBQU8rMEIsR0FDckIsT0FBTy8wQixFQUFNMkgsUUFBUSxLQUFNb3RCLEssNkJDSDdCLElBQUlrd0MsRUFBYSxFQUFRLEdBQ3JCaUYsRUFBUyxFQUFRLEtBRXJCcHJFLEVBQU9ELFFBQVUrc0UsRUFDakJBLEVBQVd6QixRQUFVRCxFQUtyQixTQUFTMEIsRUFBV3pJLEVBQUtuakUsRUFBT2tsRSxHQWM5QixJQWJBLElBSUlHLEVBQ0EwRCxFQUNBditDLEVBQ0FxaEQsRUFDQTlWLEVBQ0E1MEQsRUFDQTJxRSxFQUNBMTZELEVBWEFoUCxFQUFTcEMsRUFBTW9DLE9BQ2Z5WCxFQUFRLEVBQ1JzRSxFQUFRLEdBQ1I0dEQsRUFBWSxHQVVUbHlELEVBQVF6WCxHQWpCSixNQWtCTHBDLEVBQU11QixPQUFPc1ksSUFJakJzRSxHQXRCUyxJQXVCVHRFLElBR0YsR0FBS3NFLEVBQUwsQ0FVQSxJQU5BNDNDLEVBQVc1M0MsRUFDWDB0RCxFQUFlaHlELEVBQ2ZzRSxFQUFRLEdBQ1IvTSxFQUFPcFIsRUFBTXVCLE9BQU9zWSxHQUNwQjJRLEVBQVEsRUFFRDNRLEVBQVF6WCxHQUFRLENBWXJCLEdBWEFqQixFQUFZaVEsRUFDWkEsRUFBT3BSLEVBQU11QixPQUFPc1ksRUFBUSxHQXRDbkIsTUF3Q0wxWSxHQUNGcXBCLElBQ0F1aEQsR0FBYTVxRSxJQUVicXBCLEVBQVEsRUFDUnJNLEdBQVNoZCxHQUdQcXBCLEdBaERLLE1BZ0RJcFosRUFBaUIsQ0FDNUIsR0FBSW9aLElBQVVxaEQsRUFBYyxDQUMxQjlWLEdBQVk1M0MsRUFBUTR0RCxFQUNwQkQsR0FBUSxFQUNSLE1BR0YzdEQsR0FBUzR0RCxFQUNUQSxFQUFZLEdBR2RseUQsSUFHRixJQUFLaXlELEVBQU8sQ0FDVixHQUFJRCxFQUFlLEdBQU0sRUFDdkIsT0FHRjF0RCxFQUFRLEdBSVYsR0FBSSttRCxFQUNGLE9BQU8sRUFRVCxJQUxBRyxFQUFlLEdBQ2YwRCxFQUFXLEdBQ1gzbUUsRUFBUytiLEVBQU0vYixPQUNmeVgsR0FBUyxJQUVBQSxFQUFRelgsR0FDZmpCLEVBQVlnZCxFQUFNNWMsT0FBT3NZLEdBRXJCb3JELEVBQVc5akUsR0FDYjRuRSxHQUFZNW5FLEdBSVY0bkUsSUFDRTFELElBQ0ZBLEdBQWdCMEQsR0FHbEJBLEVBQVcsSUFHYjFELEdBQWdCbGtFLEdBR2xCLE9BQU9naUUsRUFBSXBOLEVBQUpvTixDQUFjLENBQ25CaC9ELEtBQU0sYUFDTm5FLE1BQU9xbEUsTyw2QkMzR1h2bUUsRUFBT0QsUUFFUCxTQUFnQm1CLEVBQU8rMEIsR0FDckIsT0FBTy8wQixFQUFNMkgsUUFBUSxJQUFLb3RCLEssNkJDSDVCLElBQUltMUMsRUFBUyxFQUFRLEtBRXJCcHJFLEVBQU9ELFFBQVVtdEUsRUFDakJBLEVBQVU3QixRQUFVRCxFQUlwQixTQUFTOEIsRUFBVTdJLEVBQUtuakUsRUFBT2tsRSxHQU03QixJQUxBLElBR0kvakUsRUFIQWlCLEVBQVNwQyxFQUFNb0MsT0FDZnlYLEdBQVMsRUFDVHNFLEVBQVEsS0FHSHRFLEVBQVF6WCxHQUFRLENBR3ZCLEdBQWtCLFFBRmxCakIsRUFBWW5CLEVBQU11QixPQUFPc1ksSUFFRCxDQUN0QixHQUFJQSxFQVphLEVBYWYsT0FJRixRQUFJcXJELEdBTUcvQixFQUZQaGxELEdBQVNoZCxFQUVGZ2lFLENBQVcsQ0FBQ2gvRCxLQUFNLFVBRzNCLEdBQWtCLE1BQWRoRCxFQUNGLE9BR0ZnZCxHQUFTaGQsSyw2QkNuQ2JyQyxFQUFPRCxRQUVQLFNBQWdCbUIsRUFBTyswQixHQUNyQixJQUFJbGIsRUFBUTdaLEVBQU0ySCxRQUFRLEtBQU1vdEIsR0FFaEMsS0FBT2xiLEVBQVFrYixHQUNtQixNQUE1Qi8wQixFQUFNdUIsT0FBT3NZLEVBQVEsSUFJekJBLElBR0YsT0FBT0EsSSw2QkNiVC9hLEVBQU9ELFFBRVAsU0FBY3NrRSxFQUFLbmpFLEVBQU9rbEUsR0FDeEIsSUFDSWhDLEVBQ0FqNUMsRUFDQXBRLEVBQ0F6WCxFQUNBMnpELEVBQ0F0NUMsRUFDQTRqRCxFQUNBL2dFLEVBQ0E0bkIsRUFDQTlJLEVBR0osR0FBSThtRCxFQUNGLE9BQU8sRUFHVGhDLEVBakJXci9ELEtBaUJJdytELGNBQ2ZqZ0UsRUFBUzhnRSxFQUFROWdFLE9BQ2pCNm5CLEVBbkJXcG1CLEtBbUJPaStELGlCQUNsQmpvRCxHQUFTLEVBQ1RxTixFQUFNbG5CLEVBQU1vQyxPQUVaLE9BQVN5WCxFQUFRelgsR0FHRixVQUZiOUMsRUFBTzRqRSxFQUFRcnBELEtBRVNvUSxFQUFXM3FCLE1BSW5DK2dFLEVBQVlwMkMsRUFBVzNxQixHQUFNNnFFLFVBRzNCaEgsRUFBSXo5QixLQUFLcTRCLEtBQUsscUJBQXVCeitELEVBQU8sTUFLNUIsS0FGbEJtZCxFQUFXNGpELEVBQVVuaEUsS0FwQ1oyRSxLQW9DdUI3RCxFQUFPLEtBRWhCeWMsRUFBV3lLLElBQ2hDQSxFQUFNekssSUFJVnM1QyxFQUFXLzFELEVBQU15VyxNQUFNLEVBQUd5USxHQUMxQjlJLEVBQU0ra0QsRUFBSS9rRCxNQTVDQ3ZhLEtBOENOMm9CLE9BQU91cEMsRUFBVTMzQyxHQUFLLFNBQVU5UyxFQUFTbVIsRUFBVXBhLEdBQ3REOGdFLEVBQUk5Z0UsR0FBVWlKLEVBQWQ2M0QsQ0FBdUIsQ0FDckJoL0QsS0FBTSxPQUNObkUsTUFBT3NMLFMsZ0JDckNYeE0sRUFBT0QsUUFBVSxFQUFRLElBQVIsSSw2QkNSbkIsSUFBSW90RSxFQUF1QixFQUFRLEtBRW5DLFNBQVNDLEtBQ1QsU0FBU0MsS0FDVEEsRUFBdUJDLGtCQUFvQkYsRUFFM0NwdEUsRUFBT0QsUUFBVSxXQUNmLFNBQVN3dEUsRUFBS3owRCxFQUFPMDBELEVBQVVDLEVBQWVyTyxFQUFVc08sRUFBY0MsR0FDcEUsR0FBSUEsSUFBV1IsRUFBZixDQUlBLElBQUloMkQsRUFBTSxJQUFJM1MsTUFDWixtTEFLRixNQURBMlMsRUFBSTNXLEtBQU8sc0JBQ0wyVyxHQUdSLFNBQVN5MkQsSUFDUCxPQUFPTCxFQUZUQSxFQUFLTSxXQUFhTixFQU1sQixJQUFJTyxFQUFpQixDQUNuQnQ4QixNQUFPKzdCLEVBQ1BoaUQsS0FBTWdpRCxFQUNOMWhFLEtBQU0waEUsRUFDTjFpRCxPQUFRMGlELEVBQ1I1ckUsT0FBUTRyRSxFQUNSejZELE9BQVF5NkQsRUFDUlEsT0FBUVIsRUFFUlMsSUFBS1QsRUFDTHA4QixRQUFTeThCLEVBQ1R2VixRQUFTa1YsRUFDVFUsWUFBYVYsRUFDYlcsV0FBWU4sRUFDWjkvRCxLQUFNeS9ELEVBQ05ZLFNBQVVQLEVBQ1Z4OEIsTUFBT3c4QixFQUNQdjhCLFVBQVd1OEIsRUFDWHRjLE1BQU9zYyxFQUNQUSxNQUFPUixFQUVQUyxlQUFnQmhCLEVBQ2hCQyxrQkFBbUJGLEdBS3JCLE9BRkFVLEVBQWVwL0IsVUFBWW8vQixFQUVwQkEsSSw2QkNuRFQ5dEUsRUFBT0QsUUFGb0IsZ0QsZ0JDVDNCLElBQUl1dUUsRUFBbUIsRUFBUSxLQW9CL0J0dUUsRUFBT0QsUUFsQlAsV0FDRSxPQUFPLFNBQVU2d0MsR0FhZixPQVpBMDlCLEVBQWlCMTlCLEVBQUssUUFBUSxTQUFVMjlCLEVBQVU3aEUsR0FDaEQsSUFBZXpNLEVBQUd5QixFQUFkbUwsRUFBUSxFQUNaLElBQUs1TSxFQUFJLEVBQUd5QixFQUFJZ0wsRUFBUXBKLE9BQVFyRCxFQUFJeUIsRUFBR3pCLElBQ2IsU0FBcEJ5TSxFQUFRek0sR0FBR29GLE9BQWlCd0gsR0FBUyxHQUUzQyxJQUFLNU0sRUFBSSxFQUFHeUIsRUFBSTZzRSxFQUFTNXRELFNBQVNyZCxPQUFRckQsRUFBSXlCLEVBQUd6QixJQUFLLENBQ3BELElBQUl1dUUsRUFBUUQsRUFBUzV0RCxTQUFTMWdCLEdBQzlCdXVFLEVBQU16ekQsTUFBUTlhLEVBQ2R1dUUsRUFBTWhILFFBQVUrRyxFQUFTL0csUUFFM0IrRyxFQUFTMWhFLE1BQVFBLEtBRVorakMsSyw2QkNiWDV3QyxFQUFPRCxRQUdQLFNBQXNCd2dCLEVBQU1sYixFQUFNbWIsR0FDaEMsSUFBSTgrQyxFQUFRLEdBRVEsbUJBQVRqNkQsSUFDVG1iLEVBQVVuYixFQUNWQSxFQUFPLE1BTVQsU0FBU3NnRSxFQUFJNzNELEdBQ1gsSUFBSXNGLEVBTUosT0FKSy9OLEdBQVF5SSxFQUFLekksT0FBU0EsSUFDekIrTixFQUFTb04sRUFBUTFTLEVBQU13eEQsRUFBTXA5QyxXQUczQnBVLEVBQUs2UyxXQUF1QixJQUFYdk4sRUFRdkIsU0FBYXVOLEVBQVVELEdBQ3JCLElBRUk4dEQsRUFGQWxyRSxFQUFTcWQsRUFBU3JkLE9BQ2xCeVgsR0FBUyxFQUdidWtELEVBQU1sNEQsS0FBS3NaLEdBRVgsT0FBUzNGLEVBQVF6WCxHQUdmLElBRkFrckUsRUFBUTd0RCxFQUFTNUYsTUFFVyxJQUFmNHFELEVBQUk2SSxHQUNmLE9BQU8sRUFNWCxPQUZBbFAsRUFBTXRnQixPQUVDLEVBeEJFOGEsQ0FBSWhzRCxFQUFLNlMsU0FBVTdTLEdBR3JCc0YsRUFkVHV5RCxFQUFJcGxELEssNkJDUE4sSUFBSUwsRUFBUSxFQUFRLElBR2hCdXVELEVBQWdCLDJGQUNoQkMsRUFBYyx1QkFFbEIxdUUsRUFBT0QsUUFBVSxTQUFVd2dCLEdBQ3pCLElBQUk4dkMsRUFDQXNlLEVBbUNKLE9BbENBenVELEVBQU1LLEVBQU0sUUFBUSxTQUFVelMsRUFBTWlOLEVBQU8yRixHQUNyQ2l1RCxJQUFrQmp1RCxJQUNwQjJ2QyxFQUFPLEdBQ1BzZSxFQUFnQmp1RCxHQUdsQixJQUFJa3VELEVBb0RSLFNBQXdCOWdFLEdBQ3RCLElBQUlvRSxFQUFRcEUsRUFBSzVNLE1BQU1nUixNQUFNdThELEdBQzdCLFFBQU92OEQsR0FBUUEsRUFBTSxHQXRERDI4RCxDQUFlL2dFLEdBRWpDLEdBQUk4Z0UsRUFNRixPQUxBbHVELEVBQU9DLFNBQVNuRyxPQUFPTyxFQUFPLEVBQUcsQ0FDL0IxVixLQWpCRyxjQWtCSHNCLElBQUtpb0UsRUFDTGp4RCxTQUFVN1AsRUFBSzZQLFlBRVYsRUFHVCxJQUFJdFIsRUFnQ1IsU0FBc0J5QixFQUFNNFMsR0FDMUIsSUFBSXhPLEVBQVFwRSxFQUFLNU0sTUFBTWdSLE1BQU13OEQsR0FDN0IsUUFBT3g4RCxHQUFRLENBQ2J2TCxJQUFLdUwsRUFBTSxHQUNYNDRELFNBQVU1NEQsRUFBTSxHQUNoQnBFLEtBQU1BLEdBckNRZ2hFLENBQWFoaEUsR0FFM0IsSUFBS3pCLEVBQ0gsT0FBTyxFQUdULElBQUkwaUUsRUFjUixTQUFxQjFlLEVBQU0yZSxHQUN6QixJQUFJL3VFLEVBQUlvd0QsRUFBSy9zRCxPQUViLEtBQU9yRCxLQUNMLEdBQUlvd0QsRUFBS3B3RCxHQUFHMEcsTUFBUXFvRSxFQUNsQixPQUFPM2UsRUFBSzcxQyxPQUFPdmEsRUFBRyxHQUFHLEdBSTdCLE9BQU8sRUF2QlVndkUsQ0FBWTVlLEVBQU1oa0QsRUFBUTFGLEtBUXpDLE9BTklvb0UsRUFDRnJ1RCxFQUFPQyxTQUFTbkcsT0FBT08sRUFBTyxFQXFDcEMsU0FBaUJtMEQsRUFBVUMsRUFBUXp1RCxHQUNqQyxJQUFJdVYsRUFBWXZWLEVBQU9DLFNBQVM5WCxRQUFRcW1FLEVBQVNwaEUsTUFDN0NzaEUsRUFBVTF1RCxFQUFPQyxTQUFTOVgsUUFBUXNtRSxFQUFPcmhFLE1BRXpDNlMsRUFEWUQsRUFBT0MsU0FBU25HLE9BQU95YixFQUFXbTVDLEVBQVVuNUMsRUFBWSxHQUMvQ3RlLE1BQU0sR0FBSSxHQUNuQyxNQUFPLENBQ0x0UyxLQTVFTyxjQTZFUHNiLFNBQVVBLEVBQ1ZoYSxJQUFLdW9FLEVBQVN2b0UsSUFDZGdYLFNBQVUsQ0FDUmpHLE1BQU93M0QsRUFBU3BoRSxLQUFLNlAsU0FBU2pHLE1BQzlCWixJQUFLcTRELEVBQU9yaEUsS0FBSzZQLFNBQVM3RyxJQUMxQjhHLE9BQVEsS0FqRHlCeXhELENBQVFoakUsRUFBUzBpRSxFQUFVcnVELElBQ2xEclUsRUFBUXkrRCxTQUNsQnphLEVBQUtqcEQsS0FBS2lGLElBR0wsS0FDTixHQUVJa1UsSSw2QkNoRFQsSUFBSUwsRUFBUSxFQUFRLElBOEJwQixTQUFTb3ZELEVBQVN4aEUsRUFBTWlOLEVBQU8yRixFQUFRdGYsR0FDckMsR0FBYSxXQUFUQSxFQUNGc2YsRUFBT0MsU0FBU25HLE9BQU9PLEVBQU8sUUFDekIsR0FBYSxXQUFUM1osRUFBbUIsQ0FDNUIsSUFBSW1TLEVBQU8sQ0FBQ3dILEVBQU8sR0FFZmpOLEVBQUs2UyxXQUNQcE4sRUFBT0EsRUFBSzJPLE9BQU9wVSxFQUFLNlMsV0FHMUIvYyxNQUFNL0IsVUFBVTJZLE9BQU95QyxNQUFNeUQsRUFBT0MsU0FBVXBOLElBdENsRHhULEVBQVFrd0MsT0FBUyxTQUFVamIsRUFBTzV6QixHQUNoQyxPQUFPLFNBQVUwTSxHQUlmLE9BSEFrbkIsRUFBTWx0QixTQUFRLFNBQVV6QyxHQUN0QixPQUFPNmEsRUFBTXBTLEVBQU16SSxFQUFNa3FFLEdBQVUsTUFFOUJ6aEUsR0FHVCxTQUFTeWhFLEVBQVN6aEUsRUFBTWlOLEVBQU8yRixHQUN6QkEsR0FDRjR1RCxFQUFTeGhFLEVBQU1pTixFQUFPMkYsRUFBUXRmLEtBS3BDckIsRUFBUW93QyxXQUFhLFNBQVVELEVBQVc5dUMsR0FDeEMsT0FBTyxTQUFVME0sR0FFZixPQURBb1MsRUFBTXBTLEVBQU15aEUsR0FBVSxHQUNmemhFLEdBR1QsU0FBU3loRSxFQUFTemhFLEVBQU1pTixFQUFPMkYsR0FDekJBLElBQVd3dkIsRUFBVXBpQyxFQUFNaU4sRUFBTzJGLElBQ3BDNHVELEVBQVN4aEUsRUFBTWlOLEVBQU8yRixFQUFRdGYsTSw2QkN6QnBDLElBQUlvdUUsRUFBUSxFQUFRLEdBRWhCaGhDLEVBQVEsRUFBUSxHQUVoQmloQyxFQUFVLEVBQVEsS0FFbEJDLEVBQXNCLENBQ3hCaDRELE1BQU8sQ0FDTC9LLEtBQU0sRUFDTkMsT0FBUSxFQUNSNFMsT0FBUSxHQUVWMUksSUFBSyxDQUNIbkssS0FBTSxFQUNOQyxPQUFRLEVBQ1I0UyxPQUFRLElBSVosU0FBU3N2QixFQUFXaGhDLEVBQU1oSixHQUN4QixJQUFJNGIsRUFBU3JkLFVBQVVDLE9BQVMsUUFBc0IwQyxJQUFqQjNDLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUM3RTBYLEVBQVExWCxVQUFVQyxPQUFTLFFBQXNCMEMsSUFBakIzQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssRUFDNUVzc0UsRUFBVzdxRSxFQUFRMHFDLFVBQVUxaEMsRUFBS3pJLFdBSWhCVyxJQUFsQjhILEVBQUs2UCxXQUNQN1AsRUFBSzZQLFNBQVcrQyxFQUFPNVMsTUFBUTRTLEVBQU81UyxLQUFLNlAsVUFBWSt4RCxHQUd6RCxJQUFJdndELEVBQU1yUixFQUFLNlAsU0FBU2pHLE1BQ3BCbFcsRUFBTSxDQUFDc00sRUFBS3pJLEtBQU04WixFQUFJeFMsS0FBTXdTLEVBQUl2UyxPQUFRbU8sR0FBT3BWLEtBQUssS0FFeEQsSUFBSzhwRSxFQUFRRyxtQkFBbUJELEdBQzlCLE1BQU0sSUFBSW5yRSxNQUFNLHNCQUFzQjBkLE9BQU9wVSxFQUFLekksS0FBTSx1Q0FHMUQsSUFBSXdxRSxFQUFZQyxFQUFhaGlFLEVBQU10TSxFQUFLc0QsRUFBUzZxRSxFQUFVanZELEVBQVEzRixHQUNuRSxPQUFPeTBELEVBQU0zb0UsY0FBYzhvRSxFQUFVRSxFQUFXQSxFQUFVbHZELFVBQVlvdkQsVUFBcUIvcEUsR0FFM0YsU0FBUytwRSxJQUNQLE9BQU9qaUUsRUFBSzZTLFVBQVk3UyxFQUFLNlMsU0FBU2dELEtBQUksU0FBVXFzRCxFQUFXL3ZFLEdBQzdELE9BQU82dUMsRUFBV2toQyxFQUFXbHJFLEVBQVMsQ0FDcENnSixLQUFNQSxFQUNOZ0wsTUFBTysyRCxHQUNONXZFLE9BTVQsU0FBUzZ2RSxFQUFhaGlFLEVBQU10TSxFQUFLeXVFLEVBQU1OLEVBQVVqdkQsRUFBUTNGLEdBQ3ZELElBaU11Qm9FLEVBak1uQnJHLEVBQVEsQ0FDVnRYLElBQUtBLEdBRUgwdUUsRUFBb0MsaUJBQWJQLEVBRXZCTSxFQUFLbC9CLFdBQWFqakMsRUFBSzZQLFdBQ3pCN0UsRUFBTSxrQkE0TEQsRUFEZ0JxRyxFQTNMcUJyUixFQUFLNlAsVUE0THJDakcsTUFBTS9LLEtBQU0sSUFBS3dTLEVBQUl6SCxNQUFNOUssT0FBUSxJQUFLdVMsRUFBSXJJLElBQUluSyxLQUFNLElBQUt3UyxFQUFJckksSUFBSWxLLFFBQVErVyxJQUFJamhCLFFBQVFpRCxLQUFLLEtBekxwR3NxRSxFQUFLai9CLGVBQWlCay9CLElBQ3hCcDNELEVBQU1xM0QsZUFBaUJyaUUsRUFBSzZQLFVBSTFCc3lELEVBQUtHLGtCQUFvQjF2RCxFQUFPNVMsTUFBUTRTLEVBQU81UyxLQUFLNlMsV0FBYXV2RCxJQUNuRXAzRCxFQUFNaUMsTUFBUTJGLEVBQU81UyxLQUFLNlMsU0FBUzlYLFFBQVFpRixHQUMzQ2dMLEVBQU11M0QsaUJBQW1CM3ZELEVBQU81UyxLQUFLNlMsU0FBU3JkLFFBR2hELElBQUlxN0MsRUFBMEIsT0FBcEI3d0MsRUFBS284RCxpQkFBMkNsa0UsSUFBcEI4SCxFQUFLbzhELFdBQTJCK0YsRUFBS3BnQyxZQUFZL2hDLEVBQUtvOEQsYUFBZSxHQUFLLEtBRWhILE9BQVFwOEQsRUFBS3pJLE1BQ1gsSUFBSyxPQUNIaXJFLEVBQWN4M0QsRUFBTyxDQUNuQjVFLFVBQVcrN0QsRUFBSy83RCxZQUVsQixNQUVGLElBQUssT0FDSDRFLEVBQU15M0QsUUFBVS91RSxFQUNoQnNYLEVBQU02SCxTQUFXN1MsRUFBSzVNLE1BQ3RCLE1BRUYsSUFBSyxVQUNINFgsRUFBTWdDLE1BQVFoTixFQUFLakIsTUFDbkIsTUFFRixJQUFLLE9BQ0hpTSxFQUFNcEIsTUFBUTVKLEVBQUs0SixNQUNuQm9CLEVBQU0wdUQsUUFBVTE1RCxFQUFLMDVELFFBQ3JCMXVELEVBQU0wM0QsT0FBUzFpRSxFQUFLMDZELE1BQ3BCMXZELEVBQU1qTSxNQUFRaUIsRUFBS2pCLE1BQ25CLE1BRUYsSUFBSyxXQUNIaU0sRUFBTTJ1QyxRQUFVMzVDLEVBQUsyNUMsUUFDckIzdUMsRUFBTTAzRCxPQUFTMWlFLEVBQUswNkQsTUFDcEIxdkQsRUFBTTB1RCxRQUFVMTVELEVBQUswNUQsUUFDckIxdUQsRUFBTWlDLE1BQVFqTixFQUFLaU4sTUFDbkJqQyxFQUFNNkgsU0FvSlosU0FBNkI3UyxFQUFNNFMsR0FDakMsR0FBSTVTLEVBQUswNkQsTUFDUCxPQUFPMTZELEVBQUs2UyxTQUdkLEdBQUlELEVBQU81UyxNQUFRQSxFQUFLaU4sTUFBUSxHQUFLMkYsRUFBTzVTLEtBQUs2UyxTQUFTN1MsRUFBS2lOLE1BQVEsR0FBR3l0RCxNQUN4RSxPQUFPMTZELEVBQUs2UyxTQUdkLE9BR0YsU0FBMEI3UyxHQUN4QixPQUFPQSxFQUFLNlMsU0FBU2d0QixRQUFPLFNBQVU2RCxFQUFPZzlCLEdBQzNDLE9BQU9oOUIsRUFBTXR2QixPQUFzQixjQUFmc3NELEVBQU1ucEUsS0FBdUJtcEUsRUFBTTd0RCxVQUFZLEdBQUssQ0FBQzZ0RCxNQUN4RSxJQU5JaUMsQ0FBaUIzaUUsR0E3Skg0aUUsQ0FBb0I1aUUsRUFBTTRTLEdBQVFpRCxLQUFJLFNBQVVxc0QsRUFBVy92RSxHQUMxRSxPQUFPNnVDLEVBQVdraEMsRUFBV0MsRUFBTSxDQUNqQ25pRSxLQUFNQSxFQUNOZ0wsTUFBT0EsR0FDTjdZLE1BRUwsTUFFRixJQUFLLGFBQ0hxd0UsRUFBY3gzRCxFQUFPLENBQ25Cb3hELFdBQVlwOEQsRUFBS284RCxXQUNqQngyQyxNQUFPNWxCLEVBQUs0bEIsTUFDWnhaLElBQUtwTSxFQUFLb00sTUFFWixNQUVGLElBQUssT0FDSG8yRCxFQUFjeDNELEVBQU8sQ0FDbkJvVixTQUFVcGdCLEVBQUt5OEMsTUFBUXo4QyxFQUFLeThDLEtBQUtsaUQsTUFBTSxLQUFNLEdBQUcsS0FFbEQsTUFFRixJQUFLLGFBQ0h5USxFQUFNNkgsU0FBVzdTLEVBQUs1TSxNQUN0QjRYLEVBQU02M0QsUUFBUyxFQUNmLE1BRUYsSUFBSyxPQUNITCxFQUFjeDNELEVBQU8sQ0FDbkI0YSxNQUFPNWxCLEVBQUs0bEIsWUFBUzF0QixFQUNyQjVDLE9BQW1DLG1CQUFwQjZzRSxFQUFLMytCLFdBQTRCMitCLEVBQUszK0IsV0FBV3hqQyxFQUFLb00sSUFBS3BNLEVBQUs2UyxTQUFVN1MsRUFBSzRsQixPQUFTdThDLEVBQUszK0IsV0FDNUdpWSxLQUFNMG1CLEVBQUtoL0IsaUJBQW1CZy9CLEVBQUtoL0IsaUJBQWlCbmpDLEVBQUtvTSxJQUFLcE0sRUFBSzZTLFNBQVU3UyxFQUFLNGxCLE9BQVM1bEIsRUFBS29NLE1BRWxHLE1BRUYsSUFBSyxRQUNIbzJELEVBQWN4M0QsRUFBTyxDQUNuQmt1QyxJQUFLbDVDLEVBQUtrNUMsVUFBT2hoRCxFQUNqQjB0QixNQUFPNWxCLEVBQUs0bEIsWUFBUzF0QixFQUNyQm1TLElBQUs4M0QsRUFBSzErQixrQkFBb0IwK0IsRUFBSzErQixrQkFBa0J6akMsRUFBS29NLElBQUtwTSxFQUFLNlMsU0FBVTdTLEVBQUs0bEIsTUFBTzVsQixFQUFLazVDLEtBQU9sNUMsRUFBS29NLE1BRTdHLE1BRUYsSUFBSyxnQkFDSG8yRCxFQUFjeDNELEVBQU8wMUIsRUFBTW1RLEVBQUssQ0FDOUI0SyxLQUFNMG1CLEVBQUtoL0IsaUJBQW1CZy9CLEVBQUtoL0IsaUJBQWlCME4sRUFBSTRLLE1BQVE1SyxFQUFJNEssUUFFdEUsTUFFRixJQUFLLGlCQUNIK21CLEVBQWN4M0QsRUFBTyxDQUNuQlgsSUFBSzgzRCxFQUFLMStCLG1CQUFxQm9OLEVBQUk0SyxLQUFPMG1CLEVBQUsxK0Isa0JBQWtCb04sRUFBSTRLLEtBQU16N0MsRUFBSzZTLFNBQVVnK0IsRUFBSWpyQixNQUFPNWxCLEVBQUtrNUMsS0FBT3JJLEVBQUk0SyxLQUNySDcxQixNQUFPaXJCLEVBQUlqckIsWUFBUzF0QixFQUNwQmdoRCxJQUFLbDVDLEVBQUtrNUMsVUFBT2hoRCxJQUVuQixNQUVGLElBQUssUUFDTCxJQUFLLFlBQ0wsSUFBSyxZQUNIOFMsRUFBTTgzRCxnQkFBa0I5aUUsRUFBS3NrRCxNQUM3QixNQUVGLElBQUssV0FDSHQ1QyxFQUFNKzNELFNBQWdDLGNBQXJCbndELEVBQU81UyxLQUFLekksS0FDN0J5VCxFQUFNODNELGdCQUFrQmx3RCxFQUFPNUgsTUFBTTgzRCxnQkFDckMsTUFFRixJQUFLLFlBQ0hOLEVBQWN4M0QsRUFBTyxDQUNuQiszRCxTQUFVbndELEVBQU81SCxNQUFNKzNELFNBQ3ZCemUsTUFBTzF4QyxFQUFPNUgsTUFBTTgzRCxnQkFBZ0I3MUQsS0FFdEMsTUFFRixJQUFLLGNBQ0hqQyxFQUFNblMsSUFBTW1ILEVBQUtuSCxJQUNqQixNQUVGLElBQUssT0FFSG1TLEVBQU1nNEQsUUFBVWhqRSxFQUFLNlAsU0FBU2pHLE1BQU0vSyxPQUFTbUIsRUFBSzZQLFNBQVM3RyxJQUFJbkssS0FDL0RtTSxFQUFNdTNCLFdBQWE0L0IsRUFBSzUvQixXQUN4QnYzQixFQUFNdzNCLFNBQVcyL0IsRUFBSzMvQixTQUN0QixNQUVGLElBQUssYUFFRCxJQUFJeWdDLEVBRUFqakUsRUFBSzZTLFdBQ1Bvd0QsRUFBaUJqakUsRUFBSzZTLFNBQVNnRCxLQUFJLFNBQVU2cUQsRUFBT3Z1RSxHQUNsRCxPQUFPNnVDLEVBQVcwL0IsRUFBT3lCLEVBQU0sQ0FDN0JuaUUsS0FBTUEsRUFDTmdMLE1BQU9BLEdBQ043WSxPQUlQNlksRUFBTXUzQixXQUFhNC9CLEVBQUs1L0IsV0FDeEJ2M0IsRUFBTXczQixTQUFXMi9CLEVBQUszL0IsU0FDdEJ4M0IsRUFBTXUvQyxRQTJCZCxTQUEyQnZxRCxFQUFNaWpFLEdBQy9CLElBQUlDLEVBQUtsakUsRUFBS3VxRCxRQUVkLEdBQUl6MEQsTUFBTUYsUUFBUXN0RSxHQUFLLENBQ3JCLElBQUlweEIsRUFBVzR2QixFQUFNNXZCLFVBQVksTUFDakMsT0FBTzR2QixFQUFNM29FLGNBQWMrNEMsRUFBVSxLQUFNb3hCLEdBRzdDLEdBQUlBLEVBQUdsNEQsTUFBTTZILFVBQVlvd0QsRUFBZ0IsQ0FDdkMsSUFBSXB3RCxFQUFXNnVELEVBQU0vdkIsU0FBUzFXLFFBQVFpb0MsRUFBR2w0RCxNQUFNNkgsVUFBVXVCLE9BQU82dUQsR0FDaEUsT0FBT3ZCLEVBQU10dkIsYUFBYTh3QixFQUFJLEtBQU1yd0QsR0FHdEMsT0FBTzZ1RCxFQUFNdHZCLGFBQWE4d0IsRUFBSSxNQXhDUkMsQ0FBa0JuakUsRUFBTWlqRSxHQUN4QyxNQUdKLFFBQ0VULEVBQWN4M0QsRUFBTzAxQixFQUFNMWdDLEVBQU0sQ0FDL0J6SSxVQUFNVyxFQUNOMlgsY0FBVTNYLEVBQ1YyYSxjQUFVM2EsS0FRaEIsT0FKS2txRSxHQUFpQnBpRSxFQUFLNU0sUUFDekI0WCxFQUFNNVgsTUFBUTRNLEVBQUs1TSxPQUdkNFgsRUFHVCxTQUFTdzNELEVBQWNsdEUsRUFBUXdyQixHQUM3QixJQUFLLElBQUlwdEIsS0FBT290QixPQUNZLElBQWZBLEVBQU1wdEIsS0FDZjRCLEVBQU81QixHQUFPb3RCLEVBQU1wdEIsSUEyQzFCeEIsRUFBT0QsUUFBVSt1QyxHLDZCQzFRZjl1QyxFQUFPRCxRQUFVLEVBQVEsTTs7Ozs7Ozs7R0NNZCxJQUFJeUksRUFBRSxtQkFBb0J4SCxRQUFRQSxPQUFPKzhDLElBQUl6OUMsRUFBRWtJLEVBQUV4SCxPQUFPKzhDLElBQUksaUJBQWlCLE1BQU14OUMsRUFBRWlJLEVBQUV4SCxPQUFPKzhDLElBQUksZ0JBQWdCLE1BQU0zN0MsRUFBRW9HLEVBQUV4SCxPQUFPKzhDLElBQUksa0JBQWtCLE1BQU0veUMsRUFBRXhDLEVBQUV4SCxPQUFPKzhDLElBQUkscUJBQXFCLE1BQU1oMEMsRUFBRXZCLEVBQUV4SCxPQUFPKzhDLElBQUksa0JBQWtCLE1BQU01MUMsRUFBRUssRUFBRXhILE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTXR6QyxFQUFFakMsRUFBRXhILE9BQU8rOEMsSUFBSSxpQkFBaUIsTUFBTTc5QyxFQUFFc0ksRUFBRXhILE9BQU8rOEMsSUFBSSxvQkFBb0IsTUFBTTE5QyxFQUFFbUksRUFBRXhILE9BQU8rOEMsSUFBSSx5QkFBeUIsTUFBTXI4QyxFQUFFOEcsRUFBRXhILE9BQU8rOEMsSUFBSSxxQkFBcUIsTUFBTWg4QyxFQUFFeUcsRUFBRXhILE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTWowQyxFQUFFdEIsRUFDcGZ4SCxPQUFPKzhDLElBQUksdUJBQXVCLE1BQU1oOUMsRUFBRXlILEVBQUV4SCxPQUFPKzhDLElBQUksY0FBYyxNQUFNNThDLEVBQUVxSCxFQUFFeEgsT0FBTys4QyxJQUFJLGNBQWMsTUFBTXIxQyxFQUFFRixFQUFFeEgsT0FBTys4QyxJQUFJLGVBQWUsTUFBTS8wQyxFQUFFUixFQUFFeEgsT0FBTys4QyxJQUFJLHFCQUFxQixNQUFNL3pDLEVBQUV4QixFQUFFeEgsT0FBTys4QyxJQUFJLG1CQUFtQixNQUFNcnpDLEVBQUVsQyxFQUFFeEgsT0FBTys4QyxJQUFJLGVBQWUsTUFDbFEsU0FBU3h6QyxFQUFFaEMsR0FBRyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsSUFBSXNDLEVBQUV0QyxFQUFFdTJDLFNBQVMsT0FBT2owQyxHQUFHLEtBQUt2SyxFQUFFLE9BQU9pSSxFQUFFQSxFQUFFbEQsTUFBUSxLQUFLbkYsRUFBRSxLQUFLRyxFQUFFLEtBQUsrQixFQUFFLEtBQUsySCxFQUFFLEtBQUtpQixFQUFFLEtBQUtqSixFQUFFLE9BQU93RyxFQUFFLFFBQVEsT0FBT0EsRUFBRUEsR0FBR0EsRUFBRXUyQyxVQUFZLEtBQUtyMEMsRUFBRSxLQUFLL0ksRUFBRSxLQUFLUCxFQUFFLEtBQUtKLEVBQUUsS0FBS29ILEVBQUUsT0FBT0ksRUFBRSxRQUFRLE9BQU9zQyxHQUFHLEtBQUt0SyxFQUFFLE9BQU9zSyxJQUFJLFNBQVNaLEVBQUUxQixHQUFHLE9BQU9nQyxFQUFFaEMsS0FBS2xJLEVBQUVOLEVBQVFteEUsVUFBVWh4RSxFQUFFSCxFQUFRb3hFLGVBQWU5d0UsRUFBRU4sRUFBUXF4RSxnQkFBZ0IzbUUsRUFBRTFLLEVBQVFzeEUsZ0JBQWdCbHBFLEVBQUVwSSxFQUFRdXhFLFFBQVFoeEUsRUFBRVAsRUFBUXd4RSxXQUFXN3ZFLEVBQUUzQixFQUFRNi9DLFNBQVN4OUMsRUFBRXJDLEVBQVF5eEUsS0FBS3J3RSxFQUFFcEIsRUFBUTB4RSxLQUFLMXdFLEVBQUVoQixFQUFRMnhFLE9BQU9ueEUsRUFDaGZSLEVBQVE4L0MsU0FBUzkxQyxFQUFFaEssRUFBUWdnRCxXQUFXLzBDLEVBQUVqTCxFQUFRaWdELFNBQVNqK0MsRUFBRWhDLEVBQVE0eEUsWUFBWSxTQUFTcHBFLEdBQUcsT0FBTzBCLEVBQUUxQixJQUFJZ0MsRUFBRWhDLEtBQUtySSxHQUFHSCxFQUFRNnhFLGlCQUFpQjNuRSxFQUFFbEssRUFBUTh4RSxrQkFBa0IsU0FBU3RwRSxHQUFHLE9BQU9nQyxFQUFFaEMsS0FBS2tDLEdBQUcxSyxFQUFRK3hFLGtCQUFrQixTQUFTdnBFLEdBQUcsT0FBT2dDLEVBQUVoQyxLQUFLSixHQUFHcEksRUFBUWd5RSxVQUFVLFNBQVN4cEUsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFdTJDLFdBQVd4K0MsR0FBR1AsRUFBUWl5RSxhQUFhLFNBQVN6cEUsR0FBRyxPQUFPZ0MsRUFBRWhDLEtBQUs3RyxHQUFHM0IsRUFBUWt5RSxXQUFXLFNBQVMxcEUsR0FBRyxPQUFPZ0MsRUFBRWhDLEtBQUtuRyxHQUFHckMsRUFBUW15RSxPQUFPLFNBQVMzcEUsR0FBRyxPQUFPZ0MsRUFBRWhDLEtBQUtwSCxHQUN6ZHBCLEVBQVFveUUsT0FBTyxTQUFTNXBFLEdBQUcsT0FBT2dDLEVBQUVoQyxLQUFLeEgsR0FBR2hCLEVBQVFxeUUsU0FBUyxTQUFTN3BFLEdBQUcsT0FBT2dDLEVBQUVoQyxLQUFLaEksR0FBR1IsRUFBUXN5RSxXQUFXLFNBQVM5cEUsR0FBRyxPQUFPZ0MsRUFBRWhDLEtBQUt3QixHQUFHaEssRUFBUXV5RSxhQUFhLFNBQVMvcEUsR0FBRyxPQUFPZ0MsRUFBRWhDLEtBQUt5QyxHQUFHakwsRUFBUXd5RSxXQUFXLFNBQVNocUUsR0FBRyxPQUFPZ0MsRUFBRWhDLEtBQUt4RyxHQUN6T2hDLEVBQVE2dkUsbUJBQW1CLFNBQVNybkUsR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxtQkFBb0JBLEdBQUdBLElBQUluRyxHQUFHbUcsSUFBSWxJLEdBQUdrSSxJQUFJd0IsR0FBR3hCLElBQUl5QyxHQUFHekMsSUFBSXhHLEdBQUd3RyxJQUFJdUIsR0FBRyxpQkFBa0J2QixHQUFHLE9BQU9BLElBQUlBLEVBQUV1MkMsV0FBVzM5QyxHQUFHb0gsRUFBRXUyQyxXQUFXLzlDLEdBQUd3SCxFQUFFdTJDLFdBQVczMkMsR0FBR0ksRUFBRXUyQyxXQUFXcjBDLEdBQUdsQyxFQUFFdTJDLFdBQVdwOUMsR0FBRzZHLEVBQUV1MkMsV0FBVzkxQyxHQUFHVCxFQUFFdTJDLFdBQVc5MEMsR0FBR3pCLEVBQUV1MkMsV0FBV3AwQyxHQUFHbkMsRUFBRXUyQyxXQUFXcDJDLElBQUkzSSxFQUFReXlFLE9BQU9qb0UsRyw2QkNablUsSUFBSTJWLEVBQVEsRUFBUSxJQU9wQixTQUFTb2IsRUFBS3duQyxHQUNaLElBQUluaUQsRUFBV21pRCxFQUFNbmlELFNBQ3JCbWlELEVBQU1uaUQsU0FBVyxDQUFDLENBQ2hCdGIsS0FBTSxZQUNOK3NELE1BQU8wUSxFQUFNMVEsTUFDYnp4QyxTQUFVLENBQUNBLEVBQVMsSUFDcEJoRCxTQUFVZ0QsRUFBUyxHQUFHaEQsV0FHcEJnRCxFQUFTcmQsT0FBUyxHQUNwQncvRCxFQUFNbmlELFNBQVN2WixLQUFLLENBQ2xCL0IsS0FBTSxZQUNOK3NELE1BQU8wUSxFQUFNMVEsTUFDYnp4QyxTQUFVQSxFQUFTaEosTUFBTSxHQUN6QmdHLFNBQVUsQ0FDUmpHLE1BQU9pSixFQUFTLEdBQUdoRCxTQUFTakcsTUFDNUJaLElBQUs2SixFQUFTQSxFQUFTcmQsT0FBUyxHQUFHcWEsU0FBUzdHLE9BckJwRDlXLEVBQU9ELFFBQVUsU0FBVStOLEdBRXpCLE9BREFvUyxFQUFNcFMsRUFBTSxRQUFTd3RCLEdBQ2R4dEIsSSw2QkNKVDlOLEVBQU9ELFFBQVUsU0FBU2l2QyxFQUFlbGhDLEdBQ3ZDLElBQUkya0UsRUFBT3B2RSxVQUFVQyxPQUFTLFFBQXNCMEMsSUFBakIzQyxVQUFVLEdBQW1CQSxVQUFVLEdBQUssR0FDL0UsT0FBUXlLLEVBQUs2UyxVQUFZLElBQUlndEIsUUFBTyxTQUFVa0MsRUFBYTIrQixHQVF6RCxNQVBtQixlQUFmQSxFQUFNbnBFLE9BQ1J3cUMsRUFBWTIrQixFQUFNdEUsWUFBYyxDQUM5QjNnQixLQUFNaWxCLEVBQU10MEQsSUFDWndaLE1BQU84NkMsRUFBTTk2QyxRQUlWc2IsRUFBZXcvQixFQUFPMytCLEtBQzVCNGlDLEssNkJDWEwsSUFBSUMsRUFBWSxDQUFDLE9BQVEsUUFBUyxTQUFVLE9BRTVDMXlFLEVBQU9ELFFBQVUsU0FBd0I0eUUsR0FDdkMsSUFBSXo0RCxHQUFPeTRELEdBQU8sSUFBSXZxRSxPQUNsQjhpRSxFQUFRaHhELEVBQUl6WCxPQUFPLEdBRXZCLEdBQWMsTUFBVnlvRSxHQUEyQixNQUFWQSxFQUNuQixPQUFPaHhELEVBR1QsSUFBSTA0RCxFQUFRMTRELEVBQUlyUixRQUFRLEtBRXhCLElBQWUsSUFBWCtwRSxFQUNGLE9BQU8xNEQsRUFNVCxJQUhBLElBQUk1VyxFQUFTb3ZFLEVBQVVwdkUsT0FDbkJ5WCxHQUFTLElBRUpBLEVBQVF6WCxHQUFRLENBQ3ZCLElBQUlvb0UsRUFBV2dILEVBQVUzM0QsR0FFekIsR0FBSTYzRCxJQUFVbEgsRUFBU3BvRSxRQUFVNFcsRUFBSXZDLE1BQU0sRUFBRyt6RCxFQUFTcG9FLFFBQVEyTyxnQkFBa0J5NUQsRUFDL0UsT0FBT3h4RCxFQU1YLE9BQWUsS0FGZmEsRUFBUWIsRUFBSXJSLFFBQVEsT0FFQStwRSxFQUFRNzNELElBTWIsS0FGZkEsRUFBUWIsRUFBSXJSLFFBQVEsT0FFQStwRSxFQUFRNzNELEVBTG5CYixFQVVGLHVCLDZCQ3ZDVCxJQUFJczBCLEVBQVEsRUFBUSxHQUVoQmdoQyxFQUFRLEVBQVEsR0FFaEJxRCxFQUF1Qi95RCxVQUFVMHZELEVBQU0zdUQsU0FBVyxNQUFNbEosTUFBTSxFQUFHLEdBQUksS0FBTyxHQUM1RTlRLEVBQWdCMm9FLEVBQU0zb0UsY0F5QzFCLFNBQVNpc0UsRUFBZW5zRSxFQUFLbVMsR0FDM0IsT0FBT2pTLEVBQWNGLEVBQUtvc0UsRUFBYWo2RCxHQUFRQSxFQUFNNkgsVUF3RnZELFNBQVNveUQsRUFBYWo2RCxHQUNwQixPQUFPQSxFQUFNLGtCQUFvQixDQUMvQixpQkFBa0JBLEVBQU0sbUJBQ3RCLEdBcElOOVksRUFBT0QsUUFBVSxDQUNmc2pFLE1BQU8sS0FDUE4sVUFBVyxJQUNYSSxTQUFVLEtBQ1ZELE9BQVEsU0FDUlAsY0FBZSxLQUNmRixXQUFZLGFBQ1p1USxPQUFRLE1BQ1I5OEMsS0FBTSxJQUNOQyxNQUFPLE1BQ1A4OEMsY0FBZSxJQUNmQyxlQUFnQixNQUNoQnBRLE1BQU9nUSxFQUFlcnhFLEtBQUssS0FBTSxTQUNqQzB4RSxVQUFXTCxFQUFlcnhFLEtBQUssS0FBTSxTQUNyQzJ4RSxVQUFXTixFQUFlcnhFLEtBQUssS0FBTSxTQUNyQzR4RSxTQUFVUCxFQUFlcnhFLEtBQUssS0FBTSxNQUNwQzZ4RSxVQTRCRixTQUFtQng2RCxHQUNqQixJQUFJaTVDLEVBQVFqNUMsRUFBTXM1QyxNQUFRLENBQ3hCbWhCLFVBQVd6NkQsRUFBTXM1QyxZQUNmcHNELEVBQ0F3dEUsRUFBWVQsRUFBYWo2RCxHQUM3QixPQUFPalMsRUFBY2lTLEVBQU0rM0QsU0FBVyxLQUFPLEtBQU05ZSxFQUFRdmpCLEVBQU0sQ0FDL0R1akIsTUFBT0EsR0FDTnloQixHQUFhQSxFQUFXMTZELEVBQU02SCxXQWxDakNrM0MsS0FpQkYsU0FBYy8rQyxHQUNaLElBQUkyNkQsR0FBZTM2RCxFQUFNNUUsVUFDckIyakQsRUFBTzRiLEdBQWNqRSxFQUFNNXZCLFVBQW9CLE1BQ25ELE9BQU8vNEMsRUFBY2d4RCxFQUFNNGIsRUFBYyxLQUFPMzZELEVBQU9BLEVBQU02SCxXQW5CN0Q5QixLQVlGLFNBQXNCL0YsR0FDcEIsT0FBTys1RCxFQUF1Qi81RCxFQUFNNkgsU0FBVzlaLEVBQWMsT0FBUSxLQUFNaVMsRUFBTTZILFdBWmpGc04sS0F1Q0YsU0FBY25WLEdBQ1osSUFBSThWLEVBQVFta0QsRUFBYWo2RCxHQUVMLE9BQWhCQSxFQUFNcEIsT0FBa0MsSUFBaEJvQixFQUFNcEIsWUFBK0IxUixJQUFoQjhTLEVBQU1wQixRQUNyRGtYLEVBQU1sWCxNQUFRb0IsRUFBTXBCLE1BQU1qVSxZQUc1QixPQUFPb0QsRUFBY2lTLEVBQU0wdUQsUUFBVSxLQUFPLEtBQU01NEMsRUFBTzlWLEVBQU02SCxXQTdDL0Q4bkQsU0FnREYsU0FBa0IzdkQsR0FDaEIsSUFBSTQ2RCxFQUFXLEtBRWYsR0FBc0IsT0FBbEI1NkQsRUFBTTJ1QyxjQUFzQ3poRCxJQUFsQjhTLEVBQU0ydUMsUUFBdUIsQ0FDekQsSUFBSUEsRUFBVTN1QyxFQUFNMnVDLFFBQ3BCaXNCLEVBQVc3c0UsRUFBYyxRQUFTLENBQ2hDeEIsS0FBTSxXQUNOb2lELFFBQVNBLEVBQ1RrSixVQUFVLElBSWQsT0FBTzlwRCxFQUFjLEtBQU1rc0UsRUFBYWo2RCxHQUFRNDZELEVBQVU1NkQsRUFBTTZILFdBM0RoRW5JLFdBd0dGLFdBQ0UsT0FBTyxNQXhHUHlLLFFBZ0NGLFNBQWlCbkssR0FDZixPQUFPalMsRUFBYyxJQUFJcWIsT0FBT3BKLEVBQU1nQyxPQUFRaTRELEVBQWFqNkQsR0FBUUEsRUFBTTZILFdBaEN6RW1zRCxXQW9FRixTQUFvQmgwRCxHQUNsQixPQUFPalMsRUFBYyxPQUFRa3NFLEVBQWFqNkQsR0FBUUEsRUFBTTZILFdBcEV4RHBCLEtBMkRGLFNBQW1CekcsR0FDakIsSUFBSTVFLEVBQVk0RSxFQUFNb1YsVUFBWSxZQUFZaE0sT0FBT3BKLEVBQU1vVixVQUN2RDNPLEVBQU8xWSxFQUFjLE9BQVFxTixFQUFZLENBQzNDQSxVQUFXQSxHQUNULEtBQU00RSxFQUFNNVgsT0FDaEIsT0FBTzJGLEVBQWMsTUFBT2tzRSxFQUFhajZELEdBQVF5RyxJQS9EakQwaUMsS0FzRUYsU0FBY25wQyxHQUNaLEdBQUlBLEVBQU13M0IsU0FDUixPQUFPLEtBR1QsSUFBSTNwQyxFQUFNbVMsRUFBTWc0RCxRQUFVLE1BQVEsT0FFbEMsR0FBSWg0RCxFQUFNdTNCLFdBQVksQ0FDcEIsSUFBSXNqQyxFQUFPbkUsRUFBTTV2QixVQUFZajVDLEVBQzdCLE9BQU9FLEVBQWM4c0UsRUFBTSxLQUFNNzZELEVBQU01WCxPQUd6QyxJQUFJMnVFLEVBQVksQ0FDZCtELHdCQUF5QixDQUN2QkMsT0FBUS82RCxFQUFNNVgsUUFHbEIsT0FBTzJGLEVBQWNGLEVBQUtrcEUsSUF0RjFCaUUsWUErRkYsU0FBcUJoN0QsR0FDbkIsT0FBT2pTLEVBQWNpUyxFQUFNblMsSUFBS29zRSxFQUFhajZELEdBQVFBLEVBQU02SCxXQS9GM0RvekQsV0F3RkYsU0FBb0JqN0QsR0FDbEIsT0FBT0EsRUFBTSxrQkFBb0IwMkQsRUFBTXR2QixhQUFhcG5DLEVBQU11L0MsUUFBUyxDQUNqRSxpQkFBa0J2L0MsRUFBTSxvQkFDckJBLEVBQU11L0MsVyw2QkM1SGJ0NEQsRUFBUXl3QyxXQUErQixvQkFBWHh2QyxPQURYLHNCQUNpREEsT0FEakQsd0IsNkJDSWpCTCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBR1QsSUFSeUI4eUUsRUFRa0ZDLElBUmxGRCxFQVFpQixFQUFRLE9BUG5DLGlCQUFtQkEsR0FBTSxZQUFhQSxFQUFLQSxFQUFHNXJCLFFBQVU0ckIsR0FPZ0IsRUFBUSxJQUErRGxvRSxPQUFRb29FLEVBQWtCRCxFQUFxQkMsZ0JBQWlCQyxFQUF1QkYsRUFBcUJFLHFCQUFzQkMsRUFBMkJILEVBQXFCRyx5QkFFaFZyMEUsRUFBUW0wRSxnQkFBa0JBLEVBQWlCbjBFLEVBQVFxMEUseUJBQTJCQSxFQUM5RXIwRSxFQUFRbzBFLHFCQUF1QkEsRyw2QkNWN0JuMEUsRUFBT0QsUUFBVSxFQUFRLE0sNkJDRDNCLFNBQVNzMEUsRUFBZ0JMLEdBQ3ZCLE9BQU9BLEdBQU0saUJBQW1CQSxHQUFNLFlBQWFBLEVBQUtBLEVBQUc1ckIsUUFBVTRyQixFQUd2RXJ6RSxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FDM0NtQixPQUFPLElBR1QsSUFBSW96RSxFQUFVRCxFQUFnQixFQUFRLE1BQWFsYixFQUFXa2IsRUFBZ0IsRUFBUSxNQUFtQjc2QyxFQUFPNjZDLEVBQWdCLEVBQVEsTUFBZUUsRUFBd0IsU0FBU3pvRSxHQUN0TCxPQUFPLFNBQVNtMkMsR0FDZCxJQUFLLElBQUkvdkMsRUFBT3NpRSxFQUFNLElBQUl2dkQsT0FBT25aLEVBQU10SyxJQUFNLG9CQUFxQixNQUFPZCxFQUFJLENBQzNFdWhELEtBQU1BLEVBQ052c0MsSUFBSyxHQUNMakIsSUFBSyxJQUNKaUIsRUFBTSxHQUFJLFFBQVV4RCxFQUFRc2lFLEVBQUkzZ0UsS0FBS291QyxVQUFVLElBQVd2c0MsRUFBSXhELEVBQU0sTUFBUXdELEVBQUl4RCxFQUFNLEtBQU0sR0FDL0YsT0FBT3hSLEVBQUVnVixJQUFNL1UsT0FBT29WLEtBQUtqSyxFQUFNNEIsVUFBVXlVLFFBQU8sU0FBU25VLEdBQ3pELFNBQUssSUFBVzBILEVBQUkxSCxTQUFPLElBQVdsQyxFQUFNNEMsV0FBVzVDLEVBQU10SyxJQUFNLElBQU13TSxNQUFRLElBQU9sQyxFQUFNNEIsU0FBU00sR0FBSyxPQUFPdE4sRUFBRStULEtBQU8zSSxFQUFNNEIsU0FBU00sSUFDM0ksS0FDRXROLElBSVIsU0FBUyt6RSxFQUFpQkMsRUFBUWgvRCxFQUFLckgsRUFBUXNtRSxHQUM3QyxNQUFPLHVCQUF5QkQsRUFBUyxLQUFPaC9ELEVBQUkzTSxVQUFVLEdBQUssSUFBTTRyRSxFQUFjLElBQU10bUUsRUFBUyxXQUd4RyxJQUFJdW1FLEVBQTZCLFNBQVM5b0UsRUFBTzZvRSxHQUMvQyxPQUFPLFNBQVMxeUIsR0FDZCxJQUFJdjBDLEVBQVc1QixFQUFNNEIsU0FBVWduRSxFQUFTNW9FLEVBQU10SyxJQUFLa04sRUFBYTVDLEVBQU00QyxXQUFZNGQsRUFBUSxJQUFJckgsT0FBTyxLQUFPeXZELEVBQVMsb0JBQXFCLE1BQU9HLEVBQU8sR0FBSXpoRSxFQUFTLEdBQUkwaEUsRUFBWSxHQUFJQyxFQUFlLEdBQ3hNLElBQUssSUFBSS9tRSxLQUFNTixFQUFVLEdBQUlBLEVBQVM1TCxlQUFla00sR0FBSyxDQUN4RCxJQUFJK2pELEVBQVFya0QsRUFBU00sSUFDckIsSUFBTytqRCxRQUFTLElBQVdyakQsRUFBV2dtRSxFQUFTLElBQU0xbUUsS0FBUSttRSxHQUFnQmhqQixFQUM3RStpQixHQUFhLElBQU05bUUsR0FFckIsS0FBTyttRSxJQUFpQjNoRSxFQUFTcWhFLEVBQWlCQyxFQUFRSSxFQUFXQyxFQUFjSixJQUNuRixJQUFLLElBQUl6aUUsRUFBT3dELEVBQU0sR0FBSXJILEVBQVMsR0FBSTJtRSxFQUFxQixFQUFHLFFBQVU5aUUsRUFBUW9hLEVBQU16WSxLQUFLb3VDLEtBQVUsR0FBSSxNQUFRL3ZDLEVBQU0sR0FBSSxDQUMxSCxJQUFJK2lFLEVBQU0vaUUsRUFBTSxHQUFJZ2pFLEVBQVN4bkUsRUFBU3VuRSxJQUN0QyxJQUFPQyxRQUFVLElBQVdBLEdBQVVMLEVBQUtJLEtBQVNKLEVBQUtJLElBQU8sRUFBSTVtRSxHQUFVNm1FLEVBQzlFeC9ELEdBQU8sSUFBTXUvRCxPQUNSLEtBQU92L0QsSUFBUXRDLEdBQVVxaEUsRUFBaUJDLEVBQVFoL0QsRUFBS3JILEVBQVFzbUUsR0FDdEVqL0QsRUFBTSxHQUFJckgsRUFBUyxJQUFLK0UsR0FBVTZ1QyxFQUFLbDVDLFVBQVVpc0UsRUFBb0I5aUUsRUFBTTZJLE9BQzNFaTZELEVBQXFCOWlFLEVBQU02SSxNQUMzQixPQUFPM0gsRUFBVTZ1QyxFQUFLbDVDLFVBQVVpc0UsS0FFakNHLEVBQWlDLFNBQVNycEUsRUFBTzZvRSxHQUNsRCxPQUFPLFdBQ0wsSUFBSVMsRUFBUSxHQUFJQyxFQUFjbGMsSUFBWW1jLEVBQWVoQixHQUFRLFNBQVNpQixHQUN4RSxJQUFJbHdFLEVBQU9rd0UsRUFBTSxHQUFJaDNDLEVBQU9nM0MsRUFBTSxHQUNsQyxHQUFJLFNBQVdsd0UsRUFBTSxDQUNuQixJQUFLLElBQUk2TSxFQUFPdUMsRUFBTSxHQUFJaUIsRUFBTSxHQUFJOC9ELEVBQVdqM0MsRUFBSzk2QixXQUFZNm9CLEVBQVEsSUFBSXJILE9BQU9uWixFQUFNdEssSUFBTSxvQkFBcUIsTUFBTyxRQUFVMFEsRUFBUW9hLEVBQU16WSxLQUFLMmhFLEtBQWMsT0FBU3RqRSxRQUFTLElBQVdrakUsRUFBTWxqRSxFQUFNLE1BQVF3RCxFQUFJeEQsRUFBTSxLQUFNLEdBQ3ZPdlIsT0FBT29WLEtBQUtqSyxFQUFNNEIsVUFBVTVGLFNBQVEsU0FBU2tHLElBQzNDLElBQU9sQyxFQUFNNEIsU0FBU00sU0FBTyxJQUFXb25FLEVBQU1wbkUsTUFBUSxJQUFPMEgsRUFBSTFILFNBQU8sSUFBV2xDLEVBQU00QyxXQUFXNUMsRUFBTXRLLElBQU0sSUFBTXdNLEtBQVEwSCxFQUFJMUgsSUFBTSxNQUFTb25FLEVBQU1wbkUsSUFBTSxFQUM3SnlHLEdBQU8zSSxFQUFNNEIsU0FBU00sT0FDcEIsS0FBT3lHLEdBQU8xUCxLQUFLc2EsTUFBTSx1QkFBeUJ2VCxFQUFNdEssSUFBTSxLQUFPYixPQUFPb1YsS0FBS0wsR0FBSy9QLEtBQUssS0FBTyxJQUFNZ3ZFLEVBQWMsSUFBTWxnRSxFQUFNLFlBRXhJMVAsS0FBS3NhLE1BQU1rZixNQUNWLFdBQ0R4NUIsS0FBS3NhLE1BQU0sU0FFYixPQUFPbWEsRUFBSzY3QyxFQUFhQyxLQWM3QnYxRSxFQUFRcW9ELFFBVlIsU0FBZXQ4QyxJQUNiLElBQU9BLEVBQU0yQyxTQUFXM0MsRUFBTTJDLFFBQVMsR0FDdkMsSUFBSWttRSxPQUFjLElBQVc3b0UsRUFBTTFGLE1BQVEsV0FBYTBGLEVBQU0xRixNQUFRLElBQU0sR0FDNUUsTUFBTyxDQUNMOHRFLGdCQUFpQkssRUFBc0J6b0UsR0FDdkNxb0UscUJBQXNCUyxFQUEyQjlvRSxFQUFPNm9FLEdBQ3hEUCx5QkFBMEJlLEVBQStCcnBFLEVBQU82b0UsTSxnQkN2RXBFLElBQUloK0MsRUFBUyxFQUFRLEdBWXJCLFNBQVMyOUMsRUFBUzk3QyxFQUFPMWhCLEVBQUttNUQsR0FDNUJ6M0MsRUFBUUEsR0FBUyxTQUFVK0YsR0FBUXg1QixLQUFLc2EsTUFBTWtmLElBQzlDem5CLEVBQU1BLEdBQU8sV0FBYy9SLEtBQUtzYSxNQUFNLE9BRXRDLElBQUkzSSxHQUFRLEVBQU9PLEdBQVksRUFBT2lLLEVBQVMsR0FBSXUwRCxHQUFTLEVBQ3hENytDLEVBQVMsSUFBSUQsRUFZakIsU0FBUysrQyxJQUNQLEtBQU14MEQsRUFBTzVkLFNBQVdzekIsRUFBTzJDLFFBQVEsQ0FDckMsSUFBSWdGLEVBQU9yZCxFQUFPNFksUUFDbEIsR0FBRyxPQUFTeUUsRUFDVixPQUFPM0gsRUFBT3dCLEtBQUssT0FFbkJ4QixFQUFPd0IsS0FBSyxPQUFRbUcsSUEyQjFCLFNBQVNvM0MsSUFDUC8rQyxFQUFPdmdCLFVBQVcsRUFDbEJTLEVBQUkxVyxLQUFLdzJCLElBQ0xBLEVBQU94Z0IsVUFBWXdnQixFQUFPZy9DLGFBQzVCaC9DLEVBQU9xSixVQXVDWCxPQXZGQXJKLEVBQU94Z0IsU0FBV3dnQixFQUFPdmdCLFVBQVcsRUFDcEN1Z0IsRUFBTzJDLFFBQVMsRUFHaEIzQyxFQUFPZy9DLGNBQWdCM0YsSUFBNkIsSUFBckJBLEVBQUsyRixhQUVwQ2gvQyxFQUFPNEIsTUFBUSxTQUFVK0YsR0FFdkIsT0FEQS9GLEVBQU1wNEIsS0FBSzJFLEtBQU13NUIsSUFDVDNILEVBQU8yQyxRQWFqQjNDLEVBQU92WCxNQUFRdVgsRUFBT3h2QixLQUFPLFNBQVVtM0IsR0FFckMsT0FBR2szQyxJQUNTLE9BQVRsM0MsSUFBZWszQyxHQUFTLEdBQzNCdjBELEVBQU85WixLQUFLbTNCLEdBQ1ptM0MsS0FIa0I5K0MsR0FhcEJBLEVBQU82QyxHQUFHLE9BQU8sV0FDZjdDLEVBQU94Z0IsVUFBVyxHQUNkd2dCLEVBQU92Z0IsVUFBWXVnQixFQUFPZy9DLGFBQzVCaDFELFFBQVFqSyxVQUFTLFdBQ2ZpZ0IsRUFBT3FKLGdCQVdickosRUFBTzlmLElBQU0sU0FBVXluQixHQUNyQixJQUFHN25CLEVBSUgsT0FIQUEsR0FBUSxFQUNMclQsVUFBVUMsUUFBUXN6QixFQUFPNEIsTUFBTStGLEdBQ2xDbzNDLElBQ08vK0MsR0FHVEEsRUFBT3FKLFFBQVUsV0FDZixJQUFHaHBCLEVBTUgsT0FMQUEsR0FBWSxFQUNaUCxHQUFRLEVBQ1J3SyxFQUFPNWQsT0FBUyxFQUNoQnN6QixFQUFPdmdCLFNBQVd1Z0IsRUFBT3hnQixVQUFXLEVBQ3BDd2dCLEVBQU93QixLQUFLLFNBQ0x4QixHQUdUQSxFQUFPK0MsTUFBUSxXQUNiLElBQUcvQyxFQUFPMkMsT0FFVixPQURBM0MsRUFBTzJDLFFBQVMsRUFDVDNDLEdBR1RBLEVBQU9nRCxPQUFTLFdBVWQsT0FUR2hELEVBQU8yQyxTQUNSM0MsRUFBTzJDLFFBQVMsRUFDaEIzQyxFQUFPd0IsS0FBSyxXQUVkczlDLElBR0k5K0MsRUFBTzJDLFFBQ1QzQyxFQUFPd0IsS0FBSyxTQUNQeEIsR0FFRkEsRUFsR0M1MkIsRUFBT0QsUUFBVXUwRSxFQUMzQkEsRUFBUUEsUUFBVUEsRyxnQkNSbEIsSUFBSXVCLEVBQWEsRUFBUSxLQUNyQnozQyxFQUFZLEVBQVEsS0FBbUJBLFVBQzVCLEVBQVEsRUFFdkJqOEIsQ0FBUzJ6RSxFQUFVMTNDLEdBQ25CcCtCLEVBQU9ELFFBQVUrMUUsRUFFakIsSUFBSUMsRUFDSSxJQUFJcnVFLFdBQVcsR0FEbkJxdUUsRUFFSSxJQUFJcnVFLFdBQVcsR0FGbkJxdUUsRUFHTyxJQUFJcnVFLFdBQVcsR0FIdEJxdUUsRUFJUSxJQUFJcnVFLFdBQVcsR0FKdkJxdUUsRUFLUSxJQUFJcnVFLFdBQVcsR0FMdkJxdUUsRUFNTyxJQUFJcnVFLFdBQVcsR0FHdEIrTCxFQUFVLENBQ1Z1aUUsVUFBV0gsRUFBVyxZQUN0QkksU0FBVUosRUFBVyxXQUNyQkssU0FBVUwsRUFBVyxXQUNyQnJwQyxRQUFTcXBDLEVBQVcsV0FDcEJNLFdBQVlOLEVBQVcsVUFDdkJoYixNQUFPZ2IsRUFBVyxhQUNsQk8sU0FBVVAsRUFBVyxRQUdyQlEsRUFDZ0IsRUFEaEJBLEVBRXNCLEVBRnRCQSxFQUc2QixFQUg3QkEsRUFJc0IsRUFHMUIsU0FBU1AsSUFDTCxLQUFNL3dFLGdCQUFnQit3RSxHQUFXLE9BQU8sSUFBSUEsRUFDNUMxM0MsRUFBVWgrQixLQUFLMkUsTUFDZkEsS0FBS2lTLGVBQWV3Z0IsWUFBYSxFQUNqQ3p5QixLQUFLZ3pCLE1BQVEsT0FDYmh6QixLQUFLdXhFLFNBQVcsS0FDaEJ2eEUsS0FBS3d4RSxXQUFhLEtBQ2xCeHhFLEtBQUsyTyxJQUFNLEtBQ1gzTyxLQUFLeXhFLFFBQVUsR0FDZnp4RSxLQUFLMHhFLE1BQVEsR0FvTWpCLFNBQVNwMUIsRUFBUzk0QyxFQUFHQyxHQUNqQixHQUFJRCxFQUFFakYsT0FBU2tGLEVBQUVsRixPQUFRLE9BQU8sRUFDaEMsSUFBSyxJQUFJckQsRUFBRXNJLEVBQUVqRixPQUFPLEVBQUcyVSxFQUFFelAsRUFBRWxGLE9BQU8sRUFBR3JELEdBQUssR0FBS2dZLEdBQUssRUFBR2hZLElBQUtnWSxJQUN4RCxHQUFJNjFCLEVBQU12bEMsRUFBRXRJLE1BQVE2dEMsRUFBTXRsQyxFQUFFeVAsSUFBSyxPQUFPLEVBRTVDLE9BQU8sRUFHWCxTQUFTNjFCLEVBQU9wc0MsR0FDWixPQUFJQSxHQUFLLElBQU1BLEdBQUssR0FBV0EsRUFBSSxHQUM1QkEsRUFHWCxTQUFTZzFFLEVBQWFsdUUsR0FDcEIsT0FBYSxLQUFOQSxHQUFvQixJQUFOQSxHQUFvQixLQUFOQSxHQUFvQixLQUFOQSxHQUFvQixLQUFOQSxFQS9NakVzdEUsRUFBU2owRSxVQUFVbTlCLFdBQWEsU0FBVWxkLEVBQUtpWCxFQUFLem1CLEdBQ2hELElBQUlyUyxFQUFJLEVBQ0p1ZixFQUFTLEVBVWIsSUFSSXphLEtBQUs0eEUsUUFDTDcwRCxFQUFNbGQsT0FBT3NkLE9BQU8sQ0FBRW5kLEtBQUs0eEUsTUFBTzcwRCxJQUNsQzdoQixFQUFJOEUsS0FBSzR4RSxNQUFNcnpFLE9BQVMsRUFDeEJrYyxFQUFTemEsS0FBSzZ4RSxRQUNkN3hFLEtBQUs0eEUsTUFBUSxLQUNiNXhFLEtBQUs2eEUsUUFBVSxHQUdaMzJFLEVBQUk2aEIsRUFBSXhlLE9BQVFyRCxJQUFLLENBQ3hCLElBQUl1SSxFQUFJc1osRUFBSTdoQixHQUlaLEdBSEE4RSxLQUFLMHhFLE1BQU1ydkUsS0FBS29CLEdBQ1p6RCxLQUFLMHhFLE1BQU1uekUsT0FBUyxHQUFHeUIsS0FBSzB4RSxNQUFNMzhDLFFBRWxDLzBCLEtBQUsyTyxJQUFLLENBQ1YsSUFBSTRHLEVBQVF2VixLQUFLOHhFLFNBQVMvMEQsRUFBS3RDLEVBQVF2ZixHQUNuQ3FhLElBQ0F2VixLQUFLcUMsS0FBSyxDQUFFLE9BQVFrVCxFQUFNLEtBRXRCdlYsS0FBSzJPLE1BQVFELEVBQVEwaUUsWUFDdEJweEUsS0FBSzJPLE1BQVFELEVBQVEyaUUsVUFDcEJyeEUsS0FBS2d6QixNQUFRLE9BQ2JoekIsS0FBS3l4RSxRQUFVLEdBQ2Z6eEUsS0FBS3FDLEtBQUssQ0FBRSxRQUFTa1QsRUFBTSxPQUczQnZWLEtBQUtnekIsTUFBUSxPQUNiaHpCLEtBQUt5eEUsUUFBVSxDQUFFbDhELEVBQU0sS0FHM0J2VixLQUFLMk8sSUFBTSxLQUNYOEwsRUFBU3ZmLEVBQUksT0FJaEIsSUFBbUIsU0FBZjhFLEtBQUtnekIsT0FBb0J2dkIsSUFBTXV0RSxHQUNyQzkxRSxJQUFNNmhCLEVBQUl4ZSxPQUFTLEVBR2xCLE9BRkF5QixLQUFLNHhFLE1BQVE3MEQsRUFDYi9jLEtBQUs2eEUsUUFBVXAzRCxFQUNSbE4sSUFHTixHQUFtQixTQUFmdk4sS0FBS2d6QixPQUFvQnZ2QixJQUFNdXRFLEdBQ3BDVyxFQUFhNTBELEVBQUk3aEIsRUFBRSxJQVNsQixHQUNEOEUsS0FBS3V4RSxXQUFhRCxHQUNsQkssRUFBYWx1RSxHQUViekQsS0FBS3V4RSxTQUFXRCxPQUVmLEdBQ0R0eEUsS0FBS3V4RSxXQUFhRCxHQUNsQjd0RSxJQUFNdXRFLEVBRU5oeEUsS0FBS3V4RSxTQUFXRCxPQUVmLEdBQ0R0eEUsS0FBS3V4RSxXQUFhRCxHQUNsQkssRUFBYWx1RSxTQUVaLEdBQ0R6RCxLQUFLdXhFLFdBQWFELEdBQ2Y3dEUsSUFBTXV0RSxFQUVUaHhFLEtBQUt1eEUsU0FBV0QsRUFFWnR4RSxLQUFLd3hFLFdBREwvdEUsSUFBTXV0RSxFQUNZLFNBQ1h2dEUsSUFBTXV0RSxFQUNLLFNBRUEsVUFHckIsR0FDRGh4RSxLQUFLdXhFLFdBQWFELElBQ2pCdHhFLEtBQUt3eEUsWUFDTkcsRUFBYWx1RSxHQUViekQsS0FBS3V4RSxTQUFXRCxPQUVmLEdBQ0R0eEUsS0FBS3V4RSxXQUFhRCxHQUNFLFdBQXBCdHhFLEtBQUt3eEUsWUFDTC90RSxJQUFNdXRFLEVBRU5oeEUsS0FBS3d4RSxXQUFhLEtBQ2xCeHhFLEtBQUt1eEUsU0FBV0QsT0FFZixHQUNEdHhFLEtBQUt1eEUsV0FBYUQsR0FDRSxXQUFwQnR4RSxLQUFLd3hFLFlBQ0wvdEUsSUFBTXV0RSxFQUVOaHhFLEtBQUt3eEUsV0FBYSxLQUNsQnh4RSxLQUFLdXhFLFNBQVdELE9BRWYsR0FBbUIsU0FBZnR4RSxLQUFLZ3pCLE9BQW9CdnZCLElBQU11dEUsR0FBYWh4RSxLQUFLd3hFLFdBZ0JsQyxTQUFmeHhFLEtBQUtnekIsT0FBb0JzcEIsRUFBUXQ4QyxLQUFLMHhFLE1BQU9oakUsRUFBUSs0QixVQUMxRHpuQyxLQUFLeXhFLFFBQVFwdkUsS0FBSzBhLEVBQUluSyxNQUFNNkgsRUFBUXZmLEVBQUksSUFDeEN1ZixFQUFTdmYsRUFBSSxFQUNiOEUsS0FBS2d6QixNQUFRLE9BQ2JoekIsS0FBSzJPLElBQU1ELEVBQVEwaUUsV0FDbkJweEUsS0FBSyt4RSxXQUFXLFNBRUksU0FBZi94RSxLQUFLZ3pCLE9BQW9Cc3BCLEVBQVF0OEMsS0FBSzB4RSxNQUFPaGpFLEVBQVFvbkQsU0FDMUQ5MUQsS0FBS3l4RSxRQUFRcHZFLEtBQUswYSxFQUFJbkssTUFBTTZILEVBQVF2ZixFQUFJLElBQ3hDdWYsRUFBU3ZmLEVBQUksRUFDYjhFLEtBQUtnekIsTUFBUSxPQUNiaHpCLEtBQUsyTyxJQUFNRCxFQUFRMmlFLFNBQ25CcnhFLEtBQUsreEUsV0FBVyxjQXZCaEIsR0FKQS94RSxLQUFLeXhFLFFBQVFwdkUsS0FBSzBhLEVBQUluSyxNQUFNNkgsRUFBUXZmLEVBQUksSUFDeEN1ZixFQUFTdmYsRUFBSSxFQUNiOEUsS0FBS2d6QixNQUFRLE9BQ2JoekIsS0FBS3V4RSxTQUFXLEtBQ1p2eEUsS0FBS2d5RSxTQUFTLEtBQU9oQixFQUNyQmh4RSxLQUFLK3hFLFdBQVcsYUFFZixDQUNELElBQUlud0UsRUFBTTVCLEtBQUtpeUUsVUFDSCxXQUFScndFLElBQWtCNUIsS0FBSzJPLElBQU1ELEVBQVF1aUUsV0FDN0IsVUFBUnJ2RSxJQUFpQjVCLEtBQUsyTyxJQUFNRCxFQUFRd2lFLFVBQzVCLFVBQVJ0dkUsSUFBaUI1QixLQUFLMk8sSUFBTUQsRUFBUXlpRSxVQUN4Q254RSxLQUFLK3hFLFdBQVcsYUF6RWhCNzJFLEVBQUksR0FBS0EsRUFBSXVmLEVBQVMsR0FDdEJ6YSxLQUFLeXhFLFFBQVFwdkUsS0FBSzBhLEVBQUluSyxNQUFNNkgsRUFBUXZmLElBRXhDdWYsRUFBU3ZmLEVBQ1Q4RSxLQUFLZ3pCLE1BQVEsT0FDYmh6QixLQUFLdXhFLFNBQVdELEVBQ2hCdHhFLEtBQUsreEUsV0FBVyxTQXFGcEJ0M0QsRUFBU3NDLEVBQUl4ZSxRQUFReUIsS0FBS3l4RSxRQUFRcHZFLEtBQUswYSxFQUFJbkssTUFBTTZILElBQ3JEbE4sS0FHSndqRSxFQUFTajBFLFVBQVVnOUIsT0FBUyxTQUFVdnNCLEdBQ2YsU0FBZnZOLEtBQUtnekIsT0FBa0JoekIsS0FBSyt4RSxXQUFXLFFBQzNDL3hFLEtBQUtxQyxLQUFLLE1BQ1ZrTCxLQUdKd2pFLEVBQVNqMEUsVUFBVWkxRSxXQUFhLFNBQVV6N0MsR0FDdEMsR0FBNEIsSUFBeEJ0MkIsS0FBS3l4RSxRQUFRbHpFLE9BQWpCLENBQ0EsSUFBSXdlLEVBQU1sZCxPQUFPc2QsT0FBT25kLEtBQUt5eEUsU0FDN0J6eEUsS0FBS3l4RSxRQUFVLEdBQ2Z6eEUsS0FBS3FDLEtBQUssQ0FBRWkwQixFQUFJdlosTUFHcEJnMEQsRUFBU2owRSxVQUFVazFFLFNBQVcsU0FBVTkyRSxHQUVwQyxJQURBLElBQUl1ZixFQUFTLEVBQ0p2SCxFQUFJLEVBQUdBLEVBQUlsVCxLQUFLeXhFLFFBQVFsekUsT0FBUTJVLElBQUssQ0FDMUMsSUFBSTZKLEVBQU0vYyxLQUFLeXhFLFFBQVF2K0QsR0FDdkIsR0FBSXVILEVBQVNzQyxFQUFJeGUsT0FBU3JELEVBQ3RCLE9BQU82aEIsRUFBSTdoQixFQUFJdWYsR0FFbkJBLEdBQVVzQyxJQUlsQmcwRCxFQUFTajBFLFVBQVVtMUUsUUFBVSxXQUd6QixJQUZBLElBQUl4M0QsRUFBUyxFQUNUN1ksRUFBTSxHQUNEc1IsRUFBSSxFQUFHQSxFQUFJbFQsS0FBS3l4RSxRQUFRbHpFLE9BQVEyVSxJQUFLLENBRTFDLElBREEsSUFBSTZKLEVBQU0vYyxLQUFLeXhFLFFBQVF2K0QsR0FDZHhOLEVBQUksRUFBR0EsRUFBSXFYLEVBQUl4ZSxPQUFRbUgsSUFDNUIsR0FBZSxJQUFYK1UsR0FBc0IsSUFBTi9VLEVBQXBCLENBQ0EsSUFBSW5LLEVBQUlvQyxPQUFPQyxhQUFhbWYsRUFBSXJYLElBQ2hDLEdBQUksY0FBY2xJLEtBQUtqQyxHQUNuQixPQUFPcUcsRUFBSXNMLGNBRVZ0TCxHQUFPckcsRUFFaEJrZixHQUFVc0MsRUFBSXhlLFNBSXRCd3lFLEVBQVNqMEUsVUFBVWcxRSxTQUFXLFNBQVUvMEQsRUFBS3RDLEVBQVF6RSxHQUNqRCxJQUFJckgsRUFBTTNPLEtBQUsyTyxJQUNmLEdBQUsydEMsRUFEc0J0OEMsS0FBSzB4RSxNQUNiL2lFLEdBQW5CLENBRUEzTyxLQUFLeXhFLFFBQVFwdkUsS0FBSzBhLEVBQUluSyxNQUFNNkgsRUFBUXpFLEVBQVEsSUFDNUMsSUFDSXRRLEdBREFxWCxFQUFNbGQsT0FBT3NkLE9BQU9uZCxLQUFLeXhFLFVBQ2pCbHpFLE9BQVNvUSxFQUFJcFEsT0FDekIsTUFBTyxDQUFFd2UsRUFBSW5LLE1BQU0sRUFBR2xOLEdBQUlxWCxFQUFJbkssTUFBTWxOLE8sY0MzT3hDLElBQUloSCxFQUFXOUMsT0FBT2tCLFVBQVU0QixTQUU1Qnd6RSxFQUNzQixtQkFBakJyeUUsT0FBTzRjLE9BQ2dCLG1CQUF2QjVjLE9BQU82YyxhQUNTLG1CQUFoQjdjLE9BQU8yYyxLQStEaEJ2aEIsRUFBT0QsUUFsQlAsU0FBcUJtQixFQUFPb2dCLEVBQWtCaGUsR0FDNUMsR0FBcUIsaUJBQVZwQyxFQUNULE1BQU0sSUFBSStmLFVBQVUseUNBR3RCLE9BL0NzQnlPLEVBK0NKeHVCLEVBOUMyQixnQkFBdEN1QyxFQUFTckQsS0FBS3N2QixHQUFPL1gsTUFBTSxHQUFJLEdBR3hDLFNBQTBCOUUsRUFBS3FrRSxFQUFZNXpFLEdBQ3pDNHpFLEtBQWdCLEVBRWhCLElBQUl2c0IsRUFBWTkzQyxFQUFJc2tFLFdBQWFELEVBRWpDLEdBQUl2c0IsRUFBWSxFQUNkLE1BQU0sSUFBSXlzQixXQUFXLDZCQUd2QixRQUFlcHhFLElBQVgxQyxFQUNGQSxFQUFTcW5ELE9BSVQsSUFGQXJuRCxLQUFZLEdBRUNxbkQsRUFDWCxNQUFNLElBQUl5c0IsV0FBVyw2QkFJekIsT0FBT0gsRUFDSHJ5RSxPQUFPMmMsS0FBSzFPLEVBQUk4RSxNQUFNdS9ELEVBQVlBLEVBQWE1ekUsSUFDL0MsSUFBSXNCLE9BQU8sSUFBSXc2QixXQUFXdnNCLEVBQUk4RSxNQUFNdS9ELEVBQVlBLEVBQWE1ekUsS0F1QnhEK3pFLENBQWdCbjJFLEVBQU9vZ0IsRUFBa0JoZSxHQUc3QixpQkFBVnBDLEVBdkJiLFNBQXFCNFIsRUFBUStPLEdBSzNCLEdBSndCLGlCQUFiQSxHQUFzQyxLQUFiQSxJQUNsQ0EsRUFBVyxTQUdSamQsT0FBTzYyQixXQUFXNVosR0FDckIsTUFBTSxJQUFJWixVQUFVLDhDQUd0QixPQUFPZzJELEVBQ0hyeUUsT0FBTzJjLEtBQUt6TyxFQUFRK08sR0FDcEIsSUFBSWpkLE9BQU9rTyxFQUFRK08sR0FhZHkxRCxDQUFXcDJFLEVBQU9vZ0IsR0FHcEIyMUQsRUFDSHJ5RSxPQUFPMmMsS0FBS3JnQixHQUNaLElBQUkwRCxPQUFPMUQsR0F6RGpCLElBQXdCd3VCLEksZ0JDUnhCLElBQUlpSCxFQUFTLEVBQVEsSUFDckI1MkIsRUFBVUMsRUFBT0QsUUFBVSxFQUFRLEtBQzNCNDJCLE9BQVNBLEVBQ2pCNTJCLEVBQVFrVyxTQUFXbFcsRUFDbkJBLEVBQVFtVyxTQUFXLEVBQVEsSUFDM0JuVyxFQUFRaVcsT0FBUyxFQUFRLElBQ3pCalcsRUFBUXErQixVQUFZLEVBQVEsSUFDNUJyK0IsRUFBUXczRSxZQUFjLEVBQVEsS0FDekIzMkQsUUFBUTBoQixTQUEyQyxZQUFoQzFoQixRQUFRMkQsSUFBSWl6RCxrQkFDbEN4M0UsRUFBT0QsUUFBVSxFQUFRLEssY0NUM0JDLEVBQU9ELFFBQVU2RCxNQUFNRixTQUFXLFNBQVVzVSxHQUMxQyxNQUE4QyxrQkFBdkNyWCxPQUFPa0IsVUFBVTRCLFNBQVNyRCxLQUFLNFgsSyxnQkN3QnhDaFksRUFBT0QsUUFBVXczRSxFQUVqQixJQUFJbjVDLEVBQVksRUFBUSxJQUdwQmw4QixFQUFPLEVBQVEsR0FNbkIsU0FBU3ExRSxFQUFZenlFLEdBQ25CLEtBQU1DLGdCQUFnQnd5RSxHQUNwQixPQUFPLElBQUlBLEVBQVl6eUUsR0FFekJzNUIsRUFBVWgrQixLQUFLMkUsS0FBTUQsR0FUdkI1QyxFQUFLQyxTQUFXLEVBQVEsR0FHeEJELEVBQUtDLFNBQVNvMUUsRUFBYW41QyxHQVMzQm01QyxFQUFZMTFFLFVBQVVtOUIsV0FBYSxTQUFTaEgsRUFBT25XLEVBQVV6SyxHQUMzREEsRUFBRyxLQUFNNGdCLEssZ0JDdkNYLElBQUl5L0MsRUFBVyxFQUFRLEtBQ25CRixFQUFjLEVBQVEsR0FBVUEsWUFDaEN0aEUsRUFBVyxFQUFRLEdBQVVzaEUsWUFDN0JHLEVBQWUsRUFBUSxJQU12Qi8vRCxFQUFRLEdBQUdBLE1BTVhnZ0UsRUFBYyxDQUNoQkMsY0FBYyxFQUNkcGdELFlBQVksR0FPZHgzQixFQUFPRCxRQVlQLFNBQWM4M0UsRUFBUzVILEVBQU03NEQsR0FDdEJ4VCxNQUFNRixRQUFRbTBFLEtBQ2pCQSxFQUFVbGdFLEVBQU12WCxLQUFLaUQsV0FDckI0c0UsRUFBTyxLQUNQNzRELEVBQUssTUFHUCxJQUFJMGdFLEVBQVVELEVBQVFBLEVBQVF2MEUsT0FBUyxHQUNuQyxtQkFBcUJ3MEUsSUFDdkIxZ0UsRUFBS3lnRSxFQUFRcjlELFFBQVEsR0FBRyxHQUN4QnM5RCxFQUFVRCxFQUFRQSxFQUFRdjBFLE9BQVMsSUFFakMsaUJBQW1CdzBFLEdBQWtDLG1CQUFoQkEsRUFBUXQrQyxPQUMvQ3kyQyxFQUFPNEgsRUFBUXI5RCxRQUFRLEdBQUcsSUFFNUIsSUFFSXZPLEVBRkFpL0QsRUFBUTJNLEVBQVEsR0FDaEIxekMsRUFBTzB6QyxFQUFRQSxFQUFRdjBFLE9BQVMsR0FJcEMsR0FGQTJzRSxFQUFPeUgsRUFBYSxHQUFJQyxFQUFhMUgsSUFFaEMvRSxFQUVILE9BREk5ekQsR0FBSXdKLFFBQVFqSyxTQUFTUyxHQUNsQixJQUFJbWdFLEVBQVl0SCxHQUdZaGtFLEVBQWpDaS9ELEVBQU03MEQsVUFBWTh0QixFQUFLL3RCLFNBQWdCcWhFLEVBQVN4SCxFQUFNL0UsRUFBTy9tQyxHQUN0QyxHQUFsQjB6QyxFQUFRdjBFLE9BQW1CLElBQUkyUyxFQUFTZzZELEdBQU0zMEMsS0FBS3U4QyxFQUFRLElBQzNEM00sRUFBTTcwRCxTQUFnQjYwRCxFQUN0Qi9tQyxFQUFLL3RCLFNBQWdCK3RCLEVBQ25CLElBQUlvekMsRUFBWXRILEdBUTNCLEdBTkE0SCxFQUFRL3ZFLFNBQVEsU0FBUzh1QixFQUFRMzJCLEdBQy9CLElBQUlxUyxFQUFPdWxFLEVBQVE1M0UsRUFBRSxHQUNqQnFTLEdBQU1za0IsRUFBTzRDLEtBQUtsbkIsR0FDbEJza0IsR0FBVTNxQixHQUFLMnFCLEVBQU82QyxHQUFHLFFBQVN4dEIsRUFBSW1zQixLQUFLMzJCLEtBQUt3SyxFQUFLLGFBR3ZEbUwsRUFBSSxDQUNOLElBQUlWLEdBQVEsRUFJWixTQUFTSSxFQUFJSyxHQUNQVCxJQUNKQSxHQUFRLEVBQ1JVLEVBQUdELElBTkxsTCxFQUFJd3RCLEdBQUcsUUFBUzNpQixHQUNoQnF0QixFQUFLMUssR0FBRyxVQUFVLFdBQVkzaUIsT0FDOUJxdEIsRUFBSzFLLEdBQUcsU0FBUyxXQUFZM2lCLE9BUS9CLE9BQU83SyxJLDZCQ3hGVCxJQUFJMnFCLEVBQVMsRUFBUSxLQUVyQixTQUFTbWhELEVBQWNqekUsRUFBU3VSLEVBQVVELFFBQ2hCLElBQWJBLElBQ1RBLEVBQVdDLEVBQ1hBLEVBQVd2UixFQUNYQSxFQUFVLE1BR1o4eEIsRUFBTzVnQixPQUFPNVYsS0FBSzJFLEtBQU1ELEdBRUksbUJBQWxCc1IsRUFBU3NpQixPQUNsQnRpQixFQUFXLElBQUt3Z0IsRUFBTzNnQixTQUFTblIsR0FBVXcyQixLQUFLbGxCLElBR2pEclIsS0FBS2l6RSxVQUFZM2hFLEVBQ2pCdFIsS0FBS2t6RSxVQUFZN2hFLEVBQ2pCclIsS0FBS216RSxVQUFXLEVBRWhCLElBQUlyaEUsRUFBTzlSLEtBRVhzUixFQUFTRSxLQUFLLFVBQVUsV0FDdEJNLEVBQUtDLFNBR1AvUixLQUFLd1IsS0FBSyxVQUFVLFdBQ2xCRixFQUFTUyxTQUdYVixFQUFTcWpCLEdBQUcsWUFBWSxXQUNsQjVpQixFQUFLcWhFLFdBQ1ByaEUsRUFBS3FoRSxVQUFXLEVBQ2hCcmhFLEVBQUtzakIsWUFJVC9qQixFQUFTRyxLQUFLLE9BQU8sV0FDbkJNLEVBQUt6UCxLQUFLLFNBR1B0QyxRQUEyQyxJQUF6QkEsRUFBUTh5RSxlQUFnQzl5RSxFQUFROHlFLGVBQ3JFdmhFLEVBQVNvakIsR0FBRyxTQUFTLFNBQVN0aUIsR0FDNUJOLEVBQUt1aEIsS0FBSyxRQUFTamhCLE1BR3JCZixFQUFTcWpCLEdBQUcsU0FBUyxTQUFTdGlCLEdBQzVCTixFQUFLdWhCLEtBQUssUUFBU2poQixPQUt6QjRnRSxFQUFjbDJFLFVBQVlsQixPQUFPWSxPQUFPcTFCLEVBQU81Z0IsT0FBT25VLFVBQVcsQ0FBQ2tyQyxZQUFhLENBQUM3ckMsTUFBTzYyRSxLQUV2RkEsRUFBY2wyRSxVQUFVNjdCLE9BQVMsU0FBZ0JoTyxFQUFPN04sRUFBVWlkLEdBQ2hFLzVCLEtBQUtpekUsVUFBVXgvQyxNQUFNOUksRUFBTzdOLEVBQVVpZCxJQUd4Q2k1QyxFQUFjbDJFLFVBQVVzNEIsTUFBUSxXQUc5QixJQUZBLElBQUlyWSxFQUNBcTJELEVBQVEsRUFDNkIsUUFBakNyMkQsRUFBTS9jLEtBQUtrekUsVUFBVXYvQyxTQUMzQjN6QixLQUFLcUMsS0FBSzBhLEdBQ1ZxMkQsSUFFWSxJQUFWQSxJQUNGcHpFLEtBQUttekUsVUFBVyxJQUlwQmw0RSxFQUFPRCxRQUFVLFNBQWlCK0UsRUFBU3VSLEVBQVVELEdBQ25ELE9BQU8sSUFBSTJoRSxFQUFjanpFLEVBQVN1UixFQUFVRCxJQUc5Q3BXLEVBQU9ELFFBQVFnNEUsY0FBZ0JBLEcsZ0JDM0UvQixJQUFJcGhELEVBQVMsRUFBUSxHQUNlLFlBQWhDL1YsUUFBUTJELElBQUlpekQsaUJBQWlDN2dELEdBQy9DMzJCLEVBQU9ELFFBQVU0MkIsR0FDakI1MkIsRUFBVUMsRUFBT0QsUUFBVTQyQixFQUFPMWdCLFVBQzFCQSxTQUFXMGdCLEVBQU8xZ0IsU0FDMUJsVyxFQUFRbVcsU0FBV3lnQixFQUFPemdCLFNBQzFCblcsRUFBUWlXLE9BQVMyZ0IsRUFBTzNnQixPQUN4QmpXLEVBQVFxK0IsVUFBWXpILEVBQU95SCxVQUMzQnIrQixFQUFRdzNFLFlBQWM1Z0QsRUFBTzRnRCxZQUM3QngzRSxFQUFRNDJCLE9BQVNBLEtBRWpCNTJCLEVBQVVDLEVBQU9ELFFBQVUsRUFBUSxLQUMzQjQyQixPQUFTQSxHQUFVNTJCLEVBQzNCQSxFQUFRa1csU0FBV2xXLEVBQ25CQSxFQUFRbVcsU0FBVyxFQUFRLElBQzNCblcsRUFBUWlXLE9BQVMsRUFBUSxJQUN6QmpXLEVBQVFxK0IsVUFBWSxFQUFRLElBQzVCcitCLEVBQVF3M0UsWUFBYyxFQUFRLE8sY0NqQmhDLElBQUk5ekUsRUFBVyxHQUFHQSxTQUVsQnpELEVBQU9ELFFBQVU2RCxNQUFNRixTQUFXLFNBQVVzVSxHQUMxQyxNQUE2QixrQkFBdEJ2VSxFQUFTckQsS0FBSzRYLEssNkJDQ3ZCLElBQUlwVCxFQUFTLEVBQVEsSUFBZUEsT0FDaEMxQyxFQUFPLEVBQVEsR0FNbkJsQyxFQUFPRCxRQUFVLFdBQ2YsU0FBU3kvQixLQVZYLFNBQXlCNDRDLEVBQVVDLEdBQWUsS0FBTUQsYUFBb0JDLEdBQWdCLE1BQU0sSUFBSXAzRCxVQUFVLHFDQVc1R3EzRCxDQUFnQnZ6RSxLQUFNeTZCLEdBRXRCejZCLEtBQUs0SSxLQUFPLEtBQ1o1SSxLQUFLZzhCLEtBQU8sS0FDWmg4QixLQUFLekIsT0FBUyxFQXFEaEIsT0FsREFrOEIsRUFBVzM5QixVQUFVdUYsS0FBTyxTQUFjc0IsR0FDeEMsSUFBSTQwQixFQUFRLENBQUVpQixLQUFNNzFCLEVBQUc0SixLQUFNLE1BQ3pCdk4sS0FBS3pCLE9BQVMsRUFBR3lCLEtBQUtnOEIsS0FBS3p1QixLQUFPZ3JCLEVBQVd2NEIsS0FBSzRJLEtBQU8ydkIsRUFDN0R2NEIsS0FBS2c4QixLQUFPekQsSUFDVnY0QixLQUFLekIsUUFHVGs4QixFQUFXMzlCLFVBQVU0MkIsUUFBVSxTQUFpQi92QixHQUM5QyxJQUFJNDBCLEVBQVEsQ0FBRWlCLEtBQU03MUIsRUFBRzRKLEtBQU12TixLQUFLNEksTUFDZCxJQUFoQjVJLEtBQUt6QixTQUFjeUIsS0FBS2c4QixLQUFPekQsR0FDbkN2NEIsS0FBSzRJLEtBQU8ydkIsSUFDVnY0QixLQUFLekIsUUFHVGs4QixFQUFXMzlCLFVBQVVpNEIsTUFBUSxXQUMzQixHQUFvQixJQUFoQi8wQixLQUFLekIsT0FBVCxDQUNBLElBQUkySSxFQUFNbEgsS0FBSzRJLEtBQUs0d0IsS0FHcEIsT0FGb0IsSUFBaEJ4NUIsS0FBS3pCLE9BQWN5QixLQUFLNEksS0FBTzVJLEtBQUtnOEIsS0FBTyxLQUFVaDhCLEtBQUs0SSxLQUFPNUksS0FBSzRJLEtBQUsyRSxPQUM3RXZOLEtBQUt6QixPQUNBMkksSUFHVHV6QixFQUFXMzlCLFVBQVUrK0IsTUFBUSxXQUMzQjc3QixLQUFLNEksS0FBTzVJLEtBQUtnOEIsS0FBTyxLQUN4Qmg4QixLQUFLekIsT0FBUyxHQUdoQms4QixFQUFXMzlCLFVBQVU4RCxLQUFPLFNBQWMzRCxHQUN4QyxHQUFvQixJQUFoQitDLEtBQUt6QixPQUFjLE1BQU8sR0FHOUIsSUFGQSxJQUFJdkIsRUFBSWdELEtBQUs0SSxLQUNUMUIsRUFBTSxHQUFLbEssRUFBRXc4QixLQUNWeDhCLEVBQUlBLEVBQUV1USxNQUNYckcsR0FBT2pLLEVBQUlELEVBQUV3OEIsS0FDZCxPQUFPdHlCLEdBR1Z1ekIsRUFBVzM5QixVQUFVcWdCLE9BQVMsU0FBZ0J4Z0IsR0FDNUMsR0FBb0IsSUFBaEJxRCxLQUFLekIsT0FBYyxPQUFPc0IsRUFBTzRjLE1BQU0sR0FDM0MsR0FBb0IsSUFBaEJ6YyxLQUFLekIsT0FBYyxPQUFPeUIsS0FBSzRJLEtBQUs0d0IsS0FJeEMsSUFIQSxJQXBEZ0JwbUIsRUFBSy9VLEVBQVFvYyxFQW9EekJ2VCxFQUFNckgsRUFBTzZjLFlBQVkvZixJQUFNLEdBQy9CSyxFQUFJZ0QsS0FBSzRJLEtBQ1QxTixFQUFJLEVBQ0Q4QixHQXZEU29XLEVBd0RIcFcsRUFBRXc4QixLQXhETW43QixFQXdEQTZJLEVBeERRdVQsRUF3REh2ZixFQXZENUJrWSxFQUFJNmhCLEtBQUs1MkIsRUFBUW9jLEdBd0RidmYsR0FBSzhCLEVBQUV3OEIsS0FBS2o3QixPQUNadkIsRUFBSUEsRUFBRXVRLEtBRVIsT0FBT3JHLEdBR0Z1ekIsRUEzRFEsR0E4RGJ0OUIsR0FBUUEsRUFBS3EyRSxTQUFXcjJFLEVBQUtxMkUsUUFBUUMsU0FDdkN4NEUsRUFBT0QsUUFBUThCLFVBQVVLLEVBQUtxMkUsUUFBUUMsUUFBVSxXQUM5QyxJQUFJM2xFLEVBQU0zUSxFQUFLcTJFLFFBQVEsQ0FBRWoxRSxPQUFReUIsS0FBS3pCLFNBQ3RDLE9BQU95QixLQUFLZ29DLFlBQVl2c0MsS0FBTyxJQUFNcVMsSyxnQkN2RXpDN1MsRUFBT0QsUUFBVSxFQUFRLEdBQVEwaUMsVyw2QkNzQmpDemlDLEVBQU9ELFFBQVV3M0UsRUFFakIsSUFBSW41QyxFQUFZLEVBQVEsSUFHcEJsOEIsRUFBT3ZCLE9BQU9ZLE9BQU8sRUFBUSxJQU1qQyxTQUFTZzJFLEVBQVl6eUUsR0FDbkIsS0FBTUMsZ0JBQWdCd3lFLEdBQWMsT0FBTyxJQUFJQSxFQUFZenlFLEdBRTNEczVCLEVBQVVoK0IsS0FBSzJFLEtBQU1ELEdBUnZCNUMsRUFBS0MsU0FBVyxFQUFRLEdBR3hCRCxFQUFLQyxTQUFTbzFFLEVBQWFuNUMsR0FRM0JtNUMsRUFBWTExRSxVQUFVbTlCLFdBQWEsU0FBVWhILEVBQU9uVyxFQUFVekssR0FDNURBLEVBQUcsS0FBTTRnQixLLDZCQzFDVGg0QixFQUFPRCxRQUFVLEVBQVEsTTs7Ozs7Ozs7R0NNZCxJQUFJMEssRUFBRSxFQUFRLElBQWlCcEssRUFBRSxFQUFRLEdBQVMrSSxFQUFHLEVBQVEsR0FBVSxTQUFTckksRUFBRXdILEdBQUcsSUFBSSxJQUFJQyxFQUFFLHlEQUF5REQsRUFBRWpJLEVBQUUsRUFBRUEsRUFBRStDLFVBQVVDLE9BQU9oRCxJQUFJa0ksR0FBRyxXQUFXdzFDLG1CQUFtQjM2QyxVQUFVL0MsSUFBSSxNQUFNLHlCQUF5QmlJLEVBQUUsV0FBV0MsRUFBRSxpSEFDL1IsSUFBSXFDLEVBQUUsbUJBQW9CN0osUUFBUUEsT0FBTys4QyxJQUFJejBDLEVBQUd1QixFQUFFN0osT0FBTys4QyxJQUFJLGdCQUFnQixNQUFNcjFDLEVBQUVtQyxFQUFFN0osT0FBTys4QyxJQUFJLGtCQUFrQixNQUFNN3lDLEVBQUdMLEVBQUU3SixPQUFPKzhDLElBQUkscUJBQXFCLE1BQU0zeUMsRUFBR1AsRUFBRTdKLE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTS8wQyxFQUFFNkIsRUFBRTdKLE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTXAwQyxFQUFHa0IsRUFBRTdKLE9BQU8rOEMsSUFBSSxpQkFBaUIsTUFBTTF5QyxFQUFHUixFQUFFN0osT0FBTys4QyxJQUFJLHlCQUF5QixNQUFNdnlDLEVBQUdYLEVBQUU3SixPQUFPKzhDLElBQUkscUJBQXFCLE1BQU01ekMsRUFBRVUsRUFBRTdKLE9BQU8rOEMsSUFBSSxrQkFBa0IsTUFBTXoxQyxFQUFHdUMsRUFBRTdKLE9BQU8rOEMsSUFBSSx1QkFBdUIsTUFBTTcwQyxFQUFHMkIsRUFBRTdKLE9BQU8rOEMsSUFBSSxjQUFjLE1BQU01MEMsRUFBRzBCLEVBQUU3SixPQUFPKzhDLElBQUksY0FDN2YsTUFBTXgwQyxFQUFHc0IsRUFBRTdKLE9BQU8rOEMsSUFBSSxlQUFlLE1BQU12MEMsRUFBR3FCLEVBQUU3SixPQUFPKzhDLElBQUkscUJBQXFCLE1BQU1yMEMsRUFBR21CLEVBQUU3SixPQUFPKzhDLElBQUksZUFBZSxNQUNySCxTQUFTcHpDLEVBQUVwQyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEtBQUssR0FBRyxtQkFBb0JBLEVBQUUsT0FBT0EsRUFBRXdrQixhQUFheGtCLEVBQUUvSCxNQUFNLEtBQUssR0FBRyxpQkFBa0IrSCxFQUFFLE9BQU9BLEVBQUUsT0FBT0EsR0FBRyxLQUFLRyxFQUFFLE1BQU0sV0FBVyxLQUFLWSxFQUFHLE1BQU0sU0FBUyxLQUFLOEIsRUFBRyxNQUFNLFdBQVcsS0FBS0YsRUFBRyxNQUFNLGFBQWEsS0FBS2YsRUFBRSxNQUFNLFdBQVcsS0FBSzdCLEVBQUcsTUFBTSxlQUFlLEdBQUcsaUJBQWtCQyxFQUFFLE9BQU9BLEVBQUV1MkMsVUFBVSxLQUFLbjFDLEVBQUcsTUFBTSxtQkFBbUIsS0FBS1gsRUFBRSxNQUFNLG1CQUFtQixLQUFLd0MsRUFBRyxJQUFJaEQsRUFBRUQsRUFBRXU0QyxPQUFtQyxPQUE1QnQ0QyxFQUFFQSxFQUFFdWtCLGFBQWF2a0IsRUFBRWhJLE1BQU0sR0FBVStILEVBQUV3a0IsY0FBYyxLQUFLdmtCLEVBQUUsY0FBY0EsRUFBRSxJQUFJLGNBQ25mLEtBQUtVLEVBQUcsT0FBT3lCLEVBQUVwQyxFQUFFbEQsTUFBTSxLQUFLa0UsRUFBRyxPQUFPb0IsRUFBRXBDLEVBQUV1NEMsUUFBUSxLQUFLMzNDLEVBQUcsR0FBR1osRUFBRSxJQUFJQSxFQUFFMjRDLFFBQVEzNEMsRUFBRTQ0QyxRQUFRLEtBQUssT0FBT3gyQyxFQUFFcEMsR0FBRyxPQUFPLEtBQUssSUFBSStCLEVBQUVqSyxFQUFFNC9DLG1EQUFtRDMxQyxFQUFFeEksZUFBZSw0QkFBNEJ3SSxFQUFFODBDLHVCQUF1QixDQUFDL3lDLFFBQVEsT0FBTy9CLEVBQUV4SSxlQUFlLDZCQUE2QndJLEVBQUUrMEMsd0JBQXdCLENBQUNDLFNBQVMsT0FBTyxJQUFJbTVCLEVBQUcsR0FBRyxTQUFTbHRFLEVBQUVoRCxFQUFFQyxHQUFHLElBQUksSUFBSWxJLEVBQWlCLEVBQWZpSSxFQUFFZzRDLGFBQWVqZ0QsR0FBR2tJLEVBQUVsSSxJQUFJaUksRUFBRWpJLEdBQUdpSSxFQUFFKzNDLGVBQWUvM0MsRUFBRWc0QyxhQUFhamdELEVBQUUsRUFDN1IsSUFBSSxJQUFJc0ksRUFBRSxJQUFJOHZFLFlBQVksSUFBSTd1RSxFQUFFLEVBQUUsR0FBR0EsRUFBRUEsSUFBSWpCLEVBQUVpQixHQUFHQSxFQUFFLEVBQUVqQixFQUFFLElBQUksRUFDbE8sSUFBSSt2RSxFQUFHLDhWQUE4VkMsRUFBR2o0RSxPQUFPa0IsVUFBVUMsZUFBZSsyRSxFQUFHLEdBQUdDLEVBQUcsR0FDalosU0FBU0MsRUFBR3h3RSxHQUFHLFFBQUdxd0UsRUFBR3g0RSxLQUFLMDRFLEVBQUd2d0UsS0FBZXF3RSxFQUFHeDRFLEtBQUt5NEUsRUFBR3R3RSxLQUFlb3dFLEVBQUdwMkUsS0FBS2dHLEdBQVV1d0UsRUFBR3Z3RSxJQUFHLEdBQUdzd0UsRUFBR3R3RSxJQUFHLEdBQVMsSUFDd0csU0FBU3dDLEVBQUV4QyxFQUFFQyxFQUFFbEksRUFBRUMsRUFBRXlLLEVBQUU3QyxHQUFHcEQsS0FBS2kwRSxnQkFBZ0IsSUFBSXh3RSxHQUFHLElBQUlBLEdBQUcsSUFBSUEsRUFBRXpELEtBQUtrMEUsY0FBYzE0RSxFQUFFd0UsS0FBS20wRSxtQkFBbUJsdUUsRUFBRWpHLEtBQUs2VCxnQkFBZ0J0WSxFQUFFeUUsS0FBS28wRSxhQUFhNXdFLEVBQUV4RCxLQUFLTSxLQUFLbUQsRUFBRXpELEtBQUtxMEUsWUFBWWp4RSxFQUFFLElBQUl5QyxFQUFFLEdBQ3haLHVJQUF1SXZDLE1BQU0sS0FBS1AsU0FBUSxTQUFTUyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXdDLEVBQUV4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLE1BQU0sQ0FBQyxDQUFDLGdCQUFnQixrQkFBa0IsQ0FBQyxZQUFZLFNBQVMsQ0FBQyxVQUFVLE9BQU8sQ0FBQyxZQUFZLGVBQWVULFNBQVEsU0FBU1MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUdxQyxFQUFFcEMsR0FBRyxJQUFJdUMsRUFBRXZDLEVBQUUsR0FBRSxFQUFHRCxFQUFFLEdBQUcsTUFBSyxNQUFNLENBQUMsa0JBQWtCLFlBQVksYUFBYSxTQUFTVCxTQUFRLFNBQVNTLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJd0MsRUFBRXhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFMEosY0FBYyxNQUFLLE1BQzlkLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUJuSyxTQUFRLFNBQVNTLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJd0MsRUFBRXhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSx3TkFBd05GLE1BQU0sS0FBS1AsU0FBUSxTQUFTUyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXdDLEVBQUV4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRTBKLGNBQWMsTUFBSyxNQUN6WixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVluSyxTQUFRLFNBQVNTLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJd0MsRUFBRXhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSxDQUFDLFVBQVUsWUFBWVQsU0FBUSxTQUFTUyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXdDLEVBQUV4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLE1BQU0sQ0FBQyxPQUFPLE9BQU8sT0FBTyxRQUFRVCxTQUFRLFNBQVNTLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJd0MsRUFBRXhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSxDQUFDLFVBQVUsU0FBU1QsU0FBUSxTQUFTUyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXdDLEVBQUV4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRTBKLGNBQWMsTUFBSyxNQUFNLElBQUloSixFQUFFLGdCQUFnQixTQUFTdUIsRUFBRWpDLEdBQUcsT0FBT0EsRUFBRSxHQUFHc1AsY0FDN1gsMGpDQUEwakN4UCxNQUFNLEtBQUtQLFNBQVEsU0FBU1MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFSSxRQUFRTSxFQUN6bUN1QixHQUFHSSxFQUFFcEMsR0FBRyxJQUFJdUMsRUFBRXZDLEVBQUUsR0FBRSxFQUFHRCxFQUFFLE1BQUssTUFBTSwyRUFBMkVGLE1BQU0sS0FBS1AsU0FBUSxTQUFTUyxHQUFHLElBQUlDLEVBQUVELEVBQUVJLFFBQVFNLEVBQUV1QixHQUFHSSxFQUFFcEMsR0FBRyxJQUFJdUMsRUFBRXZDLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixNQUFNLENBQUMsV0FBVyxXQUFXLGFBQWFULFNBQVEsU0FBU1MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFSSxRQUFRTSxFQUFFdUIsR0FBR0ksRUFBRXBDLEdBQUcsSUFBSXVDLEVBQUV2QyxFQUFFLEdBQUUsRUFBR0QsRUFBRSx3Q0FBdUMsTUFBTSxDQUFDLFdBQVcsZUFBZVQsU0FBUSxTQUFTUyxHQUFHcUMsRUFBRXJDLEdBQUcsSUFBSXdDLEVBQUV4QyxFQUFFLEdBQUUsRUFBR0EsRUFBRTBKLGNBQWMsTUFBSyxNQUM5YnJILEVBQUV5dUUsVUFBVSxJQUFJdHVFLEVBQUUsWUFBWSxHQUFFLEVBQUcsYUFBYSxnQ0FBK0IsR0FBSSxDQUFDLE1BQU0sT0FBTyxTQUFTLGNBQWNqRCxTQUFRLFNBQVNTLEdBQUdxQyxFQUFFckMsR0FBRyxJQUFJd0MsRUFBRXhDLEVBQUUsR0FBRSxFQUFHQSxFQUFFMEosY0FBYyxNQUFLLE1BQU0sSUFBSXFuRSxFQUFHLFVBQ2hNLFNBQVNydUUsRUFBRTFDLEdBQUcsR0FBRyxrQkFBbUJBLEdBQUcsaUJBQWtCQSxFQUFFLE1BQU0sR0FBR0EsRUFBRUEsRUFBRSxHQUFHQSxFQUFFLElBQUlDLEVBQUU4d0UsRUFBR3psRSxLQUFLdEwsR0FBRyxHQUFHQyxFQUFFLENBQUMsSUFBU2pJLEVBQUxELEVBQUUsR0FBSzBLLEVBQUUsRUFBRSxJQUFJekssRUFBRWlJLEVBQUV1UyxNQUFNeGEsRUFBRWdJLEVBQUVqRixPQUFPL0MsSUFBSSxDQUFDLE9BQU9nSSxFQUFFYixXQUFXbkgsSUFBSSxLQUFLLEdBQUdpSSxFQUFFLFNBQVMsTUFBTSxLQUFLLEdBQUdBLEVBQUUsUUFBUSxNQUFNLEtBQUssR0FBR0EsRUFBRSxTQUFTLE1BQU0sS0FBSyxHQUFHQSxFQUFFLE9BQU8sTUFBTSxLQUFLLEdBQUdBLEVBQUUsT0FBTyxNQUFNLFFBQVEsU0FBU3dDLElBQUl6SyxJQUFJRCxHQUFHaUksRUFBRVEsVUFBVWlDLEVBQUV6SyxJQUFJeUssRUFBRXpLLEVBQUUsRUFBRUQsR0FBR2tJLEVBQUVELEVBQUV5QyxJQUFJekssRUFBRUQsRUFBRWlJLEVBQUVRLFVBQVVpQyxFQUFFekssR0FBR0QsRUFBRSxPQUFPaUksRUFDOVgsU0FBU2d4RSxFQUFHaHhFLEVBQUVDLEdBQUcsSUFBd0NqSSxFQUFwQ0QsRUFBRXNLLEVBQUU5SSxlQUFleUcsR0FBR3FDLEVBQUVyQyxHQUFHLEtBQXNILE9BQXhHaEksRUFBRSxVQUFVZ0ksS0FBRWhJLEVBQUUsT0FBT0QsRUFBRSxJQUFJQSxFQUFFK0UsS0FBTyxFQUFFa0QsRUFBRWpGLFNBQVMsTUFBTWlGLEVBQUUsSUFBSSxNQUFNQSxFQUFFLE1BQUksTUFBTUEsRUFBRSxJQUFJLE1BQU1BLEVBQUUsS0FBWWhJLEdBUnpLLFNBQVlnSSxFQUFFQyxFQUFFbEksRUFBRUMsR0FBRyxHQUFHLE1BQU9pSSxHQURvRixTQUFZRCxFQUFFQyxFQUFFbEksRUFBRUMsR0FBRyxHQUFHLE9BQU9ELEdBQUcsSUFBSUEsRUFBRStFLEtBQUssT0FBTSxFQUFHLGNBQWNtRCxHQUFHLElBQUssV0FBVyxJQUFLLFNBQVMsT0FBTSxFQUFHLElBQUssVUFBVSxPQUFHakksSUFBYyxPQUFPRCxHQUFTQSxFQUFFMDRFLGdCQUFtRCxXQUFuQ3p3RSxFQUFFQSxFQUFFMEosY0FBYzBGLE1BQU0sRUFBRSxLQUFzQixVQUFVcFAsR0FBRSxRQUFRLE9BQU0sR0FDblRpeEUsQ0FBR2p4RSxFQUFFQyxFQUFFbEksRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPRCxFQUFFLE9BQU9BLEVBQUUrRSxNQUFNLEtBQUssRUFBRSxPQUFPbUQsRUFBRSxLQUFLLEVBQUUsT0FBTSxJQUFLQSxFQUFFLEtBQUssRUFBRSxPQUFPdW5CLE1BQU12bkIsR0FBRyxLQUFLLEVBQUUsT0FBT3VuQixNQUFNdm5CLElBQUksRUFBRUEsRUFBRSxPQUFNLEVBUXpDaXhFLENBQUdseEUsRUFBRUMsRUFBRWxJLEdBQUUsR0FBVSxHQUFNLE9BQU9BLEdBQUdpSSxFQUFFakksRUFBRTI0RSxjQUEwQixLQUFaMTRFLEVBQUVELEVBQUUrRSxPQUFlLElBQUk5RSxJQUFHLElBQUtpSSxFQUFTRCxFQUFFLE9BQU1qSSxFQUFFODRFLGNBQWM1d0UsRUFBRSxHQUFHQSxHQUFVRCxFQUFFLEtBQU0wQyxFQUFFekMsR0FBRyxNQUFZdXdFLEVBQUd4d0UsR0FBR0EsRUFBRSxLQUFNMEMsRUFBRXpDLEdBQUcsSUFBSyxHQUNqVyxJQUFJa3hFLEVBQUcsbUJBQW9CLzRFLE9BQU9vcEQsR0FBR3BwRCxPQUFPb3BELEdBRHdULFNBQVl4aEQsRUFBRUMsR0FBRyxPQUFPRCxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBRUEsR0FBSSxFQUFFQyxJQUFJRCxHQUFJQSxHQUFHQyxHQUFJQSxHQUNoWDJDLEVBQUUsS0FBS3JDLEVBQUUsS0FBSzJDLEVBQUUsS0FBS2hDLEdBQUUsRUFBR1MsR0FBRSxFQUFHRSxFQUFFLEtBQUs4MEMsRUFBRSxFQUFFLFNBQVNqM0MsSUFBSSxHQUFHLE9BQU9rRCxFQUFFLE1BQU0zRyxNQUFNekQsRUFBRSxNQUFNLE9BQU9vSyxFQUFFLFNBQVN3dUUsSUFBSyxHQUFHLEVBQUV6NkIsRUFBRSxNQUFNMTZDLE1BQU16RCxFQUFFLE1BQU0sTUFBTSxDQUFDNjRFLGNBQWMsS0FBS3Y2RCxNQUFNLEtBQUsvTSxLQUFLLE1BQU0sU0FBU3VuRSxJQUFxRyxPQUFoRyxPQUFPcHVFLEVBQUUsT0FBTzNDLEdBQUdXLEdBQUUsRUFBR1gsRUFBRTJDLEVBQUVrdUUsTUFBT2x3RSxHQUFFLEVBQUdnQyxFQUFFM0MsR0FBRyxPQUFPMkMsRUFBRTZHLE1BQU03SSxHQUFFLEVBQUdnQyxFQUFFQSxFQUFFNkcsS0FBS3FuRSxNQUFPbHdFLEdBQUUsRUFBR2dDLEVBQUVBLEVBQUU2RyxNQUFhN0csRUFBRSxTQUFTcXVFLEVBQUd2eEUsRUFBRUMsRUFBRWxJLEVBQUVDLEdBQUcsS0FBSzJKLEdBQUdBLEdBQUUsRUFBR2cxQyxHQUFHLEVBQUV6ekMsRUFBRSxLQUFLbkwsRUFBRWlJLEVBQUVDLEVBQUVqSSxHQUF5QixPQUF0QnVJLEVBQUVxQyxFQUFFLEtBQUsrekMsRUFBRSxFQUFFenpDLEVBQUVyQixFQUFFLEtBQVk5SixFQUFFLFNBQVN5NUUsRUFBR3h4RSxFQUFFQyxHQUFHLE1BQU0sbUJBQW9CQSxFQUFFQSxFQUFFRCxHQUFHQyxFQUMxZSxTQUFTd3hFLEdBQUd6eEUsRUFBRUMsRUFBRWxJLEdBQWdCLEdBQWI2SyxFQUFFbEQsSUFBSXdELEVBQUVvdUUsSUFBUXB3RSxFQUFFLENBQUMsSUFBSWxKLEVBQUVrTCxFQUFFNFQsTUFBbUIsR0FBYjdXLEVBQUVqSSxFQUFFMDVFLFNBQVksT0FBTzd2RSxRQUFlLEtBQVg5SixFQUFFOEosRUFBRXRKLElBQUlQLElBQWUsQ0FBQzZKLEVBQUU0b0UsT0FBT3p5RSxHQUFHQSxFQUFFa0wsRUFBRW11RSxjQUFjLEdBQUdyNUUsRUFBRWdJLEVBQUVoSSxFQUFFRCxFQUFFeWxCLFFBQVF6bEIsRUFBRUEsRUFBRWdTLFdBQVcsT0FBT2hTLEdBQXFCLE9BQWxCbUwsRUFBRW11RSxjQUFjcjVFLEVBQVEsQ0FBQ0EsRUFBRWlJLEdBQUcsTUFBTSxDQUFDaUQsRUFBRW11RSxjQUFjcHhFLEdBQStJLE9BQTVJRCxFQUFFQSxJQUFJd3hFLEVBQUcsbUJBQW9CdnhFLEVBQUVBLElBQUlBLE9BQUUsSUFBU2xJLEVBQUVBLEVBQUVrSSxHQUFHQSxFQUFFaUQsRUFBRW11RSxjQUFjcnhFLEVBQXNDQSxHQUFwQ0EsRUFBRWtELEVBQUU0VCxNQUFNLENBQUM4a0IsS0FBSyxLQUFLODFDLFNBQVMsT0FBVUEsU0FBU0MsR0FBR3o0RSxLQUFLLEtBQUswSixFQUFFNUMsR0FBUyxDQUFDa0QsRUFBRW11RSxjQUFjcnhFLEdBQzVZLFNBQVMyeEUsR0FBRzN4RSxFQUFFQyxFQUFFbEksR0FBRyxLQUFLLEdBQUc0K0MsR0FBRyxNQUFNMTZDLE1BQU16RCxFQUFFLE1BQU0sR0FBR3dILElBQUk0QyxFQUFFLEdBQUdqQixHQUFFLEVBQUczQixFQUFFLENBQUN3ZCxPQUFPemxCLEVBQUVnUyxLQUFLLE1BQU0sT0FBT2xJLElBQUlBLEVBQUUsSUFBSSsvQixVQUFnQixLQUFYN3BDLEVBQUU4SixFQUFFdEosSUFBSTBILElBQWM0QixFQUFFd0IsSUFBSXBELEVBQUVELE9BQU8sQ0FBQyxJQUFJQyxFQUFFbEksRUFBRSxPQUFPa0ksRUFBRThKLE1BQU05SixFQUFFQSxFQUFFOEosS0FBSzlKLEVBQUU4SixLQUFLL0osR0FBRyxTQUFTNHhFLE1BQ3pNLElBQUlqeUUsR0FBRSxFQUFFa3lFLEdBQUcsQ0FBQ0MsWUFBWSxTQUFTOXhFLEdBQUcsSUFBSUMsRUFBRU4sR0FBUyxPQUFQcUQsRUFBRWhELEVBQUVDLEdBQVVELEVBQUVDLElBQUkrNEMsV0FBVyxTQUFTaDVDLEdBQUdOLElBQUksSUFBSU8sRUFBRU4sR0FBUyxPQUFQcUQsRUFBRWhELEVBQUVDLEdBQVVELEVBQUVDLElBQUlvNUMsUUFBUSxTQUFTcjVDLEVBQUVDLEdBQW9DLEdBQWpDMkMsRUFBRWxELElBQVdPLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFLLFFBQTlCaUQsRUFBRW91RSxLQUFxQyxDQUFDLElBQUl2NUUsRUFBRW1MLEVBQUVtdUUsY0FBYyxHQUFHLE9BQU90NUUsR0FBRyxPQUFPa0ksRUFBRSxDQUFDRCxFQUFFLENBQUMsSUFBSWhJLEVBQUVELEVBQUUsR0FBRyxHQUFHLE9BQU9DLEVBQUVBLEdBQUUsTUFBTyxDQUFDLElBQUksSUFBSXlLLEVBQUUsRUFBRUEsRUFBRXpLLEVBQUUrQyxRQUFRMEgsRUFBRXhDLEVBQUVsRixPQUFPMEgsSUFBSSxJQUFJMHVFLEVBQUdseEUsRUFBRXdDLEdBQUd6SyxFQUFFeUssSUFBSSxDQUFDekssR0FBRSxFQUFHLE1BQU1nSSxFQUFFaEksR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBT0QsRUFBRSxJQUFnQyxPQUE1QmlJLEVBQUVBLElBQUlrRCxFQUFFbXVFLGNBQWMsQ0FBQ3J4RSxFQUFFQyxHQUFVRCxHQUFHczVDLFdBQVdtNEIsR0FBR2w0QixPQUFPLFNBQVN2NUMsR0FBRzRDLEVBQUVsRCxJQUFXLElBQUlPLEdBQVhpRCxFQUFFb3VFLEtBQWFELGNBQWMsT0FBTyxPQUFPcHhFLEdBQUdELEVBQUUsQ0FBQzhELFFBQVE5RCxHQUFHa0QsRUFBRW11RSxjQUN0ZnJ4RSxHQUFHQyxHQUFHdTVDLFNBQVMsU0FBU3g1QyxHQUFHLE9BQU95eEUsR0FBR0QsRUFBR3h4RSxJQUFJbzVDLGdCQUFnQixhQUFhTCxZQUFZLFNBQVMvNEMsR0FBRyxPQUFPQSxHQUFHbTVDLG9CQUFvQnk0QixHQUFHMTRCLFVBQVUwNEIsR0FBRzM0QixjQUFjMjRCLEdBQUdHLGFBQWEsU0FBUy94RSxFQUFFQyxHQUFHLE1BQU0sQ0FBQ3NRLE1BQU10USxFQUFFK3hFLFVBQVVoeUUsSUFBSWl5RSxpQkFBaUIsU0FBU2p5RSxHQUFPLE9BQUpOLElBQVdNLEdBQUdreUUsY0FBYyxXQUFlLE9BQUp4eUUsSUFBVSxDQUFDLFNBQVNNLEdBQUdBLE1BQUssS0FBTW15RSxHQUFTLCtCQUN2VSxTQUFTQyxHQUFHcHlFLEdBQUcsT0FBT0EsR0FBRyxJQUFLLE1BQU0sTUFBTSw2QkFBNkIsSUFBSyxPQUFPLE1BQU0scUNBQXFDLFFBQVEsTUFBTSxnQ0FDNUksSUFBSXF5RSxHQUFHLENBQUNDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR0MsT0FBTSxFQUFHQyxJQUFHLEVBQUdDLEtBQUksRUFBR3pyRCxPQUFNLEVBQUcwckQsUUFBTyxFQUFHbGxELE1BQUssRUFBR21sRCxNQUFLLEVBQUdDLE9BQU0sRUFBRy8zRSxRQUFPLEVBQUdnNEUsT0FBTSxFQUFHQyxLQUFJLEdBQUlDLEdBQUdoeEUsRUFBRSxDQUFDaXhFLFVBQVMsR0FBSWQsSUFBSXR2RSxHQUFFLENBQUN1RCx5QkFBd0IsRUFBR0MsbUJBQWtCLEVBQUdDLGtCQUFpQixFQUFHQyxrQkFBaUIsRUFBR0MsU0FBUSxFQUFHQyxjQUFhLEVBQUdDLGlCQUFnQixFQUFHQyxhQUFZLEVBQUdDLFNBQVEsRUFBR0MsTUFBSyxFQUFHQyxVQUFTLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxjQUFhLEVBQUdDLFdBQVUsRUFBR2dzRSxVQUFTLEVBQUcvckUsU0FBUSxFQUFHQyxZQUFXLEVBQUdDLGFBQVksRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGVBQWMsRUFBR0MsZ0JBQWUsRUFDN2ZDLGlCQUFnQixFQUFHSyxZQUFXLEVBQUdvckUsV0FBVSxFQUFHbnJFLFlBQVcsRUFBR0MsU0FBUSxFQUFHQyxPQUFNLEVBQUdDLFNBQVEsRUFBR0MsU0FBUSxFQUFHQyxRQUFPLEVBQUdDLFFBQU8sRUFBR0MsTUFBSyxFQUFHRSxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsYUFBWSxFQUFHQyxpQkFBZ0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxlQUFjLEVBQUdDLGFBQVksR0FBSW9xRSxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sS0FBS2w3RSxPQUFPb1YsS0FBS3pLLElBQUd4RCxTQUFRLFNBQVNTLEdBQUdzekUsR0FBRy96RSxTQUFRLFNBQVNVLEdBQUdBLEVBQUVBLEVBQUVELEVBQUU5RixPQUFPLEdBQUdvVixjQUFjdFAsRUFBRVEsVUFBVSxHQUFHdUMsR0FBRTlDLEdBQUc4QyxHQUFFL0MsU0FDdlosSUFBSXV6RSxHQUFHLFdBQVdDLEdBQUcsT0FBT3R6RSxHQUFFcEksRUFBRW8vQyxTQUFTMVcsUUFBUWl6QyxHQUFHMXhFLEVBQUU4MEMsdUJBQXVCNjhCLEdBQUcsQ0FBQ0MsU0FBUSxFQUFHQyxLQUFJLEVBQUdDLFVBQVMsR0FBSUMsR0FBRyw4QkFBOEJDLEdBQUcsR0FBR0MsR0FBRyxHQUF3SCxJQUFJQyxHQUFHNzdFLE9BQU9rQixVQUFVQyxlQUFlMjZFLEdBQUcsQ0FBQzk3RCxTQUFTLEtBQUtpekQsd0JBQXdCLEtBQUs4SSwrQkFBK0IsS0FBS0MseUJBQXlCLE1BQU0sU0FBU0MsR0FBR3IwRSxFQUFFQyxHQUFHLFFBQUcsSUFBU0QsRUFBRSxNQUFNL0QsTUFBTXpELEVBQUUsSUFBSTRKLEVBQUVuQyxJQUFJLGNBQ2xlLFNBQVNxMEUsR0FBR3QwRSxFQUFFQyxFQUFFbEksR0FBRyxTQUFTQyxFQUFFQSxFQUFFNEgsR0FBRyxJQUFJL0YsRUFBRStGLEVBQUV0RyxXQUFXc0csRUFBRXRHLFVBQVUwOEMsaUJBQWlCdnpDLEVBckJuRixTQUFZekMsRUFBRUMsRUFBRWxJLEVBQUVDLEdBQUcsR0FBR0EsSUFBb0IsaUJBQWhCQSxFQUFFZ0ksRUFBRXUwRSxjQUFpQyxPQUFPdjhFLEdBQUcsT0FBT2dMLEVBQUVoTCxFQUFFRCxHQUFHQyxFQUFFRCxHQUFHLEdBQUdpSSxFQUFFQSxFQUFFdzBFLGFBQWEsQ0FBTSxJQUFJLElBQUkveEUsS0FBYjFLLEVBQUUsR0FBZ0JpSSxFQUFFakksRUFBRTBLLEdBQUd4QyxFQUFFd0MsR0FBR3hDLEVBQUVsSSxPQUFPa0ksRUFBRWl3RSxFQUFHLE9BQU9qd0UsRUFxQmpGdzBFLENBQUc3MEUsRUFBRUssRUFBRWxJLEVBQUU4QixHQUFHTCxFQUFFLEdBQUdnSSxHQUFFLEVBQUc3SixFQUFFLENBQUMrOUMsVUFBVSxXQUFXLE9BQU0sR0FBSUMsbUJBQW1CLFdBQVcsR0FBRyxPQUFPbjhDLEVBQUUsT0FBTyxNQUFNbzhDLG9CQUFvQixTQUFTNTFDLEVBQUVqSSxHQUFHeUosR0FBRSxFQUFHaEksRUFBRSxDQUFDekIsSUFBSTg5QyxnQkFBZ0IsU0FBUzcxQyxFQUFFakksR0FBRyxHQUFHLE9BQU95QixFQUFFLE9BQU8sS0FBS0EsRUFBRXFGLEtBQUs5RyxLQUFLLEdBQUc4QixHQUFHLEdBQUdBLEVBQUUsSUFBSStGLEVBQUU1SCxFQUFFdVksTUFBTTlOLEVBQUU5SyxHQUFHLG1CQUFvQmlJLEVBQUU4MEUseUJBQXlCLENBQUMsSUFBSWp6RSxFQUFFN0IsRUFBRTgwRSx5QkFBeUI3OEUsS0FBSyxLQUFLRyxFQUFFdVksTUFBTTFXLEVBQUUyMUIsT0FBTyxNQUFNL3RCLElBQUk1SCxFQUFFMjFCLE1BQU10dEIsRUFBRSxHQUFHckksRUFBRTIxQixNQUFNL3RCLFVBQVUsR0FBR21CLEVBQUUsR0FBRy9JLEVBQUUrRixFQUFFNUgsRUFBRXVZLE1BQ3JmOU4sRUFBRTlLLEdBQXVCLE9BQXBCa0MsRUFBRTAzRSxFQUFHM3hFLEVBQUU1SCxFQUFFdVksTUFBTTFXLEVBQUU0SSxLQUFZLE1BQU01SSxFQUFFMCtDLE9BQW9CLFlBQVI4N0IsR0FBSnIwRSxFQUFFbkcsRUFBTytGLEdBQXlGLEdBQS9FL0YsRUFBRTBXLE1BQU12WSxFQUFFdVksTUFBTTFXLEVBQUVtSyxRQUFRdkIsRUFBRTVJLEVBQUVrOEMsUUFBUXArQyxPQUFZLEtBQVZBLEVBQUVrQyxFQUFFMjFCLFNBQW1CMzFCLEVBQUUyMUIsTUFBTTczQixFQUFFLE1BQVMsbUJBQW9Ca0MsRUFBRTg2RSwyQkFBMkIsbUJBQW9COTZFLEVBQUUrNkUsbUJBQW1CLEdBQUcsbUJBQW9CLzZFLEVBQUUrNkUsb0JBQW9CLG1CQUFvQmgxRSxFQUFFODBFLDBCQUEwQjc2RSxFQUFFKzZFLHFCQUFxQixtQkFBb0IvNkUsRUFBRTg2RSwyQkFBMkIsbUJBQW9CLzBFLEVBQUU4MEUsMEJBQTBCNzZFLEVBQUU4NkUsNEJBQTRCbjdFLEVBQUV1QixPQUFPLENBQUNwRCxFQUFFNkIsRUFBRSxJQUFJWixFQUN0ZjRJLEVBQWMsR0FBWmhJLEVBQUUsS0FBS2dJLEdBQUUsRUFBTTVJLEdBQUcsSUFBSWpCLEVBQUVvRCxPQUFPbEIsRUFBRTIxQixNQUFNNzNCLEVBQUUsT0FBTyxDQUFDOEosRUFBRTdJLEVBQUVqQixFQUFFLEdBQUdrQyxFQUFFMjFCLE1BQU0sSUFBSXJ0QixHQUFFLEVBQUcsSUFBSXZKLEVBQUVBLEVBQUUsRUFBRSxFQUFFQSxFQUFFakIsRUFBRW9ELE9BQU9uQyxJQUFJLENBQUMsSUFBSTJJLEVBQUU1SixFQUFFaUIsR0FBbUQsT0FBaEQySSxFQUFFLG1CQUFvQkEsRUFBRUEsRUFBRTFKLEtBQUtnQyxFQUFFNEgsRUFBRXpKLEVBQUV1WSxNQUFNOU4sR0FBR2xCLEtBQVlZLEdBQUdBLEdBQUUsRUFBR1YsRUFBRVMsRUFBRSxHQUFHVCxFQUFFRixJQUFJVyxFQUFFVCxFQUFFRixJQUFJMUgsRUFBRTIxQixNQUFNL3RCLFFBQVFqSSxFQUFFLEtBQTBCLEdBQVI2NkUsR0FBYnIwRSxFQUFFbkcsRUFBRTArQyxTQUFjMzRDLEdBQU0sbUJBQW9CL0YsRUFBRWc3RSxpQkFBd0MsaUJBQXRCNzhFLEVBQUU0SCxFQUFFazFFLG1CQUF1QyxDQUFDLElBQUlwekUsRUFBRTdILEVBQUVnN0Usa0JBQWtCLElBQUksSUFBSXp4RSxLQUFLMUIsRUFBRSxLQUFLMEIsS0FBS3BMLEdBQUcsTUFBTWlFLE1BQU16RCxFQUFFLElBQUk0SixFQUFFeEMsSUFBSSxVQUFVd0QsSUFBSzFCLElBQUl6QixFQUFFaUMsRUFBRSxHQUFHakMsRUFBRXlCLElBQUksS0FBSzVKLEVBQUUwZ0QsZUFBZXg0QyxJQUFJLENBQUMsSUFBSXlDLEVBQUV6QyxFQUFFSixFQUFFNkMsRUFBRTNGLEtBQUssR0FBRyxtQkFDcGU4QyxFQUFFLE1BQU01SCxFQUFFeUssRUFBRTdDLEdBQUcsTUFBTSxDQUFDcW1FLE1BQU1qbUUsRUFBRWdFLFFBQVEvRCxHQUM3QyxJQUFJODBFLEdBQUcsV0FBVyxTQUFTLzBFLEVBQUVBLEVBQUVDLEdBQUduSSxFQUFFMGdELGVBQWV4NEMsR0FBR0EsRUFBRWxELE9BQU9xRCxFQUFFSCxFQUFFLENBQUNBLElBQUlBLEVBQUVBLEVBQUV1USxNQUFNNkgsU0FBU3BZLEVBQUVsSSxFQUFFMGdELGVBQWV4NEMsR0FBRyxDQUFDQSxHQUFHRSxHQUFFRixJQUFJQSxFQUFFRSxHQUFFRixHQUFHQSxFQUFFLENBQUNsRCxLQUFLLEtBQUtrNEUsYUFBYTdDLEdBQVEvNUQsU0FBU3BZLEVBQUVpMUUsV0FBVyxFQUFFanhFLFFBQVFrc0UsRUFBR2dGLE9BQU8sSUFBSSxJQUFJbjlFLEVBQUVzSSxFQUFFLEdBQUcsR0FBRyxJQUFJdEksRUFBRSxDQUFDLElBQUlDLEVBQUVxSSxFQUFpQjdHLEVBQUUsR0FBakJ6QixFQUFFQyxFQUFFK0MsUUFBaUIsS0FBSyxPQUFPdkIsR0FBRyxNQUFNeUMsTUFBTXpELEVBQUUsTUFBTSxJQUFJZ0osRUFBRSxJQUFJMnVFLFlBQVkzMkUsR0FBeUIsSUFBdEJnSSxFQUFFNkIsSUFBSXJMLElBQUdxSSxFQUFFbUIsR0FBSSxHQUFHekosRUFBRSxFQUFNQyxFQUFFRCxFQUFFQyxFQUFFd0IsRUFBRSxFQUFFeEIsSUFBSXFJLEVBQUVySSxHQUFHQSxFQUFFLEVBQUVxSSxFQUFFN0csRUFBRSxHQUFHLE9BQU82RyxFQUFFLEdBQUdBLEVBQUV0SSxHQUFHeUUsS0FBSzI0RSxTQUFTcDlFLEVBQUV5RSxLQUFLdTZELE1BQU0sQ0FBQy8yRCxHQUFHeEQsS0FBSzQ0RSxXQUFVLEVBQUc1NEUsS0FBSzY0RSxtQkFBbUIsS0FBSzc0RSxLQUFLODRFLHFCQUFvQixFQUFHOTRFLEtBQUsrNEUsaUJBQ3hmdDFFLEVBQUV6RCxLQUFLZzVFLGNBQWMsRUFBRWg1RSxLQUFLaTVFLGNBQWMsRUFBRWo1RSxLQUFLazVFLGFBQWEsR0FBR2w1RSxLQUFLbTVFLGtCQUFrQixHQUFHLElBQUkxMUUsRUFBRUQsRUFBRTFHLFVBWXNILE9BWjVHMkcsRUFBRXkzQixRQUFRLFdBQVcsSUFBSWw3QixLQUFLNDRFLFVBQVUsQ0FBQzU0RSxLQUFLNDRFLFdBQVUsRUFBRzU0RSxLQUFLbzVFLGlCQUFpQixJQUFJNTFFLEVBQUV4RCxLQUFLMjRFLFNBQVM5MEUsRUFBRUwsR0FBR0ssRUFBRSxHQUFHQSxFQUFFLEdBQUdMLElBQUlDLEVBQUU0MUUsYUFBYSxTQUFTNzFFLEdBQUcsSUFBSUMsSUFBSXpELEtBQUtpNUUsYUFBYTE5RSxFQUFFaUksRUFBRWxELEtBQUtxN0MsU0FBU3Y0QyxFQUFFcEQsS0FBSzI0RSxTQUFTbnlFLEVBQUVqTCxFQUFFNkgsR0FBRyxJQUFJcEcsRUFBRXpCLEVBQUU2SCxHQUFHcEQsS0FBS2s1RSxhQUFhejFFLEdBQUdsSSxFQUFFeUUsS0FBS201RSxrQkFBa0IxMUUsR0FBR3pHLEVBQUV6QixFQUFFNkgsR0FBR0ksRUFBRXVRLE1BQU01WCxPQUFPc0gsRUFBRTYxRSxZQUFZLFdBQVcsSUFBSTkxRSxFQUFFeEQsS0FBS2k1RSxhQUFheDFFLEVBQUV6RCxLQUFLazVFLGFBQWExMUUsR0FBR3lDLEVBQUVqRyxLQUFLbTVFLGtCQUFrQjMxRSxHQUN0ZnhELEtBQUtrNUUsYUFBYTExRSxHQUFHLEtBQUt4RCxLQUFLbTVFLGtCQUFrQjMxRSxHQUFHLEtBQUt4RCxLQUFLaTVFLGVBQWV4MUUsRUFBRXpELEtBQUsyNEUsVUFBVTF5RSxHQUFHeEMsRUFBRTIxRSxlQUFlLFdBQVcsSUFBSSxJQUFJNTFFLEVBQUV4RCxLQUFLaTVFLGFBQWEsR0FBR3oxRSxFQUFFQSxJQUFJeEQsS0FBS2s1RSxhQUFhMTFFLEdBQUd4RCxLQUFLMjRFLFVBQVUzNEUsS0FBS201RSxrQkFBa0IzMUUsSUFBSUMsRUFBRWt3QixLQUFLLFNBQVNud0IsR0FBRyxHQUFHeEQsS0FBSzQ0RSxVQUFVLE9BQU8sS0FBSyxJQUFJbjFFLEVBQUVOLEdBQUVBLEdBQUVuRCxLQUFLMjRFLFNBQVMsSUFBSXA5RSxFQUFFMDdFLEdBQUczdkUsUUFBUTJ2RSxHQUFHM3ZFLFFBQVErdEUsR0FBRyxJQUFJLElBQUksSUFBSWp5RSxFQUFFLENBQUMsSUFBSXBHLEdBQUUsRUFBR29HLEVBQUUsR0FBRzdFLE9BQU9pRixHQUFHLENBQUMsR0FBRyxJQUFJeEQsS0FBS3U2RCxNQUFNaDhELE9BQU8sQ0FBQ3lCLEtBQUs0NEUsV0FBVSxFQUFHLElBQUk1ekUsRUFBRWhGLEtBQUsyNEUsU0FBUzkwRSxFQUFFbUIsR0FBR25CLEVBQUUsR0FBR0EsRUFBRSxHQUFHbUIsRUFBRSxNQUFNLElBQUkzSCxFQUFFMkMsS0FBS3U2RCxNQUFNdjZELEtBQUt1NkQsTUFBTWg4RCxPQUFPLEdBQUcsR0FBR3ZCLEdBQUdLLEVBQUVvN0UsWUFDdGZwN0UsRUFBRXVlLFNBQVNyZCxPQUFPLENBQUMsSUFBSXdILEVBQUUxSSxFQUFFcTdFLE9BQThELEdBQXZELEtBQUszeUUsSUFBSS9GLEtBQUs4NEUscUJBQW9CLEdBQUk5NEUsS0FBS3U2RCxNQUFNdGdCLE1BQVMsV0FBVzU4QyxFQUFFaUQsS0FBS04sS0FBSzY0RSxtQkFBbUIsVUFBVSxHQUFHLE1BQU14N0UsRUFBRWlELE1BQU0sTUFBTWpELEVBQUVpRCxLQUFLQSxNQUFNakQsRUFBRWlELEtBQUtBLEtBQUt5NUMsV0FBVzkxQyxFQUFFakUsS0FBS3M1RSxZQUFZajhFLEVBQUVpRCxXQUFXLEdBQUdqRCxFQUFFaUQsT0FBTzhFLEVBQUUsQ0FBQ3BGLEtBQUtnNUUsZ0JBQWdCLElBQUkxMEUsRUFBRWxCLEVBQUU2MkMsTUFBTSxHQUFHajlDLEVBQUUsQ0FBQ0EsR0FBRSxFQUFHLElBQUlMLEVBQUVVLEVBQUVrOEUsY0FBYyxJQUFJNThFLEVBQUUsTUFBTThDLE1BQU16RCxFQUFFLE1BQU1nRSxLQUFLdTZELE1BQU1sNEQsS0FBSzFGLEdBQUd5RyxFQUFFcEQsS0FBS2c1RSxnQkFBZ0Isa0JBQWtCLFNBQWM1MUUsRUFBRXBELEtBQUtnNUUsZ0JBQWdCMTBFLEVBQUVsQixFQUFFcEQsS0FBS2c1RSxnQkFBZ0JqekUsTUFBTSxDQUFDLElBQUk1SyxFQUFFa0MsRUFBRXVlLFNBQVN2ZSxFQUFFbzdFLGNBQzVleHpFLEVBQUUsR0FBRyxJQUFJQSxHQUFHakYsS0FBSys3QyxPQUFPNWdELEVBQUVrQyxFQUFFbUssUUFBUW5LLEVBQUVtN0UsY0FBYyxNQUFNcDhFLEdBQUcsR0FBRyxNQUFNQSxHQUFHLG1CQUFvQkEsRUFBRXMvRCxLQUFLLE1BQU1qOEQsTUFBTXpELEVBQUUsTUFBTSxNQUFNSSxFQUFZZ0gsRUFBRTdFLFFBQVF5QixLQUFLZzVFLGVBQWU1MUUsRUFBRWYsS0FBSyxJQUFJZSxFQUFFcEQsS0FBS2c1RSxnQkFBZ0IvekUsR0FBRyxPQUFPN0IsRUFBRSxHQUFHLFFBQVE2ekUsR0FBRzN2RSxRQUFRL0wsRUFBRTRILEdBQUVNLElBQUlBLEVBQUVzNEMsT0FBTyxTQUFTdjRDLEVBQUVDLEVBQUV3QyxHQUFHLEdBQUcsaUJBQWtCekMsR0FBRyxpQkFBa0JBLEVBQVUsTUFBRyxNQUFWeUMsRUFBRSxHQUFHekMsR0FBa0IsR0FBTXhELEtBQUsrNEUsaUJBQXdCN3lFLEVBQUVELEdBQU1qRyxLQUFLODRFLG9CQUEwQixpQkFBaUI1eUUsRUFBRUQsSUFBR2pHLEtBQUs4NEUscUJBQW9CLEVBQVU1eUUsRUFBRUQsSUFDMWMsR0FEcWV6QyxHQUF4QkMsRUFBRXEwRSxHQUFHdDBFLEVBQUVDLEVBQUV6RCxLQUFLMjRFLFdBQWNsUCxNQUNyZmhtRSxFQUFFQSxFQUFFK0QsUUFBVyxPQUFPaEUsSUFBRyxJQUFLQSxFQUFFLE1BQU0sR0FBRyxJQUFJbEksRUFBRTBnRCxlQUFleDRDLEdBQUcsQ0FBQyxHQUFHLE1BQU1BLEdBQUcsTUFBTUEsRUFBRXUyQyxTQUFTLENBQWMsSUFBYjl6QyxFQUFFekMsRUFBRXUyQyxZQUFnQngxQyxFQUFHLE1BQU05RSxNQUFNekQsRUFBRSxNQUFNLE1BQU15RCxNQUFNekQsRUFBRSxJQUFJaUssRUFBRXZILGFBQTZHLE9BQS9GOEUsRUFBRUUsR0FBRUYsR0FBR3hELEtBQUt1NkQsTUFBTWw0RCxLQUFLLENBQUMvQixLQUFLLEtBQUtrNEUsYUFBYXZ5RSxFQUFFMlYsU0FBU3BZLEVBQUVpMUUsV0FBVyxFQUFFanhFLFFBQVEvRCxFQUFFaTFFLE9BQU8sS0FBVyxHQUFHLElBQUluOUUsRUFBRWlJLEVBQUVsRCxLQUFLLEdBQUcsaUJBQWtCL0UsRUFBRSxPQUFPeUUsS0FBS3c1RSxVQUFVaDJFLEVBQUVDLEVBQUV3QyxHQUFHLE9BQU8xSyxHQUFHLEtBQUs0SyxFQUFHLEtBQUtHLEVBQUcsS0FBS0QsRUFBRyxLQUFLOUMsRUFBRyxLQUFLSSxFQUFFLE9BQU9ILEVBQUVFLEdBQUVGLEVBQUV1USxNQUFNNkgsVUFBVTViLEtBQUt1NkQsTUFBTWw0RCxLQUFLLENBQUMvQixLQUFLLEtBQUtrNEUsYUFBYXZ5RSxFQUFFMlYsU0FBU3BZLEVBQUVpMUUsV0FBVyxFQUFFanhFLFFBQVEvRCxFQUFFaTFFLE9BQU8sS0FDdmYsR0FBRyxLQUFLdHpFLEVBQUUsTUFBTTNGLE1BQU16RCxFQUFFLE1BQU8sR0FBRyxpQkFBa0JULEdBQUcsT0FBT0EsRUFBRSxPQUFPQSxFQUFFdytDLFVBQVUsS0FBS3R6QyxFQUFHTCxFQUFFLEdBQUcsSUFBSTVLLEVBQUVELEVBQUV3Z0QsT0FBT3Y0QyxFQUFFdVEsTUFBTXZRLEVBQUVvMkMsS0FBbUksT0FBOUhwK0MsRUFBRXU1RSxFQUFHeDVFLEVBQUV3Z0QsT0FBT3Y0QyxFQUFFdVEsTUFBTXZZLEVBQUVnSSxFQUFFbzJDLEtBQUtwK0MsRUFBRWtJLEdBQUVsSSxHQUFHd0UsS0FBS3U2RCxNQUFNbDRELEtBQUssQ0FBQy9CLEtBQUssS0FBS2s0RSxhQUFhdnlFLEVBQUUyVixTQUFTcGdCLEVBQUVpOUUsV0FBVyxFQUFFanhFLFFBQVEvRCxFQUFFaTFFLE9BQU8sS0FBVyxHQUFHLEtBQUt2MEUsRUFBRyxPQUFPWCxFQUFFLENBQUNsSSxFQUFFd0csY0FBY3ZHLEVBQUUrRSxLQUFLb0YsRUFBRSxDQUFDazBDLElBQUlwMkMsRUFBRW8yQyxLQUFLcDJDLEVBQUV1USxTQUFTL1QsS0FBS3U2RCxNQUFNbDRELEtBQUssQ0FBQy9CLEtBQUssS0FBS2s0RSxhQUFhdnlFLEVBQUUyVixTQUFTcFksRUFBRWkxRSxXQUFXLEVBQUVqeEUsUUFBUS9ELEVBQUVpMUUsT0FBTyxLQUFLLEdBQUcsS0FBS3owRSxFQUFFLE9BQTZCZ0MsRUFBRSxDQUFDM0YsS0FBS2tELEVBQUVnMUUsYUFBYXZ5RSxFQUFFMlYsU0FBL0NyZ0IsRUFBRW1JLEdBQUVGLEVBQUV1USxNQUFNNkgsVUFBOEM2OEQsV0FBVyxFQUNyZmp4RSxRQUFRL0QsRUFBRWkxRSxPQUFPLElBQUkxNEUsS0FBS3E1RSxhQUFhNzFFLEdBQUd4RCxLQUFLdTZELE1BQU1sNEQsS0FBSzRELEdBQUcsR0FBRyxLQUFLckIsRUFBR3JKLEVBQUVpSSxFQUFFbEQsS0FBSzlFLEVBQUVnSSxFQUFFdVEsTUFBTSxJQUFJL08sRUFBRWhGLEtBQUsyNEUsU0FBMkgsT0FBbEhueUUsRUFBRWpMLEVBQUV5SixHQUFHekosRUFBRW1JLEdBQUVsSSxFQUFFb2dCLFNBQVNyZ0IsRUFBRXlKLEtBQUtoRixLQUFLdTZELE1BQU1sNEQsS0FBSyxDQUFDL0IsS0FBS2tELEVBQUVnMUUsYUFBYXZ5RSxFQUFFMlYsU0FBU3JnQixFQUFFazlFLFdBQVcsRUFBRWp4RSxRQUFRL0QsRUFBRWkxRSxPQUFPLEtBQVcsR0FBRyxLQUFLajBFLEVBQUcsTUFBTWhGLE1BQU16RCxFQUFFLE1BQU0sS0FBS29JLEVBQUcsT0FuQ25KLFNBQVlaLEdBQUcsSUFBSSxJQUFJQSxFQUFFMjRDLFFBQVEsQ0FBQzM0QyxFQUFFMjRDLFFBQVEsRUFBRSxJQUFJMTRDLEVBQUVELEVBQUUwNEMsTUFBTXo0QyxFQUFFQSxJQUFJRCxFQUFFNDRDLFFBQVEzNEMsRUFBRUEsRUFBRWk0RCxNQUFLLFNBQVNuZ0UsR0FBRyxJQUFJaUksRUFBRTI0QyxVQUFVNWdELEVBQUVBLEVBQUU4bkQsUUFBUTcvQyxFQUFFMjRDLFFBQVEsRUFBRTM0QyxFQUFFNDRDLFFBQVE3Z0QsTUFBSSxTQUFTQSxHQUFHLElBQUlpSSxFQUFFMjRDLFVBQVUzNEMsRUFBRTI0QyxRQUFRLEVBQUUzNEMsRUFBRTQ0QyxRQUFRN2dELE9BbUN0Q3NKLENBQVR0SixFQUFFaUksRUFBRWxELE1BQVcvRSxFQUFFNGdELFNBQVMsS0FBSyxFQUFFLE9BQU8zNEMsRUFBRSxDQUFDbEksRUFBRXdHLGNBQWN2RyxFQUFFNmdELFFBQVExMkMsRUFBRSxDQUFDazBDLElBQUlwMkMsRUFBRW8yQyxLQUFLcDJDLEVBQUV1USxTQUFTL1QsS0FBS3U2RCxNQUFNbDRELEtBQUssQ0FBQy9CLEtBQUssS0FBS2s0RSxhQUFhdnlFLEVBQUUyVixTQUFTcFksRUFBRWkxRSxXQUFXLEVBQUVqeEUsUUFBUS9ELEVBQUVpMUUsT0FBTyxLQUFLLEdBQUcsS0FBSyxFQUFFLE1BQU1uOUUsRUFBRTZnRCxRQUFRLFFBQVEsTUFBTTM4QyxNQUFNekQsRUFBRSxNQUMxZixLQUFLMkksRUFBRyxNQUFNbEYsTUFBTXpELEVBQUUsTUFBTyxNQUFNeUQsTUFBTXpELEVBQUUsSUFBSSxNQUFNVCxFQUFFQSxTQUFTQSxFQUFFLE1BQU9rSSxFQUFFKzFFLFVBQVUsU0FBU2gyRSxFQUFFQyxFQUFFd0MsR0FBRyxJQUFJMUssRUFBRWlJLEVBQUVsRCxLQUFLNE0sY0FBaUMsR0FBbkJqSCxJQUFJMHZFLElBQVNDLEdBQUdyNkUsSUFBT2c4RSxHQUFHeDZFLGVBQWV4QixHQUFHLENBQUMsSUFBSSs3RSxHQUFHOTVFLEtBQUtqQyxHQUFHLE1BQU1rRSxNQUFNekQsRUFBRSxHQUFHVCxJQUFJZzhFLEdBQUdoOEUsSUFBRyxFQUFHLElBQUlDLEVBQUVnSSxFQUFFdVEsTUFBTSxHQUFHLFVBQVV4WSxFQUFFQyxFQUFFa0ssRUFBRSxDQUFDcEYsVUFBSyxHQUFROUUsRUFBRSxDQUFDaStFLG9CQUFlLEVBQU9wNUUsa0JBQWEsRUFBT2xFLE1BQU0sTUFBTVgsRUFBRVcsTUFBTVgsRUFBRVcsTUFBTVgsRUFBRTZFLGFBQWFxaUQsUUFBUSxNQUFNbG5ELEVBQUVrbkQsUUFBUWxuRCxFQUFFa25ELFFBQVFsbkQsRUFBRWkrRSxzQkFBc0IsR0FBRyxhQUFhbCtFLEVBQUUsQ0FBQyxJQUFJeUosRUFBRXhKLEVBQUVXLE1BQU0sR0FBRyxNQUFNNkksRUFBRSxDQUFDQSxFQUFFeEosRUFBRTZFLGFBQWEsSUFBSWhELEVBQUU3QixFQUFFb2dCLFNBQVMsR0FBRyxNQUFNdmUsRUFBRSxDQUFDLEdBQUcsTUFDMWYySCxFQUFFLE1BQU12RixNQUFNekQsRUFBRSxLQUFLLEdBQUc2QyxNQUFNRixRQUFRdEIsR0FBRyxDQUFDLEtBQUssR0FBR0EsRUFBRWtCLFFBQVEsTUFBTWtCLE1BQU16RCxFQUFFLEtBQUtxQixFQUFFQSxFQUFFLEdBQUcySCxFQUFFLEdBQUczSCxFQUFFLE1BQU0ySCxJQUFJQSxFQUFFLElBQUl4SixFQUFFa0ssRUFBRSxHQUFHbEssRUFBRSxDQUFDVyxXQUFNLEVBQU95ZixTQUFTLEdBQUc1VyxTQUFTLEdBQUcsV0FBV3pKLEVBQUV5RSxLQUFLNjRFLG1CQUFtQixNQUFNcjlFLEVBQUVXLE1BQU1YLEVBQUVXLE1BQU1YLEVBQUU2RSxhQUFhN0UsRUFBRWtLLEVBQUUsR0FBR2xLLEVBQUUsQ0FBQ1csV0FBTSxTQUFjLEdBQUcsV0FBV1osRUFBRSxDQUFDOEIsRUFBRTJDLEtBQUs2NEUsbUJBQW1CLElBQUk5eUUsRUFkdEosU0FBWXZDLEdBQUcsR0FBRyxNQUFTQSxFQUFZLE9BQU9BLEVBQUUsSUFBSUMsRUFBRSxHQUFzRCxPQUFuRG5JLEVBQUVvL0MsU0FBUzMzQyxRQUFRUyxHQUFFLFNBQVNBLEdBQUcsTUFBTUEsSUFBSUMsR0FBR0QsTUFBWUMsRUFjcUNpMkUsQ0FBR2wrRSxFQUFFb2dCLFVBQVUsR0FBRyxNQUFNdmUsRUFBRSxDQUFDLElBQUlpSCxFQUFFLE1BQU05SSxFQUFFVyxNQUFNWCxFQUFFVyxNQUFNLEdBQUc0SixFQUFPLEdBQUxmLEdBQUUsRUFBTW5HLE1BQU1GLFFBQVF0QixJQUFHLElBQUksSUFBSVYsRUFBRSxFQUFFQSxFQUFFVSxFQUFFa0IsT0FBTzVCLElBQUssR0FBRyxHQUFHVSxFQUFFVixLQUFLMkgsRUFBRSxDQUFDVSxHQUFFLEVBQUcsWUFBWUEsRUFBRSxHQUFHM0gsSUFBSWlILEVBQUU5SSxFQUFFa0ssRUFBRSxDQUFDNG1ELGNBQVMsRUFBTzF3QyxjQUFTLEdBQ2hmcGdCLEVBQUUsQ0FBQzh3RCxTQUFTdG5ELEVBQUU0VyxTQUFTN1YsS0FBSyxHQUFHZixFQUFFeEosRUFBRSxDQUFDLEdBQUdrN0UsR0FBR243RSxLQUFLLE1BQU15SixFQUFFNFcsVUFBVSxNQUFNNVcsRUFBRTZwRSx5QkFBeUIsTUFBTXB2RSxNQUFNekQsRUFBRSxJQUFJVCxFQUFFLEtBQUssR0FBRyxNQUFNeUosRUFBRTZwRSx3QkFBd0IsQ0FBQyxHQUFHLE1BQU03cEUsRUFBRTRXLFNBQVMsTUFBTW5jLE1BQU16RCxFQUFFLEtBQUssR0FBSyxpQkFBa0JnSixFQUFFNnBFLDJCQUF5QixXQUFXN3BFLEVBQUU2cEUseUJBQXlCLE1BQU1wdkUsTUFBTXpELEVBQUUsS0FBTSxHQUFHLE1BQU1nSixFQUFFZ29ELE9BQU8saUJBQWtCaG9ELEVBQUVnb0QsTUFBTSxNQUFNdnRELE1BQU16RCxFQUFFLEdBQUcsS0FBdUUsSUFBSXdKLEtBQXJFUixFQUFFeEosRUFBRTZCLEVBQUUyQyxLQUFLKzRFLGlCQUFpQmh6RSxFQUFFLElBQUkvRixLQUFLdTZELE1BQU1oOEQsT0FBTytGLEVBQUUsSUFBSWQsRUFBRWxELEtBQWMwRSxFQUFFLEdBQUd5eUUsR0FBR3A4RSxLQUFLMkosRUFBRVEsR0FBRyxDQUFDLElBQUlySyxFQUFFNkosRUFBRVEsR0FBRyxHQUFHLE1BQU1ySyxFQUFFLENBQUMsR0FBRyxVQUM1ZXFLLEVBQUUsQ0FBQzdJLE9BQUUsRUFBTyxJQUFJc0ksRUFBRSxHQUFHN0ksRUFBRSxHQUFHLElBQUlPLEtBQUt4QixFQUFFLEdBQUdBLEVBQUU0QixlQUFlSixHQUFHLENBQUMsSUFBSWdKLEVBQUUsSUFBSWhKLEVBQUVtSCxRQUFRLE1BQU1pQixFQUFFNUosRUFBRXdCLEdBQUcsR0FBRyxNQUFNb0ksRUFBRSxDQUFDLEdBQUdZLEVBQUUsSUFBSVQsRUFBRXZJLE9BQU8sR0FBR3VJLEVBQUV2SSxFQUFFNjZFLEdBQUd6NkUsZUFBZW1JLEdBQUdBLEVBQUVzeUUsR0FBR3R5RSxPQUFPLENBQUMsSUFBSTBCLEVBQUUxQixFQUFFdEIsUUFBUW16RSxHQUFHLE9BQU83cEUsY0FBY3RKLFFBQVFvekUsR0FBRyxRQUFROXhFLEVBQUVzeUUsR0FBR3R5RSxHQUFHMEIsRUFBRTNCLEdBQUc3SSxFQUFFOEksRUFBRSxJQUFJOUksRUFBRU8sRUFBMkhzSSxHQUF6SFUsRUFBRSxNQUFNWixHQUFHLGtCQUFtQkEsR0FBRyxLQUFLQSxFQUFFLEdBQUdZLEdBQUcsaUJBQWtCWixHQUFHLElBQUlBLEdBQUd3QixHQUFFeEosZUFBZVgsSUFBSW1LLEdBQUVuSyxJQUFJLEdBQUcySSxHQUFHMUIsT0FBTzBCLEVBQUUsS0FBVTNJLEVBQUUsS0FBS2pCLEVBQUU4SixHQUFHLEtBQUt0SSxFQUFFLEtBQUs4RyxFQUFFLEdBQUdrQyxFQUFFcEssRUFBRXdKLEVBQUVDLEdBQUcsSUFBSVcsRUFBRTdCLFFBQVEsS0FBSzZCLEVBQUUsaUJBQWtCWixFQUFFaWdELFFBQVEsT0FBT3IvQyxHQUFHLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssWUFBWSxJQUFLLGdCQUFnQixJQUFLLGdCQUFnQixJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLGdCQUFnQkEsR0FDam9CLEVBQUcsTUFBTWxDLEVBQUUsUUFBUWtDLEdBQUUsRUFBR0EsRUFBRSt4RSxHQUFHMzZFLGVBQWV5SSxLQUFTN0ksRUFBRXEzRSxFQUFOcjNFLEVBQUU2SSxJQUFXLE1BQU1ySyxFQUFFd0IsRUFBRSxLQUFNdUosRUFBRS9LLEdBQUcsSUFBSyxJQUFJd0IsRUFBRTYzRSxFQUFHaHZFLEVBQUVySyxHQUFHd0IsSUFBSTJILEdBQUcsSUFBSTNILElBQUlVLEdBQUcwSSxJQUFJekIsR0FBRyxzQkFBc0IsSUFBSWtCLEVBQUVsQixFQUFFVSxFQUFFLEdBQUc2d0UsR0FBRzk0RSxlQUFleEIsR0FBR2lLLEdBQUcsTUFBTUEsR0FBRyxJQUFJUixFQUFFLEtBQUt4QixFQUFFbEQsS0FBSyxLQUFLa0QsRUFBRSxDQUE2QixHQUFHLE9BQS9CbkcsRUFBRTdCLEVBQUVxekUsMEJBQW9DLEdBQUcsTUFBTXh4RSxFQUFFeXhFLE9BQU8sQ0FBQ3p4RSxFQUFFQSxFQUFFeXhFLE9BQU8sTUFBTXRyRSxRQUFRLEdBQWdCLGlCQUFibkcsRUFBRTdCLEVBQUVvZ0IsV0FBOEIsaUJBQWtCdmUsRUFBRSxDQUFDQSxFQUFFNkksRUFBRTdJLEdBQUcsTUFBTW1HLEVBQUVuRyxFQUFFLEtBQzdLLE9BRGtMLE1BQU1BLEdBQUc3QixFQUFFLEdBQUcwN0UsR0FBR242RSxlQUFleEIsSUFBSSxPQUFPOEIsRUFBRUssT0FBTyxLQUFLOEgsR0FBRyxNQUFNQSxHQUFHbkksR0FBRzdCLEVBQUVrSSxHQUFFbEksRUFBRW9nQixVQUFVcFksRUFBRUEsRUFBRWxELEtBQUsyRixFQUFFLE1BQU1BLEdBQUcsaUNBQzdlQSxFQUFFMnZFLEdBQUdweUUsR0FBRywrQkFBK0J5QyxHQUFHLGtCQUFrQnpDLEVBQUUsK0JBQStCeUMsRUFBRWpHLEtBQUt1NkQsTUFBTWw0RCxLQUFLLENBQUNtMkUsYUFBYXZ5RSxFQUFFM0YsS0FBSy9FLEVBQUVxZ0IsU0FBU3BnQixFQUFFaTlFLFdBQVcsRUFBRWp4RSxRQUFRL0QsRUFBRWkxRSxPQUFPMXpFLElBQUloRixLQUFLODRFLHFCQUFvQixFQUFVdHpFLEdBQVVoQyxFQWJ6TixHQWNQLElBQUk2TyxHQUFHLFNBQVM3TyxHQUFHLFNBQVNDLEVBQUVBLEVBQUVsSSxHQUFHLElBQUlDLEVBQUVnSSxFQUFFbkksS0FBSzJFLEtBQUssS0FBS0EsS0FBbUMsT0FBOUJ4RSxFQUFFbStFLGdCQUFnQixJQUFJcEIsR0FBRzkwRSxFQUFFbEksR0FBVUMsR0FEaUksU0FBWWdJLEVBQUVDLEdBQUdELEVBQUUxRyxVQUFVbEIsT0FBT1ksT0FBT2lILEVBQUUzRyxXQUFXMEcsRUFBRTFHLFVBQVVrckMsWUFBWXhrQyxFQUFFQSxFQUFFbzJFLFVBQVVuMkUsRUFDN05vMkUsQ0FBR3AyRSxFQUFFRCxHQUFHLElBQUlqSSxFQUFFa0ksRUFBRTNHLFVBQW1LLE9BQXpKdkIsRUFBRTRXLFNBQVMsU0FBUzNPLEVBQUVDLEdBQUd6RCxLQUFLMjVFLGdCQUFnQnorQyxVQUFVejNCLEVBQUVELElBQUlqSSxFQUFFNjVCLE1BQU0sU0FBUzV4QixHQUFHLElBQUl4RCxLQUFLcUMsS0FBS3JDLEtBQUsyNUUsZ0JBQWdCaG1ELEtBQUtud0IsSUFBSSxNQUFNeUMsR0FBR2pHLEtBQUtrN0IsUUFBUWoxQixLQUFZeEMsRUFBelIsQ0FBNFJZLEVBQUc2TSxVQUFVODBCLEdBQUcsQ0FBQzh6QyxlQUFlLFNBQVN0MkUsR0FBR0EsRUFBRSxJQUFJKzBFLEdBQUcvMEUsR0FBRSxHQUFJLElBQUksT0FBT0EsRUFBRW13QixLQUFLK2tDLEtBQVUsUUFBUWwxRCxFQUFFMDNCLFlBQVk2K0MscUJBQXFCLFNBQVN2MkUsR0FBR0EsRUFBRSxJQUFJKzBFLEdBQUcvMEUsR0FBRSxHQUFJLElBQUksT0FBT0EsRUFBRW13QixLQUFLK2tDLEtBQVUsUUFBUWwxRCxFQUFFMDNCLFlBQVk4K0MsbUJBQW1CLFNBQVN4MkUsR0FBRyxPQUFPLElBQUk2TyxHQUFHN08sR0FDL2hCLElBQUt5MkUseUJBQXlCLFNBQVN6MkUsR0FBRyxPQUFPLElBQUk2TyxHQUFHN08sR0FBRSxJQUFLc1ksUUFBUSxXQUFXN2dCLEVBQU9ELFFBQVFnckMsR0FBR3FkLFNBQVNyZCxJLDZCQ3BEN0csSUFBSWtNLEVBQVcsRUFBUSxLQUNuQmlGLEVBQVl0M0MsT0FBT3V5RSxXQUFXMTFFLEtBQUttRCxRQUN2QzVFLEVBQU9ELFFBQVVrM0MsRUFBU3gxQyxLQUFLLEtBQU15NkMsSSw2QkNGckMsU0FBUytpQyxFQUFnQkMsR0FDdkIsT0FBT0EsR0FBYSxPQUFVQSxHQUFhLE1BRzdDLFNBQVNDLEVBQWVELEdBQ3RCLE9BQU9BLEdBQWEsT0FBVUEsR0FBYSxNQUk3Q2wvRSxFQUFPRCxRQUFVLFNBQWtCbThDLEVBQVdwcEMsRUFBUXFrRSxHQUNwRCxHQUFzQixpQkFBWHJrRSxFQUNULE1BQU0sSUFBSXRPLE1BQU0sd0JBUWxCLElBTEEsSUFFSTA2RSxFQUNBRSxFQUhBbGpELEVBQWFwcEIsRUFBT3hQLE9BQ3BCKzdFLEVBQWdCLEVBSVhwL0UsRUFBSSxFQUFHQSxFQUFJaThCLEVBQVlqOEIsR0FBSyxFQUFHLENBV3RDLEdBVkFpL0UsRUFBWXBzRSxFQUFPcEwsV0FBV3pILEdBQzlCbS9FLEVBQVV0c0UsRUFBTzdTLEdBRWJnL0UsRUFBZ0JDLElBQWNDLEVBQWVyc0UsRUFBT3BMLFdBQVd6SCxFQUFJLE1BRXJFbS9FLEdBQVd0c0UsRUFEWDdTLEdBQUssS0FJUG8vRSxHQUFpQm5qQyxFQUFVa2pDLE1BRUxqSSxFQUNwQixPQUFPcmtFLEVBQU82RSxNQUFNLEVBQUcxWCxFQUFJLEdBRXhCLEdBQUlvL0UsRUFBZ0JsSSxFQUN2QixPQUFPcmtFLEVBQU82RSxNQUFNLEVBQUcxWCxFQUFJbS9FLEVBQVE5N0UsT0FBUyxHQUloRCxPQUFPd1AsSSxnQkN4Q1QsRUFBUSxLQUFNd3NFLFcsaUJDQWQsZ0JBR0loa0MsRUFISixFQUF3QixFQUFRLEtBQWNpa0Msa0JBQzFDeGxFLEVBQU8sRUFBUSxHQUduQixLQUNFdWhDLEVBQUssRUFBUSxJQUNMa2tDLFlBQWVsa0MsRUFBR0ksZUFFeEJKLEVBQUssTUFFUCxNQUFPbmtDLElBSVQsSUFBSTArRCxFQUFhLEVBQVEsS0FRekIsU0FBUzRKLEVBQWVDLEVBQUtDLEdBQzNCLE9BQU9ELEVBQUl6OUUsUUFBUTA5RSxHQUlyQixJQUFJQyxHQUEwQixFQUMxQkMsR0FBd0IsRUFHeEJDLEdBQThCLEVBRzlCenpDLEVBQWMsT0FHZDB6QyxFQUFvQixHQUdwQkMsRUFBaUIsR0FHakJDLEVBQWMsc0NBR2RDLEVBQXVCLEdBQ3ZCQyxFQUFzQixHQUUxQixTQUFTQyxJQUNQLE1BQW9CLFlBQWhCL3pDLEdBRWdCLFNBQWhCQSxJQUV1QixvQkFBWDllLFFBQXNELG1CQUFuQjh5RCxrQkFBb0M5eUQsT0FBT3RyQixTQUFXc3JCLE9BQU92dEIsUUFBVXV0QixPQUFPM00sU0FBbUMsYUFBeEIyTSxPQUFPM00sUUFBUXZiLE9BTzdKLFNBQVNpN0UsRUFBWXJ5RCxHQUNuQixPQUFPLFNBQVN0cUIsR0FDZCxJQUFLLElBQUkxRCxFQUFJLEVBQUdBLEVBQUlndUIsRUFBSzNxQixPQUFRckQsSUFBSyxDQUNwQyxJQUFJZ00sRUFBTWdpQixFQUFLaHVCLEdBQUcwRCxHQUNsQixHQUFJc0ksRUFDRixPQUFPQSxFQUdYLE9BQU8sTUFJWCxJQUFJczBFLEVBQWVELEVBQVlKLEdBd0MvQixTQUFTTSxFQUFtQjU1QyxFQUFNMXNCLEdBQ2hDLElBQUswc0IsRUFBTSxPQUFPMXNCLEVBQ2xCLElBQUlvdUMsRUFBTXZ1QyxFQUFLK2xELFFBQVFsNUIsR0FDbkIxMEIsRUFBUSxrQkFBa0IyQixLQUFLeTBDLEdBQy9Cb2pCLEVBQVd4NUQsRUFBUUEsRUFBTSxHQUFLLEdBQzlCdXVFLEVBQVluNEIsRUFBSTN3QyxNQUFNK3pELEVBQVNwb0UsUUFDbkMsT0FBSW9vRSxHQUFZLFVBQVVucEUsS0FBS2srRSxJQUU3Qi9VLEdBQVksS0FDTTN4RCxFQUFLNmpELFFBQVF0VixFQUFJM3dDLE1BQU0rekQsRUFBU3BvRSxRQUFTNFcsR0FBS3ZSLFFBQVEsTUFBTyxLQUUxRStpRSxFQUFXM3hELEVBQUs2akQsUUFBUXRWLEVBQUkzd0MsTUFBTSt6RCxFQUFTcG9FLFFBQVM0VyxHQWpEN0RnbUUsRUFBcUI5NEUsTUFBSyxTQUFTMlMsR0FXakMsR0FUQUEsRUFBT0EsRUFBSzNSLE9BQ1IsU0FBUzdGLEtBQUt3WCxLQUVoQkEsRUFBT0EsRUFBS3BSLFFBQVEscUJBQXFCLFNBQVMraUUsRUFBVWdWLEdBQzFELE9BQU9BLEVBQ0wsR0FDQSxRQUdGM21FLEtBQVFnbUUsRUFDVixPQUFPQSxFQUFrQmhtRSxHQUczQixJQUFJZ2tELEVBQVcsR0FDZixJQUNFLEdBQUt6aUIsRUFRTUEsRUFBR2trQyxXQUFXemxFLEtBRXZCZ2tELEVBQVd6aUIsRUFBR0ksYUFBYTNoQyxFQUFNLGFBVjFCLENBRVAsSUFBSTRtRSxFQUFNLElBQUlOLGVBQ2RNLEVBQUl0d0IsS0FBSyxNQUFPdDJDLEdBQW1CLEdBQ25DNG1FLEVBQUlDLEtBQUssTUFDYyxJQUFuQkQsRUFBSXBtQixZQUFtQyxNQUFmb21CLEVBQUl0akMsU0FDOUIwZ0IsRUFBVzRpQixFQUFJRSxlQU1uQixNQUFPM29ELElBSVQsT0FBTzZuRCxFQUFrQmhtRSxHQUFRZ2tELEtBdURuQyxJQUFJK2lCLEVBQW9CUixFQUFZSCxHQTRCcEMsU0FBU1ksRUFBa0JwakUsR0FDekIsSUFBSXFqRSxFQUFZaEIsRUFBZXJpRSxFQUFTcGEsUUFDeEMsSUFBS3k5RSxFQUFXLENBRWQsSUFBSUMsRUFBWUgsRUFBa0JuakUsRUFBU3BhLFFBQ3ZDMDlFLEdBQ0ZELEVBQVloQixFQUFlcmlFLEVBQVNwYSxRQUFVLENBQzVDMlcsSUFBSyttRSxFQUFVL21FLElBQ2Z5SixJQUFLLElBQUk0N0QsRUFBa0IwQixFQUFVdDlELE9BS3pCQSxJQUFJMGxCLGdCQUNoQjIzQyxFQUFVcjlELElBQUl3akIsUUFBUXIvQixTQUFRLFNBQVN2RSxFQUFRdEQsR0FDN0MsSUFBSTg5RCxFQUFXaWpCLEVBQVVyOUQsSUFBSTBsQixlQUFlcHBDLEdBQzVDLEdBQUk4OUQsRUFBVSxDQUNaLElBQUk3akQsRUFBTXNtRSxFQUFtQlEsRUFBVTltRSxJQUFLM1csR0FDNUN3OEUsRUFBa0I3bEUsR0FBTzZqRCxNQUsvQmlqQixFQUFZaEIsRUFBZXJpRSxFQUFTcGEsUUFBVSxDQUM1QzJXLElBQUssS0FDTHlKLElBQUssTUFNWCxHQUFJcTlELEdBQWFBLEVBQVVyOUQsS0FBb0QsbUJBQXRDcTlELEVBQVVyOUQsSUFBSXNrQixvQkFBb0MsQ0FDekYsSUFBSWk1QyxFQUFtQkYsRUFBVXI5RCxJQUFJc2tCLG9CQUFvQnRxQixHQU96RCxHQUFnQyxPQUE1QnVqRSxFQUFpQjM5RSxPQUduQixPQUZBMjlFLEVBQWlCMzlFLE9BQVNpOUUsRUFDeEJRLEVBQVU5bUUsSUFBS2duRSxFQUFpQjM5RSxRQUMzQjI5RSxFQUlYLE9BQU92akUsRUFrQ1QsU0FBU3dqRSxJQUNQLElBQUlDLEVBQ0FDLEVBQWUsR0FDbkIsR0FBSXQ4RSxLQUFLdThFLFdBQ1BELEVBQWUsYUFDVixHQUNMRCxFQUFXcjhFLEtBQUt3OEUsNkJBQ0N4OEUsS0FBS3k4RSxXQUNwQkgsRUFBZXQ4RSxLQUFLMDhFLGdCQUNwQkosR0FBZ0IsTUFJaEJBLEdBREVELEdBTWMsY0FFbEIsSUFBSU0sRUFBYTM4RSxLQUFLNDhFLGdCQUN0QixHQUFrQixNQUFkRCxFQUFvQixDQUN0QkwsR0FBZ0IsSUFBTUssRUFDdEIsSUFBSUUsRUFBZTc4RSxLQUFLODhFLGtCQUNwQkQsSUFDRlAsR0FBZ0IsSUFBTU8sSUFLNUIsSUFBSWoxRSxFQUFPLEdBQ1BtMUUsRUFBZS84RSxLQUFLZzlFLGtCQUNwQkMsR0FBWSxFQUNaQyxFQUFnQmw5RSxLQUFLazlFLGdCQUV6QixLQURxQmw5RSxLQUFLbTlFLGNBQWdCRCxHQUN4QixDQUNoQixJQUFJRSxFQUFXcDlFLEtBQUtxOUUsY0FFSCxvQkFBYkQsSUFDRkEsRUFBVyxRQUViLElBQUlFLEVBQWF0OUUsS0FBS3U5RSxnQkFDbEJSLEdBQ0VLLEdBQThDLEdBQWxDTCxFQUFhajVFLFFBQVFzNUUsS0FDbkN4MUUsR0FBUXcxRSxFQUFXLEtBRXJCeDFFLEdBQVFtMUUsRUFDSk8sR0FBY1AsRUFBYWo1RSxRQUFRLElBQU13NUUsSUFBZVAsRUFBYXgrRSxPQUFTKytFLEVBQVcvK0UsT0FBUyxJQUNwR3FKLEdBQVEsUUFBVTAxRSxFQUFhLE1BR2pDMTFFLEdBQVF3MUUsRUFBVyxLQUFPRSxHQUFjLG9CQUVqQ0osRUFDVHQxRSxHQUFRLFFBQVVtMUUsR0FBZ0IsZUFDekJBLEVBQ1RuMUUsR0FBUW0xRSxHQUVSbjFFLEdBQVEwMEUsRUFDUlcsR0FBWSxHQUtkLE9BSElBLElBQ0ZyMUUsR0FBUSxLQUFPMDBFLEVBQWUsS0FFekIxMEUsRUFHVCxTQUFTNDFFLEVBQWMvdUIsR0FDckIsSUFBSTd4RCxFQUFTLEdBS2IsT0FKQWhCLE9BQU9xcEIsb0JBQW9CcnBCLE9BQU93L0IsZUFBZXF6QixJQUFRMXJELFNBQVEsU0FBU3RILEdBQ3hFbUIsRUFBT25CLEdBQVEsY0FBYytCLEtBQUsvQixHQUFRLFdBQWEsT0FBT2d6RCxFQUFNaHpELEdBQU1KLEtBQUtvekQsSUFBWUEsRUFBTWh6RCxNQUVuR21CLEVBQU84QixTQUFXMDlFLEVBQ1h4L0UsRUFHVCxTQUFTNmdGLEVBQWFodkIsRUFBT3o3QixHQUszQixRQUhjL3hCLElBQVYreEIsSUFDRkEsRUFBUSxDQUFFMHFELGFBQWMsS0FBTUMsWUFBYSxPQUUxQ2x2QixFQUFNOHRCLFdBRVAsT0FEQXZwRCxFQUFNMnFELFlBQWMsS0FDYmx2QixFQU1ULElBQUlqd0QsRUFBU2l3RCxFQUFNbXZCLGVBQWlCbnZCLEVBQU0rdEIsMkJBQzFDLEdBQUloK0UsRUFBUSxDQUNWLElBQUlvSixFQUFPNm1ELEVBQU1tdUIsZ0JBQ2IvMEUsRUFBUzRtRCxFQUFNcXVCLGtCQUFvQixFQVFuQ2UsRUFEVyw4RUFDYXJnRixLQUFLcWUsUUFBUUMsU0FBVyxFQUFJLEdBQzNDLElBQVRsVSxHQUFjQyxFQUFTZzJFLElBQWlCeEMsTUFBa0I1c0IsRUFBTWd1QixXQUNsRTUwRSxHQUFVZzJFLEdBR1osSUFBSWpsRSxFQUFXb2pFLEVBQWtCLENBQy9CeDlFLE9BQVFBLEVBQ1JvSixLQUFNQSxFQUNOQyxPQUFRQSxJQUVWbXJCLEVBQU0ycUQsWUFBYy9rRSxFQUVwQixJQUFJa2xFLEdBREpydkIsRUFBUSt1QixFQUFjL3VCLElBQ1d1dUIsZ0JBV2pDLE9BVkF2dUIsRUFBTXV1QixnQkFBa0IsV0FDdEIsT0FBMEIsTUFBdEJocUQsRUFBTTBxRCxhQUNESSxJQUVGOXFELEVBQU0wcUQsYUFBYWppRixNQUFRcWlGLEtBRXBDcnZCLEVBQU1tdkIsWUFBYyxXQUFhLE9BQU9obEUsRUFBU3BhLFFBQ2pEaXdELEVBQU1tdUIsY0FBZ0IsV0FBYSxPQUFPaGtFLEVBQVNoUixNQUNuRDZtRCxFQUFNcXVCLGdCQUFrQixXQUFhLE9BQU9sa0UsRUFBUy9RLE9BQVMsR0FDOUQ0bUQsRUFBTSt0Qix5QkFBMkIsV0FBYSxPQUFPNWpFLEVBQVNwYSxRQUN2RGl3RCxFQUlULElBQUlzTCxFQUFTdEwsRUFBTWd1QixVQUFZaHVCLEVBQU1pdUIsZ0JBQ3JDLE9BQUkzaUIsR0FDRkEsRUE5SkosU0FBU2drQixFQUFjaGtCLEdBRXJCLElBQUk1c0QsRUFBUSx5Q0FBeUMyQixLQUFLaXJELEdBQzFELEdBQUk1c0QsRUFBTyxDQUNULElBQUl5TCxFQUFXb2pFLEVBQWtCLENBQy9CeDlFLE9BQVEyTyxFQUFNLEdBQ2R2RixNQUFPdUYsRUFBTSxHQUNidEYsT0FBUXNGLEVBQU0sR0FBSyxJQUVyQixNQUFPLFdBQWFBLEVBQU0sR0FBSyxLQUFPeUwsRUFBU3BhLE9BQVMsSUFDdERvYSxFQUFTaFIsS0FBTyxLQUFPZ1IsRUFBUy9RLE9BQVMsR0FBSyxJQUtsRCxPQURBc0YsRUFBUSw2QkFBNkIyQixLQUFLaXJELElBRWpDLFdBQWE1c0QsRUFBTSxHQUFLLEtBQU80d0UsRUFBYzV3RSxFQUFNLElBQU0sSUFJM0Q0c0QsRUEwSUlna0IsQ0FBY2hrQixJQUN2QnRMLEVBQVErdUIsRUFBYy91QixJQUNoQml1QixjQUFnQixXQUFhLE9BQU8zaUIsR0FDbkN0TCxHQUlGQSxFQUtULFNBQVN1dkIsRUFBa0I1bkQsRUFBT21rQyxHQUM1QndnQixJQUNGQyxFQUFvQixHQUNwQkMsRUFBaUIsSUFTbkIsSUFOQSxJQUVJZ0QsR0FGTzduRCxFQUFNMzZCLE1BQVEsU0FFQSxNQURYMjZCLEVBQU14WSxTQUFXLElBRzNCb1YsRUFBUSxDQUFFMHFELGFBQWMsS0FBTUMsWUFBYSxNQUMzQ08sRUFBaUIsR0FDWmhqRixFQUFJcS9ELEVBQU1oOEQsT0FBUyxFQUFHckQsR0FBSyxFQUFHQSxJQUNyQ2dqRixFQUFlNzdFLEtBQUssWUFBY283RSxFQUFhbGpCLEVBQU1yL0QsR0FBSTgzQixJQUN6REEsRUFBTTBxRCxhQUFlMXFELEVBQU0ycUQsWUFHN0IsT0FEQTNxRCxFQUFNMnFELFlBQWMzcUQsRUFBTTBxRCxhQUFlLEtBQ2xDTyxFQUFjQyxFQUFleGlFLFVBQVU5YSxLQUFLLElBSXJELFNBQVN1OUUsRUFBZS9uRCxHQUN0QixJQUFJanBCLEVBQVEsc0NBQXNDMkIsS0FBS3NuQixFQUFNbWtDLE9BQzdELEdBQUlwdEQsRUFBTyxDQUNULElBQUkzTyxFQUFTMk8sRUFBTSxHQUNmdkYsR0FBUXVGLEVBQU0sR0FDZHRGLEdBQVVzRixFQUFNLEdBR2hCNnJELEVBQVdnaUIsRUFBa0J4OEUsR0FHakMsSUFBS3c2RCxHQUFZemlCLEdBQU1BLEVBQUdra0MsV0FBV2o4RSxHQUNuQyxJQUNFdzZELEVBQVd6aUIsRUFBR0ksYUFBYW40QyxFQUFRLFFBQ25DLE1BQU8yMEIsR0FDUDZsQyxFQUFXLEdBS2YsR0FBSUEsRUFBVSxDQUNaLElBQUl4K0MsRUFBT3crQyxFQUFTMTFELE1BQU0sa0JBQWtCc0UsRUFBTyxHQUNuRCxHQUFJNFMsRUFDRixPQUFPaGMsRUFBUyxJQUFNb0osRUFBTyxLQUFPNFMsRUFBTyxLQUN6QyxJQUFJM2IsTUFBTWdKLEdBQVFqSCxLQUFLLEtBQU8sS0FJdEMsT0FBTyxLQUdULFNBQVN3OUUsRUFBbUJob0QsR0FDMUIsSUFBSTUzQixFQUFTMi9FLEVBQWUvbkQsR0FHeEJ2YSxRQUFRMlosT0FBTzZvRCxTQUFXeGlFLFFBQVEyWixPQUFPNm9ELFFBQVFDLGFBQ25EemlFLFFBQVEyWixPQUFPNm9ELFFBQVFDLGFBQVksR0FHakM5L0UsSUFDRnd6QyxRQUFRNWIsUUFDUjRiLFFBQVE1YixNQUFNNTNCLElBR2hCd3pDLFFBQVE1YixNQUFNQSxFQUFNbWtDLE9BQ3BCMStDLFFBQVF3OEIsS0FBSyxHQTFUZitpQyxFQUFvQi80RSxNQUFLLFNBQVM3RCxHQUNoQyxJQUlJKy9FLEVBSkFDLEVBdENOLFNBQThCaGdGLEdBQzVCLElBQUlpZ0YsRUFFSixHQUFJcEQsSUFDRCxJQUNFLElBQUlPLEVBQU0sSUFBSU4sZUFDZE0sRUFBSXR3QixLQUFLLE1BQU85c0QsR0FBUSxHQUN4Qm85RSxFQUFJQyxLQUFLLE1BQ1Q0QyxFQUE4QixJQUFuQjdDLEVBQUlwbUIsV0FBbUJvbUIsRUFBSUUsYUFBZSxLQUdyRCxJQUFJNEMsRUFBa0I5QyxFQUFJK0Msa0JBQWtCLGNBQ3RCL0MsRUFBSStDLGtCQUFrQixlQUM1QyxHQUFJRCxFQUNGLE9BQU9BLEVBRVQsTUFBT3JoRixJQUtab2hGLEVBQVdqRCxFQUFhaDlFLEdBS3hCLElBSkEsSUFHSW9nRixFQUFXenhFLEVBSFg1UCxFQUFLLHdIQUlGNFAsRUFBUTVQLEVBQUd1UixLQUFLMnZFLElBQVdHLEVBQVl6eEUsRUFDOUMsT0FBS3l4RSxFQUNFQSxFQUFVLEdBRE0sS0FXQUMsQ0FBcUJyZ0YsR0FDNUMsSUFBS2dnRixFQUFrQixPQUFPLEtBSTlCLEdBQUl0RCxFQUFZMTlFLEtBQUtnaEYsR0FBbUIsQ0FFdEMsSUFBSU0sRUFBVU4sRUFBaUI1ckUsTUFBTTRyRSxFQUFpQjE2RSxRQUFRLEtBQU8sR0FDckV5NkUsRUFBZ0J6TixFQUFXZ08sRUFBUyxVQUFVcGdGLFdBQzlDOC9FLEVBQW1CaGdGLE9BR25CZ2dGLEVBQW1CL0MsRUFBbUJqOUUsRUFBUWdnRixHQUM5Q0QsRUFBZ0IvQyxFQUFhZ0QsR0FHL0IsT0FBS0QsRUFJRSxDQUNMcHBFLElBQUtxcEUsRUFDTDUvRCxJQUFLMi9ELEdBTEUsUUE0VFgsSUFBSVEsRUFBK0I1RCxFQUFxQnZvRSxNQUFNLEdBQzFEb3NFLEVBQThCNUQsRUFBb0J4b0UsTUFBTSxHQUU1RDVYLEVBQVF5aUYsYUFBZUEsRUFDdkJ6aUYsRUFBUW1qRixlQUFpQkEsRUFDekJuakYsRUFBUWdoRixrQkFBb0JBLEVBQzVCaGhGLEVBQVErZ0Ysa0JBQW9CQSxFQUU1Qi9nRixFQUFRdS9FLFFBQVUsU0FBU3g2RSxHQUd6QixJQUZBQSxFQUFVQSxHQUFXLElBRVR1bkMsY0FDVkEsRUFBY3ZuQyxFQUFRdW5DLGFBQ29DLElBQXRELENBQUMsT0FBUSxVQUFXLFFBQVF4akMsUUFBUXdqQyxJQUN0QyxNQUFNLElBQUk3bkMsTUFBTSxlQUFpQjZuQyxFQUFjLDZEQXlCbkQsR0FuQkl2bkMsRUFBUXk3RSxlQUNOejdFLEVBQVFrL0UsdUJBQ1Y5RCxFQUFxQjU4RSxPQUFTLEdBR2hDNDhFLEVBQXFCem5ELFFBQVEzekIsRUFBUXk3RSxlQUtuQ3o3RSxFQUFRZzhFLG9CQUNOaDhFLEVBQVFtL0UsNEJBQ1Y5RCxFQUFvQjc4RSxPQUFTLEdBRy9CNjhFLEVBQW9CMW5ELFFBQVEzekIsRUFBUWc4RSxvQkFJbENoOEUsRUFBUW8vRSxjQUFnQjlELElBQWUsQ0FFekMsSUFBSStELEVBQVMxRSxFQUFlei9FLEVBQVEsVUFDaENva0YsRUFBV0QsRUFBT3RpRixVQUFVd2lGLFNBRTNCRCxFQUFTRSxxQkFDWkgsRUFBT3RpRixVQUFVd2lGLFNBQVcsU0FBUzczRSxFQUFTaXZDLEdBRzVDLE9BRkFza0MsRUFBa0J0a0MsR0FBWWp2QyxFQUM5Qnd6RSxFQUFldmtDLFFBQVl6MUMsRUFDcEJvK0UsRUFBU2hrRixLQUFLMkUsS0FBTXlILEVBQVNpdkMsSUFHdEMwb0MsRUFBT3RpRixVQUFVd2lGLFNBQVNDLG9CQUFxQixHQWdCbkQsR0FYS3hFLElBQ0hBLEVBQThCLGdDQUFpQ2g3RSxHQUM3REEsRUFBUWc3RSw2QkFJUEYsSUFDSEEsR0FBMEIsRUFDMUJwN0UsTUFBTXUrRSxrQkFBb0JBLElBR3ZCbEQsRUFBdUIsQ0FDMUIsSUFBSTBFLElBQWlCLDZCQUE4QnovRSxJQUNqREEsRUFBUTAvRSx5QkFLVixLQUdzQyxJQURmL0UsRUFBZXovRSxFQUFRLGtCQUN6QnlrRixlQUNqQkYsR0FBaUIsR0FFbkIsTUFBTW5pRixJQVNKbWlGLEdBamhCc0IsaUJBQVozakUsU0FBc0MsT0FBWkEsU0FBNEMsbUJBQWZBLFFBQVE2WSxLQWtoQjNFb21ELEdBQXdCLEVBMUd4QjZFLEVBQVc5akUsUUFBUXdYLEtBRXZCeFgsUUFBUXdYLEtBQU8sU0FBVS95QixHQUN2QixHQUFhLHNCQUFUQSxFQUE4QixDQUNoQyxJQUFJcy9FLEVBQVl0aEYsVUFBVSxJQUFNQSxVQUFVLEdBQUdpOEQsTUFDekNzbEIsRUFBZ0I3L0UsS0FBSzB4QixVQUFVcHhCLEdBQU0vQixPQUFTLEVBRWxELEdBQUlxaEYsSUFBYUMsRUFDZixPQUFPekIsRUFBa0I5L0UsVUFBVSxJQUl2QyxPQUFPcWhGLEVBQVN6bkUsTUFBTWxZLEtBQU0xQixhQWJoQyxJQUNNcWhGLEdBZ0hOM2tGLEVBQVE4a0Ysc0JBQXdCLFdBQzlCM0UsRUFBcUI1OEUsT0FBUyxFQUM5QjY4RSxFQUFvQjc4RSxPQUFTLEVBRTdCNDhFLEVBQXVCNEQsRUFBNkJuc0UsTUFBTSxHQUMxRHdvRSxFQUFzQjRELEVBQTRCcHNFLE1BQU0sR0FFeERtcEUsRUFBb0JSLEVBQVlILEdBQ2hDSSxFQUFlRCxFQUFZSixNLG9DQzFsQjdCbGdGLEVBQU9ELFFBQVUsU0FBU0MsR0FvQnpCLE9BbkJLQSxFQUFPOGtGLGtCQUNYOWtGLEVBQU95aUMsVUFBWSxhQUNuQnppQyxFQUFPK2tGLE1BQVEsR0FFVi9rRixFQUFPMmdCLFdBQVUzZ0IsRUFBTzJnQixTQUFXLElBQ3hDaGdCLE9BQU9DLGVBQWVaLEVBQVEsU0FBVSxDQUN2Q2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0UsS0FHaEJTLE9BQU9DLGVBQWVaLEVBQVEsS0FBTSxDQUNuQ2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0MsS0FHaEJELEVBQU84a0YsZ0JBQWtCLEdBRW5COWtGLEksZ0JDZlJELEVBQVFpbUMsbUJBQXFCLEVBQVEsSUFBOEJBLG1CQUNuRWptQyxFQUFRdy9FLGtCQUFvQixFQUFRLEtBQTZCQSxrQkFDakV4L0UsRUFBUWlsRixXQUFhLEVBQVEsS0FBcUJBLFksY0NBbEQsSUFBSUMsRUFBZSxtRUFBbUU1OEUsTUFBTSxJQUs1RnRJLEVBQVFxdUIsT0FBUyxTQUFVdkQsR0FDekIsR0FBSSxHQUFLQSxHQUFVQSxFQUFTbzZELEVBQWEzaEYsT0FDdkMsT0FBTzJoRixFQUFhcDZELEdBRXRCLE1BQU0sSUFBSTVKLFVBQVUsNkJBQStCNEosSUFPckQ5cUIsRUFBUTJ0QixPQUFTLFNBQVUyTyxHQWlCekIsT0FoQlcsSUFnQkNBLEdBQVlBLEdBZmIsR0FnQkRBLEVBakJDLEdBR0csSUFrQkNBLEdBQVlBLEdBakJiLElBa0JKQSxFQW5CSSxHQVNLLEdBTlIsSUFvQkNBLEdBQVlBLEdBbkJiLEdBb0JEQSxFQXJCQyxHQU9RLEdBSlIsSUFzQlBBLEVBQ0ssR0F0QkcsSUEwQlJBLEVBQ0ssSUFJRCxJLGdCQzFEVixJQUFJbjZCLEVBQU8sRUFBUSxJQXFCbkIsU0FBUzZqQyxJQUNQaGhDLEtBQUtxbEMsT0FBUyxHQUNkcmxDLEtBQUttZ0YsU0FBVSxFQUVmbmdGLEtBQUsweEUsTUFBUSxDQUFDdDZELGVBQWdCLEVBQUdELGdCQUFpQixHQVNwRDZwQixFQUFZbGtDLFVBQVVtbUMsZ0JBQ3BCLFNBQTZCbTlDLEVBQVdDLEdBQ3RDcmdGLEtBQUtxbEMsT0FBT3RpQyxRQUFRcTlFLEVBQVdDLElBUW5Dci9DLEVBQVlsa0MsVUFBVXlsQyxJQUFNLFNBQXlCKzlDLEdBdENyRCxJQUFnQ3pwRSxFQUFVQyxFQUVwQ3lwRSxFQUNBQyxFQUNBQyxFQUNBQyxFQUwwQjdwRSxFQXVDSDdXLEtBQUsweEUsTUF2Q1E1NkQsRUF1Q0R3cEUsRUFyQ25DQyxFQUFRMXBFLEVBQVNPLGNBQ2pCb3BFLEVBQVExcEUsRUFBU00sY0FDakJxcEUsRUFBVTVwRSxFQUFTTSxnQkFDbkJ1cEUsRUFBVTVwRSxFQUFTSyxnQkFDaEJxcEUsRUFBUUQsR0FBU0MsR0FBU0QsR0FBU0csR0FBV0QsR0FDOUN0akYsRUFBS29hLG9DQUFvQ1YsRUFBVUMsSUFBYSxHQWlDckU5VyxLQUFLMHhFLE1BQVE0TyxFQUNidGdGLEtBQUtxbEMsT0FBT2hqQyxLQUFLaStFLEtBRWpCdGdGLEtBQUttZ0YsU0FBVSxFQUNmbmdGLEtBQUtxbEMsT0FBT2hqQyxLQUFLaStFLEtBYXJCdC9DLEVBQVlsa0MsVUFBVWtuQyxRQUFVLFdBSzlCLE9BSktoa0MsS0FBS21nRixVQUNSbmdGLEtBQUtxbEMsT0FBT3M3QyxLQUFLeGpGLEVBQUtvYSxxQ0FDdEJ2WCxLQUFLbWdGLFNBQVUsR0FFVm5nRixLQUFLcWxDLFFBR2RycUMsRUFBUWdtQyxZQUFjQSxHLGdCQ3ZFdEIsSUFBSTdqQyxFQUFPLEVBQVEsSUFDZnlqRixFQUFlLEVBQVEsS0FDdkI3L0MsRUFBVyxFQUFRLElBQWVBLFNBQ2xDRCxFQUFZLEVBQVEsSUFDcEIrL0MsRUFBWSxFQUFRLEtBQWdCQSxVQUV4QyxTQUFTckcsRUFBa0JzRyxFQUFZQyxHQUNyQyxJQUFJOUUsRUFBWTZFLEVBS2hCLE1BSjBCLGlCQUFmQSxJQUNUN0UsRUFBWTkrRSxFQUFLcWEsb0JBQW9Cc3BFLElBR1YsTUFBdEI3RSxFQUFVK0UsU0FDYixJQUFJQyxFQUF5QmhGLEVBQVc4RSxHQUN4QyxJQUFJRyxFQUF1QmpGLEVBQVc4RSxHQTBRNUMsU0FBU0csRUFBdUJKLEVBQVlDLEdBQzFDLElBQUk5RSxFQUFZNkUsRUFDVSxpQkFBZkEsSUFDVDdFLEVBQVk5K0UsRUFBS3FhLG9CQUFvQnNwRSxJQUd2QyxJQUFJaGxFLEVBQVUzZSxFQUFLaVgsT0FBTzZuRSxFQUFXLFdBQ2pDNzVDLEVBQVVqbEMsRUFBS2lYLE9BQU82bkUsRUFBVyxXQUdqQzUzQyxFQUFRbG5DLEVBQUtpWCxPQUFPNm5FLEVBQVcsUUFBUyxJQUN4Q3JrRSxFQUFhemEsRUFBS2lYLE9BQU82bkUsRUFBVyxhQUFjLE1BQ2xEMzNDLEVBQWlCbm5DLEVBQUtpWCxPQUFPNm5FLEVBQVcsaUJBQWtCLE1BQzFEbDRDLEVBQVc1bUMsRUFBS2lYLE9BQU82bkUsRUFBVyxZQUNsQ3A2QyxFQUFPMWtDLEVBQUtpWCxPQUFPNm5FLEVBQVcsT0FBUSxNQUkxQyxHQUFJbmdFLEdBQVc5YixLQUFLeWhDLFNBQ2xCLE1BQU0sSUFBSWhpQyxNQUFNLHdCQUEwQnFjLEdBR3hDbEUsSUFDRkEsRUFBYXphLEVBQUttVyxVQUFVc0UsSUFHOUJ3cUIsRUFBVUEsRUFDUHhqQixJQUFJamhCLFFBSUppaEIsSUFBSXpoQixFQUFLbVcsV0FLVHNMLEtBQUksU0FBVXBnQixHQUNiLE9BQU9vWixHQUFjemEsRUFBS21ZLFdBQVdzQyxJQUFlemEsRUFBS21ZLFdBQVc5VyxHQUNoRXJCLEVBQUsyWSxTQUFTOEIsRUFBWXBaLEdBQzFCQSxLQU9Sd0IsS0FBS3NoQyxPQUFTUCxFQUFTd0UsVUFBVWxCLEVBQU16bEIsSUFBSWpoQixTQUFTLEdBQ3BEcUMsS0FBS3FoQyxTQUFXTixFQUFTd0UsVUFBVW5ELEdBQVMsR0FFNUNwaUMsS0FBS21oRixpQkFBbUJuaEYsS0FBS3FoQyxTQUFTMkMsVUFBVXBsQixLQUFJLFNBQVUzaEIsR0FDNUQsT0FBT0UsRUFBS3dhLGlCQUFpQkMsRUFBWTNhLEVBQUc4akYsTUFHOUMvZ0YsS0FBSzRYLFdBQWFBLEVBQ2xCNVgsS0FBS3NrQyxlQUFpQkEsRUFDdEJ0a0MsS0FBS3VoQyxVQUFZd0MsRUFDakIvakMsS0FBS29oRixjQUFnQkwsRUFDckIvZ0YsS0FBSzZoQyxLQUFPQSxFQTRHZCxTQUFTdy9DLElBQ1ByaEYsS0FBS29YLGNBQWdCLEVBQ3JCcFgsS0FBS21YLGdCQUFrQixFQUN2Qm5YLEtBQUt4QixPQUFTLEtBQ2R3QixLQUFLaVgsYUFBZSxLQUNwQmpYLEtBQUtrWCxlQUFpQixLQUN0QmxYLEtBQUt2RSxLQUFPLEtBa2FkLFNBQVN3bEYsRUFBeUJILEVBQVlDLEdBQzVDLElBQUk5RSxFQUFZNkUsRUFDVSxpQkFBZkEsSUFDVDdFLEVBQVk5K0UsRUFBS3FhLG9CQUFvQnNwRSxJQUd2QyxJQUFJaGxFLEVBQVUzZSxFQUFLaVgsT0FBTzZuRSxFQUFXLFdBQ2pDK0UsRUFBVzdqRixFQUFLaVgsT0FBTzZuRSxFQUFXLFlBRXRDLEdBQUluZ0UsR0FBVzliLEtBQUt5aEMsU0FDbEIsTUFBTSxJQUFJaGlDLE1BQU0sd0JBQTBCcWMsR0FHNUM5YixLQUFLcWhDLFNBQVcsSUFBSU4sRUFDcEIvZ0MsS0FBS3NoQyxPQUFTLElBQUlQLEVBRWxCLElBQUl1Z0QsRUFBYSxDQUNmMTVFLE1BQU8sRUFDUEMsT0FBUSxHQUVWN0gsS0FBS3VoRixVQUFZUCxFQUFTcGlFLEtBQUksU0FBVTNoQixHQUN0QyxHQUFJQSxFQUFFa1ksSUFHSixNQUFNLElBQUkxVixNQUFNLHNEQUVsQixJQUFJZ2IsRUFBU3RkLEVBQUtpWCxPQUFPblgsRUFBRyxVQUN4QnVrRixFQUFhcmtGLEVBQUtpWCxPQUFPcUcsRUFBUSxRQUNqQ2duRSxFQUFldGtGLEVBQUtpWCxPQUFPcUcsRUFBUSxVQUV2QyxHQUFJK21FLEVBQWFGLEVBQVcxNUUsTUFDdkI0NUUsSUFBZUYsRUFBVzE1RSxNQUFRNjVFLEVBQWVILEVBQVd6NUUsT0FDL0QsTUFBTSxJQUFJcEksTUFBTSx3REFJbEIsT0FGQTZoRixFQUFhN21FLEVBRU4sQ0FDTGluRSxnQkFBaUIsQ0FHZnRxRSxjQUFlb3FFLEVBQWEsRUFDNUJycUUsZ0JBQWlCc3FFLEVBQWUsR0FFbENFLFNBQVUsSUFBSW5ILEVBQWtCcjlFLEVBQUtpWCxPQUFPblgsRUFBRyxPQUFROGpGLE9BLzNCN0R2RyxFQUFrQjk0QyxjQUFnQixTQUFTby9DLEVBQVlDLEdBQ3JELE9BQU9HLEVBQXVCeC9DLGNBQWNvL0MsRUFBWUMsSUFNMUR2RyxFQUFrQjE5RSxVQUFVMmtDLFNBQVcsRUFnQ3ZDKzRDLEVBQWtCMTlFLFVBQVU4a0Ysb0JBQXNCLEtBQ2xEaG1GLE9BQU9DLGVBQWUyK0UsRUFBa0IxOUUsVUFBVyxxQkFBc0IsQ0FDdkV3NUQsY0FBYyxFQUNkeDZELFlBQVksRUFDWkMsSUFBSyxXQUtILE9BSktpRSxLQUFLNGhGLHFCQUNSNWhGLEtBQUs2aEYsZUFBZTdoRixLQUFLdWhDLFVBQVd2aEMsS0FBSzRYLFlBR3BDNVgsS0FBSzRoRix1QkFJaEJwSCxFQUFrQjE5RSxVQUFVZ2xGLG1CQUFxQixLQUNqRGxtRixPQUFPQyxlQUFlMitFLEVBQWtCMTlFLFVBQVcsb0JBQXFCLENBQ3RFdzVELGNBQWMsRUFDZHg2RCxZQUFZLEVBQ1pDLElBQUssV0FLSCxPQUpLaUUsS0FBSzhoRixvQkFDUjloRixLQUFLNmhGLGVBQWU3aEYsS0FBS3VoQyxVQUFXdmhDLEtBQUs0WCxZQUdwQzVYLEtBQUs4aEYsc0JBSWhCdEgsRUFBa0IxOUUsVUFBVWlsRix3QkFDMUIsU0FBa0RyckUsRUFBTVYsR0FDdEQsSUFBSXphLEVBQUltYixFQUFLaFosT0FBT3NZLEdBQ3BCLE1BQWEsTUFBTnphLEdBQW1CLE1BQU5BLEdBUXhCaS9FLEVBQWtCMTlFLFVBQVUra0YsZUFDMUIsU0FBeUNuckUsRUFBTXl0QixHQUM3QyxNQUFNLElBQUkxa0MsTUFBTSw2Q0FHcEIrNkUsRUFBa0J3SCxnQkFBa0IsRUFDcEN4SCxFQUFrQnlILGVBQWlCLEVBRW5DekgsRUFBa0IwSCxxQkFBdUIsRUFDekMxSCxFQUFrQjJILGtCQUFvQixFQWtCdEMzSCxFQUFrQjE5RSxVQUFVZ2xDLFlBQzFCLFNBQXVDcytDLEVBQVdnQyxFQUFVQyxHQUMxRCxJQUdJdCtDLEVBSEF2OEIsRUFBVTQ2RSxHQUFZLEtBSTFCLE9BSFlDLEdBQVU3SCxFQUFrQndILGlCQUl4QyxLQUFLeEgsRUFBa0J3SCxnQkFDckJqK0MsRUFBVy9qQyxLQUFLc2lGLG1CQUNoQixNQUNGLEtBQUs5SCxFQUFrQnlILGVBQ3JCbCtDLEVBQVcvakMsS0FBS3VpRixrQkFDaEIsTUFDRixRQUNFLE1BQU0sSUFBSTlpRixNQUFNLCtCQUdsQixJQUFJbVksRUFBYTVYLEtBQUs0WCxXQUN0Qm1zQixFQUFTbmxCLEtBQUksU0FBVW1qQixHQUNyQixJQUFJdmpDLEVBQTRCLE9BQW5CdWpDLEVBQVF2akMsT0FBa0IsS0FBT3dCLEtBQUtxaEMsU0FBU3Q1QixHQUFHZzZCLEVBQVF2akMsUUFFdkUsTUFBTyxDQUNMQSxPQUZGQSxFQUFTckIsRUFBS3dhLGlCQUFpQkMsRUFBWXBaLEVBQVF3QixLQUFLb2hGLGVBR3REaHFFLGNBQWUycUIsRUFBUTNxQixjQUN2QkQsZ0JBQWlCNHFCLEVBQVE1cUIsZ0JBQ3pCRixhQUFjOHFCLEVBQVE5cUIsYUFDdEJDLGVBQWdCNnFCLEVBQVE3cUIsZUFDeEJ6YixLQUF1QixPQUFqQnNtQyxFQUFRdG1DLEtBQWdCLEtBQU91RSxLQUFLc2hDLE9BQU92NUIsR0FBR2c2QixFQUFRdG1DLFNBRTdEdUUsTUFBTStDLFFBQVFxOUUsRUFBVzU0RSxJQXlCaENnekUsRUFBa0IxOUUsVUFBVTBsRix5QkFDMUIsU0FBb0RudUUsR0FDbEQsSUFBSXpNLEVBQU96SyxFQUFLaVgsT0FBT0MsRUFBTyxRQU0xQm91RSxFQUFTLENBQ1hqa0YsT0FBUXJCLEVBQUtpWCxPQUFPQyxFQUFPLFVBQzNCNEMsYUFBY3JQLEVBQ2RzUCxlQUFnQi9aLEVBQUtpWCxPQUFPQyxFQUFPLFNBQVUsSUFJL0MsR0FEQW91RSxFQUFPamtGLE9BQVN3QixLQUFLMGlGLGlCQUFpQkQsRUFBT2prRixRQUN6Q2lrRixFQUFPamtGLE9BQVMsRUFDbEIsTUFBTyxHQUdULElBQUl1bEMsRUFBVyxHQUVYL3RCLEVBQVFoVyxLQUFLMmlGLGFBQWFGLEVBQ0F6aUYsS0FBS3VpRixrQkFDTCxlQUNBLGlCQUNBcGxGLEVBQUt5WiwyQkFDTGdxRSxFQUFhdUIsbUJBQzNDLEdBQUluc0UsR0FBUyxFQUFHLENBQ2QsSUFBSStyQixFQUFVL2hDLEtBQUt1aUYsa0JBQWtCdnNFLEdBRXJDLFFBQXFCL1UsSUFBakJvVCxFQUFNeE0sT0FPUixJQU5BLElBQUlvUCxFQUFlOHFCLEVBQVE5cUIsYUFNcEI4cUIsR0FBV0EsRUFBUTlxQixlQUFpQkEsR0FDekM4c0IsRUFBUzFoQyxLQUFLLENBQ1p1RixLQUFNekssRUFBS2lYLE9BQU8ydEIsRUFBUyxnQkFBaUIsTUFDNUNsNkIsT0FBUTFLLEVBQUtpWCxPQUFPMnRCLEVBQVMsa0JBQW1CLE1BQ2hENmdELFdBQVl6bEYsRUFBS2lYLE9BQU8ydEIsRUFBUyxzQkFBdUIsUUFHMURBLEVBQVUvaEMsS0FBS3VpRixvQkFBb0J2c0UsUUFTckMsSUFOQSxJQUFJa0IsRUFBaUI2cUIsRUFBUTdxQixlQU10QjZxQixHQUNBQSxFQUFROXFCLGVBQWlCclAsR0FDekJtNkIsRUFBUTdxQixnQkFBa0JBLEdBQy9CNnNCLEVBQVMxaEMsS0FBSyxDQUNadUYsS0FBTXpLLEVBQUtpWCxPQUFPMnRCLEVBQVMsZ0JBQWlCLE1BQzVDbDZCLE9BQVExSyxFQUFLaVgsT0FBTzJ0QixFQUFTLGtCQUFtQixNQUNoRDZnRCxXQUFZemxGLEVBQUtpWCxPQUFPMnRCLEVBQVMsc0JBQXVCLFFBRzFEQSxFQUFVL2hDLEtBQUt1aUYsb0JBQW9CdnNFLEdBS3pDLE9BQU8rdEIsR0FHWC9vQyxFQUFRdy9FLGtCQUFvQkEsRUFnRzVCMEcsRUFBdUJwa0YsVUFBWWxCLE9BQU9ZLE9BQU9nK0UsRUFBa0IxOUUsV0FDbkVva0YsRUFBdUJwa0YsVUFBVTZrRixTQUFXbkgsRUFNNUMwRyxFQUF1QnBrRixVQUFVNGxGLGlCQUFtQixTQUFTci9DLEdBQzNELElBV0lub0MsRUFYQTJuRixFQUFpQngvQyxFQUtyQixHQUp1QixNQUFuQnJqQyxLQUFLNFgsYUFDUGlyRSxFQUFpQjFsRixFQUFLMlksU0FBUzlWLEtBQUs0WCxXQUFZaXJFLElBRzlDN2lGLEtBQUtxaEMsU0FBU3A2QixJQUFJNDdFLEdBQ3BCLE9BQU83aUYsS0FBS3FoQyxTQUFTdjlCLFFBQVErK0UsR0FNL0IsSUFBSzNuRixFQUFJLEVBQUdBLEVBQUk4RSxLQUFLbWhGLGlCQUFpQjVpRixTQUFVckQsRUFDOUMsR0FBSThFLEtBQUttaEYsaUJBQWlCam1GLElBQU1tb0MsRUFDOUIsT0FBT25vQyxFQUlYLE9BQVEsR0FZVmdtRixFQUF1QngvQyxjQUNyQixTQUF5Q28vQyxFQUFZQyxHQUNuRCxJQUFJK0IsRUFBTWxuRixPQUFPWSxPQUFPMGtGLEVBQXVCcGtGLFdBRTNDdW5DLEVBQVF5K0MsRUFBSXhoRCxPQUFTUCxFQUFTd0UsVUFBVXU3QyxFQUFXeC9DLE9BQU8wQyxXQUFXLEdBQ3JFNUIsRUFBVTBnRCxFQUFJemhELFNBQVdOLEVBQVN3RSxVQUFVdTdDLEVBQVd6L0MsU0FBUzJDLFdBQVcsR0FDL0U4K0MsRUFBSWxyRSxXQUFha3BFLEVBQVczL0MsWUFDNUIyaEQsRUFBSXgrQyxlQUFpQnc4QyxFQUFXNzhDLHdCQUF3QjYrQyxFQUFJemhELFNBQVMyQyxVQUNiOCtDLEVBQUlsckUsWUFDNURrckUsRUFBSWpoRCxLQUFPaS9DLEVBQVc1L0MsTUFDdEI0aEQsRUFBSTFCLGNBQWdCTCxFQUNwQitCLEVBQUkzQixpQkFBbUIyQixFQUFJemhELFNBQVMyQyxVQUFVcGxCLEtBQUksU0FBVTNoQixHQUMxRCxPQUFPRSxFQUFLd2EsaUJBQWlCbXJFLEVBQUlsckUsV0FBWTNhLEVBQUc4akYsTUFZbEQsSUFKQSxJQUFJZ0MsRUFBb0JqQyxFQUFXdi9DLFVBQVV5QyxVQUFVcHhCLFFBQ25Eb3dFLEVBQXdCRixFQUFJbEIsb0JBQXNCLEdBQ2xEcUIsRUFBdUJILEVBQUloQixtQkFBcUIsR0FFM0M1bUYsRUFBSSxFQUFHcUQsRUFBU3drRixFQUFrQnhrRixPQUFRckQsRUFBSXFELEVBQVFyRCxJQUFLLENBQ2xFLElBQUlnb0YsRUFBYUgsRUFBa0I3bkYsR0FDL0Jpb0YsRUFBYyxJQUFJOUIsRUFDdEI4QixFQUFZL3JFLGNBQWdCOHJFLEVBQVc5ckUsY0FDdkMrckUsRUFBWWhzRSxnQkFBa0IrckUsRUFBVy9yRSxnQkFFckMrckUsRUFBVzFrRixTQUNiMmtGLEVBQVkza0YsT0FBUzRqQyxFQUFRdCtCLFFBQVFvL0UsRUFBVzFrRixRQUNoRDJrRixFQUFZbHNFLGFBQWVpc0UsRUFBV2pzRSxhQUN0Q2tzRSxFQUFZanNFLGVBQWlCZ3NFLEVBQVdoc0UsZUFFcENnc0UsRUFBV3puRixPQUNiMG5GLEVBQVkxbkYsS0FBTzRvQyxFQUFNdmdDLFFBQVFvL0UsRUFBV3puRixPQUc5Q3duRixFQUFxQjVnRixLQUFLOGdGLElBRzVCSCxFQUFzQjNnRixLQUFLOGdGLEdBSzdCLE9BRkF0QyxFQUFVaUMsRUFBSWhCLG1CQUFvQjNrRixFQUFLeVosNEJBRWhDa3NFLEdBTVg1QixFQUF1QnBrRixVQUFVMmtDLFNBQVcsRUFLNUM3bEMsT0FBT0MsZUFBZXFsRixFQUF1QnBrRixVQUFXLFVBQVcsQ0FDakVmLElBQUssV0FDSCxPQUFPaUUsS0FBS21oRixpQkFBaUJ2dUUsV0FxQmpDc3VFLEVBQXVCcGtGLFVBQVUra0YsZUFDL0IsU0FBeUNuckUsRUFBTXl0QixHQWU3QyxJQWRBLElBWUlwQyxFQUFTbjRCLEVBQUt5d0UsRUFBU3RvRSxFQUFLNVYsRUFaNUJpYixFQUFnQixFQUNoQnFzQixFQUEwQixFQUMxQkcsRUFBdUIsRUFDdkJELEVBQXlCLEVBQ3pCRyxFQUFpQixFQUNqQkQsRUFBZSxFQUNmdGxDLEVBQVNtWSxFQUFLblksT0FDZHlYLEVBQVEsRUFDUm90RSxFQUFpQixHQUNqQkMsRUFBTyxHQUNQQyxFQUFtQixHQUNuQlAsRUFBb0IsR0FHakIvc0UsRUFBUXpYLEdBQ2IsR0FBMkIsTUFBdkJtWSxFQUFLaFosT0FBT3NZLEdBQ2RvQixJQUNBcEIsSUFDQXl0QixFQUEwQixPQUV2QixHQUEyQixNQUF2Qi9zQixFQUFLaFosT0FBT3NZLEdBQ25CQSxRQUVHLENBU0gsS0FSQStyQixFQUFVLElBQUlzL0MsR0FDTmpxRSxjQUFnQkEsRUFPbkJyRixFQUFNaUUsRUFBT2pFLEVBQU14VCxJQUNsQnlCLEtBQUsraEYsd0JBQXdCcnJFLEVBQU0zRSxHQURUQSxLQVFoQyxHQURBc29FLEVBQVUrSSxFQUZWeDVFLEVBQU04TSxFQUFLOUQsTUFBTW9ELEVBQU9qRSxJQUl0QmlFLEdBQVNwTSxFQUFJckwsV0FDUixDQUVMLElBREE4N0UsRUFBVSxHQUNIcmtFLEVBQVFqRSxHQUNiK3VCLEVBQVVuWSxPQUFPalMsRUFBTVYsRUFBT3F0RSxHQUM5QmxuRixFQUFRa25GLEVBQUtsbkYsTUFDYjZaLEVBQVFxdEUsRUFBS3o3RCxLQUNieXlELEVBQVFoNEUsS0FBS2xHLEdBR2YsR0FBdUIsSUFBbkJrK0UsRUFBUTk3RSxPQUNWLE1BQU0sSUFBSWtCLE1BQU0sMENBR2xCLEdBQXVCLElBQW5CNDZFLEVBQVE5N0UsT0FDVixNQUFNLElBQUlrQixNQUFNLDBDQUdsQjJqRixFQUFleDVFLEdBQU95d0UsRUFJeEJ0NEMsRUFBUTVxQixnQkFBa0Jzc0IsRUFBMEI0MkMsRUFBUSxHQUM1RDUyQyxFQUEwQjFCLEVBQVE1cUIsZ0JBRTlCa2pFLEVBQVE5N0UsT0FBUyxJQUVuQndqQyxFQUFRdmpDLE9BQVNzbEMsRUFBaUJ1MkMsRUFBUSxHQUMxQ3YyQyxHQUFrQnUyQyxFQUFRLEdBRzFCdDRDLEVBQVE5cUIsYUFBZTJzQixFQUF1QnkyQyxFQUFRLEdBQ3REejJDLEVBQXVCN0IsRUFBUTlxQixhQUUvQjhxQixFQUFROXFCLGNBQWdCLEVBR3hCOHFCLEVBQVE3cUIsZUFBaUJ5c0IsRUFBeUIwMkMsRUFBUSxHQUMxRDEyQyxFQUF5QjVCLEVBQVE3cUIsZUFFN0JtakUsRUFBUTk3RSxPQUFTLElBRW5Cd2pDLEVBQVF0bUMsS0FBT29vQyxFQUFldzJDLEVBQVEsR0FDdEN4MkMsR0FBZ0J3MkMsRUFBUSxLQUk1QjBJLEVBQWtCMWdGLEtBQUswL0IsR0FDYSxpQkFBekJBLEVBQVE5cUIsY0FDakJxc0UsRUFBaUJqaEYsS0FBSzAvQixHQUs1QjgrQyxFQUFVa0MsRUFBbUI1bEYsRUFBS2thLHFDQUNsQ3JYLEtBQUs0aEYsb0JBQXNCbUIsRUFFM0JsQyxFQUFVeUMsRUFBa0JubUYsRUFBS3laLDRCQUNqQzVXLEtBQUs4aEYsbUJBQXFCd0IsR0FPOUJwQyxFQUF1QnBrRixVQUFVNmxGLGFBQy9CLFNBQXVDWSxFQUFTQyxFQUFXQyxFQUNwQkMsRUFBYUMsRUFBYUMsR0FNL0QsR0FBSUwsRUFBUUUsSUFBYyxFQUN4QixNQUFNLElBQUl2bkUsVUFBVSxnREFDRXFuRSxFQUFRRSxJQUVoQyxHQUFJRixFQUFRRyxHQUFlLEVBQ3pCLE1BQU0sSUFBSXhuRSxVQUFVLGtEQUNFcW5FLEVBQVFHLElBR2hDLE9BQU85QyxFQUFhcnBDLE9BQU9nc0MsRUFBU0MsRUFBV0csRUFBYUMsSUFPaEUxQyxFQUF1QnBrRixVQUFVK21GLG1CQUMvQixXQUNFLElBQUssSUFBSTd0RSxFQUFRLEVBQUdBLEVBQVFoVyxLQUFLc2lGLG1CQUFtQi9qRixTQUFVeVgsRUFBTyxDQUNuRSxJQUFJK3JCLEVBQVUvaEMsS0FBS3NpRixtQkFBbUJ0c0UsR0FNdEMsR0FBSUEsRUFBUSxFQUFJaFcsS0FBS3NpRixtQkFBbUIvakYsT0FBUSxDQUM5QyxJQUFJdWxGLEVBQWM5akYsS0FBS3NpRixtQkFBbUJ0c0UsRUFBUSxHQUVsRCxHQUFJK3JCLEVBQVEzcUIsZ0JBQWtCMHNFLEVBQVkxc0UsY0FBZSxDQUN2RDJxQixFQUFRZ2lELG9CQUFzQkQsRUFBWTNzRSxnQkFBa0IsRUFDNUQsVUFLSjRxQixFQUFRZ2lELG9CQUFzQnJyQixNQTRCcEN3b0IsRUFBdUJwa0YsVUFBVW9tQyxvQkFDL0IsU0FBK0M3dUIsR0FDN0MsSUFBSW91RSxFQUFTLENBQ1hyckUsY0FBZWphLEVBQUtpWCxPQUFPQyxFQUFPLFFBQ2xDOEMsZ0JBQWlCaGEsRUFBS2lYLE9BQU9DLEVBQU8sV0FHbEMyQixFQUFRaFcsS0FBSzJpRixhQUNmRixFQUNBemlGLEtBQUtzaUYsbUJBQ0wsZ0JBQ0Esa0JBQ0FubEYsRUFBS2thLG9DQUNMbGEsRUFBS2lYLE9BQU9DLEVBQU8sT0FBUW1tRSxFQUFrQjBILHVCQUcvQyxHQUFJbHNFLEdBQVMsRUFBRyxDQUNkLElBQUkrckIsRUFBVS9oQyxLQUFLc2lGLG1CQUFtQnRzRSxHQUV0QyxHQUFJK3JCLEVBQVEzcUIsZ0JBQWtCcXJFLEVBQU9yckUsY0FBZSxDQUNsRCxJQUFJNVksRUFBU3JCLEVBQUtpWCxPQUFPMnRCLEVBQVMsU0FBVSxNQUM3QixPQUFYdmpDLElBQ0ZBLEVBQVN3QixLQUFLcWhDLFNBQVN0NUIsR0FBR3ZKLEdBQzFCQSxFQUFTckIsRUFBS3dhLGlCQUFpQjNYLEtBQUs0WCxXQUFZcFosRUFBUXdCLEtBQUtvaEYsZ0JBRS9ELElBQUkzbEYsRUFBTzBCLEVBQUtpWCxPQUFPMnRCLEVBQVMsT0FBUSxNQUl4QyxPQUhhLE9BQVR0bUMsSUFDRkEsRUFBT3VFLEtBQUtzaEMsT0FBT3Y1QixHQUFHdE0sSUFFakIsQ0FDTCtDLE9BQVFBLEVBQ1JvSixLQUFNekssRUFBS2lYLE9BQU8ydEIsRUFBUyxlQUFnQixNQUMzQ2w2QixPQUFRMUssRUFBS2lYLE9BQU8ydEIsRUFBUyxpQkFBa0IsTUFDL0N0bUMsS0FBTUEsSUFLWixNQUFPLENBQ0wrQyxPQUFRLEtBQ1JvSixLQUFNLEtBQ05DLE9BQVEsS0FDUnBNLEtBQU0sT0FRWnlsRixFQUF1QnBrRixVQUFVa25GLHdCQUMvQixXQUNFLFFBQUtoa0YsS0FBS3NrQyxpQkFHSHRrQyxLQUFLc2tDLGVBQWUvbEMsUUFBVXlCLEtBQUtxaEMsU0FBU3prQixTQUNoRDVjLEtBQUtza0MsZUFBZWhXLE1BQUssU0FBVTIxRCxHQUFNLE9BQWEsTUFBTkEsT0FRdkQvQyxFQUF1QnBrRixVQUFVMGxDLGlCQUMvQixTQUE0Q2EsRUFBUzZnRCxHQUNuRCxJQUFLbGtGLEtBQUtza0MsZUFDUixPQUFPLEtBR1QsSUFBSXR1QixFQUFRaFcsS0FBSzBpRixpQkFBaUJyL0MsR0FDbEMsR0FBSXJ0QixHQUFTLEVBQ1gsT0FBT2hXLEtBQUtza0MsZUFBZXR1QixHQUc3QixJQUtJYixFQUxBMHRFLEVBQWlCeC9DLEVBTXJCLEdBTHVCLE1BQW5CcmpDLEtBQUs0WCxhQUNQaXJFLEVBQWlCMWxGLEVBQUsyWSxTQUFTOVYsS0FBSzRYLFdBQVlpckUsSUFJM0IsTUFBbkI3aUYsS0FBSzRYLGFBQ0R6QyxFQUFNaFksRUFBS3VYLFNBQVMxVSxLQUFLNFgsYUFBYyxDQUs3QyxJQUFJdXNFLEVBQWlCdEIsRUFBZWovRSxRQUFRLGFBQWMsSUFDMUQsR0FBa0IsUUFBZHVSLEVBQUlQLFFBQ0Q1VSxLQUFLcWhDLFNBQVNwNkIsSUFBSWs5RSxHQUN2QixPQUFPbmtGLEtBQUtza0MsZUFBZXRrQyxLQUFLcWhDLFNBQVN2OUIsUUFBUXFnRixJQUduRCxLQUFNaHZFLEVBQUlILE1BQW9CLEtBQVpHLEVBQUlILE9BQ2ZoVixLQUFLcWhDLFNBQVNwNkIsSUFBSSxJQUFNNDdFLEdBQzdCLE9BQU83aUYsS0FBS3NrQyxlQUFldGtDLEtBQUtxaEMsU0FBU3Y5QixRQUFRLElBQU0rK0UsSUFRM0QsR0FBSXFCLEVBQ0YsT0FBTyxLQUdQLE1BQU0sSUFBSXprRixNQUFNLElBQU1vakYsRUFBaUIsK0JBMkI3QzNCLEVBQXVCcGtGLFVBQVVzbkYscUJBQy9CLFNBQWdEL3ZFLEdBQzlDLElBQUk3VixFQUFTckIsRUFBS2lYLE9BQU9DLEVBQU8sVUFFaEMsSUFEQTdWLEVBQVN3QixLQUFLMGlGLGlCQUFpQmxrRixJQUNsQixFQUNYLE1BQU8sQ0FDTG9KLEtBQU0sS0FDTkMsT0FBUSxLQUNSKzZFLFdBQVksTUFJaEIsSUFBSUgsRUFBUyxDQUNYamtGLE9BQVFBLEVBQ1J5WSxhQUFjOVosRUFBS2lYLE9BQU9DLEVBQU8sUUFDakM2QyxlQUFnQi9aLEVBQUtpWCxPQUFPQyxFQUFPLFdBR2pDMkIsRUFBUWhXLEtBQUsyaUYsYUFDZkYsRUFDQXppRixLQUFLdWlGLGtCQUNMLGVBQ0EsaUJBQ0FwbEYsRUFBS3laLDJCQUNMelosRUFBS2lYLE9BQU9DLEVBQU8sT0FBUW1tRSxFQUFrQjBILHVCQUcvQyxHQUFJbHNFLEdBQVMsRUFBRyxDQUNkLElBQUkrckIsRUFBVS9oQyxLQUFLdWlGLGtCQUFrQnZzRSxHQUVyQyxHQUFJK3JCLEVBQVF2akMsU0FBV2lrRixFQUFPamtGLE9BQzVCLE1BQU8sQ0FDTG9KLEtBQU16SyxFQUFLaVgsT0FBTzJ0QixFQUFTLGdCQUFpQixNQUM1Q2w2QixPQUFRMUssRUFBS2lYLE9BQU8ydEIsRUFBUyxrQkFBbUIsTUFDaEQ2Z0QsV0FBWXpsRixFQUFLaVgsT0FBTzJ0QixFQUFTLHNCQUF1QixPQUs5RCxNQUFPLENBQ0xuNkIsS0FBTSxLQUNOQyxPQUFRLEtBQ1IrNkUsV0FBWSxPQUlsQjVuRixFQUFRa21GLHVCQUF5QkEsRUFtR2pDRCxFQUF5Qm5rRixVQUFZbEIsT0FBT1ksT0FBT2crRSxFQUFrQjE5RSxXQUNyRW1rRixFQUF5Qm5rRixVQUFVa3JDLFlBQWN3eUMsRUFLakR5RyxFQUF5Qm5rRixVQUFVMmtDLFNBQVcsRUFLOUM3bEMsT0FBT0MsZUFBZW9sRixFQUF5Qm5rRixVQUFXLFVBQVcsQ0FDbkVmLElBQUssV0FFSCxJQURBLElBQUlxbUMsRUFBVSxHQUNMbG5DLEVBQUksRUFBR0EsRUFBSThFLEtBQUt1aEYsVUFBVWhqRixPQUFRckQsSUFDekMsSUFBSyxJQUFJZ1ksRUFBSSxFQUFHQSxFQUFJbFQsS0FBS3VoRixVQUFVcm1GLEdBQUd5bUYsU0FBU3YvQyxRQUFRN2pDLE9BQVEyVSxJQUM3RGt2QixFQUFRLy9CLEtBQUtyQyxLQUFLdWhGLFVBQVVybUYsR0FBR3ltRixTQUFTdi9DLFFBQVFsdkIsSUFHcEQsT0FBT2t2QixLQXVCWDYrQyxFQUF5Qm5rRixVQUFVb21DLG9CQUNqQyxTQUFzRDd1QixHQUNwRCxJQUFJb3VFLEVBQVMsQ0FDWHJyRSxjQUFlamEsRUFBS2lYLE9BQU9DLEVBQU8sUUFDbEM4QyxnQkFBaUJoYSxFQUFLaVgsT0FBT0MsRUFBTyxXQUtsQ2d3RSxFQUFlekQsRUFBYXJwQyxPQUFPa3JDLEVBQVF6aUYsS0FBS3VoRixXQUNsRCxTQUFTa0IsRUFBUW5pRSxHQUNmLElBQUl0SixFQUFNeXJFLEVBQU9yckUsY0FBZ0JrSixFQUFRb2hFLGdCQUFnQnRxRSxjQUN6RCxPQUFJSixHQUlJeXJFLEVBQU90ckUsZ0JBQ1BtSixFQUFRb2hFLGdCQUFnQnZxRSxtQkFFaENtSixFQUFVdGdCLEtBQUt1aEYsVUFBVThDLEdBRTdCLE9BQUsvakUsRUFTRUEsRUFBUXFoRSxTQUFTeitDLG9CQUFvQixDQUMxQ3Q3QixLQUFNNjZFLEVBQU9yckUsZUFDVmtKLEVBQVFvaEUsZ0JBQWdCdHFFLGNBQWdCLEdBQzNDdlAsT0FBUTQ2RSxFQUFPdHJFLGlCQUNabUosRUFBUW9oRSxnQkFBZ0J0cUUsZ0JBQWtCcXJFLEVBQU9yckUsY0FDL0NrSixFQUFRb2hFLGdCQUFnQnZxRSxnQkFBa0IsRUFDMUMsR0FDTG10RSxLQUFNandFLEVBQU1pd0UsT0FmTCxDQUNMOWxGLE9BQVEsS0FDUm9KLEtBQU0sS0FDTkMsT0FBUSxLQUNScE0sS0FBTSxPQW1CZHdsRixFQUF5Qm5rRixVQUFVa25GLHdCQUNqQyxXQUNFLE9BQU9oa0YsS0FBS3VoRixVQUFVZ0QsT0FBTSxTQUFVdG5GLEdBQ3BDLE9BQU9BLEVBQUUwa0YsU0FBU3FDLDhCQVN4Qi9DLEVBQXlCbmtGLFVBQVUwbEMsaUJBQ2pDLFNBQW1EYSxFQUFTNmdELEdBQzFELElBQUssSUFBSWhwRixFQUFJLEVBQUdBLEVBQUk4RSxLQUFLdWhGLFVBQVVoakYsT0FBUXJELElBQUssQ0FDOUMsSUFFSXVNLEVBRlV6SCxLQUFLdWhGLFVBQVVybUYsR0FFUHltRixTQUFTbi9DLGlCQUFpQmEsR0FBUyxHQUN6RCxHQUFJNTdCLEVBQ0YsT0FBT0EsRUFHWCxHQUFJeThFLEVBQ0YsT0FBTyxLQUdQLE1BQU0sSUFBSXprRixNQUFNLElBQU00akMsRUFBVSwrQkFzQnRDNDlDLEVBQXlCbmtGLFVBQVVzbkYscUJBQ2pDLFNBQXVEL3ZFLEdBQ3JELElBQUssSUFBSW5aLEVBQUksRUFBR0EsRUFBSThFLEtBQUt1aEYsVUFBVWhqRixPQUFRckQsSUFBSyxDQUM5QyxJQUFJb2xCLEVBQVV0Z0IsS0FBS3VoRixVQUFVcm1GLEdBSTdCLElBQXlFLElBQXJFb2xCLEVBQVFxaEUsU0FBU2UsaUJBQWlCdmxGLEVBQUtpWCxPQUFPQyxFQUFPLFdBQXpELENBR0EsSUFBSW13RSxFQUFvQmxrRSxFQUFRcWhFLFNBQVN5QyxxQkFBcUIvdkUsR0FDOUQsR0FBSW13RSxFQVNGLE1BUlUsQ0FDUjU4RSxLQUFNNDhFLEVBQWtCNThFLE1BQ3JCMFksRUFBUW9oRSxnQkFBZ0J0cUUsY0FBZ0IsR0FDM0N2UCxPQUFRMjhFLEVBQWtCMzhFLFFBQ3ZCeVksRUFBUW9oRSxnQkFBZ0J0cUUsZ0JBQWtCb3RFLEVBQWtCNThFLEtBQzFEMFksRUFBUW9oRSxnQkFBZ0J2cUUsZ0JBQWtCLEVBQzFDLEtBTVgsTUFBTyxDQUNMdlAsS0FBTSxLQUNOQyxPQUFRLE9BU2RvNUUsRUFBeUJua0YsVUFBVStrRixlQUNqQyxTQUFnRG5yRSxFQUFNeXRCLEdBQ3BEbmtDLEtBQUs0aEYsb0JBQXNCLEdBQzNCNWhGLEtBQUs4aEYsbUJBQXFCLEdBQzFCLElBQUssSUFBSTVtRixFQUFJLEVBQUdBLEVBQUk4RSxLQUFLdWhGLFVBQVVoakYsT0FBUXJELElBR3pDLElBRkEsSUFBSW9sQixFQUFVdGdCLEtBQUt1aEYsVUFBVXJtRixHQUN6QnVwRixFQUFrQm5rRSxFQUFRcWhFLFNBQVNXLG1CQUM5QnB2RSxFQUFJLEVBQUdBLEVBQUl1eEUsRUFBZ0JsbUYsT0FBUTJVLElBQUssQ0FDL0MsSUFBSTZ1QixFQUFVMGlELEVBQWdCdnhFLEdBRTFCMVUsRUFBUzhoQixFQUFRcWhFLFNBQVN0Z0QsU0FBU3Q1QixHQUFHZzZCLEVBQVF2akMsUUFDbERBLEVBQVNyQixFQUFLd2EsaUJBQWlCMkksRUFBUXFoRSxTQUFTL3BFLFdBQVlwWixFQUFRd0IsS0FBS29oRixlQUN6RXBoRixLQUFLcWhDLFNBQVNrQixJQUFJL2pDLEdBQ2xCQSxFQUFTd0IsS0FBS3FoQyxTQUFTdjlCLFFBQVF0RixHQUUvQixJQUFJL0MsRUFBTyxLQUNQc21DLEVBQVF0bUMsT0FDVkEsRUFBTzZrQixFQUFRcWhFLFNBQVNyZ0QsT0FBT3Y1QixHQUFHZzZCLEVBQVF0bUMsTUFDMUN1RSxLQUFLc2hDLE9BQU9pQixJQUFJOW1DLEdBQ2hCQSxFQUFPdUUsS0FBS3NoQyxPQUFPeDlCLFFBQVFySSxJQU83QixJQUFJaXBGLEVBQWtCLENBQ3BCbG1GLE9BQVFBLEVBQ1I0WSxjQUFlMnFCLEVBQVEzcUIsZUFDcEJrSixFQUFRb2hFLGdCQUFnQnRxRSxjQUFnQixHQUMzQ0QsZ0JBQWlCNHFCLEVBQVE1cUIsaUJBQ3RCbUosRUFBUW9oRSxnQkFBZ0J0cUUsZ0JBQWtCMnFCLEVBQVEzcUIsY0FDakRrSixFQUFRb2hFLGdCQUFnQnZxRSxnQkFBa0IsRUFDMUMsR0FDSkYsYUFBYzhxQixFQUFROXFCLGFBQ3RCQyxlQUFnQjZxQixFQUFRN3FCLGVBQ3hCemIsS0FBTUEsR0FHUnVFLEtBQUs0aEYsb0JBQW9Cdi9FLEtBQUtxaUYsR0FDYyxpQkFBakNBLEVBQWdCenRFLGNBQ3pCalgsS0FBSzhoRixtQkFBbUJ6L0UsS0FBS3FpRixHQUtuQzdELEVBQVU3Z0YsS0FBSzRoRixvQkFBcUJ6a0YsRUFBS2thLHFDQUN6Q3dwRSxFQUFVN2dGLEtBQUs4aEYsbUJBQW9CM2tGLEVBQUt5Wiw2QkFHNUM1YixFQUFRaW1GLHlCQUEyQkEsRyxjQ2puQ25Dam1GLEVBQVFrbkYscUJBQXVCLEVBQy9CbG5GLEVBQVFtbkYsa0JBQW9CLEVBZ0Y1Qm5uRixFQUFRdThDLE9BQVMsU0FBZ0Jnc0MsRUFBU29CLEVBQVdDLEVBQVVoQixHQUM3RCxHQUF5QixJQUFyQmUsRUFBVXBtRixPQUNaLE9BQVEsRUFHVixJQUFJeVgsRUF0RU4sU0FBUzZ1RSxFQUFnQkMsRUFBTUMsRUFBT3hCLEVBQVNvQixFQUFXQyxFQUFVaEIsR0FVbEUsSUFBSW9CLEVBQU14akUsS0FBS3NQLE9BQU9pMEQsRUFBUUQsR0FBUSxHQUFLQSxFQUN2Qzl0RSxFQUFNNHRFLEVBQVNyQixFQUFTb0IsRUFBVUssSUFBTSxHQUM1QyxPQUFZLElBQVJodUUsRUFFS2d1RSxFQUVBaHVFLEVBQU0sRUFFVCt0RSxFQUFRQyxFQUFNLEVBRVRILEVBQWdCRyxFQUFLRCxFQUFPeEIsRUFBU29CLEVBQVdDLEVBQVVoQixHQUsvREEsR0FBUzVvRixFQUFRbW5GLGtCQUNaNEMsRUFBUUosRUFBVXBtRixPQUFTd21GLEdBQVMsRUFFcENDLEVBS0xBLEVBQU1GLEVBQU8sRUFFUkQsRUFBZ0JDLEVBQU1FLEVBQUt6QixFQUFTb0IsRUFBV0MsRUFBVWhCLEdBSTlEQSxHQUFTNW9GLEVBQVFtbkYsa0JBQ1o2QyxFQUVBRixFQUFPLEdBQUssRUFBSUEsRUE0QmZELEVBQWlCLEVBQUdGLEVBQVVwbUYsT0FBUWdsRixFQUFTb0IsRUFDL0JDLEVBQVVoQixHQUFTNW9GLEVBQVFrbkYsc0JBQ3ZELEdBQUlsc0UsRUFBUSxFQUNWLE9BQVEsRUFNVixLQUFPQSxFQUFRLEdBQUssR0FDNkMsSUFBM0Q0dUUsRUFBU0QsRUFBVTN1RSxHQUFRMnVFLEVBQVUzdUUsRUFBUSxJQUFJLE1BR25EQSxFQUdKLE9BQU9BLEksY0NsRlQsU0FBU2l2RSxFQUFLQyxFQUFLamdGLEVBQUdVLEdBQ3BCLElBQUkwOUUsRUFBTzZCLEVBQUlqZ0YsR0FDZmlnRixFQUFJamdGLEdBQUtpZ0YsRUFBSXYvRSxHQUNidS9FLEVBQUl2L0UsR0FBSzA5RSxFQTJCWCxTQUFTOEIsRUFBWUQsRUFBS0UsRUFBWXBvRixFQUFHaEIsR0FLdkMsR0FBSWdCLEVBQUloQixFQUFHLENBWVQsSUFDSWQsRUFBSThCLEVBQUksRUFFWmlvRixFQUFLQyxHQXBDaUJ4L0IsRUFpQ1kxb0QsRUFqQ1B1bkQsRUFpQ1V2b0QsRUFoQ2hDd2xCLEtBQUs2akUsTUFBTTMvQixFQUFPbGtDLEtBQUs4akUsVUFBWS9nQyxFQUFPbUIsS0FtQ3pCMXBELEdBU3RCLElBUkEsSUFBSXVwRixFQUFRTCxFQUFJbHBGLEdBUVBrWCxFQUFJbFcsRUFBR2tXLEVBQUlsWCxFQUFHa1gsSUFDakJreUUsRUFBV0YsRUFBSWh5RSxHQUFJcXlFLElBQVUsR0FFL0JOLEVBQUtDLEVBRExocUYsR0FBSyxFQUNRZ1ksR0FJakIreEUsRUFBS0MsRUFBS2hxRixFQUFJLEVBQUdnWSxHQUNqQixJQUFJbk8sRUFBSTdKLEVBQUksRUFJWmlxRixFQUFZRCxFQUFLRSxFQUFZcG9GLEVBQUcrSCxFQUFJLEdBQ3BDb2dGLEVBQVlELEVBQUtFLEVBQVlyZ0YsRUFBSSxFQUFHL0ksR0ExRHhDLElBQTBCMHBELEVBQUtuQixFQXNFL0J2cEQsRUFBUTZsRixVQUFZLFNBQVVxRSxFQUFLRSxHQUNqQ0QsRUFBWUQsRUFBS0UsRUFBWSxFQUFHRixFQUFJM21GLE9BQVMsSyxnQkN6Ry9DLElBQUkwaUMsRUFBcUIsRUFBUSxJQUEwQkEsbUJBQ3ZEOWpDLEVBQU8sRUFBUSxJQUlmcW9GLEVBQWdCLFVBUWhCQyxFQUFlLHFCQWNuQixTQUFTeEYsRUFBV3lGLEVBQU9DLEVBQVN0aUQsRUFBU3VpRCxFQUFTdHhFLEdBQ3BEdFUsS0FBSzRiLFNBQVcsR0FDaEI1YixLQUFLNmxGLGVBQWlCLEdBQ3RCN2xGLEtBQUs0SCxLQUFnQixNQUFUODlFLEVBQWdCLEtBQU9BLEVBQ25DMWxGLEtBQUs2SCxPQUFvQixNQUFYODlFLEVBQWtCLEtBQU9BLEVBQ3ZDM2xGLEtBQUt4QixPQUFvQixNQUFYNmtDLEVBQWtCLEtBQU9BLEVBQ3ZDcmpDLEtBQUt2RSxLQUFnQixNQUFUNlksRUFBZ0IsS0FBT0EsRUFDbkN0VSxLQUFLeWxGLElBQWdCLEVBQ04sTUFBWEcsR0FBaUI1bEYsS0FBS3VpQyxJQUFJcWpELEdBV2hDM0YsRUFBVzZGLHdCQUNULFNBQTRDQyxFQUFnQnBrRCxFQUFvQnFrRCxHQUc5RSxJQUFJajlFLEVBQU8sSUFBSWszRSxFQU1YZ0csRUFBaUJGLEVBQWV6aUYsTUFBTWtpRixHQUN0Q1UsRUFBc0IsRUFDdEJDLEVBQWdCLFdBSWxCLE9BSG1CQyxLQUVMQSxLQUFpQixJQUcvQixTQUFTQSxJQUNQLE9BQU9GLEVBQXNCRCxFQUFlMW5GLE9BQ3hDMG5GLEVBQWVDLFVBQXlCamxGLElBSzVDb2xGLEVBQW9CLEVBQUd0QyxFQUFzQixFQUs3Q3VDLEVBQWMsS0FnRWxCLE9BOURBM2tELEVBQW1CRyxhQUFZLFNBQVVDLEdBQ3ZDLEdBQW9CLE9BQWhCdWtELEVBQXNCLENBR3hCLEtBQUlELEVBQW9CdGtELEVBQVEzcUIsZUFNekIsQ0FJTCxJQUNJb0QsR0FEQStyRSxFQUFXTixFQUFlQyxJQUF3QixJQUNsQ2h3RSxPQUFPLEVBQUc2ckIsRUFBUTVxQixnQkFDUjRzRSxHQU85QixPQU5Ba0MsRUFBZUMsR0FBdUJLLEVBQVNyd0UsT0FBTzZyQixFQUFRNXFCLGdCQUMxQjRzRSxHQUNwQ0EsRUFBc0JoaUQsRUFBUTVxQixnQkFDOUJxdkUsRUFBbUJGLEVBQWE5ckUsUUFFaEM4ckUsRUFBY3ZrRCxHQWhCZHlrRCxFQUFtQkYsRUFBYUgsS0FDaENFLElBQ0F0QyxFQUFzQixFQXFCMUIsS0FBT3NDLEVBQW9CdGtELEVBQVEzcUIsZUFDakNyTyxFQUFLdzVCLElBQUk0akQsS0FDVEUsSUFFRixHQUFJdEMsRUFBc0JoaUQsRUFBUTVxQixnQkFBaUIsQ0FDakQsSUFBSW92RSxFQUFXTixFQUFlQyxJQUF3QixHQUN0RG45RSxFQUFLdzVCLElBQUlna0QsRUFBU3J3RSxPQUFPLEVBQUc2ckIsRUFBUTVxQixrQkFDcEM4dUUsRUFBZUMsR0FBdUJLLEVBQVNyd0UsT0FBTzZyQixFQUFRNXFCLGlCQUM5RDRzRSxFQUFzQmhpRCxFQUFRNXFCLGdCQUVoQ212RSxFQUFjdmtELElBQ2IvaEMsTUFFQ2ttRixFQUFzQkQsRUFBZTFuRixTQUNuQytuRixHQUVGRSxFQUFtQkYsRUFBYUgsS0FHbENwOUUsRUFBS3c1QixJQUFJMGpELEVBQWV4d0UsT0FBT3l3RSxHQUFxQnRsRixLQUFLLE1BSTNEK2dDLEVBQW1CUyxRQUFRci9CLFNBQVEsU0FBVXMvQixHQUMzQyxJQUFJNTZCLEVBQVVrNkIsRUFBbUJhLGlCQUFpQkgsR0FDbkMsTUFBWDU2QixJQUNtQixNQUFqQnUrRSxJQUNGM2pELEVBQWFsbEMsRUFBS3lELEtBQUtvbEYsRUFBZTNqRCxJQUV4Q3Q1QixFQUFLMDVCLGlCQUFpQkosRUFBWTU2QixPQUkvQnNCLEVBRVAsU0FBU3k5RSxFQUFtQnprRCxFQUFTdm5CLEdBQ25DLEdBQWdCLE9BQVp1bkIsUUFBdUM5Z0MsSUFBbkI4Z0MsRUFBUXZqQyxPQUM5QnVLLEVBQUt3NUIsSUFBSS9uQixPQUNKLENBQ0wsSUFBSWhjLEVBQVN3bkYsRUFDVDdvRixFQUFLeUQsS0FBS29sRixFQUFlamtELEVBQVF2akMsUUFDakN1akMsRUFBUXZqQyxPQUNadUssRUFBS3c1QixJQUFJLElBQUkwOUMsRUFBV2wrQyxFQUFROXFCLGFBQ1I4cUIsRUFBUTdxQixlQUNSMVksRUFDQWdjLEVBQ0F1bkIsRUFBUXRtQyxVQVd4Q3drRixFQUFXbmpGLFVBQVV5bEMsSUFBTSxTQUF3QmtrRCxHQUNqRCxHQUFJNW5GLE1BQU1GLFFBQVE4bkYsR0FDaEJBLEVBQU8xakYsU0FBUSxTQUFVa3dCLEdBQ3ZCanpCLEtBQUt1aUMsSUFBSXRQLEtBQ1JqekIsVUFFQSxLQUFJeW1GLEVBQU9oQixJQUFtQyxpQkFBWGdCLEVBTXRDLE1BQU0sSUFBSXZxRSxVQUNSLDhFQUFnRnVxRSxHQU45RUEsR0FDRnptRixLQUFLNGIsU0FBU3ZaLEtBQUtva0YsR0FRdkIsT0FBT3ptRixNQVNUaWdGLEVBQVduakYsVUFBVTRwRixRQUFVLFNBQTRCRCxHQUN6RCxHQUFJNW5GLE1BQU1GLFFBQVE4bkYsR0FDaEIsSUFBSyxJQUFJdnJGLEVBQUl1ckYsRUFBT2xvRixPQUFPLEVBQUdyRCxHQUFLLEVBQUdBLElBQ3BDOEUsS0FBSzBtRixRQUFRRCxFQUFPdnJGLFFBR25CLEtBQUl1ckYsRUFBT2hCLElBQW1DLGlCQUFYZ0IsRUFJdEMsTUFBTSxJQUFJdnFFLFVBQ1IsOEVBQWdGdXFFLEdBSmxGem1GLEtBQUs0YixTQUFTOFgsUUFBUSt5RCxHQU94QixPQUFPem1GLE1BVVRpZ0YsRUFBV25qRixVQUFVNnBGLEtBQU8sU0FBeUJDLEdBRW5ELElBREEsSUFBSTN6RCxFQUNLLzNCLEVBQUksRUFBRzJPLEVBQU03SixLQUFLNGIsU0FBU3JkLE9BQVFyRCxFQUFJMk8sRUFBSzNPLEtBQ25EKzNCLEVBQVFqekIsS0FBSzRiLFNBQVMxZ0IsSUFDWnVxRixHQUNSeHlELEVBQU0wekQsS0FBS0MsR0FHRyxLQUFWM3pELEdBQ0YyekQsRUFBSTN6RCxFQUFPLENBQUV6MEIsT0FBUXdCLEtBQUt4QixPQUNib0osS0FBTTVILEtBQUs0SCxLQUNYQyxPQUFRN0gsS0FBSzZILE9BQ2JwTSxLQUFNdUUsS0FBS3ZFLFFBWWhDd2tGLEVBQVduakYsVUFBVThELEtBQU8sU0FBeUJpbUYsR0FDbkQsSUFBSUMsRUFDQTVyRixFQUNBMk8sRUFBTTdKLEtBQUs0YixTQUFTcmQsT0FDeEIsR0FBSXNMLEVBQU0sRUFBRyxDQUVYLElBREFpOUUsRUFBYyxHQUNUNXJGLEVBQUksRUFBR0EsRUFBSTJPLEVBQUksRUFBRzNPLElBQ3JCNHJGLEVBQVl6a0YsS0FBS3JDLEtBQUs0YixTQUFTMWdCLElBQy9CNHJGLEVBQVl6a0YsS0FBS3drRixHQUVuQkMsRUFBWXprRixLQUFLckMsS0FBSzRiLFNBQVMxZ0IsSUFDL0I4RSxLQUFLNGIsU0FBV2tyRSxFQUVsQixPQUFPOW1GLE1BVVRpZ0YsRUFBV25qRixVQUFVaXFGLGFBQWUsU0FBaUNDLEVBQVVDLEdBQzdFLElBQUlDLEVBQVlsbkYsS0FBSzRiLFNBQVM1YixLQUFLNGIsU0FBU3JkLE9BQVMsR0FVckQsT0FUSTJvRixFQUFVekIsR0FDWnlCLEVBQVVILGFBQWFDLEVBQVVDLEdBRUwsaUJBQWRDLEVBQ2RsbkYsS0FBSzRiLFNBQVM1YixLQUFLNGIsU0FBU3JkLE9BQVMsR0FBSzJvRixFQUFVdGpGLFFBQVFvakYsRUFBVUMsR0FHdEVqbkYsS0FBSzRiLFNBQVN2WixLQUFLLEdBQUd1QixRQUFRb2pGLEVBQVVDLElBRW5Dam5GLE1BVVRpZ0YsRUFBV25qRixVQUFVMmxDLGlCQUNuQixTQUFxQ0UsRUFBYUMsR0FDaEQ1aUMsS0FBSzZsRixlQUFlMW9GLEVBQUtzWixZQUFZa3NCLElBQWdCQyxHQVN6RHE5QyxFQUFXbmpGLFVBQVVxcUYsbUJBQ25CLFNBQXVDUCxHQUNyQyxJQUFLLElBQUkxckYsRUFBSSxFQUFHMk8sRUFBTTdKLEtBQUs0YixTQUFTcmQsT0FBUXJELEVBQUkyTyxFQUFLM08sSUFDL0M4RSxLQUFLNGIsU0FBUzFnQixHQUFHdXFGLElBQ25CemxGLEtBQUs0YixTQUFTMWdCLEdBQUdpc0YsbUJBQW1CUCxHQUl4QyxJQUFJeGtELEVBQVV4bUMsT0FBT29WLEtBQUtoUixLQUFLNmxGLGdCQUMvQixJQUFTM3FGLEVBQUksRUFBRzJPLEVBQU11NEIsRUFBUTdqQyxPQUFRckQsRUFBSTJPLEVBQUszTyxJQUM3QzByRixFQUFJenBGLEVBQUt3WixjQUFjeXJCLEVBQVFsbkMsSUFBSzhFLEtBQUs2bEYsZUFBZXpqRCxFQUFRbG5DLE1BUXRFK2tGLEVBQVduakYsVUFBVTRCLFNBQVcsV0FDOUIsSUFBSWtMLEVBQU0sR0FJVixPQUhBNUosS0FBSzJtRixNQUFLLFNBQVUxekQsR0FDbEJycEIsR0FBT3FwQixLQUVGcnBCLEdBT1RxMkUsRUFBV25qRixVQUFVc3FGLHNCQUF3QixTQUEwQy95RSxHQUNyRixJQUFJNHRCLEVBQVksQ0FDZHpuQixLQUFNLEdBQ041UyxLQUFNLEVBQ05DLE9BQVEsR0FFTitXLEVBQU0sSUFBSXFpQixFQUFtQjVzQixHQUM3Qmd6RSxHQUFzQixFQUN0QkMsRUFBcUIsS0FDckJDLEVBQW1CLEtBQ25CQyxFQUFxQixLQUNyQkMsRUFBbUIsS0FxRXZCLE9BcEVBem5GLEtBQUsybUYsTUFBSyxTQUFVMXpELEVBQU9pUCxHQUN6QkQsRUFBVXpuQixNQUFReVksRUFDTSxPQUFwQmlQLEVBQVMxakMsUUFDWSxPQUFsQjBqQyxFQUFTdDZCLE1BQ1csT0FBcEJzNkIsRUFBU3I2QixRQUNYeS9FLElBQXVCcGxELEVBQVMxakMsUUFDN0Irb0YsSUFBcUJybEQsRUFBU3Q2QixNQUM5QjQvRSxJQUF1QnRsRCxFQUFTcjZCLFFBQ2hDNC9FLElBQXFCdmxELEVBQVN6bUMsTUFDbENtakIsRUFBSXVqQixXQUFXLENBQ2IzakMsT0FBUTBqQyxFQUFTMWpDLE9BQ2pCMGpDLFNBQVUsQ0FDUnQ2QixLQUFNczZCLEVBQVN0NkIsS0FDZkMsT0FBUXE2QixFQUFTcjZCLFFBRW5CbzZCLFVBQVcsQ0FDVHI2QixLQUFNcTZCLEVBQVVyNkIsS0FDaEJDLE9BQVFvNkIsRUFBVXA2QixRQUVwQnBNLEtBQU15bUMsRUFBU3ptQyxPQUduQjZyRixFQUFxQnBsRCxFQUFTMWpDLE9BQzlCK29GLEVBQW1CcmxELEVBQVN0NkIsS0FDNUI0L0UsRUFBcUJ0bEQsRUFBU3I2QixPQUM5QjQvRSxFQUFtQnZsRCxFQUFTem1DLEtBQzVCNHJGLEdBQXNCLEdBQ2JBLElBQ1R6b0UsRUFBSXVqQixXQUFXLENBQ2JGLFVBQVcsQ0FDVHI2QixLQUFNcTZCLEVBQVVyNkIsS0FDaEJDLE9BQVFvNkIsRUFBVXA2QixVQUd0QnkvRSxFQUFxQixLQUNyQkQsR0FBc0IsR0FFeEIsSUFBSyxJQUFJemhELEVBQU0sRUFBR3JuQyxFQUFTMDBCLEVBQU0xMEIsT0FBUXFuQyxFQUFNcm5DLEVBQVFxbkMsSUEzV3hDLEtBNFdUM1MsRUFBTXR3QixXQUFXaWpDLElBQ25CM0QsRUFBVXI2QixPQUNWcTZCLEVBQVVwNkIsT0FBUyxFQUVmKzlCLEVBQU0sSUFBTXJuQyxHQUNkK29GLEVBQXFCLEtBQ3JCRCxHQUFzQixHQUNiQSxHQUNUem9FLEVBQUl1akIsV0FBVyxDQUNiM2pDLE9BQVEwakMsRUFBUzFqQyxPQUNqQjBqQyxTQUFVLENBQ1J0NkIsS0FBTXM2QixFQUFTdDZCLEtBQ2ZDLE9BQVFxNkIsRUFBU3I2QixRQUVuQm82QixVQUFXLENBQ1RyNkIsS0FBTXE2QixFQUFVcjZCLEtBQ2hCQyxPQUFRbzZCLEVBQVVwNkIsUUFFcEJwTSxLQUFNeW1DLEVBQVN6bUMsUUFJbkJ3bUMsRUFBVXA2QixZQUloQjdILEtBQUttbkYsb0JBQW1CLFNBQVU5a0QsRUFBWXFsRCxHQUM1QzlvRSxFQUFJNmpCLGlCQUFpQkosRUFBWXFsRCxNQUc1QixDQUFFbHRFLEtBQU15bkIsRUFBVXpuQixLQUFNb0UsSUFBS0EsSUFHdEM1akIsRUFBUWlsRixXQUFhQSxHLGNDNVpyQixJQUFJdmhGLEVBQVc5QyxPQUFPa0IsVUFBVTRCLFNBRTVCd3pFLEVBQ3NCLG1CQUFqQnJ5RSxPQUFPNGMsT0FDZ0IsbUJBQXZCNWMsT0FBTzZjLGFBQ1MsbUJBQWhCN2MsT0FBTzJjLEtBK0RoQnZoQixFQUFPRCxRQWxCUCxTQUFxQm1CLEVBQU9vZ0IsRUFBa0JoZSxHQUM1QyxHQUFxQixpQkFBVnBDLEVBQ1QsTUFBTSxJQUFJK2YsVUFBVSx5Q0FHdEIsT0EvQ3NCeU8sRUErQ0p4dUIsRUE5QzJCLGdCQUF0Q3VDLEVBQVNyRCxLQUFLc3ZCLEdBQU8vWCxNQUFNLEdBQUksR0FHeEMsU0FBMEI5RSxFQUFLcWtFLEVBQVk1ekUsR0FDekM0ekUsS0FBZ0IsRUFFaEIsSUFBSXZzQixFQUFZOTNDLEVBQUlza0UsV0FBYUQsRUFFakMsR0FBSXZzQixFQUFZLEVBQ2QsTUFBTSxJQUFJeXNCLFdBQVcsNkJBR3ZCLFFBQWVweEUsSUFBWDFDLEVBQ0ZBLEVBQVNxbkQsT0FJVCxJQUZBcm5ELEtBQVksR0FFQ3FuRCxFQUNYLE1BQU0sSUFBSXlzQixXQUFXLDZCQUl6QixPQUFPSCxFQUNIcnlFLE9BQU8yYyxLQUFLMU8sRUFBSThFLE1BQU11L0QsRUFBWUEsRUFBYTV6RSxJQUMvQyxJQUFJc0IsT0FBTyxJQUFJdzZCLFdBQVd2c0IsRUFBSThFLE1BQU11L0QsRUFBWUEsRUFBYTV6RSxLQXVCeEQrekUsQ0FBZ0JuMkUsRUFBT29nQixFQUFrQmhlLEdBRzdCLGlCQUFWcEMsRUF2QmIsU0FBcUI0UixFQUFRK08sR0FLM0IsR0FKd0IsaUJBQWJBLEdBQXNDLEtBQWJBLElBQ2xDQSxFQUFXLFNBR1JqZCxPQUFPNjJCLFdBQVc1WixHQUNyQixNQUFNLElBQUlaLFVBQVUsOENBR3RCLE9BQU9nMkQsRUFDSHJ5RSxPQUFPMmMsS0FBS3pPLEVBQVErTyxHQUNwQixJQUFJamQsT0FBT2tPLEVBQVErTyxHQWFkeTFELENBQVdwMkUsRUFBT29nQixHQUdwQjIxRCxFQUNIcnlFLE9BQU8yYyxLQUFLcmdCLEdBQ1osSUFBSTBELE9BQU8xRCxHQXpEakIsSUFBd0J3dUIsSSwwSENKcEJaLEUsY0NPSixTQUFTaEosRUFBWTRtRSxFQUFXQyxFQUFVMW5GLEVBQU1RLEVBQVM4YyxHQUN2REEsRUFBT3VELFlBQVksQ0FDYjRtRSxFQUNBQyxHQUNDLENBQ0QxbkYsS0FBTUEsRUFDTlEsUUFBU0EsRUFDVEYsVUFBVSxJQ2JsQixTQUFTcW5GLEVBQWV0UixHQUN0QixJREZZejZELEVBQVNxRCxFQ0VqQjNCLEdERlExQixFQ0VlLEVBQWFBLFFERm5CcUQsRUNFNEIsRUFBYTFqQixLRER2RCxJQUFJLGlCQUF3QixDQUN2QnFnQixRQUFTQSxFQUNUcUQsS0FBTUEsS0NLbEIsT0FMQSxFQUFxQixLQUFNLGNBQWUsV0FBWSxTQUFVM0IsR0FDaEUsRUFBcUIsS0FBTSxzQkFBdUIsbUJBQW9CLE9BQVFBLEdBQzlFLEVBQXFCLEtBQU0sZUFBZ0IsWUFBYSxPQUFRQSxHQUNoRSxFQUFxQixLQUFNLGlCQUFrQixjQUFlLE9BQVFBLEdBQ3BFLEVBQXFCLEtBQU0sc0JBQXVCLG1CQUFvQixPQUFRQSxHQUN2RUEsRUFBT3EyQixZQ1RoQixTQUFTLEVBQUtpMEMsRUFBTUMsRUFBT3ozQyxFQUFLMDNDLEVBQVNDLEVBQVcxUixHQUdsRCxPQUFPLElBQUl2bkMsS0FBSzg0QyxFQUFNQyxFQUFRLEVBQUksRUFBR3ozQyxPQUZkcnZDLElBQVorbUYsRUFBd0JBLEVBQVUsT0FDbEIvbUYsSUFBZGduRixFQUEwQkEsRUFBWSxHQUlyRCxTQUFTdDRDLEVBQVNoQixHQUNoQixPQUFPQSxFQUFLZ0IsV0FBYSxFQUFJLEUsV0NQL0IsU0FBU3U0QyxFQUFHdG1GLEVBQUt3RixHQUVmLE9BREFBLEVBQU14RixJQUFNQSxFQUNMd0YsRUNGVCxJQUtJK2dGLEVBQXVCLENBQ3pCLGFBQ0MsR0FHQ0MsRUFBcUIsQ0FDdkIsV0FDQyxHQUdDQyxFQUE4QixDQUNoQyxvQkFDQyxHQUdDQyxFQUF5QixDQUMzQixlQUNDLEdBR0NDLEVBQThCLENBQ2hDLG9CQUNDLEdBR0NDLEVBQXVCLENBQ3pCLGFBQ0MsR0FrQkNDLEVBQTRCLENBQzlCLGtCQUNDLElDbkRILFNBQVNDLEVBQWV6akYsRUFBR3dWLEVBQVE1USxHQUlqQyxJQUhBLElBQUl3RSxFQUFTLElBQUl4UCxNQUFNZ0wsR0FDbkJxSixFQUFJLEVBQ0poWSxFQUFJdWYsRUFDRnZILEVBQUlySixHQUNSd0UsRUFBTzZFLEdBQUtqTyxFQUFFL0osR0FDZGdZLEVBQUlBLEVBQUksRUFBSSxFQUNaaFksRUFBSUEsRUFBSSxFQUFJLEVBRWQsT0FBT21ULEVBNkNULFNBQVNzNkUsRUFBZTloRSxFQUFJN1EsRUFBTzR5RSxHQUNqQyxHQUFJNXlFLEVBQVEsR0FBS0EsR0FBUzZRLEVBQUd0b0IsT0FDM0IsS0FBTSxDQUNBLEVBQ0EsdUJBR1Jzb0IsRUFBRzdRLEdBQVM0eUUsRUFJZCxTQUFTQyxFQUFlaGlFLEVBQUk3USxHQUMxQixHQUFJQSxFQUFRLEdBQUtBLEdBQVM2USxFQUFHdG9CLE9BQzNCLEtBQU0sQ0FDQSxFQUNBLHVCQUdSLE9BQU9zb0IsRUFBRzdRLEdBR1osU0FBUzh5RSxFQUFlai9FLEVBQUtrL0UsR0FFM0IsSUFEQSxJQUFJdGxGLEVBQUksSUFBSTVFLE1BQU1nTCxHQUNWM08sRUFBSSxFQUFHQSxFQUFJMk8sSUFBTzNPLEVBQ3hCdUksRUFBRXZJLEdBQUs2dEYsRUFFVCxPQUFPdGxGLEVDaEZULFNBQVN1bEYsRUFBSUMsRUFBSUMsR0FDZixPQUFZLENBQ1YsSUFBSTE2RSxFQUFPMDZFLEVBQ1BqakYsRUFBSWdqRixFQUNKRSxFQUFhbGpGLEVBQUUxSCxPQUNmNnFGLEVBQXVCLElBQWZELEVBQW1CLEVBQUlBLEVBRS9CM3RGLEVBQUk0dEYsRUFERTU2RSxFQUFLalEsT0FDTyxFQUN0QixHQUFVLElBQU4vQyxFQUNGLE9BQU95SyxFQUFFaVMsTUFBTSxLQUFNMUosR0FFdkIsR0FBSWhULEdBQUssRUFDUCxPQUFRLFNBQVN5SyxFQUFFdUksR0FDbkIsT0FBTyxTQUFVdkosR0FDZixPQUFPK2pGLEVBQUkvaUYsRUFBR3VJLEVBQUsyTyxPQUFPLENBQUNsWSxNQUZ0QixDQUlMZ0IsRUFBRXVJLEdBRU4wNkUsRUFBUSxFQUEwQjE2RSxFQUFNNDZFLEVBQVksR0FBSjV0RixHQUNoRHl0RixFQUFLaGpGLEVBQUVpUyxNQUFNLEtBQU0sRUFBMEIxSixFQUFNLEVBQUc0NkUsS0FLMUQsU0FBU0MsRUFBRzF0RixFQUFHMnRGLEdBQ2IsSUFBSUYsRUFBUXp0RixFQUFFNEMsT0FDZCxHQUFjLElBQVY2cUYsRUFDRixPQUFPenRGLEVBQUUydEYsR0FFVCxPQUFRRixHQUNOLEtBQUssRUFDRCxPQUFPenRGLEVBQUUydEYsR0FDYixLQUFLLEVBQ0QsT0FBTyxTQUFXL1MsR0FDZCxPQUFPNTZFLEVBQUUydEYsRUFBSS9TLElBRXJCLEtBQUssRUFDRCxPQUFPLFNBQVdBLEVBQU9nVCxHQUNyQixPQUFPNXRGLEVBQUUydEYsRUFBSS9TLEVBQU9nVCxJQUU1QixLQUFLLEVBQ0QsT0FBTyxTQUFXaFQsRUFBT2dULEVBQVNDLEdBQzlCLE9BQU83dEYsRUFBRTJ0RixFQUFJL1MsRUFBT2dULEVBQVNDLElBRXJDLEtBQUssRUFDRCxPQUFPLFNBQVdqVCxFQUFPZ1QsRUFBU0MsRUFBU0MsR0FDdkMsT0FBTzl0RixFQUFFMnRGLEVBQUkvUyxFQUFPZ1QsRUFBU0MsRUFBU0MsSUFFOUMsS0FBSyxFQUNELE9BQU8sU0FBV2xULEVBQU9nVCxFQUFTQyxFQUFTQyxFQUFTQyxHQUNoRCxPQUFPL3RGLEVBQUUydEYsRUFBSS9TLEVBQU9nVCxFQUFTQyxFQUFTQyxFQUFTQyxJQUV2RCxLQUFLLEVBQ0QsT0FBTyxTQUFXblQsRUFBT2dULEVBQVNDLEVBQVNDLEVBQVNDLEVBQVNDLEdBQ3pELE9BQU9odUYsRUFBRTJ0RixFQUFJL1MsRUFBT2dULEVBQVNDLEVBQVNDLEVBQVNDLEVBQVNDLElBRWhFLFFBQ0UsT0FBT1gsRUFBSXJ0RixFQUFHLENBQUMydEYsS0FLdkIsU0FBU00sRUFBSWp1RixHQUVYLE9BQWMsSUFERkEsRUFBRTRDLE9BRUw1QyxFQUVBLFNBQVcydEYsR0FDZCxPQUFPRCxFQUFHMXRGLEVBQUcydEYsSUFLckIsU0FBU08sRUFBR2x1RixFQUFHMnRGLEVBQUlRLEdBQ2pCLElBQUlWLEVBQVF6dEYsRUFBRTRDLE9BQ2QsR0FBYyxJQUFWNnFGLEVBQ0YsT0FBT3p0RixFQUFFMnRGLEVBQUlRLEdBRWIsT0FBUVYsR0FDTixLQUFLLEVBQ0QsT0FBT0osRUFBSXJ0RixFQUFFMnRGLEdBQUssQ0FBQ1EsSUFDdkIsS0FBSyxFQUNELE9BQU9udUYsRUFBRTJ0RixFQUFJUSxHQUNqQixLQUFLLEVBQ0QsT0FBTyxTQUFXdlQsR0FDZCxPQUFPNTZFLEVBQUUydEYsRUFBSVEsRUFBSXZULElBRXpCLEtBQUssRUFDRCxPQUFPLFNBQVdBLEVBQU9nVCxHQUNyQixPQUFPNXRGLEVBQUUydEYsRUFBSVEsRUFBSXZULEVBQU9nVCxJQUVoQyxLQUFLLEVBQ0QsT0FBTyxTQUFXaFQsRUFBT2dULEVBQVNDLEdBQzlCLE9BQU83dEYsRUFBRTJ0RixFQUFJUSxFQUFJdlQsRUFBT2dULEVBQVNDLElBRXpDLEtBQUssRUFDRCxPQUFPLFNBQVdqVCxFQUFPZ1QsRUFBU0MsRUFBU0MsR0FDdkMsT0FBTzl0RixFQUFFMnRGLEVBQUlRLEVBQUl2VCxFQUFPZ1QsRUFBU0MsRUFBU0MsSUFFbEQsS0FBSyxFQUNELE9BQU8sU0FBV2xULEVBQU9nVCxFQUFTQyxFQUFTQyxFQUFTQyxHQUNoRCxPQUFPL3RGLEVBQUUydEYsRUFBSVEsRUFBSXZULEVBQU9nVCxFQUFTQyxFQUFTQyxFQUFTQyxJQUUzRCxRQUNFLE9BQU9WLEVBQUlydEYsRUFBRyxDQUNGMnRGLEVBQ0FRLEtBTXBCLFNBQVNDLEVBQUlwdUYsR0FFWCxPQUFjLElBREZBLEVBQUU0QyxPQUVMNUMsRUFFQSxTQUFXMnRGLEVBQUlRLEdBQ2xCLE9BQU9ELEVBQUdsdUYsRUFBRzJ0RixFQUFJUSxJQUt6QixTQUFTRSxFQUFHcnVGLEVBQUcydEYsRUFBSVEsRUFBSUcsR0FDckIsSUFBSWIsRUFBUXp0RixFQUFFNEMsT0FDZCxHQUFjLElBQVY2cUYsRUFDRixPQUFPenRGLEVBQUUydEYsRUFBSVEsRUFBSUcsR0FFakIsT0FBUWIsR0FDTixLQUFLLEVBQ0QsT0FBT0osRUFBSXJ0RixFQUFFMnRGLEdBQUssQ0FDTlEsRUFDQUcsSUFFaEIsS0FBSyxFQUNELE9BQU9qQixFQUFJcnRGLEVBQUUydEYsRUFBSVEsR0FBSyxDQUFDRyxJQUMzQixLQUFLLEVBQ0QsT0FBT3R1RixFQUFFMnRGLEVBQUlRLEVBQUlHLEdBQ3JCLEtBQUssRUFDRCxPQUFPLFNBQVcxVCxHQUNkLE9BQU81NkUsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJMVQsSUFFN0IsS0FBSyxFQUNELE9BQU8sU0FBV0EsRUFBT2dULEdBQ3JCLE9BQU81dEYsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJMVQsRUFBT2dULElBRXBDLEtBQUssRUFDRCxPQUFPLFNBQVdoVCxFQUFPZ1QsRUFBU0MsR0FDOUIsT0FBTzd0RixFQUFFMnRGLEVBQUlRLEVBQUlHLEVBQUkxVCxFQUFPZ1QsRUFBU0MsSUFFN0MsS0FBSyxFQUNELE9BQU8sU0FBV2pULEVBQU9nVCxFQUFTQyxFQUFTQyxHQUN2QyxPQUFPOXRGLEVBQUUydEYsRUFBSVEsRUFBSUcsRUFBSTFULEVBQU9nVCxFQUFTQyxFQUFTQyxJQUV0RCxRQUNFLE9BQU9ULEVBQUlydEYsRUFBRyxDQUNGMnRGLEVBQ0FRLEVBQ0FHLEtBTXBCLFNBQVNDLEVBQUl2dUYsR0FFWCxPQUFjLElBREZBLEVBQUU0QyxPQUVMNUMsRUFFQSxTQUFXMnRGLEVBQUlRLEVBQUlHLEdBQ3RCLE9BQU9ELEVBQUdydUYsRUFBRzJ0RixFQUFJUSxFQUFJRyxJQUs3QixTQUFTRSxFQUFHeHVGLEVBQUcydEYsRUFBSVEsRUFBSUcsRUFBSUcsR0FDekIsSUFBSWhCLEVBQVF6dEYsRUFBRTRDLE9BQ2QsR0FBYyxJQUFWNnFGLEVBQ0YsT0FBT3p0RixFQUFFMnRGLEVBQUlRLEVBQUlHLEVBQUlHLEdBRXJCLE9BQVFoQixHQUNOLEtBQUssRUFDRCxPQUFPSixFQUFJcnRGLEVBQUUydEYsR0FBSyxDQUNOUSxFQUNBRyxFQUNBRyxJQUVoQixLQUFLLEVBQ0QsT0FBT3BCLEVBQUlydEYsRUFBRTJ0RixFQUFJUSxHQUFLLENBQ1ZHLEVBQ0FHLElBRWhCLEtBQUssRUFDRCxPQUFPcEIsRUFBSXJ0RixFQUFFMnRGLEVBQUlRLEVBQUlHLEdBQUssQ0FBQ0csSUFDL0IsS0FBSyxFQUNELE9BQU96dUYsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJRyxHQUN6QixLQUFLLEVBQ0QsT0FBTyxTQUFXN1QsR0FDZCxPQUFPNTZFLEVBQUUydEYsRUFBSVEsRUFBSUcsRUFBSUcsRUFBSTdULElBRWpDLEtBQUssRUFDRCxPQUFPLFNBQVdBLEVBQU9nVCxHQUNyQixPQUFPNXRGLEVBQUUydEYsRUFBSVEsRUFBSUcsRUFBSUcsRUFBSTdULEVBQU9nVCxJQUV4QyxLQUFLLEVBQ0QsT0FBTyxTQUFXaFQsRUFBT2dULEVBQVNDLEdBQzlCLE9BQU83dEYsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJRyxFQUFJN1QsRUFBT2dULEVBQVNDLElBRWpELFFBQ0UsT0FBT1IsRUFBSXJ0RixFQUFHLENBQ0YydEYsRUFDQVEsRUFDQUcsRUFDQUcsS0FpQnBCLFNBQVNDLEVBQUcxdUYsRUFBRzJ0RixFQUFJUSxFQUFJRyxFQUFJRyxFQUFJRSxHQUM3QixJQUFJbEIsRUFBUXp0RixFQUFFNEMsT0FDZCxHQUFjLElBQVY2cUYsRUFDRixPQUFPenRGLEVBQUUydEYsRUFBSVEsRUFBSUcsRUFBSUcsRUFBSUUsR0FFekIsT0FBUWxCLEdBQ04sS0FBSyxFQUNELE9BQU9KLEVBQUlydEYsRUFBRTJ0RixHQUFLLENBQ05RLEVBQ0FHLEVBQ0FHLEVBQ0FFLElBRWhCLEtBQUssRUFDRCxPQUFPdEIsRUFBSXJ0RixFQUFFMnRGLEVBQUlRLEdBQUssQ0FDVkcsRUFDQUcsRUFDQUUsSUFFaEIsS0FBSyxFQUNELE9BQU90QixFQUFJcnRGLEVBQUUydEYsRUFBSVEsRUFBSUcsR0FBSyxDQUNkRyxFQUNBRSxJQUVoQixLQUFLLEVBQ0QsT0FBT3RCLEVBQUlydEYsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJRyxHQUFLLENBQUNFLElBQ25DLEtBQUssRUFDRCxPQUFPM3VGLEVBQUUydEYsRUFBSVEsRUFBSUcsRUFBSUcsRUFBSUUsR0FDN0IsS0FBSyxFQUNELE9BQU8sU0FBVy9ULEdBQ2QsT0FBTzU2RSxFQUFFMnRGLEVBQUlRLEVBQUlHLEVBQUlHLEVBQUlFLEVBQUkvVCxJQUVyQyxLQUFLLEVBQ0QsT0FBTyxTQUFXQSxFQUFPZ1QsR0FDckIsT0FBTzV0RixFQUFFMnRGLEVBQUlRLEVBQUlHLEVBQUlHLEVBQUlFLEVBQUkvVCxFQUFPZ1QsSUFFNUMsUUFDRSxPQUFPUCxFQUFJcnRGLEVBQUcsQ0FDRjJ0RixFQUNBUSxFQUNBRyxFQUNBRyxFQUNBRSxLQWlCcEIsU0FBU0MsRUFBRzV1RixFQUFHMnRGLEVBQUlRLEVBQUlHLEVBQUlHLEVBQUlFLEVBQUlFLEdBQ2pDLElBQUlwQixFQUFRenRGLEVBQUU0QyxPQUNkLEdBQWMsSUFBVjZxRixFQUNGLE9BQU96dEYsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJRyxFQUFJRSxFQUFJRSxHQUU3QixPQUFRcEIsR0FDTixLQUFLLEVBQ0QsT0FBT0osRUFBSXJ0RixFQUFFMnRGLEdBQUssQ0FDTlEsRUFDQUcsRUFDQUcsRUFDQUUsRUFDQUUsSUFFaEIsS0FBSyxFQUNELE9BQU94QixFQUFJcnRGLEVBQUUydEYsRUFBSVEsR0FBSyxDQUNWRyxFQUNBRyxFQUNBRSxFQUNBRSxJQUVoQixLQUFLLEVBQ0QsT0FBT3hCLEVBQUlydEYsRUFBRTJ0RixFQUFJUSxFQUFJRyxHQUFLLENBQ2RHLEVBQ0FFLEVBQ0FFLElBRWhCLEtBQUssRUFDRCxPQUFPeEIsRUFBSXJ0RixFQUFFMnRGLEVBQUlRLEVBQUlHLEVBQUlHLEdBQUssQ0FDbEJFLEVBQ0FFLElBRWhCLEtBQUssRUFDRCxPQUFPeEIsRUFBSXJ0RixFQUFFMnRGLEVBQUlRLEVBQUlHLEVBQUlHLEVBQUlFLEdBQUssQ0FBQ0UsSUFDdkMsS0FBSyxFQUNELE9BQU83dUYsRUFBRTJ0RixFQUFJUSxFQUFJRyxFQUFJRyxFQUFJRSxFQUFJRSxHQUNqQyxLQUFLLEVBQ0QsT0FBTyxTQUFXalUsR0FDZCxPQUFPNTZFLEVBQUUydEYsRUFBSVEsRUFBSUcsRUFBSUcsRUFBSUUsRUFBSUUsRUFBSWpVLElBRXpDLFFBQ0UsT0FBT3lTLEVBQUlydEYsRUFBRyxDQUNGMnRGLEVBQ0FRLEVBQ0FHLEVBQ0FHLEVBQ0FFLEVBQ0FFLEtGblJwQnJDLEVBQVV2bUYsSUFBTSxJQUVoQndtRixFQUFReG1GLElBQU0sSUFFZHltRixFQUFpQnptRixJQUFNLElBRXZCMG1GLEVBQVkxbUYsSUFBTSxJQUVsQjJtRixFQUFpQjNtRixJQUFNLElBRXZCNG1GLEVBQVU1bUYsSUFBTSxJQVFoQjZtRixFQUFlN21GLElBQU0sSUdoRnJCLElBQUk2b0YsRUFBa0IsR0FFdEIsU0FBU244RCxFQUFLcnBCLEdBQ1osUUFBVWhFLElBQU5nRSxFQUFpQixDQUNuQixJQUFJbUMsRUFBbUIsQ0FDckJxakYsRUFDQSxHQUdGLE9BREFyakYsRUFBTXhGLElBQU0sSUFDTHdGLEVBRVQsR0FBWSxPQUFObkMsR0FBY0EsRUFBRSxLQUFPd2xGLEVBQzNCLE9BQU94bEYsRUFFVCxJQUFJeWxGLEVBQU16bEYsRUFBRSxHQUFLLEVBQUksRUFDakIwbEYsRUFBcUIsQ0FDdkJGLEVBQ0FDLEdBR0YsT0FEQUMsRUFBUS9vRixJQUFNLElBQ1Arb0YsRUFtQlQsU0FBU0MsRUFBWTNsRixHQUNuQixPQUFVLE9BQU5BLE9BQ0YsRUFFT3FwQixFQUFLcnBCLEdBSWhCLFNBQVM0bEYsRUFBYzVsRixHQUNyQixHQUFZLE9BQU5BLEdBQWNBLEVBQUUsS0FBT3dsRixFQUMzQixPQUFPeGxGLEVBRVQsSUFBSTZDLEVBQVE3QyxFQUFFLEdBQ2QsT0FBYyxJQUFWNkMsT0FDRixFQUVrQixDQUNWMmlGLEVBQ0EzaUYsRUFBUSxFQUFJLEdDeER4QixTQUFTL0wsRUFBSSt1RixFQUFNcGxGLEdBQ2pCLEdBQUtBLEtBQUtvbEYsRUFDUixPQUFPLEVBQWlCQSxFQUFLcGxGLEksWUNBakMsU0FBUyxFQUFTdkosR0FDaEIsT0NzQkYsU0FBYzhJLEVBQUd0QixHQUNmLE9BQVFBLEdBQ04sS0FBb0IsRUFDaEIsWUFBb0IsSUFBTnNCLEVBQ2xCLEtBQWUsRUFDWCxPQUFhLE9BQU5BLEVBQ1gsS0FBa0IsRUFDZCxNQUFvQixrQkFBTkEsRUFDbEIsS0FBaUIsRUFDYixNQUFvQixpQkFBTkEsRUFDbEIsS0FBaUIsRUFDYixNQUFvQixpQkFBTkEsRUFDbEIsS0FBbUIsRUFDZixNQUFvQixtQkFBTkEsRUFDbEIsS0FBaUIsRUFDYixNQUFvQixpQkFBTkEsRUFDbEIsS0FBaUIsRUFDYixNQUFvQixpQkFBTkEsR0R2Q2hCLENBQWM5SSxFQUFtQixHQUNoQixFQUFTLEVBQUcsQ0FBQ0EsSUFFWixFQUFTLEVBQUcsQ0FBQ0EsSUFRckMsU0FBU3FxQyxFQUFZa1EsR0FDbkIsSUFBSXEwQyxFQUFnQixFQUFTLGNBQXNCcjBDLElBQ25ELE9BQUlxMEMsRUFBY25wRixTQUNoQixFQUVPbXBGLEVBQWMsR0VwQnpCLElBQUksRUFBSyxDQUNQL3hCLFNBQVUsR0FjWixTQUFTeDhELEVBQU9vTixHQUNkLElBQ0lqRyxFQUFlLENBQ2pCaUcsR0FQRixFQUFHb3ZELFNBQVcsRUFBR0EsU0FBVyxFQUNyQixFQUFHQSxXQVVWLE9BREFyMUQsRUFBRS9CLElBQU0sSUFDRCtCLEVDcEJLLEVBQXVCLDRCQytCckMsSUFBSTRzQyxFQTVCSixTQUFrQnRxQyxHQUNoQixPQUFJQSxFQ0ZJLHNCRElHQSxHQ0ZILHVCREtDdWIsS0FBSyt1QixLQUFLdHFDLElFWHJCLFNBQVMra0YsRUFBaUIvbEYsRUFBR1UsR0FDM0IsT0FBSVYsRUFBSVUsR0FDRSxFQUNDVixJQUFNVSxFQUNSLEVBRUEsRUFnQ1gsU0FBU3NsRixFQUFvQkMsRUFBSUMsR0FDL0IsT0FBSUQsSUFBT0MsRUFDRixFQUNFRCxFQUFLQyxHQUNOLEVBRUQsRUFrRVgsU0FBU0MsRUFBYW5tRixFQUFHVSxHQUN2QixPQUFJVixFQUFJVSxFQUNDVixFQUVBVSxFQTRDWCxTQUFTMGxGLEVBQWFwbUYsRUFBR1UsR0FDdkIsT0FBSVYsRUFBSVUsRUFDQ1YsRUFFQVUsRUM5SlgsU0FBUyxFQUFJc04sRUFBSy9YLEdBQ2hCLEdBQUlBLEdBQUssR0FBS0EsRUFBSStYLEVBQUkxVSxPQUNwQixPQUFPLEVBQWlCMFUsRUFBSS9YLElBS2hDLFNBQVNvd0YsRUFBT3I0RSxFQUFLL1gsR0FDbkIsS0FBTUEsR0FBSyxHQUFLQSxFQUFJK1gsRUFBSTFVLFFBQ3RCLE1BQU0sSUFBSWtCLE1BQU0sa0RBRWxCLE9BQU93VCxFQUFJL1gsR0EwSGIsU0FBUyxFQUFJMnJCLEVBQUkwa0UsR0FLZixJQUpBLElBQUlDLEVBQU8za0UsRUFBR3RvQixPQUNWa3RGLEVBQU9GLEVBQUdodEYsT0FDVnNMLEVBQU0yaEYsRUFBT0MsRUFBT0QsRUFBT0MsRUFDM0J4dUYsRUFBSSxJQUFJNEIsTUFBTWdMLEdBQ1YzTyxFQUFJLEVBQUdBLEVBQUkyTyxJQUFPM08sRUFDeEIrQixFQUFFL0IsR0FBZ0IsQ0FDaEIyckIsRUFBRzNyQixHQUNIcXdGLEVBQUdyd0YsSUFHUCxPQUFPK0IsRUFjVCxTQUFTeXVGLEVBQU03a0UsRUFBSTBrRSxFQUFJdGxGLEdBQ3JCLE9BWkYsU0FBZ0I0Z0IsRUFBSTBrRSxFQUFJdGxGLEdBS3RCLElBSkEsSUFBSXVsRixFQUFPM2tFLEVBQUd0b0IsT0FDVmt0RixFQUFPRixFQUFHaHRGLE9BQ1ZzTCxFQUFNMmhGLEVBQU9DLEVBQU9ELEVBQU9DLEVBQzNCeHVGLEVBQUksSUFBSTRCLE1BQU1nTCxHQUNWM08sRUFBSSxFQUFHQSxFQUFJMk8sSUFBTzNPLEVBQ3hCK0IsRUFBRS9CLEdBQUsrSyxFQUFFNGdCLEVBQUczckIsR0FBSXF3RixFQUFHcndGLElBRXJCLE9BQU8rQixFQUlBMHVGLENBQU85a0UsRUFBSTBrRSxFQUFJLEVBQVV0bEYsSUFHbEMsU0FBUyxFQUFPNmpGLEVBQUlHLEdBSWxCLElBSEEsSUFBSTJCLEVBQUs5QixFQUFHdnJGLE9BQ1JzdEYsRUFBSzVCLEVBQUcxckYsT0FDUnV0RixFQUFPLElBQUlqdEYsTUFBTStzRixFQUFLQyxFQUFLLEdBQ3ZCM3dGLEVBQUksRUFBR0EsRUFBSTB3RixJQUFNMXdGLEVBQ3ZCNHdGLEVBQUs1d0YsR0FBSzR1RixFQUFHNXVGLEdBRWYsSUFBSSxJQUFJNndGLEVBQU0sRUFBR0EsRUFBTUYsSUFBTUUsRUFDM0JELEVBQUtGLEVBQUtHLEVBQU0sR0FBSzlCLEVBQUc4QixHQUUxQixPQUFPRCxFQXVDVCxTQUFTRSxFQUFXeG9GLEVBQUdpWCxHQUtyQixJQUpBLElBQUl3eEUsRUFBT3pvRixFQUFFakYsT0FDVDJ0RixFQUFNenhFLEVBQVMsRUFBSSxFQUE0Qnd4RSxFQUFPeHhFLEVBQVMsRUFBRyxHQUFLQSxFQUN2RTVRLEVBQU1vaUYsRUFBT0MsRUFBTSxFQUNuQjc5RSxFQUFTLElBQUl4UCxNQUFNZ0wsR0FDZjNPLEVBQUksRUFBR0EsRUFBSTJPLElBQU8zTyxFQUN4Qm1ULEVBQU9uVCxHQUFLc0ksRUFBRTBvRixFQUFNaHhGLEVBQUksR0FFMUIsT0FBT21ULEVBb0JULFNBQVM4OUUsRUFBV3JDLEVBQUlzQyxFQUFTbkMsRUFBSW9DLEVBQVNDLEdBQzVDLEdBQUlELEdBQVdELEVBQ2IsSUFBSSxJQUFJbDVFLEVBQUksRUFBR0EsRUFBSW81RSxJQUFjcDVFLEVBQy9CKzJFLEVBQUcvMkUsRUFBSW01RSxFQUFVLEdBQUt2QyxFQUFHNTJFLEVBQUlrNUUsRUFBVSxRQUkzQyxJQUFJLElBQUlHLEVBQU1ELEVBQWEsRUFBSSxFQUFHQyxHQUFPLElBQUtBLEVBQzVDdEMsRUFBR3NDLEVBQU1GLEVBQVUsR0FBS3ZDLEVBQUd5QyxFQUFNSCxFQUFVLEdDeE8vQyxTQUFTSSxHQUFzQjNsRSxFQUFJNGxFLEdBQ2pDLElBQUk1aUYsRUFBTWdkLEVBQUd0b0IsT0FDYixHQUFZLElBQVJzTCxHQUFxQixJQUFSQSxFQUNmLE9BQU9BLEVBRVQsSUFBSTZpRixFQUFLN2xFLEVBQUcsR0FDUjhsRSxFQUFLOWxFLEVBQUcsR0FDWixJQUFJNGxFLEVBQUdDLEVBQUlDLEdBaUJKLE9BQUlGLEVBQUdFLEVBQUlELEdBQ2tDLEdBMUN0RCxTQUE2QjdsRSxFQUFJK2xFLEVBQU9DLEVBQU1oakYsRUFBSzRpRixHQUNqRCxPQUFZLENBQ1YsSUFBSUssRUFBTUQsRUFDTkUsRUFBT0gsRUFDWCxHQUFJRSxHQUFPampGLEVBQ1QsT0FBT2lqRixFQUVULElBQUlucEYsRUFBSWtqQixFQUFHaW1FLEdBQ1gsSUFBS0wsRUFBRzlvRixFQUFHb3BGLEdBQ1QsT0FBT0QsRUFFVEQsRUFBT0MsRUFBTSxFQUFJLEVBQ2pCRixFQUFRanBGLEdBOEJBcXBGLENBQW9Cbm1FLEVBQUk4bEUsRUFBSSxFQUFHOWlGLEVBQUs0aUYsR0FFckMsRUFqQlAsSUFGQSxJQUFJRyxFQUFRRCxFQUNSRSxFQUFPLElBQ0MsQ0FDVixJQUFJQyxFQUFNRCxFQUNORSxFQUFPSCxFQUNYLEdBQUlFLEdBQU9qakYsRUFDVCxPQUFPaWpGLEVBRVQsSUFBSW5wRixFQUFJa2pCLEVBQUdpbUUsR0FDWCxJQUFLTCxFQUFHTSxFQUFNcHBGLEdBQ1osT0FBT21wRixFQUVURCxFQUFPQyxFQUFNLEVBQUksRUFDakJGLEVBQVFqcEYsR0F1Q2QsU0FBUyxHQUFNeVAsRUFBSzY1RSxFQUFTQyxFQUFTQyxFQUFNQyxFQUFTQyxFQUFTaHhFLEVBQUtpeEUsRUFBUXQyRSxHQVF6RSxJQVBBLElBQUl1MkUsRUFBUU4sRUFBVUMsRUFBVSxFQUM1Qk0sRUFBUUosRUFBVUMsRUFBVSxFQUM1QkksRUFBTVIsRUFDTlMsRUFBTXQ2RSxFQUFJNjVFLEdBQ1ZVLEVBQU1QLEVBQ05RLEVBQU1ULEVBQUtDLEdBQ1hTLEVBQUtQLElBQ0csQ0FDVixJQUFJOXhGLEVBQUlxeUYsRUFDSjFDLEVBQUt5QyxFQUNMRSxFQUFLSCxFQUNMekMsRUFBS3dDLEVBQ0xLLEVBQUtOLEVBQ1QsR0FBSXoyRSxFQUFJazBFLEVBQUlDLElBQU8sRUFBbkIsQ0FDRTl1RSxFQUFJN2dCLEdBQUswdkYsRUFDVCxJQUFJOEMsRUFBT0QsRUFBSyxFQUFJLEVBQ3BCLEdBQUlDLEdBQVFULEVBQ1YsT0FBTyxFQUFzQkosRUFBTVcsRUFBSXp4RSxFQUFLN2dCLEVBQUksRUFBSSxFQUFHZ3lGLEVBQVFNLEVBQUssR0FFdEVELEVBQUtyeUYsRUFBSSxFQUFJLEVBQ2JreUYsRUFBTXQ2RSxFQUFJNDZFLEdBQ1ZQLEVBQU1PLE1BUlIsQ0FXQTN4RSxFQUFJN2dCLEdBQUsydkYsRUFDVCxJQUFJOEMsRUFBT0gsRUFBSyxFQUFJLEVBQ3BCLEdBQUlHLEdBQVFULEVBQ1YsT0FBTyxFQUFzQnA2RSxFQUFLMjZFLEVBQUkxeEUsRUFBSzdnQixFQUFJLEVBQUksRUFBRyt4RixFQUFRUSxFQUFLLEdBRXJFRixFQUFLcnlGLEVBQUksRUFBSSxFQUNib3lGLEVBQU1ULEVBQUtjLEdBQ1hOLEVBQU1NLElBd0xWLFNBQVNDLEdBQWM5NkUsRUFBSys2RSxFQUFROXhFLEVBQUtpeEUsRUFBUXpqRixFQUFLbU4sR0FDcEQsSUFBSSxJQUFJOWIsRUFBSSxFQUFHQSxFQUFJMk8sSUFBTzNPLEVBQUUsQ0FHMUIsSUFGQSxJQUFJbUMsRUFBSStWLEVBQUkrNkUsRUFBU2p6RixFQUFJLEdBQ3JCZ1ksR0FBS282RSxFQUFTcHlGLEVBQUksR0FBSyxFQUFJLEVBQ3pCZ1ksR0FBS282RSxHQUFVdDJFLEVBQUlxRixFQUFJbkosR0FBSTdWLEdBQUssR0FDcENnZixFQUFJbkosRUFBSSxFQUFJLEdBQUttSixFQUFJbkosR0FDckJBLEVBQUlBLEVBQUksRUFBSSxFQUVkbUosRUFBSW5KLEVBQUksRUFBSSxHQUFLN1YsR0FLckIsU0FBUyt3RixHQUFPaDdFLEVBQUsrNkUsRUFBUTl4RSxFQUFLaXhFLEVBQVF6akYsRUFBS21OLEdBQzdDLEdBQUluTixHQUFPLEVBQ1QsT0FBT3FrRixHQUFjOTZFLEVBQUsrNkUsRUFBUTl4RSxFQUFLaXhFLEVBQVF6akYsRUFBS21OLEdBRXRELElBQUk0MEUsRUFBSy9oRixFQUFNLEVBQUksRUFDZmdpRixFQUFLaGlGLEVBQU0raEYsRUFBSyxFQUdwQixPQUZBd0MsR0FBT2g3RSxFQUFLKzZFLEVBQVN2QyxFQUFLLEVBQUd2dkUsRUFBS2l4RSxFQUFTMUIsRUFBSyxFQUFHQyxFQUFJNzBFLEdBQ3ZEbzNFLEdBQU9oN0UsRUFBSys2RSxFQUFRLzZFLEVBQUsrNkUsRUFBU3RDLEVBQUssRUFBR0QsRUFBSTUwRSxHQUN2QyxHQUFNNUQsRUFBSys2RSxFQUFTdEMsRUFBSyxFQUFHRCxFQUFJdnZFLEVBQUtpeEUsRUFBUzFCLEVBQUssRUFBR0MsRUFBSXh2RSxFQUFLaXhFLEVBQVF0MkUsR0FHaEYsU0FBU3EzRSxHQUFxQjdxRixFQUFHd1QsR0FDL0IsSUFBSTdiLEVBQUlxSSxFQUFFakYsT0FDVixHQUFJcEQsR0FBSyxFQUNQLE9BQU8reUYsR0FBYzFxRixFQUFHLEVBQUdBLEVBQUcsRUFBR3JJLEVBQUc2YixHQUV0QyxJQUFJNDBFLEVBQUt6d0YsRUFBSSxFQUFJLEVBQ2Iwd0YsRUFBSzF3RixFQUFJeXdGLEVBQUssRUFDZHh2RixFQUFJLElBQUl5QyxNQUFNZ3RGLEdBR2xCLE9BRkF1QyxHQUFPNXFGLEVBQUdvb0YsRUFBSXh2RixFQUFHLEVBQUd5dkYsRUFBSTcwRSxHQUN4Qm8zRSxHQUFPNXFGLEVBQUcsRUFBR0EsRUFBR3FvRixFQUFJRCxFQUFJNTBFLEdBQ2pCLEdBQU14VCxFQUFHcW9GLEVBQUlELEVBQUl4dkYsRUFBRyxFQUFHeXZGLEVBQUlyb0YsRUFBRyxFQUFHd1QsR0FhMUMsU0FBU3MzRSxHQUFhOXFGLEVBQUd3VCxHQUN2QixPQVBGLFNBQXVCeFQsRUFBR3dULEdBQ3hCLElBQUl2VCxFQUFJRCxFQUFFb1AsTUFBTSxHQUVoQixPQURBeTdFLEdBQXFCNXFGLEVBQUd1VCxHQUNqQnZULEVBSUE4cUYsQ0FBYy9xRixFQUFHLEVBQVV3VCxJQ3BWcEMsU0FBU3czRSxHQUFXN3hGLEdBQ2xCLFlBQVVzRSxJQUFOdEUsRUFDS0EsRUFBRTBuRCxPQUVGLEVBa0JYLFNBQVMsR0FBT2xwRCxFQUFHOEosRUFBR3pKLEVBQUdRLEdBQ3ZCLElBQUl5eUYsRUFBS0QsR0FBV3J6RixHQUNoQmc3RSxFQUFLcVksR0FBV3h5RixHQUNwQixNQUFPLENBQ0NTLElBQUt3SSxFQUNMOUksTUFBT1gsRUFDUDZvRCxPQUFRb3FDLEdBQU10WSxFQUFLc1ksRUFBSyxFQUFJLEVBQUl0WSxFQUFLLEVBQUksRUFDekN2bEUsS0FBTXpWLEVBQ04wVixNQUFPN1UsR0FJakIsU0FBUyxHQUFVaUosRUFBR3pKLEdBQ3BCLE1BQU8sQ0FDQ2lCLElBQUt3SSxFQUNMOUksTUFBT1gsRUFDUDZvRCxPQUFRLEVBQ1J6ekMsVUFBTTNQLEVBQ040UCxXQUFPNVAsR0FJakIsU0FBU3l0RixHQUFTdnpGLEVBQUdhLEdBQ25CLFlBQVVpRixJQUFOakYsUUFDUWlGLElBQU45RixHQUNLQSxFQUFFa3BELFFBQVVyb0QsRUFBRXFvRCxPQVMzQixTQUFTc3FDLEdBQVloeUYsRUFBRzg4RCxHQUN0QixPQUFJOThELEVBQUVSLFFBQVVzOUQsRUFDUDk4RCxFQUVBLENBQ0NGLElBQUtFLEVBQUVGLElBQ1BOLE1BQU9zOUQsRUFDUHBWLE9BQVExbkQsRUFBRTBuRCxPQUNWenpDLEtBQU1qVSxFQUFFaVUsS0FDUkMsTUFBT2xVLEVBQUVrVSxPQUtyQixTQUFTKzlFLEdBQUl6ekYsRUFBRzhKLEVBQUd6SixFQUFHUSxHQUNwQixJQUFJeXlGLE9BQVd4dEYsSUFBTjlGLEVBQWtCQSxFQUFFa3BELE9BQVMsRUFDbEM4eEIsT0FBV2wxRSxJQUFOakYsRUFBa0JBLEVBQUVxb0QsT0FBUyxFQUN0QyxHQUFJb3FDLEdBQU10WSxFQUFLLEVBQUksR0FBSSxDQUNyQixJQUFJMFksRUFBSzF6RixFQUFFc0IsSUFDUHF5RixFQUFLM3pGLEVBQUVnQixNQUNQNHlGLEVBQUs1ekYsRUFBRXlWLEtBQ1BvK0UsRUFBSzd6RixFQUFFMFYsTUFDWCxPQUFJMjlFLEdBQVdPLElBQU9QLEdBQVdRLEdBQ3hCLEdBQU9ELEVBQUlGLEVBQUlDLEVBQUksR0FBT0UsRUFBSS9wRixFQUFHekosRUFBR1EsSUFFcEMsR0FBTyxHQUFPK3lGLEVBQUlGLEVBQUlDLEVBQUlFLEVBQUdwK0UsTUFBT28rRSxFQUFHdnlGLElBQUt1eUYsRUFBRzd5RixNQUFPLEdBQU82eUYsRUFBR24rRSxNQUFPNUwsRUFBR3pKLEVBQUdRLElBR3hGLEdBQUltNkUsSUFBT3NZLEVBQUssRUFBSSxHQUNsQixNQUFPLENBQ0NoeUYsSUFBS3dJLEVBQ0w5SSxNQUFPWCxFQUNQNm9ELE9BQVFvcUMsR0FBTXRZLEVBQUtzWSxFQUFLLEVBQUksRUFBSXRZLEVBQUssRUFBSSxFQUN6Q3ZsRSxLQUFNelYsRUFDTjBWLE1BQU83VSxHQUdqQixJQUFJaXpGLEVBQUtqekYsRUFBRVMsSUFDUHl5RixFQUFLbHpGLEVBQUVHLE1BQ1BnekYsRUFBS256RixFQUFFNFUsS0FDUHcrRSxFQUFLcHpGLEVBQUU2VSxNQUNYLE9BQUkyOUUsR0FBV1ksSUFBT1osR0FBV1csR0FDeEIsR0FBTyxHQUFPaDBGLEVBQUc4SixFQUFHekosRUFBRzJ6RixHQUFLRixFQUFJQyxFQUFJRSxHQUVwQyxHQUFPLEdBQU9qMEYsRUFBRzhKLEVBQUd6SixFQUFHMnpGLEVBQUd2K0UsTUFBT3UrRSxFQUFHMXlGLElBQUsweUYsRUFBR2h6RixNQUFPLEdBQU9nekYsRUFBR3QrRSxNQUFPbytFLEVBQUlDLEVBQUlFLElBSXZGLFNBQVNDLEdBQVdDLEdBQ2xCLE9BQVksQ0FDVixJQUFJM3lGLEVBQUkyeUYsRUFDSkMsRUFBTTV5RixFQUFFaVUsS0FDWixRQUFZM1AsSUFBUnN1RixFQUNGLE9BQU81eUYsRUFBRUYsSUFFWDZ5RixFQUFLQyxHQUtULFNBQVNDLEdBQU83eUYsR0FDZCxRQUFVc0UsSUFBTnRFLEVBQ0YsT0FBTyxFQUFpQjB5RixHQUFXMXlGLElBWXZDLFNBQVM4eUYsR0FBV0gsR0FDbEIsT0FBWSxDQUNWLElBQUkzeUYsRUFBSTJ5RixFQUNKQyxFQUFNNXlGLEVBQUVrVSxNQUNaLFFBQVk1UCxJQUFSc3VGLEVBQ0YsT0FBTzV5RixFQUFFRixJQUVYNnlGLEVBQUtDLEdBS1QsU0FBU0csR0FBTy95RixHQUNkLFFBQVVzRSxJQUFOdEUsRUFDRixPQUFPLEVBQWlCOHlGLEdBQVc5eUYsSUFZdkMsU0FBU2d6RixHQUFVTCxHQUNqQixPQUFZLENBQ1YsSUFBSTN5RixFQUFJMnlGLEVBQ0pDLEVBQU01eUYsRUFBRWlVLEtBQ1osUUFBWTNQLElBQVJzdUYsRUFDRixNQUFrQixDQUNWNXlGLEVBQUVGLElBQ0ZFLEVBQUVSLE9BR1ptekYsRUFBS0MsR0FLVCxTQUFTSyxHQUFRanpGLEdBQ2YsUUFBVXNFLElBQU50RSxFQUNGLE9BQU9nekYsR0FBVWh6RixHQVlyQixTQUFTa3pGLEdBQVVQLEdBQ2pCLE9BQVksQ0FDVixJQUFJM3lGLEVBQUkyeUYsRUFDSkMsRUFBTTV5RixFQUFFa1UsTUFDWixRQUFZNVAsSUFBUnN1RixFQUNGLE1BQWtCLENBQ1Y1eUYsRUFBRUYsSUFDRkUsRUFBRVIsT0FHWm16RixFQUFLQyxHQUtULFNBQVM3cUIsR0FBUS9uRSxHQUNmLFFBQVVzRSxJQUFOdEUsRUFDRixPQUFPa3pGLEdBQVVsekYsR0FZckIsU0FBU216RixHQUFvQm56RixFQUFHb3pGLEVBQUlDLEdBQ2xDLElBQUlDLEVBQUt0ekYsRUFBRWlVLEtBQ1BzL0UsRUFBS3Z6RixFQUFFa1UsTUFDUHMvRSxFQUFLeHpGLEVBQUVGLElBQ1AyekYsRUFBS3p6RixFQUFFUixNQUNYLFlBQVc4RSxJQUFQZ3ZGLEVBQ0tyQixHQUFJa0IsR0FBb0JHLEVBQUlGLEVBQUlDLEdBQUtHLEVBQUlDLEVBQUlGLElBRXBESCxFQUFHLzJCLFNBQVdtM0IsRUFDZEgsRUFBR2gzQixTQUFXbzNCLEVBQ1BGLEdBSVgsU0FBU0csR0FBUXByRixHQUNmLFlBQWFoRSxJQUFOZ0UsRUFHVCxTQUFTcXJGLEdBQWFDLEVBQUlDLEdBQ3hCLE9BQVksQ0FHVixRQUFVdnZGLElBREZzdkYsRUFFTixPQUhNQyxFQUtSQSxFQUFhLENBSkxELEVBREFDLEdBU1JELEVBUlFBLEVBUUQzL0UsTUFLWCxTQUFTNi9FLEdBQWE5ekYsRUFBR0ssR0FDdkIsUUFBVWlFLElBQU50RSxFQUFKLENBR0EsSUFBSWlVLEVBQU82L0UsR0FBYTl6RixFQUFFaVUsS0FBTTVULEdBQ2hDLFFBQWFpRSxJQUFUMlAsRUFDRixPQUFPQSxFQUVULElBQUlqTixFQUFJaEgsRUFBRUYsSUFDTmpCLEVBQUltQixFQUFFUixNQUVWLEdBRFVhLEVBQUUyRyxFQUFHbkksR0FFYixNQUFrQixDQUNWbUksRUFDQW5JLEdBR1YsSUFBSXFWLEVBQVE0L0UsR0FBYTl6RixFQUFFa1UsTUFBTzdULEdBQ2xDLFlBQWNpRSxJQUFWNFAsRUFDS0EsT0FEVCxHQVVGLFNBQVMsR0FBU3krRSxFQUFJcnBGLEdBQ3BCLE9BQVksQ0FDVixJQUFJdEosRUFBSTJ5RixFQUNSLFFBQVVydUYsSUFBTnRFLEVBQ0YsT0FFRixHQUFTQSxFQUFFaVUsS0FBTTNLLEdBQ2pCQSxFQUFFdEosRUFBRUYsSUFBS0UsRUFBRVIsT0FDWG16RixFQUFLM3lGLEVBQUVrVSxPQVNYLFNBQVMsR0FBS2xVLEVBQUdzSixHQUNmLFFBQVVoRixJQUFOdEUsRUFBSixDQUdBLElBQUkrekYsRUFBVSxHQUFLL3pGLEVBQUVpVSxLQUFNM0ssR0FDdkIwcUYsRUFBTzFxRixFQUFFdEosRUFBRVIsT0FDWHkwRixFQUFXLEdBQUtqMEYsRUFBRWtVLE1BQU81SyxHQUM3QixNQUFPLENBQ0N4SixJQUFLRSxFQUFFRixJQUNQTixNQUFPdzBGLEVBQ1B0c0MsT0FBUTFuRCxFQUFFMG5ELE9BQ1Z6ekMsS0FBTTgvRSxFQUNONy9FLE1BQU8rL0UsSUFRakIsU0FBU0MsR0FBWWwwRixFQUFHc0osR0FDdEIsUUFBVWhGLElBQU50RSxFQUFKLENBR0EsSUFBSUYsRUFBTUUsRUFBRUYsSUFDUmkwRixFQUFVRyxHQUFZbDBGLEVBQUVpVSxLQUFNM0ssR0FDOUIwcUYsRUFBTzFxRixFQUFFeEosRUFBS0UsRUFBRVIsT0FDaEJ5MEYsRUFBV0MsR0FBWWwwRixFQUFFa1UsTUFBTzVLLEdBQ3BDLE1BQU8sQ0FDQ3hKLElBQUtBLEVBQ0xOLE1BQU93MEYsRUFDUHRzQyxPQUFRMW5ELEVBQUUwbkQsT0FDVnp6QyxLQUFNOC9FLEVBQ043L0UsTUFBTysvRSxJQVFqQixTQUFTLEdBQVFFLEVBQUlDLEVBQU85cUYsR0FDMUIsT0FBWSxDQUNWLElBQUkrcUYsRUFBT0QsRUFDUHoxRixFQUFJdzFGLEVBQ1IsUUFBVTd2RixJQUFOM0YsRUFDRixPQUFPMDFGLEVBRVQsSUFBSXJ0RixFQUFJckksRUFBRW1CLElBQ05qQixFQUFJRixFQUFFYSxNQUNOaEIsRUFBSUcsRUFBRXNWLEtBQ041VSxFQUFJVixFQUFFdVYsTUFDVmtnRixFQUFROXFGLEVBQUUsR0FBUTlLLEVBQUc2MUYsRUFBTS9xRixHQUFJdEMsRUFBR25JLEdBQ2xDczFGLEVBQUs5MEYsR0FTVCxTQUFTLEdBQU9zekYsRUFBSXR5RixHQUNsQixPQUFZLENBQ1YsSUFBSUwsRUFBSTJ5RixFQUNSLFFBQVVydUYsSUFBTnRFLEVBQ0YsT0FBTyxFQUVULElBQUtLLEVBQUVMLEVBQUVGLElBQUtFLEVBQUVSLE9BQ2QsT0FBTyxFQUVULElBQUssR0FBT1EsRUFBRWlVLEtBQU01VCxHQUNsQixPQUFPLEVBRVRzeUYsRUFBSzN5RixFQUFFa1UsT0FTWCxTQUFTLEdBQU15K0UsRUFBSXR5RixHQUNqQixPQUFZLENBQ1YsSUFBSUwsRUFBSTJ5RixFQUNSLFFBQVVydUYsSUFBTnRFLEVBQ0YsT0FBTyxFQUVULEdBQUlLLEVBQUVMLEVBQUVGLElBQUtFLEVBQUVSLE9BQ2IsT0FBTyxFQUVULEdBQUksR0FBTVEsRUFBRWlVLEtBQU01VCxHQUNoQixPQUFPLEVBRVRzeUYsRUFBSzN5RixFQUFFa1UsT0F5QlgsU0FBUyxHQUFLby9FLEVBQUl0c0YsRUFBR25JLEVBQUcwMEYsR0FDdEIsUUFBV2p2RixJQUFQZ3ZGLEVBQ0YsT0FsQkosU0FBU2dCLEVBQWN0MEYsRUFBRytJLEVBQUcvQixHQUMzQixZQUFVMUMsSUFBTnRFLEVBQ0tpeUYsR0FBSXFDLEVBQWN0MEYsRUFBRWlVLEtBQU1sTCxFQUFHL0IsR0FBSWhILEVBQUVGLElBQUtFLEVBQUVSLE1BQU9RLEVBQUVrVSxPQUVuRCxHQUFVbkwsRUFBRy9CLEdBY2JzdEYsQ0FBY2YsRUFBSXZzRixFQUFHbkksR0FFOUIsUUFBV3lGLElBQVBpdkYsRUFDRixPQWJKLFNBQVNnQixFQUFjdjBGLEVBQUcrSSxFQUFHL0IsR0FDM0IsWUFBVTFDLElBQU50RSxFQUNLaXlGLEdBQUlqeUYsRUFBRWlVLEtBQU1qVSxFQUFFRixJQUFLRSxFQUFFUixNQUFPKzBGLEVBQWN2MEYsRUFBRWtVLE1BQU9uTCxFQUFHL0IsSUFFdEQsR0FBVStCLEVBQUcvQixHQVNidXRGLENBQWNqQixFQUFJdHNGLEVBQUduSSxHQUU5QixJQUFJcXpGLEVBQUtvQixFQUFHeHpGLElBQ1JxeUYsRUFBS21CLEVBQUc5ekYsTUFDUmcxRixFQUFLbEIsRUFBRzVyQyxPQUNSMHFDLEVBQUtrQixFQUFHci9FLEtBQ1JvK0UsRUFBS2lCLEVBQUdwL0UsTUFDUm8rRSxFQUFLaUIsRUFBR3p6RixJQUNSeXlGLEVBQUtnQixFQUFHL3pGLE1BQ1JpMUYsRUFBS2xCLEVBQUc3ckMsT0FDUjhxQyxFQUFLZSxFQUFHdC9FLEtBQ1J3K0UsRUFBS2MsRUFBR3IvRSxNQUNaLE9BQUlzZ0YsR0FBTUMsRUFBSyxFQUFJLEdBQ1Z4QyxHQUFJRyxFQUFJRixFQUFJQyxFQUFJLEdBQUtFLEVBQUlyckYsRUFBR25JLEVBQUcwMEYsSUFDN0JrQixHQUFNRCxFQUFLLEVBQUksR0FDakJ2QyxHQUFJLEdBQUtxQixFQUFJdHNGLEVBQUduSSxFQUFHMnpGLEdBQUtGLEVBQUlDLEVBQUlFLEdBRWhDLEdBQU9hLEVBQUl0c0YsRUFBR25JLEVBQUcwMEYsR0FJNUIsU0FBUyxHQUFPbUIsRUFBSUMsR0FDbEIsUUFBV3J3RixJQUFQb3dGLEVBQ0YsT0FBT0MsRUFFVCxRQUFXcndGLElBQVBxd0YsRUFDRixPQUFPRCxFQUVULElBQUl0QixFQUFLLENBQ1AvMkIsU0FBVXM0QixFQUFHNzBGLEtBRVh1ekYsRUFBSyxDQUNQaDNCLFNBQVVzNEIsRUFBR24xRixPQUVYbzFGLEVBQU16QixHQUFvQndCLEVBQUl2QixFQUFJQyxHQUN0QyxPQUFPLEdBQUtxQixFQUFJdEIsRUFBRy8yQixTQUFVZzNCLEVBQUdoM0IsU0FBVXU0QixHQUc1QyxTQUFTQyxHQUFhSCxFQUFJMXRGLEVBQUduSSxFQUFHODFGLEdBQzlCLFlBQVVyd0YsSUFBTnpGLEVBQ0ssR0FBSzYxRixFQUFJMXRGLEVBQUcsRUFBMEJuSSxHQUFJODFGLEdBRTFDLEdBQU9ELEVBQUlDLEdBSXRCLFNBQVNHLEdBQVk5MEYsRUFBR0ssR0FDdEIsUUFBVWlFLElBQU50RSxFQUFKLENBR0EsSUFBSWdILEVBQUloSCxFQUFFRixJQUNOakIsRUFBSW1CLEVBQUVSLE1BQ051MEYsRUFBVWUsR0FBWTkwRixFQUFFaVUsS0FBTTVULEdBQzlCMDBGLEVBQU0xMEYsRUFBRTJHLEVBQUduSSxHQUNYbzFGLEVBQVdhLEdBQVk5MEYsRUFBRWtVLE1BQU83VCxHQUNwQyxPQUFJMDBGLEVBQ0ssR0FBS2hCLEVBQVMvc0YsRUFBR25JLEVBQUdvMUYsR0FFcEIsR0FBT0YsRUFBU0UsSUFRM0IsU0FBUyxHQUFTajBGLEVBQUdLLEdBQ25CLFFBQVVpRSxJQUFOdEUsRUFBSixDQUdBLElBQUlnSCxFQUFJaEgsRUFBRUYsSUFDTmpCLEVBQUltQixFQUFFUixNQUNOdTBGLEVBQVUsR0FBUy96RixFQUFFaVUsS0FBTTVULEdBQzNCMDBGLEVBQU0xMEYsRUFBRTJHLEVBQUduSSxHQUNYbzFGLEVBQVcsR0FBU2owRixFQUFFa1UsTUFBTzdULEdBQ2pDLFlBQVlpRSxJQUFSeXdGLEVBQ0ssR0FBS2hCLEVBQVMvc0YsRUFBRyxFQUEwQit0RixHQUFNZCxHQUVqRCxHQUFPRixFQUFTRSxJQVEzQixTQUFTZSxHQUFpQmgxRixFQUFHSyxHQUMzQixRQUFVaUUsSUFBTnRFLEVBQ0YsTUFBa0IsTUFDVnNFLE9BQ0FBLEdBR1YsSUFBSXhFLEVBQU1FLEVBQUVGLElBQ1JOLEVBQVFRLEVBQUVSLE1BQ1ZnUixFQUFRd2tGLEdBQWlCaDFGLEVBQUVpVSxLQUFNNVQsR0FDakM0MEYsRUFBS3prRixFQUFNLEdBQ1hzL0UsRUFBS3QvRSxFQUFNLEdBQ1h1a0YsRUFBTTEwRixFQUFFUCxFQUFLTixHQUNiMDFGLEVBQVVGLEdBQWlCaDFGLEVBQUVrVSxNQUFPN1QsR0FDcEM4MEYsRUFBS0QsRUFBUSxHQUNiRSxFQUFLRixFQUFRLEdBQ2pCLE9BQUlILEVBQ2dCLENBQ1YsR0FBS2pGLEVBQUlod0YsRUFBS04sRUFBTzQxRixHQUNyQixHQUFPSCxFQUFJRSxJQUdELENBQ1YsR0FBT3JGLEVBQUlzRixHQUNYLEdBQUtILEVBQUluMUYsRUFBS04sRUFBTzIxRixJQVNqQyxTQUFTRSxHQUFXcjFGLEdBQ2xCLElBQUl4QixFQUFJd0IsRUFBRWlVLEtBQ041VSxFQUFJVyxFQUFFa1UsTUFHVixPQUFRLFFBRlU1UCxJQUFOOUYsRUFBa0I2MkYsR0FBVzcyRixHQUFLLEdBRTFCLFNBREY4RixJQUFOakYsRUFBa0JnMkYsR0FBV2gyRixHQUFLLEdBQ2IsRUFHbkMsU0FBUyxHQUFLVyxHQUNaLFlBQVVzRSxJQUFOdEUsRUFDS3ExRixHQUFXcjFGLEdBRVgsRUEyQlgsU0FBUyxHQUFPTSxHQUNkLE9BeEJGLFNBQVNnMUYsRUFBVTNDLEVBQUl5QixHQUNyQixPQUFZLENBQ1YsSUFBSUMsRUFBT0QsRUFDUHAwRixFQUFJMnlGLEVBQ1IsUUFBVXJ1RixJQUFOdEUsRUFDRixPQUFPcTBGLEVBRVQsSUFBSXRyRixFQUFJL0ksRUFBRUYsSUFDTmtILEVBQUloSCxFQUFFUixNQUNOaEIsRUFBSXdCLEVBQUVpVSxLQUVWbWdGLEVBQWdCLENBQ0gsQ0FDVHJyRixFQUNBL0IsR0FFRnN1RixFQU5NdDFGLEVBQUVrVSxNQU1LbWdGLElBRWYxQixFQUFLbjBGLEdBTUE4MkYsQ0FBVWgxRixFQUFXLEdBZ0Y5QixTQUFTLEdBQVFOLEdBQ2YsUUFBVXNFLElBQU50RSxFQUNGLE1BQU8sR0FFVCxJQUFJaWdCLEVBQU9vMUUsR0FBV3IxRixHQUNsQmdILEVBQUksSUFBSTlFLE1BQU0rZCxHQUVsQixPQTdCRixTQUFTczFFLEVBQVU1QyxFQUFJcGhGLEVBQUkrRSxHQUN6QixPQUFZLENBQ1YsSUFBSS9YLEVBQUlnVCxFQUNKdlIsRUFBSTJ5RixFQUNKbjBGLEVBQUl3QixFQUFFaVUsS0FDTmpOLEVBQUloSCxFQUFFRixJQUNOVCxFQUFJVyxFQUFFa1UsTUFDTnRELE9BQWF0TSxJQUFOOUYsRUFBa0IrMkYsRUFBVS8yRixFQUFHRCxFQUFHK1gsR0FBTy9YLEVBQ3BEK1gsRUFBSTFGLEdBQW1CLENBQ3JCNUosRUFDQWhILEVBQUVSLE9BRUosSUFBSWcyRixFQUFRNWtGLEVBQU8sRUFBSSxFQUN2QixRQUFVdE0sSUFBTmpGLEVBQ0YsT0FBT20yRixFQUVUamtGLEVBQUtpa0YsRUFDTDdDLEVBQUt0ekYsR0FXUGsyRixDQUFVdjFGLEVBQUcsRUFBR2dILEdBQ1RBLEVBR1QsU0FBU3l1RixHQUFZejFGLEdBQ25CLFFBQVVzRSxJQUFOdEUsRUFDRixNQUFPLEdBRVQsSUFBSWlnQixFQUFPbzFFLEdBQVdyMUYsR0FDbEJnSCxFQUFJLElBQUk5RSxNQUFNK2QsR0FFbEIsT0E1RUYsU0FBU3kxRSxFQUFhL0MsRUFBSXBoRixFQUFJK0UsR0FDNUIsT0FBWSxDQUNWLElBQUkvWCxFQUFJZ1QsRUFDSnZSLEVBQUkyeUYsRUFDSjNyRixFQUFJaEgsRUFBRUYsSUFDTnRCLEVBQUl3QixFQUFFaVUsS0FDTjVVLEVBQUlXLEVBQUVrVSxNQUNOdEQsT0FBYXRNLElBQU45RixFQUFrQmszRixFQUFhbDNGLEVBQUdELEVBQUcrWCxHQUFPL1gsRUFDdkQrWCxFQUFJMUYsR0FBUTVKLEVBQ1osSUFBSXd1RixFQUFRNWtGLEVBQU8sRUFBSSxFQUN2QixRQUFVdE0sSUFBTmpGLEVBQ0YsT0FBT20yRixFQUVUamtGLEVBQUtpa0YsRUFDTDdDLEVBQUt0ekYsR0E2RFBxMkYsQ0FBYTExRixFQUFHLEVBQUdnSCxHQUNaQSxFQUdULFNBQVMydUYsR0FBYzMxRixHQUNyQixRQUFVc0UsSUFBTnRFLEVBQ0YsTUFBTyxHQUVULElBQUlpZ0IsRUFBT28xRSxHQUFXcjFGLEdBQ2xCZ0gsRUFBSSxJQUFJOUUsTUFBTStkLEdBRWxCLE9BbkVGLFNBQVMyMUUsRUFBZWpELEVBQUlwaEYsRUFBSStFLEdBQzlCLE9BQVksQ0FDVixJQUFJL1gsRUFBSWdULEVBQ0p2UixFQUFJMnlGLEVBQ0puMEYsRUFBSXdCLEVBQUVpVSxLQUNONVUsRUFBSVcsRUFBRWtVLE1BQ050RCxPQUFhdE0sSUFBTjlGLEVBQWtCbzNGLEVBQWVwM0YsRUFBR0QsRUFBRytYLEdBQU8vWCxFQUN6RCtYLEVBQUkxRixHQUFRNVEsRUFBRVIsTUFDZCxJQUFJZzJGLEVBQVE1a0YsRUFBTyxFQUFJLEVBQ3ZCLFFBQVV0TSxJQUFOakYsRUFDRixPQUFPbTJGLEVBRVRqa0YsRUFBS2lrRixFQUNMN0MsRUFBS3R6RixHQXFEUHUyRixDQUFlNTFGLEVBQUcsRUFBR2dILEdBQ2RBLEVBR1QsU0FBUzZ1RixHQUFzQnYvRSxFQUFLdzlCLEVBQUs1bUMsR0FDdkMsT0FBUUEsR0FDTixLQUFLLEVBQ0QsT0FDSixLQUFLLEVBQ0QsSUFBSXNELEVBQVE4RixFQUFJdzlCLEdBQ2hCLE9BQU8sR0FBVXRqQyxFQUFNLEdBQUlBLEVBQU0sSUFDckMsS0FBSyxFQUNELElBQUlzbEYsRUFBWXgvRSxFQUFJdzlCLEdBRWhCb2hELEVBRFk1K0UsRUFBSXc5QixFQUFNLEVBQUksR0FFMUJpaUQsRUFBVUQsRUFDZCxNQUFPLENBQ0NoMkYsSUFBS28xRixFQUFRLEdBQ2IxMUYsTUFBTzAxRixFQUFRLEdBQ2Z4dEMsT0FBUSxFQUNSenpDLEtBQU0sR0FBVThoRixFQUFRLEdBQUlBLEVBQVEsSUFDcEM3aEYsV0FBTzVQLEdBRW5CLEtBQUssRUFDRCxJQUFJMHhGLEVBQWMxL0UsRUFBSXc5QixHQUNsQm1pRCxFQUFjMy9FLEVBQUl3OUIsRUFBTSxFQUFJLEdBRTVCb2lELEVBRFk1L0UsRUFBSXc5QixFQUFNLEVBQUksR0FFMUJxaUQsRUFBVUYsRUFDVkcsRUFBVUosRUFDZCxNQUFPLENBQ0NsMkYsSUFBS3EyRixFQUFRLEdBQ2IzMkYsTUFBTzIyRixFQUFRLEdBQ2Z6dUMsT0FBUSxFQUNSenpDLEtBQU0sR0FBVW1pRixFQUFRLEdBQUlBLEVBQVEsSUFDcENsaUYsTUFBTyxHQUFVZ2lGLEVBQVEsR0FBSUEsRUFBUSxLQUVqRCxRQUNFLElBQUlHLEVBQUtucEYsRUFBTSxFQUFJLEVBQ2YrRyxFQUFPNGhGLEdBQXNCdi9FLEVBQUt3OUIsRUFBS3VpRCxHQUN2Q0MsRUFBVWhnRixFQUFJdzlCLEVBQU11aUQsRUFBSyxHQUN6Qm5pRixFQUFRMmhGLEdBQXNCdi9FLEdBQU13OUIsRUFBTXVpRCxFQUFLLEdBQUssRUFBSSxHQUFJbnBGLEVBQU1tcEYsRUFBSyxHQUFLLEVBQUksR0FDcEYsT0FBTyxHQUFPcGlGLEVBQU1xaUYsRUFBUSxHQUFJQSxFQUFRLEdBQUlwaUYsSUFJbEQsU0FBU3FpRixHQUFtQmpnRixFQUFLdzlCLEVBQUs1bUMsR0FDcEMsT0FBUUEsR0FDTixLQUFLLEVBQ0QsT0FDSixLQUFLLEVBQ0QsSUFBSXNELEVBQVE4RixFQUFJdzlCLEdBQ2hCLE9BQU8sR0FBVXRqQyxFQUFNLEdBQUlBLEVBQU0sSUFDckMsS0FBSyxFQUNELElBQUlzbEYsRUFBWXgvRSxFQUFJdzlCLEdBRWhCb2hELEVBRFk1K0UsRUFBSXc5QixFQUFNLEVBQUksR0FFMUJpaUQsRUFBVUQsRUFDZCxNQUFPLENBQ0NoMkYsSUFBS28xRixFQUFRLEdBQ2IxMUYsTUFBTzAxRixFQUFRLEdBQ2Z4dEMsT0FBUSxFQUNSenpDLEtBQU0sR0FBVThoRixFQUFRLEdBQUlBLEVBQVEsSUFDcEM3aEYsV0FBTzVQLEdBRW5CLEtBQUssRUFDRCxJQUFJMHhGLEVBQWMxL0UsRUFBSXc5QixHQUNsQm1pRCxFQUFjMy9FLEVBQUl3OUIsRUFBTSxFQUFJLEdBRTVCb2lELEVBRFk1L0UsRUFBSXc5QixFQUFNLEVBQUksR0FFMUJxaUQsRUFBVUYsRUFDVkcsRUFBVUosRUFDZCxNQUFPLENBQ0NsMkYsSUFBS3EyRixFQUFRLEdBQ2IzMkYsTUFBTzIyRixFQUFRLEdBQ2Z6dUMsT0FBUSxFQUNSenpDLEtBQU0sR0FBVW1pRixFQUFRLEdBQUlBLEVBQVEsSUFDcENsaUYsTUFBTyxHQUFVZ2lGLEVBQVEsR0FBSUEsRUFBUSxLQUVqRCxRQUNFLElBQUlHLEVBQUtucEYsRUFBTSxFQUFJLEVBQ2YrRyxFQUFPc2lGLEdBQW1CamdGLEVBQUt3OUIsRUFBS3VpRCxHQUNwQ0MsRUFBVWhnRixFQUFJdzlCLEVBQU11aUQsRUFBSyxHQUN6Qm5pRixFQUFRcWlGLEdBQW1CamdGLEVBQXNCLEdBQWhCdzlCLEVBQU11aUQsRUFBSyxHQUFTLEdBQUlucEYsRUFBTW1wRixFQUFLLEdBQUssRUFBSSxHQUNqRixPQUFPLEdBQU9waUYsRUFBTXFpRixFQUFRLEdBQUlBLEVBQVEsR0FBSXBpRixJQVFsRCxTQUFTLEdBQUtxNkUsRUFBSUMsRUFBSWdJLEVBQU1DLEdBQzFCLElBQUlDLEVBQU8sR0FBS25JLEdBQ1pvSSxFQUFPLEdBQUtuSSxHQUNoQixHQUFJa0ksSUFBU0MsRUEwQk4sT0FBSUQsRUFBT0MsR0FDUixFQUVELEVBMUJQLElBRkEsSUFBSUMsRUFBTWpELEdBQWFwRixFQUFZLEdBQy9Cc0ksRUFBTWxELEdBQWFuRixFQUFZLEtBQ3ZCLENBQ1YsSUFBSXNJLEVBQUtELEVBQ0xFLEVBQUtILEVBQ1QsSUFBS0csRUFDSCxPQUFPLEVBRVQsSUFBS0QsRUFDSCxPQUFPLEVBRVQsSUFBSUUsRUFBS0YsRUFBRyxHQUNSRyxFQUFLRixFQUFHLEdBQ1JuNEYsRUFBSTQzRixFQUFLUyxFQUFHbjNGLElBQUtrM0YsRUFBR2wzRixLQUN4QixHQUFVLElBQU5sQixFQUNGLE9BQU9BLEVBRVQsSUFBSXlVLEVBQUtvakYsRUFBS1EsRUFBR3ozRixNQUFPdzNGLEVBQUd4M0YsT0FDM0IsR0FBVyxJQUFQNlQsRUFDRixPQUFPQSxFQUVUd2pGLEVBQU1sRCxHQUFhcUQsRUFBRzlpRixNQUFPNGlGLEVBQUcsSUFDaENGLEVBQU1qRCxHQUFhc0QsRUFBRy9pRixNQUFPNmlGLEVBQUcsS0FjdEMsU0FBUyxHQUFJeEksRUFBSUMsRUFBSWdJLEVBQU1VLEdBR3pCLEdBRlcsR0FBSzNJLEtBQ0wsR0FBS0MsR0F1QmQsT0FBTyxFQW5CUCxJQUZBLElBQUlvSSxFQUFNakQsR0FBYXBGLEVBQVksR0FDL0JzSSxFQUFNbEQsR0FBYW5GLEVBQVksS0FDdkIsQ0FDVixJQUFJc0ksRUFBS0QsRUFDTEUsRUFBS0gsRUFDVCxJQUFLRyxFQUNILE9BQU8sRUFFVCxJQUFLRCxFQUNILE9BQU8sRUFFVCxJQUFJRSxFQUFLRixFQUFHLEdBQ1JHLEVBQUtGLEVBQUcsR0FDWixHQUErQixJQUF6QlAsRUFBS1MsRUFBR24zRixJQUFLazNGLEVBQUdsM0YsT0FBY28zRixFQUFJRCxFQUFHejNGLE1BQU93M0YsRUFBR3gzRixPQUNuRCxPQUFPLEVBRVRxM0YsRUFBTWxELEdBQWFxRCxFQUFHOWlGLE1BQU80aUYsRUFBRyxJQUNoQ0YsRUFBTWpELEdBQWFzRCxFQUFHL2lGLE1BQU82aUYsRUFBRyxLQTRGdEMsU0FBU0ksR0FBb0JDLEdBQzNCLElBQUlDLEVBQUtELEVBQUduakYsS0FDWm1qRixFQUFHbmpGLEtBQU9vakYsRUFBR25qRixNQUNibWpGLEVBQUduakYsTUFBUWtqRixFQUNYLElBQUlFLEVBQU96RixHQUFXdUYsRUFBR25qRixNQUNyQnNqRixFQUFPMUYsR0FBV3VGLEVBQUdsakYsT0FDekJrakYsRUFBRzF2QyxRQUNENHZDLEVBQU9DLEVBQU9ELEVBQU9DLEdBQ25CLEVBQUksRUFDUixJQUFJQyxFQUFPM0YsR0FBV3dGLEVBQUdwakYsTUFDckJ3akYsRUFBTUwsRUFBRzF2QyxPQUliLE9BSEEydkMsRUFBRzN2QyxRQUNEOHZDLEVBQU9DLEVBQU1ELEVBQU9DLEdBQ2xCLEVBQUksRUFDREosRUFHVCxTQUFTSyxHQUFxQkwsR0FDNUIsSUFBSUQsRUFBS0MsRUFBR25qRixNQUNabWpGLEVBQUduakYsTUFBUWtqRixFQUFHbmpGLEtBQ2RtakYsRUFBR25qRixLQUFPb2pGLEVBQ1YsSUFBSUcsRUFBTzNGLEdBQVd3RixFQUFHcGpGLE1BQ3JCMGpGLEVBQU85RixHQUFXd0YsRUFBR25qRixPQUN6Qm1qRixFQUFHM3ZDLFFBQ0Q4dkMsRUFBT0csRUFBT0gsRUFBT0csR0FDbkIsRUFBSSxFQUNSLElBQUlKLEVBQU8xRixHQUFXdUYsRUFBR2xqRixPQUNyQjBqRixFQUFNUCxFQUFHM3ZDLE9BSWIsT0FIQTB2QyxFQUFHMXZDLFFBQ0Q2dkMsRUFBT0ssRUFBTUwsRUFBT0ssR0FDbEIsRUFBSSxFQUNEUixFQWVULFNBQVNTLEdBQW1CcDRGLEdBQzFCLElBQUlxNEYsRUFBTWpHLEdBQVdweUYsRUFBRXdVLE1BQ25COGpGLEVBQU1sRyxHQUFXcHlGLEVBQUV5VSxPQUl2QixPQUhBelUsRUFBRWlvRCxRQUNBb3dDLEVBQU1DLEVBQU1ELEVBQU1DLEdBQ2hCLEVBQUksRUFDRHQ0RixFQUdULFNBQVN1NEYsR0FBVUMsR0FDakIsSUF0QjJCQyxFQUN2Qmx4RixFQXFCQXhJLEVBQUl5NUYsRUFBR2hrRixLQUNQNVUsRUFBSTQ0RixFQUFHL2pGLE1BQ1A0OUUsRUFBS0QsR0FBV3J6RixHQUNoQmc3RSxFQUFLcVksR0FBV3h5RixHQUNwQixHQUFJeXlGLEdBQU0sRUFBSXRZLEVBQUssR0FHakIsT0FBSXVZLEdBRkt2ekYsRUFBRXlWLEtBQ0Z6VixFQUFFMFYsT0FFRjJqRixHQUFtQlYsR0FBb0JjLElBRXZDSixJQS9CUDd3RixFQUFJMHdGLElBRG1CUSxFQWdDdUJELEdBL0JsQmhrRixNQUNoQ2lrRixFQUFHamtGLEtBQU9qTixFQUNIbXdGLEdBQW9CZSxLQWdDM0IsR0FBSTFlLEdBQU0sRUFBSXNZLEVBQUssR0FBSSxDQUNyQixJQUFJVSxFQUFLbnpGLEVBQUU0VSxLQUVYLE9BQUk4OUUsR0FESzF5RixFQUFFNlUsTUFDTXMrRSxHQUNScUYsR0FBbUJILEdBQXFCTyxJQUV4Q0osR0FuQ2IsU0FBOEJULEdBQzVCLElBQUlwd0YsRUFBSW13RixHQUFvQkMsRUFBR2xqRixPQUUvQixPQURBa2pGLEVBQUdsakYsTUFBUWxOLEVBQ0owd0YsR0FBcUJOLEdBZ0NFZSxDQUFxQkYsSUFNbkQsT0FIQUEsRUFBR3Z3QyxRQUNEb3FDLEVBQUt0WSxFQUFLc1ksRUFBS3RZLEdBQ2IsRUFBSSxFQUNEeWUsRUFHVCxTQUFTRyxHQUFhMzRGLEVBQUc2SSxFQUFHdTBCLEVBQU14aUIsR0FDaEMsUUFBVS9WLElBQU43RSxFQUNGLE9BQU8sR0FBVTZJLEVBQUd1MEIsR0FFdEIsSUFDSWorQixFQUFJeWIsRUFBSS9SLEVBREo3SSxFQUFFSyxLQUVWLEdBQVUsSUFBTmxCLEVBRUYsT0FEQWEsRUFBRUQsTUFBUXE5QixFQUNIcDlCLEVBRVQsSUFBSWpCLEVBQUlpQixFQUFFd1UsS0FDTjVVLEVBQUlJLEVBQUV5VSxNQUNWLEdBQUl0VixFQUFJLEVBQUcsQ0FDVCxJQUFJd3pGLEVBQUtnRyxHQUFhNTVGLEVBQUc4SixFQUFHdTBCLEVBQU14aUIsR0FDbEM1YSxFQUFFd1UsS0FBT20rRSxPQUVUM3lGLEVBQUV5VSxNQUFRa2tGLEdBQWEvNEYsRUFBR2lKLEVBQUd1MEIsRUFBTXhpQixHQUVyQyxPQUFPMjlFLEdBQVV2NEYsR0M3MkJuQixJQ3pKSTQ0RixHQUFTLFNBQVVyNUYsRUFBRXM1RixHQUNqQixJQUFLLElBQUlod0YsS0FBS3RKLEVBQUtzNUYsRUFBSWh3RixJQWlFL0IsU0FBU2l3RixHQUFhQyxFQUFJQyxHQUN4QixPQUFZLENBQ1YsSUFBSTN4RixFQUFJMnhGLEVBQ0o1eEYsRUFBSTJ4RixFQUNSLEdBQUkzeEYsSUFBTUMsRUFDUixPQUFPLEVBRVQsSUFBSTR4RixTQUFnQjd4RixFQUNoQjh4RixTQUFnQjd4RixFQUNwQixPQUFRNHhGLEdBQ04sSUFBSyxVQUNELEdBQWUsWUFBWEMsRUFDRixPTHZFa0IzdkYsRUt1RXlCbEMsRUFBSEQsRUxyRTVDbUMsRUFDSyxFQUVBLEVBRUFBLEdBQ0QsRUFFRCxFSytERCxNQUNKLElBQUssV0FDRCxHQUFlLGFBQVgydkYsRUFDRixLQUFNLENBQ0EsRUFDQSw2QkFHUixNQUNKLElBQUssU0FDRCxHQUFlLFdBQVhBLEVBQ0YsT0FBTyxFQUFnQzl4RixFQUFHQyxHQUU1QyxNQUNKLElBQUssU0FDRCxNQUFlLFdBQVg2eEYsRUFDSyxFQUFtQzl4RixFQUFHQyxHQUV0QyxFQUViLElBQUssWUFDRCxPQUFRLEVBSWQsT0FBUTZ4RixHQUNOLElBQUssU0FDRCxPQUFRLEVBQ1osSUFBSyxZQUNELE9BQU8sRUFDWCxRQUNFLEdBQWUsWUFBWEQsRUFDRixPQUFPLEVBRVQsR0FBZSxZQUFYQyxFQUNGLE9BQVEsRUFFVixHQUFlLGFBQVhELEVBQ0YsT0FBTyxFQUVULEdBQWUsYUFBWEMsRUFDRixPQUFRLEVBRVYsR0FBZSxXQUFYRCxFQUNGLE9BQVUsT0FBTjV4RixHQUF3QixNQUFWQSxFQUFFN0IsSUFDWCxHQUVDLEVBR1osR0FBZSxXQUFYMHpGLEVBQ0YsT0FBVSxPQUFOOXhGLEdBQXdCLE1BQVZBLEVBQUU1QixLQUNWLEVBRUQsRUFHWCxHQUFVLE9BQU40QixFQUNGLE9BQWMsTUFBVkMsRUFBRTdCLElBQ0csR0FFQyxFQUdaLEdBQVUsT0FBTjZCLEVBQ0YsT0FBYyxNQUFWRCxFQUFFNUIsS0FDSSxFQUVELEVBR1gsSUFBSTJ6RixFQUFnQixFQUFSL3hGLEVBQUU1QixJQUNWNHpGLEVBQWdCLEVBQVIveEYsRUFBRTdCLElBQ2QsR0FBYyxNQUFWMnpGLEVBQWUsQ0FDakJKLEVBQUszeEYsRUFBRSxHQUNQLFNBRUYsR0FBYyxNQUFWZ3lGLEVBQWUsQ0FDakJKLEVBQUszeEYsRUFBRSxHQUNQLFNBRUYsR0FBYyxNQUFWOHhGLEVBQ0YsT0FBYyxNQUFWQyxFQUNLLEVBQWdDaHlGLEVBQUUsR0FBSUMsRUFBRSxLQUV2QyxFQUdaLEdBQWMsTUFBVjh4RixFQUNGLE9BQU8sRUFBZ0MveEYsRUFBRSxHQUFJQyxFQUFFLElBRWpELEdBQWMsTUFBVjh4RixFQUNGLEtBQU0sQ0FDQSxFQUNBLHlCQUdSLEdBQUlBLElBQVVDLEVBQ1osT0FBSUQsRUFBUUMsR0FDRixFQUVELEVBR1gsSUFBSUMsRUFBbUIsRUFBWGp5RixFQUFFakYsT0FDVm0zRixFQUFtQixFQUFYanlGLEVBQUVsRixPQUNkLEdBQUlrM0YsSUFBVUMsRUFBTyxDQUNuQixJQUFJNzJGLE1BQU1GLFFBQVE2RSxHQWNYLElBQUtBLGFBQWF3ckMsTUFBUXZyQyxhQUFhdXJDLEtBQzVDLE9BQVF4ckMsRUFBSUMsRUFFWixJQUFJa3lGLEVBQWMsQ0FDaEIzOEIsY0FBVS8zRCxHQUVSMjBGLEVBQWMsQ0FDaEI1OEIsY0FBVS8zRCxHQUVSNDBGLEVBQVMsU0FBVXRmLEVBQU85NUUsR0FDNUIsSUFBSXE1RixFQUFVdmYsRUFBTSxHQUNoQjl5RSxFQUFJOHlFLEVBQU0sR0FDZCxJQUFPOXlFLEVBQUUxRyxlQUFlTixJQUFReTRGLEdBQWEzZSxFQUFNLEdBQUc5NUUsR0FBTWdILEVBQUVoSCxJQUFRLEVBQXRFLENBR0EsSUFBSXM1RixFQUFLRCxFQUFROThCLFNBQ2pCLFlBQVcvM0QsSUFBUDgwRixHQUFvQnQ1RixHQUFPczVGLE9BQzdCLE9BRUFELEVBQVE5OEIsU0FBV3Y4RCxLQVNuQnU1RixFQUFZLFNBQVNDLEdBQ3pCLE9BQU8sU0FBa0IxZixHQUN2QixPQUFPc2YsRUFBT0ksRUFBYTFmLElBRmQsQ0FMYyxDQUMzQi95RSxFQUNBQyxFQUNBbXlGLElBWUVNLEVBQVksU0FBU0MsR0FDekIsT0FBTyxTQUFrQjVmLEdBQ3ZCLE9BQU9zZixFQUFPTSxFQUFlNWYsSUFGaEIsQ0FMZ0IsQ0FDN0I5eUUsRUFDQUQsRUFDQW15RixJQU9GWCxHQUFPeHhGLEVBQUd3eUYsR0FDVmhCLEdBQU92eEYsRUFBR3l5RixHQUNWLElBQUkvb0YsRUFBUXdvRixFQUFZMzhCLFNBQ3BCNjRCLEVBQVUrRCxFQUFZNThCLFNBQzFCLFlBQWMvM0QsSUFBVmtNLE9BQ2NsTSxJQUFaNHdGLEVBQ0ssRUFBbUMxa0YsRUFBTzBrRixJQUV6QyxPQUVXNXdGLElBQVo0d0YsRUFDRixFQUVBLEVBcEVULElBREEsSUFBSTNqRixFQUFLLElBQ0csQ0FDVixJQUFJaFQsRUFBSWdULEVBQ1IsR0FBSWhULElBQU11NkYsRUFDUixPQUFPLEVBRVQsSUFBSXZ2RSxFQUFNZ3ZFLEdBQWExeEYsRUFBRXRJLEdBQUl1SSxFQUFFdkksSUFDL0IsR0FBWSxJQUFSZ3JCLEVBQ0YsT0FBT0EsRUFFVGhZLEVBQUtoVCxFQUFJLEVBQUksUUE4RFosR0FBSXU2RixFQUFRQyxFQUVqQixJQURBLElBQUlVLEVBQU8sSUFDQyxDQUNWLElBQUlySyxFQUFNcUssRUFDVixHQUFJckssSUFBUTBKLEVBQ1YsT0FBUSxFQUVWLElBQUlZLEVBQVFuQixHQUFhMXhGLEVBQUV1b0YsR0FBTXRvRixFQUFFc29GLElBQ25DLEdBQWMsSUFBVnNLLEVBQ0YsT0FBT0EsRUFFVEQsRUFBT3JLLEVBQU0sRUFBSSxPQUtuQixJQURBLElBQUl1SyxFQUFPLElBQ0MsQ0FDVixJQUFJQyxFQUFNRCxFQUNWLEdBQUlDLElBQVFiLEVBQ1YsT0FBTyxFQUVULElBQUljLEVBQVF0QixHQUFhMXhGLEVBQUUreUYsR0FBTTl5RixFQUFFOHlGLElBQ25DLEdBQWMsSUFBVkMsRUFDRixPQUFPQSxFQUVURixFQUFPQyxFQUFNLEVBQUksSUx0UjdCLElBQThCNXdGLEVLOFI5QixTQUFTOHdGLEdBQVd0QixFQUFJQyxHQUN0QixPQUFZLENBQ1YsSUFBSTN4RixFQUFJMnhGLEVBQ0o1eEYsRUFBSTJ4RixFQUNSLEdBQUkzeEYsSUFBTUMsRUFDUixPQUFPLEVBRVQsSUFBSTR4RixTQUFnQjd4RixFQUNwQixHQUFlLFdBQVg2eEYsR0FBa0MsV0FBWEEsR0FBa0MsWUFBWEEsR0FBbUMsY0FBWEEsR0FBZ0MsT0FBTjd4RixFQUNsRyxPQUFPLEVBRVQsSUFBSTh4RixTQUFnQjd4RixFQUNwQixHQUFlLGFBQVg0eEYsR0FBb0MsYUFBWEMsRUFDM0IsS0FBTSxDQUNBLEVBQ0EsMkJBR1IsR0FBZSxXQUFYQSxHQUFrQyxjQUFYQSxHQUFnQyxPQUFON3hGLEVBQ25ELE9BQU8sRUFFVCxJQUFJOHhGLEVBQWdCLEVBQVIveEYsRUFBRTVCLElBQ1Y0ekYsRUFBZ0IsRUFBUi94RixFQUFFN0IsSUFDZCxHQUFjLE1BQVYyekYsRUFJSixHQUFjLE1BQVZDLEVBQUosQ0FJQSxHQUFjLE1BQVZELEVBQ0YsT0FBTy94RixFQUFFLEtBQU9DLEVBQUUsR0FFcEIsR0FBYyxNQUFWOHhGLEVBQ0YsS0FBTSxDQUNBLEVBQ0EseUJBR1IsR0FBSUEsSUFBVUMsRUFDWixPQUFPLEVBRVQsR0FBYyxNQUFWRCxFQUNGLE9BQU8veEYsRUFBRSxLQUFPQyxFQUFFLEdBRXBCLElBQUlneUYsRUFBbUIsRUFBWGp5RixFQUFFakYsT0FFZCxHQUFJazNGLEtBRG1CLEVBQVhoeUYsRUFBRWxGLFFBOENaLE9BQU8sRUE1Q1AsSUFBSU0sTUFBTUYsUUFBUTZFLEdBYVgsSUFBS0EsYUFBYXdyQyxNQUFRdnJDLGFBQWF1ckMsS0FDNUMsUUFBU3hyQyxFQUFJQyxHQUFLRCxFQUFJQyxHQUV0QixJQUFJNEssRUFBUyxDQUNYMnFELFVBQVUsR0FFUmc5QixFQUFZLFNBQVN2eUYsRUFBRTRLLEdBQzNCLE9BQU8sU0FBa0I1UixHQUNsQmdILEVBQUUxRyxlQUFlTixLQUNwQjRSLEVBQU8ycUQsVUFBVyxJQUhQLENBUWJ2MUQsRUFBRTRLLEdBQ0E2bkYsRUFBWSxTQUFTMXlGLEVBQUVDLEVBQUU0SyxHQUM3QixPQUFPLFNBQWtCNVIsR0FDbEIrRyxFQUFFekcsZUFBZU4sSUFBU2c2RixHQUFXaHpGLEVBQUVoSCxHQUFNK0csRUFBRS9HLE1BQ2xENFIsRUFBTzJxRCxVQUFXLElBSFAsQ0FRYngxRCxFQUFFQyxFQUFFNEssR0FLTixPQUpBMm1GLEdBQU94eEYsRUFBR3d5RixHQUNOM25GLEVBQU8ycUQsVUFDVGc4QixHQUFPdnhGLEVBQUd5eUYsR0FFTDduRixFQUFPMnFELFNBdkNkLElBREEsSUFBSTlxRCxFQUFLLElBQ0csQ0FDVixJQUFJaFQsRUFBSWdULEVBQ1IsR0FBSWhULElBQU11NkYsRUFDUixPQUFPLEVBRVQsSUFBS2dCLEdBQVdqekYsRUFBRXRJLEdBQUl1SSxFQUFFdkksSUFDdEIsT0FBTyxFQUVUZ1QsRUFBS2hULEVBQUksRUFBSSxRQS9CakJrNkYsRUFBSzN4RixFQUFFLFFBSlAweEYsRUFBSzN4RixFQUFFLElDeFNiLFNBQVNrekYsR0FBZWx6RixFQUFHQyxHQUN6QixPRHlaRixTQUF1QkQsRUFBR0MsR0FDeEIsT0FBT3l4RixHQUFhMXhGLEVBQUdDLEdBQUssRUMxWnhCLENBQXVCRCxFQUFHQyxHQUNOLFVBQ2IsR0FBb0JELEVBQUdDLElBQ1YsVUFFRyxVQzVCN0IsU0FBU2t6RixHQUFNbHhGLEdBQ2IsTUFBTyxDQUNDbXhGLGtCQUFtQm54RixFQUFFb3hGLFFBSS9CLFNBQVNDLEdBQVVyeEYsR0FDakIsTUFBTyxDQUNDbXhGLGtCQUFtQm54RixFQUFFb3hGLFFBYy9CLFNBQVMsR0FBTTN4RixHQUliLE1BQU8sQ0FDQzZ4RixhQUFjN3hGLEVBQUUwWixJQUNoQm80RSxpQkFMZSxTQUFVL3dGLEVBQUdoQixHQUNsQyxPQUFPLEVBQVNDLEVBQUUwWixJQUFLM1osRUFBR2dCLElBS3BCZ3hGLGlCQUFrQi94RixFQUFFZ1QsT0FJOUIsU0FBUyxHQUFNelMsR0FDYixJQUdJeXhGLEVBQWtCenhGLEVBQUUweEYsU0FXeEIsTUFBTyxDQUNDSixhQUFjdHhGLEVBQUVtWixJQUNoQm80RSxpQkFoQmUsU0FBVS93RixFQUFHaEIsR0FDbEMsT0FBTyxFQUFTUSxFQUFFbVosSUFBSzNaLEVBQUdnQixJQWdCcEJneEYsaUJBQWtCeHhGLEVBQUV5UyxNQUNwQmcvRSxnQkFBaUJBLEVBQ2pCRSxjQWZZLFNBQVUzeUYsRUFBSXdCLEdBQ2hDLE9BQU8sRUFBU1IsRUFBRTB4RixTQUFVbHhGLEVBQUd4QixJQWV6QjR5RixnQkFiYyxTQUFVcHhGLEVBQUdqQixFQUFHeEIsR0FDcEMsT0FBTyxFQUFTMHpGLEVBQWlCLEVBQVNqeEYsRUFBR3pDLEdBQUl3QixJQWEzQ3N5RixjQVhZLFNBQVVyeEYsRUFBR2pCLEVBQUd4QixHQUNsQyxJQUFJK3pGLEVBQU0sRUFBU3Z5RixFQUFHeEIsR0FDdEIsT0FBTyxFQUFTaUMsRUFBRTB4RixTQUFVSSxFQUFLdHhGLEtBd0JyQyxTQUFTdXhGLEdBQVl0eUYsR0FJbkIsTUFBTyxDQUNDdXlGLGlCQUFrQnZ5RixFQUFFKzhDLElBQ3BCODBDLGFBQWM3eEYsRUFBRTBaLElBQ2hCbzRFLGlCQU5lLFNBQVUvd0YsRUFBR2hCLEdBQ2xDLE9BQU8sRUFBU0MsRUFBRTBaLElBQUszWixFQUFHZ0IsSUFNcEJneEYsaUJBQWtCL3hGLEVBQUVnVCxPQUk5QixTQUFTLEdBQWEvUyxHQUlwQixNQUFPLENBQ0N1eUYsVUFBV3Z5RixFQUFFd3lGLFFBQ2JDLFdBTFMsU0FBVTV5RixFQUFHaUIsR0FDNUIsT0FBTyxFQUFTZCxFQUFFd3lGLFFBQVMxeEYsRUFBR2pCLEtBUWxDLFNBQVMsR0FBR3dCLEdBQ1YsTUFBTyxDQUNDcXhGLFlBQWFyeEYsRUFBRXN4RixJQUl6QixTQUFTLEdBQUkxeEYsR0FDWCxJQUFJMnhGLEVEbkVOLFNBQWtCM3hGLEdBYWhCLE1BQU8sQ0FDQzR4RixVQWJRLFNBQVV4MEYsRUFBR0MsR0FDM0IsT0FBb0QsWUFBN0MsRUFBUzJDLEVBQUVrMkMsUUFBUzk0QyxFQUFHQyxJQWF4QncwRixhQVhXLFNBQVV6MEYsRUFBR0MsR0FDOUIsT0FBdUQsWUFBaEQsRUFBUzJDLEVBQUVrMkMsUUFBUzk0QyxFQUFHQyxJQVd4QnkwRixtQkFUaUIsU0FBVTEwRixFQUFHQyxHQUNwQyxPQUF1RCxZQUFoRCxFQUFTMkMsRUFBRWsyQyxRQUFTOTRDLEVBQUdDLElBU3hCMDBGLHNCQVBvQixTQUFVMzBGLEVBQUdDLEdBQ3ZDLE9BQW9ELFlBQTdDLEVBQVMyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsS0N3RHZCLENBQTRCMkMsR0FDckMsTUFBTyxDQUNDZ3lGLGdCQUFpQkwsRUFBR0MsVUFDcEJLLGlCQUFrQk4sRUFBR0UsYUFDckJLLGNBQWVQLEVBQUdHLG1CQUNsQkssZUFBZ0JSLEVBQUdJLHVCQW1CN0IsU0FBU0ssR0FBZWh5RixHQUN0QixNQUFPLENBQ0NpeUYsZ0JBQWlCanlGLEVBQUUrN0IsSUFDbkJtMkQsZ0JBQWlCbHlGLEVBQUVteUYsU0FDbkJDLGVBQWdCcHlGLEVBQUVxeUYsU0FDbEJDLGlCQUFrQnR5RixFQUFFdXlGLE9BQ3BCQyxtQkFBb0J4eUYsRUFBRXlqQixRQ2pJaEMsU0FBU2d2RSxHQUFLaHpGLEVBQUd4QyxFQUFHRCxHQUNsQixPQUFPLEVBQVN5QyxFQUFHekMsRUFBR0MsR0FHeEIsU0FBU3kxRixHQUFRMTFGLEVBQUcreUUsR0FDbEIsT0FBTy95RSxFQXlCVCxTQUFTbTBGLEdBQVExeEYsRUFBR2pCLEVBQUdDLEdBQ3JCLE9BQU8sRUFBU2dCLEVBQUcsRUFBU2pCLEVBQUdDLElBR2pDLElBQUksR0FBZSxDQUNqQjB5RixRQUFTQSxJQU9YLElBQUl3QixHQUpKLFNBQVkzMUYsR0FDVixPQUFPQSxHQW1CRCxHQUE0QixJQUVqQm8wRixXQTRCbkIsSUFFSSxHQUZVLEdBQTRCLElDdkZ0QyxHQUFLLEdBRUxGLEdBQVksR0FBd0JBLFVBRXhDLFNBQVMsR0FBT3p4RixFQUFHakIsR0FDakIsTUFBaUIsQ0FBQyxFQUFTMHlGLEdBQVd6eEYsRUFBRSxHQUFJakIsRUFBRSxLQUdoRCxJQVVJLEdBQVMsQ0FDWDZ4RixPQUFRLEdBQ1JqMEIsTUFKb0IsQ0FBQyxLQ2ZuQixJRHNCVSxHQWZGLENBQ1ZpMEIsT0FBUSxLQ1JELElBRUwsR0FBWSxHQUF3QmEsVUFtQ3hDLFNBQVMsR0FBUTd6RixHQXFCZixNQUFPLENBQ0N1MUYsT0FyQkssU0FBVTl5RixHQUNyQixPQUFPLEVBQVN6QyxFQUFFK2EsS0FBSyxTQUFXMjNELEdBQ3BCLE9BQU8sUUFBMEJ0MUUsS0FDL0JxRixJQW1CVit5RixXQWpCUyxTQUFVNzFGLEVBQUc4MUYsR0FDNUIsT0FBTyxFQUFTejFGLEVBQUUrYSxLQUFLLFNBQVcyM0QsR0FDcEIsT0FBTyxHQUEwQi95RSxLQUMvQjgxRixJQWVWQyxVQWJRLFNBQVVqekYsRUFBSTdDLEdBQzVCLE9BQU8sRUFBU0ksRUFBRSthLEtBQUssU0FBVzIzRCxHQUNwQixPQUFPLEdBQTBCOXlFLEtBQy9CNkMsSUFXVmt6RixLQVRHLFNBQVVqakQsRUFBSS95QyxHQUN2QixPQUFPLEVBQVNLLEVBQUUrYSxLQUFLLFNBQVczWSxHQUNwQixPQUFPLEVBQVNBLEVBQUd6QyxLQUNqQit5QyxLQVVwQixTQUFTLEdBQU1yeEMsR0FDYixJQUFJYSxFQUFJLEdBQXFCYixHQUN6QnUwRixFQUFjLFNBQVVqMkYsRUFBR0MsR0FDN0IsT0FBTyxFQUFTc0MsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFZ3hGLGFBQWMsR0FBMkJ2ekYsR0FBSUMsSUFFMUZpMkYsRUFBZSxTQUFVbDJGLEVBQUdDLEdBQzlCLE9BQU8sRUFBU3NDLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWd4RixjQUFjLFNBQVd4Z0IsR0FDdEQsT0FBTyxHQUEwQixNQUMvQi95RSxHQUFJQyxJQTBCMUIsTUFBTyxDQUNDc0MsRUFBR0EsRUFDSDB6RixZQUFhQSxFQUNiQyxhQUFjQSxFQUNkQyxXQTVCUyxTQUFVbjJGLEVBQUdDLEdBQzVCLE9BQU8sRUFBU3NDLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWd4RixjQUFjLFNBQVc2QyxFQUFTQyxHQUMvRCxNQUFrQixDQUNWRCxFQUNBQyxLQUVOcjJGLEdBQUlDLElBdUJsQnEyRixNQXJCSSxTQUFVN3pGLEVBQUd6QyxFQUFHQyxHQUMxQixPQUFPLEVBQVNzQyxFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVneEYsYUFBYzl3RixFQUFHekMsR0FBSUMsSUFxQjlEczJGLE1BbkJJLFNBQVU5ekYsRUFBR3pDLEVBQUdDLEVBQUdsSSxHQUM3QixPQUFPLEVBQVN3SyxFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWd4RixhQUFjOXdGLEVBQUd6QyxHQUFJQyxHQUFJbEksSUFtQi9GeStGLE1BakJJLFNBQVUvekYsRUFBR3pDLEVBQUdDLEVBQUdsSSxFQUFHQyxHQUNoQyxPQUFPLEVBQVN1SyxFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFZ3hGLGFBQWM5d0YsRUFBR3pDLEdBQUlDLEdBQUlsSSxHQUFJQyxJQWlCaEl5K0YsTUFmSSxTQUFVaDBGLEVBQUd6QyxFQUFHQyxFQUFHbEksRUFBR0MsRUFBRzZCLEdBQ25DLE9BQU8sRUFBUzBJLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWd4RixhQUFjOXdGLEVBQUd6QyxHQUFJQyxHQUFJbEksR0FBSUMsR0FBSTZCLElBZWpLNjhGLE1BYkksQ0FDVkMsV0FBWVYsRUFDWlcsWUFBYVYsSUE2SmpCLFNBQVMsR0FBTWowRixHQUNiLElBQUlNLEVBQUksR0FBcUJOLEdBQ3pCNDBGLEVBQU0sR0FBcUI1MEYsR0FJM0I2MEYsRUFBUSxTQUFVdDlGLEVBQUdzSixHQUN2QixPQUFJdEosRUFDS3NKLEVBRUEsRUFBU2IsRUFBRTgwRixVQUFNdDVGLElBR3hCdTVGLEVBQVMsU0FBVXg5RixFQUFHc0osR0FDeEIsT0FBSXRKLEVBQ0ssRUFBU3lJLEVBQUU4MEYsVUFBTXQ1RixHQUVqQnFGLEdBaURYLE1BQU8sQ0FDQ1AsRUFBR0EsRUFDSGIsRUFoREEsQ0FDTmEsRUFBR3MwRixFQUNISSxPQW5CVyxTQUFVeDBGLEVBQUdLLEdBQ3hCLE9BQU8sRUFBUyt6RixFQUFJcEQsaUJBQWtCLEVBQVN4eEYsRUFBRTgwRixLQUFNdDBGLEdBQUlLLElBbUIzRGcwRixNQUFPQSxFQUNQRSxPQUFRQSxHQTZDRkUsUUEzQ00sU0FBVXAvRixHQUN0QixPQUFPLEVBQVN5SyxFQUFFbXhGLGdCQUFpQjU3RixFQUFHLEtBMkNoQ3EvRixnQkF6Q2MsU0FBVTEwRixFQUFHakIsRUFBR3hCLEdBQ3BDLE9BQU8sRUFBU3VDLEVBQUVteEYsZ0JBQWlCLEVBQVNqeEYsRUFBR3pDLEdBQUl3QixJQXlDN0M0MUYsd0JBdkNzQixTQUFVMzBGLEVBQUdqQixFQUFHeEIsR0FDNUMsT0FBTyxFQUFTdUMsRUFBRXF4RixjQUFlbnhGLEVBQUcsRUFBU2pCLEVBQUd4QixLQXVDMUNxM0YsS0FyQ0csU0FBVTc5RixFQUFHWixFQUFHNkosR0FDekIsT0FBTyxFQUFTRixFQUFFbXhGLGdCQUFpQmw2RixHQUFHLFNBQVc4OUYsR0FDbkMsT0FBSUEsRUFDSzErRixFQUVBNkosTUFpQ2pCODBGLE9BN0JLLFNBQVU5MEYsRUFBR0ssR0FDeEIsT0FBTyxFQUFTUCxFQUFFbXhGLGdCQUFpQjV3RixHQUFJLFNBQVcwMEYsR0FDcEMsT0FBTyxFQUFTdjFGLEVBQUU4MEYsS0FBTSxFQUFTdDBGLEVBQUcrMEYsUUE0QjVDQyxHQXpCQyxTQUFVaDFGLEVBQUdLLEdBQ3BCLE9BQU8sRUFBU1AsRUFBRW14RixnQkFBaUJqeEYsR0FBRyxTQUFXaTFGLEdBQ25DLE9BQU8sRUFBU24xRixFQUFFbXhGLGdCQUFpQjV3RixHQUFJLFNBQVcwMEYsR0FDcEMsT0FBTyxFQUFTdjFGLEVBQUU4MEYsS0FBTSxFQUFTVyxFQUFTRixXQXVCaEVWLE1BbkJNLFNBQVV0OUYsRUFBR3NKLEdBQ3pCLE9BQU8sRUFBU1AsRUFBRW14RixnQkFBaUJsNkYsR0FBRyxTQUFXODlGLEdBQ25DLE9BQU9SLEVBQU1RLEVBQVN4MEYsT0FrQjlCazBGLE9BZk8sU0FBVXg5RixFQUFHc0osR0FDMUIsT0FBTyxFQUFTUCxFQUFFbXhGLGdCQUFpQmw2RixHQUFHLFNBQVc4OUYsR0FDbkMsT0FBT04sRUFBT00sRUFBU3gwRixRQWlCekMsU0FBUyxHQUFTekMsR0FvSWhCLE1BQU8sQ0FDQ3MzRixVQXBJUSxTQUFVaDJGLEdBQ3hCLElBQUlpMkYsRUFBSyxFQUFTdjNGLEVBQUV3M0YsYUFBYyxJQUM5QnQxRixFQUFJLEdBQXFCWixHQUN6Qm0yRixFQUFlLFNBQVV0ekYsRUFBVy9CLEVBQUdLLEdBQ3pDLElBS0kwRyxFQUFLLEVBQVNvdUYsRUFBR0csVUFMUixTQUFVLzNGLEdBQ3JCLE1BQWlCLENBQUMsU0FBV2xJLEdBQ2pCLE9BQU8sRUFBU3lLLEVBQUU2d0Ysa0JBQW1CLEVBQVM3d0YsRUFBRTZ3RixrQkFBbUI1dUYsRUFBVyxFQUFTL0IsRUFBR3pDLElBQUtsSSxPQUd0RWdMLEdBQ3ZDLE9BQU8sRUFBUzBHLEVBQUcsR0FBSWhGLElBS3pCLE1BQU8sQ0FDQ296RixHQUFJQSxFQUNKcjFGLEVBQUdBLEVBQ0h1MUYsYUFBY0EsRUFDZEUsU0FQTyxTQUFVeHpGLEVBQVcxQixHQUNsQyxPQUFPZzFGLEVBQWF0ekYsRUFBVyxHQUFJMUIsTUF3SC9CbTFGLE9BL0dLLFNBQVVoMkYsR0FDckIsSUFBSTIxRixFQUFLLEVBQVN2M0YsRUFBRTYzRixTQUFVajJGLEdBQzFCTSxFQUFJLEdBQXFCTixHQUN6QmsyRixFQUFPLEVBQVNQLEVBQUdHLFNBQVUsSUFvQmpDLE1BQU8sQ0FDQ0gsR0FBSUEsRUFDSnIxRixFQUFHQSxFQUNINDFGLEtBQU1BLEVBQ05DLFlBdkJVLFNBQVVDLEVBQVdoMUUsR0FjckMsT0FBTyxFQUFTaGpCLEVBQUVpNEYsV0FiVCxTQUFVaFAsRUFBSzduRixHQUN0QixPQUFJNm5GLEVBQUkvRCxLQUNDLENBQ0NBLE1BQU0sRUFDTitELElBQUs3bkYsR0FHTixDQUNDOGpGLE1BQU0sRUFDTitELElBQUssRUFBUy9tRixFQUFFNndGLGtCQUFtQixFQUFTN3dGLEVBQUU2d0Ysa0JBQW1COUosRUFBSUEsSUFBSytPLEdBQVk1MkYsTUFJakUsQ0FDckI4akYsTUFBTSxFQUNOK0QsSUFBS3JuRixFQUFFbTlELE9BQ04vN0MsR0FBSWltRSxPQTJGYmlQLFlBbEZVLFNBQVU3MkYsR0FDMUIsSUFBSWEsRUFBSSxHQUFxQmIsR0FDekJ1MEYsRUFBYyxTQUFVajJGLEVBQUdDLEdBQzdCLE9BQU8sRUFBU3NDLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWd4RixhQUFjLEdBQTJCdnpGLEdBQUlDLElBRTFGaTJGLEVBQWUsU0FBVWwyRixFQUFHQyxHQUM5QixPQUFPLEVBQVNzQyxFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVneEYsY0FBYyxTQUFXeGdCLEdBQ3RELE9BQU8sR0FBMEIsTUFDL0IveUUsR0FBSUMsSUFxQ3RCdTRGLEVBQWlCLFNBQVUvMUYsRUFBR0ssR0FDaEMsT0FBTyxFQUFTekMsRUFBRW80RixXQUFZLEVBQVMsR0FBV3ZDLEVBQWN6ekYsR0FBSSxFQUFTZixFQUFFcTFGLFVBQU10NUYsR0FBWXFGLElBS25HLE1BQU8sQ0FDQ3l4RixHQWxCQyxDQUNQaHlGLEVBQUdBLEVBQ0gwekYsWUFBYUEsRUFDYkMsYUFBY0EsRUFDZEMsV0E1QmUsU0FBVW4yRixFQUFHQyxHQUM1QixPQUFPLEVBQVNzQyxFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVneEYsY0FBYyxTQUFXNkMsRUFBU0MsR0FDL0QsTUFBa0IsQ0FDVkQsRUFDQUMsS0FFTnIyRixHQUFJQyxJQXVCeEJxMkYsTUFyQlUsU0FBVTd6RixFQUFHekMsRUFBR0MsR0FDMUIsT0FBTyxFQUFTc0MsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFZ3hGLGFBQWM5d0YsRUFBR3pDLEdBQUlDLElBcUJwRXMyRixNQW5CVSxTQUFVOXpGLEVBQUd6QyxFQUFHQyxFQUFHbEksR0FDN0IsT0FBTyxFQUFTd0ssRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVneEYsYUFBYzl3RixFQUFHekMsR0FBSUMsR0FBSWxJLElBbUJyR3krRixNQWpCVSxTQUFVL3pGLEVBQUd6QyxFQUFHQyxFQUFHbEksRUFBR0MsR0FDaEMsT0FBTyxFQUFTdUssRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWd4RixhQUFjOXdGLEVBQUd6QyxHQUFJQyxHQUFJbEksR0FBSUMsSUFpQnRJeStGLE1BZlUsU0FBVWgwRixFQUFHekMsRUFBR0MsRUFBR2xJLEVBQUdDLEVBQUc2QixHQUNuQyxPQUFPLEVBQVMwSSxFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVreEYsaUJBQWtCLEVBQVNseEYsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFa3hGLGlCQUFrQixFQUFTbHhGLEVBQUVneEYsYUFBYzl3RixFQUFHekMsR0FBSUMsR0FBSWxJLEdBQUlDLEdBQUk2QixJQWV2SzY4RixNQWJVLENBQ1ZDLFdBQVlWLEVBQ1pXLFlBQWFWLElBcUJQc0MsZUFBZ0JBLEVBQ2hCRSxlQU5hLFNBQVU1MUYsR0FDN0IsT0FBTzAxRixFQUFlLEdBQUkxMUYsTUFrQ3RCNjFGLEtBMUJHLFNBQVVwNEYsR0FJbkIsTUFBTyxDQUNDcTRGLE9BSkssU0FBVTkxRixHQUNyQixPQUFPLEVBQVN6QyxFQUFFbzRGLFdBQVlsNEYsRUFBRWsrQyxJQUFLbCtDLEVBQUU2K0QsTUFBT3Q4RCxNQXlCMUMrMUYsTUFuQkksU0FBVTUyRixHQUNwQixJQUFJTSxFQUFJLEdBQXFCTixHQVE3QixNQUFPLENBQ0NNLEVBQUdBLEVBQ0h1MkYsV0FUUyxTQUFVcjJGLEVBQUd6QyxFQUFHOEMsR0FDL0IsT0FBTyxFQUFTekMsRUFBRWk0RixXQUFXLFNBQVdoUCxFQUFLN25GLEdBQy9CLE9BQU8sRUFBU2MsRUFBRW14RixnQkFBaUJwSyxHQUFLLFNBQVd2VyxHQUNyQyxPQUFPLEdBQXVCdHdFLEVBQUdoQixFQUFHc3hFLFFBRWhELEVBQVM5d0UsRUFBRTgwRixLQUFNLzJGLEdBQUk4QyxPQzljM0MsU0FBUyxHQUFnQnBCLEdBQ3ZCLElBQUlxM0YsRUFBb0IsR0FBeUJyM0YsR0FDN0NzM0YsRUFBT0QsRUFBa0J6QyxNQUN6QjJDLEVBQU9GLEVBQWtCeEMsTUFDekIyQyxFQUFPSCxFQUFrQnZDLE1BQ3pCMkMsRUFBT0osRUFBa0J0QyxNQTJDN0IsTUFBTyxDQUNDc0Msa0JBQW1CQSxFQUNuQkssV0FBWUwsRUFBa0I5QyxZQUM5Qm9ELFlBQWFOLEVBQWtCN0MsYUFDL0I4QyxLQUFNQSxFQUNOQyxLQUFNQSxFQUNOQyxLQUFNQSxFQUNOQyxLQUFNQSxFQUNORyxPQUFRUCxFQUFrQjVDLFdBQzFCb0QsT0FuREssU0FBVXoyRixFQUFJZ3pGLEVBQUkwRCxHQUM3QixPQUFPLEVBQVNQLEdBQU0sU0FBV2o1RixFQUFHQyxFQUFHbEksR0FDekIsTUFBa0IsQ0FDVmlJLEVBQ0FDLEVBQ0FsSSxLQUVOK0ssRUFBSWd6RixFQUFJMEQsSUE2Q2xCQyxPQTNDSyxTQUFVMzJGLEVBQUlnekYsRUFBSTBELEVBQUlFLEdBQ2pDLE9BQU8sRUFBU1IsR0FBTSxTQUFXbDVGLEVBQUdDLEVBQUdsSSxFQUFHQyxHQUM1QixNQUFrQixDQUNWZ0ksRUFDQUMsRUFDQWxJLEVBQ0FDLEtBRU44SyxFQUFJZ3pGLEVBQUkwRCxFQUFJRSxJQW9DdEJDLE9BbENLLFNBQVU3MkYsRUFBSWd6RixFQUFJMEQsRUFBSUUsRUFBSUUsR0FDckMsT0FBTyxFQUFTVCxHQUFNLFNBQVduNUYsRUFBR0MsRUFBR2xJLEVBQUdDLEVBQUc2QixHQUMvQixNQUFrQixDQUNWbUcsRUFDQUMsRUFDQWxJLEVBQ0FDLEVBQ0E2QixLQUVOaUosRUFBSWd6RixFQUFJMEQsRUFBSUUsRUFBSUUsSUEwQjFCQyxVQXhCUSxTQUFVcDNGLEVBQUdzd0UsR0FDM0IsT0FBTyxFQUFTaW1CLEVBQU12MkYsRUFBR3N3RSxFQUFNLEdBQUlBLEVBQU0sS0F3Qm5DK21CLFVBdEJRLFNBQVVyM0YsRUFBR3N3RSxHQUMzQixPQUFPLEVBQVNrbUIsRUFBTXgyRixFQUFHc3dFLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLEtBc0I3Q2duQixVQXBCUSxTQUFVdDNGLEVBQUdzd0UsR0FDM0IsT0FBTyxFQUFTbW1CLEVBQU16MkYsRUFBR3N3RSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLEtBb0J2RGluQixVQWxCUSxTQUFVdjNGLEVBQUdzd0UsR0FDM0IsT0FBTyxFQUFTb21CLEVBQU0xMkYsRUFBR3N3RSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sTUFxQjNFLFNBQVNrbkIsR0FBV3Y0RixHQUNsQixJQUFJcTNGLEVBQW9CLEdBQXlCcjNGLEdBQzdDMDNGLEVBQWFMLEVBQWtCOUMsWUFDL0JvRCxFQUFjTixFQUFrQjdDLGFBQ2hDOEMsRUFBT0QsRUFBa0J6QyxNQUN6QjJDLEVBQU9GLEVBQWtCeEMsTUFDekIyQyxFQUFPSCxFQUFrQnZDLE1BQ3pCMkMsRUFBT0osRUFBa0J0QyxNQTJDekJ5RCxFQUF5Qm5CLEVBQWtCNUMsV0FrQi9DLE1BQU8sQ0FDQ2dFLGdCQWxCYyxDQUNwQnBCLGtCQUFtQkEsRUFDbkJLLFdBQVlBLEVBQ1pDLFlBQWFBLEVBQ2JMLEtBQU1BLEVBQ05DLEtBQU1BLEVBQ05DLEtBQU1BLEVBQ05DLEtBQU1BLEVBQ05HLE9BQVFZLEVBQ1JYLE9BcERXLFNBQVV6MkYsRUFBSWd6RixFQUFJMEQsR0FDN0IsT0FBTyxFQUFTUCxHQUFNLFNBQVdqNUYsRUFBR0MsRUFBR2xJLEdBQ3pCLE1BQWtCLENBQ1ZpSSxFQUNBQyxFQUNBbEksS0FFTitLLEVBQUlnekYsRUFBSTBELElBOEN4QkMsT0E1Q1csU0FBVTMyRixFQUFJZ3pGLEVBQUkwRCxFQUFJRSxHQUNqQyxPQUFPLEVBQVNSLEdBQU0sU0FBV2w1RixFQUFHQyxFQUFHbEksRUFBR0MsR0FDNUIsTUFBa0IsQ0FDVmdJLEVBQ0FDLEVBQ0FsSSxFQUNBQyxLQUVOOEssRUFBSWd6RixFQUFJMEQsRUFBSUUsSUFxQzVCQyxPQW5DVyxTQUFVNzJGLEVBQUlnekYsRUFBSTBELEVBQUlFLEVBQUlFLEdBQ3JDLE9BQU8sRUFBU1QsR0FBTSxTQUFXbjVGLEVBQUdDLEVBQUdsSSxFQUFHQyxFQUFHNkIsR0FDL0IsTUFBa0IsQ0FDVm1HLEVBQ0FDLEVBQ0FsSSxFQUNBQyxFQUNBNkIsS0FFTmlKLEVBQUlnekYsRUFBSTBELEVBQUlFLEVBQUlFLElBMkJoQ0MsVUF6QmMsU0FBVXAzRixFQUFHc3dFLEdBQzNCLE9BQU8sRUFBU2ltQixFQUFNdjJGLEVBQUdzd0UsRUFBTSxHQUFJQSxFQUFNLEtBeUJ6QyttQixVQXZCYyxTQUFVcjNGLEVBQUdzd0UsR0FDM0IsT0FBTyxFQUFTa21CLEVBQU14MkYsRUFBR3N3RSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxLQXVCbkRnbkIsVUFyQmMsU0FBVXQzRixFQUFHc3dFLEdBQzNCLE9BQU8sRUFBU21tQixFQUFNejJGLEVBQUdzd0UsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxLQXFCN0RpbkIsVUFuQmMsU0FBVXYzRixFQUFHc3dFLEdBQzNCLE9BQU8sRUFBU29tQixFQUFNMTJGLEVBQUdzd0UsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLE1Bc0JqRTBnQixpQkFBa0IveEYsRUFBRWdULE1BQ3BCaWlGLFdBQVl5QyxFQUNaeEMsWUFBYXlDLEdDM0l2QixTQUFTLEdBQWdCcDNGLEdBQ3ZCLElBQUltNEYsRUFBb0IsR0FBeUJuNEYsR0FTakQsTUFBTyxDQUNDbTRGLGtCQUFtQkEsRUFDbkJDLFFBVk0sU0FBVTUzRixFQUFHeEIsR0FDekIsT0FBTyxFQUFTZ0IsRUFBRTB4RixTQUFVMXlGLEVBQUl3QixJQVUxQnkwRixRQVJNLFNBQVVvRCxHQUN0QixPQUFPLEVBQVNyNEYsRUFBRTB4RixTQUFVMkcsR0FBSyxTQUFXbjZGLEdBQzlCLE9BQU9BLE1BT2ZvNkYsZUFBZ0JILEVBQWtCakQsZ0JBQ2xDcUQsbUJBQW9CSixFQUFrQmhELHdCQUN0Q0csT0FBUTZDLEVBQWtCN0MsT0FDMUJULE1BQU9zRCxFQUFrQnRELE1BQ3pCRSxPQUFRb0QsRUFBa0JwRCxRQUlwQyxTQUFTeUQsR0FBV3g0RixHQUNsQixJQUFJbTRGLEVBQW9CLEdBQXlCbjRGLEdBQzdDbzRGLEVBQVUsU0FBVTUzRixFQUFHeEIsR0FDekIsT0FBTyxFQUFTZ0IsRUFBRTB4RixTQUFVMXlGLEVBQUl3QixJQU85QjgzRixFQUFpQkgsRUFBa0JqRCxnQkFDbkNxRCxFQUFxQkosRUFBa0JoRCx3QkFjM0MsTUFBTyxDQUNDc0QsZ0JBWGMsQ0FDcEJOLGtCQUFtQkEsRUFDbkJDLFFBQVNBLEVBQ1RuRCxRQWJZLFNBQVVvRCxHQUN0QixPQUFPLEVBQVNyNEYsRUFBRTB4RixTQUFVMkcsR0FBSyxTQUFXbjZGLEdBQzlCLE9BQU9BLE1BWXJCbzZGLGVBQWdCQSxFQUNoQkMsbUJBQW9CQSxFQUNwQmpELE9BVDJCNkMsRUFBa0I3QyxPQVU3Q1QsTUFUMEJzRCxFQUFrQnRELE1BVTVDRSxPQVQyQm9ELEVBQWtCcEQsUUFhdkN0RCxnQkFBaUJ6eEYsRUFBRTB4RixTQUNuQkMsY0FBZXlHLEVBQ2Z4RyxnQkFBaUIwRyxFQUNqQnpHLGNBQWUwRyxHQ3BEekIsU0FBUyxHQUFrQm42RixHQUN6QixJQUFJczZGLEVBQXNCLEdBQTJCdDZGLEdBSXJELE1BQU8sQ0FDQ3M2RixvQkFBcUJBLEVBQ3JCQyxRQUxNLFNBQVU5M0YsRUFBSUwsR0FDMUIsT0FBTyxFQUFTcEMsRUFBRSthLElBQUszWSxFQUFHSyxJQUtwQjh5RixPQUFRK0UsRUFBb0IvRSxPQUM1QmlGLFVBQVdGLEVBQW9COUUsV0FDL0JpRixTQUFVSCxFQUFvQjVFLFVBQzlCQyxLQUFNMkUsRUFBb0IzRSxNQUlwQyxTQUFTK0UsR0FBYTE2RixHQUNwQixJQUFJczZGLEVBQXNCLEdBQTJCdDZGLEdBQ2pEdTZGLEVBQVUsU0FBVTkzRixFQUFJTCxHQUMxQixPQUFPLEVBQVNwQyxFQUFFK2EsSUFBSzNZLEVBQUdLLElBRXhCKzNGLEVBQVlGLEVBQW9COUUsV0FDaENpRixFQUFXSCxFQUFvQjVFLFVBQy9CQyxFQUFPMkUsRUFBb0IzRSxLQVUvQixNQUFPLENBQ0NnRixrQkFUZ0IsQ0FDdEJMLG9CQUFxQkEsRUFDckJDLFFBQVNBLEVBQ1RoRixPQUoyQitFLEVBQW9CL0UsT0FLL0NpRixVQUFXQSxFQUNYQyxTQUFVQSxFQUNWOUUsS0FBTUEsR0FJQXpDLGFBQWNsekYsRUFBRSthLElBQ2hCbzRFLGlCQUFrQm9ILEVBQ2xCSyxPQUFRSixFQUNSSyxRQUFTSixFQUNUSyxlQUFnQm5GLEdDdEMxQixTQUFTb0YsR0FBc0IxNUYsR0FDN0IsSUFBSTI1RixFSnFPTixTQUFxQjM1RixHQUNuQixJQUFJYSxFQUFJLEdBQXFCYixHQWtCN0IsTUFBTyxDQUNDYSxFQUFHQSxFQUNIMDBGLE9BbkJLLFNBQVV4MEYsRUFBR0ssR0FDeEIsT0FBTyxFQUFTUCxFQUFFa3hGLGlCQUFrQixFQUFTL3hGLEVBQUVxMUYsS0FBTXQwRixHQUFJSyxJQW1CbkRnMEYsTUFqQkksU0FBVXQ5RixFQUFHc0osR0FDdkIsT0FBSXRKLEVBQ0tzSixFQUVBLEVBQVNwQixFQUFFcTFGLFVBQU10NUYsSUFjcEJ1NUYsT0FYSyxTQUFVeDlGLEVBQUdzSixHQUN4QixPQUFJdEosRUFDSyxFQUFTa0ksRUFBRXExRixVQUFNdDVGLEdBRWpCcUYsSUlyUG1CLENBQStCcEIsR0FDekQ2dkQsRUFBTSxTQUFVd2hCLEdBQ2xCLE9BQUlBLEVBQ0ssRUFBU3J4RSxFQUFFZ1QsTUFBTyxFQUFTaFQsRUFBRTBaLEtBQUssU0FBV3ZRLEVBQVF1WixHQUMxQyxNQUFlLENBQ1B2WixFQUNBdVosS0FFTjJ1RCxFQUFNLElBQUt4aEIsRUFBSXdoQixFQUFNLEtBRWxDLEVBQVNyeEUsRUFBRXExRixLQUFjLElBR3BDLE1BQU8sQ0FDQ3NFLHdCQUF5QkEsRUFDekJwRSxPQUFRb0UsRUFBd0JwRSxPQUNoQ0gsTUFBT3VFLEVBQXdCdkUsTUFDL0JFLE9BQVFxRSxFQUF3QnJFLE9BQ2hDemxDLElBQUtBLEdDZGYsU0FBUzMrQyxHQUFTNVMsR0FDaEIsT0FBT0EsRUFXVCxTQUFTLEdBQVF5QyxFQUFHakIsRUFBR3hCLEdBQ3JCLE9BQU8sRUFBU3lDLEVBQUcsRUFBU2pCLEVBQUd4QixJQUdqQyxTQUFTczdGLEdBQVk3NEYsRUFBR2pCLEVBQUd4QixHQUN6QixPQUFPLEVBQVN3QixFQUFHLEVBQVNpQixFQUFHekMsSUF3S2pDLElBQUksR0FBUSxDQUNWdTdGLFdBQVksR0FDWkMsYUFBY0YsSUMzRGhCLFNBQVNHLEdBQVlDLEVBQVF0UyxHQUMzQixPQUFZLENBQ1YsSUFBSUcsRUFBT0gsRUFDUHVTLEVBQVFELEVBQ1osSUFBS0MsRUFDSCxPQUFPcFMsRUFFVCxJQUFJeC9FLEVBQWUsQ0FDakI0eEYsRUFBTSxHQUNFLEdBRVZwUyxFQUFLLEdBQUt4L0UsRUFDVnEvRSxFQUFRci9FLEVBQ1IyeEYsRUFBU0MsRUFBTSxJQXNUbkIsU0FBU0MsR0FBUUMsRUFBSzFpRyxHQUNwQixLQUFJQSxFQUFJLEdBQVIsQ0FHQSxHQUFVLElBQU5BLEVBQ0YsTUFBa0IsQ0FDRixFQUNSMGlHLEdBR1YsR0FBS0EsRUFBTCxDQUdBLElBQUl4NUIsRUFBZSxDQUNqQnc1QixFQUFJLEdBQ0ksR0FFTnozRSxFQW5GTixTQUFvQjBuRSxFQUFJZ1EsRUFBTzFTLEdBQzdCLE9BQVksQ0FDVixJQUFJRyxFQUFPSCxFQUNQL21CLEVBQU95NUIsRUFDUDNpRyxFQUFJMnlGLEVBQ1IsR0FBVSxJQUFOM3lGLEVBQ0YsT0FBT2twRSxFQUVULElBQUtBLEVBQ0gsT0FFRixJQUFJMDVCLEVBQWlCLENBQ25CMTVCLEVBQUssR0FDRyxHQUVWa25CLEVBQUssR0FBS3dTLEVBQ1YzUyxFQUFRMlMsRUFDUkQsRUFBUXo1QixFQUFLLEdBQ2J5cEIsRUFBSzN5RixFQUFJLEVBQUksR0FpRUo2aUcsQ0FBVzdpRyxFQUFJLEVBQUksRUFBRzBpRyxFQUFJLEdBQUl4NUIsR0FDekMsWUFBYTVrRSxJQUFUMm1CLEVBQ2dCLENBQ1ZpK0MsRUFDQWorQyxRQUhWLElBU0YsU0FBUyxHQUFPZixFQUFJMGtFLEdBQ2xCLElBQUsxa0UsRUFDSCxPQUFPMGtFLEVBRVQsSUFBSTFsQixFQUFlLENBQ2pCaC9DLEVBQUcsR0FDSyxHQUdWLE9BREFvNEUsR0FBWXA0RSxFQUFHLEdBQUlnL0MsR0FBTSxHQUFLMGxCLEVBQ3ZCMWxCLEVBZVQsU0FBUyxHQUFJaC9DLEVBQUk1Z0IsR0FDZixPQWJGLFNBQWM0Z0IsRUFBSTVnQixHQUNoQixJQUFLNGdCLEVBQ0gsT0FBZSxFQUVqQixJQUFJZy9DLEVBQWUsQ0FDakI1L0QsRUFBRTRnQixFQUFHLElBQ0csR0FHVixPQWhPRixTQUF3QnE0RSxFQUFRdFMsRUFBTzNtRixHQUNyQyxPQUFZLENBQ1YsSUFBSThtRixFQUFPSCxFQUNQdVMsRUFBUUQsRUFDWixJQUFLQyxFQUNILE9BRUYsSUFBSTV4RixFQUFlLENBQ2pCdEgsRUFBRWs1RixFQUFNLElBQ0EsR0FFVnBTLEVBQUssR0FBS3gvRSxFQUNWcS9FLEVBQVFyL0UsRUFDUjJ4RixFQUFTQyxFQUFNLElBa05qQk0sQ0FBZTU0RSxFQUFHLEdBQUlnL0MsRUFBTTUvRCxHQUNyQjQvRCxFQUlBLENBQUtoL0MsRUFBSSxFQUFVNWdCLElBc0Y1QixTQUFTLEdBQU80Z0IsR0FHZCxJQUZBLElBQUk2NEUsRUFBSzc0RSxFQUNMZ21FLEVBQU8sSUFDQyxDQUdWLElBRFE2UyxFQUVOLE9BSFE3UyxFQUtWQSxFQUxVQSxFQUtHLEVBQUksRUFDakI2UyxFQUxRQSxFQUtELElBbUJYLFNBQVMsR0FBVWw4RixHQUdqQixJQUZBLElBQUkwSyxFQUFLMUssRUFBRWpGLE9BQVMsRUFBSSxFQUNwQm9oRyxFQUFlLElBQ1AsQ0FDVixJQUFJejVFLEVBQU15NUUsRUFDTnprRyxFQUFJZ1QsRUFDUixHQUFJaFQsRUFBSSxFQUNOLE9BQU9nckIsRUFFVHk1RSxFQUFlLENBQ2JuOEYsRUFBRXRJLEdBQ0ZnckIsR0FFRmhZLEVBQUtoVCxFQUFJLEVBQUksR0FLakIsU0FBUyxHQUFRK0osR0FDZixJQUFJNEUsRUFBTSxHQUFPNUUsR0FDYmdPLEVBQU0sSUFBSXBVLE1BQU1nTCxHQUVwQixPQXBDRixTQUFpQm9KLEVBQUsvRSxFQUFJd3hGLEdBQ3hCLE9BQVksQ0FDVixJQUFJejZGLEVBQUl5NkYsRUFDSnhrRyxFQUFJZ1QsRUFDUixJQUFLakosRUFDSCxPQUVGZ08sRUFBSS9YLEdBQUsrSixFQUFFLEdBQ1h5NkYsRUFBS3o2RixFQUFFLEdBQ1BpSixFQUFLaFQsRUFBSSxFQUFJLEdBMEJmMGtHLENBQVEzc0YsRUFBSyxFQUFHaE8sR0FDVGdPLEVBeUJULFNBQVMsR0FBUTlYLEdBQ2YsT0FqQkYsU0FBdUIwa0csRUFBS0MsR0FDMUIsT0FBWSxDQUNWLElBQUlqVSxFQUFLaVUsRUFDTGxVLEVBQUtpVSxFQUNULElBQUtqVSxFQUNILE9BQU9DLEVBRVRpVSxFQUFjLENBQ1psVSxFQUFHLEdBQ0hDLEdBRUZnVSxFQUFNalUsRUFBRyxJQU1KbVUsQ0FBYzVrRyxFQUFXLEdBNEhsQyxTQUFTLEdBQU9BLEVBQUc2MUYsRUFBTS9xRixHQUN2QixPQWRGLFNBQWlCKzVGLEVBQUlqUCxFQUFPOXFGLEdBQzFCLE9BQVksQ0FDVixJQUNJOUssRUFBSTZrRyxFQUNSLElBQUs3a0csRUFDSCxPQUhTNDFGLEVBS1hBLEVBQVE5cUYsRUFMRzhxRixFQUtLNTFGLEVBQUUsSUFDbEI2a0csRUFBSzdrRyxFQUFFLElBTUYsQ0FBUUEsRUFBRzYxRixFQUFNLEVBQVUvcUYsSUF3YXBDLFNBQVMsR0FBSzRnQixFQUFJN1AsR0FDaEIsT0FQRixTQUFlNlAsRUFBSTdQLEdBQ2pCLElBQUkvRCxFQUFNLEdBQVE0VCxHQUVsQixPQURBLEdBQW9DNVQsRUFBSytELEdBQ2xDLEdBQVUvRCxHQUlWZ3RGLENBQU1wNUUsRUFBSSxFQUFVN1AsSUNocUM3QixTQUFTLEdBQUlrcEYsRUFBS2o2RixHQUNoQixPQVJGLFNBQWNpNkYsRUFBS2o2RixHQUNqQixRQUFZaEYsSUFBUmkvRixFQUNGLE9BQU8sRUFBaUJqNkYsRUFBRSxFQUEwQmk2RixLQU0vQyxDQUFLQSxFQUFLLEVBQVVqNkYsSUNMN0IsU0FBUyxHQUFLekMsR0FDWixJQUFJckksRUFBSXFJLEVBQUVqRixPQUNWLE9BQVUsSUFBTnBELEVBQ0ssR0FFQSxFQUEwQnFJLEVBQUcsRUFBR3JJLEdBcUozQyxTQUFTZ2xHLEdBQVFobEcsR0FDZixJQUFLQSxFQUNILE1BQU8sR0FLVCxJQUhBLElBQUlxSSxFQUFJLEVBakJWLFNBQXFCdXRGLEVBQU9xUCxHQUMxQixPQUFZLENBQ1YsSUFDSXBQLEVBQU9ELEVBQ1gsSUFGWXFQLEVBR1YsT0FBT3BQLEVBRVRvUCxFQUxZQSxFQUtHLEdBQ2ZyUCxFQUFRQyxFQUFPLEVBQUksR0FTYXFQLENBQVksRUFBR2xsRyxHQUFJQSxFQUFFLElBQ25EK1MsRUFBSyxFQUNMa3lGLEVBQVNqbEcsRUFBRSxLQUNILENBQ1YsSUFBSW83RSxFQUFRNnBCLEVBQ1JsbEcsRUFBSWdULEVBQ1IsSUFBS3FvRSxFQUNILE9BQU8veUUsRUFFVEEsRUFBRXRJLEdBQUtxN0UsRUFBTSxHQUNiNnBCLEVBQVM3cEIsRUFBTSxHQUNmcm9FLEVBQUtoVCxFQUFJLEVBQUksR0FhakIsU0FBUyxHQUFXK0ssRUFBR3pDLEVBQUd5QixHQUV4QixJQURBLElBQUlqSixFQUFJaUosRUFDQS9KLEVBQUlzSSxFQUFFakYsT0FBUyxFQUFJLEVBQUdyRCxHQUFLLElBQUtBLEVBQ3RDYyxFQUFJLEVBQVNpSyxFQUFHekMsRUFBRXRJLEdBQUljLEdBRXhCLE9BQU9BLEVBbUVJLEVBQXVCLGdCQW9McEMsSUM5Y0ksR0RxQ0osU0FBZ0I4dEYsRUFBSUcsR0FDbEIsSUFBSTJCLEVBQUs5QixFQUFHdnJGLE9BQ1osT0FBVyxJQUFQcXRGLEVBQ0ssR0FBSzNCLEdBQ1csSUFBZEEsRUFBRzFyRixPQUNMLEVBQTBCdXJGLEVBQUksRUFBRzhCLEdBRWpDOUIsRUFBRzNzRSxPQUFPOHNFLElDeENqQixHRDRDSixTQUFhem1GLEVBQUcwb0YsRUFBS3JpRixHQUNuQixHQUFJcWlGLEVBQU0sR0FBS3JpRixFQUFNLEdBQUtxaUYsR0FBTzFvRixFQUFFakYsT0FBU3NMLEVBQU0sR0FDaEQsS0FBTSxDQUNBLEVBQ0EsYUFHUixPQUFPLEVBQTBCckcsRUFBRzBvRixFQUFLcmlGLElDckN2QyxHRG1GSixTQUFhNUQsRUFBR3pDLEdBQ2QsSUFBSXJJLEVBQUlxSSxFQUFFakYsT0FDVixHQUFVLElBQU5wRCxFQUNGLE1BQU8sR0FHVCxJQURBLElBQUlhLEVBQUksRUFBMEJiLEVBQUcsRUFBUzhLLEVBQUd6QyxFQUFFLEtBQzNDdEksRUFBSSxFQUFHQSxFQUFJQyxJQUFLRCxFQUN0QmMsRUFBRWQsR0FBSyxFQUFTK0ssRUFBR3pDLEVBQUV0SSxJQUV2QixPQUFPYyxHQ3hGTCxHRHFISixTQUFjaUssRUFBR3pDLEdBQ2YsSUFBSXJJLEVBQUlxSSxFQUFFakYsT0FDVixHQUFVLElBQU5wRCxFQUNGLE1BQU8sR0FHVCxJQURBLElBQUlhLEVBQUksRUFBMEJiLEVBQUcsRUFBUzhLLEVBQUcsRUFBR3pDLEVBQUUsS0FDOUN0SSxFQUFJLEVBQUdBLEVBQUlDLElBQUtELEVBQ3RCYyxFQUFFZCxHQUFLLEVBQVMrSyxFQUFHL0ssRUFBR3NJLEVBQUV0SSxJQUUxQixPQUFPYyxHQzVITCxHRGtMSixTQUFtQmlLLEVBQUdoQixFQUFHekIsR0FFdkIsSUFEQSxJQUFJeEgsRUFBSWlKLEVBQ0EvSixFQUFJLEVBQUdvbEcsRUFBVzk4RixFQUFFakYsT0FBUXJELEVBQUlvbEcsSUFBWXBsRyxFQUNsRGMsRUFBSSxFQUFTaUssRUFBR2pLLEVBQUd3SCxFQUFFdEksSUFFdkIsT0FBT2MsR0NyTEwsR0FBYSxHQVFiLEdEd01KLFNBQWlCZ0IsRUFBR3dHLEdBR2xCLElBRkEsSUFBSTdHLEVBQUk2RyxFQUFFakYsT0FDTjJQLEVBQUssSUFDRyxDQUNWLElBQUloVCxFQUFJZ1QsRUFDUixHQUFJaFQsSUFBTXlCLEVBQ1IsT0FBTyxFQUVULElBQUssRUFBU0ssRUFBR3dHLEVBQUV0SSxJQUNqQixPQUFPLEVBRVRnVCxFQUFLaFQsRUFBSSxFQUFJLElFeFBqQixTQUFTLEdBQU9xbEcsRUFBTUMsR0FDcEIsT0FBT0QsRUFBT0MsRUFHaEIsSUFRSSxHQUFTLENBQ1gzSixPQUFRLEdBQ1JqMEIsTUFBTyxJQWNMLEdBQUssQ0FDUGsxQixHQUhPLElBTUwsR0FBTSxDQUNSQSxHQVBPLEdBUVB4N0MsUUFBUyxJQVNQLEdBQVUsR0F2Q0YsQ0FDVnU2QyxPQUFRLEtBd0NOLEdBQVksR0FBa0IsSUFFOUIsR0FBWSxHQUFtQixJQUVMLEdBQVFELGtCQUVkLEdBQVVpQixZQUVOLEdBQVVPLGdCQUVULEdBQVVDLGlCQUViLEdBQVVDLGNBRVQsR0FBVUMsZUNoQ3JDLFNBQVMsR0FBSXR5RixFQUFHekMsR0FDZCxNQUFpQixDQUFDLEVBQVN5QyxFQUFHekMsRUFBRSxLQU9sQyxTQUFTLEdBQU15QyxFQUFHekMsR0FDaEIsTUFBaUIsQ0FBQyxFQUFTeUMsRUFBRSxHQUFJekMsRUFBRSxLQUdyQyxTQUFTLEdBQUtBLEdBQ1osTUFBaUIsQ0FBQ0EsR0ErR04sR0FsR0YsQ0FDVm9iLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLEdBQ05wRCxTQVJGLFNBQWtCM3pGLEVBQUd5QyxHQUNuQixPQUFPLEVBQVNBLEVBQUd6QyxFQUFFLE9DakRQLEdBQXdCazBGLFVBRXhDLFNBQVMsR0FBU2p5RixFQUFHNUIsR0FDbkIsSUFBSWtDLEVBQUksR0FBcUJOLEdBVzdCLE1BQU8sQ0FDQ00sRUFBR0EsRUFDSDA2RixzQkFab0IsU0FBVXg2RixFQUFHaEIsR0FDdkMsT0FBTyxFQUFTcEIsRUFBRWk0RixXQUFXLFNBQVdoUCxFQUFLN25GLEdBQy9CLE9BQU8sRUFBU2MsRUFBRTZ3RixrQkFBbUI5SixFQUFLLEVBQVM3bUYsRUFBR2hCLE1BQ3BEUSxFQUFFbTlELE1BQU8zOUQsSUFVbkJ5N0YsdUJBUnFCLFNBQVV6NkYsRUFBR2hCLEdBQ3hDLE9BQU8sRUFBU3BCLEVBQUVvNEYsWUFBWSxTQUFXaDNGLEVBQUc2bkYsR0FDOUIsT0FBTyxFQUFTL21GLEVBQUU2d0Ysa0JBQW1CLEVBQVMzd0YsRUFBR2hCLEdBQUk2bkYsS0FDbkRybkYsRUFBRW05RCxNQUFPMzlELEtBUzdCLFNBQVMsR0FBYVEsRUFBRzVCLEdBQ3ZCLElBQUlrQyxFQUFJLEdBQXlCTixHQVdqQyxNQUFPLENBQ0NNLEVBQUdBLEVBQ0gwNkYsc0JBWm9CLFNBQVV4NkYsRUFBR2hCLEdBQ3ZDLE9BQU8sRUFBU3BCLEVBQUVpNEYsV0FBVyxTQUFXaFAsRUFBSzduRixHQUMvQixPQUFPLEVBQVNjLEVBQUU2d0Ysa0JBQW1COUosRUFBSyxFQUFTN21GLEVBQUdoQixNQUNwRFEsRUFBRW05RCxNQUFPMzlELElBVW5CeTdGLHVCQVJxQixTQUFVejZGLEVBQUdoQixHQUN4QyxPQUFPLEVBQVNwQixFQUFFbzRGLFlBQVksU0FBV2gzRixFQUFHNm5GLEdBQzlCLE9BQU8sRUFBUy9tRixFQUFFNndGLGtCQUFtQixFQUFTM3dGLEVBQUdoQixHQUFJNm5GLEtBQ25Ecm5GLEVBQUVtOUQsTUFBTzM5RCxLQVM3QixTQUFTLEdBQWNsQixFQUFHRixHQUN4QixJZmVXcUIsRWVmUGEsRWZtQkcsQ0FDQ2d4RixjQUxHN3hGLEVlZmdCbkIsR2ZvQkg2YSxJQUNoQm80RSxpQkFMZSxTQUFVL3dGLEVBQUdoQixHQUNsQyxPQUFPLEVBQVNDLEVBQUUwWixJQUFLM1osRUFBR2dCLElBS3BCd3hGLGlCQUFrQnZ5RixFQUFFKzhDLEtlWDVCLE1BQU8sQ0FDQ2w4QyxFQUFHQSxFQUNIMDZGLHNCQVpvQixTQUFVeDZGLEVBQUdoQixHQUN2QyxPQUFPLEVBQVNwQixFQUFFaTRGLFdBQVcsU0FBV2hQLEVBQUs3bkYsR0FDL0IsT0FBTyxFQUFTYyxFQUFFMHhGLGlCQUFrQjNLLEVBQUssRUFBUzdtRixFQUFHaEIsTUFDbkRsQixFQUFFNitELE1BQU8zOUQsSUFVbkJ5N0YsdUJBUnFCLFNBQVV6NkYsRUFBR2hCLEdBQ3hDLE9BQU8sRUFBU3BCLEVBQUVvNEYsWUFBWSxTQUFXaDNGLEVBQUc2bkYsR0FDOUIsT0FBTyxFQUFTL21GLEVBQUUweEYsaUJBQWtCLEVBQVN4eEYsRUFBR2hCLEdBQUk2bkYsS0FDbEQvb0YsRUFBRTYrRCxNQUFPMzlELEtBb0M3QixTQUFTMDdGLEdBQVMvNUYsR0FJaEIsTUFBTyxDQUNDZzZGLGlCQUplLFNBQVUvNUUsR0FDL0IsT0FBTyxFQUFTamdCLEVBQUVpNkYsU0FBVSxHQUErQmg2RSxLQ25FL0QsSUNuQmMzaEIsR2pCZ0lFc0IsR2lCL0hWczZGLEdBcUJBQyxHQVFBbmlGLEdBQ0FvaUYsR0FHQS8rQyxHQUNBZy9DLEdBSUEvb0YsR0FLQWdwRixHQUlBM0csR0FHQXdCLEdBVUFNLEdBTUFQLEdBQ0FHLEdBS0FrRixHQVVBQyxHQVVBQyxHQVVBQyxHQU9BQyxHQVFBQyxHQXdGQUMsR0FRQUMsR0FJQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0FDQUMsR0QvTUYsSUNsQkVyQixHQUFXLFNBQVU3NkYsRUFBRzRnQixFQUFJMGtFLEdBSTlCLElBSEEsSUFFSWw5RSxFQUZBbFQsRUFBSSxFQUFTK0osR0FBRTNHLE9BQVFzb0IsR0FBTSxFQUFTM2hCLEdBQUUzRyxPQUFRZ3RGLEdBQU0sRUFBU3JtRixHQUFFM0csT0FBUXNvQixHQUFNLEVBQVMzaEIsR0FBRTNHLE9BQVFndEYsR0FDbEd2MUUsRUFBUSxFQUVKOWEsRUFBSSxFQUFHQSxFQUFJQyxJQUFLRCxFQUFFLENBQ3hCLElBQUlpQixFQUFRLEVBQVM4SixFQUFHLEVBQTBCNGdCLEVBQUkzckIsR0FBSSxFQUEwQnF3RixFQUFJcndGLFNBRTVFK0YsSUFERm9OLEVBRVIsRUFGUUEsRUFFdUIySCxFQUFPN1osR0FFdENrUyxFQUFTLEVBQVNuSixHQUFFazlGLEtBQU1qbkcsRUFBR2dCLEdBRS9CNlosRUFBUUEsRUFBUSxFQUFJLEVBR3RCLFlBQWMvVSxJQURGb04sSUFJSCxJQUdQMHlGLEdBQU0sU0FBVWw2RSxFQUFJMGtFLEdBQ3RCLE9BQU91VixJQUFTLFNBQVd0OUYsRUFBR0MsR0FDaEIsTUFBa0IsQ0FDVkQsRUFDQUMsS0FFTm9qQixFQUFJMGtFLElBRWxCM3NFLElBOUJRMVosR0RtQmUsQ0FDdkIzRyxPQXZCTixTQUFnQmdpRyxHQUNkLE9BQU9BLEVBQUtoaUcsUUF1QlI2akcsS0FwQkssRUFxQkx2TCxPQUFRLEdBQ1JqNEUsSUFwQkksR0FxQkp5akYsS0FuQk4sU0FBY3A4RixFQUFHZ04sR0FDZixPQUFPLElBQWlCLFNBQVcrQyxFQUFPM1ksR0FDNUIsT0FBTyxFQUFTNEksRUFBRzVJLEVBQUcyWSxLQUNwQi9DLElBaUJaNm9GLFVBZFUsR0FlVnZYLE1BYk0sR0FjTjN4RSxNQVpOLFNBQWVELEVBQU8ydkYsRUFBTXJ2RixHQUMxQixPQUFPLEdBQWdCQSxFQUFLTixFQUFPMnZGLEVBQU8zdkYsRUFBUSxNQ2N0Q2lNLElBQ1JvaUYsR0FBVSxDQUNacGlGLElBQUtBLElBRUhxakMsR0FBTS84QyxHQUFFMnhGLE9BQ1JvSyxHQUFNLENBQ1JyaUYsSUFBS0EsR0FDTHFqQyxJQUFLQSxJQU9IaS9DLEdBQVEsQ0FDVnRpRixJQUFLQSxHQUNMMUcsTUFQRUEsR0FBUSxTQUFVcXFGLEVBQVUvK0YsR0FDOUIsT0FBTyxFQUFTMEIsR0FBRTQyRixXQUFXLFNBQVdoUCxFQUFLN21GLEdBQy9CLE9BQU8sRUFBU2c4QyxHQUFLNnFDLEVBQUssRUFBU2x1RSxHQUFLM1ksRUFBR3pDLE1BQ3pDLEdBQUkrK0YsS0FTbEJ4RyxHQUFjLENBQ2hCbjlFLElBQUtBLEdBQ0wxRyxNQUFPQSxHQUNQcWlGLEtBTkVBLEdBQU8sU0FBVS8yRixHQUNuQixNQUFPLENBQUNBLEtBWU42NEYsR0FBUSxDQUNWejlFLElBQUtBLEdBQ0wxRyxNQUFPQSxHQUNQcWlGLEtBQU1BLEdBQ05wRCxTQVRhLFNBQVVseUYsRUFBR2dCLEdBQzFCLE9BQU8sRUFBU2YsR0FBRTQyRixXQUFXLFNBQVdoUCxFQUFLdHBGLEdBQy9CLE9BQU8sRUFBU3krQyxHQUFLNnFDLEVBQUssRUFBUzdtRixFQUFHekMsTUFDcEMsR0FBSXlCLEtBUWxCNjJGLEdBQVk1MkYsR0FBRTQyRixVQW9DZHdGLEdBQVcsQ0FDYnhGLFVBQVdBLEdBQ1hHLFdBckNFQSxHQUFhLFNBQVVoMkYsRUFBRzhpRixHQUM1QixPQUFPLFNBQVd4UyxHQUNkLE9BQU8sR0FBdUJ0d0UsRUFBR3N3RSxFQUFPd1MsS0FvQzVDMlMsU0FqQ0V5RixHQUFvQixTQUFVcUIsR0FNaEMsTUFBTyxDQUNDakgsU0FOVSxHQUNFaUgsRUFBUSxDQUN0QjFHLFVBQVdBLEdBQ1hHLFdBQVlBLEtBR0V3RSx3QkEyQnBCcEYsYUF4QkUrRixHQUF3QixTQUFVb0IsR0FNcEMsTUFBTyxDQUNDakgsU0FOVSxHQUNFaUgsRUFBUSxDQUN0QjFHLFVBQVdBLEdBQ1hHLFdBQVlBLEtBR0V3RSx3QkFrQnBCZ0MsY0FmRXBCLEdBQXlCLFNBQVVtQixHQU1yQyxNQUFPLENBQ0NqSCxTQU5VLEdBQ0VpSCxFQUFRLENBQ3RCMUcsVUFBV0EsR0FDWEcsV0FBWUEsS0FHRXdFLHlCQWtCbEJlLEdBQWEsQ0FDZkQsT0FURUEsR0FBUyxTQUFVdDdGLEVBQUc4aUYsR0FDeEIsSUFBSTU3RSxFQUFRLEVBQVNsSCxFQUFHOGlGLEdBQ3hCLFlBQWM5bkYsSUFBVmtNLEVBQ0ssRUFBUzgwQyxHQUFLLENBQUM5MEMsRUFBTSxJQUFLbzBGLEdBQU90N0YsRUFBR2tILEVBQU0sS0FFMUMsS0EyRlBzMEYsR0FBWSxDQUNkaUIsS0FKUyxTQUFVejhGLEVBQUdzd0UsR0FDdEIsT0FBTyxFQUFTMzNELEdBQUszWSxLQVVuQnk3RixHQUFTLENBQ1g5aUYsSUFBS0EsR0FDTHpMLE9BUFcsU0FBVWxOLEVBQUc0Z0IsR0FDeEIsT0FBTyxFQUFTM2hCLEdBQUVtOUYsTUFBTSxTQUFXOXJCLEVBQU9yN0UsR0FDNUIsT0FBTyxFQUFTK0ssRUFBRyxFQUFTZixHQUFFME4sTUFBTzFYLEVBQUcsRUFBU2dLLEdBQUUzRyxPQUFRc29CLEdBQUtBLE1BQzlEQSxLQU1kODZFLEdBQVUsR0FBcUJ0RixJQUMvQnVGLEdqQnZGRyxDQUNDZSxlQUxNbjhGLEdpQjJGd0JrN0YsSWpCdEZidnVGLE9BQ2pCeXZGLGdCQUxjLFNBQVVwL0YsRUFBR3lDLEdBQ2pDLE9BQU8sRUFBU08sR0FBRTJNLE9BQVFsTixFQUFHekMsS2lCMEYzQnErRixHQUEyQkYsR0FBUTVLLGFBQ25DK0ssR0FBeUJILEdBQVEzSyxpQkFDakMrSyxHQUF5QkosR0FBUTFLLGlCQUNqQytLLEdBQXdCTCxHQUFRekssZ0JBQ2hDK0ssR0FBc0JOLEdBQVF2SyxjQUM5QjhLLEdBQXdCUCxHQUFRdEssZ0JBQ2hDOEssR0FBc0JSLEdBQVFySyxjQWMzQixDQUNDd0osU0FBVUEsR0FDVkMsSUFBS0EsR0FDTEMsUUFBU0EsR0FDVEMsSUFBS0EsR0FDTEMsTUFBT0EsR0FDUG5GLFlBQWFBLEdBQ2JNLE1BQU9BLEdBQ1BpRixTQUFVQSxHQUNWRSxXQUFZQSxHQUNacUIsWUFqSVUsU0FBVTM5RixHQUMxQixJQUFJYSxFQUFJLEdBQXFCYixHQUN6QjI3RixFQUFXLFNBQVU1NkYsR0FDdkIsSUFBSXJILEVBQU0sRUFBU3NHLEVBQUVxMUYsS0FBTSxJQUMzQixPQUFPLFNBQVdoa0IsR0FDZCxPQUFPLElBQXVCLFNBQVd1VyxFQUFLN25GLEdBQ2hDLE9BQU8sRUFBU2MsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFa3hGLGlCQUFrQixFQUFTL3hGLEVBQUVxMUYsTUFBTSxTQUFXdDFGLEVBQUdVLEdBQzFFLE9BQU8sRUFBU3M4QyxHQUFLLENBQUNoOUMsR0FBSVUsTUFDdkIsRUFBU00sRUFBRzZtRixJQUFPN25GLEtBQzFDc3hFLEVBQU8zM0UsS0FHekIyRyxFQUFJLEdBQTBCLENBQzVCczdGLFNBQVVBLElBRWhCLE1BQU8sQ0FDQ2ppRixJQUFLQSxHQUNMazlFLFVBQVdBLEdBQ1hHLFdBQVlBLEdBQ1pQLFNBQVV5RixHQUNWOUYsYUFBYytGLEdBQ2RxQixjQUFlcEIsR0FDZlIsU0FBVUEsRUFDVi83QixTQUFVdi9ELEVBQUVxN0YsbUJBMkdka0MsR0F4R0MsU0FBVXQ4RixHQVVqQixNQUFPLENBQ0NzeEYsR0FWQyxTQUFVanhFLEVBQUkwa0UsR0FDckIsT0FBSSxFQUFTcm1GLEdBQUUzRyxPQUFRc29CLEtBQVEsRUFBUzNoQixHQUFFM0csT0FBUWd0RixJQUN6QyxFQUFTcm1GLEdBQUVxL0UsT0FBTyxTQUFXaE8sR0FDdEIsT0FBTyxFQUFTL3ZFLEVBQUVzeEYsR0FBSXZoQixFQUFNLEdBQUlBLEVBQU0sTUFDcEN3cUIsR0FBSWw2RSxFQUFJMGtFLE9Bb0d0QndYLElBM0ZFLFNBQVUzOEYsR0EyQmxCLE1BQU8sQ0FDQzB4RixHQTNCQyxTQUFVanhFLEVBQUkwa0UsR0FDckIsT0FBSSxFQUFTcm1GLEdBQUUzRyxPQUFRc29CLEtBQVEsRUFBUzNoQixHQUFFM0csT0FBUWd0RixJQUN6QyxFQUFTcm1GLEdBQUVxL0UsT0FBTyxTQUFXaE8sR0FDdEIsT0FBTyxFQUFTbndFLEVBQUUweEYsR0FBSXZoQixFQUFNLEdBQUlBLEVBQU0sTUFDcEN3cUIsR0FBSWw2RSxFQUFJMGtFLEtBd0JwQmp2QyxRQW5CTSxTQUFVejFCLEVBQUkwa0UsR0FDMUIsR0FBSSxFQUFTcm1GLEdBQUUzRyxPQUFRc29CLEtBQVEsRUFBUzNoQixHQUFFM0csT0FBUWd0RixHQUNoRCxPQUFJLEVBQVNybUYsR0FBRTNHLE9BQVFzb0IsR0FBTSxFQUFTM2hCLEdBQUUzRyxPQUFRZ3RGLEdBQ3hCLFVBRUcsVUFHN0IsSUFBSXYxRSxFQUFRLENBQ1ZnakQsU0FBVSxHQUVaLE9BQU8sRUFBUzl6RCxHQUFFNDJGLFdBQVcsU0FBV2hQLEVBQUt6dkYsR0FDL0IsSUFBSWdSLEdBQWdDLFlBQXZCeStFLEVBQW1DQSxFQUFNLEVBQVMxbUYsRUFBRWsyQyxRQUFTai9DLEVBQUcsRUFBMEJrdUYsRUFBSXYxRSxFQUFNZ2pELFdBRWpILE9BREFoakQsRUFBTWdqRCxTQUFXaGpELEVBQU1nakQsU0FBVyxFQUFJLEVBQy9CM3FELEtBQ1UsVUFBV3dZLE1BbUV0Q204RSxLQTVERyxTQUFVNzlGLEdBQ25CLElBQ0lNLEVBQUksRUFEQSxHQUE0QjY3RixJQUNqQjdGLE9BQVEsSUFJM0IsTUFBTyxDQUNDd0gsS0FKRyxTQUFVcDhFLEdBQ25CLE1BQU8sSUFBTyxFQUFTcGhCLEVBQUVtMkYsWUFBYSxLQUFNLEVBQVNoOUUsR0FBS3paLEVBQUU4OUYsS0FBTXA4RSxJQUFPLE9BeURyRTQ2RSxVQUFXQSxHQUNYQyxPQUFRQSxHQUNSeEgsTUEzQkksQ0FDVm5ELGFBQWM4SyxHQUNkN0ssaUJBQWtCOEssR0FDbEI3SyxpQkFBa0I4SyxHQUNsQjdLLGdCQUFpQjhLLEdBQ2pCNUssY0FBZTZLLEdBQ2Y1SyxnQkFBaUI2SyxHQUNqQjVLLGNBQWU2SyxHQUNmUSxjQVZ3QmYsR0FBVWUsY0FXbENDLGdCQVYwQmhCLEdBQVVnQixtQkRsTXBDLEdBQVUsR0FBRTVCLFFBRVosR0FBTSxHQUFFQyxJQUVSLEdBQVEsR0FBRUMsTUFJVixHQUFRLEdBQUU3RSxNQUVWLEdBQVcsR0FBRWlGLFNBSWIsR0FBYyxHQUFFdUIsWUFRaEIsR0FBWSxHQUFFcEIsVUFFZCxHQUFTLEdBQUVDLE9FaEVmLFNBQVMsR0FBR3dCLEVBQU1DLEVBQUtDLEVBQUlDLEdBQ3pCLE9BQU8sRUFBU0YsRUFBSyxFQUFTRCxFQUFNRSxHQUFLLEVBQVNGLEVBQU1HLElBTzFELFNBQVMsR0FBT0YsRUFBS3JaLEVBQUlHLEdBQ3ZCLE9BQVEsRUFBU2taLEVBQUtyWixFQUFJRyxHQ1I1QixTQUFTLEdBQWE2WSxHQUNwQixJQUtJUSxFQUFRLFNBQVUvc0IsRUFBT2dULEdBQzNCLE9BQU8sR0FBaUJ1WixFQUFHaEwsR0FBSXZoQixFQUFPZ1QsSUFheEMsTUFBTyxDQUNDZ2EsaUJBcEJlLFNBQVVMLEdBQy9CLE9BQU8sU0FBVzNzQixFQUFPZ1QsR0FDckIsT0FBTyxHQUFhMlosRUFBTUosRUFBR2hMLEdBQUl2aEIsRUFBT2dULEtBbUJ0QytaLE1BQU9BLEVBQ1BFLFdBQVlGLEVBQ1pHLFdBZlMsQ0FDZjNMLEdBQUl3TCxHQWVFSSxLQWJHLFNBQVV4K0YsR0FJbkIsTUFBTyxDQUNDNHlGLEdBSkMsU0FBVXNMLEVBQUlDLEdBQ3JCLE9BQU8sRUFBU1AsRUFBR2hMLEdBQUksRUFBUzV5RixFQUFFZSxFQUFHbTlGLEdBQUssRUFBU2wrRixFQUFFZSxFQUFHbzlGLFFDZDlELFNBQVMsR0FBR0gsRUFBTVMsRUFBVVAsRUFBSUMsR0FDOUIsT0FBTyxFQUFTTSxFQUFVLEVBQVNULEVBQU1FLEdBQUssRUFBU0YsRUFBTUcsSUFTL0QsU0FBUyxHQUFRL21ELEVBQVN3dEMsRUFBSUcsR0FDNUIsSUFBSTk4RSxFQUFRLEVBQVNtdkMsRUFBU3d0QyxFQUFJRyxHQUNsQyxPQUFjLFlBQVY5OEUsRUFDRUEsR0FBUyxVQUNjLFdBRUgsVUFHRixVQUkxQixTQUFTeTJGLEdBQWV0bkQsRUFBUzk0QyxFQUFHQyxHQUNsQyxJQUFJMEosRUFBUSxFQUFTbXZDLEVBQVM5NEMsRUFBR0MsR0FDakMsT0FBYyxZQUFWMEosRUFDRUEsR0FBUyxXQUNILEVBRUQsRUFHRixFQVFYLFNBQVMsR0FBTW12QyxFQUFTOTRDLEVBQUdDLEdBRXpCLE9BQWMsWUFERixFQUFTNjRDLEVBQVM5NEMsRUFBR0MsR0FFeEJELEVBRUFDLEVBUVgsU0FBUyxHQUFNNjRDLEVBQVM5NEMsRUFBR0MsR0FFekIsT0FEWSxFQUFTNjRDLEVBQVM5NEMsRUFBR0MsSUFDcEIsVUFDSkEsRUFFQUQsRUFRWCxTQUFTcWdHLEdBQVd2bkQsRUFBUzk0QyxFQUFHQyxHQUM5QixPQUFrRCxZQUEzQyxFQUFTNjRDLEVBQVM5NEMsRUFBR0MsR0FPOUIsU0FBU3FnRyxHQUFleG5ELEVBQVM5NEMsRUFBR0MsR0FDbEMsT0FBcUQsWUFBOUMsRUFBUzY0QyxFQUFTOTRDLEVBQUdDLEdBTzlCLFNBQVNzZ0csR0FBY3puRCxFQUFTOTRDLEVBQUdDLEdBQ2pDLE9BQXFELFlBQTlDLEVBQVM2NEMsRUFBUzk0QyxFQUFHQyxHQU85QixTQUFTdWdHLEdBQWtCMW5ELEVBQVM5NEMsRUFBR0MsR0FDckMsT0FBa0QsWUFBM0MsRUFBUzY0QyxFQUFTOTRDLEVBQUdDLEdBRzlCLFNBQVMsR0FBZ0J3Z0csRUFBS3pnRyxFQUFHQyxHQUMvQixPQUFPdWdHLEdBQWtCQyxFQUFJM25ELFFBQVM5NEMsRUFBR0MsR0FHM0MsU0FBU3lnRyxHQUFRNW5ELEVBQVNqNUIsRUFBSzVCLEVBQUs5ZCxHQUNsQyxPQUFPLEdBQU0yNEMsRUFBUzc2QixFQUFLLEdBQU02NkIsRUFBU2o1QixFQUFLMWYsSUFPakQsU0FBU3dnRyxHQUFVN25ELEVBQVNqNUIsRUFBSzVCLEVBQUs5ZCxHQUNwQyxRQUFJcWdHLEdBQWtCMW5ELEVBQVMzNEMsRUFBRzBmLElBQ3pCeWdGLEdBQWV4bkQsRUFBUzM0QyxFQUFHOGQsR0FVdEMsU0FBUyxHQUFJd2lGLEVBQUtHLEVBQU1uL0YsR0FDdEIsT0FBSSxHQUFnQmcvRixFQUFLaC9GLEVBQUdtL0YsRUFBS0MsTUFDeEJwL0YsRUFFQSxFQUFTbS9GLEVBQUt2TCxTQUFVdUwsRUFBS0MsS0FBTXAvRixHQUk5QyxTQUFTLEdBQU9nL0YsRUFBS0csRUFBTW4vRixHQUN6QixPQUFJLEdBQWdCZy9GLEVBQUtoL0YsRUFBR20vRixFQUFLQyxNQUN4QkQsRUFBS3hqQyxJQUVMLEVBQVN3akMsRUFBS3ZMLFNBQVV1TCxFQUFLQyxLQUFNRCxFQUFLeGpDLEtDakluRCxTQUFTLEdBQWN4NkQsR0FDckIsSUFLSWsrRixFQUFrQixTQUFVL3RCLEVBQU9nVCxHQUNyQyxPQUFPLEdBQW1CbmpGLEVBQUVrMkMsUUFBU2k2QixFQUFPZ1QsSUFnQjFDZ2IsRUFBVyxTQUFVL2dHLEVBQUdDLEdBQzFCLE9BQU8sR0FBc0IyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsSUFFekMrZ0csRUFBZSxTQUFVaGhHLEVBQUdDLEdBQzlCLE9BQU8sR0FBMEIyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsSUFFN0NnaEcsRUFBYyxTQUFVamhHLEVBQUdDLEdBQzdCLE9BQU8sR0FBeUIyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsSUFFNUNpaEcsRUFBa0IsU0FBVWxoRyxFQUFHQyxHQUNqQyxPQUFPLEdBQTZCMkMsRUFBRWsyQyxRQUFTOTRDLEVBQUdDLElBb0JoRGtoRyxFQUFhLFNBQVVDLEVBQVdwaEcsR0FDcEMsT0FBTyxHQUFzQjRDLEVBQUVrMkMsUUFBUzk0QyxFQUFHb2hHLElBRXpDQyxFQUFpQixTQUFVRCxFQUFXcGhHLEdBQ3hDLE9BQU8sR0FBMEI0QyxFQUFFazJDLFFBQVM5NEMsRUFBR29oRyxJQUU3Q0UsRUFBZ0IsU0FBVUYsRUFBV3BoRyxHQUN2QyxPQUFPLEdBQXlCNEMsRUFBRWsyQyxRQUFTOTRDLEVBQUdvaEcsSUFFNUNHLEVBQW9CLFNBQVVILEVBQVdwaEcsR0FDM0MsT0FBTyxHQUE2QjRDLEVBQUVrMkMsUUFBUzk0QyxFQUFHb2hHLElBdUJwRCxNQUFPLENBQ0NJLHNCQXRGb0IsU0FBVTlCLEdBQ3BDLE9BQU8sU0FBVzNzQixFQUFPZ1QsR0FDckIsT0FBTyxHQUFjMlosRUFBTTk4RixFQUFFazJDLFFBQVNpNkIsRUFBT2dULEtBcUYzQythLGdCQUFpQkEsRUFDakJXLFlBL0VVLENBQ2hCbk4sR0FGbUIxeEYsRUFBRTB4RixHQUdyQng3QyxRQUFTZ29ELEdBOEVIWSxhQTVFVyxTQUFVMWhHLEVBQUdDLEdBQzlCLE9BQU8sR0FBMEIyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsSUE0RXpDNGYsSUExRUUsU0FBVTdmLEVBQUdDLEdBQ3JCLE9BQU8sR0FBaUIyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsSUEwRWhDZ2UsSUF4RUUsU0FBVWplLEVBQUdDLEdBQ3JCLE9BQU8sR0FBaUIyQyxFQUFFazJDLFFBQVM5NEMsRUFBR0MsSUF3RWhDOGdHLFNBQVVBLEVBQ1Y5WCxHQUFJOFgsRUFDSkMsYUFBY0EsRUFDZFcsSUFBS1gsRUFDTEMsWUFBYUEsRUFDYlcsR0FBSVgsRUFDSkMsZ0JBQWlCQSxFQUNqQlcsSUFBS1gsRUFDTFksTUFsRUksU0FBVWppRixFQUFLNUIsRUFBSzlkLEdBQzlCLE9BQU8sR0FBbUJ5QyxFQUFFazJDLFFBQVNqNUIsRUFBSzVCLEVBQUs5ZCxJQWtFekM0aEcsUUFoRU0sU0FBVWxpRixFQUFLNUIsRUFBSzlkLEdBQ2hDLE9BQU8sR0FBcUJ5QyxFQUFFazJDLFFBQVNqNUIsRUFBSzVCLEVBQUs5ZCxJQWdFM0M2aEcsa0JBOURnQixTQUFVOWdHLEdBT2hDLE1BQU8sQ0FDQ21zQyxJQVBFLFNBQVVsdEMsR0FDbEIsT0FBTyxHQUFleUMsRUFBRzFCLEVBQUdmLElBT3RCOGhHLE9BTEssU0FBVTloRyxHQUNyQixPQUFPLEdBQWtCeUMsRUFBRzFCLEVBQUdmLE1BMEQzQitoRyxTQXZDTyxDQUNibkIsU0FBVUksRUFDVkgsYUFBY0ssRUFDZEosWUFBYUssRUFDYkosZ0JBQWlCSyxFQUNqQnRZLEdBQUlrWSxFQUNKUSxJQUFLTixFQUNMTyxHQUFJTixFQUNKTyxJQUFLTixHQWdDQ1ksTUE5QkksU0FBVXpnRyxHQU1wQixNQUFPLENBQ0M0eUYsR0FMUSxFQURGLEdBQWtDMXhGLEdBQ2ZzOUYsS0FBTXgrRixHQUtqQjR5RixHQUNkeDdDLFFBTE0sU0FBVThtRCxFQUFJQyxHQUMxQixPQUFPLEVBQVNqOUYsRUFBRWsyQyxRQUFTLEVBQVNwM0MsRUFBRWUsRUFBR205RixHQUFLLEVBQVNsK0YsRUFBRWUsRUFBR285RixRQzdEbEUsU0FBU3VDLEdBQWtCLzdGLEdBQ3pCLEdBQUlBLEVBQU0sRUFDUixLQUFNLENBQ0EsRUFDQSxpQkFJUixJQURBLElBQUl3RSxFQUFTLElBQUl4UCxNQUFNZ0wsR0FDZjNPLEVBQUksRUFBR0EsRUFBSTJPLElBQU8zTyxFQUN4Qm1ULEVBQU9uVCxHQUFpQixFQUUxQixPQUFPbVQsRUFHVCxTQUFTdzNGLEdBQWdCM2EsRUFBSTZDLEVBQUk1QyxFQUFJMkMsRUFBSWprRixHQUN2QyxLQUFJQSxHQUFPLEdBR1gsR0FBSXFoRixJQUFPQyxFQUFYLENBcUJBLElBQUkyYSxFQUFPNWEsRUFBRzNzRixPQUFTd3ZGLEVBQUssRUFDNUIsR0FBSWxrRixHQUFPaThGLEVBQ1QsSUFBSSxJQUFJNXFHLEVBQUksRUFBR0EsRUFBSTJPLElBQU8zTyxFQUN4Qml3RixFQUFHMkMsRUFBSzV5RixFQUFJLEdBQUtnd0YsRUFBRzZDLEVBQUs3eUYsRUFBSSxPQUZqQyxDQU1BLElBQUksSUFBSTZ3RixFQUFNLEVBQUdBLEVBQU0rWixJQUFRL1osRUFDN0JaLEVBQUcyQyxFQUFLL0IsRUFBTSxHQUFLYixFQUFHNkMsRUFBS2hDLEVBQU0sR0FFbkMsSUFBSSxJQUFJd0ssRUFBTXVQLEVBQU12UCxFQUFNMXNGLElBQU8wc0YsRUFDL0JwTCxFQUFHMkMsRUFBS3lJLEVBQU0sR0FBaUIsT0FoQ2pDLENBQ0UsR0FBSXhJLEVBQUtELEVBQUksQ0FJWCxJQUhBLElBQUlpWSxHQUFXN2EsRUFBRzNzRixPQUFTdXZGLEVBQUssR0FBSyxFQUFJLEVBQ3JDa1ksRUFBVW44RixFQUFNLEVBQUksRUFFaEJxSixFQURJNnlGLEVBQVVDLEVBQVVBLEVBQVVELEVBQ3ZCN3lGLEdBQUssSUFBS0EsRUFDM0JnNEUsRUFBRzRDLEVBQUs1NkUsRUFBSSxHQUFLZzRFLEVBQUc2QyxFQUFLNzZFLEVBQUksR0FFL0IsT0FFRixHQUFJNjZFLEdBQU1ELEVBQ1IsT0FLRixJQUhBLElBQUltWSxHQUFhL2EsRUFBRzNzRixPQUFTd3ZGLEVBQUssR0FBSyxFQUFJLEVBQ3ZDbVksRUFBWXI4RixFQUFNLEVBQUksRUFDdEJzOEYsRUFBVUYsRUFBWUMsRUFBWUEsRUFBWUQsRUFDMUN2Z0csRUFBSSxFQUFHQSxHQUFLeWdHLElBQVd6Z0csRUFDN0J3bEYsRUFBRzRDLEVBQUtwb0YsRUFBSSxHQUFLd2xGLEVBQUc2QyxFQUFLcm9GLEVBQUksSUFvQm5DLFNBQVMwZ0csR0FBZ0I1aUcsR0FDdkIsSUFDSXFHLEVBQU1yRyxFQUFFakYsT0FDUnRCLEVBQUksR0FDSm9wRyxFQUFReDhGLEVBQ1osR0FBZUEsR0FBTyxNQUFRQSxJQUFRckcsRUFBRWpGLE9BQ3RDLE9BQU9aLE9BQU9DLGFBQWFzYSxNQUFNLEtBQU0xVSxHQUd6QyxJQURBLElBQUlpWCxFQUFTLEVBQ1A0ckYsRUFBUSxHQUFHLENBQ2YsSUFBSTk0RixFQUFPODRGLEVBQVEsS0FBT0EsRUFBUSxLQUM5QkMsRUFBWSxJQUFJem5HLE1BQU0wTyxHQUMxQnM0RixHQUFnQnJpRyxFQUFHaVgsRUFBUTZyRixFQUFXLEVBQUcvNEYsR0FDekN0USxHQUFRVSxPQUFPQyxhQUFhc2EsTUFBTSxLQUFNb3VGLEdBQ3hDRCxFQUFRQSxFQUFROTRGLEVBQU8sRUFDdkJrTixFQUFTQSxFQUFTbE4sRUFBTyxFQUUzQixPQUFPdFEsRUF1QlQsU0FBU3NwRyxHQUFnQnRwRyxHQUd2QixJQUZBLElBQUk0TSxFQUFNNU0sRUFBRXNCLE9BQ1IybkIsRUFBTSxJQUFJcm5CLE1BQU1nTCxHQUNaM08sRUFBSSxFQUFHQSxFQUFJMk8sSUFBTzNPLEVBQ3hCZ3JCLEVBQUlockIsR0FBSytCLEVBQUUwRixXQUFXekgsR0FFeEIsT0FBT2dyQixFQ3pIVCxTQUFTc2dGLEdBQUl2aEcsRUFBR1UsR0FDZCxHQUFVLElBQU5BLEVBQ0YsTUFBTSxFQUVSLE9BQU9WLEVBQUlVLEVBQUksRUFHakIsU0FBUzhnRyxHQUFLeGhHLEVBQUdVLEdBQ2YsR0FBVSxJQUFOQSxFQUNGLE1BQU0sRUFFUixPQUFPVixFQUFJVSxFQVdiLElBQUkrZ0csR0FBUWxsRixLQUFLa2xGLE1BQVEsU0FBVXpoRyxFQUFFVSxHQUMzQixRQUFXVixHQUFLLEtBQXhCVSxHQUFLLElBQStCLEtBQVcsTUFBSlYsR0FBY1UsRUFBRyxHQ3JCOUQsU0FBU2doRyxHQUFZcHJHLEdBQ25CLE9BQUlBLEdBQUssR0FDSEEsR0FBSyxHQUNIQSxHQUFLLEtBQ0MsRUFFREEsRUFBSSxHQUFLLEVBRVRBLEdBQUssSUFDTixFQUVEQSxFQUFJLEdBQUssRUFFVEEsRUFBSSxJQUFNQSxFQUFJLElBQ2YsRUFFREEsRUFBYSxHQUFLLEVBSTdCLFNBQVNxckcsR0FBbUJyd0IsR0FDMUIsT0FBUUEsR0FDTixLQUFjLEVBQ1YsT0FBTyxFQUNYLEtBQWMsRUFDVixPQUFPLEdBQ1gsS0FBYyxFQUNWLE9BQU8sR0FDWCxLQUFjLEVBQ1YsT0FBTyxHQUtmLFNBQVNzd0IsR0FBb0I1cEcsR0FDM0IsSUFBSW90QixFQUFPLEVBQ1AwckQsRUFBZ0IsRUFDaEI3NkUsRUFBSSxFQUVSLE9BRFkrQixFQUFFMEYsV0FBV3pILElBRXZCLEtBQUssR0FDREEsRUFBSUEsRUFBSSxFQUFJLEVBQ1osTUFDSixLQUFLLEdBQ0QsTUFDSixLQUFLLEdBQ0RtdkIsR0FBUSxFQUNSbnZCLEVBQUlBLEVBQUksRUFBSSxFQUtsQixHQUFhLE1BQVQrQixFQUFFL0IsR0FBWSxDQUNoQixJQUFJMjJGLEVBQVU1MEYsRUFBRTBGLFdBQVd6SCxFQUFJLEVBQUksR0FDbkMsR0FBSTIyRixHQUFXLEdBQ2IsR0FBSUEsR0FBVyxLQUNiLEdBQUlBLEVBQVUsSUFDWixPQUFRQSxFQUFVLElBQU0sR0FDdEIsS0FBSyxFQUNEOWIsRUFBZ0IsRUFDaEI3NkUsRUFBSUEsRUFBSSxFQUFJLEVBQ1osTUFDSixLQUFLLEVBQ0RBLEVBQUlBLEVBQUksRUFBSSxFQUNaLE1BQ0osS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNELE1BQ0osS0FBSyxFQUNENjZFLEVBQWdCLEVBQ2hCNzZFLEVBQUlBLEVBQUksRUFBSSxRQU1DLEtBQVoyMkYsSUFDVDliLEVBQWdCLEVBQ2hCNzZFLEVBQUlBLEVBQUksRUFBSSxRQUdULEdBQWdCLEtBQVoyMkYsR0FDVCxHQUFJQSxHQUFXLEdBQ2IsT0FBUUEsRUFBVSxHQUFLLEdBQ3JCLEtBQUssRUFDRDliLEVBQWdCLEVBQ2hCNzZFLEVBQUlBLEVBQUksRUFBSSxFQUNaLE1BQ0osS0FBSyxFQUNEQSxFQUFJQSxFQUFJLEVBQUksRUFDWixNQUNKLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDRCxNQUNKLEtBQUssRUFDRDY2RSxFQUFnQixFQUNoQjc2RSxFQUFJQSxFQUFJLEVBQUksUUFPcEI2NkUsRUFBZ0IsRUFDaEI3NkUsRUFBSUEsRUFBSSxFQUFJLEVBR2hCLE1BQWtCLENBQ1ZBLEVBQ0FtdkIsRUFDQTByRCxHQUlWLFNBQVMrd0IsR0FBbUI3cEcsR0FDMUIsSUFBSWtRLEVBQVEwNUYsR0FBb0I1cEcsR0FDNUIvQixFQUFJaVMsRUFBTSxHQUNWNG9FLEVBQU82d0IsR0FBbUJ6NUYsRUFBTSxJQUVoQ3RELEVBQU01TSxFQUFFc0IsT0FFUi9DLEVBQUltckcsR0FEQXpyRyxFQUFJMk8sRUFBTTVNLEVBQUUwRixXQUFXekgsR0FBaUIsR0FFaEQsR0FBSU0sRUFBSSxHQUFLQSxHQUFLdTZFLEVBQ2hCLEtBQU0sQ0FDQSxFQUNBLGlCQUdSLElBK0JJN3ZELEVBQU0vWSxFQUFNLEdBL0JOLFNBQVUwL0UsRUFBTWthLEdBQ3hCLE9BQVksQ0FDVixJQUFJcmhHLEVBQUlxaEcsRUFDSmphLEVBQU1ELEVBQ1YsR0FBSW5uRixJQUFNbUUsRUFDUixPQUFPaWpGLEVBRVQsSUFBSXRwRixFQUFJdkcsRUFBRTBGLFdBQVcrQyxHQUNyQixHQUFtQixLQUFmbEMsRUFBSixDQUlBLElBQUlHLEVBQUlnakcsR0FBWW5qRyxHQUNwQixHQUFJRyxFQUFJLEdBQUtBLEdBQUtveUUsRUFDaEIsS0FBTSxDQUNBLEVBQ0EsaUJBR1IsSUFBSWl4QixFQUFRanhCLEVBQU8rVyxFQUFNbnBGLEVBQ3pCLEdBQUlxakcsRUE5QlEsV0ErQlYsS0FBTSxDQUNBLEVBQ0EsaUJBR1JELEVBQUtyaEcsRUFBSSxFQUFJLEVBQ2JtbkYsRUFBT21hLE9BbEJMRCxFQUFLcmhHLEVBQUksRUFBSSxHQXNCRXVoRyxDQUFJenJHLEVBQUdOLEVBQUksRUFBSSxHQUNoQ2dzRyxFQUFlLEVBQU5oaEYsRUFDYixHQUFhLEtBQVQ2dkQsR0FBZTd2RCxJQUFRZ2hGLEVBQ3pCLEtBQU0sQ0FDQSxFQUNBLGlCQUdSLE9BQU9BLEVDM0pFLEVBQXVCLG1CQWlJbEMsU0FBU0MsR0FBSXZiLEVBQUlDLEdBQ2YsT0FBSUQsRUFDYSxDQUNQQSxFQUFHLEdBQ0h1YixHQUFJdmIsRUFBRyxHQUFJQyxJQUdaQSxFQ0ZYLFNBQVMsR0FBUXRWLEdBQ2YsT0FBSUEsRUFDSyxHQUFlQSxFQUFNLEdBQUksR0FBUUEsRUFBTSxLQUUvQixFQUluQixTQUFTLEdBQUl0d0UsRUFBR3N3RSxHQUNkLE9BQUtBLEVBSVUsQ0FEUCxFQUFTdHdFLEVBQUdzd0UsRUFBTSxJQUdsQixHQUFJdHdFLEVBQUdzd0UsRUFBTSxLQUxKLEVBc0VuQixTQUFTLEdBQVV0d0UsRUFBRzhxRixFQUFPaVAsR0FDM0IsT0FBWSxDQUNWLElBQUk3a0csRUFBSTZrRyxFQUNKaFAsRUFBT0QsRUFDWCxJQUFLNTFGLEVBQ0gsT0FBTzYxRixFQUVUZ1AsRUFBSzdrRyxFQUFFLEdBQ1A0MUYsRUFBUSxFQUFTOXFGLEVBQUcrcUYsRUFBTTcxRixFQUFFLEtBdTFDaEMsSUFBSSxHQUFTLEdBRVQsR0FBUyxHQzdrRGIsU0FBU2lzRyxHQUFXanJHLEVBQU8rc0IsR0FDekIsT0FBTyxHQUFvQixDQUNmQSxFQUNRLENBQ0UsQ0FDTi9zQixFQUNRLEdBRUYsS0FLeEIsU0FBU2tyRyxHQUFlN2dHLEdBbUd0QixNQUFPLENBQ0M4Z0csYUFuR1csU0FBVTMwRixFQUFPc3FCLEdBR2xDLElBRkEsSUFBSTR2RCxFQUFlLEVBQ2YwYSxFQUFXNTBGLElBQ0gsQ0FDVixJQUFJckwsRUFBVWlnRyxFQUNWemEsRUFBTUQsRUFDTjEvRSxFQUFRLEVBQVMzRyxFQUFFODFDLFFBQVNoMUMsRUFBUzIxQixHQUN6QyxHQUFjLFlBQVY5dkIsRUFBSixDQVlBLElBQUlzTSxFQUFPLEVBQVNqVCxFQUFFZ2hHLEtBQU1sZ0csR0FDNUIsUUFBYXJHLElBQVR3WSxFQUNGLE9BQU8ydEYsR0FBVzkvRixFQUFTd2xGLEdBRTdCeWEsRUFBVyxFQUEwQjl0RixHQUNyQ296RSxFQUFPdWEsR0FBVzkvRixFQUFTd2xGLE9BakIzQixDQUNFLEdBQUkzL0UsRUFBUSxVQUNWLE9BQU9pNkYsR0FBVzkvRixFQUFTd2xGLEdBRTdCLElBQUl2L0UsRUFBTyxFQUFTL0csRUFBRWloRyxLQUFNbmdHLEdBQzVCLFFBQWFyRyxJQUFUc00sRUFDRixPQUFPNjVGLEdBQVc5L0YsRUFBU3dsRixHQUU3QnlhLEVBQVcsRUFBMEJoNkYsR0FDckNzL0UsRUFBT3VhLEdBQVc5L0YsRUFBU3dsRixNQW9GekI0YSxhQXhFVyxTQUFVLzBGLEdBQzNCLElBQUlwRixFQUFPLEVBQVMvRyxFQUFFaWhHLEtBQU05MEYsR0FDNUIsUUFBYTFSLElBQVRzTSxFQWVGLE9BQWUsRUFaZixJQUZBLElBQUlzL0UsRUFBZSxFQUNmMGEsRUFBVyxFQUEwQmg2RixLQUM3QixDQUNWLElBQUlqRyxFQUFVaWdHLEVBQ1Z6YSxFQUFNRCxFQUNOOGEsRUFBUyxFQUFTbmhHLEVBQUVpaEcsS0FBTW5nRyxHQUM5QixRQUFlckcsSUFBWDBtRyxFQUNGLE9BQU9QLEdBQVc5L0YsRUFBU3dsRixHQUU3QnlhLEVBQVcsRUFBMEJJLEdBQ3JDOWEsRUFBT3VhLEdBQVc5L0YsRUFBU3dsRixLQTREekI4YSxzQkFyRG9CLFNBQVVqMUYsR0FHcEMsSUFGQSxJQUFJazZFLEVBQWUsRUFDZjBhLEVBQVc1MEYsSUFDSCxDQUNWLElBQUlyTCxFQUFVaWdHLEVBQ1Z6YSxFQUFNRCxFQUNOdC9FLEVBQU8sRUFBUy9HLEVBQUVpaEcsS0FBTW5nRyxHQUM1QixRQUFhckcsSUFBVHNNLEVBQ0YsT0FBTzY1RixHQUFXOS9GLEVBQVN3bEYsR0FFN0J5YSxFQUFXLEVBQTBCaDZGLEdBQ3JDcy9FLEVBQU91YSxHQUFXOS9GLEVBQVN3bEYsS0EyQ3ZCK2EsZUF2Q2EsU0FBVWwxRixHQUM3QixJQUFJcEYsRUFBTyxFQUFTL0csRUFBRWdoRyxLQUFNNzBGLEdBQzVCLFFBQWExUixJQUFUc00sRUFlRixPQUFlLEVBWmYsSUFGQSxJQUFJcy9FLEVBQWUsRUFDZjBhLEVBQVcsRUFBMEJoNkYsS0FDN0IsQ0FDVixJQUFJakcsRUFBVWlnRyxFQUNWemEsRUFBTUQsRUFDTnB6RSxFQUFPLEVBQVNqVCxFQUFFZ2hHLEtBQU1sZ0csR0FDNUIsUUFBYXJHLElBQVR3WSxFQUNGLE9BQU8ydEYsR0FBVzkvRixFQUFTd2xGLEdBRTdCeWEsRUFBVyxFQUEwQjl0RixHQUNyQ296RSxFQUFPdWEsR0FBVzkvRixFQUFTd2xGLEtBMkJ6QmdiLHdCQXBCc0IsU0FBVW4xRixHQUd0QyxJQUZBLElBQUlrNkUsRUFBZSxFQUNmMGEsRUFBVzUwRixJQUNILENBQ1YsSUFBSXJMLEVBQVVpZ0csRUFDVnphLEVBQU1ELEVBQ05wekUsRUFBTyxFQUFTalQsRUFBRWdoRyxLQUFNbGdHLEdBQzVCLFFBQWFyRyxJQUFUd1ksRUFDRixPQUFPMnRGLEdBQVc5L0YsRUFBU3dsRixHQUU3QnlhLEVBQVcsRUFBMEI5dEYsR0FDckNvekUsRUFBT3VhLEdBQVc5L0YsRUFBU3dsRixNQzVHakMsU0FBUyxHQUFXM3dGLEVBQU8rc0IsR0FDekIsT0FBTyxHQUFvQixDQUNmQSxFQUNRLENBQ0UsQ0FDTi9zQixFQUNRLEdBRUYsS0NOeEIsU0FBUzRyRyxHQUFRN3NHLEdBQ2YsT0FBSUEsRUFBSSxFQUNnQixVQUNQLElBQU5BLEdBQ2EsVUFFRyxVQUk3QixTQUFTOHNHLEdBQU16eEIsR0FDYixPQUFjLFlBQVZBLEVBQ0VBLEdBQVMsV0FDSCxFQUVELEVBR0YsRUFnQlgsU0FBUyxHQUFHL3lFLEVBQUdDLEdBQ2IsT0FBT0QsSUFBTUMsRUFHZixJQUlJLEdBQVUsR0FKTCxDQUNQcTBGLEdBQUksS0FLTixTQUFTLEdBQVFtUSxFQUFJQyxHQUNuQixPQUFXLFlBQVBELEVBQ0VBLEdBQU0sVUFDSkMsR0FBTSxXQUNjLFVBRUEsVUFFUixZQUFQQSxFQUNMQSxHQUFNLFVBQ2lCLFdBRUgsVUFHRixVQUVSLFlBQVBBLEVBQ2dCLFdBRUgsVUFJMUIsSUFLSSxHQUFZLEdBTE4sQ0FDUnBRLEdBQUksR0FDSng3QyxRQUFTLEtBY1gsU0FBU2tyRCxHQUFLanhCLEdBQ1osT0FBYyxZQUFWQSxFQUNFQSxHQUFTLGVBQ1gsRUFFc0IsV0FHRixVQUkxQixTQUFTLEdBQUtBLEdBQ1osR0FBYyxZQUFWQSxFQUNGLE9BQUlBLEdBQVMsV0FDVyxVQUVHLFVBTS9CLElBT0ksR0FBWSxHQVBMLENBQ1R1aEIsR0FBSSxHQUNKeDdDLFFBQVMsR0FDVG1yRCxLQUFNLEdBQ05ELEtBQU1BLEtBU1IsSUFZSSxHRHpISixTQUErQmhoRyxHQTJCN0IsTUFBTyxDQUNDMmhHLGlCQTNCZSxTQUFVeDFGLEVBQU9wRixFQUFNMHZCLEdBTzVDLElBTkEsSUFBSW1yRSxFQUFXLEVBQVM1aEcsRUFBRTZoRyxTQUFVMTFGLEdBRWhDMjFGLEVBRFUsRUFBUzloRyxFQUFFNmhHLFNBQVU5NkYsR0FDWDY2RixFQUFXLEVBQy9CdmIsRUFBZSxFQUNmMGEsRUFBVzUwRixFQUNYNDFGLEVBQWNILElBQ04sQ0FDVixJQUFJSSxFQUFhRCxFQUNiamhHLEVBQVVpZ0csRUFDVnphLEVBQU1ELEVBRVYsR0FEWSxFQUFTcm1GLEVBQUU4MUMsUUFBU2gxQyxFQUFTMjFCLEdBQzdCLFVBQ1YsT0FBTyxHQUFXMzFCLEVBQVN3bEYsR0FFN0IsSUFBSTJiLEVBQVlELEVBQWFGLEVBQVUsRUFDbkNYLEVBQVMsRUFBU25oRyxFQUFFa2lHLE9BQVFELEdBQ2hDLFFBQWV4bkcsSUFBWDBtRyxFQUNGLE9BQU8sR0FBV3JnRyxFQUFTd2xGLEdBRTdCeWIsRUFBY0UsRUFDZGxCLEVBQVcsRUFBMEJJLEdBQ3JDOWEsRUFBTyxHQUFXdmxGLEVBQVN3bEYsTUNrR2pCLENBWkUsQ0FDaEI2YixJQUF1QixVQUN2QkMsT0FBdUIsVUFDdkI5USxHQUFJLEdBQ0p4N0MsUUFBUyxHQUNUbXJELEtBQU0sR0FDTkQsS0FBTUEsR0FDTnFCLFlBQWEsRUFDYlIsU0FBVUwsR0FDVlUsT0FiRixTQUFnQnh0RyxHQUNkLE9BQU82c0csR0FBUTdzRyxNQWlCTSxHQUFRcW9HLGlCQUVuQixHQUFRRCxNQUVILEdBQVFFLFdBRVIsR0FBUUMsV0FFZCxHQUFRQyxLQUVTLEdBQVVzQixzQkFFaEIsR0FBVVYsZ0JBRWQsR0FBVVcsWUFFVCxHQUFVQyxhQUVuQixHQUFVN2hGLElBRVYsR0FBVTVCLElBRUwsR0FBVThpRixTQUVoQixHQUFVOVgsR0FFQSxHQUFVK1gsYUFFbkIsR0FBVVcsSUFFRixHQUFVVixZQUVuQixHQUFVVyxHQUVHLEdBQVVWLGdCQUV0QixHQUFVVyxJQUVSLEdBQVVDLE1BRVIsR0FBVUMsUUFFQSxHQUFVQyxrQkFFbkIsR0FBVUUsU0FFYixHQUFVQyxNQU1ILEdBQVUyQixhQUVWLEdBQVVJLGFBRUQsR0FBVUUsc0JBRWpCLEdBQVVDLGVBRUQsR0FBVUMsd0JBRWpCLEdBQVVLLGlCQ3JNakIsR0FBd0J6USxVQUV4QyxTQUFTb1IsR0FBTTdpRyxFQUFHOGlHLEVBQVc3SSxHQUMzQixZQUFZai9GLElBQVJpL0YsRUFDSyxFQUFTajZGLEVBQUcsRUFBMEJpNkYsSUFFdEM2SSxFQVlYLFNBQVMsR0FBSTlpRyxFQUFHekMsR0FDZCxRQUFVdkMsSUFBTnVDLEVBQ0YsT0FBTyxFQUFpQixFQUFTeUMsRUFBRyxFQUEwQnpDLEtBU2xFLFNBQVMsR0FBTXdsRyxFQUFReGxHLEdBQ3JCLFFBQWV2QyxJQUFYK25HLEVBQ0YsT0FBTyxHQUFJQSxFQUFReGxHLEdBS3ZCLElBQUksR0FFSyxHQUdULFNBQVMsR0FBS0EsR0FDWixPQUFPLEVBQWlCQSxHQWtJMUIsU0FBUyxHQUFJQSxFQUFHQyxHQUNkLFlBQVV4QyxJQUFOdUMsRUFDSyxFQUFpQixFQUEwQkEsSUFFM0NDLEVBSVgsSUFBSSxHQUFNLENBQ1JtYixJQUFLLEdBQ0xxakMsSUFBSyxJQVNILEdBQWMsQ0FDaEIvcEMsTUFBTyxHQUNQcWlGLEtBQU0sR0FDTjM3RSxJQUFLLEdBQ0xxakMsSUFBSyxHQUNMMmdCLFdBQU8zaEUsR0FHVCxTQUFTLEdBQVVnRixFQUFHOGlGLEVBQU05akYsR0FDMUIsT0FBTzZqRyxHQUFNLEVBQVM3aUcsRUFBRzhpRixHQUFPQSxFQUFNOWpGLEdBR3hDLFNBQVMsR0FBV2dCLEVBQUc4aUYsRUFBTTlqRixHQUMzQixPQUFPNmpHLElBQU0sU0FBV0csR0FDVixPQUFPLEVBQVNoakcsRUFBR2dqRyxFQUFTbGdCLEtBQzFCQSxFQUFNOWpGLEdBR3hCLFNBQVMsR0FBU1EsR0FJaEIsTUFBTyxDQUNDODFGLFNBSk8sU0FBVXQxRixFQUFHaEIsR0FDMUIsT0FBTzZqRyxHQUFNN2lHLEVBQUdSLEVBQUVtOUQsTUFBTzM5RCxLQU83QixTQUFTLEdBQWFRLEdBSXBCLE1BQU8sQ0FDQzgxRixTQUpPLFNBQVV0MUYsRUFBR2hCLEdBQzFCLE9BQU82akcsR0FBTTdpRyxFQUFHUixFQUFFbTlELE1BQU8zOUQsS0FPN0IsU0FBUyxHQUFjbEIsR0FJckIsTUFBTyxDQUNDdzNGLFNBSk8sU0FBVXQxRixFQUFHaEIsR0FDMUIsT0FBTzZqRyxHQUFNN2lHLEVBQUdsQyxFQUFFNitELE1BQU8zOUQsS0FPN0IsSUFBSSxHQUFXLENBQ2I2MkYsVUFBVyxHQUNYRyxXQUFZLEdBQ1pQLFNBQVUsR0FDVkwsYUFBYyxHQUNkb0gsY0FBZSxJQXVGakIsSUFBSSxHQUFVLEdBOVFGLENBQ1Y3akYsSUFBSyxHQUNMMUcsTUFBTyxHQUNQcWlGLEtBQU0sR0FDTnBELFNBWEYsU0FBa0JseUYsRUFBR2dCLEdBQ25CLFFBQVVoRixJQUFOZ0UsRUFDRixPQUFPLEVBQVNnQixFQUFHLEVBQTBCaEIsT0FxUjdDLEdBQVksR0FBMkIsSUFFZixHQUFRaXlGLGdCQUVWLEdBQVFFLGNBRU4sR0FBUUMsZ0JBRVYsR0FBUUMsY0FFTCxHQUFVRyxpQkFFUixHQUFVVixhQUVaLEdBQVVDLGlCQUVWLEdBQVVDLGlCQzdWdkMsU0FBU2lTLEdBQWNoa0csR0FJckIsTUFBTyxDQUNDaWtHLE9BSkssU0FBVUMsRUFBVXJnQixHQUMvQixPQUFPLEVBQVM3akYsRUFBRSs4QyxJQUFLOG1DLEVBQU1xZ0IsS0FPakMsU0FBU0MsR0FBU25rRyxHQUNoQixNQUFPLENBQ0N1eUYsaUJBQWtCdnlGLEVBQUUrOEMsS0NYOUIsU0FBU3FuRCxHQUFpQjdqRyxHQUN4QixJQUFJOGpHLEU3Qk1OLFNBQWdCOWpHLEdBQ2QsSUFBSU0sRUFBSSxHQUFxQk4sR0F5QjdCLE1BQU8sQ0FDQ00sRUFBR0EsRUFDSHlqRyxNQTFCSSxTQUFVdmtHLEVBQUdqSSxHQUN2QixJQUFJeXNHLEVBQUssU0FBVXpzRyxHQUNqQixHQUFJQSxHQUFLLEVBQ1AsT0FBT3lJLEVBQUVtOUQsTUFFWCxHQUFVLElBQU41bEUsRUFDRixPQUFPaUksRUFFVCxHQUFJakksRUFBSSxHQUFNLEVBQUcsQ0FDZixJQUFJaXNHLEVBQVVRLEVBQUd6c0csRUFBSSxFQUFJLEdBQ3pCLE9BQU8sRUFBUytJLEVBQUU2d0Ysa0JBQW1CcVMsRUFBU0EsR0FFaEQsSUFBSVMsRUFBWUQsRUFBR3pzRyxFQUFJLEVBQUksR0FDM0IsT0FBTyxFQUFTK0ksRUFBRTZ3RixrQkFBbUIsRUFBUzd3RixFQUFFNndGLGtCQUFtQjhTLEVBQVdBLEdBQVl6a0csSUFFNUYsT0FBT3drRyxFQUFHenNHLElBWUoyc0csTUFWSSxTQUFVM3NHLEVBQUd3RyxHQUN2QixPQUFJeEcsRUFDS3dHLEVBRUFpQyxFQUFFbTlELFE2QjdCWSxDQUEwQm45RCxHQUNuRCxNQUFPLENBQ0M4akcsbUJBQW9CQSxFQUNwQkksTUFBT0osRUFBbUJJLE1BQzFCSCxNQUFPRCxFQUFtQkMsT0NEcEMsU0FBU0ksR0FBVXBtRyxFQUFHQyxHQUNwQixZQUFVeEMsSUFBTnVDLEVBQ0tBLEVBRUFDLEVBSVgsU0FBU29tRyxHQUFtQmhtRyxHQUMxQixJQUFJaW1HLEVBQXVCLEdBQTRCam1HLEdBQ25Eb2xFLEVBQU0sU0FBVWhqRSxFQUFHNGdCLEdBQ3JCLE9BQU8sRUFBU2hqQixFQUFFaTRGLFdBQVcsU0FBV240RixFQUFHc0IsR0FDN0IsUUFBSXRCLEdBR0ssRUFBU3NDLEVBQUdoQixNQUVuQixFQUFPNGhCLElBaUJyQmtqRixFQUFZLFNBQVU5akcsRUFBR2hCLEVBQUc0aEIsR0FDOUIsT0FBTyxFQUFTaGpCLEVBQUVpNEYsV0FBVyxTQUFXdmxCLEVBQU81d0UsR0FDL0IsSUFBSXpLLEVBQUlxN0UsRUFBTSxHQUNkLE1BQWtCLENBQ1ZyN0UsRUFBSSxFQUFJLEVBQ1IwdUcsR0FBVXJ6QixFQUFNLEdBQUksRUFBU3R3RSxFQUFHaEIsRUFBR1UsR0FBS3pLLE9BQUkrRixNQUV2QyxDQUNmLE9BQ0FBLEdBQ0M0bEIsR0FBSSxJQUtqQm1qRixFQUFRLFNBQVUvakcsRUFBRzRnQixHQUN2QixPQUFPLEVBQVNoakIsRUFBRWk0RixXQUFXLFNBQVd6NEUsRUFBS3BlLEdBQy9CLE9BQ1MsT0FER2hFLElBQVJvaUIsRUFDc0IsR0FBaUJwZCxFQUFHaEIsRUFBRyxFQUEwQm9lLElBRWpEcGUsVUFFeEJoRSxFQUFXNGxCLElBS3pCb2pGLEVBQVEsU0FBVWhrRyxFQUFHNGdCLEdBQ3ZCLE9BQU8sRUFBU2hqQixFQUFFaTRGLFdBQVcsU0FBV3o0RSxFQUFLcGUsR0FDL0IsUUFBWWhFLElBQVJvaUIsRUFDRixPQUFPLEVBQWlCcGUsR0FFMUIsSUFBSVUsRUFBSSxFQUEwQjBkLEdBQ2xDLE9BQTRDLFlBQXhDLEVBQVNwZCxFQUFHaEIsRUFBR1UsR0FDVixFQUFpQlYsR0FFakIsRUFBaUJVLFVBRXhCMUUsRUFBVzRsQixJQUt6QnFqRixFQUFVLFNBQVVqa0csRUFBRzRnQixHQUN6QixPQUFPLEVBQVNoakIsRUFBRWk0RixXQUFXLFNBQVduMUUsRUFBTzFoQixHQUNqQyxPQUFJLEVBQVNnQixFQUFHaEIsR0FDUDBoQixFQUFRLEVBQUksRUFFWkEsSUFFUCxFQUFHRSxJQUVqQnRvQixFQUFTLFNBQVVzb0IsR0FDckIsT0FBT3FqRixHQUFRLFNBQVczekIsR0FDWixPQUFPLElBQ0wxdkQsSUFtSmxCLE1BQU8sQ0FDQ2lqRixxQkFBc0JBLEVBQ3RCN2dDLElBQUtBLEVBQ0xsVSxJQTVORSxTQUFVOXVELEVBQUc0Z0IsR0FDckIsT0FBTyxFQUFTaGpCLEVBQUVpNEYsV0FBVyxTQUFXbjRGLEVBQUdzQixHQUM3QixRQUFJdEIsR0FDSyxFQUFTc0MsRUFBR2hCLE1BSW5CLEVBQU00aEIsSUFzTmhCc2pGLFdBcE5TLFNBQVVsa0csRUFBR2hCLEVBQUc0aEIsR0FDL0IsT0FBT29pRCxFQUFJLEVBQVNoakUsRUFBR2hCLEdBQUk0aEIsSUFvTnJCdWpGLFNBbE5PLFNBQVVqSCxFQUFLbCtGLEVBQUc0aEIsR0FDL0IsT0FBT29pRCxFQUFJLEVBQVNrNkIsRUFBSXJMLEdBQUk3eUYsR0FBSTRoQixJQWtOMUJrakYsVUFBV0EsRUFDWGptRyxRQXJNTSxTQUFVcS9GLEVBQUtsK0YsRUFBRzRoQixHQUM5QixPQUFPa2pGLEVBQVU1RyxFQUFJckwsR0FBSTd5RixFQUFHNGhCLElBcU10Qm1qRixNQUFPQSxFQUNQM21GLElBM0xFLFNBQVVnbkYsRUFBTXhqRixHQUN4QixPQUFPbWpGLEVBQU1LLEVBQUsvdEQsUUFBU3oxQixJQTJMckJvakYsTUFBT0EsRUFDUHhvRixJQTdLRSxTQUFVNG9GLEVBQU14akYsR0FDeEIsT0FBT29qRixFQUFNSSxFQUFLL3RELFFBQVN6MUIsSUE2S3JCcWpGLFFBQVNBLEVBQ1QzckcsT0FBUUEsRUFDUnFlLEtBQU1yZSxFQUNOb29CLE1BQU9wb0IsRUFDUHdFLFFBaktNLFNBQVVrRCxFQUFHNGdCLEdBQ3pCLE9BQU8sRUFBU2hqQixFQUFFaTRGLFdBQVcsU0FBV3ZsQixFQUFPdHhFLEdBQ2pDLE9BQU8sRUFBU2dCLEVBQUdoQixVQUNqQmhFLEVBQVc0bEIsSUErSnJCeWpGLGlCQTdKZSxTQUFVcmtHLEVBQUc0Z0IsR0FDbEMsRUFBU2hqQixFQUFFaTRGLFdBQVcsU0FBVzVnRyxFQUFHK0osR0FFNUIsT0FEQSxFQUFTZ0IsRUFBR2hCLEVBQUcvSixHQUNSQSxFQUFJLEVBQUksSUFDYixFQUFHMnJCLElBMEpQNHBDLEtBdkpHLFNBQVV4cUQsR0FDbkIsT0FBTyxFQUFTcEMsRUFBRWk0RixXQUFXLFNBQVduNEYsRUFBR3NCLEdBQzdCLE9BQU8ya0csR0FBVWptRyxFQUFHLEVBQVNzQyxFQUFHaEIsR0FBSyxFQUFpQkEsUUFBS2hFLFVBQ3pEQSxJQXFKVnNwRyxjQW5KWSxTQUFVdGtHLEVBQUc0Z0IsR0FDL0IsT0FBTyxFQUFTaGpCLEVBQUVpNEYsV0FBVyxTQUFXdmxCLEVBQU90eEUsR0FDL0IsSUFBSS9KLEVBQUlxN0UsRUFBTSxHQUNkLE1BQWtCLENBQ1ZyN0UsRUFBSSxFQUFJLEVBQ1IwdUcsR0FBVXJ6QixFQUFNLEdBQUksRUFBU3R3RSxFQUFHaEIsRUFBRy9KLEdBQUssRUFBaUIrSixRQUFLaEUsTUFFekQsQ0FDZixPQUNBQSxHQUNDNGxCLEdBQUksSUEwSWIyakYsT0F4SUssU0FBVWxrRyxHQUNyQixPQUFPLEVBQVN6QyxFQUFFbzRGLFlBQVksU0FBV3o0RixFQUFHc3BGLEdBQzlCLE1BQWUsQ0FDUHRwRixFQUNBc3BGLEtBRUUsRUFBR3htRixJQW1JckIwOUIsUUFqSU0sU0FBVTE5QixHQUN0QixPQUFPLEVBQVN6QyxFQUFFaTRGLFdBQVcsU0FBV2hQLEVBQUt0cEYsR0FDL0IsT0FBTyxFQUFrQnNwRixFQUFLLENBQUN0cEYsTUFDN0IsR0FBSThDLElBK0hkbWtHLDRCQTdIMEIsU0FBVXRsRyxHQUMxQyxJQUFJdWxHLEVBQWdDLEVBQVNaLEVBQXFCM08sVUFBV2gyRixHQUM3RSxNQUFPLENBQ0N1bEcsOEJBQStCQSxFQUMvQkMsWUFBYUQsRUFBOEJwUCxhQUMzQ0UsU0FBVWtQLEVBQThCbFAsV0F5SDFDb1AseUJBdEh1QixTQUFVbmxHLEdBQ3ZDLElBQUlvbEcsRUFBNkIsRUFBU2YsRUFBcUJyTyxPQUFRaDJGLEdBb0J2RSxNQUFPLENBQ0NvbEcsMkJBQTRCQSxFQUM1QkMsUUFyQk1ELEVBQTJCelAsR0FBR0csU0FzQnBDd1AsZUFBZ0JGLEVBQTJCbFAsS0FDM0NDLFlBdEJVLFNBQVVqckQsRUFBSzlwQixHQUMvQixPQUFPLEVBQVNoakIsRUFBRWk0RixXQUFXLFNBQVd2bEIsRUFBT3R4RSxHQUMvQixPQUFJc3hFLEVBQU0sR0FDVSxFQUNWLEVBQ0F0eEUsR0FHVSxFQUNWLEVBQ0EsRUFBU1EsRUFBRW94RixPQUFRdGdCLEVBQU0sR0FBSSxFQUFTOXdFLEVBQUVveEYsT0FBUWxtRCxFQUFLMXJDLE9BR2xELEVBQ2YsRUFDQVEsRUFBRW05RCxPQUNELzdDLEdBQUksTUFvR2Zpa0YsUUEzRk0sU0FBVUUsRUFBUy9rRyxFQUFHNGdCLEdBR2xDLE9BQU8sRUFGMEIsRUFBU2lqRixFQUFxQnJPLE9BQVF1UCxHQUM1QjVQLEdBQUdHLFNBQ25CdDFGLEVBQUc0Z0IsSUF5RnhCa2tGLGVBdkZhLFNBQVVDLEVBQVNua0YsR0FDdEMsSUFBSWdrRixFQUE2QixFQUFTZixFQUFxQnJPLE9BQVF1UCxHQUN2RSxPQUFPLEVBQVNILEVBQTJCbFAsS0FBTTkwRSxJQXNGM0MrMEUsWUFwRlUsU0FBVW9QLEVBQVNyNkQsRUFBSzlwQixHQUV4QyxPQURBLEVBQVNpakYsRUFBcUJyTyxPQUFRdVAsR0FDL0IsRUFBU25uRyxFQUFFaTRGLFdBQVcsU0FBV3ZsQixFQUFPdHhFLEdBQy9CLE9BQUlzeEUsRUFBTSxHQUNVLEVBQ1YsRUFDQXR4RSxHQUdVLEVBQ1YsRUFDQSxFQUFTK2xHLEVBQVFuVSxPQUFRdGdCLEVBQU0sR0FBSSxFQUFTeTBCLEVBQVFuVSxPQUFRbG1ELEVBQUsxckMsT0FHOUQsRUFDZixFQUNBK2xHLEVBQVFwb0MsT0FDUC83QyxHQUFJLElBb0Vib2tGLDhCQWxFNEIsU0FBVS9sRyxHQUM1QyxJQUFJZ21HLEVBQWtDLEVBQVNwQixFQUFxQi9OLFlBQWE3MkYsR0FDakYsTUFBTyxDQUNDZ21HLGdDQUFpQ0EsRUFDakNDLFVBQVdELEVBQWdDbFAsZUFDM0NvUCxVQUFXRixFQUFnQ2hQLGlCQThEN0NtUCx3QkEzRHNCLFNBQVU1bEcsR0FDdEMsSUFBSTZsRyxFQUE0QixFQUFTeEIsRUFBcUJ6TixNQUFPNTJGLEdBQ3JFLE1BQU8sQ0FDQzZsRywwQkFBMkJBLEVBQzNCQyxjQUFlRCxFQUEwQmhQLGFBd0QzQ2tQLHFCQXJEbUIsU0FBVWhsRyxHQU9uQyxNQUFPLENBQ0M0akcsU0FQTyxTQUFVN3pCLEVBQU9nVCxHQUM5QixPQUFPdGdCLEVBQUksRUFBU3ppRSxFQUFFc3hGLEdBQUl2aEIsR0FBUWdULElBTzVCemxGLFFBTE0sU0FBVXl5RSxFQUFPZ1QsR0FDN0IsT0FBT3dnQixFQUFVdmpHLEVBQUVzeEYsR0FBSXZoQixFQUFPZ1QsTUFpRDFCa2lCLHNCQTFDb0IsU0FBVXJsRyxHQU9wQyxNQUFPLENBQ0NpZCxJQVBFLFNBQVVrekQsR0FDbEIsT0FBT3l6QixFQUFNNWpHLEVBQUVrMkMsUUFBU2k2QixJQU9sQjkwRCxJQUxFLFNBQVU4MEQsR0FDbEIsT0FBTzB6QixFQUFNN2pHLEVBQUVrMkMsUUFBU2k2QixPQ3pPOUIsU0FBU20xQixHQUFvQnZtRyxHQUkzQixNQUFPLENBQ0N3bUcsWUFKVSxTQUFVcm1HLEVBQVFzbUcsR0FDbEMsT0FBTyxFQUFTem1HLEVBQUUweEYsT0FBUXZ4RixFQUFRc21HLEtDRnRDLFNBQVNDLEdBQXVCMW1HLEdBSTlCLE1BQU8sQ0FDQzJtRyxRQUpNLFNBQVVDLEVBQU1DLEdBQzVCLE9BQU8sRUFBUzdtRyxFQUFFd3lGLFFBQVNxVSxFQUFNRCxLQU9yQyxTQUFTRSxHQUFrQjltRyxHQUN6QixJQUFJMm1HLEVBQVUsU0FBVUMsRUFBTUMsR0FDNUIsT0FBTyxFQUFTN21HLEVBQUV3eUYsUUFBU3FVLEVBQU1ELElBS25DLE1BQU8sQ0FDQ0csR0FKQyxDQUNQSixRQUFTQSxHQUlISyxnQkFBaUJobkcsRUFBRXd5RixRQUNuQnlVLG1CQUFvQk4sR0NEOUIsU0FBUyxHQUFRTyxFQUFZQyxHQUMzQixRQUFtQnJyRyxJQUFmcXJHLFFBQTJDcnJHLElBQWZvckcsRUFDOUIsT0FBTyxTQUFXOTFCLEdBQ1IsT0FBTyxHQUFzQnlvQixhQUFhc04sRUFBWUQsRUFBWTkxQixJQU1oRixJQUFJLEdBQWUsQ0FDakJvaEIsUUFBUyxJQUdQLEdBQVUsR0FBc0QsSUFFcEUsU0FBUyxHQUFJMXhGLEVBQUdoQixHQUNkLFFBQVVoRSxJQUFOZ0UsRUFDRixPQUFPLEVBQWlCLEVBQVNnQixFQUFHLEVBQTBCaEIsS0FLbEUsSUFBSSxHQUFVLENBQ1oyWixJQUFLLElBR0gsR0FBWSxHQUE0QyxJQUV4RCxHQUFRLEdBRVIsR0FBUSxDQUNWQSxJQUFLLEdBQ0wxRyxNQUFPLElBR0wsR0FBWSxHQUF3QyxJQUV4RCxTQUFTLEdBQUt2VSxHQUNaLE9BQU8sRUFBaUJBLEdBRzFCLElBQUksR0FBYyxDQUNoQmliLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLElBR0osR0FBWSxHQUFvRCxJQUVwRSxTQUFTLEdBQUt0MUYsRUFBR2dCLEdBQ2YsUUFBVWhGLElBQU5nRSxFQUNGLE9BQU8sRUFBU2dCLEVBQUcsRUFBMEJoQixJQUtqRCxJQUFJLEdBQVEsQ0FDVjJaLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLEdBQ05wRCxTQUFVLElBR1IsR0FBWSxHQUF3QyxJQTBDeEQsU0FBUyxHQUFTbnFGLEVBQUkrN0YsR0FDcEIsT0FBTyxTQUFXeHlCLEdBQ2QsT0FBTyxHQUF5QnVsQixVQUFVOXVGLEVBQUkrN0YsRUFBV3h5QixJQVUvRCxJQUFJLEdBQVksR0FBOEMsSUFrQjlELElBU0ksR0FBWSxHQUFvQyxJQU1wRCxTQUFTLEdBQUtnMkIsRUFBUy9vRyxFQUFHQyxHQUN4QixZQUFVeEMsSUFBTnVDLE9BQ1F2QyxJQUFOd0MsR0FDSyxFQUFTOG9HLEVBQVMsRUFBMEIvb0csR0FBSSxFQUEwQkMsU0FLdEV4QyxJQUFOd0MsRUFzREcsR0FBUXFvRyxRQUVJLEdBQVUzTixvQkFFdEIsR0FBVUMsUUFFWCxHQUFVaEYsT0FFUCxHQUFVaUYsVUFFWCxHQUFVQyxTQUVkLEdBQVU5RSxLQUVHLEdBQVUrQyxrQkFFakIsR0FBVUssV0FFVCxHQUFVQyxZQUVqQixHQUFVTCxLQUVWLEdBQVVDLEtBRVYsR0FBVUMsS0FFVixHQUFVQyxLQUVSLEdBQVVHLE9BRVYsR0FBVUMsT0FFVixHQUFVRSxPQUVWLEdBQVVFLE9BRVAsR0FBVUUsVUFFVixHQUFVQyxVQUVWLEdBQVVDLFVBRVYsR0FBVUMsVUFFSSxHQUFVcUIsd0JBRTNCLEdBQVVwRSxPQUVDLEdBQVVtRCxrQkFoRGxDLElBa0RJLEdBQVUsR0FBVUMsUUFzRnBCLElBcEZVLEdBQVVuRCxRQUVILEdBQVVxRCxlQUVOLEdBQVVDLG1CQUV0QixHQUFVakQsT0FFWCxHQUFVVCxNQUVULEdBQVVFLE9BSUksR0FBVXNQLHFCQUUzQixHQUFVN2dDLElBRVYsR0FBVWxVLElBRUgsR0FBVW8xQyxXQUVaLEdBQVVDLFNBRVQsR0FBVUwsVUFFWixHQUFVam1HLFFBRVosR0FBVWttRyxNQUVaLEdBQVUzbUYsSUFFUixHQUFVNG1GLE1BRVosR0FBVXhvRixJQUVOLEdBQVV5b0YsUUFFWCxHQUFVM3JHLE9BRVosR0FBVXFlLEtBRVQsR0FBVStKLE1BRVIsR0FBVTVqQixRQUVELEdBQVV1bkcsaUJBRXRCLEdBQVU3NUMsS0FFRCxHQUFVODVDLGNBRWpCLEdBQVVDLE9BRVQsR0FBVXhtRSxRQUVVLEdBQVV5bUUsNEJBRWIsR0FBVUcseUJBRTNCLEdBQVVFLFFBRUgsR0FBVUMsZUFFYixHQUFVblAsWUFFUSxHQUFVcVAsOEJBRWhCLEdBQVVJLHdCQUViLEdBQVVHLHFCQUVULEdBQVVDLHNCQUl6QixHQUFVdEMsT052RXZCLFNBQWEvaUcsR0F5QlgsTUFBTyxDQUNDMHhGLEdBekJDLFNBQVVqeEUsRUFBSTBrRSxHQUNyQixZQUFXdHFGLElBQVA0bEIsT0FDUzVsQixJQUFQc3FGLEdBQ0ssRUFBU25sRixFQUFFMHhGLEdBQUksRUFBMEJqeEUsR0FBSyxFQUEwQjBrRSxTQUtuRXRxRixJQUFQc3FGLEdBa0JIanZDLFFBZk0sU0FBVTk0QyxFQUFHQyxHQUN6QixZQUFVeEMsSUFBTnVDLE9BQ1F2QyxJQUFOd0MsRUFDSyxFQUFTMkMsRUFBRWsyQyxRQUFTLEVBQTBCOTRDLEdBQUksRUFBMEJDLElBRTFELGVBRVp4QyxJQUFOd0MsRUFDYSxXQUVBLGNPdFM1QixTQUFTLEdBQUtzbEcsRUFBVzlpRyxFQUFHdEMsR0FDMUIsWUFBVTFDLElBQU4wQyxFQUNLLEVBQVNzQyxFQUFHLEVBQTBCdEMsSUFFdENvbEcsRUFJWCxTQUFTeUQsR0FBUzUrRSxFQUFZM25CLEVBQUd0QyxHQUMvQixZQUFVMUMsSUFBTjBDLEVBQ0ssRUFBU3NDLEVBQUcsRUFBMEJ0QyxJQUV0QyxFQUFTaXFCLE9BQVkzc0IsR0FJaEMsU0FBU3dyRyxHQUFVMUQsRUFBV3ZsRyxHQUM1QixZQUFVdkMsSUFBTnVDLEVBQ0ssRUFBMEJBLEdBRTFCdWxHLEVBSVgsU0FBUzJELEdBQWM5K0UsRUFBWXBxQixHQUNqQyxZQUFVdkMsSUFBTnVDLEVBQ0ssRUFBMEJBLEdBRTFCLEVBQVNvcUIsT0FBWTNzQixHQWdEaEMsU0FBUyxHQUFPK0wsR0FDZCxPQUFPLElBQWlDLFNBQVcrN0YsRUFBV3BsRyxHQUNoRCxPQUFJLEVBQVNxSixFQUFJckosR0FDUixFQUFpQkEsR0FFakJvbEcsU0FFUDluRyxHQWFsQixJQzNGSSxHQUFTLEdBWVQsR0FBTSxHQU1OLEdBQVksR0FFWixHWm1OSixTQUFTLEVBQVdnRixFQUFHOUssRUFBRzYxRixHQUN4QixPQUFJNzFGLEVBQ0ssRUFBUzhLLEVBQUc5SyxFQUFFLEdBQUksRUFBVzhLLEVBQUc5SyxFQUFFLEdBQUk2MUYsSUFFdENBLEdhMVBYLFNBQVMsR0FBSS9xRixHQUNYLE9BQU8sU0FBV3N3RSxHQUNkLE9BQU8sR0FBZXR3RSxFQUFHc3dFLElBSS9CLElBQUksR0FDRyxHQUdILEdBQU0sQ0FDUjMzRCxJQUFLLEdBQ0xxakMsSUFBSyxJQUdQLFNBQVMsR0FBTXNnRCxFQUFVLytGLEdBQ3ZCLE9BQU8sSUFBcUIsU0FBV3NwRixFQUFLN21GLEdBQzlCLE9BQU8sR0FBa0I2bUYsRUFBSyxHQUFlN21GLEVBQUd6QyxNQUN0QyxFQUFHKytGLEdBRzdCLElBQUksR0FFSyxHQUdULFNBQVMsR0FBSy8rRixHQUNaLE1BQWUsQ0FDUEEsRUFDUSxHQUlsQixJQUFJLEdBR0ksR0FTUixJQUFJLEdBQVEsQ0FDVm9iLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLEdBQ05wRCxTQVZGLFNBQWtCbHlGLEVBQUdnQixHQUNuQixPQUFPLElBQXFCLFNBQVc2bUYsRUFBS3RwRixHQUM5QixPQUFPLEdBQWtCc3BGLEVBQUssRUFBUzdtRixFQUFHekMsTUFDaEMsRUFBR3lCLEtBZ0J6QixHQUFjLENBQ2hCaVQsTUFBTyxHQUNQcWlGLEtBQU0sR0FDTjM3RSxJQUFLLEdBQ0xxakMsSUFBSyxHQUNMMmdCLE1BQWUsR0FHakIsU0FBUyxHQUFVMzhELEVBQUc4aUYsR0FDcEIsT0FBTyxTQUFXeFMsR0FDZCxPQUFPLEdBQXFCdHdFLEVBQUc4aUYsRUFBTXhTLElBSTNDLFNBQVMsR0FBV3R3RSxFQUFHOGlGLEdBQ3JCLE9BQU8sU0FBV3hTLEdBQ2QsT0FBTyxHQUFzQnR3RSxFQUFHc3dFLEVBQU93UyxJQUk3QyxTQUFTLEdBQWtCeVosR0FNekIsTUFBTyxDQUNDakgsU0FOVSxHQUNFaUgsRUFBUSxDQUN0QjFHLFVBQVcsR0FDWEcsV0FBWSxLQUdFd0UsdUJBSXRCLFNBQVMsR0FBc0IrQixHQU03QixNQUFPLENBQ0NqSCxTQU5VLEdBQ0VpSCxFQUFRLENBQ3RCMUcsVUFBVyxHQUNYRyxXQUFZLEtBR0V3RSx1QkFJdEIsU0FBUyxHQUF1QitCLEdBTTlCLE1BQU8sQ0FDQ2pILFNBTlUsR0FDRWlILEVBQVEsQ0FDdEIxRyxVQUFXLEdBQ1hHLFdBQVksS0FHRXdFLHVCQUl0QixJQUFJLEdBQVcsQ0FDYjNFLFVBQVcsR0FDWEcsV0FBWSxHQUNaUCxTQUFVLEdBQ1ZMLGFBQWMsR0FDZG9ILGNBQWUsSUFtQmpCLFNBQVMsR0FBWXY5RixHQUNuQixJQUFJYSxFQUFJLEdBQXFCYixHQUN6QjI3RixFQUFXLFNBQVU1NkYsR0FDdkIsSUFBSXJILEVBQU0sRUFBU3NHLEVBQUVxMUYsS0FBYyxHQUNuQyxPQUFPLFNBQVdoa0IsR0FDZCxPQUFPLElBQXNCLFNBQVd1VyxFQUFLN25GLEdBQy9CLE9BQU8sRUFBU2MsRUFBRWt4RixpQkFBa0IsRUFBU2x4RixFQUFFa3hGLGlCQUFrQixFQUFTL3hGLEVBQUVxMUYsTUFBTSxTQUFXNTBGLEVBQUc0bEYsR0FDMUUsTUFBZSxDQUNQNWxGLEVBQ0E0bEYsTUFFTCxFQUFTdGxGLEVBQUc2bUYsSUFBTzduRixLQUMxQ3N4RSxFQUFPMzNFLEtBTTdCLE1BQU8sQ0FDQ2dnQixJQUFLLEdBQ0xrOUUsVUFBVyxHQUNYRyxXQUFZLEdBQ1pQLFNBQVUsR0FDVkwsYUFBYyxHQUNkb0gsY0FBZSxHQUNmNUIsU0FBVUEsRUFDVi83QixTQVhBLEdBQTBCLENBQzVCKzdCLFNBQVVBLElBVUlELGtCQWtDdEIsSUFBSSxHQUFVLEdBQXFCLElBRS9CLEdBQVksR0FBMkIsSUFFZixHQUFRMUosZ0JBRVYsR0FBUUUsY0FFTixHQUFRQyxnQkFFVixHQUFRQyxjQUVMLEdBQVVHLGlCQUVSLEdBQVVWLGFBRVosR0FBVUMsaUJBRVYsR0FBVUMsaUJDMU52QyxTQUFTMFYsR0FBdUJ4bkcsR0FJOUIsTUFBTyxDQUNDd21HLFlBSlUsU0FBVXJtRyxFQUFRc21HLEdBQ2xDLE9BQU8sRUFBU3ptRyxFQUFFMHhGLE9BQVF2eEYsRUFBUXNtRyxLQ1l0QyxJQ2Q2Qm5tRyxHRGN6QixHQUFTLEdBRVQsR0FBZSxDQUNqQm94RixPQUFRLElBR04sR0FBVSxHQUFzRCxJQUVoRStWLEdBQVksQ0FDZC9WLE9BQVEsR0FDUmowQixNQUFlLEdBS2IsSUM3QnlCbjlELEdEMkJtQ21uRyxHQUV0RCxJQUVOLEdBQVUsQ0FDWmh1RixJQUFLLElBR0gsR0FBWSxHQUE0QyxJQUV4RCxHQUFRLEdBRVIsR0FBUSxDQUNWQSxJQUFLLEdBQ0wxRyxNQUFPLElBR0wsR0FBWSxHQUF3QyxJQUVwRCxHQUFPLEdBRVAsR0FBYyxDQUNoQjBHLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLElBR0osR0FBWSxHQUFvRCxJQUVoRSxHQUFPLEdBQW9CcEQsU0FFM0IsR0FBUSxDQUNWdjRFLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLEdBQ05wRCxTQUFVLElBR1IsR0FBWSxHQUF3QyxJQUVwRCxHQUFNLEdBQWtCbDFDLElBRXhCLEdBQU0sQ0FDUnJqQyxJQUFLLEdBQ0xxakMsSUFBSyxJQUdILEdBQVksR0FBb0MsSUFvQmhELEdBQVcsR0FBdUI2NUMsVUFFbEMsR0FBWSxHQUF1QkcsV0FRbkMsR0FBVyxDQUNiSCxVQUFXLEdBQ1hHLFdBQVksR0FDWlAsU0FUc0IsR0FBdUJBLFNBVTdDTCxhQVIwQixHQUF1QkEsYUFTakRvSCxjQVAyQixHQUF1QkEsZUFVaEQsR0FBWSxHQUE4QyxJQUUxRCxHQUFjLEdBQVU3RyxZQVU1QixTQUFTLEdBQUsyUSxFQUFTcFgsRUFBSUMsR0FDekIsT0FBWSxDQUNWLElBQUkzeEYsRUFBSTJ4RixFQUNKNXhGLEVBQUkyeEYsRUFDUixJQUFLM3hGLEVBQ0gsT0FBSUMsRUFNTixJQUFLQSxFQUNILE9BQU8sRUFFVCxJQUFLLEVBQVM4b0csRUFBUy9vRyxFQUFFLEdBQUlDLEVBQUUsSUFDN0IsT0FBTyxFQUVUMnhGLEVBQUszeEYsRUFBRSxHQUNQMHhGLEVBQUszeEYsRUFBRSxJQVNYLFNBQVMsR0FBR3FwRyxHQUlWLE1BQU8sQ0FDQy9VLEdBSkMsU0FBVWp4RSxFQUFJMGtFLEdBQ3JCLE9BQU8sR0FBS3NoQixFQUFJL1UsR0FBSWp4RSxFQUFJMGtFLEtBTzVCLFNBQVMsR0FBT3VoQixFQUFXam1GLEdBRXpCLE1BQU8sSUFBTyxFQURILEVBQVMsR0FBYSxJQUNKLEtBQU0sR0FBSWltRixFQUFKLENBQWVqbUYsSUFBTyxJQU8zRCxTQUFTLEdBQUtrbUYsR0FJWixNQUFPLENBQ0M5SixLQUpHLFNBQVVwOEUsR0FDbkIsT0FBTyxHQUFPa21GLEVBQU05SixLQUFNcDhFLEtBWVosR0FBUThrRixZQVFBLEdBQVV4TixvQkFFdEIsR0FBVUMsUUFFWCxHQUFVaEYsT0FFUCxHQUFVaUYsVUFFWCxHQUFVQyxTQUVkLEdBQVU5RSxLQUVHLEdBQVUrQyxrQkFFakIsR0FBVUssV0FFVCxHQUFVQyxZQUVqQixHQUFVTCxLQUVWLEdBQVVDLEtBRVYsR0FBVUMsS0FFVixHQUFVQyxLQUVSLEdBQVVHLE9BRVYsR0FBVUMsT0FFVixHQUFVRSxPQUVWLEdBQVVFLE9BRVAsR0FBVUUsVUFFVixHQUFVQyxVQUVWLEdBQVVDLFVBRVYsR0FBVUMsVUFFSSxHQUFVcUIsd0JBRTNCLEdBQVVwRSxPQUVDLEdBQVVtRCxrQkFFcEIsR0FBVUMsUUFFVixHQUFVbkQsUUFFSCxHQUFVcUQsZUFFTixHQUFVQyxtQkFFdEIsR0FBVWpELE9BRVgsR0FBVVQsTUFFVCxHQUFVRSxPQUVWLEdBQVUyTyxPQUVJLEdBQVVXLHFCQUUzQixHQUFVN2dDLElBRVYsR0FBVWxVLElBakZwQixJQW1GSSxHQUFhLEdBQVVvMUMsV0FrQnZCLElBaEJXLEdBQVVDLFNBRVQsR0FBVUwsVUFFWixHQUFVam1HLFFBRVosR0FBVWttRyxNQUVaLEdBQVUzbUYsSUFFUixHQUFVNG1GLE1BRVosR0FBVXhvRixJQUVOLEdBQVV5b0YsUUFFWCxHQUFVM3JHLFFBVW5CLElBUk8sR0FBVXFlLEtBRVQsR0FBVStKLE1BRVIsR0FBVTVqQixRQUVELEdBQVV1bkcsaUJBRXRCLEdBQVU3NUMsTUFRakIsSUFOZ0IsR0FBVTg1QyxjQUVqQixHQUFVQyxPQUVXLEdBQVVDLDRCQUViLEdBQVVHLDBCQUlyQyxJQUZVLEdBQVVFLFFBRUgsR0FBVUMsZ0JBTTNCLElBSmdDLEdBQVVFLDhCQUVoQixHQUFVSSx3QkFFYixHQUFVRyxzQkFFakMsR0FBd0IsR0FBVUMsc0JBRWxDLEdBQWMsR0FFZCxHQUFZLEdBRVosR0FBVSxHRXJUZCxTQUFTLEdBQUt4bUcsRUFBRzRoQixHQUNmLE1BQWUsQ0FDUDVoQixFQUNBNGhCLEdBSVYsU0FBUyxHQUFPMHZELEdBQ2QsR0FBSUEsRUFDRixNQUFrQixDQUNWQSxFQUFNLEdBQ05BLEVBQU0sSUFNbEIsU0FBUyxHQUFPdHhFLEVBQUc0aEIsR0FDakIsT0FBTyxHQUFtQ2d3RSxPQUFPaHdFLEVBQVksQ0FDakQ1aEIsRUFDUSxJQVl0QixTQUFTLEdBQVFzeEUsR0FDZixPQUFJQSxFQU9OLFNBQVN5MkIsR0FBV25tRixHQUNsQixRQUNRQSxFQVFWLFNBQVMsR0FBSzB2RCxHQUNaLEdBQUlBLEVBQ0YsT0FBTyxFQUFpQkEsRUFBTSxJQUtsQyxTQUFTLEdBQUtBLEdBQ1osR0FBSUEsRUFDRixPQUFPQSxFQUFNLEdBS2pCLFNBQVMwMkIsR0FBWXBtRixHQUNuQixPQUFPLEdBQXFDLEVBQUcsR0FBS0EsSUEwQ3RELFNBQVMsR0FBSzNyQixFQUFHMnJCLEdBcUJmLE9BQU8sR0FwQkUsU0FBVWdtRSxFQUFNcWdCLEVBQVFDLEdBQy9CLE9BQVksQ0FDVixJQUFJdmxGLEVBQU91bEYsRUFDUHhtRixFQUFRdW1GLEVBQ1JwZ0IsRUFBTUQsRUFDVixHQUFJbG1FLEdBQVMsRUFDWCxPQUFPbW1FLEVBRVQsSUFBS2xsRSxFQUNILE9BQU9rbEUsRUFFVHFnQixFQUFRdmxGLEVBQUssR0FDYnNsRixFQUFTdm1GLEVBQVEsRUFBSSxFQUNyQmttRSxFQUFlLENBQ2JqbEUsRUFBSyxHQUNMa2xFLElBS21CMmMsQ0FBVyxFQUFHdnVHLEVBQUcyckIsSUErRzVDLFNBQVN1bUYsR0FBVW5uRyxFQUFHNGdCLEdBQ3BCLE9BQU8sR0FBa0IsSUFBK0IsU0FBV2ltRSxFQUFLdWdCLEdBQ3BELE9BQU8sR0FBd0J2Z0IsR0FBSyxTQUFXbnBGLEdBQ2pDLE1BQWUsQ0FDUEEsRUFDQW1wRixLQUVOLEVBQVM3bUYsRUFBR29uRyxNQUNsQixFQVBMLENBT1F4bUYsSUFxRW5DLFNBQVN5bUYsR0FBUXJuRyxFQUFHNGdCLEVBQUkwa0UsR0FDdEIsT2xDNE1GLFNBQWVLLEVBQUlDLEVBQUk1bEYsR0FDckIsT0FoQkYsU0FBZ0IybEYsRUFBSUMsRUFBSTVsRixHQUN0QixJQUFLMmxGLEVBQ0gsT0FBZSxFQUVqQixJQUFLQyxFQUNILE9BQWUsRUFFakIsSUFBSWhtQixFQUFlLENBQ2pCNS9ELEVBQUUybEYsRUFBRyxHQUFJQyxFQUFHLElBQ0osR0FHVixPQXZNRixTQUF5QjVsRixFQUFHaTVGLEVBQVFxTyxFQUFRM2dCLEdBQzFDLE9BQVksQ0FDVixJQUFJRyxFQUFPSCxFQUNQNGdCLEVBQVFELEVBQ1JwTyxFQUFRRCxFQUNaLElBQUtDLEVBQ0gsT0FFRixJQUFLcU8sRUFDSCxPQUVGLElBQUlqZ0csRUFBZSxDQUNqQnRILEVBQUVrNUYsRUFBTSxHQUFJcU8sRUFBTSxJQUNWLEdBRVZ6Z0IsRUFBSyxHQUFLeC9FLEVBQ1ZxL0UsRUFBUXIvRSxFQUNSZ2dHLEVBQVNDLEVBQU0sR0FDZnRPLEVBQVNDLEVBQU0sSUFvTGpCc08sQ0FBZ0J4bkcsRUFBRzJsRixFQUFHLEdBQUlDLEVBQUcsR0FBSWhtQixHQUMxQkEsRUFJQSxDQUFPK2xCLEVBQUlDLEVBQUksRUFBVTVsRixJa0M3TXpCLENBQWdCNGdCLEVBQUkwa0UsRUFBSXRsRixHQWdCakMsU0FBU3luRyxHQUFPem5HLEVBQUc0Z0IsR0FDakIsT0FBTyxHQUFlQSxHQUFJLFNBQVdyakIsRUFBR0MsR0FDMUIsT0FBTyxHQUFzQixFQUFTd0MsRUFBR3pDLEVBQUdDLE9BUTVELFNBQVNrcUcsR0FBVzdWLEVBQUlqeEUsR0FDdEIsT0FBTyxHQUFrQixJQUErQixTQUFXMGtFLEVBQUl0bUYsR0FDbkQsT0FBSSxFQUFTLEdBQWtDNnlGLEVBQUk3eUYsRUFBR3NtRixHQUM3Q0EsRUFFUSxDQUNQdG1GLEVBQ0FzbUYsS0FHQSxFQVRMLENBU1Exa0UsSUFHbkMsU0FBUyttRixHQUFjckIsRUFBUzVvRyxFQUFHa2pCLEdBMEJqQyxPQUFPLEdBQWtCLElBekJoQixTQUFVMHZELEVBQU90eEUsR0FDeEIsSUFBSXNtRixFQUFLaFYsRUFBTSxHQUNmLE9BQUlBLEVBQU0sR0FDVSxFQUNWLEVBQ1EsQ0FDTnR4RSxFQUNBc21GLElBR0QsRUFBU2doQixFQUFTNW9HLEVBQUdzQixHQUNaLEVBQ1YsRUFDQXNtRixHQUdVLEVBQ1YsRUFDUSxDQUNOdG1GLEVBQ0FzbUYsTUFLeUQsRUFDbkQsRUFDUSxHQUZILENBR0oxa0UsR0FBSSxJQUczQixTQUFTZ25GLEdBQWF0QixFQUFTdG5HLEVBQUc0aEIsR0FDaEMsT0FBTyxHQUFrQixJQUErQixTQUFXMGtFLEVBQUk1bEYsR0FDbkQsT0FBSSxFQUFTNG1HLEVBQVN0bkcsRUFBR1UsR0FDaEI0bEYsRUFFUSxDQUNQNWxGLEVBQ0E0bEYsS0FHQSxFQVRMLENBU1Exa0UsSUF5SG5DLElBQUk2L0QsR0FBVSxHQUlWLEdBQVUsR0FZVixHbEN3MEJKLFNBQWFrRixFQUFJQyxHQUNmLElBQUtELEVBQ0gsT0FBZSxFQUVqQixJQUFLQyxFQUNILE9BQWUsRUFFakIsSUFBSWhtQixFQUFlLENBQ04sQ0FDVCtsQixFQUFHLEdBQ0hDLEVBQUcsSUFFRyxHQUdWLE9BemtDRixTQUFnQnFULEVBQVFxTyxFQUFRM2dCLEdBQzlCLE9BQVksQ0FDVixJQUFJRyxFQUFPSCxFQUNQNGdCLEVBQVFELEVBQ1JwTyxFQUFRRCxFQUNaLElBQUtDLEVBQ0gsT0FFRixJQUFLcU8sRUFDSCxPQUVGLElBQUlqZ0csRUFBZSxDQUNOLENBQ1Q0eEYsRUFBTSxHQUNOcU8sRUFBTSxJQUVBLEdBRVZ6Z0IsRUFBSyxHQUFLeC9FLEVBQ1ZxL0UsRUFBUXIvRSxFQUNSZ2dHLEVBQVNDLEVBQU0sR0FDZnRPLEVBQVNDLEVBQU0sSUFtakNqQjJPLENBQU9saUIsRUFBRyxHQUFJQyxFQUFHLEdBQUlobUIsR0FDZEEsR21DaDNDVCxTQUFTa29DLEdBQWV0b0csR0FHdEIsTUFBTyxDQUNDdVIsSUFGSSxFQURGdlIsRUFBRXVSLE1DSGQsU0FBUyxHQUFJNWEsRUFBRzR4RyxFQUFNcmQsRUFBTTM1RSxHQUMxQixRQUFVL1YsSUFBTjdFLEVBQ0YsT0FBTyxHQUErQjR4RyxFQUFNcmQsR0FFOUMsSUFBSWpyRixFQUFJdEosRUFBRUssSUFDTmxCLEVBQUl5YixFQUFJZzNGLEVBQU10b0csR0FDbEIsR0FBVSxJQUFObkssRUFDRixPQUFPLEdBQWlDYSxFQUFHdTBGLEdBRTdDLElBQUl4MUYsRUFBSWlCLEVBQUV3VSxLQUNONVUsRUFBSUksRUFBRXlVLE1BQ05sTixFQUFJdkgsRUFBRUQsTUFDVixPQUFJWixFQUFJLEVBQ0MsR0FBeUIsR0FBSUosRUFBRzZ5RyxFQUFNcmQsRUFBTTM1RSxHQUFNdFIsRUFBRy9CLEVBQUczSCxHQUV4RCxHQUF5QmIsRUFBR3VLLEVBQUcvQixFQUFHLEdBQUkzSCxFQUFHZ3lHLEVBQU1yZCxFQUFNMzVFLElBSWhFLFNBQVMsR0FBUTVhLEVBQUc0eEcsRUFBTS9uRyxFQUFHK1EsR0FDM0IsUUFBVS9WLElBQU43RSxFQUFpQixDQUNuQixJQUFJc0osRUFBSXRKLEVBQUVLLElBQ05sQixFQUFJeWIsRUFBSWczRixFQUFNdG9HLEdBQ2xCLEdBQVUsSUFBTm5LLEVBQVMsQ0FDWCxJQUFJbzFGLEVBQU8xcUYsRUFBRSxFQUFpQjdKLEVBQUVELFFBQ2hDLFFBQWE4RSxJQUFUMHZGLEVBQ0YsT0FBTyxHQUFpQ3YwRixFQUFHLEVBQTBCdTBGLElBRXZFLElBQUl4MUYsRUFBSWlCLEVBQUV3VSxLQUNONVUsRUFBSUksRUFBRXlVLE1BQ1YsUUFBVTVQLElBQU45RixFQUNGLE9BQU9hLEVBRVQsUUFBVWlGLElBQU5qRixFQUNGLE9BQU9iLEVBRVQsSUFBSTQwRixFQUFLLENBQ1AvMkIsU0FBVWg5RCxFQUFFUyxLQUVWdXpGLEVBQUssQ0FDUGgzQixTQUFVaDlELEVBQUVHLE9BRVY4eEcsRUFBTSxHQUF5Q2p5RyxFQUFHK3pGLEVBQUlDLEdBQzFELE9BQU8sR0FBeUI3MEYsRUFBRzQwRixFQUFHLzJCLFNBQVVnM0IsRUFBR2gzQixTQUFVaTFDLEdBRS9ELElBQUlDLEVBQU05eEcsRUFBRXdVLEtBQ1J1OUYsRUFBTS94RyxFQUFFeVUsTUFDUmxOLEVBQUl2SCxFQUFFRCxNQUNWLEdBQUlaLEVBQUksRUFBRyxDQUNULElBQUl3ekYsRUFBSyxHQUFRbWYsRUFBS0YsRUFBTS9uRyxFQUFHK1EsR0FDL0IsT0FBSWszRixJQUFRbmYsRUFDSDN5RixFQUVBLEdBQXlCMnlGLEVBQUlycEYsRUFBRy9CLEVBQUd3cUcsR0FHOUMsSUFBSS9lLEVBQUssR0FBUStlLEVBQUtILEVBQU0vbkcsRUFBRytRLEdBQy9CLE9BQUltM0YsSUFBUS9lLEVBQ0hoekYsRUFFQSxHQUF5Qjh4RyxFQUFLeG9HLEVBQUcvQixFQUFHeXJGLEdBRy9DLElBQUlnZixFQUFTbm9HLE9BQUVoRixHQUNmLFlBQWVBLElBQVhtdEcsRUFDSyxHQUErQkosRUFBTSxFQUEwQkksSUFFL0RoeUcsRUFRWCxTQUFTaXlHLEdBQVcxeEcsRUFBR3NJLEVBQUcrUixHQUN4QixJQUFJclQsRUFBSWhILEVBQUVGLElBQ050QixFQUFJd0IsRUFBRWlVLEtBQ041VSxFQUFJVyxFQUFFa1UsTUFDTnRWLEVBQUl5YixFQUFJL1IsRUFBR3RCLEdBQ2YsR0FBVSxJQUFOcEksRUFBUyxDQUNYLFFBQVUwRixJQUFOOUYsRUFDRixPQUFPYSxFQUVULFFBQVVpRixJQUFOakYsRUFDRixPQUFPYixFQUVULElBQUk0MEYsRUFBSyxDQUNQLzJCLFNBQVVoOUQsRUFBRVMsS0FFVnV6RixFQUFLLENBQ1BoM0IsU0FBVWg5RCxFQUFFRyxPQUVWOHhHLEVBQU0sR0FBeUNqeUcsRUFBRyt6RixFQUFJQyxHQUMxRCxPQUFPLEdBQXlCNzBGLEVBQUc0MEYsRUFBRy8yQixTQUFVZzNCLEVBQUdoM0IsU0FBVWkxQyxHQUUvRCxHQUFJMXlHLEVBQUksRUFBRyxDQUNULFFBQVUwRixJQUFOOUYsRUFDRixPQUFPd0IsRUFFVCxJQUFJb3lGLEVBQUtzZixHQUFXbHpHLEVBQUc4SixFQUFHK1IsR0FDMUIsT0FBSSszRSxJQUFPNXpGLEVBQ0Z3QixFQUVBLEdBQXlCb3lGLEVBQUlwckYsRUFBR2hILEVBQUVSLE1BQU9ILEdBR3BELFFBQVVpRixJQUFOakYsRUFDRixPQUFPVyxFQUVULElBQUl5eUYsRUFBS2lmLEdBQVdyeUcsRUFBR2lKLEVBQUcrUixHQUMxQixPQUFJbzRFLElBQU9wekYsRUFDRlcsRUFFQSxHQUF5QnhCLEVBQUd3SSxFQUFHaEgsRUFBRVIsTUFBT2l6RixHQVduRCxTQUFTLEdBQVVoc0YsRUFBRzZQLEVBQUsrRCxHQUd6QixJQUZBLElBQUluTixFQUFNb0osRUFBSTFVLE9BQ1ZvRixFQUFJUCxFQUNBbEksRUFBSSxFQUFHQSxFQUFJMk8sSUFBTzNPLEVBQUUsQ0FDMUIsSUFBSWlTLEVBQVE4RixFQUFJL1gsR0FDaEJ5SSxFQUFJLEdBQUlBLEVBQUd3SixFQUFNLEdBQUlBLEVBQU0sR0FBSTZKLEdBRWpDLE9BQU9yVCxFQUdULFNBQVMycUcsR0FBYzN4RyxFQUFHc0ksRUFBR3NwRyxFQUFNdjNGLEdBQ2pDLElBQUlyVCxFQUFJaEgsRUFBRUYsSUFDTmpCLEVBQUltQixFQUFFUixNQUNOaEIsRUFBSXdCLEVBQUVpVSxLQUNONVUsRUFBSVcsRUFBRWtVLE1BQ050VixFQUFJeWIsRUFBSS9SLEVBQUd0QixHQUNmLEdBQVUsSUFBTnBJLEVBRUYsT0FEQWd6RyxFQUFLdjFDLFNBQVcsRUFBaUJ4OUQsR0FDZixDQUNWTCxFQUNBYSxHQUdWLEdBQUlULEVBQUksRUFBRyxDQUNULFFBQVUwRixJQUFOOUYsRUFDRixNQUFrQixNQUNWOEYsRUFDQXRFLEdBR1YsSUFBSXdRLEVBQVFtaEcsR0FBY256RyxFQUFHOEosRUFBR3NwRyxFQUFNdjNGLEdBQ3RDLE1BQWtCLENBQ1Y3SixFQUFNLEdBQ04sR0FBMEJBLEVBQU0sR0FBSXhKLEVBQUduSSxFQUFHUSxJQUdwRCxRQUFVaUYsSUFBTmpGLEVBQ0YsTUFBa0IsQ0FDVlcsT0FDQXNFLEdBR1YsSUFBSTR3RixFQUFVeWMsR0FBY3R5RyxFQUFHaUosRUFBR3NwRyxFQUFNdjNGLEdBQ3hDLE1BQWtCLENBQ1YsR0FBMEI3YixFQUFHd0ksRUFBR25JLEVBQUdxMkYsRUFBUSxJQUMzQ0EsRUFBUSxJQXdCbEIsU0FBUyxHQUFPM0csRUFBSUMsRUFBSWxsRixFQUFHK1EsR0FDekIsUUFBVy9WLElBQVBpcUYsRUFDRixZQUFXanFGLElBQVBrcUYsRUFDSyxHQUE4QkEsR0FBSSxTQUFXemxGLEVBQUcvQixHQUN6QyxPQUFPc0MsRUFBRVAsT0FBR3pFLEVBQVcsRUFBaUIwQyxZQUd0RCxFQUdKLFFBQVcxQyxJQUFQa3FGLEVBQ0YsT0FBTyxHQUE4QkQsR0FBSSxTQUFXeGxGLEVBQUcvQixHQUN6QyxPQUFPc0MsRUFBRVAsRUFBRyxFQUFpQi9CLFFBQUkxQyxNQUdqRCxHQUFJaXFGLEVBQUc3bUMsUUFBVThtQyxFQUFHOW1DLE9BQVEsQ0FDMUIsSUFBSW1xRCxFQUFLdGpCLEVBQUd6dUYsSUFDUmd5RyxFQUFLdmpCLEVBQUcvdUYsTUFDUnl2RixFQUFLVixFQUFHdDZFLEtBQ1I4OUYsRUFBS3hqQixFQUFHcjZFLE1BQ1I4OUYsRUFBSyxDQUNQMzFDLGNBQVUvM0QsR0FFUmtNLEVBQVFtaEcsR0FBY25qQixFQUFJcWpCLEVBQUlHLEVBQUkzM0YsR0FDbEM0M0YsRUFBT0QsRUFBRzMxQyxTQUlkLE9BQU8sR0FITyxHQUFPNHlCLEVBQUl6K0UsRUFBTSxHQUFJbEgsRUFBRytRLEdBR1l3M0YsRUFGdkN2b0csRUFBRXVvRyxFQUFJLEVBQWlCQyxHQUFLRyxHQUN4QixHQUFPRixFQUFJdmhHLEVBQU0sR0FBSWxILEVBQUcrUSxJQUd6QyxJQUFJNjNGLEVBQUsxakIsRUFBRzF1RixJQUNScXlHLEVBQU8zakIsRUFBR2h2RixNQUNWMHZGLEVBQUtWLEVBQUd2NkUsS0FDUm0rRixFQUFLNWpCLEVBQUd0NkUsTUFDUm0rRixFQUFPLENBQ1RoMkMsY0FBVS8zRCxHQUVSNHdGLEVBQVV5YyxHQUFjcGpCLEVBQUkyakIsRUFBSUcsRUFBTWg0RixHQUN0Q2k0RixFQUFPRCxFQUFLaDJDLFNBSWhCLE9BQU8sR0FIUyxHQUFPNjRCLEVBQVEsR0FBSWhHLEVBQUk1bEYsRUFBRytRLEdBR1U2M0YsRUFGdkM1b0csRUFBRTRvRyxFQUFJSSxFQUFNLEVBQWlCSCxJQUN6QixHQUFPamQsRUFBUSxHQUFJa2QsRUFBSTlvRyxFQUFHK1EsSUFrQzdDLElBQUksR0FBVSxHQUVWLEdqRGlvQkosU0FBYXM0RSxFQUFJcnFGLEVBQUcrUixHQUNsQixPQUFZLENBQ1YsSUFBSXJhLEVBQUkyeUYsRUFDUixRQUFVcnVGLElBQU50RSxFQUNGLE9BQU8sRUFFVCxJQUNJcEIsRUFBSXliLEVBQUkvUixFQURKdEksRUFBRUYsS0FFVixHQUFVLElBQU5sQixFQUNGLE9BQU8sRUFFVCt6RixFQUFLL3pGLEVBQUksRUFBSW9CLEVBQUVpVSxLQUFPalUsRUFBRWtVLFFpRDFvQnhCLEdBQU8sR0FJUCxHQUFNLEdBSU4sR0FBZSxHQUlmLEdBQVcsR0FJWCxHQUFVLEdBSVYsR0FBUyxHQUlULEdBQVEsR0FJUixHQUFPLEdBRVAsR0FBUyxHQUVULEdBQVUsR0FFVixHakRzdEJKLFNBQW1CZ1csRUFBSTdQLEdBQ3JCLElBQUluTixFQUFNZ2QsRUFBR3RvQixPQUNiLEdBQVksSUFBUnNMLEVBQUosQ0FHQSxJQUdJd0UsRUFIQWQsRUFBTyxHQUFxQ3NaLEdBQUksU0FBVzB2RCxFQUFPZ1QsR0FDOUQsT0FBT3Z5RSxFQUFJdS9ELEVBQU0sR0FBSWdULEVBQVEsSUFBTSxLQUl6Q2w3RSxFQURFZCxHQUFRLEVBQ0QybEYsR0FBbUJyc0UsRUFBSSxFQUFHdFosR0FHMUJpbEYsR0FBc0IzckUsR0FEL0J0WixFQUFlLEdBQVBBLEdBQ2tDLEVBQUksRUFBR0EsR0FFbkQsSUFBSSxJQUFJclMsRUFBSXFTLEVBQU1yUyxFQUFJMk8sSUFBTzNPLEVBQUUsQ0FDN0IsSUFBSWlTLEVBQVEwWixFQUFHM3JCLEdBQ2ZtVCxFQUFTMG1GLEdBQWExbUYsRUFBUWxCLEVBQU0sR0FBSUEsRUFBTSxHQUFJNkosR0FFcEQsT0FBTzNJLElpRHZ1QkwsR0FBYyxHQUVkLEdBQWdCLEdBRWhCLEdBQVMsR0FJVCxHQUFTLEdBSVQsR0FBVSxHQUlWLEdBQVUsR0FJVixHakR1Z0JKLFNBQWFpaEYsRUFBSXJxRixFQUFHK1IsR0FDbEIsT0FBWSxDQUNWLElBQUlyYSxFQUFJMnlGLEVBQ1IsUUFBVXJ1RixJQUFOdEUsRUFDRixPQUVGLElBQ0lwQixFQUFJeWIsRUFBSS9SLEVBREp0SSxFQUFFRixLQUVWLEdBQVUsSUFBTmxCLEVBQ0YsT0FBTyxFQUFpQm9CLEVBQUVSLE9BRTVCbXpGLEVBQUsvekYsRUFBSSxFQUFJb0IsRUFBRWlVLEtBQU9qVSxFQUFFa1UsUWlEOWdCeEIsR2pEbWpCSixTQUF3QnkrRSxFQUFJcnFGLEVBQUcrd0QsRUFBS2gvQyxHQUNsQyxPQUFZLENBQ1YsSUFBSXJhLEVBQUkyeUYsRUFDUixRQUFVcnVGLElBQU50RSxFQUNGLE9BQU9xNUQsRUFFVCxJQUNJejZELEVBQUl5YixFQUFJL1IsRUFESnRJLEVBQUVGLEtBRVYsR0FBVSxJQUFObEIsRUFDRixPQUFPb0IsRUFBRVIsTUFFWG16RixFQUFLL3pGLEVBQUksRUFBSW9CLEVBQUVpVSxLQUFPalUsRUFBRWtVLFFpRHhqQnhCLEdBQVEsR0FJUixHQUFhLEdBSWIsR0FBTyxHQUlQLEdBQWMsR0NoV2xCLFNBQVMsR0FBVTJvQixFQUFNdndCLEdBQ3ZCLElBQUkrTixFQUFNL04sRUFBRytOLElBQ2IsTUFBTyxDQUNDQSxJQUFLQSxFQUNMd2lCLEtBQU0sR0FBdUJBLEVBQU14aUIsSUFJN0MsU0FBUyxHQUFPMWIsRUFBRzJKLEdBQ2pCLElBQUlpcUcsRUFBUTV6RyxFQUFFaytCLEtBQ1Z4aUIsRUFBTTFiLEVBQUUwYixJQUNSbTRGLEVENEdOLFNBQWdCeHlHLEVBQUdzSSxFQUFHK1IsR0FDcEIsUUFBVS9WLElBQU50RSxFQUNGLE9BQU8weEcsR0FBVzF4RyxFQUFHc0ksRUFBRytSLEdDOUdaLENBQW9CazRGLEVBQU9qcUcsRUFBRytSLEdBQzVDLE9BQUltNEYsSUFBWUQsRUFDUDV6RyxFQUVBLENBQ0MwYixJQUFLQSxFQUNMd2lCLEtBQU0yMUUsR0FLbEIsU0FBUyxHQUFXN3pHLEVBQUcySixHQUNyQixJQUFJK1IsRUFBTTFiLEVBQUUwYixJQUVaLE1BQU8sQ0FDQ0EsSUFBS0EsRUFDTHdpQixLRHlOVixTQUFvQnA5QixFQUFHNFUsRUFBTWdHLEdBQzNCLElBQUluTixFQUFNbUgsRUFBS3pTLE9BQ2YsUUFBVTBDLElBQU43RSxFQUdGLElBRkEsSUFBSWd6RyxFQUFLaHpHLEVBQ0w4UixFQUFLLElBQ0csQ0FDVixJQUFJaFQsRUFBSWdULEVBRVIsR0FBSWhULEdBQUsyTyxFQUNQLE9BRlF1bEcsRUFJVixJQUNJdHBHLEVBQUl1b0csR0FMRWUsRUFJQXArRixFQUFLOVYsR0FDYzhiLEdBQzdCLFFBQVUvVixJQUFONkUsRUFDRixPQUFPQSxFQUVUb0ksRUFBS2hULEVBQUksRUFBSSxFQUNiazBHLEVBQUt0cEcsR0M3T0ssQ0FBd0J4SyxFQUFFaytCLEtBQU12MEIsRUFBRytSLElBT25ELFNBQVMsR0FBSTFiLEVBQUdtQixFQUFLakIsR0FDbkIsSUFBSXdiLEVBQU0xYixFQUFFMGIsSUFDWixNQUFPLENBQ0NBLElBQUtBLEVBQ0x3aUIsS0FBTSxHQUFpQmwrQixFQUFFaytCLEtBQU0vOEIsRUFBS2pCLEVBQUd3YixJQW9CakQsU0FBUyxHQUFPMWIsRUFBR21CLEVBQUt3SixHQUN0QixPQVRGLFNBQWlCM0ssRUFBR21CLEVBQUt3SixHQUN2QixJQUFJK1EsRUFBTTFiLEVBQUUwYixJQUNaLE1BQU8sQ0FDQ0EsSUFBS0EsRUFDTHdpQixLQUFNLEdBQXFCbCtCLEVBQUVrK0IsS0FBTS84QixFQUFLd0osRUFBRytRLElBSzVDLENBQVExYixFQUFHbUIsRUFBSyxFQUFVd0osSUE4Qm5DLFNBQVMsR0FBTWlsRixFQUFJQyxFQUFJbGxGLEdBQ3JCLE9BVEYsU0FBZ0JpbEYsRUFBSUMsRUFBSWxsRixHQUN0QixJQUFJK1EsRUFBTWswRSxFQUFHbDBFLElBQ2IsTUFBTyxDQUNDQSxJQUFLQSxFQUNMd2lCLEtBQU0sR0FBb0IweEQsRUFBRzF4RCxLQUFNMnhELEVBQUczeEQsS0FBTXZ6QixFQUFHK1EsSUFLaEQsQ0FBT2swRSxFQUFJQyxFQUFJLEVBQVVsbEYsSUFHbEMsU0FBUyxHQUFLZ0QsR0FDWixNQUFPLENBQ0MrTixJQUFLL04sRUFBRytOLElBQ1J3aUIsVUFBTXY0QixHQUloQixTQUFTLEdBQVEyZCxHQUNmLE9BQU8sR0FBcUJBLEVBQUk0YSxNQXVCbEMsU0FBUyxHQUFPbCtCLEVBQUd3eEYsRUFBSzdtRixHQUN0QixPQUxGLFNBQWlCM0ssRUFBR3d4RixFQUFLN21GLEdBQ3ZCLE9BQU8sR0FBcUIzSyxFQUFFaytCLEtBQU1zekQsRUFBSzdtRixHQUlsQyxDQUFRM0ssRUFBR3d4RixFQUFLLEVBQVU3bUYsSUEwQm5DLFNBQVMsR0FBSzNLLEVBQUcySyxHQUNmLE9BUkYsU0FBZTNLLEVBQUcySyxHQUNoQixNQUFPLENBQ0MrUSxJQUFLMWIsRUFBRTBiLElBQ1B3aUIsS0FBTSxHQUFtQmwrQixFQUFFaytCLEtBQU12ekIsSUFLbEMsQ0FBTTNLLEVBQUcsRUFBVTJLLElBa0I1QixTQUFTLEdBQVUzSyxFQUFHMEIsR0FDcEIsT0FoQkYsU0FBb0IxQixFQUFHMEIsR0FDckIsSUFBSWdhLEVBQU0xYixFQUFFMGIsSUFDUjdKLEVBQVEsR0FBd0I3UixFQUFFaytCLEtBQU14OEIsR0FDNUMsTUFBa0IsQ0FDVixDQUNFZ2EsSUFBS0EsRUFDTHdpQixLQUFNcnNCLEVBQU0sSUFFZCxDQUNFNkosSUFBS0EsRUFDTHdpQixLQUFNcnNCLEVBQU0sS0FNZixDQUFXN1IsRUFBRyxFQUFVMEIsSUFVakMsU0FBUyxHQUFJMUIsRUFBRzJLLEdBQ2QsT0FSRixTQUFjM0ssRUFBRzJLLEdBQ2YsTUFBTyxDQUNDK1EsSUFBSzFiLEVBQUUwYixJQUNQd2lCLEtBQU0sR0FBa0JsK0IsRUFBRWsrQixLQUFNdnpCLElBS2pDLENBQUszSyxFQUFHLEVBQVUySyxJQVUzQixTQUFTLEdBQVczSyxFQUFHMkssR0FDckIsT0FSRixTQUFxQjNLLEVBQUcySyxHQUN0QixNQUFPLENBQ0MrUSxJQUFLMWIsRUFBRTBiLElBQ1B3aUIsS0FBTSxHQUF5QmwrQixFQUFFaytCLEtBQU12ekIsSUFLeEMsQ0FBWTNLLEVBQUcsRUFBVTJLLElBR2xDLFNBQVMsR0FBSzJZLEdBQ1osT0FBTyxHQUFrQkEsRUFBSTRhLE1BRy9CLFNBQVMsR0FBTzVhLEdBQ2QsT0FBTyxHQUFvQkEsRUFBSTRhLE1BR2pDLFNBQVMsR0FBUWwrQixHQUNmLE9BQU8sR0FBcUJBLEVBQUVrK0IsTUFHaEMsU0FBUyxHQUFZbCtCLEdBQ25CLE9BQU8sR0FBeUJBLEVBQUVrK0IsTUFHcEMsU0FBUyxHQUFjbCtCLEdBQ3JCLE9BQU8sR0FBMkJBLEVBQUVrK0IsTUFHdEMsU0FBUyxHQUFPbCtCLEdBQ2QsT0FBTyxHQUFvQkEsRUFBRWsrQixNQU8vQixTQUFTLEdBQU9sK0IsR0FDZCxPQUFPLEdBQW9CQSxFQUFFaytCLE1BTy9CLFNBQVMsR0FBUWwrQixHQUNmLE9BQU8sR0FBcUJBLEVBQUVrK0IsTUFPaEMsU0FBUyxHQUFRbCtCLEdBQ2YsT0FBTyxHQUFxQkEsRUFBRWsrQixNQWVoQyxTQUFTLEdBQWU1YSxFQUFLM1osRUFBRyt3RCxHQUM5QixPQUFPLEdBQTRCcDNDLEVBQUk0YSxLQUFNdjBCLEVBQUcrd0QsRUFBS3AzQyxFQUFJNUgsS0FtQjNELFNBQVMsR0FBR3E0RixFQUFJQyxFQUFJemIsR0FDbEIsT0FMRixTQUFhd2IsRUFBSUMsRUFBSXpiLEdBQ25CLE9BQU8sR0FBaUJ3YixFQUFHNzFFLEtBQU04MUUsRUFBRzkxRSxLQUFNNjFFLEVBQUdyNEYsSUFBSzY4RSxHQUkzQyxDQUFJd2IsRUFBSUMsRUFBSSxFQUFVemIsSUFPL0IsU0FBUyxHQUFJd2IsRUFBSUMsRUFBSWxjLEdBQ25CLE9BTEYsU0FBY2ljLEVBQUlDLEVBQUlsYyxHQUNwQixPQUFPLEdBQWtCaWMsRUFBRzcxRSxLQUFNODFFLEVBQUc5MUUsS0FBTTYxRSxFQUFHcjRGLElBQUtvOEUsR0FJNUMsQ0FBS2ljLEVBQUlDLEVBQUksRUFBVWxjLElDL1FoQyxJQUFJLEdBQWUsQ0FDakJ5RCxPQUFRLEdBR04sR0FBVSxHQUFzRCxJQUVoRSxHQUFNLEdBQXVCajRFLElBRTdCLEdBQVUsQ0FDWkEsSUFBSyxJQUdILEdBQVksR0FBNEMsSUFFeEQsR0FBUSxHQUFxQjFHLE1BRTdCLEdBQVEsQ0FDVjBHLElBQUssR0FDTDFHLE1BQU8sSUFHTCxHQUFZLEdBQXdDLElBRXhELFNBQVMsR0FBSzFVLEdBQ1osTUFBTyxDQUFDQSxHQUdWLElBQUksR0FBYyxDQUNoQm9iLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLElBR0osR0FBWSxHQUFvRCxJQUVoRSxHQUFPLEdBQXFCcEQsU0FFNUIsR0FBUSxDQUNWdjRFLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLEdBQ05wRCxTQUFVLElBR1IsR0FBWSxHQUF3QyxJQUVwRCxHQUFNLEdBQW1CbDFDLElBRXpCLEdBQU0sQ0FDUnJqQyxJQUFLLEdBQ0xxakMsSUFBSyxJQUdILEdBQVksR0FBb0MsSUFlaEQsSUFiTyxHQUF5QnlnRCxLQU12QixHQUFzQnZ2RixPQU9wQixHQUF3QjJvRixXQUVuQyxHQUFZLEdBQXdCRyxXQUVwQyxHQUFvQixHQUF3QlAsU0FFNUMsR0FBd0IsR0FBd0JMLGFBRWhELEdBQXlCLEdBQXdCb0gsY0FFakQsR0FBVyxDQUNiM0csVUFBVyxHQUNYRyxXQUFZLEdBQ1pQLFNBQVUsR0FDVkwsYUFBYyxHQUNkb0gsY0FBZSxJQUdiLEdBQVksR0FBOEMsSUFFMUQsR0FBYyxHQUFVN0csWUFFNUIsU0FBUyxHQUFLMlEsRUFBU2dELEVBQUtDLEdBQzFCLE9BQVksQ0FDVixJQUFJamtCLEVBQUtpa0IsRUFDTDNvRixFQUFLMG9GLEVBQ0xwaUcsRUFBUSxFQUFlMFosRUFBSSxHQUMzQmdyRSxFQUFVLEVBQWV0RyxFQUFJLEdBQ2pDLFFBQWN0cUYsSUFBVmtNLEVBQ0YsWUFBbUJsTSxJQUFaNHdGLEVBRVQsUUFBZ0I1d0YsSUFBWjR3RixFQUNGLE9BQU8sRUFFVCxJQUFLLEVBQVMwYSxFQUFTLEVBQTBCcC9GLEdBQVEsRUFBMEIwa0YsSUFDakYsT0FBTyxFQUVUMmQsRUFBTSxFQUFzQmprQixFQUFJLEdBQ2hDZ2tCLEVBQU0sRUFBc0Ixb0YsRUFBSSxJQVNwQyxTQUFTLEdBQUdnbUYsR0FJVixNQUFPLENBQ0MvVSxHQUpDLFNBQVV2aEIsRUFBT2dULEdBQ3hCLE9BQU8sR0FBS3NqQixFQUFJL1UsR0FBSXZoQixFQUFPZ1QsS0FPL0IsU0FBUyxHQUFPdWpCLEVBQVdqbUYsR0FFekIsTUFBTyxJQUFPLEVBREgsRUFBUyxHQUFhLElBQ0osS0FBTSxFQUFTLEdBQUtpbUYsRUFBV2ptRixJQUFPLElBT3JFLFNBQVMsR0FBS2ttRixHQUlaLE1BQU8sQ0FDQzlKLEtBSkcsU0FBVTFzQixHQUNuQixPQUFPLEdBQU93MkIsRUFBTTlKLEtBQU0xc0IsS0FPOUIsSUFLSSxHQUFTLEVBMEVULElBeEVjLEdBQVFvMUIsWUFFQSxHQUFVeE4sb0JBRXRCLEdBQVVDLFFBRVgsR0FBVWhGLE9BRVAsR0FBVWlGLFVBRVgsR0FBVUMsU0FFZCxHQUFVOUUsS0FFRyxHQUFVK0Msa0JBRWpCLEdBQVVLLFdBRVQsR0FBVUMsWUFFakIsR0FBVUwsS0FFVixHQUFVQyxLQUVWLEdBQVVDLEtBRVYsR0FBVUMsS0FFUixHQUFVRyxPQUVWLEdBQVVDLE9BRVYsR0FBVUUsT0FFVixHQUFVRSxPQUVQLEdBQVVFLFVBRVYsR0FBVUMsVUFFVixHQUFVQyxVQUVWLEdBQVVDLFVBRUksR0FBVXFCLHdCQUUzQixHQUFVcEUsT0FFQyxHQUFVbUQsa0JBRXBCLEdBQVVDLFFBRVYsR0FBVW5ELFFBRUgsR0FBVXFELGVBRU4sR0FBVUMsbUJBRXRCLEdBQVVqRCxPQUVYLEdBQVVULE1BRVQsR0FBVUUsT0FFVixHQUFVMk8sT0FFSSxHQUFVVyxxQkFFM0IsR0FBVTdnQyxJQUVWLEdBQVVsVSxJQUVILEdBQVVvMUMsWUFvQ3ZCLElBbENXLEdBQVVDLFNBRVQsR0FBVUwsVUFFWixHQUFVam1HLFFBRVosR0FBVWttRyxNQUVaLEdBQVUzbUYsSUFFUixHQUFVNG1GLE1BRVosR0FBVXhvRixJQUVOLEdBQVV5b0YsUUFFWCxHQUFVM3JHLE9BRVosR0FBVXFlLEtBRVQsR0FBVStKLE1BRVIsR0FBVTVqQixRQUVELEdBQVV1bkcsaUJBRXRCLEdBQVU3NUMsS0FFRCxHQUFVODVDLGNBRWhCLEdBQVV2bUUsUUFFVSxHQUFVeW1FLDRCQUViLEdBQVVHLDBCQUlyQyxJQUZVLEdBQVVFLFFBRUgsR0FBVUMsZ0JBTTNCLElBSmdDLEdBQVVFLDhCQUVoQixHQUFVSSx3QkFFYixHQUFVRyxzQkFFakMsR0FBd0IsR0FBVUMsc0JBTWxDLEdBQVcsR0FFWCxHQUFTLEdDdFJiLFNBQVMsR0FBSWh2RyxFQUFLTixFQUFPc3pHLEdBQ3ZCLE9BQU8sR0FBYUEsRUFBS2h6RyxFQUFLTixHQU9oQyxTQUFTLEdBQVNNLEVBQUtnekcsR0FDckIsT0ZrUEYsU0FBYTd3RixFQUFLM1osR0FDaEIsT0FBTyxHQUFpQjJaLEVBQUk0YSxLQUFNdjBCLEVBQUcyWixFQUFJNUgsS0VuUGxDLENBQWF5NEYsRUFBS2h6RyxHQUczQixTQUFTaXpHLEdBQVd0cUIsRUFBWTVoRixFQUFHQyxHQUNqQyxPQUFPLEdBQWFELEVBQUdDLEVBQUcyaEYsR0FHNUIsU0FBU3VxQixHQUFVdnFCLEVBQVk1aEYsRUFBR0MsR0FDaEMsT0FBTyxHQUF3QixHQUFhRCxFQUFHQyxHQUFHLFNBQVdELEVBQUdDLEdBQzlDLE9BQU8sR0FBc0IsRUFBUzJoRixFQUFZNWhGLEVBQUdDLFFBSXpFLFNBQVMsR0FBSzJoRixFQUFZNWhGLEVBQUdDLEdBQzNCLE9BQU8sR0FBWUQsRUFBR0MsRUFBRzJoRixHQUczQixTQUFTLEdBQUt3cUIsRUFBSUgsR0FDaEIsT0ZvRXNCeHBHLEVFcEVXMnBHLEVGcUUxQixHRXJFcUJILEVGcUVPajJFLEtBQU0sRUFBVXZ6QixJQURyRCxJQUF3QkEsRUVqRXhCLFNBQVMsR0FBUStHLEVBQUl5aUcsR0FDbkIsT0Z3RWtCeHBHLEVFeEVXK0csRUZ5RXRCLEdFekVpQnlpRyxFRnlFT2oyRSxLQUFNLEVBQVV2ekIsSUFEakQsSUFBb0JBLEVFckVwQixTQUFTLEdBQVMrRyxFQUFJOC9FLEVBQUsyaUIsR0FDekIsT0FBTyxHQUFnQkEsRUFBSzNpQixFQUFLOS9FLEdBR25DLFNBQVMsR0FBSTZpRyxFQUFNSixHQUNqQixPRmdGZ0J4cEcsRUVoRlc0cEcsRUZpRnBCLEdFakZlSixFRmlGT2oyRSxLQUFNLEVBQVV2ekIsSUFEL0MsSUFBa0JBLEVFN0VsQixTQUFTLEdBQUk0cEcsRUFBTUosR0FDakIsT0ZvRmV4cEcsRUVwRlc0cEcsRUZxRm5CLEdFckZjSixFRnFGT2oyRSxLQUFNLEVBQVV2ekIsSUFEOUMsSUFBaUJBLEVFN0RqQixTQUFTLEdBQUsyWSxHQUNaLE9BQU8sR0FBb0IsR0FBcUJBLElBR2xELFNBQVMsR0FBT0EsR0FDZCxPQUFPLEdBQW9CLEdBQXVCQSxJQUdwRCxTQUFTLEdBQUluaUIsRUFBS2d6RyxHQUNoQixPRmdLRixTQUFhN3dGLEVBQUszWixHQUNoQixPQUFPLEdBQWlCMlosRUFBSTRhLEtBQU12MEIsRUFBRzJaLEVBQUk1SCxLRWpLbEMsQ0FBYXk0RixFQUFLaHpHLEdBRzNCLFNBQVMsR0FBVUEsRUFBS3NzRyxFQUFXMEcsR0FDakMsT0FBTyxHQUF3QkEsRUFBS2h6RyxFQUFLc3NHLEdBRzNDLFNBQVMsR0FBT3RzRyxFQUFLZ3pHLEdBQ25CLE9BQU8sR0FBZ0JBLEVBQUtoekcsR0FHOUIsU0FBUyxHQUFXdVUsRUFBTXkrRixHQUN4QixPQUFPLEdBQW9CQSxFQUFLeitGLEdBR2xDLFNBQVMsR0FBT3ZVLEVBQUtxekcsRUFBVUwsR0FDN0IsT0FBTyxHQUFnQkEsRUFBS2h6RyxFQUFLcXpHLEdBR25DLFNBQVMsR0FBTUMsRUFBU3ZzRyxFQUFHQyxHQUN6QixPQUFPLEdBQWVELEVBQUdDLEVBQUdzc0csR0FHOUIsU0FBUyxHQUFVOThGLEVBQUt3OEYsR0FDdEIsT0Z0RW9CcHlHLEVFc0VXNFYsRUZwRXhCLENBQ0MrRCxJQUZKQSxHQURhMWIsRUVzRVNtMEcsR0ZyRWR6NEYsSUFHSndpQixLQUFNLEdBQXVCbCtCLEVBQUVrK0IsS0FBTW44QixFQUFHMlosSUFKbEQsSUFBbUIxYixFQUFHK0IsRUFDaEIyWixFRXdFTixTQUFTLEdBQU9oSyxFQUFJeWlHLEdBQ2xCLE9BQU8sR0FBY0EsRUFBS3ppRyxHQUc1QixTQUFTLEdBQVVBLEVBQUl5aUcsR0FDckIsT0FBTyxHQUFjQSxHQUFLLFNBQVdoekcsRUFBS04sR0FDNUIsT0FBUSxFQUFTNlEsRUFBSXZRLEVBQUtOLE1BSTFDLFNBQVMsR0FBVTZRLEVBQUl5aUcsR0FDckIsT0FBTyxHQUFtQkEsRUFBS3ppRyxHQUdqQyxTQUFTLEdBQUlBLEVBQUl5aUcsR0FDZixPQUFPLEdBQWFBLEVBQUt6aUcsR0FHM0IsU0FBUyxHQUFXQSxFQUFJeWlHLEdBQ3RCLE9BQU8sR0FBb0JBLEVBQUt6aUcsR0FHbEMsU0FBU2dqRyxHQUFZQyxFQUFZQyxHQUMvQixJQWNJQyxFQUFlLFNBQVVybEIsRUFBTTdsRixHQUNqQyxPQUFPLEdBQWE2bEYsRUFBTSxFQUFTb2xCLEVBQVNqckcsR0FmekIsU0FBVUEsR0FDN0IsSUFBSWd4RixFQUFjLEVBQVNpYSxFQUFTanJHLEdBQ2hDa3hGLEVBQWdCLFNBQVU1ZixHQUM1QixPQUFPLEdBQXdCQSxFQUFPMGYsRUFBcUIsSUFFN0QsT0FBTyxTQUFXMWYsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWE3SSxHQUFlLFNBQVd0dkUsR0FDdEQsTUFBZSxDQUNQNWhCLEVBQ0E0aEIsS0FFTjB2RCxJQUk0QjY1QixDQUFlbnJHLEVBQWZtckcsQ0FBa0J0bEIsS0FFcEUsT0FBTyxTQUFXdlUsR0FDZCxPQUFPLEdBQXNCeW9CLGNBQWEsU0FBV3lRLEdBQ3ZDLE9BQU8sR0FBaUJBLEVBQUssR0FBY1EsR0FBYUUsTUFDdEQsU0FBVzU1QixHQUNiLE9BQU8sR0FBYUEsRUFBTyxNQUN6QkEsSUFJdEIsU0FBUzg1QixHQUFhSixFQUFZQyxHQUNoQyxJQVlJQyxFQUFlLFNBQVVybEIsRUFBTTdsRixHQUNqQyxPQUFPLEdBQWE2bEYsRUFBTSxFQUFTb2xCLEVBQVNqckcsR0FiekIsU0FBVUEsR0FDN0IsSUFBSWd4RixFQUFjLEdBQ2RFLEVBQWdCLEVBQVMrWixFQUFTanJHLEdBQ2xDcXJHLEVBQWdCLFNBQVUvNUIsR0FDNUIsT0FBTyxHQUF3QkEsRUFBTzRmLEVBQWVGLElBRXZELE9BQU8sU0FBVzFmLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhc1IsR0FBZSxTQUFXYixHQUN0RCxPQUFPLEVBQWtCQSxFQUFLLENBQUN4cUcsTUFDN0JzeEUsSUFJNEI2NUIsQ0FBZW5yRyxFQUFmbXJHLENBQWtCdGxCLEtBRXBFLE9BQU8sU0FBVzJrQixHQUNkLE90RHVQVWpzRyxFc0R2UGVpc0csRXREdVBaeHFHLEVzRHZQaUIsR0FBY2dyRyxHdEQrT2xELFNBQWlCenNHLEVBQUd5QixFQUFHZ0IsR0FFckIsSUFEQSxJQUFJakssRUFBSWlKLEVBQ0EvSixFQUFJLEVBQUdvbEcsRUFBVzk4RixFQUFFakYsT0FBUXJELEVBQUlvbEcsSUFBWXBsRyxFQUNsRGMsRUFBSWlLLEVBQUVqSyxFQUFHd0gsRUFBRXRJLElBRWIsT0FBT2MsRUFJQXUwRyxDQUFRL3NHLEVBQUd5QixFQUFHLEVzRHhQd0NrckcsSXREdVAvRCxJQUFnQjNzRyxFQUFHeUIsR3NEblBuQixTQUFTdXJHLEdBQVEvcUcsR0FDZixJQUdJZ3JHLEVBQWEsR0FBdUIsQ0FDbEN6NUYsSUFKSSxTQUFVeFQsRUFBR0MsR0FDckIsT0FBTyxHQUFzQixFQUFTZ0MsRUFBRTYyQyxRQUFTOTRDLEVBQUdDLE9BaUN0RCxPQURBLEdBSGMsQ0FDWm1iLElBQUssS0FHQSxDQUNDNnhGLFdBQVksR0FDWnJPLEtBOUJHLFNBQVU3ckIsR0FDbkIsT0FBTyxHQUFjazZCLElBOEJmNXBHLElBQUssR0FDTDZwRyxVQTdCUSxTQUFVajBHLEVBQUtOLEdBQzdCLE9BQU8sR0FBYSxHQUFjczBHLEdBQWFoMEcsRUFBS04sSUE2QjlDazBGLFFBQVMsR0FDVCtaLFNBQVUsR0FDVnNGLFdBQVlBLEdBQ1pDLFVBQVdBLEdBQ1hnQixLQUFNLEdBQ05sZ0QsS0FBTSxHQUNOMXRELFFBQVMsR0FDVDZ0RyxTQUFVLEdBQ1Y3N0MsSUFBSyxHQUNMa1UsSUFBSyxHQUNMMXFFLE9BQVEsR0FDUnlsQyxRQUFTLEdBQ1R1QixVQXZDUSxTQUFVdHlCLEdBQ3hCLE9BQU8sR0FBbUJBLEVBQUt3OUYsSUF1Q3pCSSxlQXJDZSxTQUFVQyxFQUFPNzlGLEdBQ3RDLE9BQU8sRUEzSVgsU0FBd0JnOUYsRUFBWWEsR0FDbEMsT0FBTyxFQUFTLElBQWlDLFNBQVdseUYsRUFBS2piLEdBQ25ELE9BQU8sR0FBYWliLEVBQUssRUFBU2t5RixFQUFPbnRHLEdBQUlBLEtBQzNDLEdBQWNzc0csSUF3SVpZLENBQWVKLEVBQVlLLEdBQVE3OUYsSUFxQzdDdTNGLE9BQVEsR0FDUjExRSxTQXBDTyxTQUFVdXFFLEdBQ3ZCLE9BQU8sR0FBbUIsR0FBa0JBLEdBQU1vUixJQW9DNUNNLGNBbENjLFNBQVVELEVBQU96UixHQUNyQyxPQXZJSixTQUF1QjRRLEVBQVlhLEdBQ2pDLE9BQU8sSUFBK0IsU0FBV2x5RixFQUFLamIsR0FDeEMsT0FBTyxHQUFhaWIsRUFBSyxFQUFTa3lGLEVBQU9udEcsR0FBSUEsS0FDM0MsR0FBY3NzRyxJQW9JckJjLENBQWNOLEVBQVlLLEVBQTFCQyxDQUFpQzFSLElBa0NsQ3J1RixLQUFNLEdBQ05nZ0csU0FBVSxHQUNWaCtGLE9BQVEsR0FDUmkrRixXQUFZLEdBQ1p6aEIsT0FBUSxHQUNSRSxPQUFRLEdBQ1Jyc0UsSUFBSyxHQUNMNUIsSUFBSyxHQUNMMWxCLElBQUssR0FDTDB3RyxVQUFXLEdBQ1gzakUsT0FBUSxHQUNSb29FLFdBQVksR0FDWkMsT0FBUSxHQUNSMWhHLE1BQU8sR0FDUDJoRyxVQUFXLEdBQ1hoMEYsT0FBUSxHQUNSaTBGLEtBQU0sR0FDTkMsVUFBVyxHQUNYeDRDLE9BQVEsR0FDUnk0QyxVQUFXLEdBQ1gzeUYsSUFBSyxHQUNMNHlGLFdBQVksR0FDWnhCLFlBdERZLFNBQVVFLEVBQVM3USxHQUNyQyxPQUFPMlEsR0FBWVMsRUFBWVAsRUFBeEJGLENBQWlDM1EsSUFzRGxDZ1IsYUFwRGEsU0FBVUgsRUFBU2o5RixHQUN0QyxPQUFPbzlGLEdBQWFJLEVBQVlQLEVBQXpCRyxDQUFrQ3A5RixLQ2xON0MsU0FBUyxHQUFXdFcsR0FDbEIsWUFBVXNFLElBQU50RSxFQUNLQSxFQUFFMG5ELE9BRUYsRUFpQlgsU0FBUyxHQUFPbHBELEVBQUd3SSxFQUFHM0gsR0FDcEIsSUFBSXl5RixPQUFXeHRGLElBQU45RixFQUFrQkEsRUFBRWtwRCxPQUFTLEVBQ2xDOHhCLE9BQVdsMUUsSUFBTmpGLEVBQWtCQSxFQUFFcW9ELE9BQVMsRUFDdEMsTUFBTyxDQUNDbG9ELE1BQU93SCxFQUNQMGdELE9BQVFvcUMsR0FBTXRZLEVBQUtzWSxFQUFLLEVBQUksRUFBSXRZLEVBQUssRUFBSSxFQUN6Q3ZsRSxLQUFNelYsRUFDTjBWLE1BQU83VSxHQUlqQixTQUFTLEdBQVVpSixHQUNqQixNQUFPLENBQ0M5SSxNQUFPOEksRUFDUG8vQyxPQUFRLEVBQ1J6ekMsVUFBTTNQLEVBQ040UCxXQUFPNVAsR0FJakIsU0FBUyxHQUFTOUYsRUFBR2EsR0FDbkIsWUFBVWlGLElBQU5qRixRQUNRaUYsSUFBTjlGLEdBQ0tBLEVBQUVrcEQsUUFBVXJvRCxFQUFFcW9ELE9BUzNCLFNBQVMsR0FBSWxwRCxFQUFHd0ksRUFBRzNILEdBQ2pCLElBQUl5eUYsT0FBV3h0RixJQUFOOUYsRUFBa0JBLEVBQUVrcEQsT0FBUyxFQUNsQzh4QixPQUFXbDFFLElBQU5qRixFQUFrQkEsRUFBRXFvRCxPQUFTLEVBQ3RDLEdBQUlvcUMsR0FBTXRZLEVBQUssRUFBSSxHQUFJLENBQ3JCLElBQUkwWSxFQUFLMXpGLEVBQUVnQixNQUNQNHlGLEVBQUs1ekYsRUFBRXlWLEtBQ1BvK0UsRUFBSzd6RixFQUFFMFYsTUFDWCxPQUFJLEdBQVNrK0UsRUFBSUMsR0FDUixHQUFPRCxFQUFJRixFQUFJLEdBQU9HLEVBQUlyckYsRUFBRzNILElBRTdCLEdBQU8sR0FBTyt5RixFQUFJRixFQUFJRyxFQUFHcCtFLE1BQU9vK0UsRUFBRzd5RixNQUFPLEdBQU82eUYsRUFBR24rRSxNQUFPbE4sRUFBRzNILElBR3pFLEdBQUltNkUsSUFBT3NZLEVBQUssRUFBSSxHQUNsQixNQUFPLENBQ0N0eUYsTUFBT3dILEVBQ1AwZ0QsT0FBUW9xQyxHQUFNdFksRUFBS3NZLEVBQUssRUFBSSxFQUFJdFksRUFBSyxFQUFJLEVBQ3pDdmxFLEtBQU16VixFQUNOMFYsTUFBTzdVLEdBR2pCLElBQUlpekYsRUFBS2p6RixFQUFFRyxNQUNQZ3pGLEVBQUtuekYsRUFBRTRVLEtBQ1B3K0UsRUFBS3B6RixFQUFFNlUsTUFDWCxPQUFJLEdBQVN1K0UsRUFBSUQsR0FDUixHQUFPLEdBQU9oMEYsRUFBR3dJLEVBQUd3ckYsR0FBS0YsRUFBSUcsR0FFN0IsR0FBTyxHQUFPajBGLEVBQUd3SSxFQUFHd3JGLEVBQUd2K0UsTUFBT3UrRSxFQUFHaHpGLE1BQU8sR0FBT2d6RixFQUFHdCtFLE1BQU9vK0UsRUFBSUcsSUFJeEUsU0FBU3FpQixHQUFRbmlCLEdBQ2YsT0FBWSxDQUNWLElBQUkzeUYsRUFBSTJ5RixFQUNKQyxFQUFNNXlGLEVBQUVpVSxLQUNaLFFBQVkzUCxJQUFSc3VGLEVBQ0YsT0FBTzV5RixFQUFFUixNQUVYbXpGLEVBQUtDLEdBbUJULFNBQVNtaUIsR0FBUXBpQixHQUNmLE9BQVksQ0FDVixJQUFJM3lGLEVBQUkyeUYsRUFDSkMsRUFBTTV5RixFQUFFa1UsTUFDWixRQUFZNVAsSUFBUnN1RixFQUNGLE9BQU81eUYsRUFBRVIsTUFFWG16RixFQUFLQyxHQW1CVCxTQUFTLEdBQW9CNXlGLEVBQUdnSCxHQUM5QixJQUFJd3NGLEVBQUt4ekYsRUFBRVIsTUFDUDh6RixFQUFLdHpGLEVBQUVpVSxLQUNQcy9FLEVBQUt2ekYsRUFBRWtVLE1BQ1gsWUFBVzVQLElBQVBndkYsRUFDSyxHQUFJLEdBQW9CQSxFQUFJdHNGLEdBQUl3c0YsRUFBSUQsSUFFM0N2c0YsRUFBRXExRCxTQUFXbTNCLEVBQ05ELEdBUVgsU0FBUyxHQUFhSyxFQUFJQyxHQUN4QixPQUFZLENBR1YsUUFBVXZ2RixJQURGc3ZGLEVBRU4sT0FITUMsRUFLUkEsRUFBYSxDQUpMRCxFQURBQyxHQVNSRCxFQVJRQSxFQVFEMy9FLE1BS1gsU0FBUyxHQUFTMCtFLEVBQUlycEYsR0FDcEIsT0FBWSxDQUNWLElBQUl0SixFQUFJMnlGLEVBQ1IsUUFBVXJ1RixJQUFOdEUsRUFDRixPQUVGLEdBQVNBLEVBQUVpVSxLQUFNM0ssR0FDakJBLEVBQUV0SixFQUFFUixPQUNKbXpGLEVBQUszeUYsRUFBRWtVLE9BU1gsU0FBUyxHQUFRMi9FLEVBQUlPLEVBQU85cUYsR0FDMUIsT0FBWSxDQUNWLElBQUkrcUYsRUFBT0QsRUFDUDl6RixFQUFJdXpGLEVBQ1IsUUFBVXZ2RixJQUFOaEUsRUFDRixPQUFPK3pGLEVBRVQsSUFBSXRyRixFQUFJekksRUFBRWQsTUFDTmhCLEVBQUk4QixFQUFFMlQsS0FDTjVVLEVBQUlpQixFQUFFNFQsTUFDVmtnRixFQUFROXFGLEVBQUUsR0FBUTlLLEVBQUc2MUYsRUFBTS9xRixHQUFJUCxHQUMvQjhxRixFQUFLeDBGLEdBU1QsU0FBUyxHQUFPc3pGLEVBQUl0eUYsR0FDbEIsT0FBWSxDQUNWLElBQUlMLEVBQUkyeUYsRUFDUixRQUFVcnVGLElBQU50RSxFQUNGLE9BQU8sRUFFVCxJQUFLSyxFQUFFTCxFQUFFUixPQUNQLE9BQU8sRUFFVCxJQUFLLEdBQU9RLEVBQUVpVSxLQUFNNVQsR0FDbEIsT0FBTyxFQUVUc3lGLEVBQUszeUYsRUFBRWtVLE9BU1gsU0FBUyxHQUFNeStFLEVBQUl0eUYsR0FDakIsT0FBWSxDQUNWLElBQUlMLEVBQUkyeUYsRUFDUixRQUFVcnVGLElBQU50RSxFQUNGLE9BQU8sRUFFVCxHQUFJSyxFQUFFTCxFQUFFUixPQUNOLE9BQU8sRUFFVCxHQUFJLEdBQU1RLEVBQUVpVSxLQUFNNVQsR0FDaEIsT0FBTyxFQUVUc3lGLEVBQUszeUYsRUFBRWtVLE9BeUJYLFNBQVM4Z0csR0FBVzFoQixFQUFJdHNGLEVBQUd1c0YsR0FDekIsUUFBV2p2RixJQUFQZ3ZGLEVBQ0YsT0FsQkosU0FBUyxFQUFjdHpGLEVBQUdnSCxHQUN4QixZQUFVMUMsSUFBTnRFLEVBQ0ssR0FBSSxFQUFjQSxFQUFFaVUsS0FBTWpOLEdBQUloSCxFQUFFUixNQUFPUSxFQUFFa1UsT0FFekMsR0FBVWxOLEdBY1YsQ0FBY3VzRixFQUFJdnNGLEdBRTNCLFFBQVcxQyxJQUFQaXZGLEVBQ0YsT0FiSixTQUFTLEVBQWN2ekYsRUFBR2dILEdBQ3hCLFlBQVUxQyxJQUFOdEUsRUFDSyxHQUFJQSxFQUFFaVUsS0FBTWpVLEVBQUVSLE1BQU8sRUFBY1EsRUFBRWtVLE1BQU9sTixJQUU1QyxHQUFVQSxHQVNWLENBQWNzc0YsRUFBSXRzRixHQUUzQixJQUFJd3RGLEVBQUtsQixFQUFHNXJDLE9BQ1Irc0MsRUFBS2xCLEVBQUc3ckMsT0FDWixPQUFJOHNDLEdBQU1DLEVBQUssRUFBSSxHQUNWLEdBQUluQixFQUFHci9FLEtBQU1xL0UsRUFBRzl6RixNQUFPdzFHLEdBQVcxaEIsRUFBR3AvRSxNQUFPbE4sRUFBR3VzRixJQUM3Q2tCLEdBQU1ELEVBQUssRUFBSSxHQUNqQixHQUFJd2dCLEdBQVcxaEIsRUFBSXRzRixFQUFHdXNGLEVBQUd0L0UsTUFBT3MvRSxFQUFHL3pGLE1BQU8rekYsRUFBR3IvRSxPQUU3QyxHQUFPby9FLEVBQUl0c0YsRUFBR3VzRixHQUl6QixTQUFTMGhCLEdBQWF2Z0IsRUFBSUMsR0FDeEIsUUFBV3J3RixJQUFQb3dGLEVBQ0YsT0FBT0MsRUFFVCxRQUFXcndGLElBQVBxd0YsRUFDRixPQUFPRCxFQUVULElBQUkxdEYsRUFBSSxDQUNOcTFELFNBQVVzNEIsRUFBR24xRixPQUVYbzFGLEVBQU0sR0FBb0JELEVBQUkzdEYsR0FDbEMsT0FBT2d1RyxHQUFXdGdCLEVBQUkxdEYsRUFBRXExRCxTQUFVdTRCLEdBR3BDLFNBQVMsR0FBaUI1MEYsRUFBR0ssR0FDM0IsUUFBVWlFLElBQU50RSxFQUNGLE1BQWtCLE1BQ1ZzRSxPQUNBQSxHQUdWLElBQUk5RSxFQUFRUSxFQUFFUixNQUNWZ1IsRUFBUSxHQUFpQnhRLEVBQUVpVSxLQUFNNVQsR0FDakM0MEYsRUFBS3prRixFQUFNLEdBQ1hzL0UsRUFBS3QvRSxFQUFNLEdBQ1gwa0csRUFBSzcwRyxFQUFFYixHQUNQMDFGLEVBQVUsR0FBaUJsMUYsRUFBRWtVLE1BQU83VCxHQUNwQzgwRixFQUFLRCxFQUFRLEdBQ2JFLEVBQUtGLEVBQVEsR0FDakIsT0FBSWdnQixFQUNnQixDQUNWRixHQUFXbGxCLEVBQUl0d0YsRUFBTzQxRixHQUN0QjZmLEdBQWFoZ0IsRUFBSUUsSUFHUCxDQUNWOGYsR0FBYW5sQixFQUFJc0YsR0FDakI0ZixHQUFXL2YsRUFBSXoxRixFQUFPMjFGLElBU2xDLFNBQVMsR0FBV24xRixHQUNsQixJQUFJeEIsRUFBSXdCLEVBQUVpVSxLQUNONVUsRUFBSVcsRUFBRWtVLE1BR1YsT0FBUSxRQUZVNVAsSUFBTjlGLEVBQWtCLEdBQVdBLEdBQUssR0FFMUIsU0FERjhGLElBQU5qRixFQUFrQixHQUFXQSxHQUFLLEdBQ2IsRUFHbkMsU0FBUyxHQUFLVyxHQUNaLFlBQVVzRSxJQUFOdEUsRUFDSyxHQUFXQSxHQUVYLEVBbUhYLFNBQVMsR0FBc0JzVyxFQUFLdzlCLEVBQUs1bUMsR0FDdkMsT0FBUUEsR0FDTixLQUFLLEVBQ0QsT0FDSixLQUFLLEVBQ0QsT0FBTyxHQUFVb0osRUFBSXc5QixJQUN6QixLQUFLLEVBQ0QsSUFBSWk4QyxFQUFLejVFLEVBQUl3OUIsR0FFYixNQUFPLENBQ0N0MEMsTUFGQzhXLEVBQUl3OUIsRUFBTSxFQUFJLEdBR2Y0VCxPQUFRLEVBQ1J6ekMsS0FBTSxHQUFVODdFLEdBQ2hCNzdFLFdBQU81UCxHQUVuQixLQUFLLEVBQ0QsSUFBSTZ3RyxFQUFPNytGLEVBQUl3OUIsR0FDWHNoRSxFQUFPOStGLEVBQUl3OUIsRUFBTSxFQUFJLEdBQ3JCdWhFLEVBQUsvK0YsRUFBSXc5QixFQUFNLEVBQUksR0FDdkIsTUFBTyxDQUNDdDBDLE1BQU80MUcsRUFDUDF0RCxPQUFRLEVBQ1J6ekMsS0FBTSxHQUFVa2hHLEdBQ2hCamhHLE1BQU8sR0FBVW1oRyxJQUU3QixRQUNFLElBQUloZixFQUFLbnBGLEVBQU0sRUFBSSxFQUluQixPQUFPLEdBSEksR0FBc0JvSixFQUFLdzlCLEVBQUt1aUQsR0FDakMvL0UsRUFBSXc5QixFQUFNdWlELEVBQUssR0FDYixHQUFzQi8vRSxHQUFNdzlCLEVBQU11aUQsRUFBSyxHQUFLLEVBQUksR0FBSW5wRixFQUFNbXBGLEVBQUssR0FBSyxFQUFJLEtBSzFGLFNBQVMsR0FBbUIvL0UsRUFBS3c5QixFQUFLNW1DLEdBQ3BDLE9BQVFBLEdBQ04sS0FBSyxFQUNELE9BQ0osS0FBSyxFQUNELE9BQU8sR0FBVW9KLEVBQUl3OUIsSUFDekIsS0FBSyxFQUNELElBQUlpOEMsRUFBS3o1RSxFQUFJdzlCLEdBRWIsTUFBTyxDQUNDdDBDLE1BRkM4VyxFQUFJdzlCLEVBQU0sRUFBSSxHQUdmNFQsT0FBUSxFQUNSenpDLEtBQU0sR0FBVTg3RSxHQUNoQjc3RSxXQUFPNVAsR0FFbkIsS0FBSyxFQUNELElBQUk2d0csRUFBTzcrRixFQUFJdzlCLEdBQ1hzaEUsRUFBTzkrRixFQUFJdzlCLEVBQU0sRUFBSSxHQUNyQnVoRSxFQUFLLytGLEVBQUl3OUIsRUFBTSxFQUFJLEdBQ3ZCLE1BQU8sQ0FDQ3QwQyxNQUFPNDFHLEVBQ1AxdEQsT0FBUSxFQUNSenpDLEtBQU0sR0FBVWtoRyxHQUNoQmpoRyxNQUFPLEdBQVVtaEcsSUFFN0IsUUFDRSxJQUFJaGYsRUFBS25wRixFQUFNLEVBQUksRUFJbkIsT0FBTyxHQUhJLEdBQW1Cb0osRUFBS3c5QixFQUFLdWlELEdBQzlCLy9FLEVBQUl3OUIsRUFBTXVpRCxFQUFLLEdBQ2IsR0FBbUIvL0UsRUFBc0IsR0FBaEJ3OUIsRUFBTXVpRCxFQUFLLEdBQVMsR0FBSW5wRixFQUFNbXBGLEVBQUssR0FBSyxFQUFJLEtBU3ZGLFNBQVMsR0FBWXIyRixFQUFHSyxHQUN0QixRQUFVaUUsSUFBTnRFLEVBQUosQ0FHQSxJQUFJZ0gsRUFBSWhILEVBQUVSLE1BQ05oQixFQUFJd0IsRUFBRWlVLEtBQ041VSxFQUFJVyxFQUFFa1UsTUFDTm9oRyxFQUFPLEdBQVk5MkcsRUFBRzZCLEdBQ3RCNjBHLEVBQUs3MEcsRUFBRTJHLEdBQ1B1dUcsRUFBTyxHQUFZbDJHLEVBQUdnQixHQUMxQixPQUFJNjBHLEVBQ0UxMkcsSUFBTTgyRyxHQUFRajJHLElBQU1rMkcsRUFDZnYxRyxFQUVBZzFHLEdBQVdNLEVBQU10dUcsRUFBR3V1RyxHQUd0Qk4sR0FBYUssRUFBTUMsSUFnRTlCLFNBQVMsR0FBSWhuQixFQUFJQyxFQUFJZ25CLEdBQ25CLElBQUk5ZSxFQUFPLEdBQUtuSSxHQUNab0ksRUFBTyxHQUFLbkksR0FDaEIsR0FBSWtJLElBQVNDLEVBc0JOLE9BQUlELEVBQU9DLEdBQ1IsRUFFRCxFQXRCUCxJQUZBLElBQUlDLEVBQU0sR0FBYXJJLEVBQVksR0FDL0JzSSxFQUFNLEdBQWFySSxFQUFZLEtBQ3ZCLENBQ1YsSUFBSXNJLEVBQUtELEVBQ0xFLEVBQUtILEVBQ1QsSUFBS0csRUFDSCxPQUFPLEVBRVQsSUFBS0QsRUFDSCxPQUFPLEVBRVQsSUFBSUUsRUFBS0YsRUFBRyxHQUNSRyxFQUFLRixFQUFHLEdBQ1JuNEYsRUFBSTQyRyxFQUFNdmUsRUFBR3ozRixNQUFPdzNGLEVBQUd4M0YsT0FDM0IsR0FBVSxJQUFOWixFQUNGLE9BQU9BLEVBRVRpNEYsRUFBTSxHQUFhRyxFQUFHOWlGLE1BQU80aUYsRUFBRyxJQUNoQ0YsRUFBTSxHQUFhSyxFQUFHL2lGLE1BQU82aUYsRUFBRyxLQXNHdEMsU0FBUyxHQUFvQkssR0FDM0IsSUFBSUMsRUFBS0QsRUFBR25qRixLQUNabWpGLEVBQUduakYsS0FBT29qRixFQUFHbmpGLE1BQ2JtakYsRUFBR25qRixNQUFRa2pGLEVBQ1gsSUFBSUUsRUFBTyxHQUFXRixFQUFHbmpGLE1BQ3JCc2pGLEVBQU8sR0FBV0gsRUFBR2xqRixPQUN6QmtqRixFQUFHMXZDLFFBQ0Q0dkMsRUFBT0MsRUFBT0QsRUFBT0MsR0FDbkIsRUFBSSxFQUNSLElBQUlDLEVBQU8sR0FBV0gsRUFBR3BqRixNQUNyQndqRixFQUFNTCxFQUFHMXZDLE9BSWIsT0FIQTJ2QyxFQUFHM3ZDLFFBQ0Q4dkMsRUFBT0MsRUFBTUQsRUFBT0MsR0FDbEIsRUFBSSxFQUNESixFQUdULFNBQVMsR0FBcUJBLEdBQzVCLElBQUlELEVBQUtDLEVBQUduakYsTUFDWm1qRixFQUFHbmpGLE1BQVFrakYsRUFBR25qRixLQUNkbWpGLEVBQUduakYsS0FBT29qRixFQUNWLElBQUlHLEVBQU8sR0FBV0gsRUFBR3BqRixNQUNyQjBqRixFQUFPLEdBQVdOLEVBQUduakYsT0FDekJtakYsRUFBRzN2QyxRQUNEOHZDLEVBQU9HLEVBQU9ILEVBQU9HLEdBQ25CLEVBQUksRUFDUixJQUFJSixFQUFPLEdBQVdILEVBQUdsakYsT0FDckIwakYsRUFBTVAsRUFBRzN2QyxPQUliLE9BSEEwdkMsRUFBRzF2QyxRQUNENnZDLEVBQU9LLEVBQU1MLEVBQU9LLEdBQ2xCLEVBQUksRUFDRFIsRUFlVCxTQUFTLEdBQW1CMzNGLEdBQzFCLElBQUlxNEYsRUFBTSxHQUFXcjRGLEVBQUV3VSxNQUNuQjhqRixFQUFNLEdBQVd0NEYsRUFBRXlVLE9BSXZCLE9BSEF6VSxFQUFFaW9ELFFBQ0Fvd0MsRUFBTUMsRUFBTUQsRUFBTUMsR0FDaEIsRUFBSSxFQUNEdDRGLEVBR1QsU0FBUyxHQUFVdzRGLEdBQ2pCLElBdEIyQkMsRUFDdkJseEYsRUFxQkF4SSxFQUFJeTVGLEVBQUdoa0YsS0FDUDVVLEVBQUk0NEYsRUFBRy9qRixNQUNQNDlFLEVBQUssR0FBV3R6RixHQUNoQmc3RSxFQUFLLEdBQVduNkUsR0FDcEIsR0FBSXl5RixHQUFNLEVBQUl0WSxFQUFLLEdBR2pCLE9BQUksR0FGS2g3RSxFQUFFeVYsS0FDRnpWLEVBQUUwVixPQUVGLEdBQW1CLEdBQW9CK2pGLElBRXZDLElBL0JQanhGLEVBQUksSUFEbUJreEYsRUFnQ3VCRCxHQS9CbEJoa0YsTUFDaENpa0YsRUFBR2prRixLQUFPak4sRUFDSCxHQUFvQmt4RixLQWdDM0IsR0FBSTFlLEdBQU0sRUFBSXNZLEVBQUssR0FBSSxDQUNyQixJQUFJVSxFQUFLbnpGLEVBQUU0VSxLQUVYLE9BQUksR0FESzVVLEVBQUU2VSxNQUNNcytFLEdBQ1IsR0FBbUIsR0FBcUJ5RixJQUV4QyxHQW5DYixTQUE4QmIsR0FDNUIsSUFBSXB3RixFQUFJLEdBQW9Cb3dGLEVBQUdsakYsT0FFL0IsT0FEQWtqRixFQUFHbGpGLE1BQVFsTixFQUNKLEdBQXFCb3dGLEdBZ0NFLENBQXFCYSxJQU1uRCxPQUhBQSxFQUFHdndDLFFBQ0RvcUMsRUFBS3RZLEVBQUtzWSxFQUFLdFksR0FDYixFQUFJLEVBQ0R5ZSxFQUdULFNBQVMsR0FBVTU5RSxFQUFLNWEsRUFBRzZJLEdBQ3pCLFFBQVVoRSxJQUFON0UsRUFDRixPQUFPLEdBQVU2SSxHQUVuQixJQUNJMUosRUFBSXliLEVBQUkvUixFQURKN0ksRUFBRUQsT0FFVixHQUFVLElBQU5aLEVBQ0YsT0FBT2EsRUFFVCxJQUFJakIsRUFBSWlCLEVBQUV3VSxLQUNONVUsRUFBSUksRUFBRXlVLE1BQ1YsR0FBSXRWLEVBQUksRUFBRyxDQUNULElBQUl3ekYsRUFBSyxHQUFVLzNFLEVBQUs3YixFQUFHOEosR0FDM0I3SSxFQUFFd1UsS0FBT20rRSxPQUVUM3lGLEVBQUV5VSxNQUFRLEdBQVVtRyxFQUFLaGIsRUFBR2lKLEdBRTlCLE9BQU8sR0FBVTdJLEdDbDBCbkIsU0FBUyxHQUFJQSxFQUFHNkksRUFBRytSLEdBQ2pCLFFBQVUvVixJQUFON0UsRUFDRixPQUFPLEdBQThCNkksR0FFdkMsSUFBSVMsRUFBSXRKLEVBQUVELE1BQ05aLEVBQUl5YixFQUFJL1IsRUFBR1MsR0FDZixHQUFVLElBQU5uSyxFQUNGLE9BQU9hLEVBRVQsSUFBSWpCLEVBQUlpQixFQUFFd1UsS0FDTjVVLEVBQUlJLEVBQUV5VSxNQUNWLEdBQUl0VixFQUFJLEVBQUcsQ0FDVCxJQUFJd3pGLEVBQUssR0FBSTV6RixFQUFHOEosRUFBRytSLEdBQ25CLE9BQUkrM0UsSUFBTzV6RixFQUNGaUIsRUFFQSxHQUF3QjJ5RixFQUFJcnBGLEVBQUcxSixHQUcxQyxJQUFJb3pGLEVBQUssR0FBSXB6RixFQUFHaUosRUFBRytSLEdBQ25CLE9BQUlvNEUsSUFBT3B6RixFQUNGSSxFQUVBLEdBQXdCakIsRUFBR3VLLEVBQUcwcEYsR0FJekMsU0FBUyxHQUFPaHpGLEVBQUc2SSxFQUFHK1IsR0FDcEIsUUFBVS9WLElBQU43RSxFQUNGLE9BQU9BLEVBRVQsSUFBSXVILEVBQUl2SCxFQUFFRCxNQUNOaEIsRUFBSWlCLEVBQUV3VSxLQUNONVUsRUFBSUksRUFBRXlVLE1BQ050VixFQUFJeWIsRUFBSS9SLEVBQUd0QixHQUNmLEdBQVUsSUFBTnBJLEVBQVMsQ0FDWCxRQUFVMEYsSUFBTjlGLEVBQ0YsT0FBT2EsRUFFVCxRQUFVaUYsSUFBTmpGLEVBQ0YsT0FBT2IsRUFFVCxJQUFJaTNHLEVBQU0sQ0FDUnA1QyxTQUFVaDlELEVBQUVHLE9BRVY4eEcsRUFBTSxHQUF3Q2p5RyxFQUFHbzJHLEdBQ3JELE9BQU8sR0FBd0JqM0csRUFBR2kzRyxFQUFJcDVDLFNBQVVpMUMsR0FFbEQsR0FBSTF5RyxFQUFJLEVBQUcsQ0FDVCxJQUFJd3pGLEVBQUssR0FBTzV6RixFQUFHOEosRUFBRytSLEdBQ3RCLE9BQUkrM0UsSUFBTzV6RixFQUNGaUIsRUFFQSxHQUF3QjJ5RixFQUFJcHJGLEVBQUczSCxHQUcxQyxJQUFJb3pGLEVBQUssR0FBT3B6RixFQUFHaUosRUFBRytSLEdBQ3RCLE9BQUlvNEUsSUFBT3B6RixFQUNGSSxFQUVBLEdBQXdCakIsRUFBR3dJLEVBQUd5ckYsR0FJekMsU0FBUyxHQUFVaHNGLEVBQUc2UCxFQUFLK0QsR0FHekIsSUFGQSxJQUFJbk4sRUFBTW9KLEVBQUkxVSxPQUNWb0YsRUFBSVAsRUFDQWxJLEVBQUksRUFBR0EsRUFBSTJPLElBQU8zTyxFQUFFLENBRTFCeUksRUFBSSxHQUFJQSxFQURFc1AsRUFBSS9YLEdBQ0U4YixHQUVsQixPQUFPclQsRUFHVCxTQUFTLEdBQVdQLEVBQUc2UCxFQUFLK0QsR0FHMUIsSUFGQSxJQUFJbk4sRUFBTW9KLEVBQUkxVSxPQUNWb0YsRUFBSVAsRUFDQWxJLEVBQUksRUFBR0EsRUFBSTJPLElBQU8zTyxFQUFFLENBRTFCeUksRUFBSSxHQUFPQSxFQUREc1AsRUFBSS9YLEdBQ0s4YixHQUVyQixPQUFPclQsRUFHVCxTQUFTMHVHLEdBQWdCcjdGLEVBQUtyYSxFQUFHc0ksR0FDL0IsSUFBSXRCLEVBQUloSCxFQUFFUixNQUNOaEIsRUFBSXdCLEVBQUVpVSxLQUNONVUsRUFBSVcsRUFBRWtVLE1BQ050VixFQUFJeWIsRUFBSS9SLEVBQUd0QixHQUNmLEdBQVUsSUFBTnBJLEVBQ0YsTUFBa0IsQ0FDVkosRUFDQWEsR0FHVixHQUFJVCxFQUFJLEVBQUcsQ0FDVCxRQUFVMEYsSUFBTjlGLEVBQ0YsTUFBa0IsTUFDVjhGLEVBQ0F0RSxHQUdWLElBQUl3USxFQUFRa2xHLEdBQWdCcjdGLEVBQUs3YixFQUFHOEosR0FDcEMsTUFBa0IsQ0FDVmtJLEVBQU0sR0FDTixHQUErQkEsRUFBTSxHQUFJeEosRUFBRzNILElBR3RELFFBQVVpRixJQUFOakYsRUFDRixNQUFrQixDQUNWVyxPQUNBc0UsR0FHVixJQUFJNHdGLEVBQVV3Z0IsR0FBZ0JyN0YsRUFBS2hiLEVBQUdpSixHQUN0QyxNQUFrQixDQUNWLEdBQStCOUosRUFBR3dJLEVBQUdrdUYsRUFBUSxJQUM3Q0EsRUFBUSxJQUlsQixTQUFTLEdBQWM3NkUsRUFBS3JhLEVBQUdzSSxFQUFHc3BHLEdBQ2hDLElBQUk1cUcsRUFBSWhILEVBQUVSLE1BQ05oQixFQUFJd0IsRUFBRWlVLEtBQ041VSxFQUFJVyxFQUFFa1UsTUFDTnRWLEVBQUl5YixFQUFJL1IsRUFBR3RCLEdBQ2YsR0FBVSxJQUFOcEksRUFFRixPQURBZ3pHLEVBQUt2MUMsVUFBVyxFQUNFLENBQ1Y3OUQsRUFDQWEsR0FHVixHQUFJVCxFQUFJLEVBQUcsQ0FDVCxRQUFVMEYsSUFBTjlGLEVBQ0YsTUFBa0IsTUFDVjhGLEVBQ0F0RSxHQUdWLElBQUl3USxFQUFRLEdBQWM2SixFQUFLN2IsRUFBRzhKLEVBQUdzcEcsR0FDckMsTUFBa0IsQ0FDVnBoRyxFQUFNLEdBQ04sR0FBK0JBLEVBQU0sR0FBSXhKLEVBQUczSCxJQUd0RCxRQUFVaUYsSUFBTmpGLEVBQ0YsTUFBa0IsQ0FDVlcsT0FDQXNFLEdBR1YsSUFBSTR3RixFQUFVLEdBQWM3NkUsRUFBS2hiLEVBQUdpSixFQUFHc3BHLEdBQ3ZDLE1BQWtCLENBQ1YsR0FBK0JwekcsRUFBR3dJLEVBQUdrdUYsRUFBUSxJQUM3Q0EsRUFBUSxJQXdCbEIsU0FBUyxHQUFNM0csRUFBSUMsRUFBSW4wRSxHQUNyQixRQUFXL1YsSUFBUGlxRixFQUNGLE9BQU9DLEVBRVQsUUFBV2xxRixJQUFQa3FGLEVBQ0YsT0FBT0QsRUFFVCxJQUFJMEksRUFBSzFJLEVBQUc3bUMsT0FDUnN2QyxFQUFLeEksRUFBRzltQyxPQUNaLEdBQUl1dkMsR0FBTUQsRUFBSSxDQUNaLEdBQVcsSUFBUEEsRUFDRixPQUFPLEdBQUl6SSxFQUFJQyxFQUFHaHZGLE1BQU82YSxHQUUzQixJQUFJdzNGLEVBQUt0akIsRUFBRy91RixNQUNSeXZGLEVBQUtWLEVBQUd0NkUsS0FDUjg5RixFQUFLeGpCLEVBQUdyNkUsTUFDUjFELEVBQVFrbEcsR0FBZ0JyN0YsRUFBS20wRSxFQUFJcWpCLEdBQ3JDLE9BQU8sR0FBK0IsR0FBTTVpQixFQUFJeitFLEVBQU0sR0FBSTZKLEdBQU13M0YsRUFBSSxHQUFNRSxFQUFJdmhHLEVBQU0sR0FBSTZKLElBRTFGLEdBQVcsSUFBUDQ4RSxFQUNGLE9BQU8sR0FBSXpJLEVBQUlELEVBQUcvdUYsTUFBTzZhLEdBRTNCLElBQUk2M0YsRUFBSzFqQixFQUFHaHZGLE1BQ1IwdkYsRUFBS1YsRUFBR3Y2RSxLQUNSbStGLEVBQUs1akIsRUFBR3Q2RSxNQUNSZ2hGLEVBQVV3Z0IsR0FBZ0JyN0YsRUFBS2swRSxFQUFJMmpCLEdBQ3ZDLE9BQU8sR0FBK0IsR0FBTWhkLEVBQVEsR0FBSWhHLEVBQUk3MEUsR0FBTTYzRixFQUFJLEdBQU1oZCxFQUFRLEdBQUlrZCxFQUFJLzNGLElBRzlGLFNBQVMsR0FBVWswRSxFQUFJQyxFQUFJbjBFLEdBQ3pCLFFBQVcvVixJQUFQaXFGLFFBR09qcUYsSUFBUGtxRixFQUFKLENBR0EsSUFBSXFqQixFQUFLdGpCLEVBQUcvdUYsTUFDUnl2RixFQUFLVixFQUFHdDZFLEtBQ1I4OUYsRUFBS3hqQixFQUFHcjZFLE1BQ1IwOUYsRUFBTyxDQUNUdjFDLFVBQVUsR0FFUjdyRCxFQUFRLEdBQWM2SixFQUFLbTBFLEVBQUlxakIsRUFBSUQsR0FDbkN4ZixFQUFLLEdBQVVuRCxFQUFJeitFLEVBQU0sR0FBSTZKLEdBQzdCbzRFLEVBQUssR0FBVXNmLEVBQUl2aEcsRUFBTSxHQUFJNkosR0FDakMsT0FBSXUzRixFQUFLdjFDLFNBQ0EsR0FBK0IrMUIsRUFBSXlmLEVBQUlwZixHQUV2QyxHQUFpQ0wsRUFBSUssSUFJaEQsU0FBUyxHQUFLbEUsRUFBSUMsRUFBSW4wRSxHQUNwQixRQUFXL1YsSUFBUGlxRixFQUNGLE9BQU9BLEVBRVQsUUFBV2pxRixJQUFQa3FGLEVBQ0YsT0FBT0QsRUFFVCxJQUFJc2pCLEVBQUt0akIsRUFBRy91RixNQUNSeXZGLEVBQUtWLEVBQUd0NkUsS0FDUjg5RixFQUFLeGpCLEVBQUdyNkUsTUFDUjA5RixFQUFPLENBQ1R2MUMsVUFBVSxHQUVSN3JELEVBQVEsR0FBYzZKLEVBQUttMEUsRUFBSXFqQixFQUFJRCxHQUNuQ3hmLEVBQUssR0FBS25ELEVBQUl6K0UsRUFBTSxHQUFJNkosR0FDeEJvNEUsRUFBSyxHQUFLc2YsRUFBSXZoRyxFQUFNLEdBQUk2SixHQUM1QixPQUFJdTNGLEVBQUt2MUMsU0FDQSxHQUFpQysxQixFQUFJSyxHQUVyQyxHQUErQkwsRUFBSXlmLEVBQUlwZixHQU1sRCxJQUFJLEdEcWtCSixTQUFtQnZvRSxFQUFJN1AsR0FDckIsSUFBSW5OLEVBQU1nZCxFQUFHdG9CLE9BQ2IsR0FBWSxJQUFSc0wsRUFBSixDQUdBLElBR0l3RSxFQUhBZCxFQUFPLEdBQXFDc1osR0FBSSxTQUFXNWhCLEVBQUdVLEdBQzFELE9BQU9xUixFQUFJL1IsRUFBR1UsR0FBSyxLQUl6QjBJLEVBREVkLEdBQVEsRUFDRCxHQUFtQnNaLEVBQUksRUFBR3RaLEdBRzFCLEdBQXNCc1osR0FEL0J0WixFQUFlLEdBQVBBLEdBQ2tDLEVBQUksRUFBR0EsR0FFbkQsSUFBSSxJQUFJclMsRUFBSXFTLEVBQU1yUyxFQUFJMk8sSUFBTzNPLEVBQzNCbVQsRUFBUyxHQUFVMkksRUFBSzNJLEVBQVF3WSxFQUFHM3JCLElBRXJDLE9BQU9tVCxJQ25sQkwsR0Q5R0osU0FBaUIxUixHQUNmLFlBQWFzRSxJQUFOdEUsR0MrR0wsR0QyVUosU0FBYXl5RyxFQUFJbnFHLEVBQUcrUixHQUNsQixPQUFZLENBQ1YsSUFBSTVhLEVBQUlnekcsRUFDUixRQUFVbnVHLElBQU43RSxFQUNGLE9BQU8sRUFFVCxJQUNJYixFQUFJeWIsRUFBSS9SLEVBREo3SSxFQUFFRCxPQUVWLEdBQVUsSUFBTlosRUFDRixPQUFPLEVBRVQ2ekcsRUFBSzd6RyxFQUFJLEVBQUlhLEVBQUV3VSxLQUFPeFUsRUFBRXlVLFFDcFZ4QixHRDZYSixTQUFTeWhHLEVBQU81a0IsRUFBS0UsRUFBSzUyRSxHQUN4QixPQUFZLENBQ1YsSUFBSW0wRSxFQUFLeUMsRUFDTDFDLEVBQUt3QyxFQUNULFFBQVd6c0YsSUFBUGlxRixFQUNGLE9BQU8sRUFFVCxRQUFXanFGLElBQVBrcUYsRUFDRixPQUFPLEVBRVQsSUFBSXFqQixFQUFLdGpCLEVBQUcvdUYsTUFDUnl2RixFQUFLVixFQUFHdDZFLEtBQ1I4OUYsRUFBS3hqQixFQUFHcjZFLE1BQ1JnK0YsRUFBSzFqQixFQUFHaHZGLE1BQ1IwdkYsRUFBS1YsRUFBR3Y2RSxLQUNSbStGLEVBQUs1akIsRUFBR3Q2RSxNQUNSdFYsRUFBSXliLEVBQUl3M0YsRUFBSUssR0FDaEIsR0FBVSxJQUFOdHpHLEVBUUosR0FBSUEsRUFBSSxFQUFSLENBQ0UsSUFBSysyRyxFQUFPLEdBQU8xbUIsRUFBSTRpQixPQUFJdnRHLEdBQVk0cUYsRUFBSTcwRSxHQUN6QyxPQUFPLEVBRVQwMkUsRUFBTWdoQixNQUpSLENBT0EsSUFBSzRELEVBQU8sUUFBT3J4RyxFQUFXdXRHLEVBQUlFLEdBQUtLLEVBQUkvM0YsR0FDekMsT0FBTyxFQUVUMDJFLEVBQU05QixNQWxCTixDQUNFLElBQUswbUIsRUFBTzFtQixFQUFJQyxFQUFJNzBFLEdBQ2xCLE9BQU8sRUFFVDQyRSxFQUFNbWhCLEVBQ05yaEIsRUFBTWdoQixLQ2paUixHQUFNLEdBRU4sR0RxWEosU0FBWXhqQixFQUFJQyxFQUFJNXZGLEdBQ2xCLE9BQTBCLElBQW5CLEdBQUkydkYsRUFBSUMsRUFBSTV2RixJQ3BYakIsR0FBVyxHQUlYLEdBQVUsR0FJVixHQUFTLEdBSVQsR0FBUSxHQUlSLEdBQVEsR0FJUixHQUFhLEdBSWIsR0FBTyxHQUVQLEdEaUVKLFNBQWdCMEIsR0FDZCxPQWpCRixTQUFTLEVBQVVxeUYsRUFBSXlCLEdBQ3JCLE9BQVksQ0FDVixJQUFJQyxFQUFPRCxFQUNQcDBGLEVBQUkyeUYsRUFDUixRQUFVcnVGLElBQU50RSxFQUNGLE9BQU9xMEYsRUFFVEQsRUFBZ0IsQ0FDZHAwRixFQUFFUixNQUNGLEVBQVVRLEVBQUVrVSxNQUFPbWdGLElBRXJCMUIsRUFBSzN5RixFQUFFaVUsTUFNRixDQUFVM1QsRUFBVyxJQ2hFMUIsR0RvSkosU0FBaUJOLEdBQ2YsUUFBVXNFLElBQU50RSxFQUNGLE1BQU8sR0FFVCxJQUFJaWdCLEVBQU8sR0FBV2pnQixHQUNsQmdILEVBQUksSUFBSTlFLE1BQU0rZCxHQUVsQixPQXRFRixTQUFTLEVBQVUweUUsRUFBSXBoRixFQUFJK0UsR0FDekIsT0FBWSxDQUNWLElBQUkvWCxFQUFJZ1QsRUFDSnZSLEVBQUkyeUYsRUFDSjNyRixFQUFJaEgsRUFBRVIsTUFDTmhCLEVBQUl3QixFQUFFaVUsS0FDTjVVLEVBQUlXLEVBQUVrVSxNQUNOdEQsT0FBYXRNLElBQU45RixFQUFrQixFQUFVQSxFQUFHRCxFQUFHK1gsR0FBTy9YLEVBQ3BEK1gsRUFBSTFGLEdBQVE1SixFQUNaLElBQUl3dUYsRUFBUTVrRixFQUFPLEVBQUksRUFDdkIsUUFBVXRNLElBQU5qRixFQUNGLE9BQU9tMkYsRUFFVGprRixFQUFLaWtGLEVBQ0w3QyxFQUFLdHpGLEdBdURQLENBQVVXLEVBQUcsRUFBR2dILEdBQ1RBLEdDekpMLEdEMU1KLFNBQWlCaEgsR0FDZixRQUFVc0UsSUFBTnRFLEVBQ0YsT0FBTyxFQUFpQjgwRyxHQUFROTBHLEtDNE1oQyxHRHBMSixTQUFpQkEsR0FDZixRQUFVc0UsSUFBTnRFLEVBQ0YsT0FBTyxFQUFpQiswRyxHQUFRLzBHLEtDc0xoQyxHRHlYSixTQUFhMnlGLEVBQUlycUYsRUFBRytSLEdBQ2xCLE9BQVksQ0FDVixJQUFJcmEsRUFBSTJ5RixFQUNSLFFBQVVydUYsSUFBTnRFLEVBQ0YsT0FFRixJQUFJZ0gsRUFBSWhILEVBQUVSLE1BQ05aLEVBQUl5YixFQUFJL1IsRUFBR3RCLEdBQ2YsR0FBVSxJQUFOcEksRUFDRixPQUFPLEVBQWlCb0ksR0FFMUIyckYsRUFBSy96RixFQUFJLEVBQUlvQixFQUFFaVUsS0FBT2pVLEVBQUVrVSxRRXZyQjVCLFNBQVMsR0FBVTJvQixFQUFNdndCLEdBQ3ZCLElBQUkrTixFQUFNL04sRUFBRytOLElBQ2IsTUFBTyxDQUNDQSxJQUFLQSxFQUNMd2lCLEtBQU0sR0FBdUJBLEVBQU14aUIsSUFJN0MsU0FBUyxHQUFPMWIsRUFBRytCLEdBQ2pCLElBQUltOEIsRUFBT2wrQixFQUFFaytCLEtBQ1R4aUIsRUFBTTFiLEVBQUUwYixJQUNSbTRGLEVBQVUsR0FBb0IzMUUsRUFBTW44QixFQUFHMlosR0FDM0MsT0FBSW00RixJQUFZMzFFLEVBQ1BsK0IsRUFFQSxDQUNDMGIsSUFBS0EsRUFDTHdpQixLQUFNMjFFLEdBS2xCLFNBQVMsR0FBSTd6RyxFQUFHK0IsR0FDZCxJQUFJbThCLEVBQU9sK0IsRUFBRWsrQixLQUNUeGlCLEVBQU0xYixFQUFFMGIsSUFDUm00RixFQUFVLEdBQWlCMzFFLEVBQU1uOEIsRUFBRzJaLEdBQ3hDLE9BQUltNEYsSUFBWTMxRSxFQUNQbCtCLEVBRUEsQ0FDQzBiLElBQUtBLEVBQ0x3aUIsS0FBTTIxRSxHQXFCbEIsU0FBUyxHQUFNN3pHLEVBQUdxQixHQUNoQixJQUFJcWEsRUFBTTFiLEVBQUUwYixJQUNaLE1BQU8sQ0FDQ0EsSUFBS0EsRUFDTHdpQixLQUFNLEdBQW1CbCtCLEVBQUVrK0IsS0FBTTc4QixFQUFFNjhCLEtBQU14aUIsSUFJbkQsU0FBUyxHQUFVMWIsRUFBR3FCLEdBQ3BCLElBQUlxYSxFQUFNMWIsRUFBRTBiLElBQ1osTUFBTyxDQUNDQSxJQUFLQSxFQUNMd2lCLEtBQU0sR0FBdUJsK0IsRUFBRWsrQixLQUFNNzhCLEVBQUU2OEIsS0FBTXhpQixJQUl2RCxTQUFTLEdBQUsxYixFQUFHcUIsR0FDZixJQUFJcWEsRUFBTTFiLEVBQUUwYixJQUNaLE1BQU8sQ0FDQ0EsSUFBS0EsRUFDTHdpQixLQUFNLEdBQWtCbCtCLEVBQUVrK0IsS0FBTTc4QixFQUFFNjhCLEtBQU14aUIsSUFJbEQsU0FBUyxHQUFPMWIsRUFBR3FCLEdBQ2pCLElBQUlxYSxFQUFNMWIsRUFBRTBiLElBQ1osT0FBTyxHQUFvQjFiLEVBQUVrK0IsS0FBTTc4QixFQUFFNjhCLEtBQU14aUIsR0FHN0MsU0FBUyxHQUFNMWIsRUFBRytCLEdBQ2hCLElBQUkyWixFQUFNMWIsRUFBRTBiLElBQ1I3SixFRDJFTixTQUFlL1EsRUFBRzZJLEVBQUcrUixHQUNuQixRQUFVL1YsSUFBTjdFLEVBQ0YsTUFBa0IsQ0FDQyxNQUNUNkUsT0FDQUEsSUFFRixHQUdWLElBQUlzdEcsRUFBTyxDQUNUdjFDLFVBQVUsR0FHWixNQUFrQixDQURWLEdBQWNoaUQsRUFBSzVhLEVBQUc2SSxFQUFHc3BHLEdBR3pCQSxFQUFLdjFDLFVDM0ZELENBQW1CMTlELEVBQUVrK0IsS0FBTW44QixFQUFHMlosR0FDdEM2NkUsRUFBVTFrRixFQUFNLEdBQ3BCLE1BQWtCLENBQ0MsQ0FDVCxDQUNFNkosSUFBS0EsRUFDTHdpQixLQUFNcTRELEVBQVEsSUFFaEIsQ0FDRTc2RSxJQUFLQSxFQUNMd2lCLEtBQU1xNEQsRUFBUSxLQUdsQjFrRixFQUFNLElBSWhCLFNBQVMsR0FBS2xFLEdBQ1osTUFBTyxDQUNDK04sSUFBSy9OLEVBQUcrTixJQUNSd2lCLFVBQU12NEIsR0FJaEIsU0FBUyxHQUFRM0YsR0FDZixPQUFPLEdBQXFCQSxFQUFFaytCLE1BR2hDLFNBQVMsR0FBSWwrQixFQUFHcUIsR0FDZCxJQUFJdzFHLEVBQVE3MkcsRUFBRTBiLElBQ2QsT0FBTyxHQUFpQjFiLEVBQUVrK0IsS0FBTTc4QixFQUFFNjhCLEtBQU0yNEUsR0FHMUMsU0FBUyxHQUFHNzJHLEVBQUdxQixHQUNiLE9BQU8sR0FBZ0JyQixFQUFFaytCLEtBQU03OEIsRUFBRTY4QixLQUFNbCtCLEVBQUUwYixLQWUzQyxTQUFTLEdBQU8xYixFQUFHd3hGLEVBQUs3bUYsR0FDdEIsT0FMRixTQUFpQjNLLEVBQUd3eEYsRUFBSzdtRixHQUN2QixPQUFPLEdBQXFCM0ssRUFBRWsrQixLQUFNc3pELEVBQUs3bUYsR0FJbEMsQ0FBUTNLLEVBQUd3eEYsRUFBSyxFQUFVN21GLElBMEJuQyxTQUFTLEdBQUszSyxFQUFHMkssR0FDZixPQVJGLFNBQWUzSyxFQUFHMkssR0FDaEIsTUFBTyxDQUNDK1EsSUFBSzFiLEVBQUUwYixJQUNQd2lCLEtBQU0sR0FBbUJsK0IsRUFBRWsrQixLQUFNdnpCLElBS2xDLENBQU0zSyxFQUFHLEVBQVUySyxJQWtCNUIsU0FBUyxHQUFVM0ssRUFBRzJLLEdBQ3BCLE9BaEJGLFNBQW9CM0ssRUFBRzJLLEdBQ3JCLElBQUlrSCxFQUFRLEdBQXdCN1IsRUFBRWsrQixLQUFNdnpCLEdBQ3hDK1EsRUFBTTFiLEVBQUUwYixJQUNaLE1BQWtCLENBQ1YsQ0FDRUEsSUFBS0EsRUFDTHdpQixLQUFNcnNCLEVBQU0sSUFFZCxDQUNFNkosSUFBS0EsRUFDTHdpQixLQUFNcnNCLEVBQU0sS0FNZixDQUFXN1IsRUFBRyxFQUFVMkssSUFHakMsU0FBUyxHQUFLM0ssR0FDWixPQUFPLEdBQWtCQSxFQUFFaytCLE1BRzdCLFNBQVMsR0FBT2wrQixHQUNkLE9BQU8sR0FBb0JBLEVBQUVrK0IsTUFHL0IsU0FBUyxHQUFRbCtCLEdBQ2YsT0FBTyxHQUFxQkEsRUFBRWsrQixNQUdoQyxTQUFTLEdBQVFsK0IsR0FDZixPQUFPLEdBQXFCQSxFQUFFaytCLE1BT2hDLFNBQVMsR0FBUWwrQixHQUNmLE9BQU8sR0FBcUJBLEVBQUVrK0IsTUFPaEMsU0FBUyxHQUFJbCtCLEVBQUcrQixHQUNkLE9BQU8sR0FBaUIvQixFQUFFaytCLEtBQU1uOEIsRUFBRy9CLEVBQUUwYixLQVd2QyxTQUFTLEdBQUkxYixFQUFHK0IsR0FDZCxPQUFPLEdBQWlCL0IsRUFBRWsrQixLQUFNbjhCLEVBQUcvQixFQUFFMGIsS0NoTnZDLFNBQVMsR0FBUzdhLEVBQU8wSyxHQUN2QixPQUFPLEdBQWFBLEVBQUsxSyxHQUczQixTQUFTLEdBQUlBLEVBQU8wSyxHQUNsQixPQUFPLEdBQWFBLEVBQUsxSyxHQUczQixTQUFTLEdBQVVBLEVBQU8wSyxHQUN4QixPRFlvQnhKLEVDWldsQixFRGN4QixDQUNDNmEsSUFGSkEsR0FEYTFiLEVDWlN1TCxHRGFkbVEsSUFHSndpQixLQUFNLEdBQXVCbCtCLEVBQUVrK0IsS0FBTW44QixFQUFHMlosSUFKbEQsSUFBbUIxYixFQUFHK0IsRUFDaEIyWixFQ1ZOLFNBQVMsR0FBTzdhLEVBQU8wSyxHQUNyQixPQUFPLEdBQWdCQSxFQUFLMUssR0FHOUIsU0FBUyxHQUFXQSxFQUFPMEssR0FDekIsT0RZcUJ4SixFQ1pXbEIsRURjekIsQ0FDQzZhLElBRkpBLEdBRGMxYixFQ1pTdUwsR0RhZm1RLElBR0p3aUIsS0FBTSxHQUF3QmwrQixFQUFFaytCLEtBQU1uOEIsRUFBRzJaLElBSm5ELElBQW9CMWIsRUFBRytCLEVBQ2pCMlosRUNWTixTQUFTLEdBQU83YSxFQUFPMEssR0FDckIsT0FBTyxHQUFhLEdBQWdCQSxFQUFLMUssR0FBUUEsR0FHbkQsU0FBU2tnRSxHQUFPbGdFLEVBQU8wSyxHQUNyQixPQUFJLEdBQWFBLEVBQUsxSyxHQUNiLEdBQWdCMEssRUFBSzFLLEdBRXJCLEdBQWEwSyxFQUFLMUssR0FJN0IsU0FBUyxHQUFRNlEsRUFBSW5HLEdBQ25CLE9ENEVrQlosRUM1RVcrRyxFRDZFdEIsR0M3RWlCbkcsRUQ2RU8yeUIsS0FBTSxFQUFVdnpCLElBRGpELElBQW9CQSxFQ3pFcEIsU0FBUyxHQUFTK0csRUFBSTgvRSxFQUFLam1GLEdBQ3pCLE9BQU8sR0FBZ0JBLEVBQUtpbUYsRUFBSzkvRSxHQUduQyxTQUFTLEdBQVVBLEVBQUk4L0UsRUFBS2ptRixHQUMxQixPQUFPLEdBQW1CbUcsRUFBSSxHQUFpQm5HLEdBQU1pbUYsR0FHdkQsU0FBUyxHQUFJeWxCLEVBQVcxckcsR0FDdEIsT0RnRmdCWixFQ2hGV3NzRyxFRGlGcEIsR0NqRmUxckcsRURpRk8yeUIsS0FBTSxFQUFVdnpCLElBRC9DLElBQWtCQSxFQzdFbEIsU0FBUyxHQUFJc3NHLEVBQVcxckcsR0FDdEIsT0RvRmVaLEVDcEZXc3NHLEVEcUZuQixHQ3JGYzFyRyxFRHFGTzJ5QixLQUFNLEVBQVV2ekIsSUFEOUMsSUFBaUJBLEVDakZqQixTQUFTLEdBQU9zc0csRUFBVzFyRyxHQUN6QixPQUFPLEdBQWNBLEVBQUswckcsR0FHNUIsU0FBUyxHQUFVQSxFQUFXMXJHLEdBQzVCLE9BQU8sR0FBY0EsR0FBSyxTQUFXNUIsR0FDdkIsT0FBUSxFQUFTc3RHLEVBQVd0dEcsTUFJNUMsU0FBUyxHQUFVc3RHLEVBQVcxckcsR0FDNUIsT0FBTyxHQUFtQkEsRUFBSzByRyxHQUdqQyxTQUFTLEdBQUlwMkcsRUFBTzBLLEdBQ2xCLE9BQU8sR0FBYUEsRUFBSzFLLEdBRzNCLFNBQVMsR0FBVUEsRUFBTzRzRyxFQUFXbGlHLEdBQ25DLE9BQU8sR0FBNkJraUcsRUFBVyxHQUFhbGlHLEVBQUsxSyxJQUduRSxTQUFTLEdBQU1BLEVBQU8wSyxHQUNwQixPQUFPLEdBQWVBLEVBQUsxSyxHQUc3QixTQUFTLEdBQVFzSixHQUNmLElBR0lnckcsRUFBYSxHQUF1QixDQUNsQ3o1RixJQUpJLFNBQVV4VCxFQUFHQyxHQUNyQixPQUFPLEdBQXNCLEVBQVNnQyxFQUFFNjJDLFFBQVM5NEMsRUFBR0MsT0FZdEQsTUFBTyxDQUNDZ3RHLFdBQVksR0FDWjd0QyxNQVRJLEdBQWM2dEMsR0FVbEJsckUsVUFUUSxTQUFVZ3hDLEdBQ3hCLE9BQU8sR0FBbUJBLEVBQU9rNkIsSUFTM0IzN0UsU0FQTyxTQUFVeWhELEdBQ3ZCLE9BQU8sR0FBbUIsR0FBa0JBLEdBQVFrNkIsSUFPOUNwZ0IsUUFBUyxHQUNUK1osU0FBVSxHQUNWN25FLElBQUssR0FDTDZ1RSxVQUFXLEdBQ1h0b0UsT0FBUSxHQUNSb29FLFdBQVksR0FDWkMsT0FBUSxHQUNSOTBDLE9BQVFBLEdBQ1JtMkMsTUFBTyxHQUNQQyxVQUFXLEdBQ1gvNEYsS0FBTSxHQUNONDRGLE9BQVEsR0FDUmgyRCxRQUFTLEdBQ1R3N0MsR0FBSSxHQUNKLzBGLFFBQVMsR0FDVDZ0RyxTQUFVLEdBQ1Y4QixVQUFXLEdBQ1gzOUMsSUFBSyxHQUNMa1UsSUFBSyxHQUNMN3JELE9BQVEsR0FDUmkwRixLQUFNLEdBQ05DLFVBQVcsR0FDWHg0QyxPQUFRLEdBQ1J5NEMsVUFBVyxHQUNYaHpHLE9BQVEsR0FDUnlsQyxRQUFTLEdBQ1R3bUUsT0FBUSxHQUNSNWEsUUFBUyxHQUNUbHJCLFFBQVMsR0FDVDNvRSxJQUFLLEdBQ0wwd0csVUFBVyxHQUNYbnBHLE1BQU8sSUMzSWpCLFNBQVMsR0FBT2k5RixFQUFNQyxHQUNwQixPQUFPRCxFQUFPQyxFQUFTLEVBR3pCLElBQUksR0FBUSxDQUNWM0osT0FBUSxJQXlCVixTQUFTOGIsR0FBUXA4QixHQUNmLE9BQU8sSUFBaUIsRUFBR0EsR0FHN0IsSUFZSXE4QixHQUFXLENBQ2JqYyxNQUFPLEdBQ1BrYyxhQUFjLEdBQ2QxWCxVQXpDYyxDQUNkdEUsT0FBUSxJQXlDUjRFLE9BdENXLENBQ1g1RSxPQUFRLEdBQ1JqMEIsTUFBTyxHQXFDUGt3QyxXQWxDZSxDQUNmamMsT0FBUSxJQWtDUmtjLGtCQS9Cc0IsQ0FDdEJsYyxPQUFRLElBK0JSbWMsS0E1QlMsQ0FDVG5jLE9BQVEsR0FDUmowQixNQUFPLEdBMkJQcXdDLE1BcEJVLENBQ1ZwYyxPQUFRLEdBQ1JqMEIsTUFBTyxFQUNQK3ZDLFFBQVNBLElBa0JUTyxjQWZrQixDQUNsQnJjLE9BQVEsR0FDUmowQixNQUFPLEVBQ1ArdkMsUUFBU0EsS0FpQlBRLEdBQVUsQ0FDWnRjLE9BSGEsSUF3Qlh1YyxHQUFpQixDQUNuQnpjLE1BQU93YyxHQUNQTixhQUFjTSxHQUNkaFksVUFyQmdCLENBQ2hCdEUsT0FQYSxJQTRCYjRFLE9BbEJhLENBQ2I1RSxPQVhhLEdBWWJqMEIsTUFBTyxHQWlCUGt3QyxXQWRpQixDQUNqQmpjLE9BaEJhLElBOEJibWMsS0FYVyxDQUNYbmMsT0FwQmEsR0FxQmJqMEIsTUFBTyxJQWdCVCxJQTBCSSxHQUFLLENBQ1BrMUIsR0FITyxJQU1MLEdBQU0sQ0FDUkEsR0FQTyxHQVFQeDdDLFFBQVMsSUFrQlgsU0FBUyxHQUFJaWtELEVBQU1DLEdBQ2pCLE9BQU9ELEVBQU9DLEVBQVMsRUFZekIsU0FBUzNILEdBQVMwSCxFQUFNQyxHQUN0QixPQUFPRCxFQUFPQyxFQUFTLEVBdUJ6QixJQUlJLEdBQWlCLENBQ25CaitELElBQUssR0FDTDhoRSxLQUFNLEVBQ04xTCxTQXhDYSxHQXlDYi8zQixJQUFLLEVBQ0xpNEIsU0FBVUEsR0FDVndhLE9BZEYsU0FBZ0I3dkcsR0FDZCxPQUFPLEc1QjlKSXlCLEU0QjhKdUN6QixJNUI3SnpDLEVBQ0F5QixFQUVLLEdBQUpBLEVBdWVFLFlBM2VkLElBQWFBLEc0QjRLWDh6RixPQVhXLEdBWVg5dUUsT0FWVyxJQWVUcXBGLEdBRlUsR0FBcUIsSUFNL0JDLEdBRlksR0FBcUJKLElBSWpDLEdBQVksR0FBa0IsSUFFOUIsR0FBWSxHQUFtQixJQUUvQixHQUFZLEdBQThCLElBRXRCLEdBQVV0YixZQUVOLEdBQVVPLGdCQUVULEdBQVVDLGlCQUViLEdBQVVDLGNBRVQsR0FBVUMsZUFFVCxHQUFVRSxnQkFFVixHQUFVQyxnQkFFZCxHQUFVRSxlQUVMLEdBQVVFLGlCQUVSLEdBQVVFLG1CQzFPekMsU0FBU3dhLEdBQWU5dUcsR0FDdEIsSUFBSSt1RyxFQUFPL3VHLEVBQUVtMEYsU0FJYixNQUFPLENBQ0M0YSxLQUFNQSxFQUNOQyxPQUxLLFNBQVUvdkcsR0FDckIsT0FBTyxFQUFTOHZHLEVBQU0vdUcsRUFBRTIvRixLQUFNMWdHLEtDa0JsQyxTQUFTLEdBQUk0OEYsRUFBTUMsR0FDakIsT0FBT0QsRUFBT0MsRUFBUyxFQUd6QixTQUFTLEdBQVNELEVBQU1DLEdBQ3RCLE9BQU9ELEVBQU9DLEVBQVMsRUFHekIsSUFBSSxHQUFXLEdBd0NmLElBQUksR0FBSyxHQUFnQjFJLEdBRXJCLEdBQUssQ0FDUEEsR0FBSSxJQUdGLEdBQVUsR0FBa0MsSUFFNUMsR0FBVSxHQUFpQng3QyxRQUUzQixHQUFNLENBQ1J3N0MsR0FBSSxHQUNKeDdDLFFBQVMsSUFHUCxHQUFZLEdBQW9DLElBRWhELEdBQW9CLEdBQVVrcEQsa0JBeUJsQyxJQU9JLEdBQVksR0FQTCxDQUNUMU4sR0FBSSxHQUNKeDdDLFFBQVMsR0FDVG1yRCxLQVZGLFNBQWN2c0csR0FDWixHQUFJQSxFL0R0R0ksVytEdUdOLE9BQU9BLEVBQUksRUFBSSxHQVNqQnNzRyxLQWxCRixTQUFjdHNHLEdBQ1osR0FBSUEsRy9EN0ZJLFcrRDhGTixPQUFPQSxFQUFJLEVBQUksS0E4QmYsR0FBTyxDQUNUcW5DLElBQUssR0FDTDhoRSxLQUFNLEVBQ04xTCxTQUFVLEdBQ1YvM0IsSUFBSyxFQUNMaTRCLFNBQVUsSUFHUixHQUFZLEdBQXNDLElBRWxELEdBQVksRUFBUyxHQUFtQixJQWFoQyxHQUFtQixJQUVuQixHQUFtQixJQUUvQixTQUFTLEdBQUswSCxHQUNaLE9BQU81aUcsT0FBTzRpRyxHQU9oQixTQUFTaHVCLEdBQVc1dUUsR0FDbEIsSUFDRSxPQUFPLEdBQStCQSxHQUV4QyxNQUFPZ3dHLEdBQ0wsUXBDcklFclEsR0FBUSxTQUFVL3NCLEVBQU9nVCxHQUMzQixPQUFPLEdBQWlCdVosR0FBR2hMLEdBQUl2aEIsRUFBT2dULElBUHpCdVosR29Da040QixHbEMxR3ZDeUIsR0FBVyxTQUFVL2dHLEVBQUdDLEdBQzFCLE9BQU8sR0FBc0IyQyxHQUFFazJDLFFBQVM5NEMsRUFBR0MsSUFFekMrZ0csR0FBZSxTQUFVaGhHLEVBQUdDLEdBQzlCLE9BQU8sR0FBMEIyQyxHQUFFazJDLFFBQVM5NEMsRUFBR0MsSUFFN0NnaEcsR0FBYyxTQUFVamhHLEVBQUdDLEdBQzdCLE9BQU8sR0FBeUIyQyxHQUFFazJDLFFBQVM5NEMsRUFBR0MsSUFFNUNpaEcsR0FBa0IsU0FBVWxoRyxFQUFHQyxHQUNqQyxPQUFPLEdBQTZCMkMsR0FBRWsyQyxRQUFTOTRDLEVBQUdDLElBb0JoRGtoRyxHQUFhLFNBQVVDLEVBQVdwaEcsR0FDcEMsT0FBTyxHQUFzQjRDLEdBQUVrMkMsUUFBUzk0QyxFQUFHb2hHLElBRXpDQyxHQUFpQixTQUFVRCxFQUFXcGhHLEdBQ3hDLE9BQU8sR0FBMEI0QyxHQUFFazJDLFFBQVM5NEMsRUFBR29oRyxJQUU3Q0UsR0FBZ0IsU0FBVUYsRUFBV3BoRyxHQUN2QyxPQUFPLEdBQXlCNEMsR0FBRWsyQyxRQUFTOTRDLEVBQUdvaEcsSUFFNUNHLEdBQW9CLFNBQVVILEVBQVdwaEcsR0FDM0MsT0FBTyxHQUE2QjRDLEdBQUVrMkMsUUFBUzk0QyxFQUFHb2hHLElBekRoRE4sR0FBa0IsU0FBVS90QixFQUFPZ1QsR0FDckMsT0FBTyxHQUFtQm5qRixHQUFFazJDLFFBQVNpNkIsRUFBT2dULElBUDlCbmpGLEdrQ21JNkIsR0F5RXhCLEdBQVFtOUYsaUJBRW5CLEdBQVFELE1BRUgsR0FBUUUsV0FFUixHQUFRQyxXQUVkLEdBQVFDLEtBRVMsR0FBVXNCLHNCQUVoQixHQUFVVixnQkFFZCxHQUFVVyxZQUVULEdBQVVDLGFBRW5CLEdBQVU3aEYsSUFFVixHQUFVNUIsSUFFTCxHQUFVOGlGLFNBRWhCLEdBQVU5WCxHQUVBLEdBQVUrWCxhQUVuQixHQUFVVyxJQUVGLEdBQVVWLFlBRW5CLEdBQVVXLEdBRUcsR0FBVVYsZ0JBRXRCLEdBQVVXLElBRVIsR0FBVUMsTUFFUixHQUFVQyxRQUVULEdBQVVHLFNBRWIsR0FBVUMsTUFFSCxHQUFVMkIsYUFFVixHQUFVSSxhQUVELEdBQVVFLHNCQUVqQixHQUFVQyxlQUVELEdBQVVDLHdCQUU3QixHQUFVMkwsS0FFUixHQUFVQyxPQUViLEdBQVU3aUUsSUFFUCxHQUFVNDBELE9BNU12QixJcEMvSWlCM0MsR0FNWFEsR0UyRVlsOUYsR0FNWmsrRixHQWlCQUMsR0FHQUMsR0FHQUMsR0FHQUMsR0FxQkFDLEdBR0FFLEdBR0FDLEdBR0FDLEdrQzhNRixHQUFXLEdDcFhmLFNBQVMsR0FBSzkvRixFQUFHNGhCLEdBQ2YsT0FBTyxHQUE4QixDQUFDNWhCLEdBQUk0aEIsR0FHNUMsU0FBUyxHQUFPQSxHQUNkLEdBQWtCLElBQWRBLEVBQUd0b0IsT0FDTCxNQUFrQixDQUNWLEVBQWtCc29CLEVBQUksR0FDdEIsRUFBc0JBLEVBQUksSUFNdEMsU0FBUyxHQUFPNWhCLEVBQUc0aEIsR0FDakIsT0FBTyxHQUE4QkEsRUFBSSxDQUFDNWhCLElBZ0I1QyxTQUFTLEdBQU9zN0YsR0FDZCxPQUFPQSxFQUFLaGlHLE9BR2QsU0FBUyxHQUFRMFUsR0FDZixPQUFzQixJQUFmQSxFQUFJMVUsT0FHYixTQUFTLEdBQVcwVSxHQUNsQixPQUFzQixJQUFmQSxFQUFJMVUsT0FjYixTQUFTLEdBQUswVSxHQUNaLE9BQU8sRUFBZUEsRUFBSyxHQUc3QixTQUFTLEdBQUs0VCxHQUNaLElBQUkxckIsRUFBSTByQixFQUFHdG9CLE9BQ1gsR0FBVSxJQUFOcEQsRUFBSixDQUdBLEdBQVUsSUFBTkEsRUFDRixNQUFPLEdBRVQsSUFBSW93RixFQUFLLEVBQXNCMWtFLEVBQUksR0FDbkMsT0FBa0IsSUFBZDBrRSxFQUFHaHRGLE9BQ0VndEYsT0FEVCxHQU1GLFNBQVMsR0FBWTFrRSxHQUNuQixJQUFJMGtFLEVBQUssR0FBSzFrRSxHQUNkLFlBQVc1bEIsSUFBUHNxRixFQUNLQSxFQUVBLEdBd0tYLFNBQVMsR0FBUXRsRixFQUFHNGdCLEVBQUkwa0UsR0FDdEIsT0FBTyxFQUFpQjFrRSxFQUFJMGtFLEVBQUl0bEYsR0FXbEMsU0FBUyxHQUFPQSxFQUFHNGdCLEdBQ2pCLE9BQU8sR0FBNEJBLEdBQUksU0FBV3JqQixFQUFHQyxHQUN2QyxPQUFPLEdBQXNCLEVBQVN3QyxFQUFHekMsRUFBR0MsT0FRNUQsU0FBUyxHQUFXcTBGLEVBQUlqeEUsR0FDdEIsT0FBTyxFQUFTLElBQWlDLFNBQVdpbUUsRUFBS3VnQixHQUNuRCxPQUFJLEVBQVMsR0FBbUN2VixFQUFJdVYsRUFBTXZnQixHQUNqREEsRUFFQSxHQUE4QkEsRUFBSyxDQUFDdWdCLE1BRTNDLEdBQUl4bUYsR0FHdEIsU0FBUyxHQUFjMGxGLEVBQVM1b0csRUFBR2tqQixHQUNqQyxPQUFPLEVBQVMsSUFBaUMsU0FBVzB2RCxFQUFPdHhFLEdBQ25ELElBQUlzbUYsRUFBS2hWLEVBQU0sR0FDZixPQUFJQSxFQUFNLEdBQ1UsRUFDVixFQUNBLEdBQThCZ1YsRUFBSSxDQUFDdG1GLEtBRWxDLEVBQVNzbkcsRUFBUzVvRyxFQUFHc0IsR0FDWixFQUNWLEVBQ0FzbUYsR0FHVSxFQUNWLEVBQ0EsR0FBOEJBLEVBQUksQ0FBQ3RtRixPQUdoQyxFQUNmLEVBQ0EsSUFDQzRoQixHQUFJLEdBR3JCLFNBQVMsR0FBYTBsRixFQUFTdG5HLEVBQUc0aEIsR0FDaEMsT0FBTyxFQUFTLElBQWlDLFNBQVcwa0UsRUFBSTVsRixHQUNsRCxPQUFJLEVBQVM0bUcsRUFBU3RuRyxFQUFHVSxHQUNoQjRsRixFQUVBLEdBQThCQSxFQUFJLENBQUM1bEYsTUFFMUMsR0FBSWtoQixHQTRHdEIsSUFBSSxHQUFVLEdBSVYsRzlEN1dKLFNBQWlCQSxHQUdmLElBRkEsSUFBSWhkLEVBQU1nZCxFQUFHdG9CLE9BQ1Q4UCxFQUFTLElBQUl4UCxNQUFNZ0wsR0FDZjNPLEVBQUksRUFBR0EsRUFBSTJPLElBQU8zTyxFQUN4Qm1ULEVBQU9uVCxHQUFLMnJCLEdBQUloZCxFQUFNLEVBQUksR0FBSzNPLEVBQUksR0FFckMsT0FBT21ULEc4RG1YTCxHQUFNLEVDdmFWLElBQUksR0FBVyxFQUFTLEdBQW1DLElBRXZEdWxHLEdBQU8sQ0FDVEMsVUFmRixTQUFtQnQ5QixHQUNqQixPQUFlLEdBZWZoNEUsT0FBUSxHQUNSOHhGLFFBQVMsR0FDVDJjLFdBQVksR0FDWnBrRyxLQUFNLEdBQ05vekIsS0FBTSxHQUNOaXhFLFlBQWEsR0FDYjZHLE9BQVEsR0FDUnB0QixRQUFTLEdBQ1RtUSxPQUFRLEdBQ1IxNUUsT0FBUSxHQUNSekIsUUFBUyxHQUNUcTRGLFNBQVUsR0FDVmhULElBQUssR0FDTHVNLFFBQVMsR0FDVC9uRSxVQUFXLEdBQ1h6USxTQTNCRixTQUFrQnR4QixHQUNoQixPQUFPQSxHQTJCUHdnQyxRQUFTLEdBQ1R3bUUsT0F6QkYsU0FBZ0JobkcsR0FDZCxPQUFPQSxHQXlCUG10RyxLQUFNLEdBQ05xRCxPQUFRLEdBQ1JoVCxRQUFTLEdBQ1RFLE1BQU8sR0FDUG5GLFlBQWEsR0FDYk0sTUFBTyxHQUNQaUYsU0FBVSxHQUNWdUIsWUFBYSxHQUNiQyxHQUFJLEdBQ0pFLEtBQU0sSUFlUixJQUFJaVIsR0FBYSxFQUFTLEdBQW9DLElBRTFEQyxHQUFVLENBQ1pMLFVBZkYsU0FBcUJ0OUIsR0FDbkIsTUFBTyxJQWVQaDRFLE9BQVEsR0FDUjh4RixRQUFTLEdBQ1QyYyxXQUFZLEdBQ1pwa0csS0FBTSxHQUNOb3pCLEtBQU0sR0FDTml4RSxZQUFhLEdBQ2I2RyxPQUFRLEdBQ1JwdEIsUUFBUyxHQUNUbVEsT0FBUSxHQUNSMTVFLE9BQVEsR0FDUnpCLFFBQVMsR0FDVHE0RixTQUFVRSxHQUNWbFQsSUFBSyxHQUNMdU0sUUFBUyxHQUNUL25FLFVBMUJGLFNBQW1CL2hDLEdBQ2pCLE9BQU9BLEdBMEJQc3hCLFNBQVUsR0FDVmtQLFFBeEJGLFNBQWlCeGdDLEdBQ2YsT0FBT0EsR0F3QlBnbkcsT0FBUSxHQUNSbUcsS0FBTSxHQUNOcUQsT0FBUSxHQUNSaFQsUUFBUyxHQUNURSxNQUFPLEdBQ1BuRixZQUFhLEdBQ2JNLE1BQU8sR0FDUGlGLFNBQVUsR0FDVnVCLFlBQWEsR0FDYkMsR0FBSSxHQUNKRSxLQUFNLElDMFBSLFNBQVMsR0FBSXA2RixHQUNYLE1BQXFCLENBQ2JBLEVBQ0EsRUFBUyxHQUFxQmlyRyxlQUFXNXlHLElBSW5ELFNBQVMsR0FBSzJILEVBQU11ckcsR0FDbEIsTUFBcUIsQ0FDYnZyRyxFQUNBdXJHLEdBYVYsU0FBUyxHQUFXNTlCLEdBQ2xCLE9BQU8sRUFBUyxHQUFxQnA1RCxPQUFRLEVBQVMsR0FBcUJrL0UsTUFBTTlCLEtBQU1oa0IsRUFBTSxJQUFLQSxFQUFNLElBb0MxRyxTQUFTLEdBQUtBLEdBQ1osT0FBT0EsRUFBTSxHQUdmLFNBQVMsR0FBS0EsR0FDWixPQUFPQSxFQUFNLEdBR2YsU0FBUyxHQUFPNjlCLEVBQVdDLEdBQ3pCLE1BQXFCLENBQ2IsR0FBS0QsR0FDTCxFQUFTLEdBQXFCajNGLE9BQVEsR0FBS2kzRixHQUFZLEdBQVdDLEtBSTVFLElBQUksR0FBZSxDQUNqQnhkLE9BQVEsSUFHTixHQUFVLEdBQXNELElBRWhFLEdBQVcsQ0FDYkEsT0FBUSxJQUdWLFNBQVMsR0FBVzV3RixFQUFHc3dFLEdBQ3JCLE9BQU8sRUFBUyxHQUFxQitxQixTQUFTeEYsVUFBVzcxRixFQUFHc3dFLEVBQU0sR0FBSUEsRUFBTSxJQUc5RSxTQUFTLEdBQVN0d0UsRUFBRzhpRixFQUFNeFMsR0FDekIsT0FBTyxFQUFTLEdBQXFCK3FCLFNBQVN4RixVQUFXNzFGLEVBQUcsRUFBU0EsRUFBRzhpRixFQUFNeFMsRUFBTSxJQUFLQSxFQUFNLElBR2pHLFNBQVMsR0FBVXR3RSxFQUFHOGlGLEVBQU14UyxHQUMxQixPQUFPLEVBQVN0d0UsRUFBR3N3RSxFQUFNLEdBQUksRUFBUyxHQUFxQitxQixTQUFTckYsV0FBWWgyRixFQUFHOGlGLEVBQU14UyxFQUFNLEtBR2pHLFNBQVMsR0FBa0Jpc0IsR0FDekIsSUFBSThSLEVBQWMsRUFBUyxHQUFxQmhULFNBQVM1RixTQUFVOEcsR0FJbkUsTUFBTyxDQUNDakgsU0FKTyxTQUFVdDFGLEVBQUdzd0UsR0FDMUIsT0FBTyxFQUFTaXNCLEVBQU8zTCxPQUFRLEVBQVM1d0YsRUFBR3N3RSxFQUFNLElBQUssRUFBUys5QixFQUFZL1ksU0FBVXQxRixFQUFHc3dFLEVBQU0sT0FPbEcsU0FBUyxHQUFzQmlzQixHQUM3QixJQUFJK1IsRUFBcUIsRUFBUyxHQUFxQmpULFNBQVNqRyxhQUFjbUgsR0FJOUUsTUFBTyxDQUNDakgsU0FKTyxTQUFVdDFGLEVBQUdzd0UsR0FDMUIsT0FBTyxFQUFTaXNCLEVBQU8zTCxPQUFRLEVBQVM1d0YsRUFBR3N3RSxFQUFNLElBQUssRUFBU2crQixFQUFtQmhaLFNBQVV0MUYsRUFBR3N3RSxFQUFNLE9BT3pHLFNBQVMsR0FBdUJpc0IsR0FDOUIsSUFBSWdTLEVBQWtCLEVBQVMsR0FBcUJsVCxTQUFTbUIsY0FBZUQsR0FJNUUsTUFBTyxDQUNDakgsU0FKTyxTQUFVdDFGLEVBQUdzd0UsR0FDMUIsT0FBTyxFQUFTaXNCLEVBQU92Z0QsSUFBSyxFQUFTaDhDLEVBQUdzd0UsRUFBTSxJQUFLLEVBQVNpK0IsRUFBZ0JqWixTQUFVdDFGLEVBQUdzd0UsRUFBTSxPQU9uRyxJQUFJLEdBQVcsQ0FDYnVsQixVQUFXLEdBQ1hHLFdBQVksR0FDWlAsU0FBVSxHQUNWTCxhQUFjLEdBQ2RvSCxjQUFlLElBR2IsR0FBWSxHQUE4QyxJQUU5RCxTQUFTLEdBQUl4OEYsRUFBR3N3RSxHQUNkLE1BQXFCLENBQ2IsRUFBU3R3RSxFQUFHc3dFLEVBQU0sSUFDbEIsRUFBUyxHQUFxQjhsQixNQUFNejlFLElBQUszWSxFQUFHc3dFLEVBQU0sS0FJNUQsSUFBSSxHQUFVLENBQ1ozM0QsSUFBSyxJQUdILEdBQVksR0FBNEMsSUFFNUQsU0FBUyxHQUFNNjFGLEVBQUludUcsR0FDakIsT0FBTyxHQUFXLEdBQVEsSUFBSSxTQUFXTCxHQUN2QixPQUFPLEdBQUlBLEVBQUdLLEtBQ1ptdUcsSUFHdEIsSUFBSSxHQUFRLENBQ1Y3MUYsSUFBSyxHQUNMMUcsTUFBTyxJQUdMLEdBQVksR0FBd0MsSUFFcEQsR0FBYyxDQUNoQjBHLElBQUssR0FDTDFHLE1BQU8sR0FDUHFpRixLQUFNLElBR0osR0FBWSxHQUFvRCxJQUVwRSxTQUFTLEdBQUttYSxFQUFVenVHLEdBQ3RCLE9BQU8sR0FBVyxHQUFRLEdBQUlBLEVBQUd5dUcsSUFHbkMsSUFBSSxHQUFRLENBQ1Y5MUYsSUFBSyxHQUNMMUcsTUFBTyxHQUNQcWlGLEtBQU0sR0FDTnBELFNBQVUsSUFHUixHQUFZLEdBQXdDLElBRXhELFNBQVMsR0FBU3dkLEVBQU85dEYsR0FDdkIsT0FBT0EsRUFBRyxJQUFNOHRGLEVBQVEsRUFBUyxHQUFxQlosU0FBVVksRUFBTzl0RixFQUFHLEtBa0I1RSxTQUFTLEdBQUtzOEUsRUFBS3Q4RSxFQUFJMGtFLEdBQ3JCLFFBQUksRUFBUzRYLEVBQUt0OEUsRUFBRyxHQUFJMGtFLEVBQUcsS0FDbkIsRUFBUyxHQUFxQm9sQixLQUFNeE4sRUFBS3Q4RSxFQUFHLEdBQUkwa0UsRUFBRyxJQW1COUQsU0FBUyxHQUFPcXBCLEVBQU8vdEYsR0FFckIsTUFBTyxLQUFRLEdBQVMsS0FEVixHQUFJK3RGLEVBQU8vdEYsSUFDZ0IsS0ErQzNDLElBNEhJLEdBQU8sQ0FDVCs1QyxJQUFLLEdBQ0x3aEMsS0FBTSxHQUNOeVMsYUFsWUYsU0FBc0IvdkMsR0FDcEIsT0FBTyxHQUFnQixFQUFTLEdBQXFCbDhELEtBQU1rOEQsSUFBVyxTQUFXbDhELEdBQ25FLE1BQXFCLENBQ2JBLEVBQ0EsRUFBUyxHQUFxQnFrRyxZQUFhbm9DLFFBK1hqRWd3QyxXQUFZLEdBQ1poZ0YsU0F2WEYsU0FBa0I1TCxHQUNoQixHQUFJQSxFQUNGLE1BQXFCLENBQ2JBLEVBQUssR0FDTCxFQUFTLEdBQXFCNEwsU0FBVTVMLEVBQUssTUFvWHZEcWMsVUE5V0YsU0FBbUJrSCxHQUNqQixPQUFPLElBQTRCLFNBQVc4cEMsR0FDaEMsTUFBcUIsQ0FDYkEsRUFBTSxHQUNOLEVBQVMsR0FBcUJoeEMsVUFBV2d4QyxFQUFNLE9BRXJELEdBQXlCOXBDLEtBeVd6Q3NvRSxLQXRXRixTQUFjbnNHLEVBQU1vc0csR0FDbEIsTUFBcUIsQ0FDYnBzRyxFQUNBLEdBQVdvc0csS0FvV25CbEIsT0FoV0YsU0FBZ0J2OUIsR0FDZCxNQUFrQixDQUNWQSxFQUFNLEdBQ05BLEVBQU0sS0E4VmQzdEUsS0FBTSxHQUNOb3pCLEtBQU0sR0FDTjdlLE9BQVEsR0FDUjgzRixhQUFjLEdBQ2R0SixZQXpJcUIsR0FBUUEsWUEwSTdCdUosU0FBVSxHQUNWQyxXQUFZLEdBQ1p2RSxTQUFVLEdBQ1Y4QixVQUFXLEdBQ1hwUixTQUFVLEdBQ1Z3SSxxQkE3SThCLEdBQVVBLHFCQThJeEM3Z0MsSUE1SWEsR0FBVUEsSUE2SXZCa2hDLFdBM0lvQixHQUFVQSxXQTRJOUJDLFNBMUlrQixHQUFVQSxTQTJJNUJMLFVBekltQixHQUFVQSxVQTBJN0JqbUcsUUF4SWlCLEdBQVVBLFFBeUkzQmttRyxNQXZJZSxHQUFVQSxNQXdJekIzbUYsSUF0SWEsR0FBVUEsSUF1SXZCNG1GLE1BckllLEdBQVVBLE1Bc0l6QnhvRixJQXBJYSxHQUFVQSxJQXFJdkJ5b0YsUUFuSWlCLEdBQVVBLFFBb0kzQjNyRyxPQWxJZ0IsR0FBVUEsT0FtSTFCcWUsS0FqSWMsR0FBVUEsS0FrSXhCK0osTUFoSWUsR0FBVUEsTUFpSXpCNWpCLFFBL0hpQixHQUFVQSxRQWdJM0J1bkcsaUJBOUgwQixHQUFVQSxpQkErSHBDNzVDLEtBN0hjLEdBQVVBLEtBOEh4Qjg1QyxjQTVIdUIsR0FBVUEsY0E2SGpDQyxPQTNIZ0IsR0FBVUEsT0E0SDFCeG1FLFFBMUhpQixHQUFVQSxRQTJIM0J5bUUsNEJBekhxQyxHQUFVQSw0QkEwSC9DRyx5QkF4SGtDLEdBQVVBLHlCQXlINUNFLFFBdkhpQixHQUFVQSxRQXdIM0JDLGVBdEh3QixHQUFVQSxlQXVIbENuUCxZQXJIcUIsR0FBVUEsWUFzSC9CcVAsOEJBcEh1QyxHQUFVQSw4QkFxSGpESSx3QkFuSGlDLEdBQVVBLHdCQW9IM0NHLHFCQWxIOEIsR0FBVUEscUJBbUh4Q0Msc0JBakgrQixHQUFVQSxzQkFrSHpDN3NGLElBQUssR0FDTG9pRixRQUFTLEdBQ1Q3QyxvQkFsSDZCLEdBQVVBLG9CQW1IdkNDLFFBakhpQixHQUFVQSxRQWtIM0JoRixPQWhIYyxHQUFVQSxPQWlIeEJpRixVQS9HbUIsR0FBVUEsVUFnSDdCQyxTQTlHa0IsR0FBVUEsU0ErRzVCOUUsS0E3R2MsR0FBVUEsS0E4R3hCdGhGLE1BQU8sR0FDUGdwRixNQUFPLEdBQ1AzRSxrQkE5RzJCLEdBQVVBLGtCQStHckNLLFdBN0dvQixHQUFVQSxXQThHOUJDLFlBNUdxQixHQUFVQSxZQTZHL0JMLEtBM0djLEdBQVVBLEtBNEd4QkMsS0ExR2MsR0FBVUEsS0EyR3hCQyxLQXpHYyxHQUFVQSxLQTBHeEJDLEtBeEdjLEdBQVVBLEtBeUd4QkcsT0F2R2dCLEdBQVVBLE9Bd0cxQkMsT0F0R2dCLEdBQVVBLE9BdUcxQkUsT0FyR2dCLEdBQVVBLE9Bc0cxQkUsT0FwR2dCLEdBQVVBLE9BcUcxQkUsVUFuR21CLEdBQVVBLFVBb0c3QkMsVUFsR21CLEdBQVVBLFVBbUc3QkMsVUFqR21CLEdBQVVBLFVBa0c3QkMsVUFoR21CLEdBQVVBLFVBaUc3QmpELEtBQU0sR0FDTndCLFlBQWEsR0FDYjhDLHdCQWpHaUMsR0FBVUEsd0JBa0czQ3BFLE9BaEdnQixHQUFVQSxPQWlHMUIxbEMsSUEvRmEsR0FBVUEsSUFnR3ZCcjRELEtBQU0sR0FDTjIvRixNQUFPLEdBQ1B1QixrQkFoRzJCLEdBQVVBLGtCQWlHckNDLFFBL0ZpQixHQUFVQSxRQWdHM0JuRCxRQTlGaUIsR0FBVUEsUUErRjNCcUQsZUE3RndCLEdBQVVBLGVBOEZsQ0MsbUJBNUY0QixHQUFVQSxtQkE2RnRDakQsT0EzRmdCLEdBQVVBLE9BNEYxQlQsTUExRmUsR0FBVUEsTUEyRnpCRSxPQXpGZ0IsR0FBVUEsT0EwRjFCdVosU0FBVSxHQUNWcjRGLFFBMVNGLFNBQWlCNjZELEdBQ2YsSUFBSTN0RSxFQUFPMnRFLEVBQU0sR0FDakIsT0FBTyxJQUFpQyxTQUFXQSxHQUNyQyxNQUFxQixDQUNiM3RFLEVBQ0EsRUFBUyxHQUFxQmlyRyxlQUFXNXlHLE1BRS9DLElBQTRCLFNBQVdzMUUsR0FDckMsTUFBcUIsQ0FDYkEsRUFBTSxHQUNOLEVBQVMsR0FBcUJzZ0IsT0FBUWp1RixFQUFNMnRFLEVBQU0sT0FFeEQsRUFBUyxHQUFxQnU5QixPQUFRLEVBQVMsR0FBcUJwNEYsUUFBUzY2RCxFQUFNLFFBK1J2R282QixLQUFNLEdBQ043WSxHQXJSRixTQUFZcUwsRUFBS3Q4RSxFQUFJMGtFLEdBQ25CLE9BQU8sR0FBSzRYLEVBQUlyTCxHQUFJanhFLEVBQUkwa0UsSUFxUnhCdVgsR0FsUkYsU0FBWStKLEdBSVYsTUFBTyxDQUNDL1UsR0FKQyxTQUFVanhFLEVBQUkwa0UsR0FDckIsT0FBTyxHQUFLc2hCLEVBQUkvVSxHQUFJanhFLEVBQUkwa0UsTUFpUjFCeW9CLE9BQVEsR0FDUi9RLEtBdFFGLFNBQWNtUyxFQUFPdnVGLEdBQ25CLE9BQU8sR0FBT3V1RixFQUFNblMsS0FBTXA4RSxJQXNRMUJtOEUsS0FuUUYsU0FBYzc5RixHQUlaLE1BQU8sQ0FDQzg5RixLQUpHLFNBQVUxc0IsR0FDbkIsT0FBTyxHQUFPcHhFLEVBQUU4OUYsS0FBTTFzQixNQWtReEI4K0IsZ0JBM1BGLFNBQXlCbndHLEdBQ3ZCLElBQUlvd0csRUFBa0IsRUFBUyxHQUFxQnpTLFlBQWEzOUYsR0FDN0QyN0YsRUFBVyxTQUFVNTZGLEVBQUdzd0UsR0FDMUIsT0FBTyxFQUFTcnhFLEVBQUVnVCxNQUFPLEVBQVNoVCxFQUFFMFosSUFBSyxHQUFNLEVBQVMzWSxFQUFHc3dFLEVBQU0sS0FBTSxFQUFTKytCLEVBQWdCelUsU0FBVTU2RixFQUFHc3dFLEVBQU0sTUFFakh6UixFQUFXLFNBQVV4K0QsR0FDdkIsT0FBT3U2RixHQUFTLFNBQVc1N0YsR0FDYixPQUFPQSxJQUNMcUIsSUFLZHU4RixFQUFjLENBQ2hCamtGLElBQUssR0FDTGs5RSxVQUFXLEdBQ1hHLFdBQVksR0FDWlAsU0FQeUIsR0FRekJMLGFBUDZCLEdBUTdCb0gsY0FQOEIsR0FROUI1QixTQUFVQSxFQUNWLzdCLFNBQVVBLEdBR1osTUFBTyxDQUNDKzlCLFlBQWFBLEVBQ2JoQyxTQUFVQSxFQUNWLzdCLFNBQVVBLEtBbU9wQixTQUFTeXdDLEdBQU0zc0csR0FDYixNQUFxQixDQUNiQSxFQUNBLEVBQVMsR0FBd0JpckcsZUFBVzV5RyxJQUl0RCxTQUFTdTBHLEdBQU81c0csRUFBTXVyRyxHQUNwQixNQUFxQixDQUNidnJHLEVBQ0F1ckcsR0FhVixTQUFTc0IsR0FBYWwvQixHQUNwQixPQUFPLEVBQVMsR0FBd0JwNUQsT0FBUSxFQUFTLEdBQXdCay9FLE1BQU05QixLQUFNaGtCLEVBQU0sSUFBS0EsRUFBTSxJQW9DaEgsU0FBU20vQixHQUFPbi9CLEdBQ2QsT0FBT0EsRUFBTSxHQUdmLFNBQVNvL0IsR0FBT3AvQixHQUNkLE9BQU9BLEVBQU0sR0FHZixTQUFTcS9CLEdBQVN4QixFQUFXQyxHQUMzQixNQUFxQixDQUNicUIsR0FBT3RCLEdBQ1AsRUFBUyxHQUF3QmozRixPQUFRdzRGLEdBQU92QixHQUFZcUIsR0FBYXBCLEtBSW5GLElBQUl3QixHQUFpQixDQUNuQmhmLE9BQVErZSxJQUdOLEdBQVksR0FBc0RDLElBRWxFQyxHQUFhLENBQ2ZqZixPQUFRK2UsSUFHVixTQUFTRyxHQUFhOXZHLEVBQUdzd0UsR0FDdkIsT0FBTyxFQUFTLEdBQXdCK3FCLFNBQVN4RixVQUFXNzFGLEVBQUdzd0UsRUFBTSxHQUFJQSxFQUFNLElBR2pGLFNBQVN5L0IsR0FBVy92RyxFQUFHOGlGLEVBQU14UyxHQUMzQixPQUFPLEVBQVMsR0FBd0IrcUIsU0FBU3hGLFVBQVc3MUYsRUFBRyxFQUFTQSxFQUFHOGlGLEVBQU14UyxFQUFNLElBQUtBLEVBQU0sSUFHcEcsU0FBUzAvQixHQUFZaHdHLEVBQUc4aUYsRUFBTXhTLEdBQzVCLE9BQU8sRUFBU3R3RSxFQUFHc3dFLEVBQU0sR0FBSSxFQUFTLEdBQXdCK3FCLFNBQVNyRixXQUFZaDJGLEVBQUc4aUYsRUFBTXhTLEVBQU0sS0FHcEcsU0FBUzIvQixHQUFvQjFULEdBQzNCLElBQUk4UixFQUFjLEVBQVMsR0FBd0JoVCxTQUFTNUYsU0FBVThHLEdBSXRFLE1BQU8sQ0FDQ2pILFNBSk8sU0FBVXQxRixFQUFHc3dFLEdBQzFCLE9BQU8sRUFBU2lzQixFQUFPM0wsT0FBUSxFQUFTNXdGLEVBQUdzd0UsRUFBTSxJQUFLLEVBQVMrOUIsRUFBWS9ZLFNBQVV0MUYsRUFBR3N3RSxFQUFNLE9BT2xHLFNBQVM0L0IsR0FBd0IzVCxHQUMvQixJQUFJK1IsRUFBcUIsRUFBUyxHQUF3QmpULFNBQVNqRyxhQUFjbUgsR0FJakYsTUFBTyxDQUNDakgsU0FKTyxTQUFVdDFGLEVBQUdzd0UsR0FDMUIsT0FBTyxFQUFTaXNCLEVBQU8zTCxPQUFRLEVBQVM1d0YsRUFBR3N3RSxFQUFNLElBQUssRUFBU2crQixFQUFtQmhaLFNBQVV0MUYsRUFBR3N3RSxFQUFNLE9BT3pHLFNBQVM2L0IsR0FBeUI1VCxHQUNoQyxJQUFJZ1MsRUFBa0IsRUFBUyxHQUF3QmxULFNBQVNtQixjQUFlRCxHQUkvRSxNQUFPLENBQ0NqSCxTQUpPLFNBQVV0MUYsRUFBR3N3RSxHQUMxQixPQUFPLEVBQVNpc0IsRUFBT3ZnRCxJQUFLLEVBQVNoOEMsRUFBR3N3RSxFQUFNLElBQUssRUFBU2krQixFQUFnQmpaLFNBQVV0MUYsRUFBR3N3RSxFQUFNLE9BT25HLElBQUk4L0IsR0FBYSxDQUNmdmEsVUFBV2thLEdBQ1gvWixXQUFZZ2EsR0FDWnZhLFNBQVV3YSxHQUNWN2EsYUFBYzhhLEdBQ2QxVCxjQUFlMlQsSUFHYixHQUFZLEdBQThDQyxJQUU5RCxTQUFTLEdBQU1wd0csRUFBR3N3RSxHQUNoQixNQUFxQixDQUNiLEVBQVN0d0UsRUFBR3N3RSxFQUFNLElBQ2xCLEVBQVMsR0FBd0I4bEIsTUFBTXo5RSxJQUFLM1ksRUFBR3N3RSxFQUFNLEtBSS9ELElBQUksR0FBWSxDQUNkMzNELElBQUssSUFHSCxHQUFZLEdBQTRDLElBRTVELFNBQVMsR0FBUTYxRixFQUFJbnVHLEdBQ25CLE9BQU95dkcsR0FBYUgsR0FBVSxJQUFNLFNBQVczdkcsR0FDN0IsT0FBTyxHQUFNQSxFQUFHSyxLQUNkbXVHLElBR3RCLElBQUksR0FBVSxDQUNaNzFGLElBQUssR0FDTDFHLE1BQU8sSUFHTCxHQUFZLEdBQXdDLElBRXBELEdBQWdCLENBQ2xCMEcsSUFBSyxHQUNMMUcsTUFBTyxHQUNQcWlGLEtBQU1nYixJQUdKLEdBQWEsR0FBb0QsSUFFckUsU0FBU2UsR0FBTzVCLEVBQVV6dUcsR0FDeEIsT0FBTzh2RyxHQUFhSCxHQUFVLEdBQU0zdkcsRUFBR3l1RyxJQUd6QyxJQUFJLEdBQVUsQ0FDWjkxRixJQUFLLEdBQ0wxRyxNQUFPLEdBQ1BxaUYsS0FBTWdiLEdBQ05wZSxTQUFVbWYsSUFHUixHQUFhLEdBQXdDLElBRXpELFNBQVMsR0FBVzNCLEVBQU85dEYsR0FDekIsT0FBT0EsRUFBRyxJQUFNOHRGLEVBQVEsRUFBUyxHQUF3QlosU0FBVVksRUFBTzl0RixFQUFHLEtBa0IvRSxTQUFTMHZGLEdBQU9wVCxFQUFLdDhFLEVBQUkwa0UsR0FDdkIsUUFBSSxFQUFTNFgsRUFBS3Q4RSxFQUFHLEdBQUkwa0UsRUFBRyxLQUNuQixFQUFTLEdBQXdCb2xCLEtBQU14TixFQUFLdDhFLEVBQUcsR0FBSTBrRSxFQUFHLElBbUJqRSxTQUFTaXJCLEdBQVM1QixFQUFPL3RGLEdBRXZCLE1BQU8sS0FBUSxHQUFXLEtBRFosR0FBTSt0RixFQUFPL3RGLElBQ2dCLEtBNkQ3QyxJQTRISSxHQUFVLENBQ1orNUMsSUFBSzIwQyxHQUNMblQsS0FBTW9ULEdBQ05YLGFBaFpGLFNBQXdCL3ZDLEdBQ3RCLE9BQU8sR0FBZ0IsRUFBUyxHQUF3Qmw4RCxLQUFNazhELElBQVcsU0FBV2w4RCxHQUN0RSxNQUFxQixDQUNiQSxFQUNBLEVBQVMsR0FBd0Jxa0csWUFBYW5vQyxRQTZZcEVnd0MsV0FBWVcsR0FDWjNnRixTQXJZRixTQUFvQjVMLEdBQ2xCLEdBQUlBLEVBQ0YsTUFBcUIsQ0FDYkEsRUFBSyxHQUNMLEVBQVMsR0FBd0I0TCxTQUFVNUwsRUFBSyxNQWtZMURxYyxVQTVYRixTQUFxQmtILEdBQ25CLE9BQU8sSUFBNEIsU0FBVzhwQyxHQUNoQyxNQUFxQixDQUNiQSxFQUFNLEdBQ04sRUFBUyxHQUF3Qmh4QyxVQUFXZ3hDLEVBQU0sT0FFeEQsR0FBeUI5cEMsS0F1WHpDc29FLEtBcFhGLFNBQWdCbnNHLEVBQU1vc0csR0FDcEIsTUFBcUIsQ0FDYnBzRyxFQUNBNnNHLEdBQWFULEtBa1hyQmxCLE9BOVdGLFNBQWtCdjlCLEdBQ2hCLE1BQWtCLENBQ1ZBLEVBQU0sR0FDTkEsRUFBTSxLQTRXZDN0RSxLQUFNOHNHLEdBQ04xNUUsS0FBTTI1RSxHQUNOeDRGLE9BQVF5NEYsR0FDUlgsYUFBY1ksR0FDZGxLLFlBeklzQixHQUFVQSxZQTBJaEN1SixTQUFVWSxHQUNWWCxXQUFZWSxHQUNabkYsU0FBVW9GLEdBQ1Z0RCxVQUFXdUQsR0FDWDNVLFNBQVUrVSxHQUNWdk0scUJBN0krQixHQUFVQSxxQkE4SXpDN2dDLElBNUljLEdBQVVBLElBNkl4QmtoQyxXQTNJcUIsR0FBVUEsV0E0SS9CQyxTQTFJbUIsR0FBVUEsU0EySTdCTCxVQXpJb0IsR0FBVUEsVUEwSTlCam1HLFFBeElrQixHQUFVQSxRQXlJNUJrbUcsTUF2SWdCLEdBQVVBLE1Bd0kxQjNtRixJQXRJYyxHQUFVQSxJQXVJeEI0bUYsTUFySWdCLEdBQVVBLE1Bc0kxQnhvRixJQXBJYyxHQUFVQSxJQXFJeEJ5b0YsUUFuSWtCLEdBQVVBLFFBb0k1QjNyRyxPQWxJaUIsR0FBVUEsT0FtSTNCcWUsS0FqSWUsR0FBVUEsS0FrSXpCK0osTUFoSWdCLEdBQVVBLE1BaUkxQjVqQixRQS9Ia0IsR0FBVUEsUUFnSTVCdW5HLGlCQTlIMkIsR0FBVUEsaUJBK0hyQzc1QyxLQTdIZSxHQUFVQSxLQThIekI4NUMsY0E1SHdCLEdBQVVBLGNBNkhsQ0MsT0EzSGlCLEdBQVVBLE9BNEgzQnhtRSxRQTFIa0IsR0FBVUEsUUEySDVCeW1FLDRCQXpIc0MsR0FBVUEsNEJBMEhoREcseUJBeEhtQyxHQUFVQSx5QkF5SDdDRSxRQXZIa0IsR0FBVUEsUUF3SDVCQyxlQXRIeUIsR0FBVUEsZUF1SG5DblAsWUFySHNCLEdBQVVBLFlBc0hoQ3FQLDhCQXBId0MsR0FBVUEsOEJBcUhsREksd0JBbkhrQyxHQUFVQSx3QkFvSDVDRyxxQkFsSCtCLEdBQVVBLHFCQW1IekNDLHNCQWpIZ0MsR0FBVUEsc0JBa0gxQzdzRixJQUFLLEdBQ0xvaUYsUUFBUyxHQUNUN0Msb0JBbEg4QixHQUFVQSxvQkFtSHhDQyxRQWpIa0IsR0FBVUEsUUFrSDVCaEYsT0FoSGUsR0FBVUEsT0FpSHpCaUYsVUEvR29CLEdBQVVBLFVBZ0g5QkMsU0E5R21CLEdBQVVBLFNBK0c3QjlFLEtBN0dlLEdBQVVBLEtBOEd6QnRoRixNQUFPLEdBQ1BncEYsTUFBTyxHQUNQM0Usa0JBOUc0QixHQUFVQSxrQkErR3RDSyxXQTdHcUIsR0FBVUEsV0E4Ry9CQyxZQTVHc0IsR0FBVUEsWUE2R2hDTCxLQTNHZSxHQUFVQSxLQTRHekJDLEtBMUdlLEdBQVVBLEtBMkd6QkMsS0F6R2UsR0FBVUEsS0EwR3pCQyxLQXhHZSxHQUFVQSxLQXlHekJHLE9BdkdpQixHQUFVQSxPQXdHM0JDLE9BdEdpQixHQUFVQSxPQXVHM0JFLE9BckdpQixHQUFVQSxPQXNHM0JFLE9BcEdpQixHQUFVQSxPQXFHM0JFLFVBbkdvQixHQUFVQSxVQW9HOUJDLFVBbEdvQixHQUFVQSxVQW1HOUJDLFVBakdvQixHQUFVQSxVQWtHOUJDLFVBaEdvQixHQUFVQSxVQWlHOUJqRCxLQUFNZ2IsR0FDTnhaLFlBQWEsR0FDYjhDLHdCQWpHa0MsR0FBV0Esd0JBa0c3Q3BFLE9BaEdpQixHQUFXQSxPQWlHNUIxbEMsSUEvRmMsR0FBV0EsSUFnR3pCcjRELEtBQU00NUcsR0FDTmphLE1BQU8sR0FDUHVCLGtCQWhHNEIsR0FBV0Esa0JBaUd2Q0MsUUEvRmtCLEdBQVdBLFFBZ0c3Qm5ELFFBOUZrQixHQUFXQSxRQStGN0JxRCxlQTdGeUIsR0FBV0EsZUE4RnBDQyxtQkE1RjZCLEdBQVdBLG1CQTZGeENqRCxPQTNGaUIsR0FBV0EsT0E0RjVCVCxNQTFGZ0IsR0FBV0EsTUEyRjNCRSxPQXpGaUIsR0FBV0EsT0EwRjVCdVosU0FBVSxHQUNWcjRGLFFBeFRGLFNBQW1CNjZELEdBQ2pCLElBQUkzdEUsRUFBTzJ0RSxFQUFNLEdBQ2pCLE9BQU8sSUFBaUMsU0FBV0EsR0FDckMsTUFBcUIsQ0FDYjN0RSxFQUNBLEVBQVMsR0FBd0JpckcsZUFBVzV5RyxNQUVsRCxJQUE0QixTQUFXczFFLEdBQ3JDLE1BQXFCLENBQ2JBLEVBQU0sR0FDTixFQUFTLEdBQXdCc2dCLE9BQVFqdUYsRUFBTTJ0RSxFQUFNLE9BRTNELEVBQVMsR0FBd0J1OUIsT0FBUSxFQUFTLEdBQXdCcDRGLFFBQVM2NkQsRUFBTSxRQTZTN0dvNkIsS0FBTTRGLEdBQ056ZSxHQW5TRixTQUFjcUwsRUFBS3Q4RSxFQUFJMGtFLEdBQ3JCLE9BQU9nckIsR0FBT3BULEVBQUlyTCxHQUFJanhFLEVBQUkwa0UsSUFtUzFCdVgsR0FoU0YsU0FBYytKLEdBSVosTUFBTyxDQUNDL1UsR0FKQyxTQUFVanhFLEVBQUkwa0UsR0FDckIsT0FBT2dyQixHQUFPMUosRUFBSS9VLEdBQUlqeEUsRUFBSTBrRSxNQStSNUJ5b0IsT0FBUXdDLEdBQ1J2VCxLQXBSRixTQUFnQm1TLEVBQU92dUYsR0FDckIsT0FBTzJ2RixHQUFTcEIsRUFBTW5TLEtBQU1wOEUsSUFvUjVCbThFLEtBalJGLFNBQWdCNzlGLEdBSWQsTUFBTyxDQUNDODlGLEtBSkcsU0FBVTFzQixHQUNuQixPQUFPaWdDLEdBQVNyeEcsRUFBRTg5RixLQUFNMXNCLE1BZ1IxQjgrQixnQkF6UUYsU0FBMkJud0csR0FDekIsSUFBSW93RyxFQUFrQixFQUFTLEdBQXdCelMsWUFBYTM5RixHQUNoRTI3RixFQUFXLFNBQVU1NkYsRUFBR3N3RSxHQUMxQixPQUFPLEVBQVNyeEUsRUFBRWdULE1BQU8sRUFBU2hULEVBQUUwWixJQUFLNDJGLEdBQVEsRUFBU3Z2RyxFQUFHc3dFLEVBQU0sS0FBTSxFQUFTKytCLEVBQWdCelUsU0FBVTU2RixFQUFHc3dFLEVBQU0sTUFFbkh6UixFQUFXLFNBQVV4K0QsR0FDdkIsT0FBT3U2RixHQUFTLFNBQVc1N0YsR0FDYixPQUFPQSxJQUNMcUIsSUFLZHU4RixFQUFjLENBQ2hCamtGLElBQUssR0FDTGs5RSxVQUFXa2EsR0FDWC9aLFdBQVlnYSxHQUNadmEsU0FQeUJ3YSxHQVF6QjdhLGFBUDZCOGEsR0FRN0IxVCxjQVA4QjJULEdBUTlCdlYsU0FBVUEsRUFDVi83QixTQUFVQSxHQUdaLE1BQU8sQ0FDQys5QixZQUFhQSxFQUNiaEMsU0FBVUEsRUFDVi83QixTQUFVQSxJQStPbEIyeEMsZUEzT0YsU0FBd0JsZ0MsR0FDdEIsTUFBcUIsQ0FDYkEsRUFBTSxHQUNOLEdBQW9CQSxFQUFNLE1BeU9sQ21nQyxpQkFyT0YsU0FBMEJuZ0MsR0FDeEIsTUFBcUIsQ0FDYkEsRUFBTSxHQUNOLEdBQWtCQSxFQUFNLE9DMWdDbEMsU0FBU29nQyxHQUFNMXdHLEVBQUdqQixFQUFHeEIsR0FDbkIsT0FBSUEsRUFBRTVCLElBQ2MsRUFBUyxFQUFHLENBQUMsRUFBU29ELEVBQUd4QixFQUFFLE1BRTlCLEVBQVMsRUFBRyxDQUFDLEVBQVN5QyxFQUFHekMsRUFBRSxNQzFEOUMsU0FBUyxHQUFJeUMsRUFBR3pDLEdBQ2QsT0FBSUEsRUFBRTVCLElBQ0c0QixFQUVTLEVBQVMsRUFBRyxDQUFDLEVBQVN5QyxFQUFHekMsRUFBRSxNQTZEL0MsU0FBU296RyxHQUFzQkMsRUFBY3BDLEVBQUlxQyxHQUMvQyxJQUFLckMsRUFBRzd5RyxJQUNOLE9BQUlrMUcsRUFBR2wxRyxJQUNjLEVBQVMsRUFBRyxDQUFDazFHLEVBQUcsS0FFbkIsRUFBUyxFQUFHLENBQUMsRUFBU3JDLEVBQUcsR0FBSXFDLEVBQUcsTUFHcEQsSUFBSXo1RyxFQUFJbzNHLEVBQUcsR0FDWCxPQUFJcUMsRUFBR2wxRyxJQUNjLEVBQVMsRUFBRyxDQUFDLEVBQVNpMUcsRUFBY3g1RyxFQUFHeTVHLEVBQUcsTUFFMUMsRUFBUyxFQUFHLENBQUN6NUcsSUFJcEMsU0FBUzA1RyxHQUFzQkYsRUFBY3Z3RyxFQUFJZ3pGLEdBQy9DLEdBQUloekYsRUFBRzFFLElBQ0wsT0FBSTAzRixFQUFHMTNGLElBQ2MsRUFBUyxFQUFHLENBQUMsRUFBU2kxRyxFQUFjdndHLEVBQUcsR0FBSWd6RixFQUFHLE1BRWpELEVBQVMsRUFBRyxDQUFXLEVBQVMsRUFBRyxDQUFDQSxFQUFHLE9BRzNELElBQUk5MUYsRUFBSThDLEVBQUcsR0FDWCxPQUFJZ3pGLEVBQUcxM0YsSUFDVyxFQUFTLEVBQUcsQ0FBVyxFQUFTLEVBQUcsQ0FBQzRCLE1BRXBDLEVBQVMsRUFBRyxDQUFXLEVBQVMsRUFBRyxDQUNyQ0EsRUFDQTgxRixFQUFHLE9BU3JCLFNBQVMsR0FBSzkxRixHQUNaLE9BQWdCLEVBQVMsRUFBRyxDQUFDQSxJQUcvQixTQUFTLEdBQUs4QyxFQUFJTCxHQUNoQixPQUFJSyxFQUFHMUUsSUFDYyxFQUFTLEVBQUcsQ0FBQzBFLEVBQUcsS0FFNUIsRUFBU0wsRUFBR0ssRUFBRyxJQXdFMUIsU0FBUzB3RyxHQUFXQyxFQUFRQyxHQUMxQixJQUFJbFcsRUFBVSxDQUNacGlGLElBQUssSUFFSCtpRixFQUFVLEdBQTRDWCxHQUN0RDlvRixFQUFRLFNBQVV1OEYsRUFBSW51RyxHQUN4QixPQUFPc3dHLEdBQXNCSyxFQUFPcGdCLE9BQVE0ZCxFQUFJbnVHLElBRTlDNDZGLEVBQVEsQ0FDVnRpRixJQUFLLEdBQ0wxRyxNQUFPQSxHQUVMMHBGLEVBQVksR0FBd0NWLEdBQ3BEbkYsRUFBYyxDQUNoQm45RSxJQUFLLEdBQ0wxRyxNQUFPQSxFQUNQcWlGLEtBQU0sSUFFSjRjLEVBQVksR0FBb0RwYixHQU9oRXFiLEVBQVksQ0FDZHg0RixJQUFLLEdBQ0x5dUMsTUFSVSxTQUFVL21ELEVBQUlnekYsR0FDeEIsT0FBT3lkLEdBQXNCRSxFQUFPcGdCLE9BQVF2d0YsRUFBSWd6RixJQVFoRCtkLFVBTmMsU0FBVXB4RyxFQUFHSyxFQUFJZ3pGLEdBQy9CLE9BM0dKLFNBQW1DdWQsRUFBYzV3RyxFQUFHSyxFQUFJZ3pGLEdBQ3RELE9BQU8sR0FBSXJ6RixFQUFHOHdHLEdBQXNCRixFQUFjdndHLEVBQUlnekYsSUEwRzdDZ2UsQ0FBMEJMLEVBQU9wZ0IsT0FBUTV3RixFQUFHSyxFQUFJZ3pGLEtBUXJEK0MsRUFBUSxDQUNWejlFLElBQUssR0FDTDFHLE1BQU9BLEVBQ1BxaUYsS0FBTSxHQUNOcEQsU0FBVSxJQUVSb2dCLEVBQVksR0FBd0NsYixHQUNwRG1iLEVBQVksR0FBdUN4VyxHQUNuRHlXLEVBQVksR0FBbUN2VyxHQUMvQ3dXLEVBQVksR0FBbUNyYixHQWdCL0NuQyxFQUFRLENBQ1ZzRSxrQkFoQjRCZ1osRUFBVWhaLGtCQWlCdEN6SCxhQWhCNkJ5Z0IsRUFBVXpnQixhQWlCdkNDLGlCQWhCMkJ3Z0IsRUFBVXhnQixpQkFpQnJDeUgsT0FoQnVCK1ksRUFBVS9ZLE9BaUJqQ0MsUUFoQmtCOFksRUFBVTlZLFFBaUI1QkMsZUFoQnlCNlksRUFBVTdZLGVBaUJuQ2hCLGdCQWhCMEI4WixFQUFVOVosZ0JBaUJwQzFHLGlCQWhCMkJ3Z0IsRUFBVXhnQixpQkFpQnJDa0QsV0FoQnFCc2QsRUFBVXRkLFdBaUIvQkMsWUFoQnNCcWQsRUFBVXJkLFlBaUJoQzhELGdCQWhCMEJ3WixFQUFVeFosZ0JBaUJwQ2hILGdCQWhCMEJ3Z0IsRUFBVXhnQixnQkFpQnBDRSxjQWhCd0JzZ0IsRUFBVXRnQixjQWlCbENDLGdCQWhCMEJxZ0IsRUFBVXJnQixnQkFpQnBDQyxjQWhCd0JvZ0IsRUFBVXBnQixlQWtCcEMsTUFBTyxDQUNDMEosUUFBU0EsRUFDVHBpRixJQUFLLEdBQ0x1L0Usb0JBQXFCd0QsRUFBUXhELG9CQUM3QkMsUUFBU3VELEVBQVF2RCxRQUNqQmhGLE9BQVF1SSxFQUFRdkksT0FDaEJpRixVQUFXc0QsRUFBUXRELFVBQ25CQyxTQUFVcUQsRUFBUXJELFNBQ2xCOUUsS0FBTW1JLEVBQVFuSSxLQUNkMEgsTUFBT0EsRUFDUGhwRixNQUFPQSxFQUNQcWtGLGtCQUFtQnFGLEVBQVVyRixrQkFDN0JLLFdBQVlnRixFQUFVaEYsV0FDdEJDLFlBQWErRSxFQUFVL0UsWUFDdkJMLEtBQU1vRixFQUFVcEYsS0FDaEJDLEtBQU1tRixFQUFVbkYsS0FDaEJDLEtBQU1rRixFQUFVbEYsS0FDaEJDLEtBQU1pRixFQUFVakYsS0FDaEJHLE9BQVE4RSxFQUFVOUUsT0FDbEJDLE9BQVE2RSxFQUFVN0UsT0FDbEJFLE9BQVEyRSxFQUFVM0UsT0FDbEJFLE9BQVF5RSxFQUFVekUsT0FDbEJFLFVBQVd1RSxFQUFVdkUsVUFDckJDLFVBQVdzRSxFQUFVdEUsVUFDckJDLFVBQVdxRSxFQUFVckUsVUFDckJDLFVBQVdvRSxFQUFVcEUsVUFDckJ6QixZQUFhQSxFQUNieEIsS0FBTSxHQUNOc0Usd0JBQXlCc1ksRUFBVXRZLHdCQUNuQ3BFLE9BQVEwYyxFQUFVMWMsT0FDbEIxbEMsSUFBS29pRCxFQUFVcGlELElBQ2ZxaUQsVUFBV0EsRUFDWC9hLE1BQU9BLEVBQ1AzL0YsS0FBTSxHQUNOa2hHLGtCQUFtQjJaLEVBQVUzWixrQkFDN0JDLFFBQVMwWixFQUFVMVosUUFDbkJuRCxRQUFTNmMsRUFBVTdjLFFBQ25CcUQsZUFBZ0J3WixFQUFVeFosZUFDMUJDLG1CQUFvQnVaLEVBQVV2WixtQkFDOUJqRCxPQUFRd2MsRUFBVXhjLE9BQ2xCVCxNQUFPaWQsRUFBVWpkLE1BQ2pCRSxPQUFRK2MsRUFBVS9jLE9BQ2xCTixNQUFPQSxHQy9VakIsU0FBU3lkLEdBQW9CdnlHLEdBQzNCLElBS0l3eUcsRUFBVyxTQUFVQyxFQUFNQyxHQUM3QixPQUFPLEVBQVMxeUcsRUFBRXV4RyxPQUFPLFNBQVduekcsR0FDdEIsT0FBT0EsSUFDTHEwRyxFQUFNQyxJQUV4QixNQUFPLENBQ0NDLFFBWE0sU0FBVUMsRUFBTUYsR0FDNUIsT0FBTyxFQUFTMXlHLEVBQUV1eEcsTUFBT3FCLEdBQU0sU0FBV3YwRyxHQUM1QixPQUFPQSxJQUNMcTBHLElBU1ZGLFNBQVVBLEVBQ1ZLLFNBQVVMLEdDOENwQixTQUFTLEdBQUtNLEVBQUlDLEVBQUluOEcsR0FDcEIsT0FBSUEsRUFBRTRGLElBQ0csRUFBU3MyRyxFQUFJbDhHLEVBQUUsSUFFZixFQUFTbThHLEVBQUluOEcsRUFBRSxJQXdCMUIsU0FBUyxHQUFLd0gsR0FDWixPQUFJQSxFQUFFNUIsSUFDVyxFQUFTLEVBQUcsQ0FBQzRCLEVBQUUsS0FFWixFQUFTLEVBQUcsQ0FBQ0EsRUFBRSxLQW9EckMsU0FBUyxHQUFNc3VGLEVBQUlsZSxHQUNqQixPQUFJa2UsRUFBR2x3RixJQUNEZ3lFLEVBQUdoeUUsSUFDYSxFQUFTLEVBQUcsQ0FBQ2d5RSxFQUFHLEtBRWhCLEVBQVMsRUFBRyxDQUFDa2UsRUFBRyxLQUUzQmxlLEVBQUdoeUUsSUFDTSxFQUFTLEVBQUcsQ0FBQ2d5RSxFQUFHLEtBRW5CLEVBQVMsRUFBRyxDQUFDLEVBQVNrZSxFQUFHLEdBQUlsZSxFQUFHLE1Bd0JuRCxTQUFTLEdBQUt0dEUsRUFBSUwsR0FDaEIsT0FBSUssRUFBRzFFLElBQ0UwRSxFQUVBLEVBQVNMLEVBQUdLLEVBQUcsSUFJMUIsU0FBUyxHQUFRTCxFQUFHSyxHQUNsQixPQUFPLEdBQUtBLEVBQUlMLEdBa0VsQixTQUFTLEdBQVdteUcsRUFBY2xZLEdBQ2hDLFlBQVlqL0YsSUFBUmkvRixFQUNhLEVBQVMsRUFBRyxDQUFDLEVBQTBCQSxLQUVwQyxFQUFTLEVBQUcsQ0FBQ2tZLElBZ0VuQyxJQUFJLEdBQVksQ0FDZHpCLE1BeE1GLFNBQWUwQixFQUFNQyxFQUFNanFHLEdBQ3pCLE9BQUlBLEVBQU96TSxJQUNTLEVBQVMsRUFBRyxDQUFDLEVBQVMwMkcsRUFBTWpxRyxFQUFPLE1BRXRDLEVBQVMsRUFBRyxDQUFDLEVBQVNncUcsRUFBTWhxRyxFQUFPLFFBdU1sRCxHQUFVLEdBQWdELElBdVIzQyxFQUFTLEVBQUcsTUFBQ3BOLElBWWxCLEdBQVE4MkcsUUFFUCxHQUFRSCxTQWR2QixJQWdCSSxHQUFXLEdBQVFLLFNDemxCdkIsU0FBUyxHQUFLejBHLEdBQ1osT0FBaUIsRUFBUyxFQUFHLENBQUNBLElBT2hDLFNBQVMsR0FBUW5HLEdBQ2YsT0FBa0IsRUFBUyxFQUFHLENBQUNBLElBeUJqQyxTQUFTLEdBQU1rN0csR0FDYixPQUFrQixFQUFTLEVBQUcsQ0FBQ0EsSUFHakMsU0FBUyxHQUFXQyxFQUFVLy9GLEdBQzVCLE9BQU8sSUFBNEIsU0FBVzg5RCxHQUNoQyxPQUFrQixFQUFTLEVBQUcsQ0FBQyxFQUFTaWlDLE9BQVV2M0csT0FDaEQsR0FBTXdYLEdBT3hCLFNBQVMsR0FBSXhTLEVBQUd3eUcsR0FDZCxPQUFnQixFQUFTLEVBQUcsQ0FDbEJ4eUcsRUFDQXd5RyxJQThCWixTQUFTLEdBQVFDLEVBQVFDLEdBQ3ZCLE9BQW9CLEVBQVMsRUFBRyxDQUN0QkQsRUFDQUMsSUFxQ1osU0FBU0MsR0FBZUMsRUFBU0MsR0FDL0IsT0FBWSxDQUNWLElBQUlDLEVBQU1ELEVBQ05QLEVBQVNNLEVBQ2IsT0FBa0IsRUFBVkUsRUFBSW4zRyxLQUNWLEtBQWUsRUFDWCxPQUFPLEVBQVMyMkcsRUFBZ0IsRUFBUyxFQUFHLENBQUNRLEVBQUksTUFDckQsS0FBZ0IsRUFDWixPQUFPLEVBQVNSLEVBQW1CLEVBQVMsRUFBRyxDQUFDUSxFQUFJLE1BQ3hELEtBQWtCLEVBQ2QsT0FBTyxFQUFTUixFQUFnQixFQUFTLEVBQUcsQ0FBQyxFQUFTUSxFQUFJLFFBQUk5M0csTUFDbEUsS0FBb0IsRUFDaEI2M0csRUFBTyxFQUFTQyxFQUFJLFFBQUk5M0csR0FDeEIsU0FDSixLQUFnQixFQUNaLE9BQU8sRUFBUzgzRyxFQUFJLEdBQUlSLEdBQzVCLEtBQWMsRUFDVixJQUFJUyxFQUFRRCxFQUFJLEdBQ2hCRCxFQUFPQyxFQUFJLEdBQ1hGLEVBQVcsU0FBU04sRUFBT1MsR0FDM0IsT0FBTyxTQUFVQyxHQUNmLE9BQUlBLEVBQVFyM0csSUFDSCxFQUFTMjJHLEVBQVFVLEdBRWpCLEVBQVNWLEVBQWdCLEVBQVMsRUFBRyxDQUFDLEVBQVNTLEVBQU9DLEVBQVEsUUFML0QsQ0FRUlYsRUFBT1MsR0FDVCxTQUNKLEtBQWdCLEVBQ1osT0FBT0UsR0FBb0IsU0FBU1gsR0FDMUIsT0FBTyxTQUFVWSxFQUFhQyxHQUM1QixPQUFPLEVBQVNiLEVBQVEsR0FBb0JZLEVBQWFDLEtBRjNDLENBSWRiLEdBQVVRLEVBQUksR0FBSUEsRUFBSSxJQUN0QyxLQUFrQixFQUNkLElBQUlNLEVBQVVOLEVBQUksR0FDbEJELEVBQU9DLEVBQUksR0FDWEYsRUFBVyxTQUFTTixFQUFPYyxHQUMzQixPQUFPLFNBQVVKLEdBQ2YsT0FBSUEsRUFBUXIzRyxJQUNILEVBQVMyMkcsRUFBUVUsR0FFakJMLElBQWUsU0FBV0ssR0FDbkIsT0FBSUEsRUFBUXIzRyxJQUNILEVBQVMyMkcsRUFBUVUsR0FFakIsRUFBU1YsRUFBZ0IsRUFBUyxFQUFHLENBQUNVLEVBQVEsUUFFckQsRUFBU0ksRUFBU0osRUFBUSxNQVhwQyxDQWNSVixFQUFPYyxHQUNULFdBTVYsU0FBU0gsR0FBbUJYLEVBQVFRLEVBQUtPLEdBQ3ZDLElBQUlDLEVBQU8sQ0FDVHZnRCxjQUFVLzNELEdBRVJ1NEcsRUFBTyxDQUNUeGdELGNBQVUvM0QsR0FXWixPQVRBMjNHLElBQWUsU0FBV2EsR0FDbEIsSUFBSUMsRUFBVUYsRUFBS3hnRCxTQUNuQixZQUFnQi8zRCxJQUFaeTRHLEVBQ0ssRUFBU25CLEVBQVFrQixFQUFTQyxRQUVqQ0gsRUFBS3ZnRCxTQUFXeWdELEtBR2hCVixHQUNISCxJQUFlLFNBQVdjLEdBQ25CLElBQUlELEVBQVVGLEVBQUt2Z0QsU0FDbkIsWUFBZ0IvM0QsSUFBWnc0RyxFQUNLLEVBQVNsQixFQUFRa0IsRUFBU0MsUUFFakNGLEVBQUt4Z0QsU0FBVzBnRCxLQUdoQkosR0FxakJsQixTQUFTLEdBQVFLLEVBQVFDLEdBQ3ZCLE9BQXFCLEVBQWJBLEVBQU9oNEcsS0FDYixLQUFlLEVBQ1gsT0F6VlIsU0FBcUJtcUcsRUFBTTROLEdBQ3pCLE9BQXFCLEVBQWJBLEVBQU8vM0csS0FDYixLQUFlLEVBQ1gsSUFBSW9xRyxFQUFPMk4sRUFBTyxHQUNsQixPQUFpQixFQUFTLEVBQUcsQ0FBQyxTQUFXcGpDLEdBQzNCLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU1DLEVBQU16MUIsTUFFeEUsS0FBZ0IsRUFDWixPQUFPb2pDLEVBQ1gsS0FBa0IsRUFDZCxJQUFJRSxFQUFVRixFQUFPLEdBQ3JCLE9BQW9CLEVBQVMsRUFBRyxDQUFDLFNBQVdwakMsR0FDOUIsSUFBSTBmLEVBQWMsRUFBUzRqQixPQUFTNTRHLEdBQ3BDLE9BQU8sU0FBV3MxRSxHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU05VixFQUFhMWYsT0FHbkYsS0FBb0IsRUFDaEIsSUFBSXVqQyxFQUFZSCxFQUFPLEdBQ3ZCLE9BQXNCLEVBQVMsRUFBRyxDQUFDLFNBQVdwakMsR0FDaEMsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCLFNBQVd5MUIsR0FDUCxPQUFPLFNBQVd6MUIsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNQyxFQUFNejFCLEtBRzlELEVBQVN1akMsT0FBVzc0RyxRQUdoRCxLQUFnQixFQUNaLElBQUk4NEcsRUFBYUosRUFBTyxHQUN4QixPQUFrQixFQUFTLEVBQUcsQ0FBQyxTQUFXcEIsR0FDNUIsT0FBTyxFQUFTd0IsR0FBWSxTQUFXZCxHQUN6QixHQUFJQSxFQUFRcjNHLElBQ1YsT0FBTyxFQUFTMjJHLEVBQVFVLEdBRTFCLElBQUlqTixFQUFPaU4sRUFBUSxHQUNuQixPQUFPLEVBQVNWLEVBQWdCLEVBQVMsRUFBRyxDQUFDLFNBQVdoaUMsR0FDdEMsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTUMsRUFBTXoxQixhQUl4RyxLQUFjLEVBQ1YsSUFBSXlqQyxFQUFXTCxFQUFPLEdBQ3RCLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixTQUFXTSxHQUNQLElBQUloa0IsRUFBYyxFQUFTK2pCLEVBQVVDLEdBQ3JDLE9BQU8sU0FBVzFqQyxHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU05VixFQUFhMWYsS0FHckVvakMsRUFBTyxLQUVyQixLQUFnQixFQUNaLE9BQWtCLEVBQVMsRUFBRyxDQUNYLEVBQVMsRUFBRyxDQUNqQixTQUFXSyxFQUFVQyxHQUNqQixJQUFJaGtCLEVBQWMsRUFBUytqQixFQUFVQyxHQUNyQyxPQUFPLFNBQVcxakMsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNOVYsRUFBYTFmLEtBR3JFb2pDLEVBQU8sS0FFWEEsRUFBTyxLQUVyQixLQUFrQixFQUNkLElBQUlPLEVBQWFQLEVBQU8sR0FDeEIsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVdNLEdBQ1AsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCLFNBQVdqTyxHQUNQLE9BQU8sU0FBV3oxQixHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU1DLEVBQU16MUIsS0FHOUQsRUFBUzJqQyxFQUFZRCxNQUduQ04sRUFBTyxNQTBRVlEsQ0FBWVAsRUFBTyxHQUFJRCxHQUNsQyxLQUFnQixFQUNaLE9BdEdZLEVBQVMsRUFBRyxDQXNHSkMsRUFBTyxLQUMvQixLQUFrQixFQUNkLE9BckdSLFNBQXdCUSxFQUFTVCxHQUMvQixPQUFxQixFQUFiQSxFQUFPLzNHLEtBQ2IsS0FBZSxFQUNYLElBQUlvcUcsRUFBTzJOLEVBQU8sR0FDbEIsT0FBb0IsRUFBUyxFQUFHLENBQUMsU0FBV3BqQyxHQUM5QixJQUFJMGYsRUFBYyxFQUFTbWtCLE9BQVNuNUcsR0FDcEMsT0FBTyxTQUFXczFFLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhL0ksRUFBYStWLEVBQU16MUIsT0FHbkYsS0FBZ0IsRUFDWixPQUFPb2pDLEVBQ1gsS0FBa0IsRUFDZCxJQUFJRSxFQUFVRixFQUFPLEdBQ3JCLE9BQW9CLEVBQVMsRUFBRyxDQUFDLFNBQVdwakMsR0FDOUIsSUFBSTBmLEVBQWMsRUFBUzRqQixPQUFTNTRHLEdBQ2hDazFGLEVBQWdCLEVBQVNpa0IsT0FBU241RyxHQUN0QyxPQUFPLFNBQVdzMUUsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWE3SSxFQUFlRixFQUFhMWYsT0FHNUYsS0FBb0IsRUFDaEIsSUFBSXVqQyxFQUFZSCxFQUFPLEdBQ3ZCLE9BQXNCLEVBQVMsRUFBRyxDQUFDLFNBQVdwakMsR0FDaEMsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCLFNBQVd5MUIsR0FDUCxJQUFJL1YsRUFBYyxFQUFTbWtCLE9BQVNuNUcsR0FDcEMsT0FBTyxTQUFXczFFLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhL0ksRUFBYStWLEVBQU16MUIsS0FHckUsRUFBU3VqQyxPQUFXNzRHLFFBR2hELEtBQWdCLEVBQ1osSUFBSTg0RyxFQUFhSixFQUFPLEdBQ3hCLE9BQWtCLEVBQVMsRUFBRyxDQUFDLFNBQVdwQixHQUM1QixPQUFPLEVBQVN3QixHQUFZLFNBQVdkLEdBQ3pCLEdBQUlBLEVBQVFyM0csSUFDVixPQUFPLEVBQVMyMkcsRUFBUVUsR0FFMUIsSUFBSWpOLEVBQU9pTixFQUFRLEdBQ2ZoakIsRUFBYyxFQUFTbWtCLE9BQVNuNUcsR0FDcEMsT0FBTyxFQUFTczNHLEVBQWdCLEVBQVMsRUFBRyxDQUFDLFNBQVdoaUMsR0FDdEMsT0FBTyxHQUFzQnlvQixhQUFhL0ksRUFBYStWLEVBQU16MUIsYUFJL0csS0FBYyxFQUNWLElBQUl5akMsRUFBV0wsRUFBTyxHQUN0QixPQUFnQixFQUFTLEVBQUcsQ0FDbEIsU0FBV00sR0FDUCxJQUFJaGtCLEVBQWMsRUFBUytqQixFQUFVQyxHQUNqQzlqQixFQUFnQixFQUFTaWtCLE9BQVNuNUcsR0FDdEMsT0FBTyxTQUFXczFFLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhN0ksRUFBZUYsRUFBYTFmLEtBRzlFb2pDLEVBQU8sS0FFckIsS0FBZ0IsRUFDWixPQUFrQixFQUFTLEVBQUcsQ0FDWCxFQUFTLEVBQUcsQ0FDakIsU0FBV0ssRUFBVUMsR0FDakIsSUFBSWhrQixFQUFjLEVBQVMrakIsRUFBVUMsR0FDakM5akIsRUFBZ0IsRUFBU2lrQixPQUFTbjVHLEdBQ3RDLE9BQU8sU0FBV3MxRSxHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYTdJLEVBQWVGLEVBQWExZixLQUc5RW9qQyxFQUFPLEtBRVhBLEVBQU8sS0FFckIsS0FBa0IsRUFDZCxJQUFJTyxFQUFhUCxFQUFPLEdBQ3hCLE9BQW9CLEVBQVMsRUFBRyxDQUN0QixTQUFXTSxHQUNQLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixTQUFXak8sR0FDUCxJQUFJL1YsRUFBYyxFQUFTbWtCLE9BQVNuNUcsR0FDcEMsT0FBTyxTQUFXczFFLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhL0ksRUFBYStWLEVBQU16MUIsS0FHckUsRUFBUzJqQyxFQUFZRCxNQUduQ04sRUFBTyxNQWFWVSxDQUFlVCxFQUFPLEdBQUlELEdBQ3JDLEtBQW9CLEVBQ2hCLE9BdGVSLFNBQTBCVyxFQUFXWCxHQUNuQyxPQUFxQixFQUFiQSxFQUFPLzNHLEtBQ2IsS0FBZSxFQUNYLElBQUlvcUcsRUFBTzJOLEVBQU8sR0FDbEIsT0FBc0IsRUFBUyxFQUFHLENBQUMsU0FBV3BqQyxHQUNoQyxPQUFnQixFQUFTLEVBQUcsQ0FDbEIsU0FBV3cxQixHQUNQLE9BQU8sU0FBV3gxQixHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU1DLEVBQU16MUIsS0FHOUQsRUFBUytqQyxPQUFXcjVHLFFBR2hELEtBQWdCLEVBQ1osT0FBTzA0RyxFQUNYLEtBQWtCLEVBQ2QsSUFBSUUsRUFBVUYsRUFBTyxHQUNyQixPQUFzQixFQUFTLEVBQUcsQ0FBQyxTQUFXcGpDLEdBQ2hDLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixTQUFXdzFCLEdBQ1AsSUFBSTlWLEVBQWMsRUFBUzRqQixPQUFTNTRHLEdBQ3BDLE9BQU8sU0FBV3MxRSxHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU05VixFQUFhMWYsS0FHckUsRUFBUytqQyxPQUFXcjVHLFFBR2hELEtBQW9CLEVBQ2hCLElBQUk2NEcsRUFBWUgsRUFBTyxHQUN2QixPQUFzQixFQUFTLEVBQUcsQ0FBQyxTQUFXcGpDLEdBQ2hDLE9BQW9CLEVBQVMsRUFBRyxDQUN0QixTQUFXdzFCLEdBQ1AsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCLFNBQVdDLEdBQ1AsT0FBTyxTQUFXejFCLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTUMsRUFBTXoxQixLQUc5RCxFQUFTdWpDLE9BQVc3NEcsTUFHbEMsRUFBU3E1RyxPQUFXcjVHLFFBR2hELEtBQWdCLEVBQ1osSUFBSTg0RyxFQUFhSixFQUFPLEdBQ3hCLE9BQWtCLEVBQVMsRUFBRyxDQUFDLFNBQVdwQixHQUM1QixPQUFPSyxJQUFlLFNBQVdLLEdBQ25CLEdBQUlBLEVBQVFyM0csSUFDVixPQUFPLEVBQVMyMkcsRUFBUVUsR0FFMUIsSUFBSWxOLEVBQU9rTixFQUFRLEdBQ25CLE9BQU8sRUFBU2MsR0FBWSxTQUFXZCxHQUN6QixHQUFJQSxFQUFRcjNHLElBQ1YsT0FBTyxFQUFTMjJHLEVBQVFVLEdBRTFCLElBQUlqTixFQUFPaU4sRUFBUSxHQUNuQixPQUFPLEVBQVNWLEVBQWdCLEVBQVMsRUFBRyxDQUFDLFNBQVdoaUMsR0FDdEMsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTUMsRUFBTXoxQixZQUdwRixFQUFTK2pDLE9BQVdyNUcsT0FFdEQsS0FBYyxFQUNWLElBQUlzNUcsRUFBT1osRUFBTyxHQUNkSyxFQUFXTCxFQUFPLEdBQ3RCLE9BQXNCLEVBQVMsRUFBRyxDQUFDLFNBQVdwakMsR0FDaEMsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVd3MUIsR0FDUCxPQUFnQixFQUFTLEVBQUcsQ0FDbEIsU0FBV2tPLEdBQ1AsSUFBSWhrQixFQUFjLEVBQVMrakIsRUFBVUMsR0FDckMsT0FBTyxTQUFXMWpDLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTTlWLEVBQWExZixLQUdyRWdrQyxLQUdkLEVBQVNELE9BQVdyNUcsUUFHaEQsS0FBZ0IsRUFDWixJQUFJdTVHLEVBQVNiLEVBQU8sR0FDaEJjLEVBQWFkLEVBQU8sR0FDeEIsT0FBc0IsRUFBUyxFQUFHLENBQUMsU0FBV3BqQyxHQUNoQyxPQUFvQixFQUFTLEVBQUcsQ0FDdEIsU0FBV3cxQixHQUNQLE9BQW9CLEVBQVMsRUFBRyxDQUN0QixTQUFXaU8sR0FDUCxPQUFnQixFQUFTLEVBQUcsQ0FDbEIsU0FBV0MsR0FDUCxJQUFJaGtCLEVBQWMsRUFBUytqQixFQUFVQyxHQUNyQyxPQUFPLFNBQVcxakMsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNOVYsRUFBYTFmLEtBR3JFaWtDLEtBR2RDLEtBR2QsRUFBU0gsT0FBV3I1RyxRQUdoRCxLQUFrQixFQUNkLElBQUl5NUcsRUFBU2YsRUFBTyxHQUNoQk8sRUFBYVAsRUFBTyxHQUN4QixPQUFzQixFQUFTLEVBQUcsQ0FBQyxTQUFXcGpDLEdBQ2hDLE9BQW9CLEVBQVMsRUFBRyxDQUN0QixTQUFXdzFCLEdBQ1AsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVdrTyxHQUNQLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixTQUFXak8sR0FDUCxPQUFPLFNBQVd6MUIsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNQyxFQUFNejFCLEtBRzlELEVBQVMyakMsRUFBWUQsTUFHbkNTLEtBR2QsRUFBU0osT0FBV3I1RyxTQXNXckMwNUcsQ0FBaUJmLEVBQU8sR0FBSUQsR0FDdkMsS0FBZ0IsRUFDWixPQTNQUixTQUFzQmlCLEVBQVlqQixHQUNoQyxPQUFxQixFQUFiQSxFQUFPLzNHLEtBQ2IsS0FBZSxFQUNYLElBQUlvcUcsRUFBTzJOLEVBQU8sR0FDbEIsT0FBa0IsRUFBUyxFQUFHLENBQUMsU0FBV3BCLEdBQzVCLE9BQU8sRUFBU3FDLEdBQVksU0FBVzNCLEdBQ3pCLEdBQUlBLEVBQVFyM0csSUFDVixPQUFPLEVBQVMyMkcsRUFBUVUsR0FFMUIsSUFBSWxOLEVBQU9rTixFQUFRLEdBQ25CLE9BQU8sRUFBU1YsRUFBZ0IsRUFBUyxFQUFHLENBQUMsU0FBV2hpQyxHQUN0QyxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNQyxFQUFNejFCLGFBSXhHLEtBQWdCLEVBQ1osT0FBT29qQyxFQUNYLEtBQWtCLEVBQ2QsSUFBSUUsRUFBVUYsRUFBTyxHQUNyQixPQUFrQixFQUFTLEVBQUcsQ0FBQyxTQUFXcEIsR0FDNUIsT0FBTyxFQUFTcUMsR0FBWSxTQUFXM0IsR0FDekIsR0FBSUEsRUFBUXIzRyxJQUNWLE9BQU8sRUFBUzIyRyxFQUFRVSxHQUUxQixJQUFJbE4sRUFBT2tOLEVBQVEsR0FDZmhqQixFQUFjLEVBQVM0akIsT0FBUzU0RyxHQUNwQyxPQUFPLEVBQVNzM0csRUFBZ0IsRUFBUyxFQUFHLENBQUMsU0FBV2hpQyxHQUN0QyxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNOVYsRUFBYTFmLGFBSS9HLEtBQW9CLEVBQ2hCLElBQUl1akMsRUFBWUgsRUFBTyxHQUN2QixPQUFrQixFQUFTLEVBQUcsQ0FBQyxTQUFXcEIsR0FDNUIsT0FBTyxFQUFTcUMsR0FBWSxTQUFXM0IsR0FDekIsR0FBSUEsRUFBUXIzRyxJQUNWLE9BQU8sRUFBUzIyRyxFQUFRVSxHQUUxQixJQUFJbE4sRUFBT2tOLEVBQVEsR0FDbkIsT0FBT0wsSUFBZSxTQUFXSyxHQUNuQixHQUFJQSxFQUFRcjNHLElBQ1YsT0FBTyxFQUFTMjJHLEVBQVFVLEdBRTFCLElBQUlqTixFQUFPaU4sRUFBUSxHQUNuQixPQUFPLEVBQVNWLEVBQWdCLEVBQVMsRUFBRyxDQUFDLFNBQVdoaUMsR0FDdEMsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTUMsRUFBTXoxQixTQUV0RSxFQUFTdWpDLE9BQVc3NEcsVUFHcEUsS0FBZ0IsRUFDWixJQUFJODRHLEVBQWFKLEVBQU8sR0FDeEIsT0FBa0IsRUFBUyxFQUFHLENBQUMsU0FBV3BCLEdBQzVCLE9BQU8sRUFBU3FDLEdBQVksU0FBVzNCLEdBQ3pCLEdBQUlBLEVBQVFyM0csSUFDVixPQUFPLEVBQVMyMkcsRUFBUVUsR0FFMUIsSUFBSWxOLEVBQU9rTixFQUFRLEdBQ25CLE9BQU8sRUFBU2MsR0FBWSxTQUFXZCxHQUN6QixHQUFJQSxFQUFRcjNHLElBQ1YsT0FBTyxFQUFTMjJHLEVBQVFVLEdBRTFCLElBQUlqTixFQUFPaU4sRUFBUSxHQUNuQixPQUFPLEVBQVNWLEVBQWdCLEVBQVMsRUFBRyxDQUFDLFNBQVdoaUMsR0FDdEMsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTUMsRUFBTXoxQixnQkFLdEgsS0FBYyxFQUNWLElBQUlna0MsRUFBT1osRUFBTyxHQUNkSyxFQUFXTCxFQUFPLEdBQ3RCLE9BQWtCLEVBQVMsRUFBRyxDQUFDLFNBQVdwQixHQUM1QixPQUFPLEVBQVNxQyxHQUFZLFNBQVczQixHQUN6QixHQUFJQSxFQUFRcjNHLElBQ1YsT0FBTyxFQUFTMjJHLEVBQVFVLEdBRTFCLElBQUlsTixFQUFPa04sRUFBUSxHQUNuQixPQUFPTCxHQUFlTCxFQUFpQixFQUFTLEVBQUcsQ0FDckMsU0FBVzBCLEdBQ1AsSUFBSWhrQixFQUFjLEVBQVMrakIsRUFBVUMsR0FDckMsT0FBTyxTQUFXMWpDLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhK00sRUFBTTlWLEVBQWExZixLQUdyRWdrQyxXQUk5QyxLQUFnQixFQUNaLElBQUlDLEVBQVNiLEVBQU8sR0FDaEJjLEVBQWFkLEVBQU8sR0FDeEIsT0FBa0IsRUFBUyxFQUFHLENBQUMsU0FBV3BCLEdBQzVCLE9BQU8sRUFBU3FDLEdBQVksU0FBVzNCLEdBQ3pCLEdBQUlBLEVBQVFyM0csSUFDVixPQUFPLEVBQVMyMkcsRUFBUVUsR0FFMUIsSUFBSWxOLEVBQU9rTixFQUFRLEdBQ25CLE9BQU9MLEdBQWVMLEVBQXFCLEVBQVMsRUFBRyxDQUN6QyxTQUFXeUIsR0FDUCxPQUFnQixFQUFTLEVBQUcsQ0FDbEIsU0FBV0MsR0FDUCxJQUFJaGtCLEVBQWMsRUFBUytqQixFQUFVQyxHQUNyQyxPQUFPLFNBQVcxakMsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNOVYsRUFBYTFmLEtBR3JFaWtDLEtBR2RDLFdBSTlDLEtBQWtCLEVBQ2QsSUFBSUMsRUFBU2YsRUFBTyxHQUNoQk8sRUFBYVAsRUFBTyxHQUN4QixPQUFrQixFQUFTLEVBQUcsQ0FBQyxTQUFXcEIsR0FDNUIsT0FBTyxFQUFTcUMsR0FBWSxTQUFXM0IsR0FDekIsR0FBSUEsRUFBUXIzRyxJQUNWLE9BQU8sRUFBUzIyRyxFQUFRVSxHQUUxQixJQUFJbE4sRUFBT2tOLEVBQVEsR0FDbkIsT0FBT0wsR0FBZUwsRUFBcUIsRUFBUyxFQUFHLENBQ3pDLFNBQVcwQixHQUNQLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixTQUFXak8sR0FDUCxPQUFPLFNBQVd6MUIsR0FDZCxPQUFPLEdBQXNCeW9CLGFBQWErTSxFQUFNQyxFQUFNejFCLEtBRzlELEVBQVMyakMsRUFBWUQsTUFHbkNTLFlBcUhuQ0csQ0FBYWpCLEVBQU8sR0FBSUQsR0FDbkMsS0FBYyxFQUNWLE9BOVFSLFNBQW9CbUIsRUFBVVAsRUFBTVosR0FDbEMsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVdNLEdBQ1AsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCLFNBQVdqTyxHQUNQLElBQUkvVixFQUFjLEVBQVM2a0IsRUFBVWIsR0FDckMsT0FBTyxTQUFXMWpDLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhL0ksRUFBYStWLEVBQU16MUIsS0FHckVvakMsS0FHZFksSUFpUUdRLENBQVduQixFQUFPLEdBQUlBLEVBQU8sR0FBSUQsR0FDNUMsS0FBZ0IsRUFDWixPQXZoQlIsU0FBc0JxQixFQUFZVCxFQUFNWixHQUN0QyxPQUFvQixFQUFTLEVBQUcsQ0FDdEIsU0FBV21CLEdBQ1AsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVdiLEdBQ1AsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCLFNBQVdqTyxHQUNQLElBQUkvVixFQUFjLEVBQVM2a0IsRUFBVWIsR0FDckMsT0FBTyxTQUFXMWpDLEdBQ2QsT0FBTyxHQUFzQnlvQixhQUFhL0ksRUFBYStWLEVBQU16MUIsS0FHckVvakMsS0FHZFksS0FHZFMsSUFxZ0JHQyxDQUFhckIsRUFBTyxHQUFJQSxFQUFPLEdBQUlELEdBQzlDLEtBQWtCLEVBQ2QsT0FuZ0JSLFNBQXdCdUIsRUFBWVgsRUFBTVosR0FDeEMsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVdNLEdBQ1AsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVdsTyxHQUNQLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixTQUFXQyxHQUNQLE9BQU8sU0FBV3oxQixHQUNkLE9BQU8sR0FBc0J5b0IsYUFBYStNLEVBQU1DLEVBQU16MUIsS0FHOURvakMsS0FHZCxFQUFTdUIsRUFBWWpCLE1BR25DTSxJQWtmR1ksQ0FBZXZCLEVBQU8sR0FBSUEsRUFBTyxHQUFJRCxJQVNwRCxTQUFTLEdBQVN5QixFQUFRckMsR0FDeEIsT0FBa0IsRUFBVkEsRUFBSW4zRyxLQUNWLEtBQWUsRUFDWCxPQUFpQixFQUFTLEVBQUcsQ0FBQ20zRyxFQUFJLEtBQ3RDLEtBQWdCLEVBQ1osT0FBa0IsRUFBUyxFQUFHLENBQUMsRUFBU3FDLEVBQVFyQyxFQUFJLE1BQ3hELEtBQWtCLEVBQ2QsT0FBb0IsRUFBUyxFQUFHLENBQUNBLEVBQUksS0FDekMsS0FBb0IsRUFDaEIsSUFBSXNDLEVBQVN0QyxFQUFJLEdBQ2pCLE9BQXNCLEVBQVMsRUFBRyxDQUFDLFNBQVd4aUMsR0FDaEMsT0FBTyxHQUFTNmtDLEVBQVEsRUFBU0MsT0FBUXA2RyxPQUUzRCxLQUFnQixFQUNaLElBQUlxNkcsRUFBVXZDLEVBQUksR0FDbEIsT0FBa0IsRUFBUyxFQUFHLENBQUMsU0FBV1IsR0FDNUIsT0FBTyxFQUFTK0MsR0FBUyxTQUFXN0IsR0FDdEIsT0FBTyxFQUFTbEIsRUFBUSxFQUFTLEdBQXdCNkMsRUFBUTNCLFVBR2pHLEtBQWMsRUFDVixPQUFnQixFQUFTLEVBQUcsQ0FDbEJWLEVBQUksR0FDSixHQUFTcUMsRUFBUXJDLEVBQUksTUFFbkMsS0FBZ0IsRUFDWixPQUFrQixFQUFTLEVBQUcsQ0FDcEIsR0FBU3FDLEVBQVFyQyxFQUFJLElBQ3JCLEdBQVNxQyxFQUFRckMsRUFBSSxNQUVuQyxLQUFrQixFQUNkLElBQUlMLEVBQVNLLEVBQUksR0FDakIsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVcvOEcsR0FDUCxPQUFPLEdBQVNvL0csRUFBUSxFQUFTMUMsRUFBUTE4RyxLQUU3QyxHQUFTby9HLEVBQVFyQyxFQUFJLE9BYXZDLFNBQVMsR0FBV3dDLEVBQVF4QyxHQUMxQixPQUFrQixFQUFWQSxFQUFJbjNHLEtBQ1YsS0FBZSxFQUNYLE9BQWlCLEVBQVMsRUFBRyxDQUFDbTNHLEVBQUksS0FDdEMsS0FBZ0IsRUFDWixPQUFPLEVBQVN3QyxFQUFReEMsRUFBSSxJQUNoQyxLQUFrQixFQUNkLE9BQW9CLEVBQVMsRUFBRyxDQUFDQSxFQUFJLEtBQ3pDLEtBQW9CLEVBQ2hCLElBQUlzQyxFQUFTdEMsRUFBSSxHQUNqQixPQUFzQixFQUFTLEVBQUcsQ0FBQyxTQUFXeGlDLEdBQ2hDLE9BQU8sR0FBV2dsQyxFQUFRLEVBQVNGLE9BQVFwNkcsT0FFN0QsS0FBZ0IsRUFDWixJQUFJcTZHLEVBQVV2QyxFQUFJLEdBQ2xCLE9BQWtCLEVBQVMsRUFBRyxDQUFDLFNBQVdSLEdBQzVCLE9BQU8sRUFBUytDLEdBQVMsU0FBVzkzRyxHQUN0QixPQUFJQSxFQUFFNUIsSUFDR2czRyxHQUFlTCxFQUFRLEVBQVNnRCxFQUFRLzNHLEVBQUUsS0FFMUMsRUFBUyswRyxFQUFnQixFQUFTLEVBQUcsQ0FBQy8wRyxFQUFFLFlBSWpGLEtBQWMsRUFDVixPQVNSLFNBQXVCKzNHLEVBQVF2QyxFQUFPdUIsR0FDcEMsT0FBbUIsRUFBWEEsRUFBSzM0RyxLQUNYLEtBQWUsRUFDWCxPQUFPLEdBQVcyNUcsRUFBa0IsRUFBUyxFQUFHLENBQUMsRUFBU3ZDLEVBQU91QixFQUFLLE9BQzFFLEtBQWdCLEVBQ1osT0FBTyxFQUFTZ0IsRUFBUWhCLEVBQUssSUFDakMsS0FBa0IsRUFDZCxJQUFJaUIsRUFBUWpCLEVBQUssR0FDakIsT0FBTyxHQUFXZ0IsRUFBcUIsRUFBUyxFQUFHLENBQUMsU0FBV2hsQyxHQUM3QyxPQUFPLEVBQVN5aUMsRUFBTyxFQUFTd0MsT0FBT3Y2RyxRQUU3RCxLQUFvQixFQUNoQixJQUFJdzZHLEVBQVVsQixFQUFLLEdBQ25CLE9BQU8sR0FBV2dCLEVBQXVCLEVBQVMsRUFBRyxDQUFDLFNBQVdobEMsR0FDL0MsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCeWlDLEVBQ0EsRUFBU3lDLE9BQVN4NkcsU0FHbEQsS0FBZ0IsRUFDWixJQUFJeTZHLEVBQVduQixFQUFLLEdBQ3BCLE9BQWtCLEVBQVMsRUFBRyxDQUFDLFNBQVdoQyxHQUM1QixPQUFPLEVBQVNtRCxHQUFVLFNBQVd6QixHQUN2QixPQUFJQSxFQUFHcjRHLElBQ0VnM0csR0FBZUwsRUFBUSxFQUFTZ0QsRUFBUXRCLEVBQUcsS0FFM0MsRUFBUzFCLEVBQWdCLEVBQVMsRUFBRyxDQUFDLEVBQVNTLEVBQU9pQixFQUFHLGFBSWxHLEtBQWMsRUFDVixJQUFJMEIsRUFBU3BCLEVBQUssR0FDbEIsT0FBTyxHQUFXZ0IsRUFBaUIsRUFBUyxFQUFHLENBQ2pDLFNBQVdobEMsR0FDUCxPQUFPLEdBQXNCeW9CLGFBQWEyYyxFQUFRM0MsRUFBT3ppQyxJQUU3RGdrQyxFQUFLLE1BRXZCLEtBQWdCLEVBQ1osT0FBTyxHQUFXZ0IsRUFBbUIsRUFBUyxFQUFHLENBQ25DLEdBQWtCLEVBQVMsRUFBRyxDQUFDdkMsSUFBU3VCLEVBQUssSUFDN0NBLEVBQUssTUFFdkIsS0FBa0IsRUFDZCxJQUFJcUIsRUFBV3JCLEVBQUssR0FDcEIsT0FBTyxHQUFXZ0IsRUFBcUIsRUFBUyxFQUFHLENBQ3JDLFNBQVdobEMsR0FDUCxPQUFPLEdBQXNCeW9CLGFBQWE0YyxHQUFVLFNBQVdybEMsR0FDakQsT0FBZ0IsRUFBUyxFQUFHLENBQ2xCeWlDLEVBQ0F6aUMsTUFFUkEsSUFFcEJna0MsRUFBSyxPQS9EWnNCLENBQWNOLEVBQVF4QyxFQUFJLEdBQUlBLEVBQUksSUFDN0MsS0FBZ0IsRUFDWixPQW1FUixTQUF5QndDLEVBQVFPLEVBQVN2QixHQUN4QyxPQUFtQixFQUFYQSxFQUFLMzRHLEtBQ1gsS0FBZSxFQUNYLElBQUlxNEcsRUFBS00sRUFBSyxHQUNkLE9BQU8sR0FBV2dCLEVBQWlCLEVBQVMsRUFBRyxDQUNqQyxTQUFXdkMsR0FDUCxPQUFPLEVBQVNBLEVBQU9pQixJQUUzQjZCLEtBRWxCLEtBQWdCLEVBQ1osT0FBTyxFQUFTUCxFQUFRaEIsRUFBSyxJQUNqQyxLQUFrQixFQUNkLElBQUlpQixFQUFRakIsRUFBSyxHQUNqQixPQUFPLEdBQVdnQixFQUFpQixFQUFTLEVBQUcsQ0FDakMsU0FBV3ZDLEdBQ1AsT0FBTyxFQUFTQSxFQUFPLEVBQVN3QyxPQUFPdjZHLEtBRTNDNjZHLEtBRWxCLEtBQW9CLEVBQ2hCLElBQUlMLEVBQVVsQixFQUFLLEdBQ25CLE9BQU8sR0FBV2dCLEVBQXVCLEVBQVMsRUFBRyxDQUFDLFNBQVdobEMsR0FDL0MsT0FBa0IsRUFBUyxFQUFHLENBQ3BCdWxDLEVBQ0EsRUFBU0wsT0FBU3g2RyxTQUdsRCxLQUFnQixFQUNaLElBQUl5NkcsRUFBV25CLEVBQUssR0FDcEIsT0FBa0IsRUFBUyxFQUFHLENBQUMsU0FBV2hDLEdBQzVCLE9BQU8sRUFBU21ELEdBQVUsU0FBV3IrRyxHQUN2QixPQUFJQSxFQUFFdUUsSUFDR2czRyxHQUFlTCxFQUFRLEVBQVNnRCxFQUFRbCtHLEVBQUUsS0FFMUN1N0csR0FBZUwsRUFBUSxHQUFXZ0QsRUFBbUIsRUFBUyxFQUFHLENBQ3RETyxFQUNVLEVBQVMsRUFBRyxDQUFDeitHLEVBQUUsZUFLN0UsS0FBYyxFQUNWLE9BQU8sR0FBV2srRyxFQUFtQixFQUFTLEVBQUcsQ0FDbkMsR0FBUU8sRUFBbUIsRUFBUyxFQUFHLENBQUN2QixFQUFLLE1BQzdDQSxFQUFLLE1BRXZCLEtBQWdCLEVBQ1osT0FBTyxHQUFXZ0IsRUFBbUIsRUFBUyxFQUFHLENBQ25DLEdBQVFPLEVBQVN2QixFQUFLLElBQ3RCQSxFQUFLLE1BRXZCLEtBQWtCLEVBQ2QsSUFBSXdCLEVBQU94QixFQUFLLEdBQ1pxQixFQUFXckIsRUFBSyxHQUNwQixPQUFPLEdBQVdnQixFQUFxQixFQUFTLEVBQUcsQ0FDckMsU0FBV3ZDLEdBQ1AsT0FBb0IsRUFBUyxFQUFHLENBQ3RCLFNBQVd0SyxHQUNQLE9BQWdCLEVBQVMsRUFBRyxDQUNsQixFQUFVc0ssR0FDVixFQUFTNEMsRUFBVWxOLE1BR2pDcU4sS0FHZEQsTUF0SVBFLENBQWdCVCxFQUFReEMsRUFBSSxHQUFJQSxFQUFJLElBQy9DLEtBQWtCLEVBQ2QsT0EwSVIsU0FBMkJ3QyxFQUFRbEMsRUFBU2tCLEdBQzFDLE9BQW1CLEVBQVhBLEVBQUszNEcsS0FDWCxLQUFlLEVBQ1gsT0FBTyxHQUFXMjVHLEVBQVEsRUFBU2xDLEVBQVNrQixFQUFLLEtBQ3JELEtBQWdCLEVBQ1osT0FBTyxFQUFTZ0IsRUFBUWhCLEVBQUssSUFDakMsS0FBa0IsRUFDZCxJQUFJaUIsRUFBUWpCLEVBQUssR0FDakIsT0FBTyxHQUFXZ0IsRUFBdUIsRUFBUyxFQUFHLENBQUMsU0FBV2hsQyxHQUMvQyxPQUFPLEVBQVM4aUMsRUFBUyxFQUFTbUMsT0FBT3Y2RyxRQUUvRCxLQUFvQixFQUNoQixJQUFJdzZHLEVBQVVsQixFQUFLLEdBQ25CLE9BQU8sR0FBV2dCLEVBQXVCLEVBQVMsRUFBRyxDQUFDLFNBQVdobEMsR0FDL0MsT0FBb0IsRUFBUyxFQUFHLENBQ3RCOGlDLEVBQ0EsRUFBU29DLE9BQVN4NkcsU0FHbEQsS0FBZ0IsRUFDWixJQUFJeTZHLEVBQVduQixFQUFLLEdBQ3BCLE9BQWtCLEVBQVMsRUFBRyxDQUFDLFNBQVdoQyxHQUM1QixPQUFPLEVBQVNtRCxHQUFVLFNBQVd6QixHQUN2QixPQUFJQSxFQUFHcjRHLElBQ0VnM0csR0FBZUwsRUFBUSxFQUFTZ0QsRUFBUXRCLEVBQUcsS0FFM0NyQixHQUFlTCxFQUFRLEdBQVdnRCxFQUFRLEVBQVNsQyxFQUFTWSxFQUFHLFlBSXhHLEtBQWMsRUFDVixJQUFJMEIsRUFBU3BCLEVBQUssR0FDbEIsT0FBTyxHQUFXZ0IsRUFBcUIsRUFBUyxFQUFHLENBQ3JDLFNBQVdobEMsR0FDUCxPQUFPLEdBQXNCeW9CLGFBQWEyYyxFQUFRdEMsRUFBUzlpQyxJQUUvRGdrQyxFQUFLLE1BRXZCLEtBQWdCLEVBQ1osSUFBSTBCLEVBQVcxQixFQUFLLEdBQ3BCLE9BQU8sR0FBV2dCLEVBQXFCLEVBQVMsRUFBRyxDQUNyQyxTQUFXN00sR0FDUCxPQUFvQixFQUFTLEVBQUcsQ0FDdEIsU0FBV2lOLEdBQ1AsT0FBTyxFQUFTdEMsRUFBUyxFQUFTc0MsRUFBUWpOLEtBRTlDdU4sS0FHZDFCLEVBQUssTUFFdkIsS0FBa0IsRUFDZCxJQUFJcUIsRUFBV3JCLEVBQUssR0FDcEIsT0FBTyxHQUFXZ0IsRUFBcUIsRUFBUyxFQUFHLENBQ3JDLFNBQVc3TSxHQUNQLE9BQW9CLEVBQVMsRUFBRyxDQUN0QjJLLEVBQ0EsRUFBU3VDLEVBQVVsTixNQUdqQzZMLEVBQUssT0F0TVoyQixDQUFrQlgsRUFBUXhDLEVBQUksR0FBSUEsRUFBSSxLQTRNckQsU0FBUyxHQUFZb0QsRUFBTXBELEdBQ3pCLE9BQU8sSUFBVyxTQUFXMTdHLEdBQ2YsT0FBaUIsRUFBUyxFQUFHLENBQUMsRUFBUzgrRyxFQUFNOStHLE9BQzNDMDdHLEdBVWxCLFNBQVMsR0FBTWhOLEVBQU1xUCxFQUFRM0MsR0FDM0IsT0FBTyxHQUFTMkMsRUFBaUIsRUFBUyxFQUFHLENBQy9CclAsRUFDQTBNLEtBMDBCaEIsSUFBSSxHQUFZLENBQ2Q5QixNQUFPLElBR0wsR0FBVSxHQUFnRCxJQUUxRHlGLEdBQWEsR0FBUW5FLFNBaUtKLEVBQVMsRUFBRyxNQUFDaDNHLElBRUwsRUFBUyxFQUFHLE1BQUNBLElBYzVCLEdBQVE4MkcsUUFFUCxHQUFRSCxTQ3BsRXZCLFNBQVMsR0FBT3JYLEVBQU1DLEdBQ3BCLE9BQU9ELEVBQU9DLEVBR2hCLElBQUksR0FBUSxDQUNWM0osT0FBUSxJQXlCVixTQUFTLEdBQVF0Z0IsR0FDZixPQUFRLEVBQU1BLEVBR2hCLElBWUksR0FBVyxDQUNib2dCLE1BQU8sR0FDUGtjLGFBQWMsR0FDZDFYLFVBekNjLENBQ2R0RSxPQUFRLElBeUNSNEUsT0F0Q1csQ0FDWDVFLE9BQVEsR0FDUmowQixNQUFPLEdBcUNQa3dDLFdBbENlLENBQ2ZqYyxPQUFRLElBa0NSa2Msa0JBL0JzQixDQUN0QmxjLE9BQVEsSUErQlJtYyxLQTVCUyxDQUNUbmMsT0FBUSxHQUNSajBCLE1BQU8sR0EyQlBxd0MsTUFwQlUsQ0FDVnBjLE9BQVEsR0FDUmowQixNQUFPLEVBQ1ArdkMsUUFBUyxJQWtCVE8sY0Fma0IsQ0FDbEJyYyxPQUFRLEdBQ1JqMEIsTUFBTyxFQUNQK3ZDLFFBQVMsS0FlWCxTQUFTLEdBQVNwUyxFQUFNQyxHQUN0QixPQUFPRCxFQUFPQyxFQUdoQixJQUFJLEdBQVUsQ0FDWjNKLE9BQVEsSUF5Qk4sR0FBaUIsQ0FDbkJGLE1BQU8sR0FDUGtjLGFBQWMsR0FDZDFYLFVBekJnQixDQUNoQnRFLE9BQVEsSUF5QlI0RSxPQXRCYSxDQUNiNUUsT0FBUSxHQUNSajBCLE1BQU8sR0FxQlBrd0MsV0FsQmlCLENBQ2pCamMsT0FBUSxJQWtCUmtjLGtCQWZ3QixDQUN4QmxjLE9BQVEsSUFlUm1jLEtBWlcsQ0FDWG5jLE9BQVEsR0FDUmowQixNQUFPLElBd0NULElBcUJJLEdBQUssQ0FDUGsxQixHQUhPLElBTUwsR0FBTSxDQUNSQSxHQVBPLEdBUVB4N0MsUUFBUyxJQWNYLFNBQVMsR0FBSWlrRCxFQUFNQyxHQUNqQixPQUFPRCxFQUFPQyxFQUdoQixTQUFTLEdBQVNELEVBQU1DLEdBQ3RCLE9BQU9ELEVBQU9DLEVBVWhCLFNBQVMsR0FBU0QsRUFBTUMsR0FDdEIsT0FBT0QsRUFBT0MsRUFnQ2hCLFNBQVMsR0FBT2pxQixHQUNkLE9BQU8sRUFHVCxTQUFTLEdBQU9ncUIsRUFBTUMsR0FDcEIsT0FBT0QsRUFBT0MsRUFHaEIsU0FBUyxHQUFPanFCLEVBQU9nVCxHQUNyQixPQUFPLEVBR1QsSUFBSSxHQUFpQixDQUNuQmhuRCxJQUFLLEdBQ0w4aEUsS0FBTSxFQUNOMUwsU0FBVSxHQUNWLzNCLElBQUssRUFDTGk0QixTQUFVLEdBQ1Z3YSxPQUFRLEdBQ1J0YSxPQUFRLEdBQ1I5dUUsT0FBUSxJQWlCTixHQUZVLEdBQXFCLElBTS9CLEdBRlksR0FBcUIsSUFJakMsR0FBWSxHQUFrQixJQUU5QixHQUFZLEdBQW1CLElBRS9CLEdBQVksR0FBOEIsSUFFdEIsR0FBVTR0RSxZQUVOLEdBQVVPLGdCQUVULEdBQVVDLGlCQUViLEdBQVVDLGNBRVQsR0FBVUMsZUFFVCxHQUFVRSxnQkFFVixHQUFVQyxnQkFFZCxHQUFVRSxlQUVMLEdBQVVFLGlCQUVSLEdBQVVFLG1CQzFSekMsU0FBUyxHQUFHeDFGLEVBQUdDLEdBQ2IsT0FBT0QsSUFBTUMsRUFHZixJQUFJLEdBQ0UsR0FHSWd1RCxPQUFPNHFELElBRWpCLFNBQVMsR0FBSTliLEVBQU1DLEdBQ2pCLE9BQU9ELEVBQU9DLEVBT2hCLFNBQVMsR0FBU0QsRUFBTUMsR0FDdEIsT0FBT0QsRUFBT0MsRUFtQmhCLElBRUksR0FBTSxDQUNSMUksR0FBSSxHQUNKeDdDLFFBSlksR0FBbUJBLFNBTzdCLEdBQVUsR0FBb0MsSUFFOUMsR0FBb0IsR0FBUWtwRCxrQkFXaEMsU0FBUzhXLEdBQVc5NEcsRUFBR0MsR0FDckIsT0FBT0QsRUFBSUMsRUFHYixJQUFJLEdBQU8sQ0FDVDgrQixJQUFLLEdBQ0w4aEUsS0FBTSxFQUNOMUwsU0FBVSxHQUNWLzNCLElBQUssRUFDTGk0QixTQUFVeWpCLElBR1IsR0FBWSxHQUFzQyxJQUVsRCxHQUFZLEVBQVMsR0FBbUIsSUFFbEMsR0FBVXpyRSxJQWdPUSxHQUFRbTBELHNCQUVkLEdBQVFWLGdCQUVaLEdBQVFXLFlBRVAsR0FBUUMsYUFFakIsR0FBUTdoRixJQUVSLEdBQVE1QixJQUVILEdBQVE4aUYsU0FFZCxHQUFROVgsR0FFRSxHQUFRK1gsYUFFakIsR0FBUVcsSUFFQSxHQUFRVixZQUVqQixHQUFRVyxHQUVLLEdBQVFWLGdCQUVwQixHQUFRVyxJQUVOLEdBQVFDLE1BRU4sR0FBUUMsUUFFUCxHQUFRRyxTQUVYLEdBQVFDLE1BRVQsR0FBVThOLEtBRVIsR0FBVUMsT0FFVixHQUFVak8sT0N0VXZCLElBQUksR0FBUSxHQWlCWixTQUFTLEdBQUl4b0csRUFBR2l2RixFQUFLcmlGLEdBQ25CLEdBQUlxaUYsRUFBTSxHQUFLcmlGLEVBQU0sR0FBS3FpRixHQUFPanZGLEVBQUVzQixPQUFTc0wsRUFBTSxHQUNoRCxLQUFNLENBQ0EsRUFDQSwwQkFHUixJQUFJN04sRUFBSSxHQUE2QjZOLEdBRXJDLE9BREEsR0FBMkI1TSxFQUFHaXZGLEVBQUtsd0YsRUFBRyxFQUFHNk4sR0FDbEM3TixFQW9LVCxTQUFTdWdILEdBQVNobUMsR0FDaEIsSUFBSWltQyxFQUFXam1DLEVBQVEsRUFBSSxFQUMzQixPQUFJaW1DLEVBQVcsR0FBS0EsRUFBVyxFQUNULEtBQWJBLEVBRWEsSUFBYkEsRUNsSFgsU0FBUyxHQUFTam1DLEdBQ2hCLElBQUlpbUMsRUFBV2ptQyxFQUFRLEVBQUksRUFDM0IsT0FBSWltQyxFQUFXLEdBQUtBLEVBQVcsRUFDVCxLQUFiQSxFQUVhLElBQWJBLEVBSVgsU0FBUyxHQUFLdi9HLEdBQ1osTUFBVSxLQUFOQSxJQUFjLEdBQVNBLEVBQUUwRixXQUFXLE1BQU8sR0FBUzFGLEVBQUUwRixXQUFXMUYsRUFBRXNCLE9BQVMsRUFBSSxJQUMzRXRCLEVBRUEsR0R5R1gsU0FBY0EsR0FHWixJQUZBLElBQUk0TSxFQUFNNU0sRUFBRXNCLE9BQ1JyRCxFQUFJLEVBQ0ZBLEVBQUkyTyxHQUFPMHlHLEdBQVN0L0csRUFBRS9CLEtBQzFCQSxFQUFJQSxFQUFJLEVBQUksRUFHZCxJQURBLElBQUlnWSxFQUFJckosRUFBTSxFQUFJLEVBQ1pxSixHQUFLaFksR0FBS3FoSCxHQUFTdC9HLEVBQUVpVyxLQUN6QkEsRUFBSUEsRUFBSSxFQUFJLEVBRWQsT0FBSUEsR0FBS2hZLEVBQ0EsR0FBSStCLEVBQUcvQixFQUFpQixHQUFiZ1ksRUFBSWhZLEVBQUksR0FBUyxHQUU1QixHQ3RIMkIsQ0FBVyxHQUEyQitCLEtDbEQ1RSxTQUFTLEdBQU91RyxFQUFHQyxHQUNqQixPQUFPRCxFQUFJQyxFQUdiLElBSUksR0FBVSxHQUpFLENBQ2RvekYsT0FBUSxLQUtOLEdBQVMsQ0FDWEEsT0FBUSxHQUNSajBCLE1BekRVLElBNERSLEdBQVksR0FBMEMsSUFpQzFELFNBQVMsR0FBTzFuRSxFQUFHME8sR0FHakIsSUFGQSxJQUFJaWpGLEVBQU8sR0FDUDMrRSxFQUFLaFQsSUFDRyxDQUdWLEdBRlVnVCxHQUVDLEVBQ1QsT0FGUTIrRSxFQUlWMytFLEVBTFVBLEVBS0MsRUFBSSxFQUNmMitFLEVBTFVBLEVBS0dqakYsR0FvRmpCLFNBQVMsR0FBR3BHLEVBQUdDLEdBQ2IsT0FBT0QsSUFBTUMsRUFHZixJQUFJLEdBQUssQ0FDUHEwRixHQUFJLElBR0YsR0FBWSxHQUFrQyxJQUk5QyxHQUFNLENBQ1JBLEdBQUksR0FDSng3QyxRQUpZLEdBQW9CQSxTQU85QixHQUFZLEdBQW9DLElBRXhDLEdBQW1CLElBRW5CLEdBQW1CLElBMkQvQixTQUFTbWdFLEdBQVNDLEVBQWNDLEVBQVloeUYsR0FDMUMsSUFBSWl5RixPQUF5QjM3RyxJQUFmMDdHLEVBQTJCQSxFQUFhLElBQ2xERSxFQUFjbHlGLEVBQU1wc0IsT0FDcEJ1K0csRUFBZ0JGLEVBQVFyK0csT0FDNUIsR0FBSXMrRyxHQUFlSCxFQUNqQixPQUFPL3hGLEVBRVQsR0FBc0IsSUFBbEJteUYsRUFDRixPQUFPbnlGLEVBRVQsSUFBSW95RixFQUFZTCxFQUFlRyxFQUFjLEVBRzdDLE9BRFUsR0FESyxHQUFlRSxFQUFXRCxHQUFpQixFQUFJLEVBQ25DRixHQUFTaHFHLE1BQU0sRUFBR21xRyxHQUNoQ3B5RixFQW1FRyxHQUFRZ2hGLFlBRUQsR0FBVXBDLG1CQUV2QixHQUFVSSxNQUVWLEdBQVVILE1BRUMsR0FBVWpHLGlCQUVyQixHQUFVRCxNQUVMLEdBQVVFLFdBRVYsR0FBVUMsV0FFaEIsR0FBVUMsS0FFTyxHQUFVc0Isc0JBRWhCLEdBQVVWLGdCQUVkLEdBQVVXLFlBRVQsR0FBVUMsYUFFbkIsR0FBVTdoRixJQUVWLEdBQVU1QixJQUVMLEdBQVU4aUYsU0FFaEIsR0FBVTlYLEdBRUEsR0FBVStYLGFBRW5CLEdBQVVXLElBRUYsR0FBVVYsWUFFbkIsR0FBVVcsR0FFRyxHQUFVVixnQkFFdEIsR0FBVVcsSUFFUixHQUFVQyxNQUVSLEdBQVVDLFFBRUEsR0FBVUMsa0JBRW5CLEdBQVVFLFNBRWIsR0FBVUMsTUMxVnRCLElBQUksR0FBVSxFQUFTLEdBQTRDLElBY25FLElBQUksR0FBWSxFQUFTLEdBQTZDLElBTXRFLElBQUksR0FBWSxFQUFTLEdBQWdELElBRXJFLEdBQWlCLEdBQVVvRixlQUUzQixHQUFjLEdBQVVuUCxZQVNOLEdBQVF3TyxTQUVULEdBQVF0bUcsUUFFWixHQUFVdWYsSUFFVixHQUFVNUIsSUFFYSxHQUFVb3BGLDJCQUU3QixHQUFVQyxRQVYvQixJQThCSSxHQUFZLEVBQVMsR0FBNEMsSUFrQnJFLElBQUksR0FBWSxFQUFTLEdBQTZDLElBTXRFLElBQUlrUyxHQUFNLEVBQVMsR0FBc0MsR0FBc0J2aEIsUUFFM0V3aEIsR0FBVSxFQUFTLEdBQXNDLEdBQTRCeGhCLFFBd0JyRixJQXRCZSxHQUFVMk8sU0FFWCxHQUFVdG1HLFFBRWQsR0FBVXVmLElBRVYsR0FBVTVCLElBZ0JSLEVBQVMsR0FBNEMsS0FrQnJFLElBQUksR0FBWSxFQUFTLEdBQTZDLElBTXRFLElBQUl5N0YsR0FBUSxFQUFTLEdBQXNDLEdBQXdCemhCLFFBRS9FMGhCLEdBQVksRUFBUyxHQUFzQyxHQUE4QjFoQixRQUV4RSxHQUFVMk8sU0FFWCxHQUFVdG1HLFFBRWQsR0FBVXVmLElBRVYsR0FBVTVCLElBZ0JWLEdBQWtDLElBd0VsRCxJQUVJLEdBQWMsR0FBNkIsSUFFM0MsR0FBWSxHQUEwQixHQUFZczZFLGFBRVAsR0FBVW45RSxJQUVKLEdBQVVrOUUsVUFFVCxHQUFVRyxXQUVaLEdBQVVQLFNBRU4sR0FBVUwsYUFFVCxHQUFVb0gsY0FFZixHQUFVNUIsU0FFVixHQUFVLzdCLFNBbUQ5RCxJQ3BYSSxHQUFVLEdBQXVDLElBRWpELEdBQVksR0FBK0IsSUFFM0MsR0FBWSxHQUFtQyxJQUUvQyxHQUFZLEdBQW1DLElBbUUvQyxJQWpFMEIsR0FBUTA1QixrQkFFUCxHQUFRekgsYUFFVixHQUFRQyxpQkFFWixHQUFReUgsT0FFYixHQUFRQyxRQUVELEdBQVFDLGVBRU4sR0FBVWxILGlCQUVYLEdBQVVrRyxnQkFFVCxHQUFVMUcsaUJBRWhCLEdBQVVrRCxXQUVULEdBQVVDLFlBRU4sR0FBVThELGdCQUVWLEdBQVVoSCxnQkFFWixHQUFVRSxjQUVSLEdBQVVDLGdCQUVaLEdBQVVDLGNBbUMxQixJQXdGTixHQUFXLEdBOEJYLEdBQVMsR0FVVCxHQUFPLEdBMENQLEdBQVksR0FFWixHQUFVLEdBVVYsR0FBUyxHQThCVCxHQUFPLEdBNEJQLEdBQVksR0FNWixHM0IzREosU0FBaUJwOEYsRUFBRzJyQixHQUNsQixPQUFPLEdBQWtCQSxFQUFJM3JCLEkyQjRFM0IsR0FBUyxHQy9RYixJQUFJLEdBQVUsRUFBUyxHQUE2QyxJQWNwRSxJQUFJLEdBQVksRUFBUyxHQUE4QyxJQU12RSxJQUFJLEdBQVksRUFBUyxHQUFpRCxJQUV0RSxHQUFpQixHQUFVNnZHLGVBRTNCLEdBQWMsR0FBVW5QLFlBU04sR0FBUXdPLFNBRVQsR0FBUXRtRyxRQUVaLEdBQVV1ZixJQUVWLEdBQVU1QixJQUVhLEdBQVVvcEYsMkJBRTdCLEdBQVVDLFFBVi9CLElBOEJJLEdBQVksRUFBUyxHQUE2QyxJQWtCdEUsSUFBSSxHQUFZLEVBQVMsR0FBOEMsSUFNdkUsSUFBSSxHQUFNLEVBQVMsR0FBdUMsR0FBc0JyUCxRQUU1RSxHQUFVLEVBQVMsR0FBdUMsR0FBNEJBLFFBd0J0RixJQXRCZSxHQUFVMk8sU0FFWCxHQUFVdG1HLFFBRWQsR0FBVXVmLElBRVYsR0FBVTVCLElBZ0JSLEVBQVMsR0FBNkMsS0FrQnRFLElBQUksR0FBWSxFQUFTLEdBQThDLElBTXZFLElBQUksR0FBUSxFQUFTLEdBQXVDLEdBQXdCZzZFLFFBRWhGLEdBQVksRUFBUyxHQUF1QyxHQUE4QkEsUUFFekUsR0FBVTJPLFNBRVgsR0FBVXRtRyxRQUVkLEdBQVV1ZixJQUVWLEdBQVU1QixJQWdCVixFQUFTLEdBQTRCLElBd0RyRCxJQUVJLEdBQWMsR0FBNkIsSUFFN0IsRUFBUyxHQUE0QixHQUFZczZFLGFBeUJuRSxJQzFUSSxHQUFVLEdBQXVDLElBRWpELEdBQVksR0FBK0IsSUFFM0MsR0FBWSxHQUFtQyxJQUUvQyxHQUFZLEdBQW1DLElBcVEvQyxJQW5RMEIsR0FBUXlDLGtCQUVQLEdBQVF6SCxhQUVWLEdBQVFDLGlCQUVaLEdBQVF5SCxPQUViLEdBQVFDLFFBRUQsR0FBUUMsZUFFTixHQUFVbEgsaUJBRVgsR0FBVWtHLGdCQUVULEdBQVUxRyxpQkFFaEIsR0FBVWtELFdBRVQsR0FBVUMsWUFFTixHQUFVOEQsZ0JBRVYsR0FBVWhILGdCQUVaLEdBQVVFLGNBRVIsR0FBVUMsZ0JBRVosR0FBVUMsY2hCTXBDLFNBQVlwOEYsRUFBRzJyQixHQUNiLE9BQU8sRUFBZUEsRUFBSTNyQixLaUJ4QjVCLElBQUksR0FBWSxHQUE0QixJQUV2QixHQUFVb2hELFFBWS9CLElBQUk4Z0UsR0FBYyxHQUE0QixJQUU1QkEsR0FBWTlnRSxRQVk5QixJQUFJK2dFLEdBQWMsR0FBNEIsSUFFMUJBLEdBQVkvZ0UsUUFvQmhDLElDckVJLEdBQVUsR0FBaUQsSUFFM0QsR0FBWSxHQUF1QyxJQUVuRCxHQUFZLEdBQStCLElBRTNDLEdBQVksR0FBbUMsSUFFL0MsR0FBWSxHQUFtQyxJQU1wQyxHQUFRNHZELEdBRUssR0FBUUMsZ0JBRUwsR0FBUUMsbUJBRVQsR0FBVTVOLGtCQUVULEdBQVV6SCxhQUVaLEdBQVVDLGlCQUVkLEdBQVV5SCxPQUVmLEdBQVVDLFFBRUgsR0FBVUMsZUFFUixHQUFVbEgsaUJBRVgsR0FBVWtHLGdCQUVULEdBQVUxRyxpQkFFaEIsR0FBVWtELFdBRVQsR0FBVUMsWUFFTixHQUFVOEQsZ0JBRVYsR0FBVWhILGdCQUVaLEdBQVVFLGNBRVIsR0FBVUMsZ0JBRVosR0FBVUMsY0FwQ3BDLElBbUVJLEdBQU0sR0FnRU4sR0FBVSxHQXdJVixHQUFZLEdBa0JaLEdBQVMsRyxRQy9TYixTQUFTZ21CLEdBQWlCQyxHQUV4QixPQURZQSxFQUFJL2lHLE1BRWQsSUFBSyxTQUNELE9BQXlCLEVBQVMsRUFBRyxDQUFDK2lHLElBQzFDLElBQUssYUFDRCxPQUF5QixFQUFTLEVBQUcsQ0FBQ0EsSUFDMUMsSUFBSyxlQUNELE9BQThCLEVBQVMsRUFBRyxDQUFDQSxJQUMvQyxJQUFLLGFBQ0QsT0FBNEIsRUFBUyxFQUFHLENBQUNBLElBQzdDLElBQUssU0FDRCxPQUF1QixFQUFTLEVBQUcsQ0FBQ0EsSUFDeEMsSUFBSyxTQUNELE9BQXlCLEVBQVMsRUFBRyxDQUFDQSxJQUMxQyxJQUFLLFNBQ0QsT0FBNkIsRUFBUyxFQUFHLENBQUNBLElBQzlDLElBQUssU0FDRCxPQUFrQyxFQUFTLEVBQUcsQ0FBQ0EsSUFDbkQsSUFBSyxVQUNELE9BQTBCLEVBQVMsRUFBRyxDQUFDQSxJQUMzQyxJQUFLLFlBQ0QsT0FBOEIsRUFBUyxFQUFHLENBQUNBLElBQy9DLElBQUssWUFDRCxPQUE0QixFQUFTLEdBQUksQ0FBQ0EsSUFDOUMsSUFBSyxRQUNELE9BQXlCLEVBQVMsR0FBSSxDQUFDQSxJQUMzQyxJQUFLLFFBQ0QsT0FBdUIsRUFBUyxHQUFJLENBQUNBLElBQ3pDLElBQUssWUFDRCxPQUFxQixFQUFTLEdBQUksQ0FBQ0EsSUFDdkMsUUFDRSxPQUErQixFQUFTLEdBQUksQ0FBQ0EsS0FJbkQsU0FBU0MsR0FBa0JELEdBQ3pCLE9BQThCLEVBQVMsR0FBSSxDQUFDQSxJQUc5QyxTQUFTRSxHQUFjRixHQU1yQixPQUxpQixTQUFXRyxFQUFpQkMsRUFBa0JKLEdBQ3JELFlBQXVCdDhHLElBQWhCczhHLEVBQUlLLFFBQ0xELEVBQWlCSixHQUNqQkcsRUFBZ0JILEdBRXpCTSxDQUFXUCxHQUFrQkUsR0FBbUJELEdDM0N6RCxTQUFTTyxHQUFRQyxFQUFhL29HLEdBQzVCLElBQUk4SCxPQUEyQjdiLElBQWhCODhHLEVBQTRCQSxFQUFjLFFBQ3pELE9BQU8sSUFBZ0IsU0FBV2xsRCxHQUNwQixXQUFXN2pELEVBQU0sQ0FDWGdwRyxlQUFlLEVBQ2ZsaEcsU0FBVUEsSUFDVCxTQUFXc1osRUFBTzZuRixHQUNqQixPQUFPLEVBQVNwbEQsRUFBUyxFQUFTLEdBQXdCLEdBQTZCLEdBQW1CLEdBQXlCb2xELEVBQWlCLE9BQVY3bkYsT0FBaUJuMUIsRUFBWSxFQUFpQm0xQixhQ1RoTixTQUFTOG5GLEdBQVU5bkYsRUFBTzRpQyxHQUN4QixPQUFPLEVBQVMsR0FBd0IsR0FBNkIsR0FBbUIsR0FBeUJBLEVBQW9CLE9BQVY1aUMsT0FBaUJuMUIsRUFBWSxFQUFpQm0xQixNQUczSyxTQUFTK25GLEdBQVNKLEVBQWEvb0csR0FDN0IsSUFBSThILE9BQTJCN2IsSUFBaEI4OEcsRUFBNEJBLEVBQWMsUUFDekQsT0FBTyxJQUFnQixTQUFXbGxELEdBQ3BCLFlBQVk3akQsRUFBTSxDQUNaOEgsU0FBVUEsSUFDVCxTQUFXc1osRUFBTzRpQyxHQUNqQixPQUFPLEVBQVNILEVBQVNxbEQsR0FBVTluRixFQUFPNGlDLFUsYUNNbEUsSUFBSSxHQUFjLDJEQU1sQixTQUFTb2xELEdBQWV0M0UsR0FDdEIsT0FBTyxJQUFzQixTQUFXdTNFLEdBQzFCLElBQUlDLEVBQVdELEVBQU96ckcsTUFBTSxHQUFHZ00sS0FBSSxTQUFXNGpDLEdBQ3RDLE9BQU8sRUFBUyxHQUF1QixHQUFtQyxNQUFYQSxPQUFtQnZoRCxFQUFZLEVBQWlCdWhELE9BRXZILEdBQXdCLElBQXBCODdELEVBQVMvL0csT0FDWCxPQUFrQixFQUFTLEVBQUcsQ0FBZ0IsSUFFaEQsSUFBSXVwRixFQUFPdzJCLEVBQVMsR0FDcEIsUUFBYXI5RyxJQUFUNm1GLEVBQ0YsT0FBa0IsRUFBUyxFQUFHLENBQWdCLElBRWhELElBQUlDLEVBQVF1MkIsRUFBUyxHQUNyQixRQUFjcjlHLElBQVY4bUYsRUFDRixPQUFrQixFQUFTLEVBQUcsQ0FBZ0IsSUFFaEQsSUFBSXozQyxFQUFNZ3VFLEVBQVMsR0FDbkIsUUFBWXI5RyxJQUFScXZDLEVBQ0YsT0FBa0IsRUFBUyxFQUFHLENBQWdCLElBRWhELElBQUlrQixFQUFPOHNFLEVBQVMsR0FDcEIsUUFBYXI5RyxJQUFUdXdDLEVBQ0YsT0FBa0IsRUFBUyxFQUFHLENBQWdCLElBRWhELElBQUkrc0UsRUFBU0QsRUFBUyxHQUN0QixZQUFlcjlHLElBQVhzOUcsRUFDYSxFQUFTLEVBQUcsQ0FBQyxFQUFZejJCLEVBQU1DLEVBQU96M0MsRUFBS2tCLEVBQU0rc0UsS0FFOUMsRUFBUyxFQUFHLENBQWdCLE1BRTlDLElBQXNCLFNBQVc1dkUsR0FDL0IsT0FBTyxHQUF3QyxHQW5DaEQ0bkMsRUFtQzZENW5DLEVBbEN2RSxFQUF3QixHQUFZNy9CLEtBQUt5bkUsTUFEbEQsSUFBbUJBLElBb0NHLEdBQXNDLEVBQUcsRUFBUyxJQUF1QixTQUFXQSxHQUM5RSxPQUFPLEdBQWdCLEVBQUdBLEtBQ3hCLEVBQVl6dkMsRUFBVSxZQVNwRCxTQUFTMDNFLEdBQVc1M0UsR0FDbEIsSUFBSXo1QixFQUFRLGlCQUErQnk1QixHQUN2Q0UsRUFBVzM1QixFQUFNLEdBQ2pCMGtGLEVBMUROLFNBQW9CL3FELEdBQ2xCLE9BQU8sRUFBUyxJQUF1QixTQUFXeXZDLEdBQ3BDLE9BQU8sR0FBZ0IsRUFBR0EsS0FDeEIsRUFBWXp2QyxFQUFVLFVBdUR4QjIzRSxDQUFXMzNFLEdBQ3JCNHJELEVBQVUwckIsR0FBZXQzRSxHQUN6QityRCxFQVhOLFNBQW1CL3JELEdBQ2pCLE9BQU8sR0FBa0IsR0FBdUIsSUFBcUIsU0FBVzJGLEdBQzVELE9BQU9BLEVBQU1sdUMsT0FBUyxJQURNLENBRTFCLEVBQVl1b0MsRUFBVSxVQVE5QjQzRSxDQUFVNTNFLEdBQ3hCLFlBQWdCN2xDLElBQVo0d0YsRUFDRWEsRUFBUTl3RixJQUVVLEVBQVMsT0FEYlgsSUFBWjR4RixFQUM0QixDQUFxQixDQUFDSCxFQUFRLEtBRTlCLENBQWtCLFNBRTdCenhGLElBQVo0eEYsRUFDTSxFQUFTLEVBQUcsQ0FBQyxDQUNoQmxrRSxNQUFPa2pFLEVBQ1BsakQsS0FBTStqRCxFQUFRLEdBQ2R2eEYsS0FBTTB4RixFQUNOLzRFLEtBQU0zTSxFQUFNLE1BR04sRUFBUyxFQUFHLENBQWtCLElBRXpDdWxGLEVBQVE5d0YsVUFBbUJYLElBQVo0eEYsRUFDTixFQUFTLEVBQUcsQ0FBa0IsSUFFOUIsRUFBUyxFQUFHLENBQW1CLElBSXJELFNBQVM4ckIsR0FBNkJDLEdBQ3BDLE9BQU8sSUFBa0IsU0FBV0MsR0FDdEIsT0FBT0EsRUFBUXpoRyxRQUFPLFNBQVdtYixHQUNmLFFBQUlBLEVBQU05OEIsS0FBS3lSLGNBQWM0eEcsU0FBUyxTQUM1QnZtRixFQUFNd21GLGlCQUlkbmdHLEtBQUksU0FBVzIzRCxHQUNuQixJQUFJOTZFLEVBQU84NkUsRUFBTTk2RSxLQUNidVosRUFBTyxPQUFVNHBHLEVBQVduakgsR0FDaEMsT0FBTyxJQUFrQixTQUFXcWUsR0FDdEIsT2ZoRHJDLEdBQW1CLEdBQVMsR2VnRHFDLEVBQVMsSUFBd0IsU0FBV3NjLEdBQ3RELE9BQXVCLEVBQVMsRUFBRyxDQUNmMzZCLEVBQ0MyNkIsTUFFbkJvb0YsR0FBVzFrRyxPQUM3QixFQUFTLElBQW9CLFNBQVdzYyxHQUN0QyxPQUEyQixFQUFTLEVBQUcsQ0FDbkIzNkIsRUFDQzI2QixNQUVuQixJQUFrQixTQUFXbWdELEdBQzNCLE9BQU8sUUFBMEJ0MUUsRUFBVytULEtBQzdCLEVBQVMsRUFBRyxDQUFDLFNBQVd1aEUsR0FDbkN2a0MsUUFBUWd0RSxJQUFJLHVCQUEyQnJoSCxPQUFPcVgsR0FBUSxjQUc5RTR6QixRQUFPLFNBQVdxMkUsRUFBYTMzRyxHQUNuQyxPQUFPLElBQWtCLFNBQVd1M0csR0FDdEIsT0FBTyxJQUFjLFNBQVd0bUYsR0FDbEIsTUFBZSxDQUNQQSxFQUNBc21GLEtBRU52M0csS0FDZDIzRyxLQUNKLEVBQVMsRUFBRyxDQUFTLE9BQzdDLEVBQVMsSUFBb0IsU0FBVzdvRixHQUN0QyxPQUErQixFQUFTLEVBQUcsQ0FBQ0EsTUFDMUMsSUFBa0IsU0FBV21nRCxHQUMzQixPQUFPLFFBQXdCdDFFLEVBQVcyOUcsS0FDM0IsRUFBUyxFQUFHLENBQUMsU0FBV3JvQyxHQUNuQ3ZrQyxRQUFRZ3RFLElBQUksbUNBQXVDcmhILE9BQU9paEgsR0FBYSxXQWNuRyxTQUFTTSxHQUF5QmxxRyxHQUNoQyxPQUFPLElBQWtCLFNBQVdtcUcsR0FDdEIsT0FBTyxJQUFnQixTQUFXaGpHLEdBQ3BCLElBQUlvb0IsRUFBU3BvQixFQUFPemQsU0FBUyxVQUM3QixNQUFPLENBQ0NrdkUsSUFBSyxRQUFXandFLE9BQU93aEgsR0FBYSxXQUFjeGhILE9BQU80bUMsR0FDekQ0NkUsU0FBVUEsTUFFaEIsU0FBVy9vRixHQUNiLE1BQXNCLENBQUNBLEtEbEpyRCxTQUFvQnBoQixHQUNsQixPQUFPLElBQWdCLFNBQVc2akQsR0FDcEIsWUFBWTdqRCxFQUFNLENBQ1o4SCxTQUFVLE9BQ1QsU0FBV3NaLEVBQU80aUMsR0FDakIsT0FBTyxFQUFTSCxFQUFTcWxELEdBQVU5bkYsRUFBTzRpQyxVQzhJbEMsQ0FBNEJoa0QsTUFDMUMsSUFBa0IsU0FBV3VoRSxHQUMzQixPQUFPLElBQXFCLFNBQVdBLEdBQ3pCLE9BQTZCLElBQzNCLEVBQXNCLFdBQWN2aEUsT0FDckMsRUFBUyxFQUFHLENBQUMsU0FBV3VoRSxHQUNuQ3ZrQyxRQUFRZ3RFLElBQUkseUJBQTZCcmhILE9BQU9xWCxHQUFRLFVBZ0JoRixTQUFTb3FHLEdBQWdCQyxFQUFXQyxFQUFrQkMsRUFBYUMsR0FDakUsT0FBTyxJQUFrQixTQUFXem5HLEdBQ3RCLE9BQU8sSUFBZ0IsU0FBV3crRCxHQUNwQixPQUFPeCtELEtBQ0wsU0FBV3FlLEdBQ2IsT0FBa0MsRUFBUyxFQUFHLENBQUNBLE9BaEJyQ3BoQixFQWlCdUJ3cUcsRUFoQnRELElBQWMsU0FBV2pmLE1BRWhCLElBQWtCLFNBQVdocUIsR0FDM0IsT0FBTyxRQUF3QnQxRSxFQUFXK1QsS0FDM0IsRUFBUyxFQUFHLENBQUMsU0FBV3VoRSxHQUNuQ3ZrQyxRQUFRZ3RFLElBQUksNENBQWdEcmhILE9BQU9xWCxHQUFRLFlBTm5HLElBQXdDQSxJQWtCdEIsSUFBa0IsU0FBV3VoRSxHQUMzQixJQUFJc29DLEVBQVV0b0MsRUFBTSxHQUNoQmtwQyxFQUFRbHBDLEVBQU0sR0FDbEIsT0FBTyxJQUFnQixTQUFXbXBDLEdBQ3BCLE1BQU8sQ0FDQ0QsTUFBT0EsRUFDUFosUUFBU0EsRUFDVGEsUUFBU0EsTUFFZixTQUFXdHBGLEdBQ2IsT0FBeUIsRUFBUyxFQUFHLENBQUNBLE1BQ3BDOG9GLEdBQXlCSyxNQUN2QyxJQUFrQixTQUFXVixHQUMzQixPQUFPLElBQWdCLFNBQVdZLEdBQ3BCLE1BQWtCLENBQ1ZBLEVBQ0FaLE1BRU4sU0FBV3pvRixHQUNiLE9BQTJCLEVBQVMsRUFBRyxDQUFDQSxPQW5FL0NwaEIsRUFvRStCcXFHLEVBbkVyRCxJQUFrQixTQUFXOW9DLEdBQ3RCLE9BQU8sUUFBMEJ0MUUsRUFBVytULEtBQzdCLEVBQVMsRUFBRyxDQUFDLFNBQVd1aEUsR0FDbkN2a0MsUUFBUWd0RSxJQUFJLDRCQUFnQ3JoSCxPQUFPcVgsR0FBUSxXQUovRSxJQUErQkEsSUFxRUwsRUFBUyxJQUFvQixTQUFXb2hCLEdBQ3RDLE9BQWtDLEVBQVMsRUFBRyxDQUFDQSxNQUM3Q3VvRixHQUE2QlcsT0MvTDNELElBQUlLLEdBQWEsQ0FDZkMsY0E3QkYsU0FBdUJ0bkUsRUFBUXVuRSxHQUM3QkEsRUFBU0MsV0FBYXhuRSxHQTZCdEJ5bkUsZUF6QkYsU0FBd0I1akgsR0FDdEIsT0FBTyxTQUFXbzZFLEdBQ2RBLEVBQU15cEMsVUFBVSxlQUFnQjdqSCxLQXdCcEM4akgsaUJBbkJGLFNBQTBCMWhILEdBQ3hCLElBQUkwM0YsRUFBY3Q0RixPQUFPWSxHQUN6QixPQUFPLFNBQVdnNEUsR0FDZEEsRUFBTXlwQyxVQUFVLGlCQUFrQi9wQixLQWlCdENpcUIsZ0JBWkYsU0FBeUJ2eEUsR0FDdkIsSUFBSXNuRCxFQUFjdG5ELEVBQUt3eEUsY0FDdkIsT0FBTyxTQUFXNXBDLEdBQ2RBLEVBQU15cEMsVUFBVSxnQkFBaUIvcEIsTSxrQkNWdkMsSUFBSW1xQixHQUFZLENBQ2RDLFNBQXVCLFVBQ3ZCQyxVQUF5QixVQUN6Qnh3RixNQUFrQixVQUNsQnB4QixTQWhCRixTQUFrQjYzRSxHQUNoQixPQUFlLFlBQVhBLEVBQ0VBLEdBQVMsVUFDSixRQUVBLFVBR0YsWUFrRFgsSUFBSWdxQyxHQUFhLENBQ2ZDLElBWkYsU0FBYXY3RyxHQUNYLE1BQXFCLEVBQ1osVUFDREEsSUFVUnZHLFNBTkYsU0FBb0I2M0UsR0FDbEIsT0FBT0EsRUFBTSxHQUFHNzNFLFdBQWEsTUF5SC9CLFNBQVMraEgsR0FBV2xxQyxHQUNsQixHQUFxQixpQkFBVkEsRUFDVCxNQUFPLElBRVQsSUFBSW1xQyxFQUFVbnFDLEVBQU0sR0FDcEIsR0FBSW1xQyxHQUFXLE1BQ2IsT0FBSUEsR0FBVyxNQUNHLFFBQVpBLEVBQ0VBLEdBQVcsTUFDVEEsR0FBVyxRQUNObnFDLEVBQU0sR0FBRzczRSxXQUFhLE1BRXRCNjNFLEVBQU0sR0FBRzczRSxXQUFhLEtBRXRCZ2lILEdBQVcsTUFDYm5xQyxFQUFNLEdBQUc3M0UsV0FBYSxLQUV0QjYzRSxFQUFNLEdBQUc3M0UsV0FBYSxLQUd4QjYzRSxFQUFNLEdBQUc3M0UsV0FBYSxLQUV0QmdpSCxHQUFXLE1BQ2hCQSxHQUFXLE1BQ05ucUMsRUFBTSxHQUFHNzNFLFdBQWEsS0FFdEI2M0UsRUFBTSxHQUFHNzNFLFdBQWEsS0FFdEJnaUgsR0FBVyxNQUNibnFDLEVBQU0sR0FBRzczRSxXQUFhLEtBRXRCNjNFLEVBQU0sR0FBRzczRSxXQUFhLEtBR2pDLEdBQUlnaUgsSUFBWSxVQUNkLE9BQUlBLEdBQVcsTUFDVEEsR0FBVyxNQUNObnFDLEVBQU0sR0FBRzczRSxXQUFhLEtBRXRCNjNFLEVBQU0sR0FBRzczRSxXQUFhLEtBRXRCZ2lILElBQVksVUFDZG5xQyxFQUFNLEdBQUc3M0UsV0FBYSxJQUV0QjYzRSxFQUFNLEdBQUc3M0UsV0FBYSxPQUdqQyxHQUFJZ2lILElBQVksVUFDZCxPQUFJQSxJQUFZLFVBQ1BucUMsRUFBTSxHQUFHNzNFLFdBQWEsT0FFdEI2M0UsRUFBTSxHQUFHNzNFLFdBQWEsS0FHakMsR0FBSWdpSCxJQUFZLFdBQ2QsT0FBT25xQyxFQUFNLEdBQUc3M0UsV0FBYSxLQUUvQixJQUFJeU8sRUFBUW9wRSxFQUFNLEdBQ2xCLE9BQUlwcEUsRUFBTSxJQUFNLFFBQ1AsUUFBV3N6RyxHQUFXdHpHLEVBQU0sSUFBTyxNQUFTc3pHLEdBQVd0ekcsRUFBTSxJQUFNLElBRW5FLFFBQVdzekcsR0FBV3R6RyxFQUFNLElBQU8sTUFBU3N6RyxHQUFXdHpHLEVBQU0sSUFBTSxJQUk5RSxJQUFJd3pHLEdBQVMsQ0FDWDkzRSxHQTNLRixTQUFZNWpDLEdBQ1YsTUFBZ0IsQ0FDUixNQUNBQSxJQXlLUjI3RyxHQXJLRixTQUFZMzdHLEdBQ1YsTUFBZ0IsQ0FDUixNQUNBQSxJQW1LUmdxRSxHQS9KRixTQUFZaHFFLEdBQ1YsTUFBZ0IsQ0FDUixNQUNBQSxJQTZKUjQ3RyxJQXpKRixTQUFhNTdHLEdBQ1gsTUFBaUIsQ0FDVCxRQUNBQSxJQXVKUjY3RyxHQW5KRixTQUFZNzdHLEdBQ1YsTUFBZ0IsQ0FDUixNQUNBQSxJQWlKUjg3RyxHQTdJRixTQUFZOTdHLEdBQ1YsTUFBZ0IsQ0FDUixNQUNBQSxJQTJJUis3RyxLQXZJRixTQUFjLzdHLEdBQ1osTUFBa0IsRUFDVCxVQUNEQSxJQXFJUmc4RyxLQWpJRixTQUFjaDhHLEdBQ1osTUFBa0IsRUFDVCxVQUNEQSxJQStIUmk4RyxHQTNIRixTQUFZajhHLEdBQ1YsTUFBZ0IsQ0FDUixNQUNBQSxJQXlIUms4RyxRQXJIRixTQUFpQmw4RyxHQUNmLE1BQXFCLEVBQ1osV0FDREEsSUFtSFJtOEcsR0EvR0YsU0FBWW44RyxHQUNWLE1BQWdCLENBQ1IsTUFDQUEsSUE2R1JvOEcsR0F6R0YsU0FBWXA4RyxHQUNWLE1BQWdCLENBQ1IsTUFDQUEsSUF1R1JxOEcsS0FuR0YsU0FBY3I4RyxHQUNaLE1BQWtCLEVBQ1QsVUFDREEsSUFpR1JzOEcsR0E3RkYsU0FBWXQ4RyxHQUNWLE1BQWdCLENBQ1IsTUFDQUEsSUEyRlJ1OEcsR0F2RkYsU0FBWXY4RyxHQUNWLE1BQWdCLENBQ1IsTUFDQUEsSUFxRlJvL0YsTUFBaUIsVUFDakIzbEcsU0FBVStoSCxJQStCWixTQUFTZ0IsR0FBV2xyQyxHQUNsQixJQUFJbXFDLEVBQVVucUMsRUFBTSxHQUNwQixPQUFJbXFDLEdBQVcsUUFDVEEsR0FBVyxRQUNObnFDLEVBQU0sR0FBRzczRSxXQUFhLE1BRXRCNjNFLEVBQU0sR0FBRzczRSxXQUFhLE1BRXRCZ2lILElBQVksVUFDZG5xQyxFQUFNLEdBQUc3M0UsV0FBYSxPQUV0QjYzRSxFQUFNLEdBQUc3M0UsV0FBYSxPQUlqQyxJQUFJZ2pILEdBQVEsQ0FDVkMsSUE1Q0YsU0FBYTE4RyxHQUNYLE1BQWlCLENBQ1QsUUFDQUEsSUEwQ1IyOEcsSUF0Q0YsU0FBYTM4RyxHQUNYLE1BQWlCLENBQ1QsUUFDQUEsSUFvQ1I0OEcsS0FoQ0YsU0FBYzU4RyxHQUNaLE1BQWtCLEVBQ1QsVUFDREEsSUE4QlI2OEcsS0ExQkYsU0FBYzc4RyxHQUNaLE1BQWtCLEVBQ1QsVUFDREEsSUF3QlJ2RyxTQUFVK2lILElBV1osSUFBSU0sR0FBWSxDQUNkQyxJQUFjLFFBQ2RDLElBQWMsUUFDZHZqSCxTQVhGLFNBQW9CNjNFLEdBQ2xCLE9BQUlBLEdBQVMsUUFDSixNQUVBLFFBNEJYLElBQUkxVyxHQUFXLENBQ2JxaUQsVUFBeUIsV0FDekJwc0csU0FBd0IsVUFDeEJxc0csU0FBc0IsVUFDdEJDLE1BQWtCLFNBQ2xCQyxPQUFvQixVQUNwQjNqSCxTQXhCRixTQUFvQjYzRSxHQUNsQixPQUFjLFdBQVZBLEVBQ0VBLEdBQVMsVUFDUEEsR0FBUyxVQUNKLFdBRUEsU0FFQUEsR0FBUyxVQUNYLFNBRUEsV0FHRixVQWlDWCxJQUFJK3JDLEdBQVMsQ0FDWEMsTUFBaUIsVUFDakJDLE1BQWlCLFdBQ2pCQyxXQUE0QixVQUM1QkMsVUFBeUIsVUFDekJ0N0csTUFBa0IsVUFDbEJ3a0UsT0FBb0IsVUFDcEJsdEUsU0EzQkYsU0FBb0I2M0UsR0FDbEIsT0FBSUEsSUFBVSxVQUNSQSxHQUFTLFVBQ1BBLEdBQVMsVUFDSixRQUVBLFNBRUFBLEdBQVMsVUFDWCxhQUVBLFdBRUFBLElBQVUsVUFDWixPQUVBLFNBc0JYLElBQUlvc0MsR0FBYyxDQUNoQnp1RyxPQUFvQixVQUNwQjB1RyxXQUEyQixVQUMzQmxrSCxTQVhGLFNBQW9CNjNFLEdBQ2xCLE9BQUlBLEdBQVMsVUFDSixTQUVBLGNBc0JYLElBQUlzc0MsR0FBWSxDQUNkM3VHLE9BQW9CLFVBQ3BCNHVHLE9BQW9CLFVBQ3BCQyxRQUFzQixVQUN0QnJrSCxTQWhCRixTQUFxQjYzRSxHQUNuQixPQUFjLFlBQVZBLEVBQ0VBLEdBQVMsVUFDSixTQUVBLFNBR0YsWUFrRVgsSUFBSXlzQyxHQUFTLENBQ1hDLE1BQWlCLFdBQ2pCdmtILFNBTkYsU0FBcUI2M0UsR0FDbkIsTUFBTyxTQStRVCxJQUFJMnNDLEdBQWEsQ0FDZkMsTUFBaUIsVUFDakJDLFlBQTZCLFNBQzdCQyxPQUFtQixVQUNuQkMsUUFBcUIsU0FDckJDLFVBQXlCLFVBQ3pCQyxNQUFpQixXQUNqQkMsV0FBMkIsU0FDM0JDLFFBQXNCLFVBQ3RCQyxRQUFxQixVQUNyQmpsSCxTQWxERixTQUFxQnVHLEdBQ25CLE1BQWlCLGlCQUFOQSxFQUNMQSxJQUFNLFNBQ0pBLElBQU0sU0FDSkEsR0FBSyxVQUNIQSxHQUFLLFVBQ0EsTUFFQSxNQUVBQSxHQUFLLFVBQ1AsVUFFQSxNQUVBQSxJQUFNLFNBQ1IsTUFFQSxPQUVPLFlBQVBBLEVBQ0xBLElBQU0sVUFDSkEsSUFBTSxVQUNELE1BRUEsU0FFQUEsSUFBTSxVQUNSLE1BRUEsTUFHRixNQUdGQSxFQUFFLEdBQUd2RyxhQW9haEIsSUFBSWtsSCxHQUFTLENBQ1hYLE1BQWlCLFdBQ2pCbGEsVUFBd0IsVUFDeEJ3WixNQUFpQixVQUNqQnNCLFlBQThCLFVBQzlCcGpILE1BQWlCLFVBQ2pCcWpILFNBQXVCLFVBQ3ZCQyxTQUF3QixVQUN4QkMsTUFBaUIsVUFDakJuK0MsTUFBaUIsV0FDakJvK0MsVUFBMEIsVUFDMUJucUcsTUFBaUIsVUFDakJvcUcsYUFBZ0MsVUFDaEN6OEYsTUFBa0IsVUFDbEJ3TixNQUFpQixXQUNqQmt2RixNQUFpQixVQUNqQkMsT0FBb0IsVUFDcEJDLFdBQTRCLFVBQzVCQyxNQUFpQixVQUNqQkMsVUFBeUIsU0FDekJDLFVBQTBCLFVBQzFCQyxVQUEwQixVQUMxQkMsV0FBMkIsVUFDM0JDLFFBQXNCLFVBQ3RCQyxRQUFzQixVQUN0QkMsU0FBdUIsVUFDdkJDLFFBQXNCLFVBQ3RCQyxTQUF3QixVQUN4QkMsU0FBd0IsVUFDeEJDLFVBQXlCLFVBQ3pCQyxVQUF5QixXQUN6QkMsU0FBd0IsVUFDeEJDLFVBQXlCLFNBQ3pCQyxXQUE0QixVQUM1QkMsV0FBNEIsU0FDNUJDLFFBQXFCLFNBQ3JCQyxTQUF1QixVQUN2QjltSCxTQXZKRixTQUFxQnVHLEdBQ25CLE9BQUlBLEdBQUssU0FDSEEsR0FBSyxVQUNIQSxHQUFLLFVBQ0csWUFBTkEsRUFDRUEsR0FBSyxVQUNIQSxHQUFLLFVBQ0EsWUFFQSxjQUVBQSxHQUFLLFVBQ1AsYUFFQSxZQUdGLGVBRUFBLEdBQUssVUFDVkEsR0FBSyxVQUNBLFdBRUEsWUFFQUEsR0FBSyxVQUNQLFFBRUEsY0FFQUEsR0FBSyxVQUNKLFlBQU5BLEVBQ0VBLEdBQUssVUFDSEEsR0FBSyxVQUNBLFVBRUEsV0FFQUEsR0FBSyxVQUNQLGdCQUVBLFVBR0YsYUFFQUEsR0FBSyxVQUNWQSxHQUFLLFVBQ0EsV0FFQSxZQUVBQSxHQUFLLFVBQ1AsV0FFQSxjQUVBQSxJQUFNLFVBQ1hBLElBQU0sV0FDRyxZQUFQQSxFQUNFQSxJQUFNLFNBQ0pBLElBQU0sU0FDRCxZQUVBLFdBRUFBLElBQU0sU0FDUixVQUVBLFdBR0YsV0FFQUEsSUFBTSxVQUNYQSxJQUFNLFVBQ0QsWUFFQSxVQUVBQSxJQUFNLFVBQ1IsT0FFQSxhQUVBQSxJQUFNLFdBQ0osWUFBUEEsRUFDRUEsSUFBTSxVQUNKQSxJQUFNLFVBQ0QsT0FFQSxPQUVBQSxJQUFNLFVBQ1IsT0FFQSxPQUdGLE9BRUFBLElBQU0sV0FDWEEsSUFBTSxXQUNELFlBRUEsT0FFQUEsSUFBTSxXQUNSLE9BRUEsU0FxSFgsU0FBU3dnSCxHQUFrQmx2QyxHQUN6QixPQUFPQSxFQUFNLEdBQUc3M0UsV0FBYSxJQUcvQixTQUFTZ25ILEdBQVludkMsR0FDbkIsR0FBcUIsaUJBQVZBLEVBQ1QsT0FBSUEsR0FBUyxVQUNKLGNBRUEsZUFHWCxJQUFJbXFDLEVBQVVucUMsRUFBTSxHQUNwQixJQUFpQixZQUFibXFDLEVBQXdCLENBQzFCLEdBQUlBLEdBQVcsUUFBUyxDQUN0QixHQUFJQSxHQUFXLFFBQVMsQ0FDdEIsSUFBSXZ6RyxFQUFRb3BFLEVBQU0sR0FDbEIsTUFBTyxPQUFVcHBFLEVBQU0sR0FBR3pPLFdBQWMsS0FBUXlPLEVBQU0sR0FBR3pPLFdBQWMsS0FBUXlPLEVBQU0sR0FBR3pPLFdBQWEsSUFFdkcsSUFBSW16RixFQUFVdGIsRUFBTSxHQUNwQixNQUFPLE9BQVVrckMsR0FBVzV2QixFQUFRLElBQU8sS0FBUTR6QixHQUFrQjV6QixFQUFRLElBQU8sS0FBUTR6QixHQUFrQjV6QixFQUFRLElBQU0sSUFFOUgsR0FBSTZ1QixHQUFXLFFBQ2IsTUFBTyxJQUFNbnFDLEVBQU0sR0FFckIsSUFBSW1jLEVBQVVuYyxFQUFNLEdBQ3BCLE1BQU8sUUFBV2tyQyxHQUFXL3VCLEVBQVEsSUFBTyxLQUFRK3lCLEdBQWtCL3lCLEVBQVEsSUFBTyxLQUFRK3lCLEdBQWtCL3lCLEVBQVEsSUFBTyxLQWxDbEksU0FBeUJuYyxHQUN2QixPQUFJQSxFQUFNLElBQU0sUUFDUEEsRUFBTSxHQUFHNzNFLFdBRVQ2M0UsRUFBTSxHQUFHNzNFLFdBQWEsSUE4QnlHaW5ILENBQWdCanpCLEVBQVEsSUFBTSxJQUV0SyxJQUFJRyxFQUFVdGMsRUFBTSxHQUNwQixNQUFPLFFBQVdzYyxFQUFRLEdBQUduMEYsV0FBYyxLQUFRbTBGLEVBQVEsR0FBR24wRixXQUFjLEtBQVFtMEYsRUFBUSxHQUFHbjBGLFdBQWMsS0FBUW0wRixFQUFRLEdBQUduMEYsV0FBYSxJQXFDL0ksSUFBSWtuSCxHQUFjLENBQ2hCbG5ILFNBbkNGLFNBQXFCNjNFLEdBQ25CLE9BQUlBLEdBQVMsVUFDRyxZQUFWQSxFQUNFQSxHQUFTLFVBQ1BBLEdBQVMsV0FDSixRQUVBLFNBRUFBLEdBQVMsVUFDWCxTQUVBLFNBR0YsVUFFVyxZQUFYQSxFQUNMQSxHQUFTLFNBQ1BBLEdBQVMsVUFDSixTQUVBLFFBRUFBLElBQVUsVUFDWixRQUVBLE9BR0YsV0FxRVgsSUFBSXN2QyxHQUFpQixDQUNuQm5uSCxTQWJGLFNBQXFCNjNFLEdBQ25CLE9BQWMsWUFBVkEsRUFDRUEsR0FBUyxVQUNKLFFBRUEsU0FHRixXQW9CWCxJQUFJdXZDLEdBQWdCLENBQ2xCcG5ILFNBYkYsU0FBcUI2M0UsR0FDbkIsT0FBZSxZQUFYQSxFQUNFQSxHQUFTLFVBQ0osUUFFQSxPQUdGLFNBWVgsSUFBSXd2QyxHQUFrQixDQUNwQnJuSCxTQUxGLFNBQXFCNjNFLEdBQ25CLE1BQU8sY0FpQ1QsSUFBSXl2QyxHQUFrQixDQUNwQnRuSCxTQTNCRixTQUFxQjYzRSxHQUNuQixPQUFJQSxHQUFTLFVBQ1BBLEdBQVMsVUFDUEEsR0FBUyxXQUNKLGdCQUVBLHFCQUVBQSxHQUFTLFVBQ1gsYUFFQSxxQkFFQUEsSUFBVSxVQUNmQSxHQUFTLFNBQ0osZUFFQSxrQkFFQUEsSUFBVSxVQUNaLFlBRUEsdUJBZ0JYLElBQUkwdkMsR0FBYSxDQUNmdm5ILFNBVEYsU0FBcUI2M0UsR0FDbkIsT0FBSUEsR0FBUyxVQUNKLFdBRUEsU0FzQlgsSUFBSTJ2QyxHQUFnQixDQUNsQnhuSCxTQWZGLFNBQXFCNjNFLEdBQ25CLE9BQUlBLEdBQVMsU0FDUEEsR0FBUyxTQUNKLGNBRUEsY0FFQUEsSUFBVSxVQUNaLGVBRUEsaUJBc0RYLElBQUk0dkMsR0FBc0IsQ0FDeEJ6bkgsU0EvQkYsU0FBcUI2M0UsR0FDbkIsT0FBSUEsR0FBUyxTQUNHLFdBQVZBLEVBQ0VBLEdBQVMsVUFDUEEsR0FBUyxXQUNKLGFBRUEsV0FFQUEsR0FBUyxVQUNYLGFBRUEsUUFHRixTQUVBQSxJQUFVLFVBQ2ZBLEdBQVMsU0FDSixXQUVBLFFBRUFBLElBQVUsVUFDWixPQUVBLFFBWVgsSUFBSTZ2QyxHQUFvQixDQUN0QjFuSCxTQUxGLFNBQXFCNjNFLEdBQ25CLE1BQU8sYUFXVCxJQUFJOHZDLEdBQWtCLENBQ3BCM25ILFNBTEYsU0FBcUI2M0UsR0FDbkIsTUFBTyxXQXFCVCxJQUFJK3ZDLEdBQXVCLENBQ3pCNW5ILFNBZkYsU0FBcUI2M0UsR0FDbkIsT0FBSUEsSUFBVSxVQUNSQSxHQUFTLFVBQ0osZ0JBRUEsVUFFQUEsSUFBVSxVQUNaLGVBRUEsaUJBMEVYLElBQUlnd0MsR0FBYSxDQUNmN25ILFNBVEYsU0FBcUI2M0UsR0FDbkIsT0FBSUEsR0FBUyxVQUNKLFNBRUEsWUFzS1gsSUFBSWl3QyxHQUFXLENBQ2I5bkgsU0FiRixTQUFxQjYzRSxHQUNuQixPQUFlLFlBQVhBLEVBQ0VBLEdBQVMsVUFDSixTQUVBLE9BR0YsaUJBc0JYLElBQUlrd0MsR0FBZ0IsQ0FDbEIvbkgsU0FmRixTQUFxQjYzRSxHQUNuQixPQUFJQSxHQUFTLFVBQ1BBLEdBQVMsVUFDSixjQUVBLGlCQUVBQSxHQUFTLFFBQ1gsTUFFQSxXQWtEWCxJQUFJbXdDLEdBQWEsQ0FDZmhvSCxTQW5CRixTQUFxQjYzRSxHQUNuQixPQUFlLFlBQVhBLEVBQ0VBLEdBQVMsUUFDUEEsR0FBUyxVQUNKLFVBRUEsTUFFQUEsSUFBVSxVQUNaLE9BRUEsT0FHRixTQTJDWCxJQUFJb3dDLEdBQW9CLENBQ3RCQyxNQWxCRixTQUFlM2hILEdBQ2IsTUFBbUIsQ0FDWCxVQUNBQSxJQWdCUnZHLFNBWkYsU0FBcUI2M0UsR0FDbkIsTUFBcUIsaUJBQVZBLEVBQ0YsT0FFQSxHQUFjLElBQWUsU0FBV3N3QyxFQUFPQyxHQUNwQyxPQUFPRCxFQUFTLElBQU9DLEVBQU8sT0FDNUIsR0FBSXZ3QyxFQUFNLE9BOERsQyxJQUFJd3dDLEdBQVcsQ0FDYjlELE1BQWlCLFdBQ2pCK0QsTUF2REYsU0FBZS9oSCxHQUNiLE1BQW1CLENBQ1gsVUFDQUEsSUFxRFJzTixJQWpERixTQUFhdE4sR0FDWCxNQUFpQixDQUNULFFBQ0FBLElBK0NSZ2lILFNBM0NGLFNBQWtCaGlILEVBQUdVLEdBQ25CLE1BQXNCLEVBQ2IsVUFDVSxDQUNUVixFQUNBVSxLQXVDVittRCxLQWxDRixTQUFjem5ELEdBQ1osTUFBa0IsRUFDVCxVQUNEQSxJQWdDUnZHLFNBNUJGLFNBQXFCdEMsR0FDbkIsR0FBaUIsaUJBQU5BLEVBQ1QsTUFBTyxPQUVULElBQUlza0gsRUFBVXRrSCxFQUFFLEdBQ2hCLEdBQUlza0gsR0FBVyxRQUNiLE9BQUlBLEdBQVcsVUFDTnRrSCxFQUFFLEdBRUZ1QixPQUFPdkIsRUFBRSxJQUdwQixHQUFJc2tILElBQVksVUFBVyxDQUN6QixJQUFJdnpHLEVBQVEvUSxFQUFFLEdBQ2QsT0FBT3VCLE9BQU93UCxFQUFNLElBQU8sSUFBTUEsRUFBTSxHQUV6QyxJQUFJOVAsRUFBSWpCLEVBQUUsR0FDVixNQUFPLFNBQ0NpQixFQUFFLElBQU0sVUFBWUEsRUFBRSxHQUFLTSxPQUFPTixFQUFFLE9BaVM5QyxJQUFJNnBILEdBQVEsQ0FDVnhvSCxTQVRGLFNBQXFCNjNFLEdBQ25CLE9BQUlBLElBQVUsVUFDTCxjQUVBLFNBWVgsSUFBSTR3QyxHQUFXLENBQ2J6b0gsU0FMRixTQUFxQjYzRSxHQUNuQixNQUFPLFNBV1QsSUFBSTZ3QyxHQUFTLENBQ1gxb0gsU0FMRixTQUFxQjYzRSxHQUNuQixNQUFPLFNBaUVULFNBQVM4d0MsR0FBZ0J4MkYsR0FPdkIsSUFOQSxJQUlJeTJGLEVBSlUsR0FBY3oyRixHQUFPLFNBQVcwbEQsR0FDdEMsT0FBT212QyxHQUFZbnZDLEVBQU0sSUFBTyxJQUFNa3FDLEdBQVdscUMsRUFBTSxPQUkzRHNXLEVBQU8sS0FDQyxDQUNWLElBQUlDLEVBQU1ELEVBQ04wNkIsRUFBWUQsRUFDaEIsSUFBS0MsRUFDSCxPQUFPejZCLEVBRVQsSUFBSWptRSxFQUFLMGdHLEVBQVUsR0FDZnRpSCxFQUFJc2lILEVBQVUsR0FDbEIsSUFBSzFnRyxFQUNILE9BQU9pbUUsRUFBTTduRixFQUVmNG5GLEVBQU9DLEdBQU83bkYsRUFkQSxNQWVkcWlILEVBQVd6Z0csR0FxRGYsSUFBSTJnRyxHQUFhLENBQ2ZDLFdBQTJCLFVBQzNCQyxVQUEwQixRQUMxQkMsV0FBNEIsVUFDNUJDLFlBQTZCLFdBQzdCQyxRQUFzQixTQUN0QkMsV0FBMkIsVUFDM0JDLFFBQXNCLFVBQ3RCcnBILFNBaENGLFNBQXFCNjNFLEdBQ25CLE9BQUlBLEdBQVMsUUFDUEEsR0FBUyxVQUNQQSxHQUFTLFVBQ0osY0FFQSxXQUVBQSxHQUFTLFNBQ1gsV0FFQSxjQUVXLFlBQVhBLEVBQ0xBLElBQVUsVUFDTCxhQUVBLGNBR0YsZUE0UlgsSUFJSXl4QyxHQUFpQixDQUNuQkMsUUFBcUIsVUFDckJDLE1BQWlCLFdBQ2pCQyxPQUFvQixVQUNwQkMsUUFBc0IsVUFDdEJDLFdBQTJCLFVBQzNCQyxXQUEyQixVQUMzQkMsUUFBc0IsU0FDdEJDLE1BM21FRixTQUFldHRILEVBQUdxb0QsR0FDaEIsTUFBbUIsQ0FDWCxTQUNXLENBQ1Ryb0QsRUFDQXFvRCxLQXVtRVZrbEUsWUFsbUVGLFNBQXFCamxILEVBQUdDLEVBQUdsSSxFQUFHQyxHQUM1QixNQUF5QixFQUNoQixVQUNVLENBQ1RnSSxFQUNBQyxFQUNBbEksRUFDQUMsS0E0bEVWa0QsU0F2bEVGLFNBQXFCNjNFLEdBQ25CLEdBQXFCLGlCQUFWQSxFQUNULE9BQUlBLElBQVUsVUFDUkEsR0FBUyxVQUNQQSxHQUFTLFVBQ0osV0FFQSxVQUVBQSxHQUFTLFNBQ1gsV0FFQSxjQUVXLFlBQVhBLEVBQ0xBLElBQVUsVUFDTCxTQUVBLE9BR0YsY0FHWCxHQUFJQSxFQUFNLElBQU0sU0FBVSxDQUN4QixJQUFJcHBFLEVBQVFvcEUsRUFBTSxHQUNkcjdFLEVBQUlpUyxFQUFNLEdBQ2QsT0FBSUEsRUFBTSxJQUFNLFNBQ1AsU0FBWWpTLEVBQUV3RCxXQUFhLFdBRTNCLFNBQVl4RCxFQUFFd0QsV0FBYSxTQUd0QyxJQUFJbXpGLEVBQVV0YixFQUFNLEdBQ3BCLE1BQU8sZ0JBQW1Cc2IsRUFBUSxHQUFHbnpGLFdBQWMsS0FBUW16RixFQUFRLEdBQUduekYsV0FBYyxLQUFRbXpGLEVBQVEsR0FBR256RixXQUFjLEtBQVFtekYsRUFBUSxHQUFHbnpGLFdBQWEsTUF3akVuSjI2QixHQUFZLENBQ2Q2ekIsVUFyNURGLFNBQW1Cam9ELEVBQUdVLEdBQ3BCLE1BQXVCLEVBQ2QsVUFDVSxDQUNUVixFQUNBVSxLQWk1RFYraUgsWUE1NERGLFNBQXFCempILEVBQUdVLEVBQUdILEdBQ3pCLE1BQXlCLENBQ2pCLFVBQ1csQ0FDVFAsRUFDQVUsRUFDQUgsS0F1NERWbWpILFdBbDRERixTQUFvQjFqSCxHQUNsQixNQUF3QixDQUNoQixVQUNBQSxJQWc0RFIyakgsV0E1M0RGLFNBQW9CampILEdBQ2xCLE1BQXdCLENBQ2hCLFVBQ0FBLElBMDNEUmtqSCxXQXQzREYsU0FBb0JyakgsR0FDbEIsTUFBd0IsQ0FDaEIsVUFDQUEsSUFvM0RSc2pILE1BaDNERixTQUFlN2pILEVBQUdVLEdBQ2hCLE1BQW1CLEVBQ1YsVUFDVSxDQUNUVixFQUNBVSxLQTQyRFZvakgsUUF2MkRGLFNBQWlCOWpILEVBQUdVLEVBQUdILEdBQ3JCLE1BQXFCLEVBQ1osVUFDVSxDQUNUUCxFQUNBVSxFQUNBSCxLQWsyRFZ3akgsT0E3MURGLFNBQWdCL2pILEdBQ2QsTUFBb0IsQ0FDWixXQUNBQSxJQTIxRFJna0gsT0F2MURGLFNBQWdCaGtILEdBQ2QsTUFBb0IsQ0FDWixXQUNBQSxJQXExRFJpa0gsT0FqMURGLFNBQWdCamtILEdBQ2QsTUFBb0IsQ0FDWixXQUNBQSxJQSswRFJra0gsT0EzMERGLFNBQWdCM2xILEdBQ2QsTUFBb0IsRUFDWCxVQUNEQSxJQXkwRFI0bEgsU0FyMERGLFNBQWtCbmtILEVBQUdVLEVBQUdILEVBQUdoQyxHQUN6QixNQUFzQixDQUNkLFVBQ1csQ0FDVHlCLEVBQ0FVLEVBQ0FILEVBQ0FoQyxLQSt6RFY2bEgsUUExekRGLFNBQWlCN2xILEdBQ2YsTUFBcUIsRUFDWixVQUNEQSxJQXd6RFI4bEgsUUFwekRGLFNBQWlCOWxILEdBQ2YsTUFBcUIsRUFDWixVQUNEQSxJQWt6RFIrbEgsUUE5eURGLFNBQWlCL2xILEdBQ2YsTUFBcUIsRUFDWixVQUNEQSxJQTR5RFJnbUgsS0F4eURGLFNBQWNobUgsRUFBR28yRixHQUNmLE1BQWtCLEVBQ1QsVUFDVSxDQUNUcDJGLEVBQ0FvMkYsS0FveURWNnZCLE1BL3hERixTQUFlam1ILEdBQ2IsTUFBbUIsRUFDVixTQUNEQSxJQTZ4RFJrbUgsTUF6eERGLFNBQWVsbUgsR0FDYixNQUFtQixFQUNWLFNBQ0RBLElBdXhEUjlFLFNBbnhERixTQUFxQjYzRSxHQUNuQixJQUFJbXFDLEVBQVVucUMsRUFBTSxHQUNwQixHQUFJbXFDLElBQVksVUFBVyxDQUN6QixLQUFJQSxHQUFXLFdBa0NSLENBQ0wsSUFBaUIsV0FBYkEsRUFDRixNQUFPLFNBQVllLEdBQVdsckMsRUFBTSxJQUFNLElBRTVDLEdBQUltcUMsSUFBWSxTQUNkLE1BQU8sU0FBWWUsR0FBV2xyQyxFQUFNLElBQU0sSUFFNUMsSUFBSW1jLEVBQVVuYyxFQUFNLEdBQ2hCb3pDLEVBQU1qM0IsRUFBUSxHQUNkazNCLEVBQU1sM0IsRUFBUSxHQUNsQixNQUFPLFNBQVlpM0IsRUFBSWpySCxXQUFjLEtBQVFrckgsRUFBSWxySCxXQUFhLElBM0M5RCxHQUFJZ2lILEdBQVcsVUFBVyxDQUN4QixLQUFJQSxHQUFXLFlBVVIsQ0FDTCxJQUFJdnpHLEVBQVFvcEUsRUFBTSxHQUNkdHhFLEVBQUlrSSxFQUFNLEdBQ1Z4SCxFQUFJd0gsRUFBTSxHQUNWM0gsRUFBSTJILEVBQU0sR0FDZCxNQUFPLGVBQWtCc3pHLEdBQVd4N0csR0FBTSxLQUFRdzdHLEdBQVc5NkcsR0FBTSxLQUFRODZHLEdBQVdqN0csR0FBSyxJQWQzRixPQUFRazdHLEVBQVUsV0FBYSxHQUM3QixLQUFLLEVBQ0QsTUFBTyxVQUFhbnFDLEVBQU0sR0FBRzczRSxXQUFhLElBQzlDLEtBQUssRUFDRCxNQUFPLFVBQWE2M0UsRUFBTSxHQUFHNzNFLFdBQWEsSUFDOUMsS0FBSyxFQUNELE1BQU8sVUFBYTYzRSxFQUFNLEdBQUc3M0UsV0FBYSxTQVU3QyxDQUNMLEdBQUlnaUgsR0FBVyxVQUFXLENBQ3hCLElBQUk3dUIsRUFBVXRiLEVBQU0sR0FDcEIsTUFBTyxZQUFlc2IsRUFBUSxHQUFHbnpGLFdBQWMsS0FBUW16RixFQUFRLEdBQUduekYsV0FBYyxLQUFRbXpGLEVBQVEsR0FBR256RixXQUFjLEtBQVEraUgsR0FBVzV2QixFQUFRLElBQU0sSUFFcEosT0FBUTZ1QixFQUFVLFVBQVksR0FDNUIsS0FBSyxFQUNELE1BQU8sY0FBaUJELEdBQVdscUMsRUFBTSxJQUFNLElBQ25ELEtBQUssRUFDRCxNQUFPLGNBQWlCa3FDLEdBQVdscUMsRUFBTSxJQUFNLElBQ25ELEtBQUssRUFDRCxNQUFPLGNBQWlCa3FDLEdBQVdscUMsRUFBTSxJQUFNLFVBZ0JwRCxNQUFJbXFDLElBQVksV0F1QmhCLENBQ0wsR0FBSUEsR0FBVyxVQUNiLE1BQU8sZUFBa0JucUMsRUFBTSxHQUFHNzNFLFdBQWEsSUFFakQsSUFBSXEwRixFQUFVeGMsRUFBTSxHQUNwQixNQUFPLGFBQWdCa3FDLEdBQVcxdEIsRUFBUSxJQUFPLEtBQVEwdEIsR0FBVzF0QixFQUFRLElBQU0sSUEzQmxGLEtBQUkydEIsSUFBWSxXQWVULENBQ0wsR0FBSUEsR0FBVyxVQUNiLE1BQU8sVUFBYWUsR0FBV2xyQyxFQUFNLElBQU0sSUFFN0MsSUFBSXVjLEVBQVV2YyxFQUFNLEdBQ3BCLE1BQU8sUUFBV2tyQyxHQUFXM3VCLEVBQVEsSUFBTyxLQUFRMnVCLEdBQVczdUIsRUFBUSxJQUFNLElBbkI3RSxLQUFJNHRCLElBQVksV0FVVCxDQUNMLElBQUk3dEIsRUFBVXRjLEVBQU0sR0FDcEIsTUFBTyxXQUFjc2MsRUFBUSxHQUFHbjBGLFdBQWMsS0FBUW0wRixFQUFRLEdBQUduMEYsV0FBYyxLQUFRbTBGLEVBQVEsR0FBR24wRixXQUFhLElBWC9HLE9BQVFnaUgsRUFBVSxVQUFZLEdBQzVCLEtBQUssRUFDRCxNQUFPLFdBQWNlLEdBQVdsckMsRUFBTSxJQUFNLElBQ2hELEtBQUssRUFDRCxNQUFPLFdBQWNrckMsR0FBV2xyQyxFQUFNLElBQU0sSUFDaEQsS0FBSyxFQUNELE1BQU8sV0FBY2tyQyxHQUFXbHJDLEVBQU0sSUFBTSxRQTR0RHREc3pDLEdBQVEsQ0FDVkMsSUFoL0NGLFNBQWE5dEgsRUFBR2dKLEVBQUd2QixHQUNqQixNQUFpQixDQUNULFFBQ1csQ0FDVHpILEVBQ0FnSixFQUNBdkIsS0EyK0NWc21ILEtBdCtDRixTQUFjL3RILEVBQUdnSixFQUFHdkIsRUFBR0QsR0FDckIsTUFBa0IsRUFDVCxVQUNVLENBQ1R4SCxFQUNBZ0osRUFDQXZCLEVBQ0FELEtBZytDVndtSCxJQTM5Q0YsU0FBYTVtSCxFQUFHbkcsRUFBRzlCLEdBQ2pCLE1BQWlCLENBQ1QsUUFDVyxDQUNUaUksRUFDYyxFQUNYLFVBQ0RuRyxHQUVZLEVBQ1gsVUFDRDlCLE1BaTlDWjh1SCxLQTM4Q0YsU0FBYzdtSCxFQUFHbkcsRUFBRzlCLEVBQUdxSSxHQUNyQixNQUFrQixFQUNULFVBQ1UsQ0FDVEosRUFDYyxFQUNYLFVBQ0RuRyxHQUVZLEVBQ1gsVUFDRDlCLEdBRUZxSSxLQSs3Q1YwbUgsSUExN0NGLFNBQWFqbEgsR0FDWCxNQUFpQixDQUNULFFBQ0FBLElBdzdDUmtsSCxZQUE4QixVQUM5QkMsYUFBZ0MsVUFDaEMxckgsU0FBVWduSCxJQU9SMkUsR0FBVyxDQUNiQyxlQXpiRixTQUF3QkMsRUFBTzE1RixHQUM3QixNQUE0QixDQUNwQixVQUNXLENBQ1QwNUYsRUFDQTE1RixLQXFiVjI1RixlQXRhRixTQUF3QjM1RixHQUN0QixNQUE0QixDQUNwQixVQUNBQSxJQW9hUjQ1Rix3QkFqYkYsU0FBaUNGLEVBQU8xNUYsR0FDdEMsTUFBcUMsRUFDNUIsVUFDVSxDQUNUMDVGLEVBQ0ExNUYsS0E2YVY2NUYsd0JBamFGLFNBQWlDNzVGLEdBQy9CLE1BQXFDLEVBQzVCLFVBQ0RBLElBK1pSbnlCLFNBbllGLFNBQXFCNjNFLEdBQ25CLElBQUltcUMsRUFBVW5xQyxFQUFNLEdBQ3BCLEdBQUltcUMsR0FBVyxVQUFXLENBQ3hCLEdBQUlBLEVBQVUsVUFDWixNQUFPLG1CQUFzQjJHLEdBQWdCOXdDLEVBQU0sSUFBTSxJQUUzRCxJQUFJcHBFLEVBQVFvcEUsRUFBTSxHQUNsQixNQUFPLG1CQUFzQmtyQyxHQUFXdDBHLEVBQU0sSUFBTyxLQUFRazZHLEdBQWdCbDZHLEVBQU0sSUFBTSxJQUUzRixHQUFJdXpHLEdBQVcsVUFDYixNQUFPLDZCQUFnQzJHLEdBQWdCOXdDLEVBQU0sSUFBTSxJQUVyRSxJQUFJc2IsRUFBVXRiLEVBQU0sR0FDcEIsTUFBTyw2QkFBZ0NrckMsR0FBVzV2QixFQUFRLElBQU8sS0FBUXcxQixHQUFnQngxQixFQUFRLElBQU0sTUF5WHJHODRCLEdBQWlCLENBQ25CanNILFNBcFJGLFNBQXFCNjNFLEdBQ25CLE1BQXFCLGlCQUFWQSxFQUNMQSxJQUFVLFdBQ0csWUFBWEEsRUFDRUEsSUFBVSxTQUNSQSxHQUFTLFVBQ0osV0FFQSxVQUVBQSxJQUFVLFNBQ1osUUFFQSxZQUdGLFFBRUFBLElBQVUsVUFDZkEsSUFBVSxVQUNMLFlBRUEsYUFFQUEsSUFBVSxVQUNaLFVBRUEsT0FHRkEsRUFBTSxLQ2g3RWJxMEMsSUFkWSxHQUFzQlYsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUVsQyxHQUFzQkEsSUFBSSxVQUVwQixHQUFzQkEsSUFBSSxVQUUvQixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxXQWtSbENXLElBaFJpQixHQUFzQlgsSUFBSSxVQUVwQyxHQUFzQkEsSUFBSSxVQUVwQixHQUFzQkEsSUFBSSxVQUUvQixHQUFzQkEsSUFBSSxVQUV0QixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUU5QixHQUFzQkEsSUFBSSxVQUVqQixHQUFzQkEsSUFBSSxVQUVoQyxHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUU3QixHQUFzQkEsSUFBSSxVQUV0QixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUVyQixHQUFzQkEsSUFBSSxVQUUvQixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUV4QixHQUFzQkEsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUU5QixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUU3QixHQUFzQkEsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUV4QixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUU3QixHQUFzQkEsSUFBSSxVQUU1QixHQUFzQkEsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUU5QixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUV4QixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUU5QixHQUFzQkEsSUFBSSxVQUV4QixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUVoQyxHQUFzQkEsSUFBSSxVQUVyQixHQUFzQkEsSUFBSSxVQUUvQixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUVwQixHQUFzQkEsSUFBSSxVQUVqQyxHQUFzQkEsSUFBSSxVQUV0QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUV4QixHQUFzQkEsSUFBSSxVQUU3QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUUxQixHQUFzQkEsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUVyQixHQUFzQkEsSUFBSSxVQUU5QixHQUFzQkEsSUFBSSxVQUV2QixHQUFzQkEsSUFBSSxVQUU3QixHQUFzQkEsSUFBSSxVQUV6QixHQUFzQkEsSUFBSSxVQUUzQixHQUFzQkEsSUFBSSxVQUVmLEdBQXNCQSxJQUFJLFVBRXJDLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRWpDLEdBQXNCQSxJQUFJLFVBRXJCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRWhCLEdBQXNCQSxJQUFJLFVBRWhDLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTVCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRWpDLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTVCLEdBQXNCQSxJQUFJLFVBRXRCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRW5CLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRXRCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXBCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRW5CLEdBQXNCQSxJQUFJLFVBRXBDLEdBQXNCQSxJQUFJLFVBRXBCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRXRCLEdBQXNCQSxJQUFJLFVBRTVCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTVCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRXhCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFVBRS9CLEdBQXNCQSxJQUFJLFVBRW5CLEdBQXNCQSxJQUFJLFVBRTVCLEdBQXNCQSxJQUFJLFVBRWhDLEdBQXNCQSxJQUFJLFVBRXpCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRXZCLEdBQXNCQSxJQUFJLFVBRTdCLEdBQXNCQSxJQUFJLFVBRTNCLEdBQXNCQSxJQUFJLFVBRTFCLEdBQXNCQSxJQUFJLFdBRXJCLEdBQXNCQSxJQUFJLFVBRTlCLEdBQXNCQSxJQUFJLFVBRXJCLEdBQXNCQSxJQUFJLFNBRTFCLEdBQXNCQyxZQzlSeEMsU0FBU1csR0FBV2hnQyxFQUFNcHBGLEdB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NGdDYXR3RSxFQUFHakIsRXFFNWdDWm1JLEVBQVEsSUFDUnF5RyxFQUFtQnJ5RyxFQUFNcXlHLGlCQUN6QnlTLEVBQVc5a0gsRUFBTThrSCxTQUNyQixPQUFPLElBQXlCLFNBQVcxeEIsT3JFeWdDOUJ0NkYsRXFFdmdDbUIsR3JFdWdDaEJqQixFcUV2Z0MrQnF5SCxHckV3Z0N4QyxJQUFNLFNBQVc3ekgsR0FFVixPQURBLEVBQVN5QyxFQUFHekMsR0FDTEEsS0FDTCxTQUFXbkcsR0FFYixPQURBLEVBQVMySCxFQUFHM0gsR0FDTEEsSXFFN2dDc0MsSUFBYyxTQUFXbThCLEdBQzlELE9BQU8sR0FBWXk0RixFQUFVelMsRUFBa0JobUYsS0FDN0MsR0FBc0Jyc0IsRUFBTWt5RyxVQUFXbHlHLEVBQU1teUcsaUJBQWtCbnlHLEVBQU1veUcsWUFBYUMsT0FwRjFHLEVBQVEsS0F1RlY4WCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMzkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ1dGlsXCIpOyIsInRyeSB7XG4gIHZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAodHlwZW9mIHV0aWwuaW5oZXJpdHMgIT09ICdmdW5jdGlvbicpIHRocm93ICcnO1xuICBtb2R1bGUuZXhwb3J0cyA9IHV0aWwuaW5oZXJpdHM7XG59IGNhdGNoIChlKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9pbmhlcml0c19icm93c2VyLmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB3aGl0ZXNwYWNlXG5cbnZhciBmcm9tQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbnZhciByZSA9IC9cXHMvXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhIHdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuZnVuY3Rpb24gd2hpdGVzcGFjZShjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIHJlLnRlc3QoXG4gICAgdHlwZW9mIGNoYXJhY3RlciA9PT0gJ251bWJlcicgPyBmcm9tQ29kZShjaGFyYWN0ZXIpIDogY2hhcmFjdGVyLmNoYXJBdCgwKVxuICApXG59XG4iLCIvL1xuLy8gQ29uc3RhbnRzXG4vL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzLkVPTCA9ICdcXG4nO1xuXG5tb2R1bGUuZXhwb3J0cy5TVVBQUkVTUyA9ICc9PVNVUFBSRVNTPT0nO1xuXG5tb2R1bGUuZXhwb3J0cy5PUFRJT05BTCA9ICc/JztcblxubW9kdWxlLmV4cG9ydHMuWkVST19PUl9NT1JFID0gJyonO1xuXG5tb2R1bGUuZXhwb3J0cy5PTkVfT1JfTU9SRSA9ICcrJztcblxubW9kdWxlLmV4cG9ydHMuUEFSU0VSID0gJ0EuLi4nO1xuXG5tb2R1bGUuZXhwb3J0cy5SRU1BSU5ERVIgPSAnLi4uJztcblxubW9kdWxlLmV4cG9ydHMuX1VOUkVDT0dOSVpFRF9BUkdTX0FUVFIgPSAnX3VucmVjb2duaXplZF9hcmdzJztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImZzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gZXh0ZW5kXG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0ge31cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV1cblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJzdHJlYW1cIik7IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYFxuLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXJnKTtcbiAgfVxuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoYXJnKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn1cbmV4cG9ydHMuaXNBcnJheSA9IGlzQXJyYXk7XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJztcbn1cbmV4cG9ydHMuaXNCb29sZWFuID0gaXNCb29sZWFuO1xuXG5mdW5jdGlvbiBpc051bGwoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbCA9IGlzTnVsbDtcblxuZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNOdW1iZXIoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnbnVtYmVyJztcbn1cbmV4cG9ydHMuaXNOdW1iZXIgPSBpc051bWJlcjtcblxuZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZztcblxuZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cbmV4cG9ydHMuaXNTeW1ib2wgPSBpc1N5bWJvbDtcblxuZnVuY3Rpb24gaXNVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IHZvaWQgMDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcblxuZnVuY3Rpb24gaXNSZWdFeHAocmUpIHtcbiAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpO1xufVxuZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZShhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbCB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnIHx8ICAvLyBFUzYgc3ltYm9sXG4gICAgICAgICB0eXBlb2YgYXJnID09PSAndW5kZWZpbmVkJztcbn1cbmV4cG9ydHMuaXNQcmltaXRpdmUgPSBpc1ByaW1pdGl2ZTtcblxuZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicGF0aFwiKTsiLCIvKipcbiAqIGNsYXNzIEFjdGlvblxuICpcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBhY3Rpb25zXG4gKiBEbyBub3QgY2FsbCBpbiB5b3VyIGNvZGUsIHVzZSB0aGlzIGNsYXNzIG9ubHkgZm9yIGluaGVyaXRzIHlvdXIgb3duIGFjdGlvblxuICpcbiAqIEluZm9ybWF0aW9uIGFib3V0IGhvdyB0byBjb252ZXJ0IGNvbW1hbmQgbGluZSBzdHJpbmdzIHRvIEphdmFzY3JpcHQgb2JqZWN0cy5cbiAqIEFjdGlvbiBvYmplY3RzIGFyZSB1c2VkIGJ5IGFuIEFyZ3VtZW50UGFyc2VyIHRvIHJlcHJlc2VudCB0aGUgaW5mb3JtYXRpb25cbiAqIG5lZWRlZCB0byBwYXJzZSBhIHNpbmdsZSBhcmd1bWVudCBmcm9tIG9uZSBvciBtb3JlIHN0cmluZ3MgZnJvbSB0aGUgY29tbWFuZFxuICogbGluZS4gVGhlIGtleXdvcmQgYXJndW1lbnRzIHRvIHRoZSBBY3Rpb24gY29uc3RydWN0b3IgYXJlIGFsc28gYWxsIGF0dHJpYnV0ZXNcbiAqIG9mIEFjdGlvbiBpbnN0YW5jZXMuXG4gKlxuICogIyMjIyMgQWxsb3dlZCBrZXl3b3JkczpcbiAqXG4gKiAtIGBzdG9yZWBcbiAqIC0gYHN0b3JlQ29uc3RhbnRgXG4gKiAtIGBzdG9yZVRydWVgXG4gKiAtIGBzdG9yZUZhbHNlYFxuICogLSBgYXBwZW5kYFxuICogLSBgYXBwZW5kQ29uc3RhbnRgXG4gKiAtIGBjb3VudGBcbiAqIC0gYGhlbHBgXG4gKiAtIGB2ZXJzaW9uYFxuICpcbiAqIEluZm9ybWF0aW9uIGFib3V0IGFjdGlvbiBvcHRpb25zIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI2FjdGlvbilcbiAqXG4gKiovXG5cbid1c2Ugc3RyaWN0JztcblxuXG4vLyBDb25zdGFudHNcbnZhciBjID0gcmVxdWlyZSgnLi9jb25zdCcpO1xuXG5cbi8qKlxuICogbmV3IEFjdGlvbihvcHRpb25zKVxuICpcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBhY3Rpb25zLiBVc2VkIG9ubHkgZm9yIGluaGVyaXRzXG4gKlxuICpcbiAqICMjIyMjIE9wdGlvbnM6XG4gKlxuICogLSBgb3B0aW9uU3RyaW5nc2AgIEEgbGlzdCBvZiBjb21tYW5kLWxpbmUgb3B0aW9uIHN0cmluZ3MgZm9yIHRoZSBhY3Rpb24uXG4gKiAtIGBkZXN0YCAgQXR0cmlidXRlIHRvIGhvbGQgdGhlIGNyZWF0ZWQgb2JqZWN0KHMpXG4gKiAtIGBuYXJnc2AgIFRoZSBudW1iZXIgb2YgY29tbWFuZC1saW5lIGFyZ3VtZW50cyB0aGF0IHNob3VsZCBiZSBjb25zdW1lZC5cbiAqIEJ5IGRlZmF1bHQsIG9uZSBhcmd1bWVudCB3aWxsIGJlIGNvbnN1bWVkIGFuZCBhIHNpbmdsZSB2YWx1ZSB3aWxsIGJlXG4gKiBwcm9kdWNlZC5cbiAqIC0gYGNvbnN0YW50YCAgRGVmYXVsdCB2YWx1ZSBmb3IgYW4gYWN0aW9uIHdpdGggbm8gdmFsdWUuXG4gKiAtIGBkZWZhdWx0VmFsdWVgICBUaGUgdmFsdWUgdG8gYmUgcHJvZHVjZWQgaWYgdGhlIG9wdGlvbiBpcyBub3Qgc3BlY2lmaWVkLlxuICogLSBgdHlwZWAgIENhc3QgdG8gJ3N0cmluZyd8J2ludCd8J2Zsb2F0J3wnY29tcGxleCd8ZnVuY3Rpb24gKHN0cmluZykuIElmXG4gKiBOb25lLCAnc3RyaW5nJy5cbiAqIC0gYGNob2ljZXNgICBUaGUgY2hvaWNlcyBhdmFpbGFibGUuXG4gKiAtIGByZXF1aXJlZGAgIFRydWUgaWYgdGhlIGFjdGlvbiBtdXN0IGFsd2F5cyBiZSBzcGVjaWZpZWQgYXQgdGhlIGNvbW1hbmRcbiAqIGxpbmUuXG4gKiAtIGBoZWxwYCAgVGhlIGhlbHAgZGVzY3JpYmluZyB0aGUgYXJndW1lbnQuXG4gKiAtIGBtZXRhdmFyYCAgVGhlIG5hbWUgdG8gYmUgdXNlZCBmb3IgdGhlIG9wdGlvbidzIGFyZ3VtZW50IHdpdGggdGhlIGhlbHBcbiAqIHN0cmluZy4gSWYgTm9uZSwgdGhlICdkZXN0JyB2YWx1ZSB3aWxsIGJlIHVzZWQgYXMgdGhlIG5hbWUuXG4gKlxuICogIyMjIyMgbmFyZ3Mgc3VwcG9ydGVkIHZhbHVlczpcbiAqXG4gKiAtIGBOYCAoYW4gaW50ZWdlcikgY29uc3VtZXMgTiBhcmd1bWVudHMgKGFuZCBwcm9kdWNlcyBhIGxpc3QpXG4gKiAtIGA/YCAgY29uc3VtZXMgemVybyBvciBvbmUgYXJndW1lbnRzXG4gKiAtIGAqYCBjb25zdW1lcyB6ZXJvIG9yIG1vcmUgYXJndW1lbnRzIChhbmQgcHJvZHVjZXMgYSBsaXN0KVxuICogLSBgK2AgY29uc3VtZXMgb25lIG9yIG1vcmUgYXJndW1lbnRzIChhbmQgcHJvZHVjZXMgYSBsaXN0KVxuICpcbiAqIE5vdGU6IHRoYXQgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiB0aGUgZGVmYXVsdCBhbmQgbmFyZ3M9MSBpcyB0aGF0IHdpdGggdGhlXG4gKiBkZWZhdWx0LCBhIHNpbmdsZSB2YWx1ZSB3aWxsIGJlIHByb2R1Y2VkLCB3aGlsZSB3aXRoIG5hcmdzPTEsIGEgbGlzdFxuICogY29udGFpbmluZyBhIHNpbmdsZSB2YWx1ZSB3aWxsIGJlIHByb2R1Y2VkLlxuICoqL1xudmFyIEFjdGlvbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHRoaXMub3B0aW9uU3RyaW5ncyA9IG9wdGlvbnMub3B0aW9uU3RyaW5ncyB8fCBbXTtcbiAgdGhpcy5kZXN0ID0gb3B0aW9ucy5kZXN0O1xuICB0aGlzLm5hcmdzID0gdHlwZW9mIG9wdGlvbnMubmFyZ3MgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5uYXJncyA6IG51bGw7XG4gIHRoaXMuY29uc3RhbnQgPSB0eXBlb2Ygb3B0aW9ucy5jb25zdGFudCAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmNvbnN0YW50IDogbnVsbDtcbiAgdGhpcy5kZWZhdWx0VmFsdWUgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgdGhpcy50eXBlID0gdHlwZW9mIG9wdGlvbnMudHlwZSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnR5cGUgOiBudWxsO1xuICB0aGlzLmNob2ljZXMgPSB0eXBlb2Ygb3B0aW9ucy5jaG9pY2VzICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuY2hvaWNlcyA6IG51bGw7XG4gIHRoaXMucmVxdWlyZWQgPSB0eXBlb2Ygb3B0aW9ucy5yZXF1aXJlZCAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnJlcXVpcmVkIDogZmFsc2U7XG4gIHRoaXMuaGVscCA9IHR5cGVvZiBvcHRpb25zLmhlbHAgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5oZWxwIDogbnVsbDtcbiAgdGhpcy5tZXRhdmFyID0gdHlwZW9mIG9wdGlvbnMubWV0YXZhciAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLm1ldGF2YXIgOiBudWxsO1xuXG4gIGlmICghKHRoaXMub3B0aW9uU3RyaW5ncyBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignb3B0aW9uU3RyaW5ncyBzaG91bGQgYmUgYW4gYXJyYXknKTtcbiAgfVxuICBpZiAodHlwZW9mIHRoaXMucmVxdWlyZWQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLnJlcXVpcmVkICE9PSAnYm9vbGVhbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVpcmVkIHNob3VsZCBiZSBhIGJvb2xlYW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBY3Rpb24jZ2V0TmFtZSAtPiBTdHJpbmdcbiAqXG4gKiBUZWxscyBhY3Rpb24gbmFtZVxuICoqL1xuQWN0aW9uLnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5vcHRpb25TdHJpbmdzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25TdHJpbmdzLmpvaW4oJy8nKTtcbiAgfSBlbHNlIGlmICh0aGlzLm1ldGF2YXIgIT09IG51bGwgJiYgdGhpcy5tZXRhdmFyICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgcmV0dXJuIHRoaXMubWV0YXZhcjtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5kZXN0ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLmRlc3QgIT09IGMuU1VQUFJFU1MpIHtcbiAgICByZXR1cm4gdGhpcy5kZXN0O1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuLyoqXG4gKiBBY3Rpb24jaXNPcHRpb25hbCAtPiBCb29sZWFuXG4gKlxuICogUmV0dXJuIHRydWUgaWYgb3B0aW9uYWxcbiAqKi9cbkFjdGlvbi5wcm90b3R5cGUuaXNPcHRpb25hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICF0aGlzLmlzUG9zaXRpb25hbCgpO1xufTtcblxuLyoqXG4gKiBBY3Rpb24jaXNQb3NpdGlvbmFsIC0+IEJvb2xlYW5cbiAqXG4gKiBSZXR1cm4gdHJ1ZSBpZiBwb3NpdGlvbmFsXG4gKiovXG5BY3Rpb24ucHJvdG90eXBlLmlzUG9zaXRpb25hbCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICh0aGlzLm9wdGlvblN0cmluZ3MubGVuZ3RoID09PSAwKTtcbn07XG5cbi8qKlxuICogQWN0aW9uI2NhbGwocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcywgb3B0aW9uU3RyaW5nKSAtPiBWb2lkXG4gKiAtIHBhcnNlciAoQXJndW1lbnRQYXJzZXIpOiBjdXJyZW50IHBhcnNlclxuICogLSBuYW1lc3BhY2UgKE5hbWVzcGFjZSk6IG5hbWVzcGFjZSBmb3Igb3V0cHV0IGRhdGFcbiAqIC0gdmFsdWVzIChBcnJheSk6IHBhcnNlZCB2YWx1ZXNcbiAqIC0gb3B0aW9uU3RyaW5nIChBcnJheSk6IGlucHV0IG9wdGlvbiBzdHJpbmcobm90IHBhcnNlZClcbiAqXG4gKiBDYWxsIHRoZSBhY3Rpb24uIFNob3VsZCBiZSBpbXBsZW1lbnRlZCBpbiBpbmhlcml0ZWQgY2xhc3Nlc1xuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiAgICAgIEFjdGlvbkNvdW50LnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykge1xuICogICAgICAgIG5hbWVzcGFjZS5zZXQodGhpcy5kZXN0LCAobmFtZXNwYWNlW3RoaXMuZGVzdF0gfHwgMCkgKyAxKTtcbiAqICAgICAgfTtcbiAqXG4gKiovXG5BY3Rpb24ucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IG5ldyBFcnJvcignLmNhbGwoKSBub3QgZGVmaW5lZCcpOy8vIE5vdCBJbXBsZW1lbnRlZCBlcnJvclxufTtcbiIsIi8qXG5cbkJhc2VkIG9mZiBnbGFtb3IncyBTdHlsZVNoZWV0LCB0aGFua3MgU3VuaWwg4p2k77iPXG5cbmhpZ2ggcGVyZm9ybWFuY2UgU3R5bGVTaGVldCBmb3IgY3NzLWluLWpzIHN5c3RlbXNcblxuLSB1c2VzIG11bHRpcGxlIHN0eWxlIHRhZ3MgYmVoaW5kIHRoZSBzY2VuZXMgZm9yIG1pbGxpb25zIG9mIHJ1bGVzXG4tIHVzZXMgYGluc2VydFJ1bGVgIGZvciBhcHBlbmRpbmcgaW4gcHJvZHVjdGlvbiBmb3IgKm11Y2gqIGZhc3RlciBwZXJmb3JtYW5jZVxuXG4vLyB1c2FnZVxuXG5pbXBvcnQgeyBTdHlsZVNoZWV0IH0gZnJvbSAnQGVtb3Rpb24vc2hlZXQnXG5cbmxldCBzdHlsZVNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoeyBrZXk6ICcnLCBjb250YWluZXI6IGRvY3VtZW50LmhlYWQgfSlcblxuc3R5bGVTaGVldC5pbnNlcnQoJyNib3ggeyBib3JkZXI6IDFweCBzb2xpZCByZWQ7IH0nKVxuLSBhcHBlbmRzIGEgY3NzIHJ1bGUgaW50byB0aGUgc3R5bGVzaGVldFxuXG5zdHlsZVNoZWV0LmZsdXNoKClcbi0gZW1wdGllcyB0aGUgc3R5bGVzaGVldCBvZiBhbGwgaXRzIGNvbnRlbnRzXG5cbiovXG4vLyAkRmxvd0ZpeE1lXG5mdW5jdGlvbiBzaGVldEZvclRhZyh0YWcpIHtcbiAgaWYgKHRhZy5zaGVldCkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICByZXR1cm4gdGFnLnNoZWV0O1xuICB9IC8vIHRoaXMgd2VpcmRuZXNzIGJyb3VnaHQgdG8geW91IGJ5IGZpcmVmb3hcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2N1bWVudC5zdHlsZVNoZWV0cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChkb2N1bWVudC5zdHlsZVNoZWV0c1tpXS5vd25lck5vZGUgPT09IHRhZykge1xuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgcmV0dXJuIGRvY3VtZW50LnN0eWxlU2hlZXRzW2ldO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgdGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdGFnLnNldEF0dHJpYnV0ZSgnZGF0YS1lbW90aW9uJywgb3B0aW9ucy5rZXkpO1xuXG4gIGlmIChvcHRpb25zLm5vbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICB0YWcuc2V0QXR0cmlidXRlKCdub25jZScsIG9wdGlvbnMubm9uY2UpO1xuICB9XG5cbiAgdGFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSk7XG4gIHJldHVybiB0YWc7XG59XG5cbnZhciBTdHlsZVNoZWV0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3R5bGVTaGVldChvcHRpb25zKSB7XG4gICAgdGhpcy5pc1NwZWVkeSA9IG9wdGlvbnMuc3BlZWR5ID09PSB1bmRlZmluZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIDogb3B0aW9ucy5zcGVlZHk7XG4gICAgdGhpcy50YWdzID0gW107XG4gICAgdGhpcy5jdHIgPSAwO1xuICAgIHRoaXMubm9uY2UgPSBvcHRpb25zLm5vbmNlOyAvLyBrZXkgaXMgdGhlIHZhbHVlIG9mIHRoZSBkYXRhLWVtb3Rpb24gYXR0cmlidXRlLCBpdCdzIHVzZWQgdG8gaWRlbnRpZnkgZGlmZmVyZW50IHNoZWV0c1xuXG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmtleTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IG9wdGlvbnMuY29udGFpbmVyO1xuICAgIHRoaXMuYmVmb3JlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZVNoZWV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gaW5zZXJ0KHJ1bGUpIHtcbiAgICAvLyB0aGUgbWF4IGxlbmd0aCBpcyBob3cgbWFueSBydWxlcyB3ZSBoYXZlIHBlciBzdHlsZSB0YWcsIGl0J3MgNjUwMDAgaW4gc3BlZWR5IG1vZGVcbiAgICAvLyBpdCdzIDEgaW4gZGV2IGJlY2F1c2Ugd2UgaW5zZXJ0IHNvdXJjZSBtYXBzIHRoYXQgbWFwIGEgc2luZ2xlIHJ1bGUgdG8gYSBsb2NhdGlvblxuICAgIC8vIGFuZCB5b3UgY2FuIG9ubHkgaGF2ZSBvbmUgc291cmNlIG1hcCBwZXIgc3R5bGUgdGFnXG4gICAgaWYgKHRoaXMuY3RyICUgKHRoaXMuaXNTcGVlZHkgPyA2NTAwMCA6IDEpID09PSAwKSB7XG4gICAgICB2YXIgX3RhZyA9IGNyZWF0ZVN0eWxlRWxlbWVudCh0aGlzKTtcblxuICAgICAgdmFyIGJlZm9yZTtcblxuICAgICAgaWYgKHRoaXMudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYmVmb3JlID0gdGhpcy5iZWZvcmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiZWZvcmUgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoX3RhZywgYmVmb3JlKTtcbiAgICAgIHRoaXMudGFncy5wdXNoKF90YWcpO1xuICAgIH1cblxuICAgIHZhciB0YWcgPSB0aGlzLnRhZ3NbdGhpcy50YWdzLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKHRoaXMuaXNTcGVlZHkpIHtcbiAgICAgIHZhciBzaGVldCA9IHNoZWV0Rm9yVGFnKHRhZyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIHRoaXMgaXMgYSByZWFsbHkgaG90IHBhdGhcbiAgICAgICAgLy8gd2UgY2hlY2sgdGhlIHNlY29uZCBjaGFyYWN0ZXIgZmlyc3QgYmVjYXVzZSBoYXZpbmcgXCJpXCJcbiAgICAgICAgLy8gYXMgdGhlIHNlY29uZCBjaGFyYWN0ZXIgd2lsbCBoYXBwZW4gbGVzcyBvZnRlbiB0aGFuXG4gICAgICAgIC8vIGhhdmluZyBcIkBcIiBhcyB0aGUgZmlyc3QgY2hhcmFjdGVyXG4gICAgICAgIHZhciBpc0ltcG9ydFJ1bGUgPSBydWxlLmNoYXJDb2RlQXQoMSkgPT09IDEwNSAmJiBydWxlLmNoYXJDb2RlQXQoMCkgPT09IDY0OyAvLyB0aGlzIGlzIHRoZSB1bHRyYWZhc3QgdmVyc2lvbiwgd29ya3MgYWNyb3NzIGJyb3dzZXJzXG4gICAgICAgIC8vIHRoZSBiaWcgZHJhd2JhY2sgaXMgdGhhdCB0aGUgY3NzIHdvbid0IGJlIGVkaXRhYmxlIGluIGRldnRvb2xzXG5cbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCAvLyB3ZSBuZWVkIHRvIGluc2VydCBAaW1wb3J0IHJ1bGVzIGJlZm9yZSBhbnl0aGluZyBlbHNlXG4gICAgICAgIC8vIG90aGVyd2lzZSB0aGVyZSB3aWxsIGJlIGFuIGVycm9yXG4gICAgICAgIC8vIHRlY2huaWNhbGx5IHRoaXMgbWVhbnMgdGhhdCB0aGUgQGltcG9ydCBydWxlcyB3aWxsXG4gICAgICAgIC8vIF91c3VhbGx5Xyhub3QgYWx3YXlzIHNpbmNlIHRoZXJlIGNvdWxkIGJlIG11bHRpcGxlIHN0eWxlIHRhZ3MpXG4gICAgICAgIC8vIGJlIHRoZSBmaXJzdCBvbmVzIGluIHByb2QgYW5kIGdlbmVyYWxseSBsYXRlciBpbiBkZXZcbiAgICAgICAgLy8gdGhpcyBzaG91bGRuJ3QgcmVhbGx5IG1hdHRlciBpbiB0aGUgcmVhbCB3b3JsZCB0aG91Z2hcbiAgICAgICAgLy8gQGltcG9ydCBpcyBnZW5lcmFsbHkgb25seSB1c2VkIGZvciBmb250IGZhY2VzIGZyb20gZ29vZ2xlIGZvbnRzIGFuZCBldGMuXG4gICAgICAgIC8vIHNvIHdoaWxlIHRoaXMgY291bGQgYmUgdGVjaG5pY2FsbHkgY29ycmVjdCB0aGVuIGl0IHdvdWxkIGJlIHNsb3dlciBhbmQgbGFyZ2VyXG4gICAgICAgIC8vIGZvciBhIHRpbnkgYml0IG9mIGNvcnJlY3RuZXNzIHRoYXQgd29uJ3QgbWF0dGVyIGluIHRoZSByZWFsIHdvcmxkXG4gICAgICAgIGlzSW1wb3J0UnVsZSA/IDAgOiBzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoZXJlIHdhcyBhIHByb2JsZW0gaW5zZXJ0aW5nIHRoZSBmb2xsb3dpbmcgcnVsZTogXFxcIlwiICsgcnVsZSArIFwiXFxcIlwiLCBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZSkpO1xuICAgIH1cblxuICAgIHRoaXMuY3RyKys7XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHRoaXMudGFncy5mb3JFYWNoKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YWcpO1xuICAgIH0pO1xuICAgIHRoaXMudGFncyA9IFtdO1xuICAgIHRoaXMuY3RyID0gMDtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxuZXhwb3J0IHsgU3R5bGVTaGVldCB9O1xuIiwiZnVuY3Rpb24gc3R5bGlzX21pbiAoVykge1xuICBmdW5jdGlvbiBNKGQsIGMsIGUsIGgsIGEpIHtcbiAgICBmb3IgKHZhciBtID0gMCwgYiA9IDAsIHYgPSAwLCBuID0gMCwgcSwgZywgeCA9IDAsIEsgPSAwLCBrLCB1ID0gayA9IHEgPSAwLCBsID0gMCwgciA9IDAsIEkgPSAwLCB0ID0gMCwgQiA9IGUubGVuZ3RoLCBKID0gQiAtIDEsIHksIGYgPSAnJywgcCA9ICcnLCBGID0gJycsIEcgPSAnJywgQzsgbCA8IEI7KSB7XG4gICAgICBnID0gZS5jaGFyQ29kZUF0KGwpO1xuICAgICAgbCA9PT0gSiAmJiAwICE9PSBiICsgbiArIHYgKyBtICYmICgwICE9PSBiICYmIChnID0gNDcgPT09IGIgPyAxMCA6IDQ3KSwgbiA9IHYgPSBtID0gMCwgQisrLCBKKyspO1xuXG4gICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICBpZiAobCA9PT0gSiAmJiAoMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKSwgMCA8IGYudHJpbSgpLmxlbmd0aCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBmICs9IGUuY2hhckF0KGwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGcgPSA1OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgZiA9IGYudHJpbSgpO1xuICAgICAgICAgICAgcSA9IGYuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIGsgPSAxO1xuXG4gICAgICAgICAgICBmb3IgKHQgPSArK2w7IGwgPCBCOykge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgICAgICAgICBrLS07XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGcgPSBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh1ID0gbCArIDE7IHUgPCBKOyArK3UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNoYXJDb2RlQXQodSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQyID09PSBnICYmIDQyID09PSBlLmNoYXJDb2RlQXQodSAtIDEpICYmIGwgKyAyICE9PSB1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDQ3ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB1O1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAgICAgZm9yICg7IGwrKyA8IEogJiYgZS5jaGFyQ29kZUF0KGwpICE9PSBnOykge1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoMCA9PT0gaykgYnJlYWs7XG4gICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgayA9IGUuc3Vic3RyaW5nKHQsIGwpO1xuICAgICAgICAgICAgMCA9PT0gcSAmJiAocSA9IChmID0gZi5yZXBsYWNlKGNhLCAnJykudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgICAgICAgICAgc3dpdGNoIChxKSB7XG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgMCA8IHIgJiYgKGYgPSBmLnJlcGxhY2UoTiwgJycpKTtcbiAgICAgICAgICAgICAgICBnID0gZi5jaGFyQ29kZUF0KDEpO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICByID0gYztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBPO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIHIsIGssIGcsIGEgKyAxKTtcbiAgICAgICAgICAgICAgICB0ID0gay5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMCA8IEEgJiYgKHIgPSBYKE8sIGYsIEkpLCBDID0gSCgzLCBrLCByLCBjLCBELCB6LCB0LCBnLCBhLCBoKSwgZiA9IHIuam9pbignJyksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAodCA9IChrID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGcgPSAwLCBrID0gJycpKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8IHQpIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZGEsIGVhKTtcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA3OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGZhLCAnJDEgJDInKTtcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBrID0gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoJ0AnICsgaywgMykgPyAnQC13ZWJraXQtJyArIGsgKyAnQCcgKyBrIDogJ0AnICsgaztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgaywgMTEyID09PSBoICYmIChrID0gKHAgKz0gaywgJycpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgayA9ICcnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgayA9IE0oYywgWChjLCBmLCBJKSwgaywgaCwgYSArIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBGICs9IGs7XG4gICAgICAgICAgICBrID0gSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBmID0gKDAgPCByID8gZi5yZXBsYWNlKE4sICcnKSA6IGYpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICgxIDwgKHQgPSBmLmxlbmd0aCkpIHN3aXRjaCAoMCA9PT0gdSAmJiAocSA9IGYuY2hhckNvZGVBdCgwKSwgNDUgPT09IHEgfHwgOTYgPCBxICYmIDEyMyA+IHEpICYmICh0ID0gKGYgPSBmLnJlcGxhY2UoJyAnLCAnOicpKS5sZW5ndGgpLCAwIDwgQSAmJiB2b2lkIDAgIT09IChDID0gSCgxLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCkpICYmIDAgPT09ICh0ID0gKGYgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZiA9ICdcXHgwMFxceDAwJyksIHEgPSBmLmNoYXJDb2RlQXQoMCksIGcgPSBmLmNoYXJDb2RlQXQoMSksIHEpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgICAgaWYgKDEwNSA9PT0gZyB8fCA5OSA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgRyArPSBmICsgZS5jaGFyQXQobCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICA1OCAhPT0gZi5jaGFyQ29kZUF0KHQgLSAxKSAmJiAocCArPSBQKGYsIHEsIGcsIGYuY2hhckNvZGVBdCgyKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSSA9IHIgPSB1ID0gcSA9IDA7XG4gICAgICAgICAgICBmID0gJyc7XG4gICAgICAgICAgICBnID0gZS5jaGFyQ29kZUF0KCsrbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgIGNhc2UgMTM6XG4gICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgNDcgPT09IGIgPyBiID0gMCA6IDAgPT09IDEgKyBxICYmIDEwNyAhPT0gaCAmJiAwIDwgZi5sZW5ndGggJiYgKHIgPSAxLCBmICs9ICdcXHgwMCcpO1xuICAgICAgICAgIDAgPCBBICogWSAmJiBIKDAsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKTtcbiAgICAgICAgICB6ID0gMTtcbiAgICAgICAgICBEKys7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgICAgIHorKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHorKztcbiAgICAgICAgICB5ID0gZS5jaGFyQXQobCk7XG5cbiAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgbSArIGIpIHN3aXRjaCAoeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgICAgIHkgPSAnJztcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIDMyICE9PSBnICYmICh5ID0gJyAnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFwwJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXGYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcdic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHIgPSBJID0gMSwgeSA9ICdcXGYnICsgeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEwODpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSArIEUgJiYgMCA8IHUpIHN3aXRjaCAobCAtIHUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAxMTIgPT09IHggJiYgNTggPT09IGUuY2hhckNvZGVBdChsIC0gMykgJiYgKEUgPSB4KTtcblxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgIDExMSA9PT0gSyAmJiAoRSA9IEspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgKHUgPSBsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gJiYgKHIgPSAxLCB5ICs9ICdcXHInKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBjYXNlIDM5OlxuICAgICAgICAgICAgICAwID09PSBiICYmIChuID0gbiA9PT0gZyA/IDAgOiAwID09PSBuID8gZyA6IG4pO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0rKztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTM6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtLS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIG0gJiYgdi0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBiICsgbSkge1xuICAgICAgICAgICAgICAgIGlmICgwID09PSBxKSBzd2l0Y2ggKDIgKiB4ICsgMyAqIEspIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgNTMzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHYrKztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICsgdSArIGsgJiYgKGsgPSAxKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICBpZiAoISgwIDwgbiArIG0gKyB2KSkgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3dpdGNoICgyICogZyArIDMgKiBlLmNoYXJDb2RlQXQobCArIDEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjM1OlxuICAgICAgICAgICAgICAgICAgICAgIGIgPSA0NztcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgICAgICAgICAgICB0ID0gbCwgYiA9IDQyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDI6XG4gICAgICAgICAgICAgICAgICA0NyA9PT0gZyAmJiA0MiA9PT0geCAmJiB0ICsgMiAhPT0gbCAmJiAoMzMgPT09IGUuY2hhckNvZGVBdCh0ICsgMikgJiYgKHAgKz0gZS5zdWJzdHJpbmcodCwgbCArIDEpKSwgeSA9ICcnLCBiID0gMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAwID09PSBiICYmIChmICs9IHkpO1xuICAgICAgfVxuXG4gICAgICBLID0geDtcbiAgICAgIHggPSBnO1xuICAgICAgbCsrO1xuICAgIH1cblxuICAgIHQgPSBwLmxlbmd0aDtcblxuICAgIGlmICgwIDwgdCkge1xuICAgICAgciA9IGM7XG4gICAgICBpZiAoMCA8IEEgJiYgKEMgPSBIKDIsIHAsIHIsIGQsIEQsIHosIHQsIGgsIGEsIGgpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHAgPSBDKS5sZW5ndGgpKSByZXR1cm4gRyArIHAgKyBGO1xuICAgICAgcCA9IHIuam9pbignLCcpICsgJ3snICsgcCArICd9JztcblxuICAgICAgaWYgKDAgIT09IHcgKiBFKSB7XG4gICAgICAgIDIgIT09IHcgfHwgTChwLCAyKSB8fCAoRSA9IDApO1xuXG4gICAgICAgIHN3aXRjaCAoRSkge1xuICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShoYSwgJzotbW96LSQxJykgKyBwO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoUSwgJzo6LXdlYmtpdC1pbnB1dC0kMScpICsgcC5yZXBsYWNlKFEsICc6Oi1tb3otJDEnKSArIHAucmVwbGFjZShRLCAnOi1tcy1pbnB1dC0kMScpICsgcDtcbiAgICAgICAgfVxuXG4gICAgICAgIEUgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBHICsgcCArIEY7XG4gIH1cblxuICBmdW5jdGlvbiBYKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMudHJpbSgpLnNwbGl0KGlhKTtcbiAgICBjID0gaDtcbiAgICB2YXIgYSA9IGgubGVuZ3RoLFxuICAgICAgICBtID0gZC5sZW5ndGg7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgdmFyIGIgPSAwO1xuXG4gICAgICAgIGZvciAoZCA9IDAgPT09IG0gPyAnJyA6IGRbMF0gKyAnICc7IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBjW2JdID0gWihkLCBjW2JdLCBlKS50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdmFyIHYgPSBiID0gMDtcblxuICAgICAgICBmb3IgKGMgPSBbXTsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgbTsgKytuKSB7XG4gICAgICAgICAgICBjW3YrK10gPSBaKGRbbl0gKyAnICcsIGhbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJldHVybiBjO1xuICB9XG5cbiAgZnVuY3Rpb24gWihkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgMzMgPiBoICYmIChoID0gKGMgPSBjLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICBzd2l0Y2ggKGgpIHtcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIHJldHVybiBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgcmV0dXJuIGQudHJpbSgpICsgYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgwIDwgMSAqIGUgJiYgMCA8IGMuaW5kZXhPZignXFxmJykpIHJldHVybiBjLnJlcGxhY2UoRiwgKDU4ID09PSBkLmNoYXJDb2RlQXQoMCkgPyAnJyA6ICckMScpICsgZC50cmltKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkICsgYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFAoZCwgYywgZSwgaCkge1xuICAgIHZhciBhID0gZCArICc7JyxcbiAgICAgICAgbSA9IDIgKiBjICsgMyAqIGUgKyA0ICogaDtcblxuICAgIGlmICg5NDQgPT09IG0pIHtcbiAgICAgIGQgPSBhLmluZGV4T2YoJzonLCA5KSArIDE7XG4gICAgICB2YXIgYiA9IGEuc3Vic3RyaW5nKGQsIGEubGVuZ3RoIC0gMSkudHJpbSgpO1xuICAgICAgYiA9IGEuc3Vic3RyaW5nKDAsIGQpLnRyaW0oKSArIGIgKyAnOyc7XG4gICAgICByZXR1cm4gMSA9PT0gdyB8fCAyID09PSB3ICYmIEwoYiwgMSkgPyAnLXdlYmtpdC0nICsgYiArIGIgOiBiO1xuICAgIH1cblxuICAgIGlmICgwID09PSB3IHx8IDIgPT09IHcgJiYgIUwoYSwgMSkpIHJldHVybiBhO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDEwMTU6XG4gICAgICAgIHJldHVybiA5NyA9PT0gYS5jaGFyQ29kZUF0KDEwKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTUxOlxuICAgICAgICByZXR1cm4gMTE2ID09PSBhLmNoYXJDb2RlQXQoMykgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk2MzpcbiAgICAgICAgcmV0dXJuIDExMCA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSAxMDA5OlxuICAgICAgICBpZiAoMTAwICE9PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2OTpcbiAgICAgIGNhc2UgOTQyOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk3ODpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMTk6XG4gICAgICBjYXNlIDk4MzpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tb3otJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA4ODM6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDgpKSByZXR1cm4gJy13ZWJraXQtJyArIGEgKyBhO1xuICAgICAgICBpZiAoMCA8IGEuaW5kZXhPZignaW1hZ2Utc2V0KCcsIDExKSkgcmV0dXJuIGEucmVwbGFjZShqYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMyOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg0KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNSkpIHtcbiAgICAgICAgICBjYXNlIDEwMzpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtJyArIGEucmVwbGFjZSgnLWdyb3cnLCAnJykgKyAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnZ3JvdycsICdwb3NpdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdzaHJpbmsnLCAnbmVnYXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdiYXNpcycsICdwcmVmZXJyZWQtc2l6ZScpICsgYTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5NjQ6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAyMzpcbiAgICAgICAgaWYgKDk5ICE9PSBhLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuICAgICAgICBiID0gYS5zdWJzdHJpbmcoYS5pbmRleE9mKCc6JywgMTUpKS5yZXBsYWNlKCdmbGV4LScsICcnKS5yZXBsYWNlKCdzcGFjZS1iZXR3ZWVuJywgJ2p1c3RpZnknKTtcbiAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC1wYWNrJyArIGIgKyAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1wYWNrJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMDU6XG4gICAgICAgIHJldHVybiBrYS50ZXN0KGEpID8gYS5yZXBsYWNlKGFhLCAnOi13ZWJraXQtJykgKyBhLnJlcGxhY2UoYWEsICc6LW1vei0nKSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDFlMzpcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKDEzKS50cmltKCk7XG4gICAgICAgIGMgPSBiLmluZGV4T2YoJy0nKSArIDE7XG5cbiAgICAgICAgc3dpdGNoIChiLmNoYXJDb2RlQXQoMCkgKyBiLmNoYXJDb2RlQXQoYykpIHtcbiAgICAgICAgICBjYXNlIDIyNjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjMyOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGItcmwnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICdscicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDE3OlxuICAgICAgICBpZiAoLTEgPT09IGEuaW5kZXhPZignc3RpY2t5JywgOSkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3NTpcbiAgICAgICAgYyA9IChhID0gZCkubGVuZ3RoIC0gMTA7XG4gICAgICAgIGIgPSAoMzMgPT09IGEuY2hhckNvZGVBdChjKSA/IGEuc3Vic3RyaW5nKDAsIGMpIDogYSkuc3Vic3RyaW5nKGQuaW5kZXhPZignOicsIDcpICsgMSkudHJpbSgpO1xuXG4gICAgICAgIHN3aXRjaCAobSA9IGIuY2hhckNvZGVBdCgwKSArIChiLmNoYXJDb2RlQXQoNykgfCAwKSkge1xuICAgICAgICAgIGNhc2UgMjAzOlxuICAgICAgICAgICAgaWYgKDExMSA+IGIuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMDc6XG4gICAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyAoMTAyIDwgbSA/ICdpbmxpbmUtJyA6ICcnKSArICdib3gnKSArICc7JyArIGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy1tcy0nICsgYiArICdib3gnKSArICc7JyArIGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSArICc7JztcblxuICAgICAgY2FzZSA5Mzg6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDUpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg2KSkge1xuICAgICAgICAgIGNhc2UgMTA1OlxuICAgICAgICAgICAgcmV0dXJuIGIgPSBhLnJlcGxhY2UoJy1pdGVtcycsICcnKSwgJy13ZWJraXQtJyArIGEgKyAnLXdlYmtpdC1ib3gtJyArIGIgKyAnLW1zLWZsZXgtJyArIGIgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtaXRlbS0nICsgYS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1saW5lLXBhY2snICsgYS5yZXBsYWNlKCdhbGlnbi1jb250ZW50JywgJycpLnJlcGxhY2UoYmEsICcnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTczOlxuICAgICAgY2FzZSA5ODk6XG4gICAgICAgIGlmICg0NSAhPT0gYS5jaGFyQ29kZUF0KDMpIHx8IDEyMiA9PT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5MzE6XG4gICAgICBjYXNlIDk1MzpcbiAgICAgICAgaWYgKCEwID09PSBsYS50ZXN0KGQpKSByZXR1cm4gMTE1ID09PSAoYiA9IGQuc3Vic3RyaW5nKGQuaW5kZXhPZignOicpICsgMSkpLmNoYXJDb2RlQXQoMCkgPyBQKGQucmVwbGFjZSgnc3RyZXRjaCcsICdmaWxsLWF2YWlsYWJsZScpLCBjLCBlLCBoKS5yZXBsYWNlKCc6ZmlsbC1hdmFpbGFibGUnLCAnOnN0cmV0Y2gnKSA6IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyBhLnJlcGxhY2UoYiwgJy1tb3otJyArIGIucmVwbGFjZSgnZmlsbC0nLCAnJykpICsgYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTYyOlxuICAgICAgICBpZiAoYSA9ICctd2Via2l0LScgKyBhICsgKDEwMiA9PT0gYS5jaGFyQ29kZUF0KDUpID8gJy1tcy0nICsgYSA6ICcnKSArIGEsIDIxMSA9PT0gZSArIGggJiYgMTA1ID09PSBhLmNoYXJDb2RlQXQoMTMpICYmIDAgPCBhLmluZGV4T2YoJ3RyYW5zZm9ybScsIDEwKSkgcmV0dXJuIGEuc3Vic3RyaW5nKDAsIGEuaW5kZXhPZignOycsIDI3KSArIDEpLnJlcGxhY2UobWEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICBmdW5jdGlvbiBMKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQuaW5kZXhPZigxID09PSBjID8gJzonIDogJ3snKSxcbiAgICAgICAgaCA9IGQuc3Vic3RyaW5nKDAsIDMgIT09IGMgPyBlIDogMTApO1xuICAgIGUgPSBkLnN1YnN0cmluZyhlICsgMSwgZC5sZW5ndGggLSAxKTtcbiAgICByZXR1cm4gUigyICE9PSBjID8gaCA6IGgucmVwbGFjZShuYSwgJyQxJyksIGUsIGMpO1xuICB9XG5cbiAgZnVuY3Rpb24gZWEoZCwgYykge1xuICAgIHZhciBlID0gUChjLCBjLmNoYXJDb2RlQXQoMCksIGMuY2hhckNvZGVBdCgxKSwgYy5jaGFyQ29kZUF0KDIpKTtcbiAgICByZXR1cm4gZSAhPT0gYyArICc7JyA/IGUucmVwbGFjZShvYSwgJyBvciAoJDEpJykuc3Vic3RyaW5nKDQpIDogJygnICsgYyArICcpJztcbiAgfVxuXG4gIGZ1bmN0aW9uIEgoZCwgYywgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkge1xuICAgIGZvciAodmFyIGcgPSAwLCB4ID0gYywgdzsgZyA8IEE7ICsrZykge1xuICAgICAgc3dpdGNoICh3ID0gU1tnXS5jYWxsKEIsIGQsIHgsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpKSB7XG4gICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICBjYXNlICExOlxuICAgICAgICBjYXNlICEwOlxuICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB4ID0gdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeCAhPT0gYykgcmV0dXJuIHg7XG4gIH1cblxuICBmdW5jdGlvbiBUKGQpIHtcbiAgICBzd2l0Y2ggKGQpIHtcbiAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBBID0gUy5sZW5ndGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkKSBTW0ErK10gPSBkO2Vsc2UgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgZCkgZm9yICh2YXIgYyA9IDAsIGUgPSBkLmxlbmd0aDsgYyA8IGU7ICsrYykge1xuICAgICAgICAgIFQoZFtjXSk7XG4gICAgICAgIH0gZWxzZSBZID0gISFkIHwgMDtcbiAgICB9XG5cbiAgICByZXR1cm4gVDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFUoZCkge1xuICAgIGQgPSBkLnByZWZpeDtcbiAgICB2b2lkIDAgIT09IGQgJiYgKFIgPSBudWxsLCBkID8gJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIGQgPyB3ID0gMSA6ICh3ID0gMiwgUiA9IGQpIDogdyA9IDApO1xuICAgIHJldHVybiBVO1xuICB9XG5cbiAgZnVuY3Rpb24gQihkLCBjKSB7XG4gICAgdmFyIGUgPSBkO1xuICAgIDMzID4gZS5jaGFyQ29kZUF0KDApICYmIChlID0gZS50cmltKCkpO1xuICAgIFYgPSBlO1xuICAgIGUgPSBbVl07XG5cbiAgICBpZiAoMCA8IEEpIHtcbiAgICAgIHZhciBoID0gSCgtMSwgYywgZSwgZSwgRCwgeiwgMCwgMCwgMCwgMCk7XG4gICAgICB2b2lkIDAgIT09IGggJiYgJ3N0cmluZycgPT09IHR5cGVvZiBoICYmIChjID0gaCk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBNKE8sIGUsIGMsIDAsIDApO1xuICAgIDAgPCBBICYmIChoID0gSCgtMiwgYSwgZSwgZSwgRCwgeiwgYS5sZW5ndGgsIDAsIDAsIDApLCB2b2lkIDAgIT09IGggJiYgKGEgPSBoKSk7XG4gICAgViA9ICcnO1xuICAgIEUgPSAwO1xuICAgIHogPSBEID0gMTtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBjYSA9IC9eXFwwKy9nLFxuICAgICAgTiA9IC9bXFwwXFxyXFxmXS9nLFxuICAgICAgYWEgPSAvOiAqL2csXG4gICAgICBrYSA9IC96b298Z3JhLyxcbiAgICAgIG1hID0gLyhbLDogXSkodHJhbnNmb3JtKS9nLFxuICAgICAgaWEgPSAvLFxccis/L2csXG4gICAgICBGID0gLyhbXFx0XFxyXFxuIF0pKlxcZj8mL2csXG4gICAgICBmYSA9IC9AKGtcXHcrKVxccyooXFxTKilcXHMqLyxcbiAgICAgIFEgPSAvOjoocGxhY2UpL2csXG4gICAgICBoYSA9IC86KHJlYWQtb25seSkvZyxcbiAgICAgIEcgPSAvW3N2aF1cXHcrLVt0YmxyXXsyfS8sXG4gICAgICBkYSA9IC9cXChcXHMqKC4qKVxccypcXCkvZyxcbiAgICAgIG9hID0gLyhbXFxzXFxTXSo/KTsvZyxcbiAgICAgIGJhID0gLy1zZWxmfGZsZXgtL2csXG4gICAgICBuYSA9IC9bXl0qPyg6W3JwXVtlbF1hW1xcdy1dKylbXl0qLyxcbiAgICAgIGxhID0gL3N0cmV0Y2h8OlxccypcXHcrXFwtKD86Y29udGV8YXZhaWwpLyxcbiAgICAgIGphID0gLyhbXi1dKShpbWFnZS1zZXRcXCgpLyxcbiAgICAgIHogPSAxLFxuICAgICAgRCA9IDEsXG4gICAgICBFID0gMCxcbiAgICAgIHcgPSAxLFxuICAgICAgTyA9IFtdLFxuICAgICAgUyA9IFtdLFxuICAgICAgQSA9IDAsXG4gICAgICBSID0gbnVsbCxcbiAgICAgIFkgPSAwLFxuICAgICAgViA9ICcnO1xuICBCLnVzZSA9IFQ7XG4gIEIuc2V0ID0gVTtcbiAgdm9pZCAwICE9PSBXICYmIFUoVyk7XG4gIHJldHVybiBCO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsaXNfbWluO1xuIiwidmFyIHdlYWtNZW1vaXplID0gZnVuY3Rpb24gd2Vha01lbW9pemUoZnVuYykge1xuICAvLyAkRmxvd0ZpeE1lIGZsb3cgZG9lc24ndCBpbmNsdWRlIGFsbCBub24tcHJpbWl0aXZlIHR5cGVzIGFzIGFsbG93ZWQgZm9yIHdlYWttYXBzXG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlLmhhcyhhcmcpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGFyZyk7XG4gICAgfVxuXG4gICAgdmFyIHJldCA9IGZ1bmMoYXJnKTtcbiAgICBjYWNoZS5zZXQoYXJnLCByZXQpO1xuICAgIHJldHVybiByZXQ7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3ZWFrTWVtb2l6ZTtcbiIsImltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tICdAZW1vdGlvbi9zaGVldCc7XG5pbXBvcnQgU3R5bGlzIGZyb20gJ0BlbW90aW9uL3N0eWxpcyc7XG5pbXBvcnQgd2Vha01lbW9pemUgZnJvbSAnQGVtb3Rpb24vd2Vhay1tZW1vaXplJztcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RoeXN1bHRhbi9zdHlsaXMuanMvdHJlZS9tYXN0ZXIvcGx1Z2lucy9ydWxlLXNoZWV0XG4vLyBpbmxpbmVkIHRvIGF2b2lkIHVtZCB3cmFwcGVyIGFuZCBwZWVyRGVwIHdhcm5pbmdzL2luc3RhbGxpbmcgc3R5bGlzXG4vLyBzaW5jZSB3ZSB1c2Ugc3R5bGlzIGFmdGVyIGNsb3N1cmUgY29tcGlsZXJcbnZhciBkZWxpbWl0ZXIgPSAnLyp8Ki8nO1xudmFyIG5lZWRsZSA9IGRlbGltaXRlciArICd9JztcblxuZnVuY3Rpb24gdG9TaGVldChibG9jaykge1xuICBpZiAoYmxvY2spIHtcbiAgICBTaGVldC5jdXJyZW50Lmluc2VydChibG9jayArICd9Jyk7XG4gIH1cbn1cblxudmFyIFNoZWV0ID0ge1xuICBjdXJyZW50OiBudWxsXG59O1xudmFyIHJ1bGVTaGVldCA9IGZ1bmN0aW9uIHJ1bGVTaGVldChjb250ZXh0LCBjb250ZW50LCBzZWxlY3RvcnMsIHBhcmVudHMsIGxpbmUsIGNvbHVtbiwgbGVuZ3RoLCBucywgZGVwdGgsIGF0KSB7XG4gIHN3aXRjaCAoY29udGV4dCkge1xuICAgIC8vIHByb3BlcnR5XG4gICAgY2FzZSAxOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKGNvbnRlbnQuY2hhckNvZGVBdCgwKSkge1xuICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIEBpbXBvcnRcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoY29udGVudCArICc7Jyk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjaGFyY29kZSBmb3IgbFxuXG4gICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIGNoYXJjb2RlIGZvciBiXG4gICAgICAgICAgICAgIC8vIHRoaXMgaWdub3JlcyBsYWJlbFxuICAgICAgICAgICAgICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDIpID09PSA5OCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gc2VsZWN0b3JcblxuICAgIGNhc2UgMjpcbiAgICAgIHtcbiAgICAgICAgaWYgKG5zID09PSAwKSByZXR1cm4gY29udGVudCArIGRlbGltaXRlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgLy8gYXQtcnVsZVxuXG4gICAgY2FzZSAzOlxuICAgICAge1xuICAgICAgICBzd2l0Y2ggKG5zKSB7XG4gICAgICAgICAgLy8gQGZvbnQtZmFjZSwgQHBhZ2VcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgU2hlZXQuY3VycmVudC5pbnNlcnQoc2VsZWN0b3JzWzBdICsgY29udGVudCk7XG4gICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHJldHVybiBjb250ZW50ICsgKGF0ID09PSAwID8gZGVsaW1pdGVyIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBjYXNlIC0yOlxuICAgICAge1xuICAgICAgICBjb250ZW50LnNwbGl0KG5lZWRsZSkuZm9yRWFjaCh0b1NoZWV0KTtcbiAgICAgIH1cbiAgfVxufTtcbnZhciByZW1vdmVMYWJlbCA9IGZ1bmN0aW9uIHJlbW92ZUxhYmVsKGNvbnRleHQsIGNvbnRlbnQpIHtcbiAgaWYgKGNvbnRleHQgPT09IDEgJiYgLy8gY2hhcmNvZGUgZm9yIGxcbiAgY29udGVudC5jaGFyQ29kZUF0KDApID09PSAxMDggJiYgLy8gY2hhcmNvZGUgZm9yIGJcbiAgY29udGVudC5jaGFyQ29kZUF0KDIpID09PSA5OCAvLyB0aGlzIGlnbm9yZXMgbGFiZWxcbiAgKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxufTtcblxudmFyIGlzQnJvd3NlciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgcm9vdFNlcnZlclN0eWxpc0NhY2hlID0ge307XG52YXIgZ2V0U2VydmVyU3R5bGlzQ2FjaGUgPSBpc0Jyb3dzZXIgPyB1bmRlZmluZWQgOiB3ZWFrTWVtb2l6ZShmdW5jdGlvbiAoKSB7XG4gIHZhciBnZXRDYWNoZSA9IHdlYWtNZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge307XG4gIH0pO1xuICB2YXIgcHJlZml4VHJ1ZUNhY2hlID0ge307XG4gIHZhciBwcmVmaXhGYWxzZUNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkIHx8IHByZWZpeCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHByZWZpeFRydWVDYWNoZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4ID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHByZWZpeEZhbHNlQ2FjaGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldENhY2hlKHByZWZpeCk7XG4gIH07XG59KTtcblxudmFyIGNyZWF0ZUNhY2hlID0gZnVuY3Rpb24gY3JlYXRlQ2FjaGUob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKSBvcHRpb25zID0ge307XG4gIHZhciBrZXkgPSBvcHRpb25zLmtleSB8fCAnY3NzJztcbiAgdmFyIHN0eWxpc09wdGlvbnM7XG5cbiAgaWYgKG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdHlsaXNPcHRpb25zID0ge1xuICAgICAgcHJlZml4OiBvcHRpb25zLnByZWZpeFxuICAgIH07XG4gIH1cblxuICB2YXIgc3R5bGlzID0gbmV3IFN0eWxpcyhzdHlsaXNPcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBpZiAoL1teYS16LV0vLnRlc3Qoa2V5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1vdGlvbiBrZXkgbXVzdCBvbmx5IGNvbnRhaW4gbG93ZXIgY2FzZSBhbHBoYWJldGljYWwgY2hhcmFjdGVycyBhbmQgLSBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwYXNzZWRcIik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGluc2VydGVkID0ge307IC8vICRGbG93Rml4TWVcblxuICB2YXIgY29udGFpbmVyO1xuXG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBjb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lciB8fCBkb2N1bWVudC5oZWFkO1xuICAgIHZhciBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzdHlsZVtkYXRhLWVtb3Rpb24tXCIgKyBrZXkgKyBcIl1cIik7XG4gICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChub2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHZhciBhdHRyaWIgPSBub2RlLmdldEF0dHJpYnV0ZShcImRhdGEtZW1vdGlvbi1cIiArIGtleSk7IC8vICRGbG93Rml4TWVcblxuICAgICAgYXR0cmliLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgaW5zZXJ0ZWRbaWRdID0gdHJ1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9pbnNlcnQ7XG5cbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKShydWxlU2hlZXQpO1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIGluc2VydChzZWxlY3Rvciwgc2VyaWFsaXplZCwgc2hlZXQsIHNob3VsZENhY2hlKSB7XG4gICAgICB2YXIgbmFtZSA9IHNlcmlhbGl6ZWQubmFtZTtcbiAgICAgIFNoZWV0LmN1cnJlbnQgPSBzaGVldDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgc2VyaWFsaXplZC5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgbWFwID0gc2VyaWFsaXplZC5tYXA7XG4gICAgICAgIFNoZWV0LmN1cnJlbnQgPSB7XG4gICAgICAgICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgICAgICAgICAgc2hlZXQuaW5zZXJ0KHJ1bGUgKyBtYXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgc3R5bGlzKHNlbGVjdG9yLCBzZXJpYWxpemVkLnN0eWxlcyk7XG5cbiAgICAgIGlmIChzaG91bGRDYWNoZSkge1xuICAgICAgICBjYWNoZS5pbnNlcnRlZFtuYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsaXMudXNlKHJlbW92ZUxhYmVsKTtcbiAgICB2YXIgc2VydmVyU3R5bGlzQ2FjaGUgPSByb290U2VydmVyU3R5bGlzQ2FjaGU7XG5cbiAgICBpZiAob3B0aW9ucy5zdHlsaXNQbHVnaW5zIHx8IG9wdGlvbnMucHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxpcy51c2Uob3B0aW9ucy5zdHlsaXNQbHVnaW5zKTsgLy8gJEZsb3dGaXhNZVxuXG4gICAgICBzZXJ2ZXJTdHlsaXNDYWNoZSA9IGdldFNlcnZlclN0eWxpc0NhY2hlKG9wdGlvbnMuc3R5bGlzUGx1Z2lucyB8fCByb290U2VydmVyU3R5bGlzQ2FjaGUpKG9wdGlvbnMucHJlZml4KTtcbiAgICB9XG5cbiAgICB2YXIgZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcyhzZWxlY3Rvciwgc2VyaWFsaXplZCkge1xuICAgICAgdmFyIG5hbWUgPSBzZXJpYWxpemVkLm5hbWU7XG5cbiAgICAgIGlmIChzZXJ2ZXJTdHlsaXNDYWNoZVtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNlcnZlclN0eWxpc0NhY2hlW25hbWVdID0gc3R5bGlzKHNlbGVjdG9yLCBzZXJpYWxpemVkLnN0eWxlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXJ2ZXJTdHlsaXNDYWNoZVtuYW1lXTtcbiAgICB9O1xuXG4gICAgX2luc2VydCA9IGZ1bmN0aW9uIF9pbnNlcnQoc2VsZWN0b3IsIHNlcmlhbGl6ZWQsIHNoZWV0LCBzaG91bGRDYWNoZSkge1xuICAgICAgdmFyIG5hbWUgPSBzZXJpYWxpemVkLm5hbWU7XG4gICAgICB2YXIgcnVsZXMgPSBnZXRSdWxlcyhzZWxlY3Rvciwgc2VyaWFsaXplZCk7XG5cbiAgICAgIGlmIChjYWNoZS5jb21wYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBpbiByZWd1bGFyIG1vZGUsIHdlIGRvbid0IHNldCB0aGUgc3R5bGVzIG9uIHRoZSBpbnNlcnRlZCBjYWNoZVxuICAgICAgICAvLyBzaW5jZSB3ZSBkb24ndCBuZWVkIHRvIGFuZCB0aGF0IHdvdWxkIGJlIHdhc3RpbmcgbWVtb3J5XG4gICAgICAgIC8vIHdlIHJldHVybiB0aGVtIHNvIHRoYXQgdGhleSBhcmUgcmVuZGVyZWQgaW4gYSBzdHlsZSB0YWdcbiAgICAgICAgaWYgKHNob3VsZENhY2hlKSB7XG4gICAgICAgICAgY2FjaGUuaW5zZXJ0ZWRbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCAvLyB1c2luZyA9PT0gZGV2ZWxvcG1lbnQgaW5zdGVhZCBvZiAhPT0gcHJvZHVjdGlvblxuICAgICAgICAvLyBiZWNhdXNlIGlmIHBlb3BsZSBkbyBzc3IgaW4gdGVzdHMsIHRoZSBzb3VyY2UgbWFwcyBzaG93aW5nIHVwIHdvdWxkIGJlIGFubm95aW5nXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnICYmIHNlcmlhbGl6ZWQubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gcnVsZXMgKyBzZXJpYWxpemVkLm1hcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGluIGNvbXBhdCBtb2RlLCB3ZSBwdXQgdGhlIHN0eWxlcyBvbiB0aGUgaW5zZXJ0ZWQgY2FjaGUgc29cbiAgICAgICAgLy8gdGhhdCBlbW90aW9uLXNlcnZlciBjYW4gcHVsbCBvdXQgdGhlIHN0eWxlc1xuICAgICAgICAvLyBleGNlcHQgd2hlbiB3ZSBkb24ndCB3YW50IHRvIGNhY2hlIGl0IHdoaWNoIHdhcyBpbiBHbG9iYWwgYnV0IG5vd1xuICAgICAgICAvLyBpcyBub3doZXJlIGJ1dCB3ZSBkb24ndCB3YW50IHRvIGRvIGEgbWFqb3IgcmlnaHQgbm93XG4gICAgICAgIC8vIGFuZCBqdXN0IGluIGNhc2Ugd2UncmUgZ29pbmcgdG8gbGVhdmUgdGhlIGNhc2UgaGVyZVxuICAgICAgICAvLyBpdCdzIGFsc28gbm90IGFmZmVjdGluZyBjbGllbnQgc2lkZSBidW5kbGUgc2l6ZVxuICAgICAgICAvLyBzbyBpdCdzIHJlYWxseSBub3QgYSBiaWcgZGVhbFxuICAgICAgICBpZiAoc2hvdWxkQ2FjaGUpIHtcbiAgICAgICAgICBjYWNoZS5pbnNlcnRlZFtuYW1lXSA9IHJ1bGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBydWxlcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmNzM3MWE0Y2Q3ZTYwMDllZjYxZDBhXG4gICAgdmFyIGNvbW1lbnRTdGFydCA9IC9cXC9cXCovZztcbiAgICB2YXIgY29tbWVudEVuZCA9IC9cXCpcXC8vZztcbiAgICBzdHlsaXMudXNlKGZ1bmN0aW9uIChjb250ZXh0LCBjb250ZW50KSB7XG4gICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB3aGlsZSAoY29tbWVudFN0YXJ0LnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgY29tbWVudEVuZC5sYXN0SW5kZXggPSBjb21tZW50U3RhcnQubGFzdEluZGV4O1xuXG4gICAgICAgICAgICAgIGlmIChjb21tZW50RW5kLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50U3RhcnQubGFzdEluZGV4ID0gY29tbWVudEVuZC5sYXN0SW5kZXg7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdXIgc3R5bGVzIGhhdmUgYW4gdW50ZXJtaW5hdGVkIGNvbW1lbnQgKFwiLypcIiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgXCIqL1wiKS4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tbWVudFN0YXJ0Lmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3R5bGlzLnVzZShmdW5jdGlvbiAoY29udGV4dCwgY29udGVudCwgc2VsZWN0b3JzKSB7XG4gICAgICBzd2l0Y2ggKGNvbnRleHQpIHtcbiAgICAgICAgY2FzZSAtMTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZmxhZyA9ICdlbW90aW9uLWRpc2FibGUtc2VydmVyLXJlbmRlcmluZy11bnNhZmUtc2VsZWN0b3Itd2FybmluZy1wbGVhc2UtZG8tbm90LXVzZS10aGlzLXRoZS13YXJuaW5nLWV4aXN0cy1mb3ItYS1yZWFzb24nO1xuICAgICAgICAgICAgdmFyIHVuc2FmZVBzZXVkb0NsYXNzZXMgPSBjb250ZW50Lm1hdGNoKC8oOmZpcnN0fDpudGh8Om50aC1sYXN0KS1jaGlsZC9nKTtcblxuICAgICAgICAgICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzZXMgJiYgY2FjaGUuY29tcGF0ICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgIHVuc2FmZVBzZXVkb0NsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAodW5zYWZlUHNldWRvQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWdub3JlUmVnRXhwID0gbmV3IFJlZ0V4cCh1bnNhZmVQc2V1ZG9DbGFzcyArIFwiLipcXFxcL1xcXFwqIFwiICsgZmxhZyArIFwiIFxcXFwqXFxcXC9cIik7XG4gICAgICAgICAgICAgICAgdmFyIGlnbm9yZSA9IGlnbm9yZVJlZ0V4cC50ZXN0KGNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHVuc2FmZVBzZXVkb0NsYXNzICYmICFpZ25vcmUpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUaGUgcHNldWRvIGNsYXNzIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzICsgXCJcXFwiIGlzIHBvdGVudGlhbGx5IHVuc2FmZSB3aGVuIGRvaW5nIHNlcnZlci1zaWRlIHJlbmRlcmluZy4gVHJ5IGNoYW5naW5nIGl0IHRvIFxcXCJcIiArIHVuc2FmZVBzZXVkb0NsYXNzLnNwbGl0KCctY2hpbGQnKVswXSArIFwiLW9mLXR5cGVcXFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgY2FjaGUgPSB7XG4gICAga2V5OiBrZXksXG4gICAgc2hlZXQ6IG5ldyBTdHlsZVNoZWV0KHtcbiAgICAgIGtleToga2V5LFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICAgIHNwZWVkeTogb3B0aW9ucy5zcGVlZHlcbiAgICB9KSxcbiAgICBub25jZTogb3B0aW9ucy5ub25jZSxcbiAgICBpbnNlcnRlZDogaW5zZXJ0ZWQsXG4gICAgcmVnaXN0ZXJlZDoge30sXG4gICAgaW5zZXJ0OiBfaW5zZXJ0XG4gIH07XG4gIHJldHVybiBjYWNoZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhY2hlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9nYXJ5Y291cnQvbXVybXVyaGFzaC1qc1xuLy8gUG9ydGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2FhcHBsZWJ5L3NtaGFzaGVyL2Jsb2IvNjFhMDUzMGYyODI3N2YyZTg1MGJmYzM5NjAwY2U2MWQwMmI1MThkZS9zcmMvTXVybXVySGFzaDIuY3BwI0wzNy1MODZcbmZ1bmN0aW9uIG11cm11cjIoc3RyKSB7XG4gIC8vICdtJyBhbmQgJ3InIGFyZSBtaXhpbmcgY29uc3RhbnRzIGdlbmVyYXRlZCBvZmZsaW5lLlxuICAvLyBUaGV5J3JlIG5vdCByZWFsbHkgJ21hZ2ljJywgdGhleSBqdXN0IGhhcHBlbiB0byB3b3JrIHdlbGwuXG4gIC8vIGNvbnN0IG0gPSAweDViZDFlOTk1O1xuICAvLyBjb25zdCByID0gMjQ7XG4gIC8vIEluaXRpYWxpemUgdGhlIGhhc2hcbiAgdmFyIGggPSAwOyAvLyBNaXggNCBieXRlcyBhdCBhIHRpbWUgaW50byB0aGUgaGFzaFxuXG4gIHZhciBrLFxuICAgICAgaSA9IDAsXG4gICAgICBsZW4gPSBzdHIubGVuZ3RoO1xuXG4gIGZvciAoOyBsZW4gPj0gNDsgKytpLCBsZW4gLT0gNCkge1xuICAgIGsgPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmYgfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDggfCAoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2IHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNDtcbiAgICBrID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KTtcbiAgICBrIF49XG4gICAgLyogayA+Pj4gcjogKi9cbiAgICBrID4+PiAyNDtcbiAgICBoID1cbiAgICAvKiBNYXRoLmltdWwoaywgbSk6ICovXG4gICAgKGsgJiAweGZmZmYpICogMHg1YmQxZTk5NSArICgoayA+Pj4gMTYpICogMHhlOTk1IDw8IDE2KSBeXG4gICAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gSGFuZGxlIHRoZSBsYXN0IGZldyBieXRlcyBvZiB0aGUgaW5wdXQgYXJyYXlcblxuXG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAzOlxuICAgICAgaCBePSAoc3RyLmNoYXJDb2RlQXQoaSArIDIpICYgMHhmZikgPDwgMTY7XG5cbiAgICBjYXNlIDI6XG4gICAgICBoIF49IChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXG4gICAgY2FzZSAxOlxuICAgICAgaCBePSBzdHIuY2hhckNvZGVBdChpKSAmIDB4ZmY7XG4gICAgICBoID1cbiAgICAgIC8qIE1hdGguaW11bChoLCBtKTogKi9cbiAgICAgIChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUgKyAoKGggPj4+IDE2KSAqIDB4ZTk5NSA8PCAxNik7XG4gIH0gLy8gRG8gYSBmZXcgZmluYWwgbWl4ZXMgb2YgdGhlIGhhc2ggdG8gZW5zdXJlIHRoZSBsYXN0IGZld1xuICAvLyBieXRlcyBhcmUgd2VsbC1pbmNvcnBvcmF0ZWQuXG5cblxuICBoIF49IGggPj4+IDEzO1xuICBoID1cbiAgLyogTWF0aC5pbXVsKGgsIG0pOiAqL1xuICAoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1ICsgKChoID4+PiAxNikgKiAweGU5OTUgPDwgMTYpO1xuICByZXR1cm4gKChoIF4gaCA+Pj4gMTUpID4+PiAwKS50b1N0cmluZygzNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG11cm11cjI7XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICBpZiAoY2FjaGVbYXJnXSA9PT0gdW5kZWZpbmVkKSBjYWNoZVthcmddID0gZm4oYXJnKTtcbiAgICByZXR1cm4gY2FjaGVbYXJnXTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBoYXNoU3RyaW5nIGZyb20gJ0BlbW90aW9uL2hhc2gnO1xuaW1wb3J0IHVuaXRsZXNzIGZyb20gJ0BlbW90aW9uL3VuaXRsZXNzJztcbmltcG9ydCBtZW1vaXplIGZyb20gJ0BlbW90aW9uL21lbW9pemUnO1xuXG52YXIgSUxMRUdBTF9FU0NBUEVfU0VRVUVOQ0VfRVJST1IgPSBcIllvdSBoYXZlIGlsbGVnYWwgZXNjYXBlIHNlcXVlbmNlIGluIHlvdXIgdGVtcGxhdGUgbGl0ZXJhbCwgbW9zdCBsaWtlbHkgaW5zaWRlIGNvbnRlbnQncyBwcm9wZXJ0eSB2YWx1ZS5cXG5CZWNhdXNlIHlvdSB3cml0ZSB5b3VyIENTUyBpbnNpZGUgYSBKYXZhU2NyaXB0IHN0cmluZyB5b3UgYWN0dWFsbHkgaGF2ZSB0byBkbyBkb3VibGUgZXNjYXBpbmcsIHNvIGZvciBleGFtcGxlIFxcXCJjb250ZW50OiAnXFxcXDAwZDcnO1xcXCIgc2hvdWxkIGJlY29tZSBcXFwiY29udGVudDogJ1xcXFxcXFxcMDBkNyc7XFxcIi5cXG5Zb3UgY2FuIHJlYWQgbW9yZSBhYm91dCB0aGlzIGhlcmU6XFxuaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjRVMyMDE4X3JldmlzaW9uX29mX2lsbGVnYWxfZXNjYXBlX3NlcXVlbmNlc1wiO1xudmFyIFVOREVGSU5FRF9BU19PQkpFQ1RfS0VZX0VSUk9SID0gXCJZb3UgaGF2ZSBwYXNzZWQgaW4gZmFsc3kgdmFsdWUgYXMgc3R5bGUgb2JqZWN0J3Mga2V5IChjYW4gaGFwcGVuIHdoZW4gaW4gZXhhbXBsZSB5b3UgcGFzcyB1bmV4cG9ydGVkIGNvbXBvbmVudCBhcyBjb21wdXRlZCBrZXkpLlwiO1xudmFyIGh5cGhlbmF0ZVJlZ2V4ID0gL1tBLVpdfF5tcy9nO1xudmFyIGFuaW1hdGlvblJlZ2V4ID0gL19FTU9fKFteX10rPylfKFteXSo/KV9FTU9fL2c7XG5cbnZhciBpc0N1c3RvbVByb3BlcnR5ID0gZnVuY3Rpb24gaXNDdXN0b21Qcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gcHJvcGVydHkuY2hhckNvZGVBdCgxKSA9PT0gNDU7XG59O1xuXG52YXIgaXNQcm9jZXNzYWJsZVZhbHVlID0gZnVuY3Rpb24gaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Jvb2xlYW4nO1xufTtcblxudmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplKGZ1bmN0aW9uIChzdHlsZU5hbWUpIHtcbiAgcmV0dXJuIGlzQ3VzdG9tUHJvcGVydHkoc3R5bGVOYW1lKSA/IHN0eWxlTmFtZSA6IHN0eWxlTmFtZS5yZXBsYWNlKGh5cGhlbmF0ZVJlZ2V4LCAnLSQmJykudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG52YXIgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gIHN3aXRjaCAoa2V5KSB7XG4gICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICBjYXNlICdhbmltYXRpb25OYW1lJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUucmVwbGFjZShhbmltYXRpb25SZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBwMSwgcDIpIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgbmFtZTogcDEsXG4gICAgICAgICAgICAgIHN0eWxlczogcDIsXG4gICAgICAgICAgICAgIG5leHQ6IGN1cnNvclxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBwMTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgaWYgKHVuaXRsZXNzW2tleV0gIT09IDEgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlICE9PSAwKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JztcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBjb250ZW50VmFsdWVQYXR0ZXJuID0gLyhhdHRyfGNhbGN8Y291bnRlcnM/fHVybClcXCgvO1xuICB2YXIgY29udGVudFZhbHVlcyA9IFsnbm9ybWFsJywgJ25vbmUnLCAnY291bnRlcicsICdvcGVuLXF1b3RlJywgJ2Nsb3NlLXF1b3RlJywgJ25vLW9wZW4tcXVvdGUnLCAnbm8tY2xvc2UtcXVvdGUnLCAnaW5pdGlhbCcsICdpbmhlcml0JywgJ3Vuc2V0J107XG4gIHZhciBvbGRQcm9jZXNzU3R5bGVWYWx1ZSA9IHByb2Nlc3NTdHlsZVZhbHVlO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgdmFyIGh5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuICB2YXIgaHlwaGVuYXRlZENhY2hlID0ge307XG5cbiAgcHJvY2Vzc1N0eWxlVmFsdWUgPSBmdW5jdGlvbiBwcm9jZXNzU3R5bGVWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NvbnRlbnQnKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyB8fCBjb250ZW50VmFsdWVzLmluZGV4T2YodmFsdWUpID09PSAtMSAmJiAhY29udGVudFZhbHVlUGF0dGVybi50ZXN0KHZhbHVlKSAmJiAodmFsdWUuY2hhckF0KDApICE9PSB2YWx1ZS5jaGFyQXQodmFsdWUubGVuZ3RoIC0gMSkgfHwgdmFsdWUuY2hhckF0KDApICE9PSAnXCInICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gXCInXCIpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3Ugc2VlbSB0byBiZSB1c2luZyBhIHZhbHVlIGZvciAnY29udGVudCcgd2l0aG91dCBxdW90ZXMsIHRyeSByZXBsYWNpbmcgaXQgd2l0aCBgY29udGVudDogJ1xcXCJcIiArIHZhbHVlICsgXCJcXFwiJ2BcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NlZCA9IG9sZFByb2Nlc3NTdHlsZVZhbHVlKGtleSwgdmFsdWUpO1xuXG4gICAgaWYgKHByb2Nlc3NlZCAhPT0gJycgJiYgIWlzQ3VzdG9tUHJvcGVydHkoa2V5KSAmJiBrZXkuaW5kZXhPZignLScpICE9PSAtMSAmJiBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoeXBoZW5hdGVkQ2FjaGVba2V5XSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFwiVXNpbmcga2ViYWItY2FzZSBmb3IgY3NzIHByb3BlcnRpZXMgaW4gb2JqZWN0cyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gXCIgKyBrZXkucmVwbGFjZShtc1BhdHRlcm4sICdtcy0nKS5yZXBsYWNlKGh5cGhlblBhdHRlcm4sIGZ1bmN0aW9uIChzdHIsIF9jaGFyKSB7XG4gICAgICAgIHJldHVybiBfY2hhci50b1VwcGVyQ2FzZSgpO1xuICAgICAgfSkgKyBcIj9cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfTtcbn1cblxudmFyIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzID0gdHJ1ZTtcblxuZnVuY3Rpb24gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgaW50ZXJwb2xhdGlvbiwgY291bGRCZVNlbGVjdG9ySW50ZXJwb2xhdGlvbikge1xuICBpZiAoaW50ZXJwb2xhdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKGludGVycG9sYXRpb24uX19lbW90aW9uX3N0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaW50ZXJwb2xhdGlvbi50b1N0cmluZygpID09PSAnTk9fQ09NUE9ORU5UX1NFTEVDVE9SJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgc2VsZWN0b3JzIGNhbiBvbmx5IGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBiYWJlbC1wbHVnaW4tZW1vdGlvbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJwb2xhdGlvbjtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIGludGVycG9sYXRpb24pIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgaWYgKGludGVycG9sYXRpb24uYW5pbSA9PT0gMSkge1xuICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgIG5hbWU6IGludGVycG9sYXRpb24ubmFtZSxcbiAgICAgICAgICAgIHN0eWxlczogaW50ZXJwb2xhdGlvbi5zdHlsZXMsXG4gICAgICAgICAgICBuZXh0OiBjdXJzb3JcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBpbnRlcnBvbGF0aW9uLm5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbi5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhciBuZXh0ID0gaW50ZXJwb2xhdGlvbi5uZXh0O1xuXG4gICAgICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gbm90IHRoZSBtb3N0IGVmZmljaWVudCB0aGluZyBldmVyIGJ1dCB0aGlzIGlzIGEgcHJldHR5IHJhcmUgY2FzZVxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlIHdpbGwgYmUgdmVyeSBmZXcgaXRlcmF0aW9ucyBvZiB0aGlzIGdlbmVyYWxseVxuICAgICAgICAgICAgd2hpbGUgKG5leHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjdXJzb3IgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogbmV4dC5uYW1lLFxuICAgICAgICAgICAgICAgIHN0eWxlczogbmV4dC5zdHlsZXMsXG4gICAgICAgICAgICAgICAgbmV4dDogY3Vyc29yXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIG5leHQgPSBuZXh0Lm5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHN0eWxlcyA9IGludGVycG9sYXRpb24uc3R5bGVzICsgXCI7XCI7XG5cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpbnRlcnBvbGF0aW9uLm1hcCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz0gaW50ZXJwb2xhdGlvbi5tYXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjcmVhdGVTdHJpbmdGcm9tT2JqZWN0KG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBpbnRlcnBvbGF0aW9uKTtcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG1lcmdlZFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB2YXIgcHJldmlvdXNDdXJzb3IgPSBjdXJzb3I7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGludGVycG9sYXRpb24obWVyZ2VkUHJvcHMpO1xuICAgICAgICAgIGN1cnNvciA9IHByZXZpb3VzQ3Vyc29yO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCByZXN1bHQsIGNvdWxkQmVTZWxlY3RvckludGVycG9sYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGdW5jdGlvbnMgdGhhdCBhcmUgaW50ZXJwb2xhdGVkIGluIGNzcyBjYWxscyB3aWxsIGJlIHN0cmluZ2lmaWVkLlxcbicgKyAnSWYgeW91IHdhbnQgdG8gaGF2ZSBhIGNzcyBjYWxsIGJhc2VkIG9uIHByb3BzLCBjcmVhdGUgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBjc3MgY2FsbCBsaWtlIHRoaXNcXG4nICsgJ2xldCBkeW5hbWljU3R5bGUgPSAocHJvcHMpID0+IGNzc2Bjb2xvcjogJHtwcm9wcy5jb2xvcn1gXFxuJyArICdJdCBjYW4gYmUgY2FsbGVkIGRpcmVjdGx5IHdpdGggcHJvcHMgb3IgaW50ZXJwb2xhdGVkIGluIGEgc3R5bGVkIGNhbGwgbGlrZSB0aGlzXFxuJyArIFwibGV0IFNvbWVDb21wb25lbnQgPSBzdHlsZWQoJ2RpdicpYCR7ZHluYW1pY1N0eWxlfWBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICB2YXIgcmVwbGFjZWQgPSBpbnRlcnBvbGF0aW9uLnJlcGxhY2UoYW5pbWF0aW9uUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCwgcDEsIHAyKSB7XG4gICAgICAgICAgdmFyIGZha2VWYXJOYW1lID0gXCJhbmltYXRpb25cIiArIG1hdGNoZWQubGVuZ3RoO1xuICAgICAgICAgIG1hdGNoZWQucHVzaChcImNvbnN0IFwiICsgZmFrZVZhck5hbWUgKyBcIiA9IGtleWZyYW1lc2BcIiArIHAyLnJlcGxhY2UoL15Aa2V5ZnJhbWVzIGFuaW1hdGlvbi1cXHcrLywgJycpICsgXCJgXCIpO1xuICAgICAgICAgIHJldHVybiBcIiR7XCIgKyBmYWtlVmFyTmFtZSArIFwifVwiO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hlZC5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdga2V5ZnJhbWVzYCBvdXRwdXQgZ290IGludGVycG9sYXRlZCBpbnRvIHBsYWluIHN0cmluZywgcGxlYXNlIHdyYXAgaXQgd2l0aCBgY3NzYC5cXG5cXG4nICsgJ0luc3RlYWQgb2YgZG9pbmcgdGhpczpcXG5cXG4nICsgW10uY29uY2F0KG1hdGNoZWQsIFtcImBcIiArIHJlcGxhY2VkICsgXCJgXCJdKS5qb2luKCdcXG4nKSArICdcXG5cXG5Zb3Ugc2hvdWxkIHdyYXAgaXQgd2l0aCBgY3NzYCBsaWtlIHRoaXM6XFxuXFxuJyArIChcImNzc2BcIiArIHJlcGxhY2VkICsgXCJgXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfSAvLyBmaW5hbGl6ZSBzdHJpbmcgdmFsdWVzIChyZWd1bGFyIHN0cmluZ3MgYW5kIGZ1bmN0aW9ucyBpbnRlcnBvbGF0ZWQgaW50byBjc3MgY2FsbHMpXG5cblxuICBpZiAocmVnaXN0ZXJlZCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRpb247XG4gIH1cblxuICB2YXIgY2FjaGVkID0gcmVnaXN0ZXJlZFtpbnRlcnBvbGF0aW9uXTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uICYmIHNob3VsZFdhcm5BYm91dEludGVycG9sYXRpbmdDbGFzc05hbWVGcm9tQ3NzICYmIGNhY2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc29sZS5lcnJvcignSW50ZXJwb2xhdGluZyBhIGNsYXNzTmFtZSBmcm9tIGNzc2BgIGlzIG5vdCByZWNvbW1lbmRlZCBhbmQgd2lsbCBjYXVzZSBwcm9ibGVtcyB3aXRoIGNvbXBvc2l0aW9uLlxcbicgKyAnSW50ZXJwb2xhdGluZyBhIGNsYXNzTmFtZSBmcm9tIGNzc2BgIHdpbGwgYmUgY29tcGxldGVseSB1bnN1cHBvcnRlZCBpbiBhIGZ1dHVyZSBtYWpvciB2ZXJzaW9uIG9mIEVtb3Rpb24nKTtcbiAgICBzaG91bGRXYXJuQWJvdXRJbnRlcnBvbGF0aW5nQ2xhc3NOYW1lRnJvbUNzcyA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGNhY2hlZCAhPT0gdW5kZWZpbmVkICYmICFjb3VsZEJlU2VsZWN0b3JJbnRlcnBvbGF0aW9uID8gY2FjaGVkIDogaW50ZXJwb2xhdGlvbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nRnJvbU9iamVjdChtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgb2JqKSB7XG4gIHZhciBzdHJpbmcgPSAnJztcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0cmluZyArPSBoYW5kbGVJbnRlcnBvbGF0aW9uKG1lcmdlZFByb3BzLCByZWdpc3RlcmVkLCBvYmpbaV0sIGZhbHNlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2tleSBpbiBvYmopIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtfa2V5XTtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWQgIT0gbnVsbCAmJiByZWdpc3RlcmVkW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIHJlZ2lzdGVyZWRbdmFsdWVdICsgXCJ9XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9jZXNzYWJsZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgIHN0cmluZyArPSBwcm9jZXNzU3R5bGVOYW1lKF9rZXkpICsgXCI6XCIgKyBwcm9jZXNzU3R5bGVWYWx1ZShfa2V5LCB2YWx1ZSkgKyBcIjtcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF9rZXkgPT09ICdOT19DT01QT05FTlRfU0VMRUNUT1InICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudCBzZWxlY3RvcnMgY2FuIG9ubHkgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGJhYmVsLXBsdWdpbi1lbW90aW9uLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ3N0cmluZycgJiYgKHJlZ2lzdGVyZWQgPT0gbnVsbCB8fCByZWdpc3RlcmVkW3ZhbHVlWzBdXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCB2YWx1ZS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlmIChpc1Byb2Nlc3NhYmxlVmFsdWUodmFsdWVbX2ldKSkge1xuICAgICAgICAgICAgICBzdHJpbmcgKz0gcHJvY2Vzc1N0eWxlTmFtZShfa2V5KSArIFwiOlwiICsgcHJvY2Vzc1N0eWxlVmFsdWUoX2tleSwgdmFsdWVbX2ldKSArIFwiO1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgaW50ZXJwb2xhdGVkID0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgdmFsdWUsIGZhbHNlKTtcblxuICAgICAgICAgIHN3aXRjaCAoX2tleSkge1xuICAgICAgICAgICAgY2FzZSAnYW5pbWF0aW9uJzpcbiAgICAgICAgICAgIGNhc2UgJ2FuaW1hdGlvbk5hbWUnOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IHByb2Nlc3NTdHlsZU5hbWUoX2tleSkgKyBcIjpcIiArIGludGVycG9sYXRlZCArIFwiO1wiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBfa2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihVTkRFRklORURfQVNfT0JKRUNUX0tFWV9FUlJPUik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RyaW5nICs9IF9rZXkgKyBcIntcIiArIGludGVycG9sYXRlZCArIFwifVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZztcbn1cblxudmFyIGxhYmVsUGF0dGVybiA9IC9sYWJlbDpcXHMqKFteXFxzO1xcbntdKylcXHMqOy9nO1xudmFyIHNvdXJjZU1hcFBhdHRlcm47XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHNvdXJjZU1hcFBhdHRlcm4gPSAvXFwvXFwqI1xcc3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvblxcL2pzb247XFxTK1xccytcXCpcXC8vO1xufSAvLyB0aGlzIGlzIHRoZSBjdXJzb3IgZm9yIGtleWZyYW1lc1xuLy8ga2V5ZnJhbWVzIGFyZSBzdG9yZWQgb24gdGhlIFNlcmlhbGl6ZWRTdHlsZXMgb2JqZWN0IGFzIGEgbGlua2VkIGxpc3RcblxuXG52YXIgY3Vyc29yO1xudmFyIHNlcmlhbGl6ZVN0eWxlcyA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCByZWdpc3RlcmVkLCBtZXJnZWRQcm9wcykge1xuICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnICYmIGFyZ3NbMF0gIT09IG51bGwgJiYgYXJnc1swXS5zdHlsZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcmdzWzBdO1xuICB9XG5cbiAgdmFyIHN0cmluZ01vZGUgPSB0cnVlO1xuICB2YXIgc3R5bGVzID0gJyc7XG4gIGN1cnNvciA9IHVuZGVmaW5lZDtcbiAgdmFyIHN0cmluZ3MgPSBhcmdzWzBdO1xuXG4gIGlmIChzdHJpbmdzID09IG51bGwgfHwgc3RyaW5ncy5yYXcgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmluZ01vZGUgPSBmYWxzZTtcbiAgICBzdHlsZXMgKz0gaGFuZGxlSW50ZXJwb2xhdGlvbihtZXJnZWRQcm9wcywgcmVnaXN0ZXJlZCwgc3RyaW5ncywgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbMF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS5lcnJvcihJTExFR0FMX0VTQ0FQRV9TRVFVRU5DRV9FUlJPUik7XG4gICAgfVxuXG4gICAgc3R5bGVzICs9IHN0cmluZ3NbMF07XG4gIH0gLy8gd2Ugc3RhcnQgYXQgMSBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGhhbmRsZWQgdGhlIGZpcnN0IGFyZ1xuXG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3R5bGVzICs9IGhhbmRsZUludGVycG9sYXRpb24obWVyZ2VkUHJvcHMsIHJlZ2lzdGVyZWQsIGFyZ3NbaV0sIHN0eWxlcy5jaGFyQ29kZUF0KHN0eWxlcy5sZW5ndGggLSAxKSA9PT0gNDYpO1xuXG4gICAgaWYgKHN0cmluZ01vZGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHN0cmluZ3NbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKElMTEVHQUxfRVNDQVBFX1NFUVVFTkNFX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzICs9IHN0cmluZ3NbaV07XG4gICAgfVxuICB9XG5cbiAgdmFyIHNvdXJjZU1hcDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHN0eWxlcyA9IHN0eWxlcy5yZXBsYWNlKHNvdXJjZU1hcFBhdHRlcm4sIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgc291cmNlTWFwID0gbWF0Y2g7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSk7XG4gIH0gLy8gdXNpbmcgYSBnbG9iYWwgcmVnZXggd2l0aCAuZXhlYyBpcyBzdGF0ZWZ1bCBzbyBsYXN0SW5kZXggaGFzIHRvIGJlIHJlc2V0IGVhY2ggdGltZVxuXG5cbiAgbGFiZWxQYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gIHZhciBpZGVudGlmaWVyTmFtZSA9ICcnO1xuICB2YXIgbWF0Y2g7IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWI4MDljMmNmMjk0OTgwMGEwZjYxZmI1XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxhYmVsUGF0dGVybi5leGVjKHN0eWxlcykpICE9PSBudWxsKSB7XG4gICAgaWRlbnRpZmllck5hbWUgKz0gJy0nICsgLy8gJEZsb3dGaXhNZSB3ZSBrbm93IGl0J3Mgbm90IG51bGxcbiAgICBtYXRjaFsxXTtcbiAgfVxuXG4gIHZhciBuYW1lID0gaGFzaFN0cmluZyhzdHlsZXMpICsgaWRlbnRpZmllck5hbWU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFNlcmlhbGl6ZWRTdHlsZXMgdHlwZSBkb2Vzbid0IGhhdmUgdG9TdHJpbmcgcHJvcGVydHkgKGFuZCB3ZSBkb24ndCB3YW50IHRvIGFkZCBpdClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgbWFwOiBzb3VyY2VNYXAsXG4gICAgICBuZXh0OiBjdXJzb3IsXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIllvdSBoYXZlIHRyaWVkIHRvIHN0cmluZ2lmeSBvYmplY3QgcmV0dXJuZWQgZnJvbSBgY3NzYCBmdW5jdGlvbi4gSXQgaXNuJ3Qgc3VwcG9zZWQgdG8gYmUgdXNlZCBkaXJlY3RseSAoZS5nLiBhcyB2YWx1ZSBvZiB0aGUgYGNsYXNzTmFtZWAgcHJvcCksIGJ1dCByYXRoZXIgaGFuZGVkIHRvIGVtb3Rpb24gc28gaXQgY2FuIGhhbmRsZSBpdCAoZS5nLiBhcyB2YWx1ZSBvZiBgY3NzYCBwcm9wKS5cIjtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICAgIG5leHQ6IGN1cnNvclxuICB9O1xufTtcblxuZXhwb3J0IHsgc2VyaWFsaXplU3R5bGVzIH07XG4iLCJ2YXIgaXNCcm93c2VyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbmZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lcykge1xuICB2YXIgcmF3Q2xhc3NOYW1lID0gJyc7XG4gIGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBpZiAocmVnaXN0ZXJlZFtjbGFzc05hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlZ2lzdGVyZWRTdHlsZXMucHVzaChyZWdpc3RlcmVkW2NsYXNzTmFtZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByYXdDbGFzc05hbWUgKz0gY2xhc3NOYW1lICsgXCIgXCI7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJhd0NsYXNzTmFtZTtcbn1cbnZhciBpbnNlcnRTdHlsZXMgPSBmdW5jdGlvbiBpbnNlcnRTdHlsZXMoY2FjaGUsIHNlcmlhbGl6ZWQsIGlzU3RyaW5nVGFnKSB7XG4gIHZhciBjbGFzc05hbWUgPSBjYWNoZS5rZXkgKyBcIi1cIiArIHNlcmlhbGl6ZWQubmFtZTtcblxuICBpZiAoIC8vIHdlIG9ubHkgbmVlZCB0byBhZGQgdGhlIHN0eWxlcyB0byB0aGUgcmVnaXN0ZXJlZCBjYWNoZSBpZiB0aGVcbiAgLy8gY2xhc3MgbmFtZSBjb3VsZCBiZSB1c2VkIGZ1cnRoZXIgZG93blxuICAvLyB0aGUgdHJlZSBidXQgaWYgaXQncyBhIHN0cmluZyB0YWcsIHdlIGtub3cgaXQgd29uJ3RcbiAgLy8gc28gd2UgZG9uJ3QgaGF2ZSB0byBhZGQgaXQgdG8gcmVnaXN0ZXJlZCBjYWNoZS5cbiAgLy8gdGhpcyBpbXByb3ZlcyBtZW1vcnkgdXNhZ2Ugc2luY2Ugd2UgY2FuIGF2b2lkIHN0b3JpbmcgdGhlIHdob2xlIHN0eWxlIHN0cmluZ1xuICAoaXNTdHJpbmdUYWcgPT09IGZhbHNlIHx8IC8vIHdlIG5lZWQgdG8gYWx3YXlzIHN0b3JlIGl0IGlmIHdlJ3JlIGluIGNvbXBhdCBtb2RlIGFuZFxuICAvLyBpbiBub2RlIHNpbmNlIGVtb3Rpb24tc2VydmVyIHJlbGllcyBvbiB3aGV0aGVyIGEgc3R5bGUgaXMgaW5cbiAgLy8gdGhlIHJlZ2lzdGVyZWQgY2FjaGUgdG8ga25vdyB3aGV0aGVyIGEgc3R5bGUgaXMgZ2xvYmFsIG9yIG5vdFxuICAvLyBhbHNvLCBub3RlIHRoYXQgdGhpcyBjaGVjayB3aWxsIGJlIGRlYWQgY29kZSBlbGltaW5hdGVkIGluIHRoZSBicm93c2VyXG4gIGlzQnJvd3NlciA9PT0gZmFsc2UgJiYgY2FjaGUuY29tcGF0ICE9PSB1bmRlZmluZWQpICYmIGNhY2hlLnJlZ2lzdGVyZWRbY2xhc3NOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2FjaGUucmVnaXN0ZXJlZFtjbGFzc05hbWVdID0gc2VyaWFsaXplZC5zdHlsZXM7XG4gIH1cblxuICBpZiAoY2FjaGUuaW5zZXJ0ZWRbc2VyaWFsaXplZC5uYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHN0eWxlc0ZvclNTUiA9ICcnO1xuICAgIHZhciBjdXJyZW50ID0gc2VyaWFsaXplZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBtYXliZVN0eWxlcyA9IGNhY2hlLmluc2VydChcIi5cIiArIGNsYXNzTmFtZSwgY3VycmVudCwgY2FjaGUuc2hlZXQsIHRydWUpO1xuXG4gICAgICBpZiAoIWlzQnJvd3NlciAmJiBtYXliZVN0eWxlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0eWxlc0ZvclNTUiArPSBtYXliZVN0eWxlcztcbiAgICAgIH1cblxuICAgICAgY3VycmVudCA9IGN1cnJlbnQubmV4dDtcbiAgICB9IHdoaWxlIChjdXJyZW50ICE9PSB1bmRlZmluZWQpO1xuXG4gICAgaWYgKCFpc0Jyb3dzZXIgJiYgc3R5bGVzRm9yU1NSLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIHN0eWxlc0ZvclNTUjtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldFJlZ2lzdGVyZWRTdHlsZXMsIGluc2VydFN0eWxlcyB9O1xuIiwiaW1wb3J0IGNyZWF0ZUNhY2hlIGZyb20gJ0BlbW90aW9uL2NhY2hlJztcbmltcG9ydCB7IHNlcmlhbGl6ZVN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3NlcmlhbGl6ZSc7XG5pbXBvcnQgeyBnZXRSZWdpc3RlcmVkU3R5bGVzLCBpbnNlcnRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi91dGlscyc7XG5cbmZ1bmN0aW9uIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCBzZXJpYWxpemVkKSB7XG4gIGlmIChjYWNoZS5pbnNlcnRlZFtzZXJpYWxpemVkLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY2FjaGUuaW5zZXJ0KCcnLCBzZXJpYWxpemVkLCBjYWNoZS5zaGVldCwgdHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2UocmVnaXN0ZXJlZCwgY3NzLCBjbGFzc05hbWUpIHtcbiAgdmFyIHJlZ2lzdGVyZWRTdHlsZXMgPSBbXTtcbiAgdmFyIHJhd0NsYXNzTmFtZSA9IGdldFJlZ2lzdGVyZWRTdHlsZXMocmVnaXN0ZXJlZCwgcmVnaXN0ZXJlZFN0eWxlcywgY2xhc3NOYW1lKTtcblxuICBpZiAocmVnaXN0ZXJlZFN0eWxlcy5sZW5ndGggPCAyKSB7XG4gICAgcmV0dXJuIGNsYXNzTmFtZTtcbiAgfVxuXG4gIHJldHVybiByYXdDbGFzc05hbWUgKyBjc3MocmVnaXN0ZXJlZFN0eWxlcyk7XG59XG5cbnZhciBjcmVhdGVFbW90aW9uID0gZnVuY3Rpb24gY3JlYXRlRW1vdGlvbihvcHRpb25zKSB7XG4gIHZhciBjYWNoZSA9IGNyZWF0ZUNhY2hlKG9wdGlvbnMpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgY2FjaGUuc2hlZXQuc3BlZWR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdGhpcy5jdHIgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc3BlZWR5IG11c3QgYmUgY2hhbmdlZCBiZWZvcmUgYW55IHJ1bGVzIGFyZSBpbnNlcnRlZCcpO1xuICAgIH1cblxuICAgIHRoaXMuaXNTcGVlZHkgPSB2YWx1ZTtcbiAgfTtcblxuICBjYWNoZS5jb21wYXQgPSB0cnVlO1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiBjc3MoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBzZXJpYWxpemVkID0gc2VyaWFsaXplU3R5bGVzKGFyZ3MsIGNhY2hlLnJlZ2lzdGVyZWQsIHVuZGVmaW5lZCk7XG4gICAgaW5zZXJ0U3R5bGVzKGNhY2hlLCBzZXJpYWxpemVkLCBmYWxzZSk7XG4gICAgcmV0dXJuIGNhY2hlLmtleSArIFwiLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICB9O1xuXG4gIHZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiBrZXlmcmFtZXMoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSBzZXJpYWxpemVTdHlsZXMoYXJncywgY2FjaGUucmVnaXN0ZXJlZCk7XG4gICAgdmFyIGFuaW1hdGlvbiA9IFwiYW5pbWF0aW9uLVwiICsgc2VyaWFsaXplZC5uYW1lO1xuICAgIGluc2VydFdpdGhvdXRTY29waW5nKGNhY2hlLCB7XG4gICAgICBuYW1lOiBzZXJpYWxpemVkLm5hbWUsXG4gICAgICBzdHlsZXM6IFwiQGtleWZyYW1lcyBcIiArIGFuaW1hdGlvbiArIFwie1wiICsgc2VyaWFsaXplZC5zdHlsZXMgKyBcIn1cIlxuICAgIH0pO1xuICAgIHJldHVybiBhbmltYXRpb247XG4gIH07XG5cbiAgdmFyIGluamVjdEdsb2JhbCA9IGZ1bmN0aW9uIGluamVjdEdsb2JhbCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHtcbiAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHNlcmlhbGl6ZVN0eWxlcyhhcmdzLCBjYWNoZS5yZWdpc3RlcmVkKTtcbiAgICBpbnNlcnRXaXRob3V0U2NvcGluZyhjYWNoZSwgc2VyaWFsaXplZCk7XG4gIH07XG5cbiAgdmFyIGN4ID0gZnVuY3Rpb24gY3goKSB7XG4gICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKGNhY2hlLnJlZ2lzdGVyZWQsIGNzcywgY2xhc3NuYW1lcyhhcmdzKSk7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBjc3M6IGNzcyxcbiAgICBjeDogY3gsXG4gICAgaW5qZWN0R2xvYmFsOiBpbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzOiBrZXlmcmFtZXMsXG4gICAgaHlkcmF0ZTogZnVuY3Rpb24gaHlkcmF0ZShpZHMpIHtcbiAgICAgIGlkcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgY2FjaGUuaW5zZXJ0ZWRba2V5XSA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGZsdXNoOiBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgIGNhY2hlLnJlZ2lzdGVyZWQgPSB7fTtcbiAgICAgIGNhY2hlLmluc2VydGVkID0ge307XG4gICAgICBjYWNoZS5zaGVldC5mbHVzaCgpO1xuICAgIH0sXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHNoZWV0OiBjYWNoZS5zaGVldCxcbiAgICBjYWNoZTogY2FjaGUsXG4gICAgZ2V0UmVnaXN0ZXJlZFN0eWxlczogZ2V0UmVnaXN0ZXJlZFN0eWxlcy5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQpLFxuICAgIG1lcmdlOiBtZXJnZS5iaW5kKG51bGwsIGNhY2hlLnJlZ2lzdGVyZWQsIGNzcylcbiAgfTtcbn07XG5cbnZhciBjbGFzc25hbWVzID0gZnVuY3Rpb24gY2xhc3NuYW1lcyhhcmdzKSB7XG4gIHZhciBjbHMgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXJnID0gYXJnc1tpXTtcbiAgICBpZiAoYXJnID09IG51bGwpIGNvbnRpbnVlO1xuICAgIHZhciB0b0FkZCA9IHZvaWQgMDtcblxuICAgIHN3aXRjaCAodHlwZW9mIGFyZykge1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgdG9BZGQgPSBjbGFzc25hbWVzKGFyZyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvQWRkID0gJyc7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gYXJnKSB7XG4gICAgICAgICAgICAgIGlmIChhcmdba10gJiYgaykge1xuICAgICAgICAgICAgICAgIHRvQWRkICYmICh0b0FkZCArPSAnICcpO1xuICAgICAgICAgICAgICAgIHRvQWRkICs9IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB7XG4gICAgICAgICAgdG9BZGQgPSBhcmc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodG9BZGQpIHtcbiAgICAgIGNscyAmJiAoY2xzICs9ICcgJyk7XG4gICAgICBjbHMgKz0gdG9BZGQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNscztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUVtb3Rpb247XG4iLCJpbXBvcnQgY3JlYXRlRW1vdGlvbiBmcm9tICdjcmVhdGUtZW1vdGlvbic7XG5cbnZhciBfY3JlYXRlRW1vdGlvbiA9IGNyZWF0ZUVtb3Rpb24oKSxcbiAgICBmbHVzaCA9IF9jcmVhdGVFbW90aW9uLmZsdXNoLFxuICAgIGh5ZHJhdGUgPSBfY3JlYXRlRW1vdGlvbi5oeWRyYXRlLFxuICAgIGN4ID0gX2NyZWF0ZUVtb3Rpb24uY3gsXG4gICAgbWVyZ2UgPSBfY3JlYXRlRW1vdGlvbi5tZXJnZSxcbiAgICBnZXRSZWdpc3RlcmVkU3R5bGVzID0gX2NyZWF0ZUVtb3Rpb24uZ2V0UmVnaXN0ZXJlZFN0eWxlcyxcbiAgICBpbmplY3RHbG9iYWwgPSBfY3JlYXRlRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAga2V5ZnJhbWVzID0gX2NyZWF0ZUVtb3Rpb24ua2V5ZnJhbWVzLFxuICAgIGNzcyA9IF9jcmVhdGVFbW90aW9uLmNzcyxcbiAgICBzaGVldCA9IF9jcmVhdGVFbW90aW9uLnNoZWV0LFxuICAgIGNhY2hlID0gX2NyZWF0ZUVtb3Rpb24uY2FjaGU7XG5cbmV4cG9ydCB7IGNhY2hlLCBjc3MsIGN4LCBmbHVzaCwgZ2V0UmVnaXN0ZXJlZFN0eWxlcywgaHlkcmF0ZSwgaW5qZWN0R2xvYmFsLCBrZXlmcmFtZXMsIG1lcmdlLCBzaGVldCB9O1xuIiwiXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB0cmltO1xuXG5mdW5jdGlvbiB0cmltKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyp8XFxzKiQvZywgJycpO1xufVxuXG5leHBvcnRzLmxlZnQgPSBmdW5jdGlvbihzdHIpe1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpO1xufTtcblxuZXhwb3J0cy5yaWdodCA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59O1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBhbCBpbmhlcml0YW5jZSwgdGhpcyBjbGFzc1xuLy8gcHJvdG90eXBhbGx5IGluaGVyaXRzIGZyb20gUmVhZGFibGUsIGFuZCB0aGVuIHBhcmFzaXRpY2FsbHkgZnJvbVxuLy8gV3JpdGFibGUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gIH1yZXR1cm4ga2V5cztcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnLi9fc3RyZWFtX3JlYWRhYmxlJyk7XG52YXIgV3JpdGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fd3JpdGFibGUnKTtcblxudXRpbC5pbmhlcml0cyhEdXBsZXgsIFJlYWRhYmxlKTtcblxue1xuICAvLyBhdm9pZCBzY29wZSBjcmVlcCwgdGhlIGtleXMgYXJyYXkgY2FuIHRoZW4gYmUgY29sbGVjdGVkXG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpO1xuICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICB2YXIgbWV0aG9kID0ga2V5c1t2XTtcbiAgICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07XG4gIH1cbn1cblxuZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpIHRoaXMucmVhZGFibGUgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gIHRoaXMuYWxsb3dIYWxmT3BlbiA9IHRydWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuYWxsb3dIYWxmT3BlbiA9PT0gZmFsc2UpIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycsIHtcbiAgLy8gbWFraW5nIGl0IGV4cGxpY2l0IHRoaXMgcHJvcGVydHkgaXMgbm90IGVudW1lcmFibGVcbiAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugc29tZSBwcm90b3R5cGUgbWFuaXB1bGF0aW9uIGluXG4gIC8vIHVzZXJsYW5kIHdpbGwgZmFpbFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgfVxufSk7XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwbmEubmV4dFRpY2sob25FbmROVCwgdGhpcyk7XG59XG5cbmZ1bmN0aW9uIG9uRW5kTlQoc2VsZikge1xuICBzZWxmLmVuZCgpO1xufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRHVwbGV4LnByb3RvdHlwZSwgJ2Rlc3Ryb3llZCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkICYmIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAodGhpcy5fcmVhZGFibGVTdGF0ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHRoZSB1c2VyIGlzIGV4cGxpY2l0bHlcbiAgICAvLyBtYW5hZ2luZyBkZXN0cm95ZWRcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWU7XG4gIH1cbn0pO1xuXG5EdXBsZXgucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICB0aGlzLmVuZCgpO1xuXG4gIHBuYS5uZXh0VGljayhjYiwgZXJyKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG51bSkge1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHsgcmVzdWx0ICs9IHN0cjsgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuZXhwb3J0cy5hcnJheUVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHsgcmV0dXJuIGZhbHNlOyB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnRzLnRyaW1DaGFycyA9IGZ1bmN0aW9uIChzdHIsIGNoYXJzKSB7XG4gIHZhciBzdGFydCA9IDA7XG4gIHZhciBlbmQgPSBzdHIubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKGNoYXJzLmluZGV4T2Yoc3RyLmNoYXJBdChzdGFydCkpID49IDApIHsgc3RhcnQrKzsgfVxuICB3aGlsZSAoY2hhcnMuaW5kZXhPZihzdHIuY2hhckF0KGVuZCkpID49IDApIHsgZW5kLS07IH1cbiAgcmV0dXJuIHN0ci5zbGljZShzdGFydCwgZW5kICsgMSk7XG59O1xuXG5leHBvcnRzLmNhcGl0YWxpemUgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59O1xuXG5leHBvcnRzLmFycmF5VW5pb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIHZhbHVlcyA9IHt9OyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyciA9IGFyZ3VtZW50c1tpXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGFyci5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKCF2YWx1ZXNbYXJyW2pdXSkge1xuICAgICAgICB2YWx1ZXNbYXJyW2pdXSA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFycltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59XG5cbmV4cG9ydHMuaGFzID0gaGFzO1xuXG5leHBvcnRzLmV4dGVuZCA9IGZ1bmN0aW9uIChkZXN0LCBzcmMpIHtcbiAgZm9yICh2YXIgaSBpbiBzcmMpIHtcbiAgICBpZiAoaGFzKHNyYywgaSkpIHsgZGVzdFtpXSA9IHNyY1tpXTsgfVxuICB9XG59O1xuXG5leHBvcnRzLnRyaW1FbmQgPSBmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxzKyQvZywgJycpO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vLi4vbm9ybWFsaXplJylcbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuL3NjaGVtYScpXG52YXIgRGVmaW5lZEluZm8gPSByZXF1aXJlKCcuL2RlZmluZWQtaW5mbycpXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlXG5cbmZ1bmN0aW9uIGNyZWF0ZShkZWZpbml0aW9uKSB7XG4gIHZhciBzcGFjZSA9IGRlZmluaXRpb24uc3BhY2VcbiAgdmFyIG11c3RVc2VQcm9wZXJ0eSA9IGRlZmluaXRpb24ubXVzdFVzZVByb3BlcnR5IHx8IFtdXG4gIHZhciBhdHRyaWJ1dGVzID0gZGVmaW5pdGlvbi5hdHRyaWJ1dGVzIHx8IHt9XG4gIHZhciBwcm9wcyA9IGRlZmluaXRpb24ucHJvcGVydGllc1xuICB2YXIgdHJhbnNmb3JtID0gZGVmaW5pdGlvbi50cmFuc2Zvcm1cbiAgdmFyIHByb3BlcnR5ID0ge31cbiAgdmFyIG5vcm1hbCA9IHt9XG4gIHZhciBwcm9wXG4gIHZhciBpbmZvXG5cbiAgZm9yIChwcm9wIGluIHByb3BzKSB7XG4gICAgaW5mbyA9IG5ldyBEZWZpbmVkSW5mbyhcbiAgICAgIHByb3AsXG4gICAgICB0cmFuc2Zvcm0oYXR0cmlidXRlcywgcHJvcCksXG4gICAgICBwcm9wc1twcm9wXSxcbiAgICAgIHNwYWNlXG4gICAgKVxuXG4gICAgaWYgKG11c3RVc2VQcm9wZXJ0eS5pbmRleE9mKHByb3ApICE9PSAtMSkge1xuICAgICAgaW5mby5tdXN0VXNlUHJvcGVydHkgPSB0cnVlXG4gICAgfVxuXG4gICAgcHJvcGVydHlbcHJvcF0gPSBpbmZvXG5cbiAgICBub3JtYWxbbm9ybWFsaXplKHByb3ApXSA9IHByb3BcbiAgICBub3JtYWxbbm9ybWFsaXplKGluZm8uYXR0cmlidXRlKV0gPSBwcm9wXG4gIH1cblxuICByZXR1cm4gbmV3IFNjaGVtYShwcm9wZXJ0eSwgbm9ybWFsLCBzcGFjZSlcbn1cbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuLyoqXG4gKiBUaGlzIGlzIGEgaGVscGVyIGZ1bmN0aW9uIGZvciBnZXR0aW5nIHZhbHVlcyBmcm9tIHBhcmFtZXRlci9vcHRpb25zXG4gKiBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSBhcmdzIFRoZSBvYmplY3Qgd2UgYXJlIGV4dHJhY3RpbmcgdmFsdWVzIGZyb21cbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB3ZSBhcmUgZ2V0dGluZy5cbiAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgQW4gb3B0aW9uYWwgdmFsdWUgdG8gcmV0dXJuIGlmIHRoZSBwcm9wZXJ0eSBpcyBtaXNzaW5nXG4gKiBmcm9tIHRoZSBvYmplY3QuIElmIHRoaXMgaXMgbm90IHNwZWNpZmllZCBhbmQgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmcsIGFuXG4gKiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZnVuY3Rpb24gZ2V0QXJnKGFBcmdzLCBhTmFtZSwgYURlZmF1bHRWYWx1ZSkge1xuICBpZiAoYU5hbWUgaW4gYUFyZ3MpIHtcbiAgICByZXR1cm4gYUFyZ3NbYU5hbWVdO1xuICB9IGVsc2UgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMpIHtcbiAgICByZXR1cm4gYURlZmF1bHRWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFOYW1lICsgJ1wiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQuJyk7XG4gIH1cbn1cbmV4cG9ydHMuZ2V0QXJnID0gZ2V0QXJnO1xuXG52YXIgdXJsUmVnZXhwID0gL14oPzooW1xcdytcXC0uXSspOik/XFwvXFwvKD86KFxcdys6XFx3KylAKT8oW1xcdy4tXSopKD86OihcXGQrKSk/KC4qKSQvO1xudmFyIGRhdGFVcmxSZWdleHAgPSAvXmRhdGE6LitcXCwuKyQvO1xuXG5mdW5jdGlvbiB1cmxQYXJzZShhVXJsKSB7XG4gIHZhciBtYXRjaCA9IGFVcmwubWF0Y2godXJsUmVnZXhwKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2NoZW1lOiBtYXRjaFsxXSxcbiAgICBhdXRoOiBtYXRjaFsyXSxcbiAgICBob3N0OiBtYXRjaFszXSxcbiAgICBwb3J0OiBtYXRjaFs0XSxcbiAgICBwYXRoOiBtYXRjaFs1XVxuICB9O1xufVxuZXhwb3J0cy51cmxQYXJzZSA9IHVybFBhcnNlO1xuXG5mdW5jdGlvbiB1cmxHZW5lcmF0ZShhUGFyc2VkVXJsKSB7XG4gIHZhciB1cmwgPSAnJztcbiAgaWYgKGFQYXJzZWRVcmwuc2NoZW1lKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuc2NoZW1lICsgJzonO1xuICB9XG4gIHVybCArPSAnLy8nO1xuICBpZiAoYVBhcnNlZFVybC5hdXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuYXV0aCArICdAJztcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5ob3N0KSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwuaG9zdDtcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wb3J0KSB7XG4gICAgdXJsICs9IFwiOlwiICsgYVBhcnNlZFVybC5wb3J0XG4gIH1cbiAgaWYgKGFQYXJzZWRVcmwucGF0aCkge1xuICAgIHVybCArPSBhUGFyc2VkVXJsLnBhdGg7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cbmV4cG9ydHMudXJsR2VuZXJhdGUgPSB1cmxHZW5lcmF0ZTtcblxuLyoqXG4gKiBOb3JtYWxpemVzIGEgcGF0aCwgb3IgdGhlIHBhdGggcG9ydGlvbiBvZiBhIFVSTDpcbiAqXG4gKiAtIFJlcGxhY2VzIGNvbnNlY3V0aXZlIHNsYXNoZXMgd2l0aCBvbmUgc2xhc2guXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJy4nIHBhcnRzLlxuICogLSBSZW1vdmVzIHVubmVjZXNzYXJ5ICc8ZGlyPi8uLicgcGFydHMuXG4gKlxuICogQmFzZWQgb24gY29kZSBpbiB0aGUgTm9kZS5qcyAncGF0aCcgY29yZSBtb2R1bGUuXG4gKlxuICogQHBhcmFtIGFQYXRoIFRoZSBwYXRoIG9yIHVybCB0byBub3JtYWxpemUuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhUGF0aCkge1xuICB2YXIgcGF0aCA9IGFQYXRoO1xuICB2YXIgdXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICBpZiAodXJsKSB7XG4gICAgaWYgKCF1cmwucGF0aCkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cbiAgICBwYXRoID0gdXJsLnBhdGg7XG4gIH1cbiAgdmFyIGlzQWJzb2x1dGUgPSBleHBvcnRzLmlzQWJzb2x1dGUocGF0aCk7XG5cbiAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pO1xuICBmb3IgKHZhciBwYXJ0LCB1cCA9IDAsIGkgPSBwYXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXAgPiAwKSB7XG4gICAgICBpZiAocGFydCA9PT0gJycpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHBhcnQgaXMgYmxhbmsgaWYgdGhlIHBhdGggaXMgYWJzb2x1dGUuIFRyeWluZyB0byBnb1xuICAgICAgICAvLyBhYm92ZSB0aGUgcm9vdCBpcyBhIG5vLW9wLiBUaGVyZWZvcmUgd2UgY2FuIHJlbW92ZSBhbGwgJy4uJyBwYXJ0c1xuICAgICAgICAvLyBkaXJlY3RseSBhZnRlciB0aGUgcm9vdC5cbiAgICAgICAgcGFydHMuc3BsaWNlKGkgKyAxLCB1cCk7XG4gICAgICAgIHVwID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnNwbGljZShpLCAyKTtcbiAgICAgICAgdXAtLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcGF0aCA9IHBhcnRzLmpvaW4oJy8nKTtcblxuICBpZiAocGF0aCA9PT0gJycpIHtcbiAgICBwYXRoID0gaXNBYnNvbHV0ZSA/ICcvJyA6ICcuJztcbiAgfVxuXG4gIGlmICh1cmwpIHtcbiAgICB1cmwucGF0aCA9IHBhdGg7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKHVybCk7XG4gIH1cbiAgcmV0dXJuIHBhdGg7XG59XG5leHBvcnRzLm5vcm1hbGl6ZSA9IG5vcm1hbGl6ZTtcblxuLyoqXG4gKiBKb2lucyB0d28gcGF0aHMvVVJMcy5cbiAqXG4gKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIGpvaW5lZCB3aXRoIHRoZSByb290LlxuICpcbiAqIC0gSWYgYVBhdGggaXMgYSBVUkwgb3IgYSBkYXRhIFVSSSwgYVBhdGggaXMgcmV0dXJuZWQsIHVubGVzcyBhUGF0aCBpcyBhXG4gKiAgIHNjaGVtZS1yZWxhdGl2ZSBVUkw6IFRoZW4gdGhlIHNjaGVtZSBvZiBhUm9vdCwgaWYgYW55LCBpcyBwcmVwZW5kZWRcbiAqICAgZmlyc3QuXG4gKiAtIE90aGVyd2lzZSBhUGF0aCBpcyBhIHBhdGguIElmIGFSb290IGlzIGEgVVJMLCB0aGVuIGl0cyBwYXRoIHBvcnRpb25cbiAqICAgaXMgdXBkYXRlZCB3aXRoIHRoZSByZXN1bHQgYW5kIGFSb290IGlzIHJldHVybmVkLiBPdGhlcndpc2UgdGhlIHJlc3VsdFxuICogICBpcyByZXR1cm5lZC5cbiAqICAgLSBJZiBhUGF0aCBpcyBhYnNvbHV0ZSwgdGhlIHJlc3VsdCBpcyBhUGF0aC5cbiAqICAgLSBPdGhlcndpc2UgdGhlIHR3byBwYXRocyBhcmUgam9pbmVkIHdpdGggYSBzbGFzaC5cbiAqIC0gSm9pbmluZyBmb3IgZXhhbXBsZSAnaHR0cDovLycgYW5kICd3d3cuZXhhbXBsZS5jb20nIGlzIGFsc28gc3VwcG9ydGVkLlxuICovXG5mdW5jdGlvbiBqb2luKGFSb290LCBhUGF0aCkge1xuICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICBhUm9vdCA9IFwiLlwiO1xuICB9XG4gIGlmIChhUGF0aCA9PT0gXCJcIikge1xuICAgIGFQYXRoID0gXCIuXCI7XG4gIH1cbiAgdmFyIGFQYXRoVXJsID0gdXJsUGFyc2UoYVBhdGgpO1xuICB2YXIgYVJvb3RVcmwgPSB1cmxQYXJzZShhUm9vdCk7XG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290ID0gYVJvb3RVcmwucGF0aCB8fCAnLyc7XG4gIH1cblxuICAvLyBgam9pbihmb28sICcvL3d3dy5leGFtcGxlLm9yZycpYFxuICBpZiAoYVBhdGhVcmwgJiYgIWFQYXRoVXJsLnNjaGVtZSkge1xuICAgIGlmIChhUm9vdFVybCkge1xuICAgICAgYVBhdGhVcmwuc2NoZW1lID0gYVJvb3RVcmwuc2NoZW1lO1xuICAgIH1cbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVBhdGhVcmwpO1xuICB9XG5cbiAgaWYgKGFQYXRoVXJsIHx8IGFQYXRoLm1hdGNoKGRhdGFVcmxSZWdleHApKSB7XG4gICAgcmV0dXJuIGFQYXRoO1xuICB9XG5cbiAgLy8gYGpvaW4oJ2h0dHA6Ly8nLCAnd3d3LmV4YW1wbGUuY29tJylgXG4gIGlmIChhUm9vdFVybCAmJiAhYVJvb3RVcmwuaG9zdCAmJiAhYVJvb3RVcmwucGF0aCkge1xuICAgIGFSb290VXJsLmhvc3QgPSBhUGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG5cbiAgdmFyIGpvaW5lZCA9IGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nXG4gICAgPyBhUGF0aFxuICAgIDogbm9ybWFsaXplKGFSb290LnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgYVBhdGgpO1xuXG4gIGlmIChhUm9vdFVybCkge1xuICAgIGFSb290VXJsLnBhdGggPSBqb2luZWQ7XG4gICAgcmV0dXJuIHVybEdlbmVyYXRlKGFSb290VXJsKTtcbiAgfVxuICByZXR1cm4gam9pbmVkO1xufVxuZXhwb3J0cy5qb2luID0gam9pbjtcblxuZXhwb3J0cy5pc0Fic29sdXRlID0gZnVuY3Rpb24gKGFQYXRoKSB7XG4gIHJldHVybiBhUGF0aC5jaGFyQXQoMCkgPT09ICcvJyB8fCB1cmxSZWdleHAudGVzdChhUGF0aCk7XG59O1xuXG4vKipcbiAqIE1ha2UgYSBwYXRoIHJlbGF0aXZlIHRvIGEgVVJMIG9yIGFub3RoZXIgcGF0aC5cbiAqXG4gKiBAcGFyYW0gYVJvb3QgVGhlIHJvb3QgcGF0aCBvciBVUkwuXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgVVJMIHRvIGJlIG1hZGUgcmVsYXRpdmUgdG8gYVJvb3QuXG4gKi9cbmZ1bmN0aW9uIHJlbGF0aXZlKGFSb290LCBhUGF0aCkge1xuICBpZiAoYVJvb3QgPT09IFwiXCIpIHtcbiAgICBhUm9vdCA9IFwiLlwiO1xuICB9XG5cbiAgYVJvb3QgPSBhUm9vdC5yZXBsYWNlKC9cXC8kLywgJycpO1xuXG4gIC8vIEl0IGlzIHBvc3NpYmxlIGZvciB0aGUgcGF0aCB0byBiZSBhYm92ZSB0aGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBzaW1wbHlcbiAgLy8gY2hlY2tpbmcgd2hldGhlciB0aGUgcm9vdCBpcyBhIHByZWZpeCBvZiB0aGUgcGF0aCB3b24ndCB3b3JrLiBJbnN0ZWFkLCB3ZVxuICAvLyBuZWVkIHRvIHJlbW92ZSBjb21wb25lbnRzIGZyb20gdGhlIHJvb3Qgb25lIGJ5IG9uZSwgdW50aWwgZWl0aGVyIHdlIGZpbmRcbiAgLy8gYSBwcmVmaXggdGhhdCBmaXRzLCBvciB3ZSBydW4gb3V0IG9mIGNvbXBvbmVudHMgdG8gcmVtb3ZlLlxuICB2YXIgbGV2ZWwgPSAwO1xuICB3aGlsZSAoYVBhdGguaW5kZXhPZihhUm9vdCArICcvJykgIT09IDApIHtcbiAgICB2YXIgaW5kZXggPSBhUm9vdC5sYXN0SW5kZXhPZihcIi9cIik7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBvbmx5IHBhcnQgb2YgdGhlIHJvb3QgdGhhdCBpcyBsZWZ0IGlzIHRoZSBzY2hlbWUgKGkuZS4gaHR0cDovLyxcbiAgICAvLyBmaWxlOi8vLywgZXRjLiksIG9uZSBvciBtb3JlIHNsYXNoZXMgKC8pLCBvciBzaW1wbHkgbm90aGluZyBhdCBhbGwsIHdlXG4gICAgLy8gaGF2ZSBleGhhdXN0ZWQgYWxsIGNvbXBvbmVudHMsIHNvIHRoZSBwYXRoIGlzIG5vdCByZWxhdGl2ZSB0byB0aGUgcm9vdC5cbiAgICBhUm9vdCA9IGFSb290LnNsaWNlKDAsIGluZGV4KTtcbiAgICBpZiAoYVJvb3QubWF0Y2goL14oW15cXC9dKzpcXC8pP1xcLyokLykpIHtcbiAgICAgIHJldHVybiBhUGF0aDtcbiAgICB9XG5cbiAgICArK2xldmVsO1xuICB9XG5cbiAgLy8gTWFrZSBzdXJlIHdlIGFkZCBhIFwiLi4vXCIgZm9yIGVhY2ggY29tcG9uZW50IHdlIHJlbW92ZWQgZnJvbSB0aGUgcm9vdC5cbiAgcmV0dXJuIEFycmF5KGxldmVsICsgMSkuam9pbihcIi4uL1wiKSArIGFQYXRoLnN1YnN0cihhUm9vdC5sZW5ndGggKyAxKTtcbn1cbmV4cG9ydHMucmVsYXRpdmUgPSByZWxhdGl2ZTtcblxudmFyIHN1cHBvcnRzTnVsbFByb3RvID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAhKCdfX3Byb3RvX18nIGluIG9iaik7XG59KCkpO1xuXG5mdW5jdGlvbiBpZGVudGl0eSAocykge1xuICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBCZWNhdXNlIGJlaGF2aW9yIGdvZXMgd2Fja3kgd2hlbiB5b3Ugc2V0IGBfX3Byb3RvX19gIG9uIG9iamVjdHMsIHdlXG4gKiBoYXZlIHRvIHByZWZpeCBhbGwgdGhlIHN0cmluZ3MgaW4gb3VyIHNldCB3aXRoIGFuIGFyYml0cmFyeSBjaGFyYWN0ZXIuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvcHVsbC8zMSBhbmRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzMwXG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbmZ1bmN0aW9uIHRvU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gJyQnICsgYVN0cjtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy50b1NldFN0cmluZyA9IHN1cHBvcnRzTnVsbFByb3RvID8gaWRlbnRpdHkgOiB0b1NldFN0cmluZztcblxuZnVuY3Rpb24gZnJvbVNldFN0cmluZyhhU3RyKSB7XG4gIGlmIChpc1Byb3RvU3RyaW5nKGFTdHIpKSB7XG4gICAgcmV0dXJuIGFTdHIuc2xpY2UoMSk7XG4gIH1cblxuICByZXR1cm4gYVN0cjtcbn1cbmV4cG9ydHMuZnJvbVNldFN0cmluZyA9IHN1cHBvcnRzTnVsbFByb3RvID8gaWRlbnRpdHkgOiBmcm9tU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBpc1Byb3RvU3RyaW5nKHMpIHtcbiAgaWYgKCFzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGxlbmd0aCA9IHMubGVuZ3RoO1xuXG4gIGlmIChsZW5ndGggPCA5IC8qIFwiX19wcm90b19fXCIubGVuZ3RoICovKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHMuY2hhckNvZGVBdChsZW5ndGggLSAxKSAhPT0gOTUgIC8qICdfJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDIpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMykgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA0KSAhPT0gMTE2IC8qICd0JyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDUpICE9PSAxMTEgLyogJ28nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNikgIT09IDExNCAvKiAncicgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA3KSAhPT0gMTEyIC8qICdwJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDgpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOSkgIT09IDk1ICAvKiAnXycgKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBpID0gbGVuZ3RoIC0gMTA7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSAhPT0gMzYgLyogJyQnICovKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogQ29tcGFyYXRvciBiZXR3ZWVuIHR3byBtYXBwaW5ncyB3aGVyZSB0aGUgb3JpZ2luYWwgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiwgYnV0IGRpZmZlcmVudCBnZW5lcmF0ZWRcbiAqIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhIG1hcHBpbmcgd2l0aCBhXG4gKiBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyhtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlT3JpZ2luYWwpIHtcbiAgdmFyIGNtcCA9IHN0cmNtcChtYXBwaW5nQS5zb3VyY2UsIG1hcHBpbmdCLnNvdXJjZSk7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxMaW5lIC0gbWFwcGluZ0Iub3JpZ2luYWxMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsQ29sdW1uIC0gbWFwcGluZ0Iub3JpZ2luYWxDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0EuZ2VuZXJhdGVkTGluZSAtIG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgcmV0dXJuIHN0cmNtcChtYXBwaW5nQS5uYW1lLCBtYXBwaW5nQi5uYW1lKTtcbn1cbmV4cG9ydHMuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMgPSBjb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucztcblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggZGVmbGF0ZWQgc291cmNlIGFuZCBuYW1lIGluZGljZXMgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYHRydWVgIGFzIGBvbmx5Q29tcGFyZUdlbmVyYXRlZGAgdG8gY29uc2lkZXIgdHdvXG4gKiBtYXBwaW5ncyB3aXRoIHRoZSBzYW1lIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4sIGJ1dCBkaWZmZXJlbnRcbiAqIHNvdXJjZS9uYW1lL29yaWdpbmFsIGxpbmUgYW5kIGNvbHVtbiB0aGUgc2FtZS4gVXNlZnVsIHdoZW4gc2VhcmNoaW5nIGZvciBhXG4gKiBtYXBwaW5nIHdpdGggYSBzdHViYmVkIG91dCBtYXBwaW5nLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IsIG9ubHlDb21wYXJlR2VuZXJhdGVkKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDAgfHwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkO1xuXG5mdW5jdGlvbiBzdHJjbXAoYVN0cjEsIGFTdHIyKSB7XG4gIGlmIChhU3RyMSA9PT0gYVN0cjIpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChhU3RyMSA9PT0gbnVsbCkge1xuICAgIHJldHVybiAxOyAvLyBhU3RyMiAhPT0gbnVsbFxuICB9XG5cbiAgaWYgKGFTdHIyID09PSBudWxsKSB7XG4gICAgcmV0dXJuIC0xOyAvLyBhU3RyMSAhPT0gbnVsbFxuICB9XG5cbiAgaWYgKGFTdHIxID4gYVN0cjIpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdpdGggaW5mbGF0ZWQgc291cmNlIGFuZCBuYW1lIHN0cmluZ3Mgd2hlcmVcbiAqIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb25zIGFyZSBjb21wYXJlZC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIHZhciBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRDb2x1bW4gLSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCA9IGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkO1xuXG4vKipcbiAqIFN0cmlwIGFueSBKU09OIFhTU0kgYXZvaWRhbmNlIHByZWZpeCBmcm9tIHRoZSBzdHJpbmcgKGFzIGRvY3VtZW50ZWRcbiAqIGluIHRoZSBzb3VyY2UgbWFwcyBzcGVjaWZpY2F0aW9uKSwgYW5kIHRoZW4gcGFyc2UgdGhlIHN0cmluZyBhc1xuICogSlNPTi5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTb3VyY2VNYXBJbnB1dChzdHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyLnJlcGxhY2UoL15cXCldfSdbXlxcbl0qXFxuLywgJycpKTtcbn1cbmV4cG9ydHMucGFyc2VTb3VyY2VNYXBJbnB1dCA9IHBhcnNlU291cmNlTWFwSW5wdXQ7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgVVJMIG9mIGEgc291cmNlIGdpdmVuIHRoZSB0aGUgc291cmNlIHJvb3QsIHRoZSBzb3VyY2Unc1xuICogVVJMLCBhbmQgdGhlIHNvdXJjZSBtYXAncyBVUkwuXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgc291cmNlVVJMLCBzb3VyY2VNYXBVUkwpIHtcbiAgc291cmNlVVJMID0gc291cmNlVVJMIHx8ICcnO1xuXG4gIGlmIChzb3VyY2VSb290KSB7XG4gICAgLy8gVGhpcyBmb2xsb3dzIHdoYXQgQ2hyb21lIGRvZXMuXG4gICAgaWYgKHNvdXJjZVJvb3Rbc291cmNlUm9vdC5sZW5ndGggLSAxXSAhPT0gJy8nICYmIHNvdXJjZVVSTFswXSAhPT0gJy8nKSB7XG4gICAgICBzb3VyY2VSb290ICs9ICcvJztcbiAgICB9XG4gICAgLy8gVGhlIHNwZWMgc2F5czpcbiAgICAvLyAgIExpbmUgNDogQW4gb3B0aW9uYWwgc291cmNlIHJvb3QsIHVzZWZ1bCBmb3IgcmVsb2NhdGluZyBzb3VyY2VcbiAgICAvLyAgIGZpbGVzIG9uIGEgc2VydmVyIG9yIHJlbW92aW5nIHJlcGVhdGVkIHZhbHVlcyBpbiB0aGVcbiAgICAvLyAgIOKAnHNvdXJjZXPigJ0gZW50cnkuICBUaGlzIHZhbHVlIGlzIHByZXBlbmRlZCB0byB0aGUgaW5kaXZpZHVhbFxuICAgIC8vICAgZW50cmllcyBpbiB0aGUg4oCcc291cmNl4oCdIGZpZWxkLlxuICAgIHNvdXJjZVVSTCA9IHNvdXJjZVJvb3QgKyBzb3VyY2VVUkw7XG4gIH1cblxuICAvLyBIaXN0b3JpY2FsbHksIFNvdXJjZU1hcENvbnN1bWVyIGRpZCBub3QgdGFrZSB0aGUgc291cmNlTWFwVVJMIGFzXG4gIC8vIGEgcGFyYW1ldGVyLiAgVGhpcyBtb2RlIGlzIHN0aWxsIHNvbWV3aGF0IHN1cHBvcnRlZCwgd2hpY2ggaXMgd2h5XG4gIC8vIHRoaXMgY29kZSBibG9jayBpcyBjb25kaXRpb25hbC4gIEhvd2V2ZXIsIGl0J3MgcHJlZmVyYWJsZSB0byBwYXNzXG4gIC8vIHRoZSBzb3VyY2UgbWFwIFVSTCB0byBTb3VyY2VNYXBDb25zdW1lciwgc28gdGhhdCB0aGlzIGZ1bmN0aW9uXG4gIC8vIGNhbiBpbXBsZW1lbnQgdGhlIHNvdXJjZSBVUkwgcmVzb2x1dGlvbiBhbGdvcml0aG0gYXMgb3V0bGluZWQgaW5cbiAgLy8gdGhlIHNwZWMuICBUaGlzIGJsb2NrIGlzIGJhc2ljYWxseSB0aGUgZXF1aXZhbGVudCBvZjpcbiAgLy8gICAgbmV3IFVSTChzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkudG9TdHJpbmcoKVxuICAvLyAuLi4gZXhjZXB0IGl0IGF2b2lkcyB1c2luZyBVUkwsIHdoaWNoIHdhc24ndCBhdmFpbGFibGUgaW4gdGhlXG4gIC8vIG9sZGVyIHJlbGVhc2VzIG9mIG5vZGUgc3RpbGwgc3VwcG9ydGVkIGJ5IHRoaXMgbGlicmFyeS5cbiAgLy9cbiAgLy8gVGhlIHNwZWMgc2F5czpcbiAgLy8gICBJZiB0aGUgc291cmNlcyBhcmUgbm90IGFic29sdXRlIFVSTHMgYWZ0ZXIgcHJlcGVuZGluZyBvZiB0aGVcbiAgLy8gICDigJxzb3VyY2VSb2904oCdLCB0aGUgc291cmNlcyBhcmUgcmVzb2x2ZWQgcmVsYXRpdmUgdG8gdGhlXG4gIC8vICAgU291cmNlTWFwIChsaWtlIHJlc29sdmluZyBzY3JpcHQgc3JjIGluIGEgaHRtbCBkb2N1bWVudCkuXG4gIGlmIChzb3VyY2VNYXBVUkwpIHtcbiAgICB2YXIgcGFyc2VkID0gdXJsUGFyc2Uoc291cmNlTWFwVVJMKTtcbiAgICBpZiAoIXBhcnNlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic291cmNlTWFwVVJMIGNvdWxkIG5vdCBiZSBwYXJzZWRcIik7XG4gICAgfVxuICAgIGlmIChwYXJzZWQucGF0aCkge1xuICAgICAgLy8gU3RyaXAgdGhlIGxhc3QgcGF0aCBjb21wb25lbnQsIGJ1dCBrZWVwIHRoZSBcIi9cIi5cbiAgICAgIHZhciBpbmRleCA9IHBhcnNlZC5wYXRoLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBwYXJzZWQucGF0aCA9IHBhcnNlZC5wYXRoLnN1YnN0cmluZygwLCBpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VVUkwgPSBqb2luKHVybEdlbmVyYXRlKHBhcnNlZCksIHNvdXJjZVVSTCk7XG4gIH1cblxuICByZXR1cm4gbm9ybWFsaXplKHNvdXJjZVVSTCk7XG59XG5leHBvcnRzLmNvbXB1dGVTb3VyY2VVUkwgPSBjb21wdXRlU291cmNlVVJMO1xuIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsIid1c2Ugc3RyaWN0J1xuXG52YXIgbGVnYWN5ID0gcmVxdWlyZSgnY2hhcmFjdGVyLWVudGl0aWVzLWxlZ2FjeScpXG52YXIgaW52YWxpZCA9IHJlcXVpcmUoJ2NoYXJhY3Rlci1yZWZlcmVuY2UtaW52YWxpZCcpXG52YXIgZGVjaW1hbCA9IHJlcXVpcmUoJ2lzLWRlY2ltYWwnKVxudmFyIGhleGFkZWNpbWFsID0gcmVxdWlyZSgnaXMtaGV4YWRlY2ltYWwnKVxudmFyIGFscGhhbnVtZXJpY2FsID0gcmVxdWlyZSgnaXMtYWxwaGFudW1lcmljYWwnKVxudmFyIGRlY29kZUVudGl0eSA9IHJlcXVpcmUoJy4vZGVjb2RlLWVudGl0eScpXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2VFbnRpdGllc1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgbm9vcCA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuXG4vLyBEZWZhdWx0IHNldHRpbmdzLlxudmFyIGRlZmF1bHRzID0ge1xuICB3YXJuaW5nOiBudWxsLFxuICByZWZlcmVuY2U6IG51bGwsXG4gIHRleHQ6IG51bGwsXG4gIHdhcm5pbmdDb250ZXh0OiBudWxsLFxuICByZWZlcmVuY2VDb250ZXh0OiBudWxsLFxuICB0ZXh0Q29udGV4dDogbnVsbCxcbiAgcG9zaXRpb246IHt9LFxuICBhZGRpdGlvbmFsOiBudWxsLFxuICBhdHRyaWJ1dGU6IGZhbHNlLFxuICBub25UZXJtaW5hdGVkOiB0cnVlXG59XG5cbi8vIENoYXJhY3RlcnMuXG52YXIgdGFiID0gOSAvLyAnXFx0J1xudmFyIGxpbmVGZWVkID0gMTAgLy8gJ1xcbidcbnZhciBmb3JtRmVlZCA9IDEyIC8vICAnXFxmJ1xudmFyIHNwYWNlID0gMzIgLy8gJyAnXG52YXIgYW1wZXJzYW5kID0gMzggLy8gICcmJ1xudmFyIHNlbWljb2xvbiA9IDU5IC8vICAnOydcbnZhciBsZXNzVGhhbiA9IDYwIC8vICAnPCdcbnZhciBlcXVhbHNUbyA9IDYxIC8vICAnPSdcbnZhciBudW1iZXJTaWduID0gMzUgLy8gICcjJ1xudmFyIHVwcGVyY2FzZVggPSA4OCAvLyAgJ1gnXG52YXIgbG93ZXJjYXNlWCA9IDEyMCAvLyAgJ3gnXG52YXIgcmVwbGFjZW1lbnRDaGFyYWN0ZXIgPSA2NTUzMyAvLyAn77+9J1xuXG4vLyBSZWZlcmVuY2UgdHlwZXMuXG52YXIgbmFtZSA9ICduYW1lZCdcbnZhciBoZXhhID0gJ2hleGFkZWNpbWFsJ1xudmFyIGRlY2kgPSAnZGVjaW1hbCdcblxuLy8gTWFwIG9mIGJhc2VzLlxudmFyIGJhc2VzID0ge31cblxuYmFzZXNbaGV4YV0gPSAxNlxuYmFzZXNbZGVjaV0gPSAxMFxuXG4vLyBNYXAgb2YgdHlwZXMgdG8gdGVzdHMuXG4vLyBFYWNoIHR5cGUgb2YgY2hhcmFjdGVyIHJlZmVyZW5jZSBhY2NlcHRzIGRpZmZlcmVudCBjaGFyYWN0ZXJzLlxuLy8gVGhpcyB0ZXN0IGlzIHVzZWQgdG8gZGV0ZWN0IHdoZXRoZXIgYSByZWZlcmVuY2UgaGFzIGVuZGVkIChhcyB0aGUgc2VtaWNvbG9uXG4vLyBpcyBub3Qgc3RyaWN0bHkgbmVlZGVkKS5cbnZhciB0ZXN0cyA9IHt9XG5cbnRlc3RzW25hbWVdID0gYWxwaGFudW1lcmljYWxcbnRlc3RzW2RlY2ldID0gZGVjaW1hbFxudGVzdHNbaGV4YV0gPSBoZXhhZGVjaW1hbFxuXG4vLyBXYXJuaW5nIHR5cGVzLlxudmFyIG5hbWVkTm90VGVybWluYXRlZCA9IDFcbnZhciBudW1lcmljTm90VGVybWluYXRlZCA9IDJcbnZhciBuYW1lZEVtcHR5ID0gM1xudmFyIG51bWVyaWNFbXB0eSA9IDRcbnZhciBuYW1lZFVua25vd24gPSA1XG52YXIgbnVtZXJpY0Rpc2FsbG93ZWQgPSA2XG52YXIgbnVtZXJpY1Byb2hpYml0ZWQgPSA3XG5cbi8vIFdhcm5pbmcgbWVzc2FnZXMuXG52YXIgbWVzc2FnZXMgPSB7fVxuXG5tZXNzYWdlc1tuYW1lZE5vdFRlcm1pbmF0ZWRdID1cbiAgJ05hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIG11c3QgYmUgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcbm1lc3NhZ2VzW251bWVyaWNOb3RUZXJtaW5hdGVkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIG11c3QgYmUgdGVybWluYXRlZCBieSBhIHNlbWljb2xvbidcbm1lc3NhZ2VzW25hbWVkRW1wdHldID0gJ05hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBlbXB0eSdcbm1lc3NhZ2VzW251bWVyaWNFbXB0eV0gPSAnTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlcyBjYW5ub3QgYmUgZW1wdHknXG5tZXNzYWdlc1tuYW1lZFVua25vd25dID0gJ05hbWVkIGNoYXJhY3RlciByZWZlcmVuY2VzIG11c3QgYmUga25vd24nXG5tZXNzYWdlc1tudW1lcmljRGlzYWxsb3dlZF0gPVxuICAnTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlcyBjYW5ub3QgYmUgZGlzYWxsb3dlZCdcbm1lc3NhZ2VzW251bWVyaWNQcm9oaWJpdGVkXSA9XG4gICdOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2VzIGNhbm5vdCBiZSBvdXRzaWRlIHRoZSBwZXJtaXNzaWJsZSBVbmljb2RlIHJhbmdlJ1xuXG4vLyBXcmFwIHRvIGVuc3VyZSBjbGVhbiBwYXJhbWV0ZXJzIGFyZSBnaXZlbiB0byBgcGFyc2VgLlxuZnVuY3Rpb24gcGFyc2VFbnRpdGllcyh2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSB7fVxuICB2YXIgb3B0aW9uXG4gIHZhciBrZXlcblxuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG4gICAgb3B0aW9uID0gb3B0aW9uc1trZXldXG4gICAgc2V0dGluZ3Nba2V5XSA9XG4gICAgICBvcHRpb24gPT09IG51bGwgfHwgb3B0aW9uID09PSB1bmRlZmluZWQgPyBkZWZhdWx0c1trZXldIDogb3B0aW9uXG4gIH1cblxuICBpZiAoc2V0dGluZ3MucG9zaXRpb24uaW5kZW50IHx8IHNldHRpbmdzLnBvc2l0aW9uLnN0YXJ0KSB7XG4gICAgc2V0dGluZ3MuaW5kZW50ID0gc2V0dGluZ3MucG9zaXRpb24uaW5kZW50IHx8IFtdXG4gICAgc2V0dGluZ3MucG9zaXRpb24gPSBzZXR0aW5ncy5wb3NpdGlvbi5zdGFydFxuICB9XG5cbiAgcmV0dXJuIHBhcnNlKHZhbHVlLCBzZXR0aW5ncylcbn1cblxuLy8gUGFyc2UgZW50aXRpZXMuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gcGFyc2UodmFsdWUsIHNldHRpbmdzKSB7XG4gIHZhciBhZGRpdGlvbmFsID0gc2V0dGluZ3MuYWRkaXRpb25hbFxuICB2YXIgbm9uVGVybWluYXRlZCA9IHNldHRpbmdzLm5vblRlcm1pbmF0ZWRcbiAgdmFyIGhhbmRsZVRleHQgPSBzZXR0aW5ncy50ZXh0XG4gIHZhciBoYW5kbGVSZWZlcmVuY2UgPSBzZXR0aW5ncy5yZWZlcmVuY2VcbiAgdmFyIGhhbmRsZVdhcm5pbmcgPSBzZXR0aW5ncy53YXJuaW5nXG4gIHZhciB0ZXh0Q29udGV4dCA9IHNldHRpbmdzLnRleHRDb250ZXh0XG4gIHZhciByZWZlcmVuY2VDb250ZXh0ID0gc2V0dGluZ3MucmVmZXJlbmNlQ29udGV4dFxuICB2YXIgd2FybmluZ0NvbnRleHQgPSBzZXR0aW5ncy53YXJuaW5nQ29udGV4dFxuICB2YXIgcG9zID0gc2V0dGluZ3MucG9zaXRpb25cbiAgdmFyIGluZGVudCA9IHNldHRpbmdzLmluZGVudCB8fCBbXVxuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIGxpbmVzID0gLTFcbiAgdmFyIGNvbHVtbiA9IHBvcy5jb2x1bW4gfHwgMVxuICB2YXIgbGluZSA9IHBvcy5saW5lIHx8IDFcbiAgdmFyIHF1ZXVlID0gJydcbiAgdmFyIHJlc3VsdCA9IFtdXG4gIHZhciBlbnRpdHlDaGFyYWN0ZXJzXG4gIHZhciBuYW1lZEVudGl0eVxuICB2YXIgdGVybWluYXRlZFxuICB2YXIgY2hhcmFjdGVyc1xuICB2YXIgY2hhcmFjdGVyXG4gIHZhciByZWZlcmVuY2VcbiAgdmFyIGZvbGxvd2luZ1xuICB2YXIgd2FybmluZ1xuICB2YXIgcmVhc29uXG4gIHZhciBvdXRwdXRcbiAgdmFyIGVudGl0eVxuICB2YXIgYmVnaW5cbiAgdmFyIHN0YXJ0XG4gIHZhciB0eXBlXG4gIHZhciB0ZXN0XG4gIHZhciBwcmV2XG4gIHZhciBuZXh0XG4gIHZhciBkaWZmXG4gIHZhciBlbmRcblxuICBpZiAodHlwZW9mIGFkZGl0aW9uYWwgPT09ICdzdHJpbmcnKSB7XG4gICAgYWRkaXRpb25hbCA9IGFkZGl0aW9uYWwuY2hhckNvZGVBdCgwKVxuICB9XG5cbiAgLy8gQ2FjaGUgdGhlIGN1cnJlbnQgcG9pbnQuXG4gIHByZXYgPSBub3coKVxuXG4gIC8vIFdyYXAgYGhhbmRsZVdhcm5pbmdgLlxuICB3YXJuaW5nID0gaGFuZGxlV2FybmluZyA/IHBhcnNlRXJyb3IgOiBub29wXG5cbiAgLy8gRW5zdXJlIHRoZSBhbGdvcml0aG0gd2Fsa3Mgb3ZlciB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCB0aGUgZW5kIChpbmNsdXNpdmUpLlxuICBpbmRleC0tXG4gIGxlbmd0aCsrXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAvLyBJZiB0aGUgcHJldmlvdXMgY2hhcmFjdGVyIHdhcyBhIG5ld2xpbmUuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gbGluZUZlZWQpIHtcbiAgICAgIGNvbHVtbiA9IGluZGVudFtsaW5lc10gfHwgMVxuICAgIH1cblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBhbXBlcnNhbmQpIHtcbiAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAxKVxuXG4gICAgICAvLyBUaGUgYmVoYXZpb3VyIGRlcGVuZHMgb24gdGhlIGlkZW50aXR5IG9mIHRoZSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIGlmIChcbiAgICAgICAgZm9sbG93aW5nID09PSB0YWIgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBsaW5lRmVlZCB8fFxuICAgICAgICBmb2xsb3dpbmcgPT09IGZvcm1GZWVkIHx8XG4gICAgICAgIGZvbGxvd2luZyA9PT0gc3BhY2UgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBhbXBlcnNhbmQgfHxcbiAgICAgICAgZm9sbG93aW5nID09PSBsZXNzVGhhbiB8fFxuICAgICAgICBmb2xsb3dpbmcgIT09IGZvbGxvd2luZyB8fFxuICAgICAgICAoYWRkaXRpb25hbCAmJiBmb2xsb3dpbmcgPT09IGFkZGl0aW9uYWwpXG4gICAgICApIHtcbiAgICAgICAgLy8gTm90IGEgY2hhcmFjdGVyIHJlZmVyZW5jZS5cbiAgICAgICAgLy8gTm8gY2hhcmFjdGVycyBhcmUgY29uc3VtZWQsIGFuZCBub3RoaW5nIGlzIHJldHVybmVkLlxuICAgICAgICAvLyBUaGlzIGlzIG5vdCBhbiBlcnJvciwgZWl0aGVyLlxuICAgICAgICBxdWV1ZSArPSBmcm9tQ2hhckNvZGUoY2hhcmFjdGVyKVxuICAgICAgICBjb2x1bW4rK1xuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHN0YXJ0ID0gaW5kZXggKyAxXG4gICAgICBiZWdpbiA9IHN0YXJ0XG4gICAgICBlbmQgPSBzdGFydFxuXG4gICAgICBpZiAoZm9sbG93aW5nID09PSBudW1iZXJTaWduKSB7XG4gICAgICAgIC8vIE51bWVyaWNhbCBlbnRpdHkuXG4gICAgICAgIGVuZCA9ICsrYmVnaW5cblxuICAgICAgICAvLyBUaGUgYmVoYXZpb3VyIGZ1cnRoZXIgZGVwZW5kcyBvbiB0aGUgbmV4dCBjaGFyYWN0ZXIuXG4gICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgIGlmIChmb2xsb3dpbmcgPT09IHVwcGVyY2FzZVggfHwgZm9sbG93aW5nID09PSBsb3dlcmNhc2VYKSB7XG4gICAgICAgICAgLy8gQVNDSUkgaGV4IGRpZ2l0cy5cbiAgICAgICAgICB0eXBlID0gaGV4YVxuICAgICAgICAgIGVuZCA9ICsrYmVnaW5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBU0NJSSBkaWdpdHMuXG4gICAgICAgICAgdHlwZSA9IGRlY2lcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTmFtZWQgZW50aXR5LlxuICAgICAgICB0eXBlID0gbmFtZVxuICAgICAgfVxuXG4gICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gJydcbiAgICAgIGVudGl0eSA9ICcnXG4gICAgICBjaGFyYWN0ZXJzID0gJydcbiAgICAgIHRlc3QgPSB0ZXN0c1t0eXBlXVxuICAgICAgZW5kLS1cblxuICAgICAgd2hpbGUgKCsrZW5kIDwgbGVuZ3RoKSB7XG4gICAgICAgIGZvbGxvd2luZyA9IHZhbHVlLmNoYXJDb2RlQXQoZW5kKVxuXG4gICAgICAgIGlmICghdGVzdChmb2xsb3dpbmcpKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYXJhY3RlcnMgKz0gZnJvbUNoYXJDb2RlKGZvbGxvd2luZylcblxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBjYW4gbWF0Y2ggYSBsZWdhY3kgbmFtZWQgcmVmZXJlbmNlLlxuICAgICAgICAvLyBJZiBzbywgd2UgY2FjaGUgdGhhdCBhcyB0aGUgbGFzdCB2aWFibGUgbmFtZWQgcmVmZXJlbmNlLlxuICAgICAgICAvLyBUaGlzIGVuc3VyZXMgd2UgZG8gbm90IG5lZWQgdG8gd2FsayBiYWNrd2FyZHMgbGF0ZXIuXG4gICAgICAgIGlmICh0eXBlID09PSBuYW1lICYmIG93bi5jYWxsKGxlZ2FjeSwgY2hhcmFjdGVycykpIHtcbiAgICAgICAgICBlbnRpdHlDaGFyYWN0ZXJzID0gY2hhcmFjdGVyc1xuICAgICAgICAgIGVudGl0eSA9IGxlZ2FjeVtjaGFyYWN0ZXJzXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRlcm1pbmF0ZWQgPSB2YWx1ZS5jaGFyQ29kZUF0KGVuZCkgPT09IHNlbWljb2xvblxuXG4gICAgICBpZiAodGVybWluYXRlZCkge1xuICAgICAgICBlbmQrK1xuXG4gICAgICAgIG5hbWVkRW50aXR5ID0gdHlwZSA9PT0gbmFtZSA/IGRlY29kZUVudGl0eShjaGFyYWN0ZXJzKSA6IGZhbHNlXG5cbiAgICAgICAgaWYgKG5hbWVkRW50aXR5KSB7XG4gICAgICAgICAgZW50aXR5Q2hhcmFjdGVycyA9IGNoYXJhY3RlcnNcbiAgICAgICAgICBlbnRpdHkgPSBuYW1lZEVudGl0eVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRpZmYgPSAxICsgZW5kIC0gc3RhcnRcblxuICAgICAgaWYgKCF0ZXJtaW5hdGVkICYmICFub25UZXJtaW5hdGVkKSB7XG4gICAgICAgIC8vIEVtcHR5LlxuICAgICAgfSBlbHNlIGlmICghY2hhcmFjdGVycykge1xuICAgICAgICAvLyBBbiBlbXB0eSAocG9zc2libGUpIGVudGl0eSBpcyB2YWxpZCwgdW5sZXNzIGl04oCZcyBudW1lcmljICh0aHVzIGFuXG4gICAgICAgIC8vIGFtcGVyc2FuZCBmb2xsb3dlZCBieSBhbiBvY3RvdGhvcnApLlxuICAgICAgICBpZiAodHlwZSAhPT0gbmFtZSkge1xuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0VtcHR5LCBkaWZmKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IG5hbWUpIHtcbiAgICAgICAgLy8gQW4gYW1wZXJzYW5kIGZvbGxvd2VkIGJ5IGFueXRoaW5nIHVua25vd24sIGFuZCBub3QgdGVybWluYXRlZCwgaXNcbiAgICAgICAgLy8gaW52YWxpZC5cbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQgJiYgIWVudGl0eSkge1xuICAgICAgICAgIHdhcm5pbmcobmFtZWRVbmtub3duLCAxKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIHRoZXJlcyBzb21ldGhpbmcgYWZ0ZXIgYW4gZW50aXR5IG5hbWUgd2hpY2ggaXMgbm90IGtub3duLCBjYXBcbiAgICAgICAgICAvLyB0aGUgcmVmZXJlbmNlLlxuICAgICAgICAgIGlmIChlbnRpdHlDaGFyYWN0ZXJzICE9PSBjaGFyYWN0ZXJzKSB7XG4gICAgICAgICAgICBlbmQgPSBiZWdpbiArIGVudGl0eUNoYXJhY3RlcnMubGVuZ3RoXG4gICAgICAgICAgICBkaWZmID0gMSArIGVuZCAtIGJlZ2luXG4gICAgICAgICAgICB0ZXJtaW5hdGVkID0gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJZiB0aGUgcmVmZXJlbmNlIGlzIG5vdCB0ZXJtaW5hdGVkLCB3YXJuLlxuICAgICAgICAgIGlmICghdGVybWluYXRlZCkge1xuICAgICAgICAgICAgcmVhc29uID0gZW50aXR5Q2hhcmFjdGVycyA/IG5hbWVkTm90VGVybWluYXRlZCA6IG5hbWVkRW1wdHlcblxuICAgICAgICAgICAgaWYgKHNldHRpbmdzLmF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICBmb2xsb3dpbmcgPSB2YWx1ZS5jaGFyQ29kZUF0KGVuZClcblxuICAgICAgICAgICAgICBpZiAoZm9sbG93aW5nID09PSBlcXVhbHNUbykge1xuICAgICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgICAgIGVudGl0eSA9IG51bGxcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbHBoYW51bWVyaWNhbChmb2xsb3dpbmcpKSB7XG4gICAgICAgICAgICAgICAgZW50aXR5ID0gbnVsbFxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdhcm5pbmcocmVhc29uLCBkaWZmKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3YXJuaW5nKHJlYXNvbiwgZGlmZilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZWZlcmVuY2UgPSBlbnRpdHlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGVybWluYXRlZCkge1xuICAgICAgICAgIC8vIEFsbCBub24tdGVybWluYXRlZCBudW1lcmljIGVudGl0aWVzIGFyZSBub3QgcmVuZGVyZWQsIGFuZCB0cmlnZ2VyIGFcbiAgICAgICAgICAvLyB3YXJuaW5nLlxuICAgICAgICAgIHdhcm5pbmcobnVtZXJpY05vdFRlcm1pbmF0ZWQsIGRpZmYpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRlcm1pbmF0ZWQgYW5kIG51bWJlciwgcGFyc2UgYXMgZWl0aGVyIGhleGFkZWNpbWFsIG9yIGRlY2ltYWwuXG4gICAgICAgIHJlZmVyZW5jZSA9IHBhcnNlSW50KGNoYXJhY3RlcnMsIGJhc2VzW3R5cGVdKVxuXG4gICAgICAgIC8vIFRyaWdnZXIgYSB3YXJuaW5nIHdoZW4gdGhlIHBhcnNlZCBudW1iZXIgaXMgcHJvaGliaXRlZCwgYW5kIHJlcGxhY2VcbiAgICAgICAgLy8gd2l0aCByZXBsYWNlbWVudCBjaGFyYWN0ZXIuXG4gICAgICAgIGlmIChwcm9oaWJpdGVkKHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICB3YXJuaW5nKG51bWVyaWNQcm9oaWJpdGVkLCBkaWZmKVxuICAgICAgICAgIHJlZmVyZW5jZSA9IGZyb21DaGFyQ29kZShyZXBsYWNlbWVudENoYXJhY3RlcilcbiAgICAgICAgfSBlbHNlIGlmIChyZWZlcmVuY2UgaW4gaW52YWxpZCkge1xuICAgICAgICAgIC8vIFRyaWdnZXIgYSB3YXJuaW5nIHdoZW4gdGhlIHBhcnNlZCBudW1iZXIgaXMgZGlzYWxsb3dlZCwgYW5kIHJlcGxhY2VcbiAgICAgICAgICAvLyBieSBhbiBhbHRlcm5hdGl2ZS5cbiAgICAgICAgICB3YXJuaW5nKG51bWVyaWNEaXNhbGxvd2VkLCBkaWZmKVxuICAgICAgICAgIHJlZmVyZW5jZSA9IGludmFsaWRbcmVmZXJlbmNlXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFBhcnNlIHRoZSBudW1iZXIuXG4gICAgICAgICAgb3V0cHV0ID0gJydcblxuICAgICAgICAgIC8vIFRyaWdnZXIgYSB3YXJuaW5nIHdoZW4gdGhlIHBhcnNlZCBudW1iZXIgc2hvdWxkIG5vdCBiZSB1c2VkLlxuICAgICAgICAgIGlmIChkaXNhbGxvd2VkKHJlZmVyZW5jZSkpIHtcbiAgICAgICAgICAgIHdhcm5pbmcobnVtZXJpY0Rpc2FsbG93ZWQsIGRpZmYpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3RyaW5naWZ5IHRoZSBudW1iZXIuXG4gICAgICAgICAgaWYgKHJlZmVyZW5jZSA+IDB4ZmZmZikge1xuICAgICAgICAgICAgcmVmZXJlbmNlIC09IDB4MTAwMDBcbiAgICAgICAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoKHJlZmVyZW5jZSA+Pj4gKDEwICYgMHgzZmYpKSB8IDB4ZDgwMClcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IDB4ZGMwMCB8IChyZWZlcmVuY2UgJiAweDNmZilcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZWZlcmVuY2UgPSBvdXRwdXQgKyBmcm9tQ2hhckNvZGUocmVmZXJlbmNlKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZvdW5kIGl0IVxuICAgICAgLy8gRmlyc3QgZWF0IHRoZSBxdWV1ZWQgY2hhcmFjdGVycyBhcyBub3JtYWwgdGV4dCwgdGhlbiBlYXQgYW4gZW50aXR5LlxuICAgICAgaWYgKHJlZmVyZW5jZSkge1xuICAgICAgICBmbHVzaCgpXG5cbiAgICAgICAgcHJldiA9IG5vdygpXG4gICAgICAgIGluZGV4ID0gZW5kIC0gMVxuICAgICAgICBjb2x1bW4gKz0gZW5kIC0gc3RhcnQgKyAxXG4gICAgICAgIHJlc3VsdC5wdXNoKHJlZmVyZW5jZSlcbiAgICAgICAgbmV4dCA9IG5vdygpXG4gICAgICAgIG5leHQub2Zmc2V0KytcblxuICAgICAgICBpZiAoaGFuZGxlUmVmZXJlbmNlKSB7XG4gICAgICAgICAgaGFuZGxlUmVmZXJlbmNlLmNhbGwoXG4gICAgICAgICAgICByZWZlcmVuY2VDb250ZXh0LFxuICAgICAgICAgICAgcmVmZXJlbmNlLFxuICAgICAgICAgICAge3N0YXJ0OiBwcmV2LCBlbmQ6IG5leHR9LFxuICAgICAgICAgICAgdmFsdWUuc2xpY2Uoc3RhcnQgLSAxLCBlbmQpXG4gICAgICAgICAgKVxuICAgICAgICB9XG5cbiAgICAgICAgcHJldiA9IG5leHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElmIHdlIGNvdWxkIG5vdCBmaW5kIGEgcmVmZXJlbmNlLCBxdWV1ZSB0aGUgY2hlY2tlZCBjaGFyYWN0ZXJzIChhc1xuICAgICAgICAvLyBub3JtYWwgY2hhcmFjdGVycyksIGFuZCBtb3ZlIHRoZSBwb2ludGVyIHRvIHRoZWlyIGVuZC5cbiAgICAgICAgLy8gVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIHdlIGNhbiBiZSBjZXJ0YWluIG5laXRoZXIgbmV3bGluZXMgbm9yXG4gICAgICAgIC8vIGFtcGVyc2FuZHMgYXJlIGluY2x1ZGVkLlxuICAgICAgICBjaGFyYWN0ZXJzID0gdmFsdWUuc2xpY2Uoc3RhcnQgLSAxLCBlbmQpXG4gICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcnNcbiAgICAgICAgY29sdW1uICs9IGNoYXJhY3RlcnMubGVuZ3RoXG4gICAgICAgIGluZGV4ID0gZW5kIC0gMVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBIYW5kbGUgYW55dGhpbmcgb3RoZXIgdGhhbiBhbiBhbXBlcnNhbmQsIGluY2x1ZGluZyBuZXdsaW5lcyBhbmQgRU9GLlxuICAgICAgaWYgKFxuICAgICAgICBjaGFyYWN0ZXIgPT09IDEwIC8vIExpbmUgZmVlZFxuICAgICAgKSB7XG4gICAgICAgIGxpbmUrK1xuICAgICAgICBsaW5lcysrXG4gICAgICAgIGNvbHVtbiA9IDBcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gY2hhcmFjdGVyKSB7XG4gICAgICAgIHF1ZXVlICs9IGZyb21DaGFyQ29kZShjaGFyYWN0ZXIpXG4gICAgICAgIGNvbHVtbisrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbHVzaCgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIHRoZSByZWR1Y2VkIG5vZGVzLCBhbmQgYW55IHBvc3NpYmxlIHdhcm5pbmdzLlxuICByZXR1cm4gcmVzdWx0LmpvaW4oJycpXG5cbiAgLy8gR2V0IGN1cnJlbnQgcG9zaXRpb24uXG4gIGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbGluZSxcbiAgICAgIGNvbHVtbjogY29sdW1uLFxuICAgICAgb2Zmc2V0OiBpbmRleCArIChwb3Mub2Zmc2V0IHx8IDApXG4gICAgfVxuICB9XG5cbiAgLy8g4oCcVGhyb3figJ0gYSBwYXJzZS1lcnJvcjogYSB3YXJuaW5nLlxuICBmdW5jdGlvbiBwYXJzZUVycm9yKGNvZGUsIG9mZnNldCkge1xuICAgIHZhciBwb3NpdGlvbiA9IG5vdygpXG5cbiAgICBwb3NpdGlvbi5jb2x1bW4gKz0gb2Zmc2V0XG4gICAgcG9zaXRpb24ub2Zmc2V0ICs9IG9mZnNldFxuXG4gICAgaGFuZGxlV2FybmluZy5jYWxsKHdhcm5pbmdDb250ZXh0LCBtZXNzYWdlc1tjb2RlXSwgcG9zaXRpb24sIGNvZGUpXG4gIH1cblxuICAvLyBGbHVzaCBgcXVldWVgIChub3JtYWwgdGV4dCkuXG4gIC8vIE1hY3JvIGludm9rZWQgYmVmb3JlIGVhY2ggZW50aXR5IGFuZCBhdCB0aGUgZW5kIG9mIGB2YWx1ZWAuXG4gIC8vIERvZXMgbm90aGluZyB3aGVuIGBxdWV1ZWAgaXMgZW1wdHkuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChxdWV1ZSkge1xuICAgICAgcmVzdWx0LnB1c2gocXVldWUpXG5cbiAgICAgIGlmIChoYW5kbGVUZXh0KSB7XG4gICAgICAgIGhhbmRsZVRleHQuY2FsbCh0ZXh0Q29udGV4dCwgcXVldWUsIHtzdGFydDogcHJldiwgZW5kOiBub3coKX0pXG4gICAgICB9XG5cbiAgICAgIHF1ZXVlID0gJydcbiAgICB9XG4gIH1cbn1cblxuLy8gQ2hlY2sgaWYgYGNoYXJhY3RlcmAgaXMgb3V0c2lkZSB0aGUgcGVybWlzc2libGUgdW5pY29kZSByYW5nZS5cbmZ1bmN0aW9uIHByb2hpYml0ZWQoY29kZSkge1xuICByZXR1cm4gKGNvZGUgPj0gMHhkODAwICYmIGNvZGUgPD0gMHhkZmZmKSB8fCBjb2RlID4gMHgxMGZmZmZcbn1cblxuLy8gQ2hlY2sgaWYgYGNoYXJhY3RlcmAgaXMgZGlzYWxsb3dlZC5cbmZ1bmN0aW9uIGRpc2FsbG93ZWQoY29kZSkge1xuICByZXR1cm4gKFxuICAgIChjb2RlID49IDB4MDAwMSAmJiBjb2RlIDw9IDB4MDAwOCkgfHxcbiAgICBjb2RlID09PSAweDAwMGIgfHxcbiAgICAoY29kZSA+PSAweDAwMGQgJiYgY29kZSA8PSAweDAwMWYpIHx8XG4gICAgKGNvZGUgPj0gMHgwMDdmICYmIGNvZGUgPD0gMHgwMDlmKSB8fFxuICAgIChjb2RlID49IDB4ZmRkMCAmJiBjb2RlIDw9IDB4ZmRlZikgfHxcbiAgICAoY29kZSAmIDB4ZmZmZikgPT09IDB4ZmZmZiB8fFxuICAgIChjb2RlICYgMHhmZmZmKSA9PT0gMHhmZmZlXG4gIClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY2ltYWxcblxuLy8gQ2hlY2sgaWYgdGhlIGdpdmVuIGNoYXJhY3RlciBjb2RlLCBvciB0aGUgY2hhcmFjdGVyIGNvZGUgYXQgdGhlIGZpcnN0XG4vLyBjaGFyYWN0ZXIsIGlzIGRlY2ltYWwuXG5mdW5jdGlvbiBkZWNpbWFsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3IC8qIDAtOSAqL1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRcblxudmFyIHZpc2l0UGFyZW50cyA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQtcGFyZW50cycpXG5cbnZhciBDT05USU5VRSA9IHZpc2l0UGFyZW50cy5DT05USU5VRVxudmFyIFNLSVAgPSB2aXNpdFBhcmVudHMuU0tJUFxudmFyIEVYSVQgPSB2aXNpdFBhcmVudHMuRVhJVFxuXG52aXNpdC5DT05USU5VRSA9IENPTlRJTlVFXG52aXNpdC5TS0lQID0gU0tJUFxudmlzaXQuRVhJVCA9IEVYSVRcblxuZnVuY3Rpb24gdmlzaXQodHJlZSwgdGVzdCwgdmlzaXRvciwgcmV2ZXJzZSkge1xuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZpc2l0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXZlcnNlID0gdmlzaXRvclxuICAgIHZpc2l0b3IgPSB0ZXN0XG4gICAgdGVzdCA9IG51bGxcbiAgfVxuXG4gIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCBvdmVybG9hZCwgcmV2ZXJzZSlcblxuICBmdW5jdGlvbiBvdmVybG9hZChub2RlLCBwYXJlbnRzKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbcGFyZW50cy5sZW5ndGggLSAxXVxuICAgIHZhciBpbmRleCA9IHBhcmVudCA/IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG5vZGUpIDogbnVsbFxuICAgIHJldHVybiB2aXNpdG9yKG5vZGUsIGluZGV4LCBwYXJlbnQpXG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImJ1ZmZlclwiKTsiLCIndXNlIHN0cmljdCc7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAhcHJvY2Vzcy52ZXJzaW9uIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YwLicpID09PSAwIHx8XG4gICAgcHJvY2Vzcy52ZXJzaW9uLmluZGV4T2YoJ3YxLicpID09PSAwICYmIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS44LicpICE9PSAwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0geyBuZXh0VGljazogbmV4dFRpY2sgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayhmbiwgYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJjYWxsYmFja1wiIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncywgaTtcbiAgc3dpdGNoIChsZW4pIHtcbiAgY2FzZSAwOlxuICBjYXNlIDE6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pO1xuICBjYXNlIDI6XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkge1xuICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTtcbiAgICB9KTtcbiAgY2FzZSAzOlxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7XG4gICAgfSk7XG4gIGNhc2UgNDpcbiAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgfSk7XG4gIGRlZmF1bHQ6XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTtcbiAgICBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHtcbiAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG59XG5cbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vZGUvbm8tZGVwcmVjYXRlZC1hcGkgKi9cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxuLy8gYWx0ZXJuYXRpdmUgdG8gdXNpbmcgT2JqZWN0LmtleXMgZm9yIG9sZCBicm93c2Vyc1xuZnVuY3Rpb24gY29weVByb3BzIChzcmMsIGRzdCkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSB7XG4gICAgZHN0W2tleV0gPSBzcmNba2V5XVxuICB9XG59XG5pZiAoQnVmZmVyLmZyb20gJiYgQnVmZmVyLmFsbG9jICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZSAmJiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93KSB7XG4gIG1vZHVsZS5leHBvcnRzID0gYnVmZmVyXG59IGVsc2Uge1xuICAvLyBDb3B5IHByb3BlcnRpZXMgZnJvbSByZXF1aXJlKCdidWZmZXInKVxuICBjb3B5UHJvcHMoYnVmZmVyLCBleHBvcnRzKVxuICBleHBvcnRzLkJ1ZmZlciA9IFNhZmVCdWZmZXJcbn1cblxuZnVuY3Rpb24gU2FmZUJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi9kZWZpbmVQcm9wZXJ0eVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBPYmplY3QoYXJndW1lbnRzW2ldKSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFNwcmVhZDsiLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25TdG9yZUNvbnN0YW50XG4gKlxuICogVGhpcyBhY3Rpb24gc3RvcmVzIHRoZSB2YWx1ZSBzcGVjaWZpZWQgYnkgdGhlIGNvbnN0IGtleXdvcmQgYXJndW1lbnQuXG4gKiAoTm90ZSB0aGF0IHRoZSBjb25zdCBrZXl3b3JkIGFyZ3VtZW50IGRlZmF1bHRzIHRvIHRoZSByYXRoZXIgdW5oZWxwZnVsIG51bGwuKVxuICogVGhlICdzdG9yZV9jb25zdCcgYWN0aW9uIGlzIG1vc3QgY29tbW9ubHkgdXNlZCB3aXRoIG9wdGlvbmFsXG4gKiBhcmd1bWVudHMgdGhhdCBzcGVjaWZ5IHNvbWUgc29ydCBvZiBmbGFnLlxuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBY3Rpb25dXVxuICoqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEFjdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2FjdGlvbicpO1xuXG4vKjpub2RvYzoqXG4gKiBuZXcgQWN0aW9uU3RvcmVDb25zdGFudChvcHRpb25zKVxuICogLSBvcHRpb25zIChvYmplY3QpOiBvcHRpb25zIGhhc2ggc2VlIFtbQWN0aW9uLm5ld11dXG4gKlxuICoqL1xudmFyIEFjdGlvblN0b3JlQ29uc3RhbnQgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFjdGlvblN0b3JlQ29uc3RhbnQob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5uYXJncyA9IDA7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5jb25zdGFudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbnN0YW50IG9wdGlvbiBpcyByZXF1aXJlZCBmb3Igc3RvcmVBY3Rpb24nKTtcbiAgfVxuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG51dGlsLmluaGVyaXRzKEFjdGlvblN0b3JlQ29uc3RhbnQsIEFjdGlvbik7XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvblN0b3JlQ29uc3RhbnQjY2FsbChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzLCBvcHRpb25TdHJpbmcpIC0+IFZvaWRcbiAqIC0gcGFyc2VyIChBcmd1bWVudFBhcnNlcik6IGN1cnJlbnQgcGFyc2VyXG4gKiAtIG5hbWVzcGFjZSAoTmFtZXNwYWNlKTogbmFtZXNwYWNlIGZvciBvdXRwdXQgZGF0YVxuICogLSB2YWx1ZXMgKEFycmF5KTogcGFyc2VkIHZhbHVlc1xuICogLSBvcHRpb25TdHJpbmcgKEFycmF5KTogaW5wdXQgb3B0aW9uIHN0cmluZyhub3QgcGFyc2VkKVxuICpcbiAqIENhbGwgdGhlIGFjdGlvbi4gU2F2ZSByZXN1bHQgaW4gbmFtZXNwYWNlIG9iamVjdFxuICoqL1xuQWN0aW9uU3RvcmVDb25zdGFudC5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIsIG5hbWVzcGFjZSkge1xuICBuYW1lc3BhY2Uuc2V0KHRoaXMuZGVzdCwgdGhpcy5jb25zdGFudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBmb3JtYXQgID0gcmVxdWlyZSgndXRpbCcpLmZvcm1hdDtcblxuXG52YXIgRVJSX0NPREUgPSAnQVJHRXJyb3InO1xuXG4vKjpub2RvYzoqXG4gKiBhcmd1bWVudEVycm9yKGFyZ3VtZW50LCBtZXNzYWdlKSAtPiBUeXBlRXJyb3JcbiAqIC0gYXJndW1lbnQgKE9iamVjdCk6IGFjdGlvbiB3aXRoIGJyb2tlbiBhcmd1bWVudFxuICogLSBtZXNzYWdlIChTdHJpbmcpOiBlcnJvciBtZXNzYWdlXG4gKlxuICogRXJyb3IgZm9ybWF0IGhlbHBlci4gQW4gZXJyb3IgZnJvbSBjcmVhdGluZyBvciB1c2luZyBhbiBhcmd1bWVudFxuICogKG9wdGlvbmFsIG9yIHBvc2l0aW9uYWwpLiBUaGUgc3RyaW5nIHZhbHVlIG9mIHRoaXMgZXhjZXB0aW9uXG4gKiBpcyB0aGUgbWVzc2FnZSwgYXVnbWVudGVkIHdpdGggaW5mb3JtYXRpb25cbiAqIGFib3V0IHRoZSBhcmd1bWVudCB0aGF0IGNhdXNlZCBpdC5cbiAqXG4gKiAjIyMjI0V4YW1wbGVcbiAqXG4gKiAgICAgIHZhciBhcmd1bWVudEVycm9ySGVscGVyID0gcmVxdWlyZSgnLi9hcmd1bWVudC9lcnJvcicpO1xuICogICAgICBpZiAoY29uZmxpY3RPcHRpb25hbHMubGVuZ3RoID4gMCkge1xuICogICAgICAgIHRocm93IGFyZ3VtZW50RXJyb3JIZWxwZXIoXG4gKiAgICAgICAgICBhY3Rpb24sXG4gKiAgICAgICAgICBmb3JtYXQoJ0NvbmZsaWN0aW5nIG9wdGlvbiBzdHJpbmcocyk6ICVzJywgY29uZmxpY3RPcHRpb25hbHMuam9pbignLCAnKSlcbiAqICAgICAgICApO1xuICogICAgICB9XG4gKlxuICoqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIG1lc3NhZ2UpIHtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IG51bGw7XG4gIHZhciBlcnJNZXNzYWdlO1xuICB2YXIgZXJyO1xuXG4gIGlmIChhcmd1bWVudC5nZXROYW1lKSB7XG4gICAgYXJndW1lbnROYW1lID0gYXJndW1lbnQuZ2V0TmFtZSgpO1xuICB9IGVsc2Uge1xuICAgIGFyZ3VtZW50TmFtZSA9ICcnICsgYXJndW1lbnQ7XG4gIH1cblxuICBpZiAoIWFyZ3VtZW50TmFtZSkge1xuICAgIGVyck1lc3NhZ2UgPSBtZXNzYWdlO1xuICB9IGVsc2Uge1xuICAgIGVyck1lc3NhZ2UgPSBmb3JtYXQoJ2FyZ3VtZW50IFwiJXNcIjogJXMnLCBhcmd1bWVudE5hbWUsIG1lc3NhZ2UpO1xuICB9XG5cbiAgZXJyID0gbmV3IFR5cGVFcnJvcihlcnJNZXNzYWdlKTtcbiAgZXJyLmNvZGUgPSBFUlJfQ09ERTtcbiAgcmV0dXJuIGVycjtcbn07XG4iLCIvKipcbiAqIGNsYXNzIEhlbHBGb3JtYXR0ZXJcbiAqXG4gKiBGb3JtYXR0ZXIgZm9yIGdlbmVyYXRpbmcgdXNhZ2UgbWVzc2FnZXMgYW5kIGFyZ3VtZW50IGhlbHAgc3RyaW5ncy4gT25seSB0aGVcbiAqIG5hbWUgb2YgdGhpcyBjbGFzcyBpcyBjb25zaWRlcmVkIGEgcHVibGljIEFQSS4gQWxsIHRoZSBtZXRob2RzIHByb3ZpZGVkIGJ5XG4gKiB0aGUgY2xhc3MgYXJlIGNvbnNpZGVyZWQgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLlxuICpcbiAqIERvIG5vdCBjYWxsIGluIHlvdXIgY29kZSwgdXNlIHRoaXMgY2xhc3Mgb25seSBmb3IgaW5oZXJpdHMgeW91ciBvd24gZm9ydmF0dGVyXG4gKlxuICogVG9EbyBhZGQgW2FkZGl0b25hbCBmb3JtYXR0ZXJzXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjZm9ybWF0dGVyLWNsYXNzXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzcHJpbnRmID0gcmVxdWlyZSgnc3ByaW50Zi1qcycpLnNwcmludGY7XG5cbi8vIENvbnN0YW50c1xudmFyIGMgPSByZXF1aXJlKCcuLi9jb25zdCcpO1xuXG52YXIgJCQgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5cbi8qOm5vZG9jOiogaW50ZXJuYWxcbiAqIG5ldyBTdXBwb3J0KHBhcmVudCwgaGVkaW5nKVxuICogLSBwYXJlbnQgKG9iamVjdCk6IHBhcmVudCBzZWN0aW9uXG4gKiAtIGhlYWRpbmcgKHN0cmluZyk6IGhlYWRlciBzdHJpbmdcbiAqXG4gKiovXG5mdW5jdGlvbiBTZWN0aW9uKHBhcmVudCwgaGVhZGluZykge1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX2hlYWRpbmcgPSBoZWFkaW5nO1xuICB0aGlzLl9pdGVtcyA9IFtdO1xufVxuXG4vKjpub2RvYzoqIGludGVybmFsXG4gKiBTZWN0aW9uI2FkZEl0ZW0oY2FsbGJhY2spIC0+IFZvaWRcbiAqIC0gY2FsbGJhY2sgKGFycmF5KTogdHVwbGUgd2l0aCBmdW5jdGlvbiBhbmQgYXJnc1xuICpcbiAqIEFkZCBmdW5jdGlvbiBmb3Igc2luZ2xlIGVsZW1lbnRcbiAqKi9cblNlY3Rpb24ucHJvdG90eXBlLmFkZEl0ZW0gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy5faXRlbXMucHVzaChjYWxsYmFjayk7XG59O1xuXG4vKjpub2RvYzoqIGludGVybmFsXG4gKiBTZWN0aW9uI2Zvcm1hdEhlbHAoZm9ybWF0dGVyKSAtPiBzdHJpbmdcbiAqIC0gZm9ybWF0dGVyIChIZWxwRm9ybWF0dGVyKTogY3VycmVudCBmb3JtYXR0ZXJcbiAqXG4gKiBGb3JtIGhlbHAgc2VjdGlvbiBzdHJpbmdcbiAqXG4gKiovXG5TZWN0aW9uLnByb3RvdHlwZS5mb3JtYXRIZWxwID0gZnVuY3Rpb24gKGZvcm1hdHRlcikge1xuICB2YXIgaXRlbUhlbHAsIGhlYWRpbmc7XG5cbiAgLy8gZm9ybWF0IHRoZSBpbmRlbnRlZCBzZWN0aW9uXG4gIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICBmb3JtYXR0ZXIuX2luZGVudCgpO1xuICB9XG5cbiAgaXRlbUhlbHAgPSB0aGlzLl9pdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgb2JqLCBmdW5jLCBhcmdzO1xuXG4gICAgb2JqID0gZm9ybWF0dGVyO1xuICAgIGZ1bmMgPSBpdGVtWzBdO1xuICAgIGFyZ3MgPSBpdGVtWzFdO1xuICAgIHJldHVybiBmdW5jLmFwcGx5KG9iaiwgYXJncyk7XG4gIH0pO1xuICBpdGVtSGVscCA9IGZvcm1hdHRlci5fam9pblBhcnRzKGl0ZW1IZWxwKTtcblxuICBpZiAodGhpcy5fcGFyZW50KSB7XG4gICAgZm9ybWF0dGVyLl9kZWRlbnQoKTtcbiAgfVxuXG4gIC8vIHJldHVybiBub3RoaW5nIGlmIHRoZSBzZWN0aW9uIHdhcyBlbXB0eVxuICBpZiAoIWl0ZW1IZWxwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLy8gYWRkIHRoZSBoZWFkaW5nIGlmIHRoZSBzZWN0aW9uIHdhcyBub24tZW1wdHlcbiAgaGVhZGluZyA9ICcnO1xuICBpZiAodGhpcy5faGVhZGluZyAmJiB0aGlzLl9oZWFkaW5nICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgdmFyIGN1cnJlbnRJbmRlbnQgPSBmb3JtYXR0ZXIuY3VycmVudEluZGVudDtcbiAgICBoZWFkaW5nID0gJCQucmVwZWF0KCcgJywgY3VycmVudEluZGVudCkgKyB0aGlzLl9oZWFkaW5nICsgJzonICsgYy5FT0w7XG4gIH1cblxuICAvLyBqb2luIHRoZSBzZWN0aW9uLWluaXRpYWxpemUgbmV3bGluZSwgdGhlIGhlYWRpbmcgYW5kIHRoZSBoZWxwXG4gIHJldHVybiBmb3JtYXR0ZXIuX2pvaW5QYXJ0cyhbIGMuRU9MLCBoZWFkaW5nLCBpdGVtSGVscCwgYy5FT0wgXSk7XG59O1xuXG4vKipcbiAqIG5ldyBIZWxwRm9ybWF0dGVyKG9wdGlvbnMpXG4gKlxuICogIyMjIyBPcHRpb25zOlxuICogLSBgcHJvZ2A6IHByb2dyYW0gbmFtZVxuICogLSBgaW5kZW50SW5jcmltZW50YDogaW5kZW50IHN0ZXAsIGRlZmF1bHQgdmFsdWUgMlxuICogLSBgbWF4SGVscFBvc2l0aW9uYDogbWF4IGhlbHAgcG9zaXRpb24sIGRlZmF1bHQgdmFsdWUgPSAyNFxuICogLSBgd2lkdGhgOiBsaW5lIHdpZHRoXG4gKlxuICoqL1xudmFyIEhlbHBGb3JtYXR0ZXIgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEhlbHBGb3JtYXR0ZXIob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLl9wcm9nID0gb3B0aW9ucy5wcm9nO1xuXG4gIHRoaXMuX21heEhlbHBQb3NpdGlvbiA9IG9wdGlvbnMubWF4SGVscFBvc2l0aW9uIHx8IDI0O1xuICB0aGlzLl93aWR0aCA9IChvcHRpb25zLndpZHRoIHx8ICgocHJvY2Vzcy5lbnYuQ09MVU1OUyB8fCA4MCkgLSAyKSk7XG5cbiAgdGhpcy5fY3VycmVudEluZGVudCA9IDA7XG4gIHRoaXMuX2luZGVudEluY3JpbWVudCA9IG9wdGlvbnMuaW5kZW50SW5jcmltZW50IHx8IDI7XG4gIHRoaXMuX2xldmVsID0gMDtcbiAgdGhpcy5fYWN0aW9uTWF4TGVuZ3RoID0gMDtcblxuICB0aGlzLl9yb290U2VjdGlvbiA9IG5ldyBTZWN0aW9uKG51bGwpO1xuICB0aGlzLl9jdXJyZW50U2VjdGlvbiA9IHRoaXMuX3Jvb3RTZWN0aW9uO1xuXG4gIHRoaXMuX3doaXRlc3BhY2VNYXRjaGVyID0gbmV3IFJlZ0V4cCgnXFxcXHMrJywgJ2cnKTtcbiAgdGhpcy5fbG9uZ0JyZWFrTWF0Y2hlciA9IG5ldyBSZWdFeHAoYy5FT0wgKyBjLkVPTCArIGMuRU9MICsgJysnLCAnZycpO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2luZGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY3VycmVudEluZGVudCArPSB0aGlzLl9pbmRlbnRJbmNyaW1lbnQ7XG4gIHRoaXMuX2xldmVsICs9IDE7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZGVkZW50ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9jdXJyZW50SW5kZW50IC09IHRoaXMuX2luZGVudEluY3JpbWVudDtcbiAgdGhpcy5fbGV2ZWwgLT0gMTtcbiAgaWYgKHRoaXMuX2N1cnJlbnRJbmRlbnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbmRlbnQgZGVjcmVhc2VkIGJlbG93IDAuJyk7XG4gIH1cbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9hZGRJdGVtID0gZnVuY3Rpb24gKGZ1bmMsIGFyZ3MpIHtcbiAgdGhpcy5fY3VycmVudFNlY3Rpb24uYWRkSXRlbShbIGZ1bmMsIGFyZ3MgXSk7XG59O1xuXG4vL1xuLy8gTWVzc2FnZSBidWlsZGluZyBtZXRob2RzXG4vL1xuXG4vKipcbiAqIEhlbHBGb3JtYXR0ZXIjc3RhcnRTZWN0aW9uKGhlYWRpbmcpIC0+IFZvaWRcbiAqIC0gaGVhZGluZyAoc3RyaW5nKTogaGVhZGVyIHN0cmluZ1xuICpcbiAqIFN0YXJ0IG5ldyBoZWxwIHNlY3Rpb25cbiAqXG4gKiBTZWUgYWxzZSBbY29kZSBleGFtcGxlXVsxXVxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiAgICAgIGZvcm1hdHRlci5zdGFydFNlY3Rpb24oYWN0aW9uR3JvdXAudGl0bGUpO1xuICogICAgICBmb3JtYXR0ZXIuYWRkVGV4dChhY3Rpb25Hcm91cC5kZXNjcmlwdGlvbik7XG4gKiAgICAgIGZvcm1hdHRlci5hZGRBcmd1bWVudHMoYWN0aW9uR3JvdXAuX2dyb3VwQWN0aW9ucyk7XG4gKiAgICAgIGZvcm1hdHRlci5lbmRTZWN0aW9uKCk7XG4gKlxuICoqL1xuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuc3RhcnRTZWN0aW9uID0gZnVuY3Rpb24gKGhlYWRpbmcpIHtcbiAgdGhpcy5faW5kZW50KCk7XG4gIHZhciBzZWN0aW9uID0gbmV3IFNlY3Rpb24odGhpcy5fY3VycmVudFNlY3Rpb24sIGhlYWRpbmcpO1xuICB2YXIgZnVuYyA9IHNlY3Rpb24uZm9ybWF0SGVscC5iaW5kKHNlY3Rpb24pO1xuICB0aGlzLl9hZGRJdGVtKGZ1bmMsIFsgdGhpcyBdKTtcbiAgdGhpcy5fY3VycmVudFNlY3Rpb24gPSBzZWN0aW9uO1xufTtcblxuLyoqXG4gKiBIZWxwRm9ybWF0dGVyI2VuZFNlY3Rpb24gLT4gVm9pZFxuICpcbiAqIEVuZCBoZWxwIHNlY3Rpb25cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogICAgICBmb3JtYXR0ZXIuc3RhcnRTZWN0aW9uKGFjdGlvbkdyb3VwLnRpdGxlKTtcbiAqICAgICAgZm9ybWF0dGVyLmFkZFRleHQoYWN0aW9uR3JvdXAuZGVzY3JpcHRpb24pO1xuICogICAgICBmb3JtYXR0ZXIuYWRkQXJndW1lbnRzKGFjdGlvbkdyb3VwLl9ncm91cEFjdGlvbnMpO1xuICogICAgICBmb3JtYXR0ZXIuZW5kU2VjdGlvbigpO1xuICoqL1xuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuZW5kU2VjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5fY3VycmVudFNlY3Rpb24gPSB0aGlzLl9jdXJyZW50U2VjdGlvbi5fcGFyZW50O1xuICB0aGlzLl9kZWRlbnQoKTtcbn07XG5cbi8qKlxuICogSGVscEZvcm1hdHRlciNhZGRUZXh0KHRleHQpIC0+IFZvaWRcbiAqIC0gdGV4dCAoc3RyaW5nKTogcGxhaW4gdGV4dFxuICpcbiAqIEFkZCBwbGFpbiB0ZXh0IGludG8gY3VycmVudCBzZWN0aW9uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqICAgICAgZm9ybWF0dGVyLnN0YXJ0U2VjdGlvbihhY3Rpb25Hcm91cC50aXRsZSk7XG4gKiAgICAgIGZvcm1hdHRlci5hZGRUZXh0KGFjdGlvbkdyb3VwLmRlc2NyaXB0aW9uKTtcbiAqICAgICAgZm9ybWF0dGVyLmFkZEFyZ3VtZW50cyhhY3Rpb25Hcm91cC5fZ3JvdXBBY3Rpb25zKTtcbiAqICAgICAgZm9ybWF0dGVyLmVuZFNlY3Rpb24oKTtcbiAqXG4gKiovXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5hZGRUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKHRleHQgJiYgdGV4dCAhPT0gYy5TVVBQUkVTUykge1xuICAgIHRoaXMuX2FkZEl0ZW0odGhpcy5fZm9ybWF0VGV4dCwgWyB0ZXh0IF0pO1xuICB9XG59O1xuXG4vKipcbiAqIEhlbHBGb3JtYXR0ZXIjYWRkVXNhZ2UodXNhZ2UsIGFjdGlvbnMsIGdyb3VwcywgcHJlZml4KSAtPiBWb2lkXG4gKiAtIHVzYWdlIChzdHJpbmcpOiB1c2FnZSB0ZXh0XG4gKiAtIGFjdGlvbnMgKGFycmF5KTogYWN0aW9ucyBsaXN0XG4gKiAtIGdyb3VwcyAoYXJyYXkpOiBncm91cHMgbGlzdFxuICogLSBwcmVmaXggKHN0cmluZyk6IHVzYWdlIHByZWZpeFxuICpcbiAqIEFkZCB1c2FnZSBkYXRhIGludG8gY3VycmVudCBzZWN0aW9uXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqICAgICAgZm9ybWF0dGVyLmFkZFVzYWdlKHRoaXMudXNhZ2UsIHRoaXMuX2FjdGlvbnMsIFtdKTtcbiAqICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXRIZWxwKCk7XG4gKlxuICoqL1xuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuYWRkVXNhZ2UgPSBmdW5jdGlvbiAodXNhZ2UsIGFjdGlvbnMsIGdyb3VwcywgcHJlZml4KSB7XG4gIGlmICh1c2FnZSAhPT0gYy5TVVBQUkVTUykge1xuICAgIHRoaXMuX2FkZEl0ZW0odGhpcy5fZm9ybWF0VXNhZ2UsIFsgdXNhZ2UsIGFjdGlvbnMsIGdyb3VwcywgcHJlZml4IF0pO1xuICB9XG59O1xuXG4vKipcbiAqIEhlbHBGb3JtYXR0ZXIjYWRkQXJndW1lbnQoYWN0aW9uKSAtPiBWb2lkXG4gKiAtIGFjdGlvbiAob2JqZWN0KTogYWN0aW9uXG4gKlxuICogQWRkIGFyZ3VtZW50IGludG8gY3VycmVudCBzZWN0aW9uXG4gKlxuICogU2luZ2xlIHZhcmlhbnQgb2YgW1tIZWxwRm9ybWF0dGVyI2FkZEFyZ3VtZW50c11dXG4gKiovXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5hZGRBcmd1bWVudCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi5oZWxwICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgLy8gZmluZCBhbGwgaW52b2NhdGlvbnNcbiAgICB2YXIgaW52b2NhdGlvbnMgPSBbIHRoaXMuX2Zvcm1hdEFjdGlvbkludm9jYXRpb24oYWN0aW9uKSBdO1xuICAgIHZhciBpbnZvY2F0aW9uTGVuZ3RoID0gaW52b2NhdGlvbnNbMF0ubGVuZ3RoO1xuXG4gICAgdmFyIGFjdGlvbkxlbmd0aDtcblxuICAgIGlmIChhY3Rpb24uX2dldFN1YmFjdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luZGVudCgpO1xuICAgICAgYWN0aW9uLl9nZXRTdWJhY3Rpb25zKCkuZm9yRWFjaChmdW5jdGlvbiAoc3ViYWN0aW9uKSB7XG5cbiAgICAgICAgdmFyIGludm9jYXRpb25OZXcgPSBzZWxmLl9mb3JtYXRBY3Rpb25JbnZvY2F0aW9uKHN1YmFjdGlvbik7XG4gICAgICAgIGludm9jYXRpb25zLnB1c2goaW52b2NhdGlvbk5ldyk7XG4gICAgICAgIGludm9jYXRpb25MZW5ndGggPSBNYXRoLm1heChpbnZvY2F0aW9uTGVuZ3RoLCBpbnZvY2F0aW9uTmV3Lmxlbmd0aCk7XG5cbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZGVkZW50KCk7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBtYXhpbXVtIGl0ZW0gbGVuZ3RoXG4gICAgYWN0aW9uTGVuZ3RoID0gaW52b2NhdGlvbkxlbmd0aCArIHRoaXMuX2N1cnJlbnRJbmRlbnQ7XG4gICAgdGhpcy5fYWN0aW9uTWF4TGVuZ3RoID0gTWF0aC5tYXgodGhpcy5fYWN0aW9uTWF4TGVuZ3RoLCBhY3Rpb25MZW5ndGgpO1xuXG4gICAgLy8gYWRkIHRoZSBpdGVtIHRvIHRoZSBsaXN0XG4gICAgdGhpcy5fYWRkSXRlbSh0aGlzLl9mb3JtYXRBY3Rpb24sIFsgYWN0aW9uIF0pO1xuICB9XG59O1xuXG4vKipcbiAqIEhlbHBGb3JtYXR0ZXIjYWRkQXJndW1lbnRzKGFjdGlvbnMpIC0+IFZvaWRcbiAqIC0gYWN0aW9ucyAoYXJyYXkpOiBhY3Rpb25zIGxpc3RcbiAqXG4gKiBNYXNzIGFkZCBhcmd1bWVudHMgaW50byBjdXJyZW50IHNlY3Rpb25cbiAqXG4gKiAjIyMjIyBFeGFtcGxlXG4gKlxuICogICAgICBmb3JtYXR0ZXIuc3RhcnRTZWN0aW9uKGFjdGlvbkdyb3VwLnRpdGxlKTtcbiAqICAgICAgZm9ybWF0dGVyLmFkZFRleHQoYWN0aW9uR3JvdXAuZGVzY3JpcHRpb24pO1xuICogICAgICBmb3JtYXR0ZXIuYWRkQXJndW1lbnRzKGFjdGlvbkdyb3VwLl9ncm91cEFjdGlvbnMpO1xuICogICAgICBmb3JtYXR0ZXIuZW5kU2VjdGlvbigpO1xuICpcbiAqKi9cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLmFkZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIChhY3Rpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICBzZWxmLmFkZEFyZ3VtZW50KGFjdGlvbik7XG4gIH0pO1xufTtcblxuLy9cbi8vIEhlbHAtZm9ybWF0dGluZyBtZXRob2RzXG4vL1xuXG4vKipcbiAqIEhlbHBGb3JtYXR0ZXIjZm9ybWF0SGVscCAtPiBzdHJpbmdcbiAqXG4gKiBGb3JtYXQgaGVscFxuICpcbiAqICMjIyMjIEV4YW1wbGVcbiAqXG4gKiAgICAgIGZvcm1hdHRlci5hZGRUZXh0KHRoaXMuZXBpbG9nKTtcbiAqICAgICAgcmV0dXJuIGZvcm1hdHRlci5mb3JtYXRIZWxwKCk7XG4gKlxuICoqL1xuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0SGVscCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlbHAgPSB0aGlzLl9yb290U2VjdGlvbi5mb3JtYXRIZWxwKHRoaXMpO1xuICBpZiAoaGVscCkge1xuICAgIGhlbHAgPSBoZWxwLnJlcGxhY2UodGhpcy5fbG9uZ0JyZWFrTWF0Y2hlciwgYy5FT0wgKyBjLkVPTCk7XG4gICAgaGVscCA9ICQkLnRyaW1DaGFycyhoZWxwLCBjLkVPTCkgKyBjLkVPTDtcbiAgfVxuICByZXR1cm4gaGVscDtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9qb2luUGFydHMgPSBmdW5jdGlvbiAocGFydFN0cmluZ3MpIHtcbiAgcmV0dXJuIHBhcnRTdHJpbmdzLmZpbHRlcihmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiAocGFydCAmJiBwYXJ0ICE9PSBjLlNVUFBSRVNTKTtcbiAgfSkuam9pbignJyk7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZm9ybWF0VXNhZ2UgPSBmdW5jdGlvbiAodXNhZ2UsIGFjdGlvbnMsIGdyb3VwcywgcHJlZml4KSB7XG4gIGlmICghcHJlZml4ICYmIHR5cGVvZiBwcmVmaXggIT09ICdzdHJpbmcnKSB7XG4gICAgcHJlZml4ID0gJ3VzYWdlOiAnO1xuICB9XG5cbiAgYWN0aW9ucyA9IGFjdGlvbnMgfHwgW107XG4gIGdyb3VwcyA9IGdyb3VwcyB8fCBbXTtcblxuXG4gIC8vIGlmIHVzYWdlIGlzIHNwZWNpZmllZCwgdXNlIHRoYXRcbiAgaWYgKHVzYWdlKSB7XG4gICAgdXNhZ2UgPSBzcHJpbnRmKHVzYWdlLCB7IHByb2c6IHRoaXMuX3Byb2cgfSk7XG5cbiAgICAvLyBpZiBubyBvcHRpb25hbHMgb3IgcG9zaXRpb25hbHMgYXJlIGF2YWlsYWJsZSwgdXNhZ2UgaXMganVzdCBwcm9nXG4gIH0gZWxzZSBpZiAoIXVzYWdlICYmIGFjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgdXNhZ2UgPSB0aGlzLl9wcm9nO1xuXG4gICAgLy8gaWYgb3B0aW9uYWxzIGFuZCBwb3NpdGlvbmFscyBhcmUgYXZhaWxhYmxlLCBjYWxjdWxhdGUgdXNhZ2VcbiAgfSBlbHNlIGlmICghdXNhZ2UpIHtcbiAgICB2YXIgcHJvZyA9IHRoaXMuX3Byb2c7XG4gICAgdmFyIG9wdGlvbmFscyA9IFtdO1xuICAgIHZhciBwb3NpdGlvbmFscyA9IFtdO1xuICAgIHZhciBhY3Rpb25Vc2FnZTtcbiAgICB2YXIgdGV4dFdpZHRoO1xuXG4gICAgLy8gc3BsaXQgb3B0aW9uYWxzIGZyb20gcG9zaXRpb25hbHNcbiAgICBhY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKGFjdGlvbi5pc09wdGlvbmFsKCkpIHtcbiAgICAgICAgb3B0aW9uYWxzLnB1c2goYWN0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc2l0aW9uYWxzLnB1c2goYWN0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGJ1aWxkIGZ1bGwgdXNhZ2Ugc3RyaW5nXG4gICAgYWN0aW9uVXNhZ2UgPSB0aGlzLl9mb3JtYXRBY3Rpb25zVXNhZ2UoW10uY29uY2F0KG9wdGlvbmFscywgcG9zaXRpb25hbHMpLCBncm91cHMpO1xuICAgIHVzYWdlID0gWyBwcm9nLCBhY3Rpb25Vc2FnZSBdLmpvaW4oJyAnKTtcblxuICAgIC8vIHdyYXAgdGhlIHVzYWdlIHBhcnRzIGlmIGl0J3MgdG9vIGxvbmdcbiAgICB0ZXh0V2lkdGggPSB0aGlzLl93aWR0aCAtIHRoaXMuX2N1cnJlbnRJbmRlbnQ7XG4gICAgaWYgKChwcmVmaXgubGVuZ3RoICsgdXNhZ2UubGVuZ3RoKSA+IHRleHRXaWR0aCkge1xuXG4gICAgICAvLyBicmVhayB1c2FnZSBpbnRvIHdyYXBwYWJsZSBwYXJ0c1xuICAgICAgdmFyIHJlZ2V4cFBhcnQgPSBuZXcgUmVnRXhwKCdcXFxcKC4qP1xcXFwpK3xcXFxcWy4qP1xcXFxdK3xcXFxcUysnLCAnZycpO1xuICAgICAgdmFyIG9wdGlvbmFsVXNhZ2UgPSB0aGlzLl9mb3JtYXRBY3Rpb25zVXNhZ2Uob3B0aW9uYWxzLCBncm91cHMpO1xuICAgICAgdmFyIHBvc2l0aW9uYWxVc2FnZSA9IHRoaXMuX2Zvcm1hdEFjdGlvbnNVc2FnZShwb3NpdGlvbmFscywgZ3JvdXBzKTtcblxuXG4gICAgICB2YXIgb3B0aW9uYWxQYXJ0cyA9IG9wdGlvbmFsVXNhZ2UubWF0Y2gocmVnZXhwUGFydCk7XG4gICAgICB2YXIgcG9zaXRpb25hbFBhcnRzID0gcG9zaXRpb25hbFVzYWdlLm1hdGNoKHJlZ2V4cFBhcnQpIHx8IFtdO1xuXG4gICAgICBpZiAob3B0aW9uYWxQYXJ0cy5qb2luKCcgJykgIT09IG9wdGlvbmFsVXNhZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NlcnQgXCJvcHRpb25hbFBhcnRzLmpvaW4oXFwnIFxcJykgPT09IG9wdGlvbmFsVXNhZ2VcIicpO1xuICAgICAgfVxuICAgICAgaWYgKHBvc2l0aW9uYWxQYXJ0cy5qb2luKCcgJykgIT09IHBvc2l0aW9uYWxVc2FnZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Fzc2VydCBcInBvc2l0aW9uYWxQYXJ0cy5qb2luKFxcJyBcXCcpID09PSBwb3NpdGlvbmFsVXNhZ2VcIicpO1xuICAgICAgfVxuXG4gICAgICAvLyBoZWxwZXIgZm9yIHdyYXBwaW5nIGxpbmVzXG4gICAgICAvKmVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUqLyAvLyBub2RlIDAuMTAgY29tcGF0XG4gICAgICB2YXIgX2dldExpbmVzID0gZnVuY3Rpb24gKHBhcnRzLCBpbmRlbnQsIHByZWZpeCkge1xuICAgICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICAgdmFyIGxpbmUgPSBbXTtcblxuICAgICAgICB2YXIgbGluZUxlbmd0aCA9IHByZWZpeCA/IHByZWZpeC5sZW5ndGggLSAxIDogaW5kZW50Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgcGFydHMuZm9yRWFjaChmdW5jdGlvbiAocGFydCkge1xuICAgICAgICAgIGlmIChsaW5lTGVuZ3RoICsgMSArIHBhcnQubGVuZ3RoID4gdGV4dFdpZHRoKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGluZGVudCArIGxpbmUuam9pbignICcpKTtcbiAgICAgICAgICAgIGxpbmUgPSBbXTtcbiAgICAgICAgICAgIGxpbmVMZW5ndGggPSBpbmRlbnQubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGluZS5wdXNoKHBhcnQpO1xuICAgICAgICAgIGxpbmVMZW5ndGggKz0gcGFydC5sZW5ndGggKyAxO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobGluZSkge1xuICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50ICsgbGluZS5qb2luKCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcmVmaXgpIHtcbiAgICAgICAgICBsaW5lc1swXSA9IGxpbmVzWzBdLnN1YnN0cihpbmRlbnQubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbGluZXMsIGluZGVudCwgcGFydHM7XG4gICAgICAvLyBpZiBwcm9nIGlzIHNob3J0LCBmb2xsb3cgaXQgd2l0aCBvcHRpb25hbHMgb3IgcG9zaXRpb25hbHNcbiAgICAgIGlmIChwcmVmaXgubGVuZ3RoICsgcHJvZy5sZW5ndGggPD0gMC43NSAqIHRleHRXaWR0aCkge1xuICAgICAgICBpbmRlbnQgPSAkJC5yZXBlYXQoJyAnLCAocHJlZml4Lmxlbmd0aCArIHByb2cubGVuZ3RoICsgMSkpO1xuICAgICAgICBpZiAob3B0aW9uYWxQYXJ0cykge1xuICAgICAgICAgIGxpbmVzID0gW10uY29uY2F0KFxuICAgICAgICAgICAgX2dldExpbmVzKFsgcHJvZyBdLmNvbmNhdChvcHRpb25hbFBhcnRzKSwgaW5kZW50LCBwcmVmaXgpLFxuICAgICAgICAgICAgX2dldExpbmVzKHBvc2l0aW9uYWxQYXJ0cywgaW5kZW50KVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb25hbFBhcnRzKSB7XG4gICAgICAgICAgbGluZXMgPSBfZ2V0TGluZXMoWyBwcm9nIF0uY29uY2F0KHBvc2l0aW9uYWxQYXJ0cyksIGluZGVudCwgcHJlZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lcyA9IFsgcHJvZyBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgcHJvZyBpcyBsb25nLCBwdXQgaXQgb24gaXRzIG93biBsaW5lXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRlbnQgPSAkJC5yZXBlYXQoJyAnLCBwcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgcGFydHMgPSBvcHRpb25hbFBhcnRzLmNvbmNhdChwb3NpdGlvbmFsUGFydHMpO1xuICAgICAgICBsaW5lcyA9IF9nZXRMaW5lcyhwYXJ0cywgaW5kZW50KTtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBsaW5lcyA9IFtdLmNvbmNhdChcbiAgICAgICAgICAgIF9nZXRMaW5lcyhvcHRpb25hbFBhcnRzLCBpbmRlbnQpLFxuICAgICAgICAgICAgX2dldExpbmVzKHBvc2l0aW9uYWxQYXJ0cywgaW5kZW50KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMgPSBbIHByb2cgXS5jb25jYXQobGluZXMpO1xuICAgICAgfVxuICAgICAgLy8gam9pbiBsaW5lcyBpbnRvIHVzYWdlXG4gICAgICB1c2FnZSA9IGxpbmVzLmpvaW4oYy5FT0wpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByZWZpeCB3aXRoICd1c2FnZTonXG4gIHJldHVybiBwcmVmaXggKyB1c2FnZSArIGMuRU9MICsgYy5FT0w7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZm9ybWF0QWN0aW9uc1VzYWdlID0gZnVuY3Rpb24gKGFjdGlvbnMsIGdyb3Vwcykge1xuICAvLyBmaW5kIGdyb3VwIGluZGljZXMgYW5kIGlkZW50aWZ5IGFjdGlvbnMgaW4gZ3JvdXBzXG4gIHZhciBncm91cEFjdGlvbnMgPSBbXTtcbiAgdmFyIGluc2VydHMgPSBbXTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xuICAgIHZhciBlbmQ7XG4gICAgdmFyIGk7XG5cbiAgICB2YXIgc3RhcnQgPSBhY3Rpb25zLmluZGV4T2YoZ3JvdXAuX2dyb3VwQWN0aW9uc1swXSk7XG4gICAgaWYgKHN0YXJ0ID49IDApIHtcbiAgICAgIGVuZCA9IHN0YXJ0ICsgZ3JvdXAuX2dyb3VwQWN0aW9ucy5sZW5ndGg7XG5cbiAgICAgIC8vaWYgKGFjdGlvbnMuc2xpY2Uoc3RhcnQsIGVuZCkgPT09IGdyb3VwLl9ncm91cEFjdGlvbnMpIHtcbiAgICAgIGlmICgkJC5hcnJheUVxdWFsKGFjdGlvbnMuc2xpY2Uoc3RhcnQsIGVuZCksIGdyb3VwLl9ncm91cEFjdGlvbnMpKSB7XG4gICAgICAgIGdyb3VwLl9ncm91cEFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgZ3JvdXBBY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFncm91cC5yZXF1aXJlZCkge1xuICAgICAgICAgIGlmIChpbnNlcnRzW3N0YXJ0XSkge1xuICAgICAgICAgICAgaW5zZXJ0c1tzdGFydF0gKz0gJyBbJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5zZXJ0c1tzdGFydF0gPSAnWyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc2VydHNbZW5kXSA9ICddJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW5zZXJ0c1tzdGFydF0pIHtcbiAgICAgICAgICAgIGluc2VydHNbc3RhcnRdICs9ICcgKCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc2VydHNbc3RhcnRdID0gJygnO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnNlcnRzW2VuZF0gPSAnKSc7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gc3RhcnQgKyAxOyBpIDwgZW5kOyBpICs9IDEpIHtcbiAgICAgICAgICBpbnNlcnRzW2ldID0gJ3wnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBjb2xsZWN0IGFsbCBhY3Rpb25zIGZvcm1hdCBzdHJpbmdzXG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uLCBhY3Rpb25JbmRleCkge1xuICAgIHZhciBwYXJ0O1xuICAgIHZhciBvcHRpb25TdHJpbmc7XG4gICAgdmFyIGFyZ3NEZWZhdWx0O1xuICAgIHZhciBhcmdzU3RyaW5nO1xuXG4gICAgLy8gc3VwcHJlc3NlZCBhcmd1bWVudHMgYXJlIG1hcmtlZCB3aXRoIE5vbmVcbiAgICAvLyByZW1vdmUgfCBzZXBhcmF0b3JzIGZvciBzdXBwcmVzc2VkIGFyZ3VtZW50c1xuICAgIGlmIChhY3Rpb24uaGVscCA9PT0gYy5TVVBQUkVTUykge1xuICAgICAgcGFydHMucHVzaChudWxsKTtcbiAgICAgIGlmIChpbnNlcnRzW2FjdGlvbkluZGV4XSA9PT0gJ3wnKSB7XG4gICAgICAgIGluc2VydHMuc3BsaWNlKGFjdGlvbkluZGV4LCBhY3Rpb25JbmRleCk7XG4gICAgICB9IGVsc2UgaWYgKGluc2VydHNbYWN0aW9uSW5kZXggKyAxXSA9PT0gJ3wnKSB7XG4gICAgICAgIGluc2VydHMuc3BsaWNlKGFjdGlvbkluZGV4ICsgMSwgYWN0aW9uSW5kZXggKyAxKTtcbiAgICAgIH1cblxuICAgICAgLy8gcHJvZHVjZSBhbGwgYXJnIHN0cmluZ3NcbiAgICB9IGVsc2UgaWYgKCFhY3Rpb24uaXNPcHRpb25hbCgpKSB7XG4gICAgICBwYXJ0ID0gc2VsZi5fZm9ybWF0QXJncyhhY3Rpb24sIGFjdGlvbi5kZXN0KTtcblxuICAgICAgLy8gaWYgaXQncyBpbiBhIGdyb3VwLCBzdHJpcCB0aGUgb3V0ZXIgW11cbiAgICAgIGlmIChncm91cEFjdGlvbnMuaW5kZXhPZihhY3Rpb24pID49IDApIHtcbiAgICAgICAgaWYgKHBhcnRbMF0gPT09ICdbJyAmJiBwYXJ0W3BhcnQubGVuZ3RoIC0gMV0gPT09ICddJykge1xuICAgICAgICAgIHBhcnQgPSBwYXJ0LnNsaWNlKDEsIC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gYWRkIHRoZSBhY3Rpb24gc3RyaW5nIHRvIHRoZSBsaXN0XG4gICAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuXG4gICAgLy8gcHJvZHVjZSB0aGUgZmlyc3Qgd2F5IHRvIGludm9rZSB0aGUgb3B0aW9uIGluIGJyYWNrZXRzXG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvblN0cmluZyA9IGFjdGlvbi5vcHRpb25TdHJpbmdzWzBdO1xuXG4gICAgICAvLyBpZiB0aGUgT3B0aW9uYWwgZG9lc24ndCB0YWtlIGEgdmFsdWUsIGZvcm1hdCBpczogLXMgb3IgLS1sb25nXG4gICAgICBpZiAoYWN0aW9uLm5hcmdzID09PSAwKSB7XG4gICAgICAgIHBhcnQgPSAnJyArIG9wdGlvblN0cmluZztcblxuICAgICAgLy8gaWYgdGhlIE9wdGlvbmFsIHRha2VzIGEgdmFsdWUsIGZvcm1hdCBpczogLXMgQVJHUyBvciAtLWxvbmcgQVJHU1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJnc0RlZmF1bHQgPSBhY3Rpb24uZGVzdC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBhcmdzU3RyaW5nID0gc2VsZi5fZm9ybWF0QXJncyhhY3Rpb24sIGFyZ3NEZWZhdWx0KTtcbiAgICAgICAgcGFydCA9IG9wdGlvblN0cmluZyArICcgJyArIGFyZ3NTdHJpbmc7XG4gICAgICB9XG4gICAgICAvLyBtYWtlIGl0IGxvb2sgb3B0aW9uYWwgaWYgaXQncyBub3QgcmVxdWlyZWQgb3IgaW4gYSBncm91cFxuICAgICAgaWYgKCFhY3Rpb24ucmVxdWlyZWQgJiYgZ3JvdXBBY3Rpb25zLmluZGV4T2YoYWN0aW9uKSA8IDApIHtcbiAgICAgICAgcGFydCA9ICdbJyArIHBhcnQgKyAnXSc7XG4gICAgICB9XG4gICAgICAvLyBhZGQgdGhlIGFjdGlvbiBzdHJpbmcgdG8gdGhlIGxpc3RcbiAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBpbnNlcnQgdGhpbmdzIGF0IHRoZSBuZWNlc3NhcnkgaW5kaWNlc1xuICBmb3IgKHZhciBpID0gaW5zZXJ0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgIGlmIChpbnNlcnRzW2ldICE9PSBudWxsKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMCwgaW5zZXJ0c1tpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gam9pbiBhbGwgdGhlIGFjdGlvbiBpdGVtcyB3aXRoIHNwYWNlc1xuICB2YXIgdGV4dCA9IHBhcnRzLmZpbHRlcihmdW5jdGlvbiAocGFydCkge1xuICAgIHJldHVybiAhIXBhcnQ7XG4gIH0pLmpvaW4oJyAnKTtcblxuICAvLyBjbGVhbiB1cCBzZXBhcmF0b3JzIGZvciBtdXR1YWxseSBleGNsdXNpdmUgZ3JvdXBzXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoLyhbXFxbKF0pIC9nLCAnJDEnKTsgLy8gcmVtb3ZlIHNwYWNlc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8gKFtcXF0pXSkvZywgJyQxJyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcWyAqXFxdL2csICcnKTsgLy8gcmVtb3ZlIGVtcHR5IGdyb3Vwc1xuICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXCggKlxcKS9nLCAnJyk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL1xcKChbXnxdKilcXCkvZywgJyQxJyk7IC8vIHJlbW92ZSAoKSBmcm9tIHNpbmdsZSBhY3Rpb24gZ3JvdXBzXG5cbiAgdGV4dCA9IHRleHQudHJpbSgpO1xuXG4gIC8vIHJldHVybiB0aGUgdGV4dFxuICByZXR1cm4gdGV4dDtcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9mb3JtYXRUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgdGV4dCA9IHNwcmludGYodGV4dCwgeyBwcm9nOiB0aGlzLl9wcm9nIH0pO1xuICB2YXIgdGV4dFdpZHRoID0gdGhpcy5fd2lkdGggLSB0aGlzLl9jdXJyZW50SW5kZW50O1xuICB2YXIgaW5kZW50SW5jcmltZW50ID0gJCQucmVwZWF0KCcgJywgdGhpcy5fY3VycmVudEluZGVudCk7XG4gIHJldHVybiB0aGlzLl9maWxsVGV4dCh0ZXh0LCB0ZXh0V2lkdGgsIGluZGVudEluY3JpbWVudCkgKyBjLkVPTCArIGMuRU9MO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2Zvcm1hdEFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBoZWxwVGV4dDtcbiAgdmFyIGhlbHBMaW5lcztcbiAgdmFyIHBhcnRzO1xuICB2YXIgaW5kZW50Rmlyc3Q7XG5cbiAgLy8gZGV0ZXJtaW5lIHRoZSByZXF1aXJlZCB3aWR0aCBhbmQgdGhlIGVudHJ5IGxhYmVsXG4gIHZhciBoZWxwUG9zaXRpb24gPSBNYXRoLm1pbih0aGlzLl9hY3Rpb25NYXhMZW5ndGggKyAyLCB0aGlzLl9tYXhIZWxwUG9zaXRpb24pO1xuICB2YXIgaGVscFdpZHRoID0gdGhpcy5fd2lkdGggLSBoZWxwUG9zaXRpb247XG4gIHZhciBhY3Rpb25XaWR0aCA9IGhlbHBQb3NpdGlvbiAtIHRoaXMuX2N1cnJlbnRJbmRlbnQgLSAyO1xuICB2YXIgYWN0aW9uSGVhZGVyID0gdGhpcy5fZm9ybWF0QWN0aW9uSW52b2NhdGlvbihhY3Rpb24pO1xuXG4gIC8vIG5vIGhlbHA7IHN0YXJ0IG9uIHNhbWUgbGluZSBhbmQgYWRkIGEgZmluYWwgbmV3bGluZVxuICBpZiAoIWFjdGlvbi5oZWxwKSB7XG4gICAgYWN0aW9uSGVhZGVyID0gJCQucmVwZWF0KCcgJywgdGhpcy5fY3VycmVudEluZGVudCkgKyBhY3Rpb25IZWFkZXIgKyBjLkVPTDtcblxuICAvLyBzaG9ydCBhY3Rpb24gbmFtZTsgc3RhcnQgb24gdGhlIHNhbWUgbGluZSBhbmQgcGFkIHR3byBzcGFjZXNcbiAgfSBlbHNlIGlmIChhY3Rpb25IZWFkZXIubGVuZ3RoIDw9IGFjdGlvbldpZHRoKSB7XG4gICAgYWN0aW9uSGVhZGVyID0gJCQucmVwZWF0KCcgJywgdGhpcy5fY3VycmVudEluZGVudCkgK1xuICAgICAgICBhY3Rpb25IZWFkZXIgK1xuICAgICAgICAnICAnICtcbiAgICAgICAgJCQucmVwZWF0KCcgJywgYWN0aW9uV2lkdGggLSBhY3Rpb25IZWFkZXIubGVuZ3RoKTtcbiAgICBpbmRlbnRGaXJzdCA9IDA7XG5cbiAgLy8gbG9uZyBhY3Rpb24gbmFtZTsgc3RhcnQgb24gdGhlIG5leHQgbGluZVxuICB9IGVsc2Uge1xuICAgIGFjdGlvbkhlYWRlciA9ICQkLnJlcGVhdCgnICcsIHRoaXMuX2N1cnJlbnRJbmRlbnQpICsgYWN0aW9uSGVhZGVyICsgYy5FT0w7XG4gICAgaW5kZW50Rmlyc3QgPSBoZWxwUG9zaXRpb247XG4gIH1cblxuICAvLyBjb2xsZWN0IHRoZSBwaWVjZXMgb2YgdGhlIGFjdGlvbiBoZWxwXG4gIHBhcnRzID0gWyBhY3Rpb25IZWFkZXIgXTtcblxuICAvLyBpZiB0aGVyZSB3YXMgaGVscCBmb3IgdGhlIGFjdGlvbiwgYWRkIGxpbmVzIG9mIGhlbHAgdGV4dFxuICBpZiAoYWN0aW9uLmhlbHApIHtcbiAgICBoZWxwVGV4dCA9IHRoaXMuX2V4cGFuZEhlbHAoYWN0aW9uKTtcbiAgICBoZWxwTGluZXMgPSB0aGlzLl9zcGxpdExpbmVzKGhlbHBUZXh0LCBoZWxwV2lkdGgpO1xuICAgIHBhcnRzLnB1c2goJCQucmVwZWF0KCcgJywgaW5kZW50Rmlyc3QpICsgaGVscExpbmVzWzBdICsgYy5FT0wpO1xuICAgIGhlbHBMaW5lcy5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICBwYXJ0cy5wdXNoKCQkLnJlcGVhdCgnICcsIGhlbHBQb3NpdGlvbikgKyBsaW5lICsgYy5FT0wpO1xuICAgIH0pO1xuXG4gIC8vIG9yIGFkZCBhIG5ld2xpbmUgaWYgdGhlIGRlc2NyaXB0aW9uIGRvZXNuJ3QgZW5kIHdpdGggb25lXG4gIH0gZWxzZSBpZiAoYWN0aW9uSGVhZGVyLmNoYXJBdChhY3Rpb25IZWFkZXIubGVuZ3RoIC0gMSkgIT09IGMuRU9MKSB7XG4gICAgcGFydHMucHVzaChjLkVPTCk7XG4gIH1cbiAgLy8gaWYgdGhlcmUgYXJlIGFueSBzdWItYWN0aW9ucywgYWRkIHRoZWlyIGhlbHAgYXMgd2VsbFxuICBpZiAoYWN0aW9uLl9nZXRTdWJhY3Rpb25zKSB7XG4gICAgdGhpcy5faW5kZW50KCk7XG4gICAgYWN0aW9uLl9nZXRTdWJhY3Rpb25zKCkuZm9yRWFjaChmdW5jdGlvbiAoc3ViYWN0aW9uKSB7XG4gICAgICBwYXJ0cy5wdXNoKHNlbGYuX2Zvcm1hdEFjdGlvbihzdWJhY3Rpb24pKTtcbiAgICB9KTtcbiAgICB0aGlzLl9kZWRlbnQoKTtcbiAgfVxuICAvLyByZXR1cm4gYSBzaW5nbGUgc3RyaW5nXG4gIHJldHVybiB0aGlzLl9qb2luUGFydHMocGFydHMpO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2Zvcm1hdEFjdGlvbkludm9jYXRpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIGlmICghYWN0aW9uLmlzT3B0aW9uYWwoKSkge1xuICAgIHZhciBmb3JtYXRfZnVuYyA9IHRoaXMuX21ldGF2YXJGb3JtYXR0ZXIoYWN0aW9uLCBhY3Rpb24uZGVzdCk7XG4gICAgdmFyIG1ldGF2YXJzID0gZm9ybWF0X2Z1bmMoMSk7XG4gICAgcmV0dXJuIG1ldGF2YXJzWzBdO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gW107XG4gIHZhciBhcmdzRGVmYXVsdDtcbiAgdmFyIGFyZ3NTdHJpbmc7XG5cbiAgLy8gaWYgdGhlIE9wdGlvbmFsIGRvZXNuJ3QgdGFrZSBhIHZhbHVlLCBmb3JtYXQgaXM6IC1zLCAtLWxvbmdcbiAgaWYgKGFjdGlvbi5uYXJncyA9PT0gMCkge1xuICAgIHBhcnRzID0gcGFydHMuY29uY2F0KGFjdGlvbi5vcHRpb25TdHJpbmdzKTtcblxuICAvLyBpZiB0aGUgT3B0aW9uYWwgdGFrZXMgYSB2YWx1ZSwgZm9ybWF0IGlzOiAtcyBBUkdTLCAtLWxvbmcgQVJHU1xuICB9IGVsc2Uge1xuICAgIGFyZ3NEZWZhdWx0ID0gYWN0aW9uLmRlc3QudG9VcHBlckNhc2UoKTtcbiAgICBhcmdzU3RyaW5nID0gdGhpcy5fZm9ybWF0QXJncyhhY3Rpb24sIGFyZ3NEZWZhdWx0KTtcbiAgICBhY3Rpb24ub3B0aW9uU3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25TdHJpbmcpIHtcbiAgICAgIHBhcnRzLnB1c2gob3B0aW9uU3RyaW5nICsgJyAnICsgYXJnc1N0cmluZyk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJywgJyk7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fbWV0YXZhckZvcm1hdHRlciA9IGZ1bmN0aW9uIChhY3Rpb24sIG1ldGF2YXJEZWZhdWx0KSB7XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKGFjdGlvbi5tZXRhdmFyIHx8IGFjdGlvbi5tZXRhdmFyID09PSAnJykge1xuICAgIHJlc3VsdCA9IGFjdGlvbi5tZXRhdmFyO1xuICB9IGVsc2UgaWYgKGFjdGlvbi5jaG9pY2VzKSB7XG4gICAgdmFyIGNob2ljZXMgPSBhY3Rpb24uY2hvaWNlcztcblxuICAgIGlmICh0eXBlb2YgY2hvaWNlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNob2ljZXMgPSBjaG9pY2VzLnNwbGl0KCcnKS5qb2luKCcsICcpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjaG9pY2VzKSkge1xuICAgICAgY2hvaWNlcyA9IGNob2ljZXMuam9pbignLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaG9pY2VzID0gT2JqZWN0LmtleXMoY2hvaWNlcykuam9pbignLCcpO1xuICAgIH1cbiAgICByZXN1bHQgPSAneycgKyBjaG9pY2VzICsgJ30nO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IG1ldGF2YXJEZWZhdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChzaXplKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgbWV0YXZhcnMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7IGkgKz0gMSkge1xuICAgICAgbWV0YXZhcnMucHVzaChyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gbWV0YXZhcnM7XG4gIH07XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZm9ybWF0QXJncyA9IGZ1bmN0aW9uIChhY3Rpb24sIG1ldGF2YXJEZWZhdWx0KSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciBtZXRhdmFycztcblxuICB2YXIgYnVpbGRNZXRhdmFyID0gdGhpcy5fbWV0YXZhckZvcm1hdHRlcihhY3Rpb24sIG1ldGF2YXJEZWZhdWx0KTtcblxuICBzd2l0Y2ggKGFjdGlvbi5uYXJncykge1xuICAgIC8qZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkKi9cbiAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICBjYXNlIG51bGw6XG4gICAgICBtZXRhdmFycyA9IGJ1aWxkTWV0YXZhcigxKTtcbiAgICAgIHJlc3VsdCA9ICcnICsgbWV0YXZhcnNbMF07XG4gICAgICBicmVhaztcbiAgICBjYXNlIGMuT1BUSU9OQUw6XG4gICAgICBtZXRhdmFycyA9IGJ1aWxkTWV0YXZhcigxKTtcbiAgICAgIHJlc3VsdCA9ICdbJyArIG1ldGF2YXJzWzBdICsgJ10nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBjLlpFUk9fT1JfTU9SRTpcbiAgICAgIG1ldGF2YXJzID0gYnVpbGRNZXRhdmFyKDIpO1xuICAgICAgcmVzdWx0ID0gJ1snICsgbWV0YXZhcnNbMF0gKyAnIFsnICsgbWV0YXZhcnNbMV0gKyAnIC4uLl1dJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgYy5PTkVfT1JfTU9SRTpcbiAgICAgIG1ldGF2YXJzID0gYnVpbGRNZXRhdmFyKDIpO1xuICAgICAgcmVzdWx0ID0gJycgKyBtZXRhdmFyc1swXSArICcgWycgKyBtZXRhdmFyc1sxXSArICcgLi4uXSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGMuUkVNQUlOREVSOlxuICAgICAgcmVzdWx0ID0gJy4uLic7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGMuUEFSU0VSOlxuICAgICAgbWV0YXZhcnMgPSBidWlsZE1ldGF2YXIoMSk7XG4gICAgICByZXN1bHQgPSBtZXRhdmFyc1swXSArICcgLi4uJztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBtZXRhdmFycyA9IGJ1aWxkTWV0YXZhcihhY3Rpb24ubmFyZ3MpO1xuICAgICAgcmVzdWx0ID0gbWV0YXZhcnMuam9pbignICcpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZXhwYW5kSGVscCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgdmFyIHBhcmFtcyA9IHsgcHJvZzogdGhpcy5fcHJvZyB9O1xuXG4gIE9iamVjdC5rZXlzKGFjdGlvbikuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uUHJvcGVydHkpIHtcbiAgICB2YXIgYWN0aW9uVmFsdWUgPSBhY3Rpb25bYWN0aW9uUHJvcGVydHldO1xuXG4gICAgaWYgKGFjdGlvblZhbHVlICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgICBwYXJhbXNbYWN0aW9uUHJvcGVydHldID0gYWN0aW9uVmFsdWU7XG4gICAgfVxuICB9KTtcblxuICBpZiAocGFyYW1zLmNob2ljZXMpIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5jaG9pY2VzID09PSAnc3RyaW5nJykge1xuICAgICAgcGFyYW1zLmNob2ljZXMgPSBwYXJhbXMuY2hvaWNlcy5zcGxpdCgnJykuam9pbignLCAnKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zLmNob2ljZXMpKSB7XG4gICAgICBwYXJhbXMuY2hvaWNlcyA9IHBhcmFtcy5jaG9pY2VzLmpvaW4oJywgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmFtcy5jaG9pY2VzID0gT2JqZWN0LmtleXMocGFyYW1zLmNob2ljZXMpLmpvaW4oJywgJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNwcmludGYodGhpcy5fZ2V0SGVscFN0cmluZyhhY3Rpb24pLCBwYXJhbXMpO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX3NwbGl0TGluZXMgPSBmdW5jdGlvbiAodGV4dCwgd2lkdGgpIHtcbiAgdmFyIGxpbmVzID0gW107XG4gIHZhciBkZWxpbWl0ZXJzID0gWyAnICcsICcuJywgJywnLCAnIScsICc/JyBdO1xuICB2YXIgcmUgPSBuZXcgUmVnRXhwKCdbJyArIGRlbGltaXRlcnMuam9pbignJykgKyAnXVteJyArIGRlbGltaXRlcnMuam9pbignJykgKyAnXSokJyk7XG5cbiAgdGV4dCA9IHRleHQucmVwbGFjZSgvW1xcblxcfFxcdF0vZywgJyAnKTtcblxuICB0ZXh0ID0gdGV4dC50cmltKCk7XG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UodGhpcy5fd2hpdGVzcGFjZU1hdGNoZXIsICcgJyk7XG5cbiAgLy8gV3JhcHMgdGhlIHNpbmdsZSBwYXJhZ3JhcGggaW4gdGV4dCAoYSBzdHJpbmcpIHNvIGV2ZXJ5IGxpbmVcbiAgLy8gaXMgYXQgbW9zdCB3aWR0aCBjaGFyYWN0ZXJzIGxvbmcuXG4gIHRleHQuc3BsaXQoYy5FT0wpLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcbiAgICBpZiAod2lkdGggPj0gbGluZS5sZW5ndGgpIHtcbiAgICAgIGxpbmVzLnB1c2gobGluZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdyYXBTdGFydCA9IDA7XG4gICAgdmFyIHdyYXBFbmQgPSB3aWR0aDtcbiAgICB2YXIgZGVsaW1pdGVySW5kZXggPSAwO1xuICAgIHdoaWxlICh3cmFwRW5kIDw9IGxpbmUubGVuZ3RoKSB7XG4gICAgICBpZiAod3JhcEVuZCAhPT0gbGluZS5sZW5ndGggJiYgZGVsaW1pdGVycy5pbmRleE9mKGxpbmVbd3JhcEVuZF0gPCAtMSkpIHtcbiAgICAgICAgZGVsaW1pdGVySW5kZXggPSAocmUuZXhlYyhsaW5lLnN1YnN0cmluZyh3cmFwU3RhcnQsIHdyYXBFbmQpKSB8fCB7fSkuaW5kZXg7XG4gICAgICAgIHdyYXBFbmQgPSB3cmFwU3RhcnQgKyBkZWxpbWl0ZXJJbmRleCArIDE7XG4gICAgICB9XG4gICAgICBsaW5lcy5wdXNoKGxpbmUuc3Vic3RyaW5nKHdyYXBTdGFydCwgd3JhcEVuZCkpO1xuICAgICAgd3JhcFN0YXJ0ID0gd3JhcEVuZDtcbiAgICAgIHdyYXBFbmQgKz0gd2lkdGg7XG4gICAgfVxuICAgIGlmICh3cmFwU3RhcnQgPCBsaW5lLmxlbmd0aCkge1xuICAgICAgbGluZXMucHVzaChsaW5lLnN1YnN0cmluZyh3cmFwU3RhcnQsIHdyYXBFbmQpKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBsaW5lcztcbn07XG5cbkhlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9maWxsVGV4dCA9IGZ1bmN0aW9uICh0ZXh0LCB3aWR0aCwgaW5kZW50KSB7XG4gIHZhciBsaW5lcyA9IHRoaXMuX3NwbGl0TGluZXModGV4dCwgd2lkdGgpO1xuICBsaW5lcyA9IGxpbmVzLm1hcChmdW5jdGlvbiAobGluZSkge1xuICAgIHJldHVybiBpbmRlbnQgKyBsaW5lO1xuICB9KTtcbiAgcmV0dXJuIGxpbmVzLmpvaW4oYy5FT0wpO1xufTtcblxuSGVscEZvcm1hdHRlci5wcm90b3R5cGUuX2dldEhlbHBTdHJpbmcgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHJldHVybiBhY3Rpb24uaGVscDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsICAgID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vLyBDb25zdGFudHNcbnZhciBjID0gcmVxdWlyZSgnLi4vY29uc3QnKTtcblxudmFyICQkID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBIZWxwRm9ybWF0dGVyID0gcmVxdWlyZSgnLi9mb3JtYXR0ZXIuanMnKTtcblxuLyoqXG4gKiBuZXcgUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyKG9wdGlvbnMpXG4gKiBuZXcgQXJndW1lbnRQYXJzZXIoe2Zvcm1hdHRlckNsYXNzOiBhcmdwYXJzZS5SYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIsIC4uLn0pXG4gKlxuICogSGVscCBtZXNzYWdlIGZvcm1hdHRlciB3aGljaCBhZGRzIGRlZmF1bHQgdmFsdWVzIHRvIGFyZ3VtZW50IGhlbHAuXG4gKlxuICogT25seSB0aGUgbmFtZSBvZiB0aGlzIGNsYXNzIGlzIGNvbnNpZGVyZWQgYSBwdWJsaWMgQVBJLiBBbGwgdGhlIG1ldGhvZHNcbiAqIHByb3ZpZGVkIGJ5IHRoZSBjbGFzcyBhcmUgY29uc2lkZXJlZCBhbiBpbXBsZW1lbnRhdGlvbiBkZXRhaWwuXG4gKiovXG5cbmZ1bmN0aW9uIEFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyKG9wdGlvbnMpIHtcbiAgSGVscEZvcm1hdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG51dGlsLmluaGVyaXRzKEFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyLCBIZWxwRm9ybWF0dGVyKTtcblxuQXJndW1lbnREZWZhdWx0c0hlbHBGb3JtYXR0ZXIucHJvdG90eXBlLl9nZXRIZWxwU3RyaW5nID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICB2YXIgaGVscCA9IGFjdGlvbi5oZWxwO1xuICBpZiAoYWN0aW9uLmhlbHAuaW5kZXhPZignJShkZWZhdWx0VmFsdWUpcycpID09PSAtMSkge1xuICAgIGlmIChhY3Rpb24uZGVmYXVsdFZhbHVlICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgICB2YXIgZGVmYXVsdGluZ19uYXJncyA9IFsgYy5PUFRJT05BTCwgYy5aRVJPX09SX01PUkUgXTtcbiAgICAgIGlmIChhY3Rpb24uaXNPcHRpb25hbCgpIHx8IChkZWZhdWx0aW5nX25hcmdzLmluZGV4T2YoYWN0aW9uLm5hcmdzKSA+PSAwKSkge1xuICAgICAgICBoZWxwICs9ICcgKGRlZmF1bHQ6ICUoZGVmYXVsdFZhbHVlKXMpJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhlbHA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5Bcmd1bWVudERlZmF1bHRzSGVscEZvcm1hdHRlciA9IEFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyO1xuXG4vKipcbiAqIG5ldyBSYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIob3B0aW9ucylcbiAqIG5ldyBBcmd1bWVudFBhcnNlcih7Zm9ybWF0dGVyQ2xhc3M6IGFyZ3BhcnNlLlJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlciwgLi4ufSlcbiAqXG4gKiBIZWxwIG1lc3NhZ2UgZm9ybWF0dGVyIHdoaWNoIHJldGFpbnMgYW55IGZvcm1hdHRpbmcgaW4gZGVzY3JpcHRpb25zLlxuICpcbiAqIE9ubHkgdGhlIG5hbWUgb2YgdGhpcyBjbGFzcyBpcyBjb25zaWRlcmVkIGEgcHVibGljIEFQSS4gQWxsIHRoZSBtZXRob2RzXG4gKiBwcm92aWRlZCBieSB0aGUgY2xhc3MgYXJlIGNvbnNpZGVyZWQgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLlxuICoqL1xuXG5mdW5jdGlvbiBSYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIob3B0aW9ucykge1xuICBIZWxwRm9ybWF0dGVyLmNhbGwodGhpcywgb3B0aW9ucyk7XG59XG5cbnV0aWwuaW5oZXJpdHMoUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyLCBIZWxwRm9ybWF0dGVyKTtcblxuUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyLnByb3RvdHlwZS5fZmlsbFRleHQgPSBmdW5jdGlvbiAodGV4dCwgd2lkdGgsIGluZGVudCkge1xuICB2YXIgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcbiAgbGluZXMgPSBsaW5lcy5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICByZXR1cm4gJCQudHJpbUVuZChpbmRlbnQgKyBsaW5lKTtcbiAgfSk7XG4gIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbn07XG5tb2R1bGUuZXhwb3J0cy5SYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIgPSBSYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXI7XG5cbi8qKlxuICogbmV3IFJhd1RleHRIZWxwRm9ybWF0dGVyKG9wdGlvbnMpXG4gKiBuZXcgQXJndW1lbnRQYXJzZXIoe2Zvcm1hdHRlckNsYXNzOiBhcmdwYXJzZS5SYXdUZXh0SGVscEZvcm1hdHRlciwgLi4ufSlcbiAqXG4gKiBIZWxwIG1lc3NhZ2UgZm9ybWF0dGVyIHdoaWNoIHJldGFpbnMgZm9ybWF0dGluZyBvZiBhbGwgaGVscCB0ZXh0LlxuICpcbiAqIE9ubHkgdGhlIG5hbWUgb2YgdGhpcyBjbGFzcyBpcyBjb25zaWRlcmVkIGEgcHVibGljIEFQSS4gQWxsIHRoZSBtZXRob2RzXG4gKiBwcm92aWRlZCBieSB0aGUgY2xhc3MgYXJlIGNvbnNpZGVyZWQgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLlxuICoqL1xuXG5mdW5jdGlvbiBSYXdUZXh0SGVscEZvcm1hdHRlcihvcHRpb25zKSB7XG4gIFJhd0Rlc2NyaXB0aW9uSGVscEZvcm1hdHRlci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG51dGlsLmluaGVyaXRzKFJhd1RleHRIZWxwRm9ybWF0dGVyLCBSYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXIpO1xuXG5SYXdUZXh0SGVscEZvcm1hdHRlci5wcm90b3R5cGUuX3NwbGl0TGluZXMgPSBmdW5jdGlvbiAodGV4dCkge1xuICByZXR1cm4gdGV4dC5zcGxpdCgnXFxuJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5SYXdUZXh0SGVscEZvcm1hdHRlciA9IFJhd1RleHRIZWxwRm9ybWF0dGVyO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZVxuXG5mdW5jdGlvbiBub3JtYWxpemUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgcG93ZXJzID0gMFxuXG5leHBvcnRzLmJvb2xlYW4gPSBpbmNyZW1lbnQoKVxuZXhwb3J0cy5ib29sZWFuaXNoID0gaW5jcmVtZW50KClcbmV4cG9ydHMub3ZlcmxvYWRlZEJvb2xlYW4gPSBpbmNyZW1lbnQoKVxuZXhwb3J0cy5udW1iZXIgPSBpbmNyZW1lbnQoKVxuZXhwb3J0cy5zcGFjZVNlcGFyYXRlZCA9IGluY3JlbWVudCgpXG5leHBvcnRzLmNvbW1hU2VwYXJhdGVkID0gaW5jcmVtZW50KClcbmV4cG9ydHMuY29tbWFPclNwYWNlU2VwYXJhdGVkID0gaW5jcmVtZW50KClcblxuZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICByZXR1cm4gTWF0aC5wb3coMiwgKytwb3dlcnMpXG59XG4iLCIvKiFcbiAqIHJlcGVhdC1zdHJpbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L3JlcGVhdC1zdHJpbmc+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LTIwMTUsIEpvbiBTY2hsaW5rZXJ0LlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBSZXN1bHRzIGNhY2hlXG4gKi9cblxudmFyIHJlcyA9ICcnO1xudmFyIGNhY2hlO1xuXG4vKipcbiAqIEV4cG9zZSBgcmVwZWF0YFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcmVwZWF0O1xuXG4vKipcbiAqIFJlcGVhdCB0aGUgZ2l2ZW4gYHN0cmluZ2AgdGhlIHNwZWNpZmllZCBgbnVtYmVyYFxuICogb2YgdGltZXMuXG4gKlxuICogKipFeGFtcGxlOioqXG4gKlxuICogYGBganNcbiAqIHZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG4gKiByZXBlYXQoJ0EnLCA1KTtcbiAqIC8vPT4gQUFBQUFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBgc3RyaW5nYCBUaGUgc3RyaW5nIHRvIHJlcGVhdFxuICogQHBhcmFtIHtOdW1iZXJ9IGBudW1iZXJgIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0IHRoZSBzdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30gUmVwZWF0ZWQgc3RyaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHIsIG51bSkge1xuICBpZiAodHlwZW9mIHN0ciAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBlY3RlZCBhIHN0cmluZycpO1xuICB9XG5cbiAgLy8gY292ZXIgY29tbW9uLCBxdWljayB1c2UgY2FzZXNcbiAgaWYgKG51bSA9PT0gMSkgcmV0dXJuIHN0cjtcbiAgaWYgKG51bSA9PT0gMikgcmV0dXJuIHN0ciArIHN0cjtcblxuICB2YXIgbWF4ID0gc3RyLmxlbmd0aCAqIG51bTtcbiAgaWYgKGNhY2hlICE9PSBzdHIgfHwgdHlwZW9mIGNhY2hlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNhY2hlID0gc3RyO1xuICAgIHJlcyA9ICcnO1xuICB9IGVsc2UgaWYgKHJlcy5sZW5ndGggPj0gbWF4KSB7XG4gICAgcmV0dXJuIHJlcy5zdWJzdHIoMCwgbWF4KTtcbiAgfVxuXG4gIHdoaWxlIChtYXggPiByZXMubGVuZ3RoICYmIG51bSA+IDEpIHtcbiAgICBpZiAobnVtICYgMSkge1xuICAgICAgcmVzICs9IHN0cjtcbiAgICB9XG5cbiAgICBudW0gPj49IDE7XG4gICAgc3RyICs9IHN0cjtcbiAgfVxuXG4gIHJlcyArPSBzdHI7XG4gIHJlcyA9IHJlcy5zdWJzdHIoMCwgbWF4KTtcbiAgcmV0dXJuIHJlcztcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRyaW1UcmFpbGluZ0xpbmVzXG5cbnZhciBsaW5lID0gJ1xcbidcblxuLy8gUmVtb3ZlIGZpbmFsIG5ld2xpbmUgY2hhcmFjdGVycyBmcm9tIGB2YWx1ZWAuXG5mdW5jdGlvbiB0cmltVHJhaWxpbmdMaW5lcyh2YWx1ZSkge1xuICB2YXIgdmFsID0gU3RyaW5nKHZhbHVlKVxuICB2YXIgaW5kZXggPSB2YWwubGVuZ3RoXG5cbiAgd2hpbGUgKHZhbC5jaGFyQXQoLS1pbmRleCkgPT09IGxpbmUpIHtcbiAgICAvLyBFbXB0eVxuICB9XG5cbiAgcmV0dXJuIHZhbC5zbGljZSgwLCBpbmRleCArIDEpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaW50ZXJydXB0O1xuXG5mdW5jdGlvbiBpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBjdHgsIHBhcmFtcykge1xuICB2YXIgYm9vbHMgPSBbJ3BlZGFudGljJywgJ2NvbW1vbm1hcmsnXTtcbiAgdmFyIGNvdW50ID0gYm9vbHMubGVuZ3RoO1xuICB2YXIgbGVuZ3RoID0gaW50ZXJydXB0b3JzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBpbnRlcnJ1cHRvcjtcbiAgdmFyIGNvbmZpZztcbiAgdmFyIGZuO1xuICB2YXIgb2Zmc2V0O1xuICB2YXIgYm9vbDtcbiAgdmFyIGlnbm9yZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGludGVycnVwdG9yID0gaW50ZXJydXB0b3JzW2luZGV4XTtcbiAgICBjb25maWcgPSBpbnRlcnJ1cHRvclsxXSB8fCB7fTtcbiAgICBmbiA9IGludGVycnVwdG9yWzBdO1xuICAgIG9mZnNldCA9IC0xO1xuICAgIGlnbm9yZSA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKCsrb2Zmc2V0IDwgY291bnQpIHtcbiAgICAgIGJvb2wgPSBib29sc1tvZmZzZXRdO1xuXG4gICAgICBpZiAoY29uZmlnW2Jvb2xdICE9PSB1bmRlZmluZWQgJiYgY29uZmlnW2Jvb2xdICE9PSBjdHgub3B0aW9uc1tib29sXSkge1xuICAgICAgICBpZ25vcmUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaWdub3JlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodG9rZW5pemVyc1tmbl0uYXBwbHkoY3R4LCBwYXJhbXMpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjb2xsYXBzZVdoaXRlU3BhY2UgPSByZXF1aXJlKCdjb2xsYXBzZS13aGl0ZS1zcGFjZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZTtcblxuLyogTm9ybWFsaXplIGFuIGlkZW50aWZpZXIuICBDb2xsYXBzZXMgbXVsdGlwbGUgd2hpdGUgc3BhY2VcbiAqIGNoYXJhY3RlcnMgaW50byBhIHNpbmdsZSBzcGFjZSwgYW5kIHJlbW92ZXMgY2FzaW5nLiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKHZhbHVlKSB7XG4gIHJldHVybiBjb2xsYXBzZVdoaXRlU3BhY2UodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS5cbi8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tXG4vLyBXcml0YWJsZS5cblxubW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGtleXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gIHJldHVybiBrZXlzO1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgUmVhZGFibGUgPSByZXF1aXJlKCcuL19zdHJlYW1fcmVhZGFibGUnKTtcbnZhciBXcml0YWJsZSA9IHJlcXVpcmUoJy4vX3N0cmVhbV93cml0YWJsZScpO1xuXG51dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG5mb3JFYWNoKG9iamVjdEtleXMoV3JpdGFibGUucHJvdG90eXBlKSwgZnVuY3Rpb24obWV0aG9kKSB7XG4gIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKVxuICAgIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdO1xufSk7XG5cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuICAgIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpO1xuXG4gIFJlYWRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFkYWJsZSA9PT0gZmFsc2UpXG4gICAgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKVxuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlO1xuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmFsbG93SGFsZk9wZW4gPT09IGZhbHNlKVxuICAgIHRoaXMuYWxsb3dIYWxmT3BlbiA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZW5kJywgb25lbmQpO1xufVxuXG4vLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyXG5mdW5jdGlvbiBvbmVuZCgpIHtcbiAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCxcbiAgLy8gdGhlbiB3ZSdyZSBvay5cbiAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKVxuICAgIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBwcm9jZXNzLm5leHRUaWNrKHRoaXMuZW5kLmJpbmQodGhpcykpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoICh4cywgZikge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGYoeHNbaV0sIGkpO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqYXZhc2NyaXB0XG5qYXZhc2NyaXB0LmRpc3BsYXlOYW1lID0gJ2phdmFzY3JpcHQnXG5qYXZhc2NyaXB0LmFsaWFzZXMgPSBbJ2pzJ11cbmZ1bmN0aW9uIGphdmFzY3JpcHQoUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQgPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdjbGlrZScsIHtcbiAgICAnY2xhc3MtbmFtZSc6IFtcbiAgICAgIFByaXNtLmxhbmd1YWdlcy5jbGlrZVsnY2xhc3MtbmFtZSddLFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W14kXFx3XFx4QTAtXFx1RkZGRl0pW18kQS1aXFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxcLig/OnByb3RvdHlwZXxjb25zdHJ1Y3RvcikpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfVxuICAgIF0sXG4gICAga2V5d29yZDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKCg/Ol58fSlcXHMqKSg/OmNhdGNofGZpbmFsbHkpXFxiLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteLl0pXFxiKD86YXN8YXN5bmMoPz1cXHMqKD86ZnVuY3Rpb25cXGJ8XFwofFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGF3YWl0fGJyZWFrfGNhc2V8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBudW1iZXI6IC9cXGIoPzooPzowW3hYXSg/OltcXGRBLUZhLWZdKD86X1tcXGRBLUZhLWZdKT8pK3wwW2JCXSg/OlswMV0oPzpfWzAxXSk/KSt8MFtvT10oPzpbMC03XSg/Ol9bMC03XSk/KSspbj98KD86XFxkKD86X1xcZCk/KStufE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiKD86XFxkKD86X1xcZCk/KStcXC4/KD86XFxkKD86X1xcZCk/KSp8XFxCXFwuKD86XFxkKD86X1xcZCk/KSspKD86W0VlXVsrLV0/KD86XFxkKD86X1xcZCk/KSspPy8sXG4gICAgLy8gQWxsb3cgZm9yIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycyAoU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIwMDg0NDQpXG4gICAgZnVuY3Rpb246IC8jP1tfJGEtekEtWlxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqKD86XFwuXFxzKig/OmFwcGx5fGJpbmR8Y2FsbClcXHMqKT9cXCgpLyxcbiAgICBvcGVyYXRvcjogLy1bLT1dP3xcXCtbKz1dP3whPT89P3w8PD89P3w+Pj8+Pz0/fD0oPzo9PT98Pik/fCZbJj1dP3xcXHxbfD1dP3xcXCpcXCo/PT98XFwvPT98fnxcXF49P3wlPT98XFw/fFxcLnszfS9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbXG4gICAgJ2NsYXNzLW5hbWUnXG4gIF1bMF0ucGF0dGVybiA9IC8oXFxiKD86Y2xhc3N8aW50ZXJmYWNlfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfG5ldylcXHMrKVtcXHcuXFxcXF0rL1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ2tleXdvcmQnLCB7XG4gICAgcmVnZXg6IHtcbiAgICAgIHBhdHRlcm46IC8oKD86XnxbXiRcXHdcXHhBMC1cXHVGRkZGLlwiJ1xcXSlcXHNdKVxccyopXFwvKFxcWyg/OlteXFxdXFxcXFxcclxcbl18XFxcXC4pKl18XFxcXC58W14vXFxcXFxcW1xcclxcbl0pK1xcL1tnaW15dXNdezAsNn0oPz1cXHMqKCR8W1xcclxcbiwuO30pXFxdXSkpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIC8vIFRoaXMgbXVzdCBiZSBkZWNsYXJlZCBiZWZvcmUga2V5d29yZCBiZWNhdXNlIHdlIHVzZSBcImZ1bmN0aW9uXCIgaW5zaWRlIHRoZSBsb29rLWZvcndhcmRcbiAgICAnZnVuY3Rpb24tdmFyaWFibGUnOiB7XG4gICAgICBwYXR0ZXJuOiAvIz9bXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKD89XFxzKls9Ol1cXHMqKD86YXN5bmNcXHMqKT8oPzpcXGJmdW5jdGlvblxcYnwoPzpcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKXxbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKVxccyo9PikpLyxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgfSxcbiAgICBwYXJhbWV0ZXI6IFtcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhmdW5jdGlvbig/OlxccytbXyRBLVphLXpcXHhBMC1cXHVGRkZGXVskXFx3XFx4QTAtXFx1RkZGRl0qKT9cXHMqXFwoXFxzKikoPyFcXHMpKD86W14oKV18XFwoW14oKV0qXFwpKSs/KD89XFxzKlxcKSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvW18kYS16XFx4QTAtXFx1RkZGRl1bJFxcd1xceEEwLVxcdUZGRkZdKig/PVxccyo9PikvaSxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhcXChcXHMqKSg/IVxccykoPzpbXigpXXxcXChbXigpXSpcXCkpKz8oPz1cXHMqXFwpXFxzKj0+KS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHBhdHRlcm46IC8oKD86XFxifFxcc3xeKSg/ISg/OmFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKSg/IVskXFx3XFx4QTAtXFx1RkZGRl0pKSg/OltfJEEtWmEtelxceEEwLVxcdUZGRkZdWyRcXHdcXHhBMC1cXHVGRkZGXSpcXHMqKVxcKFxccyopKD8hXFxzKSg/OlteKCldfFxcKFteKCldKlxcKSkrPyg/PVxccypcXClcXHMqXFx7KS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgICAgIH1cbiAgICBdLFxuICAgIGNvbnN0YW50OiAvXFxiW0EtWl0oPzpbQS1aX118XFxkeD8pKlxcYi9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdzdHJpbmcnLCB7XG4gICAgJ3RlbXBsYXRlLXN0cmluZyc6IHtcbiAgICAgIHBhdHRlcm46IC9gKD86XFxcXFtcXHNcXFNdfFxcJHsoPzpbXnt9XXx7KD86W157fV18e1tefV0qfSkqfSkrfXwoPyFcXCR7KVteXFxcXGBdKSpgLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAndGVtcGxhdGUtcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgcGF0dGVybjogL15gfGAkLyxcbiAgICAgICAgICBhbGlhczogJ3N0cmluZydcbiAgICAgICAgfSxcbiAgICAgICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgICAgIHBhdHRlcm46IC8oKD86XnxbXlxcXFxdKSg/OlxcXFx7Mn0pKilcXCR7KD86W157fV18eyg/Oltee31dfHtbXn1dKn0pKn0pK30vLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvbic6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogL15cXCR7fH0kLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0OiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3RyaW5nOiAvW1xcc1xcU10rL1xuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgaWYgKFByaXNtLmxhbmd1YWdlcy5tYXJrdXApIHtcbiAgICBQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5hZGRJbmxpbmVkKCdzY3JpcHQnLCAnamF2YXNjcmlwdCcpXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLmpzID0gUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVzY3JpcHRcbnR5cGVzY3JpcHQuZGlzcGxheU5hbWUgPSAndHlwZXNjcmlwdCdcbnR5cGVzY3JpcHQuYWxpYXNlcyA9IFsndHMnXVxuZnVuY3Rpb24gdHlwZXNjcmlwdChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2phdmFzY3JpcHQnLCB7XG4gICAgLy8gRnJvbSBKYXZhU2NyaXB0IFByaXNtIGtleXdvcmQgbGlzdCBhbmQgVHlwZVNjcmlwdCBsYW5ndWFnZSBzcGVjOiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvYmxvYi9tYXN0ZXIvZG9jL3NwZWMubWQjMjIxLXJlc2VydmVkLXdvcmRzXG4gICAga2V5d29yZDogL1xcYig/OmFic3RyYWN0fGFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29uc3RydWN0b3J8Y29udGludWV8ZGVidWdnZXJ8ZGVjbGFyZXxkZWZhdWx0fGRlbGV0ZXxkb3xlbHNlfGVudW18ZXhwb3J0fGV4dGVuZHN8ZmluYWxseXxmb3J8ZnJvbXxmdW5jdGlvbnxnZXR8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8aXN8a2V5b2Z8bGV0fG1vZHVsZXxuYW1lc3BhY2V8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmVhZG9ubHl8cmV0dXJufHJlcXVpcmV8c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZXx0eXBlb2Z8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICAgIGJ1aWx0aW46IC9cXGIoPzpzdHJpbmd8RnVuY3Rpb258YW55fG51bWJlcnxib29sZWFufEFycmF5fHN5bWJvbHxjb25zb2xlfFByb21pc2V8dW5rbm93bnxuZXZlcilcXGIvXG4gIH0pXG4gIFByaXNtLmxhbmd1YWdlcy50cyA9IFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0XG59XG4iLCIndXNlIHN0cmljdCdcblxuLyogZ2xvYmFsIHdpbmRvdywgc2VsZiAqL1xuXG52YXIgcmVzdG9yZSA9IGNhcHR1cmUoKVxuXG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAtIERvbid0IGFsbG93IFByaXNtIHRvIHJ1biBvbiBwYWdlIGxvYWQgaW4gYnJvd3NlciBvclxuLy8gdG8gc3RhcnQgbWVzc2FnaW5nIGZyb20gd29ya2Vycy5cbnZhciBjdHggPVxuICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJ1xuICAgID8gdHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnXG4gICAgICA/IHt9XG4gICAgICA6IHNlbGZcbiAgICA6IHdpbmRvd1xuXG5jdHguUHJpc20gPSB7bWFudWFsOiB0cnVlLCBkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6IHRydWV9XG5cbi8vIExvYWQgYWxsIHN0dWZmIGluIGBwcmlzbS5qc2AgaXRzZWxmLCBleGNlcHQgZm9yIGBwcmlzbS1maWxlLWhpZ2hsaWdodC5qc2AuXG4vLyBUaGUgd3JhcHBlZCBub24tbGVha3kgZ3JhbW1hcnMgYXJlIGxvYWRlZCBpbnN0ZWFkIG9mIFByaXNt4oCZcyBvcmlnaW5hbHMuXG52YXIgaCA9IHJlcXVpcmUoJ2hhc3RzY3JpcHQnKVxudmFyIGRlY29kZSA9IHJlcXVpcmUoJ3BhcnNlLWVudGl0aWVzJylcbnZhciBQcmlzbSA9IHJlcXVpcmUoJ3ByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jb3JlJylcbnZhciBtYXJrdXAgPSByZXF1aXJlKCcuL2xhbmcvbWFya3VwJylcbnZhciBjc3MgPSByZXF1aXJlKCcuL2xhbmcvY3NzJylcbnZhciBjbGlrZSA9IHJlcXVpcmUoJy4vbGFuZy9jbGlrZScpXG52YXIganMgPSByZXF1aXJlKCcuL2xhbmcvamF2YXNjcmlwdCcpXG5cbnJlc3RvcmUoKVxuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxuLy8gSW5oZXJpdC5cbmZ1bmN0aW9uIFJlZnJhY3RvcigpIHt9XG5cblJlZnJhY3Rvci5wcm90b3R5cGUgPSBQcmlzbVxuXG4vLyBDb25zdHJ1Y3QuXG52YXIgcmVmcmFjdCA9IG5ldyBSZWZyYWN0b3IoKVxuXG4vLyBFeHBvc2UuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZnJhY3RcblxuLy8gQ3JlYXRlLlxucmVmcmFjdC5oaWdobGlnaHQgPSBoaWdobGlnaHRcbnJlZnJhY3QucmVnaXN0ZXIgPSByZWdpc3RlclxucmVmcmFjdC5hbGlhcyA9IGFsaWFzXG5yZWZyYWN0LnJlZ2lzdGVyZWQgPSByZWdpc3RlcmVkXG5yZWZyYWN0Lmxpc3RMYW5ndWFnZXMgPSBsaXN0TGFuZ3VhZ2VzXG5cbi8vIFJlZ2lzdGVyIGJ1bmRsZWQgZ3JhbW1hcnMuXG5yZWdpc3RlcihtYXJrdXApXG5yZWdpc3Rlcihjc3MpXG5yZWdpc3RlcihjbGlrZSlcbnJlZ2lzdGVyKGpzKVxuXG5yZWZyYWN0LnV0aWwuZW5jb2RlID0gZW5jb2RlXG5yZWZyYWN0LlRva2VuLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuXG5mdW5jdGlvbiByZWdpc3RlcihncmFtbWFyKSB7XG4gIGlmICh0eXBlb2YgZ3JhbW1hciAhPT0gJ2Z1bmN0aW9uJyB8fCAhZ3JhbW1hci5kaXNwbGF5TmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYGZ1bmN0aW9uYCBmb3IgYGdyYW1tYXJgLCBnb3QgYCcgKyBncmFtbWFyICsgJ2AnKVxuICB9XG5cbiAgLy8gRG8gbm90IGR1cGxpY2F0ZSByZWdpc3RyYXRpb25zLlxuICBpZiAocmVmcmFjdC5sYW5ndWFnZXNbZ3JhbW1hci5kaXNwbGF5TmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgIGdyYW1tYXIocmVmcmFjdClcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGlhcyhuYW1lLCBhbGlhcykge1xuICB2YXIgbGFuZ3VhZ2VzID0gcmVmcmFjdC5sYW5ndWFnZXNcbiAgdmFyIG1hcCA9IG5hbWVcbiAgdmFyIGtleVxuICB2YXIgbGlzdFxuICB2YXIgbGVuZ3RoXG4gIHZhciBpbmRleFxuXG4gIGlmIChhbGlhcykge1xuICAgIG1hcCA9IHt9XG4gICAgbWFwW25hbWVdID0gYWxpYXNcbiAgfVxuXG4gIGZvciAoa2V5IGluIG1hcCkge1xuICAgIGxpc3QgPSBtYXBba2V5XVxuICAgIGxpc3QgPSB0eXBlb2YgbGlzdCA9PT0gJ3N0cmluZycgPyBbbGlzdF0gOiBsaXN0XG4gICAgbGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgICBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgbGFuZ3VhZ2VzW2xpc3RbaW5kZXhdXSA9IGxhbmd1YWdlc1trZXldXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhpZ2hsaWdodCh2YWx1ZSwgbmFtZSkge1xuICB2YXIgc3VwID0gUHJpc20uaGlnaGxpZ2h0XG4gIHZhciBncmFtbWFyXG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGBzdHJpbmdgIGZvciBgdmFsdWVgLCBnb3QgYCcgKyB2YWx1ZSArICdgJylcbiAgfVxuXG4gIC8vIGBuYW1lYCBpcyBhIGdyYW1tYXIgb2JqZWN0LlxuICBpZiAocmVmcmFjdC51dGlsLnR5cGUobmFtZSkgPT09ICdPYmplY3QnKSB7XG4gICAgZ3JhbW1hciA9IG5hbWVcbiAgICBuYW1lID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYHN0cmluZ2AgZm9yIGBuYW1lYCwgZ290IGAnICsgbmFtZSArICdgJylcbiAgICB9XG5cbiAgICBpZiAob3duLmNhbGwocmVmcmFjdC5sYW5ndWFnZXMsIG5hbWUpKSB7XG4gICAgICBncmFtbWFyID0gcmVmcmFjdC5sYW5ndWFnZXNbbmFtZV1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGxhbmd1YWdlOiBgJyArIG5hbWUgKyAnYCBpcyBub3QgcmVnaXN0ZXJlZCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1cC5jYWxsKHRoaXMsIHZhbHVlLCBncmFtbWFyLCBuYW1lKVxufVxuXG5mdW5jdGlvbiByZWdpc3RlcmVkKGxhbmd1YWdlKSB7XG4gIGlmICh0eXBlb2YgbGFuZ3VhZ2UgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBgc3RyaW5nYCBmb3IgYGxhbmd1YWdlYCwgZ290IGAnICsgbGFuZ3VhZ2UgKyAnYCcpXG4gIH1cblxuICByZXR1cm4gb3duLmNhbGwocmVmcmFjdC5sYW5ndWFnZXMsIGxhbmd1YWdlKVxufVxuXG5mdW5jdGlvbiBsaXN0TGFuZ3VhZ2VzKCkge1xuICB2YXIgbGFuZ3VhZ2VzID0gcmVmcmFjdC5sYW5ndWFnZXNcbiAgdmFyIGxpc3QgPSBbXVxuICB2YXIgbGFuZ3VhZ2VcblxuICBmb3IgKGxhbmd1YWdlIGluIGxhbmd1YWdlcykge1xuICAgIGlmIChcbiAgICAgIG93bi5jYWxsKGxhbmd1YWdlcywgbGFuZ3VhZ2UpICYmXG4gICAgICB0eXBlb2YgbGFuZ3VhZ2VzW2xhbmd1YWdlXSA9PT0gJ29iamVjdCdcbiAgICApIHtcbiAgICAgIGxpc3QucHVzaChsYW5ndWFnZSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGlzdFxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUsIGxhbmd1YWdlLCBwYXJlbnQpIHtcbiAgdmFyIGVudlxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHt0eXBlOiAndGV4dCcsIHZhbHVlOiB2YWx1ZX1cbiAgfVxuXG4gIGlmIChyZWZyYWN0LnV0aWwudHlwZSh2YWx1ZSkgPT09ICdBcnJheScpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QWxsKHZhbHVlLCBsYW5ndWFnZSlcbiAgfVxuXG4gIGVudiA9IHtcbiAgICB0eXBlOiB2YWx1ZS50eXBlLFxuICAgIGNvbnRlbnQ6IHJlZnJhY3QuVG9rZW4uc3RyaW5naWZ5KHZhbHVlLmNvbnRlbnQsIGxhbmd1YWdlLCBwYXJlbnQpLFxuICAgIHRhZzogJ3NwYW4nLFxuICAgIGNsYXNzZXM6IFsndG9rZW4nLCB2YWx1ZS50eXBlXSxcbiAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfVxuXG4gIGlmICh2YWx1ZS5hbGlhcykge1xuICAgIGVudi5jbGFzc2VzID0gZW52LmNsYXNzZXMuY29uY2F0KHZhbHVlLmFsaWFzKVxuICB9XG5cbiAgcmVmcmFjdC5ob29rcy5ydW4oJ3dyYXAnLCBlbnYpXG5cbiAgcmV0dXJuIGgoXG4gICAgZW52LnRhZyArICcuJyArIGVudi5jbGFzc2VzLmpvaW4oJy4nKSxcbiAgICBhdHRyaWJ1dGVzKGVudi5hdHRyaWJ1dGVzKSxcbiAgICBlbnYuY29udGVudFxuICApXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFsbCh2YWx1ZXMsIGxhbmd1YWdlKSB7XG4gIHZhciByZXN1bHQgPSBbXVxuICB2YXIgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgdmFsdWVcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XVxuXG4gICAgaWYgKHZhbHVlICE9PSAnJyAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSlcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IC0xXG4gIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGhcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhbHVlID0gcmVzdWx0W2luZGV4XVxuICAgIHJlc3VsdFtpbmRleF0gPSByZWZyYWN0LlRva2VuLnN0cmluZ2lmeSh2YWx1ZSwgbGFuZ3VhZ2UsIHJlc3VsdClcbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gZW5jb2RlKHRva2Vucykge1xuICByZXR1cm4gdG9rZW5zXG59XG5cbmZ1bmN0aW9uIGF0dHJpYnV0ZXMoYXR0cnMpIHtcbiAgdmFyIGtleVxuXG4gIGZvciAoa2V5IGluIGF0dHJzKSB7XG4gICAgYXR0cnNba2V5XSA9IGRlY29kZShhdHRyc1trZXldKVxuICB9XG5cbiAgcmV0dXJuIGF0dHJzXG59XG5cbmZ1bmN0aW9uIGNhcHR1cmUoKSB7XG4gIHZhciBkZWZpbmVkID0gJ1ByaXNtJyBpbiBnbG9iYWxcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgdmFyIGN1cnJlbnQgPSBkZWZpbmVkID8gZ2xvYmFsLlByaXNtIDogdW5kZWZpbmVkXG5cbiAgcmV0dXJuIHJlc3RvcmVcblxuICBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIC0gQ2xlYW4gbGVha3MgYWZ0ZXIgUHJpc20uICovXG4gICAgaWYgKGRlZmluZWQpIHtcbiAgICAgIGdsb2JhbC5QcmlzbSA9IGN1cnJlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGdsb2JhbC5QcmlzbVxuICAgIH1cblxuICAgIGRlZmluZWQgPSB1bmRlZmluZWRcbiAgICBjdXJyZW50ID0gdW5kZWZpbmVkXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NlcnZlci5ub2RlJyk7XG4iLCIoZnVuY3Rpb24od2luZG93KSB7XG4gICAgdmFyIHJlID0ge1xuICAgICAgICBub3Rfc3RyaW5nOiAvW15zXS8sXG4gICAgICAgIG51bWJlcjogL1tkaWVmZ10vLFxuICAgICAgICBqc29uOiAvW2pdLyxcbiAgICAgICAgbm90X2pzb246IC9bXmpdLyxcbiAgICAgICAgdGV4dDogL15bXlxceDI1XSsvLFxuICAgICAgICBtb2R1bG86IC9eXFx4MjV7Mn0vLFxuICAgICAgICBwbGFjZWhvbGRlcjogL15cXHgyNSg/OihbMS05XVxcZCopXFwkfFxcKChbXlxcKV0rKVxcKSk/KFxcKyk/KDB8J1teJF0pPygtKT8oXFxkKyk/KD86XFwuKFxcZCspKT8oW2ItZ2lqb3N1eFhdKS8sXG4gICAgICAgIGtleTogL14oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgICAga2V5X2FjY2VzczogL15cXC4oW2Etel9dW2Etel9cXGRdKikvaSxcbiAgICAgICAgaW5kZXhfYWNjZXNzOiAvXlxcWyhcXGQrKVxcXS8sXG4gICAgICAgIHNpZ246IC9eW1xcK1xcLV0vXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ByaW50ZigpIHtcbiAgICAgICAgdmFyIGtleSA9IGFyZ3VtZW50c1swXSwgY2FjaGUgPSBzcHJpbnRmLmNhY2hlXG4gICAgICAgIGlmICghKGNhY2hlW2tleV0gJiYgY2FjaGUuaGFzT3duUHJvcGVydHkoa2V5KSkpIHtcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSBzcHJpbnRmLnBhcnNlKGtleSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3ByaW50Zi5mb3JtYXQuY2FsbChudWxsLCBjYWNoZVtrZXldLCBhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgc3ByaW50Zi5mb3JtYXQgPSBmdW5jdGlvbihwYXJzZV90cmVlLCBhcmd2KSB7XG4gICAgICAgIHZhciBjdXJzb3IgPSAxLCB0cmVlX2xlbmd0aCA9IHBhcnNlX3RyZWUubGVuZ3RoLCBub2RlX3R5cGUgPSBcIlwiLCBhcmcsIG91dHB1dCA9IFtdLCBpLCBrLCBtYXRjaCwgcGFkLCBwYWRfY2hhcmFjdGVyLCBwYWRfbGVuZ3RoLCBpc19wb3NpdGl2ZSA9IHRydWUsIHNpZ24gPSBcIlwiXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0cmVlX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBub2RlX3R5cGUgPSBnZXRfdHlwZShwYXJzZV90cmVlW2ldKVxuICAgICAgICAgICAgaWYgKG5vZGVfdHlwZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtvdXRwdXQubGVuZ3RoXSA9IHBhcnNlX3RyZWVbaV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGVfdHlwZSA9PT0gXCJhcnJheVwiKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2ggPSBwYXJzZV90cmVlW2ldIC8vIGNvbnZlbmllbmNlIHB1cnBvc2VzIG9ubHlcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbMl0pIHsgLy8ga2V5d29yZCBhcmd1bWVudFxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcl1cbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IG1hdGNoWzJdLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFyZy5oYXNPd25Qcm9wZXJ0eShtYXRjaFsyXVtrXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3Ioc3ByaW50ZihcIltzcHJpbnRmXSBwcm9wZXJ0eSAnJXMnIGRvZXMgbm90IGV4aXN0XCIsIG1hdGNoWzJdW2tdKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZ1ttYXRjaFsyXVtrXV1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXRjaFsxXSkgeyAvLyBwb3NpdGlvbmFsIGFyZ3VtZW50IChleHBsaWNpdClcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndlttYXRjaFsxXV1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHBvc2l0aW9uYWwgYXJndW1lbnQgKGltcGxpY2l0KVxuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd2W2N1cnNvcisrXVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChnZXRfdHlwZShhcmcpID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5ub3Rfc3RyaW5nLnRlc3QobWF0Y2hbOF0pICYmIHJlLm5vdF9qc29uLnRlc3QobWF0Y2hbOF0pICYmIChnZXRfdHlwZShhcmcpICE9IFwibnVtYmVyXCIgJiYgaXNOYU4oYXJnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzcHJpbnRmKFwiW3NwcmludGZdIGV4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVzXCIsIGdldF90eXBlKGFyZykpKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZS5udW1iZXIudGVzdChtYXRjaFs4XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNfcG9zaXRpdmUgPSBhcmcgPj0gMFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWF0Y2hbOF0pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZygyKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gU3RyaW5nLmZyb21DaGFyQ29kZShhcmcpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBwYXJzZUludChhcmcsIDEwKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwialwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gSlNPTi5zdHJpbmdpZnkoYXJnLCBudWxsLCBtYXRjaFs2XSA/IHBhcnNlSW50KG1hdGNoWzZdKSA6IDApXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBtYXRjaFs3XSA/IGFyZy50b0V4cG9uZW50aWFsKG1hdGNoWzddKSA6IGFyZy50b0V4cG9uZW50aWFsKClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IG1hdGNoWzddID8gcGFyc2VGbG9hdChhcmcpLnRvRml4ZWQobWF0Y2hbN10pIDogcGFyc2VGbG9hdChhcmcpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJnXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBtYXRjaFs3XSA/IHBhcnNlRmxvYXQoYXJnKS50b1ByZWNpc2lvbihtYXRjaFs3XSkgOiBwYXJzZUZsb2F0KGFyZylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm9cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZy50b1N0cmluZyg4KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic1wiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gKChhcmcgPSBTdHJpbmcoYXJnKSkgJiYgbWF0Y2hbN10gPyBhcmcuc3Vic3RyaW5nKDAsIG1hdGNoWzddKSA6IGFyZylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInVcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZyA9IGFyZyA+Pj4gMFxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwieFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnRvU3RyaW5nKDE2KVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiWFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZS5qc29uLnRlc3QobWF0Y2hbOF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtvdXRwdXQubGVuZ3RoXSA9IGFyZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlLm51bWJlci50ZXN0KG1hdGNoWzhdKSAmJiAoIWlzX3Bvc2l0aXZlIHx8IG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IGlzX3Bvc2l0aXZlID8gXCIrXCIgOiBcIi1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnRvU3RyaW5nKCkucmVwbGFjZShyZS5zaWduLCBcIlwiKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2lnbiA9IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYWRfY2hhcmFjdGVyID0gbWF0Y2hbNF0gPyBtYXRjaFs0XSA9PT0gXCIwXCIgPyBcIjBcIiA6IG1hdGNoWzRdLmNoYXJBdCgxKSA6IFwiIFwiXG4gICAgICAgICAgICAgICAgICAgIHBhZF9sZW5ndGggPSBtYXRjaFs2XSAtIChzaWduICsgYXJnKS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgcGFkID0gbWF0Y2hbNl0gPyAocGFkX2xlbmd0aCA+IDAgPyBzdHJfcmVwZWF0KHBhZF9jaGFyYWN0ZXIsIHBhZF9sZW5ndGgpIDogXCJcIikgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtvdXRwdXQubGVuZ3RoXSA9IG1hdGNoWzVdID8gc2lnbiArIGFyZyArIHBhZCA6IChwYWRfY2hhcmFjdGVyID09PSBcIjBcIiA/IHNpZ24gKyBwYWQgKyBhcmcgOiBwYWQgKyBzaWduICsgYXJnKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oXCJcIilcbiAgICB9XG5cbiAgICBzcHJpbnRmLmNhY2hlID0ge31cblxuICAgIHNwcmludGYucGFyc2UgPSBmdW5jdGlvbihmbXQpIHtcbiAgICAgICAgdmFyIF9mbXQgPSBmbXQsIG1hdGNoID0gW10sIHBhcnNlX3RyZWUgPSBbXSwgYXJnX25hbWVzID0gMFxuICAgICAgICB3aGlsZSAoX2ZtdCkge1xuICAgICAgICAgICAgaWYgKChtYXRjaCA9IHJlLnRleHQuZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlW3BhcnNlX3RyZWUubGVuZ3RoXSA9IG1hdGNoWzBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5tb2R1bG8uZXhlYyhfZm10KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJzZV90cmVlW3BhcnNlX3RyZWUubGVuZ3RoXSA9IFwiJVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgobWF0Y2ggPSByZS5wbGFjZWhvbGRlci5leGVjKF9mbXQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFsyXSkge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMVxuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRfbGlzdCA9IFtdLCByZXBsYWNlbWVudF9maWVsZCA9IG1hdGNoWzJdLCBmaWVsZF9tYXRjaCA9IFtdXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZmllbGRfbWF0Y2ggPSByZS5rZXkuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0W2ZpZWxkX2xpc3QubGVuZ3RoXSA9IGZpZWxkX21hdGNoWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlcGxhY2VtZW50X2ZpZWxkID0gcmVwbGFjZW1lbnRfZmllbGQuc3Vic3RyaW5nKGZpZWxkX21hdGNoWzBdLmxlbmd0aCkpICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmaWVsZF9tYXRjaCA9IHJlLmtleV9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkX2xpc3RbZmllbGRfbGlzdC5sZW5ndGhdID0gZmllbGRfbWF0Y2hbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKGZpZWxkX21hdGNoID0gcmUuaW5kZXhfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZF9saXN0W2ZpZWxkX2xpc3QubGVuZ3RoXSA9IGZpZWxkX21hdGNoWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcIltzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5XCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMl0gPSBmaWVsZF9saXN0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmdfbmFtZXMgfD0gMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXJnX25hbWVzID09PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIltzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWRcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyc2VfdHJlZVtwYXJzZV90cmVlLmxlbmd0aF0gPSBtYXRjaFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXJcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9mbXQgPSBfZm10LnN1YnN0cmluZyhtYXRjaFswXS5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlX3RyZWVcbiAgICB9XG5cbiAgICB2YXIgdnNwcmludGYgPSBmdW5jdGlvbihmbXQsIGFyZ3YsIF9hcmd2KSB7XG4gICAgICAgIF9hcmd2ID0gKGFyZ3YgfHwgW10pLnNsaWNlKDApXG4gICAgICAgIF9hcmd2LnNwbGljZSgwLCAwLCBmbXQpXG4gICAgICAgIHJldHVybiBzcHJpbnRmLmFwcGx5KG51bGwsIF9hcmd2KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGhlbHBlcnNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRfdHlwZSh2YXJpYWJsZSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhcmlhYmxlKS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cl9yZXBlYXQoaW5wdXQsIG11bHRpcGxpZXIpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5KG11bHRpcGxpZXIgKyAxKS5qb2luKGlucHV0KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGV4cG9ydCB0byBlaXRoZXIgYnJvd3NlciBvciBub2RlLmpzXG4gICAgICovXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGV4cG9ydHMuc3ByaW50ZiA9IHNwcmludGZcbiAgICAgICAgZXhwb3J0cy52c3ByaW50ZiA9IHZzcHJpbnRmXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB3aW5kb3cuc3ByaW50ZiA9IHNwcmludGZcbiAgICAgICAgd2luZG93LnZzcHJpbnRmID0gdnNwcmludGZcblxuICAgICAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzcHJpbnRmOiBzcHJpbnRmLFxuICAgICAgICAgICAgICAgICAgICB2c3ByaW50ZjogdnNwcmludGZcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxufSkodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiB3aW5kb3cpO1xuIiwiLyoqIGludGVybmFsXG4gKiBjbGFzcyBBY3Rpb25Db250YWluZXJcbiAqXG4gKiBBY3Rpb24gY29udGFpbmVyLiBQYXJlbnQgZm9yIFtbQXJndW1lbnRQYXJzZXJdXSBhbmQgW1tBcmd1bWVudEdyb3VwXV1cbiAqKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0ID0gcmVxdWlyZSgndXRpbCcpLmZvcm1hdDtcblxuLy8gQ29uc3RhbnRzXG52YXIgYyA9IHJlcXVpcmUoJy4vY29uc3QnKTtcblxudmFyICQkID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vL0FjdGlvbnNcbnZhciBBY3Rpb25IZWxwID0gcmVxdWlyZSgnLi9hY3Rpb24vaGVscCcpO1xudmFyIEFjdGlvbkFwcGVuZCA9IHJlcXVpcmUoJy4vYWN0aW9uL2FwcGVuZCcpO1xudmFyIEFjdGlvbkFwcGVuZENvbnN0YW50ID0gcmVxdWlyZSgnLi9hY3Rpb24vYXBwZW5kL2NvbnN0YW50Jyk7XG52YXIgQWN0aW9uQ291bnQgPSByZXF1aXJlKCcuL2FjdGlvbi9jb3VudCcpO1xudmFyIEFjdGlvblN0b3JlID0gcmVxdWlyZSgnLi9hY3Rpb24vc3RvcmUnKTtcbnZhciBBY3Rpb25TdG9yZUNvbnN0YW50ID0gcmVxdWlyZSgnLi9hY3Rpb24vc3RvcmUvY29uc3RhbnQnKTtcbnZhciBBY3Rpb25TdG9yZVRydWUgPSByZXF1aXJlKCcuL2FjdGlvbi9zdG9yZS90cnVlJyk7XG52YXIgQWN0aW9uU3RvcmVGYWxzZSA9IHJlcXVpcmUoJy4vYWN0aW9uL3N0b3JlL2ZhbHNlJyk7XG52YXIgQWN0aW9uVmVyc2lvbiA9IHJlcXVpcmUoJy4vYWN0aW9uL3ZlcnNpb24nKTtcbnZhciBBY3Rpb25TdWJwYXJzZXJzID0gcmVxdWlyZSgnLi9hY3Rpb24vc3VicGFyc2VycycpO1xuXG4vLyBFcnJvcnNcbnZhciBhcmd1bWVudEVycm9ySGVscGVyID0gcmVxdWlyZSgnLi9hcmd1bWVudC9lcnJvcicpO1xuXG4vKipcbiAqIG5ldyBBY3Rpb25Db250YWluZXIob3B0aW9ucylcbiAqXG4gKiBBY3Rpb24gY29udGFpbmVyLiBQYXJlbnQgZm9yIFtbQXJndW1lbnRQYXJzZXJdXSBhbmQgW1tBcmd1bWVudEdyb3VwXV1cbiAqXG4gKiAjIyMjIyBPcHRpb25zOlxuICpcbiAqIC0gYGRlc2NyaXB0aW9uYCAtLSBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhlIHByb2dyYW0gZG9lc1xuICogLSBgcHJlZml4Q2hhcnNgICAtLSBDaGFyYWN0ZXJzIHRoYXQgcHJlZml4IG9wdGlvbmFsIGFyZ3VtZW50c1xuICogLSBgYXJndW1lbnREZWZhdWx0YCAgLS0gVGhlIGRlZmF1bHQgdmFsdWUgZm9yIGFsbCBhcmd1bWVudHNcbiAqIC0gYGNvbmZsaWN0SGFuZGxlcmAgLS0gVGhlIGNvbmZsaWN0IGhhbmRsZXIgdG8gdXNlIGZvciBkdXBsaWNhdGUgYXJndW1lbnRzXG4gKiovXG52YXIgQWN0aW9uQ29udGFpbmVyID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25Db250YWluZXIob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICB0aGlzLmRlc2NyaXB0aW9uID0gb3B0aW9ucy5kZXNjcmlwdGlvbjtcbiAgdGhpcy5hcmd1bWVudERlZmF1bHQgPSBvcHRpb25zLmFyZ3VtZW50RGVmYXVsdDtcbiAgdGhpcy5wcmVmaXhDaGFycyA9IG9wdGlvbnMucHJlZml4Q2hhcnMgfHwgJyc7XG4gIHRoaXMuY29uZmxpY3RIYW5kbGVyID0gb3B0aW9ucy5jb25mbGljdEhhbmRsZXI7XG5cbiAgLy8gc2V0IHVwIHJlZ2lzdHJpZXNcbiAgdGhpcy5fcmVnaXN0cmllcyA9IHt9O1xuXG4gIC8vIHJlZ2lzdGVyIGFjdGlvbnNcbiAgdGhpcy5yZWdpc3RlcignYWN0aW9uJywgbnVsbCwgQWN0aW9uU3RvcmUpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnc3RvcmUnLCBBY3Rpb25TdG9yZSk7XG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsICdzdG9yZUNvbnN0JywgQWN0aW9uU3RvcmVDb25zdGFudCk7XG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsICdzdG9yZVRydWUnLCBBY3Rpb25TdG9yZVRydWUpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnc3RvcmVGYWxzZScsIEFjdGlvblN0b3JlRmFsc2UpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnYXBwZW5kJywgQWN0aW9uQXBwZW5kKTtcbiAgdGhpcy5yZWdpc3RlcignYWN0aW9uJywgJ2FwcGVuZENvbnN0JywgQWN0aW9uQXBwZW5kQ29uc3RhbnQpO1xuICB0aGlzLnJlZ2lzdGVyKCdhY3Rpb24nLCAnY291bnQnLCBBY3Rpb25Db3VudCk7XG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsICdoZWxwJywgQWN0aW9uSGVscCk7XG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsICd2ZXJzaW9uJywgQWN0aW9uVmVyc2lvbik7XG4gIHRoaXMucmVnaXN0ZXIoJ2FjdGlvbicsICdwYXJzZXJzJywgQWN0aW9uU3VicGFyc2Vycyk7XG5cbiAgLy8gcmFpc2UgYW4gZXhjZXB0aW9uIGlmIHRoZSBjb25mbGljdCBoYW5kbGVyIGlzIGludmFsaWRcbiAgdGhpcy5fZ2V0SGFuZGxlcigpO1xuXG4gIC8vIGFjdGlvbiBzdG9yYWdlXG4gIHRoaXMuX2FjdGlvbnMgPSBbXTtcbiAgdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9ucyA9IHt9O1xuXG4gIC8vIGdyb3Vwc1xuICB0aGlzLl9hY3Rpb25Hcm91cHMgPSBbXTtcbiAgdGhpcy5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMgPSBbXTtcblxuICAvLyBkZWZhdWx0cyBzdG9yYWdlXG4gIHRoaXMuX2RlZmF1bHRzID0ge307XG5cbiAgLy8gZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIFwib3B0aW9uXCIgbG9va3MgbGlrZSBhIG5lZ2F0aXZlIG51bWJlclxuICAvLyAtMSwgLTEuNSAtNWUrNFxuICB0aGlzLl9yZWdleHBOZWdhdGl2ZU51bWJlciA9IG5ldyBSZWdFeHAoJ15bLV0/WzAtOV0qXFxcXC4/WzAtOV0rKFtlRV1bLStdP1swLTldKyk/JCcpO1xuXG4gIC8vIHdoZXRoZXIgb3Igbm90IHRoZXJlIGFyZSBhbnkgb3B0aW9uYWxzIHRoYXQgbG9vayBsaWtlIG5lZ2F0aXZlXG4gIC8vIG51bWJlcnMgLS0gdXNlcyBhIGxpc3Qgc28gaXQgY2FuIGJlIHNoYXJlZCBhbmQgZWRpdGVkXG4gIHRoaXMuX2hhc05lZ2F0aXZlTnVtYmVyT3B0aW9uYWxzID0gW107XG59O1xuXG4vLyBHcm91cHMgbXVzdCBiZSByZXF1aXJlZCwgdGhlbiBBY3Rpb25Db250YWluZXIgYWxyZWFkeSBkZWZpbmVkXG52YXIgQXJndW1lbnRHcm91cCA9IHJlcXVpcmUoJy4vYXJndW1lbnQvZ3JvdXAnKTtcbnZhciBNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwID0gcmVxdWlyZSgnLi9hcmd1bWVudC9leGNsdXNpdmUnKTtcblxuLy9cbi8vIFJlZ2lzdHJhdGlvbiBtZXRob2RzXG4vL1xuXG4vKipcbiAqIEFjdGlvbkNvbnRhaW5lciNyZWdpc3RlcihyZWdpc3RyeU5hbWUsIHZhbHVlLCBvYmplY3QpIC0+IFZvaWRcbiAqIC0gcmVnaXN0cnlOYW1lIChTdHJpbmcpIDogb2JqZWN0IHR5cGUgYWN0aW9ufHR5cGVcbiAqIC0gdmFsdWUgKHN0cmluZykgOiBrZXl3b3JkXG4gKiAtIG9iamVjdCAoT2JqZWN0fEZ1bmN0aW9uKSA6IGhhbmRsZXJcbiAqXG4gKiAgUmVnaXN0ZXIgaGFuZGxlcnNcbiAqKi9cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAocmVnaXN0cnlOYW1lLCB2YWx1ZSwgb2JqZWN0KSB7XG4gIHRoaXMuX3JlZ2lzdHJpZXNbcmVnaXN0cnlOYW1lXSA9IHRoaXMuX3JlZ2lzdHJpZXNbcmVnaXN0cnlOYW1lXSB8fCB7fTtcbiAgdGhpcy5fcmVnaXN0cmllc1tyZWdpc3RyeU5hbWVdW3ZhbHVlXSA9IG9iamVjdDtcbn07XG5cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuX3JlZ2lzdHJ5R2V0ID0gZnVuY3Rpb24gKHJlZ2lzdHJ5TmFtZSwgdmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICBkZWZhdWx0VmFsdWUgPSBudWxsO1xuICB9XG4gIHJldHVybiB0aGlzLl9yZWdpc3RyaWVzW3JlZ2lzdHJ5TmFtZV1bdmFsdWVdIHx8IGRlZmF1bHRWYWx1ZTtcbn07XG5cbi8vXG4vLyBOYW1lc3BhY2UgZGVmYXVsdCBhY2Nlc3NvciBtZXRob2RzXG4vL1xuXG4vKipcbiAqIEFjdGlvbkNvbnRhaW5lciNzZXREZWZhdWx0cyhvcHRpb25zKSAtPiBWb2lkXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6aGFzaCBvZiBvcHRpb25zIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqIFNldCBkZWZhdWx0c1xuICoqL1xuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBvcHRpb25zKSB7XG4gICAgaWYgKCQkLmhhcyhvcHRpb25zLCBwcm9wZXJ0eSkpIHtcbiAgICAgIHRoaXMuX2RlZmF1bHRzW3Byb3BlcnR5XSA9IG9wdGlvbnNbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZXNlIGRlZmF1bHRzIG1hdGNoIGFueSBleGlzdGluZyBhcmd1bWVudHMsIHJlcGxhY2UgdGhlIHByZXZpb3VzXG4gIC8vIGRlZmF1bHQgb24gdGhlIG9iamVjdCB3aXRoIHRoZSBuZXcgb25lXG4gIHRoaXMuX2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgaWYgKCQkLmhhcyhvcHRpb25zLCBhY3Rpb24uZGVzdCkpIHtcbiAgICAgIGFjdGlvbi5kZWZhdWx0VmFsdWUgPSBvcHRpb25zW2FjdGlvbi5kZXN0XTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXG4gKiBBY3Rpb25Db250YWluZXIjZ2V0RGVmYXVsdChkZXN0KSAtPiBNaXhlZFxuICogLSBkZXN0IChzdHJpbmcpOiBhY3Rpb24gZGVzdGluYXRpb25cbiAqXG4gKiBSZXR1cm4gYWN0aW9uIGRlZmF1bHQgdmFsdWVcbiAqKi9cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuZ2V0RGVmYXVsdCA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gIHZhciByZXN1bHQgPSAkJC5oYXModGhpcy5fZGVmYXVsdHMsIGRlc3QpID8gdGhpcy5fZGVmYXVsdHNbZGVzdF0gOiBudWxsO1xuXG4gIHRoaXMuX2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbi5kZXN0ID09PSBkZXN0ICYmICQkLmhhcyhhY3Rpb24sICdkZWZhdWx0VmFsdWUnKSkge1xuICAgICAgcmVzdWx0ID0gYWN0aW9uLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLy9cbi8vIEFkZGluZyBhcmd1bWVudCBhY3Rpb25zXG4vL1xuXG4vKipcbiAqIEFjdGlvbkNvbnRhaW5lciNhZGRBcmd1bWVudChhcmdzLCBvcHRpb25zKSAtPiBPYmplY3RcbiAqIC0gYXJncyAoU3RyaW5nfEFycmF5KTogYXJndW1lbnQga2V5LCBvciBhcnJheSBvZiBhcmd1bWVudCBrZXlzXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IGFjdGlvbiBvYmplY3RzIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqICMjIyMgRXhhbXBsZXNcbiAqIC0gYWRkQXJndW1lbnQoWyAnLWYnLCAnLS1mb28nIF0sIHsgYWN0aW9uOiAnc3RvcmUnLCBkZWZhdWx0VmFsdWU6IDEsIC4uLiB9KVxuICogLSBhZGRBcmd1bWVudChbICdiYXInIF0sIHsgYWN0aW9uOiAnc3RvcmUnLCBuYXJnczogMSwgLi4uIH0pXG4gKiAtIGFkZEFyZ3VtZW50KCctLWJheicsIHsgYWN0aW9uOiAnc3RvcmUnLCBuYXJnczogMSwgLi4uIH0pXG4gKiovXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLmFkZEFyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZ3MsIG9wdGlvbnMpIHtcbiAgYXJncyA9IGFyZ3M7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXJncyA9PT0gJ3N0cmluZycpIHtcbiAgICBhcmdzID0gWyBhcmdzIF07XG4gIH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3MpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRkQXJndW1lbnQgZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGEgc3RyaW5nIG9yIGFuIGFycmF5Jyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRkQXJndW1lbnQgc2Vjb25kIGFyZ3VtZW50IHNob3VsZCBiZSBhIGhhc2gnKTtcbiAgfVxuXG4gIC8vIGlmIG5vIHBvc2l0aW9uYWwgYXJncyBhcmUgc3VwcGxpZWQgb3Igb25seSBvbmUgaXMgc3VwcGxpZWQgYW5kXG4gIC8vIGl0IGRvZXNuJ3QgbG9vayBsaWtlIGFuIG9wdGlvbiBzdHJpbmcsIHBhcnNlIGEgcG9zaXRpb25hbCBhcmd1bWVudFxuICBpZiAoIWFyZ3MgfHwgYXJncy5sZW5ndGggPT09IDEgJiYgdGhpcy5wcmVmaXhDaGFycy5pbmRleE9mKGFyZ3NbMF1bMF0pIDwgMCkge1xuICAgIGlmIChhcmdzICYmICEhb3B0aW9ucy5kZXN0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2Rlc3Qgc3VwcGxpZWQgdHdpY2UgZm9yIHBvc2l0aW9uYWwgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IHRoaXMuX2dldFBvc2l0aW9uYWwoYXJncywgb3B0aW9ucyk7XG5cbiAgICAvLyBvdGhlcndpc2UsIHdlJ3JlIGFkZGluZyBhbiBvcHRpb25hbCBhcmd1bWVudFxuICB9IGVsc2Uge1xuICAgIG9wdGlvbnMgPSB0aGlzLl9nZXRPcHRpb25hbChhcmdzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8vIGlmIG5vIGRlZmF1bHQgd2FzIHN1cHBsaWVkLCB1c2UgdGhlIHBhcnNlci1sZXZlbCBkZWZhdWx0XG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5kZWZhdWx0VmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGRlc3QgPSBvcHRpb25zLmRlc3Q7XG4gICAgaWYgKCQkLmhhcyh0aGlzLl9kZWZhdWx0cywgZGVzdCkpIHtcbiAgICAgIG9wdGlvbnMuZGVmYXVsdFZhbHVlID0gdGhpcy5fZGVmYXVsdHNbZGVzdF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5hcmd1bWVudERlZmF1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IHRoaXMuYXJndW1lbnREZWZhdWx0O1xuICAgIH1cbiAgfVxuXG4gIC8vIGNyZWF0ZSB0aGUgYWN0aW9uIG9iamVjdCwgYW5kIGFkZCBpdCB0byB0aGUgcGFyc2VyXG4gIHZhciBBY3Rpb25DbGFzcyA9IHRoaXMuX3BvcEFjdGlvbkNsYXNzKG9wdGlvbnMpO1xuICBpZiAodHlwZW9mIEFjdGlvbkNsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnVW5rbm93biBhY3Rpb24gXCIlc1wiLicsIEFjdGlvbkNsYXNzKSk7XG4gIH1cbiAgdmFyIGFjdGlvbiA9IG5ldyBBY3Rpb25DbGFzcyhvcHRpb25zKTtcblxuICAvLyB0aHJvdyBhbiBlcnJvciBpZiB0aGUgYWN0aW9uIHR5cGUgaXMgbm90IGNhbGxhYmxlXG4gIHZhciB0eXBlRnVuY3Rpb24gPSB0aGlzLl9yZWdpc3RyeUdldCgndHlwZScsIGFjdGlvbi50eXBlLCBhY3Rpb24udHlwZSk7XG4gIGlmICh0eXBlb2YgdHlwZUZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnXCIlc1wiIGlzIG5vdCBjYWxsYWJsZScsIHR5cGVGdW5jdGlvbikpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuX2FkZEFjdGlvbihhY3Rpb24pO1xufTtcblxuLyoqXG4gKiBBY3Rpb25Db250YWluZXIjYWRkQXJndW1lbnRHcm91cChvcHRpb25zKSAtPiBBcmd1bWVudEdyb3VwXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IGhhc2ggb2Ygb3B0aW9ucyBzZWUgW1tBcmd1bWVudEdyb3VwLm5ld11dXG4gKlxuICogQ3JlYXRlIG5ldyBhcmd1bWVudHMgZ3JvdXBzXG4gKiovXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLmFkZEFyZ3VtZW50R3JvdXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgZ3JvdXAgPSBuZXcgQXJndW1lbnRHcm91cCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5fYWN0aW9uR3JvdXBzLnB1c2goZ3JvdXApO1xuICByZXR1cm4gZ3JvdXA7XG59O1xuXG4vKipcbiAqIEFjdGlvbkNvbnRhaW5lciNhZGRNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwKG9wdGlvbnMpIC0+IEFyZ3VtZW50R3JvdXBcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KToge3JlcXVpcmVkOiBmYWxzZX1cbiAqXG4gKiBDcmVhdGUgbmV3IG11dHVhbCBleGNsdXNpdmUgZ3JvdXBzXG4gKiovXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLmFkZE11dHVhbGx5RXhjbHVzaXZlR3JvdXAgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICB2YXIgZ3JvdXAgPSBuZXcgTXV0dWFsbHlFeGNsdXNpdmVHcm91cCh0aGlzLCBvcHRpb25zKTtcbiAgdGhpcy5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMucHVzaChncm91cCk7XG4gIHJldHVybiBncm91cDtcbn07XG5cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuX2FkZEFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIC8vIHJlc29sdmUgYW55IGNvbmZsaWN0c1xuICB0aGlzLl9jaGVja0NvbmZsaWN0KGFjdGlvbik7XG5cbiAgLy8gYWRkIHRvIGFjdGlvbnMgbGlzdFxuICB0aGlzLl9hY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgYWN0aW9uLmNvbnRhaW5lciA9IHRoaXM7XG5cbiAgLy8gaW5kZXggdGhlIGFjdGlvbiBieSBhbnkgb3B0aW9uIHN0cmluZ3MgaXQgaGFzXG4gIGFjdGlvbi5vcHRpb25TdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvblN0cmluZykge1xuICAgIHNlbGYuX29wdGlvblN0cmluZ0FjdGlvbnNbb3B0aW9uU3RyaW5nXSA9IGFjdGlvbjtcbiAgfSk7XG5cbiAgLy8gc2V0IHRoZSBmbGFnIGlmIGFueSBvcHRpb24gc3RyaW5ncyBsb29rIGxpa2UgbmVnYXRpdmUgbnVtYmVyc1xuICBhY3Rpb24ub3B0aW9uU3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChvcHRpb25TdHJpbmcpIHtcbiAgICBpZiAob3B0aW9uU3RyaW5nLm1hdGNoKHNlbGYuX3JlZ2V4cE5lZ2F0aXZlTnVtYmVyKSkge1xuICAgICAgaWYgKCFzZWxmLl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscy5zb21lKEJvb2xlYW4pKSB7XG4gICAgICAgIHNlbGYuX2hhc05lZ2F0aXZlTnVtYmVyT3B0aW9uYWxzLnB1c2godHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyByZXR1cm4gdGhlIGNyZWF0ZWQgYWN0aW9uXG4gIHJldHVybiBhY3Rpb247XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9yZW1vdmVBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHZhciBhY3Rpb25JbmRleCA9IHRoaXMuX2FjdGlvbnMuaW5kZXhPZihhY3Rpb24pO1xuICBpZiAoYWN0aW9uSW5kZXggPj0gMCkge1xuICAgIHRoaXMuX2FjdGlvbnMuc3BsaWNlKGFjdGlvbkluZGV4LCAxKTtcbiAgfVxufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fYWRkQ29udGFpbmVyQWN0aW9ucyA9IGZ1bmN0aW9uIChjb250YWluZXIpIHtcbiAgLy8gY29sbGVjdCBncm91cHMgYnkgdGl0bGVzXG4gIHZhciB0aXRsZUdyb3VwTWFwID0ge307XG4gIHRoaXMuX2FjdGlvbkdyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChncm91cCkge1xuICAgIGlmICh0aXRsZUdyb3VwTWFwW2dyb3VwLnRpdGxlXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdCgnQ2Fubm90IG1lcmdlIGFjdGlvbnMgLSB0d28gZ3JvdXBzIGFyZSBuYW1lZCBcIiVzXCIuJywgZ3JvdXAudGl0bGUpKTtcbiAgICB9XG4gICAgdGl0bGVHcm91cE1hcFtncm91cC50aXRsZV0gPSBncm91cDtcbiAgfSk7XG5cbiAgLy8gbWFwIGVhY2ggYWN0aW9uIHRvIGl0cyBncm91cFxuICB2YXIgZ3JvdXBNYXAgPSB7fTtcbiAgZnVuY3Rpb24gYWN0aW9uSGFzaChhY3Rpb24pIHtcbiAgICAvLyB1bmlxdWUgKGhvcGVmdWxseT8pIHN0cmluZyBzdWl0YWJsZSBhcyBkaWN0aW9uYXJ5IGtleVxuICAgIHJldHVybiBhY3Rpb24uZ2V0TmFtZSgpO1xuICB9XG4gIGNvbnRhaW5lci5fYWN0aW9uR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgLy8gaWYgYSBncm91cCB3aXRoIHRoZSB0aXRsZSBleGlzdHMsIHVzZSB0aGF0LCBvdGhlcndpc2VcbiAgICAvLyBjcmVhdGUgYSBuZXcgZ3JvdXAgbWF0Y2hpbmcgdGhlIGNvbnRhaW5lcidzIGdyb3VwXG4gICAgaWYgKCF0aXRsZUdyb3VwTWFwW2dyb3VwLnRpdGxlXSkge1xuICAgICAgdGl0bGVHcm91cE1hcFtncm91cC50aXRsZV0gPSB0aGlzLmFkZEFyZ3VtZW50R3JvdXAoe1xuICAgICAgICB0aXRsZTogZ3JvdXAudGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBncm91cC5kZXNjcmlwdGlvblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gbWFwIHRoZSBhY3Rpb25zIHRvIHRoZWlyIG5ldyBncm91cFxuICAgIGdyb3VwLl9ncm91cEFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICBncm91cE1hcFthY3Rpb25IYXNoKGFjdGlvbildID0gdGl0bGVHcm91cE1hcFtncm91cC50aXRsZV07XG4gICAgfSk7XG4gIH0sIHRoaXMpO1xuXG4gIC8vIGFkZCBjb250YWluZXIncyBtdXR1YWxseSBleGNsdXNpdmUgZ3JvdXBzXG4gIC8vIE5PVEU6IGlmIGFkZF9tdXR1YWxseV9leGNsdXNpdmVfZ3JvdXAgZXZlciBnYWlucyB0aXRsZT0gYW5kXG4gIC8vIGRlc2NyaXB0aW9uPSB0aGVuIHRoaXMgY29kZSB3aWxsIG5lZWQgdG8gYmUgZXhwYW5kZWQgYXMgYWJvdmVcbiAgdmFyIG11dGV4R3JvdXA7XG4gIGNvbnRhaW5lci5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXApIHtcbiAgICBtdXRleEdyb3VwID0gdGhpcy5hZGRNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwKHtcbiAgICAgIHJlcXVpcmVkOiBncm91cC5yZXF1aXJlZFxuICAgIH0pO1xuICAgIC8vIG1hcCB0aGUgYWN0aW9ucyB0byB0aGVpciBuZXcgbXV0ZXggZ3JvdXBcbiAgICBncm91cC5fZ3JvdXBBY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgZ3JvdXBNYXBbYWN0aW9uSGFzaChhY3Rpb24pXSA9IG11dGV4R3JvdXA7XG4gICAgfSk7XG4gIH0sIHRoaXMpOyAgLy8gZm9yRWFjaCB0YWtlcyBhICd0aGlzJyBhcmd1bWVudFxuXG4gIC8vIGFkZCBhbGwgYWN0aW9ucyB0byB0aGlzIGNvbnRhaW5lciBvciB0aGVpciBncm91cFxuICBjb250YWluZXIuX2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgdmFyIGtleSA9IGFjdGlvbkhhc2goYWN0aW9uKTtcbiAgICBpZiAoZ3JvdXBNYXBba2V5XSkge1xuICAgICAgZ3JvdXBNYXBba2V5XS5fYWRkQWN0aW9uKGFjdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2FkZEFjdGlvbihhY3Rpb24pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9nZXRQb3NpdGlvbmFsID0gZnVuY3Rpb24gKGRlc3QsIG9wdGlvbnMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGVzdCkpIHtcbiAgICBkZXN0ID0gZGVzdFswXTtcbiAgfVxuICAvLyBtYWtlIHN1cmUgcmVxdWlyZWQgaXMgbm90IHNwZWNpZmllZFxuICBpZiAob3B0aW9ucy5yZXF1aXJlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignXCJyZXF1aXJlZFwiIGlzIGFuIGludmFsaWQgYXJndW1lbnQgZm9yIHBvc2l0aW9uYWxzLicpO1xuICB9XG5cbiAgLy8gbWFyayBwb3NpdGlvbmFsIGFyZ3VtZW50cyBhcyByZXF1aXJlZCBpZiBhdCBsZWFzdCBvbmUgaXNcbiAgLy8gYWx3YXlzIHJlcXVpcmVkXG4gIGlmIChvcHRpb25zLm5hcmdzICE9PSBjLk9QVElPTkFMICYmIG9wdGlvbnMubmFyZ3MgIT09IGMuWkVST19PUl9NT1JFKSB7XG4gICAgb3B0aW9ucy5yZXF1aXJlZCA9IHRydWU7XG4gIH1cbiAgaWYgKG9wdGlvbnMubmFyZ3MgPT09IGMuWkVST19PUl9NT1JFICYmIHR5cGVvZiBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvcHRpb25zLnJlcXVpcmVkID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIHJldHVybiB0aGUga2V5d29yZCBhcmd1bWVudHMgd2l0aCBubyBvcHRpb24gc3RyaW5nc1xuICBvcHRpb25zLmRlc3QgPSBkZXN0O1xuICBvcHRpb25zLm9wdGlvblN0cmluZ3MgPSBbXTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9nZXRPcHRpb25hbCA9IGZ1bmN0aW9uIChhcmdzLCBvcHRpb25zKSB7XG4gIHZhciBwcmVmaXhDaGFycyA9IHRoaXMucHJlZml4Q2hhcnM7XG4gIHZhciBvcHRpb25TdHJpbmdzID0gW107XG4gIHZhciBvcHRpb25TdHJpbmdzTG9uZyA9IFtdO1xuXG4gIC8vIGRldGVybWluZSBzaG9ydCBhbmQgbG9uZyBvcHRpb24gc3RyaW5nc1xuICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvblN0cmluZykge1xuICAgIC8vIGVycm9yIG9uIHN0cmluZ3MgdGhhdCBkb24ndCBzdGFydCB3aXRoIGFuIGFwcHJvcHJpYXRlIHByZWZpeFxuICAgIGlmIChwcmVmaXhDaGFycy5pbmRleE9mKG9wdGlvblN0cmluZ1swXSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZm9ybWF0KCdJbnZhbGlkIG9wdGlvbiBzdHJpbmcgXCIlc1wiOiBtdXN0IHN0YXJ0IHdpdGggYSBcIiVzXCIuJyxcbiAgICAgICAgb3B0aW9uU3RyaW5nLFxuICAgICAgICBwcmVmaXhDaGFyc1xuICAgICAgKSk7XG4gICAgfVxuXG4gICAgLy8gc3RyaW5ncyBzdGFydGluZyB3aXRoIHR3byBwcmVmaXggY2hhcmFjdGVycyBhcmUgbG9uZyBvcHRpb25zXG4gICAgb3B0aW9uU3RyaW5ncy5wdXNoKG9wdGlvblN0cmluZyk7XG4gICAgaWYgKG9wdGlvblN0cmluZy5sZW5ndGggPiAxICYmIHByZWZpeENoYXJzLmluZGV4T2Yob3B0aW9uU3RyaW5nWzFdKSA+PSAwKSB7XG4gICAgICBvcHRpb25TdHJpbmdzTG9uZy5wdXNoKG9wdGlvblN0cmluZyk7XG4gICAgfVxuICB9KTtcblxuICAvLyBpbmZlciBkZXN0LCAnLS1mb28tYmFyJyAtPiAnZm9vX2JhcicgYW5kICcteCcgLT4gJ3gnXG4gIHZhciBkZXN0ID0gb3B0aW9ucy5kZXN0IHx8IG51bGw7XG4gIGRlbGV0ZSBvcHRpb25zLmRlc3Q7XG5cbiAgaWYgKCFkZXN0KSB7XG4gICAgdmFyIG9wdGlvblN0cmluZ0Rlc3QgPSBvcHRpb25TdHJpbmdzTG9uZy5sZW5ndGggPyBvcHRpb25TdHJpbmdzTG9uZ1swXSA6IG9wdGlvblN0cmluZ3NbMF07XG4gICAgZGVzdCA9ICQkLnRyaW1DaGFycyhvcHRpb25TdHJpbmdEZXN0LCB0aGlzLnByZWZpeENoYXJzKTtcblxuICAgIGlmIChkZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQoJ2Rlc3Q9IGlzIHJlcXVpcmVkIGZvciBvcHRpb25zIGxpa2UgXCIlc1wiJywgb3B0aW9uU3RyaW5ncy5qb2luKCcsICcpKVxuICAgICAgKTtcbiAgICB9XG4gICAgZGVzdCA9IGRlc3QucmVwbGFjZSgvLS9nLCAnXycpO1xuICB9XG5cbiAgLy8gcmV0dXJuIHRoZSB1cGRhdGVkIGtleXdvcmQgYXJndW1lbnRzXG4gIG9wdGlvbnMuZGVzdCA9IGRlc3Q7XG4gIG9wdGlvbnMub3B0aW9uU3RyaW5ncyA9IG9wdGlvblN0cmluZ3M7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9wb3BBY3Rpb25DbGFzcyA9IGZ1bmN0aW9uIChvcHRpb25zLCBkZWZhdWx0VmFsdWUpIHtcbiAgZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlIHx8IG51bGw7XG5cbiAgdmFyIGFjdGlvbiA9IChvcHRpb25zLmFjdGlvbiB8fCBkZWZhdWx0VmFsdWUpO1xuICBkZWxldGUgb3B0aW9ucy5hY3Rpb247XG5cbiAgdmFyIGFjdGlvbkNsYXNzID0gdGhpcy5fcmVnaXN0cnlHZXQoJ2FjdGlvbicsIGFjdGlvbiwgYWN0aW9uKTtcbiAgcmV0dXJuIGFjdGlvbkNsYXNzO1xufTtcblxuQWN0aW9uQ29udGFpbmVyLnByb3RvdHlwZS5fZ2V0SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhhbmRsZXJTdHJpbmcgPSB0aGlzLmNvbmZsaWN0SGFuZGxlcjtcbiAgdmFyIGhhbmRsZXJGdW5jTmFtZSA9ICdfaGFuZGxlQ29uZmxpY3QnICsgJCQuY2FwaXRhbGl6ZShoYW5kbGVyU3RyaW5nKTtcbiAgdmFyIGZ1bmMgPSB0aGlzW2hhbmRsZXJGdW5jTmFtZV07XG4gIGlmICh0eXBlb2YgZnVuYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbXNnID0gJ2ludmFsaWQgY29uZmxpY3QgcmVzb2x1dGlvbiB2YWx1ZTogJyArIGhhbmRsZXJTdHJpbmc7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuX2NoZWNrQ29uZmxpY3QgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHZhciBvcHRpb25TdHJpbmdBY3Rpb25zID0gdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9ucztcbiAgdmFyIGNvbmZsaWN0T3B0aW9uYWxzID0gW107XG5cbiAgLy8gZmluZCBhbGwgb3B0aW9ucyB0aGF0IGNvbmZsaWN0IHdpdGggdGhpcyBvcHRpb25cbiAgLy8gY29sbGVjdCBwYWlycywgdGhlIHN0cmluZywgYW5kIGFuIGV4aXN0aW5nIGFjdGlvbiB0aGF0IGl0IGNvbmZsaWN0cyB3aXRoXG4gIGFjdGlvbi5vcHRpb25TdHJpbmdzLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvblN0cmluZykge1xuICAgIHZhciBjb25mbE9wdGlvbmFsID0gb3B0aW9uU3RyaW5nQWN0aW9uc1tvcHRpb25TdHJpbmddO1xuICAgIGlmICh0eXBlb2YgY29uZmxPcHRpb25hbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZsaWN0T3B0aW9uYWxzLnB1c2goWyBvcHRpb25TdHJpbmcsIGNvbmZsT3B0aW9uYWwgXSk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoY29uZmxpY3RPcHRpb25hbHMubGVuZ3RoID4gMCkge1xuICAgIHZhciBjb25mbGljdEhhbmRsZXIgPSB0aGlzLl9nZXRIYW5kbGVyKCk7XG4gICAgY29uZmxpY3RIYW5kbGVyLmNhbGwodGhpcywgYWN0aW9uLCBjb25mbGljdE9wdGlvbmFscyk7XG4gIH1cbn07XG5cbkFjdGlvbkNvbnRhaW5lci5wcm90b3R5cGUuX2hhbmRsZUNvbmZsaWN0RXJyb3IgPSBmdW5jdGlvbiAoYWN0aW9uLCBjb25mbE9wdGlvbmFscykge1xuICB2YXIgY29uZmxpY3RzID0gY29uZmxPcHRpb25hbHMubWFwKGZ1bmN0aW9uIChwYWlyKSB7IHJldHVybiBwYWlyWzBdOyB9KTtcbiAgY29uZmxpY3RzID0gY29uZmxpY3RzLmpvaW4oJywgJyk7XG4gIHRocm93IGFyZ3VtZW50RXJyb3JIZWxwZXIoXG4gICAgYWN0aW9uLFxuICAgIGZvcm1hdCgnQ29uZmxpY3Rpbmcgb3B0aW9uIHN0cmluZyhzKTogJXMnLCBjb25mbGljdHMpXG4gICk7XG59O1xuXG5BY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9oYW5kbGVDb25mbGljdFJlc29sdmUgPSBmdW5jdGlvbiAoYWN0aW9uLCBjb25mbE9wdGlvbmFscykge1xuICAvLyByZW1vdmUgYWxsIGNvbmZsaWN0aW5nIG9wdGlvbnNcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBjb25mbE9wdGlvbmFscy5mb3JFYWNoKGZ1bmN0aW9uIChwYWlyKSB7XG4gICAgdmFyIG9wdGlvblN0cmluZyA9IHBhaXJbMF07XG4gICAgdmFyIGNvbmZsaWN0aW5nQWN0aW9uID0gcGFpclsxXTtcbiAgICAvLyByZW1vdmUgdGhlIGNvbmZsaWN0aW5nIG9wdGlvbiBzdHJpbmdcbiAgICB2YXIgaSA9IGNvbmZsaWN0aW5nQWN0aW9uLm9wdGlvblN0cmluZ3MuaW5kZXhPZihvcHRpb25TdHJpbmcpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIGNvbmZsaWN0aW5nQWN0aW9uLm9wdGlvblN0cmluZ3Muc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgICBkZWxldGUgc2VsZi5fb3B0aW9uU3RyaW5nQWN0aW9uc1tvcHRpb25TdHJpbmddO1xuICAgIC8vIGlmIHRoZSBvcHRpb24gbm93IGhhcyBubyBvcHRpb24gc3RyaW5nLCByZW1vdmUgaXQgZnJvbSB0aGVcbiAgICAvLyBjb250YWluZXIgaG9sZGluZyBpdFxuICAgIGlmIChjb25mbGljdGluZ0FjdGlvbi5vcHRpb25TdHJpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uZmxpY3RpbmdBY3Rpb24uY29udGFpbmVyLl9yZW1vdmVBY3Rpb24oY29uZmxpY3RpbmdBY3Rpb24pO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiLyoqIGludGVybmFsXG4gKiBjbGFzcyBBcmd1bWVudEdyb3VwXG4gKlxuICogR3JvdXAgYXJndW1lbnRzLlxuICogQnkgZGVmYXVsdCwgQXJndW1lbnRQYXJzZXIgZ3JvdXBzIGNvbW1hbmQtbGluZSBhcmd1bWVudHNcbiAqIGludG8g4oCccG9zaXRpb25hbCBhcmd1bWVudHPigJ0gYW5kIOKAnG9wdGlvbmFsIGFyZ3VtZW50c+KAnVxuICogd2hlbiBkaXNwbGF5aW5nIGhlbHAgbWVzc2FnZXMuIFdoZW4gdGhlcmUgaXMgYSBiZXR0ZXJcbiAqIGNvbmNlcHR1YWwgZ3JvdXBpbmcgb2YgYXJndW1lbnRzIHRoYW4gdGhpcyBkZWZhdWx0IG9uZSxcbiAqIGFwcHJvcHJpYXRlIGdyb3VwcyBjYW4gYmUgY3JlYXRlZCB1c2luZyB0aGUgYWRkQXJndW1lbnRHcm91cCgpIG1ldGhvZFxuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBcmd1bWVudENvbnRhaW5lcl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uQ29udGFpbmVyID0gcmVxdWlyZSgnLi4vYWN0aW9uX2NvbnRhaW5lcicpO1xuXG5cbi8qKlxuICogbmV3IEFyZ3VtZW50R3JvdXAoY29udGFpbmVyLCBvcHRpb25zKVxuICogLSBjb250YWluZXIgKG9iamVjdCk6IG1haW4gY29udGFpbmVyXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IGhhc2ggb2YgZ3JvdXAgb3B0aW9uc1xuICpcbiAqICMjIyMgb3B0aW9uc1xuICogLSAqKnByZWZpeENoYXJzKiogIGdyb3VwIG5hbWUgcHJlZml4XG4gKiAtICoqYXJndW1lbnREZWZhdWx0KiogIGRlZmF1bHQgYXJndW1lbnQgdmFsdWVcbiAqIC0gKip0aXRsZSoqICBncm91cCB0aXRsZVxuICogLSAqKmRlc2NyaXB0aW9uKiogZ3JvdXAgZGVzY3JpcHRpb25cbiAqXG4gKiovXG52YXIgQXJndW1lbnRHcm91cCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXJndW1lbnRHcm91cChjb250YWluZXIsIG9wdGlvbnMpIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBhZGQgYW55IG1pc3Npbmcga2V5d29yZCBhcmd1bWVudHMgYnkgY2hlY2tpbmcgdGhlIGNvbnRhaW5lclxuICBvcHRpb25zLmNvbmZsaWN0SGFuZGxlciA9IChvcHRpb25zLmNvbmZsaWN0SGFuZGxlciB8fCBjb250YWluZXIuY29uZmxpY3RIYW5kbGVyKTtcbiAgb3B0aW9ucy5wcmVmaXhDaGFycyA9IChvcHRpb25zLnByZWZpeENoYXJzIHx8IGNvbnRhaW5lci5wcmVmaXhDaGFycyk7XG4gIG9wdGlvbnMuYXJndW1lbnREZWZhdWx0ID0gKG9wdGlvbnMuYXJndW1lbnREZWZhdWx0IHx8IGNvbnRhaW5lci5hcmd1bWVudERlZmF1bHQpO1xuXG4gIEFjdGlvbkNvbnRhaW5lci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIC8vIGdyb3VwIGF0dHJpYnV0ZXNcbiAgdGhpcy50aXRsZSA9IG9wdGlvbnMudGl0bGU7XG4gIHRoaXMuX2dyb3VwQWN0aW9ucyA9IFtdO1xuXG4gIC8vIHNoYXJlIG1vc3QgYXR0cmlidXRlcyB3aXRoIHRoZSBjb250YWluZXJcbiAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyO1xuICB0aGlzLl9yZWdpc3RyaWVzID0gY29udGFpbmVyLl9yZWdpc3RyaWVzO1xuICB0aGlzLl9hY3Rpb25zID0gY29udGFpbmVyLl9hY3Rpb25zO1xuICB0aGlzLl9vcHRpb25TdHJpbmdBY3Rpb25zID0gY29udGFpbmVyLl9vcHRpb25TdHJpbmdBY3Rpb25zO1xuICB0aGlzLl9kZWZhdWx0cyA9IGNvbnRhaW5lci5fZGVmYXVsdHM7XG4gIHRoaXMuX2hhc05lZ2F0aXZlTnVtYmVyT3B0aW9uYWxzID0gY29udGFpbmVyLl9oYXNOZWdhdGl2ZU51bWJlck9wdGlvbmFscztcbiAgdGhpcy5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMgPSBjb250YWluZXIuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzO1xufTtcbnV0aWwuaW5oZXJpdHMoQXJndW1lbnRHcm91cCwgQWN0aW9uQ29udGFpbmVyKTtcblxuXG5Bcmd1bWVudEdyb3VwLnByb3RvdHlwZS5fYWRkQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAvLyBQYXJlbnQgYWRkIGFjdGlvblxuICBhY3Rpb24gPSBBY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9hZGRBY3Rpb24uY2FsbCh0aGlzLCBhY3Rpb24pO1xuICB0aGlzLl9ncm91cEFjdGlvbnMucHVzaChhY3Rpb24pO1xuICByZXR1cm4gYWN0aW9uO1xufTtcblxuXG5Bcmd1bWVudEdyb3VwLnByb3RvdHlwZS5fcmVtb3ZlQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAvLyBQYXJlbnQgcmVtb3ZlIGFjdGlvblxuICBBY3Rpb25Db250YWluZXIucHJvdG90eXBlLl9yZW1vdmVBY3Rpb24uY2FsbCh0aGlzLCBhY3Rpb24pO1xuICB2YXIgYWN0aW9uSW5kZXggPSB0aGlzLl9ncm91cEFjdGlvbnMuaW5kZXhPZihhY3Rpb24pO1xuICBpZiAoYWN0aW9uSW5kZXggPj0gMCkge1xuICAgIHRoaXMuX2dyb3VwQWN0aW9ucy5zcGxpY2UoYWN0aW9uSW5kZXgsIDEpO1xuICB9XG59O1xuXG4iLCIvKipcbiAqIGNsYXNzIE5hbWVzcGFjZVxuICpcbiAqIFNpbXBsZSBvYmplY3QgZm9yIHN0b3JpbmcgYXR0cmlidXRlcy4gSW1wbGVtZW50cyBlcXVhbGl0eSBieSBhdHRyaWJ1dGUgbmFtZXNcbiAqIGFuZCB2YWx1ZXMsIGFuZCBwcm92aWRlcyBhIHNpbXBsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjdGhlLW5hbWVzcGFjZS1vYmplY3RcbiAqKi9cbid1c2Ugc3RyaWN0JztcblxudmFyICQkID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKipcbiAqIG5ldyBOYW1lc3BhY2Uob3B0aW9ucylcbiAqIC0gb3B0aW9ucyhvYmplY3QpOiBwcmVkZWZpbmVkIHByb3BlcnRpcyBmb3IgcmVzdWx0IG9iamVjdFxuICpcbiAqKi9cbnZhciBOYW1lc3BhY2UgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIE5hbWVzcGFjZShvcHRpb25zKSB7XG4gICQkLmV4dGVuZCh0aGlzLCBvcHRpb25zKTtcbn07XG5cbi8qKlxuICogTmFtZXNwYWNlI2lzc2V0KGtleSkgLT4gQm9vbGVhblxuICogLSBrZXkgKHN0cmluZ3xudW1iZXIpOiBwcm9wZXJ0eSBuYW1lXG4gKlxuICogVGVsbHMgd2hlbmV2ZXIgYG5hbWVzcGFjZWAgY29udGFpbnMgZ2l2ZW4gYGtleWAgb3Igbm90LlxuICoqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS5pc3NldCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICQkLmhhcyh0aGlzLCBrZXkpO1xufTtcblxuLyoqXG4gKiBOYW1lc3BhY2Ujc2V0KGtleSwgdmFsdWUpIC0+IHNlbGZcbiAqIC1rZXkgKHN0cmluZ3xudW1iZXJ8b2JqZWN0KTogcHJvcGVyeSBuYW1lXG4gKiAtdmFsdWUgKG1peGVkKTogbmV3IHByb3BlcnR5IHZhbHVlXG4gKlxuICogU2V0IHRoZSBwcm9wZXJ0eSBuYW1lZCBrZXkgd2l0aCB2YWx1ZS5cbiAqIElmIGtleSBvYmplY3QgdGhlbiBzZXQgYWxsIGtleSBwcm9wZXJ0aWVzIHRvIG5hbWVzcGFjZSBvYmplY3RcbiAqKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiAoa2V5KSA9PT0gJ29iamVjdCcpIHtcbiAgICAkJC5leHRlbmQodGhpcywga2V5KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogTmFtZXNwYWNlI2dldChrZXksIGRlZmF1bHRWYWx1ZSkgLT4gbWl4ZWRcbiAqIC0ga2V5IChzdHJpbmd8bnVtYmVyKTogcHJvcGVydHkgbmFtZVxuICogLSBkZWZhdWx0VmFsdWUgKG1peGVkKTogZGVmYXVsdCB2YWx1ZVxuICpcbiAqIFJldHVybiB0aGUgcHJvcGVydHkga2V5IG9yIGRlZmF1bFZhbHVlIGlmIG5vdCBzZXRcbiAqKi9cbk5hbWVzcGFjZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSwgZGVmYXVsdFZhbHVlKSB7XG4gIHJldHVybiAhdGhpc1trZXldID8gZGVmYXVsdFZhbHVlIDogdGhpc1trZXldO1xufTtcblxuLyoqXG4gKiBOYW1lc3BhY2UjdW5zZXQoa2V5LCBkZWZhdWx0VmFsdWUpIC0+IG1peGVkXG4gKiAtIGtleSAoc3RyaW5nfG51bWJlcik6IHByb3BlcnR5IG5hbWVcbiAqIC0gZGVmYXVsdFZhbHVlIChtaXhlZCk6IGRlZmF1bHQgdmFsdWVcbiAqXG4gKiBSZXR1cm4gZGF0YVtrZXldKGFuZCBkZWxldGUgaXQpIG9yIGRlZmF1bHRWYWx1ZVxuICoqL1xuTmFtZXNwYWNlLnByb3RvdHlwZS51bnNldCA9IGZ1bmN0aW9uIChrZXksIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgdmFsdWUgPSB0aGlzW2tleV07XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hXG5cbnZhciBwcm90byA9IFNjaGVtYS5wcm90b3R5cGVcblxucHJvdG8uc3BhY2UgPSBudWxsXG5wcm90by5ub3JtYWwgPSB7fVxucHJvdG8ucHJvcGVydHkgPSB7fVxuXG5mdW5jdGlvbiBTY2hlbWEocHJvcGVydHksIG5vcm1hbCwgc3BhY2UpIHtcbiAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5XG4gIHRoaXMubm9ybWFsID0gbm9ybWFsXG5cbiAgaWYgKHNwYWNlKSB7XG4gICAgdGhpcy5zcGFjZSA9IHNwYWNlXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgSW5mbyA9IHJlcXVpcmUoJy4vaW5mbycpXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJylcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZpbmVkSW5mb1xuXG5EZWZpbmVkSW5mby5wcm90b3R5cGUgPSBuZXcgSW5mbygpXG5EZWZpbmVkSW5mby5wcm90b3R5cGUuZGVmaW5lZCA9IHRydWVcblxudmFyIGNoZWNrcyA9IFtcbiAgJ2Jvb2xlYW4nLFxuICAnYm9vbGVhbmlzaCcsXG4gICdvdmVybG9hZGVkQm9vbGVhbicsXG4gICdudW1iZXInLFxuICAnY29tbWFTZXBhcmF0ZWQnLFxuICAnc3BhY2VTZXBhcmF0ZWQnLFxuICAnY29tbWFPclNwYWNlU2VwYXJhdGVkJ1xuXVxudmFyIGNoZWNrc0xlbmd0aCA9IGNoZWNrcy5sZW5ndGhcblxuZnVuY3Rpb24gRGVmaW5lZEluZm8ocHJvcGVydHksIGF0dHJpYnV0ZSwgbWFzaywgc3BhY2UpIHtcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGNoZWNrXG5cbiAgbWFyayh0aGlzLCAnc3BhY2UnLCBzcGFjZSlcblxuICBJbmZvLmNhbGwodGhpcywgcHJvcGVydHksIGF0dHJpYnV0ZSlcblxuICB3aGlsZSAoKytpbmRleCA8IGNoZWNrc0xlbmd0aCkge1xuICAgIGNoZWNrID0gY2hlY2tzW2luZGV4XVxuICAgIG1hcmsodGhpcywgY2hlY2ssIChtYXNrICYgdHlwZXNbY2hlY2tdKSA9PT0gdHlwZXNbY2hlY2tdKVxuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmsodmFsdWVzLCBrZXksIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIHZhbHVlc1trZXldID0gdmFsdWVcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb1xuXG52YXIgcHJvdG8gPSBJbmZvLnByb3RvdHlwZVxuXG5wcm90by5zcGFjZSA9IG51bGxcbnByb3RvLmF0dHJpYnV0ZSA9IG51bGxcbnByb3RvLnByb3BlcnR5ID0gbnVsbFxucHJvdG8uYm9vbGVhbiA9IGZhbHNlXG5wcm90by5ib29sZWFuaXNoID0gZmFsc2VcbnByb3RvLm92ZXJsb2FkZWRCb29sZWFuID0gZmFsc2VcbnByb3RvLm51bWJlciA9IGZhbHNlXG5wcm90by5jb21tYVNlcGFyYXRlZCA9IGZhbHNlXG5wcm90by5zcGFjZVNlcGFyYXRlZCA9IGZhbHNlXG5wcm90by5jb21tYU9yU3BhY2VTZXBhcmF0ZWQgPSBmYWxzZVxucHJvdG8ubXVzdFVzZVByb3BlcnR5ID0gZmFsc2VcbnByb3RvLmRlZmluZWQgPSBmYWxzZVxuXG5mdW5jdGlvbiBJbmZvKHByb3BlcnR5LCBhdHRyaWJ1dGUpIHtcbiAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5XG4gIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGNhc2VTZW5zaXRpdmVUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL2Nhc2Utc2Vuc2l0aXZlLXRyYW5zZm9ybScpXG5cbm1vZHVsZS5leHBvcnRzID0gY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtXG5cbmZ1bmN0aW9uIGNhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybShhdHRyaWJ1dGVzLCBwcm9wZXJ0eSkge1xuICByZXR1cm4gY2FzZVNlbnNpdGl2ZVRyYW5zZm9ybShhdHRyaWJ1dGVzLCBwcm9wZXJ0eS50b0xvd2VyQ2FzZSgpKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gYWxwaGFiZXRpY2FsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBhbHBoYWJldGljYWwuXG5mdW5jdGlvbiBhbHBoYWJldGljYWwoY2hhcmFjdGVyKSB7XG4gIHZhciBjb2RlID0gdHlwZW9mIGNoYXJhY3RlciA9PT0gJ3N0cmluZycgPyBjaGFyYWN0ZXIuY2hhckNvZGVBdCgwKSA6IGNoYXJhY3RlclxuXG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gOTcgJiYgY29kZSA8PSAxMjIpIC8qIGEteiAqLyB8fFxuICAgIChjb2RlID49IDY1ICYmIGNvZGUgPD0gOTApIC8qIEEtWiAqL1xuICApXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwb3NpdGlvbjogdHJ1ZSxcbiAgZ2ZtOiB0cnVlLFxuICBjb21tb25tYXJrOiBmYWxzZSxcbiAgZm9vdG5vdGVzOiBmYWxzZSxcbiAgcGVkYW50aWM6IGZhbHNlLFxuICBibG9ja3M6IHJlcXVpcmUoJy4vYmxvY2stZWxlbWVudHMuanNvbicpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGF0aW9uO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycywgYW5kIHRoZWlyIGNvbHVtbiBsZW5ndGgsXG4gKiB3aGljaCBjYW4gYmUgdXNlZCBhcyBpbmRlbnRhdGlvbi4gKi9cbnZhciBjaGFyYWN0ZXJzID0geycgJzogMSwgJ1xcdCc6IDR9O1xuXG4vKiBHZXRzIGluZGVudGF0aW9uIGluZm9ybWF0aW9uIGZvciBhIGxpbmUuICovXG5mdW5jdGlvbiBpbmRlbnRhdGlvbih2YWx1ZSkge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgaW5kZW50ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBzdG9wcyA9IHt9O1xuICB2YXIgc2l6ZTtcblxuICB3aGlsZSAoY2hhcmFjdGVyIGluIGNoYXJhY3RlcnMpIHtcbiAgICBzaXplID0gY2hhcmFjdGVyc1tjaGFyYWN0ZXJdO1xuXG4gICAgaW5kZW50ICs9IHNpemU7XG5cbiAgICBpZiAoc2l6ZSA+IDEpIHtcbiAgICAgIGluZGVudCA9IE1hdGguZmxvb3IoaW5kZW50IC8gc2l6ZSkgKiBzaXplO1xuICAgIH1cblxuICAgIHN0b3BzW2luZGVudF0gPSBpbmRleDtcblxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7aW5kZW50OiBpbmRlbnQsIHN0b3BzOiBzdG9wc307XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhdHRyaWJ1dGVOYW1lID0gJ1thLXpBLVpfOl1bYS16QS1aMC05Oi5fLV0qJztcbnZhciB1bnF1b3RlZCA9ICdbXlwiXFwnPTw+YFxcXFx1MDAwMC1cXFxcdTAwMjBdKyc7XG52YXIgc2luZ2xlUXVvdGVkID0gJ1xcJ1teXFwnXSpcXCcnO1xudmFyIGRvdWJsZVF1b3RlZCA9ICdcIlteXCJdKlwiJztcbnZhciBhdHRyaWJ1dGVWYWx1ZSA9ICcoPzonICsgdW5xdW90ZWQgKyAnfCcgKyBzaW5nbGVRdW90ZWQgKyAnfCcgKyBkb3VibGVRdW90ZWQgKyAnKSc7XG52YXIgYXR0cmlidXRlID0gJyg/OlxcXFxzKycgKyBhdHRyaWJ1dGVOYW1lICsgJyg/OlxcXFxzKj1cXFxccyonICsgYXR0cmlidXRlVmFsdWUgKyAnKT8pJztcbnZhciBvcGVuVGFnID0gJzxbQS1aYS16XVtBLVphLXowLTlcXFxcLV0qJyArIGF0dHJpYnV0ZSArICcqXFxcXHMqXFxcXC8/Pic7XG52YXIgY2xvc2VUYWcgPSAnPFxcXFwvW0EtWmEtel1bQS1aYS16MC05XFxcXC1dKlxcXFxzKj4nO1xudmFyIGNvbW1lbnQgPSAnPCEtLS0tPnw8IS0tKD86LT9bXj4tXSkoPzotP1teLV0pKi0tPic7XG52YXIgcHJvY2Vzc2luZyA9ICc8Wz9dLio/Wz9dPic7XG52YXIgZGVjbGFyYXRpb24gPSAnPCFbQS1aYS16XStcXFxccytbXj5dKj4nO1xudmFyIGNkYXRhID0gJzwhXFxcXFtDREFUQVxcXFxbW1xcXFxzXFxcXFNdKj9cXFxcXVxcXFxdPic7XG5cbmV4cG9ydHMub3BlbkNsb3NlVGFnID0gbmV3IFJlZ0V4cCgnXig/OicgKyBvcGVuVGFnICsgJ3wnICsgY2xvc2VUYWcgKyAnKScpO1xuXG5leHBvcnRzLnRhZyA9IG5ldyBSZWdFeHAoJ14oPzonICtcbiAgb3BlblRhZyArICd8JyArXG4gIGNsb3NlVGFnICsgJ3wnICtcbiAgY29tbWVudCArICd8JyArXG4gIHByb2Nlc3NpbmcgKyAnfCcgK1xuICBkZWNsYXJhdGlvbiArICd8JyArXG4gIGNkYXRhICtcbicpJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignPCcsIGZyb21JbmRleCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgbGluayA9IHZhbHVlLmluZGV4T2YoJ1snLCBmcm9tSW5kZXgpO1xuICB2YXIgaW1hZ2UgPSB2YWx1ZS5pbmRleE9mKCchWycsIGZyb21JbmRleCk7XG5cbiAgaWYgKGltYWdlID09PSAtMSkge1xuICAgIHJldHVybiBsaW5rO1xuICB9XG5cbiAgLyogTGluayBjYW4gbmV2ZXIgYmUgYC0xYCBpZiBhbiBpbWFnZSBpcyBmb3VuZCwgc28gd2UgZG9u4oCZdCBuZWVkXG4gICAqIHRvIGNoZWNrIGZvciB0aGF0IDopICovXG4gIHJldHVybiBsaW5rIDwgaW1hZ2UgPyBsaW5rIDogaW1hZ2U7XG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkYWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7XG5cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbmlmICghRUUubGlzdGVuZXJDb3VudCkgRUUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDtcbn07XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIHV0aWwgPSByZXF1aXJlKCdjb3JlLXV0aWwtaXMnKTtcbnV0aWwuaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBTdHJpbmdEZWNvZGVyO1xuXG51dGlsLmluaGVyaXRzKFJlYWRhYmxlLCBTdHJlYW0pO1xuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IDE2ICogMTAyNDtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH5+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIHRoaXMuYnVmZmVyID0gW107XG4gIHRoaXMubGVuZ3RoID0gMDtcbiAgdGhpcy5waXBlcyA9IG51bGw7XG4gIHRoaXMucGlwZXNDb3VudCA9IDA7XG4gIHRoaXMuZmxvd2luZyA9IGZhbHNlO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBJbiBzdHJlYW1zIHRoYXQgbmV2ZXIgaGF2ZSBhbnkgZGF0YSwgYW5kIGRvIHB1c2gobnVsbCkgcmlnaHQgYXdheSxcbiAgLy8gdGhlIGNvbnN1bWVyIGNhbiBtaXNzIHRoZSAnZW5kJyBldmVudCBpZiB0aGV5IGRvIHNvbWUgSS9PIGJlZm9yZVxuICAvLyBjb25zdW1pbmcgdGhlIHN0cmVhbS4gIFNvLCB3ZSBkb24ndCBlbWl0KCdlbmQnKSB1bnRpbCBzb21lIHJlYWRpbmdcbiAgLy8gaGFwcGVucy5cbiAgdGhpcy5jYWxsZWRSZWFkID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY3Vhc2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gd2hlbmV2ZXIgd2UgcmV0dXJuIG51bGwsIHRoZW4gd2Ugc2V0IGEgZmxhZyB0byBzYXlcbiAgLy8gdGhhdCB3ZSdyZSBhd2FpdGluZyBhICdyZWFkYWJsZScgZXZlbnQgZW1pc3Npb24uXG4gIHRoaXMubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG4gIHRoaXMucmVhZGFibGVMaXN0ZW5pbmcgPSBmYWxzZTtcblxuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHdoZW4gcGlwaW5nLCB3ZSBvbmx5IGNhcmUgYWJvdXQgJ3JlYWRhYmxlJyBldmVudHMgdGhhdCBoYXBwZW5cbiAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay5cbiAgdGhpcy5yYW5PdXQgPSBmYWxzZTtcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIGlmICghU3RyaW5nRGVjb2RlcilcbiAgICAgIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSlcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlbmNvZGluZyA9IGVuY29kaW5nIHx8IHN0YXRlLmRlZmF1bHRFbmNvZGluZztcbiAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICBjaHVuayA9IG5ldyBCdWZmZXIoY2h1bmssIGVuY29kaW5nKTtcbiAgICAgIGVuY29kaW5nID0gJyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgZmFsc2UpO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24oY2h1bmspIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCAnJywgdHJ1ZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgYWRkVG9Gcm9udCkge1xuICB2YXIgZXIgPSBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKTtcbiAgaWYgKGVyKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2UgaWYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgaWYgKCFzdGF0ZS5lbmRlZClcbiAgICAgIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgaWYgKHN0YXRlLmVuZGVkICYmICFhZGRUb0Zyb250KSB7XG4gICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnB1c2goKSBhZnRlciBFT0YnKTtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUuZW5kRW1pdHRlZCAmJiBhZGRUb0Zyb250KSB7XG4gICAgICB2YXIgZSA9IG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTtcbiAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhYWRkVG9Gcm9udCAmJiAhZW5jb2RpbmcpXG4gICAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uXG4gICAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgICBpZiAoYWRkVG9Gcm9udCkge1xuICAgICAgICBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSlcbiAgICAgICAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG5cbiAgICAgIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFhZGRUb0Zyb250KSB7XG4gICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG5lZWRNb3JlRGF0YShzdGF0ZSk7XG59XG5cblxuXG4vLyBpZiBpdCdzIHBhc3QgdGhlIGhpZ2ggd2F0ZXIgbWFyaywgd2UgY2FuIHB1c2ggaW4gc29tZSBtb3JlLlxuLy8gQWxzbywgaWYgd2UgaGF2ZSBubyBkYXRhIHlldCwgd2UgY2FuIHN0YW5kIHNvbWVcbi8vIG1vcmUgYnl0ZXMuICBUaGlzIGlzIHRvIHdvcmsgYXJvdW5kIGNhc2VzIHdoZXJlIGh3bT0wLFxuLy8gc3VjaCBhcyB0aGUgcmVwbC4gIEFsc28sIGlmIHRoZSBwdXNoKCkgdHJpZ2dlcmVkIGFcbi8vIHJlYWRhYmxlIGV2ZW50LCBhbmQgdGhlIHVzZXIgY2FsbGVkIHJlYWQobGFyZ2VOdW1iZXIpIHN1Y2ggdGhhdFxuLy8gbmVlZFJlYWRhYmxlIHdhcyBzZXQsIHRoZW4gd2Ugb3VnaHQgdG8gcHVzaCBtb3JlLCBzbyB0aGF0IGFub3RoZXJcbi8vICdyZWFkYWJsZScgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQuXG5mdW5jdGlvbiBuZWVkTW9yZURhdGEoc3RhdGUpIHtcbiAgcmV0dXJuICFzdGF0ZS5lbmRlZCAmJlxuICAgICAgICAgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fFxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmsgfHxcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPT09IDApO1xufVxuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uKGVuYykge1xuICBpZiAoIVN0cmluZ0RlY29kZXIpXG4gICAgU3RyaW5nRGVjb2RlciA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyLycpLlN0cmluZ0RlY29kZXI7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKGVuYyk7XG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5jb2RpbmcgPSBlbmM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gMTI4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiByb3VuZFVwVG9OZXh0UG93ZXJPZjIobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMlxuICAgIG4tLTtcbiAgICBmb3IgKHZhciBwID0gMTsgcCA8IDMyOyBwIDw8PSAxKSBuIHw9IG4gPj4gcDtcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZClcbiAgICByZXR1cm4gMDtcblxuICBpZiAoc3RhdGUub2JqZWN0TW9kZSlcbiAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiAxO1xuXG4gIGlmIChuID09PSBudWxsIHx8IGlzTmFOKG4pKSB7XG4gICAgLy8gb25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUuYnVmZmVyLmxlbmd0aClcbiAgICAgIHJldHVybiBzdGF0ZS5idWZmZXJbMF0ubGVuZ3RoO1xuICAgIGVsc2VcbiAgICAgIHJldHVybiBzdGF0ZS5sZW5ndGg7XG4gIH1cblxuICBpZiAobiA8PSAwKVxuICAgIHJldHVybiAwO1xuXG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSB0YXJnZXQgYnVmZmVyIGxldmVsLFxuICAvLyB0aGVuIHJhaXNlIHRoZSB3YXRlciBtYXJrLiAgQnVtcCB1cCB0byB0aGUgbmV4dCBoaWdoZXN0XG4gIC8vIHBvd2VyIG9mIDIsIHRvIHByZXZlbnQgaW5jcmVhc2luZyBpdCBleGNlc3NpdmVseSBpbiB0aW55XG4gIC8vIGFtb3VudHMuXG4gIGlmIChuID4gc3RhdGUuaGlnaFdhdGVyTWFyaylcbiAgICBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gcm91bmRVcFRvTmV4dFBvd2VyT2YyKG4pO1xuXG4gIC8vIGRvbid0IGhhdmUgdGhhdCBtdWNoLiAgcmV0dXJuIG51bGwsIHVubGVzcyB3ZSd2ZSBlbmRlZC5cbiAgaWYgKG4gPiBzdGF0ZS5sZW5ndGgpIHtcbiAgICBpZiAoIXN0YXRlLmVuZGVkKSB7XG4gICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIG47XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uKG4pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUuY2FsbGVkUmVhZCA9IHRydWU7XG4gIHZhciBuT3JpZyA9IG47XG4gIHZhciByZXQ7XG5cbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuID4gMClcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcblxuICAvLyBpZiB3ZSdyZSBkb2luZyByZWFkKDApIHRvIHRyaWdnZXIgYSByZWFkYWJsZSBldmVudCwgYnV0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhIGJ1bmNoIG9mIGRhdGEgaW4gdGhlIGJ1ZmZlciwgdGhlbiBqdXN0IHRyaWdnZXJcbiAgLy8gdGhlICdyZWFkYWJsZScgZXZlbnQgYW5kIG1vdmUgb24uXG4gIGlmIChuID09PSAwICYmXG4gICAgICBzdGF0ZS5uZWVkUmVhZGFibGUgJiZcbiAgICAgIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIHJldCA9IG51bGw7XG5cbiAgICAvLyBJbiBjYXNlcyB3aGVyZSB0aGUgZGVjb2RlciBkaWQgbm90IHJlY2VpdmUgZW5vdWdoIGRhdGFcbiAgICAvLyB0byBwcm9kdWNlIGEgZnVsbCBjaHVuaywgdGhlbiBpbW1lZGlhdGVseSByZWNlaXZlZCBhblxuICAgIC8vIEVPRiwgc3RhdGUuYnVmZmVyIHdpbGwgY29udGFpbiBbPEJ1ZmZlciA+LCA8QnVmZmVyIDAwIC4uLj5dLlxuICAgIC8vIGhvd011Y2hUb1JlYWQgd2lsbCBzZWUgdGhpcyBhbmQgY29lcmNlIHRoZSBhbW91bnQgdG9cbiAgICAvLyByZWFkIHRvIHplcm8gKGJlY2F1c2UgaXQncyBsb29raW5nIGF0IHRoZSBsZW5ndGggb2YgdGhlXG4gICAgLy8gZmlyc3QgPEJ1ZmZlciA+IGluIHN0YXRlLmJ1ZmZlciksIGFuZCB3ZSdsbCBlbmQgdXAgaGVyZS5cbiAgICAvL1xuICAgIC8vIFRoaXMgY2FuIG9ubHkgaGFwcGVuIHZpYSBzdGF0ZS5kZWNvZGVyIC0tIG5vIG90aGVyIHZlbnVlXG4gICAgLy8gZXhpc3RzIGZvciBwdXNoaW5nIGEgemVyby1sZW5ndGggY2h1bmsgaW50byBzdGF0ZS5idWZmZXJcbiAgICAvLyBhbmQgdHJpZ2dlcmluZyB0aGlzIGJlaGF2aW9yLiBJbiB0aGlzIGNhc2UsIHdlIHJldHVybiBvdXJcbiAgICAvLyByZW1haW5pbmcgZGF0YSBhbmQgZW5kIHRoZSBzdHJlYW0sIGlmIGFwcHJvcHJpYXRlLlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPiAwICYmIHN0YXRlLmRlY29kZXIpIHtcbiAgICAgIHJldCA9IGZyb21MaXN0KG4sIHN0YXRlKTtcbiAgICAgIHN0YXRlLmxlbmd0aCAtPSByZXQubGVuZ3RoO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApXG4gICAgICBlbmRSZWFkYWJsZSh0aGlzKTtcblxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCAtIG4gPD0gc3RhdGUuaGlnaFdhdGVyTWFyaylcbiAgICBkb1JlYWQgPSB0cnVlO1xuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpXG4gICAgZG9SZWFkID0gZmFsc2U7XG5cbiAgaWYgKGRvUmVhZCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMClcbiAgICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gSWYgX3JlYWQgY2FsbGVkIGl0cyBjYWxsYmFjayBzeW5jaHJvbm91c2x5LCB0aGVuIGByZWFkaW5nYFxuICAvLyB3aWxsIGJlIGZhbHNlLCBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlXG4gIC8vIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gIGlmIChkb1JlYWQgJiYgIXN0YXRlLnJlYWRpbmcpXG4gICAgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcblxuICBpZiAobiA+IDApXG4gICAgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO1xuICBlbHNlXG4gICAgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfVxuXG4gIHN0YXRlLmxlbmd0aCAtPSBuO1xuXG4gIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLmVuZGVkKVxuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gSWYgd2UgaGFwcGVuZWQgdG8gcmVhZCgpIGV4YWN0bHkgdGhlIHJlbWFpbmluZyBhbW91bnQgaW4gdGhlXG4gIC8vIGJ1ZmZlciwgYW5kIHRoZSBFT0YgaGFzIGJlZW4gc2VlbiBhdCB0aGlzIHBvaW50LCB0aGVuIG1ha2Ugc3VyZVxuICAvLyB0aGF0IHdlIGVtaXQgJ2VuZCcgb24gdGhlIHZlcnkgbmV4dCB0aWNrLlxuICBpZiAoc3RhdGUuZW5kZWQgJiYgIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKVxuICAgIGVuZFJlYWRhYmxlKHRoaXMpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlciA9IG51bGw7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJlxuICAgICAgJ3N0cmluZycgIT09IHR5cGVvZiBjaHVuayAmJlxuICAgICAgY2h1bmsgIT09IG51bGwgJiZcbiAgICAgIGNodW5rICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vbi1zdHJpbmcvYnVmZmVyIGNodW5rJyk7XG4gIH1cbiAgcmV0dXJuIGVyO1xufVxuXG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGlmIHdlJ3ZlIGVuZGVkIGFuZCB3ZSBoYXZlIHNvbWUgZGF0YSBsZWZ0LCB0aGVuIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBpZiAoc3RhdGUubGVuZ3RoID4gMClcbiAgICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbiAgZWxzZVxuICAgIGVuZFJlYWRhYmxlKHN0cmVhbSk7XG59XG5cbi8vIERvbid0IGVtaXQgcmVhZGFibGUgcmlnaHQgYXdheSBpbiBzeW5jIG1vZGUsIGJlY2F1c2UgdGhpcyBjYW4gdHJpZ2dlclxuLy8gYW5vdGhlciByZWFkKCkgY2FsbCA9PiBzdGFjayBvdmVyZmxvdy4gIFRoaXMgd2F5LCBpdCBtaWdodCB0cmlnZ2VyXG4vLyBhIG5leHRUaWNrIHJlY3Vyc2lvbiB3YXJuaW5nLCBidXQgdGhhdCdzIG5vdCBzbyBiYWQuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcbiAgc3RhdGUubmVlZFJlYWRhYmxlID0gZmFsc2U7XG4gIGlmIChzdGF0ZS5lbWl0dGVkUmVhZGFibGUpXG4gICAgcmV0dXJuO1xuXG4gIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IHRydWU7XG4gIGlmIChzdGF0ZS5zeW5jKVxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG4gICAgfSk7XG4gIGVsc2VcbiAgICBlbWl0UmVhZGFibGVfKHN0cmVhbSk7XG59XG5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZV8oc3RyZWFtKSB7XG4gIHN0cmVhbS5lbWl0KCdyZWFkYWJsZScpO1xufVxuXG5cbi8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsXG4vLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkXG4vLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZlxuLy8gaXQncyBpbiBwcm9ncmVzcy5cbi8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sXG4vLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LlxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHtcbiAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJlxuICAgICAgICAgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztcbiAgICBlbHNlXG4gICAgICBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgcGlwZU9wdHMpIHtcbiAgdmFyIHNyYyA9IHRoaXM7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7XG4gICAgY2FzZSAwOlxuICAgICAgc3RhdGUucGlwZXMgPSBkZXN0O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOlxuICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7XG4gICAgICBicmVhaztcbiAgfVxuICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7XG5cbiAgdmFyIGRvRW5kID0gKCFwaXBlT3B0cyB8fCBwaXBlT3B0cy5lbmQgIT09IGZhbHNlKSAmJlxuICAgICAgICAgICAgICBkZXN0ICE9PSBwcm9jZXNzLnN0ZG91dCAmJlxuICAgICAgICAgICAgICBkZXN0ICE9PSBwcm9jZXNzLnN0ZGVycjtcblxuICB2YXIgZW5kRm4gPSBkb0VuZCA/IG9uZW5kIDogY2xlYW51cDtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpXG4gICAgcHJvY2Vzcy5uZXh0VGljayhlbmRGbik7XG4gIGVsc2VcbiAgICBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHtcbiAgICBpZiAocmVhZGFibGUgIT09IHNyYykgcmV0dXJuO1xuICAgIGNsZWFudXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcblxuICAgIC8vIGlmIHRoZSByZWFkZXIgaXMgd2FpdGluZyBmb3IgYSBkcmFpbiBldmVudCBmcm9tIHRoaXNcbiAgICAvLyBzcGVjaWZpYyB3cml0ZXIsIHRoZW4gaXQgd291bGQgY2F1c2UgaXQgdG8gbmV2ZXIgc3RhcnRcbiAgICAvLyBmbG93aW5nIGFnYWluLlxuICAgIC8vIFNvLCBpZiB0aGlzIGlzIGF3YWl0aW5nIGEgZHJhaW4sIHRoZW4gd2UganVzdCBjYWxsIGl0IG5vdy5cbiAgICAvLyBJZiB3ZSBkb24ndCBrbm93LCB0aGVuIGFzc3VtZSB0aGF0IHdlIGFyZSB3YWl0aW5nIGZvciBvbmUuXG4gICAgaWYgKCFkZXN0Ll93cml0YWJsZVN0YXRlIHx8IGRlc3QuX3dyaXRhYmxlU3RhdGUubmVlZERyYWluKVxuICAgICAgb25kcmFpbigpO1xuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApXG4gICAgICBkZXN0LmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9XG4gIC8vIFRoaXMgaXMgYSBicnV0YWxseSB1Z2x5IGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXJcbiAgLy8gaXMgYXR0YWNoZWQgYmVmb3JlIGFueSB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy5cbiAgaWYgKCFkZXN0Ll9ldmVudHMgfHwgIWRlc3QuX2V2ZW50cy5lcnJvcilcbiAgICBkZXN0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICBlbHNlIGlmIChpc0FycmF5KGRlc3QuX2V2ZW50cy5lcnJvcikpXG4gICAgZGVzdC5fZXZlbnRzLmVycm9yLnVuc2hpZnQob25lcnJvcik7XG4gIGVsc2VcbiAgICBkZXN0Ll9ldmVudHMuZXJyb3IgPSBbb25lcnJvciwgZGVzdC5fZXZlbnRzLmVycm9yXTtcblxuXG5cbiAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7XG4gICAgdW5waXBlKCk7XG4gIH1cbiAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpO1xuICBmdW5jdGlvbiBvbmZpbmlzaCgpIHtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpO1xuXG4gIGZ1bmN0aW9uIHVucGlwZSgpIHtcbiAgICBzcmMudW5waXBlKGRlc3QpO1xuICB9XG5cbiAgLy8gdGVsbCB0aGUgZGVzdCB0aGF0IGl0J3MgYmVpbmcgcGlwZWQgdG9cbiAgZGVzdC5lbWl0KCdwaXBlJywgc3JjKTtcblxuICAvLyBzdGFydCB0aGUgZmxvdyBpZiBpdCBoYXNuJ3QgYmVlbiBzdGFydGVkIGFscmVhZHkuXG4gIGlmICghc3RhdGUuZmxvd2luZykge1xuICAgIC8vIHRoZSBoYW5kbGVyIHRoYXQgd2FpdHMgZm9yIHJlYWRhYmxlIGV2ZW50cyBhZnRlciBhbGxcbiAgICAvLyB0aGUgZGF0YSBnZXRzIHN1Y2tlZCBvdXQgaW4gZmxvdy5cbiAgICAvLyBUaGlzIHdvdWxkIGJlIGVhc2llciB0byBmb2xsb3cgd2l0aCBhIC5vbmNlKCkgaGFuZGxlclxuICAgIC8vIGluIGZsb3coKSwgYnV0IHRoYXQgaXMgdG9vIHNsb3cuXG4gICAgdGhpcy5vbigncmVhZGFibGUnLCBwaXBlT25SZWFkYWJsZSk7XG5cbiAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgZmxvdyhzcmMpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZXN0ID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgc3RhdGUuYXdhaXREcmFpbi0tO1xuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID09PSAwKVxuICAgICAgZmxvdyhzcmMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmbG93KHNyYykge1xuICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBjaHVuaztcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG5cbiAgZnVuY3Rpb24gd3JpdGUoZGVzdCwgaSwgbGlzdCkge1xuICAgIHZhciB3cml0dGVuID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSB3cml0dGVuKSB7XG4gICAgICBzdGF0ZS5hd2FpdERyYWluKys7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKHN0YXRlLnBpcGVzQ291bnQgJiYgbnVsbCAhPT0gKGNodW5rID0gc3JjLnJlYWQoKSkpIHtcblxuICAgIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKVxuICAgICAgd3JpdGUoc3RhdGUucGlwZXMsIDAsIG51bGwpO1xuICAgIGVsc2VcbiAgICAgIGZvckVhY2goc3RhdGUucGlwZXMsIHdyaXRlKTtcblxuICAgIHNyYy5lbWl0KCdkYXRhJywgY2h1bmspO1xuXG4gICAgLy8gaWYgYW55b25lIG5lZWRzIGEgZHJhaW4sIHRoZW4gd2UgaGF2ZSB0byB3YWl0IGZvciB0aGF0LlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluID4gMClcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlmIGV2ZXJ5IGRlc3RpbmF0aW9uIHdhcyB1bnBpcGVkLCBlaXRoZXIgYmVmb3JlIGVudGVyaW5nIHRoaXNcbiAgLy8gZnVuY3Rpb24sIG9yIGluIHRoZSB3aGlsZSBsb29wLCB0aGVuIHN0b3AgZmxvd2luZy5cbiAgLy9cbiAgLy8gTkI6IFRoaXMgaXMgYSBwcmV0dHkgcmFyZSBlZGdlIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSB7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuXG4gICAgLy8gaWYgdGhlcmUgd2VyZSBkYXRhIGV2ZW50IGxpc3RlbmVycyBhZGRlZCwgdGhlbiBzd2l0Y2ggdG8gb2xkIG1vZGUuXG4gICAgaWYgKEVFLmxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpID4gMClcbiAgICAgIGVtaXREYXRhRXZlbnRzKHNyYyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gYXQgdGhpcyBwb2ludCwgbm8gb25lIG5lZWRlZCBhIGRyYWluLCBzbyB3ZSBqdXN0IHJhbiBvdXQgb2YgZGF0YVxuICAvLyBvbiB0aGUgbmV4dCByZWFkYWJsZSBldmVudCwgc3RhcnQgaXQgb3ZlciBhZ2Fpbi5cbiAgc3RhdGUucmFuT3V0ID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcGlwZU9uUmVhZGFibGUoKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlLnJhbk91dCkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUucmFuT3V0ID0gZmFsc2U7XG4gICAgZmxvdyh0aGlzKTtcbiAgfVxufVxuXG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbihkZXN0KSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gaWYgd2UncmUgbm90IHBpcGluZyBhbnl3aGVyZSwgdGhlbiBkbyBub3RoaW5nLlxuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMClcbiAgICByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmICghZGVzdClcbiAgICAgIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHBpcGVPblJlYWRhYmxlKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpXG4gICAgICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdyZWFkYWJsZScsIHBpcGVPblJlYWRhYmxlKTtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgZGVzdHNbaV0uZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaSA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaSA9PT0gLTEpXG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGksIDEpO1xuICBzdGF0ZS5waXBlc0NvdW50IC09IDE7XG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKVxuICAgIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07XG5cbiAgZGVzdC5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3Jcbi8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nXG5SZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbihldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnICYmICF0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpXG4gICAgZW1pdERhdGFFdmVudHModGhpcyk7XG5cbiAgaWYgKGV2ID09PSAncmVhZGFibGUnICYmIHRoaXMucmVhZGFibGUpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIGlmICghc3RhdGUucmVhZGluZykge1xuICAgICAgICB0aGlzLnJlYWQoMCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlLmxlbmd0aCkge1xuICAgICAgICBlbWl0UmVhZGFibGUodGhpcywgc3RhdGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuUmVhZGFibGUucHJvdG90eXBlLmFkZExpc3RlbmVyID0gUmVhZGFibGUucHJvdG90eXBlLm9uO1xuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gIGVtaXREYXRhRXZlbnRzKHRoaXMpO1xuICB0aGlzLnJlYWQoMCk7XG4gIHRoaXMuZW1pdCgncmVzdW1lJyk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgZW1pdERhdGFFdmVudHModGhpcywgdHJ1ZSk7XG4gIHRoaXMuZW1pdCgncGF1c2UnKTtcbn07XG5cbmZ1bmN0aW9uIGVtaXREYXRhRXZlbnRzKHN0cmVhbSwgc3RhcnRQYXVzZWQpIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5mbG93aW5nKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjcy9yZWFkYWJsZS1zdHJlYW0vaXNzdWVzLzE2XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3dpdGNoIHRvIG9sZCBtb2RlIG5vdy4nKTtcbiAgfVxuXG4gIHZhciBwYXVzZWQgPSBzdGFydFBhdXNlZCB8fCBmYWxzZTtcbiAgdmFyIHJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gY29udmVydCB0byBhbiBvbGQtc3R5bGUgc3RyZWFtLlxuICBzdHJlYW0ucmVhZGFibGUgPSB0cnVlO1xuICBzdHJlYW0ucGlwZSA9IFN0cmVhbS5wcm90b3R5cGUucGlwZTtcbiAgc3RyZWFtLm9uID0gc3RyZWFtLmFkZExpc3RlbmVyID0gU3RyZWFtLnByb3RvdHlwZS5vbjtcblxuICBzdHJlYW0ub24oJ3JlYWRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgcmVhZGFibGUgPSB0cnVlO1xuXG4gICAgdmFyIGM7XG4gICAgd2hpbGUgKCFwYXVzZWQgJiYgKG51bGwgIT09IChjID0gc3RyZWFtLnJlYWQoKSkpKVxuICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjKTtcblxuICAgIGlmIChjID09PSBudWxsKSB7XG4gICAgICByZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgc3RyZWFtLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgfVxuICB9KTtcblxuICBzdHJlYW0ucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBwYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuZW1pdCgncGF1c2UnKTtcbiAgfTtcblxuICBzdHJlYW0ucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgcGF1c2VkID0gZmFsc2U7XG4gICAgaWYgKHJlYWRhYmxlKVxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ3JlYWRhYmxlJyk7XG4gICAgICB9KTtcbiAgICBlbHNlXG4gICAgICB0aGlzLnJlYWQoMCk7XG4gICAgdGhpcy5lbWl0KCdyZXN1bWUnKTtcbiAgfTtcblxuICAvLyBub3cgbWFrZSBpdCBzdGFydCwganVzdCBpbiBjYXNlIGl0IGhhZG4ndCBhbHJlYWR5LlxuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbn1cblxuLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS5cbi8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS5cbi8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LlxuUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIHBhdXNlZCA9IGZhbHNlO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKVxuICAgICAgICBzZWxmLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIHNlbGYucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspIHtcbiAgICBpZiAoc3RhdGUuZGVjb2RlcilcbiAgICAgIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7XG5cbiAgICAvLyBkb24ndCBza2lwIG92ZXIgZmFsc3kgdmFsdWVzIGluIG9iamVjdE1vZGVcbiAgICAvL2lmIChzdGF0ZS5vYmplY3RNb2RlICYmIHV0aWwuaXNOdWxsT3JVbmRlZmluZWQoY2h1bmspKVxuICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSlcbiAgICAgIHJldHVybjtcbiAgICBlbHNlIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiAoIWNodW5rIHx8ICFjaHVuay5sZW5ndGgpKVxuICAgICAgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IHNlbGYucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgICAgdHlwZW9mIHRoaXNbaV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24obWV0aG9kKSB7IHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTtcbiAgICAgIH19KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgdmFyIGV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcbiAgZm9yRWFjaChldmVudHMsIGZ1bmN0aW9uKGV2KSB7XG4gICAgc3RyZWFtLm9uKGV2LCBzZWxmLmVtaXQuYmluZChzZWxmLCBldikpO1xuICB9KTtcblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICBzZWxmLl9yZWFkID0gZnVuY3Rpb24obikge1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc2VsZjtcbn07XG5cblxuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbmZ1bmN0aW9uIGZyb21MaXN0KG4sIHN0YXRlKSB7XG4gIHZhciBsaXN0ID0gc3RhdGUuYnVmZmVyO1xuICB2YXIgbGVuZ3RoID0gc3RhdGUubGVuZ3RoO1xuICB2YXIgc3RyaW5nTW9kZSA9ICEhc3RhdGUuZGVjb2RlcjtcbiAgdmFyIG9iamVjdE1vZGUgPSAhIXN0YXRlLm9iamVjdE1vZGU7XG4gIHZhciByZXQ7XG5cbiAgLy8gbm90aGluZyBpbiB0aGUgbGlzdCwgZGVmaW5pdGVseSBlbXB0eS5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKVxuICAgIHJldHVybiBudWxsO1xuXG4gIGlmIChsZW5ndGggPT09IDApXG4gICAgcmV0ID0gbnVsbDtcbiAgZWxzZSBpZiAob2JqZWN0TW9kZSlcbiAgICByZXQgPSBsaXN0LnNoaWZ0KCk7XG4gIGVsc2UgaWYgKCFuIHx8IG4gPj0gbGVuZ3RoKSB7XG4gICAgLy8gcmVhZCBpdCBhbGwsIHRydW5jYXRlIHRoZSBhcnJheS5cbiAgICBpZiAoc3RyaW5nTW9kZSlcbiAgICAgIHJldCA9IGxpc3Quam9pbignJyk7XG4gICAgZWxzZVxuICAgICAgcmV0ID0gQnVmZmVyLmNvbmNhdChsaXN0LCBsZW5ndGgpO1xuICAgIGxpc3QubGVuZ3RoID0gMDtcbiAgfSBlbHNlIHtcbiAgICAvLyByZWFkIGp1c3Qgc29tZSBvZiBpdC5cbiAgICBpZiAobiA8IGxpc3RbMF0ubGVuZ3RoKSB7XG4gICAgICAvLyBqdXN0IHRha2UgYSBwYXJ0IG9mIHRoZSBmaXJzdCBsaXN0IGl0ZW0uXG4gICAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncy5cbiAgICAgIHZhciBidWYgPSBsaXN0WzBdO1xuICAgICAgcmV0ID0gYnVmLnNsaWNlKDAsIG4pO1xuICAgICAgbGlzdFswXSA9IGJ1Zi5zbGljZShuKTtcbiAgICB9IGVsc2UgaWYgKG4gPT09IGxpc3RbMF0ubGVuZ3RoKSB7XG4gICAgICAvLyBmaXJzdCBsaXN0IGlzIGEgcGVyZmVjdCBtYXRjaFxuICAgICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb21wbGV4IGNhc2UuXG4gICAgICAvLyB3ZSBoYXZlIGVub3VnaCB0byBjb3ZlciBpdCwgYnV0IGl0IHNwYW5zIHBhc3QgdGhlIGZpcnN0IGJ1ZmZlci5cbiAgICAgIGlmIChzdHJpbmdNb2RlKVxuICAgICAgICByZXQgPSAnJztcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0ID0gbmV3IEJ1ZmZlcihuKTtcblxuICAgICAgdmFyIGMgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaXN0Lmxlbmd0aDsgaSA8IGwgJiYgYyA8IG47IGkrKykge1xuICAgICAgICB2YXIgYnVmID0gbGlzdFswXTtcbiAgICAgICAgdmFyIGNweSA9IE1hdGgubWluKG4gLSBjLCBidWYubGVuZ3RoKTtcblxuICAgICAgICBpZiAoc3RyaW5nTW9kZSlcbiAgICAgICAgICByZXQgKz0gYnVmLnNsaWNlKDAsIGNweSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICBidWYuY29weShyZXQsIGMsIDAsIGNweSk7XG5cbiAgICAgICAgaWYgKGNweSA8IGJ1Zi5sZW5ndGgpXG4gICAgICAgICAgbGlzdFswXSA9IGJ1Zi5zbGljZShjcHkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgbGlzdC5zaGlmdCgpO1xuXG4gICAgICAgIGMgKz0gY3B5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgYmVmb3JlIGNvbnN1bWluZyBhbGwgdGhlIGJ5dGVzLCB0aGVuIHRoYXQgaXMgYVxuICAvLyBidWcgaW4gbm9kZS4gIFNob3VsZCBuZXZlciBoYXBwZW4uXG4gIGlmIChzdGF0ZS5sZW5ndGggPiAwKVxuICAgIHRocm93IG5ldyBFcnJvcignZW5kUmVhZGFibGUgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUuY2FsbGVkUmVhZCkge1xuICAgIHN0YXRlLmVuZGVkID0gdHJ1ZTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgLy8gQ2hlY2sgdGhhdCB3ZSBkaWRuJ3QgZ2V0IG9uZSBsYXN0IHVuc2hpZnQuXG4gICAgICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgICAgICBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZTtcbiAgICAgICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2ggKHhzLCBmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZih4c1tpXSwgaSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5kZXhPZiAoeHMsIHgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoeHNbaV0gPT09IHgpIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImV2ZW50c1wiKTsiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcblxudmFyIGlzQnVmZmVyRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZ1xuICB8fCBmdW5jdGlvbihlbmNvZGluZykge1xuICAgICAgIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgY2FzZSAnaGV4JzogY2FzZSAndXRmOCc6IGNhc2UgJ3V0Zi04JzogY2FzZSAnYXNjaWknOiBjYXNlICdiaW5hcnknOiBjYXNlICdiYXNlNjQnOiBjYXNlICd1Y3MyJzogY2FzZSAndWNzLTInOiBjYXNlICd1dGYxNmxlJzogY2FzZSAndXRmLTE2bGUnOiBjYXNlICdyYXcnOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTtcbiAgICAgICB9XG4gICAgIH1cblxuXG5mdW5jdGlvbiBhc3NlcnRFbmNvZGluZyhlbmNvZGluZykge1xuICBpZiAoZW5jb2RpbmcgJiYgIWlzQnVmZmVyRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpO1xuICB9XG59XG5cbi8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2Zcbi8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZVxuLy8gY2hhcmFjdGVycy4gQ0VTVS04IGlzIGhhbmRsZWQgYXMgcGFydCBvZiB0aGUgVVRGLTggZW5jb2RpbmcuXG4vL1xuLy8gQFRPRE8gSGFuZGxpbmcgYWxsIGVuY29kaW5ncyBpbnNpZGUgYSBzaW5nbGUgb2JqZWN0IG1ha2VzIGl0IHZlcnkgZGlmZmljdWx0XG4vLyB0byByZWFzb24gYWJvdXQgdGhpcyBjb2RlLCBzbyBpdCBzaG91bGQgYmUgc3BsaXQgdXAgaW4gdGhlIGZ1dHVyZS5cbi8vIEBUT0RPIFRoZXJlIHNob3VsZCBiZSBhIHV0Zjgtc3RyaWN0IGVuY29kaW5nIHRoYXQgcmVqZWN0cyBpbnZhbGlkIFVURi04IGNvZGVcbi8vIHBvaW50cyBhcyB1c2VkIGJ5IENFU1UtOC5cbnZhciBTdHJpbmdEZWNvZGVyID0gZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgdGhpcy5lbmNvZGluZyA9IChlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXS8sICcnKTtcbiAgYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpO1xuICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHtcbiAgICBjYXNlICd1dGY4JzpcbiAgICAgIC8vIENFU1UtOCByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMy1ieXRlc1xuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgLy8gVVRGLTE2IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAyLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAyO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLlxuICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMztcbiAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aGlzLndyaXRlID0gcGFzc1Rocm91Z2hXcml0ZTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVub3VnaCBzcGFjZSB0byBzdG9yZSBhbGwgYnl0ZXMgb2YgYSBzaW5nbGUgY2hhcmFjdGVyLiBVVEYtOCBuZWVkcyA0XG4gIC8vIGJ5dGVzLCBidXQgQ0VTVS04IG1heSByZXF1aXJlIHVwIHRvIDYgKDMgYnl0ZXMgcGVyIHN1cnJvZ2F0ZSkuXG4gIHRoaXMuY2hhckJ1ZmZlciA9IG5ldyBCdWZmZXIoNik7XG4gIC8vIE51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSAwO1xuICAvLyBOdW1iZXIgb2YgYnl0ZXMgZXhwZWN0ZWQgZm9yIHRoZSBjdXJyZW50IGluY29tcGxldGUgbXVsdGktYnl0ZSBjaGFyYWN0ZXIuXG4gIHRoaXMuY2hhckxlbmd0aCA9IDA7XG59O1xuXG5cbi8vIHdyaXRlIGRlY29kZXMgdGhlIGdpdmVuIGJ1ZmZlciBhbmQgcmV0dXJucyBpdCBhcyBKUyBzdHJpbmcgdGhhdCBpc1xuLy8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIgZm91bmQgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGlzIGJ1ZmZlcmVkIHVwLCBhbmQgd2lsbCBiZVxuLy8gcmV0dXJuZWQgd2hlbiBjYWxsaW5nIHdyaXRlIGFnYWluIHdpdGggdGhlIHJlbWFpbmluZyBieXRlcy5cbi8vXG4vLyBOb3RlOiBDb252ZXJ0aW5nIGEgQnVmZmVyIGNvbnRhaW5pbmcgYW4gb3JwaGFuIHN1cnJvZ2F0ZSB0byBhIFN0cmluZ1xuLy8gY3VycmVudGx5IHdvcmtzLCBidXQgY29udmVydGluZyBhIFN0cmluZyB0byBhIEJ1ZmZlciAodmlhIGBuZXcgQnVmZmVyYCwgb3Jcbi8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlXG4vLyByZXBsYWNlbWVudCBjaGFyYWN0ZXIuIFNlZSBodHRwczovL2NvZGVyZXZpZXcuY2hyb21pdW0ub3JnLzEyMTE3MzAwOS8gLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIGNoYXJTdHIgPSAnJztcbiAgLy8gaWYgb3VyIGxhc3Qgd3JpdGUgZW5kZWQgd2l0aCBhbiBpbmNvbXBsZXRlIG11bHRpYnl0ZSBjaGFyYWN0ZXJcbiAgd2hpbGUgKHRoaXMuY2hhckxlbmd0aCkge1xuICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXJcbiAgICB2YXIgYXZhaWxhYmxlID0gKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQpID9cbiAgICAgICAgdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQgOlxuICAgICAgICBidWZmZXIubGVuZ3RoO1xuXG4gICAgLy8gYWRkIHRoZSBuZXcgYnl0ZXMgdG8gdGhlIGNoYXIgYnVmZmVyXG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCB0aGlzLmNoYXJSZWNlaXZlZCwgMCwgYXZhaWxhYmxlKTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBhdmFpbGFibGU7XG5cbiAgICBpZiAodGhpcy5jaGFyUmVjZWl2ZWQgPCB0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAgIC8vIHN0aWxsIG5vdCBlbm91Z2ggY2hhcnMgaW4gdGhpcyBidWZmZXI/IHdhaXQgZm9yIG1vcmUgLi4uXG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGJ5dGVzIGJlbG9uZ2luZyB0byB0aGUgY3VycmVudCBjaGFyYWN0ZXIgZnJvbSB0aGUgYnVmZmVyXG4gICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7XG5cbiAgICAvLyBnZXQgdGhlIGNoYXJhY3RlciB0aGF0IHdhcyBzcGxpdFxuICAgIGNoYXJTdHIgPSB0aGlzLmNoYXJCdWZmZXIuc2xpY2UoMCwgdGhpcy5jaGFyTGVuZ3RoKS50b1N0cmluZyh0aGlzLmVuY29kaW5nKTtcblxuICAgIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgICB2YXIgY2hhckNvZGUgPSBjaGFyU3RyLmNoYXJDb2RlQXQoY2hhclN0ci5sZW5ndGggLSAxKTtcbiAgICBpZiAoY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoICs9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICAgIGNoYXJTdHIgPSAnJztcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0aGlzLmNoYXJSZWNlaXZlZCA9IHRoaXMuY2hhckxlbmd0aCA9IDA7XG5cbiAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBpbiB0aGlzIGJ1ZmZlciwganVzdCBlbWl0IG91ciBjaGFyXG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBjaGFyU3RyO1xuICAgIH1cbiAgICBicmVhaztcbiAgfVxuXG4gIC8vIGRldGVybWluZSBhbmQgc2V0IGNoYXJMZW5ndGggLyBjaGFyUmVjZWl2ZWRcbiAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpO1xuXG4gIHZhciBlbmQgPSBidWZmZXIubGVuZ3RoO1xuICBpZiAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gYnVmZmVyIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlciBieXRlcyB3ZSBnb3RcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIDAsIGJ1ZmZlci5sZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCwgZW5kKTtcbiAgICBlbmQgLT0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gIH1cblxuICBjaGFyU3RyICs9IGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCBlbmQpO1xuXG4gIHZhciBlbmQgPSBjaGFyU3RyLmxlbmd0aCAtIDE7XG4gIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChlbmQpO1xuICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyXG4gIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnN1cnJvZ2F0ZVNpemU7XG4gICAgdGhpcy5jaGFyTGVuZ3RoICs9IHNpemU7XG4gICAgdGhpcy5jaGFyUmVjZWl2ZWQgKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJCdWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHNpemUsIDAsIHNpemUpO1xuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgMCwgc2l6ZSk7XG4gICAgcmV0dXJuIGNoYXJTdHIuc3Vic3RyaW5nKDAsIGVuZCk7XG4gIH1cblxuICAvLyBvciBqdXN0IGVtaXQgdGhlIGNoYXJTdHJcbiAgcmV0dXJuIGNoYXJTdHI7XG59O1xuXG4vLyBkZXRlY3RJbmNvbXBsZXRlQ2hhciBkZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGluY29tcGxldGUgVVRGLTggY2hhcmFjdGVyIGF0XG4vLyB0aGUgZW5kIG9mIHRoZSBnaXZlbiBidWZmZXIuIElmIHNvLCBpdCBzZXRzIHRoaXMuY2hhckxlbmd0aCB0byB0aGUgYnl0ZVxuLy8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4vLyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgY2hhcmFjdGVyLlxuU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlclxuICB2YXIgaSA9IChidWZmZXIubGVuZ3RoID49IDMpID8gMyA6IGJ1ZmZlci5sZW5ndGg7XG5cbiAgLy8gRmlndXJlIG91dCBpZiBvbmUgb2YgdGhlIGxhc3QgaSBieXRlcyBvZiBvdXIgYnVmZmVyIGFubm91bmNlcyBhblxuICAvLyBpbmNvbXBsZXRlIGNoYXIuXG4gIGZvciAoOyBpID4gMDsgaS0tKSB7XG4gICAgdmFyIGMgPSBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIGldO1xuXG4gICAgLy8gU2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVRGLTgjRGVzY3JpcHRpb25cblxuICAgIC8vIDExMFhYWFhYXG4gICAgaWYgKGkgPT0gMSAmJiBjID4+IDUgPT0gMHgwNikge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTBYWFhYXG4gICAgaWYgKGkgPD0gMiAmJiBjID4+IDQgPT0gMHgwRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMztcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8vIDExMTEwWFhYXG4gICAgaWYgKGkgPD0gMyAmJiBjID4+IDMgPT0gMHgxRSkge1xuICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGk7XG59O1xuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihidWZmZXIpIHtcbiAgdmFyIHJlcyA9ICcnO1xuICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpXG4gICAgcmVzID0gdGhpcy53cml0ZShidWZmZXIpO1xuXG4gIGlmICh0aGlzLmNoYXJSZWNlaXZlZCkge1xuICAgIHZhciBjciA9IHRoaXMuY2hhclJlY2VpdmVkO1xuICAgIHZhciBidWYgPSB0aGlzLmNoYXJCdWZmZXI7XG4gICAgdmFyIGVuYyA9IHRoaXMuZW5jb2Rpbmc7XG4gICAgcmVzICs9IGJ1Zi5zbGljZSgwLCBjcikudG9TdHJpbmcoZW5jKTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBwYXNzVGhyb3VnaFdyaXRlKGJ1ZmZlcikge1xuICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xufVxuXG5mdW5jdGlvbiB1dGYxNkRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAyO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDIgOiAwO1xufVxuXG5mdW5jdGlvbiBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcihidWZmZXIpIHtcbiAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBidWZmZXIubGVuZ3RoICUgMztcbiAgdGhpcy5jaGFyTGVuZ3RoID0gdGhpcy5jaGFyUmVjZWl2ZWQgPyAzIDogMDtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxubW9kdWxlLmV4cG9ydHMgPSBXcml0YWJsZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdidWZmZXInKS5CdWZmZXI7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhpcy5jaHVuayA9IGNodW5rO1xuICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjYjtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIHdyaXRlKCkgc3RhcnRzIHJldHVybmluZyBmYWxzZVxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIHRoYXQgd2UgYWx3YXlzIHJldHVybiBmYWxzZSBpZlxuICAvLyB0aGUgZW50aXJlIGJ1ZmZlciBpcyBub3QgZmx1c2hlZCBpbW1lZGlhdGVseSBvbiB3cml0ZSgpXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IChod20gfHwgaHdtID09PSAwKSA/IGh3bSA6IDE2ICogMTAyNDtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciBvciBub3QgdGhpcyBzdHJlYW1cbiAgLy8gY29udGFpbnMgYnVmZmVycyBvciBvYmplY3RzLlxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH5+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIHRoaXMubmVlZERyYWluID0gZmFsc2U7XG4gIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpXG4gIHRoaXMuZW5kaW5nID0gZmFsc2U7XG4gIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWRcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWRcbiAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIHNob3VsZCB3ZSBkZWNvZGUgc3RyaW5ncyBpbnRvIGJ1ZmZlcnMgYmVmb3JlIHBhc3NpbmcgdG8gX3dyaXRlP1xuICAvLyB0aGlzIGlzIGhlcmUgc28gdGhhdCBzb21lIG5vZGUtY29yZSBzdHJlYW1zIGNhbiBvcHRpbWl6ZSBzdHJpbmdcbiAgLy8gaGFuZGxpbmcgYXQgYSBsb3dlciBsZXZlbC5cbiAgdmFyIG5vRGVjb2RlID0gb3B0aW9ucy5kZWNvZGVTdHJpbmdzID09PSBmYWxzZTtcbiAgdGhpcy5kZWNvZGVTdHJpbmdzID0gIW5vRGVjb2RlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50XG4gIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmdcbiAgLy8gc29ja2V0IG9yIGZpbGUuXG4gIHRoaXMubGVuZ3RoID0gMDtcblxuICAvLyBhIGZsYWcgdG8gc2VlIHdoZW4gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHdyaXRlLlxuICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjdWFzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoXG4gIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0XG4gIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLlxuICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCdzIHBhc3NlZCB0byBfd3JpdGUoY2h1bmssY2IpXG4gIHRoaXMub253cml0ZSA9IGZ1bmN0aW9uKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyID0gW107XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICB2YXIgRHVwbGV4ID0gcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdGhvdWdoIHRoZXkncmUgbm90XG4gIC8vIGluc3RhbmNlb2YgV3JpdGFibGUsIHRoZXkncmUgaW5zdGFuY2VvZiBSZWFkYWJsZS5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFdyaXRhYmxlKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKVxuICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7XG5cbiAgdGhpcy5fd3JpdGFibGVTdGF0ZSA9IG5ldyBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIGxlZ2FjeS5cbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbi8vIE90aGVyd2lzZSBwZW9wbGUgY2FuIHBpcGUgV3JpdGFibGUgc3RyZWFtcywgd2hpY2ggaXMganVzdCB3cm9uZy5cbldyaXRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLiBOb3QgcmVhZGFibGUuJykpO1xufTtcblxuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgc3RhdGUsIGNiKSB7XG4gIHZhciBlciA9IG5ldyBFcnJvcignd3JpdGUgYWZ0ZXIgZW5kJyk7XG4gIC8vIFRPRE86IGRlZmVyIGVycm9yIGV2ZW50cyBjb25zaXN0ZW50bHkgZXZlcnl3aGVyZSwgbm90IGp1c3QgdGhlIGNiXG4gIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICBjYihlcik7XG4gIH0pO1xufVxuXG4vLyBJZiB3ZSBnZXQgc29tZXRoaW5nIHRoYXQgaXMgbm90IGEgYnVmZmVyLCBzdHJpbmcsIG51bGwsIG9yIHVuZGVmaW5lZCxcbi8vIGFuZCB3ZSdyZSBub3QgaW4gb2JqZWN0TW9kZSwgdGhlbiB0aGF0J3MgYW4gZXJyb3IuXG4vLyBPdGhlcndpc2Ugc3RyZWFtIGNodW5rcyBhcmUgYWxsIGNvbnNpZGVyZWQgdG8gYmUgb2YgbGVuZ3RoPTEsIGFuZCB0aGVcbi8vIHdhdGVybWFya3MgZGV0ZXJtaW5lIGhvdyBtYW55IG9iamVjdHMgdG8ga2VlcCBpbiB0aGUgYnVmZmVyLCByYXRoZXIgdGhhblxuLy8gaG93IG1hbnkgYnl0ZXMgb3IgY2hhcmFjdGVycy5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJlxuICAgICAgJ3N0cmluZycgIT09IHR5cGVvZiBjaHVuayAmJlxuICAgICAgY2h1bmsgIT09IG51bGwgJiZcbiAgICAgIGNodW5rICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICFzdGF0ZS5vYmplY3RNb2RlKSB7XG4gICAgdmFyIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgY2IoZXIpO1xuICAgIH0pO1xuICAgIHZhbGlkID0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbGlkO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG4gIHZhciByZXQgPSBmYWxzZTtcblxuICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSlcbiAgICBlbmNvZGluZyA9ICdidWZmZXInO1xuICBlbHNlIGlmICghZW5jb2RpbmcpXG4gICAgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJylcbiAgICBjYiA9IGZ1bmN0aW9uKCkge307XG5cbiAgaWYgKHN0YXRlLmVuZGVkKVxuICAgIHdyaXRlQWZ0ZXJFbmQodGhpcywgc3RhdGUsIGNiKTtcbiAgZWxzZSBpZiAodmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSlcbiAgICByZXQgPSB3cml0ZU9yQnVmZmVyKHRoaXMsIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiZcbiAgICAgIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBuZXcgQnVmZmVyKGNodW5rLCBlbmNvZGluZyk7XG4gIH1cbiAgcmV0dXJuIGNodW5rO1xufVxuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKVxuICAgIGVuY29kaW5nID0gJ2J1ZmZlcic7XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpXG4gICAgc3RhdGUubmVlZERyYWluID0gdHJ1ZTtcblxuICBpZiAoc3RhdGUud3JpdGluZylcbiAgICBzdGF0ZS5idWZmZXIucHVzaChuZXcgV3JpdGVSZXEoY2h1bmssIGVuY29kaW5nLCBjYikpO1xuICBlbHNlXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgaWYgKHN5bmMpXG4gICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgIGNiKGVyKTtcbiAgICB9KTtcbiAgZWxzZVxuICAgIGNiKGVyKTtcblxuICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTtcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpIHtcbiAgc3RhdGUud3JpdGluZyA9IGZhbHNlO1xuICBzdGF0ZS53cml0ZWNiID0gbnVsbDtcbiAgc3RhdGUubGVuZ3RoIC09IHN0YXRlLndyaXRlbGVuO1xuICBzdGF0ZS53cml0ZWxlbiA9IDA7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGUoc3RyZWFtLCBlcikge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7XG4gIHZhciBzeW5jID0gc3RhdGUuc3luYztcbiAgdmFyIGNiID0gc3RhdGUud3JpdGVjYjtcblxuICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpO1xuXG4gIGlmIChlcilcbiAgICBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtcbiAgZWxzZSB7XG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgYWN0dWFsbHkgcmVhZHkgdG8gZmluaXNoLCBidXQgZG9uJ3QgZW1pdCB5ZXRcbiAgICB2YXIgZmluaXNoZWQgPSBuZWVkRmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXIubGVuZ3RoKVxuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG5cbiAgICBpZiAoc3luYykge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmluaXNoZWQsIGNiKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZClcbiAgICBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIGNiKCk7XG4gIGlmIChmaW5pc2hlZClcbiAgICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cblxuLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXRcbmZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7XG5cbiAgZm9yICh2YXIgYyA9IDA7IGMgPCBzdGF0ZS5idWZmZXIubGVuZ3RoOyBjKyspIHtcbiAgICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJbY107XG4gICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuXG4gICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW5cbiAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgIC8vIGFsc28sIHRoYXQgbWVhbnMgdGhhdCB0aGUgY2h1bmsgYW5kIGNiIGFyZSBjdXJyZW50bHlcbiAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS5cbiAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgYysrO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuICBpZiAoYyA8IHN0YXRlLmJ1ZmZlci5sZW5ndGgpXG4gICAgc3RhdGUuYnVmZmVyID0gc3RhdGUuYnVmZmVyLnNsaWNlKGMpO1xuICBlbHNlXG4gICAgc3RhdGUuYnVmZmVyLmxlbmd0aCA9IDA7XG59XG5cbldyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3VuZGVmaW5lZCcgJiYgY2h1bmsgIT09IG51bGwpXG4gICAgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy5cbiAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKVxuICAgIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RyZWFtLCBzdGF0ZSkge1xuICByZXR1cm4gKHN0YXRlLmVuZGluZyAmJlxuICAgICAgICAgIHN0YXRlLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICAgICFzdGF0ZS5maW5pc2hlZCAmJlxuICAgICAgICAgICFzdGF0ZS53cml0aW5nKTtcbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChuZWVkKSB7XG4gICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZClcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY2IpO1xuICAgIGVsc2VcbiAgICAgIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xufVxuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cblxuLy8gYSB0cmFuc2Zvcm0gc3RyZWFtIGlzIGEgcmVhZGFibGUvd3JpdGFibGUgc3RyZWFtIHdoZXJlIHlvdSBkb1xuLy8gc29tZXRoaW5nIHdpdGggdGhlIGRhdGEuICBTb21ldGltZXMgaXQncyBjYWxsZWQgYSBcImZpbHRlclwiLFxuLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmVcbi8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGRcbi8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLilcbi8vXG4vLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhXG4vLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSxcbi8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlblxuLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLlxuLy9cbi8vIEhlcmUncyBob3cgdGhpcyB3b3Jrczpcbi8vXG4vLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGVcbi8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYilcbi8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXNcbi8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWxcbi8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC5cbi8vXG4vLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlblxuLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGVcbi8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZVxuLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3Rcbi8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50b1xuLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSxcbi8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsXG4vLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nXG4vLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpc1xuLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueVxuLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpblxuLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsXG4vLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluXG4vLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGxcbi8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkXG4vLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LlxuLy9cbi8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmtcbi8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWxcbi8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLlxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcbiAgdGhpcy5hZnRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uKGVyLCBkYXRhKSB7XG4gICAgcmV0dXJuIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpO1xuICB9O1xuXG4gIHRoaXMubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICB0aGlzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuICB0aGlzLndyaXRlY2h1bmsgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIHZhciB0cyA9IHN0cmVhbS5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYilcbiAgICByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdubyB3cml0ZWNiIGluIFRyYW5zZm9ybSBjbGFzcycpKTtcblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKVxuICAgIHN0cmVhbS5wdXNoKGRhdGEpO1xuXG4gIGlmIChjYilcbiAgICBjYihlcik7XG5cbiAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHN0cmVhbS5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKVxuICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlID0gbmV3IFRyYW5zZm9ybVN0YXRlKG9wdGlvbnMsIHRoaXMpO1xuXG4gIC8vIHdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy5cbiAgdmFyIHN0cmVhbSA9IHRoaXM7XG5cbiAgLy8gc3RhcnQgb3V0IGFza2luZyBmb3IgYSByZWFkYWJsZSBldmVudCBvbmNlIGRhdGEgaXMgdHJhbnNmb3JtZWQuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlO1xuXG4gIHRoaXMub25jZSgnZmluaXNoJywgZnVuY3Rpb24oKSB7XG4gICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiB0aGlzLl9mbHVzaClcbiAgICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uKGVyKSB7XG4gICAgICAgIGRvbmUoc3RyZWFtLCBlcik7XG4gICAgICB9KTtcbiAgICBlbHNlXG4gICAgICBkb25lKHN0cmVhbSk7XG4gIH0pO1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcpIHtcbiAgdGhpcy5fdHJhbnNmb3JtU3RhdGUubmVlZFRyYW5zZm9ybSA9IGZhbHNlO1xuICByZXR1cm4gRHVwbGV4LnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcywgY2h1bmssIGVuY29kaW5nKTtcbn07XG5cbi8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIVxuLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay5cbi8vXG4vLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXRcbi8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuXG4vL1xuLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3Ncbi8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3Vcbi8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignbm90IGltcGxlbWVudGVkJyk7XG59O1xuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fFxuICAgICAgICBycy5uZWVkUmVhZGFibGUgfHxcbiAgICAgICAgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaylcbiAgICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn07XG5cbi8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuXG4vLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLlxuLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbihuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyKSB7XG4gIGlmIChlcilcbiAgICByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuXG4gIC8vIGlmIHRoZXJlJ3Mgbm90aGluZyBpbiB0aGUgd3JpdGUgYnVmZmVyLCB0aGVuIHRoYXQgbWVhbnNcbiAgLy8gdGhhdCBub3RoaW5nIG1vcmUgd2lsbCBldmVyIGJlIHByb3ZpZGVkXG4gIHZhciB3cyA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdjYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAodHMudHJhbnNmb3JtaW5nKVxuICAgIHRocm93IG5ldyBFcnJvcignY2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBwbmEgPSByZXF1aXJlKCdwcm9jZXNzLW5leHRpY2stYXJncycpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbm1vZHVsZS5leHBvcnRzID0gUmVhZGFibGU7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5SZWFkYWJsZS5SZWFkYWJsZVN0YXRlID0gUmVhZGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBFRSA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcblxudmFyIEVFbGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uIChlbWl0dGVyLCB0eXBlKSB7XG4gIHJldHVybiBlbWl0dGVyLmxpc3RlbmVycyh0eXBlKS5sZW5ndGg7XG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciBkZWJ1Z1V0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG52YXIgZGVidWcgPSB2b2lkIDA7XG5pZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykge1xuICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7XG59IGVsc2Uge1xuICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9O1xufVxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXJMaXN0ID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL0J1ZmZlckxpc3QnKTtcbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG52YXIgU3RyaW5nRGVjb2RlcjtcblxudXRpbC5pbmhlcml0cyhSZWFkYWJsZSwgU3RyZWFtKTtcblxudmFyIGtQcm94eUV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcblxuZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikge1xuICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93blxuICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS5cbiAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyKGV2ZW50LCBmbik7XG5cbiAgLy8gVGhpcyBpcyBhIGhhY2sgdG8gbWFrZSBzdXJlIHRoYXQgb3VyIGVycm9yIGhhbmRsZXIgaXMgYXR0YWNoZWQgYmVmb3JlIGFueVxuICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHNcbiAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAvLyB0aGUgcHJlcGVuZExpc3RlbmVyKCkgbWV0aG9kLiBUaGUgZ29hbCBpcyB0byBldmVudHVhbGx5IHJlbW92ZSB0aGlzIGhhY2suXG4gIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dO1xufVxuXG5mdW5jdGlvbiBSZWFkYWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIER1cGxleCBzdHJlYW1zIGFyZSBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZSwgYnV0IHNoYXJlXG4gIC8vIHRoZSBzYW1lIG9wdGlvbnMgb2JqZWN0LlxuICAvLyBIb3dldmVyLCBzb21lIGNhc2VzIHJlcXVpcmUgc2V0dGluZyBvcHRpb25zIHRvIGRpZmZlcmVudFxuICAvLyB2YWx1ZXMgZm9yIHRoZSByZWFkYWJsZSBhbmQgdGhlIHdyaXRhYmxlIHNpZGVzIG9mIHRoZSBkdXBsZXggc3RyZWFtLlxuICAvLyBUaGVzZSBvcHRpb25zIGNhbiBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGFzIHJlYWRhYmxlWFhYIGFuZCB3cml0YWJsZVhYWC5cbiAgdmFyIGlzRHVwbGV4ID0gc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZy4gVXNlZCB0byBtYWtlIHJlYWQobikgaWdub3JlIG4gYW5kIHRvXG4gIC8vIG1ha2UgYWxsIHRoZSBidWZmZXIgbWVyZ2luZyBhbmQgbGVuZ3RoIGNoZWNrcyBnbyBhd2F5XG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChpc0R1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy5yZWFkYWJsZU9iamVjdE1vZGU7XG5cbiAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXJcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyBcImRvbid0IGNhbGwgX3JlYWQgcHJlZW1wdGl2ZWx5IGV2ZXJcIlxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgcmVhZGFibGVId20gPSBvcHRpb25zLnJlYWRhYmxlSGlnaFdhdGVyTWFyaztcbiAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDtcblxuICBpZiAoaHdtIHx8IGh3bSA9PT0gMCkgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtO2Vsc2UgaWYgKGlzRHVwbGV4ICYmIChyZWFkYWJsZUh3bSB8fCByZWFkYWJsZUh3bSA9PT0gMCkpIHRoaXMuaGlnaFdhdGVyTWFyayA9IHJlYWRhYmxlSHdtO2Vsc2UgdGhpcy5oaWdoV2F0ZXJNYXJrID0gZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IE1hdGguZmxvb3IodGhpcy5oaWdoV2F0ZXJNYXJrKTtcblxuICAvLyBBIGxpbmtlZCBsaXN0IGlzIHVzZWQgdG8gc3RvcmUgZGF0YSBjaHVua3MgaW5zdGVhZCBvZiBhbiBhcnJheSBiZWNhdXNlIHRoZVxuICAvLyBsaW5rZWQgbGlzdCBjYW4gcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGJlZ2lubmluZyBmYXN0ZXIgdGhhblxuICAvLyBhcnJheS5zaGlmdCgpXG4gIHRoaXMuYnVmZmVyID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgdGhpcy5sZW5ndGggPSAwO1xuICB0aGlzLnBpcGVzID0gbnVsbDtcbiAgdGhpcy5waXBlc0NvdW50ID0gMDtcbiAgdGhpcy5mbG93aW5nID0gbnVsbDtcbiAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICB0aGlzLmVuZEVtaXR0ZWQgPSBmYWxzZTtcbiAgdGhpcy5yZWFkaW5nID0gZmFsc2U7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgZXZlbnQgJ3JlYWRhYmxlJy8nZGF0YScgaXMgZW1pdHRlZFxuICAvLyBpbW1lZGlhdGVseSwgb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZVxuICAvLyBhbnkgYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3QgcmVhZCBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5XG4gIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLlxuICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7XG4gIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gdGhlIG51bWJlciBvZiB3cml0ZXJzIHRoYXQgYXJlIGF3YWl0aW5nIGEgZHJhaW4gZXZlbnQgaW4gLnBpcGUoKXNcbiAgdGhpcy5hd2FpdERyYWluID0gMDtcblxuICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkXG4gIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTtcblxuICB0aGlzLmRlY29kZXIgPSBudWxsO1xuICB0aGlzLmVuY29kaW5nID0gbnVsbDtcbiAgaWYgKG9wdGlvbnMuZW5jb2RpbmcpIHtcbiAgICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSByZXF1aXJlKCdzdHJpbmdfZGVjb2Rlci8nKS5TdHJpbmdEZWNvZGVyO1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJlYWRhYmxlKG9wdGlvbnMpIHtcbiAgRHVwbGV4ID0gRHVwbGV4IHx8IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVhZGFibGUpKSByZXR1cm4gbmV3IFJlYWRhYmxlKG9wdGlvbnMpO1xuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUgPSBuZXcgUmVhZGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3lcbiAgdGhpcy5yZWFkYWJsZSA9IHRydWU7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVhZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fcmVhZCA9IG9wdGlvbnMucmVhZDtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuICB9XG5cbiAgU3RyZWFtLmNhbGwodGhpcyk7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cblJlYWRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcblJlYWRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuUmVhZGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5wdXNoKG51bGwpO1xuICBjYihlcnIpO1xufTtcblxuLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuXG4vLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCxcbi8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGRcbi8vIHdyaXRlKCkgc29tZSBtb3JlLlxuUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBza2lwQ2h1bmtDaGVjaztcblxuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBpZiAodHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgICBpZiAoZW5jb2RpbmcgIT09IHN0YXRlLmVuY29kaW5nKSB7XG4gICAgICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICAgIH1cbiAgICAgIHNraXBDaHVua0NoZWNrID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2tpcENodW5rQ2hlY2sgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgY2h1bmssIGVuY29kaW5nLCBmYWxzZSwgc2tpcENodW5rQ2hlY2spO1xufTtcblxuLy8gVW5zaGlmdCBzaG91bGQgKmFsd2F5cyogYmUgc29tZXRoaW5nIGRpcmVjdGx5IG91dCBvZiByZWFkKClcblJlYWRhYmxlLnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHJldHVybiByZWFkYWJsZUFkZENodW5rKHRoaXMsIGNodW5rLCBudWxsLCB0cnVlLCBmYWxzZSk7XG59O1xuXG5mdW5jdGlvbiByZWFkYWJsZUFkZENodW5rKHN0cmVhbSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250LCBza2lwQ2h1bmtDaGVjaykge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBlcjtcbiAgICBpZiAoIXNraXBDaHVua0NoZWNrKSBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspO1xuICAgIGlmIChlcikge1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUub2JqZWN0TW9kZSB8fCBjaHVuayAmJiBjaHVuay5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodHlwZW9mIGNodW5rICE9PSAnc3RyaW5nJyAmJiAhc3RhdGUub2JqZWN0TW9kZSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY2h1bmspICE9PSBCdWZmZXIucHJvdG90eXBlKSB7XG4gICAgICAgIGNodW5rID0gX3VpbnQ4QXJyYXlUb0J1ZmZlcihjaHVuayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRUb0Zyb250KSB7XG4gICAgICAgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS51bnNoaWZ0KCkgYWZ0ZXIgZW5kIGV2ZW50JykpO2Vsc2UgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRlZCkge1xuICAgICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUucmVhZGluZyA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhZW5jb2RpbmcpIHtcbiAgICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rLmxlbmd0aCAhPT0gMCkgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtlbHNlIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gYWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGFkZFRvRnJvbnQpIHtcbiAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmICFzdGF0ZS5zeW5jKSB7XG4gICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gdXBkYXRlIHRoZSBidWZmZXIgaW5mby5cbiAgICBzdGF0ZS5sZW5ndGggKz0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG4gICAgaWYgKGFkZFRvRnJvbnQpIHN0YXRlLmJ1ZmZlci51bnNoaWZ0KGNodW5rKTtlbHNlIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcblxuICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xuICB9XG4gIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspIHtcbiAgdmFyIGVyO1xuICBpZiAoIV9pc1VpbnQ4QXJyYXkoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIHJldHVybiBlcjtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7XG59O1xuXG4vLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblJlYWRhYmxlLnByb3RvdHlwZS5zZXRFbmNvZGluZyA9IGZ1bmN0aW9uIChlbmMpIHtcbiAgaWYgKCFTdHJpbmdEZWNvZGVyKSBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZSgnc3RyaW5nX2RlY29kZXIvJykuU3RyaW5nRGVjb2RlcjtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIoZW5jKTtcbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmNvZGluZyA9IGVuYztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vLyBEb24ndCByYWlzZSB0aGUgaHdtID4gOE1CXG52YXIgTUFYX0hXTSA9IDB4ODAwMDAwO1xuZnVuY3Rpb24gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobikge1xuICBpZiAobiA+PSBNQVhfSFdNKSB7XG4gICAgbiA9IE1BWF9IV007XG4gIH0gZWxzZSB7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgcG93ZXIgb2YgMiB0byBwcmV2ZW50IGluY3JlYXNpbmcgaHdtIGV4Y2Vzc2l2ZWx5IGluXG4gICAgLy8gdGlueSBhbW91bnRzXG4gICAgbi0tO1xuICAgIG4gfD0gbiA+Pj4gMTtcbiAgICBuIHw9IG4gPj4+IDI7XG4gICAgbiB8PSBuID4+PiA0O1xuICAgIG4gfD0gbiA+Pj4gODtcbiAgICBuIHw9IG4gPj4+IDE2O1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmdcbi8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuXG5mdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7XG4gIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDtcbiAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxO1xuICBpZiAobiAhPT0gbikge1xuICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZVxuICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbiAgfVxuICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS5cbiAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7XG4gIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47XG4gIC8vIERvbid0IGhhdmUgZW5vdWdoXG4gIGlmICghc3RhdGUuZW5kZWQpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sZW5ndGg7XG59XG5cbi8vIHlvdSBjYW4gb3ZlcnJpZGUgZWl0aGVyIHRoaXMgbWV0aG9kLCBvciB0aGUgYXN5bmMgX3JlYWQobikgYmVsb3cuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIGRlYnVnKCdyZWFkJywgbik7XG4gIG4gPSBwYXJzZUludChuLCAxMCk7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7XG4gIHZhciBuT3JpZyA9IG47XG5cbiAgaWYgKG4gIT09IDApIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuXG4gIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlclxuICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi5cbiAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHtcbiAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuID0gaG93TXVjaFRvUmVhZChuLCBzdGF0ZSk7XG5cbiAgLy8gaWYgd2UndmUgZW5kZWQsIGFuZCB3ZSdyZSBub3cgY2xlYXIsIHRoZW4gZmluaXNoIGl0IHVwLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkge1xuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIGVuZFJlYWRhYmxlKHRoaXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZVxuICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW5cbiAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZFxuICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuXG4gIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLlxuICAvL1xuICAvLyBTbywgdGhlIHN0ZXBzIGFyZTpcbiAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkb1xuICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLlxuICAvL1xuICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLlxuICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXNcbiAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuXG4gIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmVcbiAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy5cbiAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsXG4gIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXRcbiAgLy8gJ3JlYWRhYmxlJyBldGMuXG4gIC8vXG4gIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi5cblxuICAvLyBpZiB3ZSBuZWVkIGEgcmVhZGFibGUgZXZlbnQsIHRoZW4gd2UgbmVlZCB0byBkbyBzb21lIHJlYWRpbmcuXG4gIHZhciBkb1JlYWQgPSBzdGF0ZS5uZWVkUmVhZGFibGU7XG4gIGRlYnVnKCduZWVkIHJlYWRhYmxlJywgZG9SZWFkKTtcblxuICAvLyBpZiB3ZSBjdXJyZW50bHkgaGF2ZSBsZXNzIHRoYW4gdGhlIGhpZ2hXYXRlck1hcmssIHRoZW4gYWxzbyByZWFkIHNvbWVcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCB8fCBzdGF0ZS5sZW5ndGggLSBuIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRvUmVhZCA9IHRydWU7XG4gICAgZGVidWcoJ2xlbmd0aCBsZXNzIHRoYW4gd2F0ZXJtYXJrJywgZG9SZWFkKTtcbiAgfVxuXG4gIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5XG4gIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS5cbiAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHtcbiAgICBkb1JlYWQgPSBmYWxzZTtcbiAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7XG4gIH0gZWxzZSBpZiAoZG9SZWFkKSB7XG4gICAgZGVidWcoJ2RvIHJlYWQnKTtcbiAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTtcbiAgICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LlxuICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZFxuICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7XG4gICAgc3RhdGUuc3luYyA9IGZhbHNlO1xuICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLlxuICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTtcbiAgfVxuXG4gIHZhciByZXQ7XG4gIGlmIChuID4gMCkgcmV0ID0gZnJvbUxpc3Qobiwgc3RhdGUpO2Vsc2UgcmV0ID0gbnVsbDtcblxuICBpZiAocmV0ID09PSBudWxsKSB7XG4gICAgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBuID0gMDtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5sZW5ndGggLT0gbjtcbiAgfVxuXG4gIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3dcbiAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuXG4gICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcblxuICAgIC8vIElmIHdlIHRyaWVkIHRvIHJlYWQoKSBwYXN0IHRoZSBFT0YsIHRoZW4gZW1pdCBlbmQgb24gdGhlIG5leHQgdGljay5cbiAgICBpZiAobk9yaWcgIT09IG4gJiYgc3RhdGUuZW5kZWQpIGVuZFJlYWRhYmxlKHRoaXMpO1xuICB9XG5cbiAgaWYgKHJldCAhPT0gbnVsbCkgdGhpcy5lbWl0KCdkYXRhJywgcmV0KTtcblxuICByZXR1cm4gcmV0O1xufTtcblxuZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuO1xuICBpZiAoc3RhdGUuZGVjb2Rlcikge1xuICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkge1xuICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuICAgIH1cbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG5cbiAgLy8gZW1pdCAncmVhZGFibGUnIG5vdyB0byBtYWtlIHN1cmUgaXQgZ2V0cyBwaWNrZWQgdXAuXG4gIGVtaXRSZWFkYWJsZShzdHJlYW0pO1xufVxuXG4vLyBEb24ndCBlbWl0IHJlYWRhYmxlIHJpZ2h0IGF3YXkgaW4gc3luYyBtb2RlLCBiZWNhdXNlIHRoaXMgY2FuIHRyaWdnZXJcbi8vIGFub3RoZXIgcmVhZCgpIGNhbGwgPT4gc3RhY2sgb3ZlcmZsb3cuICBUaGlzIHdheSwgaXQgbWlnaHQgdHJpZ2dlclxuLy8gYSBuZXh0VGljayByZWN1cnNpb24gd2FybmluZywgYnV0IHRoYXQncyBub3Qgc28gYmFkLlxuZnVuY3Rpb24gZW1pdFJlYWRhYmxlKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIHN0YXRlLm5lZWRSZWFkYWJsZSA9IGZhbHNlO1xuICBpZiAoIXN0YXRlLmVtaXR0ZWRSZWFkYWJsZSkge1xuICAgIGRlYnVnKCdlbWl0UmVhZGFibGUnLCBzdGF0ZS5mbG93aW5nKTtcbiAgICBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSB0cnVlO1xuICAgIGlmIChzdGF0ZS5zeW5jKSBwbmEubmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIHBuYS5uZXh0VGljayhtYXliZVJlYWRNb3JlXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF5YmVSZWFkTW9yZV8oc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbGVuID0gc3RhdGUubGVuZ3RoO1xuICB3aGlsZSAoIXN0YXRlLnJlYWRpbmcgJiYgIXN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLmVuZGVkICYmIHN0YXRlLmxlbmd0aCA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHtcbiAgICBkZWJ1ZygnbWF5YmVSZWFkTW9yZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICBpZiAobGVuID09PSBzdGF0ZS5sZW5ndGgpXG4gICAgICAvLyBkaWRuJ3QgZ2V0IGFueSBkYXRhLCBzdG9wIHNwaW5uaW5nLlxuICAgICAgYnJlYWs7ZWxzZSBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIH1cbiAgc3RhdGUucmVhZGluZ01vcmUgPSBmYWxzZTtcbn1cblxuLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLlxuLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC5cbi8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCBcImxlbmd0aFwiIGlzIHNvbWV3aGF0XG4vLyBhcmJpdHJhcnksIGFuZCBwZXJoYXBzIG5vdCB2ZXJ5IG1lYW5pbmdmdWwuXG5SZWFkYWJsZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdfcmVhZCgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSkgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRvdXQgJiYgZGVzdCAhPT0gcHJvY2Vzcy5zdGRlcnI7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IHVucGlwZTtcbiAgaWYgKHN0YXRlLmVuZEVtaXR0ZWQpIHBuYS5uZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUsIHVucGlwZUluZm8pIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgaWYgKHVucGlwZUluZm8gJiYgdW5waXBlSW5mby5oYXNVbnBpcGVkID09PSBmYWxzZSkge1xuICAgICAgICB1bnBpcGVJbmZvLmhhc1VucGlwZWQgPSB0cnVlO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoKSB7XG4gICAgZGVidWcoJ29uZW5kJyk7XG4gICAgZGVzdC5lbmQoKTtcbiAgfVxuXG4gIC8vIHdoZW4gdGhlIGRlc3QgZHJhaW5zLCBpdCByZWR1Y2VzIHRoZSBhd2FpdERyYWluIGNvdW50ZXJcbiAgLy8gb24gdGhlIHNvdXJjZS4gIFRoaXMgd291bGQgYmUgbW9yZSBlbGVnYW50IHdpdGggYSAub25jZSgpXG4gIC8vIGhhbmRsZXIgaW4gZmxvdygpLCBidXQgYWRkaW5nIGFuZCByZW1vdmluZyByZXBlYXRlZGx5IGlzXG4gIC8vIHRvbyBzbG93LlxuICB2YXIgb25kcmFpbiA9IHBpcGVPbkRyYWluKHNyYyk7XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgdmFyIGNsZWFuZWRVcCA9IGZhbHNlO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGRlYnVnKCdjbGVhbnVwJyk7XG4gICAgLy8gY2xlYW51cCBldmVudCBoYW5kbGVycyBvbmNlIHRoZSBwaXBlIGlzIGJyb2tlblxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCd1bnBpcGUnLCBvbnVucGlwZSk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCB1bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG5cbiAgICBjbGVhbmVkVXAgPSB0cnVlO1xuXG4gICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpc1xuICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydFxuICAgIC8vIGZsb3dpbmcgYWdhaW4uXG4gICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LlxuICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS5cbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7XG4gIH1cblxuICAvLyBJZiB0aGUgdXNlciBwdXNoZXMgbW9yZSBkYXRhIHdoaWxlIHdlJ3JlIHdyaXRpbmcgdG8gZGVzdCB0aGVuIHdlJ2xsIGVuZCB1cFxuICAvLyBpbiBvbmRhdGEgYWdhaW4uIEhvd2V2ZXIsIHdlIG9ubHkgd2FudCB0byBpbmNyZWFzZSBhd2FpdERyYWluIG9uY2UgYmVjYXVzZVxuICAvLyBkZXN0IHdpbGwgb25seSBlbWl0IG9uZSAnZHJhaW4nIGV2ZW50IGZvciB0aGUgbXVsdGlwbGUgd3JpdGVzLlxuICAvLyA9PiBJbnRyb2R1Y2UgYSBndWFyZCBvbiBpbmNyZWFzaW5nIGF3YWl0RHJhaW4uXG4gIHZhciBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gIHNyYy5vbignZGF0YScsIG9uZGF0YSk7XG4gIGZ1bmN0aW9uIG9uZGF0YShjaHVuaykge1xuICAgIGRlYnVnKCdvbmRhdGEnKTtcbiAgICBpbmNyZWFzZWRBd2FpdERyYWluID0gZmFsc2U7XG4gICAgdmFyIHJldCA9IGRlc3Qud3JpdGUoY2h1bmspO1xuICAgIGlmIChmYWxzZSA9PT0gcmV0ICYmICFpbmNyZWFzZWRBd2FpdERyYWluKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB1bnBpcGVkIGR1cmluZyBgZGVzdC53cml0ZSgpYCwgaXQgaXMgcG9zc2libGVcbiAgICAgIC8vIHRvIGdldCBzdHVjayBpbiBhIHBlcm1hbmVudGx5IHBhdXNlZCBzdGF0ZSBpZiB0aGF0IHdyaXRlXG4gICAgICAvLyBhbHNvIHJldHVybmVkIGZhbHNlLlxuICAgICAgLy8gPT4gQ2hlY2sgd2hldGhlciBgZGVzdGAgaXMgc3RpbGwgYSBwaXBpbmcgZGVzdGluYXRpb24uXG4gICAgICBpZiAoKHN0YXRlLnBpcGVzQ291bnQgPT09IDEgJiYgc3RhdGUucGlwZXMgPT09IGRlc3QgfHwgc3RhdGUucGlwZXNDb3VudCA+IDEgJiYgaW5kZXhPZihzdGF0ZS5waXBlcywgZGVzdCkgIT09IC0xKSAmJiAhY2xlYW5lZFVwKSB7XG4gICAgICAgIGRlYnVnKCdmYWxzZSB3cml0ZSByZXNwb25zZSwgcGF1c2UnLCBzcmMuX3JlYWRhYmxlU3RhdGUuYXdhaXREcmFpbik7XG4gICAgICAgIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKys7XG4gICAgICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgc3JjLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIGRlc3QgaGFzIGFuIGVycm9yLCB0aGVuIHN0b3AgcGlwaW5nIGludG8gaXQuXG4gIC8vIGhvd2V2ZXIsIGRvbid0IHN1cHByZXNzIHRoZSB0aHJvd2luZyBiZWhhdmlvciBmb3IgdGhpcy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGRlYnVnKCdvbmVycm9yJywgZXIpO1xuICAgIHVucGlwZSgpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgaWYgKEVFbGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgdW5waXBlSW5mbyA9IHsgaGFzVW5waXBlZDogZmFsc2UgfTtcblxuICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpcztcblxuICAvLyBqdXN0IG9uZSBkZXN0aW5hdGlvbi4gIG1vc3QgY29tbW9uIGNhc2UuXG4gIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAxKSB7XG4gICAgLy8gcGFzc2VkIGluIG9uZSwgYnV0IGl0J3Mgbm90IHRoZSByaWdodCBvbmUuXG4gICAgaWYgKGRlc3QgJiYgZGVzdCAhPT0gc3RhdGUucGlwZXMpIHJldHVybiB0aGlzO1xuXG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gc3RhdGUucGlwZXM7XG5cbiAgICAvLyBnb3QgYSBtYXRjaC5cbiAgICBzdGF0ZS5waXBlcyA9IG51bGw7XG4gICAgc3RhdGUucGlwZXNDb3VudCA9IDA7XG4gICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlO1xuICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gc2xvdyBjYXNlLiBtdWx0aXBsZSBwaXBlIGRlc3RpbmF0aW9ucy5cblxuICBpZiAoIWRlc3QpIHtcbiAgICAvLyByZW1vdmUgYWxsLlxuICAgIHZhciBkZXN0cyA9IHN0YXRlLnBpcGVzO1xuICAgIHZhciBsZW4gPSBzdGF0ZS5waXBlc0NvdW50O1xuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzLCB1bnBpcGVJbmZvKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaW5kZXggPSBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KTtcbiAgaWYgKGluZGV4ID09PSAtMSkgcmV0dXJuIHRoaXM7XG5cbiAgc3RhdGUucGlwZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMsIHVucGlwZUluZm8pO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IFN0cmVhbS5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIHBuYS5uZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7XG4gICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBwbmEubmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzdW1lXyhzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVhZGluZykge1xuICAgIGRlYnVnKCdyZXN1bWUgcmVhZCAwJyk7XG4gICAgc3RyZWFtLnJlYWQoMCk7XG4gIH1cblxuICBzdGF0ZS5yZXN1bWVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgc3RhdGUuYXdhaXREcmFpbiA9IDA7XG4gIHN0cmVhbS5lbWl0KCdyZXN1bWUnKTtcbiAgZmxvdyhzdHJlYW0pO1xuICBpZiAoc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUucmVhZGluZykgc3RyZWFtLnJlYWQoMCk7XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7XG4gIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BhdXNlJyk7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZmxvdyhzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBkZWJ1ZygnZmxvdycsIHN0YXRlLmZsb3dpbmcpO1xuICB3aGlsZSAoc3RhdGUuZmxvd2luZyAmJiBzdHJlYW0ucmVhZCgpICE9PSBudWxsKSB7fVxufVxuXG4vLyB3cmFwIGFuIG9sZC1zdHlsZSBzdHJlYW0gYXMgdGhlIGFzeW5jIGRhdGEgc291cmNlLlxuLy8gVGhpcyBpcyAqbm90KiBwYXJ0IG9mIHRoZSByZWFkYWJsZSBzdHJlYW0gaW50ZXJmYWNlLlxuLy8gSXQgaXMgYW4gdWdseSB1bmZvcnR1bmF0ZSBtZXNzIG9mIGhpc3RvcnkuXG5SZWFkYWJsZS5wcm90b3R5cGUud3JhcCA9IGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7XG4gICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7XG4gICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgX3RoaXMucHVzaChjaHVuayk7XG4gICAgfVxuXG4gICAgX3RoaXMucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IF90aGlzLnB1c2goY2h1bmspO1xuICAgIGlmICghcmV0KSB7XG4gICAgICBwYXVzZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLnBhdXNlKCk7XG4gICAgfVxuICB9KTtcblxuICAvLyBwcm94eSBhbGwgdGhlIG90aGVyIG1ldGhvZHMuXG4gIC8vIGltcG9ydGFudCB3aGVuIHdyYXBwaW5nIGZpbHRlcnMgYW5kIGR1cGxleGVzLlxuICBmb3IgKHZhciBpIGluIHN0cmVhbSkge1xuICAgIGlmICh0aGlzW2ldID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIHN0cmVhbVtpXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpc1tpXSA9IGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gc3RyZWFtW21ldGhvZF0uYXBwbHkoc3RyZWFtLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgICAgfShpKTtcbiAgICB9XG4gIH1cblxuICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwga1Byb3h5RXZlbnRzLmxlbmd0aDsgbisrKSB7XG4gICAgc3RyZWFtLm9uKGtQcm94eUV2ZW50c1tuXSwgdGhpcy5lbWl0LmJpbmQodGhpcywga1Byb3h5RXZlbnRzW25dKSk7XG4gIH1cblxuICAvLyB3aGVuIHdlIHRyeSB0byBjb25zdW1lIHNvbWUgbW9yZSBieXRlcywgc2ltcGx5IHVucGF1c2UgdGhlXG4gIC8vIHVuZGVybHlpbmcgc3RyZWFtLlxuICB0aGlzLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBfcmVhZCcsIG4pO1xuICAgIGlmIChwYXVzZWQpIHtcbiAgICAgIHBhdXNlZCA9IGZhbHNlO1xuICAgICAgc3RyZWFtLnJlc3VtZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZS5wcm90b3R5cGUsICdyZWFkYWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgcG5hLm5leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVuZFJlYWRhYmxlTlQoc3RhdGUsIHN0cmVhbSkge1xuICAvLyBDaGVjayB0aGF0IHdlIGRpZG4ndCBnZXQgb25lIGxhc3QgdW5zaGlmdC5cbiAgaWYgKCFzdGF0ZS5lbmRFbWl0dGVkICYmIHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIHN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIHBuYSA9IHJlcXVpcmUoJ3Byb2Nlc3MtbmV4dGljay1hcmdzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxuLy8gdW5kb2N1bWVudGVkIGNiKCkgQVBJLCBuZWVkZWQgZm9yIGNvcmUsIG5vdCBmb3IgcHVibGljIEFQSVxuZnVuY3Rpb24gZGVzdHJveShlcnIsIGNiKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIHJlYWRhYmxlRGVzdHJveWVkID0gdGhpcy5fcmVhZGFibGVTdGF0ZSAmJiB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZDtcbiAgdmFyIHdyaXRhYmxlRGVzdHJveWVkID0gdGhpcy5fd3JpdGFibGVTdGF0ZSAmJiB0aGlzLl93cml0YWJsZVN0YXRlLmRlc3Ryb3llZDtcblxuICBpZiAocmVhZGFibGVEZXN0cm95ZWQgfHwgd3JpdGFibGVEZXN0cm95ZWQpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycik7XG4gICAgfSBlbHNlIGlmIChlcnIgJiYgKCF0aGlzLl93cml0YWJsZVN0YXRlIHx8ICF0aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCkpIHtcbiAgICAgIHBuYS5uZXh0VGljayhlbWl0RXJyb3JOVCwgdGhpcywgZXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB3ZSBzZXQgZGVzdHJveWVkIHRvIHRydWUgYmVmb3JlIGZpcmluZyBlcnJvciBjYWxsYmFja3MgaW4gb3JkZXJcbiAgLy8gdG8gbWFrZSBpdCByZS1lbnRyYW5jZSBzYWZlIGluIGNhc2UgZGVzdHJveSgpIGlzIGNhbGxlZCB3aXRoaW4gY2FsbGJhY2tzXG5cbiAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUpIHtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHRydWU7XG4gIH1cblxuICAvLyBpZiB0aGlzIGlzIGEgZHVwbGV4IHN0cmVhbSBtYXJrIHRoZSB3cml0YWJsZSBwYXJ0IGFzIGRlc3Ryb3llZCBhcyB3ZWxsXG4gIGlmICh0aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB0cnVlO1xuICB9XG5cbiAgdGhpcy5fZGVzdHJveShlcnIgfHwgbnVsbCwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmICghY2IgJiYgZXJyKSB7XG4gICAgICBwbmEubmV4dFRpY2soZW1pdEVycm9yTlQsIF90aGlzLCBlcnIpO1xuICAgICAgaWYgKF90aGlzLl93cml0YWJsZVN0YXRlKSB7XG4gICAgICAgIF90aGlzLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjYikge1xuICAgICAgY2IoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiB1bmRlc3Ryb3koKSB7XG4gIGlmICh0aGlzLl9yZWFkYWJsZVN0YXRlKSB7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZGVkID0gZmFsc2U7XG4gICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5lbmRFbWl0dGVkID0gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdEVycm9yTlQoc2VsZiwgZXJyKSB7XG4gIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVzdHJveTogZGVzdHJveSxcbiAgdW5kZXN0cm95OiB1bmRlc3Ryb3lcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIEEgYml0IHNpbXBsZXIgdGhhbiByZWFkYWJsZSBzdHJlYW1zLlxuLy8gSW1wbGVtZW50IGFuIGFzeW5jIC5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYiksIGFuZCBpdCdsbCBoYW5kbGUgYWxsXG4vLyB0aGUgZHJhaW4gZXZlbnQgZW1pc3Npb24gYW5kIGJ1ZmZlcmluZy5cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKjxyZXBsYWNlbWVudD4qL1xuXG52YXIgcG5hID0gcmVxdWlyZSgncHJvY2Vzcy1uZXh0aWNrLWFyZ3MnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdyaXRhYmxlO1xuXG4vKiA8cmVwbGFjZW1lbnQ+ICovXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbi8vIEl0IHNlZW1zIGEgbGlua2VkIGxpc3QgYnV0IGl0IGlzIG5vdFxuLy8gdGhlcmUgd2lsbCBiZSBvbmx5IDIgb2YgdGhlc2UgZm9yIGVhY2ggc3RyZWFtXG5mdW5jdGlvbiBDb3JrZWRSZXF1ZXN0KHN0YXRlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5lbnRyeSA9IG51bGw7XG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgIG9uQ29ya2VkRmluaXNoKF90aGlzLCBzdGF0ZSk7XG4gIH07XG59XG4vKiA8L3JlcGxhY2VtZW50PiAqL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGFzeW5jV3JpdGUgPSAhcHJvY2Vzcy5icm93c2VyICYmIFsndjAuMTAnLCAndjAuOS4nXS5pbmRleE9mKHByb2Nlc3MudmVyc2lvbi5zbGljZSgwLCA1KSkgPiAtMSA/IHNldEltbWVkaWF0ZSA6IHBuYS5uZXh0VGljaztcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIER1cGxleDtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG5Xcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG4vKjxyZXBsYWNlbWVudD4qL1xudmFyIGludGVybmFsVXRpbCA9IHtcbiAgZGVwcmVjYXRlOiByZXF1aXJlKCd1dGlsLWRlcHJlY2F0ZScpXG59O1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgU3RyZWFtID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9zdHJlYW1zL3N0cmVhbScpO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbi8qPHJlcGxhY2VtZW50PiovXG5cbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlLWJ1ZmZlcicpLkJ1ZmZlcjtcbnZhciBPdXJVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXkgfHwgZnVuY3Rpb24gKCkge307XG5mdW5jdGlvbiBfdWludDhBcnJheVRvQnVmZmVyKGNodW5rKSB7XG4gIHJldHVybiBCdWZmZXIuZnJvbShjaHVuayk7XG59XG5mdW5jdGlvbiBfaXNVaW50OEFycmF5KG9iaikge1xuICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKG9iaikgfHwgb2JqIGluc3RhbmNlb2YgT3VyVWludDhBcnJheTtcbn1cblxuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBkZXN0cm95SW1wbCA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvc3RyZWFtcy9kZXN0cm95Jyk7XG5cbnV0aWwuaW5oZXJpdHMoV3JpdGFibGUsIFN0cmVhbSk7XG5cbmZ1bmN0aW9uIG5vcCgpIHt9XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIER1cGxleCA9IER1cGxleCB8fCByZXF1aXJlKCcuL19zdHJlYW1fZHVwbGV4Jyk7XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgLy8gRHVwbGV4IHN0cmVhbXMgYXJlIGJvdGggcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBidXQgc2hhcmVcbiAgLy8gdGhlIHNhbWUgb3B0aW9ucyBvYmplY3QuXG4gIC8vIEhvd2V2ZXIsIHNvbWUgY2FzZXMgcmVxdWlyZSBzZXR0aW5nIG9wdGlvbnMgdG8gZGlmZmVyZW50XG4gIC8vIHZhbHVlcyBmb3IgdGhlIHJlYWRhYmxlIGFuZCB0aGUgd3JpdGFibGUgc2lkZXMgb2YgdGhlIGR1cGxleCBzdHJlYW0uXG4gIC8vIFRoZXNlIG9wdGlvbnMgY2FuIGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgYXMgcmVhZGFibGVYWFggYW5kIHdyaXRhYmxlWFhYLlxuICB2YXIgaXNEdXBsZXggPSBzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXg7XG5cbiAgLy8gb2JqZWN0IHN0cmVhbSBmbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb3Igbm90IHRoaXMgc3RyZWFtXG4gIC8vIGNvbnRhaW5zIGJ1ZmZlcnMgb3Igb2JqZWN0cy5cbiAgdGhpcy5vYmplY3RNb2RlID0gISFvcHRpb25zLm9iamVjdE1vZGU7XG5cbiAgaWYgKGlzRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLndyaXRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlXG4gIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmXG4gIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKClcbiAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyaztcbiAgdmFyIHdyaXRhYmxlSHdtID0gb3B0aW9ucy53cml0YWJsZUhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG5cbiAgaWYgKGh3bSB8fCBod20gPT09IDApIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bTtlbHNlIGlmIChpc0R1cGxleCAmJiAod3JpdGFibGVId20gfHwgd3JpdGFibGVId20gPT09IDApKSB0aGlzLmhpZ2hXYXRlck1hcmsgPSB3cml0YWJsZUh3bTtlbHNlIHRoaXMuaGlnaFdhdGVyTWFyayA9IGRlZmF1bHRId207XG5cbiAgLy8gY2FzdCB0byBpbnRzLlxuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBNYXRoLmZsb29yKHRoaXMuaGlnaFdhdGVyTWFyayk7XG5cbiAgLy8gaWYgX2ZpbmFsIGhhcyBiZWVuIGNhbGxlZFxuICB0aGlzLmZpbmFsQ2FsbGVkID0gZmFsc2U7XG5cbiAgLy8gZHJhaW4gZXZlbnQgZmxhZy5cbiAgdGhpcy5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgLy8gYXQgdGhlIHN0YXJ0IG9mIGNhbGxpbmcgZW5kKClcbiAgdGhpcy5lbmRpbmcgPSBmYWxzZTtcbiAgLy8gd2hlbiBlbmQoKSBoYXMgYmVlbiBjYWxsZWQsIGFuZCByZXR1cm5lZFxuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIC8vIHdoZW4gJ2ZpbmlzaCcgaXMgZW1pdHRlZFxuICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gaGFzIGl0IGJlZW4gZGVzdHJveWVkXG4gIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG5cbiAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/XG4gIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZ1xuICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLlxuICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlO1xuICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7XG5cbiAgLy8gQ3J5cHRvIGlzIGtpbmQgb2Ygb2xkIGFuZCBjcnVzdHkuICBIaXN0b3JpY2FsbHksIGl0cyBkZWZhdWx0IHN0cmluZ1xuICAvLyBlbmNvZGluZyBpcyAnYmluYXJ5JyBzbyB3ZSBoYXZlIHRvIG1ha2UgdGhpcyBjb25maWd1cmFibGUuXG4gIC8vIEV2ZXJ5dGhpbmcgZWxzZSBpbiB0aGUgdW5pdmVyc2UgdXNlcyAndXRmOCcsIHRob3VnaC5cbiAgdGhpcy5kZWZhdWx0RW5jb2RpbmcgPSBvcHRpb25zLmRlZmF1bHRFbmNvZGluZyB8fCAndXRmOCc7XG5cbiAgLy8gbm90IGFuIGFjdHVhbCBidWZmZXIgd2Uga2VlcCB0cmFjayBvZiwgYnV0IGEgbWVhc3VyZW1lbnRcbiAgLy8gb2YgaG93IG11Y2ggd2UncmUgd2FpdGluZyB0byBnZXQgcHVzaGVkIHRvIHNvbWUgdW5kZXJseWluZ1xuICAvLyBzb2NrZXQgb3IgZmlsZS5cbiAgdGhpcy5sZW5ndGggPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuXG4gIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuXG4gIC8vIHdoZW4gdHJ1ZSBhbGwgd3JpdGVzIHdpbGwgYmUgYnVmZmVyZWQgdW50aWwgLnVuY29yaygpIGNhbGxcbiAgdGhpcy5jb3JrZWQgPSAwO1xuXG4gIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LFxuICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueVxuICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCBcImxhdGVyXCIgc2hvdWxkIGdlbmVyYWxseSBhbHNvXG4gIC8vIG5vdCBoYXBwZW4gYmVmb3JlIHRoZSBmaXJzdCB3cml0ZSBjYWxsLlxuICB0aGlzLnN5bmMgPSB0cnVlO1xuXG4gIC8vIGEgZmxhZyB0byBrbm93IGlmIHdlJ3JlIHByb2Nlc3NpbmcgcHJldmlvdXNseSBidWZmZXJlZCBpdGVtcywgd2hpY2hcbiAgLy8gbWF5IGNhbGwgdGhlIF93cml0ZSgpIGNhbGxiYWNrIGluIHRoZSBzYW1lIHRpY2ssIHNvIHRoYXQgd2UgZG9uJ3RcbiAgLy8gZW5kIHVwIGluIGFuIG92ZXJsYXBwZWQgb253cml0ZSBzaXR1YXRpb24uXG4gIHRoaXMuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYilcbiAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7XG4gICAgb253cml0ZShzdHJlYW0sIGVyKTtcbiAgfTtcblxuICAvLyB0aGUgY2FsbGJhY2sgdGhhdCB0aGUgdXNlciBzdXBwbGllcyB0byB3cml0ZShjaHVuayxlbmNvZGluZyxjYilcbiAgdGhpcy53cml0ZWNiID0gbnVsbDtcblxuICAvLyB0aGUgYW1vdW50IHRoYXQgaXMgYmVpbmcgd3JpdHRlbiB3aGVuIF93cml0ZSBpcyBjYWxsZWQuXG4gIHRoaXMud3JpdGVsZW4gPSAwO1xuXG4gIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcblxuICAvLyBudW1iZXIgb2YgcGVuZGluZyB1c2VyLXN1cHBsaWVkIHdyaXRlIGNhbGxiYWNrc1xuICAvLyB0aGlzIG11c3QgYmUgMCBiZWZvcmUgJ2ZpbmlzaCcgY2FuIGJlIGVtaXR0ZWRcbiAgdGhpcy5wZW5kaW5nY2IgPSAwO1xuXG4gIC8vIGVtaXQgcHJlZmluaXNoIGlmIHRoZSBvbmx5IHRoaW5nIHdlJ3JlIHdhaXRpbmcgZm9yIGlzIF93cml0ZSBjYnNcbiAgLy8gVGhpcyBpcyByZWxldmFudCBmb3Igc3luY2hyb25vdXMgVHJhbnNmb3JtIHN0cmVhbXNcbiAgdGhpcy5wcmVmaW5pc2hlZCA9IGZhbHNlO1xuXG4gIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluXG4gIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7XG5cbiAgLy8gY291bnQgYnVmZmVyZWQgcmVxdWVzdHNcbiAgdGhpcy5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG5cbiAgLy8gYWxsb2NhdGUgdGhlIGZpcnN0IENvcmtlZFJlcXVlc3QsIHRoZXJlIGlzIGFsd2F5c1xuICAvLyBvbmUgYWxsb2NhdGVkIGFuZCBmcmVlIHRvIHVzZSwgYW5kIHdlIG1haW50YWluIGF0IG1vc3QgdHdvXG4gIHRoaXMuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3QodGhpcyk7XG59XG5cbldyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlU3RhdGUucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICAgICAgZ2V0OiBpbnRlcm5hbFV0aWwuZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QnVmZmVyKCk7XG4gICAgICB9LCAnX3dyaXRhYmxlU3RhdGUuYnVmZmVyIGlzIGRlcHJlY2F0ZWQuIFVzZSBfd3JpdGFibGVTdGF0ZS5nZXRCdWZmZXIgJyArICdpbnN0ZWFkLicsICdERVAwMDAzJylcbiAgICB9KTtcbiAgfSBjYXRjaCAoXykge31cbn0pKCk7XG5cbi8vIFRlc3QgX3dyaXRhYmxlU3RhdGUgZm9yIGluaGVyaXRhbmNlIHRvIGFjY291bnQgZm9yIER1cGxleCBzdHJlYW1zLFxuLy8gd2hvc2UgcHJvdG90eXBlIGNoYWluIG9ubHkgcG9pbnRzIHRvIFJlYWRhYmxlLlxudmFyIHJlYWxIYXNJbnN0YW5jZTtcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5oYXNJbnN0YW5jZSAmJiB0eXBlb2YgRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgcmVhbEhhc0luc3RhbmNlID0gRnVuY3Rpb24ucHJvdG90eXBlW1N5bWJvbC5oYXNJbnN0YW5jZV07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZSwgU3ltYm9sLmhhc0luc3RhbmNlLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmIChyZWFsSGFzSW5zdGFuY2UuY2FsbCh0aGlzLCBvYmplY3QpKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmICh0aGlzICE9PSBXcml0YWJsZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5fd3JpdGFibGVTdGF0ZSBpbnN0YW5jZW9mIFdyaXRhYmxlU3RhdGU7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIHJlYWxIYXNJbnN0YW5jZSA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgdGhpcztcbiAgfTtcbn1cblxuZnVuY3Rpb24gV3JpdGFibGUob3B0aW9ucykge1xuICBEdXBsZXggPSBEdXBsZXggfHwgcmVxdWlyZSgnLi9fc3RyZWFtX2R1cGxleCcpO1xuXG4gIC8vIFdyaXRhYmxlIGN0b3IgaXMgYXBwbGllZCB0byBEdXBsZXhlcywgdG9vLlxuICAvLyBgcmVhbEhhc0luc3RhbmNlYCBpcyBuZWNlc3NhcnkgYmVjYXVzZSB1c2luZyBwbGFpbiBgaW5zdGFuY2VvZmBcbiAgLy8gd291bGQgcmV0dXJuIGZhbHNlLCBhcyBubyBgX3dyaXRhYmxlU3RhdGVgIHByb3BlcnR5IGlzIGF0dGFjaGVkLlxuXG4gIC8vIFRyeWluZyB0byB1c2UgdGhlIGN1c3RvbSBgaW5zdGFuY2VvZmAgZm9yIFdyaXRhYmxlIGhlcmUgd2lsbCBhbHNvIGJyZWFrIHRoZVxuICAvLyBOb2RlLmpzIExhenlUcmFuc2Zvcm0gaW1wbGVtZW50YXRpb24sIHdoaWNoIGhhcyBhIG5vbi10cml2aWFsIGdldHRlciBmb3JcbiAgLy8gYF93cml0YWJsZVN0YXRlYCB0aGF0IHdvdWxkIGxlYWQgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICBpZiAoIXJlYWxIYXNJbnN0YW5jZS5jYWxsKFdyaXRhYmxlLCB0aGlzKSAmJiAhKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSB7XG4gICAgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcbiAgfVxuXG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTtcblxuICAvLyBsZWdhY3kuXG4gIHRoaXMud3JpdGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRlID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZSA9IG9wdGlvbnMud3JpdGU7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB0aGlzLl9kZXN0cm95ID0gb3B0aW9ucy5kZXN0cm95O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZpbmFsID09PSAnZnVuY3Rpb24nKSB0aGlzLl9maW5hbCA9IG9wdGlvbnMuZmluYWw7XG4gIH1cblxuICBTdHJlYW0uY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbn1cblxuLy8gQ2hlY2tzIHRoYXQgYSB1c2VyLXN1cHBsaWVkIGNodW5rIGlzIHZhbGlkLCBlc3BlY2lhbGx5IGZvciB0aGUgcGFydGljdWxhclxuLy8gbW9kZSB0aGUgc3RyZWFtIGlzIGluLiBDdXJyZW50bHkgdGhpcyBtZWFucyB0aGF0IGBudWxsYCBpcyBuZXZlciBhY2NlcHRlZFxuLy8gYW5kIHVuZGVmaW5lZC9ub24tc3RyaW5nIHZhbHVlcyBhcmUgb25seSBhbGxvd2VkIGluIG9iamVjdCBtb2RlLlxuZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHtcbiAgdmFyIHZhbGlkID0gdHJ1ZTtcbiAgdmFyIGVyID0gZmFsc2U7XG5cbiAgaWYgKGNodW5rID09PSBudWxsKSB7XG4gICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpO1xuICB9XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICBwbmEubmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuICB2YXIgaXNCdWYgPSAhc3RhdGUub2JqZWN0TW9kZSAmJiBfaXNVaW50OEFycmF5KGNodW5rKTtcblxuICBpZiAoaXNCdWYgJiYgIUJ1ZmZlci5pc0J1ZmZlcihjaHVuaykpIHtcbiAgICBjaHVuayA9IF91aW50OEFycmF5VG9CdWZmZXIoY2h1bmspO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGlzQnVmKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmIChpc0J1ZiB8fCB2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgaXNCdWYsIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIHN0YXRlLmNvcmtlZCsrO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnVuY29yayA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkLS07XG5cbiAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG5cbldyaXRhYmxlLnByb3RvdHlwZS5zZXREZWZhdWx0RW5jb2RpbmcgPSBmdW5jdGlvbiBzZXREZWZhdWx0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgLy8gbm9kZTo6UGFyc2VFbmNvZGluZygpIHJlcXVpcmVzIGxvd2VyIGNhc2UuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSBlbmNvZGluZyA9IGVuY29kaW5nLnRvTG93ZXJDYXNlKCk7XG4gIGlmICghKFsnaGV4JywgJ3V0ZjgnLCAndXRmLTgnLCAnYXNjaWknLCAnYmluYXJ5JywgJ2Jhc2U2NCcsICd1Y3MyJywgJ3Vjcy0yJywgJ3V0ZjE2bGUnLCAndXRmLTE2bGUnLCAncmF3J10uaW5kZXhPZigoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKSkgPiAtMSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyk7XG4gIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVmYXVsdEVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZykge1xuICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgc3RhdGUuZGVjb2RlU3RyaW5ncyAhPT0gZmFsc2UgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykge1xuICAgIGNodW5rID0gQnVmZmVyLmZyb20oY2h1bmssIGVuY29kaW5nKTtcbiAgfVxuICByZXR1cm4gY2h1bms7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUhpZ2hXYXRlck1hcmsnLCB7XG4gIC8vIG1ha2luZyBpdCBleHBsaWNpdCB0aGlzIHByb3BlcnR5IGlzIG5vdCBlbnVtZXJhYmxlXG4gIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHNvbWUgcHJvdG90eXBlIG1hbmlwdWxhdGlvbiBpblxuICAvLyB1c2VybGFuZCB3aWxsIGZhaWxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl93cml0YWJsZVN0YXRlLmhpZ2hXYXRlck1hcms7XG4gIH1cbn0pO1xuXG4vLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXNcbi8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlXG4vLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLlxuZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBpc0J1ZiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBpZiAoIWlzQnVmKSB7XG4gICAgdmFyIG5ld0NodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7XG4gICAgaWYgKGNodW5rICE9PSBuZXdDaHVuaykge1xuICAgICAgaXNCdWYgPSB0cnVlO1xuICAgICAgZW5jb2RpbmcgPSAnYnVmZmVyJztcbiAgICAgIGNodW5rID0gbmV3Q2h1bms7XG4gICAgfVxuICB9XG4gIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICBzdGF0ZS5sZW5ndGggKz0gbGVuO1xuXG4gIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrO1xuICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS5cbiAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7XG5cbiAgaWYgKHN0YXRlLndyaXRpbmcgfHwgc3RhdGUuY29ya2VkKSB7XG4gICAgdmFyIGxhc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSB7XG4gICAgICBjaHVuazogY2h1bmssXG4gICAgICBlbmNvZGluZzogZW5jb2RpbmcsXG4gICAgICBpc0J1ZjogaXNCdWYsXG4gICAgICBjYWxsYmFjazogY2IsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgICBpZiAobGFzdCkge1xuICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICB9XG4gICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTtcbiAgfSBlbHNlIHtcbiAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB3cml0ZXYsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBzdGF0ZS53cml0ZWxlbiA9IGxlbjtcbiAgc3RhdGUud3JpdGVjYiA9IGNiO1xuICBzdGF0ZS53cml0aW5nID0gdHJ1ZTtcbiAgc3RhdGUuc3luYyA9IHRydWU7XG4gIGlmICh3cml0ZXYpIHN0cmVhbS5fd3JpdGV2KGNodW5rLCBzdGF0ZS5vbndyaXRlKTtlbHNlIHN0cmVhbS5fd3JpdGUoY2h1bmssIGVuY29kaW5nLCBzdGF0ZS5vbndyaXRlKTtcbiAgc3RhdGUuc3luYyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7XG4gIC0tc3RhdGUucGVuZGluZ2NiO1xuXG4gIGlmIChzeW5jKSB7XG4gICAgLy8gZGVmZXIgdGhlIGNhbGxiYWNrIGlmIHdlIGFyZSBiZWluZyBjYWxsZWQgc3luY2hyb25vdXNseVxuICAgIC8vIHRvIGF2b2lkIHBpbGluZyB1cCB0aGluZ3Mgb24gdGhlIHN0YWNrXG4gICAgcG5hLm5leHRUaWNrKGNiLCBlcik7XG4gICAgLy8gdGhpcyBjYW4gZW1pdCBmaW5pc2gsIGFuZCBpdCB3aWxsIGFsd2F5cyBoYXBwZW5cbiAgICAvLyBhZnRlciBlcnJvclxuICAgIHBuYS5uZXh0VGljayhmaW5pc2hNYXliZSwgc3RyZWFtLCBzdGF0ZSk7XG4gICAgc3RyZWFtLl93cml0YWJsZVN0YXRlLmVycm9yRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRoZSBjYWxsZXIgZXhwZWN0IHRoaXMgdG8gaGFwcGVuIGJlZm9yZSBpZlxuICAgIC8vIGl0IGlzIGFzeW5jXG4gICAgY2IoZXIpO1xuICAgIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICAvLyB0aGlzIGNhbiBlbWl0IGZpbmlzaCwgYnV0IGZpbmlzaCBtdXN0XG4gICAgLy8gYWx3YXlzIGZvbGxvdyBlcnJvclxuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICBhc3luY1dyaXRlKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYikge1xuICBpZiAoIWZpbmlzaGVkKSBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSk7XG4gIHN0YXRlLnBlbmRpbmdjYi0tO1xuICBjYigpO1xuICBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKTtcbn1cblxuLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3Rcbi8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm5cbi8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuXG5mdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikge1xuICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlO1xuICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpO1xuICB9XG59XG5cbi8vIGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGluIHRoZSBidWZmZXIgd2FpdGluZywgdGhlbiBwcm9jZXNzIGl0XG5mdW5jdGlvbiBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKSB7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSB0cnVlO1xuICB2YXIgZW50cnkgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3Q7XG5cbiAgaWYgKHN0cmVhbS5fd3JpdGV2ICYmIGVudHJ5ICYmIGVudHJ5Lm5leHQpIHtcbiAgICAvLyBGYXN0IGNhc2UsIHdyaXRlIGV2ZXJ5dGhpbmcgdXNpbmcgX3dyaXRldigpXG4gICAgdmFyIGwgPSBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudDtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5KGwpO1xuICAgIHZhciBob2xkZXIgPSBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWU7XG4gICAgaG9sZGVyLmVudHJ5ID0gZW50cnk7XG5cbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBhbGxCdWZmZXJzID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGlmICghZW50cnkuaXNCdWYpIGFsbEJ1ZmZlcnMgPSBmYWxzZTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICAgIGJ1ZmZlci5hbGxCdWZmZXJzID0gYWxsQnVmZmVycztcblxuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTtcblxuICAgIC8vIGRvV3JpdGUgaXMgYWxtb3N0IGFsd2F5cyBhc3luYywgZGVmZXIgdGhlc2UgdG8gc2F2ZSBhIGJpdCBvZiB0aW1lXG4gICAgLy8gYXMgdGhlIGhvdCBwYXRoIGVuZHMgd2l0aCBkb1dyaXRlXG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKGhvbGRlci5uZXh0KSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBob2xkZXIubmV4dDtcbiAgICAgIGhvbGRlci5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlID0gbmV3IENvcmtlZFJlcXVlc3Qoc3RhdGUpO1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gU2xvdyBjYXNlLCB3cml0ZSBjaHVua3Mgb25lLWJ5LW9uZVxuICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgdmFyIGNodW5rID0gZW50cnkuY2h1bms7XG4gICAgICB2YXIgZW5jb2RpbmcgPSBlbnRyeS5lbmNvZGluZztcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoO1xuXG4gICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQtLTtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gZW50cnk7XG4gIHN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG5ldyBFcnJvcignX3dyaXRlKCkgaXMgbm90IGltcGxlbWVudGVkJykpO1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsO1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcblxuICBpZiAodHlwZW9mIGNodW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBjaHVuaztcbiAgICBjaHVuayA9IG51bGw7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNiID0gZW5jb2Rpbmc7XG4gICAgZW5jb2RpbmcgPSBudWxsO1xuICB9XG5cbiAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTtcblxuICAvLyAuZW5kKCkgZnVsbHkgdW5jb3Jrc1xuICBpZiAoc3RhdGUuY29ya2VkKSB7XG4gICAgc3RhdGUuY29ya2VkID0gMTtcbiAgICB0aGlzLnVuY29yaygpO1xuICB9XG5cbiAgLy8gaWdub3JlIHVubmVjZXNzYXJ5IGVuZCgpIGNhbGxzLlxuICBpZiAoIXN0YXRlLmVuZGluZyAmJiAhc3RhdGUuZmluaXNoZWQpIGVuZFdyaXRhYmxlKHRoaXMsIHN0YXRlLCBjYik7XG59O1xuXG5mdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7XG59XG5mdW5jdGlvbiBjYWxsRmluYWwoc3RyZWFtLCBzdGF0ZSkge1xuICBzdHJlYW0uX2ZpbmFsKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgIH1cbiAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgc3RyZWFtLmVtaXQoJ3ByZWZpbmlzaCcpO1xuICAgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucHJlZmluaXNoZWQgJiYgIXN0YXRlLmZpbmFsQ2FsbGVkKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJlYW0uX2ZpbmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICAgIHN0YXRlLmZpbmFsQ2FsbGVkID0gdHJ1ZTtcbiAgICAgIHBuYS5uZXh0VGljayhjYWxsRmluYWwsIHN0cmVhbSwgc3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wcmVmaW5pc2hlZCA9IHRydWU7XG4gICAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpIHtcbiAgdmFyIG5lZWQgPSBuZWVkRmluaXNoKHN0YXRlKTtcbiAgaWYgKG5lZWQpIHtcbiAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7XG4gICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkge1xuICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlO1xuICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgcG5hLm5leHRUaWNrKGNiKTtlbHNlIHN0cmVhbS5vbmNlKCdmaW5pc2gnLCBjYik7XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gb25Db3JrZWRGaW5pc2goY29ya1JlcSwgc3RhdGUsIGVycikge1xuICB2YXIgZW50cnkgPSBjb3JrUmVxLmVudHJ5O1xuICBjb3JrUmVxLmVudHJ5ID0gbnVsbDtcbiAgd2hpbGUgKGVudHJ5KSB7XG4gICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7XG4gICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgY2IoZXJyKTtcbiAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gIH1cbiAgaWYgKHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSkge1xuICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gY29ya1JlcTtcbiAgfSBlbHNlIHtcbiAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBjb3JrUmVxO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZS5wcm90b3R5cGUsICdkZXN0cm95ZWQnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIHdlIGlnbm9yZSB0aGUgdmFsdWUgaWYgdGhlIHN0cmVhbVxuICAgIC8vIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCB5ZXRcbiAgICBpZiAoIXRoaXMuX3dyaXRhYmxlU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB0aGUgdXNlciBpcyBleHBsaWNpdGx5XG4gICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkXG4gICAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWQgPSB2YWx1ZTtcbiAgfVxufSk7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZGVzdHJveUltcGwuZGVzdHJveTtcbldyaXRhYmxlLnByb3RvdHlwZS5fdW5kZXN0cm95ID0gZGVzdHJveUltcGwudW5kZXN0cm95O1xuV3JpdGFibGUucHJvdG90eXBlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVyciwgY2IpIHtcbiAgdGhpcy5lbmQoKTtcbiAgY2IoZXJyKTtcbn07IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgdHJhbnNmb3JtIHN0cmVhbSBpcyBhIHJlYWRhYmxlL3dyaXRhYmxlIHN0cmVhbSB3aGVyZSB5b3UgZG9cbi8vIHNvbWV0aGluZyB3aXRoIHRoZSBkYXRhLiAgU29tZXRpbWVzIGl0J3MgY2FsbGVkIGEgXCJmaWx0ZXJcIixcbi8vIGJ1dCB0aGF0J3Mgbm90IGEgZ3JlYXQgbmFtZSBmb3IgaXQsIHNpbmNlIHRoYXQgaW1wbGllcyBhIHRoaW5nIHdoZXJlXG4vLyBzb21lIGJpdHMgcGFzcyB0aHJvdWdoLCBhbmQgb3RoZXJzIGFyZSBzaW1wbHkgaWdub3JlZC4gIChUaGF0IHdvdWxkXG4vLyBiZSBhIHZhbGlkIGV4YW1wbGUgb2YgYSB0cmFuc2Zvcm0sIG9mIGNvdXJzZS4pXG4vL1xuLy8gV2hpbGUgdGhlIG91dHB1dCBpcyBjYXVzYWxseSByZWxhdGVkIHRvIHRoZSBpbnB1dCwgaXQncyBub3QgYVxuLy8gbmVjZXNzYXJpbHkgc3ltbWV0cmljIG9yIHN5bmNocm9ub3VzIHRyYW5zZm9ybWF0aW9uLiAgRm9yIGV4YW1wbGUsXG4vLyBhIHpsaWIgc3RyZWFtIG1pZ2h0IHRha2UgbXVsdGlwbGUgcGxhaW4tdGV4dCB3cml0ZXMoKSwgYW5kIHRoZW5cbi8vIGVtaXQgYSBzaW5nbGUgY29tcHJlc3NlZCBjaHVuayBzb21lIHRpbWUgaW4gdGhlIGZ1dHVyZS5cbi8vXG4vLyBIZXJlJ3MgaG93IHRoaXMgd29ya3M6XG4vL1xuLy8gVGhlIFRyYW5zZm9ybSBzdHJlYW0gaGFzIGFsbCB0aGUgYXNwZWN0cyBvZiB0aGUgcmVhZGFibGUgYW5kIHdyaXRhYmxlXG4vLyBzdHJlYW0gY2xhc3Nlcy4gIFdoZW4geW91IHdyaXRlKGNodW5rKSwgdGhhdCBjYWxscyBfd3JpdGUoY2h1bmssY2IpXG4vLyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBmYWxzZSBpZiB0aGVyZSdzIGEgbG90IG9mIHBlbmRpbmcgd3JpdGVzXG4vLyBidWZmZXJlZCB1cC4gIFdoZW4geW91IGNhbGwgcmVhZCgpLCB0aGF0IGNhbGxzIF9yZWFkKG4pIHVudGlsXG4vLyB0aGVyZSdzIGVub3VnaCBwZW5kaW5nIHJlYWRhYmxlIGRhdGEgYnVmZmVyZWQgdXAuXG4vL1xuLy8gSW4gYSB0cmFuc2Zvcm0gc3RyZWFtLCB0aGUgd3JpdHRlbiBkYXRhIGlzIHBsYWNlZCBpbiBhIGJ1ZmZlci4gIFdoZW5cbi8vIF9yZWFkKG4pIGlzIGNhbGxlZCwgaXQgdHJhbnNmb3JtcyB0aGUgcXVldWVkIHVwIGRhdGEsIGNhbGxpbmcgdGhlXG4vLyBidWZmZXJlZCBfd3JpdGUgY2IncyBhcyBpdCBjb25zdW1lcyBjaHVua3MuICBJZiBjb25zdW1pbmcgYSBzaW5nbGVcbi8vIHdyaXR0ZW4gY2h1bmsgd291bGQgcmVzdWx0IGluIG11bHRpcGxlIG91dHB1dCBjaHVua3MsIHRoZW4gdGhlIGZpcnN0XG4vLyBvdXRwdXR0ZWQgYml0IGNhbGxzIHRoZSByZWFkY2IsIGFuZCBzdWJzZXF1ZW50IGNodW5rcyBqdXN0IGdvIGludG9cbi8vIHRoZSByZWFkIGJ1ZmZlciwgYW5kIHdpbGwgY2F1c2UgaXQgdG8gZW1pdCAncmVhZGFibGUnIGlmIG5lY2Vzc2FyeS5cbi8vXG4vLyBUaGlzIHdheSwgYmFjay1wcmVzc3VyZSBpcyBhY3R1YWxseSBkZXRlcm1pbmVkIGJ5IHRoZSByZWFkaW5nIHNpZGUsXG4vLyBzaW5jZSBfcmVhZCBoYXMgdG8gYmUgY2FsbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcgYSBuZXcgY2h1bmsuICBIb3dldmVyLFxuLy8gYSBwYXRob2xvZ2ljYWwgaW5mbGF0ZSB0eXBlIG9mIHRyYW5zZm9ybSBjYW4gY2F1c2UgZXhjZXNzaXZlIGJ1ZmZlcmluZ1xuLy8gaGVyZS4gIEZvciBleGFtcGxlLCBpbWFnaW5lIGEgc3RyZWFtIHdoZXJlIGV2ZXJ5IGJ5dGUgb2YgaW5wdXQgaXNcbi8vIGludGVycHJldGVkIGFzIGFuIGludGVnZXIgZnJvbSAwLTI1NSwgYW5kIHRoZW4gcmVzdWx0cyBpbiB0aGF0IG1hbnlcbi8vIGJ5dGVzIG9mIG91dHB1dC4gIFdyaXRpbmcgdGhlIDQgYnl0ZXMge2ZmLGZmLGZmLGZmfSB3b3VsZCByZXN1bHQgaW5cbi8vIDFrYiBvZiBkYXRhIGJlaW5nIG91dHB1dC4gIEluIHRoaXMgY2FzZSwgeW91IGNvdWxkIHdyaXRlIGEgdmVyeSBzbWFsbFxuLy8gYW1vdW50IG9mIGlucHV0LCBhbmQgZW5kIHVwIHdpdGggYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiBvdXRwdXQuICBJblxuLy8gc3VjaCBhIHBhdGhvbG9naWNhbCBpbmZsYXRpbmcgbWVjaGFuaXNtLCB0aGVyZSdkIGJlIG5vIHdheSB0byB0ZWxsXG4vLyB0aGUgc3lzdGVtIHRvIHN0b3AgZG9pbmcgdGhlIHRyYW5zZm9ybS4gIEEgc2luZ2xlIDRNQiB3cml0ZSBjb3VsZFxuLy8gY2F1c2UgdGhlIHN5c3RlbSB0byBydW4gb3V0IG9mIG1lbW9yeS5cbi8vXG4vLyBIb3dldmVyLCBldmVuIGluIHN1Y2ggYSBwYXRob2xvZ2ljYWwgY2FzZSwgb25seSBhIHNpbmdsZSB3cml0dGVuIGNodW5rXG4vLyB3b3VsZCBiZSBjb25zdW1lZCwgYW5kIHRoZW4gdGhlIHJlc3Qgd291bGQgd2FpdCAodW4tdHJhbnNmb3JtZWQpIHVudGlsXG4vLyB0aGUgcmVzdWx0cyBvZiB0aGUgcHJldmlvdXMgdHJhbnNmb3JtZWQgY2h1bmsgd2VyZSBjb25zdW1lZC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxudmFyIER1cGxleCA9IHJlcXVpcmUoJy4vX3N0cmVhbV9kdXBsZXgnKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gT2JqZWN0LmNyZWF0ZShyZXF1aXJlKCdjb3JlLXV0aWwtaXMnKSk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gYWZ0ZXJUcmFuc2Zvcm0oZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLnRyYW5zZm9ybWluZyA9IGZhbHNlO1xuXG4gIHZhciBjYiA9IHRzLndyaXRlY2I7XG5cbiAgaWYgKCFjYikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCd3cml0ZSBjYWxsYmFjayBjYWxsZWQgbXVsdGlwbGUgdGltZXMnKSk7XG4gIH1cblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT0gbnVsbCkgLy8gc2luZ2xlIGVxdWFscyBjaGVjayBmb3IgYm90aCBgbnVsbGAgYW5kIGB1bmRlZmluZWRgXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuXG4gIGNiKGVyKTtcblxuICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHRoaXMuX3JlYWQocnMuaGlnaFdhdGVyTWFyayk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRyYW5zZm9ybSkpIHJldHVybiBuZXcgVHJhbnNmb3JtKG9wdGlvbnMpO1xuXG4gIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlID0ge1xuICAgIGFmdGVyVHJhbnNmb3JtOiBhZnRlclRyYW5zZm9ybS5iaW5kKHRoaXMpLFxuICAgIG5lZWRUcmFuc2Zvcm06IGZhbHNlLFxuICAgIHRyYW5zZm9ybWluZzogZmFsc2UsXG4gICAgd3JpdGVjYjogbnVsbCxcbiAgICB3cml0ZWNodW5rOiBudWxsLFxuICAgIHdyaXRlZW5jb2Rpbmc6IG51bGxcbiAgfTtcblxuICAvLyBzdGFydCBvdXQgYXNraW5nIGZvciBhIHJlYWRhYmxlIGV2ZW50IG9uY2UgZGF0YSBpcyB0cmFuc2Zvcm1lZC5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gIC8vIHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIF9yZWFkIG1ldGhvZCwgYW5kIGRvbmUgdGhlIG90aGVyIHRoaW5nc1xuICAvLyB0aGF0IFJlYWRhYmxlIHdhbnRzIGJlZm9yZSB0aGUgZmlyc3QgX3JlYWQgY2FsbCwgc28gdW5zZXQgdGhlXG4gIC8vIHN5bmMgZ3VhcmQgZmxhZy5cbiAgdGhpcy5fcmVhZGFibGVTdGF0ZS5zeW5jID0gZmFsc2U7XG5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoO1xuICB9XG5cbiAgLy8gV2hlbiB0aGUgd3JpdGFibGUgc2lkZSBmaW5pc2hlcywgdGhlbiBmbHVzaCBvdXQgYW55dGhpbmcgcmVtYWluaW5nLlxuICB0aGlzLm9uKCdwcmVmaW5pc2gnLCBwcmVmaW5pc2gpO1xufVxuXG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuX2ZsdXNoKGZ1bmN0aW9uIChlciwgZGF0YSkge1xuICAgICAgZG9uZShfdGhpcywgZXIsIGRhdGEpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGRvbmUodGhpcywgbnVsbCwgbnVsbCk7XG4gIH1cbn1cblxuVHJhbnNmb3JtLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZS5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHJldHVybiBEdXBsZXgucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZW5jb2RpbmcpO1xufTtcblxuLy8gVGhpcyBpcyB0aGUgcGFydCB3aGVyZSB5b3UgZG8gc3R1ZmYhXG4vLyBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uIGluIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyAnY2h1bmsnIGlzIGFuIGlucHV0IGNodW5rLlxuLy9cbi8vIENhbGwgYHB1c2gobmV3Q2h1bmspYCB0byBwYXNzIGFsb25nIHRyYW5zZm9ybWVkIG91dHB1dFxuLy8gdG8gdGhlIHJlYWRhYmxlIHNpZGUuICBZb3UgbWF5IGNhbGwgJ3B1c2gnIHplcm8gb3IgbW9yZSB0aW1lcy5cbi8vXG4vLyBDYWxsIGBjYihlcnIpYCB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoaXMgY2h1bmsuICBJZiB5b3UgcGFzc1xuLy8gYW4gZXJyb3IsIHRoZW4gdGhhdCdsbCBwdXQgdGhlIGh1cnQgb24gdGhlIHdob2xlIG9wZXJhdGlvbi4gIElmIHlvdVxuLy8gbmV2ZXIgY2FsbCBjYigpLCB0aGVuIHlvdSdsbCBuZXZlciBnZXQgYW5vdGhlciBjaHVuay5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRocm93IG5ldyBFcnJvcignX3RyYW5zZm9ybSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMud3JpdGVjYiA9IGNiO1xuICB0cy53cml0ZWNodW5rID0gY2h1bms7XG4gIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHtcbiAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspO1xuICB9XG59O1xuXG4vLyBEb2Vzbid0IG1hdHRlciB3aGF0IHRoZSBhcmdzIGFyZSBoZXJlLlxuLy8gX3RyYW5zZm9ybSBkb2VzIGFsbCB0aGUgd29yay5cbi8vIFRoYXQgd2UgZ290IGhlcmUgbWVhbnMgdGhhdCB0aGUgcmVhZGFibGUgc2lkZSB3YW50cyBtb3JlIGRhdGEuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG5cbiAgaWYgKHRzLndyaXRlY2h1bmsgIT09IG51bGwgJiYgdHMud3JpdGVjYiAmJiAhdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdHMudHJhbnNmb3JtaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl90cmFuc2Zvcm0odHMud3JpdGVjaHVuaywgdHMud3JpdGVlbmNvZGluZywgdHMuYWZ0ZXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG1hcmsgdGhhdCB3ZSBuZWVkIGEgdHJhbnNmb3JtLCBzbyB0aGF0IGFueSBkYXRhIHRoYXQgY29tZXMgaW5cbiAgICAvLyB3aWxsIGdldCBwcm9jZXNzZWQsIG5vdyB0aGF0IHdlJ3ZlIGFza2VkIGZvciBpdC5cbiAgICB0cy5uZWVkVHJhbnNmb3JtID0gdHJ1ZTtcbiAgfVxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNiKSB7XG4gIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gIER1cGxleC5wcm90b3R5cGUuX2Rlc3Ryb3kuY2FsbCh0aGlzLCBlcnIsIGZ1bmN0aW9uIChlcnIyKSB7XG4gICAgY2IoZXJyMik7XG4gICAgX3RoaXMyLmVtaXQoJ2Nsb3NlJyk7XG4gIH0pO1xufTtcblxuZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7XG4gIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcblxuICBpZiAoZGF0YSAhPSBudWxsKSAvLyBzaW5nbGUgZXF1YWxzIGNoZWNrIGZvciBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGBcbiAgICBzdHJlYW0ucHVzaChkYXRhKTtcblxuICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zXG4gIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZFxuICBpZiAoc3RyZWFtLl93cml0YWJsZVN0YXRlLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gd3MubGVuZ3RoICE9IDAnKTtcblxuICBpZiAoc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZS50cmFuc2Zvcm1pbmcpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHN0aWxsIHRyYW5zZm9ybWluZycpO1xuXG4gIHJldHVybiBzdHJlYW0ucHVzaChudWxsKTtcbn0iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBiYXNlNjRWTFEgPSByZXF1aXJlKCcuL2Jhc2U2NC12bHEnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xudmFyIE1hcHBpbmdMaXN0ID0gcmVxdWlyZSgnLi9tYXBwaW5nLWxpc3QnKS5NYXBwaW5nTGlzdDtcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiB0aGUgU291cmNlTWFwR2VuZXJhdG9yIHJlcHJlc2VudHMgYSBzb3VyY2UgbWFwIHdoaWNoIGlzXG4gKiBiZWluZyBidWlsdCBpbmNyZW1lbnRhbGx5LiBZb3UgbWF5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZ1xuICogcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZmlsZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBnZW5lcmF0ZWQgc291cmNlLlxuICogICAtIHNvdXJjZVJvb3Q6IEEgcm9vdCBmb3IgYWxsIHJlbGF0aXZlIFVSTHMgaW4gdGhpcyBzb3VyY2UgbWFwLlxuICovXG5mdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpIHtcbiAgaWYgKCFhQXJncykge1xuICAgIGFBcmdzID0ge307XG4gIH1cbiAgdGhpcy5fZmlsZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnZmlsZScsIG51bGwpO1xuICB0aGlzLl9zb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2VSb290JywgbnVsbCk7XG4gIHRoaXMuX3NraXBWYWxpZGF0aW9uID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdza2lwVmFsaWRhdGlvbicsIGZhbHNlKTtcbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9tYXBwaW5ncyA9IG5ldyBNYXBwaW5nTGlzdCgpO1xuICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBudWxsO1xufVxuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNvdXJjZU1hcEdlbmVyYXRvciBiYXNlZCBvbiBhIFNvdXJjZU1hcENvbnN1bWVyXG4gKlxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IuZnJvbVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9mcm9tU291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lcikge1xuICAgIHZhciBzb3VyY2VSb290ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZVJvb3Q7XG4gICAgdmFyIGdlbmVyYXRvciA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3Ioe1xuICAgICAgZmlsZTogYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUsXG4gICAgICBzb3VyY2VSb290OiBzb3VyY2VSb290XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLmVhY2hNYXBwaW5nKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICB2YXIgbmV3TWFwcGluZyA9IHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgbmV3TWFwcGluZy5zb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBuZXdNYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIH1cblxuICAgICAgICBuZXdNYXBwaW5nLm9yaWdpbmFsID0ge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIGNvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtblxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5ld01hcHBpbmcubmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBnZW5lcmF0b3IuYWRkTWFwcGluZyhuZXdNYXBwaW5nKTtcbiAgICB9KTtcbiAgICBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uIChzb3VyY2VGaWxlKSB7XG4gICAgICB2YXIgc291cmNlUmVsYXRpdmUgPSBzb3VyY2VGaWxlO1xuICAgICAgaWYgKHNvdXJjZVJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgc291cmNlUmVsYXRpdmUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWdlbmVyYXRvci5fc291cmNlcy5oYXMoc291cmNlUmVsYXRpdmUpKSB7XG4gICAgICAgIGdlbmVyYXRvci5fc291cmNlcy5hZGQoc291cmNlUmVsYXRpdmUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGVudCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VDb250ZW50Rm9yKHNvdXJjZUZpbGUpO1xuICAgICAgaWYgKGNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgICBnZW5lcmF0b3Iuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9O1xuXG4vKipcbiAqIEFkZCBhIHNpbmdsZSBtYXBwaW5nIGZyb20gb3JpZ2luYWwgc291cmNlIGxpbmUgYW5kIGNvbHVtbiB0byB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gZm9yIHRoaXMgc291cmNlIG1hcCBiZWluZyBjcmVhdGVkLiBUaGUgbWFwcGluZ1xuICogb2JqZWN0IHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gZ2VuZXJhdGVkOiBBbiBvYmplY3Qgd2l0aCB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMuXG4gKiAgIC0gb3JpZ2luYWw6IEFuIG9iamVjdCB3aXRoIHRoZSBvcmlnaW5hbCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIChyZWxhdGl2ZSB0byB0aGUgc291cmNlUm9vdCkuXG4gKiAgIC0gbmFtZTogQW4gb3B0aW9uYWwgb3JpZ2luYWwgdG9rZW4gbmFtZSBmb3IgdGhpcyBtYXBwaW5nLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFkZE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfYWRkTWFwcGluZyhhQXJncykge1xuICAgIHZhciBnZW5lcmF0ZWQgPSB1dGlsLmdldEFyZyhhQXJncywgJ2dlbmVyYXRlZCcpO1xuICAgIHZhciBvcmlnaW5hbCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnb3JpZ2luYWwnLCBudWxsKTtcbiAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnLCBudWxsKTtcbiAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbmFtZScsIG51bGwpO1xuXG4gICAgaWYgKCF0aGlzLl9za2lwVmFsaWRhdGlvbikge1xuICAgICAgdGhpcy5fdmFsaWRhdGVNYXBwaW5nKGdlbmVyYXRlZCwgb3JpZ2luYWwsIHNvdXJjZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZSAhPSBudWxsKSB7XG4gICAgICBzb3VyY2UgPSBTdHJpbmcoc291cmNlKTtcbiAgICAgIGlmICghdGhpcy5fc291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lICE9IG51bGwpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgICBpZiAoIXRoaXMuX25hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5fbWFwcGluZ3MuYWRkKHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uLFxuICAgICAgb3JpZ2luYWxMaW5lOiBvcmlnaW5hbCAhPSBudWxsICYmIG9yaWdpbmFsLmxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5jb2x1bW4sXG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIG5hbWU6IG5hbWVcbiAgICB9KTtcbiAgfTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3Jfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICB2YXIgc291cmNlID0gYVNvdXJjZUZpbGU7XG4gICAgaWYgKHRoaXMuX3NvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLl9zb3VyY2VSb290LCBzb3VyY2UpO1xuICAgIH1cblxuICAgIGlmIChhU291cmNlQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAvLyBBZGQgdGhlIHNvdXJjZSBjb250ZW50IHRvIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIENyZWF0ZSBhIG5ldyBfc291cmNlc0NvbnRlbnRzIG1hcCBpZiB0aGUgcHJvcGVydHkgaXMgbnVsbC5cbiAgICAgIGlmICghdGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHNbdXRpbC50b1NldFN0cmluZyhzb3VyY2UpXSA9IGFTb3VyY2VDb250ZW50O1xuICAgIH0gZWxzZSBpZiAodGhpcy5fc291cmNlc0NvbnRlbnRzKSB7XG4gICAgICAvLyBSZW1vdmUgdGhlIHNvdXJjZSBmaWxlIGZyb20gdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwLlxuICAgICAgLy8gSWYgdGhlIF9zb3VyY2VzQ29udGVudHMgbWFwIGlzIGVtcHR5LCBzZXQgdGhlIHByb3BlcnR5IHRvIG51bGwuXG4gICAgICBkZWxldGUgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV07XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fc291cmNlc0NvbnRlbnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbi8qKlxuICogQXBwbGllcyB0aGUgbWFwcGluZ3Mgb2YgYSBzdWItc291cmNlLW1hcCBmb3IgYSBzcGVjaWZpYyBzb3VyY2UgZmlsZSB0byB0aGVcbiAqIHNvdXJjZSBtYXAgYmVpbmcgZ2VuZXJhdGVkLiBFYWNoIG1hcHBpbmcgdG8gdGhlIHN1cHBsaWVkIHNvdXJjZSBmaWxlIGlzXG4gKiByZXdyaXR0ZW4gdXNpbmcgdGhlIHN1cHBsaWVkIHNvdXJjZSBtYXAuIE5vdGU6IFRoZSByZXNvbHV0aW9uIGZvciB0aGVcbiAqIHJlc3VsdGluZyBtYXBwaW5ncyBpcyB0aGUgbWluaW1pdW0gb2YgdGhpcyBtYXAgYW5kIHRoZSBzdXBwbGllZCBtYXAuXG4gKlxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkLlxuICogQHBhcmFtIGFTb3VyY2VGaWxlIE9wdGlvbmFsLiBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlLlxuICogICAgICAgIElmIG9taXR0ZWQsIFNvdXJjZU1hcENvbnN1bWVyJ3MgZmlsZSBwcm9wZXJ0eSB3aWxsIGJlIHVzZWQuXG4gKiBAcGFyYW0gYVNvdXJjZU1hcFBhdGggT3B0aW9uYWwuIFRoZSBkaXJuYW1lIG9mIHRoZSBwYXRoIHRvIHRoZSBzb3VyY2UgbWFwXG4gKiAgICAgICAgdG8gYmUgYXBwbGllZC4gSWYgcmVsYXRpdmUsIGl0IGlzIHJlbGF0aXZlIHRvIHRoZSBTb3VyY2VNYXBDb25zdW1lci5cbiAqICAgICAgICBUaGlzIHBhcmFtZXRlciBpcyBuZWVkZWQgd2hlbiB0aGUgdHdvIHNvdXJjZSBtYXBzIGFyZW4ndCBpbiB0aGUgc2FtZVxuICogICAgICAgIGRpcmVjdG9yeSwgYW5kIHRoZSBzb3VyY2UgbWFwIHRvIGJlIGFwcGxpZWQgY29udGFpbnMgcmVsYXRpdmUgc291cmNlXG4gKiAgICAgICAgcGF0aHMuIElmIHNvLCB0aG9zZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbmVlZCB0byBiZSByZXdyaXR0ZW5cbiAqICAgICAgICByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLmFwcGx5U291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FwcGx5U291cmNlTWFwKGFTb3VyY2VNYXBDb25zdW1lciwgYVNvdXJjZUZpbGUsIGFTb3VyY2VNYXBQYXRoKSB7XG4gICAgdmFyIHNvdXJjZUZpbGUgPSBhU291cmNlRmlsZTtcbiAgICAvLyBJZiBhU291cmNlRmlsZSBpcyBvbWl0dGVkLCB3ZSB3aWxsIHVzZSB0aGUgZmlsZSBwcm9wZXJ0eSBvZiB0aGUgU291cmNlTWFwXG4gICAgaWYgKGFTb3VyY2VGaWxlID09IG51bGwpIHtcbiAgICAgIGlmIChhU291cmNlTWFwQ29uc3VtZXIuZmlsZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCByZXF1aXJlcyBlaXRoZXIgYW4gZXhwbGljaXQgc291cmNlIGZpbGUsICcgK1xuICAgICAgICAgICdvciB0aGUgc291cmNlIG1hcFxcJ3MgXCJmaWxlXCIgcHJvcGVydHkuIEJvdGggd2VyZSBvbWl0dGVkLidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHNvdXJjZUZpbGUgPSBhU291cmNlTWFwQ29uc3VtZXIuZmlsZTtcbiAgICB9XG4gICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLl9zb3VyY2VSb290O1xuICAgIC8vIE1ha2UgXCJzb3VyY2VGaWxlXCIgcmVsYXRpdmUgaWYgYW4gYWJzb2x1dGUgVXJsIGlzIHBhc3NlZC5cbiAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBzb3VyY2VGaWxlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICB9XG4gICAgLy8gQXBwbHlpbmcgdGhlIFNvdXJjZU1hcCBjYW4gYWRkIGFuZCByZW1vdmUgaXRlbXMgZnJvbSB0aGUgc291cmNlcyBhbmRcbiAgICAvLyB0aGUgbmFtZXMgYXJyYXkuXG4gICAgdmFyIG5ld1NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgICB2YXIgbmV3TmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICAgIC8vIEZpbmQgbWFwcGluZ3MgZm9yIHRoZSBcInNvdXJjZUZpbGVcIlxuICAgIHRoaXMuX21hcHBpbmdzLnVuc29ydGVkRm9yRWFjaChmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBzb3VyY2VGaWxlICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lICE9IG51bGwpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgaXQgY2FuIGJlIG1hcHBlZCBieSB0aGUgc291cmNlIG1hcCwgdGhlbiB1cGRhdGUgdGhlIG1hcHBpbmcuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IGFTb3VyY2VNYXBDb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICAgIC8vIENvcHkgbWFwcGluZ1xuICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgbWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcuc291cmNlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lID0gb3JpZ2luYWwubGluZTtcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgICAgIGlmIChvcmlnaW5hbC5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZTtcbiAgICAgIGlmIChzb3VyY2UgIT0gbnVsbCAmJiAhbmV3U291cmNlcy5oYXMoc291cmNlKSkge1xuICAgICAgICBuZXdTb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmFtZSA9IG1hcHBpbmcubmFtZTtcbiAgICAgIGlmIChuYW1lICE9IG51bGwgJiYgIW5ld05hbWVzLmhhcyhuYW1lKSkge1xuICAgICAgICBuZXdOYW1lcy5hZGQobmFtZSk7XG4gICAgICB9XG5cbiAgICB9LCB0aGlzKTtcbiAgICB0aGlzLl9zb3VyY2VzID0gbmV3U291cmNlcztcbiAgICB0aGlzLl9uYW1lcyA9IG5ld05hbWVzO1xuXG4gICAgLy8gQ29weSBzb3VyY2VzQ29udGVudHMgb2YgYXBwbGllZCBtYXAuXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFTb3VyY2VNYXBQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFTb3VyY2VNYXBQYXRoLCBzb3VyY2VGaWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEEgbWFwcGluZyBjYW4gaGF2ZSBvbmUgb2YgdGhlIHRocmVlIGxldmVscyBvZiBkYXRhOlxuICpcbiAqICAgMS4gSnVzdCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICogICAyLiBUaGUgR2VuZXJhdGVkIHBvc2l0aW9uLCBvcmlnaW5hbCBwb3NpdGlvbiwgYW5kIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgMy4gR2VuZXJhdGVkIGFuZCBvcmlnaW5hbCBwb3NpdGlvbiwgb3JpZ2luYWwgc291cmNlLCBhcyB3ZWxsIGFzIGEgbmFtZVxuICogICAgICB0b2tlbi5cbiAqXG4gKiBUbyBtYWludGFpbiBjb25zaXN0ZW5jeSwgd2UgdmFsaWRhdGUgdGhhdCBhbnkgbmV3IG1hcHBpbmcgYmVpbmcgYWRkZWQgZmFsbHNcbiAqIGluIHRvIG9uZSBvZiB0aGVzZSBjYXRlZ29yaWVzLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0ZU1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdmFsaWRhdGVNYXBwaW5nKGFHZW5lcmF0ZWQsIGFPcmlnaW5hbCwgYVNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhTmFtZSkge1xuICAgIC8vIFdoZW4gYU9yaWdpbmFsIGlzIHRydXRoeSBidXQgaGFzIGVtcHR5IHZhbHVlcyBmb3IgLmxpbmUgYW5kIC5jb2x1bW4sXG4gICAgLy8gaXQgaXMgbW9zdCBsaWtlbHkgYSBwcm9ncmFtbWVyIGVycm9yLiBJbiB0aGlzIGNhc2Ugd2UgdGhyb3cgYSB2ZXJ5XG4gICAgLy8gc3BlY2lmaWMgZXJyb3IgbWVzc2FnZSB0byB0cnkgdG8gZ3VpZGUgdGhlbSB0aGUgcmlnaHQgd2F5LlxuICAgIC8vIEZvciBleGFtcGxlOiBodHRwczovL2dpdGh1Yi5jb20vUG9seW1lci9wb2x5bWVyLWJ1bmRsZXIvcHVsbC81MTlcbiAgICBpZiAoYU9yaWdpbmFsICYmIHR5cGVvZiBhT3JpZ2luYWwubGluZSAhPT0gJ251bWJlcicgJiYgdHlwZW9mIGFPcmlnaW5hbC5jb2x1bW4gIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdvcmlnaW5hbC5saW5lIGFuZCBvcmlnaW5hbC5jb2x1bW4gYXJlIG5vdCBudW1iZXJzIC0tIHlvdSBwcm9iYWJseSBtZWFudCB0byBvbWl0ICcgK1xuICAgICAgICAgICAgJ3RoZSBvcmlnaW5hbCBtYXBwaW5nIGVudGlyZWx5IGFuZCBvbmx5IG1hcCB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uLiBJZiBzbywgcGFzcyAnICtcbiAgICAgICAgICAgICdudWxsIGZvciB0aGUgb3JpZ2luYWwgbWFwcGluZyBpbnN0ZWFkIG9mIGFuIG9iamVjdCB3aXRoIGVtcHR5IG9yIG51bGwgdmFsdWVzLidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICYmIGFHZW5lcmF0ZWQubGluZSA+IDAgJiYgYUdlbmVyYXRlZC5jb2x1bW4gPj0gMFxuICAgICAgICAmJiAhYU9yaWdpbmFsICYmICFhU291cmNlICYmICFhTmFtZSkge1xuICAgICAgLy8gQ2FzZSAxLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbHNlIGlmIChhR2VuZXJhdGVkICYmICdsaW5lJyBpbiBhR2VuZXJhdGVkICYmICdjb2x1bW4nIGluIGFHZW5lcmF0ZWRcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwgJiYgJ2xpbmUnIGluIGFPcmlnaW5hbCAmJiAnY29sdW1uJyBpbiBhT3JpZ2luYWxcbiAgICAgICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgICAgICAmJiBhT3JpZ2luYWwubGluZSA+IDAgJiYgYU9yaWdpbmFsLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYVNvdXJjZSkge1xuICAgICAgLy8gQ2FzZXMgMiBhbmQgMy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgbWFwcGluZzogJyArIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgZ2VuZXJhdGVkOiBhR2VuZXJhdGVkLFxuICAgICAgICBzb3VyY2U6IGFTb3VyY2UsXG4gICAgICAgIG9yaWdpbmFsOiBhT3JpZ2luYWwsXG4gICAgICAgIG5hbWU6IGFOYW1lXG4gICAgICB9KSk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gdG8gdGhlIHN0cmVhbSBvZiBiYXNlIDY0IFZMUXNcbiAqIHNwZWNpZmllZCBieSB0aGUgc291cmNlIG1hcCBmb3JtYXQuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuX3NlcmlhbGl6ZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NlcmlhbGl6ZU1hcHBpbmdzKCkge1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkTGluZSA9IDE7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzU291cmNlID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIG5leHQ7XG4gICAgdmFyIG1hcHBpbmc7XG4gICAgdmFyIG5hbWVJZHg7XG4gICAgdmFyIHNvdXJjZUlkeDtcblxuICAgIHZhciBtYXBwaW5ncyA9IHRoaXMuX21hcHBpbmdzLnRvQXJyYXkoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbWFwcGluZ3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG1hcHBpbmcgPSBtYXBwaW5nc1tpXTtcbiAgICAgIG5leHQgPSAnJ1xuXG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICB3aGlsZSAobWFwcGluZy5nZW5lcmF0ZWRMaW5lICE9PSBwcmV2aW91c0dlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBuZXh0ICs9ICc7JztcbiAgICAgICAgICBwcmV2aW91c0dlbmVyYXRlZExpbmUrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIGlmICghdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nLCBtYXBwaW5nc1tpIC0gMV0pKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dCArPSAnLCc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZUlkeCA9IHRoaXMuX3NvdXJjZXMuaW5kZXhPZihtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShzb3VyY2VJZHggLSBwcmV2aW91c1NvdXJjZSk7XG4gICAgICAgIHByZXZpb3VzU291cmNlID0gc291cmNlSWR4O1xuXG4gICAgICAgIC8vIGxpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZCBpbiBTb3VyY2VNYXAgc3BlYyB2ZXJzaW9uIDNcbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHByZXZpb3VzT3JpZ2luYWxMaW5lKTtcbiAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDE7XG5cbiAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsQ29sdW1uKTtcbiAgICAgICAgcHJldmlvdXNPcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgaWYgKG1hcHBpbmcubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgbmFtZUlkeCA9IHRoaXMuX25hbWVzLmluZGV4T2YobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUobmFtZUlkeCAtIHByZXZpb3VzTmFtZSk7XG4gICAgICAgICAgcHJldmlvdXNOYW1lID0gbmFtZUlkeDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXN1bHQgKz0gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoYVNvdXJjZXMsIGFTb3VyY2VSb290KSB7XG4gICAgcmV0dXJuIGFTb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChhU291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUoYVNvdXJjZVJvb3QsIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdXRpbC50b1NldFN0cmluZyhzb3VyY2UpO1xuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9zb3VyY2VzQ29udGVudHMsIGtleSlcbiAgICAgICAgPyB0aGlzLl9zb3VyY2VzQ29udGVudHNba2V5XVxuICAgICAgICA6IG51bGw7XG4gICAgfSwgdGhpcyk7XG4gIH07XG5cbi8qKlxuICogRXh0ZXJuYWxpemUgdGhlIHNvdXJjZSBtYXAuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9KU09OID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3RvSlNPTigpIHtcbiAgICB2YXIgbWFwID0ge1xuICAgICAgdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgIHNvdXJjZXM6IHRoaXMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgbmFtZXM6IHRoaXMuX25hbWVzLnRvQXJyYXkoKSxcbiAgICAgIG1hcHBpbmdzOiB0aGlzLl9zZXJpYWxpemVNYXBwaW5ncygpXG4gICAgfTtcbiAgICBpZiAodGhpcy5fZmlsZSAhPSBudWxsKSB7XG4gICAgICBtYXAuZmlsZSA9IHRoaXMuX2ZpbGU7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIG1hcC5zb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgbWFwLnNvdXJjZXNDb250ZW50ID0gdGhpcy5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChtYXAuc291cmNlcywgbWFwLnNvdXJjZVJvb3QpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXA7XG4gIH07XG5cbi8qKlxuICogUmVuZGVyIHRoZSBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZCB0byBhIHN0cmluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b1N0cmluZygpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy50b0pTT04oKSk7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gU291cmNlTWFwR2VuZXJhdG9yO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqXG4gKiBCYXNlZCBvbiB0aGUgQmFzZSA2NCBWTFEgaW1wbGVtZW50YXRpb24gaW4gQ2xvc3VyZSBDb21waWxlcjpcbiAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2xvc3VyZS1jb21waWxlci9zb3VyY2UvYnJvd3NlL3RydW5rL3NyYy9jb20vZ29vZ2xlL2RlYnVnZ2luZy9zb3VyY2VtYXAvQmFzZTY0VkxRLmphdmFcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSBUaGUgQ2xvc3VyZSBDb21waWxlciBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0XG4gKiBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gKiBtZXQ6XG4gKlxuICogICogUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAqICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbiAqICAgIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nXG4gKiAgICBkaXNjbGFpbWVyIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWRcbiAqICAgIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cbiAqICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgR29vZ2xlIEluYy4gbm9yIHRoZSBuYW1lcyBvZiBpdHNcbiAqICAgIGNvbnRyaWJ1dG9ycyBtYXkgYmUgdXNlZCB0byBlbmRvcnNlIG9yIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZFxuICogICAgZnJvbSB0aGlzIHNvZnR3YXJlIHdpdGhvdXQgc3BlY2lmaWMgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uLlxuICpcbiAqIFRISVMgU09GVFdBUkUgSVMgUFJPVklERUQgQlkgVEhFIENPUFlSSUdIVCBIT0xERVJTIEFORCBDT05UUklCVVRPUlNcbiAqIFwiQVMgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUlxuICogQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFRcbiAqIE9XTkVSIE9SIENPTlRSSUJVVE9SUyBCRSBMSUFCTEUgRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLFxuICogU1BFQ0lBTCwgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVFxuICogTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsXG4gKiBEQVRBLCBPUiBQUk9GSVRTOyBPUiBCVVNJTkVTUyBJTlRFUlJVUFRJT04pIEhPV0VWRVIgQ0FVU0VEIEFORCBPTiBBTllcbiAqIFRIRU9SWSBPRiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlRcbiAqIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRVxuICogT0YgVEhJUyBTT0ZUV0FSRSwgRVZFTiBJRiBBRFZJU0VEIE9GIFRIRSBQT1NTSUJJTElUWSBPRiBTVUNIIERBTUFHRS5cbiAqL1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnLi9iYXNlNjQnKTtcblxuLy8gQSBzaW5nbGUgYmFzZSA2NCBkaWdpdCBjYW4gY29udGFpbiA2IGJpdHMgb2YgZGF0YS4gRm9yIHRoZSBiYXNlIDY0IHZhcmlhYmxlXG4vLyBsZW5ndGggcXVhbnRpdGllcyB3ZSB1c2UgaW4gdGhlIHNvdXJjZSBtYXAgc3BlYywgdGhlIGZpcnN0IGJpdCBpcyB0aGUgc2lnbixcbi8vIHRoZSBuZXh0IGZvdXIgYml0cyBhcmUgdGhlIGFjdHVhbCB2YWx1ZSwgYW5kIHRoZSA2dGggYml0IGlzIHRoZVxuLy8gY29udGludWF0aW9uIGJpdC4gVGhlIGNvbnRpbnVhdGlvbiBiaXQgdGVsbHMgdXMgd2hldGhlciB0aGVyZSBhcmUgbW9yZVxuLy8gZGlnaXRzIGluIHRoaXMgdmFsdWUgZm9sbG93aW5nIHRoaXMgZGlnaXQuXG4vL1xuLy8gICBDb250aW51YXRpb25cbi8vICAgfCAgICBTaWduXG4vLyAgIHwgICAgfFxuLy8gICBWICAgIFZcbi8vICAgMTAxMDExXG5cbnZhciBWTFFfQkFTRV9TSElGVCA9IDU7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0JBU0UgPSAxIDw8IFZMUV9CQVNFX1NISUZUO1xuXG4vLyBiaW5hcnk6IDAxMTExMVxudmFyIFZMUV9CQVNFX01BU0sgPSBWTFFfQkFTRSAtIDE7XG5cbi8vIGJpbmFyeTogMTAwMDAwXG52YXIgVkxRX0NPTlRJTlVBVElPTl9CSVQgPSBWTFFfQkFTRTtcblxuLyoqXG4gKiBDb252ZXJ0cyBmcm9tIGEgdHdvLWNvbXBsZW1lbnQgdmFsdWUgdG8gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAxIGJlY29tZXMgMiAoMTAgYmluYXJ5KSwgLTEgYmVjb21lcyAzICgxMSBiaW5hcnkpXG4gKiAgIDIgYmVjb21lcyA0ICgxMDAgYmluYXJ5KSwgLTIgYmVjb21lcyA1ICgxMDEgYmluYXJ5KVxuICovXG5mdW5jdGlvbiB0b1ZMUVNpZ25lZChhVmFsdWUpIHtcbiAgcmV0dXJuIGFWYWx1ZSA8IDBcbiAgICA/ICgoLWFWYWx1ZSkgPDwgMSkgKyAxXG4gICAgOiAoYVZhbHVlIDw8IDEpICsgMDtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyB0byBhIHR3by1jb21wbGVtZW50IHZhbHVlIGZyb20gYSB2YWx1ZSB3aGVyZSB0aGUgc2lnbiBiaXQgaXNcbiAqIHBsYWNlZCBpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgYml0LiAgRm9yIGV4YW1wbGUsIGFzIGRlY2ltYWxzOlxuICogICAyICgxMCBiaW5hcnkpIGJlY29tZXMgMSwgMyAoMTEgYmluYXJ5KSBiZWNvbWVzIC0xXG4gKiAgIDQgKDEwMCBiaW5hcnkpIGJlY29tZXMgMiwgNSAoMTAxIGJpbmFyeSkgYmVjb21lcyAtMlxuICovXG5mdW5jdGlvbiBmcm9tVkxRU2lnbmVkKGFWYWx1ZSkge1xuICB2YXIgaXNOZWdhdGl2ZSA9IChhVmFsdWUgJiAxKSA9PT0gMTtcbiAgdmFyIHNoaWZ0ZWQgPSBhVmFsdWUgPj4gMTtcbiAgcmV0dXJuIGlzTmVnYXRpdmVcbiAgICA/IC1zaGlmdGVkXG4gICAgOiBzaGlmdGVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGJhc2UgNjQgVkxRIGVuY29kZWQgdmFsdWUuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gYmFzZTY0VkxRX2VuY29kZShhVmFsdWUpIHtcbiAgdmFyIGVuY29kZWQgPSBcIlwiO1xuICB2YXIgZGlnaXQ7XG5cbiAgdmFyIHZscSA9IHRvVkxRU2lnbmVkKGFWYWx1ZSk7XG5cbiAgZG8ge1xuICAgIGRpZ2l0ID0gdmxxICYgVkxRX0JBU0VfTUFTSztcbiAgICB2bHEgPj4+PSBWTFFfQkFTRV9TSElGVDtcbiAgICBpZiAodmxxID4gMCkge1xuICAgICAgLy8gVGhlcmUgYXJlIHN0aWxsIG1vcmUgZGlnaXRzIGluIHRoaXMgdmFsdWUsIHNvIHdlIG11c3QgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGludWF0aW9uIGJpdCBpcyBtYXJrZWQuXG4gICAgICBkaWdpdCB8PSBWTFFfQ09OVElOVUFUSU9OX0JJVDtcbiAgICB9XG4gICAgZW5jb2RlZCArPSBiYXNlNjQuZW5jb2RlKGRpZ2l0KTtcbiAgfSB3aGlsZSAodmxxID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59O1xuXG4vKipcbiAqIERlY29kZXMgdGhlIG5leHQgYmFzZSA2NCBWTFEgdmFsdWUgZnJvbSB0aGUgZ2l2ZW4gc3RyaW5nIGFuZCByZXR1cm5zIHRoZVxuICogdmFsdWUgYW5kIHRoZSByZXN0IG9mIHRoZSBzdHJpbmcgdmlhIHRoZSBvdXQgcGFyYW1ldGVyLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9kZWNvZGUoYVN0ciwgYUluZGV4LCBhT3V0UGFyYW0pIHtcbiAgdmFyIHN0ckxlbiA9IGFTdHIubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gMDtcbiAgdmFyIHNoaWZ0ID0gMDtcbiAgdmFyIGNvbnRpbnVhdGlvbiwgZGlnaXQ7XG5cbiAgZG8ge1xuICAgIGlmIChhSW5kZXggPj0gc3RyTGVuKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBtb3JlIGRpZ2l0cyBpbiBiYXNlIDY0IFZMUSB2YWx1ZS5cIik7XG4gICAgfVxuXG4gICAgZGlnaXQgPSBiYXNlNjQuZGVjb2RlKGFTdHIuY2hhckNvZGVBdChhSW5kZXgrKykpO1xuICAgIGlmIChkaWdpdCA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYmFzZTY0IGRpZ2l0OiBcIiArIGFTdHIuY2hhckF0KGFJbmRleCAtIDEpKTtcbiAgICB9XG5cbiAgICBjb250aW51YXRpb24gPSAhIShkaWdpdCAmIFZMUV9DT05USU5VQVRJT05fQklUKTtcbiAgICBkaWdpdCAmPSBWTFFfQkFTRV9NQVNLO1xuICAgIHJlc3VsdCA9IHJlc3VsdCArIChkaWdpdCA8PCBzaGlmdCk7XG4gICAgc2hpZnQgKz0gVkxRX0JBU0VfU0hJRlQ7XG4gIH0gd2hpbGUgKGNvbnRpbnVhdGlvbik7XG5cbiAgYU91dFBhcmFtLnZhbHVlID0gZnJvbVZMUVNpZ25lZChyZXN1bHQpO1xuICBhT3V0UGFyYW0ucmVzdCA9IGFJbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBoYXNOYXRpdmVNYXAgPSB0eXBlb2YgTWFwICE9PSBcInVuZGVmaW5lZFwiO1xuXG4vKipcbiAqIEEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggaXMgYSBjb21iaW5hdGlvbiBvZiBhbiBhcnJheSBhbmQgYSBzZXQuIEFkZGluZyBhIG5ld1xuICogbWVtYmVyIGlzIE8oMSksIHRlc3RpbmcgZm9yIG1lbWJlcnNoaXAgaXMgTygxKSwgYW5kIGZpbmRpbmcgdGhlIGluZGV4IG9mIGFuXG4gKiBlbGVtZW50IGlzIE8oMSkuIFJlbW92aW5nIGVsZW1lbnRzIGZyb20gdGhlIHNldCBpcyBub3Qgc3VwcG9ydGVkLiBPbmx5XG4gKiBzdHJpbmdzIGFyZSBzdXBwb3J0ZWQgZm9yIG1lbWJlcnNoaXAuXG4gKi9cbmZ1bmN0aW9uIEFycmF5U2V0KCkge1xuICB0aGlzLl9hcnJheSA9IFtdO1xuICB0aGlzLl9zZXQgPSBoYXNOYXRpdmVNYXAgPyBuZXcgTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xufVxuXG4vKipcbiAqIFN0YXRpYyBtZXRob2QgZm9yIGNyZWF0aW5nIEFycmF5U2V0IGluc3RhbmNlcyBmcm9tIGFuIGV4aXN0aW5nIGFycmF5LlxuICovXG5BcnJheVNldC5mcm9tQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF9mcm9tQXJyYXkoYUFycmF5LCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciBzZXQgPSBuZXcgQXJyYXlTZXQoKTtcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFBcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHNldC5hZGQoYUFycmF5W2ldLCBhQWxsb3dEdXBsaWNhdGVzKTtcbiAgfVxuICByZXR1cm4gc2V0O1xufTtcblxuLyoqXG4gKiBSZXR1cm4gaG93IG1hbnkgdW5pcXVlIGl0ZW1zIGFyZSBpbiB0aGlzIEFycmF5U2V0LiBJZiBkdXBsaWNhdGVzIGhhdmUgYmVlblxuICogYWRkZWQsIHRoYW4gdGhvc2UgZG8gbm90IGNvdW50IHRvd2FyZHMgdGhlIHNpemUuXG4gKlxuICogQHJldHVybnMgTnVtYmVyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gQXJyYXlTZXRfc2l6ZSgpIHtcbiAgcmV0dXJuIGhhc05hdGl2ZU1hcCA/IHRoaXMuX3NldC5zaXplIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fc2V0KS5sZW5ndGg7XG59O1xuXG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gc3RyaW5nIHRvIHRoaXMgc2V0LlxuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gQXJyYXlTZXRfYWRkKGFTdHIsIGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHNTdHIgPSBoYXNOYXRpdmVNYXAgPyBhU3RyIDogdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgdmFyIGlzRHVwbGljYXRlID0gaGFzTmF0aXZlTWFwID8gdGhpcy5oYXMoYVN0cikgOiBoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpO1xuICB2YXIgaWR4ID0gdGhpcy5fYXJyYXkubGVuZ3RoO1xuICBpZiAoIWlzRHVwbGljYXRlIHx8IGFBbGxvd0R1cGxpY2F0ZXMpIHtcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFTdHIpO1xuICB9XG4gIGlmICghaXNEdXBsaWNhdGUpIHtcbiAgICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgICB0aGlzLl9zZXQuc2V0KGFTdHIsIGlkeCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NldFtzU3RyXSA9IGlkeDtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSXMgdGhlIGdpdmVuIHN0cmluZyBhIG1lbWJlciBvZiB0aGlzIHNldD9cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIEFycmF5U2V0X2hhcyhhU3RyKSB7XG4gIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0LmhhcyhhU3RyKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc1N0ciA9IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gICAgcmV0dXJuIGhhcy5jYWxsKHRoaXMuX3NldCwgc1N0cik7XG4gIH1cbn07XG5cbi8qKlxuICogV2hhdCBpcyB0aGUgaW5kZXggb2YgdGhlIGdpdmVuIHN0cmluZyBpbiB0aGUgYXJyYXk/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gQXJyYXlTZXRfaW5kZXhPZihhU3RyKSB7XG4gIGlmIChoYXNOYXRpdmVNYXApIHtcbiAgICB2YXIgaWR4ID0gdGhpcy5fc2V0LmdldChhU3RyKTtcbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgICAgcmV0dXJuIGlkeDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICAgIGlmIChoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2V0W3NTdHJdO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignXCInICsgYVN0ciArICdcIiBpcyBub3QgaW4gdGhlIHNldC4nKTtcbn07XG5cbi8qKlxuICogV2hhdCBpcyB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXg/XG4gKlxuICogQHBhcmFtIE51bWJlciBhSWR4XG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIEFycmF5U2V0X2F0KGFJZHgpIHtcbiAgaWYgKGFJZHggPj0gMCAmJiBhSWR4IDwgdGhpcy5fYXJyYXkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W2FJZHhdO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcignTm8gZWxlbWVudCBpbmRleGVkIGJ5ICcgKyBhSWR4KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYXJyYXkgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzZXQgKHdoaWNoIGhhcyB0aGUgcHJvcGVyIGluZGljZXNcbiAqIGluZGljYXRlZCBieSBpbmRleE9mKS4gTm90ZSB0aGF0IHRoaXMgaXMgYSBjb3B5IG9mIHRoZSBpbnRlcm5hbCBhcnJheSB1c2VkXG4gKiBmb3Igc3RvcmluZyB0aGUgbWVtYmVycyBzbyB0aGF0IG5vIG9uZSBjYW4gbWVzcyB3aXRoIGludGVybmFsIHN0YXRlLlxuICovXG5BcnJheVNldC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIEFycmF5U2V0X3RvQXJyYXkoKSB7XG4gIHJldHVybiB0aGlzLl9hcnJheS5zbGljZSgpO1xufTtcblxuZXhwb3J0cy5BcnJheVNldCA9IEFycmF5U2V0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2FyZ3BhcnNlJyk7XG4iLCIvKiFcbiAqIG1pbWUtdHlwZXNcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogQ29weXJpZ2h0KGMpIDIwMTUgRG91Z2xhcyBDaHJpc3RvcGhlciBXaWxzb25cbiAqIE1JVCBMaWNlbnNlZFxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBkYiA9IHJlcXVpcmUoJ21pbWUtZGInKVxudmFyIGV4dG5hbWUgPSByZXF1aXJlKCdwYXRoJykuZXh0bmFtZVxuXG4vKipcbiAqIE1vZHVsZSB2YXJpYWJsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5cbnZhciBFWFRSQUNUX1RZUEVfUkVHRVhQID0gL15cXHMqKFteO1xcc10qKSg/Ojt8XFxzfCQpL1xudmFyIFRFWFRfVFlQRV9SRUdFWFAgPSAvXnRleHRcXC8vaVxuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMuY2hhcnNldCA9IGNoYXJzZXRcbmV4cG9ydHMuY2hhcnNldHMgPSB7IGxvb2t1cDogY2hhcnNldCB9XG5leHBvcnRzLmNvbnRlbnRUeXBlID0gY29udGVudFR5cGVcbmV4cG9ydHMuZXh0ZW5zaW9uID0gZXh0ZW5zaW9uXG5leHBvcnRzLmV4dGVuc2lvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG5leHBvcnRzLmxvb2t1cCA9IGxvb2t1cFxuZXhwb3J0cy50eXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbClcblxuLy8gUG9wdWxhdGUgdGhlIGV4dGVuc2lvbnMvdHlwZXMgbWFwc1xucG9wdWxhdGVNYXBzKGV4cG9ydHMuZXh0ZW5zaW9ucywgZXhwb3J0cy50eXBlcylcblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgY2hhcnNldCBmb3IgYSBNSU1FIHR5cGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge2Jvb2xlYW58c3RyaW5nfVxuICovXG5cbmZ1bmN0aW9uIGNoYXJzZXQgKHR5cGUpIHtcbiAgaWYgKCF0eXBlIHx8IHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLy8gVE9ETzogdXNlIG1lZGlhLXR5cGVyXG4gIHZhciBtYXRjaCA9IEVYVFJBQ1RfVFlQRV9SRUdFWFAuZXhlYyh0eXBlKVxuICB2YXIgbWltZSA9IG1hdGNoICYmIGRiW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldXG5cbiAgaWYgKG1pbWUgJiYgbWltZS5jaGFyc2V0KSB7XG4gICAgcmV0dXJuIG1pbWUuY2hhcnNldFxuICB9XG5cbiAgLy8gZGVmYXVsdCB0ZXh0LyogdG8gdXRmLThcbiAgaWYgKG1hdGNoICYmIFRFWFRfVFlQRV9SRUdFWFAudGVzdChtYXRjaFsxXSkpIHtcbiAgICByZXR1cm4gJ1VURi04J1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVsbCBDb250ZW50LVR5cGUgaGVhZGVyIGdpdmVuIGEgTUlNRSB0eXBlIG9yIGV4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ31cbiAqL1xuXG5mdW5jdGlvbiBjb250ZW50VHlwZSAoc3RyKSB7XG4gIC8vIFRPRE86IHNob3VsZCB0aGlzIGV2ZW4gYmUgaW4gdGhpcyBtb2R1bGU/XG4gIGlmICghc3RyIHx8IHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICB2YXIgbWltZSA9IHN0ci5pbmRleE9mKCcvJykgPT09IC0xXG4gICAgPyBleHBvcnRzLmxvb2t1cChzdHIpXG4gICAgOiBzdHJcblxuICBpZiAoIW1pbWUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBjb250ZW50LXR5cGUgb3Igb3RoZXIgbW9kdWxlXG4gIGlmIChtaW1lLmluZGV4T2YoJ2NoYXJzZXQnKSA9PT0gLTEpIHtcbiAgICB2YXIgY2hhcnNldCA9IGV4cG9ydHMuY2hhcnNldChtaW1lKVxuICAgIGlmIChjaGFyc2V0KSBtaW1lICs9ICc7IGNoYXJzZXQ9JyArIGNoYXJzZXQudG9Mb3dlckNhc2UoKVxuICB9XG5cbiAgcmV0dXJuIG1pbWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgZXh0ZW5zaW9uIGZvciBhIE1JTUUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5zaW9uICh0eXBlKSB7XG4gIGlmICghdHlwZSB8fCB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIFRPRE86IHVzZSBtZWRpYS10eXBlclxuICB2YXIgbWF0Y2ggPSBFWFRSQUNUX1RZUEVfUkVHRVhQLmV4ZWModHlwZSlcblxuICAvLyBnZXQgZXh0ZW5zaW9uc1xuICB2YXIgZXh0cyA9IG1hdGNoICYmIGV4cG9ydHMuZXh0ZW5zaW9uc1ttYXRjaFsxXS50b0xvd2VyQ2FzZSgpXVxuXG4gIGlmICghZXh0cyB8fCAhZXh0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBleHRzWzBdXG59XG5cbi8qKlxuICogTG9va3VwIHRoZSBNSU1FIHR5cGUgZm9yIGEgZmlsZSBwYXRoL2V4dGVuc2lvbi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICogQHJldHVybiB7Ym9vbGVhbnxzdHJpbmd9XG4gKi9cblxuZnVuY3Rpb24gbG9va3VwIChwYXRoKSB7XG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIC8vIGdldCB0aGUgZXh0ZW5zaW9uIChcImV4dFwiIG9yIFwiLmV4dFwiIG9yIGZ1bGwgcGF0aClcbiAgdmFyIGV4dGVuc2lvbiA9IGV4dG5hbWUoJ3guJyArIHBhdGgpXG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAuc3Vic3RyKDEpXG5cbiAgaWYgKCFleHRlbnNpb24pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLnR5cGVzW2V4dGVuc2lvbl0gfHwgZmFsc2Vcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSB0aGUgZXh0ZW5zaW9ucyBhbmQgdHlwZXMgbWFwcy5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcG9wdWxhdGVNYXBzIChleHRlbnNpb25zLCB0eXBlcykge1xuICAvLyBzb3VyY2UgcHJlZmVyZW5jZSAobGVhc3QgLT4gbW9zdClcbiAgdmFyIHByZWZlcmVuY2UgPSBbJ25naW54JywgJ2FwYWNoZScsIHVuZGVmaW5lZCwgJ2lhbmEnXVxuXG4gIE9iamVjdC5rZXlzKGRiKS5mb3JFYWNoKGZ1bmN0aW9uIGZvckVhY2hNaW1lVHlwZSAodHlwZSkge1xuICAgIHZhciBtaW1lID0gZGJbdHlwZV1cbiAgICB2YXIgZXh0cyA9IG1pbWUuZXh0ZW5zaW9uc1xuXG4gICAgaWYgKCFleHRzIHx8ICFleHRzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gbWltZSAtPiBleHRlbnNpb25zXG4gICAgZXh0ZW5zaW9uc1t0eXBlXSA9IGV4dHNcblxuICAgIC8vIGV4dGVuc2lvbiAtPiBtaW1lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXh0ZW5zaW9uID0gZXh0c1tpXVxuXG4gICAgICBpZiAodHlwZXNbZXh0ZW5zaW9uXSkge1xuICAgICAgICB2YXIgZnJvbSA9IHByZWZlcmVuY2UuaW5kZXhPZihkYlt0eXBlc1tleHRlbnNpb25dXS5zb3VyY2UpXG4gICAgICAgIHZhciB0byA9IHByZWZlcmVuY2UuaW5kZXhPZihtaW1lLnNvdXJjZSlcblxuICAgICAgICBpZiAodHlwZXNbZXh0ZW5zaW9uXSAhPT0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgJiZcbiAgICAgICAgICAoZnJvbSA+IHRvIHx8IChmcm9tID09PSB0byAmJiB0eXBlc1tleHRlbnNpb25dLnN1YnN0cigwLCAxMikgPT09ICdhcHBsaWNhdGlvbi8nKSkpIHtcbiAgICAgICAgICAvLyBza2lwIHRoZSByZW1hcHBpbmdcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCB0aGUgZXh0ZW5zaW9uIC0+IG1pbWVcbiAgICAgIHR5cGVzW2V4dGVuc2lvbl0gPSB0eXBlXG4gICAgfVxuICB9KVxufVxuIiwiZXhwb3J0IHR5cGUgTWV0YWRhdGEgPSB7IFsga2V5OiBzdHJpbmcgXTogc3RyaW5nW10gfVxuXG5cbmV4cG9ydCBjb25zdCBtZXRhZGF0YVJlZ2V4ID0gL14oW2Etel9dKyk6ICguKykvaVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU1ldGFkYXRhKG1hcmtkb3duOiBzdHJpbmcpOiBbIE1ldGFkYXRhLCBzdHJpbmcgXSB7XG4gICAgY29uc3QgdHJpbW1lZCA9IG1hcmtkb3duLnRyaW0oKVxuICAgIGNvbnN0IHNwbGl0ID0gdHJpbW1lZC5zcGxpdCgvXFxyP1xcbi8pXG4gICAgY29uc3QgbWV0YWRhdGE6IE1ldGFkYXRhID0ge31cblxuICAgIGlmIChzcGxpdC5sZW5ndGggPT09IDAgfHwgIW1ldGFkYXRhUmVnZXgudGVzdChzcGxpdFswXSkpIHtcbiAgICAgICAgcmV0dXJuIFsgbWV0YWRhdGEsIHRyaW1tZWQgXVxuICAgIH1cblxuICAgIGxldCBsYXN0S2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICAgIGxldCBpbmRleCA9IDBcbiAgICBmb3IgKDsgaW5kZXggPCBzcGxpdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29uc3QgbGluZSA9IHNwbGl0W2luZGV4XVxuICAgICAgICBpZiAoL15cXHMqJC8udGVzdChsaW5lKSkge1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXRjaCA9IG1ldGFkYXRhUmVnZXguZXhlYyhsaW5lKVxuICAgICAgICBpZiAobWF0Y2ggPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChsYXN0S2V5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGFkYXRhW2xhc3RLZXldLnB1c2gobGluZS50cmltKCkpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsYXN0S2V5ID0gbWF0Y2hbMV1cbiAgICAgICAgICAgIG1ldGFkYXRhW2xhc3RLZXldID0gWyBtYXRjaFsyXS50cmltKCkgXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgdGV4dCA9IHNwbGl0LnNsaWNlKGluZGV4ICsgMSkuam9pbignXFxuJylcbiAgICByZXR1cm4gWyBtZXRhZGF0YSwgdGV4dCBdXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpOyIsInZhciBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlID0gcmVxdWlyZShcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiKTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllczsiLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNoXG5iYXNoLmRpc3BsYXlOYW1lID0gJ2Jhc2gnXG5iYXNoLmFsaWFzZXMgPSBbJ3NoZWxsJ11cbmZ1bmN0aW9uIGJhc2goUHJpc20pIHtcbiAgOyhmdW5jdGlvbihQcmlzbSkge1xuICAgIC8vICQgc2V0IHwgZ3JlcCAnXltBLVpdW15bOnNwYWNlOl1dKj0nIHwgY3V0IC1kPSAtZjEgfCB0ciAnXFxuJyAnfCdcbiAgICAvLyArIExDX0FMTCwgUkFORE9NLCBSRVBMWSwgU0VDT05EUy5cbiAgICAvLyArIG1ha2Ugc3VyZSBQUzEuLjQgYXJlIGhlcmUgYXMgdGhleSBhcmUgbm90IGFsd2F5cyBzZXQsXG4gICAgLy8gLSBzb21lIHVzZWxlc3MgdGhpbmdzLlxuICAgIHZhciBlbnZWYXJzID1cbiAgICAgICdcXFxcYig/OkJBU0h8QkFTSE9QVFN8QkFTSF9BTElBU0VTfEJBU0hfQVJHQ3xCQVNIX0FSR1Z8QkFTSF9DTURTfEJBU0hfQ09NUExFVElPTl9DT01QQVRfRElSfEJBU0hfTElORU5PfEJBU0hfUkVNQVRDSHxCQVNIX1NPVVJDRXxCQVNIX1ZFUlNJTkZPfEJBU0hfVkVSU0lPTnxDT0xPUlRFUk18Q09MVU1OU3xDT01QX1dPUkRCUkVBS1N8REJVU19TRVNTSU9OX0JVU19BRERSRVNTfERFRkFVTFRTX1BBVEh8REVTS1RPUF9TRVNTSU9OfERJUlNUQUNLfERJU1BMQVl8RVVJRHxHRE1TRVNTSU9OfEdETV9MQU5HfEdOT01FX0tFWVJJTkdfQ09OVFJPTHxHTk9NRV9LRVlSSU5HX1BJRHxHUEdfQUdFTlRfSU5GT3xHUk9VUFN8SElTVENPTlRST0x8SElTVEZJTEV8SElTVEZJTEVTSVpFfEhJU1RTSVpFfEhPTUV8SE9TVE5BTUV8SE9TVFRZUEV8SUZTfElOU1RBTkNFfEpPQnxMQU5HfExBTkdVQUdFfExDX0FERFJFU1N8TENfQUxMfExDX0lERU5USUZJQ0FUSU9OfExDX01FQVNVUkVNRU5UfExDX01PTkVUQVJZfExDX05BTUV8TENfTlVNRVJJQ3xMQ19QQVBFUnxMQ19URUxFUEhPTkV8TENfVElNRXxMRVNTQ0xPU0V8TEVTU09QRU58TElORVN8TE9HTkFNRXxMU19DT0xPUlN8TUFDSFRZUEV8TUFJTENIRUNLfE1BTkRBVE9SWV9QQVRIfE5PX0FUX0JSSURHRXxPTERQV0R8T1BURVJSfE9QVElORHxPUkJJVF9TT0NLRVRESVJ8T1NUWVBFfFBBUEVSU0laRXxQQVRIfFBJUEVTVEFUVVN8UFBJRHxQUzF8UFMyfFBTM3xQUzR8UFdEfFJBTkRPTXxSRVBMWXxTRUNPTkRTfFNFTElOVVhfSU5JVHxTRVNTSU9OfFNFU1NJT05UWVBFfFNFU1NJT05fTUFOQUdFUnxTSEVMTHxTSEVMTE9QVFN8U0hMVkx8U1NIX0FVVEhfU09DS3xURVJNfFVJRHxVUFNUQVJUX0VWRU5UU3xVUFNUQVJUX0lOU1RBTkNFfFVQU1RBUlRfSk9CfFVQU1RBUlRfU0VTU0lPTnxVU0VSfFdJTkRPV0lEfFhBVVRIT1JJVFl8WERHX0NPTkZJR19ESVJTfFhER19DVVJSRU5UX0RFU0tUT1B8WERHX0RBVEFfRElSU3xYREdfR1JFRVRFUl9EQVRBX0RJUnxYREdfTUVOVV9QUkVGSVh8WERHX1JVTlRJTUVfRElSfFhER19TRUFUfFhER19TRUFUX1BBVEh8WERHX1NFU1NJT05fREVTS1RPUHxYREdfU0VTU0lPTl9JRHxYREdfU0VTU0lPTl9QQVRIfFhER19TRVNTSU9OX1RZUEV8WERHX1ZUTlJ8WE1PRElGSUVSUylcXFxcYidcbiAgICB2YXIgaW5zaWRlU3RyaW5nID0ge1xuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgcGF0dGVybjogUmVnRXhwKCdcXFxcJCcgKyBlbnZWYXJzKSxcbiAgICAgICAgYWxpYXM6ICdjb25zdGFudCdcbiAgICAgIH0sXG4gICAgICB2YXJpYWJsZTogW1xuICAgICAgICAvLyBbMF06IEFyaXRobWV0aWMgRW52aXJvbm1lbnRcbiAgICAgICAge1xuICAgICAgICAgIHBhdHRlcm46IC9cXCQ/XFwoXFwoW1xcc1xcU10rP1xcKVxcKS8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSAkIHNpZ24gYXQgdGhlIGJlZ2lubmluZyBoaWdobGlnaHQgJCgoIGFuZCApKSBhcyB2YXJpYWJsZVxuICAgICAgICAgICAgdmFyaWFibGU6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oXlxcJFxcKFxcKFtcXHNcXFNdKylcXClcXCkvLFxuICAgICAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgL15cXCRcXChcXCgvXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbnVtYmVyOiAvXFxiMHhbXFxkQS1GYS1mXStcXGJ8KD86XFxiXFxkK1xcLj9cXGQqfFxcQlxcLlxcZCspKD86W0VlXS0/XFxkKyk/LyxcbiAgICAgICAgICAgIC8vIE9wZXJhdG9ycyBhY2NvcmRpbmcgdG8gaHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iYXNoL21hbnVhbC9iYXNocmVmLmh0bWwjU2hlbGwtQXJpdGhtZXRpY1xuICAgICAgICAgICAgb3BlcmF0b3I6IC8tLT98LT18XFwrXFwrP3xcXCs9fCE9P3x+fFxcKlxcKj98XFwqPXxcXC89P3wlPT98PDw9P3w+Pj0/fDw9P3w+PT98PT0/fCYmP3wmPXxcXF49P3xcXHxcXHw/fFxcfD18XFw/fDovLFxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gJCBzaWduIGF0IHRoZSBiZWdpbm5pbmcgaGlnaGxpZ2h0ICgoIGFuZCApKSBhcyBwdW5jdHVhdGlvblxuICAgICAgICAgICAgcHVuY3R1YXRpb246IC9cXChcXCg/fFxcKVxcKT98LHw7L1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgLy8gWzFdOiBDb21tYW5kIFN1YnN0aXR1dGlvblxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogL1xcJFxcKCg/OlxcKFteKV0rXFwpfFteKCldKStcXCl8YFteYF0rYC8sXG4gICAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgdmFyaWFibGU6IC9eXFwkXFwofF5gfFxcKSR8YCQvXG4gICAgICAgICAgfVxuICAgICAgICB9LCAvLyBbMl06IEJyYWNlIGV4cGFuc2lvblxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogL1xcJFxce1tefV0rXFx9LyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICBvcGVyYXRvcjogLzpbLT0/K10/fFshXFwvXXwjIz98JSU/fFxcXlxcXj98LCw/LyxcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvW1xcW1xcXV0vLFxuICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogUmVnRXhwKCcoXFxcXHspJyArIGVudlZhcnMpLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgICBhbGlhczogJ2NvbnN0YW50J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgL1xcJCg/Olxcdyt8WyM/KiFAJF0pL1xuICAgICAgXSxcbiAgICAgIC8vIEVzY2FwZSBzZXF1ZW5jZXMgZnJvbSBlY2hvIGFuZCBwcmludGYncyBtYW51YWxzLCBhbmQgZXNjYXBlZCBxdW90ZXMuXG4gICAgICBlbnRpdHk6IC9cXFxcKD86W2FiY2VFZm5ydHZcXFxcXCJdfE8/WzAtN117MSwzfXx4WzAtOWEtZkEtRl17MSwyfXx1WzAtOWEtZkEtRl17NH18VVswLTlhLWZBLUZdezh9KS9cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLmJhc2ggPSB7XG4gICAgICBzaGViYW5nOiB7XG4gICAgICAgIHBhdHRlcm46IC9eIyFcXHMqXFwvLiovLFxuICAgICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICAgIH0sXG4gICAgICBjb21tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXlwie1xcXFwkXSkjLiovLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9LFxuICAgICAgJ2Z1bmN0aW9uLW5hbWUnOiBbXG4gICAgICAgIC8vIGEpIGZ1bmN0aW9uIGZvbyB7XG4gICAgICAgIC8vIGIpIGZvbygpIHtcbiAgICAgICAgLy8gYykgZnVuY3Rpb24gZm9vKCkge1xuICAgICAgICAvLyBidXQgbm90IOKAnGZvbyB74oCdXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBhKSBhbmQgYylcbiAgICAgICAgICBwYXR0ZXJuOiAvKFxcYmZ1bmN0aW9uXFxzKylcXHcrKD89KD86XFxzKlxcKD86XFxzKlxcKSk/XFxzKlxceykvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8vIGIpXG4gICAgICAgICAgcGF0dGVybjogL1xcYlxcdysoPz1cXHMqXFwoXFxzKlxcKVxccypcXHspLyxcbiAgICAgICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgLy8gSGlnaGxpZ2h0IHZhcmlhYmxlIG5hbWVzIGFzIHZhcmlhYmxlcyBpbiBmb3IgYW5kIHNlbGVjdCBiZWdpbm5pbmdzLlxuICAgICAgJ2Zvci1vci1zZWxlY3QnOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXFxiKD86Zm9yfHNlbGVjdClcXHMrKVxcdysoPz1cXHMraW5cXHMpLyxcbiAgICAgICAgYWxpYXM6ICd2YXJpYWJsZScsXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICAvLyBIaWdobGlnaHQgdmFyaWFibGUgbmFtZXMgYXMgdmFyaWFibGVzIGluIHRoZSBsZWZ0LWhhbmQgcGFydFxuICAgICAgLy8gb2YgYXNzaWdubWVudHMgKOKAnD3igJ0gYW5kIOKAnCs94oCdKS5cbiAgICAgICdhc3NpZ24tbGVmdCc6IHtcbiAgICAgICAgcGF0dGVybjogLyhefFtcXHM7fCZdfFs8Pl1cXCgpXFx3Kyg/PVxcKz89KS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJyhefFtcXFxcczt8Jl18Wzw+XVxcXFwoKScgKyBlbnZWYXJzKSxcbiAgICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgICBhbGlhczogJ2NvbnN0YW50J1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYWxpYXM6ICd2YXJpYWJsZScsXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBzdHJpbmc6IFtcbiAgICAgICAgLy8gU3VwcG9ydCBmb3IgSGVyZS1kb2N1bWVudHMgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGVyZV9kb2N1bWVudFxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLygoPzpefFtePF0pPDwtP1xccyopKFxcdys/KVxccyooPzpcXHI/XFxufFxccikoPzpbXFxzXFxTXSkqPyg/Olxccj9cXG58XFxyKVxcMi8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBpbnNpZGVTdHJpbmdcbiAgICAgICAgfSwgLy8gSGVyZS1kb2N1bWVudCB3aXRoIHF1b3RlcyBhcm91bmQgdGhlIHRhZ1xuICAgICAgICAvLyDihpIgTm8gZXhwYW5zaW9uIChzbyBubyDigJxpbnNpZGXigJ0pLlxuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLygoPzpefFtePF0pPDwtP1xccyopKFtcIiddKShcXHcrKVxcMlxccyooPzpcXHI/XFxufFxccikoPzpbXFxzXFxTXSkqPyg/Olxccj9cXG58XFxyKVxcMy8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgICAgfSwgLy8g4oCcTm9ybWFs4oCdIHN0cmluZ1xuICAgICAgICB7XG4gICAgICAgICAgcGF0dGVybjogLyhbXCInXSkoPzpcXFxcW1xcc1xcU118XFwkXFwoW14pXStcXCl8YFteYF0rYHwoPyFcXDEpW15cXFxcXSkqXFwxLyxcbiAgICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiBpbnNpZGVTdHJpbmdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cCgnXFxcXCQ/JyArIGVudlZhcnMpLFxuICAgICAgICBhbGlhczogJ2NvbnN0YW50J1xuICAgICAgfSxcbiAgICAgIHZhcmlhYmxlOiBpbnNpZGVTdHJpbmcudmFyaWFibGUsXG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W1xcczt8Jl18Wzw+XVxcKCkoPzphZGR8YXByb3Bvc3xhcHR8YXB0aXR1ZGV8YXB0LWNhY2hlfGFwdC1nZXR8YXNwZWxsfGF1dG9teXNxbGJhY2t1cHxhd2t8YmFzZW5hbWV8YmFzaHxiY3xiY29uc29sZXxiZ3xiemlwMnxjYWx8Y2F0fGNmZGlza3xjaGdycHxjaGtjb25maWd8Y2htb2R8Y2hvd258Y2hyb290fGNrc3VtfGNsZWFyfGNtcHxjb2x1bW58Y29tbXxjcHxjcm9ufGNyb250YWJ8Y3NwbGl0fGN1cmx8Y3V0fGRhdGV8ZGN8ZGR8ZGRyZXNjdWV8ZGVib290c3RyYXB8ZGZ8ZGlmZnxkaWZmM3xkaWd8ZGlyfGRpcmNvbG9yc3xkaXJuYW1lfGRpcnN8ZG1lc2d8ZHV8ZWdyZXB8ZWplY3R8ZW52fGV0aHRvb2x8ZXhwYW5kfGV4cGVjdHxleHByfGZkZm9ybWF0fGZkaXNrfGZnfGZncmVwfGZpbGV8ZmluZHxmbXR8Zm9sZHxmb3JtYXR8ZnJlZXxmc2NrfGZ0cHxmdXNlcnxnYXdrfGdpdHxncGFydGVkfGdyZXB8Z3JvdXBhZGR8Z3JvdXBkZWx8Z3JvdXBtb2R8Z3JvdXBzfGdydWItbWtjb25maWd8Z3ppcHxoYWx0fGhlYWR8aGd8aGlzdG9yeXxob3N0fGhvc3RuYW1lfGh0b3B8aWNvbnZ8aWR8aWZjb25maWd8aWZkb3dufGlmdXB8aW1wb3J0fGluc3RhbGx8aXB8am9ic3xqb2lufGtpbGx8a2lsbGFsbHxsZXNzfGxpbmt8bG58bG9jYXRlfGxvZ25hbWV8bG9ncm90YXRlfGxvb2t8bHBjfGxwcnxscHJpbnR8bHByaW50ZHxscHJpbnRxfGxwcm18bHN8bHNvZnxseW54fG1ha2V8bWFufG1jfG1kYWRtfG1rY29uZmlnfG1rZGlyfG1rZTJmc3xta2ZpZm98bWtmc3xta2lzb2ZzfG1rbm9kfG1rc3dhcHxtbXZ8bW9yZXxtb3N0fG1vdW50fG10b29sc3xtdHJ8bXV0dHxtdnxuYW5vfG5jfG5ldHN0YXR8bmljZXxubHxub2h1cHxub3RpZnktc2VuZHxucG18bnNsb29rdXB8b3B8b3BlbnxwYXJ0ZWR8cGFzc3dkfHBhc3RlfHBhdGhjaGt8cGluZ3xwa2lsbHxwbnBtfHBvcGR8cHJ8cHJpbnRjYXB8cHJpbnRlbnZ8cHN8cHVzaGR8cHZ8cXVvdGF8cXVvdGFjaGVja3xxdW90YWN0bHxyYW18cmFyfHJjcHxyZWJvb3R8cmVtc3luY3xyZW5hbWV8cmVuaWNlfHJldnxybXxybWRpcnxycG18cnN5bmN8c2NwfHNjcmVlbnxzZGlmZnxzZWR8c2VuZG1haWx8c2VxfHNlcnZpY2V8c2Z0cHxzaHxzaGVsbGNoZWNrfHNodWZ8c2h1dGRvd258c2xlZXB8c2xvY2F0ZXxzb3J0fHNwbGl0fHNzaHxzdGF0fHN0cmFjZXxzdXxzdWRvfHN1bXxzdXNwZW5kfHN3YXBvbnxzeW5jfHRhY3x0YWlsfHRhcnx0ZWV8dGltZXx0aW1lb3V0fHRvcHx0b3VjaHx0cnx0cmFjZXJvdXRlfHRzb3J0fHR0eXx1bW91bnR8dW5hbWV8dW5leHBhbmR8dW5pcXx1bml0c3x1bnJhcnx1bnNoYXJ8dW56aXB8dXBkYXRlLWdydWJ8dXB0aW1lfHVzZXJhZGR8dXNlcmRlbHx1c2VybW9kfHVzZXJzfHV1ZGVjb2RlfHV1ZW5jb2RlfHZ8dmRpcnx2aXx2aW18dmlyc2h8dm1zdGF0fHdhaXR8d2F0Y2h8d2N8d2dldHx3aGVyZWlzfHdoaWNofHdob3x3aG9hbWl8d3JpdGV8eGFyZ3N8eGRnLW9wZW58eWFybnx5ZXN8emVuaXR5fHppcHx6c2h8enlwcGVyKSg/PSR8WylcXHM7fCZdKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBrZXl3b3JkOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXFxzO3wmXXxbPD5dXFwoKSg/OmlmfHRoZW58ZWxzZXxlbGlmfGZpfGZvcnx3aGlsZXxpbnxjYXNlfGVzYWN8ZnVuY3Rpb258c2VsZWN0fGRvfGRvbmV8dW50aWwpKD89JHxbKVxcczt8Jl0pLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIC8vIGh0dHBzOi8vd3d3LmdudS5vcmcvc29mdHdhcmUvYmFzaC9tYW51YWwvaHRtbF9ub2RlL1NoZWxsLUJ1aWx0aW4tQ29tbWFuZHMuaHRtbFxuICAgICAgYnVpbHRpbjoge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W1xcczt8Jl18Wzw+XVxcKCkoPzpcXC58OnxicmVha3xjZHxjb250aW51ZXxldmFsfGV4ZWN8ZXhpdHxleHBvcnR8Z2V0b3B0c3xoYXNofHB3ZHxyZWFkb25seXxyZXR1cm58c2hpZnR8dGVzdHx0aW1lc3x0cmFwfHVtYXNrfHVuc2V0fGFsaWFzfGJpbmR8YnVpbHRpbnxjYWxsZXJ8Y29tbWFuZHxkZWNsYXJlfGVjaG98ZW5hYmxlfGhlbHB8bGV0fGxvY2FsfGxvZ291dHxtYXBmaWxlfHByaW50ZnxyZWFkfHJlYWRhcnJheXxzb3VyY2V8dHlwZXx0eXBlc2V0fHVsaW1pdHx1bmFsaWFzfHNldHxzaG9wdCkoPz0kfFspXFxzO3wmXSkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAvLyBBbGlhcyBhZGRlZCB0byBtYWtlIHRob3NlIGVhc2llciB0byBkaXN0aW5ndWlzaCBmcm9tIHN0cmluZ3MuXG4gICAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICAgIH0sXG4gICAgICBib29sZWFuOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxbXFxzO3wmXXxbPD5dXFwoKSg/OnRydWV8ZmFsc2UpKD89JHxbKVxcczt8Jl0pLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICdmaWxlLWRlc2NyaXB0b3InOiB7XG4gICAgICAgIHBhdHRlcm46IC9cXEImXFxkXFxiLyxcbiAgICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgICB9LFxuICAgICAgb3BlcmF0b3I6IHtcbiAgICAgICAgLy8gTG90cyBvZiByZWRpcmVjdGlvbnMgaGVyZSwgYnV0IG5vdCBqdXN0IHRoYXQuXG4gICAgICAgIHBhdHRlcm46IC9cXGQ/PD58PlxcfHxcXCs9fD09P3whPT98PX58PDxbPC1dP3xbJlxcZF0/Pj58XFxkP1s8Pl0mP3wmWz4mXT98XFx8WyZ8XT98PD0/fD49Py8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdmaWxlLWRlc2NyaXB0b3InOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXlxcZC8sXG4gICAgICAgICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwdW5jdHVhdGlvbjogL1xcJD9cXChcXCg/fFxcKVxcKT98XFwuXFwufFt7fVtcXF07XFxcXF0vLFxuICAgICAgbnVtYmVyOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXnxcXHMpKD86WzEtOV1cXGQqfDApKD86Wy4sXVxcZCspP1xcYi8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgLyogUGF0dGVybnMgaW4gY29tbWFuZCBzdWJzdGl0dXRpb24uICovXG4gICAgdmFyIHRvQmVDb3BpZWQgPSBbXG4gICAgICAnY29tbWVudCcsXG4gICAgICAnZnVuY3Rpb24tbmFtZScsXG4gICAgICAnZm9yLW9yLXNlbGVjdCcsXG4gICAgICAnYXNzaWduLWxlZnQnLFxuICAgICAgJ3N0cmluZycsXG4gICAgICAnZW52aXJvbm1lbnQnLFxuICAgICAgJ2Z1bmN0aW9uJyxcbiAgICAgICdrZXl3b3JkJyxcbiAgICAgICdidWlsdGluJyxcbiAgICAgICdib29sZWFuJyxcbiAgICAgICdmaWxlLWRlc2NyaXB0b3InLFxuICAgICAgJ29wZXJhdG9yJyxcbiAgICAgICdwdW5jdHVhdGlvbicsXG4gICAgICAnbnVtYmVyJ1xuICAgIF1cbiAgICB2YXIgaW5zaWRlID0gaW5zaWRlU3RyaW5nLnZhcmlhYmxlWzFdLmluc2lkZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9CZUNvcGllZC5sZW5ndGg7IGkrKykge1xuICAgICAgaW5zaWRlW3RvQmVDb3BpZWRbaV1dID0gUHJpc20ubGFuZ3VhZ2VzLmJhc2hbdG9CZUNvcGllZFtpXV1cbiAgICB9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLnNoZWxsID0gUHJpc20ubGFuZ3VhZ2VzLmJhc2hcbiAgfSkoUHJpc20pXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBqc29uXG5qc29uLmRpc3BsYXlOYW1lID0gJ2pzb24nXG5qc29uLmFsaWFzZXMgPSBbXVxuZnVuY3Rpb24ganNvbihQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuanNvbiA9IHtcbiAgICBwcm9wZXJ0eToge1xuICAgICAgcGF0dGVybjogL1wiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/PVxccyo6KS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIHN0cmluZzoge1xuICAgICAgcGF0dGVybjogL1wiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/IVxccyo6KS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgIGNvbW1lbnQ6IC9cXC9cXC8uKnxcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICBudW1iZXI6IC8tP1xcZCtcXC4/XFxkKihlWystXT9cXGQrKT8vaSxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF0sXS8sXG4gICAgb3BlcmF0b3I6IC86LyxcbiAgICBib29sZWFuOiAvXFxiKD86dHJ1ZXxmYWxzZSlcXGIvLFxuICAgIG51bGw6IHtcbiAgICAgIHBhdHRlcm46IC9cXGJudWxsXFxiLyxcbiAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICB9XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHB5dGhvblxucHl0aG9uLmRpc3BsYXlOYW1lID0gJ3B5dGhvbidcbnB5dGhvbi5hbGlhc2VzID0gWydweSddXG5mdW5jdGlvbiBweXRob24oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnB5dGhvbiA9IHtcbiAgICBjb21tZW50OiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSkjLiovLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgJ3N0cmluZy1pbnRlcnBvbGF0aW9uJzoge1xuICAgICAgcGF0dGVybjogLyg/OmZ8cmZ8ZnIpKD86KFwiXCJcInwnJycpW1xcc1xcU10rP1xcMXwoXCJ8JykoPzpcXFxcLnwoPyFcXDIpW15cXFxcXFxyXFxuXSkqXFwyKS9pLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGludGVycG9sYXRpb246IHtcbiAgICAgICAgICAvLyBcIntcIiA8ZXhwcmVzc2lvbj4gPG9wdGlvbmFsIFwiIXNcIiwgXCIhclwiLCBvciBcIiFhXCI+IDxvcHRpb25hbCBcIjpcIiBmb3JtYXQgc3BlY2lmaWVyPiBcIn1cIlxuICAgICAgICAgIHBhdHRlcm46IC8oKD86XnxbXntdKSg/Ont7KSopeyg/IXspKD86W157fV18eyg/IXspKD86W157fV18eyg/IXspKD86W157fV0pK30pK30pK30vLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnZm9ybWF0LXNwZWMnOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC8oOilbXjooKXt9XSsoPz19JCkvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ2NvbnZlcnNpb24tb3B0aW9uJzoge1xuICAgICAgICAgICAgICBwYXR0ZXJuOiAvIVtzcmFdKD89Wzp9XSQpLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0OiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdHJpbmc6IC9bXFxzXFxTXSsvXG4gICAgICB9XG4gICAgfSxcbiAgICAndHJpcGxlLXF1b3RlZC1zdHJpbmcnOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86W3J1Yl18cmJ8YnIpPyhcIlwiXCJ8JycnKVtcXHNcXFNdKz9cXDEvaSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86W3J1Yl18cmJ8YnIpPyhcInwnKSg/OlxcXFwufCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvaSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgZnVuY3Rpb246IHtcbiAgICAgIHBhdHRlcm46IC8oKD86XnxcXHMpZGVmWyBcXHRdKylbYS16QS1aX11cXHcqKD89XFxzKlxcKCkvZyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjogLyhcXGJjbGFzc1xccyspXFx3Ky9pLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgZGVjb3JhdG9yOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5cXHMqKUBcXHcrKD86XFwuXFx3KykqL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6IFsnYW5ub3RhdGlvbicsICdwdW5jdHVhdGlvbiddLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuL1xuICAgICAgfVxuICAgIH0sXG4gICAga2V5d29yZDogL1xcYig/OmFuZHxhc3xhc3NlcnR8YXN5bmN8YXdhaXR8YnJlYWt8Y2xhc3N8Y29udGludWV8ZGVmfGRlbHxlbGlmfGVsc2V8ZXhjZXB0fGV4ZWN8ZmluYWxseXxmb3J8ZnJvbXxnbG9iYWx8aWZ8aW1wb3J0fGlufGlzfGxhbWJkYXxub25sb2NhbHxub3R8b3J8cGFzc3xwcmludHxyYWlzZXxyZXR1cm58dHJ5fHdoaWxlfHdpdGh8eWllbGQpXFxiLyxcbiAgICBidWlsdGluOiAvXFxiKD86X19pbXBvcnRfX3xhYnN8YWxsfGFueXxhcHBseXxhc2NpaXxiYXNlc3RyaW5nfGJpbnxib29sfGJ1ZmZlcnxieXRlYXJyYXl8Ynl0ZXN8Y2FsbGFibGV8Y2hyfGNsYXNzbWV0aG9kfGNtcHxjb2VyY2V8Y29tcGlsZXxjb21wbGV4fGRlbGF0dHJ8ZGljdHxkaXJ8ZGl2bW9kfGVudW1lcmF0ZXxldmFsfGV4ZWNmaWxlfGZpbGV8ZmlsdGVyfGZsb2F0fGZvcm1hdHxmcm96ZW5zZXR8Z2V0YXR0cnxnbG9iYWxzfGhhc2F0dHJ8aGFzaHxoZWxwfGhleHxpZHxpbnB1dHxpbnR8aW50ZXJufGlzaW5zdGFuY2V8aXNzdWJjbGFzc3xpdGVyfGxlbnxsaXN0fGxvY2Fsc3xsb25nfG1hcHxtYXh8bWVtb3J5dmlld3xtaW58bmV4dHxvYmplY3R8b2N0fG9wZW58b3JkfHBvd3xwcm9wZXJ0eXxyYW5nZXxyYXdfaW5wdXR8cmVkdWNlfHJlbG9hZHxyZXByfHJldmVyc2VkfHJvdW5kfHNldHxzZXRhdHRyfHNsaWNlfHNvcnRlZHxzdGF0aWNtZXRob2R8c3RyfHN1bXxzdXBlcnx0dXBsZXx0eXBlfHVuaWNocnx1bmljb2RlfHZhcnN8eHJhbmdlfHppcClcXGIvLFxuICAgIGJvb2xlYW46IC9cXGIoPzpUcnVlfEZhbHNlfE5vbmUpXFxiLyxcbiAgICBudW1iZXI6IC8oPzpcXGIoPz1cXGQpfFxcQig/PVxcLikpKD86MFtib10pPyg/Oig/OlxcZHwweFtcXGRhLWZdKVtcXGRhLWZdKlxcLj9cXGQqfFxcLlxcZCspKD86ZVsrLV0/XFxkKyk/aj9cXGIvaSxcbiAgICBvcGVyYXRvcjogL1stKyU9XT0/fCE9fFxcKlxcKj89P3xcXC9cXC8/PT98PFs8PT5dP3w+Wz0+XT98WyZ8Xn5dLyxcbiAgICBwdW5jdHVhdGlvbjogL1t7fVtcXF07KCksLjpdL1xuICB9XG4gIFByaXNtLmxhbmd1YWdlcy5weXRob25bJ3N0cmluZy1pbnRlcnBvbGF0aW9uJ10uaW5zaWRlW1xuICAgICdpbnRlcnBvbGF0aW9uJ1xuICBdLmluc2lkZS5yZXN0ID0gUHJpc20ubGFuZ3VhZ2VzLnB5dGhvblxuICBQcmlzbS5sYW5ndWFnZXMucHkgPSBQcmlzbS5sYW5ndWFnZXMucHl0aG9uXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZWFzb25cbnJlYXNvbi5kaXNwbGF5TmFtZSA9ICdyZWFzb24nXG5yZWFzb24uYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiByZWFzb24oUHJpc20pIHtcbiAgUHJpc20ubGFuZ3VhZ2VzLnJlYXNvbiA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAgIGNvbW1lbnQ6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj9cXCpcXC8vLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgc3RyaW5nOiB7XG4gICAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlxcXFxcXHJcXG5cIl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgLy8gJ2NsYXNzLW5hbWUnIG11c3QgYmUgbWF0Y2hlZCAqYWZ0ZXIqICdjb25zdHJ1Y3RvcicgZGVmaW5lZCBiZWxvd1xuICAgICdjbGFzcy1uYW1lJzogL1xcYltBLVpdXFx3Ki8sXG4gICAga2V5d29yZDogL1xcYig/OmFuZHxhc3xhc3NlcnR8YmVnaW58Y2xhc3N8Y29uc3RyYWludHxkb3xkb25lfGRvd250b3xlbHNlfGVuZHxleGNlcHRpb258ZXh0ZXJuYWx8Zm9yfGZ1bnxmdW5jdGlvbnxmdW5jdG9yfGlmfGlufGluY2x1ZGV8aW5oZXJpdHxpbml0aWFsaXplcnxsYXp5fGxldHxtZXRob2R8bW9kdWxlfG11dGFibGV8bmV3fG5vbnJlY3xvYmplY3R8b2Z8b3Blbnxvcnxwcml2YXRlfHJlY3xzaWd8c3RydWN0fHN3aXRjaHx0aGVufHRvfHRyeXx0eXBlfHZhbHx2aXJ0dWFsfHdoZW58d2hpbGV8d2l0aClcXGIvLFxuICAgIG9wZXJhdG9yOiAvXFwuezN9fDpbOj1dfFxcfD58LT58PSg/Oj09P3w+KT98PD0/fD49P3xbfF4/JyMhfmBdfFsrXFwtKlxcL11cXC4/fFxcYig/Om1vZHxsYW5kfGxvcnxseG9yfGxzbHxsc3J8YXNyKVxcYi9cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgncmVhc29uJywgJ2NsYXNzLW5hbWUnLCB7XG4gICAgY2hhcmFjdGVyOiB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OlxcXFx4W1xcZGEtZl17Mn18XFxcXG9bMC0zXVswLTddWzAtN118XFxcXFxcZHszfXxcXFxcLnxbXidcXFxcXFxyXFxuXSknLyxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIC8vIE5lZ2F0aXZlIGxvb2stYWhlYWQgcHJldmVudHMgZnJvbSBtYXRjaGluZyB0aGluZ3MgbGlrZSBTdHJpbmcuY2FwaXRhbGl6ZVxuICAgICAgcGF0dGVybjogL1xcYltBLVpdXFx3KlxcYig/IVxccypcXC4pLyxcbiAgICAgIGFsaWFzOiAndmFyaWFibGUnXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgcGF0dGVybjogL1xcYlthLXpdXFx3Kig/PTo6KS8sXG4gICAgICBhbGlhczogJ3N5bWJvbCdcbiAgICB9XG4gIH0pIC8vIFdlIGNhbid0IG1hdGNoIGZ1bmN0aW9ucyBwcm9wZXJ0eSwgc28gbGV0J3Mgbm90IGV2ZW4gdHJ5LlxuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnJlYXNvbi5mdW5jdGlvblxufVxuIiwiJ3VzZSBzdHJpY3QnXG52YXIgcmVmcmFjdG9ySnN4ID0gcmVxdWlyZSgnLi9qc3guanMnKVxudmFyIHJlZnJhY3RvclR5cGVzY3JpcHQgPSByZXF1aXJlKCcuL3R5cGVzY3JpcHQuanMnKVxubW9kdWxlLmV4cG9ydHMgPSB0c3hcbnRzeC5kaXNwbGF5TmFtZSA9ICd0c3gnXG50c3guYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiB0c3goUHJpc20pIHtcbiAgUHJpc20ucmVnaXN0ZXIocmVmcmFjdG9ySnN4KVxuICBQcmlzbS5yZWdpc3RlcihyZWZyYWN0b3JUeXBlc2NyaXB0KVxuICB2YXIgdHlwZXNjcmlwdCA9IFByaXNtLnV0aWwuY2xvbmUoUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQpXG4gIFByaXNtLmxhbmd1YWdlcy50c3ggPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdqc3gnLCB0eXBlc2NyaXB0KVxufVxuIiwiXG47KGZ1bmN0aW9uIChuYW1lLCByb290LCBmYWN0b3J5KSB7XG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKVxuICAgIG1vZHVsZS5leHBvcnRzWydkZWZhdWx0J10gPSBmYWN0b3J5KClcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoZmFjdG9yeSlcbiAgfVxuICBlbHNlIHtcbiAgICByb290W25hbWVdID0gZmFjdG9yeSgpXG4gIH1cbn0oJ3NsdWdpZnknLCB0aGlzLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBjaGFyTWFwID0gSlNPTi5wYXJzZSgne1wiJFwiOlwiZG9sbGFyXCIsXCIlXCI6XCJwZXJjZW50XCIsXCImXCI6XCJhbmRcIixcIjxcIjpcImxlc3NcIixcIj5cIjpcImdyZWF0ZXJcIixcInxcIjpcIm9yXCIsXCLColwiOlwiY2VudFwiLFwiwqNcIjpcInBvdW5kXCIsXCLCpFwiOlwiY3VycmVuY3lcIixcIsKlXCI6XCJ5ZW5cIixcIsKpXCI6XCIoYylcIixcIsKqXCI6XCJhXCIsXCLCrlwiOlwiKHIpXCIsXCLCulwiOlwib1wiLFwiw4BcIjpcIkFcIixcIsOBXCI6XCJBXCIsXCLDglwiOlwiQVwiLFwiw4NcIjpcIkFcIixcIsOEXCI6XCJBXCIsXCLDhVwiOlwiQVwiLFwiw4ZcIjpcIkFFXCIsXCLDh1wiOlwiQ1wiLFwiw4hcIjpcIkVcIixcIsOJXCI6XCJFXCIsXCLDilwiOlwiRVwiLFwiw4tcIjpcIkVcIixcIsOMXCI6XCJJXCIsXCLDjVwiOlwiSVwiLFwiw45cIjpcIklcIixcIsOPXCI6XCJJXCIsXCLDkFwiOlwiRFwiLFwiw5FcIjpcIk5cIixcIsOSXCI6XCJPXCIsXCLDk1wiOlwiT1wiLFwiw5RcIjpcIk9cIixcIsOVXCI6XCJPXCIsXCLDllwiOlwiT1wiLFwiw5hcIjpcIk9cIixcIsOZXCI6XCJVXCIsXCLDmlwiOlwiVVwiLFwiw5tcIjpcIlVcIixcIsOcXCI6XCJVXCIsXCLDnVwiOlwiWVwiLFwiw55cIjpcIlRIXCIsXCLDn1wiOlwic3NcIixcIsOgXCI6XCJhXCIsXCLDoVwiOlwiYVwiLFwiw6JcIjpcImFcIixcIsOjXCI6XCJhXCIsXCLDpFwiOlwiYVwiLFwiw6VcIjpcImFcIixcIsOmXCI6XCJhZVwiLFwiw6dcIjpcImNcIixcIsOoXCI6XCJlXCIsXCLDqVwiOlwiZVwiLFwiw6pcIjpcImVcIixcIsOrXCI6XCJlXCIsXCLDrFwiOlwiaVwiLFwiw61cIjpcImlcIixcIsOuXCI6XCJpXCIsXCLDr1wiOlwiaVwiLFwiw7BcIjpcImRcIixcIsOxXCI6XCJuXCIsXCLDslwiOlwib1wiLFwiw7NcIjpcIm9cIixcIsO0XCI6XCJvXCIsXCLDtVwiOlwib1wiLFwiw7ZcIjpcIm9cIixcIsO4XCI6XCJvXCIsXCLDuVwiOlwidVwiLFwiw7pcIjpcInVcIixcIsO7XCI6XCJ1XCIsXCLDvFwiOlwidVwiLFwiw71cIjpcInlcIixcIsO+XCI6XCJ0aFwiLFwiw79cIjpcInlcIixcIsSAXCI6XCJBXCIsXCLEgVwiOlwiYVwiLFwixIJcIjpcIkFcIixcIsSDXCI6XCJhXCIsXCLEhFwiOlwiQVwiLFwixIVcIjpcImFcIixcIsSGXCI6XCJDXCIsXCLEh1wiOlwiY1wiLFwixIxcIjpcIkNcIixcIsSNXCI6XCJjXCIsXCLEjlwiOlwiRFwiLFwixI9cIjpcImRcIixcIsSQXCI6XCJESlwiLFwixJFcIjpcImRqXCIsXCLEklwiOlwiRVwiLFwixJNcIjpcImVcIixcIsSWXCI6XCJFXCIsXCLEl1wiOlwiZVwiLFwixJhcIjpcImVcIixcIsSZXCI6XCJlXCIsXCLEmlwiOlwiRVwiLFwixJtcIjpcImVcIixcIsSeXCI6XCJHXCIsXCLEn1wiOlwiZ1wiLFwixKJcIjpcIkdcIixcIsSjXCI6XCJnXCIsXCLEqFwiOlwiSVwiLFwixKlcIjpcImlcIixcIsSqXCI6XCJpXCIsXCLEq1wiOlwiaVwiLFwixK5cIjpcIklcIixcIsSvXCI6XCJpXCIsXCLEsFwiOlwiSVwiLFwixLFcIjpcImlcIixcIsS2XCI6XCJrXCIsXCLEt1wiOlwia1wiLFwixLtcIjpcIkxcIixcIsS8XCI6XCJsXCIsXCLEvVwiOlwiTFwiLFwixL5cIjpcImxcIixcIsWBXCI6XCJMXCIsXCLFglwiOlwibFwiLFwixYNcIjpcIk5cIixcIsWEXCI6XCJuXCIsXCLFhVwiOlwiTlwiLFwixYZcIjpcIm5cIixcIsWHXCI6XCJOXCIsXCLFiFwiOlwiblwiLFwixZBcIjpcIk9cIixcIsWRXCI6XCJvXCIsXCLFklwiOlwiT0VcIixcIsWTXCI6XCJvZVwiLFwixZRcIjpcIlJcIixcIsWVXCI6XCJyXCIsXCLFmFwiOlwiUlwiLFwixZlcIjpcInJcIixcIsWaXCI6XCJTXCIsXCLFm1wiOlwic1wiLFwixZ5cIjpcIlNcIixcIsWfXCI6XCJzXCIsXCLFoFwiOlwiU1wiLFwixaFcIjpcInNcIixcIsWiXCI6XCJUXCIsXCLFo1wiOlwidFwiLFwixaRcIjpcIlRcIixcIsWlXCI6XCJ0XCIsXCLFqFwiOlwiVVwiLFwixalcIjpcInVcIixcIsWqXCI6XCJ1XCIsXCLFq1wiOlwidVwiLFwixa5cIjpcIlVcIixcIsWvXCI6XCJ1XCIsXCLFsFwiOlwiVVwiLFwixbFcIjpcInVcIixcIsWyXCI6XCJVXCIsXCLFs1wiOlwidVwiLFwixbRcIjpcIldcIixcIsW1XCI6XCJ3XCIsXCLFtlwiOlwiWVwiLFwixbdcIjpcInlcIixcIsW4XCI6XCJZXCIsXCLFuVwiOlwiWlwiLFwixbpcIjpcInpcIixcIsW7XCI6XCJaXCIsXCLFvFwiOlwielwiLFwixb1cIjpcIlpcIixcIsW+XCI6XCJ6XCIsXCLGklwiOlwiZlwiLFwixqBcIjpcIk9cIixcIsahXCI6XCJvXCIsXCLGr1wiOlwiVVwiLFwixrBcIjpcInVcIixcIseIXCI6XCJMSlwiLFwix4lcIjpcImxqXCIsXCLHi1wiOlwiTkpcIixcIseMXCI6XCJualwiLFwiyJhcIjpcIlNcIixcIsiZXCI6XCJzXCIsXCLImlwiOlwiVFwiLFwiyJtcIjpcInRcIixcIsuaXCI6XCJvXCIsXCLOhlwiOlwiQVwiLFwizohcIjpcIkVcIixcIs6JXCI6XCJIXCIsXCLOilwiOlwiSVwiLFwizoxcIjpcIk9cIixcIs6OXCI6XCJZXCIsXCLOj1wiOlwiV1wiLFwizpBcIjpcImlcIixcIs6RXCI6XCJBXCIsXCLOklwiOlwiQlwiLFwizpNcIjpcIkdcIixcIs6UXCI6XCJEXCIsXCLOlVwiOlwiRVwiLFwizpZcIjpcIlpcIixcIs6XXCI6XCJIXCIsXCLOmFwiOlwiOFwiLFwizplcIjpcIklcIixcIs6aXCI6XCJLXCIsXCLOm1wiOlwiTFwiLFwizpxcIjpcIk1cIixcIs6dXCI6XCJOXCIsXCLOnlwiOlwiM1wiLFwizp9cIjpcIk9cIixcIs6gXCI6XCJQXCIsXCLOoVwiOlwiUlwiLFwizqNcIjpcIlNcIixcIs6kXCI6XCJUXCIsXCLOpVwiOlwiWVwiLFwizqZcIjpcIkZcIixcIs6nXCI6XCJYXCIsXCLOqFwiOlwiUFNcIixcIs6pXCI6XCJXXCIsXCLOqlwiOlwiSVwiLFwizqtcIjpcIllcIixcIs6sXCI6XCJhXCIsXCLOrVwiOlwiZVwiLFwizq5cIjpcImhcIixcIs6vXCI6XCJpXCIsXCLOsFwiOlwieVwiLFwizrFcIjpcImFcIixcIs6yXCI6XCJiXCIsXCLOs1wiOlwiZ1wiLFwizrRcIjpcImRcIixcIs61XCI6XCJlXCIsXCLOtlwiOlwielwiLFwizrdcIjpcImhcIixcIs64XCI6XCI4XCIsXCLOuVwiOlwiaVwiLFwizrpcIjpcImtcIixcIs67XCI6XCJsXCIsXCLOvFwiOlwibVwiLFwizr1cIjpcIm5cIixcIs6+XCI6XCIzXCIsXCLOv1wiOlwib1wiLFwiz4BcIjpcInBcIixcIs+BXCI6XCJyXCIsXCLPglwiOlwic1wiLFwiz4NcIjpcInNcIixcIs+EXCI6XCJ0XCIsXCLPhVwiOlwieVwiLFwiz4ZcIjpcImZcIixcIs+HXCI6XCJ4XCIsXCLPiFwiOlwicHNcIixcIs+JXCI6XCJ3XCIsXCLPilwiOlwiaVwiLFwiz4tcIjpcInlcIixcIs+MXCI6XCJvXCIsXCLPjVwiOlwieVwiLFwiz45cIjpcIndcIixcItCBXCI6XCJZb1wiLFwi0IJcIjpcIkRKXCIsXCLQhFwiOlwiWWVcIixcItCGXCI6XCJJXCIsXCLQh1wiOlwiWWlcIixcItCIXCI6XCJKXCIsXCLQiVwiOlwiTEpcIixcItCKXCI6XCJOSlwiLFwi0ItcIjpcIkNcIixcItCPXCI6XCJEWlwiLFwi0JBcIjpcIkFcIixcItCRXCI6XCJCXCIsXCLQklwiOlwiVlwiLFwi0JNcIjpcIkdcIixcItCUXCI6XCJEXCIsXCLQlVwiOlwiRVwiLFwi0JZcIjpcIlpoXCIsXCLQl1wiOlwiWlwiLFwi0JhcIjpcIklcIixcItCZXCI6XCJKXCIsXCLQmlwiOlwiS1wiLFwi0JtcIjpcIkxcIixcItCcXCI6XCJNXCIsXCLQnVwiOlwiTlwiLFwi0J5cIjpcIk9cIixcItCfXCI6XCJQXCIsXCLQoFwiOlwiUlwiLFwi0KFcIjpcIlNcIixcItCiXCI6XCJUXCIsXCLQo1wiOlwiVVwiLFwi0KRcIjpcIkZcIixcItClXCI6XCJIXCIsXCLQplwiOlwiQ1wiLFwi0KdcIjpcIkNoXCIsXCLQqFwiOlwiU2hcIixcItCpXCI6XCJTaFwiLFwi0KpcIjpcIlVcIixcItCrXCI6XCJZXCIsXCLQrFwiOlwiXCIsXCLQrVwiOlwiRVwiLFwi0K5cIjpcIll1XCIsXCLQr1wiOlwiWWFcIixcItCwXCI6XCJhXCIsXCLQsVwiOlwiYlwiLFwi0LJcIjpcInZcIixcItCzXCI6XCJnXCIsXCLQtFwiOlwiZFwiLFwi0LVcIjpcImVcIixcItC2XCI6XCJ6aFwiLFwi0LdcIjpcInpcIixcItC4XCI6XCJpXCIsXCLQuVwiOlwialwiLFwi0LpcIjpcImtcIixcItC7XCI6XCJsXCIsXCLQvFwiOlwibVwiLFwi0L1cIjpcIm5cIixcItC+XCI6XCJvXCIsXCLQv1wiOlwicFwiLFwi0YBcIjpcInJcIixcItGBXCI6XCJzXCIsXCLRglwiOlwidFwiLFwi0YNcIjpcInVcIixcItGEXCI6XCJmXCIsXCLRhVwiOlwiaFwiLFwi0YZcIjpcImNcIixcItGHXCI6XCJjaFwiLFwi0YhcIjpcInNoXCIsXCLRiVwiOlwic2hcIixcItGKXCI6XCJ1XCIsXCLRi1wiOlwieVwiLFwi0YxcIjpcIlwiLFwi0Y1cIjpcImVcIixcItGOXCI6XCJ5dVwiLFwi0Y9cIjpcInlhXCIsXCLRkVwiOlwieW9cIixcItGSXCI6XCJkalwiLFwi0ZRcIjpcInllXCIsXCLRllwiOlwiaVwiLFwi0ZdcIjpcInlpXCIsXCLRmFwiOlwialwiLFwi0ZlcIjpcImxqXCIsXCLRmlwiOlwibmpcIixcItGbXCI6XCJjXCIsXCLRnVwiOlwidVwiLFwi0Z9cIjpcImR6XCIsXCLSkFwiOlwiR1wiLFwi0pFcIjpcImdcIixcItKSXCI6XCJHSFwiLFwi0pNcIjpcImdoXCIsXCLSmlwiOlwiS0hcIixcItKbXCI6XCJraFwiLFwi0qJcIjpcIk5HXCIsXCLSo1wiOlwibmdcIixcItKuXCI6XCJVRVwiLFwi0q9cIjpcInVlXCIsXCLSsFwiOlwiVVwiLFwi0rFcIjpcInVcIixcItK6XCI6XCJIXCIsXCLSu1wiOlwiaFwiLFwi05hcIjpcIkFFXCIsXCLTmVwiOlwiYWVcIixcItOoXCI6XCJPRVwiLFwi06lcIjpcIm9lXCIsXCLguL9cIjpcImJhaHRcIixcIuGDkFwiOlwiYVwiLFwi4YORXCI6XCJiXCIsXCLhg5JcIjpcImdcIixcIuGDk1wiOlwiZFwiLFwi4YOUXCI6XCJlXCIsXCLhg5VcIjpcInZcIixcIuGDllwiOlwielwiLFwi4YOXXCI6XCJ0XCIsXCLhg5hcIjpcImlcIixcIuGDmVwiOlwia1wiLFwi4YOaXCI6XCJsXCIsXCLhg5tcIjpcIm1cIixcIuGDnFwiOlwiblwiLFwi4YOdXCI6XCJvXCIsXCLhg55cIjpcInBcIixcIuGDn1wiOlwiemhcIixcIuGDoFwiOlwiclwiLFwi4YOhXCI6XCJzXCIsXCLhg6JcIjpcInRcIixcIuGDo1wiOlwidVwiLFwi4YOkXCI6XCJmXCIsXCLhg6VcIjpcImtcIixcIuGDplwiOlwiZ2hcIixcIuGDp1wiOlwicVwiLFwi4YOoXCI6XCJzaFwiLFwi4YOpXCI6XCJjaFwiLFwi4YOqXCI6XCJ0c1wiLFwi4YOrXCI6XCJkelwiLFwi4YOsXCI6XCJ0c1wiLFwi4YOtXCI6XCJjaFwiLFwi4YOuXCI6XCJraFwiLFwi4YOvXCI6XCJqXCIsXCLhg7BcIjpcImhcIixcIuG6gFwiOlwiV1wiLFwi4bqBXCI6XCJ3XCIsXCLhuoJcIjpcIldcIixcIuG6g1wiOlwid1wiLFwi4bqEXCI6XCJXXCIsXCLhuoVcIjpcIndcIixcIuG6nlwiOlwiU1NcIixcIuG6oFwiOlwiQVwiLFwi4bqhXCI6XCJhXCIsXCLhuqJcIjpcIkFcIixcIuG6o1wiOlwiYVwiLFwi4bqkXCI6XCJBXCIsXCLhuqVcIjpcImFcIixcIuG6plwiOlwiQVwiLFwi4bqnXCI6XCJhXCIsXCLhuqhcIjpcIkFcIixcIuG6qVwiOlwiYVwiLFwi4bqqXCI6XCJBXCIsXCLhuqtcIjpcImFcIixcIuG6rFwiOlwiQVwiLFwi4bqtXCI6XCJhXCIsXCLhuq5cIjpcIkFcIixcIuG6r1wiOlwiYVwiLFwi4bqwXCI6XCJBXCIsXCLhurFcIjpcImFcIixcIuG6slwiOlwiQVwiLFwi4bqzXCI6XCJhXCIsXCLhurRcIjpcIkFcIixcIuG6tVwiOlwiYVwiLFwi4bq2XCI6XCJBXCIsXCLhurdcIjpcImFcIixcIuG6uFwiOlwiRVwiLFwi4bq5XCI6XCJlXCIsXCLhurpcIjpcIkVcIixcIuG6u1wiOlwiZVwiLFwi4bq8XCI6XCJFXCIsXCLhur1cIjpcImVcIixcIuG6vlwiOlwiRVwiLFwi4bq/XCI6XCJlXCIsXCLhu4BcIjpcIkVcIixcIuG7gVwiOlwiZVwiLFwi4buCXCI6XCJFXCIsXCLhu4NcIjpcImVcIixcIuG7hFwiOlwiRVwiLFwi4buFXCI6XCJlXCIsXCLhu4ZcIjpcIkVcIixcIuG7h1wiOlwiZVwiLFwi4buIXCI6XCJJXCIsXCLhu4lcIjpcImlcIixcIuG7ilwiOlwiSVwiLFwi4buLXCI6XCJpXCIsXCLhu4xcIjpcIk9cIixcIuG7jVwiOlwib1wiLFwi4buOXCI6XCJPXCIsXCLhu49cIjpcIm9cIixcIuG7kFwiOlwiT1wiLFwi4buRXCI6XCJvXCIsXCLhu5JcIjpcIk9cIixcIuG7k1wiOlwib1wiLFwi4buUXCI6XCJPXCIsXCLhu5VcIjpcIm9cIixcIuG7llwiOlwiT1wiLFwi4buXXCI6XCJvXCIsXCLhu5hcIjpcIk9cIixcIuG7mVwiOlwib1wiLFwi4buaXCI6XCJPXCIsXCLhu5tcIjpcIm9cIixcIuG7nFwiOlwiT1wiLFwi4budXCI6XCJvXCIsXCLhu55cIjpcIk9cIixcIuG7n1wiOlwib1wiLFwi4bugXCI6XCJPXCIsXCLhu6FcIjpcIm9cIixcIuG7olwiOlwiT1wiLFwi4bujXCI6XCJvXCIsXCLhu6RcIjpcIlVcIixcIuG7pVwiOlwidVwiLFwi4bumXCI6XCJVXCIsXCLhu6dcIjpcInVcIixcIuG7qFwiOlwiVVwiLFwi4bupXCI6XCJ1XCIsXCLhu6pcIjpcIlVcIixcIuG7q1wiOlwidVwiLFwi4busXCI6XCJVXCIsXCLhu61cIjpcInVcIixcIuG7rlwiOlwiVVwiLFwi4buvXCI6XCJ1XCIsXCLhu7BcIjpcIlVcIixcIuG7sVwiOlwidVwiLFwi4buyXCI6XCJZXCIsXCLhu7NcIjpcInlcIixcIuG7tFwiOlwiWVwiLFwi4bu1XCI6XCJ5XCIsXCLhu7ZcIjpcIllcIixcIuG7t1wiOlwieVwiLFwi4bu4XCI6XCJZXCIsXCLhu7lcIjpcInlcIixcIuKAmFwiOlwiXFwnXCIsXCLigJlcIjpcIlxcJ1wiLFwi4oCcXCI6XCJcXFxcXFxcIlwiLFwi4oCdXCI6XCJcXFxcXFxcIlwiLFwi4oCgXCI6XCIrXCIsXCLigKJcIjpcIipcIixcIuKAplwiOlwiLi4uXCIsXCLigqBcIjpcImVjdVwiLFwi4oKiXCI6XCJjcnV6ZWlyb1wiLFwi4oKjXCI6XCJmcmVuY2ggZnJhbmNcIixcIuKCpFwiOlwibGlyYVwiLFwi4oKlXCI6XCJtaWxsXCIsXCLigqZcIjpcIm5haXJhXCIsXCLigqdcIjpcInBlc2V0YVwiLFwi4oKoXCI6XCJydXBlZVwiLFwi4oKpXCI6XCJ3b25cIixcIuKCqlwiOlwibmV3IHNoZXF1ZWxcIixcIuKCq1wiOlwiZG9uZ1wiLFwi4oKsXCI6XCJldXJvXCIsXCLigq1cIjpcImtpcFwiLFwi4oKuXCI6XCJ0dWdyaWtcIixcIuKCr1wiOlwiZHJhY2htYVwiLFwi4oKwXCI6XCJwZW5ueVwiLFwi4oKxXCI6XCJwZXNvXCIsXCLigrJcIjpcImd1YXJhbmlcIixcIuKCs1wiOlwiYXVzdHJhbFwiLFwi4oK0XCI6XCJocnl2bmlhXCIsXCLigrVcIjpcImNlZGlcIixcIuKCuFwiOlwia2F6YWtoc3RhbmkgdGVuZ2VcIixcIuKCuVwiOlwiaW5kaWFuIHJ1cGVlXCIsXCLigr1cIjpcInJ1c3NpYW4gcnVibGVcIixcIuKCv1wiOlwiYml0Y29pblwiLFwi4oSgXCI6XCJzbVwiLFwi4oSiXCI6XCJ0bVwiLFwi4oiCXCI6XCJkXCIsXCLiiIZcIjpcImRlbHRhXCIsXCLiiJFcIjpcInN1bVwiLFwi4oieXCI6XCJpbmZpbml0eVwiLFwi4pmlXCI6XCJsb3ZlXCIsXCLlhYNcIjpcInl1YW5cIixcIuWGhlwiOlwieWVuXCIsXCLvt7xcIjpcInJpYWxcIn0nKVxuICB2YXIgbG9jYWxlcyA9IEpTT04ucGFyc2UoJ3tcInZpXCI6e1wixJBcIjpcIkRcIixcIsSRXCI6XCJkXCJ9fScpXG5cbiAgZnVuY3Rpb24gcmVwbGFjZSAoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NsdWdpZnk6IHN0cmluZyBhcmd1bWVudCBleHBlY3RlZCcpXG4gICAgfVxuXG4gICAgb3B0aW9ucyA9ICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpXG4gICAgICA/IHtyZXBsYWNlbWVudDogb3B0aW9uc31cbiAgICAgIDogb3B0aW9ucyB8fCB7fVxuXG4gICAgdmFyIGxvY2FsZSA9IGxvY2FsZXNbb3B0aW9ucy5sb2NhbGVdIHx8IHt9XG5cbiAgICB2YXIgcmVwbGFjZW1lbnQgPSBvcHRpb25zLnJlcGxhY2VtZW50IHx8ICctJ1xuXG4gICAgdmFyIHNsdWcgPSBzdHJpbmcuc3BsaXQoJycpXG4gICAgICAvLyByZXBsYWNlIGNoYXJhY3RlcnMgYmFzZWQgb24gY2hhck1hcFxuICAgICAgLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBjaCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGxvY2FsZVtjaF0gfHwgY2hhck1hcFtjaF0gfHwgY2gpXG4gICAgICB9LCAnJylcbiAgICAgIC8vIHJlbW92ZSBub3QgYWxsb3dlZCBjaGFyYWN0ZXJzXG4gICAgICAucmVwbGFjZShvcHRpb25zLnJlbW92ZSB8fCAvW15cXHdcXHMkKl8rfi4oKSdcIiFcXC06QF0rL2csICcnKVxuICAgICAgLy8gdHJpbSBsZWFkaW5nL3RyYWlsaW5nIHNwYWNlc1xuICAgICAgLnRyaW0oKVxuICAgICAgLy8gY29udmVydCBzcGFjZXMgdG8gcmVwbGFjZW1lbnQgY2hhcmFjdGVyXG4gICAgICAvLyBhbHNvIHJlbW92ZSBkdXBsaWNhdGVzIG9mIHRoZSByZXBsYWNlbWVudCBjaGFyYWN0ZXJcbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoJ1tcXFxccycgKyByZXBsYWNlbWVudCArICddKycsICdnJyksIHJlcGxhY2VtZW50KVxuXG4gICAgaWYgKG9wdGlvbnMubG93ZXIpIHtcbiAgICAgIHNsdWcgPSBzbHVnLnRvTG93ZXJDYXNlKClcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdHJpY3QpIHtcbiAgICAgIC8vIHJlbW92ZSBhbnl0aGluZyBiZXNpZGVzIGxldHRlcnMsIG51bWJlcnMsIGFuZCB0aGUgcmVwbGFjZW1lbnQgY2hhclxuICAgICAgc2x1ZyA9IHNsdWdcbiAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCgnW15hLXpBLVowLTknICsgcmVwbGFjZW1lbnQgKyAnXScsICdnJyksICcnKVxuICAgIH1cblxuICAgIHJldHVybiBzbHVnXG4gIH1cblxuICByZXBsYWNlLmV4dGVuZCA9IGZ1bmN0aW9uIChjdXN0b21NYXApIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gY3VzdG9tTWFwKSB7XG4gICAgICBjaGFyTWFwW2tleV0gPSBjdXN0b21NYXBba2V5XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXBsYWNlXG59KSlcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcblxudmFyIHVuaWZpZWQgPSByZXF1aXJlKCd1bmlmaWVkJyk7XG5cbnZhciBwYXJzZSA9IHJlcXVpcmUoJ3JlbWFyay1wYXJzZScpO1xuXG52YXIgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgYWRkTGlzdE1ldGFkYXRhID0gcmVxdWlyZSgnbWRhc3QtYWRkLWxpc3QtbWV0YWRhdGEnKTtcblxudmFyIG5haXZlSHRtbCA9IHJlcXVpcmUoJy4vcGx1Z2lucy9uYWl2ZS1odG1sJyk7XG5cbnZhciBkaXNhbGxvd05vZGUgPSByZXF1aXJlKCcuL3BsdWdpbnMvZGlzYWxsb3ctbm9kZScpO1xuXG52YXIgYXN0VG9SZWFjdCA9IHJlcXVpcmUoJy4vYXN0LXRvLXJlYWN0Jyk7XG5cbnZhciB3cmFwVGFibGVSb3dzID0gcmVxdWlyZSgnLi93cmFwLXRhYmxlLXJvd3MnKTtcblxudmFyIGdldERlZmluaXRpb25zID0gcmVxdWlyZSgnLi9nZXQtZGVmaW5pdGlvbnMnKTtcblxudmFyIHVyaVRyYW5zZm9ybWVyID0gcmVxdWlyZSgnLi91cmktdHJhbnNmb3JtZXInKTtcblxudmFyIGRlZmF1bHRSZW5kZXJlcnMgPSByZXF1aXJlKCcuL3JlbmRlcmVycycpO1xuXG52YXIgc3ltYm9scyA9IHJlcXVpcmUoJy4vc3ltYm9scycpO1xuXG52YXIgYWxsVHlwZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0UmVuZGVyZXJzKTtcblxudmFyIFJlYWN0TWFya2Rvd24gPSBmdW5jdGlvbiBSZWFjdE1hcmtkb3duKHByb3BzKSB7XG4gIHZhciBzcmMgPSBwcm9wcy5zb3VyY2UgfHwgcHJvcHMuY2hpbGRyZW4gfHwgJyc7XG4gIHZhciBwYXJzZXJPcHRpb25zID0gcHJvcHMucGFyc2VyT3B0aW9ucztcblxuICBpZiAocHJvcHMuYWxsb3dlZFR5cGVzICYmIHByb3BzLmRpc2FsbG93ZWRUeXBlcykge1xuICAgIHRocm93IG5ldyBFcnJvcignT25seSBvbmUgb2YgYGFsbG93ZWRUeXBlc2AgYW5kIGBkaXNhbGxvd2VkVHlwZXNgIHNob3VsZCBiZSBkZWZpbmVkJyk7XG4gIH1cblxuICB2YXIgcmVuZGVyZXJzID0geHRlbmQoZGVmYXVsdFJlbmRlcmVycywgcHJvcHMucmVuZGVyZXJzKTtcbiAgdmFyIHBsdWdpbnMgPSBbW3BhcnNlLCBwYXJzZXJPcHRpb25zXV0uY29uY2F0KHByb3BzLnBsdWdpbnMgfHwgW10pO1xuICB2YXIgcGFyc2VyID0gcGx1Z2lucy5yZWR1Y2UoYXBwbHlQYXJzZXJQbHVnaW4sIHVuaWZpZWQoKSk7XG4gIHZhciByYXdBc3QgPSBwYXJzZXIucGFyc2Uoc3JjKTtcbiAgdmFyIHJlbmRlclByb3BzID0geHRlbmQocHJvcHMsIHtcbiAgICByZW5kZXJlcnM6IHJlbmRlcmVycyxcbiAgICBkZWZpbml0aW9uczogZ2V0RGVmaW5pdGlvbnMocmF3QXN0KVxuICB9KTtcbiAgdmFyIGFzdFBsdWdpbnMgPSBkZXRlcm1pbmVBc3RQbHVnaW5zKHByb3BzKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXN5bmNcblxuICB2YXIgdHJhbnNmb3JtZWRBc3QgPSBwYXJzZXIucnVuU3luYyhyYXdBc3QpO1xuICB2YXIgYXN0ID0gYXN0UGx1Z2lucy5yZWR1Y2UoZnVuY3Rpb24gKG5vZGUsIHBsdWdpbikge1xuICAgIHJldHVybiBwbHVnaW4obm9kZSwgcmVuZGVyUHJvcHMpO1xuICB9LCB0cmFuc2Zvcm1lZEFzdCk7XG4gIHJldHVybiBhc3RUb1JlYWN0KGFzdCwgcmVuZGVyUHJvcHMpO1xufTtcblxuZnVuY3Rpb24gYXBwbHlQYXJzZXJQbHVnaW4ocGFyc2VyLCBwbHVnaW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocGx1Z2luKSA/IHBhcnNlci51c2UuYXBwbHkocGFyc2VyLCBfdG9Db25zdW1hYmxlQXJyYXkocGx1Z2luKSkgOiBwYXJzZXIudXNlKHBsdWdpbik7XG59XG5cbmZ1bmN0aW9uIGRldGVybWluZUFzdFBsdWdpbnMocHJvcHMpIHtcbiAgdmFyIHBsdWdpbnMgPSBbd3JhcFRhYmxlUm93cywgYWRkTGlzdE1ldGFkYXRhKCldO1xuICB2YXIgZGlzYWxsb3dlZFR5cGVzID0gcHJvcHMuZGlzYWxsb3dlZFR5cGVzO1xuXG4gIGlmIChwcm9wcy5hbGxvd2VkVHlwZXMpIHtcbiAgICBkaXNhbGxvd2VkVHlwZXMgPSBhbGxUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiB0eXBlICE9PSAncm9vdCcgJiYgcHJvcHMuYWxsb3dlZFR5cGVzLmluZGV4T2YodHlwZSkgPT09IC0xO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHJlbW92YWxNZXRob2QgPSBwcm9wcy51bndyYXBEaXNhbGxvd2VkID8gJ3Vud3JhcCcgOiAncmVtb3ZlJztcblxuICBpZiAoZGlzYWxsb3dlZFR5cGVzICYmIGRpc2FsbG93ZWRUeXBlcy5sZW5ndGggPiAwKSB7XG4gICAgcGx1Z2lucy5wdXNoKGRpc2FsbG93Tm9kZS5vZlR5cGUoZGlzYWxsb3dlZFR5cGVzLCByZW1vdmFsTWV0aG9kKSk7XG4gIH1cblxuICBpZiAocHJvcHMuYWxsb3dOb2RlKSB7XG4gICAgcGx1Z2lucy5wdXNoKGRpc2FsbG93Tm9kZS5pZk5vdE1hdGNoKHByb3BzLmFsbG93Tm9kZSwgcmVtb3ZhbE1ldGhvZCkpO1xuICB9XG5cbiAgdmFyIHJlbmRlckh0bWwgPSAhcHJvcHMuZXNjYXBlSHRtbCAmJiAhcHJvcHMuc2tpcEh0bWw7XG4gIHZhciBoYXNIdG1sUGFyc2VyID0gKHByb3BzLmFzdFBsdWdpbnMgfHwgW10pLnNvbWUoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgcGx1Z2luID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW1bMF0gOiBpdGVtO1xuICAgIHJldHVybiBwbHVnaW4uaWRlbnRpdHkgPT09IHN5bWJvbHMuSHRtbFBhcnNlcjtcbiAgfSk7XG5cbiAgaWYgKHJlbmRlckh0bWwgJiYgIWhhc0h0bWxQYXJzZXIpIHtcbiAgICBwbHVnaW5zLnB1c2gobmFpdmVIdG1sKTtcbiAgfVxuXG4gIHJldHVybiBwcm9wcy5hc3RQbHVnaW5zID8gcGx1Z2lucy5jb25jYXQocHJvcHMuYXN0UGx1Z2lucykgOiBwbHVnaW5zO1xufVxuXG5SZWFjdE1hcmtkb3duLmRlZmF1bHRQcm9wcyA9IHtcbiAgcmVuZGVyZXJzOiB7fSxcbiAgZXNjYXBlSHRtbDogdHJ1ZSxcbiAgc2tpcEh0bWw6IGZhbHNlLFxuICBzb3VyY2VQb3M6IGZhbHNlLFxuICByYXdTb3VyY2VQb3M6IGZhbHNlLFxuICB0cmFuc2Zvcm1MaW5rVXJpOiB1cmlUcmFuc2Zvcm1lcixcbiAgYXN0UGx1Z2luczogW10sXG4gIHBsdWdpbnM6IFtdLFxuICBwYXJzZXJPcHRpb25zOiB7fVxufTtcblJlYWN0TWFya2Rvd24ucHJvcFR5cGVzID0ge1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNvdXJjZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNvdXJjZVBvczogUHJvcFR5cGVzLmJvb2wsXG4gIHJhd1NvdXJjZVBvczogUHJvcFR5cGVzLmJvb2wsXG4gIGVzY2FwZUh0bWw6IFByb3BUeXBlcy5ib29sLFxuICBza2lwSHRtbDogUHJvcFR5cGVzLmJvb2wsXG4gIGFsbG93Tm9kZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFsbG93ZWRUeXBlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKGFsbFR5cGVzKSksXG4gIGRpc2FsbG93ZWRUeXBlczogUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm9uZU9mKGFsbFR5cGVzKSksXG4gIHRyYW5zZm9ybUxpbmtVcmk6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuYm9vbF0pLFxuICBsaW5rVGFyZ2V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pLFxuICB0cmFuc2Zvcm1JbWFnZVVyaTogUHJvcFR5cGVzLmZ1bmMsXG4gIGFzdFBsdWdpbnM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5mdW5jKSxcbiAgdW53cmFwRGlzYWxsb3dlZDogUHJvcFR5cGVzLmJvb2wsXG4gIHJlbmRlcmVyczogUHJvcFR5cGVzLm9iamVjdCxcbiAgcGx1Z2luczogUHJvcFR5cGVzLmFycmF5LFxuICBwYXJzZXJPcHRpb25zOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuUmVhY3RNYXJrZG93bi50eXBlcyA9IGFsbFR5cGVzO1xuUmVhY3RNYXJrZG93bi5yZW5kZXJlcnMgPSBkZWZhdWx0UmVuZGVyZXJzO1xuUmVhY3RNYXJrZG93bi51cmlUcmFuc2Zvcm1lciA9IHVyaVRyYW5zZm9ybWVyO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmtkb3duOyIsIi8vXG4vLyBzdHJmdGltZVxuLy8gZ2l0aHViLmNvbS9zYW1zb25qcy9zdHJmdGltZVxuLy8gQF9zanNcbi8vXG4vLyBDb3B5cmlnaHQgMjAxMCAtIDIwMTYgU2FtaSBTYW1odXJpIDxzYW1pQHNhbWh1cmkubmV0PlxuLy9cbi8vIE1JVCBMaWNlbnNlXG4vLyBodHRwOi8vc2pzLm1pdC1saWNlbnNlLm9yZ1xuLy9cblxuOyhmdW5jdGlvbigpIHtcblxuICAgIHZhciBMb2NhbGVzID0ge1xuICAgICAgICBkZV9ERToge1xuICAgICAgICAgICAgZGF5czogWydTb25udGFnJywgJ01vbnRhZycsICdEaWVuc3RhZycsICdNaXR0d29jaCcsICdEb25uZXJzdGFnJywgJ0ZyZWl0YWcnLCAnU2Ftc3RhZyddLFxuICAgICAgICAgICAgc2hvcnREYXlzOiBbJ1NvJywgJ01vJywgJ0RpJywgJ01pJywgJ0RvJywgJ0ZyJywgJ1NhJ10sXG4gICAgICAgICAgICBtb250aHM6IFsnSmFudWFyJywgJ0ZlYnJ1YXInLCAnTcOkcnonLCAnQXByaWwnLCAnTWFpJywgJ0p1bmknLCAnSnVsaScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGV6ZW1iZXInXSxcbiAgICAgICAgICAgIHNob3J0TW9udGhzOiBbJ0phbicsICdGZWInLCAnTcOkcicsICdBcHInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPa3QnLCAnTm92JywgJ0RleiddLFxuICAgICAgICAgICAgQU06ICdBTScsXG4gICAgICAgICAgICBQTTogJ1BNJyxcbiAgICAgICAgICAgIGFtOiAnYW0nLFxuICAgICAgICAgICAgcG06ICdwbScsXG4gICAgICAgICAgICBmb3JtYXRzOiB7XG4gICAgICAgICAgICAgICAgYzogJyVhICVkICViICVZICVYICVaJyxcbiAgICAgICAgICAgICAgICBEOiAnJWQuJW0uJVknLFxuICAgICAgICAgICAgICAgIEY6ICclWS0lbS0lZCcsXG4gICAgICAgICAgICAgICAgUjogJyVIOiVNJyxcbiAgICAgICAgICAgICAgICByOiAnJUk6JU06JVMgJXAnLFxuICAgICAgICAgICAgICAgIFQ6ICclSDolTTolUycsXG4gICAgICAgICAgICAgICAgdjogJyVlLSViLSVZJyxcbiAgICAgICAgICAgICAgICBYOiAnJVQnLFxuICAgICAgICAgICAgICAgIHg6ICclRCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBlbl9DQToge1xuICAgICAgICAgICAgZGF5czogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheScgXSxcbiAgICAgICAgICAgIHNob3J0RGF5czogWydTdW4nLCAnTW9uJywgJ1R1ZScsICdXZWQnLCAnVGh1JywgJ0ZyaScsICdTYXQnXSxcbiAgICAgICAgICAgIG1vbnRoczogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10sXG4gICAgICAgICAgICBzaG9ydE1vbnRoczogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICAgICAgICAgICAgb3JkaW5hbFN1ZmZpeGVzOiBbXG4gICAgICAgICAgICAgICAgJ3N0JywgJ25kJywgJ3JkJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJyxcbiAgICAgICAgICAgICAgICAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLFxuICAgICAgICAgICAgICAgICdzdCcsICduZCcsICdyZCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsXG4gICAgICAgICAgICAgICAgJ3N0J1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIEFNOiAnQU0nLFxuICAgICAgICAgICAgUE06ICdQTScsXG4gICAgICAgICAgICBhbTogJ2FtJyxcbiAgICAgICAgICAgIHBtOiAncG0nLFxuICAgICAgICAgICAgZm9ybWF0czoge1xuICAgICAgICAgICAgICAgIGM6ICclYSAlZCAlYiAlWSAlWCAlWicsXG4gICAgICAgICAgICAgICAgRDogJyVkLyVtLyV5JyxcbiAgICAgICAgICAgICAgICBGOiAnJVktJW0tJWQnLFxuICAgICAgICAgICAgICAgIFI6ICclSDolTScsXG4gICAgICAgICAgICAgICAgcjogJyVJOiVNOiVTICVwJyxcbiAgICAgICAgICAgICAgICBUOiAnJUg6JU06JVMnLFxuICAgICAgICAgICAgICAgIHY6ICclZS0lYi0lWScsXG4gICAgICAgICAgICAgICAgWDogJyVyJyxcbiAgICAgICAgICAgICAgICB4OiAnJUQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW5fVVM6IHtcbiAgICAgICAgICAgIGRheXM6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknIF0sXG4gICAgICAgICAgICBzaG9ydERheXM6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gICAgICAgICAgICBtb250aHM6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxuICAgICAgICAgICAgc2hvcnRNb250aHM6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgICAgICAgICAgIG9yZGluYWxTdWZmaXhlczogW1xuICAgICAgICAgICAgICAgICdzdCcsICduZCcsICdyZCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsICd0aCcsXG4gICAgICAgICAgICAgICAgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJywgJ3RoJyxcbiAgICAgICAgICAgICAgICAnc3QnLCAnbmQnLCAncmQnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLCAndGgnLFxuICAgICAgICAgICAgICAgICdzdCdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBBTTogJ0FNJyxcbiAgICAgICAgICAgIFBNOiAnUE0nLFxuICAgICAgICAgICAgYW06ICdhbScsXG4gICAgICAgICAgICBwbTogJ3BtJyxcbiAgICAgICAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICBjOiAnJWEgJWQgJWIgJVkgJVggJVonLFxuICAgICAgICAgICAgICAgIEQ6ICclbS8lZC8leScsXG4gICAgICAgICAgICAgICAgRjogJyVZLSVtLSVkJyxcbiAgICAgICAgICAgICAgICBSOiAnJUg6JU0nLFxuICAgICAgICAgICAgICAgIHI6ICclSTolTTolUyAlcCcsXG4gICAgICAgICAgICAgICAgVDogJyVIOiVNOiVTJyxcbiAgICAgICAgICAgICAgICB2OiAnJWUtJWItJVknLFxuICAgICAgICAgICAgICAgIFg6ICclcicsXG4gICAgICAgICAgICAgICAgeDogJyVEJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGVzX01YOiB7XG4gICAgICAgICAgICBkYXlzOiBbJ2RvbWluZ28nLCAnbHVuZXMnLCAnbWFydGVzJywgJ21pw6lyY29sZXMnLCAnanVldmVzJywgJ3ZpZXJuZXMnLCAnc8OhYmFkbyddLFxuICAgICAgICAgICAgc2hvcnREYXlzOiBbJ2RvbScsICdsdW4nLCAnbWFyJywgJ21pw6knLCAnanVlJywgJ3ZpZScsICdzw6FiJ10sXG4gICAgICAgICAgICBtb250aHM6IFsnZW5lcm8nLCAnZmVicmVybycsICdtYXJ6bycsICdhYnJpbCcsICdtYXlvJywgJ2p1bmlvJywgJ2p1bGlvJywgJ2Fnb3N0bycsICdzZXB0aWVtYnJlJywgJ29jdHVicmUnLCAnbm92aWVtYnJlJywnIGRpY2llbWJyZSddLFxuICAgICAgICAgICAgc2hvcnRNb250aHM6IFsnZW5lJywgJ2ZlYicsICdtYXInLCAnYWJyJywgJ21heScsICdqdW4nLCAnanVsJywgJ2FnbycsICdzZXAnLCAnb2N0JywgJ25vdicsICdkaWMnXSxcbiAgICAgICAgICAgIEFNOiAnQU0nLFxuICAgICAgICAgICAgUE06ICdQTScsXG4gICAgICAgICAgICBhbTogJ2FtJyxcbiAgICAgICAgICAgIHBtOiAncG0nLFxuICAgICAgICAgICAgZm9ybWF0czoge1xuICAgICAgICAgICAgICAgIGM6ICclYSAlZCAlYiAlWSAlWCAlWicsXG4gICAgICAgICAgICAgICAgRDogJyVkLyVtLyVZJyxcbiAgICAgICAgICAgICAgICBGOiAnJVktJW0tJWQnLFxuICAgICAgICAgICAgICAgIFI6ICclSDolTScsXG4gICAgICAgICAgICAgICAgcjogJyVJOiVNOiVTICVwJyxcbiAgICAgICAgICAgICAgICBUOiAnJUg6JU06JVMnLFxuICAgICAgICAgICAgICAgIHY6ICclZS0lYi0lWScsXG4gICAgICAgICAgICAgICAgWDogJyVUJyxcbiAgICAgICAgICAgICAgICB4OiAnJUQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZnJfRlI6IHtcbiAgICAgICAgICAgIGRheXM6IFsnZGltYW5jaGUnLCAnbHVuZGknLCAnbWFyZGknLCAnbWVyY3JlZGknLCAnamV1ZGknLCAndmVuZHJlZGknLCAnc2FtZWRpJ10sXG4gICAgICAgICAgICBzaG9ydERheXM6IFsnZGltLicsICdsdW4uJywgJ21hci4nLCAnbWVyLicsICdqZXUuJywgJ3Zlbi4nLCAnc2FtLiddLFxuICAgICAgICAgICAgbW9udGhzOiBbJ2phbnZpZXInLCAnZsOpdnJpZXInLCAnbWFycycsICdhdnJpbCcsICdtYWknLCAnanVpbicsICdqdWlsbGV0JywgJ2Fvw7t0JywgJ3NlcHRlbWJyZScsICdvY3RvYnJlJywgJ25vdmVtYnJlJywgJ2TDqWNlbWJyZSddLFxuICAgICAgICAgICAgc2hvcnRNb250aHM6IFsnamFudi4nLCAnZsOpdnIuJywgJ21hcnMnLCAnYXZyaWwnLCAnbWFpJywgJ2p1aW4nLCAnanVpbC4nLCAnYW/Du3QnLCAnc2VwdC4nLCAnb2N0LicsICdub3YuJywgJ2TDqWMuJ10sXG4gICAgICAgICAgICBBTTogJ0FNJyxcbiAgICAgICAgICAgIFBNOiAnUE0nLFxuICAgICAgICAgICAgYW06ICdhbScsXG4gICAgICAgICAgICBwbTogJ3BtJyxcbiAgICAgICAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICBjOiAnJWEgJWQgJWIgJVkgJVggJVonLFxuICAgICAgICAgICAgICAgIEQ6ICclZC8lbS8lWScsXG4gICAgICAgICAgICAgICAgRjogJyVZLSVtLSVkJyxcbiAgICAgICAgICAgICAgICBSOiAnJUg6JU0nLFxuICAgICAgICAgICAgICAgIHI6ICclSTolTTolUyAlcCcsXG4gICAgICAgICAgICAgICAgVDogJyVIOiVNOiVTJyxcbiAgICAgICAgICAgICAgICB2OiAnJWUtJWItJVknLFxuICAgICAgICAgICAgICAgIFg6ICclVCcsXG4gICAgICAgICAgICAgICAgeDogJyVEJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGl0X0lUOiB7XG4gICAgICAgICAgICBkYXlzOiBbJ2RvbWVuaWNhJywgJ2x1bmVkw6wnLCAnbWFydGVkw6wnLCAnbWVyY29sZWTDrCcsICdnaW92ZWTDrCcsICd2ZW5lcmTDrCcsICdzYWJhdG8nXSxcbiAgICAgICAgICAgIHNob3J0RGF5czogWydkb20nLCAnbHVuJywgJ21hcicsICdtZXInLCAnZ2lvJywgJ3ZlbicsICdzYWInXSxcbiAgICAgICAgICAgIG1vbnRoczogWydnZW5uYWlvJywgJ2ZlYmJyYWlvJywgJ21hcnpvJywgJ2FwcmlsZScsICdtYWdnaW8nLCAnZ2l1Z25vJywgJ2x1Z2xpbycsICdhZ29zdG8nLCAnc2V0dGVtYnJlJywgJ290dG9icmUnLCAnbm92ZW1icmUnLCAnZGljZW1icmUnXSxcbiAgICAgICAgICAgIHNob3J0TW9udGhzOiBbJ3ByJywgJ21hZycsICdnaXUnLCAnbHVnJywgJ2FnbycsICdzZXQnLCAnb3R0JywgJ25vdicsICdkaWMnXSxcbiAgICAgICAgICAgIEFNOiAnQU0nLFxuICAgICAgICAgICAgUE06ICdQTScsXG4gICAgICAgICAgICBhbTogJ2FtJyxcbiAgICAgICAgICAgIHBtOiAncG0nLFxuICAgICAgICAgICAgZm9ybWF0czoge1xuICAgICAgICAgICAgICAgIGM6ICclYSAlZCAlYiAlWSAlWCAlWicsXG4gICAgICAgICAgICAgICAgRDogJyVkLyVtLyVZJyxcbiAgICAgICAgICAgICAgICBGOiAnJVktJW0tJWQnLFxuICAgICAgICAgICAgICAgIFI6ICclSDolTScsXG4gICAgICAgICAgICAgICAgcjogJyVJOiVNOiVTICVwJyxcbiAgICAgICAgICAgICAgICBUOiAnJUg6JU06JVMnLFxuICAgICAgICAgICAgICAgIHY6ICclZS0lYi0lWScsXG4gICAgICAgICAgICAgICAgWDogJyVUJyxcbiAgICAgICAgICAgICAgICB4OiAnJUQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmxfTkw6IHtcbiAgICAgICAgICAgIGRheXM6IFsnem9uZGFnJywgJ21hYW5kYWcnLCAnZGluc2RhZycsICd3b2Vuc2RhZycsICdkb25kZXJkYWcnLCAndnJpamRhZycsICd6YXRlcmRhZyddLFxuICAgICAgICAgICAgc2hvcnREYXlzOiBbJ3pvJywgJ21hJywgJ2RpJywgJ3dvJywgJ2RvJywgJ3ZyJywgJ3phJ10sXG4gICAgICAgICAgICBtb250aHM6IFsnamFudWFyaScsICdmZWJydWFyaScsICdtYWFydCcsICdhcHJpbCcsICdtZWknLCAnanVuaScsICdqdWxpJywgJ2F1Z3VzdHVzJywgJ3NlcHRlbWJlcicsICdva3RvYmVyJywgJ25vdmVtYmVyJywgJ2RlY2VtYmVyJ10sXG4gICAgICAgICAgICBzaG9ydE1vbnRoczogWydqYW4nLCAnZmViJywgJ21ydCcsICdhcHInLCAnbWVpJywgJ2p1bicsICdqdWwnLCAnYXVnJywgJ3NlcCcsICdva3QnLCAnbm92JywgJ2RlYyddLFxuICAgICAgICAgICAgQU06ICdBTScsXG4gICAgICAgICAgICBQTTogJ1BNJyxcbiAgICAgICAgICAgIGFtOiAnYW0nLFxuICAgICAgICAgICAgcG06ICdwbScsXG4gICAgICAgICAgICBmb3JtYXRzOiB7XG4gICAgICAgICAgICAgICAgYzogJyVhICVkICViICVZICVYICVaJyxcbiAgICAgICAgICAgICAgICBEOiAnJWQtJW0tJXknLFxuICAgICAgICAgICAgICAgIEY6ICclWS0lbS0lZCcsXG4gICAgICAgICAgICAgICAgUjogJyVIOiVNJyxcbiAgICAgICAgICAgICAgICByOiAnJUk6JU06JVMgJXAnLFxuICAgICAgICAgICAgICAgIFQ6ICclSDolTTolUycsXG4gICAgICAgICAgICAgICAgdjogJyVlLSViLSVZJyxcbiAgICAgICAgICAgICAgICBYOiAnJVQnLFxuICAgICAgICAgICAgICAgIHg6ICclRCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwdF9CUjoge1xuICAgICAgICAgICAgZGF5czogWydkb21pbmdvJywgJ3NlZ3VuZGEnLCAndGVyw6dhJywgJ3F1YXJ0YScsICdxdWludGEnLCAnc2V4dGEnLCAnc8OhYmFkbyddLFxuICAgICAgICAgICAgc2hvcnREYXlzOiBbJ0RvbScsICdTZWcnLCAnVGVyJywgJ1F1YScsICdRdWknLCAnU2V4JywgJ1PDoWInXSxcbiAgICAgICAgICAgIG1vbnRoczogWydqYW5laXJvJywgJ2ZldmVyZWlybycsICdtYXLDp28nLCAnYWJyaWwnLCAnbWFpbycsICdqdW5obycsICdqdWxobycsICdhZ29zdG8nLCAnc2V0ZW1icm8nLCAnb3V0dWJybycsICdub3ZlbWJybycsICdkZXplbWJybyddLFxuICAgICAgICAgICAgc2hvcnRNb250aHM6IFsnSmFuJywgJ0ZldicsICdNYXInLCAnQWJyJywgJ01haScsICdKdW4nLCAnSnVsJywgJ0FnbycsICdTZXQnLCAnT3V0JywgJ05vdicsICdEZXonXSxcbiAgICAgICAgICAgIEFNOiAnQU0nLFxuICAgICAgICAgICAgUE06ICdQTScsXG4gICAgICAgICAgICBhbTogJ2FtJyxcbiAgICAgICAgICAgIHBtOiAncG0nLFxuICAgICAgICAgICAgZm9ybWF0czoge1xuICAgICAgICAgICAgICAgIGM6ICclYSAlZCAlYiAlWSAlWCAlWicsXG4gICAgICAgICAgICAgICAgRDogJyVkLSVtLSVZJyxcbiAgICAgICAgICAgICAgICBGOiAnJVktJW0tJWQnLFxuICAgICAgICAgICAgICAgIFI6ICclSDolTScsXG4gICAgICAgICAgICAgICAgcjogJyVJOiVNOiVTICVwJyxcbiAgICAgICAgICAgICAgICBUOiAnJUg6JU06JVMnLFxuICAgICAgICAgICAgICAgIHY6ICclZS0lYi0lWScsXG4gICAgICAgICAgICAgICAgWDogJyVUJyxcbiAgICAgICAgICAgICAgICB4OiAnJUQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcnVfUlU6IHtcbiAgICAgICAgICAgIGRheXM6IFsn0JLQvtGB0LrRgNC10YHQtdC90YzQtScsICfQn9C+0L3QtdC00LXQu9GM0L3QuNC6JywgJ9CS0YLQvtGA0L3QuNC6JywgJ9Ch0YDQtdC00LAnLCAn0KfQtdGC0LLQtdGA0LMnLCAn0J/Rj9GC0L3QuNGG0LAnLCAn0KHRg9Cx0LHQvtGC0LAnXSxcbiAgICAgICAgICAgIHNob3J0RGF5czogWyfQktGBJywgJ9Cf0L0nLCAn0JLRgicsICfQodGAJywgJ9Cn0YInLCAn0J/RgicsICfQodCxJ10sXG4gICAgICAgICAgICBtb250aHM6IFsn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGA0YwnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ10sXG4gICAgICAgICAgICBzaG9ydE1vbnRoczogWyfRj9C90LInLCAn0YTQtdCyJywgJ9C80LDRgCcsICfQsNC/0YAnLCAn0LzQsNC5JywgJ9C40Y7QvScsICfQuNGO0LsnLCAn0LDQstCzJywgJ9GB0LXQvScsICfQvtC60YInLCAn0L3QvtGPJywgJ9C00LXQuiddLFxuICAgICAgICAgICAgQU06ICdBTScsXG4gICAgICAgICAgICBQTTogJ1BNJyxcbiAgICAgICAgICAgIGFtOiAnYW0nLFxuICAgICAgICAgICAgcG06ICdwbScsXG4gICAgICAgICAgICBmb3JtYXRzOiB7XG4gICAgICAgICAgICAgICAgYzogJyVhICVkICViICVZICVYJyxcbiAgICAgICAgICAgICAgICBEOiAnJWQuJW0uJXknLFxuICAgICAgICAgICAgICAgIEY6ICclWS0lbS0lZCcsXG4gICAgICAgICAgICAgICAgUjogJyVIOiVNJyxcbiAgICAgICAgICAgICAgICByOiAnJUk6JU06JVMgJXAnLFxuICAgICAgICAgICAgICAgIFQ6ICclSDolTTolUycsXG4gICAgICAgICAgICAgICAgdjogJyVlLSViLSVZJyxcbiAgICAgICAgICAgICAgICBYOiAnJVQnLFxuICAgICAgICAgICAgICAgIHg6ICclRCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0cl9UUjoge1xuICAgICAgICAgICAgZGF5czogWydQYXphcicsICdQYXphcnRlc2knLCAnU2FsxLEnLCfDh2FyxZ9hbWJhJywgJ1BlcsWfZW1iZScsICdDdW1hJywgJ0N1bWFydGVzaSddLFxuICAgICAgICAgICAgc2hvcnREYXlzOiBbJ1BheicsICdQenQnLCAnU2FsJywgJ8OHcsWfJywgJ1ByxZ8nLCAnQ3VtJywgJ0N0cyddLFxuICAgICAgICAgICAgbW9udGhzOiBbJ09jYWsnLCAnxZ51YmF0JywgJ01hcnQnLCAnTmlzYW4nLCAnTWF5xLFzJywgJ0hhemlyYW4nLCAnVGVtbXV6JywgJ0HEn3VzdG9zJywgJ0V5bMO8bCcsICdFa2ltJywgJ0thc8SxbScsICdBcmFsxLFrJ10sXG4gICAgICAgICAgICBzaG9ydE1vbnRoczogWydPY2EnLCAnxZ51YicsICdNYXInLCAnTmlzJywgJ01heScsICdIYXonLCAnVGVtJywgJ0HEn3UnLCAnRXlsJywgJ0VraScsICdLYXMnLCAnQXJhJ10sXG4gICAgICAgICAgICBBTTogJ8OWw5YnLFxuICAgICAgICAgICAgUE06ICfDllMnLFxuICAgICAgICAgICAgYW06ICfDlsOWJyxcbiAgICAgICAgICAgIHBtOiAnw5ZTJyxcbiAgICAgICAgICAgIGZvcm1hdHM6IHtcbiAgICAgICAgICAgICAgICBjOiAnJWEgJWQgJWIgJVkgJVggJVonLFxuICAgICAgICAgICAgICAgIEQ6ICclZC0lbS0lWScsXG4gICAgICAgICAgICAgICAgRjogJyVZLSVtLSVkJyxcbiAgICAgICAgICAgICAgICBSOiAnJUg6JU0nLFxuICAgICAgICAgICAgICAgIHI6ICclSTolTTolUyAlcCcsXG4gICAgICAgICAgICAgICAgVDogJyVIOiVNOiVTJyxcbiAgICAgICAgICAgICAgICB2OiAnJWUtJWItJVknLFxuICAgICAgICAgICAgICAgIFg6ICclVCcsXG4gICAgICAgICAgICAgICAgeDogJyVEJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIEJ5IG1pY2hhZWxqYXl0PG1pY2hhZWxqYXl0QGdtYWlsLmNvbT5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pY2hhZWxqYXl0L3N0cmZ0aW1lL2NvbW1pdC9iY2I0YzEyNzQzODExZDUxZTU2ODE3NWFhN2JmZjNmZDJhNzdjZWYzXG4gICAgICAgIHpoX0NOOiB7XG4gICAgICAgICAgICBkYXlzOiBbJ+aYn+acn+aXpScsICfmmJ/mnJ/kuIAnLCAn5pif5pyf5LqMJywgJ+aYn+acn+S4iScsICfmmJ/mnJ/lm5snLCAn5pif5pyf5LqUJywgJ+aYn+acn+WFrSddLFxuICAgICAgICAgICAgc2hvcnREYXlzOiBbJ+aXpScsICfkuIAnLCAn5LqMJywgJ+S4iScsICflm5snLCAn5LqUJywgJ+WFrSddLFxuICAgICAgICAgICAgbW9udGhzOiBbJ+S4gOaciOS7vScsICfkuozmnIjku70nLCAn5LiJ5pyI5Lu9JywgJ+Wbm+aciOS7vScsICfkupTmnIjku70nLCAn5YWt5pyI5Lu9JywgJ+S4g+aciOS7vScsICflhavmnIjku70nLCAn5Lmd5pyI5Lu9JywgJ+WNgeaciOS7vScsICfljYHkuIDmnIjku70nLCAn5Y2B5LqM5pyI5Lu9J10sXG4gICAgICAgICAgICBzaG9ydE1vbnRoczogWyfkuIDmnIgnLCAn5LqM5pyIJywgJ+S4ieaciCcsICflm5vmnIgnLCAn5LqU5pyIJywgJ+WFreaciCcsICfkuIPmnIgnLCAn5YWr5pyIJywgJ+S5neaciCcsICfljYHmnIgnLCAn5Y2B5LiA5pyIJywgJ+WNgeS6jOaciCddLFxuICAgICAgICAgICAgQU06ICfkuIrljYgnLFxuICAgICAgICAgICAgUE06ICfkuIvljYgnLFxuICAgICAgICAgICAgYW06ICfkuIrljYgnLFxuICAgICAgICAgICAgcG06ICfkuIvljYgnLFxuICAgICAgICAgICAgZm9ybWF0czoge1xuICAgICAgICAgICAgICAgIGM6ICclYSAlZCAlYiAlWSAlWCAlWicsXG4gICAgICAgICAgICAgICAgRDogJyVkLyVtLyV5JyxcbiAgICAgICAgICAgICAgICBGOiAnJVktJW0tJWQnLFxuICAgICAgICAgICAgICAgIFI6ICclSDolTScsXG4gICAgICAgICAgICAgICAgcjogJyVJOiVNOiVTICVwJyxcbiAgICAgICAgICAgICAgICBUOiAnJUg6JU06JVMnLFxuICAgICAgICAgICAgICAgIHY6ICclZS0lYi0lWScsXG4gICAgICAgICAgICAgICAgWDogJyVyJyxcbiAgICAgICAgICAgICAgICB4OiAnJUQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIERlZmF1bHRMb2NhbGUgPSBMb2NhbGVzWydlbl9VUyddLFxuICAgICAgICBkZWZhdWx0U3RyZnRpbWUgPSBuZXcgU3RyZnRpbWUoRGVmYXVsdExvY2FsZSwgMCwgZmFsc2UpLFxuICAgICAgICBpc0NvbW1vbkpTID0gdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgIG5hbWVzcGFjZTtcblxuICAgIC8vIENvbW1vbkpTIC8gTm9kZSBtb2R1bGVcbiAgICBpZiAoaXNDb21tb25KUykge1xuICAgICAgICBuYW1lc3BhY2UgPSBtb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRTdHJmdGltZTtcbiAgICB9XG4gICAgLy8gQnJvd3NlcnMgYW5kIG90aGVyIGVudmlyb25tZW50c1xuICAgIGVsc2Uge1xuICAgICAgICAvLyBHZXQgdGhlIGdsb2JhbCBvYmplY3QuIFdvcmtzIGluIEVTMywgRVM1LCBhbmQgRVM1IHN0cmljdCBtb2RlLlxuICAgICAgICBuYW1lc3BhY2UgPSAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzIHx8ICgxLGV2YWwpKCd0aGlzJyk7IH0oKSk7XG4gICAgICAgIG5hbWVzcGFjZS5zdHJmdGltZSA9IGRlZmF1bHRTdHJmdGltZTtcbiAgICB9XG5cbiAgICAvLyBQb2x5ZmlsbCBEYXRlLm5vdyBmb3Igb2xkIGJyb3dzZXJzLlxuICAgIGlmICh0eXBlb2YgRGF0ZS5ub3cgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgRGF0ZS5ub3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gK25ldyBEYXRlKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gU3RyZnRpbWUobG9jYWxlLCBjdXN0b21UaW1lem9uZU9mZnNldCwgdXNlVXRjVGltZXpvbmUpIHtcbiAgICAgICAgdmFyIF9sb2NhbGUgPSBsb2NhbGUgfHwgRGVmYXVsdExvY2FsZSxcbiAgICAgICAgICAgIF9jdXN0b21UaW1lem9uZU9mZnNldCA9IGN1c3RvbVRpbWV6b25lT2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBfdXNlVXRjQmFzZWREYXRlID0gdXNlVXRjVGltZXpvbmUgfHwgZmFsc2UsXG5cbiAgICAgICAgICAgIC8vIHdlIHN0b3JlIHVuaXggdGltZXN0YW1wIHZhbHVlIGhlcmUgdG8gbm90IGNyZWF0ZSBuZXcgRGF0ZSgpIGVhY2ggaXRlcmF0aW9uIChlYWNoIG1pbGxpc2Vjb25kKVxuICAgICAgICAgICAgLy8gRGF0ZS5ub3coKSBpcyAyIHRpbWVzIGZhc3RlciB0aGFuIG5ldyBEYXRlKClcbiAgICAgICAgICAgIC8vIHdoaWxlIG1pbGxpc2Vjb25kIHByZWNpc2UgaXMgZW5vdWdoIGhlcmVcbiAgICAgICAgICAgIC8vIHRoaXMgY291bGQgYmUgdmVyeSBoZWxwZnVsIHdoZW4gc3RyZnRpbWUgdHJpZ2dlcmVkIGEgbG90IG9mIHRpbWVzIG9uZSBieSBvbmVcbiAgICAgICAgICAgIF9jYWNoZWREYXRlVGltZXN0YW1wID0gMCxcbiAgICAgICAgICAgIF9jYWNoZWREYXRlO1xuXG4gICAgICAgIGZ1bmN0aW9uIF9zdHJmdGltZShmb3JtYXQsIGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB0aW1lc3RhbXA7XG5cbiAgICAgICAgICAgIGlmICghZGF0ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFRpbWVzdGFtcCA+IF9jYWNoZWREYXRlVGltZXN0YW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jYWNoZWREYXRlVGltZXN0YW1wID0gY3VycmVudFRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgX2NhY2hlZERhdGUgPSBuZXcgRGF0ZShfY2FjaGVkRGF0ZVRpbWVzdGFtcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wID0gX2NhY2hlZERhdGVUaW1lc3RhbXA7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKF91c2VVdGNCYXNlZERhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhvdyB0byBhdm9pZCBkdXBsaWNhdGlvbiBvZiBkYXRlIGluc3RhbnRpYXRpb24gZm9yIHV0YyBoZXJlP1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgdGllZCB0byBnZXRUaW1lem9uZU9mZnNldCBvZiB0aGUgY3VycmVudCBkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBfY2FjaGVkRGF0ZSA9IG5ldyBEYXRlKF9jYWNoZWREYXRlVGltZXN0YW1wICsgZ2V0VGltZXN0YW1wVG9VdGNPZmZzZXRGb3IoX2NhY2hlZERhdGUpICsgX2N1c3RvbVRpbWV6b25lT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcCA9IF9jYWNoZWREYXRlVGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRlID0gX2NhY2hlZERhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgPSBkYXRlLmdldFRpbWUoKTtcblxuICAgICAgICAgICAgICAgIGlmIChfdXNlVXRjQmFzZWREYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1dGNPZmZzZXQgPSBnZXRUaW1lc3RhbXBUb1V0Y09mZnNldEZvcihkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcCArIHV0Y09mZnNldCArIF9jdXN0b21UaW1lem9uZU9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIGNyb3NzZWQgYSBEU1QgYm91bmRhcnkgd2l0aCB0aGlzIGNhbGN1bGF0aW9uIHdlIG5lZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRqdXN0IHRoZSBuZXcgZGF0ZSBhY2NvcmRpbmdseSBvciBpdCB3aWxsIGJlIG9mZiBieSBhbiBob3VyIGluIFVUQy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGdldFRpbWVzdGFtcFRvVXRjT2Zmc2V0Rm9yKGRhdGUpICE9PSB1dGNPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdVVENPZmZzZXQgPSBnZXRUaW1lc3RhbXBUb1V0Y09mZnNldEZvcihkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh0aW1lc3RhbXAgKyBuZXdVVENPZmZzZXQgKyBfY3VzdG9tVGltZXpvbmVPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gX3Byb2Nlc3NGb3JtYXQoZm9ybWF0LCBkYXRlLCBfbG9jYWxlLCB0aW1lc3RhbXApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gX3Byb2Nlc3NGb3JtYXQoZm9ybWF0LCBkYXRlLCBsb2NhbGUsIHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdFN0cmluZyA9ICcnLFxuICAgICAgICAgICAgICAgIHBhZGRpbmcgPSBudWxsLFxuICAgICAgICAgICAgICAgIGlzSW5TY29wZSA9IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxlbmd0aCA9IGZvcm1hdC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRUWiA9IGZhbHNlO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudENoYXJDb2RlID0gZm9ybWF0LmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNJblNjb3BlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICctJ1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoYXJDb2RlID09PSA0NSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gJ18nXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRDaGFyQ29kZSA9PT0gOTUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmcgPSAnICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyAnMCdcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY3VycmVudENoYXJDb2RlID09PSA0OCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZyA9ICcwJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vICc6J1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjdXJyZW50Q2hhckNvZGUgPT09IDU4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVuZGVkVFopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgd2FybihcIltXQVJOSU5HXSBkZXRlY3RlZCB1c2Ugb2YgdW5zdXBwb3J0ZWQgJTo6IG9yICU6OjogbW9kaWZpZXJzIHRvIHN0cmZ0aW1lXCIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFRaID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY3VycmVudENoYXJDb2RlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4YW1wbGVzIGZvciBuZXcgRGF0ZSgwKSBpbiBHTVRcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJyUnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICclJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9ICclJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ1RodXJzZGF5J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBsb2NhbGUuZGF5c1tkYXRlLmdldERheSgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ0phbnVhcnknXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdCJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IGxvY2FsZS5tb250aHNbZGF0ZS5nZXRNb250aCgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzE5J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY3OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBwYWRUaWxsMihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIDEwMCksIHBhZGRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnMDEvMDEvNzAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IF9wcm9jZXNzRm9ybWF0KGxvY2FsZS5mb3JtYXRzLkQsIGRhdGUsIGxvY2FsZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzE5NzAtMDEtMDEnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdGJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IF9wcm9jZXNzRm9ybWF0KGxvY2FsZS5mb3JtYXRzLkYsIGRhdGUsIGxvY2FsZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnSCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDcyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBwYWRUaWxsMihkYXRlLmdldEhvdXJzKCksIHBhZGRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnMTInXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdJJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwyKGhvdXJzMTIoZGF0ZS5nZXRIb3VycygpKSwgcGFkZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcwMDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdMJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwzKE1hdGguZmxvb3IodGltZXN0YW1wICUgMTAwMCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnMDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwyKGRhdGUuZ2V0TWludXRlcygpLCBwYWRkaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ2FtJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnUCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDgwOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBkYXRlLmdldEhvdXJzKCkgPCAxMiA/IGxvY2FsZS5hbSA6IGxvY2FsZS5wbTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzAwOjAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnUic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDgyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBfcHJvY2Vzc0Zvcm1hdChsb2NhbGUuZm9ybWF0cy5SLCBkYXRlLCBsb2NhbGUsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcwMCdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ1MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4MzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gcGFkVGlsbDIoZGF0ZS5nZXRTZWNvbmRzKCksIHBhZGRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnMDA6MDA6MDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdUJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IF9wcm9jZXNzRm9ybWF0KGxvY2FsZS5mb3JtYXRzLlQsIGRhdGUsIGxvY2FsZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnVSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDg1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBwYWRUaWxsMih3ZWVrTnVtYmVyKGRhdGUsICdzdW5kYXknKSwgcGFkZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcwMCdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4NzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gcGFkVGlsbDIod2Vla051bWJlcihkYXRlLCAnbW9uZGF5JyksIHBhZGRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnMTY6MDA6MDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdYJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IF9wcm9jZXNzRm9ybWF0KGxvY2FsZS5mb3JtYXRzLlgsIGRhdGUsIGxvY2FsZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzE5NzAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdZJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ0dNVCdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ1onOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA5MDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3VzZVV0Y0Jhc2VkRGF0ZSAmJiBfY3VzdG9tVGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IFwiR01UXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXhtZSBvcHRpbWl6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHpTdHJpbmcgPSBkYXRlLnRvU3RyaW5nKCkubWF0Y2goL1xcKChbXFx3XFxzXSspXFwpLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSB0elN0cmluZyAmJiB0elN0cmluZ1sxXSB8fCAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICdUaHUnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdhJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IGxvY2FsZS5zaG9ydERheXNbZGF0ZS5nZXREYXkoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICdKYW4nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IGxvY2FsZS5zaG9ydE1vbnRoc1tkYXRlLmdldE1vbnRoKCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDk5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBfcHJvY2Vzc0Zvcm1hdChsb2NhbGUuZm9ybWF0cy5jLCBkYXRlLCBsb2NhbGUsIHRpbWVzdGFtcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcwMSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwyKGRhdGUuZ2V0RGF0ZSgpLCBwYWRkaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJyAxJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gcGFkVGlsbDIoZGF0ZS5nZXREYXRlKCksIHBhZGRpbmcgPT0gbnVsbCA/ICcgJyA6IHBhZGRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnSmFuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gbG9jYWxlLnNob3J0TW9udGhzW2RhdGUuZ2V0TW9udGgoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcwMDAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdqJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5ID0gTWF0aC5jZWlsKChkYXRlLmdldFRpbWUoKSAtIHkuZ2V0VGltZSgpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwzKGRheSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcgMCdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ2snOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwyKGRhdGUuZ2V0SG91cnMoKSwgcGFkZGluZyA9PSBudWxsID8gJyAnIDogcGFkZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcxMidcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ2wnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwyKGhvdXJzMTIoZGF0ZS5nZXRIb3VycygpKSwgcGFkZGluZyA9PSBudWxsID8gJyAnIDogcGFkZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcwMSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHBhZFRpbGwyKGRhdGUuZ2V0TW9udGgoKSArIDEsIHBhZGRpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnXFxuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcxc3QnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdvJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTExOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byB1c2UgYW4gb3JkaW5hbCBzdWZmaXggZnJvbSB0aGUgbG9jYWxlLCBidXQgZmFsbCBiYWNrIHRvIHVzaW5nIHRoZSBvbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG9sZCBsb2NhbGVzIHRoYXQgbGFjayB0aGVtLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXkgPSBkYXRlLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlLm9yZGluYWxTdWZmaXhlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gU3RyaW5nKGRheSkgKyAobG9jYWxlLm9yZGluYWxTdWZmaXhlc1tkYXkgLSAxXSB8fCBvcmRpbmFsKGRheSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IFN0cmluZyhkYXkpICsgb3JkaW5hbChkYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ0FNJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAncCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gZGF0ZS5nZXRIb3VycygpIDwgMTIgPyBsb2NhbGUuQU0gOiBsb2NhbGUuUE07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcxMjowMDowMCBBTSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IF9wcm9jZXNzRm9ybWF0KGxvY2FsZS5mb3JtYXRzLnIsIGRhdGUsIGxvY2FsZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzAnXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFN0cmluZyArPSBNYXRoLmZsb29yKHRpbWVzdGFtcCAvIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnXFx0J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAndCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gJ1xcdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICc0J1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAndSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gZGF5ID09PSAwID8gNyA6IGRheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsgLy8gMSAtIDcsIE1vbmRheSBpcyBmaXJzdCBkYXkgb2YgdGhlIHdlZWtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJyAxLUphbi0xOTcwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAndic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gX3Byb2Nlc3NGb3JtYXQobG9jYWxlLmZvcm1hdHMudiwgZGF0ZSwgbG9jYWxlLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAnNCdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IGRhdGUuZ2V0RGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIDAgLSA2LCBTdW5kYXkgaXMgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICcxMi8zMS82OSdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IF9wcm9jZXNzRm9ybWF0KGxvY2FsZS5mb3JtYXRzLngsIGRhdGUsIGxvY2FsZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJzcwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gKCcnICsgZGF0ZS5nZXRGdWxsWWVhcigpKS5zbGljZSgyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJyswMDAwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2FzZSAneic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEyMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3VzZVV0Y0Jhc2VkRGF0ZSAmJiBfY3VzdG9tVGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IGV4dGVuZGVkVFogPyBcIiswMDowMFwiIDogXCIrMDAwMFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jdXN0b21UaW1lem9uZU9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmID0gX2N1c3RvbVRpbWV6b25lT2Zmc2V0IC8gKDYwICogMTAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmYgPSAtZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWduID0gb2ZmIDwgMCA/ICctJyA6ICcrJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcCA9IGV4dGVuZGVkVFogPyAnOicgOiAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihNYXRoLmFicyhvZmYgLyA2MCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWlucyA9IE1hdGguYWJzKG9mZiAlIDYwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0U3RyaW5nICs9IHNpZ24gKyBwYWRUaWxsMihob3VycykgKyBzZXAgKyBwYWRUaWxsMihtaW5zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5TY29wZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gJyUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gZm9ybWF0W2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlzSW5TY29wZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAnJSdcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENoYXJDb2RlID09PSAzNykge1xuICAgICAgICAgICAgICAgICAgICBpc0luU2NvcGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXN1bHRTdHJpbmcgKz0gZm9ybWF0W2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0U3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0cmZ0aW1lID0gX3N0cmZ0aW1lO1xuXG4gICAgICAgIHN0cmZ0aW1lLmxvY2FsaXplID0gZnVuY3Rpb24obG9jYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0cmZ0aW1lKGxvY2FsZSB8fCBfbG9jYWxlLCBfY3VzdG9tVGltZXpvbmVPZmZzZXQsIF91c2VVdGNCYXNlZERhdGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHN0cmZ0aW1lLmxvY2FsaXplQnlJZGVudGlmaWVyID0gZnVuY3Rpb24obG9jYWxlSWRlbnRpZmllcikge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSA9IExvY2FsZXNbbG9jYWxlSWRlbnRpZmllcl07XG4gICAgICAgICAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHdhcm4oJ1tXQVJOSU5HXSBObyBsb2NhbGUgZm91bmQgd2l0aCBpZGVudGlmaWVyIFwiJyArIGxvY2FsZUlkZW50aWZpZXIgKyAnXCIuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmZ0aW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0cmZ0aW1lLmxvY2FsaXplKGxvY2FsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RyZnRpbWUudGltZXpvbmUgPSBmdW5jdGlvbih0aW1lem9uZSkge1xuICAgICAgICAgICAgdmFyIGN1c3RvbVRpbWV6b25lT2Zmc2V0ID0gX2N1c3RvbVRpbWV6b25lT2Zmc2V0O1xuICAgICAgICAgICAgdmFyIHVzZVV0Y0Jhc2VkRGF0ZSA9IF91c2VVdGNCYXNlZERhdGU7XG5cbiAgICAgICAgICAgIHZhciB0aW1lem9uZVR5cGUgPSB0eXBlb2YgdGltZXpvbmU7XG4gICAgICAgICAgICBpZiAodGltZXpvbmVUeXBlID09PSAnbnVtYmVyJyB8fCB0aW1lem9uZVR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdXNlVXRjQmFzZWREYXRlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIElTTyA4NjAxIGZvcm1hdCB0aW1lem9uZSBzdHJpbmcsIFstK11ISE1NXG4gICAgICAgICAgICAgICAgaWYgKHRpbWV6b25lVHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpZ24gPSB0aW1lem9uZVswXSA9PT0gJy0nID8gLTEgOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG91cnMgPSBwYXJzZUludCh0aW1lem9uZS5zbGljZSgxLCAzKSwgMTApLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWludXRlcyA9IHBhcnNlSW50KHRpbWV6b25lLnNsaWNlKDMsIDUpLCAxMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tVGltZXpvbmVPZmZzZXQgPSBzaWduICogKCg2MCAqIGhvdXJzKSArIG1pbnV0ZXMpICogNjAgKiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICAvLyBpbiBtaW51dGVzOiA0MjBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGltZXpvbmVUeXBlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21UaW1lem9uZU9mZnNldCA9IHRpbWV6b25lICogNjAgKiAxMDAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTdHJmdGltZShfbG9jYWxlLCBjdXN0b21UaW1lem9uZU9mZnNldCwgdXNlVXRjQmFzZWREYXRlKTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdHJmdGltZS51dGMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RyZnRpbWUoX2xvY2FsZSwgX2N1c3RvbVRpbWV6b25lT2Zmc2V0LCB0cnVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc3RyZnRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFkVGlsbDIobnVtYmVyVG9QYWQsIHBhZGRpbmdDaGFyKSB7XG4gICAgICAgIGlmIChwYWRkaW5nQ2hhciA9PT0gJycgfHwgbnVtYmVyVG9QYWQgPiA5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyVG9QYWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRpbmdDaGFyID09IG51bGwpIHtcbiAgICAgICAgICAgIHBhZGRpbmdDaGFyID0gJzAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYWRkaW5nQ2hhciArIG51bWJlclRvUGFkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhZFRpbGwzKG51bWJlclRvUGFkKSB7XG4gICAgICAgIGlmIChudW1iZXJUb1BhZCA+IDk5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyVG9QYWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bWJlclRvUGFkID4gOSkge1xuICAgICAgICAgICAgcmV0dXJuICcwJyArIG51bWJlclRvUGFkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnMDAnICsgbnVtYmVyVG9QYWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaG91cnMxMihob3VyKSB7XG4gICAgICAgIGlmIChob3VyID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMTI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaG91ciA+IDEyKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciAtIDEyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBob3VyO1xuICAgIH1cblxuICAgIC8vIGZpcnN0V2Vla2RheTogJ3N1bmRheScgb3IgJ21vbmRheScsIGRlZmF1bHQgaXMgJ3N1bmRheSdcbiAgICAvL1xuICAgIC8vIFBpbGZlcmVkICYgcG9ydGVkIGZyb20gUnVieSdzIHN0cmZ0aW1lIGltcGxlbWVudGF0aW9uLlxuICAgIGZ1bmN0aW9uIHdlZWtOdW1iZXIoZGF0ZSwgZmlyc3RXZWVrZGF5KSB7XG4gICAgICAgIGZpcnN0V2Vla2RheSA9IGZpcnN0V2Vla2RheSB8fCAnc3VuZGF5JztcblxuICAgICAgICAvLyBUaGlzIHdvcmtzIGJ5IHNoaWZ0aW5nIHRoZSB3ZWVrZGF5IGJhY2sgYnkgb25lIGRheSBpZiB3ZVxuICAgICAgICAvLyBhcmUgdHJlYXRpbmcgTW9uZGF5IGFzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIHZhciB3ZWVrZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgICAgICAgaWYgKGZpcnN0V2Vla2RheSA9PT0gJ21vbmRheScpIHtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5ID09PSAwKSAvLyBTdW5kYXlcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gNjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB3ZWVrZGF5LS07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZmlyc3REYXlPZlllYXJVdGMgPSBEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpLFxuICAgICAgICAgICAgZGF0ZVV0YyA9IERhdGUuVVRDKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSksXG4gICAgICAgICAgICB5ZGF5ID0gTWF0aC5mbG9vcigoZGF0ZVV0YyAtIGZpcnN0RGF5T2ZZZWFyVXRjKSAvIDg2NDAwMDAwKSxcbiAgICAgICAgICAgIHdlZWtOdW0gPSAoeWRheSArIDcgLSB3ZWVrZGF5KSAvIDc7XG5cbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3Iod2Vla051bSk7XG4gICAgfVxuXG4gICAgLy8gR2V0IHRoZSBvcmRpbmFsIHN1ZmZpeCBmb3IgYSBudW1iZXI6IHN0LCBuZCwgcmQsIG9yIHRoXG4gICAgZnVuY3Rpb24gb3JkaW5hbChudW1iZXIpIHtcbiAgICAgICAgdmFyIGkgPSBudW1iZXIgJSAxMDtcbiAgICAgICAgdmFyIGlpID0gbnVtYmVyICUgMTAwO1xuXG4gICAgICAgIGlmICgoaWkgPj0gMTEgJiYgaWkgPD0gMTMpIHx8IGkgPT09IDAgfHwgaSA+PSA0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RoJztcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuICdzdCc7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiAnbmQnO1xuICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gJ3JkJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRpbWVzdGFtcFRvVXRjT2Zmc2V0Rm9yKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgfHwgMCkgKiA2MDAwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS53YXJuID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKVxuICAgICAgICB9XG4gICAgfVxuXG59KCkpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBcIiosKjo6YmVmb3JlLCo6OmFmdGVye2JveC1zaXppbmc6Ym9yZGVyLWJveH1odG1se2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWY7bGluZS1oZWlnaHQ6MS4xNTstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJTstd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6cmdiYSgwLDAsMCwwKX1hcnRpY2xlLGFzaWRlLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsaGdyb3VwLG1haW4sbmF2LHNlY3Rpb257ZGlzcGxheTpibG9ja31ib2R5e21hcmdpbjowO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFxcXCJTZWdvZSBVSVxcXCIsUm9ib3RvLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsQXJpYWwsXFxcIk5vdG8gU2Fuc1xcXCIsc2Fucy1zZXJpZixcXFwiQXBwbGUgQ29sb3IgRW1vamlcXFwiLFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsXFxcIlNlZ29lIFVJIFN5bWJvbFxcXCIsXFxcIk5vdG8gQ29sb3IgRW1vamlcXFwiO2ZvbnQtc2l6ZToxcmVtO2ZvbnQtd2VpZ2h0OjQwMDtsaW5lLWhlaWdodDoxLjU7Y29sb3I6IzIxMjUyOTt0ZXh0LWFsaWduOmxlZnQ7YmFja2dyb3VuZC1jb2xvcjojZmZmfVt0YWJpbmRleD1cXFwiLTFcXFwiXTpmb2N1czpub3QoLmZvY3VzLXZpc2libGUpe291dGxpbmU6MCAhaW1wb3J0YW50fVt0YWJpbmRleD1cXFwiLTFcXFwiXTpmb2N1czpub3QoOmZvY3VzLXZpc2libGUpe291dGxpbmU6MCAhaW1wb3J0YW50fWhye2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjA7b3ZlcmZsb3c6dmlzaWJsZX1oMSxoMixoMyxoNCxoNSxoNnttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTouNXJlbX1we21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjFyZW19YWJiclt0aXRsZV0sYWJicltkYXRhLW9yaWdpbmFsLXRpdGxlXXt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lOy13ZWJraXQtdGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWQ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZSBkb3R0ZWQ7Y3Vyc29yOmhlbHA7Ym9yZGVyLWJvdHRvbTowOy13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXNraXAtaW5rOm5vbmU7dGV4dC1kZWNvcmF0aW9uLXNraXAtaW5rOm5vbmV9YWRkcmVzc3ttYXJnaW4tYm90dG9tOjFyZW07Zm9udC1zdHlsZTpub3JtYWw7bGluZS1oZWlnaHQ6aW5oZXJpdH1vbCx1bCxkbHttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbToxcmVtfW9sIG9sLHVsIHVsLG9sIHVsLHVsIG9se21hcmdpbi1ib3R0b206MH1kdHtmb250LXdlaWdodDo3MDB9ZGR7bWFyZ2luLWJvdHRvbTouNXJlbTttYXJnaW4tbGVmdDowfWJsb2NrcXVvdGV7bWFyZ2luOjAgMCAxcmVtfWIsc3Ryb25ne2ZvbnQtd2VpZ2h0OmJvbGRlcn1zbWFsbHtmb250LXNpemU6ODAlfXN1YixzdXB7cG9zaXRpb246cmVsYXRpdmU7Zm9udC1zaXplOjc1JTtsaW5lLWhlaWdodDowO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXN1Yntib3R0b206LS4yNWVtfXN1cHt0b3A6LS41ZW19YXtjb2xvcjojMDA3YmZmO3RleHQtZGVjb3JhdGlvbjpub25lO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnR9YTpob3Zlcntjb2xvcjojMDA1NmIzO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmV9YTpub3QoW2hyZWZdKXtjb2xvcjppbmhlcml0O3RleHQtZGVjb3JhdGlvbjpub25lfWE6bm90KFtocmVmXSk6aG92ZXJ7Y29sb3I6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246bm9uZX1wcmUsY29kZSxrYmQsc2FtcHtmb250LWZhbWlseTpTRk1vbm8tUmVndWxhcixNZW5sbyxNb25hY28sQ29uc29sYXMsXFxcIkxpYmVyYXRpb24gTW9ub1xcXCIsXFxcIkNvdXJpZXIgTmV3XFxcIixtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1wcmV7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MXJlbTtvdmVyZmxvdzphdXRvOy1tcy1vdmVyZmxvdy1zdHlsZTpzY3JvbGxiYXJ9ZmlndXJle21hcmdpbjowIDAgMXJlbX1pbWd7dmVydGljYWwtYWxpZ246bWlkZGxlO2JvcmRlci1zdHlsZTpub25lfXN2Z3tvdmVyZmxvdzpoaWRkZW47dmVydGljYWwtYWxpZ246bWlkZGxlfXRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZX1jYXB0aW9ue3BhZGRpbmctdG9wOi43NXJlbTtwYWRkaW5nLWJvdHRvbTouNzVyZW07Y29sb3I6IzZjNzU3ZDt0ZXh0LWFsaWduOmxlZnQ7Y2FwdGlvbi1zaWRlOmJvdHRvbX10aHt0ZXh0LWFsaWduOmluaGVyaXR9bGFiZWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTouNXJlbX1idXR0b257Ym9yZGVyLXJhZGl1czowfWJ1dHRvbjpmb2N1c3tvdXRsaW5lOjFweCBkb3R0ZWQ7b3V0bGluZTo1cHggYXV0byAtd2Via2l0LWZvY3VzLXJpbmctY29sb3J9aW5wdXQsYnV0dG9uLHNlbGVjdCxvcHRncm91cCx0ZXh0YXJlYXttYXJnaW46MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2xpbmUtaGVpZ2h0OmluaGVyaXR9YnV0dG9uLGlucHV0e292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfVtyb2xlPVxcXCJidXR0b25cXFwiXXtjdXJzb3I6cG9pbnRlcn1zZWxlY3R7d29yZC13cmFwOm5vcm1hbH1idXR0b24sW3R5cGU9XFxcImJ1dHRvblxcXCJdLFt0eXBlPVxcXCJyZXNldFxcXCJdLFt0eXBlPVxcXCJzdWJtaXRcXFwiXXstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9ufWJ1dHRvbjpub3QoOmRpc2FibGVkKSxbdHlwZT1cXFwiYnV0dG9uXFxcIl06bm90KDpkaXNhYmxlZCksW3R5cGU9XFxcInJlc2V0XFxcIl06bm90KDpkaXNhYmxlZCksW3R5cGU9XFxcInN1Ym1pdFxcXCJdOm5vdCg6ZGlzYWJsZWQpe2N1cnNvcjpwb2ludGVyfWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT1cXFwiYnV0dG9uXFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcInJlc2V0XFxcIl06Oi1tb3otZm9jdXMtaW5uZXIsW3R5cGU9XFxcInN1Ym1pdFxcXCJdOjotbW96LWZvY3VzLWlubmVye3BhZGRpbmc6MDtib3JkZXItc3R5bGU6bm9uZX1pbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdLGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl17Ym94LXNpemluZzpib3JkZXItYm94O3BhZGRpbmc6MH10ZXh0YXJlYXtvdmVyZmxvdzphdXRvO3Jlc2l6ZTp2ZXJ0aWNhbH1maWVsZHNldHttaW4td2lkdGg6MDtwYWRkaW5nOjA7bWFyZ2luOjA7Ym9yZGVyOjB9bGVnZW5ke2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTttYXgtd2lkdGg6MTAwJTtwYWRkaW5nOjA7bWFyZ2luLWJvdHRvbTouNXJlbTtmb250LXNpemU6MS41cmVtO2xpbmUtaGVpZ2h0OmluaGVyaXQ7Y29sb3I6aW5oZXJpdDt3aGl0ZS1zcGFjZTpub3JtYWx9cHJvZ3Jlc3N7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9W3R5cGU9XFxcIm51bWJlclxcXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFt0eXBlPVxcXCJudW1iZXJcXFwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31bdHlwZT1cXFwic2VhcmNoXFxcIl17b3V0bGluZS1vZmZzZXQ6LTJweDstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX1bdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb257LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9Ojotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbntmb250OmluaGVyaXQ7LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbn1vdXRwdXR7ZGlzcGxheTppbmxpbmUtYmxvY2t9c3VtbWFyeXtkaXNwbGF5Omxpc3QtaXRlbTtjdXJzb3I6cG9pbnRlcn10ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9W2hpZGRlbl17ZGlzcGxheTpub25lICFpbXBvcnRhbnR9XFxuXCI7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vZW1vdGlvbi1zZXJ2ZXIuY2pzLnByb2QuanNcIik7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2Vtb3Rpb24tc2VydmVyLmNqcy5kZXYuanNcIik7XG59XG4iLCIvKmpzaGludCBub2RlOnRydWUqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFJlcGxhY2VzIGNoYXJhY3RlcnMgaW4gc3RyaW5ncyB0aGF0IGFyZSBpbGxlZ2FsL3Vuc2FmZSBmb3IgZmlsZW5hbWVzLlxuICogVW5zYWZlIGNoYXJhY3RlcnMgYXJlIGVpdGhlciByZW1vdmVkIG9yIHJlcGxhY2VkIGJ5IGEgc3Vic3RpdHV0ZSBzZXRcbiAqIGluIHRoZSBvcHRpb25hbCBgb3B0aW9uc2Agb2JqZWN0LlxuICpcbiAqIElsbGVnYWwgQ2hhcmFjdGVycyBvbiBWYXJpb3VzIE9wZXJhdGluZyBTeXN0ZW1zXG4gKiAvID8gPCA+IFxcIDogKiB8IFwiXG4gKiBodHRwczovL2tiLmFjcm9uaXMuY29tL2NvbnRlbnQvMzk3OTBcbiAqXG4gKiBVbmljb2RlIENvbnRyb2wgY29kZXNcbiAqIEMwIDB4MDAtMHgxZiAmIEMxICgweDgwLTB4OWYpXG4gKiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0MwX2FuZF9DMV9jb250cm9sX2NvZGVzXG4gKlxuICogUmVzZXJ2ZWQgZmlsZW5hbWVzIG9uIFVuaXgtYmFzZWQgc3lzdGVtcyAoXCIuXCIsIFwiLi5cIilcbiAqIFJlc2VydmVkIGZpbGVuYW1lcyBpbiBXaW5kb3dzIChcIkNPTlwiLCBcIlBSTlwiLCBcIkFVWFwiLCBcIk5VTFwiLCBcIkNPTTFcIixcbiAqIFwiQ09NMlwiLCBcIkNPTTNcIiwgXCJDT000XCIsIFwiQ09NNVwiLCBcIkNPTTZcIiwgXCJDT003XCIsIFwiQ09NOFwiLCBcIkNPTTlcIixcbiAqIFwiTFBUMVwiLCBcIkxQVDJcIiwgXCJMUFQzXCIsIFwiTFBUNFwiLCBcIkxQVDVcIiwgXCJMUFQ2XCIsIFwiTFBUN1wiLCBcIkxQVDhcIiwgYW5kXG4gKiBcIkxQVDlcIikgY2FzZS1pbnNlc2l0aXZlbHkgYW5kIHdpdGggb3Igd2l0aG91dCBmaWxlbmFtZSBleHRlbnNpb25zLlxuICpcbiAqIENhcHBlZCBhdCAyNTUgY2hhcmFjdGVycyBpbiBsZW5ndGguXG4gKiBodHRwOi8vdW5peC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMzI3OTUvd2hhdC1pcy10aGUtbWF4aW11bS1hbGxvd2VkLWZpbGVuYW1lLWFuZC1mb2xkZXItc2l6ZS13aXRoLWVjcnlwdGZzXG4gKlxuICogQHBhcmFtICB7U3RyaW5nfSBpbnB1dCAgIE9yaWdpbmFsIGZpbGVuYW1lXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMge3JlcGxhY2VtZW50OiBTdHJpbmcgfCBGdW5jdGlvbiB9XG4gKiBAcmV0dXJuIHtTdHJpbmd9ICAgICAgICAgU2FuaXRpemVkIGZpbGVuYW1lXG4gKi9cblxudmFyIHRydW5jYXRlID0gcmVxdWlyZShcInRydW5jYXRlLXV0ZjgtYnl0ZXNcIik7XG5cbnZhciBpbGxlZ2FsUmUgPSAvW1xcL1xcPzw+XFxcXDpcXCpcXHxcIl0vZztcbnZhciBjb250cm9sUmUgPSAvW1xceDAwLVxceDFmXFx4ODAtXFx4OWZdL2c7XG52YXIgcmVzZXJ2ZWRSZSA9IC9eXFwuKyQvO1xudmFyIHdpbmRvd3NSZXNlcnZlZFJlID0gL14oY29ufHBybnxhdXh8bnVsfGNvbVswLTldfGxwdFswLTldKShcXC4uKik/JC9pO1xudmFyIHdpbmRvd3NUcmFpbGluZ1JlID0gL1tcXC4gXSskLztcblxuZnVuY3Rpb24gc2FuaXRpemUoaW5wdXQsIHJlcGxhY2VtZW50KSB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBtdXN0IGJlIHN0cmluZycpO1xuICB9XG4gIHZhciBzYW5pdGl6ZWQgPSBpbnB1dFxuICAgIC5yZXBsYWNlKGlsbGVnYWxSZSwgcmVwbGFjZW1lbnQpXG4gICAgLnJlcGxhY2UoY29udHJvbFJlLCByZXBsYWNlbWVudClcbiAgICAucmVwbGFjZShyZXNlcnZlZFJlLCByZXBsYWNlbWVudClcbiAgICAucmVwbGFjZSh3aW5kb3dzUmVzZXJ2ZWRSZSwgcmVwbGFjZW1lbnQpXG4gICAgLnJlcGxhY2Uod2luZG93c1RyYWlsaW5nUmUsIHJlcGxhY2VtZW50KTtcbiAgcmV0dXJuIHRydW5jYXRlKHNhbml0aXplZCwgMjU1KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlcGxhY2VtZW50ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5yZXBsYWNlbWVudCkgfHwgJyc7XG4gIHZhciBvdXRwdXQgPSBzYW5pdGl6ZShpbnB1dCwgcmVwbGFjZW1lbnQpO1xuICBpZiAocmVwbGFjZW1lbnQgPT09ICcnKSB7XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxuICByZXR1cm4gc2FuaXRpemUob3V0cHV0LCAnJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cy5Bcmd1bWVudFBhcnNlciA9IHJlcXVpcmUoJy4vYXJndW1lbnRfcGFyc2VyLmpzJyk7XG5tb2R1bGUuZXhwb3J0cy5OYW1lc3BhY2UgPSByZXF1aXJlKCcuL25hbWVzcGFjZScpO1xubW9kdWxlLmV4cG9ydHMuQWN0aW9uID0gcmVxdWlyZSgnLi9hY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzLkhlbHBGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL2hlbHAvZm9ybWF0dGVyLmpzJyk7XG5tb2R1bGUuZXhwb3J0cy5Db25zdCA9IHJlcXVpcmUoJy4vY29uc3QuanMnKTtcblxubW9kdWxlLmV4cG9ydHMuQXJndW1lbnREZWZhdWx0c0hlbHBGb3JtYXR0ZXIgPVxuICByZXF1aXJlKCcuL2hlbHAvYWRkZWRfZm9ybWF0dGVycy5qcycpLkFyZ3VtZW50RGVmYXVsdHNIZWxwRm9ybWF0dGVyO1xubW9kdWxlLmV4cG9ydHMuUmF3RGVzY3JpcHRpb25IZWxwRm9ybWF0dGVyID1cbiAgcmVxdWlyZSgnLi9oZWxwL2FkZGVkX2Zvcm1hdHRlcnMuanMnKS5SYXdEZXNjcmlwdGlvbkhlbHBGb3JtYXR0ZXI7XG5tb2R1bGUuZXhwb3J0cy5SYXdUZXh0SGVscEZvcm1hdHRlciA9XG4gIHJlcXVpcmUoJy4vaGVscC9hZGRlZF9mb3JtYXR0ZXJzLmpzJykuUmF3VGV4dEhlbHBGb3JtYXR0ZXI7XG4iLCIvKipcbiAqIGNsYXNzIEFyZ3VtZW50UGFyc2VyXG4gKlxuICogT2JqZWN0IGZvciBwYXJzaW5nIGNvbW1hbmQgbGluZSBzdHJpbmdzIGludG8ganMgb2JqZWN0cy5cbiAqXG4gKiBJbmhlcml0ZWQgZnJvbSBbW0FjdGlvbkNvbnRhaW5lcl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsICAgID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGZvcm1hdCAgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0O1xudmFyIFBhdGggICAgPSByZXF1aXJlKCdwYXRoJyk7XG52YXIgc3ByaW50ZiA9IHJlcXVpcmUoJ3NwcmludGYtanMnKS5zcHJpbnRmO1xuXG4vLyBDb25zdGFudHNcbnZhciBjID0gcmVxdWlyZSgnLi9jb25zdCcpO1xuXG52YXIgJCQgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBBY3Rpb25Db250YWluZXIgPSByZXF1aXJlKCcuL2FjdGlvbl9jb250YWluZXInKTtcblxuLy8gRXJyb3JzXG52YXIgYXJndW1lbnRFcnJvckhlbHBlciA9IHJlcXVpcmUoJy4vYXJndW1lbnQvZXJyb3InKTtcblxudmFyIEhlbHBGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL2hlbHAvZm9ybWF0dGVyJyk7XG5cbnZhciBOYW1lc3BhY2UgPSByZXF1aXJlKCcuL25hbWVzcGFjZScpO1xuXG5cbi8qKlxuICogbmV3IEFyZ3VtZW50UGFyc2VyKG9wdGlvbnMpXG4gKlxuICogQ3JlYXRlIGEgbmV3IEFyZ3VtZW50UGFyc2VyIG9iamVjdC5cbiAqXG4gKiAjIyMjIyBPcHRpb25zOlxuICogLSBgcHJvZ2AgIFRoZSBuYW1lIG9mIHRoZSBwcm9ncmFtIChkZWZhdWx0OiBQYXRoLmJhc2VuYW1lKHByb2Nlc3MuYXJndlsxXSkpXG4gKiAtIGB1c2FnZWAgIEEgdXNhZ2UgbWVzc2FnZSAoZGVmYXVsdDogYXV0by1nZW5lcmF0ZWQgZnJvbSBhcmd1bWVudHMpXG4gKiAtIGBkZXNjcmlwdGlvbmAgIEEgZGVzY3JpcHRpb24gb2Ygd2hhdCB0aGUgcHJvZ3JhbSBkb2VzXG4gKiAtIGBlcGlsb2dgICBUZXh0IGZvbGxvd2luZyB0aGUgYXJndW1lbnQgZGVzY3JpcHRpb25zXG4gKiAtIGBwYXJlbnRzYCAgUGFyc2VycyB3aG9zZSBhcmd1bWVudHMgc2hvdWxkIGJlIGNvcGllZCBpbnRvIHRoaXMgb25lXG4gKiAtIGBmb3JtYXR0ZXJDbGFzc2AgIEhlbHBGb3JtYXR0ZXIgY2xhc3MgZm9yIHByaW50aW5nIGhlbHAgbWVzc2FnZXNcbiAqIC0gYHByZWZpeENoYXJzYCAgQ2hhcmFjdGVycyB0aGF0IHByZWZpeCBvcHRpb25hbCBhcmd1bWVudHNcbiAqIC0gYGZyb21maWxlUHJlZml4Q2hhcnNgIENoYXJhY3RlcnMgdGhhdCBwcmVmaXggZmlsZXMgY29udGFpbmluZyBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICogLSBgYXJndW1lbnREZWZhdWx0YCAgVGhlIGRlZmF1bHQgdmFsdWUgZm9yIGFsbCBhcmd1bWVudHNcbiAqIC0gYGFkZEhlbHBgICBBZGQgYSAtaC8taGVscCBvcHRpb25cbiAqIC0gYGNvbmZsaWN0SGFuZGxlcmAgIFNwZWNpZmllcyBob3cgdG8gaGFuZGxlIGNvbmZsaWN0aW5nIGFyZ3VtZW50IG5hbWVzXG4gKiAtIGBkZWJ1Z2AgIEVuYWJsZSBkZWJ1ZyBtb2RlLiBBcmd1bWVudCBlcnJvcnMgdGhyb3cgZXhjZXB0aW9uIGluXG4gKiAgIGRlYnVnIG1vZGUgYW5kIHByb2Nlc3MuZXhpdCBpbiBub3JtYWwuIFVzZWQgZm9yIGRldmVsb3BtZW50IGFuZFxuICogICB0ZXN0aW5nIChkZWZhdWx0OiBmYWxzZSlcbiAqXG4gKiBTZWUgYWxzbyBbb3JpZ2luYWwgZ3VpZGVdWzFdXG4gKlxuICogWzFdOmh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvZGV2L2xpYnJhcnkvYXJncGFyc2UuaHRtbCNhcmd1bWVudHBhcnNlci1vYmplY3RzXG4gKiovXG5mdW5jdGlvbiBBcmd1bWVudFBhcnNlcihvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBcmd1bWVudFBhcnNlcikpIHtcbiAgICByZXR1cm4gbmV3IEFyZ3VtZW50UGFyc2VyKG9wdGlvbnMpO1xuICB9XG4gIHZhciBzZWxmID0gdGhpcztcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgb3B0aW9ucy5kZXNjcmlwdGlvbiA9IChvcHRpb25zLmRlc2NyaXB0aW9uIHx8IG51bGwpO1xuICBvcHRpb25zLmFyZ3VtZW50RGVmYXVsdCA9IChvcHRpb25zLmFyZ3VtZW50RGVmYXVsdCB8fCBudWxsKTtcbiAgb3B0aW9ucy5wcmVmaXhDaGFycyA9IChvcHRpb25zLnByZWZpeENoYXJzIHx8ICctJyk7XG4gIG9wdGlvbnMuY29uZmxpY3RIYW5kbGVyID0gKG9wdGlvbnMuY29uZmxpY3RIYW5kbGVyIHx8ICdlcnJvcicpO1xuICBBY3Rpb25Db250YWluZXIuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBvcHRpb25zLmFkZEhlbHAgPSB0eXBlb2Ygb3B0aW9ucy5hZGRIZWxwID09PSAndW5kZWZpbmVkJyB8fCAhIW9wdGlvbnMuYWRkSGVscDtcbiAgb3B0aW9ucy5wYXJlbnRzID0gb3B0aW9ucy5wYXJlbnRzIHx8IFtdO1xuICAvLyBkZWZhdWx0IHByb2dyYW0gbmFtZVxuICBvcHRpb25zLnByb2cgPSAob3B0aW9ucy5wcm9nIHx8IFBhdGguYmFzZW5hbWUocHJvY2Vzcy5hcmd2WzFdKSk7XG4gIHRoaXMucHJvZyA9IG9wdGlvbnMucHJvZztcbiAgdGhpcy51c2FnZSA9IG9wdGlvbnMudXNhZ2U7XG4gIHRoaXMuZXBpbG9nID0gb3B0aW9ucy5lcGlsb2c7XG4gIHRoaXMudmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvbjtcblxuICB0aGlzLmRlYnVnID0gKG9wdGlvbnMuZGVidWcgPT09IHRydWUpO1xuXG4gIHRoaXMuZm9ybWF0dGVyQ2xhc3MgPSAob3B0aW9ucy5mb3JtYXR0ZXJDbGFzcyB8fCBIZWxwRm9ybWF0dGVyKTtcbiAgdGhpcy5mcm9tZmlsZVByZWZpeENoYXJzID0gb3B0aW9ucy5mcm9tZmlsZVByZWZpeENoYXJzIHx8IG51bGw7XG4gIHRoaXMuX3Bvc2l0aW9uYWxzID0gdGhpcy5hZGRBcmd1bWVudEdyb3VwKHsgdGl0bGU6ICdQb3NpdGlvbmFsIGFyZ3VtZW50cycgfSk7XG4gIHRoaXMuX29wdGlvbmFscyA9IHRoaXMuYWRkQXJndW1lbnRHcm91cCh7IHRpdGxlOiAnT3B0aW9uYWwgYXJndW1lbnRzJyB9KTtcbiAgdGhpcy5fc3VicGFyc2VycyA9IG51bGw7XG5cbiAgLy8gcmVnaXN0ZXIgdHlwZXNcbiAgZnVuY3Rpb24gRlVOQ1RJT05fSURFTlRJVFkobykge1xuICAgIHJldHVybiBvO1xuICB9XG4gIHRoaXMucmVnaXN0ZXIoJ3R5cGUnLCAnYXV0bycsIEZVTkNUSU9OX0lERU5USVRZKTtcbiAgdGhpcy5yZWdpc3RlcigndHlwZScsIG51bGwsIEZVTkNUSU9OX0lERU5USVRZKTtcbiAgdGhpcy5yZWdpc3RlcigndHlwZScsICdpbnQnLCBmdW5jdGlvbiAoeCkge1xuICAgIHZhciByZXN1bHQgPSBwYXJzZUludCh4LCAxMCk7XG4gICAgaWYgKGlzTmFOKHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih4ICsgJyBpcyBub3QgYSB2YWxpZCBpbnRlZ2VyLicpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcbiAgdGhpcy5yZWdpc3RlcigndHlwZScsICdmbG9hdCcsIGZ1bmN0aW9uICh4KSB7XG4gICAgdmFyIHJlc3VsdCA9IHBhcnNlRmxvYXQoeCk7XG4gICAgaWYgKGlzTmFOKHJlc3VsdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcih4ICsgJyBpcyBub3QgYSB2YWxpZCBmbG9hdC4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSk7XG4gIHRoaXMucmVnaXN0ZXIoJ3R5cGUnLCAnc3RyaW5nJywgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gJycgKyB4O1xuICB9KTtcblxuICAvLyBhZGQgaGVscCBhbmQgdmVyc2lvbiBhcmd1bWVudHMgaWYgbmVjZXNzYXJ5XG4gIHZhciBkZWZhdWx0UHJlZml4ID0gKHRoaXMucHJlZml4Q2hhcnMuaW5kZXhPZignLScpID4gLTEpID8gJy0nIDogdGhpcy5wcmVmaXhDaGFyc1swXTtcbiAgaWYgKG9wdGlvbnMuYWRkSGVscCkge1xuICAgIHRoaXMuYWRkQXJndW1lbnQoXG4gICAgICBbIGRlZmF1bHRQcmVmaXggKyAnaCcsIGRlZmF1bHRQcmVmaXggKyBkZWZhdWx0UHJlZml4ICsgJ2hlbHAnIF0sXG4gICAgICB7XG4gICAgICAgIGFjdGlvbjogJ2hlbHAnLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGMuU1VQUFJFU1MsXG4gICAgICAgIGhlbHA6ICdTaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0LidcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIGlmICh0eXBlb2YgdGhpcy52ZXJzaW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuYWRkQXJndW1lbnQoXG4gICAgICBbIGRlZmF1bHRQcmVmaXggKyAndicsIGRlZmF1bHRQcmVmaXggKyBkZWZhdWx0UHJlZml4ICsgJ3ZlcnNpb24nIF0sXG4gICAgICB7XG4gICAgICAgIGFjdGlvbjogJ3ZlcnNpb24nLFxuICAgICAgICB2ZXJzaW9uOiB0aGlzLnZlcnNpb24sXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogYy5TVVBQUkVTUyxcbiAgICAgICAgaGVscDogXCJTaG93IHByb2dyYW0ncyB2ZXJzaW9uIG51bWJlciBhbmQgZXhpdC5cIlxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICAvLyBhZGQgcGFyZW50IGFyZ3VtZW50cyBhbmQgZGVmYXVsdHNcbiAgb3B0aW9ucy5wYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHBhcmVudCkge1xuICAgIHNlbGYuX2FkZENvbnRhaW5lckFjdGlvbnMocGFyZW50KTtcbiAgICBpZiAodHlwZW9mIHBhcmVudC5fZGVmYXVsdHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKHZhciBkZWZhdWx0S2V5IGluIHBhcmVudC5fZGVmYXVsdHMpIHtcbiAgICAgICAgaWYgKHBhcmVudC5fZGVmYXVsdHMuaGFzT3duUHJvcGVydHkoZGVmYXVsdEtleSkpIHtcbiAgICAgICAgICBzZWxmLl9kZWZhdWx0c1tkZWZhdWx0S2V5XSA9IHBhcmVudC5fZGVmYXVsdHNbZGVmYXVsdEtleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG51dGlsLmluaGVyaXRzKEFyZ3VtZW50UGFyc2VyLCBBY3Rpb25Db250YWluZXIpO1xuXG4vKipcbiAqIEFyZ3VtZW50UGFyc2VyI2FkZFN1YnBhcnNlcnMob3B0aW9ucykgLT4gW1tBY3Rpb25TdWJwYXJzZXJzXV1cbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogaGFzaCBvZiBvcHRpb25zIHNlZSBbW0FjdGlvblN1YnBhcnNlcnMubmV3XV1cbiAqXG4gKiBTZWUgYWxzbyBbc3ViY29tbWFuZHNdWzFdXG4gKlxuICogWzFdOmh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvZGV2L2xpYnJhcnkvYXJncGFyc2UuaHRtbCNzdWItY29tbWFuZHNcbiAqKi9cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5hZGRTdWJwYXJzZXJzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgaWYgKHRoaXMuX3N1YnBhcnNlcnMpIHtcbiAgICB0aGlzLmVycm9yKCdDYW5ub3QgaGF2ZSBtdWx0aXBsZSBzdWJwYXJzZXIgYXJndW1lbnRzLicpO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuZGVidWcgPSAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSk7XG4gIG9wdGlvbnMub3B0aW9uU3RyaW5ncyA9IFtdO1xuICBvcHRpb25zLnBhcnNlckNsYXNzID0gKG9wdGlvbnMucGFyc2VyQ2xhc3MgfHwgQXJndW1lbnRQYXJzZXIpO1xuXG5cbiAgaWYgKCEhb3B0aW9ucy50aXRsZSB8fCAhIW9wdGlvbnMuZGVzY3JpcHRpb24pIHtcblxuICAgIHRoaXMuX3N1YnBhcnNlcnMgPSB0aGlzLmFkZEFyZ3VtZW50R3JvdXAoe1xuICAgICAgdGl0bGU6IChvcHRpb25zLnRpdGxlIHx8ICdzdWJjb21tYW5kcycpLFxuICAgICAgZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb25cbiAgICB9KTtcbiAgICBkZWxldGUgb3B0aW9ucy50aXRsZTtcbiAgICBkZWxldGUgb3B0aW9ucy5kZXNjcmlwdGlvbjtcblxuICB9IGVsc2Uge1xuICAgIHRoaXMuX3N1YnBhcnNlcnMgPSB0aGlzLl9wb3NpdGlvbmFscztcbiAgfVxuXG4gIC8vIHByb2cgZGVmYXVsdHMgdG8gdGhlIHVzYWdlIG1lc3NhZ2Ugb2YgdGhpcyBwYXJzZXIsIHNraXBwaW5nXG4gIC8vIG9wdGlvbmFsIGFyZ3VtZW50cyBhbmQgd2l0aCBubyBcInVzYWdlOlwiIHByZWZpeFxuICBpZiAoIW9wdGlvbnMucHJvZykge1xuICAgIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9nZXRGb3JtYXR0ZXIoKTtcbiAgICB2YXIgcG9zaXRpb25hbHMgPSB0aGlzLl9nZXRQb3NpdGlvbmFsQWN0aW9ucygpO1xuICAgIHZhciBncm91cHMgPSB0aGlzLl9tdXR1YWxseUV4Y2x1c2l2ZUdyb3VwcztcbiAgICBmb3JtYXR0ZXIuYWRkVXNhZ2UodGhpcy51c2FnZSwgcG9zaXRpb25hbHMsIGdyb3VwcywgJycpO1xuICAgIG9wdGlvbnMucHJvZyA9IGZvcm1hdHRlci5mb3JtYXRIZWxwKCkudHJpbSgpO1xuICB9XG5cbiAgLy8gY3JlYXRlIHRoZSBwYXJzZXJzIGFjdGlvbiBhbmQgYWRkIGl0IHRvIHRoZSBwb3NpdGlvbmFscyBsaXN0XG4gIHZhciBQYXJzZXJzQ2xhc3MgPSB0aGlzLl9wb3BBY3Rpb25DbGFzcyhvcHRpb25zLCAncGFyc2VycycpO1xuICB2YXIgYWN0aW9uID0gbmV3IFBhcnNlcnNDbGFzcyhvcHRpb25zKTtcbiAgdGhpcy5fc3VicGFyc2Vycy5fYWRkQWN0aW9uKGFjdGlvbik7XG5cbiAgLy8gcmV0dXJuIHRoZSBjcmVhdGVkIHBhcnNlcnMgYWN0aW9uXG4gIHJldHVybiBhY3Rpb247XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX2FkZEFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgaWYgKGFjdGlvbi5pc09wdGlvbmFsKCkpIHtcbiAgICB0aGlzLl9vcHRpb25hbHMuX2FkZEFjdGlvbihhY3Rpb24pO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX3Bvc2l0aW9uYWxzLl9hZGRBY3Rpb24oYWN0aW9uKTtcbiAgfVxuICByZXR1cm4gYWN0aW9uO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9nZXRPcHRpb25hbEFjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9hY3Rpb25zLmZpbHRlcihmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbi5pc09wdGlvbmFsKCk7XG4gIH0pO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9nZXRQb3NpdGlvbmFsQWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2FjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICByZXR1cm4gYWN0aW9uLmlzUG9zaXRpb25hbCgpO1xuICB9KTtcbn07XG5cblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNwYXJzZUFyZ3MoYXJncywgbmFtZXNwYWNlKSAtPiBOYW1lc3BhY2V8T2JqZWN0XG4gKiAtIGFyZ3MgKGFycmF5KTogaW5wdXQgZWxlbWVudHNcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2V8T2JqZWN0KTogcmVzdWx0IG9iamVjdFxuICpcbiAqIFBhcnNlZCBhcmdzIGFuZCB0aHJvd3MgZXJyb3IgaWYgc29tZSBhcmd1bWVudHMgYXJlIG5vdCByZWNvZ25pemVkXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjdGhlLXBhcnNlLWFyZ3MtbWV0aG9kXG4gKiovXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUucGFyc2VBcmdzID0gZnVuY3Rpb24gKGFyZ3MsIG5hbWVzcGFjZSkge1xuICB2YXIgYXJndjtcbiAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VLbm93bkFyZ3MoYXJncywgbmFtZXNwYWNlKTtcblxuICBhcmdzID0gcmVzdWx0WzBdO1xuICBhcmd2ID0gcmVzdWx0WzFdO1xuICBpZiAoYXJndiAmJiBhcmd2Lmxlbmd0aCA+IDApIHtcbiAgICB0aGlzLmVycm9yKFxuICAgICAgZm9ybWF0KCdVbnJlY29nbml6ZWQgYXJndW1lbnRzOiAlcy4nLCBhcmd2LmpvaW4oJyAnKSlcbiAgICApO1xuICB9XG4gIHJldHVybiBhcmdzO1xufTtcblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNwYXJzZUtub3duQXJncyhhcmdzLCBuYW1lc3BhY2UpIC0+IGFycmF5XG4gKiAtIGFyZ3MgKGFycmF5KTogaW5wdXQgb3B0aW9uc1xuICogLSBuYW1lc3BhY2UgKE5hbWVzcGFjZXxPYmplY3QpOiByZXN1bHQgb2JqZWN0XG4gKlxuICogUGFyc2Uga25vd24gYXJndW1lbnRzIGFuZCByZXR1cm4gdHVwbGUgb2YgcmVzdWx0IG9iamVjdFxuICogYW5kIHVua25vd24gYXJnc1xuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV1bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI3BhcnRpYWwtcGFyc2luZ1xuICoqL1xuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLnBhcnNlS25vd25BcmdzID0gZnVuY3Rpb24gKGFyZ3MsIG5hbWVzcGFjZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gYXJncyBkZWZhdWx0IHRvIHRoZSBzeXN0ZW0gYXJnc1xuICBhcmdzID0gYXJncyB8fCBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG5cbiAgLy8gZGVmYXVsdCBOYW1lc3BhY2UgYnVpbHQgZnJvbSBwYXJzZXIgZGVmYXVsdHNcbiAgbmFtZXNwYWNlID0gbmFtZXNwYWNlIHx8IG5ldyBOYW1lc3BhY2UoKTtcblxuICBzZWxmLl9hY3Rpb25zLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbikge1xuICAgIGlmIChhY3Rpb24uZGVzdCAhPT0gYy5TVVBQUkVTUykge1xuICAgICAgaWYgKCEkJC5oYXMobmFtZXNwYWNlLCBhY3Rpb24uZGVzdCkpIHtcbiAgICAgICAgaWYgKGFjdGlvbi5kZWZhdWx0VmFsdWUgIT09IGMuU1VQUFJFU1MpIHtcbiAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gYWN0aW9uLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbi5kZWZhdWx0VmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBzZWxmLl9nZXRWYWx1ZShhY3Rpb24sIGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5hbWVzcGFjZVthY3Rpb24uZGVzdF0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5rZXlzKHNlbGYuX2RlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgbmFtZXNwYWNlW2Rlc3RdID0gc2VsZi5fZGVmYXVsdHNbZGVzdF07XG4gIH0pO1xuXG4gIC8vIHBhcnNlIHRoZSBhcmd1bWVudHMgYW5kIGV4aXQgaWYgdGhlcmUgYXJlIGFueSBlcnJvcnNcbiAgdHJ5IHtcbiAgICB2YXIgcmVzID0gdGhpcy5fcGFyc2VLbm93bkFyZ3MoYXJncywgbmFtZXNwYWNlKTtcblxuICAgIG5hbWVzcGFjZSA9IHJlc1swXTtcbiAgICBhcmdzID0gcmVzWzFdO1xuICAgIGlmICgkJC5oYXMobmFtZXNwYWNlLCBjLl9VTlJFQ09HTklaRURfQVJHU19BVFRSKSkge1xuICAgICAgYXJncyA9ICQkLmFycmF5VW5pb24oYXJncywgbmFtZXNwYWNlW2MuX1VOUkVDT0dOSVpFRF9BUkdTX0FUVFJdKTtcbiAgICAgIGRlbGV0ZSBuYW1lc3BhY2VbYy5fVU5SRUNPR05JWkVEX0FSR1NfQVRUUl07XG4gICAgfVxuICAgIHJldHVybiBbIG5hbWVzcGFjZSwgYXJncyBdO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5lcnJvcihlKTtcbiAgfVxufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9wYXJzZUtub3duQXJncyA9IGZ1bmN0aW9uIChhcmdTdHJpbmdzLCBuYW1lc3BhY2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHZhciBleHRyYXMgPSBbXTtcblxuICAvLyByZXBsYWNlIGFyZyBzdHJpbmdzIHRoYXQgYXJlIGZpbGUgcmVmZXJlbmNlc1xuICBpZiAodGhpcy5mcm9tZmlsZVByZWZpeENoYXJzICE9PSBudWxsKSB7XG4gICAgYXJnU3RyaW5ncyA9IHRoaXMuX3JlYWRBcmdzRnJvbUZpbGVzKGFyZ1N0cmluZ3MpO1xuICB9XG4gIC8vIG1hcCBhbGwgbXV0dWFsbHkgZXhjbHVzaXZlIGFyZ3VtZW50cyB0byB0aGUgb3RoZXIgYXJndW1lbnRzXG4gIC8vIHRoZXkgY2FuJ3Qgb2NjdXIgd2l0aFxuICAvLyBQeXRob24gaGFzICdjb25mbGljdHMgPSBhY3Rpb25fY29uZmxpY3RzLnNldGRlZmF1bHQobXV0ZXhfYWN0aW9uLCBbXSknXG4gIC8vIHRob3VnaCBJIGNhbid0IGNvbmNlaXZlIG9mIGEgd2F5IGluIHdoaWNoIGFuIGFjdGlvbiBjb3VsZCBiZSBhIG1lbWJlclxuICAvLyBvZiB0d28gZGlmZmVyZW50IG11dHVhbGx5IGV4Y2x1c2l2ZSBncm91cHMuXG5cbiAgZnVuY3Rpb24gYWN0aW9uSGFzaChhY3Rpb24pIHtcbiAgICAvLyBzb21lIHNvcnQgb2YgaGFzaGFibGUga2V5IGZvciB0aGlzIGFjdGlvblxuICAgIC8vIGFjdGlvbiBpdHNlbGYgY2Fubm90IGJlIGEga2V5IGluIGFjdGlvbkNvbmZsaWN0c1xuICAgIC8vIEkgdGhpbmsgZ2V0TmFtZSgpIChqb2luIG9mIG9wdGlvblN0cmluZ3MpIGlzIHVuaXF1ZSBlbm91Z2hcbiAgICByZXR1cm4gYWN0aW9uLmdldE5hbWUoKTtcbiAgfVxuXG4gIHZhciBjb25mbGljdHMsIGtleTtcbiAgdmFyIGFjdGlvbkNvbmZsaWN0cyA9IHt9O1xuXG4gIHRoaXMuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKG11dGV4R3JvdXApIHtcbiAgICBtdXRleEdyb3VwLl9ncm91cEFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0ZXhBY3Rpb24sIGksIGdyb3VwQWN0aW9ucykge1xuICAgICAga2V5ID0gYWN0aW9uSGFzaChtdXRleEFjdGlvbik7XG4gICAgICBpZiAoISQkLmhhcyhhY3Rpb25Db25mbGljdHMsIGtleSkpIHtcbiAgICAgICAgYWN0aW9uQ29uZmxpY3RzW2tleV0gPSBbXTtcbiAgICAgIH1cbiAgICAgIGNvbmZsaWN0cyA9IGFjdGlvbkNvbmZsaWN0c1trZXldO1xuICAgICAgY29uZmxpY3RzLnB1c2guYXBwbHkoY29uZmxpY3RzLCBncm91cEFjdGlvbnMuc2xpY2UoMCwgaSkpO1xuICAgICAgY29uZmxpY3RzLnB1c2guYXBwbHkoY29uZmxpY3RzLCBncm91cEFjdGlvbnMuc2xpY2UoaSArIDEpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gZmluZCBhbGwgb3B0aW9uIGluZGljZXMsIGFuZCBkZXRlcm1pbmUgdGhlIGFyZ19zdHJpbmdfcGF0dGVyblxuICAvLyB3aGljaCBoYXMgYW4gJ08nIGlmIHRoZXJlIGlzIGFuIG9wdGlvbiBhdCBhbiBpbmRleCxcbiAgLy8gYW4gJ0EnIGlmIHRoZXJlIGlzIGFuIGFyZ3VtZW50LCBvciBhICctJyBpZiB0aGVyZSBpcyBhICctLSdcbiAgdmFyIG9wdGlvblN0cmluZ0luZGljZXMgPSB7fTtcblxuICB2YXIgYXJnU3RyaW5nUGF0dGVyblBhcnRzID0gW107XG5cbiAgYXJnU3RyaW5ncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmdTdHJpbmcsIGFyZ1N0cmluZ0luZGV4KSB7XG4gICAgaWYgKGFyZ1N0cmluZyA9PT0gJy0tJykge1xuICAgICAgYXJnU3RyaW5nUGF0dGVyblBhcnRzLnB1c2goJy0nKTtcbiAgICAgIHdoaWxlIChhcmdTdHJpbmdJbmRleCA8IGFyZ1N0cmluZ3MubGVuZ3RoKSB7XG4gICAgICAgIGFyZ1N0cmluZ1BhdHRlcm5QYXJ0cy5wdXNoKCdBJyk7XG4gICAgICAgIGFyZ1N0cmluZ0luZGV4Kys7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSwgYWRkIHRoZSBhcmcgdG8gdGhlIGFyZyBzdHJpbmdzXG4gICAgICAvLyBhbmQgbm90ZSB0aGUgaW5kZXggaWYgaXQgd2FzIGFuIG9wdGlvblxuICAgICAgdmFyIHBhdHRlcm47XG4gICAgICB2YXIgb3B0aW9uVHVwbGUgPSBzZWxmLl9wYXJzZU9wdGlvbmFsKGFyZ1N0cmluZyk7XG4gICAgICBpZiAoIW9wdGlvblR1cGxlKSB7XG4gICAgICAgIHBhdHRlcm4gPSAnQSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25TdHJpbmdJbmRpY2VzW2FyZ1N0cmluZ0luZGV4XSA9IG9wdGlvblR1cGxlO1xuICAgICAgICBwYXR0ZXJuID0gJ08nO1xuICAgICAgfVxuICAgICAgYXJnU3RyaW5nUGF0dGVyblBhcnRzLnB1c2gocGF0dGVybik7XG4gICAgfVxuICB9KTtcbiAgdmFyIGFyZ1N0cmluZ3NQYXR0ZXJuID0gYXJnU3RyaW5nUGF0dGVyblBhcnRzLmpvaW4oJycpO1xuXG4gIHZhciBzZWVuQWN0aW9ucyA9IFtdO1xuICB2YXIgc2Vlbk5vbkRlZmF1bHRBY3Rpb25zID0gW107XG5cblxuICBmdW5jdGlvbiB0YWtlQWN0aW9uKGFjdGlvbiwgYXJndW1lbnRTdHJpbmdzLCBvcHRpb25TdHJpbmcpIHtcbiAgICBzZWVuQWN0aW9ucy5wdXNoKGFjdGlvbik7XG4gICAgdmFyIGFyZ3VtZW50VmFsdWVzID0gc2VsZi5fZ2V0VmFsdWVzKGFjdGlvbiwgYXJndW1lbnRTdHJpbmdzKTtcblxuICAgIC8vIGVycm9yIGlmIHRoaXMgYXJndW1lbnQgaXMgbm90IGFsbG93ZWQgd2l0aCBvdGhlciBwcmV2aW91c2x5XG4gICAgLy8gc2VlbiBhcmd1bWVudHMsIGFzc3VtaW5nIHRoYXQgYWN0aW9ucyB0aGF0IHVzZSB0aGUgZGVmYXVsdFxuICAgIC8vIHZhbHVlIGRvbid0IHJlYWxseSBjb3VudCBhcyBcInByZXNlbnRcIlxuICAgIGlmIChhcmd1bWVudFZhbHVlcyAhPT0gYWN0aW9uLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgc2Vlbk5vbkRlZmF1bHRBY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgIGlmIChhY3Rpb25Db25mbGljdHNbYWN0aW9uSGFzaChhY3Rpb24pXSkge1xuICAgICAgICBhY3Rpb25Db25mbGljdHNbYWN0aW9uSGFzaChhY3Rpb24pXS5mb3JFYWNoKGZ1bmN0aW9uIChhY3Rpb25Db25mbGljdCkge1xuICAgICAgICAgIGlmIChzZWVuTm9uRGVmYXVsdEFjdGlvbnMuaW5kZXhPZihhY3Rpb25Db25mbGljdCkgPj0gMCkge1xuICAgICAgICAgICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihcbiAgICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgICBmb3JtYXQoJ05vdCBhbGxvd2VkIHdpdGggYXJndW1lbnQgXCIlc1wiLicsIGFjdGlvbkNvbmZsaWN0LmdldE5hbWUoKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoYXJndW1lbnRWYWx1ZXMgIT09IGMuU1VQUFJFU1MpIHtcbiAgICAgIGFjdGlvbi5jYWxsKHNlbGYsIG5hbWVzcGFjZSwgYXJndW1lbnRWYWx1ZXMsIG9wdGlvblN0cmluZyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29uc3VtZU9wdGlvbmFsKHN0YXJ0SW5kZXgpIHtcbiAgICAvLyBnZXQgdGhlIG9wdGlvbmFsIGlkZW50aWZpZWQgYXQgdGhpcyBpbmRleFxuICAgIHZhciBvcHRpb25UdXBsZSA9IG9wdGlvblN0cmluZ0luZGljZXNbc3RhcnRJbmRleF07XG4gICAgdmFyIGFjdGlvbiA9IG9wdGlvblR1cGxlWzBdO1xuICAgIHZhciBvcHRpb25TdHJpbmcgPSBvcHRpb25UdXBsZVsxXTtcbiAgICB2YXIgZXhwbGljaXRBcmcgPSBvcHRpb25UdXBsZVsyXTtcblxuICAgIC8vIGlkZW50aWZ5IGFkZGl0aW9uYWwgb3B0aW9uYWxzIGluIHRoZSBzYW1lIGFyZyBzdHJpbmdcbiAgICAvLyAoZS5nLiAteHl6IGlzIHRoZSBzYW1lIGFzIC14IC15IC16IGlmIG5vIGFyZ3MgYXJlIHJlcXVpcmVkKVxuICAgIHZhciBhY3Rpb25UdXBsZXMgPSBbXTtcblxuICAgIHZhciBhcmdzLCBhcmdDb3VudCwgc3RhcnQsIHN0b3A7XG5cbiAgICBmb3IgKDs7KSB7XG4gICAgICBpZiAoIWFjdGlvbikge1xuICAgICAgICBleHRyYXMucHVzaChhcmdTdHJpbmdzW3N0YXJ0SW5kZXhdKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0SW5kZXggKyAxO1xuICAgICAgfVxuICAgICAgaWYgKGV4cGxpY2l0QXJnKSB7XG4gICAgICAgIGFyZ0NvdW50ID0gc2VsZi5fbWF0Y2hBcmd1bWVudChhY3Rpb24sICdBJyk7XG5cbiAgICAgICAgLy8gaWYgdGhlIGFjdGlvbiBpcyBhIHNpbmdsZS1kYXNoIG9wdGlvbiBhbmQgdGFrZXMgbm9cbiAgICAgICAgLy8gYXJndW1lbnRzLCB0cnkgdG8gcGFyc2UgbW9yZSBzaW5nbGUtZGFzaCBvcHRpb25zIG91dFxuICAgICAgICAvLyBvZiB0aGUgdGFpbCBvZiB0aGUgb3B0aW9uIHN0cmluZ1xuICAgICAgICB2YXIgY2hhcnMgPSBzZWxmLnByZWZpeENoYXJzO1xuICAgICAgICBpZiAoYXJnQ291bnQgPT09IDAgJiYgY2hhcnMuaW5kZXhPZihvcHRpb25TdHJpbmdbMV0pIDwgMCkge1xuICAgICAgICAgIGFjdGlvblR1cGxlcy5wdXNoKFsgYWN0aW9uLCBbXSwgb3B0aW9uU3RyaW5nIF0pO1xuICAgICAgICAgIG9wdGlvblN0cmluZyA9IG9wdGlvblN0cmluZ1swXSArIGV4cGxpY2l0QXJnWzBdO1xuICAgICAgICAgIHZhciBuZXdFeHBsaWNpdEFyZyA9IGV4cGxpY2l0QXJnLnNsaWNlKDEpIHx8IG51bGw7XG4gICAgICAgICAgdmFyIG9wdGlvbmFsc01hcCA9IHNlbGYuX29wdGlvblN0cmluZ0FjdGlvbnM7XG5cbiAgICAgICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9uYWxzTWFwKS5pbmRleE9mKG9wdGlvblN0cmluZykgPj0gMCkge1xuICAgICAgICAgICAgYWN0aW9uID0gb3B0aW9uYWxzTWFwW29wdGlvblN0cmluZ107XG4gICAgICAgICAgICBleHBsaWNpdEFyZyA9IG5ld0V4cGxpY2l0QXJnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKGFjdGlvbiwgc3ByaW50ZignaWdub3JlZCBleHBsaWNpdCBhcmd1bWVudCAlcicsIGV4cGxpY2l0QXJnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGFyZ0NvdW50ID09PSAxKSB7XG4gICAgICAgICAgLy8gaWYgdGhlIGFjdGlvbiBleHBlY3QgZXhhY3RseSBvbmUgYXJndW1lbnQsIHdlJ3ZlXG4gICAgICAgICAgLy8gc3VjY2Vzc2Z1bGx5IG1hdGNoZWQgdGhlIG9wdGlvbjsgZXhpdCB0aGUgbG9vcFxuICAgICAgICAgIHN0b3AgPSBzdGFydEluZGV4ICsgMTtcbiAgICAgICAgICBhcmdzID0gWyBleHBsaWNpdEFyZyBdO1xuICAgICAgICAgIGFjdGlvblR1cGxlcy5wdXNoKFsgYWN0aW9uLCBhcmdzLCBvcHRpb25TdHJpbmcgXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZXJyb3IgaWYgYSBkb3VibGUtZGFzaCBvcHRpb24gZGlkIG5vdCB1c2UgdGhlXG4gICAgICAgICAgLy8gZXhwbGljaXQgYXJndW1lbnRcbiAgICAgICAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKGFjdGlvbiwgc3ByaW50ZignaWdub3JlZCBleHBsaWNpdCBhcmd1bWVudCAlcicsIGV4cGxpY2l0QXJnKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIGV4cGxpY2l0IGFyZ3VtZW50LCB0cnkgdG8gbWF0Y2ggdGhlXG4gICAgICAgIC8vIG9wdGlvbmFsJ3Mgc3RyaW5nIGFyZ3VtZW50cyB3aXRoIHRoZSBmb2xsb3dpbmcgc3RyaW5nc1xuICAgICAgICAvLyBpZiBzdWNjZXNzZnVsLCBleGl0IHRoZSBsb29wXG5cbiAgICAgICAgc3RhcnQgPSBzdGFydEluZGV4ICsgMTtcbiAgICAgICAgdmFyIHNlbGVjdGVkUGF0dGVybnMgPSBhcmdTdHJpbmdzUGF0dGVybi5zdWJzdHIoc3RhcnQpO1xuXG4gICAgICAgIGFyZ0NvdW50ID0gc2VsZi5fbWF0Y2hBcmd1bWVudChhY3Rpb24sIHNlbGVjdGVkUGF0dGVybnMpO1xuICAgICAgICBzdG9wID0gc3RhcnQgKyBhcmdDb3VudDtcblxuXG4gICAgICAgIGFyZ3MgPSBhcmdTdHJpbmdzLnNsaWNlKHN0YXJ0LCBzdG9wKTtcblxuICAgICAgICBhY3Rpb25UdXBsZXMucHVzaChbIGFjdGlvbiwgYXJncywgb3B0aW9uU3RyaW5nIF0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIH1cblxuICAgIC8vIGFkZCB0aGUgT3B0aW9uYWwgdG8gdGhlIGxpc3QgYW5kIHJldHVybiB0aGUgaW5kZXggYXQgd2hpY2hcbiAgICAvLyB0aGUgT3B0aW9uYWwncyBzdHJpbmcgYXJncyBzdG9wcGVkXG4gICAgaWYgKGFjdGlvblR1cGxlcy5sZW5ndGggPCAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2xlbmd0aCBzaG91bGQgYmUgPiAwJyk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWN0aW9uVHVwbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0YWtlQWN0aW9uLmFwcGx5KHNlbGYsIGFjdGlvblR1cGxlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBzdG9wO1xuICB9XG5cbiAgLy8gdGhlIGxpc3Qgb2YgUG9zaXRpb25hbHMgbGVmdCB0byBiZSBwYXJzZWQ7IHRoaXMgaXMgbW9kaWZpZWRcbiAgLy8gYnkgY29uc3VtZV9wb3NpdGlvbmFscygpXG4gIHZhciBwb3NpdGlvbmFscyA9IHNlbGYuX2dldFBvc2l0aW9uYWxBY3Rpb25zKCk7XG5cbiAgZnVuY3Rpb24gY29uc3VtZVBvc2l0aW9uYWxzKHN0YXJ0SW5kZXgpIHtcbiAgICAvLyBtYXRjaCBhcyBtYW55IFBvc2l0aW9uYWxzIGFzIHBvc3NpYmxlXG4gICAgdmFyIHNlbGVjdGVkUGF0dGVybiA9IGFyZ1N0cmluZ3NQYXR0ZXJuLnN1YnN0cihzdGFydEluZGV4KTtcbiAgICB2YXIgYXJnQ291bnRzID0gc2VsZi5fbWF0Y2hBcmd1bWVudHNQYXJ0aWFsKHBvc2l0aW9uYWxzLCBzZWxlY3RlZFBhdHRlcm4pO1xuXG4gICAgLy8gc2xpY2Ugb2ZmIHRoZSBhcHByb3ByaWF0ZSBhcmcgc3RyaW5ncyBmb3IgZWFjaCBQb3NpdGlvbmFsXG4gICAgLy8gYW5kIGFkZCB0aGUgUG9zaXRpb25hbCBhbmQgaXRzIGFyZ3MgdG8gdGhlIGxpc3RcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc2l0aW9uYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYWN0aW9uID0gcG9zaXRpb25hbHNbaV07XG4gICAgICB2YXIgYXJnQ291bnQgPSBhcmdDb3VudHNbaV07XG4gICAgICBpZiAodHlwZW9mIGFyZ0NvdW50ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBhcmdzID0gYXJnU3RyaW5ncy5zbGljZShzdGFydEluZGV4LCBzdGFydEluZGV4ICsgYXJnQ291bnQpO1xuXG4gICAgICBzdGFydEluZGV4ICs9IGFyZ0NvdW50O1xuICAgICAgdGFrZUFjdGlvbihhY3Rpb24sIGFyZ3MpO1xuICAgIH1cblxuICAgIC8vIHNsaWNlIG9mZiB0aGUgUG9zaXRpb25hbHMgdGhhdCB3ZSBqdXN0IHBhcnNlZCBhbmQgcmV0dXJuIHRoZVxuICAgIC8vIGluZGV4IGF0IHdoaWNoIHRoZSBQb3NpdGlvbmFscycgc3RyaW5nIGFyZ3Mgc3RvcHBlZFxuICAgIHBvc2l0aW9uYWxzID0gcG9zaXRpb25hbHMuc2xpY2UoYXJnQ291bnRzLmxlbmd0aCk7XG4gICAgcmV0dXJuIHN0YXJ0SW5kZXg7XG4gIH1cblxuICAvLyBjb25zdW1lIFBvc2l0aW9uYWxzIGFuZCBPcHRpb25hbHMgYWx0ZXJuYXRlbHksIHVudGlsIHdlIGhhdmVcbiAgLy8gcGFzc2VkIHRoZSBsYXN0IG9wdGlvbiBzdHJpbmdcbiAgdmFyIHN0YXJ0SW5kZXggPSAwO1xuICB2YXIgcG9zaXRpb247XG5cbiAgdmFyIG1heE9wdGlvblN0cmluZ0luZGV4ID0gLTE7XG5cbiAgT2JqZWN0LmtleXMob3B0aW9uU3RyaW5nSW5kaWNlcykuZm9yRWFjaChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICBtYXhPcHRpb25TdHJpbmdJbmRleCA9IE1hdGgubWF4KG1heE9wdGlvblN0cmluZ0luZGV4LCBwYXJzZUludChwb3NpdGlvbiwgMTApKTtcbiAgfSk7XG5cbiAgdmFyIHBvc2l0aW9uYWxzRW5kSW5kZXgsIG5leHRPcHRpb25TdHJpbmdJbmRleDtcblxuICB3aGlsZSAoc3RhcnRJbmRleCA8PSBtYXhPcHRpb25TdHJpbmdJbmRleCkge1xuICAgIC8vIGNvbnN1bWUgYW55IFBvc2l0aW9uYWxzIHByZWNlZGluZyB0aGUgbmV4dCBvcHRpb25cbiAgICBuZXh0T3B0aW9uU3RyaW5nSW5kZXggPSBudWxsO1xuICAgIGZvciAocG9zaXRpb24gaW4gb3B0aW9uU3RyaW5nSW5kaWNlcykge1xuICAgICAgaWYgKCFvcHRpb25TdHJpbmdJbmRpY2VzLmhhc093blByb3BlcnR5KHBvc2l0aW9uKSkgeyBjb250aW51ZTsgfVxuXG4gICAgICBwb3NpdGlvbiA9IHBhcnNlSW50KHBvc2l0aW9uLCAxMCk7XG4gICAgICBpZiAocG9zaXRpb24gPj0gc3RhcnRJbmRleCkge1xuICAgICAgICBpZiAobmV4dE9wdGlvblN0cmluZ0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgbmV4dE9wdGlvblN0cmluZ0luZGV4ID0gTWF0aC5taW4obmV4dE9wdGlvblN0cmluZ0luZGV4LCBwb3NpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dE9wdGlvblN0cmluZ0luZGV4ID0gcG9zaXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3RhcnRJbmRleCAhPT0gbmV4dE9wdGlvblN0cmluZ0luZGV4KSB7XG4gICAgICBwb3NpdGlvbmFsc0VuZEluZGV4ID0gY29uc3VtZVBvc2l0aW9uYWxzKHN0YXJ0SW5kZXgpO1xuICAgICAgLy8gb25seSB0cnkgdG8gcGFyc2UgdGhlIG5leHQgb3B0aW9uYWwgaWYgd2UgZGlkbid0IGNvbnN1bWVcbiAgICAgIC8vIHRoZSBvcHRpb24gc3RyaW5nIGR1cmluZyB0aGUgcG9zaXRpb25hbHMgcGFyc2luZ1xuICAgICAgaWYgKHBvc2l0aW9uYWxzRW5kSW5kZXggPiBzdGFydEluZGV4KSB7XG4gICAgICAgIHN0YXJ0SW5kZXggPSBwb3NpdGlvbmFsc0VuZEluZGV4O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0SW5kZXggPSBwb3NpdGlvbmFsc0VuZEluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIHdlIGNvbnN1bWVkIGFsbCB0aGUgcG9zaXRpb25hbHMgd2UgY291bGQgYW5kIHdlJ3JlIG5vdFxuICAgIC8vIGF0IHRoZSBpbmRleCBvZiBhbiBvcHRpb24gc3RyaW5nLCB0aGVyZSB3ZXJlIGV4dHJhIGFyZ3VtZW50c1xuICAgIGlmICghb3B0aW9uU3RyaW5nSW5kaWNlc1tzdGFydEluZGV4XSkge1xuICAgICAgdmFyIHN0cmluZ3MgPSBhcmdTdHJpbmdzLnNsaWNlKHN0YXJ0SW5kZXgsIG5leHRPcHRpb25TdHJpbmdJbmRleCk7XG4gICAgICBleHRyYXMgPSBleHRyYXMuY29uY2F0KHN0cmluZ3MpO1xuICAgICAgc3RhcnRJbmRleCA9IG5leHRPcHRpb25TdHJpbmdJbmRleDtcbiAgICB9XG4gICAgLy8gY29uc3VtZSB0aGUgbmV4dCBvcHRpb25hbCBhbmQgYW55IGFyZ3VtZW50cyBmb3IgaXRcbiAgICBzdGFydEluZGV4ID0gY29uc3VtZU9wdGlvbmFsKHN0YXJ0SW5kZXgpO1xuICB9XG5cbiAgLy8gY29uc3VtZSBhbnkgcG9zaXRpb25hbHMgZm9sbG93aW5nIHRoZSBsYXN0IE9wdGlvbmFsXG4gIHZhciBzdG9wSW5kZXggPSBjb25zdW1lUG9zaXRpb25hbHMoc3RhcnRJbmRleCk7XG5cbiAgLy8gaWYgd2UgZGlkbid0IGNvbnN1bWUgYWxsIHRoZSBhcmd1bWVudCBzdHJpbmdzLCB0aGVyZSB3ZXJlIGV4dHJhc1xuICBleHRyYXMgPSBleHRyYXMuY29uY2F0KGFyZ1N0cmluZ3Muc2xpY2Uoc3RvcEluZGV4KSk7XG5cbiAgLy8gaWYgd2UgZGlkbid0IHVzZSBhbGwgdGhlIFBvc2l0aW9uYWwgb2JqZWN0cywgdGhlcmUgd2VyZSB0b28gZmV3XG4gIC8vIGFyZyBzdHJpbmdzIHN1cHBsaWVkLlxuICBpZiAocG9zaXRpb25hbHMubGVuZ3RoID4gMCkge1xuICAgIHNlbGYuZXJyb3IoJ3RvbyBmZXcgYXJndW1lbnRzJyk7XG4gIH1cblxuICAvLyBtYWtlIHN1cmUgYWxsIHJlcXVpcmVkIGFjdGlvbnMgd2VyZSBwcmVzZW50XG4gIHNlbGYuX2FjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgaWYgKGFjdGlvbi5yZXF1aXJlZCkge1xuICAgICAgaWYgKHNlZW5BY3Rpb25zLmluZGV4T2YoYWN0aW9uKSA8IDApIHtcbiAgICAgICAgc2VsZi5lcnJvcihmb3JtYXQoJ0FyZ3VtZW50IFwiJXNcIiBpcyByZXF1aXJlZCcsIGFjdGlvbi5nZXROYW1lKCkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8vIG1ha2Ugc3VyZSBhbGwgcmVxdWlyZWQgZ3JvdXBzIGhhdmUgb25lIG9wdGlvbiBwcmVzZW50XG4gIHZhciBhY3Rpb25Vc2VkID0gZmFsc2U7XG4gIHNlbGYuX211dHVhbGx5RXhjbHVzaXZlR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwKSB7XG4gICAgaWYgKGdyb3VwLnJlcXVpcmVkKSB7XG4gICAgICBhY3Rpb25Vc2VkID0gZ3JvdXAuX2dyb3VwQWN0aW9ucy5zb21lKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHNlZW5Ob25EZWZhdWx0QWN0aW9ucy5pbmRleE9mKGFjdGlvbikgIT09IC0xO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGlmIG5vIGFjdGlvbnMgd2VyZSB1c2VkLCByZXBvcnQgdGhlIGVycm9yXG4gICAgICBpZiAoIWFjdGlvblVzZWQpIHtcbiAgICAgICAgdmFyIG5hbWVzID0gW107XG4gICAgICAgIGdyb3VwLl9ncm91cEFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgaWYgKGFjdGlvbi5oZWxwICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKGFjdGlvbi5nZXROYW1lKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5hbWVzID0gbmFtZXMuam9pbignICcpO1xuICAgICAgICB2YXIgbXNnID0gJ29uZSBvZiB0aGUgYXJndW1lbnRzICcgKyBuYW1lcyArICcgaXMgcmVxdWlyZWQnO1xuICAgICAgICBzZWxmLmVycm9yKG1zZyk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyByZXR1cm4gdGhlIHVwZGF0ZWQgbmFtZXNwYWNlIGFuZCB0aGUgZXh0cmEgYXJndW1lbnRzXG4gIHJldHVybiBbIG5hbWVzcGFjZSwgZXh0cmFzIF07XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX3JlYWRBcmdzRnJvbUZpbGVzID0gZnVuY3Rpb24gKGFyZ1N0cmluZ3MpIHtcbiAgLy8gZXhwYW5kIGFyZ3VtZW50cyByZWZlcmVuY2luZyBmaWxlc1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIHZhciBuZXdBcmdTdHJpbmdzID0gW107XG4gIGFyZ1N0cmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnU3RyaW5nKSB7XG4gICAgaWYgKHNlbGYuZnJvbWZpbGVQcmVmaXhDaGFycy5pbmRleE9mKGFyZ1N0cmluZ1swXSkgPCAwKSB7XG4gICAgICAvLyBmb3IgcmVndWxhciBhcmd1bWVudHMsIGp1c3QgYWRkIHRoZW0gYmFjayBpbnRvIHRoZSBsaXN0XG4gICAgICBuZXdBcmdTdHJpbmdzLnB1c2goYXJnU3RyaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmVwbGFjZSBhcmd1bWVudHMgcmVmZXJlbmNpbmcgZmlsZXMgd2l0aCB0aGUgZmlsZSBjb250ZW50XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgYXJnc3RycyA9IFtdO1xuICAgICAgICB2YXIgZmlsZW5hbWUgPSBhcmdTdHJpbmcuc2xpY2UoMSk7XG4gICAgICAgIHZhciBjb250ZW50ID0gZnMucmVhZEZpbGVTeW5jKGZpbGVuYW1lLCAndXRmOCcpO1xuICAgICAgICBjb250ZW50ID0gY29udGVudC50cmltKCkuc3BsaXQoJ1xcbicpO1xuICAgICAgICBjb250ZW50LmZvckVhY2goZnVuY3Rpb24gKGFyZ0xpbmUpIHtcbiAgICAgICAgICBzZWxmLmNvbnZlcnRBcmdMaW5lVG9BcmdzKGFyZ0xpbmUpLmZvckVhY2goZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgYXJnc3Rycy5wdXNoKGFyZyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYXJnc3RycyA9IHNlbGYuX3JlYWRBcmdzRnJvbUZpbGVzKGFyZ3N0cnMpO1xuICAgICAgICB9KTtcbiAgICAgICAgbmV3QXJnU3RyaW5ncy5wdXNoLmFwcGx5KG5ld0FyZ1N0cmluZ3MsIGFyZ3N0cnMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHNlbGYuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5ld0FyZ1N0cmluZ3M7XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuY29udmVydEFyZ0xpbmVUb0FyZ3MgPSBmdW5jdGlvbiAoYXJnTGluZSkge1xuICByZXR1cm4gWyBhcmdMaW5lIF07XG59O1xuXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuX21hdGNoQXJndW1lbnQgPSBmdW5jdGlvbiAoYWN0aW9uLCByZWdleHBBcmdTdHJpbmdzKSB7XG5cbiAgLy8gbWF0Y2ggdGhlIHBhdHRlcm4gZm9yIHRoaXMgYWN0aW9uIHRvIHRoZSBhcmcgc3RyaW5nc1xuICB2YXIgcmVnZXhwTmFyZ3MgPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMuX2dldE5hcmdzUGF0dGVybihhY3Rpb24pKTtcbiAgdmFyIG1hdGNoZXMgPSByZWdleHBBcmdTdHJpbmdzLm1hdGNoKHJlZ2V4cE5hcmdzKTtcbiAgdmFyIG1lc3NhZ2U7XG5cbiAgLy8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIHdlIHdlcmVuJ3QgYWJsZSB0byBmaW5kIGEgbWF0Y2hcbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgc3dpdGNoIChhY3Rpb24ubmFyZ3MpIHtcbiAgICAgIC8qZXNsaW50LWRpc2FibGUgbm8tdW5kZWZpbmVkKi9cbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgICBtZXNzYWdlID0gJ0V4cGVjdGVkIG9uZSBhcmd1bWVudC4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYy5PUFRJT05BTDpcbiAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCBhdCBtb3N0IG9uZSBhcmd1bWVudC4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYy5PTkVfT1JfTU9SRTpcbiAgICAgICAgbWVzc2FnZSA9ICdFeHBlY3RlZCBhdCBsZWFzdCBvbmUgYXJndW1lbnQuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBtZXNzYWdlID0gJ0V4cGVjdGVkICVzIGFyZ3VtZW50KHMpJztcbiAgICB9XG5cbiAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKFxuICAgICAgYWN0aW9uLFxuICAgICAgZm9ybWF0KG1lc3NhZ2UsIGFjdGlvbi5uYXJncylcbiAgICApO1xuICB9XG4gIC8vIHJldHVybiB0aGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBtYXRjaGVkXG4gIHJldHVybiBtYXRjaGVzWzFdLmxlbmd0aDtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fbWF0Y2hBcmd1bWVudHNQYXJ0aWFsID0gZnVuY3Rpb24gKGFjdGlvbnMsIHJlZ2V4cEFyZ1N0cmluZ3MpIHtcbiAgLy8gcHJvZ3Jlc3NpdmVseSBzaG9ydGVuIHRoZSBhY3Rpb25zIGxpc3QgYnkgc2xpY2luZyBvZmYgdGhlXG4gIC8vIGZpbmFsIGFjdGlvbnMgdW50aWwgd2UgZmluZCBhIG1hdGNoXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgYWN0aW9uU2xpY2UsIHBhdHRlcm4sIG1hdGNoZXM7XG4gIHZhciBpLCBqO1xuXG4gIGZ1bmN0aW9uIGdldExlbmd0aChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aDtcbiAgfVxuXG4gIGZvciAoaSA9IGFjdGlvbnMubGVuZ3RoOyBpID4gMDsgaS0tKSB7XG4gICAgcGF0dGVybiA9ICcnO1xuICAgIGFjdGlvblNsaWNlID0gYWN0aW9ucy5zbGljZSgwLCBpKTtcbiAgICBmb3IgKGogPSAwOyBqIDwgYWN0aW9uU2xpY2UubGVuZ3RoOyBqKyspIHtcbiAgICAgIHBhdHRlcm4gKz0gc2VsZi5fZ2V0TmFyZ3NQYXR0ZXJuKGFjdGlvblNsaWNlW2pdKTtcbiAgICB9XG5cbiAgICBwYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXicgKyBwYXR0ZXJuKTtcbiAgICBtYXRjaGVzID0gcmVnZXhwQXJnU3RyaW5ncy5tYXRjaChwYXR0ZXJuKTtcblxuICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gbmVlZCBvbmx5IGdyb3Vwc1xuICAgICAgbWF0Y2hlcyA9IG1hdGNoZXMuc3BsaWNlKDEpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChtYXRjaGVzLm1hcChnZXRMZW5ndGgpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIHJldHVybiB0aGUgbGlzdCBvZiBhcmcgc3RyaW5nIGNvdW50c1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9wYXJzZU9wdGlvbmFsID0gZnVuY3Rpb24gKGFyZ1N0cmluZykge1xuICB2YXIgYWN0aW9uLCBvcHRpb25TdHJpbmcsIGFyZ0V4cGxpY2l0LCBvcHRpb25UdXBsZXM7XG5cbiAgLy8gaWYgaXQncyBhbiBlbXB0eSBzdHJpbmcsIGl0IHdhcyBtZWFudCB0byBiZSBhIHBvc2l0aW9uYWxcbiAgaWYgKCFhcmdTdHJpbmcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGlmIGl0IGRvZXNuJ3Qgc3RhcnQgd2l0aCBhIHByZWZpeCwgaXQgd2FzIG1lYW50IHRvIGJlIHBvc2l0aW9uYWxcbiAgaWYgKHRoaXMucHJlZml4Q2hhcnMuaW5kZXhPZihhcmdTdHJpbmdbMF0pIDwgMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gaWYgdGhlIG9wdGlvbiBzdHJpbmcgaXMgcHJlc2VudCBpbiB0aGUgcGFyc2VyLCByZXR1cm4gdGhlIGFjdGlvblxuICBpZiAodGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9uc1thcmdTdHJpbmddKSB7XG4gICAgcmV0dXJuIFsgdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9uc1thcmdTdHJpbmddLCBhcmdTdHJpbmcsIG51bGwgXTtcbiAgfVxuXG4gIC8vIGlmIGl0J3MganVzdCBhIHNpbmdsZSBjaGFyYWN0ZXIsIGl0IHdhcyBtZWFudCB0byBiZSBwb3NpdGlvbmFsXG4gIGlmIChhcmdTdHJpbmcubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBpZiB0aGUgb3B0aW9uIHN0cmluZyBiZWZvcmUgdGhlIFwiPVwiIGlzIHByZXNlbnQsIHJldHVybiB0aGUgYWN0aW9uXG4gIGlmIChhcmdTdHJpbmcuaW5kZXhPZignPScpID49IDApIHtcbiAgICBvcHRpb25TdHJpbmcgPSBhcmdTdHJpbmcuc3BsaXQoJz0nLCAxKVswXTtcbiAgICBhcmdFeHBsaWNpdCA9IGFyZ1N0cmluZy5zbGljZShvcHRpb25TdHJpbmcubGVuZ3RoICsgMSk7XG5cbiAgICBpZiAodGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9uc1tvcHRpb25TdHJpbmddKSB7XG4gICAgICBhY3Rpb24gPSB0aGlzLl9vcHRpb25TdHJpbmdBY3Rpb25zW29wdGlvblN0cmluZ107XG4gICAgICByZXR1cm4gWyBhY3Rpb24sIG9wdGlvblN0cmluZywgYXJnRXhwbGljaXQgXTtcbiAgICB9XG4gIH1cblxuICAvLyBzZWFyY2ggdGhyb3VnaCBhbGwgcG9zc2libGUgcHJlZml4ZXMgb2YgdGhlIG9wdGlvbiBzdHJpbmdcbiAgLy8gYW5kIGFsbCBhY3Rpb25zIGluIHRoZSBwYXJzZXIgZm9yIHBvc3NpYmxlIGludGVycHJldGF0aW9uc1xuICBvcHRpb25UdXBsZXMgPSB0aGlzLl9nZXRPcHRpb25UdXBsZXMoYXJnU3RyaW5nKTtcblxuICAvLyBpZiBtdWx0aXBsZSBhY3Rpb25zIG1hdGNoLCB0aGUgb3B0aW9uIHN0cmluZyB3YXMgYW1iaWd1b3VzXG4gIGlmIChvcHRpb25UdXBsZXMubGVuZ3RoID4gMSkge1xuICAgIHZhciBvcHRpb25TdHJpbmdzID0gb3B0aW9uVHVwbGVzLm1hcChmdW5jdGlvbiAob3B0aW9uVHVwbGUpIHtcbiAgICAgIHJldHVybiBvcHRpb25UdXBsZVsxXTtcbiAgICB9KTtcbiAgICB0aGlzLmVycm9yKGZvcm1hdChcbiAgICAgICAgICAnQW1iaWd1b3VzIG9wdGlvbjogXCIlc1wiIGNvdWxkIG1hdGNoICVzLicsXG4gICAgICAgICAgYXJnU3RyaW5nLCBvcHRpb25TdHJpbmdzLmpvaW4oJywgJylcbiAgICApKTtcbiAgLy8gaWYgZXhhY3RseSBvbmUgYWN0aW9uIG1hdGNoZWQsIHRoaXMgc2VnbWVudGF0aW9uIGlzIGdvb2QsXG4gIC8vIHNvIHJldHVybiB0aGUgcGFyc2VkIGFjdGlvblxuICB9IGVsc2UgaWYgKG9wdGlvblR1cGxlcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gb3B0aW9uVHVwbGVzWzBdO1xuICB9XG5cbiAgLy8gaWYgaXQgd2FzIG5vdCBmb3VuZCBhcyBhbiBvcHRpb24sIGJ1dCBpdCBsb29rcyBsaWtlIGEgbmVnYXRpdmVcbiAgLy8gbnVtYmVyLCBpdCB3YXMgbWVhbnQgdG8gYmUgcG9zaXRpb25hbFxuICAvLyB1bmxlc3MgdGhlcmUgYXJlIG5lZ2F0aXZlLW51bWJlci1saWtlIG9wdGlvbnNcbiAgaWYgKGFyZ1N0cmluZy5tYXRjaCh0aGlzLl9yZWdleHBOZWdhdGl2ZU51bWJlcikpIHtcbiAgICBpZiAoIXRoaXMuX2hhc05lZ2F0aXZlTnVtYmVyT3B0aW9uYWxzLnNvbWUoQm9vbGVhbikpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICAvLyBpZiBpdCBjb250YWlucyBhIHNwYWNlLCBpdCB3YXMgbWVhbnQgdG8gYmUgYSBwb3NpdGlvbmFsXG4gIGlmIChhcmdTdHJpbmcuc2VhcmNoKCcgJykgPj0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gaXQgd2FzIG1lYW50IHRvIGJlIGFuIG9wdGlvbmFsIGJ1dCB0aGVyZSBpcyBubyBzdWNoIG9wdGlvblxuICAvLyBpbiB0aGlzIHBhcnNlciAodGhvdWdoIGl0IG1pZ2h0IGJlIGEgdmFsaWQgb3B0aW9uIGluIGEgc3VicGFyc2VyKVxuICByZXR1cm4gWyBudWxsLCBhcmdTdHJpbmcsIG51bGwgXTtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0T3B0aW9uVHVwbGVzID0gZnVuY3Rpb24gKG9wdGlvblN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBjaGFycyA9IHRoaXMucHJlZml4Q2hhcnM7XG4gIHZhciBvcHRpb25QcmVmaXg7XG4gIHZhciBhcmdFeHBsaWNpdDtcbiAgdmFyIGFjdGlvbjtcbiAgdmFyIGFjdGlvbk9wdGlvblN0cmluZztcblxuICAvLyBvcHRpb24gc3RyaW5ncyBzdGFydGluZyB3aXRoIHR3byBwcmVmaXggY2hhcmFjdGVycyBhcmUgb25seSBzcGxpdCBhdFxuICAvLyB0aGUgJz0nXG4gIGlmIChjaGFycy5pbmRleE9mKG9wdGlvblN0cmluZ1swXSkgPj0gMCAmJiBjaGFycy5pbmRleE9mKG9wdGlvblN0cmluZ1sxXSkgPj0gMCkge1xuICAgIGlmIChvcHRpb25TdHJpbmcuaW5kZXhPZignPScpID49IDApIHtcbiAgICAgIHZhciBvcHRpb25TdHJpbmdTcGxpdCA9IG9wdGlvblN0cmluZy5zcGxpdCgnPScsIDEpO1xuXG4gICAgICBvcHRpb25QcmVmaXggPSBvcHRpb25TdHJpbmdTcGxpdFswXTtcbiAgICAgIGFyZ0V4cGxpY2l0ID0gb3B0aW9uU3RyaW5nU3BsaXRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvblByZWZpeCA9IG9wdGlvblN0cmluZztcbiAgICAgIGFyZ0V4cGxpY2l0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBmb3IgKGFjdGlvbk9wdGlvblN0cmluZyBpbiB0aGlzLl9vcHRpb25TdHJpbmdBY3Rpb25zKSB7XG4gICAgICBpZiAoYWN0aW9uT3B0aW9uU3RyaW5nLnN1YnN0cigwLCBvcHRpb25QcmVmaXgubGVuZ3RoKSA9PT0gb3B0aW9uUHJlZml4KSB7XG4gICAgICAgIGFjdGlvbiA9IHRoaXMuX29wdGlvblN0cmluZ0FjdGlvbnNbYWN0aW9uT3B0aW9uU3RyaW5nXTtcbiAgICAgICAgcmVzdWx0LnB1c2goWyBhY3Rpb24sIGFjdGlvbk9wdGlvblN0cmluZywgYXJnRXhwbGljaXQgXSk7XG4gICAgICB9XG4gICAgfVxuXG4gIC8vIHNpbmdsZSBjaGFyYWN0ZXIgb3B0aW9ucyBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggdGhlaXIgYXJndW1lbnRzXG4gIC8vIGJ1dCBtdWx0aXBsZSBjaGFyYWN0ZXIgb3B0aW9ucyBhbHdheXMgaGF2ZSB0byBoYXZlIHRoZWlyIGFyZ3VtZW50XG4gIC8vIHNlcGFyYXRlXG4gIH0gZWxzZSBpZiAoY2hhcnMuaW5kZXhPZihvcHRpb25TdHJpbmdbMF0pID49IDAgJiYgY2hhcnMuaW5kZXhPZihvcHRpb25TdHJpbmdbMV0pIDwgMCkge1xuICAgIG9wdGlvblByZWZpeCA9IG9wdGlvblN0cmluZztcbiAgICBhcmdFeHBsaWNpdCA9IG51bGw7XG4gICAgdmFyIG9wdGlvblByZWZpeFNob3J0ID0gb3B0aW9uU3RyaW5nLnN1YnN0cigwLCAyKTtcbiAgICB2YXIgYXJnRXhwbGljaXRTaG9ydCA9IG9wdGlvblN0cmluZy5zdWJzdHIoMik7XG5cbiAgICBmb3IgKGFjdGlvbk9wdGlvblN0cmluZyBpbiB0aGlzLl9vcHRpb25TdHJpbmdBY3Rpb25zKSB7XG4gICAgICBpZiAoISQkLmhhcyh0aGlzLl9vcHRpb25TdHJpbmdBY3Rpb25zLCBhY3Rpb25PcHRpb25TdHJpbmcpKSBjb250aW51ZTtcblxuICAgICAgYWN0aW9uID0gdGhpcy5fb3B0aW9uU3RyaW5nQWN0aW9uc1thY3Rpb25PcHRpb25TdHJpbmddO1xuICAgICAgaWYgKGFjdGlvbk9wdGlvblN0cmluZyA9PT0gb3B0aW9uUHJlZml4U2hvcnQpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goWyBhY3Rpb24sIGFjdGlvbk9wdGlvblN0cmluZywgYXJnRXhwbGljaXRTaG9ydCBdKTtcbiAgICAgIH0gZWxzZSBpZiAoYWN0aW9uT3B0aW9uU3RyaW5nLnN1YnN0cigwLCBvcHRpb25QcmVmaXgubGVuZ3RoKSA9PT0gb3B0aW9uUHJlZml4KSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFsgYWN0aW9uLCBhY3Rpb25PcHRpb25TdHJpbmcsIGFyZ0V4cGxpY2l0IF0pO1xuICAgICAgfVxuICAgIH1cblxuICAvLyBzaG91bGRuJ3QgZXZlciBnZXQgaGVyZVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihmb3JtYXQoJ1VuZXhwZWN0ZWQgb3B0aW9uIHN0cmluZzogJXMuJywgb3B0aW9uU3RyaW5nKSk7XG4gIH1cbiAgLy8gcmV0dXJuIHRoZSBjb2xsZWN0ZWQgb3B0aW9uIHR1cGxlc1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9nZXROYXJnc1BhdHRlcm4gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIC8vIGluIGFsbCBleGFtcGxlcyBiZWxvdywgd2UgaGF2ZSB0byBhbGxvdyBmb3IgJy0tJyBhcmdzXG4gIC8vIHdoaWNoIGFyZSByZXByZXNlbnRlZCBhcyAnLScgaW4gdGhlIHBhdHRlcm5cbiAgdmFyIHJlZ2V4cE5hcmdzO1xuXG4gIHN3aXRjaCAoYWN0aW9uLm5hcmdzKSB7XG4gICAgLy8gdGhlIGRlZmF1bHQgKG51bGwpIGlzIGFzc3VtZWQgdG8gYmUgYSBzaW5nbGUgYXJndW1lbnRcbiAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICBjYXNlIG51bGw6XG4gICAgICByZWdleHBOYXJncyA9ICcoLSpBLSopJztcbiAgICAgIGJyZWFrO1xuICAgIC8vIGFsbG93IHplcm8gb3IgbW9yZSBhcmd1bWVudHNcbiAgICBjYXNlIGMuT1BUSU9OQUw6XG4gICAgICByZWdleHBOYXJncyA9ICcoLSpBPy0qKSc7XG4gICAgICBicmVhaztcbiAgICAvLyBhbGxvdyB6ZXJvIG9yIG1vcmUgYXJndW1lbnRzXG4gICAgY2FzZSBjLlpFUk9fT1JfTU9SRTpcbiAgICAgIHJlZ2V4cE5hcmdzID0gJygtKltBLV0qKSc7XG4gICAgICBicmVhaztcbiAgICAvLyBhbGxvdyBvbmUgb3IgbW9yZSBhcmd1bWVudHNcbiAgICBjYXNlIGMuT05FX09SX01PUkU6XG4gICAgICByZWdleHBOYXJncyA9ICcoLSpBW0EtXSopJztcbiAgICAgIGJyZWFrO1xuICAgIC8vIGFsbG93IGFueSBudW1iZXIgb2Ygb3B0aW9ucyBvciBhcmd1bWVudHNcbiAgICBjYXNlIGMuUkVNQUlOREVSOlxuICAgICAgcmVnZXhwTmFyZ3MgPSAnKFstQU9dKiknO1xuICAgICAgYnJlYWs7XG4gICAgLy8gYWxsb3cgb25lIGFyZ3VtZW50IGZvbGxvd2VkIGJ5IGFueSBudW1iZXIgb2Ygb3B0aW9ucyBvciBhcmd1bWVudHNcbiAgICBjYXNlIGMuUEFSU0VSOlxuICAgICAgcmVnZXhwTmFyZ3MgPSAnKC0qQVstQU9dKiknO1xuICAgICAgYnJlYWs7XG4gICAgLy8gYWxsIG90aGVycyBzaG91bGQgYmUgaW50ZWdlcnNcbiAgICBkZWZhdWx0OlxuICAgICAgcmVnZXhwTmFyZ3MgPSAnKC0qJyArICQkLnJlcGVhdCgnLSpBJywgYWN0aW9uLm5hcmdzKSArICctKiknO1xuICB9XG5cbiAgLy8gaWYgdGhpcyBpcyBhbiBvcHRpb25hbCBhY3Rpb24sIC0tIGlzIG5vdCBhbGxvd2VkXG4gIGlmIChhY3Rpb24uaXNPcHRpb25hbCgpKSB7XG4gICAgcmVnZXhwTmFyZ3MgPSByZWdleHBOYXJncy5yZXBsYWNlKC8tXFwqL2csICcnKTtcbiAgICByZWdleHBOYXJncyA9IHJlZ2V4cE5hcmdzLnJlcGxhY2UoLy0vZywgJycpO1xuICB9XG5cbiAgLy8gcmV0dXJuIHRoZSBwYXR0ZXJuXG4gIHJldHVybiByZWdleHBOYXJncztcbn07XG5cbi8vXG4vLyBWYWx1ZSBjb252ZXJzaW9uIG1ldGhvZHNcbi8vXG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0VmFsdWVzID0gZnVuY3Rpb24gKGFjdGlvbiwgYXJnU3RyaW5ncykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgLy8gZm9yIGV2ZXJ5dGhpbmcgYnV0IFBBUlNFUiBhcmdzLCBzdHJpcCBvdXQgJy0tJ1xuICBpZiAoYWN0aW9uLm5hcmdzICE9PSBjLlBBUlNFUiAmJiBhY3Rpb24ubmFyZ3MgIT09IGMuUkVNQUlOREVSKSB7XG4gICAgYXJnU3RyaW5ncyA9IGFyZ1N0cmluZ3MuZmlsdGVyKGZ1bmN0aW9uIChhcnJheUVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBhcnJheUVsZW1lbnQgIT09ICctLSc7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdmFsdWUsIGFyZ1N0cmluZztcblxuICAvLyBvcHRpb25hbCBhcmd1bWVudCBwcm9kdWNlcyBhIGRlZmF1bHQgd2hlbiBub3QgcHJlc2VudFxuICBpZiAoYXJnU3RyaW5ncy5sZW5ndGggPT09IDAgJiYgYWN0aW9uLm5hcmdzID09PSBjLk9QVElPTkFMKSB7XG5cbiAgICB2YWx1ZSA9IChhY3Rpb24uaXNPcHRpb25hbCgpKSA/IGFjdGlvbi5jb25zdGFudCA6IGFjdGlvbi5kZWZhdWx0VmFsdWU7XG5cbiAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX2dldFZhbHVlKGFjdGlvbiwgdmFsdWUpO1xuICAgICAgdGhpcy5fY2hlY2tWYWx1ZShhY3Rpb24sIHZhbHVlKTtcbiAgICB9XG5cbiAgLy8gd2hlbiBuYXJncz0nKicgb24gYSBwb3NpdGlvbmFsLCBpZiB0aGVyZSB3ZXJlIG5vIGNvbW1hbmQtbGluZVxuICAvLyBhcmdzLCB1c2UgdGhlIGRlZmF1bHQgaWYgaXQgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBOb25lXG4gIH0gZWxzZSBpZiAoYXJnU3RyaW5ncy5sZW5ndGggPT09IDAgJiYgYWN0aW9uLm5hcmdzID09PSBjLlpFUk9fT1JfTU9SRSAmJlxuICAgIGFjdGlvbi5vcHRpb25TdHJpbmdzLmxlbmd0aCA9PT0gMCkge1xuXG4gICAgdmFsdWUgPSAoYWN0aW9uLmRlZmF1bHRWYWx1ZSB8fCBhcmdTdHJpbmdzKTtcbiAgICB0aGlzLl9jaGVja1ZhbHVlKGFjdGlvbiwgdmFsdWUpO1xuXG4gIC8vIHNpbmdsZSBhcmd1bWVudCBvciBvcHRpb25hbCBhcmd1bWVudCBwcm9kdWNlcyBhIHNpbmdsZSB2YWx1ZVxuICB9IGVsc2UgaWYgKGFyZ1N0cmluZ3MubGVuZ3RoID09PSAxICYmXG4gICAgICAgICghYWN0aW9uLm5hcmdzIHx8IGFjdGlvbi5uYXJncyA9PT0gYy5PUFRJT05BTCkpIHtcblxuICAgIGFyZ1N0cmluZyA9IGFyZ1N0cmluZ3NbMF07XG4gICAgdmFsdWUgPSB0aGlzLl9nZXRWYWx1ZShhY3Rpb24sIGFyZ1N0cmluZyk7XG4gICAgdGhpcy5fY2hlY2tWYWx1ZShhY3Rpb24sIHZhbHVlKTtcblxuICAvLyBSRU1BSU5ERVIgYXJndW1lbnRzIGNvbnZlcnQgYWxsIHZhbHVlcywgY2hlY2tpbmcgbm9uZVxuICB9IGVsc2UgaWYgKGFjdGlvbi5uYXJncyA9PT0gYy5SRU1BSU5ERVIpIHtcbiAgICB2YWx1ZSA9IGFyZ1N0cmluZ3MubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gc2VsZi5fZ2V0VmFsdWUoYWN0aW9uLCB2KTtcbiAgICB9KTtcblxuICAvLyBQQVJTRVIgYXJndW1lbnRzIGNvbnZlcnQgYWxsIHZhbHVlcywgYnV0IGNoZWNrIG9ubHkgdGhlIGZpcnN0XG4gIH0gZWxzZSBpZiAoYWN0aW9uLm5hcmdzID09PSBjLlBBUlNFUikge1xuICAgIHZhbHVlID0gYXJnU3RyaW5ncy5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBzZWxmLl9nZXRWYWx1ZShhY3Rpb24sIHYpO1xuICAgIH0pO1xuICAgIHRoaXMuX2NoZWNrVmFsdWUoYWN0aW9uLCB2YWx1ZVswXSk7XG5cbiAgLy8gYWxsIG90aGVyIHR5cGVzIG9mIG5hcmdzIHByb2R1Y2UgYSBsaXN0XG4gIH0gZWxzZSB7XG4gICAgdmFsdWUgPSBhcmdTdHJpbmdzLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIHNlbGYuX2dldFZhbHVlKGFjdGlvbiwgdik7XG4gICAgfSk7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgc2VsZi5fY2hlY2tWYWx1ZShhY3Rpb24sIHYpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gcmV0dXJuIHRoZSBjb252ZXJ0ZWQgdmFsdWVcbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9nZXRWYWx1ZSA9IGZ1bmN0aW9uIChhY3Rpb24sIGFyZ1N0cmluZykge1xuICB2YXIgcmVzdWx0O1xuXG4gIHZhciB0eXBlRnVuY3Rpb24gPSB0aGlzLl9yZWdpc3RyeUdldCgndHlwZScsIGFjdGlvbi50eXBlLCBhY3Rpb24udHlwZSk7XG4gIGlmICh0eXBlb2YgdHlwZUZ1bmN0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBmb3JtYXQoJyVzIGlzIG5vdCBjYWxsYWJsZScsIHR5cGVGdW5jdGlvbik7XG4gICAgdGhyb3cgYXJndW1lbnRFcnJvckhlbHBlcihhY3Rpb24sIG1lc3NhZ2UpO1xuICB9XG5cbiAgLy8gY29udmVydCB0aGUgdmFsdWUgdG8gdGhlIGFwcHJvcHJpYXRlIHR5cGVcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSB0eXBlRnVuY3Rpb24oYXJnU3RyaW5nKTtcblxuICAgIC8vIEFyZ3VtZW50VHlwZUVycm9ycyBpbmRpY2F0ZSBlcnJvcnNcbiAgICAvLyBJZiBhY3Rpb24udHlwZSBpcyBub3QgYSByZWdpc3RlcmVkIHN0cmluZywgaXQgaXMgYSBmdW5jdGlvblxuICAgIC8vIFRyeSB0byBkZWR1Y2UgaXRzIG5hbWUgZm9yIGluY2x1c2lvbiBpbiB0aGUgZXJyb3IgbWVzc2FnZVxuICAgIC8vIEZhaWxpbmcgdGhhdCwgaW5jbHVkZSB0aGUgZXJyb3IgbWVzc2FnZSBpdCByYWlzZWQuXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBhY3Rpb24udHlwZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IGFjdGlvbi50eXBlLm5hbWUgfHwgYWN0aW9uLnR5cGUuZGlzcGxheU5hbWUgfHwgJzxmdW5jdGlvbj4nO1xuICAgIH1cbiAgICB2YXIgbXNnID0gZm9ybWF0KCdJbnZhbGlkICVzIHZhbHVlOiAlcycsIG5hbWUsIGFyZ1N0cmluZyk7XG4gICAgaWYgKG5hbWUgPT09ICc8ZnVuY3Rpb24+JykgeyBtc2cgKz0gJ1xcbicgKyBlLm1lc3NhZ2U7IH1cbiAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKGFjdGlvbiwgbXNnKTtcbiAgfVxuICAvLyByZXR1cm4gdGhlIGNvbnZlcnRlZCB2YWx1ZVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9jaGVja1ZhbHVlID0gZnVuY3Rpb24gKGFjdGlvbiwgdmFsdWUpIHtcbiAgLy8gY29udmVydGVkIHZhbHVlIG11c3QgYmUgb25lIG9mIHRoZSBjaG9pY2VzIChpZiBzcGVjaWZpZWQpXG4gIHZhciBjaG9pY2VzID0gYWN0aW9uLmNob2ljZXM7XG4gIGlmIChjaG9pY2VzKSB7XG4gICAgLy8gY2hvaXNlIGZvciBhcmd1bWVudCBjYW4gYnkgYXJyYXkgb3Igc3RyaW5nXG4gICAgaWYgKCh0eXBlb2YgY2hvaWNlcyA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShjaG9pY2VzKSkgJiZcbiAgICAgICAgY2hvaWNlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gY2hvaXNlIGZvciBzdWJwYXJzZXJzIGNhbiBieSBvbmx5IGhhc2hcbiAgICBpZiAodHlwZW9mIGNob2ljZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGNob2ljZXMpICYmIGNob2ljZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjaG9pY2VzID09PSAnc3RyaW5nJykge1xuICAgICAgY2hvaWNlcyA9IGNob2ljZXMuc3BsaXQoJycpLmpvaW4oJywgJyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNob2ljZXMpKSB7XG4gICAgICBjaG9pY2VzID0gIGNob2ljZXMuam9pbignLCAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hvaWNlcyA9ICBPYmplY3Qua2V5cyhjaG9pY2VzKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICB2YXIgbWVzc2FnZSA9IGZvcm1hdCgnSW52YWxpZCBjaG9pY2U6ICVzIChjaG9vc2UgZnJvbSBbJXNdKScsIHZhbHVlLCBjaG9pY2VzKTtcbiAgICB0aHJvdyBhcmd1bWVudEVycm9ySGVscGVyKGFjdGlvbiwgbWVzc2FnZSk7XG4gIH1cbn07XG5cbi8vXG4vLyBIZWxwIGZvcm1hdHRpbmcgbWV0aG9kc1xuLy9cblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNmb3JtYXRVc2FnZSAtPiBzdHJpbmdcbiAqXG4gKiBSZXR1cm4gdXNhZ2Ugc3RyaW5nXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjcHJpbnRpbmctaGVscFxuICoqL1xuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLmZvcm1hdFVzYWdlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZm9ybWF0dGVyID0gdGhpcy5fZ2V0Rm9ybWF0dGVyKCk7XG4gIGZvcm1hdHRlci5hZGRVc2FnZSh0aGlzLnVzYWdlLCB0aGlzLl9hY3Rpb25zLCB0aGlzLl9tdXR1YWxseUV4Y2x1c2l2ZUdyb3Vwcyk7XG4gIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0SGVscCgpO1xufTtcblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNmb3JtYXRIZWxwIC0+IHN0cmluZ1xuICpcbiAqIFJldHVybiBoZWxwXG4gKlxuICogU2VlIGFsc28gW29yaWdpbmFsIGd1aWRlXVsxXVxuICpcbiAqIFsxXTpodHRwOi8vZG9jcy5weXRob24ub3JnL2Rldi9saWJyYXJ5L2FyZ3BhcnNlLmh0bWwjcHJpbnRpbmctaGVscFxuICoqL1xuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLmZvcm1hdEhlbHAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmb3JtYXR0ZXIgPSB0aGlzLl9nZXRGb3JtYXR0ZXIoKTtcblxuICAvLyB1c2FnZVxuICBmb3JtYXR0ZXIuYWRkVXNhZ2UodGhpcy51c2FnZSwgdGhpcy5fYWN0aW9ucywgdGhpcy5fbXV0dWFsbHlFeGNsdXNpdmVHcm91cHMpO1xuXG4gIC8vIGRlc2NyaXB0aW9uXG4gIGZvcm1hdHRlci5hZGRUZXh0KHRoaXMuZGVzY3JpcHRpb24pO1xuXG4gIC8vIHBvc2l0aW9uYWxzLCBvcHRpb25hbHMgYW5kIHVzZXItZGVmaW5lZCBncm91cHNcbiAgdGhpcy5fYWN0aW9uR3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGFjdGlvbkdyb3VwKSB7XG4gICAgZm9ybWF0dGVyLnN0YXJ0U2VjdGlvbihhY3Rpb25Hcm91cC50aXRsZSk7XG4gICAgZm9ybWF0dGVyLmFkZFRleHQoYWN0aW9uR3JvdXAuZGVzY3JpcHRpb24pO1xuICAgIGZvcm1hdHRlci5hZGRBcmd1bWVudHMoYWN0aW9uR3JvdXAuX2dyb3VwQWN0aW9ucyk7XG4gICAgZm9ybWF0dGVyLmVuZFNlY3Rpb24oKTtcbiAgfSk7XG5cbiAgLy8gZXBpbG9nXG4gIGZvcm1hdHRlci5hZGRUZXh0KHRoaXMuZXBpbG9nKTtcblxuICAvLyBkZXRlcm1pbmUgaGVscCBmcm9tIGZvcm1hdCBhYm92ZVxuICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdEhlbHAoKTtcbn07XG5cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5fZ2V0Rm9ybWF0dGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgRm9ybWF0dGVyQ2xhc3MgPSB0aGlzLmZvcm1hdHRlckNsYXNzO1xuICB2YXIgZm9ybWF0dGVyID0gbmV3IEZvcm1hdHRlckNsYXNzKHsgcHJvZzogdGhpcy5wcm9nIH0pO1xuICByZXR1cm4gZm9ybWF0dGVyO1xufTtcblxuLy9cbi8vICBQcmludCBmdW5jdGlvbnNcbi8vXG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjcHJpbnRVc2FnZSgpIC0+IFZvaWRcbiAqXG4gKiBQcmludCB1c2FnZVxuICpcbiAqIFNlZSBhbHNvIFtvcmlnaW5hbCBndWlkZV1bMV1cbiAqXG4gKiBbMV06aHR0cDovL2RvY3MucHl0aG9uLm9yZy9kZXYvbGlicmFyeS9hcmdwYXJzZS5odG1sI3ByaW50aW5nLWhlbHBcbiAqKi9cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5wcmludFVzYWdlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9wcmludE1lc3NhZ2UodGhpcy5mb3JtYXRVc2FnZSgpKTtcbn07XG5cbi8qKlxuICogQXJndW1lbnRQYXJzZXIjcHJpbnRIZWxwKCkgLT4gVm9pZFxuICpcbiAqIFByaW50IGhlbHBcbiAqXG4gKiBTZWUgYWxzbyBbb3JpZ2luYWwgZ3VpZGVdWzFdXG4gKlxuICogWzFdOmh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvZGV2L2xpYnJhcnkvYXJncGFyc2UuaHRtbCNwcmludGluZy1oZWxwXG4gKiovXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUucHJpbnRIZWxwID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLl9wcmludE1lc3NhZ2UodGhpcy5mb3JtYXRIZWxwKCkpO1xufTtcblxuQXJndW1lbnRQYXJzZXIucHJvdG90eXBlLl9wcmludE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgc3RyZWFtKSB7XG4gIGlmICghc3RyZWFtKSB7XG4gICAgc3RyZWFtID0gcHJvY2Vzcy5zdGRvdXQ7XG4gIH1cbiAgaWYgKG1lc3NhZ2UpIHtcbiAgICBzdHJlYW0ud3JpdGUoJycgKyBtZXNzYWdlKTtcbiAgfVxufTtcblxuLy9cbi8vICBFeGl0IGZ1bmN0aW9uc1xuLy9cblxuLyoqXG4gKiBBcmd1bWVudFBhcnNlciNleGl0KHN0YXR1cz0wLCBtZXNzYWdlKSAtPiBWb2lkXG4gKiAtIHN0YXR1cyAoaW50KTogZXhpdCBzdGF0dXNcbiAqIC0gbWVzc2FnZSAoc3RyaW5nKTogbWVzc2FnZVxuICpcbiAqIFByaW50IG1lc3NhZ2UgaW4gc3RkZXJyL3N0ZG91dCBhbmQgZXhpdCBwcm9ncmFtXG4gKiovXG5Bcmd1bWVudFBhcnNlci5wcm90b3R5cGUuZXhpdCA9IGZ1bmN0aW9uIChzdGF0dXMsIG1lc3NhZ2UpIHtcbiAgaWYgKG1lc3NhZ2UpIHtcbiAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICB0aGlzLl9wcmludE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ByaW50TWVzc2FnZShtZXNzYWdlLCBwcm9jZXNzLnN0ZGVycik7XG4gICAgfVxuICB9XG5cbiAgcHJvY2Vzcy5leGl0KHN0YXR1cyk7XG59O1xuXG4vKipcbiAqIEFyZ3VtZW50UGFyc2VyI2Vycm9yKG1lc3NhZ2UpIC0+IFZvaWRcbiAqIC0gZXJyIChFcnJvcnxzdHJpbmcpOiBtZXNzYWdlXG4gKlxuICogRXJyb3IgbWV0aG9kIFByaW50cyBhIHVzYWdlIG1lc3NhZ2UgaW5jb3Jwb3JhdGluZyB0aGUgbWVzc2FnZSB0byBzdGRlcnIgYW5kXG4gKiBleGl0cy4gSWYgeW91IG92ZXJyaWRlIHRoaXMgaW4gYSBzdWJjbGFzcyxcbiAqIGl0IHNob3VsZCBub3QgcmV0dXJuIC0tIGl0IHNob3VsZFxuICogZWl0aGVyIGV4aXQgb3IgdGhyb3cgYW4gZXhjZXB0aW9uLlxuICpcbiAqKi9cbkFyZ3VtZW50UGFyc2VyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgdmFyIG1lc3NhZ2U7XG4gIGlmIChlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGlmICh0aGlzLmRlYnVnID09PSB0cnVlKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgfSBlbHNlIHtcbiAgICBtZXNzYWdlID0gZXJyO1xuICB9XG4gIHZhciBtc2cgPSBmb3JtYXQoJyVzOiBlcnJvcjogJXMnLCB0aGlzLnByb2csIG1lc3NhZ2UpICsgYy5FT0w7XG5cbiAgaWYgKHRoaXMuZGVidWcgPT09IHRydWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgfVxuXG4gIHRoaXMucHJpbnRVc2FnZShwcm9jZXNzLnN0ZGVycik7XG5cbiAgcmV0dXJuIHRoaXMuZXhpdCgyLCBtc2cpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcmd1bWVudFBhcnNlcjtcbiIsIi8qOm5vZG9jOipcbiAqIGNsYXNzIEFjdGlvbkhlbHBcbiAqXG4gKiBTdXBwb3J0IGFjdGlvbiBmb3IgcHJpbnRpbmcgaGVscFxuICogVGhpcyBjbGFzcyBpbmhlcmlkZWQgZnJvbSBbW0FjdGlvbl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9uJyk7XG5cbi8vIENvbnN0YW50c1xudmFyIGMgID0gcmVxdWlyZSgnLi4vY29uc3QnKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvbkhlbHAob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogb3B0aW9ucyBoYXNoIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqKi9cbnZhciBBY3Rpb25IZWxwID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25IZWxwKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmIChvcHRpb25zLmRlZmF1bHRWYWx1ZSAhPT0gbnVsbCkge1xuICAgIG9wdGlvbnMuZGVmYXVsdFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgb3B0aW9ucy5kZWZhdWx0VmFsdWUgPSBjLlNVUFBSRVNTO1xuICB9XG4gIG9wdGlvbnMuZGVzdCA9IChvcHRpb25zLmRlc3QgIT09IG51bGwgPyBvcHRpb25zLmRlc3QgOiBjLlNVUFBSRVNTKTtcbiAgb3B0aW9ucy5uYXJncyA9IDA7XG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG59O1xudXRpbC5pbmhlcml0cyhBY3Rpb25IZWxwLCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25IZWxwI2NhbGwocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcywgb3B0aW9uU3RyaW5nKVxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogUHJpbnQgaGVscCBhbmQgZXhpdFxuICoqL1xuQWN0aW9uSGVscC5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIpIHtcbiAgcGFyc2VyLnByaW50SGVscCgpO1xuICBwYXJzZXIuZXhpdCgpO1xufTtcbiIsIi8qOm5vZG9jOipcbiAqIGNsYXNzIEFjdGlvbkFwcGVuZFxuICpcbiAqIFRoaXMgYWN0aW9uIHN0b3JlcyBhIGxpc3QsIGFuZCBhcHBlbmRzIGVhY2ggYXJndW1lbnQgdmFsdWUgdG8gdGhlIGxpc3QuXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBhbGxvdyBhbiBvcHRpb24gdG8gYmUgc3BlY2lmaWVkIG11bHRpcGxlIHRpbWVzLlxuICogVGhpcyBjbGFzcyBpbmhlcmlkZWQgZnJvbSBbW0FjdGlvbl1dXG4gKlxuICoqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9uJyk7XG5cbi8vIENvbnN0YW50c1xudmFyIGMgPSByZXF1aXJlKCcuLi9jb25zdCcpO1xuXG4vKjpub2RvYzoqXG4gKiBuZXcgQWN0aW9uQXBwZW5kKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiBOb3RlOiBvcHRpb25zLm5hcmdzIHNob3VsZCBiZSBvcHRpb25hbCBmb3IgY29uc3RhbnRzXG4gKiBhbmQgbW9yZSB0aGVuIHplcm8gZm9yIG90aGVyXG4gKiovXG52YXIgQWN0aW9uQXBwZW5kID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25BcHBlbmQob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKHRoaXMubmFyZ3MgPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbmFyZ3MgZm9yIGFwcGVuZCBhY3Rpb25zIG11c3QgYmUgPiAwOyBpZiBhcmcgJyArXG4gICAgICAgICdzdHJpbmdzIGFyZSBub3Qgc3VwcGx5aW5nIHRoZSB2YWx1ZSB0byBhcHBlbmQsICcgK1xuICAgICAgICAndGhlIGFwcGVuZCBjb25zdCBhY3Rpb24gbWF5IGJlIG1vcmUgYXBwcm9wcmlhdGUnKTtcbiAgfVxuICBpZiAoISF0aGlzLmNvbnN0YW50ICYmIHRoaXMubmFyZ3MgIT09IGMuT1BUSU9OQUwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25hcmdzIG11c3QgYmUgT1BUSU9OQUwgdG8gc3VwcGx5IGNvbnN0Jyk7XG4gIH1cbiAgQWN0aW9uLmNhbGwodGhpcywgb3B0aW9ucyk7XG59O1xudXRpbC5pbmhlcml0cyhBY3Rpb25BcHBlbmQsIEFjdGlvbik7XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvbkFwcGVuZCNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykgLT4gVm9pZFxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogQ2FsbCB0aGUgYWN0aW9uLiBTYXZlIHJlc3VsdCBpbiBuYW1lc3BhY2Ugb2JqZWN0XG4gKiovXG5BY3Rpb25BcHBlbmQucHJvdG90eXBlLmNhbGwgPSBmdW5jdGlvbiAocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcykge1xuICB2YXIgaXRlbXMgPSAobmFtZXNwYWNlW3RoaXMuZGVzdF0gfHwgW10pLnNsaWNlKCk7XG4gIGl0ZW1zLnB1c2godmFsdWVzKTtcbiAgbmFtZXNwYWNlLnNldCh0aGlzLmRlc3QsIGl0ZW1zKTtcbn07XG4iLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25BcHBlbmRDb25zdGFudFxuICpcbiAqIFRoaXMgc3RvcmVzIGEgbGlzdCwgYW5kIGFwcGVuZHMgdGhlIHZhbHVlIHNwZWNpZmllZCBieVxuICogdGhlIGNvbnN0IGtleXdvcmQgYXJndW1lbnQgdG8gdGhlIGxpc3QuXG4gKiAoTm90ZSB0aGF0IHRoZSBjb25zdCBrZXl3b3JkIGFyZ3VtZW50IGRlZmF1bHRzIHRvIG51bGwuKVxuICogVGhlICdhcHBlbmRDb25zdCcgYWN0aW9uIGlzIHR5cGljYWxseSB1c2VmdWwgd2hlbiBtdWx0aXBsZVxuICogYXJndW1lbnRzIG5lZWQgdG8gc3RvcmUgY29uc3RhbnRzIHRvIHRoZSBzYW1lIGxpc3QuXG4gKlxuICogVGhpcyBjbGFzcyBpbmhlcml0ZWQgZnJvbSBbW0FjdGlvbl1dXG4gKiovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuLi8uLi9hY3Rpb24nKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvbkFwcGVuZENvbnN0YW50KG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uQXBwZW5kQ29uc3RhbnQgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFjdGlvbkFwcGVuZENvbnN0YW50KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMubmFyZ3MgPSAwO1xuICBpZiAodHlwZW9mIG9wdGlvbnMuY29uc3RhbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb25zdGFudCBvcHRpb24gaXMgcmVxdWlyZWQgZm9yIGFwcGVuZEFjdGlvbicpO1xuICB9XG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uQXBwZW5kQ29uc3RhbnQsIEFjdGlvbik7XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvbkFwcGVuZENvbnN0YW50I2NhbGwocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcywgb3B0aW9uU3RyaW5nKSAtPiBWb2lkXG4gKiAtIHBhcnNlciAoQXJndW1lbnRQYXJzZXIpOiBjdXJyZW50IHBhcnNlclxuICogLSBuYW1lc3BhY2UgKE5hbWVzcGFjZSk6IG5hbWVzcGFjZSBmb3Igb3V0cHV0IGRhdGFcbiAqIC0gdmFsdWVzIChBcnJheSk6IHBhcnNlZCB2YWx1ZXNcbiAqIC0gb3B0aW9uU3RyaW5nIChBcnJheSk6IGlucHV0IG9wdGlvbiBzdHJpbmcobm90IHBhcnNlZClcbiAqXG4gKiBDYWxsIHRoZSBhY3Rpb24uIFNhdmUgcmVzdWx0IGluIG5hbWVzcGFjZSBvYmplY3RcbiAqKi9cbkFjdGlvbkFwcGVuZENvbnN0YW50LnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHBhcnNlciwgbmFtZXNwYWNlKSB7XG4gIHZhciBpdGVtcyA9IFtdLmNvbmNhdChuYW1lc3BhY2VbdGhpcy5kZXN0XSB8fCBbXSk7XG4gIGl0ZW1zLnB1c2godGhpcy5jb25zdGFudCk7XG4gIG5hbWVzcGFjZS5zZXQodGhpcy5kZXN0LCBpdGVtcyk7XG59O1xuIiwiLyo6bm9kb2M6KlxuICogY2xhc3MgQWN0aW9uQ291bnRcbiAqXG4gKiBUaGlzIGNvdW50cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGEga2V5d29yZCBhcmd1bWVudCBvY2N1cnMuXG4gKiBGb3IgZXhhbXBsZSwgdGhpcyBpcyB1c2VmdWwgZm9yIGluY3JlYXNpbmcgdmVyYm9zaXR5IGxldmVsc1xuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpZGVkIGZyb20gW1tBY3Rpb25dXVxuICpcbiAqKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuLi9hY3Rpb24nKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvbkNvdW50KG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uQ291bnQgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFjdGlvbkNvdW50KG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMubmFyZ3MgPSAwO1xuXG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uQ291bnQsIEFjdGlvbik7XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvbkNvdW50I2NhbGwocGFyc2VyLCBuYW1lc3BhY2UsIHZhbHVlcywgb3B0aW9uU3RyaW5nKSAtPiBWb2lkXG4gKiAtIHBhcnNlciAoQXJndW1lbnRQYXJzZXIpOiBjdXJyZW50IHBhcnNlclxuICogLSBuYW1lc3BhY2UgKE5hbWVzcGFjZSk6IG5hbWVzcGFjZSBmb3Igb3V0cHV0IGRhdGFcbiAqIC0gdmFsdWVzIChBcnJheSk6IHBhcnNlZCB2YWx1ZXNcbiAqIC0gb3B0aW9uU3RyaW5nIChBcnJheSk6IGlucHV0IG9wdGlvbiBzdHJpbmcobm90IHBhcnNlZClcbiAqXG4gKiBDYWxsIHRoZSBhY3Rpb24uIFNhdmUgcmVzdWx0IGluIG5hbWVzcGFjZSBvYmplY3RcbiAqKi9cbkFjdGlvbkNvdW50LnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKHBhcnNlciwgbmFtZXNwYWNlKSB7XG4gIG5hbWVzcGFjZS5zZXQodGhpcy5kZXN0LCAobmFtZXNwYWNlW3RoaXMuZGVzdF0gfHwgMCkgKyAxKTtcbn07XG4iLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25TdG9yZVxuICpcbiAqIFRoaXMgYWN0aW9uIGp1c3Qgc3RvcmVzIHRoZSBhcmd1bWVudOKAmXMgdmFsdWUuIFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uLlxuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBY3Rpb25dXVxuICpcbiAqKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuLi9hY3Rpb24nKTtcblxuLy8gQ29uc3RhbnRzXG52YXIgYyA9IHJlcXVpcmUoJy4uL2NvbnN0Jyk7XG5cblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvblN0b3JlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uU3RvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFjdGlvblN0b3JlKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmICh0aGlzLm5hcmdzIDw9IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25hcmdzIGZvciBzdG9yZSBhY3Rpb25zIG11c3QgYmUgPiAwOyBpZiB5b3UgJyArXG4gICAgICAgICdoYXZlIG5vdGhpbmcgdG8gc3RvcmUsIGFjdGlvbnMgc3VjaCBhcyBzdG9yZSAnICtcbiAgICAgICAgJ3RydWUgb3Igc3RvcmUgY29uc3QgbWF5IGJlIG1vcmUgYXBwcm9wcmlhdGUnKTtcblxuICB9XG4gIGlmICh0eXBlb2YgdGhpcy5jb25zdGFudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5uYXJncyAhPT0gYy5PUFRJT05BTCkge1xuICAgIHRocm93IG5ldyBFcnJvcignbmFyZ3MgbXVzdCBiZSBPUFRJT05BTCB0byBzdXBwbHkgY29uc3QnKTtcbiAgfVxuICBBY3Rpb24uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn07XG51dGlsLmluaGVyaXRzKEFjdGlvblN0b3JlLCBBY3Rpb24pO1xuXG4vKjpub2RvYzoqXG4gKiBBY3Rpb25TdG9yZSNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykgLT4gVm9pZFxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogQ2FsbCB0aGUgYWN0aW9uLiBTYXZlIHJlc3VsdCBpbiBuYW1lc3BhY2Ugb2JqZWN0XG4gKiovXG5BY3Rpb25TdG9yZS5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzKSB7XG4gIG5hbWVzcGFjZS5zZXQodGhpcy5kZXN0LCB2YWx1ZXMpO1xufTtcbiIsIi8qOm5vZG9jOipcbiAqIGNsYXNzIEFjdGlvblN0b3JlVHJ1ZVxuICpcbiAqIFRoaXMgYWN0aW9uIHN0b3JlIHRoZSB2YWx1ZXMgVHJ1ZSByZXNwZWN0aXZlbHkuXG4gKiBUaGlzIGlzc3BlY2lhbCBjYXNlcyBvZiAnc3RvcmVDb25zdCdcbiAqXG4gKiBUaGlzIGNsYXNzIGluaGVyaXRlZCBmcm9tIFtbQWN0aW9uXV1cbiAqKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBBY3Rpb25TdG9yZUNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpO1xuXG4vKjpub2RvYzoqXG4gKiBuZXcgQWN0aW9uU3RvcmVUcnVlKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uU3RvcmVUcnVlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25TdG9yZVRydWUob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb25zdGFudCA9IHRydWU7XG4gIG9wdGlvbnMuZGVmYXVsdFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgIT09IG51bGwgPyBvcHRpb25zLmRlZmF1bHRWYWx1ZSA6IGZhbHNlO1xuICBBY3Rpb25TdG9yZUNvbnN0YW50LmNhbGwodGhpcywgb3B0aW9ucyk7XG59O1xudXRpbC5pbmhlcml0cyhBY3Rpb25TdG9yZVRydWUsIEFjdGlvblN0b3JlQ29uc3RhbnQpO1xuIiwiLyo6bm9kb2M6KlxuICogY2xhc3MgQWN0aW9uU3RvcmVGYWxzZVxuICpcbiAqIFRoaXMgYWN0aW9uIHN0b3JlIHRoZSB2YWx1ZXMgRmFsc2UgcmVzcGVjdGl2ZWx5LlxuICogVGhpcyBpcyBzcGVjaWFsIGNhc2VzIG9mICdzdG9yZUNvbnN0J1xuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBY3Rpb25dXVxuICoqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uU3RvcmVDb25zdGFudCA9IHJlcXVpcmUoJy4vY29uc3RhbnQnKTtcblxuLyo6bm9kb2M6KlxuICogbmV3IEFjdGlvblN0b3JlRmFsc2Uob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogaGFzaCBvZiBvcHRpb25zIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqKi9cbnZhciBBY3Rpb25TdG9yZUZhbHNlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBY3Rpb25TdG9yZUZhbHNlKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMuY29uc3RhbnQgPSBmYWxzZTtcbiAgb3B0aW9ucy5kZWZhdWx0VmFsdWUgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZSAhPT0gbnVsbCA/IG9wdGlvbnMuZGVmYXVsdFZhbHVlIDogdHJ1ZTtcbiAgQWN0aW9uU3RvcmVDb25zdGFudC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uU3RvcmVGYWxzZSwgQWN0aW9uU3RvcmVDb25zdGFudCk7XG4iLCIvKjpub2RvYzoqXG4gKiBjbGFzcyBBY3Rpb25WZXJzaW9uXG4gKlxuICogU3VwcG9ydCBhY3Rpb24gZm9yIHByaW50aW5nIHByb2dyYW0gdmVyc2lvblxuICogVGhpcyBjbGFzcyBpbmhlcml0ZWQgZnJvbSBbW0FjdGlvbl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQWN0aW9uID0gcmVxdWlyZSgnLi4vYWN0aW9uJyk7XG5cbi8vXG4vLyBDb25zdGFudHNcbi8vXG52YXIgYyA9IHJlcXVpcmUoJy4uL2NvbnN0Jyk7XG5cbi8qOm5vZG9jOipcbiAqIG5ldyBBY3Rpb25WZXJzaW9uKG9wdGlvbnMpXG4gKiAtIG9wdGlvbnMgKG9iamVjdCk6IG9wdGlvbnMgaGFzaCBzZWUgW1tBY3Rpb24ubmV3XV1cbiAqXG4gKiovXG52YXIgQWN0aW9uVmVyc2lvbiA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQWN0aW9uVmVyc2lvbihvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IChvcHRpb25zLmRlZmF1bHRWYWx1ZSA/IG9wdGlvbnMuZGVmYXVsdFZhbHVlIDogYy5TVVBQUkVTUyk7XG4gIG9wdGlvbnMuZGVzdCA9IChvcHRpb25zLmRlc3QgfHwgYy5TVVBQUkVTUyk7XG4gIG9wdGlvbnMubmFyZ3MgPSAwO1xuICB0aGlzLnZlcnNpb24gPSBvcHRpb25zLnZlcnNpb247XG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufTtcbnV0aWwuaW5oZXJpdHMoQWN0aW9uVmVyc2lvbiwgQWN0aW9uKTtcblxuLyo6bm9kb2M6KlxuICogQWN0aW9uVmVyc2lvbiNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykgLT4gVm9pZFxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogUHJpbnQgdmVyc2lvbiBhbmQgZXhpdFxuICoqL1xuQWN0aW9uVmVyc2lvbi5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIpIHtcbiAgdmFyIHZlcnNpb24gPSB0aGlzLnZlcnNpb24gfHwgcGFyc2VyLnZlcnNpb247XG4gIHZhciBmb3JtYXR0ZXIgPSBwYXJzZXIuX2dldEZvcm1hdHRlcigpO1xuICBmb3JtYXR0ZXIuYWRkVGV4dCh2ZXJzaW9uKTtcbiAgcGFyc2VyLmV4aXQoMCwgZm9ybWF0dGVyLmZvcm1hdEhlbHAoKSk7XG59O1xuIiwiLyoqIGludGVybmFsXG4gKiBjbGFzcyBBY3Rpb25TdWJwYXJzZXJzXG4gKlxuICogU3VwcG9ydCB0aGUgY3JlYXRpb24gb2Ygc3VjaCBzdWItY29tbWFuZHMgd2l0aCB0aGUgYWRkU3VicGFyc2VycygpXG4gKlxuICogVGhpcyBjbGFzcyBpbmhlcml0ZWQgZnJvbSBbW0FjdGlvbl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsICAgID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIGZvcm1hdCAgPSByZXF1aXJlKCd1dGlsJykuZm9ybWF0O1xuXG5cbnZhciBBY3Rpb24gPSByZXF1aXJlKCcuLi9hY3Rpb24nKTtcblxuLy8gQ29uc3RhbnRzXG52YXIgYyA9IHJlcXVpcmUoJy4uL2NvbnN0Jyk7XG5cbi8vIEVycm9yc1xudmFyIGFyZ3VtZW50RXJyb3JIZWxwZXIgPSByZXF1aXJlKCcuLi9hcmd1bWVudC9lcnJvcicpO1xuXG5cbi8qOm5vZG9jOipcbiAqIG5ldyBDaG9pY2VzUHNldWRvQWN0aW9uKG5hbWUsIGhlbHApXG4gKlxuICogQ3JlYXRlIHBzZXVkbyBhY3Rpb24gZm9yIGNvcnJlY3QgaGVscCB0ZXh0XG4gKlxuICoqL1xuZnVuY3Rpb24gQ2hvaWNlc1BzZXVkb0FjdGlvbihuYW1lLCBoZWxwKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIG9wdGlvblN0cmluZ3M6IFtdLFxuICAgIGRlc3Q6IG5hbWUsXG4gICAgaGVscDogaGVscFxuICB9O1xuXG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG51dGlsLmluaGVyaXRzKENob2ljZXNQc2V1ZG9BY3Rpb24sIEFjdGlvbik7XG5cbi8qKlxuICogbmV3IEFjdGlvblN1YnBhcnNlcnMob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogb3B0aW9ucyBoYXNoIHNlZSBbW0FjdGlvbi5uZXddXVxuICpcbiAqKi9cbmZ1bmN0aW9uIEFjdGlvblN1YnBhcnNlcnMob3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5kZXN0ID0gb3B0aW9ucy5kZXN0IHx8IGMuU1VQUFJFU1M7XG4gIG9wdGlvbnMubmFyZ3MgPSBjLlBBUlNFUjtcblxuICB0aGlzLmRlYnVnID0gKG9wdGlvbnMuZGVidWcgPT09IHRydWUpO1xuXG4gIHRoaXMuX3Byb2dQcmVmaXggPSBvcHRpb25zLnByb2c7XG4gIHRoaXMuX3BhcnNlckNsYXNzID0gb3B0aW9ucy5wYXJzZXJDbGFzcztcbiAgdGhpcy5fbmFtZVBhcnNlck1hcCA9IHt9O1xuICB0aGlzLl9jaG9pY2VzQWN0aW9ucyA9IFtdO1xuXG4gIG9wdGlvbnMuY2hvaWNlcyA9IHRoaXMuX25hbWVQYXJzZXJNYXA7XG4gIEFjdGlvbi5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG51dGlsLmluaGVyaXRzKEFjdGlvblN1YnBhcnNlcnMsIEFjdGlvbik7XG5cbi8qOm5vZG9jOipcbiAqIEFjdGlvblN1YnBhcnNlcnMjYWRkUGFyc2VyKG5hbWUsIG9wdGlvbnMpIC0+IEFyZ3VtZW50UGFyc2VyXG4gKiAtIG5hbWUgKHN0cmluZyk6IHN1Yi1jb21tYW5kIG5hbWVcbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogc2VlIFtbQXJndW1lbnRQYXJzZXIubmV3XV1cbiAqXG4gKiAgTm90ZTpcbiAqICBhZGRQYXJzZXIgc3VwcG9ydHMgYW4gYWRkaXRpb25hbCBhbGlhc2VzIG9wdGlvbixcbiAqICB3aGljaCBhbGxvd3MgbXVsdGlwbGUgc3RyaW5ncyB0byByZWZlciB0byB0aGUgc2FtZSBzdWJwYXJzZXIuXG4gKiAgVGhpcyBleGFtcGxlLCBsaWtlIHN2biwgYWxpYXNlcyBjbyBhcyBhIHNob3J0aGFuZCBmb3IgY2hlY2tvdXRcbiAqXG4gKiovXG5BY3Rpb25TdWJwYXJzZXJzLnByb3RvdHlwZS5hZGRQYXJzZXIgPSBmdW5jdGlvbiAobmFtZSwgb3B0aW9ucykge1xuICB2YXIgcGFyc2VyO1xuXG4gIHZhciBzZWxmID0gdGhpcztcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBvcHRpb25zLmRlYnVnID0gKHRoaXMuZGVidWcgPT09IHRydWUpO1xuXG4gIC8vIHNldCBwcm9ncmFtIGZyb20gdGhlIGV4aXN0aW5nIHByZWZpeFxuICBpZiAoIW9wdGlvbnMucHJvZykge1xuICAgIG9wdGlvbnMucHJvZyA9IHRoaXMuX3Byb2dQcmVmaXggKyAnICcgKyBuYW1lO1xuICB9XG5cbiAgdmFyIGFsaWFzZXMgPSBvcHRpb25zLmFsaWFzZXMgfHwgW107XG5cbiAgLy8gY3JlYXRlIGEgcHNldWRvLWFjdGlvbiB0byBob2xkIHRoZSBjaG9pY2UgaGVscFxuICBpZiAoISFvcHRpb25zLmhlbHAgfHwgdHlwZW9mIG9wdGlvbnMuaGVscCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgaGVscCA9IG9wdGlvbnMuaGVscDtcbiAgICBkZWxldGUgb3B0aW9ucy5oZWxwO1xuXG4gICAgdmFyIGNob2ljZUFjdGlvbiA9IG5ldyBDaG9pY2VzUHNldWRvQWN0aW9uKG5hbWUsIGhlbHApO1xuICAgIHRoaXMuX2Nob2ljZXNBY3Rpb25zLnB1c2goY2hvaWNlQWN0aW9uKTtcbiAgfVxuXG4gIC8vIGNyZWF0ZSB0aGUgcGFyc2VyIGFuZCBhZGQgaXQgdG8gdGhlIG1hcFxuICBwYXJzZXIgPSBuZXcgdGhpcy5fcGFyc2VyQ2xhc3Mob3B0aW9ucyk7XG4gIHRoaXMuX25hbWVQYXJzZXJNYXBbbmFtZV0gPSBwYXJzZXI7XG5cbiAgLy8gbWFrZSBwYXJzZXIgYXZhaWxhYmxlIHVuZGVyIGFsaWFzZXMgYWxzb1xuICBhbGlhc2VzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgc2VsZi5fbmFtZVBhcnNlck1hcFthbGlhc10gPSBwYXJzZXI7XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZXI7XG59O1xuXG5BY3Rpb25TdWJwYXJzZXJzLnByb3RvdHlwZS5fZ2V0U3ViYWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuX2Nob2ljZXNBY3Rpb25zO1xufTtcblxuLyo6bm9kb2M6KlxuICogQWN0aW9uU3VicGFyc2VycyNjYWxsKHBhcnNlciwgbmFtZXNwYWNlLCB2YWx1ZXMsIG9wdGlvblN0cmluZykgLT4gVm9pZFxuICogLSBwYXJzZXIgKEFyZ3VtZW50UGFyc2VyKTogY3VycmVudCBwYXJzZXJcbiAqIC0gbmFtZXNwYWNlIChOYW1lc3BhY2UpOiBuYW1lc3BhY2UgZm9yIG91dHB1dCBkYXRhXG4gKiAtIHZhbHVlcyAoQXJyYXkpOiBwYXJzZWQgdmFsdWVzXG4gKiAtIG9wdGlvblN0cmluZyAoQXJyYXkpOiBpbnB1dCBvcHRpb24gc3RyaW5nKG5vdCBwYXJzZWQpXG4gKlxuICogQ2FsbCB0aGUgYWN0aW9uLiBQYXJzZSBpbnB1dCBhZ3VtZW50c1xuICoqL1xuQWN0aW9uU3VicGFyc2Vycy5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChwYXJzZXIsIG5hbWVzcGFjZSwgdmFsdWVzKSB7XG4gIHZhciBwYXJzZXJOYW1lID0gdmFsdWVzWzBdO1xuICB2YXIgYXJnU3RyaW5ncyA9IHZhbHVlcy5zbGljZSgxKTtcblxuICAvLyBzZXQgdGhlIHBhcnNlciBuYW1lIGlmIHJlcXVlc3RlZFxuICBpZiAodGhpcy5kZXN0ICE9PSBjLlNVUFBSRVNTKSB7XG4gICAgbmFtZXNwYWNlW3RoaXMuZGVzdF0gPSBwYXJzZXJOYW1lO1xuICB9XG5cbiAgLy8gc2VsZWN0IHRoZSBwYXJzZXJcbiAgaWYgKHRoaXMuX25hbWVQYXJzZXJNYXBbcGFyc2VyTmFtZV0pIHtcbiAgICBwYXJzZXIgPSB0aGlzLl9uYW1lUGFyc2VyTWFwW3BhcnNlck5hbWVdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGFyZ3VtZW50RXJyb3JIZWxwZXIoZm9ybWF0KFxuICAgICAgJ1Vua25vd24gcGFyc2VyIFwiJXNcIiAoY2hvaWNlczogWyVzXSkuJyxcbiAgICAgICAgcGFyc2VyTmFtZSxcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5fbmFtZVBhcnNlck1hcCkuam9pbignLCAnKVxuICAgICkpO1xuICB9XG5cbiAgLy8gcGFyc2UgYWxsIHRoZSByZW1haW5pbmcgb3B0aW9ucyBpbnRvIHRoZSBuYW1lc3BhY2VcbiAgcGFyc2VyLnBhcnNlQXJncyhhcmdTdHJpbmdzLCBuYW1lc3BhY2UpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBY3Rpb25TdWJwYXJzZXJzO1xuIiwiLyoqIGludGVybmFsXG4gKiBjbGFzcyBNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwXG4gKlxuICogR3JvdXAgYXJndW1lbnRzLlxuICogQnkgZGVmYXVsdCwgQXJndW1lbnRQYXJzZXIgZ3JvdXBzIGNvbW1hbmQtbGluZSBhcmd1bWVudHNcbiAqIGludG8g4oCccG9zaXRpb25hbCBhcmd1bWVudHPigJ0gYW5kIOKAnG9wdGlvbmFsIGFyZ3VtZW50c+KAnVxuICogd2hlbiBkaXNwbGF5aW5nIGhlbHAgbWVzc2FnZXMuIFdoZW4gdGhlcmUgaXMgYSBiZXR0ZXJcbiAqIGNvbmNlcHR1YWwgZ3JvdXBpbmcgb2YgYXJndW1lbnRzIHRoYW4gdGhpcyBkZWZhdWx0IG9uZSxcbiAqIGFwcHJvcHJpYXRlIGdyb3VwcyBjYW4gYmUgY3JlYXRlZCB1c2luZyB0aGUgYWRkQXJndW1lbnRHcm91cCgpIG1ldGhvZFxuICpcbiAqIFRoaXMgY2xhc3MgaW5oZXJpdGVkIGZyb20gW1tBcmd1bWVudENvbnRhaW5lcl1dXG4gKiovXG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQXJndW1lbnRHcm91cCA9IHJlcXVpcmUoJy4vZ3JvdXAnKTtcblxuLyoqXG4gKiBuZXcgTXV0dWFsbHlFeGNsdXNpdmVHcm91cChjb250YWluZXIsIG9wdGlvbnMpXG4gKiAtIGNvbnRhaW5lciAob2JqZWN0KTogbWFpbiBjb250YWluZXJcbiAqIC0gb3B0aW9ucyAob2JqZWN0KTogb3B0aW9ucy5yZXF1aXJlZCAtPiB0cnVlL2ZhbHNlXG4gKlxuICogYHJlcXVpcmVkYCBjb3VsZCBiZSBhbiBhcmd1bWVudCBpdHNlbGYsIGJ1dCBtYWtpbmcgaXQgYSBwcm9wZXJ0eSBvZlxuICogdGhlIG9wdGlvbnMgYXJndW1lbnQgaXMgbW9yZSBjb25zaXN0ZW50IHdpdGggdGhlIEpTIGFkYXB0YXRpb24gb2YgdGhlIFB5dGhvbilcbiAqKi9cbnZhciBNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBNdXR1YWxseUV4Y2x1c2l2ZUdyb3VwKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICB2YXIgcmVxdWlyZWQ7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICByZXF1aXJlZCA9IG9wdGlvbnMucmVxdWlyZWQgfHwgZmFsc2U7XG4gIEFyZ3VtZW50R3JvdXAuY2FsbCh0aGlzLCBjb250YWluZXIpO1xuICB0aGlzLnJlcXVpcmVkID0gcmVxdWlyZWQ7XG5cbn07XG51dGlsLmluaGVyaXRzKE11dHVhbGx5RXhjbHVzaXZlR3JvdXAsIEFyZ3VtZW50R3JvdXApO1xuXG5cbk11dHVhbGx5RXhjbHVzaXZlR3JvdXAucHJvdG90eXBlLl9hZGRBY3Rpb24gPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gIHZhciBtc2c7XG4gIGlmIChhY3Rpb24ucmVxdWlyZWQpIHtcbiAgICBtc2cgPSAnbXV0dWFsbHkgZXhjbHVzaXZlIGFyZ3VtZW50cyBtdXN0IGJlIG9wdGlvbmFsJztcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgfVxuICBhY3Rpb24gPSB0aGlzLl9jb250YWluZXIuX2FkZEFjdGlvbihhY3Rpb24pO1xuICB0aGlzLl9ncm91cEFjdGlvbnMucHVzaChhY3Rpb24pO1xuICByZXR1cm4gYWN0aW9uO1xufTtcblxuXG5NdXR1YWxseUV4Y2x1c2l2ZUdyb3VwLnByb3RvdHlwZS5fcmVtb3ZlQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICB0aGlzLl9jb250YWluZXIuX3JlbW92ZUFjdGlvbihhY3Rpb24pO1xuICB0aGlzLl9ncm91cEFjdGlvbnMucmVtb3ZlKGFjdGlvbik7XG59O1xuXG4iLCIvKiFcbiAqIG1pbWUtZGJcbiAqIENvcHlyaWdodChjKSAyMDE0IEpvbmF0aGFuIE9uZ1xuICogTUlUIExpY2Vuc2VkXG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGIuanNvbicpXG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9odG1sJylcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc2NoZW1hID0gcmVxdWlyZSgncHJvcGVydHktaW5mb3JtYXRpb24vaHRtbCcpXG52YXIgZmFjdG9yeSA9IHJlcXVpcmUoJy4vZmFjdG9yeScpXG5cbnZhciBodG1sID0gZmFjdG9yeShzY2hlbWEsICdkaXYnKVxuaHRtbC5kaXNwbGF5TmFtZSA9ICdodG1sJ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGh0bWxcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgbWVyZ2UgPSByZXF1aXJlKCcuL2xpYi91dGlsL21lcmdlJylcbnZhciB4bGluayA9IHJlcXVpcmUoJy4vbGliL3hsaW5rJylcbnZhciB4bWwgPSByZXF1aXJlKCcuL2xpYi94bWwnKVxudmFyIHhtbG5zID0gcmVxdWlyZSgnLi9saWIveG1sbnMnKVxudmFyIGFyaWEgPSByZXF1aXJlKCcuL2xpYi9hcmlhJylcbnZhciBodG1sID0gcmVxdWlyZSgnLi9saWIvaHRtbCcpXG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2UoW3htbCwgeGxpbmssIHhtbG5zLCBhcmlhLCBodG1sXSlcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlXG5cbmZ1bmN0aW9uIG1lcmdlKGRlZmluaXRpb25zKSB7XG4gIHZhciBsZW5ndGggPSBkZWZpbml0aW9ucy5sZW5ndGhcbiAgdmFyIHByb3BlcnR5ID0gW11cbiAgdmFyIG5vcm1hbCA9IFtdXG4gIHZhciBpbmRleCA9IC0xXG4gIHZhciBpbmZvXG4gIHZhciBzcGFjZVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaW5mbyA9IGRlZmluaXRpb25zW2luZGV4XVxuICAgIHByb3BlcnR5LnB1c2goaW5mby5wcm9wZXJ0eSlcbiAgICBub3JtYWwucHVzaChpbmZvLm5vcm1hbClcbiAgICBzcGFjZSA9IGluZm8uc3BhY2VcbiAgfVxuXG4gIHJldHVybiBuZXcgU2NoZW1hKFxuICAgIHh0ZW5kLmFwcGx5KG51bGwsIHByb3BlcnR5KSxcbiAgICB4dGVuZC5hcHBseShudWxsLCBub3JtYWwpLFxuICAgIHNwYWNlXG4gIClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi91dGlsL2NyZWF0ZScpXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlKHtcbiAgc3BhY2U6ICd4bGluaycsXG4gIHRyYW5zZm9ybTogeGxpbmtUcmFuc2Zvcm0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICB4TGlua0FjdHVhdGU6IG51bGwsXG4gICAgeExpbmtBcmNSb2xlOiBudWxsLFxuICAgIHhMaW5rSHJlZjogbnVsbCxcbiAgICB4TGlua1JvbGU6IG51bGwsXG4gICAgeExpbmtTaG93OiBudWxsLFxuICAgIHhMaW5rVGl0bGU6IG51bGwsXG4gICAgeExpbmtUeXBlOiBudWxsXG4gIH1cbn0pXG5cbmZ1bmN0aW9uIHhsaW5rVHJhbnNmb3JtKF8sIHByb3ApIHtcbiAgcmV0dXJuICd4bGluazonICsgcHJvcC5zbGljZSg1KS50b0xvd2VyQ2FzZSgpXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vdXRpbC9jcmVhdGUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZSh7XG4gIHNwYWNlOiAneG1sJyxcbiAgdHJhbnNmb3JtOiB4bWxUcmFuc2Zvcm0sXG4gIHByb3BlcnRpZXM6IHtcbiAgICB4bWxMYW5nOiBudWxsLFxuICAgIHhtbEJhc2U6IG51bGwsXG4gICAgeG1sU3BhY2U6IG51bGxcbiAgfVxufSlcblxuZnVuY3Rpb24geG1sVHJhbnNmb3JtKF8sIHByb3ApIHtcbiAgcmV0dXJuICd4bWw6JyArIHByb3Auc2xpY2UoMykudG9Mb3dlckNhc2UoKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL3V0aWwvY3JlYXRlJylcbnZhciBjYXNlSW5zZW5zaXRpdmVUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL3V0aWwvY2FzZS1pbnNlbnNpdGl2ZS10cmFuc2Zvcm0nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZSh7XG4gIHNwYWNlOiAneG1sbnMnLFxuICBhdHRyaWJ1dGVzOiB7XG4gICAgeG1sbnN4bGluazogJ3htbG5zOnhsaW5rJ1xuICB9LFxuICB0cmFuc2Zvcm06IGNhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybSxcbiAgcHJvcGVydGllczoge1xuICAgIHhtbG5zOiBudWxsLFxuICAgIHhtbG5zWExpbms6IG51bGxcbiAgfVxufSlcbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc2VTZW5zaXRpdmVUcmFuc2Zvcm1cblxuZnVuY3Rpb24gY2FzZVNlbnNpdGl2ZVRyYW5zZm9ybShhdHRyaWJ1dGVzLCBhdHRyaWJ1dGUpIHtcbiAgcmV0dXJuIGF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzID8gYXR0cmlidXRlc1thdHRyaWJ1dGVdIDogYXR0cmlidXRlXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHR5cGVzID0gcmVxdWlyZSgnLi91dGlsL3R5cGVzJylcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL3V0aWwvY3JlYXRlJylcblxudmFyIGJvb2xlYW5pc2ggPSB0eXBlcy5ib29sZWFuaXNoXG52YXIgbnVtYmVyID0gdHlwZXMubnVtYmVyXG52YXIgc3BhY2VTZXBhcmF0ZWQgPSB0eXBlcy5zcGFjZVNlcGFyYXRlZFxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZSh7XG4gIHRyYW5zZm9ybTogYXJpYVRyYW5zZm9ybSxcbiAgcHJvcGVydGllczoge1xuICAgIGFyaWFBY3RpdmVEZXNjZW5kYW50OiBudWxsLFxuICAgIGFyaWFBdG9taWM6IGJvb2xlYW5pc2gsXG4gICAgYXJpYUF1dG9Db21wbGV0ZTogbnVsbCxcbiAgICBhcmlhQnVzeTogYm9vbGVhbmlzaCxcbiAgICBhcmlhQ2hlY2tlZDogYm9vbGVhbmlzaCxcbiAgICBhcmlhQ29sQ291bnQ6IG51bWJlcixcbiAgICBhcmlhQ29sSW5kZXg6IG51bWJlcixcbiAgICBhcmlhQ29sU3BhbjogbnVtYmVyLFxuICAgIGFyaWFDb250cm9sczogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYUN1cnJlbnQ6IG51bGwsXG4gICAgYXJpYURlc2NyaWJlZEJ5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhRGV0YWlsczogbnVsbCxcbiAgICBhcmlhRGlzYWJsZWQ6IGJvb2xlYW5pc2gsXG4gICAgYXJpYURyb3BFZmZlY3Q6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFFcnJvck1lc3NhZ2U6IG51bGwsXG4gICAgYXJpYUV4cGFuZGVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFGbG93VG86IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFHcmFiYmVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFIYXNQb3B1cDogbnVsbCxcbiAgICBhcmlhSGlkZGVuOiBib29sZWFuaXNoLFxuICAgIGFyaWFJbnZhbGlkOiBudWxsLFxuICAgIGFyaWFLZXlTaG9ydGN1dHM6IG51bGwsXG4gICAgYXJpYUxhYmVsOiBudWxsLFxuICAgIGFyaWFMYWJlbGxlZEJ5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhcmlhTGV2ZWw6IG51bWJlcixcbiAgICBhcmlhTGl2ZTogbnVsbCxcbiAgICBhcmlhTW9kYWw6IGJvb2xlYW5pc2gsXG4gICAgYXJpYU11bHRpTGluZTogYm9vbGVhbmlzaCxcbiAgICBhcmlhTXVsdGlTZWxlY3RhYmxlOiBib29sZWFuaXNoLFxuICAgIGFyaWFPcmllbnRhdGlvbjogbnVsbCxcbiAgICBhcmlhT3duczogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXJpYVBsYWNlaG9sZGVyOiBudWxsLFxuICAgIGFyaWFQb3NJblNldDogbnVtYmVyLFxuICAgIGFyaWFQcmVzc2VkOiBib29sZWFuaXNoLFxuICAgIGFyaWFSZWFkT25seTogYm9vbGVhbmlzaCxcbiAgICBhcmlhUmVsZXZhbnQ6IG51bGwsXG4gICAgYXJpYVJlcXVpcmVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFSb2xlRGVzY3JpcHRpb246IHNwYWNlU2VwYXJhdGVkLFxuICAgIGFyaWFSb3dDb3VudDogbnVtYmVyLFxuICAgIGFyaWFSb3dJbmRleDogbnVtYmVyLFxuICAgIGFyaWFSb3dTcGFuOiBudW1iZXIsXG4gICAgYXJpYVNlbGVjdGVkOiBib29sZWFuaXNoLFxuICAgIGFyaWFTZXRTaXplOiBudW1iZXIsXG4gICAgYXJpYVNvcnQ6IG51bGwsXG4gICAgYXJpYVZhbHVlTWF4OiBudW1iZXIsXG4gICAgYXJpYVZhbHVlTWluOiBudW1iZXIsXG4gICAgYXJpYVZhbHVlTm93OiBudW1iZXIsXG4gICAgYXJpYVZhbHVlVGV4dDogbnVsbCxcbiAgICByb2xlOiBudWxsXG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGFyaWFUcmFuc2Zvcm0oXywgcHJvcCkge1xuICByZXR1cm4gcHJvcCA9PT0gJ3JvbGUnID8gcHJvcCA6ICdhcmlhLScgKyBwcm9wLnNsaWNlKDQpLnRvTG93ZXJDYXNlKClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgdHlwZXMgPSByZXF1aXJlKCcuL3V0aWwvdHlwZXMnKVxudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vdXRpbC9jcmVhdGUnKVxudmFyIGNhc2VJbnNlbnNpdGl2ZVRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vdXRpbC9jYXNlLWluc2Vuc2l0aXZlLXRyYW5zZm9ybScpXG5cbnZhciBib29sZWFuID0gdHlwZXMuYm9vbGVhblxudmFyIG92ZXJsb2FkZWRCb29sZWFuID0gdHlwZXMub3ZlcmxvYWRlZEJvb2xlYW5cbnZhciBib29sZWFuaXNoID0gdHlwZXMuYm9vbGVhbmlzaFxudmFyIG51bWJlciA9IHR5cGVzLm51bWJlclxudmFyIHNwYWNlU2VwYXJhdGVkID0gdHlwZXMuc3BhY2VTZXBhcmF0ZWRcbnZhciBjb21tYVNlcGFyYXRlZCA9IHR5cGVzLmNvbW1hU2VwYXJhdGVkXG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlKHtcbiAgc3BhY2U6ICdodG1sJyxcbiAgYXR0cmlidXRlczoge1xuICAgIGFjY2VwdGNoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NuYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxmb3I6ICdmb3InLFxuICAgIGh0dHBlcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIHRyYW5zZm9ybTogY2FzZUluc2Vuc2l0aXZlVHJhbnNmb3JtLFxuICBtdXN0VXNlUHJvcGVydHk6IFsnY2hlY2tlZCcsICdtdWx0aXBsZScsICdtdXRlZCcsICdzZWxlY3RlZCddLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgLy8gU3RhbmRhcmQgUHJvcGVydGllcy5cbiAgICBhYmJyOiBudWxsLFxuICAgIGFjY2VwdDogY29tbWFTZXBhcmF0ZWQsXG4gICAgYWNjZXB0Q2hhcnNldDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYWNjZXNzS2V5OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBhY3Rpb246IG51bGwsXG4gICAgYWxsb3c6IG51bGwsXG4gICAgYWxsb3dGdWxsU2NyZWVuOiBib29sZWFuLFxuICAgIGFsbG93UGF5bWVudFJlcXVlc3Q6IGJvb2xlYW4sXG4gICAgYWxsb3dVc2VyTWVkaWE6IGJvb2xlYW4sXG4gICAgYWx0OiBudWxsLFxuICAgIGFzOiBudWxsLFxuICAgIGFzeW5jOiBib29sZWFuLFxuICAgIGF1dG9DYXBpdGFsaXplOiBudWxsLFxuICAgIGF1dG9Db21wbGV0ZTogc3BhY2VTZXBhcmF0ZWQsXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuLFxuICAgIGF1dG9QbGF5OiBib29sZWFuLFxuICAgIGNhcHR1cmU6IGJvb2xlYW4sXG4gICAgY2hhclNldDogbnVsbCxcbiAgICBjaGVja2VkOiBib29sZWFuLFxuICAgIGNpdGU6IG51bGwsXG4gICAgY2xhc3NOYW1lOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBjb2xzOiBudW1iZXIsXG4gICAgY29sU3BhbjogbnVsbCxcbiAgICBjb250ZW50OiBudWxsLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogYm9vbGVhbmlzaCxcbiAgICBjb250cm9sczogYm9vbGVhbixcbiAgICBjb250cm9sc0xpc3Q6IHNwYWNlU2VwYXJhdGVkLFxuICAgIGNvb3JkczogbnVtYmVyIHwgY29tbWFTZXBhcmF0ZWQsXG4gICAgY3Jvc3NPcmlnaW46IG51bGwsXG4gICAgZGF0YTogbnVsbCxcbiAgICBkYXRlVGltZTogbnVsbCxcbiAgICBkZWNvZGluZzogbnVsbCxcbiAgICBkZWZhdWx0OiBib29sZWFuLFxuICAgIGRlZmVyOiBib29sZWFuLFxuICAgIGRpcjogbnVsbCxcbiAgICBkaXJOYW1lOiBudWxsLFxuICAgIGRpc2FibGVkOiBib29sZWFuLFxuICAgIGRvd25sb2FkOiBvdmVybG9hZGVkQm9vbGVhbixcbiAgICBkcmFnZ2FibGU6IGJvb2xlYW5pc2gsXG4gICAgZW5jVHlwZTogbnVsbCxcbiAgICBlbnRlcktleUhpbnQ6IG51bGwsXG4gICAgZm9ybTogbnVsbCxcbiAgICBmb3JtQWN0aW9uOiBudWxsLFxuICAgIGZvcm1FbmNUeXBlOiBudWxsLFxuICAgIGZvcm1NZXRob2Q6IG51bGwsXG4gICAgZm9ybU5vVmFsaWRhdGU6IGJvb2xlYW4sXG4gICAgZm9ybVRhcmdldDogbnVsbCxcbiAgICBoZWFkZXJzOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBoaWRkZW46IGJvb2xlYW4sXG4gICAgaGlnaDogbnVtYmVyLFxuICAgIGhyZWY6IG51bGwsXG4gICAgaHJlZkxhbmc6IG51bGwsXG4gICAgaHRtbEZvcjogc3BhY2VTZXBhcmF0ZWQsXG4gICAgaHR0cEVxdWl2OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBpZDogbnVsbCxcbiAgICBpbWFnZVNpemVzOiBudWxsLFxuICAgIGltYWdlU3JjU2V0OiBjb21tYVNlcGFyYXRlZCxcbiAgICBpbnB1dE1vZGU6IG51bGwsXG4gICAgaW50ZWdyaXR5OiBudWxsLFxuICAgIGlzOiBudWxsLFxuICAgIGlzTWFwOiBib29sZWFuLFxuICAgIGl0ZW1JZDogbnVsbCxcbiAgICBpdGVtUHJvcDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgaXRlbVJlZjogc3BhY2VTZXBhcmF0ZWQsXG4gICAgaXRlbVNjb3BlOiBib29sZWFuLFxuICAgIGl0ZW1UeXBlOiBzcGFjZVNlcGFyYXRlZCxcbiAgICBraW5kOiBudWxsLFxuICAgIGxhYmVsOiBudWxsLFxuICAgIGxhbmc6IG51bGwsXG4gICAgbGFuZ3VhZ2U6IG51bGwsXG4gICAgbGlzdDogbnVsbCxcbiAgICBsb29wOiBib29sZWFuLFxuICAgIGxvdzogbnVtYmVyLFxuICAgIG1hbmlmZXN0OiBudWxsLFxuICAgIG1heDogbnVsbCxcbiAgICBtYXhMZW5ndGg6IG51bWJlcixcbiAgICBtZWRpYTogbnVsbCxcbiAgICBtZXRob2Q6IG51bGwsXG4gICAgbWluOiBudWxsLFxuICAgIG1pbkxlbmd0aDogbnVtYmVyLFxuICAgIG11bHRpcGxlOiBib29sZWFuLFxuICAgIG11dGVkOiBib29sZWFuLFxuICAgIG5hbWU6IG51bGwsXG4gICAgbm9uY2U6IG51bGwsXG4gICAgbm9Nb2R1bGU6IGJvb2xlYW4sXG4gICAgbm9WYWxpZGF0ZTogYm9vbGVhbixcbiAgICBvbkFib3J0OiBudWxsLFxuICAgIG9uQWZ0ZXJQcmludDogbnVsbCxcbiAgICBvbkF1eENsaWNrOiBudWxsLFxuICAgIG9uQmVmb3JlUHJpbnQ6IG51bGwsXG4gICAgb25CZWZvcmVVbmxvYWQ6IG51bGwsXG4gICAgb25CbHVyOiBudWxsLFxuICAgIG9uQ2FuY2VsOiBudWxsLFxuICAgIG9uQ2FuUGxheTogbnVsbCxcbiAgICBvbkNhblBsYXlUaHJvdWdoOiBudWxsLFxuICAgIG9uQ2hhbmdlOiBudWxsLFxuICAgIG9uQ2xpY2s6IG51bGwsXG4gICAgb25DbG9zZTogbnVsbCxcbiAgICBvbkNvbnRleHRNZW51OiBudWxsLFxuICAgIG9uQ29weTogbnVsbCxcbiAgICBvbkN1ZUNoYW5nZTogbnVsbCxcbiAgICBvbkN1dDogbnVsbCxcbiAgICBvbkRibENsaWNrOiBudWxsLFxuICAgIG9uRHJhZzogbnVsbCxcbiAgICBvbkRyYWdFbmQ6IG51bGwsXG4gICAgb25EcmFnRW50ZXI6IG51bGwsXG4gICAgb25EcmFnRXhpdDogbnVsbCxcbiAgICBvbkRyYWdMZWF2ZTogbnVsbCxcbiAgICBvbkRyYWdPdmVyOiBudWxsLFxuICAgIG9uRHJhZ1N0YXJ0OiBudWxsLFxuICAgIG9uRHJvcDogbnVsbCxcbiAgICBvbkR1cmF0aW9uQ2hhbmdlOiBudWxsLFxuICAgIG9uRW1wdGllZDogbnVsbCxcbiAgICBvbkVuZGVkOiBudWxsLFxuICAgIG9uRXJyb3I6IG51bGwsXG4gICAgb25Gb2N1czogbnVsbCxcbiAgICBvbkZvcm1EYXRhOiBudWxsLFxuICAgIG9uSGFzaENoYW5nZTogbnVsbCxcbiAgICBvbklucHV0OiBudWxsLFxuICAgIG9uSW52YWxpZDogbnVsbCxcbiAgICBvbktleURvd246IG51bGwsXG4gICAgb25LZXlQcmVzczogbnVsbCxcbiAgICBvbktleVVwOiBudWxsLFxuICAgIG9uTGFuZ3VhZ2VDaGFuZ2U6IG51bGwsXG4gICAgb25Mb2FkOiBudWxsLFxuICAgIG9uTG9hZGVkRGF0YTogbnVsbCxcbiAgICBvbkxvYWRlZE1ldGFkYXRhOiBudWxsLFxuICAgIG9uTG9hZEVuZDogbnVsbCxcbiAgICBvbkxvYWRTdGFydDogbnVsbCxcbiAgICBvbk1lc3NhZ2U6IG51bGwsXG4gICAgb25NZXNzYWdlRXJyb3I6IG51bGwsXG4gICAgb25Nb3VzZURvd246IG51bGwsXG4gICAgb25Nb3VzZUVudGVyOiBudWxsLFxuICAgIG9uTW91c2VMZWF2ZTogbnVsbCxcbiAgICBvbk1vdXNlTW92ZTogbnVsbCxcbiAgICBvbk1vdXNlT3V0OiBudWxsLFxuICAgIG9uTW91c2VPdmVyOiBudWxsLFxuICAgIG9uTW91c2VVcDogbnVsbCxcbiAgICBvbk9mZmxpbmU6IG51bGwsXG4gICAgb25PbmxpbmU6IG51bGwsXG4gICAgb25QYWdlSGlkZTogbnVsbCxcbiAgICBvblBhZ2VTaG93OiBudWxsLFxuICAgIG9uUGFzdGU6IG51bGwsXG4gICAgb25QYXVzZTogbnVsbCxcbiAgICBvblBsYXk6IG51bGwsXG4gICAgb25QbGF5aW5nOiBudWxsLFxuICAgIG9uUG9wU3RhdGU6IG51bGwsXG4gICAgb25Qcm9ncmVzczogbnVsbCxcbiAgICBvblJhdGVDaGFuZ2U6IG51bGwsXG4gICAgb25SZWplY3Rpb25IYW5kbGVkOiBudWxsLFxuICAgIG9uUmVzZXQ6IG51bGwsXG4gICAgb25SZXNpemU6IG51bGwsXG4gICAgb25TY3JvbGw6IG51bGwsXG4gICAgb25TZWN1cml0eVBvbGljeVZpb2xhdGlvbjogbnVsbCxcbiAgICBvblNlZWtlZDogbnVsbCxcbiAgICBvblNlZWtpbmc6IG51bGwsXG4gICAgb25TZWxlY3Q6IG51bGwsXG4gICAgb25TbG90Q2hhbmdlOiBudWxsLFxuICAgIG9uU3RhbGxlZDogbnVsbCxcbiAgICBvblN0b3JhZ2U6IG51bGwsXG4gICAgb25TdWJtaXQ6IG51bGwsXG4gICAgb25TdXNwZW5kOiBudWxsLFxuICAgIG9uVGltZVVwZGF0ZTogbnVsbCxcbiAgICBvblRvZ2dsZTogbnVsbCxcbiAgICBvblVuaGFuZGxlZFJlamVjdGlvbjogbnVsbCxcbiAgICBvblVubG9hZDogbnVsbCxcbiAgICBvblZvbHVtZUNoYW5nZTogbnVsbCxcbiAgICBvbldhaXRpbmc6IG51bGwsXG4gICAgb25XaGVlbDogbnVsbCxcbiAgICBvcGVuOiBib29sZWFuLFxuICAgIG9wdGltdW06IG51bWJlcixcbiAgICBwYXR0ZXJuOiBudWxsLFxuICAgIHBpbmc6IHNwYWNlU2VwYXJhdGVkLFxuICAgIHBsYWNlaG9sZGVyOiBudWxsLFxuICAgIHBsYXlzSW5saW5lOiBib29sZWFuLFxuICAgIHBvc3RlcjogbnVsbCxcbiAgICBwcmVsb2FkOiBudWxsLFxuICAgIHJlYWRPbmx5OiBib29sZWFuLFxuICAgIHJlZmVycmVyUG9saWN5OiBudWxsLFxuICAgIHJlbDogc3BhY2VTZXBhcmF0ZWQsXG4gICAgcmVxdWlyZWQ6IGJvb2xlYW4sXG4gICAgcmV2ZXJzZWQ6IGJvb2xlYW4sXG4gICAgcm93czogbnVtYmVyLFxuICAgIHJvd1NwYW46IG51bWJlcixcbiAgICBzYW5kYm94OiBzcGFjZVNlcGFyYXRlZCxcbiAgICBzY29wZTogbnVsbCxcbiAgICBzY29wZWQ6IGJvb2xlYW4sXG4gICAgc2VhbWxlc3M6IGJvb2xlYW4sXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW4sXG4gICAgc2hhcGU6IG51bGwsXG4gICAgc2l6ZTogbnVtYmVyLFxuICAgIHNpemVzOiBudWxsLFxuICAgIHNsb3Q6IG51bGwsXG4gICAgc3BhbjogbnVtYmVyLFxuICAgIHNwZWxsQ2hlY2s6IGJvb2xlYW5pc2gsXG4gICAgc3JjOiBudWxsLFxuICAgIHNyY0RvYzogbnVsbCxcbiAgICBzcmNMYW5nOiBudWxsLFxuICAgIHNyY1NldDogY29tbWFTZXBhcmF0ZWQsXG4gICAgc3RhcnQ6IG51bWJlcixcbiAgICBzdGVwOiBudWxsLFxuICAgIHN0eWxlOiBudWxsLFxuICAgIHRhYkluZGV4OiBudW1iZXIsXG4gICAgdGFyZ2V0OiBudWxsLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHRyYW5zbGF0ZTogbnVsbCxcbiAgICB0eXBlOiBudWxsLFxuICAgIHR5cGVNdXN0TWF0Y2g6IGJvb2xlYW4sXG4gICAgdXNlTWFwOiBudWxsLFxuICAgIHZhbHVlOiBib29sZWFuaXNoLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgd3JhcDogbnVsbCxcblxuICAgIC8vIExlZ2FjeS5cbiAgICAvLyBTZWU6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI290aGVyLWVsZW1lbnRzLC1hdHRyaWJ1dGVzLWFuZC1hcGlzXG4gICAgYWxpZ246IG51bGwsIC8vIFNldmVyYWwuIFVzZSBDU1MgYHRleHQtYWxpZ25gIGluc3RlYWQsXG4gICAgYUxpbms6IG51bGwsIC8vIGA8Ym9keT5gLiBVc2UgQ1NTIGBhOmFjdGl2ZSB7Y29sb3J9YCBpbnN0ZWFkXG4gICAgYXJjaGl2ZTogc3BhY2VTZXBhcmF0ZWQsIC8vIGA8b2JqZWN0PmAuIExpc3Qgb2YgVVJJcyB0byBhcmNoaXZlc1xuICAgIGF4aXM6IG51bGwsIC8vIGA8dGQ+YCBhbmQgYDx0aD5gLiBVc2UgYHNjb3BlYCBvbiBgPHRoPmBcbiAgICBiYWNrZ3JvdW5kOiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgYmFja2dyb3VuZC1pbWFnZWAgaW5zdGVhZFxuICAgIGJnQ29sb3I6IG51bGwsIC8vIGA8Ym9keT5gIGFuZCB0YWJsZSBlbGVtZW50cy4gVXNlIENTUyBgYmFja2dyb3VuZC1jb2xvcmAgaW5zdGVhZFxuICAgIGJvcmRlcjogbnVtYmVyLCAvLyBgPHRhYmxlPmAuIFVzZSBDU1MgYGJvcmRlci13aWR0aGAgaW5zdGVhZCxcbiAgICBib3JkZXJDb2xvcjogbnVsbCwgLy8gYDx0YWJsZT5gLiBVc2UgQ1NTIGBib3JkZXItY29sb3JgIGluc3RlYWQsXG4gICAgYm90dG9tTWFyZ2luOiBudW1iZXIsIC8vIGA8Ym9keT5gXG4gICAgY2VsbFBhZGRpbmc6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIGNlbGxTcGFjaW5nOiBudWxsLCAvLyBgPHRhYmxlPmBcbiAgICBjaGFyOiBudWxsLCAvLyBTZXZlcmFsIHRhYmxlIGVsZW1lbnRzLiBXaGVuIGBhbGlnbj1jaGFyYCwgc2V0cyB0aGUgY2hhcmFjdGVyIHRvIGFsaWduIG9uXG4gICAgY2hhck9mZjogbnVsbCwgLy8gU2V2ZXJhbCB0YWJsZSBlbGVtZW50cy4gV2hlbiBgY2hhcmAsIG9mZnNldHMgdGhlIGFsaWdubWVudFxuICAgIGNsYXNzSWQ6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBjbGVhcjogbnVsbCwgLy8gYDxicj5gLiBVc2UgQ1NTIGBjbGVhcmAgaW5zdGVhZFxuICAgIGNvZGU6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBjb2RlQmFzZTogbnVsbCwgLy8gYDxvYmplY3Q+YFxuICAgIGNvZGVUeXBlOiBudWxsLCAvLyBgPG9iamVjdD5gXG4gICAgY29sb3I6IG51bGwsIC8vIGA8Zm9udD5gIGFuZCBgPGhyPmAuIFVzZSBDU1MgaW5zdGVhZFxuICAgIGNvbXBhY3Q6IGJvb2xlYW4sIC8vIExpc3RzLiBVc2UgQ1NTIHRvIHJlZHVjZSBzcGFjZSBiZXR3ZWVuIGl0ZW1zIGluc3RlYWRcbiAgICBkZWNsYXJlOiBib29sZWFuLCAvLyBgPG9iamVjdD5gXG4gICAgZXZlbnQ6IG51bGwsIC8vIGA8c2NyaXB0PmBcbiAgICBmYWNlOiBudWxsLCAvLyBgPGZvbnQ+YC4gVXNlIENTUyBpbnN0ZWFkXG4gICAgZnJhbWU6IG51bGwsIC8vIGA8dGFibGU+YFxuICAgIGZyYW1lQm9yZGVyOiBudWxsLCAvLyBgPGlmcmFtZT5gLiBVc2UgQ1NTIGBib3JkZXJgIGluc3RlYWRcbiAgICBoU3BhY2U6IG51bWJlciwgLy8gYDxpbWc+YCBhbmQgYDxvYmplY3Q+YFxuICAgIGxlZnRNYXJnaW46IG51bWJlciwgLy8gYDxib2R5PmBcbiAgICBsaW5rOiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgYTpsaW5rIHtjb2xvcjogKn1gIGluc3RlYWRcbiAgICBsb25nRGVzYzogbnVsbCwgLy8gYDxmcmFtZT5gLCBgPGlmcmFtZT5gLCBhbmQgYDxpbWc+YC4gVXNlIGFuIGA8YT5gXG4gICAgbG93U3JjOiBudWxsLCAvLyBgPGltZz5gLiBVc2UgYSBgPHBpY3R1cmU+YFxuICAgIG1hcmdpbkhlaWdodDogbnVtYmVyLCAvLyBgPGJvZHk+YFxuICAgIG1hcmdpbldpZHRoOiBudW1iZXIsIC8vIGA8Ym9keT5gXG4gICAgbm9SZXNpemU6IGJvb2xlYW4sIC8vIGA8ZnJhbWU+YFxuICAgIG5vSHJlZjogYm9vbGVhbiwgLy8gYDxhcmVhPmAuIFVzZSBubyBocmVmIGluc3RlYWQgb2YgYW4gZXhwbGljaXQgYG5vaHJlZmBcbiAgICBub1NoYWRlOiBib29sZWFuLCAvLyBgPGhyPmAuIFVzZSBiYWNrZ3JvdW5kLWNvbG9yIGFuZCBoZWlnaHQgaW5zdGVhZCBvZiBib3JkZXJzXG4gICAgbm9XcmFwOiBib29sZWFuLCAvLyBgPHRkPmAgYW5kIGA8dGg+YFxuICAgIG9iamVjdDogbnVsbCwgLy8gYDxhcHBsZXQ+YFxuICAgIHByb2ZpbGU6IG51bGwsIC8vIGA8aGVhZD5gXG4gICAgcHJvbXB0OiBudWxsLCAvLyBgPGlzaW5kZXg+YFxuICAgIHJldjogbnVsbCwgLy8gYDxsaW5rPmBcbiAgICByaWdodE1hcmdpbjogbnVtYmVyLCAvLyBgPGJvZHk+YFxuICAgIHJ1bGVzOiBudWxsLCAvLyBgPHRhYmxlPmBcbiAgICBzY2hlbWU6IG51bGwsIC8vIGA8bWV0YT5gXG4gICAgc2Nyb2xsaW5nOiBib29sZWFuaXNoLCAvLyBgPGZyYW1lPmAuIFVzZSBvdmVyZmxvdyBpbiB0aGUgY2hpbGQgY29udGV4dFxuICAgIHN0YW5kYnk6IG51bGwsIC8vIGA8b2JqZWN0PmBcbiAgICBzdW1tYXJ5OiBudWxsLCAvLyBgPHRhYmxlPmBcbiAgICB0ZXh0OiBudWxsLCAvLyBgPGJvZHk+YC4gVXNlIENTUyBgY29sb3JgIGluc3RlYWRcbiAgICB0b3BNYXJnaW46IG51bWJlciwgLy8gYDxib2R5PmBcbiAgICB2YWx1ZVR5cGU6IG51bGwsIC8vIGA8cGFyYW0+YFxuICAgIHZlcnNpb246IG51bGwsIC8vIGA8aHRtbD5gLiBVc2UgYSBkb2N0eXBlLlxuICAgIHZBbGlnbjogbnVsbCwgLy8gU2V2ZXJhbC4gVXNlIENTUyBgdmVydGljYWwtYWxpZ25gIGluc3RlYWRcbiAgICB2TGluazogbnVsbCwgLy8gYDxib2R5PmAuIFVzZSBDU1MgYGE6dmlzaXRlZCB7Y29sb3J9YCBpbnN0ZWFkXG4gICAgdlNwYWNlOiBudW1iZXIsIC8vIGA8aW1nPmAgYW5kIGA8b2JqZWN0PmBcblxuICAgIC8vIE5vbi1zdGFuZGFyZCBQcm9wZXJ0aWVzLlxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiBudWxsLFxuICAgIGF1dG9Db3JyZWN0OiBudWxsLFxuICAgIGF1dG9TYXZlOiBudWxsLFxuICAgIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlOiBib29sZWFuLFxuICAgIGRpc2FibGVSZW1vdGVQbGF5YmFjazogYm9vbGVhbixcbiAgICBwcmVmaXg6IG51bGwsXG4gICAgcHJvcGVydHk6IG51bGwsXG4gICAgcmVzdWx0czogbnVtYmVyLFxuICAgIHNlY3VyaXR5OiBudWxsLFxuICAgIHVuc2VsZWN0YWJsZTogbnVsbFxuICB9XG59KVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBmaW5kID0gcmVxdWlyZSgncHJvcGVydHktaW5mb3JtYXRpb24vZmluZCcpXG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgncHJvcGVydHktaW5mb3JtYXRpb24vbm9ybWFsaXplJylcbnZhciBwYXJzZVNlbGVjdG9yID0gcmVxdWlyZSgnaGFzdC11dGlsLXBhcnNlLXNlbGVjdG9yJylcbnZhciBzcGFjZXMgPSByZXF1aXJlKCdzcGFjZS1zZXBhcmF0ZWQtdG9rZW5zJykucGFyc2VcbnZhciBjb21tYXMgPSByZXF1aXJlKCdjb21tYS1zZXBhcmF0ZWQtdG9rZW5zJykucGFyc2VcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG5mdW5jdGlvbiBmYWN0b3J5KHNjaGVtYSwgZGVmYXVsdFRhZ05hbWUsIGNhc2VTZW5zaXRpdmUpIHtcbiAgdmFyIGFkanVzdCA9IGNhc2VTZW5zaXRpdmUgPyBjcmVhdGVBZGp1c3RNYXAoY2FzZVNlbnNpdGl2ZSkgOiBudWxsXG5cbiAgcmV0dXJuIGhcblxuICAvLyBIeXBlcnNjcmlwdCBjb21wYXRpYmxlIERTTCBmb3IgY3JlYXRpbmcgdmlydHVhbCBoYXN0IHRyZWVzLlxuICBmdW5jdGlvbiBoKHNlbGVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIG5vZGUgPSBwYXJzZVNlbGVjdG9yKHNlbGVjdG9yLCBkZWZhdWx0VGFnTmFtZSlcbiAgICB2YXIgY2hpbGRyZW4gPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpXG4gICAgdmFyIG5hbWUgPSBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxuICAgIHZhciBwcm9wZXJ0eVxuXG4gICAgbm9kZS50YWdOYW1lID0gYWRqdXN0ICYmIG93bi5jYWxsKGFkanVzdCwgbmFtZSkgPyBhZGp1c3RbbmFtZV0gOiBuYW1lXG5cbiAgICBpZiAocHJvcGVydGllcyAmJiBpc0NoaWxkcmVuKHByb3BlcnRpZXMsIG5vZGUpKSB7XG4gICAgICBjaGlsZHJlbi51bnNoaWZ0KHByb3BlcnRpZXMpXG4gICAgICBwcm9wZXJ0aWVzID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICBmb3IgKHByb3BlcnR5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgICAgYWRkUHJvcGVydHkobm9kZS5wcm9wZXJ0aWVzLCBwcm9wZXJ0eSwgcHJvcGVydGllc1twcm9wZXJ0eV0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgYWRkQ2hpbGQobm9kZS5jaGlsZHJlbiwgY2hpbGRyZW4pXG5cbiAgICBpZiAobm9kZS50YWdOYW1lID09PSAndGVtcGxhdGUnKSB7XG4gICAgICBub2RlLmNvbnRlbnQgPSB7dHlwZTogJ3Jvb3QnLCBjaGlsZHJlbjogbm9kZS5jaGlsZHJlbn1cbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBbXVxuICAgIH1cblxuICAgIHJldHVybiBub2RlXG4gIH1cblxuICBmdW5jdGlvbiBhZGRQcm9wZXJ0eShwcm9wZXJ0aWVzLCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIGluZm9cbiAgICB2YXIgcHJvcGVydHlcbiAgICB2YXIgcmVzdWx0XG5cbiAgICAvLyBJZ25vcmUgbnVsbHkgYW5kIE5hTiB2YWx1ZXMuXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpbmZvID0gZmluZChzY2hlbWEsIGtleSlcbiAgICBwcm9wZXJ0eSA9IGluZm8ucHJvcGVydHlcbiAgICByZXN1bHQgPSB2YWx1ZVxuXG4gICAgLy8gSGFuZGxlIGxpc3QgdmFsdWVzLlxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKGluZm8uc3BhY2VTZXBhcmF0ZWQpIHtcbiAgICAgICAgcmVzdWx0ID0gc3BhY2VzKHJlc3VsdClcbiAgICAgIH0gZWxzZSBpZiAoaW5mby5jb21tYVNlcGFyYXRlZCkge1xuICAgICAgICByZXN1bHQgPSBjb21tYXMocmVzdWx0KVxuICAgICAgfSBlbHNlIGlmIChpbmZvLmNvbW1hT3JTcGFjZVNlcGFyYXRlZCkge1xuICAgICAgICByZXN1bHQgPSBzcGFjZXMoY29tbWFzKHJlc3VsdCkuam9pbignICcpKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFjY2VwdCBgb2JqZWN0YCBvbiBzdHlsZS5cbiAgICBpZiAocHJvcGVydHkgPT09ICdzdHlsZScgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgcmVzdWx0ID0gc3R5bGUocmVzdWx0KVxuICAgIH1cblxuICAgIC8vIENsYXNzLW5hbWVzICh3aGljaCBjYW4gYmUgYWRkZWQgYm90aCBvbiB0aGUgYHNlbGVjdG9yYCBhbmQgaGVyZSkuXG4gICAgaWYgKHByb3BlcnR5ID09PSAnY2xhc3NOYW1lJyAmJiBwcm9wZXJ0aWVzLmNsYXNzTmFtZSkge1xuICAgICAgcmVzdWx0ID0gcHJvcGVydGllcy5jbGFzc05hbWUuY29uY2F0KHJlc3VsdClcbiAgICB9XG5cbiAgICBwcm9wZXJ0aWVzW3Byb3BlcnR5XSA9IHBhcnNlUHJpbWl0aXZlcyhpbmZvLCBwcm9wZXJ0eSwgcmVzdWx0KVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzQ2hpbGRyZW4odmFsdWUsIG5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgJ2xlbmd0aCcgaW4gdmFsdWUgfHxcbiAgICBpc05vZGUobm9kZS50YWdOYW1lLCB2YWx1ZSlcbiAgKVxufVxuXG5mdW5jdGlvbiBpc05vZGUodGFnTmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB2YWx1ZS50eXBlXG5cbiAgaWYgKHRhZ05hbWUgPT09ICdpbnB1dCcgfHwgIXR5cGUgfHwgdHlwZW9mIHR5cGUgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlLmNoaWxkcmVuID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiB2YWx1ZS5jaGlsZHJlbikge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpXG5cbiAgaWYgKHRhZ05hbWUgPT09ICdidXR0b24nKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGUgIT09ICdtZW51JyAmJlxuICAgICAgdHlwZSAhPT0gJ3N1Ym1pdCcgJiZcbiAgICAgIHR5cGUgIT09ICdyZXNldCcgJiZcbiAgICAgIHR5cGUgIT09ICdidXR0b24nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuICd2YWx1ZScgaW4gdmFsdWVcbn1cblxuZnVuY3Rpb24gYWRkQ2hpbGQobm9kZXMsIHZhbHVlKSB7XG4gIHZhciBpbmRleFxuICB2YXIgbGVuZ3RoXG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIG5vZGVzLnB1c2goe3R5cGU6ICd0ZXh0JywgdmFsdWU6IFN0cmluZyh2YWx1ZSl9KVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gdmFsdWUpIHtcbiAgICBpbmRleCA9IC0xXG4gICAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWRkQ2hpbGQobm9kZXMsIHZhbHVlW2luZGV4XSlcbiAgICB9XG5cbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8ICEoJ3R5cGUnIGluIHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9kZSwgbm9kZXMsIG9yIHN0cmluZywgZ290IGAnICsgdmFsdWUgKyAnYCcpXG4gIH1cblxuICBub2Rlcy5wdXNoKHZhbHVlKVxufVxuXG4vLyBQYXJzZSBhIChsaXN0IG9mKSBwcmltaXRpdmVzLlxuZnVuY3Rpb24gcGFyc2VQcmltaXRpdmVzKGluZm8sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpbmRleFxuICB2YXIgbGVuZ3RoXG4gIHZhciByZXN1bHRcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCAhKCdsZW5ndGgnIGluIHZhbHVlKSkge1xuICAgIHJldHVybiBwYXJzZVByaW1pdGl2ZShpbmZvLCBuYW1lLCB2YWx1ZSlcbiAgfVxuXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICBpbmRleCA9IC0xXG4gIHJlc3VsdCA9IFtdXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gcGFyc2VQcmltaXRpdmUoaW5mbywgbmFtZSwgdmFsdWVbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vLyBQYXJzZSBhIHNpbmdsZSBwcmltaXRpdmVzLlxuZnVuY3Rpb24gcGFyc2VQcmltaXRpdmUoaW5mbywgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IHZhbHVlXG5cbiAgaWYgKGluZm8ubnVtYmVyIHx8IGluZm8ucG9zaXRpdmVOdW1iZXIpIHtcbiAgICBpZiAoIWlzTmFOKHJlc3VsdCkgJiYgcmVzdWx0ICE9PSAnJykge1xuICAgICAgcmVzdWx0ID0gTnVtYmVyKHJlc3VsdClcbiAgICB9XG4gIH0gZWxzZSBpZiAoaW5mby5ib29sZWFuIHx8IGluZm8ub3ZlcmxvYWRlZEJvb2xlYW4pIHtcbiAgICAvLyBBY2NlcHQgYGJvb2xlYW5gIGFuZCBgc3RyaW5nYC5cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyAmJlxuICAgICAgKHJlc3VsdCA9PT0gJycgfHwgbm9ybWFsaXplKHZhbHVlKSA9PT0gbm9ybWFsaXplKG5hbWUpKVxuICAgICkge1xuICAgICAgcmVzdWx0ID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gc3R5bGUodmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdXG4gIHZhciBrZXlcblxuICBmb3IgKGtleSBpbiB2YWx1ZSkge1xuICAgIHJlc3VsdC5wdXNoKFtrZXksIHZhbHVlW2tleV1dLmpvaW4oJzogJykpXG4gIH1cblxuICByZXR1cm4gcmVzdWx0LmpvaW4oJzsgJylcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWRqdXN0TWFwKHZhbHVlcykge1xuICB2YXIgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgcmVzdWx0ID0ge31cbiAgdmFyIHZhbHVlXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YWx1ZSA9IHZhbHVlc1tpbmRleF1cbiAgICByZXN1bHRbdmFsdWUudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBub3JtYWxpemUgPSByZXF1aXJlKCcuL25vcm1hbGl6ZScpXG52YXIgRGVmaW5lZEluZm8gPSByZXF1aXJlKCcuL2xpYi91dGlsL2RlZmluZWQtaW5mbycpXG52YXIgSW5mbyA9IHJlcXVpcmUoJy4vbGliL3V0aWwvaW5mbycpXG5cbnZhciBkYXRhID0gJ2RhdGEnXG5cbm1vZHVsZS5leHBvcnRzID0gZmluZFxuXG52YXIgdmFsaWQgPSAvXmRhdGFbLVxcdy46XSskL2lcbnZhciBkYXNoID0gLy1bYS16XS9nXG52YXIgY2FwID0gL1tBLVpdL2dcblxuZnVuY3Rpb24gZmluZChzY2hlbWEsIHZhbHVlKSB7XG4gIHZhciBub3JtYWwgPSBub3JtYWxpemUodmFsdWUpXG4gIHZhciBwcm9wID0gdmFsdWVcbiAgdmFyIFR5cGUgPSBJbmZvXG5cbiAgaWYgKG5vcm1hbCBpbiBzY2hlbWEubm9ybWFsKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5wcm9wZXJ0eVtzY2hlbWEubm9ybWFsW25vcm1hbF1dXG4gIH1cblxuICBpZiAobm9ybWFsLmxlbmd0aCA+IDQgJiYgbm9ybWFsLnNsaWNlKDAsIDQpID09PSBkYXRhICYmIHZhbGlkLnRlc3QodmFsdWUpKSB7XG4gICAgLy8gQXR0cmlidXRlIG9yIHByb3BlcnR5LlxuICAgIGlmICh2YWx1ZS5jaGFyQXQoNCkgPT09ICctJykge1xuICAgICAgcHJvcCA9IGRhdGFzZXRUb1Byb3BlcnR5KHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGRhdGFzZXRUb0F0dHJpYnV0ZSh2YWx1ZSlcbiAgICB9XG5cbiAgICBUeXBlID0gRGVmaW5lZEluZm9cbiAgfVxuXG4gIHJldHVybiBuZXcgVHlwZShwcm9wLCB2YWx1ZSlcbn1cblxuZnVuY3Rpb24gZGF0YXNldFRvUHJvcGVydHkoYXR0cmlidXRlKSB7XG4gIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZS5zbGljZSg1KS5yZXBsYWNlKGRhc2gsIGNhbWVsY2FzZSlcbiAgcmV0dXJuIGRhdGEgKyB2YWx1ZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbHVlLnNsaWNlKDEpXG59XG5cbmZ1bmN0aW9uIGRhdGFzZXRUb0F0dHJpYnV0ZShwcm9wZXJ0eSkge1xuICB2YXIgdmFsdWUgPSBwcm9wZXJ0eS5zbGljZSg0KVxuXG4gIGlmIChkYXNoLnRlc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5XG4gIH1cblxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoY2FwLCBrZWJhYilcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSAnLScpIHtcbiAgICB2YWx1ZSA9ICctJyArIHZhbHVlXG4gIH1cblxuICByZXR1cm4gZGF0YSArIHZhbHVlXG59XG5cbmZ1bmN0aW9uIGtlYmFiKCQwKSB7XG4gIHJldHVybiAnLScgKyAkMC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGNhbWVsY2FzZSgkMCkge1xuICByZXR1cm4gJDAuY2hhckF0KDEpLnRvVXBwZXJDYXNlKClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlXG5cbnZhciBudW1iZXJTaWduID0gMzUgLy8gICcjJ1xudmFyIGRvdCA9IDQ2IC8vICAnLidcblxuLy8gQ3JlYXRlIGEgaGFzdCBlbGVtZW50IGZyb20gYSBzaW1wbGUgQ1NTIHNlbGVjdG9yLlxuZnVuY3Rpb24gcGFyc2Uoc2VsZWN0b3IsIGRlZmF1bHRUYWdOYW1lKSB7XG4gIHZhciB2YWx1ZSA9IHNlbGVjdG9yIHx8ICcnXG4gIHZhciBuYW1lID0gZGVmYXVsdFRhZ05hbWUgfHwgJ2RpdidcbiAgdmFyIHByb3BzID0ge31cbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICB2YXIgY2xhc3NOYW1lXG4gIHZhciB0eXBlXG4gIHZhciBjb2RlXG4gIHZhciBzdWJ2YWx1ZVxuICB2YXIgbGFzdEluZGV4XG5cbiAgd2hpbGUgKCsraW5kZXggPD0gbGVuZ3RoKSB7XG4gICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpXG5cbiAgICBpZiAoIWNvZGUgfHwgY29kZSA9PT0gZG90IHx8IGNvZGUgPT09IG51bWJlclNpZ24pIHtcbiAgICAgIHN1YnZhbHVlID0gdmFsdWUuc2xpY2UobGFzdEluZGV4LCBpbmRleClcblxuICAgICAgaWYgKHN1YnZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSBkb3QpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWRlcHRoXG4gICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY2xhc3NOYW1lLnB1c2goc3VidmFsdWUpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IFtzdWJ2YWx1ZV1cbiAgICAgICAgICAgIHByb3BzLmNsYXNzTmFtZSA9IGNsYXNzTmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBudW1iZXJTaWduKSB7XG4gICAgICAgICAgcHJvcHMuaWQgPSBzdWJ2YWx1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5hbWUgPSBzdWJ2YWx1ZVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMVxuICAgICAgdHlwZSA9IGNvZGVcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICB0YWdOYW1lOiBuYW1lLFxuICAgIHByb3BlcnRpZXM6IHByb3BzLFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuXG52YXIgZW1wdHkgPSAnJ1xudmFyIHNwYWNlID0gJyAnXG52YXIgd2hpdGVTcGFjZSA9IC9bIFxcdFxcblxcclxcZl0rL2dcblxuZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAgdmFyIGlucHV0ID0gU3RyaW5nKHZhbHVlIHx8IGVtcHR5KS50cmltKClcbiAgcmV0dXJuIGlucHV0ID09PSBlbXB0eSA/IFtdIDogaW5wdXQuc3BsaXQod2hpdGVTcGFjZSlcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlcykge1xuICByZXR1cm4gdmFsdWVzLmpvaW4oc3BhY2UpLnRyaW0oKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZVxuZXhwb3J0cy5zdHJpbmdpZnkgPSBzdHJpbmdpZnlcblxudmFyIGNvbW1hID0gJywnXG52YXIgc3BhY2UgPSAnICdcbnZhciBlbXB0eSA9ICcnXG5cbi8vIFBhcnNlIGNvbW1hLXNlcGFyYXRlZCB0b2tlbnMgdG8gYW4gYXJyYXkuXG5mdW5jdGlvbiBwYXJzZSh2YWx1ZSkge1xuICB2YXIgdmFsdWVzID0gW11cbiAgdmFyIGlucHV0ID0gU3RyaW5nKHZhbHVlIHx8IGVtcHR5KVxuICB2YXIgaW5kZXggPSBpbnB1dC5pbmRleE9mKGNvbW1hKVxuICB2YXIgbGFzdEluZGV4ID0gMFxuICB2YXIgZW5kID0gZmFsc2VcbiAgdmFyIHZhbFxuXG4gIHdoaWxlICghZW5kKSB7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaW5kZXggPSBpbnB1dC5sZW5ndGhcbiAgICAgIGVuZCA9IHRydWVcbiAgICB9XG5cbiAgICB2YWwgPSBpbnB1dC5zbGljZShsYXN0SW5kZXgsIGluZGV4KS50cmltKClcblxuICAgIGlmICh2YWwgfHwgIWVuZCkge1xuICAgICAgdmFsdWVzLnB1c2godmFsKVxuICAgIH1cblxuICAgIGxhc3RJbmRleCA9IGluZGV4ICsgMVxuICAgIGluZGV4ID0gaW5wdXQuaW5kZXhPZihjb21tYSwgbGFzdEluZGV4KVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlc1xufVxuXG4vLyBDb21waWxlIGFuIGFycmF5IHRvIGNvbW1hLXNlcGFyYXRlZCB0b2tlbnMuXG4vLyBgb3B0aW9ucy5wYWRMZWZ0YCAoZGVmYXVsdDogYHRydWVgKSBwYWRzIGEgc3BhY2UgbGVmdCBvZiBlYWNoIHRva2VuLCBhbmRcbi8vIGBvcHRpb25zLnBhZFJpZ2h0YCAoZGVmYXVsdDogYGZhbHNlYCkgcGFkcyBhIHNwYWNlIHRvIHRoZSByaWdodCBvZiBlYWNoIHRva2VuLlxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlcywgb3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG4gIHZhciBsZWZ0ID0gc2V0dGluZ3MucGFkTGVmdCA9PT0gZmFsc2UgPyBlbXB0eSA6IHNwYWNlXG4gIHZhciByaWdodCA9IHNldHRpbmdzLnBhZFJpZ2h0ID8gc3BhY2UgOiBlbXB0eVxuXG4gIC8vIEVuc3VyZSB0aGUgbGFzdCBlbXB0eSBlbnRyeSBpcyBzZWVuLlxuICBpZiAodmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXSA9PT0gZW1wdHkpIHtcbiAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KGVtcHR5KVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlcy5qb2luKHJpZ2h0ICsgY29tbWEgKyBsZWZ0KS50cmltKClcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhleGFkZWNpbWFsXG5cbi8vIENoZWNrIGlmIHRoZSBnaXZlbiBjaGFyYWN0ZXIgY29kZSwgb3IgdGhlIGNoYXJhY3RlciBjb2RlIGF0IHRoZSBmaXJzdFxuLy8gY2hhcmFjdGVyLCBpcyBoZXhhZGVjaW1hbC5cbmZ1bmN0aW9uIGhleGFkZWNpbWFsKGNoYXJhY3Rlcikge1xuICB2YXIgY29kZSA9IHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdzdHJpbmcnID8gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCkgOiBjaGFyYWN0ZXJcblxuICByZXR1cm4gKFxuICAgIChjb2RlID49IDk3IC8qIGEgKi8gJiYgY29kZSA8PSAxMDIpIC8qIHogKi8gfHxcbiAgICAoY29kZSA+PSA2NSAvKiBBICovICYmIGNvZGUgPD0gNzApIC8qIFogKi8gfHxcbiAgICAoY29kZSA+PSA0OCAvKiBBICovICYmIGNvZGUgPD0gNTcpIC8qIFogKi9cbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBhbHBoYWJldGljYWwgPSByZXF1aXJlKCdpcy1hbHBoYWJldGljYWwnKVxudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJylcblxubW9kdWxlLmV4cG9ydHMgPSBhbHBoYW51bWVyaWNhbFxuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYWxwaGFudW1lcmljYWwuXG5mdW5jdGlvbiBhbHBoYW51bWVyaWNhbChjaGFyYWN0ZXIpIHtcbiAgcmV0dXJuIGFscGhhYmV0aWNhbChjaGFyYWN0ZXIpIHx8IGRlY2ltYWwoY2hhcmFjdGVyKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBjaGFyYWN0ZXJFbnRpdGllcyA9IHJlcXVpcmUoJ2NoYXJhY3Rlci1lbnRpdGllcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZGVjb2RlRW50aXR5XG5cbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG5mdW5jdGlvbiBkZWNvZGVFbnRpdHkoY2hhcmFjdGVycykge1xuICByZXR1cm4gb3duLmNhbGwoY2hhcmFjdGVyRW50aXRpZXMsIGNoYXJhY3RlcnMpXG4gICAgPyBjaGFyYWN0ZXJFbnRpdGllc1tjaGFyYWN0ZXJzXVxuICAgIDogZmFsc2Vcbn1cbiIsInZhciBfc2VsZiA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJylcblx0PyB3aW5kb3cgICAvLyBpZiBpbiBicm93c2VyXG5cdDogKFxuXHRcdCh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSlcblx0XHQ/IHNlbGYgLy8gaWYgaW4gd29ya2VyXG5cdFx0OiB7fSAgIC8vIGlmIGluIG5vZGUganNcblx0KTtcblxuLyoqXG4gKiBQcmlzbTogTGlnaHR3ZWlnaHQsIHJvYnVzdCwgZWxlZ2FudCBzeW50YXggaGlnaGxpZ2h0aW5nXG4gKiBNSVQgbGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocC9cbiAqIEBhdXRob3IgTGVhIFZlcm91IGh0dHA6Ly9sZWEudmVyb3UubWVcbiAqL1xuXG52YXIgUHJpc20gPSAoZnVuY3Rpb24gKF9zZWxmKXtcblxuLy8gUHJpdmF0ZSBoZWxwZXIgdmFyc1xudmFyIGxhbmcgPSAvXFxibGFuZyg/OnVhZ2UpPy0oW1xcdy1dKylcXGIvaTtcbnZhciB1bmlxdWVJZCA9IDA7XG5cbnZhciBfID0ge1xuXHRtYW51YWw6IF9zZWxmLlByaXNtICYmIF9zZWxmLlByaXNtLm1hbnVhbCxcblx0ZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyOiBfc2VsZi5QcmlzbSAmJiBfc2VsZi5QcmlzbS5kaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIsXG5cdHV0aWw6IHtcblx0XHRlbmNvZGU6IGZ1bmN0aW9uICh0b2tlbnMpIHtcblx0XHRcdGlmICh0b2tlbnMgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRyZXR1cm4gbmV3IFRva2VuKHRva2Vucy50eXBlLCBfLnV0aWwuZW5jb2RlKHRva2Vucy5jb250ZW50KSwgdG9rZW5zLmFsaWFzKTtcblx0XHRcdH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh0b2tlbnMpKSB7XG5cdFx0XHRcdHJldHVybiB0b2tlbnMubWFwKF8udXRpbC5lbmNvZGUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRva2Vucy5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC9cXHUwMGEwL2csICcgJyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHR5cGU6IGZ1bmN0aW9uIChvKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcblx0XHR9LFxuXG5cdFx0b2JqSWQ6IGZ1bmN0aW9uIChvYmopIHtcblx0XHRcdGlmICghb2JqWydfX2lkJ10pIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ19faWQnLCB7IHZhbHVlOiArK3VuaXF1ZUlkIH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG9ialsnX19pZCddO1xuXHRcdH0sXG5cblx0XHQvLyBEZWVwIGNsb25lIGEgbGFuZ3VhZ2UgZGVmaW5pdGlvbiAoZS5nLiB0byBleHRlbmQgaXQpXG5cdFx0Y2xvbmU6IGZ1bmN0aW9uIGRlZXBDbG9uZShvLCB2aXNpdGVkKSB7XG5cdFx0XHR2YXIgY2xvbmUsIGlkLCB0eXBlID0gXy51dGlsLnR5cGUobyk7XG5cdFx0XHR2aXNpdGVkID0gdmlzaXRlZCB8fCB7fTtcblxuXHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ09iamVjdCc6XG5cdFx0XHRcdFx0aWQgPSBfLnV0aWwub2JqSWQobyk7XG5cdFx0XHRcdFx0aWYgKHZpc2l0ZWRbaWRdKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdmlzaXRlZFtpZF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0dmlzaXRlZFtpZF0gPSBjbG9uZTtcblxuXHRcdFx0XHRcdGZvciAodmFyIGtleSBpbiBvKSB7XG5cdFx0XHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRcdGNsb25lW2tleV0gPSBkZWVwQ2xvbmUob1trZXldLCB2aXNpdGVkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gY2xvbmU7XG5cblx0XHRcdFx0Y2FzZSAnQXJyYXknOlxuXHRcdFx0XHRcdGlkID0gXy51dGlsLm9iaklkKG8pO1xuXHRcdFx0XHRcdGlmICh2aXNpdGVkW2lkXSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHZpc2l0ZWRbaWRdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdHZpc2l0ZWRbaWRdID0gY2xvbmU7XG5cblx0XHRcdFx0XHRvLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcblx0XHRcdFx0XHRcdGNsb25lW2ldID0gZGVlcENsb25lKHYsIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGNsb25lO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdGxhbmd1YWdlczoge1xuXHRcdGV4dGVuZDogZnVuY3Rpb24gKGlkLCByZWRlZikge1xuXHRcdFx0dmFyIGxhbmcgPSBfLnV0aWwuY2xvbmUoXy5sYW5ndWFnZXNbaWRdKTtcblxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHJlZGVmKSB7XG5cdFx0XHRcdGxhbmdba2V5XSA9IHJlZGVmW2tleV07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsYW5nO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnNlcnQgYSB0b2tlbiBiZWZvcmUgYW5vdGhlciB0b2tlbiBpbiBhIGxhbmd1YWdlIGxpdGVyYWxcblx0XHQgKiBBcyB0aGlzIG5lZWRzIHRvIHJlY3JlYXRlIHRoZSBvYmplY3QgKHdlIGNhbm5vdCBhY3R1YWxseSBpbnNlcnQgYmVmb3JlIGtleXMgaW4gb2JqZWN0IGxpdGVyYWxzKSxcblx0XHQgKiB3ZSBjYW5ub3QganVzdCBwcm92aWRlIGFuIG9iamVjdCwgd2UgbmVlZCBhbiBvYmplY3QgYW5kIGEga2V5LlxuXHRcdCAqIEBwYXJhbSBpbnNpZGUgVGhlIGtleSAob3IgbGFuZ3VhZ2UgaWQpIG9mIHRoZSBwYXJlbnRcblx0XHQgKiBAcGFyYW0gYmVmb3JlIFRoZSBrZXkgdG8gaW5zZXJ0IGJlZm9yZS5cblx0XHQgKiBAcGFyYW0gaW5zZXJ0IE9iamVjdCB3aXRoIHRoZSBrZXkvdmFsdWUgcGFpcnMgdG8gaW5zZXJ0XG5cdFx0ICogQHBhcmFtIHJvb3QgVGhlIG9iamVjdCB0aGF0IGNvbnRhaW5zIGBpbnNpZGVgLiBJZiBlcXVhbCB0byBQcmlzbS5sYW5ndWFnZXMsIGl0IGNhbiBiZSBvbWl0dGVkLlxuXHRcdCAqL1xuXHRcdGluc2VydEJlZm9yZTogZnVuY3Rpb24gKGluc2lkZSwgYmVmb3JlLCBpbnNlcnQsIHJvb3QpIHtcblx0XHRcdHJvb3QgPSByb290IHx8IF8ubGFuZ3VhZ2VzO1xuXHRcdFx0dmFyIGdyYW1tYXIgPSByb290W2luc2lkZV07XG5cdFx0XHR2YXIgcmV0ID0ge307XG5cblx0XHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblx0XHRcdFx0aWYgKGdyYW1tYXIuaGFzT3duUHJvcGVydHkodG9rZW4pKSB7XG5cblx0XHRcdFx0XHRpZiAodG9rZW4gPT0gYmVmb3JlKSB7XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBuZXdUb2tlbiBpbiBpbnNlcnQpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGluc2VydC5oYXNPd25Qcm9wZXJ0eShuZXdUb2tlbikpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRbbmV3VG9rZW5dID0gaW5zZXJ0W25ld1Rva2VuXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERvIG5vdCBpbnNlcnQgdG9rZW4gd2hpY2ggYWxzbyBvY2N1ciBpbiBpbnNlcnQuIFNlZSAjMTUyNVxuXHRcdFx0XHRcdGlmICghaW5zZXJ0Lmhhc093blByb3BlcnR5KHRva2VuKSkge1xuXHRcdFx0XHRcdFx0cmV0W3Rva2VuXSA9IGdyYW1tYXJbdG9rZW5dO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgb2xkID0gcm9vdFtpbnNpZGVdO1xuXHRcdFx0cm9vdFtpbnNpZGVdID0gcmV0O1xuXG5cdFx0XHQvLyBVcGRhdGUgcmVmZXJlbmNlcyBpbiBvdGhlciBsYW5ndWFnZSBkZWZpbml0aW9uc1xuXHRcdFx0Xy5sYW5ndWFnZXMuREZTKF8ubGFuZ3VhZ2VzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSA9PT0gb2xkICYmIGtleSAhPSBpbnNpZGUpIHtcblx0XHRcdFx0XHR0aGlzW2tleV0gPSByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0sXG5cblx0XHQvLyBUcmF2ZXJzZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gd2l0aCBEZXB0aCBGaXJzdCBTZWFyY2hcblx0XHRERlM6IGZ1bmN0aW9uIERGUyhvLCBjYWxsYmFjaywgdHlwZSwgdmlzaXRlZCkge1xuXHRcdFx0dmlzaXRlZCA9IHZpc2l0ZWQgfHwge307XG5cblx0XHRcdHZhciBvYmpJZCA9IF8udXRpbC5vYmpJZDtcblxuXHRcdFx0Zm9yICh2YXIgaSBpbiBvKSB7XG5cdFx0XHRcdGlmIChvLmhhc093blByb3BlcnR5KGkpKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChvLCBpLCBvW2ldLCB0eXBlIHx8IGkpO1xuXG5cdFx0XHRcdFx0dmFyIHByb3BlcnR5ID0gb1tpXSxcblx0XHRcdFx0XHQgICAgcHJvcGVydHlUeXBlID0gXy51dGlsLnR5cGUocHJvcGVydHkpO1xuXG5cdFx0XHRcdFx0aWYgKHByb3BlcnR5VHlwZSA9PT0gJ09iamVjdCcgJiYgIXZpc2l0ZWRbb2JqSWQocHJvcGVydHkpXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtvYmpJZChwcm9wZXJ0eSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdERGUyhwcm9wZXJ0eSwgY2FsbGJhY2ssIG51bGwsIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChwcm9wZXJ0eVR5cGUgPT09ICdBcnJheScgJiYgIXZpc2l0ZWRbb2JqSWQocHJvcGVydHkpXSkge1xuXHRcdFx0XHRcdFx0dmlzaXRlZFtvYmpJZChwcm9wZXJ0eSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdERGUyhwcm9wZXJ0eSwgY2FsbGJhY2ssIGksIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0cGx1Z2luczoge30sXG5cblx0aGlnaGxpZ2h0QWxsOiBmdW5jdGlvbihhc3luYywgY2FsbGJhY2spIHtcblx0XHRfLmhpZ2hsaWdodEFsbFVuZGVyKGRvY3VtZW50LCBhc3luYywgY2FsbGJhY2spO1xuXHR9LFxuXG5cdGhpZ2hsaWdodEFsbFVuZGVyOiBmdW5jdGlvbihjb250YWluZXIsIGFzeW5jLCBjYWxsYmFjaykge1xuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRjYWxsYmFjazogY2FsbGJhY2ssXG5cdFx0XHRzZWxlY3RvcjogJ2NvZGVbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdLCBbY2xhc3MqPVwibGFuZ3VhZ2UtXCJdIGNvZGUsIGNvZGVbY2xhc3MqPVwibGFuZy1cIl0sIFtjbGFzcyo9XCJsYW5nLVwiXSBjb2RlJ1xuXHRcdH07XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWhpZ2hsaWdodGFsbCcsIGVudik7XG5cblx0XHR2YXIgZWxlbWVudHMgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChlbnYuc2VsZWN0b3IpO1xuXG5cdFx0Zm9yICh2YXIgaT0wLCBlbGVtZW50OyBlbGVtZW50ID0gZWxlbWVudHNbaSsrXTspIHtcblx0XHRcdF8uaGlnaGxpZ2h0RWxlbWVudChlbGVtZW50LCBhc3luYyA9PT0gdHJ1ZSwgZW52LmNhbGxiYWNrKTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0RWxlbWVudDogZnVuY3Rpb24oZWxlbWVudCwgYXN5bmMsIGNhbGxiYWNrKSB7XG5cdFx0Ly8gRmluZCBsYW5ndWFnZVxuXHRcdHZhciBsYW5ndWFnZSA9ICdub25lJywgZ3JhbW1hciwgcGFyZW50ID0gZWxlbWVudDtcblxuXHRcdHdoaWxlIChwYXJlbnQgJiYgIWxhbmcudGVzdChwYXJlbnQuY2xhc3NOYW1lKSkge1xuXHRcdFx0cGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0bGFuZ3VhZ2UgPSAocGFyZW50LmNsYXNzTmFtZS5tYXRjaChsYW5nKSB8fCBbLCdub25lJ10pWzFdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRncmFtbWFyID0gXy5sYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuXHRcdH1cblxuXHRcdC8vIFNldCBsYW5ndWFnZSBvbiB0aGUgZWxlbWVudCwgaWYgbm90IHByZXNlbnRcblx0XHRlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXG5cdFx0aWYgKGVsZW1lbnQucGFyZW50Tm9kZSkge1xuXHRcdFx0Ly8gU2V0IGxhbmd1YWdlIG9uIHRoZSBwYXJlbnQsIGZvciBzdHlsaW5nXG5cdFx0XHRwYXJlbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICgvcHJlL2kudGVzdChwYXJlbnQubm9kZU5hbWUpKSB7XG5cdFx0XHRcdHBhcmVudC5jbGFzc05hbWUgPSBwYXJlbnQuY2xhc3NOYW1lLnJlcGxhY2UobGFuZywgJycpLnJlcGxhY2UoL1xccysvZywgJyAnKSArICcgbGFuZ3VhZ2UtJyArIGxhbmd1YWdlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBjb2RlID0gZWxlbWVudC50ZXh0Q29udGVudDtcblxuXHRcdHZhciBlbnYgPSB7XG5cdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlLFxuXHRcdFx0Z3JhbW1hcjogZ3JhbW1hcixcblx0XHRcdGNvZGU6IGNvZGVcblx0XHR9O1xuXG5cdFx0dmFyIGluc2VydEhpZ2hsaWdodGVkQ29kZSA9IGZ1bmN0aW9uIChoaWdobGlnaHRlZENvZGUpIHtcblx0XHRcdGVudi5oaWdobGlnaHRlZENvZGUgPSBoaWdobGlnaHRlZENvZGU7XG5cblx0XHRcdF8uaG9va3MucnVuKCdiZWZvcmUtaW5zZXJ0JywgZW52KTtcblxuXHRcdFx0ZW52LmVsZW1lbnQuaW5uZXJIVE1MID0gZW52LmhpZ2hsaWdodGVkQ29kZTtcblxuXHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLWhpZ2hsaWdodCcsIGVudik7XG5cdFx0XHRfLmhvb2tzLnJ1bignY29tcGxldGUnLCBlbnYpO1xuXHRcdFx0Y2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChlbnYuZWxlbWVudCk7XG5cdFx0fVxuXG5cdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS1zYW5pdHktY2hlY2snLCBlbnYpO1xuXG5cdFx0aWYgKCFlbnYuY29kZSkge1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2NvbXBsZXRlJywgZW52KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRfLmhvb2tzLnJ1bignYmVmb3JlLWhpZ2hsaWdodCcsIGVudik7XG5cblx0XHRpZiAoIWVudi5ncmFtbWFyKSB7XG5cdFx0XHRpbnNlcnRIaWdobGlnaHRlZENvZGUoXy51dGlsLmVuY29kZShlbnYuY29kZSkpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChhc3luYyAmJiBfc2VsZi5Xb3JrZXIpIHtcblx0XHRcdHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKF8uZmlsZW5hbWUpO1xuXG5cdFx0XHR3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZXZ0KSB7XG5cdFx0XHRcdGluc2VydEhpZ2hsaWdodGVkQ29kZShldnQuZGF0YSk7XG5cdFx0XHR9O1xuXG5cdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRsYW5ndWFnZTogZW52Lmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlOiBlbnYuY29kZSxcblx0XHRcdFx0aW1tZWRpYXRlQ2xvc2U6IHRydWVcblx0XHRcdH0pKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRpbnNlcnRIaWdobGlnaHRlZENvZGUoXy5oaWdobGlnaHQoZW52LmNvZGUsIGVudi5ncmFtbWFyLCBlbnYubGFuZ3VhZ2UpKTtcblx0XHR9XG5cdH0sXG5cblx0aGlnaGxpZ2h0OiBmdW5jdGlvbiAodGV4dCwgZ3JhbW1hciwgbGFuZ3VhZ2UpIHtcblx0XHR2YXIgZW52ID0ge1xuXHRcdFx0Y29kZTogdGV4dCxcblx0XHRcdGdyYW1tYXI6IGdyYW1tYXIsXG5cdFx0XHRsYW5ndWFnZTogbGFuZ3VhZ2Vcblx0XHR9O1xuXHRcdF8uaG9va3MucnVuKCdiZWZvcmUtdG9rZW5pemUnLCBlbnYpO1xuXHRcdGVudi50b2tlbnMgPSBfLnRva2VuaXplKGVudi5jb2RlLCBlbnYuZ3JhbW1hcik7XG5cdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLXRva2VuaXplJywgZW52KTtcblx0XHRyZXR1cm4gVG9rZW4uc3RyaW5naWZ5KF8udXRpbC5lbmNvZGUoZW52LnRva2VucyksIGVudi5sYW5ndWFnZSk7XG5cdH0sXG5cblx0bWF0Y2hHcmFtbWFyOiBmdW5jdGlvbiAodGV4dCwgc3RyYXJyLCBncmFtbWFyLCBpbmRleCwgc3RhcnRQb3MsIG9uZXNob3QsIHRhcmdldCkge1xuXHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblx0XHRcdGlmKCFncmFtbWFyLmhhc093blByb3BlcnR5KHRva2VuKSB8fCAhZ3JhbW1hclt0b2tlbl0pIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0b2tlbiA9PSB0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcGF0dGVybnMgPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdHBhdHRlcm5zID0gKF8udXRpbC50eXBlKHBhdHRlcm5zKSA9PT0gXCJBcnJheVwiKSA/IHBhdHRlcm5zIDogW3BhdHRlcm5zXTtcblxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBwYXR0ZXJucy5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR2YXIgcGF0dGVybiA9IHBhdHRlcm5zW2pdLFxuXHRcdFx0XHRcdGluc2lkZSA9IHBhdHRlcm4uaW5zaWRlLFxuXHRcdFx0XHRcdGxvb2tiZWhpbmQgPSAhIXBhdHRlcm4ubG9va2JlaGluZCxcblx0XHRcdFx0XHRncmVlZHkgPSAhIXBhdHRlcm4uZ3JlZWR5LFxuXHRcdFx0XHRcdGxvb2tiZWhpbmRMZW5ndGggPSAwLFxuXHRcdFx0XHRcdGFsaWFzID0gcGF0dGVybi5hbGlhcztcblxuXHRcdFx0XHRpZiAoZ3JlZWR5ICYmICFwYXR0ZXJuLnBhdHRlcm4uZ2xvYmFsKSB7XG5cdFx0XHRcdFx0Ly8gV2l0aG91dCB0aGUgZ2xvYmFsIGZsYWcsIGxhc3RJbmRleCB3b24ndCB3b3JrXG5cdFx0XHRcdFx0dmFyIGZsYWdzID0gcGF0dGVybi5wYXR0ZXJuLnRvU3RyaW5nKCkubWF0Y2goL1tpbXV5XSokLylbMF07XG5cdFx0XHRcdFx0cGF0dGVybi5wYXR0ZXJuID0gUmVnRXhwKHBhdHRlcm4ucGF0dGVybi5zb3VyY2UsIGZsYWdzICsgXCJnXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cGF0dGVybiA9IHBhdHRlcm4ucGF0dGVybiB8fCBwYXR0ZXJuO1xuXG5cdFx0XHRcdC8vIERvbuKAmXQgY2FjaGUgbGVuZ3RoIGFzIGl0IGNoYW5nZXMgZHVyaW5nIHRoZSBsb29wXG5cdFx0XHRcdGZvciAodmFyIGkgPSBpbmRleCwgcG9zID0gc3RhcnRQb3M7IGkgPCBzdHJhcnIubGVuZ3RoOyBwb3MgKz0gc3RyYXJyW2ldLmxlbmd0aCwgKytpKSB7XG5cblx0XHRcdFx0XHR2YXIgc3RyID0gc3RyYXJyW2ldO1xuXG5cdFx0XHRcdFx0aWYgKHN0cmFyci5sZW5ndGggPiB0ZXh0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Ly8gU29tZXRoaW5nIHdlbnQgdGVycmlibHkgd3JvbmcsIEFCT1JULCBBQk9SVCFcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoc3RyIGluc3RhbmNlb2YgVG9rZW4pIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChncmVlZHkgJiYgaSAhPSBzdHJhcnIubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0cGF0dGVybi5sYXN0SW5kZXggPSBwb3M7XG5cdFx0XHRcdFx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGV4dCk7XG5cdFx0XHRcdFx0XHRpZiAoIW1hdGNoKSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgZnJvbSA9IG1hdGNoLmluZGV4ICsgKGxvb2tiZWhpbmQgPyBtYXRjaFsxXS5sZW5ndGggOiAwKSxcblx0XHRcdFx0XHRcdCAgICB0byA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoLFxuXHRcdFx0XHRcdFx0ICAgIGsgPSBpLFxuXHRcdFx0XHRcdFx0ICAgIHAgPSBwb3M7XG5cblx0XHRcdFx0XHRcdGZvciAodmFyIGxlbiA9IHN0cmFyci5sZW5ndGg7IGsgPCBsZW4gJiYgKHAgPCB0byB8fCAoIXN0cmFycltrXS50eXBlICYmICFzdHJhcnJbayAtIDFdLmdyZWVkeSkpOyArK2spIHtcblx0XHRcdFx0XHRcdFx0cCArPSBzdHJhcnJba10ubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHQvLyBNb3ZlIHRoZSBpbmRleCBpIHRvIHRoZSBlbGVtZW50IGluIHN0cmFyciB0aGF0IGlzIGNsb3Nlc3QgdG8gZnJvbVxuXHRcdFx0XHRcdFx0XHRpZiAoZnJvbSA+PSBwKSB7XG5cdFx0XHRcdFx0XHRcdFx0KytpO1xuXHRcdFx0XHRcdFx0XHRcdHBvcyA9IHA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSWYgc3RyYXJyW2ldIGlzIGEgVG9rZW4sIHRoZW4gdGhlIG1hdGNoIHN0YXJ0cyBpbnNpZGUgYW5vdGhlciBUb2tlbiwgd2hpY2ggaXMgaW52YWxpZFxuXHRcdFx0XHRcdFx0aWYgKHN0cmFycltpXSBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBOdW1iZXIgb2YgdG9rZW5zIHRvIGRlbGV0ZSBhbmQgcmVwbGFjZSB3aXRoIHRoZSBuZXcgbWF0Y2hcblx0XHRcdFx0XHRcdGRlbE51bSA9IGsgLSBpO1xuXHRcdFx0XHRcdFx0c3RyID0gdGV4dC5zbGljZShwb3MsIHApO1xuXHRcdFx0XHRcdFx0bWF0Y2guaW5kZXggLT0gcG9zO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG5cblx0XHRcdFx0XHRcdHZhciBtYXRjaCA9IHBhdHRlcm4uZXhlYyhzdHIpLFxuXHRcdFx0XHRcdFx0XHRkZWxOdW0gPSAxO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICghbWF0Y2gpIHtcblx0XHRcdFx0XHRcdGlmIChvbmVzaG90KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZihsb29rYmVoaW5kKSB7XG5cdFx0XHRcdFx0XHRsb29rYmVoaW5kTGVuZ3RoID0gbWF0Y2hbMV0gPyBtYXRjaFsxXS5sZW5ndGggOiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBmcm9tID0gbWF0Y2guaW5kZXggKyBsb29rYmVoaW5kTGVuZ3RoLFxuXHRcdFx0XHRcdCAgICBtYXRjaCA9IG1hdGNoWzBdLnNsaWNlKGxvb2tiZWhpbmRMZW5ndGgpLFxuXHRcdFx0XHRcdCAgICB0byA9IGZyb20gKyBtYXRjaC5sZW5ndGgsXG5cdFx0XHRcdFx0ICAgIGJlZm9yZSA9IHN0ci5zbGljZSgwLCBmcm9tKSxcblx0XHRcdFx0XHQgICAgYWZ0ZXIgPSBzdHIuc2xpY2UodG8pO1xuXG5cdFx0XHRcdFx0dmFyIGFyZ3MgPSBbaSwgZGVsTnVtXTtcblxuXHRcdFx0XHRcdGlmIChiZWZvcmUpIHtcblx0XHRcdFx0XHRcdCsraTtcblx0XHRcdFx0XHRcdHBvcyArPSBiZWZvcmUubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YXJncy5wdXNoKGJlZm9yZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHdyYXBwZWQgPSBuZXcgVG9rZW4odG9rZW4sIGluc2lkZT8gXy50b2tlbml6ZShtYXRjaCwgaW5zaWRlKSA6IG1hdGNoLCBhbGlhcywgbWF0Y2gsIGdyZWVkeSk7XG5cblx0XHRcdFx0XHRhcmdzLnB1c2god3JhcHBlZCk7XG5cblx0XHRcdFx0XHRpZiAoYWZ0ZXIpIHtcblx0XHRcdFx0XHRcdGFyZ3MucHVzaChhZnRlcik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0QXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShzdHJhcnIsIGFyZ3MpO1xuXG5cdFx0XHRcdFx0aWYgKGRlbE51bSAhPSAxKVxuXHRcdFx0XHRcdFx0Xy5tYXRjaEdyYW1tYXIodGV4dCwgc3RyYXJyLCBncmFtbWFyLCBpLCBwb3MsIHRydWUsIHRva2VuKTtcblxuXHRcdFx0XHRcdGlmIChvbmVzaG90KVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0dG9rZW5pemU6IGZ1bmN0aW9uKHRleHQsIGdyYW1tYXIpIHtcblx0XHR2YXIgc3RyYXJyID0gW3RleHRdO1xuXG5cdFx0dmFyIHJlc3QgPSBncmFtbWFyLnJlc3Q7XG5cblx0XHRpZiAocmVzdCkge1xuXHRcdFx0Zm9yICh2YXIgdG9rZW4gaW4gcmVzdCkge1xuXHRcdFx0XHRncmFtbWFyW3Rva2VuXSA9IHJlc3RbdG9rZW5dO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWxldGUgZ3JhbW1hci5yZXN0O1xuXHRcdH1cblxuXHRcdF8ubWF0Y2hHcmFtbWFyKHRleHQsIHN0cmFyciwgZ3JhbW1hciwgMCwgMCwgZmFsc2UpO1xuXG5cdFx0cmV0dXJuIHN0cmFycjtcblx0fSxcblxuXHRob29rczoge1xuXHRcdGFsbDoge30sXG5cblx0XHRhZGQ6IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGhvb2tzID0gXy5ob29rcy5hbGw7XG5cblx0XHRcdGhvb2tzW25hbWVdID0gaG9va3NbbmFtZV0gfHwgW107XG5cblx0XHRcdGhvb2tzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cblx0XHRydW46IGZ1bmN0aW9uIChuYW1lLCBlbnYpIHtcblx0XHRcdHZhciBjYWxsYmFja3MgPSBfLmhvb2tzLmFsbFtuYW1lXTtcblxuXHRcdFx0aWYgKCFjYWxsYmFja3MgfHwgIWNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpPTAsIGNhbGxiYWNrOyBjYWxsYmFjayA9IGNhbGxiYWNrc1tpKytdOykge1xuXHRcdFx0XHRjYWxsYmFjayhlbnYpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRUb2tlbjogVG9rZW5cbn07XG5cbl9zZWxmLlByaXNtID0gXztcblxuZnVuY3Rpb24gVG9rZW4odHlwZSwgY29udGVudCwgYWxpYXMsIG1hdGNoZWRTdHIsIGdyZWVkeSkge1xuXHR0aGlzLnR5cGUgPSB0eXBlO1xuXHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXHR0aGlzLmFsaWFzID0gYWxpYXM7XG5cdC8vIENvcHkgb2YgdGhlIGZ1bGwgc3RyaW5nIHRoaXMgdG9rZW4gd2FzIGNyZWF0ZWQgZnJvbVxuXHR0aGlzLmxlbmd0aCA9IChtYXRjaGVkU3RyIHx8IFwiXCIpLmxlbmd0aHwwO1xuXHR0aGlzLmdyZWVkeSA9ICEhZ3JlZWR5O1xufVxuXG5Ub2tlbi5zdHJpbmdpZnkgPSBmdW5jdGlvbihvLCBsYW5ndWFnZSkge1xuXHRpZiAodHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGlmIChBcnJheS5pc0FycmF5KG8pKSB7XG5cdFx0cmV0dXJuIG8ubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBUb2tlbi5zdHJpbmdpZnkoZWxlbWVudCwgbGFuZ3VhZ2UpO1xuXHRcdH0pLmpvaW4oJycpO1xuXHR9XG5cblx0dmFyIGVudiA9IHtcblx0XHR0eXBlOiBvLnR5cGUsXG5cdFx0Y29udGVudDogVG9rZW4uc3RyaW5naWZ5KG8uY29udGVudCwgbGFuZ3VhZ2UpLFxuXHRcdHRhZzogJ3NwYW4nLFxuXHRcdGNsYXNzZXM6IFsndG9rZW4nLCBvLnR5cGVdLFxuXHRcdGF0dHJpYnV0ZXM6IHt9LFxuXHRcdGxhbmd1YWdlOiBsYW5ndWFnZVxuXHR9O1xuXG5cdGlmIChvLmFsaWFzKSB7XG5cdFx0dmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KG8uYWxpYXMpID8gby5hbGlhcyA6IFtvLmFsaWFzXTtcblx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbnYuY2xhc3NlcywgYWxpYXNlcyk7XG5cdH1cblxuXHRfLmhvb2tzLnJ1bignd3JhcCcsIGVudik7XG5cblx0dmFyIGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhlbnYuYXR0cmlidXRlcykubWFwKGZ1bmN0aW9uKG5hbWUpIHtcblx0XHRyZXR1cm4gbmFtZSArICc9XCInICsgKGVudi5hdHRyaWJ1dGVzW25hbWVdIHx8ICcnKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JykgKyAnXCInO1xuXHR9KS5qb2luKCcgJyk7XG5cblx0cmV0dXJuICc8JyArIGVudi50YWcgKyAnIGNsYXNzPVwiJyArIGVudi5jbGFzc2VzLmpvaW4oJyAnKSArICdcIicgKyAoYXR0cmlidXRlcyA/ICcgJyArIGF0dHJpYnV0ZXMgOiAnJykgKyAnPicgKyBlbnYuY29udGVudCArICc8LycgKyBlbnYudGFnICsgJz4nO1xufTtcblxuaWYgKCFfc2VsZi5kb2N1bWVudCkge1xuXHRpZiAoIV9zZWxmLmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHQvLyBpbiBOb2RlLmpzXG5cdFx0cmV0dXJuIF87XG5cdH1cblxuXHRpZiAoIV8uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyKSB7XG5cdFx0Ly8gSW4gd29ya2VyXG5cdFx0X3NlbGYuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGZ1bmN0aW9uIChldnQpIHtcblx0XHRcdHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShldnQuZGF0YSksXG5cdFx0XHRcdGxhbmcgPSBtZXNzYWdlLmxhbmd1YWdlLFxuXHRcdFx0XHRjb2RlID0gbWVzc2FnZS5jb2RlLFxuXHRcdFx0XHRpbW1lZGlhdGVDbG9zZSA9IG1lc3NhZ2UuaW1tZWRpYXRlQ2xvc2U7XG5cblx0XHRcdF9zZWxmLnBvc3RNZXNzYWdlKF8uaGlnaGxpZ2h0KGNvZGUsIF8ubGFuZ3VhZ2VzW2xhbmddLCBsYW5nKSk7XG5cdFx0XHRpZiAoaW1tZWRpYXRlQ2xvc2UpIHtcblx0XHRcdFx0X3NlbGYuY2xvc2UoKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSk7XG5cdH1cblxuXHRyZXR1cm4gXztcbn1cblxuLy9HZXQgY3VycmVudCBzY3JpcHQgYW5kIGhpZ2hsaWdodFxudmFyIHNjcmlwdCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgfHwgW10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKSkucG9wKCk7XG5cbmlmIChzY3JpcHQpIHtcblx0Xy5maWxlbmFtZSA9IHNjcmlwdC5zcmM7XG5cblx0aWYgKCFfLm1hbnVhbCAmJiAhc2NyaXB0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1tYW51YWwnKSkge1xuXHRcdGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiKSB7XG5cdFx0XHRpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuXHRcdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKF8uaGlnaGxpZ2h0QWxsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KF8uaGlnaGxpZ2h0QWxsLCAxNik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIF8uaGlnaGxpZ2h0QWxsKTtcblx0XHR9XG5cdH1cbn1cblxucmV0dXJuIF87XG5cbn0pKF9zZWxmKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gUHJpc207XG59XG5cbi8vIGhhY2sgZm9yIGNvbXBvbmVudHMgdG8gd29yayBjb3JyZWN0bHkgaW4gbm9kZS5qc1xuaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG5cdGdsb2JhbC5QcmlzbSA9IFByaXNtO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gbWFya3VwXG5tYXJrdXAuZGlzcGxheU5hbWUgPSAnbWFya3VwJ1xubWFya3VwLmFsaWFzZXMgPSBbJ3htbCcsICdodG1sJywgJ21hdGhtbCcsICdzdmcnXVxuZnVuY3Rpb24gbWFya3VwKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5tYXJrdXAgPSB7XG4gICAgY29tbWVudDogLzwhLS1bXFxzXFxTXSo/LS0+LyxcbiAgICBwcm9sb2c6IC88XFw/W1xcc1xcU10rP1xcPz4vLFxuICAgIGRvY3R5cGU6IC88IURPQ1RZUEVbXFxzXFxTXSs/Pi9pLFxuICAgIGNkYXRhOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9dXT4vaSxcbiAgICB0YWc6IHtcbiAgICAgIHBhdHRlcm46IC88XFwvPyg/IVxcZClbXlxccz5cXC89JDwlXSsoPzpcXHMoPzpcXHMqW15cXHM+XFwvPV0rKD86XFxzKj1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKyg/PVtcXHM+XSkpfCg/PVtcXHMvPl0pKSkrKT9cXHMqXFwvPz4vaSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICB0YWc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXjxcXC8/W15cXHM+XFwvXSsvaSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXjxcXC8/LyxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogL15bXlxccz5cXC86XSs6L1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICAgICAgcGF0dGVybjogLz1cXHMqKD86XCJbXlwiXSpcInwnW14nXSonfFteXFxzJ1wiPj1dKykvaSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiBbXG4gICAgICAgICAgICAgIC9ePS8sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXihcXHMqKVtcIiddfFtcIiddJC8sXG4gICAgICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwdW5jdHVhdGlvbjogL1xcLz8+LyxcbiAgICAgICAgJ2F0dHItbmFtZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvW15cXHM+XFwvXSsvLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgbmFtZXNwYWNlOiAvXlteXFxzPlxcLzpdKzovXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBlbnRpdHk6IC8mIz9bXFxkYS16XXsxLDh9Oy9pXG4gIH1cbiAgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFsndGFnJ10uaW5zaWRlWydhdHRyLXZhbHVlJ10uaW5zaWRlWydlbnRpdHknXSA9XG4gICAgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFsnZW50aXR5J10gLy8gUGx1Z2luIHRvIG1ha2UgZW50aXR5IHRpdGxlIHNob3cgdGhlIHJlYWwgZW50aXR5LCBpZGVhIGJ5IFJvbWFuIEtvbWFyb3ZcbiAgUHJpc20uaG9va3MuYWRkKCd3cmFwJywgZnVuY3Rpb24oZW52KSB7XG4gICAgaWYgKGVudi50eXBlID09PSAnZW50aXR5Jykge1xuICAgICAgZW52LmF0dHJpYnV0ZXNbJ3RpdGxlJ10gPSBlbnYuY29udGVudC52YWx1ZS5yZXBsYWNlKC8mYW1wOy8sICcmJylcbiAgICB9XG4gIH0pXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZywgJ2FkZElubGluZWQnLCB7XG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBpbmxpbmVkIGxhbmd1YWdlIHRvIG1hcmt1cC5cbiAgICAgKlxuICAgICAqIEFuIGV4YW1wbGUgb2YgYW4gaW5saW5lZCBsYW5ndWFnZSBpcyBDU1Mgd2l0aCBgPHN0eWxlPmAgdGFncy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0YWdOYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWcgdGhhdCBjb250YWlucyB0aGUgaW5saW5lZCBsYW5ndWFnZS4gVGhpcyBuYW1lIHdpbGwgYmUgdHJlYXRlZCBhc1xuICAgICAqIGNhc2UgaW5zZW5zaXRpdmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmcgVGhlIGxhbmd1YWdlIGtleS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpO1xuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRJbmxpbmVkKHRhZ05hbWUsIGxhbmcpIHtcbiAgICAgIHZhciBpbmNsdWRlZENkYXRhSW5zaWRlID0ge31cbiAgICAgIGluY2x1ZGVkQ2RhdGFJbnNpZGVbJ2xhbmd1YWdlLScgKyBsYW5nXSA9IHtcbiAgICAgICAgcGF0dGVybjogLyhePCFcXFtDREFUQVxcWylbXFxzXFxTXSs/KD89XFxdXFxdPiQpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzW2xhbmddXG4gICAgICB9XG4gICAgICBpbmNsdWRlZENkYXRhSW5zaWRlWydjZGF0YSddID0gL148IVxcW0NEQVRBXFxbfFxcXVxcXT4kL2lcbiAgICAgIHZhciBpbnNpZGUgPSB7XG4gICAgICAgICdpbmNsdWRlZC1jZGF0YSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksXG4gICAgICAgICAgaW5zaWRlOiBpbmNsdWRlZENkYXRhSW5zaWRlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGluc2lkZVsnbGFuZ3VhZ2UtJyArIGxhbmddID0ge1xuICAgICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXNbbGFuZ11cbiAgICAgIH1cbiAgICAgIHZhciBkZWYgPSB7fVxuICAgICAgZGVmW3RhZ05hbWVdID0ge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoXG4gICAgICAgICAgLyg8X19bXFxzXFxTXSo/PikoPzo8IVxcW0NEQVRBXFxbW1xcc1xcU10qP1xcXVxcXT5cXHMqfFtcXHNcXFNdKSo/KD89PFxcL19fPikvLnNvdXJjZS5yZXBsYWNlKFxuICAgICAgICAgICAgL19fL2csXG4gICAgICAgICAgICB0YWdOYW1lXG4gICAgICAgICAgKSxcbiAgICAgICAgICAnaSdcbiAgICAgICAgKSxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgICBpbnNpZGU6IGluc2lkZVxuICAgICAgfVxuICAgICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ2NkYXRhJywgZGVmKVxuICAgIH1cbiAgfSlcbiAgUHJpc20ubGFuZ3VhZ2VzLnhtbCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHt9KVxuICBQcmlzbS5sYW5ndWFnZXMuaHRtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXBcbiAgUHJpc20ubGFuZ3VhZ2VzLm1hdGhtbCA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXBcbiAgUHJpc20ubGFuZ3VhZ2VzLnN2ZyA9IFByaXNtLmxhbmd1YWdlcy5tYXJrdXBcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNzc1xuY3NzLmRpc3BsYXlOYW1lID0gJ2NzcydcbmNzcy5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGNzcyhQcmlzbSkge1xuICA7KGZ1bmN0aW9uKFByaXNtKSB7XG4gICAgdmFyIHN0cmluZyA9IC8oXCJ8JykoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxL1xuICAgIFByaXNtLmxhbmd1YWdlcy5jc3MgPSB7XG4gICAgICBjb21tZW50OiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgICBhdHJ1bGU6IHtcbiAgICAgICAgcGF0dGVybjogL0BbXFx3LV0rW1xcc1xcU10qPyg/Ojt8KD89XFxzKlxceykpLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgcnVsZTogL0BbXFx3LV0rLyAvLyBTZWUgcmVzdCBiZWxvd1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXJsOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cCgndXJsXFxcXCgoPzonICsgc3RyaW5nLnNvdXJjZSArICd8W15cXG5cXHIoKV0qKVxcXFwpJywgJ2knKSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgZnVuY3Rpb246IC9edXJsL2ksXG4gICAgICAgICAgcHVuY3R1YXRpb246IC9eXFwofFxcKSQvXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZWxlY3RvcjogUmVnRXhwKFxuICAgICAgICAnW157fVxcXFxzXSg/Oltee307XCJcXCddfCcgKyBzdHJpbmcuc291cmNlICsgJykqPyg/PVxcXFxzKlxcXFx7KSdcbiAgICAgICksXG4gICAgICBzdHJpbmc6IHtcbiAgICAgICAgcGF0dGVybjogc3RyaW5nLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICBwcm9wZXJ0eTogL1stX2EtelxceEEwLVxcdUZGRkZdWy1cXHdcXHhBMC1cXHVGRkZGXSooPz1cXHMqOikvaSxcbiAgICAgIGltcG9ydGFudDogLyFpbXBvcnRhbnRcXGIvaSxcbiAgICAgIGZ1bmN0aW9uOiAvWy1hLXowLTldKyg/PVxcKCkvaSxcbiAgICAgIHB1bmN0dWF0aW9uOiAvWygpe307OixdL1xuICAgIH1cbiAgICBQcmlzbS5sYW5ndWFnZXMuY3NzWydhdHJ1bGUnXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5jc3NcbiAgICB2YXIgbWFya3VwID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFxuICAgIGlmIChtYXJrdXApIHtcbiAgICAgIG1hcmt1cC50YWcuYWRkSW5saW5lZCgnc3R5bGUnLCAnY3NzJylcbiAgICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXG4gICAgICAgICdpbnNpZGUnLFxuICAgICAgICAnYXR0ci12YWx1ZScsXG4gICAgICAgIHtcbiAgICAgICAgICAnc3R5bGUtYXR0cic6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC9cXHMqc3R5bGU9KFwifCcpKD86XFxcXFtcXHNcXFNdfCg/IVxcMSlbXlxcXFxdKSpcXDEvaSxcbiAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICAnYXR0ci1uYW1lJzoge1xuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9eXFxzKnN0eWxlL2ksXG4gICAgICAgICAgICAgICAgaW5zaWRlOiBtYXJrdXAudGFnLmluc2lkZVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwdW5jdHVhdGlvbjogL15cXHMqPVxccypbJ1wiXXxbJ1wiXVxccyokLyxcbiAgICAgICAgICAgICAgJ2F0dHItdmFsdWUnOiB7XG4gICAgICAgICAgICAgICAgcGF0dGVybjogLy4rL2ksXG4gICAgICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuY3NzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLWNzcydcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1hcmt1cC50YWdcbiAgICAgIClcbiAgICB9XG4gIH0pKFByaXNtKVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gY2xpa2VcbmNsaWtlLmRpc3BsYXlOYW1lID0gJ2NsaWtlJ1xuY2xpa2UuYWxpYXNlcyA9IFtdXG5mdW5jdGlvbiBjbGlrZShQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuY2xpa2UgPSB7XG4gICAgY29tbWVudDogW1xuICAgICAge1xuICAgICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgcGF0dGVybjogLyhefFteXFxcXDpdKVxcL1xcLy4qLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgICB9XG4gICAgXSxcbiAgICBzdHJpbmc6IHtcbiAgICAgIHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdjbGFzcy1uYW1lJzoge1xuICAgICAgcGF0dGVybjogLygoPzpcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfHRyYWl0fGluc3RhbmNlb2Z8bmV3KVxccyspfCg/OmNhdGNoXFxzK1xcKCkpW1xcdy5cXFxcXSsvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgcHVuY3R1YXRpb246IC9bLlxcXFxdL1xuICAgICAgfVxuICAgIH0sXG4gICAga2V5d29yZDogL1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sXG4gICAgYm9vbGVhbjogL1xcYig/OnRydWV8ZmFsc2UpXFxiLyxcbiAgICBmdW5jdGlvbjogL1xcdysoPz1cXCgpLyxcbiAgICBudW1iZXI6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrXFwuP1xcZCp8XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8vaSxcbiAgICBvcGVyYXRvcjogLy0tP3xcXCtcXCs/fCE9Pz0/fDw9P3w+PT98PT0/PT98JiY/fFxcfFxcfD98XFw/fFxcKnxcXC98fnxcXF58JS8sXG4gICAgcHVuY3R1YXRpb246IC9be31bXFxdOygpLC46XS9cbiAgfVxufVxuIiwiZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2U7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpzeFxuanN4LmRpc3BsYXlOYW1lID0gJ2pzeCdcbmpzeC5hbGlhc2VzID0gW11cbmZ1bmN0aW9uIGpzeChQcmlzbSkge1xuICA7KGZ1bmN0aW9uKFByaXNtKSB7XG4gICAgdmFyIGphdmFzY3JpcHQgPSBQcmlzbS51dGlsLmNsb25lKFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0KVxuICAgIFByaXNtLmxhbmd1YWdlcy5qc3ggPSBQcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKCdtYXJrdXAnLCBqYXZhc2NyaXB0KVxuICAgIFByaXNtLmxhbmd1YWdlcy5qc3gudGFnLnBhdHRlcm4gPSAvPFxcLz8oPzpbXFx3LjotXStcXHMqKD86XFxzKyg/OltcXHcuOi1dKyg/Oj0oPzooXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMXxbXlxcc3snXCI+PV0rfFxceyg/Olxceyg/Olxce1tefV0qXFx9fFtee31dKSpcXH18W157fV0pK1xcfSkpP3xcXHtcXC57M31bYS16XyRdW1xcdyRdKig/OlxcLlthLXpfJF1bXFx3JF0qKSpcXH0pKSpcXHMqXFwvPyk/Pi9pXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmpzeC50YWcuaW5zaWRlWyd0YWcnXS5wYXR0ZXJuID0gL148XFwvP1teXFxzPlxcL10qL2lcbiAgICBQcmlzbS5sYW5ndWFnZXMuanN4LnRhZy5pbnNpZGVbXG4gICAgICAnYXR0ci12YWx1ZSdcbiAgICBdLnBhdHRlcm4gPSAvPSg/IVxceykoPzooXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pKlxcMXxbXlxccydcIj5dKykvaVxuICAgIFByaXNtLmxhbmd1YWdlcy5qc3gudGFnLmluc2lkZVsndGFnJ10uaW5zaWRlW1xuICAgICAgJ2NsYXNzLW5hbWUnXG4gICAgXSA9IC9eW0EtWl1cXHcqKD86XFwuW0EtWl1cXHcqKSokL1xuICAgIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXG4gICAgICAnaW5zaWRlJyxcbiAgICAgICdhdHRyLW5hbWUnLFxuICAgICAge1xuICAgICAgICBzcHJlYWQ6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXFx7XFwuezN9W2Etel8kXVtcXHckXSooPzpcXC5bYS16XyRdW1xcdyRdKikqXFx9LyxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgIHB1bmN0dWF0aW9uOiAvXFwuezN9fFt7fS5dLyxcbiAgICAgICAgICAgICdhdHRyLXZhbHVlJzogL1xcdysvXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgUHJpc20ubGFuZ3VhZ2VzLmpzeC50YWdcbiAgICApXG4gICAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcbiAgICAgICdpbnNpZGUnLFxuICAgICAgJ2F0dHItdmFsdWUnLFxuICAgICAge1xuICAgICAgICBzY3JpcHQ6IHtcbiAgICAgICAgICAvLyBBbGxvdyBmb3IgdHdvIGxldmVscyBvZiBuZXN0aW5nXG4gICAgICAgICAgcGF0dGVybjogLz0oXFx7KD86XFx7KD86XFx7W159XSpcXH18W159XSkqXFx9fFtefV0pK1xcfSkvaSxcbiAgICAgICAgICBpbnNpZGU6IHtcbiAgICAgICAgICAgICdzY3JpcHQtcHVuY3R1YXRpb24nOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC9ePSg/PXspLyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXN0OiBQcmlzbS5sYW5ndWFnZXMuanN4XG4gICAgICAgICAgfSxcbiAgICAgICAgICBhbGlhczogJ2xhbmd1YWdlLWphdmFzY3JpcHQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBQcmlzbS5sYW5ndWFnZXMuanN4LnRhZ1xuICAgICkgLy8gVGhlIGZvbGxvd2luZyB3aWxsIGhhbmRsZSBwbGFpbiB0ZXh0IGluc2lkZSB0YWdzXG4gICAgdmFyIHN0cmluZ2lmeVRva2VuID0gZnVuY3Rpb24odG9rZW4pIHtcbiAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4uY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLmNvbnRlbnRcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlbi5jb250ZW50Lm1hcChzdHJpbmdpZnlUb2tlbikuam9pbignJylcbiAgICB9XG4gICAgdmFyIHdhbGtUb2tlbnMgPSBmdW5jdGlvbih0b2tlbnMpIHtcbiAgICAgIHZhciBvcGVuZWRUYWdzID0gW11cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuICAgICAgICB2YXIgbm90VGFnTm9yQnJhY2UgPSBmYWxzZVxuICAgICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPT09ICd0YWcnICYmXG4gICAgICAgICAgICB0b2tlbi5jb250ZW50WzBdICYmXG4gICAgICAgICAgICB0b2tlbi5jb250ZW50WzBdLnR5cGUgPT09ICd0YWcnXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBXZSBmb3VuZCBhIHRhZywgbm93IGZpbmQgaXRzIGtpbmRcbiAgICAgICAgICAgIGlmICh0b2tlbi5jb250ZW50WzBdLmNvbnRlbnRbMF0uY29udGVudCA9PT0gJzwvJykge1xuICAgICAgICAgICAgICAvLyBDbG9zaW5nIHRhZ1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgb3BlbmVkVGFncy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgb3BlbmVkVGFnc1tvcGVuZWRUYWdzLmxlbmd0aCAtIDFdLnRhZ05hbWUgPT09XG4gICAgICAgICAgICAgICAgICBzdHJpbmdpZnlUb2tlbih0b2tlbi5jb250ZW50WzBdLmNvbnRlbnRbMV0pXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIFBvcCBtYXRjaGluZyBvcGVuaW5nIHRhZ1xuICAgICAgICAgICAgICAgIG9wZW5lZFRhZ3MucG9wKClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHRva2VuLmNvbnRlbnRbdG9rZW4uY29udGVudC5sZW5ndGggLSAxXS5jb250ZW50ID09PSAnLz4nKSB7XG4gICAgICAgICAgICAgICAgLy8gQXV0b2Nsb3NlZCB0YWcsIGlnbm9yZVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE9wZW5pbmcgdGFnXG4gICAgICAgICAgICAgICAgb3BlbmVkVGFncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgIHRhZ05hbWU6IHN0cmluZ2lmeVRva2VuKHRva2VuLmNvbnRlbnRbMF0uY29udGVudFsxXSksXG4gICAgICAgICAgICAgICAgICBvcGVuZWRCcmFjZXM6IDBcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIG9wZW5lZFRhZ3MubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gJ3B1bmN0dWF0aW9uJyAmJlxuICAgICAgICAgICAgdG9rZW4uY29udGVudCA9PT0gJ3snXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBIZXJlIHdlIG1pZ2h0IGhhdmUgZW50ZXJlZCBhIEpTWCBjb250ZXh0IGluc2lkZSBhIHRhZ1xuICAgICAgICAgICAgb3BlbmVkVGFnc1tvcGVuZWRUYWdzLmxlbmd0aCAtIDFdLm9wZW5lZEJyYWNlcysrXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIG9wZW5lZFRhZ3MubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgb3BlbmVkVGFnc1tvcGVuZWRUYWdzLmxlbmd0aCAtIDFdLm9wZW5lZEJyYWNlcyA+IDAgJiZcbiAgICAgICAgICAgIHRva2VuLnR5cGUgPT09ICdwdW5jdHVhdGlvbicgJiZcbiAgICAgICAgICAgIHRva2VuLmNvbnRlbnQgPT09ICd9J1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gSGVyZSB3ZSBtaWdodCBoYXZlIGxlZnQgYSBKU1ggY29udGV4dCBpbnNpZGUgYSB0YWdcbiAgICAgICAgICAgIG9wZW5lZFRhZ3Nbb3BlbmVkVGFncy5sZW5ndGggLSAxXS5vcGVuZWRCcmFjZXMtLVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3RUYWdOb3JCcmFjZSA9IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdFRhZ05vckJyYWNlIHx8IHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBvcGVuZWRUYWdzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgIG9wZW5lZFRhZ3Nbb3BlbmVkVGFncy5sZW5ndGggLSAxXS5vcGVuZWRCcmFjZXMgPT09IDBcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEhlcmUgd2UgYXJlIGluc2lkZSBhIHRhZywgYW5kIG5vdCBpbnNpZGUgYSBKU1ggY29udGV4dC5cbiAgICAgICAgICAgIC8vIFRoYXQncyBwbGFpbiB0ZXh0OiBkcm9wIGFueSB0b2tlbnMgbWF0Y2hlZC5cbiAgICAgICAgICAgIHZhciBwbGFpblRleHQgPSBzdHJpbmdpZnlUb2tlbih0b2tlbikgLy8gQW5kIG1lcmdlIHRleHQgd2l0aCBhZGphY2VudCB0ZXh0XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGkgPCB0b2tlbnMubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgICAodHlwZW9mIHRva2Vuc1tpICsgMV0gPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICAgICAgICAgdG9rZW5zW2kgKyAxXS50eXBlID09PSAncGxhaW4tdGV4dCcpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgcGxhaW5UZXh0ICs9IHN0cmluZ2lmeVRva2VuKHRva2Vuc1tpICsgMV0pXG4gICAgICAgICAgICAgIHRva2Vucy5zcGxpY2UoaSArIDEsIDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGkgPiAwICYmXG4gICAgICAgICAgICAgICh0eXBlb2YgdG9rZW5zW2kgLSAxXSA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgICB0b2tlbnNbaSAtIDFdLnR5cGUgPT09ICdwbGFpbi10ZXh0JylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBwbGFpblRleHQgPSBzdHJpbmdpZnlUb2tlbih0b2tlbnNbaSAtIDFdKSArIHBsYWluVGV4dFxuICAgICAgICAgICAgICB0b2tlbnMuc3BsaWNlKGkgLSAxLCAxKVxuICAgICAgICAgICAgICBpLS1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRva2Vuc1tpXSA9IG5ldyBQcmlzbS5Ub2tlbihcbiAgICAgICAgICAgICAgJ3BsYWluLXRleHQnLFxuICAgICAgICAgICAgICBwbGFpblRleHQsXG4gICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgIHBsYWluVGV4dFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4uY29udGVudCAmJiB0eXBlb2YgdG9rZW4uY29udGVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB3YWxrVG9rZW5zKHRva2VuLmNvbnRlbnQpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uKGVudikge1xuICAgICAgaWYgKGVudi5sYW5ndWFnZSAhPT0gJ2pzeCcgJiYgZW52Lmxhbmd1YWdlICE9PSAndHN4Jykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHdhbGtUb2tlbnMoZW52LnRva2VucylcbiAgICB9KVxuICB9KShQcmlzbSlcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG4vKiBEZXBlbmRlbmNpZXMuICovXG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnZXh0ZW5kJylcbnZhciBiYWlsID0gcmVxdWlyZSgnYmFpbCcpXG52YXIgdmZpbGUgPSByZXF1aXJlKCd2ZmlsZScpXG52YXIgdHJvdWdoID0gcmVxdWlyZSgndHJvdWdoJylcbnZhciBzdHJpbmcgPSByZXF1aXJlKCd4LWlzLXN0cmluZycpXG52YXIgcGxhaW4gPSByZXF1aXJlKCdpcy1wbGFpbi1vYmonKVxuXG4vKiBFeHBvc2UgYSBmcm96ZW4gcHJvY2Vzc29yLiAqL1xubW9kdWxlLmV4cG9ydHMgPSB1bmlmaWVkKCkuZnJlZXplKClcblxudmFyIHNsaWNlID0gW10uc2xpY2VcbnZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eVxuXG4vKiBQcm9jZXNzIHBpcGVsaW5lLiAqL1xudmFyIHBpcGVsaW5lID0gdHJvdWdoKClcbiAgLnVzZShwaXBlbGluZVBhcnNlKVxuICAudXNlKHBpcGVsaW5lUnVuKVxuICAudXNlKHBpcGVsaW5lU3RyaW5naWZ5KVxuXG5mdW5jdGlvbiBwaXBlbGluZVBhcnNlKHAsIGN0eCkge1xuICBjdHgudHJlZSA9IHAucGFyc2UoY3R4LmZpbGUpXG59XG5cbmZ1bmN0aW9uIHBpcGVsaW5lUnVuKHAsIGN0eCwgbmV4dCkge1xuICBwLnJ1bihjdHgudHJlZSwgY3R4LmZpbGUsIGRvbmUpXG5cbiAgZnVuY3Rpb24gZG9uZShlcnIsIHRyZWUsIGZpbGUpIHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICBuZXh0KGVycilcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LnRyZWUgPSB0cmVlXG4gICAgICBjdHguZmlsZSA9IGZpbGVcbiAgICAgIG5leHQoKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwaXBlbGluZVN0cmluZ2lmeShwLCBjdHgpIHtcbiAgY3R4LmZpbGUuY29udGVudHMgPSBwLnN0cmluZ2lmeShjdHgudHJlZSwgY3R4LmZpbGUpXG59XG5cbi8qIEZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgZmlyc3QgcHJvY2Vzc29yLiAqL1xuZnVuY3Rpb24gdW5pZmllZCgpIHtcbiAgdmFyIGF0dGFjaGVycyA9IFtdXG4gIHZhciB0cmFuc2Zvcm1lcnMgPSB0cm91Z2goKVxuICB2YXIgbmFtZXNwYWNlID0ge31cbiAgdmFyIGZyb3plbiA9IGZhbHNlXG4gIHZhciBmcmVlemVJbmRleCA9IC0xXG5cbiAgLyogRGF0YSBtYW5hZ2VtZW50LiAqL1xuICBwcm9jZXNzb3IuZGF0YSA9IGRhdGFcblxuICAvKiBMb2NrLiAqL1xuICBwcm9jZXNzb3IuZnJlZXplID0gZnJlZXplXG5cbiAgLyogUGx1Zy1pbnMuICovXG4gIHByb2Nlc3Nvci5hdHRhY2hlcnMgPSBhdHRhY2hlcnNcbiAgcHJvY2Vzc29yLnVzZSA9IHVzZVxuXG4gIC8qIEFQSS4gKi9cbiAgcHJvY2Vzc29yLnBhcnNlID0gcGFyc2VcbiAgcHJvY2Vzc29yLnN0cmluZ2lmeSA9IHN0cmluZ2lmeVxuICBwcm9jZXNzb3IucnVuID0gcnVuXG4gIHByb2Nlc3Nvci5ydW5TeW5jID0gcnVuU3luY1xuICBwcm9jZXNzb3IucHJvY2VzcyA9IHByb2Nlc3NcbiAgcHJvY2Vzc29yLnByb2Nlc3NTeW5jID0gcHJvY2Vzc1N5bmNcblxuICAvKiBFeHBvc2UuICovXG4gIHJldHVybiBwcm9jZXNzb3JcblxuICAvKiBDcmVhdGUgYSBuZXcgcHJvY2Vzc29yIGJhc2VkIG9uIHRoZSBwcm9jZXNzb3JcbiAgICogaW4gdGhlIGN1cnJlbnQgc2NvcGUuICovXG4gIGZ1bmN0aW9uIHByb2Nlc3NvcigpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB1bmlmaWVkKClcbiAgICB2YXIgbGVuZ3RoID0gYXR0YWNoZXJzLmxlbmd0aFxuICAgIHZhciBpbmRleCA9IC0xXG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZGVzdGluYXRpb24udXNlLmFwcGx5KG51bGwsIGF0dGFjaGVyc1tpbmRleF0pXG4gICAgfVxuXG4gICAgZGVzdGluYXRpb24uZGF0YShleHRlbmQodHJ1ZSwge30sIG5hbWVzcGFjZSkpXG5cbiAgICByZXR1cm4gZGVzdGluYXRpb25cbiAgfVxuXG4gIC8qIEZyZWV6ZTogdXNlZCB0byBzaWduYWwgYSBwcm9jZXNzb3IgdGhhdCBoYXMgZmluaXNoZWRcbiAgICogY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIHRha2UgdW5pZmllZCBpdHNlbGYuICBJdOKAmXMgZnJvemVuLlxuICAgKiBQbHVnLWlucyBzaG91bGQgbm90IGJlIGFkZGVkIHRvIGl0LiAgUmF0aGVyLCBpdCBzaG91bGRcbiAgICogYmUgZXh0ZW5kZWQsIGJ5IGludm9raW5nIGl0LCBiZWZvcmUgbW9kaWZ5aW5nIGl0LlxuICAgKlxuICAgKiBJbiBlc3NlbmNlLCBhbHdheXMgaW52b2tlIHRoaXMgd2hlbiBleHBvcnRpbmcgYVxuICAgKiBwcm9jZXNzb3IuICovXG4gIGZ1bmN0aW9uIGZyZWV6ZSgpIHtcbiAgICB2YXIgdmFsdWVzXG4gICAgdmFyIHBsdWdpblxuICAgIHZhciBvcHRpb25zXG4gICAgdmFyIHRyYW5zZm9ybWVyXG5cbiAgICBpZiAoZnJvemVuKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc29yXG4gICAgfVxuXG4gICAgd2hpbGUgKCsrZnJlZXplSW5kZXggPCBhdHRhY2hlcnMubGVuZ3RoKSB7XG4gICAgICB2YWx1ZXMgPSBhdHRhY2hlcnNbZnJlZXplSW5kZXhdXG4gICAgICBwbHVnaW4gPSB2YWx1ZXNbMF1cbiAgICAgIG9wdGlvbnMgPSB2YWx1ZXNbMV1cbiAgICAgIHRyYW5zZm9ybWVyID0gbnVsbFxuXG4gICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMgPT09IHRydWUpIHtcbiAgICAgICAgdmFsdWVzWzFdID0gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIHRyYW5zZm9ybWVyID0gcGx1Z2luLmFwcGx5KHByb2Nlc3NvciwgdmFsdWVzLnNsaWNlKDEpKVxuXG4gICAgICBpZiAodHlwZW9mIHRyYW5zZm9ybWVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRyYW5zZm9ybWVycy51c2UodHJhbnNmb3JtZXIpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnJvemVuID0gdHJ1ZVxuICAgIGZyZWV6ZUluZGV4ID0gSW5maW5pdHlcblxuICAgIHJldHVybiBwcm9jZXNzb3JcbiAgfVxuXG4gIC8qIERhdGEgbWFuYWdlbWVudC5cbiAgICogR2V0dGVyIC8gc2V0dGVyIGZvciBwcm9jZXNzb3Itc3BlY2lmaWMgaW5mb3JtdGlvbi4gKi9cbiAgZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gICAgaWYgKHN0cmluZyhrZXkpKSB7XG4gICAgICAvKiBTZXQgYGtleWAuICovXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBhc3NlcnRVbmZyb3plbignZGF0YScsIGZyb3plbilcblxuICAgICAgICBuYW1lc3BhY2Vba2V5XSA9IHZhbHVlXG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgICAgfVxuXG4gICAgICAvKiBHZXQgYGtleWAuICovXG4gICAgICByZXR1cm4gKG93bi5jYWxsKG5hbWVzcGFjZSwga2V5KSAmJiBuYW1lc3BhY2Vba2V5XSkgfHwgbnVsbFxuICAgIH1cblxuICAgIC8qIFNldCBzcGFjZS4gKi9cbiAgICBpZiAoa2V5KSB7XG4gICAgICBhc3NlcnRVbmZyb3plbignZGF0YScsIGZyb3plbilcbiAgICAgIG5hbWVzcGFjZSA9IGtleVxuICAgICAgcmV0dXJuIHByb2Nlc3NvclxuICAgIH1cblxuICAgIC8qIEdldCBzcGFjZS4gKi9cbiAgICByZXR1cm4gbmFtZXNwYWNlXG4gIH1cblxuICAvKiBQbHVnLWluIG1hbmFnZW1lbnQuXG4gICAqXG4gICAqIFBhc3MgaXQ6XG4gICAqICogICBhbiBhdHRhY2hlciBhbmQgb3B0aW9ucyxcbiAgICogKiAgIGEgcHJlc2V0LFxuICAgKiAqICAgYSBsaXN0IG9mIHByZXNldHMsIGF0dGFjaGVycywgYW5kIGFyZ3VtZW50cyAobGlzdFxuICAgKiAgICAgb2YgYXR0YWNoZXJzIGFuZCBvcHRpb25zKS4gKi9cbiAgZnVuY3Rpb24gdXNlKHZhbHVlKSB7XG4gICAgdmFyIHNldHRpbmdzXG5cbiAgICBhc3NlcnRVbmZyb3plbigndXNlJywgZnJvemVuKVxuXG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qIEVtcHR5ICovXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFkZFBsdWdpbi5hcHBseShudWxsLCBhcmd1bWVudHMpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoJ2xlbmd0aCcgaW4gdmFsdWUpIHtcbiAgICAgICAgYWRkTGlzdCh2YWx1ZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZFByZXNldCh2YWx1ZSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB1c2FibGUgdmFsdWUsIG5vdCBgJyArIHZhbHVlICsgJ2AnKVxuICAgIH1cblxuICAgIGlmIChzZXR0aW5ncykge1xuICAgICAgbmFtZXNwYWNlLnNldHRpbmdzID0gZXh0ZW5kKG5hbWVzcGFjZS5zZXR0aW5ncyB8fCB7fSwgc2V0dGluZ3MpXG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NvclxuXG4gICAgZnVuY3Rpb24gYWRkUHJlc2V0KHJlc3VsdCkge1xuICAgICAgYWRkTGlzdChyZXN1bHQucGx1Z2lucylcblxuICAgICAgaWYgKHJlc3VsdC5zZXR0aW5ncykge1xuICAgICAgICBzZXR0aW5ncyA9IGV4dGVuZChzZXR0aW5ncyB8fCB7fSwgcmVzdWx0LnNldHRpbmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhZGRQbHVnaW4odmFsdWUpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKCdsZW5ndGgnIGluIHZhbHVlKSB7XG4gICAgICAgICAgYWRkUGx1Z2luLmFwcGx5KG51bGwsIHZhbHVlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFkZFByZXNldCh2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB1c2FibGUgdmFsdWUsIG5vdCBgJyArIHZhbHVlICsgJ2AnKVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZExpc3QocGx1Z2lucykge1xuICAgICAgdmFyIGxlbmd0aFxuICAgICAgdmFyIGluZGV4XG5cbiAgICAgIGlmIChwbHVnaW5zID09PSBudWxsIHx8IHBsdWdpbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvKiBFbXB0eSAqL1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2lucyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gcGx1Z2lucykge1xuICAgICAgICBsZW5ndGggPSBwbHVnaW5zLmxlbmd0aFxuICAgICAgICBpbmRleCA9IC0xXG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhZGQocGx1Z2luc1tpbmRleF0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYSBsaXN0IG9mIHBsdWdpbnMsIG5vdCBgJyArIHBsdWdpbnMgKyAnYCcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkUGx1Z2luKHBsdWdpbiwgdmFsdWUpIHtcbiAgICAgIHZhciBlbnRyeSA9IGZpbmQocGx1Z2luKVxuXG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgaWYgKHBsYWluKGVudHJ5WzFdKSAmJiBwbGFpbih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IGV4dGVuZChlbnRyeVsxXSwgdmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICBlbnRyeVsxXSA9IHZhbHVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhdHRhY2hlcnMucHVzaChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZChwbHVnaW4pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXR0YWNoZXJzLmxlbmd0aFxuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIGVudHJ5XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgZW50cnkgPSBhdHRhY2hlcnNbaW5kZXhdXG5cbiAgICAgIGlmIChlbnRyeVswXSA9PT0gcGx1Z2luKSB7XG4gICAgICAgIHJldHVybiBlbnRyeVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFBhcnNlIGEgZmlsZSAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKVxuICAgKiBpbnRvIGEgVW5pc3Qgbm9kZSB1c2luZyB0aGUgYFBhcnNlcmAgb24gdGhlXG4gICAqIHByb2Nlc3Nvci4gKi9cbiAgZnVuY3Rpb24gcGFyc2UoZG9jKSB7XG4gICAgdmFyIGZpbGUgPSB2ZmlsZShkb2MpXG4gICAgdmFyIFBhcnNlclxuXG4gICAgZnJlZXplKClcbiAgICBQYXJzZXIgPSBwcm9jZXNzb3IuUGFyc2VyXG4gICAgYXNzZXJ0UGFyc2VyKCdwYXJzZScsIFBhcnNlcilcblxuICAgIGlmIChuZXdhYmxlKFBhcnNlcikpIHtcbiAgICAgIHJldHVybiBuZXcgUGFyc2VyKFN0cmluZyhmaWxlKSwgZmlsZSkucGFyc2UoKVxuICAgIH1cblxuICAgIHJldHVybiBQYXJzZXIoU3RyaW5nKGZpbGUpLCBmaWxlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIC8qIFJ1biB0cmFuc2Zvcm1zIG9uIGEgVW5pc3Qgbm9kZSByZXByZXNlbnRhdGlvbiBvZiBhIGZpbGVcbiAgICogKGluIHN0cmluZyBvciBWRmlsZSByZXByZXNlbnRhdGlvbiksIGFzeW5jLiAqL1xuICBmdW5jdGlvbiBydW4obm9kZSwgZmlsZSwgY2IpIHtcbiAgICBhc3NlcnROb2RlKG5vZGUpXG4gICAgZnJlZXplKClcblxuICAgIGlmICghY2IgJiYgdHlwZW9mIGZpbGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNiID0gZmlsZVxuICAgICAgZmlsZSA9IG51bGxcbiAgICB9XG5cbiAgICBpZiAoIWNiKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG4gICAgfVxuXG4gICAgZXhlY3V0b3IobnVsbCwgY2IpXG5cbiAgICBmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRyYW5zZm9ybWVycy5ydW4obm9kZSwgdmZpbGUoZmlsZSksIGRvbmUpXG5cbiAgICAgIGZ1bmN0aW9uIGRvbmUoZXJyLCB0cmVlLCBmaWxlKSB7XG4gICAgICAgIHRyZWUgPSB0cmVlIHx8IG5vZGVcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpXG4gICAgICAgIH0gZWxzZSBpZiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUodHJlZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYihudWxsLCB0cmVlLCBmaWxlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogUnVuIHRyYW5zZm9ybXMgb24gYSBVbmlzdCBub2RlIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZVxuICAgKiAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKSwgc3luYy4gKi9cbiAgZnVuY3Rpb24gcnVuU3luYyhub2RlLCBmaWxlKSB7XG4gICAgdmFyIGNvbXBsZXRlID0gZmFsc2VcbiAgICB2YXIgcmVzdWx0XG5cbiAgICBydW4obm9kZSwgZmlsZSwgZG9uZSlcblxuICAgIGFzc2VydERvbmUoJ3J1blN5bmMnLCAncnVuJywgY29tcGxldGUpXG5cbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgICBmdW5jdGlvbiBkb25lKGVyciwgdHJlZSkge1xuICAgICAgY29tcGxldGUgPSB0cnVlXG4gICAgICBiYWlsKGVycilcbiAgICAgIHJlc3VsdCA9IHRyZWVcbiAgICB9XG4gIH1cblxuICAvKiBTdHJpbmdpZnkgYSBVbmlzdCBub2RlIHJlcHJlc2VudGF0aW9uIG9mIGEgZmlsZVxuICAgKiAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKSBpbnRvIGEgc3RyaW5nXG4gICAqIHVzaW5nIHRoZSBgQ29tcGlsZXJgIG9uIHRoZSBwcm9jZXNzb3IuICovXG4gIGZ1bmN0aW9uIHN0cmluZ2lmeShub2RlLCBkb2MpIHtcbiAgICB2YXIgZmlsZSA9IHZmaWxlKGRvYylcbiAgICB2YXIgQ29tcGlsZXJcblxuICAgIGZyZWV6ZSgpXG4gICAgQ29tcGlsZXIgPSBwcm9jZXNzb3IuQ29tcGlsZXJcbiAgICBhc3NlcnRDb21waWxlcignc3RyaW5naWZ5JywgQ29tcGlsZXIpXG4gICAgYXNzZXJ0Tm9kZShub2RlKVxuXG4gICAgaWYgKG5ld2FibGUoQ29tcGlsZXIpKSB7XG4gICAgICByZXR1cm4gbmV3IENvbXBpbGVyKG5vZGUsIGZpbGUpLmNvbXBpbGUoKVxuICAgIH1cblxuICAgIHJldHVybiBDb21waWxlcihub2RlLCBmaWxlKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbiAgfVxuXG4gIC8qIFBhcnNlIGEgZmlsZSAoaW4gc3RyaW5nIG9yIFZGaWxlIHJlcHJlc2VudGF0aW9uKVxuICAgKiBpbnRvIGEgVW5pc3Qgbm9kZSB1c2luZyB0aGUgYFBhcnNlcmAgb24gdGhlIHByb2Nlc3NvcixcbiAgICogdGhlbiBydW4gdHJhbnNmb3JtcyBvbiB0aGF0IG5vZGUsIGFuZCBjb21waWxlIHRoZVxuICAgKiByZXN1bHRpbmcgbm9kZSB1c2luZyB0aGUgYENvbXBpbGVyYCBvbiB0aGUgcHJvY2Vzc29yLFxuICAgKiBhbmQgc3RvcmUgdGhhdCByZXN1bHQgb24gdGhlIFZGaWxlLiAqL1xuICBmdW5jdGlvbiBwcm9jZXNzKGRvYywgY2IpIHtcbiAgICBmcmVlemUoKVxuICAgIGFzc2VydFBhcnNlcigncHJvY2VzcycsIHByb2Nlc3Nvci5QYXJzZXIpXG4gICAgYXNzZXJ0Q29tcGlsZXIoJ3Byb2Nlc3MnLCBwcm9jZXNzb3IuQ29tcGlsZXIpXG5cbiAgICBpZiAoIWNiKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZXhlY3V0b3IpXG4gICAgfVxuXG4gICAgZXhlY3V0b3IobnVsbCwgY2IpXG5cbiAgICBmdW5jdGlvbiBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBmaWxlID0gdmZpbGUoZG9jKVxuXG4gICAgICBwaXBlbGluZS5ydW4ocHJvY2Vzc29yLCB7ZmlsZTogZmlsZX0sIGRvbmUpXG5cbiAgICAgIGZ1bmN0aW9uIGRvbmUoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZWplY3QoZXJyKVxuICAgICAgICB9IGVsc2UgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKGZpbGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2IobnVsbCwgZmlsZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qIFByb2Nlc3MgdGhlIGdpdmVuIGRvY3VtZW50IChpbiBzdHJpbmcgb3IgVkZpbGVcbiAgICogcmVwcmVzZW50YXRpb24pLCBzeW5jLiAqL1xuICBmdW5jdGlvbiBwcm9jZXNzU3luYyhkb2MpIHtcbiAgICB2YXIgY29tcGxldGUgPSBmYWxzZVxuICAgIHZhciBmaWxlXG5cbiAgICBmcmVlemUoKVxuICAgIGFzc2VydFBhcnNlcigncHJvY2Vzc1N5bmMnLCBwcm9jZXNzb3IuUGFyc2VyKVxuICAgIGFzc2VydENvbXBpbGVyKCdwcm9jZXNzU3luYycsIHByb2Nlc3Nvci5Db21waWxlcilcbiAgICBmaWxlID0gdmZpbGUoZG9jKVxuXG4gICAgcHJvY2VzcyhmaWxlLCBkb25lKVxuXG4gICAgYXNzZXJ0RG9uZSgncHJvY2Vzc1N5bmMnLCAncHJvY2VzcycsIGNvbXBsZXRlKVxuXG4gICAgcmV0dXJuIGZpbGVcblxuICAgIGZ1bmN0aW9uIGRvbmUoZXJyKSB7XG4gICAgICBjb21wbGV0ZSA9IHRydWVcbiAgICAgIGJhaWwoZXJyKVxuICAgIH1cbiAgfVxufVxuXG4vKiBDaGVjayBpZiBgZnVuY2AgaXMgYSBjb25zdHJ1Y3Rvci4gKi9cbmZ1bmN0aW9uIG5ld2FibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBrZXlzKHZhbHVlLnByb3RvdHlwZSlcbn1cblxuLyogQ2hlY2sgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3Qgd2l0aCBrZXlzLiAqL1xuZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICB2YXIga2V5XG4gIGZvciAoa2V5IGluIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogQXNzZXJ0IGEgcGFyc2VyIGlzIGF2YWlsYWJsZS4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnNlcihuYW1lLCBQYXJzZXIpIHtcbiAgaWYgKHR5cGVvZiBQYXJzZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBgJyArIG5hbWUgKyAnYCB3aXRob3V0IGBQYXJzZXJgJylcbiAgfVxufVxuXG4vKiBBc3NlcnQgYSBjb21waWxlciBpcyBhdmFpbGFibGUuICovXG5mdW5jdGlvbiBhc3NlcnRDb21waWxlcihuYW1lLCBDb21waWxlcikge1xuICBpZiAodHlwZW9mIENvbXBpbGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgYCcgKyBuYW1lICsgJ2Agd2l0aG91dCBgQ29tcGlsZXJgJylcbiAgfVxufVxuXG4vKiBBc3NlcnQgdGhlIHByb2Nlc3NvciBpcyBub3QgZnJvemVuLiAqL1xuZnVuY3Rpb24gYXNzZXJ0VW5mcm96ZW4obmFtZSwgZnJvemVuKSB7XG4gIGlmIChmcm96ZW4pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBbXG4gICAgICAgICdDYW5ub3QgaW52b2tlIGAnICsgbmFtZSArICdgIG9uIGEgZnJvemVuIHByb2Nlc3Nvci5cXG5DcmVhdGUgYSBuZXcgJyxcbiAgICAgICAgJ3Byb2Nlc3NvciBmaXJzdCwgYnkgaW52b2tpbmcgaXQ6IHVzZSBgcHJvY2Vzc29yKClgIGluc3RlYWQgb2YgJyxcbiAgICAgICAgJ2Bwcm9jZXNzb3JgLidcbiAgICAgIF0uam9pbignJylcbiAgICApXG4gIH1cbn1cblxuLyogQXNzZXJ0IGBub2RlYCBpcyBhIFVuaXN0IG5vZGUuICovXG5mdW5jdGlvbiBhc3NlcnROb2RlKG5vZGUpIHtcbiAgaWYgKCFub2RlIHx8ICFzdHJpbmcobm9kZS50eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9kZSwgZ290IGAnICsgbm9kZSArICdgJylcbiAgfVxufVxuXG4vKiBBc3NlcnQgdGhhdCBgY29tcGxldGVgIGlzIGB0cnVlYC4gKi9cbmZ1bmN0aW9uIGFzc2VydERvbmUobmFtZSwgYXN5bmNOYW1lLCBjb21wbGV0ZSkge1xuICBpZiAoIWNvbXBsZXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2AnICsgbmFtZSArICdgIGZpbmlzaGVkIGFzeW5jLiBVc2UgYCcgKyBhc3luY05hbWUgKyAnYCBpbnN0ZWFkJ1xuICAgIClcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciBpc0FycmF5ID0gZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcblx0aWYgKHR5cGVvZiBBcnJheS5pc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0cmV0dXJuIEFycmF5LmlzQXJyYXkoYXJyKTtcblx0fVxuXG5cdHJldHVybiB0b1N0ci5jYWxsKGFycikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuXG52YXIgaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG5cdGlmICghb2JqIHx8IHRvU3RyLmNhbGwob2JqKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgaGFzT3duQ29uc3RydWN0b3IgPSBoYXNPd24uY2FsbChvYmosICdjb25zdHJ1Y3RvcicpO1xuXHR2YXIgaGFzSXNQcm90b3R5cGVPZiA9IG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IucHJvdG90eXBlICYmIGhhc093bi5jYWxsKG9iai5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdpc1Byb3RvdHlwZU9mJyk7XG5cdC8vIE5vdCBvd24gY29uc3RydWN0b3IgcHJvcGVydHkgbXVzdCBiZSBPYmplY3Rcblx0aWYgKG9iai5jb25zdHJ1Y3RvciAmJiAhaGFzT3duQ29uc3RydWN0b3IgJiYgIWhhc0lzUHJvdG90eXBlT2YpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0Ly8gaWYgbGFzdCBvbmUgaXMgb3duLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIGFyZSBvd24uXG5cdHZhciBrZXk7XG5cdGZvciAoa2V5IGluIG9iaikgeyAvKiovIH1cblxuXHRyZXR1cm4gdHlwZW9mIGtleSA9PT0gJ3VuZGVmaW5lZCcgfHwgaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufTtcblxuLy8gSWYgbmFtZSBpcyAnX19wcm90b19fJywgYW5kIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBhdmFpbGFibGUsIGRlZmluZSBfX3Byb3RvX18gYXMgYW4gb3duIHByb3BlcnR5IG9uIHRhcmdldFxudmFyIHNldFByb3BlcnR5ID0gZnVuY3Rpb24gc2V0UHJvcGVydHkodGFyZ2V0LCBvcHRpb25zKSB7XG5cdGlmIChkZWZpbmVQcm9wZXJ0eSAmJiBvcHRpb25zLm5hbWUgPT09ICdfX3Byb3RvX18nKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBvcHRpb25zLm5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogb3B0aW9ucy5uZXdWYWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0dGFyZ2V0W29wdGlvbnMubmFtZV0gPSBvcHRpb25zLm5ld1ZhbHVlO1xuXHR9XG59O1xuXG4vLyBSZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQgb2YgX19wcm90b19fIGlmICdfX3Byb3RvX18nIGlzIG5vdCBhbiBvd24gcHJvcGVydHlcbnZhciBnZXRQcm9wZXJ0eSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5KG9iaiwgbmFtZSkge1xuXHRpZiAobmFtZSA9PT0gJ19fcHJvdG9fXycpIHtcblx0XHRpZiAoIWhhc093bi5jYWxsKG9iaiwgbmFtZSkpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fSBlbHNlIGlmIChnT1BEKSB7XG5cdFx0XHQvLyBJbiBlYXJseSB2ZXJzaW9ucyBvZiBub2RlLCBvYmpbJ19fcHJvdG9fXyddIGlzIGJ1Z2d5IHdoZW4gb2JqIGhhc1xuXHRcdFx0Ly8gX19wcm90b19fIGFzIGFuIG93biBwcm9wZXJ0eS4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcigpIHdvcmtzLlxuXHRcdFx0cmV0dXJuIGdPUEQob2JqLCBuYW1lKS52YWx1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2JqW25hbWVdO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHRlbmQoKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZTtcblx0dmFyIHRhcmdldCA9IGFyZ3VtZW50c1swXTtcblx0dmFyIGkgPSAxO1xuXHR2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcblx0dmFyIGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnYm9vbGVhbicpIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sxXSB8fCB7fTtcblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0aSA9IDI7XG5cdH1cblx0aWYgKHRhcmdldCA9PSBudWxsIHx8ICh0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nKSkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Zm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xuXHRcdG9wdGlvbnMgPSBhcmd1bWVudHNbaV07XG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmIChvcHRpb25zICE9IG51bGwpIHtcblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAobmFtZSBpbiBvcHRpb25zKSB7XG5cdFx0XHRcdHNyYyA9IGdldFByb3BlcnR5KHRhcmdldCwgbmFtZSk7XG5cdFx0XHRcdGNvcHkgPSBnZXRQcm9wZXJ0eShvcHRpb25zLCBuYW1lKTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICh0YXJnZXQgIT09IGNvcHkpIHtcblx0XHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0XHRpZiAoZGVlcCAmJiBjb3B5ICYmIChpc1BsYWluT2JqZWN0KGNvcHkpIHx8IChjb3B5SXNBcnJheSA9IGlzQXJyYXkoY29weSkpKSkge1xuXHRcdFx0XHRcdFx0aWYgKGNvcHlJc0FycmF5KSB7XG5cdFx0XHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGlzQXJyYXkoc3JjKSA/IHNyYyA6IFtdO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdFx0c2V0UHJvcGVydHkodGFyZ2V0LCB7IG5hbWU6IG5hbWUsIG5ld1ZhbHVlOiBleHRlbmQoZGVlcCwgY2xvbmUsIGNvcHkpIH0pO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGNvcHkgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHRzZXRQcm9wZXJ0eSh0YXJnZXQsIHsgbmFtZTogbmFtZSwgbmV3VmFsdWU6IGNvcHkgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBiYWlsXG5cbmZ1bmN0aW9uIGJhaWwoZXJyKSB7XG4gIGlmIChlcnIpIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVk1lc3NhZ2UgPSByZXF1aXJlKCd2ZmlsZS1tZXNzYWdlJyk7XG52YXIgVkZpbGUgPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWRmlsZTtcblxudmFyIHByb3RvID0gVkZpbGUucHJvdG90eXBlO1xuXG5wcm90by5tZXNzYWdlID0gbWVzc2FnZTtcbnByb3RvLmluZm8gPSBpbmZvO1xucHJvdG8uZmFpbCA9IGZhaWw7XG5cbi8qIFNsaWdodCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gIFJlbW92ZSBpbiB0aGUgZnV0dXJlLiAqL1xucHJvdG8ud2FybiA9IG1lc3NhZ2U7XG5cbi8qIENyZWF0ZSBhIG1lc3NhZ2Ugd2l0aCBgcmVhc29uYCBhdCBgcG9zaXRpb25gLlxuICogV2hlbiBhbiBlcnJvciBpcyBwYXNzZWQgaW4gYXMgYHJlYXNvbmAsIGNvcGllcyB0aGUgc3RhY2suICovXG5mdW5jdGlvbiBtZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbikge1xuICB2YXIgZmlsZVBhdGggPSB0aGlzLnBhdGg7XG4gIHZhciBtZXNzYWdlID0gbmV3IFZNZXNzYWdlKHJlYXNvbiwgcG9zaXRpb24sIG9yaWdpbik7XG5cbiAgaWYgKGZpbGVQYXRoKSB7XG4gICAgbWVzc2FnZS5uYW1lID0gZmlsZVBhdGggKyAnOicgKyBtZXNzYWdlLm5hbWU7XG4gICAgbWVzc2FnZS5maWxlID0gZmlsZVBhdGg7XG4gIH1cblxuICBtZXNzYWdlLmZhdGFsID0gZmFsc2U7XG5cbiAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuXG4gIHJldHVybiBtZXNzYWdlO1xufVxuXG4vKiBGYWlsLiBDcmVhdGVzIGEgdm1lc3NhZ2UsIGFzc29jaWF0ZXMgaXQgd2l0aCB0aGUgZmlsZSxcbiAqIGFuZCB0aHJvd3MgaXQuICovXG5mdW5jdGlvbiBmYWlsKCkge1xuICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIG1lc3NhZ2UuZmF0YWwgPSB0cnVlO1xuXG4gIHRocm93IG1lc3NhZ2U7XG59XG5cbi8qIEluZm8uIENyZWF0ZXMgYSB2bWVzc2FnZSwgYXNzb2NpYXRlcyBpdCB3aXRoIHRoZSBmaWxlLFxuICogYW5kIG1hcmtzIHRoZSBmYXRhbGl0eSBhcyBudWxsLiAqL1xuZnVuY3Rpb24gaW5mbygpIHtcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBtZXNzYWdlLmZhdGFsID0gbnVsbDtcblxuICByZXR1cm4gbWVzc2FnZTtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgc3RyaW5naWZ5ID0gcmVxdWlyZSgndW5pc3QtdXRpbC1zdHJpbmdpZnktcG9zaXRpb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZNZXNzYWdlXG5cbi8vIEluaGVyaXQgZnJvbSBgRXJyb3IjYC5cbmZ1bmN0aW9uIFZNZXNzYWdlUHJvdG90eXBlKCkge31cblZNZXNzYWdlUHJvdG90eXBlLnByb3RvdHlwZSA9IEVycm9yLnByb3RvdHlwZVxuVk1lc3NhZ2UucHJvdG90eXBlID0gbmV3IFZNZXNzYWdlUHJvdG90eXBlKClcblxuLy8gTWVzc2FnZSBwcm9wZXJ0aWVzLlxudmFyIHByb3RvID0gVk1lc3NhZ2UucHJvdG90eXBlXG5cbnByb3RvLmZpbGUgPSAnJ1xucHJvdG8ubmFtZSA9ICcnXG5wcm90by5yZWFzb24gPSAnJ1xucHJvdG8ubWVzc2FnZSA9ICcnXG5wcm90by5zdGFjayA9ICcnXG5wcm90by5mYXRhbCA9IG51bGxcbnByb3RvLmNvbHVtbiA9IG51bGxcbnByb3RvLmxpbmUgPSBudWxsXG5cbi8vIENvbnN0cnVjdCBhIG5ldyBWTWVzc2FnZS5cbi8vXG4vLyBOb3RlOiBXZSBjYW5ub3QgaW52b2tlIGBFcnJvcmAgb24gdGhlIGNyZWF0ZWQgY29udGV4dCwgYXMgdGhhdCBhZGRzIHJlYWRvbmx5XG4vLyBgbGluZWAgYW5kIGBjb2x1bW5gIGF0dHJpYnV0ZXMgb24gU2FmYXJpIDksIHRodXMgdGhyb3dpbmcgYW5kIGZhaWxpbmcgdGhlXG4vLyBkYXRhLlxuZnVuY3Rpb24gVk1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbiwgb3JpZ2luKSB7XG4gIHZhciBwYXJ0c1xuICB2YXIgcmFuZ2VcbiAgdmFyIGxvY2F0aW9uXG5cbiAgaWYgKHR5cGVvZiBwb3NpdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICBvcmlnaW4gPSBwb3NpdGlvblxuICAgIHBvc2l0aW9uID0gbnVsbFxuICB9XG5cbiAgcGFydHMgPSBwYXJzZU9yaWdpbihvcmlnaW4pXG4gIHJhbmdlID0gc3RyaW5naWZ5KHBvc2l0aW9uKSB8fCAnMToxJ1xuXG4gIGxvY2F0aW9uID0ge1xuICAgIHN0YXJ0OiB7bGluZTogbnVsbCwgY29sdW1uOiBudWxsfSxcbiAgICBlbmQ6IHtsaW5lOiBudWxsLCBjb2x1bW46IG51bGx9XG4gIH1cblxuICAvLyBOb2RlLlxuICBpZiAocG9zaXRpb24gJiYgcG9zaXRpb24ucG9zaXRpb24pIHtcbiAgICBwb3NpdGlvbiA9IHBvc2l0aW9uLnBvc2l0aW9uXG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICAvLyBQb3NpdGlvbi5cbiAgICBpZiAocG9zaXRpb24uc3RhcnQpIHtcbiAgICAgIGxvY2F0aW9uID0gcG9zaXRpb25cbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24uc3RhcnRcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUG9pbnQuXG4gICAgICBsb2NhdGlvbi5zdGFydCA9IHBvc2l0aW9uXG4gICAgfVxuICB9XG5cbiAgaWYgKHJlYXNvbi5zdGFjaykge1xuICAgIHRoaXMuc3RhY2sgPSByZWFzb24uc3RhY2tcbiAgICByZWFzb24gPSByZWFzb24ubWVzc2FnZVxuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gcmVhc29uXG4gIHRoaXMubmFtZSA9IHJhbmdlXG4gIHRoaXMucmVhc29uID0gcmVhc29uXG4gIHRoaXMubGluZSA9IHBvc2l0aW9uID8gcG9zaXRpb24ubGluZSA6IG51bGxcbiAgdGhpcy5jb2x1bW4gPSBwb3NpdGlvbiA/IHBvc2l0aW9uLmNvbHVtbiA6IG51bGxcbiAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uXG4gIHRoaXMuc291cmNlID0gcGFydHNbMF1cbiAgdGhpcy5ydWxlSWQgPSBwYXJ0c1sxXVxufVxuXG5mdW5jdGlvbiBwYXJzZU9yaWdpbihvcmlnaW4pIHtcbiAgdmFyIHJlc3VsdCA9IFtudWxsLCBudWxsXVxuICB2YXIgaW5kZXhcblxuICBpZiAodHlwZW9mIG9yaWdpbiA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IG9yaWdpbi5pbmRleE9mKCc6JylcblxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHJlc3VsdFsxXSA9IG9yaWdpblxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbMF0gPSBvcmlnaW4uc2xpY2UoMCwgaW5kZXgpXG4gICAgICByZXN1bHRbMV0gPSBvcmlnaW4uc2xpY2UoaW5kZXggKyAxKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgb3duID0ge30uaGFzT3duUHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdpZnlcblxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gIC8qIE5vdGhpbmcuICovXG4gIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICAvKiBOb2RlLiAqL1xuICBpZiAob3duLmNhbGwodmFsdWUsICdwb3NpdGlvbicpIHx8IG93bi5jYWxsKHZhbHVlLCAndHlwZScpKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9uKHZhbHVlLnBvc2l0aW9uKVxuICB9XG5cbiAgLyogUG9zaXRpb24uICovXG4gIGlmIChvd24uY2FsbCh2YWx1ZSwgJ3N0YXJ0JykgfHwgb3duLmNhbGwodmFsdWUsICdlbmQnKSkge1xuICAgIHJldHVybiBwb3NpdGlvbih2YWx1ZSlcbiAgfVxuXG4gIC8qIFBvaW50LiAqL1xuICBpZiAob3duLmNhbGwodmFsdWUsICdsaW5lJykgfHwgb3duLmNhbGwodmFsdWUsICdjb2x1bW4nKSkge1xuICAgIHJldHVybiBwb2ludCh2YWx1ZSlcbiAgfVxuXG4gIC8qID8gKi9cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gcG9pbnQocG9pbnQpIHtcbiAgaWYgKCFwb2ludCB8fCB0eXBlb2YgcG9pbnQgIT09ICdvYmplY3QnKSB7XG4gICAgcG9pbnQgPSB7fVxuICB9XG5cbiAgcmV0dXJuIGluZGV4KHBvaW50LmxpbmUpICsgJzonICsgaW5kZXgocG9pbnQuY29sdW1uKVxufVxuXG5mdW5jdGlvbiBwb3NpdGlvbihwb3MpIHtcbiAgaWYgKCFwb3MgfHwgdHlwZW9mIHBvcyAhPT0gJ29iamVjdCcpIHtcbiAgICBwb3MgPSB7fVxuICB9XG5cbiAgcmV0dXJuIHBvaW50KHBvcy5zdGFydCkgKyAnLScgKyBwb2ludChwb3MuZW5kKVxufVxuXG5mdW5jdGlvbiBpbmRleCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IHZhbHVlIDogMVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbnZhciByZXBsYWNlID0gcmVxdWlyZSgncmVwbGFjZS1leHQnKTtcbnZhciBidWZmZXIgPSByZXF1aXJlKCdpcy1idWZmZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWRmlsZTtcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xudmFyIHByb3RvID0gVkZpbGUucHJvdG90eXBlO1xuXG5wcm90by50b1N0cmluZyA9IHRvU3RyaW5nO1xuXG4vKiBPcmRlciBvZiBzZXR0aW5nIChsZWFzdCBzcGVjaWZpYyB0byBtb3N0KSwgd2UgbmVlZCB0aGlzIGJlY2F1c2VcbiAqIG90aGVyd2lzZSBge3N0ZW06ICdhJywgcGF0aDogJ34vYi5qcyd9YCB3b3VsZCB0aHJvdywgYXMgYSBwYXRoXG4gKiBpcyBuZWVkZWQgYmVmb3JlIGEgc3RlbSBjYW4gYmUgc2V0LiAqL1xudmFyIG9yZGVyID0gW1xuICAnaGlzdG9yeScsXG4gICdwYXRoJyxcbiAgJ2Jhc2VuYW1lJyxcbiAgJ3N0ZW0nLFxuICAnZXh0bmFtZScsXG4gICdkaXJuYW1lJ1xuXTtcblxuLyogQ29uc3RydWN0IGEgbmV3IGZpbGUuICovXG5mdW5jdGlvbiBWRmlsZShvcHRpb25zKSB7XG4gIHZhciBwcm9wO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyB8fCBidWZmZXIob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0ge2NvbnRlbnRzOiBvcHRpb25zfTtcbiAgfSBlbHNlIGlmICgnbWVzc2FnZScgaW4gb3B0aW9ucyAmJiAnbWVzc2FnZXMnIGluIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBWRmlsZSkpIHtcbiAgICByZXR1cm4gbmV3IFZGaWxlKG9wdGlvbnMpO1xuICB9XG5cbiAgdGhpcy5kYXRhID0ge307XG4gIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgdGhpcy5oaXN0b3J5ID0gW107XG4gIHRoaXMuY3dkID0gcHJvY2Vzcy5jd2QoKTtcblxuICAvKiBTZXQgcGF0aCByZWxhdGVkIHByb3BlcnRpZXMgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuICovXG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IG9yZGVyLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHByb3AgPSBvcmRlcltpbmRleF07XG5cbiAgICBpZiAob3duLmNhbGwob3B0aW9ucywgcHJvcCkpIHtcbiAgICAgIHRoaXNbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgfVxuXG4gIC8qIFNldCBub24tcGF0aCByZWxhdGVkIHByb3BlcnRpZXMuICovXG4gIGZvciAocHJvcCBpbiBvcHRpb25zKSB7XG4gICAgaWYgKG9yZGVyLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICB9XG4gIH1cbn1cblxuLyogQWNjZXNzIGZ1bGwgcGF0aCAoYH4vaW5kZXgubWluLmpzYCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdwYXRoJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5oaXN0b3J5W3RoaXMuaGlzdG9yeS5sZW5ndGggLSAxXTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAocGF0aCkge1xuICAgIGFzc2VydE5vbkVtcHR5KHBhdGgsICdwYXRoJyk7XG5cbiAgICBpZiAocGF0aCAhPT0gdGhpcy5wYXRoKSB7XG4gICAgICB0aGlzLmhpc3RvcnkucHVzaChwYXRoKTtcbiAgICB9XG4gIH1cbn0pO1xuXG4vKiBBY2Nlc3MgcGFyZW50IHBhdGggKGB+YCkuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sICdkaXJuYW1lJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaXMucGF0aCA9PT0gJ3N0cmluZycgPyBwYXRoLmRpcm5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoZGlybmFtZSkge1xuICAgIGFzc2VydFBhdGgodGhpcy5wYXRoLCAnZGlybmFtZScpO1xuICAgIHRoaXMucGF0aCA9IHBhdGguam9pbihkaXJuYW1lIHx8ICcnLCB0aGlzLmJhc2VuYW1lKTtcbiAgfVxufSk7XG5cbi8qIEFjY2VzcyBiYXNlbmFtZSAoYGluZGV4Lm1pbi5qc2ApLiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCAnYmFzZW5hbWUnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoKSA6IHVuZGVmaW5lZDtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbiAoYmFzZW5hbWUpIHtcbiAgICBhc3NlcnROb25FbXB0eShiYXNlbmFtZSwgJ2Jhc2VuYW1lJyk7XG4gICAgYXNzZXJ0UGFydChiYXNlbmFtZSwgJ2Jhc2VuYW1lJyk7XG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgYmFzZW5hbWUpO1xuICB9XG59KTtcblxuLyogQWNjZXNzIGV4dG5hbWUgKGAuanNgKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ2V4dG5hbWUnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguZXh0bmFtZSh0aGlzLnBhdGgpIDogdW5kZWZpbmVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChleHRuYW1lKSB7XG4gICAgdmFyIGV4dCA9IGV4dG5hbWUgfHwgJyc7XG5cbiAgICBhc3NlcnRQYXJ0KGV4dCwgJ2V4dG5hbWUnKTtcbiAgICBhc3NlcnRQYXRoKHRoaXMucGF0aCwgJ2V4dG5hbWUnKTtcblxuICAgIGlmIChleHQpIHtcbiAgICAgIGlmIChleHQuY2hhckF0KDApICE9PSAnLicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZXh0bmFtZWAgbXVzdCBzdGFydCB3aXRoIGAuYCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXh0LmluZGV4T2YoJy4nLCAxKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgZXh0bmFtZWAgY2Fubm90IGNvbnRhaW4gbXVsdGlwbGUgZG90cycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucGF0aCA9IHJlcGxhY2UodGhpcy5wYXRoLCBleHQpO1xuICB9XG59KTtcblxuLyogQWNjZXNzIHN0ZW0gKGBpbmRleC5taW5gKS4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywgJ3N0ZW0nLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0eXBlb2YgdGhpcy5wYXRoID09PSAnc3RyaW5nJyA/IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoLCB0aGlzLmV4dG5hbWUpIDogdW5kZWZpbmVkO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChzdGVtKSB7XG4gICAgYXNzZXJ0Tm9uRW1wdHkoc3RlbSwgJ3N0ZW0nKTtcbiAgICBhc3NlcnRQYXJ0KHN0ZW0sICdzdGVtJyk7XG4gICAgdGhpcy5wYXRoID0gcGF0aC5qb2luKHRoaXMuZGlybmFtZSB8fCAnJywgc3RlbSArICh0aGlzLmV4dG5hbWUgfHwgJycpKTtcbiAgfVxufSk7XG5cbi8qIEdldCB0aGUgdmFsdWUgb2YgdGhlIGZpbGUuICovXG5mdW5jdGlvbiB0b1N0cmluZyhlbmNvZGluZykge1xuICB2YXIgdmFsdWUgPSB0aGlzLmNvbnRlbnRzIHx8ICcnO1xuICByZXR1cm4gYnVmZmVyKHZhbHVlKSA/IHZhbHVlLnRvU3RyaW5nKGVuY29kaW5nKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbi8qIEFzc2VydCB0aGF0IGBwYXJ0YCBpcyBub3QgYSBwYXRoIChpLmUuLCBkb2VzXG4gKiBub3QgY29udGFpbiBgcGF0aC5zZXBgKS4gKi9cbmZ1bmN0aW9uIGFzc2VydFBhcnQocGFydCwgbmFtZSkge1xuICBpZiAocGFydC5pbmRleE9mKHBhdGguc2VwKSAhPT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2AnICsgbmFtZSArICdgIGNhbm5vdCBiZSBhIHBhdGg6IGRpZCBub3QgZXhwZWN0IGAnICsgcGF0aC5zZXAgKyAnYCcpO1xuICB9XG59XG5cbi8qIEFzc2VydCB0aGF0IGBwYXJ0YCBpcyBub3QgZW1wdHkuICovXG5mdW5jdGlvbiBhc3NlcnROb25FbXB0eShwYXJ0LCBuYW1lKSB7XG4gIGlmICghcGFydCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYCcgKyBuYW1lICsgJ2AgY2Fubm90IGJlIGVtcHR5Jyk7XG4gIH1cbn1cblxuLyogQXNzZXJ0IGBwYXRoYCBleGlzdHMuICovXG5mdW5jdGlvbiBhc3NlcnRQYXRoKHBhdGgsIG5hbWUpIHtcbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXR0aW5nIGAnICsgbmFtZSArICdgIHJlcXVpcmVzIGBwYXRoYCB0byBiZSBzZXQgdG9vJyk7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5cbmZ1bmN0aW9uIHJlcGxhY2VFeHQobnBhdGgsIGV4dCkge1xuICBpZiAodHlwZW9mIG5wYXRoICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBucGF0aDtcbiAgfVxuXG4gIGlmIChucGF0aC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnBhdGg7XG4gIH1cblxuICB2YXIgbkZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShucGF0aCwgcGF0aC5leHRuYW1lKG5wYXRoKSkgKyBleHQ7XG4gIHJldHVybiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKG5wYXRoKSwgbkZpbGVOYW1lKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXBsYWNlRXh0O1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCdcblxudmFyIHdyYXAgPSByZXF1aXJlKCcuL3dyYXAuanMnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRyb3VnaFxuXG50cm91Z2gud3JhcCA9IHdyYXBcblxudmFyIHNsaWNlID0gW10uc2xpY2VcblxuLy8gQ3JlYXRlIG5ldyBtaWRkbGV3YXJlLlxuZnVuY3Rpb24gdHJvdWdoKCkge1xuICB2YXIgZm5zID0gW11cbiAgdmFyIG1pZGRsZXdhcmUgPSB7fVxuXG4gIG1pZGRsZXdhcmUucnVuID0gcnVuXG4gIG1pZGRsZXdhcmUudXNlID0gdXNlXG5cbiAgcmV0dXJuIG1pZGRsZXdhcmVcblxuICAvLyBSdW4gYGZuc2AuICBMYXN0IGFyZ3VtZW50IG11c3QgYmUgYSBjb21wbGV0aW9uIGhhbmRsZXIuXG4gIGZ1bmN0aW9uIHJ1bigpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuICAgIHZhciBpbnB1dCA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCAtMSlcbiAgICB2YXIgZG9uZSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV1cblxuICAgIGlmICh0eXBlb2YgZG9uZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiBhcyBsYXN0IGFyZ3VtZW50LCBub3QgJyArIGRvbmUpXG4gICAgfVxuXG4gICAgbmV4dC5hcHBseShudWxsLCBbbnVsbF0uY29uY2F0KGlucHV0KSlcblxuICAgIC8vIFJ1biB0aGUgbmV4dCBgZm5gLCBpZiBhbnkuXG4gICAgZnVuY3Rpb24gbmV4dChlcnIpIHtcbiAgICAgIHZhciBmbiA9IGZuc1srK2luZGV4XVxuICAgICAgdmFyIHBhcmFtcyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKVxuICAgICAgdmFyIHZhbHVlcyA9IHBhcmFtcy5zbGljZSgxKVxuICAgICAgdmFyIGxlbmd0aCA9IGlucHV0Lmxlbmd0aFxuICAgICAgdmFyIHBvcyA9IC0xXG5cbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZG9uZShlcnIpXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBDb3B5IG5vbi1udWxseSBpbnB1dCBpbnRvIHZhbHVlcy5cbiAgICAgIHdoaWxlICgrK3BvcyA8IGxlbmd0aCkge1xuICAgICAgICBpZiAodmFsdWVzW3Bvc10gPT09IG51bGwgfHwgdmFsdWVzW3Bvc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbHVlc1twb3NdID0gaW5wdXRbcG9zXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlucHV0ID0gdmFsdWVzXG5cbiAgICAgIC8vIE5leHQgb3IgZG9uZS5cbiAgICAgIGlmIChmbikge1xuICAgICAgICB3cmFwKGZuLCBuZXh0KS5hcHBseShudWxsLCBpbnB1dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUuYXBwbHkobnVsbCwgW251bGxdLmNvbmNhdChpbnB1dCkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGBmbmAgdG8gdGhlIGxpc3QuXG4gIGZ1bmN0aW9uIHVzZShmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYGZuYCB0byBiZSBhIGZ1bmN0aW9uLCBub3QgJyArIGZuKVxuICAgIH1cblxuICAgIGZucy5wdXNoKGZuKVxuXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlXG5cbm1vZHVsZS5leHBvcnRzID0gd3JhcFxuXG4vLyBXcmFwIGBmbmAuXG4vLyBDYW4gYmUgc3luYyBvciBhc3luYzsgcmV0dXJuIGEgcHJvbWlzZSwgcmVjZWl2ZSBhIGNvbXBsZXRpb24gaGFuZGxlciwgcmV0dXJuXG4vLyBuZXcgdmFsdWVzIGFuZCBlcnJvcnMuXG5mdW5jdGlvbiB3cmFwKGZuLCBjYWxsYmFjaykge1xuICB2YXIgaW52b2tlZFxuXG4gIHJldHVybiB3cmFwcGVkXG5cbiAgZnVuY3Rpb24gd3JhcHBlZCgpIHtcbiAgICB2YXIgcGFyYW1zID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDApXG4gICAgdmFyIGNhbGxiYWNrID0gZm4ubGVuZ3RoID4gcGFyYW1zLmxlbmd0aFxuICAgIHZhciByZXN1bHRcblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgcGFyYW1zLnB1c2goZG9uZSlcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gZm4uYXBwbHkobnVsbCwgcGFyYW1zKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBXZWxsLCB0aGlzIGlzIHF1aXRlIHRoZSBwaWNrbGUuXG4gICAgICAvLyBgZm5gIHJlY2VpdmVkIGEgY2FsbGJhY2sgYW5kIGludm9rZWQgaXQgKHRodXMgY29udGludWluZyB0aGUgcGlwZWxpbmUpLFxuICAgICAgLy8gYnV0IGxhdGVyIGFsc28gdGhyZXcgYW4gZXJyb3IuXG4gICAgICAvLyBXZeKAmXJlIG5vdCBhYm91dCB0byByZXN0YXJ0IHRoZSBwaXBlbGluZSBhZ2Fpbiwgc28gdGhlIG9ubHkgdGhpbmcgbGVmdFxuICAgICAgLy8gdG8gZG8gaXMgdG8gdGhyb3cgdGhlIHRoaW5nIGluc3RlYWQuXG4gICAgICBpZiAoY2FsbGJhY2sgJiYgaW52b2tlZCkge1xuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZG9uZShlcnJvcilcbiAgICB9XG5cbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBpZiAocmVzdWx0ICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXN1bHQudGhlbih0aGVuLCBkb25lKVxuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBkb25lKHJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoZW4ocmVzdWx0KVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEludm9rZSBgbmV4dGAsIG9ubHkgb25jZS5cbiAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICBpZiAoIWludm9rZWQpIHtcbiAgICAgIGludm9rZWQgPSB0cnVlXG5cbiAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICB9XG4gIH1cblxuICAvLyBJbnZva2UgYGRvbmVgIHdpdGggb25lIHZhbHVlLlxuICAvLyBUcmFja3MgaWYgYW4gZXJyb3IgaXMgcGFzc2VkLCB0b28uXG4gIGZ1bmN0aW9uIHRoZW4odmFsdWUpIHtcbiAgICBkb25lKG51bGwsIHZhbHVlKVxuICB9XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpbmdcblxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IFN0cmluZ11cIlxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoeCkge1xuXHR2YXIgcHJvdG90eXBlO1xuXHRyZXR1cm4gdG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScgJiYgKHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSwgcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHt9KSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5oZXJpdCA9IHJlcXVpcmUoJ3VuaGVyaXQnKTtcbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9saWIvcGFyc2VyLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyc2U7XG5wYXJzZS5QYXJzZXIgPSBQYXJzZXI7XG5cbmZ1bmN0aW9uIHBhcnNlKG9wdGlvbnMpIHtcbiAgdmFyIExvY2FsID0gdW5oZXJpdChQYXJzZXIpO1xuICBMb2NhbC5wcm90b3R5cGUub3B0aW9ucyA9IHh0ZW5kKExvY2FsLnByb3RvdHlwZS5vcHRpb25zLCB0aGlzLmRhdGEoJ3NldHRpbmdzJyksIG9wdGlvbnMpO1xuICB0aGlzLlBhcnNlciA9IExvY2FsO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcblxubW9kdWxlLmV4cG9ydHMgPSB1bmhlcml0XG5cbi8vIENyZWF0ZSBhIGN1c3RvbSBjb25zdHJ1Y3RvciB3aGljaCBjYW4gYmUgbW9kaWZpZWQgd2l0aG91dCBhZmZlY3RpbmcgdGhlXG4vLyBvcmlnaW5hbCBjbGFzcy5cbmZ1bmN0aW9uIHVuaGVyaXQoU3VwZXIpIHtcbiAgdmFyIHJlc3VsdFxuICB2YXIga2V5XG4gIHZhciB2YWx1ZVxuXG4gIGluaGVyaXRzKE9mLCBTdXBlcilcbiAgaW5oZXJpdHMoRnJvbSwgT2YpXG5cbiAgLy8gQ2xvbmUgdmFsdWVzLlxuICByZXN1bHQgPSBPZi5wcm90b3R5cGVcblxuICBmb3IgKGtleSBpbiByZXN1bHQpIHtcbiAgICB2YWx1ZSA9IHJlc3VsdFtrZXldXG5cbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSAnY29uY2F0JyBpbiB2YWx1ZSA/IHZhbHVlLmNvbmNhdCgpIDogeHRlbmQodmFsdWUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIE9mXG5cbiAgLy8gQ29uc3RydWN0b3IgYWNjZXB0aW5nIGEgc2luZ2xlIGFyZ3VtZW50LCB3aGljaCBpdHNlbGYgaXMgYW4gYGFyZ3VtZW50c2BcbiAgLy8gb2JqZWN0LlxuICBmdW5jdGlvbiBGcm9tKHBhcmFtZXRlcnMpIHtcbiAgICByZXR1cm4gU3VwZXIuYXBwbHkodGhpcywgcGFyYW1ldGVycylcbiAgfVxuXG4gIC8vIENvbnN0cnVjdG9yIGFjY2VwdGluZyB2YXJpYWRpYyBhcmd1bWVudHMuXG4gIGZ1bmN0aW9uIE9mKCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPZikpIHtcbiAgICAgIHJldHVybiBuZXcgRnJvbShhcmd1bWVudHMpXG4gICAgfVxuXG4gICAgcmV0dXJuIFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgfVxufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIHRvZ2dsZSA9IHJlcXVpcmUoJ3N0YXRlLXRvZ2dsZScpO1xudmFyIHZmaWxlTG9jYXRpb24gPSByZXF1aXJlKCd2ZmlsZS1sb2NhdGlvbicpO1xudmFyIHVuZXNjYXBlID0gcmVxdWlyZSgnLi91bmVzY2FwZScpO1xudmFyIGRlY29kZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG52YXIgdG9rZW5pemVyID0gcmVxdWlyZSgnLi90b2tlbml6ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG5cbmZ1bmN0aW9uIFBhcnNlcihkb2MsIGZpbGUpIHtcbiAgdGhpcy5maWxlID0gZmlsZTtcbiAgdGhpcy5vZmZzZXQgPSB7fTtcbiAgdGhpcy5vcHRpb25zID0geHRlbmQodGhpcy5vcHRpb25zKTtcbiAgdGhpcy5zZXRPcHRpb25zKHt9KTtcblxuICB0aGlzLmluTGlzdCA9IGZhbHNlO1xuICB0aGlzLmluQmxvY2sgPSBmYWxzZTtcbiAgdGhpcy5pbkxpbmsgPSBmYWxzZTtcbiAgdGhpcy5hdFN0YXJ0ID0gdHJ1ZTtcblxuICB0aGlzLnRvT2Zmc2V0ID0gdmZpbGVMb2NhdGlvbihmaWxlKS50b09mZnNldDtcbiAgdGhpcy51bmVzY2FwZSA9IHVuZXNjYXBlKHRoaXMsICdlc2NhcGUnKTtcbiAgdGhpcy5kZWNvZGUgPSBkZWNvZGUodGhpcyk7XG59XG5cbnZhciBwcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbi8qIEV4cG9zZSBjb3JlLiAqL1xucHJvdG8uc2V0T3B0aW9ucyA9IHJlcXVpcmUoJy4vc2V0LW9wdGlvbnMnKTtcbnByb3RvLnBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuXG4vKiBFeHBvc2UgYGRlZmF1bHRzYC4gKi9cbnByb3RvLm9wdGlvbnMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qIEVudGVyIGFuZCBleGl0IGhlbHBlcnMuICovXG5wcm90by5leGl0U3RhcnQgPSB0b2dnbGUoJ2F0U3RhcnQnLCB0cnVlKTtcbnByb3RvLmVudGVyTGlzdCA9IHRvZ2dsZSgnaW5MaXN0JywgZmFsc2UpO1xucHJvdG8uZW50ZXJMaW5rID0gdG9nZ2xlKCdpbkxpbmsnLCBmYWxzZSk7XG5wcm90by5lbnRlckJsb2NrID0gdG9nZ2xlKCdpbkJsb2NrJywgZmFsc2UpO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIHBhcmFncmFwaDpcbiAqXG4gKiBgYGBtYXJrZG93blxuICogQSBwYXJhZ3JhcGgsIGZvbGxvd2VkIGJ5IGEgdGhlbWF0aWMgYnJlYWsuXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgcGFyYWdyYXBoLiAqL1xucHJvdG8uaW50ZXJydXB0UGFyYWdyYXBoID0gW1xuICBbJ3RoZW1hdGljQnJlYWsnXSxcbiAgWydhdHhIZWFkaW5nJ10sXG4gIFsnZmVuY2VkQ29kZSddLFxuICBbJ2Jsb2NrcXVvdGUnXSxcbiAgWydodG1sJ10sXG4gIFsnc2V0ZXh0SGVhZGluZycsIHtjb21tb25tYXJrOiBmYWxzZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBOb2RlcyB0aGF0IGNhbiBpbnRlcnVwdCBhIGxpc3Q6XG4gKlxuICogYGBgbWFya2Rvd25cbiAqIC0gT25lXG4gKiBfX19cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBleGFtcGxlLCB0aGUgdGhlbWF0aWMgYnJlYWsg4oCcaW50ZXJ1cHRz4oCdXG4gKiB0aGUgbGlzdC4gKi9cbnByb3RvLmludGVycnVwdExpc3QgPSBbXG4gIFsnYXR4SGVhZGluZycsIHtwZWRhbnRpYzogZmFsc2V9XSxcbiAgWydmZW5jZWRDb2RlJywge3BlZGFudGljOiBmYWxzZX1dLFxuICBbJ3RoZW1hdGljQnJlYWsnLCB7cGVkYW50aWM6IGZhbHNlfV0sXG4gIFsnZGVmaW5pdGlvbicsIHtjb21tb25tYXJrOiBmYWxzZX1dLFxuICBbJ2Zvb3Rub3RlJywge2NvbW1vbm1hcms6IGZhbHNlfV1cbl07XG5cbi8qIE5vZGVzIHRoYXQgY2FuIGludGVydXB0IGEgYmxvY2txdW90ZTpcbiAqXG4gKiBgYGBtYXJrZG93blxuICogPiBBIHBhcmFncmFwaC5cbiAqIF9fX1xuICogYGBgXG4gKlxuICogSW4gdGhlIGFib3ZlIGV4YW1wbGUsIHRoZSB0aGVtYXRpYyBicmVhayDigJxpbnRlcnVwdHPigJ1cbiAqIHRoZSBibG9ja3F1b3RlLiAqL1xucHJvdG8uaW50ZXJydXB0QmxvY2txdW90ZSA9IFtcbiAgWydpbmRlbnRlZENvZGUnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2ZlbmNlZENvZGUnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2F0eEhlYWRpbmcnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ3NldGV4dEhlYWRpbmcnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ3RoZW1hdGljQnJlYWsnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2h0bWwnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2xpc3QnLCB7Y29tbW9ubWFyazogdHJ1ZX1dLFxuICBbJ2RlZmluaXRpb24nLCB7Y29tbW9ubWFyazogZmFsc2V9XSxcbiAgWydmb290bm90ZScsIHtjb21tb25tYXJrOiBmYWxzZX1dXG5dO1xuXG4vKiBIYW5kbGVycy4gKi9cbnByb3RvLmJsb2NrVG9rZW5pemVycyA9IHtcbiAgbmV3bGluZTogcmVxdWlyZSgnLi90b2tlbml6ZS9uZXdsaW5lJyksXG4gIGluZGVudGVkQ29kZTogcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLWluZGVudGVkJyksXG4gIGZlbmNlZENvZGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvY29kZS1mZW5jZWQnKSxcbiAgYmxvY2txdW90ZTogcmVxdWlyZSgnLi90b2tlbml6ZS9ibG9ja3F1b3RlJyksXG4gIGF0eEhlYWRpbmc6IHJlcXVpcmUoJy4vdG9rZW5pemUvaGVhZGluZy1hdHgnKSxcbiAgdGhlbWF0aWNCcmVhazogcmVxdWlyZSgnLi90b2tlbml6ZS90aGVtYXRpYy1icmVhaycpLFxuICBsaXN0OiByZXF1aXJlKCcuL3Rva2VuaXplL2xpc3QnKSxcbiAgc2V0ZXh0SGVhZGluZzogcmVxdWlyZSgnLi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dCcpLFxuICBodG1sOiByZXF1aXJlKCcuL3Rva2VuaXplL2h0bWwtYmxvY2snKSxcbiAgZm9vdG5vdGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvZm9vdG5vdGUtZGVmaW5pdGlvbicpLFxuICBkZWZpbml0aW9uOiByZXF1aXJlKCcuL3Rva2VuaXplL2RlZmluaXRpb24nKSxcbiAgdGFibGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvdGFibGUnKSxcbiAgcGFyYWdyYXBoOiByZXF1aXJlKCcuL3Rva2VuaXplL3BhcmFncmFwaCcpXG59O1xuXG5wcm90by5pbmxpbmVUb2tlbml6ZXJzID0ge1xuICBlc2NhcGU6IHJlcXVpcmUoJy4vdG9rZW5pemUvZXNjYXBlJyksXG4gIGF1dG9MaW5rOiByZXF1aXJlKCcuL3Rva2VuaXplL2F1dG8tbGluaycpLFxuICB1cmw6IHJlcXVpcmUoJy4vdG9rZW5pemUvdXJsJyksXG4gIGh0bWw6IHJlcXVpcmUoJy4vdG9rZW5pemUvaHRtbC1pbmxpbmUnKSxcbiAgbGluazogcmVxdWlyZSgnLi90b2tlbml6ZS9saW5rJyksXG4gIHJlZmVyZW5jZTogcmVxdWlyZSgnLi90b2tlbml6ZS9yZWZlcmVuY2UnKSxcbiAgc3Ryb25nOiByZXF1aXJlKCcuL3Rva2VuaXplL3N0cm9uZycpLFxuICBlbXBoYXNpczogcmVxdWlyZSgnLi90b2tlbml6ZS9lbXBoYXNpcycpLFxuICBkZWxldGlvbjogcmVxdWlyZSgnLi90b2tlbml6ZS9kZWxldGUnKSxcbiAgY29kZTogcmVxdWlyZSgnLi90b2tlbml6ZS9jb2RlLWlubGluZScpLFxuICBicmVhazogcmVxdWlyZSgnLi90b2tlbml6ZS9icmVhaycpLFxuICB0ZXh0OiByZXF1aXJlKCcuL3Rva2VuaXplL3RleHQnKVxufTtcblxuLyogRXhwb3NlIHByZWNlZGVuY2UuICovXG5wcm90by5ibG9ja01ldGhvZHMgPSBrZXlzKHByb3RvLmJsb2NrVG9rZW5pemVycyk7XG5wcm90by5pbmxpbmVNZXRob2RzID0ga2V5cyhwcm90by5pbmxpbmVUb2tlbml6ZXJzKTtcblxuLyogVG9rZW5pemVycy4gKi9cbnByb3RvLnRva2VuaXplQmxvY2sgPSB0b2tlbml6ZXIoJ2Jsb2NrJyk7XG5wcm90by50b2tlbml6ZUlubGluZSA9IHRva2VuaXplcignaW5saW5lJyk7XG5wcm90by50b2tlbml6ZUZhY3RvcnkgPSB0b2tlbml6ZXI7XG5cbi8qIEdldCBhbGwga2V5cyBpbiBgdmFsdWVgLiAqL1xuZnVuY3Rpb24ga2V5cyh2YWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG5cbiAgZm9yIChrZXkgaW4gdmFsdWUpIHtcbiAgICByZXN1bHQucHVzaChrZXkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnlcblxuLy8gQ29uc3RydWN0IGEgc3RhdGUgYHRvZ2dsZXJgOiBhIGZ1bmN0aW9uIHdoaWNoIGludmVyc2VzIGBwcm9wZXJ0eWAgaW4gY29udGV4dFxuLy8gYmFzZWQgb24gaXRzIGN1cnJlbnQgdmFsdWUuXG4vLyBUaGUgYnkgYHRvZ2dsZXJgIHJldHVybmVkIGZ1bmN0aW9uIHJlc3RvcmVzIHRoYXQgdmFsdWUuXG5mdW5jdGlvbiBmYWN0b3J5KGtleSwgc3RhdGUsIGN0eCkge1xuICByZXR1cm4gZW50ZXJcblxuICBmdW5jdGlvbiBlbnRlcigpIHtcbiAgICB2YXIgY29udGV4dCA9IGN0eCB8fCB0aGlzXG4gICAgdmFyIGN1cnJlbnQgPSBjb250ZXh0W2tleV1cblxuICAgIGNvbnRleHRba2V5XSA9ICFzdGF0ZVxuXG4gICAgcmV0dXJuIGV4aXRcblxuICAgIGZ1bmN0aW9uIGV4aXQoKSB7XG4gICAgICBjb250ZXh0W2tleV0gPSBjdXJyZW50XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5XG5cbmZ1bmN0aW9uIGZhY3RvcnkoZmlsZSkge1xuICB2YXIgY29udGVudHMgPSBpbmRpY2VzKFN0cmluZyhmaWxlKSlcblxuICByZXR1cm4ge1xuICAgIHRvUG9zaXRpb246IG9mZnNldFRvUG9zaXRpb25GYWN0b3J5KGNvbnRlbnRzKSxcbiAgICB0b09mZnNldDogcG9zaXRpb25Ub09mZnNldEZhY3RvcnkoY29udGVudHMpXG4gIH1cbn1cblxuLy8gRmFjdG9yeSB0byBnZXQgdGhlIGxpbmUgYW5kIGNvbHVtbi1iYXNlZCBgcG9zaXRpb25gIGZvciBgb2Zmc2V0YCBpbiB0aGUgYm91bmRcbi8vIGluZGljZXMuXG5mdW5jdGlvbiBvZmZzZXRUb1Bvc2l0aW9uRmFjdG9yeShpbmRpY2VzKSB7XG4gIHJldHVybiBvZmZzZXRUb1Bvc2l0aW9uXG5cbiAgLy8gR2V0IHRoZSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBmb3IgYG9mZnNldGAgaW4gdGhlIGJvdW5kIGluZGljZXMuXG4gIGZ1bmN0aW9uIG9mZnNldFRvUG9zaXRpb24ob2Zmc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTFcbiAgICB2YXIgbGVuZ3RoID0gaW5kaWNlcy5sZW5ndGhcblxuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGluZGljZXNbaW5kZXhdID4gb2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogaW5kZXggKyAxLFxuICAgICAgICAgIGNvbHVtbjogb2Zmc2V0IC0gKGluZGljZXNbaW5kZXggLSAxXSB8fCAwKSArIDEsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7fVxuICB9XG59XG5cbi8vIEZhY3RvcnkgdG8gZ2V0IHRoZSBgb2Zmc2V0YCBmb3IgYSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBpbiB0aGVcbi8vIGJvdW5kIGluZGljZXMuXG5mdW5jdGlvbiBwb3NpdGlvblRvT2Zmc2V0RmFjdG9yeShpbmRpY2VzKSB7XG4gIHJldHVybiBwb3NpdGlvblRvT2Zmc2V0XG5cbiAgLy8gR2V0IHRoZSBgb2Zmc2V0YCBmb3IgYSBsaW5lIGFuZCBjb2x1bW4tYmFzZWQgYHBvc2l0aW9uYCBpbiB0aGUgYm91bmRcbiAgLy8gaW5kaWNlcy5cbiAgZnVuY3Rpb24gcG9zaXRpb25Ub09mZnNldChwb3NpdGlvbikge1xuICAgIHZhciBsaW5lID0gcG9zaXRpb24gJiYgcG9zaXRpb24ubGluZVxuICAgIHZhciBjb2x1bW4gPSBwb3NpdGlvbiAmJiBwb3NpdGlvbi5jb2x1bW5cblxuICAgIGlmICghaXNOYU4obGluZSkgJiYgIWlzTmFOKGNvbHVtbikgJiYgbGluZSAtIDEgaW4gaW5kaWNlcykge1xuICAgICAgcmV0dXJuIChpbmRpY2VzW2xpbmUgLSAyXSB8fCAwKSArIGNvbHVtbiAtIDEgfHwgMFxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG59XG5cbi8vIEdldCBpbmRpY2VzIG9mIGxpbmUtYnJlYWtzIGluIGB2YWx1ZWAuXG5mdW5jdGlvbiBpbmRpY2VzKHZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBbXVxuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nKVxuXG4gIHdoaWxlIChpbmRleCAhPT0gLTEpIHtcbiAgICByZXN1bHQucHVzaChpbmRleCArIDEpXG4gICAgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nLCBpbmRleCArIDEpXG4gIH1cblxuICByZXN1bHQucHVzaCh2YWx1ZS5sZW5ndGggKyAxKVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG4vKiBGYWN0b3J5IHRvIGRlLWVzY2FwZSBhIHZhbHVlLCBiYXNlZCBvbiBhIGxpc3QgYXQgYGtleWBcbiAqIGluIGBjdHhgLiAqL1xuZnVuY3Rpb24gZmFjdG9yeShjdHgsIGtleSkge1xuICByZXR1cm4gdW5lc2NhcGU7XG5cbiAgLyogRGUtZXNjYXBlIGEgc3RyaW5nIHVzaW5nIHRoZSBleHByZXNzaW9uIGF0IGBrZXlgXG4gICAqIGluIGBjdHhgLiAqL1xuICBmdW5jdGlvbiB1bmVzY2FwZSh2YWx1ZSkge1xuICAgIHZhciBwcmV2ID0gMDtcbiAgICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXFxcJyk7XG4gICAgdmFyIGVzY2FwZSA9IGN0eFtrZXldO1xuICAgIHZhciBxdWV1ZSA9IFtdO1xuICAgIHZhciBjaGFyYWN0ZXI7XG5cbiAgICB3aGlsZSAoaW5kZXggIT09IC0xKSB7XG4gICAgICBxdWV1ZS5wdXNoKHZhbHVlLnNsaWNlKHByZXYsIGluZGV4KSk7XG4gICAgICBwcmV2ID0gaW5kZXggKyAxO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHByZXYpO1xuXG4gICAgICAvKiBJZiB0aGUgZm9sbG93aW5nIGNoYXJhY3RlciBpcyBub3QgYSB2YWxpZCBlc2NhcGUsXG4gICAgICAgKiBhZGQgdGhlIHNsYXNoLiAqL1xuICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgZXNjYXBlLmluZGV4T2YoY2hhcmFjdGVyKSA9PT0gLTEpIHtcbiAgICAgICAgcXVldWUucHVzaCgnXFxcXCcpO1xuICAgICAgfVxuXG4gICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoJ1xcXFwnLCBwcmV2KTtcbiAgICB9XG5cbiAgICBxdWV1ZS5wdXNoKHZhbHVlLnNsaWNlKHByZXYpKTtcblxuICAgIHJldHVybiBxdWV1ZS5qb2luKCcnKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIGVudGl0aWVzID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuXG4vKiBGYWN0b3J5IHRvIGNyZWF0ZSBhbiBlbnRpdHkgZGVjb2Rlci4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4KSB7XG4gIGRlY29kZXIucmF3ID0gZGVjb2RlUmF3O1xuXG4gIHJldHVybiBkZWNvZGVyO1xuXG4gIC8qIE5vcm1hbGl6ZSBgcG9zaXRpb25gIHRvIGFkZCBhbiBgaW5kZW50YC4gKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplKHBvc2l0aW9uKSB7XG4gICAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0O1xuICAgIHZhciBsaW5lID0gcG9zaXRpb24ubGluZTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytsaW5lKSB7XG4gICAgICBpZiAoIShsaW5lIGluIG9mZnNldHMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaCgob2Zmc2V0c1tsaW5lXSB8fCAwKSArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogcG9zaXRpb24sXG4gICAgICBpbmRlbnQ6IHJlc3VsdFxuICAgIH07XG4gIH1cblxuICAvKiBIYW5kbGUgYSB3YXJuaW5nLlxuICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3dvb29ybS9wYXJzZS1lbnRpdGllc1xuICAgKiBmb3IgdGhlIHdhcm5pbmdzLiAqL1xuICBmdW5jdGlvbiBoYW5kbGVXYXJuaW5nKHJlYXNvbiwgcG9zaXRpb24sIGNvZGUpIHtcbiAgICBpZiAoY29kZSA9PT0gMykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGN0eC5maWxlLm1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbik7XG4gIH1cblxuICAvKiBEZWNvZGUgYHZhbHVlYCAoYXQgYHBvc2l0aW9uYCkgaW50byB0ZXh0LW5vZGVzLiAqL1xuICBmdW5jdGlvbiBkZWNvZGVyKHZhbHVlLCBwb3NpdGlvbiwgaGFuZGxlcikge1xuICAgIGVudGl0aWVzKHZhbHVlLCB7XG4gICAgICBwb3NpdGlvbjogbm9ybWFsaXplKHBvc2l0aW9uKSxcbiAgICAgIHdhcm5pbmc6IGhhbmRsZVdhcm5pbmcsXG4gICAgICB0ZXh0OiBoYW5kbGVyLFxuICAgICAgcmVmZXJlbmNlOiBoYW5kbGVyLFxuICAgICAgdGV4dENvbnRleHQ6IGN0eCxcbiAgICAgIHJlZmVyZW5jZUNvbnRleHQ6IGN0eFxuICAgIH0pO1xuICB9XG5cbiAgLyogRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gYSBzdHJpbmcuICovXG4gIGZ1bmN0aW9uIGRlY29kZVJhdyh2YWx1ZSwgcG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW50aXRpZXModmFsdWUsIHh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgIHBvc2l0aW9uOiBub3JtYWxpemUocG9zaXRpb24pLFxuICAgICAgd2FybmluZzogaGFuZGxlV2FybmluZ1xuICAgIH0pKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhY3Rvcnk7XG5cbnZhciBNRVJHRUFCTEVfTk9ERVMgPSB7XG4gIHRleHQ6IG1lcmdlVGV4dCxcbiAgYmxvY2txdW90ZTogbWVyZ2VCbG9ja3F1b3RlXG59O1xuXG4vKiBDaGVjayB3aGV0aGVyIGEgbm9kZSBpcyBtZXJnZWFibGUgd2l0aCBhZGphY2VudCBub2Rlcy4gKi9cbmZ1bmN0aW9uIG1lcmdlYWJsZShub2RlKSB7XG4gIHZhciBzdGFydDtcbiAgdmFyIGVuZDtcblxuICBpZiAobm9kZS50eXBlICE9PSAndGV4dCcgfHwgIW5vZGUucG9zaXRpb24pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHN0YXJ0ID0gbm9kZS5wb3NpdGlvbi5zdGFydDtcbiAgZW5kID0gbm9kZS5wb3NpdGlvbi5lbmQ7XG5cbiAgLyogT25seSBtZXJnZSBub2RlcyB3aGljaCBvY2N1cHkgdGhlIHNhbWUgc2l6ZSBhcyB0aGVpclxuICAgKiBgdmFsdWVgLiAqL1xuICByZXR1cm4gc3RhcnQubGluZSAhPT0gZW5kLmxpbmUgfHxcbiAgICAgIGVuZC5jb2x1bW4gLSBzdGFydC5jb2x1bW4gPT09IG5vZGUudmFsdWUubGVuZ3RoO1xufVxuXG4vKiBNZXJnZSB0d28gdGV4dCBub2RlczogYG5vZGVgIGludG8gYHByZXZgLiAqL1xuZnVuY3Rpb24gbWVyZ2VUZXh0KHByZXYsIG5vZGUpIHtcbiAgcHJldi52YWx1ZSArPSBub2RlLnZhbHVlO1xuXG4gIHJldHVybiBwcmV2O1xufVxuXG4vKiBNZXJnZSB0d28gYmxvY2txdW90ZXM6IGBub2RlYCBpbnRvIGBwcmV2YCwgdW5sZXNzIGluXG4gKiBDb21tb25NYXJrIG1vZGUuICovXG5mdW5jdGlvbiBtZXJnZUJsb2NrcXVvdGUocHJldiwgbm9kZSkge1xuICBpZiAodGhpcy5vcHRpb25zLmNvbW1vbm1hcmspIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHByZXYuY2hpbGRyZW4gPSBwcmV2LmNoaWxkcmVuLmNvbmNhdChub2RlLmNoaWxkcmVuKTtcblxuICByZXR1cm4gcHJldjtcbn1cblxuLyogQ29uc3RydWN0IGEgdG9rZW5pemVyLiAgVGhpcyBjcmVhdGVzIGJvdGhcbiAqIGB0b2tlbml6ZUlubGluZWAgYW5kIGB0b2tlbml6ZUJsb2NrYC4gKi9cbmZ1bmN0aW9uIGZhY3RvcnkodHlwZSkge1xuICByZXR1cm4gdG9rZW5pemU7XG5cbiAgLyogVG9rZW5pemVyIGZvciBhIGJvdW5kIGB0eXBlYC4gKi9cbiAgZnVuY3Rpb24gdG9rZW5pemUodmFsdWUsIGxvY2F0aW9uKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBvZmZzZXQgPSBzZWxmLm9mZnNldDtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIG1ldGhvZHMgPSBzZWxmW3R5cGUgKyAnTWV0aG9kcyddO1xuICAgIHZhciB0b2tlbml6ZXJzID0gc2VsZlt0eXBlICsgJ1Rva2VuaXplcnMnXTtcbiAgICB2YXIgbGluZSA9IGxvY2F0aW9uLmxpbmU7XG4gICAgdmFyIGNvbHVtbiA9IGxvY2F0aW9uLmNvbHVtbjtcbiAgICB2YXIgaW5kZXg7XG4gICAgdmFyIGxlbmd0aDtcbiAgICB2YXIgbWV0aG9kO1xuICAgIHZhciBuYW1lO1xuICAgIHZhciBtYXRjaGVkO1xuICAgIHZhciB2YWx1ZUxlbmd0aDtcblxuICAgIC8qIFRyaW0gd2hpdGUgc3BhY2Ugb25seSBsaW5lcy4gKi9cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH1cblxuICAgIC8qIEV4cG9zZSBvbiBgZWF0YC4gKi9cbiAgICBlYXQubm93ID0gbm93O1xuICAgIGVhdC5maWxlID0gc2VsZi5maWxlO1xuXG4gICAgLyogU3luYyBpbml0aWFsIG9mZnNldC4gKi9cbiAgICB1cGRhdGVQb3NpdGlvbignJyk7XG5cbiAgICAvKiBJdGVyYXRlIG92ZXIgYHZhbHVlYCwgYW5kIGl0ZXJhdGUgb3ZlciBhbGxcbiAgICAgKiB0b2tlbml6ZXJzLiAgV2hlbiBvbmUgZWF0cyBzb21ldGhpbmcsIHJlLWl0ZXJhdGVcbiAgICAgKiB3aXRoIHRoZSByZW1haW5pbmcgdmFsdWUuICBJZiBubyB0b2tlbml6ZXIgZWF0cyxcbiAgICAgKiBzb21ldGhpbmcgZmFpbGVkIChzaG91bGQgbm90IGhhcHBlbikgYW5kIGFuXG4gICAgICogZXhjZXB0aW9uIGlzIHRocm93bi4gKi9cbiAgICB3aGlsZSAodmFsdWUpIHtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDtcbiAgICAgIG1hdGNoZWQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgbmFtZSA9IG1ldGhvZHNbaW5kZXhdO1xuICAgICAgICBtZXRob2QgPSB0b2tlbml6ZXJzW25hbWVdO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBtZXRob2QgJiZcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAoIW1ldGhvZC5vbmx5QXRTdGFydCB8fCBzZWxmLmF0U3RhcnQpICYmXG4gICAgICAgICAgKCFtZXRob2Qubm90SW5MaXN0IHx8ICFzZWxmLmluTGlzdCkgJiZcbiAgICAgICAgICAoIW1ldGhvZC5ub3RJbkJsb2NrIHx8ICFzZWxmLmluQmxvY2spICYmXG4gICAgICAgICAgKCFtZXRob2Qubm90SW5MaW5rIHx8ICFzZWxmLmluTGluaylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFsdWVMZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICBtZXRob2QuYXBwbHkoc2VsZiwgW2VhdCwgdmFsdWVdKTtcblxuICAgICAgICAgIG1hdGNoZWQgPSB2YWx1ZUxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICBzZWxmLmZpbGUuZmFpbChuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AnKSwgZWF0Lm5vdygpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxmLmVvZiA9IG5vdygpO1xuXG4gICAgcmV0dXJuIHRva2VucztcblxuICAgIC8qIFVwZGF0ZSBsaW5lLCBjb2x1bW4sIGFuZCBvZmZzZXQgYmFzZWQgb25cbiAgICAgKiBgdmFsdWVgLiAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVBvc2l0aW9uKHN1YnZhbHVlKSB7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gLTE7XG4gICAgICB2YXIgaW5kZXggPSBzdWJ2YWx1ZS5pbmRleE9mKCdcXG4nKTtcblxuICAgICAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBsaW5lKys7XG4gICAgICAgIGxhc3RJbmRleCA9IGluZGV4O1xuICAgICAgICBpbmRleCA9IHN1YnZhbHVlLmluZGV4T2YoJ1xcbicsIGluZGV4ICsgMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0SW5kZXggPT09IC0xKSB7XG4gICAgICAgIGNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2x1bW4gPSBzdWJ2YWx1ZS5sZW5ndGggLSBsYXN0SW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lIGluIG9mZnNldCkge1xuICAgICAgICBpZiAobGFzdEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIGNvbHVtbiArPSBvZmZzZXRbbGluZV07XG4gICAgICAgIH0gZWxzZSBpZiAoY29sdW1uIDw9IG9mZnNldFtsaW5lXSkge1xuICAgICAgICAgIGNvbHVtbiA9IG9mZnNldFtsaW5lXSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBHZXQgb2Zmc2V0LiAgQ2FsbGVkIGJlZm9yZSB0aGUgZmlyc3QgY2hhcmFjdGVyIGlzXG4gICAgICogZWF0ZW4gdG8gcmV0cmlldmUgdGhlIHJhbmdlJ3Mgb2Zmc2V0cy4gKi9cbiAgICBmdW5jdGlvbiBnZXRPZmZzZXQoKSB7XG4gICAgICB2YXIgaW5kZW50YXRpb24gPSBbXTtcbiAgICAgIHZhciBwb3MgPSBsaW5lICsgMTtcblxuICAgICAgLyogRG9uZS4gIENhbGxlZCB3aGVuIHRoZSBsYXN0IGNoYXJhY3RlciBpc1xuICAgICAgICogZWF0ZW4gdG8gcmV0cmlldmUgdGhlIHJhbmdl4oCZcyBvZmZzZXRzLiAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGxhc3QgPSBsaW5lICsgMTtcblxuICAgICAgICB3aGlsZSAocG9zIDwgbGFzdCkge1xuICAgICAgICAgIGluZGVudGF0aW9uLnB1c2goKG9mZnNldFtwb3NdIHx8IDApICsgMSk7XG5cbiAgICAgICAgICBwb3MrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRlbnRhdGlvbjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyogR2V0IHRoZSBjdXJyZW50IHBvc2l0aW9uLiAqL1xuICAgIGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgIHZhciBwb3MgPSB7bGluZTogbGluZSwgY29sdW1uOiBjb2x1bW59O1xuXG4gICAgICBwb3Mub2Zmc2V0ID0gc2VsZi50b09mZnNldChwb3MpO1xuXG4gICAgICByZXR1cm4gcG9zO1xuICAgIH1cblxuICAgIC8qIFN0b3JlIHBvc2l0aW9uIGluZm9ybWF0aW9uIGZvciBhIG5vZGUuICovXG4gICAgZnVuY3Rpb24gUG9zaXRpb24oc3RhcnQpIHtcbiAgICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICAgIHRoaXMuZW5kID0gbm93KCk7XG4gICAgfVxuXG4gICAgLyogVGhyb3cgd2hlbiBhIHZhbHVlIGlzIGluY29ycmVjdGx5IGVhdGVuLlxuICAgICAqIFRoaXMgc2hvdWxkbuKAmXQgaGFwcGVuIGJ1dCB3aWxsIHRocm93IG9uIG5ldyxcbiAgICAgKiBpbmNvcnJlY3QgcnVsZXMuICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVFYXQoc3VidmFsdWUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHZhbHVlLnN1YnN0cmluZygwLCBzdWJ2YWx1ZS5sZW5ndGgpICE9PSBzdWJ2YWx1ZSkge1xuICAgICAgICAvKiBDYXB0dXJlIHN0YWNrLXRyYWNlLiAqL1xuICAgICAgICBzZWxmLmZpbGUuZmFpbChcbiAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnSW5jb3JyZWN0bHkgZWF0ZW4gdmFsdWU6IHBsZWFzZSByZXBvcnQgdGhpcyAnICtcbiAgICAgICAgICAgICd3YXJuaW5nIG9uIGh0dHA6Ly9naXQuaW8vdmc1RnQnXG4gICAgICAgICAgKSxcbiAgICAgICAgICBub3coKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIE1hcmsgcG9zaXRpb24gYW5kIHBhdGNoIGBub2RlLnBvc2l0aW9uYC4gKi9cbiAgICBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICAgIHZhciBiZWZvcmUgPSBub3coKTtcblxuICAgICAgcmV0dXJuIHVwZGF0ZTtcblxuICAgICAgLyogQWRkIHRoZSBwb3NpdGlvbiB0byBhIG5vZGUuICovXG4gICAgICBmdW5jdGlvbiB1cGRhdGUobm9kZSwgaW5kZW50KSB7XG4gICAgICAgIHZhciBwcmV2ID0gbm9kZS5wb3NpdGlvbjtcbiAgICAgICAgdmFyIHN0YXJ0ID0gcHJldiA/IHByZXYuc3RhcnQgOiBiZWZvcmU7XG4gICAgICAgIHZhciBjb21iaW5lZCA9IFtdO1xuICAgICAgICB2YXIgbiA9IHByZXYgJiYgcHJldi5lbmQubGluZTtcbiAgICAgICAgdmFyIGwgPSBiZWZvcmUubGluZTtcblxuICAgICAgICBub2RlLnBvc2l0aW9uID0gbmV3IFBvc2l0aW9uKHN0YXJ0KTtcblxuICAgICAgICAvKiBJZiB0aGVyZSB3YXMgYWxyZWFkeSBhIGBwb3NpdGlvbmAsIHRoaXNcbiAgICAgICAgICogbm9kZSB3YXMgbWVyZ2VkLiAgRml4aW5nIGBzdGFydGAgd2FzbuKAmXRcbiAgICAgICAgICogaGFyZCwgYnV0IHRoZSBpbmRlbnQgaXMgZGlmZmVyZW50LlxuICAgICAgICAgKiBFc3BlY2lhbGx5IGJlY2F1c2Ugc29tZSBpbmZvcm1hdGlvbiwgdGhlXG4gICAgICAgICAqIGluZGVudCBiZXR3ZWVuIGBuYCBhbmQgYGxgIHdhc27igJl0XG4gICAgICAgICAqIHRyYWNrZWQuICBMdWNraWx5LCB0aGF0IHNwYWNlIGlzXG4gICAgICAgICAqIChzaG91bGQgYmU/KSBlbXB0eSwgc28gd2UgY2FuIHNhZmVseVxuICAgICAgICAgKiBjaGVjayBmb3IgaXQgbm93LiAqL1xuICAgICAgICBpZiAocHJldiAmJiBpbmRlbnQgJiYgcHJldi5pbmRlbnQpIHtcbiAgICAgICAgICBjb21iaW5lZCA9IHByZXYuaW5kZW50O1xuXG4gICAgICAgICAgaWYgKG4gPCBsKSB7XG4gICAgICAgICAgICB3aGlsZSAoKytuIDwgbCkge1xuICAgICAgICAgICAgICBjb21iaW5lZC5wdXNoKChvZmZzZXRbbl0gfHwgMCkgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tYmluZWQucHVzaChiZWZvcmUuY29sdW1uKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRlbnQgPSBjb21iaW5lZC5jb25jYXQoaW5kZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUucG9zaXRpb24uaW5kZW50ID0gaW5kZW50IHx8IFtdO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEFkZCBgbm9kZWAgdG8gYHBhcmVudGBzIGNoaWxkcmVuIG9yIHRvIGB0b2tlbnNgLlxuICAgICAqIFBlcmZvcm1zIG1lcmdlcyB3aGVyZSBwb3NzaWJsZS4gKi9cbiAgICBmdW5jdGlvbiBhZGQobm9kZSwgcGFyZW50KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwYXJlbnQgPyBwYXJlbnQuY2hpbGRyZW4gOiB0b2tlbnM7XG4gICAgICB2YXIgcHJldiA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAoXG4gICAgICAgIHByZXYgJiZcbiAgICAgICAgbm9kZS50eXBlID09PSBwcmV2LnR5cGUgJiZcbiAgICAgICAgbm9kZS50eXBlIGluIE1FUkdFQUJMRV9OT0RFUyAmJlxuICAgICAgICBtZXJnZWFibGUocHJldikgJiZcbiAgICAgICAgbWVyZ2VhYmxlKG5vZGUpXG4gICAgICApIHtcbiAgICAgICAgbm9kZSA9IE1FUkdFQUJMRV9OT0RFU1tub2RlLnR5cGVdLmNhbGwoc2VsZiwgcHJldiwgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlICE9PSBwcmV2KSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxmLmF0U3RhcnQgJiYgdG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBzZWxmLmV4aXRTdGFydCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKiBSZW1vdmUgYHN1YnZhbHVlYCBmcm9tIGB2YWx1ZWAuXG4gICAgICogYHN1YnZhbHVlYCBtdXN0IGJlIGF0IHRoZSBzdGFydCBvZiBgdmFsdWVgLiAqL1xuICAgIGZ1bmN0aW9uIGVhdChzdWJ2YWx1ZSkge1xuICAgICAgdmFyIGluZGVudCA9IGdldE9mZnNldCgpO1xuICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uKCk7XG4gICAgICB2YXIgY3VycmVudCA9IG5vdygpO1xuXG4gICAgICB2YWxpZGF0ZUVhdChzdWJ2YWx1ZSk7XG5cbiAgICAgIGFwcGx5LnJlc2V0ID0gcmVzZXQ7XG4gICAgICByZXNldC50ZXN0ID0gdGVzdDtcbiAgICAgIGFwcGx5LnRlc3QgPSB0ZXN0O1xuXG4gICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZyhzdWJ2YWx1ZS5sZW5ndGgpO1xuXG4gICAgICB1cGRhdGVQb3NpdGlvbihzdWJ2YWx1ZSk7XG5cbiAgICAgIGluZGVudCA9IGluZGVudCgpO1xuXG4gICAgICByZXR1cm4gYXBwbHk7XG5cbiAgICAgIC8qIEFkZCB0aGUgZ2l2ZW4gYXJndW1lbnRzLCBhZGQgYHBvc2l0aW9uYCB0b1xuICAgICAgICogdGhlIHJldHVybmVkIG5vZGUsIGFuZCByZXR1cm4gdGhlIG5vZGUuICovXG4gICAgICBmdW5jdGlvbiBhcHBseShub2RlLCBwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvcyhhZGQocG9zKG5vZGUpLCBwYXJlbnQpLCBpbmRlbnQpO1xuICAgICAgfVxuXG4gICAgICAvKiBGdW5jdGlvbnMganVzdCBsaWtlIGFwcGx5LCBidXQgcmVzZXRzIHRoZVxuICAgICAgICogY29udGVudDogIHRoZSBsaW5lIGFuZCBjb2x1bW4gYXJlIHJldmVyc2VkLFxuICAgICAgICogYW5kIHRoZSBlYXRlbiB2YWx1ZSBpcyByZS1hZGRlZC5cbiAgICAgICAqIFRoaXMgaXMgdXNlZnVsIGZvciBub2RlcyB3aXRoIGEgc2luZ2xlXG4gICAgICAgKiB0eXBlIG9mIGNvbnRlbnQsIHN1Y2ggYXMgbGlzdHMgYW5kIHRhYmxlcy5cbiAgICAgICAqIFNlZSBgYXBwbHlgIGFib3ZlIGZvciB3aGF0IHBhcmFtZXRlcnMgYXJlXG4gICAgICAgKiBleHBlY3RlZC4gKi9cbiAgICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICB2YXIgbm9kZSA9IGFwcGx5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgbGluZSA9IGN1cnJlbnQubGluZTtcbiAgICAgICAgY29sdW1uID0gY3VycmVudC5jb2x1bW47XG4gICAgICAgIHZhbHVlID0gc3VidmFsdWUgKyB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cblxuICAgICAgLyogVGVzdCB0aGUgcG9zaXRpb24sIGFmdGVyIGVhdGluZywgYW5kIHJldmVyc2VcbiAgICAgICAqIHRvIGEgbm90LWVhdGVuIHN0YXRlLiAqL1xuICAgICAgZnVuY3Rpb24gdGVzdCgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHBvcyh7fSk7XG5cbiAgICAgICAgbGluZSA9IGN1cnJlbnQubGluZTtcbiAgICAgICAgY29sdW1uID0gY3VycmVudC5jb2x1bW47XG4gICAgICAgIHZhbHVlID0gc3VidmFsdWUgKyB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0LnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpO1xudmFyIGVzY2FwZXMgPSByZXF1aXJlKCdtYXJrZG93bi1lc2NhcGVzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0T3B0aW9ucztcblxuZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGN1cnJlbnQgPSBzZWxmLm9wdGlvbnM7XG4gIHZhciBrZXk7XG4gIHZhciB2YWx1ZTtcblxuICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB4dGVuZChvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnSW52YWxpZCB2YWx1ZSBgJyArIG9wdGlvbnMgKyAnYCAnICtcbiAgICAgICdmb3Igc2V0dGluZyBgb3B0aW9uc2AnXG4gICAgKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIGRlZmF1bHRzKSB7XG4gICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG5cbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKGtleSAhPT0gJ2Jsb2NrcycgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHx8XG4gICAgICAoa2V5ID09PSAnYmxvY2tzJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGAnICsgdmFsdWUgKyAnYCBmb3Igc2V0dGluZyBgb3B0aW9ucy4nICsga2V5ICsgJ2AnKTtcbiAgICB9XG5cbiAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHNlbGYub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHNlbGYuZXNjYXBlID0gZXNjYXBlcyhvcHRpb25zKTtcblxuICByZXR1cm4gc2VsZjtcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVzY2FwZXNcblxudmFyIGRlZmF1bHRzID0gW1xuICAnXFxcXCcsXG4gICdgJyxcbiAgJyonLFxuICAneycsXG4gICd9JyxcbiAgJ1snLFxuICAnXScsXG4gICcoJyxcbiAgJyknLFxuICAnIycsXG4gICcrJyxcbiAgJy0nLFxuICAnLicsXG4gICchJyxcbiAgJ18nLFxuICAnPidcbl1cblxudmFyIGdmbSA9IGRlZmF1bHRzLmNvbmNhdChbJ34nLCAnfCddKVxuXG52YXIgY29tbW9ubWFyayA9IGdmbS5jb25jYXQoW1xuICAnXFxuJyxcbiAgJ1wiJyxcbiAgJyQnLFxuICAnJScsXG4gICcmJyxcbiAgXCInXCIsXG4gICcsJyxcbiAgJy8nLFxuICAnOicsXG4gICc7JyxcbiAgJzwnLFxuICAnPScsXG4gICc/JyxcbiAgJ0AnLFxuICAnXidcbl0pXG5cbmVzY2FwZXMuZGVmYXVsdCA9IGRlZmF1bHRzXG5lc2NhcGVzLmdmbSA9IGdmbVxuZXNjYXBlcy5jb21tb25tYXJrID0gY29tbW9ubWFya1xuXG4vLyBHZXQgbWFya2Rvd24gZXNjYXBlcy5cbmZ1bmN0aW9uIGVzY2FwZXMob3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHNldHRpbmdzLmNvbW1vbm1hcmspIHtcbiAgICByZXR1cm4gY29tbW9ubWFya1xuICB9XG5cbiAgcmV0dXJuIHNldHRpbmdzLmdmbSA/IGdmbSA6IGRlZmF1bHRzXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG52YXIgcmVtb3ZlUG9zaXRpb24gPSByZXF1aXJlKCd1bmlzdC11dGlsLXJlbW92ZS1wb3NpdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgRVhQUkVTU0lPTl9MSU5FX0JSRUFLUyA9IC9cXHJcXG58XFxyL2c7XG5cbi8qIFBhcnNlIHRoZSBib3VuZCBmaWxlLiAqL1xuZnVuY3Rpb24gcGFyc2UoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHZhbHVlID0gU3RyaW5nKHNlbGYuZmlsZSk7XG4gIHZhciBzdGFydCA9IHtsaW5lOiAxLCBjb2x1bW46IDEsIG9mZnNldDogMH07XG4gIHZhciBjb250ZW50ID0geHRlbmQoc3RhcnQpO1xuICB2YXIgbm9kZTtcblxuICAvKiBDbGVhbiBub24tdW5peCBuZXdsaW5lczogYFxcclxcbmAgYW5kIGBcXHJgIGFyZSBhbGxcbiAgICogY2hhbmdlZCB0byBgXFxuYC4gIFRoaXMgc2hvdWxkIG5vdCBhZmZlY3QgcG9zaXRpb25hbFxuICAgKiBpbmZvcm1hdGlvbi4gKi9cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fTElORV9CUkVBS1MsIENfTkVXTElORSk7XG5cbiAgaWYgKHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSk7XG5cbiAgICBjb250ZW50LmNvbHVtbisrO1xuICAgIGNvbnRlbnQub2Zmc2V0Kys7XG4gIH1cblxuICBub2RlID0ge1xuICAgIHR5cGU6ICdyb290JyxcbiAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUJsb2NrKHZhbHVlLCBjb250ZW50KSxcbiAgICBwb3NpdGlvbjoge1xuICAgICAgc3RhcnQ6IHN0YXJ0LFxuICAgICAgZW5kOiBzZWxmLmVvZiB8fCB4dGVuZChzdGFydClcbiAgICB9XG4gIH07XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMucG9zaXRpb24pIHtcbiAgICByZW1vdmVQb3NpdGlvbihub2RlLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciB2aXNpdCA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtdmlzaXQnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZVBvc2l0aW9uXG5cbmZ1bmN0aW9uIHJlbW92ZVBvc2l0aW9uKG5vZGUsIGZvcmNlKSB7XG4gIHZpc2l0KG5vZGUsIGZvcmNlID8gaGFyZCA6IHNvZnQpXG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIGhhcmQobm9kZSkge1xuICBkZWxldGUgbm9kZS5wb3NpdGlvblxufVxuXG5mdW5jdGlvbiBzb2Z0KG5vZGUpIHtcbiAgbm9kZS5wb3NpdGlvbiA9IHVuZGVmaW5lZFxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gdmlzaXRQYXJlbnRzXG5cbnZhciBjb252ZXJ0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC1pcy9jb252ZXJ0JylcblxudmFyIENPTlRJTlVFID0gdHJ1ZVxudmFyIFNLSVAgPSAnc2tpcCdcbnZhciBFWElUID0gZmFsc2VcblxudmlzaXRQYXJlbnRzLkNPTlRJTlVFID0gQ09OVElOVUVcbnZpc2l0UGFyZW50cy5TS0lQID0gU0tJUFxudmlzaXRQYXJlbnRzLkVYSVQgPSBFWElUXG5cbmZ1bmN0aW9uIHZpc2l0UGFyZW50cyh0cmVlLCB0ZXN0LCB2aXNpdG9yLCByZXZlcnNlKSB7XG4gIHZhciBpc1xuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmlzaXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldmVyc2UgPSB2aXNpdG9yXG4gICAgdmlzaXRvciA9IHRlc3RcbiAgICB0ZXN0ID0gbnVsbFxuICB9XG5cbiAgaXMgPSBjb252ZXJ0KHRlc3QpXG5cbiAgb25lKHRyZWUsIG51bGwsIFtdKVxuXG4gIC8vIFZpc2l0IGEgc2luZ2xlIG5vZGUuXG4gIGZ1bmN0aW9uIG9uZShub2RlLCBpbmRleCwgcGFyZW50cykge1xuICAgIHZhciByZXN1bHQgPSBbXVxuICAgIHZhciBzdWJyZXN1bHRcblxuICAgIGlmICghdGVzdCB8fCBpcyhub2RlLCBpbmRleCwgcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdIHx8IG51bGwpKSB7XG4gICAgICByZXN1bHQgPSB0b1Jlc3VsdCh2aXNpdG9yKG5vZGUsIHBhcmVudHMpKVxuXG4gICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiByZXN1bHRbMF0gIT09IFNLSVApIHtcbiAgICAgIHN1YnJlc3VsdCA9IHRvUmVzdWx0KGFsbChub2RlLmNoaWxkcmVuLCBwYXJlbnRzLmNvbmNhdChub2RlKSkpXG4gICAgICByZXR1cm4gc3VicmVzdWx0WzBdID09PSBFWElUID8gc3VicmVzdWx0IDogcmVzdWx0XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLy8gVmlzaXQgY2hpbGRyZW4gaW4gYHBhcmVudGAuXG4gIGZ1bmN0aW9uIGFsbChjaGlsZHJlbiwgcGFyZW50cykge1xuICAgIHZhciBtaW4gPSAtMVxuICAgIHZhciBzdGVwID0gcmV2ZXJzZSA/IC0xIDogMVxuICAgIHZhciBpbmRleCA9IChyZXZlcnNlID8gY2hpbGRyZW4ubGVuZ3RoIDogbWluKSArIHN0ZXBcbiAgICB2YXIgcmVzdWx0XG5cbiAgICB3aGlsZSAoaW5kZXggPiBtaW4gJiYgaW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdCA9IG9uZShjaGlsZHJlbltpbmRleF0sIGluZGV4LCBwYXJlbnRzKVxuXG4gICAgICBpZiAocmVzdWx0WzBdID09PSBFWElUKSB7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cblxuICAgICAgaW5kZXggPSB0eXBlb2YgcmVzdWx0WzFdID09PSAnbnVtYmVyJyA/IHJlc3VsdFsxXSA6IGluZGV4ICsgc3RlcFxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0b1Jlc3VsdCh2YWx1ZSkge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiB2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gW0NPTlRJTlVFLCB2YWx1ZV1cbiAgfVxuXG4gIHJldHVybiBbdmFsdWVdXG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0XG5cbmZ1bmN0aW9uIGNvbnZlcnQodGVzdCkge1xuICBpZiAodHlwZW9mIHRlc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGVGYWN0b3J5KHRlc3QpXG4gIH1cblxuICBpZiAodGVzdCA9PT0gbnVsbCB8fCB0ZXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gb2tcbiAgfVxuXG4gIGlmICh0eXBlb2YgdGVzdCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gKCdsZW5ndGgnIGluIHRlc3QgPyBhbnlGYWN0b3J5IDogbWF0Y2hlc0ZhY3RvcnkpKHRlc3QpXG4gIH1cblxuICBpZiAodHlwZW9mIHRlc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdGVzdFxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBmdW5jdGlvbiwgc3RyaW5nLCBvciBvYmplY3QgYXMgdGVzdCcpXG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRBbGwodGVzdHMpIHtcbiAgdmFyIHJlc3VsdHMgPSBbXVxuICB2YXIgbGVuZ3RoID0gdGVzdHMubGVuZ3RoXG4gIHZhciBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRzW2luZGV4XSA9IGNvbnZlcnQodGVzdHNbaW5kZXhdKVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdHNcbn1cblxuLy8gVXRpbGl0eSBhc3NlcnQgZWFjaCBwcm9wZXJ0eSBpbiBgdGVzdGAgaXMgcmVwcmVzZW50ZWQgaW4gYG5vZGVgLCBhbmQgZWFjaFxuLy8gdmFsdWVzIGFyZSBzdHJpY3RseSBlcXVhbC5cbmZ1bmN0aW9uIG1hdGNoZXNGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIG1hdGNoZXNcblxuICBmdW5jdGlvbiBtYXRjaGVzKG5vZGUpIHtcbiAgICB2YXIga2V5XG5cbiAgICBmb3IgKGtleSBpbiB0ZXN0KSB7XG4gICAgICBpZiAobm9kZVtrZXldICE9PSB0ZXN0W2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBhbnlGYWN0b3J5KHRlc3RzKSB7XG4gIHZhciBjaGVja3MgPSBjb252ZXJ0QWxsKHRlc3RzKVxuICB2YXIgbGVuZ3RoID0gY2hlY2tzLmxlbmd0aFxuXG4gIHJldHVybiBtYXRjaGVzXG5cbiAgZnVuY3Rpb24gbWF0Y2hlcygpIHtcbiAgICB2YXIgaW5kZXggPSAtMVxuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjaGVja3NbaW5kZXhdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIGNvbnZlcnQgYSBzdHJpbmcgaW50byBhIGZ1bmN0aW9uIHdoaWNoIGNoZWNrcyBhIGdpdmVuIG5vZGXigJlzIHR5cGVcbi8vIGZvciBzYWlkIHN0cmluZy5cbmZ1bmN0aW9uIHR5cGVGYWN0b3J5KHRlc3QpIHtcbiAgcmV0dXJuIHR5cGVcblxuICBmdW5jdGlvbiB0eXBlKG5vZGUpIHtcbiAgICByZXR1cm4gQm9vbGVhbihub2RlICYmIG5vZGUudHlwZSA9PT0gdGVzdClcbiAgfVxufVxuXG4vLyBVdGlsaXR5IHRvIHJldHVybiB0cnVlLlxuZnVuY3Rpb24gb2soKSB7XG4gIHJldHVybiB0cnVlXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXdsaW5lO1xuXG4vKiBUb2tlbmlzZSBuZXdsaW5lLiAqL1xuZnVuY3Rpb24gbmV3bGluZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgwKTtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgcXVldWU7XG4gIHZhciBpbmRleDtcblxuICBpZiAoY2hhcmFjdGVyICE9PSAnXFxuJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAxO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgZWF0KHN1YnZhbHVlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKTtcbnZhciB0cmltID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGVkQ29kZTtcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcblxudmFyIENPREVfSU5ERU5UX0NPVU5UID0gNDtcbnZhciBDT0RFX0lOREVOVCA9IHJlcGVhdChDX1NQQUNFLCBDT0RFX0lOREVOVF9DT1VOVCk7XG5cbi8qIFRva2VuaXNlIGluZGVudGVkIGNvZGUuICovXG5mdW5jdGlvbiBpbmRlbnRlZENvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgc3VidmFsdWUgPSAnJztcbiAgdmFyIGNvbnRlbnQgPSAnJztcbiAgdmFyIHN1YnZhbHVlUXVldWUgPSAnJztcbiAgdmFyIGNvbnRlbnRRdWV1ZSA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgYmxhbmtRdWV1ZTtcbiAgdmFyIGluZGVudDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoaW5kZW50KSB7XG4gICAgICBpbmRlbnQgPSBmYWxzZTtcblxuICAgICAgc3VidmFsdWUgKz0gc3VidmFsdWVRdWV1ZTtcbiAgICAgIGNvbnRlbnQgKz0gY29udGVudFF1ZXVlO1xuICAgICAgc3VidmFsdWVRdWV1ZSA9ICcnO1xuICAgICAgY29udGVudFF1ZXVlID0gJyc7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyO1xuICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICAgIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19TUEFDRSAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMikgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMykgPT09IGNoYXJhY3RlclxuICAgICkge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBDT0RFX0lOREVOVDtcbiAgICAgIGluZGV4ICs9IDM7XG4gICAgICBpbmRlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRlbnQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBibGFua1F1ZXVlID0gJyc7XG5cbiAgICAgIHdoaWxlIChjaGFyYWN0ZXIgPT09IENfVEFCIHx8IGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICBibGFua1F1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHN1YnZhbHVlUXVldWUgKz0gYmxhbmtRdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIGNvbnRlbnRRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbnRlbnQpIHtcbiAgICBpZiAoc2lsZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgICB0eXBlOiAnY29kZScsXG4gICAgICBsYW5nOiBudWxsLFxuICAgICAgdmFsdWU6IHRyaW0oY29udGVudClcbiAgICB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0tdHJhaWxpbmctbGluZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmZW5jZWRDb2RlO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfVElMREUgPSAnfic7XG52YXIgQ19USUNLID0gJ2AnO1xuXG52YXIgTUlOX0ZFTkNFX0NPVU5UID0gMztcbnZhciBDT0RFX0lOREVOVF9DT1VOVCA9IDQ7XG5cbmZ1bmN0aW9uIGZlbmNlZENvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBmZW5jZUNvdW50O1xuICB2YXIgbWFya2VyO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgZmxhZztcbiAgdmFyIHF1ZXVlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGV4ZGVudGVkQ29udGVudDtcbiAgdmFyIGNsb3Npbmc7XG4gIHZhciBleGRlbnRlZENsb3Npbmc7XG4gIHZhciBpbmRlbnQ7XG4gIHZhciBub3c7XG5cbiAgaWYgKCFzZXR0aW5ncy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBFYXQgaW5pdGlhbCBzcGFjaW5nLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGluZGVudCA9IGluZGV4O1xuXG4gIC8qIEVhdCB0aGUgZmVuY2UuICovXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19USUxERSAmJiBjaGFyYWN0ZXIgIT09IENfVElDSykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgZmVuY2VDb3VudCA9IDE7XG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgZmVuY2VDb3VudCsrO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoZmVuY2VDb3VudCA8IE1JTl9GRU5DRV9DT1VOVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qIEVhdCBzcGFjaW5nIGJlZm9yZSBmbGFnLiAqL1xuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIC8qIEVhdCBmbGFnLiAqL1xuICBmbGFnID0gJyc7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IENfVElMREUgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19USUNLXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFIHx8IGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZmxhZyArPSBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAmJiBjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuXG4gIHN1YnZhbHVlICs9IGZsYWc7XG4gIGZsYWcgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZShmbGFnKSwgbm93KTtcblxuICBpZiAocXVldWUpIHtcbiAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgfVxuXG4gIHF1ZXVlID0gJyc7XG4gIGNsb3NpbmcgPSAnJztcbiAgZXhkZW50ZWRDbG9zaW5nID0gJyc7XG4gIGNvbnRlbnQgPSAnJztcbiAgZXhkZW50ZWRDb250ZW50ID0gJyc7XG5cbiAgLyogRWF0IGNvbnRlbnQuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgY29udGVudCArPSBjbG9zaW5nO1xuICAgIGV4ZGVudGVkQ29udGVudCArPSBleGRlbnRlZENsb3Npbmc7XG4gICAgY2xvc2luZyA9ICcnO1xuICAgIGV4ZGVudGVkQ2xvc2luZyA9ICcnO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FKSB7XG4gICAgICBjb250ZW50ICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLyogQWRkIHRoZSBuZXdsaW5lIHRvIGBzdWJ2YWx1ZWAgaWYgaXRzIHRoZSBmaXJzdFxuICAgICAqIGNoYXJhY3Rlci4gIE90aGVyd2lzZSwgYWRkIGl0IHRvIHRoZSBgY2xvc2luZ2BcbiAgICAgKiBxdWV1ZS4gKi9cbiAgICBpZiAoY29udGVudCkge1xuICAgICAgY2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBleGRlbnRlZENsb3NpbmcgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcbiAgICBpbmRleCsrO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGNsb3NpbmcgKz0gcXVldWU7XG4gICAgZXhkZW50ZWRDbG9zaW5nICs9IHF1ZXVlLnNsaWNlKGluZGVudCk7XG5cbiAgICBpZiAocXVldWUubGVuZ3RoID49IENPREVfSU5ERU5UX0NPVU5UKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2xvc2luZyArPSBxdWV1ZTtcbiAgICBleGRlbnRlZENsb3NpbmcgKz0gcXVldWU7XG5cbiAgICBpZiAocXVldWUubGVuZ3RoIDwgZmVuY2VDb3VudCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcXVldWUgPSAnJztcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjbG9zaW5nICs9IGNoYXJhY3RlcjtcbiAgICAgIGV4ZGVudGVkQ2xvc2luZyArPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmICghY2hhcmFjdGVyIHx8IGNoYXJhY3RlciA9PT0gQ19ORVdMSU5FKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjb250ZW50ICsgY2xvc2luZztcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2NvZGUnLFxuICAgIGxhbmc6IGZsYWcgfHwgbnVsbCxcbiAgICB2YWx1ZTogdHJpbShleGRlbnRlZENvbnRlbnQpXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciBpbnRlcnJ1cHQgPSByZXF1aXJlKCcuLi91dGlsL2ludGVycnVwdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJsb2NrcXVvdGU7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19HVCA9ICc+JztcblxuLyogVG9rZW5pc2UgYSBibG9ja3F1b3RlLiAqL1xuZnVuY3Rpb24gYmxvY2txdW90ZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgb2Zmc2V0cyA9IHNlbGYub2Zmc2V0O1xuICB2YXIgdG9rZW5pemVycyA9IHNlbGYuYmxvY2tUb2tlbml6ZXJzO1xuICB2YXIgaW50ZXJydXB0b3JzID0gc2VsZi5pbnRlcnJ1cHRCbG9ja3F1b3RlO1xuICB2YXIgbm93ID0gZWF0Lm5vdygpO1xuICB2YXIgY3VycmVudExpbmUgPSBub3cubGluZTtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICB2YXIgY29udGVudHMgPSBbXTtcbiAgdmFyIGluZGVudHMgPSBbXTtcbiAgdmFyIGFkZDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHJlc3Q7XG4gIHZhciBuZXh0SW5kZXg7XG4gIHZhciBjb250ZW50O1xuICB2YXIgbGluZTtcbiAgdmFyIHN0YXJ0SW5kZXg7XG4gIHZhciBwcmVmaXhlZDtcbiAgdmFyIGV4aXQ7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX0dUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIHByZWZpeGVkID0gZmFsc2U7XG5cbiAgICBpZiAobmV4dEluZGV4ID09PSAtMSkge1xuICAgICAgbmV4dEluZGV4ID0gbGVuZ3RoO1xuICAgIH1cblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJiBjaGFyYWN0ZXIgIT09IENfVEFCKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBDX0dUKSB7XG4gICAgICBpbmRleCsrO1xuICAgICAgcHJlZml4ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSA9PT0gQ19TUEFDRSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgfVxuXG4gICAgY29udGVudCA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0SW5kZXgpO1xuXG4gICAgaWYgKCFwcmVmaXhlZCAmJiAhdHJpbShjb250ZW50KSkge1xuICAgICAgaW5kZXggPSBzdGFydEluZGV4O1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCFwcmVmaXhlZCkge1xuICAgICAgcmVzdCA9IHZhbHVlLnNsaWNlKGluZGV4KTtcblxuICAgICAgLyogQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBjb2RlIGNvbnRhaW5zIGEgcG9zc2libGVcbiAgICAgICAqIGJsb2NrLiAqL1xuICAgICAgaWYgKGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIHNlbGYsIFtlYXQsIHJlc3QsIHRydWVdKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lID0gc3RhcnRJbmRleCA9PT0gaW5kZXggPyBjb250ZW50IDogdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgbmV4dEluZGV4KTtcblxuICAgIGluZGVudHMucHVzaChpbmRleCAtIHN0YXJ0SW5kZXgpO1xuICAgIHZhbHVlcy5wdXNoKGxpbmUpO1xuICAgIGNvbnRlbnRzLnB1c2goY29udGVudCk7XG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDE7XG4gIH1cblxuICBpbmRleCA9IC0xO1xuICBsZW5ndGggPSBpbmRlbnRzLmxlbmd0aDtcbiAgYWRkID0gZWF0KHZhbHVlcy5qb2luKENfTkVXTElORSkpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tjdXJyZW50TGluZV0gPSAob2Zmc2V0c1tjdXJyZW50TGluZV0gfHwgMCkgKyBpbmRlbnRzW2luZGV4XTtcbiAgICBjdXJyZW50TGluZSsrO1xuICB9XG5cbiAgZXhpdCA9IHNlbGYuZW50ZXJCbG9jaygpO1xuICBjb250ZW50cyA9IHNlbGYudG9rZW5pemVCbG9jayhjb250ZW50cy5qb2luKENfTkVXTElORSksIG5vdyk7XG4gIGV4aXQoKTtcblxuICByZXR1cm4gYWRkKHtcbiAgICB0eXBlOiAnYmxvY2txdW90ZScsXG4gICAgY2hpbGRyZW46IGNvbnRlbnRzXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0eEhlYWRpbmc7XG5cbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19IQVNIID0gJyMnO1xuXG52YXIgTUFYX0FUWF9DT1VOVCA9IDY7XG5cbmZ1bmN0aW9uIGF0eEhlYWRpbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBub3cgPSBlYXQubm93KCk7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY29udGVudCA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgcXVldWU7XG4gIHZhciBkZXB0aDtcblxuICAvKiBFYXQgaW5pdGlhbCBzcGFjaW5nLiAqL1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFYXQgaGFzaGVzLiAqL1xuICBkZXB0aCA9IDA7XG5cbiAgd2hpbGUgKCsraW5kZXggPD0gbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfSEFTSCkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBkZXB0aCsrO1xuICB9XG5cbiAgaWYgKGRlcHRoID4gTUFYX0FUWF9DT1VOVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChcbiAgICAhZGVwdGggfHxcbiAgICAoIXNldHRpbmdzLnBlZGFudGljICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBDX0hBU0gpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCArIDE7XG5cbiAgLyogRWF0IGludGVybWVkaWF0ZSB3aGl0ZS1zcGFjZS4gKi9cbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFICYmIGNoYXJhY3RlciAhPT0gQ19UQUIpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gbm90IGluIHBlZGFudGljIG1vZGUgd2l0aG91dCBzcGFjaW5nLiAqL1xuICBpZiAoXG4gICAgIXNldHRpbmdzLnBlZGFudGljICYmXG4gICAgcXVldWUubGVuZ3RoID09PSAwICYmXG4gICAgY2hhcmFjdGVyICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyogRWF0IGNvbnRlbnQuICovXG4gIHN1YnZhbHVlICs9IHF1ZXVlO1xuICBxdWV1ZSA9ICcnO1xuICBjb250ZW50ID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX1RBQiAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX0hBU0hcbiAgICApIHtcbiAgICAgIGNvbnRlbnQgKz0gcXVldWUgKyBjaGFyYWN0ZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19IQVNIKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSB8fCBjaGFyYWN0ZXIgPT09IENfVEFCKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgaW5kZXgtLTtcbiAgfVxuXG4gIG5vdy5jb2x1bW4gKz0gc3VidmFsdWUubGVuZ3RoO1xuICBub3cub2Zmc2V0ICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgc3VidmFsdWUgKz0gY29udGVudCArIHF1ZXVlO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gdGhlbWF0aWNCcmVhaztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0FTVEVSSVNLID0gJyonO1xudmFyIENfVU5ERVJTQ09SRSA9ICdfJztcbnZhciBDX0RBU0ggPSAnLSc7XG5cbnZhciBUSEVNQVRJQ19CUkVBS19NQVJLRVJfQ09VTlQgPSAzO1xuXG5mdW5jdGlvbiB0aGVtYXRpY0JyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aCArIDE7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbWFya2VyO1xuICB2YXIgbWFya2VyQ291bnQ7XG4gIHZhciBxdWV1ZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgfVxuXG4gIGlmIChcbiAgICBjaGFyYWN0ZXIgIT09IENfQVNURVJJU0sgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfREFTSCAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG1hcmtlciA9IGNoYXJhY3RlcjtcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBtYXJrZXJDb3VudCA9IDE7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICBtYXJrZXJDb3VudCsrO1xuICAgICAgc3VidmFsdWUgKz0gcXVldWUgKyBtYXJrZXI7XG4gICAgICBxdWV1ZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG1hcmtlckNvdW50ID49IFRIRU1BVElDX0JSRUFLX01BUktFUl9DT1VOVCAmJlxuICAgICAgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBDX05FV0xJTkUpXG4gICAgKSB7XG4gICAgICBzdWJ2YWx1ZSArPSBxdWV1ZTtcblxuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe3R5cGU6ICd0aGVtYXRpY0JyZWFrJ30pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludC1kaXNhYmxlIG1heC1wYXJhbXMgKi9cblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpO1xudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJyk7XG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi4vdXRpbC9nZXQtaW5kZW50YXRpb24nKTtcbnZhciByZW1vdmVJbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbicpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdDtcblxudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xudmFyIENfUExVUyA9ICcrJztcbnZhciBDX0RBU0ggPSAnLSc7XG52YXIgQ19ET1QgPSAnLic7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfUEFSRU5fQ0xPU0UgPSAnKSc7XG52YXIgQ19YX0xPV0VSID0gJ3gnO1xuXG52YXIgVEFCX1NJWkUgPSA0O1xudmFyIEVYUFJFU1NJT05fTE9PU0VfTElTVF9JVEVNID0gL1xcblxcbig/IVxccyokKS87XG52YXIgRVhQUkVTU0lPTl9UQVNLX0lURU0gPSAvXlxcWyhbIFxcdF18eHxYKV1bIFxcdF0vO1xudmFyIEVYUFJFU1NJT05fQlVMTEVUID0gL14oWyBcXHRdKikoWyorLV18XFxkK1suKV0pKCB7MSw0fSg/ISApfCB8XFx0fCR8KD89XFxuKSkoW15cXG5dKikvO1xudmFyIEVYUFJFU1NJT05fUEVEQU5USUNfQlVMTEVUID0gL14oWyBcXHRdKikoWyorLV18XFxkK1suKV0pKFsgXFx0XSspLztcbnZhciBFWFBSRVNTSU9OX0lOSVRJQUxfSU5ERU5UID0gL14oIHsxLDR9fFxcdCk/L2dtO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrXG4gKiBsaXN0LWl0ZW1zLiAqL1xudmFyIExJU1RfVU5PUkRFUkVEX01BUktFUlMgPSB7fTtcblxuTElTVF9VTk9SREVSRURfTUFSS0VSU1tDX0FTVEVSSVNLXSA9IHRydWU7XG5MSVNUX1VOT1JERVJFRF9NQVJLRVJTW0NfUExVU10gPSB0cnVlO1xuTElTVF9VTk9SREVSRURfTUFSS0VSU1tDX0RBU0hdID0gdHJ1ZTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMgd2hpY2ggY2FuIGJlIHVzZWQgdG8gbWFya1xuICogbGlzdC1pdGVtcyBhZnRlciBhIGRpZ2l0LiAqL1xudmFyIExJU1RfT1JERVJFRF9NQVJLRVJTID0ge307XG5cbkxJU1RfT1JERVJFRF9NQVJLRVJTW0NfRE9UXSA9IHRydWU7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmtcbiAqIGxpc3QtaXRlbXMgYWZ0ZXIgYSBkaWdpdC4gKi9cbnZhciBMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTID0ge307XG5cbkxJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlNbQ19ET1RdID0gdHJ1ZTtcbkxJU1RfT1JERVJFRF9DT01NT05NQVJLX01BUktFUlNbQ19QQVJFTl9DTE9TRV0gPSB0cnVlO1xuXG5mdW5jdGlvbiBsaXN0KGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpYztcbiAgdmFyIHRva2VuaXplcnMgPSBzZWxmLmJsb2NrVG9rZW5pemVycztcbiAgdmFyIGludGVydXB0b3JzID0gc2VsZi5pbnRlcnJ1cHRMaXN0O1xuICB2YXIgbWFya2VycztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gbnVsbDtcbiAgdmFyIHNpemUgPSAwO1xuICB2YXIgcXVldWU7XG4gIHZhciBvcmRlcmVkO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbWFya2VyO1xuICB2YXIgbmV4dEluZGV4O1xuICB2YXIgc3RhcnRJbmRleDtcbiAgdmFyIHByZWZpeGVkO1xuICB2YXIgY3VycmVudE1hcmtlcjtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBsaW5lO1xuICB2YXIgcHJldkVtcHR5O1xuICB2YXIgZW1wdHk7XG4gIHZhciBpdGVtcztcbiAgdmFyIGFsbExpbmVzO1xuICB2YXIgZW1wdHlMaW5lcztcbiAgdmFyIGl0ZW07XG4gIHZhciBlbnRlclRvcDtcbiAgdmFyIGV4aXRCbG9ja3F1b3RlO1xuICB2YXIgaXNMb29zZTtcbiAgdmFyIG5vZGU7XG4gIHZhciBub3c7XG4gIHZhciBlbmQ7XG4gIHZhciBpbmRlbnRlZDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgIHNpemUgKz0gVEFCX1NJWkUgLSAoc2l6ZSAlIFRBQl9TSVpFKTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgc2l6ZSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKHNpemUgPj0gVEFCX1NJWkUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIG1hcmtlcnMgPSBjb21tb25tYXJrID9cbiAgICBMSVNUX09SREVSRURfQ09NTU9OTUFSS19NQVJLRVJTIDpcbiAgICBMSVNUX09SREVSRURfTUFSS0VSUztcblxuICBpZiAoTElTVF9VTk9SREVSRURfTUFSS0VSU1tjaGFyYWN0ZXJdID09PSB0cnVlKSB7XG4gICAgbWFya2VyID0gY2hhcmFjdGVyO1xuICAgIG9yZGVyZWQgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICBvcmRlcmVkID0gdHJ1ZTtcbiAgICBxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWRlY2ltYWwoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCFxdWV1ZSB8fCBtYXJrZXJzW2NoYXJhY3Rlcl0gIT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGFydCA9IHBhcnNlSW50KHF1ZXVlLCAxMCk7XG4gICAgbWFya2VyID0gY2hhcmFjdGVyO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGluZGV4ID0gMDtcbiAgaXRlbXMgPSBbXTtcbiAgYWxsTGluZXMgPSBbXTtcbiAgZW1wdHlMaW5lcyA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCk7XG4gICAgc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIHByZWZpeGVkID0gZmFsc2U7XG4gICAgaW5kZW50ZWQgPSBmYWxzZTtcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGg7XG4gICAgfVxuXG4gICAgZW5kID0gaW5kZXggKyBUQUJfU0laRTtcbiAgICBzaXplID0gMDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIpIHtcbiAgICAgICAgc2l6ZSArPSBUQUJfU0laRSAtIChzaXplICUgVEFCX1NJWkUpO1xuICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHNpemUgPj0gVEFCX1NJWkUpIHtcbiAgICAgIGluZGVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbSAmJiBzaXplID49IGl0ZW0uaW5kZW50KSB7XG4gICAgICBpbmRlbnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBjdXJyZW50TWFya2VyID0gbnVsbDtcblxuICAgIGlmICghaW5kZW50ZWQpIHtcbiAgICAgIGlmIChMSVNUX1VOT1JERVJFRF9NQVJLRVJTW2NoYXJhY3Rlcl0gPT09IHRydWUpIHtcbiAgICAgICAgY3VycmVudE1hcmtlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgc2l6ZSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWUgPSAnJztcblxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgICAgaWYgKCFkZWNpbWFsKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICAgICAgaW5kZXgrKztcblxuICAgICAgICBpZiAocXVldWUgJiYgbWFya2Vyc1tjaGFyYWN0ZXJdID09PSB0cnVlKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IGNoYXJhY3RlcjtcbiAgICAgICAgICBzaXplICs9IHF1ZXVlLmxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICAgIHNpemUgKz0gVEFCX1NJWkUgLSAoc2l6ZSAlIFRBQl9TSVpFKTtcbiAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19TUEFDRSkge1xuICAgICAgICAgIGVuZCA9IGluZGV4ICsgVEFCX1NJWkU7XG5cbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1NQQUNFKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICAgICAgc2l6ZSsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmRleCA9PT0gZW5kICYmIHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgICAgIGluZGV4IC09IFRBQl9TSVpFIC0gMTtcbiAgICAgICAgICAgIHNpemUgLT0gVEFCX1NJWkUgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSAmJiBjaGFyYWN0ZXIgIT09ICcnKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudE1hcmtlcikge1xuICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgIT09IGN1cnJlbnRNYXJrZXIpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHByZWZpeGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjb21tb25tYXJrICYmICFpbmRlbnRlZCAmJiB2YWx1ZS5jaGFyQXQoc3RhcnRJbmRleCkgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgaW5kZW50ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjb21tb25tYXJrICYmIGl0ZW0pIHtcbiAgICAgICAgaW5kZW50ZWQgPSBzaXplID49IGl0ZW0uaW5kZW50IHx8IHNpemUgPiBUQUJfU0laRTtcbiAgICAgIH1cblxuICAgICAgcHJlZml4ZWQgPSBmYWxzZTtcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleDtcbiAgICB9XG5cbiAgICBsaW5lID0gdmFsdWUuc2xpY2Uoc3RhcnRJbmRleCwgbmV4dEluZGV4KTtcbiAgICBjb250ZW50ID0gc3RhcnRJbmRleCA9PT0gaW5kZXggPyBsaW5lIDogdmFsdWUuc2xpY2UoaW5kZXgsIG5leHRJbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjdXJyZW50TWFya2VyID09PSBDX0FTVEVSSVNLIHx8XG4gICAgICBjdXJyZW50TWFya2VyID09PSBDX1VOREVSU0NPUkUgfHxcbiAgICAgIGN1cnJlbnRNYXJrZXIgPT09IENfREFTSFxuICAgICkge1xuICAgICAgaWYgKHRva2VuaXplcnMudGhlbWF0aWNCcmVhay5jYWxsKHNlbGYsIGVhdCwgbGluZSwgdHJ1ZSkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJldkVtcHR5ID0gZW1wdHk7XG4gICAgZW1wdHkgPSAhdHJpbShjb250ZW50KS5sZW5ndGg7XG5cbiAgICBpZiAoaW5kZW50ZWQgJiYgaXRlbSkge1xuICAgICAgaXRlbS52YWx1ZSA9IGl0ZW0udmFsdWUuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBlbXB0eUxpbmVzID0gW107XG4gICAgfSBlbHNlIGlmIChwcmVmaXhlZCkge1xuICAgICAgaWYgKGVtcHR5TGluZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGl0ZW0udmFsdWUucHVzaCgnJyk7XG4gICAgICAgIGl0ZW0udHJhaWwgPSBlbXB0eUxpbmVzLmNvbmNhdCgpO1xuICAgICAgfVxuXG4gICAgICBpdGVtID0ge1xuICAgICAgICB2YWx1ZTogW2xpbmVdLFxuICAgICAgICBpbmRlbnQ6IHNpemUsXG4gICAgICAgIHRyYWlsOiBbXVxuICAgICAgfTtcblxuICAgICAgaXRlbXMucHVzaChpdGVtKTtcbiAgICAgIGFsbExpbmVzID0gYWxsTGluZXMuY29uY2F0KGVtcHR5TGluZXMsIGxpbmUpO1xuICAgICAgZW1wdHlMaW5lcyA9IFtdO1xuICAgIH0gZWxzZSBpZiAoZW1wdHkpIHtcbiAgICAgIGlmIChwcmV2RW1wdHkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGVtcHR5TGluZXMucHVzaChsaW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByZXZFbXB0eSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVycnVwdChpbnRlcnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgbGluZSwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpdGVtLnZhbHVlID0gaXRlbS52YWx1ZS5jb25jYXQoZW1wdHlMaW5lcywgbGluZSk7XG4gICAgICBhbGxMaW5lcyA9IGFsbExpbmVzLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKTtcbiAgICAgIGVtcHR5TGluZXMgPSBbXTtcbiAgICB9XG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDE7XG4gIH1cblxuICBub2RlID0gZWF0KGFsbExpbmVzLmpvaW4oQ19ORVdMSU5FKSkucmVzZXQoe1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBvcmRlcmVkOiBvcmRlcmVkLFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBsb29zZTogbnVsbCxcbiAgICBjaGlsZHJlbjogW11cbiAgfSk7XG5cbiAgZW50ZXJUb3AgPSBzZWxmLmVudGVyTGlzdCgpO1xuICBleGl0QmxvY2txdW90ZSA9IHNlbGYuZW50ZXJCbG9jaygpO1xuICBpc0xvb3NlID0gZmFsc2U7XG4gIGluZGV4ID0gLTE7XG4gIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGl0ZW0gPSBpdGVtc1tpbmRleF0udmFsdWUuam9pbihDX05FV0xJTkUpO1xuICAgIG5vdyA9IGVhdC5ub3coKTtcblxuICAgIGl0ZW0gPSBlYXQoaXRlbSkobGlzdEl0ZW0oc2VsZiwgaXRlbSwgbm93KSwgbm9kZSk7XG5cbiAgICBpZiAoaXRlbS5sb29zZSkge1xuICAgICAgaXNMb29zZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaXRlbSA9IGl0ZW1zW2luZGV4XS50cmFpbC5qb2luKENfTkVXTElORSk7XG5cbiAgICBpZiAoaW5kZXggIT09IGxlbmd0aCAtIDEpIHtcbiAgICAgIGl0ZW0gKz0gQ19ORVdMSU5FO1xuICAgIH1cblxuICAgIGVhdChpdGVtKTtcbiAgfVxuXG4gIGVudGVyVG9wKCk7XG4gIGV4aXRCbG9ja3F1b3RlKCk7XG5cbiAgbm9kZS5sb29zZSA9IGlzTG9vc2U7XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGZuID0gY3R4Lm9wdGlvbnMucGVkYW50aWMgPyBwZWRhbnRpY0xpc3RJdGVtIDogbm9ybWFsTGlzdEl0ZW07XG4gIHZhciBjaGVja2VkID0gbnVsbDtcbiAgdmFyIHRhc2s7XG4gIHZhciBpbmRlbnQ7XG5cbiAgdmFsdWUgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gIGlmIChjdHgub3B0aW9ucy5nZm0pIHtcbiAgICB0YXNrID0gdmFsdWUubWF0Y2goRVhQUkVTU0lPTl9UQVNLX0lURU0pO1xuXG4gICAgaWYgKHRhc2spIHtcbiAgICAgIGluZGVudCA9IHRhc2tbMF0ubGVuZ3RoO1xuICAgICAgY2hlY2tlZCA9IHRhc2tbMV0udG9Mb3dlckNhc2UoKSA9PT0gQ19YX0xPV0VSO1xuICAgICAgb2Zmc2V0c1twb3NpdGlvbi5saW5lXSArPSBpbmRlbnQ7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKGluZGVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbGlzdEl0ZW0nLFxuICAgIGxvb3NlOiBFWFBSRVNTSU9OX0xPT1NFX0xJU1RfSVRFTS50ZXN0KHZhbHVlKSB8fFxuICAgICAgdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpID09PSBDX05FV0xJTkUsXG4gICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICBjaGlsZHJlbjogY3R4LnRva2VuaXplQmxvY2sodmFsdWUsIHBvc2l0aW9uKVxuICB9O1xufVxuXG4vKiBDcmVhdGUgYSBsaXN0LWl0ZW0gdXNpbmcgb3Zlcmx5IHNpbXBsZSBtZWNoYW5pY3MuICovXG5mdW5jdGlvbiBwZWRhbnRpY0xpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldDtcbiAgdmFyIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuXG4gIC8qIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuICovXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShFWFBSRVNTSU9OX1BFREFOVElDX0JVTExFVCwgcmVwbGFjZXIpO1xuXG4gIC8qIFRoZSBpbml0aWFsIGxpbmUgd2FzIGFsc28gbWF0Y2hlZCBieSB0aGUgYmVsb3csIHNvXG4gICAqIHdlIHJlc2V0IHRoZSBgbGluZWAuICovXG4gIGxpbmUgPSBwb3NpdGlvbi5saW5lO1xuXG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKEVYUFJFU1NJT05fSU5JVElBTF9JTkRFTlQsIHJlcGxhY2VyKTtcblxuICAvKiBBIHNpbXBsZSByZXBsYWNlciB3aGljaCByZW1vdmVkIGFsbCBtYXRjaGVzLFxuICAgKiBhbmQgYWRkcyB0aGVpciBsZW5ndGggdG8gYG9mZnNldGAuICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VyKCQwKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICsgJDAubGVuZ3RoO1xuICAgIGxpbmUrKztcblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG4vKiBDcmVhdGUgYSBsaXN0LWl0ZW0gdXNpbmcgc2FuZSBtZWNoYW5pY3MuICovXG5mdW5jdGlvbiBub3JtYWxMaXN0SXRlbShjdHgsIHZhbHVlLCBwb3NpdGlvbikge1xuICB2YXIgb2Zmc2V0cyA9IGN0eC5vZmZzZXQ7XG4gIHZhciBsaW5lID0gcG9zaXRpb24ubGluZTtcbiAgdmFyIG1heDtcbiAgdmFyIGJ1bGxldDtcbiAgdmFyIHJlc3Q7XG4gIHZhciBsaW5lcztcbiAgdmFyIHRyaW1tZWRMaW5lcztcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuXG4gIC8qIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuICovXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShFWFBSRVNTSU9OX0JVTExFVCwgcmVwbGFjZXIpO1xuXG4gIGxpbmVzID0gdmFsdWUuc3BsaXQoQ19ORVdMSU5FKTtcblxuICB0cmltbWVkTGluZXMgPSByZW1vdmVJbmRlbnQodmFsdWUsIGdldEluZGVudChtYXgpLmluZGVudCkuc3BsaXQoQ19ORVdMSU5FKTtcblxuICAvKiBXZSByZXBsYWNlZCB0aGUgaW5pdGlhbCBidWxsZXQgd2l0aCBzb21ldGhpbmdcbiAgICogZWxzZSBhYm92ZSwgd2hpY2ggd2FzIHVzZWQgdG8gdHJpY2tcbiAgICogYHJlbW92ZUluZGVudGF0aW9uYCBpbnRvIHJlbW92aW5nIHNvbWUgbW9yZVxuICAgKiBjaGFyYWN0ZXJzIHdoZW4gcG9zc2libGUuICBIb3dldmVyLCB0aGF0IGNvdWxkXG4gICAqIHJlc3VsdCBpbiB0aGUgaW5pdGlhbCBsaW5lIHRvIGJlIHN0cmlwcGVkIG1vcmVcbiAgICogdGhhbiBpdCBzaG91bGQgYmUuICovXG4gIHRyaW1tZWRMaW5lc1swXSA9IHJlc3Q7XG5cbiAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICsgYnVsbGV0Lmxlbmd0aDtcbiAgbGluZSsrO1xuXG4gIGluZGV4ID0gMDtcbiAgbGVuZ3RoID0gbGluZXMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9IChvZmZzZXRzW2xpbmVdIHx8IDApICtcbiAgICAgIGxpbmVzW2luZGV4XS5sZW5ndGggLSB0cmltbWVkTGluZXNbaW5kZXhdLmxlbmd0aDtcbiAgICBsaW5lKys7XG4gIH1cblxuICByZXR1cm4gdHJpbW1lZExpbmVzLmpvaW4oQ19ORVdMSU5FKTtcblxuICBmdW5jdGlvbiByZXBsYWNlcigkMCwgJDEsICQyLCAkMywgJDQpIHtcbiAgICBidWxsZXQgPSAkMSArICQyICsgJDM7XG4gICAgcmVzdCA9ICQ0O1xuXG4gICAgLyogTWFrZSBzdXJlIHRoYXQgdGhlIGZpcnN0IG5pbmUgbnVtYmVyZWQgbGlzdCBpdGVtc1xuICAgICAqIGNhbiBpbmRlbnQgd2l0aCBhbiBleHRyYSBzcGFjZS4gIFRoYXQgaXMsIHdoZW5cbiAgICAgKiB0aGUgYnVsbGV0IGRpZCBub3QgcmVjZWl2ZSBhbiBleHRyYSBmaW5hbCBzcGFjZS4gKi9cbiAgICBpZiAoTnVtYmVyKCQyKSA8IDEwICYmIGJ1bGxldC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAkMiA9IENfU1BBQ0UgKyAkMjtcbiAgICB9XG5cbiAgICBtYXggPSAkMSArIHJlcGVhdChDX1NQQUNFLCAkMi5sZW5ndGgpICsgJDM7XG5cbiAgICByZXR1cm4gbWF4ICsgcmVzdDtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi9nZXQtaW5kZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBpbmRlbnRhdGlvbjtcblxudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcblxuLyogUmVtb3ZlIHRoZSBtaW5pbXVtIGluZGVudCBmcm9tIGV2ZXJ5IGxpbmUgaW4gYHZhbHVlYC5cbiAqIFN1cHBvcnRzIGJvdGggdGFiLCBzcGFjZWQsIGFuZCBtaXhlZCBpbmRlbnRhdGlvbiAoYXNcbiAqIHdlbGwgYXMgcG9zc2libGUpLiAqL1xuZnVuY3Rpb24gaW5kZW50YXRpb24odmFsdWUsIG1heGltdW0pIHtcbiAgdmFyIHZhbHVlcyA9IHZhbHVlLnNwbGl0KENfTkVXTElORSk7XG4gIHZhciBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGggKyAxO1xuICB2YXIgbWluSW5kZW50ID0gSW5maW5pdHk7XG4gIHZhciBtYXRyaXggPSBbXTtcbiAgdmFyIGluZGV4O1xuICB2YXIgaW5kZW50YXRpb247XG4gIHZhciBzdG9wcztcbiAgdmFyIHBhZGRpbmc7XG5cbiAgdmFsdWVzLnVuc2hpZnQocmVwZWF0KENfU1BBQ0UsIG1heGltdW0pICsgJyEnKTtcblxuICB3aGlsZSAocG9zaXRpb24tLSkge1xuICAgIGluZGVudGF0aW9uID0gZ2V0SW5kZW50KHZhbHVlc1twb3NpdGlvbl0pO1xuXG4gICAgbWF0cml4W3Bvc2l0aW9uXSA9IGluZGVudGF0aW9uLnN0b3BzO1xuXG4gICAgaWYgKHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaW5kZW50YXRpb24uaW5kZW50KSB7XG4gICAgICBpZiAoaW5kZW50YXRpb24uaW5kZW50ID4gMCAmJiBpbmRlbnRhdGlvbi5pbmRlbnQgPCBtaW5JbmRlbnQpIHtcbiAgICAgICAgbWluSW5kZW50ID0gaW5kZW50YXRpb24uaW5kZW50O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtaW5JbmRlbnQgPSBJbmZpbml0eTtcblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pbkluZGVudCAhPT0gSW5maW5pdHkpIHtcbiAgICBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAocG9zaXRpb24tLSkge1xuICAgICAgc3RvcHMgPSBtYXRyaXhbcG9zaXRpb25dO1xuICAgICAgaW5kZXggPSBtaW5JbmRlbnQ7XG5cbiAgICAgIHdoaWxlIChpbmRleCAmJiAhKGluZGV4IGluIHN0b3BzKSkge1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoICE9PSAwICYmXG4gICAgICAgIG1pbkluZGVudCAmJlxuICAgICAgICBpbmRleCAhPT0gbWluSW5kZW50XG4gICAgICApIHtcbiAgICAgICAgcGFkZGluZyA9IENfVEFCO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFkZGluZyA9ICcnO1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXNbcG9zaXRpb25dID0gcGFkZGluZyArIHZhbHVlc1twb3NpdGlvbl0uc2xpY2UoXG4gICAgICAgIGluZGV4IGluIHN0b3BzID8gc3RvcHNbaW5kZXhdICsgMSA6IDBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgdmFsdWVzLnNoaWZ0KCk7XG5cbiAgcmV0dXJuIHZhbHVlcy5qb2luKENfTkVXTElORSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0ZXh0SGVhZGluZztcblxudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG52YXIgQ19TUEFDRSA9ICcgJztcbnZhciBDX0VRVUFMUyA9ICc9JztcbnZhciBDX0RBU0ggPSAnLSc7XG5cbnZhciBNQVhfSEVBRElOR19JTkRFTlQgPSAzO1xuXG4vKiBNYXAgb2YgY2hhcmFjdGVycyB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrIHNldGV4dFxuICogaGVhZGVycywgbWFwcGluZyB0byB0aGVpciBjb3JyZXNwb25kaW5nIGRlcHRoLiAqL1xudmFyIFNFVEVYVF9NQVJLRVJTID0ge307XG5cblNFVEVYVF9NQVJLRVJTW0NfRVFVQUxTXSA9IDE7XG5TRVRFWFRfTUFSS0VSU1tDX0RBU0hdID0gMjtcblxuZnVuY3Rpb24gc2V0ZXh0SGVhZGluZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgbm93ID0gZWF0Lm5vdygpO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBjb250ZW50O1xuICB2YXIgcXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBkZXB0aDtcblxuICAvKiBFYXQgaW5pdGlhbCBpbmRlbnRhdGlvbi4gKi9cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gQ19TUEFDRSB8fCBpbmRleCA+PSBNQVhfSEVBRElOR19JTkRFTlQpIHtcbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICAvKiBFYXQgY29udGVudC4gKi9cbiAgY29udGVudCA9ICcnO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgaW5kZXgtLTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UgfHwgY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50ICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgcXVldWUgPSAnJztcbiAgICB9XG4gIH1cblxuICBub3cuY29sdW1uICs9IHN1YnZhbHVlLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlICs9IGNvbnRlbnQgKyBxdWV1ZTtcblxuICAvKiBFbnN1cmUgdGhlIGNvbnRlbnQgaXMgZm9sbG93ZWQgYnkgYSBuZXdsaW5lIGFuZCBhXG4gICAqIHZhbGlkIG1hcmtlci4gKi9cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICBtYXJrZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FIHx8ICFTRVRFWFRfTUFSS0VSU1ttYXJrZXJdKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuXG4gIC8qIEVhdCBTZXRleHQtbGluZS4gKi9cbiAgcXVldWUgPSBtYXJrZXI7XG4gIGRlcHRoID0gU0VURVhUX01BUktFUlNbbWFya2VyXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IENfTkVXTElORSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGluZGV4LS07XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcGVuQ2xvc2VUYWcgPSByZXF1aXJlKCcuLi91dGlsL2h0bWwnKS5vcGVuQ2xvc2VUYWc7XG5cbm1vZHVsZS5leHBvcnRzID0gYmxvY2tIVE1MO1xuXG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfTFQgPSAnPCc7XG5cbmZ1bmN0aW9uIGJsb2NrSFRNTChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgYmxvY2tzID0gc2VsZi5vcHRpb25zLmJsb2NrcztcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIG5leHQ7XG4gIHZhciBsaW5lO1xuICB2YXIgb2Zmc2V0O1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgY291bnQ7XG4gIHZhciBzZXF1ZW5jZTtcbiAgdmFyIHN1YnZhbHVlO1xuXG4gIHZhciBzZXF1ZW5jZXMgPSBbXG4gICAgWy9ePChzY3JpcHR8cHJlfHN0eWxlKSg/PShcXHN8PnwkKSkvaSwgLzxcXC8oc2NyaXB0fHByZXxzdHlsZSk+L2ksIHRydWVdLFxuICAgIFsvXjwhLS0vLCAvLS0+LywgdHJ1ZV0sXG4gICAgWy9ePFxcPy8sIC9cXD8+LywgdHJ1ZV0sXG4gICAgWy9ePCFbQS1aYS16XS8sIC8+LywgdHJ1ZV0sXG4gICAgWy9ePCFcXFtDREFUQVxcWy8sIC9cXF1cXF0+LywgdHJ1ZV0sXG4gICAgW25ldyBSZWdFeHAoJ148Lz8oJyArIGJsb2Nrcy5qb2luKCd8JykgKyAnKSg/PShcXFxcc3wvPz58JCkpJywgJ2knKSwgL14kLywgdHJ1ZV0sXG4gICAgW25ldyBSZWdFeHAob3BlbkNsb3NlVGFnLnNvdXJjZSArICdcXFxccyokJyksIC9eJC8sIGZhbHNlXVxuICBdO1xuXG4gIC8qIEVhdCBpbml0aWFsIHNwYWNpbmcuICovXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19MVCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG5leHQgPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXggKyAxKTtcbiAgbmV4dCA9IG5leHQgPT09IC0xID8gbGVuZ3RoIDogbmV4dDtcbiAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0KTtcbiAgb2Zmc2V0ID0gLTE7XG4gIGNvdW50ID0gc2VxdWVuY2VzLmxlbmd0aDtcblxuICB3aGlsZSAoKytvZmZzZXQgPCBjb3VudCkge1xuICAgIGlmIChzZXF1ZW5jZXNbb2Zmc2V0XVswXS50ZXN0KGxpbmUpKSB7XG4gICAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlc1tvZmZzZXRdO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzZXF1ZW5jZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gc2VxdWVuY2VbMl07XG4gIH1cblxuICBpbmRleCA9IG5leHQ7XG5cbiAgaWYgKCFzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBuZXh0ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG4gICAgICBuZXh0ID0gbmV4dCA9PT0gLTEgPyBsZW5ndGggOiBuZXh0O1xuICAgICAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSwgbmV4dCk7XG5cbiAgICAgIGlmIChzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgICAgaW5kZXggPSBuZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gbmV4dDtcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ2h0bWwnLCB2YWx1ZTogc3VidmFsdWV9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZm9vdG5vdGVEZWZpbml0aW9uO1xuZm9vdG5vdGVEZWZpbml0aW9uLm5vdEluTGlzdCA9IHRydWU7XG5mb290bm90ZURlZmluaXRpb24ubm90SW5CbG9jayA9IHRydWU7XG5cbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfQ0FSRVQgPSAnXic7XG52YXIgQ19DT0xPTiA9ICc6JztcblxudmFyIEVYUFJFU1NJT05fSU5JVElBTF9UQUIgPSAvXiggezR9fFxcdCk/L2dtO1xuXG5mdW5jdGlvbiBmb290bm90ZURlZmluaXRpb24oZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG9mZnNldHMgPSBzZWxmLm9mZnNldDtcbiAgdmFyIGluZGV4O1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBub3c7XG4gIHZhciBjdXJyZW50TGluZTtcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgaWRlbnRpZmllcjtcbiAgdmFyIGFkZDtcbiAgdmFyIGV4aXQ7XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZm9vdG5vdGVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHN1YnZhbHVlID0gJyc7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgY3VycmVudExpbmUgPSBub3cubGluZTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfQlJBQ0tFVF9PUEVOIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ0FSRVRcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgKz0gQ19CUkFDS0VUX09QRU4gKyBDX0NBUkVUO1xuICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKFxuICAgICFxdWV1ZSB8fFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfQlJBQ0tFVF9DTE9TRSB8fFxuICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX0NPTE9OXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlkZW50aWZpZXIgPSBub3JtYWxpemUocXVldWUpO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIENfQlJBQ0tFVF9DTE9TRSArIENfQ09MT047XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuICBjb250ZW50ID0gJyc7XG4gIHN1YnF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgc3VicXVldWUgPSBjaGFyYWN0ZXI7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX05FV0xJTkUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1NQQUNFKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdWJxdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgIH1cblxuICAgIGlmIChxdWV1ZSkge1xuICAgICAgY29udGVudCArPSBxdWV1ZTtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgY29udGVudCArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIHN1YnZhbHVlICs9IGNvbnRlbnQ7XG5cbiAgY29udGVudCA9IGNvbnRlbnQucmVwbGFjZShFWFBSRVNTSU9OX0lOSVRJQUxfVEFCLCBmdW5jdGlvbiAobGluZSkge1xuICAgIG9mZnNldHNbY3VycmVudExpbmVdID0gKG9mZnNldHNbY3VycmVudExpbmVdIHx8IDApICsgbGluZS5sZW5ndGg7XG4gICAgY3VycmVudExpbmUrKztcblxuICAgIHJldHVybiAnJztcbiAgfSk7XG5cbiAgYWRkID0gZWF0KHN1YnZhbHVlKTtcblxuICBleGl0ID0gc2VsZi5lbnRlckJsb2NrKCk7XG4gIGNvbnRlbnQgPSBzZWxmLnRva2VuaXplQmxvY2soY29udGVudCwgbm93KTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBhZGQoe1xuICAgIHR5cGU6ICdmb290bm90ZURlZmluaXRpb24nLFxuICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBjb2xsYXBzZVxuXG4vLyBgY29sbGFwc2UoJyBcXHRcXG5iYXIgXFxuYmF6XFx0JykgLy8gJyBiYXIgYmF6ICdgXG5mdW5jdGlvbiBjb2xsYXBzZSh2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nKHZhbHVlKS5yZXBsYWNlKC9cXHMrL2csICcgJylcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIG5vcm1hbGl6ZSA9IHJlcXVpcmUoJy4uL3V0aWwvbm9ybWFsaXplJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbjtcbmRlZmluaXRpb24ubm90SW5MaXN0ID0gdHJ1ZTtcbmRlZmluaXRpb24ubm90SW5CbG9jayA9IHRydWU7XG5cbnZhciBDX0RPVUJMRV9RVU9URSA9ICdcIic7XG52YXIgQ19TSU5HTEVfUVVPVEUgPSAnXFwnJztcbnZhciBDX0JBQ0tTTEFTSCA9ICdcXFxcJztcbnZhciBDX05FV0xJTkUgPSAnXFxuJztcbnZhciBDX1RBQiA9ICdcXHQnO1xudmFyIENfU1BBQ0UgPSAnICc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfQ09MT04gPSAnOic7XG52YXIgQ19MVCA9ICc8JztcbnZhciBDX0dUID0gJz4nO1xuXG5mdW5jdGlvbiBkZWZpbml0aW9uKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgYmVmb3JlVVJMO1xuICB2YXIgYmVmb3JlVGl0bGU7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHRlc3Q7XG4gIHZhciBpZGVudGlmaWVyO1xuICB2YXIgdXJsO1xuICB2YXIgdGl0bGU7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiYgY2hhcmFjdGVyICE9PSBDX1RBQikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBpZiAoXG4gICAgIXF1ZXVlIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19CUkFDS0VUX0NMT1NFIHx8XG4gICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgIT09IENfQ09MT05cbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWRlbnRpZmllciA9IHF1ZXVlO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIENfQlJBQ0tFVF9DTE9TRSArIENfQ09MT047XG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgIT09IENfVEFCICYmXG4gICAgICBjaGFyYWN0ZXIgIT09IENfU1BBQ0UgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19ORVdMSU5FXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHF1ZXVlID0gJyc7XG4gIGJlZm9yZVVSTCA9IHN1YnZhbHVlO1xuXG4gIGlmIChjaGFyYWN0ZXIgPT09IENfTFQpIHtcbiAgICBpbmRleCsrO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoIWlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gaXNFbmNsb3NlZFVSTENoYXJhY3Rlci5kZWxpbWl0ZXIpIHtcbiAgICAgIHN1YnZhbHVlICs9IENfTFQgKyBxdWV1ZSArIGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaW5kZXggLT0gcXVldWUubGVuZ3RoICsgMTtcbiAgICAgIHF1ZXVlID0gJyc7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKCFpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyKGNoYXJhY3RlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcXVldWU7XG4gIH1cblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdXJsID0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19UQUIgJiZcbiAgICAgIGNoYXJhY3RlciAhPT0gQ19TUEFDRSAmJlxuICAgICAgY2hhcmFjdGVyICE9PSBDX05FV0xJTkVcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgdGVzdCA9IG51bGw7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19ET1VCTEVfUVVPVEUpIHtcbiAgICB0ZXN0ID0gQ19ET1VCTEVfUVVPVEU7XG4gIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX1NJTkdMRV9RVU9URSkge1xuICAgIHRlc3QgPSBDX1NJTkdMRV9RVU9URTtcbiAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fT1BFTikge1xuICAgIHRlc3QgPSBDX1BBUkVOX0NMT1NFO1xuICB9XG5cbiAgaWYgKCF0ZXN0KSB7XG4gICAgcXVldWUgPSAnJztcbiAgICBpbmRleCA9IHN1YnZhbHVlLmxlbmd0aDtcbiAgfSBlbHNlIGlmIChxdWV1ZSkge1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICAgIHF1ZXVlID0gJyc7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IHRlc3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfTkVXTElORSB8fCBjaGFyYWN0ZXIgPT09IHRlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBxdWV1ZSArPSBDX05FV0xJTkU7XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IHRlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBiZWZvcmVUaXRsZSA9IHN1YnZhbHVlO1xuICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gICAgdGl0bGUgPSBxdWV1ZTtcbiAgICBxdWV1ZSA9ICcnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBDX1RBQiAmJiBjaGFyYWN0ZXIgIT09IENfU1BBQ0UpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICBpZiAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IENfTkVXTElORSkge1xuICAgIGlmIChzaWxlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGJlZm9yZVVSTCA9IGVhdChiZWZvcmVVUkwpLnRlc3QoKS5lbmQ7XG4gICAgdXJsID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodXJsKSwgYmVmb3JlVVJMLCB7bm9uVGVybWluYXRlZDogZmFsc2V9KTtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgYmVmb3JlVGl0bGUgPSBlYXQoYmVmb3JlVGl0bGUpLnRlc3QoKS5lbmQ7XG4gICAgICB0aXRsZSA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKHRpdGxlKSwgYmVmb3JlVGl0bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICAgIHR5cGU6ICdkZWZpbml0aW9uJyxcbiAgICAgIGlkZW50aWZpZXI6IG5vcm1hbGl6ZShpZGVudGlmaWVyKSxcbiAgICAgIHRpdGxlOiB0aXRsZSB8fCBudWxsLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KTtcbiAgfVxufVxuXG4vKiBDaGVjayBpZiBgY2hhcmFjdGVyYCBjYW4gYmUgaW5zaWRlIGFuIGVuY2xvc2VkIFVSSS4gKi9cbmZ1bmN0aW9uIGlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBjaGFyYWN0ZXIgIT09IENfR1QgJiZcbiAgICBjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9PUEVOICYmXG4gICAgY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfQ0xPU0U7XG59XG5cbmlzRW5jbG9zZWRVUkxDaGFyYWN0ZXIuZGVsaW1pdGVyID0gQ19HVDtcblxuLyogQ2hlY2sgaWYgYGNoYXJhY3RlcmAgY2FuIGJlIGluc2lkZSBhbiB1bmNsb3NlZCBVUkkuICovXG5mdW5jdGlvbiBpc1VuY2xvc2VkVVJMQ2hhcmFjdGVyKGNoYXJhY3Rlcikge1xuICByZXR1cm4gY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTiAmJlxuICAgIGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX0NMT1NFICYmXG4gICAgIXdoaXRlc3BhY2UoY2hhcmFjdGVyKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRhYmxlO1xuXG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19USUNLID0gJ2AnO1xudmFyIENfREFTSCA9ICctJztcbnZhciBDX1BJUEUgPSAnfCc7XG52YXIgQ19DT0xPTiA9ICc6JztcbnZhciBDX1NQQUNFID0gJyAnO1xudmFyIENfTkVXTElORSA9ICdcXG4nO1xudmFyIENfVEFCID0gJ1xcdCc7XG5cbnZhciBNSU5fVEFCTEVfQ09MVU1OUyA9IDE7XG52YXIgTUlOX1RBQkxFX1JPV1MgPSAyO1xuXG52YXIgVEFCTEVfQUxJR05fTEVGVCA9ICdsZWZ0JztcbnZhciBUQUJMRV9BTElHTl9DRU5URVIgPSAnY2VudGVyJztcbnZhciBUQUJMRV9BTElHTl9SSUdIVCA9ICdyaWdodCc7XG52YXIgVEFCTEVfQUxJR05fTk9ORSA9IG51bGw7XG5cbmZ1bmN0aW9uIHRhYmxlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpbmRleDtcbiAgdmFyIGFsaWdubWVudHM7XG4gIHZhciBhbGlnbm1lbnQ7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIHJvdztcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIGxpbmVzO1xuICB2YXIgcXVldWU7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBoYXNEYXNoO1xuICB2YXIgYWxpZ247XG4gIHZhciBjZWxsO1xuICB2YXIgcHJlYW1ibGU7XG4gIHZhciBjb3VudDtcbiAgdmFyIG9wZW5pbmc7XG4gIHZhciBub3c7XG4gIHZhciBwb3NpdGlvbjtcbiAgdmFyIGxpbmVDb3VudDtcbiAgdmFyIGxpbmU7XG4gIHZhciByb3dzO1xuICB2YXIgdGFibGU7XG4gIHZhciBsaW5lSW5kZXg7XG4gIHZhciBwaXBlSW5kZXg7XG4gIHZhciBmaXJzdDtcblxuICAvKiBFeGl0IHdoZW4gbm90IGluIGdmbS1tb2RlLiAqL1xuICBpZiAoIXNlbGYub3B0aW9ucy5nZm0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBHZXQgdGhlIHJvd3MuXG4gICAqIERldGVjdGluZyB0YWJsZXMgc29vbiBpcyBoYXJkLCBzbyB0aGVyZSBhcmUgc29tZVxuICAgKiBjaGVja3MgZm9yIHBlcmZvcm1hbmNlIGhlcmUsIHN1Y2ggYXMgdGhlIG1pbmltdW1cbiAgICogbnVtYmVyIG9mIHJvd3MsIGFuZCBhbGxvd2VkIGNoYXJhY3RlcnMgaW4gdGhlXG4gICAqIGFsaWdubWVudCByb3cuICovXG4gIGluZGV4ID0gMDtcbiAgbGluZUNvdW50ID0gMDtcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMTtcbiAgbGluZXMgPSBbXTtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBsaW5lSW5kZXggPSB2YWx1ZS5pbmRleE9mKENfTkVXTElORSwgaW5kZXgpO1xuICAgIHBpcGVJbmRleCA9IHZhbHVlLmluZGV4T2YoQ19QSVBFLCBpbmRleCArIDEpO1xuXG4gICAgaWYgKGxpbmVJbmRleCA9PT0gLTEpIHtcbiAgICAgIGxpbmVJbmRleCA9IHZhbHVlLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpZiAocGlwZUluZGV4ID09PSAtMSB8fCBwaXBlSW5kZXggPiBsaW5lSW5kZXgpIHtcbiAgICAgIGlmIChsaW5lQ291bnQgPCBNSU5fVEFCTEVfUk9XUykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxpbmVzLnB1c2godmFsdWUuc2xpY2UoaW5kZXgsIGxpbmVJbmRleCkpO1xuICAgIGxpbmVDb3VudCsrO1xuICAgIGluZGV4ID0gbGluZUluZGV4ICsgMTtcbiAgfVxuXG4gIC8qIFBhcnNlIHRoZSBhbGlnbm1lbnQgcm93LiAqL1xuICBzdWJ2YWx1ZSA9IGxpbmVzLmpvaW4oQ19ORVdMSU5FKTtcbiAgYWxpZ25tZW50cyA9IGxpbmVzLnNwbGljZSgxLCAxKVswXSB8fCBbXTtcbiAgaW5kZXggPSAwO1xuICBsZW5ndGggPSBhbGlnbm1lbnRzLmxlbmd0aDtcbiAgbGluZUNvdW50LS07XG4gIGFsaWdubWVudCA9IGZhbHNlO1xuICBhbGlnbiA9IFtdO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IGFsaWdubWVudHMuY2hhckF0KGluZGV4KTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfUElQRSkge1xuICAgICAgaGFzRGFzaCA9IG51bGw7XG5cbiAgICAgIGlmIChhbGlnbm1lbnQgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChmaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFsaWduLnB1c2goYWxpZ25tZW50KTtcbiAgICAgICAgYWxpZ25tZW50ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfREFTSCkge1xuICAgICAgaGFzRGFzaCA9IHRydWU7XG4gICAgICBhbGlnbm1lbnQgPSBhbGlnbm1lbnQgfHwgVEFCTEVfQUxJR05fTk9ORTtcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19DT0xPTikge1xuICAgICAgaWYgKGFsaWdubWVudCA9PT0gVEFCTEVfQUxJR05fTEVGVCkge1xuICAgICAgICBhbGlnbm1lbnQgPSBUQUJMRV9BTElHTl9DRU5URVI7XG4gICAgICB9IGVsc2UgaWYgKGhhc0Rhc2ggJiYgYWxpZ25tZW50ID09PSBUQUJMRV9BTElHTl9OT05FKSB7XG4gICAgICAgIGFsaWdubWVudCA9IFRBQkxFX0FMSUdOX1JJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWxpZ25tZW50ID0gVEFCTEVfQUxJR05fTEVGVDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKGFsaWdubWVudCAhPT0gZmFsc2UpIHtcbiAgICBhbGlnbi5wdXNoKGFsaWdubWVudCk7XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gd2l0aG91dCBlbm91Z2ggY29sdW1ucy4gKi9cbiAgaWYgKGFsaWduLmxlbmd0aCA8IE1JTl9UQUJMRV9DT0xVTU5TKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKiBQYXJzZSB0aGUgcm93cy4gKi9cbiAgcG9zaXRpb24gPSAtMTtcbiAgcm93cyA9IFtdO1xuXG4gIHRhYmxlID0gZWF0KHN1YnZhbHVlKS5yZXNldCh7XG4gICAgdHlwZTogJ3RhYmxlJyxcbiAgICBhbGlnbjogYWxpZ24sXG4gICAgY2hpbGRyZW46IHJvd3NcbiAgfSk7XG5cbiAgd2hpbGUgKCsrcG9zaXRpb24gPCBsaW5lQ291bnQpIHtcbiAgICBsaW5lID0gbGluZXNbcG9zaXRpb25dO1xuICAgIHJvdyA9IHt0eXBlOiAndGFibGVSb3cnLCBjaGlsZHJlbjogW119O1xuXG4gICAgLyogRWF0IGEgbmV3bGluZSBjaGFyYWN0ZXIgd2hlbiB0aGlzIGlzIG5vdCB0aGVcbiAgICAgKiBmaXJzdCByb3cuICovXG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICBlYXQoQ19ORVdMSU5FKTtcbiAgICB9XG5cbiAgICAvKiBFYXQgdGhlIHJvdy4gKi9cbiAgICBlYXQobGluZSkucmVzZXQocm93LCB0YWJsZSk7XG5cbiAgICBsZW5ndGggPSBsaW5lLmxlbmd0aCArIDE7XG4gICAgaW5kZXggPSAwO1xuICAgIHF1ZXVlID0gJyc7XG4gICAgY2VsbCA9ICcnO1xuICAgIHByZWFtYmxlID0gdHJ1ZTtcbiAgICBjb3VudCA9IG51bGw7XG4gICAgb3BlbmluZyA9IG51bGw7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IGxpbmUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19UQUIgfHwgY2hhcmFjdGVyID09PSBDX1NQQUNFKSB7XG4gICAgICAgIGlmIChjZWxsKSB7XG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVhdChjaGFyYWN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09ICcnIHx8IGNoYXJhY3RlciA9PT0gQ19QSVBFKSB7XG4gICAgICAgIGlmIChwcmVhbWJsZSkge1xuICAgICAgICAgIGVhdChjaGFyYWN0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGFyYWN0ZXIgJiYgb3BlbmluZykge1xuICAgICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoY2VsbCB8fCBjaGFyYWN0ZXIpICYmICFwcmVhbWJsZSkge1xuICAgICAgICAgICAgc3VidmFsdWUgPSBjZWxsO1xuXG4gICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBpZiAoY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICAgICAgc3VidmFsdWUgKz0gcXVldWUuc2xpY2UoMCwgcXVldWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgcXVldWUgPSBxdWV1ZS5jaGFyQXQocXVldWUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VidmFsdWUgKz0gcXVldWU7XG4gICAgICAgICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBub3cgPSBlYXQubm93KCk7XG5cbiAgICAgICAgICAgIGVhdChzdWJ2YWx1ZSkoe1xuICAgICAgICAgICAgICB0eXBlOiAndGFibGVDZWxsJyxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY2VsbCwgbm93KVxuICAgICAgICAgICAgfSwgcm93KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlYXQocXVldWUgKyBjaGFyYWN0ZXIpO1xuXG4gICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgICBjZWxsID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChxdWV1ZSkge1xuICAgICAgICAgIGNlbGwgKz0gcXVldWU7XG4gICAgICAgICAgcXVldWUgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNlbGwgKz0gY2hhcmFjdGVyO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIICYmIGluZGV4ICE9PSBsZW5ndGggLSAyKSB7XG4gICAgICAgICAgY2VsbCArPSBsaW5lLmNoYXJBdChpbmRleCArIDEpO1xuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RJQ0spIHtcbiAgICAgICAgICBjb3VudCA9IDE7XG5cbiAgICAgICAgICB3aGlsZSAobGluZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gY2hhcmFjdGVyKSB7XG4gICAgICAgICAgICBjZWxsICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IGNvdW50O1xuICAgICAgICAgIH0gZWxzZSBpZiAoY291bnQgPj0gb3BlbmluZykge1xuICAgICAgICAgICAgb3BlbmluZyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByZWFtYmxlID0gZmFsc2U7XG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIC8qIEVhdCB0aGUgYWxpZ25tZW50IHJvdy4gKi9cbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICBlYXQoQ19ORVdMSU5FICsgYWxpZ25tZW50cyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKTtcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpO1xudmFyIHRyaW1UcmFpbGluZ0xpbmVzID0gcmVxdWlyZSgndHJpbS10cmFpbGluZy1saW5lcycpO1xudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcGFyYWdyYXBoO1xuXG52YXIgQ19ORVdMSU5FID0gJ1xcbic7XG52YXIgQ19UQUIgPSAnXFx0JztcbnZhciBDX1NQQUNFID0gJyAnO1xuXG52YXIgVEFCX1NJWkUgPSA0O1xuXG4vKiBUb2tlbmlzZSBwYXJhZ3JhcGguICovXG5mdW5jdGlvbiBwYXJhZ3JhcGgoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zO1xuICB2YXIgY29tbW9ubWFyayA9IHNldHRpbmdzLmNvbW1vbm1hcms7XG4gIHZhciBnZm0gPSBzZXR0aW5ncy5nZm07XG4gIHZhciB0b2tlbml6ZXJzID0gc2VsZi5ibG9ja1Rva2VuaXplcnM7XG4gIHZhciBpbnRlcnJ1cHRvcnMgPSBzZWxmLmludGVycnVwdFBhcmFncmFwaDtcbiAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUpO1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgcG9zaXRpb247XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIHNpemU7XG4gIHZhciBub3c7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgLyogRWF0IGV2ZXJ5dGhpbmcgaWYgdGhlcmXigJlzIG5vIGZvbGxvd2luZyBuZXdsaW5lLiAqL1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogU3RvcCBpZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgTkVXTElORS4gKi9cbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfTkVXTElORSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLyogSW4gY29tbW9ubWFyay1tb2RlLCBmb2xsb3dpbmcgaW5kZW50ZWQgbGluZXNcbiAgICAgKiBhcmUgcGFydCBvZiB0aGUgcGFyYWdyYXBoLiAqL1xuICAgIGlmIChjb21tb25tYXJrKSB7XG4gICAgICBzaXplID0gMDtcbiAgICAgIHBvc2l0aW9uID0gaW5kZXggKyAxO1xuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHBvc2l0aW9uKTtcblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1RBQikge1xuICAgICAgICAgIHNpemUgPSBUQUJfU0laRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfU1BBQ0UpIHtcbiAgICAgICAgICBzaXplKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2l6ZSA+PSBUQUJfU0laRSkge1xuICAgICAgICBpbmRleCA9IHZhbHVlLmluZGV4T2YoQ19ORVdMSU5FLCBpbmRleCArIDEpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKGluZGV4ICsgMSk7XG5cbiAgICAvKiBDaGVjayBpZiB0aGUgZm9sbG93aW5nIGNvZGUgY29udGFpbnMgYSBwb3NzaWJsZVxuICAgICAqIGJsb2NrLiAqL1xuICAgIGlmIChpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBzZWxmLCBbZWF0LCBzdWJ2YWx1ZSwgdHJ1ZV0pKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICAvKiBCcmVhayBpZiB0aGUgZm9sbG93aW5nIGxpbmUgc3RhcnRzIGEgbGlzdCwgd2hlblxuICAgICAqIGFscmVhZHkgaW4gYSBsaXN0LCBvciB3aGVuIGluIGNvbW1vbm1hcmssIG9yIHdoZW5cbiAgICAgKiBpbiBnZm0gbW9kZSBhbmQgdGhlIGJ1bGxldCBpcyAqbm90KiBudW1lcmljLiAqL1xuICAgIGlmIChcbiAgICAgIHRva2VuaXplcnMubGlzdC5jYWxsKHNlbGYsIGVhdCwgc3VidmFsdWUsIHRydWUpICYmXG4gICAgICAoXG4gICAgICAgIHNlbGYuaW5MaXN0IHx8XG4gICAgICAgIGNvbW1vbm1hcmsgfHxcbiAgICAgICAgKGdmbSAmJiAhZGVjaW1hbCh0cmltLmxlZnQoc3VidmFsdWUpLmNoYXJBdCgwKSkpXG4gICAgICApXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb3NpdGlvbiA9IGluZGV4O1xuICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihDX05FV0xJTkUsIGluZGV4ICsgMSk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xICYmIHRyaW0odmFsdWUuc2xpY2UocG9zaXRpb24sIGluZGV4KSkgPT09ICcnKSB7XG4gICAgICBpbmRleCA9IHBvc2l0aW9uO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpbmRleCk7XG5cbiAgaWYgKHRyaW0oc3VidmFsdWUpID09PSAnJykge1xuICAgIGVhdChzdWJ2YWx1ZSk7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBzdWJ2YWx1ZSA9IHRyaW1UcmFpbGluZ0xpbmVzKHN1YnZhbHVlKTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ3BhcmFncmFwaCcsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoc3VidmFsdWUsIG5vdylcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvZXNjYXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlO1xuZXNjYXBlLmxvY2F0b3IgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGVzY2FwZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgY2hhcmFjdGVyO1xuICB2YXIgbm9kZTtcblxuICBpZiAodmFsdWUuY2hhckF0KDApID09PSAnXFxcXCcpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMSk7XG5cbiAgICBpZiAoc2VsZi5lc2NhcGUuaW5kZXhPZihjaGFyYWN0ZXIpICE9PSAtMSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgICAgbm9kZSA9IHt0eXBlOiAnYnJlYWsnfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgIHZhbHVlOiBjaGFyYWN0ZXJcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdCgnXFxcXCcgKyBjaGFyYWN0ZXIpKG5vZGUpO1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ1xcXFwnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXV0b0xpbms7XG5hdXRvTGluay5sb2NhdG9yID0gbG9jYXRlO1xuYXV0b0xpbmsubm90SW5MaW5rID0gdHJ1ZTtcblxudmFyIENfTFQgPSAnPCc7XG52YXIgQ19HVCA9ICc+JztcbnZhciBDX0FUX1NJR04gPSAnQCc7XG52YXIgQ19TTEFTSCA9ICcvJztcbnZhciBNQUlMVE8gPSAnbWFpbHRvOic7XG52YXIgTUFJTFRPX0xFTkdUSCA9IE1BSUxUTy5sZW5ndGg7XG5cbi8qIFRva2VuaXNlIGEgbGluay4gKi9cbmZ1bmN0aW9uIGF1dG9MaW5rKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZjtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgaW5kZXg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGhhc0F0Q2hhcmFjdGVyO1xuICB2YXIgbGluaztcbiAgdmFyIG5vdztcbiAgdmFyIGNvbnRlbnQ7XG4gIHZhciB0b2tlbml6ZXJzO1xuICB2YXIgZXhpdDtcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSBDX0xUKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc2VsZiA9IHRoaXM7XG4gIHN1YnZhbHVlID0gJyc7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXggPSAwO1xuICBxdWV1ZSA9ICcnO1xuICBoYXNBdENoYXJhY3RlciA9IGZhbHNlO1xuICBsaW5rID0gJyc7XG5cbiAgaW5kZXgrKztcbiAgc3VidmFsdWUgPSBDX0xUO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoXG4gICAgICB3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gQ19HVCB8fFxuICAgICAgY2hhcmFjdGVyID09PSBDX0FUX1NJR04gfHxcbiAgICAgIChjaGFyYWN0ZXIgPT09ICc6JyAmJiB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSA9PT0gQ19TTEFTSClcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxpbmsgKz0gcXVldWU7XG4gIHF1ZXVlID0gJyc7XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgbGluayArPSBjaGFyYWN0ZXI7XG4gIGluZGV4Kys7XG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gQ19BVF9TSUdOKSB7XG4gICAgaGFzQXRDaGFyYWN0ZXIgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciAhPT0gJzonIHx8XG4gICAgICB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKSAhPT0gQ19TTEFTSFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxpbmsgKz0gQ19TTEFTSDtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBDX0dUKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgaWYgKCFxdWV1ZSB8fCBjaGFyYWN0ZXIgIT09IENfR1QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGxpbmsgKz0gcXVldWU7XG4gIGNvbnRlbnQgPSBsaW5rO1xuICBzdWJ2YWx1ZSArPSBsaW5rICsgY2hhcmFjdGVyO1xuICBub3cgPSBlYXQubm93KCk7XG4gIG5vdy5jb2x1bW4rKztcbiAgbm93Lm9mZnNldCsrO1xuXG4gIGlmIChoYXNBdENoYXJhY3Rlcikge1xuICAgIGlmIChsaW5rLnNsaWNlKDAsIE1BSUxUT19MRU5HVEgpLnRvTG93ZXJDYXNlKCkgPT09IE1BSUxUTykge1xuICAgICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKE1BSUxUT19MRU5HVEgpO1xuICAgICAgbm93LmNvbHVtbiArPSBNQUlMVE9fTEVOR1RIO1xuICAgICAgbm93Lm9mZnNldCArPSBNQUlMVE9fTEVOR1RIO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rID0gTUFJTFRPICsgbGluaztcbiAgICB9XG4gIH1cblxuICAvKiBUZW1wb3JhcmlseSByZW1vdmUgYWxsIHRva2VuaXplcnMgZXhjZXB0IHRleHQgaW4gYXV0b2xpbmtzLiAqL1xuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzO1xuICBzZWxmLmlubGluZVRva2VuaXplcnMgPSB7dGV4dDogdG9rZW5pemVycy50ZXh0fTtcblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcblxuICBjb250ZW50ID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuXG4gIHNlbGYuaW5saW5lVG9rZW5pemVycyA9IHRva2VuaXplcnM7XG4gIGV4aXQoKTtcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHVybDogZGVjb2RlKGxpbmssIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pLFxuICAgIGNoaWxkcmVuOiBjb250ZW50XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKTtcbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKTtcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvdXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXJsO1xudXJsLmxvY2F0b3IgPSBsb2NhdGU7XG51cmwubm90SW5MaW5rID0gdHJ1ZTtcblxudmFyIENfQlJBQ0tFVF9PUEVOID0gJ1snO1xudmFyIENfQlJBQ0tFVF9DTE9TRSA9ICddJztcbnZhciBDX1BBUkVOX09QRU4gPSAnKCc7XG52YXIgQ19QQVJFTl9DTE9TRSA9ICcpJztcbnZhciBDX0xUID0gJzwnO1xudmFyIENfQVRfU0lHTiA9ICdAJztcblxudmFyIEhUVFBfUFJPVE9DT0wgPSAnaHR0cDovLyc7XG52YXIgSFRUUFNfUFJPVE9DT0wgPSAnaHR0cHM6Ly8nO1xudmFyIE1BSUxUT19QUk9UT0NPTCA9ICdtYWlsdG86JztcblxudmFyIFBST1RPQ09MUyA9IFtcbiAgSFRUUF9QUk9UT0NPTCxcbiAgSFRUUFNfUFJPVE9DT0wsXG4gIE1BSUxUT19QUk9UT0NPTFxuXTtcblxudmFyIFBST1RPQ09MU19MRU5HVEggPSBQUk9UT0NPTFMubGVuZ3RoO1xuXG5mdW5jdGlvbiB1cmwoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGluZGV4O1xuICB2YXIgcG9zaXRpb247XG4gIHZhciBwcm90b2NvbDtcbiAgdmFyIG1hdGNoO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgcXVldWU7XG4gIHZhciBwYXJlbkNvdW50O1xuICB2YXIgbmV4dENoYXJhY3RlcjtcbiAgdmFyIGV4aXQ7XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3VidmFsdWUgPSAnJztcbiAgaW5kZXggPSAtMTtcbiAgbGVuZ3RoID0gUFJPVE9DT0xTX0xFTkdUSDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHByb3RvY29sID0gUFJPVE9DT0xTW2luZGV4XTtcbiAgICBtYXRjaCA9IHZhbHVlLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCk7XG5cbiAgICBpZiAobWF0Y2gudG9Mb3dlckNhc2UoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHN1YnZhbHVlID0gbWF0Y2g7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSBzdWJ2YWx1ZS5sZW5ndGg7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgcXVldWUgPSAnJztcbiAgcGFyZW5Db3VudCA9IDA7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBDX0xUKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjaGFyYWN0ZXIgPT09ICcuJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnLCcgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gJzonIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICc7JyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnXCInIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICdcXCcnIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09ICcpJyB8fFxuICAgICAgY2hhcmFjdGVyID09PSAnXSdcbiAgICApIHtcbiAgICAgIG5leHRDaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgICAgaWYgKCFuZXh0Q2hhcmFjdGVyIHx8IHdoaXRlc3BhY2UobmV4dENoYXJhY3RlcikpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9PUEVOIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICAgIHBhcmVuQ291bnQrKztcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX0NMT1NFIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBwYXJlbkNvdW50LS07XG5cbiAgICAgIGlmIChwYXJlbkNvdW50IDwgMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBxdWV1ZTtcbiAgY29udGVudCA9IHN1YnZhbHVlO1xuXG4gIGlmIChwcm90b2NvbCA9PT0gTUFJTFRPX1BST1RPQ09MKSB7XG4gICAgcG9zaXRpb24gPSBxdWV1ZS5pbmRleE9mKENfQVRfU0lHTik7XG5cbiAgICBpZiAocG9zaXRpb24gPT09IC0xIHx8IHBvc2l0aW9uID09PSBsZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKE1BSUxUT19QUk9UT0NPTC5sZW5ndGgpO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgY29udGVudCA9IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgZWF0Lm5vdygpKTtcbiAgZXhpdCgpO1xuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdXJsOiBkZWNvZGUoc3VidmFsdWUsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pLFxuICAgIGNoaWxkcmVuOiBjb250ZW50XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxudmFyIFBST1RPQ09MUyA9IFsnaHR0cHM6Ly8nLCAnaHR0cDovLycsICdtYWlsdG86J107XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBsZW5ndGggPSBQUk9UT0NPTFMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIG1pbiA9IC0xO1xuICB2YXIgcG9zaXRpb247XG5cbiAgaWYgKCF0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHZhbHVlLmluZGV4T2YoUFJPVE9DT0xTW2luZGV4XSwgZnJvbUluZGV4KTtcblxuICAgIGlmIChwb3NpdGlvbiAhPT0gLTEgJiYgKHBvc2l0aW9uIDwgbWluIHx8IG1pbiA9PT0gLTEpKSB7XG4gICAgICBtaW4gPSBwb3NpdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWxwaGFiZXRpY2FsID0gcmVxdWlyZSgnaXMtYWxwaGFiZXRpY2FsJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3RhZycpO1xudmFyIHRhZyA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbCcpLnRhZztcblxubW9kdWxlLmV4cG9ydHMgPSBpbmxpbmVIVE1MO1xuaW5saW5lSFRNTC5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTiA9IC9ePGEgL2k7XG52YXIgRVhQUkVTU0lPTl9IVE1MX0xJTktfQ0xPU0UgPSAvXjxcXC9hPi9pO1xuXG5mdW5jdGlvbiBpbmxpbmVIVE1MKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBjaGFyYWN0ZXI7XG4gIHZhciBzdWJ2YWx1ZTtcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSAnPCcgfHwgbGVuZ3RoIDwgMykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgxKTtcblxuICBpZiAoXG4gICAgIWFscGhhYmV0aWNhbChjaGFyYWN0ZXIpICYmXG4gICAgY2hhcmFjdGVyICE9PSAnPycgJiZcbiAgICBjaGFyYWN0ZXIgIT09ICchJyAmJlxuICAgIGNoYXJhY3RlciAhPT0gJy8nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHN1YnZhbHVlID0gdmFsdWUubWF0Y2godGFnKTtcblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbm90IHVzZWQgeWV0LiAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHN1YnZhbHVlWzBdO1xuXG4gIGlmICghc2VsZi5pbkxpbmsgJiYgRVhQUkVTU0lPTl9IVE1MX0xJTktfT1BFTi50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChzZWxmLmluTGluayAmJiBFWFBSRVNTSU9OX0hUTUxfTElOS19DTE9TRS50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7dHlwZTogJ2h0bWwnLCB2YWx1ZTogc3VidmFsdWV9KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9saW5rJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbGluaztcbmxpbmsubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuXG52YXIgQ19CQUNLU0xBU0ggPSAnXFxcXCc7XG52YXIgQ19CUkFDS0VUX09QRU4gPSAnWyc7XG52YXIgQ19CUkFDS0VUX0NMT1NFID0gJ10nO1xudmFyIENfUEFSRU5fT1BFTiA9ICcoJztcbnZhciBDX1BBUkVOX0NMT1NFID0gJyknO1xudmFyIENfTFQgPSAnPCc7XG52YXIgQ19HVCA9ICc+JztcbnZhciBDX1RJQ0sgPSAnYCc7XG52YXIgQ19ET1VCTEVfUVVPVEUgPSAnXCInO1xudmFyIENfU0lOR0xFX1FVT1RFID0gJ1xcJyc7XG5cbi8qIE1hcCBvZiBjaGFyYWN0ZXJzLCB3aGljaCBjYW4gYmUgdXNlZCB0byBtYXJrIGxpbmtcbiAqIGFuZCBpbWFnZSB0aXRsZXMuICovXG52YXIgTElOS19NQVJLRVJTID0ge307XG5cbkxJTktfTUFSS0VSU1tDX0RPVUJMRV9RVU9URV0gPSBDX0RPVUJMRV9RVU9URTtcbkxJTktfTUFSS0VSU1tDX1NJTkdMRV9RVU9URV0gPSBDX1NJTkdMRV9RVU9URTtcblxuLyogTWFwIG9mIGNoYXJhY3RlcnMsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIG1hcmsgbGlua1xuICogYW5kIGltYWdlIHRpdGxlcyBpbiBjb21tb25tYXJrLW1vZGUuICovXG52YXIgQ09NTU9OTUFSS19MSU5LX01BUktFUlMgPSB7fTtcblxuQ09NTU9OTUFSS19MSU5LX01BUktFUlNbQ19ET1VCTEVfUVVPVEVdID0gQ19ET1VCTEVfUVVPVEU7XG5DT01NT05NQVJLX0xJTktfTUFSS0VSU1tDX1NJTkdMRV9RVU9URV0gPSBDX1NJTkdMRV9RVU9URTtcbkNPTU1PTk1BUktfTElOS19NQVJLRVJTW0NfUEFSRU5fT1BFTl0gPSBDX1BBUkVOX0NMT1NFO1xuXG5mdW5jdGlvbiBsaW5rKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDApO1xuICB2YXIgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIHZhciBjb21tb25tYXJrID0gc2VsZi5vcHRpb25zLmNvbW1vbm1hcms7XG4gIHZhciBnZm0gPSBzZWxmLm9wdGlvbnMuZ2ZtO1xuICB2YXIgY2xvc2VkO1xuICB2YXIgY291bnQ7XG4gIHZhciBvcGVuaW5nO1xuICB2YXIgYmVmb3JlVVJMO1xuICB2YXIgYmVmb3JlVGl0bGU7XG4gIHZhciBzdWJxdWV1ZTtcbiAgdmFyIGhhc01hcmtlcjtcbiAgdmFyIG1hcmtlcnM7XG4gIHZhciBpc0ltYWdlO1xuICB2YXIgY29udGVudDtcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIHRpdGxlO1xuICB2YXIgZGVwdGg7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHVybDtcbiAgdmFyIG5vdztcbiAgdmFyIGV4aXQ7XG4gIHZhciBub2RlO1xuXG4gIC8qIERldGVjdCB3aGV0aGVyIHRoaXMgaXMgYW4gaW1hZ2UuICovXG4gIGlmIChjaGFyYWN0ZXIgPT09ICchJykge1xuICAgIGlzSW1hZ2UgPSB0cnVlO1xuICAgIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgfVxuXG4gIC8qIEVhdCB0aGUgb3BlbmluZy4gKi9cbiAgaWYgKGNoYXJhY3RlciAhPT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKiBFeGl0IHdoZW4gdGhpcyBpcyBhIGxpbmsgYW5kIHdl4oCZcmUgYWxyZWFkeSBpbnNpZGVcbiAgICogYSBsaW5rLiAqL1xuICBpZiAoIWlzSW1hZ2UgJiYgc2VsZi5pbkxpbmspIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gIHF1ZXVlID0gJyc7XG4gIGluZGV4Kys7XG5cbiAgLyogRWF0IHRoZSBjb250ZW50LiAqL1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgZGVwdGggPSAwO1xuXG4gIG5vdy5jb2x1bW4gKz0gaW5kZXg7XG4gIG5vdy5vZmZzZXQgKz0gaW5kZXg7XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcbiAgICBzdWJxdWV1ZSA9IGNoYXJhY3RlcjtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgLyogSW5saW5lLWNvZGUgaW4gbGluayBjb250ZW50LiAqL1xuICAgICAgY291bnQgPSAxO1xuXG4gICAgICB3aGlsZSAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IENfVElDSykge1xuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3BlbmluZykge1xuICAgICAgICBvcGVuaW5nID0gY291bnQ7XG4gICAgICB9IGVsc2UgaWYgKGNvdW50ID49IG9wZW5pbmcpIHtcbiAgICAgICAgb3BlbmluZyA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAvKiBBbGxvdyBicmFja2V0cyB0byBiZSBlc2NhcGVkLiAqL1xuICAgICAgaW5kZXgrKztcbiAgICAgIHN1YnF1ZXVlICs9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgLyogSW4gR0ZNIG1vZGUsIGJyYWNrZXRzIGluIGNvZGUgc3RpbGwgY291bnQuXG4gICAgICogSW4gYWxsIG90aGVyIG1vZGVzLCB0aGV5IGRvbuKAmXQuICBUaGlzIGVtcHR5XG4gICAgICogYmxvY2sgcHJldmVudHMgdGhlIG5leHQgc3RhdGVtZW50cyBhcmVcbiAgICAgKiBlbnRlcmVkLiAqL1xuICAgIH0gZWxzZSBpZiAoKCFvcGVuaW5nIHx8IGdmbSkgJiYgY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfT1BFTikge1xuICAgICAgZGVwdGgrKztcbiAgICB9IGVsc2UgaWYgKCghb3BlbmluZyB8fCBnZm0pICYmIGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICBpZiAoZGVwdGgpIHtcbiAgICAgICAgZGVwdGgtLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEFsbG93IHdoaXRlLXNwYWNlIGJldHdlZW4gY29udGVudCBhbmRcbiAgICAgICAgICogdXJsIGluIEdGTSBtb2RlLiAqL1xuICAgICAgICBpZiAoIXBlZGFudGljKSB7XG4gICAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgICAgICAgICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN1YnF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBDX1BBUkVOX09QRU4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBDX1BBUkVOX09QRU47XG4gICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVldWUgKz0gc3VicXVldWU7XG4gICAgc3VicXVldWUgPSAnJztcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgLyogRWF0IHRoZSBjb250ZW50IGNsb3NpbmcuICovXG4gIGlmICghY2xvc2VkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29udGVudCA9IHF1ZXVlO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZSArIHN1YnF1ZXVlO1xuICBpbmRleCsrO1xuXG4gIC8qIEVhdCB3aGl0ZS1zcGFjZS4gKi9cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgIGlmICghd2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIC8qIEVhdCB0aGUgVVJMLiAqL1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBtYXJrZXJzID0gY29tbW9ubWFyayA/IENPTU1PTk1BUktfTElOS19NQVJLRVJTIDogTElOS19NQVJLRVJTO1xuICBxdWV1ZSA9ICcnO1xuICBiZWZvcmVVUkwgPSBzdWJ2YWx1ZTtcblxuICBpZiAoY2hhcmFjdGVyID09PSBDX0xUKSB7XG4gICAgaW5kZXgrKztcbiAgICBiZWZvcmVVUkwgKz0gQ19MVDtcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gQ19HVCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbW1vbm1hcmsgJiYgY2hhcmFjdGVyID09PSAnXFxuJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGluZGV4Kys7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IENfR1QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBDX0xUICsgcXVldWUgKyBDX0dUO1xuICAgIHVybCA9IHF1ZXVlO1xuICAgIGluZGV4Kys7XG4gIH0gZWxzZSB7XG4gICAgY2hhcmFjdGVyID0gbnVsbDtcbiAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgICBpZiAoc3VicXVldWUgJiYgb3duLmNhbGwobWFya2VycywgY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgICBpZiAoIXBlZGFudGljKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX1BBUkVOX09QRU4pIHtcbiAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gQ19QQVJFTl9DTE9TRSkge1xuICAgICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlICs9IHN1YnF1ZXVlO1xuICAgICAgICBzdWJxdWV1ZSA9ICcnO1xuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQkFDS1NMQVNIKSB7XG4gICAgICAgICAgcXVldWUgKz0gQ19CQUNLU0xBU0g7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgIHVybCA9IHF1ZXVlO1xuICAgIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoO1xuICB9XG5cbiAgLyogRWF0IHdoaXRlLXNwYWNlLiAqL1xuICBxdWV1ZSA9ICcnO1xuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICBzdWJ2YWx1ZSArPSBxdWV1ZTtcblxuICAvKiBFYXQgdGhlIHRpdGxlLiAqL1xuICBpZiAocXVldWUgJiYgb3duLmNhbGwobWFya2VycywgY2hhcmFjdGVyKSkge1xuICAgIGluZGV4Kys7XG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyO1xuICAgIHF1ZXVlID0gJyc7XG4gICAgbWFya2VyID0gbWFya2Vyc1tjaGFyYWN0ZXJdO1xuICAgIGJlZm9yZVRpdGxlID0gc3VidmFsdWU7XG5cbiAgICAvKiBJbiBjb21tb25tYXJrLW1vZGUsIHRoaW5ncyBhcmUgcHJldHR5IGVhc3k6IHRoZVxuICAgICAqIG1hcmtlciBjYW5ub3Qgb2NjdXIgaW5zaWRlIHRoZSB0aXRsZS5cbiAgICAgKlxuICAgICAqIE5vbi1jb21tb25tYXJrIGRvZXMsIGhvd2V2ZXIsIHN1cHBvcnQgbmVzdGVkXG4gICAgICogZGVsaW1pdGVycy4gKi9cbiAgICBpZiAoY29tbW9ubWFyaykge1xuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgICAgIHF1ZXVlICs9IENfQkFDS1NMQVNIO1xuICAgICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIH1cblxuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGl0bGUgPSBxdWV1ZTtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3VicXVldWUgPSAnJztcblxuICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgaWYgKGhhc01hcmtlcikge1xuICAgICAgICAgICAgcXVldWUgKz0gbWFya2VyICsgc3VicXVldWU7XG4gICAgICAgICAgICBzdWJxdWV1ZSA9ICcnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhhc01hcmtlciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoIWhhc01hcmtlcikge1xuICAgICAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IENfUEFSRU5fQ0xPU0UpIHtcbiAgICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIG1hcmtlciArIHN1YnF1ZXVlO1xuICAgICAgICAgIHRpdGxlID0gcXVldWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZShjaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXVlICs9IG1hcmtlciArIHN1YnF1ZXVlICsgY2hhcmFjdGVyO1xuICAgICAgICAgIHN1YnF1ZXVlID0gJyc7XG4gICAgICAgICAgaGFzTWFya2VyID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBDX1BBUkVOX0NMT1NFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzdWJ2YWx1ZSArPSBDX1BBUkVOX0NMT1NFO1xuXG4gIHVybCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKHVybCksIGVhdChiZWZvcmVVUkwpLnRlc3QoKS5lbmQsIHtub25UZXJtaW5hdGVkOiBmYWxzZX0pO1xuXG4gIGlmICh0aXRsZSkge1xuICAgIGJlZm9yZVRpdGxlID0gZWF0KGJlZm9yZVRpdGxlKS50ZXN0KCkuZW5kO1xuICAgIHRpdGxlID0gc2VsZi5kZWNvZGUucmF3KHNlbGYudW5lc2NhcGUodGl0bGUpLCBiZWZvcmVUaXRsZSk7XG4gIH1cblxuICBub2RlID0ge1xuICAgIHR5cGU6IGlzSW1hZ2UgPyAnaW1hZ2UnIDogJ2xpbmsnLFxuICAgIHRpdGxlOiB0aXRsZSB8fCBudWxsLFxuICAgIHVybDogdXJsXG4gIH07XG5cbiAgaWYgKGlzSW1hZ2UpIHtcbiAgICBub2RlLmFsdCA9IHNlbGYuZGVjb2RlLnJhdyhzZWxmLnVuZXNjYXBlKGNvbnRlbnQpLCBub3cpIHx8IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgZXhpdCA9IHNlbGYuZW50ZXJMaW5rKCk7XG4gICAgbm9kZS5jaGlsZHJlbiA9IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KTtcbiAgICBleGl0KCk7XG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKShub2RlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9saW5rJyk7XG52YXIgbm9ybWFsaXplID0gcmVxdWlyZSgnLi4vdXRpbC9ub3JtYWxpemUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZWZlcmVuY2U7XG5yZWZlcmVuY2UubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIFRfTElOSyA9ICdsaW5rJztcbnZhciBUX0lNQUdFID0gJ2ltYWdlJztcbnZhciBUX0ZPT1ROT1RFID0gJ2Zvb3Rub3RlJztcbnZhciBSRUZFUkVOQ0VfVFlQRV9TSE9SVENVVCA9ICdzaG9ydGN1dCc7XG52YXIgUkVGRVJFTkNFX1RZUEVfQ09MTEFQU0VEID0gJ2NvbGxhcHNlZCc7XG52YXIgUkVGRVJFTkNFX1RZUEVfRlVMTCA9ICdmdWxsJztcbnZhciBDX0NBUkVUID0gJ14nO1xudmFyIENfQkFDS1NMQVNIID0gJ1xcXFwnO1xudmFyIENfQlJBQ0tFVF9PUEVOID0gJ1snO1xudmFyIENfQlJBQ0tFVF9DTE9TRSA9ICddJztcblxuZnVuY3Rpb24gcmVmZXJlbmNlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMCk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZSA9ICcnO1xuICB2YXIgaW50cm8gPSAnJztcbiAgdmFyIHR5cGUgPSBUX0xJTks7XG4gIHZhciByZWZlcmVuY2VUeXBlID0gUkVGRVJFTkNFX1RZUEVfU0hPUlRDVVQ7XG4gIHZhciBjb250ZW50O1xuICB2YXIgaWRlbnRpZmllcjtcbiAgdmFyIG5vdztcbiAgdmFyIG5vZGU7XG4gIHZhciBleGl0O1xuICB2YXIgcXVldWU7XG4gIHZhciBicmFja2V0ZWQ7XG4gIHZhciBkZXB0aDtcblxuICAvKiBDaGVjayB3aGV0aGVyIHdl4oCZcmUgZWF0aW5nIGFuIGltYWdlLiAqL1xuICBpZiAoY2hhcmFjdGVyID09PSAnIScpIHtcbiAgICB0eXBlID0gVF9JTUFHRTtcbiAgICBpbnRybyA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gIH1cblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX0JSQUNLRVRfT1BFTikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIGludHJvICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcblxuICAvKiBDaGVjayB3aGV0aGVyIHdl4oCZcmUgZWF0aW5nIGEgZm9vdG5vdGUuICovXG4gIGlmIChzZWxmLm9wdGlvbnMuZm9vdG5vdGVzICYmIHZhbHVlLmNoYXJBdChpbmRleCkgPT09IENfQ0FSRVQpIHtcbiAgICAvKiBFeGl0IGlmIGAhW15gIGlzIGZvdW5kLCBzbyB0aGUgYCFgIHdpbGwgYmUgc2VlbiBhcyB0ZXh0IGFmdGVyIHRoaXMsXG4gICAgICogYW5kIHdl4oCZbGwgZW50ZXIgdGhpcyBmdW5jdGlvbiBhZ2FpbiB3aGVuIGBbXmAgaXMgZm91bmQuICovXG4gICAgaWYgKHR5cGUgPT09IFRfSU1BR0UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpbnRybyArPSBDX0NBUkVUO1xuICAgIGluZGV4Kys7XG4gICAgdHlwZSA9IFRfRk9PVE5PVEU7XG4gIH1cblxuICAvKiBFYXQgdGhlIHRleHQuICovXG4gIGRlcHRoID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICAgIGJyYWNrZXRlZCA9IHRydWU7XG4gICAgICBkZXB0aCsrO1xuICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyID09PSBDX0JSQUNLRVRfQ0xPU0UpIHtcbiAgICAgIGlmICghZGVwdGgpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRlcHRoLS07XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CQUNLU0xBU0gpIHtcbiAgICAgIHF1ZXVlICs9IENfQkFDS1NMQVNIO1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgc3VidmFsdWUgPSBxdWV1ZTtcbiAgY29udGVudCA9IHF1ZXVlO1xuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gIGlmIChjaGFyYWN0ZXIgIT09IENfQlJBQ0tFVF9DTE9TRSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGluZGV4Kys7XG4gIHN1YnZhbHVlICs9IGNoYXJhY3RlcjtcbiAgcXVldWUgPSAnJztcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKCF3aGl0ZXNwYWNlKGNoYXJhY3RlcikpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICBpbmRleCsrO1xuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KTtcblxuICAvKiBJbmxpbmUgZm9vdG5vdGVzIGNhbm5vdCBoYXZlIGFuIGlkZW50aWZpZXIuICovXG4gIGlmICh0eXBlICE9PSBUX0ZPT1ROT1RFICYmIGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX09QRU4pIHtcbiAgICBpZGVudGlmaWVyID0gJyc7XG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IENfQlJBQ0tFVF9PUEVOIHx8IGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBDX0JBQ0tTTEFTSCkge1xuICAgICAgICBpZGVudGlmaWVyICs9IENfQkFDS1NMQVNIO1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlkZW50aWZpZXIgKz0gY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gQ19CUkFDS0VUX0NMT1NFKSB7XG4gICAgICByZWZlcmVuY2VUeXBlID0gaWRlbnRpZmllciA/IFJFRkVSRU5DRV9UWVBFX0ZVTEwgOiBSRUZFUkVOQ0VfVFlQRV9DT0xMQVBTRUQ7XG4gICAgICBxdWV1ZSArPSBpZGVudGlmaWVyICsgY2hhcmFjdGVyO1xuICAgICAgaW5kZXgrKztcbiAgICB9IGVsc2Uge1xuICAgICAgaWRlbnRpZmllciA9ICcnO1xuICAgIH1cblxuICAgIHN1YnZhbHVlICs9IHF1ZXVlO1xuICAgIHF1ZXVlID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWRlbnRpZmllciA9IGNvbnRlbnQ7XG4gIH1cblxuICAvKiBCcmFja2V0cyBjYW5ub3QgYmUgaW5zaWRlIHRoZSBpZGVudGlmaWVyLiAqL1xuICBpZiAocmVmZXJlbmNlVHlwZSAhPT0gUkVGRVJFTkNFX1RZUEVfRlVMTCAmJiBicmFja2V0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9IGludHJvICsgc3VidmFsdWU7XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSyAmJiBzZWxmLmluTGluaykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gVF9GT09UTk9URSAmJiBjb250ZW50LmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgICB0eXBlOiAnZm9vdG5vdGUnLFxuICAgICAgY2hpbGRyZW46IHRoaXMudG9rZW5pemVJbmxpbmUoY29udGVudCwgZWF0Lm5vdygpKVxuICAgIH0pO1xuICB9XG5cbiAgbm93ID0gZWF0Lm5vdygpO1xuICBub3cuY29sdW1uICs9IGludHJvLmxlbmd0aDtcbiAgbm93Lm9mZnNldCArPSBpbnRyby5sZW5ndGg7XG4gIGlkZW50aWZpZXIgPSByZWZlcmVuY2VUeXBlID09PSBSRUZFUkVOQ0VfVFlQRV9GVUxMID8gaWRlbnRpZmllciA6IGNvbnRlbnQ7XG5cbiAgbm9kZSA9IHtcbiAgICB0eXBlOiB0eXBlICsgJ1JlZmVyZW5jZScsXG4gICAgaWRlbnRpZmllcjogbm9ybWFsaXplKGlkZW50aWZpZXIpXG4gIH07XG5cbiAgaWYgKHR5cGUgPT09IFRfTElOSyB8fCB0eXBlID09PSBUX0lNQUdFKSB7XG4gICAgbm9kZS5yZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlVHlwZTtcbiAgfVxuXG4gIGlmICh0eXBlID09PSBUX0xJTkspIHtcbiAgICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKTtcbiAgICBub2RlLmNoaWxkcmVuID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBub3cpO1xuICAgIGV4aXQoKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBUX0lNQUdFKSB7XG4gICAgbm9kZS5hbHQgPSBzZWxmLmRlY29kZS5yYXcoc2VsZi51bmVzY2FwZShjb250ZW50KSwgbm93KSB8fCBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkobm9kZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpO1xudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9zdHJvbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJvbmc7XG5zdHJvbmcubG9jYXRvciA9IGxvY2F0ZTtcblxudmFyIENfQVNURVJJU0sgPSAnKic7XG52YXIgQ19VTkRFUlNDT1JFID0gJ18nO1xuXG5mdW5jdGlvbiBzdHJvbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIHZhciBub3c7XG4gIHZhciBwZWRhbnRpYztcbiAgdmFyIG1hcmtlcjtcbiAgdmFyIHF1ZXVlO1xuICB2YXIgc3VidmFsdWU7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBwcmV2O1xuXG4gIGlmIChcbiAgICAoY2hhcmFjdGVyICE9PSBDX0FTVEVSSVNLICYmIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFKSB8fFxuICAgIHZhbHVlLmNoYXJBdCgrK2luZGV4KSAhPT0gY2hhcmFjdGVyXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBlZGFudGljID0gc2VsZi5vcHRpb25zLnBlZGFudGljO1xuICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIHN1YnZhbHVlID0gbWFya2VyICsgbWFya2VyO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIGluZGV4Kys7XG4gIHF1ZXVlID0gJyc7XG4gIGNoYXJhY3RlciA9ICcnO1xuXG4gIGlmIChwZWRhbnRpYyAmJiB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdChpbmRleCkpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJldiA9IGNoYXJhY3RlcjtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBtYXJrZXIgJiZcbiAgICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBtYXJrZXIgJiZcbiAgICAgICghcGVkYW50aWMgfHwgIXdoaXRlc3BhY2UocHJldikpXG4gICAgKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAyKTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIGlmICghdHJpbShxdWV1ZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKTtcbiAgICAgICAgbm93LmNvbHVtbiArPSAyO1xuICAgICAgICBub3cub2Zmc2V0ICs9IDI7XG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgc3VidmFsdWUpKHtcbiAgICAgICAgICB0eXBlOiAnc3Ryb25nJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBlZGFudGljICYmIGNoYXJhY3RlciA9PT0gJ1xcXFwnKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleCk7XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICAgIGluZGV4Kys7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGU7XG5cbmZ1bmN0aW9uIGxvY2F0ZSh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gIHZhciBhc3RlcmlzayA9IHZhbHVlLmluZGV4T2YoJyoqJywgZnJvbUluZGV4KTtcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfXycsIGZyb21JbmRleCk7XG5cbiAgaWYgKHVuZGVyc2NvcmUgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFzdGVyaXNrO1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlzaztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJyk7XG52YXIgd29yZCA9IHJlcXVpcmUoJ2lzLXdvcmQtY2hhcmFjdGVyJyk7XG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJyk7XG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2VtcGhhc2lzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZW1waGFzaXM7XG5lbXBoYXNpcy5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19BU1RFUklTSyA9ICcqJztcbnZhciBDX1VOREVSU0NPUkUgPSAnXyc7XG5cbmZ1bmN0aW9uIGVtcGhhc2lzKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuICB2YXIgbm93O1xuICB2YXIgcGVkYW50aWM7XG4gIHZhciBtYXJrZXI7XG4gIHZhciBxdWV1ZTtcbiAgdmFyIHN1YnZhbHVlO1xuICB2YXIgbGVuZ3RoO1xuICB2YXIgcHJldjtcblxuICBpZiAoY2hhcmFjdGVyICE9PSBDX0FTVEVSSVNLICYmIGNoYXJhY3RlciAhPT0gQ19VTkRFUlNDT1JFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWM7XG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyO1xuICBtYXJrZXIgPSBjaGFyYWN0ZXI7XG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgaW5kZXgrKztcbiAgcXVldWUgPSAnJztcbiAgY2hhcmFjdGVyID0gJyc7XG5cbiAgaWYgKHBlZGFudGljICYmIHdoaXRlc3BhY2UodmFsdWUuY2hhckF0KGluZGV4KSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcmV2ID0gY2hhcmFjdGVyO1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBtYXJrZXIgJiYgKCFwZWRhbnRpYyB8fCAhd2hpdGVzcGFjZShwcmV2KSkpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gbWFya2VyKSB7XG4gICAgICAgIGlmICghdHJpbShxdWV1ZSkgfHwgcHJldiA9PT0gbWFya2VyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgPT09IENfVU5ERVJTQ09SRSAmJiB3b3JkKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICBxdWV1ZSArPSBtYXJrZXI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKTtcbiAgICAgICAgbm93LmNvbHVtbisrO1xuICAgICAgICBub3cub2Zmc2V0Kys7XG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgbWFya2VyKSh7XG4gICAgICAgICAgdHlwZTogJ2VtcGhhc2lzJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gbWFya2VyO1xuICAgIH1cblxuICAgIGlmICghcGVkYW50aWMgJiYgY2hhcmFjdGVyID09PSAnXFxcXCcpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KTtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgaW5kZXgrKztcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gd29yZENoYXJhY3RlclxuXG52YXIgZnJvbUNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG52YXIgcmUgPSAvXFx3L1xuXG4vLyBDaGVjayBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGNvZGUsIG9yIHRoZSBjaGFyYWN0ZXIgY29kZSBhdCB0aGUgZmlyc3Rcbi8vIGNoYXJhY3RlciwgaXMgYSB3b3JkIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIHdvcmRDaGFyYWN0ZXIoY2hhcmFjdGVyKSB7XG4gIHJldHVybiByZS50ZXN0KFxuICAgIHR5cGVvZiBjaGFyYWN0ZXIgPT09ICdudW1iZXInID8gZnJvbUNvZGUoY2hhcmFjdGVyKSA6IGNoYXJhY3Rlci5jaGFyQXQoMClcbiAgKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGFzdGVyaXNrID0gdmFsdWUuaW5kZXhPZignKicsIGZyb21JbmRleCk7XG4gIHZhciB1bmRlcnNjb3JlID0gdmFsdWUuaW5kZXhPZignXycsIGZyb21JbmRleCk7XG5cbiAgaWYgKHVuZGVyc2NvcmUgPT09IC0xKSB7XG4gICAgcmV0dXJuIGFzdGVyaXNrO1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlzaztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9kZWxldGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpa2V0aHJvdWdoO1xuc3RyaWtldGhyb3VnaC5sb2NhdG9yID0gbG9jYXRlO1xuXG52YXIgQ19USUxERSA9ICd+JztcbnZhciBET1VCTEUgPSAnfn4nO1xuXG5mdW5jdGlvbiBzdHJpa2V0aHJvdWdoKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBjaGFyYWN0ZXIgPSAnJztcbiAgdmFyIHByZXZpb3VzID0gJyc7XG4gIHZhciBwcmVjZWRpbmcgPSAnJztcbiAgdmFyIHN1YnZhbHVlID0gJyc7XG4gIHZhciBpbmRleDtcbiAgdmFyIGxlbmd0aDtcbiAgdmFyIG5vdztcblxuICBpZiAoXG4gICAgIXNlbGYub3B0aW9ucy5nZm0gfHxcbiAgICB2YWx1ZS5jaGFyQXQoMCkgIT09IENfVElMREUgfHxcbiAgICB2YWx1ZS5jaGFyQXQoMSkgIT09IENfVElMREUgfHxcbiAgICB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdCgyKSlcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaW5kZXggPSAxO1xuICBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIG5vdyA9IGVhdC5ub3coKTtcbiAgbm93LmNvbHVtbiArPSAyO1xuICBub3cub2Zmc2V0ICs9IDI7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBDX1RJTERFICYmXG4gICAgICBwcmV2aW91cyA9PT0gQ19USUxERSAmJlxuICAgICAgKCFwcmVjZWRpbmcgfHwgIXdoaXRlc3BhY2UocHJlY2VkaW5nKSlcbiAgICApIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlYXQoRE9VQkxFICsgc3VidmFsdWUgKyBET1VCTEUpKHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsXG4gICAgICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKHN1YnZhbHVlLCBub3cpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBwcmV2aW91cztcbiAgICBwcmVjZWRpbmcgPSBwcmV2aW91cztcbiAgICBwcmV2aW91cyA9IGNoYXJhY3RlcjtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ35+JywgZnJvbUluZGV4KTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpO1xudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9jb2RlLWlubGluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlubGluZUNvZGU7XG5pbmxpbmVDb2RlLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBDX1RJQ0sgPSAnYCc7XG5cbi8qIFRva2VuaXNlIGlubGluZSBjb2RlLiAqL1xuZnVuY3Rpb24gaW5saW5lQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHF1ZXVlID0gJyc7XG4gIHZhciB0aWNrUXVldWUgPSAnJztcbiAgdmFyIGNvbnRlbnRRdWV1ZTtcbiAgdmFyIHN1YnF1ZXVlO1xuICB2YXIgY291bnQ7XG4gIHZhciBvcGVuaW5nQ291bnQ7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIGNoYXJhY3RlcjtcbiAgdmFyIGZvdW5kO1xuICB2YXIgbmV4dDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gQ19USUNLKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBDX1RJQ0s7XG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghcXVldWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHF1ZXVlO1xuICBvcGVuaW5nQ291bnQgPSBpbmRleDtcbiAgcXVldWUgPSAnJztcbiAgbmV4dCA9IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gIGNvdW50ID0gMDtcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSBuZXh0O1xuICAgIG5leHQgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IENfVElDSykge1xuICAgICAgY291bnQrKztcbiAgICAgIHRpY2tRdWV1ZSArPSBjaGFyYWN0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ID0gMDtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlcjtcbiAgICB9XG5cbiAgICBpZiAoY291bnQgJiYgbmV4dCAhPT0gQ19USUNLKSB7XG4gICAgICBpZiAoY291bnQgPT09IG9wZW5pbmdDb3VudCkge1xuICAgICAgICBzdWJ2YWx1ZSArPSBxdWV1ZSArIHRpY2tRdWV1ZTtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gdGlja1F1ZXVlO1xuICAgICAgdGlja1F1ZXVlID0gJyc7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfVxuXG4gIGlmICghZm91bmQpIHtcbiAgICBpZiAob3BlbmluZ0NvdW50ICUgMiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHF1ZXVlID0gJyc7XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnRlbnRRdWV1ZSA9ICcnO1xuICBzdWJxdWV1ZSA9ICcnO1xuICBsZW5ndGggPSBxdWV1ZS5sZW5ndGg7XG4gIGluZGV4ID0gLTE7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSBxdWV1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgc3VicXVldWUgKz0gY2hhcmFjdGVyO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN1YnF1ZXVlKSB7XG4gICAgICBpZiAoY29udGVudFF1ZXVlKSB7XG4gICAgICAgIGNvbnRlbnRRdWV1ZSArPSBzdWJxdWV1ZTtcbiAgICAgIH1cblxuICAgICAgc3VicXVldWUgPSAnJztcbiAgICB9XG5cbiAgICBjb250ZW50UXVldWUgKz0gY2hhcmFjdGVyO1xuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdpbmxpbmVDb2RlJyxcbiAgICB2YWx1ZTogY29udGVudFF1ZXVlXG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZTtcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ2AnLCBmcm9tSW5kZXgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2JyZWFrJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gaGFyZEJyZWFrO1xuaGFyZEJyZWFrLmxvY2F0b3IgPSBsb2NhdGU7XG5cbnZhciBNSU5fQlJFQUtfTEVOR1RIID0gMjtcblxuZnVuY3Rpb24gaGFyZEJyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIHF1ZXVlID0gJyc7XG4gIHZhciBjaGFyYWN0ZXI7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpO1xuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcbiAgICAgIGlmIChpbmRleCA8IE1JTl9CUkVBS19MRU5HVEgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXI7XG5cbiAgICAgIHJldHVybiBlYXQocXVldWUpKHt0eXBlOiAnYnJlYWsnfSk7XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gJyAnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyO1xuICB9XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9jYXRlO1xuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSB2YWx1ZS5pbmRleE9mKCdcXG4nLCBmcm9tSW5kZXgpO1xuXG4gIHdoaWxlIChpbmRleCA+IGZyb21JbmRleCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXggLSAxKSAhPT0gJyAnKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpbmRleC0tO1xuICB9XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRleHQ7XG5cbmZ1bmN0aW9uIHRleHQoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIG1ldGhvZHM7XG4gIHZhciB0b2tlbml6ZXJzO1xuICB2YXIgaW5kZXg7XG4gIHZhciBsZW5ndGg7XG4gIHZhciBzdWJ2YWx1ZTtcbiAgdmFyIHBvc2l0aW9uO1xuICB2YXIgdG9rZW5pemVyO1xuICB2YXIgbmFtZTtcbiAgdmFyIG1pbjtcbiAgdmFyIG5vdztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG1ldGhvZHMgPSBzZWxmLmlubGluZU1ldGhvZHM7XG4gIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoO1xuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzO1xuICBpbmRleCA9IC0xO1xuICBtaW4gPSB2YWx1ZS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBuYW1lID0gbWV0aG9kc1tpbmRleF07XG5cbiAgICBpZiAobmFtZSA9PT0gJ3RleHQnIHx8ICF0b2tlbml6ZXJzW25hbWVdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB0b2tlbml6ZXIgPSB0b2tlbml6ZXJzW25hbWVdLmxvY2F0b3I7XG5cbiAgICBpZiAoIXRva2VuaXplcikge1xuICAgICAgZWF0LmZpbGUuZmFpbCgnTWlzc2luZyBsb2NhdG9yOiBgJyArIG5hbWUgKyAnYCcpO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gdG9rZW5pemVyLmNhbGwoc2VsZiwgdmFsdWUsIDEpO1xuXG4gICAgaWYgKHBvc2l0aW9uICE9PSAtMSAmJiBwb3NpdGlvbiA8IG1pbikge1xuICAgICAgbWluID0gcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBtaW4pO1xuICBub3cgPSBlYXQubm93KCk7XG5cbiAgc2VsZi5kZWNvZGUoc3VidmFsdWUsIG5vdywgZnVuY3Rpb24gKGNvbnRlbnQsIHBvc2l0aW9uLCBzb3VyY2UpIHtcbiAgICBlYXQoc291cmNlIHx8IGNvbnRlbnQpKHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIHZhbHVlOiBjb250ZW50XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsInZhciB2aXNpdFdpdGhQYXJlbnRzID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJyk7XG5cbmZ1bmN0aW9uIGFkZExpc3RNZXRhZGF0YSgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhc3QpIHtcbiAgICB2aXNpdFdpdGhQYXJlbnRzKGFzdCwgJ2xpc3QnLCBmdW5jdGlvbiAobGlzdE5vZGUsIHBhcmVudHMpIHtcbiAgICAgIHZhciBkZXB0aCA9IDAsIGksIG47XG4gICAgICBmb3IgKGkgPSAwLCBuID0gcGFyZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgaWYgKHBhcmVudHNbaV0udHlwZSA9PT0gJ2xpc3QnKSBkZXB0aCArPSAxO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMCwgbiA9IGxpc3ROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBsaXN0Tm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgY2hpbGQuaW5kZXggPSBpO1xuICAgICAgICBjaGlsZC5vcmRlcmVkID0gbGlzdE5vZGUub3JkZXJlZDtcbiAgICAgIH1cbiAgICAgIGxpc3ROb2RlLmRlcHRoID0gZGVwdGg7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFzdDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGRMaXN0TWV0YWRhdGE7XG4iLCIndXNlIHN0cmljdCdcblxuLyogRXhwb3NlLiAqL1xubW9kdWxlLmV4cG9ydHMgPSB2aXNpdFBhcmVudHNcblxuLyogVmlzaXQuICovXG5mdW5jdGlvbiB2aXNpdFBhcmVudHModHJlZSwgdHlwZSwgdmlzaXRvcikge1xuICB2YXIgc3RhY2sgPSBbXVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZpc2l0b3IgPSB0eXBlXG4gICAgdHlwZSA9IG51bGxcbiAgfVxuXG4gIG9uZSh0cmVlKVxuXG4gIC8qIFZpc2l0IGEgc2luZ2xlIG5vZGUuICovXG4gIGZ1bmN0aW9uIG9uZShub2RlKSB7XG4gICAgdmFyIHJlc3VsdFxuXG4gICAgaWYgKCF0eXBlIHx8IG5vZGUudHlwZSA9PT0gdHlwZSkge1xuICAgICAgcmVzdWx0ID0gdmlzaXRvcihub2RlLCBzdGFjay5jb25jYXQoKSlcbiAgICB9XG5cbiAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiByZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gYWxsKG5vZGUuY2hpbGRyZW4sIG5vZGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyogVmlzaXQgY2hpbGRyZW4gaW4gYHBhcmVudGAuICovXG4gIGZ1bmN0aW9uIGFsbChjaGlsZHJlbiwgcGFyZW50KSB7XG4gICAgdmFyIGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aFxuICAgIHZhciBpbmRleCA9IC0xXG4gICAgdmFyIGNoaWxkXG5cbiAgICBzdGFjay5wdXNoKHBhcmVudClcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2luZGV4XVxuXG4gICAgICBpZiAoY2hpbGQgJiYgb25lKGNoaWxkKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RhY2sucG9wKClcblxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIE5haXZlLCBzaW1wbGUgcGx1Z2luIHRvIG1hdGNoIGlubGluZSBub2RlcyB3aXRob3V0IGF0dHJpYnV0ZXNcbiAqIFRoaXMgYWxsb3dzIHNheSA8c3Ryb25nPmZvbzwvc3Ryb25nPiwgYnV0IG5vdCA8c3Ryb25nIGNsYXNzPVwidmVyeVwiPmZvbzwvc3Ryb25nPlxuICogRm9yIHByb3BlciBIVE1MIHN1cHBvcnQsIHlvdSdsbCB3YW50IGEgZGlmZmVyZW50IHBsdWdpblxuICoqL1xudmFyIHZpc2l0ID0gcmVxdWlyZSgndW5pc3QtdXRpbC12aXNpdCcpO1xuXG52YXIgdHlwZSA9ICd2aXJ0dWFsSHRtbCc7XG52YXIgc2VsZkNsb3NpbmdSZSA9IC9ePChhcmVhfGJhc2V8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxrZXlnZW58bGlua3xtZXRhfHBhcmFtfHNvdXJjZXx0cmFja3x3YnIpXFxzKlxcLz8+JC9pO1xudmFyIHNpbXBsZVRhZ1JlID0gL148KFxcLz8pKFthLXpdKylcXHMqPiQvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0cmVlKSB7XG4gIHZhciBvcGVuO1xuICB2YXIgY3VycmVudFBhcmVudDtcbiAgdmlzaXQodHJlZSwgJ2h0bWwnLCBmdW5jdGlvbiAobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChjdXJyZW50UGFyZW50ICE9PSBwYXJlbnQpIHtcbiAgICAgIG9wZW4gPSBbXTtcbiAgICAgIGN1cnJlbnRQYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHNlbGZDbG9zaW5nID0gZ2V0U2VsZkNsb3Npbmcobm9kZSk7XG5cbiAgICBpZiAoc2VsZkNsb3NpbmcpIHtcbiAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEsIHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgdGFnOiBzZWxmQ2xvc2luZyxcbiAgICAgICAgcG9zaXRpb246IG5vZGUucG9zaXRpb25cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnQgPSBnZXRTaW1wbGVUYWcobm9kZSwgcGFyZW50KTtcblxuICAgIGlmICghY3VycmVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoaW5nID0gZmluZEFuZFB1bGwob3BlbiwgY3VycmVudC50YWcpO1xuXG4gICAgaWYgKG1hdGNoaW5nKSB7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAwLCB2aXJ0dWFsKGN1cnJlbnQsIG1hdGNoaW5nLCBwYXJlbnQpKTtcbiAgICB9IGVsc2UgaWYgKCFjdXJyZW50Lm9wZW5pbmcpIHtcbiAgICAgIG9wZW4ucHVzaChjdXJyZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSwgdHJ1ZSAvLyBJdGVyYXRlIGluIHJldmVyc2VcbiAgKTtcbiAgcmV0dXJuIHRyZWU7XG59O1xuXG5mdW5jdGlvbiBmaW5kQW5kUHVsbChvcGVuLCBtYXRjaGluZ1RhZykge1xuICB2YXIgaSA9IG9wZW4ubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAob3BlbltpXS50YWcgPT09IG1hdGNoaW5nVGFnKSB7XG4gICAgICByZXR1cm4gb3Blbi5zcGxpY2UoaSwgMSlbMF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRTaW1wbGVUYWcobm9kZSwgcGFyZW50KSB7XG4gIHZhciBtYXRjaCA9IG5vZGUudmFsdWUubWF0Y2goc2ltcGxlVGFnUmUpO1xuICByZXR1cm4gbWF0Y2ggPyB7XG4gICAgdGFnOiBtYXRjaFsyXSxcbiAgICBvcGVuaW5nOiAhbWF0Y2hbMV0sXG4gICAgbm9kZTogbm9kZVxuICB9IDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFNlbGZDbG9zaW5nKG5vZGUpIHtcbiAgdmFyIG1hdGNoID0gbm9kZS52YWx1ZS5tYXRjaChzZWxmQ2xvc2luZ1JlKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdmlydHVhbChmcm9tTm9kZSwgdG9Ob2RlLCBwYXJlbnQpIHtcbiAgdmFyIGZyb21JbmRleCA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKGZyb21Ob2RlLm5vZGUpO1xuICB2YXIgdG9JbmRleCA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHRvTm9kZS5ub2RlKTtcbiAgdmFyIGV4dHJhY3RlZCA9IHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoZnJvbUluZGV4LCB0b0luZGV4IC0gZnJvbUluZGV4ICsgMSk7XG4gIHZhciBjaGlsZHJlbiA9IGV4dHJhY3RlZC5zbGljZSgxLCAtMSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdGFnOiBmcm9tTm9kZS50YWcsXG4gICAgcG9zaXRpb246IHtcbiAgICAgIHN0YXJ0OiBmcm9tTm9kZS5ub2RlLnBvc2l0aW9uLnN0YXJ0LFxuICAgICAgZW5kOiB0b05vZGUubm9kZS5wb3NpdGlvbi5lbmQsXG4gICAgICBpbmRlbnQ6IFtdXG4gICAgfVxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgdmlzaXQgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0Jyk7XG5cbmV4cG9ydHMub2ZUeXBlID0gZnVuY3Rpb24gKHR5cGVzLCBtb2RlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIHJldHVybiB2aXNpdChub2RlLCB0eXBlLCBkaXNhbGxvdywgdHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGlzYWxsb3cobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHVudGFuZ2xlKG5vZGUsIGluZGV4LCBwYXJlbnQsIG1vZGUpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5pZk5vdE1hdGNoID0gZnVuY3Rpb24gKGFsbG93Tm9kZSwgbW9kZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2aXNpdChub2RlLCBkaXNhbGxvdywgdHJ1ZSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGlzYWxsb3cobm9kZSwgaW5kZXgsIHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQgJiYgIWFsbG93Tm9kZShub2RlLCBpbmRleCwgcGFyZW50KSkge1xuICAgICAgdW50YW5nbGUobm9kZSwgaW5kZXgsIHBhcmVudCwgbW9kZSk7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiB1bnRhbmdsZShub2RlLCBpbmRleCwgcGFyZW50LCBtb2RlKSB7XG4gIGlmIChtb2RlID09PSAncmVtb3ZlJykge1xuICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaW5kZXgsIDEpO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICd1bndyYXAnKSB7XG4gICAgdmFyIGFyZ3MgPSBbaW5kZXgsIDFdO1xuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChub2RlLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KHBhcmVudC5jaGlsZHJlbiwgYXJncyk7XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJyk7XG5cbnZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxudmFyIGRlZmF1bHROb2RlUG9zaXRpb24gPSB7XG4gIHN0YXJ0OiB7XG4gICAgbGluZTogMSxcbiAgICBjb2x1bW46IDEsXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG4gIGVuZDoge1xuICAgIGxpbmU6IDEsXG4gICAgY29sdW1uOiAxLFxuICAgIG9mZnNldDogMFxuICB9XG59O1xuXG5mdW5jdGlvbiBhc3RUb1JlYWN0KG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBpbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgdmFyIHJlbmRlcmVyID0gb3B0aW9ucy5yZW5kZXJlcnNbbm9kZS50eXBlXTsgLy8gbm9kZXMgZ2VuZXJhdGVkIGJ5IHBsdWdpbnMgbWF5IG5vdCBoYXZlIHBvc2l0aW9uIGRhdGFcbiAgLy8gbXVjaCBvZiB0aGUgY29kZSBhZnRlciB0aGlzIHBvaW50IHdpbGwgYXR0ZW1wdCB0byBhY2Nlc3MgcHJvcGVydGllcyBvZiB0aGUgbm9kZS5wb3NpdGlvblxuICAvLyB0aGlzIHdpbGwgc2V0IHRoZSBub2RlIHBvc2l0aW9uIHRvIHRoZSBwYXJlbnQgbm9kZSdzIHBvc2l0aW9uIHRvIHByZXZlbnQgZXJyb3JzXG5cbiAgaWYgKG5vZGUucG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgIG5vZGUucG9zaXRpb24gPSBwYXJlbnQubm9kZSAmJiBwYXJlbnQubm9kZS5wb3NpdGlvbiB8fCBkZWZhdWx0Tm9kZVBvc2l0aW9uO1xuICB9XG5cbiAgdmFyIHBvcyA9IG5vZGUucG9zaXRpb24uc3RhcnQ7XG4gIHZhciBrZXkgPSBbbm9kZS50eXBlLCBwb3MubGluZSwgcG9zLmNvbHVtbiwgaW5kZXhdLmpvaW4oJy0nKTtcblxuICBpZiAoIVJlYWN0SXMuaXNWYWxpZEVsZW1lbnRUeXBlKHJlbmRlcmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlJlbmRlcmVyIGZvciB0eXBlIGBcIi5jb25jYXQobm9kZS50eXBlLCBcImAgbm90IGRlZmluZWQgb3IgaXMgbm90IHJlbmRlcmFibGVcIikpO1xuICB9XG5cbiAgdmFyIG5vZGVQcm9wcyA9IGdldE5vZGVQcm9wcyhub2RlLCBrZXksIG9wdGlvbnMsIHJlbmRlcmVyLCBwYXJlbnQsIGluZGV4KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQocmVuZGVyZXIsIG5vZGVQcm9wcywgbm9kZVByb3BzLmNoaWxkcmVuIHx8IHJlc29sdmVDaGlsZHJlbigpIHx8IHVuZGVmaW5lZCk7XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUNoaWxkcmVuKCkge1xuICAgIHJldHVybiBub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uIChjaGlsZE5vZGUsIGkpIHtcbiAgICAgIHJldHVybiBhc3RUb1JlYWN0KGNoaWxkTm9kZSwgb3B0aW9ucywge1xuICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICBwcm9wczogbm9kZVByb3BzXG4gICAgICB9LCBpKTtcbiAgICB9KTtcbiAgfVxufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtcywgY29tcGxleGl0eVxuXG5cbmZ1bmN0aW9uIGdldE5vZGVQcm9wcyhub2RlLCBrZXksIG9wdHMsIHJlbmRlcmVyLCBwYXJlbnQsIGluZGV4KSB7XG4gIHZhciBwcm9wcyA9IHtcbiAgICBrZXk6IGtleVxuICB9O1xuICB2YXIgaXNUYWdSZW5kZXJlciA9IHR5cGVvZiByZW5kZXJlciA9PT0gJ3N0cmluZyc7IC8vIGBzb3VyY2VQb3NgIGlzIHRydWUgaWYgdGhlIHVzZXIgd2FudHMgc291cmNlIGluZm9ybWF0aW9uIChsaW5lL2NvbHVtbiBpbmZvIGZyb20gbWFya2Rvd24gc291cmNlKVxuXG4gIGlmIChvcHRzLnNvdXJjZVBvcyAmJiBub2RlLnBvc2l0aW9uKSB7XG4gICAgcHJvcHNbJ2RhdGEtc291cmNlcG9zJ10gPSBmbGF0dGVuUG9zaXRpb24obm9kZS5wb3NpdGlvbik7XG4gIH1cblxuICBpZiAob3B0cy5yYXdTb3VyY2VQb3MgJiYgIWlzVGFnUmVuZGVyZXIpIHtcbiAgICBwcm9wcy5zb3VyY2VQb3NpdGlvbiA9IG5vZGUucG9zaXRpb247XG4gIH0gLy8gSWYgYGluY2x1ZGVOb2RlSW5kZXhgIGlzIHRydWUsIHBhc3Mgbm9kZSBpbmRleCBpbmZvIHRvIGFsbCBub24tdGFnIHJlbmRlcmVyc1xuXG5cbiAgaWYgKG9wdHMuaW5jbHVkZU5vZGVJbmRleCAmJiBwYXJlbnQubm9kZSAmJiBwYXJlbnQubm9kZS5jaGlsZHJlbiAmJiAhaXNUYWdSZW5kZXJlcikge1xuICAgIHByb3BzLmluZGV4ID0gcGFyZW50Lm5vZGUuY2hpbGRyZW4uaW5kZXhPZihub2RlKTtcbiAgICBwcm9wcy5wYXJlbnRDaGlsZENvdW50ID0gcGFyZW50Lm5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICB9XG5cbiAgdmFyIHJlZiA9IG5vZGUuaWRlbnRpZmllciAhPT0gbnVsbCAmJiBub2RlLmlkZW50aWZpZXIgIT09IHVuZGVmaW5lZCA/IG9wdHMuZGVmaW5pdGlvbnNbbm9kZS5pZGVudGlmaWVyXSB8fCB7fSA6IG51bGw7XG5cbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlICdyb290JzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBvcHRzLmNsYXNzTmFtZVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RleHQnOlxuICAgICAgcHJvcHMubm9kZUtleSA9IGtleTtcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gbm9kZS52YWx1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaGVhZGluZyc6XG4gICAgICBwcm9wcy5sZXZlbCA9IG5vZGUuZGVwdGg7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpc3QnOlxuICAgICAgcHJvcHMuc3RhcnQgPSBub2RlLnN0YXJ0O1xuICAgICAgcHJvcHMub3JkZXJlZCA9IG5vZGUub3JkZXJlZDtcbiAgICAgIHByb3BzLnRpZ2h0ID0gIW5vZGUubG9vc2U7XG4gICAgICBwcm9wcy5kZXB0aCA9IG5vZGUuZGVwdGg7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpc3RJdGVtJzpcbiAgICAgIHByb3BzLmNoZWNrZWQgPSBub2RlLmNoZWNrZWQ7XG4gICAgICBwcm9wcy50aWdodCA9ICFub2RlLmxvb3NlO1xuICAgICAgcHJvcHMub3JkZXJlZCA9IG5vZGUub3JkZXJlZDtcbiAgICAgIHByb3BzLmluZGV4ID0gbm9kZS5pbmRleDtcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gZ2V0TGlzdEl0ZW1DaGlsZHJlbihub2RlLCBwYXJlbnQpLm1hcChmdW5jdGlvbiAoY2hpbGROb2RlLCBpKSB7XG4gICAgICAgIHJldHVybiBhc3RUb1JlYWN0KGNoaWxkTm9kZSwgb3B0cywge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgcHJvcHM6IHByb3BzXG4gICAgICAgIH0sIGkpO1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2RlZmluaXRpb24nOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBpZGVudGlmaWVyOiBub2RlLmlkZW50aWZpZXIsXG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlLFxuICAgICAgICB1cmw6IG5vZGUudXJsXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnY29kZSc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIGxhbmd1YWdlOiBub2RlLmxhbmcgJiYgbm9kZS5sYW5nLnNwbGl0KC9cXHMvLCAxKVswXVxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2lubGluZUNvZGUnOlxuICAgICAgcHJvcHMuY2hpbGRyZW4gPSBub2RlLnZhbHVlO1xuICAgICAgcHJvcHMuaW5saW5lID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbGluayc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIHRpdGxlOiBub2RlLnRpdGxlIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgdGFyZ2V0OiB0eXBlb2Ygb3B0cy5saW5rVGFyZ2V0ID09PSAnZnVuY3Rpb24nID8gb3B0cy5saW5rVGFyZ2V0KG5vZGUudXJsLCBub2RlLmNoaWxkcmVuLCBub2RlLnRpdGxlKSA6IG9wdHMubGlua1RhcmdldCxcbiAgICAgICAgaHJlZjogb3B0cy50cmFuc2Zvcm1MaW5rVXJpID8gb3B0cy50cmFuc2Zvcm1MaW5rVXJpKG5vZGUudXJsLCBub2RlLmNoaWxkcmVuLCBub2RlLnRpdGxlKSA6IG5vZGUudXJsXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywge1xuICAgICAgICBhbHQ6IG5vZGUuYWx0IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgdGl0bGU6IG5vZGUudGl0bGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBzcmM6IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkgPyBvcHRzLnRyYW5zZm9ybUltYWdlVXJpKG5vZGUudXJsLCBub2RlLmNoaWxkcmVuLCBub2RlLnRpdGxlLCBub2RlLmFsdCkgOiBub2RlLnVybFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2xpbmtSZWZlcmVuY2UnOlxuICAgICAgYXNzaWduRGVmaW5lZChwcm9wcywgeHRlbmQocmVmLCB7XG4gICAgICAgIGhyZWY6IG9wdHMudHJhbnNmb3JtTGlua1VyaSA/IG9wdHMudHJhbnNmb3JtTGlua1VyaShyZWYuaHJlZikgOiByZWYuaHJlZlxuICAgICAgfSkpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbWFnZVJlZmVyZW5jZSc6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB7XG4gICAgICAgIHNyYzogb3B0cy50cmFuc2Zvcm1JbWFnZVVyaSAmJiByZWYuaHJlZiA/IG9wdHMudHJhbnNmb3JtSW1hZ2VVcmkocmVmLmhyZWYsIG5vZGUuY2hpbGRyZW4sIHJlZi50aXRsZSwgbm9kZS5hbHQpIDogcmVmLmhyZWYsXG4gICAgICAgIHRpdGxlOiByZWYudGl0bGUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBhbHQ6IG5vZGUuYWx0IHx8IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RhYmxlJzpcbiAgICBjYXNlICd0YWJsZUhlYWQnOlxuICAgIGNhc2UgJ3RhYmxlQm9keSc6XG4gICAgICBwcm9wcy5jb2x1bW5BbGlnbm1lbnQgPSBub2RlLmFsaWduO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0YWJsZVJvdyc6XG4gICAgICBwcm9wcy5pc0hlYWRlciA9IHBhcmVudC5ub2RlLnR5cGUgPT09ICd0YWJsZUhlYWQnO1xuICAgICAgcHJvcHMuY29sdW1uQWxpZ25tZW50ID0gcGFyZW50LnByb3BzLmNvbHVtbkFsaWdubWVudDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGFibGVDZWxsJzpcbiAgICAgIGFzc2lnbkRlZmluZWQocHJvcHMsIHtcbiAgICAgICAgaXNIZWFkZXI6IHBhcmVudC5wcm9wcy5pc0hlYWRlcixcbiAgICAgICAgYWxpZ246IHBhcmVudC5wcm9wcy5jb2x1bW5BbGlnbm1lbnRbaW5kZXhdXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndmlydHVhbEh0bWwnOlxuICAgICAgcHJvcHMudGFnID0gbm9kZS50YWc7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgLy8gQHRvZG8gZmluZCBhIGJldHRlciB3YXkgdGhhbiB0aGlzXG4gICAgICBwcm9wcy5pc0Jsb2NrID0gbm9kZS5wb3NpdGlvbi5zdGFydC5saW5lICE9PSBub2RlLnBvc2l0aW9uLmVuZC5saW5lO1xuICAgICAgcHJvcHMuZXNjYXBlSHRtbCA9IG9wdHMuZXNjYXBlSHRtbDtcbiAgICAgIHByb3BzLnNraXBIdG1sID0gb3B0cy5za2lwSHRtbDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGFyc2VkSHRtbCc6XG4gICAgICB7XG4gICAgICAgIHZhciBwYXJzZWRDaGlsZHJlbjtcblxuICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICAgIHBhcnNlZENoaWxkcmVuID0gbm9kZS5jaGlsZHJlbi5tYXAoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXN0VG9SZWFjdChjaGlsZCwgb3B0cywge1xuICAgICAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgICAgICBwcm9wczogcHJvcHNcbiAgICAgICAgICAgIH0sIGkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJvcHMuZXNjYXBlSHRtbCA9IG9wdHMuZXNjYXBlSHRtbDtcbiAgICAgICAgcHJvcHMuc2tpcEh0bWwgPSBvcHRzLnNraXBIdG1sO1xuICAgICAgICBwcm9wcy5lbGVtZW50ID0gbWVyZ2VOb2RlQ2hpbGRyZW4obm9kZSwgcGFyc2VkQ2hpbGRyZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGRlZmF1bHQ6XG4gICAgICBhc3NpZ25EZWZpbmVkKHByb3BzLCB4dGVuZChub2RlLCB7XG4gICAgICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9zaXRpb246IHVuZGVmaW5lZCxcbiAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgfSkpO1xuICB9XG5cbiAgaWYgKCFpc1RhZ1JlbmRlcmVyICYmIG5vZGUudmFsdWUpIHtcbiAgICBwcm9wcy52YWx1ZSA9IG5vZGUudmFsdWU7XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59XG5cbmZ1bmN0aW9uIGFzc2lnbkRlZmluZWQodGFyZ2V0LCBhdHRycykge1xuICBmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcbiAgICBpZiAodHlwZW9mIGF0dHJzW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IGF0dHJzW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlTm9kZUNoaWxkcmVuKG5vZGUsIHBhcnNlZENoaWxkcmVuKSB7XG4gIHZhciBlbCA9IG5vZGUuZWxlbWVudDtcblxuICBpZiAoQXJyYXkuaXNBcnJheShlbCkpIHtcbiAgICB2YXIgRnJhZ21lbnQgPSBSZWFjdC5GcmFnbWVudCB8fCAnZGl2JztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgZWwpO1xuICB9XG5cbiAgaWYgKGVsLnByb3BzLmNoaWxkcmVuIHx8IHBhcnNlZENoaWxkcmVuKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4udG9BcnJheShlbC5wcm9wcy5jaGlsZHJlbikuY29uY2F0KHBhcnNlZENoaWxkcmVuKTtcbiAgICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGVsLCBudWxsLCBjaGlsZHJlbik7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGVsLCBudWxsKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlblBvc2l0aW9uKHBvcykge1xuICByZXR1cm4gW3Bvcy5zdGFydC5saW5lLCAnOicsIHBvcy5zdGFydC5jb2x1bW4sICctJywgcG9zLmVuZC5saW5lLCAnOicsIHBvcy5lbmQuY29sdW1uXS5tYXAoU3RyaW5nKS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGlzdEl0ZW1DaGlsZHJlbihub2RlLCBwYXJlbnQpIHtcbiAgaWYgKG5vZGUubG9vc2UpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbjtcbiAgfVxuXG4gIGlmIChwYXJlbnQubm9kZSAmJiBub2RlLmluZGV4ID4gMCAmJiBwYXJlbnQubm9kZS5jaGlsZHJlbltub2RlLmluZGV4IC0gMV0ubG9vc2UpIHtcbiAgICByZXR1cm4gbm9kZS5jaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiB1bndyYXBQYXJhZ3JhcGhzKG5vZGUpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBQYXJhZ3JhcGhzKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2hpbGRyZW4ucmVkdWNlKGZ1bmN0aW9uIChhcnJheSwgY2hpbGQpIHtcbiAgICByZXR1cm4gYXJyYXkuY29uY2F0KGNoaWxkLnR5cGUgPT09ICdwYXJhZ3JhcGgnID8gY2hpbGQuY2hpbGRyZW4gfHwgW10gOiBbY2hpbGRdKTtcbiAgfSwgW10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFzdFRvUmVhY3Q7IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmlzaXQgPSByZXF1aXJlKCd1bmlzdC11dGlsLXZpc2l0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmlzaXQobm9kZSwgJ3RhYmxlJywgd3JhcCk7XG4gIHJldHVybiBub2RlO1xufTtcblxuZnVuY3Rpb24gd3JhcCh0YWJsZSkge1xuICB2YXIgY2hpbGRyZW4gPSB0YWJsZS5jaGlsZHJlbjtcbiAgdGFibGUuY2hpbGRyZW4gPSBbe1xuICAgIHR5cGU6ICd0YWJsZUhlYWQnLFxuICAgIGFsaWduOiB0YWJsZS5hbGlnbixcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuWzBdXSxcbiAgICBwb3NpdGlvbjogY2hpbGRyZW5bMF0ucG9zaXRpb25cbiAgfV07XG5cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICB0YWJsZS5jaGlsZHJlbi5wdXNoKHtcbiAgICAgIHR5cGU6ICd0YWJsZUJvZHknLFxuICAgICAgYWxpZ246IHRhYmxlLmFsaWduLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLnNsaWNlKDEpLFxuICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgc3RhcnQ6IGNoaWxkcmVuWzFdLnBvc2l0aW9uLnN0YXJ0LFxuICAgICAgICBlbmQ6IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnBvc2l0aW9uLmVuZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldERlZmluaXRpb25zKG5vZGUpIHtcbiAgdmFyIGRlZnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gKG5vZGUuY2hpbGRyZW4gfHwgW10pLnJlZHVjZShmdW5jdGlvbiAoZGVmaW5pdGlvbnMsIGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWZpbml0aW9uJykge1xuICAgICAgZGVmaW5pdGlvbnNbY2hpbGQuaWRlbnRpZmllcl0gPSB7XG4gICAgICAgIGhyZWY6IGNoaWxkLnVybCxcbiAgICAgICAgdGl0bGU6IGNoaWxkLnRpdGxlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBnZXREZWZpbml0aW9ucyhjaGlsZCwgZGVmaW5pdGlvbnMpO1xuICB9LCBkZWZzKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwcm90b2NvbHMgPSBbJ2h0dHAnLCAnaHR0cHMnLCAnbWFpbHRvJywgJ3RlbCddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHVyaVRyYW5zZm9ybWVyKHVyaSkge1xuICB2YXIgdXJsID0gKHVyaSB8fCAnJykudHJpbSgpO1xuICB2YXIgZmlyc3QgPSB1cmwuY2hhckF0KDApO1xuXG4gIGlmIChmaXJzdCA9PT0gJyMnIHx8IGZpcnN0ID09PSAnLycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIGNvbG9uID0gdXJsLmluZGV4T2YoJzonKTtcblxuICBpZiAoY29sb24gPT09IC0xKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBwcm90b2NvbHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAtMTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBwcm90b2NvbCA9IHByb3RvY29sc1tpbmRleF07XG5cbiAgICBpZiAoY29sb24gPT09IHByb3RvY29sLmxlbmd0aCAmJiB1cmwuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBwcm90b2NvbCkge1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1cblxuICBpbmRleCA9IHVybC5pbmRleE9mKCc/Jyk7XG5cbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBjb2xvbiA+IGluZGV4KSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIGluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaW5kZXggIT09IC0xICYmIGNvbG9uID4gaW5kZXgpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zY3JpcHQtdXJsXG5cblxuICByZXR1cm4gJ2phdmFzY3JpcHQ6dm9pZCgwKSc7XG59OyIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L3Byb3AtdHlwZXMsIHJlYWN0L25vLW11bHRpLWNvbXAgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIHh0ZW5kID0gcmVxdWlyZSgneHRlbmQnKTtcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIHN1cHBvcnRzU3RyaW5nUmVuZGVyID0gcGFyc2VJbnQoKFJlYWN0LnZlcnNpb24gfHwgJzE2Jykuc2xpY2UoMCwgMiksIDEwKSA+PSAxNjtcbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudDtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBicmVhazogJ2JyJyxcbiAgcGFyYWdyYXBoOiAncCcsXG4gIGVtcGhhc2lzOiAnZW0nLFxuICBzdHJvbmc6ICdzdHJvbmcnLFxuICB0aGVtYXRpY0JyZWFrOiAnaHInLFxuICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG4gIGRlbGV0ZTogJ2RlbCcsXG4gIGxpbms6ICdhJyxcbiAgaW1hZ2U6ICdpbWcnLFxuICBsaW5rUmVmZXJlbmNlOiAnYScsXG4gIGltYWdlUmVmZXJlbmNlOiAnaW1nJyxcbiAgdGFibGU6IFNpbXBsZVJlbmRlcmVyLmJpbmQobnVsbCwgJ3RhYmxlJyksXG4gIHRhYmxlSGVhZDogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndGhlYWQnKSxcbiAgdGFibGVCb2R5OiBTaW1wbGVSZW5kZXJlci5iaW5kKG51bGwsICd0Ym9keScpLFxuICB0YWJsZVJvdzogU2ltcGxlUmVuZGVyZXIuYmluZChudWxsLCAndHInKSxcbiAgdGFibGVDZWxsOiBUYWJsZUNlbGwsXG4gIHJvb3Q6IFJvb3QsXG4gIHRleHQ6IFRleHRSZW5kZXJlcixcbiAgbGlzdDogTGlzdCxcbiAgbGlzdEl0ZW06IExpc3RJdGVtLFxuICBkZWZpbml0aW9uOiBOdWxsUmVuZGVyZXIsXG4gIGhlYWRpbmc6IEhlYWRpbmcsXG4gIGlubGluZUNvZGU6IElubGluZUNvZGUsXG4gIGNvZGU6IENvZGVCbG9jayxcbiAgaHRtbDogSHRtbCxcbiAgdmlydHVhbEh0bWw6IFZpcnR1YWxIdG1sLFxuICBwYXJzZWRIdG1sOiBQYXJzZWRIdG1sXG59O1xuXG5mdW5jdGlvbiBUZXh0UmVuZGVyZXIocHJvcHMpIHtcbiAgcmV0dXJuIHN1cHBvcnRzU3RyaW5nUmVuZGVyID8gcHJvcHMuY2hpbGRyZW4gOiBjcmVhdGVFbGVtZW50KCdzcGFuJywgbnVsbCwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBSb290KHByb3BzKSB7XG4gIHZhciB1c2VGcmFnbWVudCA9ICFwcm9wcy5jbGFzc05hbWU7XG4gIHZhciByb290ID0gdXNlRnJhZ21lbnQgPyBSZWFjdC5GcmFnbWVudCB8fCAnZGl2JyA6ICdkaXYnO1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChyb290LCB1c2VGcmFnbWVudCA/IG51bGwgOiBwcm9wcywgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBTaW1wbGVSZW5kZXJlcih0YWcsIHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBUYWJsZUNlbGwocHJvcHMpIHtcbiAgdmFyIHN0eWxlID0gcHJvcHMuYWxpZ24gPyB7XG4gICAgdGV4dEFsaWduOiBwcm9wcy5hbGlnblxuICB9IDogdW5kZWZpbmVkO1xuICB2YXIgY29yZVByb3BzID0gZ2V0Q29yZVByb3BzKHByb3BzKTtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocHJvcHMuaXNIZWFkZXIgPyAndGgnIDogJ3RkJywgc3R5bGUgPyB4dGVuZCh7XG4gICAgc3R5bGU6IHN0eWxlXG4gIH0sIGNvcmVQcm9wcykgOiBjb3JlUHJvcHMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gSGVhZGluZyhwcm9wcykge1xuICByZXR1cm4gY3JlYXRlRWxlbWVudChcImhcIi5jb25jYXQocHJvcHMubGV2ZWwpLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIExpc3QocHJvcHMpIHtcbiAgdmFyIGF0dHJzID0gZ2V0Q29yZVByb3BzKHByb3BzKTtcblxuICBpZiAocHJvcHMuc3RhcnQgIT09IG51bGwgJiYgcHJvcHMuc3RhcnQgIT09IDEgJiYgcHJvcHMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgIGF0dHJzLnN0YXJ0ID0gcHJvcHMuc3RhcnQudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHByb3BzLm9yZGVyZWQgPyAnb2wnIDogJ3VsJywgYXR0cnMsIHByb3BzLmNoaWxkcmVuKTtcbn1cblxuZnVuY3Rpb24gTGlzdEl0ZW0ocHJvcHMpIHtcbiAgdmFyIGNoZWNrYm94ID0gbnVsbDtcblxuICBpZiAocHJvcHMuY2hlY2tlZCAhPT0gbnVsbCAmJiBwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY2hlY2tlZCA9IHByb3BzLmNoZWNrZWQ7XG4gICAgY2hlY2tib3ggPSBjcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgIHR5cGU6ICdjaGVja2JveCcsXG4gICAgICBjaGVja2VkOiBjaGVja2VkLFxuICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdsaScsIGdldENvcmVQcm9wcyhwcm9wcyksIGNoZWNrYm94LCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIENvZGVCbG9jayhwcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gcHJvcHMubGFuZ3VhZ2UgJiYgXCJsYW5ndWFnZS1cIi5jb25jYXQocHJvcHMubGFuZ3VhZ2UpO1xuICB2YXIgY29kZSA9IGNyZWF0ZUVsZW1lbnQoJ2NvZGUnLCBjbGFzc05hbWUgPyB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfSA6IG51bGwsIHByb3BzLnZhbHVlKTtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ3ByZScsIGdldENvcmVQcm9wcyhwcm9wcyksIGNvZGUpO1xufVxuXG5mdW5jdGlvbiBJbmxpbmVDb2RlKHByb3BzKSB7XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KCdjb2RlJywgZ2V0Q29yZVByb3BzKHByb3BzKSwgcHJvcHMuY2hpbGRyZW4pO1xufVxuXG5mdW5jdGlvbiBIdG1sKHByb3BzKSB7XG4gIGlmIChwcm9wcy5za2lwSHRtbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHRhZyA9IHByb3BzLmlzQmxvY2sgPyAnZGl2JyA6ICdzcGFuJztcblxuICBpZiAocHJvcHMuZXNjYXBlSHRtbCkge1xuICAgIHZhciBjb21wID0gUmVhY3QuRnJhZ21lbnQgfHwgdGFnO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KGNvbXAsIG51bGwsIHByb3BzLnZhbHVlKTtcbiAgfVxuXG4gIHZhciBub2RlUHJvcHMgPSB7XG4gICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgIF9faHRtbDogcHJvcHMudmFsdWVcbiAgICB9XG4gIH07XG4gIHJldHVybiBjcmVhdGVFbGVtZW50KHRhZywgbm9kZVByb3BzKTtcbn1cblxuZnVuY3Rpb24gUGFyc2VkSHRtbChwcm9wcykge1xuICByZXR1cm4gcHJvcHNbJ2RhdGEtc291cmNlcG9zJ10gPyBSZWFjdC5jbG9uZUVsZW1lbnQocHJvcHMuZWxlbWVudCwge1xuICAgICdkYXRhLXNvdXJjZXBvcyc6IHByb3BzWydkYXRhLXNvdXJjZXBvcyddXG4gIH0pIDogcHJvcHMuZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gVmlydHVhbEh0bWwocHJvcHMpIHtcbiAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQocHJvcHMudGFnLCBnZXRDb3JlUHJvcHMocHJvcHMpLCBwcm9wcy5jaGlsZHJlbik7XG59XG5cbmZ1bmN0aW9uIE51bGxSZW5kZXJlcigpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldENvcmVQcm9wcyhwcm9wcykge1xuICByZXR1cm4gcHJvcHNbJ2RhdGEtc291cmNlcG9zJ10gPyB7XG4gICAgJ2RhdGEtc291cmNlcG9zJzogcHJvcHNbJ2RhdGEtc291cmNlcG9zJ11cbiAgfSA6IHt9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgSHRtbFBhcnNlciA9ICdfX1JNRF9IVE1MX1BBUlNFUl9fJztcbmV4cG9ydHMuSHRtbFBhcnNlciA9IHR5cGVvZiBTeW1ib2wgPT09ICd1bmRlZmluZWQnID8gSHRtbFBhcnNlciA6IFN5bWJvbChIdG1sUGFyc2VyKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0KGV4KSB7XG4gIHJldHVybiBleCAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBleCAmJiBcImRlZmF1bHRcIiBpbiBleCA/IGV4LmRlZmF1bHQgOiBleDtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiAhMFxufSk7XG5cbnZhciBjcmVhdGVFbW90aW9uU2VydmVyID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJjcmVhdGUtZW1vdGlvbi1zZXJ2ZXJcIikpLCBlbW90aW9uID0gcmVxdWlyZShcImVtb3Rpb25cIiksIF9jcmVhdGVFbW90aW9uU2VydmVyID0gY3JlYXRlRW1vdGlvblNlcnZlcihlbW90aW9uLmNhY2hlKSwgZXh0cmFjdENyaXRpY2FsID0gX2NyZWF0ZUVtb3Rpb25TZXJ2ZXIuZXh0cmFjdENyaXRpY2FsLCByZW5kZXJTdHlsZXNUb1N0cmluZyA9IF9jcmVhdGVFbW90aW9uU2VydmVyLnJlbmRlclN0eWxlc1RvU3RyaW5nLCByZW5kZXJTdHlsZXNUb05vZGVTdHJlYW0gPSBfY3JlYXRlRW1vdGlvblNlcnZlci5yZW5kZXJTdHlsZXNUb05vZGVTdHJlYW07XG5cbmV4cG9ydHMuZXh0cmFjdENyaXRpY2FsID0gZXh0cmFjdENyaXRpY2FsLCBleHBvcnRzLnJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbSA9IHJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbSwgXG5leHBvcnRzLnJlbmRlclN0eWxlc1RvU3RyaW5nID0gcmVuZGVyU3R5bGVzVG9TdHJpbmc7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9jcmVhdGUtZW1vdGlvbi1zZXJ2ZXIuY2pzLnByb2QuanNcIik7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2NyZWF0ZS1lbW90aW9uLXNlcnZlci5janMuZGV2LmpzXCIpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wRGVmYXVsdChleCkge1xuICByZXR1cm4gZXggJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgZXggJiYgXCJkZWZhdWx0XCIgaW4gZXggPyBleC5kZWZhdWx0IDogZXg7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogITBcbn0pO1xuXG52YXIgdGhyb3VnaCA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwidGhyb3VnaFwiKSksIHRva2VuaXplID0gX2ludGVyb3BEZWZhdWx0KHJlcXVpcmUoXCJodG1sLXRva2VuaXplXCIpKSwgcGlwZSA9IF9pbnRlcm9wRGVmYXVsdChyZXF1aXJlKFwibXVsdGlwaXBlXCIpKSwgY3JlYXRlRXh0cmFjdENyaXRpY2FsID0gZnVuY3Rpb24oY2FjaGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGh0bWwpIHtcbiAgICBmb3IgKHZhciBtYXRjaCwgUkdYID0gbmV3IFJlZ0V4cChjYWNoZS5rZXkgKyBcIi0oW2EtekEtWjAtOS1fXSspXCIsIFwiZ21cIiksIG8gPSB7XG4gICAgICBodG1sOiBodG1sLFxuICAgICAgaWRzOiBbXSxcbiAgICAgIGNzczogXCJcIlxuICAgIH0sIGlkcyA9IHt9OyBudWxsICE9PSAobWF0Y2ggPSBSR1guZXhlYyhodG1sKSk7ICkgdm9pZCAwID09PSBpZHNbbWF0Y2hbMV1dICYmIChpZHNbbWF0Y2hbMV1dID0gITApO1xuICAgIHJldHVybiBvLmlkcyA9IE9iamVjdC5rZXlzKGNhY2hlLmluc2VydGVkKS5maWx0ZXIoZnVuY3Rpb24oaWQpIHtcbiAgICAgIGlmICgodm9pZCAwICE9PSBpZHNbaWRdIHx8IHZvaWQgMCA9PT0gY2FjaGUucmVnaXN0ZXJlZFtjYWNoZS5rZXkgKyBcIi1cIiArIGlkXSkgJiYgITAgIT09IGNhY2hlLmluc2VydGVkW2lkXSkgcmV0dXJuIG8uY3NzICs9IGNhY2hlLmluc2VydGVkW2lkXSwgXG4gICAgICAhMDtcbiAgICB9KSwgbztcbiAgfTtcbn07XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU3R5bGVUYWcoY3NzS2V5LCBpZHMsIHN0eWxlcywgbm9uY2VTdHJpbmcpIHtcbiAgcmV0dXJuIFwiPHN0eWxlIGRhdGEtZW1vdGlvbi1cIiArIGNzc0tleSArICc9XCInICsgaWRzLnN1YnN0cmluZygxKSArICdcIicgKyBub25jZVN0cmluZyArIFwiPlwiICsgc3R5bGVzICsgXCI8L3N0eWxlPlwiO1xufVxuXG52YXIgY3JlYXRlUmVuZGVyU3R5bGVzVG9TdHJpbmcgPSBmdW5jdGlvbihjYWNoZSwgbm9uY2VTdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGh0bWwpIHtcbiAgICB2YXIgaW5zZXJ0ZWQgPSBjYWNoZS5pbnNlcnRlZCwgY3NzS2V5ID0gY2FjaGUua2V5LCByZWdpc3RlcmVkID0gY2FjaGUucmVnaXN0ZXJlZCwgcmVnZXggPSBuZXcgUmVnRXhwKFwiPHxcIiArIGNzc0tleSArIFwiLShbYS16QS1aMC05LV9dKylcIiwgXCJnbVwiKSwgc2VlbiA9IHt9LCByZXN1bHQgPSBcIlwiLCBnbG9iYWxJZHMgPSBcIlwiLCBnbG9iYWxTdHlsZXMgPSBcIlwiO1xuICAgIGZvciAodmFyIGlkIGluIGluc2VydGVkKSBpZiAoaW5zZXJ0ZWQuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICB2YXIgc3R5bGUgPSBpbnNlcnRlZFtpZF07XG4gICAgICAhMCAhPT0gc3R5bGUgJiYgdm9pZCAwID09PSByZWdpc3RlcmVkW2Nzc0tleSArIFwiLVwiICsgaWRdICYmIChnbG9iYWxTdHlsZXMgKz0gc3R5bGUsIFxuICAgICAgZ2xvYmFsSWRzICs9IFwiIFwiICsgaWQpO1xuICAgIH1cbiAgICBcIlwiICE9PSBnbG9iYWxTdHlsZXMgJiYgKHJlc3VsdCA9IGdlbmVyYXRlU3R5bGVUYWcoY3NzS2V5LCBnbG9iYWxJZHMsIGdsb2JhbFN0eWxlcywgbm9uY2VTdHJpbmcpKTtcbiAgICBmb3IgKHZhciBtYXRjaCwgaWRzID0gXCJcIiwgc3R5bGVzID0gXCJcIiwgbGFzdEluc2VydGlvblBvaW50ID0gMDsgbnVsbCAhPT0gKG1hdGNoID0gcmVnZXguZXhlYyhodG1sKSk7ICkgaWYgKFwiPFwiICE9PSBtYXRjaFswXSkge1xuICAgICAgdmFyIF9pZCA9IG1hdGNoWzFdLCBfc3R5bGUgPSBpbnNlcnRlZFtfaWRdO1xuICAgICAgITAgPT09IF9zdHlsZSB8fCB2b2lkIDAgPT09IF9zdHlsZSB8fCBzZWVuW19pZF0gfHwgKHNlZW5bX2lkXSA9ICEwLCBzdHlsZXMgKz0gX3N0eWxlLCBcbiAgICAgIGlkcyArPSBcIiBcIiArIF9pZCk7XG4gICAgfSBlbHNlIFwiXCIgIT09IGlkcyAmJiAocmVzdWx0ICs9IGdlbmVyYXRlU3R5bGVUYWcoY3NzS2V5LCBpZHMsIHN0eWxlcywgbm9uY2VTdHJpbmcpLCBcbiAgICBpZHMgPSBcIlwiLCBzdHlsZXMgPSBcIlwiKSwgcmVzdWx0ICs9IGh0bWwuc3Vic3RyaW5nKGxhc3RJbnNlcnRpb25Qb2ludCwgbWF0Y2guaW5kZXgpLCBcbiAgICBsYXN0SW5zZXJ0aW9uUG9pbnQgPSBtYXRjaC5pbmRleDtcbiAgICByZXR1cm4gcmVzdWx0ICs9IGh0bWwuc3Vic3RyaW5nKGxhc3RJbnNlcnRpb25Qb2ludCk7XG4gIH07XG59LCBjcmVhdGVSZW5kZXJTdHlsZXNUb05vZGVTdHJlYW0gPSBmdW5jdGlvbihjYWNoZSwgbm9uY2VTdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnNlZCA9IHt9LCB0b2tlblN0cmVhbSA9IHRva2VuaXplKCksIGlubGluZVN0cmVhbSA9IHRocm91Z2goZnVuY3Rpb24odGhpbmcpIHtcbiAgICAgIHZhciB0eXBlID0gdGhpbmdbMF0sIGRhdGEgPSB0aGluZ1sxXTtcbiAgICAgIGlmIChcIm9wZW5cIiA9PT0gdHlwZSkge1xuICAgICAgICBmb3IgKHZhciBtYXRjaCwgY3NzID0gXCJcIiwgaWRzID0ge30sIGZyYWdtZW50ID0gZGF0YS50b1N0cmluZygpLCByZWdleCA9IG5ldyBSZWdFeHAoY2FjaGUua2V5ICsgXCItKFthLXpBLVowLTktX10rKVwiLCBcImdtXCIpOyBudWxsICE9PSAobWF0Y2ggPSByZWdleC5leGVjKGZyYWdtZW50KSk7ICkgbnVsbCAhPT0gbWF0Y2ggJiYgdm9pZCAwID09PSBpbnNlZFttYXRjaFsxXV0gJiYgKGlkc1ttYXRjaFsxXV0gPSAhMCk7XG4gICAgICAgIE9iamVjdC5rZXlzKGNhY2hlLmluc2VydGVkKS5mb3JFYWNoKGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgITAgIT09IGNhY2hlLmluc2VydGVkW2lkXSAmJiB2b2lkIDAgPT09IGluc2VkW2lkXSAmJiAoITAgPT09IGlkc1tpZF0gfHwgdm9pZCAwID09PSBjYWNoZS5yZWdpc3RlcmVkW2NhY2hlLmtleSArIFwiLVwiICsgaWRdICYmIChpZHNbaWRdID0gITApKSAmJiAoaW5zZWRbaWRdID0gITAsIFxuICAgICAgICAgIGNzcyArPSBjYWNoZS5pbnNlcnRlZFtpZF0pO1xuICAgICAgICB9KSwgXCJcIiAhPT0gY3NzICYmIHRoaXMucXVldWUoXCI8c3R5bGUgZGF0YS1lbW90aW9uLVwiICsgY2FjaGUua2V5ICsgJz1cIicgKyBPYmplY3Qua2V5cyhpZHMpLmpvaW4oXCIgXCIpICsgJ1wiJyArIG5vbmNlU3RyaW5nICsgXCI+XCIgKyBjc3MgKyBcIjwvc3R5bGU+XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5xdWV1ZShkYXRhKTtcbiAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucXVldWUobnVsbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBpcGUodG9rZW5TdHJlYW0sIGlubGluZVN0cmVhbSk7XG4gIH07XG59O1xuXG5mdW5jdGlvbiBpbmRleChjYWNoZSkge1xuICAhMCAhPT0gY2FjaGUuY29tcGF0ICYmIChjYWNoZS5jb21wYXQgPSAhMCk7XG4gIHZhciBub25jZVN0cmluZyA9IHZvaWQgMCAhPT0gY2FjaGUubm9uY2UgPyAnIG5vbmNlPVwiJyArIGNhY2hlLm5vbmNlICsgJ1wiJyA6IFwiXCI7XG4gIHJldHVybiB7XG4gICAgZXh0cmFjdENyaXRpY2FsOiBjcmVhdGVFeHRyYWN0Q3JpdGljYWwoY2FjaGUpLFxuICAgIHJlbmRlclN0eWxlc1RvU3RyaW5nOiBjcmVhdGVSZW5kZXJTdHlsZXNUb1N0cmluZyhjYWNoZSwgbm9uY2VTdHJpbmcpLFxuICAgIHJlbmRlclN0eWxlc1RvTm9kZVN0cmVhbTogY3JlYXRlUmVuZGVyU3R5bGVzVG9Ob2RlU3RyZWFtKGNhY2hlLCBub25jZVN0cmluZylcbiAgfTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gaW5kZXg7XG4iLCJ2YXIgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcblxuLy8gdGhyb3VnaFxuLy9cbi8vIGEgc3RyZWFtIHRoYXQgZG9lcyBub3RoaW5nIGJ1dCByZS1lbWl0IHRoZSBpbnB1dC5cbi8vIHVzZWZ1bCBmb3IgYWdncmVnYXRpbmcgYSBzZXJpZXMgb2YgY2hhbmdpbmcgYnV0IG5vdCBlbmRpbmcgc3RyZWFtcyBpbnRvIG9uZSBzdHJlYW0pXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHRocm91Z2hcbnRocm91Z2gudGhyb3VnaCA9IHRocm91Z2hcblxuLy9jcmVhdGUgYSByZWFkYWJsZSB3cml0YWJsZSBzdHJlYW0uXG5cbmZ1bmN0aW9uIHRocm91Z2ggKHdyaXRlLCBlbmQsIG9wdHMpIHtcbiAgd3JpdGUgPSB3cml0ZSB8fCBmdW5jdGlvbiAoZGF0YSkgeyB0aGlzLnF1ZXVlKGRhdGEpIH1cbiAgZW5kID0gZW5kIHx8IGZ1bmN0aW9uICgpIHsgdGhpcy5xdWV1ZShudWxsKSB9XG5cbiAgdmFyIGVuZGVkID0gZmFsc2UsIGRlc3Ryb3llZCA9IGZhbHNlLCBidWZmZXIgPSBbXSwgX2VuZGVkID0gZmFsc2VcbiAgdmFyIHN0cmVhbSA9IG5ldyBTdHJlYW0oKVxuICBzdHJlYW0ucmVhZGFibGUgPSBzdHJlYW0ud3JpdGFibGUgPSB0cnVlXG4gIHN0cmVhbS5wYXVzZWQgPSBmYWxzZVxuXG4vLyAgc3RyZWFtLmF1dG9QYXVzZSAgID0gIShvcHRzICYmIG9wdHMuYXV0b1BhdXNlICAgPT09IGZhbHNlKVxuICBzdHJlYW0uYXV0b0Rlc3Ryb3kgPSAhKG9wdHMgJiYgb3B0cy5hdXRvRGVzdHJveSA9PT0gZmFsc2UpXG5cbiAgc3RyZWFtLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB3cml0ZS5jYWxsKHRoaXMsIGRhdGEpXG4gICAgcmV0dXJuICFzdHJlYW0ucGF1c2VkXG4gIH1cblxuICBmdW5jdGlvbiBkcmFpbigpIHtcbiAgICB3aGlsZShidWZmZXIubGVuZ3RoICYmICFzdHJlYW0ucGF1c2VkKSB7XG4gICAgICB2YXIgZGF0YSA9IGJ1ZmZlci5zaGlmdCgpXG4gICAgICBpZihudWxsID09PSBkYXRhKVxuICAgICAgICByZXR1cm4gc3RyZWFtLmVtaXQoJ2VuZCcpXG4gICAgICBlbHNlXG4gICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgZGF0YSlcbiAgICB9XG4gIH1cblxuICBzdHJlYW0ucXVldWUgPSBzdHJlYW0ucHVzaCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4vLyAgICBjb25zb2xlLmVycm9yKGVuZGVkKVxuICAgIGlmKF9lbmRlZCkgcmV0dXJuIHN0cmVhbVxuICAgIGlmKGRhdGEgPT09IG51bGwpIF9lbmRlZCA9IHRydWVcbiAgICBidWZmZXIucHVzaChkYXRhKVxuICAgIGRyYWluKClcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cblxuICAvL3RoaXMgd2lsbCBiZSByZWdpc3RlcmVkIGFzIHRoZSBmaXJzdCAnZW5kJyBsaXN0ZW5lclxuICAvL211c3QgY2FsbCBkZXN0cm95IG5leHQgdGljaywgdG8gbWFrZSBzdXJlIHdlJ3JlIGFmdGVyIGFueVxuICAvL3N0cmVhbSBwaXBlZCBmcm9tIGhlcmUuXG4gIC8vdGhpcyBpcyBvbmx5IGEgcHJvYmxlbSBpZiBlbmQgaXMgbm90IGVtaXR0ZWQgc3luY2hyb25vdXNseS5cbiAgLy9hIG5pY2VyIHdheSB0byBkbyB0aGlzIGlzIHRvIG1ha2Ugc3VyZSB0aGlzIGlzIHRoZSBsYXN0IGxpc3RlbmVyIGZvciAnZW5kJ1xuXG4gIHN0cmVhbS5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgIHN0cmVhbS5yZWFkYWJsZSA9IGZhbHNlXG4gICAgaWYoIXN0cmVhbS53cml0YWJsZSAmJiBzdHJlYW0uYXV0b0Rlc3Ryb3kpXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKVxuICAgICAgfSlcbiAgfSlcblxuICBmdW5jdGlvbiBfZW5kICgpIHtcbiAgICBzdHJlYW0ud3JpdGFibGUgPSBmYWxzZVxuICAgIGVuZC5jYWxsKHN0cmVhbSlcbiAgICBpZighc3RyZWFtLnJlYWRhYmxlICYmIHN0cmVhbS5hdXRvRGVzdHJveSlcbiAgICAgIHN0cmVhbS5kZXN0cm95KClcbiAgfVxuXG4gIHN0cmVhbS5lbmQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmKGVuZGVkKSByZXR1cm5cbiAgICBlbmRlZCA9IHRydWVcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoKSBzdHJlYW0ud3JpdGUoZGF0YSlcbiAgICBfZW5kKCkgLy8gd2lsbCBlbWl0IG9yIHF1ZXVlXG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG5cbiAgc3RyZWFtLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYoZGVzdHJveWVkKSByZXR1cm5cbiAgICBkZXN0cm95ZWQgPSB0cnVlXG4gICAgZW5kZWQgPSB0cnVlXG4gICAgYnVmZmVyLmxlbmd0aCA9IDBcbiAgICBzdHJlYW0ud3JpdGFibGUgPSBzdHJlYW0ucmVhZGFibGUgPSBmYWxzZVxuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpXG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG5cbiAgc3RyZWFtLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmKHN0cmVhbS5wYXVzZWQpIHJldHVyblxuICAgIHN0cmVhbS5wYXVzZWQgPSB0cnVlXG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG5cbiAgc3RyZWFtLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZihzdHJlYW0ucGF1c2VkKSB7XG4gICAgICBzdHJlYW0ucGF1c2VkID0gZmFsc2VcbiAgICAgIHN0cmVhbS5lbWl0KCdyZXN1bWUnKVxuICAgIH1cbiAgICBkcmFpbigpXG4gICAgLy9tYXkgaGF2ZSBiZWNvbWUgcGF1c2VkIGFnYWluLFxuICAgIC8vYXMgZHJhaW4gZW1pdHMgJ2RhdGEnLlxuICAgIGlmKCFzdHJlYW0ucGF1c2VkKVxuICAgICAgc3RyZWFtLmVtaXQoJ2RyYWluJylcbiAgICByZXR1cm4gc3RyZWFtXG4gIH1cbiAgcmV0dXJuIHN0cmVhbVxufVxuXG4iLCJ2YXIgYnVmZmVyRnJvbSA9IHJlcXVpcmUoJ2J1ZmZlci1mcm9tJylcbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCdyZWFkYWJsZS1zdHJlYW0nKS5UcmFuc2Zvcm07XG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpO1xuXG5pbmhlcml0cyhUb2tlbml6ZSwgVHJhbnNmb3JtKTtcbm1vZHVsZS5leHBvcnRzID0gVG9rZW5pemU7XG5cbnZhciBjb2RlcyA9IHtcbiAgICBsdDogJzwnLmNoYXJDb2RlQXQoMCksXG4gICAgZ3Q6ICc+Jy5jaGFyQ29kZUF0KDApLFxuICAgIHNsYXNoOiAnLycuY2hhckNvZGVBdCgwKSxcbiAgICBkcXVvdGU6ICdcIicuY2hhckNvZGVBdCgwKSxcbiAgICBzcXVvdGU6IFwiJ1wiLmNoYXJDb2RlQXQoMCksXG4gICAgZXF1YWw6ICc9Jy5jaGFyQ29kZUF0KDApXG59O1xuXG52YXIgc3RyaW5ncyA9IHtcbiAgICBlbmRTY3JpcHQ6IGJ1ZmZlckZyb20oJzwvc2NyaXB0JyksXG4gICAgZW5kU3R5bGU6IGJ1ZmZlckZyb20oJzwvc3R5bGUnKSxcbiAgICBlbmRUaXRsZTogYnVmZmVyRnJvbSgnPC90aXRsZScpLFxuICAgIGNvbW1lbnQ6IGJ1ZmZlckZyb20oJzwhLS0nKSxcbiAgICBlbmRDb21tZW50OiBidWZmZXJGcm9tKCctLT4nKSxcbiAgICBjZGF0YTogYnVmZmVyRnJvbSgnPCFbQ0RBVEFbJyksXG4gICAgZW5kQ2RhdGE6IGJ1ZmZlckZyb20oJ11dPicpXG59O1xuXG52YXIgc3RhdGVzID0ge1xuICAgICdUYWdOYW1lU3RhdGUnOiAxLFxuICAgICdBdHRyaWJ1dGVOYW1lU3RhdGUnOiAyLFxuICAgICdCZWZvcmVBdHRyaWJ1dGVWYWx1ZVN0YXRlJzogMyxcbiAgICAnQXR0cmlidXRlVmFsdWVTdGF0ZSc6NFxufVxuXG5mdW5jdGlvbiBUb2tlbml6ZSAoKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFRva2VuaXplKSkgcmV0dXJuIG5ldyBUb2tlbml6ZTtcbiAgICBUcmFuc2Zvcm0uY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLm9iamVjdE1vZGUgPSB0cnVlO1xuICAgIHRoaXMuc3RhdGUgPSAndGV4dCc7XG4gICAgdGhpcy50YWdTdGF0ZSA9IG51bGw7XG4gICAgdGhpcy5xdW90ZVN0YXRlID0gbnVsbDtcbiAgICB0aGlzLnJhdyA9IG51bGw7XG4gICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgdGhpcy5fbGFzdCA9IFtdO1xufVxuXG5Ub2tlbml6ZS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChidWYsIGVuYywgbmV4dCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICBcbiAgICBpZiAodGhpcy5fcHJldikge1xuICAgICAgICBidWYgPSBCdWZmZXIuY29uY2F0KFsgdGhpcy5fcHJldiwgYnVmIF0pO1xuICAgICAgICBpID0gdGhpcy5fcHJldi5sZW5ndGggLSAxO1xuICAgICAgICBvZmZzZXQgPSB0aGlzLl9vZmZzZXQ7XG4gICAgICAgIHRoaXMuX3ByZXYgPSBudWxsO1xuICAgICAgICB0aGlzLl9vZmZzZXQgPSAwO1xuICAgIH1cbiAgICBcbiAgICBmb3IgKDsgaSA8IGJ1Zi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYiA9IGJ1ZltpXTtcbiAgICAgICAgdGhpcy5fbGFzdC5wdXNoKGIpO1xuICAgICAgICBpZiAodGhpcy5fbGFzdC5sZW5ndGggPiA5KSB0aGlzLl9sYXN0LnNoaWZ0KCk7XG4gICAgICAgIC8vIGRldGVjdCBlbmQgb2YgcmF3IGNoYXJhY3RlciBtb2RlIChjb21tZW50LCBzY3JpcHQsLi4pXG4gICAgICAgIGlmICh0aGlzLnJhdykge1xuICAgICAgICAgICAgdmFyIHBhcnRzID0gdGhpcy5fdGVzdFJhdyhidWYsIG9mZnNldCwgaSk7XG4gICAgICAgICAgICBpZiAocGFydHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnB1c2goWyAndGV4dCcsIHBhcnRzWzBdIF0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJhdyA9PT0gc3RyaW5ncy5lbmRDb21tZW50XG4gICAgICAgICAgICAgICAgfHwgdGhpcy5yYXcgPT09IHN0cmluZ3MuZW5kQ2RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICd0ZXh0JztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaChbICdjbG9zZScsIHBhcnRzWzFdIF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICdvcGVuJztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzID0gWyBwYXJ0c1sxXSBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnJhdyA9IG51bGw7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXNrIGZvciBtb3JlIGRhdGEgaWYgbGFzdCBieXRlIGlzICc8JyBcbiAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gJ3RleHQnICYmIGIgPT09IGNvZGVzLmx0XG4gICAgICAgICYmIGkgPT09IGJ1Zi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2ID0gYnVmO1xuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkZXRlY3QgYSB0YWcgb3BlbmluZ1xuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAndGV4dCcgJiYgYiA9PT0gY29kZXMubHRcbiAgICAgICAgJiYgIWlzV2hpdGVTcGFjZShidWZbaSsxXSkpIHtcbiAgICAgICAgICAgIGlmIChpID4gMCAmJiBpIC0gb2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1Zi5zbGljZShvZmZzZXQsIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCA9IGk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ29wZW4nO1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IHN0YXRlcy5UYWdOYW1lU3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9wdXNoU3RhdGUoJ3RleHQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPT09IHN0YXRlcy5UYWdOYW1lU3RhdGUgJiZcbiAgICAgICAgICAgIGlzV2hpdGVTcGFjZShiKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPSBzdGF0ZXMuQXR0cmlidXRlTmFtZVN0YXRlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID09PSBzdGF0ZXMuQXR0cmlidXRlTmFtZVN0YXRlICYmXG4gICAgICAgICAgICBiID09PSBjb2Rlcy5lcXVhbFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPSBzdGF0ZXMuQmVmb3JlQXR0cmlidXRlVmFsdWVTdGF0ZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9PT0gc3RhdGVzLkJlZm9yZUF0dHJpYnV0ZVZhbHVlU3RhdGUgJiZcbiAgICAgICAgICAgIGlzV2hpdGVTcGFjZShiKVxuICAgICAgICApIHt9XG4gICAgICAgIGVsc2UgaWYgKFxuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9PT0gc3RhdGVzLkJlZm9yZUF0dHJpYnV0ZVZhbHVlU3RhdGVcbiAgICAgICAgICAgICYmIGIgIT09IGNvZGVzLmd0XG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IHN0YXRlcy5BdHRyaWJ1dGVWYWx1ZVN0YXRlO1xuICAgICAgICAgICAgaWYgKGIgPT09IGNvZGVzLmRxdW90ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucXVvdGVTdGF0ZSA9ICdkb3VibGUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChiID09PSBjb2Rlcy5zcXVvdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnF1b3RlU3RhdGUgPSAnc2luZ2xlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdW90ZVN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPT09IHN0YXRlcy5BdHRyaWJ1dGVWYWx1ZVN0YXRlICYmXG4gICAgICAgICAgICAhdGhpcy5xdW90ZVN0YXRlICYmXG4gICAgICAgICAgICBpc1doaXRlU3BhY2UoYilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID0gc3RhdGVzLkF0dHJpYnV0ZU5hbWVTdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPT09IHN0YXRlcy5BdHRyaWJ1dGVWYWx1ZVN0YXRlICYmXG4gICAgICAgICAgICB0aGlzLnF1b3RlU3RhdGUgPT09ICdkb3VibGUnICYmXG4gICAgICAgICAgICBiID09PSBjb2Rlcy5kcXVvdGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnF1b3RlU3RhdGUgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IHN0YXRlcy5BdHRyaWJ1dGVOYW1lU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICB0aGlzLnRhZ1N0YXRlID09PSBzdGF0ZXMuQXR0cmlidXRlVmFsdWVTdGF0ZSAmJlxuICAgICAgICAgICAgdGhpcy5xdW90ZVN0YXRlID09PSAnc2luZ2xlJyAmJlxuICAgICAgICAgICAgYiA9PT0gY29kZXMuc3F1b3RlXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5xdW90ZVN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGFnU3RhdGUgPSBzdGF0ZXMuQXR0cmlidXRlTmFtZVN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09ICdvcGVuJyAmJiBiID09PSBjb2Rlcy5ndCAmJiAhdGhpcy5xdW90ZVN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWYuc2xpY2Uob2Zmc2V0LCBpICsgMSkpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gaSArIDE7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3RleHQnO1xuICAgICAgICAgICAgdGhpcy50YWdTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fZ2V0Q2hhcigxKSA9PT0gY29kZXMuc2xhc2gpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wdXNoU3RhdGUoJ2Nsb3NlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gdGhpcy5fZ2V0VGFnKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ3NjcmlwdCcpIHRoaXMucmF3ID0gc3RyaW5ncy5lbmRTY3JpcHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ3N0eWxlJykgdGhpcy5yYXcgPSBzdHJpbmdzLmVuZFN0eWxlO1xuICAgICAgICAgICAgICAgIGlmICh0YWcgPT09ICd0aXRsZScpIHRoaXMucmF3ID0gc3RyaW5ncy5lbmRUaXRsZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wdXNoU3RhdGUoJ29wZW4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAnb3BlbicgJiYgY29tcGFyZSh0aGlzLl9sYXN0LCBzdHJpbmdzLmNvbW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWYuc2xpY2Uob2Zmc2V0LCBpICsgMSkpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gaSArIDE7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gJ3RleHQnO1xuICAgICAgICAgICAgdGhpcy5yYXcgPSBzdHJpbmdzLmVuZENvbW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9wdXNoU3RhdGUoJ29wZW4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSAnb3BlbicgJiYgY29tcGFyZSh0aGlzLl9sYXN0LCBzdHJpbmdzLmNkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYnVmLnNsaWNlKG9mZnNldCwgaSArIDEpKTtcbiAgICAgICAgICAgIG9mZnNldCA9IGkgKyAxO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9ICd0ZXh0JztcbiAgICAgICAgICAgIHRoaXMucmF3ID0gc3RyaW5ncy5lbmRDZGF0YTtcbiAgICAgICAgICAgIHRoaXMuX3B1c2hTdGF0ZSgnb3BlbicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPCBidWYubGVuZ3RoKSB0aGlzLmJ1ZmZlcnMucHVzaChidWYuc2xpY2Uob2Zmc2V0KSk7XG4gICAgbmV4dCgpO1xufTtcblxuVG9rZW5pemUucHJvdG90eXBlLl9mbHVzaCA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT09ICd0ZXh0JykgdGhpcy5fcHVzaFN0YXRlKCd0ZXh0Jyk7XG4gICAgdGhpcy5wdXNoKG51bGwpO1xuICAgIG5leHQoKTtcbn07XG5cblRva2VuaXplLnByb3RvdHlwZS5fcHVzaFN0YXRlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgaWYgKHRoaXMuYnVmZmVycy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgIHRoaXMucHVzaChbIGV2LCBidWYgXSk7XG59O1xuXG5Ub2tlbml6ZS5wcm90b3R5cGUuX2dldENoYXIgPSBmdW5jdGlvbiAoaSkge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5idWZmZXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBidWYgPSB0aGlzLmJ1ZmZlcnNbal07XG4gICAgICAgIGlmIChvZmZzZXQgKyBidWYubGVuZ3RoID4gaSkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZltpIC0gb2Zmc2V0XTtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgKz0gYnVmO1xuICAgIH1cbn07XG5cblRva2VuaXplLnByb3RvdHlwZS5fZ2V0VGFnID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvZmZzZXQgPSAwO1xuICAgIHZhciB0YWcgPSAnJztcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuYnVmZmVycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgYnVmID0gdGhpcy5idWZmZXJzW2pdO1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGJ1Zi5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgaWYgKG9mZnNldCA9PT0gMCAmJiBrID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZba10pO1xuICAgICAgICAgICAgaWYgKC9bXlxcdy0hXFxbXFxdXS8udGVzdChjKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWcudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgdGFnICs9IGM7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ICs9IGJ1Zi5sZW5ndGg7XG4gICAgfVxufTtcblxuVG9rZW5pemUucHJvdG90eXBlLl90ZXN0UmF3ID0gZnVuY3Rpb24gKGJ1Ziwgb2Zmc2V0LCBpbmRleCkge1xuICAgIHZhciByYXcgPSB0aGlzLnJhdywgbGFzdCA9IHRoaXMuX2xhc3Q7XG4gICAgaWYgKCFjb21wYXJlKGxhc3QsIHJhdykpIHJldHVybjtcbiAgICBcbiAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWYuc2xpY2Uob2Zmc2V0LCBpbmRleCArIDEpKTtcbiAgICB2YXIgYnVmID0gQnVmZmVyLmNvbmNhdCh0aGlzLmJ1ZmZlcnMpO1xuICAgIHZhciBrID0gYnVmLmxlbmd0aCAtIHJhdy5sZW5ndGg7XG4gICAgcmV0dXJuIFsgYnVmLnNsaWNlKDAsIGspLCBidWYuc2xpY2UoaykgXTtcbn07XG5cbmZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgIGZvciAodmFyIGk9YS5sZW5ndGgtMSwgaj1iLmxlbmd0aC0xOyBpID49IDAgJiYgaiA+PSAwOyBpLS0sIGotLSkge1xuICAgICAgICBpZiAobG93ZXIoYVtpXSkgIT09IGxvd2VyKGJbal0pKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBsb3dlciAobikge1xuICAgIGlmIChuID49IDY1ICYmIG4gPD0gOTApIHJldHVybiBuICsgMzI7XG4gICAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVTcGFjZShiKSB7XG4gIHJldHVybiBiID09PSAweDIwIHx8IGIgPT09IDB4MDkgfHwgYiA9PT0gMHgwQSB8fCBiID09PSAweDBDIHx8IGIgPT09IDB4MEQ7XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nXG5cbnZhciBpc01vZGVybiA9IChcbiAgdHlwZW9mIEJ1ZmZlci5hbGxvYyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgQnVmZmVyLmFsbG9jVW5zYWZlID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBCdWZmZXIuZnJvbSA9PT0gJ2Z1bmN0aW9uJ1xuKVxuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyIChpbnB1dCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpbnB1dCkuc2xpY2UoOCwgLTEpID09PSAnQXJyYXlCdWZmZXInXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAob2JqLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYnl0ZU9mZnNldCA+Pj49IDBcblxuICB2YXIgbWF4TGVuZ3RoID0gb2JqLmJ5dGVMZW5ndGggLSBieXRlT2Zmc2V0XG5cbiAgaWYgKG1heExlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIidvZmZzZXQnIGlzIG91dCBvZiBib3VuZHNcIilcbiAgfVxuXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IG1heExlbmd0aFxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA+Pj49IDBcblxuICAgIGlmIChsZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiJ2xlbmd0aCcgaXMgb3V0IG9mIGJvdW5kc1wiKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpc01vZGVyblxuICAgID8gQnVmZmVyLmZyb20ob2JqLnNsaWNlKGJ5dGVPZmZzZXQsIGJ5dGVPZmZzZXQgKyBsZW5ndGgpKVxuICAgIDogbmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShvYmouc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGxlbmd0aCkpKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHJldHVybiBpc01vZGVyblxuICAgID8gQnVmZmVyLmZyb20oc3RyaW5nLCBlbmNvZGluZylcbiAgICA6IG5ldyBCdWZmZXIoc3RyaW5nLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYnVmZmVyRnJvbSAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAoaXNBcnJheUJ1ZmZlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbSh2YWx1ZSlcbiAgICA6IG5ldyBCdWZmZXIodmFsdWUpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnVmZmVyRnJvbVxuIiwidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpOyAvLyBoYWNrIHRvIGZpeCBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWUgd2hlbiB1c2VkIHdpdGggYnJvd3NlcmlmeVxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9yZWFkYWJsZS5qcycpO1xuZXhwb3J0cy5TdHJlYW0gPSBTdHJlYW07XG5leHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0cztcbmV4cG9ydHMuV3JpdGFibGUgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3dyaXRhYmxlLmpzJyk7XG5leHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG5leHBvcnRzLlRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fdHJhbnNmb3JtLmpzJyk7XG5leHBvcnRzLlBhc3NUaHJvdWdoID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV9wYXNzdGhyb3VnaC5qcycpO1xuaWYgKCFwcm9jZXNzLmJyb3dzZXIgJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdzdHJlYW0nKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHBhc3N0aHJvdWdoIHN0cmVhbS5cbi8vIGJhc2ljYWxseSBqdXN0IHRoZSBtb3N0IG1pbmltYWwgc29ydCBvZiBUcmFuc2Zvcm0gc3RyZWFtLlxuLy8gRXZlcnkgd3JpdHRlbiBjaHVuayBnZXRzIG91dHB1dCBhcy1pcy5cblxubW9kdWxlLmV4cG9ydHMgPSBQYXNzVGhyb3VnaDtcblxudmFyIFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vX3N0cmVhbV90cmFuc2Zvcm0nKTtcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cbnZhciB1dGlsID0gcmVxdWlyZSgnY29yZS11dGlsLWlzJyk7XG51dGlsLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbi8qPC9yZXBsYWNlbWVudD4qL1xuXG51dGlsLmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpXG4gICAgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRpb25zKTtcblxuICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTtcbn1cblxuUGFzc1Rocm91Z2gucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbihjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgZHVwbGV4ZXIgPSByZXF1aXJlKCdkdXBsZXhlcjInKTtcbnZhciBQYXNzVGhyb3VnaCA9IHJlcXVpcmUoJ3N0cmVhbScpLlBhc3NUaHJvdWdoO1xudmFyIFJlYWRhYmxlID0gcmVxdWlyZSgnc3RyZWFtJykuUGFzc1Rocm91Z2g7XG52YXIgb2JqZWN0QXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG4vKipcbiAqIFNsaWNlIHJlZmVyZW5jZS5cbiAqL1xuXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcblxuLyoqXG4gKiBEdXBsZXhlciBvcHRpb25zLlxuICovXG5cbnZhciBkZWZhdWx0T3B0cyA9IHtcbiAgYnViYmxlRXJyb3JzOiBmYWxzZSxcbiAgb2JqZWN0TW9kZTogdHJ1ZVxufTtcblxuLyoqXG4gKiBFeHBvc2UgYHBpcGVgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gcGlwZTtcblxuLyoqXG4gKiBQaXBlLlxuICpcbiAqIEBwYXJhbSBzdHJlYW1zIEFycmF5W1N0cmVhbSwuLi5dXG4gKiBAcGFyYW0gb3B0cyBbT2JqZWN0XVxuICogQHBhcmFtIGNiIFtGdW5jdGlvbl1cbiAqIEByZXR1cm4ge1N0cmVhbX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gcGlwZShzdHJlYW1zLCBvcHRzLCBjYil7XG4gIGlmICghQXJyYXkuaXNBcnJheShzdHJlYW1zKSkge1xuICAgIHN0cmVhbXMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgb3B0cyA9IG51bGw7XG4gICAgY2IgPSBudWxsO1xuICB9XG5cbiAgdmFyIGxhc3RBcmcgPSBzdHJlYW1zW3N0cmVhbXMubGVuZ3RoIC0gMV07XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBsYXN0QXJnKSB7XG4gICAgY2IgPSBzdHJlYW1zLnNwbGljZSgtMSlbMF07XG4gICAgbGFzdEFyZyA9IHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXTtcbiAgfVxuICBpZiAoJ29iamVjdCcgPT0gdHlwZW9mIGxhc3RBcmcgJiYgdHlwZW9mIGxhc3RBcmcucGlwZSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0cyA9IHN0cmVhbXMuc3BsaWNlKC0xKVswXTtcbiAgfVxuICB2YXIgZmlyc3QgPSBzdHJlYW1zWzBdO1xuICB2YXIgbGFzdCA9IHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXTtcbiAgdmFyIHJldDtcbiAgb3B0cyA9IG9iamVjdEFzc2lnbih7fSwgZGVmYXVsdE9wdHMsIG9wdHMpXG5cbiAgaWYgKCFmaXJzdCkge1xuICAgIGlmIChjYikgcHJvY2Vzcy5uZXh0VGljayhjYik7XG4gICAgcmV0dXJuIG5ldyBQYXNzVGhyb3VnaChvcHRzKTtcbiAgfVxuICBcbiAgaWYgKGZpcnN0LndyaXRhYmxlICYmIGxhc3QucmVhZGFibGUpIHJldCA9IGR1cGxleGVyKG9wdHMsIGZpcnN0LCBsYXN0KTtcbiAgZWxzZSBpZiAoc3RyZWFtcy5sZW5ndGggPT0gMSkgcmV0ID0gbmV3IFJlYWRhYmxlKG9wdHMpLndyYXAoc3RyZWFtc1swXSk7XG4gIGVsc2UgaWYgKGZpcnN0LndyaXRhYmxlKSByZXQgPSBmaXJzdDtcbiAgZWxzZSBpZiAobGFzdC5yZWFkYWJsZSkgcmV0ID0gbGFzdDtcbiAgZWxzZSByZXQgPSBuZXcgUGFzc1Rocm91Z2gob3B0cyk7XG4gIFxuICBzdHJlYW1zLmZvckVhY2goZnVuY3Rpb24oc3RyZWFtLCBpKXtcbiAgICB2YXIgbmV4dCA9IHN0cmVhbXNbaSsxXTtcbiAgICBpZiAobmV4dCkgc3RyZWFtLnBpcGUobmV4dCk7XG4gICAgaWYgKHN0cmVhbSAhPSByZXQpIHN0cmVhbS5vbignZXJyb3InLCByZXQuZW1pdC5iaW5kKHJldCwgJ2Vycm9yJykpO1xuICB9KTtcblxuICBpZiAoY2IpIHtcbiAgICB2YXIgZW5kZWQgPSBmYWxzZTtcbiAgICByZXQub24oJ2Vycm9yJywgZW5kKTtcbiAgICBsYXN0Lm9uKCdmaW5pc2gnLCBmdW5jdGlvbigpeyBlbmQoKSB9KTtcbiAgICBsYXN0Lm9uKCdjbG9zZScsIGZ1bmN0aW9uKCl7IGVuZCgpIH0pO1xuICAgIGZ1bmN0aW9uIGVuZChlcnIpe1xuICAgICAgaWYgKGVuZGVkKSByZXR1cm47XG4gICAgICBlbmRlZCA9IHRydWU7XG4gICAgICBjYihlcnIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3RyZWFtID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKTtcblxuZnVuY3Rpb24gRHVwbGV4V3JhcHBlcihvcHRpb25zLCB3cml0YWJsZSwgcmVhZGFibGUpIHtcbiAgaWYgKHR5cGVvZiByZWFkYWJsZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJlYWRhYmxlID0gd3JpdGFibGU7XG4gICAgd3JpdGFibGUgPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgc3RyZWFtLkR1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gIGlmICh0eXBlb2YgcmVhZGFibGUucmVhZCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmVhZGFibGUgPSAobmV3IHN0cmVhbS5SZWFkYWJsZShvcHRpb25zKSkud3JhcChyZWFkYWJsZSk7XG4gIH1cblxuICB0aGlzLl93cml0YWJsZSA9IHdyaXRhYmxlO1xuICB0aGlzLl9yZWFkYWJsZSA9IHJlYWRhYmxlO1xuICB0aGlzLl93YWl0aW5nID0gZmFsc2U7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHdyaXRhYmxlLm9uY2UoXCJmaW5pc2hcIiwgZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbmQoKTtcbiAgfSk7XG5cbiAgdGhpcy5vbmNlKFwiZmluaXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgIHdyaXRhYmxlLmVuZCgpO1xuICB9KTtcblxuICByZWFkYWJsZS5vbihcInJlYWRhYmxlXCIsIGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxmLl93YWl0aW5nKSB7XG4gICAgICBzZWxmLl93YWl0aW5nID0gZmFsc2U7XG4gICAgICBzZWxmLl9yZWFkKCk7XG4gICAgfVxuICB9KTtcblxuICByZWFkYWJsZS5vbmNlKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuICAgIHNlbGYucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgaWYgKCFvcHRpb25zIHx8IHR5cGVvZiBvcHRpb25zLmJ1YmJsZUVycm9ycyA9PT0gXCJ1bmRlZmluZWRcIiB8fCBvcHRpb25zLmJ1YmJsZUVycm9ycykge1xuICAgIHdyaXRhYmxlLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzZWxmLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH0pO1xuXG4gICAgcmVhZGFibGUub24oXCJlcnJvclwiLCBmdW5jdGlvbihlcnIpIHtcbiAgICAgIHNlbGYuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgfSk7XG4gIH1cbn1cblxuRHVwbGV4V3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN0cmVhbS5EdXBsZXgucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHt2YWx1ZTogRHVwbGV4V3JhcHBlcn19KTtcblxuRHVwbGV4V3JhcHBlci5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gX3dyaXRlKGlucHV0LCBlbmNvZGluZywgZG9uZSkge1xuICB0aGlzLl93cml0YWJsZS53cml0ZShpbnB1dCwgZW5jb2RpbmcsIGRvbmUpO1xufTtcblxuRHVwbGV4V3JhcHBlci5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiBfcmVhZCgpIHtcbiAgdmFyIGJ1ZjtcbiAgdmFyIHJlYWRzID0gMDtcbiAgd2hpbGUgKChidWYgPSB0aGlzLl9yZWFkYWJsZS5yZWFkKCkpICE9PSBudWxsKSB7XG4gICAgdGhpcy5wdXNoKGJ1Zik7XG4gICAgcmVhZHMrKztcbiAgfVxuICBpZiAocmVhZHMgPT09IDApIHtcbiAgICB0aGlzLl93YWl0aW5nID0gdHJ1ZTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkdXBsZXgyKG9wdGlvbnMsIHdyaXRhYmxlLCByZWFkYWJsZSkge1xuICByZXR1cm4gbmV3IER1cGxleFdyYXBwZXIob3B0aW9ucywgd3JpdGFibGUsIHJlYWRhYmxlKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzLkR1cGxleFdyYXBwZXIgPSBEdXBsZXhXcmFwcGVyO1xuIiwidmFyIFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuaWYgKHByb2Nlc3MuZW52LlJFQURBQkxFX1NUUkVBTSA9PT0gJ2Rpc2FibGUnICYmIFN0cmVhbSkge1xuICBtb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTtcbiAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gU3RyZWFtLlJlYWRhYmxlO1xuICBleHBvcnRzLlJlYWRhYmxlID0gU3RyZWFtLlJlYWRhYmxlO1xuICBleHBvcnRzLldyaXRhYmxlID0gU3RyZWFtLldyaXRhYmxlO1xuICBleHBvcnRzLkR1cGxleCA9IFN0cmVhbS5EdXBsZXg7XG4gIGV4cG9ydHMuVHJhbnNmb3JtID0gU3RyZWFtLlRyYW5zZm9ybTtcbiAgZXhwb3J0cy5QYXNzVGhyb3VnaCA9IFN0cmVhbS5QYXNzVGhyb3VnaDtcbiAgZXhwb3J0cy5TdHJlYW0gPSBTdHJlYW07XG59IGVsc2Uge1xuICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9fc3RyZWFtX3JlYWRhYmxlLmpzJyk7XG4gIGV4cG9ydHMuU3RyZWFtID0gU3RyZWFtIHx8IGV4cG9ydHM7XG4gIGV4cG9ydHMuUmVhZGFibGUgPSBleHBvcnRzO1xuICBleHBvcnRzLldyaXRhYmxlID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV93cml0YWJsZS5qcycpO1xuICBleHBvcnRzLkR1cGxleCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fZHVwbGV4LmpzJyk7XG4gIGV4cG9ydHMuVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9saWIvX3N0cmVhbV90cmFuc2Zvcm0uanMnKTtcbiAgZXhwb3J0cy5QYXNzVGhyb3VnaCA9IHJlcXVpcmUoJy4vbGliL19zdHJlYW1fcGFzc3Rocm91Z2guanMnKTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gY29weUJ1ZmZlcihzcmMsIHRhcmdldCwgb2Zmc2V0KSB7XG4gIHNyYy5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEJ1ZmZlckxpc3QoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJ1ZmZlckxpc3QpO1xuXG4gICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoKHYpIHtcbiAgICB2YXIgZW50cnkgPSB7IGRhdGE6IHYsIG5leHQ6IG51bGwgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gICAgKyt0aGlzLmxlbmd0aDtcbiAgfTtcblxuICBCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gdW5zaGlmdCh2KSB7XG4gICAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHRoaXMudGFpbCA9IGVudHJ5O1xuICAgIHRoaXMuaGVhZCA9IGVudHJ5O1xuICAgICsrdGhpcy5sZW5ndGg7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuc2hpZnQgPSBmdW5jdGlvbiBzaGlmdCgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICB2YXIgcmV0ID0gdGhpcy5oZWFkLmRhdGE7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gICAgLS10aGlzLmxlbmd0aDtcbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJ1ZmZlckxpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIGpvaW4ocykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICAgIHZhciBwID0gdGhpcy5oZWFkO1xuICAgIHZhciByZXQgPSAnJyArIHAuZGF0YTtcbiAgICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgICAgcmV0ICs9IHMgKyBwLmRhdGE7XG4gICAgfXJldHVybiByZXQ7XG4gIH07XG5cbiAgQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0KG4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBCdWZmZXIuYWxsb2MoMCk7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gICAgdmFyIHJldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuID4+PiAwKTtcbiAgICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKHApIHtcbiAgICAgIGNvcHlCdWZmZXIocC5kYXRhLCByZXQsIGkpO1xuICAgICAgaSArPSBwLmRhdGEubGVuZ3RoO1xuICAgICAgcCA9IHAubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcblxuICByZXR1cm4gQnVmZmVyTGlzdDtcbn0oKTtcblxuaWYgKHV0aWwgJiYgdXRpbC5pbnNwZWN0ICYmIHV0aWwuaW5zcGVjdC5jdXN0b20pIHtcbiAgbW9kdWxlLmV4cG9ydHMucHJvdG90eXBlW3V0aWwuaW5zcGVjdC5jdXN0b21dID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYmogPSB1dGlsLmluc3BlY3QoeyBsZW5ndGg6IHRoaXMubGVuZ3RoIH0pO1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgKyBvYmo7XG4gIH07XG59IiwiXG4vKipcbiAqIEZvciBOb2RlLmpzLCBzaW1wbHkgcmUtZXhwb3J0IHRoZSBjb3JlIGB1dGlsLmRlcHJlY2F0ZWAgZnVuY3Rpb24uXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCd1dGlsJykuZGVwcmVjYXRlO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgcGFzc3Rocm91Z2ggc3RyZWFtLlxuLy8gYmFzaWNhbGx5IGp1c3QgdGhlIG1vc3QgbWluaW1hbCBzb3J0IG9mIFRyYW5zZm9ybSBzdHJlYW0uXG4vLyBFdmVyeSB3cml0dGVuIGNodW5rIGdldHMgb3V0cHV0IGFzLWlzLlxuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7XG5cbnZhciBUcmFuc2Zvcm0gPSByZXF1aXJlKCcuL19zdHJlYW1fdHJhbnNmb3JtJyk7XG5cbi8qPHJlcGxhY2VtZW50PiovXG52YXIgdXRpbCA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnY29yZS11dGlsLWlzJykpO1xudXRpbC5pbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJyk7XG4vKjwvcmVwbGFjZW1lbnQ+Ki9cblxudXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS1zZXJ2ZXIubm9kZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20tc2VydmVyLm5vZGUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtZG9tLXNlcnZlci5ub2RlLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBrPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG09cmVxdWlyZShcInJlYWN0XCIpLGFhPXJlcXVpcmUoXCJzdHJlYW1cIik7ZnVuY3Rpb24gcihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciB1PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYmE9dT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHY9dT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsY2E9dT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZGE9dT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdz11P1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZhPXU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxoYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixCPXU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGlhPXU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAsamE9dT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYT11P1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsbGE9dT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWE9dT9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcsbmE9dT9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7ZnVuY3Rpb24gb2EoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGMpezA9PT1hLl9zdGF0dXMmJihjPWMuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yyl9LGZ1bmN0aW9uKGMpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yyl9KX19XG5mdW5jdGlvbiBDKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgdjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBiYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgZGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgY2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGlhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGVhOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgdzpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGhhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO1xuY2FzZSBqYTpyZXR1cm4gQyhhLnR5cGUpO2Nhc2UgbGE6cmV0dXJuIEMoYS5yZW5kZXIpO2Nhc2Uga2E6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBDKGEpfXJldHVybiBudWxsfXZhciBEPW0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7RC5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChELlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO0QuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KEQuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTt2YXIgcGE9e307ZnVuY3Rpb24gRShhLGIpe2Zvcih2YXIgYz1hLl90aHJlYWRDb3VudHwwO2M8PWI7YysrKWFbY109YS5fY3VycmVudFZhbHVlMixhLl90aHJlYWRDb3VudD1jKzF9XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihkJiYoZD1hLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpKXJldHVybiBFKGQsYyksZFtjXTtpZihhPWEuY29udGV4dFR5cGVzKXtjPXt9O2Zvcih2YXIgZiBpbiBhKWNbZl09YltmXTtiPWN9ZWxzZSBiPXBhO3JldHVybiBifWZvcih2YXIgRj1uZXcgVWludDE2QXJyYXkoMTYpLEg9MDsxNT5IO0grKylGW0hdPUgrMTtGWzE1XT0wO1xudmFyIHJhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxzYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHRhPXt9LHVhPXt9O1xuZnVuY3Rpb24gdmEoYSl7aWYoc2EuY2FsbCh1YSxhKSlyZXR1cm4hMDtpZihzYS5jYWxsKHRhLGEpKXJldHVybiExO2lmKHJhLnRlc3QoYSkpcmV0dXJuIHVhW2FdPSEwO3RhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHdhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24geGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8d2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBKKGEsYixjLGQsZixoKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWY7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9aH12YXIgSz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtLW2JdPW5ldyBKKGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtLW2FdPW5ldyBKKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgTD0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIE0oYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoTCxcbk0pO0tbYl09bmV3IEooYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShMLE0pO0tbYl09bmV3IEooYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoTCxNKTtLW2JdPW5ldyBKKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5LLnhsaW5rSHJlZj1uZXcgSihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7S1thXT1uZXcgSihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIHlhPS9bXCInJjw+XS87XG5mdW5jdGlvbiBOKGEpe2lmKFwiYm9vbGVhblwiPT09dHlwZW9mIGF8fFwibnVtYmVyXCI9PT10eXBlb2YgYSlyZXR1cm5cIlwiK2E7YT1cIlwiK2E7dmFyIGI9eWEuZXhlYyhhKTtpZihiKXt2YXIgYz1cIlwiLGQsZj0wO2ZvcihkPWIuaW5kZXg7ZDxhLmxlbmd0aDtkKyspe3N3aXRjaChhLmNoYXJDb2RlQXQoZCkpe2Nhc2UgMzQ6Yj1cIiZxdW90O1wiO2JyZWFrO2Nhc2UgMzg6Yj1cIiZhbXA7XCI7YnJlYWs7Y2FzZSAzOTpiPVwiJiN4Mjc7XCI7YnJlYWs7Y2FzZSA2MDpiPVwiJmx0O1wiO2JyZWFrO2Nhc2UgNjI6Yj1cIiZndDtcIjticmVhaztkZWZhdWx0OmNvbnRpbnVlfWYhPT1kJiYoYys9YS5zdWJzdHJpbmcoZixkKSk7Zj1kKzE7Yys9Yn1hPWYhPT1kP2MrYS5zdWJzdHJpbmcoZixkKTpjfXJldHVybiBhfVxuZnVuY3Rpb24gemEoYSxiKXt2YXIgYz1LLmhhc093blByb3BlcnR5KGEpP0tbYV06bnVsbDt2YXIgZDtpZihkPVwic3R5bGVcIiE9PWEpZD1udWxsIT09Yz8wPT09Yy50eXBlOiEoMjxhLmxlbmd0aCl8fFwib1wiIT09YVswXSYmXCJPXCIhPT1hWzBdfHxcIm5cIiE9PWFbMV0mJlwiTlwiIT09YVsxXT8hMTohMDtpZihkfHx4YShhLGIsYywhMSkpcmV0dXJuXCJcIjtpZihudWxsIT09Yyl7YT1jLmF0dHJpYnV0ZU5hbWU7ZD1jLnR5cGU7aWYoMz09PWR8fDQ9PT1kJiYhMD09PWIpcmV0dXJuIGErJz1cIlwiJztjLnNhbml0aXplVVJMJiYoYj1cIlwiK2IpO3JldHVybiBhKyc9XCInKyhOKGIpKydcIicpfXJldHVybiB2YShhKT9hKyc9XCInKyhOKGIpKydcIicpOlwiXCJ9ZnVuY3Rpb24gQWEoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifVxudmFyIEJhPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkFhLE89bnVsbCxQPW51bGwsUT1udWxsLFI9ITEsUz0hMSxVPW51bGwsVj0wO2Z1bmN0aW9uIFcoKXtpZihudWxsPT09Tyl0aHJvdyBFcnJvcihyKDMyMSkpO3JldHVybiBPfWZ1bmN0aW9uIENhKCl7aWYoMDxWKXRocm93IEVycm9yKHIoMzEyKSk7cmV0dXJue21lbW9pemVkU3RhdGU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH19ZnVuY3Rpb24gRGEoKXtudWxsPT09UT9udWxsPT09UD8oUj0hMSxQPVE9Q2EoKSk6KFI9ITAsUT1QKTpudWxsPT09US5uZXh0PyhSPSExLFE9US5uZXh0PUNhKCkpOihSPSEwLFE9US5uZXh0KTtyZXR1cm4gUX1mdW5jdGlvbiBFYShhLGIsYyxkKXtmb3IoO1M7KVM9ITEsVis9MSxRPW51bGwsYz1hKGIsZCk7UD1PPW51bGw7Vj0wO1E9VT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gR2EoYSxiLGMpe089VygpO1E9RGEoKTtpZihSKXt2YXIgZD1RLnF1ZXVlO2I9ZC5kaXNwYXRjaDtpZihudWxsIT09VSYmKGM9VS5nZXQoZCksdm9pZCAwIT09Yykpe1UuZGVsZXRlKGQpO2Q9US5tZW1vaXplZFN0YXRlO2RvIGQ9YShkLGMuYWN0aW9uKSxjPWMubmV4dDt3aGlsZShudWxsIT09Yyk7US5tZW1vaXplZFN0YXRlPWQ7cmV0dXJuW2QsYl19cmV0dXJuW1EubWVtb2l6ZWRTdGF0ZSxiXX1hPWE9PT1GYT9cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKCk6Yjp2b2lkIDAhPT1jP2MoYik6YjtRLm1lbW9pemVkU3RhdGU9YTthPVEucXVldWU9e2xhc3Q6bnVsbCxkaXNwYXRjaDpudWxsfTthPWEuZGlzcGF0Y2g9SGEuYmluZChudWxsLE8sYSk7cmV0dXJuW1EubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIEhhKGEsYixjKXtpZighKDI1PlYpKXRocm93IEVycm9yKHIoMzAxKSk7aWYoYT09PU8paWYoUz0hMCxhPXthY3Rpb246YyxuZXh0Om51bGx9LG51bGw9PT1VJiYoVT1uZXcgTWFwKSxjPVUuZ2V0KGIpLHZvaWQgMD09PWMpVS5zZXQoYixhKTtlbHNle2ZvcihiPWM7bnVsbCE9PWIubmV4dDspYj1iLm5leHQ7Yi5uZXh0PWF9fWZ1bmN0aW9uIElhKCl7fVxudmFyIFg9MCxKYT17cmVhZENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9WDtFKGEsYik7cmV0dXJuIGFbYl19LHVzZUNvbnRleHQ6ZnVuY3Rpb24oYSl7VygpO3ZhciBiPVg7RShhLGIpO3JldHVybiBhW2JdfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7Tz1XKCk7UT1EYSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7aWYobnVsbCE9PVEpe3ZhciBjPVEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmbnVsbCE9PWIpe2E6e3ZhciBkPWNbMV07aWYobnVsbD09PWQpZD0hMTtlbHNle2Zvcih2YXIgZj0wO2Y8ZC5sZW5ndGgmJmY8Yi5sZW5ndGg7ZisrKWlmKCFCYShiW2ZdLGRbZl0pKXtkPSExO2JyZWFrIGF9ZD0hMH19aWYoZClyZXR1cm4gY1swXX19YT1hKCk7US5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOkdhLHVzZVJlZjpmdW5jdGlvbihhKXtPPVcoKTtRPURhKCk7dmFyIGI9US5tZW1vaXplZFN0YXRlO3JldHVybiBudWxsPT09Yj8oYT17Y3VycmVudDphfSxRLm1lbW9pemVkU3RhdGU9XG5hKTpifSx1c2VTdGF0ZTpmdW5jdGlvbihhKXtyZXR1cm4gR2EoRmEsYSl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbigpe30sdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSl7cmV0dXJuIGF9LHVzZUltcGVyYXRpdmVIYW5kbGU6SWEsdXNlRWZmZWN0OklhLHVzZURlYnVnVmFsdWU6SWEsdXNlUmVzcG9uZGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJue3Byb3BzOmIscmVzcG9uZGVyOmF9fSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe1coKTtyZXR1cm4gYX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe1coKTtyZXR1cm5bZnVuY3Rpb24oYSl7YSgpfSwhMV19fSxLYT17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBMYShhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxudmFyIE1hPXthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9LE5hPWsoe21lbnVpdGVtOiEwfSxNYSksWT17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxcbmdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxPYT1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoWSkuZm9yRWFjaChmdW5jdGlvbihhKXtPYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO1lbYl09WVthXX0pfSk7XG52YXIgUGE9LyhbQS1aXSkvZyxRYT0vXm1zLS8sWj1tLkNoaWxkcmVuLnRvQXJyYXksUmE9RC5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFNhPXtsaXN0aW5nOiEwLHByZTohMCx0ZXh0YXJlYTohMH0sVGE9L15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC8sVWE9e30sVmE9e307ZnVuY3Rpb24gV2EoYSl7aWYodm9pZCAwPT09YXx8bnVsbD09PWEpcmV0dXJuIGE7dmFyIGI9XCJcIjttLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn12YXIgWGE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxZYT17Y2hpbGRyZW46bnVsbCxkYW5nZXJvdXNseVNldElubmVySFRNTDpudWxsLHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzpudWxsLHN1cHByZXNzSHlkcmF0aW9uV2FybmluZzpudWxsfTtmdW5jdGlvbiBaYShhLGIpe2lmKHZvaWQgMD09PWEpdGhyb3cgRXJyb3IocigxNTIsQyhiKXx8XCJDb21wb25lbnRcIikpO31cbmZ1bmN0aW9uICRhKGEsYixjKXtmdW5jdGlvbiBkKGQsaCl7dmFyIGU9aC5wcm90b3R5cGUmJmgucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQsZj1xYShoLGIsYyxlKSxwPVtdLGc9ITEsbD17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe2lmKG51bGw9PT1wKXJldHVybiBudWxsfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYyl7Zz0hMDtwPVtjXX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYyl7aWYobnVsbD09PXApcmV0dXJuIG51bGw7cC5wdXNoKGMpfX07aWYoZSl7aWYoZT1uZXcgaChkLnByb3BzLGYsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKXt2YXIgeD1oLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy5jYWxsKG51bGwsZC5wcm9wcyxlLnN0YXRlKTtudWxsIT14JiYoZS5zdGF0ZT1rKHt9LGUuc3RhdGUseCkpfX1lbHNlIGlmKE89e30sZT1oKGQucHJvcHMsXG5mLGwpLGU9RWEoaCxkLnByb3BzLGUsZiksbnVsbD09ZXx8bnVsbD09ZS5yZW5kZXIpe2E9ZTtaYShhLGgpO3JldHVybn1lLnByb3BzPWQucHJvcHM7ZS5jb250ZXh0PWY7ZS51cGRhdGVyPWw7bD1lLnN0YXRlO3ZvaWQgMD09PWwmJihlLnN0YXRlPWw9bnVsbCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudHx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50KWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGguZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBoLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkscC5sZW5ndGgpe2w9cDt2YXIgdD1cbmc7cD1udWxsO2c9ITE7aWYodCYmMT09PWwubGVuZ3RoKWUuc3RhdGU9bFswXTtlbHNle3g9dD9sWzBdOmUuc3RhdGU7dmFyIHk9ITA7Zm9yKHQ9dD8xOjA7dDxsLmxlbmd0aDt0Kyspe3ZhciBxPWxbdF07cT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcT9xLmNhbGwoZSx4LGQucHJvcHMsZik6cTtudWxsIT1xJiYoeT8oeT0hMSx4PWsoe30seCxxKSk6ayh4LHEpKX1lLnN0YXRlPXh9fWVsc2UgcD1udWxsO2E9ZS5yZW5kZXIoKTtaYShhLGgpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldENoaWxkQ29udGV4dCYmKGQ9aC5jaGlsZENvbnRleHRUeXBlcyxcIm9iamVjdFwiPT09dHlwZW9mIGQpKXt2YXIgQT1lLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgVCBpbiBBKWlmKCEoVCBpbiBkKSl0aHJvdyBFcnJvcihyKDEwOCxDKGgpfHxcIlVua25vd25cIixUKSk7fUEmJihiPWsoe30sYixBKSl9Zm9yKDttLmlzVmFsaWRFbGVtZW50KGEpOyl7dmFyIGY9YSxoPWYudHlwZTtpZihcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBoKWJyZWFrO2QoZixoKX1yZXR1cm57Y2hpbGQ6YSxjb250ZXh0OmJ9fVxudmFyIGFiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIpe20uaXNWYWxpZEVsZW1lbnQoYSk/YS50eXBlIT09dj9hPVthXTooYT1hLnByb3BzLmNoaWxkcmVuLGE9bS5pc1ZhbGlkRWxlbWVudChhKT9bYV06WihhKSk6YT1aKGEpO2E9e3R5cGU6bnVsbCxkb21OYW1lc3BhY2U6S2EuaHRtbCxjaGlsZHJlbjphLGNoaWxkSW5kZXg6MCxjb250ZXh0OnBhLGZvb3RlcjpcIlwifTt2YXIgYz1GWzBdO2lmKDA9PT1jKXt2YXIgZD1GO2M9ZC5sZW5ndGg7dmFyIHA9MipjO2lmKCEoNjU1MzY+PXApKXRocm93IEVycm9yKHIoMzA0KSk7dmFyIGc9bmV3IFVpbnQxNkFycmF5KHApO2cuc2V0KGQpO0Y9ZztGWzBdPWMrMTtmb3IoZD1jO2Q8cC0xO2QrKylGW2RdPWQrMTtGW3AtMV09MH1lbHNlIEZbMF09RltjXTt0aGlzLnRocmVhZElEPWM7dGhpcy5zdGFjaz1bYV07dGhpcy5leGhhdXN0ZWQ9ITE7dGhpcy5jdXJyZW50U2VsZWN0VmFsdWU9bnVsbDt0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGU9ITE7dGhpcy5tYWtlU3RhdGljTWFya3VwPVxuYjt0aGlzLnN1c3BlbnNlRGVwdGg9MDt0aGlzLmNvbnRleHRJbmRleD0tMTt0aGlzLmNvbnRleHRTdGFjaz1bXTt0aGlzLmNvbnRleHRWYWx1ZVN0YWNrPVtdfXZhciBiPWEucHJvdG90eXBlO2IuZGVzdHJveT1mdW5jdGlvbigpe2lmKCF0aGlzLmV4aGF1c3RlZCl7dGhpcy5leGhhdXN0ZWQ9ITA7dGhpcy5jbGVhclByb3ZpZGVycygpO3ZhciBhPXRoaXMudGhyZWFkSUQ7RlthXT1GWzBdO0ZbMF09YX19O2IucHVzaFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPSsrdGhpcy5jb250ZXh0SW5kZXgsYz1hLnR5cGUuX2NvbnRleHQsaD10aGlzLnRocmVhZElEO0UoYyxoKTt2YXIgcD1jW2hdO3RoaXMuY29udGV4dFN0YWNrW2JdPWM7dGhpcy5jb250ZXh0VmFsdWVTdGFja1tiXT1wO2NbaF09YS5wcm9wcy52YWx1ZX07Yi5wb3BQcm92aWRlcj1mdW5jdGlvbigpe3ZhciBhPXRoaXMuY29udGV4dEluZGV4LGI9dGhpcy5jb250ZXh0U3RhY2tbYV0sZj10aGlzLmNvbnRleHRWYWx1ZVN0YWNrW2FdO1xudGhpcy5jb250ZXh0U3RhY2tbYV09bnVsbDt0aGlzLmNvbnRleHRWYWx1ZVN0YWNrW2FdPW51bGw7dGhpcy5jb250ZXh0SW5kZXgtLTtiW3RoaXMudGhyZWFkSURdPWZ9O2IuY2xlYXJQcm92aWRlcnM9ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5jb250ZXh0SW5kZXg7MDw9YTthLS0pdGhpcy5jb250ZXh0U3RhY2tbYV1bdGhpcy50aHJlYWRJRF09dGhpcy5jb250ZXh0VmFsdWVTdGFja1thXX07Yi5yZWFkPWZ1bmN0aW9uKGEpe2lmKHRoaXMuZXhoYXVzdGVkKXJldHVybiBudWxsO3ZhciBiPVg7WD10aGlzLnRocmVhZElEO3ZhciBjPVJhLmN1cnJlbnQ7UmEuY3VycmVudD1KYTt0cnl7Zm9yKHZhciBoPVtcIlwiXSxwPSExO2hbMF0ubGVuZ3RoPGE7KXtpZigwPT09dGhpcy5zdGFjay5sZW5ndGgpe3RoaXMuZXhoYXVzdGVkPSEwO3ZhciBnPXRoaXMudGhyZWFkSUQ7RltnXT1GWzBdO0ZbMF09ZzticmVha312YXIgZT10aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoLTFdO2lmKHB8fGUuY2hpbGRJbmRleD49XG5lLmNoaWxkcmVuLmxlbmd0aCl7dmFyIEk9ZS5mb290ZXI7XCJcIiE9PUkmJih0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGU9ITEpO3RoaXMuc3RhY2sucG9wKCk7aWYoXCJzZWxlY3RcIj09PWUudHlwZSl0aGlzLmN1cnJlbnRTZWxlY3RWYWx1ZT1udWxsO2Vsc2UgaWYobnVsbCE9ZS50eXBlJiZudWxsIT1lLnR5cGUudHlwZSYmZS50eXBlLnR5cGUuJCR0eXBlb2Y9PT13KXRoaXMucG9wUHJvdmlkZXIoZS50eXBlKTtlbHNlIGlmKGUudHlwZT09PUIpe3RoaXMuc3VzcGVuc2VEZXB0aC0tO3ZhciBHPWgucG9wKCk7aWYocCl7cD0hMTt2YXIgbj1lLmZhbGxiYWNrRnJhbWU7aWYoIW4pdGhyb3cgRXJyb3IocigzMDMpKTt0aGlzLnN0YWNrLnB1c2gobik7aFt0aGlzLnN1c3BlbnNlRGVwdGhdKz1cIlxceDNjIS0tJCEtLVxceDNlXCI7Y29udGludWV9ZWxzZSBoW3RoaXMuc3VzcGVuc2VEZXB0aF0rPUd9aFt0aGlzLnN1c3BlbnNlRGVwdGhdKz1JfWVsc2V7dmFyIGw9ZS5jaGlsZHJlbltlLmNoaWxkSW5kZXgrK10sXG54PVwiXCI7dHJ5e3grPXRoaXMucmVuZGVyKGwsZS5jb250ZXh0LGUuZG9tTmFtZXNwYWNlKX1jYXRjaCh0KXtpZihudWxsIT10JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdC50aGVuKXRocm93IEVycm9yKHIoMjk0KSk7dGhyb3cgdDt9ZmluYWxseXt9aC5sZW5ndGg8PXRoaXMuc3VzcGVuc2VEZXB0aCYmaC5wdXNoKFwiXCIpO2hbdGhpcy5zdXNwZW5zZURlcHRoXSs9eH19cmV0dXJuIGhbMF19ZmluYWxseXtSYS5jdXJyZW50PWMsWD1ifX07Yi5yZW5kZXI9ZnVuY3Rpb24oYSxiLGYpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJudW1iZXJcIj09PXR5cGVvZiBhKXtmPVwiXCIrYTtpZihcIlwiPT09ZilyZXR1cm5cIlwiO2lmKHRoaXMubWFrZVN0YXRpY01hcmt1cClyZXR1cm4gTihmKTtpZih0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGUpcmV0dXJuXCJcXHgzYyEtLSAtLVxceDNlXCIrTihmKTt0aGlzLnByZXZpb3VzV2FzVGV4dE5vZGU9ITA7cmV0dXJuIE4oZil9Yj0kYShhLGIsdGhpcy50aHJlYWRJRCk7YT1iLmNoaWxkO1xuYj1iLmNvbnRleHQ7aWYobnVsbD09PWF8fCExPT09YSlyZXR1cm5cIlwiO2lmKCFtLmlzVmFsaWRFbGVtZW50KGEpKXtpZihudWxsIT1hJiZudWxsIT1hLiQkdHlwZW9mKXtmPWEuJCR0eXBlb2Y7aWYoZj09PWJhKXRocm93IEVycm9yKHIoMjU3KSk7dGhyb3cgRXJyb3IocigyNTgsZi50b1N0cmluZygpKSk7fWE9WihhKTt0aGlzLnN0YWNrLnB1c2goe3R5cGU6bnVsbCxkb21OYW1lc3BhY2U6ZixjaGlsZHJlbjphLGNoaWxkSW5kZXg6MCxjb250ZXh0OmIsZm9vdGVyOlwiXCJ9KTtyZXR1cm5cIlwifXZhciBjPWEudHlwZTtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMpcmV0dXJuIHRoaXMucmVuZGVyRE9NKGEsYixmKTtzd2l0Y2goYyl7Y2FzZSBjYTpjYXNlIGZhOmNhc2UgZGE6Y2FzZSBpYTpjYXNlIHY6cmV0dXJuIGE9WihhLnByb3BzLmNoaWxkcmVuKSx0aGlzLnN0YWNrLnB1c2goe3R5cGU6bnVsbCxkb21OYW1lc3BhY2U6ZixjaGlsZHJlbjphLGNoaWxkSW5kZXg6MCxjb250ZXh0OmIsZm9vdGVyOlwiXCJ9KSxcblwiXCI7Y2FzZSBCOnRocm93IEVycm9yKHIoMjk0KSk7fWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpc3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgaGE6Tz17fTt2YXIgZD1jLnJlbmRlcihhLnByb3BzLGEucmVmKTtkPUVhKGMucmVuZGVyLGEucHJvcHMsZCxhLnJlZik7ZD1aKGQpO3RoaXMuc3RhY2sucHVzaCh7dHlwZTpudWxsLGRvbU5hbWVzcGFjZTpmLGNoaWxkcmVuOmQsY2hpbGRJbmRleDowLGNvbnRleHQ6Yixmb290ZXI6XCJcIn0pO3JldHVyblwiXCI7Y2FzZSBqYTpyZXR1cm4gYT1bbS5jcmVhdGVFbGVtZW50KGMudHlwZSxrKHtyZWY6YS5yZWZ9LGEucHJvcHMpKV0sdGhpcy5zdGFjay5wdXNoKHt0eXBlOm51bGwsZG9tTmFtZXNwYWNlOmYsY2hpbGRyZW46YSxjaGlsZEluZGV4OjAsY29udGV4dDpiLGZvb3RlcjpcIlwifSksXCJcIjtjYXNlIHc6cmV0dXJuIGM9WihhLnByb3BzLmNoaWxkcmVuKSxmPXt0eXBlOmEsZG9tTmFtZXNwYWNlOmYsY2hpbGRyZW46YyxjaGlsZEluZGV4OjAsXG5jb250ZXh0OmIsZm9vdGVyOlwiXCJ9LHRoaXMucHVzaFByb3ZpZGVyKGEpLHRoaXMuc3RhY2sucHVzaChmKSxcIlwiO2Nhc2UgZWE6Yz1hLnR5cGU7ZD1hLnByb3BzO3ZhciBnPXRoaXMudGhyZWFkSUQ7RShjLGcpO2M9WihkLmNoaWxkcmVuKGNbZ10pKTt0aGlzLnN0YWNrLnB1c2goe3R5cGU6YSxkb21OYW1lc3BhY2U6ZixjaGlsZHJlbjpjLGNoaWxkSW5kZXg6MCxjb250ZXh0OmIsZm9vdGVyOlwiXCJ9KTtyZXR1cm5cIlwiO2Nhc2UgbWE6dGhyb3cgRXJyb3IocigzMzgpKTtjYXNlIGthOnN3aXRjaChjPWEudHlwZSxvYShjKSxjLl9zdGF0dXMpe2Nhc2UgMTpyZXR1cm4gYT1bbS5jcmVhdGVFbGVtZW50KGMuX3Jlc3VsdCxrKHtyZWY6YS5yZWZ9LGEucHJvcHMpKV0sdGhpcy5zdGFjay5wdXNoKHt0eXBlOm51bGwsZG9tTmFtZXNwYWNlOmYsY2hpbGRyZW46YSxjaGlsZEluZGV4OjAsY29udGV4dDpiLGZvb3RlcjpcIlwifSksXCJcIjtjYXNlIDI6dGhyb3cgYy5fcmVzdWx0O2RlZmF1bHQ6dGhyb3cgRXJyb3IocigyOTUpKTtcbn1jYXNlIG5hOnRocm93IEVycm9yKHIoMzQzKSk7fXRocm93IEVycm9yKHIoMTMwLG51bGw9PWM/Yzp0eXBlb2YgYyxcIlwiKSk7fTtiLnJlbmRlckRPTT1mdW5jdGlvbihhLGIsZil7dmFyIGM9YS50eXBlLnRvTG93ZXJDYXNlKCk7Zj09PUthLmh0bWwmJkxhKGMpO2lmKCFVYS5oYXNPd25Qcm9wZXJ0eShjKSl7aWYoIVRhLnRlc3QoYykpdGhyb3cgRXJyb3Iocig2NSxjKSk7VWFbY109ITB9dmFyIGQ9YS5wcm9wcztpZihcImlucHV0XCI9PT1jKWQ9ayh7dHlwZTp2b2lkIDB9LGQse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOm51bGwhPWQudmFsdWU/ZC52YWx1ZTpkLmRlZmF1bHRWYWx1ZSxjaGVja2VkOm51bGwhPWQuY2hlY2tlZD9kLmNoZWNrZWQ6ZC5kZWZhdWx0Q2hlY2tlZH0pO2Vsc2UgaWYoXCJ0ZXh0YXJlYVwiPT09Yyl7dmFyIGc9ZC52YWx1ZTtpZihudWxsPT1nKXtnPWQuZGVmYXVsdFZhbHVlO3ZhciBlPWQuY2hpbGRyZW47aWYobnVsbCE9ZSl7aWYobnVsbCE9XG5nKXRocm93IEVycm9yKHIoOTIpKTtpZihBcnJheS5pc0FycmF5KGUpKXtpZighKDE+PWUubGVuZ3RoKSl0aHJvdyBFcnJvcihyKDkzKSk7ZT1lWzBdfWc9XCJcIitlfW51bGw9PWcmJihnPVwiXCIpfWQ9ayh7fSxkLHt2YWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIitnfSl9ZWxzZSBpZihcInNlbGVjdFwiPT09Yyl0aGlzLmN1cnJlbnRTZWxlY3RWYWx1ZT1udWxsIT1kLnZhbHVlP2QudmFsdWU6ZC5kZWZhdWx0VmFsdWUsZD1rKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Vsc2UgaWYoXCJvcHRpb25cIj09PWMpe2U9dGhpcy5jdXJyZW50U2VsZWN0VmFsdWU7dmFyIEk9V2EoZC5jaGlsZHJlbik7aWYobnVsbCE9ZSl7dmFyIEc9bnVsbCE9ZC52YWx1ZT9kLnZhbHVlK1wiXCI6STtnPSExO2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe2lmKFwiXCIrZVtuXT09PUcpe2c9ITA7YnJlYWt9fWVsc2UgZz1cIlwiK2U9PT1HO2Q9ayh7c2VsZWN0ZWQ6dm9pZCAwLGNoaWxkcmVuOnZvaWQgMH0sXG5kLHtzZWxlY3RlZDpnLGNoaWxkcmVuOkl9KX19aWYoZz1kKXtpZihOYVtjXSYmKG51bGwhPWcuY2hpbGRyZW58fG51bGwhPWcuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHIoMTM3LGMsXCJcIikpO2lmKG51bGwhPWcuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWcuY2hpbGRyZW4pdGhyb3cgRXJyb3Iocig2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBnLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gZy5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3Iocig2MSkpO31pZihudWxsIT1nLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGcuc3R5bGUpdGhyb3cgRXJyb3Iocig2MixcIlwiKSk7fWc9ZDtlPXRoaXMubWFrZVN0YXRpY01hcmt1cDtJPTE9PT10aGlzLnN0YWNrLmxlbmd0aDtHPVwiPFwiK2EudHlwZTtmb3IoeiBpbiBnKWlmKFhhLmNhbGwoZyx6KSl7dmFyIGw9Z1t6XTtpZihudWxsIT1sKXtpZihcInN0eWxlXCI9PT1cbnope249dm9pZCAwO3ZhciB4PVwiXCIsdD1cIlwiO2ZvcihuIGluIGwpaWYobC5oYXNPd25Qcm9wZXJ0eShuKSl7dmFyIHk9MD09PW4uaW5kZXhPZihcIi0tXCIpLHE9bFtuXTtpZihudWxsIT1xKXtpZih5KXZhciBBPW47ZWxzZSBpZihBPW4sVmEuaGFzT3duUHJvcGVydHkoQSkpQT1WYVtBXTtlbHNle3ZhciBUPUEucmVwbGFjZShQYSxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoUWEsXCItbXMtXCIpO0E9VmFbQV09VH14Kz10K0ErXCI6XCI7dD1uO3k9bnVsbD09cXx8XCJib29sZWFuXCI9PT10eXBlb2YgcXx8XCJcIj09PXE/XCJcIjp5fHxcIm51bWJlclwiIT09dHlwZW9mIHF8fDA9PT1xfHxZLmhhc093blByb3BlcnR5KHQpJiZZW3RdPyhcIlwiK3EpLnRyaW0oKTpxK1wicHhcIjt4Kz15O3Q9XCI7XCJ9fWw9eHx8bnVsbH1uPW51bGw7YjppZih5PWMscT1nLC0xPT09eS5pbmRleE9mKFwiLVwiKSl5PVwic3RyaW5nXCI9PT10eXBlb2YgcS5pcztlbHNlIHN3aXRjaCh5KXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnk9XG4hMTticmVhayBiO2RlZmF1bHQ6eT0hMH15P1lhLmhhc093blByb3BlcnR5KHopfHwobj16LG49dmEobikmJm51bGwhPWw/bisnPVwiJysoTihsKSsnXCInKTpcIlwiKTpuPXphKHosbCk7biYmKEcrPVwiIFwiK24pfX1lfHxJJiYoRys9JyBkYXRhLXJlYWN0cm9vdD1cIlwiJyk7dmFyIHo9RztnPVwiXCI7TWEuaGFzT3duUHJvcGVydHkoYyk/eis9XCIvPlwiOih6Kz1cIj5cIixnPVwiPC9cIithLnR5cGUrXCI+XCIpO2E6e2U9ZC5kYW5nZXJvdXNseVNldElubmVySFRNTDtpZihudWxsIT1lKXtpZihudWxsIT1lLl9faHRtbCl7ZT1lLl9faHRtbDticmVhayBhfX1lbHNlIGlmKGU9ZC5jaGlsZHJlbixcInN0cmluZ1wiPT09dHlwZW9mIGV8fFwibnVtYmVyXCI9PT10eXBlb2YgZSl7ZT1OKGUpO2JyZWFrIGF9ZT1udWxsfW51bGwhPWU/KGQ9W10sU2EuaGFzT3duUHJvcGVydHkoYykmJlwiXFxuXCI9PT1lLmNoYXJBdCgwKSYmKHorPVwiXFxuXCIpLHorPWUpOmQ9WihkLmNoaWxkcmVuKTthPWEudHlwZTtmPW51bGw9PWZ8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09XG5mP0xhKGEpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWYmJlwiZm9yZWlnbk9iamVjdFwiPT09YT9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjpmO3RoaXMuc3RhY2sucHVzaCh7ZG9tTmFtZXNwYWNlOmYsdHlwZTpjLGNoaWxkcmVuOmQsY2hpbGRJbmRleDowLGNvbnRleHQ6Yixmb290ZXI6Z30pO3RoaXMucHJldmlvdXNXYXNUZXh0Tm9kZT0hMTtyZXR1cm4gen07cmV0dXJuIGF9KCk7ZnVuY3Rpb24gYmIoYSxiKXthLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGIucHJvdG90eXBlKTthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hO2EuX19wcm90b19fPWJ9XG52YXIgY2I9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihiLGMpe3ZhciBkPWEuY2FsbCh0aGlzLHt9KXx8dGhpcztkLnBhcnRpYWxSZW5kZXJlcj1uZXcgYWIoYixjKTtyZXR1cm4gZH1iYihiLGEpO3ZhciBjPWIucHJvdG90eXBlO2MuX2Rlc3Ryb3k9ZnVuY3Rpb24oYSxiKXt0aGlzLnBhcnRpYWxSZW5kZXJlci5kZXN0cm95KCk7YihhKX07Yy5fcmVhZD1mdW5jdGlvbihhKXt0cnl7dGhpcy5wdXNoKHRoaXMucGFydGlhbFJlbmRlcmVyLnJlYWQoYSkpfWNhdGNoKGYpe3RoaXMuZGVzdHJveShmKX19O3JldHVybiBifShhYS5SZWFkYWJsZSksZGI9e3JlbmRlclRvU3RyaW5nOmZ1bmN0aW9uKGEpe2E9bmV3IGFiKGEsITEpO3RyeXtyZXR1cm4gYS5yZWFkKEluZmluaXR5KX1maW5hbGx5e2EuZGVzdHJveSgpfX0scmVuZGVyVG9TdGF0aWNNYXJrdXA6ZnVuY3Rpb24oYSl7YT1uZXcgYWIoYSwhMCk7dHJ5e3JldHVybiBhLnJlYWQoSW5maW5pdHkpfWZpbmFsbHl7YS5kZXN0cm95KCl9fSxyZW5kZXJUb05vZGVTdHJlYW06ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBjYihhLFxuITEpfSxyZW5kZXJUb1N0YXRpY05vZGVTdHJlYW06ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBjYihhLCEwKX0sdmVyc2lvbjpcIjE2LjEzLjFcIn07bW9kdWxlLmV4cG9ydHM9ZGIuZGVmYXVsdHx8ZGI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cnVuY2F0ZSA9IHJlcXVpcmUoXCIuL2xpYi90cnVuY2F0ZVwiKTtcbnZhciBnZXRMZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aC5iaW5kKEJ1ZmZlcik7XG5tb2R1bGUuZXhwb3J0cyA9IHRydW5jYXRlLmJpbmQobnVsbCwgZ2V0TGVuZ3RoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gaXNIaWdoU3Vycm9nYXRlKGNvZGVQb2ludCkge1xuICByZXR1cm4gY29kZVBvaW50ID49IDB4ZDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhkYmZmO1xufVxuXG5mdW5jdGlvbiBpc0xvd1N1cnJvZ2F0ZShjb2RlUG9pbnQpIHtcbiAgcmV0dXJuIGNvZGVQb2ludCA+PSAweGRjMDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZjtcbn1cblxuLy8gVHJ1bmNhdGUgc3RyaW5nIGJ5IHNpemUgaW4gYnl0ZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJ1bmNhdGUoZ2V0TGVuZ3RoLCBzdHJpbmcsIGJ5dGVMZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnB1dCBtdXN0IGJlIHN0cmluZ1wiKTtcbiAgfVxuXG4gIHZhciBjaGFyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgdmFyIGN1ckJ5dGVMZW5ndGggPSAwO1xuICB2YXIgY29kZVBvaW50O1xuICB2YXIgc2VnbWVudDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJMZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgIHNlZ21lbnQgPSBzdHJpbmdbaV07XG5cbiAgICBpZiAoaXNIaWdoU3Vycm9nYXRlKGNvZGVQb2ludCkgJiYgaXNMb3dTdXJyb2dhdGUoc3RyaW5nLmNoYXJDb2RlQXQoaSArIDEpKSkge1xuICAgICAgaSArPSAxO1xuICAgICAgc2VnbWVudCArPSBzdHJpbmdbaV07XG4gICAgfVxuXG4gICAgY3VyQnl0ZUxlbmd0aCArPSBnZXRMZW5ndGgoc2VnbWVudCk7XG5cbiAgICBpZiAoY3VyQnl0ZUxlbmd0aCA9PT0gYnl0ZUxlbmd0aCkge1xuICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCBpICsgMSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN1ckJ5dGVMZW5ndGggPiBieXRlTGVuZ3RoKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKDAsIGkgLSBzZWdtZW50Lmxlbmd0aCArIDEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG4iLCJyZXF1aXJlKCcuLycpLmluc3RhbGwoKTtcbiIsInZhciBTb3VyY2VNYXBDb25zdW1lciA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAnKS5Tb3VyY2VNYXBDb25zdW1lcjtcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG52YXIgZnM7XG50cnkge1xuICBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gIGlmICghZnMuZXhpc3RzU3luYyB8fCAhZnMucmVhZEZpbGVTeW5jKSB7XG4gICAgLy8gZnMgZG9lc24ndCBoYXZlIGFsbCBtZXRob2RzIHdlIG5lZWRcbiAgICBmcyA9IG51bGw7XG4gIH1cbn0gY2F0Y2ggKGVycikge1xuICAvKiBub3AgKi9cbn1cblxudmFyIGJ1ZmZlckZyb20gPSByZXF1aXJlKCdidWZmZXItZnJvbScpO1xuXG4vKipcbiAqIFJlcXVpcmVzIGEgbW9kdWxlIHdoaWNoIGlzIHByb3RlY3RlZCBhZ2FpbnN0IGJ1bmRsZXIgbWluaWZpY2F0aW9uLlxuICpcbiAqIEBwYXJhbSB7Tm9kZU1vZHVsZX0gbW9kXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdFxuICovXG5mdW5jdGlvbiBkeW5hbWljUmVxdWlyZShtb2QsIHJlcXVlc3QpIHtcbiAgcmV0dXJuIG1vZC5yZXF1aXJlKHJlcXVlc3QpO1xufVxuXG4vLyBPbmx5IGluc3RhbGwgb25jZSBpZiBjYWxsZWQgbXVsdGlwbGUgdGltZXNcbnZhciBlcnJvckZvcm1hdHRlckluc3RhbGxlZCA9IGZhbHNlO1xudmFyIHVuY2F1Z2h0U2hpbUluc3RhbGxlZCA9IGZhbHNlO1xuXG4vLyBJZiB0cnVlLCB0aGUgY2FjaGVzIGFyZSByZXNldCBiZWZvcmUgYSBzdGFjayB0cmFjZSBmb3JtYXR0aW5nIG9wZXJhdGlvblxudmFyIGVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucyA9IGZhbHNlO1xuXG4vLyBTdXBwb3J0cyB7YnJvd3Nlciwgbm9kZSwgYXV0b31cbnZhciBlbnZpcm9ubWVudCA9IFwiYXV0b1wiO1xuXG4vLyBNYXBzIGEgZmlsZSBwYXRoIHRvIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGZpbGUgY29udGVudHNcbnZhciBmaWxlQ29udGVudHNDYWNoZSA9IHt9O1xuXG4vLyBNYXBzIGEgZmlsZSBwYXRoIHRvIGEgc291cmNlIG1hcCBmb3IgdGhhdCBmaWxlXG52YXIgc291cmNlTWFwQ2FjaGUgPSB7fTtcblxuLy8gUmVnZXggZm9yIGRldGVjdGluZyBzb3VyY2UgbWFwc1xudmFyIHJlU291cmNlTWFwID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvblteLF0rYmFzZTY0LC87XG5cbi8vIFByaW9yaXR5IGxpc3Qgb2YgcmV0cmlldmUgaGFuZGxlcnNcbnZhciByZXRyaWV2ZUZpbGVIYW5kbGVycyA9IFtdO1xudmFyIHJldHJpZXZlTWFwSGFuZGxlcnMgPSBbXTtcblxuZnVuY3Rpb24gaXNJbkJyb3dzZXIoKSB7XG4gIGlmIChlbnZpcm9ubWVudCA9PT0gXCJicm93c2VyXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChlbnZpcm9ubWVudCA9PT0gXCJub2RlXCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKCh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgJiYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCA9PT0gJ2Z1bmN0aW9uJykgJiYgISh3aW5kb3cucmVxdWlyZSAmJiB3aW5kb3cubW9kdWxlICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09IFwicmVuZGVyZXJcIikpO1xufVxuXG5mdW5jdGlvbiBoYXNHbG9iYWxQcm9jZXNzRXZlbnRFbWl0dGVyKCkge1xuICByZXR1cm4gKCh0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcpICYmIChwcm9jZXNzICE9PSBudWxsKSAmJiAodHlwZW9mIHByb2Nlc3Mub24gPT09ICdmdW5jdGlvbicpKTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlckV4ZWMobGlzdCkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcmV0ID0gbGlzdFtpXShhcmcpO1xuICAgICAgaWYgKHJldCkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn1cblxudmFyIHJldHJpZXZlRmlsZSA9IGhhbmRsZXJFeGVjKHJldHJpZXZlRmlsZUhhbmRsZXJzKTtcblxucmV0cmlldmVGaWxlSGFuZGxlcnMucHVzaChmdW5jdGlvbihwYXRoKSB7XG4gIC8vIFRyaW0gdGhlIHBhdGggdG8gbWFrZSBzdXJlIHRoZXJlIGlzIG5vIGV4dHJhIHdoaXRlc3BhY2UuXG4gIHBhdGggPSBwYXRoLnRyaW0oKTtcbiAgaWYgKC9eZmlsZTovLnRlc3QocGF0aCkpIHtcbiAgICAvLyBleGlzdHNTeW5jL3JlYWRGaWxlU3luYyBjYW4ndCBoYW5kbGUgZmlsZSBwcm90b2NvbCwgYnV0IG9uY2Ugc3RyaXBwZWQsIGl0IHdvcmtzXG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvZmlsZTpcXC9cXC9cXC8oXFx3Oik/LywgZnVuY3Rpb24ocHJvdG9jb2wsIGRyaXZlKSB7XG4gICAgICByZXR1cm4gZHJpdmUgP1xuICAgICAgICAnJyA6IC8vIGZpbGU6Ly8vQzovZGlyL2ZpbGUgLT4gQzovZGlyL2ZpbGVcbiAgICAgICAgJy8nOyAvLyBmaWxlOi8vL3Jvb3QtZGlyL2ZpbGUgLT4gL3Jvb3QtZGlyL2ZpbGVcbiAgICB9KTtcbiAgfVxuICBpZiAocGF0aCBpbiBmaWxlQ29udGVudHNDYWNoZSkge1xuICAgIHJldHVybiBmaWxlQ29udGVudHNDYWNoZVtwYXRoXTtcbiAgfVxuXG4gIHZhciBjb250ZW50cyA9ICcnO1xuICB0cnkge1xuICAgIGlmICghZnMpIHtcbiAgICAgIC8vIFVzZSBTSkFYIGlmIHdlIGFyZSBpbiB0aGUgYnJvd3NlclxuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIHBhdGgsIC8qKiBhc3luYyAqLyBmYWxzZSk7XG4gICAgICB4aHIuc2VuZChudWxsKTtcbiAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgY29udGVudHMgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZnMuZXhpc3RzU3luYyhwYXRoKSkge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB1c2UgdGhlIGZpbGVzeXN0ZW1cbiAgICAgIGNvbnRlbnRzID0gZnMucmVhZEZpbGVTeW5jKHBhdGgsICd1dGY4Jyk7XG4gICAgfVxuICB9IGNhdGNoIChlcikge1xuICAgIC8qIGlnbm9yZSBhbnkgZXJyb3JzICovXG4gIH1cblxuICByZXR1cm4gZmlsZUNvbnRlbnRzQ2FjaGVbcGF0aF0gPSBjb250ZW50cztcbn0pO1xuXG4vLyBTdXBwb3J0IFVSTHMgcmVsYXRpdmUgdG8gYSBkaXJlY3RvcnksIGJ1dCBiZSBjYXJlZnVsIGFib3V0IGEgcHJvdG9jb2wgcHJlZml4XG4vLyBpbiBjYXNlIHdlIGFyZSBpbiB0aGUgYnJvd3NlciAoaS5lLiBkaXJlY3RvcmllcyBtYXkgc3RhcnQgd2l0aCBcImh0dHA6Ly9cIiBvciBcImZpbGU6Ly8vXCIpXG5mdW5jdGlvbiBzdXBwb3J0UmVsYXRpdmVVUkwoZmlsZSwgdXJsKSB7XG4gIGlmICghZmlsZSkgcmV0dXJuIHVybDtcbiAgdmFyIGRpciA9IHBhdGguZGlybmFtZShmaWxlKTtcbiAgdmFyIG1hdGNoID0gL15cXHcrOlxcL1xcL1teXFwvXSovLmV4ZWMoZGlyKTtcbiAgdmFyIHByb3RvY29sID0gbWF0Y2ggPyBtYXRjaFswXSA6ICcnO1xuICB2YXIgc3RhcnRQYXRoID0gZGlyLnNsaWNlKHByb3RvY29sLmxlbmd0aCk7XG4gIGlmIChwcm90b2NvbCAmJiAvXlxcL1xcd1xcOi8udGVzdChzdGFydFBhdGgpKSB7XG4gICAgLy8gaGFuZGxlIGZpbGU6Ly8vQzovIHBhdGhzXG4gICAgcHJvdG9jb2wgKz0gJy8nO1xuICAgIHJldHVybiBwcm90b2NvbCArIHBhdGgucmVzb2x2ZShkaXIuc2xpY2UocHJvdG9jb2wubGVuZ3RoKSwgdXJsKS5yZXBsYWNlKC9cXFxcL2csICcvJyk7XG4gIH1cbiAgcmV0dXJuIHByb3RvY29sICsgcGF0aC5yZXNvbHZlKGRpci5zbGljZShwcm90b2NvbC5sZW5ndGgpLCB1cmwpO1xufVxuXG5mdW5jdGlvbiByZXRyaWV2ZVNvdXJjZU1hcFVSTChzb3VyY2UpIHtcbiAgdmFyIGZpbGVEYXRhO1xuXG4gIGlmIChpc0luQnJvd3NlcigpKSB7XG4gICAgIHRyeSB7XG4gICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgIHhoci5vcGVuKCdHRVQnLCBzb3VyY2UsIGZhbHNlKTtcbiAgICAgICB4aHIuc2VuZChudWxsKTtcbiAgICAgICBmaWxlRGF0YSA9IHhoci5yZWFkeVN0YXRlID09PSA0ID8geGhyLnJlc3BvbnNlVGV4dCA6IG51bGw7XG5cbiAgICAgICAvLyBTdXBwb3J0IHByb3ZpZGluZyBhIHNvdXJjZU1hcHBpbmdVUkwgdmlhIHRoZSBTb3VyY2VNYXAgaGVhZGVyXG4gICAgICAgdmFyIHNvdXJjZU1hcEhlYWRlciA9IHhoci5nZXRSZXNwb25zZUhlYWRlcihcIlNvdXJjZU1hcFwiKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJYLVNvdXJjZU1hcFwiKTtcbiAgICAgICBpZiAoc291cmNlTWFwSGVhZGVyKSB7XG4gICAgICAgICByZXR1cm4gc291cmNlTWFwSGVhZGVyO1xuICAgICAgIH1cbiAgICAgfSBjYXRjaCAoZSkge1xuICAgICB9XG4gIH1cblxuICAvLyBHZXQgdGhlIFVSTCBvZiB0aGUgc291cmNlIG1hcFxuICBmaWxlRGF0YSA9IHJldHJpZXZlRmlsZShzb3VyY2UpO1xuICB2YXIgcmUgPSAvKD86XFwvXFwvW0AjXVtcXHNdKnNvdXJjZU1hcHBpbmdVUkw9KFteXFxzJ1wiXSspW1xcc10qJCl8KD86XFwvXFwqW0AjXVtcXHNdKnNvdXJjZU1hcHBpbmdVUkw9KFteXFxzKidcIl0rKVtcXHNdKig/OlxcKlxcLylbXFxzXSokKS9tZztcbiAgLy8gS2VlcCBleGVjdXRpbmcgdGhlIHNlYXJjaCB0byBmaW5kIHRoZSAqbGFzdCogc291cmNlTWFwcGluZ1VSTCB0byBhdm9pZFxuICAvLyBwaWNraW5nIHVwIHNvdXJjZU1hcHBpbmdVUkxzIGZyb20gY29tbWVudHMsIHN0cmluZ3MsIGV0Yy5cbiAgdmFyIGxhc3RNYXRjaCwgbWF0Y2g7XG4gIHdoaWxlIChtYXRjaCA9IHJlLmV4ZWMoZmlsZURhdGEpKSBsYXN0TWF0Y2ggPSBtYXRjaDtcbiAgaWYgKCFsYXN0TWF0Y2gpIHJldHVybiBudWxsO1xuICByZXR1cm4gbGFzdE1hdGNoWzFdO1xufTtcblxuLy8gQ2FuIGJlIG92ZXJyaWRkZW4gYnkgdGhlIHJldHJpZXZlU291cmNlTWFwIG9wdGlvbiB0byBpbnN0YWxsLiBUYWtlcyBhXG4vLyBnZW5lcmF0ZWQgc291cmNlIGZpbGVuYW1lOyByZXR1cm5zIGEge21hcCwgb3B0aW9uYWwgdXJsfSBvYmplY3QsIG9yIG51bGwgaWZcbi8vIHRoZXJlIGlzIG5vIHNvdXJjZSBtYXAuICBUaGUgbWFwIGZpZWxkIG1heSBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgdGhlIHBhcnNlZFxuLy8gSlNPTiBvYmplY3QgKGllLCBpdCBtdXN0IGJlIGEgdmFsaWQgYXJndW1lbnQgdG8gdGhlIFNvdXJjZU1hcENvbnN1bWVyXG4vLyBjb25zdHJ1Y3RvcikuXG52YXIgcmV0cmlldmVTb3VyY2VNYXAgPSBoYW5kbGVyRXhlYyhyZXRyaWV2ZU1hcEhhbmRsZXJzKTtcbnJldHJpZXZlTWFwSGFuZGxlcnMucHVzaChmdW5jdGlvbihzb3VyY2UpIHtcbiAgdmFyIHNvdXJjZU1hcHBpbmdVUkwgPSByZXRyaWV2ZVNvdXJjZU1hcFVSTChzb3VyY2UpO1xuICBpZiAoIXNvdXJjZU1hcHBpbmdVUkwpIHJldHVybiBudWxsO1xuXG4gIC8vIFJlYWQgdGhlIGNvbnRlbnRzIG9mIHRoZSBzb3VyY2UgbWFwXG4gIHZhciBzb3VyY2VNYXBEYXRhO1xuICBpZiAocmVTb3VyY2VNYXAudGVzdChzb3VyY2VNYXBwaW5nVVJMKSkge1xuICAgIC8vIFN1cHBvcnQgc291cmNlIG1hcCBVUkwgYXMgYSBkYXRhIHVybFxuICAgIHZhciByYXdEYXRhID0gc291cmNlTWFwcGluZ1VSTC5zbGljZShzb3VyY2VNYXBwaW5nVVJMLmluZGV4T2YoJywnKSArIDEpO1xuICAgIHNvdXJjZU1hcERhdGEgPSBidWZmZXJGcm9tKHJhd0RhdGEsIFwiYmFzZTY0XCIpLnRvU3RyaW5nKCk7XG4gICAgc291cmNlTWFwcGluZ1VSTCA9IHNvdXJjZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdXBwb3J0IHNvdXJjZSBtYXAgVVJMcyByZWxhdGl2ZSB0byB0aGUgc291cmNlIFVSTFxuICAgIHNvdXJjZU1hcHBpbmdVUkwgPSBzdXBwb3J0UmVsYXRpdmVVUkwoc291cmNlLCBzb3VyY2VNYXBwaW5nVVJMKTtcbiAgICBzb3VyY2VNYXBEYXRhID0gcmV0cmlldmVGaWxlKHNvdXJjZU1hcHBpbmdVUkwpO1xuICB9XG5cbiAgaWYgKCFzb3VyY2VNYXBEYXRhKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHVybDogc291cmNlTWFwcGluZ1VSTCxcbiAgICBtYXA6IHNvdXJjZU1hcERhdGFcbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBtYXBTb3VyY2VQb3NpdGlvbihwb3NpdGlvbikge1xuICB2YXIgc291cmNlTWFwID0gc291cmNlTWFwQ2FjaGVbcG9zaXRpb24uc291cmNlXTtcbiAgaWYgKCFzb3VyY2VNYXApIHtcbiAgICAvLyBDYWxsIHRoZSAob3ZlcnJpZGVhYmxlKSByZXRyaWV2ZVNvdXJjZU1hcCBmdW5jdGlvbiB0byBnZXQgdGhlIHNvdXJjZSBtYXAuXG4gICAgdmFyIHVybEFuZE1hcCA9IHJldHJpZXZlU291cmNlTWFwKHBvc2l0aW9uLnNvdXJjZSk7XG4gICAgaWYgKHVybEFuZE1hcCkge1xuICAgICAgc291cmNlTWFwID0gc291cmNlTWFwQ2FjaGVbcG9zaXRpb24uc291cmNlXSA9IHtcbiAgICAgICAgdXJsOiB1cmxBbmRNYXAudXJsLFxuICAgICAgICBtYXA6IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1cmxBbmRNYXAubWFwKVxuICAgICAgfTtcblxuICAgICAgLy8gTG9hZCBhbGwgc291cmNlcyBzdG9yZWQgaW5saW5lIHdpdGggdGhlIHNvdXJjZSBtYXAgaW50byB0aGUgZmlsZSBjYWNoZVxuICAgICAgLy8gdG8gcHJldGVuZCBsaWtlIHRoZXkgYXJlIGFscmVhZHkgbG9hZGVkLiBUaGV5IG1heSBub3QgZXhpc3Qgb24gZGlzay5cbiAgICAgIGlmIChzb3VyY2VNYXAubWFwLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICAgIHNvdXJjZU1hcC5tYXAuc291cmNlcy5mb3JFYWNoKGZ1bmN0aW9uKHNvdXJjZSwgaSkge1xuICAgICAgICAgIHZhciBjb250ZW50cyA9IHNvdXJjZU1hcC5tYXAuc291cmNlc0NvbnRlbnRbaV07XG4gICAgICAgICAgaWYgKGNvbnRlbnRzKSB7XG4gICAgICAgICAgICB2YXIgdXJsID0gc3VwcG9ydFJlbGF0aXZlVVJMKHNvdXJjZU1hcC51cmwsIHNvdXJjZSk7XG4gICAgICAgICAgICBmaWxlQ29udGVudHNDYWNoZVt1cmxdID0gY29udGVudHM7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlTWFwID0gc291cmNlTWFwQ2FjaGVbcG9zaXRpb24uc291cmNlXSA9IHtcbiAgICAgICAgdXJsOiBudWxsLFxuICAgICAgICBtYXA6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLy8gUmVzb2x2ZSB0aGUgc291cmNlIFVSTCByZWxhdGl2ZSB0byB0aGUgVVJMIG9mIHRoZSBzb3VyY2UgbWFwXG4gIGlmIChzb3VyY2VNYXAgJiYgc291cmNlTWFwLm1hcCAmJiB0eXBlb2Ygc291cmNlTWFwLm1hcC5vcmlnaW5hbFBvc2l0aW9uRm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG9yaWdpbmFsUG9zaXRpb24gPSBzb3VyY2VNYXAubWFwLm9yaWdpbmFsUG9zaXRpb25Gb3IocG9zaXRpb24pO1xuXG4gICAgLy8gT25seSByZXR1cm4gdGhlIG9yaWdpbmFsIHBvc2l0aW9uIGlmIGEgbWF0Y2hpbmcgbGluZSB3YXMgZm91bmQuIElmIG5vXG4gICAgLy8gbWF0Y2hpbmcgbGluZSBpcyBmb3VuZCB0aGVuIHdlIHJldHVybiBwb3NpdGlvbiBpbnN0ZWFkLCB3aGljaCB3aWxsIGNhdXNlXG4gICAgLy8gdGhlIHN0YWNrIHRyYWNlIHRvIHByaW50IHRoZSBwYXRoIGFuZCBsaW5lIGZvciB0aGUgY29tcGlsZWQgZmlsZS4gSXQgaXNcbiAgICAvLyBiZXR0ZXIgdG8gZ2l2ZSBhIHByZWNpc2UgbG9jYXRpb24gaW4gdGhlIGNvbXBpbGVkIGZpbGUgdGhhbiBhIHZhZ3VlXG4gICAgLy8gbG9jYXRpb24gaW4gdGhlIG9yaWdpbmFsIGZpbGUuXG4gICAgaWYgKG9yaWdpbmFsUG9zaXRpb24uc291cmNlICE9PSBudWxsKSB7XG4gICAgICBvcmlnaW5hbFBvc2l0aW9uLnNvdXJjZSA9IHN1cHBvcnRSZWxhdGl2ZVVSTChcbiAgICAgICAgc291cmNlTWFwLnVybCwgb3JpZ2luYWxQb3NpdGlvbi5zb3VyY2UpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsUG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBvc2l0aW9uO1xufVxuXG4vLyBQYXJzZXMgY29kZSBnZW5lcmF0ZWQgYnkgRm9ybWF0RXZhbE9yaWdpbigpLCBhIGZ1bmN0aW9uIGluc2lkZSBWODpcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avdjgvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvbWVzc2FnZXMuanNcbmZ1bmN0aW9uIG1hcEV2YWxPcmlnaW4ob3JpZ2luKSB7XG4gIC8vIE1vc3QgZXZhbCgpIGNhbGxzIGFyZSBpbiB0aGlzIGZvcm1hdFxuICB2YXIgbWF0Y2ggPSAvXmV2YWwgYXQgKFteKF0rKSBcXCgoLispOihcXGQrKTooXFxkKylcXCkkLy5leGVjKG9yaWdpbik7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciBwb3NpdGlvbiA9IG1hcFNvdXJjZVBvc2l0aW9uKHtcbiAgICAgIHNvdXJjZTogbWF0Y2hbMl0sXG4gICAgICBsaW5lOiArbWF0Y2hbM10sXG4gICAgICBjb2x1bW46IG1hdGNoWzRdIC0gMVxuICAgIH0pO1xuICAgIHJldHVybiAnZXZhbCBhdCAnICsgbWF0Y2hbMV0gKyAnICgnICsgcG9zaXRpb24uc291cmNlICsgJzonICtcbiAgICAgIHBvc2l0aW9uLmxpbmUgKyAnOicgKyAocG9zaXRpb24uY29sdW1uICsgMSkgKyAnKSc7XG4gIH1cblxuICAvLyBQYXJzZSBuZXN0ZWQgZXZhbCgpIGNhbGxzIHVzaW5nIHJlY3Vyc2lvblxuICBtYXRjaCA9IC9eZXZhbCBhdCAoW14oXSspIFxcKCguKylcXCkkLy5leGVjKG9yaWdpbik7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiAnZXZhbCBhdCAnICsgbWF0Y2hbMV0gKyAnICgnICsgbWFwRXZhbE9yaWdpbihtYXRjaFsyXSkgKyAnKSc7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2Ugc3RpbGwgcmV0dXJuIHVzZWZ1bCBpbmZvcm1hdGlvbiBpZiB3ZSBkaWRuJ3QgZmluZCBhbnl0aGluZ1xuICByZXR1cm4gb3JpZ2luO1xufVxuXG4vLyBUaGlzIGlzIGNvcGllZCBhbG1vc3QgdmVyYmF0aW0gZnJvbSB0aGUgVjggc291cmNlIGNvZGUgYXRcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avdjgvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvbWVzc2FnZXMuanMuIFRoZVxuLy8gaW1wbGVtZW50YXRpb24gb2Ygd3JhcENhbGxTaXRlKCkgdXNlZCB0byBqdXN0IGZvcndhcmQgdG8gdGhlIGFjdHVhbCBzb3VyY2Vcbi8vIGNvZGUgb2YgQ2FsbFNpdGUucHJvdG90eXBlLnRvU3RyaW5nIGJ1dCB1bmZvcnR1bmF0ZWx5IGEgbmV3IHJlbGVhc2Ugb2YgVjhcbi8vIGRpZCBzb21ldGhpbmcgdG8gdGhlIHByb3RvdHlwZSBjaGFpbiBhbmQgYnJva2UgdGhlIHNoaW0uIFRoZSBvbmx5IGZpeCBJXG4vLyBjb3VsZCBmaW5kIHdhcyBjb3B5L3Bhc3RlLlxuZnVuY3Rpb24gQ2FsbFNpdGVUb1N0cmluZygpIHtcbiAgdmFyIGZpbGVOYW1lO1xuICB2YXIgZmlsZUxvY2F0aW9uID0gXCJcIjtcbiAgaWYgKHRoaXMuaXNOYXRpdmUoKSkge1xuICAgIGZpbGVMb2NhdGlvbiA9IFwibmF0aXZlXCI7XG4gIH0gZWxzZSB7XG4gICAgZmlsZU5hbWUgPSB0aGlzLmdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCgpO1xuICAgIGlmICghZmlsZU5hbWUgJiYgdGhpcy5pc0V2YWwoKSkge1xuICAgICAgZmlsZUxvY2F0aW9uID0gdGhpcy5nZXRFdmFsT3JpZ2luKCk7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gXCIsIFwiOyAgLy8gRXhwZWN0aW5nIHNvdXJjZSBwb3NpdGlvbiB0byBmb2xsb3cuXG4gICAgfVxuXG4gICAgaWYgKGZpbGVOYW1lKSB7XG4gICAgICBmaWxlTG9jYXRpb24gKz0gZmlsZU5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNvdXJjZSBjb2RlIGRvZXMgbm90IG9yaWdpbmF0ZSBmcm9tIGEgZmlsZSBhbmQgaXMgbm90IG5hdGl2ZSwgYnV0IHdlXG4gICAgICAvLyBjYW4gc3RpbGwgZ2V0IHRoZSBzb3VyY2UgcG9zaXRpb24gaW5zaWRlIHRoZSBzb3VyY2Ugc3RyaW5nLCBlLmcuIGluXG4gICAgICAvLyBhbiBldmFsIHN0cmluZy5cbiAgICAgIGZpbGVMb2NhdGlvbiArPSBcIjxhbm9ueW1vdXM+XCI7XG4gICAgfVxuICAgIHZhciBsaW5lTnVtYmVyID0gdGhpcy5nZXRMaW5lTnVtYmVyKCk7XG4gICAgaWYgKGxpbmVOdW1iZXIgIT0gbnVsbCkge1xuICAgICAgZmlsZUxvY2F0aW9uICs9IFwiOlwiICsgbGluZU51bWJlcjtcbiAgICAgIHZhciBjb2x1bW5OdW1iZXIgPSB0aGlzLmdldENvbHVtbk51bWJlcigpO1xuICAgICAgaWYgKGNvbHVtbk51bWJlcikge1xuICAgICAgICBmaWxlTG9jYXRpb24gKz0gXCI6XCIgKyBjb2x1bW5OdW1iZXI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpbmUgPSBcIlwiO1xuICB2YXIgZnVuY3Rpb25OYW1lID0gdGhpcy5nZXRGdW5jdGlvbk5hbWUoKTtcbiAgdmFyIGFkZFN1ZmZpeCA9IHRydWU7XG4gIHZhciBpc0NvbnN0cnVjdG9yID0gdGhpcy5pc0NvbnN0cnVjdG9yKCk7XG4gIHZhciBpc01ldGhvZENhbGwgPSAhKHRoaXMuaXNUb3BsZXZlbCgpIHx8IGlzQ29uc3RydWN0b3IpO1xuICBpZiAoaXNNZXRob2RDYWxsKSB7XG4gICAgdmFyIHR5cGVOYW1lID0gdGhpcy5nZXRUeXBlTmFtZSgpO1xuICAgIC8vIEZpeGVzIHNoaW0gdG8gYmUgYmFja3dhcmQgY29tcGF0YWJsZSB3aXRoIE5vZGUgdjAgdG8gdjRcbiAgICBpZiAodHlwZU5hbWUgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgIHR5cGVOYW1lID0gXCJudWxsXCI7XG4gICAgfVxuICAgIHZhciBtZXRob2ROYW1lID0gdGhpcy5nZXRNZXRob2ROYW1lKCk7XG4gICAgaWYgKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgaWYgKHR5cGVOYW1lICYmIGZ1bmN0aW9uTmFtZS5pbmRleE9mKHR5cGVOYW1lKSAhPSAwKSB7XG4gICAgICAgIGxpbmUgKz0gdHlwZU5hbWUgKyBcIi5cIjtcbiAgICAgIH1cbiAgICAgIGxpbmUgKz0gZnVuY3Rpb25OYW1lO1xuICAgICAgaWYgKG1ldGhvZE5hbWUgJiYgZnVuY3Rpb25OYW1lLmluZGV4T2YoXCIuXCIgKyBtZXRob2ROYW1lKSAhPSBmdW5jdGlvbk5hbWUubGVuZ3RoIC0gbWV0aG9kTmFtZS5sZW5ndGggLSAxKSB7XG4gICAgICAgIGxpbmUgKz0gXCIgW2FzIFwiICsgbWV0aG9kTmFtZSArIFwiXVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lICs9IHR5cGVOYW1lICsgXCIuXCIgKyAobWV0aG9kTmFtZSB8fCBcIjxhbm9ueW1vdXM+XCIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0NvbnN0cnVjdG9yKSB7XG4gICAgbGluZSArPSBcIm5ldyBcIiArIChmdW5jdGlvbk5hbWUgfHwgXCI8YW5vbnltb3VzPlwiKTtcbiAgfSBlbHNlIGlmIChmdW5jdGlvbk5hbWUpIHtcbiAgICBsaW5lICs9IGZ1bmN0aW9uTmFtZTtcbiAgfSBlbHNlIHtcbiAgICBsaW5lICs9IGZpbGVMb2NhdGlvbjtcbiAgICBhZGRTdWZmaXggPSBmYWxzZTtcbiAgfVxuICBpZiAoYWRkU3VmZml4KSB7XG4gICAgbGluZSArPSBcIiAoXCIgKyBmaWxlTG9jYXRpb24gKyBcIilcIjtcbiAgfVxuICByZXR1cm4gbGluZTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDYWxsU2l0ZShmcmFtZSkge1xuICB2YXIgb2JqZWN0ID0ge307XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9iamVjdC5nZXRQcm90b3R5cGVPZihmcmFtZSkpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIG9iamVjdFtuYW1lXSA9IC9eKD86aXN8Z2V0KS8udGVzdChuYW1lKSA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gZnJhbWVbbmFtZV0uY2FsbChmcmFtZSk7IH0gOiBmcmFtZVtuYW1lXTtcbiAgfSk7XG4gIG9iamVjdC50b1N0cmluZyA9IENhbGxTaXRlVG9TdHJpbmc7XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIHdyYXBDYWxsU2l0ZShmcmFtZSwgc3RhdGUpIHtcbiAgLy8gcHJvdmlkZXMgaW50ZXJmYWNlIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGF0ZSA9IHsgbmV4dFBvc2l0aW9uOiBudWxsLCBjdXJQb3NpdGlvbjogbnVsbCB9XG4gIH1cbiAgaWYoZnJhbWUuaXNOYXRpdmUoKSkge1xuICAgIHN0YXRlLmN1clBvc2l0aW9uID0gbnVsbDtcbiAgICByZXR1cm4gZnJhbWU7XG4gIH1cblxuICAvLyBNb3N0IGNhbGwgc2l0ZXMgd2lsbCByZXR1cm4gdGhlIHNvdXJjZSBmaWxlIGZyb20gZ2V0RmlsZU5hbWUoKSwgYnV0IGNvZGVcbiAgLy8gcGFzc2VkIHRvIGV2YWwoKSBlbmRpbmcgaW4gXCIvLyMgc291cmNlVVJMPS4uLlwiIHdpbGwgcmV0dXJuIHRoZSBzb3VyY2UgZmlsZVxuICAvLyBmcm9tIGdldFNjcmlwdE5hbWVPclNvdXJjZVVSTCgpIGluc3RlYWRcbiAgdmFyIHNvdXJjZSA9IGZyYW1lLmdldEZpbGVOYW1lKCkgfHwgZnJhbWUuZ2V0U2NyaXB0TmFtZU9yU291cmNlVVJMKCk7XG4gIGlmIChzb3VyY2UpIHtcbiAgICB2YXIgbGluZSA9IGZyYW1lLmdldExpbmVOdW1iZXIoKTtcbiAgICB2YXIgY29sdW1uID0gZnJhbWUuZ2V0Q29sdW1uTnVtYmVyKCkgLSAxO1xuXG4gICAgLy8gRml4IHBvc2l0aW9uIGluIE5vZGUgd2hlcmUgc29tZSAoaW50ZXJuYWwpIGNvZGUgaXMgcHJlcGVuZGVkLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXZhbncvbm9kZS1zb3VyY2UtbWFwLXN1cHBvcnQvaXNzdWVzLzM2XG4gICAgLy8gSGVhZGVyIHJlbW92ZWQgaW4gbm9kZSBhdCBeMTAuMTYgfHwgPj0xMS4xMS4wXG4gICAgLy8gdjExIGlzIG5vdCBhbiBMVFMgY2FuZGlkYXRlLCB3ZSBjYW4ganVzdCB0ZXN0IHRoZSBvbmUgdmVyc2lvbiB3aXRoIGl0LlxuICAgIC8vIFRlc3Qgbm9kZSB2ZXJzaW9ucyBmb3I6IDEwLjE2LTE5LCAxMC4yMCssIDEyLTE5LCAyMC05OSwgMTAwKywgb3IgMTEuMTFcbiAgICB2YXIgbm9IZWFkZXIgPSAvXnYoMTBcXC4xWzYtOV18MTBcXC5bMi05XVswLTldfDEwXFwuWzAtOV17Myx9fDFbMi05XVxcZCp8WzItOV1cXGR8XFxkezMsfXwxMVxcLjExKS87XG4gICAgdmFyIGhlYWRlckxlbmd0aCA9IG5vSGVhZGVyLnRlc3QocHJvY2Vzcy52ZXJzaW9uKSA/IDAgOiA2MjtcbiAgICBpZiAobGluZSA9PT0gMSAmJiBjb2x1bW4gPiBoZWFkZXJMZW5ndGggJiYgIWlzSW5Ccm93c2VyKCkgJiYgIWZyYW1lLmlzRXZhbCgpKSB7XG4gICAgICBjb2x1bW4gLT0gaGVhZGVyTGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBwb3NpdGlvbiA9IG1hcFNvdXJjZVBvc2l0aW9uKHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgbGluZTogbGluZSxcbiAgICAgIGNvbHVtbjogY29sdW1uXG4gICAgfSk7XG4gICAgc3RhdGUuY3VyUG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICBmcmFtZSA9IGNsb25lQ2FsbFNpdGUoZnJhbWUpO1xuICAgIHZhciBvcmlnaW5hbEZ1bmN0aW9uTmFtZSA9IGZyYW1lLmdldEZ1bmN0aW9uTmFtZTtcbiAgICBmcmFtZS5nZXRGdW5jdGlvbk5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzdGF0ZS5uZXh0UG9zaXRpb24gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxGdW5jdGlvbk5hbWUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZS5uZXh0UG9zaXRpb24ubmFtZSB8fCBvcmlnaW5hbEZ1bmN0aW9uTmFtZSgpO1xuICAgIH07XG4gICAgZnJhbWUuZ2V0RmlsZU5hbWUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHBvc2l0aW9uLnNvdXJjZTsgfTtcbiAgICBmcmFtZS5nZXRMaW5lTnVtYmVyID0gZnVuY3Rpb24oKSB7IHJldHVybiBwb3NpdGlvbi5saW5lOyB9O1xuICAgIGZyYW1lLmdldENvbHVtbk51bWJlciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9zaXRpb24uY29sdW1uICsgMTsgfTtcbiAgICBmcmFtZS5nZXRTY3JpcHROYW1lT3JTb3VyY2VVUkwgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHBvc2l0aW9uLnNvdXJjZTsgfTtcbiAgICByZXR1cm4gZnJhbWU7XG4gIH1cblxuICAvLyBDb2RlIGNhbGxlZCB1c2luZyBldmFsKCkgbmVlZHMgc3BlY2lhbCBoYW5kbGluZ1xuICB2YXIgb3JpZ2luID0gZnJhbWUuaXNFdmFsKCkgJiYgZnJhbWUuZ2V0RXZhbE9yaWdpbigpO1xuICBpZiAob3JpZ2luKSB7XG4gICAgb3JpZ2luID0gbWFwRXZhbE9yaWdpbihvcmlnaW4pO1xuICAgIGZyYW1lID0gY2xvbmVDYWxsU2l0ZShmcmFtZSk7XG4gICAgZnJhbWUuZ2V0RXZhbE9yaWdpbiA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gb3JpZ2luOyB9O1xuICAgIHJldHVybiBmcmFtZTtcbiAgfVxuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gd2Ugd2VyZSB1bmFibGUgdG8gY2hhbmdlIHRoZSBzb3VyY2UgcG9zaXRpb25cbiAgcmV0dXJuIGZyYW1lO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIHBhcnQgb2YgdGhlIFY4IHN0YWNrIHRyYWNlIEFQSSwgZm9yIG1vcmUgaW5mbyBzZWU6XG4vLyBodHRwczovL3Y4LmRldi9kb2NzL3N0YWNrLXRyYWNlLWFwaVxuZnVuY3Rpb24gcHJlcGFyZVN0YWNrVHJhY2UoZXJyb3IsIHN0YWNrKSB7XG4gIGlmIChlbXB0eUNhY2hlQmV0d2Vlbk9wZXJhdGlvbnMpIHtcbiAgICBmaWxlQ29udGVudHNDYWNoZSA9IHt9O1xuICAgIHNvdXJjZU1hcENhY2hlID0ge307XG4gIH1cblxuICB2YXIgbmFtZSA9IGVycm9yLm5hbWUgfHwgJ0Vycm9yJztcbiAgdmFyIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlIHx8ICcnO1xuICB2YXIgZXJyb3JTdHJpbmcgPSBuYW1lICsgXCI6IFwiICsgbWVzc2FnZTtcblxuICB2YXIgc3RhdGUgPSB7IG5leHRQb3NpdGlvbjogbnVsbCwgY3VyUG9zaXRpb246IG51bGwgfTtcbiAgdmFyIHByb2Nlc3NlZFN0YWNrID0gW107XG4gIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHByb2Nlc3NlZFN0YWNrLnB1c2goJ1xcbiAgICBhdCAnICsgd3JhcENhbGxTaXRlKHN0YWNrW2ldLCBzdGF0ZSkpO1xuICAgIHN0YXRlLm5leHRQb3NpdGlvbiA9IHN0YXRlLmN1clBvc2l0aW9uO1xuICB9XG4gIHN0YXRlLmN1clBvc2l0aW9uID0gc3RhdGUubmV4dFBvc2l0aW9uID0gbnVsbDtcbiAgcmV0dXJuIGVycm9yU3RyaW5nICsgcHJvY2Vzc2VkU3RhY2sucmV2ZXJzZSgpLmpvaW4oJycpO1xufVxuXG4vLyBHZW5lcmF0ZSBwb3NpdGlvbiBhbmQgc25pcHBldCBvZiBvcmlnaW5hbCBzb3VyY2Ugd2l0aCBwb2ludGVyXG5mdW5jdGlvbiBnZXRFcnJvclNvdXJjZShlcnJvcikge1xuICB2YXIgbWF0Y2ggPSAvXFxuICAgIGF0IFteKF0rIFxcKCguKik6KFxcZCspOihcXGQrKVxcKS8uZXhlYyhlcnJvci5zdGFjayk7XG4gIGlmIChtYXRjaCkge1xuICAgIHZhciBzb3VyY2UgPSBtYXRjaFsxXTtcbiAgICB2YXIgbGluZSA9ICttYXRjaFsyXTtcbiAgICB2YXIgY29sdW1uID0gK21hdGNoWzNdO1xuXG4gICAgLy8gU3VwcG9ydCB0aGUgaW5saW5lIHNvdXJjZUNvbnRlbnRzIGluc2lkZSB0aGUgc291cmNlIG1hcFxuICAgIHZhciBjb250ZW50cyA9IGZpbGVDb250ZW50c0NhY2hlW3NvdXJjZV07XG5cbiAgICAvLyBTdXBwb3J0IGZpbGVzIG9uIGRpc2tcbiAgICBpZiAoIWNvbnRlbnRzICYmIGZzICYmIGZzLmV4aXN0c1N5bmMoc291cmNlKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMoc291cmNlLCAndXRmOCcpO1xuICAgICAgfSBjYXRjaCAoZXIpIHtcbiAgICAgICAgY29udGVudHMgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGb3JtYXQgdGhlIGxpbmUgZnJvbSB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUgbGlrZSBub2RlIGRvZXNcbiAgICBpZiAoY29udGVudHMpIHtcbiAgICAgIHZhciBjb2RlID0gY29udGVudHMuc3BsaXQoLyg/OlxcclxcbnxcXHJ8XFxuKS8pW2xpbmUgLSAxXTtcbiAgICAgIGlmIChjb2RlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UgKyAnOicgKyBsaW5lICsgJ1xcbicgKyBjb2RlICsgJ1xcbicgK1xuICAgICAgICAgIG5ldyBBcnJheShjb2x1bW4pLmpvaW4oJyAnKSArICdeJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHByaW50RXJyb3JBbmRFeGl0IChlcnJvcikge1xuICB2YXIgc291cmNlID0gZ2V0RXJyb3JTb3VyY2UoZXJyb3IpO1xuXG4gIC8vIEVuc3VyZSBlcnJvciBpcyBwcmludGVkIHN5bmNocm9ub3VzbHkgYW5kIG5vdCB0cnVuY2F0ZWRcbiAgaWYgKHByb2Nlc3Muc3RkZXJyLl9oYW5kbGUgJiYgcHJvY2Vzcy5zdGRlcnIuX2hhbmRsZS5zZXRCbG9ja2luZykge1xuICAgIHByb2Nlc3Muc3RkZXJyLl9oYW5kbGUuc2V0QmxvY2tpbmcodHJ1ZSk7XG4gIH1cblxuICBpZiAoc291cmNlKSB7XG4gICAgY29uc29sZS5lcnJvcigpO1xuICAgIGNvbnNvbGUuZXJyb3Ioc291cmNlKTtcbiAgfVxuXG4gIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2spO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59XG5cbmZ1bmN0aW9uIHNoaW1FbWl0VW5jYXVnaHRFeGNlcHRpb24gKCkge1xuICB2YXIgb3JpZ0VtaXQgPSBwcm9jZXNzLmVtaXQ7XG5cbiAgcHJvY2Vzcy5lbWl0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ3VuY2F1Z2h0RXhjZXB0aW9uJykge1xuICAgICAgdmFyIGhhc1N0YWNrID0gKGFyZ3VtZW50c1sxXSAmJiBhcmd1bWVudHNbMV0uc3RhY2spO1xuICAgICAgdmFyIGhhc0xpc3RlbmVycyA9ICh0aGlzLmxpc3RlbmVycyh0eXBlKS5sZW5ndGggPiAwKTtcblxuICAgICAgaWYgKGhhc1N0YWNrICYmICFoYXNMaXN0ZW5lcnMpIHtcbiAgICAgICAgcmV0dXJuIHByaW50RXJyb3JBbmRFeGl0KGFyZ3VtZW50c1sxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9yaWdFbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbnZhciBvcmlnaW5hbFJldHJpZXZlRmlsZUhhbmRsZXJzID0gcmV0cmlldmVGaWxlSGFuZGxlcnMuc2xpY2UoMCk7XG52YXIgb3JpZ2luYWxSZXRyaWV2ZU1hcEhhbmRsZXJzID0gcmV0cmlldmVNYXBIYW5kbGVycy5zbGljZSgwKTtcblxuZXhwb3J0cy53cmFwQ2FsbFNpdGUgPSB3cmFwQ2FsbFNpdGU7XG5leHBvcnRzLmdldEVycm9yU291cmNlID0gZ2V0RXJyb3JTb3VyY2U7XG5leHBvcnRzLm1hcFNvdXJjZVBvc2l0aW9uID0gbWFwU291cmNlUG9zaXRpb247XG5leHBvcnRzLnJldHJpZXZlU291cmNlTWFwID0gcmV0cmlldmVTb3VyY2VNYXA7XG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgaWYgKG9wdGlvbnMuZW52aXJvbm1lbnQpIHtcbiAgICBlbnZpcm9ubWVudCA9IG9wdGlvbnMuZW52aXJvbm1lbnQ7XG4gICAgaWYgKFtcIm5vZGVcIiwgXCJicm93c2VyXCIsIFwiYXV0b1wiXS5pbmRleE9mKGVudmlyb25tZW50KSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImVudmlyb25tZW50IFwiICsgZW52aXJvbm1lbnQgKyBcIiB3YXMgdW5rbm93bi4gQXZhaWxhYmxlIG9wdGlvbnMgYXJlIHthdXRvLCBicm93c2VyLCBub2RlfVwiKVxuICAgIH1cbiAgfVxuXG4gIC8vIEFsbG93IHNvdXJjZXMgdG8gYmUgZm91bmQgYnkgbWV0aG9kcyBvdGhlciB0aGFuIHJlYWRpbmcgdGhlIGZpbGVzXG4gIC8vIGRpcmVjdGx5IGZyb20gZGlzay5cbiAgaWYgKG9wdGlvbnMucmV0cmlldmVGaWxlKSB7XG4gICAgaWYgKG9wdGlvbnMub3ZlcnJpZGVSZXRyaWV2ZUZpbGUpIHtcbiAgICAgIHJldHJpZXZlRmlsZUhhbmRsZXJzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0cmlldmVGaWxlSGFuZGxlcnMudW5zaGlmdChvcHRpb25zLnJldHJpZXZlRmlsZSk7XG4gIH1cblxuICAvLyBBbGxvdyBzb3VyY2UgbWFwcyB0byBiZSBmb3VuZCBieSBtZXRob2RzIG90aGVyIHRoYW4gcmVhZGluZyB0aGUgZmlsZXNcbiAgLy8gZGlyZWN0bHkgZnJvbSBkaXNrLlxuICBpZiAob3B0aW9ucy5yZXRyaWV2ZVNvdXJjZU1hcCkge1xuICAgIGlmIChvcHRpb25zLm92ZXJyaWRlUmV0cmlldmVTb3VyY2VNYXApIHtcbiAgICAgIHJldHJpZXZlTWFwSGFuZGxlcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXRyaWV2ZU1hcEhhbmRsZXJzLnVuc2hpZnQob3B0aW9ucy5yZXRyaWV2ZVNvdXJjZU1hcCk7XG4gIH1cblxuICAvLyBTdXBwb3J0IHJ1bnRpbWUgdHJhbnNwaWxlcnMgdGhhdCBpbmNsdWRlIGlubGluZSBzb3VyY2UgbWFwc1xuICBpZiAob3B0aW9ucy5ob29rUmVxdWlyZSAmJiAhaXNJbkJyb3dzZXIoKSkge1xuICAgIC8vIFVzZSBkeW5hbWljUmVxdWlyZSB0byBhdm9pZCBpbmNsdWRpbmcgaW4gYnJvd3NlciBidW5kbGVzXG4gICAgdmFyIE1vZHVsZSA9IGR5bmFtaWNSZXF1aXJlKG1vZHVsZSwgJ21vZHVsZScpO1xuICAgIHZhciAkY29tcGlsZSA9IE1vZHVsZS5wcm90b3R5cGUuX2NvbXBpbGU7XG5cbiAgICBpZiAoISRjb21waWxlLl9fc291cmNlTWFwU3VwcG9ydCkge1xuICAgICAgTW9kdWxlLnByb3RvdHlwZS5fY29tcGlsZSA9IGZ1bmN0aW9uKGNvbnRlbnQsIGZpbGVuYW1lKSB7XG4gICAgICAgIGZpbGVDb250ZW50c0NhY2hlW2ZpbGVuYW1lXSA9IGNvbnRlbnQ7XG4gICAgICAgIHNvdXJjZU1hcENhY2hlW2ZpbGVuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuICRjb21waWxlLmNhbGwodGhpcywgY29udGVudCwgZmlsZW5hbWUpO1xuICAgICAgfTtcblxuICAgICAgTW9kdWxlLnByb3RvdHlwZS5fY29tcGlsZS5fX3NvdXJjZU1hcFN1cHBvcnQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbmZpZ3VyZSBvcHRpb25zXG4gIGlmICghZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zKSB7XG4gICAgZW1wdHlDYWNoZUJldHdlZW5PcGVyYXRpb25zID0gJ2VtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucycgaW4gb3B0aW9ucyA/XG4gICAgICBvcHRpb25zLmVtcHR5Q2FjaGVCZXR3ZWVuT3BlcmF0aW9ucyA6IGZhbHNlO1xuICB9XG5cbiAgLy8gSW5zdGFsbCB0aGUgZXJyb3IgcmVmb3JtYXR0ZXJcbiAgaWYgKCFlcnJvckZvcm1hdHRlckluc3RhbGxlZCkge1xuICAgIGVycm9yRm9ybWF0dGVySW5zdGFsbGVkID0gdHJ1ZTtcbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXBhcmVTdGFja1RyYWNlO1xuICB9XG5cbiAgaWYgKCF1bmNhdWdodFNoaW1JbnN0YWxsZWQpIHtcbiAgICB2YXIgaW5zdGFsbEhhbmRsZXIgPSAnaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zJyBpbiBvcHRpb25zID9cbiAgICAgIG9wdGlvbnMuaGFuZGxlVW5jYXVnaHRFeGNlcHRpb25zIDogdHJ1ZTtcblxuICAgIC8vIERvIG5vdCBvdmVycmlkZSAndW5jYXVnaHRFeGNlcHRpb24nIHdpdGggb3VyIG93biBoYW5kbGVyIGluIE5vZGUuanNcbiAgICAvLyBXb3JrZXIgdGhyZWFkcy4gV29ya2VycyBwYXNzIHRoZSBlcnJvciB0byB0aGUgbWFpbiB0aHJlYWQgYXMgYW4gZXZlbnQsXG4gICAgLy8gcmF0aGVyIHRoYW4gcHJpbnRpbmcgc29tZXRoaW5nIHRvIHN0ZGVyciBhbmQgZXhpdGluZy5cbiAgICB0cnkge1xuICAgICAgLy8gV2UgbmVlZCB0byB1c2UgYGR5bmFtaWNSZXF1aXJlYCBiZWNhdXNlIGByZXF1aXJlYCBvbiBpdCdzIG93biB3aWxsIGJlIG9wdGltaXplZCBieSBXZWJQYWNrL0Jyb3dzZXJpZnkuXG4gICAgICB2YXIgd29ya2VyX3RocmVhZHMgPSBkeW5hbWljUmVxdWlyZShtb2R1bGUsICd3b3JrZXJfdGhyZWFkcycpO1xuICAgICAgaWYgKHdvcmtlcl90aHJlYWRzLmlzTWFpblRocmVhZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaW5zdGFsbEhhbmRsZXIgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoKGUpIHt9XG5cbiAgICAvLyBQcm92aWRlIHRoZSBvcHRpb24gdG8gbm90IGluc3RhbGwgdGhlIHVuY2F1Z2h0IGV4Y2VwdGlvbiBoYW5kbGVyLiBUaGlzIGlzXG4gICAgLy8gdG8gc3VwcG9ydCBvdGhlciB1bmNhdWdodCBleGNlcHRpb24gaGFuZGxlcnMgKGluIHRlc3QgZnJhbWV3b3JrcywgZm9yXG4gICAgLy8gZXhhbXBsZSkuIElmIHRoaXMgaGFuZGxlciBpcyBub3QgaW5zdGFsbGVkIGFuZCB0aGVyZSBhcmUgbm8gb3RoZXIgdW5jYXVnaHRcbiAgICAvLyBleGNlcHRpb24gaGFuZGxlcnMsIHVuY2F1Z2h0IGV4Y2VwdGlvbnMgd2lsbCBiZSBjYXVnaHQgYnkgbm9kZSdzIGJ1aWx0LWluXG4gICAgLy8gZXhjZXB0aW9uIGhhbmRsZXIgYW5kIHRoZSBwcm9jZXNzIHdpbGwgc3RpbGwgYmUgdGVybWluYXRlZC4gSG93ZXZlciwgdGhlXG4gICAgLy8gZ2VuZXJhdGVkIEphdmFTY3JpcHQgY29kZSB3aWxsIGJlIHNob3duIGFib3ZlIHRoZSBzdGFjayB0cmFjZSBpbnN0ZWFkIG9mXG4gICAgLy8gdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlLlxuICAgIGlmIChpbnN0YWxsSGFuZGxlciAmJiBoYXNHbG9iYWxQcm9jZXNzRXZlbnRFbWl0dGVyKCkpIHtcbiAgICAgIHVuY2F1Z2h0U2hpbUluc3RhbGxlZCA9IHRydWU7XG4gICAgICBzaGltRW1pdFVuY2F1Z2h0RXhjZXB0aW9uKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzLnJlc2V0UmV0cmlldmVIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICByZXRyaWV2ZUZpbGVIYW5kbGVycy5sZW5ndGggPSAwO1xuICByZXRyaWV2ZU1hcEhhbmRsZXJzLmxlbmd0aCA9IDA7XG5cbiAgcmV0cmlldmVGaWxlSGFuZGxlcnMgPSBvcmlnaW5hbFJldHJpZXZlRmlsZUhhbmRsZXJzLnNsaWNlKDApO1xuICByZXRyaWV2ZU1hcEhhbmRsZXJzID0gb3JpZ2luYWxSZXRyaWV2ZU1hcEhhbmRsZXJzLnNsaWNlKDApO1xuXG4gIHJldHJpZXZlU291cmNlTWFwID0gaGFuZGxlckV4ZWMocmV0cmlldmVNYXBIYW5kbGVycyk7XG4gIHJldHJpZXZlRmlsZSA9IGhhbmRsZXJFeGVjKHJldHJpZXZlRmlsZUhhbmRsZXJzKTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgaW50VG9DaGFyTWFwID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nLnNwbGl0KCcnKTtcblxuLyoqXG4gKiBFbmNvZGUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2Ugb2YgMCB0byA2MyB0byBhIHNpbmdsZSBiYXNlIDY0IGRpZ2l0LlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgaWYgKDAgPD0gbnVtYmVyICYmIG51bWJlciA8IGludFRvQ2hhck1hcC5sZW5ndGgpIHtcbiAgICByZXR1cm4gaW50VG9DaGFyTWFwW251bWJlcl07XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk11c3QgYmUgYmV0d2VlbiAwIGFuZCA2MzogXCIgKyBudW1iZXIpO1xufTtcblxuLyoqXG4gKiBEZWNvZGUgYSBzaW5nbGUgYmFzZSA2NCBjaGFyYWN0ZXIgY29kZSBkaWdpdCB0byBhbiBpbnRlZ2VyLiBSZXR1cm5zIC0xIG9uXG4gKiBmYWlsdXJlLlxuICovXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uIChjaGFyQ29kZSkge1xuICB2YXIgYmlnQSA9IDY1OyAgICAgLy8gJ0EnXG4gIHZhciBiaWdaID0gOTA7ICAgICAvLyAnWidcblxuICB2YXIgbGl0dGxlQSA9IDk3OyAgLy8gJ2EnXG4gIHZhciBsaXR0bGVaID0gMTIyOyAvLyAneidcblxuICB2YXIgemVybyA9IDQ4OyAgICAgLy8gJzAnXG4gIHZhciBuaW5lID0gNTc7ICAgICAvLyAnOSdcblxuICB2YXIgcGx1cyA9IDQzOyAgICAgLy8gJysnXG4gIHZhciBzbGFzaCA9IDQ3OyAgICAvLyAnLydcblxuICB2YXIgbGl0dGxlT2Zmc2V0ID0gMjY7XG4gIHZhciBudW1iZXJPZmZzZXQgPSA1MjtcblxuICAvLyAwIC0gMjU6IEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXG4gIGlmIChiaWdBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGJpZ1opIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gYmlnQSk7XG4gIH1cblxuICAvLyAyNiAtIDUxOiBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elxuICBpZiAobGl0dGxlQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBsaXR0bGVaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGxpdHRsZUEgKyBsaXR0bGVPZmZzZXQpO1xuICB9XG5cbiAgLy8gNTIgLSA2MTogMDEyMzQ1Njc4OVxuICBpZiAoemVybyA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBuaW5lKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIHplcm8gKyBudW1iZXJPZmZzZXQpO1xuICB9XG5cbiAgLy8gNjI6ICtcbiAgaWYgKGNoYXJDb2RlID09IHBsdXMpIHtcbiAgICByZXR1cm4gNjI7XG4gIH1cblxuICAvLyA2MzogL1xuICBpZiAoY2hhckNvZGUgPT0gc2xhc2gpIHtcbiAgICByZXR1cm4gNjM7XG4gIH1cblxuICAvLyBJbnZhbGlkIGJhc2U2NCBkaWdpdC5cbiAgcmV0dXJuIC0xO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxNCBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hldGhlciBtYXBwaW5nQiBpcyBhZnRlciBtYXBwaW5nQSB3aXRoIHJlc3BlY3QgdG8gZ2VuZXJhdGVkXG4gKiBwb3NpdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVkUG9zaXRpb25BZnRlcihtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgLy8gT3B0aW1pemVkIGZvciBtb3N0IGNvbW1vbiBjYXNlXG4gIHZhciBsaW5lQSA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmU7XG4gIHZhciBsaW5lQiA9IG1hcHBpbmdCLmdlbmVyYXRlZExpbmU7XG4gIHZhciBjb2x1bW5BID0gbWFwcGluZ0EuZ2VuZXJhdGVkQ29sdW1uO1xuICB2YXIgY29sdW1uQiA9IG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgcmV0dXJuIGxpbmVCID4gbGluZUEgfHwgbGluZUIgPT0gbGluZUEgJiYgY29sdW1uQiA+PSBjb2x1bW5BIHx8XG4gICAgICAgICB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQikgPD0gMDtcbn1cblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHRvIHByb3ZpZGUgYSBzb3J0ZWQgdmlldyBvZiBhY2N1bXVsYXRlZCBtYXBwaW5ncyBpbiBhXG4gKiBwZXJmb3JtYW5jZSBjb25zY2lvdXMgbWFubmVyLiBJdCB0cmFkZXMgYSBuZWdsaWJhYmxlIG92ZXJoZWFkIGluIGdlbmVyYWxcbiAqIGNhc2UgZm9yIGEgbGFyZ2Ugc3BlZWR1cCBpbiBjYXNlIG9mIG1hcHBpbmdzIGJlaW5nIGFkZGVkIGluIG9yZGVyLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nTGlzdCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgLy8gU2VydmVzIGFzIGluZmltdW1cbiAgdGhpcy5fbGFzdCA9IHtnZW5lcmF0ZWRMaW5lOiAtMSwgZ2VuZXJhdGVkQ29sdW1uOiAwfTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIHRocm91Z2ggaW50ZXJuYWwgaXRlbXMuIFRoaXMgbWV0aG9kIHRha2VzIHRoZSBzYW1lIGFyZ3VtZW50cyB0aGF0XG4gKiBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIHRha2VzLlxuICpcbiAqIE5PVEU6IFRoZSBvcmRlciBvZiB0aGUgbWFwcGluZ3MgaXMgTk9UIGd1YXJhbnRlZWQuXG4gKi9cbk1hcHBpbmdMaXN0LnByb3RvdHlwZS51bnNvcnRlZEZvckVhY2ggPVxuICBmdW5jdGlvbiBNYXBwaW5nTGlzdF9mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpIHtcbiAgICB0aGlzLl9hcnJheS5mb3JFYWNoKGFDYWxsYmFjaywgYVRoaXNBcmcpO1xuICB9O1xuXG4vKipcbiAqIEFkZCB0aGUgZ2l2ZW4gc291cmNlIG1hcHBpbmcuXG4gKlxuICogQHBhcmFtIE9iamVjdCBhTWFwcGluZ1xuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gTWFwcGluZ0xpc3RfYWRkKGFNYXBwaW5nKSB7XG4gIGlmIChnZW5lcmF0ZWRQb3NpdGlvbkFmdGVyKHRoaXMuX2xhc3QsIGFNYXBwaW5nKSkge1xuICAgIHRoaXMuX2xhc3QgPSBhTWFwcGluZztcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9zb3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9hcnJheS5wdXNoKGFNYXBwaW5nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmbGF0LCBzb3J0ZWQgYXJyYXkgb2YgbWFwcGluZ3MuIFRoZSBtYXBwaW5ncyBhcmUgc29ydGVkIGJ5XG4gKiBnZW5lcmF0ZWQgcG9zaXRpb24uXG4gKlxuICogV0FSTklORzogVGhpcyBtZXRob2QgcmV0dXJucyBpbnRlcm5hbCBkYXRhIHdpdGhvdXQgY29weWluZywgZm9yXG4gKiBwZXJmb3JtYW5jZS4gVGhlIHJldHVybiB2YWx1ZSBtdXN0IE5PVCBiZSBtdXRhdGVkLCBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXNcbiAqIGFuIGltbXV0YWJsZSBib3Jyb3cuIElmIHlvdSB3YW50IHRvIHRha2Ugb3duZXJzaGlwLCB5b3UgbXVzdCBtYWtlIHlvdXIgb3duXG4gKiBjb3B5LlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X3RvQXJyYXkoKSB7XG4gIGlmICghdGhpcy5fc29ydGVkKSB7XG4gICAgdGhpcy5fYXJyYXkuc29ydCh1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkKTtcbiAgICB0aGlzLl9zb3J0ZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiB0aGlzLl9hcnJheTtcbn07XG5cbmV4cG9ydHMuTWFwcGluZ0xpc3QgPSBNYXBwaW5nTGlzdDtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbnZhciBiaW5hcnlTZWFyY2ggPSByZXF1aXJlKCcuL2JpbmFyeS1zZWFyY2gnKTtcbnZhciBBcnJheVNldCA9IHJlcXVpcmUoJy4vYXJyYXktc2V0JykuQXJyYXlTZXQ7XG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgcXVpY2tTb3J0ID0gcmVxdWlyZSgnLi9xdWljay1zb3J0JykucXVpY2tTb3J0O1xuXG5mdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgcmV0dXJuIHNvdXJjZU1hcC5zZWN0aW9ucyAhPSBudWxsXG4gICAgPyBuZXcgSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTClcbiAgICA6IG5ldyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKHNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cblNvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAgPSBmdW5jdGlvbihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHJldHVybiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLmZyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCk7XG59XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vLyBgX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kIGBfX29yaWdpbmFsTWFwcGluZ3NgIGFyZSBhcnJheXMgdGhhdCBob2xkIHRoZVxuLy8gcGFyc2VkIG1hcHBpbmcgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlIG1hcCdzIFwibWFwcGluZ3NcIiBhdHRyaWJ1dGUuIFRoZXlcbi8vIGFyZSBsYXppbHkgaW5zdGFudGlhdGVkLCBhY2Nlc3NlZCB2aWEgdGhlIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBnZXR0ZXJzIHJlc3BlY3RpdmVseSwgYW5kIHdlIG9ubHkgcGFyc2UgdGhlIG1hcHBpbmdzXG4vLyBhbmQgY3JlYXRlIHRoZXNlIGFycmF5cyBvbmNlIHF1ZXJpZWQgZm9yIGEgc291cmNlIGxvY2F0aW9uLiBXZSBqdW1wIHRocm91Z2hcbi8vIHRoZXNlIGhvb3BzIGJlY2F1c2UgdGhlcmUgY2FuIGJlIG1hbnkgdGhvdXNhbmRzIG9mIG1hcHBpbmdzLCBhbmQgcGFyc2luZ1xuLy8gdGhlbSBpcyBleHBlbnNpdmUsIHNvIHdlIG9ubHkgd2FudCB0byBkbyBpdCBpZiB3ZSBtdXN0LlxuLy9cbi8vIEVhY2ggb2JqZWN0IGluIHRoZSBhcnJheXMgaXMgb2YgdGhlIGZvcm06XG4vL1xuLy8gICAgIHtcbi8vICAgICAgIGdlbmVyYXRlZExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBnZW5lcmF0ZWRDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIHNvdXJjZTogVGhlIHBhdGggdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlIHRoYXQgZ2VuZXJhdGVkIHRoaXNcbi8vICAgICAgICAgICAgICAgY2h1bmsgb2YgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsTGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgb3JpZ2luYWxDb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgdGhhdFxuLy8gICAgICAgICAgICAgICAgICAgICAgIGNvcnJlc3BvbmRzIHRvIHRoaXMgY2h1bmsgb2YgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBuYW1lOiBUaGUgbmFtZSBvZiB0aGUgb3JpZ2luYWwgc3ltYm9sIHdoaWNoIGdlbmVyYXRlZCB0aGlzIGNodW5rIG9mXG4vLyAgICAgICAgICAgICBjb2RlLlxuLy8gICAgIH1cbi8vXG4vLyBBbGwgcHJvcGVydGllcyBleGNlcHQgZm9yIGBnZW5lcmF0ZWRMaW5lYCBhbmQgYGdlbmVyYXRlZENvbHVtbmAgY2FuIGJlXG4vLyBgbnVsbGAuXG4vL1xuLy8gYF9nZW5lcmF0ZWRNYXBwaW5nc2AgaXMgb3JkZXJlZCBieSB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9ucy5cbi8vXG4vLyBgX29yaWdpbmFsTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIG9yaWdpbmFsIHBvc2l0aW9ucy5cblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19nZW5lcmF0ZWRNYXBwaW5ncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzO1xuICB9XG59KTtcblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9fb3JpZ2luYWxNYXBwaW5ncyA9IG51bGw7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnX29yaWdpbmFsTWFwcGluZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncykge1xuICAgICAgdGhpcy5fcGFyc2VNYXBwaW5ncyh0aGlzLl9tYXBwaW5ncywgdGhpcy5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fX29yaWdpbmFsTWFwcGluZ3M7XG4gIH1cbn0pO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yKGFTdHIsIGluZGV4KSB7XG4gICAgdmFyIGMgPSBhU3RyLmNoYXJBdChpbmRleCk7XG4gICAgcmV0dXJuIGMgPT09IFwiO1wiIHx8IGMgPT09IFwiLFwiO1xuICB9O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBtYXBwaW5ncyBpbiBhIHN0cmluZyBpbiB0byBhIGRhdGEgc3RydWN0dXJlIHdoaWNoIHdlIGNhbiBlYXNpbHlcbiAqIHF1ZXJ5ICh0aGUgb3JkZXJlZCBhcnJheXMgaW4gdGhlIGB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZFxuICogYHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzYCBwcm9wZXJ0aWVzKS5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlN1YmNsYXNzZXMgbXVzdCBpbXBsZW1lbnQgX3BhcnNlTWFwcGluZ3NcIik7XG4gIH07XG5cblNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUiA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUiA9IDI7XG5cblNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EID0gMTtcblNvdXJjZU1hcENvbnN1bWVyLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBtYXBwaW5nIGJldHdlZW4gYW4gb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uIGFuZCBhXG4gKiBnZW5lcmF0ZWQgbGluZS9jb2x1bW4gaW4gdGhpcyBzb3VyY2UgbWFwLlxuICpcbiAqIEBwYXJhbSBGdW5jdGlvbiBhQ2FsbGJhY2tcbiAqICAgICAgICBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2l0aCBlYWNoIG1hcHBpbmcuXG4gKiBAcGFyYW0gT2JqZWN0IGFDb250ZXh0XG4gKiAgICAgICAgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBvYmplY3Qgd2lsbCBiZSB0aGUgdmFsdWUgb2YgYHRoaXNgIGV2ZXJ5XG4gKiAgICAgICAgdGltZSB0aGF0IGBhQ2FsbGJhY2tgIGlzIGNhbGxlZC5cbiAqIEBwYXJhbSBhT3JkZXJcbiAqICAgICAgICBFaXRoZXIgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAgb3JcbiAqICAgICAgICBgU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVJgLiBTcGVjaWZpZXMgd2hldGhlciB5b3Ugd2FudCB0b1xuICogICAgICAgIGl0ZXJhdGUgb3ZlciB0aGUgbWFwcGluZ3Mgc29ydGVkIGJ5IHRoZSBnZW5lcmF0ZWQgZmlsZSdzIGxpbmUvY29sdW1uXG4gKiAgICAgICAgb3JkZXIgb3IgdGhlIG9yaWdpbmFsJ3Mgc291cmNlL2xpbmUvY29sdW1uIG9yZGVyLCByZXNwZWN0aXZlbHkuIERlZmF1bHRzIHRvXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUmAuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5lYWNoTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2VhY2hNYXBwaW5nKGFDYWxsYmFjaywgYUNvbnRleHQsIGFPcmRlcikge1xuICAgIHZhciBjb250ZXh0ID0gYUNvbnRleHQgfHwgbnVsbDtcbiAgICB2YXIgb3JkZXIgPSBhT3JkZXIgfHwgU291cmNlTWFwQ29uc3VtZXIuR0VORVJBVEVEX09SREVSO1xuXG4gICAgdmFyIG1hcHBpbmdzO1xuICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSOlxuICAgICAgbWFwcGluZ3MgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gb3JkZXIgb2YgaXRlcmF0aW9uLlwiKTtcbiAgICB9XG5cbiAgICB2YXIgc291cmNlUm9vdCA9IHRoaXMuc291cmNlUm9vdDtcbiAgICBtYXBwaW5ncy5tYXAoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBtYXBwaW5nLnNvdXJjZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2UsIHRoaXMuX3NvdXJjZU1hcFVSTCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgZ2VuZXJhdGVkTGluZTogbWFwcGluZy5nZW5lcmF0ZWRMaW5lLFxuICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uLFxuICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICBvcmlnaW5hbENvbHVtbjogbWFwcGluZy5vcmlnaW5hbENvbHVtbixcbiAgICAgICAgbmFtZTogbWFwcGluZy5uYW1lID09PSBudWxsID8gbnVsbCA6IHRoaXMuX25hbWVzLmF0KG1hcHBpbmcubmFtZSlcbiAgICAgIH07XG4gICAgfSwgdGhpcykuZm9yRWFjaChhQ2FsbGJhY2ssIGNvbnRleHQpO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgYWxsIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBvcmlnaW5hbCBzb3VyY2UsXG4gKiBsaW5lLCBhbmQgY29sdW1uIHByb3ZpZGVkLiBJZiBubyBjb2x1bW4gaXMgcHJvdmlkZWQsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIGEgZWl0aGVyIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yIG9yIHRoZSBuZXh0XG4gKiBjbG9zZXN0IGxpbmUgdGhhdCBoYXMgYW55IG1hcHBpbmdzLiBPdGhlcndpc2UsIHJldHVybnMgYWxsIG1hcHBpbmdzXG4gKiBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBsaW5lIGFuZCBlaXRoZXIgdGhlIGNvbHVtbiB3ZSBhcmUgc2VhcmNoaW5nIGZvclxuICogb3IgdGhlIG5leHQgY2xvc2VzdCBjb2x1bW4gdGhhdCBoYXMgYW55IG9mZnNldHMuXG4gKlxuICogVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBPcHRpb25hbC4gdGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIGFycmF5IG9mIG9iamVjdHMgaXMgcmV0dXJuZWQsIGVhY2ggd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmFsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2FsbEdlbmVyYXRlZFBvc2l0aW9uc0ZvcihhQXJncykge1xuICAgIHZhciBsaW5lID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyk7XG5cbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIGV4YWN0IG1hdGNoLCBCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZE1hcHBpbmdcbiAgICAvLyByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgY2xvc2VzdCBtYXBwaW5nIGxlc3MgdGhhbiB0aGUgbmVlZGxlLiBCeVxuICAgIC8vIHNldHRpbmcgbmVlZGxlLm9yaWdpbmFsQ29sdW1uIHRvIDAsIHdlIHRodXMgZmluZCB0aGUgbGFzdCBtYXBwaW5nIGZvclxuICAgIC8vIHRoZSBnaXZlbiBsaW5lLCBwcm92aWRlZCBzdWNoIGEgbWFwcGluZyBleGlzdHMuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKSxcbiAgICAgIG9yaWdpbmFsTGluZTogbGluZSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicsIDApXG4gICAgfTtcblxuICAgIG5lZWRsZS5zb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgobmVlZGxlLnNvdXJjZSk7XG4gICAgaWYgKG5lZWRsZS5zb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgdmFyIG1hcHBpbmdzID0gW107XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhuZWVkbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3JpZ2luYWxDb2x1bW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChhQXJncy5jb2x1bW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgb3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmU7XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSBmb3VuZC4gU2luY2VcbiAgICAgICAgLy8gbWFwcGluZ3MgYXJlIHNvcnRlZCwgdGhpcyBpcyBndWFyYW50ZWVkIHRvIGZpbmQgYWxsIG1hcHBpbmdzIGZvclxuICAgICAgICAvLyB0aGUgbGluZSB3ZSBmb3VuZC5cbiAgICAgICAgd2hpbGUgKG1hcHBpbmcgJiYgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IG9yaWdpbmFsTGluZSkge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBvcmlnaW5hbENvbHVtbiA9IG1hcHBpbmcub3JpZ2luYWxDb2x1bW47XG5cbiAgICAgICAgLy8gSXRlcmF0ZSB1bnRpbCBlaXRoZXIgd2UgcnVuIG91dCBvZiBtYXBwaW5ncywgb3Igd2UgcnVuIGludG9cbiAgICAgICAgLy8gYSBtYXBwaW5nIGZvciBhIGRpZmZlcmVudCBsaW5lIHRoYW4gdGhlIG9uZSB3ZSB3ZXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIC8vIFNpbmNlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmXG4gICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gbGluZSAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9PSBvcmlnaW5hbENvbHVtbikge1xuICAgICAgICAgIG1hcHBpbmdzLnB1c2goe1xuICAgICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgICAgbGFzdENvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2xhc3RHZW5lcmF0ZWRDb2x1bW4nLCBudWxsKVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbKytpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGluZ3M7XG4gIH07XG5cbmV4cG9ydHMuU291cmNlTWFwQ29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoIHdlIGNhblxuICogcXVlcnkgZm9yIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBmaWxlIHBvc2l0aW9ucyBieSBnaXZpbmcgaXQgYSBmaWxlXG4gKiBwb3NpdGlvbiBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yXG4gKiBhbHJlYWR5IHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMsIHNvdXJjZSBtYXBzIGhhdmUgdGhlXG4gKiBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBzb3VyY2VzOiBBbiBhcnJheSBvZiBVUkxzIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZXMuXG4gKiAgIC0gbmFtZXM6IEFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHdoaWNoIGNhbiBiZSByZWZlcnJlbmNlZCBieSBpbmRpdmlkdWFsIG1hcHBpbmdzLlxuICogICAtIHNvdXJjZVJvb3Q6IE9wdGlvbmFsLiBUaGUgVVJMIHJvb3QgZnJvbSB3aGljaCBhbGwgc291cmNlcyBhcmUgcmVsYXRpdmUuXG4gKiAgIC0gc291cmNlc0NvbnRlbnQ6IE9wdGlvbmFsLiBBbiBhcnJheSBvZiBjb250ZW50cyBvZiB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG1hcHBpbmdzOiBBIHN0cmluZyBvZiBiYXNlNjQgVkxRcyB3aGljaCBjb250YWluIHRoZSBhY3R1YWwgbWFwcGluZ3MuXG4gKiAgIC0gZmlsZTogT3B0aW9uYWwuIFRoZSBnZW5lcmF0ZWQgZmlsZSB0aGlzIHNvdXJjZSBtYXAgaXMgYXNzb2NpYXRlZCB3aXRoLlxuICpcbiAqIEhlcmUgaXMgYW4gZXhhbXBsZSBzb3VyY2UgbWFwLCB0YWtlbiBmcm9tIHRoZSBzb3VyY2UgbWFwIHNwZWNbMF06XG4gKlxuICogICAgIHtcbiAqICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgZmlsZTogXCJvdXQuanNcIixcbiAqICAgICAgIHNvdXJjZVJvb3QgOiBcIlwiLFxuICogICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgbmFtZXM6IFtcInNyY1wiLCBcIm1hcHNcIiwgXCJhcmVcIiwgXCJmdW5cIl0sXG4gKiAgICAgICBtYXBwaW5nczogXCJBQSxBQjs7QUJDREU7XCJcbiAqICAgICB9XG4gKlxuICogVGhlIHNlY29uZCBwYXJhbWV0ZXIsIGlmIGdpdmVuLCBpcyBhIHN0cmluZyB3aG9zZSB2YWx1ZSBpcyB0aGUgVVJMXG4gKiBhdCB3aGljaCB0aGUgc291cmNlIG1hcCB3YXMgZm91bmQuICBUaGlzIFVSTCBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlXG4gKiBzb3VyY2VzIGFycmF5LlxuICpcbiAqIFswXTogaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xVTFSR0FlaFF3UnlwVVRvdkYxS1JscGlPRnplMGItXzJnYzZmQUgwS1kway9lZGl0P3BsaT0xI1xuICovXG5mdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpIHtcbiAgdmFyIHNvdXJjZU1hcCA9IGFTb3VyY2VNYXA7XG4gIGlmICh0eXBlb2YgYVNvdXJjZU1hcCA9PT0gJ3N0cmluZycpIHtcbiAgICBzb3VyY2VNYXAgPSB1dGlsLnBhcnNlU291cmNlTWFwSW5wdXQoYVNvdXJjZU1hcCk7XG4gIH1cblxuICB2YXIgdmVyc2lvbiA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3ZlcnNpb24nKTtcbiAgdmFyIHNvdXJjZXMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzJyk7XG4gIC8vIFNhc3MgMy4zIGxlYXZlcyBvdXQgdGhlICduYW1lcycgYXJyYXksIHNvIHdlIGRldmlhdGUgZnJvbSB0aGUgc3BlYyAod2hpY2hcbiAgLy8gcmVxdWlyZXMgdGhlIGFycmF5KSB0byBwbGF5IG5pY2UgaGVyZS5cbiAgdmFyIG5hbWVzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbmFtZXMnLCBbXSk7XG4gIHZhciBzb3VyY2VSb290ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB2YXIgc291cmNlc0NvbnRlbnQgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzb3VyY2VzQ29udGVudCcsIG51bGwpO1xuICB2YXIgbWFwcGluZ3MgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdtYXBwaW5ncycpO1xuICB2YXIgZmlsZSA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ2ZpbGUnLCBudWxsKTtcblxuICAvLyBPbmNlIGFnYWluLCBTYXNzIGRldmlhdGVzIGZyb20gdGhlIHNwZWMgYW5kIHN1cHBsaWVzIHRoZSB2ZXJzaW9uIGFzIGFcbiAgLy8gc3RyaW5nIHJhdGhlciB0aGFuIGEgbnVtYmVyLCBzbyB3ZSB1c2UgbG9vc2UgZXF1YWxpdHkgY2hlY2tpbmcgaGVyZS5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICBzb3VyY2VSb290ID0gdXRpbC5ub3JtYWxpemUoc291cmNlUm9vdCk7XG4gIH1cblxuICBzb3VyY2VzID0gc291cmNlc1xuICAgIC5tYXAoU3RyaW5nKVxuICAgIC8vIFNvbWUgc291cmNlIG1hcHMgcHJvZHVjZSByZWxhdGl2ZSBzb3VyY2UgcGF0aHMgbGlrZSBcIi4vZm9vLmpzXCIgaW5zdGVhZCBvZlxuICAgIC8vIFwiZm9vLmpzXCIuICBOb3JtYWxpemUgdGhlc2UgZmlyc3Qgc28gdGhhdCBmdXR1cmUgY29tcGFyaXNvbnMgd2lsbCBzdWNjZWVkLlxuICAgIC8vIFNlZSBidWd6aWwubGEvMTA5MDc2OC5cbiAgICAubWFwKHV0aWwubm9ybWFsaXplKVxuICAgIC8vIEFsd2F5cyBlbnN1cmUgdGhhdCBhYnNvbHV0ZSBzb3VyY2VzIGFyZSBpbnRlcm5hbGx5IHN0b3JlZCByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSBzb3VyY2Ugcm9vdCwgaWYgdGhlIHNvdXJjZSByb290IGlzIGFic29sdXRlLiBOb3QgZG9pbmcgdGhpcyB3b3VsZFxuICAgIC8vIGJlIHBhcnRpY3VsYXJseSBwcm9ibGVtYXRpYyB3aGVuIHRoZSBzb3VyY2Ugcm9vdCBpcyBhIHByZWZpeCBvZiB0aGVcbiAgICAvLyBzb3VyY2UgKHZhbGlkLCBidXQgd2h5Pz8pLiBTZWUgZ2l0aHViIGlzc3VlICMxOTkgYW5kIGJ1Z3ppbC5sYS8xMTg4OTgyLlxuICAgIC5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIHNvdXJjZVJvb3QgJiYgdXRpbC5pc0Fic29sdXRlKHNvdXJjZVJvb3QpICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2UpXG4gICAgICAgID8gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2UpXG4gICAgICAgIDogc291cmNlO1xuICAgIH0pO1xuXG4gIC8vIFBhc3MgYHRydWVgIGJlbG93IHRvIGFsbG93IGR1cGxpY2F0ZSBuYW1lcyBhbmQgc291cmNlcy4gV2hpbGUgc291cmNlIG1hcHNcbiAgLy8gYXJlIGludGVuZGVkIHRvIGJlIGNvbXByZXNzZWQgYW5kIGRlZHVwbGljYXRlZCwgdGhlIFR5cGVTY3JpcHQgY29tcGlsZXJcbiAgLy8gc29tZXRpbWVzIGdlbmVyYXRlcyBzb3VyY2UgbWFwcyB3aXRoIGR1cGxpY2F0ZXMgaW4gdGhlbS4gU2VlIEdpdGh1YiBpc3N1ZVxuICAvLyAjNzIgYW5kIGJ1Z3ppbC5sYS84ODk0OTIuXG4gIHRoaXMuX25hbWVzID0gQXJyYXlTZXQuZnJvbUFycmF5KG5hbWVzLm1hcChTdHJpbmcpLCB0cnVlKTtcbiAgdGhpcy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShzb3VyY2VzLCB0cnVlKTtcblxuICB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMgPSB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gdXRpbC5jb21wdXRlU291cmNlVVJMKHNvdXJjZVJvb3QsIHMsIGFTb3VyY2VNYXBVUkwpO1xuICB9KTtcblxuICB0aGlzLnNvdXJjZVJvb3QgPSBzb3VyY2VSb290O1xuICB0aGlzLnNvdXJjZXNDb250ZW50ID0gc291cmNlc0NvbnRlbnQ7XG4gIHRoaXMuX21hcHBpbmdzID0gbWFwcGluZ3M7XG4gIHRoaXMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gIHRoaXMuZmlsZSA9IGZpbGU7XG59XG5cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3VtZXIgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGluZGV4IG9mIGEgc291cmNlLiAgUmV0dXJucyAtMSBpZiBub3RcbiAqIGZvdW5kLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fZmluZFNvdXJjZUluZGV4ID0gZnVuY3Rpb24oYVNvdXJjZSkge1xuICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICByZWxhdGl2ZVNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5zb3VyY2VSb290LCByZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICBpZiAodGhpcy5fc291cmNlcy5oYXMocmVsYXRpdmVTb3VyY2UpKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZXMuaW5kZXhPZihyZWxhdGl2ZVNvdXJjZSk7XG4gIH1cblxuICAvLyBNYXliZSBhU291cmNlIGlzIGFuIGFic29sdXRlIFVSTCBhcyByZXR1cm5lZCBieSB8c291cmNlc3wuICBJblxuICAvLyB0aGlzIGNhc2Ugd2UgY2FuJ3Qgc2ltcGx5IHVuZG8gdGhlIHRyYW5zZm9ybS5cbiAgdmFyIGk7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAodGhpcy5fYWJzb2x1dGVTb3VyY2VzW2ldID09IGFTb3VyY2UpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGEgQmFzaWNTb3VyY2VNYXBDb25zdW1lciBmcm9tIGEgU291cmNlTWFwR2VuZXJhdG9yLlxuICpcbiAqIEBwYXJhbSBTb3VyY2VNYXBHZW5lcmF0b3IgYVNvdXJjZU1hcFxuICogICAgICAgIFRoZSBzb3VyY2UgbWFwIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbiAqIEBwYXJhbSBTdHJpbmcgYVNvdXJjZU1hcFVSTFxuICogICAgICAgIFRoZSBVUkwgYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgY2FuIGJlIGZvdW5kIChvcHRpb25hbClcbiAqIEByZXR1cm5zIEJhc2ljU291cmNlTWFwQ29uc3VtZXJcbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gICAgdmFyIHNtYyA9IE9iamVjdC5jcmVhdGUoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUpO1xuXG4gICAgdmFyIG5hbWVzID0gc21jLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9uYW1lcy50b0FycmF5KCksIHRydWUpO1xuICAgIHZhciBzb3VyY2VzID0gc21jLl9zb3VyY2VzID0gQXJyYXlTZXQuZnJvbUFycmF5KGFTb3VyY2VNYXAuX3NvdXJjZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICBzbWMuc291cmNlUm9vdCA9IGFTb3VyY2VNYXAuX3NvdXJjZVJvb3Q7XG4gICAgc21jLnNvdXJjZXNDb250ZW50ID0gYVNvdXJjZU1hcC5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudChzbWMuX3NvdXJjZXMudG9BcnJheSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21jLnNvdXJjZVJvb3QpO1xuICAgIHNtYy5maWxlID0gYVNvdXJjZU1hcC5fZmlsZTtcbiAgICBzbWMuX3NvdXJjZU1hcFVSTCA9IGFTb3VyY2VNYXBVUkw7XG4gICAgc21jLl9hYnNvbHV0ZVNvdXJjZXMgPSBzbWMuX3NvdXJjZXMudG9BcnJheSgpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgcmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzbWMuc291cmNlUm9vdCwgcywgYVNvdXJjZU1hcFVSTCk7XG4gICAgfSk7XG5cbiAgICAvLyBCZWNhdXNlIHdlIGFyZSBtb2RpZnlpbmcgdGhlIGVudHJpZXMgKGJ5IGNvbnZlcnRpbmcgc3RyaW5nIHNvdXJjZXMgYW5kXG4gICAgLy8gbmFtZXMgdG8gaW5kaWNlcyBpbnRvIHRoZSBzb3VyY2VzIGFuZCBuYW1lcyBBcnJheVNldHMpLCB3ZSBoYXZlIHRvIG1ha2VcbiAgICAvLyBhIGNvcHkgb2YgdGhlIGVudHJ5IG9yIGVsc2UgYmFkIHRoaW5ncyBoYXBwZW4uIFNoYXJlZCBtdXRhYmxlIHN0YXRlXG4gICAgLy8gc3RyaWtlcyBhZ2FpbiEgU2VlIGdpdGh1YiBpc3N1ZSAjMTkxLlxuXG4gICAgdmFyIGdlbmVyYXRlZE1hcHBpbmdzID0gYVNvdXJjZU1hcC5fbWFwcGluZ3MudG9BcnJheSgpLnNsaWNlKCk7XG4gICAgdmFyIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncyA9IHNtYy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gW107XG4gICAgdmFyIGRlc3RPcmlnaW5hbE1hcHBpbmdzID0gc21jLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGdlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3JjTWFwcGluZyA9IGdlbmVyYXRlZE1hcHBpbmdzW2ldO1xuICAgICAgdmFyIGRlc3RNYXBwaW5nID0gbmV3IE1hcHBpbmc7XG4gICAgICBkZXN0TWFwcGluZy5nZW5lcmF0ZWRMaW5lID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRMaW5lO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gc3JjTWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgIGlmIChzcmNNYXBwaW5nLnNvdXJjZSkge1xuICAgICAgICBkZXN0TWFwcGluZy5zb3VyY2UgPSBzb3VyY2VzLmluZGV4T2Yoc3JjTWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBkZXN0TWFwcGluZy5vcmlnaW5hbExpbmUgPSBzcmNNYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBzcmNNYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChzcmNNYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBkZXN0TWFwcGluZy5uYW1lID0gbmFtZXMuaW5kZXhPZihzcmNNYXBwaW5nLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdE9yaWdpbmFsTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgICB9XG5cbiAgICAgIGRlc3RHZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGRlc3RNYXBwaW5nKTtcbiAgICB9XG5cbiAgICBxdWlja1NvcnQoc21jLl9fb3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG5cbiAgICByZXR1cm4gc21jO1xuICB9O1xuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9hYnNvbHV0ZVNvdXJjZXMuc2xpY2UoKTtcbiAgfVxufSk7XG5cbi8qKlxuICogUHJvdmlkZSB0aGUgSklUIHdpdGggYSBuaWNlIHNoYXBlIC8gaGlkZGVuIGNsYXNzLlxuICovXG5mdW5jdGlvbiBNYXBwaW5nKCkge1xuICB0aGlzLmdlbmVyYXRlZExpbmUgPSAwO1xuICB0aGlzLmdlbmVyYXRlZENvbHVtbiA9IDA7XG4gIHRoaXMuc291cmNlID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbExpbmUgPSBudWxsO1xuICB0aGlzLm9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdGhpcy5uYW1lID0gbnVsbDtcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHZhciBnZW5lcmF0ZWRMaW5lID0gMTtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsTGluZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHByZXZpb3VzTmFtZSA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IGFTdHIubGVuZ3RoO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGNhY2hlZFNlZ21lbnRzID0ge307XG4gICAgdmFyIHRlbXAgPSB7fTtcbiAgICB2YXIgb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBtYXBwaW5nLCBzdHIsIHNlZ21lbnQsIGVuZCwgdmFsdWU7XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICc7Jykge1xuICAgICAgICBnZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGFTdHIuY2hhckF0KGluZGV4KSA9PT0gJywnKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbWFwcGluZyA9IG5ldyBNYXBwaW5nKCk7XG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IGdlbmVyYXRlZExpbmU7XG5cbiAgICAgICAgLy8gQmVjYXVzZSBlYWNoIG9mZnNldCBpcyBlbmNvZGVkIHJlbGF0aXZlIHRvIHRoZSBwcmV2aW91cyBvbmUsXG4gICAgICAgIC8vIG1hbnkgc2VnbWVudHMgb2Z0ZW4gaGF2ZSB0aGUgc2FtZSBlbmNvZGluZy4gV2UgY2FuIGV4cGxvaXQgdGhpc1xuICAgICAgICAvLyBmYWN0IGJ5IGNhY2hpbmcgdGhlIHBhcnNlZCB2YXJpYWJsZSBsZW5ndGggZmllbGRzIG9mIGVhY2ggc2VnbWVudCxcbiAgICAgICAgLy8gYWxsb3dpbmcgdXMgdG8gYXZvaWQgYSBzZWNvbmQgcGFyc2UgaWYgd2UgZW5jb3VudGVyIHRoZSBzYW1lXG4gICAgICAgIC8vIHNlZ21lbnQgYWdhaW4uXG4gICAgICAgIGZvciAoZW5kID0gaW5kZXg7IGVuZCA8IGxlbmd0aDsgZW5kKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBlbmQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyID0gYVN0ci5zbGljZShpbmRleCwgZW5kKTtcblxuICAgICAgICBzZWdtZW50ID0gY2FjaGVkU2VnbWVudHNbc3RyXTtcbiAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICBpbmRleCArPSBzdHIubGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZ21lbnQgPSBbXTtcbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGJhc2U2NFZMUS5kZWNvZGUoYVN0ciwgaW5kZXgsIHRlbXApO1xuICAgICAgICAgICAgdmFsdWUgPSB0ZW1wLnZhbHVlO1xuICAgICAgICAgICAgaW5kZXggPSB0ZW1wLnJlc3Q7XG4gICAgICAgICAgICBzZWdtZW50LnB1c2godmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSwgYnV0IG5vIGxpbmUgYW5kIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCBhIHNvdXJjZSBhbmQgbGluZSwgYnV0IG5vIGNvbHVtbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNhY2hlZFNlZ21lbnRzW3N0cl0gPSBzZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2VuZXJhdGVkIGNvbHVtbi5cbiAgICAgICAgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gPSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiArIHNlZ21lbnRbMF07XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW47XG5cbiAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gMSkge1xuICAgICAgICAgIC8vIE9yaWdpbmFsIHNvdXJjZS5cbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHByZXZpb3VzU291cmNlICsgc2VnbWVudFsxXTtcbiAgICAgICAgICBwcmV2aW91c1NvdXJjZSArPSBzZWdtZW50WzFdO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgbGluZS5cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IHByZXZpb3VzT3JpZ2luYWxMaW5lICsgc2VnbWVudFsyXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuICAgICAgICAgIC8vIExpbmVzIGFyZSBzdG9yZWQgMC1iYXNlZFxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxMaW5lICs9IDE7XG5cbiAgICAgICAgICAvLyBPcmlnaW5hbCBjb2x1bW4uXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gKyBzZWdtZW50WzNdO1xuICAgICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgICAgaWYgKHNlZ21lbnQubGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgLy8gT3JpZ2luYWwgbmFtZS5cbiAgICAgICAgICAgIG1hcHBpbmcubmFtZSA9IHByZXZpb3VzTmFtZSArIHNlZ21lbnRbNF07XG4gICAgICAgICAgICBwcmV2aW91c05hbWUgKz0gc2VnbWVudFs0XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBnZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKG1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIG9yaWdpbmFsTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHF1aWNrU29ydChnZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzID0gZ2VuZXJhdGVkTWFwcGluZ3M7XG5cbiAgICBxdWlja1NvcnQob3JpZ2luYWxNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyk7XG4gICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MgPSBvcmlnaW5hbE1hcHBpbmdzO1xuICB9O1xuXG4vKipcbiAqIEZpbmQgdGhlIG1hcHBpbmcgdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGh5cG90aGV0aWNhbCBcIm5lZWRsZVwiIG1hcHBpbmcgdGhhdFxuICogd2UgYXJlIHNlYXJjaGluZyBmb3IgaW4gdGhlIGdpdmVuIFwiaGF5c3RhY2tcIiBvZiBtYXBwaW5ncy5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZmluZE1hcHBpbmcoYU5lZWRsZSwgYU1hcHBpbmdzLCBhTGluZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb2x1bW5OYW1lLCBhQ29tcGFyYXRvciwgYUJpYXMpIHtcbiAgICAvLyBUbyByZXR1cm4gdGhlIHBvc2l0aW9uIHdlIGFyZSBzZWFyY2hpbmcgZm9yLCB3ZSBtdXN0IGZpcnN0IGZpbmQgdGhlXG4gICAgLy8gbWFwcGluZyBmb3IgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0aGVuIHJldHVybiB0aGUgb3Bwb3NpdGUgcG9zaXRpb24gaXRcbiAgICAvLyBwb2ludHMgdG8uIEJlY2F1c2UgdGhlIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHdlIGNhbiB1c2UgYmluYXJ5IHNlYXJjaCB0b1xuICAgIC8vIGZpbmQgdGhlIGJlc3QgbWFwcGluZy5cblxuICAgIGlmIChhTmVlZGxlW2FMaW5lTmFtZV0gPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTGluZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAxLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUxpbmVOYW1lXSk7XG4gICAgfVxuICAgIGlmIChhTmVlZGxlW2FDb2x1bW5OYW1lXSA8IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbHVtbiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwLCBnb3QgJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICArIGFOZWVkbGVbYUNvbHVtbk5hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmluYXJ5U2VhcmNoLnNlYXJjaChhTmVlZGxlLCBhTWFwcGluZ3MsIGFDb21wYXJhdG9yLCBhQmlhcyk7XG4gIH07XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbGFzdCBjb2x1bW4gZm9yIGVhY2ggZ2VuZXJhdGVkIG1hcHBpbmcuIFRoZSBsYXN0IGNvbHVtbiBpc1xuICogaW5jbHVzaXZlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5jb21wdXRlQ29sdW1uU3BhbnMgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9jb21wdXRlQ29sdW1uU3BhbnMoKSB7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIC8vIE1hcHBpbmdzIGRvIG5vdCBjb250YWluIGEgZmllbGQgZm9yIHRoZSBsYXN0IGdlbmVyYXRlZCBjb2x1bW50LiBXZVxuICAgICAgLy8gY2FuIGNvbWUgdXAgd2l0aCBhbiBvcHRpbWlzdGljIGVzdGltYXRlLCBob3dldmVyLCBieSBhc3N1bWluZyB0aGF0XG4gICAgICAvLyBtYXBwaW5ncyBhcmUgY29udGlndW91cyAoaS5lLiBnaXZlbiB0d28gY29uc2VjdXRpdmUgbWFwcGluZ3MsIHRoZVxuICAgICAgLy8gZmlyc3QgbWFwcGluZyBlbmRzIHdoZXJlIHRoZSBzZWNvbmQgb25lIHN0YXJ0cykuXG4gICAgICBpZiAoaW5kZXggKyAxIDwgdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3MubGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXh0TWFwcGluZyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzW2luZGV4ICsgMV07XG5cbiAgICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9PT0gbmV4dE1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IG5leHRNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtIDE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGxhc3QgbWFwcGluZyBmb3IgZWFjaCBsaW5lIHNwYW5zIHRoZSBlbnRpcmUgbGluZS5cbiAgICAgIG1hcHBpbmcubGFzdEdlbmVyYXRlZENvbHVtbiA9IEluZmluaXR5O1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UsIGxpbmUsIGFuZCBjb2x1bW4gaW5mb3JtYXRpb24gZm9yIHRoZSBnZW5lcmF0ZWRcbiAqIHNvdXJjZSdzIGxpbmUgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICogd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlclxuICogICAgIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSwgb3IgbnVsbC5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICogICAtIG5hbWU6IFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLCBvciBudWxsLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfb3JpZ2luYWxQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLFxuICAgICAgXCJnZW5lcmF0ZWRMaW5lXCIsXG4gICAgICBcImdlbmVyYXRlZENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleF07XG5cbiAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhtYXBwaW5nLCAnc291cmNlJywgbnVsbCk7XG4gICAgICAgIGlmIChzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmF0KHNvdXJjZSk7XG4gICAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHRoaXMuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ25hbWUnLCBudWxsKTtcbiAgICAgICAgaWYgKG5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICBuYW1lID0gdGhpcy5fbmFtZXMuYXQobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxMaW5lJywgbnVsbCksXG4gICAgICAgICAgY29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnb3JpZ2luYWxDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBuYW1lOiBuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBuYW1lOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiB3ZSBoYXZlIHRoZSBzb3VyY2UgY29udGVudCBmb3IgZXZlcnkgc291cmNlIGluIHRoZSBzb3VyY2VcbiAqIG1hcCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEJhc2ljU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50Lmxlbmd0aCA+PSB0aGlzLl9zb3VyY2VzLnNpemUoKSAmJlxuICAgICAgIXRoaXMuc291cmNlc0NvbnRlbnQuc29tZShmdW5jdGlvbiAoc2MpIHsgcmV0dXJuIHNjID09IG51bGw7IH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgaWYgKCF0aGlzLnNvdXJjZXNDb250ZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kU291cmNlSW5kZXgoYVNvdXJjZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZXNDb250ZW50W2luZGV4XTtcbiAgICB9XG5cbiAgICB2YXIgcmVsYXRpdmVTb3VyY2UgPSBhU291cmNlO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICAgIH1cblxuICAgIHZhciB1cmw7XG4gICAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsXG4gICAgICAgICYmICh1cmwgPSB1dGlsLnVybFBhcnNlKHRoaXMuc291cmNlUm9vdCkpKSB7XG4gICAgICAvLyBYWFg6IGZpbGU6Ly8gVVJJcyBhbmQgYWJzb2x1dGUgcGF0aHMgbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yIGZvclxuICAgICAgLy8gbWFueSB1c2Vycy4gV2UgY2FuIGhlbHAgdGhlbSBvdXQgd2hlbiB0aGV5IGV4cGVjdCBmaWxlOi8vIFVSSXMgdG9cbiAgICAgIC8vIGJlaGF2ZSBsaWtlIGl0IHdvdWxkIGlmIHRoZXkgd2VyZSBydW5uaW5nIGEgbG9jYWwgSFRUUCBzZXJ2ZXIuIFNlZVxuICAgICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9ODg1NTk3LlxuICAgICAgdmFyIGZpbGVVcmlBYnNQYXRoID0gcmVsYXRpdmVTb3VyY2UucmVwbGFjZSgvXmZpbGU6XFwvXFwvLywgXCJcIik7XG4gICAgICBpZiAodXJsLnNjaGVtZSA9PSBcImZpbGVcIlxuICAgICAgICAgICYmIHRoaXMuX3NvdXJjZXMuaGFzKGZpbGVVcmlBYnNQYXRoKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoZmlsZVVyaUFic1BhdGgpXVxuICAgICAgfVxuXG4gICAgICBpZiAoKCF1cmwucGF0aCB8fCB1cmwucGF0aCA9PSBcIi9cIilcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhcIi9cIiArIHJlbGF0aXZlU291cmNlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFt0aGlzLl9zb3VyY2VzLmluZGV4T2YoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSBmcm9tXG4gICAgLy8gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5zb3VyY2VDb250ZW50Rm9yLiBJbiB0aGF0IGNhc2UsIHdlXG4gICAgLy8gZG9uJ3Qgd2FudCB0byB0aHJvdyBpZiB3ZSBjYW4ndCBmaW5kIHRoZSBzb3VyY2UgLSB3ZSBqdXN0IHdhbnQgdG9cbiAgICAvLyByZXR1cm4gbnVsbCwgc28gd2UgcHJvdmlkZSBhIGZsYWcgdG8gZXhpdCBncmFjZWZ1bGx5LlxuICAgIGlmIChudWxsT25NaXNzaW5nKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHJlbGF0aXZlU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBiaWFzOiBFaXRoZXIgJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdTb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKiAgICAgRGVmYXVsdHMgdG8gJ1NvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuXG4gKiAgICAgVGhlIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9nZW5lcmF0ZWRQb3NpdGlvbkZvcihhQXJncykge1xuICAgIHZhciBzb3VyY2UgPSB1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpO1xuICAgIHNvdXJjZSA9IHRoaXMuX2ZpbmRTb3VyY2VJbmRleChzb3VyY2UpO1xuICAgIGlmIChzb3VyY2UgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsaW5lOiBudWxsLFxuICAgICAgICBjb2x1bW46IG51bGwsXG4gICAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgb3JpZ2luYWxMaW5lOiB1dGlsLmdldEFyZyhhQXJncywgJ2xpbmUnKSxcbiAgICAgIG9yaWdpbmFsQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIHZhciBpbmRleCA9IHRoaXMuX2ZpbmRNYXBwaW5nKFxuICAgICAgbmVlZGxlLFxuICAgICAgdGhpcy5fb3JpZ2luYWxNYXBwaW5ncyxcbiAgICAgIFwib3JpZ2luYWxMaW5lXCIsXG4gICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zLFxuICAgICAgdXRpbC5nZXRBcmcoYUFyZ3MsICdiaWFzJywgU291cmNlTWFwQ29uc3VtZXIuR1JFQVRFU1RfTE9XRVJfQk9VTkQpXG4gICAgKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgPT09IG5lZWRsZS5zb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBsaW5lOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnZ2VuZXJhdGVkTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZENvbHVtbicsIG51bGwpLFxuICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgIGxhc3RDb2x1bW46IG51bGxcbiAgICB9O1xuICB9O1xuXG5leHBvcnRzLkJhc2ljU291cmNlTWFwQ29uc3VtZXIgPSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyO1xuXG4vKipcbiAqIEFuIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciBpbnN0YW5jZSByZXByZXNlbnRzIGEgcGFyc2VkIHNvdXJjZSBtYXAgd2hpY2hcbiAqIHdlIGNhbiBxdWVyeSBmb3IgaW5mb3JtYXRpb24uIEl0IGRpZmZlcnMgZnJvbSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluXG4gKiB0aGF0IGl0IHRha2VzIFwiaW5kZXhlZFwiIHNvdXJjZSBtYXBzIChpLmUuIG9uZXMgd2l0aCBhIFwic2VjdGlvbnNcIiBmaWVsZCkgYXNcbiAqIGlucHV0LlxuICpcbiAqIFRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSByYXcgc291cmNlIG1hcCAoZWl0aGVyIGFzIGEgSlNPTiBzdHJpbmcsIG9yIGFscmVhZHlcbiAqIHBhcnNlZCB0byBhbiBvYmplY3QpLiBBY2NvcmRpbmcgdG8gdGhlIHNwZWMgZm9yIGluZGV4ZWQgc291cmNlIG1hcHMsIHRoZXlcbiAqIGhhdmUgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICpcbiAqICAgLSB2ZXJzaW9uOiBXaGljaCB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwIHNwZWMgdGhpcyBtYXAgaXMgZm9sbG93aW5nLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqICAgLSBzZWN0aW9uczogQSBsaXN0IG9mIHNlY3Rpb24gZGVmaW5pdGlvbnMuXG4gKlxuICogRWFjaCB2YWx1ZSB1bmRlciB0aGUgXCJzZWN0aW9uc1wiIGZpZWxkIGhhcyB0d28gZmllbGRzOlxuICogICAtIG9mZnNldDogVGhlIG9mZnNldCBpbnRvIHRoZSBvcmlnaW5hbCBzcGVjaWZpZWQgYXQgd2hpY2ggdGhpcyBzZWN0aW9uXG4gKiAgICAgICBiZWdpbnMgdG8gYXBwbHksIGRlZmluZWQgYXMgYW4gb2JqZWN0IHdpdGggYSBcImxpbmVcIiBhbmQgXCJjb2x1bW5cIlxuICogICAgICAgZmllbGQuXG4gKiAgIC0gbWFwOiBBIHNvdXJjZSBtYXAgZGVmaW5pdGlvbi4gVGhpcyBzb3VyY2UgbWFwIGNvdWxkIGFsc28gYmUgaW5kZXhlZCxcbiAqICAgICAgIGJ1dCBkb2Vzbid0IGhhdmUgdG8gYmUuXG4gKlxuICogSW5zdGVhZCBvZiB0aGUgXCJtYXBcIiBmaWVsZCwgaXQncyBhbHNvIHBvc3NpYmxlIHRvIGhhdmUgYSBcInVybFwiIGZpZWxkXG4gKiBzcGVjaWZ5aW5nIGEgVVJMIHRvIHJldHJpZXZlIGEgc291cmNlIG1hcCBmcm9tLCBidXQgdGhhdCdzIGN1cnJlbnRseVxuICogdW5zdXBwb3J0ZWQuXG4gKlxuICogSGVyZSdzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdLCBidXRcbiAqIG1vZGlmaWVkIHRvIG9taXQgYSBzZWN0aW9uIHdoaWNoIHVzZXMgdGhlIFwidXJsXCIgZmllbGQuXG4gKlxuICogIHtcbiAqICAgIHZlcnNpb24gOiAzLFxuICogICAgZmlsZTogXCJhcHAuanNcIixcbiAqICAgIHNlY3Rpb25zOiBbe1xuICogICAgICBvZmZzZXQ6IHtsaW5lOjEwMCwgY29sdW1uOjEwfSxcbiAqICAgICAgbWFwOiB7XG4gKiAgICAgICAgdmVyc2lvbiA6IDMsXG4gKiAgICAgICAgZmlsZTogXCJzZWN0aW9uLmpzXCIsXG4gKiAgICAgICAgc291cmNlczogW1wiZm9vLmpzXCIsIFwiYmFyLmpzXCJdLFxuICogICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgIG1hcHBpbmdzOiBcIkFBQUEsRTs7QUJDREU7XCJcbiAqICAgICAgfVxuICogICAgfV0sXG4gKiAgfVxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyLCBpZiBnaXZlbiwgaXMgYSBzdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVSTFxuICogYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgd2FzIGZvdW5kLiAgVGhpcyBVUkwgaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICogc291cmNlcyBhcnJheS5cbiAqXG4gKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdCNoZWFkaW5nPWguNTM1ZXMzeGVwcmd0XG4gKi9cbmZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzZWN0aW9ucyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NlY3Rpb25zJyk7XG5cbiAgaWYgKHZlcnNpb24gIT0gdGhpcy5fdmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgdmVyc2lvbjogJyArIHZlcnNpb24pO1xuICB9XG5cbiAgdGhpcy5fc291cmNlcyA9IG5ldyBBcnJheVNldCgpO1xuICB0aGlzLl9uYW1lcyA9IG5ldyBBcnJheVNldCgpO1xuXG4gIHZhciBsYXN0T2Zmc2V0ID0ge1xuICAgIGxpbmU6IC0xLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB0aGlzLl9zZWN0aW9ucyA9IHNlY3Rpb25zLm1hcChmdW5jdGlvbiAocykge1xuICAgIGlmIChzLnVybCkge1xuICAgICAgLy8gVGhlIHVybCBmaWVsZCB3aWxsIHJlcXVpcmUgc3VwcG9ydCBmb3IgYXN5bmNocm9uaWNpdHkuXG4gICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMTZcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwcG9ydCBmb3IgdXJsIGZpZWxkIGluIHNlY3Rpb25zIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgICB9XG4gICAgdmFyIG9mZnNldCA9IHV0aWwuZ2V0QXJnKHMsICdvZmZzZXQnKTtcbiAgICB2YXIgb2Zmc2V0TGluZSA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2xpbmUnKTtcbiAgICB2YXIgb2Zmc2V0Q29sdW1uID0gdXRpbC5nZXRBcmcob2Zmc2V0LCAnY29sdW1uJyk7XG5cbiAgICBpZiAob2Zmc2V0TGluZSA8IGxhc3RPZmZzZXQubGluZSB8fFxuICAgICAgICAob2Zmc2V0TGluZSA9PT0gbGFzdE9mZnNldC5saW5lICYmIG9mZnNldENvbHVtbiA8IGxhc3RPZmZzZXQuY29sdW1uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWN0aW9uIG9mZnNldHMgbXVzdCBiZSBvcmRlcmVkIGFuZCBub24tb3ZlcmxhcHBpbmcuJyk7XG4gICAgfVxuICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2VuZXJhdGVkT2Zmc2V0OiB7XG4gICAgICAgIC8vIFRoZSBvZmZzZXQgZmllbGRzIGFyZSAwLWJhc2VkLCBidXQgd2UgdXNlIDEtYmFzZWQgaW5kaWNlcyB3aGVuXG4gICAgICAgIC8vIGVuY29kaW5nL2RlY29kaW5nIGZyb20gVkxRLlxuICAgICAgICBnZW5lcmF0ZWRMaW5lOiBvZmZzZXRMaW5lICsgMSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBvZmZzZXRDb2x1bW4gKyAxXG4gICAgICB9LFxuICAgICAgY29uc3VtZXI6IG5ldyBTb3VyY2VNYXBDb25zdW1lcih1dGlsLmdldEFyZyhzLCAnbWFwJyksIGFTb3VyY2VNYXBVUkwpXG4gICAgfVxuICB9KTtcbn1cblxuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3ZlcnNpb24gPSAzO1xuXG4vKipcbiAqIFRoZSBsaXN0IG9mIG9yaWdpbmFsIHNvdXJjZXMuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLCAnc291cmNlcycsIHtcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgc291cmNlcy5wdXNoKHRoaXMuX3NlY3Rpb25zW2ldLmNvbnN1bWVyLnNvdXJjZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlcztcbiAgfVxufSk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5vcmlnaW5hbFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgLy8gRmluZCB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgcG9zaXRpb24gd2UncmUgdHJ5aW5nIHRvIG1hcFxuICAgIC8vIHRvIGFuIG9yaWdpbmFsIHBvc2l0aW9uLlxuICAgIHZhciBzZWN0aW9uSW5kZXggPSBiaW5hcnlTZWFyY2guc2VhcmNoKG5lZWRsZSwgdGhpcy5fc2VjdGlvbnMsXG4gICAgICBmdW5jdGlvbihuZWVkbGUsIHNlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNtcCA9IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC0gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZTtcbiAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG5lZWRsZS5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbik7XG4gICAgICB9KTtcbiAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW3NlY3Rpb25JbmRleF07XG5cbiAgICBpZiAoIXNlY3Rpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBuYW1lOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBzZWN0aW9uLmNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbmVlZGxlLmdlbmVyYXRlZExpbmUgLVxuICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgY29sdW1uOiBuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG5lZWRsZS5nZW5lcmF0ZWRMaW5lXG4gICAgICAgICA/IHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZENvbHVtbiAtIDFcbiAgICAgICAgIDogMCksXG4gICAgICBiaWFzOiBhQXJncy5iaWFzXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5oYXNDb250ZW50c09mQWxsU291cmNlcyA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9oYXNDb250ZW50c09mQWxsU291cmNlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VjdGlvbnMuZXZlcnkoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiBzLmNvbnN1bWVyLmhhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCk7XG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlIGNvbnRlbnQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIHRoZSB1cmwgb2YgdGhlXG4gKiBvcmlnaW5hbCBzb3VyY2UgZmlsZS4gUmV0dXJucyBudWxsIGlmIG5vIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50IGlzXG4gKiBhdmFpbGFibGUuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9zb3VyY2VDb250ZW50Rm9yKGFTb3VyY2UsIG51bGxPbk1pc3NpbmcpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICB2YXIgY29udGVudCA9IHNlY3Rpb24uY29uc3VtZXIuc291cmNlQ29udGVudEZvcihhU291cmNlLCB0cnVlKTtcbiAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBhU291cmNlICsgJ1wiIGlzIG5vdCBpbiB0aGUgU291cmNlTWFwLicpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwb3NpdGlvbnMgcHJvdmlkZWQuIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoXG4gKiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIGZpbGVuYW1lIG9mIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBjb2x1bW5cbiAqICAgICBudW1iZXIgaXMgMC1iYXNlZC5cbiAqXG4gKiBhbmQgYW4gb2JqZWN0IGlzIHJldHVybmVkIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLiBcbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZ2VuZXJhdGVkUG9zaXRpb25Gb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3NlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VjdGlvbiA9IHRoaXMuX3NlY3Rpb25zW2ldO1xuXG4gICAgICAvLyBPbmx5IGNvbnNpZGVyIHRoaXMgc2VjdGlvbiBpZiB0aGUgcmVxdWVzdGVkIHNvdXJjZSBpcyBpbiB0aGUgbGlzdCBvZlxuICAgICAgLy8gc291cmNlcyBvZiB0aGUgY29uc3VtZXIuXG4gICAgICBpZiAoc2VjdGlvbi5jb25zdW1lci5fZmluZFNvdXJjZUluZGV4KHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJykpID09PSAtMSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBnZW5lcmF0ZWRQb3NpdGlvbiA9IHNlY3Rpb24uY29uc3VtZXIuZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpO1xuICAgICAgaWYgKGdlbmVyYXRlZFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciByZXQgPSB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkUG9zaXRpb24ubGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkUG9zaXRpb24uY29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBnZW5lcmF0ZWRQb3NpdGlvbi5saW5lXG4gICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICAgOiAwKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX3BhcnNlTWFwcGluZ3MgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfcGFyc2VNYXBwaW5ncyhhU3RyLCBhU291cmNlUm9vdCkge1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcbiAgICAgIHZhciBzZWN0aW9uTWFwcGluZ3MgPSBzZWN0aW9uLmNvbnN1bWVyLl9nZW5lcmF0ZWRNYXBwaW5ncztcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VjdGlvbk1hcHBpbmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHZhciBtYXBwaW5nID0gc2VjdGlvbk1hcHBpbmdzW2pdO1xuXG4gICAgICAgIHZhciBzb3VyY2UgPSBzZWN0aW9uLmNvbnN1bWVyLl9zb3VyY2VzLmF0KG1hcHBpbmcuc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdXRpbC5jb21wdXRlU291cmNlVVJMKHNlY3Rpb24uY29uc3VtZXIuc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgICB0aGlzLl9zb3VyY2VzLmFkZChzb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSB0aGlzLl9zb3VyY2VzLmluZGV4T2Yoc291cmNlKTtcblxuICAgICAgICB2YXIgbmFtZSA9IG51bGw7XG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUpIHtcbiAgICAgICAgICBuYW1lID0gc2VjdGlvbi5jb25zdW1lci5fbmFtZXMuYXQobWFwcGluZy5uYW1lKTtcbiAgICAgICAgICB0aGlzLl9uYW1lcy5hZGQobmFtZSk7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgbWFwcGluZ3MgY29taW5nIGZyb20gdGhlIGNvbnN1bWVyIGZvciB0aGUgc2VjdGlvbiBoYXZlXG4gICAgICAgIC8vIGdlbmVyYXRlZCBwb3NpdGlvbnMgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBzZWN0aW9uLCBzbyB3ZVxuICAgICAgICAvLyBuZWVkIHRvIG9mZnNldCB0aGVtIHRvIGJlIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgY29uY2F0ZW5hdGVkXG4gICAgICAgIC8vIGdlbmVyYXRlZCBmaWxlLlxuICAgICAgICB2YXIgYWRqdXN0ZWRNYXBwaW5nID0ge1xuICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSAtIDEpLFxuICAgICAgICAgIGdlbmVyYXRlZENvbHVtbjogbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgPT09IG1hcHBpbmcuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICAgICA6IDApLFxuICAgICAgICAgIG9yaWdpbmFsTGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRqdXN0ZWRNYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncy5wdXNoKGFkanVzdGVkTWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQodGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKTtcbiAgICBxdWlja1NvcnQodGhpcy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICB9O1xuXG5leHBvcnRzLkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lciA9IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxuZXhwb3J0cy5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5leHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EID0gMjtcblxuLyoqXG4gKiBSZWN1cnNpdmUgaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaC5cbiAqXG4gKiBAcGFyYW0gYUxvdyBJbmRpY2VzIGhlcmUgYW5kIGxvd2VyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gKiBAcGFyYW0gYUhpZ2ggSW5kaWNlcyBoZXJlIGFuZCBoaWdoZXIgZG8gbm90IGNvbnRhaW4gdGhlIG5lZWRsZS5cbiAqIEBwYXJhbSBhTmVlZGxlIFRoZSBlbGVtZW50IGJlaW5nIHNlYXJjaGVkIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIG5vbi1lbXB0eSBhcnJheSBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBGdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gZWxlbWVudHMgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEuXG4gKiBAcGFyYW0gYUJpYXMgRWl0aGVyICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnIG9yXG4gKiAgICAgJ2JpbmFyeVNlYXJjaC5MRUFTVF9VUFBFUl9CT1VORCcuIFNwZWNpZmllcyB3aGV0aGVyIHRvIHJldHVybiB0aGVcbiAqICAgICBjbG9zZXN0IGVsZW1lbnQgdGhhdCBpcyBzbWFsbGVyIHRoYW4gb3IgZ3JlYXRlciB0aGFuIHRoZSBvbmUgd2UgYXJlXG4gKiAgICAgc2VhcmNoaW5nIGZvciwgcmVzcGVjdGl2ZWx5LCBpZiB0aGUgZXhhY3QgZWxlbWVudCBjYW5ub3QgYmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgLy8gVGhpcyBmdW5jdGlvbiB0ZXJtaW5hdGVzIHdoZW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgaXMgdHJ1ZTpcbiAgLy9cbiAgLy8gICAxLiBXZSBmaW5kIHRoZSBleGFjdCBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgLy9cbiAgLy8gICAyLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGJ1dCB3ZSBjYW4gcmV0dXJuIHRoZSBpbmRleCBvZlxuICAvLyAgICAgIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudC5cbiAgLy9cbiAgLy8gICAzLiBXZSBkaWQgbm90IGZpbmQgdGhlIGV4YWN0IGVsZW1lbnQsIGFuZCB0aGVyZSBpcyBubyBuZXh0LWNsb3Nlc3RcbiAgLy8gICAgICBlbGVtZW50IHRoYW4gdGhlIG9uZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgc28gd2UgcmV0dXJuIC0xLlxuICB2YXIgbWlkID0gTWF0aC5mbG9vcigoYUhpZ2ggLSBhTG93KSAvIDIpICsgYUxvdztcbiAgdmFyIGNtcCA9IGFDb21wYXJlKGFOZWVkbGUsIGFIYXlzdGFja1ttaWRdLCB0cnVlKTtcbiAgaWYgKGNtcCA9PT0gMCkge1xuICAgIC8vIEZvdW5kIHRoZSBlbGVtZW50IHdlIGFyZSBsb29raW5nIGZvci5cbiAgICByZXR1cm4gbWlkO1xuICB9XG4gIGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGdyZWF0ZXIgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAoYUhpZ2ggLSBtaWQgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2gobWlkLCBhSGlnaCwgYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpO1xuICAgIH1cblxuICAgIC8vIFRoZSBleGFjdCBuZWVkbGUgZWxlbWVudCB3YXMgbm90IGZvdW5kIGluIHRoaXMgaGF5c3RhY2suIERldGVybWluZSBpZlxuICAgIC8vIHdlIGFyZSBpbiB0ZXJtaW5hdGlvbiBjYXNlICgzKSBvciAoMikgYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgdGhpbmcuXG4gICAgaWYgKGFCaWFzID09IGV4cG9ydHMuTEVBU1RfVVBQRVJfQk9VTkQpIHtcbiAgICAgIHJldHVybiBhSGlnaCA8IGFIYXlzdGFjay5sZW5ndGggPyBhSGlnaCA6IC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICAvLyBPdXIgbmVlZGxlIGlzIGxlc3MgdGhhbiBhSGF5c3RhY2tbbWlkXS5cbiAgICBpZiAobWlkIC0gYUxvdyA+IDEpIHtcbiAgICAgIC8vIFRoZSBlbGVtZW50IGlzIGluIHRoZSBsb3dlciBoYWxmLlxuICAgICAgcmV0dXJuIHJlY3Vyc2l2ZVNlYXJjaChhTG93LCBtaWQsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICB9XG5cbiAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgIGlmIChhQmlhcyA9PSBleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EKSB7XG4gICAgICByZXR1cm4gbWlkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYUxvdyA8IDAgPyAtMSA6IGFMb3c7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBiaW5hcnkgc2VhcmNoIHdoaWNoIHdpbGwgYWx3YXlzIHRyeSBhbmQgcmV0dXJuXG4gKiB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgZWxlbWVudCBpZiB0aGVyZSBpcyBubyBleGFjdCBoaXQuIFRoaXMgaXMgYmVjYXVzZVxuICogbWFwcGluZ3MgYmV0d2VlbiBvcmlnaW5hbCBhbmQgZ2VuZXJhdGVkIGxpbmUvY29sIHBhaXJzIGFyZSBzaW5nbGUgcG9pbnRzLFxuICogYW5kIHRoZXJlIGlzIGFuIGltcGxpY2l0IHJlZ2lvbiBiZXR3ZWVuIGVhY2ggb2YgdGhlbSwgc28gYSBtaXNzIGp1c3QgbWVhbnNcbiAqIHRoYXQgeW91IGFyZW4ndCBvbiB0aGUgdmVyeSBzdGFydCBvZiBhIHJlZ2lvbi5cbiAqXG4gKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCB5b3UgYXJlIGxvb2tpbmcgZm9yLlxuICogQHBhcmFtIGFIYXlzdGFjayBUaGUgYXJyYXkgdGhhdCBpcyBiZWluZyBzZWFyY2hlZC5cbiAqIEBwYXJhbSBhQ29tcGFyZSBBIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHRoZSBuZWVkbGUgYW5kIGFuIGVsZW1lbnQgaW4gdGhlXG4gKiAgICAgYXJyYXkgYW5kIHJldHVybnMgLTEsIDAsIG9yIDEgZGVwZW5kaW5nIG9uIHdoZXRoZXIgdGhlIG5lZWRsZSBpcyBsZXNzXG4gKiAgICAgdGhhbiwgZXF1YWwgdG8sIG9yIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCwgcmVzcGVjdGl2ZWx5LlxuICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdiaW5hcnlTZWFyY2guR1JFQVRFU1RfTE9XRVJfQk9VTkQnLlxuICovXG5leHBvcnRzLnNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaChhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcykge1xuICBpZiAoYUhheXN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIHZhciBpbmRleCA9IHJlY3Vyc2l2ZVNlYXJjaCgtMSwgYUhheXN0YWNrLmxlbmd0aCwgYU5lZWRsZSwgYUhheXN0YWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYUNvbXBhcmUsIGFCaWFzIHx8IGV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQpO1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLy8gV2UgaGF2ZSBmb3VuZCBlaXRoZXIgdGhlIGV4YWN0IGVsZW1lbnQsIG9yIHRoZSBuZXh0LWNsb3Nlc3QgZWxlbWVudCB0aGFuXG4gIC8vIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IuIEhvd2V2ZXIsIHRoZXJlIG1heSBiZSBtb3JlIHRoYW4gb25lIHN1Y2hcbiAgLy8gZWxlbWVudC4gTWFrZSBzdXJlIHdlIGFsd2F5cyByZXR1cm4gdGhlIHNtYWxsZXN0IG9mIHRoZXNlLlxuICB3aGlsZSAoaW5kZXggLSAxID49IDApIHtcbiAgICBpZiAoYUNvbXBhcmUoYUhheXN0YWNrW2luZGV4XSwgYUhheXN0YWNrW2luZGV4IC0gMV0sIHRydWUpICE9PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLS1pbmRleDtcbiAgfVxuXG4gIHJldHVybiBpbmRleDtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbi8vIEl0IHR1cm5zIG91dCB0aGF0IHNvbWUgKG1vc3Q/KSBKYXZhU2NyaXB0IGVuZ2luZXMgZG9uJ3Qgc2VsZi1ob3N0XG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgLiBUaGlzIG1ha2VzIHNlbnNlIGJlY2F1c2UgQysrIHdpbGwgbGlrZWx5IHJlbWFpblxuLy8gZmFzdGVyIHRoYW4gSlMgd2hlbiBkb2luZyByYXcgQ1BVLWludGVuc2l2ZSBzb3J0aW5nLiBIb3dldmVyLCB3aGVuIHVzaW5nIGFcbi8vIGN1c3RvbSBjb21wYXJhdG9yIGZ1bmN0aW9uLCBjYWxsaW5nIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gdGhlIFZNJ3MgQysrIGFuZFxuLy8gSklUJ2QgSlMgaXMgcmF0aGVyIHNsb3cgKmFuZCogbG9zZXMgSklUIHR5cGUgaW5mb3JtYXRpb24sIHJlc3VsdGluZyBpblxuLy8gd29yc2UgZ2VuZXJhdGVkIGNvZGUgZm9yIHRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRoYW4gd291bGQgYmUgb3B0aW1hbC4gSW5cbi8vIGZhY3QsIHdoZW4gc29ydGluZyB3aXRoIGEgY29tcGFyYXRvciwgdGhlc2UgY29zdHMgb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIG9mXG4vLyBzb3J0aW5nIGluIEMrKy4gQnkgdXNpbmcgb3VyIG93biBKUy1pbXBsZW1lbnRlZCBRdWljayBTb3J0IChiZWxvdyksIHdlIGdldFxuLy8gYSB+MzUwMG1zIG1lYW4gc3BlZWQtdXAgaW4gYGJlbmNoL2JlbmNoLmh0bWxgLlxuXG4vKipcbiAqIFN3YXAgdGhlIGVsZW1lbnRzIGluZGV4ZWQgYnkgYHhgIGFuZCBgeWAgaW4gdGhlIGFycmF5IGBhcnlgLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIFRoZSBhcnJheS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmaXJzdCBpdGVtLlxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqICAgICAgICBUaGUgaW5kZXggb2YgdGhlIHNlY29uZCBpdGVtLlxuICovXG5mdW5jdGlvbiBzd2FwKGFyeSwgeCwgeSkge1xuICB2YXIgdGVtcCA9IGFyeVt4XTtcbiAgYXJ5W3hdID0gYXJ5W3ldO1xuICBhcnlbeV0gPSB0ZW1wO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gaW50ZWdlciB3aXRoaW4gdGhlIHJhbmdlIGBsb3cgLi4gaGlnaGAgaW5jbHVzaXZlLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBsb3dcbiAqICAgICAgICBUaGUgbG93ZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGhpZ2hcbiAqICAgICAgICBUaGUgdXBwZXIgYm91bmQgb24gdGhlIHJhbmdlLlxuICovXG5mdW5jdGlvbiByYW5kb21JbnRJblJhbmdlKGxvdywgaGlnaCkge1xuICByZXR1cm4gTWF0aC5yb3VuZChsb3cgKyAoTWF0aC5yYW5kb20oKSAqIChoaWdoIC0gbG93KSkpO1xufVxuXG4vKipcbiAqIFRoZSBRdWljayBTb3J0IGFsZ29yaXRobS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBwXG4gKiAgICAgICAgU3RhcnQgaW5kZXggb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gclxuICogICAgICAgIEVuZCBpbmRleCBvZiB0aGUgYXJyYXlcbiAqL1xuZnVuY3Rpb24gZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCByKSB7XG4gIC8vIElmIG91ciBsb3dlciBib3VuZCBpcyBsZXNzIHRoYW4gb3VyIHVwcGVyIGJvdW5kLCB3ZSAoMSkgcGFydGl0aW9uIHRoZVxuICAvLyBhcnJheSBpbnRvIHR3byBwaWVjZXMgYW5kICgyKSByZWN1cnNlIG9uIGVhY2ggaGFsZi4gSWYgaXQgaXMgbm90LCB0aGlzIGlzXG4gIC8vIHRoZSBlbXB0eSBhcnJheSBhbmQgb3VyIGJhc2UgY2FzZS5cblxuICBpZiAocCA8IHIpIHtcbiAgICAvLyAoMSkgUGFydGl0aW9uaW5nLlxuICAgIC8vXG4gICAgLy8gVGhlIHBhcnRpdGlvbmluZyBjaG9vc2VzIGEgcGl2b3QgYmV0d2VlbiBgcGAgYW5kIGByYCBhbmQgbW92ZXMgYWxsXG4gICAgLy8gZWxlbWVudHMgdGhhdCBhcmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdCB0byB0aGUgYmVmb3JlIGl0LCBhbmRcbiAgICAvLyBhbGwgdGhlIGVsZW1lbnRzIHRoYXQgYXJlIGdyZWF0ZXIgdGhhbiBpdCBhZnRlciBpdC4gVGhlIGVmZmVjdCBpcyB0aGF0XG4gICAgLy8gb25jZSBwYXJ0aXRpb24gaXMgZG9uZSwgdGhlIHBpdm90IGlzIGluIHRoZSBleGFjdCBwbGFjZSBpdCB3aWxsIGJlIHdoZW5cbiAgICAvLyB0aGUgYXJyYXkgaXMgcHV0IGluIHNvcnRlZCBvcmRlciwgYW5kIGl0IHdpbGwgbm90IG5lZWQgdG8gYmUgbW92ZWRcbiAgICAvLyBhZ2Fpbi4gVGhpcyBydW5zIGluIE8obikgdGltZS5cblxuICAgIC8vIEFsd2F5cyBjaG9vc2UgYSByYW5kb20gcGl2b3Qgc28gdGhhdCBhbiBpbnB1dCBhcnJheSB3aGljaCBpcyByZXZlcnNlXG4gICAgLy8gc29ydGVkIGRvZXMgbm90IGNhdXNlIE8obl4yKSBydW5uaW5nIHRpbWUuXG4gICAgdmFyIHBpdm90SW5kZXggPSByYW5kb21JbnRJblJhbmdlKHAsIHIpO1xuICAgIHZhciBpID0gcCAtIDE7XG5cbiAgICBzd2FwKGFyeSwgcGl2b3RJbmRleCwgcik7XG4gICAgdmFyIHBpdm90ID0gYXJ5W3JdO1xuXG4gICAgLy8gSW1tZWRpYXRlbHkgYWZ0ZXIgYGpgIGlzIGluY3JlbWVudGVkIGluIHRoaXMgbG9vcCwgdGhlIGZvbGxvd2luZyBob2xkXG4gICAgLy8gdHJ1ZTpcbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbcCAuLiBpXWAgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHRoZSBwaXZvdC5cbiAgICAvL1xuICAgIC8vICAgKiBFdmVyeSBlbGVtZW50IGluIGBhcnlbaSsxIC4uIGotMV1gIGlzIGdyZWF0ZXIgdGhhbiB0aGUgcGl2b3QuXG4gICAgZm9yICh2YXIgaiA9IHA7IGogPCByOyBqKyspIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFyeVtqXSwgcGl2b3QpIDw9IDApIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBzd2FwKGFyeSwgaSwgaik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dhcChhcnksIGkgKyAxLCBqKTtcbiAgICB2YXIgcSA9IGkgKyAxO1xuXG4gICAgLy8gKDIpIFJlY3Vyc2Ugb24gZWFjaCBoYWxmLlxuXG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBwLCBxIC0gMSk7XG4gICAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCBxICsgMSwgcik7XG4gIH1cbn1cblxuLyoqXG4gKiBTb3J0IHRoZSBnaXZlbiBhcnJheSBpbi1wbGFjZSB3aXRoIHRoZSBnaXZlbiBjb21wYXJhdG9yIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyeVxuICogICAgICAgIEFuIGFycmF5IHRvIHNvcnQuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yXG4gKiAgICAgICAgRnVuY3Rpb24gdG8gdXNlIHRvIGNvbXBhcmUgdHdvIGl0ZW1zLlxuICovXG5leHBvcnRzLnF1aWNrU29ydCA9IGZ1bmN0aW9uIChhcnksIGNvbXBhcmF0b3IpIHtcbiAgZG9RdWlja1NvcnQoYXJ5LCBjb21wYXJhdG9yLCAwLCBhcnkubGVuZ3RoIC0gMSk7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9zb3VyY2UtbWFwLWdlbmVyYXRvcicpLlNvdXJjZU1hcEdlbmVyYXRvcjtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8vIE1hdGNoZXMgYSBXaW5kb3dzLXN0eWxlIGBcXHJcXG5gIG5ld2xpbmUgb3IgYSBgXFxuYCBuZXdsaW5lIHVzZWQgYnkgYWxsIG90aGVyXG4vLyBvcGVyYXRpbmcgc3lzdGVtcyB0aGVzZSBkYXlzIChjYXB0dXJpbmcgdGhlIHJlc3VsdCkuXG52YXIgUkVHRVhfTkVXTElORSA9IC8oXFxyP1xcbikvO1xuXG4vLyBOZXdsaW5lIGNoYXJhY3RlciBjb2RlIGZvciBjaGFyQ29kZUF0KCkgY29tcGFyaXNvbnNcbnZhciBORVdMSU5FX0NPREUgPSAxMDtcblxuLy8gUHJpdmF0ZSBzeW1ib2wgZm9yIGlkZW50aWZ5aW5nIGBTb3VyY2VOb2RlYHMgd2hlbiBtdWx0aXBsZSB2ZXJzaW9ucyBvZlxuLy8gdGhlIHNvdXJjZS1tYXAgbGlicmFyeSBhcmUgbG9hZGVkLiBUaGlzIE1VU1QgTk9UIENIQU5HRSBhY3Jvc3Ncbi8vIHZlcnNpb25zIVxudmFyIGlzU291cmNlTm9kZSA9IFwiJCQkaXNTb3VyY2VOb2RlJCQkXCI7XG5cbi8qKlxuICogU291cmNlTm9kZXMgcHJvdmlkZSBhIHdheSB0byBhYnN0cmFjdCBvdmVyIGludGVycG9sYXRpbmcvY29uY2F0ZW5hdGluZ1xuICogc25pcHBldHMgb2YgZ2VuZXJhdGVkIEphdmFTY3JpcHQgc291cmNlIGNvZGUgd2hpbGUgbWFpbnRhaW5pbmcgdGhlIGxpbmUgYW5kXG4gKiBjb2x1bW4gaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcGFyYW0gYUxpbmUgVGhlIG9yaWdpbmFsIGxpbmUgbnVtYmVyLlxuICogQHBhcmFtIGFDb2x1bW4gVGhlIG9yaWdpbmFsIGNvbHVtbiBudW1iZXIuXG4gKiBAcGFyYW0gYVNvdXJjZSBUaGUgb3JpZ2luYWwgc291cmNlJ3MgZmlsZW5hbWUuXG4gKiBAcGFyYW0gYUNodW5rcyBPcHRpb25hbC4gQW4gYXJyYXkgb2Ygc3RyaW5ncyB3aGljaCBhcmUgc25pcHBldHMgb2ZcbiAqICAgICAgICBnZW5lcmF0ZWQgSlMsIG9yIG90aGVyIFNvdXJjZU5vZGVzLlxuICogQHBhcmFtIGFOYW1lIFRoZSBvcmlnaW5hbCBpZGVudGlmaWVyLlxuICovXG5mdW5jdGlvbiBTb3VyY2VOb2RlKGFMaW5lLCBhQ29sdW1uLCBhU291cmNlLCBhQ2h1bmtzLCBhTmFtZSkge1xuICB0aGlzLmNoaWxkcmVuID0gW107XG4gIHRoaXMuc291cmNlQ29udGVudHMgPSB7fTtcbiAgdGhpcy5saW5lID0gYUxpbmUgPT0gbnVsbCA/IG51bGwgOiBhTGluZTtcbiAgdGhpcy5jb2x1bW4gPSBhQ29sdW1uID09IG51bGwgPyBudWxsIDogYUNvbHVtbjtcbiAgdGhpcy5zb3VyY2UgPSBhU291cmNlID09IG51bGwgPyBudWxsIDogYVNvdXJjZTtcbiAgdGhpcy5uYW1lID0gYU5hbWUgPT0gbnVsbCA/IG51bGwgOiBhTmFtZTtcbiAgdGhpc1tpc1NvdXJjZU5vZGVdID0gdHJ1ZTtcbiAgaWYgKGFDaHVua3MgIT0gbnVsbCkgdGhpcy5hZGQoYUNodW5rcyk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFNvdXJjZU5vZGUgZnJvbSBnZW5lcmF0ZWQgY29kZSBhbmQgYSBTb3VyY2VNYXBDb25zdW1lci5cbiAqXG4gKiBAcGFyYW0gYUdlbmVyYXRlZENvZGUgVGhlIGdlbmVyYXRlZCBjb2RlXG4gKiBAcGFyYW0gYVNvdXJjZU1hcENvbnN1bWVyIFRoZSBTb3VyY2VNYXAgZm9yIHRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFSZWxhdGl2ZVBhdGggT3B0aW9uYWwuIFRoZSBwYXRoIHRoYXQgcmVsYXRpdmUgc291cmNlcyBpbiB0aGVcbiAqICAgICAgICBTb3VyY2VNYXBDb25zdW1lciBzaG91bGQgYmUgcmVsYXRpdmUgdG8uXG4gKi9cblNvdXJjZU5vZGUuZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX2Zyb21TdHJpbmdXaXRoU291cmNlTWFwKGFHZW5lcmF0ZWRDb2RlLCBhU291cmNlTWFwQ29uc3VtZXIsIGFSZWxhdGl2ZVBhdGgpIHtcbiAgICAvLyBUaGUgU291cmNlTm9kZSB3ZSB3YW50IHRvIGZpbGwgd2l0aCB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAgICAvLyBhbmQgdGhlIFNvdXJjZU1hcFxuICAgIHZhciBub2RlID0gbmV3IFNvdXJjZU5vZGUoKTtcblxuICAgIC8vIEFsbCBldmVuIGluZGljZXMgb2YgdGhpcyBhcnJheSBhcmUgb25lIGxpbmUgb2YgdGhlIGdlbmVyYXRlZCBjb2RlLFxuICAgIC8vIHdoaWxlIGFsbCBvZGQgaW5kaWNlcyBhcmUgdGhlIG5ld2xpbmVzIGJldHdlZW4gdHdvIGFkamFjZW50IGxpbmVzXG4gICAgLy8gKHNpbmNlIGBSRUdFWF9ORVdMSU5FYCBjYXB0dXJlcyBpdHMgbWF0Y2gpLlxuICAgIC8vIFByb2Nlc3NlZCBmcmFnbWVudHMgYXJlIGFjY2Vzc2VkIGJ5IGNhbGxpbmcgYHNoaWZ0TmV4dExpbmVgLlxuICAgIHZhciByZW1haW5pbmdMaW5lcyA9IGFHZW5lcmF0ZWRDb2RlLnNwbGl0KFJFR0VYX05FV0xJTkUpO1xuICAgIHZhciByZW1haW5pbmdMaW5lc0luZGV4ID0gMDtcbiAgICB2YXIgc2hpZnROZXh0TGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxpbmVDb250ZW50cyA9IGdldE5leHRMaW5lKCk7XG4gICAgICAvLyBUaGUgbGFzdCBsaW5lIG9mIGEgZmlsZSBtaWdodCBub3QgaGF2ZSBhIG5ld2xpbmUuXG4gICAgICB2YXIgbmV3TGluZSA9IGdldE5leHRMaW5lKCkgfHwgXCJcIjtcbiAgICAgIHJldHVybiBsaW5lQ29udGVudHMgKyBuZXdMaW5lO1xuXG4gICAgICBmdW5jdGlvbiBnZXROZXh0TGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGggP1xuICAgICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleCsrXSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gV2UgbmVlZCB0byByZW1lbWJlciB0aGUgcG9zaXRpb24gb2YgXCJyZW1haW5pbmdMaW5lc1wiXG4gICAgdmFyIGxhc3RHZW5lcmF0ZWRMaW5lID0gMSwgbGFzdEdlbmVyYXRlZENvbHVtbiA9IDA7XG5cbiAgICAvLyBUaGUgZ2VuZXJhdGUgU291cmNlTm9kZXMgd2UgbmVlZCBhIGNvZGUgcmFuZ2UuXG4gICAgLy8gVG8gZXh0cmFjdCBpdCBjdXJyZW50IGFuZCBsYXN0IG1hcHBpbmcgaXMgdXNlZC5cbiAgICAvLyBIZXJlIHdlIHN0b3JlIHRoZSBsYXN0IG1hcHBpbmcuXG4gICAgdmFyIGxhc3RNYXBwaW5nID0gbnVsbDtcblxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFdlIGFkZCB0aGUgY29kZSBmcm9tIFwibGFzdE1hcHBpbmdcIiB0byBcIm1hcHBpbmdcIjpcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgdGhlcmUgaXMgYSBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICBpZiAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICAvLyBBc3NvY2lhdGUgZmlyc3QgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgICAgICAgIC8vIFRoZSByZW1haW5pbmcgY29kZSBpcyBhZGRlZCB3aXRob3V0IG1hcHBpbmdcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGVyZSBpcyBubyBuZXcgbGluZSBpbiBiZXR3ZWVuLlxuICAgICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgY29kZSBiZXR3ZWVuIFwibGFzdEdlbmVyYXRlZENvbHVtblwiIGFuZFxuICAgICAgICAgIC8vIFwibWFwcGluZy5nZW5lcmF0ZWRDb2x1bW5cIiB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICAgIHZhciBuZXh0TGluZSA9IHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdIHx8ICcnO1xuICAgICAgICAgIHZhciBjb2RlID0gbmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgICAgIGFkZE1hcHBpbmdXaXRoQ29kZShsYXN0TWFwcGluZywgY29kZSk7XG4gICAgICAgICAgLy8gTm8gbW9yZSByZW1haW5pbmcgY29kZSwgY29udGludWVcbiAgICAgICAgICBsYXN0TWFwcGluZyA9IG1hcHBpbmc7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBXZSBhZGQgdGhlIGdlbmVyYXRlZCBjb2RlIHVudGlsIHRoZSBmaXJzdCBtYXBwaW5nXG4gICAgICAvLyB0byB0aGUgU291cmNlTm9kZSB3aXRob3V0IGFueSBtYXBwaW5nLlxuICAgICAgLy8gRWFjaCBsaW5lIGlzIGFkZGVkIGFzIHNlcGFyYXRlIHN0cmluZy5cbiAgICAgIHdoaWxlIChsYXN0R2VuZXJhdGVkTGluZSA8IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICBub2RlLmFkZChzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgICBsYXN0R2VuZXJhdGVkTGluZSsrO1xuICAgICAgfVxuICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRDb2x1bW4gPCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikge1xuICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSB8fCAnJztcbiAgICAgICAgbm9kZS5hZGQobmV4dExpbmUuc3Vic3RyKDAsIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKSk7XG4gICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXhdID0gbmV4dExpbmUuc3Vic3RyKG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuICAgICAgfVxuICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgIH0sIHRoaXMpO1xuICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBtYXBwaW5ncy5cbiAgICBpZiAocmVtYWluaW5nTGluZXNJbmRleCA8IHJlbWFpbmluZ0xpbmVzLmxlbmd0aCkge1xuICAgICAgaWYgKGxhc3RNYXBwaW5nKSB7XG4gICAgICAgIC8vIEFzc29jaWF0ZSB0aGUgcmVtYWluaW5nIGNvZGUgaW4gdGhlIGN1cnJlbnQgbGluZSB3aXRoIFwibGFzdE1hcHBpbmdcIlxuICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICB9XG4gICAgICAvLyBhbmQgYWRkIHRoZSByZW1haW5pbmcgbGluZXMgd2l0aG91dCBhbnkgbWFwcGluZ1xuICAgICAgbm9kZS5hZGQocmVtYWluaW5nTGluZXMuc3BsaWNlKHJlbWFpbmluZ0xpbmVzSW5kZXgpLmpvaW4oXCJcIikpO1xuICAgIH1cblxuICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnQgaW50byBTb3VyY2VOb2RlXG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFSZWxhdGl2ZVBhdGggIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLmpvaW4oYVJlbGF0aXZlUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5vZGU7XG5cbiAgICBmdW5jdGlvbiBhZGRNYXBwaW5nV2l0aENvZGUobWFwcGluZywgY29kZSkge1xuICAgICAgaWYgKG1hcHBpbmcgPT09IG51bGwgfHwgbWFwcGluZy5zb3VyY2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub2RlLmFkZChjb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzb3VyY2UgPSBhUmVsYXRpdmVQYXRoXG4gICAgICAgICAgPyB1dGlsLmpvaW4oYVJlbGF0aXZlUGF0aCwgbWFwcGluZy5zb3VyY2UpXG4gICAgICAgICAgOiBtYXBwaW5nLnNvdXJjZTtcbiAgICAgICAgbm9kZS5hZGQobmV3IFNvdXJjZU5vZGUobWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZy5uYW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGlzIHNvdXJjZSBub2RlLlxuICpcbiAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfYWRkKGFDaHVuaykge1xuICBpZiAoQXJyYXkuaXNBcnJheShhQ2h1bmspKSB7XG4gICAgYUNodW5rLmZvckVhY2goZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICB0aGlzLmFkZChjaHVuayk7XG4gICAgfSwgdGhpcyk7XG4gIH1cbiAgZWxzZSBpZiAoYUNodW5rW2lzU291cmNlTm9kZV0gfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmIChhQ2h1bmspIHtcbiAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChhQ2h1bmspO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEFkZCBhIGNodW5rIG9mIGdlbmVyYXRlZCBKUyB0byB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgc291cmNlIG5vZGUuXG4gKlxuICogQHBhcmFtIGFDaHVuayBBIHN0cmluZyBzbmlwcGV0IG9mIGdlbmVyYXRlZCBKUyBjb2RlLCBhbm90aGVyIGluc3RhbmNlIG9mXG4gKiAgICAgICAgU291cmNlTm9kZSwgb3IgYW4gYXJyYXkgd2hlcmUgZWFjaCBtZW1iZXIgaXMgb25lIG9mIHRob3NlIHRoaW5ncy5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfcHJlcGVuZChhQ2h1bmspIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgIGZvciAodmFyIGkgPSBhQ2h1bmsubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB0aGlzLnByZXBlbmQoYUNodW5rW2ldKTtcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAoYUNodW5rW2lzU291cmNlTm9kZV0gfHwgdHlwZW9mIGFDaHVuayA9PT0gXCJzdHJpbmdcIikge1xuICAgIHRoaXMuY2hpbGRyZW4udW5zaGlmdChhQ2h1bmspO1xuICB9XG4gIGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBcIkV4cGVjdGVkIGEgU291cmNlTm9kZSwgc3RyaW5nLCBvciBhbiBhcnJheSBvZiBTb3VyY2VOb2RlcyBhbmQgc3RyaW5ncy4gR290IFwiICsgYUNodW5rXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV2FsayBvdmVyIHRoZSB0cmVlIG9mIEpTIHNuaXBwZXRzIGluIHRoaXMgbm9kZSBhbmQgaXRzIGNoaWxkcmVuLiBUaGVcbiAqIHdhbGtpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIG9uY2UgZm9yIGVhY2ggc25pcHBldCBvZiBKUyBhbmQgaXMgcGFzc2VkIHRoYXRcbiAqIHNuaXBwZXQgYW5kIHRoZSBpdHMgb3JpZ2luYWwgYXNzb2NpYXRlZCBzb3VyY2UncyBsaW5lL2NvbHVtbiBsb2NhdGlvbi5cbiAqXG4gKiBAcGFyYW0gYUZuIFRoZSB0cmF2ZXJzYWwgZnVuY3Rpb24uXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGsoYUZuKSB7XG4gIHZhciBjaHVuaztcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjaHVuayA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgaWYgKGNodW5rW2lzU291cmNlTm9kZV0pIHtcbiAgICAgIGNodW5rLndhbGsoYUZuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAoY2h1bmsgIT09ICcnKSB7XG4gICAgICAgIGFGbihjaHVuaywgeyBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5saW5lLFxuICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiB0aGlzLmNvbHVtbixcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogTGlrZSBgU3RyaW5nLnByb3RvdHlwZS5qb2luYCBleGNlcHQgZm9yIFNvdXJjZU5vZGVzLiBJbnNlcnRzIGBhU3RyYCBiZXR3ZWVuXG4gKiBlYWNoIG9mIGB0aGlzLmNoaWxkcmVuYC5cbiAqXG4gKiBAcGFyYW0gYVNlcCBUaGUgc2VwYXJhdG9yLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24gU291cmNlTm9kZV9qb2luKGFTZXApIHtcbiAgdmFyIG5ld0NoaWxkcmVuO1xuICB2YXIgaTtcbiAgdmFyIGxlbiA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAobGVuID4gMCkge1xuICAgIG5ld0NoaWxkcmVuID0gW107XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbi0xOyBpKyspIHtcbiAgICAgIG5ld0NoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKGFTZXApO1xuICAgIH1cbiAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBuZXdDaGlsZHJlbjtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2FsbCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Ugb24gdGhlIHZlcnkgcmlnaHQtbW9zdCBzb3VyY2Ugc25pcHBldC4gVXNlZnVsXG4gKiBmb3IgdHJpbW1pbmcgd2hpdGVzcGFjZSBmcm9tIHRoZSBlbmQgb2YgYSBzb3VyY2Ugbm9kZSwgZXRjLlxuICpcbiAqIEBwYXJhbSBhUGF0dGVybiBUaGUgcGF0dGVybiB0byByZXBsYWNlLlxuICogQHBhcmFtIGFSZXBsYWNlbWVudCBUaGUgdGhpbmcgdG8gcmVwbGFjZSB0aGUgcGF0dGVybiB3aXRoLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5yZXBsYWNlUmlnaHQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3JlcGxhY2VSaWdodChhUGF0dGVybiwgYVJlcGxhY2VtZW50KSB7XG4gIHZhciBsYXN0Q2hpbGQgPSB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gIGlmIChsYXN0Q2hpbGRbaXNTb3VyY2VOb2RlXSkge1xuICAgIGxhc3RDaGlsZC5yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGxhc3RDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gPSBsYXN0Q2hpbGQucmVwbGFjZShhUGF0dGVybiwgYVJlcGxhY2VtZW50KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goJycucmVwbGFjZShhUGF0dGVybiwgYVJlcGxhY2VtZW50KSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGEgc291cmNlIGZpbGUuIFRoaXMgd2lsbCBiZSBhZGRlZCB0byB0aGUgU291cmNlTWFwR2VuZXJhdG9yXG4gKiBpbiB0aGUgc291cmNlc0NvbnRlbnQgZmllbGQuXG4gKlxuICogQHBhcmFtIGFTb3VyY2VGaWxlIFRoZSBmaWxlbmFtZSBvZiB0aGUgc291cmNlIGZpbGVcbiAqIEBwYXJhbSBhU291cmNlQ29udGVudCBUaGUgY29udGVudCBvZiB0aGUgc291cmNlIGZpbGVcbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuc2V0U291cmNlQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfc2V0U291cmNlQ29udGVudChhU291cmNlRmlsZSwgYVNvdXJjZUNvbnRlbnQpIHtcbiAgICB0aGlzLnNvdXJjZUNvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoYVNvdXJjZUZpbGUpXSA9IGFTb3VyY2VDb250ZW50O1xuICB9O1xuXG4vKipcbiAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBTb3VyY2VOb2Rlcy4gVGhlIHdhbGtpbmcgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoXG4gKiBzb3VyY2UgZmlsZSBjb250ZW50IGFuZCBpcyBwYXNzZWQgdGhlIGZpbGVuYW1lIGFuZCBzb3VyY2UgY29udGVudC5cbiAqXG4gKiBAcGFyYW0gYUZuIFRoZSB0cmF2ZXJzYWwgZnVuY3Rpb24uXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLndhbGtTb3VyY2VDb250ZW50cyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU5vZGVfd2Fsa1NvdXJjZUNvbnRlbnRzKGFGbikge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5jaGlsZHJlbltpXVtpc1NvdXJjZU5vZGVdKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW5baV0ud2Fsa1NvdXJjZUNvbnRlbnRzKGFGbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZXMgPSBPYmplY3Qua2V5cyh0aGlzLnNvdXJjZUNvbnRlbnRzKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYUZuKHV0aWwuZnJvbVNldFN0cmluZyhzb3VyY2VzW2ldKSwgdGhpcy5zb3VyY2VDb250ZW50c1tzb3VyY2VzW2ldXSk7XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIFJldHVybiB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc291cmNlIG5vZGUuIFdhbGtzIG92ZXIgdGhlIHRyZWVcbiAqIGFuZCBjb25jYXRlbmF0ZXMgYWxsIHRoZSB2YXJpb3VzIHNuaXBwZXRzIHRvZ2V0aGVyIHRvIG9uZSBzdHJpbmcuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gU291cmNlTm9kZV90b1N0cmluZygpIHtcbiAgdmFyIHN0ciA9IFwiXCI7XG4gIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmspIHtcbiAgICBzdHIgKz0gY2h1bms7XG4gIH0pO1xuICByZXR1cm4gc3RyO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBzb3VyY2Ugbm9kZSBhbG9uZyB3aXRoIGEgc291cmNlXG4gKiBtYXAuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnRvU3RyaW5nV2l0aFNvdXJjZU1hcCA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmdXaXRoU291cmNlTWFwKGFBcmdzKSB7XG4gIHZhciBnZW5lcmF0ZWQgPSB7XG4gICAgY29kZTogXCJcIixcbiAgICBsaW5lOiAxLFxuICAgIGNvbHVtbjogMFxuICB9O1xuICB2YXIgbWFwID0gbmV3IFNvdXJjZU1hcEdlbmVyYXRvcihhQXJncyk7XG4gIHZhciBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gIHZhciBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsTGluZSA9IG51bGw7XG4gIHZhciBsYXN0T3JpZ2luYWxDb2x1bW4gPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsTmFtZSA9IG51bGw7XG4gIHRoaXMud2FsayhmdW5jdGlvbiAoY2h1bmssIG9yaWdpbmFsKSB7XG4gICAgZ2VuZXJhdGVkLmNvZGUgKz0gY2h1bms7XG4gICAgaWYgKG9yaWdpbmFsLnNvdXJjZSAhPT0gbnVsbFxuICAgICAgICAmJiBvcmlnaW5hbC5saW5lICE9PSBudWxsXG4gICAgICAgICYmIG9yaWdpbmFsLmNvbHVtbiAhPT0gbnVsbCkge1xuICAgICAgaWYobGFzdE9yaWdpbmFsU291cmNlICE9PSBvcmlnaW5hbC5zb3VyY2VcbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbExpbmUgIT09IG9yaWdpbmFsLmxpbmVcbiAgICAgICAgIHx8IGxhc3RPcmlnaW5hbENvbHVtbiAhPT0gb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxOYW1lICE9PSBvcmlnaW5hbC5uYW1lKSB7XG4gICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgbGluZTogb3JpZ2luYWwubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gb3JpZ2luYWwuc291cmNlO1xuICAgICAgbGFzdE9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICBsYXN0T3JpZ2luYWxDb2x1bW4gPSBvcmlnaW5hbC5jb2x1bW47XG4gICAgICBsYXN0T3JpZ2luYWxOYW1lID0gb3JpZ2luYWwubmFtZTtcbiAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgbWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBsYXN0T3JpZ2luYWxTb3VyY2UgPSBudWxsO1xuICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpZHggPSAwLCBsZW5ndGggPSBjaHVuay5sZW5ndGg7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGlmIChjaHVuay5jaGFyQ29kZUF0KGlkeCkgPT09IE5FV0xJTkVfQ09ERSkge1xuICAgICAgICBnZW5lcmF0ZWQubGluZSsrO1xuICAgICAgICBnZW5lcmF0ZWQuY29sdW1uID0gMDtcbiAgICAgICAgLy8gTWFwcGluZ3MgZW5kIGF0IGVvbFxuICAgICAgICBpZiAoaWR4ICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlTWFwcGluZ0FjdGl2ZSkge1xuICAgICAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgICAgIHNvdXJjZTogb3JpZ2luYWwuc291cmNlLFxuICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgbGluZTogb3JpZ2luYWwubGluZSxcbiAgICAgICAgICAgICAgY29sdW1uOiBvcmlnaW5hbC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hbWU6IG9yaWdpbmFsLm5hbWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbisrO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHRoaXMud2Fsa1NvdXJjZUNvbnRlbnRzKGZ1bmN0aW9uIChzb3VyY2VGaWxlLCBzb3VyY2VDb250ZW50KSB7XG4gICAgbWFwLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgc291cmNlQ29udGVudCk7XG4gIH0pO1xuXG4gIHJldHVybiB7IGNvZGU6IGdlbmVyYXRlZC5jb2RlLCBtYXA6IG1hcCB9O1xufTtcblxuZXhwb3J0cy5Tb3VyY2VOb2RlID0gU291cmNlTm9kZTtcbiIsInZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcblxudmFyIGlzTW9kZXJuID0gKFxuICB0eXBlb2YgQnVmZmVyLmFsbG9jID09PSAnZnVuY3Rpb24nICYmXG4gIHR5cGVvZiBCdWZmZXIuYWxsb2NVbnNhZmUgPT09ICdmdW5jdGlvbicgJiZcbiAgdHlwZW9mIEJ1ZmZlci5mcm9tID09PSAnZnVuY3Rpb24nXG4pXG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIgKGlucHV0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGlucHV0KS5zbGljZSg4LCAtMSkgPT09ICdBcnJheUJ1ZmZlcidcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyIChvYmosIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBieXRlT2Zmc2V0ID4+Pj0gMFxuXG4gIHZhciBtYXhMZW5ndGggPSBvYmouYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXRcblxuICBpZiAobWF4TGVuZ3RoIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiJ29mZnNldCcgaXMgb3V0IG9mIGJvdW5kc1wiKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gbWF4TGVuZ3RoXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID4+Pj0gMFxuXG4gICAgaWYgKGxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCInbGVuZ3RoJyBpcyBvdXQgb2YgYm91bmRzXCIpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbShvYmouc2xpY2UoYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGxlbmd0aCkpXG4gICAgOiBuZXcgQnVmZmVyKG5ldyBVaW50OEFycmF5KG9iai5zbGljZShieXRlT2Zmc2V0LCBieXRlT2Zmc2V0ICsgbGVuZ3RoKSkpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgcmV0dXJuIGlzTW9kZXJuXG4gICAgPyBCdWZmZXIuZnJvbShzdHJpbmcsIGVuY29kaW5nKVxuICAgIDogbmV3IEJ1ZmZlcihzdHJpbmcsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBidWZmZXJGcm9tICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmIChpc0FycmF5QnVmZmVyKHZhbHVlKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gaXNNb2Rlcm5cbiAgICA/IEJ1ZmZlci5mcm9tKHZhbHVlKVxuICAgIDogbmV3IEJ1ZmZlcih2YWx1ZSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidWZmZXJGcm9tXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgUGFja2FnZUpzb24gZnJvbSBcIi4uLy4uL3BhY2thZ2UuanNvblwiO1xuXG52YXIganNvbiA9IFBhY2thZ2VKc29uLmRlZmF1bHQ7XG5cbmV4cG9ydCB7XG4gIGpzb24gLFxuICBcbn1cbi8qIGpzb24gTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBBcmdwYXJzZSBmcm9tIFwiYXJncGFyc2VcIjtcblxuZnVuY3Rpb24gbWFrZSh2ZXJzaW9uLCBwcm9nKSB7XG4gIHJldHVybiBuZXcgQXJncGFyc2UuQXJndW1lbnRQYXJzZXIoe1xuICAgICAgICAgICAgICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICAgICAgICAgICAgICBwcm9nOiBwcm9nXG4gICAgICAgICAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkQXJndW1lbnQoc2hvcnROYW1lLCBsb25nTmFtZSwgZGVzdCwgbWV0YXZhciwgcGFyc2VyKSB7XG4gIHBhcnNlci5hZGRBcmd1bWVudChbXG4gICAgICAgIHNob3J0TmFtZSxcbiAgICAgICAgbG9uZ05hbWVcbiAgICAgIF0sIHtcbiAgICAgICAgZGVzdDogZGVzdCxcbiAgICAgICAgbWV0YXZhcjogbWV0YXZhcixcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgIH0pO1xuICBcbn1cblxuZXhwb3J0IHtcbiAgbWFrZSAsXG4gIGFkZEFyZ3VtZW50ICxcbiAgXG59XG4vKiBhcmdwYXJzZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIFBhY2thZ2UgZnJvbSBcIi4vYmluZGluZ3MvUGFja2FnZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgQXJnUGFyc2UgZnJvbSBcIi4vYmluZGluZ3MvQXJnUGFyc2UuYnMuanNcIjtcblxuZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMocGFyYW0pIHtcbiAgdmFyIHBhcnNlciA9IEFyZ1BhcnNlLm1ha2UoUGFja2FnZS5qc29uLnZlcnNpb24sIFBhY2thZ2UuanNvbi5uYW1lKTtcbiAgQXJnUGFyc2UuYWRkQXJndW1lbnQoXCItc1wiLCBcIi0tc2l0ZS1uYW1lXCIsIFwic2l0ZU5hbWVcIiwgXCJTVFJJTkdcIiwgcGFyc2VyKTtcbiAgQXJnUGFyc2UuYWRkQXJndW1lbnQoXCItZVwiLCBcIi0tZW50cmllcy1kaXJlY3RvcnlcIiwgXCJlbnRyaWVzRGlyZWN0b3J5XCIsIFwiUEFUSFwiLCBwYXJzZXIpO1xuICBBcmdQYXJzZS5hZGRBcmd1bWVudChcIi1hXCIsIFwiLS1hYm91dC1wYXRoXCIsIFwiYWJvdXRQYXRoXCIsIFwiUEFUSFwiLCBwYXJzZXIpO1xuICBBcmdQYXJzZS5hZGRBcmd1bWVudChcIi1mXCIsIFwiLS1mYXZpY29uLXBhdGhcIiwgXCJmYXZpY29uUGF0aFwiLCBcIlBBVEhcIiwgcGFyc2VyKTtcbiAgQXJnUGFyc2UuYWRkQXJndW1lbnQoXCItdVwiLCBcIi0tdXBsb2Fkcy1kaXJlY3RvcnlcIiwgXCJ1cGxvYWRzRGlyZWN0b3J5XCIsIFwiUEFUSFwiLCBwYXJzZXIpO1xuICByZXR1cm4gcGFyc2VyLnBhcnNlQXJncygpO1xufVxuXG5leHBvcnQge1xuICBwYXJzZUFyZ3VtZW50cyAsXG4gIFxufVxuLyogUGFja2FnZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cblxuZnVuY3Rpb24gbWFrZSh5ZWFyLCBtb250aCwgZGF5LCBob3VyT3B0LCBtaW51dGVPcHQsIHBhcmFtKSB7XG4gIHZhciBob3VyID0gaG91ck9wdCAhPT0gdW5kZWZpbmVkID8gaG91ck9wdCA6IDA7XG4gIHZhciBtaW51dGUgPSBtaW51dGVPcHQgIT09IHVuZGVmaW5lZCA/IG1pbnV0ZU9wdCA6IDA7XG4gIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCBtb250aCAtIDEgfCAwLCBkYXksIGhvdXIsIG1pbnV0ZSk7XG59XG5cbmZ1bmN0aW9uIGdldE1vbnRoKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSArIDEgfCAwO1xufVxuXG5leHBvcnQge1xuICBtYWtlICxcbiAgZ2V0TW9udGggLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuXG5mdW5jdGlvbiBfXyh0YWcsIGJsb2NrKSB7XG4gIGJsb2NrLnRhZyA9IHRhZztcbiAgcmV0dXJuIGJsb2NrO1xufVxuXG5leHBvcnQge1xuICBfXyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5cbnZhciBvdXRfb2ZfbWVtb3J5ID0gLyogdHVwbGUgKi9bXG4gIFwiT3V0X29mX21lbW9yeVwiLFxuICAwXG5dO1xuXG52YXIgc3lzX2Vycm9yID0gLyogdHVwbGUgKi9bXG4gIFwiU3lzX2Vycm9yXCIsXG4gIC0xXG5dO1xuXG52YXIgZmFpbHVyZSA9IC8qIHR1cGxlICovW1xuICBcIkZhaWx1cmVcIixcbiAgLTJcbl07XG5cbnZhciBpbnZhbGlkX2FyZ3VtZW50ID0gLyogdHVwbGUgKi9bXG4gIFwiSW52YWxpZF9hcmd1bWVudFwiLFxuICAtM1xuXTtcblxudmFyIGVuZF9vZl9maWxlID0gLyogdHVwbGUgKi9bXG4gIFwiRW5kX29mX2ZpbGVcIixcbiAgLTRcbl07XG5cbnZhciBkaXZpc2lvbl9ieV96ZXJvID0gLyogdHVwbGUgKi9bXG4gIFwiRGl2aXNpb25fYnlfemVyb1wiLFxuICAtNVxuXTtcblxudmFyIG5vdF9mb3VuZCA9IC8qIHR1cGxlICovW1xuICBcIk5vdF9mb3VuZFwiLFxuICAtNlxuXTtcblxudmFyIG1hdGNoX2ZhaWx1cmUgPSAvKiB0dXBsZSAqL1tcbiAgXCJNYXRjaF9mYWlsdXJlXCIsXG4gIC03XG5dO1xuXG52YXIgc3RhY2tfb3ZlcmZsb3cgPSAvKiB0dXBsZSAqL1tcbiAgXCJTdGFja19vdmVyZmxvd1wiLFxuICAtOFxuXTtcblxudmFyIHN5c19ibG9ja2VkX2lvID0gLyogdHVwbGUgKi9bXG4gIFwiU3lzX2Jsb2NrZWRfaW9cIixcbiAgLTlcbl07XG5cbnZhciBhc3NlcnRfZmFpbHVyZSA9IC8qIHR1cGxlICovW1xuICBcIkFzc2VydF9mYWlsdXJlXCIsXG4gIC0xMFxuXTtcblxudmFyIHVuZGVmaW5lZF9yZWN1cnNpdmVfbW9kdWxlID0gLyogdHVwbGUgKi9bXG4gIFwiVW5kZWZpbmVkX3JlY3Vyc2l2ZV9tb2R1bGVcIixcbiAgLTExXG5dO1xuXG5vdXRfb2ZfbWVtb3J5LnRhZyA9IDI0ODtcblxuc3lzX2Vycm9yLnRhZyA9IDI0ODtcblxuZmFpbHVyZS50YWcgPSAyNDg7XG5cbmludmFsaWRfYXJndW1lbnQudGFnID0gMjQ4O1xuXG5lbmRfb2ZfZmlsZS50YWcgPSAyNDg7XG5cbmRpdmlzaW9uX2J5X3plcm8udGFnID0gMjQ4O1xuXG5ub3RfZm91bmQudGFnID0gMjQ4O1xuXG5tYXRjaF9mYWlsdXJlLnRhZyA9IDI0ODtcblxuc3RhY2tfb3ZlcmZsb3cudGFnID0gMjQ4O1xuXG5zeXNfYmxvY2tlZF9pby50YWcgPSAyNDg7XG5cbmFzc2VydF9mYWlsdXJlLnRhZyA9IDI0ODtcblxudW5kZWZpbmVkX3JlY3Vyc2l2ZV9tb2R1bGUudGFnID0gMjQ4O1xuXG5leHBvcnQge1xuICBvdXRfb2ZfbWVtb3J5ICxcbiAgc3lzX2Vycm9yICxcbiAgZmFpbHVyZSAsXG4gIGludmFsaWRfYXJndW1lbnQgLFxuICBlbmRfb2ZfZmlsZSAsXG4gIGRpdmlzaW9uX2J5X3plcm8gLFxuICBub3RfZm91bmQgLFxuICBtYXRjaF9mYWlsdXJlICxcbiAgc3RhY2tfb3ZlcmZsb3cgLFxuICBzeXNfYmxvY2tlZF9pbyAsXG4gIGFzc2VydF9mYWlsdXJlICxcbiAgdW5kZWZpbmVkX3JlY3Vyc2l2ZV9tb2R1bGUgLFxuICBcbn1cbi8qICBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfc3ViKHgsIG9mZnNldCwgbGVuKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkobGVuKTtcbiAgdmFyIGogPSAwO1xuICB2YXIgaSA9IG9mZnNldDtcbiAgd2hpbGUoaiA8IGxlbikge1xuICAgIHJlc3VsdFtqXSA9IHhbaV07XG4gICAgaiA9IGogKyAxIHwgMDtcbiAgICBpID0gaSArIDEgfCAwO1xuICB9O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBsZW4oX2FjYywgX2wpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsID0gX2w7XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgaWYgKCFsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBfbCA9IGxbMV07XG4gICAgX2FjYyA9IGxbMF0ubGVuZ3RoICsgYWNjIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbGwoYXJyLCBfaSwgX2wpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsID0gX2w7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoIWwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB4ID0gbFswXTtcbiAgICB2YXIgbCQxID0geC5sZW5ndGg7XG4gICAgdmFyIGsgPSBpO1xuICAgIHZhciBqID0gMDtcbiAgICB3aGlsZShqIDwgbCQxKSB7XG4gICAgICBhcnJba10gPSB4W2pdO1xuICAgICAgayA9IGsgKyAxIHwgMDtcbiAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgfTtcbiAgICBfbCA9IGxbMV07XG4gICAgX2kgPSBrO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9jb25jYXQobCkge1xuICB2YXIgdiA9IGxlbigwLCBsKTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheSh2KTtcbiAgZmlsbChyZXN1bHQsIDAsIGwpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjYW1sX2FycmF5X3NldCh4cywgaW5kZXgsIG5ld3ZhbCkge1xuICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHhzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH1cbiAgeHNbaW5kZXhdID0gbmV3dmFsO1xuICBcbn1cblxuZnVuY3Rpb24gY2FtbF9hcnJheV9nZXQoeHMsIGluZGV4KSB7XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0geHMubGVuZ3RoKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJpbmRleCBvdXQgb2YgYm91bmRzXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4geHNbaW5kZXhdO1xufVxuXG5mdW5jdGlvbiBjYW1sX21ha2VfdmVjdChsZW4sIGluaXQpIHtcbiAgdmFyIGIgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICBiW2ldID0gaW5pdDtcbiAgfVxuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gY2FtbF9tYWtlX2Zsb2F0X3ZlY3QobGVuKSB7XG4gIHZhciBiID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgYltpXSA9IDA7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfYmxpdChhMSwgaTEsIGEyLCBpMiwgbGVuKSB7XG4gIGlmIChpMiA8PSBpMSkge1xuICAgIGZvcih2YXIgaiA9IDA7IGogPCBsZW47ICsrail7XG4gICAgICBhMltqICsgaTIgfCAwXSA9IGExW2ogKyBpMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaiQxID0gbGVuIC0gMSB8IDA7IGokMSA+PSAwOyAtLWokMSl7XG4gICAgYTJbaiQxICsgaTIgfCAwXSA9IGExW2okMSArIGkxIHwgMF07XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGNhbWxfYXJyYXlfZHVwKHByaW0pIHtcbiAgcmV0dXJuIHByaW0uc2xpY2UoMCk7XG59XG5cbmV4cG9ydCB7XG4gIGNhbWxfYXJyYXlfZHVwICxcbiAgY2FtbF9hcnJheV9zdWIgLFxuICBjYW1sX2FycmF5X2NvbmNhdCAsXG4gIGNhbWxfbWFrZV92ZWN0ICxcbiAgY2FtbF9tYWtlX2Zsb2F0X3ZlY3QgLFxuICBjYW1sX2FycmF5X2JsaXQgLFxuICBjYW1sX2FycmF5X2dldCAsXG4gIGNhbWxfYXJyYXlfc2V0ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIENhbWxfYXJyYXkgZnJvbSBcIi4vY2FtbF9hcnJheS5qc1wiO1xuXG5mdW5jdGlvbiBhcHAoX2YsIF9hcmdzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYXJncyA9IF9hcmdzO1xuICAgIHZhciBmID0gX2Y7XG4gICAgdmFyIGluaXRfYXJpdHkgPSBmLmxlbmd0aDtcbiAgICB2YXIgYXJpdHkgPSBpbml0X2FyaXR5ID09PSAwID8gMSA6IGluaXRfYXJpdHk7XG4gICAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICAgIHZhciBkID0gYXJpdHkgLSBsZW4gfCAwO1xuICAgIGlmIChkID09PSAwKSB7XG4gICAgICByZXR1cm4gZi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaWYgKGQgPj0gMCkge1xuICAgICAgcmV0dXJuIChmdW5jdGlvbihmLGFyZ3Mpe1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBhcHAoZiwgYXJncy5jb25jYXQoW3hdKSk7XG4gICAgICB9XG4gICAgICB9KGYsYXJncykpO1xuICAgIH1cbiAgICBfYXJncyA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9zdWIoYXJncywgYXJpdHksIC1kIHwgMCk7XG4gICAgX2YgPSBmLmFwcGx5KG51bGwsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zdWIoYXJncywgMCwgYXJpdHkpKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF8xKG8sIGEwKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDEpIHtcbiAgICByZXR1cm4gbyhhMCk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICByZXR1cm4gbyhhMCk7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBwYXJhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgMyA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIHBhcmFtLCBwYXJhbSQxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA0IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDUgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNiA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzLCBwYXJhbSQ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA3IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCwgcGFyYW0kNSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMsIHBhcmFtJDQsIHBhcmFtJDUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYXBwKG8sIFthMF0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfXzEobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSAxKSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTApIHtcbiAgICAgICAgcmV0dXJuIF8xKG8sIGEwKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF8yKG8sIGEwLCBhMSkge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSAyKSB7XG4gICAgcmV0dXJuIG8oYTAsIGExKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDEgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCksIFthMV0pO1xuICAgICAgY2FzZSAyIDpcbiAgICAgICAgICByZXR1cm4gbyhhMCwgYTEpO1xuICAgICAgY2FzZSAzIDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA0IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA1IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA2IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMykge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA3IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMiwgcGFyYW0kMywgcGFyYW0kNCkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyLCBwYXJhbSQzLCBwYXJhbSQ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFwcChvLCBbXG4gICAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgICBhMVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9fMihvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDIpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEpIHtcbiAgICAgICAgcmV0dXJuIF8yKG8sIGEwLCBhMSk7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfMyhvLCBhMCwgYTEsIGEyKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDMpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEsIGEyKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDEgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgICBhMlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIFthMl0pO1xuICAgICAgY2FzZSAzIDpcbiAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyKTtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDUgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIHBhcmFtLCBwYXJhbSQxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA2IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMikge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMik7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgcGFyYW0sIHBhcmFtJDEsIHBhcmFtJDIsIHBhcmFtJDMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYXBwKG8sIFtcbiAgICAgICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMlxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9fMyhvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDMpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyKSB7XG4gICAgICAgIHJldHVybiBfMyhvLCBhMCwgYTEsIGEyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF80KG8sIGEwLCBhMSwgYTIsIGEzKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDQpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMyk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTApLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTNcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTNcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgW2EzXSk7XG4gICAgICBjYXNlIDQgOlxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzKTtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIHBhcmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgY2FzZSA2IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDcgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxLCBwYXJhbSQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBwYXJhbSwgcGFyYW0kMSwgcGFyYW0kMik7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcHAobywgW1xuICAgICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICBhM1xuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9fNChvKSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDQpIHtcbiAgICByZXR1cm4gbztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhMCwgYTEsIGEyLCBhMykge1xuICAgICAgICByZXR1cm4gXzQobywgYTAsIGExLCBhMiwgYTMpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzUobywgYTAsIGExLCBhMiwgYTMsIGE0KSB7XG4gIHZhciBhcml0eSA9IG8ubGVuZ3RoO1xuICBpZiAoYXJpdHkgPT09IDUpIHtcbiAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAyIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAzIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNFxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgW2E0XSk7XG4gICAgICBjYXNlIDUgOlxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICBjYXNlIDYgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICBjYXNlIDcgOlxuICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gYXBwKG8sIFtcbiAgICAgICAgICAgICAgICAgICAgYTAsXG4gICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgIGE0XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX181KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNSkge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCkge1xuICAgICAgICByZXR1cm4gXzUobywgYTAsIGExLCBhMiwgYTMsIGE0KTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIF82KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNikge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICB9IGVsc2Uge1xuICAgIHN3aXRjaCAoYXJpdHkpIHtcbiAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGExLFxuICAgICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAyIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSAzIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA1IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMsIGE0KSwgW2E1XSk7XG4gICAgICBjYXNlIDYgOlxuICAgICAgICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgICAgY2FzZSA3IDpcbiAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gbyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBwYXJhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcHAobywgW1xuICAgICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgIGE1XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX182KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNikge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgICAgICAgcmV0dXJuIF82KG8sIGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gXzcobywgYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNykge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGFyaXR5KSB7XG4gICAgICBjYXNlIDEgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhMixcbiAgICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgMyA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTZcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDQgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMyksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCksIFtcbiAgICAgICAgICAgICAgICAgICAgICBhNSxcbiAgICAgICAgICAgICAgICAgICAgICBhNlxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgIGNhc2UgNiA6XG4gICAgICAgICAgcmV0dXJuIGFwcChvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpLCBbYTZdKTtcbiAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgcmV0dXJuIG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFwcChvLCBbXG4gICAgICAgICAgICAgICAgICAgIGEwLFxuICAgICAgICAgICAgICAgICAgICBhMSxcbiAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICBhNCxcbiAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgIGE2XG4gICAgICAgICAgICAgICAgICBdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX183KG8pIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gNykge1xuICAgIHJldHVybiBvO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2KSB7XG4gICAgICAgIHJldHVybiBfNyhvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNik7XG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfOChvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpIHtcbiAgdmFyIGFyaXR5ID0gby5sZW5ndGg7XG4gIGlmIChhcml0eSA9PT0gOCkge1xuICAgIHJldHVybiBvKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUsIGE2LCBhNyk7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChhcml0eSkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTApLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTIsXG4gICAgICAgICAgICAgICAgICAgICAgYTMsXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyKSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGEzLFxuICAgICAgICAgICAgICAgICAgICAgIGE0LFxuICAgICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICAgIGE2LFxuICAgICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA0IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDUgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQpLCBbXG4gICAgICAgICAgICAgICAgICAgICAgYTUsXG4gICAgICAgICAgICAgICAgICAgICAgYTYsXG4gICAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICBjYXNlIDYgOlxuICAgICAgICAgIHJldHVybiBhcHAobyhhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSwgW1xuICAgICAgICAgICAgICAgICAgICAgIGE2LFxuICAgICAgICAgICAgICAgICAgICAgIGE3XG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgY2FzZSA3IDpcbiAgICAgICAgICByZXR1cm4gYXBwKG8oYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYpLCBbYTddKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcHAobywgW1xuICAgICAgICAgICAgICAgICAgICBhMCxcbiAgICAgICAgICAgICAgICAgICAgYTEsXG4gICAgICAgICAgICAgICAgICAgIGEyLFxuICAgICAgICAgICAgICAgICAgICBhMyxcbiAgICAgICAgICAgICAgICAgICAgYTQsXG4gICAgICAgICAgICAgICAgICAgIGE1LFxuICAgICAgICAgICAgICAgICAgICBhNixcbiAgICAgICAgICAgICAgICAgICAgYTdcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfXzgobykge1xuICB2YXIgYXJpdHkgPSBvLmxlbmd0aDtcbiAgaWYgKGFyaXR5ID09PSA4KSB7XG4gICAgcmV0dXJuIG87XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYTAsIGExLCBhMiwgYTMsIGE0LCBhNSwgYTYsIGE3KSB7XG4gICAgICAgIHJldHVybiBfOChvLCBhMCwgYTEsIGEyLCBhMywgYTQsIGE1LCBhNiwgYTcpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgYXBwICxcbiAgXzEgLFxuICBfXzEgLFxuICBfMiAsXG4gIF9fMiAsXG4gIF8zICxcbiAgX18zICxcbiAgXzQgLFxuICBfXzQgLFxuICBfNSAsXG4gIF9fNSAsXG4gIF82ICxcbiAgX182ICxcbiAgXzcgLFxuICBfXzcgLFxuICBfOCAsXG4gIF9fOCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5cbnZhciB1bmRlZmluZWRIZWFkZXIgPSBbXTtcblxuZnVuY3Rpb24gc29tZSh4KSB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgYmxvY2sgPSAvKiB0dXBsZSAqL1tcbiAgICAgIHVuZGVmaW5lZEhlYWRlcixcbiAgICAgIDBcbiAgICBdO1xuICAgIGJsb2NrLnRhZyA9IDI1NjtcbiAgICByZXR1cm4gYmxvY2s7XG4gIH1cbiAgaWYgKCEoeCAhPT0gbnVsbCAmJiB4WzBdID09PSB1bmRlZmluZWRIZWFkZXIpKSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgdmFyIG5pZCA9IHhbMV0gKyAxIHwgMDtcbiAgdmFyIGJsb2NrJDEgPSAvKiB0dXBsZSAqL1tcbiAgICB1bmRlZmluZWRIZWFkZXIsXG4gICAgbmlkXG4gIF07XG4gIGJsb2NrJDEudGFnID0gMjU2O1xuICByZXR1cm4gYmxvY2skMTtcbn1cblxuZnVuY3Rpb24gbnVsbGFibGVfdG9fb3B0KHgpIHtcbiAgaWYgKHggPT09IG51bGwgfHwgeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmRlZmluZWRfdG9fb3B0KHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvbWUoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVsbF90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gbnVsbCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvbWUoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsRnJvbU9wdGlvbih4KSB7XG4gIGlmICghKHggIT09IG51bGwgJiYgeFswXSA9PT0gdW5kZWZpbmVkSGVhZGVyKSkge1xuICAgIHJldHVybiB4O1xuICB9XG4gIHZhciBkZXB0aCA9IHhbMV07XG4gIGlmIChkZXB0aCA9PT0gMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgICAgICAgZGVwdGggLSAxIHwgMFxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uX2dldCh4KSB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWxGcm9tT3B0aW9uKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9wdGlvbl9nZXRfdW53cmFwKHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbEZyb21PcHRpb24oeClbMV07XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgbnVsbGFibGVfdG9fb3B0ICxcbiAgdW5kZWZpbmVkX3RvX29wdCAsXG4gIG51bGxfdG9fb3B0ICxcbiAgdmFsRnJvbU9wdGlvbiAsXG4gIHNvbWUgLFxuICBvcHRpb25fZ2V0ICxcbiAgb3B0aW9uX2dldF91bndyYXAgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcblxuZnVuY3Rpb24gZ2V0KGRpY3QsIGspIHtcbiAgaWYgKChrIGluIGRpY3QpKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoZGljdFtrXSk7XG4gIH1cbiAgXG59XG5cbnZhciB1bnNhZmVEZWxldGVLZXkgPSAoZnVuY3Rpb24gKGRpY3Qsa2V5KXtcbiAgICAgIGRlbGV0ZSBkaWN0W2tleV07XG4gICAgIH0pO1xuXG5mdW5jdGlvbiBlbnRyaWVzKGRpY3QpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkaWN0KTtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIHZhbHVlcyA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFsdWVzW2ldID0gLyogdHVwbGUgKi9bXG4gICAgICBrZXksXG4gICAgICBkaWN0W2tleV1cbiAgICBdO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIHZhbHVlcyhkaWN0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGljdCk7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciB2YWx1ZXMkMSA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFsdWVzJDFbaV0gPSBkaWN0W2tleXNbaV1dO1xuICB9XG4gIHJldHVybiB2YWx1ZXMkMTtcbn1cblxuZnVuY3Rpb24gZnJvbUxpc3QoZW50cmllcykge1xuICB2YXIgZGljdCA9IHsgfTtcbiAgdmFyIF9wYXJhbSA9IGVudHJpZXM7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGRpY3Q7XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IHBhcmFtWzBdO1xuICAgIGRpY3RbbWF0Y2hbMF1dID0gbWF0Y2hbMV07XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoZW50cmllcykge1xuICB2YXIgZGljdCA9IHsgfTtcbiAgdmFyIGwgPSBlbnRyaWVzLmxlbmd0aDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIG1hdGNoID0gZW50cmllc1tpXTtcbiAgICBkaWN0W21hdGNoWzBdXSA9IG1hdGNoWzFdO1xuICB9XG4gIHJldHVybiBkaWN0O1xufVxuXG5mdW5jdGlvbiBtYXAoZiwgc291cmNlKSB7XG4gIHZhciB0YXJnZXQgPSB7IH07XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdGFyZ2V0W2tleV0gPSBmKHNvdXJjZVtrZXldKTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5leHBvcnQge1xuICBnZXQgLFxuICB1bnNhZmVEZWxldGVLZXkgLFxuICBlbnRyaWVzICxcbiAgdmFsdWVzICxcbiAgZnJvbUxpc3QgLFxuICBmcm9tQXJyYXkgLFxuICBtYXAgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEpzX3R5cGVzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2pzX3R5cGVzLmpzXCI7XG5pbXBvcnQgKiBhcyBNaW1lVHlwZXMgZnJvbSBcIm1pbWUtdHlwZXNcIjtcblxuZnVuY3Rpb24gY2xhc3NpZnkodmFsdWUpIHtcbiAgaWYgKEpzX3R5cGVzLnRlc3QodmFsdWUsIC8qIFN0cmluZyAqLzQpKSB7XG4gICAgcmV0dXJuIC8qIFN0cmluZyAqL0Jsb2NrLl9fKDAsIFt2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBCb29sZWFuICovQmxvY2suX18oMSwgW3ZhbHVlXSk7XG4gIH1cbn1cblxudmFyIFN0cmluZ0Jvb2xlYW5VbmlvbiA9IHtcbiAgY2xhc3NpZnk6IGNsYXNzaWZ5XG59O1xuXG5mdW5jdGlvbiBjb250ZW50VHlwZShmaWxlbmFtZSkge1xuICB2YXIgY29udGVudFR5cGUkMSA9IGNsYXNzaWZ5KE1pbWVUeXBlcy5jb250ZW50VHlwZShmaWxlbmFtZSkpO1xuICBpZiAoY29udGVudFR5cGUkMS50YWcpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250ZW50VHlwZSQxWzBdO1xuICB9XG59XG5cbmV4cG9ydCB7XG4gIFN0cmluZ0Jvb2xlYW5VbmlvbiAsXG4gIGNvbnRlbnRUeXBlICxcbiAgXG59XG4vKiBtaW1lLXR5cGVzIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcIi4vYmxvY2suanNcIjtcblxuZnVuY3Rpb24gY2xhc3NpZnkoeCkge1xuICB2YXIgdHkgPSB0eXBlb2YgeDtcbiAgaWYgKHR5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIC8qIEpTVW5kZWZpbmVkICovMztcbiAgfSBlbHNlIGlmICh4ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIC8qIEpTTnVsbCAqLzI7XG4gIH0gZWxzZSBpZiAodHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gLyogSlNOdW1iZXIgKi9CbG9jay5fXygwLCBbeF0pO1xuICB9IGVsc2UgaWYgKHR5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIC8qIEpTU3RyaW5nICovQmxvY2suX18oMSwgW3hdKTtcbiAgfSBlbHNlIGlmICh0eSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICBpZiAoeCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIC8qIEpTVHJ1ZSAqLzE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBKU0ZhbHNlICovMDtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiAvKiBKU0Z1bmN0aW9uICovQmxvY2suX18oMiwgW3hdKTtcbiAgfSBlbHNlIGlmICh0eSA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiAvKiBKU09iamVjdCAqL0Jsb2NrLl9fKDMsIFt4XSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIEpTU3ltYm9sICovQmxvY2suX18oNCwgW3hdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0ZXN0KHgsIHYpIHtcbiAgc3dpdGNoICh2KSB7XG4gICAgY2FzZSAvKiBVbmRlZmluZWQgKi8wIDpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInVuZGVmaW5lZFwiO1xuICAgIGNhc2UgLyogTnVsbCAqLzEgOlxuICAgICAgICByZXR1cm4geCA9PT0gbnVsbDtcbiAgICBjYXNlIC8qIEJvb2xlYW4gKi8yIDpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImJvb2xlYW5cIjtcbiAgICBjYXNlIC8qIE51bWJlciAqLzMgOlxuICAgICAgICByZXR1cm4gdHlwZW9mIHggPT09IFwibnVtYmVyXCI7XG4gICAgY2FzZSAvKiBTdHJpbmcgKi80IDpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN0cmluZ1wiO1xuICAgIGNhc2UgLyogRnVuY3Rpb24gKi81IDpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgY2FzZSAvKiBPYmplY3QgKi82IDpcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiO1xuICAgIGNhc2UgLyogU3ltYm9sICovNyA6XG4gICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIjtcbiAgICBcbiAgfVxufVxuXG5leHBvcnQge1xuICB0ZXN0ICxcbiAgY2xhc3NpZnkgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuXG52YXIgaWQgPSB7XG4gIGNvbnRlbnRzOiAwXG59O1xuXG5mdW5jdGlvbiBjYW1sX3NldF9vb19pZChiKSB7XG4gIGJbMV0gPSBpZC5jb250ZW50cztcbiAgaWQuY29udGVudHMgPSBpZC5jb250ZW50cyArIDE7XG4gIHJldHVybiBiO1xufVxuXG5mdW5jdGlvbiBjYW1sX2ZyZXNoX29vX2lkKHBhcmFtKSB7XG4gIGlkLmNvbnRlbnRzID0gaWQuY29udGVudHMgKyAxO1xuICByZXR1cm4gaWQuY29udGVudHM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShzdHIpIHtcbiAgdmFyIHZfMDAxID0gY2FtbF9mcmVzaF9vb19pZCh1bmRlZmluZWQpO1xuICB2YXIgdiA9IC8qIHR1cGxlICovW1xuICAgIHN0cixcbiAgICB2XzAwMVxuICBdO1xuICB2LnRhZyA9IDI0ODtcbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaXNfZXh0ZW5zaW9uKGUpIHtcbiAgaWYgKGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZS50YWcgPT09IDI0OCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBzbG90ID0gZVswXTtcbiAgaWYgKHNsb3QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzbG90LnRhZyA9PT0gMjQ4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBjYW1sX3NldF9vb19pZCAsXG4gIGNhbWxfZnJlc2hfb29faWQgLFxuICBjcmVhdGUgLFxuICBjYW1sX2lzX2V4dGVuc2lvbiAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfZXhjZXB0aW9ucy5qc1wiO1xuXG52YXIgJCRFcnJvciA9IENhbWxfZXhjZXB0aW9ucy5jcmVhdGUoXCJDYW1sX2pzX2V4Y2VwdGlvbnMuRXJyb3JcIik7XG5cbmZ1bmN0aW9uIGludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihlKSB7XG4gIGlmIChDYW1sX2V4Y2VwdGlvbnMuY2FtbF9pc19leHRlbnNpb24oZSkpIHtcbiAgICByZXR1cm4gZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAgICAgJCRFcnJvcixcbiAgICAgICAgICAgIGVcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYXNfanNfZXhuKGV4bikge1xuICBpZiAoZXhuWzBdID09PSAkJEVycm9yKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoZXhuWzFdKTtcbiAgfVxuICBcbn1cblxuZXhwb3J0IHtcbiAgJCRFcnJvciAsXG4gIGludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbiAsXG4gIGNhbWxfYXNfanNfZXhuICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEpzX2ludCBmcm9tIFwiLi9qc19pbnQuanNcIjtcblxuZnVuY3Rpb24gdW5zYWZlX2NlaWwocHJpbSkge1xuICByZXR1cm4gTWF0aC5jZWlsKHByaW0pO1xufVxuXG5mdW5jdGlvbiBjZWlsX2ludChmKSB7XG4gIGlmIChmID4gSnNfaW50Lm1heCkge1xuICAgIHJldHVybiBKc19pbnQubWF4O1xuICB9IGVsc2UgaWYgKGYgPCBKc19pbnQubWluKSB7XG4gICAgcmV0dXJuIEpzX2ludC5taW47XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbChmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNhZmVfZmxvb3IocHJpbSkge1xuICByZXR1cm4gTWF0aC5mbG9vcihwcmltKTtcbn1cblxuZnVuY3Rpb24gZmxvb3JfaW50KGYpIHtcbiAgaWYgKGYgPiBKc19pbnQubWF4KSB7XG4gICAgcmV0dXJuIEpzX2ludC5tYXg7XG4gIH0gZWxzZSBpZiAoZiA8IEpzX2ludC5taW4pIHtcbiAgICByZXR1cm4gSnNfaW50Lm1pbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByYW5kb21faW50KG1pbiwgbWF4KSB7XG4gIHJldHVybiBmbG9vcl9pbnQoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gfCAwKSkgKyBtaW4gfCAwO1xufVxuXG52YXIgY2VpbCA9IGNlaWxfaW50O1xuXG52YXIgZmxvb3IgPSBmbG9vcl9pbnQ7XG5cbmV4cG9ydCB7XG4gIHVuc2FmZV9jZWlsICxcbiAgY2VpbF9pbnQgLFxuICBjZWlsICxcbiAgdW5zYWZlX2Zsb29yICxcbiAgZmxvb3JfaW50ICxcbiAgZmxvb3IgLFxuICByYW5kb21faW50ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cblxuZnVuY3Rpb24gZXF1YWwoeCwgeSkge1xuICByZXR1cm4geCA9PT0geTtcbn1cblxudmFyIG1heCA9IDIxNDc0ODM2NDc7XG5cbnZhciBtaW4gPSAtMjE0NzQ4MzY0ODtcblxuZXhwb3J0IHtcbiAgZXF1YWwgLFxuICBtYXggLFxuICBtaW4gLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuXG5mdW5jdGlvbiBjYW1sX2ludF9jb21wYXJlKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jvb2xfY29tcGFyZSh4LCB5KSB7XG4gIGlmICh4KSB7XG4gICAgaWYgKHkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Zsb2F0X2NvbXBhcmUoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiAwO1xuICB9IGVsc2UgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKHggPiB5IHx8IHggPT09IHgpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmICh5ID09PSB5KSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX2NvbXBhcmUoczEsIHMyKSB7XG4gIGlmIChzMSA9PT0gczIpIHtcbiAgICByZXR1cm4gMDtcbiAgfSBlbHNlIGlmIChzMSA8IHMyKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYnl0ZXNfY29tcGFyZV9hdXgoczEsIHMyLCBfb2ZmLCBsZW4sIGRlZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG9mZiA9IF9vZmY7XG4gICAgaWYgKG9mZiA+PSBsZW4pIHtcbiAgICAgIHJldHVybiBkZWY7XG4gICAgfVxuICAgIHZhciBhID0gczFbb2ZmXTtcbiAgICB2YXIgYiA9IHMyW29mZl07XG4gICAgaWYgKGEgPiBiKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgaWYgKGEgPCBiKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIF9vZmYgPSBvZmYgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbWxfYnl0ZXNfY29tcGFyZShzMSwgczIpIHtcbiAgdmFyIGxlbjEgPSBzMS5sZW5ndGg7XG4gIHZhciBsZW4yID0gczIubGVuZ3RoO1xuICBpZiAobGVuMSA9PT0gbGVuMikge1xuICAgIHJldHVybiBjYW1sX2J5dGVzX2NvbXBhcmVfYXV4KHMxLCBzMiwgMCwgbGVuMSwgMCk7XG4gIH0gZWxzZSBpZiAobGVuMSA8IGxlbjIpIHtcbiAgICByZXR1cm4gY2FtbF9ieXRlc19jb21wYXJlX2F1eChzMSwgczIsIDAsIGxlbjEsIC0xKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FtbF9ieXRlc19jb21wYXJlX2F1eChzMSwgczIsIDAsIGxlbjIsIDEpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYnl0ZXNfZXF1YWwoczEsIHMyKSB7XG4gIHZhciBsZW4xID0gczEubGVuZ3RoO1xuICB2YXIgbGVuMiA9IHMyLmxlbmd0aDtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICB2YXIgX29mZiA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIG9mZiA9IF9vZmY7XG4gICAgICBpZiAob2ZmID09PSBsZW4xKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzMVtvZmZdO1xuICAgICAgdmFyIGIgPSBzMltvZmZdO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgX29mZiA9IG9mZiArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfYm9vbF9taW4oeCwgeSkge1xuICBpZiAoeCkge1xuICAgIHJldHVybiB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50X21pbih4LCB5KSB7XG4gIGlmICh4IDwgeSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfZmxvYXRfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9zdHJpbmdfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9uYXRpdmVpbnRfbWluKHgsIHkpIHtcbiAgaWYgKHggPCB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9pbnQzMl9taW4oeCwgeSkge1xuICBpZiAoeCA8IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Jvb2xfbWF4KHgsIHkpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2ludF9tYXgoeCwgeSkge1xuICBpZiAoeCA+IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX2Zsb2F0X21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfc3RyaW5nX21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbmF0aXZlaW50X21heCh4LCB5KSB7XG4gIGlmICh4ID4geSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50MzJfbWF4KHgsIHkpIHtcbiAgaWYgKHggPiB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxudmFyIGNhbWxfbmF0aXZlaW50X2NvbXBhcmUgPSBjYW1sX2ludF9jb21wYXJlO1xuXG52YXIgY2FtbF9pbnQzMl9jb21wYXJlID0gY2FtbF9pbnRfY29tcGFyZTtcblxuZXhwb3J0IHtcbiAgY2FtbF9ieXRlc19jb21wYXJlICxcbiAgY2FtbF9ieXRlc19lcXVhbCAsXG4gIGNhbWxfaW50X2NvbXBhcmUgLFxuICBjYW1sX2Jvb2xfY29tcGFyZSAsXG4gIGNhbWxfZmxvYXRfY29tcGFyZSAsXG4gIGNhbWxfbmF0aXZlaW50X2NvbXBhcmUgLFxuICBjYW1sX3N0cmluZ19jb21wYXJlICxcbiAgY2FtbF9pbnQzMl9jb21wYXJlICxcbiAgY2FtbF9ib29sX21pbiAsXG4gIGNhbWxfaW50X21pbiAsXG4gIGNhbWxfZmxvYXRfbWluICxcbiAgY2FtbF9zdHJpbmdfbWluICxcbiAgY2FtbF9uYXRpdmVpbnRfbWluICxcbiAgY2FtbF9pbnQzMl9taW4gLFxuICBjYW1sX2Jvb2xfbWF4ICxcbiAgY2FtbF9pbnRfbWF4ICxcbiAgY2FtbF9mbG9hdF9tYXggLFxuICBjYW1sX3N0cmluZ19tYXggLFxuICBjYW1sX25hdGl2ZWludF9tYXggLFxuICBjYW1sX2ludDMyX21heCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgSnNfbWF0aCBmcm9tIFwiLi9qc19tYXRoLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9wcmltaXRpdmUgZnJvbSBcIi4vY2FtbF9wcmltaXRpdmUuanNcIjtcblxuZnVuY3Rpb24gZ2V0KGFyciwgaSkge1xuICBpZiAoaSA+PSAwICYmIGkgPCBhcnIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoYXJyW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZ2V0RXhuKGFyciwgaSkge1xuICBpZiAoIShpID49IDAgJiYgaSA8IGFyci5sZW5ndGgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmlsZSBcXFwiYmVsdF9BcnJheS5tbFxcXCIsIGxpbmUgMjUsIGNoYXJhY3RlcnMgNi0xMlwiKTtcbiAgfVxuICByZXR1cm4gYXJyW2ldO1xufVxuXG5mdW5jdGlvbiBzZXQoYXJyLCBpLCB2KSB7XG4gIGlmIChpID49IDAgJiYgaSA8IGFyci5sZW5ndGgpIHtcbiAgICBhcnJbaV0gPSB2O1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRFeG4oYXJyLCBpLCB2KSB7XG4gIGlmICghKGkgPj0gMCAmJiBpIDwgYXJyLmxlbmd0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIFxcXCJiZWx0X0FycmF5Lm1sXFxcIiwgbGluZSAzMSwgY2hhcmFjdGVycyA0LTEwXCIpO1xuICB9XG4gIGFycltpXSA9IHY7XG4gIFxufVxuXG5mdW5jdGlvbiBzd2FwVW5zYWZlKHhzLCBpLCBqKSB7XG4gIHZhciB0bXAgPSB4c1tpXTtcbiAgeHNbaV0gPSB4c1tqXTtcbiAgeHNbal0gPSB0bXA7XG4gIFxufVxuXG5mdW5jdGlvbiBzaHVmZmxlSW5QbGFjZSh4cykge1xuICB2YXIgbGVuID0geHMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHN3YXBVbnNhZmUoeHMsIGksIEpzX21hdGgucmFuZG9tX2ludChpLCBsZW4pKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZSh4cykge1xuICB2YXIgcmVzdWx0ID0geHMuc2xpY2UoMCk7XG4gIHNodWZmbGVJblBsYWNlKHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJldmVyc2VJblBsYWNlKHhzKSB7XG4gIHZhciBsZW4gPSB4cy5sZW5ndGg7XG4gIHZhciBvZnMgPSAwO1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGxlbiAvIDIgfCAwOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgc3dhcFVuc2FmZSh4cywgb2ZzICsgaSB8IDAsICgob2ZzICsgbGVuIHwgMCkgLSBpIHwgMCkgLSAxIHwgMCk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHJldmVyc2UoeHMpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHJlc3VsdFtpXSA9IHhzWyhsZW4gLSAxIHwgMCkgLSBpIHwgMF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbWFrZShsLCBmKSB7XG4gIGlmIChsIDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHJlcyA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgcmVzW2ldID0gZjtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBtYWtlQnlVKGwsIGYpIHtcbiAgaWYgKGwgPD0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgcmVzID0gbmV3IEFycmF5KGwpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICByZXNbaV0gPSBmKGkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeShsLCBmKSB7XG4gIHJldHVybiBtYWtlQnlVKGwsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeUFuZFNodWZmbGVVKGwsIGYpIHtcbiAgdmFyIHUgPSBtYWtlQnlVKGwsIGYpO1xuICBzaHVmZmxlSW5QbGFjZSh1KTtcbiAgcmV0dXJuIHU7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeUFuZFNodWZmbGUobCwgZikge1xuICByZXR1cm4gbWFrZUJ5QW5kU2h1ZmZsZVUobCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gcmFuZ2Uoc3RhcnQsIGZpbmlzaCkge1xuICB2YXIgY3V0ID0gZmluaXNoIC0gc3RhcnQgfCAwO1xuICBpZiAoY3V0IDwgMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgYXJyID0gbmV3IEFycmF5KGN1dCArIDEgfCAwKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8PSBjdXQ7ICsraSl7XG4gICAgYXJyW2ldID0gc3RhcnQgKyBpIHwgMDtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiByYW5nZUJ5KHN0YXJ0LCBmaW5pc2gsIHN0ZXApIHtcbiAgdmFyIGN1dCA9IGZpbmlzaCAtIHN0YXJ0IHwgMDtcbiAgaWYgKGN1dCA8IDAgfHwgc3RlcCA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciBuYiA9IChjdXQgLyBzdGVwIHwgMCkgKyAxIHwgMDtcbiAgdmFyIGFyciA9IG5ldyBBcnJheShuYik7XG4gIHZhciBjdXIgPSBzdGFydDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IG5iOyArK2kpe1xuICAgIGFycltpXSA9IGN1cjtcbiAgICBjdXIgPSBjdXIgKyBzdGVwIHwgMDtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiB6aXAoeHMsIHlzKSB7XG4gIHZhciBsZW54ID0geHMubGVuZ3RoO1xuICB2YXIgbGVueSA9IHlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbnggPCBsZW55ID8gbGVueCA6IGxlbnk7XG4gIHZhciBzID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgc1tpXSA9IC8qIHR1cGxlICovW1xuICAgICAgeHNbaV0sXG4gICAgICB5c1tpXVxuICAgIF07XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIHppcEJ5VSh4cywgeXMsIGYpIHtcbiAgdmFyIGxlbnggPSB4cy5sZW5ndGg7XG4gIHZhciBsZW55ID0geXMubGVuZ3RoO1xuICB2YXIgbGVuID0gbGVueCA8IGxlbnkgPyBsZW54IDogbGVueTtcbiAgdmFyIHMgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICBzW2ldID0gZih4c1tpXSwgeXNbaV0pO1xuICB9XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiB6aXBCeSh4cywgeXMsIGYpIHtcbiAgcmV0dXJuIHppcEJ5VSh4cywgeXMsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdChhMSwgYTIpIHtcbiAgdmFyIGwxID0gYTEubGVuZ3RoO1xuICB2YXIgbDIgPSBhMi5sZW5ndGg7XG4gIHZhciBhMWEyID0gbmV3IEFycmF5KGwxICsgbDIgfCAwKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGwxOyArK2kpe1xuICAgIGExYTJbaV0gPSBhMVtpXTtcbiAgfVxuICBmb3IodmFyIGkkMSA9IDA7IGkkMSA8IGwyOyArK2kkMSl7XG4gICAgYTFhMltsMSArIGkkMSB8IDBdID0gYTJbaSQxXTtcbiAgfVxuICByZXR1cm4gYTFhMjtcbn1cblxuZnVuY3Rpb24gY29uY2F0TWFueShhcnJzKSB7XG4gIHZhciBsZW5BcnJzID0gYXJycy5sZW5ndGg7XG4gIHZhciB0b3RhbExlbiA9IDA7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW5BcnJzOyArK2kpe1xuICAgIHRvdGFsTGVuID0gdG90YWxMZW4gKyBhcnJzW2ldLmxlbmd0aCB8IDA7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheSh0b3RhbExlbik7XG4gIHRvdGFsTGVuID0gMDtcbiAgZm9yKHZhciBqID0gMDsgaiA8IGxlbkFycnM7ICsrail7XG4gICAgdmFyIGN1ciA9IGFycnNbal07XG4gICAgZm9yKHZhciBrID0gMCAsa19maW5pc2ggPSBjdXIubGVuZ3RoOyBrIDwga19maW5pc2g7ICsrayl7XG4gICAgICByZXN1bHRbdG90YWxMZW5dID0gY3VyW2tdO1xuICAgICAgdG90YWxMZW4gPSB0b3RhbExlbiArIDEgfCAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzbGljZShhLCBvZmZzZXQsIGxlbikge1xuICBpZiAobGVuIDw9IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGxlbmEgPSBhLmxlbmd0aDtcbiAgdmFyIG9mcyA9IG9mZnNldCA8IDAgPyBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9tYXgobGVuYSArIG9mZnNldCB8IDAsIDApIDogb2Zmc2V0O1xuICB2YXIgaGFzTGVuID0gbGVuYSAtIG9mcyB8IDA7XG4gIHZhciBjb3B5TGVuZ3RoID0gaGFzTGVuIDwgbGVuID8gaGFzTGVuIDogbGVuO1xuICBpZiAoY29weUxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoY29weUxlbmd0aCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBjb3B5TGVuZ3RoOyArK2kpe1xuICAgIHJlc3VsdFtpXSA9IGFbb2ZzICsgaSB8IDBdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHNsaWNlVG9FbmQoYSwgb2Zmc2V0KSB7XG4gIHZhciBsZW5hID0gYS5sZW5ndGg7XG4gIHZhciBvZnMgPSBvZmZzZXQgPCAwID8gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWF4KGxlbmEgKyBvZmZzZXQgfCAwLCAwKSA6IG9mZnNldDtcbiAgdmFyIGxlbiA9IGxlbmEgLSBvZnMgfCAwO1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KGxlbik7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgcmVzdWx0W2ldID0gYVtvZnMgKyBpIHwgMF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZmlsbChhLCBvZmZzZXQsIGxlbiwgdikge1xuICBpZiAobGVuIDw9IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBsZW5hID0gYS5sZW5ndGg7XG4gIHZhciBvZnMgPSBvZmZzZXQgPCAwID8gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWF4KGxlbmEgKyBvZmZzZXQgfCAwLCAwKSA6IG9mZnNldDtcbiAgdmFyIGhhc0xlbiA9IGxlbmEgLSBvZnMgfCAwO1xuICB2YXIgZmlsbExlbmd0aCA9IGhhc0xlbiA8IGxlbiA/IGhhc0xlbiA6IGxlbjtcbiAgaWYgKGZpbGxMZW5ndGggPD0gMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgZm9yKHZhciBpID0gb2ZzICxpX2ZpbmlzaCA9IG9mcyArIGZpbGxMZW5ndGggfCAwOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgYVtpXSA9IHY7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGJsaXRVbnNhZmUoYTEsIHNyY29mczEsIGEyLCBzcmNvZnMyLCBibGl0TGVuZ3RoKSB7XG4gIGlmIChzcmNvZnMyIDw9IHNyY29mczEpIHtcbiAgICBmb3IodmFyIGogPSAwOyBqIDwgYmxpdExlbmd0aDsgKytqKXtcbiAgICAgIGEyW2ogKyBzcmNvZnMyIHwgMF0gPSBhMVtqICsgc3Jjb2ZzMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaiQxID0gYmxpdExlbmd0aCAtIDEgfCAwOyBqJDEgPj0gMDsgLS1qJDEpe1xuICAgIGEyW2okMSArIHNyY29mczIgfCAwXSA9IGExW2okMSArIHNyY29mczEgfCAwXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbikge1xuICB2YXIgbGVuYTEgPSBhMS5sZW5ndGg7XG4gIHZhciBsZW5hMiA9IGEyLmxlbmd0aDtcbiAgdmFyIHNyY29mczEgPSBvZnMxIDwgMCA/IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21heChsZW5hMSArIG9mczEgfCAwLCAwKSA6IG9mczE7XG4gIHZhciBzcmNvZnMyID0gb2ZzMiA8IDAgPyBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9tYXgobGVuYTIgKyBvZnMyIHwgMCwgMCkgOiBvZnMyO1xuICB2YXIgYmxpdExlbmd0aCA9IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihsZW4sIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihsZW5hMSAtIHNyY29mczEgfCAwLCBsZW5hMiAtIHNyY29mczIgfCAwKSk7XG4gIGlmIChzcmNvZnMyIDw9IHNyY29mczEpIHtcbiAgICBmb3IodmFyIGogPSAwOyBqIDwgYmxpdExlbmd0aDsgKytqKXtcbiAgICAgIGEyW2ogKyBzcmNvZnMyIHwgMF0gPSBhMVtqICsgc3Jjb2ZzMSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaiQxID0gYmxpdExlbmd0aCAtIDEgfCAwOyBqJDEgPj0gMDsgLS1qJDEpe1xuICAgIGEyW2okMSArIHNyY29mczIgfCAwXSA9IGExW2okMSArIHNyY29mczEgfCAwXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFUoYSwgZikge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgZihhW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChhLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBmKGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXAoYSwgZikge1xuICByZXR1cm4gbWFwVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBnZXRCeVUoYSwgcCkge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciByO1xuICB3aGlsZShyID09PSB1bmRlZmluZWQgJiYgaSA8IGwpIHtcbiAgICB2YXIgdiA9IGFbaV07XG4gICAgaWYgKHAodikpIHtcbiAgICAgIHIgPSBDYW1sX29wdGlvbi5zb21lKHYpO1xuICAgIH1cbiAgICBpID0gaSArIDEgfCAwO1xuICB9O1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gZ2V0QnkoYSwgcCkge1xuICByZXR1cm4gZ2V0QnlVKGEsIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlVKGEsIHApIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcjtcbiAgd2hpbGUociA9PT0gdW5kZWZpbmVkICYmIGkgPCBsKSB7XG4gICAgdmFyIHYgPSBhW2ldO1xuICAgIGlmIChwKHYpKSB7XG4gICAgICByID0gaTtcbiAgICB9XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGdldEluZGV4QnkoYSwgcCkge1xuICByZXR1cm4gZ2V0SW5kZXhCeVUoYSwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24ga2VlcFUoYSwgZikge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICB2YXIgciA9IG5ldyBBcnJheShsKTtcbiAgdmFyIGogPSAwO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICB2YXIgdiA9IGFbaV07XG4gICAgaWYgKGYodikpIHtcbiAgICAgIHJbal0gPSB2O1xuICAgICAgaiA9IGogKyAxIHwgMDtcbiAgICB9XG4gICAgXG4gIH1cbiAgci5sZW5ndGggPSBqO1xuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24ga2VlcChhLCBmKSB7XG4gIHJldHVybiBrZWVwVShhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4VShhLCBmKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIHZhciByID0gbmV3IEFycmF5KGwpO1xuICB2YXIgaiA9IDA7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHZhciB2ID0gYVtpXTtcbiAgICBpZiAoZih2LCBpKSkge1xuICAgICAgcltqXSA9IHY7XG4gICAgICBqID0gaiArIDEgfCAwO1xuICAgIH1cbiAgICBcbiAgfVxuICByLmxlbmd0aCA9IGo7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4KGEsIGYpIHtcbiAgcmV0dXJuIGtlZXBXaXRoSW5kZXhVKGEsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXBVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIHZhciBqID0gMDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIHYgPSBhW2ldO1xuICAgIHZhciB2JDEgPSBmKHYpO1xuICAgIGlmICh2JDEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcltqXSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24odiQxKTtcbiAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgfVxuICAgIFxuICB9XG4gIHIubGVuZ3RoID0gajtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXAoYSwgZikge1xuICByZXR1cm4ga2VlcE1hcFUoYSwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleFUoYSwgZikge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgZihpLCBhW2ldKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFdpdGhJbmRleChhLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoV2l0aEluZGV4VShhLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXhVKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIHIgPSBuZXcgQXJyYXkobCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBmKGksIGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXgoYSwgZikge1xuICByZXR1cm4gbWFwV2l0aEluZGV4VShhLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgciA9IGYociwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShhLCB4LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKGEsIHgsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2VVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSBhLmxlbmd0aCAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IGYociwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UoYSwgeCwgZikge1xuICByZXR1cm4gcmVkdWNlUmV2ZXJzZVUoYSwgeCwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTJVKGEsIGIsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICB2YXIgbGVuID0gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfbWluKGEubGVuZ3RoLCBiLmxlbmd0aCk7XG4gIGZvcih2YXIgaSA9IGxlbiAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IGYociwgYVtpXSwgYltpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UyKGEsIGIsIHgsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2UyVShhLCBiLCB4LCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VXaXRoSW5kZXhVKGEsIHgsIGYpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgciA9IGYociwgYVtpXSwgaSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVdpdGhJbmRleChhLCB4LCBmKSB7XG4gIHJldHVybiByZWR1Y2VXaXRoSW5kZXhVKGEsIHgsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5VShhcnIsIGIpIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBsZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWIoYXJyW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KGFyciwgZikge1xuICByZXR1cm4gZXZlcnlVKGFyciwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gc29tZVUoYXJyLCBiKSB7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChiKGFycltpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUoYXJyLCBmKSB7XG4gIHJldHVybiBzb21lVShhcnIsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5QXV4MihhcnIxLCBhcnIyLCBfaSwgYiwgbGVuKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBsZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWIoYXJyMVtpXSwgYXJyMltpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeTJVKGEsIGIsIHApIHtcbiAgcmV0dXJuIGV2ZXJ5QXV4MihhLCBiLCAwLCBwLCBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oYS5sZW5ndGgsIGIubGVuZ3RoKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5MihhLCBiLCBwKSB7XG4gIHJldHVybiBldmVyeTJVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWUyVShhLCBiLCBwKSB7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBsZW4gPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oYS5sZW5ndGgsIGIubGVuZ3RoKTtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPT09IGxlbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocChhW2ldLCBiW2ldKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc29tZTIoYSwgYiwgcCkge1xuICByZXR1cm4gc29tZTJVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGVxVShhLCBiLCBwKSB7XG4gIHZhciBsZW5hID0gYS5sZW5ndGg7XG4gIHZhciBsZW5iID0gYi5sZW5ndGg7XG4gIGlmIChsZW5hID09PSBsZW5iKSB7XG4gICAgcmV0dXJuIGV2ZXJ5QXV4MihhLCBiLCAwLCBwLCBsZW5hKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoYSwgYiwgcCkge1xuICByZXR1cm4gZXFVKGEsIGIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGNtcFUoYSwgYiwgcCkge1xuICB2YXIgbGVuYSA9IGEubGVuZ3RoO1xuICB2YXIgbGVuYiA9IGIubGVuZ3RoO1xuICBpZiAobGVuYSA+IGxlbmIpIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChsZW5hIDwgbGVuYikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2kgPSAwO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBpID0gX2k7XG4gICAgICBpZiAoaSA9PT0gbGVuYSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHZhciBjID0gcChhW2ldLCBiW2ldKTtcbiAgICAgIGlmIChjICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgICAgfVxuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbXAoYSwgYiwgcCkge1xuICByZXR1cm4gY21wVShhLCBiLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25VKGEsIGYpIHtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgaiA9IDA7XG4gIHZhciBhMSA9IG5ldyBBcnJheShsKTtcbiAgdmFyIGEyID0gbmV3IEFycmF5KGwpO1xuICBmb3IodmFyIGlpID0gMDsgaWkgPCBsOyArK2lpKXtcbiAgICB2YXIgdiA9IGFbaWldO1xuICAgIGlmIChmKHYpKSB7XG4gICAgICBhMVtpXSA9IHY7XG4gICAgICBpID0gaSArIDEgfCAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBhMltqXSA9IHY7XG4gICAgICBqID0gaiArIDEgfCAwO1xuICAgIH1cbiAgfVxuICBhMS5sZW5ndGggPSBpO1xuICBhMi5sZW5ndGggPSBqO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgYTEsXG4gICAgICAgICAgYTJcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGEsIGYpIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUoYSwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gdW56aXAoYSkge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICB2YXIgYTEgPSBuZXcgQXJyYXkobCk7XG4gIHZhciBhMiA9IG5ldyBBcnJheShsKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGw7ICsraSl7XG4gICAgdmFyIG1hdGNoID0gYVtpXTtcbiAgICBhMVtpXSA9IG1hdGNoWzBdO1xuICAgIGEyW2ldID0gbWF0Y2hbMV07XG4gIH1cbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIGExLFxuICAgICAgICAgIGEyXG4gICAgICAgIF07XG59XG5cbmV4cG9ydCB7XG4gIGdldCAsXG4gIGdldEV4biAsXG4gIHNldCAsXG4gIHNldEV4biAsXG4gIHNodWZmbGVJblBsYWNlICxcbiAgc2h1ZmZsZSAsXG4gIHJldmVyc2VJblBsYWNlICxcbiAgcmV2ZXJzZSAsXG4gIG1ha2UgLFxuICByYW5nZSAsXG4gIHJhbmdlQnkgLFxuICBtYWtlQnlVICxcbiAgbWFrZUJ5ICxcbiAgbWFrZUJ5QW5kU2h1ZmZsZVUgLFxuICBtYWtlQnlBbmRTaHVmZmxlICxcbiAgemlwICxcbiAgemlwQnlVICxcbiAgemlwQnkgLFxuICB1bnppcCAsXG4gIGNvbmNhdCAsXG4gIGNvbmNhdE1hbnkgLFxuICBzbGljZSAsXG4gIHNsaWNlVG9FbmQgLFxuICBmaWxsICxcbiAgYmxpdCAsXG4gIGJsaXRVbnNhZmUgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICBtYXBVICxcbiAgbWFwICxcbiAgZ2V0QnlVICxcbiAgZ2V0QnkgLFxuICBnZXRJbmRleEJ5VSAsXG4gIGdldEluZGV4QnkgLFxuICBrZWVwVSAsXG4gIGtlZXAgLFxuICBrZWVwV2l0aEluZGV4VSAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBrZWVwTWFwVSAsXG4gIGtlZXBNYXAgLFxuICBmb3JFYWNoV2l0aEluZGV4VSAsXG4gIGZvckVhY2hXaXRoSW5kZXggLFxuICBtYXBXaXRoSW5kZXhVICxcbiAgbWFwV2l0aEluZGV4ICxcbiAgcGFydGl0aW9uVSAsXG4gIHBhcnRpdGlvbiAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICByZWR1Y2VSZXZlcnNlVSAsXG4gIHJlZHVjZVJldmVyc2UgLFxuICByZWR1Y2VSZXZlcnNlMlUgLFxuICByZWR1Y2VSZXZlcnNlMiAsXG4gIHJlZHVjZVdpdGhJbmRleFUgLFxuICByZWR1Y2VXaXRoSW5kZXggLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIGV2ZXJ5MlUgLFxuICBldmVyeTIgLFxuICBzb21lMlUgLFxuICBzb21lMiAsXG4gIGNtcFUgLFxuICBjbXAgLFxuICBlcVUgLFxuICBlcSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9BcnJheSBmcm9tIFwiLi9iZWx0X0FycmF5LmpzXCI7XG5cbmZ1bmN0aW9uIHNvcnRlZExlbmd0aEF1eE1vcmUoeHMsIF9wcmVjLCBfYWNjLCBsZW4sIGx0KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIGlmIChhY2MgPj0gbGVuKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICB2YXIgdiA9IHhzW2FjY107XG4gICAgaWYgKCFsdCh2LCBwcmVjKSkge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgX2FjYyA9IGFjYyArIDEgfCAwO1xuICAgIF9wcmVjID0gdjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdGx5U29ydGVkTGVuZ3RoVSh4cywgbHQpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMCB8fCBsZW4gPT09IDEpIHtcbiAgICByZXR1cm4gbGVuO1xuICB9XG4gIHZhciB4MCA9IHhzWzBdO1xuICB2YXIgeDEgPSB4c1sxXTtcbiAgaWYgKGx0KHgwLCB4MSkpIHtcbiAgICB2YXIgX3ByZWMgPSB4MTtcbiAgICB2YXIgX2FjYyA9IDI7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgICAgaWYgKGFjYyA+PSBsZW4pIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIHZhciB2ID0geHNbYWNjXTtcbiAgICAgIGlmICghbHQocHJlYywgdikpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIF9hY2MgPSBhY2MgKyAxIHwgMDtcbiAgICAgIF9wcmVjID0gdjtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9IGVsc2UgaWYgKGx0KHgxLCB4MCkpIHtcbiAgICByZXR1cm4gLXNvcnRlZExlbmd0aEF1eE1vcmUoeHMsIHgxLCAyLCBsZW4sIGx0KSB8IDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaWN0bHlTb3J0ZWRMZW5ndGgoeHMsIGx0KSB7XG4gIHJldHVybiBzdHJpY3RseVNvcnRlZExlbmd0aFUoeHMsIEN1cnJ5Ll9fMihsdCkpO1xufVxuXG5mdW5jdGlvbiBpc1NvcnRlZFUoYSwgY21wKSB7XG4gIHZhciBsZW4gPSBhLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBfaSA9IDA7XG4gICAgdmFyIGxhc3RfYm91bmQgPSBsZW4gLSAxIHwgMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgaWYgKGkgPT09IGxhc3RfYm91bmQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY21wKGFbaV0sIGFbaSArIDEgfCAwXSkgPiAwKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTb3J0ZWQoYSwgY21wKSB7XG4gIHJldHVybiBpc1NvcnRlZFUoYSwgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShzcmMsIHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzLCBjbXApIHtcbiAgdmFyIHNyYzFyID0gc3JjMW9mcyArIHNyYzFsZW4gfCAwO1xuICB2YXIgc3JjMnIgPSBzcmMyb2ZzICsgc3JjMmxlbiB8IDA7XG4gIHZhciBfaTEgPSBzcmMxb2ZzO1xuICB2YXIgX3MxID0gc3JjW3NyYzFvZnNdO1xuICB2YXIgX2kyID0gc3JjMm9mcztcbiAgdmFyIF9zMiA9IHNyYzJbc3JjMm9mc107XG4gIHZhciBfZCA9IGRzdG9mcztcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBkID0gX2Q7XG4gICAgdmFyIHMyID0gX3MyO1xuICAgIHZhciBpMiA9IF9pMjtcbiAgICB2YXIgczEgPSBfczE7XG4gICAgdmFyIGkxID0gX2kxO1xuICAgIGlmIChjbXAoczEsIHMyKSA8PSAwKSB7XG4gICAgICBkc3RbZF0gPSBzMTtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgIHJldHVybiBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIsIGRzdCwgZCArIDEgfCAwLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICB9XG4gICAgICBfZCA9IGQgKyAxIHwgMDtcbiAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgIF9pMSA9IGkxJDE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGRzdFtkXSA9IHMyO1xuICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICBpZiAoaTIkMSA+PSBzcmMycikge1xuICAgICAgcmV0dXJuIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQgKyAxIHwgMCwgc3JjMXIgLSBpMSB8IDApO1xuICAgIH1cbiAgICBfZCA9IGQgKyAxIHwgMDtcbiAgICBfczIgPSBzcmMyW2kyJDFdO1xuICAgIF9pMiA9IGkyJDE7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1bmlvblUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgY21wKSB7XG4gIHZhciBzcmMxciA9IHNyYzFvZnMgKyBzcmMxbGVuIHwgMDtcbiAgdmFyIHNyYzJyID0gc3JjMm9mcyArIHNyYzJsZW4gfCAwO1xuICB2YXIgX2kxID0gc3JjMW9mcztcbiAgdmFyIF9zMSA9IHNyY1tzcmMxb2ZzXTtcbiAgdmFyIF9pMiA9IHNyYzJvZnM7XG4gIHZhciBfczIgPSBzcmMyW3NyYzJvZnNdO1xuICB2YXIgX2QgPSBkc3RvZnM7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgZCA9IF9kO1xuICAgIHZhciBzMiA9IF9zMjtcbiAgICB2YXIgaTIgPSBfaTI7XG4gICAgdmFyIHMxID0gX3MxO1xuICAgIHZhciBpMSA9IF9pMTtcbiAgICB2YXIgYyA9IGNtcChzMSwgczIpO1xuICAgIGlmIChjIDwgMCkge1xuICAgICAgZHN0W2RdID0gczE7XG4gICAgICB2YXIgaTEkMSA9IGkxICsgMSB8IDA7XG4gICAgICB2YXIgZCQxID0gZCArIDEgfCAwO1xuICAgICAgaWYgKGkxJDEgPCBzcmMxcikge1xuICAgICAgICBfZCA9IGQkMTtcbiAgICAgICAgX3MxID0gc3JjW2kxJDFdO1xuICAgICAgICBfaTEgPSBpMSQxO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIsIGRzdCwgZCQxLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICByZXR1cm4gKGQkMSArIHNyYzJyIHwgMCkgLSBpMiB8IDA7XG4gICAgfVxuICAgIGlmIChjID09PSAwKSB7XG4gICAgICBkc3RbZF0gPSBzMTtcbiAgICAgIHZhciBpMSQyID0gaTEgKyAxIHwgMDtcbiAgICAgIHZhciBpMiQxID0gaTIgKyAxIHwgMDtcbiAgICAgIHZhciBkJDIgPSBkICsgMSB8IDA7XG4gICAgICBpZiAoIShpMSQyIDwgc3JjMXIgJiYgaTIkMSA8IHNyYzJyKSkge1xuICAgICAgICBpZiAoaTEkMiA9PT0gc3JjMXIpIHtcbiAgICAgICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjMiwgaTIkMSwgZHN0LCBkJDIsIHNyYzJyIC0gaTIkMSB8IDApO1xuICAgICAgICAgIHJldHVybiAoZCQyICsgc3JjMnIgfCAwKSAtIGkyJDEgfCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxJDIsIGRzdCwgZCQyLCBzcmMxciAtIGkxJDIgfCAwKTtcbiAgICAgICAgICByZXR1cm4gKGQkMiArIHNyYzFyIHwgMCkgLSBpMSQyIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX2QgPSBkJDI7XG4gICAgICBfczIgPSBzcmMyW2kyJDFdO1xuICAgICAgX2kyID0gaTIkMTtcbiAgICAgIF9zMSA9IHNyY1tpMSQyXTtcbiAgICAgIF9pMSA9IGkxJDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGRzdFtkXSA9IHMyO1xuICAgIHZhciBpMiQyID0gaTIgKyAxIHwgMDtcbiAgICB2YXIgZCQzID0gZCArIDEgfCAwO1xuICAgIGlmIChpMiQyIDwgc3JjMnIpIHtcbiAgICAgIF9kID0gZCQzO1xuICAgICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICAgIF9pMiA9IGkyJDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQkMywgc3JjMXIgLSBpMSB8IDApO1xuICAgIHJldHVybiAoZCQzICsgc3JjMXIgfCAwKSAtIGkxIHwgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdW5pb24oc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgY21wKSB7XG4gIHJldHVybiB1bmlvblUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RVKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICB2YXIgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiB8IDA7XG4gIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gIHZhciBfczEgPSBzcmNbc3JjMW9mc107XG4gIHZhciBfaTIgPSBzcmMyb2ZzO1xuICB2YXIgX3MyID0gc3JjMltzcmMyb2ZzXTtcbiAgdmFyIF9kID0gZHN0b2ZzO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGQgPSBfZDtcbiAgICB2YXIgczIgPSBfczI7XG4gICAgdmFyIGkyID0gX2kyO1xuICAgIHZhciBzMSA9IF9zMTtcbiAgICB2YXIgaTEgPSBfaTE7XG4gICAgdmFyIGMgPSBjbXAoczEsIHMyKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfVxuICAgICAgX3MxID0gc3JjW2kxJDFdO1xuICAgICAgX2kxID0gaTEkMTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIGRzdFtkXSA9IHMxO1xuICAgICAgdmFyIGkxJDIgPSBpMSArIDEgfCAwO1xuICAgICAgdmFyIGkyJDEgPSBpMiArIDEgfCAwO1xuICAgICAgdmFyIGQkMSA9IGQgKyAxIHwgMDtcbiAgICAgIGlmICghKGkxJDIgPCBzcmMxciAmJiBpMiQxIDwgc3JjMnIpKSB7XG4gICAgICAgIHJldHVybiBkJDE7XG4gICAgICB9XG4gICAgICBfZCA9IGQkMTtcbiAgICAgIF9zMiA9IHNyYzJbaTIkMV07XG4gICAgICBfaTIgPSBpMiQxO1xuICAgICAgX3MxID0gc3JjW2kxJDJdO1xuICAgICAgX2kxID0gaTEkMjtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgdmFyIGkyJDIgPSBpMiArIDEgfCAwO1xuICAgIGlmIChpMiQyID49IHNyYzJyKSB7XG4gICAgICByZXR1cm4gZDtcbiAgICB9XG4gICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICBfaTIgPSBpMiQyO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gaW50ZXJzZWN0VShzcmMsIHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGRpZmZVKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICB2YXIgc3JjMXIgPSBzcmMxb2ZzICsgc3JjMWxlbiB8IDA7XG4gIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgdmFyIF9pMSA9IHNyYzFvZnM7XG4gIHZhciBfczEgPSBzcmNbc3JjMW9mc107XG4gIHZhciBfaTIgPSBzcmMyb2ZzO1xuICB2YXIgX3MyID0gc3JjMltzcmMyb2ZzXTtcbiAgdmFyIF9kID0gZHN0b2ZzO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGQgPSBfZDtcbiAgICB2YXIgczIgPSBfczI7XG4gICAgdmFyIGkyID0gX2kyO1xuICAgIHZhciBzMSA9IF9zMTtcbiAgICB2YXIgaTEgPSBfaTE7XG4gICAgdmFyIGMgPSBjbXAoczEsIHMyKTtcbiAgICBpZiAoYyA8IDApIHtcbiAgICAgIGRzdFtkXSA9IHMxO1xuICAgICAgdmFyIGQkMSA9IGQgKyAxIHwgMDtcbiAgICAgIHZhciBpMSQxID0gaTEgKyAxIHwgMDtcbiAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgIHJldHVybiBkJDE7XG4gICAgICB9XG4gICAgICBfZCA9IGQkMTtcbiAgICAgIF9zMSA9IHNyY1tpMSQxXTtcbiAgICAgIF9pMSA9IGkxJDE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGlmIChjID09PSAwKSB7XG4gICAgICB2YXIgaTEkMiA9IGkxICsgMSB8IDA7XG4gICAgICB2YXIgaTIkMSA9IGkyICsgMSB8IDA7XG4gICAgICBpZiAoIShpMSQyIDwgc3JjMXIgJiYgaTIkMSA8IHNyYzJyKSkge1xuICAgICAgICBpZiAoaTEkMiA9PT0gc3JjMXIpIHtcbiAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBCZWx0X0FycmF5LmJsaXRVbnNhZmUoc3JjLCBpMSQyLCBkc3QsIGQsIHNyYzFyIC0gaTEkMiB8IDApO1xuICAgICAgICAgIHJldHVybiAoZCArIHNyYzFyIHwgMCkgLSBpMSQyIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX3MyID0gc3JjMltpMiQxXTtcbiAgICAgIF9pMiA9IGkyJDE7XG4gICAgICBfczEgPSBzcmNbaTEkMl07XG4gICAgICBfaTEgPSBpMSQyO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICB2YXIgaTIkMiA9IGkyICsgMSB8IDA7XG4gICAgaWYgKGkyJDIgPCBzcmMycikge1xuICAgICAgX3MyID0gc3JjMltpMiQyXTtcbiAgICAgIF9pMiA9IGkyJDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIEJlbHRfQXJyYXkuYmxpdFVuc2FmZShzcmMsIGkxLCBkc3QsIGQsIHNyYzFyIC0gaTEgfCAwKTtcbiAgICByZXR1cm4gKGQgKyBzcmMxciB8IDApIC0gaTEgfCAwO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaWZmKHNyYywgc3JjMW9mcywgc3JjMWxlbiwgc3JjMiwgc3JjMm9mcywgc3JjMmxlbiwgZHN0LCBkc3RvZnMsIGNtcCkge1xuICByZXR1cm4gZGlmZlUoc3JjLCBzcmMxb2ZzLCBzcmMxbGVuLCBzcmMyLCBzcmMyb2ZzLCBzcmMybGVuLCBkc3QsIGRzdG9mcywgQ3VycnkuX18yKGNtcCkpO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRpb25Tb3J0KHNyYywgc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuLCBjbXApIHtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2YXIgZSA9IHNyY1tzcmNvZnMgKyBpIHwgMF07XG4gICAgdmFyIGogPSAoZHN0b2ZzICsgaSB8IDApIC0gMSB8IDA7XG4gICAgd2hpbGUoaiA+PSBkc3RvZnMgJiYgY21wKGRzdFtqXSwgZSkgPiAwKSB7XG4gICAgICBkc3RbaiArIDEgfCAwXSA9IGRzdFtqXTtcbiAgICAgIGogPSBqIC0gMSB8IDA7XG4gICAgfTtcbiAgICBkc3RbaiArIDEgfCAwXSA9IGU7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHNvcnRUbyhzcmMsIHNyY29mcywgZHN0LCBkc3RvZnMsIGxlbiwgY21wKSB7XG4gIGlmIChsZW4gPD0gNSkge1xuICAgIHJldHVybiBpbnNlcnRpb25Tb3J0KHNyYywgc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuLCBjbXApO1xuICB9XG4gIHZhciBsMSA9IGxlbiAvIDIgfCAwO1xuICB2YXIgbDIgPSBsZW4gLSBsMSB8IDA7XG4gIHNvcnRUbyhzcmMsIHNyY29mcyArIGwxIHwgMCwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBjbXApO1xuICBzb3J0VG8oc3JjLCBzcmNvZnMsIHNyYywgc3Jjb2ZzICsgbDIgfCAwLCBsMSwgY21wKTtcbiAgcmV0dXJuIG1lcmdlKHNyYywgc3Jjb2ZzICsgbDIgfCAwLCBsMSwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBkc3QsIGRzdG9mcywgY21wKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEluUGxhY2VCeVUoYSwgY21wKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsIDw9IDUpIHtcbiAgICByZXR1cm4gaW5zZXJ0aW9uU29ydChhLCAwLCBhLCAwLCBsLCBjbXApO1xuICB9XG4gIHZhciBsMSA9IGwgLyAyIHwgMDtcbiAgdmFyIGwyID0gbCAtIGwxIHwgMDtcbiAgdmFyIHQgPSBuZXcgQXJyYXkobDIpO1xuICBzb3J0VG8oYSwgbDEsIHQsIDAsIGwyLCBjbXApO1xuICBzb3J0VG8oYSwgMCwgYSwgbDIsIGwxLCBjbXApO1xuICByZXR1cm4gbWVyZ2UoYSwgbDIsIGwxLCB0LCAwLCBsMiwgYSwgMCwgY21wKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEluUGxhY2VCeShhLCBjbXApIHtcbiAgcmV0dXJuIHN0YWJsZVNvcnRJblBsYWNlQnlVKGEsIEN1cnJ5Ll9fMihjbXApKTtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEJ5VShhLCBjbXApIHtcbiAgdmFyIGIgPSBhLnNsaWNlKDApO1xuICBzdGFibGVTb3J0SW5QbGFjZUJ5VShiLCBjbXApO1xuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gc3RhYmxlU29ydEJ5KGEsIGNtcCkge1xuICByZXR1cm4gc3RhYmxlU29ydEJ5VShhLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGJpbmFyeVNlYXJjaEJ5VShzb3J0ZWQsIGtleSwgY21wKSB7XG4gIHZhciBsZW4gPSBzb3J0ZWQubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBsbyA9IHNvcnRlZFswXTtcbiAgdmFyIGMgPSBjbXAoa2V5LCBsbyk7XG4gIGlmIChjIDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICB2YXIgaGkgPSBzb3J0ZWRbbGVuIC0gMSB8IDBdO1xuICB2YXIgYzIgPSBjbXAoa2V5LCBoaSk7XG4gIGlmIChjMiA+IDApIHtcbiAgICByZXR1cm4gLShsZW4gKyAxIHwgMCkgfCAwO1xuICB9IGVsc2Uge1xuICAgIHZhciBfbG8gPSAwO1xuICAgIHZhciBfaGkgPSBsZW4gLSAxIHwgMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaGkkMSA9IF9oaTtcbiAgICAgIHZhciBsbyQxID0gX2xvO1xuICAgICAgdmFyIG1pZCA9IChsbyQxICsgaGkkMSB8IDApIC8gMiB8IDA7XG4gICAgICB2YXIgbWlkVmFsID0gc29ydGVkW21pZF07XG4gICAgICB2YXIgYyQxID0gY21wKGtleSwgbWlkVmFsKTtcbiAgICAgIGlmIChjJDEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG1pZDtcbiAgICAgIH1cbiAgICAgIGlmIChjJDEgPCAwKSB7XG4gICAgICAgIGlmIChoaSQxID09PSBtaWQpIHtcbiAgICAgICAgICBpZiAoY21wKHNvcnRlZFtsbyQxXSwga2V5KSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvJDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtKGhpJDEgKyAxIHwgMCkgfCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBfaGkgPSBtaWQ7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIGlmIChsbyQxID09PSBtaWQpIHtcbiAgICAgICAgaWYgKGNtcChzb3J0ZWRbaGkkMV0sIGtleSkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gaGkkMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLShoaSQxICsgMSB8IDApIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgX2xvID0gbWlkO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluYXJ5U2VhcmNoQnkoc29ydGVkLCBrZXksIGNtcCkge1xuICByZXR1cm4gYmluYXJ5U2VhcmNoQnlVKHNvcnRlZCwga2V5LCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbnZhciBJbnQ7XG5cbnZhciAkJFN0cmluZztcblxuZXhwb3J0IHtcbiAgSW50ICxcbiAgJCRTdHJpbmcgLFxuICBzdHJpY3RseVNvcnRlZExlbmd0aFUgLFxuICBzdHJpY3RseVNvcnRlZExlbmd0aCAsXG4gIGlzU29ydGVkVSAsXG4gIGlzU29ydGVkICxcbiAgc3RhYmxlU29ydEluUGxhY2VCeVUgLFxuICBzdGFibGVTb3J0SW5QbGFjZUJ5ICxcbiAgc3RhYmxlU29ydEJ5VSAsXG4gIHN0YWJsZVNvcnRCeSAsXG4gIGJpbmFyeVNlYXJjaEJ5VSAsXG4gIGJpbmFyeVNlYXJjaEJ5ICxcbiAgdW5pb25VICxcbiAgdW5pb24gLFxuICBpbnRlcnNlY3RVICxcbiAgaW50ZXJzZWN0ICxcbiAgZGlmZlUgLFxuICBkaWZmICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9Tb3J0QXJyYXkgZnJvbSBcIi4vYmVsdF9Tb3J0QXJyYXkuanNcIjtcblxuZnVuY3Rpb24gdHJlZUhlaWdodChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbi5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiBuLmtleSxcbiAgICAgICAgICAgIHZhbHVlOiBuLnZhbHVlLFxuICAgICAgICAgICAgaGVpZ2h0OiBuLmhlaWdodCxcbiAgICAgICAgICAgIGxlZnQ6IGNvcHkobi5sZWZ0KSxcbiAgICAgICAgICAgIHJpZ2h0OiBjb3B5KG4ucmlnaHQpXG4gICAgICAgICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGUobCwgeCwgZCwgcikge1xuICB2YXIgaGwgPSB0cmVlSGVpZ2h0KGwpO1xuICB2YXIgaHIgPSB0cmVlSGVpZ2h0KHIpO1xuICByZXR1cm4ge1xuICAgICAgICAgIGtleTogeCxcbiAgICAgICAgICB2YWx1ZTogZCxcbiAgICAgICAgICBoZWlnaHQ6IGhsID49IGhyID8gaGwgKyAxIHwgMCA6IGhyICsgMSB8IDAsXG4gICAgICAgICAgbGVmdDogbCxcbiAgICAgICAgICByaWdodDogclxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBzaW5nbGV0b24oeCwgZCkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGtleTogeCxcbiAgICAgICAgICB2YWx1ZTogZCxcbiAgICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICAgICAgbGVmdDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJpZ2h0OiB1bmRlZmluZWRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0R2UobCwgcikge1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGwuaGVpZ2h0ID49IHIuaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlKG4sIG5ld1ZhbHVlKSB7XG4gIGlmIChuLnZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgIHJldHVybiBuO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IG4ua2V5LFxuICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgaGVpZ2h0OiBuLmhlaWdodCxcbiAgICAgICAgICAgIGxlZnQ6IG4ubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiBuLnJpZ2h0XG4gICAgICAgICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYWwobCwgeCwgZCwgcikge1xuICB2YXIgaGwgPSBsICE9PSB1bmRlZmluZWQgPyBsLmhlaWdodCA6IDA7XG4gIHZhciBociA9IHIgIT09IHVuZGVmaW5lZCA/IHIuaGVpZ2h0IDogMDtcbiAgaWYgKGhsID4gKGhyICsgMiB8IDApKSB7XG4gICAgdmFyIGx2ID0gbC5rZXk7XG4gICAgdmFyIGxkID0gbC52YWx1ZTtcbiAgICB2YXIgbGwgPSBsLmxlZnQ7XG4gICAgdmFyIGxyID0gbC5yaWdodDtcbiAgICBpZiAodHJlZUhlaWdodChsbCkgPj0gdHJlZUhlaWdodChscikpIHtcbiAgICAgIHJldHVybiBjcmVhdGUobGwsIGx2LCBsZCwgY3JlYXRlKGxyLCB4LCBkLCByKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjcmVhdGUoY3JlYXRlKGxsLCBsdiwgbGQsIGxyLmxlZnQpLCBsci5rZXksIGxyLnZhbHVlLCBjcmVhdGUobHIucmlnaHQsIHgsIGQsIHIpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGhyIDw9IChobCArIDIgfCAwKSkge1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBrZXk6IHgsXG4gICAgICAgICAgICB2YWx1ZTogZCxcbiAgICAgICAgICAgIGhlaWdodDogaGwgPj0gaHIgPyBobCArIDEgfCAwIDogaHIgKyAxIHwgMCxcbiAgICAgICAgICAgIGxlZnQ6IGwsXG4gICAgICAgICAgICByaWdodDogclxuICAgICAgICAgIH07XG4gIH1cbiAgdmFyIHJ2ID0gci5rZXk7XG4gIHZhciByZCA9IHIudmFsdWU7XG4gIHZhciBybCA9IHIubGVmdDtcbiAgdmFyIHJyID0gci5yaWdodDtcbiAgaWYgKHRyZWVIZWlnaHQocnIpID49IHRyZWVIZWlnaHQocmwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZShjcmVhdGUobCwgeCwgZCwgcmwpLCBydiwgcmQsIHJyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlKGNyZWF0ZShsLCB4LCBkLCBybC5sZWZ0KSwgcmwua2V5LCBybC52YWx1ZSwgY3JlYXRlKHJsLnJpZ2h0LCBydiwgcmQsIHJyKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWluS2V5MEF1eChfbikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgbiQxID0gbi5sZWZ0O1xuICAgIGlmIChuJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG4ua2V5O1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1pbktleShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShtaW5LZXkwQXV4KG4pKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWluS2V5VW5kZWZpbmVkKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtaW5LZXkwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtYXhLZXkwQXV4KF9uKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIHZhciBuJDEgPSBuLnJpZ2h0O1xuICAgIGlmIChuJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG4ua2V5O1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1heEtleShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShtYXhLZXkwQXV4KG4pKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWF4S2V5VW5kZWZpbmVkKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXhLZXkwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtaW5LVjBBdXgoX24pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIG4kMSA9IG4ubGVmdDtcbiAgICBpZiAobiQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgbi5rZXksXG4gICAgICAgICAgICAgIG4udmFsdWVcbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIF9uID0gbiQxO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWluaW11bShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWluS1YwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtaW5VbmRlZmluZWQobikge1xuICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG1pbktWMEF1eChuKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWF4S1YwQXV4KF9uKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIHZhciBuJDEgPSBuLnJpZ2h0O1xuICAgIGlmIChuJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBuLmtleSxcbiAgICAgICAgICAgICAgbi52YWx1ZVxuICAgICAgICAgICAgXTtcbiAgICB9XG4gICAgX24gPSBuJDE7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtYXhpbXVtKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXhLVjBBdXgobik7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1heFVuZGVmaW5lZChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWF4S1YwQXV4KG4pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiByZW1vdmVNaW5BdXhXaXRoUmVmKG4sIGtyLCB2cikge1xuICB2YXIgbG4gPSBuLmxlZnQ7XG4gIHZhciBybiA9IG4ucmlnaHQ7XG4gIHZhciBrbiA9IG4ua2V5O1xuICB2YXIgdm4gPSBuLnZhbHVlO1xuICBpZiAobG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwocmVtb3ZlTWluQXV4V2l0aFJlZihsbiwga3IsIHZyKSwga24sIHZuLCBybik7XG4gIH0gZWxzZSB7XG4gICAga3IuY29udGVudHMgPSBrbjtcbiAgICB2ci5jb250ZW50cyA9IHZuO1xuICAgIHJldHVybiBybjtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0VtcHR5KHgpIHtcbiAgcmV0dXJuIHggPT09IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gc3RhY2tBbGxMZWZ0KF92LCBfcykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHMgPSBfcztcbiAgICB2YXIgdiA9IF92O1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBfcyA9IC8qIDo6ICovW1xuICAgICAgdixcbiAgICAgIHNcbiAgICBdO1xuICAgIF92ID0gdi5sZWZ0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnlVKG4sIHApIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIGxlZnQgPSBmaW5kRmlyc3RCeVUobi5sZWZ0LCBwKTtcbiAgaWYgKGxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBsZWZ0O1xuICB9XG4gIHZhciB2ID0gbi5rZXk7XG4gIHZhciBkID0gbi52YWx1ZTtcbiAgdmFyIHB2ZCA9IHAodiwgZCk7XG4gIGlmIChwdmQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB2LFxuICAgICAgICAgICAgZFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIHJpZ2h0ID0gZmluZEZpcnN0QnlVKG4ucmlnaHQsIHApO1xuICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByaWdodDtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnkobiwgcCkge1xuICByZXR1cm4gZmluZEZpcnN0QnlVKG4sIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKF9uLCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGZvckVhY2hVKG4ubGVmdCwgZik7XG4gICAgZihuLmtleSwgbi52YWx1ZSk7XG4gICAgX24gPSBuLnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChuLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoVShuLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKG4sIGYpIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIG5ld0xlZnQgPSBtYXBVKG4ubGVmdCwgZik7XG4gIHZhciBuZXdEID0gZihuLnZhbHVlKTtcbiAgdmFyIG5ld1JpZ2h0ID0gbWFwVShuLnJpZ2h0LCBmKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBrZXk6IG4ua2V5LFxuICAgICAgICAgIHZhbHVlOiBuZXdELFxuICAgICAgICAgIGhlaWdodDogbi5oZWlnaHQsXG4gICAgICAgICAgbGVmdDogbmV3TGVmdCxcbiAgICAgICAgICByaWdodDogbmV3UmlnaHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gbWFwKG4sIGYpIHtcbiAgcmV0dXJuIG1hcFUobiwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aEtleVUobiwgZikge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIga2V5ID0gbi5rZXk7XG4gIHZhciBuZXdMZWZ0ID0gbWFwV2l0aEtleVUobi5sZWZ0LCBmKTtcbiAgdmFyIG5ld0QgPSBmKGtleSwgbi52YWx1ZSk7XG4gIHZhciBuZXdSaWdodCA9IG1hcFdpdGhLZXlVKG4ucmlnaHQsIGYpO1xuICByZXR1cm4ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiBuZXdELFxuICAgICAgICAgIGhlaWdodDogbi5oZWlnaHQsXG4gICAgICAgICAgbGVmdDogbmV3TGVmdCxcbiAgICAgICAgICByaWdodDogbmV3UmlnaHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aEtleShuLCBmKSB7XG4gIHJldHVybiBtYXBXaXRoS2V5VShuLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKF9tLCBfYWNjdSwgZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICB2YXIgbSA9IF9tO1xuICAgIGlmIChtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgICB2YXIgdiA9IG0ua2V5O1xuICAgIHZhciBkID0gbS52YWx1ZTtcbiAgICB2YXIgbCA9IG0ubGVmdDtcbiAgICB2YXIgciA9IG0ucmlnaHQ7XG4gICAgX2FjY3UgPSBmKHJlZHVjZVUobCwgYWNjdSwgZiksIHYsIGQpO1xuICAgIF9tID0gcjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShtLCBhY2N1LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKG0sIGFjY3UsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5VShfbiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwKG4ua2V5LCBuLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWV2ZXJ5VShuLmxlZnQsIHApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF9uID0gbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5KG4sIHApIHtcbiAgcmV0dXJuIGV2ZXJ5VShuLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBzb21lVShfbiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwKG4ua2V5LCBuLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzb21lVShuLmxlZnQsIHApKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX24gPSBuLnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc29tZShuLCBwKSB7XG4gIHJldHVybiBzb21lVShuLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBhZGRNaW5FbGVtZW50KG4sIGssIHYpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwoYWRkTWluRWxlbWVudChuLmxlZnQsIGssIHYpLCBuLmtleSwgbi52YWx1ZSwgbi5yaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbihrLCB2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRNYXhFbGVtZW50KG4sIGssIHYpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwobi5sZWZ0LCBuLmtleSwgbi52YWx1ZSwgYWRkTWF4RWxlbWVudChuLnJpZ2h0LCBrLCB2KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbihrLCB2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqb2luKGxuLCB2LCBkLCBybikge1xuICBpZiAobG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhZGRNaW5FbGVtZW50KHJuLCB2LCBkKTtcbiAgfVxuICBpZiAocm4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhZGRNYXhFbGVtZW50KGxuLCB2LCBkKTtcbiAgfVxuICB2YXIgbHYgPSBsbi5rZXk7XG4gIHZhciBsZCA9IGxuLnZhbHVlO1xuICB2YXIgbGggPSBsbi5oZWlnaHQ7XG4gIHZhciBsbCA9IGxuLmxlZnQ7XG4gIHZhciBsciA9IGxuLnJpZ2h0O1xuICB2YXIgcnYgPSBybi5rZXk7XG4gIHZhciByZCA9IHJuLnZhbHVlO1xuICB2YXIgcmggPSBybi5oZWlnaHQ7XG4gIHZhciBybCA9IHJuLmxlZnQ7XG4gIHZhciByciA9IHJuLnJpZ2h0O1xuICBpZiAobGggPiAocmggKyAyIHwgMCkpIHtcbiAgICByZXR1cm4gYmFsKGxsLCBsdiwgbGQsIGpvaW4obHIsIHYsIGQsIHJuKSk7XG4gIH0gZWxzZSBpZiAocmggPiAobGggKyAyIHwgMCkpIHtcbiAgICByZXR1cm4gYmFsKGpvaW4obG4sIHYsIGQsIHJsKSwgcnYsIHJkLCBycik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZShsbiwgdiwgZCwgcm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmNhdCh0MSwgdDIpIHtcbiAgaWYgKHQxID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdDI7XG4gIH1cbiAgaWYgKHQyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdDE7XG4gIH1cbiAgdmFyIGtyID0ge1xuICAgIGNvbnRlbnRzOiB0Mi5rZXlcbiAgfTtcbiAgdmFyIHZyID0ge1xuICAgIGNvbnRlbnRzOiB0Mi52YWx1ZVxuICB9O1xuICB2YXIgdDJyID0gcmVtb3ZlTWluQXV4V2l0aFJlZih0Miwga3IsIHZyKTtcbiAgcmV0dXJuIGpvaW4odDEsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgdDJyKTtcbn1cblxuZnVuY3Rpb24gY29uY2F0T3JKb2luKHQxLCB2LCBkLCB0Mikge1xuICBpZiAoZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGpvaW4odDEsIHYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZCksIHQyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uY2F0KHQxLCB0Mik7XG4gIH1cbn1cblxuZnVuY3Rpb24ga2VlcFNoYXJlZFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgdiA9IG4ua2V5O1xuICB2YXIgZCA9IG4udmFsdWU7XG4gIHZhciBuZXdMZWZ0ID0ga2VlcFNoYXJlZFUobi5sZWZ0LCBwKTtcbiAgdmFyIHB2ZCA9IHAodiwgZCk7XG4gIHZhciBuZXdSaWdodCA9IGtlZXBTaGFyZWRVKG4ucmlnaHQsIHApO1xuICBpZiAocHZkKSB7XG4gICAgcmV0dXJuIGpvaW4obmV3TGVmdCwgdiwgZCwgbmV3UmlnaHQpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb25jYXQobmV3TGVmdCwgbmV3UmlnaHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGtlZXBTaGFyZWQobiwgcCkge1xuICByZXR1cm4ga2VlcFNoYXJlZFUobiwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24ga2VlcE1hcFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgdiA9IG4ua2V5O1xuICB2YXIgZCA9IG4udmFsdWU7XG4gIHZhciBuZXdMZWZ0ID0ga2VlcE1hcFUobi5sZWZ0LCBwKTtcbiAgdmFyIHB2ZCA9IHAodiwgZCk7XG4gIHZhciBuZXdSaWdodCA9IGtlZXBNYXBVKG4ucmlnaHQsIHApO1xuICBpZiAocHZkICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gam9pbihuZXdMZWZ0LCB2LCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHB2ZCksIG5ld1JpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29uY2F0KG5ld0xlZnQsIG5ld1JpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZWVwTWFwKG4sIHApIHtcbiAgcmV0dXJuIGtlZXBNYXBVKG4sIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvblNoYXJlZFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIga2V5ID0gbi5rZXk7XG4gIHZhciB2YWx1ZSA9IG4udmFsdWU7XG4gIHZhciBtYXRjaCA9IHBhcnRpdGlvblNoYXJlZFUobi5sZWZ0LCBwKTtcbiAgdmFyIGxmID0gbWF0Y2hbMV07XG4gIHZhciBsdCA9IG1hdGNoWzBdO1xuICB2YXIgcHZkID0gcChrZXksIHZhbHVlKTtcbiAgdmFyIG1hdGNoJDEgPSBwYXJ0aXRpb25TaGFyZWRVKG4ucmlnaHQsIHApO1xuICB2YXIgcmYgPSBtYXRjaCQxWzFdO1xuICB2YXIgcnQgPSBtYXRjaCQxWzBdO1xuICBpZiAocHZkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgam9pbihsdCwga2V5LCB2YWx1ZSwgcnQpLFxuICAgICAgICAgICAgY29uY2F0KGxmLCByZilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGNvbmNhdChsdCwgcnQpLFxuICAgICAgICAgICAgam9pbihsZiwga2V5LCB2YWx1ZSwgcmYpXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25TaGFyZWQobiwgcCkge1xuICByZXR1cm4gcGFydGl0aW9uU2hhcmVkVShuLCBDdXJyeS5fXzIocCkpO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhOb2RlKG4pIHtcbiAgdmFyIGwgPSBuLmxlZnQ7XG4gIHZhciByID0gbi5yaWdodDtcbiAgdmFyIHNpemVMID0gbCAhPT0gdW5kZWZpbmVkID8gbGVuZ3RoTm9kZShsKSA6IDA7XG4gIHZhciBzaXplUiA9IHIgIT09IHVuZGVmaW5lZCA/IGxlbmd0aE5vZGUocikgOiAwO1xuICByZXR1cm4gKDEgKyBzaXplTCB8IDApICsgc2l6ZVIgfCAwO1xufVxuXG5mdW5jdGlvbiBzaXplKG4pIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBsZW5ndGhOb2RlKG4pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvTGlzdEF1eChfbiwgX2FjY3UpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgdmFyIGsgPSBuLmtleTtcbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHIgPSBuLnJpZ2h0O1xuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgayxcbiAgICAgICAgdlxuICAgICAgXSxcbiAgICAgIHRvTGlzdEF1eChyLCBhY2N1KVxuICAgIF07XG4gICAgX24gPSBsO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9MaXN0KHMpIHtcbiAgcmV0dXJuIHRvTGlzdEF1eChzLCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBjaGVja0ludmFyaWFudEludGVybmFsKF92KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgdiA9IF92O1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBsID0gdi5sZWZ0O1xuICAgIHZhciByID0gdi5yaWdodDtcbiAgICB2YXIgZGlmZiA9IHRyZWVIZWlnaHQobCkgLSB0cmVlSGVpZ2h0KHIpIHwgMDtcbiAgICBpZiAoIShkaWZmIDw9IDIgJiYgZGlmZiA+PSAtMikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZpbGUgXFxcImJlbHRfaW50ZXJuYWxBVkx0cmVlLm1sXFxcIiwgbGluZSAzODEsIGNoYXJhY3RlcnMgNi0xMlwiKTtcbiAgICB9XG4gICAgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChsKTtcbiAgICBfdiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXlLZXkoX24sIF9pLCBhcnIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgdiA9IG4ua2V5O1xuICAgIHZhciBsID0gbi5sZWZ0O1xuICAgIHZhciByID0gbi5yaWdodDtcbiAgICB2YXIgbmV4dCA9IGwgIT09IHVuZGVmaW5lZCA/IGZpbGxBcnJheUtleShsLCBpLCBhcnIpIDogaTtcbiAgICBhcnJbbmV4dF0gPSB2O1xuICAgIHZhciBybmV4dCA9IG5leHQgKyAxIHwgMDtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcm5leHQ7XG4gICAgfVxuICAgIF9pID0gcm5leHQ7XG4gICAgX24gPSByO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbEFycmF5VmFsdWUoX24sIF9pLCBhcnIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgbCA9IG4ubGVmdDtcbiAgICB2YXIgciA9IG4ucmlnaHQ7XG4gICAgdmFyIG5leHQgPSBsICE9PSB1bmRlZmluZWQgPyBmaWxsQXJyYXlWYWx1ZShsLCBpLCBhcnIpIDogaTtcbiAgICBhcnJbbmV4dF0gPSBuLnZhbHVlO1xuICAgIHZhciBybmV4dCA9IG5leHQgKyAxIHwgMDtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcm5leHQ7XG4gICAgfVxuICAgIF9pID0gcm5leHQ7XG4gICAgX24gPSByO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbEFycmF5KF9uLCBfaSwgYXJyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHYgPSBuLmtleTtcbiAgICB2YXIgciA9IG4ucmlnaHQ7XG4gICAgdmFyIG5leHQgPSBsICE9PSB1bmRlZmluZWQgPyBmaWxsQXJyYXkobCwgaSwgYXJyKSA6IGk7XG4gICAgYXJyW25leHRdID0gLyogdHVwbGUgKi9bXG4gICAgICB2LFxuICAgICAgbi52YWx1ZVxuICAgIF07XG4gICAgdmFyIHJuZXh0ID0gbmV4dCArIDEgfCAwO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBybmV4dDtcbiAgICB9XG4gICAgX2kgPSBybmV4dDtcbiAgICBfbiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0b0FycmF5KG4pIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgc2l6ZSA9IGxlbmd0aE5vZGUobik7XG4gIHZhciB2ID0gbmV3IEFycmF5KHNpemUpO1xuICBmaWxsQXJyYXkobiwgMCwgdik7XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBrZXlzVG9BcnJheShuKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgZmlsbEFycmF5S2V5KG4sIDAsIHYpO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gdmFsdWVzVG9BcnJheShuKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgZmlsbEFycmF5VmFsdWUobiwgMCwgdik7XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlSZXZBdXgoYXJyLCBvZmYsIGxlbikge1xuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMCA6XG4gICAgICAgIHJldHVybiA7XG4gICAgY2FzZSAxIDpcbiAgICAgICAgdmFyIG1hdGNoID0gYXJyW29mZl07XG4gICAgICAgIHJldHVybiBzaW5nbGV0b24obWF0Y2hbMF0sIG1hdGNoWzFdKTtcbiAgICBjYXNlIDIgOlxuICAgICAgICB2YXIgbWF0Y2hfMDAwID0gYXJyW29mZl07XG4gICAgICAgIHZhciBtYXRjaF8wMDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoXzAwMTtcbiAgICAgICAgdmFyIG1hdGNoJDIgPSBtYXRjaF8wMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQxWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQxWzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkMlswXSwgbWF0Y2gkMlsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciBtYXRjaF8wMDAkMSA9IGFycltvZmZdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAxJDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAyID0gYXJyW29mZiAtIDIgfCAwXTtcbiAgICAgICAgdmFyIG1hdGNoJDMgPSBtYXRjaF8wMDI7XG4gICAgICAgIHZhciBtYXRjaCQ0ID0gbWF0Y2hfMDAxJDE7XG4gICAgICAgIHZhciBtYXRjaCQ1ID0gbWF0Y2hfMDAwJDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQ0WzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQ0WzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkNVswXSwgbWF0Y2gkNVsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHNpbmdsZXRvbihtYXRjaCQzWzBdLCBtYXRjaCQzWzFdKVxuICAgICAgICAgICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgbmwgPSBsZW4gLyAyIHwgMDtcbiAgICAgIHZhciBsZWZ0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgb2ZmLCBubCk7XG4gICAgICB2YXIgbWF0Y2gkNiA9IGFycltvZmYgLSBubCB8IDBdO1xuICAgICAgdmFyIHJpZ2h0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgKG9mZiAtIG5sIHwgMCkgLSAxIHwgMCwgKGxlbiAtIG5sIHwgMCkgLSAxIHwgMCk7XG4gICAgICByZXR1cm4gY3JlYXRlKGxlZnQsIG1hdGNoJDZbMF0sIG1hdGNoJDZbMV0sIHJpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCBvZmYsIGxlbikge1xuICBzd2l0Y2ggKGxlbikge1xuICAgIGNhc2UgMCA6XG4gICAgICAgIHJldHVybiA7XG4gICAgY2FzZSAxIDpcbiAgICAgICAgdmFyIG1hdGNoID0gYXJyW29mZl07XG4gICAgICAgIHJldHVybiBzaW5nbGV0b24obWF0Y2hbMF0sIG1hdGNoWzFdKTtcbiAgICBjYXNlIDIgOlxuICAgICAgICB2YXIgbWF0Y2hfMDAwID0gYXJyW29mZl07XG4gICAgICAgIHZhciBtYXRjaF8wMDEgPSBhcnJbb2ZmICsgMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoXzAwMTtcbiAgICAgICAgdmFyIG1hdGNoJDIgPSBtYXRjaF8wMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQxWzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQxWzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkMlswXSwgbWF0Y2gkMlsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciBtYXRjaF8wMDAkMSA9IGFycltvZmZdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAxJDEgPSBhcnJbb2ZmICsgMSB8IDBdO1xuICAgICAgICB2YXIgbWF0Y2hfMDAyID0gYXJyW29mZiArIDIgfCAwXTtcbiAgICAgICAgdmFyIG1hdGNoJDMgPSBtYXRjaF8wMDI7XG4gICAgICAgIHZhciBtYXRjaCQ0ID0gbWF0Y2hfMDAxJDE7XG4gICAgICAgIHZhciBtYXRjaCQ1ID0gbWF0Y2hfMDAwJDE7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBtYXRjaCQ0WzBdLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBtYXRjaCQ0WzFdLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24obWF0Y2gkNVswXSwgbWF0Y2gkNVsxXSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHNpbmdsZXRvbihtYXRjaCQzWzBdLCBtYXRjaCQzWzFdKVxuICAgICAgICAgICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB2YXIgbmwgPSBsZW4gLyAyIHwgMDtcbiAgICAgIHZhciBsZWZ0ID0gZnJvbVNvcnRlZEFycmF5QXV4KGFyciwgb2ZmLCBubCk7XG4gICAgICB2YXIgbWF0Y2gkNiA9IGFycltvZmYgKyBubCB8IDBdO1xuICAgICAgdmFyIHJpZ2h0ID0gZnJvbVNvcnRlZEFycmF5QXV4KGFyciwgKG9mZiArIG5sIHwgMCkgKyAxIHwgMCwgKGxlbiAtIG5sIHwgMCkgLSAxIHwgMCk7XG4gICAgICByZXR1cm4gY3JlYXRlKGxlZnQsIG1hdGNoJDZbMF0sIG1hdGNoJDZbMV0sIHJpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlVbnNhZmUoYXJyKSB7XG4gIHJldHVybiBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCAwLCBhcnIubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gY21wVShzMSwgczIsIGtjbXAsIHZjbXApIHtcbiAgdmFyIGxlbjEgPSBzaXplKHMxKTtcbiAgdmFyIGxlbjIgPSBzaXplKHMyKTtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICB2YXIgX2UxID0gc3RhY2tBbGxMZWZ0KHMxLCAvKiBbXSAqLzApO1xuICAgIHZhciBfZTIgPSBzdGFja0FsbExlZnQoczIsIC8qIFtdICovMCk7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGUyID0gX2UyO1xuICAgICAgdmFyIGUxID0gX2UxO1xuICAgICAgaWYgKCFlMSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmICghZTIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgaDIgPSBlMlswXTtcbiAgICAgIHZhciBoMSA9IGUxWzBdO1xuICAgICAgdmFyIGMgPSBrY21wKGgxLmtleSwgaDIua2V5KTtcbiAgICAgIGlmIChjICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgICAgfVxuICAgICAgdmFyIGN4ID0gdmNtcChoMS52YWx1ZSwgaDIudmFsdWUpO1xuICAgICAgaWYgKGN4ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBjeDtcbiAgICAgIH1cbiAgICAgIF9lMiA9IHN0YWNrQWxsTGVmdChoMi5yaWdodCwgZTJbMV0pO1xuICAgICAgX2UxID0gc3RhY2tBbGxMZWZ0KGgxLnJpZ2h0LCBlMVsxXSk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChsZW4xIDwgbGVuMikge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbXAoczEsIHMyLCBrY21wLCB2Y21wKSB7XG4gIHJldHVybiBjbXBVKHMxLCBzMiwga2NtcCwgQ3VycnkuX18yKHZjbXApKTtcbn1cblxuZnVuY3Rpb24gZXFVKHMxLCBzMiwga2NtcCwgdmVxKSB7XG4gIHZhciBsZW4xID0gc2l6ZShzMSk7XG4gIHZhciBsZW4yID0gc2l6ZShzMik7XG4gIGlmIChsZW4xID09PSBsZW4yKSB7XG4gICAgdmFyIF9lMSA9IHN0YWNrQWxsTGVmdChzMSwgLyogW10gKi8wKTtcbiAgICB2YXIgX2UyID0gc3RhY2tBbGxMZWZ0KHMyLCAvKiBbXSAqLzApO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBlMiA9IF9lMjtcbiAgICAgIHZhciBlMSA9IF9lMTtcbiAgICAgIGlmICghZTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWUyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGgyID0gZTJbMF07XG4gICAgICB2YXIgaDEgPSBlMVswXTtcbiAgICAgIGlmICghKGtjbXAoaDEua2V5LCBoMi5rZXkpID09PSAwICYmIHZlcShoMS52YWx1ZSwgaDIudmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBfZTIgPSBzdGFja0FsbExlZnQoaDIucmlnaHQsIGUyWzFdKTtcbiAgICAgIF9lMSA9IHN0YWNrQWxsTGVmdChoMS5yaWdodCwgZTFbMV0pO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxKHMxLCBzMiwga2NtcCwgdmVxKSB7XG4gIHJldHVybiBlcVUoczEsIHMyLCBrY21wLCBDdXJyeS5fXzIodmVxKSk7XG59XG5cbmZ1bmN0aW9uIGdldChfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB2ID0gbi5rZXk7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKG4udmFsdWUpO1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZChfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB2ID0gbi5rZXk7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV4bihfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB2ID0gbi5rZXk7XG4gICAgICB2YXIgYyA9IGNtcCh4LCB2KTtcbiAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgICAgfVxuICAgICAgX24gPSBjIDwgMCA/IG4ubGVmdCA6IG4ucmlnaHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImdldEV4bjBcIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KF9uLCB4LCBkZWYsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICB2YXIgdiA9IG4ua2V5O1xuICAgIHZhciBjID0gY21wKHgsIHYpO1xuICAgIGlmIChjID09PSAwKSB7XG4gICAgICByZXR1cm4gbi52YWx1ZTtcbiAgICB9XG4gICAgX24gPSBjIDwgMCA/IG4ubGVmdCA6IG4ucmlnaHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYXMoX24sIHgsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB2ID0gbi5rZXk7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVdpdGhMZWZ0Q2hpbGQoazIpIHtcbiAgdmFyIGsxID0gazIubGVmdDtcbiAgazIubGVmdCA9IGsxLnJpZ2h0O1xuICBrMS5yaWdodCA9IGsyO1xuICB2YXIgaGxrMiA9IHRyZWVIZWlnaHQoazIubGVmdCk7XG4gIHZhciBocmsyID0gdHJlZUhlaWdodChrMi5yaWdodCk7XG4gIGsyLmhlaWdodCA9IChcbiAgICBobGsyID4gaHJrMiA/IGhsazIgOiBocmsyXG4gICkgKyAxIHwgMDtcbiAgdmFyIGhsazEgPSB0cmVlSGVpZ2h0KGsxLmxlZnQpO1xuICB2YXIgaGsyID0gazIuaGVpZ2h0O1xuICBrMS5oZWlnaHQgPSAoXG4gICAgaGxrMSA+IGhrMiA/IGhsazEgOiBoazJcbiAgKSArIDEgfCAwO1xuICByZXR1cm4gazE7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVdpdGhSaWdodENoaWxkKGsxKSB7XG4gIHZhciBrMiA9IGsxLnJpZ2h0O1xuICBrMS5yaWdodCA9IGsyLmxlZnQ7XG4gIGsyLmxlZnQgPSBrMTtcbiAgdmFyIGhsazEgPSB0cmVlSGVpZ2h0KGsxLmxlZnQpO1xuICB2YXIgaHJrMSA9IHRyZWVIZWlnaHQoazEucmlnaHQpO1xuICBrMS5oZWlnaHQgPSAoXG4gICAgaGxrMSA+IGhyazEgPyBobGsxIDogaHJrMVxuICApICsgMSB8IDA7XG4gIHZhciBocmsyID0gdHJlZUhlaWdodChrMi5yaWdodCk7XG4gIHZhciBoazEgPSBrMS5oZWlnaHQ7XG4gIGsyLmhlaWdodCA9IChcbiAgICBocmsyID4gaGsxID8gaHJrMiA6IGhrMVxuICApICsgMSB8IDA7XG4gIHJldHVybiBrMjtcbn1cblxuZnVuY3Rpb24gZG91YmxlV2l0aExlZnRDaGlsZChrMykge1xuICB2YXIgdiA9IHJvdGF0ZVdpdGhSaWdodENoaWxkKGszLmxlZnQpO1xuICBrMy5sZWZ0ID0gdjtcbiAgcmV0dXJuIHJvdGF0ZVdpdGhMZWZ0Q2hpbGQoazMpO1xufVxuXG5mdW5jdGlvbiBkb3VibGVXaXRoUmlnaHRDaGlsZChrMikge1xuICB2YXIgdiA9IHJvdGF0ZVdpdGhMZWZ0Q2hpbGQoazIucmlnaHQpO1xuICBrMi5yaWdodCA9IHY7XG4gIHJldHVybiByb3RhdGVXaXRoUmlnaHRDaGlsZChrMik7XG59XG5cbmZ1bmN0aW9uIGhlaWdodFVwZGF0ZU11dGF0ZSh0KSB7XG4gIHZhciBobHQgPSB0cmVlSGVpZ2h0KHQubGVmdCk7XG4gIHZhciBocnQgPSB0cmVlSGVpZ2h0KHQucmlnaHQpO1xuICB0LmhlaWdodCA9IChcbiAgICBobHQgPiBocnQgPyBobHQgOiBocnRcbiAgKSArIDEgfCAwO1xuICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gYmFsTXV0YXRlKG50KSB7XG4gIHZhciBsID0gbnQubGVmdDtcbiAgdmFyIHIgPSBudC5yaWdodDtcbiAgdmFyIGhsID0gdHJlZUhlaWdodChsKTtcbiAgdmFyIGhyID0gdHJlZUhlaWdodChyKTtcbiAgaWYgKGhsID4gKDIgKyBociB8IDApKSB7XG4gICAgdmFyIGxsID0gbC5sZWZ0O1xuICAgIHZhciBsciA9IGwucmlnaHQ7XG4gICAgaWYgKGhlaWdodEdlKGxsLCBscikpIHtcbiAgICAgIHJldHVybiBoZWlnaHRVcGRhdGVNdXRhdGUocm90YXRlV2l0aExlZnRDaGlsZChudCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGVpZ2h0VXBkYXRlTXV0YXRlKGRvdWJsZVdpdGhMZWZ0Q2hpbGQobnQpKTtcbiAgICB9XG4gIH1cbiAgaWYgKGhyID4gKDIgKyBobCB8IDApKSB7XG4gICAgdmFyIHJsID0gci5sZWZ0O1xuICAgIHZhciByciA9IHIucmlnaHQ7XG4gICAgaWYgKGhlaWdodEdlKHJyLCBybCkpIHtcbiAgICAgIHJldHVybiBoZWlnaHRVcGRhdGVNdXRhdGUocm90YXRlV2l0aFJpZ2h0Q2hpbGQobnQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGhlaWdodFVwZGF0ZU11dGF0ZShkb3VibGVXaXRoUmlnaHRDaGlsZChudCkpO1xuICAgIH1cbiAgfVxuICBudC5oZWlnaHQgPSAoXG4gICAgaGwgPiBociA/IGhsIDogaHJcbiAgKSArIDEgfCAwO1xuICByZXR1cm4gbnQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU11dGF0ZSh0LCB4LCBkYXRhLCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzaW5nbGV0b24oeCwgZGF0YSk7XG4gIH1cbiAgdmFyIGsgPSB0LmtleTtcbiAgdmFyIGMgPSBjbXAoeCwgayk7XG4gIGlmIChjID09PSAwKSB7XG4gICAgdC52YWx1ZSA9IGRhdGE7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdmFyIGwgPSB0LmxlZnQ7XG4gIHZhciByID0gdC5yaWdodDtcbiAgaWYgKGMgPCAwKSB7XG4gICAgdmFyIGxsID0gdXBkYXRlTXV0YXRlKGwsIHgsIGRhdGEsIGNtcCk7XG4gICAgdC5sZWZ0ID0gbGw7XG4gIH0gZWxzZSB7XG4gICAgdC5yaWdodCA9IHVwZGF0ZU11dGF0ZShyLCB4LCBkYXRhLCBjbXApO1xuICB9XG4gIHJldHVybiBiYWxNdXRhdGUodCk7XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheSh4cywgY21wKSB7XG4gIHZhciBsZW4gPSB4cy5sZW5ndGg7XG4gIGlmIChsZW4gPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBuZXh0ID0gQmVsdF9Tb3J0QXJyYXkuc3RyaWN0bHlTb3J0ZWRMZW5ndGhVKHhzLCAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgcmV0dXJuIGNtcChwYXJhbVswXSwgcGFyYW0kMVswXSkgPCAwO1xuICAgICAgICB9KSk7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChuZXh0ID49IDApIHtcbiAgICByZXN1bHQgPSBmcm9tU29ydGVkQXJyYXlBdXgoeHMsIDAsIG5leHQpO1xuICB9IGVsc2Uge1xuICAgIG5leHQgPSAtbmV4dCB8IDA7XG4gICAgcmVzdWx0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KHhzLCBuZXh0IC0gMSB8IDAsIG5leHQpO1xuICB9XG4gIGZvcih2YXIgaSA9IG5leHQ7IGkgPCBsZW47ICsraSl7XG4gICAgdmFyIG1hdGNoID0geHNbaV07XG4gICAgcmVzdWx0ID0gdXBkYXRlTXV0YXRlKHJlc3VsdCwgbWF0Y2hbMF0sIG1hdGNoWzFdLCBjbXApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1pbkF1eFdpdGhSb290TXV0YXRlKG50LCBuKSB7XG4gIHZhciBybiA9IG4ucmlnaHQ7XG4gIHZhciBsbiA9IG4ubGVmdDtcbiAgaWYgKGxuICE9PSB1bmRlZmluZWQpIHtcbiAgICBuLmxlZnQgPSByZW1vdmVNaW5BdXhXaXRoUm9vdE11dGF0ZShudCwgbG4pO1xuICAgIHJldHVybiBiYWxNdXRhdGUobik7XG4gIH0gZWxzZSB7XG4gICAgbnQua2V5ID0gbi5rZXk7XG4gICAgbnQudmFsdWUgPSBuLnZhbHVlO1xuICAgIHJldHVybiBybjtcbiAgfVxufVxuXG5leHBvcnQge1xuICBjb3B5ICxcbiAgY3JlYXRlICxcbiAgYmFsICxcbiAgc2luZ2xldG9uICxcbiAgdXBkYXRlVmFsdWUgLFxuICBtaW5LZXkgLFxuICBtaW5LZXlVbmRlZmluZWQgLFxuICBtYXhLZXkgLFxuICBtYXhLZXlVbmRlZmluZWQgLFxuICBtaW5pbXVtICxcbiAgbWluVW5kZWZpbmVkICxcbiAgbWF4aW11bSAsXG4gIG1heFVuZGVmaW5lZCAsXG4gIHJlbW92ZU1pbkF1eFdpdGhSZWYgLFxuICBpc0VtcHR5ICxcbiAgc3RhY2tBbGxMZWZ0ICxcbiAgZmluZEZpcnN0QnlVICxcbiAgZmluZEZpcnN0QnkgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICBtYXBVICxcbiAgbWFwICxcbiAgbWFwV2l0aEtleVUgLFxuICBtYXBXaXRoS2V5ICxcbiAgcmVkdWNlVSAsXG4gIHJlZHVjZSAsXG4gIGV2ZXJ5VSAsXG4gIGV2ZXJ5ICxcbiAgc29tZVUgLFxuICBzb21lICxcbiAgam9pbiAsXG4gIGNvbmNhdCAsXG4gIGNvbmNhdE9ySm9pbiAsXG4gIGtlZXBTaGFyZWRVICxcbiAga2VlcFNoYXJlZCAsXG4gIGtlZXBNYXBVICxcbiAga2VlcE1hcCAsXG4gIHBhcnRpdGlvblNoYXJlZFUgLFxuICBwYXJ0aXRpb25TaGFyZWQgLFxuICBsZW5ndGhOb2RlICxcbiAgc2l6ZSAsXG4gIHRvTGlzdCAsXG4gIGNoZWNrSW52YXJpYW50SW50ZXJuYWwgLFxuICBmaWxsQXJyYXkgLFxuICB0b0FycmF5ICxcbiAga2V5c1RvQXJyYXkgLFxuICB2YWx1ZXNUb0FycmF5ICxcbiAgZnJvbVNvcnRlZEFycmF5QXV4ICxcbiAgZnJvbVNvcnRlZEFycmF5UmV2QXV4ICxcbiAgZnJvbVNvcnRlZEFycmF5VW5zYWZlICxcbiAgY21wVSAsXG4gIGNtcCAsXG4gIGVxVSAsXG4gIGVxICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0V2l0aERlZmF1bHQgLFxuICBnZXRFeG4gLFxuICBoYXMgLFxuICBmcm9tQXJyYXkgLFxuICB1cGRhdGVNdXRhdGUgLFxuICBiYWxNdXRhdGUgLFxuICByZW1vdmVNaW5BdXhXaXRoUm9vdE11dGF0ZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfaW50ZXJuYWxBVkx0cmVlIGZyb20gXCIuL2JlbHRfaW50ZXJuYWxBVkx0cmVlLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X2ludGVybmFsTWFwU3RyaW5nIGZyb20gXCIuL2JlbHRfaW50ZXJuYWxNYXBTdHJpbmcuanNcIjtcblxuZnVuY3Rpb24gc2V0KHQsIG5ld0ssIG5ld0QpIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5zaW5nbGV0b24obmV3SywgbmV3RCk7XG4gIH1cbiAgdmFyIGsgPSB0LmtleTtcbiAgaWYgKG5ld0sgPT09IGspIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUudXBkYXRlVmFsdWUodCwgbmV3RCk7XG4gIH1cbiAgdmFyIHYgPSB0LnZhbHVlO1xuICBpZiAobmV3SyA8IGspIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKHNldCh0LmxlZnQsIG5ld0ssIG5ld0QpLCBrLCB2LCB0LnJpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKHQubGVmdCwgaywgdiwgc2V0KHQucmlnaHQsIG5ld0ssIG5ld0QpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVVKHQsIHgsIGYpIHtcbiAgaWYgKHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBrID0gdC5rZXk7XG4gICAgaWYgKHggPT09IGspIHtcbiAgICAgIHZhciBkYXRhID0gZihDYW1sX29wdGlvbi5zb21lKHQudmFsdWUpKTtcbiAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLnVwZGF0ZVZhbHVlKHQsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZGF0YSkpO1xuICAgICAgfVxuICAgICAgdmFyIGwgPSB0LmxlZnQ7XG4gICAgICB2YXIgciA9IHQucmlnaHQ7XG4gICAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgICAgaWYgKHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH1cbiAgICAgIHZhciBrciA9IHtcbiAgICAgICAgY29udGVudHM6IHIua2V5XG4gICAgICB9O1xuICAgICAgdmFyIHZyID0ge1xuICAgICAgICBjb250ZW50czogci52YWx1ZVxuICAgICAgfTtcbiAgICAgIHZhciByJDEgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5yZW1vdmVNaW5BdXhXaXRoUmVmKHIsIGtyLCB2cik7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgICB9XG4gICAgdmFyIHYgPSB0LnZhbHVlO1xuICAgIHZhciBsJDEgPSB0LmxlZnQ7XG4gICAgdmFyIHIkMiA9IHQucmlnaHQ7XG4gICAgaWYgKHggPCBrKSB7XG4gICAgICB2YXIgbGwgPSB1cGRhdGVVKGwkMSwgeCwgZik7XG4gICAgICBpZiAobCQxID09PSBsbCkge1xuICAgICAgICByZXR1cm4gdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobGwsIGssIHYsIHIkMik7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciByciA9IHVwZGF0ZVUociQyLCB4LCBmKTtcbiAgICBpZiAociQyID09PSBycikge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobCQxLCBrLCB2LCBycik7XG4gICAgfVxuICB9XG4gIHZhciBkYXRhJDEgPSBmKHVuZGVmaW5lZCk7XG4gIGlmIChkYXRhJDEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5zaW5nbGV0b24oeCwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihkYXRhJDEpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGUodCwgeCwgZikge1xuICByZXR1cm4gdXBkYXRlVSh0LCB4LCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdXgobiwgeCkge1xuICB2YXIgdiA9IG4ua2V5O1xuICB2YXIgbCA9IG4ubGVmdDtcbiAgdmFyIHIgPSBuLnJpZ2h0O1xuICBpZiAoeCA9PT0gdikge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG4gICAgdmFyIGtyID0ge1xuICAgICAgY29udGVudHM6IHIua2V5XG4gICAgfTtcbiAgICB2YXIgdnIgPSB7XG4gICAgICBjb250ZW50czogci52YWx1ZVxuICAgIH07XG4gICAgdmFyIHIkMSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlbW92ZU1pbkF1eFdpdGhSZWYociwga3IsIHZyKTtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgfVxuICBpZiAoeCA8IHYpIHtcbiAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgdmFyIGxsID0gcmVtb3ZlQXV4KGwsIHgpO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIG47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobGwsIHYsIG4udmFsdWUsIHIpO1xuICAgIH1cbiAgfVxuICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgdmFyIHJyID0gcmVtb3ZlQXV4KHIsIHgpO1xuICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIHYsIG4udmFsdWUsIHJyKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG4sIHgpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByZW1vdmVBdXgobiwgeCk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hbnkodCwga2V5cykge1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGlmICh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX3QgPSB0O1xuICAgIHZhciBfaSA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIHZhciB0JDEgPSBfdDtcbiAgICAgIGlmIChpID49IGxlbikge1xuICAgICAgICByZXR1cm4gdCQxO1xuICAgICAgfVxuICAgICAgdmFyIGVsZSA9IGtleXNbaV07XG4gICAgICB2YXIgdSA9IHJlbW92ZUF1eCh0JDEsIGVsZSk7XG4gICAgICBpZiAodSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1O1xuICAgICAgfVxuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBfdCA9IHU7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWVyZ2VNYW55KGgsIGFycikge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIHYgPSBoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHZhciBtYXRjaCA9IGFycltpXTtcbiAgICB2ID0gc2V0KHYsIG1hdGNoWzBdLCBtYXRjaFsxXSk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbnZhciBlbXB0eTtcblxudmFyIGlzRW1wdHkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5pc0VtcHR5O1xuXG52YXIgaGFzID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5oYXM7XG5cbnZhciBjbXBVID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5jbXBVO1xuXG52YXIgY21wID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5jbXA7XG5cbnZhciBlcVUgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLmVxVTtcblxudmFyIGVxID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5lcTtcblxudmFyIGZpbmRGaXJzdEJ5VSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZpbmRGaXJzdEJ5VTtcblxudmFyIGZpbmRGaXJzdEJ5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZmluZEZpcnN0Qnk7XG5cbnZhciBmb3JFYWNoVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZvckVhY2hVO1xuXG52YXIgZm9yRWFjaCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZvckVhY2g7XG5cbnZhciByZWR1Y2VVID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUucmVkdWNlVTtcblxudmFyIHJlZHVjZSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlZHVjZTtcblxudmFyIGV2ZXJ5VSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmV2ZXJ5VTtcblxudmFyIGV2ZXJ5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZXZlcnk7XG5cbnZhciBzb21lVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnNvbWVVO1xuXG52YXIgc29tZSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnNvbWU7XG5cbnZhciBzaXplID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuc2l6ZTtcblxudmFyIHRvTGlzdCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnRvTGlzdDtcblxudmFyIHRvQXJyYXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS50b0FycmF5O1xuXG52YXIgZnJvbUFycmF5ID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5mcm9tQXJyYXk7XG5cbnZhciBrZXlzVG9BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmtleXNUb0FycmF5O1xuXG52YXIgdmFsdWVzVG9BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnZhbHVlc1RvQXJyYXk7XG5cbnZhciBtaW5LZXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5taW5LZXk7XG5cbnZhciBtaW5LZXlVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5taW5LZXlVbmRlZmluZWQ7XG5cbnZhciBtYXhLZXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhLZXk7XG5cbnZhciBtYXhLZXlVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhLZXlVbmRlZmluZWQ7XG5cbnZhciBtaW5pbXVtID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWluaW11bTtcblxudmFyIG1pblVuZGVmaW5lZCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1pblVuZGVmaW5lZDtcblxudmFyIG1heGltdW0gPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhpbXVtO1xuXG52YXIgbWF4VW5kZWZpbmVkID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWF4VW5kZWZpbmVkO1xuXG52YXIgZ2V0ID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5nZXQ7XG5cbnZhciBnZXRVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLmdldFVuZGVmaW5lZDtcblxudmFyIGdldFdpdGhEZWZhdWx0ID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5nZXRXaXRoRGVmYXVsdDtcblxudmFyIGdldEV4biA9IEJlbHRfaW50ZXJuYWxNYXBTdHJpbmcuZ2V0RXhuO1xuXG52YXIgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNoZWNrSW52YXJpYW50SW50ZXJuYWw7XG5cbnZhciBtZXJnZVUgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLm1lcmdlVTtcblxudmFyIG1lcmdlID0gQmVsdF9pbnRlcm5hbE1hcFN0cmluZy5tZXJnZTtcblxudmFyIGtlZXBVID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2VlcFNoYXJlZFU7XG5cbnZhciBrZWVwID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2VlcFNoYXJlZDtcblxudmFyIHBhcnRpdGlvblUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5wYXJ0aXRpb25TaGFyZWRVO1xuXG52YXIgcGFydGl0aW9uID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUucGFydGl0aW9uU2hhcmVkO1xuXG52YXIgc3BsaXQgPSBCZWx0X2ludGVybmFsTWFwU3RyaW5nLnNwbGl0O1xuXG52YXIgbWFwVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1hcFU7XG5cbnZhciBtYXAgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXA7XG5cbnZhciBtYXBXaXRoS2V5VSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1hcFdpdGhLZXlVO1xuXG52YXIgbWFwV2l0aEtleSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1hcFdpdGhLZXk7XG5cbmV4cG9ydCB7XG4gIGVtcHR5ICxcbiAgaXNFbXB0eSAsXG4gIGhhcyAsXG4gIGNtcFUgLFxuICBjbXAgLFxuICBlcVUgLFxuICBlcSAsXG4gIGZpbmRGaXJzdEJ5VSAsXG4gIGZpbmRGaXJzdEJ5ICxcbiAgZm9yRWFjaFUgLFxuICBmb3JFYWNoICxcbiAgcmVkdWNlVSAsXG4gIHJlZHVjZSAsXG4gIGV2ZXJ5VSAsXG4gIGV2ZXJ5ICxcbiAgc29tZVUgLFxuICBzb21lICxcbiAgc2l6ZSAsXG4gIHRvTGlzdCAsXG4gIHRvQXJyYXkgLFxuICBmcm9tQXJyYXkgLFxuICBrZXlzVG9BcnJheSAsXG4gIHZhbHVlc1RvQXJyYXkgLFxuICBtaW5LZXkgLFxuICBtaW5LZXlVbmRlZmluZWQgLFxuICBtYXhLZXkgLFxuICBtYXhLZXlVbmRlZmluZWQgLFxuICBtaW5pbXVtICxcbiAgbWluVW5kZWZpbmVkICxcbiAgbWF4aW11bSAsXG4gIG1heFVuZGVmaW5lZCAsXG4gIGdldCAsXG4gIGdldFVuZGVmaW5lZCAsXG4gIGdldFdpdGhEZWZhdWx0ICxcbiAgZ2V0RXhuICxcbiAgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbCAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICBzZXQgLFxuICB1cGRhdGVVICxcbiAgdXBkYXRlICxcbiAgbWVyZ2VVICxcbiAgbWVyZ2UgLFxuICBtZXJnZU1hbnkgLFxuICBrZWVwVSAsXG4gIGtlZXAgLFxuICBwYXJ0aXRpb25VICxcbiAgcGFydGl0aW9uICxcbiAgc3BsaXQgLFxuICBtYXBVICxcbiAgbWFwICxcbiAgbWFwV2l0aEtleVUgLFxuICBtYXBXaXRoS2V5ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCIuL2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX3ByaW1pdGl2ZSBmcm9tIFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcblxudmFyIGZvcl9pbiA9IChmdW5jdGlvbihvLGZvbyl7XG4gICAgICAgIGZvciAodmFyIHggaW4gbykgeyBmb28oeCkgfX0pO1xuXG5mdW5jdGlvbiBjYW1sX29ial9ibG9jayh0YWcsIHNpemUpIHtcbiAgdmFyIHYgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIHYudGFnID0gdGFnO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gY2FtbF9vYmpfZHVwKHgpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oKHt9KSwgeCk7XG4gIH1cbiAgdmFyIGxlbiA9IHgubGVuZ3RoIHwgMDtcbiAgdmFyIHYgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2W2ldID0geFtpXTtcbiAgfVxuICB2LnRhZyA9IHgudGFnIHwgMDtcbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIGNhbWxfb2JqX3RydW5jYXRlKHgsIG5ld19zaXplKSB7XG4gIHZhciBsZW4gPSB4Lmxlbmd0aCB8IDA7XG4gIGlmIChuZXdfc2l6ZSA8PSAwIHx8IG5ld19zaXplID4gbGVuKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJPYmoudHJ1bmNhdGVcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChsZW4gPT09IG5ld19zaXplKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBmb3IodmFyIGkgPSBuZXdfc2l6ZTsgaSA8IGxlbjsgKytpKXtcbiAgICB4W2ldID0gMDtcbiAgfVxuICB4Lmxlbmd0aCA9IG5ld19zaXplO1xuICBcbn1cblxuZnVuY3Rpb24gY2FtbF9sYXp5X21ha2VfZm9yd2FyZCh4KSB7XG4gIHJldHVybiBCbG9jay5fXygyNTAsIFt4XSk7XG59XG5cbmZ1bmN0aW9uIGNhbWxfbGF6eV9tYWtlKGZuKSB7XG4gIHZhciBibG9jayA9IFtmbl07XG4gIGJsb2NrLnRhZyA9IDI0NjtcbiAgcmV0dXJuIGJsb2NrO1xufVxuXG52YXIgY2FtbF91cGRhdGVfZHVtbXkgPSAoZnVuY3Rpb24oeCx5KXtcbiAgdmFyIGsgIFxuICBpZihBcnJheS5pc0FycmF5KHkpKXtcbiAgICBmb3IoayA9IDA7IGsgPCB5Lmxlbmd0aCA7ICsrayl7XG4gICAgICB4W2tdID0geVtrXVxuICAgIH1cbiAgICBpZih5LnRhZyAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIHgudGFnID0geS50YWdcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgayBpbiB5KXtcbiAgICAgIHhba10gPSB5W2tdXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gY2FtbF9jb21wYXJlKF9hLCBfYikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGIgPSBfYjtcbiAgICB2YXIgYSA9IF9hO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdmFyIGFfdHlwZSA9IHR5cGVvZiBhO1xuICAgIHZhciBiX3R5cGUgPSB0eXBlb2YgYjtcbiAgICBzd2l0Y2ggKGFfdHlwZSkge1xuICAgICAgY2FzZSBcImJvb2xlYW5cIiA6XG4gICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2Jvb2xfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZnVuY3Rpb25cIiA6XG4gICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgICAgXCJjb21wYXJlOiBmdW5jdGlvbmFsIHZhbHVlXCJcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJudW1iZXJcIiA6XG4gICAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X2NvbXBhcmUoYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInN0cmluZ1wiIDpcbiAgICAgICAgICBpZiAoYl90eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gQ2FtbF9wcmltaXRpdmUuY2FtbF9zdHJpbmdfY29tcGFyZShhLCBiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiIDpcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBcbiAgICB9XG4gICAgc3dpdGNoIChiX3R5cGUpIHtcbiAgICAgIGNhc2UgXCJzdHJpbmdcIiA6XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgY2FzZSBcInVuZGVmaW5lZFwiIDpcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChhX3R5cGUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJfdHlwZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhX3R5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBpZiAoYiA9PT0gbnVsbCB8fCBiLnRhZyA9PT0gMjU2KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYl90eXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgaWYgKGEgPT09IG51bGwgfHwgYS50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoYi50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgPT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoYS50YWcgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRhZ19hID0gYS50YWcgfCAwO1xuICAgICAgICB2YXIgdGFnX2IgPSBiLnRhZyB8IDA7XG4gICAgICAgIGlmICh0YWdfYSA9PT0gMjUwKSB7XG4gICAgICAgICAgX2EgPSBhWzBdO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnX2IgPT09IDI1MCkge1xuICAgICAgICAgIF9iID0gYlswXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZ19hID09PSAyNTYpIHtcbiAgICAgICAgICBpZiAodGFnX2IgPT09IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X2NvbXBhcmUoYVsxXSwgYlsxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZ19hID09PSAyNDgpIHtcbiAgICAgICAgICByZXR1cm4gQ2FtbF9wcmltaXRpdmUuY2FtbF9pbnRfY29tcGFyZShhWzFdLCBiWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnX2EgPT09IDI1MSkge1xuICAgICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgICAgIFwiZXF1YWw6IGFic3RyYWN0IHZhbHVlXCJcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnX2EgIT09IHRhZ19iKSB7XG4gICAgICAgICAgaWYgKHRhZ19hIDwgdGFnX2IpIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5fYSA9IGEubGVuZ3RoIHwgMDtcbiAgICAgICAgdmFyIGxlbl9iID0gYi5sZW5ndGggfCAwO1xuICAgICAgICBpZiAobGVuX2EgPT09IGxlbl9iKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYSkpIHtcbiAgICAgICAgICAgIHZhciBfaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gX2k7XG4gICAgICAgICAgICAgIGlmIChpID09PSBsZW5fYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciByZXMgPSBjYW1sX2NvbXBhcmUoYVtpXSwgYltpXSk7XG4gICAgICAgICAgICAgIGlmIChyZXMgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSBpZiAoKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChhIC0gYik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBtaW5fa2V5X2xocyA9IHtcbiAgICAgICAgICAgICAgY29udGVudHM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBtaW5fa2V5X3JocyA9IHtcbiAgICAgICAgICAgICAgY29udGVudHM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBkb19rZXkgPSBmdW5jdGlvbiAocGFyYW0sIGtleSkge1xuICAgICAgICAgICAgICB2YXIgbWluX2tleSA9IHBhcmFtWzJdO1xuICAgICAgICAgICAgICB2YXIgYiA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICBpZiAoISghYi5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IGNhbWxfY29tcGFyZShwYXJhbVswXVtrZXldLCBiW2tleV0pID4gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBtayA9IG1pbl9rZXkuY29udGVudHM7XG4gICAgICAgICAgICAgIGlmIChtayAhPT0gdW5kZWZpbmVkICYmIGtleSA+PSBtaykge1xuICAgICAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluX2tleS5jb250ZW50cyA9IGtleTtcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgIG1pbl9rZXlfcmhzXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdmFyIGRvX2tleV9hID0gKGZ1bmN0aW9uKHBhcnRpYWxfYXJnKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYShwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gZG9fa2V5KHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB9KHBhcnRpYWxfYXJnKSk7XG4gICAgICAgICAgICB2YXIgcGFydGlhbF9hcmckMSA9IC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBtaW5fa2V5X2xoc1xuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHZhciBkb19rZXlfYiA9IChmdW5jdGlvbihwYXJ0aWFsX2FyZyQxKXtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihwYXJhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gZG9fa2V5KHBhcnRpYWxfYXJnJDEsIHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0ocGFydGlhbF9hcmckMSkpO1xuICAgICAgICAgICAgZm9yX2luKGEsIGRvX2tleV9hKTtcbiAgICAgICAgICAgIGZvcl9pbihiLCBkb19rZXlfYik7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSBtaW5fa2V5X2xocy5jb250ZW50cztcbiAgICAgICAgICAgIHZhciBtYXRjaCQxID0gbWluX2tleV9yaHMuY29udGVudHM7XG4gICAgICAgICAgICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBpZiAobWF0Y2gkMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIENhbWxfcHJpbWl0aXZlLmNhbWxfc3RyaW5nX2NvbXBhcmUobWF0Y2gsIG1hdGNoJDEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobGVuX2EgPCBsZW5fYikge1xuICAgICAgICAgIHZhciBfaSQxID0gMDtcbiAgICAgICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgICAgICB2YXIgaSQxID0gX2kkMTtcbiAgICAgICAgICAgIGlmIChpJDEgPT09IGxlbl9hKSB7XG4gICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXMkMSA9IGNhbWxfY29tcGFyZShhW2kkMV0sIGJbaSQxXSk7XG4gICAgICAgICAgICBpZiAocmVzJDEgIT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlcyQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX2kkMSA9IGkkMSArIDEgfCAwO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIF9pJDIgPSAwO1xuICAgICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICAgIHZhciBpJDIgPSBfaSQyO1xuICAgICAgICAgICAgaWYgKGkkMiA9PT0gbGVuX2IpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzJDIgPSBjYW1sX2NvbXBhcmUoYVtpJDJdLCBiW2kkMl0pO1xuICAgICAgICAgICAgaWYgKHJlcyQyICE9PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXMkMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9pJDIgPSBpJDIgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYW1sX2VxdWFsKF9hLCBfYikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGIgPSBfYjtcbiAgICB2YXIgYSA9IF9hO1xuICAgIGlmIChhID09PSBiKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdmFyIGFfdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmIChhX3R5cGUgPT09IFwic3RyaW5nXCIgfHwgYV90eXBlID09PSBcIm51bWJlclwiIHx8IGFfdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgYV90eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IGEgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGJfdHlwZSA9IHR5cGVvZiBiO1xuICAgIGlmIChhX3R5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBiX3R5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiZXF1YWw6IGZ1bmN0aW9uYWwgdmFsdWVcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmIChiX3R5cGUgPT09IFwibnVtYmVyXCIgfHwgYl90eXBlID09PSBcInVuZGVmaW5lZFwiIHx8IGIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRhZ19hID0gYS50YWcgfCAwO1xuICAgIHZhciB0YWdfYiA9IGIudGFnIHwgMDtcbiAgICBpZiAodGFnX2EgPT09IDI1MCkge1xuICAgICAgX2EgPSBhWzBdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBpZiAodGFnX2IgPT09IDI1MCkge1xuICAgICAgX2IgPSBiWzBdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBpZiAodGFnX2EgPT09IDI0OCkge1xuICAgICAgcmV0dXJuIGFbMV0gPT09IGJbMV07XG4gICAgfVxuICAgIGlmICh0YWdfYSA9PT0gMjUxKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJlcXVhbDogYWJzdHJhY3QgdmFsdWVcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmICh0YWdfYSAhPT0gdGFnX2IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRhZ19hID09PSAyNTYpIHtcbiAgICAgIHJldHVybiBhWzFdID09PSBiWzFdO1xuICAgIH1cbiAgICB2YXIgbGVuX2EgPSBhLmxlbmd0aCB8IDA7XG4gICAgdmFyIGxlbl9iID0gYi5sZW5ndGggfCAwO1xuICAgIGlmIChsZW5fYSA9PT0gbGVuX2IpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICAgIHZhciBfaSA9IDA7XG4gICAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgICB2YXIgaSA9IF9pO1xuICAgICAgICAgIGlmIChpID09PSBsZW5fYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghY2FtbF9lcXVhbChhW2ldLCBiW2ldKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuICEoYSA+IGIgfHwgYSA8IGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICBjb250ZW50czogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZG9fa2V5X2EgPSAoZnVuY3Rpb24oYixyZXN1bHQpe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZG9fa2V5X2Eoa2V5KSB7XG4gICAgICAgICAgaWYgKCFiLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb250ZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgfShiLHJlc3VsdCkpO1xuICAgICAgICB2YXIgZG9fa2V5X2IgPSAoZnVuY3Rpb24oYSxiLHJlc3VsdCl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkb19rZXlfYihrZXkpIHtcbiAgICAgICAgICBpZiAoIWEuaGFzT3duUHJvcGVydHkoa2V5KSB8fCAhY2FtbF9lcXVhbChiW2tleV0sIGFba2V5XSkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5jb250ZW50cyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgfShhLGIscmVzdWx0KSk7XG4gICAgICAgIGZvcl9pbihhLCBkb19rZXlfYSk7XG4gICAgICAgIGlmIChyZXN1bHQuY29udGVudHMpIHtcbiAgICAgICAgICBmb3JfaW4oYiwgZG9fa2V5X2IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuY29udGVudHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNhbWxfZXF1YWxfbnVsbCh4LCB5KSB7XG4gIGlmICh5ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNhbWxfZXF1YWwoeCwgeSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggPT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbF91bmRlZmluZWQoeCwgeSkge1xuICBpZiAoeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGNhbWxfZXF1YWwoeCwgeSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggPT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9lcXVhbF9udWxsYWJsZSh4LCB5KSB7XG4gIGlmICh5ID09IG51bGwpIHtcbiAgICByZXR1cm4geCA9PT0geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2FtbF9lcXVhbCh4LCB5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYW1sX25vdGVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuICFjYW1sX2VxdWFsKGEsIGIpO1xufVxuXG5mdW5jdGlvbiBjYW1sX2dyZWF0ZXJlcXVhbChhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPj0gMDtcbn1cblxuZnVuY3Rpb24gY2FtbF9ncmVhdGVydGhhbihhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPiAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX2xlc3NlcXVhbChhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPD0gMDtcbn1cblxuZnVuY3Rpb24gY2FtbF9sZXNzdGhhbihhLCBiKSB7XG4gIHJldHVybiBjYW1sX2NvbXBhcmUoYSwgYikgPCAwO1xufVxuXG5mdW5jdGlvbiBjYW1sX21pbih4LCB5KSB7XG4gIGlmIChjYW1sX2NvbXBhcmUoeCwgeSkgPD0gMCkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbWxfbWF4KHgsIHkpIHtcbiAgaWYgKGNhbWxfY29tcGFyZSh4LCB5KSA+PSAwKSB7XG4gICAgcmV0dXJuIHg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FtbF9vYmpfc2V0X3RhZyhwcmltLCBwcmltJDEpIHtcbiAgcHJpbS50YWcgPSBwcmltJDE7XG4gIFxufVxuXG5leHBvcnQge1xuICBjYW1sX29ial9ibG9jayAsXG4gIGNhbWxfb2JqX2R1cCAsXG4gIGNhbWxfb2JqX3RydW5jYXRlICxcbiAgY2FtbF9sYXp5X21ha2VfZm9yd2FyZCAsXG4gIGNhbWxfbGF6eV9tYWtlICxcbiAgY2FtbF91cGRhdGVfZHVtbXkgLFxuICBjYW1sX2NvbXBhcmUgLFxuICBjYW1sX2VxdWFsICxcbiAgY2FtbF9lcXVhbF9udWxsICxcbiAgY2FtbF9lcXVhbF91bmRlZmluZWQgLFxuICBjYW1sX2VxdWFsX251bGxhYmxlICxcbiAgY2FtbF9ub3RlcXVhbCAsXG4gIGNhbWxfZ3JlYXRlcmVxdWFsICxcbiAgY2FtbF9ncmVhdGVydGhhbiAsXG4gIGNhbWxfbGVzc3RoYW4gLFxuICBjYW1sX2xlc3NlcXVhbCAsXG4gIGNhbWxfbWluICxcbiAgY2FtbF9tYXggLFxuICBjYW1sX29ial9zZXRfdGFnICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuXG5mdW5jdGlvbiBpbnZlcnQob3JkZXJpbmcpIHtcbiAgaWYgKG9yZGVyaW5nICE9PSAxNTkwMzk0OTQpIHtcbiAgICBpZiAob3JkZXJpbmcgPj0gOTM5MjE0MTUxKSB7XG4gICAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludF90b19vcmRlcmluZyh4KSB7XG4gIGlmICh4IDwgMCkge1xuICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gIH0gZWxzZSBpZiAoeCA9PT0gMCkge1xuICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnNhZmVfY29tcGFyZShhLCBiKSB7XG4gIGlmIChDYW1sX29iai5jYW1sX2xlc3N0aGFuKGEsIGIpKSB7XG4gICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfSBlbHNlIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEsIGIpKSB7XG4gICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICB9XG59XG5cbmZ1bmN0aW9uIE9yZGVyaW5nKE8pIHtcbiAgdmFyIGxlc3NfdGhhbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgPT09IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJfdGhhbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgPT09IC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfTtcbiAgdmFyIGxlc3NfdGhhbl9vcl9lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgIT09IC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJfdGhhbl9vcl9lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgYSwgYikgIT09IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBsZXNzX3RoYW46IGxlc3NfdGhhbixcbiAgICAgICAgICBncmVhdGVyX3RoYW46IGdyZWF0ZXJfdGhhbixcbiAgICAgICAgICBsZXNzX3RoYW5fb3JfZXF1YWw6IGxlc3NfdGhhbl9vcl9lcXVhbCxcbiAgICAgICAgICBncmVhdGVyX3RoYW5fb3JfZXF1YWw6IGdyZWF0ZXJfdGhhbl9vcl9lcXVhbFxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBpbnZlcnQgLFxuICBpbnRfdG9fb3JkZXJpbmcgLFxuICB1bnNhZmVfY29tcGFyZSAsXG4gIE9yZGVyaW5nICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBJbnRlcmZhY2UkQnNCYXN0ZXQgZnJvbSBcIi4vSW50ZXJmYWNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1hZ21hKE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRjb2xvbiRncmVhdDogTS5hcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTWFnbWFfQW55KE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRjb2xvbiRncmVhdDogTS5hcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRnVuY3RvcihGKSB7XG4gIHZhciAkbGVzcyRoYXNoJGdyZWF0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIHgsIGYpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgICRsZXNzJCRncmVhdDogRi5tYXAsXG4gICAgICAgICAgJGxlc3MkaGFzaCRncmVhdDogJGxlc3MkaGFzaCRncmVhdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBcHBseShBKSB7XG4gIHZhciAkbGVzcyRoYXNoJGdyZWF0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXAsIHgsIGYpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgICRsZXNzJCRncmVhdDogQS5tYXAsXG4gICAgICAgICAgJGxlc3MkaGFzaCRncmVhdDogJGxlc3MkaGFzaCRncmVhdCxcbiAgICAgICAgICAkbGVzcyRzdGFyJGdyZWF0OiBBLmFwcGx5XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkKE0pIHtcbiAgdmFyICRsZXNzJGhhc2gkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMihNLm1hcCwgeCwgZik7XG4gIH07XG4gIHZhciAkZ3JlYXQkZ3JlYXQkZXEgPSBNLmZsYXRfbWFwO1xuICB2YXIgJGVxJGxlc3MkbGVzcyA9IGZ1bmN0aW9uIChtYSwgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihNLmZsYXRfbWFwLCBmLCBtYSk7XG4gIH07XG4gIHZhciAkZ3JlYXQkZXEkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgZywgYSkge1xuICAgIHJldHVybiBDdXJyeS5fMigkZ3JlYXQkZ3JlYXQkZXEsIEN1cnJ5Ll8xKGYsIGEpLCBnKTtcbiAgfTtcbiAgdmFyICRsZXNzJGVxJGxlc3MgPSBmdW5jdGlvbiAoZiwgZywgYSkge1xuICAgIHZhciBmJDEgPSBDdXJyeS5fMShnLCBhKTtcbiAgICByZXR1cm4gQ3VycnkuXzIoTS5mbGF0X21hcCwgZiQxLCBmKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyQkZ3JlYXQ6IE0ubWFwLFxuICAgICAgICAgICRsZXNzJGhhc2gkZ3JlYXQ6ICRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgICAgICAgJGxlc3Mkc3RhciRncmVhdDogTS5hcHBseSxcbiAgICAgICAgICAkZ3JlYXQkZ3JlYXQkZXE6ICRncmVhdCRncmVhdCRlcSxcbiAgICAgICAgICAkZXEkbGVzcyRsZXNzOiAkZXEkbGVzcyRsZXNzLFxuICAgICAgICAgICRncmVhdCRlcSRncmVhdDogJGdyZWF0JGVxJGdyZWF0LFxuICAgICAgICAgICRsZXNzJGVxJGxlc3M6ICRsZXNzJGVxJGxlc3NcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQWx0KEEpIHtcbiAgdmFyICRsZXNzJGhhc2gkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgeCwgZik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkJGdyZWF0OiBBLm1hcCxcbiAgICAgICAgICAkbGVzcyRoYXNoJGdyZWF0OiAkbGVzcyRoYXNoJGdyZWF0LFxuICAgICAgICAgICRsZXNzJHBpcGUkZ3JlYXQ6IEEuYWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFsdGVybmF0aXZlKEEpIHtcbiAgdmFyICRsZXNzJGhhc2gkZ3JlYXQgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgeCwgZik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkcGlwZSRncmVhdDogQS5hbHQsXG4gICAgICAgICAgJGxlc3MkJGdyZWF0OiBBLm1hcCxcbiAgICAgICAgICAkbGVzcyRoYXNoJGdyZWF0OiAkbGVzcyRoYXNoJGdyZWF0LFxuICAgICAgICAgICRsZXNzJHN0YXIkZ3JlYXQ6IEEuYXBwbHlcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaWdyb3Vwb2lkKFMpIHtcbiAgdmFyICRncmVhdCRkb3QgPSBmdW5jdGlvbiAoZywgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihTLmNvbXBvc2UsIGYsIGcpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgICRsZXNzJGRvdDogUy5jb21wb3NlLFxuICAgICAgICAgICRncmVhdCRkb3Q6ICRncmVhdCRkb3RcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRXEoRSkge1xuICByZXR1cm4ge1xuICAgICAgICAgICRlcSRwaXBlJGVxOiBFLmVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE9yZChPKSB7XG4gIHZhciBGbiA9IEludGVyZmFjZSRCc0Jhc3RldC5PcmRlcmluZyhPKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRwaXBlJHBpcGU6IEZuLmxlc3NfdGhhbixcbiAgICAgICAgICAkcGlwZSRwaXBlJGdyZWF0OiBGbi5ncmVhdGVyX3RoYW4sXG4gICAgICAgICAgJGxlc3MkcGlwZSRlcTogRm4ubGVzc190aGFuX29yX2VxdWFsLFxuICAgICAgICAgICRncmVhdCRwaXBlJGVxOiBGbi5ncmVhdGVyX3RoYW5fb3JfZXF1YWxcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaXJpbmcoUykge1xuICByZXR1cm4ge1xuICAgICAgICAgICRwaXBlJHBsdXMkcGlwZTogUy5hZGQsXG4gICAgICAgICAgJHBpcGUkc3RhciRwaXBlOiBTLm11bHRpcGx5XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFJpbmcoUikge1xuICByZXR1cm4ge1xuICAgICAgICAgICRwaXBlJHBsdXMkcGlwZTogUi5hZGQsXG4gICAgICAgICAgJHBpcGUkc3RhciRwaXBlOiBSLm11bHRpcGx5LFxuICAgICAgICAgICRwaXBlJG5lZyRwaXBlOiBSLnN1YnRyYWN0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEV1Y2xpZGVhbl9SaW5nKEUpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkcGlwZSRwbHVzJHBpcGU6IEUuYWRkLFxuICAgICAgICAgICRwaXBlJHN0YXIkcGlwZTogRS5tdWx0aXBseSxcbiAgICAgICAgICAkcGlwZSRuZWckcGlwZTogRS5zdWJ0cmFjdCxcbiAgICAgICAgICAkcGlwZSRzbGFzaCRwaXBlOiBFLmRpdmlkZSxcbiAgICAgICAgICAkcGlwZSRwZXJjZW50JHBpcGU6IEUubW9kdWxvXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEV4dGVuZChFKSB7XG4gIHZhciAkZXEkZ3JlYXQkZ3JlYXQgPSBmdW5jdGlvbiAoYSwgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihFLmV4dGVuZCwgZiwgYSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkbGVzcyRlcTogRS5leHRlbmQsXG4gICAgICAgICAgJGVxJGdyZWF0JGdyZWF0OiAkZXEkZ3JlYXQkZ3JlYXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQmlmdW5jdG9yKEIpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogQi5iaW1hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCaWFwcGx5KEIpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRsZXNzJCRncmVhdCRncmVhdDogQi5iaW1hcCxcbiAgICAgICAgICAkbGVzcyRsZXNzJHN0YXIkZ3JlYXQkZ3JlYXQ6IEIuYmlhcHBseVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBKb2luX1NlbWlsYXR0aWNlKEopIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRwaXBlJHBpcGUkZ3JlYXQ6IEouam9pblxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNZWV0X1NlbWlsYXR0aWNlKE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbGVzcyRhbXAkYW1wJGdyZWF0OiBNLm1lZXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gSGV5dGluZ19BbGdlYnJhKEgpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbmVnJG5lZyRncmVhdDogSC5pbXBsaWVzXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIE1hZ21hICxcbiAgTWFnbWFfQW55ICxcbiAgRnVuY3RvciAsXG4gIEFwcGx5ICxcbiAgTW9uYWQgLFxuICBBbHQgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIFNlbWlncm91cG9pZCAsXG4gIEVxICxcbiAgT3JkICxcbiAgU2VtaXJpbmcgLFxuICBSaW5nICxcbiAgRXVjbGlkZWFuX1JpbmcgLFxuICBFeHRlbmQgLFxuICBCaWZ1bmN0b3IgLFxuICBCaWFwcGx5ICxcbiAgSm9pbl9TZW1pbGF0dGljZSAsXG4gIE1lZXRfU2VtaWxhdHRpY2UgLFxuICBIZXl0aW5nX0FsZ2VicmEgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGZsaXAoZiwgYiwgYSkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgYSwgYik7XG59XG5cbmZ1bmN0aW9uICQkY29uc3QoYSwgcGFyYW0pIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIEZ1bmN0b3IoVCkge1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ3VycnkuXzEoZywgeCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFwcGx5KFQpIHtcbiAgdmFyIG1hcCA9IGZ1bmN0aW9uIChmLCBnLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIEN1cnJ5Ll8xKGcsIHgpKTtcbiAgfTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZiwgeCwgQ3VycnkuXzEoZywgeCkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGFwcGx5OiBhcHBseVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21wb3NlKGYsIGcsIHgpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIEN1cnJ5Ll8xKGcsIHgpKTtcbn1cblxudmFyIFNlbWlncm91cG9pZCA9IHtcbiAgY29tcG9zZTogY29tcG9zZVxufTtcblxuZnVuY3Rpb24gaWQoYSkge1xuICByZXR1cm4gYTtcbn1cblxudmFyIENhdGVnb3J5ID0ge1xuICBjb21wb3NlOiBjb21wb3NlLFxuICBpZDogaWRcbn07XG5cbmZ1bmN0aW9uIEludmFyaWFudChUKSB7XG4gIHZhciBpbWFwID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIEN1cnJ5Ll8xKHBhcmFtLCBwYXJhbSQxKSk7XG4gICAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBpbWFwOiBpbWFwXG4gICAgICAgIH07XG59XG5cbnZhciBJID0gSW5maXgkQnNCYXN0ZXQuU2VtaWdyb3Vwb2lkKFNlbWlncm91cG9pZCk7XG5cbnZhciAkZ3JlYXQkZG90ID0gSS4kZ3JlYXQkZG90O1xuXG5mdW5jdGlvbiBkaW1hcChhX3RvX2IsIGNfdG9fZCwgYl90b19jKSB7XG4gIHJldHVybiBDdXJyeS5fMigkZ3JlYXQkZG90LCBDdXJyeS5fMigkZ3JlYXQkZG90LCBhX3RvX2IsIGJfdG9fYyksIGNfdG9fZCk7XG59XG5cbnZhciBQcm9mdW5jdG9yID0ge1xuICBkaW1hcDogZGltYXBcbn07XG5cbmZ1bmN0aW9uIENvbnRyYXZhcmlhbnQoVCkge1xuICB2YXIgY21hcCA9IGZ1bmN0aW9uIChmLCBnLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGcsIEN1cnJ5Ll8xKGYsIHgpKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbWFwOiBjbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEJpY29udHJhdmFyaWFudChUKSB7XG4gIHZhciBiaWNtYXAgPSBmdW5jdGlvbiAoZiwgZywgaCwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihoLCBDdXJyeS5fMShmLCBhKSwgQ3VycnkuXzEoZywgYikpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGJpY21hcDogYmljbWFwXG4gICAgICAgIH07XG59XG5cbnZhciBpbmNsdWRlID0gSW5maXgkQnNCYXN0ZXQuU2VtaWdyb3Vwb2lkKFNlbWlncm91cG9pZCk7XG5cbnZhciBJbmZpeCA9IGluY2x1ZGU7XG5cbmV4cG9ydCB7XG4gIGZsaXAgLFxuICAkJGNvbnN0ICxcbiAgRnVuY3RvciAsXG4gIEFwcGx5ICxcbiAgU2VtaWdyb3Vwb2lkICxcbiAgQ2F0ZWdvcnkgLFxuICBJbnZhcmlhbnQgLFxuICBQcm9mdW5jdG9yICxcbiAgQ29udHJhdmFyaWFudCAsXG4gIEJpY29udHJhdmFyaWFudCAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBJIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbiRCc0Jhc3RldCBmcm9tIFwiLi9GdW5jdGlvbi5icy5qc1wiO1xuXG52YXIgaWQgPSBGdW5jdGlvbiRCc0Jhc3RldC5DYXRlZ29yeS5pZDtcblxudmFyICRsZXNzJGRvdCA9IEZ1bmN0aW9uJEJzQmFzdGV0LkluZml4LiRsZXNzJGRvdDtcblxuZnVuY3Rpb24gYXBwZW5kKGYsIGcpIHtcbiAgcmV0dXJuIC8qIEVuZG8gKi9bQ3VycnkuXzIoJGxlc3MkZG90LCBmWzBdLCBnWzBdKV07XG59XG5cbnZhciBNYWdtYSA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBTZW1pZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgZW1wdHkgPSAvKiBFbmRvICovW2lkXTtcblxudmFyIE1vbm9pZCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiBlbXB0eVxufTtcblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYV9BbnkoTWFnbWEpO1xuXG52YXIgSW5maXggPSBpbmNsdWRlO1xuXG5leHBvcnQge1xuICBpZCAsXG4gICRsZXNzJGRvdCAsXG4gIE1hZ21hICxcbiAgU2VtaWdyb3VwICxcbiAgTW9ub2lkICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRW5kbyRCc0Jhc3RldCBmcm9tIFwiLi9FbmRvLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb24kQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb24uYnMuanNcIjtcblxudmFyIGlkID0gRnVuY3Rpb24kQnNCYXN0ZXQuQ2F0ZWdvcnkuaWQ7XG5cbnZhciAkbGVzcyRkb3QgPSBGdW5jdGlvbiRCc0Jhc3RldC5JbmZpeC4kbGVzcyRkb3Q7XG5cbmZ1bmN0aW9uIE1vbm9pZChNKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuTWFnbWEoTSk7XG4gIHZhciBwb3dlciA9IGZ1bmN0aW9uICh4LCBwKSB7XG4gICAgdmFyIGdvID0gZnVuY3Rpb24gKHApIHtcbiAgICAgIGlmIChwIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAocCA9PT0gMSkge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICAgIGlmIChwICUgMiA9PT0gMCkge1xuICAgICAgICB2YXIgeCRwcmltZSA9IGdvKHAgLyAyIHwgMCk7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJGNvbG9uJGdyZWF0LCB4JHByaW1lLCB4JHByaW1lKTtcbiAgICAgIH1cbiAgICAgIHZhciB4JHByaW1lJDEgPSBnbyhwIC8gMiB8IDApO1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3MkY29sb24kZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkY29sb24kZ3JlYXQsIHgkcHJpbWUkMSwgeCRwcmltZSQxKSwgeCk7XG4gICAgfTtcbiAgICByZXR1cm4gZ28ocCk7XG4gIH07XG4gIHZhciBndWFyZCA9IGZ1bmN0aW9uIChwLCBhKSB7XG4gICAgaWYgKHApIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTS5lbXB0eTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgSTogSSxcbiAgICAgICAgICBwb3dlcjogcG93ZXIsXG4gICAgICAgICAgZ3VhcmQ6IGd1YXJkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZ1bmN0b3IoRikge1xuICB2YXIgJCR2b2lkID0gZnVuY3Rpb24gKGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEYubWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCh1bmRlZmluZWQsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICB9O1xuICB2YXIgdm9pZF9yaWdodCA9IGZ1bmN0aW9uIChhLCBmYikge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QoYSwgcGFyYW0pO1xuICAgICAgICAgICAgICAgIH0pLCBmYik7XG4gIH07XG4gIHZhciB2b2lkX2xlZnQgPSBmdW5jdGlvbiAoZmEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGIsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICB9O1xuICB2YXIgZmxhcCA9IGZ1bmN0aW9uIChmcywgYSkge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgICAgfSksIGZzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkJHZvaWQ6ICQkdm9pZCxcbiAgICAgICAgICB2b2lkX3JpZ2h0OiB2b2lkX3JpZ2h0LFxuICAgICAgICAgIHZvaWRfbGVmdDogdm9pZF9sZWZ0LFxuICAgICAgICAgIGZsYXA6IGZsYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbHkoQSkge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0LkFwcGx5KEEpO1xuICB2YXIgYXBwbHlfZmlyc3QgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0LCBhKSwgYik7XG4gIH07XG4gIHZhciBhcHBseV9zZWNvbmQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QoaWQsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGFwcGx5X2JvdGggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCAoZnVuY3Rpb24gKGEkcHJpbWUsIGIkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhJHByaW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiRwcmltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gIH07XG4gIHZhciBsaWZ0MiA9IGZ1bmN0aW9uIChmLCBhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGxpZnQzID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpO1xuICB9O1xuICB2YXIgbGlmdDQgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKSwgZCk7XG4gIH07XG4gIHZhciBsaWZ0NSA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyksIGQpLCBlKTtcbiAgfTtcbiAgdmFyIEluZml4ID0ge1xuICAgICRsZXNzJHN0YXI6IGFwcGx5X2ZpcnN0LFxuICAgICRzdGFyJGdyZWF0OiBhcHBseV9zZWNvbmRcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBJOiBJLFxuICAgICAgICAgIGFwcGx5X2ZpcnN0OiBhcHBseV9maXJzdCxcbiAgICAgICAgICBhcHBseV9zZWNvbmQ6IGFwcGx5X3NlY29uZCxcbiAgICAgICAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoLFxuICAgICAgICAgIGxpZnQyOiBsaWZ0MixcbiAgICAgICAgICBsaWZ0MzogbGlmdDMsXG4gICAgICAgICAgbGlmdDQ6IGxpZnQ0LFxuICAgICAgICAgIGxpZnQ1OiBsaWZ0NSxcbiAgICAgICAgICBJbmZpeDogSW5maXhcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbHkkcHJpbWUoQSwgVCkge1xuICB2YXIgRiA9IEZ1bmN0aW9uJEJzQmFzdGV0LkFwcGx5KHsgfSk7XG4gIHZhciBGJHByaW1lID0gRnVuY3Rpb24kQnNCYXN0ZXQuQXBwbHkoeyB9KTtcbiAgdmFyIEkgPSBJbmZpeCRCc0Jhc3RldC5BcHBseShGKTtcbiAgdmFyIGFwcGx5X2ZpcnN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCwgYSksIGIpO1xuICB9O1xuICB2YXIgYXBwbHlfc2Vjb25kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGlkLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gIH07XG4gIHZhciBhcHBseV9ib3RoID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChhJHByaW1lLCBiJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSRwcmltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYSksIGIpO1xuICB9O1xuICB2YXIgbGlmdDIgPSBmdW5jdGlvbiAoZiwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYik7XG4gIH07XG4gIHZhciBsaWZ0MyA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKTtcbiAgfTtcbiAgdmFyIGxpZnQ0ID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyksIGQpO1xuICB9O1xuICB2YXIgbGlmdDUgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKSwgZSk7XG4gIH07XG4gIHZhciBJbmZpeCA9IHtcbiAgICAkbGVzcyRzdGFyOiBhcHBseV9maXJzdCxcbiAgICAkc3RhciRncmVhdDogYXBwbHlfc2Vjb25kXG4gIH07XG4gIHZhciBBcHBseV9GID0ge1xuICAgIEk6IEksXG4gICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0LFxuICAgIGFwcGx5X3NlY29uZDogYXBwbHlfc2Vjb25kLFxuICAgIGFwcGx5X2JvdGg6IGFwcGx5X2JvdGgsXG4gICAgbGlmdDI6IGxpZnQyLFxuICAgIGxpZnQzOiBsaWZ0MyxcbiAgICBsaWZ0NDogbGlmdDQsXG4gICAgbGlmdDU6IGxpZnQ1LFxuICAgIEluZml4OiBJbmZpeFxuICB9O1xuICB2YXIgSSQxID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gIHZhciBhcHBseV9maXJzdCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyQkZ3JlYXQsIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QsIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGFwcGx5X3NlY29uZCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChpZCwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYSksIGIpO1xuICB9O1xuICB2YXIgYXBwbHlfYm90aCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAoYSRwcmltZSwgYiRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiJHByaW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBiKTtcbiAgfTtcbiAgdmFyIGxpZnQyJDEgPSBmdW5jdGlvbiAoZiwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpO1xuICB9O1xuICB2YXIgbGlmdDMkMSA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKTtcbiAgfTtcbiAgdmFyIGxpZnQ0JDEgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCkge1xuICAgIHJldHVybiBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJJDEuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKTtcbiAgfTtcbiAgdmFyIGxpZnQ1JDEgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJJDEuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSSQxLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKSwgZCksIGUpO1xuICB9O1xuICB2YXIgSW5maXgkMSA9IHtcbiAgICAkbGVzcyRzdGFyOiBhcHBseV9maXJzdCQxLFxuICAgICRzdGFyJGdyZWF0OiBhcHBseV9zZWNvbmQkMVxuICB9O1xuICB2YXIgQXBwbHlfQSA9IHtcbiAgICBJOiBJJDEsXG4gICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0JDEsXG4gICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQkMSxcbiAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoJDEsXG4gICAgbGlmdDI6IGxpZnQyJDEsXG4gICAgbGlmdDM6IGxpZnQzJDEsXG4gICAgbGlmdDQ6IGxpZnQ0JDEsXG4gICAgbGlmdDU6IGxpZnQ1JDEsXG4gICAgSW5maXg6IEluZml4JDFcbiAgfTtcbiAgdmFyIGFwcGx5X2NvbnN0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRiRwcmltZS5hcHBseSwgYXBwbHlfZmlyc3QkMSwgZiwgeCk7XG4gIH07XG4gIHZhciBhcHBseV9maXJzdCQyID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEobGlmdDIoYXBwbHlfZmlyc3QkMSwgZiwgZyksIHgpO1xuICB9O1xuICB2YXIgYXBwbHlfc2Vjb25kJDIgPSBmdW5jdGlvbiAoZiwgZywgeCkge1xuICAgIHJldHVybiBDdXJyeS5fMShsaWZ0MihhcHBseV9zZWNvbmQkMSwgZiwgZyksIHgpO1xuICB9O1xuICB2YXIgYXBwbHlfYm90aCQyID0gZnVuY3Rpb24gKGYsIGcsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEobGlmdDIoYXBwbHlfYm90aCQxLCBmLCBnKSwgeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRjogRixcbiAgICAgICAgICBGJHByaW1lOiBGJHByaW1lLFxuICAgICAgICAgIEFwcGx5X0Y6IEFwcGx5X0YsXG4gICAgICAgICAgQXBwbHlfQTogQXBwbHlfQSxcbiAgICAgICAgICBhcHBseV9jb25zdDogYXBwbHlfY29uc3QsXG4gICAgICAgICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0JDIsXG4gICAgICAgICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQkMixcbiAgICAgICAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoJDJcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbGljYXRpdmUoQSkge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0LkFwcGx5KEEpO1xuICB2YXIgbGlmdEExID0gZnVuY3Rpb24gKGYsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzEoQS5wdXJlLCBmKSwgZmEpO1xuICB9O1xuICB2YXIgd2hlbl8gPSBmdW5jdGlvbiAocCwgZmEpIHtcbiAgICBpZiAocCkge1xuICAgICAgcmV0dXJuIGZhO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVubGVzcyA9IGZ1bmN0aW9uIChwLCBmYSkge1xuICAgIGlmIChwKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmE7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEk6IEksXG4gICAgICAgICAgbGlmdEExOiBsaWZ0QTEsXG4gICAgICAgICAgd2hlbl86IHdoZW5fLFxuICAgICAgICAgIHVubGVzczogdW5sZXNzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkKE0pIHtcbiAgdmFyIEkgPSBJbmZpeCRCc0Jhc3RldC5Nb25hZChNKTtcbiAgdmFyIEkkMSA9IEluZml4JEJzQmFzdGV0LkFwcGx5KE0pO1xuICB2YXIgbGlmdEExID0gZnVuY3Rpb24gKGYsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkkMS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMShNLnB1cmUsIGYpLCBmYSk7XG4gIH07XG4gIHZhciB3aGVuXyA9IGZ1bmN0aW9uIChwLCBmYSkge1xuICAgIGlmIChwKSB7XG4gICAgICByZXR1cm4gZmE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShNLnB1cmUsIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9O1xuICB2YXIgdW5sZXNzID0gZnVuY3Rpb24gKHAsIGZhKSB7XG4gICAgaWYgKHApIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMShNLnB1cmUsIHVuZGVmaW5lZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYTtcbiAgICB9XG4gIH07XG4gIHZhciBBID0ge1xuICAgIEk6IEkkMSxcbiAgICBsaWZ0QTE6IGxpZnRBMSxcbiAgICB3aGVuXzogd2hlbl8sXG4gICAgdW5sZXNzOiB1bmxlc3NcbiAgfTtcbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRncmVhdCRncmVhdCRlcSwgbSwgaWQpO1xuICB9O1xuICB2YXIgY29tcG9zZV9rbGllc2xpID0gZnVuY3Rpb24gKGYsIGcsIGEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIEN1cnJ5Ll8xKGYsIGEpLCBnKTtcbiAgfTtcbiAgdmFyIGNvbXBvc2Vfa2xpZXNsaV9mbGlwcGVkID0gZnVuY3Rpb24gKGYsIGcsIGEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZXEkbGVzcyRsZXNzLCBmLCBDdXJyeS5fMShnLCBhKSk7XG4gIH07XG4gIHZhciBpZl9tID0gZnVuY3Rpb24gKHAsIHQsIGYpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIHAsIChmdW5jdGlvbiAocCRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKHAkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHZhciBsaWZ0TTEgPSBmdW5jdGlvbiAoZiwgZmEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIGZhLCAoZnVuY3Rpb24gKGZhJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoTS5wdXJlLCBDdXJyeS5fMShmLCBmYSRwcmltZSkpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgfTtcbiAgdmFyIGFwID0gZnVuY3Rpb24gKGYsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGdyZWF0JGdyZWF0JGVxLCBmLCAoZnVuY3Rpb24gKGYkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRncmVhdCRncmVhdCRlcSwgZmEsIChmdW5jdGlvbiAoZmEkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKE0ucHVyZSwgQ3VycnkuXzEoZiRwcmltZSwgZmEkcHJpbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHZhciB3aGVuXyQxID0gZnVuY3Rpb24gKHAsIGZhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGdyZWF0JGdyZWF0JGVxLCBwLCAoZnVuY3Rpb24gKHAkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3aGVuXyhwJHByaW1lLCBmYSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICB9O1xuICB2YXIgdW5sZXNzJDEgPSBmdW5jdGlvbiAocCwgZmEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kZ3JlYXQkZ3JlYXQkZXEsIHAsIChmdW5jdGlvbiAocCRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHVubGVzcyhwJHByaW1lLCBmYSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEk6IEksXG4gICAgICAgICAgQTogQSxcbiAgICAgICAgICBmbGF0dGVuOiBmbGF0dGVuLFxuICAgICAgICAgIGNvbXBvc2Vfa2xpZXNsaTogY29tcG9zZV9rbGllc2xpLFxuICAgICAgICAgIGNvbXBvc2Vfa2xpZXNsaV9mbGlwcGVkOiBjb21wb3NlX2tsaWVzbGlfZmxpcHBlZCxcbiAgICAgICAgICBpZl9tOiBpZl9tLFxuICAgICAgICAgIGxpZnRNMTogbGlmdE0xLFxuICAgICAgICAgIGFwOiBhcCxcbiAgICAgICAgICB3aGVuXzogd2hlbl8kMSxcbiAgICAgICAgICB1bmxlc3M6IHVubGVzcyQxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRhYmxlKEYpIHtcbiAgdmFyIFNlbWlncm91cCA9IGZ1bmN0aW9uIChTKSB7XG4gICAgdmFyIEZNID0gQ3VycnkuXzEoRi5Gb2xkX01hcF9BbnksIEVuZG8kQnNCYXN0ZXQuTW9ub2lkKTtcbiAgICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKFMpO1xuICAgIHZhciBzdXJyb3VuZF9tYXAgPSBmdW5jdGlvbiAoZGVsaW1pdGVyLCBmLCBmYSkge1xuICAgICAgdmFyIGpvaW5lZCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiAvKiBFbmRvICovWyhmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgZGVsaW1pdGVyLCBDdXJyeS5fMShmLCBhKSksIG0pO1xuICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgfTtcbiAgICAgIHZhciBmbiA9IEN1cnJ5Ll8yKEZNLmZvbGRfbWFwLCBqb2luZWQsIGZhKTtcbiAgICAgIHJldHVybiBDdXJyeS5fMShmblswXSwgZGVsaW1pdGVyKTtcbiAgICB9O1xuICAgIHZhciBzdXJyb3VuZCA9IGZ1bmN0aW9uIChkZWxpbWl0ZXIsIGZhKSB7XG4gICAgICByZXR1cm4gc3Vycm91bmRfbWFwKGRlbGltaXRlciwgaWQsIGZhKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBGTTogRk0sXG4gICAgICAgICAgICBJOiBJLFxuICAgICAgICAgICAgc3Vycm91bmRfbWFwOiBzdXJyb3VuZF9tYXAsXG4gICAgICAgICAgICBzdXJyb3VuZDogc3Vycm91bmRcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgTW9ub2lkID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgRk0gPSBDdXJyeS5fMShGLkZvbGRfTWFwLCBNKTtcbiAgICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE0pO1xuICAgIHZhciBmb2xkID0gQ3VycnkuXzEoRk0uZm9sZF9tYXAsIGlkKTtcbiAgICB2YXIgaW50ZXJjYWxhdGUgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCB4cykge1xuICAgICAgdmFyIGdvID0gZnVuY3Rpb24gKGFjYywgeCkge1xuICAgICAgICBpZiAoYWNjLmluaXQpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgaW5pdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICBhY2M6IHhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICBpbml0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgIGFjYzogQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgYWNjLmFjYywgc2VwYXJhdG9yKSwgeClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCBnbywge1xuICAgICAgICAgICAgICAgICAgaW5pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGFjYzogTS5lbXB0eVxuICAgICAgICAgICAgICAgIH0sIHhzKS5hY2M7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgRk06IEZNLFxuICAgICAgICAgICAgSTogSSxcbiAgICAgICAgICAgIGZvbGQ6IGZvbGQsXG4gICAgICAgICAgICBpbnRlcmNhbGF0ZTogaW50ZXJjYWxhdGVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgQXBwbGljYXRpdmUgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gICAgdmFyIGFwcGx5X2ZpcnN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0LCBhKSwgYik7XG4gICAgfTtcbiAgICB2YXIgYXBwbHlfc2Vjb25kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChpZCwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gICAgfTtcbiAgICB2YXIgYXBwbHlfYm90aCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChhJHByaW1lLCBiJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgfSksIGEpLCBiKTtcbiAgICB9O1xuICAgIHZhciBsaWZ0MiA9IGZ1bmN0aW9uIChmLCBhLCBiKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpO1xuICAgIH07XG4gICAgdmFyIGxpZnQzID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyk7XG4gICAgfTtcbiAgICB2YXIgbGlmdDQgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKTtcbiAgICB9O1xuICAgIHZhciBsaWZ0NSA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKSwgZCksIGUpO1xuICAgIH07XG4gICAgdmFyIEluZml4ID0ge1xuICAgICAgJGxlc3Mkc3RhcjogYXBwbHlfZmlyc3QsXG4gICAgICAkc3RhciRncmVhdDogYXBwbHlfc2Vjb25kXG4gICAgfTtcbiAgICB2YXIgRm4gPSB7XG4gICAgICBJOiBJLFxuICAgICAgYXBwbHlfZmlyc3Q6IGFwcGx5X2ZpcnN0LFxuICAgICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQsXG4gICAgICBhcHBseV9ib3RoOiBhcHBseV9ib3RoLFxuICAgICAgbGlmdDI6IGxpZnQyLFxuICAgICAgbGlmdDM6IGxpZnQzLFxuICAgICAgbGlmdDQ6IGxpZnQ0LFxuICAgICAgbGlmdDU6IGxpZnQ1LFxuICAgICAgSW5maXg6IEluZml4XG4gICAgfTtcbiAgICB2YXIgdHJhdmVyc2UkcHJpbWUgPSBmdW5jdGlvbiAoZiwgZmEpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfcmlnaHQsIEN1cnJ5Ll8yKCRsZXNzJGRvdCwgYXBwbHlfc2Vjb25kLCBmKSwgQ3VycnkuXzEoQS5wdXJlLCB1bmRlZmluZWQpLCBmYSk7XG4gICAgfTtcbiAgICB2YXIgc2VxdWVuY2UkcHJpbWUgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICAgIHJldHVybiB0cmF2ZXJzZSRwcmltZShpZCwgZmEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZuOiBGbixcbiAgICAgICAgICAgIHRyYXZlcnNlJHByaW1lOiB0cmF2ZXJzZSRwcmltZSxcbiAgICAgICAgICAgIHNlcXVlbmNlJHByaW1lOiBzZXF1ZW5jZSRwcmltZVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBQbHVzID0gZnVuY3Rpb24gKFApIHtcbiAgICB2YXIgb25lX29mID0gZnVuY3Rpb24gKGZhKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX3JpZ2h0LCBQLmFsdCwgUC5lbXB0eSwgZmEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9uZV9vZjogb25lX29mXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIE1vbmFkID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE0pO1xuICAgIHZhciBmb2xkX21vbmFkID0gZnVuY3Rpb24gKGYsIGEsIGZhKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRncmVhdCRncmVhdCRlcSwgYWNjLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LmZsaXAoZiwgeCwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoTS5wdXJlLCBhKSwgZmEpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEk6IEksXG4gICAgICAgICAgICBmb2xkX21vbmFkOiBmb2xkX21vbmFkXG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBTZW1pZ3JvdXA6IFNlbWlncm91cCxcbiAgICAgICAgICBNb25vaWQ6IE1vbm9pZCxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgUGx1czogUGx1cyxcbiAgICAgICAgICBNb25hZDogTW9uYWRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gVHJhdmVyc2FibGUoVCkge1xuICB2YXIgYXBwbHlfc3RhdGUgPSBmdW5jdGlvbiAocywgYSkge1xuICAgIHJldHVybiBDdXJyeS5fMShzLCBhKTtcbiAgfTtcbiAgdmFyIFN0YXRlX0xlZnQgPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgaywgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoaywgcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2guYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShmLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgRnVuY3RvciA9IHtcbiAgICAgIG1hcDogbWFwXG4gICAgfTtcbiAgICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgeCwgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoZiwgcyk7XG4gICAgICB2YXIgbWF0Y2gkMSA9IEN1cnJ5Ll8xKHgsIG1hdGNoLmFjY3VtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaCQxLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEobWF0Y2gudmFsdWUsIG1hdGNoJDEudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEFwcGx5ID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBhcHBseTogYXBwbHlcbiAgICB9O1xuICAgIHZhciBwdXJlID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgcHVyZTogcHVyZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgU3RhdGVfUmlnaHQgPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgaywgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoaywgcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2guYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShmLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgRnVuY3RvciA9IHtcbiAgICAgIG1hcDogbWFwXG4gICAgfTtcbiAgICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgeCwgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoeCwgcyk7XG4gICAgICB2YXIgbWF0Y2gkMSA9IEN1cnJ5Ll8xKGYsIG1hdGNoLmFjY3VtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaCQxLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEobWF0Y2gkMS52YWx1ZSwgbWF0Y2gudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEFwcGx5ID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBhcHBseTogYXBwbHlcbiAgICB9O1xuICAgIHZhciBwdXJlID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgcHVyZTogcHVyZVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgTWFwX0FjY3VtID0gZnVuY3Rpb24gKFR5cGUsIFQpIHtcbiAgICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGssIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKGssIHMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWNjdW06IG1hdGNoLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEoZiwgbWF0Y2gudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEZ1bmN0b3IgPSB7XG4gICAgICBtYXA6IG1hcFxuICAgIH07XG4gICAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGYsIHgsIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKGYsIHMpO1xuICAgICAgdmFyIG1hdGNoJDEgPSBDdXJyeS5fMSh4LCBtYXRjaC5hY2N1bSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2gkMS5hY2N1bSxcbiAgICAgICAgICAgICAgdmFsdWU6IEN1cnJ5Ll8xKG1hdGNoLnZhbHVlLCBtYXRjaCQxLnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBseSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5XG4gICAgfTtcbiAgICB2YXIgcHVyZSA9IGZ1bmN0aW9uIChhLCBzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogcyxcbiAgICAgICAgICAgICAgdmFsdWU6IGFcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgQXBwbGljYXRpdmUgPSB7XG4gICAgICBtYXA6IG1hcCxcbiAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgIHB1cmU6IHB1cmVcbiAgICB9O1xuICAgIHZhciBTTCA9IHtcbiAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICBBcHBseTogQXBwbHksXG4gICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmVcbiAgICB9O1xuICAgIHZhciBtYXAkMSA9IGZ1bmN0aW9uIChmLCBrLCBzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMShrLCBzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaC5hY2N1bSxcbiAgICAgICAgICAgICAgdmFsdWU6IEN1cnJ5Ll8xKGYsIG1hdGNoLnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBGdW5jdG9yJDEgPSB7XG4gICAgICBtYXA6IG1hcCQxXG4gICAgfTtcbiAgICB2YXIgYXBwbHkkMSA9IGZ1bmN0aW9uIChmLCB4LCBzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMSh4LCBzKTtcbiAgICAgIHZhciBtYXRjaCQxID0gQ3VycnkuXzEoZiwgbWF0Y2guYWNjdW0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWNjdW06IG1hdGNoJDEuYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShtYXRjaCQxLnZhbHVlLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgQXBwbHkkMSA9IHtcbiAgICAgIG1hcDogbWFwJDEsXG4gICAgICBhcHBseTogYXBwbHkkMVxuICAgIH07XG4gICAgdmFyIHB1cmUkMSA9IGZ1bmN0aW9uIChhLCBzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogcyxcbiAgICAgICAgICAgICAgdmFsdWU6IGFcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgQXBwbGljYXRpdmUkMSA9IHtcbiAgICAgIG1hcDogbWFwJDEsXG4gICAgICBhcHBseTogYXBwbHkkMSxcbiAgICAgIHB1cmU6IHB1cmUkMVxuICAgIH07XG4gICAgdmFyIFNSID0ge1xuICAgICAgRnVuY3RvcjogRnVuY3RvciQxLFxuICAgICAgQXBwbHk6IEFwcGx5JDEsXG4gICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUkMVxuICAgIH07XG4gICAgdmFyIFRTTCA9IEN1cnJ5Ll8xKFQsIEFwcGxpY2F0aXZlKTtcbiAgICB2YXIgVFNSID0gQ3VycnkuXzEoVCwgQXBwbGljYXRpdmUkMSk7XG4gICAgdmFyIG1hcF9hY2N1bV9sZWZ0ID0gZnVuY3Rpb24gKGYsIHMsIHhzKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzMoVFNMLnRyYXZlcnNlLCAoZnVuY3Rpb24gKGEsIHMkcHJpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHMkcHJpbWUsIGEpO1xuICAgICAgICAgICAgICAgICAgfSksIHhzLCBzKTtcbiAgICB9O1xuICAgIHZhciBtYXBfYWNjdW1fcmlnaHQgPSBmdW5jdGlvbiAoZiwgcywgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhUU1IudHJhdmVyc2UsIChmdW5jdGlvbiAoYSwgcyRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoZiwgcyRwcmltZSwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSwgeHMsIHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFNMOiBTTCxcbiAgICAgICAgICAgIFNSOiBTUixcbiAgICAgICAgICAgIFRTTDogVFNMLFxuICAgICAgICAgICAgVFNSOiBUU1IsXG4gICAgICAgICAgICBtYXBfYWNjdW1fbGVmdDogbWFwX2FjY3VtX2xlZnQsXG4gICAgICAgICAgICBtYXBfYWNjdW1fcmlnaHQ6IG1hcF9hY2N1bV9yaWdodFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBJbnRlcm5hbCA9IHtcbiAgICBhcHBseV9zdGF0ZTogYXBwbHlfc3RhdGUsXG4gICAgU3RhdGVfTGVmdDogU3RhdGVfTGVmdCxcbiAgICBTdGF0ZV9SaWdodDogU3RhdGVfUmlnaHQsXG4gICAgTWFwX0FjY3VtOiBNYXBfQWNjdW1cbiAgfTtcbiAgdmFyIFNjYW4gPSBmdW5jdGlvbiAoVHlwZSkge1xuICAgIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgaywgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoaywgcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2guYWNjdW0sXG4gICAgICAgICAgICAgIHZhbHVlOiBDdXJyeS5fMShmLCBtYXRjaC52YWx1ZSlcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICB2YXIgRnVuY3RvciA9IHtcbiAgICAgIG1hcDogbWFwXG4gICAgfTtcbiAgICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgeCwgcykge1xuICAgICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoZiwgcyk7XG4gICAgICB2YXIgbWF0Y2gkMSA9IEN1cnJ5Ll8xKHgsIG1hdGNoLmFjY3VtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBtYXRjaCQxLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEobWF0Y2gudmFsdWUsIG1hdGNoJDEudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEFwcGx5ID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBhcHBseTogYXBwbHlcbiAgICB9O1xuICAgIHZhciBwdXJlID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICAgIG1hcDogbWFwLFxuICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgcHVyZTogcHVyZVxuICAgIH07XG4gICAgdmFyIFNMID0ge1xuICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZVxuICAgIH07XG4gICAgdmFyIG1hcCQxID0gZnVuY3Rpb24gKGYsIGssIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKGssIHMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYWNjdW06IG1hdGNoLmFjY3VtLFxuICAgICAgICAgICAgICB2YWx1ZTogQ3VycnkuXzEoZiwgbWF0Y2gudmFsdWUpXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgdmFyIEZ1bmN0b3IkMSA9IHtcbiAgICAgIG1hcDogbWFwJDFcbiAgICB9O1xuICAgIHZhciBhcHBseSQxID0gZnVuY3Rpb24gKGYsIHgsIHMpIHtcbiAgICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8xKHgsIHMpO1xuICAgICAgdmFyIG1hdGNoJDEgPSBDdXJyeS5fMShmLCBtYXRjaC5hY2N1bSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhY2N1bTogbWF0Y2gkMS5hY2N1bSxcbiAgICAgICAgICAgICAgdmFsdWU6IEN1cnJ5Ll8xKG1hdGNoJDEudmFsdWUsIG1hdGNoLnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBseSQxID0ge1xuICAgICAgbWFwOiBtYXAkMSxcbiAgICAgIGFwcGx5OiBhcHBseSQxXG4gICAgfTtcbiAgICB2YXIgcHVyZSQxID0gZnVuY3Rpb24gKGEsIHMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGFjY3VtOiBzLFxuICAgICAgICAgICAgICB2YWx1ZTogYVxuICAgICAgICAgICAgfTtcbiAgICB9O1xuICAgIHZhciBBcHBsaWNhdGl2ZSQxID0ge1xuICAgICAgbWFwOiBtYXAkMSxcbiAgICAgIGFwcGx5OiBhcHBseSQxLFxuICAgICAgcHVyZTogcHVyZSQxXG4gICAgfTtcbiAgICB2YXIgU1IgPSB7XG4gICAgICBGdW5jdG9yOiBGdW5jdG9yJDEsXG4gICAgICBBcHBseTogQXBwbHkkMSxcbiAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSQxXG4gICAgfTtcbiAgICB2YXIgVFNMID0gQ3VycnkuXzEoVCwgQXBwbGljYXRpdmUpO1xuICAgIHZhciBUU1IgPSBDdXJyeS5fMShULCBBcHBsaWNhdGl2ZSQxKTtcbiAgICB2YXIgbWFwX2FjY3VtX2xlZnQgPSBmdW5jdGlvbiAoZiwgcywgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhUU0wudHJhdmVyc2UsIChmdW5jdGlvbiAoYSwgcyRwcmltZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoZiwgcyRwcmltZSwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSwgeHMsIHMpO1xuICAgIH07XG4gICAgdmFyIG1hcF9hY2N1bV9yaWdodCA9IGZ1bmN0aW9uIChmLCBzLCB4cykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKFRTUi50cmF2ZXJzZSwgKGZ1bmN0aW9uIChhLCBzJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihmLCBzJHByaW1lLCBhKTtcbiAgICAgICAgICAgICAgICAgIH0pLCB4cywgcyk7XG4gICAgfTtcbiAgICB2YXIgTUEgPSB7XG4gICAgICBTTDogU0wsXG4gICAgICBTUjogU1IsXG4gICAgICBUU0w6IFRTTCxcbiAgICAgIFRTUjogVFNSLFxuICAgICAgbWFwX2FjY3VtX2xlZnQ6IG1hcF9hY2N1bV9sZWZ0LFxuICAgICAgbWFwX2FjY3VtX3JpZ2h0OiBtYXBfYWNjdW1fcmlnaHRcbiAgICB9O1xuICAgIHZhciBzY2FuX2xlZnQgPSBmdW5jdGlvbiAoZiwgaW5pdCwgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhtYXBfYWNjdW1fbGVmdCwgKGZ1bmN0aW9uIChiLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiJHByaW1lID0gQ3VycnkuXzIoZiwgYiwgYSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW06IGIkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pLCBpbml0LCB4cykudmFsdWU7XG4gICAgfTtcbiAgICB2YXIgc2Nhbl9yaWdodCA9IGZ1bmN0aW9uIChmLCBpbml0LCB4cykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKG1hcF9hY2N1bV9yaWdodCwgKGZ1bmN0aW9uIChiLCBhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiJHByaW1lID0gQ3VycnkuXzIoZiwgYSwgYik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjdW06IGIkcHJpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pLCBpbml0LCB4cykudmFsdWU7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgTUE6IE1BLFxuICAgICAgICAgICAgc2Nhbl9sZWZ0OiBzY2FuX2xlZnQsXG4gICAgICAgICAgICBzY2FuX3JpZ2h0OiBzY2FuX3JpZ2h0XG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBJbnRlcm5hbDogSW50ZXJuYWwsXG4gICAgICAgICAgU2NhbjogU2NhblxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBcHBseSQxKEEpIHtcbiAgdmFyIEkgPSBJbmZpeCRCc0Jhc3RldC5BcHBseShBKTtcbiAgdmFyIGFwcGx5X2ZpcnN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCwgYSksIGIpO1xuICB9O1xuICB2YXIgYXBwbHlfc2Vjb25kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGlkLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgYik7XG4gIH07XG4gIHZhciBhcHBseV9ib3RoID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgKGZ1bmN0aW9uIChhJHByaW1lLCBiJHByaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSRwcmltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIkcHJpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICB9KSwgYSksIGIpO1xuICB9O1xuICB2YXIgbGlmdDIgPSBmdW5jdGlvbiAoZiwgYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYik7XG4gIH07XG4gIHZhciBsaWZ0MyA9IGZ1bmN0aW9uIChmLCBhLCBiLCBjKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJCRncmVhdCwgZiwgYSksIGIpLCBjKTtcbiAgfTtcbiAgdmFyIGxpZnQ0ID0gZnVuY3Rpb24gKGYsIGEsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIGYsIGEpLCBiKSwgYyksIGQpO1xuICB9O1xuICB2YXIgbGlmdDUgPSBmdW5jdGlvbiAoZiwgYSwgYiwgYywgZCwgZSkge1xuICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3MkJGdyZWF0LCBmLCBhKSwgYiksIGMpLCBkKSwgZSk7XG4gIH07XG4gIHZhciBJbmZpeCA9IHtcbiAgICAkbGVzcyRzdGFyOiBhcHBseV9maXJzdCxcbiAgICAkc3RhciRncmVhdDogYXBwbHlfc2Vjb25kXG4gIH07XG4gIHZhciBGdW5jdGlvbnMgPSB7XG4gICAgSTogSSxcbiAgICBhcHBseV9maXJzdDogYXBwbHlfZmlyc3QsXG4gICAgYXBwbHlfc2Vjb25kOiBhcHBseV9zZWNvbmQsXG4gICAgYXBwbHlfYm90aDogYXBwbHlfYm90aCxcbiAgICBsaWZ0MjogbGlmdDIsXG4gICAgbGlmdDM6IGxpZnQzLFxuICAgIGxpZnQ0OiBsaWZ0NCxcbiAgICBsaWZ0NTogbGlmdDUsXG4gICAgSW5maXg6IEluZml4XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3Rpb25zOiBGdW5jdGlvbnMsXG4gICAgICAgICAgJGxlc3Mkc3RhcjogYXBwbHlfZmlyc3QsXG4gICAgICAgICAgJHN0YXIkZ3JlYXQ6IGFwcGx5X3NlY29uZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNb25hZCQxKE0pIHtcbiAgdmFyIEZ1bmN0aW9ucyA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIEZ1bmN0aW9uczogRnVuY3Rpb25zLFxuICAgICAgICAgICRncmVhdCRlcSRncmVhdDogRnVuY3Rpb25zLiRncmVhdCRlcSRncmVhdCxcbiAgICAgICAgICAkbGVzcyRlcSRsZXNzOiBGdW5jdGlvbnMuJGxlc3MkZXEkbGVzc1xuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBWb2lkKEYpIHtcbiAgdmFyICQkdm9pZCA9IGZ1bmN0aW9uIChmYSkge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QodW5kZWZpbmVkLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgfSksIGZhKTtcbiAgfTtcbiAgdmFyIHZvaWRfcmlnaHQgPSBmdW5jdGlvbiAoYSwgZmIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGEsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICB9KSwgZmIpO1xuICB9O1xuICB2YXIgdm9pZF9sZWZ0ID0gZnVuY3Rpb24gKGZhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEYubWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdChiLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgfSksIGZhKTtcbiAgfTtcbiAgdmFyIGZsYXAgPSBmdW5jdGlvbiAoZnMsIGEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGEpO1xuICAgICAgICAgICAgICAgIH0pLCBmcyk7XG4gIH07XG4gIHZhciBGdW5jdGlvbnMgPSB7XG4gICAgJCR2b2lkOiAkJHZvaWQsXG4gICAgdm9pZF9yaWdodDogdm9pZF9yaWdodCxcbiAgICB2b2lkX2xlZnQ6IHZvaWRfbGVmdCxcbiAgICBmbGFwOiBmbGFwXG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3Rpb25zOiBGdW5jdGlvbnMsXG4gICAgICAgICAgJCRncmVhdDogdm9pZF9sZWZ0LFxuICAgICAgICAgICRsZXNzJDogdm9pZF9yaWdodCxcbiAgICAgICAgICAkbGVzcyRhdCRncmVhdDogZmxhcFxuICAgICAgICB9O1xufVxuXG52YXIgSW5maXggPSB7XG4gIEFwcGx5OiBBcHBseSQxLFxuICBNb25hZDogTW9uYWQkMSxcbiAgVm9pZDogVm9pZFxufTtcblxudmFyICQkY29uc3QgPSBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0O1xuXG52YXIgZmxpcCA9IEZ1bmN0aW9uJEJzQmFzdGV0LmZsaXA7XG5cbmV4cG9ydCB7XG4gICQkY29uc3QgLFxuICBmbGlwICxcbiAgaWQgLFxuICAkbGVzcyRkb3QgLFxuICBNb25vaWQgLFxuICBGdW5jdG9yICxcbiAgQXBwbHkgLFxuICBBcHBseSRwcmltZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgTW9uYWQgLFxuICBGb2xkYWJsZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgSW5maXggLFxuICBcbn1cbi8qIEVuZG8tQnNCYXN0ZXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb25zJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9GdW5jdGlvbnMuYnMuanNcIjtcblxuZnVuY3Rpb24gQXBwbHlFeHRlbnNpb25zKEEpIHtcbiAgdmFyIEJzQXBwbHlFeHRlbnNpb25zID0gRnVuY3Rpb25zJEJzQmFzdGV0LkFwcGx5KEEpO1xuICB2YXIgbWFwMiA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQyO1xuICB2YXIgbWFwMyA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQzO1xuICB2YXIgbWFwNCA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ0O1xuICB2YXIgbWFwNSA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ1O1xuICB2YXIgdHVwbGUzID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgKGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIGZhLCBmYiwgZmMpO1xuICB9O1xuICB2YXIgdHVwbGU0ID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMsIGZkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll81KG1hcDQsIChmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCk7XG4gIH07XG4gIHZhciB0dXBsZTUgPSBmdW5jdGlvbiAoZmEsIGZiLCBmYywgZmQsIGZlKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIChmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCwgZmUpO1xuICB9O1xuICB2YXIgbWFwVHVwbGUyID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKG1hcDIsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTMgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTQgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzUobWFwNCwgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSwgcGFyYW1bM10pO1xuICB9O1xuICB2YXIgbWFwVHVwbGU1ID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdLCBwYXJhbVs0XSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgQnNBcHBseUV4dGVuc2lvbnM6IEJzQXBwbHlFeHRlbnNpb25zLFxuICAgICAgICAgIGFwcGx5Rmlyc3Q6IEJzQXBwbHlFeHRlbnNpb25zLmFwcGx5X2ZpcnN0LFxuICAgICAgICAgIGFwcGx5U2Vjb25kOiBCc0FwcGx5RXh0ZW5zaW9ucy5hcHBseV9zZWNvbmQsXG4gICAgICAgICAgbWFwMjogbWFwMixcbiAgICAgICAgICBtYXAzOiBtYXAzLFxuICAgICAgICAgIG1hcDQ6IG1hcDQsXG4gICAgICAgICAgbWFwNTogbWFwNSxcbiAgICAgICAgICB0dXBsZTI6IEJzQXBwbHlFeHRlbnNpb25zLmFwcGx5X2JvdGgsXG4gICAgICAgICAgdHVwbGUzOiB0dXBsZTMsXG4gICAgICAgICAgdHVwbGU0OiB0dXBsZTQsXG4gICAgICAgICAgdHVwbGU1OiB0dXBsZTUsXG4gICAgICAgICAgbWFwVHVwbGUyOiBtYXBUdXBsZTIsXG4gICAgICAgICAgbWFwVHVwbGUzOiBtYXBUdXBsZTMsXG4gICAgICAgICAgbWFwVHVwbGU0OiBtYXBUdXBsZTQsXG4gICAgICAgICAgbWFwVHVwbGU1OiBtYXBUdXBsZTVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQXBwbHlJbmZpeChBKSB7XG4gIHZhciBCc0FwcGx5RXh0ZW5zaW9ucyA9IEZ1bmN0aW9ucyRCc0Jhc3RldC5BcHBseShBKTtcbiAgdmFyIGFwcGx5Rmlyc3QgPSBCc0FwcGx5RXh0ZW5zaW9ucy5hcHBseV9maXJzdDtcbiAgdmFyIGFwcGx5U2Vjb25kID0gQnNBcHBseUV4dGVuc2lvbnMuYXBwbHlfc2Vjb25kO1xuICB2YXIgbWFwMiA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQyO1xuICB2YXIgbWFwMyA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQzO1xuICB2YXIgbWFwNCA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ0O1xuICB2YXIgbWFwNSA9IEJzQXBwbHlFeHRlbnNpb25zLmxpZnQ1O1xuICB2YXIgdHVwbGUzID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgKGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIGZhLCBmYiwgZmMpO1xuICB9O1xuICB2YXIgdHVwbGU0ID0gZnVuY3Rpb24gKGZhLCBmYiwgZmMsIGZkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll81KG1hcDQsIChmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCk7XG4gIH07XG4gIHZhciB0dXBsZTUgPSBmdW5jdGlvbiAoZmEsIGZiLCBmYywgZmQsIGZlKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIChmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pLCBmYSwgZmIsIGZjLCBmZCwgZmUpO1xuICB9O1xuICB2YXIgbWFwVHVwbGUyID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKG1hcDIsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTMgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzQobWFwMywgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSk7XG4gIH07XG4gIHZhciBtYXBUdXBsZTQgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzUobWFwNCwgZiwgcGFyYW1bMF0sIHBhcmFtWzFdLCBwYXJhbVsyXSwgcGFyYW1bM10pO1xuICB9O1xuICB2YXIgbWFwVHVwbGU1ID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll82KG1hcDUsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdLCBwYXJhbVs0XSk7XG4gIH07XG4gIHZhciBBcHBseUV4dGVuc2lvbnNfdHVwbGUyID0gQnNBcHBseUV4dGVuc2lvbnMuYXBwbHlfYm90aDtcbiAgdmFyIEFwcGx5RXh0ZW5zaW9ucyA9IHtcbiAgICBCc0FwcGx5RXh0ZW5zaW9uczogQnNBcHBseUV4dGVuc2lvbnMsXG4gICAgYXBwbHlGaXJzdDogYXBwbHlGaXJzdCxcbiAgICBhcHBseVNlY29uZDogYXBwbHlTZWNvbmQsXG4gICAgbWFwMjogbWFwMixcbiAgICBtYXAzOiBtYXAzLFxuICAgIG1hcDQ6IG1hcDQsXG4gICAgbWFwNTogbWFwNSxcbiAgICB0dXBsZTI6IEFwcGx5RXh0ZW5zaW9uc190dXBsZTIsXG4gICAgdHVwbGUzOiB0dXBsZTMsXG4gICAgdHVwbGU0OiB0dXBsZTQsXG4gICAgdHVwbGU1OiB0dXBsZTUsXG4gICAgbWFwVHVwbGUyOiBtYXBUdXBsZTIsXG4gICAgbWFwVHVwbGUzOiBtYXBUdXBsZTMsXG4gICAgbWFwVHVwbGU0OiBtYXBUdXBsZTQsXG4gICAgbWFwVHVwbGU1OiBtYXBUdXBsZTVcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBBcHBseUV4dGVuc2lvbnM6IEFwcGx5RXh0ZW5zaW9ucyxcbiAgICAgICAgICAkbGVzcyRzdGFyJGdyZWF0OiBBLmFwcGx5LFxuICAgICAgICAgICRsZXNzJHN0YXI6IGFwcGx5Rmlyc3QsXG4gICAgICAgICAgJHN0YXIkZ3JlYXQ6IGFwcGx5U2Vjb25kXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIEFwcGx5RXh0ZW5zaW9ucyAsXG4gIEFwcGx5SW5maXggLFxuICBcbn1cbi8qIEZ1bmN0aW9ucy1Cc0Jhc3RldCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0Z1bmN0aW9ucy5icy5qc1wiO1xuXG5mdW5jdGlvbiBNb25hZEV4dGVuc2lvbnMoTSkge1xuICB2YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuTW9uYWQoTSk7XG4gIHZhciBmbGF0TWFwID0gZnVuY3Rpb24gKGYsIG1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1hLCBmKTtcbiAgfTtcbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAobW1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1tYSwgKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IEJzTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZsYXRNYXA6IGZsYXRNYXAsXG4gICAgICAgICAgZmxhdHRlbjogZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogQnNNb25hZEV4dGVuc2lvbnMuY29tcG9zZV9rbGllc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogQnNNb25hZEV4dGVuc2lvbnMuY29tcG9zZV9rbGllc2xpX2ZsaXBwZWQsXG4gICAgICAgICAgbGlmdE0xOiBCc01vbmFkRXh0ZW5zaW9ucy5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IEJzTW9uYWRFeHRlbnNpb25zLndoZW5fLFxuICAgICAgICAgIHVubGVzczogQnNNb25hZEV4dGVuc2lvbnMudW5sZXNzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkSW5maXgoTSkge1xuICB2YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuTW9uYWQoTSk7XG4gIHZhciBmbGF0TWFwID0gZnVuY3Rpb24gKGYsIG1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1hLCBmKTtcbiAgfTtcbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbiAobW1hKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKE0uZmxhdF9tYXAsIG1tYSwgKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICB9KSk7XG4gIH07XG4gIHZhciBjb21wb3NlS2xlaXNsaSA9IEJzTW9uYWRFeHRlbnNpb25zLmNvbXBvc2Vfa2xpZXNsaTtcbiAgdmFyIGZsaXBDb21wb3NlS2xlaXNsaSA9IEJzTW9uYWRFeHRlbnNpb25zLmNvbXBvc2Vfa2xpZXNsaV9mbGlwcGVkO1xuICB2YXIgTW9uYWRFeHRlbnNpb25zX2xpZnRNMSA9IEJzTW9uYWRFeHRlbnNpb25zLmxpZnRNMTtcbiAgdmFyIE1vbmFkRXh0ZW5zaW9uc193aGVuXyA9IEJzTW9uYWRFeHRlbnNpb25zLndoZW5fO1xuICB2YXIgTW9uYWRFeHRlbnNpb25zX3VubGVzcyA9IEJzTW9uYWRFeHRlbnNpb25zLnVubGVzcztcbiAgdmFyIE1vbmFkRXh0ZW5zaW9ucyA9IHtcbiAgICBCc01vbmFkRXh0ZW5zaW9uczogQnNNb25hZEV4dGVuc2lvbnMsXG4gICAgZmxhdE1hcDogZmxhdE1hcCxcbiAgICBmbGF0dGVuOiBmbGF0dGVuLFxuICAgIGNvbXBvc2VLbGVpc2xpOiBjb21wb3NlS2xlaXNsaSxcbiAgICBmbGlwQ29tcG9zZUtsZWlzbGk6IGZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICBsaWZ0TTE6IE1vbmFkRXh0ZW5zaW9uc19saWZ0TTEsXG4gICAgd2hlbl86IE1vbmFkRXh0ZW5zaW9uc193aGVuXyxcbiAgICB1bmxlc3M6IE1vbmFkRXh0ZW5zaW9uc191bmxlc3NcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBNb25hZEV4dGVuc2lvbnM6IE1vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICAkZ3JlYXQkZ3JlYXQkZXE6IE0uZmxhdF9tYXAsXG4gICAgICAgICAgJGVxJGxlc3MkbGVzczogZmxhdE1hcCxcbiAgICAgICAgICAkZ3JlYXQkZXEkZ3JlYXQ6IGNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgICRsZXNzJGVxJGxlc3M6IGZsaXBDb21wb3NlS2xlaXNsaVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBNb25hZEV4dGVuc2lvbnMgLFxuICBNb25hZEluZml4ICxcbiAgXG59XG4vKiBGdW5jdGlvbnMtQnNCYXN0ZXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb25zJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9GdW5jdGlvbnMuYnMuanNcIjtcblxuZnVuY3Rpb24gRnVuY3RvckV4dGVuc2lvbnMoRikge1xuICB2YXIgQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IEZ1bmN0aW9ucyRCc0Jhc3RldC5GdW5jdG9yKEYpO1xuICB2YXIgZmxpcE1hcCA9IGZ1bmN0aW9uIChmYSwgZikge1xuICAgIHJldHVybiBDdXJyeS5fMihGLm1hcCwgZiwgZmEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEJzRnVuY3RvckV4dGVuc2lvbnM6IEJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogZmxpcE1hcCxcbiAgICAgICAgICAkJHZvaWQ6IEJzRnVuY3RvckV4dGVuc2lvbnMuJCR2b2lkLFxuICAgICAgICAgIHZvaWRSaWdodDogQnNGdW5jdG9yRXh0ZW5zaW9ucy52b2lkX3JpZ2h0LFxuICAgICAgICAgIHZvaWRMZWZ0OiBCc0Z1bmN0b3JFeHRlbnNpb25zLnZvaWRfbGVmdCxcbiAgICAgICAgICBmbGFwOiBCc0Z1bmN0b3JFeHRlbnNpb25zLmZsYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRnVuY3RvckluZml4KEYpIHtcbiAgdmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRnVuY3RvcihGKTtcbiAgdmFyIGZsaXBNYXAgPSBmdW5jdGlvbiAoZmEsIGYpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoRi5tYXAsIGYsIGZhKTtcbiAgfTtcbiAgdmFyIHZvaWRSaWdodCA9IEJzRnVuY3RvckV4dGVuc2lvbnMudm9pZF9yaWdodDtcbiAgdmFyIHZvaWRMZWZ0ID0gQnNGdW5jdG9yRXh0ZW5zaW9ucy52b2lkX2xlZnQ7XG4gIHZhciBmbGFwID0gQnNGdW5jdG9yRXh0ZW5zaW9ucy5mbGFwO1xuICB2YXIgRnVuY3RvckV4dGVuc2lvbnNfdm9pZCA9IEJzRnVuY3RvckV4dGVuc2lvbnMuJCR2b2lkO1xuICB2YXIgRnVuY3RvckV4dGVuc2lvbnMgPSB7XG4gICAgQnNGdW5jdG9yRXh0ZW5zaW9uczogQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICBmbGlwTWFwOiBmbGlwTWFwLFxuICAgICQkdm9pZDogRnVuY3RvckV4dGVuc2lvbnNfdm9pZCxcbiAgICB2b2lkUmlnaHQ6IHZvaWRSaWdodCxcbiAgICB2b2lkTGVmdDogdm9pZExlZnQsXG4gICAgZmxhcDogZmxhcFxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEZ1bmN0b3JFeHRlbnNpb25zOiBGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICAgICAgICAkbGVzcyQkZ3JlYXQ6IEYubWFwLFxuICAgICAgICAgICRsZXNzJGhhc2gkZ3JlYXQ6IGZsaXBNYXAsXG4gICAgICAgICAgJGxlc3MkOiB2b2lkUmlnaHQsXG4gICAgICAgICAgJCRncmVhdDogdm9pZExlZnQsXG4gICAgICAgICAgJGxlc3MkYXQkZ3JlYXQ6IGZsYXBcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgRnVuY3RvckV4dGVuc2lvbnMgLFxuICBGdW5jdG9ySW5maXggLFxuICBcbn1cbi8qIEZ1bmN0aW9ucy1Cc0Jhc3RldCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0Z1bmN0aW9ucy5icy5qc1wiO1xuXG5mdW5jdGlvbiBBcHBsaWNhdGl2ZUV4dGVuc2lvbnMoQSkge1xuICB2YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuQXBwbGljYXRpdmUoQSk7XG4gIHZhciBhbGwgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLmFwcGx5LCBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uIChyZXN1bHQsIHJlc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBwYXJhbVswXSksIGFsbChwYXJhbVsxXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCAvKiBbXSAqLzApO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgbGlmdEExOiBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucy5saWZ0QTEsXG4gICAgICAgICAgd2hlbl86IEJzQXBwbGljYXRpdmVFeHRlbnNpb25zLndoZW5fLFxuICAgICAgICAgIHVubGVzczogQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMudW5sZXNzLFxuICAgICAgICAgIGFsbDogYWxsXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIEFwcGxpY2F0aXZlRXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogRnVuY3Rpb25zLUJzQmFzdGV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X01hcFN0cmluZyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X01hcFN0cmluZy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuYnMuanNcIjtcblxuZnVuY3Rpb24gaWRlbnRpdHkoYSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gJCRjb25zdChhLCBwYXJhbSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gZmxpcChmLCBiLCBhKSB7XG4gIHJldHVybiBDdXJyeS5fMihmLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZShmLCBnLCBhKSB7XG4gIHJldHVybiBDdXJyeS5fMShmLCBDdXJyeS5fMShnLCBhKSk7XG59XG5cbmZ1bmN0aW9uIGZsaXBDb21wb3NlKGYsIGcsIGEpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGcsIEN1cnJ5Ll8xKGYsIGEpKTtcbn1cblxuZnVuY3Rpb24gY3VycnkyKGYsIGEsIGIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3VycnkzKGYsIGEsIGIsIGMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBjXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3Vycnk0KGYsIGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICBkXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY3Vycnk1KGYsIGEsIGIsIGMsIGQsIGUpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICBiLFxuICAgICAgICAgICAgICBjLFxuICAgICAgICAgICAgICBkLFxuICAgICAgICAgICAgICBlXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdW5jdXJyeTIoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIHVuY3VycnkzKGYsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhmLCBwYXJhbVswXSwgcGFyYW1bMV0sIHBhcmFtWzJdKTtcbn1cblxuZnVuY3Rpb24gdW5jdXJyeTQoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll80KGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdKTtcbn1cblxuZnVuY3Rpb24gdW5jdXJyeTUoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll81KGYsIHBhcmFtWzBdLCBwYXJhbVsxXSwgcGFyYW1bMl0sIHBhcmFtWzNdLCBwYXJhbVs0XSk7XG59XG5cbmZ1bmN0aW9uIG1hcChhVG9CLCByVG9BLCByKSB7XG4gIHJldHVybiBDdXJyeS5fMShhVG9CLCBDdXJyeS5fMShyVG9BLCByKSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5KHJUb0FUb0IsIHJUb0EsIHIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKHJUb0FUb0IsIHIsIEN1cnJ5Ll8xKHJUb0EsIHIpKTtcbn1cblxuZnVuY3Rpb24gcHVyZShhLCBwYXJhbSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gYmluZChyVG9BLCBhclRvQiwgcikge1xuICByZXR1cm4gQ3VycnkuXzIoYXJUb0IsIEN1cnJ5Ll8xKHJUb0EsIHIpLCByKTtcbn1cblxuZnVuY3Rpb24gZmxhdE1hcChmLCBmYSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIEN1cnJ5Ll8xKGZhLCBwYXJhbSksIHBhcmFtKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZTAoZikge1xuICB2YXIgY2FjaGVkID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciByZXN1bHQgPSBjYWNoZWQuY29udGVudHM7XG4gICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQkMSA9IEN1cnJ5Ll8xKGYsIHVuZGVmaW5lZCk7XG4gICAgICBjYWNoZWQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCQxKTtcbiAgICAgIHJldHVybiByZXN1bHQkMTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWVtb2l6ZTEobWFrZUtleSwgZikge1xuICB2YXIgY2FjaGUgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gKGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgdmFyIGtleSA9IEN1cnJ5Ll8xKG1ha2VLZXksIGlucHV0KTtcbiAgICAgIHZhciByZXN1bHRPcHQgPSBCZWx0X01hcFN0cmluZy5nZXQoY2FjaGUuY29udGVudHMsIGtleSk7XG4gICAgICBpZiAocmVzdWx0T3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ocmVzdWx0T3B0KTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBDdXJyeS5fMShmLCBpbnB1dCk7XG4gICAgICBjYWNoZS5jb250ZW50cyA9IEJlbHRfTWFwU3RyaW5nLnNldChjYWNoZS5jb250ZW50cywga2V5LCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYmVmb3JlKHRpbWVzLCBmKSB7XG4gIHZhciBjYWxsQ291bnQgPSB7XG4gICAgY29udGVudHM6IDBcbiAgfTtcbiAgdmFyIGxhc3RSZXN1bHRPcHQgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgdmFyIGxhc3RSZXN1bHQgPSBsYXN0UmVzdWx0T3B0LmNvbnRlbnRzO1xuICAgICAgaWYgKGxhc3RSZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoY2FsbENvdW50LmNvbnRlbnRzID49IHRpbWVzKSB7XG4gICAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obGFzdFJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IEN1cnJ5Ll8xKGYsIHVuZGVmaW5lZCk7XG4gICAgICAgIGxhc3RSZXN1bHRPcHQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCk7XG4gICAgICAgIGNhbGxDb3VudC5jb250ZW50cyA9IGNhbGxDb3VudC5jb250ZW50cyArIDEgfCAwO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCQxID0gQ3VycnkuXzEoZiwgdW5kZWZpbmVkKTtcbiAgICAgIGxhc3RSZXN1bHRPcHQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCQxKTtcbiAgICAgIGNhbGxDb3VudC5jb250ZW50cyA9IGNhbGxDb3VudC5jb250ZW50cyArIDEgfCAwO1xuICAgICAgcmV0dXJuIHJlc3VsdCQxO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZnRlcih0aW1lcywgZikge1xuICB2YXIgY2FsbENvdW50ID0ge1xuICAgIGNvbnRlbnRzOiAwXG4gIH07XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBpZiAoY2FsbENvdW50LmNvbnRlbnRzIDwgdGltZXMpIHtcbiAgICAgICAgY2FsbENvdW50LmNvbnRlbnRzID0gY2FsbENvdW50LmNvbnRlbnRzICsgMSB8IDA7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShDdXJyeS5fMShmLCB1bmRlZmluZWQpKTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb25jZShmKSB7XG4gIHZhciBsYXN0UmVzdWx0T3B0ID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBsYXN0UmVzdWx0ID0gbGFzdFJlc3VsdE9wdC5jb250ZW50cztcbiAgICAgIGlmIChsYXN0UmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obGFzdFJlc3VsdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gQ3VycnkuXzEoZiwgdW5kZWZpbmVkKTtcbiAgICAgIGxhc3RSZXN1bHRPcHQuY29udGVudHMgPSBDYW1sX29wdGlvbi5zb21lKHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB3cmFwKGJlZm9yZSwgYWZ0ZXIsIGYsIGlucHV0KSB7XG4gIHJldHVybiBDdXJyeS5fMShhZnRlciwgQ3VycnkuXzEoZiwgQ3VycnkuXzEoYmVmb3JlLCBpbnB1dCkpKTtcbn1cblxuZnVuY3Rpb24gbmVnYXRlKGYsIGEpIHtcbiAgcmV0dXJuICFDdXJyeS5fMShmLCBhKTtcbn1cblxudmFyIEluZml4ID0ge1xuICAkbGVzcyRsZXNzOiBjb21wb3NlLFxuICAkZ3JlYXQkZ3JlYXQ6IGZsaXBDb21wb3NlXG59O1xuXG5mdW5jdGlvbiBXaXRoQXJndW1lbnQoUikge1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckV4dGVuc2lvbnMoRnVuY3Rvcik7XG4gIHZhciBBcHBseSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHlcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5RXh0ZW5zaW9ucyhBcHBseSk7XG4gIHZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlKTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kXG4gIH07XG4gIHZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuICB2YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9ySW5maXgoRnVuY3Rvcik7XG4gIHZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUluZml4KEFwcGx5KTtcbiAgdmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkSW5maXgoTW9uYWQpO1xuICB2YXIgSW5maXhfRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuRnVuY3RvckV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlJDQuJGxlc3MkJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUkNC4kbGVzcyRoYXNoJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZG9sbGFyID0gaW5jbHVkZSQ0LiRsZXNzJDtcbiAgdmFyIEluZml4XyQkZ3JlYXQgPSBpbmNsdWRlJDQuJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGF0JGdyZWF0ID0gaW5jbHVkZSQ0LiRsZXNzJGF0JGdyZWF0O1xuICB2YXIgSW5maXhfQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkFwcGx5RXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDUuJGxlc3Mkc3RhciRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIgPSBpbmNsdWRlJDUuJGxlc3Mkc3RhcjtcbiAgdmFyIEluZml4XyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQ1LiRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ2Lk1vbmFkRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUkNi4kZ3JlYXQkZ3JlYXQkZXE7XG4gIHZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZSQ2LiRlcSRsZXNzJGxlc3M7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlJDYuJGdyZWF0JGVxJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUkNi4kbGVzcyRlcSRsZXNzO1xuICB2YXIgSW5maXggPSB7XG4gICAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICAgJCRncmVhdDogSW5maXhfJCRncmVhdCxcbiAgICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAgICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgICBNb25hZEV4dGVuc2lvbnM6IEluZml4X01vbmFkRXh0ZW5zaW9ucyxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICAgJGxlc3MkbGVzczogY29tcG9zZSxcbiAgICAkZ3JlYXQkZ3JlYXQ6IGZsaXBDb21wb3NlXG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBpbmNsdWRlLkJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogaW5jbHVkZS5mbGlwTWFwLFxuICAgICAgICAgICQkdm9pZDogaW5jbHVkZS4kJHZvaWQsXG4gICAgICAgICAgdm9pZFJpZ2h0OiBpbmNsdWRlLnZvaWRSaWdodCxcbiAgICAgICAgICB2b2lkTGVmdDogaW5jbHVkZS52b2lkTGVmdCxcbiAgICAgICAgICBmbGFwOiBpbmNsdWRlLmZsYXAsXG4gICAgICAgICAgQXBwbHk6IEFwcGx5LFxuICAgICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgICBCc0FwcGx5RXh0ZW5zaW9uczogaW5jbHVkZSQxLkJzQXBwbHlFeHRlbnNpb25zLFxuICAgICAgICAgIGFwcGx5Rmlyc3Q6IGluY2x1ZGUkMS5hcHBseUZpcnN0LFxuICAgICAgICAgIGFwcGx5U2Vjb25kOiBpbmNsdWRlJDEuYXBwbHlTZWNvbmQsXG4gICAgICAgICAgbWFwMjogaW5jbHVkZSQxLm1hcDIsXG4gICAgICAgICAgbWFwMzogaW5jbHVkZSQxLm1hcDMsXG4gICAgICAgICAgbWFwNDogaW5jbHVkZSQxLm1hcDQsXG4gICAgICAgICAgbWFwNTogaW5jbHVkZSQxLm1hcDUsXG4gICAgICAgICAgdHVwbGUyOiBpbmNsdWRlJDEudHVwbGUyLFxuICAgICAgICAgIHR1cGxlMzogaW5jbHVkZSQxLnR1cGxlMyxcbiAgICAgICAgICB0dXBsZTQ6IGluY2x1ZGUkMS50dXBsZTQsXG4gICAgICAgICAgdHVwbGU1OiBpbmNsdWRlJDEudHVwbGU1LFxuICAgICAgICAgIG1hcFR1cGxlMjogaW5jbHVkZSQxLm1hcFR1cGxlMixcbiAgICAgICAgICBtYXBUdXBsZTM6IGluY2x1ZGUkMS5tYXBUdXBsZTMsXG4gICAgICAgICAgbWFwVHVwbGU0OiBpbmNsdWRlJDEubWFwVHVwbGU0LFxuICAgICAgICAgIG1hcFR1cGxlNTogaW5jbHVkZSQxLm1hcFR1cGxlNSxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgcHVyZTogcHVyZSxcbiAgICAgICAgICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogaW5jbHVkZSQyLkJzQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgIGxpZnRBMTogaW5jbHVkZSQyLmxpZnRBMSxcbiAgICAgICAgICBhbGw6IGluY2x1ZGUkMi5hbGwsXG4gICAgICAgICAgTW9uYWQ6IE1vbmFkLFxuICAgICAgICAgIGJpbmQ6IGJpbmQsXG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IGluY2x1ZGUkMy5Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGF0TWFwOiBpbmNsdWRlJDMuZmxhdE1hcCxcbiAgICAgICAgICBmbGF0dGVuOiBpbmNsdWRlJDMuZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogaW5jbHVkZSQzLmNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogaW5jbHVkZSQzLmZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBsaWZ0TTE6IGluY2x1ZGUkMy5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IGluY2x1ZGUkMy53aGVuXyxcbiAgICAgICAgICB1bmxlc3M6IGluY2x1ZGUkMy51bmxlc3MsXG4gICAgICAgICAgSW5maXg6IEluZml4XG4gICAgICAgIH07XG59XG5cbnZhciBpZCA9IGlkZW50aXR5O1xuXG52YXIgYW5kVGhlbiA9IGZsaXBDb21wb3NlO1xuXG5leHBvcnQge1xuICBpZGVudGl0eSAsXG4gIGlkICxcbiAgJCRjb25zdCAsXG4gIGZsaXAgLFxuICBjb21wb3NlICxcbiAgZmxpcENvbXBvc2UgLFxuICBhbmRUaGVuICxcbiAgY3VycnkyICxcbiAgY3VycnkzICxcbiAgY3Vycnk0ICxcbiAgY3Vycnk1ICxcbiAgdW5jdXJyeTIgLFxuICB1bmN1cnJ5MyAsXG4gIHVuY3Vycnk0ICxcbiAgdW5jdXJyeTUgLFxuICBtYXAgLFxuICBhcHBseSAsXG4gIHB1cmUgLFxuICBiaW5kICxcbiAgZmxhdE1hcCAsXG4gIG1lbW9pemUwICxcbiAgbWVtb2l6ZTEgLFxuICBiZWZvcmUgLFxuICBhZnRlciAsXG4gIG9uY2UgLFxuICB3cmFwICxcbiAgbmVnYXRlICxcbiAgSW5maXggLFxuICBXaXRoQXJndW1lbnQgLFxuICBcbn1cbi8qIFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcIi4vY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfQXJyYXkgZnJvbSBcIi4vYmVsdF9BcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfU29ydEFycmF5IGZyb20gXCIuL2JlbHRfU29ydEFycmF5LmpzXCI7XG5cbmZ1bmN0aW9uIGhlYWQoeCkge1xuICBpZiAoeCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHhbMF0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBoZWFkRXhuKHgpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geFswXTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJoZWFkRXhuXCIpO1xufVxuXG5mdW5jdGlvbiB0YWlsKHgpIHtcbiAgaWYgKHgpIHtcbiAgICByZXR1cm4geFsxXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gdGFpbEV4bih4KSB7XG4gIGlmICh4KSB7XG4gICAgcmV0dXJuIHhbMV07XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwidGFpbEV4blwiKTtcbn1cblxuZnVuY3Rpb24gYWRkKHhzLCB4KSB7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICB4LFxuICAgICAgICAgIHhzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGdldCh4LCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF94ID0geDtcbiAgICB2YXIgX24gPSBuO1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBuJDEgPSBfbjtcbiAgICAgIHZhciB4JDEgPSBfeDtcbiAgICAgIGlmICgheCQxKSB7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9XG4gICAgICBpZiAobiQxID09PSAwKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHgkMVswXSk7XG4gICAgICB9XG4gICAgICBfbiA9IG4kMSAtIDEgfCAwO1xuICAgICAgX3ggPSB4JDFbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFeG4oeCwgbikge1xuICBpZiAobiA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRFeG5cIik7XG4gIH1cbiAgdmFyIF94ID0geDtcbiAgdmFyIF9uID0gbjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuJDEgPSBfbjtcbiAgICB2YXIgeCQxID0gX3g7XG4gICAgaWYgKHgkMSkge1xuICAgICAgaWYgKG4kMSA9PT0gMCkge1xuICAgICAgICByZXR1cm4geCQxWzBdO1xuICAgICAgfVxuICAgICAgX24gPSBuJDEgLSAxIHwgMDtcbiAgICAgIF94ID0geCQxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJnZXRFeG5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbkF1eChwLCBfY2VsbCwgX3ByZWNYLCBfcHJlY1kpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjWSA9IF9wcmVjWTtcbiAgICB2YXIgcHJlY1ggPSBfcHJlY1g7XG4gICAgdmFyIGNlbGwgPSBfY2VsbDtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB0ID0gY2VsbFsxXTtcbiAgICB2YXIgaCA9IGNlbGxbMF07XG4gICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgIGgsXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIGlmIChwKGgpKSB7XG4gICAgICBwcmVjWFsxXSA9IG5leHQ7XG4gICAgICBfcHJlY1ggPSBuZXh0O1xuICAgICAgX2NlbGwgPSB0O1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBwcmVjWVsxXSA9IG5leHQ7XG4gICAgX3ByZWNZID0gbmV4dDtcbiAgICBfY2VsbCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzcGxpdEF1eChfY2VsbCwgX3ByZWNYLCBfcHJlY1kpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjWSA9IF9wcmVjWTtcbiAgICB2YXIgcHJlY1ggPSBfcHJlY1g7XG4gICAgdmFyIGNlbGwgPSBfY2VsbDtcbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IGNlbGxbMF07XG4gICAgdmFyIG5leHRBID0gLyogOjogKi9bXG4gICAgICBtYXRjaFswXSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgdmFyIG5leHRCID0gLyogOjogKi9bXG4gICAgICBtYXRjaFsxXSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1hbMV0gPSBuZXh0QTtcbiAgICBwcmVjWVsxXSA9IG5leHRCO1xuICAgIF9wcmVjWSA9IG5leHRCO1xuICAgIF9wcmVjWCA9IG5leHRBO1xuICAgIF9jZWxsID0gY2VsbFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhDb250KF9jZWxsWCwgX3ByZWMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiBwcmVjO1xuICAgIH1cbiAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgY2VsbFhbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHByZWNbMV0gPSBuZXh0O1xuICAgIF9wcmVjID0gbmV4dDtcbiAgICBfY2VsbFggPSBjZWxsWFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRGaWx0ZXIoZiwgX2NlbGxYLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHQgPSBjZWxsWFsxXTtcbiAgICB2YXIgaCA9IGNlbGxYWzBdO1xuICAgIGlmIChmKGgpKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICBoLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIF9jZWxsWCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0aEZpbHRlckluZGV4KGYsIF9jZWxsWCwgX3ByZWMsIF9pKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB0ID0gY2VsbFhbMV07XG4gICAgdmFyIGggPSBjZWxsWFswXTtcbiAgICBpZiAoZihoLCBpKSkge1xuICAgICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgICAgaCxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIF9jZWxsWCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0RmlsdGVyTWFwKGYsIF9jZWxsWCwgX3ByZWMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciB0ID0gY2VsbFhbMV07XG4gICAgdmFyIGggPSBmKGNlbGxYWzBdKTtcbiAgICBpZiAoaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgbmV4dCA9IC8qIDo6ICovW1xuICAgICAgICBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGgpLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF07XG4gICAgICBwcmVjWzFdID0gbmV4dDtcbiAgICAgIF9wcmVjID0gbmV4dDtcbiAgICAgIF9jZWxsWCA9IHQ7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIF9jZWxsWCA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZW1vdmVBc3NvY0F1eFdpdGhNYXAoX2NlbGxYLCB4LCBfcHJlYywgZikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdCA9IGNlbGxYWzFdO1xuICAgIHZhciBoID0gY2VsbFhbMF07XG4gICAgaWYgKGYoaFswXSwgeCkpIHtcbiAgICAgIHByZWNbMV0gPSB0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBoLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gbmV4dDtcbiAgICBfcHJlYyA9IG5leHQ7XG4gICAgX2NlbGxYID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNldEFzc29jQXV4V2l0aE1hcChfY2VsbFgsIHgsIGssIF9wcmVjLCBlcSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdCA9IGNlbGxYWzFdO1xuICAgIHZhciBoID0gY2VsbFhbMF07XG4gICAgaWYgKGVxKGhbMF0sIHgpKSB7XG4gICAgICBwcmVjWzFdID0gLyogOjogKi9bXG4gICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgIHgsXG4gICAgICAgICAga1xuICAgICAgICBdLFxuICAgICAgICB0XG4gICAgICBdO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBoLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gbmV4dDtcbiAgICBfcHJlYyA9IG5leHQ7XG4gICAgX2NlbGxYID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvcHlBdXhXaXRoTWFwKF9jZWxsWCwgX3ByZWMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwcmVjID0gX3ByZWM7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBmKGNlbGxYWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgX3ByZWMgPSBuZXh0O1xuICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gemlwQXV4KF9jZWxsWCwgX2NlbGxZLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbFkgPSBfY2VsbFk7XG4gICAgdmFyIGNlbGxYID0gX2NlbGxYO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmICghY2VsbFkpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgY2VsbFhbMF0sXG4gICAgICAgIGNlbGxZWzBdXG4gICAgICBdLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gbmV4dDtcbiAgICBfcHJlYyA9IG5leHQ7XG4gICAgX2NlbGxZID0gY2VsbFlbMV07XG4gICAgX2NlbGxYID0gY2VsbFhbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb3B5QXV4V2l0aE1hcDIoZiwgX2NlbGxYLCBfY2VsbFksIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWSA9IF9jZWxsWTtcbiAgICB2YXIgY2VsbFggPSBfY2VsbFg7XG4gICAgaWYgKCFjZWxsWCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKCFjZWxsWSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIG5leHQgPSAvKiA6OiAqL1tcbiAgICAgIGYoY2VsbFhbMF0sIGNlbGxZWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgX3ByZWMgPSBuZXh0O1xuICAgIF9jZWxsWSA9IGNlbGxZWzFdO1xuICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weUF1eFdpdGhNYXBJKGYsIF9pLCBfY2VsbFgsIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsWCA9IF9jZWxsWDtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICghY2VsbFgpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gLyogOjogKi9bXG4gICAgICBmKGksIGNlbGxYWzBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgcHJlY1sxXSA9IG5leHQ7XG4gICAgX3ByZWMgPSBuZXh0O1xuICAgIF9jZWxsWCA9IGNlbGxYWzFdO1xuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZUF1eChfbiwgX2NlbGwsIF9wcmVjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIHZhciBjZWxsID0gX2NlbGw7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghY2VsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgY2VsbCQxID0gLyogOjogKi9bXG4gICAgICBjZWxsWzBdLFxuICAgICAgLyogW10gKi8wXG4gICAgXTtcbiAgICBwcmVjWzFdID0gY2VsbCQxO1xuICAgIF9wcmVjID0gY2VsbCQxO1xuICAgIF9jZWxsID0gY2VsbFsxXTtcbiAgICBfbiA9IG4gLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXRBdXgoX24sIF9jZWxsLCBfcHJlYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHByZWMgPSBfcHJlYztcbiAgICB2YXIgY2VsbCA9IF9jZWxsO1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IDApIHtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgICBpZiAoIWNlbGwpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHZhciBjZWxsJDEgPSAvKiA6OiAqL1tcbiAgICAgIGNlbGxbMF0sXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIHByZWNbMV0gPSBjZWxsJDE7XG4gICAgX3ByZWMgPSBjZWxsJDE7XG4gICAgX2NlbGwgPSBjZWxsWzFdO1xuICAgIF9uID0gbiAtIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZShsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBpZiAobiA9PT0gMCkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgaWYgKCFsc3QpIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgbHN0WzBdLFxuICAgIC8qIFtdICovMFxuICBdO1xuICB2YXIgaGFzID0gdGFrZUF1eChuIC0gMSB8IDAsIGxzdFsxXSwgY2VsbCk7XG4gIGlmIChoYXMpIHtcbiAgICByZXR1cm4gY2VsbDtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZHJvcChsc3QsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICB2YXIgX2wgPSBsc3Q7XG4gICAgdmFyIF9uID0gbjtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgbiQxID0gX247XG4gICAgICB2YXIgbCA9IF9sO1xuICAgICAgaWYgKG4kMSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH1cbiAgICAgIGlmICghbCkge1xuICAgICAgICByZXR1cm4gO1xuICAgICAgfVxuICAgICAgX24gPSBuJDEgLSAxIHwgMDtcbiAgICAgIF9sID0gbFsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXQobHN0LCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgaWYgKG4gPT09IDApIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAvKiBbXSAqLzAsXG4gICAgICAgICAgICBsc3RcbiAgICAgICAgICBdO1xuICB9XG4gIGlmICghbHN0KSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIGxzdFswXSxcbiAgICAvKiBbXSAqLzBcbiAgXTtcbiAgdmFyIHJlc3QgPSBzcGxpdEF0QXV4KG4gLSAxIHwgMCwgbHN0WzFdLCBjZWxsKTtcbiAgaWYgKHJlc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGNlbGwsXG4gICAgICAgICAgICByZXN0XG4gICAgICAgICAgXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gY29uY2F0KHhzLCB5cykge1xuICBpZiAoIXhzKSB7XG4gICAgcmV0dXJuIHlzO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgeHNbMF0sXG4gICAgLyogW10gKi8wXG4gIF07XG4gIGNvcHlBdXhDb250KHhzWzFdLCBjZWxsKVsxXSA9IHlzO1xuICByZXR1cm4gY2VsbDtcbn1cblxuZnVuY3Rpb24gbWFwVSh4cywgZikge1xuICBpZiAoIXhzKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIGYoeHNbMF0pLFxuICAgIC8qIFtdICovMFxuICBdO1xuICBjb3B5QXV4V2l0aE1hcCh4c1sxXSwgY2VsbCwgZik7XG4gIHJldHVybiBjZWxsO1xufVxuXG5mdW5jdGlvbiBtYXAoeHMsIGYpIHtcbiAgcmV0dXJuIG1hcFUoeHMsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHppcEJ5VShsMSwgbDIsIGYpIHtcbiAgaWYgKCFsMSkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgaWYgKCFsMikge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdmFyIGNlbGwgPSAvKiA6OiAqL1tcbiAgICBmKGwxWzBdLCBsMlswXSksXG4gICAgLyogW10gKi8wXG4gIF07XG4gIGNvcHlBdXhXaXRoTWFwMihmLCBsMVsxXSwgbDJbMV0sIGNlbGwpO1xuICByZXR1cm4gY2VsbDtcbn1cblxuZnVuY3Rpb24gemlwQnkobDEsIGwyLCBmKSB7XG4gIHJldHVybiB6aXBCeVUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXhVKHhzLCBmKSB7XG4gIGlmICgheHMpIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgZigwLCB4c1swXSksXG4gICAgLyogW10gKi8wXG4gIF07XG4gIGNvcHlBdXhXaXRoTWFwSShmLCAxLCB4c1sxXSwgY2VsbCk7XG4gIHJldHVybiBjZWxsO1xufVxuXG5mdW5jdGlvbiBtYXBXaXRoSW5kZXgoeHMsIGYpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleFUoeHMsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VCeVUobiwgZikge1xuICBpZiAobiA8PSAwKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgaGVhZFggPSAvKiA6OiAqL1tcbiAgICBmKDApLFxuICAgIC8qIFtdICovMFxuICBdO1xuICB2YXIgY3VyID0gaGVhZFg7XG4gIHZhciBpID0gMTtcbiAgd2hpbGUoaSA8IG4pIHtcbiAgICB2YXIgdiA9IC8qIDo6ICovW1xuICAgICAgZihpKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF07XG4gICAgY3VyWzFdID0gdjtcbiAgICBjdXIgPSB2O1xuICAgIGkgPSBpICsgMSB8IDA7XG4gIH07XG4gIHJldHVybiBoZWFkWDtcbn1cblxuZnVuY3Rpb24gbWFrZUJ5KG4sIGYpIHtcbiAgcmV0dXJuIG1ha2VCeVUobiwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gbWFrZShuLCB2KSB7XG4gIGlmIChuIDw9IDApIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBoZWFkWCA9IC8qIDo6ICovW1xuICAgIHYsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciBjdXIgPSBoZWFkWDtcbiAgdmFyIGkgPSAxO1xuICB3aGlsZShpIDwgbikge1xuICAgIHZhciB2JDEgPSAvKiA6OiAqL1tcbiAgICAgIHYsXG4gICAgICAvKiBbXSAqLzBcbiAgICBdO1xuICAgIGN1clsxXSA9IHYkMTtcbiAgICBjdXIgPSB2JDE7XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgcmV0dXJuIGhlYWRYO1xufVxuXG5mdW5jdGlvbiBsZW5ndGgoeHMpIHtcbiAgdmFyIF94ID0geHM7XG4gIHZhciBfYWNjID0gMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIHZhciB4ID0gX3g7XG4gICAgaWYgKCF4KSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBfYWNjID0gYWNjICsgMSB8IDA7XG4gICAgX3ggPSB4WzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbEF1eChhcnIsIF9pLCBfeCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHggPSBfeDtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICgheCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgYXJyW2ldID0geFswXTtcbiAgICBfeCA9IHhbMV07XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoYSkge1xuICB2YXIgX2kgPSBhLmxlbmd0aCAtIDEgfCAwO1xuICB2YXIgX3JlcyA9IC8qIFtdICovMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciByZXMgPSBfcmVzO1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfcmVzID0gLyogOjogKi9bXG4gICAgICBhW2ldLFxuICAgICAgcmVzXG4gICAgXTtcbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoeCkge1xuICB2YXIgbGVuID0gbGVuZ3RoKHgpO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGxlbik7XG4gIGZpbGxBdXgoYXJyLCAwLCB4KTtcbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gc2h1ZmZsZSh4cykge1xuICB2YXIgdiA9IHRvQXJyYXkoeHMpO1xuICBCZWx0X0FycmF5LnNodWZmbGVJblBsYWNlKHYpO1xuICByZXR1cm4gZnJvbUFycmF5KHYpO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlQ29uY2F0KF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiBsMjtcbiAgICB9XG4gICAgX2wyID0gLyogOjogKi9bXG4gICAgICBsMVswXSxcbiAgICAgIGwyXG4gICAgXTtcbiAgICBfbDEgPSBsMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJldmVyc2UobCkge1xuICByZXR1cm4gcmV2ZXJzZUNvbmNhdChsLCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuQXV4KF9wcmVjLCBfeHMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICB2YXIgcHJlYyA9IF9wcmVjO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHByZWNbMV0gPSAvKiBbXSAqLzA7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBfcHJlYyA9IGNvcHlBdXhDb250KHhzWzBdLCBwcmVjKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4oX3hzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0geHNbMF07XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgZmxhdHRlbkF1eChjb3B5QXV4Q29udChtYXRjaFsxXSwgY2VsbCksIHhzWzFdKTtcbiAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbmNhdE1hbnkoeHMpIHtcbiAgdmFyIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKGxlbiA9PT0gMSkge1xuICAgIHJldHVybiB4c1swXTtcbiAgfVxuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgbGVuJDEgPSB4cy5sZW5ndGg7XG4gIHZhciB2ID0geHNbbGVuJDEgLSAxIHwgMF07XG4gIGZvcih2YXIgaSA9IGxlbiQxIC0gMiB8IDA7IGkgPj0gMDsgLS1pKXtcbiAgICB2ID0gY29uY2F0KHhzW2ldLCB2KTtcbiAgfVxuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZVUobCwgZikge1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfeHMgPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF94cyA9IHhzWzFdO1xuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICBmKHhzWzBdKSxcbiAgICAgIGFjY3VcbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZShsLCBmKSB7XG4gIHJldHVybiBtYXBSZXZlcnNlVShsLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoVShfeHMsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBmKHhzWzBdKTtcbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hVKHhzLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoV2l0aEluZGV4VShsLCBmKSB7XG4gIHZhciBfeHMgPSBsO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgZihpLCB4c1swXSk7XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgX3hzID0geHNbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoV2l0aEluZGV4KGwsIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hXaXRoSW5kZXhVKGwsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVUoX2wsIF9hY2N1LCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBsID0gX2w7XG4gICAgaWYgKCFsKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgX2FjY3UgPSBmKGFjY3UsIGxbMF0pO1xuICAgIF9sID0gbFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShsLCBhY2N1LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKGwsIGFjY3UsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2VVbnNhZmVVKGwsIGFjY3UsIGYpIHtcbiAgaWYgKGwpIHtcbiAgICByZXR1cm4gZihyZWR1Y2VSZXZlcnNlVW5zYWZlVShsWzFdLCBhY2N1LCBmKSwgbFswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY3U7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZVUobCwgYWNjLCBmKSB7XG4gIHZhciBsZW4gPSBsZW5ndGgobCk7XG4gIGlmIChsZW4gPCAxMDAwKSB7XG4gICAgcmV0dXJuIHJlZHVjZVJldmVyc2VVbnNhZmVVKGwsIGFjYywgZik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfQXJyYXkucmVkdWNlUmV2ZXJzZVUodG9BcnJheShsKSwgYWNjLCBmKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2VSZXZlcnNlKGwsIGFjY3UsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2VVKGwsIGFjY3UsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVdpdGhJbmRleFUobCwgYWNjLCBmKSB7XG4gIHZhciBfbCA9IGw7XG4gIHZhciBfYWNjID0gYWNjO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICB2YXIgYWNjJDEgPSBfYWNjO1xuICAgIHZhciBsJDEgPSBfbDtcbiAgICBpZiAoIWwkMSkge1xuICAgICAgcmV0dXJuIGFjYyQxO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBfYWNjID0gZihhY2MkMSwgbCQxWzBdLCBpKTtcbiAgICBfbCA9IGwkMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVdpdGhJbmRleChsLCBhY2MsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVdpdGhJbmRleFUobCwgYWNjLCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBSZXZlcnNlMlUobDEsIGwyLCBmKSB7XG4gIHZhciBfbDEgPSBsMTtcbiAgdmFyIF9sMiA9IGwyO1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBsMiQxID0gX2wyO1xuICAgIHZhciBsMSQxID0gX2wxO1xuICAgIGlmICghbDEkMSkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIGlmICghbDIkMSkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICBmKGwxJDFbMF0sIGwyJDFbMF0pLFxuICAgICAgYWNjdVxuICAgIF07XG4gICAgX2wyID0gbDIkMVsxXTtcbiAgICBfbDEgPSBsMSQxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwUmV2ZXJzZTIobDEsIGwyLCBmKSB7XG4gIHJldHVybiBtYXBSZXZlcnNlMlUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoMlUoX2wxLCBfbDIsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKCFsMSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgZihsMVswXSwgbDJbMF0pO1xuICAgIF9sMiA9IGwyWzFdO1xuICAgIF9sMSA9IGwxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaDIobDEsIGwyLCBmKSB7XG4gIHJldHVybiBmb3JFYWNoMlUobDEsIGwyLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UyVShfbDEsIF9sMiwgX2FjY3UsIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAoIWwxKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9hY2N1ID0gZihhY2N1LCBsMVswXSwgbDJbMF0pO1xuICAgIF9sMiA9IGwyWzFdO1xuICAgIF9sMSA9IGwxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlMihsMSwgbDIsIGFjYywgZikge1xuICByZXR1cm4gcmVkdWNlMlUobDEsIGwyLCBhY2MsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVJldmVyc2UyVW5zYWZlVShsMSwgbDIsIGFjY3UsIGYpIHtcbiAgaWYgKGwxICYmIGwyKSB7XG4gICAgcmV0dXJuIGYocmVkdWNlUmV2ZXJzZTJVbnNhZmVVKGwxWzFdLCBsMlsxXSwgYWNjdSwgZiksIGwxWzBdLCBsMlswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFjY3U7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTJVKGwxLCBsMiwgYWNjLCBmKSB7XG4gIHZhciBsZW4gPSBsZW5ndGgobDEpO1xuICBpZiAobGVuIDwgMTAwMCkge1xuICAgIHJldHVybiByZWR1Y2VSZXZlcnNlMlVuc2FmZVUobDEsIGwyLCBhY2MsIGYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBCZWx0X0FycmF5LnJlZHVjZVJldmVyc2UyVSh0b0FycmF5KGwxKSwgdG9BcnJheShsMiksIGFjYywgZik7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVkdWNlUmV2ZXJzZTIobDEsIGwyLCBhY2MsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVJldmVyc2UyVShsMSwgbDIsIGFjYywgQ3VycnkuX18zKGYpKTtcbn1cblxuZnVuY3Rpb24gZXZlcnlVKF94cywgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXAoeHNbMF0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF94cyA9IHhzWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlcnkoeHMsIHApIHtcbiAgcmV0dXJuIGV2ZXJ5VSh4cywgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gc29tZVUoX3hzLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocCh4c1swXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUoeHMsIHApIHtcbiAgcmV0dXJuIHNvbWVVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBldmVyeTJVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwKGwxWzBdLCBsMlswXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBldmVyeTIobDEsIGwyLCBwKSB7XG4gIHJldHVybiBldmVyeTJVKGwxLCBsMiwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24gY21wQnlMZW5ndGgoX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKCFsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbXBVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHZhciBjID0gcChsMVswXSwgbDJbMF0pO1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbXAobDEsIGwyLCBmKSB7XG4gIHJldHVybiBjbXBVKGwxLCBsMiwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gZXFVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXAobDFbMF0sIGwyWzBdKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBfbDIgPSBsMlsxXTtcbiAgICBfbDEgPSBsMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVxKGwxLCBsMiwgZikge1xuICByZXR1cm4gZXFVKGwxLCBsMiwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gc29tZTJVKF9sMSwgX2wyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAocChsMVswXSwgbDJbMF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX2wyID0gbDJbMV07XG4gICAgX2wxID0gbDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzb21lMihsMSwgbDIsIHApIHtcbiAgcmV0dXJuIHNvbWUyVShsMSwgbDIsIEN1cnJ5Ll9fMihwKSk7XG59XG5cbmZ1bmN0aW9uIGhhc1UoX3hzLCB4LCBlcSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHhzID0gX3hzO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGVxKHhzWzBdLCB4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF94cyA9IHhzWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzKHhzLCB4LCBlcSkge1xuICByZXR1cm4gaGFzVSh4cywgeCwgQ3VycnkuX18yKGVxKSk7XG59XG5cbmZ1bmN0aW9uIGdldEFzc29jVShfeHMsIHgsIGVxKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0geHNbMF07XG4gICAgaWYgKGVxKG1hdGNoWzBdLCB4KSkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUobWF0Y2hbMV0pO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEFzc29jKHhzLCB4LCBlcSkge1xuICByZXR1cm4gZ2V0QXNzb2NVKHhzLCB4LCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gaGFzQXNzb2NVKF94cywgeCwgZXEpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChlcSh4c1swXVswXSwgeCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhc0Fzc29jKHhzLCB4LCBlcSkge1xuICByZXR1cm4gaGFzQXNzb2NVKHhzLCB4LCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2NVKHhzLCB4LCBlcSkge1xuICBpZiAoIXhzKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgbCA9IHhzWzFdO1xuICB2YXIgcGFpciA9IHhzWzBdO1xuICBpZiAoZXEocGFpclswXSwgeCkpIHtcbiAgICByZXR1cm4gbDtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIHBhaXIsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciByZW1vdmVkID0gcmVtb3ZlQXNzb2NBdXhXaXRoTWFwKGwsIHgsIGNlbGwsIGVxKTtcbiAgaWYgKHJlbW92ZWQpIHtcbiAgICByZXR1cm4gY2VsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXNzb2MoeHMsIHgsIGVxKSB7XG4gIHJldHVybiByZW1vdmVBc3NvY1UoeHMsIHgsIEN1cnJ5Ll9fMihlcSkpO1xufVxuXG5mdW5jdGlvbiBzZXRBc3NvY1UoeHMsIHgsIGssIGVxKSB7XG4gIGlmICgheHMpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAga1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIGwgPSB4c1sxXTtcbiAgdmFyIHBhaXIgPSB4c1swXTtcbiAgaWYgKGVxKHBhaXJbMF0sIHgpKSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgIGtcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBsXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgY2VsbCA9IC8qIDo6ICovW1xuICAgIHBhaXIsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciByZXBsYWNlZCA9IHNldEFzc29jQXV4V2l0aE1hcChsLCB4LCBrLCBjZWxsLCBlcSk7XG4gIGlmIChyZXBsYWNlZCkge1xuICAgIHJldHVybiBjZWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICBrXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgeHNcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEFzc29jKHhzLCB4LCBrLCBlcSkge1xuICByZXR1cm4gc2V0QXNzb2NVKHhzLCB4LCBrLCBDdXJyeS5fXzIoZXEpKTtcbn1cblxuZnVuY3Rpb24gc29ydFUoeHMsIGNtcCkge1xuICB2YXIgYXJyID0gdG9BcnJheSh4cyk7XG4gIEJlbHRfU29ydEFycmF5LnN0YWJsZVNvcnRJblBsYWNlQnlVKGFyciwgY21wKTtcbiAgcmV0dXJuIGZyb21BcnJheShhcnIpO1xufVxuXG5mdW5jdGlvbiBzb3J0KHhzLCBjbXApIHtcbiAgcmV0dXJuIHNvcnRVKHhzLCBDdXJyeS5fXzIoY21wKSk7XG59XG5cbmZ1bmN0aW9uIGdldEJ5VShfeHMsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgeCA9IHhzWzBdO1xuICAgIGlmIChwKHgpKSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgICB9XG4gICAgX3hzID0geHNbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRCeSh4cywgcCkge1xuICByZXR1cm4gZ2V0QnlVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBrZWVwVShfeHMsIHApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gLyogW10gKi8wO1xuICAgIH1cbiAgICB2YXIgdCA9IHhzWzFdO1xuICAgIHZhciBoID0geHNbMF07XG4gICAgaWYgKHAoaCkpIHtcbiAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgIGgsXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIGNvcHlBdXhXaXRGaWx0ZXIocCwgdCwgY2VsbCk7XG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gICAgX3hzID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGtlZXAoeHMsIHApIHtcbiAgcmV0dXJuIGtlZXBVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4VSh4cywgcCkge1xuICB2YXIgX3hzID0geHM7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciB4cyQxID0gX3hzO1xuICAgIGlmICgheHMkMSkge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gICAgdmFyIHQgPSB4cyQxWzFdO1xuICAgIHZhciBoID0geHMkMVswXTtcbiAgICBpZiAocChoLCBpKSkge1xuICAgICAgdmFyIGNlbGwgPSAvKiA6OiAqL1tcbiAgICAgICAgaCxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdO1xuICAgICAgY29weUF1eFdpdGhGaWx0ZXJJbmRleChwLCB0LCBjZWxsLCBpICsgMSB8IDApO1xuICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIF94cyA9IHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBrZWVwV2l0aEluZGV4KHhzLCBwKSB7XG4gIHJldHVybiBrZWVwV2l0aEluZGV4VSh4cywgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24ga2VlcE1hcFUoX3hzLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gICAgdmFyIHQgPSB4c1sxXTtcbiAgICB2YXIgaCA9IHAoeHNbMF0pO1xuICAgIGlmIChoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgICAgIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oaCksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXTtcbiAgICAgIGNvcHlBdXhXaXRGaWx0ZXJNYXAocCwgdCwgY2VsbCk7XG4gICAgICByZXR1cm4gY2VsbDtcbiAgICB9XG4gICAgX3hzID0gdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGtlZXBNYXAoeHMsIHApIHtcbiAgcmV0dXJuIGtlZXBNYXBVKHhzLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25VKGwsIHApIHtcbiAgaWYgKCFsKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogW10gKi8wLFxuICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgaCA9IGxbMF07XG4gIHZhciBuZXh0WCA9IC8qIDo6ICovW1xuICAgIGgsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciBuZXh0WSA9IC8qIDo6ICovW1xuICAgIGgsXG4gICAgLyogW10gKi8wXG4gIF07XG4gIHZhciBiID0gcChoKTtcbiAgcGFydGl0aW9uQXV4KHAsIGxbMV0sIG5leHRYLCBuZXh0WSk7XG4gIGlmIChiKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmV4dFgsXG4gICAgICAgICAgICBuZXh0WVsxXVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmV4dFhbMV0sXG4gICAgICAgICAgICBuZXh0WVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGwsIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUobCwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gdW56aXAoeHMpIHtcbiAgaWYgKCF4cykge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIFtdICovMCxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIG1hdGNoID0geHNbMF07XG4gIHZhciBjZWxsWCA9IC8qIDo6ICovW1xuICAgIG1hdGNoWzBdLFxuICAgIC8qIFtdICovMFxuICBdO1xuICB2YXIgY2VsbFkgPSAvKiA6OiAqL1tcbiAgICBtYXRjaFsxXSxcbiAgICAvKiBbXSAqLzBcbiAgXTtcbiAgc3BsaXRBdXgoeHNbMV0sIGNlbGxYLCBjZWxsWSk7XG4gIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICBjZWxsWCxcbiAgICAgICAgICBjZWxsWVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB6aXAobDEsIGwyKSB7XG4gIGlmICghbDEpIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIGlmICghbDIpIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBjZWxsID0gLyogOjogKi9bXG4gICAgLyogdHVwbGUgKi9bXG4gICAgICBsMVswXSxcbiAgICAgIGwyWzBdXG4gICAgXSxcbiAgICAvKiBbXSAqLzBcbiAgXTtcbiAgemlwQXV4KGwxWzFdLCBsMlsxXSwgY2VsbCk7XG4gIHJldHVybiBjZWxsO1xufVxuXG52YXIgc2l6ZSA9IGxlbmd0aDtcblxudmFyIGZpbHRlciA9IGtlZXA7XG5cbnZhciBmaWx0ZXJXaXRoSW5kZXggPSBrZWVwV2l0aEluZGV4O1xuXG5leHBvcnQge1xuICBsZW5ndGggLFxuICBzaXplICxcbiAgaGVhZCAsXG4gIGhlYWRFeG4gLFxuICB0YWlsICxcbiAgdGFpbEV4biAsXG4gIGFkZCAsXG4gIGdldCAsXG4gIGdldEV4biAsXG4gIG1ha2UgLFxuICBtYWtlQnlVICxcbiAgbWFrZUJ5ICxcbiAgc2h1ZmZsZSAsXG4gIGRyb3AgLFxuICB0YWtlICxcbiAgc3BsaXRBdCAsXG4gIGNvbmNhdCAsXG4gIGNvbmNhdE1hbnkgLFxuICByZXZlcnNlQ29uY2F0ICxcbiAgZmxhdHRlbiAsXG4gIG1hcFUgLFxuICBtYXAgLFxuICB6aXAgLFxuICB6aXBCeVUgLFxuICB6aXBCeSAsXG4gIG1hcFdpdGhJbmRleFUgLFxuICBtYXBXaXRoSW5kZXggLFxuICBmcm9tQXJyYXkgLFxuICB0b0FycmF5ICxcbiAgcmV2ZXJzZSAsXG4gIG1hcFJldmVyc2VVICxcbiAgbWFwUmV2ZXJzZSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIGZvckVhY2hXaXRoSW5kZXhVICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICByZWR1Y2VXaXRoSW5kZXhVICxcbiAgcmVkdWNlV2l0aEluZGV4ICxcbiAgcmVkdWNlUmV2ZXJzZVUgLFxuICByZWR1Y2VSZXZlcnNlICxcbiAgbWFwUmV2ZXJzZTJVICxcbiAgbWFwUmV2ZXJzZTIgLFxuICBmb3JFYWNoMlUgLFxuICBmb3JFYWNoMiAsXG4gIHJlZHVjZTJVICxcbiAgcmVkdWNlMiAsXG4gIHJlZHVjZVJldmVyc2UyVSAsXG4gIHJlZHVjZVJldmVyc2UyICxcbiAgZXZlcnlVICxcbiAgZXZlcnkgLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBldmVyeTJVICxcbiAgZXZlcnkyICxcbiAgc29tZTJVICxcbiAgc29tZTIgLFxuICBjbXBCeUxlbmd0aCAsXG4gIGNtcFUgLFxuICBjbXAgLFxuICBlcVUgLFxuICBlcSAsXG4gIGhhc1UgLFxuICBoYXMgLFxuICBnZXRCeVUgLFxuICBnZXRCeSAsXG4gIGtlZXBVICxcbiAga2VlcCAsXG4gIGZpbHRlciAsXG4gIGtlZXBXaXRoSW5kZXhVICxcbiAga2VlcFdpdGhJbmRleCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBNYXBVICxcbiAga2VlcE1hcCAsXG4gIHBhcnRpdGlvblUgLFxuICBwYXJ0aXRpb24gLFxuICB1bnppcCAsXG4gIGdldEFzc29jVSAsXG4gIGdldEFzc29jICxcbiAgaGFzQXNzb2NVICxcbiAgaGFzQXNzb2MgLFxuICByZW1vdmVBc3NvY1UgLFxuICByZW1vdmVBc3NvYyAsXG4gIHNldEFzc29jVSAsXG4gIHNldEFzc29jICxcbiAgc29ydFUgLFxuICBzb3J0ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBmb3JFYWNoVShvcHQsIGYpIHtcbiAgaWYgKG9wdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGYoQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihvcHQpKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChvcHQsIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hVKG9wdCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhuKHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcImdldEV4blwiKTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aERlZmF1bHRVKG9wdCwgJCRkZWZhdWx0LCBmKSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBXaXRoRGVmYXVsdChvcHQsICQkZGVmYXVsdCwgZikge1xuICByZXR1cm4gbWFwV2l0aERlZmF1bHRVKG9wdCwgJCRkZWZhdWx0LCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiBtYXBVKG9wdCwgZikge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KSkpO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtYXAob3B0LCBmKSB7XG4gIHJldHVybiBtYXBVKG9wdCwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gZmxhdE1hcFUob3B0LCBmKSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ob3B0KSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGZsYXRNYXAob3B0LCBmKSB7XG4gIHJldHVybiBmbGF0TWFwVShvcHQsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KG9wdCwgJCRkZWZhdWx0KSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG9wdCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1NvbWUocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGlzTm9uZSh4KSB7XG4gIHJldHVybiB4ID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGVxVShhLCBiLCBmKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZihDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYiA9PT0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxKGEsIGIsIGYpIHtcbiAgcmV0dXJuIGVxVShhLCBiLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBjbXBVKGEsIGIsIGYpIHtcbiAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNtcChhLCBiLCBmKSB7XG4gIHJldHVybiBjbXBVKGEsIGIsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmV4cG9ydCB7XG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIGdldEV4biAsXG4gIG1hcFdpdGhEZWZhdWx0VSAsXG4gIG1hcFdpdGhEZWZhdWx0ICxcbiAgbWFwVSAsXG4gIG1hcCAsXG4gIGZsYXRNYXBVICxcbiAgZmxhdE1hcCAsXG4gIGdldFdpdGhEZWZhdWx0ICxcbiAgaXNTb21lICxcbiAgaXNOb25lICxcbiAgZXFVICxcbiAgZXEgLFxuICBjbXBVICxcbiAgY21wICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiLi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9hcnJheSBmcm9tIFwiLi9jYW1sX2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9leGNlcHRpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2pzX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9qc19leGNlcHRpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG52YXIgbWFrZV9mbG9hdCA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX2Zsb2F0X3ZlY3Q7XG5cbnZhciBGbG9hdGFycmF5ID0geyB9O1xuXG5mdW5jdGlvbiBpbml0KGwsIGYpIHtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGwgPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJBcnJheS5pbml0XCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgcmVzID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChsLCBDdXJyeS5fMShmLCAwKSk7XG4gIGZvcih2YXIgaSA9IDE7IGkgPCBsOyArK2kpe1xuICAgIHJlc1tpXSA9IEN1cnJ5Ll8xKGYsIGkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIG1ha2VfbWF0cml4KHN4LCBzeSwgaW5pdCkge1xuICB2YXIgcmVzID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChzeCwgW10pO1xuICBmb3IodmFyIHggPSAwOyB4IDwgc3g7ICsreCl7XG4gICAgcmVzW3hdID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChzeSwgaW5pdCk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gY29weShhKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc3ViKGEsIDAsIGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGVuZChhMSwgYTIpIHtcbiAgdmFyIGwxID0gYTEubGVuZ3RoO1xuICBpZiAobDEgPT09IDApIHtcbiAgICByZXR1cm4gY29weShhMik7XG4gIH0gZWxzZSBpZiAoYTIubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zdWIoYTEsIDAsIGwxKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYTEuY29uY2F0KGEyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWIoYSwgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAoYS5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkuc3ViXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3N1YihhLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGZpbGwoYSwgb2ZzLCBsZW4sIHYpIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAoYS5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkuZmlsbFwiXG4gICAgICAgIF07XG4gIH1cbiAgZm9yKHZhciBpID0gb2ZzICxpX2ZpbmlzaCA9IG9mcyArIGxlbiB8IDA7IGkgPCBpX2ZpbmlzaDsgKytpKXtcbiAgICBhW2ldID0gdjtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbikge1xuICBpZiAobGVuIDwgMCB8fCBvZnMxIDwgMCB8fCBvZnMxID4gKGExLmxlbmd0aCAtIGxlbiB8IDApIHx8IG9mczIgPCAwIHx8IG9mczIgPiAoYTIubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkFycmF5LmJsaXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfYmxpdChhMSwgb2ZzMSwgYTIsIG9mczIsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzEoZiwgYVtpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGl0ZXIyKGYsIGEsIGIpIHtcbiAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkuaXRlcjI6IGFycmF5cyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoXCJcbiAgICAgICAgXTtcbiAgfVxuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgYVtpXSwgYltpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1hcChmLCBhKSB7XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChsLCBDdXJyeS5fMShmLCBhWzBdKSk7XG4gIGZvcih2YXIgaSA9IDE7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBDdXJyeS5fMShmLCBhW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFwMihmLCBhLCBiKSB7XG4gIHZhciBsYSA9IGEubGVuZ3RoO1xuICB2YXIgbGIgPSBiLmxlbmd0aDtcbiAgaWYgKGxhICE9PSBsYikge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQXJyYXkubWFwMjogYXJyYXlzIG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGhcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChsYSA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgciA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobGEsIEN1cnJ5Ll8yKGYsIGFbMF0sIGJbMF0pKTtcbiAgZm9yKHZhciBpID0gMTsgaSA8IGxhOyArK2kpe1xuICAgIHJbaV0gPSBDdXJyeS5fMihmLCBhW2ldLCBiW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgaSwgYVtpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1hcGkoZiwgYSkge1xuICB2YXIgbCA9IGEubGVuZ3RoO1xuICBpZiAobCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgciA9IENhbWxfYXJyYXkuY2FtbF9tYWtlX3ZlY3QobCwgQ3VycnkuXzIoZiwgMCwgYVswXSkpO1xuICBmb3IodmFyIGkgPSAxOyBpIDwgbDsgKytpKXtcbiAgICByW2ldID0gQ3VycnkuXzIoZiwgaSwgYVtpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHRvX2xpc3QoYSkge1xuICB2YXIgX2kgPSBhLmxlbmd0aCAtIDEgfCAwO1xuICB2YXIgX3JlcyA9IC8qIFtdICovMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciByZXMgPSBfcmVzO1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBfcmVzID0gLyogOjogKi9bXG4gICAgICBhW2ldLFxuICAgICAgcmVzXG4gICAgXTtcbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGxpc3RfbGVuZ3RoKF9hY2N1LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBhY2N1O1xuICAgIH1cbiAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICBfYWNjdSA9IGFjY3UgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9mX2xpc3QobCkge1xuICBpZiAoIWwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIGEgPSBDYW1sX2FycmF5LmNhbWxfbWFrZV92ZWN0KGxpc3RfbGVuZ3RoKDAsIGwpLCBsWzBdKTtcbiAgdmFyIF9pID0gMTtcbiAgdmFyIF9wYXJhbSA9IGxbMV07XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgYVtpXSA9IHBhcmFtWzBdO1xuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9sZWZ0KGYsIHgsIGEpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgciA9IEN1cnJ5Ll8yKGYsIHIsIGFbaV0pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGEsIHgpIHtcbiAgdmFyIHIgPSB4O1xuICBmb3IodmFyIGkgPSBhLmxlbmd0aCAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgciA9IEN1cnJ5Ll8yKGYsIGFbaV0sIHIpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBleGlzdHMocCwgYSkge1xuICB2YXIgbiA9IGEubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQ3VycnkuXzEocCwgYVtpXSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvcl9hbGwocCwgYSkge1xuICB2YXIgbiA9IGEubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzEocCwgYVtpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZW0oeCwgYSkge1xuICB2YXIgbiA9IGEubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA9PT0gbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhW2ldLCB4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtcSh4LCBhKSB7XG4gIHZhciBuID0gYS5sZW5ndGg7XG4gIHZhciBfaSA9IDA7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID09PSBuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh4ID09PSBhW2ldKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG52YXIgQm90dG9tID0gQ2FtbF9leGNlcHRpb25zLmNyZWF0ZShcIkFycmF5LkJvdHRvbVwiKTtcblxuZnVuY3Rpb24gc29ydChjbXAsIGEpIHtcbiAgdmFyIG1heHNvbiA9IGZ1bmN0aW9uIChsLCBpKSB7XG4gICAgdmFyIGkzMSA9ICgoaSArIGkgfCAwKSArIGkgfCAwKSArIDEgfCAwO1xuICAgIHZhciB4ID0gaTMxO1xuICAgIGlmICgoaTMxICsgMiB8IDApIDwgbCkge1xuICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMzEpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGkzMSArIDEgfCAwKSkgPCAwKSB7XG4gICAgICAgIHggPSBpMzEgKyAxIHwgMDtcbiAgICAgIH1cbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgeCksIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTMxICsgMiB8IDApKSA8IDApIHtcbiAgICAgICAgeCA9IGkzMSArIDIgfCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHg7XG4gICAgfVxuICAgIGlmICgoaTMxICsgMSB8IDApIDwgbCAmJiBDdXJyeS5fMihjbXAsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTMxKSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpMzEgKyAxIHwgMCkpIDwgMCkge1xuICAgICAgcmV0dXJuIGkzMSArIDEgfCAwO1xuICAgIH1cbiAgICBpZiAoaTMxIDwgbCkge1xuICAgICAgcmV0dXJuIGkzMTtcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIEJvdHRvbSxcbiAgICAgICAgICBpXG4gICAgICAgIF07XG4gIH07XG4gIHZhciB0cmlja2xlID0gZnVuY3Rpb24gKGwsIGksIGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIF9pID0gaTtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGkkMSA9IF9pO1xuICAgICAgICB2YXIgaiA9IG1heHNvbihsLCBpJDEpO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGopLCBlKSA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgaSQxLCBlKTtcbiAgICAgICAgfVxuICAgICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGkkMSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBqKSk7XG4gICAgICAgIF9pID0gajtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKHJhd19pKXtcbiAgICAgIHZhciBpJDIgPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19pKTtcbiAgICAgIGlmIChpJDJbMF0gPT09IEJvdHRvbSkge1xuICAgICAgICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCBpJDJbMV0sIGUpO1xuICAgICAgfVxuICAgICAgdGhyb3cgaSQyO1xuICAgIH1cbiAgfTtcbiAgdmFyIGJ1YmJsZSA9IGZ1bmN0aW9uIChsLCBpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBfaSA9IGk7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBpJDEgPSBfaTtcbiAgICAgICAgdmFyIGogPSBtYXhzb24obCwgaSQxKTtcbiAgICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCBpJDEsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaikpO1xuICAgICAgICBfaSA9IGo7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH07XG4gICAgfVxuICAgIGNhdGNoIChyYXdfaSl7XG4gICAgICB2YXIgaSQyID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfaSk7XG4gICAgICBpZiAoaSQyWzBdID09PSBCb3R0b20pIHtcbiAgICAgICAgcmV0dXJuIGkkMlsxXTtcbiAgICAgIH1cbiAgICAgIHRocm93IGkkMjtcbiAgICB9XG4gIH07XG4gIHZhciB0cmlja2xldXAgPSBmdW5jdGlvbiAoX2ksIGUpIHtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgaSA9IF9pO1xuICAgICAgdmFyIGZhdGhlciA9IChpIC0gMSB8IDApIC8gMyB8IDA7XG4gICAgICBpZiAoaSA9PT0gZmF0aGVyKSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuYXNzZXJ0X2ZhaWx1cmUsXG4gICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIFwiYXJyYXkubWxcIixcbiAgICAgICAgICAgICAgICAyMzgsXG4gICAgICAgICAgICAgICAgNFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdO1xuICAgICAgfVxuICAgICAgaWYgKEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBmYXRoZXIpLCBlKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIGksIGUpO1xuICAgICAgfVxuICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCBpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIGZhdGhlcikpO1xuICAgICAgaWYgKGZhdGhlciA8PSAwKSB7XG4gICAgICAgIHJldHVybiBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIDAsIGUpO1xuICAgICAgfVxuICAgICAgX2kgPSBmYXRoZXI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGwgPSBhLmxlbmd0aDtcbiAgZm9yKHZhciBpID0gKChsICsgMSB8IDApIC8gMyB8IDApIC0gMSB8IDA7IGkgPj0gMDsgLS1pKXtcbiAgICB0cmlja2xlKGwsIGksIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaSkpO1xuICB9XG4gIGZvcih2YXIgaSQxID0gbCAtIDEgfCAwOyBpJDEgPj0gMjsgLS1pJDEpe1xuICAgIHZhciBlID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBpJDEpO1xuICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYSwgaSQxLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIDApKTtcbiAgICB0cmlja2xldXAoYnViYmxlKGkkMSwgMCksIGUpO1xuICB9XG4gIGlmIChsIDw9IDEpIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBlJDEgPSBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KGEsIDEpO1xuICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGEsIDEsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgMCkpO1xuICByZXR1cm4gQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChhLCAwLCBlJDEpO1xufVxuXG5mdW5jdGlvbiBzdGFibGVfc29ydChjbXAsIGEpIHtcbiAgdmFyIG1lcmdlID0gZnVuY3Rpb24gKHNyYzFvZnMsIHNyYzFsZW4sIHNyYzIsIHNyYzJvZnMsIHNyYzJsZW4sIGRzdCwgZHN0b2ZzKSB7XG4gICAgdmFyIHNyYzFyID0gc3JjMW9mcyArIHNyYzFsZW4gfCAwO1xuICAgIHZhciBzcmMyciA9IHNyYzJvZnMgKyBzcmMybGVuIHwgMDtcbiAgICB2YXIgX2kxID0gc3JjMW9mcztcbiAgICB2YXIgX3MxID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBzcmMxb2ZzKTtcbiAgICB2YXIgX2kyID0gc3JjMm9mcztcbiAgICB2YXIgX3MyID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChzcmMyLCBzcmMyb2ZzKTtcbiAgICB2YXIgX2QgPSBkc3RvZnM7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGQgPSBfZDtcbiAgICAgIHZhciBzMiA9IF9zMjtcbiAgICAgIHZhciBpMiA9IF9pMjtcbiAgICAgIHZhciBzMSA9IF9zMTtcbiAgICAgIHZhciBpMSA9IF9pMTtcbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIHMxLCBzMikgPD0gMCkge1xuICAgICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGRzdCwgZCwgczEpO1xuICAgICAgICB2YXIgaTEkMSA9IGkxICsgMSB8IDA7XG4gICAgICAgIGlmIChpMSQxID49IHNyYzFyKSB7XG4gICAgICAgICAgcmV0dXJuIGJsaXQoc3JjMiwgaTIsIGRzdCwgZCArIDEgfCAwLCBzcmMyciAtIGkyIHwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgX2QgPSBkICsgMSB8IDA7XG4gICAgICAgIF9zMSA9IENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoYSwgaTEkMSk7XG4gICAgICAgIF9pMSA9IGkxJDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoZHN0LCBkLCBzMik7XG4gICAgICB2YXIgaTIkMSA9IGkyICsgMSB8IDA7XG4gICAgICBpZiAoaTIkMSA+PSBzcmMycikge1xuICAgICAgICByZXR1cm4gYmxpdChhLCBpMSwgZHN0LCBkICsgMSB8IDAsIHNyYzFyIC0gaTEgfCAwKTtcbiAgICAgIH1cbiAgICAgIF9kID0gZCArIDEgfCAwO1xuICAgICAgX3MyID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChzcmMyLCBpMiQxKTtcbiAgICAgIF9pMiA9IGkyJDE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGlzb3J0dG8gPSBmdW5jdGlvbiAoc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuKSB7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICAgIHZhciBlID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCBzcmNvZnMgKyBpIHwgMCk7XG4gICAgICB2YXIgaiA9IChkc3RvZnMgKyBpIHwgMCkgLSAxIHwgMDtcbiAgICAgIHdoaWxlKGogPj0gZHN0b2ZzICYmIEN1cnJ5Ll8yKGNtcCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChkc3QsIGopLCBlKSA+IDApIHtcbiAgICAgICAgQ2FtbF9hcnJheS5jYW1sX2FycmF5X3NldChkc3QsIGogKyAxIHwgMCwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChkc3QsIGopKTtcbiAgICAgICAgaiA9IGogLSAxIHwgMDtcbiAgICAgIH07XG4gICAgICBDYW1sX2FycmF5LmNhbWxfYXJyYXlfc2V0KGRzdCwgaiArIDEgfCAwLCBlKTtcbiAgICB9XG4gICAgXG4gIH07XG4gIHZhciBzb3J0dG8gPSBmdW5jdGlvbiAoc3Jjb2ZzLCBkc3QsIGRzdG9mcywgbGVuKSB7XG4gICAgaWYgKGxlbiA8PSA1KSB7XG4gICAgICByZXR1cm4gaXNvcnR0byhzcmNvZnMsIGRzdCwgZHN0b2ZzLCBsZW4pO1xuICAgIH1cbiAgICB2YXIgbDEgPSBsZW4gLyAyIHwgMDtcbiAgICB2YXIgbDIgPSBsZW4gLSBsMSB8IDA7XG4gICAgc29ydHRvKHNyY29mcyArIGwxIHwgMCwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyKTtcbiAgICBzb3J0dG8oc3Jjb2ZzLCBhLCBzcmNvZnMgKyBsMiB8IDAsIGwxKTtcbiAgICByZXR1cm4gbWVyZ2Uoc3Jjb2ZzICsgbDIgfCAwLCBsMSwgZHN0LCBkc3RvZnMgKyBsMSB8IDAsIGwyLCBkc3QsIGRzdG9mcyk7XG4gIH07XG4gIHZhciBsID0gYS5sZW5ndGg7XG4gIGlmIChsIDw9IDUpIHtcbiAgICByZXR1cm4gaXNvcnR0bygwLCBhLCAwLCBsKTtcbiAgfVxuICB2YXIgbDEgPSBsIC8gMiB8IDA7XG4gIHZhciBsMiA9IGwgLSBsMSB8IDA7XG4gIHZhciB0ID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdChsMiwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldChhLCAwKSk7XG4gIHNvcnR0byhsMSwgdCwgMCwgbDIpO1xuICBzb3J0dG8oMCwgYSwgbDIsIGwxKTtcbiAgcmV0dXJuIG1lcmdlKGwyLCBsMSwgdCwgMCwgbDIsIGEsIDApO1xufVxuXG52YXIgY3JlYXRlX21hdHJpeCA9IG1ha2VfbWF0cml4O1xuXG52YXIgY29uY2F0ID0gQ2FtbF9hcnJheS5jYW1sX2FycmF5X2NvbmNhdDtcblxudmFyIGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0O1xuXG5leHBvcnQge1xuICBtYWtlX2Zsb2F0ICxcbiAgaW5pdCAsXG4gIG1ha2VfbWF0cml4ICxcbiAgY3JlYXRlX21hdHJpeCAsXG4gIGFwcGVuZCAsXG4gIGNvbmNhdCAsXG4gIHN1YiAsXG4gIGNvcHkgLFxuICBmaWxsICxcbiAgYmxpdCAsXG4gIHRvX2xpc3QgLFxuICBvZl9saXN0ICxcbiAgaXRlciAsXG4gIGl0ZXJpICxcbiAgbWFwICxcbiAgbWFwaSAsXG4gIGZvbGRfbGVmdCAsXG4gIGZvbGRfcmlnaHQgLFxuICBpdGVyMiAsXG4gIG1hcDIgLFxuICBmb3JfYWxsICxcbiAgZXhpc3RzICxcbiAgbWVtICxcbiAgbWVtcSAsXG4gIHNvcnQgLFxuICBzdGFibGVfc29ydCAsXG4gIGZhc3Rfc29ydCAsXG4gIEZsb2F0YXJyYXkgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgJCRBcnJheSBmcm9tIFwiLi9hcnJheS5qc1wiO1xuXG52YXIgaW5pdCA9ICQkQXJyYXkuaW5pdDtcblxudmFyIG1ha2VfbWF0cml4ID0gJCRBcnJheS5tYWtlX21hdHJpeDtcblxudmFyIGNyZWF0ZV9tYXRyaXggPSAkJEFycmF5LmNyZWF0ZV9tYXRyaXg7XG5cbnZhciBhcHBlbmQgPSAkJEFycmF5LmFwcGVuZDtcblxudmFyIGNvbmNhdCA9ICQkQXJyYXkuY29uY2F0O1xuXG52YXIgc3ViID0gJCRBcnJheS5zdWI7XG5cbnZhciBjb3B5ID0gJCRBcnJheS5jb3B5O1xuXG52YXIgZmlsbCA9ICQkQXJyYXkuZmlsbDtcblxudmFyIGJsaXQgPSAkJEFycmF5LmJsaXQ7XG5cbnZhciB0b19saXN0ID0gJCRBcnJheS50b19saXN0O1xuXG52YXIgb2ZfbGlzdCA9ICQkQXJyYXkub2ZfbGlzdDtcblxudmFyIGl0ZXIgPSAkJEFycmF5Lml0ZXI7XG5cbnZhciBtYXAgPSAkJEFycmF5Lm1hcDtcblxudmFyIGl0ZXJpID0gJCRBcnJheS5pdGVyaTtcblxudmFyIG1hcGkgPSAkJEFycmF5Lm1hcGk7XG5cbnZhciBmb2xkX2xlZnQgPSAkJEFycmF5LmZvbGRfbGVmdDtcblxudmFyIGZvbGRfcmlnaHQgPSAkJEFycmF5LmZvbGRfcmlnaHQ7XG5cbnZhciBpdGVyMiA9ICQkQXJyYXkuaXRlcjI7XG5cbnZhciBtYXAyID0gJCRBcnJheS5tYXAyO1xuXG52YXIgZXhpc3RzID0gJCRBcnJheS5leGlzdHM7XG5cbnZhciBmb3JfYWxsID0gJCRBcnJheS5mb3JfYWxsO1xuXG52YXIgbWVtID0gJCRBcnJheS5tZW07XG5cbnZhciBtZW1xID0gJCRBcnJheS5tZW1xO1xuXG52YXIgbWFrZV9mbG9hdCA9ICQkQXJyYXkubWFrZV9mbG9hdDtcblxudmFyIHNvcnQgPSAkJEFycmF5LnNvcnQ7XG5cbnZhciBzdGFibGVfc29ydCA9ICQkQXJyYXkuc3RhYmxlX3NvcnQ7XG5cbnZhciBmYXN0X3NvcnQgPSAkJEFycmF5LmZhc3Rfc29ydDtcblxudmFyIEZsb2F0YXJyYXkgPSAkJEFycmF5LkZsb2F0YXJyYXk7XG5cbmV4cG9ydCB7XG4gIGluaXQgLFxuICBtYWtlX21hdHJpeCAsXG4gIGNyZWF0ZV9tYXRyaXggLFxuICBhcHBlbmQgLFxuICBjb25jYXQgLFxuICBzdWIgLFxuICBjb3B5ICxcbiAgZmlsbCAsXG4gIGJsaXQgLFxuICB0b19saXN0ICxcbiAgb2ZfbGlzdCAsXG4gIGl0ZXIgLFxuICBtYXAgLFxuICBpdGVyaSAsXG4gIG1hcGkgLFxuICBmb2xkX2xlZnQgLFxuICBmb2xkX3JpZ2h0ICxcbiAgaXRlcjIgLFxuICBtYXAyICxcbiAgZXhpc3RzICxcbiAgZm9yX2FsbCAsXG4gIG1lbSAsXG4gIG1lbXEgLFxuICBtYWtlX2Zsb2F0ICxcbiAgc29ydCAsXG4gIHN0YWJsZV9zb3J0ICxcbiAgZmFzdF9zb3J0ICxcbiAgRmxvYXRhcnJheSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgSW5maXgkQnNCYXN0ZXQgZnJvbSBcIi4vSW5maXguYnMuanNcIjtcbmltcG9ydCAqIGFzIEZ1bmN0aW9uJEJzQmFzdGV0IGZyb20gXCIuL0Z1bmN0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbnRlcmZhY2UkQnNCYXN0ZXQgZnJvbSBcIi4vSW50ZXJmYWNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGFwcGVuZChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gKyBwcmltJDE7XG59XG5cbnZhciBNYWdtYSA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBTZW1pZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTW9ub2lkID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IFwiXCJcbn07XG5cbnZhciBRdWFzaWdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIExvb3AgPSB7XG4gIGFwcGVuZDogYXBwZW5kLFxuICBlbXB0eTogXCJcIlxufTtcblxudmFyIGVxID0gQ2FtbF9vYmouY2FtbF9lcXVhbDtcblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogSW50ZXJmYWNlJEJzQmFzdGV0LnVuc2FmZV9jb21wYXJlXG59O1xuXG52YXIgc2hvdyA9IEZ1bmN0aW9uJEJzQmFzdGV0LkNhdGVnb3J5LmlkO1xuXG52YXIgU2hvdyA9IHtcbiAgc2hvdzogc2hvd1xufTtcblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYShNYWdtYSk7XG5cbnZhciBpbmNsdWRlJDEgPSBJbmZpeCRCc0Jhc3RldC5FcShFcSk7XG5cbnZhciBpbmNsdWRlJDIgPSBJbmZpeCRCc0Jhc3RldC5PcmQoT3JkKTtcblxudmFyIEluZml4XyRsZXNzJGNvbG9uJGdyZWF0ID0gaW5jbHVkZS4kbGVzcyRjb2xvbiRncmVhdDtcblxudmFyIEluZml4XyRlcSRwaXBlJGVxID0gaW5jbHVkZSQxLiRlcSRwaXBlJGVxO1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRwaXBlID0gaW5jbHVkZSQyLiRsZXNzJHBpcGUkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDIuJHBpcGUkcGlwZSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZXEgPSBpbmNsdWRlJDIuJGxlc3MkcGlwZSRlcTtcblxudmFyIEluZml4XyRncmVhdCRwaXBlJGVxID0gaW5jbHVkZSQyLiRncmVhdCRwaXBlJGVxO1xuXG52YXIgSW5maXggPSB7XG4gICRsZXNzJGNvbG9uJGdyZWF0OiBJbmZpeF8kbGVzcyRjb2xvbiRncmVhdCxcbiAgJGVxJHBpcGUkZXE6IEluZml4XyRlcSRwaXBlJGVxLFxuICAkbGVzcyRwaXBlJHBpcGU6IEluZml4XyRsZXNzJHBpcGUkcGlwZSxcbiAgJHBpcGUkcGlwZSRncmVhdDogSW5maXhfJHBpcGUkcGlwZSRncmVhdCxcbiAgJGxlc3MkcGlwZSRlcTogSW5maXhfJGxlc3MkcGlwZSRlcSxcbiAgJGdyZWF0JHBpcGUkZXE6IEluZml4XyRncmVhdCRwaXBlJGVxXG59O1xuXG5leHBvcnQge1xuICBNYWdtYSAsXG4gIFNlbWlncm91cCAsXG4gIE1vbm9pZCAsXG4gIFF1YXNpZ3JvdXAgLFxuICBMb29wICxcbiAgRXEgLFxuICBPcmQgLFxuICBTaG93ICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgSW5maXgkQnNCYXN0ZXQgZnJvbSBcIi4vSW5maXguYnMuanNcIjtcblxuZnVuY3Rpb24gTWFnbWEoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihNLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cChTKSB7XG4gIHZhciBhcHBlbmQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiAvKiBEdWFsICovW0N1cnJ5Ll8yKFMuYXBwZW5kLCBiWzBdLCBhWzBdKV07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYXBwZW5kOiBhcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gTW9ub2lkKE0pIHtcbiAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIC8qIER1YWwgKi9bQ3VycnkuXzIoTS5hcHBlbmQsIGJbMF0sIGFbMF0pXTtcbiAgfTtcbiAgdmFyIGVtcHR5ID0gLyogRHVhbCAqL1tNLmVtcHR5XTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICAgICAgICBlbXB0eTogZW1wdHlcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIGEpIHtcbiAgcmV0dXJuIC8qIER1YWwgKi9bQ3VycnkuXzEoZiwgYVswXSldO1xufVxuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbmZ1bmN0aW9uIGFwcGx5KGYsIGEpIHtcbiAgcmV0dXJuIC8qIER1YWwgKi9bQ3VycnkuXzEoZlswXSwgYVswXSldO1xufVxuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIER1YWwgKi9bYV07XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxuZnVuY3Rpb24gZmxhdF9tYXAoYSwgZikge1xuICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG59XG5cbnZhciBNb25hZCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgZmxhdF9tYXA6IGZsYXRfbWFwXG59O1xuXG5mdW5jdGlvbiBNYWdtYV9BbnkoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihNLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cF9BbnkoUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihTLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbm9pZF9BbnkoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gLyogRHVhbCAqL1tDdXJyeS5fMihNLmFwcGVuZCwgYlswXSwgYVswXSldO1xuICB9O1xuICB2YXIgZW1wdHkgPSAvKiBEdWFsICovW00uZW1wdHldO1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kLFxuICAgICAgICAgIGVtcHR5OiBlbXB0eVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX2xlZnQoZiwgaW5pdCwgeCkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgaW5pdCwgeFswXSk7XG59XG5cbmZ1bmN0aW9uIGZvbGRfcmlnaHQoZiwgaW5pdCwgeCkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgeFswXSwgaW5pdCk7XG59XG5cbmZ1bmN0aW9uIGZvbGRfbWFwKGYsIHgpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHhbMF0pO1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcChNKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX0FueShNKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX1BsdXMoUCkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShBKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuRnVuY3RvcihBKTtcbiAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIER1YWwgKi9beF07XG4gICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKGYsIHhbMF0pKTtcbiAgfTtcbiAgdmFyIHNlcXVlbmNlID0gZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyQkZ3JlYXQsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIER1YWwgKi9beF07XG4gICAgICAgICAgICAgICAgfSksIHhbMF0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG52YXIgaW5jbHVkZSA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE1vbmFkKTtcblxudmFyIEluZml4ID0gaW5jbHVkZTtcblxuZXhwb3J0IHtcbiAgTWFnbWEgLFxuICBTZW1pZ3JvdXAgLFxuICBNb25vaWQgLFxuICBGdW5jdG9yICxcbiAgQXBwbGljYXRpdmUgLFxuICBNb25hZCAsXG4gIE1hZ21hX0FueSAsXG4gIFNlbWlncm91cF9BbnkgLFxuICBNb25vaWRfQW55ICxcbiAgRm9sZGFibGUgLFxuICBUcmF2ZXJzYWJsZSAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIER1YWwkQnNCYXN0ZXQgZnJvbSBcIi4vRHVhbC5icy5qc1wiO1xuaW1wb3J0ICogYXMgRW5kbyRCc0Jhc3RldCBmcm9tIFwiLi9FbmRvLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgRnVuY3Rpb24kQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb24uYnMuanNcIjtcblxudmFyICRsZXNzJGRvdCA9IEZ1bmN0aW9uJEJzQmFzdGV0LkluZml4LiRsZXNzJGRvdDtcblxuZnVuY3Rpb24gRm9sZF9NYXAoTSwgRikge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE0pO1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9sZWZ0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgYWNjLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICAgICAgICAgICAgfSksIE0uZW1wdHksIHgpO1xuICB9O1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9yaWdodCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9yaWdodCwgKGZ1bmN0aW9uICh4LCBhY2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJGNvbG9uJGdyZWF0LCBDdXJyeS5fMShmLCB4KSwgYWNjKTtcbiAgICAgICAgICAgICAgICB9KSwgTS5lbXB0eSwgeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgSTogSSxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X2xlZnQ6IGZvbGRfbWFwX2RlZmF1bHRfbGVmdCxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0OiBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX0FueShNLCBGKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuTWFnbWFfQW55KE0pO1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9sZWZ0ID0gZnVuY3Rpb24gKGYsIHgpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoSS4kbGVzcyRjb2xvbiRncmVhdCwgYWNjLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICAgICAgICAgICAgfSksIE0uZW1wdHksIHgpO1xuICB9O1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9yaWdodCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9yaWdodCwgKGZ1bmN0aW9uICh4LCBhY2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJGNvbG9uJGdyZWF0LCBDdXJyeS5fMShmLCB4KSwgYWNjKTtcbiAgICAgICAgICAgICAgICB9KSwgTS5lbXB0eSwgeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgSTogSSxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X2xlZnQ6IGZvbGRfbWFwX2RlZmF1bHRfbGVmdCxcbiAgICAgICAgICBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0OiBmb2xkX21hcF9kZWZhdWx0X3JpZ2h0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX1BsdXMoUCwgRikge1xuICB2YXIgSSA9IEluZml4JEJzQmFzdGV0LkFsdChQKTtcbiAgdmFyIGZvbGRfbWFwX2RlZmF1bHRfbGVmdCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGFjYywgeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3MkcGlwZSRncmVhdCwgYWNjLCBDdXJyeS5fMShmLCB4KSk7XG4gICAgICAgICAgICAgICAgfSksIFAuZW1wdHksIHgpO1xuICB9O1xuICB2YXIgZm9sZF9tYXBfZGVmYXVsdF9yaWdodCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9yaWdodCwgKGZ1bmN0aW9uICh4LCBhY2MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHBpcGUkZ3JlYXQsIEN1cnJ5Ll8xKGYsIHgpLCBhY2MpO1xuICAgICAgICAgICAgICAgIH0pLCBQLmVtcHR5LCB4KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBJOiBJLFxuICAgICAgICAgIGZvbGRfbWFwX2RlZmF1bHRfbGVmdDogZm9sZF9tYXBfZGVmYXVsdF9sZWZ0LFxuICAgICAgICAgIGZvbGRfbWFwX2RlZmF1bHRfcmlnaHQ6IGZvbGRfbWFwX2RlZmF1bHRfcmlnaHRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZChGKSB7XG4gIHZhciBEdWFsX0VuZG8gPSBEdWFsJEJzQmFzdGV0Lk1vbm9pZF9BbnkoRW5kbyRCc0Jhc3RldC5Nb25vaWQpO1xuICB2YXIgRHVhbF9Gb2xkX01hcCA9IEN1cnJ5Ll8xKEYuRm9sZF9NYXBfQW55LCBEdWFsX0VuZG8pO1xuICB2YXIgRW5kb19Gb2xkX01hcCA9IEN1cnJ5Ll8xKEYuRm9sZF9NYXBfQW55LCBFbmRvJEJzQmFzdGV0Lk1vbm9pZCk7XG4gIHZhciBmb2xkX2xlZnRfZGVmYXVsdCA9IGZ1bmN0aW9uIChmLCBpbml0LCB4cykge1xuICAgIHZhciBtYXRjaCA9IEN1cnJ5Ll8yKER1YWxfRm9sZF9NYXAuZm9sZF9tYXAsIEN1cnJ5Ll8yKCRsZXNzJGRvdCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIER1YWwgKi9bLyogRW5kbyAqL1t4XV07XG4gICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LmZsaXAoZiwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgICAgICAgICB9KSksIHhzKTtcbiAgICByZXR1cm4gQ3VycnkuXzEobWF0Y2hbMF1bMF0sIGluaXQpO1xuICB9O1xuICB2YXIgZm9sZF9yaWdodF9kZWZhdWx0ID0gZnVuY3Rpb24gKGYsIGluaXQsIHhzKSB7XG4gICAgdmFyIHIgPSBDdXJyeS5fMihFbmRvX0ZvbGRfTWFwLmZvbGRfbWFwLCBDdXJyeS5fMigkbGVzcyRkb3QsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBFbmRvICovW3hdO1xuICAgICAgICAgICAgICB9KSwgZiksIHhzKTtcbiAgICByZXR1cm4gQ3VycnkuXzEoclswXSwgaW5pdCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRHVhbF9FbmRvOiBEdWFsX0VuZG8sXG4gICAgICAgICAgRHVhbF9Gb2xkX01hcDogRHVhbF9Gb2xkX01hcCxcbiAgICAgICAgICBFbmRvX0ZvbGRfTWFwOiBFbmRvX0ZvbGRfTWFwLFxuICAgICAgICAgIGZvbGRfbGVmdF9kZWZhdWx0OiBmb2xkX2xlZnRfZGVmYXVsdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0X2RlZmF1bHQ6IGZvbGRfcmlnaHRfZGVmYXVsdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTZXF1ZW5jZShUKSB7XG4gIHZhciBzZXF1ZW5jZV9kZWZhdWx0ID0gZnVuY3Rpb24gKHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFQudHJhdmVyc2UsIEZ1bmN0aW9uJEJzQmFzdGV0LkNhdGVnb3J5LmlkLCB4cyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2VxdWVuY2VfZGVmYXVsdDogc2VxdWVuY2VfZGVmYXVsdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBUcmF2ZXJzZShTKSB7XG4gIHZhciB0cmF2ZXJzZV9kZWZhdWx0ID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKFMuc2VxdWVuY2UsIEN1cnJ5Ll8yKFMubWFwLCBmLCB4cykpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHRyYXZlcnNlX2RlZmF1bHQ6IHRyYXZlcnNlX2RlZmF1bHRcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgJGxlc3MkZG90ICxcbiAgRm9sZF9NYXAgLFxuICBGb2xkX01hcF9BbnkgLFxuICBGb2xkX01hcF9QbHVzICxcbiAgRm9sZCAsXG4gIFNlcXVlbmNlICxcbiAgVHJhdmVyc2UgLFxuICBcbn1cbi8qIER1YWwtQnNCYXN0ZXQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9hcnJheSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBBcnJheUxhYmVscyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9hcnJheUxhYmVscy5qc1wiO1xuaW1wb3J0ICogYXMgQXJyYXlGJEJzQmFzdGV0IGZyb20gXCIuL0FycmF5Ri5icy5qc1wiO1xuXG5mdW5jdGlvbiBsZW5ndGgocHJpbSkge1xuICByZXR1cm4gcHJpbS5sZW5ndGg7XG59XG5cbnZhciBtYWtlID0gQ2FtbF9hcnJheS5jYW1sX21ha2VfdmVjdDtcblxudmFyIG1hcCA9IEFycmF5TGFiZWxzLm1hcDtcblxuZnVuY3Rpb24gbWFwaShmLCBhcnIpIHtcbiAgcmV0dXJuIEFycmF5TGFiZWxzLm1hcGkoKGZ1bmN0aW9uIChpbmRleCwgZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihmLCBlLCBpbmRleCk7XG4gICAgICAgICAgICAgIH0pLCBhcnIpO1xufVxuXG52YXIgZm9sZF9sZWZ0ID0gQXJyYXlMYWJlbHMuZm9sZF9sZWZ0O1xuXG52YXIgZXZlcnkgPSBBcnJheUxhYmVscy5mb3JfYWxsO1xuXG5mdW5jdGlvbiBzbGljZShzdGFydCwgZW5kXywgYXJyKSB7XG4gIHJldHVybiBBcnJheUxhYmVscy5zdWIoYXJyLCBzdGFydCwgZW5kXyAtIHN0YXJ0IHwgMCk7XG59XG5cbnZhciBBID0gQXJyYXlGJEJzQmFzdGV0Lk1ha2Uoe1xuICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICBtYWtlOiBtYWtlLFxuICAgICAgYXBwZW5kOiBBcnJheUxhYmVscy5hcHBlbmQsXG4gICAgICBtYXA6IG1hcCxcbiAgICAgIG1hcGk6IG1hcGksXG4gICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgIGV2ZXJ5OiBldmVyeSxcbiAgICAgIHNsaWNlOiBzbGljZVxuICAgIH0pO1xuXG52YXIgemlwX3dpdGggPSBBLnppcF93aXRoO1xuXG52YXIgemlwID0gQS56aXA7XG5cbnZhciBGdW5jdG9yID0gQS5GdW5jdG9yO1xuXG52YXIgQWx0ID0gQS5BbHQ7XG5cbnZhciBBcHBseSA9IEEuQXBwbHk7XG5cbnZhciBBcHBsaWNhdGl2ZSA9IEEuQXBwbGljYXRpdmU7XG5cbnZhciBNb25hZCA9IEEuTW9uYWQ7XG5cbnZhciBGb2xkYWJsZSA9IEEuRm9sZGFibGU7XG5cbnZhciBVbmZvbGRhYmxlID0gQS5VbmZvbGRhYmxlO1xuXG52YXIgVHJhdmVyc2FibGUgPSBBLlRyYXZlcnNhYmxlO1xuXG52YXIgRXEgPSBBLkVxO1xuXG52YXIgT3JkID0gQS5PcmQ7XG5cbnZhciBTaG93ID0gQS5TaG93O1xuXG52YXIgSW52YXJpYW50ID0gQS5JbnZhcmlhbnQ7XG5cbnZhciBFeHRlbmQgPSBBLkV4dGVuZDtcblxudmFyIEluZml4ID0gQS5JbmZpeDtcblxuZXhwb3J0IHtcbiAgemlwX3dpdGggLFxuICB6aXAgLFxuICBGdW5jdG9yICxcbiAgQWx0ICxcbiAgQXBwbHkgLFxuICBBcHBsaWNhdGl2ZSAsXG4gIE1vbmFkICxcbiAgRm9sZGFibGUgLFxuICBVbmZvbGRhYmxlICxcbiAgVHJhdmVyc2FibGUgLFxuICBFcSAsXG4gIE9yZCAsXG4gIFNob3cgLFxuICBJbnZhcmlhbnQgLFxuICBFeHRlbmQgLFxuICBJbmZpeCAsXG4gIFxufVxuLyogQSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2FycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfYXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIEFycmF5TGFiZWxzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5TGFiZWxzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCIuL1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgRGVmYXVsdCRCc0Jhc3RldCBmcm9tIFwiLi9EZWZhdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1ha2UoQSkge1xuICB2YXIgemlwX3dpdGggPSBmdW5jdGlvbiAoZiwgeHMsIHlzKSB7XG4gICAgdmFyIGwgPSBDdXJyeS5fMShBLmxlbmd0aCwgeHMpIDwgQ3VycnkuXzEoQS5sZW5ndGgsIHlzKSA/IEN1cnJ5Ll8xKEEubGVuZ3RoLCB4cykgOiBDdXJyeS5fMShBLmxlbmd0aCwgeXMpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICAgIHZhciB2YWx1ZSA9IEN1cnJ5Ll8yKGYsIENhbWxfYXJyYXkuY2FtbF9hcnJheV9nZXQoeHMsIGkpLCBDYW1sX2FycmF5LmNhbWxfYXJyYXlfZ2V0KHlzLCBpKSk7XG4gICAgICB2YXIgYXJyID0gcmVzdWx0O1xuICAgICAgaWYgKGFyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIENhbWxfYXJyYXkuY2FtbF9hcnJheV9zZXQoYXJyLCBpbmRleCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gQ3VycnkuXzIoQS5tYWtlLCBsLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpbmRleCA9IGluZGV4ICsgMSB8IDA7XG4gICAgfVxuICAgIHZhciBhcnJheSA9IHJlc3VsdDtcbiAgICBpZiAoYXJyYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuICB2YXIgemlwID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIHJldHVybiB6aXBfd2l0aCgoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYlxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KSwgeHMsIHlzKTtcbiAgfTtcbiAgdmFyIG1hcCA9IEEubWFwO1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgYWx0ID0gQS5hcHBlbmQ7XG4gIHZhciBBbHQgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYWx0OiBhbHRcbiAgfTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGZuX2FycmF5LCBhKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEEuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGFjYywgZikge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGFsdCwgYWNjLCBDdXJyeS5fMihtYXAsIGYsIGEpKTtcbiAgICAgICAgICAgICAgICB9KSwgW10sIGZuX2FycmF5KTtcbiAgfTtcbiAgdmFyIEFwcGx5ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseVxuICB9O1xuICB2YXIgcHVyZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIFthXTtcbiAgfTtcbiAgdmFyIEFwcGxpY2F0aXZlID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlXG4gIH07XG4gIHZhciBmbGF0X21hcCA9IGZ1bmN0aW9uICh4LCBmKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEEuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGFjYywgYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGFsdCwgYWNjLCBDdXJyeS5fMShmLCBhKSk7XG4gICAgICAgICAgICAgICAgfSksIFtdLCB4KTtcbiAgfTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBmbGF0X21hcFxuICB9O1xuICB2YXIgZm9sZF9sZWZ0ID0gQS5mb2xkX2xlZnQ7XG4gIHZhciBmb2xkX3JpZ2h0ID0gZnVuY3Rpb24gKGYsIGluaXQpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICByZXR1cm4gQXJyYXlMYWJlbHMuZm9sZF9yaWdodChmLCBwYXJhbSwgaW5pdCk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXA7XG4gICAgdmFyIEQgPSBwYXJ0aWFsX2FyZyhmdW5hcmcsIHtcbiAgICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0XG4gICAgICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogRC5mb2xkX21hcF9kZWZhdWx0X2xlZnRcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZGFibGVfRm9sZF9NYXBfQW55ID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXBfQW55O1xuICAgIHZhciBEID0gcGFydGlhbF9hcmcoZnVuYXJnLCB7XG4gICAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogZm9sZF9yaWdodFxuICAgICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IEQuZm9sZF9tYXBfZGVmYXVsdF9sZWZ0XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMgPSBmdW5jdGlvbiAoZnVuYXJnKSB7XG4gICAgdmFyIHBhcnRpYWxfYXJnID0gRGVmYXVsdCRCc0Jhc3RldC5Gb2xkX01hcF9QbHVzO1xuICAgIHZhciBEID0gcGFydGlhbF9hcmcoZnVuYXJnLCB7XG4gICAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogZm9sZF9yaWdodFxuICAgICAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IEQuZm9sZF9tYXBfZGVmYXVsdF9sZWZ0XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlID0ge1xuICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICAgIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbiAgfTtcbiAgdmFyIHVuZm9sZCA9IGZ1bmN0aW9uIChmLCBpbml0KSB7XG4gICAgdmFyIG1hdGNoID0gQ3VycnkuXzEoZiwgaW5pdCk7XG4gICAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihhbHQsIFttYXRjaFswXV0sIHVuZm9sZChmLCBtYXRjaFsxXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9O1xuICB2YXIgVW5mb2xkYWJsZSA9IHtcbiAgICB1bmZvbGQ6IHVuZm9sZFxuICB9O1xuICB2YXIgVHJhdmVyc2FibGUgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gICAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYpIHtcbiAgICAgIHZhciBhcmcgPSBDdXJyeS5fMShBLnB1cmUsIFtdKTtcbiAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgcmV0dXJuIEFycmF5TGFiZWxzLmZvbGRfcmlnaHQoKGZ1bmN0aW9uIChhY2MsIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihJLiRsZXNzJHN0YXIkZ3JlYXQsIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzEoQS5wdXJlLCAoZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoYWx0LCBbeF0sIHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIEN1cnJ5Ll8xKGYsIGFjYykpLCB4KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSwgcGFyYW0sIGFyZyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIEQgPSBEZWZhdWx0JEJzQmFzdGV0LlNlcXVlbmNlKHtcbiAgICAgICAgICB0cmF2ZXJzZTogdHJhdmVyc2VcbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgICAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICAgICAgICAgICAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgICAgICAgICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgICAgc2VxdWVuY2U6IEQuc2VxdWVuY2VfZGVmYXVsdFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBFcSA9IGZ1bmN0aW9uIChFKSB7XG4gICAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgICAgaWYgKEN1cnJ5Ll8xKEEubGVuZ3RoLCB4cykgPT09IEN1cnJ5Ll8xKEEubGVuZ3RoLCB5cykpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEEuZXZlcnksIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoRS5lcSwgcGFyYW1bMF0sIHBhcmFtWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIHppcCh4cywgeXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcTogZXFcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgT3JkID0gZnVuY3Rpb24gKE8pIHtcbiAgICB2YXIgZXEgPSBmdW5jdGlvbiAoeHMsIHlzKSB7XG4gICAgICBpZiAoQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSA9PT0gQ3VycnkuXzEoQS5sZW5ndGgsIHlzKSkge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoQS5ldmVyeSwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihPLmVxLCBwYXJhbVswXSwgcGFyYW1bMV0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgemlwKHhzLCB5cykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoeHMsIHlzKSB7XG4gICAgICBpZiAoQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSAhPT0gQ3VycnkuXzEoQS5sZW5ndGgsIHlzKSkge1xuICAgICAgICBpZiAoQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSA8IEN1cnJ5Ll8xKEEubGVuZ3RoLCB5cykpIHtcbiAgICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IHtcbiAgICAgICAgY29udGVudHM6IDBcbiAgICAgIH07XG4gICAgICByZXR1cm4gQ3VycnkuXzMoQS5mb2xkX2xlZnQsIChmdW5jdGlvbiAoYWNjLCBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhY2MgIT09IC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MiA/IGFjYyA6IEN1cnJ5Ll8yKE8uY29tcGFyZSwgZSwgQ2FtbF9hcnJheS5jYW1sX2FycmF5X2dldCh5cywgaW5kZXguY29udGVudHMpKTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXguY29udGVudHMgPSBpbmRleC5jb250ZW50cyArIDEgfCAwO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgfSksIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MiwgeHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVxOiBlcSxcbiAgICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgU2hvdyA9IGZ1bmN0aW9uIChTKSB7XG4gICAgdmFyIEYgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRm9sZGFibGUoRm9sZGFibGUpO1xuICAgIHZhciBNID0gQ3VycnkuXzEoRi5Nb25vaWQsIFN0cmluZyRCc0Jhc3RldC5Nb25vaWQpO1xuICAgIHZhciBzaG93ID0gZnVuY3Rpb24gKHhzKSB7XG4gICAgICByZXR1cm4gXCJbXCIgKyAoQ3VycnkuXzIoTS5pbnRlcmNhbGF0ZSwgXCIsIFwiLCBDdXJyeS5fMihtYXAsIFMuc2hvdywgeHMpKSArIFwiXVwiKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93OiBzaG93XG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIGltYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzEobWFwLCBmKTtcbiAgfTtcbiAgdmFyIEludmFyaWFudCA9IHtcbiAgICBpbWFwOiBpbWFwXG4gIH07XG4gIHZhciBleHRlbmQgPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXBpLCAoZnVuY3Rpb24gKHBhcmFtLCBpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ3VycnkuXzMoQS5zbGljZSwgaSwgQ3VycnkuXzEoQS5sZW5ndGgsIHhzKSwgeHMpKTtcbiAgICAgICAgICAgICAgICB9KSwgeHMpO1xuICB9O1xuICB2YXIgRXh0ZW5kID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGV4dGVuZDogZXh0ZW5kXG4gIH07XG4gIHZhciBpbmNsdWRlID0gSW5maXgkQnNCYXN0ZXQuTW9uYWQoTW9uYWQpO1xuICB2YXIgaW5jbHVkZSQxID0gSW5maXgkQnNCYXN0ZXQuRXh0ZW5kKEV4dGVuZCk7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGhhc2gkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJGhhc2gkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZS4kbGVzcyRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfJGdyZWF0JGdyZWF0JGVxID0gaW5jbHVkZS4kZ3JlYXQkZ3JlYXQkZXE7XG4gIHZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZS4kZXEkbGVzcyRsZXNzO1xuICB2YXIgSW5maXhfJGdyZWF0JGVxJGdyZWF0ID0gaW5jbHVkZS4kZ3JlYXQkZXEkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRlcSRsZXNzID0gaW5jbHVkZS4kbGVzcyRlcSRsZXNzO1xuICB2YXIgSW5maXhfJGxlc3MkbGVzcyRlcSA9IGluY2x1ZGUkMS4kbGVzcyRsZXNzJGVxO1xuICB2YXIgSW5maXhfJGVxJGdyZWF0JGdyZWF0ID0gaW5jbHVkZSQxLiRlcSRncmVhdCRncmVhdDtcbiAgdmFyIEluZml4ID0ge1xuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICAgJGxlc3MkbGVzcyRlcTogSW5maXhfJGxlc3MkbGVzcyRlcSxcbiAgICAkZXEkZ3JlYXQkZ3JlYXQ6IEluZml4XyRlcSRncmVhdCRncmVhdFxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHppcF93aXRoOiB6aXBfd2l0aCxcbiAgICAgICAgICB6aXA6IHppcCxcbiAgICAgICAgICBGdW5jdG9yOiBGdW5jdG9yLFxuICAgICAgICAgIEFsdDogQWx0LFxuICAgICAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgICAgICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUsXG4gICAgICAgICAgTW9uYWQ6IE1vbmFkLFxuICAgICAgICAgIEZvbGRhYmxlOiBGb2xkYWJsZSxcbiAgICAgICAgICBVbmZvbGRhYmxlOiBVbmZvbGRhYmxlLFxuICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZSxcbiAgICAgICAgICBFcTogRXEsXG4gICAgICAgICAgT3JkOiBPcmQsXG4gICAgICAgICAgU2hvdzogU2hvdyxcbiAgICAgICAgICBJbnZhcmlhbnQ6IEludmFyaWFudCxcbiAgICAgICAgICBFeHRlbmQ6IEV4dGVuZCxcbiAgICAgICAgICBJbmZpeDogSW5maXhcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgTWFrZSAsXG4gIFxufVxuLyogU3RyaW5nLUJzQmFzdGV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcblxuZnVuY3Rpb24gYnkoYlRvQSwgZXFBLCBiMSwgYjIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGVxQSwgQ3VycnkuXzEoYlRvQSwgYjEpLCBDdXJyeS5fMShiVG9BLCBiMikpO1xufVxuXG52YXIgQ29udHJhdmFyaWFudCA9IHtcbiAgY21hcDogYnlcbn07XG5cbmZ1bmN0aW9uIGludmVydChlcUEsIGExLCBhMikge1xuICByZXR1cm4gIUN1cnJ5Ll8yKGVxQSwgYTEsIGEyKTtcbn1cblxudmFyIGNtYXAgPSBieTtcblxuZXhwb3J0IHtcbiAgYnkgLFxuICBjbWFwICxcbiAgQ29udHJhdmFyaWFudCAsXG4gIGludmVydCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0VxIGZyb20gXCIuLi9SZWx1ZGVfRXEuYnMuanNcIjtcblxuZnVuY3Rpb24gRXFFeHRlbnNpb25zKEVxKSB7XG4gIHZhciBlcVdpdGhDb252ZXJzaW9uID0gZnVuY3Rpb24gKGJUb0EpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgICByZXR1cm4gUmVsdWRlX0VxLmJ5KGJUb0EsIEVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIG5vdEVxID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9FcS5pbnZlcnQoRXEuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIEVxSW52ZXJ0ZWQgPSB7XG4gICAgZXE6IG5vdEVxXG4gIH07XG4gIHZhciBFcUJ5ID0gZnVuY3Rpb24gKEEpIHtcbiAgICB2YXIgZXEgPSBmdW5jdGlvbiAoYjEsIGIyKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoRXEuZXEsIEN1cnJ5Ll8xKEEuZiwgYjEpLCBDdXJyeS5fMShBLmYsIGIyKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXE6IGVxXG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcVdpdGhDb252ZXJzaW9uOiBlcVdpdGhDb252ZXJzaW9uLFxuICAgICAgICAgIG5vdEVxOiBub3RFcSxcbiAgICAgICAgICBlcUludmVydGVkOiBub3RFcSxcbiAgICAgICAgICBFcUludmVydGVkOiBFcUludmVydGVkLFxuICAgICAgICAgIEVxQnk6IEVxQnlcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRXFJbmZpeChFcSkge1xuICB2YXIgZXFXaXRoQ29udmVyc2lvbiA9IGZ1bmN0aW9uIChiVG9BKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9FcS5ieShiVG9BLCBFcS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgfSk7XG4gIH07XG4gIHZhciBub3RFcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfRXEuaW52ZXJ0KEVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBFcUludmVydGVkID0ge1xuICAgIGVxOiBub3RFcVxuICB9O1xuICB2YXIgRXFCeSA9IGZ1bmN0aW9uIChBKSB7XG4gICAgdmFyIGVxID0gZnVuY3Rpb24gKGIxLCBiMikge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEVxLmVxLCBDdXJyeS5fMShBLmYsIGIxKSwgQ3VycnkuXzEoQS5mLCBiMikpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVxOiBlcVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBFcUV4dGVuc2lvbnMgPSB7XG4gICAgZXFXaXRoQ29udmVyc2lvbjogZXFXaXRoQ29udmVyc2lvbixcbiAgICBub3RFcTogbm90RXEsXG4gICAgZXFJbnZlcnRlZDogbm90RXEsXG4gICAgRXFJbnZlcnRlZDogRXFJbnZlcnRlZCxcbiAgICBFcUJ5OiBFcUJ5XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRXFFeHRlbnNpb25zOiBFcUV4dGVuc2lvbnMsXG4gICAgICAgICAgJHBpcGUkZXEkcGlwZTogRXEuZXEsXG4gICAgICAgICAgJHBpcGUkYmFuZyRlcSRwaXBlOiBub3RFcVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBFcUV4dGVuc2lvbnMgLFxuICBFcUluZml4ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Db250cmF2YXJpYW50IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQ29udHJhdmFyaWFudC5icy5qc1wiO1xuXG5mdW5jdGlvbiBieShiVG9BLCBjb21wYXJlQSwgYjEsIGIyKSB7XG4gIHJldHVybiBDdXJyeS5fMihjb21wYXJlQSwgQ3VycnkuXzEoYlRvQSwgYjEpLCBDdXJyeS5fMShiVG9BLCBiMikpO1xufVxuXG52YXIgQ29udHJhdmFyaWFudCA9IHtcbiAgY21hcDogYnlcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0NvbnRyYXZhcmlhbnQuQ29udHJhdmFyaWFudEV4dGVuc2lvbnMoQ29udHJhdmFyaWFudCk7XG5cbmZ1bmN0aW9uIHJldmVyc2UoY29tcGFyZSwgYTEsIGEyKSB7XG4gIHZhciBtYXRjaCA9IEN1cnJ5Ll8yKGNvbXBhcmUsIGExLCBhMik7XG4gIGlmIChtYXRjaCAhPT0gMTU5MDM5NDk0KSB7XG4gICAgaWYgKG1hdGNoID49IDkzOTIxNDE1MSkge1xuICAgICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wYXJlQXNJbnRCeShjb21wYXJlLCBhLCBiKSB7XG4gIHZhciBtYXRjaCA9IEN1cnJ5Ll8yKGNvbXBhcmUsIGEsIGIpO1xuICBpZiAobWF0Y2ggIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChtYXRjaCA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAxO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVBc0ludChvcmQsIGEsIGIpIHtcbiAgcmV0dXJuIGNvbXBhcmVBc0ludEJ5KG9yZC5jb21wYXJlLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gbWluQnkoY29tcGFyZSwgYSwgYikge1xuICB2YXIgbWF0Y2ggPSBDdXJyeS5fMihjb21wYXJlLCBhLCBiKTtcbiAgaWYgKG1hdGNoICE9PSAxNTkwMzk0OTQpIHtcbiAgICByZXR1cm4gYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYjtcbiAgfVxufVxuXG5mdW5jdGlvbiBtaW4ob3JkLCBhLCBiKSB7XG4gIHJldHVybiBtaW5CeShvcmQuY29tcGFyZSwgYSwgYik7XG59XG5cbmZ1bmN0aW9uIG1heEJ5KGNvbXBhcmUsIGEsIGIpIHtcbiAgdmFyIG1hdGNoID0gQ3VycnkuXzIoY29tcGFyZSwgYSwgYik7XG4gIGlmIChtYXRjaCA+PSA5MzkyMTQxNTEpIHtcbiAgICByZXR1cm4gYjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXgob3JkLCBhLCBiKSB7XG4gIHJldHVybiBtYXhCeShvcmQuY29tcGFyZSwgYSwgYik7XG59XG5cbmZ1bmN0aW9uIGxlc3NUaGFuQnkoY29tcGFyZSwgYSwgYikge1xuICByZXR1cm4gQ3VycnkuXzIoY29tcGFyZSwgYSwgYikgPT09IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbn1cblxuZnVuY3Rpb24gbGVzc1RoYW4ob3JkLCBhLCBiKSB7XG4gIHJldHVybiBsZXNzVGhhbkJ5KG9yZC5jb21wYXJlLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gbGVzc1RoYW5PckVxQnkoY29tcGFyZSwgYSwgYikge1xuICByZXR1cm4gQ3VycnkuXzIoY29tcGFyZSwgYSwgYikgIT09IC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbn1cblxuZnVuY3Rpb24gbGVzc1RoYW5PckVxKG9yZCwgYSwgYikge1xuICByZXR1cm4gbGVzc1RoYW5PckVxQnkob3JkLmNvbXBhcmUsIGEsIGIpO1xufVxuXG5mdW5jdGlvbiBncmVhdGVyVGhhbkJ5KGNvbXBhcmUsIGEsIGIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGNvbXBhcmUsIGEsIGIpID09PSAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG59XG5cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuKG9yZCwgYSwgYikge1xuICByZXR1cm4gZ3JlYXRlclRoYW5CeShvcmQuY29tcGFyZSwgYSwgYik7XG59XG5cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcUJ5KGNvbXBhcmUsIGEsIGIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKGNvbXBhcmUsIGEsIGIpICE9PSAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG59XG5cbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JFcShvcmQsIGEsIGIpIHtcbiAgcmV0dXJuIGdyZWF0ZXJUaGFuT3JFcUJ5KG9yZC5jb21wYXJlLCBhLCBiKTtcbn1cblxuZnVuY3Rpb24gY2xhbXBCeShjb21wYXJlLCBtaW4sIG1heCwgdikge1xuICByZXR1cm4gbWluQnkoY29tcGFyZSwgbWF4LCBtYXhCeShjb21wYXJlLCBtaW4sIHYpKTtcbn1cblxuZnVuY3Rpb24gY2xhbXAob3JkLCBtaW4sIG1heCwgeCkge1xuICByZXR1cm4gY2xhbXBCeShvcmQuY29tcGFyZSwgbWluLCBtYXgsIHgpO1xufVxuXG5mdW5jdGlvbiBiZXR3ZWVuQnkoY29tcGFyZSwgbWluLCBtYXgsIHYpIHtcbiAgaWYgKGdyZWF0ZXJUaGFuT3JFcUJ5KGNvbXBhcmUsIHYsIG1pbikpIHtcbiAgICByZXR1cm4gbGVzc1RoYW5PckVxQnkoY29tcGFyZSwgdiwgbWF4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmV0d2VlbihvcmQsIG1pbiwgbWF4LCB4KSB7XG4gIHJldHVybiBiZXR3ZWVuQnkob3JkLmNvbXBhcmUsIG1pbiwgbWF4LCB4KTtcbn1cblxuZnVuY3Rpb24gYWJzKG9yZCwgcmluZywgeCkge1xuICBpZiAoZ3JlYXRlclRoYW5PckVxKG9yZCwgeCwgcmluZy56ZXJvKSkge1xuICAgIHJldHVybiB4O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMihyaW5nLnN1YnRyYWN0LCByaW5nLnplcm8sIHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNpZ251bShvcmQsIHJpbmcsIHgpIHtcbiAgaWYgKGdyZWF0ZXJUaGFuT3JFcShvcmQsIHgsIHJpbmcuemVybykpIHtcbiAgICByZXR1cm4gcmluZy5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKHJpbmcuc3VidHJhY3QsIHJpbmcuemVybywgcmluZy5vbmUpO1xuICB9XG59XG5cbnZhciBjbWFwID0gYnk7XG5cbnZhciBsdEJ5ID0gbGVzc1RoYW5CeTtcblxudmFyIGx0ID0gbGVzc1RoYW47XG5cbnZhciBsdGVCeSA9IGxlc3NUaGFuT3JFcUJ5O1xuXG52YXIgbHRlID0gbGVzc1RoYW5PckVxO1xuXG52YXIgZ3RCeSA9IGdyZWF0ZXJUaGFuQnk7XG5cbnZhciBndCA9IGdyZWF0ZXJUaGFuO1xuXG52YXIgZ3RlQnkgPSBncmVhdGVyVGhhbk9yRXFCeTtcblxudmFyIGd0ZSA9IGdyZWF0ZXJUaGFuT3JFcTtcblxuZXhwb3J0IHtcbiAgYnkgLFxuICBjbWFwICxcbiAgQ29udHJhdmFyaWFudCAsXG4gIHJldmVyc2UgLFxuICBjb21wYXJlQXNJbnRCeSAsXG4gIGNvbXBhcmVBc0ludCAsXG4gIG1pbkJ5ICxcbiAgbWluICxcbiAgbWF4QnkgLFxuICBtYXggLFxuICBsZXNzVGhhbkJ5ICxcbiAgbHRCeSAsXG4gIGxlc3NUaGFuICxcbiAgbHQgLFxuICBsZXNzVGhhbk9yRXFCeSAsXG4gIGx0ZUJ5ICxcbiAgbGVzc1RoYW5PckVxICxcbiAgbHRlICxcbiAgZ3JlYXRlclRoYW5CeSAsXG4gIGd0QnkgLFxuICBncmVhdGVyVGhhbiAsXG4gIGd0ICxcbiAgZ3JlYXRlclRoYW5PckVxQnkgLFxuICBndGVCeSAsXG4gIGdyZWF0ZXJUaGFuT3JFcSAsXG4gIGd0ZSAsXG4gIGNsYW1wQnkgLFxuICBjbGFtcCAsXG4gIGJldHdlZW5CeSAsXG4gIGJldHdlZW4gLFxuICBhYnMgLFxuICBzaWdudW0gLFxuICBcbn1cbi8qICBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3JkIGZyb20gXCIuLi9SZWx1ZGVfT3JkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19FcSBmcm9tIFwiLi9SZWx1ZGVfRXh0ZW5zaW9uc19FcS5icy5qc1wiO1xuXG5mdW5jdGlvbiBPcmRFeHRlbnNpb25zKE8pIHtcbiAgdmFyIGNvbXBhcmVXaXRoQ29udmVyc2lvbiA9IGZ1bmN0aW9uIChiVG9BKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmQuYnkoYlRvQSwgTy5jb21wYXJlLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIGNvbXBhcmVSZXZlcnNlZCA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLnJldmVyc2UoTy5jb21wYXJlLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBPcmRSZXZlcnNlZF9lcSA9IE8uZXE7XG4gIHZhciBPcmRSZXZlcnNlZCA9IHtcbiAgICBlcTogT3JkUmV2ZXJzZWRfZXEsXG4gICAgY29tcGFyZTogY29tcGFyZVJldmVyc2VkXG4gIH07XG4gIHZhciBjb21wYXJlQXNJbnQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmNvbXBhcmVBc0ludEJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBtaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLm1pbkJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBtYXggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLm1heEJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBsZXNzVGhhbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5CeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbGVzc1RoYW5PckVxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5sZXNzVGhhbk9yRXFCeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgZ3JlYXRlclRoYW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJUaGFuT3JFcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuZ3JlYXRlclRoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGNsYW1wID0gZnVuY3Rpb24gKG1pbiwgbWF4LCB2KSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuY2xhbXBCeShPLmNvbXBhcmUsIG1pbiwgbWF4LCB2KTtcbiAgfTtcbiAgdmFyIGJldHdlZW4gPSBmdW5jdGlvbiAobWluLCBtYXgsIHYpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5iZXR3ZWVuQnkoTy5jb21wYXJlLCBtaW4sIG1heCwgdik7XG4gIH07XG4gIHZhciBPcmRSaW5nRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIChSKSB7XG4gICAgdmFyIGFicyA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gUmVsdWRlX09yZC5hYnMoTywgUiwgdik7XG4gICAgfTtcbiAgICB2YXIgc2lnbnVtID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiBSZWx1ZGVfT3JkLnNpZ251bShPLCBSLCB2KTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBhYnM6IGFicyxcbiAgICAgICAgICAgIHNpZ251bTogc2lnbnVtXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIGxlc3NUaGFuJDEgPSBmdW5jdGlvbiAoY29tcGFyZVRvLCBhKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5CeShPLmNvbXBhcmUsIGEsIGNvbXBhcmVUbyk7XG4gIH07XG4gIHZhciBsZXNzVGhhbk9yRXEkMSA9IGZ1bmN0aW9uIChjb21wYXJlVG8sIGEpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5sZXNzVGhhbk9yRXFCeShPLmNvbXBhcmUsIGEsIGNvbXBhcmVUbyk7XG4gIH07XG4gIHZhciBncmVhdGVyVGhhbiQxID0gZnVuY3Rpb24gKGNvbXBhcmVUbywgYSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgZ3JlYXRlclRoYW5PckVxJDEgPSBmdW5jdGlvbiAoY29tcGFyZVRvLCBhKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuZ3JlYXRlclRoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgT3JkTmFtZWQgPSB7XG4gICAgbGVzc1RoYW46IGxlc3NUaGFuJDEsXG4gICAgbGVzc1RoYW5PckVxOiBsZXNzVGhhbk9yRXEkMSxcbiAgICBncmVhdGVyVGhhbjogZ3JlYXRlclRoYW4kMSxcbiAgICBncmVhdGVyVGhhbk9yRXE6IGdyZWF0ZXJUaGFuT3JFcSQxLFxuICAgIGx0OiBsZXNzVGhhbiQxLFxuICAgIGx0ZTogbGVzc1RoYW5PckVxJDEsXG4gICAgZ3Q6IGdyZWF0ZXJUaGFuJDEsXG4gICAgZ3RlOiBncmVhdGVyVGhhbk9yRXEkMVxuICB9O1xuICB2YXIgT3JkQnkgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfRXEuRXFFeHRlbnNpb25zKE8pO1xuICAgIHZhciBpbmNsdWRlJDEgPSBDdXJyeS5fMShpbmNsdWRlLkVxQnksIEEpO1xuICAgIHZhciBjb21wYXJlID0gZnVuY3Rpb24gKGIxLCBiMikge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE8uY29tcGFyZSwgQ3VycnkuXzEoQS5mLCBiMSksIEN1cnJ5Ll8xKEEuZiwgYjIpKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBlcTogaW5jbHVkZSQxLmVxLFxuICAgICAgICAgICAgY29tcGFyZTogY29tcGFyZVxuICAgICAgICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29tcGFyZVdpdGhDb252ZXJzaW9uOiBjb21wYXJlV2l0aENvbnZlcnNpb24sXG4gICAgICAgICAgY29tcGFyZVJldmVyc2VkOiBjb21wYXJlUmV2ZXJzZWQsXG4gICAgICAgICAgT3JkUmV2ZXJzZWQ6IE9yZFJldmVyc2VkLFxuICAgICAgICAgIGNvbXBhcmVBc0ludDogY29tcGFyZUFzSW50LFxuICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgIGxlc3NUaGFuOiBsZXNzVGhhbixcbiAgICAgICAgICBsdDogbGVzc1RoYW4sXG4gICAgICAgICAgbGVzc1RoYW5PckVxOiBsZXNzVGhhbk9yRXEsXG4gICAgICAgICAgbHRlOiBsZXNzVGhhbk9yRXEsXG4gICAgICAgICAgZ3JlYXRlclRoYW46IGdyZWF0ZXJUaGFuLFxuICAgICAgICAgIGd0OiBncmVhdGVyVGhhbixcbiAgICAgICAgICBncmVhdGVyVGhhbk9yRXE6IGdyZWF0ZXJUaGFuT3JFcSxcbiAgICAgICAgICBndGU6IGdyZWF0ZXJUaGFuT3JFcSxcbiAgICAgICAgICBjbGFtcDogY2xhbXAsXG4gICAgICAgICAgYmV0d2VlbjogYmV0d2VlbixcbiAgICAgICAgICBPcmRSaW5nRXh0ZW5zaW9uczogT3JkUmluZ0V4dGVuc2lvbnMsXG4gICAgICAgICAgT3JkTmFtZWQ6IE9yZE5hbWVkLFxuICAgICAgICAgIE9yZEJ5OiBPcmRCeVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBPcmRJbmZpeChPKSB7XG4gIHZhciBjb21wYXJlV2l0aENvbnZlcnNpb24gPSBmdW5jdGlvbiAoYlRvQSkge1xuICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICAgIHJldHVybiBSZWx1ZGVfT3JkLmJ5KGJUb0EsIE8uY29tcGFyZSwgcGFyYW0sIHBhcmFtJDEpO1xuICAgICAgfSk7XG4gIH07XG4gIHZhciBjb21wYXJlUmV2ZXJzZWQgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5yZXZlcnNlKE8uY29tcGFyZSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgT3JkUmV2ZXJzZWRfZXEgPSBPLmVxO1xuICB2YXIgT3JkUmV2ZXJzZWQgPSB7XG4gICAgZXE6IE9yZFJldmVyc2VkX2VxLFxuICAgIGNvbXBhcmU6IGNvbXBhcmVSZXZlcnNlZFxuICB9O1xuICB2YXIgY29tcGFyZUFzSW50ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5jb21wYXJlQXNJbnRCeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbWluID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5taW5CeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbWF4ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5tYXhCeShPLmNvbXBhcmUsIGEsIGIpO1xuICB9O1xuICB2YXIgbGVzc1RoYW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmxlc3NUaGFuQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGxlc3NUaGFuT3JFcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBiKTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJUaGFuID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5ncmVhdGVyVGhhbkJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBncmVhdGVyVGhhbk9yRXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuT3JFcUJ5KE8uY29tcGFyZSwgYSwgYik7XG4gIH07XG4gIHZhciBjbGFtcCA9IGZ1bmN0aW9uIChtaW4sIG1heCwgdikge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmNsYW1wQnkoTy5jb21wYXJlLCBtaW4sIG1heCwgdik7XG4gIH07XG4gIHZhciBiZXR3ZWVuID0gZnVuY3Rpb24gKG1pbiwgbWF4LCB2KSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQuYmV0d2VlbkJ5KE8uY29tcGFyZSwgbWluLCBtYXgsIHYpO1xuICB9O1xuICB2YXIgT3JkUmluZ0V4dGVuc2lvbnMgPSBmdW5jdGlvbiAoUikge1xuICAgIHZhciBhYnMgPSBmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIFJlbHVkZV9PcmQuYWJzKE8sIFIsIHYpO1xuICAgIH07XG4gICAgdmFyIHNpZ251bSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gUmVsdWRlX09yZC5zaWdudW0oTywgUiwgdik7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWJzOiBhYnMsXG4gICAgICAgICAgICBzaWdudW06IHNpZ251bVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBsZXNzVGhhbiQxID0gZnVuY3Rpb24gKGNvbXBhcmVUbywgYSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmxlc3NUaGFuQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgbGVzc1RoYW5PckVxJDEgPSBmdW5jdGlvbiAoY29tcGFyZVRvLCBhKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmQubGVzc1RoYW5PckVxQnkoTy5jb21wYXJlLCBhLCBjb21wYXJlVG8pO1xuICB9O1xuICB2YXIgZ3JlYXRlclRoYW4kMSA9IGZ1bmN0aW9uIChjb21wYXJlVG8sIGEpIHtcbiAgICByZXR1cm4gUmVsdWRlX09yZC5ncmVhdGVyVGhhbkJ5KE8uY29tcGFyZSwgYSwgY29tcGFyZVRvKTtcbiAgfTtcbiAgdmFyIGdyZWF0ZXJUaGFuT3JFcSQxID0gZnVuY3Rpb24gKGNvbXBhcmVUbywgYSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3JkLmdyZWF0ZXJUaGFuT3JFcUJ5KE8uY29tcGFyZSwgYSwgY29tcGFyZVRvKTtcbiAgfTtcbiAgdmFyIE9yZE5hbWVkID0ge1xuICAgIGxlc3NUaGFuOiBsZXNzVGhhbiQxLFxuICAgIGxlc3NUaGFuT3JFcTogbGVzc1RoYW5PckVxJDEsXG4gICAgZ3JlYXRlclRoYW46IGdyZWF0ZXJUaGFuJDEsXG4gICAgZ3JlYXRlclRoYW5PckVxOiBncmVhdGVyVGhhbk9yRXEkMSxcbiAgICBsdDogbGVzc1RoYW4kMSxcbiAgICBsdGU6IGxlc3NUaGFuT3JFcSQxLFxuICAgIGd0OiBncmVhdGVyVGhhbiQxLFxuICAgIGd0ZTogZ3JlYXRlclRoYW5PckVxJDFcbiAgfTtcbiAgdmFyIE9yZEJ5ID0gZnVuY3Rpb24gKEEpIHtcbiAgICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0VxLkVxRXh0ZW5zaW9ucyhPKTtcbiAgICB2YXIgaW5jbHVkZSQxID0gQ3VycnkuXzEoaW5jbHVkZS5FcUJ5LCBBKTtcbiAgICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChiMSwgYjIpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihPLmNvbXBhcmUsIEN1cnJ5Ll8xKEEuZiwgYjEpLCBDdXJyeS5fMShBLmYsIGIyKSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXE6IGluY2x1ZGUkMS5lcSxcbiAgICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgT3JkRXh0ZW5zaW9ucyA9IHtcbiAgICBjb21wYXJlV2l0aENvbnZlcnNpb246IGNvbXBhcmVXaXRoQ29udmVyc2lvbixcbiAgICBjb21wYXJlUmV2ZXJzZWQ6IGNvbXBhcmVSZXZlcnNlZCxcbiAgICBPcmRSZXZlcnNlZDogT3JkUmV2ZXJzZWQsXG4gICAgY29tcGFyZUFzSW50OiBjb21wYXJlQXNJbnQsXG4gICAgbWluOiBtaW4sXG4gICAgbWF4OiBtYXgsXG4gICAgbGVzc1RoYW46IGxlc3NUaGFuLFxuICAgIGx0OiBsZXNzVGhhbixcbiAgICBsZXNzVGhhbk9yRXE6IGxlc3NUaGFuT3JFcSxcbiAgICBsdGU6IGxlc3NUaGFuT3JFcSxcbiAgICBncmVhdGVyVGhhbjogZ3JlYXRlclRoYW4sXG4gICAgZ3Q6IGdyZWF0ZXJUaGFuLFxuICAgIGdyZWF0ZXJUaGFuT3JFcTogZ3JlYXRlclRoYW5PckVxLFxuICAgIGd0ZTogZ3JlYXRlclRoYW5PckVxLFxuICAgIGNsYW1wOiBjbGFtcCxcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIE9yZFJpbmdFeHRlbnNpb25zOiBPcmRSaW5nRXh0ZW5zaW9ucyxcbiAgICBPcmROYW1lZDogT3JkTmFtZWQsXG4gICAgT3JkQnk6IE9yZEJ5XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgT3JkRXh0ZW5zaW9uczogT3JkRXh0ZW5zaW9ucyxcbiAgICAgICAgICAkcGlwZSRsZXNzJHBpcGU6IGxlc3NUaGFuLFxuICAgICAgICAgICRwaXBlJGxlc3MkZXEkcGlwZTogbGVzc1RoYW5PckVxLFxuICAgICAgICAgICRwaXBlJGdyZWF0JHBpcGU6IGdyZWF0ZXJUaGFuLFxuICAgICAgICAgICRwaXBlJGdyZWF0JGVxJHBpcGU6IGdyZWF0ZXJUaGFuT3JFcVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBPcmRFeHRlbnNpb25zICxcbiAgT3JkSW5maXggLFxuICBcbn1cbi8qIFJlbHVkZV9PcmQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG5mdW5jdGlvbiBnZXQocywgaSkge1xuICBpZiAoaSA8IDAgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5kZXggb3V0IG9mIGJvdW5kc1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIHNbaV07XG59XG5cbmZ1bmN0aW9uIGNhbWxfZmlsbF9ieXRlcyhzLCBpLCBsLCBjKSB7XG4gIGlmIChsIDw9IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgayA9IGkgLGtfZmluaXNoID0gbCArIGkgfCAwOyBrIDwga19maW5pc2g7ICsrayl7XG4gICAgc1trXSA9IGM7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGNhbWxfY3JlYXRlX2J5dGVzKGxlbikge1xuICBpZiAobGVuIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmNyZWF0ZVwiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHJlc3VsdFtpXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2FtbF9ibGl0X2J5dGVzKHMxLCBpMSwgczIsIGkyLCBsZW4pIHtcbiAgaWYgKGxlbiA8PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBpZiAoczEgPT09IHMyKSB7XG4gICAgaWYgKGkxIDwgaTIpIHtcbiAgICAgIHZhciByYW5nZV9hID0gKHMxLmxlbmd0aCAtIGkyIHwgMCkgLSAxIHwgMDtcbiAgICAgIHZhciByYW5nZV9iID0gbGVuIC0gMSB8IDA7XG4gICAgICB2YXIgcmFuZ2UgPSByYW5nZV9hID4gcmFuZ2VfYiA/IHJhbmdlX2IgOiByYW5nZV9hO1xuICAgICAgZm9yKHZhciBqID0gcmFuZ2U7IGogPj0gMDsgLS1qKXtcbiAgICAgICAgczFbaTIgKyBqIHwgMF0gPSBzMVtpMSArIGogfCAwXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChpMSA8PSBpMikge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHJhbmdlX2EkMSA9IChzMS5sZW5ndGggLSBpMSB8IDApIC0gMSB8IDA7XG4gICAgdmFyIHJhbmdlX2IkMSA9IGxlbiAtIDEgfCAwO1xuICAgIHZhciByYW5nZSQxID0gcmFuZ2VfYSQxID4gcmFuZ2VfYiQxID8gcmFuZ2VfYiQxIDogcmFuZ2VfYSQxO1xuICAgIGZvcih2YXIgayA9IDA7IGsgPD0gcmFuZ2UkMTsgKytrKXtcbiAgICAgIHMxW2kyICsgayB8IDBdID0gczFbaTEgKyBrIHwgMF07XG4gICAgfVxuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIG9mZjEgPSBzMS5sZW5ndGggLSBpMSB8IDA7XG4gIGlmIChsZW4gPD0gb2ZmMSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgICBzMltpMiArIGkgfCAwXSA9IHMxW2kxICsgaSB8IDBdO1xuICAgIH1cbiAgICByZXR1cm4gO1xuICB9XG4gIGZvcih2YXIgaSQxID0gMDsgaSQxIDwgb2ZmMTsgKytpJDEpe1xuICAgIHMyW2kyICsgaSQxIHwgMF0gPSBzMVtpMSArIGkkMSB8IDBdO1xuICB9XG4gIGZvcih2YXIgaSQyID0gb2ZmMTsgaSQyIDwgbGVuOyArK2kkMil7XG4gICAgczJbaTIgKyBpJDIgfCAwXSA9IC8qIFwiXFwwMDBcIiAqLzA7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGJ5dGVzX3RvX3N0cmluZyhhKSB7XG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGEubGVuZ3RoO1xuICB2YXIgcyA9IFwiXCI7XG4gIHZhciBzX2xlbiA9IGxlbjtcbiAgaWYgKGkgPT09IDAgJiYgbGVuIDw9IDQwOTYgJiYgbGVuID09PSBhLmxlbmd0aCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGEpO1xuICB9XG4gIHZhciBvZmZzZXQgPSAwO1xuICB3aGlsZShzX2xlbiA+IDApIHtcbiAgICB2YXIgbmV4dCA9IHNfbGVuIDwgMTAyNCA/IHNfbGVuIDogMTAyNDtcbiAgICB2YXIgdG1wX2J5dGVzID0gbmV3IEFycmF5KG5leHQpO1xuICAgIGNhbWxfYmxpdF9ieXRlcyhhLCBvZmZzZXQsIHRtcF9ieXRlcywgMCwgbmV4dCk7XG4gICAgcyA9IHMgKyBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIHRtcF9ieXRlcyk7XG4gICAgc19sZW4gPSBzX2xlbiAtIG5leHQgfCAwO1xuICAgIG9mZnNldCA9IG9mZnNldCArIG5leHQgfCAwO1xuICB9O1xuICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gY2FtbF9ibGl0X3N0cmluZyhzMSwgaTEsIHMyLCBpMiwgbGVuKSB7XG4gIGlmIChsZW4gPD0gMCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIG9mZjEgPSBzMS5sZW5ndGggLSBpMSB8IDA7XG4gIGlmIChsZW4gPD0gb2ZmMSkge1xuICAgIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47ICsraSl7XG4gICAgICBzMltpMiArIGkgfCAwXSA9IHMxLmNoYXJDb2RlQXQoaTEgKyBpIHwgMCk7XG4gICAgfVxuICAgIHJldHVybiA7XG4gIH1cbiAgZm9yKHZhciBpJDEgPSAwOyBpJDEgPCBvZmYxOyArK2kkMSl7XG4gICAgczJbaTIgKyBpJDEgfCAwXSA9IHMxLmNoYXJDb2RlQXQoaTEgKyBpJDEgfCAwKTtcbiAgfVxuICBmb3IodmFyIGkkMiA9IG9mZjE7IGkkMiA8IGxlbjsgKytpJDIpe1xuICAgIHMyW2kyICsgaSQyIHwgMF0gPSAvKiBcIlxcMDAwXCIgKi8wO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBieXRlc19vZl9zdHJpbmcocykge1xuICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gIHZhciByZXMgPSBuZXcgQXJyYXkobGVuKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICByZXNbaV0gPSBzLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHtcbiAgY2FtbF9jcmVhdGVfYnl0ZXMgLFxuICBjYW1sX2ZpbGxfYnl0ZXMgLFxuICBnZXQgLFxuICBieXRlc190b19zdHJpbmcgLFxuICBjYW1sX2JsaXRfYnl0ZXMgLFxuICBjYW1sX2JsaXRfc3RyaW5nICxcbiAgYnl0ZXNfb2Zfc3RyaW5nICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIGRpdih4LCB5KSB7XG4gIGlmICh5ID09PSAwKSB7XG4gICAgdGhyb3cgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZGl2aXNpb25fYnlfemVybztcbiAgfVxuICByZXR1cm4geCAvIHkgfCAwO1xufVxuXG5mdW5jdGlvbiBtb2RfKHgsIHkpIHtcbiAgaWYgKHkgPT09IDApIHtcbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5kaXZpc2lvbl9ieV96ZXJvO1xuICB9XG4gIHJldHVybiB4ICUgeTtcbn1cblxuZnVuY3Rpb24gY2FtbF9ic3dhcDE2KHgpIHtcbiAgcmV0dXJuICgoeCAmIDI1NSkgPDwgOCkgfCAoKHggJiA2NTI4MCkgPj4+IDgpO1xufVxuXG5mdW5jdGlvbiBjYW1sX2ludDMyX2Jzd2FwKHgpIHtcbiAgcmV0dXJuICgoeCAmIDI1NSkgPDwgMjQpIHwgKCh4ICYgNjUyODApIDw8IDgpIHwgKCh4ICYgMTY3MTE2ODApID4+PiA4KSB8ICgoeCAmIDQyNzgxOTAwODApID4+PiAyNCk7XG59XG5cbnZhciBpbXVsID0gKE1hdGguaW11bCB8fCBmdW5jdGlvbiAoeCx5KSB7XG4gIHkgfD0gMDsgcmV0dXJuICgoKCh4ID4+IDE2KSAqIHkpIDw8IDE2KSArICh4ICYgMHhmZmZmKSAqIHkpfDA7IFxufSk7XG5cbnZhciBjYW1sX25hdGl2ZWludF9ic3dhcCA9IGNhbWxfaW50MzJfYnN3YXA7XG5cbmV4cG9ydCB7XG4gIGRpdiAsXG4gIG1vZF8gLFxuICBjYW1sX2Jzd2FwMTYgLFxuICBjYW1sX2ludDMyX2Jzd2FwICxcbiAgY2FtbF9uYXRpdmVpbnRfYnN3YXAgLFxuICBpbXVsICxcbiAgXG59XG4vKiBpbXVsIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2FtbF9pbnQzMiBmcm9tIFwiLi9jYW1sX2ludDMyLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2ludDY0IGZyb20gXCIuL2NhbWxfaW50NjQuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIHBhcnNlX2RpZ2l0KGMpIHtcbiAgaWYgKGMgPj0gNjUpIHtcbiAgICBpZiAoYyA+PSA5Nykge1xuICAgICAgaWYgKGMgPj0gMTIzKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjIC0gODcgfCAwO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYyA+PSA5MSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYyAtIDU1IHwgMDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYyA+IDU3IHx8IGMgPCA0OCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYyAtIC8qIFwiMFwiICovNDggfCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludF9vZl9zdHJpbmdfYmFzZShwYXJhbSkge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSAvKiBPY3QgKi8wIDpcbiAgICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSAvKiBIZXggKi8xIDpcbiAgICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgLyogRGVjICovMiA6XG4gICAgICAgIHJldHVybiAxMDtcbiAgICBjYXNlIC8qIEJpbiAqLzMgOlxuICAgICAgICByZXR1cm4gMjtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZV9zaWduX2FuZF9iYXNlKHMpIHtcbiAgdmFyIHNpZ24gPSAxO1xuICB2YXIgYmFzZSA9IC8qIERlYyAqLzI7XG4gIHZhciBpID0gMDtcbiAgdmFyIG1hdGNoID0gcy5jaGFyQ29kZUF0KGkpO1xuICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgY2FzZSA0MyA6XG4gICAgICAgIGkgPSBpICsgMSB8IDA7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDQgOlxuICAgICAgICBicmVhaztcbiAgICBjYXNlIDQ1IDpcbiAgICAgICAgc2lnbiA9IC0xO1xuICAgICAgICBpID0gaSArIDEgfCAwO1xuICAgICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgXG4gIH1cbiAgaWYgKHNbaV0gPT09IFwiMFwiKSB7XG4gICAgdmFyIG1hdGNoJDEgPSBzLmNoYXJDb2RlQXQoaSArIDEgfCAwKTtcbiAgICBpZiAobWF0Y2gkMSA+PSA4OSkge1xuICAgICAgaWYgKG1hdGNoJDEgPj0gMTExKSB7XG4gICAgICAgIGlmIChtYXRjaCQxIDwgMTIxKSB7XG4gICAgICAgICAgc3dpdGNoIChtYXRjaCQxIC0gMTExIHwgMCkge1xuICAgICAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgICAgICAgICBiYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgICAgICAgICBpID0gaSArIDIgfCAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgICBjYXNlIDMgOlxuICAgICAgICAgICAgY2FzZSA0IDpcbiAgICAgICAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgICBjYXNlIDcgOlxuICAgICAgICAgICAgY2FzZSA4IDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOSA6XG4gICAgICAgICAgICAgICAgYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gkMSA9PT0gOTgpIHtcbiAgICAgICAgYmFzZSA9IC8qIEJpbiAqLzM7XG4gICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKG1hdGNoJDEgIT09IDY2KSB7XG4gICAgICBpZiAobWF0Y2gkMSA+PSA3OSkge1xuICAgICAgICBzd2l0Y2ggKG1hdGNoJDEgLSA3OSB8IDApIHtcbiAgICAgICAgICBjYXNlIDAgOlxuICAgICAgICAgICAgICBiYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgICAgICAgaSA9IGkgKyAyIHwgMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgICBjYXNlIDIgOlxuICAgICAgICAgIGNhc2UgMyA6XG4gICAgICAgICAgY2FzZSA0IDpcbiAgICAgICAgICBjYXNlIDUgOlxuICAgICAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgY2FzZSA4IDpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA5IDpcbiAgICAgICAgICAgICAgYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgIGkgPSBpICsgMiB8IDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9IC8qIEJpbiAqLzM7XG4gICAgICBpID0gaSArIDIgfCAwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgaSxcbiAgICAgICAgICBzaWduLFxuICAgICAgICAgIGJhc2VcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gY2FtbF9pbnRfb2Zfc3RyaW5nKHMpIHtcbiAgdmFyIG1hdGNoID0gcGFyc2Vfc2lnbl9hbmRfYmFzZShzKTtcbiAgdmFyIGkgPSBtYXRjaFswXTtcbiAgdmFyIGJhc2UgPSBpbnRfb2Zfc3RyaW5nX2Jhc2UobWF0Y2hbMl0pO1xuICB2YXIgdGhyZXNob2xkID0gNDI5NDk2NzI5NTtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgYyA9IGkgPCBsZW4gPyBzLmNoYXJDb2RlQXQoaSkgOiAvKiBcIlxcMDAwXCIgKi8wO1xuICB2YXIgZCA9IHBhcnNlX2RpZ2l0KGMpO1xuICBpZiAoZCA8IDAgfHwgZCA+PSBiYXNlKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJpbnRfb2Zfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgYXV4ID0gZnVuY3Rpb24gKF9hY2MsIF9rKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGsgPSBfaztcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKGsgPT09IGxlbikge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzLmNoYXJDb2RlQXQoayk7XG4gICAgICBpZiAoYSA9PT0gLyogXCJfXCIgKi85NSkge1xuICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgdmFyIHYgPSBwYXJzZV9kaWdpdChhKTtcbiAgICAgIGlmICh2IDwgMCB8fCB2ID49IGJhc2UpIHtcbiAgICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgICAgICBcImludF9vZl9zdHJpbmdcIlxuICAgICAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2MkMSA9IGJhc2UgKiBhY2MgKyB2O1xuICAgICAgaWYgKGFjYyQxID4gdGhyZXNob2xkKSB7XG4gICAgICAgIHRocm93IFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgXCJpbnRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgIF9hY2MgPSBhY2MkMTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICB2YXIgcmVzID0gbWF0Y2hbMV0gKiBhdXgoZCwgaSArIDEgfCAwKTtcbiAgdmFyIG9yX3JlcyA9IHJlcyB8IDA7XG4gIGlmIChiYXNlID09PSAxMCAmJiByZXMgIT09IG9yX3Jlcykge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIG9yX3Jlcztcbn1cblxuZnVuY3Rpb24gY2FtbF9pbnQ2NF9vZl9zdHJpbmcocykge1xuICB2YXIgbWF0Y2ggPSBwYXJzZV9zaWduX2FuZF9iYXNlKHMpO1xuICB2YXIgaGJhc2UgPSBtYXRjaFsyXTtcbiAgdmFyIGkgPSBtYXRjaFswXTtcbiAgdmFyIGJhc2UgPSBDYW1sX2ludDY0Lm9mX2ludDMyKGludF9vZl9zdHJpbmdfYmFzZShoYmFzZSkpO1xuICB2YXIgc2lnbiA9IENhbWxfaW50NjQub2ZfaW50MzIobWF0Y2hbMV0pO1xuICB2YXIgdGhyZXNob2xkO1xuICBzd2l0Y2ggKGhiYXNlKSB7XG4gICAgY2FzZSAvKiBPY3QgKi8wIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5taygtMSwgNTM2ODcwOTExKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBIZXggKi8xIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5taygtMSwgMjY4NDM1NDU1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBEZWMgKi8yIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5taygtMTcxNzk4NjkxOSwgNDI5NDk2NzI5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBCaW4gKi8zIDpcbiAgICAgICAgdGhyZXNob2xkID0gQ2FtbF9pbnQ2NC5tYXhfaW50O1xuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICB2YXIgbGVuID0gcy5sZW5ndGg7XG4gIHZhciBjID0gaSA8IGxlbiA/IHMuY2hhckNvZGVBdChpKSA6IC8qIFwiXFwwMDBcIiAqLzA7XG4gIHZhciBkID0gQ2FtbF9pbnQ2NC5vZl9pbnQzMihwYXJzZV9kaWdpdChjKSk7XG4gIGlmIChDYW1sX2ludDY0Lmx0KGQsIENhbWxfaW50NjQuemVybykgfHwgQ2FtbF9pbnQ2NC5nZShkLCBiYXNlKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICAgIFwiaW50NjRfb2Zfc3RyaW5nXCJcbiAgICAgICAgXTtcbiAgfVxuICB2YXIgYXV4ID0gZnVuY3Rpb24gKF9hY2MsIF9rKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGsgPSBfaztcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKGsgPT09IGxlbikge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzLmNoYXJDb2RlQXQoayk7XG4gICAgICBpZiAoYSA9PT0gLyogXCJfXCIgKi85NSkge1xuICAgICAgICBfayA9IGsgKyAxIHwgMDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgdmFyIHYgPSBDYW1sX2ludDY0Lm9mX2ludDMyKHBhcnNlX2RpZ2l0KGEpKTtcbiAgICAgIGlmIChDYW1sX2ludDY0Lmx0KHYsIENhbWxfaW50NjQuemVybykgfHwgQ2FtbF9pbnQ2NC5nZSh2LCBiYXNlKSB8fCBDYW1sX2ludDY0Lmd0KGFjYywgdGhyZXNob2xkKSkge1xuICAgICAgICB0aHJvdyBbXG4gICAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgICAgIFwiaW50NjRfb2Zfc3RyaW5nXCJcbiAgICAgICAgICAgIF07XG4gICAgICB9XG4gICAgICB2YXIgYWNjJDEgPSBDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0Lm11bChiYXNlLCBhY2MpLCB2KTtcbiAgICAgIF9rID0gayArIDEgfCAwO1xuICAgICAgX2FjYyA9IGFjYyQxO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHZhciByZXMgPSBDYW1sX2ludDY0Lm11bChzaWduLCBhdXgoZCwgaSArIDEgfCAwKSk7XG4gIHZhciBvcl9yZXMgPSBDYW1sX2ludDY0Lm9yXyhyZXMsIENhbWxfaW50NjQuemVybyk7XG4gIGlmIChDYW1sX2ludDY0LmVxKGJhc2UsIENhbWxfaW50NjQubWsoMTAsIDApKSAmJiBDYW1sX2ludDY0Lm5lcShyZXMsIG9yX3JlcykpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICBcImludDY0X29mX3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIG9yX3Jlcztcbn1cblxuZnVuY3Rpb24gaW50X29mX2Jhc2UocGFyYW0pIHtcbiAgc3dpdGNoIChwYXJhbSkge1xuICAgIGNhc2UgLyogT2N0ICovMCA6XG4gICAgICAgIHJldHVybiA4O1xuICAgIGNhc2UgLyogSGV4ICovMSA6XG4gICAgICAgIHJldHVybiAxNjtcbiAgICBjYXNlIC8qIERlYyAqLzIgOlxuICAgICAgICByZXR1cm4gMTA7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlKGMpIHtcbiAgaWYgKGMgPj0gLyogXCJBXCIgKi82NSAmJiBjIDw9IC8qIFwiWlwiICovOTAgfHwgYyA+PSAvKiBcIlxcMTkyXCIgKi8xOTIgJiYgYyA8PSAvKiBcIlxcMjE0XCIgKi8yMTQgfHwgYyA+PSAvKiBcIlxcMjE2XCIgKi8yMTYgJiYgYyA8PSAvKiBcIlxcMjIyXCIgKi8yMjIpIHtcbiAgICByZXR1cm4gYyArIDMyIHwgMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYztcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZV9mb3JtYXQoZm10KSB7XG4gIHZhciBsZW4gPSBmbXQubGVuZ3RoO1xuICBpZiAobGVuID4gMzEpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImZvcm1hdF9pbnQ6IGZvcm1hdCB0b28gbG9uZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIGYgPSB7XG4gICAganVzdGlmeTogXCIrXCIsXG4gICAgc2lnbnN0eWxlOiBcIi1cIixcbiAgICBmaWx0ZXI6IFwiIFwiLFxuICAgIGFsdGVybmF0ZTogZmFsc2UsXG4gICAgYmFzZTogLyogRGVjICovMixcbiAgICBzaWduZWRjb252OiBmYWxzZSxcbiAgICB3aWR0aDogMCxcbiAgICB1cHBlcmNhc2U6IGZhbHNlLFxuICAgIHNpZ246IDEsXG4gICAgcHJlYzogLTEsXG4gICAgY29udjogXCJmXCJcbiAgfTtcbiAgdmFyIF9pID0gMDtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPj0gbGVuKSB7XG4gICAgICByZXR1cm4gZjtcbiAgICB9XG4gICAgdmFyIGMgPSBmbXQuY2hhckNvZGVBdChpKTtcbiAgICB2YXIgZXhpdCA9IDA7XG4gICAgaWYgKGMgPj0gNjkpIHtcbiAgICAgIGlmIChjID49IDg4KSB7XG4gICAgICAgIGlmIChjID49IDEyMSkge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXRjaCAoYyAtIDg4IHwgMCkge1xuICAgICAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgICAgICAgICBmLmJhc2UgPSAvKiBIZXggKi8xO1xuICAgICAgICAgICAgICAgIGYudXBwZXJjYXNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICBjYXNlIDEzIDpcbiAgICAgICAgICAgIGNhc2UgMTQgOlxuICAgICAgICAgICAgY2FzZSAxNSA6XG4gICAgICAgICAgICAgICAgZXhpdCA9IDU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDEyIDpcbiAgICAgICAgICAgIGNhc2UgMTcgOlxuICAgICAgICAgICAgICAgIGV4aXQgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMyA6XG4gICAgICAgICAgICAgICAgZi5iYXNlID0gLyogT2N0ICovMDtcbiAgICAgICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgICAgICBjYXNlIDI5IDpcbiAgICAgICAgICAgICAgICBmLmJhc2UgPSAvKiBEZWMgKi8yO1xuICAgICAgICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgICBjYXNlIDIgOlxuICAgICAgICAgICAgY2FzZSAzIDpcbiAgICAgICAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgICBjYXNlIDUgOlxuICAgICAgICAgICAgY2FzZSA2IDpcbiAgICAgICAgICAgIGNhc2UgNyA6XG4gICAgICAgICAgICBjYXNlIDggOlxuICAgICAgICAgICAgY2FzZSA5IDpcbiAgICAgICAgICAgIGNhc2UgMTAgOlxuICAgICAgICAgICAgY2FzZSAxMSA6XG4gICAgICAgICAgICBjYXNlIDE2IDpcbiAgICAgICAgICAgIGNhc2UgMTggOlxuICAgICAgICAgICAgY2FzZSAxOSA6XG4gICAgICAgICAgICBjYXNlIDIwIDpcbiAgICAgICAgICAgIGNhc2UgMjEgOlxuICAgICAgICAgICAgY2FzZSAyMiA6XG4gICAgICAgICAgICBjYXNlIDI0IDpcbiAgICAgICAgICAgIGNhc2UgMjUgOlxuICAgICAgICAgICAgY2FzZSAyNiA6XG4gICAgICAgICAgICBjYXNlIDI3IDpcbiAgICAgICAgICAgIGNhc2UgMjggOlxuICAgICAgICAgICAgY2FzZSAzMCA6XG4gICAgICAgICAgICBjYXNlIDMxIDpcbiAgICAgICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzIgOlxuICAgICAgICAgICAgICAgIGYuYmFzZSA9IC8qIEhleCAqLzE7XG4gICAgICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGMgPj0gNzIpIHtcbiAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmLnNpZ25lZGNvbnYgPSB0cnVlO1xuICAgICAgICBmLnVwcGVyY2FzZSA9IHRydWU7XG4gICAgICAgIGYuY29udiA9IFN0cmluZy5mcm9tQ2hhckNvZGUobG93ZXJjYXNlKGMpKTtcbiAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgMzUgOlxuICAgICAgICAgICAgZi5hbHRlcm5hdGUgPSB0cnVlO1xuICAgICAgICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIGNhc2UgMzIgOlxuICAgICAgICBjYXNlIDQzIDpcbiAgICAgICAgICAgIGV4aXQgPSAyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDUgOlxuICAgICAgICAgICAgZi5qdXN0aWZ5ID0gXCItXCI7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA0NiA6XG4gICAgICAgICAgICBmLnByZWMgPSAwO1xuICAgICAgICAgICAgdmFyIGogPSBpICsgMSB8IDA7XG4gICAgICAgICAgICB3aGlsZSgoZnVuY3Rpb24oail7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIHZhciB3ID0gZm10LmNoYXJDb2RlQXQoaikgLSAvKiBcIjBcIiAqLzQ4IHwgMDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3ID49IDAgJiYgdyA8PSA5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KGopKSgpKSB7XG4gICAgICAgICAgICAgIGYucHJlYyA9IChDYW1sX2ludDMyLmltdWwoZi5wcmVjLCAxMCkgKyBmbXQuY2hhckNvZGVBdChqKSB8IDApIC0gLyogXCIwXCIgKi80OCB8IDA7XG4gICAgICAgICAgICAgIGogPSBqICsgMSB8IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX2kgPSBqO1xuICAgICAgICAgICAgY29udGludWUgO1xuICAgICAgICBjYXNlIDMzIDpcbiAgICAgICAgY2FzZSAzNCA6XG4gICAgICAgIGNhc2UgMzYgOlxuICAgICAgICBjYXNlIDM3IDpcbiAgICAgICAgY2FzZSAzOCA6XG4gICAgICAgIGNhc2UgMzkgOlxuICAgICAgICBjYXNlIDQwIDpcbiAgICAgICAgY2FzZSA0MSA6XG4gICAgICAgIGNhc2UgNDIgOlxuICAgICAgICBjYXNlIDQ0IDpcbiAgICAgICAgY2FzZSA0NyA6XG4gICAgICAgICAgICBleGl0ID0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ4IDpcbiAgICAgICAgICAgIGYuZmlsdGVyID0gXCIwXCI7XG4gICAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgICAgY2FzZSA0OSA6XG4gICAgICAgIGNhc2UgNTAgOlxuICAgICAgICBjYXNlIDUxIDpcbiAgICAgICAgY2FzZSA1MiA6XG4gICAgICAgIGNhc2UgNTMgOlxuICAgICAgICBjYXNlIDU0IDpcbiAgICAgICAgY2FzZSA1NSA6XG4gICAgICAgIGNhc2UgNTYgOlxuICAgICAgICBjYXNlIDU3IDpcbiAgICAgICAgICAgIGV4aXQgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZXhpdCA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXRjaCAoZXhpdCkge1xuICAgICAgY2FzZSAxIDpcbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIGYuc2lnbnN0eWxlID0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcbiAgICAgICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICBjYXNlIDMgOlxuICAgICAgICAgIGYud2lkdGggPSAwO1xuICAgICAgICAgIHZhciBqJDEgPSBpO1xuICAgICAgICAgIHdoaWxlKChmdW5jdGlvbihqJDEpe1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB3ID0gZm10LmNoYXJDb2RlQXQoaiQxKSAtIC8qIFwiMFwiICovNDggfCAwO1xuICAgICAgICAgICAgICAgIHJldHVybiB3ID49IDAgJiYgdyA8PSA5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0oaiQxKSkoKSkge1xuICAgICAgICAgICAgZi53aWR0aCA9IChDYW1sX2ludDMyLmltdWwoZi53aWR0aCwgMTApICsgZm10LmNoYXJDb2RlQXQoaiQxKSB8IDApIC0gLyogXCIwXCIgKi80OCB8IDA7XG4gICAgICAgICAgICBqJDEgPSBqJDEgKyAxIHwgMDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIF9pID0gaiQxO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIGNhc2UgNCA6XG4gICAgICAgICAgZi5zaWduZWRjb252ID0gdHJ1ZTtcbiAgICAgICAgICBmLmJhc2UgPSAvKiBEZWMgKi8yO1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIGNhc2UgNSA6XG4gICAgICAgICAgZi5zaWduZWRjb252ID0gdHJ1ZTtcbiAgICAgICAgICBmLmNvbnYgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIFxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluaXNoX2Zvcm1hdHRpbmcoY29uZmlnLCByYXdidWZmZXIpIHtcbiAgdmFyIGp1c3RpZnkgPSBjb25maWcuanVzdGlmeTtcbiAgdmFyIHNpZ25zdHlsZSA9IGNvbmZpZy5zaWduc3R5bGU7XG4gIHZhciBmaWx0ZXIgPSBjb25maWcuZmlsdGVyO1xuICB2YXIgYWx0ZXJuYXRlID0gY29uZmlnLmFsdGVybmF0ZTtcbiAgdmFyIGJhc2UgPSBjb25maWcuYmFzZTtcbiAgdmFyIHNpZ25lZGNvbnYgPSBjb25maWcuc2lnbmVkY29udjtcbiAgdmFyIHdpZHRoID0gY29uZmlnLndpZHRoO1xuICB2YXIgdXBwZXJjYXNlID0gY29uZmlnLnVwcGVyY2FzZTtcbiAgdmFyIHNpZ24gPSBjb25maWcuc2lnbjtcbiAgdmFyIGxlbiA9IHJhd2J1ZmZlci5sZW5ndGg7XG4gIGlmIChzaWduZWRjb252ICYmIChzaWduIDwgMCB8fCBzaWduc3R5bGUgIT09IFwiLVwiKSkge1xuICAgIGxlbiA9IGxlbiArIDEgfCAwO1xuICB9XG4gIGlmIChhbHRlcm5hdGUpIHtcbiAgICBpZiAoYmFzZSA9PT0gLyogT2N0ICovMCkge1xuICAgICAgbGVuID0gbGVuICsgMSB8IDA7XG4gICAgfSBlbHNlIGlmIChiYXNlID09PSAvKiBIZXggKi8xKSB7XG4gICAgICBsZW4gPSBsZW4gKyAyIHwgMDtcbiAgICB9XG4gICAgXG4gIH1cbiAgdmFyIGJ1ZmZlciA9IFwiXCI7XG4gIGlmIChqdXN0aWZ5ID09PSBcIitcIiAmJiBmaWx0ZXIgPT09IFwiIFwiKSB7XG4gICAgZm9yKHZhciBfZm9yID0gbGVuOyBfZm9yIDwgd2lkdGg7ICsrX2Zvcil7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBmaWx0ZXI7XG4gICAgfVxuICB9XG4gIGlmIChzaWduZWRjb252KSB7XG4gICAgaWYgKHNpZ24gPCAwKSB7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBcIi1cIjtcbiAgICB9IGVsc2UgaWYgKHNpZ25zdHlsZSAhPT0gXCItXCIpIHtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIHNpZ25zdHlsZTtcbiAgICB9XG4gICAgXG4gIH1cbiAgaWYgKGFsdGVybmF0ZSAmJiBiYXNlID09PSAvKiBPY3QgKi8wKSB7XG4gICAgYnVmZmVyID0gYnVmZmVyICsgXCIwXCI7XG4gIH1cbiAgaWYgKGFsdGVybmF0ZSAmJiBiYXNlID09PSAvKiBIZXggKi8xKSB7XG4gICAgYnVmZmVyID0gYnVmZmVyICsgXCIweFwiO1xuICB9XG4gIGlmIChqdXN0aWZ5ID09PSBcIitcIiAmJiBmaWx0ZXIgPT09IFwiMFwiKSB7XG4gICAgZm9yKHZhciBfZm9yJDEgPSBsZW47IF9mb3IkMSA8IHdpZHRoOyArK19mb3IkMSl7XG4gICAgICBidWZmZXIgPSBidWZmZXIgKyBmaWx0ZXI7XG4gICAgfVxuICB9XG4gIGJ1ZmZlciA9IHVwcGVyY2FzZSA/IGJ1ZmZlciArIHJhd2J1ZmZlci50b1VwcGVyQ2FzZSgpIDogYnVmZmVyICsgcmF3YnVmZmVyO1xuICBpZiAoanVzdGlmeSA9PT0gXCItXCIpIHtcbiAgICBmb3IodmFyIF9mb3IkMiA9IGxlbjsgX2ZvciQyIDwgd2lkdGg7ICsrX2ZvciQyKXtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlciArIFwiIFwiO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnVmZmVyO1xufVxuXG5mdW5jdGlvbiBjYW1sX2Zvcm1hdF9pbnQoZm10LCBpKSB7XG4gIGlmIChmbXQgPT09IFwiJWRcIikge1xuICAgIHJldHVybiBTdHJpbmcoaSk7XG4gIH1cbiAgdmFyIGYgPSBwYXJzZV9mb3JtYXQoZm10KTtcbiAgdmFyIGkkMSA9IGkgPCAwID8gKFxuICAgICAgZi5zaWduZWRjb252ID8gKGYuc2lnbiA9IC0xLCAtaSkgOiAoaSA+Pj4gMClcbiAgICApIDogaTtcbiAgdmFyIHMgPSBpJDEudG9TdHJpbmcoaW50X29mX2Jhc2UoZi5iYXNlKSk7XG4gIGlmIChmLnByZWMgPj0gMCkge1xuICAgIGYuZmlsdGVyID0gXCIgXCI7XG4gICAgdmFyIG4gPSBmLnByZWMgLSBzLmxlbmd0aCB8IDA7XG4gICAgaWYgKG4gPiAwKSB7XG4gICAgICBzID0gXCIwXCIucmVwZWF0KG4pICsgcztcbiAgICB9XG4gICAgXG4gIH1cbiAgcmV0dXJuIGZpbmlzaF9mb3JtYXR0aW5nKGYsIHMpO1xufVxuXG5mdW5jdGlvbiBkZWNfb2ZfcG9zX2ludDY0KHgpIHtcbiAgaWYgKCFDYW1sX2ludDY0Lmx0KHgsIENhbWxfaW50NjQuemVybykpIHtcbiAgICByZXR1cm4gQ2FtbF9pbnQ2NC50b19zdHJpbmcoeCk7XG4gIH1cbiAgdmFyIHdiYXNlID0gQ2FtbF9pbnQ2NC5taygxMCwgMCk7XG4gIHZhciB5ID0gQ2FtbF9pbnQ2NC5kaXNjYXJkX3NpZ24oeCk7XG4gIHZhciBtYXRjaCA9IENhbWxfaW50NjQuZGl2X21vZCh5LCB3YmFzZSk7XG4gIHZhciBtYXRjaCQxID0gQ2FtbF9pbnQ2NC5kaXZfbW9kKENhbWxfaW50NjQuYWRkKENhbWxfaW50NjQubWsoOCwgMCksIG1hdGNoWzFdKSwgd2Jhc2UpO1xuICB2YXIgcXVvdGllbnQgPSBDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0LmFkZChDYW1sX2ludDY0Lm1rKC04NTg5OTM0NjAsIDIxNDc0ODM2NCksIG1hdGNoWzBdKSwgbWF0Y2gkMVswXSk7XG4gIHJldHVybiBDYW1sX2ludDY0LnRvX3N0cmluZyhxdW90aWVudCkgKyBcIjAxMjM0NTY3ODlcIltDYW1sX2ludDY0LnRvX2ludDMyKG1hdGNoJDFbMV0pXTtcbn1cblxuZnVuY3Rpb24gb2N0X29mX2ludDY0KHgpIHtcbiAgdmFyIHMgPSBcIlwiO1xuICB2YXIgd2Jhc2UgPSBDYW1sX2ludDY0Lm1rKDgsIDApO1xuICB2YXIgY3Z0YmwgPSBcIjAxMjM0NTY3XCI7XG4gIGlmIChDYW1sX2ludDY0Lmx0KHgsIENhbWxfaW50NjQuemVybykpIHtcbiAgICB2YXIgeSA9IENhbWxfaW50NjQuZGlzY2FyZF9zaWduKHgpO1xuICAgIHZhciBtYXRjaCA9IENhbWxfaW50NjQuZGl2X21vZCh5LCB3YmFzZSk7XG4gICAgdmFyIHF1b3RpZW50ID0gQ2FtbF9pbnQ2NC5hZGQoQ2FtbF9pbnQ2NC5taygwLCAyNjg0MzU0NTYpLCBtYXRjaFswXSk7XG4gICAgdmFyIG1vZHVsdXMgPSBtYXRjaFsxXTtcbiAgICBzID0gY3Z0YmxbQ2FtbF9pbnQ2NC50b19pbnQzMihtb2R1bHVzKV0gKyBzO1xuICAgIHdoaWxlKENhbWxfaW50NjQubmVxKHF1b3RpZW50LCBDYW1sX2ludDY0Lnplcm8pKSB7XG4gICAgICB2YXIgbWF0Y2gkMSA9IENhbWxfaW50NjQuZGl2X21vZChxdW90aWVudCwgd2Jhc2UpO1xuICAgICAgcXVvdGllbnQgPSBtYXRjaCQxWzBdO1xuICAgICAgbW9kdWx1cyA9IG1hdGNoJDFbMV07XG4gICAgICBzID0gY3Z0YmxbQ2FtbF9pbnQ2NC50b19pbnQzMihtb2R1bHVzKV0gKyBzO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1hdGNoJDIgPSBDYW1sX2ludDY0LmRpdl9tb2QoeCwgd2Jhc2UpO1xuICAgIHZhciBxdW90aWVudCQxID0gbWF0Y2gkMlswXTtcbiAgICB2YXIgbW9kdWx1cyQxID0gbWF0Y2gkMlsxXTtcbiAgICBzID0gY3Z0YmxbQ2FtbF9pbnQ2NC50b19pbnQzMihtb2R1bHVzJDEpXSArIHM7XG4gICAgd2hpbGUoQ2FtbF9pbnQ2NC5uZXEocXVvdGllbnQkMSwgQ2FtbF9pbnQ2NC56ZXJvKSkge1xuICAgICAgdmFyIG1hdGNoJDMgPSBDYW1sX2ludDY0LmRpdl9tb2QocXVvdGllbnQkMSwgd2Jhc2UpO1xuICAgICAgcXVvdGllbnQkMSA9IG1hdGNoJDNbMF07XG4gICAgICBtb2R1bHVzJDEgPSBtYXRjaCQzWzFdO1xuICAgICAgcyA9IGN2dGJsW0NhbWxfaW50NjQudG9faW50MzIobW9kdWx1cyQxKV0gKyBzO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIGNhbWxfaW50NjRfZm9ybWF0KGZtdCwgeCkge1xuICBpZiAoZm10ID09PSBcIiVkXCIpIHtcbiAgICByZXR1cm4gQ2FtbF9pbnQ2NC50b19zdHJpbmcoeCk7XG4gIH1cbiAgdmFyIGYgPSBwYXJzZV9mb3JtYXQoZm10KTtcbiAgdmFyIHgkMSA9IGYuc2lnbmVkY29udiAmJiBDYW1sX2ludDY0Lmx0KHgsIENhbWxfaW50NjQuemVybykgPyAoZi5zaWduID0gLTEsIENhbWxfaW50NjQubmVnKHgpKSA6IHg7XG4gIHZhciBtYXRjaCA9IGYuYmFzZTtcbiAgdmFyIHM7XG4gIHN3aXRjaCAobWF0Y2gpIHtcbiAgICBjYXNlIC8qIE9jdCAqLzAgOlxuICAgICAgICBzID0gb2N0X29mX2ludDY0KHgkMSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgLyogSGV4ICovMSA6XG4gICAgICAgIHMgPSBDYW1sX2ludDY0LnRvX2hleCh4JDEpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIERlYyAqLzIgOlxuICAgICAgICBzID0gZGVjX29mX3Bvc19pbnQ2NCh4JDEpO1xuICAgICAgICBicmVhaztcbiAgICBcbiAgfVxuICB2YXIgZmlsbF9zO1xuICBpZiAoZi5wcmVjID49IDApIHtcbiAgICBmLmZpbHRlciA9IFwiIFwiO1xuICAgIHZhciBuID0gZi5wcmVjIC0gcy5sZW5ndGggfCAwO1xuICAgIGZpbGxfcyA9IG4gPiAwID8gXCIwXCIucmVwZWF0KG4pICsgcyA6IHM7XG4gIH0gZWxzZSB7XG4gICAgZmlsbF9zID0gcztcbiAgfVxuICByZXR1cm4gZmluaXNoX2Zvcm1hdHRpbmcoZiwgZmlsbF9zKTtcbn1cblxuZnVuY3Rpb24gY2FtbF9mb3JtYXRfZmxvYXQoZm10LCB4KSB7XG4gIHZhciBmID0gcGFyc2VfZm9ybWF0KGZtdCk7XG4gIHZhciBwcmVjID0gZi5wcmVjIDwgMCA/IDYgOiBmLnByZWM7XG4gIHZhciB4JDEgPSB4IDwgMCA/IChmLnNpZ24gPSAtMSwgLXgpIDogeDtcbiAgdmFyIHMgPSBcIlwiO1xuICBpZiAoaXNOYU4oeCQxKSkge1xuICAgIHMgPSBcIm5hblwiO1xuICAgIGYuZmlsdGVyID0gXCIgXCI7XG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUoeCQxKSkge1xuICAgIHZhciBtYXRjaCA9IGYuY29udjtcbiAgICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgICBjYXNlIFwiZVwiIDpcbiAgICAgICAgICBzID0geCQxLnRvRXhwb25lbnRpYWwocHJlYyk7XG4gICAgICAgICAgdmFyIGkgPSBzLmxlbmd0aDtcbiAgICAgICAgICBpZiAoc1tpIC0gMyB8IDBdID09PSBcImVcIikge1xuICAgICAgICAgICAgcyA9IHMuc2xpY2UoMCwgaSAtIDEgfCAwKSArIChcIjBcIiArIHMuc2xpY2UoaSAtIDEgfCAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZcIiA6XG4gICAgICAgICAgcyA9IHgkMS50b0ZpeGVkKHByZWMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImdcIiA6XG4gICAgICAgICAgdmFyIHByZWMkMSA9IHByZWMgIT09IDAgPyBwcmVjIDogMTtcbiAgICAgICAgICBzID0geCQxLnRvRXhwb25lbnRpYWwocHJlYyQxIC0gMSB8IDApO1xuICAgICAgICAgIHZhciBqID0gcy5pbmRleE9mKFwiZVwiKTtcbiAgICAgICAgICB2YXIgZXhwID0gTnVtYmVyKHMuc2xpY2UoaiArIDEgfCAwKSkgfCAwO1xuICAgICAgICAgIGlmIChleHAgPCAtNCB8fCB4JDEgPj0gMWUyMSB8fCB4JDEudG9GaXhlZCgpLmxlbmd0aCA+IHByZWMkMSkge1xuICAgICAgICAgICAgdmFyIGkkMSA9IGogLSAxIHwgMDtcbiAgICAgICAgICAgIHdoaWxlKHNbaSQxXSA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgaSQxID0gaSQxIC0gMSB8IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHNbaSQxXSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgaSQxID0gaSQxIC0gMSB8IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzID0gcy5zbGljZSgwLCBpJDEgKyAxIHwgMCkgKyBzLnNsaWNlKGopO1xuICAgICAgICAgICAgdmFyIGkkMiA9IHMubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNbaSQyIC0gMyB8IDBdID09PSBcImVcIikge1xuICAgICAgICAgICAgICBzID0gcy5zbGljZSgwLCBpJDIgLSAxIHwgMCkgKyAoXCIwXCIgKyBzLnNsaWNlKGkkMiAtIDEgfCAwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHAgPSBwcmVjJDE7XG4gICAgICAgICAgICBpZiAoZXhwIDwgMCkge1xuICAgICAgICAgICAgICBwID0gcCAtIChleHAgKyAxIHwgMCkgfCAwO1xuICAgICAgICAgICAgICBzID0geCQxLnRvRml4ZWQocCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGlsZSgoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHMgPSB4JDEudG9GaXhlZChwKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5sZW5ndGggPiAocHJlYyQxICsgMSB8IDApO1xuICAgICAgICAgICAgICAgICAgICB9KSgpKSB7XG4gICAgICAgICAgICAgICAgcCA9IHAgLSAxIHwgMDtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwICE9PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gcy5sZW5ndGggLSAxIHwgMDtcbiAgICAgICAgICAgICAgd2hpbGUoc1trXSA9PT0gXCIwXCIpIHtcbiAgICAgICAgICAgICAgICBrID0gayAtIDEgfCAwO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoc1trXSA9PT0gXCIuXCIpIHtcbiAgICAgICAgICAgICAgICBrID0gayAtIDEgfCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHMgPSBzLnNsaWNlKDAsIGsgKyAxIHwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcyA9IFwiaW5mXCI7XG4gICAgZi5maWx0ZXIgPSBcIiBcIjtcbiAgfVxuICByZXR1cm4gZmluaXNoX2Zvcm1hdHRpbmcoZiwgcyk7XG59XG5cbnZhciBjYW1sX2hleHN0cmluZ19vZl9mbG9hdCA9IChmdW5jdGlvbih4LHByZWMsc3R5bGUpe1xuICBpZiAoIWlzRmluaXRlKHgpKSB7XG4gICAgaWYgKGlzTmFOKHgpKSByZXR1cm4gXCJuYW5cIjtcbiAgICByZXR1cm4geCA+IDAgPyBcImluZmluaXR5XCI6XCItaW5maW5pdHlcIjtcbiAgfVxuICB2YXIgc2lnbiA9ICh4PT0wICYmIDEveCA9PSAtSW5maW5pdHkpPzE6KHg+PTApPzA6MTtcbiAgaWYoc2lnbikgeCA9IC14O1xuICB2YXIgZXhwID0gMDtcbiAgaWYgKHggPT0gMCkgeyB9XG4gIGVsc2UgaWYgKHggPCAxKSB7XG4gICAgd2hpbGUgKHggPCAxICYmIGV4cCA+IC0xMDIyKSAgeyB4ICo9IDI7IGV4cC0tIH1cbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoeCA+PSAyKSB7IHggLz0gMjsgZXhwKysgfVxuICB9XG4gIHZhciBleHBfc2lnbiA9IGV4cCA8IDAgPyAnJyA6ICcrJztcbiAgdmFyIHNpZ25fc3RyID0gJyc7XG4gIGlmIChzaWduKSBzaWduX3N0ciA9ICctJ1xuICBlbHNlIHtcbiAgICBzd2l0Y2goc3R5bGUpe1xuICAgIGNhc2UgNDMgLyogJysnICovOiBzaWduX3N0ciA9ICcrJzsgYnJlYWs7XG4gICAgY2FzZSAzMiAvKiAnICcgKi86IHNpZ25fc3RyID0gJyAnOyBicmVhaztcbiAgICBkZWZhdWx0OiBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKHByZWMgPj0gMCAmJiBwcmVjIDwgMTMpIHtcbiAgICAvKiBJZiBhIHByZWNpc2lvbiBpcyBnaXZlbiwgYW5kIGlzIHNtYWxsLCByb3VuZCBtYW50aXNzYSBhY2NvcmRpbmdseSAqL1xuICAgICAgdmFyIGNzdCA9IE1hdGgucG93KDIscHJlYyAqIDQpO1xuICAgICAgeCA9IE1hdGgucm91bmQoeCAqIGNzdCkgLyBjc3Q7XG4gIH1cbiAgdmFyIHhfc3RyID0geC50b1N0cmluZygxNik7XG4gIGlmKHByZWMgPj0gMCl7XG4gICAgICB2YXIgaWR4ID0geF9zdHIuaW5kZXhPZignLicpO1xuICAgIGlmKGlkeDwwKSB7XG4gICAgICB4X3N0ciArPSAnLicgKyAgJzAnLnJlcGVhdChwcmVjKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgc2l6ZSA9IGlkeCsxK3ByZWM7XG4gICAgICBpZih4X3N0ci5sZW5ndGggPCBzaXplKVxuICAgICAgICB4X3N0ciArPSAnMCcucmVwZWF0KHNpemUgLSB4X3N0ci5sZW5ndGgpO1xuICAgICAgZWxzZVxuICAgICAgICB4X3N0ciA9IHhfc3RyLnN1YnN0cigwLHNpemUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gIChzaWduX3N0ciArICcweCcgKyB4X3N0ciArICdwJyArIGV4cF9zaWduICsgZXhwLnRvU3RyaW5nKDEwKSk7XG59KTtcblxudmFyIGZsb2F0X29mX3N0cmluZyA9IChmdW5jdGlvbihzLGV4bil7XG5cbiAgICB2YXIgcmVzID0gK3M7XG4gICAgaWYgKChzLmxlbmd0aCA+IDApICYmIChyZXMgPT09IHJlcykpXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgcyA9IHMucmVwbGFjZSgvXy9nLCBcIlwiKTtcbiAgICByZXMgPSArcztcbiAgICBpZiAoKChzLmxlbmd0aCA+IDApICYmIChyZXMgPT09IHJlcykpIHx8IC9eWystXT9uYW4kL2kudGVzdChzKSkge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gICAgdmFyIG0gPSAvXiAqKFsrLV0/KTB4KFswLTlhLWZdKylcXC4/KFswLTlhLWZdKilwKFsrLV0/WzAtOV0rKS9pLmV4ZWMocyk7XG4gICAgLy8gICAgICAgICAgICAxICAgICAgICAyICAgICAgICAgICAgIDMgICAgICAgICAgIDRcbiAgICBpZihtKXtcbiAgICAgICAgdmFyIG0zID0gbVszXS5yZXBsYWNlKC8wKyQvLCcnKTtcbiAgICAgICAgdmFyIG1hbnRpc3NhID0gcGFyc2VJbnQobVsxXSArIG1bMl0gKyBtMywgMTYpO1xuICAgICAgICB2YXIgZXhwb25lbnQgPSAobVs0XXwwKSAtIDQqbTMubGVuZ3RoO1xuICAgICAgICByZXMgPSBtYW50aXNzYSAqIE1hdGgucG93KDIsIGV4cG9uZW50KTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKC9eXFwrP2luZihpbml0eSk/JC9pLnRlc3QocykpXG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICBpZiAoL14taW5mKGluaXR5KT8kL2kudGVzdChzKSlcbiAgICAgICAgcmV0dXJuIC1JbmZpbml0eTtcbiAgICB0aHJvdyBleG47XG59KTtcblxuZnVuY3Rpb24gY2FtbF9mbG9hdF9vZl9zdHJpbmcocykge1xuICByZXR1cm4gZmxvYXRfb2Zfc3RyaW5nKHMsIFtcbiAgICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgICAgICAgXCJmbG9hdF9vZl9zdHJpbmdcIlxuICAgICAgICAgICAgXSk7XG59XG5cbnZhciBjYW1sX25hdGl2ZWludF9mb3JtYXQgPSBjYW1sX2Zvcm1hdF9pbnQ7XG5cbnZhciBjYW1sX2ludDMyX2Zvcm1hdCA9IGNhbWxfZm9ybWF0X2ludDtcblxudmFyIGNhbWxfaW50MzJfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuXG52YXIgY2FtbF9uYXRpdmVpbnRfb2Zfc3RyaW5nID0gY2FtbF9pbnRfb2Zfc3RyaW5nO1xuXG5leHBvcnQge1xuICBjYW1sX2Zvcm1hdF9mbG9hdCAsXG4gIGNhbWxfaGV4c3RyaW5nX29mX2Zsb2F0ICxcbiAgY2FtbF9mb3JtYXRfaW50ICxcbiAgY2FtbF9uYXRpdmVpbnRfZm9ybWF0ICxcbiAgY2FtbF9pbnQzMl9mb3JtYXQgLFxuICBjYW1sX2Zsb2F0X29mX3N0cmluZyAsXG4gIGNhbWxfaW50NjRfZm9ybWF0ICxcbiAgY2FtbF9pbnRfb2Zfc3RyaW5nICxcbiAgY2FtbF9pbnQzMl9vZl9zdHJpbmcgLFxuICBjYW1sX2ludDY0X29mX3N0cmluZyAsXG4gIGNhbWxfbmF0aXZlaW50X29mX3N0cmluZyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9pbyBmcm9tIFwiLi9jYW1sX2lvLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX3N5cyBmcm9tIFwiLi9jYW1sX3N5cy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9ieXRlcyBmcm9tIFwiLi9jYW1sX2J5dGVzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2Zvcm1hdCBmcm9tIFwiLi9jYW1sX2Zvcm1hdC5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9zdHJpbmcgZnJvbSBcIi4vY2FtbF9zdHJpbmcuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfanNfZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2pzX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwgZnJvbSBcIi4vY2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxpbnRlcm5hbEZvcm1hdEJhc2ljcyBmcm9tIFwiLi9jYW1saW50ZXJuYWxGb3JtYXRCYXNpY3MuanNcIjtcblxuZnVuY3Rpb24gZmFpbHdpdGgocykge1xuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgIHNcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGludmFsaWRfYXJnKHMpIHtcbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICBzXG4gICAgICBdO1xufVxuXG52YXIgRXhpdCA9IENhbWxfZXhjZXB0aW9ucy5jcmVhdGUoXCJQZXJ2YXNpdmVzLkV4aXRcIik7XG5cbmZ1bmN0aW9uIGFicyh4KSB7XG4gIGlmICh4ID49IDApIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLXggfCAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxub3QoeCkge1xuICByZXR1cm4geCBeIC0xO1xufVxuXG52YXIgbWluX2ludCA9IC0yMTQ3NDgzNjQ4O1xuXG5mdW5jdGlvbiBjbGFzc2lmeV9mbG9hdCh4KSB7XG4gIGlmIChpc0Zpbml0ZSh4KSkge1xuICAgIGlmIChNYXRoLmFicyh4KSA+PSAyLjIyNTA3Mzg1ODUwNzIwMTM4ZS0zMDgpIHtcbiAgICAgIHJldHVybiAvKiBGUF9ub3JtYWwgKi8wO1xuICAgIH0gZWxzZSBpZiAoeCAhPT0gMCkge1xuICAgICAgcmV0dXJuIC8qIEZQX3N1Ym5vcm1hbCAqLzE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBGUF96ZXJvICovMjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNOYU4oeCkpIHtcbiAgICByZXR1cm4gLyogRlBfbmFuICovNDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogRlBfaW5maW5pdGUgKi8zO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoYXJfb2ZfaW50KG4pIHtcbiAgaWYgKG4gPCAwIHx8IG4gPiAyNTUpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcImNoYXJfb2ZfaW50XCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Jvb2woYikge1xuICBpZiAoYikge1xuICAgIHJldHVybiBcInRydWVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJmYWxzZVwiO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvb2xfb2Zfc3RyaW5nKHBhcmFtKSB7XG4gIHN3aXRjaCAocGFyYW0pIHtcbiAgICBjYXNlIFwiZmFsc2VcIiA6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIFwidHJ1ZVwiIDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcImJvb2xfb2Zfc3RyaW5nXCJcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvb2xfb2Zfc3RyaW5nX29wdChwYXJhbSkge1xuICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgY2FzZSBcImZhbHNlXCIgOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY2FzZSBcInRydWVcIiA6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludF9vZl9zdHJpbmdfb3B0KHMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKHMpO1xuICB9XG4gIGNhdGNoIChyYXdfZXhuKXtcbiAgICB2YXIgZXhuID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfZXhuKTtcbiAgICBpZiAoZXhuWzBdID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB0aHJvdyBleG47XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRfZmxvYXRfbGV4ZW0ocykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICB2YXIgX2kgPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsKSB7XG4gICAgICByZXR1cm4gcyArIFwiLlwiO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBDYW1sX3N0cmluZy5nZXQocywgaSk7XG4gICAgaWYgKG1hdGNoID49IDQ4KSB7XG4gICAgICBpZiAobWF0Y2ggPj0gNTgpIHtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgICB9XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgaWYgKG1hdGNoICE9PSA0NSkge1xuICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2Zsb2F0KGYpIHtcbiAgcmV0dXJuIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpO1xufVxuXG5mdW5jdGlvbiBmbG9hdF9vZl9zdHJpbmdfb3B0KHMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9mbG9hdF9vZl9zdHJpbmcocyk7XG4gIH1cbiAgY2F0Y2ggKHJhd19leG4pe1xuICAgIHZhciBleG4gPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19leG4pO1xuICAgIGlmIChleG5bMF0gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIHRocm93IGV4bjtcbiAgfVxufVxuXG5mdW5jdGlvbiAkYXQobDEsIGwyKSB7XG4gIGlmIChsMSkge1xuICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgIGwxWzBdLFxuICAgICAgICAgICAgJGF0KGwxWzFdLCBsMilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsMjtcbiAgfVxufVxuXG52YXIgc3RkaW4gPSBDYW1sX2lvLnN0ZGluO1xuXG52YXIgc3Rkb3V0ID0gQ2FtbF9pby5zdGRvdXQ7XG5cbnZhciBzdGRlcnIgPSBDYW1sX2lvLnN0ZGVycjtcblxuZnVuY3Rpb24gb3Blbl9vdXRfZ2VuKG1vZGUsIHBlcm0sIG5hbWUpIHtcbiAgdmFyIGMgPSBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX29wZW5fZGVzY3JpcHRvcl9vdXRcIikoQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9zeXNfb3BlblwiKShuYW1lLCBtb2RlLCBwZXJtKSk7XG4gIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfc2V0X2NoYW5uZWxfbmFtZVwiKShjLCBuYW1lKTtcbiAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIG9wZW5fb3V0KG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5fb3V0X2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl93cm9ubHkgKi8xLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2NyZWF0ICovMyxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdHJ1bmMgKi80LFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdGV4dCAqLzcsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSwgNDM4LCBuYW1lKTtcbn1cblxuZnVuY3Rpb24gb3Blbl9vdXRfYmluKG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5fb3V0X2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl93cm9ubHkgKi8xLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2NyZWF0ICovMyxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIC8qIE9wZW5fdHJ1bmMgKi80LFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIE9wZW5fYmluYXJ5ICovNixcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdLCA0MzgsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBmbHVzaF9hbGwocGFyYW0pIHtcbiAgdmFyIF9wYXJhbSA9IENhbWxfaW8uY2FtbF9tbF9vdXRfY2hhbm5lbHNfbGlzdCh1bmRlZmluZWQpO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtJDEgPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSQxKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHBhcmFtJDFbMF0pO1xuICAgIH1cbiAgICBjYXRjaCAocmF3X2V4bil7XG4gICAgICB2YXIgZXhuID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfZXhuKTtcbiAgICAgIGlmIChleG5bMF0gIT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLnN5c19lcnJvcikge1xuICAgICAgICB0aHJvdyBleG47XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW0kMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9ieXRlcyhvYywgcykge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9vdXRwdXRfYnl0ZXNcIikob2MsIHMsIDAsIHMubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gb3V0cHV0X3N0cmluZyhvYywgcykge1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX291dHB1dChvYywgcywgMCwgcy5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBvdXRwdXQob2MsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIm91dHB1dFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfb3V0cHV0X2J5dGVzXCIpKG9jLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIG91dHB1dF9zdWJzdHJpbmcob2MsIHMsIG9mcywgbGVuKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIm91dHB1dF9zdWJzdHJpbmdcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0KG9jLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIG91dHB1dF92YWx1ZShjaGFuLCB2KSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX291dHB1dF92YWx1ZVwiKShjaGFuLCB2LCAvKiBbXSAqLzApO1xufVxuXG5mdW5jdGlvbiBjbG9zZV9vdXQob2MpIHtcbiAgQ2FtbF9pby5jYW1sX21sX2ZsdXNoKG9jKTtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKShvYyk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX291dF9ub2VycihvYykge1xuICB0cnkge1xuICAgIENhbWxfaW8uY2FtbF9tbF9mbHVzaChvYyk7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgXG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9jbG9zZV9jaGFubmVsXCIpKG9jKTtcbiAgfVxuICBjYXRjaCAoZXhuJDEpe1xuICAgIHJldHVybiA7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3Blbl9pbl9nZW4obW9kZSwgcGVybSwgbmFtZSkge1xuICB2YXIgYyA9IENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfb3Blbl9kZXNjcmlwdG9yX2luXCIpKENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfc3lzX29wZW5cIikobmFtZSwgbW9kZSwgcGVybSkpO1xuICBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX3NldF9jaGFubmVsX25hbWVcIikoYywgbmFtZSk7XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBvcGVuX2luKG5hbWUpIHtcbiAgcmV0dXJuIG9wZW5faW5fZ2VuKC8qIDo6ICovW1xuICAgICAgICAgICAgICAvKiBPcGVuX3Jkb25seSAqLzAsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIE9wZW5fdGV4dCAqLzcsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDAsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBvcGVuX2luX2JpbihuYW1lKSB7XG4gIHJldHVybiBvcGVuX2luX2dlbigvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogT3Blbl9yZG9ubHkgKi8wLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAvKiBPcGVuX2JpbmFyeSAqLzYsXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0sIDAsIG5hbWUpO1xufVxuXG5mdW5jdGlvbiBpbnB1dChpYywgcywgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiaW5wdXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0XCIpKGljLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIHVuc2FmZV9yZWFsbHlfaW5wdXQoaWMsIHMsIF9vZnMsIF9sZW4pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsZW4gPSBfbGVuO1xuICAgIHZhciBvZnMgPSBfb2ZzO1xuICAgIGlmIChsZW4gPD0gMCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHIgPSBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0XCIpKGljLCBzLCBvZnMsIGxlbik7XG4gICAgaWYgKHIgPT09IDApIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmVuZF9vZl9maWxlO1xuICAgIH1cbiAgICBfbGVuID0gbGVuIC0gciB8IDA7XG4gICAgX29mcyA9IG9mcyArIHIgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVhbGx5X2lucHV0KGljLCBzLCBvZnMsIGxlbikge1xuICBpZiAob2ZzIDwgMCB8fCBsZW4gPCAwIHx8IG9mcyA+IChzLmxlbmd0aCAtIGxlbiB8IDApKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJyZWFsbHlfaW5wdXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiB1bnNhZmVfcmVhbGx5X2lucHV0KGljLCBzLCBvZnMsIGxlbik7XG59XG5cbmZ1bmN0aW9uIHJlYWxseV9pbnB1dF9zdHJpbmcoaWMsIGxlbikge1xuICB2YXIgcyA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuKTtcbiAgcmVhbGx5X2lucHV0KGljLCBzLCAwLCBsZW4pO1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcocyk7XG59XG5cbmZ1bmN0aW9uIGlucHV0X2xpbmUoY2hhbikge1xuICB2YXIgYnVpbGRfcmVzdWx0ID0gZnVuY3Rpb24gKGJ1ZiwgX3BvcywgX3BhcmFtKSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgICAgdmFyIHBvcyA9IF9wb3M7XG4gICAgICBpZiAoIXBhcmFtKSB7XG4gICAgICAgIHJldHVybiBidWY7XG4gICAgICB9XG4gICAgICB2YXIgaGQgPSBwYXJhbVswXTtcbiAgICAgIHZhciBsZW4gPSBoZC5sZW5ndGg7XG4gICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhoZCwgMCwgYnVmLCBwb3MgLSBsZW4gfCAwLCBsZW4pO1xuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfcG9zID0gcG9zIC0gbGVuIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICB2YXIgc2NhbiA9IGZ1bmN0aW9uIChfYWNjdSwgX2xlbikge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBsZW4gPSBfbGVuO1xuICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgIHZhciBuID0gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9pbnB1dF9zY2FuX2xpbmVcIikoY2hhbik7XG4gICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICBpZiAoYWNjdSkge1xuICAgICAgICAgIHJldHVybiBidWlsZF9yZXN1bHQoQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhsZW4pLCBsZW4sIGFjY3UpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmVuZF9vZl9maWxlO1xuICAgICAgfVxuICAgICAgaWYgKG4gPiAwKSB7XG4gICAgICAgIHZhciByZXMgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG4gLSAxIHwgMCk7XG4gICAgICAgIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfaW5wdXRcIikoY2hhbiwgcmVzLCAwLCBuIC0gMSB8IDApO1xuICAgICAgICBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0X2NoYXJcIikoY2hhbik7XG4gICAgICAgIGlmICghYWNjdSkge1xuICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxlbiQxID0gKGxlbiArIG4gfCAwKSAtIDEgfCAwO1xuICAgICAgICByZXR1cm4gYnVpbGRfcmVzdWx0KENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuJDEpLCBsZW4kMSwgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHJlcyxcbiAgICAgICAgICAgICAgICAgICAgYWNjdVxuICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICB9XG4gICAgICB2YXIgYmVnID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcygtbiB8IDApO1xuICAgICAgQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9pbnB1dFwiKShjaGFuLCBiZWcsIDAsIC1uIHwgMCk7XG4gICAgICBfbGVuID0gbGVuIC0gbiB8IDA7XG4gICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICBiZWcsXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHNjYW4oLyogW10gKi8wLCAwKSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX2luX25vZXJyKGljKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKShpYyk7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludF9jaGFyKGMpIHtcbiAgcmV0dXJuIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIGMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdHJpbmcocykge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRvdXQsIHMpO1xufVxuXG5mdW5jdGlvbiBwcmludF9ieXRlcyhzKSB7XG4gIHJldHVybiBvdXRwdXRfYnl0ZXMoc3Rkb3V0LCBzKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRfaW50KGkpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3Rkb3V0LCBTdHJpbmcoaSkpO1xufVxuXG5mdW5jdGlvbiBwcmludF9mbG9hdChmKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZG91dCwgdmFsaWRfZmxvYXRfbGV4ZW0oQ2FtbF9mb3JtYXQuY2FtbF9mb3JtYXRfZmxvYXQoXCIlLjEyZ1wiLCBmKSkpO1xufVxuXG5mdW5jdGlvbiBwcmludF9uZXdsaW5lKHBhcmFtKSB7XG4gIENhbWxfaW8uY2FtbF9tbF9vdXRwdXRfY2hhcihzdGRvdXQsIC8qIFwiXFxuXCIgKi8xMCk7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfY2hhcihjKSB7XG4gIHJldHVybiBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCBjKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIG91dHB1dF9zdHJpbmcoc3RkZXJyLCBzKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfYnl0ZXMocykge1xuICByZXR1cm4gb3V0cHV0X2J5dGVzKHN0ZGVyciwgcyk7XG59XG5cbmZ1bmN0aW9uIHByZXJyX2ludChpKSB7XG4gIHJldHVybiBvdXRwdXRfc3RyaW5nKHN0ZGVyciwgU3RyaW5nKGkpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfZmxvYXQoZikge1xuICByZXR1cm4gb3V0cHV0X3N0cmluZyhzdGRlcnIsIHZhbGlkX2Zsb2F0X2xleGVtKENhbWxfZm9ybWF0LmNhbWxfZm9ybWF0X2Zsb2F0KFwiJS4xMmdcIiwgZikpKTtcbn1cblxuZnVuY3Rpb24gcHJlcnJfbmV3bGluZShwYXJhbSkge1xuICBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXIoc3RkZXJyLCAvKiBcIlxcblwiICovMTApO1xuICByZXR1cm4gQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHN0ZGVycik7XG59XG5cbmZ1bmN0aW9uIHJlYWRfbGluZShwYXJhbSkge1xuICBDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KTtcbiAgcmV0dXJuIGlucHV0X2xpbmUoc3RkaW4pO1xufVxuXG5mdW5jdGlvbiByZWFkX2ludChwYXJhbSkge1xuICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9pbnRfb3B0KHBhcmFtKSB7XG4gIHJldHVybiBpbnRfb2Zfc3RyaW5nX29wdCgoQ2FtbF9pby5jYW1sX21sX2ZsdXNoKHN0ZG91dCksIGlucHV0X2xpbmUoc3RkaW4pKSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRfZmxvYXQocGFyYW0pIHtcbiAgcmV0dXJuIENhbWxfZm9ybWF0LmNhbWxfZmxvYXRfb2Zfc3RyaW5nKChDYW1sX2lvLmNhbWxfbWxfZmx1c2goc3Rkb3V0KSwgaW5wdXRfbGluZShzdGRpbikpKTtcbn1cblxuZnVuY3Rpb24gcmVhZF9mbG9hdF9vcHQocGFyYW0pIHtcbiAgcmV0dXJuIGZsb2F0X29mX3N0cmluZ19vcHQoKENhbWxfaW8uY2FtbF9tbF9mbHVzaChzdGRvdXQpLCBpbnB1dF9saW5lKHN0ZGluKSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZm9ybWF0KHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxuZnVuY3Rpb24gJGNhcmV0JGNhcmV0KHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAvKiBGb3JtYXQgKi9bXG4gICAgICAgICAgQ2FtbGludGVybmFsRm9ybWF0QmFzaWNzLmNvbmNhdF9mbXQocGFyYW1bMF0sIHBhcmFtJDFbMF0pLFxuICAgICAgICAgIHBhcmFtWzFdICsgKFwiJSxcIiArIHBhcmFtJDFbMV0pXG4gICAgICAgIF07XG59XG5cbnZhciBleGl0X2Z1bmN0aW9uID0ge1xuICBjb250ZW50czogZmx1c2hfYWxsXG59O1xuXG5mdW5jdGlvbiBhdF9leGl0KGYpIHtcbiAgdmFyIGcgPSBleGl0X2Z1bmN0aW9uLmNvbnRlbnRzO1xuICBleGl0X2Z1bmN0aW9uLmNvbnRlbnRzID0gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgQ3VycnkuXzEoZiwgdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBDdXJyeS5fMShnLCB1bmRlZmluZWQpO1xuICAgIH0pO1xuICBcbn1cblxuZnVuY3Rpb24gZG9fYXRfZXhpdChwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzEoZXhpdF9mdW5jdGlvbi5jb250ZW50cywgdW5kZWZpbmVkKTtcbn1cblxuZnVuY3Rpb24gZXhpdChyZXRjb2RlKSB7XG4gIGRvX2F0X2V4aXQodW5kZWZpbmVkKTtcbiAgcmV0dXJuIENhbWxfc3lzLmNhbWxfc3lzX2V4aXQocmV0Y29kZSk7XG59XG5cbnZhciBtYXhfaW50ID0gMjE0NzQ4MzY0NztcblxudmFyIGluZmluaXR5ID0gSW5maW5pdHk7XG5cbnZhciBuZWdfaW5maW5pdHkgPSAtSW5maW5pdHk7XG5cbnZhciBtYXhfZmxvYXQgPSAxLjc5NzY5MzEzNDg2MjMxNTcxZSszMDg7XG5cbnZhciBtaW5fZmxvYXQgPSAyLjIyNTA3Mzg1ODUwNzIwMTM4ZS0zMDg7XG5cbnZhciBlcHNpbG9uX2Zsb2F0ID0gMi4yMjA0NDYwNDkyNTAzMTMwOGUtMTY7XG5cbnZhciBmbHVzaCA9IENhbWxfaW8uY2FtbF9tbF9mbHVzaDtcblxudmFyIG91dHB1dF9jaGFyID0gQ2FtbF9pby5jYW1sX21sX291dHB1dF9jaGFyO1xuXG52YXIgb3V0cHV0X2J5dGUgPSBDYW1sX2lvLmNhbWxfbWxfb3V0cHV0X2NoYXI7XG5cbmZ1bmN0aW9uIG91dHB1dF9iaW5hcnlfaW50KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9vdXRwdXRfaW50XCIpKHByaW0sIHByaW0kMSk7XG59XG5cbmZ1bmN0aW9uIHNlZWtfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX291dFwiKShwcmltLCBwcmltJDEpO1xufVxuXG5mdW5jdGlvbiBwb3Nfb3V0KHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfcG9zX291dFwiKShwcmltKTtcbn1cblxuZnVuY3Rpb24gb3V0X2NoYW5uZWxfbGVuZ3RoKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2hhbm5lbF9zaXplXCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBzZXRfYmluYXJ5X21vZGVfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIikocHJpbSwgcHJpbSQxKTtcbn1cblxuZnVuY3Rpb24gaW5wdXRfY2hhcihwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2lucHV0X2NoYXJcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGlucHV0X2J5dGUocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9pbnB1dF9jaGFyXCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBpbnB1dF9iaW5hcnlfaW50KHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfaW5wdXRfaW50XCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBpbnB1dF92YWx1ZShwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX2lucHV0X3ZhbHVlXCIpKHByaW0pO1xufVxuXG5mdW5jdGlvbiBzZWVrX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX2luXCIpKHByaW0sIHByaW0kMSk7XG59XG5cbmZ1bmN0aW9uIHBvc19pbihwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX3Bvc19pblwiKShwcmltKTtcbn1cblxuZnVuY3Rpb24gaW5fY2hhbm5lbF9sZW5ndGgocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9jaGFubmVsX3NpemVcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGNsb3NlX2luKHByaW0pIHtcbiAgcmV0dXJuIENhbWxfZXh0ZXJuYWxfcG9seWZpbGwucmVzb2x2ZShcImNhbWxfbWxfY2xvc2VfY2hhbm5lbFwiKShwcmltKTtcbn1cblxuZnVuY3Rpb24gc2V0X2JpbmFyeV9tb2RlX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZXRfYmluYXJ5X21vZGVcIikocHJpbSwgcHJpbSQxKTtcbn1cblxuZnVuY3Rpb24gTGFyZ2VGaWxlX3NlZWtfb3V0KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX291dF82NFwiKShwcmltLCBwcmltJDEpO1xufVxuXG5mdW5jdGlvbiBMYXJnZUZpbGVfcG9zX291dChwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX3Bvc19vdXRfNjRcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9vdXRfY2hhbm5lbF9sZW5ndGgocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9jaGFubmVsX3NpemVfNjRcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9zZWVrX2luKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9zZWVrX2luXzY0XCIpKHByaW0sIHByaW0kMSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9wb3NfaW4ocHJpbSkge1xuICByZXR1cm4gQ2FtbF9leHRlcm5hbF9wb2x5ZmlsbC5yZXNvbHZlKFwiY2FtbF9tbF9wb3NfaW5fNjRcIikocHJpbSk7XG59XG5cbmZ1bmN0aW9uIExhcmdlRmlsZV9pbl9jaGFubmVsX2xlbmd0aChwcmltKSB7XG4gIHJldHVybiBDYW1sX2V4dGVybmFsX3BvbHlmaWxsLnJlc29sdmUoXCJjYW1sX21sX2NoYW5uZWxfc2l6ZV82NFwiKShwcmltKTtcbn1cblxudmFyIExhcmdlRmlsZSA9IHtcbiAgc2Vla19vdXQ6IExhcmdlRmlsZV9zZWVrX291dCxcbiAgcG9zX291dDogTGFyZ2VGaWxlX3Bvc19vdXQsXG4gIG91dF9jaGFubmVsX2xlbmd0aDogTGFyZ2VGaWxlX291dF9jaGFubmVsX2xlbmd0aCxcbiAgc2Vla19pbjogTGFyZ2VGaWxlX3NlZWtfaW4sXG4gIHBvc19pbjogTGFyZ2VGaWxlX3Bvc19pbixcbiAgaW5fY2hhbm5lbF9sZW5ndGg6IExhcmdlRmlsZV9pbl9jaGFubmVsX2xlbmd0aFxufTtcblxuZXhwb3J0IHtcbiAgaW52YWxpZF9hcmcgLFxuICBmYWlsd2l0aCAsXG4gIEV4aXQgLFxuICBhYnMgLFxuICBtYXhfaW50ICxcbiAgbWluX2ludCAsXG4gIGxub3QgLFxuICBpbmZpbml0eSAsXG4gIG5lZ19pbmZpbml0eSAsXG4gIG1heF9mbG9hdCAsXG4gIG1pbl9mbG9hdCAsXG4gIGVwc2lsb25fZmxvYXQgLFxuICBjbGFzc2lmeV9mbG9hdCAsXG4gIGNoYXJfb2ZfaW50ICxcbiAgc3RyaW5nX29mX2Jvb2wgLFxuICBib29sX29mX3N0cmluZyAsXG4gIGJvb2xfb2Zfc3RyaW5nX29wdCAsXG4gIGludF9vZl9zdHJpbmdfb3B0ICxcbiAgc3RyaW5nX29mX2Zsb2F0ICxcbiAgZmxvYXRfb2Zfc3RyaW5nX29wdCAsXG4gICRhdCAsXG4gIHN0ZGluICxcbiAgc3Rkb3V0ICxcbiAgc3RkZXJyICxcbiAgcHJpbnRfY2hhciAsXG4gIHByaW50X3N0cmluZyAsXG4gIHByaW50X2J5dGVzICxcbiAgcHJpbnRfaW50ICxcbiAgcHJpbnRfZmxvYXQgLFxuICBwcmludF9uZXdsaW5lICxcbiAgcHJlcnJfY2hhciAsXG4gIHByZXJyX3N0cmluZyAsXG4gIHByZXJyX2J5dGVzICxcbiAgcHJlcnJfaW50ICxcbiAgcHJlcnJfZmxvYXQgLFxuICBwcmVycl9uZXdsaW5lICxcbiAgcmVhZF9saW5lICxcbiAgcmVhZF9pbnQgLFxuICByZWFkX2ludF9vcHQgLFxuICByZWFkX2Zsb2F0ICxcbiAgcmVhZF9mbG9hdF9vcHQgLFxuICBvcGVuX291dCAsXG4gIG9wZW5fb3V0X2JpbiAsXG4gIG9wZW5fb3V0X2dlbiAsXG4gIGZsdXNoICxcbiAgZmx1c2hfYWxsICxcbiAgb3V0cHV0X2NoYXIgLFxuICBvdXRwdXRfc3RyaW5nICxcbiAgb3V0cHV0X2J5dGVzICxcbiAgb3V0cHV0ICxcbiAgb3V0cHV0X3N1YnN0cmluZyAsXG4gIG91dHB1dF9ieXRlICxcbiAgb3V0cHV0X2JpbmFyeV9pbnQgLFxuICBvdXRwdXRfdmFsdWUgLFxuICBzZWVrX291dCAsXG4gIHBvc19vdXQgLFxuICBvdXRfY2hhbm5lbF9sZW5ndGggLFxuICBjbG9zZV9vdXQgLFxuICBjbG9zZV9vdXRfbm9lcnIgLFxuICBzZXRfYmluYXJ5X21vZGVfb3V0ICxcbiAgb3Blbl9pbiAsXG4gIG9wZW5faW5fYmluICxcbiAgb3Blbl9pbl9nZW4gLFxuICBpbnB1dF9jaGFyICxcbiAgaW5wdXRfbGluZSAsXG4gIGlucHV0ICxcbiAgcmVhbGx5X2lucHV0ICxcbiAgcmVhbGx5X2lucHV0X3N0cmluZyAsXG4gIGlucHV0X2J5dGUgLFxuICBpbnB1dF9iaW5hcnlfaW50ICxcbiAgaW5wdXRfdmFsdWUgLFxuICBzZWVrX2luICxcbiAgcG9zX2luICxcbiAgaW5fY2hhbm5lbF9sZW5ndGggLFxuICBjbG9zZV9pbiAsXG4gIGNsb3NlX2luX25vZXJyICxcbiAgc2V0X2JpbmFyeV9tb2RlX2luICxcbiAgTGFyZ2VGaWxlICxcbiAgc3RyaW5nX29mX2Zvcm1hdCAsXG4gICRjYXJldCRjYXJldCAsXG4gIGV4aXQgLFxuICBhdF9leGl0ICxcbiAgdmFsaWRfZmxvYXRfbGV4ZW0gLFxuICB1bnNhZmVfcmVhbGx5X2lucHV0ICxcbiAgZG9fYXRfZXhpdCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vYmogZnJvbSBcIi4vY2FtbF9vYmouanNcIjtcbmltcG9ydCAqIGFzIFBlcnZhc2l2ZXMgZnJvbSBcIi4vcGVydmFzaXZlcy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIENhbWxfYnVpbHRpbl9leGNlcHRpb25zIGZyb20gXCIuL2NhbWxfYnVpbHRpbl9leGNlcHRpb25zLmpzXCI7XG5cbmZ1bmN0aW9uIGxlbmd0aChsKSB7XG4gIHZhciBfbGVuID0gMDtcbiAgdmFyIF9wYXJhbSA9IGw7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGxlbiA9IF9sZW47XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGxlbjtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgX2xlbiA9IGxlbiArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29ucyhhLCBsKSB7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICBhLFxuICAgICAgICAgIGxcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gaGQocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIHBhcmFtWzBdO1xuICB9XG4gIHRocm93IFtcbiAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuZmFpbHVyZSxcbiAgICAgICAgXCJoZFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiB0bChwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH1cbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5mYWlsdXJlLFxuICAgICAgICBcInRsXCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG50aChsLCBuKSB7XG4gIGlmIChuIDwgMCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5udGhcIlxuICAgICAgICBdO1xuICB9XG4gIHZhciBfbCA9IGw7XG4gIHZhciBfbiA9IG47XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiQxID0gX247XG4gICAgdmFyIGwkMSA9IF9sO1xuICAgIGlmIChsJDEpIHtcbiAgICAgIGlmIChuJDEgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGwkMVswXTtcbiAgICAgIH1cbiAgICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgICBfbCA9IGwkMVsxXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmZhaWx1cmUsXG4gICAgICAgICAgXCJudGhcIlxuICAgICAgICBdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBudGhfb3B0KGwsIG4pIHtcbiAgaWYgKG4gPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0Lm50aFwiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIF9sID0gbDtcbiAgdmFyIF9uID0gbjtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuJDEgPSBfbjtcbiAgICB2YXIgbCQxID0gX2w7XG4gICAgaWYgKCFsJDEpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChuJDEgPT09IDApIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKGwkMVswXSk7XG4gICAgfVxuICAgIF9uID0gbiQxIC0gMSB8IDA7XG4gICAgX2wgPSBsJDFbMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZXZfYXBwZW5kKF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIHJldHVybiBsMjtcbiAgICB9XG4gICAgX2wyID0gLyogOjogKi9bXG4gICAgICBsMVswXSxcbiAgICAgIGwyXG4gICAgXTtcbiAgICBfbDEgPSBsMVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJldihsKSB7XG4gIHJldHVybiByZXZfYXBwZW5kKGwsIC8qIFtdICovMCk7XG59XG5cbmZ1bmN0aW9uIGluaXRfdGFpbHJlY19hdXgoX2FjYywgX2ksIG4sIGYpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgaWYgKGkgPj0gbikge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgX2FjYyA9IC8qIDo6ICovW1xuICAgICAgQ3VycnkuXzEoZiwgaSksXG4gICAgICBhY2NcbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdF9hdXgoaSwgbiwgZikge1xuICBpZiAoaSA+PSBuKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgciA9IEN1cnJ5Ll8xKGYsIGkpO1xuICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgcixcbiAgICAgICAgICBpbml0X2F1eChpICsgMSB8IDAsIG4sIGYpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGluaXQobGVuLCBmKSB7XG4gIGlmIChsZW4gPCAwKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmluaXRcIlxuICAgICAgICBdO1xuICB9XG4gIGlmIChsZW4gPiAxMDAwMCkge1xuICAgIHJldHVybiByZXZfYXBwZW5kKGluaXRfdGFpbHJlY19hdXgoLyogW10gKi8wLCAwLCBsZW4sIGYpLCAvKiBbXSAqLzApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpbml0X2F1eCgwLCBsZW4sIGYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4ocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIFBlcnZhc2l2ZXMuJGF0KHBhcmFtWzBdLCBmbGF0dGVuKHBhcmFtWzFdKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXAoZiwgcGFyYW0pIHtcbiAgaWYgKCFwYXJhbSkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdmFyIHIgPSBDdXJyeS5fMShmLCBwYXJhbVswXSk7XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICByLFxuICAgICAgICAgIG1hcChmLCBwYXJhbVsxXSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbWFwaShpLCBmLCBwYXJhbSkge1xuICBpZiAoIXBhcmFtKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB2YXIgciA9IEN1cnJ5Ll8yKGYsIGksIHBhcmFtWzBdKTtcbiAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgIHIsXG4gICAgICAgICAgbWFwaShpICsgMSB8IDAsIGYsIHBhcmFtWzFdKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYXBpJDEoZiwgbCkge1xuICByZXR1cm4gbWFwaSgwLCBmLCBsKTtcbn1cblxuZnVuY3Rpb24gcmV2X21hcChmLCBsKSB7XG4gIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgdmFyIF9wYXJhbSA9IGw7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gYWNjdTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSxcbiAgICAgIGFjY3VcbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcihmLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBDdXJyeS5fMShmLCBwYXJhbVswXSk7XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpdGVyaShmLCBsKSB7XG4gIHZhciBfaSA9IDA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgQ3VycnkuXzIoZiwgaSwgcGFyYW1bMF0pO1xuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9sZWZ0KGYsIF9hY2N1LCBfbCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwgPSBfbDtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmICghbCkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9sID0gbFsxXTtcbiAgICBfYWNjdSA9IEN1cnJ5Ll8yKGYsIGFjY3UsIGxbMF0pO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9yaWdodChmLCBsLCBhY2N1KSB7XG4gIGlmIChsKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGxbMF0sIGZvbGRfcmlnaHQoZiwgbFsxXSwgYWNjdSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhY2N1O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcDIoZiwgbDEsIGwyKSB7XG4gIGlmIChsMSkge1xuICAgIGlmIChsMikge1xuICAgICAgdmFyIHIgPSBDdXJyeS5fMihmLCBsMVswXSwgbDJbMF0pO1xuICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICByLFxuICAgICAgICAgICAgICBtYXAyKGYsIGwxWzFdLCBsMlsxXSlcbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5tYXAyXCJcbiAgICAgICAgXTtcbiAgfVxuICBpZiAoIWwyKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIFwiTGlzdC5tYXAyXCJcbiAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJldl9tYXAyKGYsIGwxLCBsMikge1xuICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gIHZhciBfbDEgPSBsMTtcbiAgdmFyIF9sMiA9IGwyO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgdmFyIGwxJDEgPSBfbDE7XG4gICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICBpZiAobDEkMSkge1xuICAgICAgaWYgKGwyJDEpIHtcbiAgICAgICAgX2wyID0gbDIkMVsxXTtcbiAgICAgICAgX2wxID0gbDEkMVsxXTtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBDdXJyeS5fMihmLCBsMSQxWzBdLCBsMiQxWzBdKSxcbiAgICAgICAgICBhY2N1XG4gICAgICAgIF07XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIHRocm93IFtcbiAgICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgICBcIkxpc3QucmV2X21hcDJcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmIChsMiQxKSB7XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LnJldl9tYXAyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXRlcjIoZiwgX2wxLCBfbDIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBsMiA9IF9sMjtcbiAgICB2YXIgbDEgPSBfbDE7XG4gICAgaWYgKGwxKSB7XG4gICAgICBpZiAobDIpIHtcbiAgICAgICAgQ3VycnkuXzIoZiwgbDFbMF0sIGwyWzBdKTtcbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0Lml0ZXIyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkxpc3QuaXRlcjJcIlxuICAgICAgICBdO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb2xkX2xlZnQyKGYsIF9hY2N1LCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIGlmIChsMSkge1xuICAgICAgaWYgKGwyKSB7XG4gICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgX2FjY3UgPSBDdXJyeS5fMyhmLCBhY2N1LCBsMVswXSwgbDJbMF0pO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmZvbGRfbGVmdDJcIlxuICAgICAgICAgIF07XG4gICAgfVxuICAgIGlmIChsMikge1xuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5mb2xkX2xlZnQyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZm9sZF9yaWdodDIoZiwgbDEsIGwyLCBhY2N1KSB7XG4gIGlmIChsMSkge1xuICAgIGlmIChsMikge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8zKGYsIGwxWzBdLCBsMlswXSwgZm9sZF9yaWdodDIoZiwgbDFbMV0sIGwyWzFdLCBhY2N1KSk7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5mb2xkX3JpZ2h0MlwiXG4gICAgICAgIF07XG4gIH1cbiAgaWYgKGwyKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmZvbGRfcmlnaHQyXCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gYWNjdTtcbn1cblxuZnVuY3Rpb24gZm9yX2FsbChwLCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFDdXJyeS5fMShwLCBwYXJhbVswXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleGlzdHMocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoQ3VycnkuXzEocCwgcGFyYW1bMF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JfYWxsMihwLCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICBpZiAoIUN1cnJ5Ll8yKHAsIGwxWzBdLCBsMlswXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgX2wyID0gbDJbMV07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB0aHJvdyBbXG4gICAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgICAgXCJMaXN0LmZvcl9hbGwyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJMaXN0LmZvcl9hbGwyXCJcbiAgICAgICAgXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzMihwLCBfbDEsIF9sMikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGwyID0gX2wyO1xuICAgIHZhciBsMSA9IF9sMTtcbiAgICBpZiAobDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICBpZiAoQ3VycnkuXzIocCwgbDFbMF0sIGwyWzBdKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIF9sMiA9IGwyWzFdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgdGhyb3cgW1xuICAgICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICAgIFwiTGlzdC5leGlzdHMyXCJcbiAgICAgICAgICBdO1xuICAgIH1cbiAgICBpZiAoIWwyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiTGlzdC5leGlzdHMyXCJcbiAgICAgICAgXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwocGFyYW1bMF0sIHgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZW1xKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtWzBdID09PSB4KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhc3NvYyh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAocGFyYW0pIHtcbiAgICAgIHZhciBtYXRjaCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwobWF0Y2hbMF0sIHgpKSB7XG4gICAgICAgIHJldHVybiBtYXRjaFsxXTtcbiAgICAgIH1cbiAgICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzc29jX29wdCh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVswXTtcbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChtYXRjaFswXSwgeCkpIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKG1hdGNoWzFdKTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhc3NxKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmIChwYXJhbSkge1xuICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gICAgICBpZiAobWF0Y2hbMF0gPT09IHgpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNzcV9vcHQoeCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gICAgaWYgKG1hdGNoWzBdID09PSB4KSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShtYXRjaFsxXSk7XG4gICAgfVxuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWVtX2Fzc29jKHgsIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwocGFyYW1bMF1bMF0sIHgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBtZW1fYXNzcSh4LCBfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwYXJhbVswXVswXSA9PT0geCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9wYXJhbSA9IHBhcmFtWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2Fzc29jKHgsIHBhcmFtKSB7XG4gIGlmICghcGFyYW0pIHtcbiAgICByZXR1cm4gLyogW10gKi8wO1xuICB9XG4gIHZhciBsID0gcGFyYW1bMV07XG4gIHZhciBwYWlyID0gcGFyYW1bMF07XG4gIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKHBhaXJbMF0sIHgpKSB7XG4gICAgcmV0dXJuIGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIHJlbW92ZV9hc3NvYyh4LCBsKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2Fzc3EoeCwgcGFyYW0pIHtcbiAgaWYgKCFwYXJhbSkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdmFyIGwgPSBwYXJhbVsxXTtcbiAgdmFyIHBhaXIgPSBwYXJhbVswXTtcbiAgaWYgKHBhaXJbMF0gPT09IHgpIHtcbiAgICByZXR1cm4gbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgcmVtb3ZlX2Fzc3EoeCwgbClcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmQocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKHBhcmFtKSB7XG4gICAgICB2YXIgeCA9IHBhcmFtWzBdO1xuICAgICAgaWYgKEN1cnJ5Ll8xKHAsIHgpKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmluZF9vcHQocCwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHggPSBwYXJhbVswXTtcbiAgICBpZiAoQ3VycnkuXzEocCwgeCkpIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHgpO1xuICAgIH1cbiAgICBfcGFyYW0gPSBwYXJhbVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRfYWxsKHApIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICAgIHZhciBfcGFyYW0gPSBwYXJhbTtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIHBhcmFtJDEgPSBfcGFyYW07XG4gICAgICAgIHZhciBhY2N1ID0gX2FjY3U7XG4gICAgICAgIGlmICghcGFyYW0kMSkge1xuICAgICAgICAgIHJldHVybiByZXZfYXBwZW5kKGFjY3UsIC8qIFtdICovMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGwgPSBwYXJhbSQxWzFdO1xuICAgICAgICB2YXIgeCA9IHBhcmFtJDFbMF07XG4gICAgICAgIGlmIChDdXJyeS5fMShwLCB4KSkge1xuICAgICAgICAgIF9wYXJhbSA9IGw7XG4gICAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICBhY2N1XG4gICAgICAgICAgXTtcbiAgICAgICAgICBjb250aW51ZSA7XG4gICAgICAgIH1cbiAgICAgICAgX3BhcmFtID0gbDtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKHAsIGwpIHtcbiAgdmFyIF95ZXMgPSAvKiBbXSAqLzA7XG4gIHZhciBfbm8gPSAvKiBbXSAqLzA7XG4gIHZhciBfcGFyYW0gPSBsO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBubyA9IF9ubztcbiAgICB2YXIgeWVzID0gX3llcztcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHJldl9hcHBlbmQoeWVzLCAvKiBbXSAqLzApLFxuICAgICAgICAgICAgICByZXZfYXBwZW5kKG5vLCAvKiBbXSAqLzApXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgbCQxID0gcGFyYW1bMV07XG4gICAgdmFyIHggPSBwYXJhbVswXTtcbiAgICBpZiAoQ3VycnkuXzEocCwgeCkpIHtcbiAgICAgIF9wYXJhbSA9IGwkMTtcbiAgICAgIF95ZXMgPSAvKiA6OiAqL1tcbiAgICAgICAgeCxcbiAgICAgICAgeWVzXG4gICAgICBdO1xuICAgICAgY29udGludWUgO1xuICAgIH1cbiAgICBfcGFyYW0gPSBsJDE7XG4gICAgX25vID0gLyogOjogKi9bXG4gICAgICB4LFxuICAgICAgbm9cbiAgICBdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3BsaXQocGFyYW0pIHtcbiAgaWYgKCFwYXJhbSkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIFtdICovMCxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIG1hdGNoID0gcGFyYW1bMF07XG4gIHZhciBtYXRjaCQxID0gc3BsaXQocGFyYW1bMV0pO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIG1hdGNoJDFbMF1cbiAgICAgICAgICBdLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgbWF0Y2hbMV0sXG4gICAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lKGwxLCBsMikge1xuICBpZiAobDEpIHtcbiAgICBpZiAobDIpIHtcbiAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgbDFbMF0sXG4gICAgICAgICAgICAgICAgbDJbMF1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgY29tYmluZShsMVsxXSwgbDJbMV0pXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkxpc3QuY29tYmluZVwiXG4gICAgICAgIF07XG4gIH1cbiAgaWYgKCFsMikge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICBcIkxpc3QuY29tYmluZVwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBtZXJnZShjbXAsIGwxLCBsMikge1xuICBpZiAoIWwxKSB7XG4gICAgcmV0dXJuIGwyO1xuICB9XG4gIGlmICghbDIpIHtcbiAgICByZXR1cm4gbDE7XG4gIH1cbiAgdmFyIGgyID0gbDJbMF07XG4gIHZhciBoMSA9IGwxWzBdO1xuICBpZiAoQ3VycnkuXzIoY21wLCBoMSwgaDIpIDw9IDApIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBoMSxcbiAgICAgICAgICAgIG1lcmdlKGNtcCwgbDFbMV0sIGwyKVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgaDIsXG4gICAgICAgICAgICBtZXJnZShjbXAsIGwxLCBsMlsxXSlcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNob3AoX2ssIF9sKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbCA9IF9sO1xuICAgIHZhciBrID0gX2s7XG4gICAgaWYgKGsgPT09IDApIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICBpZiAobCkge1xuICAgICAgX2wgPSBsWzFdO1xuICAgICAgX2sgPSBrIC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5hc3NlcnRfZmFpbHVyZSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIFwibGlzdC5tbFwiLFxuICAgICAgICAgICAgMjYyLFxuICAgICAgICAgICAgMTFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0YWJsZV9zb3J0KGNtcCwgbCkge1xuICB2YXIgc29ydCA9IGZ1bmN0aW9uIChuLCBsKSB7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuID09PSAzICYmIGwpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MikgPD0gMCkge1xuICAgICAgICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKSA8PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBsWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIHgyJDEgPSBtYXRjaCQyWzBdO1xuICAgICAgICB2YXIgeDEkMSA9IGxbMF07XG4gICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxJDEsIHgyJDEpIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgdmFyIG4yID0gbiAtIG4xIHwgMDtcbiAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICB2YXIgczEgPSByZXZfc29ydChuMSwgbCk7XG4gICAgdmFyIHMyID0gcmV2X3NvcnQobjIsIGwyKTtcbiAgICB2YXIgX2wxID0gczE7XG4gICAgdmFyIF9sMiA9IHMyO1xuICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICBpZiAoIWwxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwyJDEsIGFjY3UpO1xuICAgICAgfVxuICAgICAgaWYgKCFsMiQxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIHZhciBoMiA9IGwyJDFbMF07XG4gICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgIGlmIChDdXJyeS5fMihjbXAsIGgxLCBoMikgPiAwKSB7XG4gICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgaDEsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBfbDEgPSBsMVsxXTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgaDIsXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBfbDIgPSBsMiQxWzFdO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHZhciByZXZfc29ydCA9IGZ1bmN0aW9uIChuLCBsKSB7XG4gICAgaWYgKG4gIT09IDIpIHtcbiAgICAgIGlmIChuID09PSAzICYmIGwpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gbFsxXTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgdmFyIG1hdGNoJDEgPSBtYXRjaFsxXTtcbiAgICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgICAgdmFyIHgzID0gbWF0Y2gkMVswXTtcbiAgICAgICAgICAgIHZhciB4MiA9IG1hdGNoWzBdO1xuICAgICAgICAgICAgdmFyIHgxID0gbFswXTtcbiAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MikgPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChDdXJyeS5fMihjbXAsIHgyLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChDdXJyeS5fMihjbXAsIHgxLCB4MykgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKSA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQ3VycnkuXzIoY21wLCB4MiwgeDMpID4gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKGwpIHtcbiAgICAgIHZhciBtYXRjaCQyID0gbFsxXTtcbiAgICAgIGlmIChtYXRjaCQyKSB7XG4gICAgICAgIHZhciB4MiQxID0gbWF0Y2gkMlswXTtcbiAgICAgICAgdmFyIHgxJDEgPSBsWzBdO1xuICAgICAgICBpZiAoQ3VycnkuXzIoY21wLCB4MSQxLCB4MiQxKSA+IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICB9XG4gICAgdmFyIG4xID0gKG4gPj4gMSk7XG4gICAgdmFyIG4yID0gbiAtIG4xIHwgMDtcbiAgICB2YXIgbDIgPSBjaG9wKG4xLCBsKTtcbiAgICB2YXIgczEgPSBzb3J0KG4xLCBsKTtcbiAgICB2YXIgczIgPSBzb3J0KG4yLCBsMik7XG4gICAgdmFyIF9sMSA9IHMxO1xuICAgIHZhciBfbDIgPSBzMjtcbiAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgaWYgKCFsMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIGlmICghbDIkMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMSwgYWNjdSk7XG4gICAgICB9XG4gICAgICB2YXIgaDIgPSBsMiQxWzBdO1xuICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICBpZiAoQ3VycnkuXzIoY21wLCBoMSwgaDIpIDw9IDApIHtcbiAgICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgICBoMSxcbiAgICAgICAgICBhY2N1XG4gICAgICAgIF07XG4gICAgICAgIF9sMSA9IGwxWzFdO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICBoMixcbiAgICAgICAgYWNjdVxuICAgICAgXTtcbiAgICAgIF9sMiA9IGwyJDFbMV07XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGxlbiA9IGxlbmd0aChsKTtcbiAgaWYgKGxlbiA8IDIpIHtcbiAgICByZXR1cm4gbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29ydChsZW4sIGwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNvcnRfdW5pcShjbXAsIGwpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiAobiwgbCkge1xuICAgIGlmIChuICE9PSAyKSB7XG4gICAgICBpZiAobiA9PT0gMyAmJiBsKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGxbMV07XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gbWF0Y2hbMV07XG4gICAgICAgICAgaWYgKG1hdGNoJDEpIHtcbiAgICAgICAgICAgIHZhciB4MyA9IG1hdGNoJDFbMF07XG4gICAgICAgICAgICB2YXIgeDIgPSBtYXRjaFswXTtcbiAgICAgICAgICAgIHZhciB4MSA9IGxbMF07XG4gICAgICAgICAgICB2YXIgYyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgyKTtcbiAgICAgICAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDEgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDEgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQxIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA8IDApIHtcbiAgICAgICAgICAgICAgdmFyIGMkMiA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjJDIgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgYyQzID0gQ3VycnkuXzIoY21wLCB4MSwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQzID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyQzIDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGMkNCA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKTtcbiAgICAgICAgICAgIGlmIChjJDQgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyQ0IDwgMCkge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGMkNSA9IEN1cnJ5Ll8yKGNtcCwgeDIsIHgzKTtcbiAgICAgICAgICAgIGlmIChjJDUgPT09IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGMkNSA8IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgfVxuICAgICAgXG4gICAgfSBlbHNlIGlmIChsKSB7XG4gICAgICB2YXIgbWF0Y2gkMiA9IGxbMV07XG4gICAgICBpZiAobWF0Y2gkMikge1xuICAgICAgICB2YXIgeDIkMSA9IG1hdGNoJDJbMF07XG4gICAgICAgIHZhciB4MSQxID0gbFswXTtcbiAgICAgICAgdmFyIGMkNiA9IEN1cnJ5Ll8yKGNtcCwgeDEkMSwgeDIkMSk7XG4gICAgICAgIGlmIChjJDYgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MSQxLFxuICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIGlmIChjJDYgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgyJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfVxuICAgIHZhciBuMSA9IChuID4+IDEpO1xuICAgIHZhciBuMiA9IG4gLSBuMSB8IDA7XG4gICAgdmFyIGwyID0gY2hvcChuMSwgbCk7XG4gICAgdmFyIHMxID0gcmV2X3NvcnQobjEsIGwpO1xuICAgIHZhciBzMiA9IHJldl9zb3J0KG4yLCBsMik7XG4gICAgdmFyIF9sMSA9IHMxO1xuICAgIHZhciBfbDIgPSBzMjtcbiAgICB2YXIgX2FjY3UgPSAvKiBbXSAqLzA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGFjY3UgPSBfYWNjdTtcbiAgICAgIHZhciBsMiQxID0gX2wyO1xuICAgICAgdmFyIGwxID0gX2wxO1xuICAgICAgaWYgKCFsMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMiQxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIGlmICghbDIkMSkge1xuICAgICAgICByZXR1cm4gcmV2X2FwcGVuZChsMSwgYWNjdSk7XG4gICAgICB9XG4gICAgICB2YXIgdDIgPSBsMiQxWzFdO1xuICAgICAgdmFyIGgyID0gbDIkMVswXTtcbiAgICAgIHZhciB0MSA9IGwxWzFdO1xuICAgICAgdmFyIGgxID0gbDFbMF07XG4gICAgICB2YXIgYyQ3ID0gQ3VycnkuXzIoY21wLCBoMSwgaDIpO1xuICAgICAgaWYgKGMkNyA9PT0gMCkge1xuICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgIGgxLFxuICAgICAgICAgIGFjY3VcbiAgICAgICAgXTtcbiAgICAgICAgX2wyID0gdDI7XG4gICAgICAgIF9sMSA9IHQxO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBpZiAoYyQ3ID4gMCkge1xuICAgICAgICBfYWNjdSA9IC8qIDo6ICovW1xuICAgICAgICAgIGgxLFxuICAgICAgICAgIGFjY3VcbiAgICAgICAgXTtcbiAgICAgICAgX2wxID0gdDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgIGgyLFxuICAgICAgICBhY2N1XG4gICAgICBdO1xuICAgICAgX2wyID0gdDI7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIHJldl9zb3J0ID0gZnVuY3Rpb24gKG4sIGwpIHtcbiAgICBpZiAobiAhPT0gMikge1xuICAgICAgaWYgKG4gPT09IDMgJiYgbCkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBsWzFdO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzFdO1xuICAgICAgICAgIGlmIChtYXRjaCQxKSB7XG4gICAgICAgICAgICB2YXIgeDMgPSBtYXRjaCQxWzBdO1xuICAgICAgICAgICAgdmFyIHgyID0gbWF0Y2hbMF07XG4gICAgICAgICAgICB2YXIgeDEgPSBsWzBdO1xuICAgICAgICAgICAgdmFyIGMgPSBDdXJyeS5fMihjbXAsIHgxLCB4Mik7XG4gICAgICAgICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICAgICAgICB2YXIgYyQxID0gQ3VycnkuXzIoY21wLCB4MiwgeDMpO1xuICAgICAgICAgICAgICBpZiAoYyQxID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMgPiAwKSB7XG4gICAgICAgICAgICAgIHZhciBjJDIgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICAgIGlmIChjJDIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYyQyID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGMkMyA9IEN1cnJ5Ll8yKGNtcCwgeDEsIHgzKTtcbiAgICAgICAgICAgICAgaWYgKGMkMyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMkMyA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjJDQgPSBDdXJyeS5fMihjbXAsIHgxLCB4Myk7XG4gICAgICAgICAgICBpZiAoYyQ0ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGMkNCA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjJDUgPSBDdXJyeS5fMihjbXAsIHgyLCB4Myk7XG4gICAgICAgICAgICBpZiAoYyQ1ID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjJDUgPiAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHgzLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICB4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB4MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAobCkge1xuICAgICAgdmFyIG1hdGNoJDIgPSBsWzFdO1xuICAgICAgaWYgKG1hdGNoJDIpIHtcbiAgICAgICAgdmFyIHgyJDEgPSBtYXRjaCQyWzBdO1xuICAgICAgICB2YXIgeDEkMSA9IGxbMF07XG4gICAgICAgIHZhciBjJDYgPSBDdXJyeS5fMihjbXAsIHgxJDEsIHgyJDEpO1xuICAgICAgICBpZiAoYyQ2ID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgeDEkMSxcbiAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSBpZiAoYyQ2ID4gMCkge1xuICAgICAgICAgIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgeDIkMSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB4MiQxLFxuICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIHgxJDEsXG4gICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgIH1cbiAgICB2YXIgbjEgPSAobiA+PiAxKTtcbiAgICB2YXIgbjIgPSBuIC0gbjEgfCAwO1xuICAgIHZhciBsMiA9IGNob3AobjEsIGwpO1xuICAgIHZhciBzMSA9IHNvcnQobjEsIGwpO1xuICAgIHZhciBzMiA9IHNvcnQobjIsIGwyKTtcbiAgICB2YXIgX2wxID0gczE7XG4gICAgdmFyIF9sMiA9IHMyO1xuICAgIHZhciBfYWNjdSA9IC8qIFtdICovMDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgICAgdmFyIGwyJDEgPSBfbDI7XG4gICAgICB2YXIgbDEgPSBfbDE7XG4gICAgICBpZiAoIWwxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwyJDEsIGFjY3UpO1xuICAgICAgfVxuICAgICAgaWYgKCFsMiQxKSB7XG4gICAgICAgIHJldHVybiByZXZfYXBwZW5kKGwxLCBhY2N1KTtcbiAgICAgIH1cbiAgICAgIHZhciB0MiA9IGwyJDFbMV07XG4gICAgICB2YXIgaDIgPSBsMiQxWzBdO1xuICAgICAgdmFyIHQxID0gbDFbMV07XG4gICAgICB2YXIgaDEgPSBsMVswXTtcbiAgICAgIHZhciBjJDcgPSBDdXJyeS5fMihjbXAsIGgxLCBoMik7XG4gICAgICBpZiAoYyQ3ID09PSAwKSB7XG4gICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgaDEsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBfbDIgPSB0MjtcbiAgICAgICAgX2wxID0gdDE7XG4gICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIH1cbiAgICAgIGlmIChjJDcgPCAwKSB7XG4gICAgICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICAgICAgaDEsXG4gICAgICAgICAgYWNjdVxuICAgICAgICBdO1xuICAgICAgICBfbDEgPSB0MTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfVxuICAgICAgX2FjY3UgPSAvKiA6OiAqL1tcbiAgICAgICAgaDIsXG4gICAgICAgIGFjY3VcbiAgICAgIF07XG4gICAgICBfbDIgPSB0MjtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICB2YXIgbGVuID0gbGVuZ3RoKGwpO1xuICBpZiAobGVuIDwgMikge1xuICAgIHJldHVybiBsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzb3J0KGxlbiwgbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGFyZV9sZW5ndGhzKF9sMSwgX2wyKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbDIgPSBfbDI7XG4gICAgdmFyIGwxID0gX2wxO1xuICAgIGlmICghbDEpIHtcbiAgICAgIGlmIChsMikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFsMikge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIF9sMiA9IGwyWzFdO1xuICAgIF9sMSA9IGwxWzFdO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZV9sZW5ndGhfd2l0aChfbCwgX24pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIGwgPSBfbDtcbiAgICBpZiAoIWwpIHtcbiAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfSBlbHNlIGlmIChuID4gMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG4gPD0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIF9uID0gbiAtIDEgfCAwO1xuICAgIF9sID0gbFsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbnZhciBhcHBlbmQgPSBQZXJ2YXNpdmVzLiRhdDtcblxudmFyIGNvbmNhdCA9IGZsYXR0ZW47XG5cbnZhciBmaWx0ZXIgPSBmaW5kX2FsbDtcblxudmFyIHNvcnQgPSBzdGFibGVfc29ydDtcblxudmFyIGZhc3Rfc29ydCA9IHN0YWJsZV9zb3J0O1xuXG5leHBvcnQge1xuICBsZW5ndGggLFxuICBjb21wYXJlX2xlbmd0aHMgLFxuICBjb21wYXJlX2xlbmd0aF93aXRoICxcbiAgY29ucyAsXG4gIGhkICxcbiAgdGwgLFxuICBudGggLFxuICBudGhfb3B0ICxcbiAgcmV2ICxcbiAgaW5pdCAsXG4gIGFwcGVuZCAsXG4gIHJldl9hcHBlbmQgLFxuICBjb25jYXQgLFxuICBmbGF0dGVuICxcbiAgaXRlciAsXG4gIGl0ZXJpICxcbiAgbWFwICxcbiAgbWFwaSQxIGFzIG1hcGksXG4gIHJldl9tYXAgLFxuICBmb2xkX2xlZnQgLFxuICBmb2xkX3JpZ2h0ICxcbiAgaXRlcjIgLFxuICBtYXAyICxcbiAgcmV2X21hcDIgLFxuICBmb2xkX2xlZnQyICxcbiAgZm9sZF9yaWdodDIgLFxuICBmb3JfYWxsICxcbiAgZXhpc3RzICxcbiAgZm9yX2FsbDIgLFxuICBleGlzdHMyICxcbiAgbWVtICxcbiAgbWVtcSAsXG4gIGZpbmQgLFxuICBmaW5kX29wdCAsXG4gIGZpbHRlciAsXG4gIGZpbmRfYWxsICxcbiAgcGFydGl0aW9uICxcbiAgYXNzb2MgLFxuICBhc3NvY19vcHQgLFxuICBhc3NxICxcbiAgYXNzcV9vcHQgLFxuICBtZW1fYXNzb2MgLFxuICBtZW1fYXNzcSAsXG4gIHJlbW92ZV9hc3NvYyAsXG4gIHJlbW92ZV9hc3NxICxcbiAgc3BsaXQgLFxuICBjb21iaW5lICxcbiAgc29ydCAsXG4gIHN0YWJsZV9zb3J0ICxcbiAgZmFzdF9zb3J0ICxcbiAgc29ydF91bmlxICxcbiAgbWVyZ2UgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0LmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcblxuZnVuY3Rpb24gbGlzdEFwcGVuZCh2YWx1ZSwgbGlzdCkge1xuICByZXR1cm4gTGlzdC5jb25jYXQoLyogOjogKi9bXG4gICAgICAgICAgICAgIGxpc3QsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gRW51bUV4dGVuc2lvbnMoRSkge1xuICB2YXIgZnJvbVRvQXNMaXN0ID0gZnVuY3Rpb24gKHN0YXJ0LCBmaW5pc2gpIHtcbiAgICB2YXIgX2FjYyA9IC8qIFtdICovMDtcbiAgICB2YXIgX2N1cnJlbnQgPSBzdGFydDtcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgY3VycmVudCA9IF9jdXJyZW50O1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMihFLmNvbXBhcmUsIGN1cnJlbnQsIGZpbmlzaCk7XG4gICAgICBpZiAobWF0Y2ggIT09IDE1OTAzOTQ5NCkge1xuICAgICAgICBpZiAobWF0Y2ggPCA5MzkyMTQxNTEpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXh0ID0gQ3VycnkuXzEoRS5zdWNjLCBjdXJyZW50KTtcbiAgICAgICAgaWYgKG5leHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICAgIH1cbiAgICAgICAgX2N1cnJlbnQgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG5leHQpO1xuICAgICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICB2YXIgcHJldiA9IEN1cnJ5Ll8xKEUucHJlZCwgY3VycmVudCk7XG4gICAgICBpZiAocHJldiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICB9XG4gICAgICBfY3VycmVudCA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24ocHJldik7XG4gICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHZhciB1cEZyb21Bc0xpc3QgPSBmdW5jdGlvbiAoc3RhcnQpIHtcbiAgICB2YXIgbmV4dCA9IEN1cnJ5Ll8xKEUuc3VjYywgc3RhcnQpO1xuICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgICAgdmFyIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihuZXh0KTtcbiAgICAgIHdoaWxlKHRydWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBfY3VycmVudDtcbiAgICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICAgIHZhciBuZXh0JDEgPSBDdXJyeS5fMShFLnN1Y2MsIGN1cnJlbnQpO1xuICAgICAgICBpZiAobmV4dCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihuZXh0JDEpO1xuICAgICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogW10gKi8wO1xuICAgIH1cbiAgfTtcbiAgdmFyIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgIHZhciBfY3VycmVudCA9IHN0YXJ0O1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gX2N1cnJlbnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIHZhciBuZXh0ID0gQ3VycnkuXzEoRS5zdWNjLCBjdXJyZW50KTtcbiAgICAgIGlmIChuZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihuZXh0KTtcbiAgICAgIF9hY2MgPSBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgdmFyIGRvd25Gcm9tQXNMaXN0ID0gZnVuY3Rpb24gKHN0YXJ0KSB7XG4gICAgdmFyIG5leHQgPSBDdXJyeS5fMShFLnByZWQsIHN0YXJ0KTtcbiAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX2FjYyA9IC8qIFtdICovMDtcbiAgICAgIHZhciBfY3VycmVudCA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obmV4dCk7XG4gICAgICB3aGlsZSh0cnVlKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gX2N1cnJlbnQ7XG4gICAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgICB2YXIgcHJldiA9IEN1cnJ5Ll8xKEUucHJlZCwgY3VycmVudCk7XG4gICAgICAgIGlmIChwcmV2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgICB9XG4gICAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihwcmV2KTtcbiAgICAgICAgX2FjYyA9IGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgICAgY29udGludWUgO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIFtdICovMDtcbiAgICB9XG4gIH07XG4gIHZhciBkb3duRnJvbUluY2x1ZGluZ0FzTGlzdCA9IGZ1bmN0aW9uIChzdGFydCkge1xuICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgIHZhciBfY3VycmVudCA9IHN0YXJ0O1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gX2N1cnJlbnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIHZhciBwcmV2ID0gQ3VycnkuXzEoRS5wcmVkLCBjdXJyZW50KTtcbiAgICAgIGlmIChwcmV2ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIF9jdXJyZW50ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihwcmV2KTtcbiAgICAgIF9hY2MgPSBsaXN0QXBwZW5kKGN1cnJlbnQsIGFjYyk7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmcm9tVG9Bc0xpc3Q6IGZyb21Ub0FzTGlzdCxcbiAgICAgICAgICB1cEZyb21Bc0xpc3Q6IHVwRnJvbUFzTGlzdCxcbiAgICAgICAgICB1cEZyb21JbmNsdWRpbmdBc0xpc3Q6IHVwRnJvbUluY2x1ZGluZ0FzTGlzdCxcbiAgICAgICAgICBkb3duRnJvbUFzTGlzdDogZG93bkZyb21Bc0xpc3QsXG4gICAgICAgICAgZG93bkZyb21JbmNsdWRpbmdBc0xpc3Q6IGRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0XG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIGxpc3RBcHBlbmQgLFxuICBFbnVtRXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBMaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2xpc3QuanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuXG5mdW5jdGlvbiBsaXN0QXBwZW5kKHZhbHVlLCBsaXN0KSB7XG4gIHJldHVybiBMaXN0LmNvbmNhdCgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgbGlzdCxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBCb3VuZGVkRW51bUV4dGVuc2lvbnMoRSkge1xuICB2YXIgZnJvbVRoZW5Ub0FzTGlzdCA9IGZ1bmN0aW9uIChzdGFydCwgbmV4dCwgZmluaXNoKSB7XG4gICAgdmFyIHN0YXJ0SW50ID0gQ3VycnkuXzEoRS5mcm9tRW51bSwgc3RhcnQpO1xuICAgIHZhciBuZXh0SW50ID0gQ3VycnkuXzEoRS5mcm9tRW51bSwgbmV4dCk7XG4gICAgdmFyIHN0ZXBJbnQgPSBuZXh0SW50IC0gc3RhcnRJbnQgfCAwO1xuICAgIHZhciBfYWNjID0gLyogW10gKi8wO1xuICAgIHZhciBfY3VycmVudCA9IHN0YXJ0O1xuICAgIHZhciBfY3VycmVudEludCA9IHN0YXJ0SW50O1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBjdXJyZW50SW50ID0gX2N1cnJlbnRJbnQ7XG4gICAgICB2YXIgY3VycmVudCA9IF9jdXJyZW50O1xuICAgICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgICB2YXIgbWF0Y2ggPSBDdXJyeS5fMihFLmNvbXBhcmUsIGN1cnJlbnQsIGZpbmlzaCk7XG4gICAgICBpZiAobWF0Y2ggPCAxNTkwMzk0OTQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXh0SW50JDEgPSBjdXJyZW50SW50ICsgc3RlcEludCB8IDA7XG4gICAgICB2YXIgbmV4dCQxID0gQ3VycnkuXzEoRS50b0VudW0sIG5leHRJbnQkMSk7XG4gICAgICBpZiAobmV4dCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RBcHBlbmQoY3VycmVudCwgYWNjKTtcbiAgICAgIH1cbiAgICAgIF9jdXJyZW50SW50ID0gbmV4dEludCQxO1xuICAgICAgX2N1cnJlbnQgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG5leHQkMSk7XG4gICAgICBfYWNjID0gbGlzdEFwcGVuZChjdXJyZW50LCBhY2MpO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZnJvbVRoZW5Ub0FzTGlzdDogZnJvbVRoZW5Ub0FzTGlzdFxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBsaXN0QXBwZW5kICxcbiAgQm91bmRlZEVudW1FeHRlbnNpb25zICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0VxIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRXEuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX09yZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRW51bSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0VudW0uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkRW51bSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWRFbnVtLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGZyb21JbnQoaSkge1xuICBpZiAoaSA8IDApIHtcbiAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICB9IGVsc2UgaWYgKGkgPT09IDApIHtcbiAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9JbnQocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAxNTkwMzk0OTQpIHtcbiAgICBpZiAocGFyYW0gPj0gOTM5MjE0MTUxKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXZlcnNlKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gMTU5MDM5NDk0KSB7XG4gICAgaWYgKHBhcmFtID49IDkzOTIxNDE1MSkge1xuICAgICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlcShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuXG52YXIgRXEgPSB7XG4gIGVxOiBlcVxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19FcS5FcUV4dGVuc2lvbnMoRXEpO1xuXG5mdW5jdGlvbiBjb21wYXJlKG8xLCBvMikge1xuICBpZiAobzEgIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChvMSA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIGlmIChvMiA+PSA5MzkyMTQxNTEpIHtcbiAgICAgICAgcmV0dXJuIC8qIGVxdWFsX3RvICovLTcxODU3MjQ0MjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvMiAhPT0gMTU5MDM5NDk0KSB7XG4gICAgICBpZiAobzIgPj0gOTM5MjE0MTUxKSB7XG4gICAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgIH1cbiAgfSBlbHNlIGlmIChvMiAhPT0gMTU5MDM5NDk0KSB7XG4gICAgcmV0dXJuIC8qIGdyZWF0ZXJfdGhhbiAqLzE1OTAzOTQ5NDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICB9XG59XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogY29tcGFyZVxufTtcblxudmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX09yZC5PcmRFeHRlbnNpb25zKE9yZCk7XG5cbnZhciBCb3VuZGVkID0ge1xuICBlcTogZXEsXG4gIGNvbXBhcmU6IGNvbXBhcmUsXG4gIHRvcDogLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0LFxuICBib3R0b206IC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MVxufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQm91bmRlZC5Cb3VuZGVkRXh0ZW5zaW9ucyhCb3VuZGVkKTtcblxuZnVuY3Rpb24gcHJlZChwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChwYXJhbSA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3VjYyhwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDE1OTAzOTQ5NCkge1xuICAgIGlmIChwYXJhbSA+PSA5MzkyMTQxNTEpIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfVxuICB9XG4gIFxufVxuXG52YXIgRW51bSA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlLFxuICBzdWNjOiBzdWNjLFxuICBwcmVkOiBwcmVkXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5FbnVtRXh0ZW5zaW9ucyhFbnVtKTtcblxuZnVuY3Rpb24gdG9FbnVtKGkpIHtcbiAgcmV0dXJuIGZyb21JbnQoaSk7XG59XG5cbnZhciBCb3VuZGVkRW51bSA9IHtcbiAgdG9wOiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQsXG4gIGJvdHRvbTogLyogbGVzc190aGFuICovOTM5MjE0MTUxLFxuICBlcTogZXEsXG4gIGNvbXBhcmU6IGNvbXBhcmUsXG4gIHN1Y2M6IHN1Y2MsXG4gIHByZWQ6IHByZWQsXG4gIGNhcmRpbmFsaXR5OiAzLFxuICBmcm9tRW51bTogdG9JbnQsXG4gIHRvRW51bTogdG9FbnVtXG59O1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQm91bmRlZEVudW0uQm91bmRlZEVudW1FeHRlbnNpb25zKEJvdW5kZWRFbnVtKTtcblxudmFyIGVxV2l0aENvbnZlcnNpb24gPSBpbmNsdWRlLmVxV2l0aENvbnZlcnNpb247XG5cbnZhciBub3RFcSA9IGluY2x1ZGUubm90RXE7XG5cbnZhciBlcUludmVydGVkID0gaW5jbHVkZS5lcUludmVydGVkO1xuXG52YXIgRXFJbnZlcnRlZCA9IGluY2x1ZGUuRXFJbnZlcnRlZDtcblxudmFyIEVxQnkgPSBpbmNsdWRlLkVxQnk7XG5cbnZhciBjb21wYXJlV2l0aENvbnZlcnNpb24gPSBpbmNsdWRlJDEuY29tcGFyZVdpdGhDb252ZXJzaW9uO1xuXG52YXIgY29tcGFyZVJldmVyc2VkID0gaW5jbHVkZSQxLmNvbXBhcmVSZXZlcnNlZDtcblxudmFyIE9yZFJldmVyc2VkID0gaW5jbHVkZSQxLk9yZFJldmVyc2VkO1xuXG52YXIgY29tcGFyZUFzSW50ID0gaW5jbHVkZSQxLmNvbXBhcmVBc0ludDtcblxudmFyIG1pbiA9IGluY2x1ZGUkMS5taW47XG5cbnZhciBtYXggPSBpbmNsdWRlJDEubWF4O1xuXG52YXIgbGVzc1RoYW4gPSBpbmNsdWRlJDEubGVzc1RoYW47XG5cbnZhciBsdCA9IGluY2x1ZGUkMS5sdDtcblxudmFyIGxlc3NUaGFuT3JFcSA9IGluY2x1ZGUkMS5sZXNzVGhhbk9yRXE7XG5cbnZhciBsdGUgPSBpbmNsdWRlJDEubHRlO1xuXG52YXIgZ3JlYXRlclRoYW4gPSBpbmNsdWRlJDEuZ3JlYXRlclRoYW47XG5cbnZhciBndCA9IGluY2x1ZGUkMS5ndDtcblxudmFyIGdyZWF0ZXJUaGFuT3JFcSA9IGluY2x1ZGUkMS5ncmVhdGVyVGhhbk9yRXE7XG5cbnZhciBndGUgPSBpbmNsdWRlJDEuZ3RlO1xuXG52YXIgY2xhbXAgPSBpbmNsdWRlJDEuY2xhbXA7XG5cbnZhciBiZXR3ZWVuID0gaW5jbHVkZSQxLmJldHdlZW47XG5cbnZhciBPcmRSaW5nRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMS5PcmRSaW5nRXh0ZW5zaW9ucztcblxudmFyIE9yZE5hbWVkID0gaW5jbHVkZSQxLk9yZE5hbWVkO1xuXG52YXIgT3JkQnkgPSBpbmNsdWRlJDEuT3JkQnk7XG5cbnZhciB0b3AgPSAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG5cbnZhciBib3R0b20gPSAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG5cbnZhciBmcm9tVG9Bc0xpc3QgPSBpbmNsdWRlJDIuZnJvbVRvQXNMaXN0O1xuXG52YXIgdXBGcm9tQXNMaXN0ID0gaW5jbHVkZSQyLnVwRnJvbUFzTGlzdDtcblxudmFyIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCA9IGluY2x1ZGUkMi51cEZyb21JbmNsdWRpbmdBc0xpc3Q7XG5cbnZhciBkb3duRnJvbUFzTGlzdCA9IGluY2x1ZGUkMi5kb3duRnJvbUFzTGlzdDtcblxudmFyIGRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0ID0gaW5jbHVkZSQyLmRvd25Gcm9tSW5jbHVkaW5nQXNMaXN0O1xuXG52YXIgZnJvbVRoZW5Ub0FzTGlzdCA9IGluY2x1ZGUkMy5mcm9tVGhlblRvQXNMaXN0O1xuXG5leHBvcnQge1xuICBmcm9tSW50ICxcbiAgdG9JbnQgLFxuICByZXZlcnNlICxcbiAgZXEgLFxuICBFcSAsXG4gIGVxV2l0aENvbnZlcnNpb24gLFxuICBub3RFcSAsXG4gIGVxSW52ZXJ0ZWQgLFxuICBFcUludmVydGVkICxcbiAgRXFCeSAsXG4gIGNvbXBhcmUgLFxuICBPcmQgLFxuICBjb21wYXJlV2l0aENvbnZlcnNpb24gLFxuICBjb21wYXJlUmV2ZXJzZWQgLFxuICBPcmRSZXZlcnNlZCAsXG4gIGNvbXBhcmVBc0ludCAsXG4gIG1pbiAsXG4gIG1heCAsXG4gIGxlc3NUaGFuICxcbiAgbHQgLFxuICBsZXNzVGhhbk9yRXEgLFxuICBsdGUgLFxuICBncmVhdGVyVGhhbiAsXG4gIGd0ICxcbiAgZ3JlYXRlclRoYW5PckVxICxcbiAgZ3RlICxcbiAgY2xhbXAgLFxuICBiZXR3ZWVuICxcbiAgT3JkUmluZ0V4dGVuc2lvbnMgLFxuICBPcmROYW1lZCAsXG4gIE9yZEJ5ICxcbiAgdG9wICxcbiAgYm90dG9tICxcbiAgQm91bmRlZCAsXG4gIHByZWQgLFxuICBzdWNjICxcbiAgRW51bSAsXG4gIGZyb21Ub0FzTGlzdCAsXG4gIHVwRnJvbUFzTGlzdCAsXG4gIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCAsXG4gIGRvd25Gcm9tQXNMaXN0ICxcbiAgZG93bkZyb21JbmNsdWRpbmdBc0xpc3QgLFxuICBCb3VuZGVkRW51bSAsXG4gIGZyb21UaGVuVG9Bc0xpc3QgLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbiRCc0Jhc3RldCBmcm9tIFwiLi9GdW5jdGlvbi5icy5qc1wiO1xuXG52YXIgJGxlc3MkZG90ID0gRnVuY3Rpb24kQnNCYXN0ZXQuSW5maXguJGxlc3MkZG90O1xuXG5mdW5jdGlvbiBtYXliZShmLCAkJGRlZmF1bHQsIG9wdCkge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihvcHQpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJCRkZWZhdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFdpdGhEZWZhdWx0KGEsIHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBhO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcChmLCBhKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShDdXJyeS5fMShmLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpKSk7XG4gIH1cbiAgXG59XG5cbnZhciBGdW5jdG9yID0ge1xuICBtYXA6IG1hcFxufTtcblxuZnVuY3Rpb24gYXBwbHkoZm5fb3B0LCBhKSB7XG4gIGlmIChmbl9vcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBtYXAoZm5fb3B0LCBhKTtcbiAgfVxuICBcbn1cblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoYSk7XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxuZnVuY3Rpb24gZmxhdF9tYXAoeCwgZikge1xuICBpZiAoeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpO1xuICB9XG4gIFxufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IHB1cmUsXG4gIGZsYXRfbWFwOiBmbGF0X21hcFxufTtcblxuZnVuY3Rpb24gTWFnbWEoTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoTS5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTZW1pZ3JvdXAoUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoUy5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNb25vaWQoUykge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoUy5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICAgICAgICBlbXB0eTogdW5kZWZpbmVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFF1YXNpZ3JvdXAoUSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkMSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ3VycnkuXzIoUS5hcHBlbmQsIGEkMSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihiKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhJDEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBMb29wKEwpIHtcbiAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiA7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJDEgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpO1xuICAgIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKEN1cnJ5Ll8yKEwuYXBwZW5kLCBhJDEsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoYSQxKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYXBwZW5kOiBhcHBlbmQsXG4gICAgICAgICAgZW1wdHk6IHVuZGVmaW5lZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBhbHQoYSwgYikge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihhKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGI7XG4gIH1cbn1cblxudmFyIEFsdCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0XG59O1xuXG52YXIgUGx1cyA9IHtcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0LFxuICBlbXB0eTogdW5kZWZpbmVkXG59O1xuXG52YXIgQWx0ZXJuYXRpdmUgPSB7XG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0LFxuICBlbXB0eTogdW5kZWZpbmVkXG59O1xuXG5mdW5jdGlvbiBmb2xkX2xlZnQoZiwgaW5pdCwgeCkge1xuICByZXR1cm4gbWF5YmUoQ3VycnkuXzEoZiwgaW5pdCksIGluaXQsIHgpO1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGluaXQsIHgpIHtcbiAgcmV0dXJuIG1heWJlKChmdW5jdGlvbiAoeCRwcmltZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihmLCB4JHByaW1lLCBpbml0KTtcbiAgICAgICAgICAgICAgfSksIGluaXQsIHgpO1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcChNKSB7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIG1heWJlKGYsIE0uZW1wdHksIHgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcF9BbnkoTSkge1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgeCkge1xuICAgIHJldHVybiBtYXliZShmLCBNLmVtcHR5LCB4KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZF9NYXBfUGx1cyhQKSB7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIG1heWJlKGYsIFAuZW1wdHksIHgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShBKSB7XG4gIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmLCB4KSB7XG4gICAgcmV0dXJuIG1heWJlKEN1cnJ5Ll8yKCRsZXNzJGRvdCwgQ3VycnkuXzEoQS5tYXAsIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgZiksIEN1cnJ5Ll8xKEEucHVyZSwgdW5kZWZpbmVkKSwgeCk7XG4gIH07XG4gIHZhciBzZXF1ZW5jZSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIG1heWJlKEN1cnJ5Ll8xKEEubWFwLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBDdXJyeS5fMShBLnB1cmUsIHVuZGVmaW5lZCksIHgpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBFcShFKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICBpZiAoeHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHlzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEUuZXEsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeHMpLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB5cyA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gT3JkKE8pIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIGlmICh4cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoeXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoTy5lcSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih4cyksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeXMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHlzID09PSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuICB2YXIgY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzIoTy5jb21wYXJlLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiBsZXNzX3RoYW4gKi85MzkyMTQxNTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcSxcbiAgICAgICAgICBjb21wYXJlOiBjb21wYXJlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNob3coUykge1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFwiU29tZShcIiArIChDdXJyeS5fMShTLnNob3csIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSkpICsgXCIpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJOb25lXCI7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3dcbiAgICAgICAgfTtcbn1cblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5Nb25hZChNb25hZCk7XG5cbnZhciBpbmNsdWRlJDEgPSBJbmZpeCRCc0Jhc3RldC5BbHRlcm5hdGl2ZShBbHRlcm5hdGl2ZSk7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEgPSBpbmNsdWRlLiRncmVhdCRncmVhdCRlcTtcblxudmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlLiRlcSRsZXNzJGxlc3M7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlLiRncmVhdCRlcSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGVxJGxlc3MgPSBpbmNsdWRlLiRsZXNzJGVxJGxlc3M7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyRoYXNoJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyRzdGFyJGdyZWF0O1xuXG52YXIgSW5maXggPSB7XG4gICRncmVhdCRncmVhdCRlcTogSW5maXhfJGdyZWF0JGdyZWF0JGVxLFxuICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgJGxlc3MkZXEkbGVzczogSW5maXhfJGxlc3MkZXEkbGVzcyxcbiAgJGxlc3MkcGlwZSRncmVhdDogSW5maXhfJGxlc3MkcGlwZSRncmVhdCxcbiAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICRwaXBlJHF1ZXN0aW9uOiBnZXRXaXRoRGVmYXVsdFxufTtcblxuZXhwb3J0IHtcbiAgJGxlc3MkZG90ICxcbiAgbWF5YmUgLFxuICBnZXRXaXRoRGVmYXVsdCAsXG4gIEZ1bmN0b3IgLFxuICBBcHBseSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgTW9uYWQgLFxuICBNYWdtYSAsXG4gIFNlbWlncm91cCAsXG4gIE1vbm9pZCAsXG4gIFF1YXNpZ3JvdXAgLFxuICBMb29wICxcbiAgQWx0ICxcbiAgUGx1cyAsXG4gIEFsdGVybmF0aXZlICxcbiAgRm9sZGFibGUgLFxuICBUcmF2ZXJzYWJsZSAsXG4gIEVxICxcbiAgT3JkICxcbiAgU2hvdyAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcblxuZnVuY3Rpb24gQWx0RXh0ZW5zaW9ucyhBKSB7XG4gIHZhciBvckVsc2UgPSBmdW5jdGlvbiAoZmFsbGJhY2ssIGluaXQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5hbHQsIGluaXQsIGZhbGxiYWNrKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBvckVsc2U6IG9yRWxzZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBbHRJbmZpeChBKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkcGlwZSRncmVhdDogQS5hbHRcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgQWx0RXh0ZW5zaW9ucyAsXG4gIEFsdEluZml4ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEZ1bmN0aW9ucyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1vbm9pZEV4dGVuc2lvbnMoTSkge1xuICB2YXIgQnNNb25vaWRFeHRlbnNpb25zID0gRnVuY3Rpb25zJEJzQmFzdGV0Lk1vbm9pZChNKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBCc01vbm9pZEV4dGVuc2lvbnM6IEJzTW9ub2lkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBndWFyZDogQnNNb25vaWRFeHRlbnNpb25zLmd1YXJkLFxuICAgICAgICAgIHBvd2VyOiBCc01vbm9pZEV4dGVuc2lvbnMucG93ZXJcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogRnVuY3Rpb25zLUJzQmFzdGV0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfQXJyYXkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9BcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZCBmcm9tIFwiLi4vUmVsdWRlX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEZ1bmN0aW9ucyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG9wdGlvbkFsdChhLCBiKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYjtcbiAgfVxufVxuXG5mdW5jdGlvbiBGb2xkYWJsZUV4dGVuc2lvbnMoRikge1xuICB2YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRm9sZGFibGUoRik7XG4gIHZhciBhbnkgPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAodiwgeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgeCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIGZhbHNlLCB4cyk7XG4gIH07XG4gIHZhciBhbGwgPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAodiwgeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHgpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLCB0cnVlLCB4cyk7XG4gIH07XG4gIHZhciBjb250YWluc0J5ID0gZnVuY3Rpb24gKGYsIHgsIHhzKSB7XG4gICAgcmV0dXJuIGFueShDdXJyeS5fMShmLCB4KSwgeHMpO1xuICB9O1xuICB2YXIgY29udGFpbnMgPSBmdW5jdGlvbiAoZXFBLCB4LCB4cykge1xuICAgIHJldHVybiBhbnkoQ3VycnkuXzEoZXFBLmVxLCB4KSwgeHMpO1xuICB9O1xuICB2YXIgaW5kZXhPZkJ5ID0gZnVuY3Rpb24gKGYsIHgsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gcGFyYW1bMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICsgMSB8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uQWx0KHBhcmFtWzFdLCBDdXJyeS5fMihmLCB4LCB5KSA/IGkgOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgXSwgeHMpWzFdO1xuICB9O1xuICB2YXIgaW5kZXhPZiA9IGZ1bmN0aW9uIChlcUEsIHgsIHhzKSB7XG4gICAgcmV0dXJuIGluZGV4T2ZCeShlcUEuZXEsIHgsIHhzKTtcbiAgfTtcbiAgdmFyIG1pbkJ5ID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKG1pbiwgeCkge1xuICAgICAgICAgICAgICAgICAgaWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKFJlbHVkZV9PcmQubWluQnkoZiwgeCwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtaW4pKSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkLCB4cyk7XG4gIH07XG4gIHZhciBtaW4gPSBmdW5jdGlvbiAob3JkQSwgeHMpIHtcbiAgICByZXR1cm4gbWluQnkob3JkQS5jb21wYXJlLCB4cyk7XG4gIH07XG4gIHZhciBtYXhCeSA9IGZ1bmN0aW9uIChmLCB4cykge1xuICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfbGVmdCwgKGZ1bmN0aW9uIChtaW4sIHgpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZhciB5ID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtaW4pO1xuICAgICAgICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGYsIHgsIHkpID09PSAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUoeCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh5KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkLCB4cyk7XG4gIH07XG4gIHZhciBtYXggPSBmdW5jdGlvbiAob3JkQSwgeHMpIHtcbiAgICByZXR1cm4gbWF4Qnkob3JkQS5jb21wYXJlLCB4cyk7XG4gIH07XG4gIHZhciBjb3VudEJ5ID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGNvdW50LCB4KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzEoZiwgeCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvdW50ICsgMSB8IDA7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIDAsIHhzKTtcbiAgfTtcbiAgdmFyIGxlbmd0aCA9IGZ1bmN0aW9uICh4cykge1xuICAgIHJldHVybiBjb3VudEJ5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0pLCB4cyk7XG4gIH07XG4gIHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKGYsIHhzKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgeCk7XG4gICAgICAgICAgICAgICAgfSksIHVuZGVmaW5lZCwgeHMpO1xuICB9O1xuICB2YXIgZm9yRWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uIChmLCB4cykge1xuICAgIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKGksIHgpIHtcbiAgICAgICAgICAgIEN1cnJ5Ll8yKGYsIHgsIGkpO1xuICAgICAgICAgICAgcmV0dXJuIGkgKyAxIHwgMDtcbiAgICAgICAgICB9KSwgMCwgeHMpO1xuICAgIFxuICB9O1xuICB2YXIgZmluZCA9IGZ1bmN0aW9uIChmKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHYsIHgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25BbHQodiwgQ3VycnkuXzEoZiwgeCkgPyBDYW1sX29wdGlvbi5zb21lKHgpIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9KSwgdW5kZWZpbmVkKTtcbiAgfTtcbiAgdmFyIGZpbmRXaXRoSW5kZXggPSBmdW5jdGlvbiAoZiwgeHMpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX2xlZnQsIChmdW5jdGlvbiAocGFyYW0sIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJhbVswXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKyAxIHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25BbHQocGFyYW1bMV0sIEN1cnJ5Ll8yKGYsIHgsIGkpID8gQ2FtbF9vcHRpb24uc29tZSh4KSA6IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH0pLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICBdLCB4cylbMV07XG4gIH07XG4gIHZhciB0b0xpc3QgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoRi5mb2xkX3JpZ2h0LCAoZnVuY3Rpb24gKGEsIGFjYykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIC8qIFtdICovMCwgZmEpO1xuICB9O1xuICB2YXIgdG9BcnJheSA9IGZ1bmN0aW9uIChmYSkge1xuICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfbGVmdCwgKGZ1bmN0aW9uIChhY2MsIGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBCZWx0X0FycmF5LmNvbmNhdChhY2MsIFthXSk7XG4gICAgICAgICAgICAgICAgfSksIFtdLCBmYSk7XG4gIH07XG4gIHZhciBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoUykge1xuICAgIHZhciBCc0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLlNlbWlncm91cCwgUyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEJzRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zOiBCc0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIHN1cnJvdW5kTWFwOiBCc0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucy5zdXJyb3VuZF9tYXAsXG4gICAgICAgICAgICBzdXJyb3VuZDogQnNGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMuc3Vycm91bmRcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBDdXJyeS5fMShCc0ZvbGRhYmxlRXh0ZW5zaW9ucy5Nb25vaWQsIE0pO1xuICAgIHZhciBmb2xkTWFwID0gQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMuRk0uZm9sZF9tYXA7XG4gICAgdmFyIGludGVyY2FsYXRlID0gZnVuY3Rpb24gKHNlcCwgeHMpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhGLmZvbGRfbGVmdCwgKGZ1bmN0aW9uIChwYXJhbSwgeCkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzIoTS5hcHBlbmQsIHBhcmFtWzFdLCBDdXJyeS5fMihNLmFwcGVuZCwgc2VwLCB4KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSwgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIE0uZW1wdHlcbiAgICAgICAgICAgICAgICAgIF0sIHhzKVsxXTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMsXG4gICAgICAgICAgICBmb2xkTWFwOiBmb2xkTWFwLFxuICAgICAgICAgICAgZm9sZFdpdGhNb25vaWQ6IEJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLmZvbGQsXG4gICAgICAgICAgICBpbnRlcmNhbGF0ZTogaW50ZXJjYWxhdGVcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgZm9sZE1hcCA9IGZ1bmN0aW9uIChtb25vaWRBLCBmLCB4cykge1xuICAgIHZhciBCc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyA9IEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLk1vbm9pZCwgbW9ub2lkQSk7XG4gICAgdmFyIGZvbGRNYXAkMSA9IEJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLkZNLmZvbGRfbWFwO1xuICAgIHJldHVybiBDdXJyeS5fMihmb2xkTWFwJDEsIGYsIHhzKTtcbiAgfTtcbiAgdmFyIGZvbGRXaXRoTW9ub2lkID0gZnVuY3Rpb24gKG1vbm9pZEEsIHhzKSB7XG4gICAgdmFyIEJzRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gQ3VycnkuXzEoQnNGb2xkYWJsZUV4dGVuc2lvbnMuTW9ub2lkLCBtb25vaWRBKTtcbiAgICByZXR1cm4gQ3VycnkuXzEoQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMuZm9sZCwgeHMpO1xuICB9O1xuICB2YXIgaW50ZXJjYWxhdGUgPSBmdW5jdGlvbiAobW9ub2lkQSwgc2VwLCB4cykge1xuICAgIEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLk1vbm9pZCwgbW9ub2lkQSk7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKEYuZm9sZF9sZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMihtb25vaWRBLmFwcGVuZCwgcGFyYW1bMV0sIEN1cnJ5Ll8yKG1vbm9pZEEuYXBwZW5kLCBzZXAsIHgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICBtb25vaWRBLmVtcHR5XG4gICAgICAgICAgICAgICAgXSwgeHMpWzFdO1xuICB9O1xuICB2YXIgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gQ3VycnkuXzEoQnNGb2xkYWJsZUV4dGVuc2lvbnMuQXBwbGljYXRpdmUsIEEpO1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zOiBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgICAgdHJhdmVyc2VfOiBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLnRyYXZlcnNlJHByaW1lLFxuICAgICAgICAgICAgc2VxdWVuY2VfOiBCc0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLnNlcXVlbmNlJHByaW1lXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyA9IEN1cnJ5Ll8xKEJzRm9sZGFibGVFeHRlbnNpb25zLk1vbmFkLCBNKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9uczogQnNGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIGZvbGRXaXRoTW9uYWQ6IEJzRm9sZGFibGVNb25hZEV4dGVuc2lvbnMuZm9sZF9tb25hZFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IGZ1bmN0aW9uIChFKSB7XG4gICAgdmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgICByZXR1cm4gYW55KEN1cnJ5Ll8xKEUuZXEsIHBhcmFtKSwgcGFyYW0kMSk7XG4gICAgfTtcbiAgICB2YXIgaW5kZXhPZiA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgICAgcmV0dXJuIGluZGV4T2ZCeShFLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGFpbnM6IGNvbnRhaW5zLFxuICAgICAgICAgICAgaW5kZXhPZjogaW5kZXhPZlxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBmdW5jdGlvbiAoTykge1xuICAgIHZhciBtaW4gPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBtaW5CeShPLmNvbXBhcmUsIHBhcmFtKTtcbiAgICB9O1xuICAgIHZhciBtYXggPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBtYXhCeShPLmNvbXBhcmUsIHBhcmFtKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgIG1heDogbWF4XG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBCc0ZvbGRhYmxlRXh0ZW5zaW9uczogQnNGb2xkYWJsZUV4dGVuc2lvbnMsXG4gICAgICAgICAgYW55OiBhbnksXG4gICAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgICAgY29udGFpbnNCeTogY29udGFpbnNCeSxcbiAgICAgICAgICBjb250YWluczogY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZkJ5OiBpbmRleE9mQnksXG4gICAgICAgICAgaW5kZXhPZjogaW5kZXhPZixcbiAgICAgICAgICBtaW5CeTogbWluQnksXG4gICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgbWF4Qnk6IG1heEJ5LFxuICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgIGNvdW50Qnk6IGNvdW50QnksXG4gICAgICAgICAgbGVuZ3RoOiBsZW5ndGgsXG4gICAgICAgICAgc2l6ZTogbGVuZ3RoLFxuICAgICAgICAgIGNvdW50OiBsZW5ndGgsXG4gICAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgICBmb3JFYWNoV2l0aEluZGV4OiBmb3JFYWNoV2l0aEluZGV4LFxuICAgICAgICAgIGZpbmQ6IGZpbmQsXG4gICAgICAgICAgZmluZFdpdGhJbmRleDogZmluZFdpdGhJbmRleCxcbiAgICAgICAgICB0b0xpc3Q6IHRvTGlzdCxcbiAgICAgICAgICB0b0FycmF5OiB0b0FycmF5LFxuICAgICAgICAgIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9uczogRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZvbGRNYXA6IGZvbGRNYXAsXG4gICAgICAgICAgZm9sZFdpdGhNb25vaWQ6IGZvbGRXaXRoTW9ub2lkLFxuICAgICAgICAgIGludGVyY2FsYXRlOiBpbnRlcmNhbGF0ZSxcbiAgICAgICAgICBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9uczogRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVNb25hZEV4dGVuc2lvbnM6IEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlRXFFeHRlbnNpb25zOiBGb2xkYWJsZUVxRXh0ZW5zaW9ucyxcbiAgICAgICAgICBGb2xkYWJsZU9yZEV4dGVuc2lvbnM6IEZvbGRhYmxlT3JkRXh0ZW5zaW9uc1xuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBvcHRpb25BbHQgLFxuICBGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBcbn1cbi8qIFJlbHVkZV9PcmQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBTZW1pZ3JvdXBFeHRlbnNpb25zKFMpIHtcbiAgdmFyIGNvbmNhdE5hbWVkID0gZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFMuYXBwZW5kLCBwcmVmaXgsIHN1ZmZpeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29uY2F0TmFtZWQ6IGNvbmNhdE5hbWVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cEluZml4KFMpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkcGlwZSRwbHVzJHBpcGU6IFMuYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIFNlbWlncm91cEV4dGVuc2lvbnMgLFxuICBTZW1pZ3JvdXBJbmZpeCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBTZW1pZ3JvdXBvaWRFeHRlbnNpb25zKFMpIHtcbiAgdmFyIGFuZFRoZW4gPSBmdW5jdGlvbiAoYVRvQiwgYlRvQykge1xuICAgIHJldHVybiBDdXJyeS5fMihTLmNvbXBvc2UsIGJUb0MsIGFUb0IpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFuZFRoZW46IGFuZFRoZW5cbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaWdyb3Vwb2lkSW5maXgoUykge1xuICB2YXIgYW5kVGhlbiA9IGZ1bmN0aW9uIChhVG9CLCBiVG9DKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFMuY29tcG9zZSwgYlRvQywgYVRvQik7XG4gIH07XG4gIHZhciBTRSA9IHtcbiAgICBhbmRUaGVuOiBhbmRUaGVuXG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgU0U6IFNFLFxuICAgICAgICAgICRsZXNzJGxlc3MkbGVzczogUy5jb21wb3NlLFxuICAgICAgICAgICRncmVhdCRncmVhdCRncmVhdDogYW5kVGhlblxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBTZW1pZ3JvdXBvaWRFeHRlbnNpb25zICxcbiAgU2VtaWdyb3Vwb2lkSW5maXggLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgT3B0aW9uJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GdW5jdGlvbiBmcm9tIFwiLi4vUmVsdWRlX0Z1bmN0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19QbHVzIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1BsdXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsaWduIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsaWduLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbm9pZCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbiBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pYWxpZ24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXAuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuYnMuanNcIjtcblxuZnVuY3Rpb24gY29tcG9zZShvcHRpb25CVG9DLCBvcHRpb25BVG9CKSB7XG4gIGlmIChvcHRpb25BVG9CICE9PSB1bmRlZmluZWQgJiYgb3B0aW9uQlRvQyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQob3B0aW9uQVRvQiwgb3B0aW9uQlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gIH1cbiAgXG59XG5cbnZhciBTZW1pZ3JvdXBvaWQgPSB7XG4gIGNvbXBvc2U6IGNvbXBvc2Vcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLlNlbWlncm91cG9pZEV4dGVuc2lvbnMoU2VtaWdyb3Vwb2lkKTtcblxuZnVuY3Rpb24gbWFwKGYsIHgpIHtcbiAgaWYgKHggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKEN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpKTtcbiAgfVxuICBcbn1cblxudmFyIEZ1bmN0b3IgPSB7XG4gIG1hcDogbWFwXG59O1xuXG52YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcblxudmFyIGFwcGx5ID0gT3B0aW9uJEJzQmFzdGV0LkFwcGx5LmFwcGx5O1xuXG52YXIgQXBwbHkgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHlcbn07XG5cbnZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuXG5mdW5jdGlvbiBwdXJlKHYpIHtcbiAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUodik7XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbmZ1bmN0aW9uIGJpbmQoeCwgZikge1xuICBpZiAoeCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpO1xuICB9XG4gIFxufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IHB1cmUsXG4gIGZsYXRfbWFwOiBiaW5kXG59O1xuXG52YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRFeHRlbnNpb25zKE1vbmFkKTtcblxuZnVuY3Rpb24gYWxpZ24oZmEsIGZiKSB7XG4gIGlmIChmYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGZiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiBUaGF0ICovQmxvY2suX18oMSwgW0NhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZmIpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICB9XG4gIHZhciBhID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihmYSk7XG4gIGlmIChmYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIEJvdGggKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oZmIpXG4gICAgICAgICAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVGhpcyAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxpZ25XaXRoKGYsIGZhLCBmYikge1xuICByZXR1cm4gbWFwKGYsIGFsaWduKGZhLCBmYikpO1xufVxuXG52YXIgU2VtaWFsaWduID0ge1xuICBtYXA6IG1hcCxcbiAgYWxpZ246IGFsaWduLFxuICBhbGlnbldpdGg6IGFsaWduV2l0aFxufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduLlNlbWlhbGlnbkV4dGVuc2lvbnMoU2VtaWFsaWduKTtcblxudmFyIEFsaWduID0ge1xuICBtYXA6IG1hcCxcbiAgYWxpZ246IGFsaWduLFxuICBhbGlnbldpdGg6IGFsaWduV2l0aCxcbiAgbmlsOiB1bmRlZmluZWRcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0FsaWduLkFsaWduRXh0ZW5zaW9ucyhBbGlnbik7XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGZuLCAkJGRlZmF1bHQpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBPcHRpb24kQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9sZWZ0KGZuLCAkJGRlZmF1bHQsIHBhcmFtKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZm9sZFJpZ2h0KGZuLCAkJGRlZmF1bHQpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBPcHRpb24kQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9yaWdodChmbiwgJCRkZWZhdWx0LCBwYXJhbSk7XG4gICAgfSk7XG59XG5cbnZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5Gb2xkYWJsZUV4dGVuc2lvbnMoT3B0aW9uJEJzQmFzdGV0LkZvbGRhYmxlKTtcblxuZnVuY3Rpb24gYWx0KGZhMSwgZmEyKSB7XG4gIGlmIChmYTEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhMjtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbHRMYXp5KGZhMSwgZ2V0RkEyKSB7XG4gIGlmIChmYTEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGdldEZBMiwgdW5kZWZpbmVkKTtcbiAgfVxufVxuXG52YXIgU2VtaWdyb3VwX0FueSA9IHtcbiAgYXBwZW5kOiBhbHRcbn07XG5cbnZhciBNb25vaWRfQW55ID0ge1xuICBhcHBlbmQ6IGFsdCxcbiAgZW1wdHk6IHVuZGVmaW5lZFxufTtcblxudmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRFeHRlbnNpb25zKE9wdGlvbiRCc0Jhc3RldC5BbHQpO1xuXG5SZWx1ZGVfRXh0ZW5zaW9uc19QbHVzLlBsdXNFeHRlbnNpb25zKE9wdGlvbiRCc0Jhc3RldC5QbHVzKTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQWx0ZXJuYXRpdmUuQWx0ZXJuYXRpdmVFeHRlbnNpb25zKE9wdGlvbiRCc0Jhc3RldC5BbHRlcm5hdGl2ZSk7XG5cbmZ1bmN0aW9uIGVxQnkoaW5uZXJFcSwgYSwgYikge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGlubmVyRXEsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiID09PSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoc2hvd0EsIGZhMSwgZmEyKSB7XG4gIHZhciBFcSA9IE9wdGlvbiRCc0Jhc3RldC5FcShzaG93QSk7XG4gIHJldHVybiBDdXJyeS5fMihFcS5lcSwgZmExLCBmYTIpO1xufVxuXG5mdW5jdGlvbiBFcShFcUEpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIHJldHVybiBlcUJ5KEVxQS5lcSwgeHMsIHlzKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gc2hvd0J5KHNob3dBLCBhKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJTb21lKFwiICsgKEN1cnJ5Ll8xKHNob3dBLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpKSArIFwiKVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJOb25lXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdyhzaG93QSwgZmEpIHtcbiAgdmFyIFNob3cgPSBPcHRpb24kQnNCYXN0ZXQuU2hvdyhzaG93QSk7XG4gIHJldHVybiBDdXJyeS5fMShTaG93LnNob3csIGZhKTtcbn1cblxuZnVuY3Rpb24gV2l0aFNlbWlncm91cChTKSB7XG4gIHZhciBTZW1pZ3JvdXAgPSBPcHRpb24kQnNCYXN0ZXQuU2VtaWdyb3VwKFMpO1xuICB2YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cC5TZW1pZ3JvdXBFeHRlbnNpb25zKFNlbWlncm91cCk7XG4gIHZhciBNb25vaWQgPSBPcHRpb24kQnNCYXN0ZXQuTW9ub2lkKFMpO1xuICB2YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkLk1vbm9pZEV4dGVuc2lvbnMoTW9ub2lkKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBTZW1pZ3JvdXA6IFNlbWlncm91cCxcbiAgICAgICAgICBjb25jYXROYW1lZDogaW5jbHVkZS5jb25jYXROYW1lZCxcbiAgICAgICAgICBNb25vaWQ6IE1vbm9pZCxcbiAgICAgICAgICBCc01vbm9pZEV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Cc01vbm9pZEV4dGVuc2lvbnMsXG4gICAgICAgICAgZ3VhcmQ6IGluY2x1ZGUkMS5ndWFyZCxcbiAgICAgICAgICBwb3dlcjogaW5jbHVkZSQxLnBvd2VyXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFdpdGhBcHBsaWNhdGl2ZShBKSB7XG4gIHZhciBUcmF2ZXJzYWJsZSA9IE9wdGlvbiRCc0Jhc3RldC5UcmF2ZXJzYWJsZShBKTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuVHJhdmVyc2FibGVFeHRlbnNpb25zKFRyYXZlcnNhYmxlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGVcbiAgICAgICAgfTtcbn1cblxudmFyIGFuZFRoZW4gPSBpbmNsdWRlLmFuZFRoZW47XG5cbnZhciBCc0Z1bmN0b3JFeHRlbnNpb25zID0gaW5jbHVkZSQxLkJzRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBmbGlwTWFwID0gaW5jbHVkZSQxLmZsaXBNYXA7XG5cbnZhciAkJHZvaWQgPSBpbmNsdWRlJDEuJCR2b2lkO1xuXG52YXIgdm9pZFJpZ2h0ID0gaW5jbHVkZSQxLnZvaWRSaWdodDtcblxudmFyIHZvaWRMZWZ0ID0gaW5jbHVkZSQxLnZvaWRMZWZ0O1xuXG52YXIgZmxhcCA9IGluY2x1ZGUkMS5mbGFwO1xuXG52YXIgQnNBcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDIuQnNBcHBseUV4dGVuc2lvbnM7XG5cbnZhciBhcHBseUZpcnN0ID0gaW5jbHVkZSQyLmFwcGx5Rmlyc3Q7XG5cbnZhciBhcHBseVNlY29uZCA9IGluY2x1ZGUkMi5hcHBseVNlY29uZDtcblxudmFyIG1hcDIgPSBpbmNsdWRlJDIubWFwMjtcblxudmFyIG1hcDMgPSBpbmNsdWRlJDIubWFwMztcblxudmFyIG1hcDQgPSBpbmNsdWRlJDIubWFwNDtcblxudmFyIG1hcDUgPSBpbmNsdWRlJDIubWFwNTtcblxudmFyIHR1cGxlMiA9IGluY2x1ZGUkMi50dXBsZTI7XG5cbnZhciB0dXBsZTMgPSBpbmNsdWRlJDIudHVwbGUzO1xuXG52YXIgdHVwbGU0ID0gaW5jbHVkZSQyLnR1cGxlNDtcblxudmFyIHR1cGxlNSA9IGluY2x1ZGUkMi50dXBsZTU7XG5cbnZhciBtYXBUdXBsZTIgPSBpbmNsdWRlJDIubWFwVHVwbGUyO1xuXG52YXIgbWFwVHVwbGUzID0gaW5jbHVkZSQyLm1hcFR1cGxlMztcblxudmFyIG1hcFR1cGxlNCA9IGluY2x1ZGUkMi5tYXBUdXBsZTQ7XG5cbnZhciBtYXBUdXBsZTUgPSBpbmNsdWRlJDIubWFwVHVwbGU1O1xuXG52YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDMuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBsaWZ0QTEgPSBpbmNsdWRlJDMubGlmdEExO1xuXG52YXIgQnNNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuQnNNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBmbGF0TWFwID0gaW5jbHVkZSQ0LmZsYXRNYXA7XG5cbnZhciBmbGF0dGVuID0gaW5jbHVkZSQ0LmZsYXR0ZW47XG5cbnZhciBjb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkNC5jb21wb3NlS2xlaXNsaTtcblxudmFyIGZsaXBDb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkNC5mbGlwQ29tcG9zZUtsZWlzbGk7XG5cbnZhciBsaWZ0TTEgPSBpbmNsdWRlJDQubGlmdE0xO1xuXG52YXIgd2hlbl8gPSBpbmNsdWRlJDQud2hlbl87XG5cbnZhciB1bmxlc3MgPSBpbmNsdWRlJDQudW5sZXNzO1xuXG52YXIgRm9sZGFibGU7XG5cbnZhciBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucztcblxudmFyIGFueSA9IGluY2x1ZGUkNS5hbnk7XG5cbnZhciBhbGwgPSBpbmNsdWRlJDUuYWxsO1xuXG52YXIgY29udGFpbnNCeSA9IGluY2x1ZGUkNS5jb250YWluc0J5O1xuXG52YXIgY29udGFpbnMgPSBpbmNsdWRlJDUuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBpbmNsdWRlJDUuaW5kZXhPZkJ5O1xuXG52YXIgaW5kZXhPZiA9IGluY2x1ZGUkNS5pbmRleE9mO1xuXG52YXIgbWluQnkgPSBpbmNsdWRlJDUubWluQnk7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDUubWluO1xuXG52YXIgbWF4QnkgPSBpbmNsdWRlJDUubWF4Qnk7XG5cbnZhciBtYXggPSBpbmNsdWRlJDUubWF4O1xuXG52YXIgY291bnRCeSA9IGluY2x1ZGUkNS5jb3VudEJ5O1xuXG52YXIgbGVuZ3RoID0gaW5jbHVkZSQ1Lmxlbmd0aDtcblxudmFyIHNpemUgPSBpbmNsdWRlJDUuc2l6ZTtcblxudmFyIGNvdW50ID0gaW5jbHVkZSQ1LmNvdW50O1xuXG52YXIgZm9yRWFjaCA9IGluY2x1ZGUkNS5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IGluY2x1ZGUkNS5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IGluY2x1ZGUkNS5maW5kO1xuXG52YXIgZmluZFdpdGhJbmRleCA9IGluY2x1ZGUkNS5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9MaXN0ID0gaW5jbHVkZSQ1LnRvTGlzdDtcblxudmFyIHRvQXJyYXkgPSBpbmNsdWRlJDUudG9BcnJheTtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDUuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IGluY2x1ZGUkNS5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDUuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IGluY2x1ZGUkNS5pbnRlcmNhbGF0ZTtcblxudmFyIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDUuRm9sZGFibGVNb25hZEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZUVxRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Gb2xkYWJsZUVxRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNS5Gb2xkYWJsZU9yZEV4dGVuc2lvbnM7XG5cbnZhciBBbHQ7XG5cbnZhciBvckVsc2UgPSBpbmNsdWRlJDYub3JFbHNlO1xuXG52YXIgUGx1cztcblxudmFyIEFsdGVybmF0aXZlO1xuXG52YXIgVHJhdmVyc2FibGUgPSBPcHRpb24kQnNCYXN0ZXQuVHJhdmVyc2FibGU7XG5cbnZhciBPcmQgPSBPcHRpb24kQnNCYXN0ZXQuT3JkO1xuXG52YXIgU2hvdztcblxuZXhwb3J0IHtcbiAgY29tcG9zZSAsXG4gIFNlbWlncm91cG9pZCAsXG4gIGFuZFRoZW4gLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsaWduICxcbiAgYWxpZ25XaXRoICxcbiAgU2VtaWFsaWduICxcbiAgQWxpZ24gLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBsZW5ndGggLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9MaXN0ICxcbiAgdG9BcnJheSAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgYWx0ICxcbiAgYWx0TGF6eSAsXG4gIFNlbWlncm91cF9BbnkgLFxuICBNb25vaWRfQW55ICxcbiAgQWx0ICxcbiAgb3JFbHNlICxcbiAgUGx1cyAsXG4gIEFsdGVybmF0aXZlICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIE9yZCAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgV2l0aFNlbWlncm91cCAsXG4gIFdpdGhBcHBsaWNhdGl2ZSAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X09wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X09wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHNvbWUoYSkge1xuICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhKTtcbn1cblxuZnVuY3Rpb24gaXNTb21lKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc05vbmUocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZvbGQoJCRkZWZhdWx0LCBmLCB2KSB7XG4gIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih2KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb2xkTGF6eShnZXREZWZhdWx0LCBmLCB2KSB7XG4gIGlmICh2ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih2KSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGdldERlZmF1bHQsIHVuZGVmaW5lZCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3JFbHNlKCQkZGVmYXVsdCwgYSkge1xuICBpZiAoYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPckVsc2VMYXp5KGdldERlZmF1bHQsIGEpIHtcbiAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShnZXREZWZhdWx0LCB1bmRlZmluZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9yRWxzZShmYWxsYmFjaywgZmEpIHtcbiAgaWYgKGZhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZmE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9yRWxzZUxhenkoZmFsbGJhY2ssIGZhKSB7XG4gIGlmIChmYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShmYWxsYmFjaywgdW5kZWZpbmVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YXAoaWZTb21lLCBmYSkge1xuICBpZiAoZmEgIT09IHVuZGVmaW5lZCkge1xuICAgIEN1cnJ5Ll8xKGlmU29tZSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihmYSkpO1xuICAgIHJldHVybiBmYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmE7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFwTm9uZShpZk5vbmUsIGZhKSB7XG4gIGlmIChmYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIEN1cnJ5Ll8xKGlmTm9uZSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gZmE7XG4gIH1cbn1cblxuZnVuY3Rpb24gYml0YXAoaWZOb25lLCBpZlNvbWUsIGZhKSB7XG4gIGlmIChmYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgQ3VycnkuXzEoaWZTb21lLCBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGZhKSk7XG4gICAgcmV0dXJuIGZhO1xuICB9IGVsc2Uge1xuICAgIEN1cnJ5Ll8xKGlmTm9uZSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihmbikge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uICgkJGRlZmF1bHQsIHYpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzEoZm4sIHYpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh2KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB1bmRlZmluZWQpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJOb3QoZikge1xuICByZXR1cm4gZmlsdGVyKChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyIG5vbmU7XG5cbnZhciBlbXB0eTtcblxudmFyIGdldE9yVGhyb3cgPSBCZWx0X09wdGlvbi5nZXRFeG47XG5cbnZhciB0YXBTb21lID0gdGFwO1xuXG52YXIga2VlcCA9IGZpbHRlcjtcblxudmFyIHJlamVjdCA9IGZpbHRlck5vdDtcblxuZXhwb3J0IHtcbiAgc29tZSAsXG4gIG5vbmUgLFxuICBlbXB0eSAsXG4gIGlzU29tZSAsXG4gIGlzTm9uZSAsXG4gIGZvbGQgLFxuICBmb2xkTGF6eSAsXG4gIGdldE9yRWxzZSAsXG4gIGdldE9yRWxzZUxhenkgLFxuICBnZXRPclRocm93ICxcbiAgb3JFbHNlICxcbiAgb3JFbHNlTGF6eSAsXG4gIHRhcCAsXG4gIHRhcFNvbWUgLFxuICB0YXBOb25lICxcbiAgYml0YXAgLFxuICBmaWx0ZXIgLFxuICBrZWVwICxcbiAgZmlsdGVyTm90ICxcbiAgcmVqZWN0ICxcbiAgXG59XG4vKiBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIExpc3QgZnJvbSBcIi4vbGlzdC5qc1wiO1xuXG52YXIgbGVuZ3RoID0gTGlzdC5sZW5ndGg7XG5cbnZhciBoZCA9IExpc3QuaGQ7XG5cbnZhciBjb21wYXJlX2xlbmd0aHMgPSBMaXN0LmNvbXBhcmVfbGVuZ3RocztcblxudmFyIGNvbXBhcmVfbGVuZ3RoX3dpdGggPSBMaXN0LmNvbXBhcmVfbGVuZ3RoX3dpdGg7XG5cbnZhciBjb25zID0gTGlzdC5jb25zO1xuXG52YXIgdGwgPSBMaXN0LnRsO1xuXG52YXIgbnRoID0gTGlzdC5udGg7XG5cbnZhciBudGhfb3B0ID0gTGlzdC5udGhfb3B0O1xuXG52YXIgcmV2ID0gTGlzdC5yZXY7XG5cbnZhciBpbml0ID0gTGlzdC5pbml0O1xuXG52YXIgYXBwZW5kID0gTGlzdC5hcHBlbmQ7XG5cbnZhciByZXZfYXBwZW5kID0gTGlzdC5yZXZfYXBwZW5kO1xuXG52YXIgY29uY2F0ID0gTGlzdC5jb25jYXQ7XG5cbnZhciBmbGF0dGVuID0gTGlzdC5mbGF0dGVuO1xuXG52YXIgaXRlciA9IExpc3QuaXRlcjtcblxudmFyIGl0ZXJpID0gTGlzdC5pdGVyaTtcblxudmFyIG1hcCA9IExpc3QubWFwO1xuXG52YXIgbWFwaSA9IExpc3QubWFwaTtcblxudmFyIHJldl9tYXAgPSBMaXN0LnJldl9tYXA7XG5cbnZhciBmb2xkX2xlZnQgPSBMaXN0LmZvbGRfbGVmdDtcblxudmFyIGZvbGRfcmlnaHQgPSBMaXN0LmZvbGRfcmlnaHQ7XG5cbnZhciBpdGVyMiA9IExpc3QuaXRlcjI7XG5cbnZhciBtYXAyID0gTGlzdC5tYXAyO1xuXG52YXIgcmV2X21hcDIgPSBMaXN0LnJldl9tYXAyO1xuXG52YXIgZm9sZF9sZWZ0MiA9IExpc3QuZm9sZF9sZWZ0MjtcblxudmFyIGZvbGRfcmlnaHQyID0gTGlzdC5mb2xkX3JpZ2h0MjtcblxudmFyIGZvcl9hbGwgPSBMaXN0LmZvcl9hbGw7XG5cbnZhciBleGlzdHMgPSBMaXN0LmV4aXN0cztcblxudmFyIGZvcl9hbGwyID0gTGlzdC5mb3JfYWxsMjtcblxudmFyIGV4aXN0czIgPSBMaXN0LmV4aXN0czI7XG5cbnZhciBtZW0gPSBMaXN0Lm1lbTtcblxudmFyIG1lbXEgPSBMaXN0Lm1lbXE7XG5cbnZhciBmaW5kID0gTGlzdC5maW5kO1xuXG52YXIgZmluZF9vcHQgPSBMaXN0LmZpbmRfb3B0O1xuXG52YXIgZmlsdGVyID0gTGlzdC5maWx0ZXI7XG5cbnZhciBmaW5kX2FsbCA9IExpc3QuZmluZF9hbGw7XG5cbnZhciBwYXJ0aXRpb24gPSBMaXN0LnBhcnRpdGlvbjtcblxudmFyIGFzc29jID0gTGlzdC5hc3NvYztcblxudmFyIGFzc29jX29wdCA9IExpc3QuYXNzb2Nfb3B0O1xuXG52YXIgYXNzcSA9IExpc3QuYXNzcTtcblxudmFyIGFzc3Ffb3B0ID0gTGlzdC5hc3NxX29wdDtcblxudmFyIG1lbV9hc3NvYyA9IExpc3QubWVtX2Fzc29jO1xuXG52YXIgbWVtX2Fzc3EgPSBMaXN0Lm1lbV9hc3NxO1xuXG52YXIgcmVtb3ZlX2Fzc29jID0gTGlzdC5yZW1vdmVfYXNzb2M7XG5cbnZhciByZW1vdmVfYXNzcSA9IExpc3QucmVtb3ZlX2Fzc3E7XG5cbnZhciBzcGxpdCA9IExpc3Quc3BsaXQ7XG5cbnZhciBjb21iaW5lID0gTGlzdC5jb21iaW5lO1xuXG52YXIgc29ydCA9IExpc3Quc29ydDtcblxudmFyIHN0YWJsZV9zb3J0ID0gTGlzdC5zdGFibGVfc29ydDtcblxudmFyIGZhc3Rfc29ydCA9IExpc3QuZmFzdF9zb3J0O1xuXG52YXIgc29ydF91bmlxID0gTGlzdC5zb3J0X3VuaXE7XG5cbnZhciBtZXJnZSA9IExpc3QubWVyZ2U7XG5cbmV4cG9ydCB7XG4gIGxlbmd0aCAsXG4gIGhkICxcbiAgY29tcGFyZV9sZW5ndGhzICxcbiAgY29tcGFyZV9sZW5ndGhfd2l0aCAsXG4gIGNvbnMgLFxuICB0bCAsXG4gIG50aCAsXG4gIG50aF9vcHQgLFxuICByZXYgLFxuICBpbml0ICxcbiAgYXBwZW5kICxcbiAgcmV2X2FwcGVuZCAsXG4gIGNvbmNhdCAsXG4gIGZsYXR0ZW4gLFxuICBpdGVyICxcbiAgaXRlcmkgLFxuICBtYXAgLFxuICBtYXBpICxcbiAgcmV2X21hcCAsXG4gIGZvbGRfbGVmdCAsXG4gIGZvbGRfcmlnaHQgLFxuICBpdGVyMiAsXG4gIG1hcDIgLFxuICByZXZfbWFwMiAsXG4gIGZvbGRfbGVmdDIgLFxuICBmb2xkX3JpZ2h0MiAsXG4gIGZvcl9hbGwgLFxuICBleGlzdHMgLFxuICBmb3JfYWxsMiAsXG4gIGV4aXN0czIgLFxuICBtZW0gLFxuICBtZW1xICxcbiAgZmluZCAsXG4gIGZpbmRfb3B0ICxcbiAgZmlsdGVyICxcbiAgZmluZF9hbGwgLFxuICBwYXJ0aXRpb24gLFxuICBhc3NvYyAsXG4gIGFzc29jX29wdCAsXG4gIGFzc3EgLFxuICBhc3NxX29wdCAsXG4gIG1lbV9hc3NvYyAsXG4gIG1lbV9hc3NxICxcbiAgcmVtb3ZlX2Fzc29jICxcbiAgcmVtb3ZlX2Fzc3EgLFxuICBzcGxpdCAsXG4gIGNvbWJpbmUgLFxuICBzb3J0ICxcbiAgc3RhYmxlX3NvcnQgLFxuICBmYXN0X3NvcnQgLFxuICBzb3J0X3VuaXEgLFxuICBtZXJnZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgTGlzdExhYmVscyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0TGFiZWxzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCIuL1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgRGVmYXVsdCRCc0Jhc3RldCBmcm9tIFwiLi9EZWZhdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbnMkQnNCYXN0ZXQgZnJvbSBcIi4vRnVuY3Rpb25zLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG1hcChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gTGlzdExhYmVscy5tYXAoZiwgcGFyYW0pO1xuICAgIH0pO1xufVxuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbnZhciBBbHQgPSB7XG4gIG1hcDogbWFwLFxuICBhbHQ6IExpc3RMYWJlbHMuYXBwZW5kXG59O1xuXG5mdW5jdGlvbiBhcHBseShmbl9hcnJheSwgYSkge1xuICByZXR1cm4gTGlzdExhYmVscy5mb2xkX2xlZnQoKGZ1bmN0aW9uIChhY2MsIGYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGlzdExhYmVscy5hcHBlbmQoYWNjLCBMaXN0TGFiZWxzLm1hcChmLCBhKSk7XG4gICAgICAgICAgICAgIH0pLCAvKiBbXSAqLzAsIGZuX2FycmF5KTtcbn1cblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgIGEsXG4gICAgICAgICAgLyogW10gKi8wXG4gICAgICAgIF07XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxuZnVuY3Rpb24gZmxhdF9tYXAoeCwgZikge1xuICByZXR1cm4gTGlzdExhYmVscy5mb2xkX2xlZnQoKGZ1bmN0aW9uIChhY2MsIGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTGlzdExhYmVscy5hcHBlbmQoYWNjLCBDdXJyeS5fMShmLCBhKSk7XG4gICAgICAgICAgICAgIH0pLCAvKiBbXSAqLzAsIHgpO1xufVxuXG52YXIgTW9uYWQgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IHB1cmUsXG4gIGZsYXRfbWFwOiBmbGF0X21hcFxufTtcblxudmFyIFBsdXMgPSB7XG4gIG1hcDogbWFwLFxuICBhbHQ6IExpc3RMYWJlbHMuYXBwZW5kLFxuICBlbXB0eTogLyogW10gKi8wXG59O1xuXG52YXIgQWx0ZXJuYXRpdmUgPSB7XG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgbWFwOiBtYXAsXG4gIGFsdDogTGlzdExhYmVscy5hcHBlbmQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cbmZ1bmN0aW9uIGZvbGRfbGVmdChmLCBpbml0KSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gTGlzdExhYmVscy5mb2xkX2xlZnQoZiwgaW5pdCwgcGFyYW0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBmb2xkX3JpZ2h0KGYsIGluaXQpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBMaXN0TGFiZWxzLmZvbGRfcmlnaHQoZiwgcGFyYW0sIGluaXQpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcChmdW5hcmcpIHtcbiAgdmFyIHBhcnRpYWxfYXJnID0gRGVmYXVsdCRCc0Jhc3RldC5Gb2xkX01hcDtcbiAgdmFyIEQgPSBwYXJ0aWFsX2FyZyhmdW5hcmcsIHtcbiAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHRcbiAgICAgIH0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBELmZvbGRfbWFwX2RlZmF1bHRfbGVmdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkYWJsZV9Gb2xkX01hcF9BbnkoZnVuYXJnKSB7XG4gIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXBfQW55O1xuICB2YXIgRCA9IHBhcnRpYWxfYXJnKGZ1bmFyZywge1xuICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgZm9sZF9yaWdodDogZm9sZF9yaWdodFxuICAgICAgfSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IEQuZm9sZF9tYXBfZGVmYXVsdF9sZWZ0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMoZnVuYXJnKSB7XG4gIHZhciBwYXJ0aWFsX2FyZyA9IERlZmF1bHQkQnNCYXN0ZXQuRm9sZF9NYXBfUGx1cztcbiAgdmFyIEQgPSBwYXJ0aWFsX2FyZyhmdW5hcmcsIHtcbiAgICAgICAgZm9sZF9sZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHRcbiAgICAgIH0pO1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBELmZvbGRfbWFwX2RlZmF1bHRfbGVmdFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZGFibGVfRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiB1bmZvbGQoZiwgaW5pdCkge1xuICB2YXIgbWF0Y2ggPSBDdXJyeS5fMShmLCBpbml0KTtcbiAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIHVuZm9sZChmLCBtYXRjaFsxXSlcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxudmFyIFVuZm9sZGFibGUgPSB7XG4gIHVuZm9sZDogdW5mb2xkXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShBKSB7XG4gIHZhciBJID0gSW5maXgkQnNCYXN0ZXQuQXBwbHkoQSk7XG4gIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmKSB7XG4gICAgdmFyIGFyZyA9IEN1cnJ5Ll8xKEEucHVyZSwgLyogW10gKi8wKTtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICByZXR1cm4gTGlzdExhYmVscy5mb2xkX3JpZ2h0KChmdW5jdGlvbiAoYWNjLCB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEkuJGxlc3Mkc3RhciRncmVhdCwgQ3VycnkuXzIoSS4kbGVzcyRzdGFyJGdyZWF0LCBDdXJyeS5fMShBLnB1cmUsIChmdW5jdGlvbiAoeSwgeXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgQ3VycnkuXzEoZiwgYWNjKSksIHgpO1xuICAgICAgICAgICAgICAgICAgICB9KSwgcGFyYW0sIGFyZyk7XG4gICAgICB9KTtcbiAgfTtcbiAgdmFyIEQgPSBEZWZhdWx0JEJzQmFzdGV0LlNlcXVlbmNlKHtcbiAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlXG4gICAgICB9KTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBGb2xkYWJsZV9Gb2xkX01hcCxcbiAgICAgICAgICBGb2xkX01hcF9Bbnk6IEZvbGRhYmxlX0ZvbGRfTWFwX0FueSxcbiAgICAgICAgICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICAgICAgICBzZXF1ZW5jZTogRC5zZXF1ZW5jZV9kZWZhdWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEVxKEUpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHhzLCB5cykge1xuICAgIGlmIChMaXN0TGFiZWxzLmxlbmd0aCh4cykgPT09IExpc3RMYWJlbHMubGVuZ3RoKHlzKSkge1xuICAgICAgcmV0dXJuIExpc3RMYWJlbHMuZm9sZF9sZWZ0KChmdW5jdGlvbiAoYWNjLCBwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEUuZXEsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KSwgdHJ1ZSwgTGlzdExhYmVscy5jb21iaW5lKHhzLCB5cykpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTaG93KFMpIHtcbiAgdmFyIEYgPSBGdW5jdGlvbnMkQnNCYXN0ZXQuRm9sZGFibGUoRm9sZGFibGUpO1xuICB2YXIgTSA9IEN1cnJ5Ll8xKEYuTW9ub2lkLCBTdHJpbmckQnNCYXN0ZXQuTW9ub2lkKTtcbiAgdmFyIHNob3cgPSBmdW5jdGlvbiAoeHMpIHtcbiAgICByZXR1cm4gXCJbXCIgKyAoQ3VycnkuXzIoTS5pbnRlcmNhbGF0ZSwgXCIsIFwiLCBMaXN0TGFiZWxzLm1hcChTLnNob3csIHhzKSkgKyBcIl1cIik7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICB9O1xufVxuXG52YXIgaW5jbHVkZSA9IEluZml4JEJzQmFzdGV0Lk1vbmFkKE1vbmFkKTtcblxudmFyIGluY2x1ZGUkMSA9IEluZml4JEJzQmFzdGV0LkFsdGVybmF0aXZlKEFsdGVybmF0aXZlKTtcblxudmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUuJGdyZWF0JGdyZWF0JGVxO1xuXG52YXIgSW5maXhfJGVxJGxlc3MkbGVzcyA9IGluY2x1ZGUuJGVxJGxlc3MkbGVzcztcblxudmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUuJGdyZWF0JGVxJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUuJGxlc3MkZXEkbGVzcztcblxudmFyIEluZml4XyRsZXNzJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkcGlwZSRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJGhhc2gkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeCA9IHtcbiAgJGdyZWF0JGdyZWF0JGVxOiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEsXG4gICRlcSRsZXNzJGxlc3M6IEluZml4XyRlcSRsZXNzJGxlc3MsXG4gICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAkbGVzcyRlcSRsZXNzOiBJbmZpeF8kbGVzcyRlcSRsZXNzLFxuICAkbGVzcyRwaXBlJGdyZWF0OiBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0LFxuICAkbGVzcyQkZ3JlYXQ6IEluZml4XyRsZXNzJGRvbGxhciRncmVhdCxcbiAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdFxufTtcblxuZXhwb3J0IHtcbiAgRnVuY3RvciAsXG4gIEFsdCAsXG4gIEFwcGx5ICxcbiAgQXBwbGljYXRpdmUgLFxuICBNb25hZCAsXG4gIFBsdXMgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIEZvbGRhYmxlICxcbiAgVW5mb2xkYWJsZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgRXEgLFxuICBTaG93ICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBTZW1pZ3JvdXBBbnlFeHRlbnNpb25zKFMpIHtcbiAgdmFyIGNvbmNhdE5hbWVkID0gZnVuY3Rpb24gKHByZWZpeCwgc3VmZml4KSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKFMuYXBwZW5kLCBwcmVmaXgsIHN1ZmZpeCk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29uY2F0TmFtZWQ6IGNvbmNhdE5hbWVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFNlbWlncm91cEFueUluZml4KFMpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkcGlwZSRwbHVzJHBpcGU6IFMuYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIFNlbWlncm91cEFueUV4dGVuc2lvbnMgLFxuICBTZW1pZ3JvdXBBbnlJbmZpeCAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgTGlzdCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvTGlzdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9TdHJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdCBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BbHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1BsdXMgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfUGx1cy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWRBbnkgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkQW55LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19VbmZvbGRhYmxlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1VuZm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55IGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cEFueS5icy5qc1wiO1xuXG52YXIgY29uY2F0ID0gQmVsdF9MaXN0LmNvbmNhdDtcblxudmFyIFNlbWlncm91cEFueSA9IHtcbiAgYXBwZW5kOiBjb25jYXRcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55KTtcblxudmFyIE1vbm9pZEFueSA9IHtcbiAgYXBwZW5kOiBjb25jYXQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWRBbnkuTW9ub2lkQW55RXh0ZW5zaW9ucyhNb25vaWRBbnkpO1xuXG52YXIgbWFwID0gTGlzdCRCc0Jhc3RldC5GdW5jdG9yLm1hcDtcblxudmFyIEZ1bmN0b3IgPSB7XG4gIG1hcDogbWFwXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcblxudmFyIGFwcGx5ID0gTGlzdCRCc0Jhc3RldC5BcHBseS5hcHBseTtcblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlFeHRlbnNpb25zKEFwcGx5KTtcblxudmFyIHB1cmUgPSBMaXN0JEJzQmFzdGV0LkFwcGxpY2F0aXZlLnB1cmU7XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxudmFyIGluY2x1ZGUkNCA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbnZhciBiaW5kID0gTGlzdCRCc0Jhc3RldC5Nb25hZC5mbGF0X21hcDtcblxudmFyIE1vbmFkID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5LFxuICBwdXJlOiBwdXJlLFxuICBmbGF0X21hcDogYmluZFxufTtcblxudmFyIGluY2x1ZGUkNSA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkRXh0ZW5zaW9ucyhNb25hZCk7XG5cbnZhciBhbHQgPSBMaXN0JEJzQmFzdGV0LkFsdC5hbHQ7XG5cbnZhciBBbHQgPSB7XG4gIG1hcDogbWFwLFxuICBhbHQ6IGFsdFxufTtcblxudmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRFeHRlbnNpb25zKEFsdCk7XG5cbnZhciBQbHVzID0ge1xuICBtYXA6IG1hcCxcbiAgYWx0OiBhbHQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1BsdXMuUGx1c0V4dGVuc2lvbnMoUGx1cyk7XG5cbnZhciBBbHRlcm5hdGl2ZSA9IHtcbiAgYXBwbHk6IGFwcGx5LFxuICBwdXJlOiBwdXJlLFxuICBtYXA6IG1hcCxcbiAgYWx0OiBhbHQsXG4gIGVtcHR5OiAvKiBbXSAqLzBcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0FsdGVybmF0aXZlLkFsdGVybmF0aXZlRXh0ZW5zaW9ucyhBbHRlcm5hdGl2ZSk7XG5cbnZhciBmb2xkTGVmdCA9IExpc3QkQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9sZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gTGlzdCRCc0Jhc3RldC5Gb2xkYWJsZS5mb2xkX3JpZ2h0O1xuXG52YXIgRm9sZGFibGVfRm9sZF9NYXAgPSBMaXN0JEJzQmFzdGV0LkZvbGRhYmxlLkZvbGRfTWFwO1xuXG52YXIgRm9sZGFibGVfRm9sZF9NYXBfQW55ID0gTGlzdCRCc0Jhc3RldC5Gb2xkYWJsZS5Gb2xkX01hcF9Bbnk7XG5cbnZhciBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzID0gTGlzdCRCc0Jhc3RldC5Gb2xkYWJsZS5Gb2xkX01hcF9QbHVzO1xuXG52YXIgRm9sZGFibGUgPSB7XG4gIGZvbGRfbGVmdDogZm9sZExlZnQsXG4gIGZvbGRfcmlnaHQ6IGZvbGRSaWdodCxcbiAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICBGb2xkX01hcF9Bbnk6IEZvbGRhYmxlX0ZvbGRfTWFwX0FueSxcbiAgRm9sZF9NYXBfUGx1czogRm9sZGFibGVfRm9sZF9NYXBfUGx1c1xufTtcblxudmFyIGluY2x1ZGUkNyA9IFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLkZvbGRhYmxlRXh0ZW5zaW9ucyhGb2xkYWJsZSk7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IGluY2x1ZGUkNy5pbnRlcmNhbGF0ZTtcblxudmFyIHVuZm9sZCA9IExpc3QkQnNCYXN0ZXQuVW5mb2xkYWJsZS51bmZvbGQ7XG5cbnZhciBVbmZvbGRhYmxlID0ge1xuICB1bmZvbGQ6IExpc3QkQnNCYXN0ZXQuVW5mb2xkYWJsZS51bmZvbGRcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1VuZm9sZGFibGUuVW5mb2xkYWJsZUV4dGVuc2lvbnMoVW5mb2xkYWJsZSk7XG5cbmZ1bmN0aW9uIGVxQnkoaW5uZXJFcSwgX2EsIF9iKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYiA9IF9iO1xuICAgIHZhciBhID0gX2E7XG4gICAgaWYgKCFhKSB7XG4gICAgICBpZiAoYikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzIoaW5uZXJFcSwgYVswXSwgYlswXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX2IgPSBiWzFdO1xuICAgIF9hID0gYVsxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVxKGVxQSwgeHMsIHlzKSB7XG4gIHJldHVybiBlcUJ5KGVxQS5lcSwgeHMsIHlzKTtcbn1cblxuZnVuY3Rpb24gRXEoRXFBKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICByZXR1cm4gZXFCeShFcUEuZXEsIHhzLCB5cyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHNob3dCeShpbm5lclNob3csIHhzKSB7XG4gIHZhciBqb2luID0gQ3VycnkuXzEoaW50ZXJjYWxhdGUsIFN0cmluZyRCc0Jhc3RldC5Nb25vaWQpO1xuICByZXR1cm4gXCJbXCIgKyAoQ3VycnkuXzIoam9pbiwgXCIsIFwiLCBtYXAoaW5uZXJTaG93KSh4cykpICsgXCJdXCIpO1xufVxuXG5mdW5jdGlvbiBzaG93KHNob3dBLCB4cykge1xuICByZXR1cm4gc2hvd0J5KHNob3dBLnNob3csIHhzKTtcbn1cblxuZnVuY3Rpb24gU2hvdyhTaG93QSkge1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uICh4cykge1xuICAgIHJldHVybiBzaG93QnkoU2hvd0Euc2hvdywgeHMpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIHNob3c6IHNob3dcbiAgICAgICAgfTtcbn1cblxudmFyIElzb0FycmF5ID0ge1xuICBmcm9tQXJyYXk6IEJlbHRfTGlzdC5mcm9tQXJyYXksXG4gIHRvQXJyYXk6IEJlbHRfTGlzdC50b0FycmF5XG59O1xuXG52YXIgY29uY2F0TmFtZWQgPSBpbmNsdWRlLmNvbmNhdE5hbWVkO1xuXG52YXIgZW1wdHkgPSAvKiBbXSAqLzA7XG5cbnZhciBndWFyZCA9IGluY2x1ZGUkMS5ndWFyZDtcblxudmFyIHBvd2VyID0gaW5jbHVkZSQxLnBvd2VyO1xuXG52YXIgQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0Z1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgZmxpcE1hcCA9IGluY2x1ZGUkMi5mbGlwTWFwO1xuXG52YXIgJCR2b2lkID0gaW5jbHVkZSQyLiQkdm9pZDtcblxudmFyIHZvaWRSaWdodCA9IGluY2x1ZGUkMi52b2lkUmlnaHQ7XG5cbnZhciB2b2lkTGVmdCA9IGluY2x1ZGUkMi52b2lkTGVmdDtcblxudmFyIGZsYXAgPSBpbmNsdWRlJDIuZmxhcDtcblxudmFyIEJzQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQzLkJzQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgYXBwbHlGaXJzdCA9IGluY2x1ZGUkMy5hcHBseUZpcnN0O1xuXG52YXIgYXBwbHlTZWNvbmQgPSBpbmNsdWRlJDMuYXBwbHlTZWNvbmQ7XG5cbnZhciBtYXAyID0gaW5jbHVkZSQzLm1hcDI7XG5cbnZhciBtYXAzID0gaW5jbHVkZSQzLm1hcDM7XG5cbnZhciBtYXA0ID0gaW5jbHVkZSQzLm1hcDQ7XG5cbnZhciBtYXA1ID0gaW5jbHVkZSQzLm1hcDU7XG5cbnZhciB0dXBsZTIgPSBpbmNsdWRlJDMudHVwbGUyO1xuXG52YXIgdHVwbGUzID0gaW5jbHVkZSQzLnR1cGxlMztcblxudmFyIHR1cGxlNCA9IGluY2x1ZGUkMy50dXBsZTQ7XG5cbnZhciB0dXBsZTUgPSBpbmNsdWRlJDMudHVwbGU1O1xuXG52YXIgbWFwVHVwbGUyID0gaW5jbHVkZSQzLm1hcFR1cGxlMjtcblxudmFyIG1hcFR1cGxlMyA9IGluY2x1ZGUkMy5tYXBUdXBsZTM7XG5cbnZhciBtYXBUdXBsZTQgPSBpbmNsdWRlJDMubWFwVHVwbGU0O1xuXG52YXIgbWFwVHVwbGU1ID0gaW5jbHVkZSQzLm1hcFR1cGxlNTtcblxudmFyIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQ0LkJzQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgbGlmdEExID0gaW5jbHVkZSQ0LmxpZnRBMTtcblxudmFyIEJzTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgZmxhdE1hcCA9IGluY2x1ZGUkNS5mbGF0TWFwO1xuXG52YXIgZmxhdHRlbiA9IGluY2x1ZGUkNS5mbGF0dGVuO1xuXG52YXIgY29tcG9zZUtsZWlzbGkgPSBpbmNsdWRlJDUuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBmbGlwQ29tcG9zZUtsZWlzbGkgPSBpbmNsdWRlJDUuZmxpcENvbXBvc2VLbGVpc2xpO1xuXG52YXIgbGlmdE0xID0gaW5jbHVkZSQ1LmxpZnRNMTtcblxudmFyIHdoZW5fID0gaW5jbHVkZSQ1LndoZW5fO1xuXG52YXIgdW5sZXNzID0gaW5jbHVkZSQ1LnVubGVzcztcblxudmFyIG9yRWxzZSA9IGluY2x1ZGUkNi5vckVsc2U7XG5cbnZhciBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Cc0ZvbGRhYmxlRXh0ZW5zaW9ucztcblxudmFyIGFueSA9IGluY2x1ZGUkNy5hbnk7XG5cbnZhciBhbGwgPSBpbmNsdWRlJDcuYWxsO1xuXG52YXIgY29udGFpbnNCeSA9IGluY2x1ZGUkNy5jb250YWluc0J5O1xuXG52YXIgY29udGFpbnMgPSBpbmNsdWRlJDcuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBpbmNsdWRlJDcuaW5kZXhPZkJ5O1xuXG52YXIgaW5kZXhPZiA9IGluY2x1ZGUkNy5pbmRleE9mO1xuXG52YXIgbWluQnkgPSBpbmNsdWRlJDcubWluQnk7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDcubWluO1xuXG52YXIgbWF4QnkgPSBpbmNsdWRlJDcubWF4Qnk7XG5cbnZhciBtYXggPSBpbmNsdWRlJDcubWF4O1xuXG52YXIgY291bnRCeSA9IGluY2x1ZGUkNy5jb3VudEJ5O1xuXG52YXIgbGVuZ3RoID0gaW5jbHVkZSQ3Lmxlbmd0aDtcblxudmFyIHNpemUgPSBpbmNsdWRlJDcuc2l6ZTtcblxudmFyIGNvdW50ID0gaW5jbHVkZSQ3LmNvdW50O1xuXG52YXIgZm9yRWFjaCA9IGluY2x1ZGUkNy5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IGluY2x1ZGUkNy5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IGluY2x1ZGUkNy5maW5kO1xuXG52YXIgZmluZFdpdGhJbmRleCA9IGluY2x1ZGUkNy5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9MaXN0ID0gaW5jbHVkZSQ3LnRvTGlzdDtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IGluY2x1ZGUkNy5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDcuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ3LkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgVHJhdmVyc2FibGUgPSBMaXN0JEJzQmFzdGV0LlRyYXZlcnNhYmxlO1xuXG52YXIgZnJvbUFycmF5ID0gQmVsdF9MaXN0LmZyb21BcnJheTtcblxudmFyIHRvQXJyYXkgPSBCZWx0X0xpc3QudG9BcnJheTtcblxuZXhwb3J0IHtcbiAgY29uY2F0ICxcbiAgU2VtaWdyb3VwQW55ICxcbiAgY29uY2F0TmFtZWQgLFxuICBlbXB0eSAsXG4gIE1vbm9pZEFueSAsXG4gIGd1YXJkICxcbiAgcG93ZXIgLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsdCAsXG4gIEFsdCAsXG4gIG9yRWxzZSAsXG4gIFBsdXMgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIGZvbGRMZWZ0ICxcbiAgZm9sZFJpZ2h0ICxcbiAgRm9sZGFibGUgLFxuICBCc0ZvbGRhYmxlRXh0ZW5zaW9ucyAsXG4gIGFueSAsXG4gIGFsbCAsXG4gIGNvbnRhaW5zQnkgLFxuICBjb250YWlucyAsXG4gIGluZGV4T2ZCeSAsXG4gIGluZGV4T2YgLFxuICBtaW5CeSAsXG4gIG1pbiAsXG4gIG1heEJ5ICxcbiAgbWF4ICxcbiAgY291bnRCeSAsXG4gIGxlbmd0aCAsXG4gIHNpemUgLFxuICBjb3VudCAsXG4gIGZvckVhY2ggLFxuICBmb3JFYWNoV2l0aEluZGV4ICxcbiAgZmluZCAsXG4gIGZpbmRXaXRoSW5kZXggLFxuICB0b0xpc3QgLFxuICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgLFxuICBmb2xkTWFwICxcbiAgZm9sZFdpdGhNb25vaWQgLFxuICBpbnRlcmNhbGF0ZSAsXG4gIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZUVxRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyAsXG4gIHVuZm9sZCAsXG4gIFVuZm9sZGFibGUgLFxuICBUcmF2ZXJzYWJsZSAsXG4gIGVxQnkgLFxuICBlcSAsXG4gIEVxICxcbiAgc2hvd0J5ICxcbiAgc2hvdyAsXG4gIFNob3cgLFxuICBmcm9tQXJyYXkgLFxuICB0b0FycmF5ICxcbiAgSXNvQXJyYXkgLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuXG5mdW5jdGlvbiBNb25vaWRBbnlFeHRlbnNpb25zKE0pIHtcbiAgdmFyIGd1YXJkID0gZnVuY3Rpb24gKGNvbmRpdGlvbiwgbWEpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICByZXR1cm4gbWE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBNLmVtcHR5O1xuICAgIH1cbiAgfTtcbiAgdmFyIHBvd2VyID0gZnVuY3Rpb24gKG1hLCB0aW1lcykge1xuICAgIHZhciBnbyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9XG4gICAgICBpZiAoY291bnQgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG1hO1xuICAgICAgfVxuICAgICAgaWYgKGNvdW50ICUgMiA9PT0gMCkge1xuICAgICAgICB2YXIgbWEkcHJpbWUgPSBnbyhjb3VudCAvIDIgfCAwKTtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE0uYXBwZW5kLCBtYSRwcmltZSwgbWEkcHJpbWUpO1xuICAgICAgfVxuICAgICAgdmFyIG1hJHByaW1lJDEgPSBnbyhjb3VudCAvIDIgfCAwKTtcbiAgICAgIHJldHVybiBDdXJyeS5fMihNLmFwcGVuZCwgQ3VycnkuXzIoTS5hcHBlbmQsIG1hJHByaW1lJDEsIG1hJHByaW1lJDEpLCBtYSk7XG4gICAgfTtcbiAgICByZXR1cm4gZ28odGltZXMpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGd1YXJkOiBndWFyZCxcbiAgICAgICAgICBwb3dlcjogcG93ZXJcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgTW9ub2lkQW55RXh0ZW5zaW9ucyAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcmRlcmluZyBmcm9tIFwiLi4vUmVsdWRlX09yZGVyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0Jhc2UgZnJvbSBcIi4uL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0luc3RhbmNlcyBmcm9tIFwiLi9SZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuLi9vcHRpb24vUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYnMuanNcIjtcblxuZnVuY3Rpb24gY29ucyh4LCB4cykge1xuICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgeCxcbiAgICAgICAgICB4c1xuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB1bmNvbnMocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICBwYXJhbVsxXVxuICAgICAgICAgIF07XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGFwcGVuZCh4LCB4cykge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNlbWlncm91cEFueS5hcHBlbmQoeHMsIC8qIDo6ICovW1xuICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgIF0pO1xufVxuXG52YXIgcmVwZWF0ID0gQmVsdF9MaXN0Lm1ha2U7XG5cbmZ1bmN0aW9uIG1hcFdpdGhJbmRleChmLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0Lm1hcFdpdGhJbmRleCh4cywgKGZ1bmN0aW9uIChpLCB4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHgsIGkpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkocGFyYW0pIHtcbiAgaWYgKHBhcmFtKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzTm90RW1wdHkoeHMpIHtcbiAgcmV0dXJuICEoXG4gICAgICAgICAgeHMgPyBmYWxzZSA6IHRydWVcbiAgICAgICAgKTtcbn1cblxuZnVuY3Rpb24gYXQoaSwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5nZXQoeHMsIGkpO1xufVxuXG5mdW5jdGlvbiBoZWFkKHBhcmFtKSB7XG4gIGlmIChwYXJhbSkge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHBhcmFtWzBdKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gdGFpbChwYXJhbSkge1xuICBpZiAocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHRhaWxPckVtcHR5KHhzKSB7XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlKC8qIFtdICovMCwgdGFpbCh4cykpO1xufVxuXG5mdW5jdGlvbiBpbml0KHBhcmFtKSB7XG4gIGlmICghcGFyYW0pIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciB4cyA9IHBhcmFtWzFdO1xuICBpZiAoeHMpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICAgIFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2UoLyogW10gKi8wLCBpbml0KHhzKSlcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE9yRW1wdHkoeHMpIHtcbiAgdmFyIHlzID0gaW5pdCh4cyk7XG4gIGlmICh5cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHlzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGFzdChfcGFyYW0pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICBpZiAoIXBhcmFtKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgeHMgPSBwYXJhbVsxXTtcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShwYXJhbVswXSk7XG4gICAgfVxuICAgIF9wYXJhbSA9IHhzO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGFrZShpLCB4cykge1xuICB2YXIgZ28gPSBmdW5jdGlvbiAoX2FjYywgX2NvdW50LCBfcmVzdCkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciByZXN0ID0gX3Jlc3Q7XG4gICAgICB2YXIgY291bnQgPSBfY291bnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3QpIHtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cbiAgICAgIF9yZXN0ID0gcmVzdFsxXTtcbiAgICAgIF9jb3VudCA9IGNvdW50IC0gMSB8IDA7XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHJlc3RbMF0sXG4gICAgICAgIGFjY1xuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoZ28oLyogW10gKi8wLCBpLCB4cykpO1xufVxuXG5mdW5jdGlvbiB0YWtlRXhhY3RseShpLCB4cykge1xuICB2YXIgZ28gPSBmdW5jdGlvbiAoX2FjYywgX2NvdW50LCBfcmVzdCkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciByZXN0ID0gX3Jlc3Q7XG4gICAgICB2YXIgY291bnQgPSBfY291bnQ7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBpZiAoIXJlc3QpIHtcbiAgICAgICAgcmV0dXJuIDtcbiAgICAgIH1cbiAgICAgIF9yZXN0ID0gcmVzdFsxXTtcbiAgICAgIF9jb3VudCA9IGNvdW50IC0gMSB8IDA7XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHJlc3RbMF0sXG4gICAgICAgIGFjY1xuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICBpZiAoaSA+PSAwKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcChCZWx0X0xpc3QucmV2ZXJzZSwgZ28oLyogW10gKi8wLCBpLCB4cykpO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiB0YWtlV2hpbGUoZiwgeHMpIHtcbiAgdmFyIGdvID0gZnVuY3Rpb24gKF9hY2MsIF9yZXN0KSB7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIHJlc3QgPSBfcmVzdDtcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKCFyZXN0KSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICB2YXIgeSA9IHJlc3RbMF07XG4gICAgICBpZiAoIUN1cnJ5Ll8xKGYsIHkpKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBfcmVzdCA9IHJlc3RbMV07XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHksXG4gICAgICAgIGFjY1xuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoZ28oLyogW10gKi8wLCB4cykpO1xufVxuXG5mdW5jdGlvbiBkcm9wKF9pLCBfeHMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB4cyA9IF94cztcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmICgheHMpIHtcbiAgICAgIHJldHVybiAvKiBbXSAqLzA7XG4gICAgfVxuICAgIGlmIChpIDw9IDApIHtcbiAgICAgIHJldHVybiB4cztcbiAgICB9XG4gICAgX3hzID0geHNbMV07XG4gICAgX2kgPSBpIC0gMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkcm9wRXhhY3RseShpLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LmRyb3AoeHMsIGkpO1xufVxuXG5mdW5jdGlvbiBkcm9wV2hpbGUoZiwgX3hzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIHhzO1xuICAgIH1cbiAgICBpZiAoIUN1cnJ5Ll8xKGYsIHhzWzBdKSkge1xuICAgICAgcmV0dXJuIHhzO1xuICAgIH1cbiAgICBfeHMgPSB4c1sxXTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihmLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LmtlZXAoeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJXaXRoSW5kZXgoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5rZWVwV2l0aEluZGV4KHhzLCBmKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyTm90KGYpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X0xpc3Qua2VlcChwYXJhbSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck5vdFdpdGhJbmRleChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gQmVsdF9MaXN0LmtlZXBXaXRoSW5kZXgocGFyYW0sIChmdW5jdGlvbiAoYSwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIUN1cnJ5Ll8yKGYsIGEsIGkpO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBtYXBPcHRpb24oZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5yZXZlcnNlKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkTGVmdCgoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZm9sZChhY2MsIChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKGYsIGN1cnIpKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIC8qIFtdICovMCkoeHMpKTtcbn1cblxuZnVuY3Rpb24gY2F0T3B0aW9ucyh4cykge1xuICByZXR1cm4gbWFwT3B0aW9uKChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICB9KSwgeHMpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb24oZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5wYXJ0aXRpb24oeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBzcGxpdEF0KGksIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3Quc3BsaXRBdCh4cywgaSk7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRUb0FsbChkZWxpbSwgeHMpIHtcbiAgdmFyIGdvID0gZnVuY3Rpb24gKF9hY2MsIF9wYXJhbSkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBwYXJhbSA9IF9wYXJhbTtcbiAgICAgIHZhciBhY2MgPSBfYWNjO1xuICAgICAgaWYgKCFwYXJhbSkge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuICAgICAgX3BhcmFtID0gcGFyYW1bMV07XG4gICAgICBfYWNjID0gLyogOjogKi9bXG4gICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBkZWxpbSxcbiAgICAgICAgICBhY2NcbiAgICAgICAgXVxuICAgICAgXTtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoZ28oLyogW10gKi8wLCB4cykpO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNwZXJzZShkZWxpbSwgeHMpIHtcbiAgaWYgKHhzKSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgeHNbMF0sXG4gICAgICAgICAgICBwcmVwZW5kVG9BbGwoZGVsaW0sIHhzWzFdKVxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsaWNhdGUoaSwgeHMpIHtcbiAgaWYgKGkgPD0gMCkge1xuICAgIHJldHVybiAvKiBbXSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9jb3VudCA9IGk7XG4gICAgdmFyIF9hY2MgPSB4cztcbiAgICB3aGlsZSh0cnVlKSB7XG4gICAgICB2YXIgYWNjID0gX2FjYztcbiAgICAgIHZhciBjb3VudCA9IF9jb3VudDtcbiAgICAgIGlmIChjb3VudCA8PSAxKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG4gICAgICBfYWNjID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbmNhdCh4cywgYWNjKTtcbiAgICAgIF9jb3VudCA9IGNvdW50IC0gMSB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiB6aXBXaXRoKGYsIHhzLCB5cykge1xuICByZXR1cm4gQmVsdF9MaXN0LnppcEJ5KHhzLCB5cywgZik7XG59XG5cbmZ1bmN0aW9uIHppcFdpdGhJbmRleCh4cykge1xuICByZXR1cm4gbWFwV2l0aEluZGV4KChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHYsXG4gICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gc29ydFdpdGhJbnQoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfTGlzdC5zb3J0KHhzLCBmKTtcbn1cblxuZnVuY3Rpb24gc29ydEJ5KGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3Quc29ydCh4cywgKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihmLCBhLCBiKSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gc29ydChvcmRBLCB4cykge1xuICByZXR1cm4gc29ydEJ5KG9yZEEuY29tcGFyZSwgeHMpO1xufVxuXG5mdW5jdGlvbiBkaXN0aW5jdEJ5KGVxLCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KChmdW5jdGlvbiAoeXMsIHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzMoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbnRhaW5zQnksIGVxLCB4LCB5cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5cztcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pLCAvKiBbXSAqLzApKHhzKSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0QnkoaW5uZXJFcSwgdiwgeHMpIHtcbiAgdmFyIGdvID0gZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgdmFyIHlzID0gcGFyYW1bMV07XG4gICAgaWYgKHBhcmFtWzBdKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeXNcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXTtcbiAgICB9IGVsc2UgaWYgKEN1cnJ5Ll8yKGlubmVyRXEsIHYsIHgpKSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF07XG4gICAgfVxuICB9O1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KGdvLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgXSkoeHMpWzFdKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaEJ5KGlubmVyRXEsIHgsIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3QucmV2ZXJzZShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uICh5cywgeSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChDdXJyeS5fMihpbm5lckVxLCB4LCB5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlzO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSksIC8qIFtdICovMCkoeHMpKTtcbn1cblxuZnVuY3Rpb24gZGlzdGluY3QoZXFBLCB4cykge1xuICByZXR1cm4gZGlzdGluY3RCeShlcUEuZXEsIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3QoZXFBLCB4LCB4cykge1xuICByZXR1cm4gcmVtb3ZlRmlyc3RCeShlcUEuZXEsIHgsIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaChlcUEsIHgsIHhzKSB7XG4gIHJldHVybiByZW1vdmVFYWNoQnkoZXFBLmVxLCB4LCB4cyk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VBdCh0YXJnZXRJbmRleCwgbmV3WCwgeHMpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleCgoZnVuY3Rpb24gKHgsIGN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IHRhcmdldEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3WDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgeHMpO1xufVxuXG5mdW5jdGlvbiBzY2FuTGVmdChmLCBpbml0LCB4cykge1xuICByZXR1cm4gQmVsdF9MaXN0LnJldmVyc2UoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KChmdW5jdGlvbiAocGFyYW0sIGN1cnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0QWNjID0gQ3VycnkuXzIoZiwgcGFyYW1bMF0sIGN1cnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0QWNjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgfSksIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgIF0pKHhzKVsxXSk7XG59XG5cbmZ1bmN0aW9uIHNjYW5SaWdodChmLCBpbml0LCB4cykge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRSaWdodCgoZnVuY3Rpb24gKGN1cnIsIHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0QWNjID0gQ3VycnkuXzIoZiwgY3VyciwgcGFyYW1bMF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRBY2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVsxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH0pLCAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdKSh4cylbMV07XG59XG5cbmZ1bmN0aW9uIGluc2VydEF0KHRhcmdldEluZGV4LCBuZXdYLCB4cykge1xuICB2YXIgbWF0Y2ggPSBCZWx0X0xpc3Quc3BsaXRBdCh4cywgdGFyZ2V0SW5kZXgpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29uY2F0KG1hdGNoWzBdLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBuZXdYLFxuICAgICAgICAgICAgICAgIG1hdGNoWzFdXG4gICAgICAgICAgICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4cztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVBdCh0YXJnZXRJbmRleCwgZiwgeHMpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleCgoZnVuY3Rpb24gKHgsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0YXJnZXRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHN3YXBBdChpLCBqLCB4cykge1xuICB2YXIgbWF0Y2ggPSBCZWx0X0xpc3QuZ2V0KHhzLCBpKTtcbiAgdmFyIG1hdGNoJDEgPSBCZWx0X0xpc3QuZ2V0KHhzLCBqKTtcbiAgaWYgKG1hdGNoID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbiAgaWYgKG1hdGNoJDEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB4cztcbiAgfVxuICB2YXIgYiA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obWF0Y2gkMSk7XG4gIHZhciBhID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtYXRjaCk7XG4gIHJldHVybiBtYXBXaXRoSW5kZXgoKGZ1bmN0aW9uICh4LCBrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGspIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaiA9PT0gaykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQXQodGFyZ2V0SW5kZXgsIHhzKSB7XG4gIHJldHVybiBCZWx0X0xpc3Qua2VlcFdpdGhJbmRleCh4cywgKGZ1bmN0aW9uIChwYXJhbSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9PSB0YXJnZXRJbmRleDtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBjaHVuayhzaXplLCB4cykge1xuICBpZiAoQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmxlbmd0aCwgeHMpIDw9IHNpemUpIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICB4cyxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgdGFrZShzaXplLCB4cyksXG4gICAgICAgICAgICBjaHVuayhzaXplLCBkcm9wKHNpemUsIHhzKSlcbiAgICAgICAgICBdO1xuICB9XG59XG5cbnZhciBwcmVwZW5kID0gY29ucztcblxudmFyIG1ha2VXaXRoSW5kZXggPSBCZWx0X0xpc3QubWFrZUJ5O1xuXG52YXIgcmV2ZXJzZSA9IEJlbHRfTGlzdC5yZXZlcnNlO1xuXG52YXIgc2h1ZmZsZSA9IEJlbHRfTGlzdC5zaHVmZmxlO1xuXG52YXIga2VlcCA9IGZpbHRlcjtcblxudmFyIGtlZXBXaXRoSW5kZXggPSBmaWx0ZXJXaXRoSW5kZXg7XG5cbnZhciByZWplY3QgPSBmaWx0ZXJOb3Q7XG5cbnZhciByZWplY3RXaXRoSW5kZXggPSBmaWx0ZXJOb3RXaXRoSW5kZXg7XG5cbnZhciB6aXAgPSBCZWx0X0xpc3QuemlwO1xuXG52YXIgdW56aXAgPSBCZWx0X0xpc3QudW56aXA7XG5cbmV4cG9ydCB7XG4gIGNvbnMgLFxuICBwcmVwZW5kICxcbiAgdW5jb25zICxcbiAgYXBwZW5kICxcbiAgcmVwZWF0ICxcbiAgbWFrZVdpdGhJbmRleCAsXG4gIG1hcFdpdGhJbmRleCAsXG4gIHJldmVyc2UgLFxuICBzaHVmZmxlICxcbiAgaXNFbXB0eSAsXG4gIGlzTm90RW1wdHkgLFxuICBhdCAsXG4gIGhlYWQgLFxuICB0YWlsICxcbiAgdGFpbE9yRW1wdHkgLFxuICBpbml0ICxcbiAgaW5pdE9yRW1wdHkgLFxuICBsYXN0ICxcbiAgdGFrZSAsXG4gIHRha2VFeGFjdGx5ICxcbiAgdGFrZVdoaWxlICxcbiAgZHJvcCAsXG4gIGRyb3BFeGFjdGx5ICxcbiAgZHJvcFdoaWxlICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBmaWx0ZXJOb3QgLFxuICByZWplY3QgLFxuICBmaWx0ZXJOb3RXaXRoSW5kZXggLFxuICByZWplY3RXaXRoSW5kZXggLFxuICBtYXBPcHRpb24gLFxuICBjYXRPcHRpb25zICxcbiAgcGFydGl0aW9uICxcbiAgc3BsaXRBdCAsXG4gIHByZXBlbmRUb0FsbCAsXG4gIGludGVyc3BlcnNlICxcbiAgcmVwbGljYXRlICxcbiAgemlwICxcbiAgemlwV2l0aCAsXG4gIHppcFdpdGhJbmRleCAsXG4gIHVuemlwICxcbiAgc29ydFdpdGhJbnQgLFxuICBzb3J0QnkgLFxuICBzb3J0ICxcbiAgZGlzdGluY3RCeSAsXG4gIHJlbW92ZUZpcnN0QnkgLFxuICByZW1vdmVFYWNoQnkgLFxuICBkaXN0aW5jdCAsXG4gIHJlbW92ZUZpcnN0ICxcbiAgcmVtb3ZlRWFjaCAsXG4gIHJlcGxhY2VBdCAsXG4gIHNjYW5MZWZ0ICxcbiAgc2NhblJpZ2h0ICxcbiAgaW5zZXJ0QXQgLFxuICB1cGRhdGVBdCAsXG4gIHN3YXBBdCAsXG4gIHJlbW92ZUF0ICxcbiAgY2h1bmsgLFxuICBcbn1cbi8qIFJlbHVkZV9PcmRlcmluZyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5cbmZ1bmN0aW9uIE1ha2VDb21wYXJhYmxlVShNKSB7XG4gIHJldHVybiBNO1xufVxuXG5mdW5jdGlvbiBNYWtlQ29tcGFyYWJsZShNKSB7XG4gIHZhciBjbXAgPSBNLmNtcDtcbiAgdmFyIGNtcCQxID0gQ3VycnkuX18yKGNtcCk7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAkMVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21wYXJhYmxlVShjbXApIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBjb21wYXJhYmxlKGNtcCkge1xuICB2YXIgY21wJDEgPSBDdXJyeS5fXzIoY21wKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCQxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1ha2VIYXNoYWJsZVUoTSkge1xuICByZXR1cm4gTTtcbn1cblxuZnVuY3Rpb24gTWFrZUhhc2hhYmxlKE0pIHtcbiAgdmFyIGhhc2ggPSBNLmhhc2g7XG4gIHZhciBoYXNoJDEgPSBDdXJyeS5fXzEoaGFzaCk7XG4gIHZhciBlcSA9IE0uZXE7XG4gIHZhciBlcSQxID0gQ3VycnkuX18yKGVxKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBoYXNoOiBoYXNoJDEsXG4gICAgICAgICAgZXE6IGVxJDFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaGFzaGFibGVVKGhhc2gsIGVxKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgaGFzaDogaGFzaCxcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaGFzaGFibGUoaGFzaCwgZXEpIHtcbiAgdmFyIGhhc2gkMSA9IEN1cnJ5Ll9fMShoYXNoKTtcbiAgdmFyIGVxJDEgPSBDdXJyeS5fXzIoZXEpO1xuICByZXR1cm4ge1xuICAgICAgICAgIGhhc2g6IGhhc2gkMSxcbiAgICAgICAgICBlcTogZXEkMVxuICAgICAgICB9O1xufVxuXG5leHBvcnQge1xuICBNYWtlQ29tcGFyYWJsZVUgLFxuICBNYWtlQ29tcGFyYWJsZSAsXG4gIGNvbXBhcmFibGVVICxcbiAgY29tcGFyYWJsZSAsXG4gIE1ha2VIYXNoYWJsZVUgLFxuICBNYWtlSGFzaGFibGUgLFxuICBoYXNoYWJsZVUgLFxuICBoYXNoYWJsZSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfaW50ZXJuYWxBVkx0cmVlIGZyb20gXCIuL2JlbHRfaW50ZXJuYWxBVkx0cmVlLmpzXCI7XG5cbmZ1bmN0aW9uIHNldCh0LCBuZXdLLCBuZXdELCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5zaW5nbGV0b24obmV3SywgbmV3RCk7XG4gIH1cbiAgdmFyIGsgPSB0LmtleTtcbiAgdmFyIGMgPSBjbXAobmV3Sywgayk7XG4gIGlmIChjID09PSAwKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLnVwZGF0ZVZhbHVlKHQsIG5ld0QpO1xuICB9XG4gIHZhciBsID0gdC5sZWZ0O1xuICB2YXIgciA9IHQucmlnaHQ7XG4gIHZhciB2ID0gdC52YWx1ZTtcbiAgaWYgKGMgPCAwKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmJhbChzZXQobCwgbmV3SywgbmV3RCwgY21wKSwgaywgdiwgcik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmJhbChsLCBrLCB2LCBzZXQociwgbmV3SywgbmV3RCwgY21wKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlVSh0LCBuZXdLLCBmLCBjbXApIHtcbiAgaWYgKHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBrID0gdC5rZXk7XG4gICAgdmFyIGMgPSBjbXAobmV3Sywgayk7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHZhciBuZXdEID0gZihDYW1sX29wdGlvbi5zb21lKHQudmFsdWUpKTtcbiAgICAgIGlmIChuZXdEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLnVwZGF0ZVZhbHVlKHQsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obmV3RCkpO1xuICAgICAgfVxuICAgICAgdmFyIGwgPSB0LmxlZnQ7XG4gICAgICB2YXIgciA9IHQucmlnaHQ7XG4gICAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByO1xuICAgICAgfVxuICAgICAgaWYgKHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbDtcbiAgICAgIH1cbiAgICAgIHZhciBrciA9IHtcbiAgICAgICAgY29udGVudHM6IHIua2V5XG4gICAgICB9O1xuICAgICAgdmFyIHZyID0ge1xuICAgICAgICBjb250ZW50czogci52YWx1ZVxuICAgICAgfTtcbiAgICAgIHZhciByJDEgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5yZW1vdmVNaW5BdXhXaXRoUmVmKHIsIGtyLCB2cik7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgICB9XG4gICAgdmFyIGwkMSA9IHQubGVmdDtcbiAgICB2YXIgciQyID0gdC5yaWdodDtcbiAgICB2YXIgdiA9IHQudmFsdWU7XG4gICAgaWYgKGMgPCAwKSB7XG4gICAgICB2YXIgbGwgPSB1cGRhdGVVKGwkMSwgbmV3SywgZiwgY21wKTtcbiAgICAgIGlmIChsJDEgPT09IGxsKSB7XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmJhbChsbCwgaywgdiwgciQyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJyID0gdXBkYXRlVShyJDIsIG5ld0ssIGYsIGNtcCk7XG4gICAgaWYgKHIkMiA9PT0gcnIpIHtcbiAgICAgIHJldHVybiB0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwkMSwgaywgdiwgcnIpO1xuICAgIH1cbiAgfVxuICB2YXIgbmV3RCQxID0gZih1bmRlZmluZWQpO1xuICBpZiAobmV3RCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuc2luZ2xldG9uKG5ld0ssIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obmV3RCQxKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlKHQsIG5ld0ssIGYsIGNtcCkge1xuICByZXR1cm4gdXBkYXRlVSh0LCBuZXdLLCBDdXJyeS5fXzEoZiksIGNtcCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUF1eDAobiwgeCwgY21wKSB7XG4gIHZhciB2ID0gbi5rZXk7XG4gIHZhciBsID0gbi5sZWZ0O1xuICB2YXIgciA9IG4ucmlnaHQ7XG4gIHZhciBjID0gY21wKHgsIHYpO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG4gICAgdmFyIGtyID0ge1xuICAgICAgY29udGVudHM6IHIua2V5XG4gICAgfTtcbiAgICB2YXIgdnIgPSB7XG4gICAgICBjb250ZW50czogci52YWx1ZVxuICAgIH07XG4gICAgdmFyIHIkMSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlbW92ZU1pbkF1eFdpdGhSZWYociwga3IsIHZyKTtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIGtyLmNvbnRlbnRzLCB2ci5jb250ZW50cywgciQxKTtcbiAgfVxuICBpZiAoYyA8IDApIHtcbiAgICBpZiAobCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgdmFyIGxsID0gcmVtb3ZlQXV4MChsLCB4LCBjbXApO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIG47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5iYWwobGwsIHYsIG4udmFsdWUsIHIpO1xuICAgIH1cbiAgfVxuICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgdmFyIHJyID0gcmVtb3ZlQXV4MChyLCB4LCBjbXApO1xuICBpZiAocnIgPT09IHIpIHtcbiAgICByZXR1cm4gbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUuYmFsKGwsIHYsIG4udmFsdWUsIHJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmUobiwgeCwgY21wKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVtb3ZlQXV4MChuLCB4LCBjbXApO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBtZXJnZU1hbnkoaCwgYXJyLCBjbXApIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciB2ID0gaDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2YXIgbWF0Y2ggPSBhcnJbaV07XG4gICAgdiA9IHNldCh2LCBtYXRjaFswXSwgbWF0Y2hbMV0sIGNtcCk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHNwbGl0QXV4UGl2b3QobiwgeCwgcHJlcywgY21wKSB7XG4gIHZhciB2ID0gbi5rZXk7XG4gIHZhciBkID0gbi52YWx1ZTtcbiAgdmFyIGwgPSBuLmxlZnQ7XG4gIHZhciByID0gbi5yaWdodDtcbiAgdmFyIGMgPSBjbXAoeCwgdik7XG4gIGlmIChjID09PSAwKSB7XG4gICAgcHJlcy5jb250ZW50cyA9IENhbWxfb3B0aW9uLnNvbWUoZCk7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHJcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChjIDwgMCkge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBuXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBzcGxpdEF1eFBpdm90KGwsIHgsIHByZXMsIGNtcCk7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbWF0Y2hbMF0sXG4gICAgICAgICAgICBCZWx0X2ludGVybmFsQVZMdHJlZS5qb2luKG1hdGNoWzFdLCB2LCBkLCByKVxuICAgICAgICAgIF07XG4gIH1cbiAgaWYgKHIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIG4sXG4gICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICBdO1xuICB9XG4gIHZhciBtYXRjaCQxID0gc3BsaXRBdXhQaXZvdChyLCB4LCBwcmVzLCBjbXApO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgQmVsdF9pbnRlcm5hbEFWTHRyZWUuam9pbihsLCB2LCBkLCBtYXRjaCQxWzBdKSxcbiAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0KG4sIHgsIGNtcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgcHJlcyA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciB2ID0gc3BsaXRBdXhQaXZvdChuLCB4LCBwcmVzLCBjbXApO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgdixcbiAgICAgICAgICBwcmVzLmNvbnRlbnRzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG1lcmdlVShzMSwgczIsIGYsIGNtcCkge1xuICBpZiAoczEgPT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChzMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2VlcE1hcFUoczIsIChmdW5jdGlvbiAoaywgdikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZihrLCB1bmRlZmluZWQsIENhbWxfb3B0aW9uLnNvbWUodikpO1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgfVxuICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5rZWVwTWFwVShzMSwgKGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZihrLCBDYW1sX29wdGlvbi5zb21lKHYpLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgfVxuICBpZiAoczEuaGVpZ2h0ID49IHMyLmhlaWdodCkge1xuICAgIHZhciB2MSA9IHMxLmtleTtcbiAgICB2YXIgZDEgPSBzMS52YWx1ZTtcbiAgICB2YXIgbDEgPSBzMS5sZWZ0O1xuICAgIHZhciByMSA9IHMxLnJpZ2h0O1xuICAgIHZhciBkMiA9IHtcbiAgICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHZhciBtYXRjaCA9IHNwbGl0QXV4UGl2b3QoczIsIHYxLCBkMiwgY21wKTtcbiAgICB2YXIgZDIkMSA9IGQyLmNvbnRlbnRzO1xuICAgIHZhciBuZXdMZWZ0ID0gbWVyZ2VVKGwxLCBtYXRjaFswXSwgZiwgY21wKTtcbiAgICB2YXIgbmV3RCA9IGYodjEsIENhbWxfb3B0aW9uLnNvbWUoZDEpLCBkMiQxKTtcbiAgICB2YXIgbmV3UmlnaHQgPSBtZXJnZVUocjEsIG1hdGNoWzFdLCBmLCBjbXApO1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMdHJlZS5jb25jYXRPckpvaW4obmV3TGVmdCwgdjEsIG5ld0QsIG5ld1JpZ2h0KTtcbiAgfVxuICB2YXIgdjIgPSBzMi5rZXk7XG4gIHZhciBkMiQyID0gczIudmFsdWU7XG4gIHZhciBsMiA9IHMyLmxlZnQ7XG4gIHZhciByMiA9IHMyLnJpZ2h0O1xuICB2YXIgZDEkMSA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciBtYXRjaCQxID0gc3BsaXRBdXhQaXZvdChzMSwgdjIsIGQxJDEsIGNtcCk7XG4gIHZhciBkMSQyID0gZDEkMS5jb250ZW50cztcbiAgdmFyIG5ld0xlZnQkMSA9IG1lcmdlVShtYXRjaCQxWzBdLCBsMiwgZiwgY21wKTtcbiAgdmFyIG5ld0QkMSA9IGYodjIsIGQxJDIsIENhbWxfb3B0aW9uLnNvbWUoZDIkMikpO1xuICB2YXIgbmV3UmlnaHQkMSA9IG1lcmdlVShtYXRjaCQxWzFdLCByMiwgZiwgY21wKTtcbiAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNvbmNhdE9ySm9pbihuZXdMZWZ0JDEsIHYyLCBuZXdEJDEsIG5ld1JpZ2h0JDEpO1xufVxuXG5mdW5jdGlvbiBtZXJnZShzMSwgczIsIGYsIGNtcCkge1xuICByZXR1cm4gbWVyZ2VVKHMxLCBzMiwgQ3VycnkuX18zKGYpLCBjbXApO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNYW55KHQsIGtleXMsIGNtcCkge1xuICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gIGlmICh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgX3QgPSB0O1xuICAgIHZhciBfaSA9IDA7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGkgPSBfaTtcbiAgICAgIHZhciB0JDEgPSBfdDtcbiAgICAgIGlmIChpID49IGxlbikge1xuICAgICAgICByZXR1cm4gdCQxO1xuICAgICAgfVxuICAgICAgdmFyIGVsZSA9IGtleXNbaV07XG4gICAgICB2YXIgdSA9IHJlbW92ZUF1eDAodCQxLCBlbGUsIGNtcCk7XG4gICAgICBpZiAodSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1O1xuICAgICAgfVxuICAgICAgX2kgPSBpICsgMSB8IDA7XG4gICAgICBfdCA9IHU7XG4gICAgICBjb250aW51ZSA7XG4gICAgfTtcbiAgfVxuICBcbn1cblxudmFyIGVtcHR5O1xuXG52YXIgaXNFbXB0eSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmlzRW1wdHk7XG5cbnZhciBoYXMgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5oYXM7XG5cbnZhciBjbXBVID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuY21wVTtcblxudmFyIGNtcCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNtcDtcblxudmFyIGVxVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmVxVTtcblxudmFyIGVxID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZXE7XG5cbnZhciBmaW5kRmlyc3RCeVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5maW5kRmlyc3RCeVU7XG5cbnZhciBmaW5kRmlyc3RCeSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZpbmRGaXJzdEJ5O1xuXG52YXIgZm9yRWFjaFUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5mb3JFYWNoVTtcblxudmFyIGZvckVhY2ggPSBCZWx0X2ludGVybmFsQVZMdHJlZS5mb3JFYWNoO1xuXG52YXIgcmVkdWNlVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnJlZHVjZVU7XG5cbnZhciByZWR1Y2UgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5yZWR1Y2U7XG5cbnZhciBldmVyeVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5ldmVyeVU7XG5cbnZhciBldmVyeSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmV2ZXJ5O1xuXG52YXIgc29tZVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5zb21lVTtcblxudmFyIHNvbWUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5zb21lO1xuXG52YXIgc2l6ZSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnNpemU7XG5cbnZhciB0b0xpc3QgPSBCZWx0X2ludGVybmFsQVZMdHJlZS50b0xpc3Q7XG5cbnZhciB0b0FycmF5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUudG9BcnJheTtcblxudmFyIGZyb21BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmZyb21BcnJheTtcblxudmFyIGtleXNUb0FycmF5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUua2V5c1RvQXJyYXk7XG5cbnZhciB2YWx1ZXNUb0FycmF5ID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUudmFsdWVzVG9BcnJheTtcblxudmFyIG1pbktleSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1pbktleTtcblxudmFyIG1pbktleVVuZGVmaW5lZCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1pbktleVVuZGVmaW5lZDtcblxudmFyIG1heEtleSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1heEtleTtcblxudmFyIG1heEtleVVuZGVmaW5lZCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1heEtleVVuZGVmaW5lZDtcblxudmFyIG1pbmltdW0gPSBCZWx0X2ludGVybmFsQVZMdHJlZS5taW5pbXVtO1xuXG52YXIgbWluVW5kZWZpbmVkID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWluVW5kZWZpbmVkO1xuXG52YXIgbWF4aW11bSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLm1heGltdW07XG5cbnZhciBtYXhVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXhVbmRlZmluZWQ7XG5cbnZhciBnZXQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5nZXQ7XG5cbnZhciBnZXRVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5nZXRVbmRlZmluZWQ7XG5cbnZhciBnZXRXaXRoRGVmYXVsdCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmdldFdpdGhEZWZhdWx0O1xuXG52YXIgZ2V0RXhuID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUuZ2V0RXhuO1xuXG52YXIgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmNoZWNrSW52YXJpYW50SW50ZXJuYWw7XG5cbnZhciBrZWVwVSA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmtlZXBTaGFyZWRVO1xuXG52YXIga2VlcCA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLmtlZXBTaGFyZWQ7XG5cbnZhciBwYXJ0aXRpb25VID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUucGFydGl0aW9uU2hhcmVkVTtcblxudmFyIHBhcnRpdGlvbiA9IEJlbHRfaW50ZXJuYWxBVkx0cmVlLnBhcnRpdGlvblNoYXJlZDtcblxudmFyIG1hcFUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXBVO1xuXG52YXIgbWFwID0gQmVsdF9pbnRlcm5hbEFWTHRyZWUubWFwO1xuXG52YXIgbWFwV2l0aEtleVUgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXBXaXRoS2V5VTtcblxudmFyIG1hcFdpdGhLZXkgPSBCZWx0X2ludGVybmFsQVZMdHJlZS5tYXBXaXRoS2V5O1xuXG5leHBvcnQge1xuICBlbXB0eSAsXG4gIGlzRW1wdHkgLFxuICBoYXMgLFxuICBjbXBVICxcbiAgY21wICxcbiAgZXFVICxcbiAgZXEgLFxuICBmaW5kRmlyc3RCeVUgLFxuICBmaW5kRmlyc3RCeSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIHNvbWVVICxcbiAgc29tZSAsXG4gIHNpemUgLFxuICB0b0xpc3QgLFxuICB0b0FycmF5ICxcbiAgZnJvbUFycmF5ICxcbiAga2V5c1RvQXJyYXkgLFxuICB2YWx1ZXNUb0FycmF5ICxcbiAgbWluS2V5ICxcbiAgbWluS2V5VW5kZWZpbmVkICxcbiAgbWF4S2V5ICxcbiAgbWF4S2V5VW5kZWZpbmVkICxcbiAgbWluaW11bSAsXG4gIG1pblVuZGVmaW5lZCAsXG4gIG1heGltdW0gLFxuICBtYXhVbmRlZmluZWQgLFxuICBnZXQgLFxuICBnZXRVbmRlZmluZWQgLFxuICBnZXRXaXRoRGVmYXVsdCAsXG4gIGdldEV4biAsXG4gIGNoZWNrSW52YXJpYW50SW50ZXJuYWwgLFxuICByZW1vdmUgLFxuICByZW1vdmVNYW55ICxcbiAgc2V0ICxcbiAgdXBkYXRlVSAsXG4gIHVwZGF0ZSAsXG4gIG1lcmdlVSAsXG4gIG1lcmdlICxcbiAgbWVyZ2VNYW55ICxcbiAga2VlcFUgLFxuICBrZWVwICxcbiAgcGFydGl0aW9uVSAsXG4gIHBhcnRpdGlvbiAsXG4gIHNwbGl0ICxcbiAgbWFwVSAsXG4gIG1hcCAsXG4gIG1hcFdpdGhLZXlVICxcbiAgbWFwV2l0aEtleSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9NYXBEaWN0IGZyb20gXCIuL2JlbHRfTWFwRGljdC5qc1wiO1xuXG5mdW5jdGlvbiBmcm9tQXJyYXkoZGF0YSwgaWQpIHtcbiAgdmFyIGNtcCA9IGlkLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3QuZnJvbUFycmF5KGRhdGEsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG0sIHgpIHtcbiAgdmFyIG9kYXRhID0gbS5kYXRhO1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHZhciBuZXdEYXRhID0gQmVsdF9NYXBEaWN0LnJlbW92ZShvZGF0YSwgeCwgY21wKTtcbiAgaWYgKG5ld0RhdGEgPT09IG9kYXRhKSB7XG4gICAgcmV0dXJuIG07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgZGF0YTogbmV3RGF0YVxuICAgICAgICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWFueShtLCB4KSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgdmFyIG5ld0RhdGEgPSBCZWx0X01hcERpY3QucmVtb3ZlTWFueShtLmRhdGEsIHgsIGNtcCk7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogbmV3RGF0YVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBzZXQobSwga2V5LCBkKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3Quc2V0KG0uZGF0YSwga2V5LCBkLCBjbXApXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueShtLCBlKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3QubWVyZ2VNYW55KG0uZGF0YSwgZSwgY21wKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVVKG0sIGtleSwgZikge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9NYXBEaWN0LnVwZGF0ZVUobS5kYXRhLCBrZXksIGYsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKG0sIGtleSwgZikge1xuICByZXR1cm4gdXBkYXRlVShtLCBrZXksIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0KG0sIHgpIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbWF0Y2ggPSBCZWx0X01hcERpY3Quc3BsaXQobS5kYXRhLCB4LCBjbXApO1xuICB2YXIgbWF0Y2gkMSA9IG1hdGNoWzBdO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgICBkYXRhOiBtYXRjaCQxWzBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICAgICAgZGF0YTogbWF0Y2gkMVsxXVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF0sXG4gICAgICAgICAgbWF0Y2hbMV1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VVKHMxLCBzMiwgZikge1xuICB2YXIgY21wID0gczEuY21wO1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfTWFwRGljdC5tZXJnZVUoczEuZGF0YSwgczIuZGF0YSwgZiwgY21wKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZShzMSwgczIsIGYpIHtcbiAgcmV0dXJuIG1lcmdlVShzMSwgczIsIEN1cnJ5Ll9fMyhmKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2UoaWQpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGlkLmNtcCxcbiAgICAgICAgICBkYXRhOiB1bmRlZmluZWRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShtYXApIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5pc0VtcHR5KG1hcC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnlVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5maW5kRmlyc3RCeVUobS5kYXRhLCBmKTtcbn1cblxuZnVuY3Rpb24gZmluZEZpcnN0QnkobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmZpbmRGaXJzdEJ5VShtLmRhdGEsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5mb3JFYWNoVShtLmRhdGEsIGYpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5mb3JFYWNoVShtLmRhdGEsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVUobSwgYWNjLCBmKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QucmVkdWNlVShtLmRhdGEsIGFjYywgZik7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShtLCBhY2MsIGYpIHtcbiAgcmV0dXJuIHJlZHVjZVUobSwgYWNjLCBDdXJyeS5fXzMoZikpO1xufVxuXG5mdW5jdGlvbiBldmVyeVUobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmV2ZXJ5VShtLmRhdGEsIGYpO1xufVxuXG5mdW5jdGlvbiBldmVyeShtLCBmKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QuZXZlcnlVKG0uZGF0YSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gc29tZVUobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnNvbWVVKG0uZGF0YSwgZik7XG59XG5cbmZ1bmN0aW9uIHNvbWUobSwgZikge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnNvbWVVKG0uZGF0YSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24ga2VlcFUobSwgZikge1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogbS5jbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9NYXBEaWN0LmtlZXBVKG0uZGF0YSwgZilcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24ga2VlcChtLCBmKSB7XG4gIHJldHVybiBrZWVwVShtLCBDdXJyeS5fXzIoZikpO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb25VKG0sIHApIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbWF0Y2ggPSBCZWx0X01hcERpY3QucGFydGl0aW9uVShtLmRhdGEsIHApO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBtYXRjaFswXVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBtYXRjaFsxXVxuICAgICAgICAgIH1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKG0sIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblUobSwgQ3VycnkuX18yKHApKTtcbn1cblxuZnVuY3Rpb24gbWFwVShtLCBmKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBtLmNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X01hcERpY3QubWFwVShtLmRhdGEsIGYpXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG1hcChtLCBmKSB7XG4gIHJldHVybiBtYXBVKG0sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIG1hcFdpdGhLZXlVKG0sIGYpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IG0uY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfTWFwRGljdC5tYXBXaXRoS2V5VShtLmRhdGEsIGYpXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIG1hcFdpdGhLZXkobSwgZikge1xuICByZXR1cm4gbWFwV2l0aEtleVUobSwgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gc2l6ZShtYXApIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5zaXplKG1hcC5kYXRhKTtcbn1cblxuZnVuY3Rpb24gdG9MaXN0KG1hcCkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnRvTGlzdChtYXAuZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnRvQXJyYXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24ga2V5c1RvQXJyYXkobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmtleXNUb0FycmF5KG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIHZhbHVlc1RvQXJyYXkobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LnZhbHVlc1RvQXJyYXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWluS2V5KG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5taW5LZXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWluS2V5VW5kZWZpbmVkKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5taW5LZXlVbmRlZmluZWQobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWF4S2V5KG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5tYXhLZXkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWF4S2V5VW5kZWZpbmVkKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5tYXhLZXlVbmRlZmluZWQobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWluaW11bShtKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QubWluaW11bShtLmRhdGEpO1xufVxuXG5mdW5jdGlvbiBtaW5VbmRlZmluZWQobSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0Lm1pblVuZGVmaW5lZChtLmRhdGEpO1xufVxuXG5mdW5jdGlvbiBtYXhpbXVtKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5tYXhpbXVtKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIG1heFVuZGVmaW5lZChtKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QubWF4VW5kZWZpbmVkKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGdldChtYXAsIHgpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5nZXQobWFwLmRhdGEsIHgsIG1hcC5jbXApO1xufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWQobWFwLCB4KSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QuZ2V0VW5kZWZpbmVkKG1hcC5kYXRhLCB4LCBtYXAuY21wKTtcbn1cblxuZnVuY3Rpb24gZ2V0V2l0aERlZmF1bHQobWFwLCB4LCBkZWYpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5nZXRXaXRoRGVmYXVsdChtYXAuZGF0YSwgeCwgZGVmLCBtYXAuY21wKTtcbn1cblxuZnVuY3Rpb24gZ2V0RXhuKG1hcCwgeCkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmdldEV4bihtYXAuZGF0YSwgeCwgbWFwLmNtcCk7XG59XG5cbmZ1bmN0aW9uIGhhcyhtYXAsIHgpIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5oYXMobWFwLmRhdGEsIHgsIG1hcC5jbXApO1xufVxuXG5mdW5jdGlvbiBjaGVja0ludmFyaWFudEludGVybmFsKG0pIHtcbiAgcmV0dXJuIEJlbHRfTWFwRGljdC5jaGVja0ludmFyaWFudEludGVybmFsKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIGVxVShtMSwgbTIsIHZlcSkge1xuICByZXR1cm4gQmVsdF9NYXBEaWN0LmVxVShtMS5kYXRhLCBtMi5kYXRhLCBtMS5jbXAsIHZlcSk7XG59XG5cbmZ1bmN0aW9uIGVxKG0xLCBtMiwgdmVxKSB7XG4gIHJldHVybiBlcVUobTEsIG0yLCBDdXJyeS5fXzIodmVxKSk7XG59XG5cbmZ1bmN0aW9uIGNtcFUobTEsIG0yLCB2Y21wKSB7XG4gIHJldHVybiBCZWx0X01hcERpY3QuY21wVShtMS5kYXRhLCBtMi5kYXRhLCBtMS5jbXAsIHZjbXApO1xufVxuXG5mdW5jdGlvbiBjbXAobTEsIG0yLCB2Y21wKSB7XG4gIHJldHVybiBjbXBVKG0xLCBtMiwgQ3VycnkuX18yKHZjbXApKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YShtKSB7XG4gIHJldHVybiBtLmRhdGE7XG59XG5cbmZ1bmN0aW9uIGdldElkKG0pIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogY21wXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tJZERhdGEoaWQsIGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGlkLmNtcCxcbiAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgIH07XG59XG5cbnZhciBJbnQ7XG5cbnZhciAkJFN0cmluZztcblxudmFyIERpY3Q7XG5cbmV4cG9ydCB7XG4gIEludCAsXG4gICQkU3RyaW5nICxcbiAgRGljdCAsXG4gIG1ha2UgLFxuICBpc0VtcHR5ICxcbiAgaGFzICxcbiAgY21wVSAsXG4gIGNtcCAsXG4gIGVxVSAsXG4gIGVxICxcbiAgZmluZEZpcnN0QnlVICxcbiAgZmluZEZpcnN0QnkgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICByZWR1Y2VVICxcbiAgcmVkdWNlICxcbiAgZXZlcnlVICxcbiAgZXZlcnkgLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBzaXplICxcbiAgdG9BcnJheSAsXG4gIHRvTGlzdCAsXG4gIGZyb21BcnJheSAsXG4gIGtleXNUb0FycmF5ICxcbiAgdmFsdWVzVG9BcnJheSAsXG4gIG1pbktleSAsXG4gIG1pbktleVVuZGVmaW5lZCAsXG4gIG1heEtleSAsXG4gIG1heEtleVVuZGVmaW5lZCAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0V2l0aERlZmF1bHQgLFxuICBnZXRFeG4gLFxuICByZW1vdmUgLFxuICByZW1vdmVNYW55ICxcbiAgc2V0ICxcbiAgdXBkYXRlVSAsXG4gIHVwZGF0ZSAsXG4gIG1lcmdlTWFueSAsXG4gIG1lcmdlVSAsXG4gIG1lcmdlICxcbiAga2VlcFUgLFxuICBrZWVwICxcbiAgcGFydGl0aW9uVSAsXG4gIHBhcnRpdGlvbiAsXG4gIHNwbGl0ICxcbiAgbWFwVSAsXG4gIG1hcCAsXG4gIG1hcFdpdGhLZXlVICxcbiAgbWFwV2l0aEtleSAsXG4gIGdldERhdGEgLFxuICBnZXRJZCAsXG4gIHBhY2tJZERhdGEgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0xpc3QgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9MaXN0LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0FycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfQXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBBcnJheSRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvQXJyYXkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFN0cmluZyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvU3RyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlIGZyb20gXCIuLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBBbnkgZnJvbSBcIi4uL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LmJzLmpzXCI7XG5cbnZhciBTZW1pZ3JvdXBBbnkgPSB7XG4gIGFwcGVuZDogQmVsdF9BcnJheS5jb25jYXRcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55KTtcblxudmFyIG1hcCA9IEFycmF5JEJzQmFzdGV0LkZ1bmN0b3IubWFwO1xuXG52YXIgRnVuY3RvciA9IHtcbiAgbWFwOiBtYXBcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuXG52YXIgYXBwbHkgPSBBcnJheSRCc0Jhc3RldC5BcHBseS5hcHBseTtcblxudmFyIEFwcGx5ID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5XG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlFeHRlbnNpb25zKEFwcGx5KTtcblxuZnVuY3Rpb24gcHVyZShhKSB7XG4gIHJldHVybiBbYV07XG59XG5cbnZhciBBcHBsaWNhdGl2ZSA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZVxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbnZhciBiaW5kID0gQXJyYXkkQnNCYXN0ZXQuTW9uYWQuZmxhdF9tYXA7XG5cbnZhciBNb25hZCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgcHVyZTogcHVyZSxcbiAgZmxhdF9tYXA6IGJpbmRcbn07XG5cbnZhciBpbmNsdWRlJDQgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuXG52YXIgYWx0ID0gQXJyYXkkQnNCYXN0ZXQuQWx0LmFsdDtcblxudmFyIEFsdCA9IHtcbiAgbWFwOiBtYXAsXG4gIGFsdDogYWx0XG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gUmVsdWRlX0V4dGVuc2lvbnNfQWx0LkFsdEV4dGVuc2lvbnMoQWx0KTtcblxudmFyIGltYXAgPSBBcnJheSRCc0Jhc3RldC5JbnZhcmlhbnQuaW1hcDtcblxudmFyIEludmFyaWFudCA9IHtcbiAgaW1hcDogaW1hcFxufTtcblxudmFyIGV4dGVuZCA9IEFycmF5JEJzQmFzdGV0LkV4dGVuZC5leHRlbmQ7XG5cbnZhciBFeHRlbmQgPSB7XG4gIG1hcDogbWFwLFxuICBleHRlbmQ6IGV4dGVuZFxufTtcblxudmFyIGZvbGRMZWZ0ID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9sZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuZm9sZF9yaWdodDtcblxudmFyIEZvbGRhYmxlX0ZvbGRfTWFwID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuRm9sZF9NYXA7XG5cbnZhciBGb2xkYWJsZV9Gb2xkX01hcF9BbnkgPSBBcnJheSRCc0Jhc3RldC5Gb2xkYWJsZS5Gb2xkX01hcF9Bbnk7XG5cbnZhciBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzID0gQXJyYXkkQnNCYXN0ZXQuRm9sZGFibGUuRm9sZF9NYXBfUGx1cztcblxudmFyIEZvbGRhYmxlID0ge1xuICBmb2xkX2xlZnQ6IGZvbGRMZWZ0LFxuICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQsXG4gIEZvbGRfTWFwOiBGb2xkYWJsZV9Gb2xkX01hcCxcbiAgRm9sZF9NYXBfQW55OiBGb2xkYWJsZV9Gb2xkX01hcF9BbnksXG4gIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbn07XG5cbnZhciBpbmNsdWRlJDYgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5Gb2xkYWJsZUV4dGVuc2lvbnMoRm9sZGFibGUpO1xuXG52YXIgaW50ZXJjYWxhdGUgPSBpbmNsdWRlJDYuaW50ZXJjYWxhdGU7XG5cbmZ1bmN0aW9uIGVxQnkoaW5uZXJFcSwgX3hzLCBfeXMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciB5cyA9IF95cztcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgdmFyIG1hdGNoID0gQmVsdF9BcnJheS5nZXQoeHMsIDApO1xuICAgIHZhciBtYXRjaCQxID0gQmVsdF9BcnJheS5nZXQoeXMsIDApO1xuICAgIGlmIChtYXRjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbWF0Y2gkMSA9PT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAobWF0Y2gkMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghQ3VycnkuXzIoaW5uZXJFcSwgQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtYXRjaCksIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24obWF0Y2gkMSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF95cyA9IEJlbHRfQXJyYXkuc2xpY2VUb0VuZCh5cywgMSk7XG4gICAgX3hzID0gQmVsdF9BcnJheS5zbGljZVRvRW5kKHhzLCAxKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGVxKGVxQSwgeHMsIHlzKSB7XG4gIHJldHVybiBlcUJ5KGVxQS5lcSwgeHMsIHlzKTtcbn1cblxuZnVuY3Rpb24gRXEoRXFBKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBlcUJ5KEVxQS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBzaG93QnkoaW5uZXJTaG93LCB4cykge1xuICB2YXIgam9pbiA9IEN1cnJ5Ll8xKGludGVyY2FsYXRlLCBTdHJpbmckQnNCYXN0ZXQuTW9ub2lkKTtcbiAgcmV0dXJuIFwiW1wiICsgKEN1cnJ5Ll8yKGpvaW4sIFwiLCBcIiwgQ3VycnkuXzIobWFwLCBpbm5lclNob3csIHhzKSkgKyBcIl1cIik7XG59XG5cbmZ1bmN0aW9uIHNob3coc2hvd0EsIHhzKSB7XG4gIHJldHVybiBzaG93Qnkoc2hvd0Euc2hvdywgeHMpO1xufVxuXG5mdW5jdGlvbiBTaG93KFNob3dBKSB7XG4gIHZhciBzaG93ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHNob3dCeShTaG93QS5zaG93LCBwYXJhbSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICB9O1xufVxuXG52YXIgSXNvTGlzdCA9IHtcbiAgZnJvbUxpc3Q6IEJlbHRfTGlzdC50b0FycmF5LFxuICB0b0xpc3Q6IEJlbHRfTGlzdC5mcm9tQXJyYXlcbn07XG5cbnZhciBjb25jYXQgPSBCZWx0X0FycmF5LmNvbmNhdDtcblxudmFyIGNvbmNhdE5hbWVkID0gaW5jbHVkZS5jb25jYXROYW1lZDtcblxudmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuQnNGdW5jdG9yRXh0ZW5zaW9ucztcblxudmFyIGZsaXBNYXAgPSBpbmNsdWRlJDEuZmxpcE1hcDtcblxudmFyICQkdm9pZCA9IGluY2x1ZGUkMS4kJHZvaWQ7XG5cbnZhciB2b2lkUmlnaHQgPSBpbmNsdWRlJDEudm9pZFJpZ2h0O1xuXG52YXIgdm9pZExlZnQgPSBpbmNsdWRlJDEudm9pZExlZnQ7XG5cbnZhciBmbGFwID0gaW5jbHVkZSQxLmZsYXA7XG5cbnZhciBCc0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0FwcGx5RXh0ZW5zaW9ucztcblxudmFyIGFwcGx5Rmlyc3QgPSBpbmNsdWRlJDIuYXBwbHlGaXJzdDtcblxudmFyIGFwcGx5U2Vjb25kID0gaW5jbHVkZSQyLmFwcGx5U2Vjb25kO1xuXG52YXIgbWFwMiA9IGluY2x1ZGUkMi5tYXAyO1xuXG52YXIgbWFwMyA9IGluY2x1ZGUkMi5tYXAzO1xuXG52YXIgbWFwNCA9IGluY2x1ZGUkMi5tYXA0O1xuXG52YXIgbWFwNSA9IGluY2x1ZGUkMi5tYXA1O1xuXG52YXIgdHVwbGUyID0gaW5jbHVkZSQyLnR1cGxlMjtcblxudmFyIHR1cGxlMyA9IGluY2x1ZGUkMi50dXBsZTM7XG5cbnZhciB0dXBsZTQgPSBpbmNsdWRlJDIudHVwbGU0O1xuXG52YXIgdHVwbGU1ID0gaW5jbHVkZSQyLnR1cGxlNTtcblxudmFyIG1hcFR1cGxlMiA9IGluY2x1ZGUkMi5tYXBUdXBsZTI7XG5cbnZhciBtYXBUdXBsZTMgPSBpbmNsdWRlJDIubWFwVHVwbGUzO1xuXG52YXIgbWFwVHVwbGU0ID0gaW5jbHVkZSQyLm1hcFR1cGxlNDtcblxudmFyIG1hcFR1cGxlNSA9IGluY2x1ZGUkMi5tYXBUdXBsZTU7XG5cbnZhciBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIGxpZnRBMSA9IGluY2x1ZGUkMy5saWZ0QTE7XG5cbnZhciBCc01vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNC5Cc01vbmFkRXh0ZW5zaW9ucztcblxudmFyIGZsYXRNYXAgPSBpbmNsdWRlJDQuZmxhdE1hcDtcblxudmFyIGZsYXR0ZW4gPSBpbmNsdWRlJDQuZmxhdHRlbjtcblxudmFyIGNvbXBvc2VLbGVpc2xpID0gaW5jbHVkZSQ0LmNvbXBvc2VLbGVpc2xpO1xuXG52YXIgZmxpcENvbXBvc2VLbGVpc2xpID0gaW5jbHVkZSQ0LmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIGxpZnRNMSA9IGluY2x1ZGUkNC5saWZ0TTE7XG5cbnZhciB3aGVuXyA9IGluY2x1ZGUkNC53aGVuXztcblxudmFyIHVubGVzcyA9IGluY2x1ZGUkNC51bmxlc3M7XG5cbnZhciBvckVsc2UgPSBpbmNsdWRlJDUub3JFbHNlO1xuXG52YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBhbnkgPSBpbmNsdWRlJDYuYW55O1xuXG52YXIgYWxsID0gaW5jbHVkZSQ2LmFsbDtcblxudmFyIGNvbnRhaW5zQnkgPSBpbmNsdWRlJDYuY29udGFpbnNCeTtcblxudmFyIGNvbnRhaW5zID0gaW5jbHVkZSQ2LmNvbnRhaW5zO1xuXG52YXIgaW5kZXhPZkJ5ID0gaW5jbHVkZSQ2LmluZGV4T2ZCeTtcblxudmFyIGluZGV4T2YgPSBpbmNsdWRlJDYuaW5kZXhPZjtcblxudmFyIG1pbkJ5ID0gaW5jbHVkZSQ2Lm1pbkJ5O1xuXG52YXIgbWluID0gaW5jbHVkZSQ2Lm1pbjtcblxudmFyIG1heEJ5ID0gaW5jbHVkZSQ2Lm1heEJ5O1xuXG52YXIgbWF4ID0gaW5jbHVkZSQ2Lm1heDtcblxudmFyIGNvdW50QnkgPSBpbmNsdWRlJDYuY291bnRCeTtcblxudmFyIGxlbmd0aCA9IGluY2x1ZGUkNi5sZW5ndGg7XG5cbnZhciBzaXplID0gaW5jbHVkZSQ2LnNpemU7XG5cbnZhciBjb3VudCA9IGluY2x1ZGUkNi5jb3VudDtcblxudmFyIGZvckVhY2ggPSBpbmNsdWRlJDYuZm9yRWFjaDtcblxudmFyIGZvckVhY2hXaXRoSW5kZXggPSBpbmNsdWRlJDYuZm9yRWFjaFdpdGhJbmRleDtcblxudmFyIGZpbmQgPSBpbmNsdWRlJDYuZmluZDtcblxudmFyIGZpbmRXaXRoSW5kZXggPSBpbmNsdWRlJDYuZmluZFdpdGhJbmRleDtcblxudmFyIHRvQXJyYXkgPSBpbmNsdWRlJDYudG9BcnJheTtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNi5Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IGluY2x1ZGUkNi5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDYuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNi5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ2LkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDYuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgVHJhdmVyc2FibGU7XG5cbnZhciBPcmQ7XG5cbnZhciBmcm9tTGlzdCA9IEJlbHRfTGlzdC50b0FycmF5O1xuXG52YXIgdG9MaXN0ID0gQmVsdF9MaXN0LmZyb21BcnJheTtcblxuZXhwb3J0IHtcbiAgY29uY2F0ICxcbiAgU2VtaWdyb3VwQW55ICxcbiAgY29uY2F0TmFtZWQgLFxuICBtYXAgLFxuICBGdW5jdG9yICxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIGZsaXBNYXAgLFxuICAkJHZvaWQgLFxuICB2b2lkUmlnaHQgLFxuICB2b2lkTGVmdCAsXG4gIGZsYXAgLFxuICBhcHBseSAsXG4gIEFwcGx5ICxcbiAgQnNBcHBseUV4dGVuc2lvbnMgLFxuICBhcHBseUZpcnN0ICxcbiAgYXBwbHlTZWNvbmQgLFxuICBtYXAyICxcbiAgbWFwMyAsXG4gIG1hcDQgLFxuICBtYXA1ICxcbiAgdHVwbGUyICxcbiAgdHVwbGUzICxcbiAgdHVwbGU0ICxcbiAgdHVwbGU1ICxcbiAgbWFwVHVwbGUyICxcbiAgbWFwVHVwbGUzICxcbiAgbWFwVHVwbGU0ICxcbiAgbWFwVHVwbGU1ICxcbiAgcHVyZSAsXG4gIEFwcGxpY2F0aXZlICxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBsaWZ0QTEgLFxuICBiaW5kICxcbiAgTW9uYWQgLFxuICBCc01vbmFkRXh0ZW5zaW9ucyAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgY29tcG9zZUtsZWlzbGkgLFxuICBmbGlwQ29tcG9zZUtsZWlzbGkgLFxuICBsaWZ0TTEgLFxuICB3aGVuXyAsXG4gIHVubGVzcyAsXG4gIGFsdCAsXG4gIEFsdCAsXG4gIG9yRWxzZSAsXG4gIGltYXAgLFxuICBJbnZhcmlhbnQgLFxuICBleHRlbmQgLFxuICBFeHRlbmQgLFxuICBmb2xkTGVmdCAsXG4gIGZvbGRSaWdodCAsXG4gIEZvbGRhYmxlICxcbiAgQnNGb2xkYWJsZUV4dGVuc2lvbnMgLFxuICBhbnkgLFxuICBhbGwgLFxuICBjb250YWluc0J5ICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mQnkgLFxuICBpbmRleE9mICxcbiAgbWluQnkgLFxuICBtaW4gLFxuICBtYXhCeSAsXG4gIG1heCAsXG4gIGNvdW50QnkgLFxuICBsZW5ndGggLFxuICBzaXplICxcbiAgY291bnQgLFxuICBmb3JFYWNoICxcbiAgZm9yRWFjaFdpdGhJbmRleCAsXG4gIGZpbmQgLFxuICBmaW5kV2l0aEluZGV4ICxcbiAgdG9BcnJheSAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgVHJhdmVyc2FibGUgLFxuICBlcUJ5ICxcbiAgZXEgLFxuICBFcSAsXG4gIE9yZCAsXG4gIHNob3dCeSAsXG4gIHNob3cgLFxuICBTaG93ICxcbiAgZnJvbUxpc3QgLFxuICB0b0xpc3QgLFxuICBJc29MaXN0ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfSWQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9JZC5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9NYXAgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9NYXAuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0xpc3QuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfQXJyYXkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9BcnJheS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0Z1bmN0aW9uIGZyb20gXCIuL1JlbHVkZV9GdW5jdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZGVyaW5nIGZyb20gXCIuL1JlbHVkZV9PcmRlcmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfSW5zdGFuY2VzIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzIGZyb20gXCIuL2FycmF5L1JlbHVkZV9BcnJheV9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzXCI7XG5cbnZhciBtYWtlID0gQmVsdF9NYXAubWFrZTtcblxuZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAuc2V0KF9feCwga2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHNpbmdsZXRvbihjb21wYXJhYmxlLCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBCZWx0X01hcC5zZXQoQmVsdF9NYXAubWFrZShjb21wYXJhYmxlKSwga2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKGtleSwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5oYXMoX194LCBrZXkpO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlSW50KGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmNtcChhLCBiLCBjb21wYXJhdG9yKTtcbn1cblxuZnVuY3Rpb24gY29tcGFyZUJ5KGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy5mcm9tSW50KEJlbHRfTWFwLmNtcChhLCBiLCAoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihjb21wYXJhdG9yLCBhLCBiKSk7XG4gICAgICAgICAgICAgICAgICB9KSkpO1xufVxuXG5mdW5jdGlvbiBlcUJ5KGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmVxKGEsIGIsIGNvbXBhcmF0b3IpO1xufVxuXG5mdW5jdGlvbiBmaW5kKGJ5LCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmZpbmRGaXJzdEJ5KF9feCwgYnkpO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmZvckVhY2goX194LCBmbik7XG59XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGZuLCBhY2MsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAucmVkdWNlKF9feCwgYWNjLCBmbik7XG59XG5cbmZ1bmN0aW9uIGFsbChjb25kLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmV2ZXJ5KF9feCwgY29uZCk7XG59XG5cbmZ1bmN0aW9uIGFueShjb25kLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLnNvbWUoX194LCBjb25kKTtcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5KGNvbXBhcmFibGUsIGFycikge1xuICByZXR1cm4gQmVsdF9NYXAuZnJvbUFycmF5KGFyciwgY29tcGFyYWJsZSk7XG59XG5cbmZ1bmN0aW9uIGZyb21WYWx1ZUFycmF5KGNvbXBhcmFibGUsIHRvS2V5KSB7XG4gIHJldHVybiBDdXJyeS5fMihSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKG1hcCwgdikge1xuICAgICAgICAgICAgICAgIHJldHVybiBCZWx0X01hcC5zZXQobWFwLCBDdXJyeS5fMSh0b0tleSwgdiksIHYpO1xuICAgICAgICAgICAgICB9KSwgQmVsdF9NYXAubWFrZShjb21wYXJhYmxlKSk7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0KGNvbXBhcmFibGUsIGxzdCkge1xuICByZXR1cm4gQmVsdF9NYXAuZnJvbUFycmF5KEJlbHRfTGlzdC50b0FycmF5KGxzdCksIGNvbXBhcmFibGUpO1xufVxuXG5mdW5jdGlvbiBmcm9tVmFsdWVMaXN0KGNvbXBhcmFibGUsIHRvS2V5KSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uIChtYXAsIHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9NYXAuc2V0KG1hcCwgQ3VycnkuXzEodG9LZXksIHYpLCB2KTtcbiAgICAgICAgICAgICAgfSksIEJlbHRfTWFwLm1ha2UoY29tcGFyYWJsZSkpO1xufVxuXG5mdW5jdGlvbiBrZXlzKG1hcCkge1xuICByZXR1cm4gQmVsdF9MaXN0LmZyb21BcnJheShCZWx0X01hcC5rZXlzVG9BcnJheShtYXApKTtcbn1cblxuZnVuY3Rpb24gdmFsdWVzKG1hcCkge1xuICByZXR1cm4gQmVsdF9MaXN0LmZyb21BcnJheShCZWx0X01hcC52YWx1ZXNUb0FycmF5KG1hcCkpO1xufVxuXG5mdW5jdGlvbiBnZXQoa2V5LCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmdldChfX3gsIGtleSk7XG59XG5cbmZ1bmN0aW9uIGdldE9yRWxzZShrZXksICQkZGVmYXVsdCwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5nZXRXaXRoRGVmYXVsdChfX3gsIGtleSwgJCRkZWZhdWx0KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKGtleSwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5yZW1vdmUoX194LCBrZXkpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNYW55KGtleXMsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAucmVtb3ZlTWFueShfX3gsIGtleXMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUoa2V5LCB1cGRhdGVGbiwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC51cGRhdGUoX194LCBrZXksIHVwZGF0ZUZuKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UobWVyZ2VGbiwgYSwgYikge1xuICByZXR1cm4gQmVsdF9NYXAubWVyZ2UoYSwgYiwgbWVyZ2VGbik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueShhcnIsIF9feCkge1xuICByZXR1cm4gQmVsdF9NYXAubWVyZ2VNYW55KF9feCwgYXJyKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLmtlZXAoX194LCBmbik7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck5vdChmbiwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5rZWVwKF9feCwgKGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFDdXJyeS5fMihmbiwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLnBhcnRpdGlvbihfX3gsIGZuKTtcbn1cblxuZnVuY3Rpb24gbWFwKGZuLCBfX3gpIHtcbiAgcmV0dXJuIEJlbHRfTWFwLm1hcChfX3gsIGZuKTtcbn1cblxuZnVuY3Rpb24gbWFwV2l0aEtleShmbiwgX194KSB7XG4gIHJldHVybiBCZWx0X01hcC5tYXBXaXRoS2V5KF9feCwgZm4pO1xufVxuXG5mdW5jdGlvbiBncm91cExpc3RCeShjb21wYXJhYmxlLCBncm91cEJ5KSB7XG4gIHZhciBhZGRJdGVtVG9Hcm91cCA9IGZ1bmN0aW9uICh4KSB7XG4gICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ3JvdXBCeSwgeCk7XG4gICAgdmFyIHBhcnRpYWxfYXJnJDEgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X01hcC5nZXRXaXRoRGVmYXVsdChwYXJhbSwgcGFydGlhbF9hcmcsIC8qIFtdICovMCk7XG4gICAgfTtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZyQxLCAoZnVuY3Rpb24gKHhzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgfSksIHBhcmFtKTtcbiAgICAgIH0pO1xuICB9O1xuICB2YXIgYWRkSXRlbVRvTWFwID0gZnVuY3Rpb24gKGRpY3QsIHgpIHtcbiAgICByZXR1cm4gQmVsdF9NYXAuc2V0KGRpY3QsIEN1cnJ5Ll8xKGdyb3VwQnksIHgpLCBhZGRJdGVtVG9Hcm91cCh4KShkaWN0KSk7XG4gIH07XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdCgoZnVuY3Rpb24gKF9feCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9MaXN0LnJlZHVjZShfX3gsIEJlbHRfTWFwLm1ha2UoY29tcGFyYWJsZSksIGFkZEl0ZW1Ub01hcCk7XG4gICAgICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9NYXAubWFwKHBhcmFtLCBCZWx0X0xpc3QucmV2ZXJzZSk7XG4gICAgICAgICAgICAgICAgICB9KSwgcGFyYW0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBncm91cEFycmF5QnkoY29tcGFyYWJsZSwgZ3JvdXBCeSkge1xuICB2YXIgYWRkSXRlbVRvR3JvdXAgPSBmdW5jdGlvbiAoeCkge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IFtdO1xuICAgIHZhciBwYXJ0aWFsX2FyZyQxID0gQ3VycnkuXzEoZ3JvdXBCeSwgeCk7XG4gICAgdmFyIHBhcnRpYWxfYXJnJDIgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBCZWx0X01hcC5nZXRXaXRoRGVmYXVsdChwYXJhbSwgcGFydGlhbF9hcmckMSwgcGFydGlhbF9hcmcpO1xuICAgIH07XG4gICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmckMiwgKGZ1bmN0aW9uIChfX3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQmVsdF9BcnJheS5jb25jYXQoX194LCBbeF0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgcGFyYW0pO1xuICAgICAgfSk7XG4gIH07XG4gIHZhciBhZGRJdGVtVG9NYXAgPSBmdW5jdGlvbiAoZGljdCwgeCkge1xuICAgIHJldHVybiBCZWx0X01hcC5zZXQoZGljdCwgQ3VycnkuXzEoZ3JvdXBCeSwgeCksIGFkZEl0ZW1Ub0dyb3VwKHgpKGRpY3QpKTtcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAoX194KSB7XG4gICAgICByZXR1cm4gQmVsdF9BcnJheS5yZWR1Y2UoX194LCBCZWx0X01hcC5tYWtlKGNvbXBhcmFibGUpLCBhZGRJdGVtVG9NYXApO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBXaXRoT3JkKE0pIHtcbiAgdmFyIGNtcCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihNLmNvbXBhcmUsIGEsIGIpKTtcbiAgfTtcbiAgdmFyIENvbXBhcmFibGUgPSBCZWx0X0lkLk1ha2VDb21wYXJhYmxlKHtcbiAgICAgICAgY21wOiBjbXBcbiAgICAgIH0pO1xuICB2YXIgbWFrZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBCZWx0X01hcC5tYWtlKENvbXBhcmFibGUpO1xuICB9O1xuICB2YXIgc2luZ2xldG9uID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gQmVsdF9NYXAuc2V0KEJlbHRfTWFwLm1ha2UoQ29tcGFyYWJsZSksIGtleSwgdmFsdWUpO1xuICB9O1xuICB2YXIgZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuICAgIHJldHVybiBCZWx0X01hcC5mcm9tQXJyYXkoYXJyLCBDb21wYXJhYmxlKTtcbiAgfTtcbiAgdmFyIGZyb21WYWx1ZUFycmF5JDEgPSBmdW5jdGlvbiAodG9LZXksIGFycikge1xuICAgIHJldHVybiBDdXJyeS5fMShmcm9tVmFsdWVBcnJheShDb21wYXJhYmxlLCB0b0tleSksIGFycik7XG4gIH07XG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChsc3QpIHtcbiAgICByZXR1cm4gQmVsdF9NYXAuZnJvbUFycmF5KEJlbHRfTGlzdC50b0FycmF5KGxzdCksIENvbXBhcmFibGUpO1xuICB9O1xuICB2YXIgZnJvbVZhbHVlTGlzdCQxID0gZnVuY3Rpb24gKHRvS2V5LCBsc3QpIHtcbiAgICByZXR1cm4gZnJvbVZhbHVlTGlzdChDb21wYXJhYmxlLCB0b0tleSkobHN0KTtcbiAgfTtcbiAgdmFyIGdyb3VwTGlzdEJ5JDEgPSBmdW5jdGlvbiAoZ3JvdXBCeSwgbHN0KSB7XG4gICAgcmV0dXJuIGdyb3VwTGlzdEJ5KENvbXBhcmFibGUsIGdyb3VwQnkpKGxzdCk7XG4gIH07XG4gIHZhciBncm91cEFycmF5QnkkMSA9IGZ1bmN0aW9uIChncm91cEJ5LCBhcnIpIHtcbiAgICByZXR1cm4gZ3JvdXBBcnJheUJ5KENvbXBhcmFibGUsIGdyb3VwQnkpKGFycik7XG4gIH07XG4gIHZhciBGdW5jdG9yID0ge1xuICAgIG1hcDogbWFwXG4gIH07XG4gIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckV4dGVuc2lvbnMoRnVuY3Rvcik7XG4gIHJldHVybiB7XG4gICAgICAgICAgQ29tcGFyYWJsZTogeyB9LFxuICAgICAgICAgIG1ha2U6IG1ha2UsXG4gICAgICAgICAgc2V0OiBzZXQsXG4gICAgICAgICAgc2luZ2xldG9uOiBzaW5nbGV0b24sXG4gICAgICAgICAgaXNFbXB0eTogQmVsdF9NYXAuaXNFbXB0eSxcbiAgICAgICAgICBjb250YWluczogY29udGFpbnMsXG4gICAgICAgICAgY29tcGFyZUludDogY29tcGFyZUludCxcbiAgICAgICAgICBjb21wYXJlQnk6IGNvbXBhcmVCeSxcbiAgICAgICAgICBlcUJ5OiBlcUJ5LFxuICAgICAgICAgIGZpbmQ6IGZpbmQsXG4gICAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgICBmb2xkTGVmdDogZm9sZExlZnQsXG4gICAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgICAgYW55OiBhbnksXG4gICAgICAgICAgbGVuZ3RoOiBCZWx0X01hcC5zaXplLFxuICAgICAgICAgIHRvQXJyYXk6IEJlbHRfTWFwLnRvQXJyYXksXG4gICAgICAgICAgZnJvbUFycmF5OiBmcm9tQXJyYXksXG4gICAgICAgICAgZnJvbVZhbHVlQXJyYXk6IGZyb21WYWx1ZUFycmF5JDEsXG4gICAgICAgICAgdG9MaXN0OiBCZWx0X01hcC50b0xpc3QsXG4gICAgICAgICAgZnJvbUxpc3Q6IGZyb21MaXN0LFxuICAgICAgICAgIGZyb21WYWx1ZUxpc3Q6IGZyb21WYWx1ZUxpc3QkMSxcbiAgICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICAgIGtleUFycmF5OiBCZWx0X01hcC5rZXlzVG9BcnJheSxcbiAgICAgICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgICAgICB2YWx1ZUFycmF5OiBCZWx0X01hcC52YWx1ZXNUb0FycmF5LFxuICAgICAgICAgIG1pbktleTogQmVsdF9NYXAubWluS2V5LFxuICAgICAgICAgIG1heEtleTogQmVsdF9NYXAubWF4S2V5LFxuICAgICAgICAgIG1pbjogQmVsdF9NYXAubWluaW11bSxcbiAgICAgICAgICBtYXg6IEJlbHRfTWFwLm1heGltdW0sXG4gICAgICAgICAgZ2V0OiBnZXQsXG4gICAgICAgICAgZ2V0T3JFbHNlOiBnZXRPckVsc2UsXG4gICAgICAgICAgcmVtb3ZlOiByZW1vdmUsXG4gICAgICAgICAgcmVtb3ZlTWFueTogcmVtb3ZlTWFueSxcbiAgICAgICAgICB1cGRhdGU6IHVwZGF0ZSxcbiAgICAgICAgICBtZXJnZTogbWVyZ2UsXG4gICAgICAgICAgbWVyZ2VNYW55OiBtZXJnZU1hbnksXG4gICAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgICAga2VlcDogZmlsdGVyLFxuICAgICAgICAgIGZpbHRlck5vdDogZmlsdGVyTm90LFxuICAgICAgICAgIHJlamVjdDogZmlsdGVyTm90LFxuICAgICAgICAgIHBhcnRpdGlvbjogcGFydGl0aW9uLFxuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIG1hcFdpdGhLZXk6IG1hcFdpdGhLZXksXG4gICAgICAgICAgZ3JvdXBMaXN0Qnk6IGdyb3VwTGlzdEJ5JDEsXG4gICAgICAgICAgZ3JvdXBBcnJheUJ5OiBncm91cEFycmF5QnkkMVxuICAgICAgICB9O1xufVxuXG52YXIgaXNFbXB0eSA9IEJlbHRfTWFwLmlzRW1wdHk7XG5cbnZhciBsZW5ndGggPSBCZWx0X01hcC5zaXplO1xuXG52YXIgdG9BcnJheSA9IEJlbHRfTWFwLnRvQXJyYXk7XG5cbnZhciB0b0xpc3QgPSBCZWx0X01hcC50b0xpc3Q7XG5cbnZhciBrZXlBcnJheSA9IEJlbHRfTWFwLmtleXNUb0FycmF5O1xuXG52YXIgdmFsdWVBcnJheSA9IEJlbHRfTWFwLnZhbHVlc1RvQXJyYXk7XG5cbnZhciBtaW5LZXkgPSBCZWx0X01hcC5taW5LZXk7XG5cbnZhciBtYXhLZXkgPSBCZWx0X01hcC5tYXhLZXk7XG5cbnZhciBtaW4gPSBCZWx0X01hcC5taW5pbXVtO1xuXG52YXIgbWF4ID0gQmVsdF9NYXAubWF4aW11bTtcblxudmFyIGtlZXAgPSBmaWx0ZXI7XG5cbnZhciByZWplY3QgPSBmaWx0ZXJOb3Q7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBzZXQgLFxuICBzaW5nbGV0b24gLFxuICBpc0VtcHR5ICxcbiAgY29udGFpbnMgLFxuICBjb21wYXJlSW50ICxcbiAgY29tcGFyZUJ5ICxcbiAgZXFCeSAsXG4gIGZpbmQgLFxuICBmb3JFYWNoICxcbiAgZm9sZExlZnQgLFxuICBhbGwgLFxuICBhbnkgLFxuICBsZW5ndGggLFxuICB0b0FycmF5ICxcbiAgZnJvbUFycmF5ICxcbiAgZnJvbVZhbHVlQXJyYXkgLFxuICB0b0xpc3QgLFxuICBmcm9tTGlzdCAsXG4gIGZyb21WYWx1ZUxpc3QgLFxuICBrZXlBcnJheSAsXG4gIGtleXMgLFxuICB2YWx1ZUFycmF5ICxcbiAgdmFsdWVzICxcbiAgbWluS2V5ICxcbiAgbWF4S2V5ICxcbiAgbWluICxcbiAgbWF4ICxcbiAgZ2V0ICxcbiAgZ2V0T3JFbHNlICxcbiAgcmVtb3ZlICxcbiAgcmVtb3ZlTWFueSAsXG4gIHVwZGF0ZSAsXG4gIG1lcmdlICxcbiAgbWVyZ2VNYW55ICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlck5vdCAsXG4gIHJlamVjdCAsXG4gIHBhcnRpdGlvbiAsXG4gIG1hcCAsXG4gIG1hcFdpdGhLZXkgLFxuICBncm91cExpc3RCeSAsXG4gIGdyb3VwQXJyYXlCeSAsXG4gIFdpdGhPcmQgLFxuICBcbn1cbi8qIFJlbHVkZV9GdW5jdGlvbiBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiLi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9Tb3J0QXJyYXkgZnJvbSBcIi4vYmVsdF9Tb3J0QXJyYXkuanNcIjtcblxuZnVuY3Rpb24gdHJlZUhlaWdodChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbi5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29weShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IG4udmFsdWUsXG4gICAgICAgICAgICBoZWlnaHQ6IG4uaGVpZ2h0LFxuICAgICAgICAgICAgbGVmdDogY29weShuLmxlZnQpLFxuICAgICAgICAgICAgcmlnaHQ6IGNvcHkobi5yaWdodClcbiAgICAgICAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShsLCB2LCByKSB7XG4gIHZhciBobCA9IGwgIT09IHVuZGVmaW5lZCA/IGwuaGVpZ2h0IDogMDtcbiAgdmFyIGhyID0gciAhPT0gdW5kZWZpbmVkID8gci5oZWlnaHQgOiAwO1xuICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiB2LFxuICAgICAgICAgIGhlaWdodDogaGwgPj0gaHIgPyBobCArIDEgfCAwIDogaHIgKyAxIHwgMCxcbiAgICAgICAgICBsZWZ0OiBsLFxuICAgICAgICAgIHJpZ2h0OiByXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHNpbmdsZXRvbih4KSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgdmFsdWU6IHgsXG4gICAgICAgICAgaGVpZ2h0OiAxLFxuICAgICAgICAgIGxlZnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICByaWdodDogdW5kZWZpbmVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGhlaWdodEdlKGwsIHIpIHtcbiAgaWYgKHIgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsLmhlaWdodCA+PSByLmhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYWwobCwgdiwgcikge1xuICB2YXIgaGwgPSBsICE9PSB1bmRlZmluZWQgPyBsLmhlaWdodCA6IDA7XG4gIHZhciBociA9IHIgIT09IHVuZGVmaW5lZCA/IHIuaGVpZ2h0IDogMDtcbiAgaWYgKGhsID4gKGhyICsgMiB8IDApKSB7XG4gICAgdmFyIGx2ID0gbC52YWx1ZTtcbiAgICB2YXIgbGwgPSBsLmxlZnQ7XG4gICAgdmFyIGxyID0gbC5yaWdodDtcbiAgICBpZiAoaGVpZ2h0R2UobGwsIGxyKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZShsbCwgbHYsIGNyZWF0ZShsciwgdiwgcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3JlYXRlKGNyZWF0ZShsbCwgbHYsIGxyLmxlZnQpLCBsci52YWx1ZSwgY3JlYXRlKGxyLnJpZ2h0LCB2LCByKSk7XG4gICAgfVxuICB9XG4gIGlmIChociA8PSAoaGwgKyAyIHwgMCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgICAgICBoZWlnaHQ6IGhsID49IGhyID8gaGwgKyAxIHwgMCA6IGhyICsgMSB8IDAsXG4gICAgICAgICAgICBsZWZ0OiBsLFxuICAgICAgICAgICAgcmlnaHQ6IHJcbiAgICAgICAgICB9O1xuICB9XG4gIHZhciBydiA9IHIudmFsdWU7XG4gIHZhciBybCA9IHIubGVmdDtcbiAgdmFyIHJyID0gci5yaWdodDtcbiAgaWYgKGhlaWdodEdlKHJyLCBybCkpIHtcbiAgICByZXR1cm4gY3JlYXRlKGNyZWF0ZShsLCB2LCBybCksIHJ2LCBycik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZShjcmVhdGUobCwgdiwgcmwubGVmdCksIHJsLnZhbHVlLCBjcmVhdGUocmwucmlnaHQsIHJ2LCBycikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1pbjBBdXgoX24pIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIG4kMSA9IG4ubGVmdDtcbiAgICBpZiAobiQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1pbmltdW0obikge1xuICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUobWluMEF1eChuKSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1pblVuZGVmaW5lZChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWluMEF1eChuKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWF4MEF1eChfbikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgbiQxID0gbi5yaWdodDtcbiAgICBpZiAobiQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuLnZhbHVlO1xuICAgIH1cbiAgICBfbiA9IG4kMTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1heGltdW0obikge1xuICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIENhbWxfb3B0aW9uLnNvbWUobWF4MEF1eChuKSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIG1heFVuZGVmaW5lZChuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWF4MEF1eChuKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWluQXV4V2l0aFJlZihuLCB2KSB7XG4gIHZhciBrbiA9IG4udmFsdWU7XG4gIHZhciBsbiA9IG4ubGVmdDtcbiAgdmFyIHJuID0gbi5yaWdodDtcbiAgaWYgKGxuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYmFsKHJlbW92ZU1pbkF1eFdpdGhSZWYobG4sIHYpLCBrbiwgcm4pO1xuICB9IGVsc2Uge1xuICAgIHYuY29udGVudHMgPSBrbjtcbiAgICByZXR1cm4gcm47XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbXB0eShuKSB7XG4gIHJldHVybiBuID09PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHN0YWNrQWxsTGVmdChfdiwgX3MpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBzID0gX3M7XG4gICAgdmFyIHYgPSBfdjtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgX3MgPSAvKiA6OiAqL1tcbiAgICAgIHYsXG4gICAgICBzXG4gICAgXTtcbiAgICBfdiA9IHYubGVmdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZvckVhY2hVKF9uLCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGZvckVhY2hVKG4ubGVmdCwgZik7XG4gICAgZihuLnZhbHVlKTtcbiAgICBfbiA9IG4ucmlnaHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoKG4sIGYpIHtcbiAgcmV0dXJuIGZvckVhY2hVKG4sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZVUoX3MsIF9hY2N1LCBmKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBzID0gX3M7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIHZhciBrID0gcy52YWx1ZTtcbiAgICB2YXIgbCA9IHMubGVmdDtcbiAgICB2YXIgciA9IHMucmlnaHQ7XG4gICAgX2FjY3UgPSBmKHJlZHVjZVUobCwgYWNjdSwgZiksIGspO1xuICAgIF9zID0gcjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZShzLCBhY2N1LCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKHMsIGFjY3UsIEN1cnJ5Ll9fMihmKSk7XG59XG5cbmZ1bmN0aW9uIGV2ZXJ5VShfbiwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwKG4udmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghZXZlcnlVKG4ubGVmdCwgcCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgX24gPSBuLnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXZlcnkobiwgcCkge1xuICByZXR1cm4gZXZlcnlVKG4sIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWVVKF9uLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHAobi52YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc29tZVUobi5sZWZ0LCBwKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF9uID0gbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHNvbWUobiwgcCkge1xuICByZXR1cm4gc29tZVUobiwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gYWRkTWluRWxlbWVudChuLCB2KSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYmFsKGFkZE1pbkVsZW1lbnQobi5sZWZ0LCB2KSwgbi52YWx1ZSwgbi5yaWdodCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbih2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRNYXhFbGVtZW50KG4sIHYpIHtcbiAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBiYWwobi5sZWZ0LCBuLnZhbHVlLCBhZGRNYXhFbGVtZW50KG4ucmlnaHQsIHYpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc2luZ2xldG9uKHYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGpvaW5TaGFyZWQobG4sIHYsIHJuKSB7XG4gIGlmIChsbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFkZE1pbkVsZW1lbnQocm4sIHYpO1xuICB9XG4gIGlmIChybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFkZE1heEVsZW1lbnQobG4sIHYpO1xuICB9XG4gIHZhciBsaCA9IGxuLmhlaWdodDtcbiAgdmFyIHJoID0gcm4uaGVpZ2h0O1xuICBpZiAobGggPiAocmggKyAyIHwgMCkpIHtcbiAgICByZXR1cm4gYmFsKGxuLmxlZnQsIGxuLnZhbHVlLCBqb2luU2hhcmVkKGxuLnJpZ2h0LCB2LCBybikpO1xuICB9IGVsc2UgaWYgKHJoID4gKGxoICsgMiB8IDApKSB7XG4gICAgcmV0dXJuIGJhbChqb2luU2hhcmVkKGxuLCB2LCBybi5sZWZ0KSwgcm4udmFsdWUsIHJuLnJpZ2h0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlKGxuLCB2LCBybik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uY2F0U2hhcmVkKHQxLCB0Mikge1xuICBpZiAodDEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0MjtcbiAgfVxuICBpZiAodDIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0MTtcbiAgfVxuICB2YXIgdiA9IHtcbiAgICBjb250ZW50czogdDIudmFsdWVcbiAgfTtcbiAgdmFyIHQyciA9IHJlbW92ZU1pbkF1eFdpdGhSZWYodDIsIHYpO1xuICByZXR1cm4gam9pblNoYXJlZCh0MSwgdi5jb250ZW50cywgdDJyKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uU2hhcmVkVShuLCBwKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICB1bmRlZmluZWRcbiAgICAgICAgICBdO1xuICB9XG4gIHZhciB2YWx1ZSA9IG4udmFsdWU7XG4gIHZhciBtYXRjaCA9IHBhcnRpdGlvblNoYXJlZFUobi5sZWZ0LCBwKTtcbiAgdmFyIGxmID0gbWF0Y2hbMV07XG4gIHZhciBsdCA9IG1hdGNoWzBdO1xuICB2YXIgcHYgPSBwKHZhbHVlKTtcbiAgdmFyIG1hdGNoJDEgPSBwYXJ0aXRpb25TaGFyZWRVKG4ucmlnaHQsIHApO1xuICB2YXIgcmYgPSBtYXRjaCQxWzFdO1xuICB2YXIgcnQgPSBtYXRjaCQxWzBdO1xuICBpZiAocHYpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBqb2luU2hhcmVkKGx0LCB2YWx1ZSwgcnQpLFxuICAgICAgICAgICAgY29uY2F0U2hhcmVkKGxmLCByZilcbiAgICAgICAgICBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGNvbmNhdFNoYXJlZChsdCwgcnQpLFxuICAgICAgICAgICAgam9pblNoYXJlZChsZiwgdmFsdWUsIHJmKVxuICAgICAgICAgIF07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uU2hhcmVkKG4sIHApIHtcbiAgcmV0dXJuIHBhcnRpdGlvblNoYXJlZFUobiwgQ3VycnkuX18xKHApKTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTm9kZShuKSB7XG4gIHZhciBsID0gbi5sZWZ0O1xuICB2YXIgciA9IG4ucmlnaHQ7XG4gIHZhciBzaXplTCA9IGwgIT09IHVuZGVmaW5lZCA/IGxlbmd0aE5vZGUobCkgOiAwO1xuICB2YXIgc2l6ZVIgPSByICE9PSB1bmRlZmluZWQgPyBsZW5ndGhOb2RlKHIpIDogMDtcbiAgcmV0dXJuICgxICsgc2l6ZUwgfCAwKSArIHNpemVSIHwgMDtcbn1cblxuZnVuY3Rpb24gc2l6ZShuKSB7XG4gIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbGVuZ3RoTm9kZShuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b0xpc3RBdXgoX24sIF9hY2N1KSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjdSA9IF9hY2N1O1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGFjY3U7XG4gICAgfVxuICAgIF9hY2N1ID0gLyogOjogKi9bXG4gICAgICBuLnZhbHVlLFxuICAgICAgdG9MaXN0QXV4KG4ucmlnaHQsIGFjY3UpXG4gICAgXTtcbiAgICBfbiA9IG4ubGVmdDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvTGlzdChzKSB7XG4gIHJldHVybiB0b0xpc3RBdXgocywgLyogW10gKi8wKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChfdikge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHYgPSBfdjtcbiAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgbCA9IHYubGVmdDtcbiAgICB2YXIgciA9IHYucmlnaHQ7XG4gICAgdmFyIGRpZmYgPSB0cmVlSGVpZ2h0KGwpIC0gdHJlZUhlaWdodChyKSB8IDA7XG4gICAgaWYgKCEoZGlmZiA8PSAyICYmIGRpZmYgPj0gLTIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIFxcXCJiZWx0X2ludGVybmFsQVZMc2V0Lm1sXFxcIiwgbGluZSAzMDAsIGNoYXJhY3RlcnMgNi0xMlwiKTtcbiAgICB9XG4gICAgY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChsKTtcbiAgICBfdiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXkoX24sIF9pLCBhcnIpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHIgPSBuLnJpZ2h0O1xuICAgIHZhciBuZXh0ID0gbCAhPT0gdW5kZWZpbmVkID8gZmlsbEFycmF5KGwsIGksIGFycikgOiBpO1xuICAgIGFycltuZXh0XSA9IHY7XG4gICAgdmFyIHJuZXh0ID0gbmV4dCArIDEgfCAwO1xuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBybmV4dDtcbiAgICB9XG4gICAgX2kgPSBybmV4dDtcbiAgICBfbiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXlXaXRoUGFydGl0aW9uKF9uLCBjdXJzb3IsIGFyciwgcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGwgPSBuLmxlZnQ7XG4gICAgdmFyIHIgPSBuLnJpZ2h0O1xuICAgIGlmIChsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZpbGxBcnJheVdpdGhQYXJ0aXRpb24obCwgY3Vyc29yLCBhcnIsIHApO1xuICAgIH1cbiAgICBpZiAocCh2KSkge1xuICAgICAgdmFyIGMgPSBjdXJzb3IuZm9yd2FyZDtcbiAgICAgIGFycltjXSA9IHY7XG4gICAgICBjdXJzb3IuZm9yd2FyZCA9IGMgKyAxIHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGMkMSA9IGN1cnNvci5iYWNrd2FyZDtcbiAgICAgIGFycltjJDFdID0gdjtcbiAgICAgIGN1cnNvci5iYWNrd2FyZCA9IGMkMSAtIDEgfCAwO1xuICAgIH1cbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICBfbiA9IHI7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaWxsQXJyYXlXaXRoRmlsdGVyKF9uLCBfaSwgYXJyLCBwKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIHZhciBuID0gX247XG4gICAgdmFyIHYgPSBuLnZhbHVlO1xuICAgIHZhciBsID0gbi5sZWZ0O1xuICAgIHZhciByID0gbi5yaWdodDtcbiAgICB2YXIgbmV4dCA9IGwgIT09IHVuZGVmaW5lZCA/IGZpbGxBcnJheVdpdGhGaWx0ZXIobCwgaSwgYXJyLCBwKSA6IGk7XG4gICAgdmFyIHJuZXh0ID0gcCh2KSA/IChhcnJbbmV4dF0gPSB2LCBuZXh0ICsgMSB8IDApIDogbmV4dDtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcm5leHQ7XG4gICAgfVxuICAgIF9pID0gcm5leHQ7XG4gICAgX24gPSByO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShuKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgZmlsbEFycmF5KG4sIDAsIHYpO1xuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgb2ZmLCBsZW4pIHtcbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDAgOlxuICAgICAgICByZXR1cm4gO1xuICAgIGNhc2UgMSA6XG4gICAgICAgIHJldHVybiBzaW5nbGV0b24oYXJyW29mZl0pO1xuICAgIGNhc2UgMiA6XG4gICAgICAgIHZhciB4MCA9IGFycltvZmZdO1xuICAgICAgICB2YXIgeDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB4MSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgbGVmdDogc2luZ2xldG9uKHgwKSxcbiAgICAgICAgICAgICAgICByaWdodDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgIH07XG4gICAgY2FzZSAzIDpcbiAgICAgICAgdmFyIHgwJDEgPSBhcnJbb2ZmXTtcbiAgICAgICAgdmFyIHgxJDEgPSBhcnJbb2ZmIC0gMSB8IDBdO1xuICAgICAgICB2YXIgeDIgPSBhcnJbb2ZmIC0gMiB8IDBdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB4MSQxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMixcbiAgICAgICAgICAgICAgICBsZWZ0OiBzaW5nbGV0b24oeDAkMSksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHNpbmdsZXRvbih4MilcbiAgICAgICAgICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgdmFyIG5sID0gbGVuIC8gMiB8IDA7XG4gICAgICB2YXIgbGVmdCA9IGZyb21Tb3J0ZWRBcnJheVJldkF1eChhcnIsIG9mZiwgbmwpO1xuICAgICAgdmFyIG1pZCA9IGFycltvZmYgLSBubCB8IDBdO1xuICAgICAgdmFyIHJpZ2h0ID0gZnJvbVNvcnRlZEFycmF5UmV2QXV4KGFyciwgKG9mZiAtIG5sIHwgMCkgLSAxIHwgMCwgKGxlbiAtIG5sIHwgMCkgLSAxIHwgMCk7XG4gICAgICByZXR1cm4gY3JlYXRlKGxlZnQsIG1pZCwgcmlnaHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZyb21Tb3J0ZWRBcnJheUF1eChhcnIsIG9mZiwgbGVuKSB7XG4gIHN3aXRjaCAobGVuKSB7XG4gICAgY2FzZSAwIDpcbiAgICAgICAgcmV0dXJuIDtcbiAgICBjYXNlIDEgOlxuICAgICAgICByZXR1cm4gc2luZ2xldG9uKGFycltvZmZdKTtcbiAgICBjYXNlIDIgOlxuICAgICAgICB2YXIgeDAgPSBhcnJbb2ZmXTtcbiAgICAgICAgdmFyIHgxID0gYXJyW29mZiArIDEgfCAwXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogeDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHNpbmdsZXRvbih4MCksXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICB9O1xuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciB4MCQxID0gYXJyW29mZl07XG4gICAgICAgIHZhciB4MSQxID0gYXJyW29mZiArIDEgfCAwXTtcbiAgICAgICAgdmFyIHgyID0gYXJyW29mZiArIDIgfCAwXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogeDEkMSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgbGVmdDogc2luZ2xldG9uKHgwJDEpLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBzaW5nbGV0b24oeDIpXG4gICAgICAgICAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHZhciBubCA9IGxlbiAvIDIgfCAwO1xuICAgICAgdmFyIGxlZnQgPSBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCBvZmYsIG5sKTtcbiAgICAgIHZhciBtaWQgPSBhcnJbb2ZmICsgbmwgfCAwXTtcbiAgICAgIHZhciByaWdodCA9IGZyb21Tb3J0ZWRBcnJheUF1eChhcnIsIChvZmYgKyBubCB8IDApICsgMSB8IDAsIChsZW4gLSBubCB8IDApIC0gMSB8IDApO1xuICAgICAgcmV0dXJuIGNyZWF0ZShsZWZ0LCBtaWQsIHJpZ2h0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmcm9tU29ydGVkQXJyYXlVbnNhZmUoYXJyKSB7XG4gIHJldHVybiBmcm9tU29ydGVkQXJyYXlBdXgoYXJyLCAwLCBhcnIubGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24ga2VlcFNoYXJlZFUobiwgcCkge1xuICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgdiA9IG4udmFsdWU7XG4gIHZhciBsID0gbi5sZWZ0O1xuICB2YXIgciA9IG4ucmlnaHQ7XG4gIHZhciBuZXdMID0ga2VlcFNoYXJlZFUobCwgcCk7XG4gIHZhciBwdiA9IHAodik7XG4gIHZhciBuZXdSID0ga2VlcFNoYXJlZFUociwgcCk7XG4gIGlmIChwdikge1xuICAgIGlmIChsID09PSBuZXdMICYmIHIgPT09IG5ld1IpIHtcbiAgICAgIHJldHVybiBuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gam9pblNoYXJlZChuZXdMLCB2LCBuZXdSKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbmNhdFNoYXJlZChuZXdMLCBuZXdSKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBrZWVwU2hhcmVkKG4sIHApIHtcbiAgcmV0dXJuIGtlZXBTaGFyZWRVKG4sIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBDb3B5VShuLCBwKSB7XG4gIGlmIChuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIHZhciBzaXplID0gbGVuZ3RoTm9kZShuKTtcbiAgdmFyIHYgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIHZhciBsYXN0ID0gZmlsbEFycmF5V2l0aEZpbHRlcihuLCAwLCB2LCBwKTtcbiAgcmV0dXJuIGZyb21Tb3J0ZWRBcnJheUF1eCh2LCAwLCBsYXN0KTtcbn1cblxuZnVuY3Rpb24ga2VlcENvcHkobiwgcCkge1xuICByZXR1cm4ga2VlcENvcHlVKG4sIEN1cnJ5Ll9fMShwKSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbkNvcHlVKG4sIHApIHtcbiAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHVuZGVmaW5lZFxuICAgICAgICAgIF07XG4gIH1cbiAgdmFyIHNpemUgPSBsZW5ndGhOb2RlKG4pO1xuICB2YXIgdiA9IG5ldyBBcnJheShzaXplKTtcbiAgdmFyIGJhY2t3YXJkID0gc2l6ZSAtIDEgfCAwO1xuICB2YXIgY3Vyc29yID0ge1xuICAgIGZvcndhcmQ6IDAsXG4gICAgYmFja3dhcmQ6IGJhY2t3YXJkXG4gIH07XG4gIGZpbGxBcnJheVdpdGhQYXJ0aXRpb24obiwgY3Vyc29yLCB2LCBwKTtcbiAgdmFyIGZvcndhcmRMZW4gPSBjdXJzb3IuZm9yd2FyZDtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIGZyb21Tb3J0ZWRBcnJheUF1eCh2LCAwLCBmb3J3YXJkTGVuKSxcbiAgICAgICAgICBmcm9tU29ydGVkQXJyYXlSZXZBdXgodiwgYmFja3dhcmQsIHNpemUgLSBmb3J3YXJkTGVuIHwgMClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uQ29weShuLCBwKSB7XG4gIHJldHVybiBwYXJ0aXRpb25Db3B5VShuLCBDdXJyeS5fXzEocCkpO1xufVxuXG5mdW5jdGlvbiBoYXMoX3QsIHgsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHQgPSBfdDtcbiAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB2ID0gdC52YWx1ZTtcbiAgICB2YXIgYyA9IGNtcCh4LCB2KTtcbiAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIF90ID0gYyA8IDAgPyB0LmxlZnQgOiB0LnJpZ2h0O1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY21wKHMxLCBzMiwgY21wJDEpIHtcbiAgdmFyIGxlbjEgPSBzaXplKHMxKTtcbiAgdmFyIGxlbjIgPSBzaXplKHMyKTtcbiAgaWYgKGxlbjEgPT09IGxlbjIpIHtcbiAgICB2YXIgX2UxID0gc3RhY2tBbGxMZWZ0KHMxLCAvKiBbXSAqLzApO1xuICAgIHZhciBfZTIgPSBzdGFja0FsbExlZnQoczIsIC8qIFtdICovMCk7XG4gICAgd2hpbGUodHJ1ZSkge1xuICAgICAgdmFyIGUyID0gX2UyO1xuICAgICAgdmFyIGUxID0gX2UxO1xuICAgICAgaWYgKCFlMSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmICghZTIpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICB2YXIgaDIgPSBlMlswXTtcbiAgICAgIHZhciBoMSA9IGUxWzBdO1xuICAgICAgdmFyIGMgPSBjbXAkMShoMS52YWx1ZSwgaDIudmFsdWUpO1xuICAgICAgaWYgKGMgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgICBfZTIgPSBzdGFja0FsbExlZnQoaDIucmlnaHQsIGUyWzFdKTtcbiAgICAgIF9lMSA9IHN0YWNrQWxsTGVmdChoMS5yaWdodCwgZTFbMV0pO1xuICAgICAgY29udGludWUgO1xuICAgIH07XG4gIH0gZWxzZSBpZiAobGVuMSA8IGxlbjIpIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXEoczEsIHMyLCBjKSB7XG4gIHJldHVybiBjbXAoczEsIHMyLCBjKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gc3Vic2V0KF9zMSwgX3MyLCBjbXApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBzMiA9IF9zMjtcbiAgICB2YXIgczEgPSBfczE7XG4gICAgaWYgKHMxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgdjEgPSBzMS52YWx1ZTtcbiAgICB2YXIgbDEgPSBzMS5sZWZ0O1xuICAgIHZhciByMSA9IHMxLnJpZ2h0O1xuICAgIHZhciB2MiA9IHMyLnZhbHVlO1xuICAgIHZhciBsMiA9IHMyLmxlZnQ7XG4gICAgdmFyIHIyID0gczIucmlnaHQ7XG4gICAgdmFyIGMgPSBjbXAodjEsIHYyKTtcbiAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgaWYgKCFzdWJzZXQobDEsIGwyLCBjbXApKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIF9zMiA9IHIyO1xuICAgICAgX3MxID0gcjE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGlmIChjIDwgMCkge1xuICAgICAgaWYgKCFzdWJzZXQoY3JlYXRlKGwxLCB2MSwgdW5kZWZpbmVkKSwgbDIsIGNtcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgX3MxID0gcjE7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIGlmICghc3Vic2V0KGNyZWF0ZSh1bmRlZmluZWQsIHYxLCByMSksIHIyLCBjbXApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIF9zMSA9IGwxO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0KF9uLCB4LCBjbXApIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBuID0gX247XG4gICAgaWYgKG4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgdmFyIHYgPSBuLnZhbHVlO1xuICAgIHZhciBjID0gY21wKHgsIHYpO1xuICAgIGlmIChjID09PSAwKSB7XG4gICAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh2KTtcbiAgICB9XG4gICAgX24gPSBjIDwgMCA/IG4ubGVmdCA6IG4ucmlnaHQ7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRVbmRlZmluZWQoX24sIHgsIGNtcCkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIG4gPSBfbjtcbiAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH1cbiAgICB2YXIgdiA9IG4udmFsdWU7XG4gICAgdmFyIGMgPSBjbXAoeCwgdik7XG4gICAgaWYgKGMgPT09IDApIHtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEV4bihfbiwgeCwgY21wKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgbiA9IF9uO1xuICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB2ID0gbi52YWx1ZTtcbiAgICAgIHZhciBjID0gY21wKHgsIHYpO1xuICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgICBfbiA9IGMgPCAwID8gbi5sZWZ0IDogbi5yaWdodDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZ2V0RXhuMFwiKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRlV2l0aExlZnRDaGlsZChrMikge1xuICB2YXIgazEgPSBrMi5sZWZ0O1xuICBrMi5sZWZ0ID0gazEucmlnaHQ7XG4gIGsxLnJpZ2h0ID0gazI7XG4gIHZhciBobGsyID0gdHJlZUhlaWdodChrMi5sZWZ0KTtcbiAgdmFyIGhyazIgPSB0cmVlSGVpZ2h0KGsyLnJpZ2h0KTtcbiAgazIuaGVpZ2h0ID0gKFxuICAgIGhsazIgPiBocmsyID8gaGxrMiA6IGhyazJcbiAgKSArIDEgfCAwO1xuICB2YXIgaGxrMSA9IHRyZWVIZWlnaHQoazEubGVmdCk7XG4gIHZhciBoazIgPSBrMi5oZWlnaHQ7XG4gIGsxLmhlaWdodCA9IChcbiAgICBobGsxID4gaGsyID8gaGxrMSA6IGhrMlxuICApICsgMSB8IDA7XG4gIHJldHVybiBrMTtcbn1cblxuZnVuY3Rpb24gcm90YXRlV2l0aFJpZ2h0Q2hpbGQoazEpIHtcbiAgdmFyIGsyID0gazEucmlnaHQ7XG4gIGsxLnJpZ2h0ID0gazIubGVmdDtcbiAgazIubGVmdCA9IGsxO1xuICB2YXIgaGxrMSA9IHRyZWVIZWlnaHQoazEubGVmdCk7XG4gIHZhciBocmsxID0gdHJlZUhlaWdodChrMS5yaWdodCk7XG4gIGsxLmhlaWdodCA9IChcbiAgICBobGsxID4gaHJrMSA/IGhsazEgOiBocmsxXG4gICkgKyAxIHwgMDtcbiAgdmFyIGhyazIgPSB0cmVlSGVpZ2h0KGsyLnJpZ2h0KTtcbiAgdmFyIGhrMSA9IGsxLmhlaWdodDtcbiAgazIuaGVpZ2h0ID0gKFxuICAgIGhyazIgPiBoazEgPyBocmsyIDogaGsxXG4gICkgKyAxIHwgMDtcbiAgcmV0dXJuIGsyO1xufVxuXG5mdW5jdGlvbiBkb3VibGVXaXRoTGVmdENoaWxkKGszKSB7XG4gIHZhciB2ID0gcm90YXRlV2l0aFJpZ2h0Q2hpbGQoazMubGVmdCk7XG4gIGszLmxlZnQgPSB2O1xuICByZXR1cm4gcm90YXRlV2l0aExlZnRDaGlsZChrMyk7XG59XG5cbmZ1bmN0aW9uIGRvdWJsZVdpdGhSaWdodENoaWxkKGsyKSB7XG4gIHZhciB2ID0gcm90YXRlV2l0aExlZnRDaGlsZChrMi5yaWdodCk7XG4gIGsyLnJpZ2h0ID0gdjtcbiAgcmV0dXJuIHJvdGF0ZVdpdGhSaWdodENoaWxkKGsyKTtcbn1cblxuZnVuY3Rpb24gaGVpZ2h0VXBkYXRlTXV0YXRlKHQpIHtcbiAgdmFyIGhsdCA9IHRyZWVIZWlnaHQodC5sZWZ0KTtcbiAgdmFyIGhydCA9IHRyZWVIZWlnaHQodC5yaWdodCk7XG4gIHQuaGVpZ2h0ID0gKFxuICAgIGhsdCA+IGhydCA/IGhsdCA6IGhydFxuICApICsgMSB8IDA7XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBiYWxNdXRhdGUobnQpIHtcbiAgdmFyIGwgPSBudC5sZWZ0O1xuICB2YXIgciA9IG50LnJpZ2h0O1xuICB2YXIgaGwgPSB0cmVlSGVpZ2h0KGwpO1xuICB2YXIgaHIgPSB0cmVlSGVpZ2h0KHIpO1xuICBpZiAoaGwgPiAoMiArIGhyIHwgMCkpIHtcbiAgICB2YXIgbGwgPSBsLmxlZnQ7XG4gICAgdmFyIGxyID0gbC5yaWdodDtcbiAgICBpZiAoaGVpZ2h0R2UobGwsIGxyKSkge1xuICAgICAgcmV0dXJuIGhlaWdodFVwZGF0ZU11dGF0ZShyb3RhdGVXaXRoTGVmdENoaWxkKG50KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoZWlnaHRVcGRhdGVNdXRhdGUoZG91YmxlV2l0aExlZnRDaGlsZChudCkpO1xuICAgIH1cbiAgfVxuICBpZiAoaHIgPiAoMiArIGhsIHwgMCkpIHtcbiAgICB2YXIgcmwgPSByLmxlZnQ7XG4gICAgdmFyIHJyID0gci5yaWdodDtcbiAgICBpZiAoaGVpZ2h0R2UocnIsIHJsKSkge1xuICAgICAgcmV0dXJuIGhlaWdodFVwZGF0ZU11dGF0ZShyb3RhdGVXaXRoUmlnaHRDaGlsZChudCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaGVpZ2h0VXBkYXRlTXV0YXRlKGRvdWJsZVdpdGhSaWdodENoaWxkKG50KSk7XG4gICAgfVxuICB9XG4gIG50LmhlaWdodCA9IChcbiAgICBobCA+IGhyID8gaGwgOiBoclxuICApICsgMSB8IDA7XG4gIHJldHVybiBudDtcbn1cblxuZnVuY3Rpb24gYWRkTXV0YXRlKGNtcCwgdCwgeCkge1xuICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHNpbmdsZXRvbih4KTtcbiAgfVxuICB2YXIgayA9IHQudmFsdWU7XG4gIHZhciBjID0gY21wKHgsIGspO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIHJldHVybiB0O1xuICB9XG4gIHZhciBsID0gdC5sZWZ0O1xuICB2YXIgciA9IHQucmlnaHQ7XG4gIGlmIChjIDwgMCkge1xuICAgIHZhciBsbCA9IGFkZE11dGF0ZShjbXAsIGwsIHgpO1xuICAgIHQubGVmdCA9IGxsO1xuICB9IGVsc2Uge1xuICAgIHQucmlnaHQgPSBhZGRNdXRhdGUoY21wLCByLCB4KTtcbiAgfVxuICByZXR1cm4gYmFsTXV0YXRlKHQpO1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoeHMsIGNtcCkge1xuICB2YXIgbGVuID0geHMubGVuZ3RoO1xuICBpZiAobGVuID09PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICB2YXIgbmV4dCA9IEJlbHRfU29ydEFycmF5LnN0cmljdGx5U29ydGVkTGVuZ3RoVSh4cywgKGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgcmV0dXJuIGNtcCh4LCB5KSA8IDA7XG4gICAgICAgIH0pKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKG5leHQgPj0gMCkge1xuICAgIHJlc3VsdCA9IGZyb21Tb3J0ZWRBcnJheUF1eCh4cywgMCwgbmV4dCk7XG4gIH0gZWxzZSB7XG4gICAgbmV4dCA9IC1uZXh0IHwgMDtcbiAgICByZXN1bHQgPSBmcm9tU29ydGVkQXJyYXlSZXZBdXgoeHMsIG5leHQgLSAxIHwgMCwgbmV4dCk7XG4gIH1cbiAgZm9yKHZhciBpID0gbmV4dDsgaSA8IGxlbjsgKytpKXtcbiAgICByZXN1bHQgPSBhZGRNdXRhdGUoY21wLCByZXN1bHQsIHhzW2ldKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZW1vdmVNaW5BdXhXaXRoUm9vdE11dGF0ZShudCwgbikge1xuICB2YXIgbG4gPSBuLmxlZnQ7XG4gIHZhciBybiA9IG4ucmlnaHQ7XG4gIGlmIChsbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbi5sZWZ0ID0gcmVtb3ZlTWluQXV4V2l0aFJvb3RNdXRhdGUobnQsIGxuKTtcbiAgICByZXR1cm4gYmFsTXV0YXRlKG4pO1xuICB9IGVsc2Uge1xuICAgIG50LnZhbHVlID0gbi52YWx1ZTtcbiAgICByZXR1cm4gcm47XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgY29weSAsXG4gIGNyZWF0ZSAsXG4gIGJhbCAsXG4gIHNpbmdsZXRvbiAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgcmVtb3ZlTWluQXV4V2l0aFJlZiAsXG4gIGlzRW1wdHkgLFxuICBzdGFja0FsbExlZnQgLFxuICBmb3JFYWNoVSAsXG4gIGZvckVhY2ggLFxuICByZWR1Y2VVICxcbiAgcmVkdWNlICxcbiAgZXZlcnlVICxcbiAgZXZlcnkgLFxuICBzb21lVSAsXG4gIHNvbWUgLFxuICBqb2luU2hhcmVkICxcbiAgY29uY2F0U2hhcmVkICxcbiAga2VlcFNoYXJlZFUgLFxuICBrZWVwU2hhcmVkICxcbiAga2VlcENvcHlVICxcbiAga2VlcENvcHkgLFxuICBwYXJ0aXRpb25TaGFyZWRVICxcbiAgcGFydGl0aW9uU2hhcmVkICxcbiAgcGFydGl0aW9uQ29weVUgLFxuICBwYXJ0aXRpb25Db3B5ICxcbiAgbGVuZ3RoTm9kZSAsXG4gIHNpemUgLFxuICB0b0xpc3QgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgZmlsbEFycmF5ICxcbiAgdG9BcnJheSAsXG4gIGZyb21Tb3J0ZWRBcnJheUF1eCAsXG4gIGZyb21Tb3J0ZWRBcnJheVJldkF1eCAsXG4gIGZyb21Tb3J0ZWRBcnJheVVuc2FmZSAsXG4gIGhhcyAsXG4gIGNtcCAsXG4gIGVxICxcbiAgc3Vic2V0ICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0RXhuICxcbiAgZnJvbUFycmF5ICxcbiAgYWRkTXV0YXRlICxcbiAgYmFsTXV0YXRlICxcbiAgcmVtb3ZlTWluQXV4V2l0aFJvb3RNdXRhdGUgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmVsdF9pbnRlcm5hbEFWTHNldCBmcm9tIFwiLi9iZWx0X2ludGVybmFsQVZMc2V0LmpzXCI7XG5cbmZ1bmN0aW9uIGFkZCh0LCB4LCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LnNpbmdsZXRvbih4KTtcbiAgfVxuICB2YXIgayA9IHQudmFsdWU7XG4gIHZhciBjID0gY21wKHgsIGspO1xuICBpZiAoYyA9PT0gMCkge1xuICAgIHJldHVybiB0O1xuICB9XG4gIHZhciBsID0gdC5sZWZ0O1xuICB2YXIgciA9IHQucmlnaHQ7XG4gIGlmIChjIDwgMCkge1xuICAgIHZhciBsbCA9IGFkZChsLCB4LCBjbXApO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LmJhbChsbCwgaywgcik7XG4gICAgfVxuICB9XG4gIHZhciByciA9IGFkZChyLCB4LCBjbXApO1xuICBpZiAocnIgPT09IHIpIHtcbiAgICByZXR1cm4gdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5iYWwobCwgaywgcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSh0LCB4LCBjbXApIHtcbiAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB0O1xuICB9XG4gIHZhciB2ID0gdC52YWx1ZTtcbiAgdmFyIGwgPSB0LmxlZnQ7XG4gIHZhciByID0gdC5yaWdodDtcbiAgdmFyIGMgPSBjbXAoeCwgdik7XG4gIGlmIChjID09PSAwKSB7XG4gICAgaWYgKGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICB2YXIgdiQxID0ge1xuICAgICAgY29udGVudHM6IHIudmFsdWVcbiAgICB9O1xuICAgIHZhciByJDEgPSBCZWx0X2ludGVybmFsQVZMc2V0LnJlbW92ZU1pbkF1eFdpdGhSZWYociwgdiQxKTtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5iYWwobCwgdiQxLmNvbnRlbnRzLCByJDEpO1xuICB9XG4gIGlmIChjIDwgMCkge1xuICAgIHZhciBsbCA9IHJlbW92ZShsLCB4LCBjbXApO1xuICAgIGlmIChsbCA9PT0gbCkge1xuICAgICAgcmV0dXJuIHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LmJhbChsbCwgdiwgcik7XG4gICAgfVxuICB9XG4gIHZhciByciA9IHJlbW92ZShyLCB4LCBjbXApO1xuICBpZiAocnIgPT09IHIpIHtcbiAgICByZXR1cm4gdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5iYWwobCwgdiwgcnIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueShoLCBhcnIsIGNtcCkge1xuICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgdmFyIHYgPSBoO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpe1xuICAgIHZhciBrZXkgPSBhcnJbaV07XG4gICAgdiA9IGFkZCh2LCBrZXksIGNtcCk7XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hbnkoaCwgYXJyLCBjbXApIHtcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIHZhciB2ID0gaDtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKXtcbiAgICB2YXIga2V5ID0gYXJyW2ldO1xuICAgIHYgPSByZW1vdmUodiwga2V5LCBjbXApO1xuICB9XG4gIHJldHVybiB2O1xufVxuXG5mdW5jdGlvbiBzcGxpdEF1eE5vUGl2b3QoY21wLCBuLCB4KSB7XG4gIHZhciB2ID0gbi52YWx1ZTtcbiAgdmFyIGwgPSBuLmxlZnQ7XG4gIHZhciByID0gbi5yaWdodDtcbiAgdmFyIGMgPSBjbXAoeCwgdik7XG4gIGlmIChjID09PSAwKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbCxcbiAgICAgICAgICAgIHJcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChjIDwgMCkge1xuICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBuXG4gICAgICAgICAgICBdO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBzcGxpdEF1eE5vUGl2b3QoY21wLCBsLCB4KTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChtYXRjaFsxXSwgdiwgcilcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHNwbGl0QXV4Tm9QaXZvdChjbXAsIHIsIHgpO1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgQmVsdF9pbnRlcm5hbEFWTHNldC5qb2luU2hhcmVkKGwsIHYsIG1hdGNoJDFbMF0pLFxuICAgICAgICAgIG1hdGNoJDFbMV1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc3BsaXRBdXhQaXZvdChjbXAsIG4sIHgsIHByZXMpIHtcbiAgdmFyIHYgPSBuLnZhbHVlO1xuICB2YXIgbCA9IG4ubGVmdDtcbiAgdmFyIHIgPSBuLnJpZ2h0O1xuICB2YXIgYyA9IGNtcCh4LCB2KTtcbiAgaWYgKGMgPT09IDApIHtcbiAgICBwcmVzLmNvbnRlbnRzID0gdHJ1ZTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBsLFxuICAgICAgICAgICAgclxuICAgICAgICAgIF07XG4gIH1cbiAgaWYgKGMgPCAwKSB7XG4gICAgaWYgKGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAgIG5cbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IHNwbGl0QXV4UGl2b3QoY21wLCBsLCB4LCBwcmVzKTtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBtYXRjaFswXSxcbiAgICAgICAgICAgIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChtYXRjaFsxXSwgdiwgcilcbiAgICAgICAgICBdO1xuICB9XG4gIGlmIChyID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBuLFxuICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgXTtcbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHNwbGl0QXV4UGl2b3QoY21wLCByLCB4LCBwcmVzKTtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChsLCB2LCBtYXRjaCQxWzBdKSxcbiAgICAgICAgICBtYXRjaCQxWzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHQsIHgsIGNtcCkge1xuICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgdW5kZWZpbmVkXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICBdO1xuICB9XG4gIHZhciBwcmVzID0ge1xuICAgIGNvbnRlbnRzOiBmYWxzZVxuICB9O1xuICB2YXIgdiA9IHNwbGl0QXV4UGl2b3QoY21wLCB0LCB4LCBwcmVzKTtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHYsXG4gICAgICAgICAgcHJlcy5jb250ZW50c1xuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB1bmlvbihzMSwgczIsIGNtcCkge1xuICBpZiAoczEgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzMjtcbiAgfVxuICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBzMTtcbiAgfVxuICB2YXIgaDEgPSBzMS5oZWlnaHQ7XG4gIHZhciBoMiA9IHMyLmhlaWdodDtcbiAgaWYgKGgxID49IGgyKSB7XG4gICAgaWYgKGgyID09PSAxKSB7XG4gICAgICByZXR1cm4gYWRkKHMxLCBzMi52YWx1ZSwgY21wKTtcbiAgICB9XG4gICAgdmFyIHYxID0gczEudmFsdWU7XG4gICAgdmFyIGwxID0gczEubGVmdDtcbiAgICB2YXIgcjEgPSBzMS5yaWdodDtcbiAgICB2YXIgbWF0Y2ggPSBzcGxpdEF1eE5vUGl2b3QoY21wLCBzMiwgdjEpO1xuICAgIHJldHVybiBCZWx0X2ludGVybmFsQVZMc2V0LmpvaW5TaGFyZWQodW5pb24obDEsIG1hdGNoWzBdLCBjbXApLCB2MSwgdW5pb24ocjEsIG1hdGNoWzFdLCBjbXApKTtcbiAgfVxuICBpZiAoaDEgPT09IDEpIHtcbiAgICByZXR1cm4gYWRkKHMyLCBzMS52YWx1ZSwgY21wKTtcbiAgfVxuICB2YXIgdjIgPSBzMi52YWx1ZTtcbiAgdmFyIGwyID0gczIubGVmdDtcbiAgdmFyIHIyID0gczIucmlnaHQ7XG4gIHZhciBtYXRjaCQxID0gc3BsaXRBdXhOb1Bpdm90KGNtcCwgczEsIHYyKTtcbiAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZCh1bmlvbihtYXRjaCQxWzBdLCBsMiwgY21wKSwgdjIsIHVuaW9uKG1hdGNoJDFbMV0sIHIyLCBjbXApKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0KHMxLCBzMiwgY21wKSB7XG4gIGlmIChzMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBpZiAoczIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgdmFyIHYxID0gczEudmFsdWU7XG4gIHZhciBsMSA9IHMxLmxlZnQ7XG4gIHZhciByMSA9IHMxLnJpZ2h0O1xuICB2YXIgcHJlcyA9IHtcbiAgICBjb250ZW50czogZmFsc2VcbiAgfTtcbiAgdmFyIG1hdGNoID0gc3BsaXRBdXhQaXZvdChjbXAsIHMyLCB2MSwgcHJlcyk7XG4gIHZhciBsbCA9IGludGVyc2VjdChsMSwgbWF0Y2hbMF0sIGNtcCk7XG4gIHZhciByciA9IGludGVyc2VjdChyMSwgbWF0Y2hbMV0sIGNtcCk7XG4gIGlmIChwcmVzLmNvbnRlbnRzKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChsbCwgdjEsIHJyKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9pbnRlcm5hbEFWTHNldC5jb25jYXRTaGFyZWQobGwsIHJyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWZmKHMxLCBzMiwgY21wKSB7XG4gIGlmIChzMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHMxO1xuICB9XG4gIGlmIChzMiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHMxO1xuICB9XG4gIHZhciB2MSA9IHMxLnZhbHVlO1xuICB2YXIgbDEgPSBzMS5sZWZ0O1xuICB2YXIgcjEgPSBzMS5yaWdodDtcbiAgdmFyIHByZXMgPSB7XG4gICAgY29udGVudHM6IGZhbHNlXG4gIH07XG4gIHZhciBtYXRjaCA9IHNwbGl0QXV4UGl2b3QoY21wLCBzMiwgdjEsIHByZXMpO1xuICB2YXIgbGwgPSBkaWZmKGwxLCBtYXRjaFswXSwgY21wKTtcbiAgdmFyIHJyID0gZGlmZihyMSwgbWF0Y2hbMV0sIGNtcCk7XG4gIGlmIChwcmVzLmNvbnRlbnRzKSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuY29uY2F0U2hhcmVkKGxsLCBycik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfaW50ZXJuYWxBVkxzZXQuam9pblNoYXJlZChsbCwgdjEsIHJyKTtcbiAgfVxufVxuXG52YXIgZW1wdHk7XG5cbnZhciBmcm9tQXJyYXkgPSBCZWx0X2ludGVybmFsQVZMc2V0LmZyb21BcnJheTtcblxudmFyIGZyb21Tb3J0ZWRBcnJheVVuc2FmZSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuZnJvbVNvcnRlZEFycmF5VW5zYWZlO1xuXG52YXIgaXNFbXB0eSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuaXNFbXB0eTtcblxudmFyIGhhcyA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuaGFzO1xuXG52YXIgc3Vic2V0ID0gQmVsdF9pbnRlcm5hbEFWTHNldC5zdWJzZXQ7XG5cbnZhciBjbXAgPSBCZWx0X2ludGVybmFsQVZMc2V0LmNtcDtcblxudmFyIGVxID0gQmVsdF9pbnRlcm5hbEFWTHNldC5lcTtcblxudmFyIGZvckVhY2hVID0gQmVsdF9pbnRlcm5hbEFWTHNldC5mb3JFYWNoVTtcblxudmFyIGZvckVhY2ggPSBCZWx0X2ludGVybmFsQVZMc2V0LmZvckVhY2g7XG5cbnZhciByZWR1Y2VVID0gQmVsdF9pbnRlcm5hbEFWTHNldC5yZWR1Y2VVO1xuXG52YXIgcmVkdWNlID0gQmVsdF9pbnRlcm5hbEFWTHNldC5yZWR1Y2U7XG5cbnZhciBldmVyeVUgPSBCZWx0X2ludGVybmFsQVZMc2V0LmV2ZXJ5VTtcblxudmFyIGV2ZXJ5ID0gQmVsdF9pbnRlcm5hbEFWTHNldC5ldmVyeTtcblxudmFyIHNvbWVVID0gQmVsdF9pbnRlcm5hbEFWTHNldC5zb21lVTtcblxudmFyIHNvbWUgPSBCZWx0X2ludGVybmFsQVZMc2V0LnNvbWU7XG5cbnZhciBrZWVwVSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQua2VlcFNoYXJlZFU7XG5cbnZhciBrZWVwID0gQmVsdF9pbnRlcm5hbEFWTHNldC5rZWVwU2hhcmVkO1xuXG52YXIgcGFydGl0aW9uVSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQucGFydGl0aW9uU2hhcmVkVTtcblxudmFyIHBhcnRpdGlvbiA9IEJlbHRfaW50ZXJuYWxBVkxzZXQucGFydGl0aW9uU2hhcmVkO1xuXG52YXIgc2l6ZSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuc2l6ZTtcblxudmFyIHRvTGlzdCA9IEJlbHRfaW50ZXJuYWxBVkxzZXQudG9MaXN0O1xuXG52YXIgdG9BcnJheSA9IEJlbHRfaW50ZXJuYWxBVkxzZXQudG9BcnJheTtcblxudmFyIG1pbmltdW0gPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1pbmltdW07XG5cbnZhciBtaW5VbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1pblVuZGVmaW5lZDtcblxudmFyIG1heGltdW0gPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1heGltdW07XG5cbnZhciBtYXhVbmRlZmluZWQgPSBCZWx0X2ludGVybmFsQVZMc2V0Lm1heFVuZGVmaW5lZDtcblxudmFyIGdldCA9IEJlbHRfaW50ZXJuYWxBVkxzZXQuZ2V0O1xuXG52YXIgZ2V0VW5kZWZpbmVkID0gQmVsdF9pbnRlcm5hbEFWTHNldC5nZXRVbmRlZmluZWQ7XG5cbnZhciBnZXRFeG4gPSBCZWx0X2ludGVybmFsQVZMc2V0LmdldEV4bjtcblxudmFyIGNoZWNrSW52YXJpYW50SW50ZXJuYWwgPSBCZWx0X2ludGVybmFsQVZMc2V0LmNoZWNrSW52YXJpYW50SW50ZXJuYWw7XG5cbmV4cG9ydCB7XG4gIGVtcHR5ICxcbiAgZnJvbUFycmF5ICxcbiAgZnJvbVNvcnRlZEFycmF5VW5zYWZlICxcbiAgaXNFbXB0eSAsXG4gIGhhcyAsXG4gIGFkZCAsXG4gIG1lcmdlTWFueSAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICB1bmlvbiAsXG4gIGludGVyc2VjdCAsXG4gIGRpZmYgLFxuICBzdWJzZXQgLFxuICBjbXAgLFxuICBlcSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIHNvbWVVICxcbiAgc29tZSAsXG4gIGtlZXBVICxcbiAga2VlcCAsXG4gIHBhcnRpdGlvblUgLFxuICBwYXJ0aXRpb24gLFxuICBzaXplICxcbiAgdG9MaXN0ICxcbiAgdG9BcnJheSAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0RXhuICxcbiAgc3BsaXQgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X1NldERpY3QgZnJvbSBcIi4vYmVsdF9TZXREaWN0LmpzXCI7XG5cbmZ1bmN0aW9uIGZyb21BcnJheShkYXRhLCBpZCkge1xuICB2YXIgY21wID0gaWQuY21wO1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfU2V0RGljdC5mcm9tQXJyYXkoZGF0YSwgY21wKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiByZW1vdmUobSwgZSkge1xuICB2YXIgZGF0YSA9IG0uZGF0YTtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbmV3RGF0YSA9IEJlbHRfU2V0RGljdC5yZW1vdmUoZGF0YSwgZSwgY21wKTtcbiAgaWYgKG5ld0RhdGEgPT09IGRhdGEpIHtcbiAgICByZXR1cm4gbTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBuZXdEYXRhXG4gICAgICAgICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGQobSwgZSkge1xuICB2YXIgZGF0YSA9IG0uZGF0YTtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICB2YXIgbmV3RGF0YSA9IEJlbHRfU2V0RGljdC5hZGQoZGF0YSwgZSwgY21wKTtcbiAgaWYgKG5ld0RhdGEgPT09IGRhdGEpIHtcbiAgICByZXR1cm4gbTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICBkYXRhOiBuZXdEYXRhXG4gICAgICAgICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZU1hbnkobSwgZSkge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9TZXREaWN0Lm1lcmdlTWFueShtLmRhdGEsIGUsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlTWFueShtLCBlKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X1NldERpY3QucmVtb3ZlTWFueShtLmRhdGEsIGUsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gdW5pb24obSwgbikge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9TZXREaWN0LnVuaW9uKG0uZGF0YSwgbi5kYXRhLCBjbXApXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdChtLCBuKSB7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X1NldERpY3QuaW50ZXJzZWN0KG0uZGF0YSwgbi5kYXRhLCBjbXApXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGRpZmYobSwgbikge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgZGF0YTogQmVsdF9TZXREaWN0LmRpZmYobS5kYXRhLCBuLmRhdGEsIGNtcClcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gc3Vic2V0KG0sIG4pIHtcbiAgdmFyIGNtcCA9IG0uY21wO1xuICByZXR1cm4gQmVsdF9TZXREaWN0LnN1YnNldChtLmRhdGEsIG4uZGF0YSwgY21wKTtcbn1cblxuZnVuY3Rpb24gc3BsaXQobSwgZSkge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHZhciBtYXRjaCA9IEJlbHRfU2V0RGljdC5zcGxpdChtLmRhdGEsIGUsIGNtcCk7XG4gIHZhciBtYXRjaCQxID0gbWF0Y2hbMF07XG4gIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY21wOiBjbXAsXG4gICAgICAgICAgICAgIGRhdGE6IG1hdGNoJDFbMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgICBkYXRhOiBtYXRjaCQxWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBtYXRjaFsxXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYWtlKGlkKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBpZC5jbXAsXG4gICAgICAgICAgZGF0YTogdW5kZWZpbmVkXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkobSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LmlzRW1wdHkobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gY21wKG0sIG4pIHtcbiAgdmFyIGNtcCQxID0gbS5jbXA7XG4gIHJldHVybiBCZWx0X1NldERpY3QuY21wKG0uZGF0YSwgbi5kYXRhLCBjbXAkMSk7XG59XG5cbmZ1bmN0aW9uIGVxKG0sIG4pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5lcShtLmRhdGEsIG4uZGF0YSwgbS5jbXApO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoVShtLCBmKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuZm9yRWFjaFUobS5kYXRhLCBmKTtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChtLCBmKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuZm9yRWFjaFUobS5kYXRhLCBDdXJyeS5fXzEoZikpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VVKG0sIGFjYywgZikge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LnJlZHVjZVUobS5kYXRhLCBhY2MsIGYpO1xufVxuXG5mdW5jdGlvbiByZWR1Y2UobSwgYWNjLCBmKSB7XG4gIHJldHVybiByZWR1Y2VVKG0sIGFjYywgQ3VycnkuX18yKGYpKTtcbn1cblxuZnVuY3Rpb24gZXZlcnlVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5ldmVyeVUobS5kYXRhLCBmKTtcbn1cblxuZnVuY3Rpb24gZXZlcnkobSwgZikge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LmV2ZXJ5VShtLmRhdGEsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHNvbWVVKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5zb21lVShtLmRhdGEsIGYpO1xufVxuXG5mdW5jdGlvbiBzb21lKG0sIGYpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5zb21lVShtLmRhdGEsIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIGtlZXBVKG0sIGYpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IG0uY21wLFxuICAgICAgICAgIGRhdGE6IEJlbHRfU2V0RGljdC5rZWVwVShtLmRhdGEsIGYpXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGtlZXAobSwgZikge1xuICByZXR1cm4ga2VlcFUobSwgQ3VycnkuX18xKGYpKTtcbn1cblxuZnVuY3Rpb24gcGFydGl0aW9uVShtLCBmKSB7XG4gIHZhciBtYXRjaCA9IEJlbHRfU2V0RGljdC5wYXJ0aXRpb25VKG0uZGF0YSwgZik7XG4gIHZhciBjbXAgPSBtLmNtcDtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgZGF0YTogbWF0Y2hbMF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNtcDogY21wLFxuICAgICAgICAgICAgZGF0YTogbWF0Y2hbMV1cbiAgICAgICAgICB9XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihtLCBmKSB7XG4gIHJldHVybiBwYXJ0aXRpb25VKG0sIEN1cnJ5Ll9fMShmKSk7XG59XG5cbmZ1bmN0aW9uIHNpemUobSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LnNpemUobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gdG9MaXN0KG0pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC50b0xpc3QobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gdG9BcnJheShtKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QudG9BcnJheShtLmRhdGEpO1xufVxuXG5mdW5jdGlvbiBtaW5pbXVtKG0pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5taW5pbXVtKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIG1pblVuZGVmaW5lZChtKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QubWluVW5kZWZpbmVkKG0uZGF0YSk7XG59XG5cbmZ1bmN0aW9uIG1heGltdW0obSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0Lm1heGltdW0obS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gbWF4VW5kZWZpbmVkKG0pIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5tYXhVbmRlZmluZWQobS5kYXRhKTtcbn1cblxuZnVuY3Rpb24gZ2V0KG0sIGUpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5nZXQobS5kYXRhLCBlLCBtLmNtcCk7XG59XG5cbmZ1bmN0aW9uIGdldFVuZGVmaW5lZChtLCBlKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuZ2V0VW5kZWZpbmVkKG0uZGF0YSwgZSwgbS5jbXApO1xufVxuXG5mdW5jdGlvbiBnZXRFeG4obSwgZSkge1xuICByZXR1cm4gQmVsdF9TZXREaWN0LmdldEV4bihtLmRhdGEsIGUsIG0uY21wKTtcbn1cblxuZnVuY3Rpb24gaGFzKG0sIGUpIHtcbiAgcmV0dXJuIEJlbHRfU2V0RGljdC5oYXMobS5kYXRhLCBlLCBtLmNtcCk7XG59XG5cbmZ1bmN0aW9uIGZyb21Tb3J0ZWRBcnJheVVuc2FmZSh4cywgaWQpIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjbXA6IGlkLmNtcCxcbiAgICAgICAgICBkYXRhOiBCZWx0X1NldERpY3QuZnJvbVNvcnRlZEFycmF5VW5zYWZlKHhzKVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXREYXRhKG0pIHtcbiAgcmV0dXJuIG0uZGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0SWQobSkge1xuICB2YXIgY21wID0gbS5jbXA7XG4gIHJldHVybiB7XG4gICAgICAgICAgY21wOiBjbXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gcGFja0lkRGF0YShpZCwgZGF0YSkge1xuICByZXR1cm4ge1xuICAgICAgICAgIGNtcDogaWQuY21wLFxuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChkKSB7XG4gIHJldHVybiBCZWx0X1NldERpY3QuY2hlY2tJbnZhcmlhbnRJbnRlcm5hbChkLmRhdGEpO1xufVxuXG52YXIgSW50O1xuXG52YXIgJCRTdHJpbmc7XG5cbnZhciBEaWN0O1xuXG5leHBvcnQge1xuICBJbnQgLFxuICAkJFN0cmluZyAsXG4gIERpY3QgLFxuICBtYWtlICxcbiAgZnJvbUFycmF5ICxcbiAgZnJvbVNvcnRlZEFycmF5VW5zYWZlICxcbiAgaXNFbXB0eSAsXG4gIGhhcyAsXG4gIGFkZCAsXG4gIG1lcmdlTWFueSAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICB1bmlvbiAsXG4gIGludGVyc2VjdCAsXG4gIGRpZmYgLFxuICBzdWJzZXQgLFxuICBjbXAgLFxuICBlcSAsXG4gIGZvckVhY2hVICxcbiAgZm9yRWFjaCAsXG4gIHJlZHVjZVUgLFxuICByZWR1Y2UgLFxuICBldmVyeVUgLFxuICBldmVyeSAsXG4gIHNvbWVVICxcbiAgc29tZSAsXG4gIGtlZXBVICxcbiAga2VlcCAsXG4gIHBhcnRpdGlvblUgLFxuICBwYXJ0aXRpb24gLFxuICBzaXplICxcbiAgdG9BcnJheSAsXG4gIHRvTGlzdCAsXG4gIG1pbmltdW0gLFxuICBtaW5VbmRlZmluZWQgLFxuICBtYXhpbXVtICxcbiAgbWF4VW5kZWZpbmVkICxcbiAgZ2V0ICxcbiAgZ2V0VW5kZWZpbmVkICxcbiAgZ2V0RXhuICxcbiAgc3BsaXQgLFxuICBjaGVja0ludmFyaWFudEludGVybmFsICxcbiAgZ2V0RGF0YSAsXG4gIGdldElkICxcbiAgcGFja0lkRGF0YSAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyAkJEFycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9JZCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0lkLmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X1NldCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X1NldC5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09yZGVyaW5nIGZyb20gXCIuL1JlbHVkZV9PcmRlcmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9CYXNlIGZyb20gXCIuL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanNcIjtcblxudmFyIGVtcHR5ID0gQmVsdF9TZXQubWFrZTtcblxuZnVuY3Rpb24gZnJvbUFycmF5KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gQmVsdF9TZXQuZnJvbUFycmF5KHZhbHVlLCBpZCk7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gQmVsdF9TZXQuZnJvbUFycmF5KEJlbHRfTGlzdC50b0FycmF5KHZhbHVlKSwgaWQpO1xufVxuXG5mdW5jdGlvbiBjb250YWlucyh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5oYXMoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGFkZCh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5hZGQoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFueSh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5tZXJnZU1hbnkoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSh2YWx1ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5yZW1vdmUoc2V0LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZU1hbnkodmFsdWUsIHNldCkge1xuICByZXR1cm4gQmVsdF9TZXQucmVtb3ZlTWFueShzZXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKHZhbHVlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmFkZChCZWx0X1NldC5yZW1vdmUoc2V0LCB2YWx1ZSksIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlKHZhbHVlLCBzZXQpIHtcbiAgaWYgKEJlbHRfU2V0LmhhcyhzZXQsIHZhbHVlKSkge1xuICAgIHJldHVybiBCZWx0X1NldC5yZW1vdmUoc2V0LCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfU2V0LmFkZChzZXQsIHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JFYWNoKGZuLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmZvckVhY2goc2V0LCBmbik7XG59XG5cbmZ1bmN0aW9uIGZvbGRMZWZ0KGZuLCBhY2MsIHNldCkge1xuICByZXR1cm4gQmVsdF9TZXQucmVkdWNlKHNldCwgYWNjLCBmbik7XG59XG5cbmZ1bmN0aW9uIGZvbGRSaWdodChmbiwgYWNjLCBzZXQpIHtcbiAgcmV0dXJuICQkQXJyYXkuZm9sZF9yaWdodChmbiwgQmVsdF9TZXQudG9BcnJheShzZXQpLCBhY2MpO1xufVxuXG5mdW5jdGlvbiBhbGwocHJlZGljYXRlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmV2ZXJ5KHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gYW55KHByZWRpY2F0ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5zb21lKHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5rZWVwKHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyTm90KHByZWRpY2F0ZSwgc2V0KSB7XG4gIHJldHVybiBCZWx0X1NldC5rZWVwKHNldCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFDdXJyeS5fMShwcmVkaWNhdGUsIHgpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihwcmVkaWNhdGUsIHNldCkge1xuICByZXR1cm4gQmVsdF9TZXQucGFydGl0aW9uKHNldCwgcHJlZGljYXRlKTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZhbHVlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LmdldChzZXQsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0T3JFbHNlKHZhbHVlLCAkJGRlZmF1bHQsIHNldCkge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yRWxzZSgkJGRlZmF1bHQsIEJlbHRfU2V0LmdldChzZXQsIHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIHNwbGl0KHZhbHVlLCBzZXQpIHtcbiAgcmV0dXJuIEJlbHRfU2V0LnNwbGl0KHNldCwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBXaXRoT3JkKE0pIHtcbiAgdmFyIGNtcCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihNLmNvbXBhcmUsIGEsIGIpKTtcbiAgfTtcbiAgdmFyIENvbXBhcmFibGUgPSBCZWx0X0lkLk1ha2VDb21wYXJhYmxlKHtcbiAgICAgICAgY21wOiBjbXBcbiAgICAgIH0pO1xuICB2YXIgZW1wdHkgPSBCZWx0X1NldC5tYWtlKENvbXBhcmFibGUpO1xuICB2YXIgZnJvbUFycmF5ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIEJlbHRfU2V0LmZyb21BcnJheShwYXJhbSwgQ29tcGFyYWJsZSk7XG4gIH07XG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBCZWx0X1NldC5mcm9tQXJyYXkoQmVsdF9MaXN0LnRvQXJyYXkocGFyYW0pLCBDb21wYXJhYmxlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBDb21wYXJhYmxlOiB7IH0sXG4gICAgICAgICAgZW1wdHk6IGVtcHR5LFxuICAgICAgICAgIGZyb21BcnJheTogZnJvbUFycmF5LFxuICAgICAgICAgIGZyb21MaXN0OiBmcm9tTGlzdCxcbiAgICAgICAgICBpc0VtcHR5OiBCZWx0X1NldC5pc0VtcHR5LFxuICAgICAgICAgIGNvbnRhaW5zOiBjb250YWlucyxcbiAgICAgICAgICBhZGQ6IGFkZCxcbiAgICAgICAgICBtZXJnZU1hbnk6IG1lcmdlTWFueSxcbiAgICAgICAgICByZW1vdmU6IHJlbW92ZSxcbiAgICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxuICAgICAgICAgIHVwZGF0ZTogdXBkYXRlLFxuICAgICAgICAgIHRvZ2dsZTogdG9nZ2xlLFxuICAgICAgICAgIHVuaW9uOiBCZWx0X1NldC51bmlvbixcbiAgICAgICAgICBpbnRlcnNlY3Q6IEJlbHRfU2V0LmludGVyc2VjdCxcbiAgICAgICAgICBkaWZmOiBCZWx0X1NldC5kaWZmLFxuICAgICAgICAgIHN1YnNldDogQmVsdF9TZXQuc3Vic2V0LFxuICAgICAgICAgIGNvbXBhcmU6IEJlbHRfU2V0LmNtcCxcbiAgICAgICAgICBlcTogQmVsdF9TZXQuZXEsXG4gICAgICAgICAgZm9yRWFjaDogZm9yRWFjaCxcbiAgICAgICAgICBmb2xkTGVmdDogZm9sZExlZnQsXG4gICAgICAgICAgZm9sZFJpZ2h0OiBmb2xkUmlnaHQsXG4gICAgICAgICAgYWxsOiBhbGwsXG4gICAgICAgICAgYW55OiBhbnksXG4gICAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgICAga2VlcDogZmlsdGVyLFxuICAgICAgICAgIGZpbHRlck5vdDogZmlsdGVyTm90LFxuICAgICAgICAgIHJlamVjdDogZmlsdGVyTm90LFxuICAgICAgICAgIHBhcnRpdGlvbjogcGFydGl0aW9uLFxuICAgICAgICAgIGxlbmd0aDogQmVsdF9TZXQuc2l6ZSxcbiAgICAgICAgICB0b0FycmF5OiBCZWx0X1NldC50b0FycmF5LFxuICAgICAgICAgIHRvTGlzdDogQmVsdF9TZXQudG9MaXN0LFxuICAgICAgICAgIG1pbmltdW06IEJlbHRfU2V0Lm1pbmltdW0sXG4gICAgICAgICAgbWF4aW11bTogQmVsdF9TZXQubWF4aW11bSxcbiAgICAgICAgICBnZXQ6IGdldCxcbiAgICAgICAgICBnZXRPckVsc2U6IGdldE9yRWxzZSxcbiAgICAgICAgICBzcGxpdDogc3BsaXRcbiAgICAgICAgfTtcbn1cblxudmFyIGlzRW1wdHkgPSBCZWx0X1NldC5pc0VtcHR5O1xuXG52YXIgdW5pb24gPSBCZWx0X1NldC51bmlvbjtcblxudmFyIGludGVyc2VjdCA9IEJlbHRfU2V0LmludGVyc2VjdDtcblxudmFyIGRpZmYgPSBCZWx0X1NldC5kaWZmO1xuXG52YXIgc3Vic2V0ID0gQmVsdF9TZXQuc3Vic2V0O1xuXG52YXIgY29tcGFyZSA9IEJlbHRfU2V0LmNtcDtcblxudmFyIGVxID0gQmVsdF9TZXQuZXE7XG5cbnZhciBrZWVwID0gZmlsdGVyO1xuXG52YXIgcmVqZWN0ID0gZmlsdGVyTm90O1xuXG52YXIgbGVuZ3RoID0gQmVsdF9TZXQuc2l6ZTtcblxudmFyIHRvQXJyYXkgPSBCZWx0X1NldC50b0FycmF5O1xuXG52YXIgdG9MaXN0ID0gQmVsdF9TZXQudG9MaXN0O1xuXG52YXIgbWluaW11bSA9IEJlbHRfU2V0Lm1pbmltdW07XG5cbnZhciBtYXhpbXVtID0gQmVsdF9TZXQubWF4aW11bTtcblxuZXhwb3J0IHtcbiAgZW1wdHkgLFxuICBmcm9tQXJyYXkgLFxuICBmcm9tTGlzdCAsXG4gIGlzRW1wdHkgLFxuICBjb250YWlucyAsXG4gIGFkZCAsXG4gIG1lcmdlTWFueSAsXG4gIHJlbW92ZSAsXG4gIHJlbW92ZU1hbnkgLFxuICB1cGRhdGUgLFxuICB0b2dnbGUgLFxuICB1bmlvbiAsXG4gIGludGVyc2VjdCAsXG4gIGRpZmYgLFxuICBzdWJzZXQgLFxuICBjb21wYXJlICxcbiAgZXEgLFxuICBmb3JFYWNoICxcbiAgZm9sZExlZnQgLFxuICBmb2xkUmlnaHQgLFxuICBhbGwgLFxuICBhbnkgLFxuICBmaWx0ZXIgLFxuICBrZWVwICxcbiAgZmlsdGVyTm90ICxcbiAgcmVqZWN0ICxcbiAgcGFydGl0aW9uICxcbiAgbGVuZ3RoICxcbiAgdG9BcnJheSAsXG4gIHRvTGlzdCAsXG4gIG1pbmltdW0gLFxuICBtYXhpbXVtICxcbiAgZ2V0ICxcbiAgZ2V0T3JFbHNlICxcbiAgc3BsaXQgLFxuICBXaXRoT3JkICxcbiAgXG59XG4vKiBSZWx1ZGVfT3JkZXJpbmcgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDYW1sX29iaiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29iai5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9pbnQzMiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2ludDMyLmpzXCI7XG5pbXBvcnQgKiBhcyBQZXJ2YXNpdmVzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3BlcnZhc2l2ZXMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfcHJpbWl0aXZlIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfcHJpbWl0aXZlLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmZpeCRCc0Jhc3RldCBmcm9tIFwiLi9JbmZpeC5icy5qc1wiO1xuaW1wb3J0ICogYXMgSW50ZXJmYWNlJEJzQmFzdGV0IGZyb20gXCIuL0ludGVyZmFjZS5icy5qc1wiO1xuXG5mdW5jdGlvbiBhcHBlbmQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxIHwgMDtcbn1cblxudmFyIE1hZ21hID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIFNlbWlncm91cCA9IHtcbiAgYXBwZW5kOiBhcHBlbmRcbn07XG5cbnZhciBNb25vaWQgPSB7XG4gIGFwcGVuZDogYXBwZW5kLFxuICBlbXB0eTogMFxufTtcblxudmFyIFF1YXNpZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTWVkaWFsX1F1YXNpZ3JvdXAgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgTG9vcCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiAwXG59O1xuXG5mdW5jdGlvbiBpbnZlcnNlKHBhcmFtKSB7XG4gIHJldHVybiBDYW1sX2ludDMyLmltdWwoLTEsIHBhcmFtKTtcbn1cblxudmFyIEdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAsXG4gIGludmVyc2U6IGludmVyc2Vcbn07XG5cbnZhciBBYmVsaWFuX0dyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAsXG4gIGludmVyc2U6IGludmVyc2Vcbn07XG5cbnZhciBBZGRpdGl2ZSA9IHtcbiAgTWFnbWE6IE1hZ21hLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hLFxuICBTZW1pZ3JvdXA6IFNlbWlncm91cCxcbiAgTW9ub2lkOiBNb25vaWQsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAsXG4gIE1lZGlhbF9RdWFzaWdyb3VwOiBNZWRpYWxfUXVhc2lncm91cCxcbiAgTG9vcDogTG9vcCxcbiAgR3JvdXA6IEdyb3VwLFxuICBBYmVsaWFuX0dyb3VwOiBBYmVsaWFuX0dyb3VwXG59O1xuXG52YXIgYXBwZW5kJDEgPSBDYW1sX2ludDMyLmltdWw7XG5cbnZhciBNYWdtYSQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxXG59O1xuXG52YXIgU2VtaWdyb3VwJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDFcbn07XG5cbnZhciBNb25vaWQkMSA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMSxcbiAgZW1wdHk6IDFcbn07XG5cbnZhciBRdWFzaWdyb3VwJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDFcbn07XG5cbnZhciBMb29wJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDEsXG4gIGVtcHR5OiAxXG59O1xuXG52YXIgTXVsdGlwbGljYXRpdmUgPSB7XG4gIE1hZ21hOiBNYWdtYSQxLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hJDEsXG4gIFNlbWlncm91cDogU2VtaWdyb3VwJDEsXG4gIE1vbm9pZDogTW9ub2lkJDEsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAkMSxcbiAgTG9vcDogTG9vcCQxXG59O1xuXG5mdW5jdGlvbiBhcHBlbmQkMihwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gLSBwcmltJDEgfCAwO1xufVxuXG52YXIgTWFnbWEkMiA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMlxufTtcblxudmFyIFF1YXNpZ3JvdXAkMiA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMlxufTtcblxudmFyIFN1YnRyYWN0aXZlID0ge1xuICBNYWdtYTogTWFnbWEkMixcbiAgTWVkaWFsX01hZ21hOiBNYWdtYSQyLFxuICBRdWFzaWdyb3VwOiBRdWFzaWdyb3VwJDJcbn07XG5cbnZhciBhcHBlbmQkMyA9IENhbWxfaW50MzIuZGl2O1xuXG52YXIgTWFnbWEkMyA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkM1xufTtcblxudmFyIERpdmlzaXZlID0ge1xuICBNYWdtYTogTWFnbWEkM1xufTtcblxudmFyIGVxID0gQ2FtbF9vYmouY2FtbF9lcXVhbDtcblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBPcmQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogSW50ZXJmYWNlJEJzQmFzdGV0LnVuc2FmZV9jb21wYXJlXG59O1xuXG52YXIgQm91bmRlZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBJbnRlcmZhY2UkQnNCYXN0ZXQudW5zYWZlX2NvbXBhcmUsXG4gIHRvcDogUGVydmFzaXZlcy5tYXhfaW50LFxuICBib3R0b206IFBlcnZhc2l2ZXMubWluX2ludFxufTtcblxuZnVuY3Rpb24gc2hvdyhwcmltKSB7XG4gIHJldHVybiBTdHJpbmcocHJpbSk7XG59XG5cbnZhciBTaG93ID0ge1xuICBzaG93OiBzaG93XG59O1xuXG5mdW5jdGlvbiBhZGQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxIHwgMDtcbn1cblxudmFyIG11bHRpcGx5ID0gQ2FtbF9pbnQzMi5pbXVsO1xuXG52YXIgU2VtaXJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMVxufTtcblxuZnVuY3Rpb24gc3VidHJhY3QocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC0gcHJpbSQxIHwgMDtcbn1cblxudmFyIFJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMSxcbiAgc3VidHJhY3Q6IHN1YnRyYWN0XG59O1xuXG52YXIgQ29tbXV0YXRpdmVfUmluZyA9IHtcbiAgYWRkOiBhZGQsXG4gIHplcm86IDAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLFxuICBzdWJ0cmFjdDogc3VidHJhY3Rcbn07XG5cbmZ1bmN0aW9uIGRlZ3JlZShhKSB7XG4gIHJldHVybiBDYW1sX3ByaW1pdGl2ZS5jYW1sX2ludF9taW4oUGVydmFzaXZlcy5hYnMoYSksIFBlcnZhc2l2ZXMubWF4X2ludCk7XG59XG5cbnZhciBkaXZpZGUgPSBDYW1sX2ludDMyLmRpdjtcblxudmFyIG1vZHVsbyA9IENhbWxfaW50MzIubW9kXztcblxudmFyIEV1Y2xpZGVhbl9SaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCxcbiAgZGVncmVlOiBkZWdyZWUsXG4gIGRpdmlkZTogZGl2aWRlLFxuICBtb2R1bG86IG1vZHVsb1xufTtcblxudmFyIGluY2x1ZGUgPSBJbmZpeCRCc0Jhc3RldC5NYWdtYShNYWdtYSk7XG5cbnZhciBBZGRpdGl2ZSQxID0gaW5jbHVkZTtcblxudmFyIGluY2x1ZGUkMSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE1hZ21hJDEpO1xuXG52YXIgTXVsdGlwbGljYXRpdmUkMSA9IGluY2x1ZGUkMTtcblxudmFyIGluY2x1ZGUkMiA9IEluZml4JEJzQmFzdGV0LkVxKEVxKTtcblxudmFyIGluY2x1ZGUkMyA9IEluZml4JEJzQmFzdGV0Lk9yZChPcmQpO1xuXG52YXIgaW5jbHVkZSQ0ID0gSW5maXgkQnNCYXN0ZXQuRXVjbGlkZWFuX1JpbmcoRXVjbGlkZWFuX1JpbmcpO1xuXG52YXIgSW5maXhfJGVxJHBpcGUkZXEgPSBpbmNsdWRlJDIuJGVxJHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJHBpcGUgPSBpbmNsdWRlJDMuJGxlc3MkcGlwZSRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkcGlwZSRncmVhdCA9IGluY2x1ZGUkMy4kcGlwZSRwaXBlJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRlcSA9IGluY2x1ZGUkMy4kbGVzcyRwaXBlJGVxO1xuXG52YXIgSW5maXhfJGdyZWF0JHBpcGUkZXEgPSBpbmNsdWRlJDMuJGdyZWF0JHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kcGlwZSRwbHVzJHBpcGUgPSBpbmNsdWRlJDQuJHBpcGUkcGx1cyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkc3RhciRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJHN0YXIkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJCRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJG5lZyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkc2xhc2gkcGlwZSA9IGluY2x1ZGUkNC4kcGlwZSRzbGFzaCRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkcGVyY2VudCRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJHBlcmNlbnQkcGlwZTtcblxudmFyIEluZml4ID0ge1xuICBBZGRpdGl2ZTogQWRkaXRpdmUkMSxcbiAgTXVsdGlwbGljYXRpdmU6IE11bHRpcGxpY2F0aXZlJDEsXG4gICRlcSRwaXBlJGVxOiBJbmZpeF8kZXEkcGlwZSRlcSxcbiAgJGxlc3MkcGlwZSRwaXBlOiBJbmZpeF8kbGVzcyRwaXBlJHBpcGUsXG4gICRwaXBlJHBpcGUkZ3JlYXQ6IEluZml4XyRwaXBlJHBpcGUkZ3JlYXQsXG4gICRsZXNzJHBpcGUkZXE6IEluZml4XyRsZXNzJHBpcGUkZXEsXG4gICRncmVhdCRwaXBlJGVxOiBJbmZpeF8kZ3JlYXQkcGlwZSRlcSxcbiAgJHBpcGUkcGx1cyRwaXBlOiBJbmZpeF8kcGlwZSRwbHVzJHBpcGUsXG4gICRwaXBlJHN0YXIkcGlwZTogSW5maXhfJHBpcGUkc3RhciRwaXBlLFxuICAkcGlwZSRuZWckcGlwZTogSW5maXhfJHBpcGUkJHBpcGUsXG4gICRwaXBlJHNsYXNoJHBpcGU6IEluZml4XyRwaXBlJHNsYXNoJHBpcGUsXG4gICRwaXBlJHBlcmNlbnQkcGlwZTogSW5maXhfJHBpcGUkcGVyY2VudCRwaXBlXG59O1xuXG5leHBvcnQge1xuICBBZGRpdGl2ZSAsXG4gIE11bHRpcGxpY2F0aXZlICxcbiAgU3VidHJhY3RpdmUgLFxuICBEaXZpc2l2ZSAsXG4gIEVxICxcbiAgT3JkICxcbiAgQm91bmRlZCAsXG4gIFNob3cgLFxuICBTZW1pcmluZyAsXG4gIFJpbmcgLFxuICBDb21tdXRhdGl2ZV9SaW5nICxcbiAgRXVjbGlkZWFuX1JpbmcgLFxuICBJbmZpeCAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5cbmZ1bmN0aW9uIFJpbmdFeHRlbnNpb25zKFIpIHtcbiAgdmFyICRuZWcgPSBSLnN1YnRyYWN0O1xuICB2YXIgbmVnYXRlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoJG5lZywgUi56ZXJvLCB2KTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICAkbmVnOiAkbmVnLFxuICAgICAgICAgIG5lZ2F0ZTogbmVnYXRlXG4gICAgICAgIH07XG59XG5cbmV4cG9ydCB7XG4gIFJpbmdFeHRlbnNpb25zICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBKc19pbnQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfaW50LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2ludDMyIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfaW50MzIuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9NYXAgZnJvbSBcIi4vUmVsdWRlX01hcC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1NldCBmcm9tIFwiLi9SZWx1ZGVfU2V0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2Zvcm1hdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX2Zvcm1hdC5qc1wiO1xuaW1wb3J0ICogYXMgSW50JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0VxIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRXEuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX09yZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19FbnVtIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfUmluZyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1JpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0JvdW5kZWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Cb3VuZGVkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pcmluZyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlyaW5nLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHRvRmxvYXQocHJpbSkge1xuICByZXR1cm4gcHJpbTtcbn1cblxuZnVuY3Rpb24gZnJvbUZsb2F0KHByaW0pIHtcbiAgcmV0dXJuIHByaW0gfCAwO1xufVxuXG5mdW5jdGlvbiBhZGQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxIHwgMDtcbn1cblxuZnVuY3Rpb24gc3VidHJhY3QocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC0gcHJpbSQxIHwgMDtcbn1cblxudmFyIG11bHRpcGx5ID0gQ2FtbF9pbnQzMi5pbXVsO1xuXG52YXIgZGl2aWRlID0gQ2FtbF9pbnQzMi5kaXY7XG5cbnZhciBtb2R1bG8gPSBDYW1sX2ludDMyLm1vZF87XG5cbmZ1bmN0aW9uIGRpdmlkZVdpdGhNb2R1bG8oYSwgYikge1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgQ2FtbF9pbnQzMi5kaXYoYSwgYiksXG4gICAgICAgICAgQ2FtbF9pbnQzMi5tb2RfKGEsIGIpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGRpdmlkZUFzRmxvYXQoYSwgYikge1xuICByZXR1cm4gYSAvIGI7XG59XG5cbmZ1bmN0aW9uIGRlZ3JlZShhKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLmFicyhhKSwgSnNfaW50Lm1heCk7XG59XG5cbmZ1bmN0aW9uIHJhbmdlQXNMaXN0KHN0YXJ0LCBlbmRfKSB7XG4gIGlmIChzdGFydCA+PSBlbmRfKSB7XG4gICAgcmV0dXJuIC8qIFtdICovMDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogOjogKi9bXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIHJhbmdlQXNMaXN0KHN0YXJ0ICsgMSB8IDAsIGVuZF8pXG4gICAgICAgICAgXTtcbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZUFzQXJyYXkoc3RhcnQsIGVuZF8pIHtcbiAgaWYgKHN0YXJ0ID49IGVuZF8pIHtcbiAgICByZXR1cm4gW107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KFtzdGFydF0sIHJhbmdlQXNBcnJheShzdGFydCArIDEgfCAwLCBlbmRfKSk7XG4gIH1cbn1cblxudmFyIGVxID0gSW50JEJzQmFzdGV0LkVxLmVxO1xuXG52YXIgRXEgPSB7XG4gIGVxOiBlcVxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19FcS5FcUV4dGVuc2lvbnMoRXEpO1xuXG52YXIgY29tcGFyZSA9IEludCRCc0Jhc3RldC5PcmQuY29tcGFyZTtcblxudmFyIE9yZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlXG59O1xuXG52YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfT3JkLk9yZEV4dGVuc2lvbnMoT3JkKTtcblxudmFyIE9yZFJpbmdFeHRlbnNpb25zID0gaW5jbHVkZSQxLk9yZFJpbmdFeHRlbnNpb25zO1xuXG52YXIgQm91bmRlZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlLFxuICB0b3A6IEpzX2ludC5tYXgsXG4gIGJvdHRvbTogSnNfaW50Lm1pblxufTtcblxuUmVsdWRlX0V4dGVuc2lvbnNfQm91bmRlZC5Cb3VuZGVkRXh0ZW5zaW9ucyhCb3VuZGVkKTtcblxuZnVuY3Rpb24gcHJlZChpKSB7XG4gIGlmIChpID4gSnNfaW50Lm1pbikge1xuICAgIHJldHVybiBpIC0gMSB8IDA7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHN1Y2MoaSkge1xuICBpZiAoaSA8IEpzX2ludC5tYXgpIHtcbiAgICByZXR1cm4gaSArIDEgfCAwO1xuICB9XG4gIFxufVxuXG52YXIgRW51bSA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlLFxuICBzdWNjOiBzdWNjLFxuICBwcmVkOiBwcmVkXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRW51bS5FbnVtRXh0ZW5zaW9ucyhFbnVtKTtcblxudmFyIFNlbWlyaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDFcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX1NlbWlyaW5nLlNlbWlyaW5nRXh0ZW5zaW9ucyhTZW1pcmluZyk7XG5cbnZhciBSaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdFxufTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX1JpbmcuUmluZ0V4dGVuc2lvbnMoUmluZyk7XG5cbnZhciBpbmNsdWRlJDQgPSBDdXJyeS5fMShPcmRSaW5nRXh0ZW5zaW9ucywgUmluZyk7XG5cbnZhciBFdWNsaWRlYW5SaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCxcbiAgZGVncmVlOiBkZWdyZWUsXG4gIGRpdmlkZTogZGl2aWRlLFxuICBtb2R1bG86IG1vZHVsb1xufTtcblxudmFyICQkTWFwID0gUmVsdWRlX01hcC5XaXRoT3JkKE9yZCk7XG5cbnZhciAkJFNldCA9IFJlbHVkZV9TZXQuV2l0aE9yZChPcmQpO1xuXG5mdW5jdGlvbiBzaG93KHByaW0pIHtcbiAgcmV0dXJuIFN0cmluZyhwcmltKTtcbn1cblxudmFyIFNob3cgPSB7XG4gIHNob3c6IHNob3dcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcodikge1xuICB0cnkge1xuICAgIHJldHVybiBDYW1sX2Zvcm1hdC5jYW1sX2ludF9vZl9zdHJpbmcodik7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgcmV0dXJuIDtcbiAgfVxufVxuXG52YXIgQWRkaXRpdmVfTWFnbWEgPSBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTWFnbWE7XG5cbnZhciBBZGRpdGl2ZV9NZWRpYWxfTWFnbWEgPSBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTWVkaWFsX01hZ21hO1xuXG52YXIgQWRkaXRpdmVfU2VtaWdyb3VwID0gSW50JEJzQmFzdGV0LkFkZGl0aXZlLlNlbWlncm91cDtcblxudmFyIEFkZGl0aXZlX01vbm9pZCA9IEludCRCc0Jhc3RldC5BZGRpdGl2ZS5Nb25vaWQ7XG5cbnZhciBBZGRpdGl2ZV9RdWFzaWdyb3VwID0gSW50JEJzQmFzdGV0LkFkZGl0aXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBBZGRpdGl2ZV9NZWRpYWxfUXVhc2lncm91cCA9IEludCRCc0Jhc3RldC5BZGRpdGl2ZS5NZWRpYWxfUXVhc2lncm91cDtcblxudmFyIEFkZGl0aXZlX0xvb3AgPSBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTG9vcDtcblxudmFyIEFkZGl0aXZlX0dyb3VwID0gSW50JEJzQmFzdGV0LkFkZGl0aXZlLkdyb3VwO1xuXG52YXIgQWRkaXRpdmVfQWJlbGlhbl9Hcm91cCA9IEludCRCc0Jhc3RldC5BZGRpdGl2ZS5BYmVsaWFuX0dyb3VwO1xuXG52YXIgQWRkaXRpdmUgPSB7XG4gIE1hZ21hOiBBZGRpdGl2ZV9NYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBBZGRpdGl2ZV9NZWRpYWxfTWFnbWEsXG4gIFNlbWlncm91cDogQWRkaXRpdmVfU2VtaWdyb3VwLFxuICBNb25vaWQ6IEFkZGl0aXZlX01vbm9pZCxcbiAgUXVhc2lncm91cDogQWRkaXRpdmVfUXVhc2lncm91cCxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IEFkZGl0aXZlX01lZGlhbF9RdWFzaWdyb3VwLFxuICBMb29wOiBBZGRpdGl2ZV9Mb29wLFxuICBHcm91cDogQWRkaXRpdmVfR3JvdXAsXG4gIEFiZWxpYW5fR3JvdXA6IEFkZGl0aXZlX0FiZWxpYW5fR3JvdXBcbn07XG5cbnZhciBNdWx0aXBsaWNhdGl2ZV9NYWdtYSA9IEludCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5NYWdtYTtcblxudmFyIE11bHRpcGxpY2F0aXZlX01lZGlhbF9NYWdtYSA9IEludCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5NZWRpYWxfTWFnbWE7XG5cbnZhciBNdWx0aXBsaWNhdGl2ZV9TZW1pZ3JvdXAgPSBJbnQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuU2VtaWdyb3VwO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTW9ub2lkID0gSW50JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZDtcblxudmFyIE11bHRpcGxpY2F0aXZlX1F1YXNpZ3JvdXAgPSBJbnQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuUXVhc2lncm91cDtcblxudmFyIE11bHRpcGxpY2F0aXZlX0xvb3AgPSBJbnQkQnNCYXN0ZXQuTXVsdGlwbGljYXRpdmUuTG9vcDtcblxudmFyIE11bHRpcGxpY2F0aXZlID0ge1xuICBNYWdtYTogTXVsdGlwbGljYXRpdmVfTWFnbWEsXG4gIE1lZGlhbF9NYWdtYTogTXVsdGlwbGljYXRpdmVfTWVkaWFsX01hZ21hLFxuICBTZW1pZ3JvdXA6IE11bHRpcGxpY2F0aXZlX1NlbWlncm91cCxcbiAgTW9ub2lkOiBNdWx0aXBsaWNhdGl2ZV9Nb25vaWQsXG4gIFF1YXNpZ3JvdXA6IE11bHRpcGxpY2F0aXZlX1F1YXNpZ3JvdXAsXG4gIExvb3A6IE11bHRpcGxpY2F0aXZlX0xvb3Bcbn07XG5cbnZhciBTdWJ0cmFjdGl2ZV9NYWdtYSA9IEludCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5NYWdtYTtcblxudmFyIFN1YnRyYWN0aXZlX01lZGlhbF9NYWdtYSA9IEludCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5NZWRpYWxfTWFnbWE7XG5cbnZhciBTdWJ0cmFjdGl2ZV9RdWFzaWdyb3VwID0gSW50JEJzQmFzdGV0LlN1YnRyYWN0aXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBTdWJ0cmFjdGl2ZSA9IHtcbiAgTWFnbWE6IFN1YnRyYWN0aXZlX01hZ21hLFxuICBNZWRpYWxfTWFnbWE6IFN1YnRyYWN0aXZlX01lZGlhbF9NYWdtYSxcbiAgUXVhc2lncm91cDogU3VidHJhY3RpdmVfUXVhc2lncm91cFxufTtcblxudmFyIERpdmlzaXZlID0ge1xuICBNYWdtYTogSW50JEJzQmFzdGV0LkRpdmlzaXZlLk1hZ21hXG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gUmVsdWRlX0V4dGVuc2lvbnNfRXEuRXFJbmZpeChFcSk7XG5cbnZhciBpbmNsdWRlJDYgPSBSZWx1ZGVfRXh0ZW5zaW9uc19PcmQuT3JkSW5maXgoT3JkKTtcblxudmFyIEluZml4X0FkZGl0aXZlID0gSW50JEJzQmFzdGV0LkluZml4LkFkZGl0aXZlO1xuXG52YXIgSW5maXhfTXVsdGlwbGljYXRpdmUgPSBJbnQkQnNCYXN0ZXQuSW5maXguTXVsdGlwbGljYXRpdmU7XG5cbnZhciBJbmZpeF8kZXEkcGlwZSRlcSA9IEludCRCc0Jhc3RldC5JbmZpeC4kZXEkcGlwZSRlcTtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkcGlwZSA9IEludCRCc0Jhc3RldC5JbmZpeC4kbGVzcyRwaXBlJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwaXBlJGdyZWF0ID0gSW50JEJzQmFzdGV0LkluZml4LiRwaXBlJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGVxID0gSW50JEJzQmFzdGV0LkluZml4LiRsZXNzJHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kZ3JlYXQkcGlwZSRlcSA9IEludCRCc0Jhc3RldC5JbmZpeC4kZ3JlYXQkcGlwZSRlcTtcblxudmFyIEluZml4XyRwaXBlJHBsdXMkcGlwZSA9IEludCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRwbHVzJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzdGFyJHBpcGUgPSBJbnQkQnNCYXN0ZXQuSW5maXguJHBpcGUkc3RhciRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkJHBpcGUgPSBJbnQkQnNCYXN0ZXQuSW5maXguJHBpcGUkbmVnJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzbGFzaCRwaXBlID0gSW50JEJzQmFzdGV0LkluZml4LiRwaXBlJHNsYXNoJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGUgPSBJbnQkQnNCYXN0ZXQuSW5maXguJHBpcGUkcGVyY2VudCRwaXBlO1xuXG52YXIgSW5maXhfRXFFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkVxRXh0ZW5zaW9ucztcblxudmFyIEluZml4XyRwaXBlJGVxJHBpcGUgPSBpbmNsdWRlJDUuJHBpcGUkZXEkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJGJhbmckZXEkcGlwZSA9IGluY2x1ZGUkNS4kcGlwZSRiYW5nJGVxJHBpcGU7XG5cbnZhciBJbmZpeF9PcmRFeHRlbnNpb25zID0gaW5jbHVkZSQ2Lk9yZEV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kcGlwZSRsZXNzJHBpcGUgPSBpbmNsdWRlJDYuJHBpcGUkbGVzcyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkbGVzcyRlcSRwaXBlID0gaW5jbHVkZSQ2LiRwaXBlJGxlc3MkZXEkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJGdyZWF0JHBpcGUgPSBpbmNsdWRlJDYuJHBpcGUkZ3JlYXQkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJGdyZWF0JGVxJHBpcGUgPSBpbmNsdWRlJDYuJHBpcGUkZ3JlYXQkZXEkcGlwZTtcblxudmFyIEluZml4ID0ge1xuICBBZGRpdGl2ZTogSW5maXhfQWRkaXRpdmUsXG4gIE11bHRpcGxpY2F0aXZlOiBJbmZpeF9NdWx0aXBsaWNhdGl2ZSxcbiAgJGVxJHBpcGUkZXE6IEluZml4XyRlcSRwaXBlJGVxLFxuICAkbGVzcyRwaXBlJHBpcGU6IEluZml4XyRsZXNzJHBpcGUkcGlwZSxcbiAgJHBpcGUkcGlwZSRncmVhdDogSW5maXhfJHBpcGUkcGlwZSRncmVhdCxcbiAgJGxlc3MkcGlwZSRlcTogSW5maXhfJGxlc3MkcGlwZSRlcSxcbiAgJGdyZWF0JHBpcGUkZXE6IEluZml4XyRncmVhdCRwaXBlJGVxLFxuICAkcGlwZSRwbHVzJHBpcGU6IEluZml4XyRwaXBlJHBsdXMkcGlwZSxcbiAgJHBpcGUkc3RhciRwaXBlOiBJbmZpeF8kcGlwZSRzdGFyJHBpcGUsXG4gICRwaXBlJG5lZyRwaXBlOiBJbmZpeF8kcGlwZSQkcGlwZSxcbiAgJHBpcGUkc2xhc2gkcGlwZTogSW5maXhfJHBpcGUkc2xhc2gkcGlwZSxcbiAgJHBpcGUkcGVyY2VudCRwaXBlOiBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGUsXG4gIEVxRXh0ZW5zaW9uczogSW5maXhfRXFFeHRlbnNpb25zLFxuICAkcGlwZSRlcSRwaXBlOiBJbmZpeF8kcGlwZSRlcSRwaXBlLFxuICAkcGlwZSRiYW5nJGVxJHBpcGU6IEluZml4XyRwaXBlJGJhbmckZXEkcGlwZSxcbiAgT3JkRXh0ZW5zaW9uczogSW5maXhfT3JkRXh0ZW5zaW9ucyxcbiAgJHBpcGUkbGVzcyRwaXBlOiBJbmZpeF8kcGlwZSRsZXNzJHBpcGUsXG4gICRwaXBlJGxlc3MkZXEkcGlwZTogSW5maXhfJHBpcGUkbGVzcyRlcSRwaXBlLFxuICAkcGlwZSRncmVhdCRwaXBlOiBJbmZpeF8kcGlwZSRncmVhdCRwaXBlLFxuICAkcGlwZSRncmVhdCRlcSRwaXBlOiBJbmZpeF8kcGlwZSRncmVhdCRlcSRwaXBlXG59O1xuXG52YXIgemVybyA9IDA7XG5cbnZhciBvbmUgPSAxO1xuXG52YXIgdG9wID0gSnNfaW50Lm1heDtcblxudmFyIGJvdHRvbSA9IEpzX2ludC5taW47XG5cbnZhciBlcVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZS5lcVdpdGhDb252ZXJzaW9uO1xuXG52YXIgbm90RXEgPSBpbmNsdWRlLm5vdEVxO1xuXG52YXIgZXFJbnZlcnRlZCA9IGluY2x1ZGUuZXFJbnZlcnRlZDtcblxudmFyIEVxSW52ZXJ0ZWQgPSBpbmNsdWRlLkVxSW52ZXJ0ZWQ7XG5cbnZhciBFcUJ5ID0gaW5jbHVkZS5FcUJ5O1xuXG52YXIgY29tcGFyZVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZSQxLmNvbXBhcmVXaXRoQ29udmVyc2lvbjtcblxudmFyIGNvbXBhcmVSZXZlcnNlZCA9IGluY2x1ZGUkMS5jb21wYXJlUmV2ZXJzZWQ7XG5cbnZhciBPcmRSZXZlcnNlZCA9IGluY2x1ZGUkMS5PcmRSZXZlcnNlZDtcblxudmFyIGNvbXBhcmVBc0ludCA9IGluY2x1ZGUkMS5jb21wYXJlQXNJbnQ7XG5cbnZhciBtaW4gPSBpbmNsdWRlJDEubWluO1xuXG52YXIgbWF4ID0gaW5jbHVkZSQxLm1heDtcblxudmFyIGxlc3NUaGFuID0gaW5jbHVkZSQxLmxlc3NUaGFuO1xuXG52YXIgbHQgPSBpbmNsdWRlJDEubHQ7XG5cbnZhciBsZXNzVGhhbk9yRXEgPSBpbmNsdWRlJDEubGVzc1RoYW5PckVxO1xuXG52YXIgbHRlID0gaW5jbHVkZSQxLmx0ZTtcblxudmFyIGdyZWF0ZXJUaGFuID0gaW5jbHVkZSQxLmdyZWF0ZXJUaGFuO1xuXG52YXIgZ3QgPSBpbmNsdWRlJDEuZ3Q7XG5cbnZhciBncmVhdGVyVGhhbk9yRXEgPSBpbmNsdWRlJDEuZ3JlYXRlclRoYW5PckVxO1xuXG52YXIgZ3RlID0gaW5jbHVkZSQxLmd0ZTtcblxudmFyIGNsYW1wID0gaW5jbHVkZSQxLmNsYW1wO1xuXG52YXIgYmV0d2VlbiA9IGluY2x1ZGUkMS5iZXR3ZWVuO1xuXG52YXIgT3JkTmFtZWQgPSBpbmNsdWRlJDEuT3JkTmFtZWQ7XG5cbnZhciBPcmRCeSA9IGluY2x1ZGUkMS5PcmRCeTtcblxudmFyIGZyb21Ub0FzTGlzdCA9IGluY2x1ZGUkMi5mcm9tVG9Bc0xpc3Q7XG5cbnZhciB1cEZyb21Bc0xpc3QgPSBpbmNsdWRlJDIudXBGcm9tQXNMaXN0O1xuXG52YXIgdXBGcm9tSW5jbHVkaW5nQXNMaXN0ID0gaW5jbHVkZSQyLnVwRnJvbUluY2x1ZGluZ0FzTGlzdDtcblxudmFyIGRvd25Gcm9tQXNMaXN0ID0gaW5jbHVkZSQyLmRvd25Gcm9tQXNMaXN0O1xuXG52YXIgZG93bkZyb21JbmNsdWRpbmdBc0xpc3QgPSBpbmNsdWRlJDIuZG93bkZyb21JbmNsdWRpbmdBc0xpc3Q7XG5cbnZhciAkbmVnID0gaW5jbHVkZSQzLiRuZWc7XG5cbnZhciBuZWdhdGUgPSBpbmNsdWRlJDMubmVnYXRlO1xuXG52YXIgYWJzID0gaW5jbHVkZSQ0LmFicztcblxudmFyIHNpZ251bSA9IGluY2x1ZGUkNC5zaWdudW07XG5cbnZhciB0b1N0cmluZyA9IHNob3c7XG5cbmV4cG9ydCB7XG4gIHRvRmxvYXQgLFxuICBmcm9tRmxvYXQgLFxuICB6ZXJvICxcbiAgb25lICxcbiAgYWRkICxcbiAgc3VidHJhY3QgLFxuICBtdWx0aXBseSAsXG4gIGRpdmlkZSAsXG4gIG1vZHVsbyAsXG4gIGRpdmlkZVdpdGhNb2R1bG8gLFxuICBkaXZpZGVBc0Zsb2F0ICxcbiAgdG9wICxcbiAgYm90dG9tICxcbiAgZGVncmVlICxcbiAgcmFuZ2VBc0xpc3QgLFxuICByYW5nZUFzQXJyYXkgLFxuICBlcSAsXG4gIEVxICxcbiAgZXFXaXRoQ29udmVyc2lvbiAsXG4gIG5vdEVxICxcbiAgZXFJbnZlcnRlZCAsXG4gIEVxSW52ZXJ0ZWQgLFxuICBFcUJ5ICxcbiAgY29tcGFyZSAsXG4gIE9yZCAsXG4gIGNvbXBhcmVXaXRoQ29udmVyc2lvbiAsXG4gIGNvbXBhcmVSZXZlcnNlZCAsXG4gIE9yZFJldmVyc2VkICxcbiAgY29tcGFyZUFzSW50ICxcbiAgbWluICxcbiAgbWF4ICxcbiAgbGVzc1RoYW4gLFxuICBsdCAsXG4gIGxlc3NUaGFuT3JFcSAsXG4gIGx0ZSAsXG4gIGdyZWF0ZXJUaGFuICxcbiAgZ3QgLFxuICBncmVhdGVyVGhhbk9yRXEgLFxuICBndGUgLFxuICBjbGFtcCAsXG4gIGJldHdlZW4gLFxuICBPcmRSaW5nRXh0ZW5zaW9ucyAsXG4gIE9yZE5hbWVkICxcbiAgT3JkQnkgLFxuICBCb3VuZGVkICxcbiAgRW51bSAsXG4gIGZyb21Ub0FzTGlzdCAsXG4gIHVwRnJvbUFzTGlzdCAsXG4gIHVwRnJvbUluY2x1ZGluZ0FzTGlzdCAsXG4gIGRvd25Gcm9tQXNMaXN0ICxcbiAgZG93bkZyb21JbmNsdWRpbmdBc0xpc3QgLFxuICBTZW1pcmluZyAsXG4gIFJpbmcgLFxuICAkbmVnICxcbiAgbmVnYXRlICxcbiAgYWJzICxcbiAgc2lnbnVtICxcbiAgRXVjbGlkZWFuUmluZyAsXG4gICQkTWFwICxcbiAgJCRTZXQgLFxuICBzaG93ICxcbiAgdG9TdHJpbmcgLFxuICBTaG93ICxcbiAgZnJvbVN0cmluZyAsXG4gIEFkZGl0aXZlICxcbiAgTXVsdGlwbGljYXRpdmUgLFxuICBTdWJ0cmFjdGl2ZSAsXG4gIERpdmlzaXZlICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9BcnJheSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCIuLi9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9Tb3J0QXJyYXkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9Tb3J0QXJyYXkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcmRlcmluZyBmcm9tIFwiLi4vUmVsdWRlX09yZGVyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0Jhc2UgZnJvbSBcIi4uL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMgZnJvbSBcIi4vUmVsdWRlX0FycmF5X0luc3RhbmNlcy5icy5qc1wiO1xuXG5mdW5jdGlvbiBjb25zKHgsIHhzKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChbeF0sIHhzKTtcbn1cblxuZnVuY3Rpb24gdW5jb25zKHhzKSB7XG4gIGlmICh4cy5sZW5ndGggIT09IDApIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBCZWx0X0FycmF5LmdldEV4bih4cywgMCksXG4gICAgICAgICAgICBCZWx0X0FycmF5LnNsaWNlVG9FbmQoeHMsIDEpXG4gICAgICAgICAgXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHgsIHhzKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdCh4cywgW3hdKTtcbn1cblxudmFyIHJlcGVhdCA9IEJlbHRfQXJyYXkubWFrZTtcblxuZnVuY3Rpb24gbWFwV2l0aEluZGV4KGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X0FycmF5Lm1hcFdpdGhJbmRleCh4cywgKGZ1bmN0aW9uIChpLCB4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIHgsIGkpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHNodWZmbGVJblBsYWNlKHhzKSB7XG4gIEJlbHRfQXJyYXkuc2h1ZmZsZUluUGxhY2UoeHMpO1xuICByZXR1cm4geHM7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aChwcmltKSB7XG4gIHJldHVybiBwcmltLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eShhcnIpIHtcbiAgcmV0dXJuIGFyci5sZW5ndGggPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzTm90RW1wdHkoYXJyKSB7XG4gIHJldHVybiBhcnIubGVuZ3RoICE9PSAwO1xufVxuXG5mdW5jdGlvbiBhdChpLCB4cykge1xuICByZXR1cm4gQmVsdF9BcnJheS5nZXQoeHMsIGkpO1xufVxuXG5mdW5jdGlvbiBzZXRBdChpLCB4LCB4cykge1xuICBpZiAoQmVsdF9BcnJheS5zZXQoeHMsIGksIHgpKSB7XG4gICAgcmV0dXJuIHhzO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBoZWFkKGFycikge1xuICByZXR1cm4gQmVsdF9BcnJheS5nZXQoYXJyLCAwKTtcbn1cblxuZnVuY3Rpb24gdGFpbCh4cykge1xuICB2YXIgbCA9IHhzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9XG4gIGlmIChsID09PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciB5cyA9IEJlbHRfQXJyYXkuc2xpY2VUb0VuZCh4cywgMSk7XG4gIGlmICh5cy5sZW5ndGggIT09IDApIHtcbiAgICByZXR1cm4geXM7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIHRhaWxPckVtcHR5KHhzKSB7XG4gIHZhciB5cyA9IHRhaWwoeHMpO1xuICBpZiAoeXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB5cztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdCh4cykge1xuICB2YXIgbCA9IHhzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBCZWx0X0FycmF5LnNsaWNlKHhzLCAwLCBsIC0gMSB8IDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRPckVtcHR5KHhzKSB7XG4gIHZhciBhcnIgPSBpbml0KHhzKTtcbiAgaWYgKGFyciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGFycjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZnVuY3Rpb24gbGFzdCh4cykge1xuICB2YXIgbCA9IHhzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBCZWx0X0FycmF5LmdldCh4cywgbCAtIDEgfCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YWtlKGksIHhzKSB7XG4gIHZhciBsID0geHMubGVuZ3RoO1xuICB2YXIgbGVuID0gaSA8IDAgPyAwIDogKFxuICAgICAgbCA8IGkgPyBsIDogaVxuICAgICk7XG4gIHJldHVybiBCZWx0X0FycmF5LnNsaWNlKHhzLCAwLCBsZW4pO1xufVxuXG5mdW5jdGlvbiB0YWtlRXhhY3RseShpLCB4cykge1xuICBpZiAoaSA8IDAgfHwgaSA+IHhzLmxlbmd0aCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEJlbHRfQXJyYXkuc2xpY2UoeHMsIDAsIGkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRha2VXaGlsZShmLCB4cykge1xuICB2YXIgeCA9IEJlbHRfQXJyYXkuZ2V0KHhzLCAwKTtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgeCQxID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih4KTtcbiAgaWYgKCFDdXJyeS5fMShmLCB4JDEpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciB4cyQxID0gdGFrZVdoaWxlKGYsIHRhaWxPckVtcHR5KHhzKSk7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChbeCQxXSwgeHMkMSk7XG59XG5cbmZ1bmN0aW9uIGRyb3AoaSwgeHMpIHtcbiAgdmFyIGwgPSB4cy5sZW5ndGg7XG4gIHZhciBzdGFydCA9IGkgPCAwID8gMCA6IChcbiAgICAgIGwgPCBpID8gbCA6IGlcbiAgICApO1xuICByZXR1cm4gQmVsdF9BcnJheS5zbGljZVRvRW5kKHhzLCBzdGFydCk7XG59XG5cbmZ1bmN0aW9uIGRyb3BFeGFjdGx5KGksIHhzKSB7XG4gIGlmIChpIDwgMCB8fCBpID4geHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQmVsdF9BcnJheS5zbGljZVRvRW5kKHhzLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkcm9wV2hpbGUoZiwgX3hzKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgeHMgPSBfeHM7XG4gICAgdmFyIHggPSBCZWx0X0FycmF5LmdldCh4cywgMCk7XG4gICAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHhzO1xuICAgIH1cbiAgICBpZiAoIUN1cnJ5Ll8xKGYsIENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oeCkpKSB7XG4gICAgICByZXR1cm4geHM7XG4gICAgfVxuICAgIF94cyA9IHRhaWxPckVtcHR5KHhzKTtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbHRlcihmLCB4cykge1xuICByZXR1cm4gQmVsdF9BcnJheS5rZWVwKHhzLCBmKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyV2l0aEluZGV4KGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X0FycmF5LmtlZXBXaXRoSW5kZXgoeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBmaWx0ZXJOb3QoZikge1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIEJlbHRfQXJyYXkua2VlcChwYXJhbSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhQ3VycnkuXzEoZiwgYSk7XG4gICAgICAgICAgICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbHRlck5vdFdpdGhJbmRleChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gQmVsdF9BcnJheS5rZWVwV2l0aEluZGV4KHBhcmFtLCAoZnVuY3Rpb24gKGEsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFDdXJyeS5fMihmLCBhLCBpKTtcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbWFwT3B0aW9uKGYsIHhzKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKGFjYywgY3Vycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZm9sZChhY2MsIChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KGFjYywgW3ZdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoZiwgY3VycikpO1xuICAgICAgICAgICAgICB9KSwgW10sIHhzKTtcbn1cblxuZnVuY3Rpb24gY2F0T3B0aW9uKHhzKSB7XG4gIHJldHVybiBtYXBPcHRpb24oKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbihmLCB4cykge1xuICByZXR1cm4gQmVsdF9BcnJheS5wYXJ0aXRpb24oeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBzcGxpdEF0KGksIHhzKSB7XG4gIGlmIChpIDwgMCB8fCBpID4geHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBCZWx0X0FycmF5LnNsaWNlKHhzLCAwLCBpKSxcbiAgICAgICAgICAgIEJlbHRfQXJyYXkuc2xpY2VUb0VuZCh4cywgaSlcbiAgICAgICAgICBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRUb0FsbChkZWxpbSwgeHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZmxhdE1hcCwgKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGltLFxuICAgICAgICAgICAgICAgICAgICAgICAgdlxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIGludGVyc3BlcnNlKGRlbGltLCB4cykge1xuICB2YXIgeCA9IEJlbHRfQXJyYXkuZ2V0KHhzLCAwKTtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB2YXIgeHMkMSA9IHByZXBlbmRUb0FsbChkZWxpbSwgdGFpbE9yRW1wdHkoeHMpKTtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KFtDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKHgpXSwgeHMkMSk7XG59XG5cbmZ1bmN0aW9uIHJlcGxpY2F0ZShpLCB4cykge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkTGVmdCwgKGZ1bmN0aW9uIChhY2MsIF9pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KGFjYywgeHMpO1xuICAgICAgICAgICAgICB9KSwgW10sIFJlbHVkZV9JbnQucmFuZ2VBc0FycmF5KDAsIGkpKTtcbn1cblxuZnVuY3Rpb24gemlwV2l0aChmLCB4cywgeXMpIHtcbiAgcmV0dXJuIEJlbHRfQXJyYXkuemlwQnkoeHMsIHlzLCBmKTtcbn1cblxuZnVuY3Rpb24gemlwV2l0aEluZGV4KHhzKSB7XG4gIHJldHVybiBCZWx0X0FycmF5LnppcCh4cywgUmVsdWRlX0ludC5yYW5nZUFzQXJyYXkoMCwgeHMubGVuZ3RoKSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRXaXRoSW50KGYsIHhzKSB7XG4gIHJldHVybiBCZWx0X1NvcnRBcnJheS5zdGFibGVTb3J0QnkoeHMsIGYpO1xufVxuXG5mdW5jdGlvbiBzb3J0QnkoZiwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfU29ydEFycmF5LnN0YWJsZVNvcnRCeSh4cywgKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcmRlcmluZy50b0ludChDdXJyeS5fMihmLCBhLCBiKSk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gc29ydChvcmRBLCB4cykge1xuICByZXR1cm4gc29ydEJ5KG9yZEEuY29tcGFyZSwgeHMpO1xufVxuXG5mdW5jdGlvbiBkaXN0aW5jdEJ5KGVxLCB4cykge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkTGVmdCwgKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoQ3VycnkuXzMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb250YWluc0J5LCBlcSwgY3VyciwgYWNjKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KGFjYywgW2N1cnJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCBbXSwgeHMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaXJzdEJ5KGlubmVyRXEsIHYsIHhzKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCB4KSB7XG4gICAgICAgICAgICAgICAgICB2YXIgeXMgPSBwYXJhbVsxXTtcbiAgICAgICAgICAgICAgICAgIGlmIChwYXJhbVswXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdCh5cywgW3hdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChDdXJyeS5fMihpbm5lckVxLCB2LCB4KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5c1xuICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0KHlzLCBbeF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIFtdXG4gICAgICAgICAgICAgIF0sIHhzKVsxXTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaEJ5KGlubmVyRXEsIHgsIHhzKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKHlzLCB5KSB7XG4gICAgICAgICAgICAgICAgaWYgKEN1cnJ5Ll8yKGlubmVyRXEsIHgsIHkpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geXM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdCh5cywgW3ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCBbXSwgeHMpO1xufVxuXG5mdW5jdGlvbiBkaXN0aW5jdChlcUEsIHhzKSB7XG4gIHJldHVybiBkaXN0aW5jdEJ5KGVxQS5lcSwgeHMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaXJzdChlcUEsIHgsIHhzKSB7XG4gIHJldHVybiByZW1vdmVGaXJzdEJ5KGVxQS5lcSwgeCwgeHMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoKGVxQSwgeCwgeHMpIHtcbiAgcmV0dXJuIHJlbW92ZUVhY2hCeShlcUEuZXEsIHgsIHhzKTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUF0KHRhcmdldEluZGV4LCBuZXdYLCB4cykge1xuICByZXR1cm4gbWFwV2l0aEluZGV4KChmdW5jdGlvbiAoeCwgY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gdGFyZ2V0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdYO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHNjYW5MZWZ0KGYsIGluaXQsIHhzKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRMZWZ0LCAoZnVuY3Rpb24gKHBhcmFtLCBjdXJyKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbmV4dEFjYyA9IEN1cnJ5Ll8yKGYsIHBhcmFtWzBdLCBjdXJyKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQocGFyYW1bMV0sIFtuZXh0QWNjXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgXSwgeHMpWzFdO1xufVxuXG5mdW5jdGlvbiBzY2FuUmlnaHQoZiwgaW5pdCwgeHMpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZFJpZ2h0LCAoZnVuY3Rpb24gKGN1cnIsIHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbmV4dEFjYyA9IEN1cnJ5Ll8yKGYsIGN1cnIsIHBhcmFtWzBdKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEFjYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoW25leHRBY2NdLCBwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgXSwgeHMpWzFdO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRBdCh0YXJnZXRJbmRleCwgbmV3WCwgeHMpIHtcbiAgdmFyIG1hdGNoID0gc3BsaXRBdCh0YXJnZXRJbmRleCwgeHMpO1xuICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChtYXRjaFswXSwgUmVsdWRlX0FycmF5X0luc3RhbmNlcy5jb25jYXQoW25ld1hdLCBtYXRjaFsxXSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4cztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVBdCh0YXJnZXRJbmRleCwgZiwgeHMpIHtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleCgoZnVuY3Rpb24gKHgsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSB0YXJnZXRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIHgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHN3YXBBdChpLCBqLCB4cykge1xuICB2YXIgbWF0Y2ggPSBCZWx0X0FycmF5LmdldCh4cywgaSk7XG4gIHZhciBtYXRjaCQxID0gQmVsdF9BcnJheS5nZXQoeHMsIGopO1xuICBpZiAobWF0Y2ggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB4cztcbiAgfVxuICBpZiAobWF0Y2gkMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHhzO1xuICB9XG4gIHZhciBiID0gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihtYXRjaCQxKTtcbiAgdmFyIGEgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG1hdGNoKTtcbiAgcmV0dXJuIG1hcFdpdGhJbmRleCgoZnVuY3Rpb24gKHgsIGspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gaykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqID09PSBrKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgeHMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVBdCh0YXJnZXRJbmRleCwgeHMpIHtcbiAgcmV0dXJuIEJlbHRfQXJyYXkua2VlcFdpdGhJbmRleCh4cywgKGZ1bmN0aW9uIChwYXJhbSwgaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9PSB0YXJnZXRJbmRleDtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBjaHVuayhzaXplLCB4cykge1xuICBpZiAoc2l6ZSA8IDEpIHtcbiAgICByZXR1cm4gW3hzXTtcbiAgfSBlbHNlIGlmICh4cy5sZW5ndGggPD0gc2l6ZSkge1xuICAgIHJldHVybiBbeHNdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdChbdGFrZShzaXplLCB4cyldLCBjaHVuayhzaXplLCBkcm9wKHNpemUsIHhzKSkpO1xuICB9XG59XG5cbnZhciBwcmVwZW5kID0gY29ucztcblxudmFyIG1ha2VXaXRoSW5kZXggPSBCZWx0X0FycmF5Lm1ha2VCeTtcblxudmFyIHJldmVyc2UgPSBCZWx0X0FycmF5LnJldmVyc2U7XG5cbnZhciBzaHVmZmxlID0gQmVsdF9BcnJheS5zaHVmZmxlO1xuXG52YXIga2VlcCA9IGZpbHRlcjtcblxudmFyIGtlZXBXaXRoSW5kZXggPSBmaWx0ZXJXaXRoSW5kZXg7XG5cbnZhciByZWplY3QgPSBmaWx0ZXJOb3Q7XG5cbnZhciByZWplY3RXaXRoSW5kZXggPSBmaWx0ZXJOb3RXaXRoSW5kZXg7XG5cbnZhciB6aXAgPSBCZWx0X0FycmF5LnppcDtcblxudmFyIHVuemlwID0gQmVsdF9BcnJheS51bnppcDtcblxuZXhwb3J0IHtcbiAgY29ucyAsXG4gIHByZXBlbmQgLFxuICB1bmNvbnMgLFxuICBhcHBlbmQgLFxuICByZXBlYXQgLFxuICBtYWtlV2l0aEluZGV4ICxcbiAgbWFwV2l0aEluZGV4ICxcbiAgcmV2ZXJzZSAsXG4gIHNodWZmbGVJblBsYWNlICxcbiAgc2h1ZmZsZSAsXG4gIGxlbmd0aCAsXG4gIGlzRW1wdHkgLFxuICBpc05vdEVtcHR5ICxcbiAgYXQgLFxuICBzZXRBdCAsXG4gIGhlYWQgLFxuICB0YWlsICxcbiAgdGFpbE9yRW1wdHkgLFxuICBpbml0ICxcbiAgaW5pdE9yRW1wdHkgLFxuICBsYXN0ICxcbiAgdGFrZSAsXG4gIHRha2VFeGFjdGx5ICxcbiAgdGFrZVdoaWxlICxcbiAgZHJvcCAsXG4gIGRyb3BFeGFjdGx5ICxcbiAgZHJvcFdoaWxlICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBmaWx0ZXJOb3QgLFxuICByZWplY3QgLFxuICBmaWx0ZXJOb3RXaXRoSW5kZXggLFxuICByZWplY3RXaXRoSW5kZXggLFxuICBtYXBPcHRpb24gLFxuICBjYXRPcHRpb24gLFxuICBwYXJ0aXRpb24gLFxuICBzcGxpdEF0ICxcbiAgcHJlcGVuZFRvQWxsICxcbiAgaW50ZXJzcGVyc2UgLFxuICByZXBsaWNhdGUgLFxuICB6aXAgLFxuICB6aXBXaXRoICxcbiAgemlwV2l0aEluZGV4ICxcbiAgdW56aXAgLFxuICBzb3J0V2l0aEludCAsXG4gIHNvcnRCeSAsXG4gIHNvcnQgLFxuICBkaXN0aW5jdEJ5ICxcbiAgcmVtb3ZlRmlyc3RCeSAsXG4gIHJlbW92ZUVhY2hCeSAsXG4gIGRpc3RpbmN0ICxcbiAgcmVtb3ZlRmlyc3QgLFxuICByZW1vdmVFYWNoICxcbiAgcmVwbGFjZUF0ICxcbiAgc2NhbkxlZnQgLFxuICBzY2FuUmlnaHQgLFxuICBpbnNlcnRBdCAsXG4gIHVwZGF0ZUF0ICxcbiAgc3dhcEF0ICxcbiAgcmVtb3ZlQXQgLFxuICBjaHVuayAsXG4gIFxufVxuLyogUmVsdWRlX0ludCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBBcnJheSRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvQXJyYXkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFN0cmluZyRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvU3RyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9CYXNlIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0Jhc2UgZnJvbSBcIi4vYXJyYXkvUmVsdWRlX0FycmF5X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0luc3RhbmNlcyBmcm9tIFwiLi9saXN0L1JlbHVkZV9MaXN0X0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGVtcHR5TGF6eShwYXJhbSkge1xuICByZXR1cm4gLyogW10gKi8wO1xufVxuXG5mdW5jdGlvbiBmcm9tTGlzdChhKSB7XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiB0b0xpc3QoYSkge1xuICByZXR1cm4gYTtcbn1cblxudmFyIG1rU3RyaW5nID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmludGVyY2FsYXRlLCBTdHJpbmckQnNCYXN0ZXQuTW9ub2lkKTtcblxudmFyIExpc3QgPSB7XG4gIGVtcHR5TGF6eTogZW1wdHlMYXp5LFxuICBsZW5ndGg6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5sZW5ndGgsXG4gIGlzRW1wdHk6IFJlbHVkZV9MaXN0X0Jhc2UuaXNFbXB0eSxcbiAgaXNOb3RFbXB0eTogUmVsdWRlX0xpc3RfQmFzZS5pc05vdEVtcHR5LFxuICBoZWFkOiBSZWx1ZGVfTGlzdF9CYXNlLmhlYWQsXG4gIHRhaWw6IFJlbHVkZV9MaXN0X0Jhc2UudGFpbCxcbiAgdGFpbE9yRW1wdHk6IFJlbHVkZV9MaXN0X0Jhc2UudGFpbE9yRW1wdHksXG4gIHVuY29uczogUmVsdWRlX0xpc3RfQmFzZS51bmNvbnMsXG4gIHByZXBlbmQ6IFJlbHVkZV9MaXN0X0Jhc2UucHJlcGVuZCxcbiAgYXBwZW5kOiBSZWx1ZGVfTGlzdF9CYXNlLmFwcGVuZCxcbiAgY29uY2F0OiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29uY2F0LFxuICByZXZlcnNlOiBSZWx1ZGVfTGlzdF9CYXNlLnJldmVyc2UsXG4gIG1rU3RyaW5nOiBta1N0cmluZyxcbiAgemlwOiBSZWx1ZGVfTGlzdF9CYXNlLnppcCxcbiAgemlwV2l0aDogUmVsdWRlX0xpc3RfQmFzZS56aXBXaXRoLFxuICBmcm9tQXJyYXk6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mcm9tQXJyYXksXG4gIGZyb21MaXN0OiBmcm9tTGlzdCxcbiAgdG9BcnJheTogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnRvQXJyYXksXG4gIHRvTGlzdDogdG9MaXN0LFxuICBlcUJ5OiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZXFCeSxcbiAgc2hvd0J5OiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuc2hvd0J5LFxuICBGdW5jdG9yOiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRnVuY3RvcixcbiAgQXBwbHk6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5BcHBseSxcbiAgQXBwbGljYXRpdmU6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5BcHBsaWNhdGl2ZSxcbiAgTW9uYWQ6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Nb25hZCxcbiAgRm9sZGFibGU6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZSxcbiAgVHJhdmVyc2FibGU6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5UcmF2ZXJzYWJsZSxcbiAgRXE6IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5FcSxcbiAgU2hvdzogUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNob3dcbn07XG5cbmZ1bmN0aW9uIGVtcHR5TGF6eSQxKHBhcmFtKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5KGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoYSkge1xuICByZXR1cm4gYTtcbn1cblxudmFyIG1rU3RyaW5nJDEgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmludGVyY2FsYXRlLCBTdHJpbmckQnNCYXN0ZXQuTW9ub2lkKTtcblxudmFyICQkQXJyYXkgPSB7XG4gIGVtcHR5TGF6eTogZW1wdHlMYXp5JDEsXG4gIGxlbmd0aDogUmVsdWRlX0FycmF5X0Jhc2UubGVuZ3RoLFxuICBpc0VtcHR5OiBSZWx1ZGVfQXJyYXlfQmFzZS5pc0VtcHR5LFxuICBpc05vdEVtcHR5OiBSZWx1ZGVfQXJyYXlfQmFzZS5pc05vdEVtcHR5LFxuICBoZWFkOiBSZWx1ZGVfQXJyYXlfQmFzZS5oZWFkLFxuICB0YWlsOiBSZWx1ZGVfQXJyYXlfQmFzZS50YWlsLFxuICB0YWlsT3JFbXB0eTogUmVsdWRlX0FycmF5X0Jhc2UudGFpbE9yRW1wdHksXG4gIHVuY29uczogUmVsdWRlX0FycmF5X0Jhc2UudW5jb25zLFxuICBwcmVwZW5kOiBSZWx1ZGVfQXJyYXlfQmFzZS5wcmVwZW5kLFxuICBhcHBlbmQ6IFJlbHVkZV9BcnJheV9CYXNlLmFwcGVuZCxcbiAgY29uY2F0OiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbmNhdCxcbiAgcmV2ZXJzZTogUmVsdWRlX0FycmF5X0Jhc2UucmV2ZXJzZSxcbiAgbWtTdHJpbmc6IG1rU3RyaW5nJDEsXG4gIHppcDogUmVsdWRlX0FycmF5X0Jhc2UuemlwLFxuICB6aXBXaXRoOiBSZWx1ZGVfQXJyYXlfQmFzZS56aXBXaXRoLFxuICBmcm9tQXJyYXk6IGZyb21BcnJheSxcbiAgZnJvbUxpc3Q6IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZnJvbUxpc3QsXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIHRvTGlzdDogUmVsdWRlX0FycmF5X0luc3RhbmNlcy50b0xpc3QsXG4gIGVxQnk6IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZXFCeSxcbiAgc2hvd0J5OiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnNob3dCeSxcbiAgRnVuY3RvcjogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5GdW5jdG9yLFxuICBBcHBseTogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5BcHBseSxcbiAgQXBwbGljYXRpdmU6IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuQXBwbGljYXRpdmUsXG4gIE1vbmFkOiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLk1vbmFkLFxuICBGb2xkYWJsZTogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZSxcbiAgVHJhdmVyc2FibGU6IEFycmF5JEJzQmFzdGV0LlRyYXZlcnNhYmxlLFxuICBFcTogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5FcSxcbiAgU2hvdzogUmVsdWRlX0FycmF5X0luc3RhbmNlcy5TaG93XG59O1xuXG5leHBvcnQge1xuICBMaXN0ICxcbiAgJCRBcnJheSAsXG4gIFxufVxuLyogbWtTdHJpbmcgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9MaXN0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfTGlzdC5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9PcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9PcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9TZXF1ZW5jZSBmcm9tIFwiLi9SZWx1ZGVfU2VxdWVuY2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9CYXNlIGZyb20gXCIuL2FycmF5L1JlbHVkZV9BcnJheV9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0Jhc2UgZnJvbSBcIi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMgZnJvbSBcIi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIFdpdGhTZXF1ZW5jZShUYWlsU2VxdWVuY2UpIHtcbiAgdmFyIG9uZSA9IGZ1bmN0aW9uIChoZWFkKSB7XG4gICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgIEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5lbXB0eUxhenksIHVuZGVmaW5lZClcbiAgICAgICAgICBdO1xuICB9O1xuICB2YXIgbWFrZSA9IGZ1bmN0aW9uIChoZWFkLCB0YWlsU2VxdWVuY2UpIHtcbiAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgdGFpbFNlcXVlbmNlXG4gICAgICAgICAgXTtcbiAgfTtcbiAgdmFyIGZyb21TZXF1ZW5jZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICAgIHJldHVybiBCZWx0X09wdGlvbi5tYXAoQ3VycnkuXzEoVGFpbFNlcXVlbmNlLmhlYWQsIHNlcXVlbmNlKSwgKGZ1bmN0aW9uIChoZWFkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS50YWlsT3JFbXB0eSwgc2VxdWVuY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgfTtcbiAgdmFyIHRvU2VxdWVuY2UgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoVGFpbFNlcXVlbmNlLmNvbmNhdCwgQ3VycnkuXzEoVGFpbFNlcXVlbmNlLk1vbmFkLnB1cmUsIHBhcmFtWzBdKSwgcGFyYW1bMV0pO1xuICB9O1xuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbiAobGlzdCkge1xuICAgIGlmIChsaXN0KSB7XG4gICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgIGxpc3RbMF0sXG4gICAgICAgICAgICAgIEN1cnJ5Ll8xKFRhaWxTZXF1ZW5jZS5mcm9tTGlzdCwgbGlzdFsxXSlcbiAgICAgICAgICAgIF07XG4gICAgfVxuICAgIFxuICB9O1xuICB2YXIgZnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShUYWlsU2VxdWVuY2UuZnJvbUFycmF5LCBwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgfSksIFJlbHVkZV9BcnJheV9CYXNlLnVuY29ucyhhcnJheSkpO1xuICB9O1xuICB2YXIgY29ucyA9IGZ1bmN0aW9uIChoZWFkLCB0YWlsTm9uRW1wdHkpIHtcbiAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgdG9TZXF1ZW5jZSh0YWlsTm9uRW1wdHkpXG4gICAgICAgICAgXTtcbiAgfTtcbiAgdmFyIHVuY29ucyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgcGFyYW1bMV1cbiAgICAgICAgICBdO1xuICB9O1xuICB2YXIgaGVhZCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBwYXJhbVswXTtcbiAgfTtcbiAgdmFyIHRhaWwgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH07XG4gIHZhciBjb25jYXQgPSBmdW5jdGlvbiAobm9uRW1wdHkxLCBub25FbXB0eTIpIHtcbiAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICBoZWFkKG5vbkVtcHR5MSksXG4gICAgICAgICAgICBDdXJyeS5fMihUYWlsU2VxdWVuY2UuY29uY2F0LCB0YWlsKG5vbkVtcHR5MSksIHRvU2VxdWVuY2Uobm9uRW1wdHkyKSlcbiAgICAgICAgICBdO1xuICB9O1xuICB2YXIgU2VtaWdyb3VwQW55ID0ge1xuICAgIGFwcGVuZDogY29uY2F0XG4gIH07XG4gIHZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55KTtcbiAgdmFyIE1hZ21hQW55ID0ge1xuICAgIGFwcGVuZDogY29uY2F0XG4gIH07XG4gIHZhciByZWR1Y2VMZWZ0ID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8zKFRhaWxTZXF1ZW5jZS5Gb2xkYWJsZS5mb2xkX2xlZnQsIGYsIHBhcmFtWzBdLCBwYXJhbVsxXSk7XG4gIH07XG4gIHZhciBmb2xkTGVmdCA9IGZ1bmN0aW9uIChmLCBpbml0LCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMyhUYWlsU2VxdWVuY2UuRm9sZGFibGUuZm9sZF9sZWZ0LCBmLCBDdXJyeS5fMihmLCBpbml0LCBwYXJhbVswXSksIHBhcmFtWzFdKTtcbiAgfTtcbiAgdmFyIGZvbGRSaWdodCA9IGZ1bmN0aW9uIChmLCBpbml0LCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihmLCBwYXJhbVswXSwgQ3VycnkuXzMoVGFpbFNlcXVlbmNlLkZvbGRhYmxlLmZvbGRfcmlnaHQsIGYsIGluaXQsIHBhcmFtWzFdKSk7XG4gIH07XG4gIHZhciBGb2xkYWJsZV9Gb2xkX01hcCA9IGZ1bmN0aW9uIChmdW5hcmcpIHtcbiAgICB2YXIgVGFpbEZvbGRNYXAgPSBDdXJyeS5fMShUYWlsU2VxdWVuY2UuRm9sZGFibGUuRm9sZF9NYXAsIGZ1bmFyZyk7XG4gICAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFwcGVuZCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihUYWlsRm9sZE1hcC5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZGFibGVfRm9sZF9NYXBfQW55ID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBTZXF1ZW5jZUZvbGRNYXBBbnkgPSBDdXJyeS5fMShUYWlsU2VxdWVuY2UuRm9sZGFibGUuRm9sZF9NYXBfQW55LCBmdW5hcmcpO1xuICAgIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGZ1bmFyZy5hcHBlbmQsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSwgQ3VycnkuXzIoU2VxdWVuY2VGb2xkTWFwQW55LmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzID0gZnVuY3Rpb24gKGZ1bmFyZykge1xuICAgIHZhciBUYWlsRm9sZE1hcFBsdXMgPSBDdXJyeS5fMShUYWlsU2VxdWVuY2UuRm9sZGFibGUuRm9sZF9NYXBfUGx1cywgZnVuYXJnKTtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYWx0LCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFRhaWxGb2xkTWFwUGx1cy5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZGFibGUgPSB7XG4gICAgZm9sZF9sZWZ0OiBmb2xkTGVmdCxcbiAgICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQsXG4gICAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICAgIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLkZvbGRhYmxlRXh0ZW5zaW9ucyhGb2xkYWJsZSk7XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICBDdXJyeS5fMShmLCBwYXJhbVswXSksXG4gICAgICAgICAgICBDdXJyeS5fMihUYWlsU2VxdWVuY2UuTW9uYWQubWFwLCBmLCBwYXJhbVsxXSlcbiAgICAgICAgICBdO1xuICB9O1xuICB2YXIgRnVuY3RvciA9IHtcbiAgICBtYXA6IG1hcFxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGZmLCBmYSkge1xuICAgIHJldHVybiByZWR1Y2VMZWZ0KGNvbmNhdCwgbWFwKChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXAoZiwgZmEpO1xuICAgICAgICAgICAgICAgICAgICB9KSwgZmYpKTtcbiAgfTtcbiAgdmFyIEFwcGx5ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseVxuICB9O1xuICB2YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlFeHRlbnNpb25zKEFwcGx5KTtcbiAgdmFyIEFwcGxpY2F0aXZlID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBvbmVcbiAgfTtcbiAgdmFyIGluY2x1ZGUkNCA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG4gIHZhciBiaW5kID0gZnVuY3Rpb24gKG5vbkVtcHR5LCBmKSB7XG4gICAgcmV0dXJuIHJlZHVjZUxlZnQoY29uY2F0LCBtYXAoZiwgbm9uRW1wdHkpKTtcbiAgfTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBvbmUsXG4gICAgZmxhdF9tYXA6IGJpbmRcbiAgfTtcbiAgdmFyIGluY2x1ZGUkNSA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkRXh0ZW5zaW9ucyhNb25hZCk7XG4gIHZhciBta1N0cmluZyA9IGZ1bmN0aW9uIChkZWxpbSwgeHMpIHtcbiAgICByZXR1cm4geHNbMF0gKyAoZGVsaW0gKyBDdXJyeS5fMihUYWlsU2VxdWVuY2UubWtTdHJpbmcsIGRlbGltLCB4c1sxXSkpO1xuICB9O1xuICB2YXIgcmV2ZXJzZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHZhciBoZWFkID0gcGFyYW1bMF07XG4gICAgcmV0dXJuIFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2VMYXp5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoVGFpbFNlcXVlbmNlLmVtcHR5TGF6eSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8yKFRhaWxTZXF1ZW5jZS5hcHBlbmQsIGhlYWQsIHBhcmFtWzFdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShUYWlsU2VxdWVuY2UudW5jb25zLCBDdXJyeS5fMShUYWlsU2VxdWVuY2UucmV2ZXJzZSwgcGFyYW1bMV0pKSkpO1xuICB9O1xuICB2YXIgZXFCeSA9IGZ1bmN0aW9uIChlcUEsIHhzLCB5cykge1xuICAgIGlmIChDdXJyeS5fMihlcUEsIHhzWzBdLCB5c1swXSkpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMyhUYWlsU2VxdWVuY2UuZXFCeSwgZXFBLCB4c1sxXSwgeXNbMV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoZXFBLCB4cywgeXMpIHtcbiAgICByZXR1cm4gZXFCeShlcUEuZXEsIHhzLCB5cyk7XG4gIH07XG4gIHZhciBFcSA9IGZ1bmN0aW9uIChFcUEpIHtcbiAgICB2YXIgZXEgPSBmdW5jdGlvbiAoeHMsIHlzKSB7XG4gICAgICByZXR1cm4gZXFCeShFcUEuZXEsIHhzLCB5cyk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXE6IGVxXG4gICAgICAgICAgfTtcbiAgfTtcbiAgdmFyIHNob3dCeSA9IGZ1bmN0aW9uIChzaG93WCwgeHMpIHtcbiAgICB2YXIgc3RyaW5ncyA9IG1hcChzaG93WCwgeHMpO1xuICAgIHJldHVybiBcIlshXCIgKyAobWtTdHJpbmcoXCIsIFwiLCBzdHJpbmdzKSArIFwiIV1cIik7XG4gIH07XG4gIHZhciBzaG93ID0gZnVuY3Rpb24gKHNob3dBLCB4cykge1xuICAgIHJldHVybiBzaG93Qnkoc2hvd0Euc2hvdywgeHMpO1xuICB9O1xuICB2YXIgU2hvdyA9IGZ1bmN0aW9uIChTKSB7XG4gICAgdmFyIHNob3cgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHJldHVybiBzaG93QnkoUy5zaG93LCBwYXJhbSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBXaXRoQXBwbGljYXRpdmUgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBUYWlsVHJhdmVyc2FibGUgPSBDdXJyeS5fMShUYWlsU2VxdWVuY2UuVHJhdmVyc2FibGUsIEEpO1xuICAgIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKEEuYXBwbHksIEN1cnJ5Ll8yKEEubWFwLCBtYWtlLCBDdXJyeS5fMShmLCBwYXJhbVswXSkpLCBDdXJyeS5fMihUYWlsVHJhdmVyc2FibGUudHJhdmVyc2UsIGYsIHBhcmFtWzFdKSk7XG4gICAgfTtcbiAgICB2YXIgc2VxdWVuY2UgPSBmdW5jdGlvbiAoZmEpIHtcbiAgICAgIHJldHVybiB0cmF2ZXJzZSgoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgICB9KSwgZmEpO1xuICAgIH07XG4gICAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwID0gRm9sZGFibGVfRm9sZF9NYXA7XG4gICAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSA9IEZvbGRhYmxlX0ZvbGRfTWFwX0FueTtcbiAgICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXBfUGx1cyA9IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXM7XG4gICAgdmFyIFRyYXZlcnNhYmxlID0ge1xuICAgICAgbWFwOiBtYXAsXG4gICAgICBmb2xkX2xlZnQ6IGZvbGRMZWZ0LFxuICAgICAgZm9sZF9yaWdodDogZm9sZFJpZ2h0LFxuICAgICAgRm9sZF9NYXA6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwLFxuICAgICAgRm9sZF9NYXBfQW55OiBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgICBGb2xkX01hcF9QbHVzOiBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgc2VxdWVuY2U6IHNlcXVlbmNlXG4gICAgfTtcbiAgICBSZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZS5UcmF2ZXJzYWJsZUV4dGVuc2lvbnMoVHJhdmVyc2FibGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGUsXG4gICAgICAgICAgICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gICAgICAgICAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgICAgICAgICB9O1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG9uZTogb25lLFxuICAgICAgICAgIG1ha2U6IG1ha2UsXG4gICAgICAgICAgZnJvbVNlcXVlbmNlOiBmcm9tU2VxdWVuY2UsXG4gICAgICAgICAgdG9TZXF1ZW5jZTogdG9TZXF1ZW5jZSxcbiAgICAgICAgICBmcm9tTGlzdDogZnJvbUxpc3QsXG4gICAgICAgICAgZnJvbUFycmF5OiBmcm9tQXJyYXksXG4gICAgICAgICAgY29uczogY29ucyxcbiAgICAgICAgICB1bmNvbnM6IHVuY29ucyxcbiAgICAgICAgICBoZWFkOiBoZWFkLFxuICAgICAgICAgIHRhaWw6IHRhaWwsXG4gICAgICAgICAgY29uY2F0OiBjb25jYXQsXG4gICAgICAgICAgU2VtaWdyb3VwQW55OiBTZW1pZ3JvdXBBbnksXG4gICAgICAgICAgY29uY2F0TmFtZWQ6IGluY2x1ZGUuY29uY2F0TmFtZWQsXG4gICAgICAgICAgTWFnbWFBbnk6IE1hZ21hQW55LFxuICAgICAgICAgIHJlZHVjZUxlZnQ6IHJlZHVjZUxlZnQsXG4gICAgICAgICAgZm9sZExlZnQ6IGZvbGRMZWZ0LFxuICAgICAgICAgIGZvbGRSaWdodDogZm9sZFJpZ2h0LFxuICAgICAgICAgIEZvbGRhYmxlOiBGb2xkYWJsZSxcbiAgICAgICAgICBCc0ZvbGRhYmxlRXh0ZW5zaW9uczogaW5jbHVkZSQxLkJzRm9sZGFibGVFeHRlbnNpb25zLFxuICAgICAgICAgIGFueTogaW5jbHVkZSQxLmFueSxcbiAgICAgICAgICBjb250YWluc0J5OiBpbmNsdWRlJDEuY29udGFpbnNCeSxcbiAgICAgICAgICBjb250YWluczogaW5jbHVkZSQxLmNvbnRhaW5zLFxuICAgICAgICAgIGluZGV4T2ZCeTogaW5jbHVkZSQxLmluZGV4T2ZCeSxcbiAgICAgICAgICBpbmRleE9mOiBpbmNsdWRlJDEuaW5kZXhPZixcbiAgICAgICAgICBtaW5CeTogaW5jbHVkZSQxLm1pbkJ5LFxuICAgICAgICAgIG1pbjogaW5jbHVkZSQxLm1pbixcbiAgICAgICAgICBtYXhCeTogaW5jbHVkZSQxLm1heEJ5LFxuICAgICAgICAgIG1heDogaW5jbHVkZSQxLm1heCxcbiAgICAgICAgICBjb3VudEJ5OiBpbmNsdWRlJDEuY291bnRCeSxcbiAgICAgICAgICBsZW5ndGg6IGluY2x1ZGUkMS5sZW5ndGgsXG4gICAgICAgICAgc2l6ZTogaW5jbHVkZSQxLnNpemUsXG4gICAgICAgICAgY291bnQ6IGluY2x1ZGUkMS5jb3VudCxcbiAgICAgICAgICBmb3JFYWNoOiBpbmNsdWRlJDEuZm9yRWFjaCxcbiAgICAgICAgICBmb3JFYWNoV2l0aEluZGV4OiBpbmNsdWRlJDEuZm9yRWFjaFdpdGhJbmRleCxcbiAgICAgICAgICBmaW5kOiBpbmNsdWRlJDEuZmluZCxcbiAgICAgICAgICBmaW5kV2l0aEluZGV4OiBpbmNsdWRlJDEuZmluZFdpdGhJbmRleCxcbiAgICAgICAgICB0b0xpc3Q6IGluY2x1ZGUkMS50b0xpc3QsXG4gICAgICAgICAgdG9BcnJheTogaW5jbHVkZSQxLnRvQXJyYXksXG4gICAgICAgICAgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zOiBpbmNsdWRlJDEuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogaW5jbHVkZSQxLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmb2xkTWFwOiBpbmNsdWRlJDEuZm9sZE1hcCxcbiAgICAgICAgICBmb2xkV2l0aE1vbm9pZDogaW5jbHVkZSQxLmZvbGRXaXRoTW9ub2lkLFxuICAgICAgICAgIGludGVyY2FsYXRlOiBpbmNsdWRlJDEuaW50ZXJjYWxhdGUsXG4gICAgICAgICAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IGluY2x1ZGUkMS5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyxcbiAgICAgICAgICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9uczogaW5jbHVkZSQxLkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlRXFFeHRlbnNpb25zOiBpbmNsdWRlJDEuRm9sZGFibGVFcUV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVPcmRFeHRlbnNpb25zOiBpbmNsdWRlJDEuRm9sZGFibGVPcmRFeHRlbnNpb25zLFxuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgQnNGdW5jdG9yRXh0ZW5zaW9uczogaW5jbHVkZSQyLkJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogaW5jbHVkZSQyLmZsaXBNYXAsXG4gICAgICAgICAgJCR2b2lkOiBpbmNsdWRlJDIuJCR2b2lkLFxuICAgICAgICAgIHZvaWRSaWdodDogaW5jbHVkZSQyLnZvaWRSaWdodCxcbiAgICAgICAgICB2b2lkTGVmdDogaW5jbHVkZSQyLnZvaWRMZWZ0LFxuICAgICAgICAgIGZsYXA6IGluY2x1ZGUkMi5mbGFwLFxuICAgICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgQnNBcHBseUV4dGVuc2lvbnM6IGluY2x1ZGUkMy5Cc0FwcGx5RXh0ZW5zaW9ucyxcbiAgICAgICAgICBhcHBseUZpcnN0OiBpbmNsdWRlJDMuYXBwbHlGaXJzdCxcbiAgICAgICAgICBhcHBseVNlY29uZDogaW5jbHVkZSQzLmFwcGx5U2Vjb25kLFxuICAgICAgICAgIG1hcDI6IGluY2x1ZGUkMy5tYXAyLFxuICAgICAgICAgIG1hcDM6IGluY2x1ZGUkMy5tYXAzLFxuICAgICAgICAgIG1hcDQ6IGluY2x1ZGUkMy5tYXA0LFxuICAgICAgICAgIG1hcDU6IGluY2x1ZGUkMy5tYXA1LFxuICAgICAgICAgIHR1cGxlMjogaW5jbHVkZSQzLnR1cGxlMixcbiAgICAgICAgICB0dXBsZTM6IGluY2x1ZGUkMy50dXBsZTMsXG4gICAgICAgICAgdHVwbGU0OiBpbmNsdWRlJDMudHVwbGU0LFxuICAgICAgICAgIHR1cGxlNTogaW5jbHVkZSQzLnR1cGxlNSxcbiAgICAgICAgICBtYXBUdXBsZTI6IGluY2x1ZGUkMy5tYXBUdXBsZTIsXG4gICAgICAgICAgbWFwVHVwbGUzOiBpbmNsdWRlJDMubWFwVHVwbGUzLFxuICAgICAgICAgIG1hcFR1cGxlNDogaW5jbHVkZSQzLm1hcFR1cGxlNCxcbiAgICAgICAgICBtYXBUdXBsZTU6IGluY2x1ZGUkMy5tYXBUdXBsZTUsXG4gICAgICAgICAgcHVyZTogb25lLFxuICAgICAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSxcbiAgICAgICAgICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9uczogaW5jbHVkZSQ0LkJzQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICAgICAgICAgIGxpZnRBMTogaW5jbHVkZSQ0LmxpZnRBMSxcbiAgICAgICAgICBhbGw6IGluY2x1ZGUkNC5hbGwsXG4gICAgICAgICAgYmluZDogYmluZCxcbiAgICAgICAgICBNb25hZDogTW9uYWQsXG4gICAgICAgICAgQnNNb25hZEV4dGVuc2lvbnM6IGluY2x1ZGUkNS5Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGF0TWFwOiBpbmNsdWRlJDUuZmxhdE1hcCxcbiAgICAgICAgICBmbGF0dGVuOiBpbmNsdWRlJDUuZmxhdHRlbixcbiAgICAgICAgICBjb21wb3NlS2xlaXNsaTogaW5jbHVkZSQ1LmNvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGZsaXBDb21wb3NlS2xlaXNsaTogaW5jbHVkZSQ1LmZsaXBDb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBsaWZ0TTE6IGluY2x1ZGUkNS5saWZ0TTEsXG4gICAgICAgICAgd2hlbl86IGluY2x1ZGUkNS53aGVuXyxcbiAgICAgICAgICB1bmxlc3M6IGluY2x1ZGUkNS51bmxlc3MsXG4gICAgICAgICAgbWtTdHJpbmc6IG1rU3RyaW5nLFxuICAgICAgICAgIHJldmVyc2U6IHJldmVyc2UsXG4gICAgICAgICAgZXFCeTogZXFCeSxcbiAgICAgICAgICBlcTogZXEsXG4gICAgICAgICAgRXE6IEVxLFxuICAgICAgICAgIHNob3dCeTogc2hvd0J5LFxuICAgICAgICAgIHNob3c6IHNob3csXG4gICAgICAgICAgU2hvdzogU2hvdyxcbiAgICAgICAgICBXaXRoQXBwbGljYXRpdmU6IFdpdGhBcHBsaWNhdGl2ZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBvbmUoaGVhZCkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgaGVhZCxcbiAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5lbXB0eUxhenksIHVuZGVmaW5lZClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbWFrZShoZWFkLCB0YWlsU2VxdWVuY2UpIHtcbiAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgdGFpbFNlcXVlbmNlXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGZyb21TZXF1ZW5jZShzZXF1ZW5jZSkge1xuICByZXR1cm4gQmVsdF9PcHRpb24ubWFwKEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LmhlYWQsIHNlcXVlbmNlKSwgKGZ1bmN0aW9uIChoZWFkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LnRhaWxPckVtcHR5LCBzZXF1ZW5jZSlcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHRvU2VxdWVuY2UocGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LmNvbmNhdCwgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuTW9uYWQucHVyZSwgcGFyYW1bMF0pLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0KGxpc3QpIHtcbiAgaWYgKGxpc3QpIHtcbiAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICBsaXN0WzBdLFxuICAgICAgICAgICAgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuZnJvbUxpc3QsIGxpc3RbMV0pXG4gICAgICAgICAgXTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5KGFycmF5KSB7XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuZnJvbUFycmF5LCBwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9KSwgUmVsdWRlX0FycmF5X0Jhc2UudW5jb25zKGFycmF5KSk7XG59XG5cbmZ1bmN0aW9uIGNvbnMoaGVhZCwgdGFpbE5vbkVtcHR5KSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkLFxuICAgICAgICAgIHRvU2VxdWVuY2UodGFpbE5vbkVtcHR5KVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB1bmNvbnMocGFyYW0pIHtcbiAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgIHBhcmFtWzFdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhlYWQocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzBdO1xufVxuXG5mdW5jdGlvbiB0YWlsKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxuZnVuY3Rpb24gY29uY2F0KG5vbkVtcHR5MSwgbm9uRW1wdHkyKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkKG5vbkVtcHR5MSksXG4gICAgICAgICAgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLkxpc3QuY29uY2F0LCB0YWlsKG5vbkVtcHR5MSksIHRvU2VxdWVuY2Uobm9uRW1wdHkyKSlcbiAgICAgICAgXTtcbn1cblxudmFyIFNlbWlncm91cEFueSA9IHtcbiAgYXBwZW5kOiBjb25jYXRcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3VwQW55LlNlbWlncm91cEFueUV4dGVuc2lvbnMoU2VtaWdyb3VwQW55KTtcblxudmFyIE1hZ21hQW55ID0ge1xuICBhcHBlbmQ6IGNvbmNhdFxufTtcblxuZnVuY3Rpb24gcmVkdWNlTGVmdChmLCBwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX1NlcXVlbmNlLkxpc3QuRm9sZGFibGUuZm9sZF9sZWZ0LCBmLCBwYXJhbVswXSwgcGFyYW1bMV0pO1xufVxuXG5mdW5jdGlvbiBmb2xkTGVmdChmLCBpbml0LCBwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX1NlcXVlbmNlLkxpc3QuRm9sZGFibGUuZm9sZF9sZWZ0LCBmLCBDdXJyeS5fMihmLCBpbml0LCBwYXJhbVswXSksIHBhcmFtWzFdKTtcbn1cblxuZnVuY3Rpb24gZm9sZFJpZ2h0KGYsIGluaXQsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMihmLCBwYXJhbVswXSwgQ3VycnkuXzMoUmVsdWRlX1NlcXVlbmNlLkxpc3QuRm9sZGFibGUuZm9sZF9yaWdodCwgZiwgaW5pdCwgcGFyYW1bMV0pKTtcbn1cblxuZnVuY3Rpb24gRm9sZGFibGVfRm9sZF9NYXAoZnVuYXJnKSB7XG4gIHZhciBUYWlsRm9sZE1hcCA9IEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LkZvbGRhYmxlLkZvbGRfTWFwLCBmdW5hcmcpO1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFwcGVuZCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihUYWlsRm9sZE1hcC5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZGFibGVfRm9sZF9NYXBfQW55KGZ1bmFyZykge1xuICB2YXIgU2VxdWVuY2VGb2xkTWFwQW55ID0gQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuRm9sZGFibGUuRm9sZF9NYXBfQW55LCBmdW5hcmcpO1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFwcGVuZCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihTZXF1ZW5jZUZvbGRNYXBBbnkuZm9sZF9tYXAsIGYsIHBhcmFtWzFdKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMoZnVuYXJnKSB7XG4gIHZhciBUYWlsRm9sZE1hcFBsdXMgPSBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5Gb2xkYWJsZS5Gb2xkX01hcF9QbHVzLCBmdW5hcmcpO1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFsdCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihUYWlsRm9sZE1hcFBsdXMuZm9sZF9tYXAsIGYsIHBhcmFtWzFdKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgIH07XG59XG5cbnZhciBGb2xkYWJsZSA9IHtcbiAgZm9sZF9sZWZ0OiBmb2xkTGVmdCxcbiAgZm9sZF9yaWdodDogZm9sZFJpZ2h0LFxuICBGb2xkX01hcDogRm9sZGFibGVfRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkYWJsZV9Gb2xkX01hcF9QbHVzXG59O1xuXG52YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUuRm9sZGFibGVFeHRlbnNpb25zKEZvbGRhYmxlKTtcblxuZnVuY3Rpb24gbWFwKGYsIHBhcmFtKSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBDdXJyeS5fMShmLCBwYXJhbVswXSksXG4gICAgICAgICAgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLkxpc3QuTW9uYWQubWFwLCBmLCBwYXJhbVsxXSlcbiAgICAgICAgXTtcbn1cblxudmFyIEZ1bmN0b3IgPSB7XG4gIG1hcDogbWFwXG59O1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcblxuZnVuY3Rpb24gYXBwbHkoZmYsIGZhKSB7XG4gIHJldHVybiByZWR1Y2VMZWZ0KGNvbmNhdCwgbWFwKChmdW5jdGlvbiAoZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFwKGYsIGZhKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBmZikpO1xufVxuXG52YXIgQXBwbHkgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHlcbn07XG5cbnZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuXG52YXIgQXBwbGljYXRpdmUgPSB7XG4gIG1hcDogbWFwLFxuICBhcHBseTogYXBwbHksXG4gIHB1cmU6IG9uZVxufTtcblxudmFyIGluY2x1ZGUkNCA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG5cbmZ1bmN0aW9uIGJpbmQobm9uRW1wdHksIGYpIHtcbiAgcmV0dXJuIHJlZHVjZUxlZnQoY29uY2F0LCBtYXAoZiwgbm9uRW1wdHkpKTtcbn1cblxudmFyIE1vbmFkID0ge1xuICBtYXA6IG1hcCxcbiAgYXBwbHk6IGFwcGx5LFxuICBwdXJlOiBvbmUsXG4gIGZsYXRfbWFwOiBiaW5kXG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRFeHRlbnNpb25zKE1vbmFkKTtcblxuZnVuY3Rpb24gbWtTdHJpbmcoZGVsaW0sIHhzKSB7XG4gIHJldHVybiB4c1swXSArIChkZWxpbSArIEN1cnJ5Ll8yKFJlbHVkZV9TZXF1ZW5jZS5MaXN0Lm1rU3RyaW5nLCBkZWxpbSwgeHNbMV0pKTtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZShwYXJhbSkge1xuICB2YXIgaGVhZCA9IHBhcmFtWzBdO1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yRWxzZUxhenkoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5lbXB0eUxhenksIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICB9KSwgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8yKFJlbHVkZV9TZXF1ZW5jZS5MaXN0LmFwcGVuZCwgaGVhZCwgcGFyYW1bMV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QudW5jb25zLCBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuTGlzdC5yZXZlcnNlLCBwYXJhbVsxXSkpKSk7XG59XG5cbmZ1bmN0aW9uIGVxQnkoZXFBLCB4cywgeXMpIHtcbiAgaWYgKEN1cnJ5Ll8yKGVxQSwgeHNbMF0sIHlzWzBdKSkge1xuICAgIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuTGlzdC5lcUJ5LCBlcUEsIHhzWzFdLCB5c1sxXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVxKGVxQSwgeHMsIHlzKSB7XG4gIHJldHVybiBlcUJ5KGVxQS5lcSwgeHMsIHlzKTtcbn1cblxuZnVuY3Rpb24gRXEoRXFBKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uICh4cywgeXMpIHtcbiAgICByZXR1cm4gZXFCeShFcUEuZXEsIHhzLCB5cyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHNob3dCeShzaG93WCwgeHMpIHtcbiAgdmFyIHN0cmluZ3MgPSBtYXAoc2hvd1gsIHhzKTtcbiAgcmV0dXJuIFwiWyFcIiArIChta1N0cmluZyhcIiwgXCIsIHN0cmluZ3MpICsgXCIhXVwiKTtcbn1cblxuZnVuY3Rpb24gc2hvdyhzaG93QSwgeHMpIHtcbiAgcmV0dXJuIHNob3dCeShzaG93QS5zaG93LCB4cyk7XG59XG5cbmZ1bmN0aW9uIFNob3coUykge1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBzaG93QnkoUy5zaG93LCBwYXJhbSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBXaXRoQXBwbGljYXRpdmUoQSkge1xuICB2YXIgVGFpbFRyYXZlcnNhYmxlID0gQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLkxpc3QuVHJhdmVyc2FibGUsIEEpO1xuICB2YXIgdHJhdmVyc2UgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoQS5hcHBseSwgQ3VycnkuXzIoQS5tYXAsIG1ha2UsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSksIEN1cnJ5Ll8yKFRhaWxUcmF2ZXJzYWJsZS50cmF2ZXJzZSwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgdmFyIHNlcXVlbmNlID0gZnVuY3Rpb24gKGZhKSB7XG4gICAgcmV0dXJuIHRyYXZlcnNlKChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfSksIGZhKTtcbiAgfTtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwID0gRm9sZGFibGVfRm9sZF9NYXA7XG4gIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9BbnkgPSBGb2xkYWJsZV9Gb2xkX01hcF9Bbnk7XG4gIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzID0gRm9sZGFibGVfRm9sZF9NYXBfUGx1cztcbiAgdmFyIFRyYXZlcnNhYmxlID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGZvbGRfbGVmdDogZm9sZExlZnQsXG4gICAgZm9sZF9yaWdodDogZm9sZFJpZ2h0LFxuICAgIEZvbGRfTWFwOiBUcmF2ZXJzYWJsZV9Gb2xkX01hcCxcbiAgICBGb2xkX01hcF9Bbnk6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSxcbiAgICBGb2xkX01hcF9QbHVzOiBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuVHJhdmVyc2FibGVFeHRlbnNpb25zKFRyYXZlcnNhYmxlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGUsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG52YXIgTGlzdF9jb25jYXROYW1lZCA9IGluY2x1ZGUuY29uY2F0TmFtZWQ7XG5cbnZhciBMaXN0X0JzRm9sZGFibGVFeHRlbnNpb25zID0gaW5jbHVkZSQxLkJzRm9sZGFibGVFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9hbnkgPSBpbmNsdWRlJDEuYW55O1xuXG52YXIgTGlzdF9jb250YWluc0J5ID0gaW5jbHVkZSQxLmNvbnRhaW5zQnk7XG5cbnZhciBMaXN0X2NvbnRhaW5zID0gaW5jbHVkZSQxLmNvbnRhaW5zO1xuXG52YXIgTGlzdF9pbmRleE9mQnkgPSBpbmNsdWRlJDEuaW5kZXhPZkJ5O1xuXG52YXIgTGlzdF9pbmRleE9mID0gaW5jbHVkZSQxLmluZGV4T2Y7XG5cbnZhciBMaXN0X21pbkJ5ID0gaW5jbHVkZSQxLm1pbkJ5O1xuXG52YXIgTGlzdF9taW4gPSBpbmNsdWRlJDEubWluO1xuXG52YXIgTGlzdF9tYXhCeSA9IGluY2x1ZGUkMS5tYXhCeTtcblxudmFyIExpc3RfbWF4ID0gaW5jbHVkZSQxLm1heDtcblxudmFyIExpc3RfY291bnRCeSA9IGluY2x1ZGUkMS5jb3VudEJ5O1xuXG52YXIgTGlzdF9sZW5ndGggPSBpbmNsdWRlJDEubGVuZ3RoO1xuXG52YXIgTGlzdF9zaXplID0gaW5jbHVkZSQxLnNpemU7XG5cbnZhciBMaXN0X2NvdW50ID0gaW5jbHVkZSQxLmNvdW50O1xuXG52YXIgTGlzdF9mb3JFYWNoID0gaW5jbHVkZSQxLmZvckVhY2g7XG5cbnZhciBMaXN0X2ZvckVhY2hXaXRoSW5kZXggPSBpbmNsdWRlJDEuZm9yRWFjaFdpdGhJbmRleDtcblxudmFyIExpc3RfZmluZCA9IGluY2x1ZGUkMS5maW5kO1xuXG52YXIgTGlzdF9maW5kV2l0aEluZGV4ID0gaW5jbHVkZSQxLmZpbmRXaXRoSW5kZXg7XG5cbnZhciBMaXN0X3RvTGlzdCA9IGluY2x1ZGUkMS50b0xpc3Q7XG5cbnZhciBMaXN0X3RvQXJyYXkgPSBpbmNsdWRlJDEudG9BcnJheTtcblxudmFyIExpc3RfRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zID0gaW5jbHVkZSQxLkZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucztcblxudmFyIExpc3RfRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gaW5jbHVkZSQxLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIExpc3RfZm9sZE1hcCA9IGluY2x1ZGUkMS5mb2xkTWFwO1xuXG52YXIgTGlzdF9mb2xkV2l0aE1vbm9pZCA9IGluY2x1ZGUkMS5mb2xkV2l0aE1vbm9pZDtcblxudmFyIExpc3RfaW50ZXJjYWxhdGUgPSBpbmNsdWRlJDEuaW50ZXJjYWxhdGU7XG5cbnZhciBMaXN0X0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gaW5jbHVkZSQxLkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9Gb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMS5Gb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucztcblxudmFyIExpc3RfRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBpbmNsdWRlJDEuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X0ZvbGRhYmxlT3JkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMS5Gb2xkYWJsZU9yZEV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X0JzRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDIuQnNGdW5jdG9yRXh0ZW5zaW9ucztcblxudmFyIExpc3RfZmxpcE1hcCA9IGluY2x1ZGUkMi5mbGlwTWFwO1xuXG52YXIgTGlzdF92b2lkID0gaW5jbHVkZSQyLiQkdm9pZDtcblxudmFyIExpc3Rfdm9pZFJpZ2h0ID0gaW5jbHVkZSQyLnZvaWRSaWdodDtcblxudmFyIExpc3Rfdm9pZExlZnQgPSBpbmNsdWRlJDIudm9pZExlZnQ7XG5cbnZhciBMaXN0X2ZsYXAgPSBpbmNsdWRlJDIuZmxhcDtcblxudmFyIExpc3RfQnNBcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDMuQnNBcHBseUV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X2FwcGx5Rmlyc3QgPSBpbmNsdWRlJDMuYXBwbHlGaXJzdDtcblxudmFyIExpc3RfYXBwbHlTZWNvbmQgPSBpbmNsdWRlJDMuYXBwbHlTZWNvbmQ7XG5cbnZhciBMaXN0X21hcDIgPSBpbmNsdWRlJDMubWFwMjtcblxudmFyIExpc3RfbWFwMyA9IGluY2x1ZGUkMy5tYXAzO1xuXG52YXIgTGlzdF9tYXA0ID0gaW5jbHVkZSQzLm1hcDQ7XG5cbnZhciBMaXN0X21hcDUgPSBpbmNsdWRlJDMubWFwNTtcblxudmFyIExpc3RfdHVwbGUyID0gaW5jbHVkZSQzLnR1cGxlMjtcblxudmFyIExpc3RfdHVwbGUzID0gaW5jbHVkZSQzLnR1cGxlMztcblxudmFyIExpc3RfdHVwbGU0ID0gaW5jbHVkZSQzLnR1cGxlNDtcblxudmFyIExpc3RfdHVwbGU1ID0gaW5jbHVkZSQzLnR1cGxlNTtcblxudmFyIExpc3RfbWFwVHVwbGUyID0gaW5jbHVkZSQzLm1hcFR1cGxlMjtcblxudmFyIExpc3RfbWFwVHVwbGUzID0gaW5jbHVkZSQzLm1hcFR1cGxlMztcblxudmFyIExpc3RfbWFwVHVwbGU0ID0gaW5jbHVkZSQzLm1hcFR1cGxlNDtcblxudmFyIExpc3RfbWFwVHVwbGU1ID0gaW5jbHVkZSQzLm1hcFR1cGxlNTtcblxudmFyIExpc3RfQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBMaXN0X2xpZnRBMSA9IGluY2x1ZGUkNC5saWZ0QTE7XG5cbnZhciBMaXN0X2FsbCA9IGluY2x1ZGUkNC5hbGw7XG5cbnZhciBMaXN0X0JzTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgTGlzdF9mbGF0TWFwID0gaW5jbHVkZSQ1LmZsYXRNYXA7XG5cbnZhciBMaXN0X2ZsYXR0ZW4gPSBpbmNsdWRlJDUuZmxhdHRlbjtcblxudmFyIExpc3RfY29tcG9zZUtsZWlzbGkgPSBpbmNsdWRlJDUuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBMaXN0X2ZsaXBDb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkNS5mbGlwQ29tcG9zZUtsZWlzbGk7XG5cbnZhciBMaXN0X2xpZnRNMSA9IGluY2x1ZGUkNS5saWZ0TTE7XG5cbnZhciBMaXN0X3doZW5fID0gaW5jbHVkZSQ1LndoZW5fO1xuXG52YXIgTGlzdF91bmxlc3MgPSBpbmNsdWRlJDUudW5sZXNzO1xuXG52YXIgTGlzdCA9IHtcbiAgb25lOiBvbmUsXG4gIG1ha2U6IG1ha2UsXG4gIGZyb21TZXF1ZW5jZTogZnJvbVNlcXVlbmNlLFxuICB0b1NlcXVlbmNlOiB0b1NlcXVlbmNlLFxuICBmcm9tTGlzdDogZnJvbUxpc3QsXG4gIGZyb21BcnJheTogZnJvbUFycmF5LFxuICBjb25zOiBjb25zLFxuICB1bmNvbnM6IHVuY29ucyxcbiAgaGVhZDogaGVhZCxcbiAgdGFpbDogdGFpbCxcbiAgY29uY2F0OiBjb25jYXQsXG4gIFNlbWlncm91cEFueTogU2VtaWdyb3VwQW55LFxuICBjb25jYXROYW1lZDogTGlzdF9jb25jYXROYW1lZCxcbiAgTWFnbWFBbnk6IE1hZ21hQW55LFxuICByZWR1Y2VMZWZ0OiByZWR1Y2VMZWZ0LFxuICBmb2xkTGVmdDogZm9sZExlZnQsXG4gIGZvbGRSaWdodDogZm9sZFJpZ2h0LFxuICBGb2xkYWJsZTogRm9sZGFibGUsXG4gIEJzRm9sZGFibGVFeHRlbnNpb25zOiBMaXN0X0JzRm9sZGFibGVFeHRlbnNpb25zLFxuICBhbnk6IExpc3RfYW55LFxuICBjb250YWluc0J5OiBMaXN0X2NvbnRhaW5zQnksXG4gIGNvbnRhaW5zOiBMaXN0X2NvbnRhaW5zLFxuICBpbmRleE9mQnk6IExpc3RfaW5kZXhPZkJ5LFxuICBpbmRleE9mOiBMaXN0X2luZGV4T2YsXG4gIG1pbkJ5OiBMaXN0X21pbkJ5LFxuICBtaW46IExpc3RfbWluLFxuICBtYXhCeTogTGlzdF9tYXhCeSxcbiAgbWF4OiBMaXN0X21heCxcbiAgY291bnRCeTogTGlzdF9jb3VudEJ5LFxuICBsZW5ndGg6IExpc3RfbGVuZ3RoLFxuICBzaXplOiBMaXN0X3NpemUsXG4gIGNvdW50OiBMaXN0X2NvdW50LFxuICBmb3JFYWNoOiBMaXN0X2ZvckVhY2gsXG4gIGZvckVhY2hXaXRoSW5kZXg6IExpc3RfZm9yRWFjaFdpdGhJbmRleCxcbiAgZmluZDogTGlzdF9maW5kLFxuICBmaW5kV2l0aEluZGV4OiBMaXN0X2ZpbmRXaXRoSW5kZXgsXG4gIHRvTGlzdDogTGlzdF90b0xpc3QsXG4gIHRvQXJyYXk6IExpc3RfdG9BcnJheSxcbiAgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zOiBMaXN0X0ZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyxcbiAgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zOiBMaXN0X0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyxcbiAgZm9sZE1hcDogTGlzdF9mb2xkTWFwLFxuICBmb2xkV2l0aE1vbm9pZDogTGlzdF9mb2xkV2l0aE1vbm9pZCxcbiAgaW50ZXJjYWxhdGU6IExpc3RfaW50ZXJjYWxhdGUsXG4gIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zOiBMaXN0X0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9uczogTGlzdF9Gb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyxcbiAgRm9sZGFibGVFcUV4dGVuc2lvbnM6IExpc3RfRm9sZGFibGVFcUV4dGVuc2lvbnMsXG4gIEZvbGRhYmxlT3JkRXh0ZW5zaW9uczogTGlzdF9Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsXG4gIG1hcDogbWFwLFxuICBGdW5jdG9yOiBGdW5jdG9yLFxuICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBMaXN0X0JzRnVuY3RvckV4dGVuc2lvbnMsXG4gIGZsaXBNYXA6IExpc3RfZmxpcE1hcCxcbiAgJCR2b2lkOiBMaXN0X3ZvaWQsXG4gIHZvaWRSaWdodDogTGlzdF92b2lkUmlnaHQsXG4gIHZvaWRMZWZ0OiBMaXN0X3ZvaWRMZWZ0LFxuICBmbGFwOiBMaXN0X2ZsYXAsXG4gIGFwcGx5OiBhcHBseSxcbiAgQXBwbHk6IEFwcGx5LFxuICBCc0FwcGx5RXh0ZW5zaW9uczogTGlzdF9Cc0FwcGx5RXh0ZW5zaW9ucyxcbiAgYXBwbHlGaXJzdDogTGlzdF9hcHBseUZpcnN0LFxuICBhcHBseVNlY29uZDogTGlzdF9hcHBseVNlY29uZCxcbiAgbWFwMjogTGlzdF9tYXAyLFxuICBtYXAzOiBMaXN0X21hcDMsXG4gIG1hcDQ6IExpc3RfbWFwNCxcbiAgbWFwNTogTGlzdF9tYXA1LFxuICB0dXBsZTI6IExpc3RfdHVwbGUyLFxuICB0dXBsZTM6IExpc3RfdHVwbGUzLFxuICB0dXBsZTQ6IExpc3RfdHVwbGU0LFxuICB0dXBsZTU6IExpc3RfdHVwbGU1LFxuICBtYXBUdXBsZTI6IExpc3RfbWFwVHVwbGUyLFxuICBtYXBUdXBsZTM6IExpc3RfbWFwVHVwbGUzLFxuICBtYXBUdXBsZTQ6IExpc3RfbWFwVHVwbGU0LFxuICBtYXBUdXBsZTU6IExpc3RfbWFwVHVwbGU1LFxuICBwdXJlOiBvbmUsXG4gIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IExpc3RfQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gIGxpZnRBMTogTGlzdF9saWZ0QTEsXG4gIGFsbDogTGlzdF9hbGwsXG4gIGJpbmQ6IGJpbmQsXG4gIE1vbmFkOiBNb25hZCxcbiAgQnNNb25hZEV4dGVuc2lvbnM6IExpc3RfQnNNb25hZEV4dGVuc2lvbnMsXG4gIGZsYXRNYXA6IExpc3RfZmxhdE1hcCxcbiAgZmxhdHRlbjogTGlzdF9mbGF0dGVuLFxuICBjb21wb3NlS2xlaXNsaTogTGlzdF9jb21wb3NlS2xlaXNsaSxcbiAgZmxpcENvbXBvc2VLbGVpc2xpOiBMaXN0X2ZsaXBDb21wb3NlS2xlaXNsaSxcbiAgbGlmdE0xOiBMaXN0X2xpZnRNMSxcbiAgd2hlbl86IExpc3Rfd2hlbl8sXG4gIHVubGVzczogTGlzdF91bmxlc3MsXG4gIG1rU3RyaW5nOiBta1N0cmluZyxcbiAgcmV2ZXJzZTogcmV2ZXJzZSxcbiAgZXFCeTogZXFCeSxcbiAgZXE6IGVxLFxuICBFcTogRXEsXG4gIHNob3dCeTogc2hvd0J5LFxuICBzaG93OiBzaG93LFxuICBTaG93OiBTaG93LFxuICBXaXRoQXBwbGljYXRpdmU6IFdpdGhBcHBsaWNhdGl2ZVxufTtcblxuZnVuY3Rpb24gb25lJDEoaGVhZCkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgaGVhZCxcbiAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5lbXB0eUxhenksIHVuZGVmaW5lZClcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbWFrZSQxKGhlYWQsIHRhaWxTZXF1ZW5jZSkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgaGVhZCxcbiAgICAgICAgICB0YWlsU2VxdWVuY2VcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZnJvbVNlcXVlbmNlJDEoc2VxdWVuY2UpIHtcbiAgcmV0dXJuIEJlbHRfT3B0aW9uLm1hcChDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5oZWFkLCBzZXF1ZW5jZSksIChmdW5jdGlvbiAoaGVhZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS50YWlsT3JFbXB0eSwgc2VxdWVuY2UpXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiB0b1NlcXVlbmNlJDEocGFyYW0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LmNvbmNhdCwgQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuTW9uYWQucHVyZSwgcGFyYW1bMF0pLCBwYXJhbVsxXSk7XG59XG5cbmZ1bmN0aW9uIGZyb21MaXN0JDEobGlzdCkge1xuICBpZiAobGlzdCkge1xuICAgIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICAgIGxpc3RbMF0sXG4gICAgICAgICAgICBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5mcm9tTGlzdCwgbGlzdFsxXSlcbiAgICAgICAgICBdO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkkMShhcnJheSkge1xuICByZXR1cm4gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LmZyb21BcnJheSwgcGFyYW1bMV0pXG4gICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9BcnJheV9CYXNlLnVuY29ucyhhcnJheSkpO1xufVxuXG5mdW5jdGlvbiBjb25zJDEoaGVhZCwgdGFpbE5vbkVtcHR5KSB7XG4gIHJldHVybiAvKiBOb25FbXB0eSAqL1tcbiAgICAgICAgICBoZWFkLFxuICAgICAgICAgIHRvU2VxdWVuY2UkMSh0YWlsTm9uRW1wdHkpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHVuY29ucyQxKHBhcmFtKSB7XG4gIHJldHVybiAvKiB0dXBsZSAqL1tcbiAgICAgICAgICBwYXJhbVswXSxcbiAgICAgICAgICBwYXJhbVsxXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBoZWFkJDEocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzBdO1xufVxuXG5mdW5jdGlvbiB0YWlsJDEocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzFdO1xufVxuXG5mdW5jdGlvbiBjb25jYXQkMShub25FbXB0eTEsIG5vbkVtcHR5Mikge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgaGVhZCQxKG5vbkVtcHR5MSksXG4gICAgICAgICAgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuY29uY2F0LCB0YWlsJDEobm9uRW1wdHkxKSwgdG9TZXF1ZW5jZSQxKG5vbkVtcHR5MikpXG4gICAgICAgIF07XG59XG5cbnZhciBTZW1pZ3JvdXBBbnkkMSA9IHtcbiAgYXBwZW5kOiBjb25jYXQkMVxufTtcblxudmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cEFueS5TZW1pZ3JvdXBBbnlFeHRlbnNpb25zKFNlbWlncm91cEFueSQxKTtcblxudmFyIE1hZ21hQW55JDEgPSB7XG4gIGFwcGVuZDogY29uY2F0JDFcbn07XG5cbmZ1bmN0aW9uIHJlZHVjZUxlZnQkMShmLCBwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuRm9sZGFibGUuZm9sZF9sZWZ0LCBmLCBwYXJhbVswXSwgcGFyYW1bMV0pO1xufVxuXG5mdW5jdGlvbiBmb2xkTGVmdCQxKGYsIGluaXQsIHBhcmFtKSB7XG4gIHJldHVybiBDdXJyeS5fMyhSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5Gb2xkYWJsZS5mb2xkX2xlZnQsIGYsIEN1cnJ5Ll8yKGYsIGluaXQsIHBhcmFtWzBdKSwgcGFyYW1bMV0pO1xufVxuXG5mdW5jdGlvbiBmb2xkUmlnaHQkMShmLCBpbml0LCBwYXJhbSkge1xuICByZXR1cm4gQ3VycnkuXzIoZiwgcGFyYW1bMF0sIEN1cnJ5Ll8zKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LkZvbGRhYmxlLmZvbGRfcmlnaHQsIGYsIGluaXQsIHBhcmFtWzFdKSk7XG59XG5cbmZ1bmN0aW9uIEZvbGRhYmxlX0ZvbGRfTWFwJDEoZnVuYXJnKSB7XG4gIHZhciBUYWlsRm9sZE1hcCA9IEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LkZvbGRhYmxlLkZvbGRfTWFwLCBmdW5hcmcpO1xuICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgcGFyYW0pIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZnVuYXJnLmFwcGVuZCwgQ3VycnkuXzEoZiwgcGFyYW1bMF0pLCBDdXJyeS5fMihUYWlsRm9sZE1hcC5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZGFibGVfRm9sZF9NYXBfQW55JDEoZnVuYXJnKSB7XG4gIHZhciBTZXF1ZW5jZUZvbGRNYXBBbnkgPSBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5Gb2xkYWJsZS5Gb2xkX01hcF9BbnksIGZ1bmFyZyk7XG4gIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBwYXJhbSkge1xuICAgIHJldHVybiBDdXJyeS5fMihmdW5hcmcuYXBwZW5kLCBDdXJyeS5fMShmLCBwYXJhbVswXSksIEN1cnJ5Ll8yKFNlcXVlbmNlRm9sZE1hcEFueS5mb2xkX21hcCwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gRm9sZGFibGVfRm9sZF9NYXBfUGx1cyQxKGZ1bmFyZykge1xuICB2YXIgVGFpbEZvbGRNYXBQbHVzID0gQ3VycnkuXzEoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuRm9sZGFibGUuRm9sZF9NYXBfUGx1cywgZnVuYXJnKTtcbiAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGZ1bmFyZy5hbHQsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSwgQ3VycnkuXzIoVGFpbEZvbGRNYXBQbHVzLmZvbGRfbWFwLCBmLCBwYXJhbVsxXSkpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICB9O1xufVxuXG52YXIgRm9sZGFibGUkMSA9IHtcbiAgZm9sZF9sZWZ0OiBmb2xkTGVmdCQxLFxuICBmb2xkX3JpZ2h0OiBmb2xkUmlnaHQkMSxcbiAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwJDEsXG4gIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55JDEsXG4gIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMkMVxufTtcblxudmFyIGluY2x1ZGUkNyA9IFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLkZvbGRhYmxlRXh0ZW5zaW9ucyhGb2xkYWJsZSQxKTtcblxuZnVuY3Rpb24gbWFwJDEoZiwgcGFyYW0pIHtcbiAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSxcbiAgICAgICAgICBDdXJyeS5fMihSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS5Nb25hZC5tYXAsIGYsIHBhcmFtWzFdKVxuICAgICAgICBdO1xufVxuXG52YXIgRnVuY3RvciQxID0ge1xuICBtYXA6IG1hcCQxXG59O1xuXG52YXIgaW5jbHVkZSQ4ID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yJDEpO1xuXG5mdW5jdGlvbiBhcHBseSQxKGZmLCBmYSkge1xuICByZXR1cm4gcmVkdWNlTGVmdCQxKGNvbmNhdCQxLCBtYXAkMSgoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hcCQxKGYsIGZhKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBmZikpO1xufVxuXG52YXIgQXBwbHkkMSA9IHtcbiAgbWFwOiBtYXAkMSxcbiAgYXBwbHk6IGFwcGx5JDFcbn07XG5cbnZhciBpbmNsdWRlJDkgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkkMSk7XG5cbnZhciBBcHBsaWNhdGl2ZSQxID0ge1xuICBtYXA6IG1hcCQxLFxuICBhcHBseTogYXBwbHkkMSxcbiAgcHVyZTogb25lJDFcbn07XG5cbnZhciBpbmNsdWRlJDEwID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuQXBwbGljYXRpdmVFeHRlbnNpb25zKEFwcGxpY2F0aXZlJDEpO1xuXG5mdW5jdGlvbiBiaW5kJDEobm9uRW1wdHksIGYpIHtcbiAgcmV0dXJuIHJlZHVjZUxlZnQkMShjb25jYXQkMSwgbWFwJDEoZiwgbm9uRW1wdHkpKTtcbn1cblxudmFyIE1vbmFkJDEgPSB7XG4gIG1hcDogbWFwJDEsXG4gIGFwcGx5OiBhcHBseSQxLFxuICBwdXJlOiBvbmUkMSxcbiAgZmxhdF9tYXA6IGJpbmQkMVxufTtcblxudmFyIGluY2x1ZGUkMTEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQkMSk7XG5cbmZ1bmN0aW9uIG1rU3RyaW5nJDEoZGVsaW0sIHhzKSB7XG4gIHJldHVybiB4c1swXSArIChkZWxpbSArIEN1cnJ5Ll8yKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5Lm1rU3RyaW5nLCBkZWxpbSwgeHNbMV0pKTtcbn1cblxuZnVuY3Rpb24gcmV2ZXJzZSQxKHBhcmFtKSB7XG4gIHZhciBoZWFkID0gcGFyYW1bMF07XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlTGF6eSgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE5vbkVtcHR5ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LmVtcHR5TGF6eSwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzIoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuYXBwZW5kLCBoZWFkLCBwYXJhbVsxXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMShSZWx1ZGVfU2VxdWVuY2UuJCRBcnJheS51bmNvbnMsIEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LnJldmVyc2UsIHBhcmFtWzFdKSkpKTtcbn1cblxuZnVuY3Rpb24gZXFCeSQxKGVxQSwgeHMsIHlzKSB7XG4gIGlmIChDdXJyeS5fMihlcUEsIHhzWzBdLCB5c1swXSkpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX1NlcXVlbmNlLiQkQXJyYXkuZXFCeSwgZXFBLCB4c1sxXSwgeXNbMV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlcSQxKGVxQSwgeHMsIHlzKSB7XG4gIHJldHVybiBlcUJ5JDEoZXFBLmVxLCB4cywgeXMpO1xufVxuXG5mdW5jdGlvbiBFcSQxKEVxQSkge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoeHMsIHlzKSB7XG4gICAgcmV0dXJuIGVxQnkkMShFcUEuZXEsIHhzLCB5cyk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHNob3dCeSQxKHNob3dYLCB4cykge1xuICB2YXIgc3RyaW5ncyA9IG1hcCQxKHNob3dYLCB4cyk7XG4gIHJldHVybiBcIlshXCIgKyAobWtTdHJpbmckMShcIiwgXCIsIHN0cmluZ3MpICsgXCIhXVwiKTtcbn1cblxuZnVuY3Rpb24gc2hvdyQxKHNob3dBLCB4cykge1xuICByZXR1cm4gc2hvd0J5JDEoc2hvd0Euc2hvdywgeHMpO1xufVxuXG5mdW5jdGlvbiBTaG93JDEoUykge1xuICB2YXIgc2hvdyA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBzaG93QnkkMShTLnNob3csIHBhcmFtKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBzaG93OiBzaG93XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIFdpdGhBcHBsaWNhdGl2ZSQxKEEpIHtcbiAgdmFyIFRhaWxUcmF2ZXJzYWJsZSA9IEN1cnJ5Ll8xKFJlbHVkZV9TZXF1ZW5jZS4kJEFycmF5LlRyYXZlcnNhYmxlLCBBKTtcbiAgdmFyIHRyYXZlcnNlID0gZnVuY3Rpb24gKGYsIHBhcmFtKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKEEuYXBwbHksIEN1cnJ5Ll8yKEEubWFwLCBtYWtlJDEsIEN1cnJ5Ll8xKGYsIHBhcmFtWzBdKSksIEN1cnJ5Ll8yKFRhaWxUcmF2ZXJzYWJsZS50cmF2ZXJzZSwgZiwgcGFyYW1bMV0pKTtcbiAgfTtcbiAgdmFyIHNlcXVlbmNlID0gZnVuY3Rpb24gKGZhKSB7XG4gICAgcmV0dXJuIHRyYXZlcnNlKChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICAgICAgfSksIGZhKTtcbiAgfTtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwID0gRm9sZGFibGVfRm9sZF9NYXAkMTtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSA9IEZvbGRhYmxlX0ZvbGRfTWFwX0FueSQxO1xuICB2YXIgVHJhdmVyc2FibGVfRm9sZF9NYXBfUGx1cyA9IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMkMTtcbiAgdmFyIFRyYXZlcnNhYmxlID0ge1xuICAgIG1hcDogbWFwJDEsXG4gICAgZm9sZF9sZWZ0OiBmb2xkTGVmdCQxLFxuICAgIGZvbGRfcmlnaHQ6IGZvbGRSaWdodCQxLFxuICAgIEZvbGRfTWFwOiBUcmF2ZXJzYWJsZV9Gb2xkX01hcCxcbiAgICBGb2xkX01hcF9Bbnk6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSxcbiAgICBGb2xkX01hcF9QbHVzOiBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuVHJhdmVyc2FibGVFeHRlbnNpb25zKFRyYXZlcnNhYmxlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGUsXG4gICAgICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiB0b05vbkVtcHR5TGlzdChwYXJhbSkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgQmVsdF9MaXN0LmZyb21BcnJheShwYXJhbVsxXSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZnJvbU5vbkVtcHR5TGlzdChwYXJhbSkge1xuICByZXR1cm4gLyogTm9uRW1wdHkgKi9bXG4gICAgICAgICAgcGFyYW1bMF0sXG4gICAgICAgICAgQmVsdF9MaXN0LnRvQXJyYXkocGFyYW1bMV0pXG4gICAgICAgIF07XG59XG5cbnZhciBBcnJheV9jb25jYXROYW1lZCA9IGluY2x1ZGUkNi5jb25jYXROYW1lZDtcblxudmFyIEFycmF5X0JzRm9sZGFibGVFeHRlbnNpb25zID0gaW5jbHVkZSQ3LkJzRm9sZGFibGVFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfYW55ID0gaW5jbHVkZSQ3LmFueTtcblxudmFyIEFycmF5X2NvbnRhaW5zQnkgPSBpbmNsdWRlJDcuY29udGFpbnNCeTtcblxudmFyIEFycmF5X2NvbnRhaW5zID0gaW5jbHVkZSQ3LmNvbnRhaW5zO1xuXG52YXIgQXJyYXlfaW5kZXhPZkJ5ID0gaW5jbHVkZSQ3LmluZGV4T2ZCeTtcblxudmFyIEFycmF5X2luZGV4T2YgPSBpbmNsdWRlJDcuaW5kZXhPZjtcblxudmFyIEFycmF5X21pbkJ5ID0gaW5jbHVkZSQ3Lm1pbkJ5O1xuXG52YXIgQXJyYXlfbWluID0gaW5jbHVkZSQ3Lm1pbjtcblxudmFyIEFycmF5X21heEJ5ID0gaW5jbHVkZSQ3Lm1heEJ5O1xuXG52YXIgQXJyYXlfbWF4ID0gaW5jbHVkZSQ3Lm1heDtcblxudmFyIEFycmF5X2NvdW50QnkgPSBpbmNsdWRlJDcuY291bnRCeTtcblxudmFyIEFycmF5X2xlbmd0aCA9IGluY2x1ZGUkNy5sZW5ndGg7XG5cbnZhciBBcnJheV9zaXplID0gaW5jbHVkZSQ3LnNpemU7XG5cbnZhciBBcnJheV9jb3VudCA9IGluY2x1ZGUkNy5jb3VudDtcblxudmFyIEFycmF5X2ZvckVhY2ggPSBpbmNsdWRlJDcuZm9yRWFjaDtcblxudmFyIEFycmF5X2ZvckVhY2hXaXRoSW5kZXggPSBpbmNsdWRlJDcuZm9yRWFjaFdpdGhJbmRleDtcblxudmFyIEFycmF5X2ZpbmQgPSBpbmNsdWRlJDcuZmluZDtcblxudmFyIEFycmF5X2ZpbmRXaXRoSW5kZXggPSBpbmNsdWRlJDcuZmluZFdpdGhJbmRleDtcblxudmFyIEFycmF5X3RvTGlzdCA9IGluY2x1ZGUkNy50b0xpc3Q7XG5cbnZhciBBcnJheV90b0FycmF5ID0gaW5jbHVkZSQ3LnRvQXJyYXk7XG5cbnZhciBBcnJheV9Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gaW5jbHVkZSQ3LkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIEFycmF5X2ZvbGRNYXAgPSBpbmNsdWRlJDcuZm9sZE1hcDtcblxudmFyIEFycmF5X2ZvbGRXaXRoTW9ub2lkID0gaW5jbHVkZSQ3LmZvbGRXaXRoTW9ub2lkO1xuXG52YXIgQXJyYXlfaW50ZXJjYWxhdGUgPSBpbmNsdWRlJDcuaW50ZXJjYWxhdGU7XG5cbnZhciBBcnJheV9Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNy5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEFycmF5X0ZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ3LkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9Gb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDcuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfQnNGdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkOC5Cc0Z1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfZmxpcE1hcCA9IGluY2x1ZGUkOC5mbGlwTWFwO1xuXG52YXIgQXJyYXlfdm9pZCA9IGluY2x1ZGUkOC4kJHZvaWQ7XG5cbnZhciBBcnJheV92b2lkUmlnaHQgPSBpbmNsdWRlJDgudm9pZFJpZ2h0O1xuXG52YXIgQXJyYXlfdm9pZExlZnQgPSBpbmNsdWRlJDgudm9pZExlZnQ7XG5cbnZhciBBcnJheV9mbGFwID0gaW5jbHVkZSQ4LmZsYXA7XG5cbnZhciBBcnJheV9Cc0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkOS5Cc0FwcGx5RXh0ZW5zaW9ucztcblxudmFyIEFycmF5X2FwcGx5Rmlyc3QgPSBpbmNsdWRlJDkuYXBwbHlGaXJzdDtcblxudmFyIEFycmF5X2FwcGx5U2Vjb25kID0gaW5jbHVkZSQ5LmFwcGx5U2Vjb25kO1xuXG52YXIgQXJyYXlfbWFwMiA9IGluY2x1ZGUkOS5tYXAyO1xuXG52YXIgQXJyYXlfbWFwMyA9IGluY2x1ZGUkOS5tYXAzO1xuXG52YXIgQXJyYXlfbWFwNCA9IGluY2x1ZGUkOS5tYXA0O1xuXG52YXIgQXJyYXlfbWFwNSA9IGluY2x1ZGUkOS5tYXA1O1xuXG52YXIgQXJyYXlfdHVwbGUyID0gaW5jbHVkZSQ5LnR1cGxlMjtcblxudmFyIEFycmF5X3R1cGxlMyA9IGluY2x1ZGUkOS50dXBsZTM7XG5cbnZhciBBcnJheV90dXBsZTQgPSBpbmNsdWRlJDkudHVwbGU0O1xuXG52YXIgQXJyYXlfdHVwbGU1ID0gaW5jbHVkZSQ5LnR1cGxlNTtcblxudmFyIEFycmF5X21hcFR1cGxlMiA9IGluY2x1ZGUkOS5tYXBUdXBsZTI7XG5cbnZhciBBcnJheV9tYXBUdXBsZTMgPSBpbmNsdWRlJDkubWFwVHVwbGUzO1xuXG52YXIgQXJyYXlfbWFwVHVwbGU0ID0gaW5jbHVkZSQ5Lm1hcFR1cGxlNDtcblxudmFyIEFycmF5X21hcFR1cGxlNSA9IGluY2x1ZGUkOS5tYXBUdXBsZTU7XG5cbnZhciBBcnJheV9Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMTAuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBBcnJheV9saWZ0QTEgPSBpbmNsdWRlJDEwLmxpZnRBMTtcblxudmFyIEFycmF5X2FsbCA9IGluY2x1ZGUkMTAuYWxsO1xuXG52YXIgQXJyYXlfQnNNb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDExLkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgQXJyYXlfZmxhdE1hcCA9IGluY2x1ZGUkMTEuZmxhdE1hcDtcblxudmFyIEFycmF5X2ZsYXR0ZW4gPSBpbmNsdWRlJDExLmZsYXR0ZW47XG5cbnZhciBBcnJheV9jb21wb3NlS2xlaXNsaSA9IGluY2x1ZGUkMTEuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBBcnJheV9mbGlwQ29tcG9zZUtsZWlzbGkgPSBpbmNsdWRlJDExLmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIEFycmF5X2xpZnRNMSA9IGluY2x1ZGUkMTEubGlmdE0xO1xuXG52YXIgQXJyYXlfd2hlbl8gPSBpbmNsdWRlJDExLndoZW5fO1xuXG52YXIgQXJyYXlfdW5sZXNzID0gaW5jbHVkZSQxMS51bmxlc3M7XG5cbnZhciAkJEFycmF5ID0ge1xuICBvbmU6IG9uZSQxLFxuICBtYWtlOiBtYWtlJDEsXG4gIGZyb21TZXF1ZW5jZTogZnJvbVNlcXVlbmNlJDEsXG4gIHRvU2VxdWVuY2U6IHRvU2VxdWVuY2UkMSxcbiAgZnJvbUxpc3Q6IGZyb21MaXN0JDEsXG4gIGZyb21BcnJheTogZnJvbUFycmF5JDEsXG4gIGNvbnM6IGNvbnMkMSxcbiAgdW5jb25zOiB1bmNvbnMkMSxcbiAgaGVhZDogaGVhZCQxLFxuICB0YWlsOiB0YWlsJDEsXG4gIGNvbmNhdDogY29uY2F0JDEsXG4gIFNlbWlncm91cEFueTogU2VtaWdyb3VwQW55JDEsXG4gIGNvbmNhdE5hbWVkOiBBcnJheV9jb25jYXROYW1lZCxcbiAgTWFnbWFBbnk6IE1hZ21hQW55JDEsXG4gIHJlZHVjZUxlZnQ6IHJlZHVjZUxlZnQkMSxcbiAgZm9sZExlZnQ6IGZvbGRMZWZ0JDEsXG4gIGZvbGRSaWdodDogZm9sZFJpZ2h0JDEsXG4gIEZvbGRhYmxlOiBGb2xkYWJsZSQxLFxuICBCc0ZvbGRhYmxlRXh0ZW5zaW9uczogQXJyYXlfQnNGb2xkYWJsZUV4dGVuc2lvbnMsXG4gIGFueTogQXJyYXlfYW55LFxuICBjb250YWluc0J5OiBBcnJheV9jb250YWluc0J5LFxuICBjb250YWluczogQXJyYXlfY29udGFpbnMsXG4gIGluZGV4T2ZCeTogQXJyYXlfaW5kZXhPZkJ5LFxuICBpbmRleE9mOiBBcnJheV9pbmRleE9mLFxuICBtaW5CeTogQXJyYXlfbWluQnksXG4gIG1pbjogQXJyYXlfbWluLFxuICBtYXhCeTogQXJyYXlfbWF4QnksXG4gIG1heDogQXJyYXlfbWF4LFxuICBjb3VudEJ5OiBBcnJheV9jb3VudEJ5LFxuICBsZW5ndGg6IEFycmF5X2xlbmd0aCxcbiAgc2l6ZTogQXJyYXlfc2l6ZSxcbiAgY291bnQ6IEFycmF5X2NvdW50LFxuICBmb3JFYWNoOiBBcnJheV9mb3JFYWNoLFxuICBmb3JFYWNoV2l0aEluZGV4OiBBcnJheV9mb3JFYWNoV2l0aEluZGV4LFxuICBmaW5kOiBBcnJheV9maW5kLFxuICBmaW5kV2l0aEluZGV4OiBBcnJheV9maW5kV2l0aEluZGV4LFxuICB0b0xpc3Q6IEFycmF5X3RvTGlzdCxcbiAgdG9BcnJheTogQXJyYXlfdG9BcnJheSxcbiAgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zOiBBcnJheV9Gb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogQXJyYXlfRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLFxuICBmb2xkTWFwOiBBcnJheV9mb2xkTWFwLFxuICBmb2xkV2l0aE1vbm9pZDogQXJyYXlfZm9sZFdpdGhNb25vaWQsXG4gIGludGVyY2FsYXRlOiBBcnJheV9pbnRlcmNhbGF0ZSxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IEFycmF5X0ZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9uczogQXJyYXlfRm9sZGFibGVNb25hZEV4dGVuc2lvbnMsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zOiBBcnJheV9Gb2xkYWJsZUVxRXh0ZW5zaW9ucyxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zOiBBcnJheV9Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsXG4gIG1hcDogbWFwJDEsXG4gIEZ1bmN0b3I6IEZ1bmN0b3IkMSxcbiAgQnNGdW5jdG9yRXh0ZW5zaW9uczogQXJyYXlfQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgZmxpcE1hcDogQXJyYXlfZmxpcE1hcCxcbiAgJCR2b2lkOiBBcnJheV92b2lkLFxuICB2b2lkUmlnaHQ6IEFycmF5X3ZvaWRSaWdodCxcbiAgdm9pZExlZnQ6IEFycmF5X3ZvaWRMZWZ0LFxuICBmbGFwOiBBcnJheV9mbGFwLFxuICBhcHBseTogYXBwbHkkMSxcbiAgQXBwbHk6IEFwcGx5JDEsXG4gIEJzQXBwbHlFeHRlbnNpb25zOiBBcnJheV9Cc0FwcGx5RXh0ZW5zaW9ucyxcbiAgYXBwbHlGaXJzdDogQXJyYXlfYXBwbHlGaXJzdCxcbiAgYXBwbHlTZWNvbmQ6IEFycmF5X2FwcGx5U2Vjb25kLFxuICBtYXAyOiBBcnJheV9tYXAyLFxuICBtYXAzOiBBcnJheV9tYXAzLFxuICBtYXA0OiBBcnJheV9tYXA0LFxuICBtYXA1OiBBcnJheV9tYXA1LFxuICB0dXBsZTI6IEFycmF5X3R1cGxlMixcbiAgdHVwbGUzOiBBcnJheV90dXBsZTMsXG4gIHR1cGxlNDogQXJyYXlfdHVwbGU0LFxuICB0dXBsZTU6IEFycmF5X3R1cGxlNSxcbiAgbWFwVHVwbGUyOiBBcnJheV9tYXBUdXBsZTIsXG4gIG1hcFR1cGxlMzogQXJyYXlfbWFwVHVwbGUzLFxuICBtYXBUdXBsZTQ6IEFycmF5X21hcFR1cGxlNCxcbiAgbWFwVHVwbGU1OiBBcnJheV9tYXBUdXBsZTUsXG4gIHB1cmU6IG9uZSQxLFxuICBBcHBsaWNhdGl2ZTogQXBwbGljYXRpdmUkMSxcbiAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IEFycmF5X0JzQXBwbGljYXRpdmVFeHRlbnNpb25zLFxuICBsaWZ0QTE6IEFycmF5X2xpZnRBMSxcbiAgYWxsOiBBcnJheV9hbGwsXG4gIGJpbmQ6IGJpbmQkMSxcbiAgTW9uYWQ6IE1vbmFkJDEsXG4gIEJzTW9uYWRFeHRlbnNpb25zOiBBcnJheV9Cc01vbmFkRXh0ZW5zaW9ucyxcbiAgZmxhdE1hcDogQXJyYXlfZmxhdE1hcCxcbiAgZmxhdHRlbjogQXJyYXlfZmxhdHRlbixcbiAgY29tcG9zZUtsZWlzbGk6IEFycmF5X2NvbXBvc2VLbGVpc2xpLFxuICBmbGlwQ29tcG9zZUtsZWlzbGk6IEFycmF5X2ZsaXBDb21wb3NlS2xlaXNsaSxcbiAgbGlmdE0xOiBBcnJheV9saWZ0TTEsXG4gIHdoZW5fOiBBcnJheV93aGVuXyxcbiAgdW5sZXNzOiBBcnJheV91bmxlc3MsXG4gIG1rU3RyaW5nOiBta1N0cmluZyQxLFxuICByZXZlcnNlOiByZXZlcnNlJDEsXG4gIGVxQnk6IGVxQnkkMSxcbiAgZXE6IGVxJDEsXG4gIEVxOiBFcSQxLFxuICBzaG93Qnk6IHNob3dCeSQxLFxuICBzaG93OiBzaG93JDEsXG4gIFNob3c6IFNob3ckMSxcbiAgV2l0aEFwcGxpY2F0aXZlOiBXaXRoQXBwbGljYXRpdmUkMSxcbiAgdG9Ob25FbXB0eUxpc3Q6IHRvTm9uRW1wdHlMaXN0LFxuICBmcm9tTm9uRW1wdHlMaXN0OiBmcm9tTm9uRW1wdHlMaXN0XG59O1xuXG5leHBvcnQge1xuICBXaXRoU2VxdWVuY2UgLFxuICBMaXN0ICxcbiAgJCRBcnJheSAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vYmogZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vYmouanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBPcHRpb24kQnNCYXN0ZXQgZnJvbSBcIi4vT3B0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGdW5jdGlvbiRCc0Jhc3RldCBmcm9tIFwiLi9GdW5jdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcblxuZnVuY3Rpb24gcmVzdWx0KGYsIGcsIGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGcsIGFbMF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMShmLCBhWzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBNYWdtYShULCBNKSB7XG4gIHZhciBhcHBlbmQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKCFiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgICAgXG4gICAgfSBlbHNlIGlmICghYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihNLmFwcGVuZCwgYVswXSwgYlswXSldKTtcbiAgICB9XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYVswXV0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBhcHBlbmQ6IGFwcGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNZWRpYWxfTWFnbWEoVCwgTSkge1xuICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmICghYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICAgIFxuICAgIH0gZWxzZSBpZiAoIWIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoTS5hcHBlbmQsIGFbMF0sIGJbMF0pXSk7XG4gICAgfVxuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2FbMF1dKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgYXBwZW5kOiBhcHBlbmRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gU2VtaWdyb3VwKFQsIFMpIHtcbiAgdmFyIGFwcGVuZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoIWIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGVsc2UgaWYgKCFiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKFMuYXBwZW5kLCBhWzBdLCBiWzBdKV0pO1xuICAgIH1cbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthWzBdXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGFwcGVuZDogYXBwZW5kXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZ1bmN0b3IoVCkge1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtYXA6IG1hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBiaW1hcChmLCBnLCBhKSB7XG4gIGlmIChhLnRhZykge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShnLCBhWzBdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICB9XG59XG5cbnZhciBCaWZ1bmN0b3IgPSB7XG4gIGJpbWFwOiBiaW1hcFxufTtcblxuZnVuY3Rpb24gQXBwbHkoVCkge1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFwcGx5ID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoZi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtmWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXAoZlswXSwgYSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGFwcGx5OiBhcHBseVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBcHBsaWNhdGl2ZShUKSB7XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChmLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2ZbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1hcChmWzBdLCBhKTtcbiAgICB9XG4gIH07XG4gIHZhciBwdXJlID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYV0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgICBwdXJlOiBwdXJlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE1vbmFkKFQpIHtcbiAgdmFyIG1hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoZiwgYVswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBhcHBseSA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgaWYgKGYudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZlswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbWFwKGZbMF0sIGEpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHB1cmUgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG4gIH07XG4gIHZhciBmbGF0X21hcCA9IGZ1bmN0aW9uIChhLCBmKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGFwcGx5OiBhcHBseSxcbiAgICAgICAgICBwdXJlOiBwdXJlLFxuICAgICAgICAgIGZsYXRfbWFwOiBmbGF0X21hcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBbHQoVCkge1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGFsdCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIGFsdDogYWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEV4dGVuZChUKSB7XG4gIHZhciBtYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2FbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhKV0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBleHRlbmQ6IGV4dGVuZFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBTaG93KE9rLCAkJEVycm9yKSB7XG4gIHZhciBzaG93ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIHJlc3VsdChPay5zaG93LCAkJEVycm9yLnNob3csIHBhcmFtKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBzaG93OiBzaG93XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEVxKE9rLCAkJEVycm9yKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8yKCQkRXJyb3IuZXEsIGFbMF0sIGJbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKE9rLmVxLCBhWzBdLCBiWzBdKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIE9yZChPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMigkJEVycm9yLmVxLCBhWzBdLCBiWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihPay5lcSwgYVswXSwgYlswXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBlcTogZXFcbiAgfTtcbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMigkJEVycm9yLmNvbXBhcmUsIGFbMF0sIGJbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoT2suY29tcGFyZSwgYVswXSwgYlswXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBpbmNsdWRlLmVxLFxuICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQm91bmRlZChPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMigkJEVycm9yLmVxLCBhWzBdLCBiWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihPay5lcSwgYVswXSwgYlswXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBlcTogZXFcbiAgfTtcbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMigkJEVycm9yLmNvbXBhcmUsIGFbMF0sIGJbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoT2suY29tcGFyZSwgYVswXSwgYlswXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZV9lcSA9IGluY2x1ZGUuZXE7XG4gIHZhciB0b3AgPSAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay50b3BdKTtcbiAgdmFyIGJvdHRvbSA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgZXE6IGluY2x1ZGVfZXEsXG4gICAgICAgICAgY29tcGFyZTogY29tcGFyZSxcbiAgICAgICAgICB0b3A6IHRvcCxcbiAgICAgICAgICBib3R0b206IGJvdHRvbVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBRdWFzaXJlZmxleGl2ZV9FcShPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBRdWFzaXJlZmxleGl2ZV9PcmQoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSB7XG4gICAgZXE6IGVxXG4gIH07XG4gIHZhciBjb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogaW5jbHVkZS5lcSxcbiAgICAgICAgICBjb21wYXJlOiBjb21wYXJlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEpvaW5fU2VtaWxhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLmpvaW4sIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYSRwcmltZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2suam9pbiwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgam9pbjogam9pblxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBNZWV0X1NlbWlsYXR0aWNlKE9rLCAkJEVycm9yKSB7XG4gIHZhciBtZWV0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoIWEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2JbMF1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5tZWV0LCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtZWV0OiBtZWV0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEJvdW5kZWRfSm9pbl9TZW1pbGF0dGljZShPaywgJCRFcnJvcikge1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSB7XG4gICAgam9pbjogam9pblxuICB9O1xuICB2YXIgYm90dG9tID0gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbJCRFcnJvci5ib3R0b21dKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBqb2luOiBpbmNsdWRlLmpvaW4sXG4gICAgICAgICAgYm90dG9tOiBib3R0b21cbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQm91bmRlZF9NZWV0X1NlbWlsYXR0aWNlKE9rLCAkJEVycm9yKSB7XG4gIHZhciBtZWV0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoIWEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2JbMF1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5tZWV0LCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSB7XG4gICAgbWVldDogbWVldFxuICB9O1xuICB2YXIgdG9wID0gLyogT2sgKi9CbG9jay5fXygwLCBbT2sudG9wXSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgbWVldDogaW5jbHVkZS5tZWV0LFxuICAgICAgICAgIHRvcDogdG9wXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIExhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLmpvaW4sIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYSRwcmltZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2suam9pbiwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLm1lZXQsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLm1lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0ge1xuICAgIG1lZXQ6IG1lZXRcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBqb2luOiBpbmNsdWRlLmpvaW4sXG4gICAgICAgICAgbWVldDogaW5jbHVkZSQxLm1lZXRcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQm91bmRlZF9MYXR0aWNlKE9rLCAkJEVycm9yKSB7XG4gIHZhciBqb2luID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5qb2luLCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2EkcHJpbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLmpvaW4sIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBqb2luOiBqb2luXG4gIH07XG4gIHZhciBib3R0b20gPSAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICB2YXIgaW5jbHVkZV9qb2luID0gaW5jbHVkZS5qb2luO1xuICB2YXIgbWVldCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKCFhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtiWzBdXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2subWVldCwgYVswXSwgYlswXSldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3IubWVldCwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2EkcHJpbWVdKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSB7XG4gICAgbWVldDogbWVldFxuICB9O1xuICB2YXIgdG9wID0gLyogT2sgKi9CbG9jay5fXygwLCBbT2sudG9wXSk7XG4gIHZhciBpbmNsdWRlX21lZXQgPSBpbmNsdWRlJDEubWVldDtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBqb2luOiBpbmNsdWRlX2pvaW4sXG4gICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgbWVldDogaW5jbHVkZV9tZWV0LFxuICAgICAgICAgIHRvcDogdG9wXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIERpc3RyaWJ1dGl2ZV9MYXR0aWNlKE9rLCAkJEVycm9yKSB7XG4gIHZhciBqb2luID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5qb2luLCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2JbMF1dKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUgPSBhWzBdO1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW2EkcHJpbWVdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKE9rLmpvaW4sIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBqb2luOiBqb2luXG4gIH07XG4gIHZhciBwYXJ0aWFsX2FyZyA9IHtcbiAgICBtZWV0OiBPay5tZWV0XG4gIH07XG4gIHZhciBtZWV0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoIWEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2JbMF1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihwYXJ0aWFsX2FyZy5tZWV0LCBhWzBdLCBiWzBdKV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzIoJCRFcnJvci5tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IHtcbiAgICBtZWV0OiBtZWV0XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgam9pbjogaW5jbHVkZS5qb2luLFxuICAgICAgICAgIG1lZXQ6IGluY2x1ZGUkMS5tZWV0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEJvdW5kZWRfRGlzdHJpYnV0aXZlX0xhdHRpY2UoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGpvaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLmpvaW4sIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYlswXV0pO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYSRwcmltZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzIoT2suam9pbiwgYSRwcmltZSwgYlswXSldKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbmNsdWRlID0ge1xuICAgIGpvaW46IGpvaW5cbiAgfTtcbiAgdmFyIGJvdHRvbSA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkRXJyb3IuYm90dG9tXSk7XG4gIHZhciBpbmNsdWRlX2pvaW4gPSBpbmNsdWRlLmpvaW47XG4gIHZhciBwYXJ0aWFsX2FyZ19tZWV0ID0gT2subWVldDtcbiAgdmFyIHBhcnRpYWxfYXJnX3RvcCA9IE9rLnRvcDtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnX21lZXQsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMigkJEVycm9yLm1lZXQsIGEkcHJpbWUsIGJbMF0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthJHByaW1lXSk7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0ge1xuICAgIG1lZXQ6IG1lZXRcbiAgfTtcbiAgdmFyIHRvcCA9IC8qIE9rICovQmxvY2suX18oMCwgW3BhcnRpYWxfYXJnX3RvcF0pO1xuICB2YXIgaW5jbHVkZV9tZWV0ID0gaW5jbHVkZSQxLm1lZXQ7XG4gIHJldHVybiB7XG4gICAgICAgICAgam9pbjogaW5jbHVkZV9qb2luLFxuICAgICAgICAgIGJvdHRvbTogYm90dG9tLFxuICAgICAgICAgIG1lZXQ6IGluY2x1ZGVfbWVldCxcbiAgICAgICAgICB0b3A6IHRvcFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBIZXl0aW5nX0FsZ2VicmEoT2ssICQkRXJyb3IpIHtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSB7XG4gICAgZXE6IGVxXG4gIH07XG4gIHZhciBjb21wYXJlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIGxlc3NfdGhhbiAqLzkzOTIxNDE1MTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICByZXR1cm4gLyogZ3JlYXRlcl90aGFuICovMTU5MDM5NDk0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogZXF1YWxfdG8gKi8tNzE4NTcyNDQyO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGVfZXEgPSBpbmNsdWRlLmVxO1xuICB2YXIgRXJyb3Jfam9pbiA9ICQkRXJyb3Iuam9pbjtcbiAgdmFyIEVycm9yX2JvdHRvbSA9ICQkRXJyb3IuYm90dG9tO1xuICB2YXIgRXJyb3JfbWVldCA9ICQkRXJyb3IubWVldDtcbiAgdmFyIEVycm9yX3RvcCA9ICQkRXJyb3IudG9wO1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihPay5qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IHtcbiAgICBqb2luOiBqb2luXG4gIH07XG4gIHZhciBib3R0b20gPSAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICB2YXIgaW5jbHVkZV9qb2luID0gaW5jbHVkZSQxLmpvaW47XG4gIHZhciBwYXJ0aWFsX2FyZ19tZWV0ID0gT2subWVldDtcbiAgdmFyIHBhcnRpYWxfYXJnX3RvcCA9IE9rLnRvcDtcbiAgdmFyIG1lZXQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmICghYS50YWcpIHtcbiAgICAgIGlmIChiLnRhZykge1xuICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYlswXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8yKHBhcnRpYWxfYXJnX21lZXQsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMihFcnJvcl9tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMiA9IHtcbiAgICBtZWV0OiBtZWV0XG4gIH07XG4gIHZhciB0b3AgPSAvKiBPayAqL0Jsb2NrLl9fKDAsIFtwYXJ0aWFsX2FyZ190b3BdKTtcbiAgdmFyIGluY2x1ZGVfbWVldCA9IGluY2x1ZGUkMi5tZWV0O1xuICB2YXIgaW5jbHVkZV9qb2luJDEgPSBpbmNsdWRlX2pvaW47XG4gIHZhciBpbmNsdWRlX2JvdHRvbSA9IGJvdHRvbTtcbiAgdmFyIGluY2x1ZGVfbWVldCQxID0gaW5jbHVkZV9tZWV0O1xuICB2YXIgaW5jbHVkZV90b3AgPSB0b3A7XG4gIHZhciBqb2luJDEgPSBpbmNsdWRlX2pvaW4kMTtcbiAgdmFyIG5vdCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICB2YXIgYSRwcmltZSA9IGFbMF07XG4gICAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lLCAkJEVycm9yLnRvcCkpIHtcbiAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW09rLmJvdHRvbV0pO1xuICAgICAgfSBlbHNlIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUsICQkRXJyb3IuYm90dG9tKSkge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbT2sudG9wXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGEkcHJpbWUkMSA9IGFbMF07XG4gICAgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSQxLCBPay50b3ApKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbJCRFcnJvci5ib3R0b21dKTtcbiAgICB9IGVsc2UgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSQxLCBPay5ib3R0b20pKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbJCRFcnJvci50b3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICB9O1xuICB2YXIgaW1wbGllcyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGpvaW4kMSwgbm90KGEpLCBiKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogaW5jbHVkZV9lcSxcbiAgICAgICAgICBjb21wYXJlOiBjb21wYXJlLFxuICAgICAgICAgIGpvaW46IGpvaW4kMSxcbiAgICAgICAgICBib3R0b206IGluY2x1ZGVfYm90dG9tLFxuICAgICAgICAgIG1lZXQ6IGluY2x1ZGVfbWVldCQxLFxuICAgICAgICAgIHRvcDogaW5jbHVkZV90b3AsXG4gICAgICAgICAgbm90OiBub3QsXG4gICAgICAgICAgaW1wbGllczogaW1wbGllc1xuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBJbnZvbHV0aXZlX0hleXRpbmdfQWxnZWJyYShPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBlcTogZXFcbiAgfTtcbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZV9lcSA9IGluY2x1ZGUuZXE7XG4gIHZhciBwYXJ0aWFsX2FyZ19qb2luID0gT2suam9pbjtcbiAgdmFyIHBhcnRpYWxfYXJnX2JvdHRvbSA9IE9rLmJvdHRvbTtcbiAgdmFyIHBhcnRpYWxfYXJnX21lZXQgPSBPay5tZWV0O1xuICB2YXIgcGFydGlhbF9hcmdfdG9wID0gT2sudG9wO1xuICB2YXIgRXJyb3Jfam9pbiA9ICQkRXJyb3Iuam9pbjtcbiAgdmFyIEVycm9yX2JvdHRvbSA9ICQkRXJyb3IuYm90dG9tO1xuICB2YXIgRXJyb3JfbWVldCA9ICQkRXJyb3IubWVldDtcbiAgdmFyIEVycm9yX3RvcCA9ICQkRXJyb3IudG9wO1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihwYXJ0aWFsX2FyZ19qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IHtcbiAgICBqb2luOiBqb2luXG4gIH07XG4gIHZhciBib3R0b20gPSAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICB2YXIgaW5jbHVkZV9qb2luID0gaW5jbHVkZSQxLmpvaW47XG4gIHZhciBwYXJ0aWFsX2FyZ19tZWV0JDEgPSBwYXJ0aWFsX2FyZ19tZWV0O1xuICB2YXIgcGFydGlhbF9hcmdfdG9wJDEgPSBwYXJ0aWFsX2FyZ190b3A7XG4gIHZhciBtZWV0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoIWEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2JbMF1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihwYXJ0aWFsX2FyZ19tZWV0JDEsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMihFcnJvcl9tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMiA9IHtcbiAgICBtZWV0OiBtZWV0XG4gIH07XG4gIHZhciB0b3AgPSAvKiBPayAqL0Jsb2NrLl9fKDAsIFtwYXJ0aWFsX2FyZ190b3AkMV0pO1xuICB2YXIgaW5jbHVkZV9tZWV0ID0gaW5jbHVkZSQyLm1lZXQ7XG4gIHZhciBpbmNsdWRlX2pvaW4kMSA9IGluY2x1ZGVfam9pbjtcbiAgdmFyIGluY2x1ZGVfYm90dG9tID0gYm90dG9tO1xuICB2YXIgaW5jbHVkZV9tZWV0JDEgPSBpbmNsdWRlX21lZXQ7XG4gIHZhciBpbmNsdWRlX3RvcCA9IHRvcDtcbiAgdmFyIGpvaW4kMSA9IGluY2x1ZGVfam9pbiQxO1xuICB2YXIgbm90ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUsICQkRXJyb3IudG9wKSkge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbT2suYm90dG9tXSk7XG4gICAgICB9IGVsc2UgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSwgJCRFcnJvci5ib3R0b20pKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay50b3BdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSQxID0gYVswXTtcbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lJDEsIE9rLnRvcCkpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICAgIH0gZWxzZSBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lJDEsIE9rLmJvdHRvbSkpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLnRvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH07XG4gIHZhciBpbXBsaWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoam9pbiQxLCBub3QoYSksIGIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBpbmNsdWRlX2VxLFxuICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmUsXG4gICAgICAgICAgam9pbjogam9pbiQxLFxuICAgICAgICAgIGJvdHRvbTogaW5jbHVkZV9ib3R0b20sXG4gICAgICAgICAgbWVldDogaW5jbHVkZV9tZWV0JDEsXG4gICAgICAgICAgdG9wOiBpbmNsdWRlX3RvcCxcbiAgICAgICAgICBub3Q6IG5vdCxcbiAgICAgICAgICBpbXBsaWVzOiBpbXBsaWVzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEJvb2xlYW5fQWxnZWJyYShPaywgJCRFcnJvcikge1xuICB2YXIgZXEgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZSA9IHtcbiAgICBlcTogZXFcbiAgfTtcbiAgdmFyIGNvbXBhcmUgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgaWYgKGIudGFnKSB7XG4gICAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gLyogbGVzc190aGFuICovOTM5MjE0MTUxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBncmVhdGVyX3RoYW4gKi8xNTkwMzk0OTQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBlcXVhbF90byAqLy03MTg1NzI0NDI7XG4gICAgfVxuICB9O1xuICB2YXIgaW5jbHVkZV9lcSA9IGluY2x1ZGUuZXE7XG4gIHZhciBwYXJ0aWFsX2FyZ19qb2luID0gT2suam9pbjtcbiAgdmFyIHBhcnRpYWxfYXJnX2JvdHRvbSA9IE9rLmJvdHRvbTtcbiAgdmFyIHBhcnRpYWxfYXJnX21lZXQgPSBPay5tZWV0O1xuICB2YXIgcGFydGlhbF9hcmdfdG9wID0gT2sudG9wO1xuICB2YXIgRXJyb3Jfam9pbiA9ICQkRXJyb3Iuam9pbjtcbiAgdmFyIEVycm9yX2JvdHRvbSA9ICQkRXJyb3IuYm90dG9tO1xuICB2YXIgRXJyb3JfbWVldCA9ICQkRXJyb3IubWVldDtcbiAgdmFyIEVycm9yX3RvcCA9ICQkRXJyb3IudG9wO1xuICB2YXIgam9pbiA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKCQkRXJyb3Iuam9pbiwgYVswXSwgYlswXSldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtiWzBdXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthJHByaW1lXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihwYXJ0aWFsX2FyZ19qb2luLCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IHtcbiAgICBqb2luOiBqb2luXG4gIH07XG4gIHZhciBib3R0b20gPSAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICB2YXIgaW5jbHVkZV9qb2luID0gaW5jbHVkZSQxLmpvaW47XG4gIHZhciBwYXJ0aWFsX2FyZ19tZWV0JDEgPSBwYXJ0aWFsX2FyZ19tZWV0O1xuICB2YXIgcGFydGlhbF9hcmdfdG9wJDEgPSBwYXJ0aWFsX2FyZ190b3A7XG4gIHZhciBtZWV0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoIWEudGFnKSB7XG4gICAgICBpZiAoYi50YWcpIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW2JbMF1dKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMihwYXJ0aWFsX2FyZ19tZWV0JDEsIGFbMF0sIGJbMF0pXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICBpZiAoYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMihFcnJvcl9tZWV0LCBhJHByaW1lLCBiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYSRwcmltZV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluY2x1ZGUkMiA9IHtcbiAgICBtZWV0OiBtZWV0XG4gIH07XG4gIHZhciB0b3AgPSAvKiBPayAqL0Jsb2NrLl9fKDAsIFtwYXJ0aWFsX2FyZ190b3AkMV0pO1xuICB2YXIgaW5jbHVkZV9tZWV0ID0gaW5jbHVkZSQyLm1lZXQ7XG4gIHZhciBpbmNsdWRlX2pvaW4kMSA9IGluY2x1ZGVfam9pbjtcbiAgdmFyIGluY2x1ZGVfYm90dG9tID0gYm90dG9tO1xuICB2YXIgaW5jbHVkZV9tZWV0JDEgPSBpbmNsdWRlX21lZXQ7XG4gIHZhciBpbmNsdWRlX3RvcCA9IHRvcDtcbiAgdmFyIGpvaW4kMSA9IGluY2x1ZGVfam9pbiQxO1xuICB2YXIgbm90ID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHZhciBhJHByaW1lID0gYVswXTtcbiAgICAgIGlmIChDYW1sX29iai5jYW1sX2VxdWFsKGEkcHJpbWUsICQkRXJyb3IudG9wKSkge1xuICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbT2suYm90dG9tXSk7XG4gICAgICB9IGVsc2UgaWYgKENhbWxfb2JqLmNhbWxfZXF1YWwoYSRwcmltZSwgJCRFcnJvci5ib3R0b20pKSB7XG4gICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtPay50b3BdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgYSRwcmltZSQxID0gYVswXTtcbiAgICBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lJDEsIE9rLnRvcCkpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLmJvdHRvbV0pO1xuICAgIH0gZWxzZSBpZiAoQ2FtbF9vYmouY2FtbF9lcXVhbChhJHByaW1lJDEsIE9rLmJvdHRvbSkpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFskJEVycm9yLnRvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH07XG4gIHZhciBpbXBsaWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoam9pbiQxLCBub3QoYSksIGIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGVxOiBpbmNsdWRlX2VxLFxuICAgICAgICAgIGNvbXBhcmU6IGNvbXBhcmUsXG4gICAgICAgICAgam9pbjogam9pbiQxLFxuICAgICAgICAgIGJvdHRvbTogaW5jbHVkZV9ib3R0b20sXG4gICAgICAgICAgbWVldDogaW5jbHVkZV9tZWV0JDEsXG4gICAgICAgICAgdG9wOiBpbmNsdWRlX3RvcCxcbiAgICAgICAgICBub3Q6IG5vdCxcbiAgICAgICAgICBpbXBsaWVzOiBpbXBsaWVzXG4gICAgICAgIH07XG59XG5cbnZhciBNYW55X1ZhbHVlZF9Mb2dpYyA9IHtcbiAgUXVhc2lyZWZsZXhpdmVfRXE6IFF1YXNpcmVmbGV4aXZlX0VxLFxuICBRdWFzaXJlZmxleGl2ZV9PcmQ6IFF1YXNpcmVmbGV4aXZlX09yZCxcbiAgSm9pbl9TZW1pbGF0dGljZTogSm9pbl9TZW1pbGF0dGljZSxcbiAgTWVldF9TZW1pbGF0dGljZTogTWVldF9TZW1pbGF0dGljZSxcbiAgQm91bmRlZF9Kb2luX1NlbWlsYXR0aWNlOiBCb3VuZGVkX0pvaW5fU2VtaWxhdHRpY2UsXG4gIEJvdW5kZWRfTWVldF9TZW1pbGF0dGljZTogQm91bmRlZF9NZWV0X1NlbWlsYXR0aWNlLFxuICBMYXR0aWNlOiBMYXR0aWNlLFxuICBCb3VuZGVkX0xhdHRpY2U6IEJvdW5kZWRfTGF0dGljZSxcbiAgRGlzdHJpYnV0aXZlX0xhdHRpY2U6IERpc3RyaWJ1dGl2ZV9MYXR0aWNlLFxuICBCb3VuZGVkX0Rpc3RyaWJ1dGl2ZV9MYXR0aWNlOiBCb3VuZGVkX0Rpc3RyaWJ1dGl2ZV9MYXR0aWNlLFxuICBIZXl0aW5nX0FsZ2VicmE6IEhleXRpbmdfQWxnZWJyYSxcbiAgSW52b2x1dGl2ZV9IZXl0aW5nX0FsZ2VicmE6IEludm9sdXRpdmVfSGV5dGluZ19BbGdlYnJhLFxuICBCb29sZWFuX0FsZ2VicmE6IEJvb2xlYW5fQWxnZWJyYVxufTtcblxuZnVuY3Rpb24gRm9sZGFibGUoVCkge1xuICB2YXIgZm9sZF9sZWZ0ID0gZnVuY3Rpb24gKGYsIGluaXRpYWwsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBpbml0aWFsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoZiwgaW5pdGlhbCwgYVswXSk7XG4gICAgfVxuICB9O1xuICB2YXIgZm9sZF9yaWdodCA9IGZ1bmN0aW9uIChmLCBpbml0aWFsLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGFbMF0sIGluaXRpYWwpO1xuICAgIH1cbiAgfTtcbiAgdmFyIEZvbGRfTWFwID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgICAgaWYgKGEudGFnKSB7XG4gICAgICAgIHJldHVybiBNLmVtcHR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGFbMF0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkX01hcF9QbHVzID0gZnVuY3Rpb24gKFApIHtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgICAgaWYgKGEudGFnKSB7XG4gICAgICAgIHJldHVybiBQLmVtcHR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGFbMF0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBGb2xkX01hcF9BbnkgPSBmdW5jdGlvbiAoTSkge1xuICAgIHZhciBmb2xkX21hcCA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgcmV0dXJuIE0uZW1wdHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3VycnkuXzEoZiwgYVswXSk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICAgICAgZm9sZF9tYXA6IGZvbGRfbWFwXG4gICAgICAgICAgfTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBGb2xkX01hcCxcbiAgICAgICAgICBGb2xkX01hcF9Bbnk6IEZvbGRfTWFwX0FueSxcbiAgICAgICAgICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIGJpZm9sZF9sZWZ0KGYsIGcsIGluaXRpYWwsIGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGcsIGluaXRpYWwsIGFbMF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMihmLCBpbml0aWFsLCBhWzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiaWZvbGRfcmlnaHQoZiwgZywgaW5pdGlhbCwgYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gQ3VycnkuXzIoZywgYVswXSwgaW5pdGlhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGFbMF0sIGluaXRpYWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwKE0pIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogcmVzdWx0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEZvbGRfTWFwX0FueShNKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgZm9sZF9tYXA6IHJlc3VsdFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBGb2xkX01hcF9QbHVzKFApIHtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBmb2xkX21hcDogcmVzdWx0XG4gICAgICAgIH07XG59XG5cbnZhciBCaWZvbGRhYmxlID0ge1xuICBiaWZvbGRfbGVmdDogYmlmb2xkX2xlZnQsXG4gIGJpZm9sZF9yaWdodDogYmlmb2xkX3JpZ2h0LFxuICBGb2xkX01hcDogRm9sZF9NYXAsXG4gIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShULCBBKSB7XG4gIHZhciBwdXJlID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYV0pO1xuICB9O1xuICB2YXIgbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGZvbGRfbGVmdCA9IGZ1bmN0aW9uIChmLCBpbml0aWFsLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gaW5pdGlhbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGYsIGluaXRpYWwsIGFbMF0pO1xuICAgIH1cbiAgfTtcbiAgdmFyIGZvbGRfcmlnaHQgPSBmdW5jdGlvbiAoZiwgaW5pdGlhbCwgYSkge1xuICAgIGlmIChhLnRhZykge1xuICAgICAgcmV0dXJuIGluaXRpYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihmLCBhWzBdLCBpbml0aWFsKTtcbiAgICB9XG4gIH07XG4gIHZhciBGb2xkX01hcCA9IGZ1bmN0aW9uIChNKSB7XG4gICAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICAgIGlmIChhLnRhZykge1xuICAgICAgICByZXR1cm4gTS5lbXB0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShmLCBhWzBdKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZF9NYXBfUGx1cyA9IGZ1bmN0aW9uIChQKSB7XG4gICAgdmFyIGZvbGRfbWFwID0gZnVuY3Rpb24gKGYsIGEpIHtcbiAgICAgIGlmIChhLnRhZykge1xuICAgICAgICByZXR1cm4gUC5lbXB0eTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShmLCBhWzBdKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb2xkX21hcDogZm9sZF9tYXBcbiAgICAgICAgICB9O1xuICB9O1xuICB2YXIgRm9sZF9NYXBfQW55ID0gZnVuY3Rpb24gKE0pIHtcbiAgICB2YXIgZm9sZF9tYXAgPSBmdW5jdGlvbiAoZiwgYSkge1xuICAgICAgaWYgKGEudGFnKSB7XG4gICAgICAgIHJldHVybiBNLmVtcHR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKGYsIGFbMF0pO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZvbGRfbWFwOiBmb2xkX21hcFxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIChmLCBhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXAsIHB1cmUsIEN1cnJ5Ll8xKGYsIGFbMF0pKTtcbiAgICB9XG4gIH07XG4gIHZhciBzZXF1ZW5jZSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgaWYgKGEudGFnKSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzEoQS5wdXJlLCAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXAsIHB1cmUsIGFbMF0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBmb2xkX2xlZnQ6IGZvbGRfbGVmdCxcbiAgICAgICAgICBmb2xkX3JpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBGb2xkX01hcCxcbiAgICAgICAgICBGb2xkX01hcF9Bbnk6IEZvbGRfTWFwX0FueSxcbiAgICAgICAgICBGb2xkX01hcF9QbHVzOiBGb2xkX01hcF9QbHVzLFxuICAgICAgICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICAgICAgICBzZXF1ZW5jZTogc2VxdWVuY2VcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gQml0cmF2ZXJzYWJsZShBKSB7XG4gIHZhciBiaXRyYXZlcnNlID0gZnVuY3Rpb24gKGYsIGcsIGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFt4XSk7XG4gICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoZywgYVswXSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3VycnkuXzIoQS5tYXAsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbeF0pO1xuICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKGYsIGFbMF0pKTtcbiAgICB9XG4gIH07XG4gIHZhciBiaXNlcXVlbmNlID0gZnVuY3Rpb24gKGEpIHtcbiAgICBpZiAoYS50YWcpIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFt4XSk7XG4gICAgICAgICAgICAgICAgICB9KSwgYVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDdXJyeS5fMihBLm1hcCwgKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFt4XSk7XG4gICAgICAgICAgICAgICAgICB9KSwgYVswXSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGJpbWFwOiBiaW1hcCxcbiAgICAgICAgICBiaWZvbGRfbGVmdDogYmlmb2xkX2xlZnQsXG4gICAgICAgICAgYmlmb2xkX3JpZ2h0OiBiaWZvbGRfcmlnaHQsXG4gICAgICAgICAgRm9sZF9NYXA6IEZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRfTWFwX1BsdXMsXG4gICAgICAgICAgYml0cmF2ZXJzZTogYml0cmF2ZXJzZSxcbiAgICAgICAgICBiaXNlcXVlbmNlOiBiaXNlcXVlbmNlXG4gICAgICAgIH07XG59XG5cbnZhciBpbmNsdWRlID0gSW5maXgkQnNCYXN0ZXQuQmlmdW5jdG9yKEJpZnVuY3Rvcik7XG5cbnZhciBJbmZpeCA9IGluY2x1ZGU7XG5cbmZ1bmN0aW9uIENob29zZShBKSB7XG4gIHZhciBjaG9vc2UgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBDdXJyeS5fMihBLmFsdCwgQ3VycnkuXzIoQS5tYXAsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFt4XSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBhKSwgQ3VycnkuXzIoQS5tYXAsIChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFt4XSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLCBiKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY2hvb3NlOiBjaG9vc2VcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbV9vayhhKSB7XG4gIGlmICghYS50YWcpIHtcbiAgICByZXR1cm4gYVswXTtcbiAgfVxuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIFwiWW91IHBhc3NlZCBpbiBhbiBgRXJyb3JgIHZhbHVlIHRvIGBmcm9tX29rYFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBmcm9tX2Vycm9yKGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIGFbMF07XG4gIH1cbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICBcIllvdSBwYXNzZWQgaW4gYW4gYE9rYCB2YWx1ZSB0byBgZnJvbV9lcnJvcmBcIlxuICAgICAgXTtcbn1cblxudmFyIFVuc2FmZSA9IHtcbiAgZnJvbV9vazogZnJvbV9vayxcbiAgZnJvbV9lcnJvcjogZnJvbV9lcnJvclxufTtcblxuZnVuY3Rpb24gaXNfb2soYSkge1xuICByZXR1cm4gcmVzdWx0KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24kQnNCYXN0ZXQuJCRjb25zdCh0cnVlLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QoZmFsc2UsIHBhcmFtKTtcbiAgICAgICAgICAgICAgfSksIGEpO1xufVxuXG5mdW5jdGlvbiBpc19lcnJvcihhKSB7XG4gIHJldHVybiByZXN1bHQoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KGZhbHNlLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uJEJzQmFzdGV0LiQkY29uc3QodHJ1ZSwgcGFyYW0pO1xuICAgICAgICAgICAgICB9KSwgYSk7XG59XG5cbmZ1bmN0aW9uIG5vdGUoJCRkZWZhdWx0KSB7XG4gIHZhciBwYXJ0aWFsX2FyZyA9IC8qIEVycm9yICovQmxvY2suX18oMSwgWyQkZGVmYXVsdF0pO1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIE9wdGlvbiRCc0Jhc3RldC5tYXliZSgoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW3hdKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBodXNoKGUpIHtcbiAgcmV0dXJuIHJlc3VsdChPcHRpb24kQnNCYXN0ZXQuQXBwbGljYXRpdmUucHVyZSwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0KHVuZGVmaW5lZCwgcGFyYW0pO1xuICAgICAgICAgICAgICB9KSwgZSk7XG59XG5cbnZhciBmbGlwID0gRnVuY3Rpb24kQnNCYXN0ZXQuZmxpcDtcblxudmFyICQkY29uc3QgPSBGdW5jdGlvbiRCc0Jhc3RldC4kJGNvbnN0O1xuXG5leHBvcnQge1xuICBmbGlwICxcbiAgJCRjb25zdCAsXG4gIHJlc3VsdCAsXG4gIE1hZ21hICxcbiAgTWVkaWFsX01hZ21hICxcbiAgU2VtaWdyb3VwICxcbiAgRnVuY3RvciAsXG4gIEJpZnVuY3RvciAsXG4gIEFwcGx5ICxcbiAgQXBwbGljYXRpdmUgLFxuICBNb25hZCAsXG4gIEFsdCAsXG4gIEV4dGVuZCAsXG4gIFNob3cgLFxuICBFcSAsXG4gIE9yZCAsXG4gIEJvdW5kZWQgLFxuICBNYW55X1ZhbHVlZF9Mb2dpYyAsXG4gIEZvbGRhYmxlICxcbiAgQmlmb2xkYWJsZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgQml0cmF2ZXJzYWJsZSAsXG4gIEluZml4ICxcbiAgQ2hvb3NlICxcbiAgVW5zYWZlICxcbiAgaXNfb2sgLFxuICBpc19lcnJvciAsXG4gIG5vdGUgLFxuICBodXNoICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX05vbkVtcHR5IGZyb20gXCIuL1JlbHVkZV9Ob25FbXB0eS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbiBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5icy5qc1wiO1xuXG5mdW5jdGlvbiBvayhhKSB7XG4gIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbYV0pO1xufVxuXG5mdW5jdGlvbiBlcnJvcihlKSB7XG4gIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbZV0pO1xufVxuXG5mdW5jdGlvbiBlcnJvck5lbChlKSB7XG4gIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbUmVsdWRlX05vbkVtcHR5Lkxpc3QucHVyZShlKV0pO1xufVxuXG5mdW5jdGlvbiBlcnJvck5lYShlKSB7XG4gIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbUmVsdWRlX05vbkVtcHR5LiQkQXJyYXkucHVyZShlKV0pO1xufVxuXG5mdW5jdGlvbiBpc09rKHBhcmFtKSB7XG4gIGlmIChwYXJhbS50YWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFcnJvcihhKSB7XG4gIHJldHVybiAhaXNPayhhKTtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmLCBhWzBdKV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRhcChmLCBlKSB7XG4gIGlmIChlLnRhZykge1xuICAgIHJldHVybiBlO1xuICB9XG4gIEN1cnJ5Ll8xKGYsIGVbMF0pO1xuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gbWFwRXJyb3IoZiwgb2spIHtcbiAgaWYgKG9rLnRhZykge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZiwgb2tbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9rO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEVycm9yc05lYShmLCBvaykge1xuICBpZiAob2sudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtSZWx1ZGVfTm9uRW1wdHkuJCRBcnJheS5tYXAoZiwgb2tbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9rO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEVycm9yc05lbChmLCBvaykge1xuICBpZiAob2sudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtSZWx1ZGVfTm9uRW1wdHkuTGlzdC5tYXAoZiwgb2tbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9rO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRhcEVycm9yKGYsIG9rKSB7XG4gIGlmICghb2sudGFnKSB7XG4gICAgcmV0dXJuIG9rO1xuICB9XG4gIEN1cnJ5Ll8xKGYsIG9rWzBdKTtcbiAgcmV0dXJuIG9rO1xufVxuXG5mdW5jdGlvbiBiaW1hcChmLCBnLCBhKSB7XG4gIGlmIChhLnRhZykge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZywgYVswXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGFbMF0pXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYml0YXAoZiwgZywgb2spIHtcbiAgaWYgKG9rLnRhZykge1xuICAgIEN1cnJ5Ll8xKGcsIG9rWzBdKTtcbiAgICByZXR1cm4gb2s7XG4gIH1cbiAgQ3VycnkuXzEoZiwgb2tbMF0pO1xuICByZXR1cm4gb2s7XG59XG5cbmZ1bmN0aW9uIGFwcGx5V2l0aEFwcGVuZEVycm9ycyhhcHBlbmRFcnJvcnMsIGZmLCBmdikge1xuICBpZiAoIWZmLnRhZykge1xuICAgIGlmIChmdi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbZnZbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmZlswXSwgZnZbMF0pXSk7XG4gICAgfVxuICB9XG4gIHZhciBlID0gZmZbMF07XG4gIGlmIChmdi50YWcpIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKGFwcGVuZEVycm9ycywgZSwgZnZbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFtlXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxpZ25XaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgZmEsIGZiKSB7XG4gIGlmIChmYS50YWcpIHtcbiAgICBpZiAoZmIudGFnKSB7XG4gICAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8yKGFwcGVuZEVycm9ycywgZmFbMF0sIGZiWzBdKV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgWy8qIFRoYXQgKi9CbG9jay5fXygxLCBbZmJbMF1dKV0pO1xuICAgIH1cbiAgfVxuICB2YXIgYSA9IGZhWzBdO1xuICBpZiAoZmIudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFsvKiBUaGlzICovQmxvY2suX18oMCwgW2FdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbLyogQm90aCAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICBmYlswXVxuICAgICAgICAgICAgICAgIF0pXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxpZ25XaXRoV2l0aEFwcGVuZEVycm9ycyhhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYikge1xuICByZXR1cm4gbWFwKGYsIGFsaWduV2l0aEFwcGVuZEVycm9ycyhhcHBlbmRFcnJvcnMsIGZhLCBmYikpO1xufVxuXG5mdW5jdGlvbiBwdXJlKGEpIHtcbiAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG59XG5cbmZ1bmN0aW9uIGJpbmQoZmEsIGYpIHtcbiAgaWYgKGZhLnRhZykge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbZmFbMF1dKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgZmFbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXRNYXAoZiwgZmEpIHtcbiAgcmV0dXJuIGJpbmQoZmEsIGYpO1xufVxuXG5mdW5jdGlvbiBmcm9tUmVzdWx0KGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFthWzBdXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9SZXN1bHQoYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbYVswXV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthWzBdXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZnJvbU9wdGlvbihkZWZhdWx0RXJyb3IsIGEpIHtcbiAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihhKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbZGVmYXVsdEVycm9yXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZnJvbU9wdGlvbkxhenkoZ2V0RGVmYXVsdEVycm9yLCBhKSB7XG4gIGlmIChhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW0NhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGdldERlZmF1bHRFcnJvciwgdW5kZWZpbmVkKV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvbGQoZWMsIGFjLCBhKSB7XG4gIGlmIChhLnRhZykge1xuICAgIHJldHVybiBDdXJyeS5fMShlYywgYVswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGFjLCBhWzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmbGlwKGZhKSB7XG4gIHJldHVybiBmb2xkKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBWT2sgKi9CbG9jay5fXygwLCBbZV0pO1xuICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFZFcnJvciAqL0Jsb2NrLl9fKDEsIFthXSk7XG4gICAgICAgICAgICAgIH0pLCBmYSk7XG59XG5cbmZ1bmN0aW9uIG1hcDIoYXBwZW5kRXJyb3JzLCBmLCBmYSwgZmIpIHtcbiAgcmV0dXJuIGFwcGx5V2l0aEFwcGVuZEVycm9ycyhhcHBlbmRFcnJvcnMsIG1hcChmLCBmYSksIGZiKTtcbn1cblxuZnVuY3Rpb24gbWFwMyhhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYiwgZmMpIHtcbiAgcmV0dXJuIGFwcGx5V2l0aEFwcGVuZEVycm9ycyhhcHBlbmRFcnJvcnMsIG1hcDIoYXBwZW5kRXJyb3JzLCBmLCBmYSwgZmIpLCBmYyk7XG59XG5cbmZ1bmN0aW9uIG1hcDQoYXBwZW5kRXJyb3JzLCBmLCBmYSwgZmIsIGZjLCBmZCkge1xuICByZXR1cm4gYXBwbHlXaXRoQXBwZW5kRXJyb3JzKGFwcGVuZEVycm9ycywgbWFwMyhhcHBlbmRFcnJvcnMsIGYsIGZhLCBmYiwgZmMpLCBmZCk7XG59XG5cbmZ1bmN0aW9uIG1hcDUoYXBwZW5kRXJyb3JzLCBmLCBmYSwgZmIsIGZjLCBmZCwgZmUpIHtcbiAgcmV0dXJuIGFwcGx5V2l0aEFwcGVuZEVycm9ycyhhcHBlbmRFcnJvcnMsIG1hcDQoYXBwZW5kRXJyb3JzLCBmLCBmYSwgZmIsIGZjLCBmZCksIGZlKTtcbn1cblxuZnVuY3Rpb24gV2l0aEVycm9ycyhFcnJvcnMsICQkRXJyb3IpIHtcbiAgdmFyIEZ1bmN0b3IgPSB7XG4gICAgbWFwOiBtYXBcbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuICB2YXIgYXBwbHkgPSBmdW5jdGlvbiAoZmYsIGZhKSB7XG4gICAgcmV0dXJuIGFwcGx5V2l0aEFwcGVuZEVycm9ycyhFcnJvcnMuYXBwZW5kLCBmZiwgZmEpO1xuICB9O1xuICB2YXIgQXBwbHkgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuICB2YXIgQXBwbGljYXRpdmUgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmVcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMiA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG4gIHZhciBhbGlnbiA9IGZ1bmN0aW9uIChmYSwgZmIpIHtcbiAgICByZXR1cm4gYWxpZ25XaXRoQXBwZW5kRXJyb3JzKEVycm9ycy5hcHBlbmQsIGZhLCBmYik7XG4gIH07XG4gIHZhciBhbGlnbldpdGggPSBmdW5jdGlvbiAoZiwgZmEsIGZiKSB7XG4gICAgcmV0dXJuIGFsaWduV2l0aFdpdGhBcHBlbmRFcnJvcnMoRXJyb3JzLmFwcGVuZCwgZiwgZmEsIGZiKTtcbiAgfTtcbiAgdmFyIFNlbWlhbGlnbiA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhbGlnbjogYWxpZ24sXG4gICAgYWxpZ25XaXRoOiBhbGlnbldpdGhcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWFsaWduLlNlbWlhbGlnbkV4dGVuc2lvbnMoU2VtaWFsaWduKTtcbiAgdmFyIE1vbmFkID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kXG4gIH07XG4gIHZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5Nb25hZEV4dGVuc2lvbnMoTW9uYWQpO1xuICB2YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9ySW5maXgoRnVuY3Rvcik7XG4gIHZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUluZml4KEFwcGx5KTtcbiAgdmFyIGluY2x1ZGUkNiA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkSW5maXgoTW9uYWQpO1xuICB2YXIgSW5maXhfRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuRnVuY3RvckV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlJDQuJGxlc3MkJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUkNC4kbGVzcyRoYXNoJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZG9sbGFyID0gaW5jbHVkZSQ0LiRsZXNzJDtcbiAgdmFyIEluZml4XyQkZ3JlYXQgPSBpbmNsdWRlJDQuJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGF0JGdyZWF0ID0gaW5jbHVkZSQ0LiRsZXNzJGF0JGdyZWF0O1xuICB2YXIgSW5maXhfQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQ1LkFwcGx5RXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDUuJGxlc3Mkc3RhciRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIgPSBpbmNsdWRlJDUuJGxlc3Mkc3RhcjtcbiAgdmFyIEluZml4XyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQ1LiRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQ2Lk1vbmFkRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUkNi4kZ3JlYXQkZ3JlYXQkZXE7XG4gIHZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZSQ2LiRlcSRsZXNzJGxlc3M7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlJDYuJGdyZWF0JGVxJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUkNi4kbGVzcyRlcSRsZXNzO1xuICB2YXIgSW5maXggPSB7XG4gICAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICAgJCRncmVhdDogSW5maXhfJCRncmVhdCxcbiAgICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICAgJGxlc3Mkc3RhciRncmVhdDogSW5maXhfJGxlc3Mkc3RhciRncmVhdCxcbiAgICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAgICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgICBNb25hZEV4dGVuc2lvbnM6IEluZml4X01vbmFkRXh0ZW5zaW9ucyxcbiAgICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAgICRncmVhdCRlcSRncmVhdDogSW5maXhfJGdyZWF0JGVxJGdyZWF0LFxuICAgICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3NcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBGdW5jdG9yOiBGdW5jdG9yLFxuICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgIEJzRnVuY3RvckV4dGVuc2lvbnM6IGluY2x1ZGUuQnNGdW5jdG9yRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmbGlwTWFwOiBpbmNsdWRlLmZsaXBNYXAsXG4gICAgICAgICAgJCR2b2lkOiBpbmNsdWRlLiQkdm9pZCxcbiAgICAgICAgICB2b2lkUmlnaHQ6IGluY2x1ZGUudm9pZFJpZ2h0LFxuICAgICAgICAgIHZvaWRMZWZ0OiBpbmNsdWRlLnZvaWRMZWZ0LFxuICAgICAgICAgIGZsYXA6IGluY2x1ZGUuZmxhcCxcbiAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgICAgIEJzQXBwbHlFeHRlbnNpb25zOiBpbmNsdWRlJDEuQnNBcHBseUV4dGVuc2lvbnMsXG4gICAgICAgICAgYXBwbHlGaXJzdDogaW5jbHVkZSQxLmFwcGx5Rmlyc3QsXG4gICAgICAgICAgYXBwbHlTZWNvbmQ6IGluY2x1ZGUkMS5hcHBseVNlY29uZCxcbiAgICAgICAgICBtYXAyOiBpbmNsdWRlJDEubWFwMixcbiAgICAgICAgICBtYXAzOiBpbmNsdWRlJDEubWFwMyxcbiAgICAgICAgICBtYXA0OiBpbmNsdWRlJDEubWFwNCxcbiAgICAgICAgICBtYXA1OiBpbmNsdWRlJDEubWFwNSxcbiAgICAgICAgICB0dXBsZTI6IGluY2x1ZGUkMS50dXBsZTIsXG4gICAgICAgICAgdHVwbGUzOiBpbmNsdWRlJDEudHVwbGUzLFxuICAgICAgICAgIHR1cGxlNDogaW5jbHVkZSQxLnR1cGxlNCxcbiAgICAgICAgICB0dXBsZTU6IGluY2x1ZGUkMS50dXBsZTUsXG4gICAgICAgICAgbWFwVHVwbGUyOiBpbmNsdWRlJDEubWFwVHVwbGUyLFxuICAgICAgICAgIG1hcFR1cGxlMzogaW5jbHVkZSQxLm1hcFR1cGxlMyxcbiAgICAgICAgICBtYXBUdXBsZTQ6IGluY2x1ZGUkMS5tYXBUdXBsZTQsXG4gICAgICAgICAgbWFwVHVwbGU1OiBpbmNsdWRlJDEubWFwVHVwbGU1LFxuICAgICAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSxcbiAgICAgICAgICBwdXJlOiBwdXJlLFxuICAgICAgICAgIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zOiBpbmNsdWRlJDIuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgbGlmdEExOiBpbmNsdWRlJDIubGlmdEExLFxuICAgICAgICAgIGFsbDogaW5jbHVkZSQyLmFsbCxcbiAgICAgICAgICBTZW1pYWxpZ246IFNlbWlhbGlnbixcbiAgICAgICAgICBNb25hZDogTW9uYWQsXG4gICAgICAgICAgYmluZDogYmluZCxcbiAgICAgICAgICBCc01vbmFkRXh0ZW5zaW9uczogaW5jbHVkZSQzLkJzTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIGZsYXRNYXA6IGluY2x1ZGUkMy5mbGF0TWFwLFxuICAgICAgICAgIGZsYXR0ZW46IGluY2x1ZGUkMy5mbGF0dGVuLFxuICAgICAgICAgIGNvbXBvc2VLbGVpc2xpOiBpbmNsdWRlJDMuY29tcG9zZUtsZWlzbGksXG4gICAgICAgICAgZmxpcENvbXBvc2VLbGVpc2xpOiBpbmNsdWRlJDMuZmxpcENvbXBvc2VLbGVpc2xpLFxuICAgICAgICAgIGxpZnRNMTogaW5jbHVkZSQzLmxpZnRNMSxcbiAgICAgICAgICB3aGVuXzogaW5jbHVkZSQzLndoZW5fLFxuICAgICAgICAgIHVubGVzczogaW5jbHVkZSQzLnVubGVzcyxcbiAgICAgICAgICBJbmZpeDogSW5maXhcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgb2sgLFxuICBlcnJvciAsXG4gIGVycm9yTmVsICxcbiAgZXJyb3JOZWEgLFxuICBpc09rICxcbiAgaXNFcnJvciAsXG4gIG1hcCAsXG4gIHRhcCAsXG4gIG1hcEVycm9yICxcbiAgbWFwRXJyb3JzTmVhICxcbiAgbWFwRXJyb3JzTmVsICxcbiAgdGFwRXJyb3IgLFxuICBiaW1hcCAsXG4gIGJpdGFwICxcbiAgYXBwbHlXaXRoQXBwZW5kRXJyb3JzICxcbiAgYWxpZ25XaXRoQXBwZW5kRXJyb3JzICxcbiAgYWxpZ25XaXRoV2l0aEFwcGVuZEVycm9ycyAsXG4gIHB1cmUgLFxuICBiaW5kICxcbiAgZmxhdE1hcCAsXG4gIGZyb21SZXN1bHQgLFxuICB0b1Jlc3VsdCAsXG4gIGZyb21PcHRpb24gLFxuICBmcm9tT3B0aW9uTGF6eSAsXG4gIGZvbGQgLFxuICBmbGlwICxcbiAgbWFwMiAsXG4gIG1hcDMgLFxuICBtYXA0ICxcbiAgbWFwNSAsXG4gIFdpdGhFcnJvcnMgLFxuICBcbn1cbi8qIFJlbHVkZV9Ob25FbXB0eSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5cbmZ1bmN0aW9uIEJpZnVuY3RvckV4dGVuc2lvbnMoQikge1xuICB2YXIgbWFwTGVmdCA9IGZ1bmN0aW9uIChhVG9DLCBmYWIpIHtcbiAgICByZXR1cm4gQ3VycnkuXzMoQi5iaW1hcCwgYVRvQywgKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgICAgICB9KSwgZmFiKTtcbiAgfTtcbiAgdmFyIG1hcFJpZ2h0ID0gZnVuY3Rpb24gKGJUb0QsIGZhYikge1xuICAgIHJldHVybiBDdXJyeS5fMyhCLmJpbWFwLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgIH0pLCBiVG9ELCBmYWIpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIG1hcExlZnQ6IG1hcExlZnQsXG4gICAgICAgICAgbWFwUmlnaHQ6IG1hcFJpZ2h0LFxuICAgICAgICAgIG1hcEVycm9yOiBtYXBSaWdodFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBCaWZ1bmN0b3JJbmZpeChCKSB7XG4gIHJldHVybiB7XG4gICAgICAgICAgJGxlc3MkbGVzcyQkZ3JlYXQkZ3JlYXQ6IEIuYmltYXBcbiAgICAgICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgQmlmdW5jdG9yRXh0ZW5zaW9ucyAsXG4gIEJpZnVuY3RvckluZml4ICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GdW5jdGlvbiBmcm9tIFwiLi9SZWx1ZGVfRnVuY3Rpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9Ob25FbXB0eSBmcm9tIFwiLi9SZWx1ZGVfTm9uRW1wdHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlc3VsdCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvUmVzdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfVmFsaWRhdGlvbiBmcm9tIFwiLi9SZWx1ZGVfVmFsaWRhdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9qc19leGNlcHRpb25zIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfanNfZXhjZXB0aW9ucy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQWx0IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRm9sZGFibGUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Gb2xkYWJsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQmlmdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQmlmdW5jdG9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pYWxpZ24gZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pYWxpZ24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0JpZm9sZGFibGUgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19CaWZvbGRhYmxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZEVycm9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRFcnJvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRUaHJvdyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkVGhyb3cuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbGljYXRpdmUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1RyYXZlcnNhYmxlIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfVHJhdmVyc2FibGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQml0cmF2ZXJzYWJsZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0JpdHJhdmVyc2FibGUuYnMuanNcIjtcblxuZnVuY3Rpb24gb2soYSkge1xuICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYV0pO1xufVxuXG5mdW5jdGlvbiBlcnJvcihlKSB7XG4gIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtlXSk7XG59XG5cbmZ1bmN0aW9uIGdldE9rKGEpIHtcbiAgaWYgKGEudGFnKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZShhWzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFcnJvcihlKSB7XG4gIGlmIChlLnRhZykge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKGVbMF0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBpc09rKHBhcmFtKSB7XG4gIGlmIChwYXJhbS50YWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFcnJvcihwYXJhbSkge1xuICBpZiAocGFyYW0udGFnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvbGQoZWMsIGFjLCByKSB7XG4gIGlmIChyLnRhZykge1xuICAgIHJldHVybiBDdXJyeS5fMShlYywgclswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGFjLCByWzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPckVsc2UoJCRkZWZhdWx0LCBmYSkge1xuICBpZiAoZmEudGFnKSB7XG4gICAgcmV0dXJuICQkZGVmYXVsdDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFbMF07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3JFbHNlTGF6eShnZXREZWZhdWx0LCBmYSkge1xuICBpZiAoZmEudGFnKSB7XG4gICAgcmV0dXJuIEN1cnJ5Ll8xKGdldERlZmF1bHQsIHVuZGVmaW5lZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhWzBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGEpIHtcbiAgcmV0dXJuIGFbMF07XG59XG5cbmZ1bmN0aW9uIGZsaXAoYSkge1xuICBpZiAoYS50YWcpIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYVswXV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFthWzBdXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9zZShyZXN1bHRCVG9DLCByZXN1bHRBVG9CKSB7XG4gIGlmIChyZXN1bHRBVG9CLnRhZykge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtyZXN1bHRBVG9CWzBdXSk7XG4gIH1cbiAgdmFyIGFUb0IgPSByZXN1bHRBVG9CWzBdO1xuICBpZiAocmVzdWx0QlRvQy50YWcpIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbcmVzdWx0QlRvQ1swXV0pO1xuICB9XG4gIHZhciBiVG9DID0gcmVzdWx0QlRvQ1swXTtcbiAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pXSk7XG59XG5cbmZ1bmN0aW9uIGFuZFRoZW4ocmVzdWx0QVRvQiwgcmVzdWx0QlRvQykge1xuICByZXR1cm4gY29tcG9zZShyZXN1bHRCVG9DLCByZXN1bHRBVG9CKTtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIGZhKSB7XG4gIGlmIChmYS50YWcpIHtcbiAgICByZXR1cm4gZmE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGYsIGZhWzBdKV0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJpbWFwKG1hcEEsIG1hcEUsIHJlc3VsdCkge1xuICBpZiAocmVzdWx0LnRhZykge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShtYXBFLCByZXN1bHRbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKG1hcEEsIHJlc3VsdFswXSldKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0YXAoZiwgcmEpIHtcbiAgaWYgKCFyYS50YWcpIHtcbiAgICBDdXJyeS5fMShmLCByYVswXSk7XG4gIH1cbiAgcmV0dXJuIHJhO1xufVxuXG5mdW5jdGlvbiB0YXBFcnJvcihmLCByYSkge1xuICBpZiAocmEudGFnKSB7XG4gICAgQ3VycnkuXzEoZiwgcmFbMF0pO1xuICB9XG4gIHJldHVybiByYTtcbn1cblxuZnVuY3Rpb24gYXBwbHkocmYsIHJhKSB7XG4gIGlmIChyZi50YWcpIHtcbiAgICBpZiAocmEudGFnKSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbcmFbMF1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW3JmWzBdXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHJhLnRhZykge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtyYVswXV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShyZlswXSwgcmFbMF0pXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwMihmLCBmYSwgZmIpIHtcbiAgcmV0dXJuIGFwcGx5KG1hcChmLCBmYSksIGZiKTtcbn1cblxuZnVuY3Rpb24gbWFwMyhmLCBmYSwgZmIsIGZjKSB7XG4gIHJldHVybiBhcHBseShtYXAyKGYsIGZhLCBmYiksIGZjKTtcbn1cblxuZnVuY3Rpb24gbWFwNChmLCBmYSwgZmIsIGZjLCBmZCkge1xuICByZXR1cm4gYXBwbHkobWFwMyhmLCBmYSwgZmIsIGZjKSwgZmQpO1xufVxuXG5mdW5jdGlvbiBtYXA1KGYsIGZhLCBmYiwgZmMsIGZkLCBmZSkge1xuICByZXR1cm4gYXBwbHkobWFwNChmLCBmYSwgZmIsIGZjLCBmZCksIGZlKTtcbn1cblxuZnVuY3Rpb24gcHVyZShhKSB7XG4gIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFthXSk7XG59XG5cbmZ1bmN0aW9uIGJpbmQoZmEsIGYpIHtcbiAgaWYgKGZhLnRhZykge1xuICAgIHJldHVybiBmYTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgZmFbMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXRNYXAoZiwgZmEpIHtcbiAgcmV0dXJuIGJpbmQoZmEsIGYpO1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuKG1tYSkge1xuICByZXR1cm4gYmluZChtbWEsIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGFsdChmYTEsIGZhMikge1xuICBpZiAoZmExLnRhZykge1xuICAgIHJldHVybiBmYTI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGlnbihmYSwgZmIpIHtcbiAgaWYgKGZhLnRhZykge1xuICAgIGlmIChmYi50YWcpIHtcbiAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtmYVswXV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbLyogVGhhdCAqL0Jsb2NrLl9fKDEsIFtmYlswXV0pXSk7XG4gICAgfVxuICB9XG4gIHZhciBhID0gZmFbMF07XG4gIGlmIChmYi50YWcpIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbLyogVGhpcyAqL0Jsb2NrLl9fKDAsIFthXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbLyogQm90aCAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgIGEsXG4gICAgICAgICAgICAgICAgICBmYlswXVxuICAgICAgICAgICAgICAgIF0pXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxpZ25XaXRoKGYsIGZhLCBmYikge1xuICByZXR1cm4gbWFwKGYsIGFsaWduKGZhLCBmYikpO1xufVxuXG5mdW5jdGlvbiBjYXRjaEVycm9yKGYsIGZhKSB7XG4gIGlmIChmYS50YWcpIHtcbiAgICByZXR1cm4gQ3VycnkuXzEoZiwgZmFbMF0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlVG9BLCBmYSkge1xuICBpZiAoZmEudGFnKSB7XG4gICAgcmV0dXJuIC8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGVUb0EsIGZhWzBdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBIYW5kbGVFcnJvcihhVG9CLCBlVG9CLCBpb0FFKSB7XG4gIHJldHVybiBoYW5kbGVFcnJvcihlVG9CLCBtYXAoYVRvQiwgaW9BRSkpO1xufVxuXG5mdW5jdGlvbiByZWNvdmVyKGEsIGZhKSB7XG4gIHJldHVybiBjYXRjaEVycm9yKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbYV0pO1xuICAgICAgICAgICAgICB9KSwgZmEpO1xufVxuXG5mdW5jdGlvbiBmcm9tT3B0aW9uKGRlZmF1bHRFcnJvciwgb3B0KSB7XG4gIGlmIChvcHQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKG9wdCldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZGVmYXVsdEVycm9yXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZnJvbU9wdGlvbkxhenkoZ2V0RXJyb3IsIG9wdCkge1xuICBpZiAob3B0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbihvcHQpXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGdldEVycm9yLCB1bmRlZmluZWQpXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZXFCeShlcnJvckVxLCBva0VxLCBhLCBiKSB7XG4gIGlmIChhLnRhZykge1xuICAgIGlmIChiLnRhZykge1xuICAgICAgcmV0dXJuIEN1cnJ5Ll8yKGVycm9yRXEsIGFbMF0sIGJbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDdXJyeS5fMihva0VxLCBhWzBdLCBiWzBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmllcyhmbikge1xuICB0cnkge1xuICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShmbiwgdW5kZWZpbmVkKV0pO1xuICB9XG4gIGNhdGNoIChyYXdfZXhuKXtcbiAgICB2YXIgZXhuID0gQ2FtbF9qc19leGNlcHRpb25zLmludGVybmFsVG9PQ2FtbEV4Y2VwdGlvbihyYXdfZXhuKTtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZXhuXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJpZXNBc1N0cmluZyhmbikge1xuICB2YXIgZiA9IGZ1bmN0aW9uIChwcmltKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwcmltKTtcbiAgfTtcbiAgdmFyIHJhID0gdHJpZXMoZm4pO1xuICBpZiAocmEudGFnKSB7XG4gICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGYsIHJhWzBdKV0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByYTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1ZhbGlkYXRpb25OZWwodmFsdWUpIHtcbiAgaWYgKHZhbHVlLnRhZykge1xuICAgIHJldHVybiAvKiBWRXJyb3IgKi9CbG9jay5fXygxLCBbUmVsdWRlX05vbkVtcHR5Lkxpc3QucHVyZSh2YWx1ZVswXSldKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogVk9rICovQmxvY2suX18oMCwgW3ZhbHVlWzBdXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9WYWxpZGF0aW9uTmVhKHZhbHVlKSB7XG4gIGlmICh2YWx1ZS50YWcpIHtcbiAgICByZXR1cm4gLyogVkVycm9yICovQmxvY2suX18oMSwgW1JlbHVkZV9Ob25FbXB0eS4kJEFycmF5LnB1cmUodmFsdWVbMF0pXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIC8qIFZPayAqL0Jsb2NrLl9fKDAsIFt2YWx1ZVswXV0pO1xuICB9XG59XG5cbnZhciBCaWZ1bmN0b3IgPSB7XG4gIGJpbWFwOiBiaW1hcFxufTtcblxudmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19CaWZ1bmN0b3IuQmlmdW5jdG9yRXh0ZW5zaW9ucyhCaWZ1bmN0b3IpO1xuXG52YXIgYmlmb2xkX2xlZnQgPSBSZXN1bHQkQnNCYXN0ZXQuQmlmb2xkYWJsZS5iaWZvbGRfbGVmdDtcblxudmFyIGJpZm9sZF9yaWdodCA9IFJlc3VsdCRCc0Jhc3RldC5CaWZvbGRhYmxlLmJpZm9sZF9yaWdodDtcblxudmFyIEJpZm9sZGFibGVfRm9sZF9NYXAgPSBSZXN1bHQkQnNCYXN0ZXQuQmlmb2xkYWJsZS5Gb2xkX01hcDtcblxudmFyIEJpZm9sZGFibGVfRm9sZF9NYXBfQW55ID0gUmVzdWx0JEJzQmFzdGV0LkJpZm9sZGFibGUuRm9sZF9NYXBfQW55O1xuXG52YXIgQmlmb2xkYWJsZV9Gb2xkX01hcF9QbHVzID0gUmVzdWx0JEJzQmFzdGV0LkJpZm9sZGFibGUuRm9sZF9NYXBfUGx1cztcblxudmFyIEJpZm9sZGFibGUgPSB7XG4gIGJpZm9sZF9sZWZ0OiBiaWZvbGRfbGVmdCxcbiAgYmlmb2xkX3JpZ2h0OiBiaWZvbGRfcmlnaHQsXG4gIEZvbGRfTWFwOiBCaWZvbGRhYmxlX0ZvbGRfTWFwLFxuICBGb2xkX01hcF9Bbnk6IEJpZm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBCaWZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbn07XG5cblJlbHVkZV9FeHRlbnNpb25zX0JpZm9sZGFibGUuQmlmb2xkYWJsZUV4dGVuc2lvbnMoQmlmb2xkYWJsZSk7XG5cbmZ1bmN0aW9uIFdpdGhFcnJvcihFKSB7XG4gIHZhciBGdW5jdG9yID0ge1xuICAgIG1hcDogbWFwXG4gIH07XG4gIHZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9yRXh0ZW5zaW9ucyhGdW5jdG9yKTtcbiAgdmFyIEFsdCA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhbHQ6IGFsdFxuICB9O1xuICB2YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfQWx0LkFsdEV4dGVuc2lvbnMoQWx0KTtcbiAgdmFyIEFwcGx5ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseVxuICB9O1xuICB2YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlFeHRlbnNpb25zKEFwcGx5KTtcbiAgdmFyIEFwcGxpY2F0aXZlID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlXG4gIH07XG4gIHZhciBpbmNsdWRlJDMgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZS5BcHBsaWNhdGl2ZUV4dGVuc2lvbnMoQXBwbGljYXRpdmUpO1xuICB2YXIgU2VtaWFsaWduID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFsaWduOiBhbGlnbixcbiAgICBhbGlnbldpdGg6IGFsaWduV2l0aFxuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pYWxpZ24uU2VtaWFsaWduRXh0ZW5zaW9ucyhTZW1pYWxpZ24pO1xuICB2YXIgTW9uYWQgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmUsXG4gICAgZmxhdF9tYXA6IGJpbmRcbiAgfTtcbiAgdmFyIGluY2x1ZGUkNCA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkRXh0ZW5zaW9ucyhNb25hZCk7XG4gIHZhciBNb25hZFRocm93ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kLFxuICAgIHRocm93RXJyb3I6IGVycm9yXG4gIH07XG4gIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkVGhyb3cuTW9uYWRUaHJvd0V4dGVuc2lvbnMoTW9uYWRUaHJvdyk7XG4gIHZhciBNb25hZEVycm9yID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFwcGx5OiBhcHBseSxcbiAgICBwdXJlOiBwdXJlLFxuICAgIGZsYXRfbWFwOiBiaW5kLFxuICAgIHRocm93RXJyb3I6IGVycm9yLFxuICAgIGNhdGNoRXJyb3I6IGNhdGNoRXJyb3JcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRFcnJvci5Nb25hZEVycm9yRXh0ZW5zaW9ucyhNb25hZEVycm9yKTtcbiAgdmFyIFNlbWlncm91cG9pZCA9IHtcbiAgICBjb21wb3NlOiBjb21wb3NlXG4gIH07XG4gIHZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuU2VtaWdyb3Vwb2lkRXh0ZW5zaW9ucyhTZW1pZ3JvdXBvaWQpO1xuICB2YXIgaW5jbHVkZSQ2ID0gUmVzdWx0JEJzQmFzdGV0LkZvbGRhYmxlKEUpO1xuICB2YXIgZm9sZF9sZWZ0ID0gaW5jbHVkZSQ2LmZvbGRfbGVmdDtcbiAgdmFyIGZvbGRfcmlnaHQgPSBpbmNsdWRlJDYuZm9sZF9yaWdodDtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwID0gaW5jbHVkZSQ2LkZvbGRfTWFwO1xuICB2YXIgRm9sZGFibGVfRm9sZF9NYXBfQW55ID0gaW5jbHVkZSQ2LkZvbGRfTWFwX0FueTtcbiAgdmFyIEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXMgPSBpbmNsdWRlJDYuRm9sZF9NYXBfUGx1cztcbiAgdmFyIEZvbGRhYmxlID0ge1xuICAgIGZvbGRfbGVmdDogZm9sZF9sZWZ0LFxuICAgIGZvbGRfcmlnaHQ6IGZvbGRfcmlnaHQsXG4gICAgRm9sZF9NYXA6IEZvbGRhYmxlX0ZvbGRfTWFwLFxuICAgIEZvbGRfTWFwX0FueTogRm9sZGFibGVfRm9sZF9NYXBfQW55LFxuICAgIEZvbGRfTWFwX1BsdXM6IEZvbGRhYmxlX0ZvbGRfTWFwX1BsdXNcbiAgfTtcbiAgdmFyIGluY2x1ZGUkNyA9IFJlbHVkZV9FeHRlbnNpb25zX0ZvbGRhYmxlLkZvbGRhYmxlRXh0ZW5zaW9ucyhGb2xkYWJsZSk7XG4gIHZhciBXaXRoQXBwbGljYXRpdmUgPSBmdW5jdGlvbiAoQSkge1xuICAgIHZhciBwYXJ0aWFsX2FyZyA9IFJlc3VsdCRCc0Jhc3RldC5UcmF2ZXJzYWJsZTtcbiAgICB2YXIgaW5jbHVkZSA9IHBhcnRpYWxfYXJnKEUsIEEpO1xuICAgIHZhciB0cmF2ZXJzZSA9IGluY2x1ZGUudHJhdmVyc2U7XG4gICAgdmFyIHNlcXVlbmNlID0gaW5jbHVkZS5zZXF1ZW5jZTtcbiAgICB2YXIgVHJhdmVyc2FibGVfbWFwID0gaW5jbHVkZS5tYXA7XG4gICAgdmFyIFRyYXZlcnNhYmxlX2ZvbGRfbGVmdCA9IGluY2x1ZGUuZm9sZF9sZWZ0O1xuICAgIHZhciBUcmF2ZXJzYWJsZV9mb2xkX3JpZ2h0ID0gaW5jbHVkZS5mb2xkX3JpZ2h0O1xuICAgIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcCA9IGluY2x1ZGUuRm9sZF9NYXA7XG4gICAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX0FueSA9IGluY2x1ZGUuRm9sZF9NYXBfQW55O1xuICAgIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzID0gaW5jbHVkZS5Gb2xkX01hcF9QbHVzO1xuICAgIHZhciBUcmF2ZXJzYWJsZSA9IHtcbiAgICAgIG1hcDogVHJhdmVyc2FibGVfbWFwLFxuICAgICAgZm9sZF9sZWZ0OiBUcmF2ZXJzYWJsZV9mb2xkX2xlZnQsXG4gICAgICBmb2xkX3JpZ2h0OiBUcmF2ZXJzYWJsZV9mb2xkX3JpZ2h0LFxuICAgICAgRm9sZF9NYXA6IFRyYXZlcnNhYmxlX0ZvbGRfTWFwLFxuICAgICAgRm9sZF9NYXBfQW55OiBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9BbnksXG4gICAgICBGb2xkX01hcF9QbHVzOiBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICAgICAgc2VxdWVuY2U6IHNlcXVlbmNlXG4gICAgfTtcbiAgICBSZWx1ZGVfRXh0ZW5zaW9uc19UcmF2ZXJzYWJsZS5UcmF2ZXJzYWJsZUV4dGVuc2lvbnMoVHJhdmVyc2FibGUpO1xuICAgIHZhciBpbmNsdWRlJDEgPSBSZXN1bHQkQnNCYXN0ZXQuQml0cmF2ZXJzYWJsZShBKTtcbiAgICB2YXIgYml0cmF2ZXJzZSA9IGluY2x1ZGUkMS5iaXRyYXZlcnNlO1xuICAgIHZhciBiaXNlcXVlbmNlID0gaW5jbHVkZSQxLmJpc2VxdWVuY2U7XG4gICAgdmFyIEJpdHJhdmVyc2FibGVfYmltYXAgPSBpbmNsdWRlJDEuYmltYXA7XG4gICAgdmFyIEJpdHJhdmVyc2FibGVfYmlmb2xkX2xlZnQgPSBpbmNsdWRlJDEuYmlmb2xkX2xlZnQ7XG4gICAgdmFyIEJpdHJhdmVyc2FibGVfYmlmb2xkX3JpZ2h0ID0gaW5jbHVkZSQxLmJpZm9sZF9yaWdodDtcbiAgICB2YXIgQml0cmF2ZXJzYWJsZV9Gb2xkX01hcCA9IGluY2x1ZGUkMS5Gb2xkX01hcDtcbiAgICB2YXIgQml0cmF2ZXJzYWJsZV9Gb2xkX01hcF9BbnkgPSBpbmNsdWRlJDEuRm9sZF9NYXBfQW55O1xuICAgIHZhciBCaXRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMgPSBpbmNsdWRlJDEuRm9sZF9NYXBfUGx1cztcbiAgICB2YXIgQml0cmF2ZXJzYWJsZSA9IHtcbiAgICAgIGJpbWFwOiBCaXRyYXZlcnNhYmxlX2JpbWFwLFxuICAgICAgYmlmb2xkX2xlZnQ6IEJpdHJhdmVyc2FibGVfYmlmb2xkX2xlZnQsXG4gICAgICBiaWZvbGRfcmlnaHQ6IEJpdHJhdmVyc2FibGVfYmlmb2xkX3JpZ2h0LFxuICAgICAgRm9sZF9NYXA6IEJpdHJhdmVyc2FibGVfRm9sZF9NYXAsXG4gICAgICBGb2xkX01hcF9Bbnk6IEJpdHJhdmVyc2FibGVfRm9sZF9NYXBfQW55LFxuICAgICAgRm9sZF9NYXBfUGx1czogQml0cmF2ZXJzYWJsZV9Gb2xkX01hcF9QbHVzLFxuICAgICAgYml0cmF2ZXJzZTogYml0cmF2ZXJzZSxcbiAgICAgIGJpc2VxdWVuY2U6IGJpc2VxdWVuY2VcbiAgICB9O1xuICAgIFJlbHVkZV9FeHRlbnNpb25zX0JpdHJhdmVyc2FibGUuQml0cmF2ZXJzYWJsZUV4dGVuc2lvbnMoQml0cmF2ZXJzYWJsZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZSxcbiAgICAgICAgICAgIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgICAgICAgICAgIHNlcXVlbmNlOiBzZXF1ZW5jZSxcbiAgICAgICAgICAgIEJpdHJhdmVyc2FibGU6IEJpdHJhdmVyc2FibGUsXG4gICAgICAgICAgICBiaXRyYXZlcnNlOiBiaXRyYXZlcnNlLFxuICAgICAgICAgICAgYmlzZXF1ZW5jZTogYmlzZXF1ZW5jZVxuICAgICAgICAgIH07XG4gIH07XG4gIHZhciBpbmNsdWRlJDggPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JJbmZpeChGdW5jdG9yKTtcbiAgdmFyIGluY2x1ZGUkOSA9IFJlbHVkZV9FeHRlbnNpb25zX0JpZnVuY3Rvci5CaWZ1bmN0b3JJbmZpeChCaWZ1bmN0b3IpO1xuICB2YXIgaW5jbHVkZSQxMCA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5SW5maXgoQXBwbHkpO1xuICB2YXIgaW5jbHVkZSQxMSA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkSW5maXgoTW9uYWQpO1xuICB2YXIgaW5jbHVkZSQxMiA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cG9pZC5TZW1pZ3JvdXBvaWRJbmZpeChTZW1pZ3JvdXBvaWQpO1xuICB2YXIgSW5maXhfRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlJDguRnVuY3RvckV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlJDguJGxlc3MkJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkaGFzaCRncmVhdCA9IGluY2x1ZGUkOC4kbGVzcyRoYXNoJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkZG9sbGFyID0gaW5jbHVkZSQ4LiRsZXNzJDtcbiAgdmFyIEluZml4XyQkZ3JlYXQgPSBpbmNsdWRlJDguJCRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGF0JGdyZWF0ID0gaW5jbHVkZSQ4LiRsZXNzJGF0JGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkbGVzcyRkb2xsYXIkZ3JlYXQkZ3JlYXQgPSBpbmNsdWRlJDkuJGxlc3MkbGVzcyQkZ3JlYXQkZ3JlYXQ7XG4gIHZhciBJbmZpeF9BcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDEwLkFwcGx5RXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDEwLiRsZXNzJHN0YXIkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRzdGFyID0gaW5jbHVkZSQxMC4kbGVzcyRzdGFyO1xuICB2YXIgSW5maXhfJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDEwLiRzdGFyJGdyZWF0O1xuICB2YXIgSW5maXhfTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQxMS5Nb25hZEV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEgPSBpbmNsdWRlJDExLiRncmVhdCRncmVhdCRlcTtcbiAgdmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlJDExLiRlcSRsZXNzJGxlc3M7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlJDExLiRncmVhdCRlcSRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGVxJGxlc3MgPSBpbmNsdWRlJDExLiRsZXNzJGVxJGxlc3M7XG4gIHZhciBJbmZpeF9TRSA9IGluY2x1ZGUkMTIuU0U7XG4gIHZhciBJbmZpeF8kbGVzcyRsZXNzJGxlc3MgPSBpbmNsdWRlJDEyLiRsZXNzJGxlc3MkbGVzcztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRncmVhdCA9IGluY2x1ZGUkMTIuJGdyZWF0JGdyZWF0JGdyZWF0O1xuICB2YXIgSW5maXggPSB7XG4gICAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICAgJCRncmVhdDogSW5maXhfJCRncmVhdCxcbiAgICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICAgJGxlc3MkbGVzcyQkZ3JlYXQkZ3JlYXQ6IEluZml4XyRsZXNzJGxlc3MkZG9sbGFyJGdyZWF0JGdyZWF0LFxuICAgIEFwcGx5RXh0ZW5zaW9uczogSW5maXhfQXBwbHlFeHRlbnNpb25zLFxuICAgICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICAgJGxlc3Mkc3RhcjogSW5maXhfJGxlc3Mkc3RhcixcbiAgICAkc3RhciRncmVhdDogSW5maXhfJHN0YXIkZ3JlYXQsXG4gICAgTW9uYWRFeHRlbnNpb25zOiBJbmZpeF9Nb25hZEV4dGVuc2lvbnMsXG4gICAgJGdyZWF0JGdyZWF0JGVxOiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEsXG4gICAgJGVxJGxlc3MkbGVzczogSW5maXhfJGVxJGxlc3MkbGVzcyxcbiAgICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgICAkbGVzcyRlcSRsZXNzOiBJbmZpeF8kbGVzcyRlcSRsZXNzLFxuICAgIFNFOiBJbmZpeF9TRSxcbiAgICAkbGVzcyRsZXNzJGxlc3M6IEluZml4XyRsZXNzJGxlc3MkbGVzcyxcbiAgICAkZ3JlYXQkZ3JlYXQkZ3JlYXQ6IEluZml4XyRncmVhdCRncmVhdCRncmVhdFxuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIEZ1bmN0b3I6IEZ1bmN0b3IsXG4gICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgQnNGdW5jdG9yRXh0ZW5zaW9uczogaW5jbHVkZS5Cc0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICAgICAgIGZsaXBNYXA6IGluY2x1ZGUuZmxpcE1hcCxcbiAgICAgICAgICAkJHZvaWQ6IGluY2x1ZGUuJCR2b2lkLFxuICAgICAgICAgIHZvaWRSaWdodDogaW5jbHVkZS52b2lkUmlnaHQsXG4gICAgICAgICAgdm9pZExlZnQ6IGluY2x1ZGUudm9pZExlZnQsXG4gICAgICAgICAgZmxhcDogaW5jbHVkZS5mbGFwLFxuICAgICAgICAgIEFsdDogQWx0LFxuICAgICAgICAgIGFsdDogYWx0LFxuICAgICAgICAgIG9yRWxzZTogaW5jbHVkZSQxLm9yRWxzZSxcbiAgICAgICAgICBBcHBseTogQXBwbHksXG4gICAgICAgICAgYXBwbHk6IGFwcGx5LFxuICAgICAgICAgIEJzQXBwbHlFeHRlbnNpb25zOiBpbmNsdWRlJDIuQnNBcHBseUV4dGVuc2lvbnMsXG4gICAgICAgICAgYXBwbHlGaXJzdDogaW5jbHVkZSQyLmFwcGx5Rmlyc3QsXG4gICAgICAgICAgYXBwbHlTZWNvbmQ6IGluY2x1ZGUkMi5hcHBseVNlY29uZCxcbiAgICAgICAgICBtYXAyOiBpbmNsdWRlJDIubWFwMixcbiAgICAgICAgICBtYXAzOiBpbmNsdWRlJDIubWFwMyxcbiAgICAgICAgICBtYXA0OiBpbmNsdWRlJDIubWFwNCxcbiAgICAgICAgICBtYXA1OiBpbmNsdWRlJDIubWFwNSxcbiAgICAgICAgICB0dXBsZTI6IGluY2x1ZGUkMi50dXBsZTIsXG4gICAgICAgICAgdHVwbGUzOiBpbmNsdWRlJDIudHVwbGUzLFxuICAgICAgICAgIHR1cGxlNDogaW5jbHVkZSQyLnR1cGxlNCxcbiAgICAgICAgICB0dXBsZTU6IGluY2x1ZGUkMi50dXBsZTUsXG4gICAgICAgICAgbWFwVHVwbGUyOiBpbmNsdWRlJDIubWFwVHVwbGUyLFxuICAgICAgICAgIG1hcFR1cGxlMzogaW5jbHVkZSQyLm1hcFR1cGxlMyxcbiAgICAgICAgICBtYXBUdXBsZTQ6IGluY2x1ZGUkMi5tYXBUdXBsZTQsXG4gICAgICAgICAgbWFwVHVwbGU1OiBpbmNsdWRlJDIubWFwVHVwbGU1LFxuICAgICAgICAgIEFwcGxpY2F0aXZlOiBBcHBsaWNhdGl2ZSxcbiAgICAgICAgICBwdXJlOiBwdXJlLFxuICAgICAgICAgIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zOiBpbmNsdWRlJDMuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMsXG4gICAgICAgICAgbGlmdEExOiBpbmNsdWRlJDMubGlmdEExLFxuICAgICAgICAgIFNlbWlhbGlnbjogU2VtaWFsaWduLFxuICAgICAgICAgIE1vbmFkOiBNb25hZCxcbiAgICAgICAgICBiaW5kOiBiaW5kLFxuICAgICAgICAgIEJzTW9uYWRFeHRlbnNpb25zOiBpbmNsdWRlJDQuQnNNb25hZEV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxhdE1hcDogaW5jbHVkZSQ0LmZsYXRNYXAsXG4gICAgICAgICAgZmxhdHRlbjogaW5jbHVkZSQ0LmZsYXR0ZW4sXG4gICAgICAgICAgY29tcG9zZUtsZWlzbGk6IGluY2x1ZGUkNC5jb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBmbGlwQ29tcG9zZUtsZWlzbGk6IGluY2x1ZGUkNC5mbGlwQ29tcG9zZUtsZWlzbGksXG4gICAgICAgICAgbGlmdE0xOiBpbmNsdWRlJDQubGlmdE0xLFxuICAgICAgICAgIHdoZW5fOiBpbmNsdWRlJDQud2hlbl8sXG4gICAgICAgICAgdW5sZXNzOiBpbmNsdWRlJDQudW5sZXNzLFxuICAgICAgICAgIE1vbmFkVGhyb3c6IE1vbmFkVGhyb3csXG4gICAgICAgICAgdGhyb3dFcnJvcjogZXJyb3IsXG4gICAgICAgICAgTW9uYWRFcnJvcjogTW9uYWRFcnJvcixcbiAgICAgICAgICBjYXRjaEVycm9yOiBjYXRjaEVycm9yLFxuICAgICAgICAgIFNlbWlncm91cG9pZDogU2VtaWdyb3Vwb2lkLFxuICAgICAgICAgIGNvbXBvc2U6IGNvbXBvc2UsXG4gICAgICAgICAgYW5kVGhlbjogaW5jbHVkZSQ1LmFuZFRoZW4sXG4gICAgICAgICAgRm9sZGFibGU6IEZvbGRhYmxlLFxuICAgICAgICAgIGZvbGRMZWZ0OiBmb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZFJpZ2h0OiBmb2xkX3JpZ2h0LFxuICAgICAgICAgIEJzRm9sZGFibGVFeHRlbnNpb25zOiBpbmNsdWRlJDcuQnNGb2xkYWJsZUV4dGVuc2lvbnMsXG4gICAgICAgICAgYW55OiBpbmNsdWRlJDcuYW55LFxuICAgICAgICAgIGFsbDogaW5jbHVkZSQ3LmFsbCxcbiAgICAgICAgICBjb250YWluc0J5OiBpbmNsdWRlJDcuY29udGFpbnNCeSxcbiAgICAgICAgICBjb250YWluczogaW5jbHVkZSQ3LmNvbnRhaW5zLFxuICAgICAgICAgIGluZGV4T2ZCeTogaW5jbHVkZSQ3LmluZGV4T2ZCeSxcbiAgICAgICAgICBpbmRleE9mOiBpbmNsdWRlJDcuaW5kZXhPZixcbiAgICAgICAgICBtaW5CeTogaW5jbHVkZSQ3Lm1pbkJ5LFxuICAgICAgICAgIG1pbjogaW5jbHVkZSQ3Lm1pbixcbiAgICAgICAgICBtYXhCeTogaW5jbHVkZSQ3Lm1heEJ5LFxuICAgICAgICAgIG1heDogaW5jbHVkZSQ3Lm1heCxcbiAgICAgICAgICBjb3VudEJ5OiBpbmNsdWRlJDcuY291bnRCeSxcbiAgICAgICAgICBsZW5ndGg6IGluY2x1ZGUkNy5sZW5ndGgsXG4gICAgICAgICAgc2l6ZTogaW5jbHVkZSQ3LnNpemUsXG4gICAgICAgICAgY291bnQ6IGluY2x1ZGUkNy5jb3VudCxcbiAgICAgICAgICBmb3JFYWNoOiBpbmNsdWRlJDcuZm9yRWFjaCxcbiAgICAgICAgICBmb3JFYWNoV2l0aEluZGV4OiBpbmNsdWRlJDcuZm9yRWFjaFdpdGhJbmRleCxcbiAgICAgICAgICBmaW5kOiBpbmNsdWRlJDcuZmluZCxcbiAgICAgICAgICBmaW5kV2l0aEluZGV4OiBpbmNsdWRlJDcuZmluZFdpdGhJbmRleCxcbiAgICAgICAgICB0b0xpc3Q6IGluY2x1ZGUkNy50b0xpc3QsXG4gICAgICAgICAgdG9BcnJheTogaW5jbHVkZSQ3LnRvQXJyYXksXG4gICAgICAgICAgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zOiBpbmNsdWRlJDcuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9uczogaW5jbHVkZSQ3LkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyxcbiAgICAgICAgICBmb2xkTWFwOiBpbmNsdWRlJDcuZm9sZE1hcCxcbiAgICAgICAgICBmb2xkV2l0aE1vbm9pZDogaW5jbHVkZSQ3LmZvbGRXaXRoTW9ub2lkLFxuICAgICAgICAgIGludGVyY2FsYXRlOiBpbmNsdWRlJDcuaW50ZXJjYWxhdGUsXG4gICAgICAgICAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IGluY2x1ZGUkNy5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyxcbiAgICAgICAgICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9uczogaW5jbHVkZSQ3LkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zLFxuICAgICAgICAgIEZvbGRhYmxlRXFFeHRlbnNpb25zOiBpbmNsdWRlJDcuRm9sZGFibGVFcUV4dGVuc2lvbnMsXG4gICAgICAgICAgRm9sZGFibGVPcmRFeHRlbnNpb25zOiBpbmNsdWRlJDcuRm9sZGFibGVPcmRFeHRlbnNpb25zLFxuICAgICAgICAgIFdpdGhBcHBsaWNhdGl2ZTogV2l0aEFwcGxpY2F0aXZlLFxuICAgICAgICAgIEVxOiB1bmRlZmluZWQsXG4gICAgICAgICAgT3JkOiB1bmRlZmluZWQsXG4gICAgICAgICAgU2hvdzogdW5kZWZpbmVkLFxuICAgICAgICAgIEluZml4OiBJbmZpeFxuICAgICAgICB9O1xufVxuXG52YXIgdW5pdCA9IC8qIE9rICovQmxvY2suX18oMCwgW3VuZGVmaW5lZF0pO1xuXG52YXIgdG9PcHRpb24gPSBnZXRPaztcblxudmFyIG1hcE9rID0gbWFwO1xuXG52YXIgdGFwT2sgPSB0YXA7XG5cbnZhciB0b1ZhbGlkYXRpb24gPSBSZWx1ZGVfVmFsaWRhdGlvbi5mcm9tUmVzdWx0O1xuXG52YXIgZnJvbVZhbGlkYXRpb24gPSBSZWx1ZGVfVmFsaWRhdGlvbi50b1Jlc3VsdDtcblxudmFyIG1hcExlZnQgPSBpbmNsdWRlLm1hcExlZnQ7XG5cbnZhciBtYXBSaWdodCA9IGluY2x1ZGUubWFwUmlnaHQ7XG5cbnZhciBtYXBFcnJvciA9IGluY2x1ZGUubWFwRXJyb3I7XG5cbnZhciBiaWZvbGRMZWZ0ID0gYmlmb2xkX2xlZnQ7XG5cbnZhciBiaWZvbGRSaWdodCA9IGJpZm9sZF9yaWdodDtcblxuZXhwb3J0IHtcbiAgb2sgLFxuICBlcnJvciAsXG4gIHVuaXQgLFxuICBnZXRPayAsXG4gIHRvT3B0aW9uICxcbiAgZ2V0RXJyb3IgLFxuICBpc09rICxcbiAgaXNFcnJvciAsXG4gIGZvbGQgLFxuICBnZXRPckVsc2UgLFxuICBnZXRPckVsc2VMYXp5ICxcbiAgbWVyZ2UgLFxuICBmbGlwICxcbiAgY29tcG9zZSAsXG4gIGFuZFRoZW4gLFxuICBtYXAgLFxuICBtYXBPayAsXG4gIHRhcCAsXG4gIHRhcE9rICxcbiAgdGFwRXJyb3IgLFxuICBhcHBseSAsXG4gIG1hcDIgLFxuICBtYXAzICxcbiAgbWFwNCAsXG4gIG1hcDUgLFxuICBwdXJlICxcbiAgYmluZCAsXG4gIGZsYXRNYXAgLFxuICBmbGF0dGVuICxcbiAgYWx0ICxcbiAgYWxpZ24gLFxuICBhbGlnbldpdGggLFxuICBjYXRjaEVycm9yICxcbiAgaGFuZGxlRXJyb3IgLFxuICBtYXBIYW5kbGVFcnJvciAsXG4gIHJlY292ZXIgLFxuICBmcm9tT3B0aW9uICxcbiAgZnJvbU9wdGlvbkxhenkgLFxuICBlcUJ5ICxcbiAgdHJpZXMgLFxuICB0cmllc0FzU3RyaW5nICxcbiAgdG9WYWxpZGF0aW9uICxcbiAgZnJvbVZhbGlkYXRpb24gLFxuICB0b1ZhbGlkYXRpb25OZWwgLFxuICB0b1ZhbGlkYXRpb25OZWEgLFxuICBCaWZ1bmN0b3IgLFxuICBiaW1hcCAsXG4gIG1hcExlZnQgLFxuICBtYXBSaWdodCAsXG4gIG1hcEVycm9yICxcbiAgQmlmb2xkYWJsZSAsXG4gIGJpZm9sZExlZnQgLFxuICBiaWZvbGRSaWdodCAsXG4gIFdpdGhFcnJvciAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgSnNfZXhuIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2pzX2V4bi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1ZvaWQgZnJvbSBcIi4vUmVsdWRlX1ZvaWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9Kc19FeG4gZnJvbSBcIi4vanMvUmVsdWRlX0pzX0V4bi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1Jlc3VsdCBmcm9tIFwiLi9SZWx1ZGVfUmVzdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRnVuY3Rpb24gZnJvbSBcIi4vUmVsdWRlX0Z1bmN0aW9uLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2pzX2V4Y2VwdGlvbnMgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9qc19leGNlcHRpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0Jhc2UgZnJvbSBcIi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQWx0IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcyBmcm9tIFwiLi9vcHRpb24vUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19CaWZ1bmN0b3IgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19CaWZ1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbiBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRFcnJvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkRXJyb3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkVGhyb3cgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZFRocm93LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBsaWNhdGl2ZSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuYnMuanNcIjtcblxuZnVuY3Rpb24gcHVyZShhKSB7XG4gIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW2FdKTtcbn1cblxuZnVuY3Rpb24gcHVyZVdpdGhWb2lkKGEpIHtcbiAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbYV0pO1xufVxuXG5mdW5jdGlvbiAkJHRocm93KGUpIHtcbiAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2VdKTtcbn1cblxuZnVuY3Rpb24gdGhyb3dXaXRoVm9pZChlKSB7XG4gIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtlXSk7XG59XG5cbmZ1bmN0aW9uIHN1c3BlbmQoZ2V0QSkge1xuICByZXR1cm4gLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFtnZXRBXSk7XG59XG5cbmZ1bmN0aW9uIHN1c3BlbmRXaXRoVm9pZChnZXRBKSB7XG4gIHJldHVybiAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgW2dldEFdKTtcbn1cblxuZnVuY3Rpb24gc3VzcGVuZFRocm93KGdldEVycm9yKSB7XG4gIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShnZXRFcnJvciwgdW5kZWZpbmVkKV0pO1xuICAgICAgICAgICAgICB9KV0pO1xufVxuXG5mdW5jdGlvbiBzdXNwZW5kSU8oZ2V0SU8pIHtcbiAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFtnZXRJT10pO1xufVxuXG5mdW5jdGlvbiBhc3luYyhvbkRvbmUpIHtcbiAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgW29uRG9uZV0pO1xufVxuXG5mdW5jdGlvbiBmcm9tT3B0aW9uKGdldEVycm9yLCBvcHRpb24pIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fQmFzZS5mb2xkTGF6eSgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGdldEVycm9yLCB1bmRlZmluZWQpXSk7XG4gICAgICAgICAgICAgIH0pLCBwdXJlLCBvcHRpb24pO1xufVxuXG5mdW5jdGlvbiBmcm9tUmVzdWx0KHJlcykge1xuICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mb2xkKCQkdGhyb3csIHB1cmUsIHJlcyk7XG59XG5cbmZ1bmN0aW9uIG1hcChmLCBpbykge1xuICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgZixcbiAgICAgICAgICAgIGlvXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uICRsZXNzJGhhc2gkZ3JlYXQoaW9BLCBhVG9CKSB7XG4gIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICBhVG9CLFxuICAgICAgICAgICAgaW9BXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRhcChmKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShmLCBhKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBwYXJhbVxuICAgICAgICAgICAgICBdKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHkoaW9BVG9CLCBpb0EpIHtcbiAgcmV0dXJuIC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgaW9BVG9CLFxuICAgICAgICAgICAgaW9BXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZsYXRNYXAoclRvSU9BLCBpb1IpIHtcbiAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICByVG9JT0EsXG4gICAgICAgICAgICBpb1JcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmluZChpb0EsIGFUb0lPQikge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIGFUb0lPQixcbiAgICAgICAgICAgIGlvQVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb25kKGYsIG5ld0EsIGVyciwgaW9BKSB7XG4gIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgaWYgKEN1cnJ5Ll8xKGYsIGEpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtuZXdBXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtlcnJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgaW9BXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvbmRFcnJvcihmLCBlcnIsIGlvQSkge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIGlmIChDdXJyeS5fMShmLCBhKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbYV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbZXJyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlvQVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB1bnNhZmVSdW5Bc3luYyhfb25Eb25lLCBfaW9BKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaW9BID0gX2lvQTtcbiAgICB2YXIgb25Eb25lID0gX29uRG9uZTtcbiAgICBzd2l0Y2ggKGlvQS50YWcgfCAwKSB7XG4gICAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtpb0FbMF1dKSk7XG4gICAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogRXJyb3IgKi9CbG9jay5fXygxLCBbaW9BWzBdXSkpO1xuICAgICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEoaW9BWzBdLCB1bmRlZmluZWQpXSkpO1xuICAgICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgICBfaW9BID0gQ3VycnkuXzEoaW9BWzBdLCB1bmRlZmluZWQpO1xuICAgICAgICAgIGNvbnRpbnVlIDtcbiAgICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgICByZXR1cm4gQ3VycnkuXzEoaW9BWzBdLCBvbkRvbmUpO1xuICAgICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgICB2YXIgcjBUb0EgPSBpb0FbMF07XG4gICAgICAgICAgX2lvQSA9IGlvQVsxXTtcbiAgICAgICAgICBfb25Eb25lID0gKGZ1bmN0aW9uKG9uRG9uZSxyMFRvQSl7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShyMFRvQSwgcmVzdWx0RVswXSldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIH0ob25Eb25lLHIwVG9BKSk7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luY1BhcjIoKGZ1bmN0aW9uKG9uRG9uZSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVzdWx0UjBUb0EsIHJlc3VsdFIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgUmVsdWRlX1Jlc3VsdC5hcHBseShyZXN1bHRSMFRvQSwgcmVzdWx0UjApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KG9uRG9uZSkpLCBpb0FbMF0sIGlvQVsxXSk7XG4gICAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgICB2YXIgcjBUb0lPQSA9IGlvQVswXTtcbiAgICAgICAgICBfaW9BID0gaW9BWzFdO1xuICAgICAgICAgIF9vbkRvbmUgPSAoZnVuY3Rpb24ob25Eb25lLHIwVG9JT0Epe1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3Jlc3VsdEVbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEocjBUb0lPQSwgcmVzdWx0RVswXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB9KG9uRG9uZSxyMFRvSU9BKSk7XG4gICAgICAgICAgY29udGludWUgO1xuICAgICAgXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB1bnNhZmVSdW5Bc3luY1BhcjIob25Eb25lLCBpb0EsIGlvQikge1xuICB2YXIgcmVmQSA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciByZWZCID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHRBKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdEIgPSByZWZCLmNvbnRlbnRzO1xuICAgICAgICAgIGlmIChyZXN1bHRCICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihvbkRvbmUsIHJlc3VsdEEsIHJlc3VsdEIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWZBLmNvbnRlbnRzID0gcmVzdWx0QTtcbiAgICAgICAgICAgIHJldHVybiA7XG4gICAgICAgICAgfVxuICAgICAgICB9KSwgaW9BKTtcbiAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0Qikge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRBID0gcmVmQS5jb250ZW50cztcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0QSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIob25Eb25lLCByZXN1bHRBLCByZXN1bHRCKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVmQi5jb250ZW50cyA9IHJlc3VsdEI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIGlvQik7XG59XG5cbmZ1bmN0aW9uIHVuc2FmZVJ1bkFzeW5jUGFyMyhvbkRvbmUsIGlvQSwgaW9CLCBpb0MpIHtcbiAgdmFyIHJlZkEgPSB7XG4gICAgY29udGVudHM6IHVuZGVmaW5lZFxuICB9O1xuICB2YXIgcmVmQiA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciByZWZDID0ge1xuICAgIGNvbnRlbnRzOiB1bmRlZmluZWRcbiAgfTtcbiAgdW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHRBKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gcmVmQi5jb250ZW50cztcbiAgICAgICAgICB2YXIgbWF0Y2gkMSA9IHJlZkMuY29udGVudHM7XG4gICAgICAgICAgaWYgKG1hdGNoICE9PSB1bmRlZmluZWQgJiYgbWF0Y2gkMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gQ3VycnkuXzMob25Eb25lLCByZXN1bHRBLCBtYXRjaCwgbWF0Y2gkMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlZkEuY29udGVudHMgPSByZXN1bHRBO1xuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLCBpb0EpO1xuICB1bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHJlc3VsdEIpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSByZWZBLmNvbnRlbnRzO1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gcmVmQy5jb250ZW50cztcbiAgICAgICAgICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMyhvbkRvbmUsIG1hdGNoLCByZXN1bHRCLCBtYXRjaCQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVmQi5jb250ZW50cyA9IHJlc3VsdEI7XG4gICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgIH1cbiAgICAgICAgfSksIGlvQik7XG4gIHJldHVybiB1bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHJlc3VsdEMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSByZWZBLmNvbnRlbnRzO1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCQxID0gcmVmQi5jb250ZW50cztcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IHVuZGVmaW5lZCAmJiBtYXRjaCQxICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMyhvbkRvbmUsIG1hdGNoLCBtYXRjaCQxLCByZXN1bHRDKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVmQy5jb250ZW50cyA9IHJlc3VsdEM7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksIGlvQyk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VBcHBseShpb1IwVG9BVG9CLCBpb1IwLCBpb0JUb0MpIHtcbiAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BVG9CKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9BVG9CLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZywgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9CVG9DXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpb1IwVG9BVG9CXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VGbGF0TWFwKHIwVG9JT0FUb0IsIGlvUjAsIGlvQlRvQykge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhVG9CKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYlRvQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9CVG9DXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMFRvSU9BVG9CLCByMClcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGlvUjBcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVN1c3BlbmRJTyhnZXRJT0FUb0IsIGlvQlRvQykge1xuICBzd2l0Y2ggKGlvQlRvQy50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHZhciBiVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGFUb0IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9BVG9CLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBpb0JUb0M7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGFUb0IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKGdldEJUb0MsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT0FUb0IsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGFUb0IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT0JUb0MsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQVRvQiwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUJUb0MsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYlRvQyA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8xKGdldElPQVRvQiwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIGlvUjAgPSBpb0JUb0NbMV07XG4gICAgICAgIHZhciByMFRvQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYVRvQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9CVG9DLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9BVG9CLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHZhciBpb1IwJDEgPSBpb0JUb0NbMV07XG4gICAgICAgIHZhciBpb1IwVG9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhVG9CKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9CVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMCQxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9CVG9DXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT0FUb0IsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgaW9SMCQyID0gaW9CVG9DWzFdO1xuICAgICAgICB2YXIgcjBUb0lPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYVRvQikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjBUb0lPQlRvQywgcjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwJDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQVRvQiwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcG9zZVB1cmUoYVRvQiwgaW9CVG9DKSB7XG4gIHN3aXRjaCAoaW9CVG9DLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgdmFyIGJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gaW9CVG9DO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0QlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKGdldEJUb0MsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYlRvQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT0JUb0MsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZUJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVCVG9DLCAoZnVuY3Rpb24gKHJlc3VsdEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiVG9DID0gcmVzdWx0RVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIwVG9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9CVG9DLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIGlvQlRvQ1sxXVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0JUb0MsIHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9CVG9DLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9CVG9DWzBdXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgaW9CVG9DWzFdXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciByMFRvSU9CVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjBUb0lPQlRvQywgcjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBpb0JUb0NbMV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb3NlTWFwKHIwVG9BVG9CLCBpb1IwLCBpb0JUb0MpIHtcbiAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShyMFRvQVRvQiwgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZywgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaW9CVG9DXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpb1IwXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VBc3luYyhvbkRvbmVBVG9CLCBpb0JUb0MpIHtcbiAgc3dpdGNoIChpb0JUb0MudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICB2YXIgYlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUFUb0IsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBpb0JUb0M7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQVRvQiwgKGZ1bmN0aW9uIChyZXN1bHRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgcmVzdWx0RSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVRvQiA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShnZXRCVG9DLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUFUb0IsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYlRvQyA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzEoZ2V0SU9CVG9DLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUFUb0IsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUJUb0MsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0RS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYlRvQyA9IHJlc3VsdEVbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciBpb1IwID0gaW9CVG9DWzFdO1xuICAgICAgICB2YXIgcjBUb0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVBVG9CLCAoZnVuY3Rpb24gKHJlc3VsdEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRFLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCByZXN1bHRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhVG9CID0gcmVzdWx0RVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luYyhvbkRvbmUsIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQoYVRvQiwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICB2YXIgaW9SMCQxID0gaW9CVG9DWzFdO1xuICAgICAgICB2YXIgaW9SMFRvQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUFUb0IsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQlRvQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyA9IEN1cnJ5Ll8xKHIwVG9CVG9DLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChhVG9CLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMCQxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9CVG9DXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgaW9SMCQyID0gaW9CVG9DWzFdO1xuICAgICAgICB2YXIgcjBUb0lPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUFUb0IsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFUb0IgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGJUb0MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KGFUb0IsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIwVG9JT0JUb0MsIHIwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMCQyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBvc2VUaHJvdyhlLCBpb0JUb0MpIHtcbiAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2VdKTtcbn1cblxuZnVuY3Rpb24gY29tcG9zZVN1c3BlbmQoZ2V0QVRvQiwgaW9CVG9DKSB7XG4gIHN3aXRjaCAoaW9CVG9DLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgdmFyIGJUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShnZXRBVG9CLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHBhcnRpYWxfYXJnLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBpb0JUb0M7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRCVG9DID0gaW9CVG9DWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ2V0QlRvQywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmckMSA9IEN1cnJ5Ll8xKGdldEFUb0IsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmckMSwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT0JUb0MgPSBpb0JUb0NbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoYlRvQykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ2V0QVRvQiwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmcsIGJUb0MsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPQlRvQywgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUJUb0MsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJUb0MgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEoZ2V0QVRvQiwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHBhcnRpYWxfYXJnLCBiVG9DLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMFRvQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShyMFRvQlRvQywgcjApO1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsX2FyZyQxID0gQ3VycnkuXzEoZ2V0QVRvQiwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZyQxLCBwYXJ0aWFsX2FyZywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgaW9CVG9DWzFdXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQlRvQywgcjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnID0gQ3VycnkuXzEocjBUb0JUb0MsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxfYXJnJDEgPSBDdXJyeS5fMShnZXRBVG9CLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocGFydGlhbF9hcmckMSwgcGFydGlhbF9hcmcsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvQlRvQ1swXVxuICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIGlvQlRvQ1sxXVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjBUb0lPQlRvQyA9IGlvQlRvQ1swXTtcbiAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChiVG9DKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGlhbF9hcmcgPSBDdXJyeS5fMShnZXRBVG9CLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChwYXJ0aWFsX2FyZywgYlRvQywgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjBUb0lPQlRvQywgcjApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBpb0JUb0NbMV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21wb3NlKGlvQlRvQywgaW9BVG9CKSB7XG4gIHN3aXRjaCAoaW9BVG9CLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VQdXJlKGlvQVRvQlswXSwgaW9CVG9DKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBjb21wb3NlVGhyb3coaW9BVG9CWzBdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICByZXR1cm4gY29tcG9zZVN1c3BlbmQoaW9BVG9CWzBdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHJldHVybiBjb21wb3NlU3VzcGVuZElPKGlvQVRvQlswXSwgaW9CVG9DKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHJldHVybiBjb21wb3NlQXN5bmMoaW9BVG9CWzBdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiBjb21wb3NlTWFwKGlvQVRvQlswXSwgaW9BVG9CWzFdLCBpb0JUb0MpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VBcHBseShpb0FUb0JbMF0sIGlvQVRvQlsxXSwgaW9CVG9DKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgcmV0dXJuIGNvbXBvc2VGbGF0TWFwKGlvQVRvQlswXSwgaW9BVG9CWzFdLCBpb0JUb0MpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGFuZFRoZW4oaW9BVG9CLCBpb0JUb0MpIHtcbiAgcmV0dXJuIGNvbXBvc2UoaW9CVG9DLCBpb0FUb0IpO1xufVxuXG5mdW5jdGlvbiBtYXBFcnJvcihlMVRvRTIsIGlvQSkge1xuICBzd2l0Y2ggKGlvQS50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvQVswXV0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW0N1cnJ5Ll8xKGUxVG9FMiwgaW9BWzBdKV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICByZXR1cm4gLyogU3VzcGVuZCAqL0Jsb2NrLl9fKDIsIFtpb0FbMF1dKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9BID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFwRXJyb3IoZTFUb0UyLCBDdXJyeS5fMShnZXRJT0EsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZUEgPSBpb0FbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVBLCAoZnVuY3Rpb24gKHJlc3VsdEEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIEN1cnJ5Ll8yKFJlbHVkZV9SZXN1bHQubWFwRXJyb3IsIGUxVG9FMiwgcmVzdWx0QSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgaW9BWzBdLFxuICAgICAgICAgICAgICAgICAgbWFwRXJyb3IoZTFUb0UyLCBpb0FbMV0pXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICBtYXBFcnJvcihlMVRvRTIsIGlvQVswXSksXG4gICAgICAgICAgICAgICAgICBtYXBFcnJvcihlMVRvRTIsIGlvQVsxXSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHJUb0lPQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWFwRXJyb3IoZTFUb0UyLCBDdXJyeS5fMShyVG9JT0EsIHIpKTtcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBtYXBFcnJvcihlMVRvRTIsIGlvQVsxXSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiB0YXBFcnJvcihmLCBpbykge1xuICByZXR1cm4gbWFwRXJyb3IoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgQ3VycnkuXzEoZiwgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICAgIH0pLCBpbyk7XG59XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3IoZVRvSU9BLCBpb0EpIHtcbiAgc3dpdGNoIChpb0EudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtpb0FbMF1dKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShlVG9JT0EsIGlvQVswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgW2lvQVswXV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT0EgPSBpb0FbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgQ3VycnkuXzEoZ2V0SU9BLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVBID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lQSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgQ3VycnkuXzEoZVRvSU9BLCBhWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFthWzBdXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvck1hcChlVG9JT0EsIGlvQVswXSwgaW9BWzFdKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yQXBwbHkoZVRvSU9BLCBpb0FbMF0sIGlvQVsxXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yRmxhdE1hcChlVG9JT0EsIGlvQVswXSwgaW9BWzFdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXRjaEVycm9yTWFwKGVUb0lPQSwgcjBUb0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBQdXJlICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKHIwVG9BLCBpb1IwWzBdKV0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShlVG9JT0EsIGlvUjBbMF0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0EsIEN1cnJ5Ll8xKGdldFIwLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT1IwLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIwLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBDdXJyeS5fMShlVG9JT0EsIHIwWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShyMFRvQSwgcjBbMF0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICB2YXIgcjFUb1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChyMVRvUjAsIHIwVG9BLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZSgvKiBQdXJlICovQmxvY2suX18oMCwgW3IwVG9BXSksIGlvUjBbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgcjFUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChyMVRvSU9SMCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIwVG9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXRjaEVycm9yQXBwbHkoZVRvSU9BLCBpb1IwVG9BLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHZhciByMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShlVG9JT0EsIGlvUjBbMF0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT1IwLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgQ3VycnkuXzEoZVRvSU9BLCBlWzBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmMob25Eb25lLCBjYXRjaEVycm9yKGVUb0lPQSwgLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbZVswXV0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2UoaW9SMFRvQSwgLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtpb1IwWzBdXSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlKGlvUjBUb0EsIGlvUjBbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogRmxhdE1hcCAqLzcgOlxuICAgICAgICB2YXIgaW9SMSA9IGlvUjBbMV07XG4gICAgICAgIHZhciByMVRvSU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll9fMShyMFRvQSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIxVG9JT1IwLCByMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIGNhdGNoRXJyb3JGbGF0TWFwKGVUb0lPQSwgcjBUb0lPQSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIEN1cnJ5Ll8xKHIwVG9JT0EsIGlvUjBbMF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBDdXJyeS5fMShlVG9JT0EsIGlvUjBbMF0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gY2F0Y2hFcnJvcihlVG9JT0EsIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvSU9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV0pKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvSU9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSldKSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyMC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgQ3VycnkuXzEoZVRvSU9BLCByMFswXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgY2F0Y2hFcnJvcihlVG9JT0EsIEN1cnJ5Ll8xKHIwVG9JT0EsIHIwWzBdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICB2YXIgcjFUb1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocjFUb1IwLCByMFRvSU9BLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHZhciBpb1IxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBjYXRjaEVycm9yKGVUb0lPQSwgLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMVRvUjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0lPQSwgQ3VycnkuXzEocjFUb1IwLCByMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjFUb1IwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGNhdGNoRXJyb3IoZVRvSU9BLCAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvSU9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjFUb0lPUjAsIHIxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZVRvQSwgaW9BKSB7XG4gIHJldHVybiBjYXRjaEVycm9yKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGVUb0EsIGUpXSk7XG4gICAgICAgICAgICAgIH0pLCBpb0EpO1xufVxuXG5mdW5jdGlvbiBtYXBIYW5kbGVFcnJvcihhVG9CLCBlVG9CLCBpb0FFKSB7XG4gIHJldHVybiBoYW5kbGVFcnJvcihlVG9CLCAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgYVRvQixcbiAgICAgICAgICAgICAgICBpb0FFXG4gICAgICAgICAgICAgIF0pKTtcbn1cblxuZnVuY3Rpb24gYmltYXAoYVRvQiwgZTFUb0UyLCBpbykge1xuICByZXR1cm4gbWFwRXJyb3IoZTFUb0UyLCAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgYVRvQixcbiAgICAgICAgICAgICAgICBpb1xuICAgICAgICAgICAgICBdKSk7XG59XG5cbmZ1bmN0aW9uIGJpdGFwKGYsIGcsIGlvKSB7XG4gIHJldHVybiBiaW1hcCgoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICBDdXJyeS5fMShmLCBhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGcsIGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICB9KSwgaW8pO1xufVxuXG5mdW5jdGlvbiBhbHQoaW8xLCBpbzIpIHtcbiAgcmV0dXJuIGNhdGNoRXJyb3IoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbzI7XG4gICAgICAgICAgICAgIH0pLCBpbzEpO1xufVxuXG5mdW5jdGlvbiBhbGlnbihpb0EsIGlvQikge1xuICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5zYWZlUnVuQXN5bmNQYXIyKChmdW5jdGlvbiAocmVzdWx0QSwgcmVzdWx0Qikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEEudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHRCLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIHJlc3VsdEEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWy8qIFRoYXQgKi9CbG9jay5fXygxLCBbcmVzdWx0QlswXV0pXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHJlc3VsdEFbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0Qi50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbLyogVGhpcyAqL0Jsb2NrLl9fKDAsIFthXSldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFsvKiBCb3RoICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRCWzBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgaW9BLCBpb0IpO1xuICAgICAgICAgICAgICB9KV0pO1xufVxuXG5mdW5jdGlvbiBhbGlnbldpdGgoZiwgZmEsIGZiKSB7XG4gIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICBmLFxuICAgICAgICAgICAgYWxpZ24oZmEsIGZiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvckVsc2UoZmFsbGJhY2ssIGlvKSB7XG4gIHJldHVybiBjYXRjaEVycm9yKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICAgIH0pLCBpbyk7XG59XG5cbmZ1bmN0aW9uIHRyaWVzKGdldEEpIHtcbiAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGdldEEsIHVuZGVmaW5lZCldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKHJhd19leG4pe1xuICAgICAgICAgICAgICAgICAgdmFyIGV4biA9IENhbWxfanNfZXhjZXB0aW9ucy5pbnRlcm5hbFRvT0NhbWxFeGNlcHRpb24ocmF3X2V4bik7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbZXhuXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KV0pO1xufVxuXG5mdW5jdGlvbiB0cmllc0pTKGdldEEpIHtcbiAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKGdldEEsIHVuZGVmaW5lZCldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKHJhd19qc0V4bil7XG4gICAgICAgICAgICAgICAgICB2YXIganNFeG4gPSBDYW1sX2pzX2V4Y2VwdGlvbnMuaW50ZXJuYWxUb09DYW1sRXhjZXB0aW9uKHJhd19qc0V4bik7XG4gICAgICAgICAgICAgICAgICBpZiAoanNFeG5bMF0gPT09IEpzX2V4bi4kJEVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtqc0V4blsxXV0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgdmFyIGpzRXhuJDEgPSBSZWx1ZGVfSnNfRXhuLnVuc2FmZUZyb21FeG4oanNFeG4pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2pzRXhuJDFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXSk7XG59XG5cbmZ1bmN0aW9uIGZsaXAoaW9BKSB7XG4gIHN3aXRjaCAoaW9BLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIC8qIFRocm93ICovQmxvY2suX18oMSwgW2lvQVswXV0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbaW9BWzBdXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRBID0gaW9BWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEoZ2V0QSwgdW5kZWZpbmVkKV0pO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT0EgPSBpb0FbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGlwKEN1cnJ5Ll8xKGdldElPQSwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUEsIChmdW5jdGlvbiAocmVzdWx0QSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgUmVsdWRlX1Jlc3VsdC5mbGlwKHJlc3VsdEEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgcmV0dXJuIGZsaXBNYXAoaW9BWzBdLCBpb0FbMV0pO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGZsaXBBcHBseShpb0FbMF0sIGlvQVsxXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHJldHVybiBmbGlwRmxhdE1hcChpb0FbMF0sIGlvQVsxXSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gZmxpcE1hcChyMFRvQSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gLyogVGhyb3cgKi9CbG9jay5fXygxLCBbQ3VycnkuXzEocjBUb0EsIGlvUjBbMF0pXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtpb1IwWzBdXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUaHJvdyAqL0Jsb2NrLl9fKDEsIFtDdXJyeS5fMShyMFRvQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxpcCgvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAocmVzdWx0UjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIFJlbHVkZV9SZXN1bHQuZmxpcChSZWx1ZGVfUmVzdWx0Lm1hcChyMFRvQSwgcmVzdWx0UjApKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0Z1bmN0aW9uLkluZml4LiRncmVhdCRncmVhdChyMVRvUjAsIHIwVG9BLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHJldHVybiBmbGlwKC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2UoLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtyMFRvQV0pLCBpb1IwWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHJUb0lPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyVG9JT1IwLCByKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gZmxpcEFwcGx5KGlvUjBUb0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgdmFyIHIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCByMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvUjBbMF1dKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldFIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9BLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGlwKC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW2VbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcjAgPSBlWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtlWzBdXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIEVycm9yICovQmxvY2suX18oMSwgW2VbMF1dKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiBmbGlwKC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2UoaW9SMFRvQSwgLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtpb1IwWzBdXSkpLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZShpb1IwVG9BLCBpb1IwWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMVRvSU9SMCwgcjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBmbGlwRmxhdE1hcChyMFRvSU9BLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiBmbGlwKEN1cnJ5Ll8xKHIwVG9JT0EsIGlvUjBbMF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvUjBbMF1dKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldFIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsaXAoQ3VycnkuXzEocjBUb0lPQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmbGlwKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvSU9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoZ2V0SU9SMCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIEFzeW5jICovNCA6XG4gICAgICAgIHZhciBvbkRvbmVSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChyZXN1bHRSMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdFIwLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtyZXN1bHRSMFswXV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luYyhvbkRvbmUsIGZsaXAoQ3VycnkuXzEocjBUb0lPQSwgcmVzdWx0UjBbMF0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gZmxpcCgvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocjFUb1IwLCByMFRvSU9BLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHZhciBpb1IxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiBmbGlwKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjFUb1IwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHIwVG9JT0EsIEN1cnJ5Ll8xKHIxVG9SMCwgcjEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IxVG9SMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciByVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIGZsaXAoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByMFRvSU9BLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoclRvSU9SMCwgcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHN1bW1vbkVycm9yKGlvQSkge1xuICBzd2l0Y2ggKGlvQS50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWy8qIE9rICovQmxvY2suX18oMCwgW2lvQVswXV0pXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFsvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtpb0FbMF1dKV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0QSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShnZXRBLCB1bmRlZmluZWQpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKEN1cnJ5Ll8xKGdldElPQSwgdW5kZWZpbmVkKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lQSA9IGlvQVswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZUEsIChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtyZXN1bHRdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvck1hcChpb0FbMF0sIGlvQVsxXSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3JBcHBseShpb0FbMF0sIGlvQVsxXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHJldHVybiBzdW1tb25FcnJvckZsYXRNYXAoaW9BWzBdLCBpb0FbMV0pO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHN1bW1vbkVycm9yTWFwKHIwVG9BLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWy8qIE9rICovQmxvY2suX18oMCwgW0N1cnJ5Ll8xKHIwVG9BLCBpb1IwWzBdKV0pXSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFsvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtpb1IwWzBdXSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldFIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBPayAqL0Jsb2NrLl9fKDAsIFtDdXJyeS5fMShyMFRvQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpXSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT1IwLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZVIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVIwLCAoZnVuY3Rpb24gKHJlc1IwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lLCAvKiBPayAqL0Jsb2NrLl9fKDAsIFtSZWx1ZGVfUmVzdWx0Lm1hcChyMFRvQSwgcmVzUjApXSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICB2YXIgcjFUb1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHIxVG9SMCwgcjBUb0EsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIEFwcGx5ICovQmxvY2suX18oNiwgW1xuICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2UoLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFtyMFRvQV0pLCBpb1IwWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMVRvSU9SMCwgcjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBzdW1tb25FcnJvckFwcGx5KGlvUjBUb0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgdmFyIHIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFsvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFtpb1IwWzBdXSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmQgKi8yIDpcbiAgICAgICAgdmFyIGdldFIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb0EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0EsIEN1cnJ5Ll8xKGdldFIwLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IwVG9BXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0EsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAocmVzdWx0RSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3Jlc3VsdEVdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcjAgPSByZXN1bHRFWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZSwgc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMFRvQSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvQSwgcjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBUb0FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIE1hcCAqLzUgOlxuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZShpb1IwVG9BLCAvKiBQdXJlICovQmxvY2suX18oMCwgW2lvUjBbMF1dKSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogQXBwbHkgKi9CbG9jay5fXyg2LCBbXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9zZShpb1IwVG9BLCBpb1IwWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwVG9BKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0EsIHIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW9SMFRvQVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjFUb0lPUjAsIHIxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gc3VtbW9uRXJyb3JGbGF0TWFwKHIwVG9JT0EsIGlvUjApIHtcbiAgc3dpdGNoIChpb1IwLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKEN1cnJ5Ll8xKHIwVG9JT0EsIGlvUjBbMF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgWy8qIEVycm9yICovQmxvY2suX18oMSwgW2lvUjBbMF1dKV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoQ3VycnkuXzEocjBUb0lPQSwgQ3VycnkuXzEoZ2V0UjAsIHVuZGVmaW5lZCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0lPQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUjAsIChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgWy8qIEVycm9yICovQmxvY2suX18oMSwgW2VbMF1dKV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnNhZmVSdW5Bc3luYyhvbkRvbmUsIHN1bW1vbkVycm9yKEN1cnJ5Ll8xKHIwVG9JT0EsIGVbMF0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfRnVuY3Rpb24uSW5maXguJGdyZWF0JGdyZWF0KHIxVG9SMCwgcjBUb0lPQSwgcGFyYW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICB2YXIgaW9SMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMVRvUjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocjBUb0lPQSwgQ3VycnkuXzEocjFUb1IwLCByMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjFUb1IwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll9fMShyMFRvSU9BKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKHIxVG9JT1IwLCByMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIGlvUjBbMV1cbiAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgIFxuICB9XG59XG5cbmZ1bmN0aW9uIHVuc3VtbW9uRXJyb3IoaW9SZXN1bHRBKSB7XG4gIHN3aXRjaCAoaW9SZXN1bHRBLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIFB1cmUgKi8wIDpcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9SZXN1bHQuZm9sZCgkJHRocm93LCBwdXJlLCBpb1Jlc3VsdEFbMF0pO1xuICAgIGNhc2UgLyogVGhyb3cgKi8xIDpcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9Wb2lkLmFic3VyZChpb1Jlc3VsdEFbMF0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UmVzdWx0QSA9IGlvUmVzdWx0QVswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9SZXN1bHQuZm9sZCgkJHRocm93LCBwdXJlLCBDdXJyeS5fMShnZXRSZXN1bHRBLCB1bmRlZmluZWQpKTtcbiAgICAgICAgICAgICAgICAgICAgfSldKTtcbiAgICBjYXNlIC8qIFN1c3BlbmRJTyAqLzMgOlxuICAgICAgICB2YXIgZ2V0SU9SZXN1bHRBID0gaW9SZXN1bHRBWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcihDdXJyeS5fMShnZXRJT1Jlc3VsdEEsIHVuZGVmaW5lZCkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZVJlc3VsdFJlc3VsdEEgPSBpb1Jlc3VsdEFbMF07XG4gICAgICAgIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZVJlc3VsdEEpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEob25Eb25lUmVzdWx0UmVzdWx0QSwgKGZ1bmN0aW9uIChyZXN1bHRSZXN1bHRBKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0UmVzdWx0QS50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9Wb2lkLmFic3VyZChyZXN1bHRSZXN1bHRBWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSZXN1bHRBLCByZXN1bHRSZXN1bHRBWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3JNYXAoaW9SZXN1bHRBWzBdLCBpb1Jlc3VsdEFbMV0pO1xuICAgIGNhc2UgLyogQXBwbHkgKi82IDpcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3JBcHBseShpb1Jlc3VsdEFbMF0sIGlvUmVzdWx0QVsxXSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yRmxhdE1hcChpb1Jlc3VsdEFbMF0sIGlvUmVzdWx0QVsxXSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zdW1tb25FcnJvck1hcChyMFRvUmVzdWx0QSwgaW9SMCkge1xuICBzd2l0Y2ggKGlvUjAudGFnIHwgMCkge1xuICAgIGNhc2UgLyogUHVyZSAqLzAgOlxuICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mb2xkKCQkdGhyb3csIHB1cmUsIEN1cnJ5Ll8xKHIwVG9SZXN1bHRBLCBpb1IwWzBdKSk7XG4gICAgY2FzZSAvKiBUaHJvdyAqLzEgOlxuICAgICAgICByZXR1cm4gUmVsdWRlX1ZvaWQuYWJzdXJkKGlvUjBbMF0pO1xuICAgIGNhc2UgLyogU3VzcGVuZCAqLzIgOlxuICAgICAgICB2YXIgZ2V0UjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mb2xkKCQkdGhyb3csIHB1cmUsIEN1cnJ5Ll8xKHIwVG9SZXN1bHRBLCBDdXJyeS5fMShnZXRSMCwgdW5kZWZpbmVkKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogU3VzcGVuZElPICovMyA6XG4gICAgICAgIHZhciBnZXRJT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb1Jlc3VsdEEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShnZXRJT1IwLCB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogQXN5bmMgKi80IDpcbiAgICAgICAgdmFyIG9uRG9uZVIwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIC8qIEFzeW5jICovQmxvY2suX18oNCwgWyhmdW5jdGlvbiAob25Eb25lUmVzdWx0QSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSMCwgKGZ1bmN0aW9uIChyMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIwLnRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1ZvaWQuYWJzdXJkKHIwWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmVSZXN1bHRBLCBDdXJyeS5fMShyMFRvUmVzdWx0QSwgcjBbMF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBNYXAgKi81IDpcbiAgICAgICAgdmFyIHIxVG9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyMFRvUmVzdWx0QSwgQ3VycnkuXzEocjFUb1IwLCByMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBBcHBseSAqLzYgOlxuICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBBcHBseSAqL0Jsb2NrLl9fKDYsIFtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlKC8qIFB1cmUgKi9CbG9jay5fXygwLCBbcjBUb1Jlc3VsdEFdKSwgaW9SMFswXSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgY2FzZSAvKiBGbGF0TWFwICovNyA6XG4gICAgICAgIHZhciByMVRvSU9SMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb1Jlc3VsdEEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShyMVRvSU9SMCwgcjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiB1bnN1bW1vbkVycm9yQXBwbHkoaW9SMFRvUmVzdWx0QSwgaW9SMCkge1xuICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjBUb1Jlc3VsdEEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbQ3VycnkuXzEocjBUb1Jlc3VsdEEsIHIwKV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlvUjBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIGlvUjBUb1Jlc3VsdEFcbiAgICAgICAgICAgICAgXSkpO1xufVxuXG5mdW5jdGlvbiB1bnN1bW1vbkVycm9yRmxhdE1hcChyMFRvSU9SZXN1bHRBLCBpb1IwKSB7XG4gIHN3aXRjaCAoaW9SMC50YWcgfCAwKSB7XG4gICAgY2FzZSAvKiBQdXJlICovMCA6XG4gICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKEN1cnJ5Ll8xKHIwVG9JT1Jlc3VsdEEsIGlvUjBbMF0pKTtcbiAgICBjYXNlIC8qIFRocm93ICovMSA6XG4gICAgICAgIHJldHVybiBSZWx1ZGVfVm9pZC5hYnN1cmQoaW9SMFswXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kICovMiA6XG4gICAgICAgIHZhciBnZXRSMCA9IGlvUjBbMF07XG4gICAgICAgIHJldHVybiAvKiBTdXNwZW5kSU8gKi9CbG9jay5fXygzLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bnN1bW1vbkVycm9yKEN1cnJ5Ll8xKHIwVG9JT1Jlc3VsdEEsIEN1cnJ5Ll8xKGdldFIwLCB1bmRlZmluZWQpKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBTdXNwZW5kSU8gKi8zIDpcbiAgICAgICAgdmFyIGdldElPUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogU3VzcGVuZElPICovQmxvY2suX18oMywgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcjBUb0lPUmVzdWx0QSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJ5Ll8xKGdldElPUjAsIHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXSk7XG4gICAgY2FzZSAvKiBBc3luYyAqLzQgOlxuICAgICAgICB2YXIgb25Eb25lUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmVSZXN1bHRBKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZVIwLCAoZnVuY3Rpb24gKHIwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocjAudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfVm9pZC5hYnN1cmQocjBbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuc2FmZVJ1bkFzeW5jKG9uRG9uZVJlc3VsdEEsIHVuc3VtbW9uRXJyb3IoQ3VycnkuXzEocjBUb0lPUmVzdWx0QSwgcjBbMF0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KV0pO1xuICAgIGNhc2UgLyogTWFwICovNSA6XG4gICAgICAgIHZhciByMVRvUjAgPSBpb1IwWzBdO1xuICAgICAgICByZXR1cm4gdW5zdW1tb25FcnJvcigvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9GdW5jdGlvbi5JbmZpeC4kZ3JlYXQkZ3JlYXQocjFUb1IwLCByMFRvSU9SZXN1bHRBLCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzFdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEFwcGx5ICovNiA6XG4gICAgICAgIHZhciBpb1IxID0gaW9SMFsxXTtcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxVG9SMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjBUb0lPUmVzdWx0QSwgQ3VycnkuXzEocjFUb1IwLCByMSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb1IxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBpb1IwWzBdXG4gICAgICAgICAgICAgICAgICAgIF0pKTtcbiAgICBjYXNlIC8qIEZsYXRNYXAgKi83IDpcbiAgICAgICAgdmFyIHIxVG9JT1IwID0gaW9SMFswXTtcbiAgICAgICAgcmV0dXJuIHVuc3VtbW9uRXJyb3IoLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKHIxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBGbGF0TWFwICovQmxvY2suX18oNywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuX18xKHIwVG9JT1Jlc3VsdEEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEocjFUb0lPUjAsIHIxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgaW9SMFsxXVxuICAgICAgICAgICAgICAgICAgICBdKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gZGVsYXkobWlsbGlzKSB7XG4gIHJldHVybiAvKiBBc3luYyAqL0Jsb2NrLl9fKDQsIFsoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbdW5kZWZpbmVkXSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBtaWxsaXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KV0pO1xufVxuXG5mdW5jdGlvbiBkZWxheVdpdGhWb2lkKG1pbGxpcykge1xuICByZXR1cm4gLyogQXN5bmMgKi9CbG9jay5fXyg0LCBbKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3VuZGVmaW5lZF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSwgbWlsbGlzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSldKTtcbn1cblxuZnVuY3Rpb24gd2l0aERlbGF5QWZ0ZXIobWlsbGlzLCBpbykge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheShtaWxsaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBpb1xuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB3aXRoRGVsYXlCZWZvcmUobWlsbGlzLCBpbykge1xuICByZXR1cm4gLyogRmxhdE1hcCAqL0Jsb2NrLl9fKDcsIFtcbiAgICAgICAgICAgIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW87XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZGVsYXkobWlsbGlzKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBkZWJvdW5jZShpbW1lZGlhdGVPcHQsIGludGVydmFsTXNPcHQsIGlvKSB7XG4gIHZhciBpbW1lZGlhdGUgPSBpbW1lZGlhdGVPcHQgIT09IHVuZGVmaW5lZCA/IGltbWVkaWF0ZU9wdCA6IGZhbHNlO1xuICB2YXIgaW50ZXJ2YWxNcyA9IGludGVydmFsTXNPcHQgIT09IHVuZGVmaW5lZCA/IGludGVydmFsTXNPcHQgOiAxNTA7XG4gIHZhciBjdXJyZW50bHlEZWJvdW5jZWRJTyA9IHtcbiAgICBjb250ZW50czogdW5kZWZpbmVkXG4gIH07XG4gIHZhciBzdGFydERlYm91bmNlZElPID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgdmFyIGRlYm91bmNlZElPID0gZGVsYXkoaW50ZXJ2YWxNcyk7XG4gICAgY3VycmVudGx5RGVib3VuY2VkSU8uY29udGVudHMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5wdXJlKGRlYm91bmNlZElPKTtcbiAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgc2hvdWxkUnVuSU8gPSBSZWx1ZGVfT3B0aW9uX0Jhc2UuZm9sZChmYWxzZSwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVib3VuY2VkSU8gPT09IHBhcmFtO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGN1cnJlbnRseURlYm91bmNlZElPLmNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRSdW5JTykge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlEZWJvdW5jZWRJTy5jb250ZW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBzaG91bGRSdW5JTztcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgZGVib3VuY2VkSU9cbiAgICAgICAgICAgIF0pO1xuICB9O1xuICByZXR1cm4gKGZ1bmN0aW9uIChhKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBjdXJyZW50bHlEZWJvdW5jZWRJTy5jb250ZW50cztcbiAgICAgIHZhciBpbW1lZGlhdGVseVJhbklPID0gaW1tZWRpYXRlICYmIG1hdGNoID09PSB1bmRlZmluZWQgPyBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5wdXJlKC8qIFN1c3BlbmRJTyAqL0Jsb2NrLl9fKDMsIFsoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBNYXAgKi9CbG9jay5fXyg1LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5wdXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VycnkuXzEoaW8sIGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICB9KV0pKSA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciBkZWJvdW5jZWRJT18wMDAgPSBmdW5jdGlvbiAoc2hvdWxkUnVuSU8pIHtcbiAgICAgICAgaWYgKHNob3VsZFJ1bklPICYmIFJlbHVkZV9PcHRpb25fQmFzZS5pc05vbmUoaW1tZWRpYXRlbHlSYW5JTykpIHtcbiAgICAgICAgICByZXR1cm4gLyogTWFwICovQmxvY2suX18oNSwgW1xuICAgICAgICAgICAgICAgICAgICBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5wdXJlLFxuICAgICAgICAgICAgICAgICAgICBDdXJyeS5fMShpbywgYSlcbiAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAvKiBQdXJlICovQmxvY2suX18oMCwgW3VuZGVmaW5lZF0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGRlYm91bmNlZElPXzAwMSA9IHN0YXJ0RGVib3VuY2VkSU8odW5kZWZpbmVkKTtcbiAgICAgIHZhciBkZWJvdW5jZWRJTyA9IC8qIEZsYXRNYXAgKi9CbG9jay5fXyg3LCBbXG4gICAgICAgICAgZGVib3VuY2VkSU9fMDAwLFxuICAgICAgICAgIGRlYm91bmNlZElPXzAwMVxuICAgICAgICBdKTtcbiAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlKGRlYm91bmNlZElPLCBpbW1lZGlhdGVseVJhbklPKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdGhyb3R0bGUoaW50ZXJ2YWxNc09wdCwgaW8pIHtcbiAgdmFyIGludGVydmFsTXMgPSBpbnRlcnZhbE1zT3B0ICE9PSB1bmRlZmluZWQgPyBpbnRlcnZhbE1zT3B0IDogMTUwO1xuICB2YXIgY3VycmVudGx5VGhyb3R0bGVkID0ge1xuICAgIGNvbnRlbnRzOiBmYWxzZVxuICB9O1xuICB2YXIgc3RhcnRUaHJvdHRsZSA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIGN1cnJlbnRseVRocm90dGxlZC5jb250ZW50cyA9IHRydWU7XG4gICAgc2V0VGltZW91dCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICBjdXJyZW50bHlUaHJvdHRsZWQuY29udGVudHMgPSBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgIH0pLCBpbnRlcnZhbE1zKTtcbiAgICBcbiAgfTtcbiAgcmV0dXJuIChmdW5jdGlvbiAoYSkge1xuICAgICAgaWYgKGN1cnJlbnRseVRocm90dGxlZC5jb250ZW50cykge1xuICAgICAgICByZXR1cm4gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFt1bmRlZmluZWRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0VGhyb3R0bGUodW5kZWZpbmVkKTtcbiAgICAgICAgcmV0dXJuIC8qIE1hcCAqL0Jsb2NrLl9fKDUsIFtcbiAgICAgICAgICAgICAgICAgIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnB1cmUsXG4gICAgICAgICAgICAgICAgICBDdXJyeS5fMShpbywgYSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgIH1cbiAgICB9KTtcbn1cblxudmFyIEJpZnVuY3RvciA9IHtcbiAgYmltYXA6IGJpbWFwXG59O1xuXG52YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0JpZnVuY3Rvci5CaWZ1bmN0b3JFeHRlbnNpb25zKEJpZnVuY3Rvcik7XG5cbnZhciBtYXBFcnJvciQxID0gaW5jbHVkZS5tYXBFcnJvcjtcblxuZnVuY3Rpb24gV2l0aEVycm9yKEUpIHtcbiAgdmFyIEZ1bmN0b3IgPSB7XG4gICAgbWFwOiBtYXBcbiAgfTtcbiAgdmFyIGluY2x1ZGUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JFeHRlbnNpb25zKEZ1bmN0b3IpO1xuICB2YXIgQWx0ID0ge1xuICAgIG1hcDogbWFwLFxuICAgIGFsdDogYWx0XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQuQWx0RXh0ZW5zaW9ucyhBbHQpO1xuICB2YXIgQXBwbHkgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5XG4gIH07XG4gIHZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5BcHBseUV4dGVuc2lvbnMoQXBwbHkpO1xuICB2YXIgQXBwbGljYXRpdmUgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmVcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGxpY2F0aXZlLkFwcGxpY2F0aXZlRXh0ZW5zaW9ucyhBcHBsaWNhdGl2ZSk7XG4gIHZhciBTZW1pYWxpZ24gPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYWxpZ246IGFsaWduLFxuICAgIGFsaWduV2l0aDogYWxpZ25XaXRoXG4gIH07XG4gIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlhbGlnbi5TZW1pYWxpZ25FeHRlbnNpb25zKFNlbWlhbGlnbik7XG4gIHZhciBNb25hZCA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZSxcbiAgICBmbGF0X21hcDogYmluZFxuICB9O1xuICB2YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRFeHRlbnNpb25zKE1vbmFkKTtcbiAgdmFyIE1vbmFkVGhyb3cgPSB7XG4gICAgbWFwOiBtYXAsXG4gICAgYXBwbHk6IGFwcGx5LFxuICAgIHB1cmU6IHB1cmUsXG4gICAgZmxhdF9tYXA6IGJpbmQsXG4gICAgdGhyb3dFcnJvcjogJCR0aHJvd1xuICB9O1xuICBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZFRocm93Lk1vbmFkVGhyb3dFeHRlbnNpb25zKE1vbmFkVGhyb3cpO1xuICB2YXIgTW9uYWRFcnJvciA9IHtcbiAgICBtYXA6IG1hcCxcbiAgICBhcHBseTogYXBwbHksXG4gICAgcHVyZTogcHVyZSxcbiAgICBmbGF0X21hcDogYmluZCxcbiAgICB0aHJvd0Vycm9yOiAkJHRocm93LFxuICAgIGNhdGNoRXJyb3I6IGNhdGNoRXJyb3JcbiAgfTtcbiAgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWRFcnJvci5Nb25hZEVycm9yRXh0ZW5zaW9ucyhNb25hZEVycm9yKTtcbiAgdmFyIFNlbWlncm91cG9pZCA9IHtcbiAgICBjb21wb3NlOiBjb21wb3NlXG4gIH07XG4gIHZhciBpbmNsdWRlJDUgPSBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXBvaWQuU2VtaWdyb3Vwb2lkRXh0ZW5zaW9ucyhTZW1pZ3JvdXBvaWQpO1xuICB2YXIgaW5jbHVkZSQ2ID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9ySW5maXgoRnVuY3Rvcik7XG4gIHZhciBpbmNsdWRlJDcgPSBSZWx1ZGVfRXh0ZW5zaW9uc19CaWZ1bmN0b3IuQmlmdW5jdG9ySW5maXgoQmlmdW5jdG9yKTtcbiAgdmFyIGluY2x1ZGUkOCA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5SW5maXgoQXBwbHkpO1xuICB2YXIgaW5jbHVkZSQ5ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRJbmZpeChNb25hZCk7XG4gIHZhciBpbmNsdWRlJDEwID0gUmVsdWRlX0V4dGVuc2lvbnNfQWx0LkFsdEluZml4KEFsdCk7XG4gIHZhciBpbmNsdWRlJDExID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLlNlbWlncm91cG9pZEluZml4KFNlbWlncm91cG9pZCk7XG4gIHZhciBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkNi5GdW5jdG9yRXh0ZW5zaW9ucztcbiAgdmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUkNi4kbGVzcyQkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZSQ2LiRsZXNzJGhhc2gkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRkb2xsYXIgPSBpbmNsdWRlJDYuJGxlc3MkO1xuICB2YXIgSW5maXhfJCRncmVhdCA9IGluY2x1ZGUkNi4kJGdyZWF0O1xuICB2YXIgSW5maXhfJGxlc3MkYXQkZ3JlYXQgPSBpbmNsdWRlJDYuJGxlc3MkYXQkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRsZXNzJGRvbGxhciRncmVhdCRncmVhdCA9IGluY2x1ZGUkNy4kbGVzcyRsZXNzJCRncmVhdCRncmVhdDtcbiAgdmFyIEluZml4X0FwcGx5RXh0ZW5zaW9ucyA9IGluY2x1ZGUkOC5BcHBseUV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQ4LiRsZXNzJHN0YXIkZ3JlYXQ7XG4gIHZhciBJbmZpeF8kbGVzcyRzdGFyID0gaW5jbHVkZSQ4LiRsZXNzJHN0YXI7XG4gIHZhciBJbmZpeF8kc3RhciRncmVhdCA9IGluY2x1ZGUkOC4kc3RhciRncmVhdDtcbiAgdmFyIEluZml4X01vbmFkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkOS5Nb25hZEV4dGVuc2lvbnM7XG4gIHZhciBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEgPSBpbmNsdWRlJDkuJGdyZWF0JGdyZWF0JGVxO1xuICB2YXIgSW5maXhfJGVxJGxlc3MkbGVzcyA9IGluY2x1ZGUkOS4kZXEkbGVzcyRsZXNzO1xuICB2YXIgSW5maXhfJGdyZWF0JGVxJGdyZWF0ID0gaW5jbHVkZSQ5LiRncmVhdCRlcSRncmVhdDtcbiAgdmFyIEluZml4XyRsZXNzJGVxJGxlc3MgPSBpbmNsdWRlJDkuJGxlc3MkZXEkbGVzcztcbiAgdmFyIEluZml4XyRsZXNzJHBpcGUkZ3JlYXQgPSBpbmNsdWRlJDEwLiRsZXNzJHBpcGUkZ3JlYXQ7XG4gIHZhciBJbmZpeF9TRSA9IGluY2x1ZGUkMTEuU0U7XG4gIHZhciBJbmZpeF8kbGVzcyRsZXNzJGxlc3MgPSBpbmNsdWRlJDExLiRsZXNzJGxlc3MkbGVzcztcbiAgdmFyIEluZml4XyRncmVhdCRncmVhdCRncmVhdCA9IGluY2x1ZGUkMTEuJGdyZWF0JGdyZWF0JGdyZWF0O1xuICB2YXIgSW5maXggPSB7XG4gICAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAgICRsZXNzJCRncmVhdDogSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0LFxuICAgICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICAgJCRncmVhdDogSW5maXhfJCRncmVhdCxcbiAgICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICAgJGxlc3MkbGVzcyQkZ3JlYXQkZ3JlYXQ6IEluZml4XyRsZXNzJGxlc3MkZG9sbGFyJGdyZWF0JGdyZWF0LFxuICAgIEFwcGx5RXh0ZW5zaW9uczogSW5maXhfQXBwbHlFeHRlbnNpb25zLFxuICAgICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICAgJGxlc3Mkc3RhcjogSW5maXhfJGxlc3Mkc3RhcixcbiAgICAkc3RhciRncmVhdDogSW5maXhfJHN0YXIkZ3JlYXQsXG4gICAgTW9uYWRFeHRlbnNpb25zOiBJbmZpeF9Nb25hZEV4dGVuc2lvbnMsXG4gICAgJGdyZWF0JGdyZWF0JGVxOiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZXEsXG4gICAgJGVxJGxlc3MkbGVzczogSW5maXhfJGVxJGxlc3MkbGVzcyxcbiAgICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgICAkbGVzcyRlcSRsZXNzOiBJbmZpeF8kbGVzcyRlcSRsZXNzLFxuICAgICRsZXNzJHBpcGUkZ3JlYXQ6IEluZml4XyRsZXNzJHBpcGUkZ3JlYXQsXG4gICAgU0U6IEluZml4X1NFLFxuICAgICRsZXNzJGxlc3MkbGVzczogSW5maXhfJGxlc3MkbGVzcyRsZXNzLFxuICAgICRncmVhdCRncmVhdCRncmVhdDogSW5maXhfJGdyZWF0JGdyZWF0JGdyZWF0XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgRnVuY3RvcjogRnVuY3RvcixcbiAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICBtYXBFcnJvcjogbWFwRXJyb3IkMSxcbiAgICAgICAgICBCc0Z1bmN0b3JFeHRlbnNpb25zOiBpbmNsdWRlLkJzRnVuY3RvckV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxpcE1hcDogaW5jbHVkZS5mbGlwTWFwLFxuICAgICAgICAgICQkdm9pZDogaW5jbHVkZS4kJHZvaWQsXG4gICAgICAgICAgdm9pZFJpZ2h0OiBpbmNsdWRlLnZvaWRSaWdodCxcbiAgICAgICAgICB2b2lkTGVmdDogaW5jbHVkZS52b2lkTGVmdCxcbiAgICAgICAgICBmbGFwOiBpbmNsdWRlLmZsYXAsXG4gICAgICAgICAgQWx0OiBBbHQsXG4gICAgICAgICAgYWx0OiBhbHQsXG4gICAgICAgICAgb3JFbHNlOiBpbmNsdWRlJDEub3JFbHNlLFxuICAgICAgICAgIEFwcGx5OiBBcHBseSxcbiAgICAgICAgICBhcHBseTogYXBwbHksXG4gICAgICAgICAgQnNBcHBseUV4dGVuc2lvbnM6IGluY2x1ZGUkMi5Cc0FwcGx5RXh0ZW5zaW9ucyxcbiAgICAgICAgICBhcHBseUZpcnN0OiBpbmNsdWRlJDIuYXBwbHlGaXJzdCxcbiAgICAgICAgICBhcHBseVNlY29uZDogaW5jbHVkZSQyLmFwcGx5U2Vjb25kLFxuICAgICAgICAgIG1hcDI6IGluY2x1ZGUkMi5tYXAyLFxuICAgICAgICAgIG1hcDM6IGluY2x1ZGUkMi5tYXAzLFxuICAgICAgICAgIG1hcDQ6IGluY2x1ZGUkMi5tYXA0LFxuICAgICAgICAgIG1hcDU6IGluY2x1ZGUkMi5tYXA1LFxuICAgICAgICAgIHR1cGxlMjogaW5jbHVkZSQyLnR1cGxlMixcbiAgICAgICAgICB0dXBsZTM6IGluY2x1ZGUkMi50dXBsZTMsXG4gICAgICAgICAgdHVwbGU0OiBpbmNsdWRlJDIudHVwbGU0LFxuICAgICAgICAgIHR1cGxlNTogaW5jbHVkZSQyLnR1cGxlNSxcbiAgICAgICAgICBtYXBUdXBsZTI6IGluY2x1ZGUkMi5tYXBUdXBsZTIsXG4gICAgICAgICAgbWFwVHVwbGUzOiBpbmNsdWRlJDIubWFwVHVwbGUzLFxuICAgICAgICAgIG1hcFR1cGxlNDogaW5jbHVkZSQyLm1hcFR1cGxlNCxcbiAgICAgICAgICBtYXBUdXBsZTU6IGluY2x1ZGUkMi5tYXBUdXBsZTUsXG4gICAgICAgICAgQXBwbGljYXRpdmU6IEFwcGxpY2F0aXZlLFxuICAgICAgICAgIHB1cmU6IHB1cmUsXG4gICAgICAgICAgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM6IGluY2x1ZGUkMy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyxcbiAgICAgICAgICBsaWZ0QTE6IGluY2x1ZGUkMy5saWZ0QTEsXG4gICAgICAgICAgYWxsOiBpbmNsdWRlJDMuYWxsLFxuICAgICAgICAgIFNlbWlhbGlnbjogU2VtaWFsaWduLFxuICAgICAgICAgIE1vbmFkOiBNb25hZCxcbiAgICAgICAgICBiaW5kOiBiaW5kLFxuICAgICAgICAgIEJzTW9uYWRFeHRlbnNpb25zOiBpbmNsdWRlJDQuQnNNb25hZEV4dGVuc2lvbnMsXG4gICAgICAgICAgZmxhdE1hcDogaW5jbHVkZSQ0LmZsYXRNYXAsXG4gICAgICAgICAgZmxhdHRlbjogaW5jbHVkZSQ0LmZsYXR0ZW4sXG4gICAgICAgICAgY29tcG9zZUtsZWlzbGk6IGluY2x1ZGUkNC5jb21wb3NlS2xlaXNsaSxcbiAgICAgICAgICBmbGlwQ29tcG9zZUtsZWlzbGk6IGluY2x1ZGUkNC5mbGlwQ29tcG9zZUtsZWlzbGksXG4gICAgICAgICAgbGlmdE0xOiBpbmNsdWRlJDQubGlmdE0xLFxuICAgICAgICAgIHdoZW5fOiBpbmNsdWRlJDQud2hlbl8sXG4gICAgICAgICAgdW5sZXNzOiBpbmNsdWRlJDQudW5sZXNzLFxuICAgICAgICAgIE1vbmFkVGhyb3c6IE1vbmFkVGhyb3csXG4gICAgICAgICAgdGhyb3dFcnJvcjogJCR0aHJvdyxcbiAgICAgICAgICBNb25hZEVycm9yOiBNb25hZEVycm9yLFxuICAgICAgICAgIGNhdGNoRXJyb3I6IGNhdGNoRXJyb3IsXG4gICAgICAgICAgU2VtaWdyb3Vwb2lkOiBTZW1pZ3JvdXBvaWQsXG4gICAgICAgICAgYW5kVGhlbjogaW5jbHVkZSQ1LmFuZFRoZW4sXG4gICAgICAgICAgSW5maXg6IEluZml4XG4gICAgICAgIH07XG59XG5cbnZhciB1bml0ID0gLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFt1bmRlZmluZWRdKTtcblxudmFyIHVuaXRXaXRoVm9pZCA9IC8qIFB1cmUgKi9CbG9jay5fXygwLCBbdW5kZWZpbmVkXSk7XG5cbnZhciAkbGVzcyQkZ3JlYXQgPSBtYXA7XG5cbnZhciAkbGVzcyRzdGFyJGdyZWF0ID0gYXBwbHk7XG5cbnZhciAkZ3JlYXQkZ3JlYXQkZXEgPSBiaW5kO1xuXG52YXIgJGxlc3MkbGVzcyRsZXNzID0gY29tcG9zZTtcblxudmFyICRncmVhdCRncmVhdCRncmVhdCA9IGFuZFRoZW47XG5cbnZhciB3aXRoRGVsYXkgPSB3aXRoRGVsYXlBZnRlcjtcblxudmFyIG1hcExlZnQgPSBpbmNsdWRlLm1hcExlZnQ7XG5cbnZhciBtYXBSaWdodCA9IGluY2x1ZGUubWFwUmlnaHQ7XG5cbmV4cG9ydCB7XG4gIHB1cmUgLFxuICBwdXJlV2l0aFZvaWQgLFxuICB1bml0ICxcbiAgdW5pdFdpdGhWb2lkICxcbiAgJCR0aHJvdyAsXG4gIHRocm93V2l0aFZvaWQgLFxuICBzdXNwZW5kICxcbiAgc3VzcGVuZFdpdGhWb2lkICxcbiAgc3VzcGVuZFRocm93ICxcbiAgc3VzcGVuZElPICxcbiAgYXN5bmMgLFxuICBmcm9tT3B0aW9uICxcbiAgZnJvbVJlc3VsdCAsXG4gIG1hcCAsXG4gICRsZXNzJCRncmVhdCAsXG4gICRsZXNzJGhhc2gkZ3JlYXQgLFxuICB0YXAgLFxuICBhcHBseSAsXG4gICRsZXNzJHN0YXIkZ3JlYXQgLFxuICBmbGF0TWFwICxcbiAgYmluZCAsXG4gICRncmVhdCRncmVhdCRlcSAsXG4gIGNvbmQgLFxuICBjb25kRXJyb3IgLFxuICB1bnNhZmVSdW5Bc3luYyAsXG4gIHVuc2FmZVJ1bkFzeW5jUGFyMiAsXG4gIHVuc2FmZVJ1bkFzeW5jUGFyMyAsXG4gIGNvbXBvc2UgLFxuICBjb21wb3NlUHVyZSAsXG4gIGNvbXBvc2VUaHJvdyAsXG4gIGNvbXBvc2VTdXNwZW5kICxcbiAgY29tcG9zZVN1c3BlbmRJTyAsXG4gIGNvbXBvc2VBc3luYyAsXG4gIGNvbXBvc2VNYXAgLFxuICBjb21wb3NlQXBwbHkgLFxuICBjb21wb3NlRmxhdE1hcCAsXG4gICRsZXNzJGxlc3MkbGVzcyAsXG4gIGFuZFRoZW4gLFxuICAkZ3JlYXQkZ3JlYXQkZ3JlYXQgLFxuICB0YXBFcnJvciAsXG4gIGNhdGNoRXJyb3IgLFxuICBjYXRjaEVycm9yTWFwICxcbiAgY2F0Y2hFcnJvckFwcGx5ICxcbiAgY2F0Y2hFcnJvckZsYXRNYXAgLFxuICBoYW5kbGVFcnJvciAsXG4gIG1hcEhhbmRsZUVycm9yICxcbiAgYml0YXAgLFxuICBhbHQgLFxuICBhbGlnbiAsXG4gIGFsaWduV2l0aCAsXG4gIG9yRWxzZSAsXG4gIHRyaWVzICxcbiAgdHJpZXNKUyAsXG4gIGZsaXAgLFxuICBmbGlwTWFwICxcbiAgZmxpcEFwcGx5ICxcbiAgZmxpcEZsYXRNYXAgLFxuICBzdW1tb25FcnJvciAsXG4gIHN1bW1vbkVycm9yTWFwICxcbiAgc3VtbW9uRXJyb3JBcHBseSAsXG4gIHN1bW1vbkVycm9yRmxhdE1hcCAsXG4gIHVuc3VtbW9uRXJyb3IgLFxuICB1bnN1bW1vbkVycm9yTWFwICxcbiAgdW5zdW1tb25FcnJvckFwcGx5ICxcbiAgdW5zdW1tb25FcnJvckZsYXRNYXAgLFxuICBkZWxheSAsXG4gIGRlbGF5V2l0aFZvaWQgLFxuICB3aXRoRGVsYXlBZnRlciAsXG4gIHdpdGhEZWxheSAsXG4gIHdpdGhEZWxheUJlZm9yZSAsXG4gIGRlYm91bmNlICxcbiAgdGhyb3R0bGUgLFxuICBCaWZ1bmN0b3IgLFxuICBiaW1hcCAsXG4gIG1hcExlZnQgLFxuICBtYXBSaWdodCAsXG4gIG1hcEVycm9yJDEgYXMgbWFwRXJyb3IsXG4gIFdpdGhFcnJvciAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIENhbWxfb2JqIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb2JqLmpzXCI7XG5pbXBvcnQgKiBhcyBQZXJ2YXNpdmVzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3BlcnZhc2l2ZXMuanNcIjtcbmltcG9ydCAqIGFzIEluZml4JEJzQmFzdGV0IGZyb20gXCIuL0luZml4LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbnRlcmZhY2UkQnNCYXN0ZXQgZnJvbSBcIi4vSW50ZXJmYWNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGFwcHJveGltYXRlbHlfZXF1YWwodG9sZXJhbmNlLCBhLCBiKSB7XG4gIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gdG9sZXJhbmNlO1xufVxuXG5mdW5jdGlvbiBhcHBlbmQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxO1xufVxuXG52YXIgTWFnbWEgPSB7XG4gIGFwcGVuZDogYXBwZW5kXG59O1xuXG52YXIgU2VtaWdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIE1vbm9pZCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiAwLjBcbn07XG5cbnZhciBRdWFzaWdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIE1lZGlhbF9RdWFzaWdyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZFxufTtcblxudmFyIExvb3AgPSB7XG4gIGFwcGVuZDogYXBwZW5kLFxuICBlbXB0eTogMC4wXG59O1xuXG5mdW5jdGlvbiBpbnZlcnNlKHBhcmFtKSB7XG4gIHJldHVybiAtMS4wICogcGFyYW07XG59XG5cbnZhciBHcm91cCA9IHtcbiAgYXBwZW5kOiBhcHBlbmQsXG4gIGVtcHR5OiAwLjAsXG4gIGludmVyc2U6IGludmVyc2Vcbn07XG5cbnZhciBBYmVsaWFuX0dyb3VwID0ge1xuICBhcHBlbmQ6IGFwcGVuZCxcbiAgZW1wdHk6IDAuMCxcbiAgaW52ZXJzZTogaW52ZXJzZVxufTtcblxudmFyIEFkZGl0aXZlID0ge1xuICBNYWdtYTogTWFnbWEsXG4gIE1lZGlhbF9NYWdtYTogTWFnbWEsXG4gIFNlbWlncm91cDogU2VtaWdyb3VwLFxuICBNb25vaWQ6IE1vbm9pZCxcbiAgUXVhc2lncm91cDogUXVhc2lncm91cCxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IE1lZGlhbF9RdWFzaWdyb3VwLFxuICBMb29wOiBMb29wLFxuICBHcm91cDogR3JvdXAsXG4gIEFiZWxpYW5fR3JvdXA6IEFiZWxpYW5fR3JvdXBcbn07XG5cbmZ1bmN0aW9uIGFwcGVuZCQxKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAqIHByaW0kMTtcbn1cblxudmFyIE1hZ21hJDEgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDFcbn07XG5cbnZhciBTZW1pZ3JvdXAkMSA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMVxufTtcblxudmFyIE1vbm9pZCQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxLFxuICBlbXB0eTogMS4wXG59O1xuXG52YXIgUXVhc2lncm91cCQxID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQxXG59O1xuXG52YXIgTWVkaWFsX1F1YXNpZ3JvdXAkMSA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMVxufTtcblxudmFyIExvb3AkMSA9IHtcbiAgYXBwZW5kOiBhcHBlbmQkMSxcbiAgZW1wdHk6IDEuMFxufTtcblxudmFyIE11bHRpcGxpY2F0aXZlID0ge1xuICBNYWdtYTogTWFnbWEkMSxcbiAgTWVkaWFsX01hZ21hOiBNYWdtYSQxLFxuICBTZW1pZ3JvdXA6IFNlbWlncm91cCQxLFxuICBNb25vaWQ6IE1vbm9pZCQxLFxuICBRdWFzaWdyb3VwOiBRdWFzaWdyb3VwJDEsXG4gIE1lZGlhbF9RdWFzaWdyb3VwOiBNZWRpYWxfUXVhc2lncm91cCQxLFxuICBMb29wOiBMb29wJDFcbn07XG5cbmZ1bmN0aW9uIGFwcGVuZCQyKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAtIHByaW0kMTtcbn1cblxudmFyIE1hZ21hJDIgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDJcbn07XG5cbnZhciBRdWFzaWdyb3VwJDIgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDJcbn07XG5cbnZhciBNZWRpYWxfUXVhc2lncm91cCQyID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQyXG59O1xuXG52YXIgU3VidHJhY3RpdmUgPSB7XG4gIE1hZ21hOiBNYWdtYSQyLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hJDIsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAkMixcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IE1lZGlhbF9RdWFzaWdyb3VwJDJcbn07XG5cbmZ1bmN0aW9uIGFwcGVuZCQzKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAvIHByaW0kMTtcbn1cblxudmFyIE1hZ21hJDMgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDNcbn07XG5cbnZhciBRdWFzaWdyb3VwJDMgPSB7XG4gIGFwcGVuZDogYXBwZW5kJDNcbn07XG5cbnZhciBNZWRpYWxfUXVhc2lncm91cCQzID0ge1xuICBhcHBlbmQ6IGFwcGVuZCQzXG59O1xuXG52YXIgRGl2aXNpdmUgPSB7XG4gIE1hZ21hOiBNYWdtYSQzLFxuICBNZWRpYWxfTWFnbWE6IE1hZ21hJDMsXG4gIFF1YXNpZ3JvdXA6IFF1YXNpZ3JvdXAkMyxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IE1lZGlhbF9RdWFzaWdyb3VwJDNcbn07XG5cbnZhciBlcSA9IENhbWxfb2JqLmNhbWxfZXF1YWw7XG5cbnZhciBFcSA9IHtcbiAgZXE6IGVxXG59O1xuXG52YXIgT3JkID0ge1xuICBlcTogZXEsXG4gIGNvbXBhcmU6IEludGVyZmFjZSRCc0Jhc3RldC51bnNhZmVfY29tcGFyZVxufTtcblxudmFyIEJvdW5kZWQgPSB7XG4gIGVxOiBlcSxcbiAgY29tcGFyZTogSW50ZXJmYWNlJEJzQmFzdGV0LnVuc2FmZV9jb21wYXJlLFxuICB0b3A6IFBlcnZhc2l2ZXMubWF4X2Zsb2F0LFxuICBib3R0b206IFBlcnZhc2l2ZXMubWluX2Zsb2F0XG59O1xuXG52YXIgU2hvdyA9IHtcbiAgc2hvdzogUGVydmFzaXZlcy5zdHJpbmdfb2ZfZmxvYXRcbn07XG5cbmZ1bmN0aW9uIGFkZChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gKyBwcmltJDE7XG59XG5cbmZ1bmN0aW9uIG11bHRpcGx5KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAqIHByaW0kMTtcbn1cblxudmFyIFNlbWlyaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wXG59O1xuXG5mdW5jdGlvbiBzdWJ0cmFjdChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gLSBwcmltJDE7XG59XG5cbnZhciBSaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wLFxuICBzdWJ0cmFjdDogc3VidHJhY3Rcbn07XG5cbnZhciBDb21tdXRhdGl2ZV9SaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wLFxuICBzdWJ0cmFjdDogc3VidHJhY3Rcbn07XG5cbmZ1bmN0aW9uIHJlY2lwcm9jYWwoYSkge1xuICByZXR1cm4gMS4wIC8gYTtcbn1cblxudmFyIERpdmlzaW9uX1JpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjAsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCxcbiAgcmVjaXByb2NhbDogcmVjaXByb2NhbFxufTtcblxuZnVuY3Rpb24gZGVncmVlKHBhcmFtKSB7XG4gIHJldHVybiAxO1xufVxuXG5mdW5jdGlvbiBkaXZpZGUocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltIC8gcHJpbSQxO1xufVxuXG5mdW5jdGlvbiBtb2R1bG8ocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIDAuMDtcbn1cblxudmFyIEV1Y2xpZGVhbl9SaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wLFxuICBzdWJ0cmFjdDogc3VidHJhY3QsXG4gIGRlZ3JlZTogZGVncmVlLFxuICBkaXZpZGU6IGRpdmlkZSxcbiAgbW9kdWxvOiBtb2R1bG9cbn07XG5cbnZhciBGaWVsZCA9IHtcbiAgZGVncmVlOiBkZWdyZWUsXG4gIGRpdmlkZTogZGl2aWRlLFxuICBtb2R1bG86IG1vZHVsbyxcbiAgYWRkOiBhZGQsXG4gIHplcm86IDAuMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEuMCxcbiAgc3VidHJhY3Q6IHN1YnRyYWN0LFxuICByZWNpcHJvY2FsOiByZWNpcHJvY2FsXG59O1xuXG52YXIgaW5jbHVkZSA9IEluZml4JEJzQmFzdGV0Lk1hZ21hKE1hZ21hKTtcblxudmFyIEFkZGl0aXZlJDEgPSBpbmNsdWRlO1xuXG52YXIgaW5jbHVkZSQxID0gSW5maXgkQnNCYXN0ZXQuTWFnbWEoTWFnbWEkMSk7XG5cbnZhciBNdWx0aXBsaWNhdGl2ZSQxID0gaW5jbHVkZSQxO1xuXG52YXIgaW5jbHVkZSQyID0gSW5maXgkQnNCYXN0ZXQuRXEoRXEpO1xuXG52YXIgaW5jbHVkZSQzID0gSW5maXgkQnNCYXN0ZXQuT3JkKE9yZCk7XG5cbnZhciBpbmNsdWRlJDQgPSBJbmZpeCRCc0Jhc3RldC5FdWNsaWRlYW5fUmluZyhFdWNsaWRlYW5fUmluZyk7XG5cbnZhciBJbmZpeF8kZXEkcGlwZSRlcSA9IGluY2x1ZGUkMi4kZXEkcGlwZSRlcTtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkcGlwZSA9IGluY2x1ZGUkMy4kbGVzcyRwaXBlJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwaXBlJGdyZWF0ID0gaW5jbHVkZSQzLiRwaXBlJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGVxID0gaW5jbHVkZSQzLiRsZXNzJHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kZ3JlYXQkcGlwZSRlcSA9IGluY2x1ZGUkMy4kZ3JlYXQkcGlwZSRlcTtcblxudmFyIEluZml4XyRwaXBlJHBsdXMkcGlwZSA9IGluY2x1ZGUkNC4kcGlwZSRwbHVzJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzdGFyJHBpcGUgPSBpbmNsdWRlJDQuJHBpcGUkc3RhciRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkJHBpcGUgPSBpbmNsdWRlJDQuJHBpcGUkbmVnJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRzbGFzaCRwaXBlID0gaW5jbHVkZSQ0LiRwaXBlJHNsYXNoJHBpcGU7XG5cbnZhciBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGUgPSBpbmNsdWRlJDQuJHBpcGUkcGVyY2VudCRwaXBlO1xuXG52YXIgSW5maXggPSB7XG4gIEFkZGl0aXZlOiBBZGRpdGl2ZSQxLFxuICBNdWx0aXBsaWNhdGl2ZTogTXVsdGlwbGljYXRpdmUkMSxcbiAgJGVxJHBpcGUkZXE6IEluZml4XyRlcSRwaXBlJGVxLFxuICAkbGVzcyRwaXBlJHBpcGU6IEluZml4XyRsZXNzJHBpcGUkcGlwZSxcbiAgJHBpcGUkcGlwZSRncmVhdDogSW5maXhfJHBpcGUkcGlwZSRncmVhdCxcbiAgJGxlc3MkcGlwZSRlcTogSW5maXhfJGxlc3MkcGlwZSRlcSxcbiAgJGdyZWF0JHBpcGUkZXE6IEluZml4XyRncmVhdCRwaXBlJGVxLFxuICAkcGlwZSRwbHVzJHBpcGU6IEluZml4XyRwaXBlJHBsdXMkcGlwZSxcbiAgJHBpcGUkc3RhciRwaXBlOiBJbmZpeF8kcGlwZSRzdGFyJHBpcGUsXG4gICRwaXBlJG5lZyRwaXBlOiBJbmZpeF8kcGlwZSQkcGlwZSxcbiAgJHBpcGUkc2xhc2gkcGlwZTogSW5maXhfJHBpcGUkc2xhc2gkcGlwZSxcbiAgJHBpcGUkcGVyY2VudCRwaXBlOiBJbmZpeF8kcGlwZSRwZXJjZW50JHBpcGVcbn07XG5cbmV4cG9ydCB7XG4gIGFwcHJveGltYXRlbHlfZXF1YWwgLFxuICBBZGRpdGl2ZSAsXG4gIE11bHRpcGxpY2F0aXZlICxcbiAgU3VidHJhY3RpdmUgLFxuICBEaXZpc2l2ZSAsXG4gIEVxICxcbiAgT3JkICxcbiAgQm91bmRlZCAsXG4gIFNob3cgLFxuICBTZW1pcmluZyAsXG4gIFJpbmcgLFxuICBDb21tdXRhdGl2ZV9SaW5nICxcbiAgRGl2aXNpb25fUmluZyAsXG4gIEV1Y2xpZGVhbl9SaW5nICxcbiAgRmllbGQgLFxuICBJbmZpeCAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBQZXJ2YXNpdmVzIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3BlcnZhc2l2ZXMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfZm9ybWF0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfZm9ybWF0LmpzXCI7XG5pbXBvcnQgKiBhcyBGbG9hdCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRmxvYXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX09yZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX09yZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfUmluZyBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX1JpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX1NlbWlyaW5nIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaXJpbmcuYnMuanNcIjtcblxuZnVuY3Rpb24gZXEoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBuYW4gPSBOdW1iZXIuTmFOO1xuXG5mdW5jdGlvbiBhZGQocHJpbSwgcHJpbSQxKSB7XG4gIHJldHVybiBwcmltICsgcHJpbSQxO1xufVxuXG5mdW5jdGlvbiBzdWJ0cmFjdChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gLSBwcmltJDE7XG59XG5cbmZ1bmN0aW9uIG11bHRpcGx5KHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAqIHByaW0kMTtcbn1cblxuZnVuY3Rpb24gZGl2aWRlKHByaW0sIHByaW0kMSkge1xuICByZXR1cm4gcHJpbSAvIHByaW0kMTtcbn1cblxuZnVuY3Rpb24gcG93KGEsIGIpIHtcbiAgcmV0dXJuIE1hdGgucG93KGEsIGIpO1xufVxuXG5mdW5jdGlvbiBzcXJ0KHByaW0pIHtcbiAgcmV0dXJuIE1hdGguc3FydChwcmltKTtcbn1cblxuZnVuY3Rpb24gJCRpc05hTih4KSB7XG4gIHJldHVybiB4ICE9PSB4O1xufVxuXG52YXIgY29tcGFyZSA9IEZsb2F0JEJzQmFzdGV0Lk9yZC5jb21wYXJlO1xuXG52YXIgT3JkID0ge1xuICBlcTogZXEsXG4gIGNvbXBhcmU6IGNvbXBhcmVcbn07XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfT3JkLk9yZEV4dGVuc2lvbnMoT3JkKTtcblxudmFyIE9yZFJpbmdFeHRlbnNpb25zID0gaW5jbHVkZS5PcmRSaW5nRXh0ZW5zaW9ucztcblxudmFyIFNlbWlyaW5nID0ge1xuICBhZGQ6IGFkZCxcbiAgemVybzogMC4wLFxuICBtdWx0aXBseTogbXVsdGlwbHksXG4gIG9uZTogMS4wXG59O1xuXG5SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pcmluZy5TZW1pcmluZ0V4dGVuc2lvbnMoU2VtaXJpbmcpO1xuXG5mdW5jdGlvbiBzdWJ0cmFjdCQxKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG52YXIgUmluZyA9IHtcbiAgYWRkOiBhZGQsXG4gIHplcm86IDAuMCxcbiAgbXVsdGlwbHk6IG11bHRpcGx5LFxuICBvbmU6IDEuMCxcbiAgc3VidHJhY3Q6IHN1YnRyYWN0JDFcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19SaW5nLlJpbmdFeHRlbnNpb25zKFJpbmcpO1xuXG52YXIgaW5jbHVkZSQyID0gQ3VycnkuXzEoT3JkUmluZ0V4dGVuc2lvbnMsIFJpbmcpO1xuXG52YXIgYWJzID0gaW5jbHVkZSQyLmFicztcblxuZnVuY3Rpb24gbW9kdWxvKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiAwLjA7XG59XG5cbmZ1bmN0aW9uIGRlZ3JlZShwYXJhbSkge1xuICByZXR1cm4gMTtcbn1cblxudmFyIEV1Y2xpZGVhblJpbmcgPSB7XG4gIGFkZDogYWRkLFxuICB6ZXJvOiAwLjAsXG4gIG11bHRpcGx5OiBtdWx0aXBseSxcbiAgb25lOiAxLjAsXG4gIHN1YnRyYWN0OiBzdWJ0cmFjdCQxLFxuICBkZWdyZWU6IGRlZ3JlZSxcbiAgZGl2aWRlOiBkaXZpZGUsXG4gIG1vZHVsbzogbW9kdWxvXG59O1xuXG5mdW5jdGlvbiBhcHByb3hpbWF0ZWx5RXF1YWwodG9sZXJhbmNlLCB4LCB5KSB7XG4gIHJldHVybiBNYXRoLmFicyh4IC0geSkgPD0gdG9sZXJhbmNlO1xufVxuXG5mdW5jdGlvbiB0b0ludChwcmltKSB7XG4gIHJldHVybiBwcmltIHwgMDtcbn1cblxuZnVuY3Rpb24gZnJvbUludChwcmltKSB7XG4gIHJldHVybiBwcmltO1xufVxuXG5mdW5jdGlvbiBmcmFjdGlvbmFsUGFydCh2KSB7XG4gIHZhciB3aG9sZSA9IHYgfCAwO1xuICByZXR1cm4gQ3VycnkuXzEoYWJzLCB2ID49IDAuMCA/IHYgLSB3aG9sZSA6IHYgKyBDdXJyeS5fMShhYnMsIHdob2xlKSk7XG59XG5cbmZ1bmN0aW9uIGZsb29yKHByaW0pIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IocHJpbSk7XG59XG5cbmZ1bmN0aW9uIGZsb29yQXNJbnQodikge1xuICByZXR1cm4gTWF0aC5mbG9vcih2KSB8IDA7XG59XG5cbmZ1bmN0aW9uIGNlaWwocHJpbSkge1xuICByZXR1cm4gTWF0aC5jZWlsKHByaW0pO1xufVxuXG5mdW5jdGlvbiBjZWlsQXNJbnQodikge1xuICByZXR1cm4gTWF0aC5jZWlsKHYpIHwgMDtcbn1cblxuZnVuY3Rpb24gcm91bmQodikge1xuICBpZiAoZnJhY3Rpb25hbFBhcnQodikgPj0gMC41KSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByb3VuZEFzSW50KHYpIHtcbiAgcmV0dXJuIHJvdW5kKHYpIHwgMDtcbn1cblxuZnVuY3Rpb24gdG9QcmVjaXNpb24oZGVjaW1hbHMsIG51bSkge1xuICB2YXIgcG93ID0gTWF0aC5wb3coMTAuMCwgZGVjaW1hbHMpO1xuICB2YXIgbXVsdGlwbGllZCA9IG51bSA+PSAwLjAgPyBNYXRoLmZsb29yKHBvdyAqIG51bSkgOiBNYXRoLmNlaWwocG93ICogbnVtKTtcbiAgcmV0dXJuIG11bHRpcGxpZWQgLyBwb3c7XG59XG5cbmZ1bmN0aW9uIHNob3cocHJpbSkge1xuICByZXR1cm4gcHJpbS50b1N0cmluZygpO1xufVxuXG52YXIgU2hvdyA9IHtcbiAgc2hvdzogc2hvd1xufTtcblxuZnVuY3Rpb24gZnJvbVN0cmluZyh2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIENhbWxfZm9ybWF0LmNhbWxfZmxvYXRfb2Zfc3RyaW5nKHYpO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIHJldHVybiA7XG4gIH1cbn1cblxudmFyIEFkZGl0aXZlX01hZ21hID0gRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuTWFnbWE7XG5cbnZhciBBZGRpdGl2ZV9NZWRpYWxfTWFnbWEgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5NZWRpYWxfTWFnbWE7XG5cbnZhciBBZGRpdGl2ZV9TZW1pZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5TZW1pZ3JvdXA7XG5cbnZhciBBZGRpdGl2ZV9Nb25vaWQgPSBGbG9hdCRCc0Jhc3RldC5BZGRpdGl2ZS5Nb25vaWQ7XG5cbnZhciBBZGRpdGl2ZV9RdWFzaWdyb3VwID0gRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuUXVhc2lncm91cDtcblxudmFyIEFkZGl0aXZlX01lZGlhbF9RdWFzaWdyb3VwID0gRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuTWVkaWFsX1F1YXNpZ3JvdXA7XG5cbnZhciBBZGRpdGl2ZV9Mb29wID0gRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuTG9vcDtcblxudmFyIEFkZGl0aXZlX0dyb3VwID0gRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuR3JvdXA7XG5cbnZhciBBZGRpdGl2ZV9BYmVsaWFuX0dyb3VwID0gRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuQWJlbGlhbl9Hcm91cDtcblxudmFyIEFkZGl0aXZlID0ge1xuICBNYWdtYTogQWRkaXRpdmVfTWFnbWEsXG4gIE1lZGlhbF9NYWdtYTogQWRkaXRpdmVfTWVkaWFsX01hZ21hLFxuICBTZW1pZ3JvdXA6IEFkZGl0aXZlX1NlbWlncm91cCxcbiAgTW9ub2lkOiBBZGRpdGl2ZV9Nb25vaWQsXG4gIFF1YXNpZ3JvdXA6IEFkZGl0aXZlX1F1YXNpZ3JvdXAsXG4gIE1lZGlhbF9RdWFzaWdyb3VwOiBBZGRpdGl2ZV9NZWRpYWxfUXVhc2lncm91cCxcbiAgTG9vcDogQWRkaXRpdmVfTG9vcCxcbiAgR3JvdXA6IEFkZGl0aXZlX0dyb3VwLFxuICBBYmVsaWFuX0dyb3VwOiBBZGRpdGl2ZV9BYmVsaWFuX0dyb3VwXG59O1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTWFnbWEgPSBGbG9hdCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5NYWdtYTtcblxudmFyIE11bHRpcGxpY2F0aXZlX01lZGlhbF9NYWdtYSA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1lZGlhbF9NYWdtYTtcblxudmFyIE11bHRpcGxpY2F0aXZlX1NlbWlncm91cCA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLlNlbWlncm91cDtcblxudmFyIE11bHRpcGxpY2F0aXZlX01vbm9pZCA9IEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZDtcblxudmFyIE11bHRpcGxpY2F0aXZlX1F1YXNpZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5RdWFzaWdyb3VwO1xuXG52YXIgTXVsdGlwbGljYXRpdmVfTWVkaWFsX1F1YXNpZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5NZWRpYWxfUXVhc2lncm91cDtcblxudmFyIE11bHRpcGxpY2F0aXZlX0xvb3AgPSBGbG9hdCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5Mb29wO1xuXG52YXIgTXVsdGlwbGljYXRpdmUgPSB7XG4gIE1hZ21hOiBNdWx0aXBsaWNhdGl2ZV9NYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBNdWx0aXBsaWNhdGl2ZV9NZWRpYWxfTWFnbWEsXG4gIFNlbWlncm91cDogTXVsdGlwbGljYXRpdmVfU2VtaWdyb3VwLFxuICBNb25vaWQ6IE11bHRpcGxpY2F0aXZlX01vbm9pZCxcbiAgUXVhc2lncm91cDogTXVsdGlwbGljYXRpdmVfUXVhc2lncm91cCxcbiAgTWVkaWFsX1F1YXNpZ3JvdXA6IE11bHRpcGxpY2F0aXZlX01lZGlhbF9RdWFzaWdyb3VwLFxuICBMb29wOiBNdWx0aXBsaWNhdGl2ZV9Mb29wXG59O1xuXG52YXIgU3VidHJhY3RpdmVfTWFnbWEgPSBGbG9hdCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5NYWdtYTtcblxudmFyIFN1YnRyYWN0aXZlX01lZGlhbF9NYWdtYSA9IEZsb2F0JEJzQmFzdGV0LlN1YnRyYWN0aXZlLk1lZGlhbF9NYWdtYTtcblxudmFyIFN1YnRyYWN0aXZlX1F1YXNpZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5RdWFzaWdyb3VwO1xuXG52YXIgU3VidHJhY3RpdmVfTWVkaWFsX1F1YXNpZ3JvdXAgPSBGbG9hdCRCc0Jhc3RldC5TdWJ0cmFjdGl2ZS5NZWRpYWxfUXVhc2lncm91cDtcblxudmFyIFN1YnRyYWN0aXZlID0ge1xuICBNYWdtYTogU3VidHJhY3RpdmVfTWFnbWEsXG4gIE1lZGlhbF9NYWdtYTogU3VidHJhY3RpdmVfTWVkaWFsX01hZ21hLFxuICBRdWFzaWdyb3VwOiBTdWJ0cmFjdGl2ZV9RdWFzaWdyb3VwLFxuICBNZWRpYWxfUXVhc2lncm91cDogU3VidHJhY3RpdmVfTWVkaWFsX1F1YXNpZ3JvdXBcbn07XG5cbnZhciBEaXZpc2l2ZV9NYWdtYSA9IEZsb2F0JEJzQmFzdGV0LkRpdmlzaXZlLk1hZ21hO1xuXG52YXIgRGl2aXNpdmVfTWVkaWFsX01hZ21hID0gRmxvYXQkQnNCYXN0ZXQuRGl2aXNpdmUuTWVkaWFsX01hZ21hO1xuXG52YXIgRGl2aXNpdmVfUXVhc2lncm91cCA9IEZsb2F0JEJzQmFzdGV0LkRpdmlzaXZlLlF1YXNpZ3JvdXA7XG5cbnZhciBEaXZpc2l2ZV9NZWRpYWxfUXVhc2lncm91cCA9IEZsb2F0JEJzQmFzdGV0LkRpdmlzaXZlLk1lZGlhbF9RdWFzaWdyb3VwO1xuXG52YXIgRGl2aXNpdmUgPSB7XG4gIE1hZ21hOiBEaXZpc2l2ZV9NYWdtYSxcbiAgTWVkaWFsX01hZ21hOiBEaXZpc2l2ZV9NZWRpYWxfTWFnbWEsXG4gIFF1YXNpZ3JvdXA6IERpdmlzaXZlX1F1YXNpZ3JvdXAsXG4gIE1lZGlhbF9RdWFzaWdyb3VwOiBEaXZpc2l2ZV9NZWRpYWxfUXVhc2lncm91cFxufTtcblxudmFyIEluZml4X0FkZGl0aXZlID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguQWRkaXRpdmU7XG5cbnZhciBJbmZpeF9NdWx0aXBsaWNhdGl2ZSA9IEZsb2F0JEJzQmFzdGV0LkluZml4Lk11bHRpcGxpY2F0aXZlO1xuXG52YXIgSW5maXhfJGVxJHBpcGUkZXEgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kZXEkcGlwZSRlcTtcblxudmFyIEluZml4XyRsZXNzJHBpcGUkcGlwZSA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRsZXNzJHBpcGUkcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHBpcGUkZ3JlYXQgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRwaXBlJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRlcSA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRsZXNzJHBpcGUkZXE7XG5cbnZhciBJbmZpeF8kZ3JlYXQkcGlwZSRlcSA9IEZsb2F0JEJzQmFzdGV0LkluZml4LiRncmVhdCRwaXBlJGVxO1xuXG52YXIgSW5maXhfJHBpcGUkcGx1cyRwaXBlID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguJHBpcGUkcGx1cyRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkc3RhciRwaXBlID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguJHBpcGUkc3RhciRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkJHBpcGUgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRuZWckcGlwZTtcblxudmFyIEluZml4XyRwaXBlJHNsYXNoJHBpcGUgPSBGbG9hdCRCc0Jhc3RldC5JbmZpeC4kcGlwZSRzbGFzaCRwaXBlO1xuXG52YXIgSW5maXhfJHBpcGUkcGVyY2VudCRwaXBlID0gRmxvYXQkQnNCYXN0ZXQuSW5maXguJHBpcGUkcGVyY2VudCRwaXBlO1xuXG52YXIgSW5maXggPSB7XG4gIEFkZGl0aXZlOiBJbmZpeF9BZGRpdGl2ZSxcbiAgTXVsdGlwbGljYXRpdmU6IEluZml4X011bHRpcGxpY2F0aXZlLFxuICAkZXEkcGlwZSRlcTogSW5maXhfJGVxJHBpcGUkZXEsXG4gICRsZXNzJHBpcGUkcGlwZTogSW5maXhfJGxlc3MkcGlwZSRwaXBlLFxuICAkcGlwZSRwaXBlJGdyZWF0OiBJbmZpeF8kcGlwZSRwaXBlJGdyZWF0LFxuICAkbGVzcyRwaXBlJGVxOiBJbmZpeF8kbGVzcyRwaXBlJGVxLFxuICAkZ3JlYXQkcGlwZSRlcTogSW5maXhfJGdyZWF0JHBpcGUkZXEsXG4gICRwaXBlJHBsdXMkcGlwZTogSW5maXhfJHBpcGUkcGx1cyRwaXBlLFxuICAkcGlwZSRzdGFyJHBpcGU6IEluZml4XyRwaXBlJHN0YXIkcGlwZSxcbiAgJHBpcGUkbmVnJHBpcGU6IEluZml4XyRwaXBlJCRwaXBlLFxuICAkcGlwZSRzbGFzaCRwaXBlOiBJbmZpeF8kcGlwZSRzbGFzaCRwaXBlLFxuICAkcGlwZSRwZXJjZW50JHBpcGU6IEluZml4XyRwaXBlJHBlcmNlbnQkcGlwZVxufTtcblxudmFyIHplcm8gPSAwLjA7XG5cbnZhciBvbmUgPSAxLjA7XG5cbnZhciBpbmZpbml0eSA9IFBlcnZhc2l2ZXMuaW5maW5pdHk7XG5cbnZhciBuZWdhdGl2ZUluZmluaXR5ID0gUGVydmFzaXZlcy5uZWdfaW5maW5pdHk7XG5cbnZhciB0b3AgPSBQZXJ2YXNpdmVzLm1heF9mbG9hdDtcblxudmFyIGJvdHRvbSA9IFBlcnZhc2l2ZXMubWluX2Zsb2F0O1xuXG52YXIgY29tcGFyZVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZS5jb21wYXJlV2l0aENvbnZlcnNpb247XG5cbnZhciBjb21wYXJlUmV2ZXJzZWQgPSBpbmNsdWRlLmNvbXBhcmVSZXZlcnNlZDtcblxudmFyIE9yZFJldmVyc2VkID0gaW5jbHVkZS5PcmRSZXZlcnNlZDtcblxudmFyIGNvbXBhcmVBc0ludCA9IGluY2x1ZGUuY29tcGFyZUFzSW50O1xuXG52YXIgbWluID0gaW5jbHVkZS5taW47XG5cbnZhciBtYXggPSBpbmNsdWRlLm1heDtcblxudmFyIGxlc3NUaGFuID0gaW5jbHVkZS5sZXNzVGhhbjtcblxudmFyIGx0ID0gaW5jbHVkZS5sdDtcblxudmFyIGxlc3NUaGFuT3JFcSA9IGluY2x1ZGUubGVzc1RoYW5PckVxO1xuXG52YXIgbHRlID0gaW5jbHVkZS5sdGU7XG5cbnZhciBncmVhdGVyVGhhbiA9IGluY2x1ZGUuZ3JlYXRlclRoYW47XG5cbnZhciBndCA9IGluY2x1ZGUuZ3Q7XG5cbnZhciBncmVhdGVyVGhhbk9yRXEgPSBpbmNsdWRlLmdyZWF0ZXJUaGFuT3JFcTtcblxudmFyIGd0ZSA9IGluY2x1ZGUuZ3RlO1xuXG52YXIgY2xhbXAgPSBpbmNsdWRlLmNsYW1wO1xuXG52YXIgYmV0d2VlbiA9IGluY2x1ZGUuYmV0d2VlbjtcblxudmFyIE9yZE5hbWVkID0gaW5jbHVkZS5PcmROYW1lZDtcblxudmFyIE9yZEJ5ID0gaW5jbHVkZS5PcmRCeTtcblxudmFyICRuZWcgPSBpbmNsdWRlJDEuJG5lZztcblxudmFyIG5lZ2F0ZSA9IGluY2x1ZGUkMS5uZWdhdGU7XG5cbnZhciBzaWdudW0gPSBpbmNsdWRlJDIuc2lnbnVtO1xuXG52YXIgdG9TdHJpbmcgPSBzaG93O1xuXG5leHBvcnQge1xuICBlcSAsXG4gIEVxICxcbiAgemVybyAsXG4gIG9uZSAsXG4gIG5hbiAsXG4gIGluZmluaXR5ICxcbiAgbmVnYXRpdmVJbmZpbml0eSAsXG4gIGFkZCAsXG4gIHN1YnRyYWN0ICxcbiAgbXVsdGlwbHkgLFxuICBkaXZpZGUgLFxuICBwb3cgLFxuICBzcXJ0ICxcbiAgdG9wICxcbiAgYm90dG9tICxcbiAgJCRpc05hTiAsXG4gIGNvbXBhcmUgLFxuICBPcmQgLFxuICBjb21wYXJlV2l0aENvbnZlcnNpb24gLFxuICBjb21wYXJlUmV2ZXJzZWQgLFxuICBPcmRSZXZlcnNlZCAsXG4gIGNvbXBhcmVBc0ludCAsXG4gIG1pbiAsXG4gIG1heCAsXG4gIGxlc3NUaGFuICxcbiAgbHQgLFxuICBsZXNzVGhhbk9yRXEgLFxuICBsdGUgLFxuICBncmVhdGVyVGhhbiAsXG4gIGd0ICxcbiAgZ3JlYXRlclRoYW5PckVxICxcbiAgZ3RlICxcbiAgY2xhbXAgLFxuICBiZXR3ZWVuICxcbiAgT3JkUmluZ0V4dGVuc2lvbnMgLFxuICBPcmROYW1lZCAsXG4gIE9yZEJ5ICxcbiAgU2VtaXJpbmcgLFxuICBSaW5nICxcbiAgJG5lZyAsXG4gIG5lZ2F0ZSAsXG4gIGFicyAsXG4gIHNpZ251bSAsXG4gIEV1Y2xpZGVhblJpbmcgLFxuICBhcHByb3hpbWF0ZWx5RXF1YWwgLFxuICB0b0ludCAsXG4gIGZyb21JbnQgLFxuICBmcmFjdGlvbmFsUGFydCAsXG4gIGZsb29yICxcbiAgZmxvb3JBc0ludCAsXG4gIGNlaWwgLFxuICBjZWlsQXNJbnQgLFxuICByb3VuZCAsXG4gIHJvdW5kQXNJbnQgLFxuICB0b1ByZWNpc2lvbiAsXG4gIHNob3cgLFxuICB0b1N0cmluZyAsXG4gIFNob3cgLFxuICBmcm9tU3RyaW5nICxcbiAgQWRkaXRpdmUgLFxuICBNdWx0aXBsaWNhdGl2ZSAsXG4gIFN1YnRyYWN0aXZlICxcbiAgRGl2aXNpdmUgLFxuICBJbmZpeCAsXG4gIFxufVxuLyogbmFuIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2hhciBmcm9tIFwiLi9jaGFyLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiLi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9ieXRlcyBmcm9tIFwiLi9jYW1sX2J5dGVzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX3ByaW1pdGl2ZSBmcm9tIFwiLi9jYW1sX3ByaW1pdGl2ZS5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMgZnJvbSBcIi4vY2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuanNcIjtcblxuZnVuY3Rpb24gbWFrZShuLCBjKSB7XG4gIHZhciBzID0gQ2FtbF9ieXRlcy5jYW1sX2NyZWF0ZV9ieXRlcyhuKTtcbiAgQ2FtbF9ieXRlcy5jYW1sX2ZpbGxfYnl0ZXMocywgMCwgbiwgYyk7XG4gIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiBpbml0KG4sIGYpIHtcbiAgdmFyIHMgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKG4pO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbjsgKytpKXtcbiAgICBzW2ldID0gQ3VycnkuXzEoZiwgaSk7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbnZhciBlbXB0eSA9IFtdO1xuXG5mdW5jdGlvbiBjb3B5KHMpIHtcbiAgdmFyIGxlbiA9IHMubGVuZ3RoO1xuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobGVuKTtcbiAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfYnl0ZXMocywgMCwgciwgMCwgbGVuKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHRvX3N0cmluZyhiKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhjb3B5KGIpKTtcbn1cblxuZnVuY3Rpb24gb2Zfc3RyaW5nKHMpIHtcbiAgcmV0dXJuIGNvcHkoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpO1xufVxuXG5mdW5jdGlvbiBzdWIocywgb2ZzLCBsZW4pIHtcbiAgaWYgKG9mcyA8IDAgfHwgbGVuIDwgMCB8fCBvZnMgPiAocy5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnN1YiAvIEJ5dGVzLnN1YlwiXG4gICAgICAgIF07XG4gIH1cbiAgdmFyIHIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKGxlbik7XG4gIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMsIG9mcywgciwgMCwgbGVuKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHN1Yl9zdHJpbmcoYiwgb2ZzLCBsZW4pIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKHN1YihiLCBvZnMsIGxlbikpO1xufVxuXG5mdW5jdGlvbiAkcGx1cyRwbHVzKGEsIGIpIHtcbiAgdmFyIGMgPSBhICsgYiB8IDA7XG4gIHZhciBtYXRjaCA9IGEgPCAwO1xuICB2YXIgbWF0Y2gkMSA9IGIgPCAwO1xuICB2YXIgbWF0Y2gkMiA9IGMgPCAwO1xuICBpZiAobWF0Y2gpIHtcbiAgICBpZiAoIW1hdGNoJDEpIHtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICBpZiAobWF0Y2gkMikge1xuICAgICAgcmV0dXJuIGM7XG4gICAgfVxuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiQnl0ZXMuZXh0ZW5kXCJcbiAgICAgICAgXTtcbiAgfVxuICBpZiAobWF0Y2gkMSkge1xuICAgIHJldHVybiBjO1xuICB9XG4gIGlmIChtYXRjaCQyKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJCeXRlcy5leHRlbmRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBleHRlbmQocywgbGVmdCwgcmlnaHQpIHtcbiAgdmFyIGxlbiA9ICRwbHVzJHBsdXMoJHBsdXMkcGx1cyhzLmxlbmd0aCwgbGVmdCksIHJpZ2h0KTtcbiAgdmFyIHIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKGxlbik7XG4gIHZhciBtYXRjaCA9IGxlZnQgPCAwID8gLyogdHVwbGUgKi9bXG4gICAgICAtbGVmdCB8IDAsXG4gICAgICAwXG4gICAgXSA6IC8qIHR1cGxlICovW1xuICAgICAgMCxcbiAgICAgIGxlZnRcbiAgICBdO1xuICB2YXIgZHN0b2ZmID0gbWF0Y2hbMV07XG4gIHZhciBzcmNvZmYgPSBtYXRjaFswXTtcbiAgdmFyIGNweWxlbiA9IENhbWxfcHJpbWl0aXZlLmNhbWxfaW50X21pbihzLmxlbmd0aCAtIHNyY29mZiB8IDAsIGxlbiAtIGRzdG9mZiB8IDApO1xuICBpZiAoY3B5bGVuID4gMCkge1xuICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKHMsIHNyY29mZiwgciwgZHN0b2ZmLCBjcHlsZW4pO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBmaWxsKHMsIG9mcywgbGVuLCBjKSB7XG4gIGlmIChvZnMgPCAwIHx8IGxlbiA8IDAgfHwgb2ZzID4gKHMubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5maWxsIC8gQnl0ZXMuZmlsbFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIENhbWxfYnl0ZXMuY2FtbF9maWxsX2J5dGVzKHMsIG9mcywgbGVuLCBjKTtcbn1cblxuZnVuY3Rpb24gYmxpdChzMSwgb2ZzMSwgczIsIG9mczIsIGxlbikge1xuICBpZiAobGVuIDwgMCB8fCBvZnMxIDwgMCB8fCBvZnMxID4gKHMxLmxlbmd0aCAtIGxlbiB8IDApIHx8IG9mczIgPCAwIHx8IG9mczIgPiAoczIubGVuZ3RoIC0gbGVuIHwgMCkpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIkJ5dGVzLmJsaXRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzMSwgb2ZzMSwgczIsIG9mczIsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGJsaXRfc3RyaW5nKHMxLCBvZnMxLCBzMiwgb2ZzMiwgbGVuKSB7XG4gIGlmIChsZW4gPCAwIHx8IG9mczEgPCAwIHx8IG9mczEgPiAoczEubGVuZ3RoIC0gbGVuIHwgMCkgfHwgb2ZzMiA8IDAgfHwgb2ZzMiA+IChzMi5sZW5ndGggLSBsZW4gfCAwKSkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmJsaXQgLyBCeXRlcy5ibGl0X3N0cmluZ1wiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIENhbWxfYnl0ZXMuY2FtbF9ibGl0X3N0cmluZyhzMSwgb2ZzMSwgczIsIG9mczIsIGxlbik7XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgYSkge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IGEubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzEoZiwgYVtpXSk7XG4gIH1cbiAgXG59XG5cbmZ1bmN0aW9uIGl0ZXJpKGYsIGEpIHtcbiAgZm9yKHZhciBpID0gMCAsaV9maW5pc2ggPSBhLmxlbmd0aDsgaSA8IGlfZmluaXNoOyArK2kpe1xuICAgIEN1cnJ5Ll8yKGYsIGksIGFbaV0pO1xuICB9XG4gIFxufVxuXG5mdW5jdGlvbiBlbnN1cmVfZ2UoeCwgeSkge1xuICBpZiAoeCA+PSB5KSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbiAgdGhyb3cgW1xuICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICBcIkJ5dGVzLmNvbmNhdFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBzdW1fbGVuZ3RocyhfYWNjLCBzZXBsZW4sIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHZhciB0bCA9IHBhcmFtWzFdO1xuICAgIHZhciBoZCA9IHBhcmFtWzBdO1xuICAgIGlmICghdGwpIHtcbiAgICAgIHJldHVybiBoZC5sZW5ndGggKyBhY2MgfCAwO1xuICAgIH1cbiAgICBfcGFyYW0gPSB0bDtcbiAgICBfYWNjID0gZW5zdXJlX2dlKChoZC5sZW5ndGggKyBzZXBsZW4gfCAwKSArIGFjYyB8IDAsIGFjYyk7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb25jYXQoc2VwLCBsKSB7XG4gIGlmICghbCkge1xuICAgIHJldHVybiBlbXB0eTtcbiAgfVxuICB2YXIgc2VwbGVuID0gc2VwLmxlbmd0aDtcbiAgdmFyIGRzdCA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMoc3VtX2xlbmd0aHMoMCwgc2VwbGVuLCBsKSk7XG4gIHZhciBfcG9zID0gMDtcbiAgdmFyIF9wYXJhbSA9IGw7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIHBvcyA9IF9wb3M7XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGRzdDtcbiAgICB9XG4gICAgdmFyIHRsID0gcGFyYW1bMV07XG4gICAgdmFyIGhkID0gcGFyYW1bMF07XG4gICAgaWYgKHRsKSB7XG4gICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhoZCwgMCwgZHN0LCBwb3MsIGhkLmxlbmd0aCk7XG4gICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzZXAsIDAsIGRzdCwgcG9zICsgaGQubGVuZ3RoIHwgMCwgc2VwbGVuKTtcbiAgICAgIF9wYXJhbSA9IHRsO1xuICAgICAgX3BvcyA9IChwb3MgKyBoZC5sZW5ndGggfCAwKSArIHNlcGxlbiB8IDA7XG4gICAgICBjb250aW51ZSA7XG4gICAgfVxuICAgIENhbWxfYnl0ZXMuY2FtbF9ibGl0X2J5dGVzKGhkLCAwLCBkc3QsIHBvcywgaGQubGVuZ3RoKTtcbiAgICByZXR1cm4gZHN0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBjYXQoczEsIHMyKSB7XG4gIHZhciBsMSA9IHMxLmxlbmd0aDtcbiAgdmFyIGwyID0gczIubGVuZ3RoO1xuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobDEgKyBsMiB8IDApO1xuICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzMSwgMCwgciwgMCwgbDEpO1xuICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9ieXRlcyhzMiwgMCwgciwgbDEsIGwyKTtcbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGlzX3NwYWNlKHBhcmFtKSB7XG4gIHZhciBzd2l0Y2hlciA9IHBhcmFtIC0gOSB8IDA7XG4gIGlmIChzd2l0Y2hlciA+IDQgfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgcmV0dXJuIHN3aXRjaGVyID09PSAyMztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3dpdGNoZXIgIT09IDI7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJpbShzKSB7XG4gIHZhciBsZW4gPSBzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB3aGlsZShpIDwgbGVuICYmIGlzX3NwYWNlKHNbaV0pKSB7XG4gICAgaSA9IGkgKyAxIHwgMDtcbiAgfTtcbiAgdmFyIGogPSBsZW4gLSAxIHwgMDtcbiAgd2hpbGUoaiA+PSBpICYmIGlzX3NwYWNlKHNbal0pKSB7XG4gICAgaiA9IGogLSAxIHwgMDtcbiAgfTtcbiAgaWYgKGogPj0gaSkge1xuICAgIHJldHVybiBzdWIocywgaSwgKGogLSBpIHwgMCkgKyAxIHwgMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVtcHR5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGVzY2FwZWQocykge1xuICB2YXIgbiA9IDA7XG4gIGZvcih2YXIgaSA9IDAgLGlfZmluaXNoID0gcy5sZW5ndGg7IGkgPCBpX2ZpbmlzaDsgKytpKXtcbiAgICB2YXIgbWF0Y2ggPSBzW2ldO1xuICAgIHZhciB0bXA7XG4gICAgaWYgKG1hdGNoID49IDMyKSB7XG4gICAgICB2YXIgc3dpdGNoZXIgPSBtYXRjaCAtIDM0IHwgMDtcbiAgICAgIHRtcCA9IHN3aXRjaGVyID4gNTggfHwgc3dpdGNoZXIgPCAwID8gKFxuICAgICAgICAgIHN3aXRjaGVyID49IDkzID8gNCA6IDFcbiAgICAgICAgKSA6IChcbiAgICAgICAgICBzd2l0Y2hlciA+IDU3IHx8IHN3aXRjaGVyIDwgMSA/IDIgOiAxXG4gICAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRtcCA9IG1hdGNoID49IDExID8gKFxuICAgICAgICAgIG1hdGNoICE9PSAxMyA/IDQgOiAyXG4gICAgICAgICkgOiAoXG4gICAgICAgICAgbWF0Y2ggPj0gOCA/IDIgOiA0XG4gICAgICAgICk7XG4gICAgfVxuICAgIG4gPSBuICsgdG1wIHwgMDtcbiAgfVxuICBpZiAobiA9PT0gcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY29weShzKTtcbiAgfVxuICB2YXIgcyRwcmltZSA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobik7XG4gIG4gPSAwO1xuICBmb3IodmFyIGkkMSA9IDAgLGlfZmluaXNoJDEgPSBzLmxlbmd0aDsgaSQxIDwgaV9maW5pc2gkMTsgKytpJDEpe1xuICAgIHZhciBjID0gc1tpJDFdO1xuICAgIHZhciBleGl0ID0gMDtcbiAgICBpZiAoYyA+PSAzNSkge1xuICAgICAgaWYgKGMgIT09IDkyKSB7XG4gICAgICAgIGlmIChjID49IDEyNykge1xuICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMkcHJpbWVbbl0gPSBjO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGl0ID0gMjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGMgPj0gMzIpIHtcbiAgICAgIGlmIChjID49IDM0KSB7XG4gICAgICAgIGV4aXQgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjID49IDE0KSB7XG4gICAgICBleGl0ID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgIGNhc2UgOCA6XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJcXFxcXCIgKi85MjtcbiAgICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgICBzJHByaW1lW25dID0gLyogXCJiXCIgKi85ODtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDkgOlxuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwidFwiICovMTE2O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTAgOlxuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiblwiICovMTEwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMCA6XG4gICAgICAgIGNhc2UgMSA6XG4gICAgICAgIGNhc2UgMiA6XG4gICAgICAgIGNhc2UgMyA6XG4gICAgICAgIGNhc2UgNCA6XG4gICAgICAgIGNhc2UgNSA6XG4gICAgICAgIGNhc2UgNiA6XG4gICAgICAgIGNhc2UgNyA6XG4gICAgICAgIGNhc2UgMTEgOlxuICAgICAgICBjYXNlIDEyIDpcbiAgICAgICAgICAgIGV4aXQgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTMgOlxuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiclwiICovMTE0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGV4aXQpIHtcbiAgICAgIGNhc2UgMSA6XG4gICAgICAgICAgcyRwcmltZVtuXSA9IC8qIFwiXFxcXFwiICovOTI7XG4gICAgICAgICAgbiA9IG4gKyAxIHwgMDtcbiAgICAgICAgICBzJHByaW1lW25dID0gNDggKyAoYyAvIDEwMCB8IDApIHwgMDtcbiAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIChjIC8gMTAgfCAwKSAlIDEwIHwgMDtcbiAgICAgICAgICBuID0gbiArIDEgfCAwO1xuICAgICAgICAgIHMkcHJpbWVbbl0gPSA0OCArIGMgJSAxMCB8IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIgOlxuICAgICAgICAgIHMkcHJpbWVbbl0gPSAvKiBcIlxcXFxcIiAqLzkyO1xuICAgICAgICAgIG4gPSBuICsgMSB8IDA7XG4gICAgICAgICAgcyRwcmltZVtuXSA9IGM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICB9XG4gICAgbiA9IG4gKyAxIHwgMDtcbiAgfVxuICByZXR1cm4gcyRwcmltZTtcbn1cblxuZnVuY3Rpb24gbWFwKGYsIHMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGwgPT09IDApIHtcbiAgICByZXR1cm4gcztcbiAgfVxuICB2YXIgciA9IENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMobCk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsOyArK2kpe1xuICAgIHJbaV0gPSBDdXJyeS5fMShmLCBzW2ldKTtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZnVuY3Rpb24gbWFwaShmLCBzKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChsID09PSAwKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cbiAgdmFyIHIgPSBDYW1sX2J5dGVzLmNhbWxfY3JlYXRlX2J5dGVzKGwpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgbDsgKytpKXtcbiAgICByW2ldID0gQ3VycnkuXzIoZiwgaSwgc1tpXSk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIHVwcGVyY2FzZV9hc2NpaShzKSB7XG4gIHJldHVybiBtYXAoQ2hhci51cHBlcmNhc2VfYXNjaWksIHMpO1xufVxuXG5mdW5jdGlvbiBsb3dlcmNhc2VfYXNjaWkocykge1xuICByZXR1cm4gbWFwKENoYXIubG93ZXJjYXNlX2FzY2lpLCBzKTtcbn1cblxuZnVuY3Rpb24gYXBwbHkxKGYsIHMpIHtcbiAgaWYgKHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHM7XG4gIH1cbiAgdmFyIHIgPSBjb3B5KHMpO1xuICByWzBdID0gQ3VycnkuXzEoZiwgc1swXSk7XG4gIHJldHVybiByO1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplX2FzY2lpKHMpIHtcbiAgcmV0dXJuIGFwcGx5MShDaGFyLnVwcGVyY2FzZV9hc2NpaSwgcyk7XG59XG5cbmZ1bmN0aW9uIHVuY2FwaXRhbGl6ZV9hc2NpaShzKSB7XG4gIHJldHVybiBhcHBseTEoQ2hhci5sb3dlcmNhc2VfYXNjaWksIHMpO1xufVxuXG5mdW5jdGlvbiBpbmRleF9yZWMocywgbGltLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsaW0pIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gICAgaWYgKHNbaV0gPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluZGV4KHMsIGMpIHtcbiAgcmV0dXJuIGluZGV4X3JlYyhzLCBzLmxlbmd0aCwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4X3JlY19vcHQocywgbGltLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsaW0pIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChzW2ldID09PSBjKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgX2kgPSBpICsgMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBpbmRleF9vcHQocywgYykge1xuICByZXR1cm4gaW5kZXhfcmVjX29wdChzLCBzLmxlbmd0aCwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4X2Zyb20ocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5pbmRleF9mcm9tIC8gQnl0ZXMuaW5kZXhfZnJvbVwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIGluZGV4X3JlYyhzLCBsLCBpLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfZnJvbV9vcHQocywgaSwgYykge1xuICB2YXIgbCA9IHMubGVuZ3RoO1xuICBpZiAoaSA8IDAgfHwgaSA+IGwpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5pbmRleF9mcm9tX29wdCAvIEJ5dGVzLmluZGV4X2Zyb21fb3B0XCJcbiAgICAgICAgXTtcbiAgfVxuICByZXR1cm4gaW5kZXhfcmVjX29wdChzLCBsLCBpLCBjKTtcbn1cblxuZnVuY3Rpb24gcmluZGV4X3JlYyhzLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gICAgaWYgKHNbaV0gPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJpbmRleChzLCBjKSB7XG4gIHJldHVybiByaW5kZXhfcmVjKHMsIHMubGVuZ3RoIC0gMSB8IDAsIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIGlmIChpIDwgLTEgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJpbmRleF9mcm9tIC8gQnl0ZXMucmluZGV4X2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiByaW5kZXhfcmVjKHMsIGksIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfcmVjX29wdChzLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChzW2ldID09PSBjKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgX2kgPSBpIC0gMSB8IDA7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiByaW5kZXhfb3B0KHMsIGMpIHtcbiAgcmV0dXJuIHJpbmRleF9yZWNfb3B0KHMsIHMubGVuZ3RoIC0gMSB8IDAsIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfZnJvbV9vcHQocywgaSwgYykge1xuICBpZiAoaSA8IC0xIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5yaW5kZXhfZnJvbV9vcHQgLyBCeXRlcy5yaW5kZXhfZnJvbV9vcHRcIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiByaW5kZXhfcmVjX29wdChzLCBpLCBjKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNfZnJvbShzLCBpLCBjKSB7XG4gIHZhciBsID0gcy5sZW5ndGg7XG4gIGlmIChpIDwgMCB8fCBpID4gbCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLmNvbnRhaW5zX2Zyb20gLyBCeXRlcy5jb250YWluc19mcm9tXCJcbiAgICAgICAgXTtcbiAgfVxuICB0cnkge1xuICAgIGluZGV4X3JlYyhzLCBsLCBpLCBjKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYXRjaCAoZXhuKXtcbiAgICBpZiAoZXhuID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhyb3cgZXhuO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zKHMsIGMpIHtcbiAgcmV0dXJuIGNvbnRhaW5zX2Zyb20ocywgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJjb250YWluc19mcm9tKHMsIGksIGMpIHtcbiAgaWYgKGkgPCAwIHx8IGkgPj0gcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBbXG4gICAgICAgICAgQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMuaW52YWxpZF9hcmd1bWVudCxcbiAgICAgICAgICBcIlN0cmluZy5yY29udGFpbnNfZnJvbSAvIEJ5dGVzLnJjb250YWluc19mcm9tXCJcbiAgICAgICAgXTtcbiAgfVxuICB0cnkge1xuICAgIHJpbmRleF9yZWMocywgaSwgYyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY2F0Y2ggKGV4bil7XG4gICAgaWYgKGV4biA9PT0gQ2FtbF9idWlsdGluX2V4Y2VwdGlvbnMubm90X2ZvdW5kKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRocm93IGV4bjtcbiAgfVxufVxuXG52YXIgY29tcGFyZSA9IENhbWxfcHJpbWl0aXZlLmNhbWxfYnl0ZXNfY29tcGFyZTtcblxuZnVuY3Rpb24gdXBwZXJjYXNlKHMpIHtcbiAgcmV0dXJuIG1hcChDaGFyLnVwcGVyY2FzZSwgcyk7XG59XG5cbmZ1bmN0aW9uIGxvd2VyY2FzZShzKSB7XG4gIHJldHVybiBtYXAoQ2hhci5sb3dlcmNhc2UsIHMpO1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplKHMpIHtcbiAgcmV0dXJuIGFwcGx5MShDaGFyLnVwcGVyY2FzZSwgcyk7XG59XG5cbmZ1bmN0aW9uIHVuY2FwaXRhbGl6ZShzKSB7XG4gIHJldHVybiBhcHBseTEoQ2hhci5sb3dlcmNhc2UsIHMpO1xufVxuXG52YXIgZXF1YWwgPSBDYW1sX3ByaW1pdGl2ZS5jYW1sX2J5dGVzX2VxdWFsO1xuXG52YXIgdW5zYWZlX3RvX3N0cmluZyA9IENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nO1xuXG52YXIgdW5zYWZlX29mX3N0cmluZyA9IENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nO1xuXG5leHBvcnQge1xuICBtYWtlICxcbiAgaW5pdCAsXG4gIGVtcHR5ICxcbiAgY29weSAsXG4gIG9mX3N0cmluZyAsXG4gIHRvX3N0cmluZyAsXG4gIHN1YiAsXG4gIHN1Yl9zdHJpbmcgLFxuICBleHRlbmQgLFxuICBmaWxsICxcbiAgYmxpdCAsXG4gIGJsaXRfc3RyaW5nICxcbiAgY29uY2F0ICxcbiAgY2F0ICxcbiAgaXRlciAsXG4gIGl0ZXJpICxcbiAgbWFwICxcbiAgbWFwaSAsXG4gIHRyaW0gLFxuICBlc2NhcGVkICxcbiAgaW5kZXggLFxuICBpbmRleF9vcHQgLFxuICByaW5kZXggLFxuICByaW5kZXhfb3B0ICxcbiAgaW5kZXhfZnJvbSAsXG4gIGluZGV4X2Zyb21fb3B0ICxcbiAgcmluZGV4X2Zyb20gLFxuICByaW5kZXhfZnJvbV9vcHQgLFxuICBjb250YWlucyAsXG4gIGNvbnRhaW5zX2Zyb20gLFxuICByY29udGFpbnNfZnJvbSAsXG4gIHVwcGVyY2FzZSAsXG4gIGxvd2VyY2FzZSAsXG4gIGNhcGl0YWxpemUgLFxuICB1bmNhcGl0YWxpemUgLFxuICB1cHBlcmNhc2VfYXNjaWkgLFxuICBsb3dlcmNhc2VfYXNjaWkgLFxuICBjYXBpdGFsaXplX2FzY2lpICxcbiAgdW5jYXBpdGFsaXplX2FzY2lpICxcbiAgY29tcGFyZSAsXG4gIGVxdWFsICxcbiAgdW5zYWZlX3RvX3N0cmluZyAsXG4gIHVuc2FmZV9vZl9zdHJpbmcgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQnl0ZXMgZnJvbSBcIi4vYnl0ZXMuanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCIuL2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J5dGVzIGZyb20gXCIuL2NhbWxfYnl0ZXMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfcHJpbWl0aXZlIGZyb20gXCIuL2NhbWxfcHJpbWl0aXZlLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucyBmcm9tIFwiLi9jYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5qc1wiO1xuXG5mdW5jdGlvbiBtYWtlKG4sIGMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLm1ha2UobiwgYykpO1xufVxuXG5mdW5jdGlvbiBpbml0KG4sIGYpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmluaXQobiwgZikpO1xufVxuXG5mdW5jdGlvbiBjb3B5KHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmNvcHkoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gc3ViKHMsIG9mcywgbGVuKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5zdWIoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocyksIG9mcywgbGVuKSk7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZV9nZSh4LCB5KSB7XG4gIGlmICh4ID49IHkpIHtcbiAgICByZXR1cm4geDtcbiAgfVxuICB0aHJvdyBbXG4gICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgIFwiU3RyaW5nLmNvbmNhdFwiXG4gICAgICBdO1xufVxuXG5mdW5jdGlvbiBzdW1fbGVuZ3RocyhfYWNjLCBzZXBsZW4sIF9wYXJhbSkge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIHBhcmFtID0gX3BhcmFtO1xuICAgIHZhciBhY2MgPSBfYWNjO1xuICAgIGlmICghcGFyYW0pIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHZhciB0bCA9IHBhcmFtWzFdO1xuICAgIHZhciBoZCA9IHBhcmFtWzBdO1xuICAgIGlmICghdGwpIHtcbiAgICAgIHJldHVybiBoZC5sZW5ndGggKyBhY2MgfCAwO1xuICAgIH1cbiAgICBfcGFyYW0gPSB0bDtcbiAgICBfYWNjID0gZW5zdXJlX2dlKChoZC5sZW5ndGggKyBzZXBsZW4gfCAwKSArIGFjYyB8IDAsIGFjYyk7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1bnNhZmVfYmxpdHMoZHN0LCBfcG9zLCBzZXAsIHNlcGxlbiwgX3BhcmFtKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgcGFyYW0gPSBfcGFyYW07XG4gICAgdmFyIHBvcyA9IF9wb3M7XG4gICAgaWYgKCFwYXJhbSkge1xuICAgICAgcmV0dXJuIGRzdDtcbiAgICB9XG4gICAgdmFyIHRsID0gcGFyYW1bMV07XG4gICAgdmFyIGhkID0gcGFyYW1bMF07XG4gICAgaWYgKHRsKSB7XG4gICAgICBDYW1sX2J5dGVzLmNhbWxfYmxpdF9zdHJpbmcoaGQsIDAsIGRzdCwgcG9zLCBoZC5sZW5ndGgpO1xuICAgICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfc3RyaW5nKHNlcCwgMCwgZHN0LCBwb3MgKyBoZC5sZW5ndGggfCAwLCBzZXBsZW4pO1xuICAgICAgX3BhcmFtID0gdGw7XG4gICAgICBfcG9zID0gKHBvcyArIGhkLmxlbmd0aCB8IDApICsgc2VwbGVuIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9XG4gICAgQ2FtbF9ieXRlcy5jYW1sX2JsaXRfc3RyaW5nKGhkLCAwLCBkc3QsIHBvcywgaGQubGVuZ3RoKTtcbiAgICByZXR1cm4gZHN0O1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb25jYXQoc2VwLCBsKSB7XG4gIGlmICghbCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHZhciBzZXBsZW4gPSBzZXAubGVuZ3RoO1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcodW5zYWZlX2JsaXRzKENhbWxfYnl0ZXMuY2FtbF9jcmVhdGVfYnl0ZXMoc3VtX2xlbmd0aHMoMCwgc2VwbGVuLCBsKSksIDAsIHNlcCwgc2VwbGVuLCBsKSk7XG59XG5cbmZ1bmN0aW9uIGl0ZXIoZiwgcykge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IHMubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzEoZiwgcy5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gaXRlcmkoZiwgcykge1xuICBmb3IodmFyIGkgPSAwICxpX2ZpbmlzaCA9IHMubGVuZ3RoOyBpIDwgaV9maW5pc2g7ICsraSl7XG4gICAgQ3VycnkuXzIoZiwgaSwgcy5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gbWFwKGYsIHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLm1hcChmLCBDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBtYXBpKGYsIHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLm1hcGkoZiwgQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gaXNfc3BhY2UocGFyYW0pIHtcbiAgdmFyIHN3aXRjaGVyID0gcGFyYW0gLSA5IHwgMDtcbiAgaWYgKHN3aXRjaGVyID4gNCB8fCBzd2l0Y2hlciA8IDApIHtcbiAgICByZXR1cm4gc3dpdGNoZXIgPT09IDIzO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzd2l0Y2hlciAhPT0gMjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmltKHMpIHtcbiAgaWYgKHMgPT09IFwiXCIgfHwgIShpc19zcGFjZShzLmNoYXJDb2RlQXQoMCkpIHx8IGlzX3NwYWNlKHMuY2hhckNvZGVBdChzLmxlbmd0aCAtIDEgfCAwKSkpKSB7XG4gICAgcmV0dXJuIHM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnRyaW0oQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlc2NhcGVkKHMpIHtcbiAgdmFyIG5lZWRzX2VzY2FwZSA9IGZ1bmN0aW9uIChfaSkge1xuICAgIHdoaWxlKHRydWUpIHtcbiAgICAgIHZhciBpID0gX2k7XG4gICAgICBpZiAoaSA+PSBzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbWF0Y2ggPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAobWF0Y2ggPCAzMikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBzd2l0Y2hlciA9IG1hdGNoIC0gMzQgfCAwO1xuICAgICAgaWYgKHN3aXRjaGVyID4gNTggfHwgc3dpdGNoZXIgPCAwKSB7XG4gICAgICAgIGlmIChzd2l0Y2hlciA+PSA5Mykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIF9pID0gaSArIDEgfCAwO1xuICAgICAgICBjb250aW51ZSA7XG4gICAgICB9XG4gICAgICBpZiAoc3dpdGNoZXIgPiA1NyB8fCBzd2l0Y2hlciA8IDEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBfaSA9IGkgKyAxIHwgMDtcbiAgICAgIGNvbnRpbnVlIDtcbiAgICB9O1xuICB9O1xuICBpZiAobmVlZHNfZXNjYXBlKDApKSB7XG4gICAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmVzY2FwZWQoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleF9yZWMocywgbGltLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA+PSBsaW0pIHtcbiAgICAgIHRocm93IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZDtcbiAgICB9XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZXgocywgYykge1xuICByZXR1cm4gaW5kZXhfcmVjKHMsIHMubGVuZ3RoLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfcmVjX29wdChzLCBsaW0sIF9pLCBjKSB7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgaSA9IF9pO1xuICAgIGlmIChpID49IGxpbSkge1xuICAgICAgcmV0dXJuIDtcbiAgICB9XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSA9PT0gYykge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIF9pID0gaSArIDEgfCAwO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5kZXhfb3B0KHMsIGMpIHtcbiAgcmV0dXJuIGluZGV4X3JlY19vcHQocywgcy5sZW5ndGgsIDAsIGMpO1xufVxuXG5mdW5jdGlvbiBpbmRleF9mcm9tKHMsIGksIGMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGkgPCAwIHx8IGkgPiBsKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuaW5kZXhfZnJvbSAvIEJ5dGVzLmluZGV4X2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiBpbmRleF9yZWMocywgbCwgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIGluZGV4X2Zyb21fb3B0KHMsIGksIGMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGkgPCAwIHx8IGkgPiBsKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuaW5kZXhfZnJvbV9vcHQgLyBCeXRlcy5pbmRleF9mcm9tX29wdFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIGluZGV4X3JlY19vcHQocywgbCwgaSwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9yZWMocywgX2ksIGMpIHtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpID0gX2k7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aHJvdyBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQ7XG4gICAgfVxuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJpbmRleChzLCBjKSB7XG4gIHJldHVybiByaW5kZXhfcmVjKHMsIHMubGVuZ3RoIC0gMSB8IDAsIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfZnJvbShzLCBpLCBjKSB7XG4gIGlmIChpIDwgLTEgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJpbmRleF9mcm9tIC8gQnl0ZXMucmluZGV4X2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHJldHVybiByaW5kZXhfcmVjKHMsIGksIGMpO1xufVxuXG5mdW5jdGlvbiByaW5kZXhfcmVjX29wdChzLCBfaSwgYykge1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGkgPSBfaTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHJldHVybiA7XG4gICAgfVxuICAgIGlmIChzLmNoYXJDb2RlQXQoaSkgPT09IGMpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgICBfaSA9IGkgLSAxIHwgMDtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9vcHQocywgYykge1xuICByZXR1cm4gcmluZGV4X3JlY19vcHQocywgcy5sZW5ndGggLSAxIHwgMCwgYyk7XG59XG5cbmZ1bmN0aW9uIHJpbmRleF9mcm9tX29wdChzLCBpLCBjKSB7XG4gIGlmIChpIDwgLTEgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJpbmRleF9mcm9tX29wdCAvIEJ5dGVzLnJpbmRleF9mcm9tX29wdFwiXG4gICAgICAgIF07XG4gIH1cbiAgcmV0dXJuIHJpbmRleF9yZWNfb3B0KHMsIGksIGMpO1xufVxuXG5mdW5jdGlvbiBjb250YWluc19mcm9tKHMsIGksIGMpIHtcbiAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgaWYgKGkgPCAwIHx8IGkgPiBsKSB7XG4gICAgdGhyb3cgW1xuICAgICAgICAgIENhbWxfYnVpbHRpbl9leGNlcHRpb25zLmludmFsaWRfYXJndW1lbnQsXG4gICAgICAgICAgXCJTdHJpbmcuY29udGFpbnNfZnJvbSAvIEJ5dGVzLmNvbnRhaW5zX2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHRyeSB7XG4gICAgaW5kZXhfcmVjKHMsIGwsIGksIGMpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIGlmIChleG4gPT09IENhbWxfYnVpbHRpbl9leGNlcHRpb25zLm5vdF9mb3VuZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBleG47XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udGFpbnMocywgYykge1xuICByZXR1cm4gY29udGFpbnNfZnJvbShzLCAwLCBjKTtcbn1cblxuZnVuY3Rpb24gcmNvbnRhaW5zX2Zyb20ocywgaSwgYykge1xuICBpZiAoaSA8IDAgfHwgaSA+PSBzLmxlbmd0aCkge1xuICAgIHRocm93IFtcbiAgICAgICAgICBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5pbnZhbGlkX2FyZ3VtZW50LFxuICAgICAgICAgIFwiU3RyaW5nLnJjb250YWluc19mcm9tIC8gQnl0ZXMucmNvbnRhaW5zX2Zyb21cIlxuICAgICAgICBdO1xuICB9XG4gIHRyeSB7XG4gICAgcmluZGV4X3JlYyhzLCBpLCBjKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjYXRjaCAoZXhuKXtcbiAgICBpZiAoZXhuID09PSBDYW1sX2J1aWx0aW5fZXhjZXB0aW9ucy5ub3RfZm91bmQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhyb3cgZXhuO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwcGVyY2FzZV9hc2NpaShzKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy51cHBlcmNhc2VfYXNjaWkoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gbG93ZXJjYXNlX2FzY2lpKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmxvd2VyY2FzZV9hc2NpaShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG5mdW5jdGlvbiBjYXBpdGFsaXplX2FzY2lpKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLmNhcGl0YWxpemVfYXNjaWkoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gdW5jYXBpdGFsaXplX2FzY2lpKHMpIHtcbiAgcmV0dXJuIENhbWxfYnl0ZXMuYnl0ZXNfdG9fc3RyaW5nKEJ5dGVzLnVuY2FwaXRhbGl6ZV9hc2NpaShDYW1sX2J5dGVzLmJ5dGVzX29mX3N0cmluZyhzKSkpO1xufVxuXG52YXIgY29tcGFyZSA9IENhbWxfcHJpbWl0aXZlLmNhbWxfc3RyaW5nX2NvbXBhcmU7XG5cbmZ1bmN0aW9uIHNwbGl0X29uX2NoYXIoc2VwLCBzKSB7XG4gIHZhciByID0gLyogW10gKi8wO1xuICB2YXIgaiA9IHMubGVuZ3RoO1xuICBmb3IodmFyIGkgPSBzLmxlbmd0aCAtIDEgfCAwOyBpID49IDA7IC0taSl7XG4gICAgaWYgKHMuY2hhckNvZGVBdChpKSA9PT0gc2VwKSB7XG4gICAgICByID0gLyogOjogKi9bXG4gICAgICAgIHN1YihzLCBpICsgMSB8IDAsIChqIC0gaSB8IDApIC0gMSB8IDApLFxuICAgICAgICByXG4gICAgICBdO1xuICAgICAgaiA9IGk7XG4gICAgfVxuICAgIFxuICB9XG4gIHJldHVybiAvKiA6OiAqL1tcbiAgICAgICAgICBzdWIocywgMCwgaiksXG4gICAgICAgICAgclxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB1cHBlcmNhc2Uocykge1xuICByZXR1cm4gQ2FtbF9ieXRlcy5ieXRlc190b19zdHJpbmcoQnl0ZXMudXBwZXJjYXNlKENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIGxvd2VyY2FzZShzKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5sb3dlcmNhc2UoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy5jYXBpdGFsaXplKENhbWxfYnl0ZXMuYnl0ZXNfb2Zfc3RyaW5nKHMpKSk7XG59XG5cbmZ1bmN0aW9uIHVuY2FwaXRhbGl6ZShzKSB7XG4gIHJldHVybiBDYW1sX2J5dGVzLmJ5dGVzX3RvX3N0cmluZyhCeXRlcy51bmNhcGl0YWxpemUoQ2FtbF9ieXRlcy5ieXRlc19vZl9zdHJpbmcocykpKTtcbn1cblxudmFyIGZpbGwgPSBCeXRlcy5maWxsO1xuXG52YXIgYmxpdCA9IEJ5dGVzLmJsaXRfc3RyaW5nO1xuXG5mdW5jdGlvbiBlcXVhbChwcmltLCBwcmltJDEpIHtcbiAgcmV0dXJuIHByaW0gPT09IHByaW0kMTtcbn1cblxuZXhwb3J0IHtcbiAgbWFrZSAsXG4gIGluaXQgLFxuICBjb3B5ICxcbiAgc3ViICxcbiAgZmlsbCAsXG4gIGJsaXQgLFxuICBjb25jYXQgLFxuICBpdGVyICxcbiAgaXRlcmkgLFxuICBtYXAgLFxuICBtYXBpICxcbiAgdHJpbSAsXG4gIGVzY2FwZWQgLFxuICBpbmRleCAsXG4gIGluZGV4X29wdCAsXG4gIHJpbmRleCAsXG4gIHJpbmRleF9vcHQgLFxuICBpbmRleF9mcm9tICxcbiAgaW5kZXhfZnJvbV9vcHQgLFxuICByaW5kZXhfZnJvbSAsXG4gIHJpbmRleF9mcm9tX29wdCAsXG4gIGNvbnRhaW5zICxcbiAgY29udGFpbnNfZnJvbSAsXG4gIHJjb250YWluc19mcm9tICxcbiAgdXBwZXJjYXNlICxcbiAgbG93ZXJjYXNlICxcbiAgY2FwaXRhbGl6ZSAsXG4gIHVuY2FwaXRhbGl6ZSAsXG4gIHVwcGVyY2FzZV9hc2NpaSAsXG4gIGxvd2VyY2FzZV9hc2NpaSAsXG4gIGNhcGl0YWxpemVfYXNjaWkgLFxuICB1bmNhcGl0YWxpemVfYXNjaWkgLFxuICBjb21wYXJlICxcbiAgZXF1YWwgLFxuICBzcGxpdF9vbl9jaGFyICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBKc19leG4gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfZXhuLmpzXCI7XG5pbXBvcnQgKiBhcyAkJFN0cmluZyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9zdHJpbmcuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfaW50MzIgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9pbnQzMi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX01hcCBmcm9tIFwiLi9SZWx1ZGVfTWFwLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfU2V0IGZyb20gXCIuL1JlbHVkZV9TZXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfZm9ybWF0IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfZm9ybWF0LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0Zsb2F0IGZyb20gXCIuL1JlbHVkZV9GbG9hdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgU3RyaW5nJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9TdHJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0X0Jhc2UgZnJvbSBcIi4vbGlzdC9SZWx1ZGVfTGlzdF9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfQXJyYXlfQmFzZSBmcm9tIFwiLi9hcnJheS9SZWx1ZGVfQXJyYXlfQmFzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRXEgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19FcS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfT3JkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfT3JkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMgZnJvbSBcIi4vbGlzdC9SZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMgZnJvbSBcIi4vYXJyYXkvUmVsdWRlX0FycmF5X0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9ub2lkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXAgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19TZW1pZ3JvdXAuYnMuanNcIjtcblxudmFyIGVtcHR5ID0gXCJcIjtcblxuZnVuY3Rpb24gbGVuZ3RoKHByaW0pIHtcbiAgcmV0dXJuIHByaW0ubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5KHMpIHtcbiAgcmV0dXJuIHMubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc05vbkVtcHR5KHMpIHtcbiAgcmV0dXJuIHMubGVuZ3RoICE9PSAwO1xufVxuXG5mdW5jdGlvbiB0b05vbkVtcHR5KHMpIHtcbiAgaWYgKHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmltKHByaW0pIHtcbiAgcmV0dXJuIHByaW0udHJpbSgpO1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2Uocykge1xuICB2YXIgcyQxID0gcy50cmltKCk7XG4gIHJldHVybiBzJDEubGVuZ3RoID09PSAwO1xufVxuXG5mdW5jdGlvbiBpc05vbldoaXRlc3BhY2Uocykge1xuICB2YXIgcyQxID0gcy50cmltKCk7XG4gIHJldHVybiBzJDEubGVuZ3RoICE9PSAwO1xufVxuXG5mdW5jdGlvbiB0b05vbldoaXRlc3BhY2Uocykge1xuICB2YXIgcyQxID0gcy50cmltKCk7XG4gIGlmIChzJDEubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcztcbiAgfVxufVxuXG5mdW5jdGlvbiBjb25jYXQoYSwgYikge1xuICByZXR1cm4gYSArIGI7XG59XG5cbnZhciBTZW1pZ3JvdXAgPSB7XG4gIGFwcGVuZDogY29uY2F0XG59O1xuXG52YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX1NlbWlncm91cC5TZW1pZ3JvdXBFeHRlbnNpb25zKFNlbWlncm91cCk7XG5cbnZhciBNb25vaWQgPSB7XG4gIGFwcGVuZDogY29uY2F0LFxuICBlbXB0eTogZW1wdHlcbn07XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25vaWQuTW9ub2lkRXh0ZW5zaW9ucyhNb25vaWQpO1xuXG5mdW5jdGlvbiBjb25jYXRBcnJheShhcnJheSkge1xuICByZXR1cm4gQ3VycnkuXzMoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkTGVmdCwgKGZ1bmN0aW9uIChhY2MsIHN0cikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyBzdHI7XG4gICAgICAgICAgICAgIH0pLCBcIlwiLCBhcnJheSk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdExpc3QobGlzdCkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0KChmdW5jdGlvbiAoYWNjLCBzdHIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyBzdHI7XG4gICAgICAgICAgICAgICAgfSksIFwiXCIpKGxpc3QpO1xufVxuXG5mdW5jdGlvbiBtYWtlKHByaW0pIHtcbiAgcmV0dXJuIFN0cmluZyhwcmltKTtcbn1cblxuZnVuY3Rpb24gbWFrZVdpdGhJbmRleChpLCBmKSB7XG4gIHZhciBfYWNjID0gXCJcIjtcbiAgdmFyIF9pZHggPSAwO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGlkeCA9IF9pZHg7XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgaWYgKGlkeCA+PSBpKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICBfaWR4ID0gaWR4ICsgMSB8IDA7XG4gICAgX2FjYyA9IGFjYyArIEN1cnJ5Ll8xKGYsIGlkeCk7XG4gICAgY29udGludWUgO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZXBlYXQoaSwgc3RyKSB7XG4gIHZhciBfYWNjID0gXCJcIjtcbiAgdmFyIF9pID0gaTtcbiAgd2hpbGUodHJ1ZSkge1xuICAgIHZhciBpJDEgPSBfaTtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICBpZiAoaSQxIDw9IDApIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIF9pID0gaSQxIC0gMSB8IDA7XG4gICAgX2FjYyA9IGFjYyArIHN0cjtcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRvVXBwZXJDYXNlKHByaW0pIHtcbiAgcmV0dXJuIHByaW0udG9VcHBlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gdG9Mb3dlckNhc2UocHJpbSkge1xuICByZXR1cm4gcHJpbS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBmcm9tQ2hhckNvZGUocHJpbSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwcmltKTtcbn1cblxuZnVuY3Rpb24gY2hhckNvZGVBdChpLCBzdHIpIHtcbiAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgaWYgKFJlbHVkZV9GbG9hdC4kJGlzTmFOKGNvZGUpKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29kZSB8IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hhckF0KGksIHN0cikge1xuICByZXR1cm4gQ2FtbF9vcHRpb24ubnVsbGFibGVfdG9fb3B0KHN0cltpXSk7XG59XG5cbmZ1bmN0aW9uIGNoYXJBdE9yRW1wdHkoaSwgc3RyKSB7XG4gIHZhciB4ID0gc3RyW2ldO1xuICBpZiAoeCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH0gZWxzZSBpZiAoeCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24uc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGFyQXROdWxsYWJsZShpLCBzdHIpIHtcbiAgcmV0dXJuIHN0cltpXTtcbn1cblxuZnVuY3Rpb24gY2hhckF0T3JUaHJvdyhpLCBzdHIpIHtcbiAgdmFyIHYgPSBzdHJbaV07XG4gIGlmICh2ID09IG51bGwpIHtcbiAgICByZXR1cm4gSnNfZXhuLnJhaXNlUmFuZ2VFcnJvcihcIkZhaWxlZCB0byBnZXQgc3RyaW5nIGF0IGluZGV4IFwiICsgKFN0cmluZyhpKSArIChcIiBmb3Igc3RyaW5nOiBcIiArIHN0cikpKTtcbiAgfSBlbHNlIGlmICh2ID09IG51bGwpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHYpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvTGlzdChzdHIpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UubWFrZVdpdGhJbmRleChzdHIubGVuZ3RoLCAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2hhckF0T3JUaHJvdyhpLCBzdHIpO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoc3RyKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5tYWtlV2l0aEluZGV4KHN0ci5sZW5ndGgsIChmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGFyQXRPclRocm93KGksIHN0cik7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gZm9sZExlZnQoZiwgaW5pdCwgc3RyKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoZiwgaW5pdCkodG9MaXN0KHN0cikpO1xufVxuXG5mdW5jdGlvbiBmb2xkUmlnaHQoZiwgaW5pdCwgc3RyKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFJpZ2h0KGYsIGluaXQpKHRvTGlzdChzdHIpKTtcbn1cblxuZnVuY3Rpb24gc2hvdyhhKSB7XG4gIHJldHVybiBhO1xufVxuXG52YXIgU2hvdyA9IHtcbiAgc2hvdzogc2hvd1xufTtcblxuZnVuY3Rpb24gZXEoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cblxudmFyIEVxID0ge1xuICBlcTogZXFcbn07XG5cbnZhciBpbmNsdWRlJDIgPSBSZWx1ZGVfRXh0ZW5zaW9uc19FcS5FcUV4dGVuc2lvbnMoRXEpO1xuXG52YXIgY29tcGFyZSA9IFN0cmluZyRCc0Jhc3RldC5PcmQuY29tcGFyZTtcblxudmFyIE9yZCA9IHtcbiAgZXE6IGVxLFxuICBjb21wYXJlOiBjb21wYXJlXG59O1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfT3JkLk9yZEV4dGVuc2lvbnMoT3JkKTtcblxudmFyICQkTWFwID0gUmVsdWRlX01hcC5XaXRoT3JkKE9yZCk7XG5cbnZhciAkJFNldCA9IFJlbHVkZV9TZXQuV2l0aE9yZChPcmQpO1xuXG5mdW5jdGlvbiBlbmRzV2l0aChzZWFyY2gsIGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5lbmRzV2l0aChzZWFyY2gpO1xufVxuXG5mdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaCwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnN0YXJ0c1dpdGgoc2VhcmNoKTtcbn1cblxuZnVuY3Rpb24gY29udGFpbnMoc2VhcmNoLCBpbnB1dCkge1xuICByZXR1cm4gaW5wdXQuaW5jbHVkZXMoc2VhcmNoKTtcbn1cblxuZnVuY3Rpb24gaW5kZXhPZihzZWFyY2gsIGlucHV0KSB7XG4gIHZhciBpbmRleCA9IGlucHV0LmluZGV4T2Yoc2VhcmNoKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG59XG5cbmZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaCwgaW5wdXQpIHtcbiAgdmFyIGluZGV4ID0gaW5wdXQubGFzdEluZGV4T2Yoc2VhcmNoKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNsaWNlKGZyb21JbmRleCwgdG9JbmRleCwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnNsaWNlKGZyb21JbmRleCwgdG9JbmRleCk7XG59XG5cbmZ1bmN0aW9uIHNsaWNlVG9FbmQoZnJvbUluZGV4LCBzdHIpIHtcbiAgcmV0dXJuIHN0ci5zbGljZShmcm9tSW5kZXgpO1xufVxuXG5mdW5jdGlvbiBzcGxpdEFycmF5KGRlbGltaXRlciwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnNwbGl0KGRlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIHNwbGl0TGlzdChkZWxpbWl0ZXIsIGlucHV0KSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZnJvbUFycmF5KGlucHV0LnNwbGl0KGRlbGltaXRlcikpO1xufVxuXG5mdW5jdGlvbiBzcGxpdEF0KGluZGV4LCBpbnB1dCkge1xuICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgaW5wdXQuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgIGlucHV0LnNsaWNlKGluZGV4KVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtYXBDaGFycyhmLCBzdHIpIHtcbiAgcmV0dXJuIEN1cnJ5Ll8zKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mb2xkTWFwLCBNb25vaWQsIGYsIHRvTGlzdChzdHIpKTtcbn1cblxuZnVuY3Rpb24gcGFkU3RhcnQodGFyZ2V0TGVuZ3RoLCBwYWRXaXRoT3B0LCBpbnB1dCkge1xuICB2YXIgcGFkV2l0aCA9IHBhZFdpdGhPcHQgIT09IHVuZGVmaW5lZCA/IHBhZFdpdGhPcHQgOiBcIiBcIjtcbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICB2YXIgcGFkV2l0aExlbmd0aCA9IHBhZFdpdGgubGVuZ3RoO1xuICBpZiAoaW5wdXRMZW5ndGggPj0gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIGlmIChwYWRXaXRoTGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIHZhciBwYWRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSBpbnB1dExlbmd0aCB8IDA7XG4gIHZhciBwYWRUaW1lcyA9IENhbWxfaW50MzIuZGl2KHBhZExlbmd0aCwgcGFkV2l0aExlbmd0aCkgKyAxIHwgMDtcbiAgdmFyIHBhZCA9IHJlcGVhdChwYWRUaW1lcywgcGFkV2l0aCkuc2xpY2UoMCwgcGFkTGVuZ3RoKTtcbiAgcmV0dXJuIHBhZCArIGlucHV0O1xufVxuXG5mdW5jdGlvbiBwYWRFbmQodGFyZ2V0TGVuZ3RoLCBwYWRXaXRoT3B0LCBpbnB1dCkge1xuICB2YXIgcGFkV2l0aCA9IHBhZFdpdGhPcHQgIT09IHVuZGVmaW5lZCA/IHBhZFdpdGhPcHQgOiBcIiBcIjtcbiAgdmFyIGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuICB2YXIgcGFkV2l0aExlbmd0aCA9IHBhZFdpdGgubGVuZ3RoO1xuICBpZiAoaW5wdXRMZW5ndGggPj0gdGFyZ2V0TGVuZ3RoKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIGlmIChwYWRXaXRoTGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIHZhciBwYWRMZW5ndGggPSB0YXJnZXRMZW5ndGggLSBpbnB1dExlbmd0aCB8IDA7XG4gIHZhciBwYWRUaW1lcyA9IENhbWxfaW50MzIuZGl2KHBhZExlbmd0aCwgcGFkV2l0aExlbmd0aCkgKyAxIHwgMDtcbiAgdmFyIHBhZCA9IHJlcGVhdChwYWRUaW1lcywgcGFkV2l0aCkuc2xpY2UoMCwgcGFkTGVuZ3RoKTtcbiAgcmV0dXJuIGlucHV0ICsgcGFkO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlRmlyc3Qoc2VhcmNoLCByZXBsYWNlV2l0aCwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2Uoc2VhcmNoLCByZXBsYWNlV2l0aCk7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VFYWNoKHNlYXJjaCwgcmVwbGFjZVdpdGgsIGlucHV0KSB7XG4gIHJldHVybiAkJFN0cmluZy5jb25jYXQocmVwbGFjZVdpdGgsIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mcm9tQXJyYXkoaW5wdXQuc3BsaXQoc2VhcmNoKSkpO1xufVxuXG5mdW5jdGlvbiByZXBsYWNlUmVnZXgoc2VhcmNoLCByZXBsYWNlV2l0aCwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2Uoc2VhcmNoLCByZXBsYWNlV2l0aCk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0KHNlYXJjaCwgaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnJlcGxhY2Uoc2VhcmNoLCBcIlwiKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaChzZWFyY2gsIGlucHV0KSB7XG4gIHJldHVybiByZXBsYWNlRWFjaChzZWFyY2gsIFwiXCIsIGlucHV0KTtcbn1cblxuZnVuY3Rpb24gZnJvbUludChwcmltKSB7XG4gIHJldHVybiBTdHJpbmcocHJpbSk7XG59XG5cbmZ1bmN0aW9uIHRvSW50KHYpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gQ2FtbF9mb3JtYXQuY2FtbF9pbnRfb2Zfc3RyaW5nKHYpO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIHJldHVybiA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZnJvbUZsb2F0KHByaW0pIHtcbiAgcmV0dXJuIHByaW0udG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gdG9GbG9hdCh2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIENhbWxfZm9ybWF0LmNhbWxfZmxvYXRfb2Zfc3RyaW5nKHYpO1xuICB9XG4gIGNhdGNoIChleG4pe1xuICAgIHJldHVybiA7XG4gIH1cbn1cblxudmFyIGlzTm90RW1wdHkgPSBpc05vbkVtcHR5O1xuXG52YXIgY29uY2F0TmFtZWQgPSBpbmNsdWRlLmNvbmNhdE5hbWVkO1xuXG52YXIgQnNNb25vaWRFeHRlbnNpb25zID0gaW5jbHVkZSQxLkJzTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIGd1YXJkID0gaW5jbHVkZSQxLmd1YXJkO1xuXG52YXIgcG93ZXIgPSBpbmNsdWRlJDEucG93ZXI7XG5cbnZhciBlcVdpdGhDb252ZXJzaW9uID0gaW5jbHVkZSQyLmVxV2l0aENvbnZlcnNpb247XG5cbnZhciBub3RFcSA9IGluY2x1ZGUkMi5ub3RFcTtcblxudmFyIGVxSW52ZXJ0ZWQgPSBpbmNsdWRlJDIuZXFJbnZlcnRlZDtcblxudmFyIEVxSW52ZXJ0ZWQgPSBpbmNsdWRlJDIuRXFJbnZlcnRlZDtcblxudmFyIEVxQnkgPSBpbmNsdWRlJDIuRXFCeTtcblxudmFyIGNvbXBhcmVXaXRoQ29udmVyc2lvbiA9IGluY2x1ZGUkMy5jb21wYXJlV2l0aENvbnZlcnNpb247XG5cbnZhciBjb21wYXJlUmV2ZXJzZWQgPSBpbmNsdWRlJDMuY29tcGFyZVJldmVyc2VkO1xuXG52YXIgT3JkUmV2ZXJzZWQgPSBpbmNsdWRlJDMuT3JkUmV2ZXJzZWQ7XG5cbnZhciBjb21wYXJlQXNJbnQgPSBpbmNsdWRlJDMuY29tcGFyZUFzSW50O1xuXG52YXIgbWluID0gaW5jbHVkZSQzLm1pbjtcblxudmFyIG1heCA9IGluY2x1ZGUkMy5tYXg7XG5cbnZhciBsZXNzVGhhbiA9IGluY2x1ZGUkMy5sZXNzVGhhbjtcblxudmFyIGx0ID0gaW5jbHVkZSQzLmx0O1xuXG52YXIgbGVzc1RoYW5PckVxID0gaW5jbHVkZSQzLmxlc3NUaGFuT3JFcTtcblxudmFyIGx0ZSA9IGluY2x1ZGUkMy5sdGU7XG5cbnZhciBncmVhdGVyVGhhbiA9IGluY2x1ZGUkMy5ncmVhdGVyVGhhbjtcblxudmFyIGd0ID0gaW5jbHVkZSQzLmd0O1xuXG52YXIgZ3JlYXRlclRoYW5PckVxID0gaW5jbHVkZSQzLmdyZWF0ZXJUaGFuT3JFcTtcblxudmFyIGd0ZSA9IGluY2x1ZGUkMy5ndGU7XG5cbnZhciBjbGFtcCA9IGluY2x1ZGUkMy5jbGFtcDtcblxudmFyIGJldHdlZW4gPSBpbmNsdWRlJDMuYmV0d2VlbjtcblxudmFyIE9yZFJpbmdFeHRlbnNpb25zID0gaW5jbHVkZSQzLk9yZFJpbmdFeHRlbnNpb25zO1xuXG52YXIgT3JkTmFtZWQgPSBpbmNsdWRlJDMuT3JkTmFtZWQ7XG5cbnZhciBPcmRCeSA9IGluY2x1ZGUkMy5PcmRCeTtcblxudmFyIHNwbGl0QXNBcnJheSA9IHNwbGl0QXJyYXk7XG5cbnZhciBzcGxpdEFzTGlzdCA9IHNwbGl0TGlzdDtcblxuZXhwb3J0IHtcbiAgZW1wdHkgLFxuICBsZW5ndGggLFxuICBpc0VtcHR5ICxcbiAgaXNOb25FbXB0eSAsXG4gIGlzTm90RW1wdHkgLFxuICB0b05vbkVtcHR5ICxcbiAgdHJpbSAsXG4gIGlzV2hpdGVzcGFjZSAsXG4gIGlzTm9uV2hpdGVzcGFjZSAsXG4gIHRvTm9uV2hpdGVzcGFjZSAsXG4gIGNvbmNhdCAsXG4gIFNlbWlncm91cCAsXG4gIGNvbmNhdE5hbWVkICxcbiAgTW9ub2lkICxcbiAgQnNNb25vaWRFeHRlbnNpb25zICxcbiAgZ3VhcmQgLFxuICBwb3dlciAsXG4gIGNvbmNhdEFycmF5ICxcbiAgY29uY2F0TGlzdCAsXG4gIG1ha2UgLFxuICBtYWtlV2l0aEluZGV4ICxcbiAgcmVwZWF0ICxcbiAgdG9VcHBlckNhc2UgLFxuICB0b0xvd2VyQ2FzZSAsXG4gIGZyb21DaGFyQ29kZSAsXG4gIGNoYXJDb2RlQXQgLFxuICBjaGFyQXQgLFxuICBjaGFyQXRPckVtcHR5ICxcbiAgY2hhckF0TnVsbGFibGUgLFxuICBjaGFyQXRPclRocm93ICxcbiAgdG9MaXN0ICxcbiAgdG9BcnJheSAsXG4gIGZvbGRMZWZ0ICxcbiAgZm9sZFJpZ2h0ICxcbiAgc2hvdyAsXG4gIFNob3cgLFxuICBlcSAsXG4gIEVxICxcbiAgZXFXaXRoQ29udmVyc2lvbiAsXG4gIG5vdEVxICxcbiAgZXFJbnZlcnRlZCAsXG4gIEVxSW52ZXJ0ZWQgLFxuICBFcUJ5ICxcbiAgY29tcGFyZSAsXG4gIE9yZCAsXG4gIGNvbXBhcmVXaXRoQ29udmVyc2lvbiAsXG4gIGNvbXBhcmVSZXZlcnNlZCAsXG4gIE9yZFJldmVyc2VkICxcbiAgY29tcGFyZUFzSW50ICxcbiAgbWluICxcbiAgbWF4ICxcbiAgbGVzc1RoYW4gLFxuICBsdCAsXG4gIGxlc3NUaGFuT3JFcSAsXG4gIGx0ZSAsXG4gIGdyZWF0ZXJUaGFuICxcbiAgZ3QgLFxuICBncmVhdGVyVGhhbk9yRXEgLFxuICBndGUgLFxuICBjbGFtcCAsXG4gIGJldHdlZW4gLFxuICBPcmRSaW5nRXh0ZW5zaW9ucyAsXG4gIE9yZE5hbWVkICxcbiAgT3JkQnkgLFxuICAkJE1hcCAsXG4gICQkU2V0ICxcbiAgZW5kc1dpdGggLFxuICBzdGFydHNXaXRoICxcbiAgY29udGFpbnMgLFxuICBpbmRleE9mICxcbiAgbGFzdEluZGV4T2YgLFxuICBzbGljZSAsXG4gIHNsaWNlVG9FbmQgLFxuICBzcGxpdEFycmF5ICxcbiAgc3BsaXRBc0FycmF5ICxcbiAgc3BsaXRMaXN0ICxcbiAgc3BsaXRBc0xpc3QgLFxuICBzcGxpdEF0ICxcbiAgbWFwQ2hhcnMgLFxuICBwYWRTdGFydCAsXG4gIHBhZEVuZCAsXG4gIHJlcGxhY2VGaXJzdCAsXG4gIHJlcGxhY2VFYWNoICxcbiAgcmVwbGFjZVJlZ2V4ICxcbiAgcmVtb3ZlRmlyc3QgLFxuICByZW1vdmVFYWNoICxcbiAgZnJvbUludCAsXG4gIHRvSW50ICxcbiAgZnJvbUZsb2F0ICxcbiAgdG9GbG9hdCAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcIi4uL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0ludCBmcm9tIFwiLi4vUmVsdWRlX0ludC5icy5qc1wiO1xuaW1wb3J0ICogYXMgSW50JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GbG9hdCBmcm9tIFwiLi4vUmVsdWRlX0Zsb2F0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBMaXN0JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9MaXN0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfUmVzdWx0IGZyb20gXCIuLi9SZWx1ZGVfUmVzdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfU3RyaW5nIGZyb20gXCIuLi9SZWx1ZGVfU3RyaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBGbG9hdCRCc0Jhc3RldCBmcm9tIFwiYnMtYmFzdGV0L2Jhc3RldC9zcmMvRmxvYXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9Ob25FbXB0eSBmcm9tIFwiLi4vUmVsdWRlX05vbkVtcHR5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdF9CYXNlIGZyb20gXCIuL1JlbHVkZV9MaXN0X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9WYWxpZGF0aW9uIGZyb20gXCIuLi9SZWx1ZGVfVmFsaWRhdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfSW5zdGFuY2VzIGZyb20gXCIuL1JlbHVkZV9MaXN0X0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMgZnJvbSBcIi4uL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5icy5qc1wiO1xuXG5mdW5jdGlvbiBMaXN0RXFFeHRlbnNpb25zKEUpIHtcbiAgdmFyIGluY2x1ZGUgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIEUpO1xuICB2YXIgZGlzdGluY3QgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5kaXN0aW5jdEJ5KEUuZXEsIHBhcmFtKTtcbiAgfTtcbiAgdmFyIHJlbW92ZUZpcnN0ID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRmlyc3RCeShFLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaEJ5KEUuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIGVxID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5KEUuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBjb250YWluczogaW5jbHVkZS5jb250YWlucyxcbiAgICAgICAgICBpbmRleE9mOiBpbmNsdWRlLmluZGV4T2YsXG4gICAgICAgICAgZGlzdGluY3Q6IGRpc3RpbmN0LFxuICAgICAgICAgIHJlbW92ZUZpcnN0OiByZW1vdmVGaXJzdCxcbiAgICAgICAgICByZW1vdmVFYWNoOiByZW1vdmVFYWNoLFxuICAgICAgICAgIGVxOiBlcVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBMaXN0T3JkRXh0ZW5zaW9ucyhPKSB7XG4gIHZhciBpbmNsdWRlID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBPKTtcbiAgdmFyIGRpc3RpbmN0ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UuZGlzdGluY3RCeShPLmVxLCBwYXJhbSk7XG4gIH07XG4gIHZhciByZW1vdmVGaXJzdCA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUZpcnN0QnkoTy5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgcmVtb3ZlRWFjaCA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUVhY2hCeShPLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZXFCeShPLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBpbmNsdWRlJDEgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zLCBPKTtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5zb3J0QnkoTy5jb21wYXJlLCBwYXJhbSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgY29udGFpbnM6IGluY2x1ZGUuY29udGFpbnMsXG4gICAgICAgICAgaW5kZXhPZjogaW5jbHVkZS5pbmRleE9mLFxuICAgICAgICAgIGRpc3RpbmN0OiBkaXN0aW5jdCxcbiAgICAgICAgICByZW1vdmVGaXJzdDogcmVtb3ZlRmlyc3QsXG4gICAgICAgICAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCxcbiAgICAgICAgICBlcTogZXEsXG4gICAgICAgICAgbWluOiBpbmNsdWRlJDEubWluLFxuICAgICAgICAgIG1heDogaW5jbHVkZSQxLm1heCxcbiAgICAgICAgICBzb3J0OiBzb3J0XG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIExpc3RNb25vaWRFeHRlbnNpb25zKE0pIHtcbiAgcmV0dXJuIEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMsIE0pO1xufVxuXG52YXIgaW5jbHVkZSA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucywgUmVsdWRlX1N0cmluZy5PcmQpO1xuXG5mdW5jdGlvbiByZW1vdmVGaXJzdChwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVGaXJzdEJ5KFJlbHVkZV9TdHJpbmcuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVhY2gocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaEJ5KFJlbHVkZV9TdHJpbmcuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIGVxKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZXFCeShSZWx1ZGVfU3RyaW5nLk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgaW5jbHVkZSQxID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlT3JkRXh0ZW5zaW9ucywgUmVsdWRlX1N0cmluZy5PcmQpO1xuXG5mdW5jdGlvbiBzb3J0KHBhcmFtKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnNvcnRCeShSZWx1ZGVfU3RyaW5nLk9yZC5jb21wYXJlLCBwYXJhbSk7XG59XG5cbnZhciBpbmNsdWRlJDIgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zLCBSZWx1ZGVfU3RyaW5nLk1vbm9pZCk7XG5cbnZhciBmb2xkV2l0aE1vbm9pZCA9IGluY2x1ZGUkMi5mb2xkV2l0aE1vbm9pZDtcblxudmFyIGludGVyY2FsYXRlID0gaW5jbHVkZSQyLmludGVyY2FsYXRlO1xuXG5mdW5jdGlvbiBkaXN0aW5jdCh4cykge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZyb21BcnJheShPYmplY3Qua2V5cyhSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZExlZnQoKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjW2N1cnJdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB7IH0pKHhzKSkpO1xufVxuXG52YXIgU3RyaW5nX2NvbnRhaW5zID0gaW5jbHVkZS5jb250YWlucztcblxudmFyIFN0cmluZ19pbmRleE9mID0gaW5jbHVkZS5pbmRleE9mO1xuXG52YXIgU3RyaW5nX21pbiA9IGluY2x1ZGUkMS5taW47XG5cbnZhciBTdHJpbmdfbWF4ID0gaW5jbHVkZSQxLm1heDtcblxudmFyIFN0cmluZ19Cc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIFN0cmluZ19mb2xkTWFwID0gaW5jbHVkZSQyLmZvbGRNYXA7XG5cbnZhciAkJFN0cmluZyA9IHtcbiAgY29udGFpbnM6IFN0cmluZ19jb250YWlucyxcbiAgaW5kZXhPZjogU3RyaW5nX2luZGV4T2YsXG4gIHJlbW92ZUZpcnN0OiByZW1vdmVGaXJzdCxcbiAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCxcbiAgZXE6IGVxLFxuICBtaW46IFN0cmluZ19taW4sXG4gIG1heDogU3RyaW5nX21heCxcbiAgc29ydDogc29ydCxcbiAgQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnM6IFN0cmluZ19Cc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyxcbiAgZm9sZE1hcDogU3RyaW5nX2ZvbGRNYXAsXG4gIGZvbGRXaXRoTW9ub2lkOiBmb2xkV2l0aE1vbm9pZCxcbiAgaW50ZXJjYWxhdGU6IGludGVyY2FsYXRlLFxuICBqb2luOiBmb2xkV2l0aE1vbm9pZCxcbiAgam9pbldpdGg6IGludGVyY2FsYXRlLFxuICBkaXN0aW5jdDogZGlzdGluY3Rcbn07XG5cbnZhciBpbmNsdWRlJDMgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIFJlbHVkZV9JbnQuT3JkKTtcblxuZnVuY3Rpb24gZGlzdGluY3QkMShwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5kaXN0aW5jdEJ5KFJlbHVkZV9JbnQuT3JkLmVxLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUZpcnN0JDEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRmlyc3RCeShSZWx1ZGVfSW50Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoJDEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaEJ5KFJlbHVkZV9JbnQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIGVxJDEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5KFJlbHVkZV9JbnQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbnZhciBpbmNsdWRlJDQgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zLCBSZWx1ZGVfSW50Lk9yZCk7XG5cbmZ1bmN0aW9uIHNvcnQkMShwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5zb3J0QnkoUmVsdWRlX0ludC5PcmQuY29tcGFyZSwgcGFyYW0pO1xufVxuXG52YXIgc3VtID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRXaXRoTW9ub2lkLCBJbnQkQnNCYXN0ZXQuQWRkaXRpdmUuTW9ub2lkKTtcblxudmFyIHByb2R1Y3QgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEludCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5Nb25vaWQpO1xuXG52YXIgSW50X2NvbnRhaW5zID0gaW5jbHVkZSQzLmNvbnRhaW5zO1xuXG52YXIgSW50X2luZGV4T2YgPSBpbmNsdWRlJDMuaW5kZXhPZjtcblxudmFyIEludF9taW4gPSBpbmNsdWRlJDQubWluO1xuXG52YXIgSW50X21heCA9IGluY2x1ZGUkNC5tYXg7XG5cbnZhciBJbnQgPSB7XG4gIGNvbnRhaW5zOiBJbnRfY29udGFpbnMsXG4gIGluZGV4T2Y6IEludF9pbmRleE9mLFxuICBkaXN0aW5jdDogZGlzdGluY3QkMSxcbiAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0JDEsXG4gIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gkMSxcbiAgZXE6IGVxJDEsXG4gIG1pbjogSW50X21pbixcbiAgbWF4OiBJbnRfbWF4LFxuICBzb3J0OiBzb3J0JDEsXG4gIHN1bTogc3VtLFxuICBwcm9kdWN0OiBwcm9kdWN0XG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gQ3VycnkuXzEoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBSZWx1ZGVfRmxvYXQuT3JkKTtcblxuZnVuY3Rpb24gZGlzdGluY3QkMihwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5kaXN0aW5jdEJ5KFJlbHVkZV9GbG9hdC5PcmQuZXEsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3QkMihwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVGaXJzdEJ5KFJlbHVkZV9GbG9hdC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaCQyKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUVhY2hCeShSZWx1ZGVfRmxvYXQuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIGVxJDIocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5KFJlbHVkZV9GbG9hdC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxudmFyIGluY2x1ZGUkNiA9IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIFJlbHVkZV9GbG9hdC5PcmQpO1xuXG5mdW5jdGlvbiBzb3J0JDIocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9MaXN0X0Jhc2Uuc29ydEJ5KFJlbHVkZV9GbG9hdC5PcmQuY29tcGFyZSwgcGFyYW0pO1xufVxuXG52YXIgc3VtJDEgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEZsb2F0JEJzQmFzdGV0LkFkZGl0aXZlLk1vbm9pZCk7XG5cbnZhciBwcm9kdWN0JDEgPSBDdXJyeS5fMShSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZCk7XG5cbnZhciBGbG9hdF9jb250YWlucyA9IGluY2x1ZGUkNS5jb250YWlucztcblxudmFyIEZsb2F0X2luZGV4T2YgPSBpbmNsdWRlJDUuaW5kZXhPZjtcblxudmFyIEZsb2F0X21pbiA9IGluY2x1ZGUkNi5taW47XG5cbnZhciBGbG9hdF9tYXggPSBpbmNsdWRlJDYubWF4O1xuXG52YXIgRmxvYXQgPSB7XG4gIGNvbnRhaW5zOiBGbG9hdF9jb250YWlucyxcbiAgaW5kZXhPZjogRmxvYXRfaW5kZXhPZixcbiAgZGlzdGluY3Q6IGRpc3RpbmN0JDIsXG4gIHJlbW92ZUZpcnN0OiByZW1vdmVGaXJzdCQyLFxuICByZW1vdmVFYWNoOiByZW1vdmVFYWNoJDIsXG4gIGVxOiBlcSQyLFxuICBtaW46IEZsb2F0X21pbixcbiAgbWF4OiBGbG9hdF9tYXgsXG4gIHNvcnQ6IHNvcnQkMixcbiAgc3VtOiBzdW0kMSxcbiAgcHJvZHVjdDogcHJvZHVjdCQxXG59O1xuXG52YXIgaW5jbHVkZSQ3ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlRyYXZlcnNhYmxlKFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkFwcGxpY2F0aXZlKTtcblxudmFyICQkT3B0aW9uID0gaW5jbHVkZSQ3O1xuXG5mdW5jdGlvbiB0cmF2ZXJzZShmLCBsaXN0KSB7XG4gIHZhciBSZXN1bHRFID0gUmVsdWRlX1Jlc3VsdC5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlUmVzdWx0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlRyYXZlcnNhYmxlKFJlc3VsdEUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzIoVHJhdmVyc2VSZXN1bHQudHJhdmVyc2UsIGYsIGxpc3QpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW5jZSh4cykge1xuICB2YXIgUmVzdWx0RSA9IFJlbHVkZV9SZXN1bHQuV2l0aEVycm9yKHsgfSk7XG4gIHZhciBUcmF2ZXJzZVJlc3VsdCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5UcmF2ZXJzYWJsZShSZXN1bHRFLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8xKFRyYXZlcnNlUmVzdWx0LnNlcXVlbmNlLCB4cyk7XG59XG5cbnZhciBSZXN1bHQgPSB7XG4gIHRyYXZlcnNlOiB0cmF2ZXJzZSxcbiAgc2VxdWVuY2U6IHNlcXVlbmNlXG59O1xuXG5mdW5jdGlvbiB0cmF2ZXJzZSQxKGYsIGxpc3QpIHtcbiAgdmFyIElvRSA9IFJlbHVkZV9JTy5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlSU8gPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuVHJhdmVyc2FibGUoSW9FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFRyYXZlcnNlSU8udHJhdmVyc2UsIGYsIGxpc3QpO1xufVxuXG5mdW5jdGlvbiBzZXF1ZW5jZSQxKHhzKSB7XG4gIHZhciBJb0UgPSBSZWx1ZGVfSU8uV2l0aEVycm9yKHsgfSk7XG4gIHZhciBUcmF2ZXJzZUlPID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlRyYXZlcnNhYmxlKElvRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiBDdXJyeS5fMShUcmF2ZXJzZUlPLnNlcXVlbmNlLCB4cyk7XG59XG5cbnZhciBJTyA9IHtcbiAgdHJhdmVyc2U6IHRyYXZlcnNlJDEsXG4gIHNlcXVlbmNlOiBzZXF1ZW5jZSQxXG59O1xuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZShFcnJvcnMsICQkRXJyb3IpIHtcbiAgdmFyIFZhbGlkYXRpb25FID0gUmVsdWRlX1ZhbGlkYXRpb24uV2l0aEVycm9ycyhFcnJvcnMsICQkRXJyb3IpO1xuICB2YXIgaW5jbHVkZSA9IExpc3QkQnNCYXN0ZXQuVHJhdmVyc2FibGUoVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFZhbGlkYXRpb25FOiBWYWxpZGF0aW9uRSxcbiAgICAgICAgICBWYWxpZGF0aW9uRUFwcGxpY2F0aXZlOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWFwOiBpbmNsdWRlLm1hcCxcbiAgICAgICAgICBmb2xkX2xlZnQ6IGluY2x1ZGUuZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGluY2x1ZGUuZm9sZF9yaWdodCxcbiAgICAgICAgICBGb2xkX01hcDogaW5jbHVkZS5Gb2xkX01hcCxcbiAgICAgICAgICBGb2xkX01hcF9Bbnk6IGluY2x1ZGUuRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IGluY2x1ZGUuRm9sZF9NYXBfUGx1cyxcbiAgICAgICAgICB0cmF2ZXJzZTogaW5jbHVkZS50cmF2ZXJzZSxcbiAgICAgICAgICBzZXF1ZW5jZTogaW5jbHVkZS5zZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3QoJCRFcnJvcikge1xuICB2YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKFJlbHVkZV9MaXN0X0luc3RhbmNlcy5TZW1pZ3JvdXBBbnksICQkRXJyb3IpO1xuICB2YXIgaW5jbHVkZSA9IExpc3QkQnNCYXN0ZXQuVHJhdmVyc2FibGUoVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFZhbGlkYXRpb25FOiBWYWxpZGF0aW9uRSxcbiAgICAgICAgICBWYWxpZGF0aW9uRUFwcGxpY2F0aXZlOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWFwOiBpbmNsdWRlLm1hcCxcbiAgICAgICAgICBmb2xkX2xlZnQ6IGluY2x1ZGUuZm9sZF9sZWZ0LFxuICAgICAgICAgIGZvbGRfcmlnaHQ6IGluY2x1ZGUuZm9sZF9yaWdodCxcbiAgICAgICAgICBGb2xkX01hcDogaW5jbHVkZS5Gb2xkX01hcCxcbiAgICAgICAgICBGb2xkX01hcF9Bbnk6IGluY2x1ZGUuRm9sZF9NYXBfQW55LFxuICAgICAgICAgIEZvbGRfTWFwX1BsdXM6IGluY2x1ZGUuRm9sZF9NYXBfUGx1cyxcbiAgICAgICAgICB0cmF2ZXJzZTogaW5jbHVkZS50cmF2ZXJzZSxcbiAgICAgICAgICBzZXF1ZW5jZTogaW5jbHVkZS5zZXF1ZW5jZVxuICAgICAgICB9O1xufVxuXG52YXIgcGFyYW0gPSB7IH07XG5cbnZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNlbWlncm91cEFueSwgcGFyYW0pO1xuXG52YXIgaW5jbHVkZSQ4ID0gTGlzdCRCc0Jhc3RldC5UcmF2ZXJzYWJsZShWYWxpZGF0aW9uRS5BcHBsaWNhdGl2ZSk7XG5cbnZhciBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfbWFwID0gaW5jbHVkZSQ4Lm1hcDtcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19mb2xkX2xlZnQgPSBpbmNsdWRlJDguZm9sZF9sZWZ0O1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX2ZvbGRfcmlnaHQgPSBpbmNsdWRlJDguZm9sZF9yaWdodDtcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19Gb2xkX01hcCA9IGluY2x1ZGUkOC5Gb2xkX01hcDtcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19Gb2xkX01hcF9BbnkgPSBpbmNsdWRlJDguRm9sZF9NYXBfQW55O1xuXG52YXIgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX0ZvbGRfTWFwX1BsdXMgPSBpbmNsdWRlJDguRm9sZF9NYXBfUGx1cztcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc190cmF2ZXJzZSA9IGluY2x1ZGUkOC50cmF2ZXJzZTtcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19zZXF1ZW5jZSA9IGluY2x1ZGUkOC5zZXF1ZW5jZTtcblxudmFyIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5ncyA9IHtcbiAgVmFsaWRhdGlvbkU6IFZhbGlkYXRpb25FLFxuICBWYWxpZGF0aW9uRUFwcGxpY2F0aXZlOiB1bmRlZmluZWQsXG4gIG1hcDogVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzX21hcCxcbiAgZm9sZF9sZWZ0OiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfZm9sZF9sZWZ0LFxuICBmb2xkX3JpZ2h0OiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfZm9sZF9yaWdodCxcbiAgRm9sZF9NYXA6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19Gb2xkX01hcCxcbiAgRm9sZF9NYXBfQW55OiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfRm9sZF9NYXBfQW55LFxuICBGb2xkX01hcF9QbHVzOiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3NfRm9sZF9NYXBfUGx1cyxcbiAgdHJhdmVyc2U6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc190cmF2ZXJzZSxcbiAgc2VxdWVuY2U6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdE9mU3RyaW5nc19zZXF1ZW5jZVxufTtcblxuZnVuY3Rpb24gVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNOb25FbXB0eUxpc3QoJCRFcnJvcikge1xuICB2YXIgRXJyb3JzID0gUmVsdWRlX05vbkVtcHR5Lkxpc3QuU2VtaWdyb3VwQW55O1xuICB2YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKEVycm9ycywgJCRFcnJvcik7XG4gIHZhciBpbmNsdWRlID0gTGlzdCRCc0Jhc3RldC5UcmF2ZXJzYWJsZShWYWxpZGF0aW9uRS5BcHBsaWNhdGl2ZSk7XG4gIHJldHVybiB7XG4gICAgICAgICAgVmFsaWRhdGlvbkU6IFZhbGlkYXRpb25FLFxuICAgICAgICAgIFZhbGlkYXRpb25FQXBwbGljYXRpdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXA6IGluY2x1ZGUubWFwLFxuICAgICAgICAgIGZvbGRfbGVmdDogaW5jbHVkZS5mb2xkX2xlZnQsXG4gICAgICAgICAgZm9sZF9yaWdodDogaW5jbHVkZS5mb2xkX3JpZ2h0LFxuICAgICAgICAgIEZvbGRfTWFwOiBpbmNsdWRlLkZvbGRfTWFwLFxuICAgICAgICAgIEZvbGRfTWFwX0FueTogaW5jbHVkZS5Gb2xkX01hcF9BbnksXG4gICAgICAgICAgRm9sZF9NYXBfUGx1czogaW5jbHVkZS5Gb2xkX01hcF9QbHVzLFxuICAgICAgICAgIHRyYXZlcnNlOiBpbmNsdWRlLnRyYXZlcnNlLFxuICAgICAgICAgIHNlcXVlbmNlOiBpbmNsdWRlLnNlcXVlbmNlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHRyYXZlcnNlJDIoZiwgbGlzdCkge1xuICB2YXIgJCRFcnJvciA9IHsgfTtcbiAgdmFyIEVycm9ycyA9IFJlbHVkZV9Ob25FbXB0eS5MaXN0LlNlbWlncm91cEFueTtcbiAgdmFyIFZhbGlkYXRpb25FID0gUmVsdWRlX1ZhbGlkYXRpb24uV2l0aEVycm9ycyhFcnJvcnMsICQkRXJyb3IpO1xuICB2YXIgaW5jbHVkZSA9IExpc3QkQnNCYXN0ZXQuVHJhdmVyc2FibGUoVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICB2YXIgVHJhdmVyc2FibGVfbWFwID0gaW5jbHVkZS5tYXA7XG4gIHZhciBUcmF2ZXJzYWJsZV9mb2xkX2xlZnQgPSBpbmNsdWRlLmZvbGRfbGVmdDtcbiAgdmFyIFRyYXZlcnNhYmxlX2ZvbGRfcmlnaHQgPSBpbmNsdWRlLmZvbGRfcmlnaHQ7XG4gIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcCA9IGluY2x1ZGUuRm9sZF9NYXA7XG4gIHZhciBUcmF2ZXJzYWJsZV9Gb2xkX01hcF9BbnkgPSBpbmNsdWRlLkZvbGRfTWFwX0FueTtcbiAgdmFyIFRyYXZlcnNhYmxlX0ZvbGRfTWFwX1BsdXMgPSBpbmNsdWRlLkZvbGRfTWFwX1BsdXM7XG4gIHZhciBUcmF2ZXJzYWJsZV90cmF2ZXJzZSA9IGluY2x1ZGUudHJhdmVyc2U7XG4gIHZhciBUcmF2ZXJzYWJsZV9zZXF1ZW5jZSA9IGluY2x1ZGUuc2VxdWVuY2U7XG4gIHJldHVybiBDdXJyeS5fMihUcmF2ZXJzYWJsZV90cmF2ZXJzZSwgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9SZXN1bHQudG9WYWxpZGF0aW9uTmVsKEN1cnJ5Ll8xKGYsIGEpKTtcbiAgICAgICAgICAgICAgfSksIGxpc3QpO1xufVxuXG52YXIgVmFsaWRhdGlvbiA9IHtcbiAgVHJhdmVyc2FibGU6IFRyYXZlcnNhYmxlLFxuICBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3Q6IFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTGlzdCxcbiAgVHJhdmVyc2FibGVXaXRoRXJyb3JzQXNMaXN0T2ZTdHJpbmdzOiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc0xpc3RPZlN0cmluZ3MsXG4gIFRyYXZlcnNhYmxlV2l0aEVycm9yc0FzTm9uRW1wdHlMaXN0OiBUcmF2ZXJzYWJsZVdpdGhFcnJvcnNBc05vbkVtcHR5TGlzdCxcbiAgdHJhdmVyc2U6IHRyYXZlcnNlJDJcbn07XG5cbmV4cG9ydCB7XG4gIExpc3RFcUV4dGVuc2lvbnMgLFxuICBMaXN0T3JkRXh0ZW5zaW9ucyAsXG4gIExpc3RNb25vaWRFeHRlbnNpb25zICxcbiAgJCRTdHJpbmcgLFxuICBJbnQgLFxuICBGbG9hdCAsXG4gICQkT3B0aW9uICxcbiAgUmVzdWx0ICxcbiAgSU8gLFxuICBWYWxpZGF0aW9uICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfQmFzZSBmcm9tIFwiLi9saXN0L1JlbHVkZV9MaXN0X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FsdCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FsdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfSW5zdGFuY2VzIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BcHBseSBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0FwcGx5LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZCBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX01vbmFkLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zIGZyb20gXCIuL2xpc3QvUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLmJzLmpzXCI7XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3Rvci5GdW5jdG9ySW5maXgoUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZ1bmN0b3IpO1xuXG52YXIgaW5jbHVkZSQxID0gUmVsdWRlX0V4dGVuc2lvbnNfQWx0LkFsdEluZml4KFJlbHVkZV9MaXN0X0luc3RhbmNlcy5BbHQpO1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlJbmZpeChSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQXBwbHkpO1xuXG52YXIgaW5jbHVkZSQzID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRJbmZpeChSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuTW9uYWQpO1xuXG52YXIgSW5maXhfRnVuY3RvckV4dGVuc2lvbnMgPSBpbmNsdWRlLkZ1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGxlc3MkZG9sbGFyJGdyZWF0ID0gaW5jbHVkZS4kbGVzcyQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZS4kbGVzcyRoYXNoJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkZG9sbGFyID0gaW5jbHVkZS4kbGVzcyQ7XG5cbnZhciBJbmZpeF8kJGdyZWF0ID0gaW5jbHVkZS4kJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkYXQkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJGF0JGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkcGlwZSRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyRwaXBlJGdyZWF0O1xuXG52YXIgSW5maXhfQXBwbHlFeHRlbnNpb25zID0gaW5jbHVkZSQyLkFwcGx5RXh0ZW5zaW9ucztcblxudmFyIEluZml4XyRsZXNzJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDIuJGxlc3Mkc3RhciRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJHN0YXIgPSBpbmNsdWRlJDIuJGxlc3Mkc3RhcjtcblxudmFyIEluZml4XyRzdGFyJGdyZWF0ID0gaW5jbHVkZSQyLiRzdGFyJGdyZWF0O1xuXG52YXIgSW5maXhfTW9uYWRFeHRlbnNpb25zID0gaW5jbHVkZSQzLk1vbmFkRXh0ZW5zaW9ucztcblxudmFyIEluZml4XyRncmVhdCRncmVhdCRlcSA9IGluY2x1ZGUkMy4kZ3JlYXQkZ3JlYXQkZXE7XG5cbnZhciBJbmZpeF8kZXEkbGVzcyRsZXNzID0gaW5jbHVkZSQzLiRlcSRsZXNzJGxlc3M7XG5cbnZhciBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQgPSBpbmNsdWRlJDMuJGdyZWF0JGVxJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkZXEkbGVzcyA9IGluY2x1ZGUkMy4kbGVzcyRlcSRsZXNzO1xuXG52YXIgSW5maXggPSB7XG4gIEZ1bmN0b3JFeHRlbnNpb25zOiBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyxcbiAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICRsZXNzJDogSW5maXhfJGxlc3MkZG9sbGFyLFxuICAkJGdyZWF0OiBJbmZpeF8kJGdyZWF0LFxuICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICRsZXNzJHBpcGUkZ3JlYXQ6IEluZml4XyRsZXNzJHBpcGUkZ3JlYXQsXG4gIEFwcGx5RXh0ZW5zaW9uczogSW5maXhfQXBwbHlFeHRlbnNpb25zLFxuICAkbGVzcyRzdGFyJGdyZWF0OiBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0LFxuICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAkc3RhciRncmVhdDogSW5maXhfJHN0YXIkZ3JlYXQsXG4gIE1vbmFkRXh0ZW5zaW9uczogSW5maXhfTW9uYWRFeHRlbnNpb25zLFxuICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgJGVxJGxlc3MkbGVzczogSW5maXhfJGVxJGxlc3MkbGVzcyxcbiAgJGdyZWF0JGVxJGdyZWF0OiBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQsXG4gICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3Ncbn07XG5cbnZhciBjb25jYXQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29uY2F0O1xuXG52YXIgU2VtaWdyb3VwQW55ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNlbWlncm91cEFueTtcblxudmFyIGNvbmNhdE5hbWVkID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbmNhdE5hbWVkO1xuXG52YXIgZW1wdHkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZW1wdHk7XG5cbnZhciBNb25vaWRBbnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuTW9ub2lkQW55O1xuXG52YXIgZ3VhcmQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZ3VhcmQ7XG5cbnZhciBwb3dlciA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5wb3dlcjtcblxudmFyIG1hcCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5tYXA7XG5cbnZhciBGdW5jdG9yID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZ1bmN0b3I7XG5cbnZhciBCc0Z1bmN0b3JFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkJzRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBmbGlwTWFwID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZsaXBNYXA7XG5cbnZhciAkJHZvaWQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuJCR2b2lkO1xuXG52YXIgdm9pZFJpZ2h0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnZvaWRSaWdodDtcblxudmFyIHZvaWRMZWZ0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnZvaWRMZWZ0O1xuXG52YXIgZmxhcCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5mbGFwO1xuXG52YXIgYXBwbHkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYXBwbHk7XG5cbnZhciBBcHBseSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5BcHBseTtcblxudmFyIEJzQXBwbHlFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkJzQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgYXBwbHlGaXJzdCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5hcHBseUZpcnN0O1xuXG52YXIgYXBwbHlTZWNvbmQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYXBwbHlTZWNvbmQ7XG5cbnZhciBtYXAyID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcDI7XG5cbnZhciBtYXAzID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcDM7XG5cbnZhciBtYXA0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcDQ7XG5cbnZhciBtYXA1ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcDU7XG5cbnZhciB0dXBsZTIgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudHVwbGUyO1xuXG52YXIgdHVwbGUzID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnR1cGxlMztcblxudmFyIHR1cGxlNCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy50dXBsZTQ7XG5cbnZhciB0dXBsZTUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMudHVwbGU1O1xuXG52YXIgbWFwVHVwbGUyID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcFR1cGxlMjtcblxudmFyIG1hcFR1cGxlMyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5tYXBUdXBsZTM7XG5cbnZhciBtYXBUdXBsZTQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubWFwVHVwbGU0O1xuXG52YXIgbWFwVHVwbGU1ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1hcFR1cGxlNTtcblxudmFyIHB1cmUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMucHVyZTtcblxudmFyIEFwcGxpY2F0aXZlID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFwcGxpY2F0aXZlO1xuXG52YXIgQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBsaWZ0QTEgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMubGlmdEExO1xuXG52YXIgYmluZCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5iaW5kO1xuXG52YXIgTW9uYWQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuTW9uYWQ7XG5cbnZhciBCc01vbmFkRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Cc01vbmFkRXh0ZW5zaW9ucztcblxudmFyIGZsYXRNYXAgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZmxhdE1hcDtcblxudmFyIGZsYXR0ZW4gPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZmxhdHRlbjtcblxudmFyIGNvbXBvc2VLbGVpc2xpID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbXBvc2VLbGVpc2xpO1xuXG52YXIgZmxpcENvbXBvc2VLbGVpc2xpID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZsaXBDb21wb3NlS2xlaXNsaTtcblxudmFyIGxpZnRNMSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5saWZ0TTE7XG5cbnZhciB3aGVuXyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy53aGVuXztcblxudmFyIHVubGVzcyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy51bmxlc3M7XG5cbnZhciBhbHQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYWx0O1xuXG52YXIgQWx0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkFsdDtcblxudmFyIG9yRWxzZSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5vckVsc2U7XG5cbnZhciBQbHVzID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlBsdXM7XG5cbnZhciBBbHRlcm5hdGl2ZSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5BbHRlcm5hdGl2ZTtcblxudmFyIGZvbGRMZWZ0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRMZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRSaWdodDtcblxudmFyIEZvbGRhYmxlID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlO1xuXG52YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBhbnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuYW55O1xuXG52YXIgYWxsID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmFsbDtcblxudmFyIGNvbnRhaW5zQnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY29udGFpbnNCeTtcblxudmFyIGNvbnRhaW5zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmNvbnRhaW5zO1xuXG52YXIgaW5kZXhPZkJ5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmluZGV4T2ZCeTtcblxudmFyIGluZGV4T2YgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuaW5kZXhPZjtcblxudmFyIG1pbkJ5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1pbkJ5O1xuXG52YXIgbWluID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1pbjtcblxudmFyIG1heEJ5ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1heEJ5O1xuXG52YXIgbWF4ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLm1heDtcblxudmFyIGNvdW50QnkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuY291bnRCeTtcblxudmFyIGxlbmd0aCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5sZW5ndGg7XG5cbnZhciBzaXplID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnNpemU7XG5cbnZhciBjb3VudCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5jb3VudDtcblxudmFyIGZvckVhY2ggPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9yRWFjaDtcblxudmFyIGZvckVhY2hXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9yRWFjaFdpdGhJbmRleDtcblxudmFyIGZpbmQgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZmluZDtcblxudmFyIGZpbmRXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZmluZFdpdGhJbmRleDtcblxudmFyIHRvTGlzdCA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy50b0xpc3Q7XG5cbnZhciBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIGZvbGRNYXAgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZm9sZE1hcDtcblxudmFyIGZvbGRXaXRoTW9ub2lkID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLmZvbGRXaXRoTW9ub2lkO1xuXG52YXIgaW50ZXJjYWxhdGUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuaW50ZXJjYWxhdGU7XG5cbnZhciBGb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucyA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5Gb2xkYWJsZUFwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlTW9uYWRFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU9yZEV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zO1xuXG52YXIgdW5mb2xkID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnVuZm9sZDtcblxudmFyIFVuZm9sZGFibGUgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuVW5mb2xkYWJsZTtcblxudmFyIFRyYXZlcnNhYmxlID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlRyYXZlcnNhYmxlO1xuXG52YXIgZXFCeSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5lcUJ5O1xuXG52YXIgZXEgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZXE7XG5cbnZhciBFcSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5FcTtcblxudmFyIHNob3dCeSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy5zaG93Qnk7XG5cbnZhciBzaG93ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLnNob3c7XG5cbnZhciBTaG93ID0gUmVsdWRlX0xpc3RfSW5zdGFuY2VzLlNob3c7XG5cbnZhciBmcm9tQXJyYXkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuZnJvbUFycmF5O1xuXG52YXIgdG9BcnJheSA9IFJlbHVkZV9MaXN0X0luc3RhbmNlcy50b0FycmF5O1xuXG52YXIgSXNvQXJyYXkgPSBSZWx1ZGVfTGlzdF9JbnN0YW5jZXMuSXNvQXJyYXk7XG5cbnZhciBjb25zID0gUmVsdWRlX0xpc3RfQmFzZS5jb25zO1xuXG52YXIgcHJlcGVuZCA9IFJlbHVkZV9MaXN0X0Jhc2UucHJlcGVuZDtcblxudmFyIHVuY29ucyA9IFJlbHVkZV9MaXN0X0Jhc2UudW5jb25zO1xuXG52YXIgYXBwZW5kID0gUmVsdWRlX0xpc3RfQmFzZS5hcHBlbmQ7XG5cbnZhciByZXBlYXQgPSBSZWx1ZGVfTGlzdF9CYXNlLnJlcGVhdDtcblxudmFyIG1ha2VXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9CYXNlLm1ha2VXaXRoSW5kZXg7XG5cbnZhciBtYXBXaXRoSW5kZXggPSBSZWx1ZGVfTGlzdF9CYXNlLm1hcFdpdGhJbmRleDtcblxudmFyIHJldmVyc2UgPSBSZWx1ZGVfTGlzdF9CYXNlLnJldmVyc2U7XG5cbnZhciBzaHVmZmxlID0gUmVsdWRlX0xpc3RfQmFzZS5zaHVmZmxlO1xuXG52YXIgaXNFbXB0eSA9IFJlbHVkZV9MaXN0X0Jhc2UuaXNFbXB0eTtcblxudmFyIGlzTm90RW1wdHkgPSBSZWx1ZGVfTGlzdF9CYXNlLmlzTm90RW1wdHk7XG5cbnZhciBhdCA9IFJlbHVkZV9MaXN0X0Jhc2UuYXQ7XG5cbnZhciBoZWFkID0gUmVsdWRlX0xpc3RfQmFzZS5oZWFkO1xuXG52YXIgdGFpbCA9IFJlbHVkZV9MaXN0X0Jhc2UudGFpbDtcblxudmFyIHRhaWxPckVtcHR5ID0gUmVsdWRlX0xpc3RfQmFzZS50YWlsT3JFbXB0eTtcblxudmFyIGluaXQgPSBSZWx1ZGVfTGlzdF9CYXNlLmluaXQ7XG5cbnZhciBpbml0T3JFbXB0eSA9IFJlbHVkZV9MaXN0X0Jhc2UuaW5pdE9yRW1wdHk7XG5cbnZhciBsYXN0ID0gUmVsdWRlX0xpc3RfQmFzZS5sYXN0O1xuXG52YXIgdGFrZSA9IFJlbHVkZV9MaXN0X0Jhc2UudGFrZTtcblxudmFyIHRha2VFeGFjdGx5ID0gUmVsdWRlX0xpc3RfQmFzZS50YWtlRXhhY3RseTtcblxudmFyIHRha2VXaGlsZSA9IFJlbHVkZV9MaXN0X0Jhc2UudGFrZVdoaWxlO1xuXG52YXIgZHJvcCA9IFJlbHVkZV9MaXN0X0Jhc2UuZHJvcDtcblxudmFyIGRyb3BFeGFjdGx5ID0gUmVsdWRlX0xpc3RfQmFzZS5kcm9wRXhhY3RseTtcblxudmFyIGRyb3BXaGlsZSA9IFJlbHVkZV9MaXN0X0Jhc2UuZHJvcFdoaWxlO1xuXG52YXIgZmlsdGVyID0gUmVsdWRlX0xpc3RfQmFzZS5maWx0ZXI7XG5cbnZhciBrZWVwID0gUmVsdWRlX0xpc3RfQmFzZS5rZWVwO1xuXG52YXIgZmlsdGVyV2l0aEluZGV4ID0gUmVsdWRlX0xpc3RfQmFzZS5maWx0ZXJXaXRoSW5kZXg7XG5cbnZhciBrZWVwV2l0aEluZGV4ID0gUmVsdWRlX0xpc3RfQmFzZS5rZWVwV2l0aEluZGV4O1xuXG52YXIgZmlsdGVyTm90ID0gUmVsdWRlX0xpc3RfQmFzZS5maWx0ZXJOb3Q7XG5cbnZhciByZWplY3QgPSBSZWx1ZGVfTGlzdF9CYXNlLnJlamVjdDtcblxudmFyIGZpbHRlck5vdFdpdGhJbmRleCA9IFJlbHVkZV9MaXN0X0Jhc2UuZmlsdGVyTm90V2l0aEluZGV4O1xuXG52YXIgcmVqZWN0V2l0aEluZGV4ID0gUmVsdWRlX0xpc3RfQmFzZS5yZWplY3RXaXRoSW5kZXg7XG5cbnZhciBtYXBPcHRpb24gPSBSZWx1ZGVfTGlzdF9CYXNlLm1hcE9wdGlvbjtcblxudmFyIGNhdE9wdGlvbnMgPSBSZWx1ZGVfTGlzdF9CYXNlLmNhdE9wdGlvbnM7XG5cbnZhciBwYXJ0aXRpb24gPSBSZWx1ZGVfTGlzdF9CYXNlLnBhcnRpdGlvbjtcblxudmFyIHNwbGl0QXQgPSBSZWx1ZGVfTGlzdF9CYXNlLnNwbGl0QXQ7XG5cbnZhciBwcmVwZW5kVG9BbGwgPSBSZWx1ZGVfTGlzdF9CYXNlLnByZXBlbmRUb0FsbDtcblxudmFyIGludGVyc3BlcnNlID0gUmVsdWRlX0xpc3RfQmFzZS5pbnRlcnNwZXJzZTtcblxudmFyIHJlcGxpY2F0ZSA9IFJlbHVkZV9MaXN0X0Jhc2UucmVwbGljYXRlO1xuXG52YXIgemlwID0gUmVsdWRlX0xpc3RfQmFzZS56aXA7XG5cbnZhciB6aXBXaXRoID0gUmVsdWRlX0xpc3RfQmFzZS56aXBXaXRoO1xuXG52YXIgemlwV2l0aEluZGV4ID0gUmVsdWRlX0xpc3RfQmFzZS56aXBXaXRoSW5kZXg7XG5cbnZhciB1bnppcCA9IFJlbHVkZV9MaXN0X0Jhc2UudW56aXA7XG5cbnZhciBzb3J0V2l0aEludCA9IFJlbHVkZV9MaXN0X0Jhc2Uuc29ydFdpdGhJbnQ7XG5cbnZhciBzb3J0QnkgPSBSZWx1ZGVfTGlzdF9CYXNlLnNvcnRCeTtcblxudmFyIHNvcnQgPSBSZWx1ZGVfTGlzdF9CYXNlLnNvcnQ7XG5cbnZhciBkaXN0aW5jdEJ5ID0gUmVsdWRlX0xpc3RfQmFzZS5kaXN0aW5jdEJ5O1xuXG52YXIgcmVtb3ZlRmlyc3RCeSA9IFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRmlyc3RCeTtcblxudmFyIHJlbW92ZUVhY2hCeSA9IFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaEJ5O1xuXG52YXIgZGlzdGluY3QgPSBSZWx1ZGVfTGlzdF9CYXNlLmRpc3RpbmN0O1xuXG52YXIgcmVtb3ZlRmlyc3QgPSBSZWx1ZGVfTGlzdF9CYXNlLnJlbW92ZUZpcnN0O1xuXG52YXIgcmVtb3ZlRWFjaCA9IFJlbHVkZV9MaXN0X0Jhc2UucmVtb3ZlRWFjaDtcblxudmFyIHJlcGxhY2VBdCA9IFJlbHVkZV9MaXN0X0Jhc2UucmVwbGFjZUF0O1xuXG52YXIgc2NhbkxlZnQgPSBSZWx1ZGVfTGlzdF9CYXNlLnNjYW5MZWZ0O1xuXG52YXIgc2NhblJpZ2h0ID0gUmVsdWRlX0xpc3RfQmFzZS5zY2FuUmlnaHQ7XG5cbnZhciBpbnNlcnRBdCA9IFJlbHVkZV9MaXN0X0Jhc2UuaW5zZXJ0QXQ7XG5cbnZhciB1cGRhdGVBdCA9IFJlbHVkZV9MaXN0X0Jhc2UudXBkYXRlQXQ7XG5cbnZhciBzd2FwQXQgPSBSZWx1ZGVfTGlzdF9CYXNlLnN3YXBBdDtcblxudmFyIHJlbW92ZUF0ID0gUmVsdWRlX0xpc3RfQmFzZS5yZW1vdmVBdDtcblxudmFyIGNodW5rID0gUmVsdWRlX0xpc3RfQmFzZS5jaHVuaztcblxudmFyIExpc3RFcUV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuTGlzdEVxRXh0ZW5zaW9ucztcblxudmFyIExpc3RPcmRFeHRlbnNpb25zID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLkxpc3RPcmRFeHRlbnNpb25zO1xuXG52YXIgTGlzdE1vbm9pZEV4dGVuc2lvbnMgPSBSZWx1ZGVfTGlzdF9TcGVjaWFsaXphdGlvbnMuTGlzdE1vbm9pZEV4dGVuc2lvbnM7XG5cbnZhciAkJFN0cmluZyA9IFJlbHVkZV9MaXN0X1NwZWNpYWxpemF0aW9ucy4kJFN0cmluZztcblxudmFyIEludCA9IFJlbHVkZV9MaXN0X1NwZWNpYWxpemF0aW9ucy5JbnQ7XG5cbnZhciBGbG9hdCA9IFJlbHVkZV9MaXN0X1NwZWNpYWxpemF0aW9ucy5GbG9hdDtcblxudmFyICQkT3B0aW9uID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLiQkT3B0aW9uO1xuXG52YXIgUmVzdWx0ID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLlJlc3VsdDtcblxudmFyIElPID0gUmVsdWRlX0xpc3RfU3BlY2lhbGl6YXRpb25zLklPO1xuXG52YXIgVmFsaWRhdGlvbiA9IFJlbHVkZV9MaXN0X1NwZWNpYWxpemF0aW9ucy5WYWxpZGF0aW9uO1xuXG5leHBvcnQge1xuICBjb25jYXQgLFxuICBTZW1pZ3JvdXBBbnkgLFxuICBjb25jYXROYW1lZCAsXG4gIGVtcHR5ICxcbiAgTW9ub2lkQW55ICxcbiAgZ3VhcmQgLFxuICBwb3dlciAsXG4gIG1hcCAsXG4gIEZ1bmN0b3IgLFxuICBCc0Z1bmN0b3JFeHRlbnNpb25zICxcbiAgZmxpcE1hcCAsXG4gICQkdm9pZCAsXG4gIHZvaWRSaWdodCAsXG4gIHZvaWRMZWZ0ICxcbiAgZmxhcCAsXG4gIGFwcGx5ICxcbiAgQXBwbHkgLFxuICBCc0FwcGx5RXh0ZW5zaW9ucyAsXG4gIGFwcGx5Rmlyc3QgLFxuICBhcHBseVNlY29uZCAsXG4gIG1hcDIgLFxuICBtYXAzICxcbiAgbWFwNCAsXG4gIG1hcDUgLFxuICB0dXBsZTIgLFxuICB0dXBsZTMgLFxuICB0dXBsZTQgLFxuICB0dXBsZTUgLFxuICBtYXBUdXBsZTIgLFxuICBtYXBUdXBsZTMgLFxuICBtYXBUdXBsZTQgLFxuICBtYXBUdXBsZTUgLFxuICBwdXJlICxcbiAgQXBwbGljYXRpdmUgLFxuICBCc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucyAsXG4gIGxpZnRBMSAsXG4gIGJpbmQgLFxuICBNb25hZCAsXG4gIEJzTW9uYWRFeHRlbnNpb25zICxcbiAgZmxhdE1hcCAsXG4gIGZsYXR0ZW4gLFxuICBjb21wb3NlS2xlaXNsaSAsXG4gIGZsaXBDb21wb3NlS2xlaXNsaSAsXG4gIGxpZnRNMSAsXG4gIHdoZW5fICxcbiAgdW5sZXNzICxcbiAgYWx0ICxcbiAgQWx0ICxcbiAgb3JFbHNlICxcbiAgUGx1cyAsXG4gIEFsdGVybmF0aXZlICxcbiAgZm9sZExlZnQgLFxuICBmb2xkUmlnaHQgLFxuICBGb2xkYWJsZSAsXG4gIEJzRm9sZGFibGVFeHRlbnNpb25zICxcbiAgYW55ICxcbiAgYWxsICxcbiAgY29udGFpbnNCeSAsXG4gIGNvbnRhaW5zICxcbiAgaW5kZXhPZkJ5ICxcbiAgaW5kZXhPZiAsXG4gIG1pbkJ5ICxcbiAgbWluICxcbiAgbWF4QnkgLFxuICBtYXggLFxuICBjb3VudEJ5ICxcbiAgbGVuZ3RoICxcbiAgc2l6ZSAsXG4gIGNvdW50ICxcbiAgZm9yRWFjaCAsXG4gIGZvckVhY2hXaXRoSW5kZXggLFxuICBmaW5kICxcbiAgZmluZFdpdGhJbmRleCAsXG4gIHRvTGlzdCAsXG4gIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyAsXG4gIGZvbGRNYXAgLFxuICBmb2xkV2l0aE1vbm9pZCAsXG4gIGludGVyY2FsYXRlICxcbiAgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlRXFFeHRlbnNpb25zICxcbiAgRm9sZGFibGVPcmRFeHRlbnNpb25zICxcbiAgdW5mb2xkICxcbiAgVW5mb2xkYWJsZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgZXFCeSAsXG4gIGVxICxcbiAgRXEgLFxuICBzaG93QnkgLFxuICBzaG93ICxcbiAgU2hvdyAsXG4gIGZyb21BcnJheSAsXG4gIHRvQXJyYXkgLFxuICBJc29BcnJheSAsXG4gIGNvbnMgLFxuICBwcmVwZW5kICxcbiAgdW5jb25zICxcbiAgYXBwZW5kICxcbiAgcmVwZWF0ICxcbiAgbWFrZVdpdGhJbmRleCAsXG4gIG1hcFdpdGhJbmRleCAsXG4gIHJldmVyc2UgLFxuICBzaHVmZmxlICxcbiAgaXNFbXB0eSAsXG4gIGlzTm90RW1wdHkgLFxuICBhdCAsXG4gIGhlYWQgLFxuICB0YWlsICxcbiAgdGFpbE9yRW1wdHkgLFxuICBpbml0ICxcbiAgaW5pdE9yRW1wdHkgLFxuICBsYXN0ICxcbiAgdGFrZSAsXG4gIHRha2VFeGFjdGx5ICxcbiAgdGFrZVdoaWxlICxcbiAgZHJvcCAsXG4gIGRyb3BFeGFjdGx5ICxcbiAgZHJvcFdoaWxlICxcbiAgZmlsdGVyICxcbiAga2VlcCAsXG4gIGZpbHRlcldpdGhJbmRleCAsXG4gIGtlZXBXaXRoSW5kZXggLFxuICBmaWx0ZXJOb3QgLFxuICByZWplY3QgLFxuICBmaWx0ZXJOb3RXaXRoSW5kZXggLFxuICByZWplY3RXaXRoSW5kZXggLFxuICBtYXBPcHRpb24gLFxuICBjYXRPcHRpb25zICxcbiAgcGFydGl0aW9uICxcbiAgc3BsaXRBdCAsXG4gIHByZXBlbmRUb0FsbCAsXG4gIGludGVyc3BlcnNlICxcbiAgcmVwbGljYXRlICxcbiAgemlwICxcbiAgemlwV2l0aCAsXG4gIHppcFdpdGhJbmRleCAsXG4gIHVuemlwICxcbiAgc29ydFdpdGhJbnQgLFxuICBzb3J0QnkgLFxuICBzb3J0ICxcbiAgZGlzdGluY3RCeSAsXG4gIHJlbW92ZUZpcnN0QnkgLFxuICByZW1vdmVFYWNoQnkgLFxuICBkaXN0aW5jdCAsXG4gIHJlbW92ZUZpcnN0ICxcbiAgcmVtb3ZlRWFjaCAsXG4gIHJlcGxhY2VBdCAsXG4gIHNjYW5MZWZ0ICxcbiAgc2NhblJpZ2h0ICxcbiAgaW5zZXJ0QXQgLFxuICB1cGRhdGVBdCAsXG4gIHN3YXBBdCAsXG4gIHJlbW92ZUF0ICxcbiAgY2h1bmsgLFxuICBMaXN0RXFFeHRlbnNpb25zICxcbiAgTGlzdE9yZEV4dGVuc2lvbnMgLFxuICBMaXN0TW9ub2lkRXh0ZW5zaW9ucyAsXG4gICQkU3RyaW5nICxcbiAgSW50ICxcbiAgRmxvYXQgLFxuICAkJE9wdGlvbiAsXG4gIFJlc3VsdCAsXG4gIElPICxcbiAgVmFsaWRhdGlvbiAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwiLi4vUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCIuLi9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbnQkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0ludC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0Zsb2F0IGZyb20gXCIuLi9SZWx1ZGVfRmxvYXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9SZXN1bHQgZnJvbSBcIi4uL1JlbHVkZV9SZXN1bHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9TdHJpbmcgZnJvbSBcIi4uL1JlbHVkZV9TdHJpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIEFycmF5JEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9BcnJheS5icy5qc1wiO1xuaW1wb3J0ICogYXMgRmxvYXQkQnNCYXN0ZXQgZnJvbSBcImJzLWJhc3RldC9iYXN0ZXQvc3JjL0Zsb2F0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTm9uRW1wdHkgZnJvbSBcIi4uL1JlbHVkZV9Ob25FbXB0eS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0Jhc2UgZnJvbSBcIi4vUmVsdWRlX0FycmF5X0Jhc2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9WYWxpZGF0aW9uIGZyb20gXCIuLi9SZWx1ZGVfVmFsaWRhdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0FycmF5X0luc3RhbmNlcyBmcm9tIFwiLi9SZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcyBmcm9tIFwiLi4vb3B0aW9uL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIEFycmF5RXFFeHRlbnNpb25zKEUpIHtcbiAgdmFyIGluY2x1ZGUgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBFKTtcbiAgdmFyIGRpc3RpbmN0ID0gZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLmRpc3RpbmN0QnkoRS5lcSwgcGFyYW0pO1xuICB9O1xuICB2YXIgcmVtb3ZlRmlyc3QgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRmlyc3RCeShFLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciByZW1vdmVFYWNoID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUVhY2hCeShFLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG4gIH07XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxQnkoRS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRhaW5zOiBpbmNsdWRlLmNvbnRhaW5zLFxuICAgICAgICAgIGluZGV4T2Y6IGluY2x1ZGUuaW5kZXhPZixcbiAgICAgICAgICBkaXN0aW5jdDogZGlzdGluY3QsXG4gICAgICAgICAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0LFxuICAgICAgICAgIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gsXG4gICAgICAgICAgZXE6IGVxXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIEFycmF5T3JkRXh0ZW5zaW9ucyhPKSB7XG4gIHZhciBpbmNsdWRlID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucywgTyk7XG4gIHZhciBkaXN0aW5jdCA9IGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5kaXN0aW5jdEJ5KE8uZXEsIHBhcmFtKTtcbiAgfTtcbiAgdmFyIHJlbW92ZUZpcnN0ID0gZnVuY3Rpb24gKHBhcmFtLCBwYXJhbSQxKSB7XG4gICAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUZpcnN0QnkoTy5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgcmVtb3ZlRWFjaCA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVFYWNoQnkoTy5lcSwgcGFyYW0sIHBhcmFtJDEpO1xuICB9O1xuICB2YXIgZXEgPSBmdW5jdGlvbiAocGFyYW0sIHBhcmFtJDEpIHtcbiAgICByZXR1cm4gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5lcUJ5KE8uZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgdmFyIGluY2x1ZGUkMSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zLCBPKTtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2Uuc29ydEJ5KE8uY29tcGFyZSwgcGFyYW0pO1xuICB9O1xuICByZXR1cm4ge1xuICAgICAgICAgIGNvbnRhaW5zOiBpbmNsdWRlLmNvbnRhaW5zLFxuICAgICAgICAgIGluZGV4T2Y6IGluY2x1ZGUuaW5kZXhPZixcbiAgICAgICAgICBkaXN0aW5jdDogZGlzdGluY3QsXG4gICAgICAgICAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0LFxuICAgICAgICAgIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gsXG4gICAgICAgICAgZXE6IGVxLFxuICAgICAgICAgIG1pbjogaW5jbHVkZSQxLm1pbixcbiAgICAgICAgICBtYXg6IGluY2x1ZGUkMS5tYXgsXG4gICAgICAgICAgc29ydDogc29ydFxuICAgICAgICB9O1xufVxuXG5mdW5jdGlvbiBBcnJheU1vbm9pZEV4dGVuc2lvbnMoTSkge1xuICByZXR1cm4gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMsIE0pO1xufVxuXG52YXIgaW5jbHVkZSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVFcUV4dGVuc2lvbnMsIFJlbHVkZV9TdHJpbmcuT3JkKTtcblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3QocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUZpcnN0QnkoUmVsdWRlX1N0cmluZy5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaChwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRWFjaEJ5KFJlbHVkZV9TdHJpbmcuT3JkLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbmZ1bmN0aW9uIGVxKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxQnkoUmVsdWRlX1N0cmluZy5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxudmFyIGluY2x1ZGUkMSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zLCBSZWx1ZGVfU3RyaW5nLk9yZCk7XG5cbmZ1bmN0aW9uIHNvcnQocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnNvcnRCeShSZWx1ZGVfU3RyaW5nLk9yZC5jb21wYXJlLCBwYXJhbSk7XG59XG5cbnZhciBpbmNsdWRlJDIgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucywgUmVsdWRlX1N0cmluZy5Nb25vaWQpO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBpbmNsdWRlJDIuZm9sZFdpdGhNb25vaWQ7XG5cbnZhciBpbnRlcmNhbGF0ZSA9IGluY2x1ZGUkMi5pbnRlcmNhbGF0ZTtcblxuZnVuY3Rpb24gZGlzdGluY3QoeHMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKEN1cnJ5Ll8zKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZExlZnQsIChmdW5jdGlvbiAoYWNjLCBjdXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjY1tjdXJyXSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgICB9KSwgeyB9LCB4cykpO1xufVxuXG52YXIgU3RyaW5nX2NvbnRhaW5zID0gaW5jbHVkZS5jb250YWlucztcblxudmFyIFN0cmluZ19pbmRleE9mID0gaW5jbHVkZS5pbmRleE9mO1xuXG52YXIgU3RyaW5nX21pbiA9IGluY2x1ZGUkMS5taW47XG5cbnZhciBTdHJpbmdfbWF4ID0gaW5jbHVkZSQxLm1heDtcblxudmFyIFN0cmluZ19Cc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMi5Cc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucztcblxudmFyIFN0cmluZ19mb2xkTWFwID0gaW5jbHVkZSQyLmZvbGRNYXA7XG5cbnZhciAkJFN0cmluZyA9IHtcbiAgY29udGFpbnM6IFN0cmluZ19jb250YWlucyxcbiAgaW5kZXhPZjogU3RyaW5nX2luZGV4T2YsXG4gIHJlbW92ZUZpcnN0OiByZW1vdmVGaXJzdCxcbiAgcmVtb3ZlRWFjaDogcmVtb3ZlRWFjaCxcbiAgZXE6IGVxLFxuICBtaW46IFN0cmluZ19taW4sXG4gIG1heDogU3RyaW5nX21heCxcbiAgc29ydDogc29ydCxcbiAgQnNGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnM6IFN0cmluZ19Cc0ZvbGRhYmxlTW9ub2lkRXh0ZW5zaW9ucyxcbiAgZm9sZE1hcDogU3RyaW5nX2ZvbGRNYXAsXG4gIGZvbGRXaXRoTW9ub2lkOiBmb2xkV2l0aE1vbm9pZCxcbiAgaW50ZXJjYWxhdGU6IGludGVyY2FsYXRlLFxuICBqb2luOiBmb2xkV2l0aE1vbm9pZCxcbiAgam9pbldpdGg6IGludGVyY2FsYXRlLFxuICBkaXN0aW5jdDogZGlzdGluY3Rcbn07XG5cbnZhciBpbmNsdWRlJDMgPSBDdXJyeS5fMShSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zLCBSZWx1ZGVfSW50Lk9yZCk7XG5cbmZ1bmN0aW9uIGRpc3RpbmN0JDEocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLmRpc3RpbmN0QnkoUmVsdWRlX0ludC5PcmQuZXEsIHBhcmFtKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRmlyc3QkMShwYXJhbSwgcGFyYW0kMSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2UucmVtb3ZlRmlyc3RCeShSZWx1ZGVfSW50Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFYWNoJDEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUVhY2hCeShSZWx1ZGVfSW50Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiBlcSQxKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxQnkoUmVsdWRlX0ludC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxudmFyIGluY2x1ZGUkNCA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVPcmRFeHRlbnNpb25zLCBSZWx1ZGVfSW50Lk9yZCk7XG5cbmZ1bmN0aW9uIHNvcnQkMShwYXJhbSkge1xuICByZXR1cm4gUmVsdWRlX0FycmF5X0Jhc2Uuc29ydEJ5KFJlbHVkZV9JbnQuT3JkLmNvbXBhcmUsIHBhcmFtKTtcbn1cblxudmFyIHN1bSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEludCRCc0Jhc3RldC5BZGRpdGl2ZS5Nb25vaWQpO1xuXG52YXIgcHJvZHVjdCA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEludCRCc0Jhc3RldC5NdWx0aXBsaWNhdGl2ZS5Nb25vaWQpO1xuXG52YXIgSW50X2NvbnRhaW5zID0gaW5jbHVkZSQzLmNvbnRhaW5zO1xuXG52YXIgSW50X2luZGV4T2YgPSBpbmNsdWRlJDMuaW5kZXhPZjtcblxudmFyIEludF9taW4gPSBpbmNsdWRlJDQubWluO1xuXG52YXIgSW50X21heCA9IGluY2x1ZGUkNC5tYXg7XG5cbnZhciBJbnQgPSB7XG4gIGNvbnRhaW5zOiBJbnRfY29udGFpbnMsXG4gIGluZGV4T2Y6IEludF9pbmRleE9mLFxuICBkaXN0aW5jdDogZGlzdGluY3QkMSxcbiAgcmVtb3ZlRmlyc3Q6IHJlbW92ZUZpcnN0JDEsXG4gIHJlbW92ZUVhY2g6IHJlbW92ZUVhY2gkMSxcbiAgZXE6IGVxJDEsXG4gIG1pbjogSW50X21pbixcbiAgbWF4OiBJbnRfbWF4LFxuICBzb3J0OiBzb3J0JDEsXG4gIHN1bTogc3VtLFxuICBwcm9kdWN0OiBwcm9kdWN0XG59O1xuXG52YXIgaW5jbHVkZSQ1ID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucywgUmVsdWRlX0Zsb2F0Lk9yZCk7XG5cbmZ1bmN0aW9uIGRpc3RpbmN0JDIocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLmRpc3RpbmN0QnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0pO1xufVxuXG5mdW5jdGlvbiByZW1vdmVGaXJzdCQyKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVGaXJzdEJ5KFJlbHVkZV9GbG9hdC5PcmQuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWFjaCQyKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVFYWNoQnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG5mdW5jdGlvbiBlcSQyKHBhcmFtLCBwYXJhbSQxKSB7XG4gIHJldHVybiBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxQnkoUmVsdWRlX0Zsb2F0Lk9yZC5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgaW5jbHVkZSQ2ID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnMsIFJlbHVkZV9GbG9hdC5PcmQpO1xuXG5mdW5jdGlvbiBzb3J0JDIocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9BcnJheV9CYXNlLnNvcnRCeShSZWx1ZGVfRmxvYXQuT3JkLmNvbXBhcmUsIHBhcmFtKTtcbn1cblxudmFyIHN1bSQxID0gQ3VycnkuXzEoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkV2l0aE1vbm9pZCwgRmxvYXQkQnNCYXN0ZXQuQWRkaXRpdmUuTW9ub2lkKTtcblxudmFyIHByb2R1Y3QkMSA9IEN1cnJ5Ll8xKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZFdpdGhNb25vaWQsIEZsb2F0JEJzQmFzdGV0Lk11bHRpcGxpY2F0aXZlLk1vbm9pZCk7XG5cbnZhciBGbG9hdF9jb250YWlucyA9IGluY2x1ZGUkNS5jb250YWlucztcblxudmFyIEZsb2F0X2luZGV4T2YgPSBpbmNsdWRlJDUuaW5kZXhPZjtcblxudmFyIEZsb2F0X21pbiA9IGluY2x1ZGUkNi5taW47XG5cbnZhciBGbG9hdF9tYXggPSBpbmNsdWRlJDYubWF4O1xuXG52YXIgRmxvYXQgPSB7XG4gIGNvbnRhaW5zOiBGbG9hdF9jb250YWlucyxcbiAgaW5kZXhPZjogRmxvYXRfaW5kZXhPZixcbiAgZGlzdGluY3Q6IGRpc3RpbmN0JDIsXG4gIHJlbW92ZUZpcnN0OiByZW1vdmVGaXJzdCQyLFxuICByZW1vdmVFYWNoOiByZW1vdmVFYWNoJDIsXG4gIGVxOiBlcSQyLFxuICBtaW46IEZsb2F0X21pbixcbiAgbWF4OiBGbG9hdF9tYXgsXG4gIHNvcnQ6IHNvcnQkMixcbiAgc3VtOiBzdW0kMSxcbiAgcHJvZHVjdDogcHJvZHVjdCQxXG59O1xuXG52YXIgaW5jbHVkZSQ3ID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkFwcGxpY2F0aXZlKTtcblxudmFyICQkT3B0aW9uID0gaW5jbHVkZSQ3O1xuXG5mdW5jdGlvbiB0cmF2ZXJzZShmLCB4cykge1xuICB2YXIgUmVzdWx0RSA9IFJlbHVkZV9SZXN1bHQuV2l0aEVycm9yKHsgfSk7XG4gIHZhciBUcmF2ZXJzZVJlc3VsdCA9IEN1cnJ5Ll8xKEFycmF5JEJzQmFzdGV0LlRyYXZlcnNhYmxlLCBSZXN1bHRFLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFRyYXZlcnNlUmVzdWx0LnRyYXZlcnNlLCBmLCB4cyk7XG59XG5cbmZ1bmN0aW9uIHNlcXVlbmNlKHhzKSB7XG4gIHZhciBSZXN1bHRFID0gUmVsdWRlX1Jlc3VsdC5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlUmVzdWx0ID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFJlc3VsdEUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzEoVHJhdmVyc2VSZXN1bHQuc2VxdWVuY2UsIHhzKTtcbn1cblxudmFyIFJlc3VsdCA9IHtcbiAgdHJhdmVyc2U6IHRyYXZlcnNlLFxuICBzZXF1ZW5jZTogc2VxdWVuY2Vcbn07XG5cbmZ1bmN0aW9uIHRyYXZlcnNlJDEoZiwgeHMpIHtcbiAgdmFyIElvRSA9IFJlbHVkZV9JTy5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlSU8gPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgSW9FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFRyYXZlcnNlSU8udHJhdmVyc2UsIGYsIHhzKTtcbn1cblxuZnVuY3Rpb24gc2VxdWVuY2UkMSh4cykge1xuICB2YXIgSW9FID0gUmVsdWRlX0lPLldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VJTyA9IEN1cnJ5Ll8xKEFycmF5JEJzQmFzdGV0LlRyYXZlcnNhYmxlLCBJb0UuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzEoVHJhdmVyc2VJTy5zZXF1ZW5jZSwgeHMpO1xufVxuXG52YXIgSU8gPSB7XG4gIHRyYXZlcnNlOiB0cmF2ZXJzZSQxLFxuICBzZXF1ZW5jZTogc2VxdWVuY2UkMVxufTtcblxuZnVuY3Rpb24gV2l0aEVycm9ycyhFcnJvcnMsICQkRXJyb3IpIHtcbiAgdmFyIFZhbGlkYXRpb25FID0gUmVsdWRlX1ZhbGlkYXRpb24uV2l0aEVycm9ycyhFcnJvcnMsICQkRXJyb3IpO1xuICB2YXIgVHJhdmVyc2FibGUgPSBDdXJyeS5fMShBcnJheSRCc0Jhc3RldC5UcmF2ZXJzYWJsZSwgVmFsaWRhdGlvbkUuQXBwbGljYXRpdmUpO1xuICByZXR1cm4ge1xuICAgICAgICAgIFZhbGlkYXRpb25FOiBWYWxpZGF0aW9uRSxcbiAgICAgICAgICBUcmF2ZXJzYWJsZTogVHJhdmVyc2FibGVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gV2l0aEVycm9yc0FzQXJyYXkoJCRFcnJvcikge1xuICB2YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuU2VtaWdyb3VwQW55LCAkJEVycm9yKTtcbiAgdmFyIFRyYXZlcnNhYmxlID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFZhbGlkYXRpb25FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBWYWxpZGF0aW9uRTogVmFsaWRhdGlvbkUsXG4gICAgICAgICAgVHJhdmVyc2FibGU6IFRyYXZlcnNhYmxlXG4gICAgICAgIH07XG59XG5cbnZhciAkJEVycm9yID0geyB9O1xuXG52YXIgVmFsaWRhdGlvbkUgPSBSZWx1ZGVfVmFsaWRhdGlvbi5XaXRoRXJyb3JzKFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuU2VtaWdyb3VwQW55LCAkJEVycm9yKTtcblxudmFyIFRyYXZlcnNhYmxlID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFZhbGlkYXRpb25FLkFwcGxpY2F0aXZlKTtcblxudmFyIFdpdGhFcnJvcnNBc0FycmF5T2ZTdHJpbmdzID0ge1xuICBWYWxpZGF0aW9uRTogVmFsaWRhdGlvbkUsXG4gIFRyYXZlcnNhYmxlOiBUcmF2ZXJzYWJsZVxufTtcblxuZnVuY3Rpb24gV2l0aEVycm9yc0FzTm9uRW1wdHlBcnJheSgkJEVycm9yKSB7XG4gIHZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoUmVsdWRlX05vbkVtcHR5LiQkQXJyYXkuU2VtaWdyb3VwQW55LCAkJEVycm9yKTtcbiAgdmFyIFRyYXZlcnNhYmxlID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFZhbGlkYXRpb25FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBWYWxpZGF0aW9uRTogVmFsaWRhdGlvbkUsXG4gICAgICAgICAgVHJhdmVyc2FibGU6IFRyYXZlcnNhYmxlXG4gICAgICAgIH07XG59XG5cbmZ1bmN0aW9uIHRyYXZlcnNlJDIoZiwgYXJyYXkpIHtcbiAgdmFyICQkRXJyb3IgPSB7IH07XG4gIHZhciBWYWxpZGF0aW9uRSA9IFJlbHVkZV9WYWxpZGF0aW9uLldpdGhFcnJvcnMoUmVsdWRlX05vbkVtcHR5LiQkQXJyYXkuU2VtaWdyb3VwQW55LCAkJEVycm9yKTtcbiAgdmFyIFRyYXZlcnNhYmxlID0gQ3VycnkuXzEoQXJyYXkkQnNCYXN0ZXQuVHJhdmVyc2FibGUsIFZhbGlkYXRpb25FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFRyYXZlcnNhYmxlLnRyYXZlcnNlLCAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC50b1ZhbGlkYXRpb25OZWEoQ3VycnkuXzEoZiwgYSkpO1xuICAgICAgICAgICAgICB9KSwgYXJyYXkpO1xufVxuXG52YXIgVmFsaWRhdGlvbiA9IHtcbiAgV2l0aEVycm9yczogV2l0aEVycm9ycyxcbiAgV2l0aEVycm9yc0FzQXJyYXk6IFdpdGhFcnJvcnNBc0FycmF5LFxuICBXaXRoRXJyb3JzQXNBcnJheU9mU3RyaW5nczogV2l0aEVycm9yc0FzQXJyYXlPZlN0cmluZ3MsXG4gIFdpdGhFcnJvcnNBc05vbkVtcHR5QXJyYXk6IFdpdGhFcnJvcnNBc05vbkVtcHR5QXJyYXksXG4gIHRyYXZlcnNlOiB0cmF2ZXJzZSQyXG59O1xuXG5leHBvcnQge1xuICBBcnJheUVxRXh0ZW5zaW9ucyAsXG4gIEFycmF5T3JkRXh0ZW5zaW9ucyAsXG4gIEFycmF5TW9ub2lkRXh0ZW5zaW9ucyAsXG4gICQkU3RyaW5nICxcbiAgSW50ICxcbiAgRmxvYXQgLFxuICAkJE9wdGlvbiAsXG4gIFJlc3VsdCAsXG4gIElPICxcbiAgVmFsaWRhdGlvbiAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiXG5cbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9CYXNlIGZyb20gXCIuL2FycmF5L1JlbHVkZV9BcnJheV9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BbHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9JbnN0YW5jZXMgZnJvbSBcIi4vYXJyYXkvUmVsdWRlX0FycmF5X0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BcHBseS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19Nb25hZC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMgZnJvbSBcIi4vYXJyYXkvUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5icy5qc1wiO1xuXG52YXIgaW5jbHVkZSA9IFJlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuRnVuY3RvckluZml4KFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRnVuY3Rvcik7XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQuQWx0SW5maXgoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5BbHQpO1xuXG52YXIgaW5jbHVkZSQyID0gUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuQXBwbHlJbmZpeChSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkFwcGx5KTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX01vbmFkLk1vbmFkSW5maXgoUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Nb25hZCk7XG5cbnZhciBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUuRnVuY3RvckV4dGVuc2lvbnM7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJCRncmVhdDtcblxudmFyIEluZml4XyRsZXNzJGhhc2gkZ3JlYXQgPSBpbmNsdWRlLiRsZXNzJGhhc2gkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIgPSBpbmNsdWRlLiRsZXNzJDtcblxudmFyIEluZml4XyQkZ3JlYXQgPSBpbmNsdWRlLiQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRhdCRncmVhdCA9IGluY2x1ZGUuJGxlc3MkYXQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF9BcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDIuQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkMi4kbGVzcyRzdGFyJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciA9IGluY2x1ZGUkMi4kbGVzcyRzdGFyO1xuXG52YXIgSW5maXhfJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDIuJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeF9Nb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDMuTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGdyZWF0JGdyZWF0JGVxID0gaW5jbHVkZSQzLiRncmVhdCRncmVhdCRlcTtcblxudmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlJDMuJGVxJGxlc3MkbGVzcztcblxudmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUkMy4kZ3JlYXQkZXEkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRlcSRsZXNzID0gaW5jbHVkZSQzLiRsZXNzJGVxJGxlc3M7XG5cbnZhciBJbmZpeCA9IHtcbiAgRnVuY3RvckV4dGVuc2lvbnM6IEluZml4X0Z1bmN0b3JFeHRlbnNpb25zLFxuICAkbGVzcyQkZ3JlYXQ6IEluZml4XyRsZXNzJGRvbGxhciRncmVhdCxcbiAgJGxlc3MkaGFzaCRncmVhdDogSW5maXhfJGxlc3MkaGFzaCRncmVhdCxcbiAgJGxlc3MkOiBJbmZpeF8kbGVzcyRkb2xsYXIsXG4gICQkZ3JlYXQ6IEluZml4XyQkZ3JlYXQsXG4gICRsZXNzJGF0JGdyZWF0OiBJbmZpeF8kbGVzcyRhdCRncmVhdCxcbiAgJGxlc3MkcGlwZSRncmVhdDogSW5maXhfJGxlc3MkcGlwZSRncmVhdCxcbiAgQXBwbHlFeHRlbnNpb25zOiBJbmZpeF9BcHBseUV4dGVuc2lvbnMsXG4gICRsZXNzJHN0YXIkZ3JlYXQ6IEluZml4XyRsZXNzJHN0YXIkZ3JlYXQsXG4gICRsZXNzJHN0YXI6IEluZml4XyRsZXNzJHN0YXIsXG4gICRzdGFyJGdyZWF0OiBJbmZpeF8kc3RhciRncmVhdCxcbiAgTW9uYWRFeHRlbnNpb25zOiBJbmZpeF9Nb25hZEV4dGVuc2lvbnMsXG4gICRncmVhdCRncmVhdCRlcTogSW5maXhfJGdyZWF0JGdyZWF0JGVxLFxuICAkZXEkbGVzcyRsZXNzOiBJbmZpeF8kZXEkbGVzcyRsZXNzLFxuICAkZ3JlYXQkZXEkZ3JlYXQ6IEluZml4XyRncmVhdCRlcSRncmVhdCxcbiAgJGxlc3MkZXEkbGVzczogSW5maXhfJGxlc3MkZXEkbGVzc1xufTtcblxudmFyIGNvbmNhdCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0O1xuXG52YXIgU2VtaWdyb3VwQW55ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5TZW1pZ3JvdXBBbnk7XG5cbnZhciBjb25jYXROYW1lZCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29uY2F0TmFtZWQ7XG5cbnZhciBtYXAgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1hcDtcblxudmFyIEZ1bmN0b3IgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZ1bmN0b3I7XG5cbnZhciBCc0Z1bmN0b3JFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Cc0Z1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgZmxpcE1hcCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZmxpcE1hcDtcblxudmFyICQkdm9pZCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuJCR2b2lkO1xuXG52YXIgdm9pZFJpZ2h0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy52b2lkUmlnaHQ7XG5cbnZhciB2b2lkTGVmdCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMudm9pZExlZnQ7XG5cbnZhciBmbGFwID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mbGFwO1xuXG52YXIgYXBwbHkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmFwcGx5O1xuXG52YXIgQXBwbHkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkFwcGx5O1xuXG52YXIgQnNBcHBseUV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkJzQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgYXBwbHlGaXJzdCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuYXBwbHlGaXJzdDtcblxudmFyIGFwcGx5U2Vjb25kID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5hcHBseVNlY29uZDtcblxudmFyIG1hcDIgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1hcDI7XG5cbnZhciBtYXAzID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXAzO1xuXG52YXIgbWFwNCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwNDtcblxudmFyIG1hcDUgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1hcDU7XG5cbnZhciB0dXBsZTIgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnR1cGxlMjtcblxudmFyIHR1cGxlMyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMudHVwbGUzO1xuXG52YXIgdHVwbGU0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy50dXBsZTQ7XG5cbnZhciB0dXBsZTUgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnR1cGxlNTtcblxudmFyIG1hcFR1cGxlMiA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwVHVwbGUyO1xuXG52YXIgbWFwVHVwbGUzID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXBUdXBsZTM7XG5cbnZhciBtYXBUdXBsZTQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1hcFR1cGxlNDtcblxudmFyIG1hcFR1cGxlNSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWFwVHVwbGU1O1xuXG52YXIgcHVyZSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMucHVyZTtcblxudmFyIEFwcGxpY2F0aXZlID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5BcHBsaWNhdGl2ZTtcblxudmFyIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Cc0FwcGxpY2F0aXZlRXh0ZW5zaW9ucztcblxudmFyIGxpZnRBMSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubGlmdEExO1xuXG52YXIgYmluZCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuYmluZDtcblxudmFyIE1vbmFkID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Nb25hZDtcblxudmFyIEJzTW9uYWRFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Cc01vbmFkRXh0ZW5zaW9ucztcblxudmFyIGZsYXRNYXAgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZsYXRNYXA7XG5cbnZhciBmbGF0dGVuID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mbGF0dGVuO1xuXG52YXIgY29tcG9zZUtsZWlzbGkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbXBvc2VLbGVpc2xpO1xuXG52YXIgZmxpcENvbXBvc2VLbGVpc2xpID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mbGlwQ29tcG9zZUtsZWlzbGk7XG5cbnZhciBsaWZ0TTEgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmxpZnRNMTtcblxudmFyIHdoZW5fID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy53aGVuXztcblxudmFyIHVubGVzcyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMudW5sZXNzO1xuXG52YXIgYWx0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5hbHQ7XG5cbnZhciBBbHQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkFsdDtcblxudmFyIG9yRWxzZSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMub3JFbHNlO1xuXG52YXIgaW1hcCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuaW1hcDtcblxudmFyIEludmFyaWFudCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuSW52YXJpYW50O1xuXG52YXIgZXh0ZW5kID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5leHRlbmQ7XG5cbnZhciBFeHRlbmQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkV4dGVuZDtcblxudmFyIGZvbGRMZWZ0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkTGVmdDtcblxudmFyIGZvbGRSaWdodCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9sZFJpZ2h0O1xuXG52YXIgRm9sZGFibGUgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlO1xuXG52YXIgQnNGb2xkYWJsZUV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkJzRm9sZGFibGVFeHRlbnNpb25zO1xuXG52YXIgYW55ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5hbnk7XG5cbnZhciBhbGwgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmFsbDtcblxudmFyIGNvbnRhaW5zQnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmNvbnRhaW5zQnk7XG5cbnZhciBjb250YWlucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmluZGV4T2ZCeTtcblxudmFyIGluZGV4T2YgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmluZGV4T2Y7XG5cbnZhciBtaW5CeSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWluQnk7XG5cbnZhciBtaW4gPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLm1pbjtcblxudmFyIG1heEJ5ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5tYXhCeTtcblxudmFyIG1heCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMubWF4O1xuXG52YXIgY291bnRCeSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY291bnRCeTtcblxudmFyIHNpemUgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnNpemU7XG5cbnZhciBjb3VudCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuY291bnQ7XG5cbnZhciBmb3JFYWNoID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb3JFYWNoO1xuXG52YXIgZm9yRWFjaFdpdGhJbmRleCA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuZm9yRWFjaFdpdGhJbmRleDtcblxudmFyIGZpbmQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZpbmQ7XG5cbnZhciBmaW5kV2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5maW5kV2l0aEluZGV4O1xuXG52YXIgdG9BcnJheSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMudG9BcnJheTtcblxudmFyIEZvbGRhYmxlU2VtaWdyb3VwRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnM7XG5cbnZhciBmb2xkTWFwID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5mb2xkTWFwO1xuXG52YXIgZm9sZFdpdGhNb25vaWQgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZvbGRXaXRoTW9ub2lkO1xuXG52YXIgaW50ZXJjYWxhdGUgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmludGVyY2FsYXRlO1xuXG52YXIgRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkZvbGRhYmxlRXFFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVPcmRFeHRlbnNpb25zID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Gb2xkYWJsZU9yZEV4dGVuc2lvbnM7XG5cbnZhciBUcmF2ZXJzYWJsZSA9IFJlbHVkZV9BcnJheV9JbnN0YW5jZXMuVHJhdmVyc2FibGU7XG5cbnZhciBlcUJ5ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5lcUJ5O1xuXG52YXIgZXEgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmVxO1xuXG52YXIgRXEgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLkVxO1xuXG52YXIgT3JkID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5PcmQ7XG5cbnZhciBzaG93QnkgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnNob3dCeTtcblxudmFyIHNob3cgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLnNob3c7XG5cbnZhciBTaG93ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5TaG93O1xuXG52YXIgZnJvbUxpc3QgPSBSZWx1ZGVfQXJyYXlfSW5zdGFuY2VzLmZyb21MaXN0O1xuXG52YXIgdG9MaXN0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy50b0xpc3Q7XG5cbnZhciBJc29MaXN0ID0gUmVsdWRlX0FycmF5X0luc3RhbmNlcy5Jc29MaXN0O1xuXG52YXIgY29ucyA9IFJlbHVkZV9BcnJheV9CYXNlLmNvbnM7XG5cbnZhciBwcmVwZW5kID0gUmVsdWRlX0FycmF5X0Jhc2UucHJlcGVuZDtcblxudmFyIHVuY29ucyA9IFJlbHVkZV9BcnJheV9CYXNlLnVuY29ucztcblxudmFyIGFwcGVuZCA9IFJlbHVkZV9BcnJheV9CYXNlLmFwcGVuZDtcblxudmFyIHJlcGVhdCA9IFJlbHVkZV9BcnJheV9CYXNlLnJlcGVhdDtcblxudmFyIG1ha2VXaXRoSW5kZXggPSBSZWx1ZGVfQXJyYXlfQmFzZS5tYWtlV2l0aEluZGV4O1xuXG52YXIgbWFwV2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0Jhc2UubWFwV2l0aEluZGV4O1xuXG52YXIgcmV2ZXJzZSA9IFJlbHVkZV9BcnJheV9CYXNlLnJldmVyc2U7XG5cbnZhciBzaHVmZmxlSW5QbGFjZSA9IFJlbHVkZV9BcnJheV9CYXNlLnNodWZmbGVJblBsYWNlO1xuXG52YXIgc2h1ZmZsZSA9IFJlbHVkZV9BcnJheV9CYXNlLnNodWZmbGU7XG5cbnZhciBsZW5ndGggPSBSZWx1ZGVfQXJyYXlfQmFzZS5sZW5ndGg7XG5cbnZhciBpc0VtcHR5ID0gUmVsdWRlX0FycmF5X0Jhc2UuaXNFbXB0eTtcblxudmFyIGlzTm90RW1wdHkgPSBSZWx1ZGVfQXJyYXlfQmFzZS5pc05vdEVtcHR5O1xuXG52YXIgYXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5hdDtcblxudmFyIHNldEF0ID0gUmVsdWRlX0FycmF5X0Jhc2Uuc2V0QXQ7XG5cbnZhciBoZWFkID0gUmVsdWRlX0FycmF5X0Jhc2UuaGVhZDtcblxudmFyIHRhaWwgPSBSZWx1ZGVfQXJyYXlfQmFzZS50YWlsO1xuXG52YXIgdGFpbE9yRW1wdHkgPSBSZWx1ZGVfQXJyYXlfQmFzZS50YWlsT3JFbXB0eTtcblxudmFyIGluaXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5pbml0O1xuXG52YXIgaW5pdE9yRW1wdHkgPSBSZWx1ZGVfQXJyYXlfQmFzZS5pbml0T3JFbXB0eTtcblxudmFyIGxhc3QgPSBSZWx1ZGVfQXJyYXlfQmFzZS5sYXN0O1xuXG52YXIgdGFrZSA9IFJlbHVkZV9BcnJheV9CYXNlLnRha2U7XG5cbnZhciB0YWtlRXhhY3RseSA9IFJlbHVkZV9BcnJheV9CYXNlLnRha2VFeGFjdGx5O1xuXG52YXIgdGFrZVdoaWxlID0gUmVsdWRlX0FycmF5X0Jhc2UudGFrZVdoaWxlO1xuXG52YXIgZHJvcCA9IFJlbHVkZV9BcnJheV9CYXNlLmRyb3A7XG5cbnZhciBkcm9wRXhhY3RseSA9IFJlbHVkZV9BcnJheV9CYXNlLmRyb3BFeGFjdGx5O1xuXG52YXIgZHJvcFdoaWxlID0gUmVsdWRlX0FycmF5X0Jhc2UuZHJvcFdoaWxlO1xuXG52YXIgZmlsdGVyID0gUmVsdWRlX0FycmF5X0Jhc2UuZmlsdGVyO1xuXG52YXIga2VlcCA9IFJlbHVkZV9BcnJheV9CYXNlLmtlZXA7XG5cbnZhciBmaWx0ZXJXaXRoSW5kZXggPSBSZWx1ZGVfQXJyYXlfQmFzZS5maWx0ZXJXaXRoSW5kZXg7XG5cbnZhciBrZWVwV2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0Jhc2Uua2VlcFdpdGhJbmRleDtcblxudmFyIGZpbHRlck5vdCA9IFJlbHVkZV9BcnJheV9CYXNlLmZpbHRlck5vdDtcblxudmFyIHJlamVjdCA9IFJlbHVkZV9BcnJheV9CYXNlLnJlamVjdDtcblxudmFyIGZpbHRlck5vdFdpdGhJbmRleCA9IFJlbHVkZV9BcnJheV9CYXNlLmZpbHRlck5vdFdpdGhJbmRleDtcblxudmFyIHJlamVjdFdpdGhJbmRleCA9IFJlbHVkZV9BcnJheV9CYXNlLnJlamVjdFdpdGhJbmRleDtcblxudmFyIG1hcE9wdGlvbiA9IFJlbHVkZV9BcnJheV9CYXNlLm1hcE9wdGlvbjtcblxudmFyIGNhdE9wdGlvbiA9IFJlbHVkZV9BcnJheV9CYXNlLmNhdE9wdGlvbjtcblxudmFyIHBhcnRpdGlvbiA9IFJlbHVkZV9BcnJheV9CYXNlLnBhcnRpdGlvbjtcblxudmFyIHNwbGl0QXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zcGxpdEF0O1xuXG52YXIgcHJlcGVuZFRvQWxsID0gUmVsdWRlX0FycmF5X0Jhc2UucHJlcGVuZFRvQWxsO1xuXG52YXIgaW50ZXJzcGVyc2UgPSBSZWx1ZGVfQXJyYXlfQmFzZS5pbnRlcnNwZXJzZTtcblxudmFyIHJlcGxpY2F0ZSA9IFJlbHVkZV9BcnJheV9CYXNlLnJlcGxpY2F0ZTtcblxudmFyIHppcCA9IFJlbHVkZV9BcnJheV9CYXNlLnppcDtcblxudmFyIHppcFdpdGggPSBSZWx1ZGVfQXJyYXlfQmFzZS56aXBXaXRoO1xuXG52YXIgemlwV2l0aEluZGV4ID0gUmVsdWRlX0FycmF5X0Jhc2UuemlwV2l0aEluZGV4O1xuXG52YXIgdW56aXAgPSBSZWx1ZGVfQXJyYXlfQmFzZS51bnppcDtcblxudmFyIHNvcnRXaXRoSW50ID0gUmVsdWRlX0FycmF5X0Jhc2Uuc29ydFdpdGhJbnQ7XG5cbnZhciBzb3J0QnkgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zb3J0Qnk7XG5cbnZhciBzb3J0ID0gUmVsdWRlX0FycmF5X0Jhc2Uuc29ydDtcblxudmFyIGRpc3RpbmN0QnkgPSBSZWx1ZGVfQXJyYXlfQmFzZS5kaXN0aW5jdEJ5O1xuXG52YXIgcmVtb3ZlRmlyc3RCeSA9IFJlbHVkZV9BcnJheV9CYXNlLnJlbW92ZUZpcnN0Qnk7XG5cbnZhciByZW1vdmVFYWNoQnkgPSBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVFYWNoQnk7XG5cbnZhciBkaXN0aW5jdCA9IFJlbHVkZV9BcnJheV9CYXNlLmRpc3RpbmN0O1xuXG52YXIgcmVtb3ZlRmlyc3QgPSBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVGaXJzdDtcblxudmFyIHJlbW92ZUVhY2ggPSBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVFYWNoO1xuXG52YXIgcmVwbGFjZUF0ID0gUmVsdWRlX0FycmF5X0Jhc2UucmVwbGFjZUF0O1xuXG52YXIgc2NhbkxlZnQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5zY2FuTGVmdDtcblxudmFyIHNjYW5SaWdodCA9IFJlbHVkZV9BcnJheV9CYXNlLnNjYW5SaWdodDtcblxudmFyIGluc2VydEF0ID0gUmVsdWRlX0FycmF5X0Jhc2UuaW5zZXJ0QXQ7XG5cbnZhciB1cGRhdGVBdCA9IFJlbHVkZV9BcnJheV9CYXNlLnVwZGF0ZUF0O1xuXG52YXIgc3dhcEF0ID0gUmVsdWRlX0FycmF5X0Jhc2Uuc3dhcEF0O1xuXG52YXIgcmVtb3ZlQXQgPSBSZWx1ZGVfQXJyYXlfQmFzZS5yZW1vdmVBdDtcblxudmFyIGNodW5rID0gUmVsdWRlX0FycmF5X0Jhc2UuY2h1bms7XG5cbnZhciBBcnJheUVxRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuQXJyYXlFcUV4dGVuc2lvbnM7XG5cbnZhciBBcnJheU9yZEV4dGVuc2lvbnMgPSBSZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLkFycmF5T3JkRXh0ZW5zaW9ucztcblxudmFyIEFycmF5TW9ub2lkRXh0ZW5zaW9ucyA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuQXJyYXlNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgJCRTdHJpbmcgPSBSZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLiQkU3RyaW5nO1xuXG52YXIgSW50ID0gUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5JbnQ7XG5cbnZhciBGbG9hdCA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuRmxvYXQ7XG5cbnZhciAkJE9wdGlvbiA9IFJlbHVkZV9BcnJheV9TcGVjaWFsaXphdGlvbnMuJCRPcHRpb247XG5cbnZhciBSZXN1bHQgPSBSZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLlJlc3VsdDtcblxudmFyIElPID0gUmVsdWRlX0FycmF5X1NwZWNpYWxpemF0aW9ucy5JTztcblxudmFyIFZhbGlkYXRpb24gPSBSZWx1ZGVfQXJyYXlfU3BlY2lhbGl6YXRpb25zLlZhbGlkYXRpb247XG5cbmV4cG9ydCB7XG4gIGNvbmNhdCAsXG4gIFNlbWlncm91cEFueSAsXG4gIGNvbmNhdE5hbWVkICxcbiAgbWFwICxcbiAgRnVuY3RvciAsXG4gIEJzRnVuY3RvckV4dGVuc2lvbnMgLFxuICBmbGlwTWFwICxcbiAgJCR2b2lkICxcbiAgdm9pZFJpZ2h0ICxcbiAgdm9pZExlZnQgLFxuICBmbGFwICxcbiAgYXBwbHkgLFxuICBBcHBseSAsXG4gIEJzQXBwbHlFeHRlbnNpb25zICxcbiAgYXBwbHlGaXJzdCAsXG4gIGFwcGx5U2Vjb25kICxcbiAgbWFwMiAsXG4gIG1hcDMgLFxuICBtYXA0ICxcbiAgbWFwNSAsXG4gIHR1cGxlMiAsXG4gIHR1cGxlMyAsXG4gIHR1cGxlNCAsXG4gIHR1cGxlNSAsXG4gIG1hcFR1cGxlMiAsXG4gIG1hcFR1cGxlMyAsXG4gIG1hcFR1cGxlNCAsXG4gIG1hcFR1cGxlNSAsXG4gIHB1cmUgLFxuICBBcHBsaWNhdGl2ZSAsXG4gIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgbGlmdEExICxcbiAgYmluZCAsXG4gIE1vbmFkICxcbiAgQnNNb25hZEV4dGVuc2lvbnMgLFxuICBmbGF0TWFwICxcbiAgZmxhdHRlbiAsXG4gIGNvbXBvc2VLbGVpc2xpICxcbiAgZmxpcENvbXBvc2VLbGVpc2xpICxcbiAgbGlmdE0xICxcbiAgd2hlbl8gLFxuICB1bmxlc3MgLFxuICBhbHQgLFxuICBBbHQgLFxuICBvckVsc2UgLFxuICBpbWFwICxcbiAgSW52YXJpYW50ICxcbiAgZXh0ZW5kICxcbiAgRXh0ZW5kICxcbiAgZm9sZExlZnQgLFxuICBmb2xkUmlnaHQgLFxuICBGb2xkYWJsZSAsXG4gIEJzRm9sZGFibGVFeHRlbnNpb25zICxcbiAgYW55ICxcbiAgYWxsICxcbiAgY29udGFpbnNCeSAsXG4gIGNvbnRhaW5zICxcbiAgaW5kZXhPZkJ5ICxcbiAgaW5kZXhPZiAsXG4gIG1pbkJ5ICxcbiAgbWluICxcbiAgbWF4QnkgLFxuICBtYXggLFxuICBjb3VudEJ5ICxcbiAgc2l6ZSAsXG4gIGNvdW50ICxcbiAgZm9yRWFjaCAsXG4gIGZvckVhY2hXaXRoSW5kZXggLFxuICBmaW5kICxcbiAgZmluZFdpdGhJbmRleCAsXG4gIHRvQXJyYXkgLFxuICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgLFxuICBmb2xkTWFwICxcbiAgZm9sZFdpdGhNb25vaWQgLFxuICBpbnRlcmNhbGF0ZSAsXG4gIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZUVxRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyAsXG4gIFRyYXZlcnNhYmxlICxcbiAgZXFCeSAsXG4gIGVxICxcbiAgRXEgLFxuICBPcmQgLFxuICBzaG93QnkgLFxuICBzaG93ICxcbiAgU2hvdyAsXG4gIGZyb21MaXN0ICxcbiAgdG9MaXN0ICxcbiAgSXNvTGlzdCAsXG4gIGNvbnMgLFxuICBwcmVwZW5kICxcbiAgdW5jb25zICxcbiAgYXBwZW5kICxcbiAgcmVwZWF0ICxcbiAgbWFrZVdpdGhJbmRleCAsXG4gIG1hcFdpdGhJbmRleCAsXG4gIHJldmVyc2UgLFxuICBzaHVmZmxlSW5QbGFjZSAsXG4gIHNodWZmbGUgLFxuICBsZW5ndGggLFxuICBpc0VtcHR5ICxcbiAgaXNOb3RFbXB0eSAsXG4gIGF0ICxcbiAgc2V0QXQgLFxuICBoZWFkICxcbiAgdGFpbCAsXG4gIHRhaWxPckVtcHR5ICxcbiAgaW5pdCAsXG4gIGluaXRPckVtcHR5ICxcbiAgbGFzdCAsXG4gIHRha2UgLFxuICB0YWtlRXhhY3RseSAsXG4gIHRha2VXaGlsZSAsXG4gIGRyb3AgLFxuICBkcm9wRXhhY3RseSAsXG4gIGRyb3BXaGlsZSAsXG4gIGZpbHRlciAsXG4gIGtlZXAgLFxuICBmaWx0ZXJXaXRoSW5kZXggLFxuICBrZWVwV2l0aEluZGV4ICxcbiAgZmlsdGVyTm90ICxcbiAgcmVqZWN0ICxcbiAgZmlsdGVyTm90V2l0aEluZGV4ICxcbiAgcmVqZWN0V2l0aEluZGV4ICxcbiAgbWFwT3B0aW9uICxcbiAgY2F0T3B0aW9uICxcbiAgcGFydGl0aW9uICxcbiAgc3BsaXRBdCAsXG4gIHByZXBlbmRUb0FsbCAsXG4gIGludGVyc3BlcnNlICxcbiAgcmVwbGljYXRlICxcbiAgemlwICxcbiAgemlwV2l0aCAsXG4gIHppcFdpdGhJbmRleCAsXG4gIHVuemlwICxcbiAgc29ydFdpdGhJbnQgLFxuICBzb3J0QnkgLFxuICBzb3J0ICxcbiAgZGlzdGluY3RCeSAsXG4gIHJlbW92ZUZpcnN0QnkgLFxuICByZW1vdmVFYWNoQnkgLFxuICBkaXN0aW5jdCAsXG4gIHJlbW92ZUZpcnN0ICxcbiAgcmVtb3ZlRWFjaCAsXG4gIHJlcGxhY2VBdCAsXG4gIHNjYW5MZWZ0ICxcbiAgc2NhblJpZ2h0ICxcbiAgaW5zZXJ0QXQgLFxuICB1cGRhdGVBdCAsXG4gIHN3YXBBdCAsXG4gIHJlbW92ZUF0ICxcbiAgY2h1bmsgLFxuICBBcnJheUVxRXh0ZW5zaW9ucyAsXG4gIEFycmF5T3JkRXh0ZW5zaW9ucyAsXG4gIEFycmF5TW9ub2lkRXh0ZW5zaW9ucyAsXG4gICQkU3RyaW5nICxcbiAgSW50ICxcbiAgRmxvYXQgLFxuICAkJE9wdGlvbiAsXG4gIFJlc3VsdCAsXG4gIElPICxcbiAgVmFsaWRhdGlvbiAsXG4gIEluZml4ICxcbiAgXG59XG4vKiBpbmNsdWRlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwiLi4vUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCIuLi9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRmxvYXQgZnJvbSBcIi4uL1JlbHVkZV9GbG9hdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1N0cmluZyBmcm9tIFwiLi4vUmVsdWRlX1N0cmluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgT3B0aW9uJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuL1JlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE9wdGlvbkVxRXh0ZW5zaW9ucyhFKSB7XG4gIHZhciBlcSA9IGZ1bmN0aW9uIChwYXJhbSwgcGFyYW0kMSkge1xuICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5lcUJ5KEUuZXEsIHBhcmFtLCBwYXJhbSQxKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICAgICAgICBlcTogZXFcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gT3B0aW9uT3JkRXh0ZW5zaW9ucyhPKSB7XG4gIHZhciBPcHRpb25PcmQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5PcmQoTyk7XG4gIHJldHVybiB7XG4gICAgICAgICAgT3B0aW9uT3JkOiBPcHRpb25PcmQsXG4gICAgICAgICAgY29tcGFyZTogT3B0aW9uT3JkLmNvbXBhcmVcbiAgICAgICAgfTtcbn1cblxuZnVuY3Rpb24gZXEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmVxQnkoUmVsdWRlX1N0cmluZy5FcS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgT3B0aW9uT3JkID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuT3JkKFJlbHVkZV9TdHJpbmcuT3JkKTtcblxudmFyIFN0cmluZ19jb21wYXJlID0gT3B0aW9uT3JkLmNvbXBhcmU7XG5cbnZhciAkJFN0cmluZyA9IHtcbiAgZXE6IGVxLFxuICBPcHRpb25PcmQ6IE9wdGlvbk9yZCxcbiAgY29tcGFyZTogU3RyaW5nX2NvbXBhcmVcbn07XG5cbmZ1bmN0aW9uIGVxJDEocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmVxQnkoUmVsdWRlX0ludC5FcS5lcSwgcGFyYW0sIHBhcmFtJDEpO1xufVxuXG52YXIgT3B0aW9uT3JkJDEgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5PcmQoUmVsdWRlX0ludC5PcmQpO1xuXG52YXIgSW50X2NvbXBhcmUgPSBPcHRpb25PcmQkMS5jb21wYXJlO1xuXG52YXIgSW50ID0ge1xuICBlcTogZXEkMSxcbiAgT3B0aW9uT3JkOiBPcHRpb25PcmQkMSxcbiAgY29tcGFyZTogSW50X2NvbXBhcmVcbn07XG5cbmZ1bmN0aW9uIGVxJDIocGFyYW0sIHBhcmFtJDEpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmVxQnkoUmVsdWRlX0Zsb2F0LkVxLmVxLCBwYXJhbSwgcGFyYW0kMSk7XG59XG5cbnZhciBPcHRpb25PcmQkMiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLk9yZChSZWx1ZGVfRmxvYXQuT3JkKTtcblxudmFyIEZsb2F0X2NvbXBhcmUgPSBPcHRpb25PcmQkMi5jb21wYXJlO1xuXG52YXIgRmxvYXQgPSB7XG4gIGVxOiBlcSQyLFxuICBPcHRpb25PcmQ6IE9wdGlvbk9yZCQyLFxuICBjb21wYXJlOiBGbG9hdF9jb21wYXJlXG59O1xuXG5mdW5jdGlvbiB0cmF2ZXJzZShmLCBvcHQpIHtcbiAgdmFyIElvRSA9IFJlbHVkZV9JTy5XaXRoRXJyb3IoeyB9KTtcbiAgdmFyIFRyYXZlcnNlSU8gPSBPcHRpb24kQnNCYXN0ZXQuVHJhdmVyc2FibGUoSW9FLkFwcGxpY2F0aXZlKTtcbiAgcmV0dXJuIEN1cnJ5Ll8yKFRyYXZlcnNlSU8udHJhdmVyc2UsIGYsIG9wdCk7XG59XG5cbmZ1bmN0aW9uIHNlcXVlbmNlKG9wdCkge1xuICB2YXIgSW9FID0gUmVsdWRlX0lPLldpdGhFcnJvcih7IH0pO1xuICB2YXIgVHJhdmVyc2VJTyA9IE9wdGlvbiRCc0Jhc3RldC5UcmF2ZXJzYWJsZShJb0UuQXBwbGljYXRpdmUpO1xuICByZXR1cm4gQ3VycnkuXzEoVHJhdmVyc2VJTy5zZXF1ZW5jZSwgb3B0KTtcbn1cblxudmFyIElPID0ge1xuICB0cmF2ZXJzZTogdHJhdmVyc2UsXG4gIHNlcXVlbmNlOiBzZXF1ZW5jZVxufTtcblxuZXhwb3J0IHtcbiAgT3B0aW9uRXFFeHRlbnNpb25zICxcbiAgT3B0aW9uT3JkRXh0ZW5zaW9ucyAsXG4gICQkU3RyaW5nICxcbiAgSW50ICxcbiAgRmxvYXQgLFxuICBJTyAsXG4gIFxufVxuLyogT3B0aW9uT3JkIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgT3B0aW9uJEJzQmFzdGV0IGZyb20gXCJicy1iYXN0ZXQvYmFzdGV0L3NyYy9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fQmFzZSBmcm9tIFwiLi9vcHRpb24vUmVsdWRlX09wdGlvbl9CYXNlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfRXh0ZW5zaW9uc19BbHQgZnJvbSBcIi4vZXh0ZW5zaW9ucy9SZWx1ZGVfRXh0ZW5zaW9uc19BbHQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5IGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfQXBwbHkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9FeHRlbnNpb25zX01vbmFkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzIGZyb20gXCIuL29wdGlvbi9SZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfRnVuY3RvciBmcm9tIFwiLi9leHRlbnNpb25zL1JlbHVkZV9FeHRlbnNpb25zX0Z1bmN0b3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zIGZyb20gXCIuL29wdGlvbi9SZWx1ZGVfT3B0aW9uX1NwZWNpYWxpemF0aW9ucy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkIGZyb20gXCIuL2V4dGVuc2lvbnMvUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLmJzLmpzXCI7XG5cbnZhciBpbmNsdWRlID0gUmVsdWRlX0V4dGVuc2lvbnNfU2VtaWdyb3Vwb2lkLlNlbWlncm91cG9pZEluZml4KFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLlNlbWlncm91cG9pZCk7XG5cbnZhciBpbmNsdWRlJDEgPSBSZWx1ZGVfRXh0ZW5zaW9uc19GdW5jdG9yLkZ1bmN0b3JJbmZpeChSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5GdW5jdG9yKTtcblxudmFyIGluY2x1ZGUkMiA9IFJlbHVkZV9FeHRlbnNpb25zX0FsdC5BbHRJbmZpeChPcHRpb24kQnNCYXN0ZXQuQWx0KTtcblxudmFyIGluY2x1ZGUkMyA9IFJlbHVkZV9FeHRlbnNpb25zX0FwcGx5LkFwcGx5SW5maXgoUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQXBwbHkpO1xuXG52YXIgaW5jbHVkZSQ0ID0gUmVsdWRlX0V4dGVuc2lvbnNfTW9uYWQuTW9uYWRJbmZpeChSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Nb25hZCk7XG5cbmZ1bmN0aW9uICRwaXBlJHF1ZXN0aW9uKG9wdCwgJCRkZWZhdWx0KSB7XG4gIHJldHVybiBSZWx1ZGVfT3B0aW9uX0Jhc2UuZ2V0T3JFbHNlKCQkZGVmYXVsdCwgb3B0KTtcbn1cblxudmFyIEluZml4X1NFID0gaW5jbHVkZS5TRTtcblxudmFyIEluZml4XyRsZXNzJGxlc3MkbGVzcyA9IGluY2x1ZGUuJGxlc3MkbGVzcyRsZXNzO1xuXG52YXIgSW5maXhfJGdyZWF0JGdyZWF0JGdyZWF0ID0gaW5jbHVkZS4kZ3JlYXQkZ3JlYXQkZ3JlYXQ7XG5cbnZhciBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyA9IGluY2x1ZGUkMS5GdW5jdG9yRXh0ZW5zaW9ucztcblxudmFyIEluZml4XyRsZXNzJGRvbGxhciRncmVhdCA9IGluY2x1ZGUkMS4kbGVzcyQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRoYXNoJGdyZWF0ID0gaW5jbHVkZSQxLiRsZXNzJGhhc2gkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRkb2xsYXIgPSBpbmNsdWRlJDEuJGxlc3MkO1xuXG52YXIgSW5maXhfJCRncmVhdCA9IGluY2x1ZGUkMS4kJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3MkYXQkZ3JlYXQgPSBpbmNsdWRlJDEuJGxlc3MkYXQkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRwaXBlJGdyZWF0ID0gaW5jbHVkZSQyLiRsZXNzJHBpcGUkZ3JlYXQ7XG5cbnZhciBJbmZpeF9BcHBseUV4dGVuc2lvbnMgPSBpbmNsdWRlJDMuQXBwbHlFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciRncmVhdCA9IGluY2x1ZGUkMy4kbGVzcyRzdGFyJGdyZWF0O1xuXG52YXIgSW5maXhfJGxlc3Mkc3RhciA9IGluY2x1ZGUkMy4kbGVzcyRzdGFyO1xuXG52YXIgSW5maXhfJHN0YXIkZ3JlYXQgPSBpbmNsdWRlJDMuJHN0YXIkZ3JlYXQ7XG5cbnZhciBJbmZpeF9Nb25hZEV4dGVuc2lvbnMgPSBpbmNsdWRlJDQuTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgSW5maXhfJGdyZWF0JGdyZWF0JGVxID0gaW5jbHVkZSQ0LiRncmVhdCRncmVhdCRlcTtcblxudmFyIEluZml4XyRlcSRsZXNzJGxlc3MgPSBpbmNsdWRlJDQuJGVxJGxlc3MkbGVzcztcblxudmFyIEluZml4XyRncmVhdCRlcSRncmVhdCA9IGluY2x1ZGUkNC4kZ3JlYXQkZXEkZ3JlYXQ7XG5cbnZhciBJbmZpeF8kbGVzcyRlcSRsZXNzID0gaW5jbHVkZSQ0LiRsZXNzJGVxJGxlc3M7XG5cbnZhciBJbmZpeCA9IHtcbiAgU0U6IEluZml4X1NFLFxuICAkbGVzcyRsZXNzJGxlc3M6IEluZml4XyRsZXNzJGxlc3MkbGVzcyxcbiAgJGdyZWF0JGdyZWF0JGdyZWF0OiBJbmZpeF8kZ3JlYXQkZ3JlYXQkZ3JlYXQsXG4gIEZ1bmN0b3JFeHRlbnNpb25zOiBJbmZpeF9GdW5jdG9yRXh0ZW5zaW9ucyxcbiAgJGxlc3MkJGdyZWF0OiBJbmZpeF8kbGVzcyRkb2xsYXIkZ3JlYXQsXG4gICRsZXNzJGhhc2gkZ3JlYXQ6IEluZml4XyRsZXNzJGhhc2gkZ3JlYXQsXG4gICRsZXNzJDogSW5maXhfJGxlc3MkZG9sbGFyLFxuICAkJGdyZWF0OiBJbmZpeF8kJGdyZWF0LFxuICAkbGVzcyRhdCRncmVhdDogSW5maXhfJGxlc3MkYXQkZ3JlYXQsXG4gICRsZXNzJHBpcGUkZ3JlYXQ6IEluZml4XyRsZXNzJHBpcGUkZ3JlYXQsXG4gIEFwcGx5RXh0ZW5zaW9uczogSW5maXhfQXBwbHlFeHRlbnNpb25zLFxuICAkbGVzcyRzdGFyJGdyZWF0OiBJbmZpeF8kbGVzcyRzdGFyJGdyZWF0LFxuICAkbGVzcyRzdGFyOiBJbmZpeF8kbGVzcyRzdGFyLFxuICAkc3RhciRncmVhdDogSW5maXhfJHN0YXIkZ3JlYXQsXG4gIE1vbmFkRXh0ZW5zaW9uczogSW5maXhfTW9uYWRFeHRlbnNpb25zLFxuICAkZ3JlYXQkZ3JlYXQkZXE6IEluZml4XyRncmVhdCRncmVhdCRlcSxcbiAgJGVxJGxlc3MkbGVzczogSW5maXhfJGVxJGxlc3MkbGVzcyxcbiAgJGdyZWF0JGVxJGdyZWF0OiBJbmZpeF8kZ3JlYXQkZXEkZ3JlYXQsXG4gICRsZXNzJGVxJGxlc3M6IEluZml4XyRsZXNzJGVxJGxlc3MsXG4gICRwaXBlJHF1ZXN0aW9uOiAkcGlwZSRxdWVzdGlvblxufTtcblxudmFyIGNvbXBvc2UgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5jb21wb3NlO1xuXG52YXIgU2VtaWdyb3Vwb2lkID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuU2VtaWdyb3Vwb2lkO1xuXG52YXIgYW5kVGhlbiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFuZFRoZW47XG5cbnZhciBtYXAgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXA7XG5cbnZhciBGdW5jdG9yID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRnVuY3RvcjtcblxudmFyIEJzRnVuY3RvckV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Cc0Z1bmN0b3JFeHRlbnNpb25zO1xuXG52YXIgZmxpcE1hcCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZsaXBNYXA7XG5cbnZhciAkJHZvaWQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy4kJHZvaWQ7XG5cbnZhciB2b2lkUmlnaHQgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy52b2lkUmlnaHQ7XG5cbnZhciB2b2lkTGVmdCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnZvaWRMZWZ0O1xuXG52YXIgZmxhcCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZsYXA7XG5cbnZhciBhcHBseSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFwcGx5O1xuXG52YXIgQXBwbHkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5BcHBseTtcblxudmFyIEJzQXBwbHlFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQnNBcHBseUV4dGVuc2lvbnM7XG5cbnZhciBhcHBseUZpcnN0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYXBwbHlGaXJzdDtcblxudmFyIGFwcGx5U2Vjb25kID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYXBwbHlTZWNvbmQ7XG5cbnZhciBtYXAyID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwMjtcblxudmFyIG1hcDMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5tYXAzO1xuXG52YXIgbWFwNCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcDQ7XG5cbnZhciBtYXA1ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWFwNTtcblxudmFyIHR1cGxlMiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnR1cGxlMjtcblxudmFyIHR1cGxlMyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnR1cGxlMztcblxudmFyIHR1cGxlNCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnR1cGxlNDtcblxudmFyIHR1cGxlNSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnR1cGxlNTtcblxudmFyIG1hcFR1cGxlMiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcFR1cGxlMjtcblxudmFyIG1hcFR1cGxlMyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcFR1cGxlMztcblxudmFyIG1hcFR1cGxlNCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcFR1cGxlNDtcblxudmFyIG1hcFR1cGxlNSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1hcFR1cGxlNTtcblxudmFyIHB1cmUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5wdXJlO1xuXG52YXIgQXBwbGljYXRpdmUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5BcHBsaWNhdGl2ZTtcblxudmFyIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQnNBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBsaWZ0QTEgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5saWZ0QTE7XG5cbnZhciBiaW5kID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuYmluZDtcblxudmFyIE1vbmFkID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuTW9uYWQ7XG5cbnZhciBCc01vbmFkRXh0ZW5zaW9ucyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkJzTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgZmxhdE1hcCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZsYXRNYXA7XG5cbnZhciBmbGF0dGVuID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZmxhdHRlbjtcblxudmFyIGNvbXBvc2VLbGVpc2xpID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuY29tcG9zZUtsZWlzbGk7XG5cbnZhciBmbGlwQ29tcG9zZUtsZWlzbGkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5mbGlwQ29tcG9zZUtsZWlzbGk7XG5cbnZhciBsaWZ0TTEgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5saWZ0TTE7XG5cbnZhciB3aGVuXyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLndoZW5fO1xuXG52YXIgdW5sZXNzID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMudW5sZXNzO1xuXG52YXIgYWxpZ24gPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5hbGlnbjtcblxudmFyIGFsaWduV2l0aCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFsaWduV2l0aDtcblxudmFyIFNlbWlhbGlnbiA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLlNlbWlhbGlnbjtcblxudmFyIEFsaWduID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQWxpZ247XG5cbnZhciBmb2xkTGVmdCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZvbGRMZWZ0O1xuXG52YXIgZm9sZFJpZ2h0ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9sZFJpZ2h0O1xuXG52YXIgRm9sZGFibGUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Gb2xkYWJsZTtcblxudmFyIEJzRm9sZGFibGVFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuQnNGb2xkYWJsZUV4dGVuc2lvbnM7XG5cbnZhciBhbnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5hbnk7XG5cbnZhciBhbGwgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5hbGw7XG5cbnZhciBjb250YWluc0J5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuY29udGFpbnNCeTtcblxudmFyIGNvbnRhaW5zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuY29udGFpbnM7XG5cbnZhciBpbmRleE9mQnkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5pbmRleE9mQnk7XG5cbnZhciBpbmRleE9mID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuaW5kZXhPZjtcblxudmFyIG1pbkJ5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWluQnk7XG5cbnZhciBtaW4gPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5taW47XG5cbnZhciBtYXhCeSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLm1heEJ5O1xuXG52YXIgbWF4ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMubWF4O1xuXG52YXIgY291bnRCeSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmNvdW50Qnk7XG5cbnZhciBsZW5ndGggPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5sZW5ndGg7XG5cbnZhciBzaXplID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuc2l6ZTtcblxudmFyIGNvdW50ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuY291bnQ7XG5cbnZhciBmb3JFYWNoID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZm9yRWFjaDtcblxudmFyIGZvckVhY2hXaXRoSW5kZXggPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5mb3JFYWNoV2l0aEluZGV4O1xuXG52YXIgZmluZCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZpbmQ7XG5cbnZhciBmaW5kV2l0aEluZGV4ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZmluZFdpdGhJbmRleDtcblxudmFyIHRvTGlzdCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnRvTGlzdDtcblxudmFyIHRvQXJyYXkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy50b0FycmF5O1xuXG52YXIgRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRm9sZGFibGVTZW1pZ3JvdXBFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVNb25vaWRFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRm9sZGFibGVNb25vaWRFeHRlbnNpb25zO1xuXG52YXIgZm9sZE1hcCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZvbGRNYXA7XG5cbnZhciBmb2xkV2l0aE1vbm9pZCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmZvbGRXaXRoTW9ub2lkO1xuXG52YXIgaW50ZXJjYWxhdGUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5pbnRlcmNhbGF0ZTtcblxudmFyIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuRm9sZGFibGVBcHBsaWNhdGl2ZUV4dGVuc2lvbnM7XG5cbnZhciBGb2xkYWJsZU1vbmFkRXh0ZW5zaW9ucyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkZvbGRhYmxlTW9uYWRFeHRlbnNpb25zO1xuXG52YXIgRm9sZGFibGVFcUV4dGVuc2lvbnMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5Gb2xkYWJsZUVxRXh0ZW5zaW9ucztcblxudmFyIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkZvbGRhYmxlT3JkRXh0ZW5zaW9ucztcblxudmFyIGFsdCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLmFsdDtcblxudmFyIGFsdExhenkgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5hbHRMYXp5O1xuXG52YXIgU2VtaWdyb3VwX0FueSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLlNlbWlncm91cF9Bbnk7XG5cbnZhciBNb25vaWRfQW55ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuTW9ub2lkX0FueTtcblxudmFyIEFsdCA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkFsdDtcblxudmFyIFBsdXMgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5QbHVzO1xuXG52YXIgQWx0ZXJuYXRpdmUgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5BbHRlcm5hdGl2ZTtcblxudmFyIFRyYXZlcnNhYmxlID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuVHJhdmVyc2FibGU7XG5cbnZhciBlcUJ5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZXFCeTtcblxudmFyIGVxID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuZXE7XG5cbnZhciBFcSA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLkVxO1xuXG52YXIgT3JkID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuT3JkO1xuXG52YXIgc2hvd0J5ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuc2hvd0J5O1xuXG52YXIgc2hvdyA9IFJlbHVkZV9PcHRpb25fSW5zdGFuY2VzLnNob3c7XG5cbnZhciBTaG93ID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuU2hvdztcblxudmFyIFdpdGhTZW1pZ3JvdXAgPSBSZWx1ZGVfT3B0aW9uX0luc3RhbmNlcy5XaXRoU2VtaWdyb3VwO1xuXG52YXIgV2l0aEFwcGxpY2F0aXZlID0gUmVsdWRlX09wdGlvbl9JbnN0YW5jZXMuV2l0aEFwcGxpY2F0aXZlO1xuXG52YXIgc29tZSA9IFJlbHVkZV9PcHRpb25fQmFzZS5zb21lO1xuXG52YXIgbm9uZTtcblxudmFyIGVtcHR5O1xuXG52YXIgaXNTb21lID0gUmVsdWRlX09wdGlvbl9CYXNlLmlzU29tZTtcblxudmFyIGlzTm9uZSA9IFJlbHVkZV9PcHRpb25fQmFzZS5pc05vbmU7XG5cbnZhciBmb2xkID0gUmVsdWRlX09wdGlvbl9CYXNlLmZvbGQ7XG5cbnZhciBmb2xkTGF6eSA9IFJlbHVkZV9PcHRpb25fQmFzZS5mb2xkTGF6eTtcblxudmFyIGdldE9yRWxzZSA9IFJlbHVkZV9PcHRpb25fQmFzZS5nZXRPckVsc2U7XG5cbnZhciBnZXRPckVsc2VMYXp5ID0gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yRWxzZUxhenk7XG5cbnZhciBnZXRPclRocm93ID0gUmVsdWRlX09wdGlvbl9CYXNlLmdldE9yVGhyb3c7XG5cbnZhciBvckVsc2UgPSBSZWx1ZGVfT3B0aW9uX0Jhc2Uub3JFbHNlO1xuXG52YXIgb3JFbHNlTGF6eSA9IFJlbHVkZV9PcHRpb25fQmFzZS5vckVsc2VMYXp5O1xuXG52YXIgdGFwID0gUmVsdWRlX09wdGlvbl9CYXNlLnRhcDtcblxudmFyIHRhcFNvbWUgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UudGFwU29tZTtcblxudmFyIHRhcE5vbmUgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UudGFwTm9uZTtcblxudmFyIGJpdGFwID0gUmVsdWRlX09wdGlvbl9CYXNlLmJpdGFwO1xuXG52YXIgZmlsdGVyID0gUmVsdWRlX09wdGlvbl9CYXNlLmZpbHRlcjtcblxudmFyIGtlZXAgPSBSZWx1ZGVfT3B0aW9uX0Jhc2Uua2VlcDtcblxudmFyIGZpbHRlck5vdCA9IFJlbHVkZV9PcHRpb25fQmFzZS5maWx0ZXJOb3Q7XG5cbnZhciByZWplY3QgPSBSZWx1ZGVfT3B0aW9uX0Jhc2UucmVqZWN0O1xuXG52YXIgT3B0aW9uRXFFeHRlbnNpb25zID0gUmVsdWRlX09wdGlvbl9TcGVjaWFsaXphdGlvbnMuT3B0aW9uRXFFeHRlbnNpb25zO1xuXG52YXIgT3B0aW9uT3JkRXh0ZW5zaW9ucyA9IFJlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zLk9wdGlvbk9yZEV4dGVuc2lvbnM7XG5cbnZhciAkJFN0cmluZyA9IFJlbHVkZV9PcHRpb25fU3BlY2lhbGl6YXRpb25zLiQkU3RyaW5nO1xuXG52YXIgSW50ID0gUmVsdWRlX09wdGlvbl9TcGVjaWFsaXphdGlvbnMuSW50O1xuXG52YXIgRmxvYXQgPSBSZWx1ZGVfT3B0aW9uX1NwZWNpYWxpemF0aW9ucy5GbG9hdDtcblxudmFyIElPID0gUmVsdWRlX09wdGlvbl9TcGVjaWFsaXphdGlvbnMuSU87XG5cbmV4cG9ydCB7XG4gIGNvbXBvc2UgLFxuICBTZW1pZ3JvdXBvaWQgLFxuICBhbmRUaGVuICxcbiAgbWFwICxcbiAgRnVuY3RvciAsXG4gIEJzRnVuY3RvckV4dGVuc2lvbnMgLFxuICBmbGlwTWFwICxcbiAgJCR2b2lkICxcbiAgdm9pZFJpZ2h0ICxcbiAgdm9pZExlZnQgLFxuICBmbGFwICxcbiAgYXBwbHkgLFxuICBBcHBseSAsXG4gIEJzQXBwbHlFeHRlbnNpb25zICxcbiAgYXBwbHlGaXJzdCAsXG4gIGFwcGx5U2Vjb25kICxcbiAgbWFwMiAsXG4gIG1hcDMgLFxuICBtYXA0ICxcbiAgbWFwNSAsXG4gIHR1cGxlMiAsXG4gIHR1cGxlMyAsXG4gIHR1cGxlNCAsXG4gIHR1cGxlNSAsXG4gIG1hcFR1cGxlMiAsXG4gIG1hcFR1cGxlMyAsXG4gIG1hcFR1cGxlNCAsXG4gIG1hcFR1cGxlNSAsXG4gIHB1cmUgLFxuICBBcHBsaWNhdGl2ZSAsXG4gIEJzQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgbGlmdEExICxcbiAgYmluZCAsXG4gIE1vbmFkICxcbiAgQnNNb25hZEV4dGVuc2lvbnMgLFxuICBmbGF0TWFwICxcbiAgZmxhdHRlbiAsXG4gIGNvbXBvc2VLbGVpc2xpICxcbiAgZmxpcENvbXBvc2VLbGVpc2xpICxcbiAgbGlmdE0xICxcbiAgd2hlbl8gLFxuICB1bmxlc3MgLFxuICBhbGlnbiAsXG4gIGFsaWduV2l0aCAsXG4gIFNlbWlhbGlnbiAsXG4gIEFsaWduICxcbiAgZm9sZExlZnQgLFxuICBmb2xkUmlnaHQgLFxuICBGb2xkYWJsZSAsXG4gIEJzRm9sZGFibGVFeHRlbnNpb25zICxcbiAgYW55ICxcbiAgYWxsICxcbiAgY29udGFpbnNCeSAsXG4gIGNvbnRhaW5zICxcbiAgaW5kZXhPZkJ5ICxcbiAgaW5kZXhPZiAsXG4gIG1pbkJ5ICxcbiAgbWluICxcbiAgbWF4QnkgLFxuICBtYXggLFxuICBjb3VudEJ5ICxcbiAgbGVuZ3RoICxcbiAgc2l6ZSAsXG4gIGNvdW50ICxcbiAgZm9yRWFjaCAsXG4gIGZvckVhY2hXaXRoSW5kZXggLFxuICBmaW5kICxcbiAgZmluZFdpdGhJbmRleCAsXG4gIHRvTGlzdCAsXG4gIHRvQXJyYXkgLFxuICBGb2xkYWJsZVNlbWlncm91cEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZU1vbm9pZEV4dGVuc2lvbnMgLFxuICBmb2xkTWFwICxcbiAgZm9sZFdpdGhNb25vaWQgLFxuICBpbnRlcmNhbGF0ZSAsXG4gIEZvbGRhYmxlQXBwbGljYXRpdmVFeHRlbnNpb25zICxcbiAgRm9sZGFibGVNb25hZEV4dGVuc2lvbnMgLFxuICBGb2xkYWJsZUVxRXh0ZW5zaW9ucyAsXG4gIEZvbGRhYmxlT3JkRXh0ZW5zaW9ucyAsXG4gIGFsdCAsXG4gIGFsdExhenkgLFxuICBTZW1pZ3JvdXBfQW55ICxcbiAgTW9ub2lkX0FueSAsXG4gIEFsdCAsXG4gIFBsdXMgLFxuICBBbHRlcm5hdGl2ZSAsXG4gIFRyYXZlcnNhYmxlICxcbiAgZXFCeSAsXG4gIGVxICxcbiAgRXEgLFxuICBPcmQgLFxuICBzaG93QnkgLFxuICBzaG93ICxcbiAgU2hvdyAsXG4gIFdpdGhTZW1pZ3JvdXAgLFxuICBXaXRoQXBwbGljYXRpdmUgLFxuICBzb21lICxcbiAgbm9uZSAsXG4gIGVtcHR5ICxcbiAgaXNTb21lICxcbiAgaXNOb25lICxcbiAgZm9sZCAsXG4gIGZvbGRMYXp5ICxcbiAgZ2V0T3JFbHNlICxcbiAgZ2V0T3JFbHNlTGF6eSAsXG4gIGdldE9yVGhyb3cgLFxuICBvckVsc2UgLFxuICBvckVsc2VMYXp5ICxcbiAgdGFwICxcbiAgdGFwU29tZSAsXG4gIHRhcE5vbmUgLFxuICBiaXRhcCAsXG4gIGZpbHRlciAsXG4gIGtlZXAgLFxuICBmaWx0ZXJOb3QgLFxuICByZWplY3QgLFxuICBPcHRpb25FcUV4dGVuc2lvbnMgLFxuICBPcHRpb25PcmRFeHRlbnNpb25zICxcbiAgJCRTdHJpbmcgLFxuICBJbnQgLFxuICBGbG9hdCAsXG4gIElPICxcbiAgSW5maXggLFxuICBcbn1cbi8qIGluY2x1ZGUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuXG52YXIgU3lzdGVtRXJyb3IgPSB7IH07XG5cbnZhciBVbmtub3duRXJyb3IgPSB7IH07XG5cbmZ1bmN0aW9uIF9tYWtlU3lzdGVtRXJyb3IoZXhjKSB7XG4gIHZhciBtYXRjaCA9IGV4Yy5jb2RlO1xuICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgY2FzZSBcIkVBQ0NFU1wiIDpcbiAgICAgICAgcmV0dXJuIC8qIEFjY2Vzc0RlbmllZCAqL0Jsb2NrLl9fKDAsIFtleGNdKTtcbiAgICBjYXNlIFwiRUFERFJJTlVTRVwiIDpcbiAgICAgICAgcmV0dXJuIC8qIEFkZHJlc3NJblVzZSAqL0Jsb2NrLl9fKDEsIFtleGNdKTtcbiAgICBjYXNlIFwiRUNPTk5SRUZVU0VEXCIgOlxuICAgICAgICByZXR1cm4gLyogQ29ubmVjdGlvblJlZnVzZWQgKi9CbG9jay5fXygyLCBbZXhjXSk7XG4gICAgY2FzZSBcIkVDT05OUkVTRVRcIiA6XG4gICAgICAgIHJldHVybiAvKiBDb25uZWN0aW9uUmVzZXQgKi9CbG9jay5fXygzLCBbZXhjXSk7XG4gICAgY2FzZSBcIkVFWElTVFwiIDpcbiAgICAgICAgcmV0dXJuIC8qIEZpbGVFeGlzdHMgKi9CbG9jay5fXyg0LCBbZXhjXSk7XG4gICAgY2FzZSBcIkVJU0RJUlwiIDpcbiAgICAgICAgcmV0dXJuIC8qIElzQURpcmVjdG9yeSAqL0Jsb2NrLl9fKDUsIFtleGNdKTtcbiAgICBjYXNlIFwiRU1GSUxFXCIgOlxuICAgICAgICByZXR1cm4gLyogVG9vTWFueU9wZW5GaWxlcyAqL0Jsb2NrLl9fKDYsIFtleGNdKTtcbiAgICBjYXNlIFwiRU5PRU5UXCIgOlxuICAgICAgICByZXR1cm4gLyogTm9TdWNoRmlsZU9yRGlyZWN0b3J5ICovQmxvY2suX18oNywgW2V4Y10pO1xuICAgIGNhc2UgXCJFTk9URElSXCIgOlxuICAgICAgICByZXR1cm4gLyogTm90QURpcmVjdG9yeSAqL0Jsb2NrLl9fKDgsIFtleGNdKTtcbiAgICBjYXNlIFwiRU5PVEVNUFRZXCIgOlxuICAgICAgICByZXR1cm4gLyogRGlyZWN0b3J5Tm90RW1wdHkgKi9CbG9jay5fXyg5LCBbZXhjXSk7XG4gICAgY2FzZSBcIkVOT1RGT1VORFwiIDpcbiAgICAgICAgcmV0dXJuIC8qIEROU0xvb2t1cEZhaWxlZCAqL0Jsb2NrLl9fKDEwLCBbZXhjXSk7XG4gICAgY2FzZSBcIkVQRVJNXCIgOlxuICAgICAgICByZXR1cm4gLyogTm90UGVybWl0dGVkICovQmxvY2suX18oMTEsIFtleGNdKTtcbiAgICBjYXNlIFwiRVBJUEVcIiA6XG4gICAgICAgIHJldHVybiAvKiBCcm9rZW5QaXBlICovQmxvY2suX18oMTIsIFtleGNdKTtcbiAgICBjYXNlIFwiRVRJTUVET1VUXCIgOlxuICAgICAgICByZXR1cm4gLyogVGltZWRPdXQgKi9CbG9jay5fXygxMywgW2V4Y10pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLyogVW5rbm93blN5c3RlbUVycm9yICovQmxvY2suX18oMTQsIFtleGNdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfbWFrZVVua25vd25FcnJvcihleGMpIHtcbiAgcmV0dXJuIC8qIE90aGVyVW5rbm93bkVycm9yICovQmxvY2suX18oMTUsIFtleGNdKTtcbn1cblxuZnVuY3Rpb24gZnJvbUV4Y2VwdGlvbihleGMpIHtcbiAgdmFyIF9tYWtlRXJyb3IgPSAoZnVuY3Rpb24gKG1ha2VTeXN0ZW1FcnJvciwgbWFrZVVua25vd25FcnJvciwgZXhjKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhjLnN5c2NhbGwgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gbWFrZVVua25vd25FcnJvcihleGMpXG4gICAgICAgICAgICAgICAgOiBtYWtlU3lzdGVtRXJyb3IoZXhjKVxuICAgICAgICB9KTtcbiAgcmV0dXJuIF9tYWtlRXJyb3IoX21ha2VTeXN0ZW1FcnJvciwgX21ha2VVbmtub3duRXJyb3IsIGV4Yyk7XG59XG5cbmV4cG9ydCB7XG4gIFN5c3RlbUVycm9yICxcbiAgVW5rbm93bkVycm9yICxcbiAgX21ha2VTeXN0ZW1FcnJvciAsXG4gIF9tYWtlVW5rbm93bkVycm9yICxcbiAgZnJvbUV4Y2VwdGlvbiAsXG4gIFxufVxuLyogTm8gc2lkZSBlZmZlY3QgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBGcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgTm9kZUZTX19FcnJvciBmcm9tIFwiLi9Ob2RlRlNfX0Vycm9yLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfUmVzdWx0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9SZXN1bHQuYnMuanNcIjtcblxudmFyIERpcmVjdG9yeUVudHJ5ID0geyB9O1xuXG5mdW5jdGlvbiByZWFkRGlyKGVuY29kaW5nT3B0LCBwYXRoKSB7XG4gIHZhciBlbmNvZGluZyA9IGVuY29kaW5nT3B0ICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZ09wdCA6IFwidXRmLThcIjtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBGcy5yZWFkZGlyKHBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICB3aXRoRmlsZVR5cGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIGVuY29kaW5nOiBlbmNvZGluZ1xuICAgICAgICAgICAgICAgICAgICB9LCAoZnVuY3Rpb24gKGVycm9yLCBmaWxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHJlc29sdmUsIEN1cnJ5Ll8yKFJlbHVkZV9SZXN1bHQubWFwRXJyb3IsIE5vZGVGU19fRXJyb3IuZnJvbUV4Y2VwdGlvbiwgUmVsdWRlX1Jlc3VsdC5mbGlwKFJlbHVkZV9SZXN1bHQuZnJvbU9wdGlvbihmaWxlcywgZXJyb3IgPT09IG51bGwgPyB1bmRlZmluZWQgOiBDYW1sX29wdGlvbi5zb21lKGVycm9yKSkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSk7XG59XG5cbnZhciAkJEVycm9yO1xuXG5leHBvcnQge1xuICAkJEVycm9yICxcbiAgRGlyZWN0b3J5RW50cnkgLFxuICByZWFkRGlyICxcbiAgXG59XG4vKiBmcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEZzIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBOb2RlRlNfX0Vycm9yIGZyb20gXCIuL05vZGVGU19fRXJyb3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9SZXN1bHQgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX1Jlc3VsdC5icy5qc1wiO1xuXG5mdW5jdGlvbiBfdG9SZXN1bHQoZXJyb3IsIGNvbnRlbnRzKSB7XG4gIHJldHVybiBDdXJyeS5fMihSZWx1ZGVfUmVzdWx0Lm1hcEVycm9yLCBOb2RlRlNfX0Vycm9yLmZyb21FeGNlcHRpb24sIFJlbHVkZV9SZXN1bHQuZmxpcChSZWx1ZGVfUmVzdWx0LmZyb21PcHRpb24oY29udGVudHMsIGVycm9yID09PSBudWxsID8gdW5kZWZpbmVkIDogQ2FtbF9vcHRpb24uc29tZShlcnJvcikpKSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRUZXh0KGVuY29kaW5nT3B0LCBwYXRoKSB7XG4gIHZhciBlbmNvZGluZyA9IGVuY29kaW5nT3B0ICE9PSB1bmRlZmluZWQgPyBlbmNvZGluZ09wdCA6IFwidXRmLThcIjtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBGcy5yZWFkRmlsZShwYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nXG4gICAgICAgICAgICAgICAgICAgIH0sIChmdW5jdGlvbiAoZXJyb3IsIGNvbnRlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocmVzb2x2ZSwgX3RvUmVzdWx0KGVycm9yLCBjb250ZW50cykpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiByZWFkQnVmZmVyKHBhdGgpIHtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBGcy5yZWFkRmlsZShwYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgfSwgKGZ1bmN0aW9uIChlcnJvciwgY29udGVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMShyZXNvbHZlLCBfdG9SZXN1bHQoZXJyb3IsIGNvbnRlbnRzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSk7XG59XG5cbnZhciAkJEVycm9yO1xuXG5leHBvcnQge1xuICAkJEVycm9yICxcbiAgX3RvUmVzdWx0ICxcbiAgcmVhZFRleHQgLFxuICByZWFkQnVmZmVyICxcbiAgXG59XG4vKiBmcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzICQkRGF0ZSBmcm9tIFwiLi9iaW5kaW5ncy9EYXRlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBQYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIEpzX2RpY3QgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfZGljdC5qc1wiO1xuaW1wb3J0ICogYXMgTWltZVR5cGVzIGZyb20gXCIuL2JpbmRpbmdzL01pbWVUeXBlcy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0ludCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3QgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheSBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfQXJyYXkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1Jlc3VsdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfUmVzdWx0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBOb2RlRlNfX1JlYWREaXIgZnJvbSBcIm5vZGUtZnMtYnMvc3JjL05vZGVGU19fUmVhZERpci5icy5qc1wiO1xuaW1wb3J0ICogYXMgTm9kZUZTX19SZWFkRmlsZSBmcm9tIFwibm9kZS1mcy1icy9zcmMvTm9kZUZTX19SZWFkRmlsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgTWFya2Rvd25NZXRhZGF0YSBmcm9tIFwibWFya2Rvd24tbWV0YWRhdGFcIjtcblxuZnVuY3Rpb24gcGFyc2VUaXRsZShtZXRhZGF0YSkge1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9BcnJheS5hdCgwLCBwYXJhbSk7XG4gICAgICAgICAgICAgIH0pLCBKc19kaWN0LmdldChtZXRhZGF0YSwgXCJ0aXRsZVwiKSk7XG59XG5cbnZhciBwYXJ0aWFsX2FyZyA9IC9eKFswLTldezR9KS0oWzAtOV17Mn0pLShbMC05XXsyfSkgKFswLTldezJ9KTooWzAtOV17Mn0pJC87XG5cbmZ1bmN0aW9uIG1hdGNoRGF0ZShwYXJhbSkge1xuICByZXR1cm4gQ2FtbF9vcHRpb24ubnVsbF90b19vcHQocGFydGlhbF9hcmcuZXhlYyhwYXJhbSkpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRpbWVzdGFtcChtZXRhZGF0YSkge1xuICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mbGF0TWFwKChmdW5jdGlvbiAobWF0Y2hfKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhcHR1cmVzID0gbWF0Y2hfLnNsaWNlKDEpLm1hcCgoZnVuY3Rpb24gKGNhcHR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihSZWx1ZGVfT3B0aW9uLmZsYXRNYXAsIFJlbHVkZV9JbnQuZnJvbVN0cmluZywgKGNhcHR1cmUgPT0gbnVsbCkgPyB1bmRlZmluZWQgOiBDYW1sX29wdGlvbi5zb21lKGNhcHR1cmUpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhcHR1cmVzLmxlbmd0aCAhPT0gNSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIE1hbGZvcm1lZCAqLzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSBjYXB0dXJlc1swXTtcbiAgICAgICAgICAgICAgICBpZiAoeWVhciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogTWFsZm9ybWVkICovMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBjYXB0dXJlc1sxXTtcbiAgICAgICAgICAgICAgICBpZiAobW9udGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIE1hbGZvcm1lZCAqLzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGRheSA9IGNhcHR1cmVzWzJdO1xuICAgICAgICAgICAgICAgIGlmIChkYXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIE1hbGZvcm1lZCAqLzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGhvdXIgPSBjYXB0dXJlc1szXTtcbiAgICAgICAgICAgICAgICBpZiAoaG91ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogTWFsZm9ybWVkICovMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWludXRlID0gY2FwdHVyZXNbNF07XG4gICAgICAgICAgICAgICAgaWYgKG1pbnV0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbJCREYXRlLm1ha2UoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCB1bmRlZmluZWQpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBNYWxmb3JtZWQgKi8xXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KSwgUmVsdWRlX1Jlc3VsdC5mbGF0TWFwKChmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX1Jlc3VsdC5mcm9tT3B0aW9uKC8qIE1hbGZvcm1lZCAqLzEsIG1hdGNoRGF0ZShkYXRlKSk7XG4gICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX1Jlc3VsdC5mcm9tT3B0aW9uKC8qIE1pc3NpbmcgKi8wLCBDdXJyeS5fMihSZWx1ZGVfT3B0aW9uLmZsYXRNYXAsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0FycmF5LmF0KDAsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEpzX2RpY3QuZ2V0KG1ldGFkYXRhLCBcImRhdGVcIikpKSkpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRhZ3MobWV0YWRhdGEpIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKFJlbHVkZV9MaXN0LmZyb21BcnJheSwgUmVsdWRlX09wdGlvbi5maWx0ZXIoKGZ1bmN0aW9uIChhcnJheSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgICAgICAgICB9KSkoSnNfZGljdC5nZXQobWV0YWRhdGEsIFwidGFnc1wiKSkpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUVudHJ5KG1hcmtkb3duKSB7XG4gIHZhciBtYXRjaCA9IE1hcmtkb3duTWV0YWRhdGEucGFyc2VNZXRhZGF0YShtYXJrZG93bik7XG4gIHZhciBtZXRhZGF0YSA9IG1hdGNoWzBdO1xuICB2YXIgbWF0Y2gkMSA9IHBhcnNlVGl0bGUobWV0YWRhdGEpO1xuICB2YXIgbWF0Y2gkMiA9IHBhcnNlVGltZXN0YW1wKG1ldGFkYXRhKTtcbiAgdmFyIG1hdGNoJDMgPSBwYXJzZVRhZ3MobWV0YWRhdGEpO1xuICBpZiAobWF0Y2gkMSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG1hdGNoJDIudGFnKSB7XG4gICAgICBpZiAobWF0Y2gkMyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBUaW1lc3RhbXBFcnJvciAqL1ttYXRjaCQyWzBdXV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC8qIEVycm9yICovQmxvY2suX18oMSwgWy8qIEJhZE1ldGFkYXRhICovMl0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWF0Y2gkMyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gLyogT2sgKi9CbG9jay5fXygwLCBbe1xuICAgICAgICAgICAgICAgICAgdGl0bGU6IG1hdGNoJDEsXG4gICAgICAgICAgICAgICAgICBkYXRlOiBtYXRjaCQyWzBdLFxuICAgICAgICAgICAgICAgICAgdGFnczogbWF0Y2gkMyxcbiAgICAgICAgICAgICAgICAgIHRleHQ6IG1hdGNoWzFdXG4gICAgICAgICAgICAgICAgfV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogVGFnc01pc3NpbmcgKi8xXSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1hdGNoJDIudGFnIHx8IG1hdGNoJDMgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiBFcnJvciAqL0Jsb2NrLl9fKDEsIFsvKiBCYWRNZXRhZGF0YSAqLzJdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogRXJyb3IgKi9CbG9jay5fXygxLCBbLyogVGl0bGVNaXNzaW5nICovMF0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmRQYXJzZUVudHJpZXNEaXJlY3RvcnkoZGlyZWN0b3J5KSB7XG4gIHJldHVybiBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cmllcy5maWx0ZXIoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRyeS5uYW1lLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoXCIubWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZW50cnkuaXNEaXJlY3RvcnkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gcGFyYW0ubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhdGggPSBQYXRoLmpvaW4oZGlyZWN0b3J5LCBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy5mbGF0TWFwKChmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uZnJvbVJlc3VsdChDdXJyeS5fMihSZWx1ZGVfUmVzdWx0Lm1hcEVycm9yLCAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFBhcnNlRXJyb3IgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIG5hbWUgKi9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlcnJvciAqL2Vycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHBhcnNlRW50cnkodGV4dCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9JTy5tYXBFcnJvciwgKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogUmVhZEVudHJ5RXJyb3IgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBuYW1lICovbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGVycm9yICovZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9kZUZTX19SZWFkRmlsZS5yZWFkVGV4dCh1bmRlZmluZWQsIHBhdGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlYWRpbmcgZW50cnkgZnJvbSBcXFwiXCIgKyAoU3RyaW5nKHBhdGgpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5yZWR1Y2UoKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy5mbGF0TWFwKChmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0lPLm1hcCgoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGFjY3VtdWxhdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgLyogUHVyZSAqL0Jsb2NrLl9fKDAsIFsvKiBbXSAqLzBdKSk7XG4gICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfSU8ubWFwRXJyb3IsIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlYWREaXJlY3RvcnlFcnJvciAqL0Jsb2NrLl9fKDAsIFtlcnJvcl0pO1xuICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9JTy5mbGF0TWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOb2RlRlNfX1JlYWREaXIucmVhZERpcih1bmRlZmluZWQsIGRpcmVjdG9yeSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVhZGluZyBmcm9tIGVudHJpZXMgZGlyZWN0b3J5IFxcXCJcIiArIChTdHJpbmcoZGlyZWN0b3J5KSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pXSkpKSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRBbmRQYXJzZUFib3V0UGF0aChwYXRoKSB7XG4gIHJldHVybiBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE5vZGVGU19fUmVhZEZpbGUucmVhZFRleHQodW5kZWZpbmVkLCBwYXRoKTtcbiAgICAgICAgICAgICAgfSksIC8qIFN1c3BlbmQgKi9CbG9jay5fXygyLCBbKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlYWRpbmcgYWJvdXQgdGV4dCBmcm9tIFxcXCJcIiArIChTdHJpbmcocGF0aCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgIH0pXSkpO1xufVxuXG5mdW5jdGlvbiByZWFkQW5kRW5jb2RlRmF2aWNvblBhdGgocGF0aCkge1xuICByZXR1cm4gUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChtaW1lVHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uYmltYXAoKGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYXNlNjQgPSBidWZmZXIudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmk6IFwiZGF0YTpcIiArIChTdHJpbmcobWltZVR5cGUpICsgKFwiO2Jhc2U2NCxcIiArIChTdHJpbmcoYmFzZTY0KSArIFwiXCIpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiBtaW1lVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFJlYWRFcnJvciAqL1tlcnJvcl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIE5vZGVGU19fUmVhZEZpbGUucmVhZEJ1ZmZlcihwYXRoKSk7XG4gICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uZnJvbU9wdGlvbigoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIE1pbWVUeXBlTm90Rm91bmQgKi8wO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgTWltZVR5cGVzLmNvbnRlbnRUeXBlKFBhdGguYmFzZW5hbWUocGF0aCkpKTtcbiAgICAgICAgICAgICAgICAgIH0pLCAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVhZGluZyBmYXZpY29uIGZyb20gXFxcIlwiICsgKFN0cmluZyhwYXRoKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICB9KV0pKSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrVXBsb2Fkc0RpcmVjdG9yeUV4aXN0ZW5jZShwYXRoKSB7XG4gIHJldHVybiBSZWx1ZGVfSU8ubWFwKChmdW5jdGlvbiAocHJpbSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTm9kZUZTX19SZWFkRGlyLnJlYWREaXIodW5kZWZpbmVkLCBwYXRoKTtcbiAgICAgICAgICAgICAgICAgIH0pLCAvKiBTdXNwZW5kICovQmxvY2suX18oMiwgWyhmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2hlY2tpbmcgZXhpc3RlbmNlIG9mIHVwbG9hZHMgZGlyZWN0b3J5IFxcXCJcIiArIChTdHJpbmcocGF0aCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgfSldKSkpO1xufVxuXG5mdW5jdGlvbiByZWFkQW5kUGFyc2VBbGwoYWJvdXRQYXRoLCBlbnRyaWVzRGlyZWN0b3J5LCBmYXZpY29uUGF0aCwgdXBsb2Fkc0RpcmVjdG9yeSkge1xuICByZXR1cm4gUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0lPLmJpbWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBVcGxvYWRzRGlyZWN0b3J5RXJyb3IgKi9CbG9jay5fXygzLCBbZXJyb3JdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgY2hlY2tVcGxvYWRzRGlyZWN0b3J5RXhpc3RlbmNlKHVwbG9hZHNEaXJlY3RvcnkpKTtcbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9JTy5mbGF0TWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBwYXJhbVsxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFib3V0ID0gcGFyYW1bMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uYmltYXAoKGZ1bmN0aW9uIChmYXZpY29uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3V0OiBhYm91dCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYXZpY29uOiBmYXZpY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRmF2aWNvbkVycm9yICovQmxvY2suX18oMiwgW2Vycm9yXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCByZWFkQW5kRW5jb2RlRmF2aWNvblBhdGgoZmF2aWNvblBhdGgpKTtcbiAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8uZmxhdE1hcCgoZnVuY3Rpb24gKGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8uYmltYXAoKGZ1bmN0aW9uIChhYm91dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIEFib3V0RmlsZUVycm9yICovQmxvY2suX18oMCwgW2Vycm9yXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgcmVhZEFuZFBhcnNlQWJvdXRQYXRoKGFib3V0UGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfSU8ubWFwRXJyb3IsIChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRW50cmllc0RpcmVjdG9yeUVycm9yICovQmxvY2suX18oMSwgW2Vycm9yXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCByZWFkQW5kUGFyc2VFbnRyaWVzRGlyZWN0b3J5KGVudHJpZXNEaXJlY3RvcnkpKSkpKTtcbn1cblxuZXhwb3J0IHtcbiAgcGFyc2VUaXRsZSAsXG4gIG1hdGNoRGF0ZSAsXG4gIHBhcnNlVGltZXN0YW1wICxcbiAgcGFyc2VUYWdzICxcbiAgcGFyc2VFbnRyeSAsXG4gIHJlYWRBbmRQYXJzZUVudHJpZXNEaXJlY3RvcnkgLFxuICByZWFkQW5kUGFyc2VBYm91dFBhdGggLFxuICByZWFkQW5kRW5jb2RlRmF2aWNvblBhdGggLFxuICBjaGVja1VwbG9hZHNEaXJlY3RvcnlFeGlzdGVuY2UgLFxuICByZWFkQW5kUGFyc2VBbGwgLFxuICBcbn1cbi8qIHBhdGggTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5cbnZhciAkJFJlcXVlc3QgPSB7IH07XG5cbmZ1bmN0aW9uIHNldFN0YXR1c0NvZGUoc3RhdHVzLCByZXNwb25zZSkge1xuICByZXNwb25zZS5zdGF0dXNDb2RlID0gc3RhdHVzO1xuICBcbn1cblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGUodmFsdWUpIHtcbiAgcmV0dXJuIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHBhcmFtLnNldEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCB2YWx1ZSk7XG4gICAgICBcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0Q29udGVudExlbmd0aChsZW5ndGgpIHtcbiAgdmFyIHBhcnRpYWxfYXJnID0gU3RyaW5nKGxlbmd0aCk7XG4gIHJldHVybiAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICBwYXJhbS5zZXRIZWFkZXIoXCJDb250ZW50LUxlbmd0aFwiLCBwYXJ0aWFsX2FyZyk7XG4gICAgICBcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0TGFzdE1vZGlmaWVkKGRhdGUpIHtcbiAgdmFyIHBhcnRpYWxfYXJnID0gZGF0ZS50b1VUQ1N0cmluZygpO1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcGFyYW0uc2V0SGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiLCBwYXJ0aWFsX2FyZyk7XG4gICAgICBcbiAgICB9KTtcbn1cblxudmFyICQkUmVzcG9uc2UgPSB7XG4gIHNldFN0YXR1c0NvZGU6IHNldFN0YXR1c0NvZGUsXG4gIHNldENvbnRlbnRUeXBlOiBzZXRDb250ZW50VHlwZSxcbiAgc2V0Q29udGVudExlbmd0aDogc2V0Q29udGVudExlbmd0aCxcbiAgc2V0TGFzdE1vZGlmaWVkOiBzZXRMYXN0TW9kaWZpZWRcbn07XG5cbnZhciBTZXJ2ZXIgPSB7IH07XG5cbmV4cG9ydCB7XG4gICQkUmVxdWVzdCAsXG4gICQkUmVzcG9uc2UgLFxuICBTZXJ2ZXIgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0LmpzXCI7XG5pbXBvcnQgKiBhcyAkJFN0cmluZyBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9zdHJpbmcuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0xpc3QuanNcIjtcblxuZnVuY3Rpb24gdG9TdHJpbmcocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtNjAxMjA0NzMyKSB7XG4gICAgaWYgKHBhcmFtID49IDY1MzE5Mzk2MSkge1xuICAgICAgcmV0dXJuIFwidW5zZXRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiaW5pdGlhbFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJpbmhlcml0XCI7XG4gIH1cbn1cblxudmFyIENhc2NhZGluZyA9IHtcbiAgaW5pdGlhbDogLyogaW5pdGlhbCAqLy04Nzg3Njc5OTYsXG4gIGluaGVyaXRfOiAvKiBpbmhlcml0XyAqLy02MDEyMDQ3MzIsXG4gIHVuc2V0OiAvKiB1bnNldCAqLzY1MzE5Mzk2MSxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nXG59O1xuXG5mdW5jdGlvbiBzKHgpIHtcbiAgcmV0dXJuIC8qIGBzICovW1xuICAgICAgICAgIDExNSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG1zKHgpIHtcbiAgcmV0dXJuIC8qIGBtcyAqL1tcbiAgICAgICAgICAyNDQyMixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDEocGFyYW0pIHtcbiAgaWYgKHBhcmFtWzBdID49IDI0NDIyKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIm1zXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInNcIjtcbiAgfVxufVxuXG52YXIgVGltZSA9IHtcbiAgczogcyxcbiAgbXM6IG1zLFxuICB0b1N0cmluZzogdG9TdHJpbmckMVxufTtcblxuZnVuY3Rpb24gcGN0KHgpIHtcbiAgcmV0dXJuIC8qIGBwZXJjZW50ICovW1xuICAgICAgICAgIC0xMTk4ODcxNjMsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQyKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCIlXCI7XG59XG5cbnZhciBQZXJjZW50YWdlID0ge1xuICBwY3Q6IHBjdCxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDJcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDMocGFyYW0pIHtcbiAgcmV0dXJuIFwidXJsKFwiICsgKHBhcmFtWzFdICsgXCIpXCIpO1xufVxuXG52YXIgVXJsID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckM1xufTtcblxuZnVuY3Rpb24gY2goeCkge1xuICByZXR1cm4gLyogYGNoICovW1xuICAgICAgICAgIDIyMTgxLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZW0oeCkge1xuICByZXR1cm4gLyogYGVtICovW1xuICAgICAgICAgIDIyNjMyLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gZXgoeCkge1xuICByZXR1cm4gLyogYGV4ICovW1xuICAgICAgICAgIDIyNjQzLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmVtKHgpIHtcbiAgcmV0dXJuIC8qIGByZW0gKi9bXG4gICAgICAgICAgNTY5MTczOCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZoKHgpIHtcbiAgcmV0dXJuIC8qIGB2aCAqL1tcbiAgICAgICAgICAyNjQxOCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZ3KHgpIHtcbiAgcmV0dXJuIC8qIGB2dyAqL1tcbiAgICAgICAgICAyNjQzMyxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZtaW4oeCkge1xuICByZXR1cm4gLyogYHZtaW4gKi9bXG4gICAgICAgICAgLTgzMzQ3MDc1NixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHZtYXgoeCkge1xuICByZXR1cm4gLyogYHZtYXggKi9bXG4gICAgICAgICAgLTgzMzQ3MjUzMCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHB4KHgpIHtcbiAgcmV0dXJuIC8qIGBweCAqL1tcbiAgICAgICAgICAyNTA5NixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHB4RmxvYXQoeCkge1xuICByZXR1cm4gLyogYHB4RmxvYXQgKi9bXG4gICAgICAgICAgLTEwNDA0ODQ3NDgsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBjbSh4KSB7XG4gIHJldHVybiAvKiBgY20gKi9bXG4gICAgICAgICAgMjIxODYsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBtbSh4KSB7XG4gIHJldHVybiAvKiBgbW0gKi9bXG4gICAgICAgICAgMjQ0MTYsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBpbmNoKHgpIHtcbiAgcmV0dXJuIC8qIGBpbmNoICovW1xuICAgICAgICAgIC05Nzc1ODY3NDIsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBwYyh4KSB7XG4gIHJldHVybiAvKiBgcGMgKi9bXG4gICAgICAgICAgMjUwNzUsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBwdCh4KSB7XG4gIHJldHVybiAvKiBgcHQgKi9bXG4gICAgICAgICAgMjUwOTIsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ0KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCIwXCI7XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgaWYgKHZhcmlhbnQgPj0gMjI2MzIpIHtcbiAgICBpZiAodmFyaWFudCA+PSAyNTA5Mikge1xuICAgICAgaWYgKHZhcmlhbnQgIT09IDI1MDk2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI2NDMzKSB7XG4gICAgICAgICAgaWYgKHZhcmlhbnQgPj0gNTY5MTczOCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInJlbVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidndcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNjQxOCkge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2aFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJwdFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjQ0MTYpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDI1MDc1KSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJwY1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIm1tXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDIyNjQzKSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZXhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImVtXCI7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID49IC04MzM0NzA3NTYpIHtcbiAgICBpZiAodmFyaWFudCA+PSAyMjE4MSkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjIxODYpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImNtXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiY2hcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTExOTg4NzE2Mykge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZtaW5cIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTk3NzU4Njc0Mikge1xuICAgIGlmICh2YXJpYW50ID49IC04MzM0NzI1MzApIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2bWF4XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJpblwiO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA+PSAtMTA0MDQ4NDc0OCkge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICB9XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICBpZiAobWF0Y2hbMF0gPj0gNTc0NTAyNCkge1xuICAgIHJldHVybiBcImNhbGMoXCIgKyAodG9TdHJpbmckNChtYXRjaFsxXSkgKyAoXCIgLSBcIiArICh0b1N0cmluZyQ0KG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImNhbGMoXCIgKyAodG9TdHJpbmckNChtYXRjaFsxXSkgKyAoXCIgKyBcIiArICh0b1N0cmluZyQ0KG1hdGNoWzJdKSArIFwiKVwiKSkpO1xuICB9XG59XG5cbnZhciBMZW5ndGggPSB7XG4gIGNoOiBjaCxcbiAgZW06IGVtLFxuICBleDogZXgsXG4gIHJlbTogcmVtLFxuICB2aDogdmgsXG4gIHZ3OiB2dyxcbiAgdm1pbjogdm1pbixcbiAgdm1heDogdm1heCxcbiAgcHg6IHB4LFxuICBweEZsb2F0OiBweEZsb2F0LFxuICBjbTogY20sXG4gIG1tOiBtbSxcbiAgaW5jaDogaW5jaCxcbiAgcGM6IHBjLFxuICBwdDogcHQsXG4gIHplcm86IC8qIHplcm8gKi8tNzg5NTA4MzEyLFxuICB0b1N0cmluZzogdG9TdHJpbmckNFxufTtcblxuZnVuY3Rpb24gZGVnKHgpIHtcbiAgcmV0dXJuIC8qIGBkZWcgKi9bXG4gICAgICAgICAgNDk5NTUyNixcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJhZCh4KSB7XG4gIHJldHVybiAvKiBgcmFkICovW1xuICAgICAgICAgIDU2OTA4MzcsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBncmFkKHgpIHtcbiAgcmV0dXJuIC8qIGBncmFkICovW1xuICAgICAgICAgIC05OTk1Njc0MTAsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0dXJuKHgpIHtcbiAgcmV0dXJuIC8qIGB0dXJuICovW1xuICAgICAgICAgIC04NTUyNTAwNTEsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ1KHBhcmFtKSB7XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IDQ5OTU1MjYpIHtcbiAgICBpZiAodmFyaWFudCA+PSA1NjkwODM3KSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicmFkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJkZWdcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtODU1MjUwMDUxKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInR1cm5cIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZ3JhZFwiO1xuICB9XG59XG5cbnZhciBBbmdsZSA9IHtcbiAgZGVnOiBkZWcsXG4gIHJhZDogcmFkLFxuICBncmFkOiBncmFkLFxuICB0dXJuOiB0dXJuLFxuICB0b1N0cmluZzogdG9TdHJpbmckNVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNihwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNTY5NTA4Mikge1xuICAgIHJldHVybiBcInJ0bFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImx0clwiO1xuICB9XG59XG5cbnZhciBEaXJlY3Rpb24gPSB7XG4gIGx0cjogLyogbHRyICovNTM5NjcxNCxcbiAgcnRsOiAvKiBydGwgKi81Njk1MDgyLFxuICB0b1N0cmluZzogdG9TdHJpbmckNlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNyhwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDEwNjE1MTU2KSB7XG4gICAgaWYgKHBhcmFtID49IDE4ODI2MzcyMSkge1xuICAgICAgaWYgKHBhcmFtID49IDkwMzEzNDQxMikge1xuICAgICAgICByZXR1cm4gXCJyZWxhdGl2ZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic3RpY2t5XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAxMDAzOTIxMTApIHtcbiAgICAgIHJldHVybiBcInN0YXRpY1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhYnNvbHV0ZVwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJmaXhlZFwiO1xuICB9XG59XG5cbnZhciBQb3NpdGlvbiA9IHtcbiAgYWJzb2x1dGU6IC8qIGFic29sdXRlICovLTEwMTM1OTI0NTcsXG4gIHJlbGF0aXZlOiAvKiByZWxhdGl2ZSAqLzkwMzEzNDQxMixcbiAgJCRzdGF0aWM6IC8qIHN0YXRpYyAqLzEwMDM5MjExMCxcbiAgZml4ZWQ6IC8qIGZpeGVkICovMTA2MTUxNTYsXG4gIHN0aWNreTogLyogc3RpY2t5ICovMTg4MjYzNzIxLFxuICB0b1N0cmluZzogdG9TdHJpbmckN1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckOChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTM2NzY3NDI1MCkge1xuICAgIGlmIChwYXJhbSA+PSA0MjM2MTA5NjkpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4ODg5NjAzMzMpIHtcbiAgICAgICAgcmV0dXJuIFwiYmxvY2tcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImlubGluZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gMzY1MTY1Nzk2KSB7XG4gICAgICByZXR1cm4gXCJob3Jpem9udGFsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInZlcnRpY2FsXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYm90aFwiO1xuICB9XG59XG5cbnZhciBSZXNpemUgPSB7XG4gIG5vbmU6IC8qIG5vbmUgKi8tOTIyMDg2NzI4LFxuICBib3RoOiAvKiBib3RoICovLTEwNTUxNjAxOTEsXG4gIGhvcml6b250YWw6IC8qIGhvcml6b250YWwgKi8zNjUxNjU3OTYsXG4gIHZlcnRpY2FsOiAvKiB2ZXJ0aWNhbCAqLy0zNjc2NzQyNTAsXG4gIGJsb2NrOiAvKiBibG9jayAqLzg4ODk2MDMzMyxcbiAgaW5saW5lOiAvKiBpbmxpbmUgKi80MjM2MTA5NjksXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ5KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICByZXR1cm4gXCJub3JtYWxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJzbWFsbENhcHNcIjtcbiAgfVxufVxuXG52YXIgRm9udFZhcmlhbnQgPSB7XG4gIG5vcm1hbDogLyogbm9ybWFsICovODEyMjE2ODcxLFxuICBzbWFsbENhcHM6IC8qIHNtYWxsQ2FwcyAqLy0zODY2ODQ3OTIsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ5XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxMChwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDczNDc5Mjg4MSkge1xuICAgIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJpdGFsaWNcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwib2JsaXF1ZVwiO1xuICB9XG59XG5cbnZhciBGb250U3R5bGUgPSB7XG4gIG5vcm1hbDogLyogbm9ybWFsICovODEyMjE2ODcxLFxuICBpdGFsaWM6IC8qIGl0YWxpYyAqLzEwNzIyODkxMixcbiAgb2JsaXF1ZTogLyogb2JsaXF1ZSAqLzczNDc5Mjg4MSxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDEwXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxMShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTU1MDU3NzcyMSkge1xuICAgIGlmIChwYXJhbSA+PSA2MDU1NzA0NSkge1xuICAgICAgaWYgKHBhcmFtID49IDQyNzI2NTMzNykge1xuICAgICAgICByZXR1cm4gXCJjb250ZW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJtYXgtY29udGVudFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTE5NTgwNTMzNikge1xuICAgICAgcmV0dXJuIFwiZml0LWNvbnRlbnRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibWluLWNvbnRlbnRcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTEwMTExMDIwNzcpIHtcbiAgICByZXR1cm4gXCJmaWxsXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbnZhciBGbGV4QmFzaXMgPSB7XG4gIGZpbGw6IC8qIGZpbGwgKi8tMTAxMTEwMjA3NyxcbiAgY29udGVudDogLyogY29udGVudCAqLzQyNzI2NTMzNyxcbiAgbWF4Q29udGVudDogLyogbWF4Q29udGVudCAqLzYwNTU3MDQ1LFxuICBtaW5Db250ZW50OiAvKiBtaW5Db250ZW50ICovLTU1MDU3NzcyMSxcbiAgZml0Q29udGVudDogLyogZml0Q29udGVudCAqLy0xOTU4MDUzMzYsXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxMVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMTIocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IC04NjI1ODQ5ODIpIHtcbiAgICBpZiAocGFyYW0gPj0gNTg5NTkyNjkwKSB7XG4gICAgICByZXR1cm4gXCJ2aXNpYmxlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImhpZGRlblwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTQ5NjkyNDAzKSB7XG4gICAgcmV0dXJuIFwic2Nyb2xsXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbnZhciBPdmVyZmxvdyA9IHtcbiAgaGlkZGVuOiAvKiBoaWRkZW4gKi8tODYyNTg0OTgyLFxuICB2aXNpYmxlOiAvKiB2aXNpYmxlICovNTg5NTkyNjkwLFxuICBzY3JvbGw6IC8qIHNjcm9sbCAqLy05NDk2OTI0MDMsXG4gIGF1dG86IC8qIGF1dG8gKi8tMTA2NTk1MTM3NyxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDEyXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxMyhwYXJhbSkge1xuICByZXR1cm4gXCJhdXRvXCI7XG59XG5cbnZhciBNYXJnaW4gPSB7XG4gIGF1dG86IC8qIGF1dG8gKi8tMTA2NTk1MTM3NyxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDEzXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxNChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTE1NTI1MDgzKSB7XG4gICAgaWYgKHBhcmFtID49IDU2OTM5NzgpIHtcbiAgICAgIHJldHVybiBcInJvd1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJyb3cgZGVuc2VcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTIyNzYwNTI3MSkge1xuICAgIHJldHVybiBcImNvbHVtbiBkZW5zZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImNvbHVtblwiO1xuICB9XG59XG5cbnZhciBHcmlkQXV0b0Zsb3cgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxNFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckMTUocGFyYW0pIHtcbiAgcmV0dXJuIFwibm9ybWFsXCI7XG59XG5cbnZhciBHcmlkQ29sdW1uR2FwID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMTVcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDE2KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA3OTY5MjE1NSkge1xuICAgIGlmIChwYXJhbSA+PSA0NzY2Njk4MTYpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA1MTY0MDYyNDgpIHtcbiAgICAgICAgcmV0dXJuIFwidGV4dC10b3BcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInRleHQtYm90dG9tXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAyODc4MjUwMjkpIHtcbiAgICAgIHJldHVybiBcImJhc2VsaW5lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInN1cGVyXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IDU3NDUwMjQpIHtcbiAgICBpZiAocGFyYW0gPj0gNTc5MzQyOSkge1xuICAgICAgcmV0dXJuIFwidG9wXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInN1YlwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNDQ1MDYxMzk3KSB7XG4gICAgcmV0dXJuIFwiYm90dG9tXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibWlkZGxlXCI7XG4gIH1cbn1cblxudmFyIFZlcnRpY2FsQWxpZ24gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQxNlxufTtcblxuZnVuY3Rpb24gc3RlcHMoaSwgZGlyKSB7XG4gIHJldHVybiAvKiBgc3RlcHMgKi9bXG4gICAgICAgICAgNjgwNTgwMjMsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZGlyXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBjdWJpY0JlemllcihhLCBiLCBjLCBkKSB7XG4gIHJldHVybiAvKiBgY3ViaWNCZXppZXIgKi9bXG4gICAgICAgICAgLTU1NDc4NTUyNyxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBiLFxuICAgICAgICAgICAgYyxcbiAgICAgICAgICAgIGRcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDE3KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTE5MzUyNTM4Nikge1xuICAgICAgaWYgKHBhcmFtID49IDEzODAyNzg5MSkge1xuICAgICAgICBpZiAocGFyYW0gPj0gNzE1NzQ4NjcyKSB7XG4gICAgICAgICAgcmV0dXJuIFwiZWFzZS1vdXRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJlYXNlLWluXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gMjA5MzM2MTUpIHtcbiAgICAgICAgcmV0dXJuIFwic3RlcC1lbmRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInN0ZXAtc3RhcnRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtICE9PSAtOTYwNjUxNTU3KSB7XG4gICAgICBpZiAocGFyYW0gPj0gLTMyNTAzNzU5NSkge1xuICAgICAgICByZXR1cm4gXCJsaW5lYXJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImVhc2VcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZWFzZS1pbi1vdXRcIjtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtWzBdID49IDY4MDU4MDIzKSB7XG4gICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgdmFyIGkgPSBtYXRjaFswXTtcbiAgICBpZiAobWF0Y2hbMV0gPj0gNjc4NTk1NTQpIHtcbiAgICAgIHJldHVybiBcInN0ZXBzKFwiICsgKGkudG9TdHJpbmcoKSArIFwiLCBzdGFydClcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInN0ZXBzKFwiICsgKGkudG9TdHJpbmcoKSArIFwiLCBlbmQpXCIpO1xuICAgIH1cbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHBhcmFtWzFdO1xuICByZXR1cm4gXCJjdWJpYy1iZXppZXIoXCIgKyAobWF0Y2gkMVswXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQxWzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDFbMl0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkMVszXS50b1N0cmluZygpICsgXCIpXCIpKSkpKSkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQxOChwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IDY1MjMyODMzOCkge1xuICAgICAgcmV0dXJuIFwiYXV0by1maWxsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImF1dG8tZml0XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpO1xuICB9XG59XG5cbnZhciBSZXBlYXRWYWx1ZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDE4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQxOShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTQ4NDE5NzczMikge1xuICAgIGlmIChwYXJhbSA+PSA3MDAzNDU2NjApIHtcbiAgICAgIGlmIChwYXJhbSA+PSA3ODcyNzk0MTkpIHtcbiAgICAgICAgaWYgKHBhcmFtID49IDgyNjkyMDI1OCkge1xuICAgICAgICAgIHJldHVybiBcInVwcGVyLWxhdGluXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwidXBwZXItcm9tYW5cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSA3Mzk5ODY0OTkpIHtcbiAgICAgICAgcmV0dXJuIFwibG93ZXItbGF0aW5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImxvd2VyLXJvbWFuXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNDIyMzMzMjk1KSB7XG4gICAgICByZXR1cm4gXCJkZWNpbWFsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInVwcGVyLWFscGhhXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC03MDM3NjE5MDQpIHtcbiAgICBpZiAocGFyYW0gPj0gLTY1NTIyODc3MSkge1xuICAgICAgaWYgKHBhcmFtID49IC01NzExMzE0OTEpIHtcbiAgICAgICAgcmV0dXJuIFwibG93ZXItYWxwaGFcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInNxdWFyZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTY5OTY4NjY1Nykge1xuICAgICAgcmV0dXJuIFwibG93ZXItZ3JlZWtcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY2lyY2xlXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiZGlzY1wiO1xuICB9XG59XG5cbnZhciBMaXN0U3R5bGVUeXBlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMTlcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDIwKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA1MDEyMzU3MDgpIHtcbiAgICByZXR1cm4gXCJpbnNpZGVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJvdXRzaWRlXCI7XG4gIH1cbn1cblxudmFyIExpc3RTdHlsZVBvc2l0aW9uID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMjBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDIxKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA0NzIwOTU3MzgpIHtcbiAgICBpZiAocGFyYW0gIT09IDU2ODQwMzUwNSkge1xuICAgICAgaWYgKHBhcmFtID49IDg1MjE3NTYzMykge1xuICAgICAgICBpZiAocGFyYW0gPj0gMTA0MjI4Mzc0MSkge1xuICAgICAgICAgIHJldHVybiBcImluc2V0XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiZG91YmxlXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gODQxOTc5NjI2KSB7XG4gICAgICAgIHJldHVybiBcImRvdHRlZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZ3JvdmVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZGFzaGVkXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtICE9PSAtODYyNTg0OTgyKSB7XG4gICAgaWYgKHBhcmFtID49IDEyOTU2NzE1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gMjA5OTMwMTk2KSB7XG4gICAgICAgIHJldHVybiBcIm91dHNldFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic29saWRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC0zNzk0Njg3NTcpIHtcbiAgICAgIHJldHVybiBcInJpZGdlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiaGlkZGVuXCI7XG4gIH1cbn1cblxudmFyIE91dGxpbmVTdHlsZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDIxXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQyMih4KSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmICh4ID49IC04MTgwMTE2Mykge1xuICAgICAgaWYgKHggPj0gLTIwNDI1NjExKSB7XG4gICAgICAgIGlmICh4ID49IDgxMjIxNjg3MSkge1xuICAgICAgICAgIGlmICh4ID49IDg4ODI2NDEyNykge1xuICAgICAgICAgICAgcmV0dXJuIFwiOTAwXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIjQwMFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh4ID49IDQzNDMyNjIxMSkge1xuICAgICAgICAgIHJldHVybiBcImxpZ2h0ZXJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCI1MDBcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh4ID49IC0yMTE2MDkyMikge1xuICAgICAgICByZXR1cm4gXCIyMDBcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIjgwMFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeCAhPT0gLTg1NTg5ODUzNSkge1xuICAgICAgaWYgKHggPj0gLTUzNDU3NTgyMikge1xuICAgICAgICBpZiAoeCA+PSAtMTg0Nzc0NDQyKSB7XG4gICAgICAgICAgcmV0dXJuIFwiMzAwXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiYm9sZGVyXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoeCA+PSAtODEyNzA5NjEzKSB7XG4gICAgICAgIHJldHVybiBcIjYwMFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiNzAwXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIjEwMFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geFsxXS50b1N0cmluZygpO1xuICB9XG59XG5cbnZhciBGb250V2VpZ2h0ID0ge1xuICB0aGluOiAvKiB0aGluICovLTg1NTg5ODUzNSxcbiAgZXh0cmFMaWdodDogLyogZXh0cmFMaWdodCAqLy0yMTE2MDkyMixcbiAgbGlnaHQ6IC8qIGxpZ2h0ICovLTE4NDc3NDQ0MixcbiAgbWVkaXVtOiAvKiBtZWRpdW0gKi8tMjA0MjU2MTEsXG4gIHNlbWlCb2xkOiAvKiBzZW1pQm9sZCAqLy04MTI3MDk2MTMsXG4gIGJvbGQ6IC8qIGJvbGQgKi8tMTA1NTE2MTk3OSxcbiAgZXh0cmFCb2xkOiAvKiBleHRyYUJvbGQgKi8tODE4MDExNjMsXG4gIGxpZ2h0ZXI6IC8qIGxpZ2h0ZXIgKi80MzQzMjYyMTEsXG4gIGJvbGRlcjogLyogYm9sZGVyICovLTUzNDU3NTgyMixcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDIyXG59O1xuXG5mdW5jdGlvbiB0cmFuc2xhdGUoeCwgeSkge1xuICByZXR1cm4gLyogYHRyYW5zbGF0ZSAqL1tcbiAgICAgICAgICAtOTE0MzY4NjkwLFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZTNkKHgsIHksIHopIHtcbiAgcmV0dXJuIC8qIGB0cmFuc2xhdGUzZCAqL1tcbiAgICAgICAgICAxNzgxODkyMTUsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIHpcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gLyogYHRyYW5zbGF0ZVggKi9bXG4gICAgICAgICAgMTA2NzI4Nzc4LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlWSh5KSB7XG4gIHJldHVybiAvKiBgdHJhbnNsYXRlWSAqL1tcbiAgICAgICAgICAxMDY3Mjg3NzksXG4gICAgICAgICAgeVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVaKHopIHtcbiAgcmV0dXJuIC8qIGB0cmFuc2xhdGVaICovW1xuICAgICAgICAgIDEwNjcyODc4MCxcbiAgICAgICAgICB6XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNjYWxlKHgsIHkpIHtcbiAgcmV0dXJuIC8qIGBzY2FsZSAqL1tcbiAgICAgICAgICAtMTIwNjY0NDM4LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNjYWxlM2QoeCwgeSwgeikge1xuICByZXR1cm4gLyogYHNjYWxlM2QgKi9bXG4gICAgICAgICAgLTQ1MjUxMzMxNyxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgelxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2NhbGVYKHgpIHtcbiAgcmV0dXJuIC8qIGBzY2FsZVggKi9bXG4gICAgICAgICAgMTAwOTExNzgzOCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNjYWxlWSh4KSB7XG4gIHJldHVybiAvKiBgc2NhbGVZICovW1xuICAgICAgICAgIDEwMDkxMTc4MzksXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzY2FsZVooeCkge1xuICByZXR1cm4gLyogYHNjYWxlWiAqL1tcbiAgICAgICAgICAxMDA5MTE3ODQwLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcm90YXRlKGEpIHtcbiAgcmV0dXJuIC8qIGByb3RhdGUgKi9bXG4gICAgICAgICAgLTg4NzA3NzI4NSxcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZTNkKHgsIHksIHosIGEpIHtcbiAgcmV0dXJuIC8qIGByb3RhdGUzZCAqL1tcbiAgICAgICAgICAxNDI4MDI5MjQsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeSxcbiAgICAgICAgICAgIHosXG4gICAgICAgICAgICBhXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGVYKGEpIHtcbiAgcmV0dXJuIC8qIGByb3RhdGVYICovW1xuICAgICAgICAgIC0yNDk3Mzg4NTEsXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGVZKGEpIHtcbiAgcmV0dXJuIC8qIGByb3RhdGVZICovW1xuICAgICAgICAgIC0yNDk3Mzg4NTAsXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGVaKGEpIHtcbiAgcmV0dXJuIC8qIGByb3RhdGVaICovW1xuICAgICAgICAgIC0yNDk3Mzg4NDksXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBza2V3KGEsIGEkcHJpbWUpIHtcbiAgcmV0dXJuIC8qIGBza2V3ICovW1xuICAgICAgICAgIC04NjY4Mzk3OTgsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgYSRwcmltZVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gc2tld1goYSkge1xuICByZXR1cm4gLyogYHNrZXdYICovW1xuICAgICAgICAgIC0zMTc0NjU0NixcbiAgICAgICAgICBhXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNrZXdZKGEpIHtcbiAgcmV0dXJuIC8qIGBza2V3WSAqL1tcbiAgICAgICAgICAtMzE3NDY1NDUsXG4gICAgICAgICAgYVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQyMyhwYXJhbSkge1xuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCA+PSAtMTIwNjY0NDM4KSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gMTA2NzI4Nzc4KSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAxNzgxODkyMTUpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMTAwOTExNzgzOCkge1xuICAgICAgICAgIHN3aXRjaCAodmFyaWFudCAtIDEwMDkxMTc4MzggfCAwKSB7XG4gICAgICAgICAgICBjYXNlIDAgOlxuICAgICAgICAgICAgICAgIHJldHVybiBcInNjYWxlWChcIiArIChwYXJhbVsxXS50b1N0cmluZygpICsgXCIpXCIpO1xuICAgICAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzY2FsZVkoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiKVwiKTtcbiAgICAgICAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2NhbGVaKFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIilcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgICAgICAgdmFyIHggPSBtYXRjaFswXTtcbiAgICAgICAgICB2YXIgeSA9IG1hdGNoWzFdO1xuICAgICAgICAgIHZhciB6ID0gbWF0Y2hbMl07XG4gICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlM2QoXCIgKyAodG9TdHJpbmckNCh4KSArIChcIiwgXCIgKyAodG9TdHJpbmckNCh5KSArIChcIiwgXCIgKyAodG9TdHJpbmckNCh6KSArIFwiKVwiKSkpKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDE0MjgwMjkyNCkge1xuICAgICAgICAgIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gICAgICAgICAgcmV0dXJuIFwicm90YXRlM2QoXCIgKyAobWF0Y2gkMVswXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQxWzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDFbMl0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAodG9TdHJpbmckNShtYXRjaCQxWzNdKSArIFwiKVwiKSkpKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHZhcmlhbnQgLSAxMDY3Mjg3NzggfCAwKSB7XG4gICAgICAgICAgY2FzZSAwIDpcbiAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlWChcIiArICh0b1N0cmluZyQ0KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICAgICAgICBjYXNlIDEgOlxuICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFuc2xhdGVZKFwiICsgKHRvU3RyaW5nJDQocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgICAgIGNhc2UgMiA6XG4gICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZVooXCIgKyAodG9TdHJpbmckNChwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZhcmlhbnQgPT09IC0zMTc0NjU0Nikge1xuICAgICAgICByZXR1cm4gXCJza2V3WChcIiArICh0b1N0cmluZyQ1KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YXJpYW50ID49IC0zMTc0NjU0NSkge1xuICAgICAgICByZXR1cm4gXCJza2V3WShcIiArICh0b1N0cmluZyQ1KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCQyID0gcGFyYW1bMV07XG4gICAgICB2YXIgeCQxID0gbWF0Y2gkMlswXTtcbiAgICAgIHZhciB5JDEgPSBtYXRjaCQyWzFdO1xuICAgICAgcmV0dXJuIFwic2NhbGUoXCIgKyAoeCQxLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKHkkMS50b1N0cmluZygpICsgXCIpXCIpKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTg4NzA3NzI4NSkge1xuICAgIGlmICh2YXJpYW50ID49IC00NTI1MTMzMTcpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IC0yNDk3Mzg4NTEpIHtcbiAgICAgICAgc3dpdGNoICh2YXJpYW50ICsgMjQ5NzM4ODUxIHwgMCkge1xuICAgICAgICAgIGNhc2UgMCA6XG4gICAgICAgICAgICAgIHJldHVybiBcInJvdGF0ZVgoXCIgKyAodG9TdHJpbmckNShwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgICAgICAgY2FzZSAxIDpcbiAgICAgICAgICAgICAgcmV0dXJuIFwicm90YXRlWShcIiArICh0b1N0cmluZyQ1KHBhcmFtWzFdKSArIFwiKVwiKTtcbiAgICAgICAgICBjYXNlIDIgOlxuICAgICAgICAgICAgICByZXR1cm4gXCJyb3RhdGVaKFwiICsgKHRvU3RyaW5nJDUocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0Y2gkMyA9IHBhcmFtWzFdO1xuICAgICAgICByZXR1cm4gXCJzY2FsZTNkKFwiICsgKG1hdGNoJDNbMF0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkM1sxXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQzWzJdLnRvU3RyaW5nKCkgKyBcIilcIikpKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmFyaWFudCA8IC04NjY4Mzk3OTgpIHtcbiAgICAgICAgcmV0dXJuIFwicm90YXRlKFwiICsgKHRvU3RyaW5nJDUocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDQgPSBwYXJhbVsxXTtcbiAgICAgIHJldHVybiBcInNrZXcoXCIgKyAodG9TdHJpbmckNShtYXRjaCQ0WzBdKSArIChcIiwgXCIgKyAodG9TdHJpbmckNShtYXRjaCQ0WzFdKSArIFwiKVwiKSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodmFyaWFudCA8IC05MTQzNjg2OTApIHtcbiAgICAgIHJldHVybiBcInBlcnNwZWN0aXZlKFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIilcIik7XG4gICAgfVxuICAgIHZhciBtYXRjaCQ1ID0gcGFyYW1bMV07XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgKHRvU3RyaW5nJDQobWF0Y2gkNVswXSkgKyAoXCIsIFwiICsgKHRvU3RyaW5nJDQobWF0Y2gkNVsxXSkgKyBcIilcIikpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQyNChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gODEyMjE2ODcxKSB7XG4gICAgaWYgKHBhcmFtID49IDg5MjU4NjI5OCkge1xuICAgICAgcmV0dXJuIFwiYWx0ZXJuYXRlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSA1NDU0MjgyMzIpIHtcbiAgICByZXR1cm4gXCJhbHRlcm5hdGUtcmV2ZXJzZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInJldmVyc2VcIjtcbiAgfVxufVxuXG52YXIgQW5pbWF0aW9uRGlyZWN0aW9uID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMjRcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDI1KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAyNDU4NjExNjgpIHtcbiAgICBpZiAocGFyYW0gPj0gNzMzNjUzNzc0KSB7XG4gICAgICByZXR1cm4gXCJmb3J3YXJkc1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJiYWNrd2FyZHNcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTkyMjA4NjcyOCkge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJib3RoXCI7XG4gIH1cbn1cblxudmFyIEFuaW1hdGlvbkZpbGxNb2RlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMjVcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDI2KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJpbmZpbml0ZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpO1xuICB9XG59XG5cbnZhciBBbmltYXRpb25JdGVyYXRpb25Db3VudCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDI2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQyNyhwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTI3NjU0NTM2Mikge1xuICAgIHJldHVybiBcInBhdXNlZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInJ1bm5pbmdcIjtcbiAgfVxufVxuXG52YXIgQW5pbWF0aW9uUGxheVN0YXRlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMjdcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDI4KHgpIHtcbiAgaWYgKHggPj0gODIzMjg5NDMpIHtcbiAgICBpZiAoeCA+PSA0NzcxODExNjcpIHtcbiAgICAgIGlmICh4ID49IDYyNDM2NDMxNykge1xuICAgICAgICBpZiAoeCAhPT0gNjI2ODYyODk0KSB7XG4gICAgICAgICAgaWYgKHggPj0gOTM5OTA3MTU3KSB7XG4gICAgICAgICAgICBpZiAoeCA+PSA5NTEzNjYwMjcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwibmUtcmVzaXplXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gXCJub3QtYWxsb3dlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoeCA+PSA2NzY5MjA5MTYpIHtcbiAgICAgICAgICAgIHJldHVybiBcImNvbC1yZXNpemVcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwibnctcmVzaXplXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImNvbnRleHQtbWVudVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHggPj0gNTc3ODMyOTY2KSB7XG4gICAgICAgIGlmICh4ID49IDYyMTI1ODgwOSkge1xuICAgICAgICAgIHJldHVybiBcImUtcmVzaXplXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiZXctcmVzaXplXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoeCA+PSA1NjMxNzE3MjgpIHtcbiAgICAgICAgcmV0dXJuIFwiYWxpYXNcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm5lc3ctcmVzaXplXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4ID49IDMwMjM0ODU2MCkge1xuICAgICAgaWYgKHggIT09IDM2NTQ1MDI1NCkge1xuICAgICAgICBpZiAoeCA+PSA0NTc3NTc5NTQpIHtcbiAgICAgICAgICBpZiAoeCA+PSA0NjU4MTk4NDEpIHtcbiAgICAgICAgICAgIHJldHVybiBcImRlZmF1bHRcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwibi1yZXNpemVcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoeCA+PSAzODE2MjY0MzUpIHtcbiAgICAgICAgICByZXR1cm4gXCJ2ZXJ0aWNhbC10ZXh0XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwibm8tZHJvcFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJhbGwtc2Nyb2xsXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4ID49IDE4MDg5NzQ0Mikge1xuICAgICAgaWYgKHggPj0gMjk0MjU3MDk5KSB7XG4gICAgICAgIHJldHVybiBcInctcmVzaXplXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJjcm9zc2hhaXJcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHggPj0gMTAzNDc5MjEzKSB7XG4gICAgICByZXR1cm4gXCJwcm9ncmVzc1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJud3NlLXJlc2l6ZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh4ID49IC04NDAyODYyOTApIHtcbiAgICBpZiAoeCA+PSAtNDU5NjI3NzE3KSB7XG4gICAgICBpZiAoeCAhPT0gLTM0ODkwMzczNykge1xuICAgICAgICBpZiAoeCA+PSAtMTk2MjA5ODApIHtcbiAgICAgICAgICBpZiAoeCA+PSAtMTg3OTY1MTkpIHtcbiAgICAgICAgICAgIHJldHVybiBcIm5zLXJlc2l6ZVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJncmFiYmluZ1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh4ID49IC04ODczMjIwMCkge1xuICAgICAgICAgIHJldHVybiBcInpvb20taW5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJ6b29tLW91dFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJzLXJlc2l6ZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeCA+PSAtNzg2MzE3MTIzKSB7XG4gICAgICBpZiAoeCA+PSAtNjkzMDQ4MjgyKSB7XG4gICAgICAgIHJldHVybiBcInNlLXJlc2l6ZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwicG9pbnRlclwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeCA+PSAtODIyOTc3OTMxKSB7XG4gICAgICByZXR1cm4gXCJ3YWl0XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInJvdy1yZXNpemVcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoeCA+PSAtOTk5NTY3NDEyKSB7XG4gICAgaWYgKHggIT09IC05ODkxMjE4NTUpIHtcbiAgICAgIGlmICh4ID49IC05MjIwODY3MjgpIHtcbiAgICAgICAgaWYgKHggPj0gLTg1NjA0NDM3MSkge1xuICAgICAgICAgIHJldHVybiBcInRleHRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoeCA+PSAtOTMzMTc0NTExKSB7XG4gICAgICAgIHJldHVybiBcIm1vdmVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImdyYWJcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiaGVscFwiO1xuICAgIH1cbiAgfSBlbHNlIGlmICh4ID49IC0xMDQ0MDcxNDk5KSB7XG4gICAgaWYgKHggPj0gLTEwMjAwNDk5OTIpIHtcbiAgICAgIHJldHVybiBcInN3LXJlc2l6ZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjb3B5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHggPj0gLTEwNDQ1Njk2OTQpIHtcbiAgICByZXR1cm4gXCJjZWxsXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG59XG5cbnZhciBDdXJzb3IgPSB7XG4gIGF1dG86IC8qIGF1dG8gKi8tMTA2NTk1MTM3NyxcbiAgJCRkZWZhdWx0OiAvKiBkZWZhdWx0ICovNDY1ODE5ODQxLFxuICBub25lOiAvKiBub25lICovLTkyMjA4NjcyOCxcbiAgY29udGV4dE1lbnU6IC8qIGNvbnRleHRNZW51ICovNjI2ODYyODk0LFxuICBoZWxwOiAvKiBoZWxwICovLTk4OTEyMTg1NSxcbiAgcG9pbnRlcjogLyogcG9pbnRlciAqLy03ODYzMTcxMjMsXG4gIHByb2dyZXNzOiAvKiBwcm9ncmVzcyAqLzEwMzQ3OTIxMyxcbiAgd2FpdDogLyogd2FpdCAqLy04MjI5Nzc5MzEsXG4gIGNlbGw6IC8qIGNlbGwgKi8tMTA0NDU2OTY5NCxcbiAgY3Jvc3NoYWlyOiAvKiBjcm9zc2hhaXIgKi8xODA4OTc0NDIsXG4gIHRleHQ6IC8qIHRleHQgKi8tODU2MDQ0MzcxLFxuICB2ZXJ0aWNhbFRleHQ6IC8qIHZlcnRpY2FsVGV4dCAqLzM4MTYyNjQzNSxcbiAgYWxpYXM6IC8qIGFsaWFzICovNTYzMTcxNzI4LFxuICBjb3B5OiAvKiBjb3B5ICovLTEwNDQwNzE0OTksXG4gIG1vdmU6IC8qIG1vdmUgKi8tOTMzMTc0NTExLFxuICBub0Ryb3A6IC8qIG5vRHJvcCAqLzMwMjM0ODU2MCxcbiAgbm90QWxsb3dlZDogLyogbm90QWxsb3dlZCAqLzkzOTkwNzE1NyxcbiAgZ3JhYjogLyogZ3JhYiAqLy05OTk1Njc0MTIsXG4gIGdyYWJiaW5nOiAvKiBncmFiYmluZyAqLy0xOTYyMDk4MCxcbiAgYWxsU2Nyb2xsOiAvKiBhbGxTY3JvbGwgKi8zNjU0NTAyNTQsXG4gIGNvbFJlc2l6ZTogLyogY29sUmVzaXplICovNjc2OTIwOTE2LFxuICByb3dSZXNpemU6IC8qIHJvd1Jlc2l6ZSAqLy04NDAyODYyOTAsXG4gIG5SZXNpemU6IC8qIG5SZXNpemUgKi80NTc3NTc5NTQsXG4gIGVSZXNpemU6IC8qIGVSZXNpemUgKi82MjEyNTg4MDksXG4gIHNSZXNpemU6IC8qIHNSZXNpemUgKi8tMzQ4OTAzNzM3LFxuICB3UmVzaXplOiAvKiB3UmVzaXplICovMjk0MjU3MDk5LFxuICBuZVJlc2l6ZTogLyogbmVSZXNpemUgKi85NTEzNjYwMjcsXG4gIG53UmVzaXplOiAvKiBud1Jlc2l6ZSAqLzYyNDM2NDMxNyxcbiAgc2VSZXNpemU6IC8qIHNlUmVzaXplICovLTY5MzA0ODI4MixcbiAgc3dSZXNpemU6IC8qIHN3UmVzaXplICovLTEwMjAwNDk5OTIsXG4gIGV3UmVzaXplOiAvKiBld1Jlc2l6ZSAqLzU3NzgzMjk2NixcbiAgbnNSZXNpemU6IC8qIG5zUmVzaXplICovLTE4Nzk2NTE5LFxuICBuZXN3UmVzaXplOiAvKiBuZXN3UmVzaXplICovNDc3MTgxMTY3LFxuICBud3NlUmVzaXplOiAvKiBud3NlUmVzaXplICovODIzMjg5NDMsXG4gIHpvb21JbjogLyogem9vbUluICovLTg4NzMyMjAwLFxuICB6b29tT3V0OiAvKiB6b29tT3V0ICovLTQ1OTYyNzcxNyxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDI4XG59O1xuXG5mdW5jdGlvbiByZ2IociwgZywgYikge1xuICByZXR1cm4gLyogYHJnYiAqL1tcbiAgICAgICAgICA1NjkyMTczLFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgcixcbiAgICAgICAgICAgIGcsXG4gICAgICAgICAgICBiXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgcmV0dXJuIC8qIGByZ2JhICovW1xuICAgICAgICAgIC04NzgxMjg5NzIsXG4gICAgICAgICAgLyogdHVwbGUgKi9bXG4gICAgICAgICAgICByLFxuICAgICAgICAgICAgZyxcbiAgICAgICAgICAgIGIsXG4gICAgICAgICAgICBhXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBoc2woaCwgcywgbCkge1xuICByZXR1cm4gLyogYGhzbCAqL1tcbiAgICAgICAgICA1MTk3NTY5LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgaCxcbiAgICAgICAgICAgIC8qIGBwZXJjZW50ICovW1xuICAgICAgICAgICAgICAtMTE5ODg3MTYzLFxuICAgICAgICAgICAgICBzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgLyogYHBlcmNlbnQgKi9bXG4gICAgICAgICAgICAgIC0xMTk4ODcxNjMsXG4gICAgICAgICAgICAgIGxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICByZXR1cm4gLyogYGhzbGEgKi9bXG4gICAgICAgICAgLTk4ODQyNTY2NCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGgsXG4gICAgICAgICAgICAvKiBgcGVyY2VudCAqL1tcbiAgICAgICAgICAgICAgLTExOTg4NzE2MyxcbiAgICAgICAgICAgICAgc1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIC8qIGBwZXJjZW50ICovW1xuICAgICAgICAgICAgICAtMTE5ODg3MTYzLFxuICAgICAgICAgICAgICBsXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgYVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gaGV4KHgpIHtcbiAgcmV0dXJuIC8qIGBoZXggKi9bXG4gICAgICAgICAgNTE5NDQ1OSxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9hbHBoYShwYXJhbSkge1xuICBpZiAocGFyYW1bMF0gPj0gNTQ5NjM5MCkge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCIlXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX3BlcmNlbnQocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiVcIjtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckMjkocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChwYXJhbSA+PSA1ODI2MjYxMzApIHtcbiAgICAgIHJldHVybiBcInRyYW5zcGFyZW50XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImN1cnJlbnRDb2xvclwiO1xuICAgIH1cbiAgfVxuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCAhPT0gLTg3ODEyODk3Mikge1xuICAgIGlmICh2YXJpYW50ID49IDUxOTc1NjkpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDU2OTIxNzMpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgICAgIHJldHVybiBcInJnYihcIiArIChtYXRjaFswXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaFsxXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaFsyXS50b1N0cmluZygpICsgXCIpXCIpKSkpKTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCQxID0gcGFyYW1bMV07XG4gICAgICByZXR1cm4gXCJoc2woXCIgKyAodG9TdHJpbmckNShtYXRjaCQxWzBdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX3BlcmNlbnQobWF0Y2gkMVsxXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9wZXJjZW50KG1hdGNoJDFbMl0pICsgXCIpXCIpKSkpKTtcbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPj0gNTE5NDQ1OSkge1xuICAgICAgcmV0dXJuIFwiI1wiICsgcGFyYW1bMV07XG4gICAgfVxuICAgIHZhciBtYXRjaCQyID0gcGFyYW1bMV07XG4gICAgcmV0dXJuIFwiaHNsYShcIiArICh0b1N0cmluZyQ1KG1hdGNoJDJbMF0pICsgKFwiLCBcIiArIChzdHJpbmdfb2ZfcGVyY2VudChtYXRjaCQyWzFdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX3BlcmNlbnQobWF0Y2gkMlsyXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9hbHBoYShtYXRjaCQyWzNdKSArIFwiKVwiKSkpKSkpKTtcbiAgfVxuICB2YXIgbWF0Y2gkMyA9IHBhcmFtWzFdO1xuICByZXR1cm4gXCJyZ2JhKFwiICsgKG1hdGNoJDNbMF0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkM1sxXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQzWzJdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDNbM10udG9TdHJpbmcoKSArIFwiKVwiKSkpKSkpKTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckMzAocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDQ3MjA5NTczOCkge1xuICAgIGlmIChwYXJhbSAhPT0gNTY4NDAzNTA1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gODUyMTc1NjMzKSB7XG4gICAgICAgIGlmIChwYXJhbSA+PSAxMDQyMjgzNzQxKSB7XG4gICAgICAgICAgcmV0dXJuIFwiaW5zZXRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJkb3VibGVcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSA4NDE5Nzk2MjYpIHtcbiAgICAgICAgcmV0dXJuIFwiZG90dGVkXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJncm9vdmVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZGFzaGVkXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtICE9PSAtODYyNTg0OTgyKSB7XG4gICAgaWYgKHBhcmFtID49IDEyOTU2NzE1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gMjA5OTMwMTk2KSB7XG4gICAgICAgIHJldHVybiBcIm91dHNldFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwic29saWRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC0zNzk0Njg3NTcpIHtcbiAgICAgIHJldHVybiBcInJpZGdlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiaGlkZGVuXCI7XG4gIH1cbn1cblxudmFyIEJvcmRlclN0eWxlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDMxKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAtOTIyMDg2NzI4KSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImF1dG9cIjtcbiAgfVxufVxuXG52YXIgUG9pbnRlckV2ZW50cyA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDMxXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQzMihwYXJhbSkge1xuICByZXR1cm4gXCJub25lXCI7XG59XG5cbnZhciBQZXJzcGVjdGl2ZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDMyXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQzMyhwYXJhbSkge1xuICByZXR1cm4gXCJub3JtYWxcIjtcbn1cblxudmFyIExldHRlclNwYWNpbmcgPSB7XG4gIG5vcm1hbDogLyogbm9ybWFsICovODEyMjE2ODcxLFxuICB0b1N0cmluZzogdG9TdHJpbmckMzNcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDM0KHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJub3JtYWxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKTtcbiAgfVxufVxuXG52YXIgTGluZUhlaWdodCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDM0XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQzNShwYXJhbSkge1xuICByZXR1cm4gXCJub3JtYWxcIjtcbn1cblxudmFyIFdvcmRTcGFjaW5nID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckMzVcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDM2KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gNDIzNjEwOTY5KSB7XG4gICAgaWYgKHBhcmFtID49IDg4ODk2MDMzMykge1xuICAgICAgcmV0dXJuIFwiYmxvY2tcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwicnVuLWluXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImlubGluZVwiO1xuICB9XG59XG5cbnZhciBEaXNwbGF5T3V0c2lkZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDM2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQzNyhwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC05OTk1NjU2MjYpIHtcbiAgICBpZiAocGFyYW0gPj0gMTgyNjk1OTUwKSB7XG4gICAgICByZXR1cm4gXCJ0YWJsZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJmbGV4XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImdyaWRcIjtcbiAgfVxufVxuXG52YXIgRGlzcGxheUluc2lkZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDM3XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQzOChwYXJhbSkge1xuICByZXR1cm4gXCJsaXN0LWl0ZW1cIjtcbn1cblxudmFyIERpc3BsYXlMaXN0SXRlbSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDM4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQzOShwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNjA2NDE5MjA0KSB7XG4gICAgaWYgKHBhcmFtID49IDg1MDIwOTU2Mykge1xuICAgICAgaWYgKHBhcmFtID49IDEwNTQ4MjY2MTYpIHtcbiAgICAgICAgcmV0dXJuIFwidGFibGUtY2FwdGlvblwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidGFibGUtY29sdW1uLWdyb3VwXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSA3OTM5MTI1MjgpIHtcbiAgICAgIHJldHVybiBcInRhYmxlLWNlbGxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwidGFibGUtaGVhZGVyLWdyb3VwXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC04MzY3MjU1MTcpIHtcbiAgICBpZiAocGFyYW0gPj0gOTcxMjI2OTIpIHtcbiAgICAgIHJldHVybiBcInRhYmxlLWNvbHVtblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJ0YWJsZS1yb3ctZ3JvdXBcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTg0MzEyOTE3Mikge1xuICAgIHJldHVybiBcInRhYmxlLXJvd1wiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInRhYmxlLWZvb3Rlci1ncm91cFwiO1xuICB9XG59XG5cbnZhciBEaXNwbGF5SW50ZXJuYWwgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQzOVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDAocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDc5MDg4OTc1NCkge1xuICAgIHJldHVybiBcImNvbnRlbnRzXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG59XG5cbnZhciBEaXNwbGF5Qm94ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNDBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDQxKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA1MzMyMzMxNCkge1xuICAgIGlmIChwYXJhbSA+PSA2NDcxMjEyNykge1xuICAgICAgcmV0dXJuIFwiaW5saW5lLWdyaWRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiaW5saW5lLWZsZXhcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTE0Nzc4NTY3Nikge1xuICAgIHJldHVybiBcImlubGluZS1ibG9ja1wiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImlubGluZS10YWJsZVwiO1xuICB9XG59XG5cbnZhciBEaXNwbGF5TGVnYWN5ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNDFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDQyKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTE2MjMxNjc5NSkge1xuICAgIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInN0cmV0Y2hcIjtcbiAgfVxufVxuXG52YXIgSnVzdGlmeVNlbGYgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0MlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDMocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDY3ODU5NTU0KSB7XG4gICAgaWYgKHBhcmFtICE9PSA5ODI0ODE0OSkge1xuICAgICAgaWYgKHBhcmFtID49IDkyNDI2ODA2Nikge1xuICAgICAgICBpZiAocGFyYW0gPj0gMTA0MDY0NTQzMCkge1xuICAgICAgICAgIHJldHVybiBcInNlbGYtc3RhcnRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJmbGV4LWVuZFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtID49IDY2MjQzOTUyOSkge1xuICAgICAgICByZXR1cm4gXCJmbGV4LXN0YXJ0XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJzdGFydFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjZW50ZXJcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTM3OTMxOTMzMikge1xuICAgIGlmIChwYXJhbSA+PSA1MTgzNDc5OSkge1xuICAgICAgcmV0dXJuIFwic2VsZi1lbmRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTk0NDc2NDkyMSkge1xuICAgIHJldHVybiBcImxlZnRcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJlbmRcIjtcbiAgfVxufVxuXG52YXIgUG9zaXRpb25hbEFsaWdubWVudCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQzXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0NChwYXJhbSkge1xuICByZXR1cm4gXCJiYXNlbGluZVwiO1xufVxuXG52YXIgQmFzZWxpbmVBbGlnbm1lbnQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0NFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDUocGFyYW0pIHtcbiAgcmV0dXJuIFwibm9ybWFsXCI7XG59XG5cbnZhciBOb3JtYWxBbGlnbm1lbnQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0NVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDYocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IC0xNjIzMTY3OTUpIHtcbiAgICBpZiAocGFyYW0gPj0gNTE2NjgyMTQ2KSB7XG4gICAgICByZXR1cm4gXCJzcGFjZS1iZXR3ZWVuXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInN0cmV0Y2hcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTQ4NTg5NTc1Nykge1xuICAgIHJldHVybiBcInNwYWNlLWFyb3VuZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInNwYWNlLWV2ZW5seVwiO1xuICB9XG59XG5cbnZhciBEaXN0cmlidXRlZEFsaWdubWVudCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDQ2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ0NyhwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNjIyNTA4MzIpIHtcbiAgICBpZiAocGFyYW0gPj0gOTgyNDgxNDkpIHtcbiAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJqdXN0aWZ5XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC0zNzkzMTkzMzIpIHtcbiAgICByZXR1cm4gXCJyaWdodFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImxlZnRcIjtcbiAgfVxufVxuXG52YXIgVGV4dEFsaWduID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNDdcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDQ4KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gODEyMjE2ODcxKSB7XG4gICAgaWYgKHBhcmFtID49IDg5Mjc0ODE4OCkge1xuICAgICAgcmV0dXJuIFwia2VlcC1hbGxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYnJlYWstYWxsXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICB9XG59XG5cbnZhciBXb3JkQnJlYWsgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0OFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNDkocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDY2MDg3MDAyOSkge1xuICAgIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4Njc5MTMzNTUpIHtcbiAgICAgICAgcmV0dXJuIFwibm93cmFwXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJub3JtYWxcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDcwNTQxNzk5Nikge1xuICAgICAgcmV0dXJuIFwiYnJlYWstc3BhY2VzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcInByZS13cmFwXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IDUzODQ0MDExOSkge1xuICAgIHJldHVybiBcInByZS1saW5lXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwicHJlXCI7XG4gIH1cbn1cblxudmFyIFdoaXRlU3BhY2UgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ0OVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNTAocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDgxMjIxNjg3MSkge1xuICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInN0cmV0Y2hcIjtcbiAgfVxufVxuXG52YXIgQWxpZ25JdGVtcyA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDUwXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1MShwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC0xNjIzMTY3OTUpIHtcbiAgICBpZiAocGFyYW0gPj0gODEyMjE2ODcxKSB7XG4gICAgICByZXR1cm4gXCJub3JtYWxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJzdHJldGNoXCI7XG4gIH1cbn1cblxudmFyIEFsaWduU2VsZiA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDUxXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1MihwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDY3ODU5NTU0KSB7XG4gICAgaWYgKHBhcmFtID49IDY2MjQzOTUyOSkge1xuICAgICAgaWYgKHBhcmFtID49IDkyNDI2ODA2Nikge1xuICAgICAgICByZXR1cm4gXCJmbGV4LWVuZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZmxleC1zdGFydFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gOTgyNDgxNDkpIHtcbiAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJlbmRcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic3RhcnRcIjtcbiAgfVxufVxuXG52YXIgQWxpZ25Db250ZW50ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNTJcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDUzKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTkyMjA4NjcyOCkge1xuICAgIGlmIChwYXJhbSA+PSA0MjcwNjUzMDApIHtcbiAgICAgIGlmIChwYXJhbSA+PSA2MzU1MDI2MDQpIHtcbiAgICAgICAgcmV0dXJuIFwic2NhbGUtZG93blwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiY29udGFpblwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTg5OTQxNjI2NSkge1xuICAgICAgcmV0dXJuIFwiY292ZXJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZmlsbFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbn1cblxudmFyIE9iamVjdEZpdCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDUzXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1NChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTk0NDc2NDkyMSkge1xuICAgIGlmIChwYXJhbSA+PSAtMzc5MzE5MzMyKSB7XG4gICAgICBpZiAocGFyYW0gPj0gOTQzOTI3MDQyKSB7XG4gICAgICAgIHJldHVybiBcImlubGluZS1lbmRcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInJpZ2h0XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTIyMDg2NzI4KSB7XG4gICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImxlZnRcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW0gPj0gLTk2ODg4NjQ1NSkge1xuICAgIHJldHVybiBcImlubGluZS1zdGFydFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImJvdGhcIjtcbiAgfVxufVxuXG52YXIgQ2xlYXIgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1NFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNTUocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtOTQ0NzY0OTIxKSB7XG4gICAgaWYgKHBhcmFtID49IC0zNzkzMTkzMzIpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA5NDM5MjcwNDIpIHtcbiAgICAgICAgcmV0dXJuIFwiaW5saW5lLWVuZFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiaW5saW5lLXN0YXJ0XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImxlZnRcIjtcbiAgfVxufVxuXG52YXIgRmxvYXQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1NVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNTYocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtODYyNTg0OTgyKSB7XG4gICAgaWYgKHBhcmFtID49IDU4OTU5MjY5MCkge1xuICAgICAgcmV0dXJuIFwidmlzaWJsZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjb2xsYXBzZVwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJoaWRkZW5cIjtcbiAgfVxufVxuXG52YXIgVmlzaWJpbGl0eSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDU2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ1NyhwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gMTA2MTUxNTYpIHtcbiAgICByZXR1cm4gXCJmaXhlZFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImF1dG9cIjtcbiAgfVxufVxuXG52YXIgVGFibGVMYXlvdXQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1N1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNTgocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDExOTI4MzU1NSkge1xuICAgIHJldHVybiBcInNlcGFyYXRlXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY29sbGFwc2VcIjtcbiAgfVxufVxuXG52YXIgQm9yZGVyQ29sbGFwc2UgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ1OFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNTkocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtNDYzMTIxMjg4KSB7XG4gICAgaWYgKHBhcmFtID49IDg2NzkxMzM1NSkge1xuICAgICAgcmV0dXJuIFwibm93cmFwXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIndyYXBcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwid3JhcC1yZXZlcnNlXCI7XG4gIH1cbn1cblxudmFyIEZsZXhXcmFwID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNTlcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDYwKHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAxMzU0Nzc0ODQpIHtcbiAgICBpZiAocGFyYW0gPj0gMzc4OTUxMjA4KSB7XG4gICAgICByZXR1cm4gXCJyb3ctcmV2ZXJzZVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjb2x1bW4tcmV2ZXJzZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSA1NjkzOTc4KSB7XG4gICAgcmV0dXJuIFwicm93XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY29sdW1uXCI7XG4gIH1cbn1cblxudmFyIEZsZXhEaXJlY3Rpb24gPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2MFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNjEocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDkzMDcyNjMpIHtcbiAgICByZXR1cm4gXCJib3JkZXItYm94XCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY29udGVudC1ib3hcIjtcbiAgfVxufVxuXG52YXIgQm94U2l6aW5nID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNjFcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDYyKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gXCJhdXRvXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxudmFyIENvbHVtbkNvdW50ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNjJcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDYzKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTkyMjA4NjcyOCkge1xuICAgIGlmIChwYXJhbSA+PSA0ODQ3OTA1KSB7XG4gICAgICBpZiAocGFyYW0gPj0gNDI3MDY1MzAwKSB7XG4gICAgICAgIHJldHVybiBcImNvbnRhaW5cIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImFsbFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTg1NjA0NDM3MSkge1xuICAgICAgcmV0dXJuIFwidGV4dFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfVxufVxuXG52YXIgVXNlclNlbGVjdCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDYzXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ2NChwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gLTQyNTM0OTgzOSkge1xuICAgIGlmIChwYXJhbSA+PSAtNDE1MzMwMDMwKSB7XG4gICAgICByZXR1cm4gXCJ1cHBlcmNhc2VcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibG93ZXJjYXNlXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtID49IC01MDk4Njc2MDQpIHtcbiAgICByZXR1cm4gXCJjYXBpdGFsaXplXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG59XG5cbnZhciBUZXh0VHJhbnNmb3JtID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNjRcbn07XG5cbmZ1bmN0aW9uIGFyZWFzKHgpIHtcbiAgcmV0dXJuIC8qIGBhcmVhcyAqL1tcbiAgICAgICAgICA2Mjk1MTAyMTQsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ2NShwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAkJFN0cmluZy50cmltKExpc3QuZm9sZF9sZWZ0KChmdW5jdGlvbiAoY2FycnksIGVsZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FycnkgKyAoXCInXCIgKyAoZWxlbSArIFwiJyBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9KSwgXCJcIiwgcGFyYW1bMV0pKTtcbiAgfVxufVxuXG52YXIgR3JpZFRlbXBsYXRlQXJlYXMgPSB7XG4gIGFyZWFzOiBhcmVhcyxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDY1XG59O1xuXG5mdW5jdGlvbiBpZGVudCh4KSB7XG4gIHJldHVybiAvKiBgaWRlbnQgKi9bXG4gICAgICAgICAgOTMwNjkzODcyLFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbnVtKHgpIHtcbiAgcmV0dXJuIC8qIGBudW0gKi9bXG4gICAgICAgICAgNTQ5NjM5MCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIG51bUlkZW50KHgsIHkpIHtcbiAgcmV0dXJuIC8qIGBudW1JZGVudCAqL1tcbiAgICAgICAgICAtMTkyMzI1OTQyLFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHNwYW4oeCkge1xuICByZXR1cm4gLyogYHNwYW4gKi9bXG4gICAgICAgICAgLTg2NjU5MjA1NCxcbiAgICAgICAgICB4XG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDY2KHQpIHtcbiAgaWYgKHR5cGVvZiB0ID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwiYXV0b1wiO1xuICB9XG4gIHZhciB2YXJpYW50ID0gdFswXTtcbiAgaWYgKHZhcmlhbnQgPj0gNTQ5NjM5MCkge1xuICAgIGlmICh2YXJpYW50ID49IDkzMDY5Mzg3Mikge1xuICAgICAgcmV0dXJuIHRbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTdHJpbmcodFsxXSk7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID49IC0xOTIzMjU5NDIpIHtcbiAgICB2YXIgbWF0Y2ggPSB0WzFdO1xuICAgIHJldHVybiBTdHJpbmcobWF0Y2hbMF0pICsgKFwiIFwiICsgbWF0Y2hbMV0pO1xuICB9XG4gIHZhciBlID0gdFsxXTtcbiAgcmV0dXJuIFwic3BhbiBcIiArIChcbiAgICAgICAgICBlWzBdID49IDkzMDY5Mzg3MiA/IGVbMV0gOiBTdHJpbmcoZVsxXSlcbiAgICAgICAgKTtcbn1cblxudmFyIEdyaWRBcmVhID0ge1xuICBhdXRvOiAvKiBhdXRvICovLTEwNjU5NTEzNzcsXG4gIGlkZW50OiBpZGVudCxcbiAgbnVtOiBudW0sXG4gIG51bUlkZW50OiBudW1JZGVudCxcbiAgc3Bhbjogc3BhbixcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDY2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ2NyhwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IC05Nzc0MDA0Mikge1xuICAgIGlmICh2YXJpYW50ICE9PSAtMjk5Mjk0ODkpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDkzNDQwNzQyNikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAxMDM2ODcwOTYzKSB7XG4gICAgICAgICAgdmFyIGggPSBwYXJhbVsxXTtcbiAgICAgICAgICBpZiAodHlwZW9mIGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcImh1ZS1yb3RhdGUoMGRlZylcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiaHVlLXJvdGF0ZShcIiArICh0b1N0cmluZyQ1KGgpICsgXCIpXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICAgICAgaWYgKG1hdGNoWzBdID49IDU0OTYzOTApIHtcbiAgICAgICAgICByZXR1cm4gXCJjb250cmFzdChcIiArIChTdHJpbmcobWF0Y2hbMV0pICsgXCIpXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImNvbnRyYXN0KFwiICsgKG1hdGNoWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodmFyaWFudCA+PSA1MzQzMDg2MzApIHtcbiAgICAgICAgdmFyIG1hdGNoJDEgPSBwYXJhbVsxXTtcbiAgICAgICAgaWYgKG1hdGNoJDFbMF0gPj0gNTQ5NjM5MCkge1xuICAgICAgICAgIHJldHVybiBcImludmVydChcIiArIChTdHJpbmcobWF0Y2gkMVsxXSkgKyBcIilcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiaW52ZXJ0KFwiICsgKG1hdGNoJDFbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCQyID0gcGFyYW1bMV07XG4gICAgICBpZiAobWF0Y2gkMlswXSA+PSA1NDk2MzkwKSB7XG4gICAgICAgIHJldHVybiBcInNlcGlhKFwiICsgKFN0cmluZyhtYXRjaCQyWzFdKSArIFwiKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInNlcGlhKFwiICsgKG1hdGNoJDJbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtYXRjaCQzID0gcGFyYW1bMV07XG4gICAgaWYgKG1hdGNoJDNbMF0gPj0gNTQ5NjM5MCkge1xuICAgICAgcmV0dXJuIFwic2F0dXJhdGUoXCIgKyAoU3RyaW5nKG1hdGNoJDNbMV0pICsgXCIpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJzYXR1cmF0ZShcIiArIChtYXRjaCQzWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCAhPT0gLTU5NDUyNTg0MSkge1xuICAgIGlmICh2YXJpYW50ID49IC0zNDU2NzgzODkpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IC0yMTQ0NjQ1NjkpIHtcbiAgICAgICAgdmFyIG1hdGNoJDQgPSBwYXJhbVsxXTtcbiAgICAgICAgaWYgKG1hdGNoJDRbMF0gPj0gNTQ5NjM5MCkge1xuICAgICAgICAgIHJldHVybiBcImdyYXlzY2FsZShcIiArIChTdHJpbmcobWF0Y2gkNFsxXSkgKyBcIilcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiZ3JheXNjYWxlKFwiICsgKG1hdGNoJDRbMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCQ1ID0gcGFyYW1bMV07XG4gICAgICBpZiAobWF0Y2gkNVswXSA+PSA1NDk2MzkwKSB7XG4gICAgICAgIHJldHVybiBcIm9wYWNpdHkoXCIgKyAoU3RyaW5nKG1hdGNoJDVbMV0pICsgXCIpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwib3BhY2l0eShcIiArIChtYXRjaCQ1WzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFyaWFudCA8IC00NDU1NDI5NTkpIHtcbiAgICAgIHJldHVybiBcImJsdXIoXCIgKyAodG9TdHJpbmckNChwYXJhbVsxXSkgKyBcIilcIik7XG4gICAgfVxuICAgIHZhciBtYXRjaCQ2ID0gcGFyYW1bMV07XG4gICAgaWYgKG1hdGNoJDZbMF0gPj0gNTQ5NjM5MCkge1xuICAgICAgcmV0dXJuIFwiYnJpZ2h0bmVzcyhcIiArIChTdHJpbmcobWF0Y2gkNlsxXSkgKyBcIilcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImJyaWdodG5lc3MoXCIgKyAobWF0Y2gkNlsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICB9XG4gIH1cbiAgdmFyIG1hdGNoJDcgPSBwYXJhbVsxXTtcbiAgaWYgKG1hdGNoJDdbMF0gPj0gNTQ5NjM5MCkge1xuICAgIHJldHVybiBcImRyb3Atc2hhZG93KFwiICsgKFN0cmluZyhtYXRjaCQ3WzFdKSArIFwiKVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJkcm9wLXNoYWRvdyhcIiArIChtYXRjaCQ3WzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDY4KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTExODQzNzUyNSkge1xuICAgIGlmIChwYXJhbSA+PSAxMDYxNTE1Nikge1xuICAgICAgcmV0dXJuIFwiZml4ZWRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwic2Nyb2xsXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImxvY2FsXCI7XG4gIH1cbn1cblxudmFyIEJhY2tncm91bmRBdHRhY2htZW50ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNjhcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDY5KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gOTMwNzI2Mykge1xuICAgIGlmIChwYXJhbSA+PSA5NzI1NzU5MzApIHtcbiAgICAgIHJldHVybiBcInBhZGRpbmctYm94XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImNvbnRlbnQtYm94XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImJvcmRlci1ib3hcIjtcbiAgfVxufVxuXG52YXIgQmFja2dyb3VuZENsaXAgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ2OVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzAocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSA5MzA3MjYzKSB7XG4gICAgaWYgKHBhcmFtID49IDk3MjU3NTkzMCkge1xuICAgICAgcmV0dXJuIFwicGFkZGluZy1ib3hcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY29udGVudC1ib3hcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiYm9yZGVyLWJveFwiO1xuICB9XG59XG5cbnZhciBCYWNrZ3JvdW5kT3JpZ2luID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNzBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDcxKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTM3OTMxOTMzMikge1xuICAgIGlmIChwYXJhbSA+PSA5ODI0ODE0OSkge1xuICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImxlZnRcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgfVxufVxuXG52YXIgWCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDcxXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3MihwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDU3OTM0MjkpIHtcbiAgICBpZiAocGFyYW0gPj0gOTgyNDgxNDkpIHtcbiAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJib3R0b21cIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwidG9wXCI7XG4gIH1cbn1cblxudmFyIFkgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3MlxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzMocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtNDQ1MDYxMzk3KSB7XG4gICAgaWYgKHBhcmFtID49IDU3OTM0MjkpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA5ODI0ODE0OSkge1xuICAgICAgICByZXR1cm4gXCJjZW50ZXJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInRvcFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTM3OTMxOTMzMikge1xuICAgICAgcmV0dXJuIFwicmlnaHRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibGVmdFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJib3R0b21cIjtcbiAgfVxufVxuXG52YXIgQmFja2dyb3VuZFBvc2l0aW9uID0ge1xuICBYOiBYLFxuICBZOiBZLFxuICB0b1N0cmluZzogdG9TdHJpbmckNzNcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDc0KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSAyMzQ5NzkyNikge1xuICAgIGlmIChwYXJhbSA+PSA2NDY0MzcwMjEpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA2NDY0MzcwMjIpIHtcbiAgICAgICAgcmV0dXJuIFwicmVwZWF0LXlcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInJlcGVhdC14XCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAxMDg4Mjg1MDcpIHtcbiAgICAgIHJldHVybiBcInJlcGVhdFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJzcGFjZVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwYXJhbSA+PSAtMzEyMDg0NDAyKSB7XG4gICAgcmV0dXJuIFwicm91bmRcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJuby1yZXBlYXRcIjtcbiAgfVxufVxuXG52YXIgQmFja2dyb3VuZFJlcGVhdCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDc0XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3NShwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IDE2Njg4ODc4NSkge1xuICAgICAgcmV0dXJuIFwiZWxsaXBzaXNcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY2xpcFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGFyYW1bMV07XG4gIH1cbn1cblxudmFyIFRleHRPdmVyZmxvdyA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDc1XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ3NihwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IC05MjIwODY3MjgpIHtcbiAgICBpZiAocGFyYW0gPj0gNDEyMTU1NTY5KSB7XG4gICAgICBpZiAocGFyYW0gPj0gODg4NjY0NDEyKSB7XG4gICAgICAgIHJldHVybiBcImJsaW5rXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJsaW5lLXRocm91Z2hcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDEzMTE0MjkyNCkge1xuICAgICAgcmV0dXJuIFwidW5kZXJsaW5lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm92ZXJsaW5lXCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfVxufVxuXG52YXIgVGV4dERlY29yYXRpb25MaW5lID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckNzZcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDc3KHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gMTI5NTY3MTUpIHtcbiAgICBpZiAocGFyYW0gPj0gODQxOTc5NjI2KSB7XG4gICAgICBpZiAocGFyYW0gPj0gODUyMTc1NjMzKSB7XG4gICAgICAgIHJldHVybiBcImRvdWJsZVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiZG90dGVkXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSA1Njg0MDM1MDUpIHtcbiAgICAgIHJldHVybiBcImRhc2hlZFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJ3YXZ5XCI7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcInNvbGlkXCI7XG4gIH1cbn1cblxudmFyIFRleHREZWNvcmF0aW9uU3R5bGUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3N1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzgocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IC0xOTU4MDUzMzYpIHtcbiAgICByZXR1cm4gXCJmaXQtY29udGVudFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImF1dG9cIjtcbiAgfVxufVxuXG52YXIgV2lkdGggPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3OFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckNzkocGFyYW0pIHtcbiAgcmV0dXJuIFwibm9uZVwiO1xufVxuXG52YXIgTWF4V2lkdGggPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ3OVxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckODAocGFyYW0pIHtcbiAgcmV0dXJuIFwiYXV0b1wiO1xufVxuXG52YXIgSGVpZ2h0ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckODBcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDgxKHBhcmFtKSB7XG4gIHJldHVybiBcIm5vbmVcIjtcbn1cblxudmFyIE1heEhlaWdodCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDgxXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4MihwYXJhbSkge1xuICBpZiAocGFyYW0gIT09IDg5MzMzMjg1OSkge1xuICAgIGlmIChwYXJhbSA+PSAxMDU5OTIxNDQ5KSB7XG4gICAgICByZXR1cm4gXCJicmVhay13b3JkXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm5vcm1hbFwiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJhbnl3aGVyZVwiO1xuICB9XG59XG5cbnZhciBPdmVyZmxvd1dyYXAgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ4MlxufTtcblxuZnVuY3Rpb24gbGluZWFyR3JhZGllbnQoYW5nbGUsIHN0b3BzKSB7XG4gIHJldHVybiAvKiBgbGluZWFyR3JhZGllbnQgKi9bXG4gICAgICAgICAgNjE2Mzc5NjM3LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgYW5nbGUsXG4gICAgICAgICAgICBzdG9wc1xuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcmVwZWF0aW5nTGluZWFyR3JhZGllbnQoYW5nbGUsIHN0b3BzKSB7XG4gIHJldHVybiAvKiBgcmVwZWF0aW5nTGluZWFyR3JhZGllbnQgKi9bXG4gICAgICAgICAgLTE2MDI4MDY0NCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIGFuZ2xlLFxuICAgICAgICAgICAgc3RvcHNcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJhZGlhbEdyYWRpZW50KHN0b3BzKSB7XG4gIHJldHVybiAvKiBgcmFkaWFsR3JhZGllbnQgKi9bXG4gICAgICAgICAgMTE5NTQ4OTExLFxuICAgICAgICAgIHN0b3BzXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50KHN0b3BzKSB7XG4gIHJldHVybiAvKiBgcmVwZWF0aW5nUmFkaWFsR3JhZGllbnQgKi9bXG4gICAgICAgICAgLTY1NzExMTM3MCxcbiAgICAgICAgICBzdG9wc1xuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2Zfc3RvcHMoc3RvcHMpIHtcbiAgdmFyIHN0cmluZ3MgPSBCZWx0X0xpc3QubWFwKHN0b3BzLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgcmV0dXJuIHRvU3RyaW5nJDI5KHBhcmFtWzFdKSArIChcIiBcIiArIHRvU3RyaW5nJDQocGFyYW1bMF0pKTtcbiAgICAgICAgfSkpO1xuICB2YXIgc2VwYXJhdG9yID0gXCIsIFwiO1xuICB2YXIgX3N0cmluZ3MgPSBzdHJpbmdzO1xuICB2YXIgX2FjYyA9IFwiXCI7XG4gIHdoaWxlKHRydWUpIHtcbiAgICB2YXIgYWNjID0gX2FjYztcbiAgICB2YXIgc3RyaW5ncyQxID0gX3N0cmluZ3M7XG4gICAgaWYgKCFzdHJpbmdzJDEpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuICAgIHZhciB4cyA9IHN0cmluZ3MkMVsxXTtcbiAgICB2YXIgeCA9IHN0cmluZ3MkMVswXTtcbiAgICBpZiAoIXhzKSB7XG4gICAgICByZXR1cm4gYWNjICsgeDtcbiAgICB9XG4gICAgX2FjYyA9IGFjYyArICh4ICsgc2VwYXJhdG9yKTtcbiAgICBfc3RyaW5ncyA9IHhzO1xuICAgIGNvbnRpbnVlIDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckODMocGFyYW0pIHtcbiAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgaWYgKHZhcmlhbnQgPj0gMTE5NTQ4OTExKSB7XG4gICAgaWYgKHZhcmlhbnQgPCA2MTYzNzk2MzcpIHtcbiAgICAgIHJldHVybiBcInJhZGlhbC1ncmFkaWVudChcIiArIChzdHJpbmdfb2Zfc3RvcHMocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgIH1cbiAgICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgICByZXR1cm4gXCJsaW5lYXItZ3JhZGllbnQoXCIgKyAodG9TdHJpbmckNShtYXRjaFswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9zdG9wcyhtYXRjaFsxXSkgKyBcIilcIikpKTtcbiAgfVxuICBpZiAodmFyaWFudCA8IC0xNjAyODA2NDQpIHtcbiAgICByZXR1cm4gXCJyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50KFwiICsgKHN0cmluZ19vZl9zdG9wcyhwYXJhbVsxXSkgKyBcIilcIik7XG4gIH1cbiAgdmFyIG1hdGNoJDEgPSBwYXJhbVsxXTtcbiAgcmV0dXJuIFwicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudChcIiArICh0b1N0cmluZyQ1KG1hdGNoJDFbMF0pICsgKFwiLCBcIiArIChzdHJpbmdfb2Zfc3RvcHMobWF0Y2gkMVsxXSkgKyBcIilcIikpKTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckODQocGFyYW0pIHtcbiAgcmV0dXJuIFwibm9uZVwiO1xufVxuXG52YXIgQmFja2dyb3VuZEltYWdlID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckODRcbn07XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDg1KHBhcmFtKSB7XG4gIGlmIChwYXJhbSA+PSA5MzA3MjYzKSB7XG4gICAgaWYgKHBhcmFtID49IDQ4MTM2NjE4Mikge1xuICAgICAgaWYgKHBhcmFtID49IDk3MjU3NTkzMCkge1xuICAgICAgICByZXR1cm4gXCJwYWRkaW5nLWJveFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidmlldy1ib3hcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IDY1MTY2MTUyKSB7XG4gICAgICByZXR1cm4gXCJmaWxsLWJveFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJib3JkZXItYm94XCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKHBhcmFtICE9PSAtMjk4NjU4MTc5KSB7XG4gICAgaWYgKHBhcmFtID49IC0yMjk3MTA1NDEpIHtcbiAgICAgIHJldHVybiBcInN0cm9rZS1ib3hcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiY29udGVudC1ib3hcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwibWFyZ2luLWJveFwiO1xuICB9XG59XG5cbnZhciBHZW9tZXR5Qm94ID0ge1xuICBtYXJnaW5Cb3g6IC8qIG1hcmdpbkJveCAqLy0yOTg2NTgxNzksXG4gIGJvcmRlckJveDogLyogYm9yZGVyQm94ICovOTMwNzI2MyxcbiAgcGFkZGluZ0JveDogLyogcGFkZGluZ0JveCAqLzk3MjU3NTkzMCxcbiAgY29udGVudEJveDogLyogY29udGVudEJveCAqLy0xMDA4ODQ4MzAyLFxuICBmaWxsQm94OiAvKiBmaWxsQm94ICovNjUxNjYxNTIsXG4gIHN0cm9rZUJveDogLyogc3Ryb2tlQm94ICovLTIyOTcxMDU0MSxcbiAgdmlld0JveDogLyogdmlld0JveCAqLzQ4MTM2NjE4MixcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDg1XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4NihwYXJhbSkge1xuICByZXR1cm4gXCJub25lXCI7XG59XG5cbnZhciBDbGlwUGF0aCA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDg2XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ4NyhwYXJhbSkge1xuICBpZiAocGFyYW0gPj0gNTg5NTkyNjkwKSB7XG4gICAgcmV0dXJuIFwidmlzaWJsZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImhpZGRlblwiO1xuICB9XG59XG5cbnZhciBCYWNrZmFjZVZpc2liaWxpdHkgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ4N1xufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckODgocGFyYW0pIHtcbiAgaWYgKHBhcmFtICE9PSAtOTIyMDg2NzI4KSB7XG4gICAgaWYgKHBhcmFtID49IC04Nzg3Njc5OTYpIHtcbiAgICAgIHJldHVybiBcImluaXRpYWxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbn1cblxudmFyIEZsZXggPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ4OFxufTtcblxuZnVuY3Rpb24gdG9TdHJpbmckODkocGFyYW0pIHtcbiAgaWYgKHBhcmFtID49IDU4OTcwMjA0NSkge1xuICAgIHJldHVybiBcInByZXNlcnZlLTNkXCI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiZmxhdFwiO1xuICB9XG59XG5cbnZhciBUcmFuc2Zvcm1TdHlsZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDg5XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ5MChwYXJhbSkge1xuICByZXR1cm4gXCJub25lXCI7XG59XG5cbnZhciBMaXN0U3R5bGVJbWFnZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDkwXG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ5MShwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IC01MDQ3NzU5MDEpIHtcbiAgICAgIGlmIChwYXJhbSAhPT0gLTI3MDk2MjgxMCkge1xuICAgICAgICBpZiAocGFyYW0gPj0gLTQ2ODAwOTg2KSB7XG4gICAgICAgICAgaWYgKHBhcmFtID49IDU2MzgwOTI4OSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiZmFuZ3NvbmdcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFwiZmFudGFzeVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTc2NDA1NzkpIHtcbiAgICAgICAgICByZXR1cm4gXCJzZXJpZlwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcInN5c3RlbS11aVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJlbW9qaVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTcxODM3MzMzNCkge1xuICAgICAgaWYgKHBhcmFtID49IC01NTUzNjM5MDEpIHtcbiAgICAgICAgcmV0dXJuIFwibW9ub3NwYWNlXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJzYW5zLXNlcmlmXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtODYyOTg1NTMxKSB7XG4gICAgICByZXR1cm4gXCJjdXJzaXZlXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIm1hdGhcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDkyKHBhcmFtKSB7XG4gIGlmIChwYXJhbSAhPT0gLTg2NjI0Mzk0OSkge1xuICAgIGlmIChwYXJhbSA+PSA3MTQ5OTM2OTgpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4ODg5NjAzMzMpIHtcbiAgICAgICAgcmV0dXJuIFwiYmxvY2tcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcImZhbGxiYWNrXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSA1MTA1NzA0MDApIHtcbiAgICAgIHJldHVybiBcIm9wdGlvbmFsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwic3dhcFwiO1xuICB9XG59XG5cbnZhciB0b1N0cmluZyQ5MyA9IHRvU3RyaW5nJDE5O1xuXG52YXIgQ291bnRlclN0eWxlVHlwZSA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDkzXG59O1xuXG5mdW5jdGlvbiBjb3VudGVyKHN0eWxlT3B0LCBuYW1lKSB7XG4gIHZhciBzdHlsZSA9IHN0eWxlT3B0ICE9PSB1bmRlZmluZWQgPyBzdHlsZU9wdCA6IC8qIHVuc2V0ICovNjUzMTkzOTYxO1xuICByZXR1cm4gLyogYGNvdW50ZXIgKi9bXG4gICAgICAgICAgNDkyNDE2NzY0LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHN0eWxlXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ5NChwYXJhbSkge1xuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgdmFyIHN0eWxlID0gbWF0Y2hbMV07XG4gIHZhciBjb3VudGVyID0gbWF0Y2hbMF07XG4gIGlmIChzdHlsZSAhPT0gNjUzMTkzOTYxKSB7XG4gICAgcmV0dXJuIFwiY291bnRlcihcIiArIChjb3VudGVyICsgKFwiLFwiICsgKHRvU3RyaW5nJDE5KHN0eWxlKSArIFwiKVwiKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImNvdW50ZXIoXCIgKyAoY291bnRlciArIFwiKVwiKTtcbiAgfVxufVxuXG52YXIgQ291bnRlciA9IHtcbiAgY291bnRlcjogY291bnRlcixcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDk0XG59O1xuXG5mdW5jdGlvbiBjb3VudGVycyhzdHlsZU9wdCwgc2VwYXJhdG9yT3B0LCBuYW1lKSB7XG4gIHZhciBzdHlsZSA9IHN0eWxlT3B0ICE9PSB1bmRlZmluZWQgPyBzdHlsZU9wdCA6IC8qIHVuc2V0ICovNjUzMTkzOTYxO1xuICB2YXIgc2VwYXJhdG9yID0gc2VwYXJhdG9yT3B0ICE9PSB1bmRlZmluZWQgPyBzZXBhcmF0b3JPcHQgOiBcIlwiO1xuICByZXR1cm4gLyogYGNvdW50ZXJzICovW1xuICAgICAgICAgIDI4NzI3MjQzOSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBzZXBhcmF0b3IsXG4gICAgICAgICAgICBzdHlsZVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckOTUocGFyYW0pIHtcbiAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gIHZhciBzdHlsZSA9IG1hdGNoWzJdO1xuICB2YXIgc2VwYXJhdG9yID0gbWF0Y2hbMV07XG4gIHZhciBuYW1lID0gbWF0Y2hbMF07XG4gIGlmIChzdHlsZSAhPT0gNjUzMTkzOTYxKSB7XG4gICAgcmV0dXJuIFwiY291bnRlcnMoXCIgKyAobmFtZSArIChcIixcXFwiXCIgKyAoc2VwYXJhdG9yICsgKFwiXFxcIixcIiArICh0b1N0cmluZyQxOShzdHlsZSkgKyBcIilcIikpKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImNvdW50ZXJzKFwiICsgKG5hbWUgKyAoXCIsXFxcIlwiICsgKHNlcGFyYXRvciArIFwiXFxcIilcIikpKTtcbiAgfVxufVxuXG52YXIgQ291bnRlcnMgPSB7XG4gIGNvdW50ZXJzOiBjb3VudGVycyxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDk1XG59O1xuXG5mdW5jdGlvbiBpbmNyZW1lbnQodmFsdWVPcHQsIG5hbWUpIHtcbiAgdmFyIHZhbHVlID0gdmFsdWVPcHQgIT09IHVuZGVmaW5lZCA/IHZhbHVlT3B0IDogMTtcbiAgcmV0dXJuIC8qIGBpbmNyZW1lbnQgKi9bXG4gICAgICAgICAgODM4Nzk2ODQ3LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQ5NihwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9XG4gIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICByZXR1cm4gbWF0Y2hbMF0gKyAoXCIgXCIgKyBTdHJpbmcobWF0Y2hbMV0pKTtcbn1cblxudmFyIENvdW50ZXJJbmNyZW1lbnQgPSB7XG4gIGluY3JlbWVudDogaW5jcmVtZW50LFxuICB0b1N0cmluZzogdG9TdHJpbmckOTZcbn07XG5cbmZ1bmN0aW9uIHJlc2V0KHZhbHVlT3B0LCBuYW1lKSB7XG4gIHZhciB2YWx1ZSA9IHZhbHVlT3B0ICE9PSB1bmRlZmluZWQgPyB2YWx1ZU9wdCA6IDA7XG4gIHJldHVybiAvKiBgcmVzZXQgKi9bXG4gICAgICAgICAgLTQyMzA4MTUyMSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckOTcocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfVxuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgcmV0dXJuIG1hdGNoWzBdICsgKFwiIFwiICsgU3RyaW5nKG1hdGNoWzFdKSk7XG59XG5cbnZhciBDb3VudGVyUmVzZXQgPSB7XG4gIHJlc2V0OiByZXNldCxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDk3XG59O1xuXG5mdW5jdGlvbiBzZXQodmFsdWVPcHQsIG5hbWUpIHtcbiAgdmFyIHZhbHVlID0gdmFsdWVPcHQgIT09IHVuZGVmaW5lZCA/IHZhbHVlT3B0IDogMDtcbiAgcmV0dXJuIC8qIGBzZXQgKi9bXG4gICAgICAgICAgNTc0MTQ3NCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckOTgocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcIm5vbmVcIjtcbiAgfVxuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgcmV0dXJuIG1hdGNoWzBdICsgKFwiIFwiICsgU3RyaW5nKG1hdGNoWzFdKSk7XG59XG5cbnZhciBDb3VudGVyU2V0ID0ge1xuICBzZXQ6IHNldCxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDk4XG59O1xuXG5mdW5jdGlvbiB0b1N0cmluZyQ5OShwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IC03ODY5ODQxNzQpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA4MTIyMTY4NzEpIHtcbiAgICAgICAgaWYgKHBhcmFtID49IDg1MTg3MDM1Mykge1xuICAgICAgICAgIHJldHVybiBcIm5vLW9wZW4tcXVvdGVcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gXCJub3JtYWxcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSA2ODQ5NDk2MDQpIHtcbiAgICAgICAgcmV0dXJuIFwiY2xvc2UtcXVvdGVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIm9wZW4tcXVvdGVcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC05MjIwODY3MjgpIHtcbiAgICAgIHJldHVybiBcIm5vbmVcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwibm8tY2xvc2UtcXVvdGVcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAocGFyYW1bMF0gPj0gLTg1NjA0NDM3MSkge1xuICAgIHJldHVybiBcIlxcXCJcIiArIChTdHJpbmcocGFyYW1bMV0pICsgXCJcXFwiXCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImF0dHIoXCIgKyAocGFyYW1bMV0gKyBcIilcIik7XG4gIH1cbn1cblxudmFyIENvbnRlbnQgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ5OVxufTtcblxudmFyIFRpbWluZ0Z1bmN0aW9uID0ge1xuICBsaW5lYXI6IC8qIGxpbmVhciAqLy0zMjUwMzc1OTUsXG4gIGVhc2U6IC8qIGVhc2UgKi8tMTAyMjU4NzkyMixcbiAgZWFzZUluOiAvKiBlYXNlSW4gKi8xMzgwMjc4OTEsXG4gIGVhc2VPdXQ6IC8qIGVhc2VPdXQgKi83MTU3NDg2NzIsXG4gIGVhc2VJbk91dDogLyogZWFzZUluT3V0ICovLTk2MDY1MTU1NyxcbiAgc3RlcFN0YXJ0OiAvKiBzdGVwU3RhcnQgKi8tMTkzNTI1Mzg2LFxuICBzdGVwRW5kOiAvKiBzdGVwRW5kICovMjA5MzM2MTUsXG4gIHN0ZXBzOiBzdGVwcyxcbiAgY3ViaWNCZXppZXI6IGN1YmljQmV6aWVyLFxuICB0b1N0cmluZzogdG9TdHJpbmckMTdcbn07XG5cbnZhciBUcmFuc2Zvcm0gPSB7XG4gIHRyYW5zbGF0ZTogdHJhbnNsYXRlLFxuICB0cmFuc2xhdGUzZDogdHJhbnNsYXRlM2QsXG4gIHRyYW5zbGF0ZVg6IHRyYW5zbGF0ZVgsXG4gIHRyYW5zbGF0ZVk6IHRyYW5zbGF0ZVksXG4gIHRyYW5zbGF0ZVo6IHRyYW5zbGF0ZVosXG4gIHNjYWxlOiBzY2FsZSxcbiAgc2NhbGUzZDogc2NhbGUzZCxcbiAgc2NhbGVYOiBzY2FsZVgsXG4gIHNjYWxlWTogc2NhbGVZLFxuICBzY2FsZVo6IHNjYWxlWixcbiAgcm90YXRlOiByb3RhdGUsXG4gIHJvdGF0ZTNkOiByb3RhdGUzZCxcbiAgcm90YXRlWDogcm90YXRlWCxcbiAgcm90YXRlWTogcm90YXRlWSxcbiAgcm90YXRlWjogcm90YXRlWixcbiAgc2tldzogc2tldyxcbiAgc2tld1g6IHNrZXdYLFxuICBza2V3WTogc2tld1ksXG4gIHRvU3RyaW5nOiB0b1N0cmluZyQyM1xufTtcblxudmFyIENvbG9yID0ge1xuICByZ2I6IHJnYixcbiAgcmdiYTogcmdiYSxcbiAgaHNsOiBoc2wsXG4gIGhzbGE6IGhzbGEsXG4gIGhleDogaGV4LFxuICB0cmFuc3BhcmVudDogLyogdHJhbnNwYXJlbnQgKi81ODI2MjYxMzAsXG4gIGN1cnJlbnRDb2xvcjogLyogY3VycmVudENvbG9yICovMjkyMDUwNTM4LFxuICB0b1N0cmluZzogdG9TdHJpbmckMjlcbn07XG5cbnZhciBCYWNrZHJvcEZpbHRlciA9IHtcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDY3XG59O1xuXG52YXIgR3JhZGllbnQgPSB7XG4gIGxpbmVhckdyYWRpZW50OiBsaW5lYXJHcmFkaWVudCxcbiAgcmFkaWFsR3JhZGllbnQ6IHJhZGlhbEdyYWRpZW50LFxuICByZXBlYXRpbmdMaW5lYXJHcmFkaWVudDogcmVwZWF0aW5nTGluZWFyR3JhZGllbnQsXG4gIHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50OiByZXBlYXRpbmdSYWRpYWxHcmFkaWVudCxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDgzXG59O1xuXG52YXIgRm9udEZhbWlseU5hbWUgPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZyQ5MVxufTtcblxudmFyIEZvbnREaXNwbGF5ID0ge1xuICB0b1N0cmluZzogdG9TdHJpbmckOTJcbn07XG5cbmV4cG9ydCB7XG4gIENhc2NhZGluZyAsXG4gIFRpbWUgLFxuICBQZXJjZW50YWdlICxcbiAgVXJsICxcbiAgTGVuZ3RoICxcbiAgQW5nbGUgLFxuICBEaXJlY3Rpb24gLFxuICBQb3NpdGlvbiAsXG4gIFJlc2l6ZSAsXG4gIEZvbnRWYXJpYW50ICxcbiAgRm9udFN0eWxlICxcbiAgRmxleEJhc2lzICxcbiAgT3ZlcmZsb3cgLFxuICBNYXJnaW4gLFxuICBHcmlkQXV0b0Zsb3cgLFxuICBHcmlkQ29sdW1uR2FwICxcbiAgVmVydGljYWxBbGlnbiAsXG4gIFRpbWluZ0Z1bmN0aW9uICxcbiAgUmVwZWF0VmFsdWUgLFxuICBMaXN0U3R5bGVUeXBlICxcbiAgTGlzdFN0eWxlUG9zaXRpb24gLFxuICBPdXRsaW5lU3R5bGUgLFxuICBGb250V2VpZ2h0ICxcbiAgVHJhbnNmb3JtICxcbiAgQW5pbWF0aW9uRGlyZWN0aW9uICxcbiAgQW5pbWF0aW9uRmlsbE1vZGUgLFxuICBBbmltYXRpb25JdGVyYXRpb25Db3VudCAsXG4gIEFuaW1hdGlvblBsYXlTdGF0ZSAsXG4gIEN1cnNvciAsXG4gIENvbG9yICxcbiAgQm9yZGVyU3R5bGUgLFxuICBQb2ludGVyRXZlbnRzICxcbiAgUGVyc3BlY3RpdmUgLFxuICBMZXR0ZXJTcGFjaW5nICxcbiAgTGluZUhlaWdodCAsXG4gIFdvcmRTcGFjaW5nICxcbiAgRGlzcGxheU91dHNpZGUgLFxuICBEaXNwbGF5SW5zaWRlICxcbiAgRGlzcGxheUxpc3RJdGVtICxcbiAgRGlzcGxheUludGVybmFsICxcbiAgRGlzcGxheUJveCAsXG4gIERpc3BsYXlMZWdhY3kgLFxuICBKdXN0aWZ5U2VsZiAsXG4gIFBvc2l0aW9uYWxBbGlnbm1lbnQgLFxuICBCYXNlbGluZUFsaWdubWVudCAsXG4gIE5vcm1hbEFsaWdubWVudCAsXG4gIERpc3RyaWJ1dGVkQWxpZ25tZW50ICxcbiAgVGV4dEFsaWduICxcbiAgV29yZEJyZWFrICxcbiAgV2hpdGVTcGFjZSAsXG4gIEFsaWduSXRlbXMgLFxuICBBbGlnblNlbGYgLFxuICBBbGlnbkNvbnRlbnQgLFxuICBPYmplY3RGaXQgLFxuICBDbGVhciAsXG4gIEZsb2F0ICxcbiAgVmlzaWJpbGl0eSAsXG4gIFRhYmxlTGF5b3V0ICxcbiAgQm9yZGVyQ29sbGFwc2UgLFxuICBGbGV4V3JhcCAsXG4gIEZsZXhEaXJlY3Rpb24gLFxuICBCb3hTaXppbmcgLFxuICBDb2x1bW5Db3VudCAsXG4gIFVzZXJTZWxlY3QgLFxuICBUZXh0VHJhbnNmb3JtICxcbiAgR3JpZFRlbXBsYXRlQXJlYXMgLFxuICBHcmlkQXJlYSAsXG4gIEJhY2tkcm9wRmlsdGVyICxcbiAgQmFja2dyb3VuZEF0dGFjaG1lbnQgLFxuICBCYWNrZ3JvdW5kQ2xpcCAsXG4gIEJhY2tncm91bmRPcmlnaW4gLFxuICBCYWNrZ3JvdW5kUG9zaXRpb24gLFxuICBCYWNrZ3JvdW5kUmVwZWF0ICxcbiAgVGV4dE92ZXJmbG93ICxcbiAgVGV4dERlY29yYXRpb25MaW5lICxcbiAgVGV4dERlY29yYXRpb25TdHlsZSAsXG4gIFdpZHRoICxcbiAgTWF4V2lkdGggLFxuICBIZWlnaHQgLFxuICBNYXhIZWlnaHQgLFxuICBPdmVyZmxvd1dyYXAgLFxuICBHcmFkaWVudCAsXG4gIEJhY2tncm91bmRJbWFnZSAsXG4gIEdlb21ldHlCb3ggLFxuICBDbGlwUGF0aCAsXG4gIEJhY2tmYWNlVmlzaWJpbGl0eSAsXG4gIEZsZXggLFxuICBUcmFuc2Zvcm1TdHlsZSAsXG4gIExpc3RTdHlsZUltYWdlICxcbiAgRm9udEZhbWlseU5hbWUgLFxuICBGb250RGlzcGxheSAsXG4gIENvdW50ZXJTdHlsZVR5cGUgLFxuICBDb3VudGVyICxcbiAgQ291bnRlcnMgLFxuICBDb3VudGVySW5jcmVtZW50ICxcbiAgQ291bnRlclJlc2V0ICxcbiAgQ291bnRlclNldCAsXG4gIENvbnRlbnQgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzX0F0b21pY1R5cGVzIGZyb20gXCIuL0Nzc19BdG9taWNUeXBlcy5qc1wiO1xuXG52YXIgYWxpY2VibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkYwRjhGRlwiKTtcblxudmFyIGFudGlxdWV3aGl0ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGQUVCRDdcIik7XG5cbnZhciBhcXVhID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwRkZGRlwiKTtcblxudmFyIGFxdWFtYXJpbmUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiN0ZGRkQ0XCIpO1xuXG52YXIgYXp1cmUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjBGRkZGXCIpO1xuXG52YXIgYmVpZ2UgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjVGNURDXCIpO1xuXG52YXIgYmlzcXVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRTRDNFwiKTtcblxudmFyIGJsYWNrID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwMDAwMFwiKTtcblxudmFyIGJsYW5jaGVkYWxtb25kID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRUJDRFwiKTtcblxudmFyIGJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDAwMEZGXCIpO1xuXG52YXIgYmx1ZXZpb2xldCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4QTJCRTJcIik7XG5cbnZhciBicm93biA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJBNTJBMkFcIik7XG5cbnZhciBidXJseXdvb2QgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiREVCODg3XCIpO1xuXG52YXIgY2FkZXRibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjVGOUVBMFwiKTtcblxudmFyIGNoYXJ0cmV1c2UgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiN0ZGRjAwXCIpO1xuXG52YXIgY2hvY29sYXRlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkQyNjkxRVwiKTtcblxudmFyIGNvcmFsID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGN0Y1MFwiKTtcblxudmFyIGNvcm5mbG93ZXJibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjY0OTVFRFwiKTtcblxudmFyIGNvcm5zaWxrID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRjhEQ1wiKTtcblxudmFyIGNyaW1zb24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiREMxNDNDXCIpO1xuXG52YXIgY3lhbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMEZGRkZcIik7XG5cbnZhciBkYXJrYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDAwOEJcIik7XG5cbnZhciBkYXJrY3lhbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDhCOEJcIik7XG5cbnZhciBkYXJrZ29sZGVucm9kID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkI4ODYwQlwiKTtcblxudmFyIGRhcmtncmF5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkE5QTlBOVwiKTtcblxudmFyIGRhcmtncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDY0MDBcIik7XG5cbnZhciBkYXJrZ3JleSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJBOUE5QTlcIik7XG5cbnZhciBkYXJra2hha2kgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQkRCNzZCXCIpO1xuXG52YXIgZGFya21hZ2VudGEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOEIwMDhCXCIpO1xuXG52YXIgZGFya29saXZlZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNTU2QjJGXCIpO1xuXG52YXIgZGFya29yYW5nZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRjhDMDBcIik7XG5cbnZhciBkYXJrb3JjaGlkID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjk5MzJDQ1wiKTtcblxudmFyIGRhcmtyZWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOEIwMDAwXCIpO1xuXG52YXIgZGFya3NhbG1vbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJFOTk2N0FcIik7XG5cbnZhciBkYXJrc2VhZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOEZCQzhGXCIpO1xuXG52YXIgZGFya3NsYXRlYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI0ODNEOEJcIik7XG5cbnZhciBkYXJrc2xhdGVncmF5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjJGNEY0RlwiKTtcblxudmFyIGRhcmtzbGF0ZWdyZXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMkY0RjRGXCIpO1xuXG52YXIgZGFya3R1cnF1b2lzZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMENFRDFcIik7XG5cbnZhciBkYXJrdmlvbGV0ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjk0MDBEM1wiKTtcblxudmFyIGRlZXBwaW5rID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGMTQ5M1wiKTtcblxudmFyIGRlZXBza3libHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwQkZGRlwiKTtcblxudmFyIGRpbWdyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNjk2OTY5XCIpO1xuXG52YXIgZGltZ3JleSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI2OTY5NjlcIik7XG5cbnZhciBkb2RnZXJibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjFFOTBGRlwiKTtcblxudmFyIGZpcmVicmljayA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJCMjIyMjJcIik7XG5cbnZhciBmbG9yYWx3aGl0ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkZBRjBcIik7XG5cbnZhciBmb3Jlc3RncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIyMjhCMjJcIik7XG5cbnZhciBmdWNoc2lhID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGMDBGRlwiKTtcblxudmFyIGdhaW5zYm9ybyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEQ0RDRENcIik7XG5cbnZhciBnaG9zdHdoaXRlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkY4RjhGRlwiKTtcblxudmFyIGdvbGQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZENzAwXCIpO1xuXG52YXIgZ29sZGVucm9kID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkRBQTUyMFwiKTtcblxudmFyIGdyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiODA4MDgwXCIpO1xuXG52YXIgZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDA4MDAwXCIpO1xuXG52YXIgZ3JlZW55ZWxsb3cgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQURGRjJGXCIpO1xuXG52YXIgZ3JleSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4MDgwODBcIik7XG5cbnZhciBob25leWRldyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGMEZGRjBcIik7XG5cbnZhciBob3RwaW5rID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGNjlCNFwiKTtcblxudmFyIGluZGlhbnJlZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJDRDVDNUNcIik7XG5cbnZhciBpbmRpZ28gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNEIwMDgyXCIpO1xuXG52YXIgaXZvcnkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGRkYwXCIpO1xuXG52YXIga2hha2kgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjBFNjhDXCIpO1xuXG52YXIgbGF2ZW5kZXIgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRTZFNkZBXCIpO1xuXG52YXIgbGF2ZW5kZXJibHVzaCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkYwRjVcIik7XG5cbnZhciBsYXduZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiN0NGQzAwXCIpO1xuXG52YXIgbGVtb25jaGlmZm9uID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRkFDRFwiKTtcblxudmFyIGxpZ2h0Ymx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJBREQ4RTZcIik7XG5cbnZhciBsaWdodGNvcmFsID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkYwODA4MFwiKTtcblxudmFyIGxpZ2h0Y3lhbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJFMEZGRkZcIik7XG5cbnZhciBsaWdodGdvbGRlbnJvZHllbGxvdyA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGQUZBRDJcIik7XG5cbnZhciBsaWdodGdyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRDNEM0QzXCIpO1xuXG52YXIgbGlnaHRncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI5MEVFOTBcIik7XG5cbnZhciBsaWdodGdyZXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRDNEM0QzXCIpO1xuXG52YXIgbGlnaHRwaW5rID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGQjZDMVwiKTtcblxudmFyIGxpZ2h0c2FsbW9uID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGQTA3QVwiKTtcblxudmFyIGxpZ2h0c2VhZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMjBCMkFBXCIpO1xuXG52YXIgbGlnaHRza3libHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjg3Q0VGQVwiKTtcblxudmFyIGxpZ2h0c2xhdGVncmF5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjc3ODg5OVwiKTtcblxudmFyIGxpZ2h0c2xhdGVncmV5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjc3ODg5OVwiKTtcblxudmFyIGxpZ2h0c3RlZWxibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkIwQzRERVwiKTtcblxudmFyIGxpZ2h0eWVsbG93ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRkZFMFwiKTtcblxudmFyIGxpbWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDBGRjAwXCIpO1xuXG52YXIgbGltZWdyZWVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjMyQ0QzMlwiKTtcblxudmFyIGxpbmVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZBRjBFNlwiKTtcblxudmFyIG1hZ2VudGEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkYwMEZGXCIpO1xuXG52YXIgbWFyb29uID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjgwMDAwMFwiKTtcblxudmFyIG1lZGl1bWFxdWFtYXJpbmUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNjZDREFBXCIpO1xuXG52YXIgbWVkaXVtYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMDAwQ0RcIik7XG5cbnZhciBtZWRpdW1vcmNoaWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQkE1NUQzXCIpO1xuXG52YXIgbWVkaXVtcHVycGxlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjkzNzBEQlwiKTtcblxudmFyIG1lZGl1bXNlYWdyZWVuID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjNDQjM3MVwiKTtcblxudmFyIG1lZGl1bXNsYXRlYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI3QjY4RUVcIik7XG5cbnZhciBtZWRpdW1zcHJpbmdncmVlbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIwMEZBOUFcIik7XG5cbnZhciBtZWRpdW10dXJxdW9pc2UgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNDhEMUNDXCIpO1xuXG52YXIgbWVkaXVtdmlvbGV0cmVkID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkM3MTU4NVwiKTtcblxudmFyIG1pZG5pZ2h0Ymx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCIxOTE5NzBcIik7XG5cbnZhciBtaW50Y3JlYW0gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjVGRkZBXCIpO1xuXG52YXIgbWlzdHlyb3NlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRTRFMVwiKTtcblxudmFyIG1vY2Nhc2luID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGRTRCNVwiKTtcblxudmFyIG5hdmFqb3doaXRlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGREVBRFwiKTtcblxudmFyIG5hdnkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDAwMDgwXCIpO1xuXG52YXIgb2xkbGFjZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGREY1RTZcIik7XG5cbnZhciBvbGl2ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI4MDgwMDBcIik7XG5cbnZhciBvbGl2ZWRyYWIgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNkI4RTIzXCIpO1xuXG52YXIgb3JhbmdlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGQTUwMFwiKTtcblxudmFyIG9yYW5nZXJlZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRjQ1MDBcIik7XG5cbnZhciBvcmNoaWQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiREE3MEQ2XCIpO1xuXG52YXIgcGFsZWdvbGRlbnJvZCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJFRUU4QUFcIik7XG5cbnZhciBwYWxlZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOThGQjk4XCIpO1xuXG52YXIgcGFsZXR1cnF1b2lzZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJBRkVFRUVcIik7XG5cbnZhciBwYWxldmlvbGV0cmVkID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkRCNzA5M1wiKTtcblxudmFyIHBhcGF5YXdoaXAgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZFRkQ1XCIpO1xuXG52YXIgcGVhY2hwdWZmID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGREFCOVwiKTtcblxudmFyIHBlcnUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQ0Q4NTNGXCIpO1xuXG52YXIgcGluayA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGRkMwQ0JcIik7XG5cbnZhciBwbHVtID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkREQTBERFwiKTtcblxudmFyIHBvd2RlcmJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiQjBFMEU2XCIpO1xuXG52YXIgcHVycGxlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjgwMDA4MFwiKTtcblxudmFyIHJlYmVjY2FwdXJwbGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNjYzMzk5XCIpO1xuXG52YXIgcmVkID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGMDAwMFwiKTtcblxudmFyIHJvc3licm93biA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJCQzhGOEZcIik7XG5cbnZhciByb3lhbGJsdWUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNDE2OUUxXCIpO1xuXG52YXIgc2FkZGxlYnJvd24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOEI0NTEzXCIpO1xuXG52YXIgc2FsbW9uID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZBODA3MlwiKTtcblxudmFyIHNhbmR5YnJvd24gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjRBNDYwXCIpO1xuXG52YXIgc2VhZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMkU4QjU3XCIpO1xuXG52YXIgc2Vhc2hlbGwgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGNUVFXCIpO1xuXG52YXIgc2llbm5hID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkEwNTIyRFwiKTtcblxudmFyIHNpbHZlciA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJDMEMwQzBcIik7XG5cbnZhciBza3libHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjg3Q0VFQlwiKTtcblxudmFyIHNsYXRlYmx1ZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI2QTVBQ0RcIik7XG5cbnZhciBzbGF0ZWdyYXkgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiNzA4MDkwXCIpO1xuXG52YXIgc2xhdGVncmV5ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjcwODA5MFwiKTtcblxudmFyIHNub3cgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGQUZBXCIpO1xuXG52YXIgc3ByaW5nZ3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiMDBGRjdGXCIpO1xuXG52YXIgc3RlZWxibHVlID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjQ2ODJCNFwiKTtcblxudmFyIHRhbiA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJEMkI0OENcIik7XG5cbnZhciB0ZWFsID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIjAwODA4MFwiKTtcblxudmFyIHRoaXN0bGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRDhCRkQ4XCIpO1xuXG52YXIgdG9tYXRvID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhleChcIkZGNjM0N1wiKTtcblxudmFyIHR1cnF1b2lzZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCI0MEUwRDBcIik7XG5cbnZhciB2aW9sZXQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRUU4MkVFXCIpO1xuXG52YXIgd2hlYXQgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRjVERUIzXCIpO1xuXG52YXIgd2hpdGUgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGRkZGXCIpO1xuXG52YXIgd2hpdGVzbW9rZSA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oZXgoXCJGNUY1RjVcIik7XG5cbnZhciB5ZWxsb3cgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiRkZGRjAwXCIpO1xuXG52YXIgeWVsbG93Z3JlZW4gPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4KFwiOUFDRDNcIik7XG5cbnZhciB0cmFuc3BhcmVudCA9IENzc19BdG9taWNUeXBlcy5Db2xvci50cmFuc3BhcmVudDtcblxuZXhwb3J0IHtcbiAgYWxpY2VibHVlICxcbiAgYW50aXF1ZXdoaXRlICxcbiAgYXF1YSAsXG4gIGFxdWFtYXJpbmUgLFxuICBhenVyZSAsXG4gIGJlaWdlICxcbiAgYmlzcXVlICxcbiAgYmxhY2sgLFxuICBibGFuY2hlZGFsbW9uZCAsXG4gIGJsdWUgLFxuICBibHVldmlvbGV0ICxcbiAgYnJvd24gLFxuICBidXJseXdvb2QgLFxuICBjYWRldGJsdWUgLFxuICBjaGFydHJldXNlICxcbiAgY2hvY29sYXRlICxcbiAgY29yYWwgLFxuICBjb3JuZmxvd2VyYmx1ZSAsXG4gIGNvcm5zaWxrICxcbiAgY3JpbXNvbiAsXG4gIGN5YW4gLFxuICBkYXJrYmx1ZSAsXG4gIGRhcmtjeWFuICxcbiAgZGFya2dvbGRlbnJvZCAsXG4gIGRhcmtncmF5ICxcbiAgZGFya2dyZWVuICxcbiAgZGFya2dyZXkgLFxuICBkYXJra2hha2kgLFxuICBkYXJrbWFnZW50YSAsXG4gIGRhcmtvbGl2ZWdyZWVuICxcbiAgZGFya29yYW5nZSAsXG4gIGRhcmtvcmNoaWQgLFxuICBkYXJrcmVkICxcbiAgZGFya3NhbG1vbiAsXG4gIGRhcmtzZWFncmVlbiAsXG4gIGRhcmtzbGF0ZWJsdWUgLFxuICBkYXJrc2xhdGVncmF5ICxcbiAgZGFya3NsYXRlZ3JleSAsXG4gIGRhcmt0dXJxdW9pc2UgLFxuICBkYXJrdmlvbGV0ICxcbiAgZGVlcHBpbmsgLFxuICBkZWVwc2t5Ymx1ZSAsXG4gIGRpbWdyYXkgLFxuICBkaW1ncmV5ICxcbiAgZG9kZ2VyYmx1ZSAsXG4gIGZpcmVicmljayAsXG4gIGZsb3JhbHdoaXRlICxcbiAgZm9yZXN0Z3JlZW4gLFxuICBmdWNoc2lhICxcbiAgZ2FpbnNib3JvICxcbiAgZ2hvc3R3aGl0ZSAsXG4gIGdvbGQgLFxuICBnb2xkZW5yb2QgLFxuICBncmF5ICxcbiAgZ3JlZW4gLFxuICBncmVlbnllbGxvdyAsXG4gIGdyZXkgLFxuICBob25leWRldyAsXG4gIGhvdHBpbmsgLFxuICBpbmRpYW5yZWQgLFxuICBpbmRpZ28gLFxuICBpdm9yeSAsXG4gIGtoYWtpICxcbiAgbGF2ZW5kZXIgLFxuICBsYXZlbmRlcmJsdXNoICxcbiAgbGF3bmdyZWVuICxcbiAgbGVtb25jaGlmZm9uICxcbiAgbGlnaHRibHVlICxcbiAgbGlnaHRjb3JhbCAsXG4gIGxpZ2h0Y3lhbiAsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93ICxcbiAgbGlnaHRncmF5ICxcbiAgbGlnaHRncmVlbiAsXG4gIGxpZ2h0Z3JleSAsXG4gIGxpZ2h0cGluayAsXG4gIGxpZ2h0c2FsbW9uICxcbiAgbGlnaHRzZWFncmVlbiAsXG4gIGxpZ2h0c2t5Ymx1ZSAsXG4gIGxpZ2h0c2xhdGVncmF5ICxcbiAgbGlnaHRzbGF0ZWdyZXkgLFxuICBsaWdodHN0ZWVsYmx1ZSAsXG4gIGxpZ2h0eWVsbG93ICxcbiAgbGltZSAsXG4gIGxpbWVncmVlbiAsXG4gIGxpbmVuICxcbiAgbWFnZW50YSAsXG4gIG1hcm9vbiAsXG4gIG1lZGl1bWFxdWFtYXJpbmUgLFxuICBtZWRpdW1ibHVlICxcbiAgbWVkaXVtb3JjaGlkICxcbiAgbWVkaXVtcHVycGxlICxcbiAgbWVkaXVtc2VhZ3JlZW4gLFxuICBtZWRpdW1zbGF0ZWJsdWUgLFxuICBtZWRpdW1zcHJpbmdncmVlbiAsXG4gIG1lZGl1bXR1cnF1b2lzZSAsXG4gIG1lZGl1bXZpb2xldHJlZCAsXG4gIG1pZG5pZ2h0Ymx1ZSAsXG4gIG1pbnRjcmVhbSAsXG4gIG1pc3R5cm9zZSAsXG4gIG1vY2Nhc2luICxcbiAgbmF2YWpvd2hpdGUgLFxuICBuYXZ5ICxcbiAgb2xkbGFjZSAsXG4gIG9saXZlICxcbiAgb2xpdmVkcmFiICxcbiAgb3JhbmdlICxcbiAgb3JhbmdlcmVkICxcbiAgb3JjaGlkICxcbiAgcGFsZWdvbGRlbnJvZCAsXG4gIHBhbGVncmVlbiAsXG4gIHBhbGV0dXJxdW9pc2UgLFxuICBwYWxldmlvbGV0cmVkICxcbiAgcGFwYXlhd2hpcCAsXG4gIHBlYWNocHVmZiAsXG4gIHBlcnUgLFxuICBwaW5rICxcbiAgcGx1bSAsXG4gIHBvd2RlcmJsdWUgLFxuICBwdXJwbGUgLFxuICByZWJlY2NhcHVycGxlICxcbiAgcmVkICxcbiAgcm9zeWJyb3duICxcbiAgcm95YWxibHVlICxcbiAgc2FkZGxlYnJvd24gLFxuICBzYWxtb24gLFxuICBzYW5keWJyb3duICxcbiAgc2VhZ3JlZW4gLFxuICBzZWFzaGVsbCAsXG4gIHNpZW5uYSAsXG4gIHNpbHZlciAsXG4gIHNreWJsdWUgLFxuICBzbGF0ZWJsdWUgLFxuICBzbGF0ZWdyYXkgLFxuICBzbGF0ZWdyZXkgLFxuICBzbm93ICxcbiAgc3ByaW5nZ3JlZW4gLFxuICBzdGVlbGJsdWUgLFxuICB0YW4gLFxuICB0ZWFsICxcbiAgdGhpc3RsZSAsXG4gIHRvbWF0byAsXG4gIHR1cnF1b2lzZSAsXG4gIHZpb2xldCAsXG4gIHdoZWF0ICxcbiAgd2hpdGUgLFxuICB3aGl0ZXNtb2tlICxcbiAgeWVsbG93ICxcbiAgeWVsbG93Z3JlZW4gLFxuICB0cmFuc3BhcmVudCAsXG4gIFxufVxuLyogYWxpY2VibHVlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgTGlzdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9saXN0LmpzXCI7XG5pbXBvcnQgKiBhcyAkJEFycmF5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzICQkU3RyaW5nIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L3N0cmluZy5qc1wiO1xuaW1wb3J0ICogYXMgSnNfZGljdCBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9qc19kaWN0LmpzXCI7XG5pbXBvcnQgKiBhcyBCZWx0X0xpc3QgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmVsdF9MaXN0LmpzXCI7XG5pbXBvcnQgKiBhcyBKc19vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBDc3NfQ29sb3JzIGZyb20gXCIuL0Nzc19Db2xvcnMuanNcIjtcbmltcG9ydCAqIGFzIEJlbHRfT3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2JlbHRfT3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBDc3NfQXRvbWljVHlwZXMgZnJvbSBcIi4vQ3NzX0F0b21pY1R5cGVzLmpzXCI7XG5cbmZ1bmN0aW9uIHJ1bGVUb0RpY3QoZGljdCwgcnVsZSkge1xuICBzd2l0Y2ggKHJ1bGUudGFnIHwgMCkge1xuICAgIGNhc2UgLyogRCAqLzAgOlxuICAgICAgICB2YXIgdmFsdWUgPSBydWxlWzFdO1xuICAgICAgICB2YXIgbmFtZSA9IHJ1bGVbMF07XG4gICAgICAgIGlmIChuYW1lID09PSBcImNvbnRlbnRcIikge1xuICAgICAgICAgIGRpY3RbbmFtZV0gPSB2YWx1ZSA9PT0gXCJcIiA/IFwiXFxcIlxcXCJcIiA6IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIFMgKi8xIDpcbiAgICAgICAgZGljdFtydWxlWzBdXSA9IHRvSnNvbihydWxlWzFdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSAvKiBQc2V1ZG9DbGFzcyAqLzIgOlxuICAgICAgICBkaWN0W1wiOlwiICsgcnVsZVswXV0gPSB0b0pzb24ocnVsZVsxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgLyogUHNldWRvQ2xhc3NQYXJhbSAqLzMgOlxuICAgICAgICBkaWN0W1wiOlwiICsgKHJ1bGVbMF0gKyAoXCIoXCIgKyAocnVsZVsxXSArIFwiKVwiKSkpXSA9IHRvSnNvbihydWxlWzJdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgXG4gIH1cbiAgcmV0dXJuIGRpY3Q7XG59XG5cbmZ1bmN0aW9uIHRvSnNvbihydWxlcykge1xuICByZXR1cm4gQmVsdF9MaXN0LnJlZHVjZShydWxlcywgeyB9LCBydWxlVG9EaWN0KTtcbn1cblxuZnVuY3Rpb24gYWRkU3RvcChkaWN0LCBwYXJhbSkge1xuICBkaWN0W3BhcmFtWzBdLnRvU3RyaW5nKCkgKyBcIiVcIl0gPSB0b0pzb24ocGFyYW1bMV0pO1xuICByZXR1cm4gZGljdDtcbn1cblxuZnVuY3Rpb24gam9pbihzdHJpbmdzLCBzZXBhcmF0b3IpIHtcbiAgdmFyIF9zdHJpbmdzID0gc3RyaW5ncztcbiAgdmFyIF9hY2MgPSBcIlwiO1xuICB3aGlsZSh0cnVlKSB7XG4gICAgdmFyIGFjYyA9IF9hY2M7XG4gICAgdmFyIHN0cmluZ3MkMSA9IF9zdHJpbmdzO1xuICAgIGlmICghc3RyaW5ncyQxKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cbiAgICB2YXIgeHMgPSBzdHJpbmdzJDFbMV07XG4gICAgdmFyIHggPSBzdHJpbmdzJDFbMF07XG4gICAgaWYgKCF4cykge1xuICAgICAgcmV0dXJuIGFjYyArIHg7XG4gICAgfVxuICAgIF9hY2MgPSBhY2MgKyAoeCArIHNlcGFyYXRvcik7XG4gICAgX3N0cmluZ3MgPSB4cztcbiAgICBjb250aW51ZSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9hbHBoYShwYXJhbSkge1xuICBpZiAocGFyYW1bMF0gPj0gNTQ5NjM5MCkge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCIlXCI7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX3N0b3BzKHN0b3BzKSB7XG4gIHJldHVybiBqb2luKEJlbHRfTGlzdC5tYXAoc3RvcHMsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhwYXJhbVsxXSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHBhcmFtWzBdKSk7XG4gICAgICAgICAgICAgICAgICB9KSksIFwiLCBcIik7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9iYWNrZ3JvdW5kKGJnKSB7XG4gIGlmICh0eXBlb2YgYmcgPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAoYmcgIT09IDI5MjA1MDUzOCkge1xuICAgICAgaWYgKGJnID49IDU4MjYyNjEzMCkge1xuICAgICAgICByZXR1cm4gXCJ0cmFuc3BhcmVudFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJjdXJyZW50Q29sb3JcIjtcbiAgICB9XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSBiZ1swXTtcbiAgaWYgKHZhcmlhbnQgPj0gNTE5NzU2OSkge1xuICAgIGlmICh2YXJpYW50ICE9PSA1NjkyMTczKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAxMTk1NDg5MTEpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPCA2MTYzNzk2MzcpIHtcbiAgICAgICAgICByZXR1cm4gXCJyYWRpYWwtZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX3N0b3BzKGJnWzFdKSArIFwiKVwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF0Y2ggPSBiZ1sxXTtcbiAgICAgICAgcmV0dXJuIFwibGluZWFyLWdyYWRpZW50KFwiICsgKENzc19BdG9taWNUeXBlcy5BbmdsZS50b1N0cmluZyhtYXRjaFswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9zdG9wcyhtYXRjaFsxXSkgKyBcIilcIikpKTtcbiAgICAgIH1cbiAgICAgIGlmICh2YXJpYW50ID49IDU4NDM4MjMpIHtcbiAgICAgICAgcmV0dXJuIFwidXJsKFwiICsgKGJnWzFdICsgXCIpXCIpO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoJDEgPSBiZ1sxXTtcbiAgICAgIHZhciBoID0gbWF0Y2gkMVswXTtcbiAgICAgIHZhciBzID0gbWF0Y2gkMVsxXTtcbiAgICAgIHZhciBsID0gbWF0Y2gkMVsyXTtcbiAgICAgIHJldHVybiBcImhzbChcIiArIChDc3NfQXRvbWljVHlwZXMuQW5nbGUudG9TdHJpbmcoaCkgKyAoXCIsIFwiICsgKENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHMpICsgKFwiLCBcIiArIChDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyhsKSArIFwiKVwiKSkpKSk7XG4gICAgfVxuICAgIHZhciBtYXRjaCQyID0gYmdbMV07XG4gICAgcmV0dXJuIFwicmdiKFwiICsgKG1hdGNoJDJbMF0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkMlsxXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQyWzJdLnRvU3RyaW5nKCkgKyBcIilcIikpKSkpO1xuICB9XG4gIGlmICh2YXJpYW50ICE9PSAtODc4MTI4OTcyKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTE2MDI4MDY0NCkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gNTE5NDQ1OSkge1xuICAgICAgICByZXR1cm4gXCIjXCIgKyBiZ1sxXTtcbiAgICAgIH1cbiAgICAgIHZhciBtYXRjaCQzID0gYmdbMV07XG4gICAgICByZXR1cm4gXCJyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KFwiICsgKENzc19BdG9taWNUeXBlcy5BbmdsZS50b1N0cmluZyhtYXRjaCQzWzBdKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX3N0b3BzKG1hdGNoJDNbMV0pICsgXCIpXCIpKSk7XG4gICAgfVxuICAgIGlmICh2YXJpYW50ID49IC02NTcxMTEzNzApIHtcbiAgICAgIHJldHVybiBcInJlcGVhdGluZy1yYWRpYWwtZ3JhZGllbnQoXCIgKyAoc3RyaW5nX29mX3N0b3BzKGJnWzFdKSArIFwiKVwiKTtcbiAgICB9XG4gICAgdmFyIG1hdGNoJDQgPSBiZ1sxXTtcbiAgICB2YXIgaCQxID0gbWF0Y2gkNFswXTtcbiAgICB2YXIgcyQxID0gbWF0Y2gkNFsxXTtcbiAgICB2YXIgbCQxID0gbWF0Y2gkNFsyXTtcbiAgICB2YXIgYSA9IG1hdGNoJDRbM107XG4gICAgcmV0dXJuIFwiaHNsYShcIiArIChDc3NfQXRvbWljVHlwZXMuQW5nbGUudG9TdHJpbmcoaCQxKSArIChcIiwgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcocyQxKSArIChcIiwgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcobCQxKSArIChcIiwgXCIgKyAoc3RyaW5nX29mX2FscGhhKGEpICsgXCIpXCIpKSkpKSkpO1xuICB9XG4gIHZhciBtYXRjaCQ1ID0gYmdbMV07XG4gIHJldHVybiBcInJnYmEoXCIgKyAobWF0Y2gkNVswXS50b1N0cmluZygpICsgKFwiLCBcIiArIChtYXRjaCQ1WzFdLnRvU3RyaW5nKCkgKyAoXCIsIFwiICsgKG1hdGNoJDVbMl0udG9TdHJpbmcoKSArIChcIiwgXCIgKyAobWF0Y2gkNVszXS50b1N0cmluZygpICsgXCIpXCIpKSkpKSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfY29udGVudCh4KSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmICh4ID49IC02MDEyMDQ3MzIpIHtcbiAgICAgIGlmICh4ID49IDY4NDk0OTYwNCkge1xuICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvbnRlbnQudG9TdHJpbmcoeCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHggIT09IC04Nzg3Njc5OTYpIHtcbiAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ29udGVudC50b1N0cmluZyh4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCk7XG4gICAgfVxuICB9XG4gIHZhciB2YXJpYW50ID0geFswXTtcbiAgaWYgKHZhcmlhbnQgPj0gMTE5NTQ4OTExKSB7XG4gICAgaWYgKHZhcmlhbnQgIT09IDI4NzI3MjQzOSkge1xuICAgICAgaWYgKHZhcmlhbnQgIT09IDQ5MjQxNjc2NCkge1xuICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkdyYWRpZW50LnRvU3RyaW5nKHgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Db3VudGVyLnRvU3RyaW5nKHgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvdW50ZXJzLnRvU3RyaW5nKHgpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YXJpYW50ID49IC02NTcxMTEzNzApIHtcbiAgICBpZiAodmFyaWFudCA+PSA1ODQzODIzKSB7XG4gICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLlVybC50b1N0cmluZyh4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5HcmFkaWVudC50b1N0cmluZyh4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Db250ZW50LnRvU3RyaW5nKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9jb3VudGVyX2luY3JlbWVudCh4KSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ID49IC04Nzg3Njc5OTYpIHtcbiAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNvdW50ZXJJbmNyZW1lbnQudG9TdHJpbmcoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2NvdW50ZXJfcmVzZXQoeCkge1xuICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCA+PSAtODc4NzY3OTk2KSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Db3VudGVyUmVzZXQudG9TdHJpbmcoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2NvdW50ZXJfc2V0KHgpIHtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPj0gLTg3ODc2Nzk5Nikge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ291bnRlclNldC50b1N0cmluZyh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbXBvcnRhbnQodikge1xuICBpZiAodi50YWcpIHtcbiAgICByZXR1cm4gdjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgdlswXSxcbiAgICAgICAgICAgICAgdlsxXSArIFwiICFpbXBvcnRhbnRcIlxuICAgICAgICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGFiZWwobGFiZWwkMSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibGFiZWxcIixcbiAgICAgICAgICAgIGxhYmVsJDFcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYWxpZ25Db250ZW50KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFsaWduQ29udGVudFwiLFxuICAgICAgICAgICAgeCA+PSAyODc4MjUwMjkgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNTE2NjgyMTQ2ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDY2MjQzOTUyOSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggIT09IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5BbGlnbkNvbnRlbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTm9ybWFsQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYXNlbGluZUFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuRGlzdHJpYnV0ZWRBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtMTAxNjA2MTU1NSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtNDg1ODk1NzU3ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA2Nzg1OTU1NCA/IENzc19BdG9taWNUeXBlcy5BbGlnbkNvbnRlbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzdHJpYnV0ZWRBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTAyMTk0NDc5NSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQWxpZ25Db250ZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5EaXN0cmlidXRlZEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFsaWduSXRlbXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYWxpZ25JdGVtc1wiLFxuICAgICAgICAgICAgeCA+PSAyODc4MjUwMjkgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA2NjI0Mzk1MjkgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggIT09IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkFsaWduSXRlbXMudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYXNlbGluZUFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTM3OTMxOTMzMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gLTE2MjMxNjc5NSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkFsaWduSXRlbXMudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFsaWduU2VsZih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbGlnblNlbGZcIixcbiAgICAgICAgICAgIHggPj0gNTE4MzQ3OTkgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gMjg3ODI1MDI5ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICE9PSA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5BbGlnblNlbGYudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5CYXNlbGluZUFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggIT09IC0zNzkzMTkzMzIgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTE2MjMxNjc5NSA/IENzc19BdG9taWNUeXBlcy5BbGlnblNlbGYudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTEwMjE5NDQ3OTYgPyBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5BbGlnblNlbGYudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25EZWxheSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25EZWxheVwiLFxuICAgICAgICAgICAgeC50b1N0cmluZygpICsgXCJtc1wiXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkRpcmVjdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25EaXJlY3Rpb25cIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5BbmltYXRpb25EaXJlY3Rpb24udG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uRHVyYXRpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYW5pbWF0aW9uRHVyYXRpb25cIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKSArIFwibXNcIlxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25GaWxsTW9kZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25GaWxsTW9kZVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkFuaW1hdGlvbkZpbGxNb2RlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQW5pbWF0aW9uSXRlcmF0aW9uQ291bnQudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9uUGxheVN0YXRlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvblBsYXlTdGF0ZVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkFuaW1hdGlvblBsYXlTdGF0ZS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25UaW1pbmdGdW5jdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25UaW1pbmdGdW5jdGlvblwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tmYWNlVmlzaWJpbGl0eSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZmFjZVZpc2liaWxpdHlcIixcbiAgICAgICAgICAgIHggIT09IC04NjI1ODQ5ODIgJiYgeCAhPT0gNTg5NTkyNjkwID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZmFjZVZpc2liaWxpdHkudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2Ryb3BGaWx0ZXIoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2Ryb3AtZmlsdGVyXCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeCwgQ3NzX0F0b21pY1R5cGVzLkJhY2tkcm9wRmlsdGVyLnRvU3RyaW5nKSwgXCIsIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kQXR0YWNobWVudCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kQXR0YWNobWVudFwiLFxuICAgICAgICAgICAgeCA+PSAtMTE4NDM3NTI1ID8gKFxuICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kQXR0YWNobWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZEF0dGFjaG1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kQ29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZENvbG9yXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZENsaXAoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZENsaXBcIixcbiAgICAgICAgICAgIHggPj0gOTMwNzI2MyA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZENsaXAudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kQ2xpcC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRJbWFnZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kSW1hZ2VcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRJbWFnZS50b1N0cmluZyh4KSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSA1ODQzODIzID8gQ3NzX0F0b21pY1R5cGVzLkdyYWRpZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlVybC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRPcmlnaW4oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZE9yaWdpblwiLFxuICAgICAgICAgICAgeCA+PSA5MzA3MjYzID8gKFxuICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kT3JpZ2luLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZE9yaWdpbi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9iYWNrZ3JvdW5kcG9zaXRpb24oYnApIHtcbiAgaWYgKHR5cGVvZiBicCA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChicCAhPT0gLTc4OTUwODMxMikge1xuICAgICAgaWYgKGJwID49IC00NDUwNjEzOTcpIHtcbiAgICAgICAgaWYgKGJwID49IDY1MzE5Mzk2MSkge1xuICAgICAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKGJwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRQb3NpdGlvbi50b1N0cmluZyhicCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYnAgPj0gLTk0NDc2NDkyMCkge1xuICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyhicCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRQb3NpdGlvbi50b1N0cmluZyhicCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKGJwKTtcbiAgICB9XG4gIH1cbiAgaWYgKGJwWzBdICE9PSAyMzMxMCkge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKGJwKTtcbiAgfVxuICB2YXIgbWF0Y2ggPSBicFsxXTtcbiAgdmFyIHYgPSBtYXRjaFsxXTtcbiAgdmFyIGggPSBtYXRjaFswXTtcbiAgcmV0dXJuIChcbiAgICAgICAgICB0eXBlb2YgaCA9PT0gXCJudW1iZXJcIiAmJiBoICE9PSAtNzg5NTA4MzEyID8gQ3VycnkuXzEoQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRQb3NpdGlvbi5YLnRvU3RyaW5nLCBoKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoaClcbiAgICAgICAgKSArIChcIiBcIiArIChcbiAgICAgICAgICAgIHR5cGVvZiB2ID09PSBcIm51bWJlclwiICYmIHYgPj0gLTQ0NTA2MTM5NyA/IEN1cnJ5Ll8xKENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kUG9zaXRpb24uWS50b1N0cmluZywgdikgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHYpXG4gICAgICAgICAgKSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRQb3NpdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kUG9zaXRpb25cIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9iYWNrZ3JvdW5kcG9zaXRpb24oeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYmFja2dyb3VuZFBvc2l0aW9ucyhicCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZFBvc2l0aW9uXCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoYnAsIHN0cmluZ19vZl9iYWNrZ3JvdW5kcG9zaXRpb24pLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRQb3NpdGlvbjQoeCwgb2Zmc2V0WCwgeSwgb2Zmc2V0WSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYmFja2dyb3VuZFBvc2l0aW9uXCIsXG4gICAgICAgICAgICBDdXJyeS5fMShDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFBvc2l0aW9uLlgudG9TdHJpbmcsIHgpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcob2Zmc2V0WCkgKyAoXCIgXCIgKyAoQ3VycnkuXzEoQ3NzX0F0b21pY1R5cGVzLkJhY2tncm91bmRQb3NpdGlvbi5ZLnRvU3RyaW5nLCB5KSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcob2Zmc2V0WSkpKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kUmVwZWF0KHgpIHtcbiAgdmFyIHRtcDtcbiAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSB7XG4gICAgdG1wID0geCA+PSAtMzEyMDg0NDAyID8gKFxuICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFJlcGVhdC50b1N0cmluZyh4KVxuICAgICAgKSA6IChcbiAgICAgICAgeCAhPT0gLTY5NTQzMDUzMiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQmFja2dyb3VuZFJlcGVhdC50b1N0cmluZyh4KVxuICAgICAgKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2ggPSB4WzFdO1xuICAgIHRtcCA9IENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kUmVwZWF0LnRvU3RyaW5nKG1hdGNoWzBdKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5CYWNrZ3JvdW5kUmVwZWF0LnRvU3RyaW5nKG1hdGNoWzFdKSk7XG4gIH1cbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRSZXBlYXRcIixcbiAgICAgICAgICAgIHRtcFxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b21Db2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21Db2xvclwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlckJvdHRvbUxlZnRSYWRpdXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b21SaWdodFJhZGl1cyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJCb3R0b21XaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJCb3R0b21XaWR0aFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJDb2xsYXBzZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJDb2xsYXBzZVwiLFxuICAgICAgICAgICAgeCAhPT0gMTE5MjgzNTU1ICYmIHggPj0gLTk5Njg0NzI1MCA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQm9yZGVyQ29sbGFwc2UudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQ29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyQ29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJMZWZ0Q29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyTGVmdENvbG9yXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyTGVmdFdpZHRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckxlZnRXaWR0aFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJTcGFjaW5nKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclNwYWNpbmdcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyUmFkaXVzKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclJhZGl1c1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSaWdodENvbG9yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclJpZ2h0Q29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJSaWdodFdpZHRoKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclJpZ2h0V2lkdGhcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyVG9wQ29sb3IoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wQ29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJUb3BMZWZ0UmFkaXVzKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclRvcExlZnRSYWRpdXNcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyVG9wUmlnaHRSYWRpdXMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyVG9wV2lkdGgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyVG9wV2lkdGhcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyV2lkdGgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyV2lkdGhcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm90dG9tKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvdHRvbVwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJveFNpemluZyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3hTaXppbmdcIixcbiAgICAgICAgICAgIHggIT09IDkzMDcyNjMgJiYgeCA+PSAtMTAwODg0ODMwMSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQm94U2l6aW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImNsZWFyXCIsXG4gICAgICAgICAgICB4ID49IC0zNzkzMTkzMzIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNsZWFyLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2xlYXIudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjbGlwUGF0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjbGlwUGF0aFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTkyMjA4NjcyOCA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtMjk4NjU4MTc5ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkdlb21ldHlCb3gudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTEwMDg4NDgzMDEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkdlb21ldHlCb3gudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkNsaXBQYXRoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuVXJsLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImNvbG9yXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29sdW1uQ291bnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY29sdW1uQ291bnRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ29sdW1uQ291bnQudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29udGVudFJ1bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY29udGVudFwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2NvbnRlbnQoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY29udGVudFJ1bGVzKHhzKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb250ZW50XCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeHMsIHN0cmluZ19vZl9jb250ZW50KSwgXCIgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50ZXJJbmNyZW1lbnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY291bnRlci1pbmNyZW1lbnRcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9jb3VudGVyX2luY3JlbWVudCh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb3VudGVyc0luY3JlbWVudCh4cykge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY291bnRlci1pbmNyZW1lbnRcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4cywgc3RyaW5nX29mX2NvdW50ZXJfaW5jcmVtZW50KSwgXCIgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50ZXJSZXNldCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb3VudGVyLXJlc2V0XCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfY291bnRlcl9yZXNldCh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb3VudGVyc1Jlc2V0KHhzKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjb3VudGVyLXJlc2V0XCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeHMsIHN0cmluZ19vZl9jb3VudGVyX3Jlc2V0KSwgXCIgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50ZXJTZXQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY291bnRlci1zZXRcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9jb3VudGVyX3NldCh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjb3VudGVyc1NldCh4cykge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiY291bnRlci1zZXRcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4cywgc3RyaW5nX29mX2NvdW50ZXJfc2V0KSwgXCIgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGN1cnNvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJjdXJzb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5DdXJzb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZGlyZWN0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImRpcmVjdGlvblwiLFxuICAgICAgICAgICAgeCA+PSA1Mzk2NzE0ICYmIHggPCA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuRGlyZWN0aW9uLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImRpc3BsYXlcIixcbiAgICAgICAgICAgIHggPj0gOTcxMjI2OTIgPyAoXG4gICAgICAgICAgICAgICAgeCA8IDY1MzE5Mzk2MSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gMTgyNjk1OTUwID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCAhPT0gNDIzNjEwOTY5ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gNjMyNTkxNTA1ID8gQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlMaXN0SXRlbS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5SW50ZXJuYWwudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5T3V0c2lkZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUluc2lkZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA3OTM5MTI1MjggPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICE9PSA4ODg5NjAzMzMgPyBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUludGVybmFsLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlPdXRzaWRlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gNzkwODg5NzU0ID8gQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlCb3gudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg1NDA1MDA1OSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gLTYwMTIwNDczMiA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTI0NTkwMzM0NCA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xNDc3ODU2NzYgPyBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUxlZ2FjeS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5EaXNwbGF5T3V0c2lkZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTg0MzEyOTE3MiA/IENzc19BdG9taWNUeXBlcy5EaXNwbGF5SW50ZXJuYWwudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUxlZ2FjeS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTkyMjA4NjcyOCA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUJveC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xMDEwOTU0NDM5ID8gQ3NzX0F0b21pY1R5cGVzLkRpc3BsYXlJbnNpZGUudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRGlzcGxheUludGVybmFsLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZsZXgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmxleFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyBDc3NfQXRvbWljVHlwZXMuRmxleC50b1N0cmluZyh4KSA6IHhbMV0udG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmbGV4RGlyZWN0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZsZXhEaXJlY3Rpb25cIixcbiAgICAgICAgICAgIHggPj0gNTY5Mzk3OCA/IChcbiAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRmxleERpcmVjdGlvbi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRmxleERpcmVjdGlvbi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZsZXhHcm93KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZsZXhHcm93XCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmxleFNocmluayh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmbGV4U2hyaW5rXCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmxleFdyYXAoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmxleFdyYXBcIixcbiAgICAgICAgICAgIHggPj0gLTQ2MzEyMTI4OCA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuRmxleFdyYXAudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTgyMjEzNDMyNiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRmxleFdyYXAudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiAkJGZsb2F0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZsb2F0XCIsXG4gICAgICAgICAgICB4ID49IC0zNzkzMTkzMzIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkZsb2F0LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRmxvYXQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmb250RmFtaWx5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZvbnRGYW1pbHlcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmICEoeCAhPT0gLTg3ODc2Nzk5NiAmJiB4ICE9PSAtNjAxMjA0NzMyICYmIHggPCA2NTMxOTM5NjEpID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Gb250RmFtaWx5TmFtZS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmb250RmFtaWxpZXMoeHMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZvbnRGYW1pbHlcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4cywgQ3NzX0F0b21pY1R5cGVzLkZvbnRGYW1pbHlOYW1lLnRvU3RyaW5nKSwgXCIsIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmb250U2l6ZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmb250U2l6ZVwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvbnRTdHlsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmb250U3R5bGVcIixcbiAgICAgICAgICAgIHggIT09IDEwNzIyODkxMiAmJiB4IDwgNzM0NzkyODgxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Gb250U3R5bGUudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZm9udFZhcmlhbnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZm9udFZhcmlhbnRcIixcbiAgICAgICAgICAgIHggIT09IC0zODY2ODQ3OTIgJiYgeCA8IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuRm9udFZhcmlhbnQudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZm9udFdlaWdodCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmb250V2VpZ2h0XCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiAhKHggIT09IC04Nzg3Njc5OTYgJiYgeCAhPT0gLTYwMTIwNDczMiAmJiB4ICE9PSA2NTMxOTM5NjEpID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRBdXRvRmxvdyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkQXV0b0Zsb3dcIixcbiAgICAgICAgICAgIHggPj0gLTIyNzYwNTI3MSA/IChcbiAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuR3JpZEF1dG9GbG93LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5HcmlkQXV0b0Zsb3cudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQ29sdW1uKHN0YXJ0LCBlbmQkcHJpbWUpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRDb2x1bW5cIixcbiAgICAgICAgICAgIHN0YXJ0LnRvU3RyaW5nKCkgKyAoXCIgLyBcIiArIGVuZCRwcmltZS50b1N0cmluZygpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQ29sdW1uR2FwKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRDb2x1bW5HYXBcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gODEyMjE2ODcxID8gQ3NzX0F0b21pY1R5cGVzLkdyaWRDb2x1bW5HYXAudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQ29sdW1uU3RhcnQobikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZ3JpZENvbHVtblN0YXJ0XCIsXG4gICAgICAgICAgICBuLnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZENvbHVtbkVuZChuKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkQ29sdW1uRW5kXCIsXG4gICAgICAgICAgICBuLnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFJvdyhzdGFydCwgZW5kJHByaW1lKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkUm93XCIsXG4gICAgICAgICAgICBzdGFydC50b1N0cmluZygpICsgKFwiIC8gXCIgKyBlbmQkcHJpbWUudG9TdHJpbmcoKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZEdhcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkR2FwXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFJvd0dhcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkUm93R2FwXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFJvd0VuZChuKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkUm93RW5kXCIsXG4gICAgICAgICAgICBuLnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFJvd1N0YXJ0KG4pIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRSb3dTdGFydFwiLFxuICAgICAgICAgICAgbi50b1N0cmluZygpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGhlaWdodCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJoZWlnaHRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTEwNjU5NTEzNzYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkhlaWdodC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24ganVzdGlmeUNvbnRlbnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwianVzdGlmeUNvbnRlbnRcIixcbiAgICAgICAgICAgIHggPj0gLTE2MjMxNjc5NSA/IChcbiAgICAgICAgICAgICAgICB4ID49IDUxNjY4MjE0NiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA2NjI0Mzk1MjkgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICE9PSA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Ob3JtYWxBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkRpc3RyaWJ1dGVkQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA1MTgzNDc5OSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkRpc3RyaWJ1dGVkQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTEwMTYwNjE1NTUgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTQ4NTg5NTc1NyA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTM3OTMxOTMzMiA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbmFsQWxpZ25tZW50LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkRpc3RyaWJ1dGVkQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuRGlzdHJpYnV0ZWRBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsZWZ0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImxlZnRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggIT09IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsZXR0ZXJTcGFjaW5nKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImxldHRlclNwYWNpbmdcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuTGV0dGVyU3BhY2luZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbGluZUhlaWdodCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJsaW5lSGVpZ2h0XCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtNzg5NTA4MzEyID8gKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5MaW5lSGVpZ2h0LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSA0ODQ1NjgyID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MaW5lSGVpZ2h0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbGlzdFN0eWxlKHN0eWxlLCBwb3NpdGlvbiwgaW1hZ2UpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImxpc3RTdHlsZVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxpc3RTdHlsZVR5cGUudG9TdHJpbmcoc3R5bGUpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MaXN0U3R5bGVQb3NpdGlvbi50b1N0cmluZyhwb3NpdGlvbikgKyAoXCIgXCIgKyAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBpbWFnZSA9PT0gXCJudW1iZXJcIiA/IENzc19BdG9taWNUeXBlcy5MaXN0U3R5bGVJbWFnZS50b1N0cmluZyhpbWFnZSkgOiBDc3NfQXRvbWljVHlwZXMuVXJsLnRvU3RyaW5nKGltYWdlKVxuICAgICAgICAgICAgICAgICAgKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R5bGVJbWFnZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJsaXN0U3R5bGVJbWFnZVwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MaXN0U3R5bGVJbWFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLlVybC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsaXN0U3R5bGVUeXBlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImxpc3RTdHlsZVR5cGVcIixcbiAgICAgICAgICAgIHggIT09IC04Nzg3Njc5OTYgJiYgeCAhPT0gLTYwMTIwNDczMiAmJiB4ICE9PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuTGlzdFN0eWxlVHlwZS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbGlzdFN0eWxlUG9zaXRpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibGlzdFN0eWxlUG9zaXRpb25cIixcbiAgICAgICAgICAgIHggPj0gLTQzMDAxMTA5OSAmJiB4IDwgNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkxpc3RTdHlsZVBvc2l0aW9uLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYXJnaW5Ub1N0cmluZyh4KSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4IDwgLTc4OTUwODMxMikge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuTWFyZ2luLnRvU3RyaW5nKHgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmdpbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbjIodiwgaCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibWFyZ2luXCIsXG4gICAgICAgICAgICBtYXJnaW5Ub1N0cmluZyh2KSArIChcIiBcIiArIG1hcmdpblRvU3RyaW5nKGgpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYXJnaW4zKHRvcCwgaCwgYm90dG9tKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHRvcCkgKyAoXCIgXCIgKyAobWFyZ2luVG9TdHJpbmcoaCkgKyAoXCIgXCIgKyBtYXJnaW5Ub1N0cmluZyhib3R0b20pKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbjQodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHRvcCkgKyAoXCIgXCIgKyAobWFyZ2luVG9TdHJpbmcocmlnaHQpICsgKFwiIFwiICsgKG1hcmdpblRvU3RyaW5nKGJvdHRvbSkgKyAoXCIgXCIgKyBtYXJnaW5Ub1N0cmluZyhsZWZ0KSkpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbkxlZnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibWFyZ2luTGVmdFwiLFxuICAgICAgICAgICAgbWFyZ2luVG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWFyZ2luUmlnaHQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwibWFyZ2luUmlnaHRcIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpblRvcCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5Ub3BcIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1hcmdpbkJvdHRvbSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXJnaW5Cb3R0b21cIixcbiAgICAgICAgICAgIG1hcmdpblRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG1heEhlaWdodCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXhIZWlnaHRcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTkyMjA4NjcyNyA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTWF4SGVpZ2h0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtYXhXaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtYXhXaWR0aFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtOTIyMDg2NzI3ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5NYXhXaWR0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWluSGVpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm1pbkhlaWdodFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTA2NTk1MTM3NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuSGVpZ2h0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBtaW5XaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJtaW5XaWR0aFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCAhPT0gLTE5NTgwNTMzNiAmJiB4ID49IC0xMDY1OTUxMzc2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5XaWR0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgKSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4WzBdICE9PSAtMTE5ODg3MTYzID8gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJjZW50YWdlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0Rml0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm9iamVjdEZpdFwiLFxuICAgICAgICAgICAgeCA+PSA0MjcwNjUzMDAgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLk9iamVjdEZpdC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuT2JqZWN0Rml0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb2JqZWN0UG9zaXRpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib2JqZWN0UG9zaXRpb25cIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9iYWNrZ3JvdW5kcG9zaXRpb24oeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3BhY2l0eSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJvcGFjaXR5XCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3V0bGluZShzaXplLCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm91dGxpbmVcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoc2l6ZSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLk91dGxpbmVTdHlsZS50b1N0cmluZyhzdHlsZSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoY29sb3IpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG91dGxpbmVDb2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJvdXRsaW5lQ29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdXRsaW5lT2Zmc2V0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm91dGxpbmVPZmZzZXRcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3V0bGluZVN0eWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm91dGxpbmVTdHlsZVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLk91dGxpbmVTdHlsZS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdXRsaW5lV2lkdGgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3V0bGluZVdpZHRoXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG92ZXJmbG93KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm92ZXJmbG93XCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuT3ZlcmZsb3cudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gb3ZlcmZsb3dYKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm92ZXJmbG93WFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLk92ZXJmbG93LnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG92ZXJmbG93WSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJvdmVyZmxvd1lcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5PdmVyZmxvdy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdmVyZmxvd1dyYXAoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwib3ZlcmZsb3dXcmFwXCIsXG4gICAgICAgICAgICB4ID49IDgxMjIxNjg3MSA/IENzc19BdG9taWNUeXBlcy5PdmVyZmxvd1dyYXAudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmcoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nMih2LCBoKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHYpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhoKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGFkZGluZzModG9wLCBoLCBib3R0b20pIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBhZGRpbmdcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcodG9wKSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKGgpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhib3R0b20pKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBhZGRpbmc0KHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ1wiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh0b3ApICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocmlnaHQpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoYm90dG9tKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobGVmdCkpKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nQm90dG9tKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBhZGRpbmdCb3R0b21cIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGFkZGluZ0xlZnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGFkZGluZ0xlZnRcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGFkZGluZ1JpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBhZGRpbmdSaWdodFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwYWRkaW5nVG9wKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBhZGRpbmdUb3BcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcGVyc3BlY3RpdmUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicGVyc3BlY3RpdmVcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSAtOTIyMDg2NzI3ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5QZXJzcGVjdGl2ZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBwZXJzcGVjdGl2ZU9yaWdpbih4LCB5KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJwZXJzcGVjdGl2ZU9yaWdpblwiLFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4IDwgLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5QZXJzcGVjdGl2ZS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICkgKyAoXCIgXCIgKyAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIHkgPT09IFwibnVtYmVyXCIgJiYgeSA8IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuUGVyc3BlY3RpdmUudG9TdHJpbmcoeSkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHkpXG4gICAgICAgICAgICAgICkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBvaW50ZXJFdmVudHMoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicG9pbnRlckV2ZW50c1wiLFxuICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5Qb2ludGVyRXZlbnRzLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInBvc2l0aW9uXCIsXG4gICAgICAgICAgICB4ID49IDEwNjE1MTU2ID8gKFxuICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbi50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24ganVzdGlmeVNlbGYoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwianVzdGlmeVNlbGZcIixcbiAgICAgICAgICAgIHggPj0gNTE4MzQ3OTkgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gMjg3ODI1MDI5ID8gKFxuICAgICAgICAgICAgICAgICAgICB4ICE9PSA2NTMxOTM5NjEgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICE9PSA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb25hbEFsaWdubWVudC50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5KdXN0aWZ5U2VsZi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkJhc2VsaW5lQWxpZ25tZW50LnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTM3OTMxOTMzMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gKFxuICAgICAgICAgICAgICAgICAgICAgICAgeCA+PSAtMTYyMzE2Nzk1ID8gQ3NzX0F0b21pY1R5cGVzLkp1c3RpZnlTZWxmLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB4ID49IC0xMDIxOTQ0Nzk2ID8gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuSnVzdGlmeVNlbGYudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uYWxBbGlnbm1lbnQudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiByZXNpemUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwicmVzaXplXCIsXG4gICAgICAgICAgICB4ID49IC0zNjc2NzQyNTAgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLlJlc2l6ZS50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlJlc2l6ZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInJpZ2h0XCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGFibGVMYXlvdXQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGFibGVMYXlvdXRcIixcbiAgICAgICAgICAgIHggIT09IDEwNjE1MTU2ICYmIHggPj0gLTEwNjU5NTEzNzYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRhYmxlTGF5b3V0LnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHRBbGlnbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0ZXh0QWxpZ25cIixcbiAgICAgICAgICAgIHggPj0gLTM3OTMxOTMzMiA/IChcbiAgICAgICAgICAgICAgICB4ID49IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVGV4dEFsaWduLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5UZXh0QWxpZ24udG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0RGVjb3JhdGlvbkNvbG9yKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHREZWNvcmF0aW9uQ29sb3JcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmICEoeCA+PSAyOTIwNTA1MzggJiYgeCA8IDY1MzE5Mzk2MSkgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHREZWNvcmF0aW9uTGluZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIixcbiAgICAgICAgICAgIHggPj0gMTMxMTQyOTI0ID8gKFxuICAgICAgICAgICAgICAgIHggIT09IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5UZXh0RGVjb3JhdGlvbkxpbmUudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5UZXh0RGVjb3JhdGlvbkxpbmUudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0RGVjb3JhdGlvblN0eWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHREZWNvcmF0aW9uU3R5bGVcIixcbiAgICAgICAgICAgIHggPj0gMTI5NTY3MTUgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLlRleHREZWNvcmF0aW9uU3R5bGUudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTgyMjk3NTAyNyA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuVGV4dERlY29yYXRpb25TdHlsZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHRJbmRlbnQoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGV4dEluZGVudFwiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeFswXSAhPT0gLTExOTg4NzE2MyA/IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHRPdmVyZmxvdyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0ZXh0T3ZlcmZsb3dcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggIT09IDE2Njg4ODc4NSAmJiB4ID49IC0xMDQ0MjIyMjU1ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5UZXh0T3ZlcmZsb3cudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdGV4dFRyYW5zZm9ybSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0ZXh0VHJhbnNmb3JtXCIsXG4gICAgICAgICAgICB4ID49IC01MDk4Njc2MDQgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRleHRUcmFuc2Zvcm0udG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ID49IC04Nzg3Njc5OTYgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRleHRUcmFuc2Zvcm0udG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0b3AoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidG9wXCIsXG4gICAgICAgICAgICB0eXBlb2YgeCA9PT0gXCJudW1iZXJcIiAmJiB4ICE9PSAtNzg5NTA4MzEyID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1zKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zZm9ybVwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHgsIENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0udG9TdHJpbmcpLCBcIiBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtT3JpZ2luKHgsIHkpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zZm9ybU9yaWdpblwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU9yaWdpbjNkKHgsIHksIHopIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zZm9ybU9yaWdpblwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHkpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeikgKyBcIiBcIikpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdW5zYWZlKHByb3BlcnR5LCB2YWx1ZSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdXNlclNlbGVjdCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ1c2VyU2VsZWN0XCIsXG4gICAgICAgICAgICB4ICE9PSAtODc4NzY3OTk2ICYmIHggIT09IC02MDEyMDQ3MzIgJiYgeCA8IDY1MzE5Mzk2MSA/IENzc19BdG9taWNUeXBlcy5Vc2VyU2VsZWN0LnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB2ZXJ0aWNhbEFsaWduKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInZlcnRpY2FsQWxpZ25cIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC04NjYyMDA3NDcgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTQ0NTA2MTM5NyA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggPj0gNjUzMTkzOTYxID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KSA6IENzc19BdG9taWNUeXBlcy5WZXJ0aWNhbEFsaWduLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuVmVydGljYWxBbGlnbi50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB2aXNpYmlsaXR5KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInZpc2liaWxpdHlcIixcbiAgICAgICAgICAgIHggPj0gLTYwMTIwNDczMiA/IChcbiAgICAgICAgICAgICAgICB4ICE9PSA1ODk1OTI2OTAgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlZpc2liaWxpdHkudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgICB4ICE9PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLlZpc2liaWxpdHkudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gd2lkdGgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwid2lkdGhcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiID8gKFxuICAgICAgICAgICAgICAgIHggIT09IC03ODk1MDgzMTIgPyAoXG4gICAgICAgICAgICAgICAgICAgIHggIT09IC0xOTU4MDUzMzYgJiYgeCA+PSAtMTA2NTk1MTM3NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuV2lkdGgudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgICAgICkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgeFswXSAhPT0gLTExOTg4NzE2MyA/IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuUGVyY2VudGFnZS50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHdoaXRlU3BhY2UoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwid2hpdGVTcGFjZVwiLFxuICAgICAgICAgICAgeCAhPT0gNjUzMTkzOTYxICYmIHggPj0gLTYwMTIwNDczMSA/IENzc19BdG9taWNUeXBlcy5XaGl0ZVNwYWNlLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB3b3JkQnJlYWsoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwid29yZEJyZWFrXCIsXG4gICAgICAgICAgICB4ICE9PSAtMzIzNzYwNzM0ICYmIHggPCA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLldvcmRCcmVhay50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB3b3JkU3BhY2luZyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ3b3JkU3BhY2luZ1wiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgPyAoXG4gICAgICAgICAgICAgICAgeCAhPT0gLTc4OTUwODMxMiA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA4MTIyMTY4NzEgPyBDc3NfQXRvbWljVHlwZXMuV29yZFNwYWNpbmcudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpXG4gICAgICAgICAgICAgICAgICApIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHhbMF0gIT09IC0xMTk4ODcxNjMgPyBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UudG9TdHJpbmcoeClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB6SW5kZXgoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiekluZGV4XCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbWVkaWEocXVlcnksIHJ1bGVzKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCJAbWVkaWEgXCIgKyBxdWVyeSxcbiAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdG9yKHNlbGVjdG9yJDEsIHJ1bGVzKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgc2VsZWN0b3IkMSxcbiAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFjdGl2ZShwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImFjdGl2ZVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tlZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImNoZWNrZWRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uICQkZGVmYXVsdChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImRlZmF1bHRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGRlZmluZWQocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJkZWZpbmVkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBkaXNhYmxlZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImRpc2FibGVkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBlbXB0eShwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImVtcHR5XCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBlbmFibGVkKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZW5hYmxlZFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmlyc3QocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJmaXJzdFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmlyc3RDaGlsZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImZpcnN0LWNoaWxkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaXJzdE9mVHlwZShwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImZpcnN0LW9mLXR5cGVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvY3VzKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZm9jdXNcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvY3VzV2l0aGluKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwiZm9jdXMtd2l0aGluXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBob3N0KHNlbGVjdG9yLCBydWxlcykge1xuICBpZiAoc2VsZWN0b3IgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAvKiBQc2V1ZG9DbGFzc1BhcmFtICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgICBcImhvc3RcIixcbiAgICAgICAgICAgICAgc2VsZWN0b3IsXG4gICAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgIFwiaG9zdFwiLFxuICAgICAgICAgICAgICBydWxlc1xuICAgICAgICAgICAgXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaG92ZXIocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJob3ZlclwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gaW5kZXRlcm1pbmF0ZShwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImluZGV0ZXJtaW5hdGVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGluUmFuZ2UocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJpbi1yYW5nZVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcImludmFsaWRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGxhbmcoY29kZSwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICBcImxhbmdcIixcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsYXN0Q2hpbGQocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJsYXN0LWNoaWxkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsYXN0T2ZUeXBlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwibGFzdC1vZi10eXBlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBsaW5rKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbm90X18oc2VsZWN0b3IsIHJ1bGVzKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzc1BhcmFtICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgXCJub3RcIixcbiAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgICAgcnVsZXNcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmcocGFyYW0pIHtcbiAgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJudW1iZXJcIikge1xuICAgIGlmIChwYXJhbSA+PSA1NTQyMzE5KSB7XG4gICAgICByZXR1cm4gXCJvZGRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiZXZlblwiO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1bMF0gPCA0ODQ2MTEzKSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIm5cIjtcbiAgfVxuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgcmV0dXJuIG1hdGNoWzBdLnRvU3RyaW5nKCkgKyAoXCJuK1wiICsgbWF0Y2hbMV0udG9TdHJpbmcoKSk7XG59XG5cbnZhciBOdGggPSB7XG4gIHRvU3RyaW5nOiB0b1N0cmluZ1xufTtcblxuZnVuY3Rpb24gbnRoQ2hpbGQoeCwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICBcIm50aC1jaGlsZFwiLFxuICAgICAgICAgICAgdG9TdHJpbmcoeCksXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBudGhMYXN0Q2hpbGQoeCwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICBcIm50aC1sYXN0LWNoaWxkXCIsXG4gICAgICAgICAgICB0b1N0cmluZyh4KSxcbiAgICAgICAgICAgIHJ1bGVzXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG50aExhc3RPZlR5cGUoeCwgcnVsZXMpIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzUGFyYW0gKi9CbG9jay5fXygzLCBbXG4gICAgICAgICAgICBcIm50aC1sYXN0LW9mLXR5cGVcIixcbiAgICAgICAgICAgIHRvU3RyaW5nKHgpLFxuICAgICAgICAgICAgcnVsZXNcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gbnRoT2ZUeXBlKHgsIHJ1bGVzKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzc1BhcmFtICovQmxvY2suX18oMywgW1xuICAgICAgICAgICAgXCJudGgtb2YtdHlwZVwiLFxuICAgICAgICAgICAgdG9TdHJpbmcoeCksXG4gICAgICAgICAgICBydWxlc1xuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJvbmx5LWNoaWxkXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvbmx5T2ZUeXBlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwib25seS1vZi10eXBlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvcHRpb25hbChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcIm9wdGlvbmFsXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBvdXRPZlJhbmdlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwib3V0LW9mLXJhbmdlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiByZWFkT25seShwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcInJlYWQtb25seVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcmVhZFdyaXRlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwicmVhZC13cml0ZVwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZWQocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJyZXF1aXJlZFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gcm9vdChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcInJvb3RcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHNjb3BlKHBhcmFtKSB7XG4gIHJldHVybiAvKiBQc2V1ZG9DbGFzcyAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgIFwic2NvcGVcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRhcmdldChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcInRhcmdldFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdmFsaWQocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFBzZXVkb0NsYXNzICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgXCJ2YWxpZFwiLFxuICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdmlzaXRlZChwYXJhbSkge1xuICByZXR1cm4gLyogUHNldWRvQ2xhc3MgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICBcInZpc2l0ZWRcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFmdGVyKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCI6OmFmdGVyXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiZWZvcmUocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIjo6YmVmb3JlXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaXJzdExldHRlcihwYXJhbSkge1xuICByZXR1cm4gLyogUyAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgIFwiOjpmaXJzdC1sZXR0ZXJcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZpcnN0TGluZShwYXJhbSkge1xuICByZXR1cm4gLyogUyAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgIFwiOjpmaXJzdC1saW5lXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24ocGFyYW0pIHtcbiAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICBcIjo6c2VsZWN0aW9uXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBjaGlsZCh4KSB7XG4gIHZhciBwYXJ0aWFsX2FyZyA9IFwiID4gXCIgKyB4O1xuICByZXR1cm4gKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgcmV0dXJuIC8qIFMgKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgICAgcGFydGlhbF9hcmcsXG4gICAgICAgICAgICAgICAgcGFyYW1cbiAgICAgICAgICAgICAgXSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCIgPiAqXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBkaXJlY3RTaWJsaW5nKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCIgKyBcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCI6OnBsYWNlaG9sZGVyXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzaWJsaW5ncyhwYXJhbSkge1xuICByZXR1cm4gLyogUyAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgIFwiIH4gXCIsXG4gICAgICAgICAgICBwYXJhbVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbnlMaW5rKHBhcmFtKSB7XG4gIHJldHVybiAvKiBTICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgXCI6YW55LWxpbmtcIixcbiAgICAgICAgICAgIHBhcmFtXG4gICAgICAgICAgXSk7XG59XG5cbnZhciBpbml0aWFsID0gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy5pbml0aWFsO1xuXG52YXIgaW5oZXJpdF8gPSBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLmluaGVyaXRfO1xuXG52YXIgdW5zZXQgPSBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnVuc2V0O1xuXG52YXIgcGN0ID0gQ3NzX0F0b21pY1R5cGVzLlBlcmNlbnRhZ2UucGN0O1xuXG52YXIgY2ggPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLmNoO1xuXG52YXIgY20gPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLmNtO1xuXG52YXIgZW0gPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLmVtO1xuXG52YXIgZXggPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLmV4O1xuXG52YXIgbW0gPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLm1tO1xuXG52YXIgcHQgPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnB0O1xuXG52YXIgcHggPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnB4O1xuXG52YXIgcHhGbG9hdCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgucHhGbG9hdDtcblxudmFyIHJlbSA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgucmVtO1xuXG52YXIgdmggPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnZoO1xuXG52YXIgdm1pbiA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgudm1pbjtcblxudmFyIHZtYXggPSBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnZtYXg7XG5cbnZhciB6ZXJvID0gQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC56ZXJvO1xuXG52YXIgZGVnID0gQ3NzX0F0b21pY1R5cGVzLkFuZ2xlLmRlZztcblxudmFyIHJhZCA9IENzc19BdG9taWNUeXBlcy5BbmdsZS5yYWQ7XG5cbnZhciBncmFkID0gQ3NzX0F0b21pY1R5cGVzLkFuZ2xlLmdyYWQ7XG5cbnZhciB0dXJuID0gQ3NzX0F0b21pY1R5cGVzLkFuZ2xlLnR1cm47XG5cbnZhciBsdHIgPSBDc3NfQXRvbWljVHlwZXMuRGlyZWN0aW9uLmx0cjtcblxudmFyIHJ0bCA9IENzc19BdG9taWNUeXBlcy5EaXJlY3Rpb24ucnRsO1xuXG52YXIgYWJzb2x1dGUgPSBDc3NfQXRvbWljVHlwZXMuUG9zaXRpb24uYWJzb2x1dGU7XG5cbnZhciByZWxhdGl2ZSA9IENzc19BdG9taWNUeXBlcy5Qb3NpdGlvbi5yZWxhdGl2ZTtcblxudmFyICQkc3RhdGljID0gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uLiQkc3RhdGljO1xuXG52YXIgc3RpY2t5ID0gQ3NzX0F0b21pY1R5cGVzLlBvc2l0aW9uLnN0aWNreTtcblxudmFyIGhvcml6b250YWwgPSBDc3NfQXRvbWljVHlwZXMuUmVzaXplLmhvcml6b250YWw7XG5cbnZhciB2ZXJ0aWNhbCA9IENzc19BdG9taWNUeXBlcy5SZXNpemUudmVydGljYWw7XG5cbnZhciBzbWFsbENhcHMgPSBDc3NfQXRvbWljVHlwZXMuRm9udFZhcmlhbnQuc21hbGxDYXBzO1xuXG52YXIgaXRhbGljID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRTdHlsZS5pdGFsaWM7XG5cbnZhciBvYmxpcXVlID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRTdHlsZS5vYmxpcXVlO1xuXG52YXIgcmdiID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnJnYjtcblxudmFyIHJnYmEgPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IucmdiYTtcblxudmFyIGhzbCA9IENzc19BdG9taWNUeXBlcy5Db2xvci5oc2w7XG5cbnZhciBoc2xhID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmhzbGE7XG5cbnZhciBoZXggPSBDc3NfQXRvbWljVHlwZXMuQ29sb3IuaGV4O1xuXG52YXIgY3VycmVudENvbG9yID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLmN1cnJlbnRDb2xvcjtcblxudmFyIHRyYW5zcGFyZW50ID0gQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRyYW5zcGFyZW50O1xuXG52YXIgbGluZWFyID0gQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLmxpbmVhcjtcblxudmFyIGVhc2UgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24uZWFzZTtcblxudmFyIGVhc2VJbiA9IENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi5lYXNlSW47XG5cbnZhciBlYXNlSW5PdXQgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24uZWFzZUluT3V0O1xuXG52YXIgZWFzZU91dCA9IENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi5lYXNlT3V0O1xuXG52YXIgc3RlcFN0YXJ0ID0gQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLnN0ZXBTdGFydDtcblxudmFyIHN0ZXBFbmQgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24uc3RlcEVuZDtcblxudmFyIHN0ZXBzID0gQ3NzX0F0b21pY1R5cGVzLlRpbWluZ0Z1bmN0aW9uLnN0ZXBzO1xuXG52YXIgY3ViaWNCZXppZXIgPSBDc3NfQXRvbWljVHlwZXMuVGltaW5nRnVuY3Rpb24uY3ViaWNCZXppZXI7XG5cbnZhciBtYXJnaW5Cb3ggPSBDc3NfQXRvbWljVHlwZXMuR2VvbWV0eUJveC5tYXJnaW5Cb3g7XG5cbnZhciBmaWxsQm94ID0gQ3NzX0F0b21pY1R5cGVzLkdlb21ldHlCb3guZmlsbEJveDtcblxudmFyIHN0cm9rZUJveCA9IENzc19BdG9taWNUeXBlcy5HZW9tZXR5Qm94LnN0cm9rZUJveDtcblxudmFyIHZpZXdCb3ggPSBDc3NfQXRvbWljVHlwZXMuR2VvbWV0eUJveC52aWV3Qm94O1xuXG52YXIgdHJhbnNsYXRlID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS50cmFuc2xhdGU7XG5cbnZhciB0cmFuc2xhdGUzZCA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0udHJhbnNsYXRlM2Q7XG5cbnZhciB0cmFuc2xhdGVYID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS50cmFuc2xhdGVYO1xuXG52YXIgdHJhbnNsYXRlWSA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0udHJhbnNsYXRlWTtcblxudmFyIHRyYW5zbGF0ZVogPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnRyYW5zbGF0ZVo7XG5cbnZhciBzY2FsZVggPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnNjYWxlWDtcblxudmFyIHNjYWxlWSA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0uc2NhbGVZO1xuXG52YXIgc2NhbGVaID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5zY2FsZVo7XG5cbnZhciByb3RhdGVYID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5yb3RhdGVYO1xuXG52YXIgcm90YXRlWSA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0ucm90YXRlWTtcblxudmFyIHJvdGF0ZVogPSBDc3NfQXRvbWljVHlwZXMuVHJhbnNmb3JtLnJvdGF0ZVo7XG5cbnZhciBzY2FsZSA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0uc2NhbGU7XG5cbnZhciBzY2FsZTNkID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5zY2FsZTNkO1xuXG52YXIgc2tldyA9IENzc19BdG9taWNUeXBlcy5UcmFuc2Zvcm0uc2tldztcblxudmFyIHNrZXdYID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5za2V3WDtcblxudmFyIHNrZXdZID0gQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybS5za2V3WTtcblxudmFyIHRoaW4gPSBDc3NfQXRvbWljVHlwZXMuRm9udFdlaWdodC50aGluO1xuXG52YXIgZXh0cmFMaWdodCA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LmV4dHJhTGlnaHQ7XG5cbnZhciBsaWdodCA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LmxpZ2h0O1xuXG52YXIgbWVkaXVtID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQubWVkaXVtO1xuXG52YXIgc2VtaUJvbGQgPSBDc3NfQXRvbWljVHlwZXMuRm9udFdlaWdodC5zZW1pQm9sZDtcblxudmFyIGJvbGQgPSBDc3NfQXRvbWljVHlwZXMuRm9udFdlaWdodC5ib2xkO1xuXG52YXIgZXh0cmFCb2xkID0gQ3NzX0F0b21pY1R5cGVzLkZvbnRXZWlnaHQuZXh0cmFCb2xkO1xuXG52YXIgbGlnaHRlciA9IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LmxpZ2h0ZXI7XG5cbnZhciBib2xkZXIgPSBDc3NfQXRvbWljVHlwZXMuRm9udFdlaWdodC5ib2xkZXI7XG5cbnZhciBsaW5lYXJHcmFkaWVudCA9IENzc19BdG9taWNUeXBlcy5HcmFkaWVudC5saW5lYXJHcmFkaWVudDtcblxudmFyIHJlcGVhdGluZ0xpbmVhckdyYWRpZW50ID0gQ3NzX0F0b21pY1R5cGVzLkdyYWRpZW50LnJlcGVhdGluZ0xpbmVhckdyYWRpZW50O1xuXG52YXIgcmFkaWFsR3JhZGllbnQgPSBDc3NfQXRvbWljVHlwZXMuR3JhZGllbnQucmFkaWFsR3JhZGllbnQ7XG5cbnZhciByZXBlYXRpbmdSYWRpYWxHcmFkaWVudCA9IENzc19BdG9taWNUeXBlcy5HcmFkaWVudC5yZXBlYXRpbmdSYWRpYWxHcmFkaWVudDtcblxudmFyIGFyZWFzID0gQ3NzX0F0b21pY1R5cGVzLkdyaWRUZW1wbGF0ZUFyZWFzLmFyZWFzO1xuXG52YXIgaWRlbnQgPSBDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEuaWRlbnQ7XG5cbnZhciBudW1JZGVudCA9IENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS5udW1JZGVudDtcblxudmFyIGNvbnRleHRNZW51ID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5jb250ZXh0TWVudTtcblxudmFyIGhlbHAgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmhlbHA7XG5cbnZhciBwb2ludGVyID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5wb2ludGVyO1xuXG52YXIgcHJvZ3Jlc3MgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLnByb2dyZXNzO1xuXG52YXIgd2FpdCA9IENzc19BdG9taWNUeXBlcy5DdXJzb3Iud2FpdDtcblxudmFyIGNlbGwgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmNlbGw7XG5cbnZhciBjcm9zc2hhaXIgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmNyb3NzaGFpcjtcblxudmFyIHZlcnRpY2FsVGV4dCA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IudmVydGljYWxUZXh0O1xuXG52YXIgYWxpYXMgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmFsaWFzO1xuXG52YXIgY29weSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IuY29weTtcblxudmFyIG1vdmUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm1vdmU7XG5cbnZhciBub0Ryb3AgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm5vRHJvcDtcblxudmFyIG5vdEFsbG93ZWQgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm5vdEFsbG93ZWQ7XG5cbnZhciBncmFiID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5ncmFiO1xuXG52YXIgZ3JhYmJpbmcgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmdyYWJiaW5nO1xuXG52YXIgYWxsU2Nyb2xsID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5hbGxTY3JvbGw7XG5cbnZhciBjb2xSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmNvbFJlc2l6ZTtcblxudmFyIHJvd1Jlc2l6ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3Iucm93UmVzaXplO1xuXG52YXIgblJlc2l6ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3IublJlc2l6ZTtcblxudmFyIGVSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLmVSZXNpemU7XG5cbnZhciBzUmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5zUmVzaXplO1xuXG52YXIgd1Jlc2l6ZSA9IENzc19BdG9taWNUeXBlcy5DdXJzb3Iud1Jlc2l6ZTtcblxudmFyIG5lUmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5uZVJlc2l6ZTtcblxudmFyIG53UmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5ud1Jlc2l6ZTtcblxudmFyIHNlUmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5zZVJlc2l6ZTtcblxudmFyIHN3UmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5zd1Jlc2l6ZTtcblxudmFyIGV3UmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5ld1Jlc2l6ZTtcblxudmFyIG5zUmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5uc1Jlc2l6ZTtcblxudmFyIG5lc3dSZXNpemUgPSBDc3NfQXRvbWljVHlwZXMuQ3Vyc29yLm5lc3dSZXNpemU7XG5cbnZhciBud3NlUmVzaXplID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci5ud3NlUmVzaXplO1xuXG52YXIgem9vbUluID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci56b29tSW47XG5cbnZhciB6b29tT3V0ID0gQ3NzX0F0b21pY1R5cGVzLkN1cnNvci56b29tT3V0O1xuXG5mdW5jdGlvbiB2dyh4KSB7XG4gIHJldHVybiAvKiBgdncgKi9bXG4gICAgICAgICAgMjY0MzMsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBmcih4KSB7XG4gIHJldHVybiAvKiBgZnIgKi9bXG4gICAgICAgICAgMjI4NjAsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiAkbmVnKGEsIGIpIHtcbiAgcmV0dXJuIC8qIGBjYWxjICovW1xuICAgICAgICAgIC0xMDQ0NzY4NjE5LFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgLyogc3ViICovNTc0NTAyNCxcbiAgICAgICAgICAgIGEsXG4gICAgICAgICAgICBiXG4gICAgICAgICAgXVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiAkcGx1cyhhLCBiKSB7XG4gIHJldHVybiAvKiBgY2FsYyAqL1tcbiAgICAgICAgICAtMTA0NDc2ODYxOSxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIC8qIGFkZCAqLzQ4NDYxMTMsXG4gICAgICAgICAgICBhLFxuICAgICAgICAgICAgYlxuICAgICAgICAgIF1cbiAgICAgICAgXTtcbn1cblxudmFyIENhbGMgPSB7XG4gICRuZWc6ICRuZWcsXG4gICRwbHVzOiAkcGx1c1xufTtcblxuZnVuY3Rpb24gc2l6ZSh4LCB5KSB7XG4gIHJldHVybiAvKiBgc2l6ZSAqL1tcbiAgICAgICAgICAtODY2OTM0NTkxLFxuICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgeCxcbiAgICAgICAgICAgIHlcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIGNvdW50KHgpIHtcbiAgcmV0dXJuIC8qIGBjb3VudCAqL1tcbiAgICAgICAgICAtODk5NDYzOTg1LFxuICAgICAgICAgIHhcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gbG9jYWxVcmwoeCkge1xuICByZXR1cm4gLyogYGxvY2FsVXJsICovW1xuICAgICAgICAgIC01MzgwNzk1NDgsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiByb3RhdGUoYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZSAqL1tcbiAgICAgICAgICAtODg3MDc3Mjg1LFxuICAgICAgICAgIGFcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gcm90YXRlM2QoeCwgeSwgeiwgYSkge1xuICByZXR1cm4gLyogYHJvdGF0ZTNkICovW1xuICAgICAgICAgIDE0MjgwMjkyNCxcbiAgICAgICAgICAvKiB0dXBsZSAqL1tcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5LFxuICAgICAgICAgICAgeixcbiAgICAgICAgICAgIGFcbiAgICAgICAgICBdXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHVybCh4KSB7XG4gIHJldHVybiAvKiBgdXJsICovW1xuICAgICAgICAgIDU4NDM4MjMsXG4gICAgICAgICAgeFxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiBmbGV4Myhncm93LCBzaHJpbmssIGJhc2lzKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmbGV4XCIsXG4gICAgICAgICAgICBncm93LnRvU3RyaW5nKCkgKyAoXCIgXCIgKyAoc2hyaW5rLnRvU3RyaW5nKCkgKyAoXCIgXCIgKyAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBiYXNpcyA9PT0gXCJudW1iZXJcIiAmJiBiYXNpcyAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5GbGV4QmFzaXMudG9TdHJpbmcoYmFzaXMpIDogQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhiYXNpcylcbiAgICAgICAgICAgICAgICAgICkpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmxleEJhc2lzKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZsZXhCYXNpc1wiLFxuICAgICAgICAgICAgdHlwZW9mIHggPT09IFwibnVtYmVyXCIgJiYgeCAhPT0gLTc4OTUwODMxMiA/IENzc19BdG9taWNUeXBlcy5GbGV4QmFzaXMudG9TdHJpbmcoeCkgOiBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIG9yZGVyKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcIm9yZGVyXCIsXG4gICAgICAgICAgICB4LnRvU3RyaW5nKClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX21pbm1heChwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IC01NTA1Nzc3MjEpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA2MDU1NzA0NSkge1xuICAgICAgICByZXR1cm4gXCJtYXgtY29udGVudFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibWluLWNvbnRlbnRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC03ODk1MDgzMTIpIHtcbiAgICAgIHJldHVybiBcIjBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgfVxuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCA+PSAyMjY0Mykge1xuICAgIGlmICh2YXJpYW50ID49IDI1MDkyKSB7XG4gICAgICBpZiAodmFyaWFudCAhPT0gMjUwOTYpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjY0MzMpIHtcbiAgICAgICAgICBpZiAodmFyaWFudCA+PSA1NjkxNzM4KSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicmVtXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2d1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IDI2NDE4KSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZoXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInB0XCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJweFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNDQxNikge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjUwNzUpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInBjXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwibW1cIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjI4NjApIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJmclwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZXhcIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MDc1Nikge1xuICAgIGlmICh2YXJpYW50ICE9PSAtMTE5ODg3MTYzKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyMjE4Nikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyMjYzMikge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJlbVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJjbVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjIxODEpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImNoXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidm1pblwiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJVwiO1xuICAgIH1cbiAgfVxuICBpZiAodmFyaWFudCA+PSAtOTc3NTg2NzQyKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MjUzMCkge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZtYXhcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImluXCI7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID49IC0xMDQwNDg0NzQ4KSB7XG4gICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInB4XCI7XG4gIH1cbiAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gIGlmIChtYXRjaFswXSA+PSA1NzQ1MDI0KSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoWzFdKSArIChcIiAtIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoWzFdKSArIChcIiArIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2hbMl0pICsgXCIpXCIpKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2RpbWVuc2lvbihwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IC03ODk1MDgzMTIpIHtcbiAgICAgIGlmIChwYXJhbSA+PSAtMTk1ODA1MzM2KSB7XG4gICAgICAgIGlmIChwYXJhbSA+PSA2MDU1NzA0NSkge1xuICAgICAgICAgIHJldHVybiBcIm1heC1jb250ZW50XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiZml0LWNvbnRlbnRcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtNTUwNTc3NzIxKSB7XG4gICAgICAgIHJldHVybiBcIm1pbi1jb250ZW50XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCIwXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYXJhbSA+PSAtOTIyMDg2NzI4KSB7XG4gICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcImF1dG9cIjtcbiAgICB9XG4gIH1cbiAgdmFyIHZhcmlhbnQgPSBwYXJhbVswXTtcbiAgaWYgKHZhcmlhbnQgPj0gMjI2MzIpIHtcbiAgICBpZiAodmFyaWFudCA+PSAyNTA5Mikge1xuICAgICAgaWYgKHZhcmlhbnQgIT09IDI1MDk2KSB7XG4gICAgICAgIGlmICh2YXJpYW50ID49IDI2NDMzKSB7XG4gICAgICAgICAgaWYgKHZhcmlhbnQgPj0gNTY5MTczOCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInJlbVwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidndcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAyNjQxOCkge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2aFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJwdFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgIT09IDIyNjQzKSB7XG4gICAgICBpZiAodmFyaWFudCA+PSAyNDQxNikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyNTA3NSkge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJwY1wiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJtbVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjI4NjApIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImZyXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZW1cIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImV4XCI7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ID49IC04MzM0NzA3NTYpIHtcbiAgICBpZiAodmFyaWFudCAhPT0gLTc1NDg1OTk1MCkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjIxODEpIHtcbiAgICAgICAgaWYgKHZhcmlhbnQgPj0gMjIxODYpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiY21cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiY2hcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YXJpYW50ID49IC0xMTk4ODcxNjMpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJ2bWluXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtYXRjaCA9IHBhcmFtWzFdO1xuICAgIHJldHVybiBcIm1pbm1heChcIiArIChzdHJpbmdfb2ZfbWlubWF4KG1hdGNoWzBdKSArIChcIixcIiArIChzdHJpbmdfb2ZfbWlubWF4KG1hdGNoWzFdKSArIFwiKVwiKSkpO1xuICB9XG4gIGlmICh2YXJpYW50ID49IC05Nzc1ODY3NDIpIHtcbiAgICBpZiAodmFyaWFudCA+PSAtODMzNDcyNTMwKSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwidm1heFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiaW5cIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTEwNDA0ODQ3NDgpIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHhcIjtcbiAgfVxuICB2YXIgbWF0Y2gkMSA9IHBhcmFtWzFdO1xuICBpZiAobWF0Y2gkMVswXSA+PSA1NzQ1MDI0KSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoJDFbMV0pICsgKFwiIC0gXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaCQxWzJdKSArIFwiKVwiKSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcImNhbGMoXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaCQxWzFdKSArIChcIiArIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2gkMVsyXSkgKyBcIilcIikpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBncmlkTGVuZ3RoVG9KcyhwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKHBhcmFtID49IC01NTA1Nzc3MjEpIHtcbiAgICAgIGlmIChwYXJhbSA+PSA2MDU1NzA0NSkge1xuICAgICAgICByZXR1cm4gXCJtYXgtY29udGVudFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwibWluLWNvbnRlbnRcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhcmFtID49IC03ODk1MDgzMTIpIHtcbiAgICAgIHJldHVybiBcIjBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgfVxuICB2YXIgdmFyaWFudCA9IHBhcmFtWzBdO1xuICBpZiAodmFyaWFudCA+PSAyMjY0Mykge1xuICAgIGlmICh2YXJpYW50IDwgMjUwOTYpIHtcbiAgICAgIGlmICh2YXJpYW50ICE9PSAyMjg2MCkge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAyNTA3NSkge1xuICAgICAgICAgIGlmICh2YXJpYW50ID49IDI1MDkyKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHRcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInBjXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gMjQ0MTYpIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwibW1cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiZXhcIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImZyXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2YXJpYW50ID09PSAyNjQxOCkge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZoXCI7XG4gICAgfVxuICAgIGlmICh2YXJpYW50IDwgNTY5MTczOCkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjY0MzMpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZ3XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHhcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPCAxMDg4Mjg1MDcpIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJyZW1cIjtcbiAgICB9XG4gICAgdmFyIG1hdGNoID0gcGFyYW1bMV07XG4gICAgcmV0dXJuIFwicmVwZWF0KFwiICsgKENzc19BdG9taWNUeXBlcy5SZXBlYXRWYWx1ZS50b1N0cmluZyhtYXRjaFswXSkgKyAoXCIsIFwiICsgKHN0cmluZ19vZl9kaW1lbnNpb24obWF0Y2hbMV0pICsgXCIpXCIpKSk7XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTc1NDg1OTk1MCkge1xuICAgIGlmICh2YXJpYW50ID09PSAtMTE5ODg3MTYzKSB7XG4gICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJVwiO1xuICAgIH1cbiAgICBpZiAodmFyaWFudCA+PSAyMjE4Nikge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gMjI2MzIpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcImVtXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwiY21cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZhcmlhbnQgPj0gMjIxODEpIHtcbiAgICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJjaFwiO1xuICAgIH1cbiAgICB2YXIgbWF0Y2gkMSA9IHBhcmFtWzFdO1xuICAgIHJldHVybiBcIm1pbm1heChcIiArIChzdHJpbmdfb2ZfbWlubWF4KG1hdGNoJDFbMF0pICsgKFwiLFwiICsgKHN0cmluZ19vZl9taW5tYXgobWF0Y2gkMVsxXSkgKyBcIilcIikpKTtcbiAgfVxuICBpZiAodmFyaWFudCA9PT0gLTEwNDA0ODQ3NDgpIHtcbiAgICByZXR1cm4gcGFyYW1bMV0udG9TdHJpbmcoKSArIFwicHhcIjtcbiAgfVxuICBpZiAodmFyaWFudCA+PSAtODMzNDcyNTMwKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTgzMzQ3MDc1Nikge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZtaW5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcInZtYXhcIjtcbiAgICB9XG4gIH1cbiAgaWYgKHZhcmlhbnQgPj0gLTk3NzU4Njc0Mikge1xuICAgIHJldHVybiBwYXJhbVsxXS50b1N0cmluZygpICsgXCJpblwiO1xuICB9XG4gIHZhciBtYXRjaCQyID0gcGFyYW1bMV07XG4gIGlmIChtYXRjaCQyWzBdID49IDU3NDUwMjQpIHtcbiAgICByZXR1cm4gXCJjYWxjKFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2gkMlsxXSkgKyAoXCIgLSBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoJDJbMl0pICsgXCIpXCIpKSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiY2FsYyhcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKG1hdGNoJDJbMV0pICsgKFwiICsgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaCQyWzJdKSArIFwiKVwiKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmluZ19vZl9kaW1lbnNpb25zKGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuICQkU3RyaW5nLmNvbmNhdChcIiBcIiwgTGlzdC5tYXAoZ3JpZExlbmd0aFRvSnMsIGRpbWVuc2lvbnMpKTtcbn1cblxuZnVuY3Rpb24gZ3JpZFRlbXBsYXRlQ29sdW1ucyhkaW1lbnNpb25zKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkVGVtcGxhdGVDb2x1bW5zXCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfZGltZW5zaW9ucyhkaW1lbnNpb25zKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkVGVtcGxhdGVSb3dzKGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRUZW1wbGF0ZVJvd3NcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9kaW1lbnNpb25zKGRpbWVuc2lvbnMpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRBdXRvQ29sdW1ucyhkaW1lbnNpb25zKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkQXV0b0NvbHVtbnNcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9kaW1lbnNpb24oZGltZW5zaW9ucylcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZ3JpZEF1dG9Sb3dzKGRpbWVuc2lvbnMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBdXRvUm93c1wiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2RpbWVuc2lvbihkaW1lbnNpb25zKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQXJlYShzKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkQXJlYVwiLFxuICAgICAgICAgICAgdHlwZW9mIHMgPT09IFwibnVtYmVyXCIgJiYgcyA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyhzKSA6IENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkQXJlYTIocywgczIpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBcmVhXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEudG9TdHJpbmcocykgKyAoXCIgLyBcIiArIENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzMikpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRBcmVhMyhzLCBzMiwgczMpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImdyaWRBcmVhXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEudG9TdHJpbmcocykgKyAoXCIgLyBcIiArIChDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEudG9TdHJpbmcoczIpICsgKFwiIC8gXCIgKyBDc3NfQXRvbWljVHlwZXMuR3JpZEFyZWEudG9TdHJpbmcoczMpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGdyaWRBcmVhNChzLCBzMiwgczMsIHM0KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkQXJlYVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLnRvU3RyaW5nKHMpICsgKFwiIC8gXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkdyaWRBcmVhLnRvU3RyaW5nKHMyKSArIChcIiAvIFwiICsgKENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzMykgKyAoXCIgLyBcIiArIENzc19BdG9taWNUeXBlcy5HcmlkQXJlYS50b1N0cmluZyhzNCkpKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBncmlkVGVtcGxhdGVBcmVhcyhsKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJncmlkVGVtcGxhdGVBcmVhc1wiLFxuICAgICAgICAgICAgdHlwZW9mIGwgPT09IFwibnVtYmVyXCIgJiYgbCA+PSAtODc4NzY3OTk2ID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyhsKSA6IENzc19BdG9taWNUeXBlcy5HcmlkVGVtcGxhdGVBcmVhcy50b1N0cmluZyhsKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdfb2ZfZmlsdGVyKHBhcmFtKSB7XG4gIGlmICh0eXBlb2YgcGFyYW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICBpZiAocGFyYW0gPj0gLTYwMTIwNDczMikge1xuICAgICAgaWYgKHBhcmFtID49IDY1MzE5Mzk2MSkge1xuICAgICAgICByZXR1cm4gXCJ1bnNldFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwiaW5oZXJpdFwiO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW0gPj0gLTg3ODc2Nzk5Nikge1xuICAgICAgcmV0dXJuIFwiaW5pdGlhbFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgfVxuICB9XG4gIHZhciB2YXJpYW50ID0gcGFyYW1bMF07XG4gIGlmICh2YXJpYW50ID49IC05Nzc0MDA0Mikge1xuICAgIGlmICh2YXJpYW50ID49IDU4NDM4MjMpIHtcbiAgICAgIGlmICh2YXJpYW50ID49IDkzNDQwNzQyNikge1xuICAgICAgICBpZiAodmFyaWFudCA+PSAxMDM2ODcwOTYzKSB7XG4gICAgICAgICAgcmV0dXJuIFwiaHVlLXJvdGF0ZShcIiArIChDc3NfQXRvbWljVHlwZXMuQW5nbGUudG9TdHJpbmcocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImNvbnRyYXN0KFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gNTM0MzA4NjMwKSB7XG4gICAgICAgIHJldHVybiBcImludmVydChcIiArIChwYXJhbVsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcInVybChcIiArIChwYXJhbVsxXSArIFwiKVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHZhcmlhbnQgPj0gLTI5OTI5NDg5KSB7XG4gICAgICByZXR1cm4gXCJzYXR1cmF0ZShcIiArIChwYXJhbVsxXS50b1N0cmluZygpICsgXCIlKVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwic2VwaWEoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgfVxuICB9XG4gIGlmICh2YXJpYW50ICE9PSAtNTk0NTI1ODQxKSB7XG4gICAgaWYgKHZhcmlhbnQgPj0gLTM0NTY3ODM4OSkge1xuICAgICAgaWYgKHZhcmlhbnQgPj0gLTIxNDQ2NDU2OSkge1xuICAgICAgICByZXR1cm4gXCJncmF5c2NhbGUoXCIgKyAocGFyYW1bMV0udG9TdHJpbmcoKSArIFwiJSlcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJvcGFjaXR5KFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFyaWFudCA+PSAtNDQ1NTQyOTU5KSB7XG4gICAgICByZXR1cm4gXCJicmlnaHRuZXNzKFwiICsgKHBhcmFtWzFdLnRvU3RyaW5nKCkgKyBcIiUpXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJibHVyKFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocGFyYW1bMV0pICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuICB2YXIgbWF0Y2ggPSBwYXJhbVsxXTtcbiAgcmV0dXJuIFwiZHJvcC1zaGFkb3coXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFswXSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFsxXSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFsyXSkgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKG1hdGNoWzNdKSArIFwiKVwiKSkpKSkpKTtcbn1cblxuZnVuY3Rpb24gZmlsdGVyKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImZpbHRlclwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHgsIHN0cmluZ19vZl9maWx0ZXIpLCBcIiBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm94KHhPcHQsIHlPcHQsIGJsdXJPcHQsIHNwcmVhZE9wdCwgaW5zZXRPcHQsIGNvbG9yKSB7XG4gIHZhciB4ID0geE9wdCAhPT0gdW5kZWZpbmVkID8geE9wdCA6IHplcm87XG4gIHZhciB5ID0geU9wdCAhPT0gdW5kZWZpbmVkID8geU9wdCA6IHplcm87XG4gIHZhciBibHVyID0gYmx1ck9wdCAhPT0gdW5kZWZpbmVkID8gYmx1ck9wdCA6IHplcm87XG4gIHZhciBzcHJlYWQgPSBzcHJlYWRPcHQgIT09IHVuZGVmaW5lZCA/IHNwcmVhZE9wdCA6IHplcm87XG4gIHZhciBpbnNldCA9IGluc2V0T3B0ICE9PSB1bmRlZmluZWQgPyBpbnNldE9wdCA6IGZhbHNlO1xuICByZXR1cm4gLyogYHNoYWRvdyAqL1tcbiAgICAgICAgICA0ODg2ODc1ODQsXG4gICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHkpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoYmx1cikgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhzcHJlYWQpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikgKyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXQgPyBcIiBpbnNldFwiIDogXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICApKSkpKSkpKSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdGV4dCh4T3B0LCB5T3B0LCBibHVyT3B0LCBjb2xvcikge1xuICB2YXIgeCA9IHhPcHQgIT09IHVuZGVmaW5lZCA/IHhPcHQgOiB6ZXJvO1xuICB2YXIgeSA9IHlPcHQgIT09IHVuZGVmaW5lZCA/IHlPcHQgOiB6ZXJvO1xuICB2YXIgYmx1ciA9IGJsdXJPcHQgIT09IHVuZGVmaW5lZCA/IGJsdXJPcHQgOiB6ZXJvO1xuICByZXR1cm4gLyogYHNoYWRvdyAqL1tcbiAgICAgICAgICA0ODg2ODc1ODQsXG4gICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHkpICsgKFwiIFwiICsgKENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcoYmx1cikgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoY29sb3IpKSkpKSlcbiAgICAgICAgXTtcbn1cblxuZnVuY3Rpb24gdG9TdHJpbmckMShwYXJhbSkge1xuICBpZiAodHlwZW9mIHBhcmFtID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIFwibm9uZVwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBwYXJhbVsxXTtcbiAgfVxufVxuXG52YXIgU2hhZG93ID0ge1xuICBib3g6IGJveCxcbiAgdGV4dDogdGV4dCxcbiAgdG9TdHJpbmc6IHRvU3RyaW5nJDFcbn07XG5cbmZ1bmN0aW9uIGJveFNoYWRvdyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3hTaGFkb3dcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiB0b1N0cmluZyQxKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJveFNoYWRvd3MoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm94U2hhZG93XCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoeCwgdG9TdHJpbmckMSksIFwiLCBcIilcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nX29mX2JvcmRlcnN0eWxlKGIpIHtcbiAgaWYgKGIgIT09IC04Nzg3Njc5OTYgJiYgYiAhPT0gLTYwMTIwNDczMiAmJiBiICE9PSA2NTMxOTM5NjEpIHtcbiAgICByZXR1cm4gQ3NzX0F0b21pY1R5cGVzLkJvcmRlclN0eWxlLnRvU3RyaW5nKGIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKGIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJvcmRlcihweCwgc3R5bGUsIGNvbG9yKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocHgpICsgKFwiIFwiICsgKHN0cmluZ19vZl9ib3JkZXJzdHlsZShzdHlsZSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoY29sb3IpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclN0eWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclN0eWxlXCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyTGVmdChweCwgc3R5bGUsIGNvbG9yKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJMZWZ0XCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuTGVuZ3RoLnRvU3RyaW5nKHB4KSArIChcIiBcIiArIChzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoc3R5bGUpICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkNvbG9yLnRvU3RyaW5nKGNvbG9yKSkpKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBib3JkZXJMZWZ0U3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyTGVmdFN0eWxlXCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyUmlnaHQocHgsIHN0eWxlLCBjb2xvcikge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyUmlnaHRcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocHgpICsgKFwiIFwiICsgKHN0cmluZ19vZl9ib3JkZXJzdHlsZShzdHlsZSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoY29sb3IpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclJpZ2h0U3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyUmlnaHRTdHlsZVwiLFxuICAgICAgICAgICAgc3RyaW5nX29mX2JvcmRlcnN0eWxlKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclRvcChweCwgc3R5bGUsIGNvbG9yKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJib3JkZXJUb3BcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcocHgpICsgKFwiIFwiICsgKHN0cmluZ19vZl9ib3JkZXJzdHlsZShzdHlsZSkgKyAoXCIgXCIgKyBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoY29sb3IpKSkpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJvcmRlclRvcFN0eWxlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlclRvcFN0eWxlXCIsXG4gICAgICAgICAgICBzdHJpbmdfb2ZfYm9yZGVyc3R5bGUoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQm90dG9tKHB4LCBzdHlsZSwgY29sb3IpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJvcmRlckJvdHRvbVwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhweCkgKyAoXCIgXCIgKyAoc3RyaW5nX29mX2JvcmRlcnN0eWxlKHN0eWxlKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyhjb2xvcikpKSlcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYm9yZGVyQm90dG9tU3R5bGUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYm9yZGVyQm90dG9tU3R5bGVcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9ib3JkZXJzdHlsZSh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImJhY2tncm91bmRcIixcbiAgICAgICAgICAgIHN0cmluZ19vZl9iYWNrZ3JvdW5kKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGJhY2tncm91bmRzKGJnKSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kXCIsXG4gICAgICAgICAgICBqb2luKEJlbHRfTGlzdC5tYXAoYmcsIHN0cmluZ19vZl9iYWNrZ3JvdW5kKSwgXCIsIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBiYWNrZ3JvdW5kU2l6ZSh4KSB7XG4gIHZhciB0bXA7XG4gIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xuICAgIHRtcCA9IHggIT09IC04OTk0MTYyNjUgPyAoXG4gICAgICAgIHggPj0gNDI3MDY1MzAwID8gXCJjb250YWluXCIgOiBcImF1dG9cIlxuICAgICAgKSA6IFwiY292ZXJcIjtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2ggPSB4WzFdO1xuICAgIHRtcCA9IENzc19BdG9taWNUeXBlcy5MZW5ndGgudG9TdHJpbmcobWF0Y2hbMF0pICsgKFwiIFwiICsgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyhtYXRjaFsxXSkpO1xuICB9XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kU2l6ZVwiLFxuICAgICAgICAgICAgdG1wXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGZvbnRGYWNlKGZvbnRGYW1pbHksIHNyYywgZm9udFN0eWxlLCBmb250V2VpZ2h0LCBmb250RGlzcGxheSwgcGFyYW0pIHtcbiAgdmFyIGZvbnRTdHlsZSQxID0gSnNfb3B0aW9uLm1hcCgoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIENzc19BdG9taWNUeXBlcy5Gb250U3R5bGUudG9TdHJpbmcodmFsdWUpO1xuICAgICAgICB9KSwgZm9udFN0eWxlKTtcbiAgdmFyIHNyYyQxID0gJCRTdHJpbmcuY29uY2F0KFwiLCBcIiwgTGlzdC5tYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICBpZiAocGFyYW1bMF0gPj0gNTg0MzgyMykge1xuICAgICAgICAgICAgICAgIHJldHVybiBcInVybChcXFwiXCIgKyAoU3RyaW5nKHBhcmFtWzFdKSArIFwiXFxcIilcIik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibG9jYWwoXFxcIlwiICsgKFN0cmluZyhwYXJhbVsxXSkgKyBcIlxcXCIpXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSwgc3JjKSk7XG4gIHZhciBmb250U3R5bGUkMiA9IEJlbHRfT3B0aW9uLm1hcFdpdGhEZWZhdWx0KGZvbnRTdHlsZSQxLCBcIlwiLCAoZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICByZXR1cm4gXCJmb250LXN0eWxlOiBcIiArIChzICsgXCI7XCIpO1xuICAgICAgICB9KSk7XG4gIHZhciBmb250V2VpZ2h0JDEgPSBCZWx0X09wdGlvbi5tYXBXaXRoRGVmYXVsdChmb250V2VpZ2h0LCBcIlwiLCAoZnVuY3Rpb24gKHcpIHtcbiAgICAgICAgICByZXR1cm4gXCJmb250LXdlaWdodDogXCIgKyAoKFxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdyA9PT0gXCJudW1iZXJcIiAmJiAhKHcgIT09IC04Nzg3Njc5OTYgJiYgdyAhPT0gLTYwMTIwNDczMiAmJiB3ICE9PSA2NTMxOTM5NjEpID8gQ3NzX0F0b21pY1R5cGVzLkNhc2NhZGluZy50b1N0cmluZyh3KSA6IENzc19BdG9taWNUeXBlcy5Gb250V2VpZ2h0LnRvU3RyaW5nKHcpXG4gICAgICAgICAgICAgICAgICApICsgXCI7XCIpO1xuICAgICAgICB9KSk7XG4gIHZhciBmb250RGlzcGxheSQxID0gQmVsdF9PcHRpb24ubWFwV2l0aERlZmF1bHQoZm9udERpc3BsYXksIFwiXCIsIChmdW5jdGlvbiAoZikge1xuICAgICAgICAgIHJldHVybiBcImZvbnQtZGlzcGxheTogXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkZvbnREaXNwbGF5LnRvU3RyaW5nKGYpICsgXCI7XCIpO1xuICAgICAgICB9KSk7XG4gIHJldHVybiBcIkBmb250LWZhY2Uge1xcbiAgICAgZm9udC1mYW1pbHk6IFwiICsgKFN0cmluZyhmb250RmFtaWx5KSArIChcIjtcXG4gICAgIHNyYzogXCIgKyAoU3RyaW5nKHNyYyQxKSArIChcIjtcXG4gICAgIFwiICsgKFN0cmluZyhmb250U3R5bGUkMikgKyAoXCJcXG4gICAgIFwiICsgKFN0cmluZyhmb250V2VpZ2h0JDEpICsgKFwiXFxuICAgICBcIiArIChTdHJpbmcoZm9udERpc3BsYXkkMSkgKyBcIlxcbiAgIH1cIikpKSkpKSkpKTtcbn1cblxuZnVuY3Rpb24gdGV4dERlY29yYXRpb24oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidGV4dERlY29yYXRpb25cIixcbiAgICAgICAgICAgIHggPj0gLTYwMTIwNDczMiA/IChcbiAgICAgICAgICAgICAgICB4ID49IDQxMjE1NTU2OSA/IChcbiAgICAgICAgICAgICAgICAgICAgeCA+PSA2NTMxOTM5NjEgPyBcInVuc2V0XCIgOiBcImxpbmUtdGhyb3VnaFwiXG4gICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICB4ID49IDEzMTE0MjkyNCA/IFwidW5kZXJsaW5lXCIgOiBcImluaGVyaXRcIlxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIHggIT09IC05MjIwODY3MjggPyAoXG4gICAgICAgICAgICAgICAgICAgIHggPj0gLTg3ODc2Nzk5NiA/IFwiaW5pdGlhbFwiIDogXCJvdmVybGluZVwiXG4gICAgICAgICAgICAgICAgICApIDogXCJub25lXCJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0ZXh0U2hhZG93KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHRTaGFkb3dcIixcbiAgICAgICAgICAgIHR5cGVvZiB4ID09PSBcIm51bWJlclwiICYmIHggPj0gLTg3ODc2Nzk5NiA/IENzc19BdG9taWNUeXBlcy5DYXNjYWRpbmcudG9TdHJpbmcoeCkgOiB0b1N0cmluZyQxKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRleHRTaGFkb3dzKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRleHRTaGFkb3dcIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4LCB0b1N0cmluZyQxKSwgXCIsIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1TdHlsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0cmFuc2Zvcm1TdHlsZVwiLFxuICAgICAgICAgICAgeCAhPT0gNTg5NzAyMDQ1ICYmIHggPj0gLTEwMTA5NTUzMzQgPyBDc3NfQXRvbWljVHlwZXMuQ2FzY2FkaW5nLnRvU3RyaW5nKHgpIDogQ3NzX0F0b21pY1R5cGVzLlRyYW5zZm9ybVN0eWxlLnRvU3RyaW5nKHgpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHNob3J0aGFuZChkdXJhdGlvbk9wdCwgZGVsYXlPcHQsIHRpbWluZ0Z1bmN0aW9uT3B0LCBwcm9wZXJ0eSkge1xuICB2YXIgZHVyYXRpb24gPSBkdXJhdGlvbk9wdCAhPT0gdW5kZWZpbmVkID8gZHVyYXRpb25PcHQgOiAwO1xuICB2YXIgZGVsYXkgPSBkZWxheU9wdCAhPT0gdW5kZWZpbmVkID8gZGVsYXlPcHQgOiAwO1xuICB2YXIgdGltaW5nRnVuY3Rpb24gPSB0aW1pbmdGdW5jdGlvbk9wdCAhPT0gdW5kZWZpbmVkID8gdGltaW5nRnVuY3Rpb25PcHQgOiAvKiBlYXNlICovLTEwMjI1ODc5MjI7XG4gIHJldHVybiAvKiBgdmFsdWUgKi9bXG4gICAgICAgICAgODM0MTc0ODMzLFxuICAgICAgICAgIGR1cmF0aW9uLnRvU3RyaW5nKCkgKyBcIm1zIFwiICsgKENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi50b1N0cmluZyh0aW1pbmdGdW5jdGlvbikgKyAoXCIgXCIgKyAoZGVsYXkudG9TdHJpbmcoKSArIFwibXMgXCIgKyBwcm9wZXJ0eSkpKVxuICAgICAgICBdO1xufVxuXG5mdW5jdGlvbiB0b1N0cmluZyQyKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVsxXTtcbn1cblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIHNob3J0aGFuZDogc2hvcnRoYW5kLFxuICB0b1N0cmluZzogdG9TdHJpbmckMlxufTtcblxuZnVuY3Rpb24gdHJhbnNpdGlvblZhbHVlKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zaXRpb25cIixcbiAgICAgICAgICAgIHhbMV1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkxpc3QoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNpdGlvblwiLFxuICAgICAgICAgICAgam9pbihCZWx0X0xpc3QubWFwKHgsIHRvU3RyaW5nJDIpLCBcIiwgXCIpXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24sIGRlbGF5LCB0aW1pbmdGdW5jdGlvbiwgcHJvcGVydHkpIHtcbiAgdmFyIHggPSBzaG9ydGhhbmQoZHVyYXRpb24sIGRlbGF5LCB0aW1pbmdGdW5jdGlvbiwgcHJvcGVydHkpO1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNpdGlvblwiLFxuICAgICAgICAgICAgeFsxXVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRGVsYXkoaSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNpdGlvbkRlbGF5XCIsXG4gICAgICAgICAgICBpLnRvU3RyaW5nKCkgKyBcIm1zXCJcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkR1cmF0aW9uKGkpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInRyYW5zaXRpb25EdXJhdGlvblwiLFxuICAgICAgICAgICAgaS50b1N0cmluZygpICsgXCJtc1wiXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uUHJvcGVydHkoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwidHJhbnNpdGlvblByb3BlcnR5XCIsXG4gICAgICAgICAgICB4XG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHNob3J0aGFuZCQxKGR1cmF0aW9uT3B0LCBkZWxheU9wdCwgZGlyZWN0aW9uT3B0LCB0aW1pbmdGdW5jdGlvbk9wdCwgZmlsbE1vZGVPcHQsIHBsYXlTdGF0ZU9wdCwgaXRlcmF0aW9uQ291bnRPcHQsIG5hbWUpIHtcbiAgdmFyIGR1cmF0aW9uID0gZHVyYXRpb25PcHQgIT09IHVuZGVmaW5lZCA/IGR1cmF0aW9uT3B0IDogMDtcbiAgdmFyIGRlbGF5ID0gZGVsYXlPcHQgIT09IHVuZGVmaW5lZCA/IGRlbGF5T3B0IDogMDtcbiAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvbk9wdCAhPT0gdW5kZWZpbmVkID8gZGlyZWN0aW9uT3B0IDogLyogbm9ybWFsICovODEyMjE2ODcxO1xuICB2YXIgdGltaW5nRnVuY3Rpb24gPSB0aW1pbmdGdW5jdGlvbk9wdCAhPT0gdW5kZWZpbmVkID8gdGltaW5nRnVuY3Rpb25PcHQgOiAvKiBlYXNlICovLTEwMjI1ODc5MjI7XG4gIHZhciBmaWxsTW9kZSA9IGZpbGxNb2RlT3B0ICE9PSB1bmRlZmluZWQgPyBmaWxsTW9kZU9wdCA6IC8qIG5vbmUgKi8tOTIyMDg2NzI4O1xuICB2YXIgcGxheVN0YXRlID0gcGxheVN0YXRlT3B0ICE9PSB1bmRlZmluZWQgPyBwbGF5U3RhdGVPcHQgOiAvKiBydW5uaW5nICovLTM0NTQxMjA5NztcbiAgdmFyIGl0ZXJhdGlvbkNvdW50ID0gaXRlcmF0aW9uQ291bnRPcHQgIT09IHVuZGVmaW5lZCA/IGl0ZXJhdGlvbkNvdW50T3B0IDogLyogYGNvdW50ICovW1xuICAgICAgLTg5OTQ2Mzk4NSxcbiAgICAgIDFcbiAgICBdO1xuICByZXR1cm4gLyogYHZhbHVlICovW1xuICAgICAgICAgIDgzNDE3NDgzMyxcbiAgICAgICAgICBuYW1lICsgKFwiIFwiICsgKGR1cmF0aW9uLnRvU3RyaW5nKCkgKyBcIm1zIFwiICsgKENzc19BdG9taWNUeXBlcy5UaW1pbmdGdW5jdGlvbi50b1N0cmluZyh0aW1pbmdGdW5jdGlvbikgKyAoXCIgXCIgKyAoZGVsYXkudG9TdHJpbmcoKSArIFwibXMgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50LnRvU3RyaW5nKGl0ZXJhdGlvbkNvdW50KSArIChcIiBcIiArIChDc3NfQXRvbWljVHlwZXMuQW5pbWF0aW9uRGlyZWN0aW9uLnRvU3RyaW5nKGRpcmVjdGlvbikgKyAoXCIgXCIgKyAoQ3NzX0F0b21pY1R5cGVzLkFuaW1hdGlvbkZpbGxNb2RlLnRvU3RyaW5nKGZpbGxNb2RlKSArIChcIiBcIiArIENzc19BdG9taWNUeXBlcy5BbmltYXRpb25QbGF5U3RhdGUudG9TdHJpbmcocGxheVN0YXRlKSkpKSkpKSkpKSkpXG4gICAgICAgIF07XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nJDMocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtWzFdO1xufVxuXG52YXIgQW5pbWF0aW9uID0ge1xuICBzaG9ydGhhbmQ6IHNob3J0aGFuZCQxLFxuICB0b1N0cmluZzogdG9TdHJpbmckM1xufTtcblxuZnVuY3Rpb24gYW5pbWF0aW9uVmFsdWUoeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiYW5pbWF0aW9uXCIsXG4gICAgICAgICAgICB4WzFdXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIGFuaW1hdGlvbihkdXJhdGlvbiwgZGVsYXksIGRpcmVjdGlvbiwgdGltaW5nRnVuY3Rpb24sIGZpbGxNb2RlLCBwbGF5U3RhdGUsIGl0ZXJhdGlvbkNvdW50LCBuYW1lKSB7XG4gIHZhciB4ID0gc2hvcnRoYW5kJDEoZHVyYXRpb24sIGRlbGF5LCBkaXJlY3Rpb24sIHRpbWluZ0Z1bmN0aW9uLCBmaWxsTW9kZSwgcGxheVN0YXRlLCBpdGVyYXRpb25Db3VudCwgbmFtZSk7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25cIixcbiAgICAgICAgICAgIHhbMV1cbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gYW5pbWF0aW9ucyh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJhbmltYXRpb25cIixcbiAgICAgICAgICAgIGpvaW4oQmVsdF9MaXN0Lm1hcCh4LCB0b1N0cmluZyQzKSwgXCIsIFwiKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBhbmltYXRpb25OYW1lKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcImFuaW1hdGlvbk5hbWVcIixcbiAgICAgICAgICAgIHhcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmlsbCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmaWxsXCIsXG4gICAgICAgICAgICBDc3NfQXRvbWljVHlwZXMuQ29sb3IudG9TdHJpbmcoeClcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gZmlsbE9wYWNpdHkob3BhY2l0eSkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwiZmlsbE9wYWNpdHlcIixcbiAgICAgICAgICAgIG9wYWNpdHkudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBmaWxsUnVsZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJmaWxsUnVsZVwiLFxuICAgICAgICAgICAgeCA+PSAxMTA1NjMwMjkgPyBcImV2ZW5vZGRcIiA6IFwibm9uemVyb1wiXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0cm9rZSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJzdHJva2VcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJva2VXaWR0aCh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJzdHJva2VXaWR0aFwiLFxuICAgICAgICAgICAgQ3NzX0F0b21pY1R5cGVzLkxlbmd0aC50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJva2VPcGFjaXR5KG9wYWNpdHkpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0cm9rZU9wYWNpdHlcIixcbiAgICAgICAgICAgIG9wYWNpdHkudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJva2VNaXRlcmxpbWl0KHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0cm9rZU1pdGVybGltaXRcIixcbiAgICAgICAgICAgIHgudG9TdHJpbmcoKVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdHJva2VMaW5lY2FwKHgpIHtcbiAgcmV0dXJuIC8qIEQgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICBcInN0cm9rZUxpbmVjYXBcIixcbiAgICAgICAgICAgIHggIT09IC02NTUyMjg3NzEgPyAoXG4gICAgICAgICAgICAgICAgeCA+PSAtMzEyMDg0NDAyID8gXCJyb3VuZFwiIDogXCJidXR0XCJcbiAgICAgICAgICAgICAgKSA6IFwic3F1YXJlXCJcbiAgICAgICAgICBdKTtcbn1cblxuZnVuY3Rpb24gc3Ryb2tlTGluZWpvaW4oeCkge1xuICByZXR1cm4gLyogRCAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgIFwic3Ryb2tlTGluZWpvaW5cIixcbiAgICAgICAgICAgIHggIT09IDE0MTM2MTE1NyA/IChcbiAgICAgICAgICAgICAgICB4ID49IDgxMTY4MTkxNCA/IFwiYmV2ZWxcIiA6IFwicm91bmRcIlxuICAgICAgICAgICAgICApIDogXCJtaXRlclwiXG4gICAgICAgICAgXSk7XG59XG5cbmZ1bmN0aW9uIHN0b3BDb2xvcih4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJzdG9wQ29sb3JcIixcbiAgICAgICAgICAgIENzc19BdG9taWNUeXBlcy5Db2xvci50b1N0cmluZyh4KVxuICAgICAgICAgIF0pO1xufVxuXG5mdW5jdGlvbiBzdG9wT3BhY2l0eSh4KSB7XG4gIHJldHVybiAvKiBEICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgXCJzdG9wT3BhY2l0eVwiLFxuICAgICAgICAgICAgeC50b1N0cmluZygpXG4gICAgICAgICAgXSk7XG59XG5cbnZhciBUeXBlcztcblxuZnVuY3Rpb24gTWFrZShmdW5hcmcpIHtcbiAgdmFyIG1lcmdlID0gZnVuY3Rpb24gKHN0eWxlbmFtZXMpIHtcbiAgICByZXR1cm4gZnVuYXJnLm1lcmdlU3R5bGVzKCQkQXJyYXkub2ZfbGlzdChzdHlsZW5hbWVzKSk7XG4gIH07XG4gIHZhciBpbnNlcnRSdWxlID0gZnVuY3Rpb24gKHMpIHtcbiAgICByZXR1cm4gZnVuYXJnLmluamVjdFJhdyhzKTtcbiAgfTtcbiAgdmFyIHN0eWxlID0gZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgcmV0dXJuIGZ1bmFyZy5tYWtlKHRvSnNvbihydWxlcykpO1xuICB9O1xuICB2YXIgJCRnbG9iYWwgPSBmdW5jdGlvbiAoc2VsZWN0b3IsIHJ1bGVzKSB7XG4gICAgcmV0dXJuIGZ1bmFyZy5pbmplY3RSdWxlKEpzX2RpY3QuZnJvbUxpc3QoLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yLFxuICAgICAgICAgICAgICAgICAgICAgIHRvSnNvbihydWxlcylcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdKSk7XG4gIH07XG4gIHZhciBrZXlmcmFtZXMgPSBmdW5jdGlvbiAoZnJhbWVzKSB7XG4gICAgcmV0dXJuIGZ1bmFyZy5tYWtlS2V5RnJhbWVzKExpc3QuZm9sZF9sZWZ0KGFkZFN0b3AsIHsgfSwgZnJhbWVzKSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgICAgICAgJCRnbG9iYWw6ICQkZ2xvYmFsLFxuICAgICAgICAgIGluc2VydFJ1bGU6IGluc2VydFJ1bGUsXG4gICAgICAgICAgbWVyZ2U6IG1lcmdlLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgICAgICBrZXlmcmFtZXM6IGtleWZyYW1lc1xuICAgICAgICB9O1xufVxuXG52YXIgd29yZFdyYXAgPSBvdmVyZmxvd1dyYXA7XG5cbnZhciBhdXRvID0gLyogYXV0byAqLy0xMDY1OTUxMzc3O1xuXG52YXIgbm9uZSA9IC8qIG5vbmUgKi8tOTIyMDg2NzI4O1xuXG52YXIgdGV4dCQxID0gLyogdGV4dCAqLy04NTYwNDQzNzE7XG5cbnZhciBmaXhlZCA9IC8qIGZpeGVkICovMTA2MTUxNTY7XG5cbnZhciBoaWRkZW4gPSAvKiBoaWRkZW4gKi8tODYyNTg0OTgyO1xuXG52YXIgdmlzaWJsZSA9IC8qIHZpc2libGUgKi81ODk1OTI2OTA7XG5cbnZhciBzY3JvbGwgPSAvKiBzY3JvbGwgKi8tOTQ5NjkyNDAzO1xuXG52YXIgbG9jYWwgPSAvKiBsb2NhbCAqLy0xMTg0Mzc1MjU7XG5cbnZhciBwYWRkaW5nQm94ID0gLyogcGFkZGluZ0JveCAqLzk3MjU3NTkzMDtcblxudmFyIGJvcmRlckJveCA9IC8qIGJvcmRlckJveCAqLzkzMDcyNjM7XG5cbnZhciBjb250ZW50Qm94ID0gLyogY29udGVudEJveCAqLy0xMDA4ODQ4MzAyO1xuXG52YXIgbm9SZXBlYXQgPSAvKiBub1JlcGVhdCAqLy02OTU0MzA1MzI7XG5cbnZhciBzcGFjZSA9IC8qIHNwYWNlICovMjM0OTc5MjY7XG5cbnZhciByZXBlYXQgPSAvKiByZXBlYXQgKi8xMDg4Mjg1MDc7XG5cbnZhciBtaW5tYXggPSAvKiBtaW5tYXggKi8tNzU0ODU5OTUwO1xuXG52YXIgcmVwZWF0WCA9IC8qIHJlcGVhdFggKi82NDY0MzcwMjE7XG5cbnZhciByZXBlYXRZID0gLyogcmVwZWF0WSAqLzY0NjQzNzAyMjtcblxudmFyIGNvbnRhaW4gPSAvKiBjb250YWluICovNDI3MDY1MzAwO1xuXG52YXIgY292ZXIgPSAvKiBjb3ZlciAqLy04OTk0MTYyNjU7XG5cbnZhciByb3cgPSAvKiByb3cgKi81NjkzOTc4O1xuXG52YXIgcm93UmV2ZXJzZSA9IC8qIHJvd1JldmVyc2UgKi8zNzg5NTEyMDg7XG5cbnZhciBjb2x1bW4gPSAvKiBjb2x1bW4gKi8tOTYzOTQ4ODQyO1xuXG52YXIgY29sdW1uUmV2ZXJzZSA9IC8qIGNvbHVtblJldmVyc2UgKi8xMzU0Nzc0ODQ7XG5cbnZhciB3cmFwID0gLyogd3JhcCAqLy04MjIxMzQzMjY7XG5cbnZhciBub3dyYXAgPSAvKiBub3dyYXAgKi84Njc5MTMzNTU7XG5cbnZhciB3cmFwUmV2ZXJzZSA9IC8qIHdyYXBSZXZlcnNlICovLTQ2MzEyMTI4ODtcblxudmFyIGlubGluZSA9IC8qIGlubGluZSAqLzQyMzYxMDk2OTtcblxudmFyIGJsb2NrID0gLyogYmxvY2sgKi84ODg5NjAzMzM7XG5cbnZhciBjb250ZW50cyA9IC8qIGNvbnRlbnRzICovNzkwODg5NzU0O1xuXG52YXIgZmxleEJveCA9IC8qIGZsZXggKi8tMTAxMDk1NDQzOTtcblxudmFyIGdyaWQgPSAvKiBncmlkICovLTk5OTU2NTYyNjtcblxudmFyIGlubGluZUJsb2NrID0gLyogaW5saW5lQmxvY2sgKi8tMTQ3Nzg1Njc2O1xuXG52YXIgaW5saW5lRmxleCA9IC8qIGlubGluZUZsZXggKi81MzMyMzMxNDtcblxudmFyIGlubGluZUdyaWQgPSAvKiBpbmxpbmVHcmlkICovNjQ3MTIxMjc7XG5cbnZhciBpbmxpbmVUYWJsZSA9IC8qIGlubGluZVRhYmxlICovLTg1NDA1MDA1OTtcblxudmFyIGxpc3RJdGVtID0gLyogbGlzdEl0ZW0gKi82MzI1OTE1MDU7XG5cbnZhciBydW5JbiA9IC8qIHJ1bkluICovLTI0NTkwMzM0NDtcblxudmFyIHRhYmxlID0gLyogdGFibGUgKi8xODI2OTU5NTA7XG5cbnZhciB0YWJsZUNhcHRpb24gPSAvKiB0YWJsZUNhcHRpb24gKi8xMDU0ODI2NjE2O1xuXG52YXIgdGFibGVDb2x1bW5Hcm91cCA9IC8qIHRhYmxlQ29sdW1uR3JvdXAgKi84NTAyMDk1NjM7XG5cbnZhciB0YWJsZUhlYWRlckdyb3VwID0gLyogdGFibGVIZWFkZXJHcm91cCAqLzYwNjQxOTIwNDtcblxudmFyIHRhYmxlRm9vdGVyR3JvdXAgPSAvKiB0YWJsZUZvb3Rlckdyb3VwICovLTEwNDU2OTYyMDI7XG5cbnZhciB0YWJsZVJvd0dyb3VwID0gLyogdGFibGVSb3dHcm91cCAqLy04MzY3MjU1MTc7XG5cbnZhciB0YWJsZUNlbGwgPSAvKiB0YWJsZUNlbGwgKi83OTM5MTI1Mjg7XG5cbnZhciB0YWJsZUNvbHVtbiA9IC8qIHRhYmxlQ29sdW1uICovOTcxMjI2OTI7XG5cbnZhciB0YWJsZVJvdyA9IC8qIHRhYmxlUm93ICovLTg0MzEyOTE3MjtcblxudmFyIGZsZXhTdGFydCA9IC8qIGZsZXhTdGFydCAqLzY2MjQzOTUyOTtcblxudmFyIGZsZXhFbmQgPSAvKiBmbGV4RW5kICovOTI0MjY4MDY2O1xuXG52YXIgY2VudGVyID0gLyogY2VudGVyICovOTgyNDgxNDk7XG5cbnZhciBzdHJldGNoID0gLyogc3RyZXRjaCAqLy0xNjIzMTY3OTU7XG5cbnZhciBzcGFjZUJldHdlZW4gPSAvKiBzcGFjZUJldHdlZW4gKi81MTY2ODIxNDY7XG5cbnZhciBzcGFjZUFyb3VuZCA9IC8qIHNwYWNlQXJvdW5kICovLTQ4NTg5NTc1NztcblxudmFyIHNwYWNlRXZlbmx5ID0gLyogc3BhY2VFdmVubHkgKi8tMTAxNjA2MTU1NTtcblxudmFyIGJhc2VsaW5lID0gLyogYmFzZWxpbmUgKi8yODc4MjUwMjk7XG5cbnZhciBmb3J3YXJkcyA9IC8qIGZvcndhcmRzICovNzMzNjUzNzc0O1xuXG52YXIgYmFja3dhcmRzID0gLyogYmFja3dhcmRzICovMjQ1ODYxMTY4O1xuXG52YXIgYm90aCA9IC8qIGJvdGggKi8tMTA1NTE2MDE5MTtcblxudmFyIGluZmluaXRlID0gLyogaW5maW5pdGUgKi8tNjMwNjQ3MDg0O1xuXG52YXIgcGF1c2VkID0gLyogcGF1c2VkICovLTI3NjU0NTM2MjtcblxudmFyIHJ1bm5pbmcgPSAvKiBydW5uaW5nICovLTM0NTQxMjA5NztcblxudmFyIGluc2lkZSA9IC8qIGluc2lkZSAqLzUwMTIzNTcwODtcblxudmFyIG91dHNpZGUgPSAvKiBvdXRzaWRlICovLTQzMDAxMTA5OTtcblxudmFyIHNvbGlkID0gLyogc29saWQgKi8xMjk1NjcxNTtcblxudmFyIGRvdHRlZCA9IC8qIGRvdHRlZCAqLzg0MTk3OTYyNjtcblxudmFyIGRhc2hlZCA9IC8qIGRhc2hlZCAqLzU2ODQwMzUwNTtcblxudmFyIHVuZGVybGluZSA9IC8qIHVuZGVybGluZSAqLzEzMTE0MjkyNDtcblxudmFyIG92ZXJsaW5lID0gLyogb3ZlcmxpbmUgKi8tOTg2NjUxODMyO1xuXG52YXIgbGluZVRocm91Z2ggPSAvKiBsaW5lVGhyb3VnaCAqLzQxMjE1NTU2OTtcblxudmFyIGNsaXAgPSAvKiBjbGlwICovLTEwNDQyMjIyNTY7XG5cbnZhciBlbGxpcHNpcyA9IC8qIGVsbGlwc2lzICovMTY2ODg4Nzg1O1xuXG52YXIgd2F2eSA9IC8qIHdhdnkgKi8tODIyOTc1MDI3O1xuXG52YXIgJCRkb3VibGUgPSAvKiBkb3VibGUgKi84NTIxNzU2MzM7XG5cbnZhciB1cHBlcmNhc2UgPSAvKiB1cHBlcmNhc2UgKi8tNDE1MzMwMDMwO1xuXG52YXIgbG93ZXJjYXNlID0gLyogbG93ZXJjYXNlICovLTQyNTM0OTgzOTtcblxudmFyIGNhcGl0YWxpemUgPSAvKiBjYXBpdGFsaXplICovLTUwOTg2NzYwNDtcblxudmFyIHN1YiA9IC8qIHN1YiAqLzU3NDUwMjQ7XG5cbnZhciAkJHN1cGVyID0gLyogc3VwZXIgKi83OTY5MjE1NTtcblxudmFyIHRleHRUb3AgPSAvKiB0ZXh0VG9wICovNTE2NDA2MjQ4O1xuXG52YXIgdGV4dEJvdHRvbSA9IC8qIHRleHRCb3R0b20gKi80NzY2Njk4MTY7XG5cbnZhciBtaWRkbGUgPSAvKiBtaWRkbGUgKi8tODY2MjAwNzQ3O1xuXG52YXIgbm9ybWFsID0gLyogbm9ybWFsICovODEyMjE2ODcxO1xuXG52YXIgYnJlYWtBbGwgPSAvKiBicmVha0FsbCAqLy0zMjM3NjA3MzQ7XG5cbnZhciBrZWVwQWxsID0gLyoga2VlcEFsbCAqLzg5Mjc0ODE4ODtcblxudmFyIGJyZWFrV29yZCA9IC8qIGJyZWFrV29yZCAqLzEwNTk5MjE0NDk7XG5cbnZhciByZXZlcnNlID0gLyogcmV2ZXJzZSAqLzQ1MjczNzMxNDtcblxudmFyIGFsdGVybmF0ZSA9IC8qIGFsdGVybmF0ZSAqLzg5MjU4NjI5ODtcblxudmFyIGFsdGVybmF0ZVJldmVyc2UgPSAvKiBhbHRlcm5hdGVSZXZlcnNlICovNTQ1NDI4MjMyO1xuXG52YXIgZmlsbCQxID0gLyogZmlsbCAqLy0xMDExMTAyMDc3O1xuXG52YXIgY29udGVudCA9IC8qIGNvbnRlbnQgKi80MjcyNjUzMzc7XG5cbnZhciBtYXhDb250ZW50ID0gLyogbWF4Q29udGVudCAqLzYwNTU3MDQ1O1xuXG52YXIgbWluQ29udGVudCA9IC8qIG1pbkNvbnRlbnQgKi8tNTUwNTc3NzIxO1xuXG52YXIgZml0Q29udGVudCA9IC8qIGZpdENvbnRlbnQgKi8tMTk1ODA1MzM2O1xuXG52YXIgYWxsID0gLyogYWxsICovNDg0NzkwNTtcblxudmFyIHJvdW5kID0gLyogcm91bmQgKi8tMzEyMDg0NDAyO1xuXG52YXIgbWl0ZXIgPSAvKiBtaXRlciAqLzE0MTM2MTE1NztcblxudmFyIGJldmVsID0gLyogYmV2ZWwgKi84MTE2ODE5MTQ7XG5cbnZhciBidXR0ID0gLyogYnV0dCAqLy0xMDU0ODYxODA1O1xuXG52YXIgc3F1YXJlID0gLyogc3F1YXJlICovLTY1NTIyODc3MTtcblxudmFyIHRyYW5zaXRpb25zID0gdHJhbnNpdGlvbkxpc3Q7XG5cbnZhciBTVkcgPSB7XG4gIGZpbGw6IGZpbGwsXG4gIGZpbGxSdWxlOiBmaWxsUnVsZSxcbiAgZmlsbE9wYWNpdHk6IGZpbGxPcGFjaXR5LFxuICBzdHJva2U6IHN0cm9rZSxcbiAgc3Ryb2tlTGluZWNhcDogc3Ryb2tlTGluZWNhcCxcbiAgc3Ryb2tlTGluZWpvaW46IHN0cm9rZUxpbmVqb2luLFxuICBzdHJva2VNaXRlcmxpbWl0OiBzdHJva2VNaXRlcmxpbWl0LFxuICBzdHJva2VXaWR0aDogc3Ryb2tlV2lkdGgsXG4gIHN0cm9rZU9wYWNpdHk6IHN0cm9rZU9wYWNpdHksXG4gIHN0b3BDb2xvcjogc3RvcENvbG9yLFxuICBzdG9wT3BhY2l0eTogc3RvcE9wYWNpdHlcbn07XG5cbnZhciBhbGljZWJsdWUgPSBDc3NfQ29sb3JzLmFsaWNlYmx1ZTtcblxudmFyIGFudGlxdWV3aGl0ZSA9IENzc19Db2xvcnMuYW50aXF1ZXdoaXRlO1xuXG52YXIgYXF1YSA9IENzc19Db2xvcnMuYXF1YTtcblxudmFyIGFxdWFtYXJpbmUgPSBDc3NfQ29sb3JzLmFxdWFtYXJpbmU7XG5cbnZhciBhenVyZSA9IENzc19Db2xvcnMuYXp1cmU7XG5cbnZhciBiZWlnZSA9IENzc19Db2xvcnMuYmVpZ2U7XG5cbnZhciBiaXNxdWUgPSBDc3NfQ29sb3JzLmJpc3F1ZTtcblxudmFyIGJsYWNrID0gQ3NzX0NvbG9ycy5ibGFjaztcblxudmFyIGJsYW5jaGVkYWxtb25kID0gQ3NzX0NvbG9ycy5ibGFuY2hlZGFsbW9uZDtcblxudmFyIGJsdWUgPSBDc3NfQ29sb3JzLmJsdWU7XG5cbnZhciBibHVldmlvbGV0ID0gQ3NzX0NvbG9ycy5ibHVldmlvbGV0O1xuXG52YXIgYnJvd24gPSBDc3NfQ29sb3JzLmJyb3duO1xuXG52YXIgYnVybHl3b29kID0gQ3NzX0NvbG9ycy5idXJseXdvb2Q7XG5cbnZhciBjYWRldGJsdWUgPSBDc3NfQ29sb3JzLmNhZGV0Ymx1ZTtcblxudmFyIGNoYXJ0cmV1c2UgPSBDc3NfQ29sb3JzLmNoYXJ0cmV1c2U7XG5cbnZhciBjaG9jb2xhdGUgPSBDc3NfQ29sb3JzLmNob2NvbGF0ZTtcblxudmFyIGNvcmFsID0gQ3NzX0NvbG9ycy5jb3JhbDtcblxudmFyIGNvcm5mbG93ZXJibHVlID0gQ3NzX0NvbG9ycy5jb3JuZmxvd2VyYmx1ZTtcblxudmFyIGNvcm5zaWxrID0gQ3NzX0NvbG9ycy5jb3Juc2lsaztcblxudmFyIGNyaW1zb24gPSBDc3NfQ29sb3JzLmNyaW1zb247XG5cbnZhciBjeWFuID0gQ3NzX0NvbG9ycy5jeWFuO1xuXG52YXIgZGFya2JsdWUgPSBDc3NfQ29sb3JzLmRhcmtibHVlO1xuXG52YXIgZGFya2N5YW4gPSBDc3NfQ29sb3JzLmRhcmtjeWFuO1xuXG52YXIgZGFya2dvbGRlbnJvZCA9IENzc19Db2xvcnMuZGFya2dvbGRlbnJvZDtcblxudmFyIGRhcmtncmF5ID0gQ3NzX0NvbG9ycy5kYXJrZ3JheTtcblxudmFyIGRhcmtncmV5ID0gQ3NzX0NvbG9ycy5kYXJrZ3JleTtcblxudmFyIGRhcmtncmVlbiA9IENzc19Db2xvcnMuZGFya2dyZWVuO1xuXG52YXIgZGFya2toYWtpID0gQ3NzX0NvbG9ycy5kYXJra2hha2k7XG5cbnZhciBkYXJrbWFnZW50YSA9IENzc19Db2xvcnMuZGFya21hZ2VudGE7XG5cbnZhciBkYXJrb2xpdmVncmVlbiA9IENzc19Db2xvcnMuZGFya29saXZlZ3JlZW47XG5cbnZhciBkYXJrb3JhbmdlID0gQ3NzX0NvbG9ycy5kYXJrb3JhbmdlO1xuXG52YXIgZGFya29yY2hpZCA9IENzc19Db2xvcnMuZGFya29yY2hpZDtcblxudmFyIGRhcmtyZWQgPSBDc3NfQ29sb3JzLmRhcmtyZWQ7XG5cbnZhciBkYXJrc2FsbW9uID0gQ3NzX0NvbG9ycy5kYXJrc2FsbW9uO1xuXG52YXIgZGFya3NlYWdyZWVuID0gQ3NzX0NvbG9ycy5kYXJrc2VhZ3JlZW47XG5cbnZhciBkYXJrc2xhdGVibHVlID0gQ3NzX0NvbG9ycy5kYXJrc2xhdGVibHVlO1xuXG52YXIgZGFya3NsYXRlZ3JheSA9IENzc19Db2xvcnMuZGFya3NsYXRlZ3JheTtcblxudmFyIGRhcmtzbGF0ZWdyZXkgPSBDc3NfQ29sb3JzLmRhcmtzbGF0ZWdyZXk7XG5cbnZhciBkYXJrdHVycXVvaXNlID0gQ3NzX0NvbG9ycy5kYXJrdHVycXVvaXNlO1xuXG52YXIgZGFya3Zpb2xldCA9IENzc19Db2xvcnMuZGFya3Zpb2xldDtcblxudmFyIGRlZXBwaW5rID0gQ3NzX0NvbG9ycy5kZWVwcGluaztcblxudmFyIGRlZXBza3libHVlID0gQ3NzX0NvbG9ycy5kZWVwc2t5Ymx1ZTtcblxudmFyIGRpbWdyYXkgPSBDc3NfQ29sb3JzLmRpbWdyYXk7XG5cbnZhciBkaW1ncmV5ID0gQ3NzX0NvbG9ycy5kaW1ncmV5O1xuXG52YXIgZG9kZ2VyYmx1ZSA9IENzc19Db2xvcnMuZG9kZ2VyYmx1ZTtcblxudmFyIGZpcmVicmljayA9IENzc19Db2xvcnMuZmlyZWJyaWNrO1xuXG52YXIgZmxvcmFsd2hpdGUgPSBDc3NfQ29sb3JzLmZsb3JhbHdoaXRlO1xuXG52YXIgZm9yZXN0Z3JlZW4gPSBDc3NfQ29sb3JzLmZvcmVzdGdyZWVuO1xuXG52YXIgZnVjaHNpYSA9IENzc19Db2xvcnMuZnVjaHNpYTtcblxudmFyIGdhaW5zYm9ybyA9IENzc19Db2xvcnMuZ2FpbnNib3JvO1xuXG52YXIgZ2hvc3R3aGl0ZSA9IENzc19Db2xvcnMuZ2hvc3R3aGl0ZTtcblxudmFyIGdvbGQgPSBDc3NfQ29sb3JzLmdvbGQ7XG5cbnZhciBnb2xkZW5yb2QgPSBDc3NfQ29sb3JzLmdvbGRlbnJvZDtcblxudmFyIGdyYXkgPSBDc3NfQ29sb3JzLmdyYXk7XG5cbnZhciBncmV5ID0gQ3NzX0NvbG9ycy5ncmV5O1xuXG52YXIgZ3JlZW4gPSBDc3NfQ29sb3JzLmdyZWVuO1xuXG52YXIgZ3JlZW55ZWxsb3cgPSBDc3NfQ29sb3JzLmdyZWVueWVsbG93O1xuXG52YXIgaG9uZXlkZXcgPSBDc3NfQ29sb3JzLmhvbmV5ZGV3O1xuXG52YXIgaG90cGluayA9IENzc19Db2xvcnMuaG90cGluaztcblxudmFyIGluZGlhbnJlZCA9IENzc19Db2xvcnMuaW5kaWFucmVkO1xuXG52YXIgaW5kaWdvID0gQ3NzX0NvbG9ycy5pbmRpZ287XG5cbnZhciBpdm9yeSA9IENzc19Db2xvcnMuaXZvcnk7XG5cbnZhciBraGFraSA9IENzc19Db2xvcnMua2hha2k7XG5cbnZhciBsYXZlbmRlciA9IENzc19Db2xvcnMubGF2ZW5kZXI7XG5cbnZhciBsYXZlbmRlcmJsdXNoID0gQ3NzX0NvbG9ycy5sYXZlbmRlcmJsdXNoO1xuXG52YXIgbGF3bmdyZWVuID0gQ3NzX0NvbG9ycy5sYXduZ3JlZW47XG5cbnZhciBsZW1vbmNoaWZmb24gPSBDc3NfQ29sb3JzLmxlbW9uY2hpZmZvbjtcblxudmFyIGxpZ2h0Ymx1ZSA9IENzc19Db2xvcnMubGlnaHRibHVlO1xuXG52YXIgbGlnaHRjb3JhbCA9IENzc19Db2xvcnMubGlnaHRjb3JhbDtcblxudmFyIGxpZ2h0Y3lhbiA9IENzc19Db2xvcnMubGlnaHRjeWFuO1xuXG52YXIgbGlnaHRnb2xkZW5yb2R5ZWxsb3cgPSBDc3NfQ29sb3JzLmxpZ2h0Z29sZGVucm9keWVsbG93O1xuXG52YXIgbGlnaHRncmF5ID0gQ3NzX0NvbG9ycy5saWdodGdyYXk7XG5cbnZhciBsaWdodGdyZXkgPSBDc3NfQ29sb3JzLmxpZ2h0Z3JleTtcblxudmFyIGxpZ2h0Z3JlZW4gPSBDc3NfQ29sb3JzLmxpZ2h0Z3JlZW47XG5cbnZhciBsaWdodHBpbmsgPSBDc3NfQ29sb3JzLmxpZ2h0cGluaztcblxudmFyIGxpZ2h0c2FsbW9uID0gQ3NzX0NvbG9ycy5saWdodHNhbG1vbjtcblxudmFyIGxpZ2h0c2VhZ3JlZW4gPSBDc3NfQ29sb3JzLmxpZ2h0c2VhZ3JlZW47XG5cbnZhciBsaWdodHNreWJsdWUgPSBDc3NfQ29sb3JzLmxpZ2h0c2t5Ymx1ZTtcblxudmFyIGxpZ2h0c2xhdGVncmF5ID0gQ3NzX0NvbG9ycy5saWdodHNsYXRlZ3JheTtcblxudmFyIGxpZ2h0c2xhdGVncmV5ID0gQ3NzX0NvbG9ycy5saWdodHNsYXRlZ3JleTtcblxudmFyIGxpZ2h0c3RlZWxibHVlID0gQ3NzX0NvbG9ycy5saWdodHN0ZWVsYmx1ZTtcblxudmFyIGxpZ2h0eWVsbG93ID0gQ3NzX0NvbG9ycy5saWdodHllbGxvdztcblxudmFyIGxpbWUgPSBDc3NfQ29sb3JzLmxpbWU7XG5cbnZhciBsaW1lZ3JlZW4gPSBDc3NfQ29sb3JzLmxpbWVncmVlbjtcblxudmFyIGxpbmVuID0gQ3NzX0NvbG9ycy5saW5lbjtcblxudmFyIG1hZ2VudGEgPSBDc3NfQ29sb3JzLm1hZ2VudGE7XG5cbnZhciBtYXJvb24gPSBDc3NfQ29sb3JzLm1hcm9vbjtcblxudmFyIG1lZGl1bWFxdWFtYXJpbmUgPSBDc3NfQ29sb3JzLm1lZGl1bWFxdWFtYXJpbmU7XG5cbnZhciBtZWRpdW1ibHVlID0gQ3NzX0NvbG9ycy5tZWRpdW1ibHVlO1xuXG52YXIgbWVkaXVtb3JjaGlkID0gQ3NzX0NvbG9ycy5tZWRpdW1vcmNoaWQ7XG5cbnZhciBtZWRpdW1wdXJwbGUgPSBDc3NfQ29sb3JzLm1lZGl1bXB1cnBsZTtcblxudmFyIG1lZGl1bXNlYWdyZWVuID0gQ3NzX0NvbG9ycy5tZWRpdW1zZWFncmVlbjtcblxudmFyIG1lZGl1bXNsYXRlYmx1ZSA9IENzc19Db2xvcnMubWVkaXVtc2xhdGVibHVlO1xuXG52YXIgbWVkaXVtc3ByaW5nZ3JlZW4gPSBDc3NfQ29sb3JzLm1lZGl1bXNwcmluZ2dyZWVuO1xuXG52YXIgbWVkaXVtdHVycXVvaXNlID0gQ3NzX0NvbG9ycy5tZWRpdW10dXJxdW9pc2U7XG5cbnZhciBtZWRpdW12aW9sZXRyZWQgPSBDc3NfQ29sb3JzLm1lZGl1bXZpb2xldHJlZDtcblxudmFyIG1pZG5pZ2h0Ymx1ZSA9IENzc19Db2xvcnMubWlkbmlnaHRibHVlO1xuXG52YXIgbWludGNyZWFtID0gQ3NzX0NvbG9ycy5taW50Y3JlYW07XG5cbnZhciBtaXN0eXJvc2UgPSBDc3NfQ29sb3JzLm1pc3R5cm9zZTtcblxudmFyIG1vY2Nhc2luID0gQ3NzX0NvbG9ycy5tb2NjYXNpbjtcblxudmFyIG5hdmFqb3doaXRlID0gQ3NzX0NvbG9ycy5uYXZham93aGl0ZTtcblxudmFyIG5hdnkgPSBDc3NfQ29sb3JzLm5hdnk7XG5cbnZhciBvbGRsYWNlID0gQ3NzX0NvbG9ycy5vbGRsYWNlO1xuXG52YXIgb2xpdmUgPSBDc3NfQ29sb3JzLm9saXZlO1xuXG52YXIgb2xpdmVkcmFiID0gQ3NzX0NvbG9ycy5vbGl2ZWRyYWI7XG5cbnZhciBvcmFuZ2UgPSBDc3NfQ29sb3JzLm9yYW5nZTtcblxudmFyIG9yYW5nZXJlZCA9IENzc19Db2xvcnMub3JhbmdlcmVkO1xuXG52YXIgb3JjaGlkID0gQ3NzX0NvbG9ycy5vcmNoaWQ7XG5cbnZhciBwYWxlZ29sZGVucm9kID0gQ3NzX0NvbG9ycy5wYWxlZ29sZGVucm9kO1xuXG52YXIgcGFsZWdyZWVuID0gQ3NzX0NvbG9ycy5wYWxlZ3JlZW47XG5cbnZhciBwYWxldHVycXVvaXNlID0gQ3NzX0NvbG9ycy5wYWxldHVycXVvaXNlO1xuXG52YXIgcGFsZXZpb2xldHJlZCA9IENzc19Db2xvcnMucGFsZXZpb2xldHJlZDtcblxudmFyIHBhcGF5YXdoaXAgPSBDc3NfQ29sb3JzLnBhcGF5YXdoaXA7XG5cbnZhciBwZWFjaHB1ZmYgPSBDc3NfQ29sb3JzLnBlYWNocHVmZjtcblxudmFyIHBlcnUgPSBDc3NfQ29sb3JzLnBlcnU7XG5cbnZhciBwaW5rID0gQ3NzX0NvbG9ycy5waW5rO1xuXG52YXIgcGx1bSA9IENzc19Db2xvcnMucGx1bTtcblxudmFyIHBvd2RlcmJsdWUgPSBDc3NfQ29sb3JzLnBvd2RlcmJsdWU7XG5cbnZhciBwdXJwbGUgPSBDc3NfQ29sb3JzLnB1cnBsZTtcblxudmFyIHJlYmVjY2FwdXJwbGUgPSBDc3NfQ29sb3JzLnJlYmVjY2FwdXJwbGU7XG5cbnZhciByZWQgPSBDc3NfQ29sb3JzLnJlZDtcblxudmFyIHJvc3licm93biA9IENzc19Db2xvcnMucm9zeWJyb3duO1xuXG52YXIgcm95YWxibHVlID0gQ3NzX0NvbG9ycy5yb3lhbGJsdWU7XG5cbnZhciBzYWRkbGVicm93biA9IENzc19Db2xvcnMuc2FkZGxlYnJvd247XG5cbnZhciBzYWxtb24gPSBDc3NfQ29sb3JzLnNhbG1vbjtcblxudmFyIHNhbmR5YnJvd24gPSBDc3NfQ29sb3JzLnNhbmR5YnJvd247XG5cbnZhciBzZWFncmVlbiA9IENzc19Db2xvcnMuc2VhZ3JlZW47XG5cbnZhciBzZWFzaGVsbCA9IENzc19Db2xvcnMuc2Vhc2hlbGw7XG5cbnZhciBzaWVubmEgPSBDc3NfQ29sb3JzLnNpZW5uYTtcblxudmFyIHNpbHZlciA9IENzc19Db2xvcnMuc2lsdmVyO1xuXG52YXIgc2t5Ymx1ZSA9IENzc19Db2xvcnMuc2t5Ymx1ZTtcblxudmFyIHNsYXRlYmx1ZSA9IENzc19Db2xvcnMuc2xhdGVibHVlO1xuXG52YXIgc2xhdGVncmF5ID0gQ3NzX0NvbG9ycy5zbGF0ZWdyYXk7XG5cbnZhciBzbGF0ZWdyZXkgPSBDc3NfQ29sb3JzLnNsYXRlZ3JleTtcblxudmFyIHNub3cgPSBDc3NfQ29sb3JzLnNub3c7XG5cbnZhciBzcHJpbmdncmVlbiA9IENzc19Db2xvcnMuc3ByaW5nZ3JlZW47XG5cbnZhciBzdGVlbGJsdWUgPSBDc3NfQ29sb3JzLnN0ZWVsYmx1ZTtcblxudmFyIHRhbiA9IENzc19Db2xvcnMudGFuO1xuXG52YXIgdGVhbCA9IENzc19Db2xvcnMudGVhbDtcblxudmFyIHRoaXN0bGUgPSBDc3NfQ29sb3JzLnRoaXN0bGU7XG5cbnZhciB0b21hdG8gPSBDc3NfQ29sb3JzLnRvbWF0bztcblxudmFyIHR1cnF1b2lzZSA9IENzc19Db2xvcnMudHVycXVvaXNlO1xuXG52YXIgdmlvbGV0ID0gQ3NzX0NvbG9ycy52aW9sZXQ7XG5cbnZhciB3aGVhdCA9IENzc19Db2xvcnMud2hlYXQ7XG5cbnZhciB3aGl0ZSA9IENzc19Db2xvcnMud2hpdGU7XG5cbnZhciB3aGl0ZXNtb2tlID0gQ3NzX0NvbG9ycy53aGl0ZXNtb2tlO1xuXG52YXIgeWVsbG93ID0gQ3NzX0NvbG9ycy55ZWxsb3c7XG5cbnZhciB5ZWxsb3dncmVlbiA9IENzc19Db2xvcnMueWVsbG93Z3JlZW47XG5cbmV4cG9ydCB7XG4gIFR5cGVzICxcbiAgTWFrZSAsXG4gIHRvSnNvbiAsXG4gIGltcG9ydGFudCAsXG4gIGxhYmVsICxcbiAgU2hhZG93ICxcbiAgdW5zYWZlICxcbiAgYWxpZ25Db250ZW50ICxcbiAgYWxpZ25JdGVtcyAsXG4gIGFsaWduU2VsZiAsXG4gIGFuaW1hdGlvbkRlbGF5ICxcbiAgYW5pbWF0aW9uRGlyZWN0aW9uICxcbiAgYW5pbWF0aW9uRHVyYXRpb24gLFxuICBhbmltYXRpb25GaWxsTW9kZSAsXG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50ICxcbiAgYW5pbWF0aW9uUGxheVN0YXRlICxcbiAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24gLFxuICBiYWNrZHJvcEZpbHRlciAsXG4gIGJhY2tmYWNlVmlzaWJpbGl0eSAsXG4gIGJhY2tncm91bmRBdHRhY2htZW50ICxcbiAgYmFja2dyb3VuZENvbG9yICxcbiAgYmFja2dyb3VuZENsaXAgLFxuICBiYWNrZ3JvdW5kSW1hZ2UgLFxuICBiYWNrZ3JvdW5kT3JpZ2luICxcbiAgYmFja2dyb3VuZFBvc2l0aW9uICxcbiAgYmFja2dyb3VuZFBvc2l0aW9ucyAsXG4gIGJhY2tncm91bmRQb3NpdGlvbjQgLFxuICBiYWNrZ3JvdW5kUmVwZWF0ICxcbiAgYm9yZGVyQm90dG9tICxcbiAgYm9yZGVyQm90dG9tQ29sb3IgLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzICxcbiAgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgLFxuICBib3JkZXJCb3R0b21TdHlsZSAsXG4gIGJvcmRlckJvdHRvbVdpZHRoICxcbiAgYm9yZGVyQ29sbGFwc2UgLFxuICBib3JkZXJDb2xvciAsXG4gIGJvcmRlckxlZnQgLFxuICBib3JkZXJMZWZ0Q29sb3IgLFxuICBib3JkZXJMZWZ0U3R5bGUgLFxuICBib3JkZXJMZWZ0V2lkdGggLFxuICBib3JkZXJSaWdodCAsXG4gIGJvcmRlclJpZ2h0Q29sb3IgLFxuICBib3JkZXJSaWdodFN0eWxlICxcbiAgYm9yZGVyUmlnaHRXaWR0aCAsXG4gIGJvcmRlclJhZGl1cyAsXG4gIGJvcmRlclNwYWNpbmcgLFxuICBib3JkZXJTdHlsZSAsXG4gIGJvcmRlclRvcENvbG9yICxcbiAgYm9yZGVyVG9wTGVmdFJhZGl1cyAsXG4gIGJvcmRlclRvcFJpZ2h0UmFkaXVzICxcbiAgYm9yZGVyVG9wU3R5bGUgLFxuICBib3JkZXJUb3BXaWR0aCAsXG4gIGJvcmRlcldpZHRoICxcbiAgYm90dG9tICxcbiAgYm94U2l6aW5nICxcbiAgYm94U2hhZG93ICxcbiAgYm94U2hhZG93cyAsXG4gIGNsZWFyICxcbiAgY2xpcFBhdGggLFxuICBjb2xvciAsXG4gIGNvbHVtbkNvdW50ICxcbiAgY29udGVudFJ1bGUgLFxuICBjb250ZW50UnVsZXMgLFxuICBjb3VudGVySW5jcmVtZW50ICxcbiAgY291bnRlcnNJbmNyZW1lbnQgLFxuICBjb3VudGVyUmVzZXQgLFxuICBjb3VudGVyc1Jlc2V0ICxcbiAgY291bnRlclNldCAsXG4gIGNvdW50ZXJzU2V0ICxcbiAgY3Vyc29yICxcbiAgZGlyZWN0aW9uICxcbiAgZGlzcGxheSAsXG4gIGZsZXggLFxuICBmbGV4QmFzaXMgLFxuICBmbGV4RGlyZWN0aW9uICxcbiAgZmxleEdyb3cgLFxuICBmbGV4U2hyaW5rICxcbiAgZmxleFdyYXAgLFxuICAkJGZsb2F0ICxcbiAgZm9udEZhbWlseSAsXG4gIGZvbnRGYW1pbGllcyAsXG4gIGZvbnRTaXplICxcbiAgZm9udFN0eWxlICxcbiAgZm9udFZhcmlhbnQgLFxuICBmb250V2VpZ2h0ICxcbiAgZ3JpZEFyZWEgLFxuICBncmlkQXJlYTIgLFxuICBncmlkQXJlYTMgLFxuICBncmlkQXJlYTQgLFxuICBncmlkQXV0b0Zsb3cgLFxuICBncmlkQ29sdW1uICxcbiAgZ3JpZENvbHVtbkVuZCAsXG4gIGdyaWRDb2x1bW5HYXAgLFxuICBncmlkQ29sdW1uU3RhcnQgLFxuICBncmlkR2FwICxcbiAgZ3JpZFJvdyAsXG4gIGdyaWRSb3dFbmQgLFxuICBncmlkUm93R2FwICxcbiAgZ3JpZFJvd1N0YXJ0ICxcbiAgZ3JpZFRlbXBsYXRlQXJlYXMgLFxuICBoZWlnaHQgLFxuICBqdXN0aWZ5Q29udGVudCAsXG4gIGp1c3RpZnlTZWxmICxcbiAgbGVmdCAsXG4gIGxldHRlclNwYWNpbmcgLFxuICBsaW5lSGVpZ2h0ICxcbiAgbGlzdFN0eWxlICxcbiAgbGlzdFN0eWxlSW1hZ2UgLFxuICBsaXN0U3R5bGVUeXBlICxcbiAgbGlzdFN0eWxlUG9zaXRpb24gLFxuICBtYXJnaW4gLFxuICBtYXJnaW4yICxcbiAgbWFyZ2luMyAsXG4gIG1hcmdpbjQgLFxuICBtYXJnaW5MZWZ0ICxcbiAgbWFyZ2luUmlnaHQgLFxuICBtYXJnaW5Ub3AgLFxuICBtYXJnaW5Cb3R0b20gLFxuICBtYXhIZWlnaHQgLFxuICBtYXhXaWR0aCAsXG4gIG1pbkhlaWdodCAsXG4gIG1pbldpZHRoICxcbiAgb2JqZWN0Rml0ICxcbiAgb2JqZWN0UG9zaXRpb24gLFxuICBvcGFjaXR5ICxcbiAgb3JkZXIgLFxuICBvdXRsaW5lICxcbiAgb3V0bGluZUNvbG9yICxcbiAgb3V0bGluZU9mZnNldCAsXG4gIG91dGxpbmVTdHlsZSAsXG4gIG91dGxpbmVXaWR0aCAsXG4gIG92ZXJmbG93ICxcbiAgb3ZlcmZsb3dYICxcbiAgb3ZlcmZsb3dZICxcbiAgb3ZlcmZsb3dXcmFwICxcbiAgcGFkZGluZyAsXG4gIHBhZGRpbmcyICxcbiAgcGFkZGluZzMgLFxuICBwYWRkaW5nNCAsXG4gIHBhZGRpbmdMZWZ0ICxcbiAgcGFkZGluZ1JpZ2h0ICxcbiAgcGFkZGluZ1RvcCAsXG4gIHBhZGRpbmdCb3R0b20gLFxuICBwZXJzcGVjdGl2ZSAsXG4gIHBlcnNwZWN0aXZlT3JpZ2luICxcbiAgcG9pbnRlckV2ZW50cyAsXG4gIHBvc2l0aW9uICxcbiAgcmVzaXplICxcbiAgcmlnaHQgLFxuICB0YWJsZUxheW91dCAsXG4gIHRleHRBbGlnbiAsXG4gIHRleHREZWNvcmF0aW9uQ29sb3IgLFxuICB0ZXh0RGVjb3JhdGlvbkxpbmUgLFxuICB0ZXh0RGVjb3JhdGlvblN0eWxlICxcbiAgdGV4dEluZGVudCAsXG4gIHRleHRPdmVyZmxvdyAsXG4gIHRleHRTaGFkb3cgLFxuICB0ZXh0U2hhZG93cyAsXG4gIHRleHRUcmFuc2Zvcm0gLFxuICB0b3AgLFxuICB0cmFuc2Zvcm0gLFxuICB0cmFuc2Zvcm1zICxcbiAgdHJhbnNmb3JtT3JpZ2luICxcbiAgdHJhbnNmb3JtT3JpZ2luM2QgLFxuICB0cmFuc2l0aW9uRGVsYXkgLFxuICB0cmFuc2l0aW9uRHVyYXRpb24gLFxuICB0cmFuc2l0aW9uUHJvcGVydHkgLFxuICB0cmFuc2Zvcm1TdHlsZSAsXG4gIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbiAsXG4gIHVzZXJTZWxlY3QgLFxuICB2ZXJ0aWNhbEFsaWduICxcbiAgdmlzaWJpbGl0eSAsXG4gIHdpZHRoICxcbiAgd2hpdGVTcGFjZSAsXG4gIHdvcmRCcmVhayAsXG4gIHdvcmRTcGFjaW5nICxcbiAgd29yZFdyYXAgLFxuICB6SW5kZXggLFxuICBzZWxlY3RvciAsXG4gIG1lZGlhICxcbiAgYWN0aXZlICxcbiAgY2hlY2tlZCAsXG4gICQkZGVmYXVsdCAsXG4gICQkZGVmYXVsdCBhcyBkZWZhdWx0LFxuICBkZWZpbmVkICxcbiAgZGlzYWJsZWQgLFxuICBlbXB0eSAsXG4gIGVuYWJsZWQgLFxuICBmaXJzdCAsXG4gIGZpcnN0Q2hpbGQgLFxuICBmaXJzdE9mVHlwZSAsXG4gIGZvY3VzICxcbiAgZm9jdXNXaXRoaW4gLFxuICBob3N0ICxcbiAgaG92ZXIgLFxuICBpbmRldGVybWluYXRlICxcbiAgaW5SYW5nZSAsXG4gIGludmFsaWQgLFxuICBsYW5nICxcbiAgbGFzdENoaWxkICxcbiAgbGFzdE9mVHlwZSAsXG4gIGxpbmsgLFxuICBub3RfXyAsXG4gIE50aCAsXG4gIG50aENoaWxkICxcbiAgbnRoTGFzdENoaWxkICxcbiAgbnRoTGFzdE9mVHlwZSAsXG4gIG50aE9mVHlwZSAsXG4gIG9ubHlDaGlsZCAsXG4gIG9ubHlPZlR5cGUgLFxuICBvcHRpb25hbCAsXG4gIG91dE9mUmFuZ2UgLFxuICByZWFkT25seSAsXG4gIHJlYWRXcml0ZSAsXG4gIHJlcXVpcmVkICxcbiAgcm9vdCAsXG4gIHNjb3BlICxcbiAgdGFyZ2V0ICxcbiAgdmFsaWQgLFxuICB2aXNpdGVkICxcbiAgYWZ0ZXIgLFxuICBiZWZvcmUgLFxuICBmaXJzdExldHRlciAsXG4gIGZpcnN0TGluZSAsXG4gIHBsYWNlaG9sZGVyICxcbiAgc2VsZWN0aW9uICxcbiAgY2hpbGQgLFxuICBjaGlsZHJlbiAsXG4gIGRpcmVjdFNpYmxpbmcgLFxuICBzaWJsaW5ncyAsXG4gIGFueUxpbmsgLFxuICBpbml0aWFsICxcbiAgaW5oZXJpdF8gLFxuICB1bnNldCAsXG4gIGF1dG8gLFxuICBub25lICxcbiAgdGV4dCQxIGFzIHRleHQsXG4gIHBjdCAsXG4gIGNoICxcbiAgY20gLFxuICBlbSAsXG4gIGV4ICxcbiAgbW0gLFxuICBwdCAsXG4gIHB4ICxcbiAgcHhGbG9hdCAsXG4gIHJlbSAsXG4gIHZoICxcbiAgdm1pbiAsXG4gIHZtYXggLFxuICB6ZXJvICxcbiAgZGVnICxcbiAgcmFkICxcbiAgZ3JhZCAsXG4gIHR1cm4gLFxuICBsdHIgLFxuICBydGwgLFxuICBhYnNvbHV0ZSAsXG4gIHJlbGF0aXZlICxcbiAgJCRzdGF0aWMgLFxuICBmaXhlZCAsXG4gIHN0aWNreSAsXG4gIGhvcml6b250YWwgLFxuICB2ZXJ0aWNhbCAsXG4gIHNtYWxsQ2FwcyAsXG4gIGl0YWxpYyAsXG4gIG9ibGlxdWUgLFxuICBoaWRkZW4gLFxuICB2aXNpYmxlICxcbiAgc2Nyb2xsICxcbiAgcmdiICxcbiAgcmdiYSAsXG4gIGhzbCAsXG4gIGhzbGEgLFxuICBoZXggLFxuICB0cmFuc3BhcmVudCAsXG4gIGN1cnJlbnRDb2xvciAsXG4gIGxvY2FsICxcbiAgcGFkZGluZ0JveCAsXG4gIGJvcmRlckJveCAsXG4gIGNvbnRlbnRCb3ggLFxuICBub1JlcGVhdCAsXG4gIHNwYWNlICxcbiAgcmVwZWF0ICxcbiAgbWlubWF4ICxcbiAgcmVwZWF0WCAsXG4gIHJlcGVhdFkgLFxuICBjb250YWluICxcbiAgY292ZXIgLFxuICByb3cgLFxuICByb3dSZXZlcnNlICxcbiAgY29sdW1uICxcbiAgY29sdW1uUmV2ZXJzZSAsXG4gIHdyYXAgLFxuICBub3dyYXAgLFxuICB3cmFwUmV2ZXJzZSAsXG4gIGlubGluZSAsXG4gIGJsb2NrICxcbiAgY29udGVudHMgLFxuICBmbGV4Qm94ICxcbiAgZ3JpZCAsXG4gIGlubGluZUJsb2NrICxcbiAgaW5saW5lRmxleCAsXG4gIGlubGluZUdyaWQgLFxuICBpbmxpbmVUYWJsZSAsXG4gIGxpc3RJdGVtICxcbiAgcnVuSW4gLFxuICB0YWJsZSAsXG4gIHRhYmxlQ2FwdGlvbiAsXG4gIHRhYmxlQ29sdW1uR3JvdXAgLFxuICB0YWJsZUhlYWRlckdyb3VwICxcbiAgdGFibGVGb290ZXJHcm91cCAsXG4gIHRhYmxlUm93R3JvdXAgLFxuICB0YWJsZUNlbGwgLFxuICB0YWJsZUNvbHVtbiAsXG4gIHRhYmxlUm93ICxcbiAgZmxleFN0YXJ0ICxcbiAgZmxleEVuZCAsXG4gIGNlbnRlciAsXG4gIHN0cmV0Y2ggLFxuICBzcGFjZUJldHdlZW4gLFxuICBzcGFjZUFyb3VuZCAsXG4gIHNwYWNlRXZlbmx5ICxcbiAgYmFzZWxpbmUgLFxuICBmb3J3YXJkcyAsXG4gIGJhY2t3YXJkcyAsXG4gIGJvdGggLFxuICBpbmZpbml0ZSAsXG4gIGNvdW50ICxcbiAgcGF1c2VkICxcbiAgcnVubmluZyAsXG4gIGluc2lkZSAsXG4gIG91dHNpZGUgLFxuICBzb2xpZCAsXG4gIGRvdHRlZCAsXG4gIGRhc2hlZCAsXG4gIHVuZGVybGluZSAsXG4gIG92ZXJsaW5lICxcbiAgbGluZVRocm91Z2ggLFxuICBjbGlwICxcbiAgZWxsaXBzaXMgLFxuICB3YXZ5ICxcbiAgJCRkb3VibGUgLFxuICB1cHBlcmNhc2UgLFxuICBsb3dlcmNhc2UgLFxuICBjYXBpdGFsaXplICxcbiAgc3ViICxcbiAgJCRzdXBlciAsXG4gIHRleHRUb3AgLFxuICB0ZXh0Qm90dG9tICxcbiAgbWlkZGxlICxcbiAgbm9ybWFsICxcbiAgYnJlYWtBbGwgLFxuICBrZWVwQWxsICxcbiAgYnJlYWtXb3JkICxcbiAgcmV2ZXJzZSAsXG4gIGFsdGVybmF0ZSAsXG4gIGFsdGVybmF0ZVJldmVyc2UgLFxuICBmaWxsJDEgYXMgZmlsbCxcbiAgY29udGVudCAsXG4gIG1heENvbnRlbnQgLFxuICBtaW5Db250ZW50ICxcbiAgZml0Q29udGVudCAsXG4gIGFsbCAsXG4gIHJvdW5kICxcbiAgbWl0ZXIgLFxuICBiZXZlbCAsXG4gIGJ1dHQgLFxuICBzcXVhcmUgLFxuICB0aGluICxcbiAgZXh0cmFMaWdodCAsXG4gIGxpZ2h0ICxcbiAgbWVkaXVtICxcbiAgc2VtaUJvbGQgLFxuICBib2xkICxcbiAgZXh0cmFCb2xkICxcbiAgbGlnaHRlciAsXG4gIGJvbGRlciAsXG4gIGZyICxcbiAgdncgLFxuICBsb2NhbFVybCAsXG4gIHVybCAsXG4gIGxpbmVhciAsXG4gIGVhc2UgLFxuICBlYXNlSW4gLFxuICBlYXNlT3V0ICxcbiAgZWFzZUluT3V0ICxcbiAgc3RlcFN0YXJ0ICxcbiAgc3RlcEVuZCAsXG4gIHN0ZXBzICxcbiAgY3ViaWNCZXppZXIgLFxuICBtYXJnaW5Cb3ggLFxuICBmaWxsQm94ICxcbiAgc3Ryb2tlQm94ICxcbiAgdmlld0JveCAsXG4gIHRyYW5zbGF0ZSAsXG4gIHRyYW5zbGF0ZTNkICxcbiAgdHJhbnNsYXRlWCAsXG4gIHRyYW5zbGF0ZVkgLFxuICB0cmFuc2xhdGVaICxcbiAgc2NhbGUgLFxuICBzY2FsZTNkICxcbiAgc2NhbGVYICxcbiAgc2NhbGVZICxcbiAgc2NhbGVaICxcbiAgcm90YXRlICxcbiAgcm90YXRlM2QgLFxuICByb3RhdGVYICxcbiAgcm90YXRlWSAsXG4gIHJvdGF0ZVogLFxuICBza2V3ICxcbiAgc2tld1ggLFxuICBza2V3WSAsXG4gIGxpbmVhckdyYWRpZW50ICxcbiAgcmVwZWF0aW5nTGluZWFyR3JhZGllbnQgLFxuICByYWRpYWxHcmFkaWVudCAsXG4gIHJlcGVhdGluZ1JhZGlhbEdyYWRpZW50ICxcbiAgYXJlYXMgLFxuICBpZGVudCAsXG4gIG51bUlkZW50ICxcbiAgY29udGV4dE1lbnUgLFxuICBoZWxwICxcbiAgcG9pbnRlciAsXG4gIHByb2dyZXNzICxcbiAgd2FpdCAsXG4gIGNlbGwgLFxuICBjcm9zc2hhaXIgLFxuICB2ZXJ0aWNhbFRleHQgLFxuICBhbGlhcyAsXG4gIGNvcHkgLFxuICBtb3ZlICxcbiAgbm9Ecm9wICxcbiAgbm90QWxsb3dlZCAsXG4gIGdyYWIgLFxuICBncmFiYmluZyAsXG4gIGFsbFNjcm9sbCAsXG4gIGNvbFJlc2l6ZSAsXG4gIHJvd1Jlc2l6ZSAsXG4gIG5SZXNpemUgLFxuICBlUmVzaXplICxcbiAgc1Jlc2l6ZSAsXG4gIHdSZXNpemUgLFxuICBuZVJlc2l6ZSAsXG4gIG53UmVzaXplICxcbiAgc2VSZXNpemUgLFxuICBzd1Jlc2l6ZSAsXG4gIGV3UmVzaXplICxcbiAgbnNSZXNpemUgLFxuICBuZXN3UmVzaXplICxcbiAgbndzZVJlc2l6ZSAsXG4gIHpvb21JbiAsXG4gIHpvb21PdXQgLFxuICBmbGV4MyAsXG4gIGJvcmRlciAsXG4gIGJvcmRlclRvcCAsXG4gIGJhY2tncm91bmRTaXplICxcbiAgdGV4dERlY29yYXRpb24gLFxuICBiYWNrZ3JvdW5kICxcbiAgYmFja2dyb3VuZHMgLFxuICBncmlkQXV0b0NvbHVtbnMgLFxuICBncmlkQXV0b1Jvd3MgLFxuICBncmlkVGVtcGxhdGVDb2x1bW5zICxcbiAgZ3JpZFRlbXBsYXRlUm93cyAsXG4gIENhbGMgLFxuICBzaXplICxcbiAgZmlsdGVyICxcbiAgZm9udEZhY2UgLFxuICBUcmFuc2l0aW9uICxcbiAgdHJhbnNpdGlvblZhbHVlICxcbiAgdHJhbnNpdGlvbkxpc3QgLFxuICB0cmFuc2l0aW9uICxcbiAgdHJhbnNpdGlvbnMgLFxuICBBbmltYXRpb24gLFxuICBhbmltYXRpb25WYWx1ZSAsXG4gIGFuaW1hdGlvbiAsXG4gIGFuaW1hdGlvbnMgLFxuICBhbmltYXRpb25OYW1lICxcbiAgU1ZHICxcbiAgYWxpY2VibHVlICxcbiAgYW50aXF1ZXdoaXRlICxcbiAgYXF1YSAsXG4gIGFxdWFtYXJpbmUgLFxuICBhenVyZSAsXG4gIGJlaWdlICxcbiAgYmlzcXVlICxcbiAgYmxhY2sgLFxuICBibGFuY2hlZGFsbW9uZCAsXG4gIGJsdWUgLFxuICBibHVldmlvbGV0ICxcbiAgYnJvd24gLFxuICBidXJseXdvb2QgLFxuICBjYWRldGJsdWUgLFxuICBjaGFydHJldXNlICxcbiAgY2hvY29sYXRlICxcbiAgY29yYWwgLFxuICBjb3JuZmxvd2VyYmx1ZSAsXG4gIGNvcm5zaWxrICxcbiAgY3JpbXNvbiAsXG4gIGN5YW4gLFxuICBkYXJrYmx1ZSAsXG4gIGRhcmtjeWFuICxcbiAgZGFya2dvbGRlbnJvZCAsXG4gIGRhcmtncmF5ICxcbiAgZGFya2dyZXkgLFxuICBkYXJrZ3JlZW4gLFxuICBkYXJra2hha2kgLFxuICBkYXJrbWFnZW50YSAsXG4gIGRhcmtvbGl2ZWdyZWVuICxcbiAgZGFya29yYW5nZSAsXG4gIGRhcmtvcmNoaWQgLFxuICBkYXJrcmVkICxcbiAgZGFya3NhbG1vbiAsXG4gIGRhcmtzZWFncmVlbiAsXG4gIGRhcmtzbGF0ZWJsdWUgLFxuICBkYXJrc2xhdGVncmF5ICxcbiAgZGFya3NsYXRlZ3JleSAsXG4gIGRhcmt0dXJxdW9pc2UgLFxuICBkYXJrdmlvbGV0ICxcbiAgZGVlcHBpbmsgLFxuICBkZWVwc2t5Ymx1ZSAsXG4gIGRpbWdyYXkgLFxuICBkaW1ncmV5ICxcbiAgZG9kZ2VyYmx1ZSAsXG4gIGZpcmVicmljayAsXG4gIGZsb3JhbHdoaXRlICxcbiAgZm9yZXN0Z3JlZW4gLFxuICBmdWNoc2lhICxcbiAgZ2FpbnNib3JvICxcbiAgZ2hvc3R3aGl0ZSAsXG4gIGdvbGQgLFxuICBnb2xkZW5yb2QgLFxuICBncmF5ICxcbiAgZ3JleSAsXG4gIGdyZWVuICxcbiAgZ3JlZW55ZWxsb3cgLFxuICBob25leWRldyAsXG4gIGhvdHBpbmsgLFxuICBpbmRpYW5yZWQgLFxuICBpbmRpZ28gLFxuICBpdm9yeSAsXG4gIGtoYWtpICxcbiAgbGF2ZW5kZXIgLFxuICBsYXZlbmRlcmJsdXNoICxcbiAgbGF3bmdyZWVuICxcbiAgbGVtb25jaGlmZm9uICxcbiAgbGlnaHRibHVlICxcbiAgbGlnaHRjb3JhbCAsXG4gIGxpZ2h0Y3lhbiAsXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93ICxcbiAgbGlnaHRncmF5ICxcbiAgbGlnaHRncmV5ICxcbiAgbGlnaHRncmVlbiAsXG4gIGxpZ2h0cGluayAsXG4gIGxpZ2h0c2FsbW9uICxcbiAgbGlnaHRzZWFncmVlbiAsXG4gIGxpZ2h0c2t5Ymx1ZSAsXG4gIGxpZ2h0c2xhdGVncmF5ICxcbiAgbGlnaHRzbGF0ZWdyZXkgLFxuICBsaWdodHN0ZWVsYmx1ZSAsXG4gIGxpZ2h0eWVsbG93ICxcbiAgbGltZSAsXG4gIGxpbWVncmVlbiAsXG4gIGxpbmVuICxcbiAgbWFnZW50YSAsXG4gIG1hcm9vbiAsXG4gIG1lZGl1bWFxdWFtYXJpbmUgLFxuICBtZWRpdW1ibHVlICxcbiAgbWVkaXVtb3JjaGlkICxcbiAgbWVkaXVtcHVycGxlICxcbiAgbWVkaXVtc2VhZ3JlZW4gLFxuICBtZWRpdW1zbGF0ZWJsdWUgLFxuICBtZWRpdW1zcHJpbmdncmVlbiAsXG4gIG1lZGl1bXR1cnF1b2lzZSAsXG4gIG1lZGl1bXZpb2xldHJlZCAsXG4gIG1pZG5pZ2h0Ymx1ZSAsXG4gIG1pbnRjcmVhbSAsXG4gIG1pc3R5cm9zZSAsXG4gIG1vY2Nhc2luICxcbiAgbmF2YWpvd2hpdGUgLFxuICBuYXZ5ICxcbiAgb2xkbGFjZSAsXG4gIG9saXZlICxcbiAgb2xpdmVkcmFiICxcbiAgb3JhbmdlICxcbiAgb3JhbmdlcmVkICxcbiAgb3JjaGlkICxcbiAgcGFsZWdvbGRlbnJvZCAsXG4gIHBhbGVncmVlbiAsXG4gIHBhbGV0dXJxdW9pc2UgLFxuICBwYWxldmlvbGV0cmVkICxcbiAgcGFwYXlhd2hpcCAsXG4gIHBlYWNocHVmZiAsXG4gIHBlcnUgLFxuICBwaW5rICxcbiAgcGx1bSAsXG4gIHBvd2RlcmJsdWUgLFxuICBwdXJwbGUgLFxuICByZWJlY2NhcHVycGxlICxcbiAgcmVkICxcbiAgcm9zeWJyb3duICxcbiAgcm95YWxibHVlICxcbiAgc2FkZGxlYnJvd24gLFxuICBzYWxtb24gLFxuICBzYW5keWJyb3duICxcbiAgc2VhZ3JlZW4gLFxuICBzZWFzaGVsbCAsXG4gIHNpZW5uYSAsXG4gIHNpbHZlciAsXG4gIHNreWJsdWUgLFxuICBzbGF0ZWJsdWUgLFxuICBzbGF0ZWdyYXkgLFxuICBzbGF0ZWdyZXkgLFxuICBzbm93ICxcbiAgc3ByaW5nZ3JlZW4gLFxuICBzdGVlbGJsdWUgLFxuICB0YW4gLFxuICB0ZWFsICxcbiAgdGhpc3RsZSAsXG4gIHRvbWF0byAsXG4gIHR1cnF1b2lzZSAsXG4gIHZpb2xldCAsXG4gIHdoZWF0ICxcbiAgd2hpdGUgLFxuICB3aGl0ZXNtb2tlICxcbiAgeWVsbG93ICxcbiAgeWVsbG93Z3JlZW4gLFxuICBcbn1cbi8qIENzc19Db2xvcnMgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgRW1vdGlvbiBmcm9tIFwiZW1vdGlvblwiO1xuaW1wb3J0ICogYXMgQ3NzX0NvcmUgZnJvbSBcImJzLWNzcy9zcmMvQ3NzX0NvcmUuanNcIjtcblxudmFyIGluY2x1ZGUgPSBDc3NfQ29yZS5NYWtlKHtcbiAgICAgIG1lcmdlU3R5bGVzOiBFbW90aW9uLmN4LFxuICAgICAgaW5qZWN0UnVsZTogRW1vdGlvbi5pbmplY3RHbG9iYWwsXG4gICAgICBpbmplY3RSYXc6IEVtb3Rpb24uaW5qZWN0R2xvYmFsLFxuICAgICAgbWFrZTogRW1vdGlvbi5jc3MsXG4gICAgICBtYWtlS2V5RnJhbWVzOiBFbW90aW9uLmtleWZyYW1lc1xuICAgIH0pO1xuXG52YXIgaW5zZXJ0UnVsZSA9IGluY2x1ZGUuaW5zZXJ0UnVsZTtcblxuZnVuY3Rpb24gZm9udEZhY2UoZm9udEZhbWlseSwgc3JjLCBmb250U3R5bGUsIGZvbnRXZWlnaHQsIGZvbnREaXNwbGF5LCBwYXJhbSkge1xuICB2YXIgYXNTdHJpbmcgPSBDc3NfQ29yZS5mb250RmFjZShmb250RmFtaWx5LCBzcmMsIGZvbnRTdHlsZSwgZm9udFdlaWdodCwgZm9udERpc3BsYXksIHVuZGVmaW5lZCk7XG4gIEN1cnJ5Ll8xKGluc2VydFJ1bGUsIGFzU3RyaW5nKTtcbiAgcmV0dXJuIGZvbnRGYW1pbHk7XG59XG5cbnZhciBUeXBlcyA9IENzc19Db3JlLlR5cGVzO1xuXG52YXIgTWFrZSA9IENzc19Db3JlLk1ha2U7XG5cbnZhciB0b0pzb24gPSBDc3NfQ29yZS50b0pzb247XG5cbnZhciBpbXBvcnRhbnQgPSBDc3NfQ29yZS5pbXBvcnRhbnQ7XG5cbnZhciBsYWJlbCA9IENzc19Db3JlLmxhYmVsO1xuXG52YXIgU2hhZG93ID0gQ3NzX0NvcmUuU2hhZG93O1xuXG52YXIgdW5zYWZlID0gQ3NzX0NvcmUudW5zYWZlO1xuXG52YXIgYWxpZ25Db250ZW50ID0gQ3NzX0NvcmUuYWxpZ25Db250ZW50O1xuXG52YXIgYWxpZ25JdGVtcyA9IENzc19Db3JlLmFsaWduSXRlbXM7XG5cbnZhciBhbGlnblNlbGYgPSBDc3NfQ29yZS5hbGlnblNlbGY7XG5cbnZhciBhbmltYXRpb25EZWxheSA9IENzc19Db3JlLmFuaW1hdGlvbkRlbGF5O1xuXG52YXIgYW5pbWF0aW9uRGlyZWN0aW9uID0gQ3NzX0NvcmUuYW5pbWF0aW9uRGlyZWN0aW9uO1xuXG52YXIgYW5pbWF0aW9uRHVyYXRpb24gPSBDc3NfQ29yZS5hbmltYXRpb25EdXJhdGlvbjtcblxudmFyIGFuaW1hdGlvbkZpbGxNb2RlID0gQ3NzX0NvcmUuYW5pbWF0aW9uRmlsbE1vZGU7XG5cbnZhciBhbmltYXRpb25JdGVyYXRpb25Db3VudCA9IENzc19Db3JlLmFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50O1xuXG52YXIgYW5pbWF0aW9uUGxheVN0YXRlID0gQ3NzX0NvcmUuYW5pbWF0aW9uUGxheVN0YXRlO1xuXG52YXIgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb24gPSBDc3NfQ29yZS5hbmltYXRpb25UaW1pbmdGdW5jdGlvbjtcblxudmFyIGJhY2tkcm9wRmlsdGVyID0gQ3NzX0NvcmUuYmFja2Ryb3BGaWx0ZXI7XG5cbnZhciBiYWNrZmFjZVZpc2liaWxpdHkgPSBDc3NfQ29yZS5iYWNrZmFjZVZpc2liaWxpdHk7XG5cbnZhciBiYWNrZ3JvdW5kQXR0YWNobWVudCA9IENzc19Db3JlLmJhY2tncm91bmRBdHRhY2htZW50O1xuXG52YXIgYmFja2dyb3VuZENvbG9yID0gQ3NzX0NvcmUuYmFja2dyb3VuZENvbG9yO1xuXG52YXIgYmFja2dyb3VuZENsaXAgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kQ2xpcDtcblxudmFyIGJhY2tncm91bmRJbWFnZSA9IENzc19Db3JlLmJhY2tncm91bmRJbWFnZTtcblxudmFyIGJhY2tncm91bmRPcmlnaW4gPSBDc3NfQ29yZS5iYWNrZ3JvdW5kT3JpZ2luO1xuXG52YXIgYmFja2dyb3VuZFBvc2l0aW9uID0gQ3NzX0NvcmUuYmFja2dyb3VuZFBvc2l0aW9uO1xuXG52YXIgYmFja2dyb3VuZFBvc2l0aW9ucyA9IENzc19Db3JlLmJhY2tncm91bmRQb3NpdGlvbnM7XG5cbnZhciBiYWNrZ3JvdW5kUG9zaXRpb240ID0gQ3NzX0NvcmUuYmFja2dyb3VuZFBvc2l0aW9uNDtcblxudmFyIGJhY2tncm91bmRSZXBlYXQgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kUmVwZWF0O1xuXG52YXIgYm9yZGVyQm90dG9tID0gQ3NzX0NvcmUuYm9yZGVyQm90dG9tO1xuXG52YXIgYm9yZGVyQm90dG9tQ29sb3IgPSBDc3NfQ29yZS5ib3JkZXJCb3R0b21Db2xvcjtcblxudmFyIGJvcmRlckJvdHRvbUxlZnRSYWRpdXMgPSBDc3NfQ29yZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzO1xuXG52YXIgYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSBDc3NfQ29yZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cztcblxudmFyIGJvcmRlckJvdHRvbVN0eWxlID0gQ3NzX0NvcmUuYm9yZGVyQm90dG9tU3R5bGU7XG5cbnZhciBib3JkZXJCb3R0b21XaWR0aCA9IENzc19Db3JlLmJvcmRlckJvdHRvbVdpZHRoO1xuXG52YXIgYm9yZGVyQ29sbGFwc2UgPSBDc3NfQ29yZS5ib3JkZXJDb2xsYXBzZTtcblxudmFyIGJvcmRlckNvbG9yID0gQ3NzX0NvcmUuYm9yZGVyQ29sb3I7XG5cbnZhciBib3JkZXJMZWZ0ID0gQ3NzX0NvcmUuYm9yZGVyTGVmdDtcblxudmFyIGJvcmRlckxlZnRDb2xvciA9IENzc19Db3JlLmJvcmRlckxlZnRDb2xvcjtcblxudmFyIGJvcmRlckxlZnRTdHlsZSA9IENzc19Db3JlLmJvcmRlckxlZnRTdHlsZTtcblxudmFyIGJvcmRlckxlZnRXaWR0aCA9IENzc19Db3JlLmJvcmRlckxlZnRXaWR0aDtcblxudmFyIGJvcmRlclJpZ2h0ID0gQ3NzX0NvcmUuYm9yZGVyUmlnaHQ7XG5cbnZhciBib3JkZXJSaWdodENvbG9yID0gQ3NzX0NvcmUuYm9yZGVyUmlnaHRDb2xvcjtcblxudmFyIGJvcmRlclJpZ2h0U3R5bGUgPSBDc3NfQ29yZS5ib3JkZXJSaWdodFN0eWxlO1xuXG52YXIgYm9yZGVyUmlnaHRXaWR0aCA9IENzc19Db3JlLmJvcmRlclJpZ2h0V2lkdGg7XG5cbnZhciBib3JkZXJSYWRpdXMgPSBDc3NfQ29yZS5ib3JkZXJSYWRpdXM7XG5cbnZhciBib3JkZXJTcGFjaW5nID0gQ3NzX0NvcmUuYm9yZGVyU3BhY2luZztcblxudmFyIGJvcmRlclN0eWxlID0gQ3NzX0NvcmUuYm9yZGVyU3R5bGU7XG5cbnZhciBib3JkZXJUb3BDb2xvciA9IENzc19Db3JlLmJvcmRlclRvcENvbG9yO1xuXG52YXIgYm9yZGVyVG9wTGVmdFJhZGl1cyA9IENzc19Db3JlLmJvcmRlclRvcExlZnRSYWRpdXM7XG5cbnZhciBib3JkZXJUb3BSaWdodFJhZGl1cyA9IENzc19Db3JlLmJvcmRlclRvcFJpZ2h0UmFkaXVzO1xuXG52YXIgYm9yZGVyVG9wU3R5bGUgPSBDc3NfQ29yZS5ib3JkZXJUb3BTdHlsZTtcblxudmFyIGJvcmRlclRvcFdpZHRoID0gQ3NzX0NvcmUuYm9yZGVyVG9wV2lkdGg7XG5cbnZhciBib3JkZXJXaWR0aCA9IENzc19Db3JlLmJvcmRlcldpZHRoO1xuXG52YXIgYm90dG9tID0gQ3NzX0NvcmUuYm90dG9tO1xuXG52YXIgYm94U2l6aW5nID0gQ3NzX0NvcmUuYm94U2l6aW5nO1xuXG52YXIgYm94U2hhZG93ID0gQ3NzX0NvcmUuYm94U2hhZG93O1xuXG52YXIgYm94U2hhZG93cyA9IENzc19Db3JlLmJveFNoYWRvd3M7XG5cbnZhciBjbGVhciA9IENzc19Db3JlLmNsZWFyO1xuXG52YXIgY2xpcFBhdGggPSBDc3NfQ29yZS5jbGlwUGF0aDtcblxudmFyIGNvbG9yID0gQ3NzX0NvcmUuY29sb3I7XG5cbnZhciBjb2x1bW5Db3VudCA9IENzc19Db3JlLmNvbHVtbkNvdW50O1xuXG52YXIgY29udGVudFJ1bGUgPSBDc3NfQ29yZS5jb250ZW50UnVsZTtcblxudmFyIGNvbnRlbnRSdWxlcyA9IENzc19Db3JlLmNvbnRlbnRSdWxlcztcblxudmFyIGNvdW50ZXJJbmNyZW1lbnQgPSBDc3NfQ29yZS5jb3VudGVySW5jcmVtZW50O1xuXG52YXIgY291bnRlcnNJbmNyZW1lbnQgPSBDc3NfQ29yZS5jb3VudGVyc0luY3JlbWVudDtcblxudmFyIGNvdW50ZXJSZXNldCA9IENzc19Db3JlLmNvdW50ZXJSZXNldDtcblxudmFyIGNvdW50ZXJzUmVzZXQgPSBDc3NfQ29yZS5jb3VudGVyc1Jlc2V0O1xuXG52YXIgY291bnRlclNldCA9IENzc19Db3JlLmNvdW50ZXJTZXQ7XG5cbnZhciBjb3VudGVyc1NldCA9IENzc19Db3JlLmNvdW50ZXJzU2V0O1xuXG52YXIgY3Vyc29yID0gQ3NzX0NvcmUuY3Vyc29yO1xuXG52YXIgZGlyZWN0aW9uID0gQ3NzX0NvcmUuZGlyZWN0aW9uO1xuXG52YXIgZGlzcGxheSA9IENzc19Db3JlLmRpc3BsYXk7XG5cbnZhciBmbGV4ID0gQ3NzX0NvcmUuZmxleDtcblxudmFyIGZsZXhCYXNpcyA9IENzc19Db3JlLmZsZXhCYXNpcztcblxudmFyIGZsZXhEaXJlY3Rpb24gPSBDc3NfQ29yZS5mbGV4RGlyZWN0aW9uO1xuXG52YXIgZmxleEdyb3cgPSBDc3NfQ29yZS5mbGV4R3JvdztcblxudmFyIGZsZXhTaHJpbmsgPSBDc3NfQ29yZS5mbGV4U2hyaW5rO1xuXG52YXIgZmxleFdyYXAgPSBDc3NfQ29yZS5mbGV4V3JhcDtcblxudmFyICQkZmxvYXQgPSBDc3NfQ29yZS4kJGZsb2F0O1xuXG52YXIgZm9udEZhbWlseSA9IENzc19Db3JlLmZvbnRGYW1pbHk7XG5cbnZhciBmb250RmFtaWxpZXMgPSBDc3NfQ29yZS5mb250RmFtaWxpZXM7XG5cbnZhciBmb250U2l6ZSA9IENzc19Db3JlLmZvbnRTaXplO1xuXG52YXIgZm9udFN0eWxlID0gQ3NzX0NvcmUuZm9udFN0eWxlO1xuXG52YXIgZm9udFZhcmlhbnQgPSBDc3NfQ29yZS5mb250VmFyaWFudDtcblxudmFyIGZvbnRXZWlnaHQgPSBDc3NfQ29yZS5mb250V2VpZ2h0O1xuXG52YXIgZ3JpZEFyZWEgPSBDc3NfQ29yZS5ncmlkQXJlYTtcblxudmFyIGdyaWRBcmVhMiA9IENzc19Db3JlLmdyaWRBcmVhMjtcblxudmFyIGdyaWRBcmVhMyA9IENzc19Db3JlLmdyaWRBcmVhMztcblxudmFyIGdyaWRBcmVhNCA9IENzc19Db3JlLmdyaWRBcmVhNDtcblxudmFyIGdyaWRBdXRvRmxvdyA9IENzc19Db3JlLmdyaWRBdXRvRmxvdztcblxudmFyIGdyaWRDb2x1bW4gPSBDc3NfQ29yZS5ncmlkQ29sdW1uO1xuXG52YXIgZ3JpZENvbHVtbkVuZCA9IENzc19Db3JlLmdyaWRDb2x1bW5FbmQ7XG5cbnZhciBncmlkQ29sdW1uR2FwID0gQ3NzX0NvcmUuZ3JpZENvbHVtbkdhcDtcblxudmFyIGdyaWRDb2x1bW5TdGFydCA9IENzc19Db3JlLmdyaWRDb2x1bW5TdGFydDtcblxudmFyIGdyaWRHYXAgPSBDc3NfQ29yZS5ncmlkR2FwO1xuXG52YXIgZ3JpZFJvdyA9IENzc19Db3JlLmdyaWRSb3c7XG5cbnZhciBncmlkUm93RW5kID0gQ3NzX0NvcmUuZ3JpZFJvd0VuZDtcblxudmFyIGdyaWRSb3dHYXAgPSBDc3NfQ29yZS5ncmlkUm93R2FwO1xuXG52YXIgZ3JpZFJvd1N0YXJ0ID0gQ3NzX0NvcmUuZ3JpZFJvd1N0YXJ0O1xuXG52YXIgZ3JpZFRlbXBsYXRlQXJlYXMgPSBDc3NfQ29yZS5ncmlkVGVtcGxhdGVBcmVhcztcblxudmFyIGhlaWdodCA9IENzc19Db3JlLmhlaWdodDtcblxudmFyIGp1c3RpZnlDb250ZW50ID0gQ3NzX0NvcmUuanVzdGlmeUNvbnRlbnQ7XG5cbnZhciBqdXN0aWZ5U2VsZiA9IENzc19Db3JlLmp1c3RpZnlTZWxmO1xuXG52YXIgbGVmdCA9IENzc19Db3JlLmxlZnQ7XG5cbnZhciBsZXR0ZXJTcGFjaW5nID0gQ3NzX0NvcmUubGV0dGVyU3BhY2luZztcblxudmFyIGxpbmVIZWlnaHQgPSBDc3NfQ29yZS5saW5lSGVpZ2h0O1xuXG52YXIgbGlzdFN0eWxlID0gQ3NzX0NvcmUubGlzdFN0eWxlO1xuXG52YXIgbGlzdFN0eWxlSW1hZ2UgPSBDc3NfQ29yZS5saXN0U3R5bGVJbWFnZTtcblxudmFyIGxpc3RTdHlsZVR5cGUgPSBDc3NfQ29yZS5saXN0U3R5bGVUeXBlO1xuXG52YXIgbGlzdFN0eWxlUG9zaXRpb24gPSBDc3NfQ29yZS5saXN0U3R5bGVQb3NpdGlvbjtcblxudmFyIG1hcmdpbiA9IENzc19Db3JlLm1hcmdpbjtcblxudmFyIG1hcmdpbjIgPSBDc3NfQ29yZS5tYXJnaW4yO1xuXG52YXIgbWFyZ2luMyA9IENzc19Db3JlLm1hcmdpbjM7XG5cbnZhciBtYXJnaW40ID0gQ3NzX0NvcmUubWFyZ2luNDtcblxudmFyIG1hcmdpbkxlZnQgPSBDc3NfQ29yZS5tYXJnaW5MZWZ0O1xuXG52YXIgbWFyZ2luUmlnaHQgPSBDc3NfQ29yZS5tYXJnaW5SaWdodDtcblxudmFyIG1hcmdpblRvcCA9IENzc19Db3JlLm1hcmdpblRvcDtcblxudmFyIG1hcmdpbkJvdHRvbSA9IENzc19Db3JlLm1hcmdpbkJvdHRvbTtcblxudmFyIG1heEhlaWdodCA9IENzc19Db3JlLm1heEhlaWdodDtcblxudmFyIG1heFdpZHRoID0gQ3NzX0NvcmUubWF4V2lkdGg7XG5cbnZhciBtaW5IZWlnaHQgPSBDc3NfQ29yZS5taW5IZWlnaHQ7XG5cbnZhciBtaW5XaWR0aCA9IENzc19Db3JlLm1pbldpZHRoO1xuXG52YXIgb2JqZWN0Rml0ID0gQ3NzX0NvcmUub2JqZWN0Rml0O1xuXG52YXIgb2JqZWN0UG9zaXRpb24gPSBDc3NfQ29yZS5vYmplY3RQb3NpdGlvbjtcblxudmFyIG9wYWNpdHkgPSBDc3NfQ29yZS5vcGFjaXR5O1xuXG52YXIgb3JkZXIgPSBDc3NfQ29yZS5vcmRlcjtcblxudmFyIG91dGxpbmUgPSBDc3NfQ29yZS5vdXRsaW5lO1xuXG52YXIgb3V0bGluZUNvbG9yID0gQ3NzX0NvcmUub3V0bGluZUNvbG9yO1xuXG52YXIgb3V0bGluZU9mZnNldCA9IENzc19Db3JlLm91dGxpbmVPZmZzZXQ7XG5cbnZhciBvdXRsaW5lU3R5bGUgPSBDc3NfQ29yZS5vdXRsaW5lU3R5bGU7XG5cbnZhciBvdXRsaW5lV2lkdGggPSBDc3NfQ29yZS5vdXRsaW5lV2lkdGg7XG5cbnZhciBvdmVyZmxvdyA9IENzc19Db3JlLm92ZXJmbG93O1xuXG52YXIgb3ZlcmZsb3dYID0gQ3NzX0NvcmUub3ZlcmZsb3dYO1xuXG52YXIgb3ZlcmZsb3dZID0gQ3NzX0NvcmUub3ZlcmZsb3dZO1xuXG52YXIgb3ZlcmZsb3dXcmFwID0gQ3NzX0NvcmUub3ZlcmZsb3dXcmFwO1xuXG52YXIgcGFkZGluZyA9IENzc19Db3JlLnBhZGRpbmc7XG5cbnZhciBwYWRkaW5nMiA9IENzc19Db3JlLnBhZGRpbmcyO1xuXG52YXIgcGFkZGluZzMgPSBDc3NfQ29yZS5wYWRkaW5nMztcblxudmFyIHBhZGRpbmc0ID0gQ3NzX0NvcmUucGFkZGluZzQ7XG5cbnZhciBwYWRkaW5nTGVmdCA9IENzc19Db3JlLnBhZGRpbmdMZWZ0O1xuXG52YXIgcGFkZGluZ1JpZ2h0ID0gQ3NzX0NvcmUucGFkZGluZ1JpZ2h0O1xuXG52YXIgcGFkZGluZ1RvcCA9IENzc19Db3JlLnBhZGRpbmdUb3A7XG5cbnZhciBwYWRkaW5nQm90dG9tID0gQ3NzX0NvcmUucGFkZGluZ0JvdHRvbTtcblxudmFyIHBlcnNwZWN0aXZlID0gQ3NzX0NvcmUucGVyc3BlY3RpdmU7XG5cbnZhciBwZXJzcGVjdGl2ZU9yaWdpbiA9IENzc19Db3JlLnBlcnNwZWN0aXZlT3JpZ2luO1xuXG52YXIgcG9pbnRlckV2ZW50cyA9IENzc19Db3JlLnBvaW50ZXJFdmVudHM7XG5cbnZhciBwb3NpdGlvbiA9IENzc19Db3JlLnBvc2l0aW9uO1xuXG52YXIgcmVzaXplID0gQ3NzX0NvcmUucmVzaXplO1xuXG52YXIgcmlnaHQgPSBDc3NfQ29yZS5yaWdodDtcblxudmFyIHRhYmxlTGF5b3V0ID0gQ3NzX0NvcmUudGFibGVMYXlvdXQ7XG5cbnZhciB0ZXh0QWxpZ24gPSBDc3NfQ29yZS50ZXh0QWxpZ247XG5cbnZhciB0ZXh0RGVjb3JhdGlvbkNvbG9yID0gQ3NzX0NvcmUudGV4dERlY29yYXRpb25Db2xvcjtcblxudmFyIHRleHREZWNvcmF0aW9uTGluZSA9IENzc19Db3JlLnRleHREZWNvcmF0aW9uTGluZTtcblxudmFyIHRleHREZWNvcmF0aW9uU3R5bGUgPSBDc3NfQ29yZS50ZXh0RGVjb3JhdGlvblN0eWxlO1xuXG52YXIgdGV4dEluZGVudCA9IENzc19Db3JlLnRleHRJbmRlbnQ7XG5cbnZhciB0ZXh0T3ZlcmZsb3cgPSBDc3NfQ29yZS50ZXh0T3ZlcmZsb3c7XG5cbnZhciB0ZXh0U2hhZG93ID0gQ3NzX0NvcmUudGV4dFNoYWRvdztcblxudmFyIHRleHRTaGFkb3dzID0gQ3NzX0NvcmUudGV4dFNoYWRvd3M7XG5cbnZhciB0ZXh0VHJhbnNmb3JtID0gQ3NzX0NvcmUudGV4dFRyYW5zZm9ybTtcblxudmFyIHRvcCA9IENzc19Db3JlLnRvcDtcblxudmFyIHRyYW5zZm9ybSA9IENzc19Db3JlLnRyYW5zZm9ybTtcblxudmFyIHRyYW5zZm9ybXMgPSBDc3NfQ29yZS50cmFuc2Zvcm1zO1xuXG52YXIgdHJhbnNmb3JtT3JpZ2luID0gQ3NzX0NvcmUudHJhbnNmb3JtT3JpZ2luO1xuXG52YXIgdHJhbnNmb3JtT3JpZ2luM2QgPSBDc3NfQ29yZS50cmFuc2Zvcm1PcmlnaW4zZDtcblxudmFyIHRyYW5zaXRpb25EZWxheSA9IENzc19Db3JlLnRyYW5zaXRpb25EZWxheTtcblxudmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IENzc19Db3JlLnRyYW5zaXRpb25EdXJhdGlvbjtcblxudmFyIHRyYW5zaXRpb25Qcm9wZXJ0eSA9IENzc19Db3JlLnRyYW5zaXRpb25Qcm9wZXJ0eTtcblxudmFyIHRyYW5zZm9ybVN0eWxlID0gQ3NzX0NvcmUudHJhbnNmb3JtU3R5bGU7XG5cbnZhciB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gPSBDc3NfQ29yZS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb247XG5cbnZhciB1c2VyU2VsZWN0ID0gQ3NzX0NvcmUudXNlclNlbGVjdDtcblxudmFyIHZlcnRpY2FsQWxpZ24gPSBDc3NfQ29yZS52ZXJ0aWNhbEFsaWduO1xuXG52YXIgdmlzaWJpbGl0eSA9IENzc19Db3JlLnZpc2liaWxpdHk7XG5cbnZhciB3aWR0aCA9IENzc19Db3JlLndpZHRoO1xuXG52YXIgd2hpdGVTcGFjZSA9IENzc19Db3JlLndoaXRlU3BhY2U7XG5cbnZhciB3b3JkQnJlYWsgPSBDc3NfQ29yZS53b3JkQnJlYWs7XG5cbnZhciB3b3JkU3BhY2luZyA9IENzc19Db3JlLndvcmRTcGFjaW5nO1xuXG52YXIgd29yZFdyYXAgPSBDc3NfQ29yZS53b3JkV3JhcDtcblxudmFyIHpJbmRleCA9IENzc19Db3JlLnpJbmRleDtcblxudmFyIHNlbGVjdG9yID0gQ3NzX0NvcmUuc2VsZWN0b3I7XG5cbnZhciBtZWRpYSA9IENzc19Db3JlLm1lZGlhO1xuXG52YXIgYWN0aXZlID0gQ3NzX0NvcmUuYWN0aXZlO1xuXG52YXIgY2hlY2tlZCA9IENzc19Db3JlLmNoZWNrZWQ7XG5cbnZhciAkJGRlZmF1bHQgPSBDc3NfQ29yZS4kJGRlZmF1bHQ7XG5cbnZhciBkZWZpbmVkID0gQ3NzX0NvcmUuZGVmaW5lZDtcblxudmFyIGRpc2FibGVkID0gQ3NzX0NvcmUuZGlzYWJsZWQ7XG5cbnZhciBlbXB0eSA9IENzc19Db3JlLmVtcHR5O1xuXG52YXIgZW5hYmxlZCA9IENzc19Db3JlLmVuYWJsZWQ7XG5cbnZhciBmaXJzdCA9IENzc19Db3JlLmZpcnN0O1xuXG52YXIgZmlyc3RDaGlsZCA9IENzc19Db3JlLmZpcnN0Q2hpbGQ7XG5cbnZhciBmaXJzdE9mVHlwZSA9IENzc19Db3JlLmZpcnN0T2ZUeXBlO1xuXG52YXIgZm9jdXMgPSBDc3NfQ29yZS5mb2N1cztcblxudmFyIGZvY3VzV2l0aGluID0gQ3NzX0NvcmUuZm9jdXNXaXRoaW47XG5cbnZhciBob3N0ID0gQ3NzX0NvcmUuaG9zdDtcblxudmFyIGhvdmVyID0gQ3NzX0NvcmUuaG92ZXI7XG5cbnZhciBpbmRldGVybWluYXRlID0gQ3NzX0NvcmUuaW5kZXRlcm1pbmF0ZTtcblxudmFyIGluUmFuZ2UgPSBDc3NfQ29yZS5pblJhbmdlO1xuXG52YXIgaW52YWxpZCA9IENzc19Db3JlLmludmFsaWQ7XG5cbnZhciBsYW5nID0gQ3NzX0NvcmUubGFuZztcblxudmFyIGxhc3RDaGlsZCA9IENzc19Db3JlLmxhc3RDaGlsZDtcblxudmFyIGxhc3RPZlR5cGUgPSBDc3NfQ29yZS5sYXN0T2ZUeXBlO1xuXG52YXIgbGluayA9IENzc19Db3JlLmxpbms7XG5cbnZhciBub3RfXyA9IENzc19Db3JlLm5vdF9fO1xuXG52YXIgTnRoID0gQ3NzX0NvcmUuTnRoO1xuXG52YXIgbnRoQ2hpbGQgPSBDc3NfQ29yZS5udGhDaGlsZDtcblxudmFyIG50aExhc3RDaGlsZCA9IENzc19Db3JlLm50aExhc3RDaGlsZDtcblxudmFyIG50aExhc3RPZlR5cGUgPSBDc3NfQ29yZS5udGhMYXN0T2ZUeXBlO1xuXG52YXIgbnRoT2ZUeXBlID0gQ3NzX0NvcmUubnRoT2ZUeXBlO1xuXG52YXIgb25seUNoaWxkID0gQ3NzX0NvcmUub25seUNoaWxkO1xuXG52YXIgb25seU9mVHlwZSA9IENzc19Db3JlLm9ubHlPZlR5cGU7XG5cbnZhciBvcHRpb25hbCA9IENzc19Db3JlLm9wdGlvbmFsO1xuXG52YXIgb3V0T2ZSYW5nZSA9IENzc19Db3JlLm91dE9mUmFuZ2U7XG5cbnZhciByZWFkT25seSA9IENzc19Db3JlLnJlYWRPbmx5O1xuXG52YXIgcmVhZFdyaXRlID0gQ3NzX0NvcmUucmVhZFdyaXRlO1xuXG52YXIgcmVxdWlyZWQgPSBDc3NfQ29yZS5yZXF1aXJlZDtcblxudmFyIHJvb3QgPSBDc3NfQ29yZS5yb290O1xuXG52YXIgc2NvcGUgPSBDc3NfQ29yZS5zY29wZTtcblxudmFyIHRhcmdldCA9IENzc19Db3JlLnRhcmdldDtcblxudmFyIHZhbGlkID0gQ3NzX0NvcmUudmFsaWQ7XG5cbnZhciB2aXNpdGVkID0gQ3NzX0NvcmUudmlzaXRlZDtcblxudmFyIGFmdGVyID0gQ3NzX0NvcmUuYWZ0ZXI7XG5cbnZhciBiZWZvcmUgPSBDc3NfQ29yZS5iZWZvcmU7XG5cbnZhciBmaXJzdExldHRlciA9IENzc19Db3JlLmZpcnN0TGV0dGVyO1xuXG52YXIgZmlyc3RMaW5lID0gQ3NzX0NvcmUuZmlyc3RMaW5lO1xuXG52YXIgcGxhY2Vob2xkZXIgPSBDc3NfQ29yZS5wbGFjZWhvbGRlcjtcblxudmFyIHNlbGVjdGlvbiA9IENzc19Db3JlLnNlbGVjdGlvbjtcblxudmFyIGNoaWxkID0gQ3NzX0NvcmUuY2hpbGQ7XG5cbnZhciBjaGlsZHJlbiA9IENzc19Db3JlLmNoaWxkcmVuO1xuXG52YXIgZGlyZWN0U2libGluZyA9IENzc19Db3JlLmRpcmVjdFNpYmxpbmc7XG5cbnZhciBzaWJsaW5ncyA9IENzc19Db3JlLnNpYmxpbmdzO1xuXG52YXIgYW55TGluayA9IENzc19Db3JlLmFueUxpbms7XG5cbnZhciBpbml0aWFsID0gQ3NzX0NvcmUuaW5pdGlhbDtcblxudmFyIGluaGVyaXRfID0gQ3NzX0NvcmUuaW5oZXJpdF87XG5cbnZhciB1bnNldCA9IENzc19Db3JlLnVuc2V0O1xuXG52YXIgYXV0byA9IENzc19Db3JlLmF1dG87XG5cbnZhciBub25lID0gQ3NzX0NvcmUubm9uZTtcblxudmFyIHRleHQgPSBDc3NfQ29yZS50ZXh0O1xuXG52YXIgcGN0ID0gQ3NzX0NvcmUucGN0O1xuXG52YXIgY2ggPSBDc3NfQ29yZS5jaDtcblxudmFyIGNtID0gQ3NzX0NvcmUuY207XG5cbnZhciBlbSA9IENzc19Db3JlLmVtO1xuXG52YXIgZXggPSBDc3NfQ29yZS5leDtcblxudmFyIG1tID0gQ3NzX0NvcmUubW07XG5cbnZhciBwdCA9IENzc19Db3JlLnB0O1xuXG52YXIgcHggPSBDc3NfQ29yZS5weDtcblxudmFyIHB4RmxvYXQgPSBDc3NfQ29yZS5weEZsb2F0O1xuXG52YXIgcmVtID0gQ3NzX0NvcmUucmVtO1xuXG52YXIgdmggPSBDc3NfQ29yZS52aDtcblxudmFyIHZtaW4gPSBDc3NfQ29yZS52bWluO1xuXG52YXIgdm1heCA9IENzc19Db3JlLnZtYXg7XG5cbnZhciB6ZXJvID0gQ3NzX0NvcmUuemVybztcblxudmFyIGRlZyA9IENzc19Db3JlLmRlZztcblxudmFyIHJhZCA9IENzc19Db3JlLnJhZDtcblxudmFyIGdyYWQgPSBDc3NfQ29yZS5ncmFkO1xuXG52YXIgdHVybiA9IENzc19Db3JlLnR1cm47XG5cbnZhciBsdHIgPSBDc3NfQ29yZS5sdHI7XG5cbnZhciBydGwgPSBDc3NfQ29yZS5ydGw7XG5cbnZhciBhYnNvbHV0ZSA9IENzc19Db3JlLmFic29sdXRlO1xuXG52YXIgcmVsYXRpdmUgPSBDc3NfQ29yZS5yZWxhdGl2ZTtcblxudmFyICQkc3RhdGljID0gQ3NzX0NvcmUuJCRzdGF0aWM7XG5cbnZhciBmaXhlZCA9IENzc19Db3JlLmZpeGVkO1xuXG52YXIgc3RpY2t5ID0gQ3NzX0NvcmUuc3RpY2t5O1xuXG52YXIgaG9yaXpvbnRhbCA9IENzc19Db3JlLmhvcml6b250YWw7XG5cbnZhciB2ZXJ0aWNhbCA9IENzc19Db3JlLnZlcnRpY2FsO1xuXG52YXIgc21hbGxDYXBzID0gQ3NzX0NvcmUuc21hbGxDYXBzO1xuXG52YXIgaXRhbGljID0gQ3NzX0NvcmUuaXRhbGljO1xuXG52YXIgb2JsaXF1ZSA9IENzc19Db3JlLm9ibGlxdWU7XG5cbnZhciBoaWRkZW4gPSBDc3NfQ29yZS5oaWRkZW47XG5cbnZhciB2aXNpYmxlID0gQ3NzX0NvcmUudmlzaWJsZTtcblxudmFyIHNjcm9sbCA9IENzc19Db3JlLnNjcm9sbDtcblxudmFyIHJnYiA9IENzc19Db3JlLnJnYjtcblxudmFyIHJnYmEgPSBDc3NfQ29yZS5yZ2JhO1xuXG52YXIgaHNsID0gQ3NzX0NvcmUuaHNsO1xuXG52YXIgaHNsYSA9IENzc19Db3JlLmhzbGE7XG5cbnZhciBoZXggPSBDc3NfQ29yZS5oZXg7XG5cbnZhciB0cmFuc3BhcmVudCA9IENzc19Db3JlLnRyYW5zcGFyZW50O1xuXG52YXIgY3VycmVudENvbG9yID0gQ3NzX0NvcmUuY3VycmVudENvbG9yO1xuXG52YXIgbG9jYWwgPSBDc3NfQ29yZS5sb2NhbDtcblxudmFyIHBhZGRpbmdCb3ggPSBDc3NfQ29yZS5wYWRkaW5nQm94O1xuXG52YXIgYm9yZGVyQm94ID0gQ3NzX0NvcmUuYm9yZGVyQm94O1xuXG52YXIgY29udGVudEJveCA9IENzc19Db3JlLmNvbnRlbnRCb3g7XG5cbnZhciBub1JlcGVhdCA9IENzc19Db3JlLm5vUmVwZWF0O1xuXG52YXIgc3BhY2UgPSBDc3NfQ29yZS5zcGFjZTtcblxudmFyIHJlcGVhdCA9IENzc19Db3JlLnJlcGVhdDtcblxudmFyIG1pbm1heCA9IENzc19Db3JlLm1pbm1heDtcblxudmFyIHJlcGVhdFggPSBDc3NfQ29yZS5yZXBlYXRYO1xuXG52YXIgcmVwZWF0WSA9IENzc19Db3JlLnJlcGVhdFk7XG5cbnZhciBjb250YWluID0gQ3NzX0NvcmUuY29udGFpbjtcblxudmFyIGNvdmVyID0gQ3NzX0NvcmUuY292ZXI7XG5cbnZhciByb3cgPSBDc3NfQ29yZS5yb3c7XG5cbnZhciByb3dSZXZlcnNlID0gQ3NzX0NvcmUucm93UmV2ZXJzZTtcblxudmFyIGNvbHVtbiA9IENzc19Db3JlLmNvbHVtbjtcblxudmFyIGNvbHVtblJldmVyc2UgPSBDc3NfQ29yZS5jb2x1bW5SZXZlcnNlO1xuXG52YXIgd3JhcCA9IENzc19Db3JlLndyYXA7XG5cbnZhciBub3dyYXAgPSBDc3NfQ29yZS5ub3dyYXA7XG5cbnZhciB3cmFwUmV2ZXJzZSA9IENzc19Db3JlLndyYXBSZXZlcnNlO1xuXG52YXIgaW5saW5lID0gQ3NzX0NvcmUuaW5saW5lO1xuXG52YXIgYmxvY2sgPSBDc3NfQ29yZS5ibG9jaztcblxudmFyIGNvbnRlbnRzID0gQ3NzX0NvcmUuY29udGVudHM7XG5cbnZhciBmbGV4Qm94ID0gQ3NzX0NvcmUuZmxleEJveDtcblxudmFyIGdyaWQgPSBDc3NfQ29yZS5ncmlkO1xuXG52YXIgaW5saW5lQmxvY2sgPSBDc3NfQ29yZS5pbmxpbmVCbG9jaztcblxudmFyIGlubGluZUZsZXggPSBDc3NfQ29yZS5pbmxpbmVGbGV4O1xuXG52YXIgaW5saW5lR3JpZCA9IENzc19Db3JlLmlubGluZUdyaWQ7XG5cbnZhciBpbmxpbmVUYWJsZSA9IENzc19Db3JlLmlubGluZVRhYmxlO1xuXG52YXIgbGlzdEl0ZW0gPSBDc3NfQ29yZS5saXN0SXRlbTtcblxudmFyIHJ1bkluID0gQ3NzX0NvcmUucnVuSW47XG5cbnZhciB0YWJsZSA9IENzc19Db3JlLnRhYmxlO1xuXG52YXIgdGFibGVDYXB0aW9uID0gQ3NzX0NvcmUudGFibGVDYXB0aW9uO1xuXG52YXIgdGFibGVDb2x1bW5Hcm91cCA9IENzc19Db3JlLnRhYmxlQ29sdW1uR3JvdXA7XG5cbnZhciB0YWJsZUhlYWRlckdyb3VwID0gQ3NzX0NvcmUudGFibGVIZWFkZXJHcm91cDtcblxudmFyIHRhYmxlRm9vdGVyR3JvdXAgPSBDc3NfQ29yZS50YWJsZUZvb3Rlckdyb3VwO1xuXG52YXIgdGFibGVSb3dHcm91cCA9IENzc19Db3JlLnRhYmxlUm93R3JvdXA7XG5cbnZhciB0YWJsZUNlbGwgPSBDc3NfQ29yZS50YWJsZUNlbGw7XG5cbnZhciB0YWJsZUNvbHVtbiA9IENzc19Db3JlLnRhYmxlQ29sdW1uO1xuXG52YXIgdGFibGVSb3cgPSBDc3NfQ29yZS50YWJsZVJvdztcblxudmFyIGZsZXhTdGFydCA9IENzc19Db3JlLmZsZXhTdGFydDtcblxudmFyIGZsZXhFbmQgPSBDc3NfQ29yZS5mbGV4RW5kO1xuXG52YXIgY2VudGVyID0gQ3NzX0NvcmUuY2VudGVyO1xuXG52YXIgc3RyZXRjaCA9IENzc19Db3JlLnN0cmV0Y2g7XG5cbnZhciBzcGFjZUJldHdlZW4gPSBDc3NfQ29yZS5zcGFjZUJldHdlZW47XG5cbnZhciBzcGFjZUFyb3VuZCA9IENzc19Db3JlLnNwYWNlQXJvdW5kO1xuXG52YXIgc3BhY2VFdmVubHkgPSBDc3NfQ29yZS5zcGFjZUV2ZW5seTtcblxudmFyIGJhc2VsaW5lID0gQ3NzX0NvcmUuYmFzZWxpbmU7XG5cbnZhciBmb3J3YXJkcyA9IENzc19Db3JlLmZvcndhcmRzO1xuXG52YXIgYmFja3dhcmRzID0gQ3NzX0NvcmUuYmFja3dhcmRzO1xuXG52YXIgYm90aCA9IENzc19Db3JlLmJvdGg7XG5cbnZhciBpbmZpbml0ZSA9IENzc19Db3JlLmluZmluaXRlO1xuXG52YXIgY291bnQgPSBDc3NfQ29yZS5jb3VudDtcblxudmFyIHBhdXNlZCA9IENzc19Db3JlLnBhdXNlZDtcblxudmFyIHJ1bm5pbmcgPSBDc3NfQ29yZS5ydW5uaW5nO1xuXG52YXIgaW5zaWRlID0gQ3NzX0NvcmUuaW5zaWRlO1xuXG52YXIgb3V0c2lkZSA9IENzc19Db3JlLm91dHNpZGU7XG5cbnZhciBzb2xpZCA9IENzc19Db3JlLnNvbGlkO1xuXG52YXIgZG90dGVkID0gQ3NzX0NvcmUuZG90dGVkO1xuXG52YXIgZGFzaGVkID0gQ3NzX0NvcmUuZGFzaGVkO1xuXG52YXIgdW5kZXJsaW5lID0gQ3NzX0NvcmUudW5kZXJsaW5lO1xuXG52YXIgb3ZlcmxpbmUgPSBDc3NfQ29yZS5vdmVybGluZTtcblxudmFyIGxpbmVUaHJvdWdoID0gQ3NzX0NvcmUubGluZVRocm91Z2g7XG5cbnZhciBjbGlwID0gQ3NzX0NvcmUuY2xpcDtcblxudmFyIGVsbGlwc2lzID0gQ3NzX0NvcmUuZWxsaXBzaXM7XG5cbnZhciB3YXZ5ID0gQ3NzX0NvcmUud2F2eTtcblxudmFyICQkZG91YmxlID0gQ3NzX0NvcmUuJCRkb3VibGU7XG5cbnZhciB1cHBlcmNhc2UgPSBDc3NfQ29yZS51cHBlcmNhc2U7XG5cbnZhciBsb3dlcmNhc2UgPSBDc3NfQ29yZS5sb3dlcmNhc2U7XG5cbnZhciBjYXBpdGFsaXplID0gQ3NzX0NvcmUuY2FwaXRhbGl6ZTtcblxudmFyIHN1YiA9IENzc19Db3JlLnN1YjtcblxudmFyICQkc3VwZXIgPSBDc3NfQ29yZS4kJHN1cGVyO1xuXG52YXIgdGV4dFRvcCA9IENzc19Db3JlLnRleHRUb3A7XG5cbnZhciB0ZXh0Qm90dG9tID0gQ3NzX0NvcmUudGV4dEJvdHRvbTtcblxudmFyIG1pZGRsZSA9IENzc19Db3JlLm1pZGRsZTtcblxudmFyIG5vcm1hbCA9IENzc19Db3JlLm5vcm1hbDtcblxudmFyIGJyZWFrQWxsID0gQ3NzX0NvcmUuYnJlYWtBbGw7XG5cbnZhciBrZWVwQWxsID0gQ3NzX0NvcmUua2VlcEFsbDtcblxudmFyIGJyZWFrV29yZCA9IENzc19Db3JlLmJyZWFrV29yZDtcblxudmFyIHJldmVyc2UgPSBDc3NfQ29yZS5yZXZlcnNlO1xuXG52YXIgYWx0ZXJuYXRlID0gQ3NzX0NvcmUuYWx0ZXJuYXRlO1xuXG52YXIgYWx0ZXJuYXRlUmV2ZXJzZSA9IENzc19Db3JlLmFsdGVybmF0ZVJldmVyc2U7XG5cbnZhciBmaWxsID0gQ3NzX0NvcmUuZmlsbDtcblxudmFyIGNvbnRlbnQgPSBDc3NfQ29yZS5jb250ZW50O1xuXG52YXIgbWF4Q29udGVudCA9IENzc19Db3JlLm1heENvbnRlbnQ7XG5cbnZhciBtaW5Db250ZW50ID0gQ3NzX0NvcmUubWluQ29udGVudDtcblxudmFyIGZpdENvbnRlbnQgPSBDc3NfQ29yZS5maXRDb250ZW50O1xuXG52YXIgYWxsID0gQ3NzX0NvcmUuYWxsO1xuXG52YXIgcm91bmQgPSBDc3NfQ29yZS5yb3VuZDtcblxudmFyIG1pdGVyID0gQ3NzX0NvcmUubWl0ZXI7XG5cbnZhciBiZXZlbCA9IENzc19Db3JlLmJldmVsO1xuXG52YXIgYnV0dCA9IENzc19Db3JlLmJ1dHQ7XG5cbnZhciBzcXVhcmUgPSBDc3NfQ29yZS5zcXVhcmU7XG5cbnZhciB0aGluID0gQ3NzX0NvcmUudGhpbjtcblxudmFyIGV4dHJhTGlnaHQgPSBDc3NfQ29yZS5leHRyYUxpZ2h0O1xuXG52YXIgbGlnaHQgPSBDc3NfQ29yZS5saWdodDtcblxudmFyIG1lZGl1bSA9IENzc19Db3JlLm1lZGl1bTtcblxudmFyIHNlbWlCb2xkID0gQ3NzX0NvcmUuc2VtaUJvbGQ7XG5cbnZhciBib2xkID0gQ3NzX0NvcmUuYm9sZDtcblxudmFyIGV4dHJhQm9sZCA9IENzc19Db3JlLmV4dHJhQm9sZDtcblxudmFyIGxpZ2h0ZXIgPSBDc3NfQ29yZS5saWdodGVyO1xuXG52YXIgYm9sZGVyID0gQ3NzX0NvcmUuYm9sZGVyO1xuXG52YXIgZnIgPSBDc3NfQ29yZS5mcjtcblxudmFyIHZ3ID0gQ3NzX0NvcmUudnc7XG5cbnZhciBsb2NhbFVybCA9IENzc19Db3JlLmxvY2FsVXJsO1xuXG52YXIgdXJsID0gQ3NzX0NvcmUudXJsO1xuXG52YXIgbGluZWFyID0gQ3NzX0NvcmUubGluZWFyO1xuXG52YXIgZWFzZSA9IENzc19Db3JlLmVhc2U7XG5cbnZhciBlYXNlSW4gPSBDc3NfQ29yZS5lYXNlSW47XG5cbnZhciBlYXNlT3V0ID0gQ3NzX0NvcmUuZWFzZU91dDtcblxudmFyIGVhc2VJbk91dCA9IENzc19Db3JlLmVhc2VJbk91dDtcblxudmFyIHN0ZXBTdGFydCA9IENzc19Db3JlLnN0ZXBTdGFydDtcblxudmFyIHN0ZXBFbmQgPSBDc3NfQ29yZS5zdGVwRW5kO1xuXG52YXIgc3RlcHMgPSBDc3NfQ29yZS5zdGVwcztcblxudmFyIGN1YmljQmV6aWVyID0gQ3NzX0NvcmUuY3ViaWNCZXppZXI7XG5cbnZhciBtYXJnaW5Cb3ggPSBDc3NfQ29yZS5tYXJnaW5Cb3g7XG5cbnZhciBmaWxsQm94ID0gQ3NzX0NvcmUuZmlsbEJveDtcblxudmFyIHN0cm9rZUJveCA9IENzc19Db3JlLnN0cm9rZUJveDtcblxudmFyIHZpZXdCb3ggPSBDc3NfQ29yZS52aWV3Qm94O1xuXG52YXIgdHJhbnNsYXRlID0gQ3NzX0NvcmUudHJhbnNsYXRlO1xuXG52YXIgdHJhbnNsYXRlM2QgPSBDc3NfQ29yZS50cmFuc2xhdGUzZDtcblxudmFyIHRyYW5zbGF0ZVggPSBDc3NfQ29yZS50cmFuc2xhdGVYO1xuXG52YXIgdHJhbnNsYXRlWSA9IENzc19Db3JlLnRyYW5zbGF0ZVk7XG5cbnZhciB0cmFuc2xhdGVaID0gQ3NzX0NvcmUudHJhbnNsYXRlWjtcblxudmFyIHNjYWxlID0gQ3NzX0NvcmUuc2NhbGU7XG5cbnZhciBzY2FsZTNkID0gQ3NzX0NvcmUuc2NhbGUzZDtcblxudmFyIHNjYWxlWCA9IENzc19Db3JlLnNjYWxlWDtcblxudmFyIHNjYWxlWSA9IENzc19Db3JlLnNjYWxlWTtcblxudmFyIHNjYWxlWiA9IENzc19Db3JlLnNjYWxlWjtcblxudmFyIHJvdGF0ZSA9IENzc19Db3JlLnJvdGF0ZTtcblxudmFyIHJvdGF0ZTNkID0gQ3NzX0NvcmUucm90YXRlM2Q7XG5cbnZhciByb3RhdGVYID0gQ3NzX0NvcmUucm90YXRlWDtcblxudmFyIHJvdGF0ZVkgPSBDc3NfQ29yZS5yb3RhdGVZO1xuXG52YXIgcm90YXRlWiA9IENzc19Db3JlLnJvdGF0ZVo7XG5cbnZhciBza2V3ID0gQ3NzX0NvcmUuc2tldztcblxudmFyIHNrZXdYID0gQ3NzX0NvcmUuc2tld1g7XG5cbnZhciBza2V3WSA9IENzc19Db3JlLnNrZXdZO1xuXG52YXIgbGluZWFyR3JhZGllbnQgPSBDc3NfQ29yZS5saW5lYXJHcmFkaWVudDtcblxudmFyIHJlcGVhdGluZ0xpbmVhckdyYWRpZW50ID0gQ3NzX0NvcmUucmVwZWF0aW5nTGluZWFyR3JhZGllbnQ7XG5cbnZhciByYWRpYWxHcmFkaWVudCA9IENzc19Db3JlLnJhZGlhbEdyYWRpZW50O1xuXG52YXIgcmVwZWF0aW5nUmFkaWFsR3JhZGllbnQgPSBDc3NfQ29yZS5yZXBlYXRpbmdSYWRpYWxHcmFkaWVudDtcblxudmFyIGFyZWFzID0gQ3NzX0NvcmUuYXJlYXM7XG5cbnZhciBpZGVudCA9IENzc19Db3JlLmlkZW50O1xuXG52YXIgbnVtSWRlbnQgPSBDc3NfQ29yZS5udW1JZGVudDtcblxudmFyIGNvbnRleHRNZW51ID0gQ3NzX0NvcmUuY29udGV4dE1lbnU7XG5cbnZhciBoZWxwID0gQ3NzX0NvcmUuaGVscDtcblxudmFyIHBvaW50ZXIgPSBDc3NfQ29yZS5wb2ludGVyO1xuXG52YXIgcHJvZ3Jlc3MgPSBDc3NfQ29yZS5wcm9ncmVzcztcblxudmFyIHdhaXQgPSBDc3NfQ29yZS53YWl0O1xuXG52YXIgY2VsbCA9IENzc19Db3JlLmNlbGw7XG5cbnZhciBjcm9zc2hhaXIgPSBDc3NfQ29yZS5jcm9zc2hhaXI7XG5cbnZhciB2ZXJ0aWNhbFRleHQgPSBDc3NfQ29yZS52ZXJ0aWNhbFRleHQ7XG5cbnZhciBhbGlhcyA9IENzc19Db3JlLmFsaWFzO1xuXG52YXIgY29weSA9IENzc19Db3JlLmNvcHk7XG5cbnZhciBtb3ZlID0gQ3NzX0NvcmUubW92ZTtcblxudmFyIG5vRHJvcCA9IENzc19Db3JlLm5vRHJvcDtcblxudmFyIG5vdEFsbG93ZWQgPSBDc3NfQ29yZS5ub3RBbGxvd2VkO1xuXG52YXIgZ3JhYiA9IENzc19Db3JlLmdyYWI7XG5cbnZhciBncmFiYmluZyA9IENzc19Db3JlLmdyYWJiaW5nO1xuXG52YXIgYWxsU2Nyb2xsID0gQ3NzX0NvcmUuYWxsU2Nyb2xsO1xuXG52YXIgY29sUmVzaXplID0gQ3NzX0NvcmUuY29sUmVzaXplO1xuXG52YXIgcm93UmVzaXplID0gQ3NzX0NvcmUucm93UmVzaXplO1xuXG52YXIgblJlc2l6ZSA9IENzc19Db3JlLm5SZXNpemU7XG5cbnZhciBlUmVzaXplID0gQ3NzX0NvcmUuZVJlc2l6ZTtcblxudmFyIHNSZXNpemUgPSBDc3NfQ29yZS5zUmVzaXplO1xuXG52YXIgd1Jlc2l6ZSA9IENzc19Db3JlLndSZXNpemU7XG5cbnZhciBuZVJlc2l6ZSA9IENzc19Db3JlLm5lUmVzaXplO1xuXG52YXIgbndSZXNpemUgPSBDc3NfQ29yZS5ud1Jlc2l6ZTtcblxudmFyIHNlUmVzaXplID0gQ3NzX0NvcmUuc2VSZXNpemU7XG5cbnZhciBzd1Jlc2l6ZSA9IENzc19Db3JlLnN3UmVzaXplO1xuXG52YXIgZXdSZXNpemUgPSBDc3NfQ29yZS5ld1Jlc2l6ZTtcblxudmFyIG5zUmVzaXplID0gQ3NzX0NvcmUubnNSZXNpemU7XG5cbnZhciBuZXN3UmVzaXplID0gQ3NzX0NvcmUubmVzd1Jlc2l6ZTtcblxudmFyIG53c2VSZXNpemUgPSBDc3NfQ29yZS5ud3NlUmVzaXplO1xuXG52YXIgem9vbUluID0gQ3NzX0NvcmUuem9vbUluO1xuXG52YXIgem9vbU91dCA9IENzc19Db3JlLnpvb21PdXQ7XG5cbnZhciBmbGV4MyA9IENzc19Db3JlLmZsZXgzO1xuXG52YXIgYm9yZGVyID0gQ3NzX0NvcmUuYm9yZGVyO1xuXG52YXIgYm9yZGVyVG9wID0gQ3NzX0NvcmUuYm9yZGVyVG9wO1xuXG52YXIgYmFja2dyb3VuZFNpemUgPSBDc3NfQ29yZS5iYWNrZ3JvdW5kU2l6ZTtcblxudmFyIHRleHREZWNvcmF0aW9uID0gQ3NzX0NvcmUudGV4dERlY29yYXRpb247XG5cbnZhciBiYWNrZ3JvdW5kID0gQ3NzX0NvcmUuYmFja2dyb3VuZDtcblxudmFyIGJhY2tncm91bmRzID0gQ3NzX0NvcmUuYmFja2dyb3VuZHM7XG5cbnZhciBncmlkQXV0b0NvbHVtbnMgPSBDc3NfQ29yZS5ncmlkQXV0b0NvbHVtbnM7XG5cbnZhciBncmlkQXV0b1Jvd3MgPSBDc3NfQ29yZS5ncmlkQXV0b1Jvd3M7XG5cbnZhciBncmlkVGVtcGxhdGVDb2x1bW5zID0gQ3NzX0NvcmUuZ3JpZFRlbXBsYXRlQ29sdW1ucztcblxudmFyIGdyaWRUZW1wbGF0ZVJvd3MgPSBDc3NfQ29yZS5ncmlkVGVtcGxhdGVSb3dzO1xuXG52YXIgQ2FsYyA9IENzc19Db3JlLkNhbGM7XG5cbnZhciBzaXplID0gQ3NzX0NvcmUuc2l6ZTtcblxudmFyIGZpbHRlciA9IENzc19Db3JlLmZpbHRlcjtcblxudmFyIFRyYW5zaXRpb24gPSBDc3NfQ29yZS5UcmFuc2l0aW9uO1xuXG52YXIgdHJhbnNpdGlvblZhbHVlID0gQ3NzX0NvcmUudHJhbnNpdGlvblZhbHVlO1xuXG52YXIgdHJhbnNpdGlvbkxpc3QgPSBDc3NfQ29yZS50cmFuc2l0aW9uTGlzdDtcblxudmFyIHRyYW5zaXRpb24gPSBDc3NfQ29yZS50cmFuc2l0aW9uO1xuXG52YXIgdHJhbnNpdGlvbnMgPSBDc3NfQ29yZS50cmFuc2l0aW9ucztcblxudmFyIEFuaW1hdGlvbiA9IENzc19Db3JlLkFuaW1hdGlvbjtcblxudmFyIGFuaW1hdGlvblZhbHVlID0gQ3NzX0NvcmUuYW5pbWF0aW9uVmFsdWU7XG5cbnZhciBhbmltYXRpb24gPSBDc3NfQ29yZS5hbmltYXRpb247XG5cbnZhciBhbmltYXRpb25zID0gQ3NzX0NvcmUuYW5pbWF0aW9ucztcblxudmFyIGFuaW1hdGlvbk5hbWUgPSBDc3NfQ29yZS5hbmltYXRpb25OYW1lO1xuXG52YXIgU1ZHID0gQ3NzX0NvcmUuU1ZHO1xuXG52YXIgYWxpY2VibHVlID0gQ3NzX0NvcmUuYWxpY2VibHVlO1xuXG52YXIgYW50aXF1ZXdoaXRlID0gQ3NzX0NvcmUuYW50aXF1ZXdoaXRlO1xuXG52YXIgYXF1YSA9IENzc19Db3JlLmFxdWE7XG5cbnZhciBhcXVhbWFyaW5lID0gQ3NzX0NvcmUuYXF1YW1hcmluZTtcblxudmFyIGF6dXJlID0gQ3NzX0NvcmUuYXp1cmU7XG5cbnZhciBiZWlnZSA9IENzc19Db3JlLmJlaWdlO1xuXG52YXIgYmlzcXVlID0gQ3NzX0NvcmUuYmlzcXVlO1xuXG52YXIgYmxhY2sgPSBDc3NfQ29yZS5ibGFjaztcblxudmFyIGJsYW5jaGVkYWxtb25kID0gQ3NzX0NvcmUuYmxhbmNoZWRhbG1vbmQ7XG5cbnZhciBibHVlID0gQ3NzX0NvcmUuYmx1ZTtcblxudmFyIGJsdWV2aW9sZXQgPSBDc3NfQ29yZS5ibHVldmlvbGV0O1xuXG52YXIgYnJvd24gPSBDc3NfQ29yZS5icm93bjtcblxudmFyIGJ1cmx5d29vZCA9IENzc19Db3JlLmJ1cmx5d29vZDtcblxudmFyIGNhZGV0Ymx1ZSA9IENzc19Db3JlLmNhZGV0Ymx1ZTtcblxudmFyIGNoYXJ0cmV1c2UgPSBDc3NfQ29yZS5jaGFydHJldXNlO1xuXG52YXIgY2hvY29sYXRlID0gQ3NzX0NvcmUuY2hvY29sYXRlO1xuXG52YXIgY29yYWwgPSBDc3NfQ29yZS5jb3JhbDtcblxudmFyIGNvcm5mbG93ZXJibHVlID0gQ3NzX0NvcmUuY29ybmZsb3dlcmJsdWU7XG5cbnZhciBjb3Juc2lsayA9IENzc19Db3JlLmNvcm5zaWxrO1xuXG52YXIgY3JpbXNvbiA9IENzc19Db3JlLmNyaW1zb247XG5cbnZhciBjeWFuID0gQ3NzX0NvcmUuY3lhbjtcblxudmFyIGRhcmtibHVlID0gQ3NzX0NvcmUuZGFya2JsdWU7XG5cbnZhciBkYXJrY3lhbiA9IENzc19Db3JlLmRhcmtjeWFuO1xuXG52YXIgZGFya2dvbGRlbnJvZCA9IENzc19Db3JlLmRhcmtnb2xkZW5yb2Q7XG5cbnZhciBkYXJrZ3JheSA9IENzc19Db3JlLmRhcmtncmF5O1xuXG52YXIgZGFya2dyZXkgPSBDc3NfQ29yZS5kYXJrZ3JleTtcblxudmFyIGRhcmtncmVlbiA9IENzc19Db3JlLmRhcmtncmVlbjtcblxudmFyIGRhcmtraGFraSA9IENzc19Db3JlLmRhcmtraGFraTtcblxudmFyIGRhcmttYWdlbnRhID0gQ3NzX0NvcmUuZGFya21hZ2VudGE7XG5cbnZhciBkYXJrb2xpdmVncmVlbiA9IENzc19Db3JlLmRhcmtvbGl2ZWdyZWVuO1xuXG52YXIgZGFya29yYW5nZSA9IENzc19Db3JlLmRhcmtvcmFuZ2U7XG5cbnZhciBkYXJrb3JjaGlkID0gQ3NzX0NvcmUuZGFya29yY2hpZDtcblxudmFyIGRhcmtyZWQgPSBDc3NfQ29yZS5kYXJrcmVkO1xuXG52YXIgZGFya3NhbG1vbiA9IENzc19Db3JlLmRhcmtzYWxtb247XG5cbnZhciBkYXJrc2VhZ3JlZW4gPSBDc3NfQ29yZS5kYXJrc2VhZ3JlZW47XG5cbnZhciBkYXJrc2xhdGVibHVlID0gQ3NzX0NvcmUuZGFya3NsYXRlYmx1ZTtcblxudmFyIGRhcmtzbGF0ZWdyYXkgPSBDc3NfQ29yZS5kYXJrc2xhdGVncmF5O1xuXG52YXIgZGFya3NsYXRlZ3JleSA9IENzc19Db3JlLmRhcmtzbGF0ZWdyZXk7XG5cbnZhciBkYXJrdHVycXVvaXNlID0gQ3NzX0NvcmUuZGFya3R1cnF1b2lzZTtcblxudmFyIGRhcmt2aW9sZXQgPSBDc3NfQ29yZS5kYXJrdmlvbGV0O1xuXG52YXIgZGVlcHBpbmsgPSBDc3NfQ29yZS5kZWVwcGluaztcblxudmFyIGRlZXBza3libHVlID0gQ3NzX0NvcmUuZGVlcHNreWJsdWU7XG5cbnZhciBkaW1ncmF5ID0gQ3NzX0NvcmUuZGltZ3JheTtcblxudmFyIGRpbWdyZXkgPSBDc3NfQ29yZS5kaW1ncmV5O1xuXG52YXIgZG9kZ2VyYmx1ZSA9IENzc19Db3JlLmRvZGdlcmJsdWU7XG5cbnZhciBmaXJlYnJpY2sgPSBDc3NfQ29yZS5maXJlYnJpY2s7XG5cbnZhciBmbG9yYWx3aGl0ZSA9IENzc19Db3JlLmZsb3JhbHdoaXRlO1xuXG52YXIgZm9yZXN0Z3JlZW4gPSBDc3NfQ29yZS5mb3Jlc3RncmVlbjtcblxudmFyIGZ1Y2hzaWEgPSBDc3NfQ29yZS5mdWNoc2lhO1xuXG52YXIgZ2FpbnNib3JvID0gQ3NzX0NvcmUuZ2FpbnNib3JvO1xuXG52YXIgZ2hvc3R3aGl0ZSA9IENzc19Db3JlLmdob3N0d2hpdGU7XG5cbnZhciBnb2xkID0gQ3NzX0NvcmUuZ29sZDtcblxudmFyIGdvbGRlbnJvZCA9IENzc19Db3JlLmdvbGRlbnJvZDtcblxudmFyIGdyYXkgPSBDc3NfQ29yZS5ncmF5O1xuXG52YXIgZ3JleSA9IENzc19Db3JlLmdyZXk7XG5cbnZhciBncmVlbiA9IENzc19Db3JlLmdyZWVuO1xuXG52YXIgZ3JlZW55ZWxsb3cgPSBDc3NfQ29yZS5ncmVlbnllbGxvdztcblxudmFyIGhvbmV5ZGV3ID0gQ3NzX0NvcmUuaG9uZXlkZXc7XG5cbnZhciBob3RwaW5rID0gQ3NzX0NvcmUuaG90cGluaztcblxudmFyIGluZGlhbnJlZCA9IENzc19Db3JlLmluZGlhbnJlZDtcblxudmFyIGluZGlnbyA9IENzc19Db3JlLmluZGlnbztcblxudmFyIGl2b3J5ID0gQ3NzX0NvcmUuaXZvcnk7XG5cbnZhciBraGFraSA9IENzc19Db3JlLmtoYWtpO1xuXG52YXIgbGF2ZW5kZXIgPSBDc3NfQ29yZS5sYXZlbmRlcjtcblxudmFyIGxhdmVuZGVyYmx1c2ggPSBDc3NfQ29yZS5sYXZlbmRlcmJsdXNoO1xuXG52YXIgbGF3bmdyZWVuID0gQ3NzX0NvcmUubGF3bmdyZWVuO1xuXG52YXIgbGVtb25jaGlmZm9uID0gQ3NzX0NvcmUubGVtb25jaGlmZm9uO1xuXG52YXIgbGlnaHRibHVlID0gQ3NzX0NvcmUubGlnaHRibHVlO1xuXG52YXIgbGlnaHRjb3JhbCA9IENzc19Db3JlLmxpZ2h0Y29yYWw7XG5cbnZhciBsaWdodGN5YW4gPSBDc3NfQ29yZS5saWdodGN5YW47XG5cbnZhciBsaWdodGdvbGRlbnJvZHllbGxvdyA9IENzc19Db3JlLmxpZ2h0Z29sZGVucm9keWVsbG93O1xuXG52YXIgbGlnaHRncmF5ID0gQ3NzX0NvcmUubGlnaHRncmF5O1xuXG52YXIgbGlnaHRncmV5ID0gQ3NzX0NvcmUubGlnaHRncmV5O1xuXG52YXIgbGlnaHRncmVlbiA9IENzc19Db3JlLmxpZ2h0Z3JlZW47XG5cbnZhciBsaWdodHBpbmsgPSBDc3NfQ29yZS5saWdodHBpbms7XG5cbnZhciBsaWdodHNhbG1vbiA9IENzc19Db3JlLmxpZ2h0c2FsbW9uO1xuXG52YXIgbGlnaHRzZWFncmVlbiA9IENzc19Db3JlLmxpZ2h0c2VhZ3JlZW47XG5cbnZhciBsaWdodHNreWJsdWUgPSBDc3NfQ29yZS5saWdodHNreWJsdWU7XG5cbnZhciBsaWdodHNsYXRlZ3JheSA9IENzc19Db3JlLmxpZ2h0c2xhdGVncmF5O1xuXG52YXIgbGlnaHRzbGF0ZWdyZXkgPSBDc3NfQ29yZS5saWdodHNsYXRlZ3JleTtcblxudmFyIGxpZ2h0c3RlZWxibHVlID0gQ3NzX0NvcmUubGlnaHRzdGVlbGJsdWU7XG5cbnZhciBsaWdodHllbGxvdyA9IENzc19Db3JlLmxpZ2h0eWVsbG93O1xuXG52YXIgbGltZSA9IENzc19Db3JlLmxpbWU7XG5cbnZhciBsaW1lZ3JlZW4gPSBDc3NfQ29yZS5saW1lZ3JlZW47XG5cbnZhciBsaW5lbiA9IENzc19Db3JlLmxpbmVuO1xuXG52YXIgbWFnZW50YSA9IENzc19Db3JlLm1hZ2VudGE7XG5cbnZhciBtYXJvb24gPSBDc3NfQ29yZS5tYXJvb247XG5cbnZhciBtZWRpdW1hcXVhbWFyaW5lID0gQ3NzX0NvcmUubWVkaXVtYXF1YW1hcmluZTtcblxudmFyIG1lZGl1bWJsdWUgPSBDc3NfQ29yZS5tZWRpdW1ibHVlO1xuXG52YXIgbWVkaXVtb3JjaGlkID0gQ3NzX0NvcmUubWVkaXVtb3JjaGlkO1xuXG52YXIgbWVkaXVtcHVycGxlID0gQ3NzX0NvcmUubWVkaXVtcHVycGxlO1xuXG52YXIgbWVkaXVtc2VhZ3JlZW4gPSBDc3NfQ29yZS5tZWRpdW1zZWFncmVlbjtcblxudmFyIG1lZGl1bXNsYXRlYmx1ZSA9IENzc19Db3JlLm1lZGl1bXNsYXRlYmx1ZTtcblxudmFyIG1lZGl1bXNwcmluZ2dyZWVuID0gQ3NzX0NvcmUubWVkaXVtc3ByaW5nZ3JlZW47XG5cbnZhciBtZWRpdW10dXJxdW9pc2UgPSBDc3NfQ29yZS5tZWRpdW10dXJxdW9pc2U7XG5cbnZhciBtZWRpdW12aW9sZXRyZWQgPSBDc3NfQ29yZS5tZWRpdW12aW9sZXRyZWQ7XG5cbnZhciBtaWRuaWdodGJsdWUgPSBDc3NfQ29yZS5taWRuaWdodGJsdWU7XG5cbnZhciBtaW50Y3JlYW0gPSBDc3NfQ29yZS5taW50Y3JlYW07XG5cbnZhciBtaXN0eXJvc2UgPSBDc3NfQ29yZS5taXN0eXJvc2U7XG5cbnZhciBtb2NjYXNpbiA9IENzc19Db3JlLm1vY2Nhc2luO1xuXG52YXIgbmF2YWpvd2hpdGUgPSBDc3NfQ29yZS5uYXZham93aGl0ZTtcblxudmFyIG5hdnkgPSBDc3NfQ29yZS5uYXZ5O1xuXG52YXIgb2xkbGFjZSA9IENzc19Db3JlLm9sZGxhY2U7XG5cbnZhciBvbGl2ZSA9IENzc19Db3JlLm9saXZlO1xuXG52YXIgb2xpdmVkcmFiID0gQ3NzX0NvcmUub2xpdmVkcmFiO1xuXG52YXIgb3JhbmdlID0gQ3NzX0NvcmUub3JhbmdlO1xuXG52YXIgb3JhbmdlcmVkID0gQ3NzX0NvcmUub3JhbmdlcmVkO1xuXG52YXIgb3JjaGlkID0gQ3NzX0NvcmUub3JjaGlkO1xuXG52YXIgcGFsZWdvbGRlbnJvZCA9IENzc19Db3JlLnBhbGVnb2xkZW5yb2Q7XG5cbnZhciBwYWxlZ3JlZW4gPSBDc3NfQ29yZS5wYWxlZ3JlZW47XG5cbnZhciBwYWxldHVycXVvaXNlID0gQ3NzX0NvcmUucGFsZXR1cnF1b2lzZTtcblxudmFyIHBhbGV2aW9sZXRyZWQgPSBDc3NfQ29yZS5wYWxldmlvbGV0cmVkO1xuXG52YXIgcGFwYXlhd2hpcCA9IENzc19Db3JlLnBhcGF5YXdoaXA7XG5cbnZhciBwZWFjaHB1ZmYgPSBDc3NfQ29yZS5wZWFjaHB1ZmY7XG5cbnZhciBwZXJ1ID0gQ3NzX0NvcmUucGVydTtcblxudmFyIHBpbmsgPSBDc3NfQ29yZS5waW5rO1xuXG52YXIgcGx1bSA9IENzc19Db3JlLnBsdW07XG5cbnZhciBwb3dkZXJibHVlID0gQ3NzX0NvcmUucG93ZGVyYmx1ZTtcblxudmFyIHB1cnBsZSA9IENzc19Db3JlLnB1cnBsZTtcblxudmFyIHJlYmVjY2FwdXJwbGUgPSBDc3NfQ29yZS5yZWJlY2NhcHVycGxlO1xuXG52YXIgcmVkID0gQ3NzX0NvcmUucmVkO1xuXG52YXIgcm9zeWJyb3duID0gQ3NzX0NvcmUucm9zeWJyb3duO1xuXG52YXIgcm95YWxibHVlID0gQ3NzX0NvcmUucm95YWxibHVlO1xuXG52YXIgc2FkZGxlYnJvd24gPSBDc3NfQ29yZS5zYWRkbGVicm93bjtcblxudmFyIHNhbG1vbiA9IENzc19Db3JlLnNhbG1vbjtcblxudmFyIHNhbmR5YnJvd24gPSBDc3NfQ29yZS5zYW5keWJyb3duO1xuXG52YXIgc2VhZ3JlZW4gPSBDc3NfQ29yZS5zZWFncmVlbjtcblxudmFyIHNlYXNoZWxsID0gQ3NzX0NvcmUuc2Vhc2hlbGw7XG5cbnZhciBzaWVubmEgPSBDc3NfQ29yZS5zaWVubmE7XG5cbnZhciBzaWx2ZXIgPSBDc3NfQ29yZS5zaWx2ZXI7XG5cbnZhciBza3libHVlID0gQ3NzX0NvcmUuc2t5Ymx1ZTtcblxudmFyIHNsYXRlYmx1ZSA9IENzc19Db3JlLnNsYXRlYmx1ZTtcblxudmFyIHNsYXRlZ3JheSA9IENzc19Db3JlLnNsYXRlZ3JheTtcblxudmFyIHNsYXRlZ3JleSA9IENzc19Db3JlLnNsYXRlZ3JleTtcblxudmFyIHNub3cgPSBDc3NfQ29yZS5zbm93O1xuXG52YXIgc3ByaW5nZ3JlZW4gPSBDc3NfQ29yZS5zcHJpbmdncmVlbjtcblxudmFyIHN0ZWVsYmx1ZSA9IENzc19Db3JlLnN0ZWVsYmx1ZTtcblxudmFyIHRhbiA9IENzc19Db3JlLnRhbjtcblxudmFyIHRlYWwgPSBDc3NfQ29yZS50ZWFsO1xuXG52YXIgdGhpc3RsZSA9IENzc19Db3JlLnRoaXN0bGU7XG5cbnZhciB0b21hdG8gPSBDc3NfQ29yZS50b21hdG87XG5cbnZhciB0dXJxdW9pc2UgPSBDc3NfQ29yZS50dXJxdW9pc2U7XG5cbnZhciB2aW9sZXQgPSBDc3NfQ29yZS52aW9sZXQ7XG5cbnZhciB3aGVhdCA9IENzc19Db3JlLndoZWF0O1xuXG52YXIgd2hpdGUgPSBDc3NfQ29yZS53aGl0ZTtcblxudmFyIHdoaXRlc21va2UgPSBDc3NfQ29yZS53aGl0ZXNtb2tlO1xuXG52YXIgeWVsbG93ID0gQ3NzX0NvcmUueWVsbG93O1xuXG52YXIgeWVsbG93Z3JlZW4gPSBDc3NfQ29yZS55ZWxsb3dncmVlbjtcblxudmFyICQkZ2xvYmFsID0gaW5jbHVkZS4kJGdsb2JhbDtcblxudmFyIG1lcmdlID0gaW5jbHVkZS5tZXJnZTtcblxudmFyIHN0eWxlID0gaW5jbHVkZS5zdHlsZTtcblxudmFyIGtleWZyYW1lcyA9IGluY2x1ZGUua2V5ZnJhbWVzO1xuXG5leHBvcnQge1xuICBUeXBlcyAsXG4gIE1ha2UgLFxuICB0b0pzb24gLFxuICBpbXBvcnRhbnQgLFxuICBsYWJlbCAsXG4gIFNoYWRvdyAsXG4gIHVuc2FmZSAsXG4gIGFsaWduQ29udGVudCAsXG4gIGFsaWduSXRlbXMgLFxuICBhbGlnblNlbGYgLFxuICBhbmltYXRpb25EZWxheSAsXG4gIGFuaW1hdGlvbkRpcmVjdGlvbiAsXG4gIGFuaW1hdGlvbkR1cmF0aW9uICxcbiAgYW5pbWF0aW9uRmlsbE1vZGUgLFxuICBhbmltYXRpb25JdGVyYXRpb25Db3VudCAsXG4gIGFuaW1hdGlvblBsYXlTdGF0ZSAsXG4gIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uICxcbiAgYmFja2Ryb3BGaWx0ZXIgLFxuICBiYWNrZmFjZVZpc2liaWxpdHkgLFxuICBiYWNrZ3JvdW5kQXR0YWNobWVudCAsXG4gIGJhY2tncm91bmRDb2xvciAsXG4gIGJhY2tncm91bmRDbGlwICxcbiAgYmFja2dyb3VuZEltYWdlICxcbiAgYmFja2dyb3VuZE9yaWdpbiAsXG4gIGJhY2tncm91bmRQb3NpdGlvbiAsXG4gIGJhY2tncm91bmRQb3NpdGlvbnMgLFxuICBiYWNrZ3JvdW5kUG9zaXRpb240ICxcbiAgYmFja2dyb3VuZFJlcGVhdCAsXG4gIGJvcmRlckJvdHRvbSAsXG4gIGJvcmRlckJvdHRvbUNvbG9yICxcbiAgYm9yZGVyQm90dG9tTGVmdFJhZGl1cyAsXG4gIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzICxcbiAgYm9yZGVyQm90dG9tU3R5bGUgLFxuICBib3JkZXJCb3R0b21XaWR0aCAsXG4gIGJvcmRlckNvbGxhcHNlICxcbiAgYm9yZGVyQ29sb3IgLFxuICBib3JkZXJMZWZ0ICxcbiAgYm9yZGVyTGVmdENvbG9yICxcbiAgYm9yZGVyTGVmdFN0eWxlICxcbiAgYm9yZGVyTGVmdFdpZHRoICxcbiAgYm9yZGVyUmlnaHQgLFxuICBib3JkZXJSaWdodENvbG9yICxcbiAgYm9yZGVyUmlnaHRTdHlsZSAsXG4gIGJvcmRlclJpZ2h0V2lkdGggLFxuICBib3JkZXJSYWRpdXMgLFxuICBib3JkZXJTcGFjaW5nICxcbiAgYm9yZGVyU3R5bGUgLFxuICBib3JkZXJUb3BDb2xvciAsXG4gIGJvcmRlclRvcExlZnRSYWRpdXMgLFxuICBib3JkZXJUb3BSaWdodFJhZGl1cyAsXG4gIGJvcmRlclRvcFN0eWxlICxcbiAgYm9yZGVyVG9wV2lkdGggLFxuICBib3JkZXJXaWR0aCAsXG4gIGJvdHRvbSAsXG4gIGJveFNpemluZyAsXG4gIGJveFNoYWRvdyAsXG4gIGJveFNoYWRvd3MgLFxuICBjbGVhciAsXG4gIGNsaXBQYXRoICxcbiAgY29sb3IgLFxuICBjb2x1bW5Db3VudCAsXG4gIGNvbnRlbnRSdWxlICxcbiAgY29udGVudFJ1bGVzICxcbiAgY291bnRlckluY3JlbWVudCAsXG4gIGNvdW50ZXJzSW5jcmVtZW50ICxcbiAgY291bnRlclJlc2V0ICxcbiAgY291bnRlcnNSZXNldCAsXG4gIGNvdW50ZXJTZXQgLFxuICBjb3VudGVyc1NldCAsXG4gIGN1cnNvciAsXG4gIGRpcmVjdGlvbiAsXG4gIGRpc3BsYXkgLFxuICBmbGV4ICxcbiAgZmxleEJhc2lzICxcbiAgZmxleERpcmVjdGlvbiAsXG4gIGZsZXhHcm93ICxcbiAgZmxleFNocmluayAsXG4gIGZsZXhXcmFwICxcbiAgJCRmbG9hdCAsXG4gIGZvbnRGYW1pbHkgLFxuICBmb250RmFtaWxpZXMgLFxuICBmb250U2l6ZSAsXG4gIGZvbnRTdHlsZSAsXG4gIGZvbnRWYXJpYW50ICxcbiAgZm9udFdlaWdodCAsXG4gIGdyaWRBcmVhICxcbiAgZ3JpZEFyZWEyICxcbiAgZ3JpZEFyZWEzICxcbiAgZ3JpZEFyZWE0ICxcbiAgZ3JpZEF1dG9GbG93ICxcbiAgZ3JpZENvbHVtbiAsXG4gIGdyaWRDb2x1bW5FbmQgLFxuICBncmlkQ29sdW1uR2FwICxcbiAgZ3JpZENvbHVtblN0YXJ0ICxcbiAgZ3JpZEdhcCAsXG4gIGdyaWRSb3cgLFxuICBncmlkUm93RW5kICxcbiAgZ3JpZFJvd0dhcCAsXG4gIGdyaWRSb3dTdGFydCAsXG4gIGdyaWRUZW1wbGF0ZUFyZWFzICxcbiAgaGVpZ2h0ICxcbiAganVzdGlmeUNvbnRlbnQgLFxuICBqdXN0aWZ5U2VsZiAsXG4gIGxlZnQgLFxuICBsZXR0ZXJTcGFjaW5nICxcbiAgbGluZUhlaWdodCAsXG4gIGxpc3RTdHlsZSAsXG4gIGxpc3RTdHlsZUltYWdlICxcbiAgbGlzdFN0eWxlVHlwZSAsXG4gIGxpc3RTdHlsZVBvc2l0aW9uICxcbiAgbWFyZ2luICxcbiAgbWFyZ2luMiAsXG4gIG1hcmdpbjMgLFxuICBtYXJnaW40ICxcbiAgbWFyZ2luTGVmdCAsXG4gIG1hcmdpblJpZ2h0ICxcbiAgbWFyZ2luVG9wICxcbiAgbWFyZ2luQm90dG9tICxcbiAgbWF4SGVpZ2h0ICxcbiAgbWF4V2lkdGggLFxuICBtaW5IZWlnaHQgLFxuICBtaW5XaWR0aCAsXG4gIG9iamVjdEZpdCAsXG4gIG9iamVjdFBvc2l0aW9uICxcbiAgb3BhY2l0eSAsXG4gIG9yZGVyICxcbiAgb3V0bGluZSAsXG4gIG91dGxpbmVDb2xvciAsXG4gIG91dGxpbmVPZmZzZXQgLFxuICBvdXRsaW5lU3R5bGUgLFxuICBvdXRsaW5lV2lkdGggLFxuICBvdmVyZmxvdyAsXG4gIG92ZXJmbG93WCAsXG4gIG92ZXJmbG93WSAsXG4gIG92ZXJmbG93V3JhcCAsXG4gIHBhZGRpbmcgLFxuICBwYWRkaW5nMiAsXG4gIHBhZGRpbmczICxcbiAgcGFkZGluZzQgLFxuICBwYWRkaW5nTGVmdCAsXG4gIHBhZGRpbmdSaWdodCAsXG4gIHBhZGRpbmdUb3AgLFxuICBwYWRkaW5nQm90dG9tICxcbiAgcGVyc3BlY3RpdmUgLFxuICBwZXJzcGVjdGl2ZU9yaWdpbiAsXG4gIHBvaW50ZXJFdmVudHMgLFxuICBwb3NpdGlvbiAsXG4gIHJlc2l6ZSAsXG4gIHJpZ2h0ICxcbiAgdGFibGVMYXlvdXQgLFxuICB0ZXh0QWxpZ24gLFxuICB0ZXh0RGVjb3JhdGlvbkNvbG9yICxcbiAgdGV4dERlY29yYXRpb25MaW5lICxcbiAgdGV4dERlY29yYXRpb25TdHlsZSAsXG4gIHRleHRJbmRlbnQgLFxuICB0ZXh0T3ZlcmZsb3cgLFxuICB0ZXh0U2hhZG93ICxcbiAgdGV4dFNoYWRvd3MgLFxuICB0ZXh0VHJhbnNmb3JtICxcbiAgdG9wICxcbiAgdHJhbnNmb3JtICxcbiAgdHJhbnNmb3JtcyAsXG4gIHRyYW5zZm9ybU9yaWdpbiAsXG4gIHRyYW5zZm9ybU9yaWdpbjNkICxcbiAgdHJhbnNpdGlvbkRlbGF5ICxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uICxcbiAgdHJhbnNpdGlvblByb3BlcnR5ICxcbiAgdHJhbnNmb3JtU3R5bGUgLFxuICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24gLFxuICB1c2VyU2VsZWN0ICxcbiAgdmVydGljYWxBbGlnbiAsXG4gIHZpc2liaWxpdHkgLFxuICB3aWR0aCAsXG4gIHdoaXRlU3BhY2UgLFxuICB3b3JkQnJlYWsgLFxuICB3b3JkU3BhY2luZyAsXG4gIHdvcmRXcmFwICxcbiAgekluZGV4ICxcbiAgc2VsZWN0b3IgLFxuICBtZWRpYSAsXG4gIGFjdGl2ZSAsXG4gIGNoZWNrZWQgLFxuICAkJGRlZmF1bHQgLFxuICAkJGRlZmF1bHQgYXMgZGVmYXVsdCxcbiAgZGVmaW5lZCAsXG4gIGRpc2FibGVkICxcbiAgZW1wdHkgLFxuICBlbmFibGVkICxcbiAgZmlyc3QgLFxuICBmaXJzdENoaWxkICxcbiAgZmlyc3RPZlR5cGUgLFxuICBmb2N1cyAsXG4gIGZvY3VzV2l0aGluICxcbiAgaG9zdCAsXG4gIGhvdmVyICxcbiAgaW5kZXRlcm1pbmF0ZSAsXG4gIGluUmFuZ2UgLFxuICBpbnZhbGlkICxcbiAgbGFuZyAsXG4gIGxhc3RDaGlsZCAsXG4gIGxhc3RPZlR5cGUgLFxuICBsaW5rICxcbiAgbm90X18gLFxuICBOdGggLFxuICBudGhDaGlsZCAsXG4gIG50aExhc3RDaGlsZCAsXG4gIG50aExhc3RPZlR5cGUgLFxuICBudGhPZlR5cGUgLFxuICBvbmx5Q2hpbGQgLFxuICBvbmx5T2ZUeXBlICxcbiAgb3B0aW9uYWwgLFxuICBvdXRPZlJhbmdlICxcbiAgcmVhZE9ubHkgLFxuICByZWFkV3JpdGUgLFxuICByZXF1aXJlZCAsXG4gIHJvb3QgLFxuICBzY29wZSAsXG4gIHRhcmdldCAsXG4gIHZhbGlkICxcbiAgdmlzaXRlZCAsXG4gIGFmdGVyICxcbiAgYmVmb3JlICxcbiAgZmlyc3RMZXR0ZXIgLFxuICBmaXJzdExpbmUgLFxuICBwbGFjZWhvbGRlciAsXG4gIHNlbGVjdGlvbiAsXG4gIGNoaWxkICxcbiAgY2hpbGRyZW4gLFxuICBkaXJlY3RTaWJsaW5nICxcbiAgc2libGluZ3MgLFxuICBhbnlMaW5rICxcbiAgaW5pdGlhbCAsXG4gIGluaGVyaXRfICxcbiAgdW5zZXQgLFxuICBhdXRvICxcbiAgbm9uZSAsXG4gIHRleHQgLFxuICBwY3QgLFxuICBjaCAsXG4gIGNtICxcbiAgZW0gLFxuICBleCAsXG4gIG1tICxcbiAgcHQgLFxuICBweCAsXG4gIHB4RmxvYXQgLFxuICByZW0gLFxuICB2aCAsXG4gIHZtaW4gLFxuICB2bWF4ICxcbiAgemVybyAsXG4gIGRlZyAsXG4gIHJhZCAsXG4gIGdyYWQgLFxuICB0dXJuICxcbiAgbHRyICxcbiAgcnRsICxcbiAgYWJzb2x1dGUgLFxuICByZWxhdGl2ZSAsXG4gICQkc3RhdGljICxcbiAgZml4ZWQgLFxuICBzdGlja3kgLFxuICBob3Jpem9udGFsICxcbiAgdmVydGljYWwgLFxuICBzbWFsbENhcHMgLFxuICBpdGFsaWMgLFxuICBvYmxpcXVlICxcbiAgaGlkZGVuICxcbiAgdmlzaWJsZSAsXG4gIHNjcm9sbCAsXG4gIHJnYiAsXG4gIHJnYmEgLFxuICBoc2wgLFxuICBoc2xhICxcbiAgaGV4ICxcbiAgdHJhbnNwYXJlbnQgLFxuICBjdXJyZW50Q29sb3IgLFxuICBsb2NhbCAsXG4gIHBhZGRpbmdCb3ggLFxuICBib3JkZXJCb3ggLFxuICBjb250ZW50Qm94ICxcbiAgbm9SZXBlYXQgLFxuICBzcGFjZSAsXG4gIHJlcGVhdCAsXG4gIG1pbm1heCAsXG4gIHJlcGVhdFggLFxuICByZXBlYXRZICxcbiAgY29udGFpbiAsXG4gIGNvdmVyICxcbiAgcm93ICxcbiAgcm93UmV2ZXJzZSAsXG4gIGNvbHVtbiAsXG4gIGNvbHVtblJldmVyc2UgLFxuICB3cmFwICxcbiAgbm93cmFwICxcbiAgd3JhcFJldmVyc2UgLFxuICBpbmxpbmUgLFxuICBibG9jayAsXG4gIGNvbnRlbnRzICxcbiAgZmxleEJveCAsXG4gIGdyaWQgLFxuICBpbmxpbmVCbG9jayAsXG4gIGlubGluZUZsZXggLFxuICBpbmxpbmVHcmlkICxcbiAgaW5saW5lVGFibGUgLFxuICBsaXN0SXRlbSAsXG4gIHJ1bkluICxcbiAgdGFibGUgLFxuICB0YWJsZUNhcHRpb24gLFxuICB0YWJsZUNvbHVtbkdyb3VwICxcbiAgdGFibGVIZWFkZXJHcm91cCAsXG4gIHRhYmxlRm9vdGVyR3JvdXAgLFxuICB0YWJsZVJvd0dyb3VwICxcbiAgdGFibGVDZWxsICxcbiAgdGFibGVDb2x1bW4gLFxuICB0YWJsZVJvdyAsXG4gIGZsZXhTdGFydCAsXG4gIGZsZXhFbmQgLFxuICBjZW50ZXIgLFxuICBzdHJldGNoICxcbiAgc3BhY2VCZXR3ZWVuICxcbiAgc3BhY2VBcm91bmQgLFxuICBzcGFjZUV2ZW5seSAsXG4gIGJhc2VsaW5lICxcbiAgZm9yd2FyZHMgLFxuICBiYWNrd2FyZHMgLFxuICBib3RoICxcbiAgaW5maW5pdGUgLFxuICBjb3VudCAsXG4gIHBhdXNlZCAsXG4gIHJ1bm5pbmcgLFxuICBpbnNpZGUgLFxuICBvdXRzaWRlICxcbiAgc29saWQgLFxuICBkb3R0ZWQgLFxuICBkYXNoZWQgLFxuICB1bmRlcmxpbmUgLFxuICBvdmVybGluZSAsXG4gIGxpbmVUaHJvdWdoICxcbiAgY2xpcCAsXG4gIGVsbGlwc2lzICxcbiAgd2F2eSAsXG4gICQkZG91YmxlICxcbiAgdXBwZXJjYXNlICxcbiAgbG93ZXJjYXNlICxcbiAgY2FwaXRhbGl6ZSAsXG4gIHN1YiAsXG4gICQkc3VwZXIgLFxuICB0ZXh0VG9wICxcbiAgdGV4dEJvdHRvbSAsXG4gIG1pZGRsZSAsXG4gIG5vcm1hbCAsXG4gIGJyZWFrQWxsICxcbiAga2VlcEFsbCAsXG4gIGJyZWFrV29yZCAsXG4gIHJldmVyc2UgLFxuICBhbHRlcm5hdGUgLFxuICBhbHRlcm5hdGVSZXZlcnNlICxcbiAgZmlsbCAsXG4gIGNvbnRlbnQgLFxuICBtYXhDb250ZW50ICxcbiAgbWluQ29udGVudCAsXG4gIGZpdENvbnRlbnQgLFxuICBhbGwgLFxuICByb3VuZCAsXG4gIG1pdGVyICxcbiAgYmV2ZWwgLFxuICBidXR0ICxcbiAgc3F1YXJlICxcbiAgdGhpbiAsXG4gIGV4dHJhTGlnaHQgLFxuICBsaWdodCAsXG4gIG1lZGl1bSAsXG4gIHNlbWlCb2xkICxcbiAgYm9sZCAsXG4gIGV4dHJhQm9sZCAsXG4gIGxpZ2h0ZXIgLFxuICBib2xkZXIgLFxuICBmciAsXG4gIHZ3ICxcbiAgbG9jYWxVcmwgLFxuICB1cmwgLFxuICBsaW5lYXIgLFxuICBlYXNlICxcbiAgZWFzZUluICxcbiAgZWFzZU91dCAsXG4gIGVhc2VJbk91dCAsXG4gIHN0ZXBTdGFydCAsXG4gIHN0ZXBFbmQgLFxuICBzdGVwcyAsXG4gIGN1YmljQmV6aWVyICxcbiAgbWFyZ2luQm94ICxcbiAgZmlsbEJveCAsXG4gIHN0cm9rZUJveCAsXG4gIHZpZXdCb3ggLFxuICB0cmFuc2xhdGUgLFxuICB0cmFuc2xhdGUzZCAsXG4gIHRyYW5zbGF0ZVggLFxuICB0cmFuc2xhdGVZICxcbiAgdHJhbnNsYXRlWiAsXG4gIHNjYWxlICxcbiAgc2NhbGUzZCAsXG4gIHNjYWxlWCAsXG4gIHNjYWxlWSAsXG4gIHNjYWxlWiAsXG4gIHJvdGF0ZSAsXG4gIHJvdGF0ZTNkICxcbiAgcm90YXRlWCAsXG4gIHJvdGF0ZVkgLFxuICByb3RhdGVaICxcbiAgc2tldyAsXG4gIHNrZXdYICxcbiAgc2tld1kgLFxuICBsaW5lYXJHcmFkaWVudCAsXG4gIHJlcGVhdGluZ0xpbmVhckdyYWRpZW50ICxcbiAgcmFkaWFsR3JhZGllbnQgLFxuICByZXBlYXRpbmdSYWRpYWxHcmFkaWVudCAsXG4gIGFyZWFzICxcbiAgaWRlbnQgLFxuICBudW1JZGVudCAsXG4gIGNvbnRleHRNZW51ICxcbiAgaGVscCAsXG4gIHBvaW50ZXIgLFxuICBwcm9ncmVzcyAsXG4gIHdhaXQgLFxuICBjZWxsICxcbiAgY3Jvc3NoYWlyICxcbiAgdmVydGljYWxUZXh0ICxcbiAgYWxpYXMgLFxuICBjb3B5ICxcbiAgbW92ZSAsXG4gIG5vRHJvcCAsXG4gIG5vdEFsbG93ZWQgLFxuICBncmFiICxcbiAgZ3JhYmJpbmcgLFxuICBhbGxTY3JvbGwgLFxuICBjb2xSZXNpemUgLFxuICByb3dSZXNpemUgLFxuICBuUmVzaXplICxcbiAgZVJlc2l6ZSAsXG4gIHNSZXNpemUgLFxuICB3UmVzaXplICxcbiAgbmVSZXNpemUgLFxuICBud1Jlc2l6ZSAsXG4gIHNlUmVzaXplICxcbiAgc3dSZXNpemUgLFxuICBld1Jlc2l6ZSAsXG4gIG5zUmVzaXplICxcbiAgbmVzd1Jlc2l6ZSAsXG4gIG53c2VSZXNpemUgLFxuICB6b29tSW4gLFxuICB6b29tT3V0ICxcbiAgZmxleDMgLFxuICBib3JkZXIgLFxuICBib3JkZXJUb3AgLFxuICBiYWNrZ3JvdW5kU2l6ZSAsXG4gIHRleHREZWNvcmF0aW9uICxcbiAgYmFja2dyb3VuZCAsXG4gIGJhY2tncm91bmRzICxcbiAgZ3JpZEF1dG9Db2x1bW5zICxcbiAgZ3JpZEF1dG9Sb3dzICxcbiAgZ3JpZFRlbXBsYXRlQ29sdW1ucyAsXG4gIGdyaWRUZW1wbGF0ZVJvd3MgLFxuICBDYWxjICxcbiAgc2l6ZSAsXG4gIGZpbHRlciAsXG4gIFRyYW5zaXRpb24gLFxuICB0cmFuc2l0aW9uVmFsdWUgLFxuICB0cmFuc2l0aW9uTGlzdCAsXG4gIHRyYW5zaXRpb24gLFxuICB0cmFuc2l0aW9ucyAsXG4gIEFuaW1hdGlvbiAsXG4gIGFuaW1hdGlvblZhbHVlICxcbiAgYW5pbWF0aW9uICxcbiAgYW5pbWF0aW9ucyAsXG4gIGFuaW1hdGlvbk5hbWUgLFxuICBTVkcgLFxuICBhbGljZWJsdWUgLFxuICBhbnRpcXVld2hpdGUgLFxuICBhcXVhICxcbiAgYXF1YW1hcmluZSAsXG4gIGF6dXJlICxcbiAgYmVpZ2UgLFxuICBiaXNxdWUgLFxuICBibGFjayAsXG4gIGJsYW5jaGVkYWxtb25kICxcbiAgYmx1ZSAsXG4gIGJsdWV2aW9sZXQgLFxuICBicm93biAsXG4gIGJ1cmx5d29vZCAsXG4gIGNhZGV0Ymx1ZSAsXG4gIGNoYXJ0cmV1c2UgLFxuICBjaG9jb2xhdGUgLFxuICBjb3JhbCAsXG4gIGNvcm5mbG93ZXJibHVlICxcbiAgY29ybnNpbGsgLFxuICBjcmltc29uICxcbiAgY3lhbiAsXG4gIGRhcmtibHVlICxcbiAgZGFya2N5YW4gLFxuICBkYXJrZ29sZGVucm9kICxcbiAgZGFya2dyYXkgLFxuICBkYXJrZ3JleSAsXG4gIGRhcmtncmVlbiAsXG4gIGRhcmtraGFraSAsXG4gIGRhcmttYWdlbnRhICxcbiAgZGFya29saXZlZ3JlZW4gLFxuICBkYXJrb3JhbmdlICxcbiAgZGFya29yY2hpZCAsXG4gIGRhcmtyZWQgLFxuICBkYXJrc2FsbW9uICxcbiAgZGFya3NlYWdyZWVuICxcbiAgZGFya3NsYXRlYmx1ZSAsXG4gIGRhcmtzbGF0ZWdyYXkgLFxuICBkYXJrc2xhdGVncmV5ICxcbiAgZGFya3R1cnF1b2lzZSAsXG4gIGRhcmt2aW9sZXQgLFxuICBkZWVwcGluayAsXG4gIGRlZXBza3libHVlICxcbiAgZGltZ3JheSAsXG4gIGRpbWdyZXkgLFxuICBkb2RnZXJibHVlICxcbiAgZmlyZWJyaWNrICxcbiAgZmxvcmFsd2hpdGUgLFxuICBmb3Jlc3RncmVlbiAsXG4gIGZ1Y2hzaWEgLFxuICBnYWluc2Jvcm8gLFxuICBnaG9zdHdoaXRlICxcbiAgZ29sZCAsXG4gIGdvbGRlbnJvZCAsXG4gIGdyYXkgLFxuICBncmV5ICxcbiAgZ3JlZW4gLFxuICBncmVlbnllbGxvdyAsXG4gIGhvbmV5ZGV3ICxcbiAgaG90cGluayAsXG4gIGluZGlhbnJlZCAsXG4gIGluZGlnbyAsXG4gIGl2b3J5ICxcbiAga2hha2kgLFxuICBsYXZlbmRlciAsXG4gIGxhdmVuZGVyYmx1c2ggLFxuICBsYXduZ3JlZW4gLFxuICBsZW1vbmNoaWZmb24gLFxuICBsaWdodGJsdWUgLFxuICBsaWdodGNvcmFsICxcbiAgbGlnaHRjeWFuICxcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3cgLFxuICBsaWdodGdyYXkgLFxuICBsaWdodGdyZXkgLFxuICBsaWdodGdyZWVuICxcbiAgbGlnaHRwaW5rICxcbiAgbGlnaHRzYWxtb24gLFxuICBsaWdodHNlYWdyZWVuICxcbiAgbGlnaHRza3libHVlICxcbiAgbGlnaHRzbGF0ZWdyYXkgLFxuICBsaWdodHNsYXRlZ3JleSAsXG4gIGxpZ2h0c3RlZWxibHVlICxcbiAgbGlnaHR5ZWxsb3cgLFxuICBsaW1lICxcbiAgbGltZWdyZWVuICxcbiAgbGluZW4gLFxuICBtYWdlbnRhICxcbiAgbWFyb29uICxcbiAgbWVkaXVtYXF1YW1hcmluZSAsXG4gIG1lZGl1bWJsdWUgLFxuICBtZWRpdW1vcmNoaWQgLFxuICBtZWRpdW1wdXJwbGUgLFxuICBtZWRpdW1zZWFncmVlbiAsXG4gIG1lZGl1bXNsYXRlYmx1ZSAsXG4gIG1lZGl1bXNwcmluZ2dyZWVuICxcbiAgbWVkaXVtdHVycXVvaXNlICxcbiAgbWVkaXVtdmlvbGV0cmVkICxcbiAgbWlkbmlnaHRibHVlICxcbiAgbWludGNyZWFtICxcbiAgbWlzdHlyb3NlICxcbiAgbW9jY2FzaW4gLFxuICBuYXZham93aGl0ZSAsXG4gIG5hdnkgLFxuICBvbGRsYWNlICxcbiAgb2xpdmUgLFxuICBvbGl2ZWRyYWIgLFxuICBvcmFuZ2UgLFxuICBvcmFuZ2VyZWQgLFxuICBvcmNoaWQgLFxuICBwYWxlZ29sZGVucm9kICxcbiAgcGFsZWdyZWVuICxcbiAgcGFsZXR1cnF1b2lzZSAsXG4gIHBhbGV2aW9sZXRyZWQgLFxuICBwYXBheWF3aGlwICxcbiAgcGVhY2hwdWZmICxcbiAgcGVydSAsXG4gIHBpbmsgLFxuICBwbHVtICxcbiAgcG93ZGVyYmx1ZSAsXG4gIHB1cnBsZSAsXG4gIHJlYmVjY2FwdXJwbGUgLFxuICByZWQgLFxuICByb3N5YnJvd24gLFxuICByb3lhbGJsdWUgLFxuICBzYWRkbGVicm93biAsXG4gIHNhbG1vbiAsXG4gIHNhbmR5YnJvd24gLFxuICBzZWFncmVlbiAsXG4gIHNlYXNoZWxsICxcbiAgc2llbm5hICxcbiAgc2lsdmVyICxcbiAgc2t5Ymx1ZSAsXG4gIHNsYXRlYmx1ZSAsXG4gIHNsYXRlZ3JheSAsXG4gIHNsYXRlZ3JleSAsXG4gIHNub3cgLFxuICBzcHJpbmdncmVlbiAsXG4gIHN0ZWVsYmx1ZSAsXG4gIHRhbiAsXG4gIHRlYWwgLFxuICB0aGlzdGxlICxcbiAgdG9tYXRvICxcbiAgdHVycXVvaXNlICxcbiAgdmlvbGV0ICxcbiAgd2hlYXQgLFxuICB3aGl0ZSAsXG4gIHdoaXRlc21va2UgLFxuICB5ZWxsb3cgLFxuICB5ZWxsb3dncmVlbiAsXG4gICQkZ2xvYmFsICxcbiAgaW5zZXJ0UnVsZSAsXG4gIG1lcmdlICxcbiAgc3R5bGUgLFxuICBrZXlmcmFtZXMgLFxuICBmb250RmFjZSAsXG4gIFxufVxuLyogaW5jbHVkZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFNwcmVhZFwiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdHlsZU9iamVjdChjbGFzc05hbWVzKSB7XG4gIHZhciBlbGVtZW50U3R5bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgc3R5bGVzaGVldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICByZXR1cm4gY2xhc3NOYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlT2JqZWN0LCBjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZCh7fSwgc3R5bGVPYmplY3QsIHN0eWxlc2hlZXRbY2xhc3NOYW1lXSk7XG4gIH0sIGVsZW1lbnRTdHlsZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xhc3NOYW1lU3RyaW5nKGNsYXNzTmFtZXMpIHtcbiAgcmV0dXJuIGNsYXNzTmFtZXMuam9pbignICcpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuKHN0eWxlc2hlZXQsIHVzZUlubGluZVN0eWxlcykge1xuICB2YXIgY2hpbGRyZW5Db3VudCA9IDA7XG4gIHJldHVybiBmdW5jdGlvbiAoY2hpbGRyZW4pIHtcbiAgICBjaGlsZHJlbkNvdW50ICs9IDE7XG4gICAgcmV0dXJuIGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHtcbiAgICAgICAgbm9kZTogY2hpbGQsXG4gICAgICAgIHN0eWxlc2hlZXQ6IHN0eWxlc2hlZXQsXG4gICAgICAgIHVzZUlubGluZVN0eWxlczogdXNlSW5saW5lU3R5bGVzLFxuICAgICAgICBrZXk6IFwiY29kZS1zZWdtZW50LVwiLmNvbmNhdChjaGlsZHJlbkNvdW50LCBcIi1cIikuY29uY2F0KGkpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoX3JlZikge1xuICB2YXIgbm9kZSA9IF9yZWYubm9kZSxcbiAgICAgIHN0eWxlc2hlZXQgPSBfcmVmLnN0eWxlc2hlZXQsXG4gICAgICBfcmVmJHN0eWxlID0gX3JlZi5zdHlsZSxcbiAgICAgIHN0eWxlID0gX3JlZiRzdHlsZSA9PT0gdm9pZCAwID8ge30gOiBfcmVmJHN0eWxlLFxuICAgICAgdXNlSW5saW5lU3R5bGVzID0gX3JlZi51c2VJbmxpbmVTdHlsZXMsXG4gICAgICBrZXkgPSBfcmVmLmtleTtcbiAgdmFyIHByb3BlcnRpZXMgPSBub2RlLnByb3BlcnRpZXMsXG4gICAgICB0eXBlID0gbm9kZS50eXBlLFxuICAgICAgVGFnTmFtZSA9IG5vZGUudGFnTmFtZSxcbiAgICAgIHZhbHVlID0gbm9kZS52YWx1ZTtcblxuICBpZiAodHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKFRhZ05hbWUpIHtcbiAgICB2YXIgY2hpbGRyZW5DcmVhdG9yID0gY3JlYXRlQ2hpbGRyZW4oc3R5bGVzaGVldCwgdXNlSW5saW5lU3R5bGVzKTtcbiAgICB2YXIgbm9uU3R5bGVzaGVldENsYXNzTmFtZXMgPSB1c2VJbmxpbmVTdHlsZXMgJiYgcHJvcGVydGllcy5jbGFzc05hbWUgJiYgcHJvcGVydGllcy5jbGFzc05hbWUuZmlsdGVyKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgIHJldHVybiAhc3R5bGVzaGVldFtjbGFzc05hbWVdO1xuICAgIH0pO1xuICAgIHZhciBjbGFzc05hbWUgPSBub25TdHlsZXNoZWV0Q2xhc3NOYW1lcyAmJiBub25TdHlsZXNoZWV0Q2xhc3NOYW1lcy5sZW5ndGggPyBub25TdHlsZXNoZWV0Q2xhc3NOYW1lcyA6IHVuZGVmaW5lZDtcbiAgICB2YXIgcHJvcHMgPSB1c2VJbmxpbmVTdHlsZXMgPyBfb2JqZWN0U3ByZWFkKHt9LCBwcm9wZXJ0aWVzLCB7XG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSAmJiBjcmVhdGVDbGFzc05hbWVTdHJpbmcoY2xhc3NOYW1lKVxuICAgIH0sIHtcbiAgICAgIHN0eWxlOiBjcmVhdGVTdHlsZU9iamVjdChwcm9wZXJ0aWVzLmNsYXNzTmFtZSwgT2JqZWN0LmFzc2lnbih7fSwgcHJvcGVydGllcy5zdHlsZSwgc3R5bGUpLCBzdHlsZXNoZWV0KVxuICAgIH0pIDogX29iamVjdFNwcmVhZCh7fSwgcHJvcGVydGllcywge1xuICAgICAgY2xhc3NOYW1lOiBjcmVhdGVDbGFzc05hbWVTdHJpbmcocHJvcGVydGllcy5jbGFzc05hbWUpXG4gICAgfSk7XG4gICAgdmFyIGNoaWxkcmVuID0gY2hpbGRyZW5DcmVhdG9yKG5vZGUuY2hpbGRyZW4pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFRhZ05hbWUsIF9leHRlbmRzKHtcbiAgICAgIGtleToga2V5XG4gICAgfSwgcHJvcHMpLCBjaGlsZHJlbik7XG4gIH1cbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjcmVhdGVFbGVtZW50IGZyb20gJy4vY3JlYXRlLWVsZW1lbnQnO1xudmFyIG5ld0xpbmVSZWdleCA9IC9cXG4vZztcblxuZnVuY3Rpb24gZ2V0TmV3TGluZXMoc3RyKSB7XG4gIHJldHVybiBzdHIubWF0Y2gobmV3TGluZVJlZ2V4KTtcbn1cblxuZnVuY3Rpb24gZ2V0TGluZU51bWJlcnMoX3JlZikge1xuICB2YXIgbGluZXMgPSBfcmVmLmxpbmVzLFxuICAgICAgc3RhcnRpbmdMaW5lTnVtYmVyID0gX3JlZi5zdGFydGluZ0xpbmVOdW1iZXIsXG4gICAgICBfcmVmJG51bWJlclByb3BzID0gX3JlZi5udW1iZXJQcm9wcyxcbiAgICAgIG51bWJlclByb3BzID0gX3JlZiRudW1iZXJQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmJG51bWJlclByb3BzO1xuICByZXR1cm4gbGluZXMubWFwKGZ1bmN0aW9uIChfLCBpKSB7XG4gICAgdmFyIG51bWJlciA9IGkgKyBzdGFydGluZ0xpbmVOdW1iZXI7XG4gICAgdmFyIHByb3BlcnRpZXMgPSB0eXBlb2YgbnVtYmVyUHJvcHMgPT09ICdmdW5jdGlvbicgPyBudW1iZXJQcm9wcyhudW1iZXIpIDogbnVtYmVyUHJvcHM7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIF9leHRlbmRzKHtcbiAgICAgIGtleTogXCJsaW5lLVwiLmNvbmNhdChpKSxcbiAgICAgIGNsYXNzTmFtZTogXCJyZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXItbGluZS1udW1iZXJcIlxuICAgIH0sIHByb3BlcnRpZXMpLCBcIlwiLmNvbmNhdChudW1iZXIsIFwiXFxuXCIpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIExpbmVOdW1iZXJzKF9yZWYyKSB7XG4gIHZhciBjb2RlU3RyaW5nID0gX3JlZjIuY29kZVN0cmluZyxcbiAgICAgIGNvZGVTdHlsZSA9IF9yZWYyLmNvZGVTdHlsZSxcbiAgICAgIF9yZWYyJGNvbnRhaW5lclByb3BzID0gX3JlZjIuY29udGFpbmVyUHJvcHMsXG4gICAgICBjb250YWluZXJQcm9wcyA9IF9yZWYyJGNvbnRhaW5lclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9yZWYyJGNvbnRhaW5lclByb3BzLFxuICAgICAgbnVtYmVyUHJvcHMgPSBfcmVmMi5udW1iZXJQcm9wcyxcbiAgICAgIHN0YXJ0aW5nTGluZU51bWJlciA9IF9yZWYyLnN0YXJ0aW5nTGluZU51bWJlcjtcbiAgY29udGFpbmVyUHJvcHMuc3R5bGUgPSBjb250YWluZXJQcm9wcy5zdHlsZSB8fCB7XG4gICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICBwYWRkaW5nUmlnaHQ6ICcxMHB4J1xuICB9O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImNvZGVcIiwgX2V4dGVuZHMoe30sIGNvbnRhaW5lclByb3BzLCB7XG4gICAgc3R5bGU6IE9iamVjdC5hc3NpZ24oe30sIGNvZGVTdHlsZSwgY29udGFpbmVyUHJvcHMuc3R5bGUpXG4gIH0pLCBnZXRMaW5lTnVtYmVycyh7XG4gICAgbGluZXM6IGNvZGVTdHJpbmcucmVwbGFjZSgvXFxuJC8sICcnKS5zcGxpdCgnXFxuJyksXG4gICAgbnVtYmVyUHJvcHM6IG51bWJlclByb3BzLFxuICAgIHN0YXJ0aW5nTGluZU51bWJlcjogc3RhcnRpbmdMaW5lTnVtYmVyXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGluZUVsZW1lbnQoX3JlZjMpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZjMuY2hpbGRyZW4sXG4gICAgICBsaW5lTnVtYmVyID0gX3JlZjMubGluZU51bWJlcixcbiAgICAgIGxpbmVQcm9wcyA9IF9yZWYzLmxpbmVQcm9wcyxcbiAgICAgIF9yZWYzJGNsYXNzTmFtZSA9IF9yZWYzLmNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYzJGNsYXNzTmFtZSA9PT0gdm9pZCAwID8gW10gOiBfcmVmMyRjbGFzc05hbWU7XG4gIHZhciBwcm9wZXJ0aWVzID0gKHR5cGVvZiBsaW5lUHJvcHMgPT09ICdmdW5jdGlvbicgPyBsaW5lUHJvcHMobGluZU51bWJlcikgOiBsaW5lUHJvcHMpIHx8IHt9O1xuICBwcm9wZXJ0aWVzLmNsYXNzTmFtZSA9IHByb3BlcnRpZXMuY2xhc3NOYW1lID8gY2xhc3NOYW1lLmNvbmNhdChwcm9wZXJ0aWVzLmNsYXNzTmFtZSkgOiBjbGFzc05hbWU7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2VsZW1lbnQnLFxuICAgIHRhZ05hbWU6ICdzcGFuJyxcbiAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9O1xufVxuXG5mdW5jdGlvbiBmbGF0dGVuQ29kZVRyZWUodHJlZSkge1xuICB2YXIgY2xhc3NOYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgdmFyIG5ld1RyZWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdHJlZS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gdHJlZVtpXTtcblxuICAgIGlmIChub2RlLnR5cGUgPT09ICd0ZXh0Jykge1xuICAgICAgbmV3VHJlZS5wdXNoKGNyZWF0ZUxpbmVFbGVtZW50KHtcbiAgICAgICAgY2hpbGRyZW46IFtub2RlXSxcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgIH0pKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHZhciBjbGFzc05hbWVzID0gY2xhc3NOYW1lLmNvbmNhdChub2RlLnByb3BlcnRpZXMuY2xhc3NOYW1lKTtcbiAgICAgIG5ld1RyZWUgPSBuZXdUcmVlLmNvbmNhdChmbGF0dGVuQ29kZVRyZWUobm9kZS5jaGlsZHJlbiwgY2xhc3NOYW1lcykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdUcmVlO1xufVxuXG5mdW5jdGlvbiB3cmFwTGluZXNJblNwYW4oY29kZVRyZWUsIGxpbmVQcm9wcykge1xuICB2YXIgdHJlZSA9IGZsYXR0ZW5Db2RlVHJlZShjb2RlVHJlZS52YWx1ZSk7XG4gIHZhciBuZXdUcmVlID0gW107XG4gIHZhciBsYXN0TGluZUJyZWFrSW5kZXggPSAtMTtcbiAgdmFyIGluZGV4ID0gMDtcblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgICB2YXIgbm9kZSA9IHRyZWVbaW5kZXhdO1xuICAgIHZhciB2YWx1ZSA9IG5vZGUuY2hpbGRyZW5bMF0udmFsdWU7XG4gICAgdmFyIG5ld0xpbmVzID0gZ2V0TmV3TGluZXModmFsdWUpO1xuXG4gICAgaWYgKG5ld0xpbmVzKSB7XG4gICAgICB2YXIgc3BsaXRWYWx1ZSA9IHZhbHVlLnNwbGl0KCdcXG4nKTtcbiAgICAgIHNwbGl0VmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodGV4dCwgaSkge1xuICAgICAgICB2YXIgbGluZU51bWJlciA9IG5ld1RyZWUubGVuZ3RoICsgMTtcbiAgICAgICAgdmFyIG5ld0NoaWxkID0ge1xuICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICB2YWx1ZTogXCJcIi5jb25jYXQodGV4dCwgXCJcXG5cIilcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIHZhciBfY2hpbGRyZW4gPSB0cmVlLnNsaWNlKGxhc3RMaW5lQnJlYWtJbmRleCArIDEsIGluZGV4KS5jb25jYXQoY3JlYXRlTGluZUVsZW1lbnQoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtuZXdDaGlsZF0sXG4gICAgICAgICAgICBjbGFzc05hbWU6IG5vZGUucHJvcGVydGllcy5jbGFzc05hbWVcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBuZXdUcmVlLnB1c2goY3JlYXRlTGluZUVsZW1lbnQoe1xuICAgICAgICAgICAgY2hpbGRyZW46IF9jaGlsZHJlbixcbiAgICAgICAgICAgIGxpbmVOdW1iZXI6IGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBsaW5lUHJvcHM6IGxpbmVQcm9wc1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIGlmIChpID09PSBzcGxpdFZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICB2YXIgc3RyaW5nQ2hpbGQgPSB0cmVlW2luZGV4ICsgMV0gJiYgdHJlZVtpbmRleCArIDFdLmNoaWxkcmVuICYmIHRyZWVbaW5kZXggKyAxXS5jaGlsZHJlblswXTtcblxuICAgICAgICAgIGlmIChzdHJpbmdDaGlsZCkge1xuICAgICAgICAgICAgdmFyIGxhc3RMaW5lSW5QcmV2aW91c1NwYW4gPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgdmFsdWU6IFwiXCIuY29uY2F0KHRleHQpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIG5ld0VsZW0gPSBjcmVhdGVMaW5lRWxlbWVudCh7XG4gICAgICAgICAgICAgIGNoaWxkcmVuOiBbbGFzdExpbmVJblByZXZpb3VzU3Bhbl0sXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogbm9kZS5wcm9wZXJ0aWVzLmNsYXNzTmFtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0cmVlLnNwbGljZShpbmRleCArIDEsIDAsIG5ld0VsZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdUcmVlLnB1c2goY3JlYXRlTGluZUVsZW1lbnQoe1xuICAgICAgICAgICAgICBjaGlsZHJlbjogW25ld0NoaWxkXSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlcixcbiAgICAgICAgICAgICAgbGluZVByb3BzOiBsaW5lUHJvcHMsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogbm9kZS5wcm9wZXJ0aWVzLmNsYXNzTmFtZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdUcmVlLnB1c2goY3JlYXRlTGluZUVsZW1lbnQoe1xuICAgICAgICAgICAgY2hpbGRyZW46IFtuZXdDaGlsZF0sXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiBsaW5lTnVtYmVyLFxuICAgICAgICAgICAgbGluZVByb3BzOiBsaW5lUHJvcHMsXG4gICAgICAgICAgICBjbGFzc05hbWU6IG5vZGUucHJvcGVydGllcy5jbGFzc05hbWVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdExpbmVCcmVha0luZGV4ID0gaW5kZXg7XG4gICAgfVxuXG4gICAgaW5kZXgrKztcbiAgfTtcblxuICB3aGlsZSAoaW5kZXggPCB0cmVlLmxlbmd0aCkge1xuICAgIF9sb29wKCk7XG4gIH1cblxuICBpZiAobGFzdExpbmVCcmVha0luZGV4ICE9PSB0cmVlLmxlbmd0aCAtIDEpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0cmVlLnNsaWNlKGxhc3RMaW5lQnJlYWtJbmRleCArIDEsIHRyZWUubGVuZ3RoKTtcblxuICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIG5ld1RyZWUucHVzaChjcmVhdGVMaW5lRWxlbWVudCh7XG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgICAgbGluZU51bWJlcjogbmV3VHJlZS5sZW5ndGggKyAxLFxuICAgICAgICBsaW5lUHJvcHM6IGxpbmVQcm9wc1xuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdUcmVlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UmVuZGVyZXIoX3JlZjQpIHtcbiAgdmFyIHJvd3MgPSBfcmVmNC5yb3dzLFxuICAgICAgc3R5bGVzaGVldCA9IF9yZWY0LnN0eWxlc2hlZXQsXG4gICAgICB1c2VJbmxpbmVTdHlsZXMgPSBfcmVmNC51c2VJbmxpbmVTdHlsZXM7XG4gIHJldHVybiByb3dzLm1hcChmdW5jdGlvbiAobm9kZSwgaSkge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHtcbiAgICAgIG5vZGU6IG5vZGUsXG4gICAgICBzdHlsZXNoZWV0OiBzdHlsZXNoZWV0LFxuICAgICAgdXNlSW5saW5lU3R5bGVzOiB1c2VJbmxpbmVTdHlsZXMsXG4gICAgICBrZXk6IFwiY29kZS1zZWdlbWVudFwiLmNvbmNhdChpKVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29kZVRyZWUoX3JlZjUpIHtcbiAgdmFyIGFzdEdlbmVyYXRvciA9IF9yZWY1LmFzdEdlbmVyYXRvcixcbiAgICAgIGxhbmd1YWdlID0gX3JlZjUubGFuZ3VhZ2UsXG4gICAgICBjb2RlID0gX3JlZjUuY29kZSxcbiAgICAgIGRlZmF1bHRDb2RlVmFsdWUgPSBfcmVmNS5kZWZhdWx0Q29kZVZhbHVlO1xuXG4gIGlmIChhc3RHZW5lcmF0b3IuZ2V0TGFuZ3VhZ2UpIHtcbiAgICB2YXIgaGFzTGFuZ3VhZ2UgPSBsYW5ndWFnZSAmJiBhc3RHZW5lcmF0b3IuZ2V0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuXG4gICAgaWYgKGxhbmd1YWdlID09PSAndGV4dCcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBkZWZhdWx0Q29kZVZhbHVlLFxuICAgICAgICBsYW5ndWFnZTogJ3RleHQnXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaGFzTGFuZ3VhZ2UpIHtcbiAgICAgIHJldHVybiBhc3RHZW5lcmF0b3IuaGlnaGxpZ2h0KGxhbmd1YWdlLCBjb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFzdEdlbmVyYXRvci5oaWdobGlnaHRBdXRvKGNvZGUpO1xuICAgIH1cbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGxhbmd1YWdlICYmIGxhbmd1YWdlICE9PSAndGV4dCcgPyB7XG4gICAgICB2YWx1ZTogYXN0R2VuZXJhdG9yLmhpZ2hsaWdodChjb2RlLCBsYW5ndWFnZSlcbiAgICB9IDoge1xuICAgICAgdmFsdWU6IGRlZmF1bHRDb2RlVmFsdWVcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBkZWZhdWx0Q29kZVZhbHVlXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoZGVmYXVsdEFzdEdlbmVyYXRvciwgZGVmYXVsdFN0eWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBTeW50YXhIaWdobGlnaHRlcihfcmVmNikge1xuICAgIHZhciBsYW5ndWFnZSA9IF9yZWY2Lmxhbmd1YWdlLFxuICAgICAgICBjaGlsZHJlbiA9IF9yZWY2LmNoaWxkcmVuLFxuICAgICAgICBfcmVmNiRzdHlsZSA9IF9yZWY2LnN0eWxlLFxuICAgICAgICBzdHlsZSA9IF9yZWY2JHN0eWxlID09PSB2b2lkIDAgPyBkZWZhdWx0U3R5bGUgOiBfcmVmNiRzdHlsZSxcbiAgICAgICAgX3JlZjYkY3VzdG9tU3R5bGUgPSBfcmVmNi5jdXN0b21TdHlsZSxcbiAgICAgICAgY3VzdG9tU3R5bGUgPSBfcmVmNiRjdXN0b21TdHlsZSA9PT0gdm9pZCAwID8ge30gOiBfcmVmNiRjdXN0b21TdHlsZSxcbiAgICAgICAgX3JlZjYkY29kZVRhZ1Byb3BzID0gX3JlZjYuY29kZVRhZ1Byb3BzLFxuICAgICAgICBjb2RlVGFnUHJvcHMgPSBfcmVmNiRjb2RlVGFnUHJvcHMgPT09IHZvaWQgMCA/IHtcbiAgICAgIHN0eWxlOiBzdHlsZVsnY29kZVtjbGFzcyo9XCJsYW5ndWFnZS1cIl0nXVxuICAgIH0gOiBfcmVmNiRjb2RlVGFnUHJvcHMsXG4gICAgICAgIF9yZWY2JHVzZUlubGluZVN0eWxlcyA9IF9yZWY2LnVzZUlubGluZVN0eWxlcyxcbiAgICAgICAgdXNlSW5saW5lU3R5bGVzID0gX3JlZjYkdXNlSW5saW5lU3R5bGVzID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjYkdXNlSW5saW5lU3R5bGVzLFxuICAgICAgICBfcmVmNiRzaG93TGluZU51bWJlcnMgPSBfcmVmNi5zaG93TGluZU51bWJlcnMsXG4gICAgICAgIHNob3dMaW5lTnVtYmVycyA9IF9yZWY2JHNob3dMaW5lTnVtYmVycyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNiRzaG93TGluZU51bWJlcnMsXG4gICAgICAgIF9yZWY2JHN0YXJ0aW5nTGluZU51bSA9IF9yZWY2LnN0YXJ0aW5nTGluZU51bWJlcixcbiAgICAgICAgc3RhcnRpbmdMaW5lTnVtYmVyID0gX3JlZjYkc3RhcnRpbmdMaW5lTnVtID09PSB2b2lkIDAgPyAxIDogX3JlZjYkc3RhcnRpbmdMaW5lTnVtLFxuICAgICAgICBsaW5lTnVtYmVyQ29udGFpbmVyUHJvcHMgPSBfcmVmNi5saW5lTnVtYmVyQ29udGFpbmVyUHJvcHMsXG4gICAgICAgIGxpbmVOdW1iZXJQcm9wcyA9IF9yZWY2LmxpbmVOdW1iZXJQcm9wcyxcbiAgICAgICAgd3JhcExpbmVzID0gX3JlZjYud3JhcExpbmVzLFxuICAgICAgICBfcmVmNiRsaW5lUHJvcHMgPSBfcmVmNi5saW5lUHJvcHMsXG4gICAgICAgIGxpbmVQcm9wcyA9IF9yZWY2JGxpbmVQcm9wcyA9PT0gdm9pZCAwID8ge30gOiBfcmVmNiRsaW5lUHJvcHMsXG4gICAgICAgIHJlbmRlcmVyID0gX3JlZjYucmVuZGVyZXIsXG4gICAgICAgIF9yZWY2JFByZVRhZyA9IF9yZWY2LlByZVRhZyxcbiAgICAgICAgUHJlVGFnID0gX3JlZjYkUHJlVGFnID09PSB2b2lkIDAgPyAncHJlJyA6IF9yZWY2JFByZVRhZyxcbiAgICAgICAgX3JlZjYkQ29kZVRhZyA9IF9yZWY2LkNvZGVUYWcsXG4gICAgICAgIENvZGVUYWcgPSBfcmVmNiRDb2RlVGFnID09PSB2b2lkIDAgPyAnY29kZScgOiBfcmVmNiRDb2RlVGFnLFxuICAgICAgICBfcmVmNiRjb2RlID0gX3JlZjYuY29kZSxcbiAgICAgICAgY29kZSA9IF9yZWY2JGNvZGUgPT09IHZvaWQgMCA/IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbiA6IF9yZWY2JGNvZGUsXG4gICAgICAgIGFzdEdlbmVyYXRvciA9IF9yZWY2LmFzdEdlbmVyYXRvcixcbiAgICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmNiwgW1wibGFuZ3VhZ2VcIiwgXCJjaGlsZHJlblwiLCBcInN0eWxlXCIsIFwiY3VzdG9tU3R5bGVcIiwgXCJjb2RlVGFnUHJvcHNcIiwgXCJ1c2VJbmxpbmVTdHlsZXNcIiwgXCJzaG93TGluZU51bWJlcnNcIiwgXCJzdGFydGluZ0xpbmVOdW1iZXJcIiwgXCJsaW5lTnVtYmVyQ29udGFpbmVyUHJvcHNcIiwgXCJsaW5lTnVtYmVyUHJvcHNcIiwgXCJ3cmFwTGluZXNcIiwgXCJsaW5lUHJvcHNcIiwgXCJyZW5kZXJlclwiLCBcIlByZVRhZ1wiLCBcIkNvZGVUYWdcIiwgXCJjb2RlXCIsIFwiYXN0R2VuZXJhdG9yXCJdKTtcblxuICAgIGFzdEdlbmVyYXRvciA9IGFzdEdlbmVyYXRvciB8fCBkZWZhdWx0QXN0R2VuZXJhdG9yO1xuICAgIHZhciBsaW5lTnVtYmVycyA9IHNob3dMaW5lTnVtYmVycyA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluZU51bWJlcnMsIHtcbiAgICAgIGNvbnRhaW5lclByb3BzOiBsaW5lTnVtYmVyQ29udGFpbmVyUHJvcHMsXG4gICAgICBjb2RlU3R5bGU6IGNvZGVUYWdQcm9wcy5zdHlsZSB8fCB7fSxcbiAgICAgIG51bWJlclByb3BzOiBsaW5lTnVtYmVyUHJvcHMsXG4gICAgICBzdGFydGluZ0xpbmVOdW1iZXI6IHN0YXJ0aW5nTGluZU51bWJlcixcbiAgICAgIGNvZGVTdHJpbmc6IGNvZGVcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGRlZmF1bHRQcmVTdHlsZSA9IHN0eWxlLmhsanMgfHwgc3R5bGVbJ3ByZVtjbGFzcyo9XCJsYW5ndWFnZS1cIl0nXSB8fCB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJ1xuICAgIH07XG4gICAgdmFyIHByZVByb3BzID0gdXNlSW5saW5lU3R5bGVzID8gT2JqZWN0LmFzc2lnbih7fSwgcmVzdCwge1xuICAgICAgc3R5bGU6IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQcmVTdHlsZSwgY3VzdG9tU3R5bGUpXG4gICAgfSkgOiBPYmplY3QuYXNzaWduKHt9LCByZXN0LCB7XG4gICAgICBjbGFzc05hbWU6ICdobGpzJ1xuICAgIH0pO1xuXG4gICAgaWYgKCFhc3RHZW5lcmF0b3IpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFByZVRhZywgcHJlUHJvcHMsIGxpbmVOdW1iZXJzLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvZGVUYWcsIGNvZGVUYWdQcm9wcywgY29kZSkpO1xuICAgIH1cbiAgICAvKlxuICAgICAqIHNvbWUgY3VzdG9tIHJlbmRlcmVycyByZWx5IG9uIGluZGl2aWR1YWwgcm93IGVsZW1lbnRzIHNvIHdlIG5lZWQgdG8gdHVybiB3cmFwTGluZXMgb25cbiAgICAgKiBpZiByZW5kZXJlciBpcyBwcm92aWRlZCBhbmQgd3JhcExpbmVzIGlzIHVuZGVmaW5lZFxuICAgICAqL1xuXG5cbiAgICB3cmFwTGluZXMgPSByZW5kZXJlciAmJiB3cmFwTGluZXMgPT09IHVuZGVmaW5lZCA/IHRydWUgOiB3cmFwTGluZXM7XG4gICAgcmVuZGVyZXIgPSByZW5kZXJlciB8fCBkZWZhdWx0UmVuZGVyZXI7XG4gICAgdmFyIGRlZmF1bHRDb2RlVmFsdWUgPSBbe1xuICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgdmFsdWU6IGNvZGVcbiAgICB9XTtcbiAgICB2YXIgY29kZVRyZWUgPSBnZXRDb2RlVHJlZSh7XG4gICAgICBhc3RHZW5lcmF0b3I6IGFzdEdlbmVyYXRvcixcbiAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcbiAgICAgIGNvZGU6IGNvZGUsXG4gICAgICBkZWZhdWx0Q29kZVZhbHVlOiBkZWZhdWx0Q29kZVZhbHVlXG4gICAgfSk7XG5cbiAgICBpZiAoY29kZVRyZWUubGFuZ3VhZ2UgPT09IG51bGwpIHtcbiAgICAgIGNvZGVUcmVlLnZhbHVlID0gZGVmYXVsdENvZGVWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgdHJlZSA9IHdyYXBMaW5lcyA/IHdyYXBMaW5lc0luU3Bhbihjb2RlVHJlZSwgbGluZVByb3BzKSA6IGNvZGVUcmVlLnZhbHVlO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFByZVRhZywgcHJlUHJvcHMsIGxpbmVOdW1iZXJzLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvZGVUYWcsIGNvZGVUYWdQcm9wcywgcmVuZGVyZXIoe1xuICAgICAgcm93czogdHJlZSxcbiAgICAgIHN0eWxlc2hlZXQ6IHN0eWxlLFxuICAgICAgdXNlSW5saW5lU3R5bGVzOiB1c2VJbmxpbmVTdHlsZXNcbiAgICB9KSkpO1xuICB9O1xufSIsImltcG9ydCBoaWdobGlnaHQgZnJvbSAnLi9oaWdobGlnaHQnO1xuaW1wb3J0IHJlZnJhY3RvciBmcm9tICdyZWZyYWN0b3IvY29yZSc7XG52YXIgU3ludGF4SGlnaGxpZ2h0ZXIgPSBoaWdobGlnaHQocmVmcmFjdG9yLCB7fSk7XG5cblN5bnRheEhpZ2hsaWdodGVyLnJlZ2lzdGVyTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoXywgbGFuZ3VhZ2UpIHtcbiAgcmV0dXJuIHJlZnJhY3Rvci5yZWdpc3RlcihsYW5ndWFnZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTeW50YXhIaWdobGlnaHRlcjsiLCJpbXBvcnQgdHN4IGZyb20gXCJyZWZyYWN0b3IvbGFuZy90c3guanNcIjtcbjtcbmV4cG9ydCBkZWZhdWx0IHRzeDsiLCJpbXBvcnQgYmFzaCBmcm9tIFwicmVmcmFjdG9yL2xhbmcvYmFzaC5qc1wiO1xuO1xuZXhwb3J0IGRlZmF1bHQgYmFzaDsiLCJpbXBvcnQganNvbiBmcm9tIFwicmVmcmFjdG9yL2xhbmcvanNvbi5qc1wiO1xuO1xuZXhwb3J0IGRlZmF1bHQganNvbjsiLCJleHBvcnQgZGVmYXVsdCB7XG4gIFwiY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2NjY1wiLFxuICAgIFwiYmFja2dyb3VuZFwiOiBcIm5vbmVcIixcbiAgICBcImZvbnRGYW1pbHlcIjogXCJDb25zb2xhcywgTW9uYWNvLCAnQW5kYWxlIE1vbm8nLCAnVWJ1bnR1IE1vbm8nLCBtb25vc3BhY2VcIixcbiAgICBcInRleHRBbGlnblwiOiBcImxlZnRcIixcbiAgICBcIndoaXRlU3BhY2VcIjogXCJwcmVcIixcbiAgICBcIndvcmRTcGFjaW5nXCI6IFwibm9ybWFsXCIsXG4gICAgXCJ3b3JkQnJlYWtcIjogXCJub3JtYWxcIixcbiAgICBcIndvcmRXcmFwXCI6IFwibm9ybWFsXCIsXG4gICAgXCJsaW5lSGVpZ2h0XCI6IFwiMS41XCIsXG4gICAgXCJNb3pUYWJTaXplXCI6IFwiNFwiLFxuICAgIFwiT1RhYlNpemVcIjogXCI0XCIsXG4gICAgXCJ0YWJTaXplXCI6IFwiNFwiLFxuICAgIFwiV2Via2l0SHlwaGVuc1wiOiBcIm5vbmVcIixcbiAgICBcIk1vekh5cGhlbnNcIjogXCJub25lXCIsXG4gICAgXCJtc0h5cGhlbnNcIjogXCJub25lXCIsXG4gICAgXCJoeXBoZW5zXCI6IFwibm9uZVwiXG4gIH0sXG4gIFwicHJlW2NsYXNzKj1cXFwibGFuZ3VhZ2UtXFxcIl1cIjoge1xuICAgIFwiY29sb3JcIjogXCIjY2NjXCIsXG4gICAgXCJiYWNrZ3JvdW5kXCI6IFwiIzJkMmQyZFwiLFxuICAgIFwiZm9udEZhbWlseVwiOiBcIkNvbnNvbGFzLCBNb25hY28sICdBbmRhbGUgTW9ubycsICdVYnVudHUgTW9ubycsIG1vbm9zcGFjZVwiLFxuICAgIFwidGV4dEFsaWduXCI6IFwibGVmdFwiLFxuICAgIFwid2hpdGVTcGFjZVwiOiBcInByZVwiLFxuICAgIFwid29yZFNwYWNpbmdcIjogXCJub3JtYWxcIixcbiAgICBcIndvcmRCcmVha1wiOiBcIm5vcm1hbFwiLFxuICAgIFwid29yZFdyYXBcIjogXCJub3JtYWxcIixcbiAgICBcImxpbmVIZWlnaHRcIjogXCIxLjVcIixcbiAgICBcIk1velRhYlNpemVcIjogXCI0XCIsXG4gICAgXCJPVGFiU2l6ZVwiOiBcIjRcIixcbiAgICBcInRhYlNpemVcIjogXCI0XCIsXG4gICAgXCJXZWJraXRIeXBoZW5zXCI6IFwibm9uZVwiLFxuICAgIFwiTW96SHlwaGVuc1wiOiBcIm5vbmVcIixcbiAgICBcIm1zSHlwaGVuc1wiOiBcIm5vbmVcIixcbiAgICBcImh5cGhlbnNcIjogXCJub25lXCIsXG4gICAgXCJwYWRkaW5nXCI6IFwiMWVtXCIsXG4gICAgXCJtYXJnaW5cIjogXCIuNWVtIDBcIixcbiAgICBcIm92ZXJmbG93XCI6IFwiYXV0b1wiXG4gIH0sXG4gIFwiOm5vdChwcmUpID4gY29kZVtjbGFzcyo9XFxcImxhbmd1YWdlLVxcXCJdXCI6IHtcbiAgICBcImJhY2tncm91bmRcIjogXCIjMmQyZDJkXCIsXG4gICAgXCJwYWRkaW5nXCI6IFwiLjFlbVwiLFxuICAgIFwiYm9yZGVyUmFkaXVzXCI6IFwiLjNlbVwiLFxuICAgIFwid2hpdGVTcGFjZVwiOiBcIm5vcm1hbFwiXG4gIH0sXG4gIFwiY29tbWVudFwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiM5OTlcIlxuICB9LFxuICBcImJsb2NrLWNvbW1lbnRcIjoge1xuICAgIFwiY29sb3JcIjogXCIjOTk5XCJcbiAgfSxcbiAgXCJwcm9sb2dcIjoge1xuICAgIFwiY29sb3JcIjogXCIjOTk5XCJcbiAgfSxcbiAgXCJkb2N0eXBlXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzk5OVwiXG4gIH0sXG4gIFwiY2RhdGFcIjoge1xuICAgIFwiY29sb3JcIjogXCIjOTk5XCJcbiAgfSxcbiAgXCJwdW5jdHVhdGlvblwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNjY2NcIlxuICB9LFxuICBcInRhZ1wiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNlMjc3N2FcIlxuICB9LFxuICBcImF0dHItbmFtZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNlMjc3N2FcIlxuICB9LFxuICBcIm5hbWVzcGFjZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNlMjc3N2FcIlxuICB9LFxuICBcImRlbGV0ZWRcIjoge1xuICAgIFwiY29sb3JcIjogXCIjZTI3NzdhXCJcbiAgfSxcbiAgXCJmdW5jdGlvbi1uYW1lXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzYxOTZjY1wiXG4gIH0sXG4gIFwiYm9vbGVhblwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNmMDhkNDlcIlxuICB9LFxuICBcIm51bWJlclwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNmMDhkNDlcIlxuICB9LFxuICBcImZ1bmN0aW9uXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2YwOGQ0OVwiXG4gIH0sXG4gIFwicHJvcGVydHlcIjoge1xuICAgIFwiY29sb3JcIjogXCIjZjhjNTU1XCJcbiAgfSxcbiAgXCJjbGFzcy1uYW1lXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2Y4YzU1NVwiXG4gIH0sXG4gIFwiY29uc3RhbnRcIjoge1xuICAgIFwiY29sb3JcIjogXCIjZjhjNTU1XCJcbiAgfSxcbiAgXCJzeW1ib2xcIjoge1xuICAgIFwiY29sb3JcIjogXCIjZjhjNTU1XCJcbiAgfSxcbiAgXCJzZWxlY3RvclwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNjYzk5Y2RcIlxuICB9LFxuICBcImltcG9ydGFudFwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNjYzk5Y2RcIixcbiAgICBcImZvbnRXZWlnaHRcIjogXCJib2xkXCJcbiAgfSxcbiAgXCJhdHJ1bGVcIjoge1xuICAgIFwiY29sb3JcIjogXCIjY2M5OWNkXCJcbiAgfSxcbiAgXCJrZXl3b3JkXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2NjOTljZFwiXG4gIH0sXG4gIFwiYnVpbHRpblwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNjYzk5Y2RcIlxuICB9LFxuICBcInN0cmluZ1wiOiB7XG4gICAgXCJjb2xvclwiOiBcIiM3ZWM2OTlcIlxuICB9LFxuICBcImNoYXJcIjoge1xuICAgIFwiY29sb3JcIjogXCIjN2VjNjk5XCJcbiAgfSxcbiAgXCJhdHRyLXZhbHVlXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzdlYzY5OVwiXG4gIH0sXG4gIFwicmVnZXhcIjoge1xuICAgIFwiY29sb3JcIjogXCIjN2VjNjk5XCJcbiAgfSxcbiAgXCJ2YXJpYWJsZVwiOiB7XG4gICAgXCJjb2xvclwiOiBcIiM3ZWM2OTlcIlxuICB9LFxuICBcIm9wZXJhdG9yXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzY3Y2RjY1wiXG4gIH0sXG4gIFwiZW50aXR5XCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzY3Y2RjY1wiLFxuICAgIFwiY3Vyc29yXCI6IFwiaGVscFwiXG4gIH0sXG4gIFwidXJsXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzY3Y2RjY1wiXG4gIH0sXG4gIFwiYm9sZFwiOiB7XG4gICAgXCJmb250V2VpZ2h0XCI6IFwiYm9sZFwiXG4gIH0sXG4gIFwiaXRhbGljXCI6IHtcbiAgICBcImZvbnRTdHlsZVwiOiBcIml0YWxpY1wiXG4gIH0sXG4gIFwiaW5zZXJ0ZWRcIjoge1xuICAgIFwiY29sb3JcIjogXCJncmVlblwiXG4gIH1cbn07IiwiaW1wb3J0IHB5dGhvbiBmcm9tIFwicmVmcmFjdG9yL2xhbmcvcHl0aG9uLmpzXCI7XG47XG5leHBvcnQgZGVmYXVsdCBweXRob247IiwiaW1wb3J0IHJlYXNvbiBmcm9tIFwicmVmcmFjdG9yL2xhbmcvcmVhc29uLmpzXCI7XG47XG5leHBvcnQgZGVmYXVsdCByZWFzb247IiwiaW1wb3J0IGphdmFzY3JpcHQgZnJvbSBcInJlZnJhY3Rvci9sYW5nL2phdmFzY3JpcHQuanNcIjtcbjtcbmV4cG9ydCBkZWZhdWx0IGphdmFzY3JpcHQ7IiwiaW1wb3J0IHR5cGVzY3JpcHQgZnJvbSBcInJlZnJhY3Rvci9sYW5nL3R5cGVzY3JpcHQuanNcIjtcbjtcbmV4cG9ydCBkZWZhdWx0IHR5cGVzY3JpcHQ7IiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiYnMtY3NzLWVtb3Rpb24vc3JjL0Nzcy5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUHJpc21MaWdodCBmcm9tIFwicmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL3ByaXNtLWxpZ2h0XCI7XG5pbXBvcnQgKiBhcyBUc3ggZnJvbSBcInJlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9sYW5ndWFnZXMvcHJpc20vdHN4XCI7XG5pbXBvcnQgKiBhcyBCYXNoIGZyb20gXCJyZWFjdC1zeW50YXgtaGlnaGxpZ2h0ZXIvZGlzdC9lc20vbGFuZ3VhZ2VzL3ByaXNtL2Jhc2hcIjtcbmltcG9ydCAqIGFzIEpzb24gZnJvbSBcInJlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9sYW5ndWFnZXMvcHJpc20vanNvblwiO1xuaW1wb3J0ICogYXMgVG9tb3Jyb3cgZnJvbSBcInJlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9zdHlsZXMvcHJpc20vdG9tb3Jyb3dcIjtcbmltcG9ydCAqIGFzIFB5dGhvbiBmcm9tIFwicmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL2xhbmd1YWdlcy9wcmlzbS9weXRob25cIjtcbmltcG9ydCAqIGFzIFJlYXNvbiBmcm9tIFwicmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL2xhbmd1YWdlcy9wcmlzbS9yZWFzb25cIjtcbmltcG9ydCAqIGFzIEphdmFzY3JpcHQgZnJvbSBcInJlYWN0LXN5bnRheC1oaWdobGlnaHRlci9kaXN0L2VzbS9sYW5ndWFnZXMvcHJpc20vamF2YXNjcmlwdFwiO1xuaW1wb3J0ICogYXMgVHlwZXNjcmlwdCBmcm9tIFwicmVhY3Qtc3ludGF4LWhpZ2hsaWdodGVyL2Rpc3QvZXNtL2xhbmd1YWdlcy9wcmlzbS90eXBlc2NyaXB0XCI7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyU3R5bGVzKHBhcmFtKSB7XG4gIFByaXNtTGlnaHQuZGVmYXVsdC5yZWdpc3Rlckxhbmd1YWdlKFwiYmFzaFwiLCBCYXNoLmRlZmF1bHQpO1xuICBQcmlzbUxpZ2h0LmRlZmF1bHQucmVnaXN0ZXJMYW5ndWFnZShcImphdmFzY3JpcHRcIiwgSmF2YXNjcmlwdC5kZWZhdWx0KTtcbiAgUHJpc21MaWdodC5kZWZhdWx0LnJlZ2lzdGVyTGFuZ3VhZ2UoXCJqc29uXCIsIEpzb24uZGVmYXVsdCk7XG4gIFByaXNtTGlnaHQuZGVmYXVsdC5yZWdpc3Rlckxhbmd1YWdlKFwicHl0aG9uXCIsIFB5dGhvbi5kZWZhdWx0KTtcbiAgUHJpc21MaWdodC5kZWZhdWx0LnJlZ2lzdGVyTGFuZ3VhZ2UoXCJyZWFzb25cIiwgUmVhc29uLmRlZmF1bHQpO1xuICBQcmlzbUxpZ2h0LmRlZmF1bHQucmVnaXN0ZXJMYW5ndWFnZShcInR5cGVzY3JpcHRcIiwgVHlwZXNjcmlwdC5kZWZhdWx0KTtcbiAgUHJpc21MaWdodC5kZWZhdWx0LnJlZ2lzdGVyTGFuZ3VhZ2UoXCJ0c3hcIiwgVHN4LmRlZmF1bHQpO1xuICBcbn1cblxudmFyIGNsYXNzTmFtZSA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgwLjgpKSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuaW1wb3J0YW50KENzcy5tYXJnaW5Cb3R0b20oQ3NzLnJlbSgxLjApKSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBIaWdobGlnaHRlZENvZGUoUHJvcHMpIHtcbiAgdmFyIGxhbmd1YWdlID0gUHJvcHMubGFuZ3VhZ2U7XG4gIHZhciB0ZXh0ID0gUHJvcHMudGV4dDtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJpc21MaWdodC5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UsXG4gICAgICAgICAgICAgIHN0eWxlOiBUb21vcnJvdy5kZWZhdWx0LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogdGV4dFxuICAgICAgICAgICAgfSk7XG59XG5cbnZhciBtYWtlID0gSGlnaGxpZ2h0ZWRDb2RlO1xuXG5leHBvcnQge1xuICByZWdpc3RlclN0eWxlcyAsXG4gIGNsYXNzTmFtZSAsXG4gIG1ha2UgLFxuICBcbn1cbi8qIGNsYXNzTmFtZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiYnMtY3NzLWVtb3Rpb24vc3JjL0Nzcy5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9MaXN0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBIaWdobGlnaHRlZENvZGUgZnJvbSBcIi4vY29tcG9uZW50cy9IaWdobGlnaHRlZENvZGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GdW5jdGlvbiBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfRnVuY3Rpb24uYnMuanNcIjtcblxudmFyIGRlc2t0b3BDb2x1bW5XaWR0aCA9IENzcy5yZW0oNDguMCk7XG5cbmZ1bmN0aW9uIGRlc2t0b3BNZWRpYVF1ZXJ5KHBhcmFtKSB7XG4gIHJldHVybiBDc3MubWVkaWEoXCIobWluLXdpZHRoOiAzNy41cmVtKVwiLCBwYXJhbSk7XG59XG5cbnZhciB0ZXh0Q29sb3VyID0gQ3NzLnJnYigxNzMsIDE3NSwgMTc0KTtcblxudmFyIGxpbmtDb2xvdXIgPSBDc3MucmdiKDIyMiwgMjI2LCAyMzApO1xuXG52YXIgc21hbGxDYXBzQ2xhc3NOYW1lID0gQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgIENzcy5mb250RmFtaWx5KC8qIHNlcmlmICovLTk3NjQwNTc5KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MudW5zYWZlKFwiZm9udFZhcmlhbnRcIiwgXCJzbWFsbC1jYXBzXCIpLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxudmFyIGNlbnRyZWRDb2x1bW5DbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy53aWR0aChDc3MucGN0KDEwMC4wKSksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5tZWRpYShcIihtaW4td2lkdGg6IDM3LjVyZW0pXCIsIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy5tYXhXaWR0aChkZXNrdG9wQ29sdW1uV2lkdGgpLFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG52YXIgYm90dG9tQm9yZGVyQ2xhc3NOYW1lID0gQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgIENzcy5ib3JkZXJCb3R0b20oQ3NzLnB4KDEpLCAvKiBzb2xpZCAqLzEyOTU2NzE1LCBDc3MucmdiKDQwLCA0MCwgNDApKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF0pO1xuXG5mdW5jdGlvbiBjb21iaW5lQ2xhc3NOYW1lcyhjbGFzc05hbWVzKSB7XG4gIHJldHVybiBDdXJyeS5fMShDc3MubWVyZ2UsIFJlbHVkZV9MaXN0Lm1hcE9wdGlvbihSZWx1ZGVfRnVuY3Rpb24uaWRlbnRpdHksIGNsYXNzTmFtZXMpKTtcbn1cblxudmFyIGJhY2tncm91bmRDb2xvdXIgPSBDc3MuYmxhY2s7XG5cbnZhciBsaW5rSG92ZXJDb2xvdXIgPSBDc3Mud2hpdGU7XG5cbnZhciByZWdpc3Rlckdsb2JhbFN0eWxlcyA9IEhpZ2hsaWdodGVkQ29kZS5yZWdpc3RlclN0eWxlcztcblxuZXhwb3J0IHtcbiAgZGVza3RvcENvbHVtbldpZHRoICxcbiAgZGVza3RvcE1lZGlhUXVlcnkgLFxuICBiYWNrZ3JvdW5kQ29sb3VyICxcbiAgdGV4dENvbG91ciAsXG4gIGxpbmtDb2xvdXIgLFxuICBsaW5rSG92ZXJDb2xvdXIgLFxuICBzbWFsbENhcHNDbGFzc05hbWUgLFxuICBjZW50cmVkQ29sdW1uQ2xhc3NOYW1lICxcbiAgYm90dG9tQm9yZGVyQ2xhc3NOYW1lICxcbiAgY29tYmluZUNsYXNzTmFtZXMgLFxuICByZWdpc3Rlckdsb2JhbFN0eWxlcyAsXG4gIFxufVxuLyogZGVza3RvcENvbHVtbldpZHRoIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgU3R5bGUgZnJvbSBcIi4uL1N0eWxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxudmFyIGhvdmVyU3R5bGVzXzAwMCA9IENzcy50ZXh0RGVjb3JhdGlvbihDc3Mubm9uZSk7XG5cbnZhciBob3ZlclN0eWxlc18wMDEgPSAvKiA6OiAqL1tcbiAgQ3NzLmNvbG9yKFN0eWxlLmxpbmtIb3ZlckNvbG91ciksXG4gIC8qIFtdICovMFxuXTtcblxudmFyIGhvdmVyU3R5bGVzID0gLyogOjogKi9bXG4gIGhvdmVyU3R5bGVzXzAwMCxcbiAgaG92ZXJTdHlsZXNfMDAxXG5dO1xuXG52YXIgYmFzZUNsYXNzTmFtZSA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuY29sb3IoU3R5bGUubGlua0NvbG91ciksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmhvdmVyKGhvdmVyU3R5bGVzKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbnZhciBhY3RpdmVDbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIGhvdmVyU3R5bGVzKTtcblxuZnVuY3Rpb24gTGluayhQcm9wcykge1xuICB2YXIgdXJsID0gUHJvcHMudXJsO1xuICB2YXIgYWN0aXZlT3B0ID0gUHJvcHMuYWN0aXZlO1xuICB2YXIgY2xhc3NOYW1lID0gUHJvcHMuY2xhc3NOYW1lO1xuICB2YXIgY2hpbGRyZW4gPSBQcm9wcy5jaGlsZHJlbjtcbiAgdmFyIGFjdGl2ZSA9IGFjdGl2ZU9wdCAhPT0gdW5kZWZpbmVkID8gYWN0aXZlT3B0IDogZmFsc2U7XG4gIHZhciBjbGFzc05hbWUkMSA9IFN0eWxlLmNvbWJpbmVDbGFzc05hbWVzKC8qIDo6ICovW1xuICAgICAgICBiYXNlQ2xhc3NOYW1lLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBhY3RpdmUgPyBhY3RpdmVDbGFzc05hbWUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICAgIF0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSQxLFxuICAgICAgICAgICAgICBocmVmOiB1cmxcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbn1cblxudmFyIG1ha2UgPSBMaW5rO1xuXG5leHBvcnQge1xuICBob3ZlclN0eWxlcyAsXG4gIGJhc2VDbGFzc05hbWUgLFxuICBhY3RpdmVDbGFzc05hbWUgLFxuICBtYWtlICxcbiAgXG59XG4vKiBob3ZlclN0eWxlcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIExpbmsgZnJvbSBcIi4vTGluay5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBSb3V0ZXIgZnJvbSBcIi4uLy4uL1JvdXRlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vYmogZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vYmouanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5cbmZ1bmN0aW9uIFJvdXRlTGluayhQcm9wcykge1xuICB2YXIgcm91dGUgPSBQcm9wcy5yb3V0ZTtcbiAgdmFyIGFjdGl2ZVJvdXRlID0gUHJvcHMuYWN0aXZlUm91dGU7XG4gIHZhciBjbGFzc05hbWUgPSBQcm9wcy5jbGFzc05hbWU7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICB2YXIgdXJsID0gUm91dGVyLmJ1aWxkKHJvdXRlKTtcbiAgdmFyIHRtcCA9IHtcbiAgICB1cmw6IHVybCxcbiAgICBhY3RpdmU6IENhbWxfb2JqLmNhbWxfZXF1YWwocm91dGUsIGFjdGl2ZVJvdXRlKSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfTtcbiAgaWYgKGNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdG1wLmNsYXNzTmFtZSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oY2xhc3NOYW1lKTtcbiAgfVxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLm1ha2UsIHRtcCk7XG59XG5cbnZhciBtYWtlID0gUm91dGVMaW5rO1xuXG5leHBvcnQge1xuICBtYWtlICxcbiAgXG59XG4vKiBMaW5rIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSW50IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JbnQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1N0cmluZyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfU3RyaW5nLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHJvdXRlKHNlZ21lbnRzKSB7XG4gIHZhciBsZW4gPSBzZWdtZW50cy5sZW5ndGg7XG4gIGlmIChsZW4gPj0gNSkge1xuICAgIHJldHVybiA7XG4gIH1cbiAgc3dpdGNoIChsZW4pIHtcbiAgICBjYXNlIDAgOlxuICAgICAgICByZXR1cm4gLyogSW5kZXggKi9CbG9jay5fXygwLCBbLyogcGFnZSAqLzFdKTtcbiAgICBjYXNlIDEgOlxuICAgICAgICB2YXIgcGFnZSA9IHNlZ21lbnRzWzBdO1xuICAgICAgICBpZiAocGFnZSA9PT0gXCJhYm91dFwiKSB7XG4gICAgICAgICAgcmV0dXJuIC8qIEFib3V0ICovMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogSW5kZXggKi9CbG9jay5fXygwLCBbLyogcGFnZSAqL3BhZ2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX09wdGlvbi5maWx0ZXIoKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFnZSA+PSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShSZWx1ZGVfSW50LmZyb21TdHJpbmcocGFnZSkpKTtcbiAgICAgICAgfVxuICAgIGNhc2UgMiA6XG4gICAgICAgIHZhciBtYXRjaCA9IHNlZ21lbnRzWzBdO1xuICAgICAgICBzd2l0Y2ggKG1hdGNoKSB7XG4gICAgICAgICAgY2FzZSBcInRhZ1wiIDpcbiAgICAgICAgICAgICAgdmFyIHNsdWcgPSBzZWdtZW50c1sxXTtcbiAgICAgICAgICAgICAgcmV0dXJuIC8qIFRhZ1NlYXJjaCAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIHNsdWcgKi9zbHVnLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogcGFnZSAqLzFcbiAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICBjYXNlIFwidXBsb2Fkc1wiIDpcbiAgICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gc2VnbWVudHNbMV07XG4gICAgICAgICAgICAgIHJldHVybiAvKiBVcGxvYWRzICovQmxvY2suX18oMywgWy8qIGZpbGVuYW1lICovZmlsZW5hbWVdKTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgfVxuICAgIGNhc2UgMyA6XG4gICAgICAgIHZhciBtYXRjaCQxID0gc2VnbWVudHNbMF07XG4gICAgICAgIGlmIChtYXRjaCQxICE9PSBcInRhZ1wiKSB7XG4gICAgICAgICAgcmV0dXJuIDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2x1ZyQxID0gc2VnbWVudHNbMV07XG4gICAgICAgIHZhciBwYWdlJDEgPSBzZWdtZW50c1syXTtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBUYWdTZWFyY2ggKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHNsdWcgKi9zbHVnJDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHBhZ2UgKi9wYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9PcHRpb24uZmlsdGVyKChmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYWdlID49IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShSZWx1ZGVfSW50LmZyb21TdHJpbmcocGFnZSQxKSkpO1xuICAgIGNhc2UgNCA6XG4gICAgICAgIHZhciB5ZWFyID0gc2VnbWVudHNbMF07XG4gICAgICAgIHZhciBtb250aCA9IHNlZ21lbnRzWzFdO1xuICAgICAgICB2YXIgZGF5ID0gc2VnbWVudHNbMl07XG4gICAgICAgIHZhciBzbHVnJDIgPSBzZWdtZW50c1szXTtcbiAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogRW50cnkgKi9CbG9jay5fXygyLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHllYXIgKi9wYXJhbVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbW9udGggKi9wYXJhbVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZGF5ICovcGFyYW1bMl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHNsdWcgKi9zbHVnJDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcmFtWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9udGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX09wdGlvbi5maWx0ZXIoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5ID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXkgPD0gMzE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKShSZWx1ZGVfSW50LmZyb21TdHJpbmcoZGF5KSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uICh5ZWFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9PcHRpb24uZmlsdGVyKChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vbnRoID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9udGggPD0gMTI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkoUmVsdWRlX0ludC5mcm9tU3RyaW5nKG1vbnRoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSW50LmZyb21TdHJpbmcoeWVhcikpKSk7XG4gICAgXG4gIH1cbn1cblxuZnVuY3Rpb24gYnVpbGQocm91dGUpIHtcbiAgaWYgKHR5cGVvZiByb3V0ZSA9PT0gXCJudW1iZXJcIikge1xuICAgIHJldHVybiBcIi9hYm91dC9cIjtcbiAgfVxuICBzd2l0Y2ggKHJvdXRlLnRhZyB8IDApIHtcbiAgICBjYXNlIC8qIEluZGV4ICovMCA6XG4gICAgICAgIHZhciBwYWdlID0gcm91dGVbLyogcGFnZSAqLzBdO1xuICAgICAgICBpZiAocGFnZSAhPT0gMSkge1xuICAgICAgICAgIHJldHVybiBcIi9cIiArIChTdHJpbmcocGFnZSkgKyBcIi9cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFwiL1wiO1xuICAgICAgICB9XG4gICAgY2FzZSAvKiBUYWdTZWFyY2ggKi8xIDpcbiAgICAgICAgdmFyIHBhZ2UkMSA9IHJvdXRlWy8qIHBhZ2UgKi8xXTtcbiAgICAgICAgdmFyIHNsdWcgPSByb3V0ZVsvKiBzbHVnICovMF07XG4gICAgICAgIGlmIChwYWdlJDEgIT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gXCIvdGFnL1wiICsgKFN0cmluZyhzbHVnKSArIChcIi9cIiArIChTdHJpbmcocGFnZSQxKSArIFwiL1wiKSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcIi90YWcvXCIgKyAoU3RyaW5nKHNsdWcpICsgXCIvXCIpO1xuICAgICAgICB9XG4gICAgY2FzZSAvKiBFbnRyeSAqLzIgOlxuICAgICAgICB2YXIgbW9udGggPSBSZWx1ZGVfU3RyaW5nLnBhZFN0YXJ0KDIsIFwiMFwiLCBSZWx1ZGVfSW50LnRvU3RyaW5nKHJvdXRlWy8qIG1vbnRoICovMV0pKTtcbiAgICAgICAgdmFyIGRheSA9IFJlbHVkZV9TdHJpbmcucGFkU3RhcnQoMiwgXCIwXCIsIFJlbHVkZV9JbnQudG9TdHJpbmcocm91dGVbLyogZGF5ICovMl0pKTtcbiAgICAgICAgcmV0dXJuIFwiL1wiICsgKFN0cmluZyhyb3V0ZVsvKiB5ZWFyICovMF0pICsgKFwiL1wiICsgKFN0cmluZyhtb250aCkgKyAoXCIvXCIgKyAoU3RyaW5nKGRheSkgKyAoXCIvXCIgKyAoU3RyaW5nKHJvdXRlWy8qIHNsdWcgKi8zXSkgKyBcIi9cIikpKSkpKSk7XG4gICAgY2FzZSAvKiBVcGxvYWRzICovMyA6XG4gICAgICAgIHJldHVybiBcIi91cGxvYWRzL1wiICsgKFN0cmluZyhyb3V0ZVsvKiBmaWxlbmFtZSAqLzBdKSArIFwiXCIpO1xuICAgIFxuICB9XG59XG5cbmV4cG9ydCB7XG4gIHJvdXRlICxcbiAgYnVpbGQgLFxuICBcbn1cbi8qIFJlbHVkZV9JbnQgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcImJzLWNzcy1lbW90aW9uL3NyYy9Dc3MuanNcIjtcbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgU3R5bGUgZnJvbSBcIi4uL1N0eWxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFJvdXRlTGluayBmcm9tIFwiLi9Sb3V0ZUxpbmsuYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5cbnZhciBjbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLm1hcmdpblJpZ2h0KENzcy5hdXRvKSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgxLjEyNSkpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuY29sb3IoU3R5bGUubGlua0hvdmVyQ29sb3VyKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBOYXYkSG9tZUxpbmsoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlTGluay5tYWtlLCB7XG4gICAgICAgICAgICAgIHJvdXRlOiAvKiBJbmRleCAqL0Jsb2NrLl9fKDAsIFsvKiBwYWdlICovMV0pLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgICAgICB9KTtcbn1cblxudmFyIEhvbWVMaW5rID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgbWFrZTogTmF2JEhvbWVMaW5rXG59O1xuXG52YXIgY2xhc3NOYW1lJDEgPSBDdXJyeS5fMShDc3MubWVyZ2UsIC8qIDo6ICovW1xuICAgICAgU3R5bGUuY2VudHJlZENvbHVtbkNsYXNzTmFtZSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MuYWxpZ25JdGVtcyhDc3MuY2VudGVyKSxcbiAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIE5hdiRDb250YWluZXIoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMVxuICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xufVxuXG52YXIgQ29udGFpbmVyID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSQxLFxuICBtYWtlOiBOYXYkQ29udGFpbmVyXG59O1xuXG52YXIgY2xhc3NOYW1lJDIgPSBDdXJyeS5fMShDc3MubWVyZ2UsIC8qIDo6ICovW1xuICAgICAgU3R5bGUuc21hbGxDYXBzQ2xhc3NOYW1lLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIFN0eWxlLmJvdHRvbUJvcmRlckNsYXNzTmFtZSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBDc3MuanVzdGlmeUNvbnRlbnQoQ3NzLmNlbnRlciksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgQ3NzLm1hcmdpbkJvdHRvbShDc3MucmVtKDEuNSkpLFxuICAgICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICBDc3MucGFkZGluZyhDc3MucmVtKDAuNSkpLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBOYXYoUHJvcHMpIHtcbiAgdmFyIHNpdGVOYW1lID0gUHJvcHMuc2l0ZU5hbWU7XG4gIHZhciBhY3RpdmVSb3V0ZSA9IFByb3BzLmFjdGl2ZVJvdXRlO1xuICB2YXIgdG1wID0ge1xuICAgIHJvdXRlOiAvKiBBYm91dCAqLzAsXG4gICAgY2hpbGRyZW46IFwiQWJvdXRcIlxuICB9O1xuICBpZiAoYWN0aXZlUm91dGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRtcC5hY3RpdmVSb3V0ZSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYWN0aXZlUm91dGUpO1xuICB9XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibmF2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMlxuICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChOYXYkQ29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbjogbnVsbFxuICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2JEhvbWVMaW5rLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHNpdGVOYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlTGluay5tYWtlLCB0bXApKSk7XG59XG5cbnZhciBtYWtlID0gTmF2O1xuXG5leHBvcnQge1xuICBIb21lTGluayAsXG4gIENvbnRhaW5lciAsXG4gIGNsYXNzTmFtZSQyIGFzIGNsYXNzTmFtZSxcbiAgbWFrZSAsXG4gIFxufVxuLyogY2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgU3R5bGUgZnJvbSBcIi4uL1N0eWxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxudmFyIGNsYXNzTmFtZSA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmZsZXhHcm93KDEuMCksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3MuY2VudGVyKSxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIENzcy5tYXJnaW4yKENzcy56ZXJvLCBDc3MucmVtKDAuNSkpLFxuICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgIFN0eWxlLmRlc2t0b3BNZWRpYVF1ZXJ5KC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBDc3MubWFyZ2luKENzcy56ZXJvKSxcbiAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIENvbnRlbnQkQ29udGFpbmVyKFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBDb250YWluZXIgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICBtYWtlOiBDb250ZW50JENvbnRhaW5lclxufTtcblxudmFyIGNsYXNzTmFtZSQxID0gQ3VycnkuXzEoQ3NzLm1lcmdlLCAvKiA6OiAqL1tcbiAgICAgIFN0eWxlLmNlbnRyZWRDb2x1bW5DbGFzc05hbWUsXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLmZsZXhEaXJlY3Rpb24oQ3NzLmNvbHVtbiksXG4gICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgXSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBDb250ZW50JE1haW4oUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibWFpblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDFcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbn1cblxudmFyIE1haW4gPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDEsXG4gIG1ha2U6IENvbnRlbnQkTWFpblxufTtcblxuZnVuY3Rpb24gQ29udGVudChQcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBQcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGVudCRDb250YWluZXIsIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGVudCRNYWluLCB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xufVxuXG52YXIgbWFrZSA9IENvbnRlbnQ7XG5cbmV4cG9ydCB7XG4gIENvbnRhaW5lciAsXG4gIE1haW4gLFxuICBtYWtlICxcbiAgXG59XG4vKiBjbGFzc05hbWUgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIlxuXG5cbnZhciB1bmRlZmluZWRIZWFkZXIgPSAvKiBhcnJheSAqL1tdO1xuXG5mdW5jdGlvbiBzb21lKHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBibG9jayA9IC8qIHR1cGxlICovW1xuICAgICAgdW5kZWZpbmVkSGVhZGVyLFxuICAgICAgMFxuICAgIF07XG4gICAgYmxvY2sudGFnID0gMjU2O1xuICAgIHJldHVybiBibG9jaztcbiAgfSBlbHNlIGlmICh4ICE9PSBudWxsICYmIHhbMF0gPT09IHVuZGVmaW5lZEhlYWRlcikge1xuICAgIHZhciBuaWQgPSB4WzFdICsgMSB8IDA7XG4gICAgdmFyIGJsb2NrJDEgPSAvKiB0dXBsZSAqL1tcbiAgICAgIHVuZGVmaW5lZEhlYWRlcixcbiAgICAgIG5pZFxuICAgIF07XG4gICAgYmxvY2skMS50YWcgPSAyNTY7XG4gICAgcmV0dXJuIGJsb2NrJDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVsbGFibGVfdG9fb3B0KHgpIHtcbiAgaWYgKHggPT09IG51bGwgfHwgeCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc29tZSh4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmRlZmluZWRfdG9fb3B0KHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvbWUoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbnVsbF90b19vcHQoeCkge1xuICBpZiAoeCA9PT0gbnVsbCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvbWUoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsRnJvbU9wdGlvbih4KSB7XG4gIGlmICh4ICE9PSBudWxsICYmIHhbMF0gPT09IHVuZGVmaW5lZEhlYWRlcikge1xuICAgIHZhciBkZXB0aCA9IHhbMV07XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICByZXR1cm4gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLyogdHVwbGUgKi9bXG4gICAgICAgICAgICAgIHVuZGVmaW5lZEhlYWRlcixcbiAgICAgICAgICAgICAgZGVwdGggLSAxIHwgMFxuICAgICAgICAgICAgXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHg7XG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uX2dldCh4KSB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWxGcm9tT3B0aW9uKHgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9wdGlvbl9nZXRfdW53cmFwKHgpIHtcbiAgaWYgKHggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbEZyb21PcHRpb24oeClbMV07XG4gIH1cbn1cblxuZXhwb3J0IHtcbiAgbnVsbGFibGVfdG9fb3B0ICxcbiAgdW5kZWZpbmVkX3RvX29wdCAsXG4gIG51bGxfdG9fb3B0ICxcbiAgdmFsRnJvbU9wdGlvbiAsXG4gIHNvbWUgLFxuICBvcHRpb25fZ2V0ICxcbiAgb3B0aW9uX2dldF91bndyYXAgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCJcblxuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcIi4vY2FtbF9vcHRpb24uanNcIjtcblxuZnVuY3Rpb24gYmluZCh4LCBmKSB7XG4gIGlmICh4ID09IG51bGwpIHtcbiAgICByZXR1cm4geDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZih4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpdGVyKHgsIGYpIHtcbiAgaWYgKHggPT0gbnVsbCkge1xuICAgIHJldHVybiAvKiAoKSAqLzA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGYoeCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZnJvbU9wdGlvbih4KSB7XG4gIGlmICh4ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gQ2FtbF9vcHRpb24udmFsRnJvbU9wdGlvbih4KTtcbiAgfVxuICBcbn1cblxudmFyIGZyb21fb3B0ID0gZnJvbU9wdGlvbjtcblxuZXhwb3J0IHtcbiAgYmluZCAsXG4gIGl0ZXIgLFxuICBmcm9tT3B0aW9uICxcbiAgZnJvbV9vcHQgLFxuICBcbn1cbi8qIE5vIHNpZGUgZWZmZWN0ICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgU2x1Z2lmeSBmcm9tIFwic2x1Z2lmeS1icy9zcmMvU2x1Z2lmeS5icy5qc1wiO1xuaW1wb3J0ICogYXMgQmVsdF9BcnJheSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9iZWx0X0FycmF5LmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3QgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuXG52YXIgcGFydGlhbF9hcmcgPSB0cnVlO1xuXG52YXIgcGFydGlhbF9hcmckMSA9IENhbWxfb3B0aW9uLnNvbWUoLzovKTtcblxudmFyIHBhcnRpYWxfYXJnJDIgPSBcIi1cIjtcblxuZnVuY3Rpb24gc2x1ZyhwYXJhbSkge1xuICByZXR1cm4gU2x1Z2lmeS5zbHVnaWZ5KHBhcnRpYWxfYXJnJDIsIHBhcnRpYWxfYXJnJDEsIHBhcnRpYWxfYXJnLCBwYXJhbSk7XG59XG5cbmZ1bmN0aW9uIHJhbmdlKHN0YXJ0LCBzdG9wLCBzdGVwT3B0LCBwYXJhbSkge1xuICB2YXIgc3RlcCA9IHN0ZXBPcHQgIT09IHVuZGVmaW5lZCA/IHN0ZXBPcHQgOiAxO1xuICByZXR1cm4gQmVsdF9BcnJheS5yYW5nZUJ5KHN0YXJ0LCBzdG9wLCBzdGVwKTtcbn1cblxudmFyIHJlYWN0TGlzdCA9IFJlbHVkZV9MaXN0LnRvQXJyYXk7XG5cbnZhciBwYXJ0aWFsX2FyZyQzID0gbnVsbDtcblxuZnVuY3Rpb24gcmVhY3RPcHRpb24ocGFyYW0pIHtcbiAgcmV0dXJuIFJlbHVkZV9PcHRpb24uZ2V0T3JFbHNlKHBhcnRpYWxfYXJnJDMsIHBhcmFtKTtcbn1cblxuZXhwb3J0IHtcbiAgc2x1ZyAsXG4gIHJhbmdlICxcbiAgcmVhY3RMaXN0ICxcbiAgcmVhY3RPcHRpb24gLFxuICBcbn1cbi8qIHBhcnRpYWxfYXJnIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgU2x1Z2lmeSBmcm9tIFwic2x1Z2lmeVwiO1xuaW1wb3J0ICogYXMgSnNfbnVsbF91bmRlZmluZWQgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfbnVsbF91bmRlZmluZWQuanNcIjtcblxuZnVuY3Rpb24gc2x1Z2lmeShyZXBsYWNlbWVudCwgcmVtb3ZlLCBsb3dlciwgc3RyKSB7XG4gIHJldHVybiBTbHVnaWZ5KHN0ciwge1xuICAgICAgICAgICAgICByZXBsYWNlbWVudDogSnNfbnVsbF91bmRlZmluZWQuZnJvbU9wdGlvbihyZXBsYWNlbWVudCksXG4gICAgICAgICAgICAgIHJlbW92ZTogSnNfbnVsbF91bmRlZmluZWQuZnJvbU9wdGlvbihyZW1vdmUpLFxuICAgICAgICAgICAgICBsb3dlcjogSnNfbnVsbF91bmRlZmluZWQuZnJvbU9wdGlvbihsb3dlcilcbiAgICAgICAgICAgIH0pO1xufVxuXG5leHBvcnQge1xuICBzbHVnaWZ5ICxcbiAgXG59XG4vKiBzbHVnaWZ5IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgJCREYXRlIGZyb20gXCIuL2JpbmRpbmdzL0RhdGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi9VdGlscy5icy5qc1wiO1xuXG5mdW5jdGlvbiB0b1JvdXRlKHBhZ2VEYXRhKSB7XG4gIHN3aXRjaCAocGFnZURhdGEudGFnIHwgMCkge1xuICAgIGNhc2UgLyogSW5kZXggKi8wIDpcbiAgICAgICAgcmV0dXJuIC8qIEluZGV4ICovQmxvY2suX18oMCwgWy8qIHBhZ2UgKi9wYWdlRGF0YVswXS5wYWdlXSk7XG4gICAgY2FzZSAvKiBUYWdTZWFyY2ggKi8xIDpcbiAgICAgICAgdmFyIG1hdGNoID0gcGFnZURhdGFbMF07XG4gICAgICAgIHJldHVybiAvKiBUYWdTZWFyY2ggKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgICAgICAvKiBzbHVnICovVXRpbHMuc2x1ZyhtYXRjaC50YWcpLFxuICAgICAgICAgICAgICAgICAgLyogcGFnZSAqL21hdGNoLnBhZ2VcbiAgICAgICAgICAgICAgICBdKTtcbiAgICBjYXNlIC8qIEFib3V0ICovMiA6XG4gICAgICAgIHJldHVybiAvKiBBYm91dCAqLzA7XG4gICAgY2FzZSAvKiBFbnRyeSAqLzMgOlxuICAgICAgICB2YXIgbWF0Y2gkMSA9IHBhZ2VEYXRhWzBdO1xuICAgICAgICB2YXIgZGF0ZSA9IG1hdGNoJDEuZGF0ZTtcbiAgICAgICAgcmV0dXJuIC8qIEVudHJ5ICovQmxvY2suX18oMiwgW1xuICAgICAgICAgICAgICAgICAgLyogeWVhciAqL2RhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgIC8qIG1vbnRoICovJCREYXRlLmdldE1vbnRoKGRhdGUpLFxuICAgICAgICAgICAgICAgICAgLyogZGF5ICovZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICAgICAgICAvKiBzbHVnICovVXRpbHMuc2x1ZyhtYXRjaCQxLnRpdGxlKVxuICAgICAgICAgICAgICAgIF0pO1xuICAgIFxuICB9XG59XG5cbmV4cG9ydCB7XG4gIHRvUm91dGUgLFxuICBcbn1cbi8qIFV0aWxzIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgU3R5bGUgZnJvbSBcIi4uL1N0eWxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gSGVhZGluZyhQcm9wcykge1xuICB2YXIgbGV2ZWxPcHQgPSBQcm9wcy5sZXZlbDtcbiAgdmFyIGNsYXNzTmFtZSA9IFByb3BzLmNsYXNzTmFtZTtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHZhciBsZXZlbCA9IGxldmVsT3B0ICE9PSB1bmRlZmluZWQgPyBsZXZlbE9wdCA6IDE7XG4gIHZhciBjbGFzc05hbWUkMSA9IFN0eWxlLmNvbWJpbmVDbGFzc05hbWVzKC8qIDo6ICovW1xuICAgICAgICBTdHlsZS5zbWFsbENhcHNDbGFzc05hbWUsXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXSk7XG4gIHZhciB0YWcgPSBcImhcIiArIFN0cmluZyhsZXZlbCA+IDYgPyA2IDogbGV2ZWwpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0YWcsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMVxuICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xufVxuXG52YXIgbWFrZSA9IEhlYWRpbmc7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBcbn1cbi8qIFN0eWxlIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbnZhciBjbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmJhY2tncm91bmRDb2xvcihDc3MuYmxhY2spLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5jb2xvcihDc3MuYmxhY2spLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MuaG92ZXIoLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLmNvbG9yKENzcy53aGl0ZSksXG4gICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIFNwb2lsZXIoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBtYWtlID0gU3BvaWxlcjtcblxuZXhwb3J0IHtcbiAgY2xhc3NOYW1lICxcbiAgbWFrZSAsXG4gIFxufVxuLyogY2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBMaW5rIGZyb20gXCIuL0xpbmsuYnMuanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBTdHlsZSBmcm9tIFwiLi4vU3R5bGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgSGVhZGluZyBmcm9tIFwiLi9IZWFkaW5nLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBTcG9pbGVyIGZyb20gXCIuL1Nwb2lsZXIuYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfb3B0aW9uIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfb3B0aW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlYWN0TWFya2Rvd24gZnJvbSBcInJlYWN0LW1hcmtkb3duXCI7XG5pbXBvcnQgKiBhcyBIaWdobGlnaHRlZENvZGUgZnJvbSBcIi4vSGlnaGxpZ2h0ZWRDb2RlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIE1hcmtkb3duJEhUTUxFbGVtZW50KFByb3BzKSB7XG4gIHZhciB0YWcgPSBQcm9wcy50YWc7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICBpZiAodGFnID09PSBcInNwb2lsZXJcIikge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFNwb2lsZXIubWFrZSwge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgICAgICAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh0YWcsIHVuZGVmaW5lZCwgY2hpbGRyZW4pO1xuICB9XG59XG5cbnZhciAkJEhUTUxFbGVtZW50ID0ge1xuICBtYWtlOiBNYXJrZG93biRIVE1MRWxlbWVudFxufTtcblxudmFyIGNsYXNzTmFtZUgyID0gQ3VycnkuXzEoQ3NzLm1lcmdlLCAvKiA6OiAqL1tcbiAgICAgIFN0eWxlLmJvdHRvbUJvcmRlckNsYXNzTmFtZSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MubWFyZ2luNChDc3MucmVtKDEuNSksIENzcy56ZXJvLCBDc3MucmVtKDAuNiksIENzcy56ZXJvKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLmZvbnRTaXplKENzcy5yZW0oMS41KSksXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBDc3MuZmlyc3RDaGlsZCgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIENzcy5tYXJnaW5Ub3AoQ3NzLnplcm8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxudmFyIGNsYXNzTmFtZUgzID0gQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgIENzcy5tYXJnaW40KENzcy5yZW0oMS4yNSksIENzcy56ZXJvLCBDc3MucmVtKDAuNSksIENzcy56ZXJvKSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgxLjI1KSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBNYXJrZG93biRTdHlsZWRIZWFkaW5nKFByb3BzKSB7XG4gIHZhciBsZXZlbCA9IFByb3BzLmxldmVsO1xuICB2YXIgY2hpbGRyZW4gPSBQcm9wcy5jaGlsZHJlbjtcbiAgdmFyIGNsYXNzTmFtZSA9IGxldmVsICE9PSAyID8gKFxuICAgICAgbGV2ZWwgIT09IDMgPyB1bmRlZmluZWQgOiBjbGFzc05hbWVIM1xuICAgICkgOiBjbGFzc05hbWVIMjtcbiAgdmFyIHRtcCA9IHtcbiAgICBsZXZlbDogbGV2ZWwsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gIH07XG4gIGlmIChjbGFzc05hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRtcC5jbGFzc05hbWUgPSBDYW1sX29wdGlvbi52YWxGcm9tT3B0aW9uKGNsYXNzTmFtZSk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGluZy5tYWtlLCB0bXApO1xufVxuXG52YXIgU3R5bGVkSGVhZGluZyA9IHtcbiAgY2xhc3NOYW1lSDI6IGNsYXNzTmFtZUgyLFxuICBjbGFzc05hbWVIMzogY2xhc3NOYW1lSDMsXG4gIG1ha2U6IE1hcmtkb3duJFN0eWxlZEhlYWRpbmdcbn07XG5cbnZhciBjbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmZvbnRTaXplKENzcy5yZW0oMS4xKSksXG4gICAgICAvKiBbXSAqLzBcbiAgICBdKTtcblxuZnVuY3Rpb24gTWFya2Rvd24kU3R5bGVkQ29kZShQcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBQcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbn1cblxudmFyIFN0eWxlZENvZGUgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICBtYWtlOiBNYXJrZG93biRTdHlsZWRDb2RlXG59O1xuXG5mdW5jdGlvbiBNYXJrZG93bihQcm9wcykge1xuICB2YXIgcmVuZGVyUGFyYWdyYXBoID0gUHJvcHMucmVuZGVyUGFyYWdyYXBoO1xuICB2YXIgdGV4dCA9IFByb3BzLnRleHQ7XG4gIHZhciByZW5kZXJlcnMgPSB7XG4gICAgdmlydHVhbEh0bWw6IE1hcmtkb3duJEhUTUxFbGVtZW50LFxuICAgIGNvZGU6IChmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGlnaGxpZ2h0ZWRDb2RlLm1ha2UsIHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2U6IHByb3BzLmxhbmd1YWdlLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBwcm9wcy52YWx1ZVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICBoZWFkaW5nOiBNYXJrZG93biRTdHlsZWRIZWFkaW5nLFxuICAgIHBhcmFncmFwaDogUmVsdWRlX09wdGlvbi5nZXRPckVsc2UoKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIHVuZGVmaW5lZCwgcHJvcHMuY2hpbGRyZW4pO1xuICAgICAgICAgIH0pLCByZW5kZXJQYXJhZ3JhcGgpLFxuICAgIGlubGluZUNvZGU6IE1hcmtkb3duJFN0eWxlZENvZGUsXG4gICAgbGluazogKGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLm1ha2UsIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBwcm9wcy5ocmVmLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgfSlcbiAgfTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RNYXJrZG93biwge1xuICAgICAgICAgICAgICBzb3VyY2U6IHRleHQsXG4gICAgICAgICAgICAgIGVzY2FwZUh0bWw6IGZhbHNlLFxuICAgICAgICAgICAgICByZW5kZXJlcnM6IHJlbmRlcmVyc1xuICAgICAgICAgICAgfSk7XG59XG5cbnZhciBtYWtlID0gTWFya2Rvd247XG5cbmV4cG9ydCB7XG4gICQkSFRNTEVsZW1lbnQgLFxuICBTdHlsZWRIZWFkaW5nICxcbiAgU3R5bGVkQ29kZSAsXG4gIG1ha2UgLFxuICBcbn1cbi8qIGNsYXNzTmFtZUgyIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBNYXJrZG93biBmcm9tIFwiLi4vY29tcG9uZW50cy9NYXJrZG93bi5icy5qc1wiO1xuXG5mdW5jdGlvbiBBYm91dFBhZ2UoUHJvcHMpIHtcbiAgdmFyIHBhcmFtID0gUHJvcHMuZGF0YTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFya2Rvd24ubWFrZSwge1xuICAgICAgICAgICAgICB0ZXh0OiBwYXJhbS50ZXh0XG4gICAgICAgICAgICB9KTtcbn1cblxudmFyIG1ha2UgPSBBYm91dFBhZ2U7XG5cbmV4cG9ydCB7XG4gIG1ha2UgLFxuICBcbn1cbi8qIHJlYWN0IE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbnZhciBjbGFzc05hbWUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmZvbnRTaXplKENzcy5yZW0oMC44NzUpKSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MudXNlclNlbGVjdChDc3Mubm9uZSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBBcnJvdyhQcm9wcykge1xuICB2YXIgZGlyZWN0aW9uID0gUHJvcHMuZGlyZWN0aW9uO1xuICB2YXIgZG91YmxlT3B0ID0gUHJvcHMuZG91YmxlO1xuICB2YXIgJCRkb3VibGUgPSBkb3VibGVPcHQgIT09IHVuZGVmaW5lZCA/IGRvdWJsZU9wdCA6IGZhbHNlO1xuICB2YXIgY29udGVudCA9IGRpcmVjdGlvbiA/IChcbiAgICAgICQkZG91YmxlID8gXCLilrbilrZcIiA6IFwi4pa2XCJcbiAgICApIDogKFxuICAgICAgJCRkb3VibGUgPyBcIuKXgOKXgFwiIDogXCLil4BcIlxuICAgICk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgICAgICB9LCBjb250ZW50KTtcbn1cblxudmFyIG1ha2UgPSBBcnJvdztcblxuZXhwb3J0IHtcbiAgY2xhc3NOYW1lICxcbiAgbWFrZSAsXG4gIFxufVxuLyogY2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgU3R5bGUgZnJvbSBcIi4uL1N0eWxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFN0cmZ0aW1lIGZyb20gXCJzdHJmdGltZVwiO1xuXG52YXIgYmFzZUNsYXNzTmFtZSA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuZm9udFN0eWxlKENzcy5pdGFsaWMpLFxuICAgICAgLyogW10gKi8wXG4gICAgXSk7XG5cbmZ1bmN0aW9uIFRpbWVzdGFtcChQcm9wcykge1xuICB2YXIgY2xhc3NOYW1lID0gUHJvcHMuY2xhc3NOYW1lO1xuICB2YXIgZGF0ZSA9IFByb3BzLmRhdGU7XG4gIHZhciBpc28gPSBkYXRlLnRvSVNPU3RyaW5nKCk7XG4gIHZhciBmb3JtYXR0ZWQgPSBTdHJmdGltZShcIiVkLyVtLyVZICVIOiVNXCIsIGRhdGUpO1xuICB2YXIgY2xhc3NOYW1lJDEgPSBTdHlsZS5jb21iaW5lQ2xhc3NOYW1lcygvKiA6OiAqL1tcbiAgICAgICAgYmFzZUNsYXNzTmFtZSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICBdXG4gICAgICBdKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aW1lXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMSxcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IGlzb1xuICAgICAgICAgICAgfSwgZm9ybWF0dGVkKTtcbn1cblxudmFyIG1ha2UgPSBUaW1lc3RhbXA7XG5cbmV4cG9ydCB7XG4gIGJhc2VDbGFzc05hbWUgLFxuICBtYWtlICxcbiAgXG59XG4vKiBiYXNlQ2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyAkJERhdGUgZnJvbSBcIi4uLy4uL2JpbmRpbmdzL0RhdGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIEFycm93IGZyb20gXCIuLi9jb21wb25lbnRzL0Fycm93LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuaW1wb3J0ICogYXMgQ3VycnkgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY3VycnkuanNcIjtcbmltcG9ydCAqIGFzIFN0eWxlIGZyb20gXCIuLi9TdHlsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSBcIi4uLy4uL1V0aWxzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIEhlYWRpbmcgZnJvbSBcIi4uL2NvbXBvbmVudHMvSGVhZGluZy5icy5qc1wiO1xuaW1wb3J0ICogYXMgTWFya2Rvd24gZnJvbSBcIi4uL2NvbXBvbmVudHMvTWFya2Rvd24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJvdXRlTGluayBmcm9tIFwiLi4vY29tcG9uZW50cy9Sb3V0ZUxpbmsuYnMuanNcIjtcbmltcG9ydCAqIGFzIFRpbWVzdGFtcCBmcm9tIFwiLi4vY29tcG9uZW50cy9UaW1lc3RhbXAuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9MaXN0IGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9MaXN0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcblxudmFyIGNsYXNzTmFtZSA9IEN1cnJ5Ll8xKENzcy5tZXJnZSwgLyogOjogKi9bXG4gICAgICBTdHlsZS5ib3R0b21Cb3JkZXJDbGFzc05hbWUsXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLm1hcmdpbkJvdHRvbShDc3MucmVtKDEuNikpLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBDc3MucGFkZGluZ0JvdHRvbShDc3MucmVtKDAuMykpLFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIEVudHJ5UGFnZSRIZWFkZXIoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaGVhZGVyXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbn1cblxudmFyIEhlYWRlciA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gIG1ha2U6IEVudHJ5UGFnZSRIZWFkZXJcbn07XG5cbnZhciBjbGFzc05hbWUkMSA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgxLjc1KSksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLm1hcmdpbkJvdHRvbShDc3MucmVtKDEuMCkpLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cnlQYWdlJFN0eWxlZEhlYWRpbmcoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEhlYWRpbmcubWFrZSwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSQxLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgICAgIH0pO1xufVxuXG52YXIgU3R5bGVkSGVhZGluZyA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMSxcbiAgbWFrZTogRW50cnlQYWdlJFN0eWxlZEhlYWRpbmdcbn07XG5cbnZhciBjbGFzc05hbWUkMiA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuaW5saW5lQmxvY2spLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5mb250U3R5bGUoQ3NzLml0YWxpYyksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIENzcy5tYXJnaW4yKENzcy56ZXJvLCBDc3MucmVtKDAuMykpLFxuICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgQ3NzLmZpcnN0T2ZUeXBlKC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgQ3NzLm1hcmdpbkxlZnQoQ3NzLnplcm8pLFxuICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cnlQYWdlJFRhZ0l0ZW0oUHJvcHMpIHtcbiAgdmFyIHRhZyA9IFByb3BzLnRhZztcbiAgdmFyIHJvdXRlXzAwMCA9IC8qIHNsdWcgKi9VdGlscy5zbHVnKHRhZyk7XG4gIHZhciByb3V0ZSA9IC8qIFRhZ1NlYXJjaCAqL0Jsb2NrLl9fKDEsIFtcbiAgICAgIHJvdXRlXzAwMCxcbiAgICAgIC8qIHBhZ2UgKi8xXG4gICAgXSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwibGlcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSQyXG4gICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlTGluay5tYWtlLCB7XG4gICAgICAgICAgICAgICAgICByb3V0ZTogcm91dGUsXG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGFnXG4gICAgICAgICAgICAgICAgfSkpO1xufVxuXG52YXIgVGFnSXRlbSA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMixcbiAgbWFrZTogRW50cnlQYWdlJFRhZ0l0ZW1cbn07XG5cbnZhciBjbGFzc05hbWUkMyA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3NzLmZsZXhXcmFwKENzcy53cmFwKSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgQ3NzLm1hcmdpbihDc3MuemVybyksXG4gICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICBDc3MucGFkZGluZyhDc3MuemVybyksXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdXG4gICAgICAgIF1cbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cnlQYWdlJFRhZ0xpc3QoUHJvcHMpIHtcbiAgdmFyIHRhZ3MgPSBQcm9wcy50YWdzO1xuICB2YXIgdGFncyQxID0gUmVsdWRlX0xpc3QubWFwKChmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyeVBhZ2UkVGFnSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHRhZ1xuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pKSh0YWdzKTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDNcbiAgICAgICAgICAgIH0sIFV0aWxzLnJlYWN0TGlzdCh0YWdzJDEpKTtcbn1cblxudmFyIFRhZ0xpc3QgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDMsXG4gIG1ha2U6IEVudHJ5UGFnZSRUYWdMaXN0XG59O1xuXG52YXIgY2xhc3NOYW1lJDQgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmJsb2NrKSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MubWFyZ2luQm90dG9tKENzcy5yZW0oMC4zKSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBFbnRyeVBhZ2UkU3R5bGVkVGltZXN0YW1wKFByb3BzKSB7XG4gIHZhciBkYXRlID0gUHJvcHMuZGF0ZTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGltZXN0YW1wLm1ha2UsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkNCxcbiAgICAgICAgICAgICAgZGF0ZTogZGF0ZVxuICAgICAgICAgICAgfSk7XG59XG5cbnZhciBTdHlsZWRUaW1lc3RhbXAgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDQsXG4gIG1ha2U6IEVudHJ5UGFnZSRTdHlsZWRUaW1lc3RhbXBcbn07XG5cbnZhciBjbGFzc05hbWUkNSA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MubWFyZ2luMihDc3MuemVybywgQ3NzLnJlbSgwLjUpKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF0pO1xuXG5mdW5jdGlvbiBFbnRyeVBhZ2UkTmF2aWdhdGlvbkxpbmsoUHJvcHMpIHtcbiAgdmFyIHRpdGxlID0gUHJvcHMudGl0bGU7XG4gIHZhciBkYXRlID0gUHJvcHMuZGF0ZTtcbiAgdmFyIHJvdXRlXzAwMCA9IC8qIHllYXIgKi9kYXRlLmdldEZ1bGxZZWFyKCk7XG4gIHZhciByb3V0ZV8wMDEgPSAvKiBtb250aCAqLyQkRGF0ZS5nZXRNb250aChkYXRlKTtcbiAgdmFyIHJvdXRlXzAwMiA9IC8qIGRheSAqL2RhdGUuZ2V0RGF0ZSgpO1xuICB2YXIgcm91dGVfMDAzID0gLyogc2x1ZyAqL1V0aWxzLnNsdWcodGl0bGUpO1xuICB2YXIgcm91dGUgPSAvKiBFbnRyeSAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgIHJvdXRlXzAwMCxcbiAgICAgIHJvdXRlXzAwMSxcbiAgICAgIHJvdXRlXzAwMixcbiAgICAgIHJvdXRlXzAwM1xuICAgIF0pO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUxpbmsubWFrZSwge1xuICAgICAgICAgICAgICByb3V0ZTogcm91dGUsXG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDUsXG4gICAgICAgICAgICAgIGNoaWxkcmVuOiB0aXRsZVxuICAgICAgICAgICAgfSk7XG59XG5cbnZhciBOYXZpZ2F0aW9uTGluayA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUkNSxcbiAgbWFrZTogRW50cnlQYWdlJE5hdmlnYXRpb25MaW5rXG59O1xuXG52YXIgY2xhc3NOYW1lJDYgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5hbGlnbkl0ZW1zKENzcy5jZW50ZXIpLFxuICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICBDc3MubWFyZ2luMihDc3MucmVtKDEuMCksIENzcy56ZXJvKSxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIFN0eWxlLmRlc2t0b3BNZWRpYVF1ZXJ5KC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgQ3NzLm1hcmdpbihDc3MuemVybyksXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgIF1cbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBFbnRyeVBhZ2UkTmF2aWdhdGlvbkxpbmtDb250YWluZXIoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkNlxuICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xufVxuXG52YXIgTmF2aWdhdGlvbkxpbmtDb250YWluZXIgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDYsXG4gIG1ha2U6IEVudHJ5UGFnZSROYXZpZ2F0aW9uTGlua0NvbnRhaW5lclxufTtcblxudmFyIGNsYXNzTmFtZSQ3ID0gQ3VycnkuXzEoQ3NzLm1lcmdlLCAvKiA6OiAqL1tcbiAgICAgIFN0eWxlLnNtYWxsQ2Fwc0NsYXNzTmFtZSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MuZGlzcGxheShDc3MuZmxleEJveCksXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy5mbGV4RGlyZWN0aW9uKENzcy5jb2x1bW5SZXZlcnNlKSxcbiAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgIENzcy5qdXN0aWZ5Q29udGVudChDc3Muc3BhY2VCZXR3ZWVuKSxcbiAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICBDc3MuYWxpZ25JdGVtcyhDc3MuY2VudGVyKSxcbiAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgQ3NzLm1hcmdpbjIoQ3NzLnJlbSgxLjApLCBDc3MuemVybyksXG4gICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgxLjEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBTdHlsZS5kZXNrdG9wTWVkaWFRdWVyeSgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3NzLmZsZXhEaXJlY3Rpb24oQ3NzLnJvdyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENzcy5tYXJnaW40KENzcy5yZW0oMi4wKSwgQ3NzLnplcm8sIENzcy5yZW0oMy4wKSwgQ3NzLnplcm8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIEVudHJ5UGFnZSROYXZpZ2F0aW9uKFByb3BzKSB7XG4gIHZhciBwcmV2aW91cyA9IFByb3BzLnByZXZpb3VzO1xuICB2YXIgbmV4dCA9IFByb3BzLm5leHQ7XG4gIHZhciBwcmV2aW91c0xpbmsgPSBSZWx1ZGVfT3B0aW9uLmdldE9yRWxzZShSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCksIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cnlQYWdlJE5hdmlnYXRpb25MaW5rQ29udGFpbmVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KEFycm93Lm1ha2UsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogLyogTGVmdCAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyeVBhZ2UkTmF2aWdhdGlvbkxpbmssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBwYXJhbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHBhcmFtLmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KSwgcHJldmlvdXMpKTtcbiAgdmFyIG5leHRMaW5rID0gUmVsdWRlX09wdGlvbi5nZXRPckVsc2UoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB1bmRlZmluZWQpLCBSZWx1ZGVfT3B0aW9uLm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJ5UGFnZSROYXZpZ2F0aW9uTGlua0NvbnRhaW5lciwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyeVBhZ2UkTmF2aWdhdGlvbkxpbmssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBwYXJhbS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IHBhcmFtLmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChBcnJvdy5tYWtlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IC8qIFJpZ2h0ICovMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pLCBuZXh0KSk7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9vdGVyXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkN1xuICAgICAgICAgICAgfSwgcHJldmlvdXNMaW5rLCBuZXh0TGluayk7XG59XG5cbnZhciBOYXZpZ2F0aW9uID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSQ3LFxuICBtYWtlOiBFbnRyeVBhZ2UkTmF2aWdhdGlvblxufTtcblxudmFyIGNsYXNzTmFtZSQ4ID0gQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgIENzcy5sYXN0T2ZUeXBlKC8qIDo6ICovW1xuICAgICAgICAgICAgQ3NzLm1hcmdpbkJvdHRvbShDc3MuemVybyksXG4gICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICBdKSxcbiAgICAgIC8qIFtdICovMFxuICAgIF0pO1xuXG5mdW5jdGlvbiBFbnRyeVBhZ2UkU3R5bGVkUGFyYWdyYXBoKFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSQ4XG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBTdHlsZWRQYXJhZ3JhcGggPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDgsXG4gIG1ha2U6IEVudHJ5UGFnZSRTdHlsZWRQYXJhZ3JhcGhcbn07XG5cbnZhciBjbGFzc05hbWUkOSA9IEN1cnJ5Ll8xKENzcy5tZXJnZSwgLyogOjogKi9bXG4gICAgICBTdHlsZS5ib3R0b21Cb3JkZXJDbGFzc05hbWUsXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLnBhZGRpbmdCb3R0b20oQ3NzLnJlbSgyLjApKSxcbiAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIEVudHJ5UGFnZSRTdHlsZWRNYXJrZG93bihQcm9wcykge1xuICB2YXIgdGV4dCA9IFByb3BzLnRleHQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDlcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFya2Rvd24ubWFrZSwge1xuICAgICAgICAgICAgICAgICAgcmVuZGVyUGFyYWdyYXBoOiBFbnRyeVBhZ2UkU3R5bGVkUGFyYWdyYXBoLFxuICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dFxuICAgICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyIFN0eWxlZE1hcmtkb3duID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSQ5LFxuICBtYWtlOiBFbnRyeVBhZ2UkU3R5bGVkTWFya2Rvd25cbn07XG5cbmZ1bmN0aW9uIEVudHJ5UGFnZShQcm9wcykge1xuICB2YXIgcGFyYW0gPSBQcm9wcy5kYXRhO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFydGljbGVcIiwgdW5kZWZpbmVkLCBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJ5UGFnZSRIZWFkZXIsIHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBudWxsXG4gICAgICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyeVBhZ2UkU3R5bGVkSGVhZGluZywge1xuICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBwYXJhbS50aXRsZVxuICAgICAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyeVBhZ2UkU3R5bGVkVGltZXN0YW1wLCB7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0ZTogcGFyYW0uZGF0ZVxuICAgICAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyeVBhZ2UkVGFnTGlzdCwge1xuICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IHBhcmFtLnRhZ3NcbiAgICAgICAgICAgICAgICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJ5UGFnZSRTdHlsZWRNYXJrZG93biwge1xuICAgICAgICAgICAgICAgICAgdGV4dDogcGFyYW0udGV4dFxuICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJ5UGFnZSROYXZpZ2F0aW9uLCB7XG4gICAgICAgICAgICAgICAgICBwcmV2aW91czogcGFyYW0ucHJldmlvdXMsXG4gICAgICAgICAgICAgICAgICBuZXh0OiBwYXJhbS5uZXh0XG4gICAgICAgICAgICAgICAgfSkpO1xufVxuXG52YXIgbWFrZSA9IEVudHJ5UGFnZTtcblxuZXhwb3J0IHtcbiAgSGVhZGVyICxcbiAgU3R5bGVkSGVhZGluZyAsXG4gIFRhZ0l0ZW0gLFxuICBUYWdMaXN0ICxcbiAgU3R5bGVkVGltZXN0YW1wICxcbiAgTmF2aWdhdGlvbkxpbmsgLFxuICBOYXZpZ2F0aW9uTGlua0NvbnRhaW5lciAsXG4gIE5hdmlnYXRpb24gLFxuICBTdHlsZWRQYXJhZ3JhcGggLFxuICBTdHlsZWRNYXJrZG93biAsXG4gIG1ha2UgLFxuICBcbn1cbi8qIGNsYXNzTmFtZSBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiYnMtY3NzLWVtb3Rpb24vc3JjL0Nzcy5qc1wiO1xuaW1wb3J0ICogYXMgJCREYXRlIGZyb20gXCIuLi8uLi9iaW5kaW5ncy9EYXRlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBBcnJvdyBmcm9tIFwiLi9BcnJvdy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBTdHlsZSBmcm9tIFwiLi4vU3R5bGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLi8uLi9VdGlscy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBIZWFkaW5nIGZyb20gXCIuL0hlYWRpbmcuYnMuanNcIjtcbmltcG9ydCAqIGFzIEpzX21hdGggZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvanNfbWF0aC5qc1wiO1xuaW1wb3J0ICogYXMgTWFya2Rvd24gZnJvbSBcIi4vTWFya2Rvd24uYnMuanNcIjtcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tIFwiLi4vLi4vQ29uc3RhbnRzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSb3V0ZUxpbmsgZnJvbSBcIi4vUm91dGVMaW5rLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBUaW1lc3RhbXAgZnJvbSBcIi4vVGltZXN0YW1wLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX29wdGlvbiBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jYW1sX29wdGlvbi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3QgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9BcnJheSBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfQXJyYXkuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9GbG9hdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfRmxvYXQuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuXG52YXIgY2xhc3NOYW1lID0gQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgIENzcy5mb250U2l6ZShDc3MucmVtKDEuNSkpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5tYXJnaW5Cb3R0b20oQ3NzLnplcm8pLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cmllc0xpc3QkU3R5bGVkSGVhZGluZyhQcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBQcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGluZy5tYWtlLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgICAgIH0pO1xufVxuXG52YXIgU3R5bGVkSGVhZGluZyA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gIG1ha2U6IEVudHJpZXNMaXN0JFN0eWxlZEhlYWRpbmdcbn07XG5cbnZhciBjbGFzc05hbWUkMSA9IEN1cnJ5Ll8xKENzcy5tZXJnZSwgLyogOjogKi9bXG4gICAgICBTdHlsZS5ib3R0b21Cb3JkZXJDbGFzc05hbWUsXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLnBhZGRpbmdCb3R0b20oQ3NzLnJlbSgxLjYpKSxcbiAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgQ3NzLm1hcmdpbjIoQ3NzLnJlbSgwLjUpLCBDc3MuemVybyksXG4gICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICBTdHlsZS5kZXNrdG9wTWVkaWFRdWVyeSgvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgICAgIENzcy5tYXJnaW4yKENzcy5yZW0oMC44KSwgQ3NzLnplcm8pLFxuICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICAgICAgQ3NzLmZpcnN0T2ZUeXBlKC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICBDc3MubWFyZ2luVG9wKENzcy56ZXJvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgQ3NzLmxhc3RPZlR5cGUoLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3NzLm1hcmdpbkJvdHRvbShDc3MuemVybyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogW10gKi8wXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgLyogW10gKi8wXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIEVudHJpZXNMaXN0JEFydGljbGUoUHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYXJ0aWNsZVwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDFcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbn1cblxudmFyIEFydGljbGUgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDEsXG4gIG1ha2U6IEVudHJpZXNMaXN0JEFydGljbGVcbn07XG5cbnZhciBjbGFzc05hbWUkMiA9IEN1cnJ5Ll8xKENzcy5zdHlsZSwgLyogOjogKi9bXG4gICAgICBDc3MubWFyZ2luQm90dG9tKENzcy5yZW0oMS4wKSksXG4gICAgICAvKiBbXSAqLzBcbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cmllc0xpc3QkSGVhZGVyKFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImhlYWRlclwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDJcbiAgICAgICAgICAgIH0sIGNoaWxkcmVuKTtcbn1cblxudmFyIEhlYWRlciA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUkMixcbiAgbWFrZTogRW50cmllc0xpc3QkSGVhZGVyXG59O1xuXG52YXIgY2xhc3NOYW1lJDMgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgLyogOjogKi9bXG4gICAgICAgIENzcy5tYXJnaW4yKENzcy5hdXRvLCBDc3MucmVtKDAuMzc1KSksXG4gICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgIFN0eWxlLmRlc2t0b3BNZWRpYVF1ZXJ5KC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy5tYXJnaW4yKENzcy5hdXRvLCBDc3MucmVtKDAuNSkpLFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgXVxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBFbnRyaWVzTGlzdCRQYWdlSXRlbShQcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBQcm9wcy5jaGlsZHJlbjtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUkM1xuICAgICAgICAgICAgfSwgY2hpbGRyZW4pO1xufVxuXG52YXIgUGFnZUl0ZW0gPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDMsXG4gIG1ha2U6IEVudHJpZXNMaXN0JFBhZ2VJdGVtXG59O1xuXG5mdW5jdGlvbiBFbnRyaWVzTGlzdCRQYWdlTGluayhQcm9wcykge1xuICB2YXIgYnVpbGRQYWdlUm91dGUgPSBQcm9wcy5idWlsZFBhZ2VSb3V0ZTtcbiAgdmFyIGFjdGl2ZVJvdXRlID0gUHJvcHMuYWN0aXZlUm91dGU7XG4gIHZhciBwYWdlID0gUHJvcHMucGFnZTtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHZhciB0bXAgPSB7XG4gICAgcm91dGU6IEN1cnJ5Ll8xKGJ1aWxkUGFnZVJvdXRlLCBwYWdlKSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSQzLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9O1xuICBpZiAoYWN0aXZlUm91dGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHRtcC5hY3RpdmVSb3V0ZSA9IENhbWxfb3B0aW9uLnZhbEZyb21PcHRpb24oYWN0aXZlUm91dGUpO1xuICB9XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlTGluay5tYWtlLCB0bXApO1xufVxuXG52YXIgUGFnZUxpbmsgPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDMsXG4gIG1ha2U6IEVudHJpZXNMaXN0JFBhZ2VMaW5rXG59O1xuXG5mdW5jdGlvbiBFbnRyaWVzTGlzdCRQcmV2aW91c1BhZ2VMaW5rcyhQcm9wcykge1xuICB2YXIgYnVpbGRQYWdlUm91dGUgPSBQcm9wcy5idWlsZFBhZ2VSb3V0ZTtcbiAgdmFyIGFjdGl2ZVJvdXRlID0gUHJvcHMuYWN0aXZlUm91dGU7XG4gIHZhciBwYWdlID0gUHJvcHMucGFnZTtcbiAgdmFyIGZpcnN0QXJyb3cgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEFycm93Lm1ha2UsIHtcbiAgICAgICAgZGlyZWN0aW9uOiAvKiBMZWZ0ICovMCxcbiAgICAgICAgZG91YmxlOiB0cnVlXG4gICAgICB9KTtcbiAgdmFyIHByZXZpb3VzQXJyb3cgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEFycm93Lm1ha2UsIHtcbiAgICAgICAgZGlyZWN0aW9uOiAvKiBMZWZ0ICovMFxuICAgICAgfSk7XG4gIGlmIChwYWdlID09PSAxKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIHVuZGVmaW5lZCwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyaWVzTGlzdCRQYWdlSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogZmlyc3RBcnJvd1xuICAgICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHByZXZpb3VzQXJyb3dcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgdW5kZWZpbmVkLCBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJpZXNMaXN0JFBhZ2VMaW5rLCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkUGFnZVJvdXRlOiBidWlsZFBhZ2VSb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUm91dGU6IGFjdGl2ZVJvdXRlLFxuICAgICAgICAgICAgICAgICAgICBwYWdlOiAxLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogZmlyc3RBcnJvd1xuICAgICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUxpbmssIHtcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRQYWdlUm91dGU6IGJ1aWxkUGFnZVJvdXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZTogYWN0aXZlUm91dGUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UgLSAxIHwgMCxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHByZXZpb3VzQXJyb3dcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgfVxufVxuXG52YXIgUHJldmlvdXNQYWdlTGlua3MgPSB7XG4gIG1ha2U6IEVudHJpZXNMaXN0JFByZXZpb3VzUGFnZUxpbmtzXG59O1xuXG5mdW5jdGlvbiBFbnRyaWVzTGlzdCROZXh0UGFnZUxpbmtzKFByb3BzKSB7XG4gIHZhciBidWlsZFBhZ2VSb3V0ZSA9IFByb3BzLmJ1aWxkUGFnZVJvdXRlO1xuICB2YXIgYWN0aXZlUm91dGUgPSBQcm9wcy5hY3RpdmVSb3V0ZTtcbiAgdmFyIHRvdGFsUGFnZXMgPSBQcm9wcy50b3RhbFBhZ2VzO1xuICB2YXIgcGFnZSA9IFByb3BzLnBhZ2U7XG4gIHZhciBuZXh0QXJyb3cgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEFycm93Lm1ha2UsIHtcbiAgICAgICAgZGlyZWN0aW9uOiAvKiBSaWdodCAqLzFcbiAgICAgIH0pO1xuICB2YXIgbGFzdEFycm93ID0gUmVhY3QuY3JlYXRlRWxlbWVudChBcnJvdy5tYWtlLCB7XG4gICAgICAgIGRpcmVjdGlvbjogLyogUmlnaHQgKi8xLFxuICAgICAgICBkb3VibGU6IHRydWVcbiAgICAgIH0pO1xuICBpZiAocGFnZSA9PT0gdG90YWxQYWdlcykge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCB1bmRlZmluZWQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IG5leHRBcnJvd1xuICAgICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGxhc3RBcnJvd1xuICAgICAgICAgICAgICAgICAgfSkpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCB1bmRlZmluZWQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUxpbmssIHtcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRQYWdlUm91dGU6IGJ1aWxkUGFnZVJvdXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZTogYWN0aXZlUm91dGUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2UgKyAxIHwgMCxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IG5leHRBcnJvd1xuICAgICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUxpbmssIHtcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRQYWdlUm91dGU6IGJ1aWxkUGFnZVJvdXRlLFxuICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZTogYWN0aXZlUm91dGUsXG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6IHRvdGFsUGFnZXMsXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBsYXN0QXJyb3dcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgfVxufVxuXG52YXIgTmV4dFBhZ2VMaW5rcyA9IHtcbiAgbWFrZTogRW50cmllc0xpc3QkTmV4dFBhZ2VMaW5rc1xufTtcblxuZnVuY3Rpb24gRW50cmllc0xpc3QkUGFnZU51bWJlckxpbmtzKFByb3BzKSB7XG4gIHZhciBidWlsZFBhZ2VSb3V0ZSA9IFByb3BzLmJ1aWxkUGFnZVJvdXRlO1xuICB2YXIgYWN0aXZlUm91dGUgPSBQcm9wcy5hY3RpdmVSb3V0ZTtcbiAgdmFyIHRvdGFsUGFnZXMgPSBQcm9wcy50b3RhbFBhZ2VzO1xuICB2YXIgcGFnZSA9IFByb3BzLnBhZ2U7XG4gIHZhciBwYWRkaW5nID0gQ29uc3RhbnRzLnBhZ2luYXRpb25TaXplIC8gMiB8IDA7XG4gIHZhciBzdGFydFBhZ2UgPSBwYWdlIC0gcGFkZGluZyB8IDA7XG4gIHZhciBlbmRQYWdlID0gcGFnZSArIHBhZGRpbmcgfCAwO1xuICBpZiAoc3RhcnRQYWdlIDwgMSAmJiBlbmRQYWdlID4gdG90YWxQYWdlcykge1xuICAgIHN0YXJ0UGFnZSA9IDE7XG4gICAgZW5kUGFnZSA9IHRvdGFsUGFnZXM7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRpZmZlcmVuY2UgPSAwO1xuICAgIGlmIChzdGFydFBhZ2UgPCAxKSB7XG4gICAgICBkaWZmZXJlbmNlID0gMSAtIHN0YXJ0UGFnZSB8IDA7XG4gICAgICBzdGFydFBhZ2UgPSBzdGFydFBhZ2UgKyBkaWZmZXJlbmNlIHwgMDtcbiAgICAgIGVuZFBhZ2UgPSBlbmRQYWdlICsgZGlmZmVyZW5jZSB8IDA7XG4gICAgfVxuICAgIGlmIChlbmRQYWdlID4gdG90YWxQYWdlcykge1xuICAgICAgZGlmZmVyZW5jZSA9IGVuZFBhZ2UgLSB0b3RhbFBhZ2VzIHwgMDtcbiAgICAgIGVuZFBhZ2UgPSBlbmRQYWdlIC0gZGlmZmVyZW5jZSB8IDA7XG4gICAgICBzdGFydFBhZ2UgPSBzdGFydFBhZ2UgLSBkaWZmZXJlbmNlIHwgMDtcbiAgICAgIHN0YXJ0UGFnZSA9IHN0YXJ0UGFnZSA8IDEgPyAxIDogc3RhcnRQYWdlO1xuICAgIH1cbiAgICBcbiAgfVxuICByZXR1cm4gVXRpbHMucmFuZ2Uoc3RhcnRQYWdlLCBlbmRQYWdlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCkubWFwKChmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgIGlmIChwID09PSBwYWdlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyaWVzTGlzdCRQYWdlSXRlbSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnZUxpbmssIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkUGFnZVJvdXRlOiBidWlsZFBhZ2VSb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpO1xufVxuXG52YXIgUGFnZU51bWJlckxpbmtzID0ge1xuICBtYWtlOiBFbnRyaWVzTGlzdCRQYWdlTnVtYmVyTGlua3Ncbn07XG5cbnZhciBjbGFzc05hbWUkNCA9IEN1cnJ5Ll8xKENzcy5tZXJnZSwgLyogOjogKi9bXG4gICAgICBTdHlsZS5zbWFsbENhcHNDbGFzc05hbWUsXG4gICAgICAvKiA6OiAqL1tcbiAgICAgICAgQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLmRpc3BsYXkoQ3NzLmZsZXhCb3gpLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgxLjEyNSkpLFxuICAgICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgICAgQ3NzLm1hcmdpbjIoQ3NzLnJlbSgyLjQpLCBDc3MuYXV0byksXG4gICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIF0pLFxuICAgICAgICAvKiBbXSAqLzBcbiAgICAgIF1cbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cmllc0xpc3QkUGFnaW5hdGlvbihQcm9wcykge1xuICB2YXIgYnVpbGRQYWdlUm91dGUgPSBQcm9wcy5idWlsZFBhZ2VSb3V0ZTtcbiAgdmFyIGFjdGl2ZVJvdXRlID0gUHJvcHMuYWN0aXZlUm91dGU7XG4gIHZhciB0b3RhbCA9IFByb3BzLnRvdGFsO1xuICB2YXIgcGFnZSA9IFByb3BzLnBhZ2U7XG4gIHZhciB0b3RhbFBhZ2VzID0gSnNfbWF0aC5jZWlsKFJlbHVkZV9GbG9hdC5mcm9tSW50KHRvdGFsKSAvIFJlbHVkZV9GbG9hdC5mcm9tSW50KENvbnN0YW50cy5lbnRyaWVzUGVyUGFnZSkpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lJDRcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUHJldmlvdXNQYWdlTGlua3MsIHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkUGFnZVJvdXRlOiBidWlsZFBhZ2VSb3V0ZSxcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZSxcbiAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChFbnRyaWVzTGlzdCRQYWdlTnVtYmVyTGlua3MsIHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkUGFnZVJvdXRlOiBidWlsZFBhZ2VSb3V0ZSxcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZSxcbiAgICAgICAgICAgICAgICAgIHRvdGFsUGFnZXM6IHRvdGFsUGFnZXMsXG4gICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlXG4gICAgICAgICAgICAgICAgfSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkTmV4dFBhZ2VMaW5rcywge1xuICAgICAgICAgICAgICAgICAgYnVpbGRQYWdlUm91dGU6IGJ1aWxkUGFnZVJvdXRlLFxuICAgICAgICAgICAgICAgICAgYWN0aXZlUm91dGU6IGFjdGl2ZVJvdXRlLFxuICAgICAgICAgICAgICAgICAgdG90YWxQYWdlczogdG90YWxQYWdlcyxcbiAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgICAgICAgICAgICB9KSk7XG59XG5cbnZhciBQYWdpbmF0aW9uID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSQ0LFxuICBtYWtlOiBFbnRyaWVzTGlzdCRQYWdpbmF0aW9uXG59O1xuXG52YXIgY2xhc3NOYW1lJDUgPSBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgQ3NzLm1hcmdpbkJvdHRvbShDc3MuemVybyksXG4gICAgICAvKiBbXSAqLzBcbiAgICBdKTtcblxuZnVuY3Rpb24gRW50cmllc0xpc3QkUGFyYWdyYXBoKFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcInBcIiwge1xuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSQ1XG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBQYXJhZ3JhcGggPSB7XG4gIGNsYXNzTmFtZTogY2xhc3NOYW1lJDUsXG4gIG1ha2U6IEVudHJpZXNMaXN0JFBhcmFncmFwaFxufTtcblxuZnVuY3Rpb24gRW50cmllc0xpc3QoUHJvcHMpIHtcbiAgdmFyIGJ1aWxkUGFnZVJvdXRlID0gUHJvcHMuYnVpbGRQYWdlUm91dGU7XG4gIHZhciBhY3RpdmVSb3V0ZSA9IFByb3BzLmFjdGl2ZVJvdXRlO1xuICB2YXIgcGFnZSA9IFByb3BzLnBhZ2U7XG4gIHZhciB0b3RhbCA9IFByb3BzLnRvdGFsO1xuICB2YXIgZW50cmllcyA9IFByb3BzLmVudHJpZXM7XG4gIHJldHVybiBVdGlscy5yZWFjdExpc3QoUmVsdWRlX0xpc3QuYXBwZW5kKFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkUGFnaW5hdGlvbiwge1xuICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkUGFnZVJvdXRlOiBidWlsZFBhZ2VSb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZTogYWN0aXZlUm91dGUsXG4gICAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRvdGFsLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9MaXN0Lm1hcCgoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gcGFyYW0udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBwYXJhbS5kYXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBwYXJhbS50aXRsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdXRlXzAwMCA9IC8qIHllYXIgKi9kYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3V0ZV8wMDEgPSAvKiBtb250aCAqLyQkRGF0ZS5nZXRNb250aChkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvdXRlXzAwMiA9IC8qIGRheSAqL2RhdGUuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm91dGVfMDAzID0gLyogc2x1ZyAqL1V0aWxzLnNsdWcodGl0bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm91dGUgPSAvKiBFbnRyeSAqL0Jsb2NrLl9fKDIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlXzAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlXzAwMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlXzAwMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdXRlXzAwM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlldyA9IFJlbHVkZV9PcHRpb24uZ2V0T3JFbHNlKHRleHQsIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmltID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDYW1sX29wdGlvbi5zb21lKHByaW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgQ3VycnkuXzIoUmVsdWRlX09wdGlvbi5mbGF0TWFwLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0FycmF5LmF0KDEsIHBhcmFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByaW07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBDYW1sX29wdGlvbi5udWxsX3RvX29wdCgvXiguKz8pXFxuXFxuLy5leGVjKHRleHQpKSkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJpZXNMaXN0JEFydGljbGUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogZGF0ZS50b0lTT1N0cmluZygpICsgdGl0bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkSGVhZGVyLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QkU3R5bGVkSGVhZGluZywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlTGluay5tYWtlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aXRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChUaW1lc3RhbXAubWFrZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiLCB1bmRlZmluZWQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFya2Rvd24ubWFrZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlclBhcmFncmFwaDogRW50cmllc0xpc3QkUGFyYWdyYXBoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHByZXZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKShlbnRyaWVzKSkpO1xufVxuXG52YXIgbWFrZSA9IEVudHJpZXNMaXN0O1xuXG5leHBvcnQge1xuICBTdHlsZWRIZWFkaW5nICxcbiAgQXJ0aWNsZSAsXG4gIEhlYWRlciAsXG4gIFBhZ2VJdGVtICxcbiAgUGFnZUxpbmsgLFxuICBQcmV2aW91c1BhZ2VMaW5rcyAsXG4gIE5leHRQYWdlTGlua3MgLFxuICBQYWdlTnVtYmVyTGlua3MgLFxuICBQYWdpbmF0aW9uICxcbiAgUGFyYWdyYXBoICxcbiAgbWFrZSAsXG4gIFxufVxuLyogY2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuXG52YXIgZW50cmllc1BlclBhZ2UgPSAxMDtcblxudmFyIHN0dWJMZW5ndGggPSAxMDA7XG5cbnZhciBwYWdpbmF0aW9uU2l6ZSA9IDU7XG5cbmV4cG9ydCB7XG4gIGVudHJpZXNQZXJQYWdlICxcbiAgc3R1Ykxlbmd0aCAsXG4gIHBhZ2luYXRpb25TaXplICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIEVudHJpZXNMaXN0IGZyb20gXCIuLi9jb21wb25lbnRzL0VudHJpZXNMaXN0LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFnZVJvdXRlKHBhZ2UpIHtcbiAgcmV0dXJuIC8qIEluZGV4ICovQmxvY2suX18oMCwgWy8qIHBhZ2UgKi9wYWdlXSk7XG59XG5cbmZ1bmN0aW9uIEluZGV4UGFnZShQcm9wcykge1xuICB2YXIgYWN0aXZlUm91dGUgPSBQcm9wcy5hY3RpdmVSb3V0ZTtcbiAgdmFyIHBhcmFtID0gUHJvcHMuZGF0YTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRW50cmllc0xpc3QubWFrZSwge1xuICAgICAgICAgICAgICBidWlsZFBhZ2VSb3V0ZTogYnVpbGRQYWdlUm91dGUsXG4gICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZSxcbiAgICAgICAgICAgICAgcGFnZTogcGFyYW0ucGFnZSxcbiAgICAgICAgICAgICAgdG90YWw6IHBhcmFtLnRvdGFsLFxuICAgICAgICAgICAgICBlbnRyaWVzOiBwYXJhbS5lbnRyaWVzXG4gICAgICAgICAgICB9KTtcbn1cblxudmFyIG1ha2UgPSBJbmRleFBhZ2U7XG5cbmV4cG9ydCB7XG4gIGJ1aWxkUGFnZVJvdXRlICxcbiAgbWFrZSAsXG4gIFxufVxuLyogcmVhY3QgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZnVuY3Rpb24gTm90Rm91bmRQYWdlKFByb3BzKSB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHVuZGVmaW5lZCwgXCJub3QgZm91bmRcIik7XG59XG5cbnZhciBtYWtlID0gTm90Rm91bmRQYWdlO1xuXG5leHBvcnQge1xuICBtYWtlICxcbiAgXG59XG4vKiByZWFjdCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiYnMtY3NzLWVtb3Rpb24vc3JjL0Nzcy5qc1wiO1xuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBTdHlsZSBmcm9tIFwiLi4vU3R5bGUuYnMuanNcIjtcbmltcG9ydCAqIGFzIFV0aWxzIGZyb20gXCIuLi8uLi9VdGlscy5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBFbnRyaWVzTGlzdCBmcm9tIFwiLi4vY29tcG9uZW50cy9FbnRyaWVzTGlzdC5icy5qc1wiO1xuXG52YXIgY2xhc3NOYW1lID0gQ3VycnkuXzEoQ3NzLm1lcmdlLCAvKiA6OiAqL1tcbiAgICAgIFN0eWxlLnNtYWxsQ2Fwc0NsYXNzTmFtZSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDdXJyeS5fMShDc3Muc3R5bGUsIC8qIDo6ICovW1xuICAgICAgICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgxLjI1KSksXG4gICAgICAgICAgICAgIC8qIDo6ICovW1xuICAgICAgICAgICAgICAgIENzcy5tYXJnaW5Cb3R0b20oQ3NzLnJlbSgxLjYpKSxcbiAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSksXG4gICAgICAgIC8qIFtdICovMFxuICAgICAgXVxuICAgIF0pO1xuXG5mdW5jdGlvbiBUYWdTZWFyY2hQYWdlJExhYmVsKFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBMYWJlbCA9IHtcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gIG1ha2U6IFRhZ1NlYXJjaFBhZ2UkTGFiZWxcbn07XG5cbmZ1bmN0aW9uIFRhZ1NlYXJjaFBhZ2UoUHJvcHMpIHtcbiAgdmFyIGFjdGl2ZVJvdXRlID0gUHJvcHMuYWN0aXZlUm91dGU7XG4gIHZhciBwYXJhbSA9IFByb3BzLmRhdGE7XG4gIHZhciB0b3RhbCA9IHBhcmFtLnRvdGFsO1xuICB2YXIgdGFnID0gcGFyYW0udGFnO1xuICB2YXIgYnVpbGRQYWdlUm91dGUgPSBmdW5jdGlvbiAocGFnZSkge1xuICAgIHJldHVybiAvKiBUYWdTZWFyY2ggKi9CbG9jay5fXygxLCBbXG4gICAgICAgICAgICAgIC8qIHNsdWcgKi9VdGlscy5zbHVnKHRhZyksXG4gICAgICAgICAgICAgIC8qIHBhZ2UgKi9wYWdlXG4gICAgICAgICAgICBdKTtcbiAgfTtcbiAgdmFyIHBsdXJhbCA9IHRvdGFsID09PSAxID8gXCJlbnRyeVwiIDogXCJlbnRyaWVzXCI7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCB1bmRlZmluZWQsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnU2VhcmNoUGFnZSRMYWJlbCwge1xuICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFwiXCIgKyAoU3RyaW5nKHRvdGFsKSArIChcIiBcIiArIChTdHJpbmcocGx1cmFsKSArIChcIiB0YWdnZWQgXFxcIlwiICsgKFN0cmluZyh0YWcpICsgXCJcXFwiXCIpKSkpKVxuICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJpZXNMaXN0Lm1ha2UsIHtcbiAgICAgICAgICAgICAgICAgIGJ1aWxkUGFnZVJvdXRlOiBidWlsZFBhZ2VSb3V0ZSxcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZSxcbiAgICAgICAgICAgICAgICAgIHBhZ2U6IHBhcmFtLnBhZ2UsXG4gICAgICAgICAgICAgICAgICB0b3RhbDogdG90YWwsXG4gICAgICAgICAgICAgICAgICBlbnRyaWVzOiBwYXJhbS5lbnRyaWVzXG4gICAgICAgICAgICAgICAgfSkpO1xufVxuXG52YXIgbWFrZSA9IFRhZ1NlYXJjaFBhZ2U7XG5cbmV4cG9ydCB7XG4gIExhYmVsICxcbiAgbWFrZSAsXG4gIFxufVxuLyogY2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCJicy1jc3MtZW1vdGlvbi9zcmMvQ3NzLmpzXCI7XG5pbXBvcnQgKiBhcyBOYXYgZnJvbSBcIi4vY29tcG9uZW50cy9OYXYuYnMuanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBTdHlsZSBmcm9tIFwiLi9TdHlsZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBDb250ZW50IGZyb20gXCIuL2NvbXBvbmVudHMvQ29udGVudC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUGFnZURhdGEgZnJvbSBcIi4uL1BhZ2VEYXRhLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBBYm91dFBhZ2UgZnJvbSBcIi4vcGFnZXMvQWJvdXRQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBFbnRyeVBhZ2UgZnJvbSBcIi4vcGFnZXMvRW50cnlQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBJbmRleFBhZ2UgZnJvbSBcIi4vcGFnZXMvSW5kZXhQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBOb3RGb3VuZFBhZ2UgZnJvbSBcIi4vcGFnZXMvTm90Rm91bmRQYWdlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfT3B0aW9uIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9PcHRpb24uYnMuanNcIjtcbmltcG9ydCAqIGFzIFRhZ1NlYXJjaFBhZ2UgZnJvbSBcIi4vcGFnZXMvVGFnU2VhcmNoUGFnZS5icy5qc1wiO1xuXG52YXIgY2xhc3NOYW1lID0gQ3VycnkuXzEoQ3NzLnN0eWxlLCAvKiA6OiAqL1tcbiAgICAgIENzcy5kaXNwbGF5KENzcy5mbGV4Qm94KSxcbiAgICAgIC8qIDo6ICovW1xuICAgICAgICBDc3MuZmxleERpcmVjdGlvbihDc3MuY29sdW1uKSxcbiAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgQ3NzLm1pbkhlaWdodChDc3MudmgoMTAwLjApKSxcbiAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgIENzcy5iYWNrZ3JvdW5kQ29sb3IoU3R5bGUuYmFja2dyb3VuZENvbG91ciksXG4gICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgQ3NzLmNvbG9yKFN0eWxlLnRleHRDb2xvdXIpLFxuICAgICAgICAgICAgICAvKiA6OiAqL1tcbiAgICAgICAgICAgICAgICBDc3MuZm9udFNpemUoQ3NzLnJlbSgwLjg3NSkpLFxuICAgICAgICAgICAgICAgIC8qIFtdICovMFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdXG4gICAgICAgICAgXVxuICAgICAgICBdXG4gICAgICBdXG4gICAgXSk7XG5cbmZ1bmN0aW9uIEFwcCRSb290KFByb3BzKSB7XG4gIHZhciBjaGlsZHJlbiA9IFByb3BzLmNoaWxkcmVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lXG4gICAgICAgICAgICB9LCBjaGlsZHJlbik7XG59XG5cbnZhciBSb290ID0ge1xuICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgbWFrZTogQXBwJFJvb3Rcbn07XG5cbmZ1bmN0aW9uIEFwcChQcm9wcykge1xuICB2YXIgc2l0ZU5hbWUgPSBQcm9wcy5zaXRlTmFtZTtcbiAgdmFyIHBhZ2VEYXRhID0gUHJvcHMucGFnZURhdGE7XG4gIHZhciBhY3RpdmVSb3V0ZSA9IFJlbHVkZV9PcHRpb24ubWFwKFBhZ2VEYXRhLnRvUm91dGUsIHBhZ2VEYXRhKTtcbiAgdmFyIHBhZ2U7XG4gIGlmIChwYWdlRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3dpdGNoIChwYWdlRGF0YS50YWcgfCAwKSB7XG4gICAgICBjYXNlIC8qIEluZGV4ICovMCA6XG4gICAgICAgICAgcGFnZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5kZXhQYWdlLm1ha2UsIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVSb3V0ZTogYWN0aXZlUm91dGUsXG4gICAgICAgICAgICAgICAgZGF0YTogcGFnZURhdGFbMF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIC8qIFRhZ1NlYXJjaCAqLzEgOlxuICAgICAgICAgIHBhZ2UgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFRhZ1NlYXJjaFBhZ2UubWFrZSwge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBwYWdlRGF0YVswXVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgLyogQWJvdXQgKi8yIDpcbiAgICAgICAgICBwYWdlID0gUmVhY3QuY3JlYXRlRWxlbWVudChBYm91dFBhZ2UubWFrZSwge1xuICAgICAgICAgICAgICAgIGRhdGE6IHBhZ2VEYXRhWzBdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAvKiBFbnRyeSAqLzMgOlxuICAgICAgICAgIHBhZ2UgPSBSZWFjdC5jcmVhdGVFbGVtZW50KEVudHJ5UGFnZS5tYWtlLCB7XG4gICAgICAgICAgICAgICAgZGF0YTogcGFnZURhdGFbMF1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGFnZSA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoTm90Rm91bmRQYWdlLm1ha2UsIHsgfSk7XG4gIH1cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwJFJvb3QsIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW46IG51bGxcbiAgICAgICAgICAgIH0sIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTmF2Lm1ha2UsIHtcbiAgICAgICAgICAgICAgICAgIHNpdGVOYW1lOiBzaXRlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVJvdXRlOiBhY3RpdmVSb3V0ZVxuICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRlbnQubWFrZSwge1xuICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHBhZ2VcbiAgICAgICAgICAgICAgICB9KSk7XG59XG5cbnZhciBtYWtlID0gQXBwO1xuXG5leHBvcnQge1xuICBSb290ICxcbiAgbWFrZSAsXG4gIFxufVxuLyogY2xhc3NOYW1lIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBCb290c3RyYXBSZWJvb3RTY3NzIGZyb20gXCJib290c3RyYXAvc2Nzcy9ib290c3RyYXAtcmVib290LnNjc3NcIjtcblxuZnVuY3Rpb24gUGFnZShQcm9wcykge1xuICB2YXIgdGl0bGUgPSBQcm9wcy50aXRsZTtcbiAgdmFyIGNzcyA9IFByb3BzLmNzcztcbiAgdmFyIHBhcmFtID0gUHJvcHMuZmF2aWNvbjtcbiAgdmFyIGNoaWxkcmVuID0gUHJvcHMuY2hpbGRyZW47XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaHRtbFwiLCB7XG4gICAgICAgICAgICAgIGxhbmc6IFwiZW5cIlxuICAgICAgICAgICAgfSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImhlYWRcIiwgdW5kZWZpbmVkLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwibWV0YVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhclNldDogXCJ1dGYtOFwiXG4gICAgICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwibWV0YVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgc2hyaW5rLXRvLWZpdD1ub1wiLFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidmlld3BvcnRcIlxuICAgICAgICAgICAgICAgICAgICB9KSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImxpbmtcIiwge1xuICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IHBhcmFtLnVyaSxcbiAgICAgICAgICAgICAgICAgICAgICByZWw6IFwiaWNvblwiLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHBhcmFtLm1pbWVUeXBlXG4gICAgICAgICAgICAgICAgICAgIH0pLCBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGl0bGVcIiwgdW5kZWZpbmVkLCB0aXRsZSksIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLCB1bmRlZmluZWQsIEJvb3RzdHJhcFJlYm9vdFNjc3MgKyBjc3MpKSwgUmVhY3QuY3JlYXRlRWxlbWVudChcImJvZHlcIiwge1xuICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHtcbiAgICAgICAgICAgICAgICAgICAgX19odG1sOiBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyIG1ha2UgPSBQYWdlO1xuXG5leHBvcnQge1xuICBtYWtlICxcbiAgXG59XG4vKiByZWFjdCBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5cbnZhciBub3RGb3VuZCA9IC8qIFBhZ2UgKi9CbG9jay5fXygwLCBbXG4gICAgLyogZGF0YSAqL3VuZGVmaW5lZCxcbiAgICAvKiBzdGF0dXMgKi80MDRcbiAgXSk7XG5cbmV4cG9ydCB7XG4gIG5vdEZvdW5kICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzICQkRGF0ZSBmcm9tIFwiLi4vYmluZGluZ3MvRGF0ZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi4vVXRpbHMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JbnQgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0ludC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3QgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuXG5mdW5jdGlvbiBkYXlUaW1lc3RhbXAoZGF0ZSkge1xuICByZXR1cm4gJCREYXRlLm1ha2UoZGF0ZS5nZXRGdWxsWWVhcigpLCAkJERhdGUuZ2V0TW9udGgoZGF0ZSksIGRhdGUuZ2V0RGF0ZSgpLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKS5nZXRUaW1lKCk7XG59XG5cbmZ1bmN0aW9uIG1ha2VSZXNwb25zZShlbnRyaWVzLCB5ZWFyLCBtb250aCwgZGF5LCBzbHVnKSB7XG4gIHZhciB0aW1lc3RhbXAgPSAkJERhdGUubWFrZSh5ZWFyLCBtb250aCwgZGF5LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKS5nZXRUaW1lKCk7XG4gIHJldHVybiBSZWx1ZGVfSU8ubWFwKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLyogUGFnZSAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZGF0YSAqLy8qIEVudHJ5ICovQmxvY2suX18oMywgW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGVudHJ5LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBlbnRyeS5kYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBlbnRyeS50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzOiBlbnRyeS50YWdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91czogUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZW50cnkudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBlbnRyeS5kYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9MaXN0LmZpbmQsIChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheVRpbWVzdGFtcChlbnRyeS5kYXRlKSA8IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfTGlzdC5zb3J0QnkoKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0ludC5jb21wYXJlLCBiLmRhdGUuZ2V0VGltZSgpLCBhLmRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZW50cmllcykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZW50cnkudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBlbnRyeS5kYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9MaXN0LmZpbmQsIChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRheVRpbWVzdGFtcChlbnRyeS5kYXRlKSA+IHRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfTGlzdC5zb3J0QnkoKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0ludC5jb21wYXJlLCBhLmRhdGUuZ2V0VGltZSgpLCBiLmRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZW50cmllcykpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdGF0dXMgKi8yMDBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLmZyb21PcHRpb24oKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9MaXN0LmZpbmQsIChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlUaW1lc3RhbXAoZW50cnkuZGF0ZSkgPT09IHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMuc2x1ZyhlbnRyeS50aXRsZSkgPT09IHNsdWc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSksIGVudHJpZXMpKSk7XG59XG5cbmV4cG9ydCB7XG4gIGRheVRpbWVzdGFtcCAsXG4gIG1ha2VSZXNwb25zZSAsXG4gIFxufVxuLyogVXRpbHMgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBGcyBmcm9tIFwiZnNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBOb2RlRlNfX0Vycm9yIGZyb20gXCIuL05vZGVGU19fRXJyb3IuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9Kc19Qcm9taXNlIGZyb20gXCJyZWx1ZGUvc3JjL2pzL1JlbHVkZV9Kc19Qcm9taXNlLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG1ha2UocGF0aCkge1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0lPLm1hcEVycm9yLCBOb2RlRlNfX0Vycm9yLmZyb21FeGNlcHRpb24sIFJlbHVkZV9Kc19Qcm9taXNlLnRvSU9MYXp5KChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbSA9IEZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLm9uKFwiZXJyb3JcIiwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0ub24oXCJyZWFkeVwiLCAoZnVuY3Rpb24gKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzEocmVzb2x2ZSwgc3RyZWFtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgIH0pKSk7XG59XG5cbnZhciAkJEVycm9yO1xuXG52YXIgVXRpbHM7XG5cbmV4cG9ydCB7XG4gICQkRXJyb3IgLFxuICBVdGlscyAsXG4gIG1ha2UgLFxuICBcbn1cbi8qIGZzIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCJcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcIi4uL1JlbHVkZV9JTy5icy5qc1wiO1xuXG5mdW5jdGlvbiB0b0lPKHByb21pc2UpIHtcbiAgcmV0dXJuIFJlbHVkZV9JTy5hc3luYygoZnVuY3Rpb24gKG9uRG9uZSkge1xuICAgICAgICAgICAgICAgIHByb21pc2UudGhlbigoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShDdXJyeS5fMShvbkRvbmUsIC8qIE9rICovQmxvY2suX18oMCwgW3ZdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmNhdGNoKChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShDdXJyeS5fMShvbkRvbmUsIC8qIEVycm9yICovQmxvY2suX18oMSwgW2VdKSkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiB0b0lPTGF6eShydW5Qcm9taXNlKSB7XG4gIHJldHVybiBSZWx1ZGVfSU8uYXN5bmMoKGZ1bmN0aW9uIChvbkRvbmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IEN1cnJ5Ll8xKHJ1blByb21pc2UsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEN1cnJ5Ll8xKG9uRG9uZSwgLyogT2sgKi9CbG9jay5fXygwLCBbdl0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkuY2F0Y2goKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKEN1cnJ5Ll8xKG9uRG9uZSwgLyogRXJyb3IgKi9CbG9jay5fXygxLCBbZV0pKSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGZyb21JT1dpdGhSZXN1bHQoaW8pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAocmVzb2x2ZSwgcGFyYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX0lPLnVuc2FmZVJ1bkFzeW5jKChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpbyk7XG4gICAgICAgICAgICAgIH0pKTtcbn1cblxuZnVuY3Rpb24gZnJvbUlPKGlvKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8udW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGlvKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBmcm9tSU9FeG4oaW8pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy51bnNhZmVSdW5Bc3luYygoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChyZXN1bHRbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgaW8pO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIGZyb21JT0pzRXhuKGlvKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8udW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QocmVzdWx0WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdFswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGlvKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5leHBvcnQge1xuICB0b0lPICxcbiAgdG9JT0xhenkgLFxuICBmcm9tSU9XaXRoUmVzdWx0ICxcbiAgZnJvbUlPICxcbiAgZnJvbUlPRXhuICxcbiAgZnJvbUlPSnNFeG4gLFxuICBcbn1cbi8qIFJlbHVkZV9JTyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIFBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgTWltZVR5cGVzIGZyb20gXCIuLi9iaW5kaW5ncy9NaW1lVHlwZXMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIE5vZGVGU19fU3RhdCBmcm9tIFwibm9kZS1mcy1icy9zcmMvTm9kZUZTX19TdGF0LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBTYW5pdGl6ZUZpbGVuYW1lIGZyb20gXCJzYW5pdGl6ZS1maWxlbmFtZVwiO1xuaW1wb3J0ICogYXMgTm9kZUZTX19SZWFkU3RyZWFtIGZyb20gXCJub2RlLWZzLWJzL3NyYy9Ob2RlRlNfX1JlYWRTdHJlYW0uYnMuanNcIjtcblxuZnVuY3Rpb24gbWFrZVJlc3BvbnNlKGRpcmVjdG9yeSwgZmlsZW5hbWUpIHtcbiAgdmFyIHNhbml0aXNlZEZpbGVuYW1lID0gU2FuaXRpemVGaWxlbmFtZShmaWxlbmFtZSk7XG4gIHZhciBwYXRoID0gUGF0aC5qb2luKGRpcmVjdG9yeSwgc2FuaXRpc2VkRmlsZW5hbWUpO1xuICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0lPLm1hcEVycm9yLCAoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSksIFJlbHVkZV9JTy5mbGF0TWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG10aW1lID0gcGFyYW0ubXRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXplID0gcGFyYW0uc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9JTy5tYXAoKGZ1bmN0aW9uIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLyogU3RyZWFtICovQmxvY2suX18oMSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdHJlYW0gKi9zdHJlYW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHR5cGVfICovTWltZVR5cGVzLmNvbnRlbnRUeXBlKHNhbml0aXNlZEZpbGVuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoICovc2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbW9kaWZpZWQgKi9tdGltZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBOb2RlRlNfX1JlYWRTdHJlYW0ubWFrZShwYXRoKSk7XG4gICAgICAgICAgICAgICAgICB9KSwgTm9kZUZTX19TdGF0LnN0YXQocGF0aCkpKTtcbn1cblxuZXhwb3J0IHtcbiAgbWFrZVJlc3BvbnNlICxcbiAgXG59XG4vKiBwYXRoIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgRnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIE5vZGVGU19fRXJyb3IgZnJvbSBcIi4vTm9kZUZTX19FcnJvci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX1Jlc3VsdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfUmVzdWx0LmJzLmpzXCI7XG5cbmZ1bmN0aW9uIHN0YXQocGF0aCkge1xuICByZXR1cm4gUmVsdWRlX0lPLmFzeW5jKChmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIEZzLnN0YXQocGF0aCwgKGZ1bmN0aW9uIChlcnJvciwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKHJlc29sdmUsIEN1cnJ5Ll8yKFJlbHVkZV9SZXN1bHQubWFwRXJyb3IsIE5vZGVGU19fRXJyb3IuZnJvbUV4Y2VwdGlvbiwgUmVsdWRlX1Jlc3VsdC5mbGlwKFJlbHVkZV9SZXN1bHQuZnJvbU9wdGlvbihkYXRhLCBlcnJvciA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IENhbWxfb3B0aW9uLnNvbWUoZXJyb3IpKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pKTtcbn1cblxudmFyICQkRXJyb3I7XG5cbmV4cG9ydCB7XG4gICQkRXJyb3IgLFxuICBzdGF0ICxcbiAgXG59XG4vKiBmcyBOb3QgYSBwdXJlIG1vZHVsZSAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEhUVFAgZnJvbSBcIi4vYmluZGluZ3MvSFRUUC5icy5qc1wiO1xuaW1wb3J0ICogYXMgSHR0cCBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0ICogYXMgUmVuZGVyIGZyb20gXCIuL1JlbmRlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUm91dGVyIGZyb20gXCIuL1JvdXRlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgJCRSZXNwb25zZSBmcm9tIFwiLi9SZXNwb25zZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuaW1wb3J0ICogYXMgQ2FtbF9vcHRpb24gZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9vcHRpb24uanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuaW1wb3J0ICogYXMgQWJvdXRDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL0Fib3V0Q29udHJvbGxlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgRW50cnlDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL0VudHJ5Q29udHJvbGxlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgSW5kZXhDb250cm9sbGVyIGZyb20gXCIuL2NvbnRyb2xsZXJzL0luZGV4Q29udHJvbGxlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgVXBsb2Fkc0NvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlcnMvVXBsb2Fkc0NvbnRyb2xsZXIuYnMuanNcIjtcbmltcG9ydCAqIGFzIFRhZ1NlYXJjaENvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlcnMvVGFnU2VhcmNoQ29udHJvbGxlci5icy5qc1wiO1xuXG5mdW5jdGlvbiBzcGxpdFVSTFNlZ21lbnRzKHVybCkge1xuICByZXR1cm4gdXJsLnNsaWNlKDEpLnNwbGl0KFwiL1wiKS5tYXAoKGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlZ21lbnQpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9KSkuZmlsdGVyKChmdW5jdGlvbiAoc2VnbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+PSAxO1xuICAgICAgICAgICAgICB9KSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VSZXNwb25zZShwYXJhbSwgdXBsb2Fkc0RpcmVjdG9yeSwgcm91dGUpIHtcbiAgdmFyIGVudHJpZXMgPSBwYXJhbS5lbnRyaWVzO1xuICBpZiAodHlwZW9mIHJvdXRlID09PSBcIm51bWJlclwiKSB7XG4gICAgcmV0dXJuIEFib3V0Q29udHJvbGxlci5tYWtlUmVzcG9uc2UocGFyYW0uYWJvdXQpO1xuICB9XG4gIHN3aXRjaCAocm91dGUudGFnIHwgMCkge1xuICAgIGNhc2UgLyogSW5kZXggKi8wIDpcbiAgICAgICAgcmV0dXJuIEluZGV4Q29udHJvbGxlci5tYWtlUmVzcG9uc2UoZW50cmllcywgcm91dGVbLyogcGFnZSAqLzBdKTtcbiAgICBjYXNlIC8qIFRhZ1NlYXJjaCAqLzEgOlxuICAgICAgICByZXR1cm4gVGFnU2VhcmNoQ29udHJvbGxlci5tYWtlUmVzcG9uc2UoZW50cmllcywgcm91dGVbLyogc2x1ZyAqLzBdLCByb3V0ZVsvKiBwYWdlICovMV0pO1xuICAgIGNhc2UgLyogRW50cnkgKi8yIDpcbiAgICAgICAgcmV0dXJuIEVudHJ5Q29udHJvbGxlci5tYWtlUmVzcG9uc2UoZW50cmllcywgcm91dGVbLyogeWVhciAqLzBdLCByb3V0ZVsvKiBtb250aCAqLzFdLCByb3V0ZVsvKiBkYXkgKi8yXSwgcm91dGVbLyogc2x1ZyAqLzNdKTtcbiAgICBjYXNlIC8qIFVwbG9hZHMgKi8zIDpcbiAgICAgICAgcmV0dXJuIFVwbG9hZHNDb250cm9sbGVyLm1ha2VSZXNwb25zZSh1cGxvYWRzRGlyZWN0b3J5LCByb3V0ZVsvKiBmaWxlbmFtZSAqLzBdKTtcbiAgICBcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlKHNpdGVOYW1lLCB1cGxvYWRzRGlyZWN0b3J5LCBkYXRhKSB7XG4gIHZhciBmYXZpY29uID0gZGF0YS5mYXZpY29uO1xuICByZXR1cm4gSHR0cC5jcmVhdGVTZXJ2ZXIoKGZ1bmN0aW9uIChyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHZhciB1cmwgPSBSZWx1ZGVfT3B0aW9uLmdldE9yRWxzZShcIi9cIiwgQ2FtbF9vcHRpb24udW5kZWZpbmVkX3RvX29wdChyZXF1ZXN0LnVybCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfSU8udW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLnRhcCgoZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5vbihcImNsb3NlXCIsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1c0NvZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtcyA9IERhdGUubm93KCkgLSBzdGFydFRpbWUgfCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlwiICsgKFN0cmluZyhzdGF0dXMpICsgKFwiIFwiICsgKFN0cmluZyh1cmwpICsgKFwiIFwiICsgKFN0cmluZyhtcykgKyBcIm1zXCIpKSkpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldFN0YXR1c0NvZGUoMjAwLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhUVFAuJCRSZXNwb25zZS5zZXRDb250ZW50VHlwZShSZWx1ZGVfT3B0aW9uLmdldE9yRWxzZShcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLCByZXNbLyogdHlwZV8gKi8xXSkpKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldENvbnRlbnRMZW5ndGgocmVzWy8qIGxlbmd0aCAqLzJdKShyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhUVFAuJCRSZXNwb25zZS5zZXRMYXN0TW9kaWZpZWQocmVzWy8qIG1vZGlmaWVkICovM10pKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzWy8qIHN0cmVhbSAqLzBdLnBpcGUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBSZW5kZXIucmVuZGVyKHNpdGVOYW1lLCBmYXZpY29uLCByZXNbLyogZGF0YSAqLzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhUVFAuJCRSZXNwb25zZS5zZXRTdGF0dXNDb2RlKHJlc1svKiBzdGF0dXMgKi8xXSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFRUUC4kJFJlc3BvbnNlLnNldENvbnRlbnRUeXBlKFwidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04XCIpKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhUVFAuJCRSZXNwb25zZS5zZXRDb250ZW50TGVuZ3RoKGxlbmd0aCkocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZW5kKGJvZHksIFwidXRmLThcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkoUmVsdWRlX0lPLmhhbmRsZUVycm9yKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQkUmVzcG9uc2Uubm90Rm91bmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0lPLmZsYXRNYXAoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ha2VSZXNwb25zZShkYXRhLCB1cGxvYWRzRGlyZWN0b3J5LCBwYXJhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9JTy5mcm9tT3B0aW9uKChmdW5jdGlvbiAocHJpbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgUm91dGVyLnJvdXRlKHNwbGl0VVJMU2VnbWVudHModXJsKSkpKSkpKTtcbiAgICAgICAgICAgICAgfSkpO1xufVxuXG5mdW5jdGlvbiBsaXN0ZW4ocGFyYW0pIHtcbiAgcGFyYW0ubGlzdGVuKDUwMDAsIFwiMTI3LjAuMC4xXCIsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkxpc3RlbmluZ1wiKTtcbiAgICAgICAgICBcbiAgICAgICAgfSkpO1xuICBcbn1cblxuZXhwb3J0IHtcbiAgc3BsaXRVUkxTZWdtZW50cyAsXG4gIG1ha2VSZXNwb25zZSAsXG4gIG1ha2UgLFxuICBsaXN0ZW4gLFxuICBcbn1cbi8qIGh0dHAgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBCbG9jayBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9ibG9jay5qc1wiO1xuXG5mdW5jdGlvbiBtYWtlUmVzcG9uc2UoYWJvdXQpIHtcbiAgcmV0dXJuIC8qIFB1cmUgKi9CbG9jay5fXygwLCBbLyogUGFnZSAqL0Jsb2NrLl9fKDAsIFtcbiAgICAgICAgICAgICAgICAvKiBkYXRhICovLyogQWJvdXQgKi9CbG9jay5fXygyLCBbe1xuICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGFib3V0XG4gICAgICAgICAgICAgICAgICAgIH1dKSxcbiAgICAgICAgICAgICAgICAvKiBzdGF0dXMgKi8yMDBcbiAgICAgICAgICAgICAgXSldKTtcbn1cblxuZXhwb3J0IHtcbiAgbWFrZVJlc3BvbnNlICxcbiAgXG59XG4vKiBObyBzaWRlIGVmZmVjdCAqL1xuIiwiLy8gR2VuZXJhdGVkIGJ5IEJVQ0tMRVNDUklQVCwgUExFQVNFIEVESVQgV0lUSCBDQVJFXG5cbmltcG9ydCAqIGFzIEJsb2NrIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2Jsb2NrLmpzXCI7XG5pbXBvcnQgKiBhcyBDdXJyeSBmcm9tIFwiYnMtcGxhdGZvcm0vbGliL2VzNi9jdXJyeS5qc1wiO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gXCIuLi9Db25zdGFudHMuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JTyBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSU8uYnMuanNcIjtcbmltcG9ydCAqIGFzIENhbWxfaW50MzIgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvY2FtbF9pbnQzMi5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0ludCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfSW50LmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfTGlzdCBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfTGlzdC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX09wdGlvbiBmcm9tIFwicmVsdWRlL3NyYy9SZWx1ZGVfT3B0aW9uLmJzLmpzXCI7XG5cbmZ1bmN0aW9uIG1ha2VSZXNwb25zZShlbnRyaWVzLCBwYWdlKSB7XG4gIHJldHVybiBSZWx1ZGVfSU8uZnJvbU9wdGlvbigoZnVuY3Rpb24gKHByaW0pIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVsdWRlX09wdGlvbi5tYXAoKGZ1bmN0aW9uIChwYWdlRW50cmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvKiBQYWdlICovQmxvY2suX18oMCwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBkYXRhICovLyogSW5kZXggKi9CbG9jay5fXygwLCBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogQ3VycnkuXzEoUmVsdWRlX0xpc3QubGVuZ3RoLCBlbnRyaWVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllczogUmVsdWRlX0xpc3QubWFwKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlbnRyeS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZW50cnkuZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZW50cnkudGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkocGFnZUVudHJpZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0YXR1cyAqLzIwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uLmZpbHRlcigoZnVuY3Rpb24gKHBhZ2VFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKFJlbHVkZV9MaXN0Lmxlbmd0aCwgcGFnZUVudHJpZXMpICE9PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkoUmVsdWRlX0xpc3QudGFrZShDb25zdGFudHMuZW50cmllc1BlclBhZ2UsIHBhcmFtWzFdKSkpO1xuICAgICAgICAgICAgICAgICAgfSksIFJlbHVkZV9MaXN0LnNwbGl0QXQoQ2FtbF9pbnQzMi5pbXVsKHBhZ2UgLSAxIHwgMCwgQ29uc3RhbnRzLmVudHJpZXNQZXJQYWdlKSwgUmVsdWRlX0xpc3Quc29ydEJ5KChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDdXJyeS5fMihSZWx1ZGVfSW50LmNvbXBhcmUsIGIuZGF0ZS5nZXRUaW1lKCksIGEuZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZW50cmllcykpKSk7XG59XG5cbmV4cG9ydCB7XG4gIG1ha2VSZXNwb25zZSAsXG4gIFxufVxuLyogUmVsdWRlX0lPIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iLCIvLyBHZW5lcmF0ZWQgYnkgQlVDS0xFU0NSSVBULCBQTEVBU0UgRURJVCBXSVRIIENBUkVcblxuaW1wb3J0ICogYXMgQmxvY2sgZnJvbSBcImJzLXBsYXRmb3JtL2xpYi9lczYvYmxvY2suanNcIjtcbmltcG9ydCAqIGFzIEN1cnJ5IGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2N1cnJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBVdGlscyBmcm9tIFwiLi4vVXRpbHMuYnMuanNcIjtcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tIFwiLi4vQ29uc3RhbnRzLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWx1ZGVfSU8gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0lPLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBDYW1sX2ludDMyIGZyb20gXCJicy1wbGF0Zm9ybS9saWIvZXM2L2NhbWxfaW50MzIuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9JbnQgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0ludC5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0xpc3QgZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX0xpc3QuYnMuanNcIjtcbmltcG9ydCAqIGFzIFJlbHVkZV9PcHRpb24gZnJvbSBcInJlbHVkZS9zcmMvUmVsdWRlX09wdGlvbi5icy5qc1wiO1xuXG5mdW5jdGlvbiBtYWtlUmVzcG9uc2UoZW50cmllcywgc2x1ZywgcGFnZSkge1xuICByZXR1cm4gUmVsdWRlX0lPLmZyb21PcHRpb24oKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pLCBDdXJyeS5fMihSZWx1ZGVfT3B0aW9uLmZsYXRNYXAsIChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IHBhcmFtWzJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRFbnRyaWVzID0gcGFyYW1bMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBSZWx1ZGVfT3B0aW9uLm1hcCgoZnVuY3Rpb24gKHBhZ2VFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIFBhZ2UgKi9CbG9jay5fXygwLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGRhdGEgKi8vKiBUYWdTZWFyY2ggKi9CbG9jay5fXygxLCBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWc6IHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogcGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IEN1cnJ5Ll8xKFJlbHVkZV9MaXN0Lmxlbmd0aCwgZmlsdGVyZWRFbnRyaWVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllczogUmVsdWRlX0xpc3QubWFwKChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlbnRyeS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZTogZW50cnkuZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZW50cnkudGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkocGFnZUVudHJpZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIHN0YXR1cyAqLzIwMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfT3B0aW9uLmZpbHRlcigoZnVuY3Rpb24gKHBhZ2VFbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEN1cnJ5Ll8xKFJlbHVkZV9MaXN0Lmxlbmd0aCwgcGFnZUVudHJpZXMpICE9PSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkoUmVsdWRlX0xpc3QudGFrZShDb25zdGFudHMuZW50cmllc1BlclBhZ2UsIHBhcmFtWzFdKSkpO1xuICAgICAgICAgICAgICAgICAgfSksIEN1cnJ5Ll8yKFJlbHVkZV9PcHRpb24uZmxhdE1hcCwgKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IHBhcmFtWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlcmVkRW50cmllcyA9IHBhcmFtWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlbHVkZV9PcHRpb24ubWFwKChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRW50cmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBSZWx1ZGVfTGlzdC5zcGxpdEF0KENhbWxfaW50MzIuaW11bChwYWdlIC0gMSB8IDAsIENvbnN0YW50cy5lbnRyaWVzUGVyUGFnZSksIFJlbHVkZV9MaXN0LnNvcnRCeSgoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3VycnkuXzIoUmVsdWRlX0ludC5jb21wYXJlLCBiLmRhdGUuZ2V0VGltZSgpLCBhLmRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZpbHRlcmVkRW50cmllcykpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSwgUmVsdWRlX0xpc3QuZm9sZExlZnQoKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSBDdXJyeS5fMihSZWx1ZGVfTGlzdC5maW5kLCAoZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMuc2x1Zyh0YWcpID09PSBzbHVnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGVudHJ5LnRhZ3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY2N1bXVsYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvclswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC8qIHR1cGxlICovW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogOjogKi9bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBbXSAqLzBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHVuZGVmaW5lZCkoZW50cmllcykpKSk7XG59XG5cbmV4cG9ydCB7XG4gIG1ha2VSZXNwb25zZSAsXG4gIFxufVxuLyogVXRpbHMgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBBcHAgZnJvbSBcIi4vdmlld3MvQXBwLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBQYWdlIGZyb20gXCIuL3ZpZXdzL1BhZ2UuYnMuanNcIjtcbmltcG9ydCAqIGFzIFN0eWxlIGZyb20gXCIuL3ZpZXdzL1N0eWxlLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIEVtb3Rpb25TZXJ2ZXIgZnJvbSBcImVtb3Rpb24tc2VydmVyXCI7XG5pbXBvcnQgKiBhcyBTZXJ2ZXIgZnJvbSBcInJlYWN0LWRvbS9zZXJ2ZXJcIjtcblxuZnVuY3Rpb24gcmVuZGVyKHNpdGVOYW1lLCBmYXZpY29uLCBwYWdlRGF0YSkge1xuICBTdHlsZS5yZWdpc3Rlckdsb2JhbFN0eWxlcyh1bmRlZmluZWQpO1xuICB2YXIgcmVuZGVyZWRBcHAgPSBTZXJ2ZXIucmVuZGVyVG9TdHJpbmcoUmVhY3QuY3JlYXRlRWxlbWVudChBcHAubWFrZSwge1xuICAgICAgICAgICAgc2l0ZU5hbWU6IHNpdGVOYW1lLFxuICAgICAgICAgICAgcGFnZURhdGE6IHBhZ2VEYXRhXG4gICAgICAgICAgfSkpO1xuICB2YXIgbWF0Y2ggPSBFbW90aW9uU2VydmVyLmV4dHJhY3RDcml0aWNhbChyZW5kZXJlZEFwcCk7XG4gIHZhciB0aXRsZTtcbiAgaWYgKHBhZ2VEYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICBzd2l0Y2ggKHBhZ2VEYXRhLnRhZyB8IDApIHtcbiAgICAgIGNhc2UgLyogSW5kZXggKi8wIDpcbiAgICAgICAgICB0aXRsZSA9IHNpdGVOYW1lO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAvKiBUYWdTZWFyY2ggKi8xIDpcbiAgICAgICAgICB0aXRsZSA9IFwiXCIgKyAoU3RyaW5nKHBhZ2VEYXRhWzBdLnRhZykgKyAoXCIgfCBcIiArIChTdHJpbmcoc2l0ZU5hbWUpICsgXCJcIikpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgLyogQWJvdXQgKi8yIDpcbiAgICAgICAgICB0aXRsZSA9IFwiQWJvdXQgfCBcIiArIChTdHJpbmcoc2l0ZU5hbWUpICsgXCJcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIC8qIEVudHJ5ICovMyA6XG4gICAgICAgICAgdGl0bGUgPSBcIlwiICsgKFN0cmluZyhwYWdlRGF0YVswXS50aXRsZSkgKyAoXCIgfCBcIiArIChTdHJpbmcoc2l0ZU5hbWUpICsgXCJcIikpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aXRsZSA9IFwiTm90IGZvdW5kIHwgXCIgKyAoU3RyaW5nKHNpdGVOYW1lKSArIFwiXCIpO1xuICB9XG4gIHZhciByZW5kZXJlZFBhZ2UgPSBTZXJ2ZXIucmVuZGVyVG9TdHJpbmcoUmVhY3QuY3JlYXRlRWxlbWVudChQYWdlLm1ha2UsIHtcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIGNzczogbWF0Y2guY3NzLFxuICAgICAgICAgICAgZmF2aWNvbjogZmF2aWNvbixcbiAgICAgICAgICAgIGNoaWxkcmVuOiBtYXRjaC5odG1sXG4gICAgICAgICAgfSkpO1xuICByZXR1cm4gXCI8IURPQ1RZUEUgaHRtbD5cIiArIHJlbmRlcmVkUGFnZTtcbn1cblxuZXhwb3J0IHtcbiAgcmVuZGVyICxcbiAgXG59XG4vKiBBcHAgTm90IGEgcHVyZSBtb2R1bGUgKi9cbiIsIi8vIEdlbmVyYXRlZCBieSBCVUNLTEVTQ1JJUFQsIFBMRUFTRSBFRElUIFdJVEggQ0FSRVxuXG5pbXBvcnQgKiBhcyBDTEkgZnJvbSBcIi4vQ0xJLmJzLmpzXCI7XG5pbXBvcnQgKiBhcyBQYXJzZSBmcm9tIFwiLi9QYXJzZS5icy5qc1wiO1xuaW1wb3J0ICogYXMgU2VydmVyIGZyb20gXCIuL1NlcnZlci5icy5qc1wiO1xuaW1wb3J0ICogYXMgUmVsdWRlX0lPIGZyb20gXCJyZWx1ZGUvc3JjL1JlbHVkZV9JTy5icy5qc1wiO1xuXG4oKHJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3RlcicpKSk7XG5cbmZ1bmN0aW9uIHByaW50RXJyb3IoZXJyb3IpIHtcbiAgdmFyIG1lc3NhZ2U7XG4gIHN3aXRjaCAoZXJyb3IudGFnIHwgMCkge1xuICAgIGNhc2UgLyogQWJvdXRGaWxlRXJyb3IgKi8wIDpcbiAgICAgICAgc3dpdGNoIChlcnJvclswXS50YWcgfCAwKSB7XG4gICAgICAgICAgY2FzZSAvKiBJc0FEaXJlY3RvcnkgKi81IDpcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiQWJvdXQgcGF0aCBpcyBhIGRpcmVjdG9yeVwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIC8qIE5vU3VjaEZpbGVPckRpcmVjdG9yeSAqLzcgOlxuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJBYm91dCBwYXRoIGRvZXMgbm90IGV4aXN0XCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBtZXNzYWdlID0gXCJFcnJvciByZWFkaW5nIGFib3V0IHBhdGhcIjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIEVudHJpZXNEaXJlY3RvcnlFcnJvciAqLzEgOlxuICAgICAgICB2YXIgbWF0Y2ggPSBlcnJvclswXTtcbiAgICAgICAgc3dpdGNoIChtYXRjaC50YWcgfCAwKSB7XG4gICAgICAgICAgY2FzZSAvKiBSZWFkRGlyZWN0b3J5RXJyb3IgKi8wIDpcbiAgICAgICAgICAgICAgc3dpdGNoIChtYXRjaFswXS50YWcgfCAwKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAvKiBOb1N1Y2hGaWxlT3JEaXJlY3RvcnkgKi83IDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiRW50cmllcyBwYXRoIGRvZXMgbm90IGV4aXN0XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgLyogTm90QURpcmVjdG9yeSAqLzggOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJFbnRyaWVzIHBhdGggaXMgbm90IGEgZGlyZWN0b3J5XCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJFcnJvciByZWFkaW5nIGVudHJpZXMgZGlyZWN0b3J5XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAvKiBSZWFkRW50cnlFcnJvciAqLzEgOlxuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJFcnJvciByZWFkaW5nIGVudHJ5OiBcIiArIG1hdGNoWy8qIG5hbWUgKi8wXTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAvKiBQYXJzZUVycm9yICovMiA6XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIHBhcnNpbmcgZW50cnk6IFwiICsgbWF0Y2hbLyogbmFtZSAqLzBdO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIEZhdmljb25FcnJvciAqLzIgOlxuICAgICAgICB2YXIgbWF0Y2gkMSA9IGVycm9yWzBdO1xuICAgICAgICBpZiAobWF0Y2gkMSkge1xuICAgICAgICAgIHN3aXRjaCAobWF0Y2gkMVswXS50YWcgfCAwKSB7XG4gICAgICAgICAgICBjYXNlIC8qIElzQURpcmVjdG9yeSAqLzUgOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkZhdmljb24gcGF0aCBpcyBhIGRpcmVjdG9yeVwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAvKiBOb1N1Y2hGaWxlT3JEaXJlY3RvcnkgKi83IDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gXCJGYXZpY29uIHBhdGggZG9lcyBub3QgZXhpc3RcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIHJlYWRpbmcgZmF2aWNvbiBwYXRoXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lc3NhZ2UgPSBcIkVycm9yIGlkZW50aWZ5aW5nIGZhdmljb24gbWltZXR5cGVcIjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICBjYXNlIC8qIFVwbG9hZHNEaXJlY3RvcnlFcnJvciAqLzMgOlxuICAgICAgICBzd2l0Y2ggKGVycm9yWzBdLnRhZyB8IDApIHtcbiAgICAgICAgICBjYXNlIC8qIE5vU3VjaEZpbGVPckRpcmVjdG9yeSAqLzcgOlxuICAgICAgICAgICAgICBtZXNzYWdlID0gXCJVcGxvYWRzIGRpcmVjdG9yeSBkb2VzIG5vdCBleGlzdFwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIC8qIE5vdEFEaXJlY3RvcnkgKi84IDpcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiVXBsb2FkcyBwYXRoIGlzIG5vdCBhIGRpcmVjdG9yeVwiO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgbWVzc2FnZSA9IFwiRXJyb3IgY2hlY2tpbmcgZXhpc3RlbmNlIG9mIHVwbG9hZHMgZGlyZWN0b3J5XCI7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgXG4gIH1cbiAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgXG59XG5cbmZ1bmN0aW9uIG1haW4ocGFyYW0pIHtcbiAgdmFyIG1hdGNoID0gQ0xJLnBhcnNlQXJndW1lbnRzKHVuZGVmaW5lZCk7XG4gIHZhciB1cGxvYWRzRGlyZWN0b3J5ID0gbWF0Y2gudXBsb2Fkc0RpcmVjdG9yeTtcbiAgdmFyIHNpdGVOYW1lID0gbWF0Y2guc2l0ZU5hbWU7XG4gIHJldHVybiBSZWx1ZGVfSU8udW5zYWZlUnVuQXN5bmMoKGZ1bmN0aW9uIChwcmltKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIH0pLCBSZWx1ZGVfSU8uYml0YXAoU2VydmVyLmxpc3RlbiwgcHJpbnRFcnJvciwgUmVsdWRlX0lPLm1hcCgoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZXJ2ZXIubWFrZShzaXRlTmFtZSwgdXBsb2Fkc0RpcmVjdG9yeSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSksIFBhcnNlLnJlYWRBbmRQYXJzZUFsbChtYXRjaC5hYm91dFBhdGgsIG1hdGNoLmVudHJpZXNEaXJlY3RvcnksIG1hdGNoLmZhdmljb25QYXRoLCB1cGxvYWRzRGlyZWN0b3J5KSkpKTtcbn1cblxubWFpbih1bmRlZmluZWQpO1xuXG5leHBvcnQge1xuICBwcmludEVycm9yICxcbiAgbWFpbiAsXG4gIFxufVxuLyogIE5vdCBhIHB1cmUgbW9kdWxlICovXG4iXSwic291cmNlUm9vdCI6IiJ9