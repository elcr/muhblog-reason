// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Date from "../bindings/Date.bs.js";
import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Utils from "../Utils.bs.js";
import * as Relude_IO from "relude/src/Relude_IO.bs.js";
import * as Relude_Int from "relude/src/Relude_Int.bs.js";
import * as Relude_List from "relude/src/Relude_List.bs.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";

function dayTimestamp(date) {
  return $$Date.make(date.getFullYear(), $$Date.getMonth(date), date.getDate(), undefined, undefined, undefined).getTime();
}

function makeResponse(entries, year, month, day, slug) {
  var timestamp = $$Date.make(year, month, day, undefined, undefined, undefined).getTime();
  return Relude_IO.map((function (entry) {
                return /* Page */Block.__(0, [
                          /* data *//* Entry */Block.__(3, [{
                                title: entry.title,
                                date: entry.date,
                                text: entry.text,
                                tags: entry.tags,
                                previous: Relude_Option.map((function (entry) {
                                        return {
                                                title: entry.title,
                                                date: entry.date
                                              };
                                      }), Curry._2(Relude_List.find, (function (entry) {
                                            return dayTimestamp(entry.date) < timestamp;
                                          }), Relude_List.sortBy((function (a, b) {
                                                return Curry._2(Relude_Int.compare, b.date.getTime(), a.date.getTime());
                                              }), entries))),
                                next: Relude_Option.map((function (entry) {
                                        return {
                                                title: entry.title,
                                                date: entry.date
                                              };
                                      }), Curry._2(Relude_List.find, (function (entry) {
                                            return dayTimestamp(entry.date) > timestamp;
                                          }), Relude_List.sortBy((function (a, b) {
                                                return Curry._2(Relude_Int.compare, a.date.getTime(), b.date.getTime());
                                              }), entries)))
                              }]),
                          /* status */200
                        ]);
              }), Relude_IO.fromOption((function (prim) {
                    
                  }), Curry._2(Relude_List.find, (function (entry) {
                        if (dayTimestamp(entry.date) === timestamp) {
                          return Curry._1(Utils.slug(undefined), entry.title) === slug;
                        } else {
                          return false;
                        }
                      }), entries)));
}

export {
  dayTimestamp ,
  makeResponse ,
  
}
/* Utils Not a pure module */
