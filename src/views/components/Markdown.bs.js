// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.js";
import * as Link from "./Link.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Style from "../Style.bs.js";
import * as React from "react";
import * as Heading from "./Heading.bs.js";
import * as Spoiler from "./Spoiler.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";
import * as ReactMarkdown from "react-markdown";
import * as HighlightedCode from "./HighlightedCode.bs.js";
import * as Relude_Function from "relude/src/Relude_Function.bs.js";

function Markdown$HTMLElement(Props) {
  var tag = Props.tag;
  var children = Props.children;
  if (tag === "spoiler") {
    return React.createElement(Spoiler.make, {
                children: children
              });
  } else {
    return React.createElement(tag, undefined, children);
  }
}

var $$HTMLElement = {
  make: Markdown$HTMLElement
};

var classNameH2 = Curry._1(Css.style, /* :: */[
      Css.margin4(Css.rem(1.5), Css.zero, Css.rem(0.6), Css.zero),
      /* :: */[
        Css.fontSize(Css.rem(1.5)),
        /* :: */[
          Relude_Function.uncurry3(Css.borderBottom, Style.border),
          /* :: */[
            Css.firstChild(/* :: */[
                  Css.marginTop(Css.zero),
                  /* [] */0
                ]),
            /* [] */0
          ]
        ]
      ]
    ]);

var classNameH3 = Curry._1(Css.style, /* :: */[
      Css.margin4(Css.rem(1.25), Css.zero, Css.rem(0.5), Css.zero),
      /* :: */[
        Css.fontSize(Css.rem(1.25)),
        /* [] */0
      ]
    ]);

function Markdown$StyledHeading(Props) {
  var level = Props.level;
  var children = Props.children;
  var className = level !== 2 ? (
      level !== 3 ? undefined : classNameH3
    ) : classNameH2;
  var tmp = {
    level: level,
    children: children
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  return React.createElement(Heading.make, tmp);
}

var StyledHeading = {
  classNameH2: classNameH2,
  classNameH3: classNameH3,
  make: Markdown$StyledHeading
};

function Markdown(Props) {
  var renderParagraph = Props.renderParagraph;
  var text = Props.text;
  var renderers = {
    virtualHtml: Markdown$HTMLElement,
    code: (function (props) {
        return React.createElement(HighlightedCode.make, {
                    language: props.language,
                    text: props.value
                  });
      }),
    heading: Markdown$StyledHeading,
    paragraph: Relude_Option.getOrElse((function (props) {
            return React.createElement("p", undefined, props.children);
          }), renderParagraph),
    link: (function (props) {
        return React.createElement(Link.make, {
                    url: props.href,
                    children: props.children
                  });
      })
  };
  return React.createElement(ReactMarkdown, {
              source: text,
              escapeHtml: false,
              renderers: renderers
            });
}

var make = Markdown;

export {
  $$HTMLElement ,
  StyledHeading ,
  make ,
  
}
/* classNameH2 Not a pure module */
