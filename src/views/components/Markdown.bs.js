// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as Link from "./Link.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Style from "../Style.bs.js";
import * as Utils from "../../Utils.bs.js";
import * as React from "react";
import * as Heading from "./Heading.bs.js";
import * as Js_types from "bs-platform/lib/es6/js_types.js";
import * as RouteLink from "./RouteLink.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Relude_Array from "relude/src/Relude_Array.bs.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";
import * as ReactMarkdown from "react-markdown";
import PrismLight from "react-syntax-highlighter/dist/esm/prism-light";
import Tomorrow from "react-syntax-highlighter/dist/esm/styles/prism/tomorrow";

var className = Curry._1(Css.style, {
      hd: Css.backgroundColor(Css.black),
      tl: {
        hd: Css.color(Css.black),
        tl: {
          hd: Css.hover({
                hd: Css.color(Css.white),
                tl: /* [] */0
              }),
          tl: /* [] */0
        }
      }
    });

function Markdown$SpoilerHTML(Props) {
  var tag = Props.tag;
  var children = Props.children;
  if (tag === "spoiler") {
    return React.createElement("span", {
                className: className
              }, children);
  } else {
    return React.createElement(tag, undefined, children);
  }
}

var SpoilerHTML = {
  className: className,
  make: Markdown$SpoilerHTML
};

var className$1 = Curry._1(Css.style, {
      hd: Css.display(Css.none),
      tl: {
        hd: Css.fontSize(Css.rem(0.8)),
        tl: /* [] */0
      }
    });

function Markdown$StyledHeading$IDLink(Props) {
  var buildRoute = Props.buildRoute;
  var id = Props.id;
  return React.createElement(RouteLink.make, {
              route: Curry._2(buildRoute, id, undefined),
              className: className$1,
              children: "ðŸ”—"
            });
}

var IDLink = {
  className: className$1,
  make: Markdown$StyledHeading$IDLink
};

var baseClassName = Curry._1(Css.style, {
      hd: Css.display(Css.flexBox),
      tl: {
        hd: Css.justifyContent(Css.spaceBetween),
        tl: {
          hd: Css.alignItems(Css.center),
          tl: {
            hd: Css.hover({
                  hd: Css.child("a")({
                        hd: Css.display(Css.block),
                        tl: /* [] */0
                      }),
                  tl: /* [] */0
                }),
            tl: /* [] */0
          }
        }
      }
    });

var classNameH2 = Curry._1(Css.merge, {
      hd: baseClassName,
      tl: {
        hd: Style.bottomBorderClassName,
        tl: {
          hd: Curry._1(Css.style, {
                hd: Css.margin4(Css.rem(1.5), Css.zero, Css.rem(0.6), Css.zero),
                tl: {
                  hd: Css.fontSize(Css.rem(1.5)),
                  tl: {
                    hd: Css.firstChild({
                          hd: Css.marginTop(Css.zero),
                          tl: /* [] */0
                        }),
                    tl: /* [] */0
                  }
                }
              }),
          tl: /* [] */0
        }
      }
    });

var classNameH3 = Curry._1(Css.merge, {
      hd: baseClassName,
      tl: {
        hd: Curry._1(Css.style, {
              hd: Css.margin4(Css.rem(1.25), Css.zero, Css.rem(0.5), Css.zero),
              tl: {
                hd: Css.fontSize(Css.rem(1.25)),
                tl: /* [] */0
              }
            }),
        tl: /* [] */0
      }
    });

function Markdown$StyledHeading(Props) {
  var buildRoute = Props.buildRoute;
  var level = Props.level;
  var children = Props.children;
  var className = level !== 2 ? (
      level !== 3 ? undefined : classNameH3
    ) : classNameH2;
  var text = Relude_Option.filter(function (child) {
          return Js_types.test(child, /* String */4);
        })(Relude_Option.map((function (child) {
              return child.props.children;
            }), Relude_Array.at(0, children)));
  var id = Relude_Option.map(Utils.slug, text);
  var tmp = {
    level: level,
    children: null
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  if (id !== undefined) {
    tmp.id = Caml_option.valFromOption(id);
  }
  return React.createElement(Heading.make, tmp, Relude_Option.getOrElse(null, Relude_Option.map((function (prim) {
                        return prim;
                      }), text)), React.createElement(Markdown$StyledHeading$IDLink, {
                  buildRoute: buildRoute,
                  id: id
                }));
}

var StyledHeading = {
  IDLink: IDLink,
  baseClassName: baseClassName,
  classNameH2: classNameH2,
  classNameH3: classNameH3,
  make: Markdown$StyledHeading
};

function Markdown$LazyImage(Props) {
  var src = Props.src;
  return React.createElement("img", {
              src: src,
              loading: "lazy"
            });
}

var LazyImage = {
  make: Markdown$LazyImage
};

var className$2 = Curry._1(Css.style, {
      hd: Css.fontSize(Css.rem(0.8)),
      tl: {
        hd: Css.important(Css.marginBottom(Css.rem(1.0))),
        tl: /* [] */0
      }
    });

function Markdown$HighlightedCode(Props) {
  var language = Props.language;
  var text = Props.text;
  return React.createElement(PrismLight, {
              className: className$2,
              language: language,
              style: Tomorrow,
              children: text
            });
}

var HighlightedCode = {
  className: className$2,
  make: Markdown$HighlightedCode
};

function Markdown(Props) {
  var buildHeadingRoute = Props.buildHeadingRoute;
  var renderParagraph = Props.renderParagraph;
  var text = Props.text;
  var renderers = {
    virtualHtml: Markdown$SpoilerHTML,
    code: (function (props) {
        return React.createElement(Markdown$HighlightedCode, {
                    language: props.language,
                    text: props.value
                  });
      }),
    heading: (function (props) {
        return React.createElement(Markdown$StyledHeading, {
                    buildRoute: buildHeadingRoute,
                    level: props.level,
                    children: props.children
                  });
      }),
    paragraph: Relude_Option.getOrElse((function (props) {
            return React.createElement("p", undefined, props.children);
          }), renderParagraph),
    link: (function (props) {
        return React.createElement(Link.make, {
                    url: props.href,
                    children: props.children
                  });
      }),
    image: Markdown$LazyImage
  };
  return React.createElement(ReactMarkdown, {
              source: text,
              escapeHtml: false,
              renderers: renderers
            });
}

var make = Markdown;

export {
  SpoilerHTML ,
  StyledHeading ,
  LazyImage ,
  HighlightedCode ,
  make ,
  
}
/* className Not a pure module */
