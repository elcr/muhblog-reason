// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.js";
import * as Link from "./Link.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Style from "../Style.bs.js";
import * as React from "react";
import * as Heading from "./Heading.bs.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";
import * as ReactMarkdown from "react-markdown";
import * as PrismLight from "react-syntax-highlighter/dist/esm/prism-light";
import * as Tomorrow from "react-syntax-highlighter/dist/esm/styles/prism/tomorrow";

var className = Curry._1(Css.style, /* :: */[
      Css.backgroundColor(Css.black),
      /* :: */[
        Css.color(Css.black),
        /* :: */[
          Css.hover(/* :: */[
                Css.color(Css.white),
                /* [] */0
              ]),
          /* [] */0
        ]
      ]
    ]);

function Markdown$SpoilerHTML(Props) {
  var tag = Props.tag;
  var children = Props.children;
  if (tag === "spoiler") {
    return React.createElement("span", {
                className: className
              }, children);
  } else {
    return React.createElement(tag, undefined, children);
  }
}

var SpoilerHTML = {
  className: className,
  make: Markdown$SpoilerHTML
};

var classNameH2 = Curry._1(Css.merge, /* :: */[
      Style.bottomBorderClassName,
      /* :: */[
        Curry._1(Css.style, /* :: */[
              Css.margin4(Css.rem(1.5), Css.zero, Css.rem(0.6), Css.zero),
              /* :: */[
                Css.fontSize(Css.rem(1.5)),
                /* :: */[
                  Css.firstChild(/* :: */[
                        Css.marginTop(Css.zero),
                        /* [] */0
                      ]),
                  /* [] */0
                ]
              ]
            ]),
        /* [] */0
      ]
    ]);

var classNameH3 = Curry._1(Css.style, /* :: */[
      Css.margin4(Css.rem(1.25), Css.zero, Css.rem(0.5), Css.zero),
      /* :: */[
        Css.fontSize(Css.rem(1.25)),
        /* [] */0
      ]
    ]);

function Markdown$StyledHeading(Props) {
  var level = Props.level;
  var children = Props.children;
  var className = level !== 2 ? (
      level !== 3 ? undefined : classNameH3
    ) : classNameH2;
  var tmp = {
    level: level,
    children: children
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  return React.createElement(Heading.make, tmp);
}

var StyledHeading = {
  classNameH2: classNameH2,
  classNameH3: classNameH3,
  make: Markdown$StyledHeading
};

var className$1 = Curry._1(Css.style, /* :: */[
      Css.fontSize(Css.rem(1.1)),
      /* [] */0
    ]);

function Markdown$StyledCode(Props) {
  var children = Props.children;
  return React.createElement("code", {
              className: className$1
            }, children);
}

var StyledCode = {
  className: className$1,
  make: Markdown$StyledCode
};

function Markdown$LazyImage(Props) {
  var src = Props.src;
  return React.createElement("img", {
              src: src,
              loading: "lazy"
            });
}

var LazyImage = {
  make: Markdown$LazyImage
};

var className$2 = Curry._1(Css.style, /* :: */[
      Css.fontSize(Css.rem(0.8)),
      /* :: */[
        Css.important(Css.marginBottom(Css.rem(1.0))),
        /* [] */0
      ]
    ]);

function Markdown$HighlightedCode(Props) {
  var language = Props.language;
  var text = Props.text;
  return React.createElement(PrismLight.default, {
              className: className$2,
              language: language,
              style: Tomorrow.default,
              children: text
            });
}

var HighlightedCode = {
  className: className$2,
  make: Markdown$HighlightedCode
};

function Markdown(Props) {
  var renderParagraph = Props.renderParagraph;
  var text = Props.text;
  var renderers = {
    virtualHtml: Markdown$SpoilerHTML,
    code: (function (props) {
        return React.createElement(Markdown$HighlightedCode, {
                    language: props.language,
                    text: props.value
                  });
      }),
    heading: Markdown$StyledHeading,
    paragraph: Relude_Option.getOrElse((function (props) {
            return React.createElement("p", undefined, props.children);
          }), renderParagraph),
    inlineCode: Markdown$StyledCode,
    link: (function (props) {
        return React.createElement(Link.make, {
                    url: props.href,
                    children: props.children
                  });
      }),
    image: Markdown$LazyImage
  };
  return React.createElement(ReactMarkdown, {
              source: text,
              escapeHtml: false,
              renderers: renderers
            });
}

var make = Markdown;

export {
  SpoilerHTML ,
  StyledHeading ,
  StyledCode ,
  LazyImage ,
  HighlightedCode ,
  make ,
  
}
/* className Not a pure module */
