// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "bs-css-emotion/src/Css.bs.js";
import * as Arrow from "../components/Arrow.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Route from "../../Route.bs.js";
import * as Style from "../Style.bs.js";
import * as Utils from "../../Utils.bs.js";
import * as React from "react";
import * as Heading from "../components/Heading.bs.js";
import * as Markdown from "../components/Markdown.bs.js";
import * as RouteLink from "../components/RouteLink.bs.js";
import * as Timestamp from "../components/Timestamp.bs.js";
import * as Relude_List from "relude/src/Relude_List.bs.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";

var className = Curry._1(Css.merge, {
      hd: Style.bottomBorderClassName,
      tl: {
        hd: Curry._1(Css.style, {
              hd: Css.marginBottom(Css.rem(1.6)),
              tl: {
                hd: Css.paddingBottom(Css.rem(0.3)),
                tl: /* [] */0
              }
            }),
        tl: /* [] */0
      }
    });

function EntryPage$Header(Props) {
  var children = Props.children;
  return React.createElement("header", {
              className: className
            }, children);
}

var Header = {
  className: className,
  make: EntryPage$Header
};

var className$1 = Curry._1(Css.style, {
      hd: Css.fontSize(Css.rem(1.75)),
      tl: {
        hd: Css.marginBottom(Css.rem(1.0)),
        tl: /* [] */0
      }
    });

function EntryPage$StyledHeading(Props) {
  var children = Props.children;
  return React.createElement(Heading.make, {
              className: className$1,
              children: children
            });
}

var StyledHeading = {
  className: className$1,
  make: EntryPage$StyledHeading
};

var className$2 = Curry._1(Css.style, {
      hd: Css.display(Css.inlineBlock),
      tl: {
        hd: Css.fontStyle(Css.italic),
        tl: {
          hd: Css.margin2(Css.zero, Css.rem(0.3)),
          tl: {
            hd: Css.firstOfType({
                  hd: Css.marginLeft(Css.zero),
                  tl: /* [] */0
                }),
            tl: /* [] */0
          }
        }
      }
    });

function EntryPage$TagItem(Props) {
  var tag = Props.tag;
  var route = Route.tagSearch(Utils.slug(tag), undefined, undefined);
  return React.createElement("li", {
              className: className$2
            }, React.createElement(RouteLink.make, {
                  route: route,
                  children: tag
                }));
}

var TagItem = {
  className: className$2,
  make: EntryPage$TagItem
};

var className$3 = Curry._1(Css.style, {
      hd: Css.display(Css.flexBox),
      tl: {
        hd: Css.flexWrap(Css.wrap),
        tl: {
          hd: Css.margin(Css.zero),
          tl: {
            hd: Css.padding(Css.zero),
            tl: /* [] */0
          }
        }
      }
    });

function EntryPage$TagList(Props) {
  var tags = Props.tags;
  var tags$1 = Relude_List.map(function (tag) {
          return React.createElement(EntryPage$TagItem, {
                      tag: tag,
                      key: tag
                    });
        })(tags);
  return React.createElement("ul", {
              className: className$3
            }, Utils.reactList(tags$1));
}

var TagList = {
  className: className$3,
  make: EntryPage$TagList
};

var className$4 = Curry._1(Css.style, {
      hd: Css.display(Css.block),
      tl: {
        hd: Css.marginBottom(Css.rem(0.3)),
        tl: /* [] */0
      }
    });

function EntryPage$StyledTimestamp(Props) {
  var date = Props.date;
  return React.createElement(Timestamp.make, {
              className: className$4,
              date: date
            });
}

var StyledTimestamp = {
  className: className$4,
  make: EntryPage$StyledTimestamp
};

var className$5 = Curry._1(Css.style, {
      hd: Css.margin2(Css.zero, Css.rem(0.5)),
      tl: /* [] */0
    });

function EntryPage$NavigationLink(Props) {
  var title = Props.title;
  var date = Props.date;
  var route = Route.entry(date, title, undefined, undefined);
  return React.createElement(RouteLink.make, {
              route: route,
              className: className$5,
              children: title
            });
}

var NavigationLink = {
  className: className$5,
  make: EntryPage$NavigationLink
};

var className$6 = Curry._1(Css.style, {
      hd: Css.display(Css.flexBox),
      tl: {
        hd: Css.alignItems(Css.center),
        tl: {
          hd: Css.margin2(Css.rem(1.0), Css.zero),
          tl: {
            hd: Style.desktopMediaQuery({
                  hd: Css.margin(Css.zero),
                  tl: /* [] */0
                }),
            tl: /* [] */0
          }
        }
      }
    });

function EntryPage$NavigationLinkContainer(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: className$6
            }, children);
}

var NavigationLinkContainer = {
  className: className$6,
  make: EntryPage$NavigationLinkContainer
};

var className$7 = Curry._1(Css.merge, {
      hd: Style.smallCapsClassName,
      tl: {
        hd: Curry._1(Css.style, {
              hd: Css.display(Css.flexBox),
              tl: {
                hd: Css.flexDirection(Css.columnReverse),
                tl: {
                  hd: Css.justifyContent(Css.spaceBetween),
                  tl: {
                    hd: Css.alignItems(Css.center),
                    tl: {
                      hd: Css.margin2(Css.rem(1.0), Css.zero),
                      tl: {
                        hd: Css.fontSize(Css.rem(1.1)),
                        tl: {
                          hd: Style.desktopMediaQuery({
                                hd: Css.flexDirection(Css.row),
                                tl: {
                                  hd: Css.margin4(Css.rem(2.0), Css.zero, Css.rem(3.0), Css.zero),
                                  tl: /* [] */0
                                }
                              }),
                          tl: /* [] */0
                        }
                      }
                    }
                  }
                }
              }
            }),
        tl: /* [] */0
      }
    });

function EntryPage$Navigation(Props) {
  var previous = Props.previous;
  var next = Props.next;
  var previousLink = Relude_Option.getOrElse(React.createElement("div", undefined), Relude_Option.map((function (param) {
              return React.createElement(EntryPage$NavigationLinkContainer, {
                          children: null
                        }, React.createElement(Arrow.make, {
                              direction: /* Left */0
                            }), React.createElement(EntryPage$NavigationLink, {
                              title: param.title,
                              date: param.date
                            }));
            }), previous));
  var nextLink = Relude_Option.getOrElse(React.createElement("div", undefined), Relude_Option.map((function (param) {
              return React.createElement(EntryPage$NavigationLinkContainer, {
                          children: null
                        }, React.createElement(EntryPage$NavigationLink, {
                              title: param.title,
                              date: param.date
                            }), React.createElement(Arrow.make, {
                              direction: /* Right */1
                            }));
            }), next));
  return React.createElement("footer", {
              className: className$7
            }, previousLink, nextLink);
}

var Navigation = {
  className: className$7,
  make: EntryPage$Navigation
};

var className$8 = Curry._1(Css.style, {
      hd: Css.lastOfType({
            hd: Css.marginBottom(Css.zero),
            tl: /* [] */0
          }),
      tl: /* [] */0
    });

function EntryPage$StyledParagraph(Props) {
  var children = Props.children;
  return React.createElement("p", {
              className: className$8
            }, children);
}

var StyledParagraph = {
  className: className$8,
  make: EntryPage$StyledParagraph
};

var className$9 = Curry._1(Css.merge, {
      hd: Style.bottomBorderClassName,
      tl: {
        hd: Curry._1(Css.style, {
              hd: Css.paddingBottom(Css.rem(2.0)),
              tl: /* [] */0
            }),
        tl: /* [] */0
      }
    });

function EntryPage$StyledMarkdown(Props) {
  var buildHeadingRoute = Props.buildHeadingRoute;
  var text = Props.text;
  return React.createElement("section", {
              className: className$9
            }, React.createElement(Markdown.make, {
                  buildHeadingRoute: buildHeadingRoute,
                  renderParagraph: EntryPage$StyledParagraph,
                  text: text
                }));
}

var StyledMarkdown = {
  className: className$9,
  make: EntryPage$StyledMarkdown
};

function EntryPage(Props) {
  var param = Props.data;
  var date = param.date;
  var title = param.title;
  var buildHeadingRoute = function (param, param$1) {
    return Route.entry(date, title, param, param$1);
  };
  return React.createElement("article", undefined, React.createElement(EntryPage$Header, {
                  children: null
                }, React.createElement(EntryPage$StyledHeading, {
                      children: title
                    }), React.createElement(EntryPage$StyledTimestamp, {
                      date: date
                    }), React.createElement(EntryPage$TagList, {
                      tags: param.tags
                    })), React.createElement(EntryPage$StyledMarkdown, {
                  buildHeadingRoute: buildHeadingRoute,
                  text: param.text
                }), React.createElement(EntryPage$Navigation, {
                  previous: param.previous,
                  next: param.next
                }));
}

var make = EntryPage;

export {
  Header ,
  StyledHeading ,
  TagItem ,
  TagList ,
  StyledTimestamp ,
  NavigationLink ,
  NavigationLinkContainer ,
  Navigation ,
  StyledParagraph ,
  StyledMarkdown ,
  make ,
  
}
/* className Not a pure module */
