// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as Block from "bs-platform/lib/es6/block.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as SQLite from "sqlite-bs/src/SQLite.bs.js";
import * as Relude_IO from "relude/src/Relude_IO.bs.js";
import * as SQLiteRelude from "sqlite-relude/src/SQLiteRelude.bs.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";

function connect(param) {
  return SQLiteRelude.open_(SQLite.Mode.readWrite | SQLite.Mode.uri, undefined, "file::memory:?mode=memory&cache=shared");
}

function begin_(param) {
  return SQLiteRelude.run("BEGIN", param);
}

function commit(param) {
  return SQLiteRelude.run("COMMIT", param);
}

function rollback(param) {
  return SQLiteRelude.run("ROLLBACK", param);
}

function transaction(func, connection) {
  return Relude_IO.flatMap((function (param) {
                return Relude_IO.unsummonError(Relude_IO.flatMap((function (result) {
                                  if (!result.tag) {
                                    return Relude_IO.summonError(Curry._2(Relude_IO.mapError, (function (error) {
                                                      return /* CommitError */Block.__(2, [error]);
                                                    }), SQLiteRelude.run("COMMIT", connection)));
                                  }
                                  var innerError = result[0];
                                  return Relude_IO.map((function (result) {
                                                var newError;
                                                newError = result.tag ? /* RollbackError */Block.__(3, [result[0]]) : /* InnerError */Block.__(1, [innerError]);
                                                return /* Error */Block.__(1, [newError]);
                                              }), Relude_IO.summonError(SQLiteRelude.run("ROLLBACK", connection)));
                                }), Relude_IO.summonError(Curry._1(func, connection))));
              }), Curry._2(Relude_IO.mapError, (function (error) {
                    return /* BeginError */Block.__(0, [error]);
                  }), SQLiteRelude.run("BEGIN", connection)));
}

function executeSelectOne(query) {
  var match = query.toParam();
  var params = match[1];
  var query$1 = match[0];
  return (function (param) {
      return SQLiteRelude.getWithParams(query$1, params, param);
    });
}

function executeSelectExists(query, connection) {
  return Relude_IO.map(Relude_Option.isSome, executeSelectOne(query.field("1", "_"))(connection));
}

function executeSelectAll(query) {
  var match = query.toParam();
  var params = match[1];
  var query$1 = match[0];
  return (function (param) {
      return SQLiteRelude.getAllWithParams(query$1, params, param);
    });
}

function executeInsert(query) {
  var match = query.toParam();
  var params = match[1];
  var query$1 = match[0];
  return (function (param) {
      return SQLiteRelude.runInsertWithParams(query$1, params, param);
    });
}

var close = SQLiteRelude.close;

export {
  connect ,
  begin_ ,
  commit ,
  rollback ,
  close ,
  transaction ,
  executeSelectOne ,
  executeSelectExists ,
  executeSelectAll ,
  executeInsert ,
  
}
/* SQLite Not a pure module */
