// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE

import * as $$Date from "./bindings/Date.bs.js";
import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Utils from "./Utils.bs.js";
import * as Relude_Int from "relude/src/Relude_Int.bs.js";
import * as Relude_Option from "relude/src/Relude_Option.bs.js";
import * as Relude_String from "relude/src/Relude_String.bs.js";

function route(segments) {
  var len = segments.length;
  if (len >= 5) {
    return ;
  }
  switch (len) {
    case 0 :
        return {
                TAG: /* Index */0,
                page: 1
              };
    case 1 :
        var page = segments[0];
        if (page === "about") {
          return {
                  TAG: /* About */2,
                  id: undefined
                };
        } else {
          return Relude_Option.map((function (page) {
                        return {
                                TAG: /* Index */0,
                                page: page
                              };
                      }), Relude_Option.filter(function (page) {
                            return page >= 1;
                          })(Relude_Int.fromString(page)));
        }
    case 2 :
        var match = segments[0];
        switch (match) {
          case "tag" :
              var slug = segments[1];
              return {
                      TAG: /* TagSearch */1,
                      slug: slug,
                      page: 1
                    };
          case "uploads" :
              var filename = segments[1];
              return {
                      TAG: /* Uploads */4,
                      filename: filename
                    };
          default:
            return ;
        }
    case 3 :
        var match$1 = segments[0];
        if (match$1 !== "tag") {
          return ;
        }
        var slug$1 = segments[1];
        var page$1 = segments[2];
        return Relude_Option.map((function (page) {
                      return {
                              TAG: /* TagSearch */1,
                              slug: slug$1,
                              page: page
                            };
                    }), Relude_Option.filter(function (page) {
                          return page >= 1;
                        })(Relude_Int.fromString(page$1)));
    case 4 :
        var year = segments[0];
        var month = segments[1];
        var day = segments[2];
        var slug$2 = segments[3];
        return Relude_Option.map((function (param) {
                      return {
                              TAG: /* Entry */3,
                              year: param[0],
                              month: param[1],
                              day: param[2],
                              slug: slug$2,
                              id: undefined
                            };
                    }), Curry._2(Relude_Option.flatMap, (function (param) {
                          var month = param[1];
                          var year = param[0];
                          return Relude_Option.map((function (day) {
                                        return [
                                                year,
                                                month,
                                                day
                                              ];
                                      }), Relude_Option.filter(function (day) {
                                            if (day >= 1) {
                                              return day <= 31;
                                            } else {
                                              return false;
                                            }
                                          })(Relude_Int.fromString(day)));
                        }), Curry._2(Relude_Option.flatMap, (function (year) {
                              return Relude_Option.map((function (month) {
                                            return [
                                                    year,
                                                    month
                                                  ];
                                          }), Relude_Option.filter(function (month) {
                                                if (month >= 1) {
                                                  return month <= 12;
                                                } else {
                                                  return false;
                                                }
                                              })(Relude_Int.fromString(month)));
                            }), Relude_Int.fromString(year))));
    
  }
}

function buildEntryRoute(date, title, id) {
  return {
          TAG: /* Entry */3,
          year: date.getFullYear(),
          month: $$Date.getMonth(date),
          day: date.getDate(),
          slug: Utils.slug(title),
          id: id
        };
}

function _buildEntry(year, month, day, slug) {
  var month$1 = Relude_String.padStart(2, "0", Relude_Int.toString(month));
  var day$1 = Relude_String.padStart(2, "0", Relude_Int.toString(day));
  return "/" + year + "/" + month$1 + "/" + day$1 + "/" + slug + "/";
}

function build(route) {
  switch (route.TAG | 0) {
    case /* Index */0 :
        var page = route.page;
        if (page !== 1) {
          return "/" + page + "/";
        } else {
          return "/";
        }
    case /* TagSearch */1 :
        var page$1 = route.page;
        var slug = route.slug;
        if (page$1 !== 1) {
          return "/tag/" + slug + "/" + page$1 + "/";
        } else {
          return "/tag/" + slug + "/";
        }
    case /* About */2 :
        var id = route.id;
        if (id !== undefined) {
          return "/about/#" + id;
        } else {
          return "/about/";
        }
    case /* Entry */3 :
        var id$1 = route.id;
        var slug$1 = route.slug;
        var day = route.day;
        var month = route.month;
        var year = route.year;
        if (id$1 !== undefined) {
          return _buildEntry(year, month, day, slug$1) + ("#" + id$1);
        } else {
          return _buildEntry(year, month, day, slug$1);
        }
    case /* Uploads */4 :
        return "/uploads/" + route.filename;
    
  }
}

export {
  route ,
  buildEntryRoute ,
  _buildEntry ,
  build ,
  
}
/* Utils Not a pure module */
